uint64_t sub_1C5FFF79C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t TempSymbol;
  const char *v16;
  __int16 v17;

  if (!*(_QWORD *)(result + 8))
    return result;
  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (!*(_BYTE *)(v3 + 2108))
    return result;
  *(_QWORD *)(result + 56) = a2;
  v4 = *(_QWORD *)(result + 368);
  v5 = *(unsigned int *)(result + 384);
  if (!(_DWORD)v5)
    goto LABEL_9;
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_10;
      }
    }
LABEL_9:
    v7 = (uint64_t *)(v4 + 16 * v5);
  }
LABEL_10:
  if (v7 != (uint64_t *)(v4 + 16 * v5) && !v7[1])
  {
    v11 = *(_QWORD *)(result + 32);
    if (!v11)
    {
      v12 = *(_QWORD *)(v3 + 2056);
      v13 = v3 + 8;
      if (v12)
        v14 = v12;
      else
        v14 = v13;
      v16 = "tmp";
      v17 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v14, (uint64_t)&v16, 1);
      *(_QWORD *)(v2 + 32) = TempSymbol;
      result = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 272)
                                                                           + 192))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 272), TempSymbol, 0);
      v11 = *(_QWORD *)(v2 + 32);
    }
    v7[1] = v11;
  }
  return result;
}

unint64_t sub_1C5FFF8B0(unint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int v10;
  llvm::MachineBasicBlock *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t TempSymbol;
  const char *v17;
  __int16 v18;

  if (!*(_QWORD *)(result + 8))
    return result;
  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (!*(_BYTE *)(v2 + 2108))
    return result;
  v3 = *(_QWORD **)(result + 56);
  if ((*(_BYTE *)(v3[2] + 8) & 0x10) == 0)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = v3[3];
  }
  v4 = *(_QWORD *)(result + 392);
  v5 = *(unsigned int *)(result + 408);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    v7 = (_QWORD *)(v4 + 16 * v6);
    v8 = (_QWORD *)*v7;
    if (v3 == (_QWORD *)*v7)
      goto LABEL_12;
    v9 = 1;
    while (v8 != (_QWORD *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD **)(v4 + 16 * v6);
      if (v3 == v8)
      {
        v7 = (_QWORD *)(v4 + 16 * v6);
        goto LABEL_12;
      }
    }
  }
  v7 = (_QWORD *)(v4 + 16 * v5);
LABEL_12:
  if (v7 != (_QWORD *)(v4 + 16 * v5) && !v7[1])
  {
    v11 = (llvm::MachineBasicBlock *)v3[3];
    if (*((_BYTE *)v11 + 201) && ((v12 = (_BYTE *)v3[1], v12 == (char *)v11 + 48) || !v12))
    {
      result = llvm::MachineBasicBlock::getEndSymbol(v11);
      v1[4] = result;
    }
    else
    {
      result = v1[4];
      if (!result)
      {
        v13 = *(_QWORD *)(v2 + 2056);
        v14 = v2 + 8;
        if (v13)
          v15 = v13;
        else
          v15 = v14;
        v17 = "tmp";
        v18 = 259;
        TempSymbol = llvm::MCContext::createTempSymbol(v15, (uint64_t)&v17, 1);
        v1[4] = TempSymbol;
        (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v1[1] + 272) + 192))(*(_QWORD *)(v1[1] + 272), TempSymbol, 0);
        result = v1[4];
      }
    }
    v7[1] = result;
  }
  v1[7] = 0;
  return result;
}

_DWORD *sub_1C5FFFA08(uint64_t a1, uint64_t ****a2)
{
  uint64_t ***v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t ****v10;
  uint64_t ***v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t ****v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t ****v24;
  uint64_t v25;
  uint64_t ***v26;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_10;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2108))
    goto LABEL_10;
  v4 = *a2;
  if ((*((_BYTE *)*a2 + 23) & 0x20) == 0)
    goto LABEL_10;
  v5 = ***v4;
  v26 = *a2;
  v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 2480);
    v8 = v6 - 1;
    v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
    v10 = (uint64_t ****)(v7 + 40 * v9);
    v11 = *v10;
    if (*v10 == v4)
      goto LABEL_6;
    v18 = 0;
    v19 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v11 == (uint64_t ***)-8192;
      if (v20)
        v18 = v10;
      v21 = v9 + v19++;
      v9 = v21 & v8;
      v10 = (uint64_t ****)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == v4)
        goto LABEL_6;
    }
    if (v18)
      v24 = v18;
    else
      v24 = v10;
  }
  else
  {
    v24 = 0;
  }
  v10 = (uint64_t ****)sub_1C541AB24(v5 + 2480, (uint64_t)&v26, (uint64_t *)&v26, v24);
  v25 = (uint64_t)v26;
  v10[3] = 0;
  v10[4] = 0;
  *v10 = (uint64_t ***)v25;
  v10[1] = (uint64_t ***)(v10 + 3);
  v10[2] = (uint64_t ***)0x100000000;
LABEL_6:
  v12 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v12)
  {
    v13 = v10[1] + 1;
    v14 = 16 * v12;
    while (*((_DWORD *)v13 - 2))
    {
      v13 += 2;
      v14 -= 16;
      if (!v14)
        goto LABEL_10;
    }
    v22 = *v13;
    if (v22 && *(_DWORD *)(*(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 40) + 36))
      (*(void (**)(uint64_t, uint64_t ****))(*(_QWORD *)a1 + 136))(a1, a2);
  }
LABEL_10:
  sub_1C5FFFCC0((unsigned int *)(a1 + 272));
  v15 = *(_QWORD *)(a1 + 296);
  for (i = *(_QWORD *)(a1 + 304); i != v15; i -= 96)
  {
    v23 = *(void **)(i - 80);
    if ((void *)(i - 64) != v23)
      free(v23);
  }
  *(_QWORD *)(a1 + 304) = v15;
  sub_1C5FFFCC0((unsigned int *)(a1 + 320));
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
  sub_1C4ECACE0((unsigned int *)(a1 + 368));
  sub_1C4ECACE0((unsigned int *)(a1 + 392));
  return sub_1C5505510((_DWORD *)(a1 + 416));
}

_QWORD *sub_1C5FFFBD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  _QWORD *v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_15:
    result = sub_1C51944FC(a1, (uint64_t)a2, a2, v18);
    *result = *a2;
    result[1] = *a3;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v17 = 1;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)a1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = result;
      v16 = v10 + v14++;
      v10 = v16 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_11;
    }
    if (v13)
      v18 = v13;
    else
      v18 = result;
    goto LABEL_15;
  }
LABEL_11:
  v17 = 0;
LABEL_16:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v17;
  return result;
}

unsigned int *sub_1C5FFFCC0(unsigned int *result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C4DD9E20(result);
    }
    else
    {
      if (v1)
      {
        v2 = *(_QWORD **)result;
        v3 = *(_QWORD *)result + 24 * v1;
        do
        {
          *v2 = -4096;
          v2[1] = -4096;
          v2 += 3;
        }
        while (v2 != (_QWORD *)v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1C5FFFD14()
{
  char v1;
  char *v2;
  int v3;

  v3 = 1;
  v1 = 1;
  v2 = &v1;
  sub_1C63BECD0(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8292B8, &dword_1C475E000);
}

BOOL sub_1C5FFFD68(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24 * v2 - 8);
  v4 = *(unsigned int *)(a1 + 120);
  if (v3 == v4)
  {
    *(_DWORD *)(a1 + 8) = v2 - 1;
  }
  else
  {
    v6 = "debug_loc";
    v7 = 259;
    *(_QWORD *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8) - 16) = llvm::MCContext::createTempSymbol(*(_QWORD *)(a2 + 264), (uint64_t)&v6, 1);
  }
  return v3 != v4;
}

uint64_t sub_1C5FFFE00(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 112) + 32 * *(unsigned int *)(result + 120);
  if (*(_QWORD *)(v1 - 16) == *(_QWORD *)(result + 1160))
  {
    v2 = result;
    result = sub_1C5FFFE64(result + 1432, *(_QWORD *)(v2 + 1432) + 24 * *(_QWORD *)(v1 - 8), *(__int128 **)(v2 + 1440));
    --*(_DWORD *)(v2 + 120);
  }
  return result;
}

uint64_t sub_1C5FFFE64(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((__int128 *)a2 != a3)
  {
    sub_1C5057CC0(a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_1C5FFFEDC(uint64_t a1)
{
  uint64_t v2;
  int v4;

  if (sub_1C5FFFD68(*(_QWORD *)a1, *(_QWORD *)(a1 + 8)))
  {
    sub_1C6008CB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    v2 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v2 + 36) = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(a1 + 41))
    {
      v4 = *(unsigned __int8 *)(v2 + 41);
      *(_BYTE *)(v2 + 40) = *(_BYTE *)(a1 + 40);
      if (!v4)
        *(_BYTE *)(v2 + 41) = 1;
    }
  }
  return a1;
}

uint64_t sub_1C5FFFF44(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(unsigned __int16 *)(result + 12);
  v3 = *(unsigned int *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *(unsigned __int16 *)(result + 12);
    v33 = a2;
    v38 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v3 + 1, 4);
    v2 = v28;
    a2 = v33;
    result = v38;
    LODWORD(v3) = *(_DWORD *)(v33 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v3) = v2;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v5;
  v6 = *(unsigned __int8 *)(result + 14);
  if (v5 >= v4)
  {
    v29 = *(unsigned __int8 *)(result + 14);
    v34 = a2;
    v39 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v5 + 1, 4);
    v6 = v29;
    a2 = v34;
    result = v39;
    LODWORD(v5) = *(_DWORD *)(v34 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v6;
  ++*(_DWORD *)(a2 + 8);
  v7 = *(unsigned int *)(result + 24);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 16 * v7;
    do
    {
      v10 = *(_QWORD *)(result + 16);
      v11 = *(unsigned __int16 *)(v10 + v8);
      v12 = *(unsigned int *)(a2 + 8);
      if (v12 >= *(unsigned int *)(a2 + 12))
      {
        v25 = v8;
        v20 = *(_QWORD *)(result + 16);
        v22 = v9;
        v30 = a2;
        v35 = result;
        v18 = *(unsigned __int16 *)(v10 + v8);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 4);
        v11 = v18;
        v10 = v20;
        v9 = v22;
        v8 = v25;
        a2 = v30;
        result = v35;
        v12 = *(unsigned int *)(v30 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = v11;
      v13 = *(_DWORD *)(a2 + 12);
      v14 = (*(_DWORD *)(a2 + 8) + 1);
      *(_DWORD *)(a2 + 8) = v14;
      v15 = v10 + v8;
      v16 = *(unsigned __int16 *)(v10 + v8 + 2);
      if (v14 >= v13)
      {
        v26 = v8;
        v21 = v10;
        v23 = v9;
        v31 = a2;
        v36 = result;
        v19 = v10 + v8;
        v17 = *(unsigned __int16 *)(v10 + v8 + 2);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 4);
        v16 = v17;
        v15 = v19;
        v10 = v21;
        v9 = v23;
        v8 = v26;
        a2 = v31;
        result = v36;
        LODWORD(v14) = *(_DWORD *)(v31 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v14) = v16;
      ++*(_DWORD *)(a2 + 8);
      if (*(_WORD *)(v15 + 2) == 33)
      {
        v27 = v8;
        v24 = v9;
        v32 = a2;
        v37 = result;
        sub_1C4F52194(a2, *(_QWORD *)(v10 + v8 + 8));
        v9 = v24;
        v8 = v27;
        a2 = v32;
        result = v37;
      }
      v8 += 16;
    }
    while (v9 != v8);
  }
  return result;
}

void sub_1C600012C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;

  v4 = *(unsigned __int16 *)(a1 + 12);
  v5 = (char *)llvm::dwarf::TagString((llvm::dwarf *)v4);
  sub_1C5FFA814(a2, v4, v5, 0);
  if (*(_BYTE *)(a1 + 14))
    v6 = "DW_CHILDREN_yes";
  else
    v6 = "DW_CHILDREN_no";
  sub_1C5FFA814(a2, *(unsigned __int8 *)(a1 + 14), v6, 0);
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 16 * v7;
    do
    {
      v10 = (unsigned __int16 *)(*(_QWORD *)(a1 + 16) + v8);
      v11 = *v10;
      v12 = (char *)llvm::dwarf::AttributeString((llvm::dwarf *)v11);
      sub_1C5FFA814(a2, v11, v12, 0);
      v13 = v10[1];
      v14 = (char *)llvm::dwarf::FormEncodingString((llvm::dwarf *)v13);
      sub_1C5FFA814(a2, v13, v14, 0);
      if (v10[1] == 33)
        llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *((_QWORD *)v10 + 1));
      v8 += 16;
    }
    while (v9 != v8);
  }
  sub_1C5FFA814(a2, 0, "EOM(1)", 0);
  sub_1C5FFA814(a2, 0, "EOM(2)", 0);
}

uint64_t sub_1C6000250(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v6;
  char *v7;

  v2 = *(char **)(a1 + 24);
  v3 = *(char **)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      v4 = *(void **)(*(_QWORD *)v2 + 16);
      if (v4 != (void *)(*(_QWORD *)v2 + 32))
      {
        v6 = v3;
        v7 = v2;
        free(v4);
        v3 = v6;
        v2 = v7;
      }
      v2 += 8;
    }
    while (v2 != v3);
    v2 = *(char **)(a1 + 24);
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1C60002D4(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  BOOL v5;
  char v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  void **p_src;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  unint64_t v24;
  int v25;
  _DWORD *v26;
  void **v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  void **v45;
  void **v46;
  uint64_t v47;
  _DWORD *v48;
  void **v49;
  uint64_t v50;
  _BYTE v51[7];
  void *__src;
  uint64_t v53;
  _BYTE v54[192];
  void *v55;
  uint64_t v56;
  _BYTE v57[128];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[18];

  v60[16] = *MEMORY[0x1E0C80C00];
  v55 = v57;
  v56 = 0x2000000000;
  v4 = *(_WORD *)(a2 + 28);
  if (*(_BYTE *)(a2 + 30))
    v5 = 0;
  else
    v5 = *(_QWORD *)(a2 + 32) == 0;
  v6 = !v5;
  v50 = 0;
  *(_DWORD *)v51 = 0;
  *(_WORD *)&v51[4] = v4;
  v51[6] = v6;
  __src = v54;
  v53 = 0xC00000000;
  v7 = *(_QWORD **)(a2 + 8);
  if (v7)
  {
    v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = 0;
      p_src = &__src;
      do
      {
        v11 = *(unsigned __int16 *)(v8 + 14);
        v12 = *(unsigned __int16 *)(v8 + 12);
        if (v11 == 33)
        {
          v13 = *(_QWORD *)(v8 + 16);
          if (v9 >= HIDWORD(v53))
          {
            v45 = p_src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)p_src, (uint64_t)v54, v9 + 1, 16);
            p_src = v45;
            v9 = v53;
          }
          v14 = v12 | 0x210000;
        }
        else
        {
          if (v9 >= HIDWORD(v53))
          {
            v46 = p_src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)p_src, (uint64_t)v54, v9 + 1, 16);
            p_src = v46;
            v9 = v53;
          }
          v13 = 0;
          v14 = v12 | (v11 << 16);
        }
        v15 = (uint64_t *)((char *)__src + 16 * v9);
        *v15 = v14;
        v15[1] = v13;
        v9 = v53 + 1;
        LODWORD(v53) = v53 + 1;
        v16 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 4) != 0)
          break;
        v8 = v16 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v16 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  sub_1C5FFFF44((uint64_t)&v50, (uint64_t)&v55);
  v17 = sub_1C4F5AB38(v55, (uint64_t)v55 + 4 * v56);
  v19 = *(_QWORD *)(a1 + 8) + 8 * ((*(_DWORD *)(a1 + 16) - 1) & v17);
  v20 = *(_QWORD *)v19;
  v58 = v60;
  v59 = 0x2000000000;
  if (v20)
    v21 = (v20 & 1) == 0;
  else
    v21 = 0;
  if (v21)
  {
    while (1)
    {
      LOBYTE(v17) = sub_1C6001FB4(v17, v20, (uint64_t)&v55, v18, (uint64_t)&v58);
      if ((v17 & 1) != 0)
        break;
      LODWORD(v59) = 0;
      v20 = *(_QWORD *)v20;
      if (v20)
        v22 = (v20 & 1) == 0;
      else
        v22 = 0;
      if (!v22)
      {
        v20 = 0;
        goto LABEL_31;
      }
    }
    v19 = 0;
LABEL_31:
    if (v58 != v60)
      free(v58);
    if (v20)
    {
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(v20 + 8);
      goto LABEL_35;
    }
  }
  v24 = sub_1C484358C(*(_QWORD *)a1, 224, 3);
  v20 = v24;
  *(_QWORD *)v24 = v50;
  v25 = *(_DWORD *)&v51[3];
  *(_DWORD *)(v24 + 8) = *(_DWORD *)v51;
  v26 = (_DWORD *)(v24 + 8);
  *(_DWORD *)(v24 + 11) = v25;
  *(_QWORD *)(v24 + 16) = v24 + 32;
  v27 = (void **)(v24 + 16);
  *(_QWORD *)(v24 + 24) = 0xC00000000;
  if ((uint64_t *)v24 != &v50)
  {
    v28 = v53;
    if ((_DWORD)v53)
    {
      if (__src != v54)
      {
        *(_QWORD *)(v24 + 16) = __src;
        *(_DWORD *)(v24 + 24) = v28;
        *(_DWORD *)(v24 + 28) = HIDWORD(v53);
        __src = v54;
        HIDWORD(v53) = 0;
        goto LABEL_47;
      }
      if (v53 >= 0xD)
      {
        v49 = (void **)(v24 + 16);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 16, v24 + 32, v53, 16);
        v27 = v49;
        v29 = v53;
        if (!(_DWORD)v53)
          goto LABEL_46;
      }
      else
      {
        v29 = v53;
      }
      memcpy(*v27, __src, 16 * v29);
LABEL_46:
      *(_DWORD *)(v20 + 24) = v28;
LABEL_47:
      LODWORD(v53) = 0;
    }
  }
  v31 = *(uint64_t **)(a1 + 32);
  v30 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v31 < v30)
  {
    *v31 = v20;
    v39 = v31 + 1;
  }
  else
  {
    v48 = v26;
    v32 = *(_QWORD **)(a1 + 24);
    v33 = v31 - v32;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      abort();
    v35 = v30 - (_QWORD)v32;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_1C4764EE4();
      v37 = (char *)operator new(8 * v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = (uint64_t *)&v37[8 * v33];
    *v38 = v20;
    v39 = v38 + 1;
    if (v31 != v32)
    {
      do
      {
        v40 = *--v31;
        *--v38 = v40;
      }
      while (v31 != v32);
      v31 = *(uint64_t **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 32) = v39;
    *(_QWORD *)(a1 + 40) = &v37[8 * v36];
    v26 = v48;
    if (v31)
      operator delete(v31);
  }
  *(_QWORD *)(a1 + 32) = v39;
  v41 = ((unint64_t)v39 - *(_QWORD *)(a1 + 24)) >> 3;
  *v26 = v41;
  *(_DWORD *)(a2 + 24) = v41;
  v42 = *(_DWORD *)(a1 + 16);
  v43 = *(_DWORD *)(a1 + 20) + 1;
  if (v43 > 2 * v42)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 8, 2 * v42, (uint64_t)off_1E81AB0C8);
    v58 = v60;
    v59 = 0x2000000000;
    v19 = *(_QWORD *)(a1 + 8)
        + 8 * ((*(_DWORD *)(a1 + 16) - 1) & sub_1C63BF824(v47, v20, (uint64_t)&v58));
    if (v58 != v60)
      free(v58);
    v43 = *(_DWORD *)(a1 + 20) + 1;
  }
  *(_DWORD *)(a1 + 20) = v43;
  v44 = *(_QWORD *)v19;
  if (!*(_QWORD *)v19)
    v44 = v19 | 1;
  *(_QWORD *)v20 = v44;
  *(_QWORD *)v19 = v20;
LABEL_35:
  if (__src != v54)
    free(__src);
  if (v55 != v57)
    free(v55);
  return v20;
}

void sub_1C6000794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;

  v3 = (uint64_t **)(a1 + 24);
  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 272) + 168))(*(_QWORD *)(a2 + 272), a3, 0);
    sub_1C60007EC(a2, v3);
  }
}

void sub_1C60007EC(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      v5 = *v3++;
      sub_1C5FFA814(a1, *(unsigned int *)(v5 + 8), "Abbreviation Code", 0);
      sub_1C600012C(v5, a1);
    }
    while (v3 != v4);
  }
  sub_1C5FFA814(a1, 0, "EOM(3)", 0);
}

uint64_t sub_1C600086C(unint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;

  v1 = a1;
  while (1)
  {
    v2 = *(unsigned __int16 *)(v1 + 28) - 17;
    v3 = v2 > 0x39;
    v4 = (1 << v2) & 0x201000000000001;
    if (!v3 && v4 != 0)
      break;
    v6 = *(_QWORD *)(v1 + 40);
    if ((v6 & 4) != 0)
      v1 = 0;
    else
      v1 = v6 & 0xFFFFFFFFFFFFFFF8;
  }
  return *(_QWORD *)((*(_QWORD *)(v1 + 40) & ((uint64_t)(*(_QWORD *)(v1 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x40)
       + *(unsigned int *)(a1 + 16);
}

unint64_t sub_1C60008CC(unint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 0;
  while (1)
  {
    v1 = *(unsigned __int16 *)(a1 + 28) - 17;
    v2 = v1 > 0x39;
    v3 = (1 << v1) & 0x201000000000001;
    if (!v2 && v3 != 0)
      break;
    v6 = 0;
    v5 = *(_QWORD *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
      a1 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0xFFFFFFFFFFFFFFF8) != 0)
        continue;
    }
    return v6;
  }
  return *(_QWORD *)(a1 + 40) & ((uint64_t)(*(_QWORD *)(a1 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_1C6000930@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD **)(result + 8);
  if (v3 && (v4 = *v3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    while (*(unsigned __int16 *)(v4 + 12) != a2)
    {
      v5 = *(_QWORD *)v4;
      if ((v5 & 4) == 0)
      {
        v4 = v5 & 0xFFFFFFFFFFFFFFF8;
        if (v4)
          continue;
      }
      goto LABEL_6;
    }
    v6 = *(_DWORD *)(v4 + 8);
    *(_DWORD *)a3 = v6;
    *(_WORD *)(a3 + 4) = a2;
    *(_WORD *)(a3 + 6) = *(_WORD *)(v4 + 14);
    switch(v6)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        *(_QWORD *)(a3 + 8) = *(_QWORD *)(v4 + 16);
        break;
      default:
        return result;
    }
  }
  else
  {
LABEL_6:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void sub_1C60009AC(llvm::raw_ostream *this, _QWORD **a2, char *a3, size_t a4, unsigned int a5, unsigned int a6)
{
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  size_t v14;
  void **p_b;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  const char *v19;
  size_t v20;
  _DWORD *v21;
  _BYTE *v22;
  _WORD *v23;
  _BYTE *v24;
  size_t v25;
  const char *v26;
  size_t v27;
  _BYTE *v28;
  uint64_t v29;
  void **__b;
  size_t v31;
  uint64_t v32;

  v12 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)*((_QWORD *)this + 4);
  if (a4 <= v12 - (uint64_t)v11)
  {
    if (a4)
    {
      memcpy(v11, a3, a4);
      v11 = (_QWORD *)(*((_QWORD *)this + 4) + a4);
      *((_QWORD *)this + 4) = v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, a3, a4);
    v11 = (_QWORD *)*((_QWORD *)this + 4);
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v11 > 7uLL)
  {
    *v11 = 0x203A657A6953203ALL;
    *((_QWORD *)this + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(this, ": Size: ", 8uLL);
  }
  sub_1C5E21910(this, a5, 0, 0, 0);
  v13 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v13)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v13 = 10;
    ++*((_QWORD *)this + 4);
  }
  v14 = a6;
  if (a6 >= 0x17)
  {
    if ((a6 | 7) == 0x17)
      v16 = (a6 & 0xFFFFFFF8) + 8;
    else
      v16 = a6 | 7;
    p_b = (void **)operator new(v16 + 1);
    v31 = v14;
    v32 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    __b = p_b;
  }
  else
  {
    HIBYTE(v32) = a6;
    p_b = (void **)&__b;
    if (!a6)
      goto LABEL_17;
  }
  memset(p_b, 32, v14);
LABEL_17:
  *((_BYTE *)p_b + v14) = 0;
  if (*a2)
  {
    v17 = **a2 & 0xFFFFFFFFFFFFFFF8;
    if (v17)
    {
      v18 = 0;
      do
      {
        if (v32 >= 0)
          v19 = (const char *)&__b;
        else
          v19 = (const char *)__b;
        if (v32 >= 0)
          v20 = HIBYTE(v32) & 0x7F;
        else
          v20 = v31;
        llvm::raw_ostream::write(this, v19, v20);
        v21 = (_DWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v21 > 3uLL)
        {
          *v21 = 1533766722;
          *((_QWORD *)this + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(this, "Blk[", 4uLL);
        }
        sub_1C5E21910(this, v18, 0, 0, 0);
        v22 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v22)
        {
          llvm::raw_ostream::write(this, "]", 1uLL);
          v23 = (_WORD *)*((_QWORD *)this + 4);
        }
        else
        {
          *v22 = 93;
          v23 = (_WORD *)(*((_QWORD *)this + 4) + 1);
          *((_QWORD *)this + 4) = v23;
        }
        if (*((_QWORD *)this + 3) - (_QWORD)v23 > 1uLL)
        {
          *v23 = 8224;
          v24 = (_BYTE *)(*((_QWORD *)this + 4) + 2);
          *((_QWORD *)this + 4) = v24;
        }
        else
        {
          llvm::raw_ostream::write(this, "  ", 2uLL);
          v24 = (_BYTE *)*((_QWORD *)this + 4);
        }
        v26 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*(unsigned __int16 *)(v17 + 14));
        v27 = v25;
        if (v25 <= *((_QWORD *)this + 3) - (_QWORD)v24)
        {
          if (v25)
          {
            memcpy(v24, v26, v25);
            v24 = (_BYTE *)(*((_QWORD *)this + 4) + v27);
            *((_QWORD *)this + 4) = v24;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, v26, v25);
          v24 = (_BYTE *)*((_QWORD *)this + 4);
        }
        if (*((_BYTE **)this + 3) == v24)
        {
          llvm::raw_ostream::write(this, " ", 1uLL);
        }
        else
        {
          *v24 = 32;
          ++*((_QWORD *)this + 4);
        }
        sub_1C63BF0AC(v17 + 8, this);
        v28 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v28)
        {
          llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *v28 = 10;
          ++*((_QWORD *)this + 4);
        }
        v29 = *(_QWORD *)v17;
        if ((*(_QWORD *)v17 & 4) != 0)
          break;
        ++v18;
        v17 = v29 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v29 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  if (SHIBYTE(v32) < 0)
    operator delete(__b);
}

void sub_1C6000D5C(uint64_t a1, llvm::raw_ostream *a2, unsigned int a3)
{
  size_t v6;
  void **p_b;
  uint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  const char *v15;
  size_t v16;
  size_t v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  const char *v21;
  size_t v22;
  void *v23;
  _BYTE *v24;
  _QWORD *v25;
  unint64_t v26;
  const char *v27;
  size_t v28;
  size_t v29;
  const char *v30;
  size_t v31;
  _WORD *v32;
  _BYTE *v33;
  size_t v34;
  const char *v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _QWORD v44[3];
  void **__b;
  size_t v46;
  uint64_t v47;

  v6 = a3;
  if (a3 >= 0x17)
  {
    if ((a3 | 7) == 0x17)
      v8 = (a3 & 0xFFFFFFF8) + 8;
    else
      v8 = a3 | 7;
    p_b = (void **)operator new(v8 + 1);
    v46 = v6;
    v47 = v8 - 0x7FFFFFFFFFFFFFFFLL;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v47) = a3;
  p_b = (void **)&__b;
  if (a3)
LABEL_8:
    memset(p_b, 32, v6);
  *((_BYTE *)p_b + v6) = 0;
  if (v47 >= 0)
    v9 = (const char *)&__b;
  else
    v9 = (const char *)__b;
  if (v47 >= 0)
    v10 = HIBYTE(v47) & 0x7F;
  else
    v10 = v46;
  llvm::raw_ostream::write(a2, v9, v10);
  v11 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 4)
  {
    *(_BYTE *)(v11 + 4) = 32;
    *(_DWORD *)v11 = 979724612;
    *((_QWORD *)a2 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Die: ", 5uLL);
  }
  v44[0] = &unk_1E819DF30;
  v44[1] = "0x%lx";
  v44[2] = a1;
  llvm::raw_ostream::operator<<(a2, (uint64_t)v44);
  v12 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 9)
  {
    *(_WORD *)(v12 + 8) = 8250;
    *(_QWORD *)v12 = *(_QWORD *)", Offset: ";
    *((_QWORD *)a2 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", Offset: ", 0xAuLL);
  }
  sub_1C5E21910(a2, *(unsigned int *)(a1 + 16), 0, 0, 0);
  v13 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 7uLL)
  {
    *v13 = 0x203A657A6953202CLL;
    *((_QWORD *)a2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", Size: ", 8uLL);
  }
  sub_1C5E21910(a2, *(unsigned int *)(a1 + 20), 0, 0, 0);
  v14 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v14)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v14 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  if (v47 >= 0)
    v15 = (const char *)&__b;
  else
    v15 = (const char *)__b;
  if (v47 >= 0)
    v16 = HIBYTE(v47) & 0x7F;
  else
    v16 = v46;
  llvm::raw_ostream::write(a2, v15, v16);
  v18 = llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(a1 + 28));
  v19 = v17;
  v20 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v17 <= *((_QWORD *)a2 + 3) - (_QWORD)v20)
  {
    if (v17)
    {
      memcpy(v20, v18, v17);
      v20 = (_BYTE *)(*((_QWORD *)a2 + 4) + v19);
      *((_QWORD *)a2 + 4) = v20;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, v18, v17);
    v20 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  if (*((_BYTE **)a2 + 3) == v20)
  {
    llvm::raw_ostream::write(a2, " ", 1uLL);
  }
  else
  {
    *v20 = 32;
    ++*((_QWORD *)a2 + 4);
  }
  if (*(_BYTE *)(a1 + 30) || *(_QWORD *)(a1 + 32))
  {
    v21 = "DW_CHILDREN_yes";
    v22 = 15;
  }
  else
  {
    v21 = "DW_CHILDREN_no";
    v22 = 14;
  }
  v23 = (void *)*((_QWORD *)a2 + 4);
  if (v22 <= *((_QWORD *)a2 + 3) - (_QWORD)v23)
  {
    memcpy(v23, v21, v22);
    v24 = (_BYTE *)(*((_QWORD *)a2 + 4) + v22);
    *((_QWORD *)a2 + 4) = v24;
  }
  else
  {
    llvm::raw_ostream::write(a2, v21, v22);
    v24 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  if (*((_BYTE **)a2 + 3) == v24)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v24 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  v25 = *(_QWORD **)(a1 + 8);
  if (v25)
  {
    v26 = *v25 & 0xFFFFFFFFFFFFFFF8;
    if (v26)
    {
      do
      {
        if (v47 >= 0)
          v27 = (const char *)&__b;
        else
          v27 = (const char *)__b;
        if (v47 >= 0)
          v28 = HIBYTE(v47) & 0x7F;
        else
          v28 = v46;
        llvm::raw_ostream::write(a2, v27, v28);
        v30 = llvm::dwarf::AttributeString((llvm::dwarf *)*(unsigned __int16 *)(v26 + 12));
        v31 = v29;
        v32 = (_WORD *)*((_QWORD *)a2 + 4);
        if (v29 <= *((_QWORD *)a2 + 3) - (_QWORD)v32)
        {
          if (v29)
          {
            memcpy(v32, v30, v29);
            v32 = (_WORD *)(*((_QWORD *)a2 + 4) + v31);
            *((_QWORD *)a2 + 4) = v32;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v30, v29);
          v32 = (_WORD *)*((_QWORD *)a2 + 4);
        }
        if (*((_QWORD *)a2 + 3) - (_QWORD)v32 > 1uLL)
        {
          *v32 = 8224;
          v33 = (_BYTE *)(*((_QWORD *)a2 + 4) + 2);
          *((_QWORD *)a2 + 4) = v33;
        }
        else
        {
          llvm::raw_ostream::write(a2, "  ", 2uLL);
          v33 = (_BYTE *)*((_QWORD *)a2 + 4);
        }
        v35 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*(unsigned __int16 *)(v26 + 14));
        v36 = v34;
        if (v34 <= *((_QWORD *)a2 + 3) - (_QWORD)v33)
        {
          if (v34)
          {
            memcpy(v33, v35, v34);
            v33 = (_BYTE *)(*((_QWORD *)a2 + 4) + v36);
            *((_QWORD *)a2 + 4) = v33;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v35, v34);
          v33 = (_BYTE *)*((_QWORD *)a2 + 4);
        }
        if (*((_BYTE **)a2 + 3) == v33)
        {
          llvm::raw_ostream::write(a2, " ", 1uLL);
        }
        else
        {
          *v33 = 32;
          ++*((_QWORD *)a2 + 4);
        }
        sub_1C63BF0AC(v26 + 8, a2);
        v37 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v37)
        {
          llvm::raw_ostream::write(a2, "\n", 1uLL);
        }
        else
        {
          *v37 = 10;
          ++*((_QWORD *)a2 + 4);
        }
        v38 = *(_QWORD *)v26;
        if ((*(_QWORD *)v26 & 4) != 0)
          break;
        v26 = v38 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v38 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  v39 = *(_QWORD **)(a1 + 32);
  if (v39)
  {
    v40 = (uint64_t *)(*v39 & 0xFFFFFFFFFFFFFFF8);
    if (v40)
    {
      v41 = a3 + 4;
      do
      {
        sub_1C6000D5C(v40, a2, v41);
        v42 = *v40;
        if ((*v40 & 4) != 0)
          break;
        v40 = (uint64_t *)(v42 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v42 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  v43 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v43)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v43 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  if (SHIBYTE(v47) < 0)
    operator delete(__b);
}

uint64_t sub_1C6001330(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;

  sub_1C60002D4(a3, a1);
  *(_DWORD *)(a1 + 16) = a4;
  v8 = *(unsigned int *)(a1 + 24);
  LODWORD(v9) = a4;
  do
  {
    v9 = (v9 + 1);
    v10 = v8 > 0x7F;
    v8 >>= 7;
  }
  while (v10);
  v11 = *(_QWORD **)(a1 + 8);
  if (v11)
  {
    v12 = (uint64_t *)(*v11 & 0xFFFFFFFFFFFFFFF8);
    if (v12)
    {
      do
      {
        sub_1C6001428((uint64_t)(v12 + 1));
        v9 = (v13 + v9);
        v14 = *v12;
        if ((*v12 & 4) != 0)
          break;
        v12 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v14 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  v15 = *(_QWORD **)(a1 + 32);
  if (*(_BYTE *)(a1 + 30))
  {
    if (!v15)
    {
LABEL_15:
      v9 = (v9 + 1);
      goto LABEL_9;
    }
LABEL_11:
    v17 = (uint64_t *)(*v15 & 0xFFFFFFFFFFFFFFF8);
    if (v17)
    {
      do
      {
        v9 = sub_1C6001330(v17, a2, a3, v9);
        v18 = *v17;
        if ((*v17 & 4) != 0)
          break;
        v17 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v18 & 0xFFFFFFFFFFFFFFF8) != 0);
      a4 = *(_DWORD *)(a1 + 16);
    }
    goto LABEL_15;
  }
  if (v15)
    goto LABEL_11;
LABEL_9:
  *(_DWORD *)(a1 + 20) = v9 - a4;
  return v9;
}

void sub_1C6001428(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1C600145C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int16 *)(a2 + 6);
  if (v2 == 6)
    return 4;
  if (v2 != 23)
    return 8;
  if (*(_BYTE *)(a1 + 3))
    return 8;
  return 4;
}

uint64_t sub_1C6001608@<X0>(uint64_t a1@<X8>)
{
  return sub_1C63BF29C(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 6));
}

void sub_1C6001638()
{
  JUMPOUT(0x1C60015FCLL);
}

void sub_1C6001660()
{
  JUMPOUT(0x1C60015FCLL);
}

void sub_1C600166C()
{
  JUMPOUT(0x1C6001528);
}

void sub_1C6001678(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;

  switch(*(_DWORD *)a1)
  {
    case 1:
      sub_1C6001878((uint64_t *)(a1 + 8), a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 2:
      sub_1C6001984((_QWORD *)(a1 + 8), a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 3:
      sub_1C63BF164((uint64_t *)(a1 + 8), (_QWORD *)a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 4:
      sub_1C6001A28((uint64_t *)(a1 + 8), a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 5:
      llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 568)+ 16 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)+ 8)+ 16), 4u);
      break;
    case 6:
      sub_1C6001AA0(*(uint64_t **)(a1 + 8), a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 7:
      sub_1C6001AF4(a1 + 8, a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 8:
      sub_1C63BF1DC(*(_QWORD *)(a1 + 8), a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 9:
      sub_1C6001D18(*(_QWORD *)(a1 + 8), a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 0xA:
      sub_1C6001DD0((unint64_t *)(a1 + 8), a2, *(unsigned __int16 *)(a1 + 6));
      break;
    case 0xB:
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 272) + 488))(*(_QWORD *)(a2 + 272), **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      sub_1C5FF42EC(a2, 0);
      break;
    case 0xC:
      v3 = *(unint64_t **)(a1 + 8);
      llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *v3, 0);
      v5 = v3[1];
      v6 = v3[2];
      sub_1C5FF6B7C((_QWORD *)a2);
      (*(void (**)(_QWORD, unint64_t, unint64_t, uint64_t))(**(_QWORD **)(a2 + 272) + 832))(*(_QWORD *)(a2 + 272), v5, v6, 4);
      break;
    default:
      return;
  }
}

void sub_1C6001878(uint64_t *a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int16 v8;

  switch(a3)
  {
    case 1:
    case 5:
    case 6:
    case 7:
    case 11:
    case 12:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 28:
    case 29:
    case 31:
    case 32:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 44:
      goto LABEL_2;
    case 2:
    case 3:
    case 4:
    case 8:
    case 9:
    case 10:
    case 22:
    case 24:
    case 30:
    case 34:
    case 43:
      __break(1u);
      return;
    case 13:
      llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *a1);
      return;
    case 15:
    case 21:
    case 26:
    case 27:
    case 35:
      goto LABEL_6;
    case 25:
    case 33:
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 272) + 152))(*(_QWORD *)(a2 + 272));
      return;
    default:
      if ((a3 - 7937) >= 2)
      {
LABEL_2:
        v3 = *(_QWORD **)(a2 + 272);
        v4 = *a1;
        v5 = ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 248) + 248) + 4) << 13) + 57344) & 0xFF0000 | (*(unsigned __int8 *)(v3[1] + 1626) << 24) | *(unsigned __int16 *)(v3[1] + 1624);
        v8 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 256) + 424);
        v7 = v5;
        v6 = sub_1C6001E10(a1, (unsigned int *)&v7, a3);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v3 + 512))(v3, v4, v6);
      }
      else
      {
LABEL_6:
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *a1, 0);
      }
      return;
  }
}

void sub_1C6001984(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 != 14)
  {
    v4 = *(unsigned int *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24);
    goto LABEL_4;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 256) + 424))
  {
    v4 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
    a3 = 14;
LABEL_4:
    sub_1C6001878(&v4, a2, a3);
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 272) + 8) + 1626))
    v3 = 8;
  else
    v3 = 4;
  sub_1C5FF4334(a2, *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 8), 0, v3, 1);
}

uint64_t sub_1C6001A28(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;

  if (a3 == 1)
  {
    v3 = (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 248) + 248) + 4) << 13) + 57344) >> 16);
  }
  else if (a3 > 13)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 272) + 8) + 1626))
      v3 = 8;
    else
      v3 = 4;
  }
  else if (a3 == 6)
  {
    v3 = 4;
  }
  else
  {
    v3 = 8;
  }
  return sub_1C5FF4334(a2, *a1, 0, v3, a3 != 1);
}

uint64_t sub_1C6001AA0(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *a1;
  v6 = a1[1];
  v7 = *(_QWORD **)(a2 + 272);
  if (a3 == 6)
  {
    v8 = 4;
  }
  else if (a3 == 23)
  {
    if (*(_BYTE *)(v7[1] + 1626))
      v8 = 8;
    else
      v8 = 4;
  }
  else
  {
    v8 = 8;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v7 + 832))(v7, v5, v6, v8);
}

void sub_1C6001AF4(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  unsigned __int8 v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  __int16 v31;

  if ((a3 - 17) >= 4)
  {
    if (a3 == 16)
    {
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)a1;
      while (1)
      {
        v10 = *(unsigned __int16 *)(v9 + 28) - 17;
        v11 = v10 > 0x39;
        v12 = (1 << v10) & 0x201000000000001;
        if (!v11 && v12 != 0)
          break;
        v14 = *(_QWORD *)(v9 + 40);
        if ((v14 & 4) != 0)
          v9 = 0;
        else
          v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      }
      v15 = *(_QWORD *)((*(_QWORD *)(v9 + 40) & ((uint64_t)(*(_QWORD *)(v9 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                      + 0x40)
          + *(unsigned int *)(v8 + 16);
      while (1)
      {
        v16 = *(unsigned __int16 *)(v8 + 28) - 17;
        v11 = v16 > 0x39;
        v17 = (1 << v16) & 0x201000000000001;
        if (!v11 && v17 != 0)
          break;
        v19 = *(_QWORD *)(v8 + 40);
        if ((v19 & 4) != 0)
          v8 = 0;
        else
          v8 = v19 & 0xFFFFFFFFFFFFFFF8;
      }
      v20 = *(_QWORD *)(v8 + 40) & ((uint64_t)(*(_QWORD *)(v8 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
      v21 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 16))(v20);
      if (v21)
      {
        v26 = v21;
        v27 = sub_1C5FF6B7C((_QWORD *)a2);
        if ((v27 & 0xFF000000) != 0)
          v28 = 8;
        else
          v28 = 4;
        if ((unsigned __int16)v27 == 2)
          v29 = BYTE2(v27);
        else
          v29 = v28;
        sub_1C5FF4334(a2, v26, v15, v29, 1);
      }
      else
      {
        v22 = *(_QWORD **)(a2 + 272);
        v23 = v22[1];
        if (*(_BYTE *)(v23 + 1626))
          v24 = 8;
        else
          v24 = 4;
        if (*(_WORD *)(v23 + 1624) == 2)
          v25 = ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 248) + 248) + 4) << 13) + 57344) >> 16;
        else
          v25 = v24;
        (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v22 + 512))(v22, v15, v25);
      }
    }
    else
    {
      llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *(unsigned int *)(*(_QWORD *)a1 + 16), 0);
    }
  }
  else
  {
    v4 = *(_QWORD **)(a2 + 272);
    v5 = *(unsigned int *)(*(_QWORD *)a1 + 16);
    v6 = ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 248) + 248) + 4) << 13) + 57344) & 0xFF0000 | (*(unsigned __int8 *)(v4[1] + 1626) << 24) | *(unsigned __int16 *)(v4[1] + 1624);
    v31 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 256) + 424);
    v30 = v6;
    v7 = sub_1C6001EA4(a1, (uint64_t)&v30, a3);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v4 + 512))(v4, v5, v7);
  }
}

void sub_1C6001D18(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;

  if (a3 != 24)
    __asm { BR              X10 }
  llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *(unsigned int *)(a1 + 8), 0);
  if (*(_QWORD *)a1)
  {
    v5 = (uint64_t *)(**(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8);
    if (v5)
    {
      do
      {
        sub_1C6001678(v5 + 1, a2);
        v6 = *v5;
        if ((*v5 & 4) != 0)
          break;
        v5 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v6 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
}

void sub_1C6001D9C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1C5FF4304(v0, *(_DWORD *)(v1 + 8));
  JUMPOUT(0x1C6001D44);
}

void sub_1C6001DAC()
{
  uint64_t v0;
  uint64_t v1;

  sub_1C5FF431C(v0, *(_DWORD *)(v1 + 8));
  JUMPOUT(0x1C6001D44);
}

void sub_1C6001DBC()
{
  uint64_t v0;
  uint64_t v1;

  sub_1C5FF42EC(v0, *(_DWORD *)(v1 + 8));
  JUMPOUT(0x1C6001D44);
}

void sub_1C6001DD0(unint64_t *a1, uint64_t a2, int a3)
{
  if (a3 == 34)
    llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *a1, 0);
  else
    sub_1C5FFA9F8(a2, *(llvm::MCExpr ***)(*(_QWORD *)(*(_QWORD *)(a2 + 576) + 1184) + 24 * *a1 + 8), *(_BYTE *)(*(_QWORD *)(a2 + 576) + 3549));
}

uint64_t sub_1C6001E10(uint64_t *a1, unsigned int *a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  LOWORD(result) = llvm::dwarf::getFixedFormByteSize(a3, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
  if ((unsigned __int16)result > 0xFFu)
    return result;
  v6 = *a1;
  if (a3 == 13)
  {
    LODWORD(result) = 0;
    v7 = v6 >> 63;
    do
    {
      do
      {
        v8 = v6;
        v6 >>= 7;
        result = (result + 1);
      }
      while (v6 != v7);
    }
    while (((v8 ^ v7) & 0x40) != 0);
  }
  else
  {
    LODWORD(result) = 0;
    do
    {
      result = (result + 1);
      v9 = (unint64_t)v6 >= 0x80;
      v6 = (unint64_t)v6 >> 7;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1C6001EA4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 19)
    return 4;
  else
    return ((uint64_t (*)(uint64_t))((char *)sub_1C6001ED8 + 4 * byte_1C86775D9[a3 - 16]))(1);
}

uint64_t sub_1C6001ED8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  if (*(_BYTE *)(a2 + 3))
    v2 = 8;
  else
    v2 = 4;
  if (*(_WORD *)a2 == 2)
    return *(unsigned __int8 *)(a2 + 2);
  else
    return v2;
}

uint64_t sub_1C6001F04()
{
  return 2;
}

uint64_t sub_1C6001F3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  int v4;
  uint64_t v5;

  v1 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v1)
  {
    if (*(_QWORD *)a1 && (v3 = (uint64_t *)(**(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8)) != 0)
    {
      LODWORD(v1) = 0;
      do
      {
        sub_1C6001428((uint64_t)(v3 + 1));
        v1 = (v1 + v4);
        *(_DWORD *)(a1 + 8) = v1;
        v5 = *v3;
        if ((*v3 & 4) != 0)
          break;
        v3 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v5 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

BOOL sub_1C6001FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  sub_1C5FFFF44(a2, a5);
  v7 = *(unsigned int *)(a3 + 8);
  return (_DWORD)v7 == *(_DWORD *)(a5 + 8) && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

void *sub_1C6002010(int *a1, unint64_t a2)
{
  uint64_t v2;
  char v4;
  unint64_t v6;
  int __src[2];

  v2 = a2;
  LOBYTE(__src[0]) = a2 & 0x7F;
  if (a2 >= 0x40)
  {
    v4 = a2;
    do
    {
      if (v2 >> 7 == -1 && (v4 & 0x40) != 0)
        break;
      LOBYTE(__src[0]) = v4 | 0x80;
      llvm::MD5::update(a1, __src, 1uLL);
      v4 = v2 >> 7;
      LOBYTE(__src[0]) = v4 & 0x7F;
      v6 = (unint64_t)v2 >> 13;
      v2 >>= 7;
    }
    while (v6);
  }
  return llvm::MD5::update(a1, __src, 1uLL);
}

void *sub_1C60020A8(int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5;
  _BOOL4 v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int __src[2];

  LODWORD(v5) = a2;
  v9 = a3 == 66 || (a3 - 15) < 2 || a3 == 31;
  if (a2 == 73 && v9)
  {
    v10 = *(_QWORD **)(a4 + 8);
    if (v10)
    {
      v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        while (*(_WORD *)(v11 + 12) != 3)
        {
          v17 = *(_QWORD *)v11;
          if ((v17 & 4) == 0)
          {
            v11 = v17 & 0xFFFFFFFFFFFFFFF8;
            if (v11)
              continue;
          }
          goto LABEL_14;
        }
        v18 = (uint64_t *)(*(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF8);
        if (*v18)
          return sub_1C63BFFB8(a1, a4, (uint64_t)(v18 + 4), *v18);
      }
    }
  }
LABEL_14:
  v19 = a4;
  v12 = sub_1C6144C70((uint64_t)(a1 + 42), &v19);
  v13 = *((_DWORD *)v12 + 2);
  if (v13)
    return sub_1C63C0074(a1, v5, v13);
  v14 = v12;
  LOBYTE(__src[0]) = 84;
  llvm::MD5::update(a1, __src, 1uLL);
  v5 = v5;
  do
  {
    BYTE1(__src[0]) = v5 & 0x7F | ((v5 > 0x7F) << 7);
    llvm::MD5::update(a1, (int *)((char *)__src + 1), 1uLL);
    v15 = v5 > 0x7F;
    v5 >>= 7;
  }
  while (v15);
  *((_DWORD *)v14 + 2) = a1[44];
  return (void *)sub_1C63C0124(a1, a4);
}

uint64_t sub_1C60021F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = off_1E81AB0F0;
  v9[1] = result;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 152) + 576);
  v3 = *(_QWORD *)(v2 + 1184);
  v4 = (uint64_t *)(v3 + 24 * a2);
  v5 = v4[2];
  if (a2 + 1 == *(_DWORD *)(v2 + 1192))
    v6 = *(unsigned int *)(v2 + 1304);
  else
    v6 = *(_QWORD *)(v3 + 24 * (a2 + 1) + 16);
  if (v5 != v6)
  {
    v7 = *(_QWORD *)(v2 + 1296) + 32 * v5;
    v8 = 32 * v6 - 32 * v5;
    do
    {
      result = sub_1C6010C88(v2, (uint64_t)v9, v7, *v4);
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1C60022A0(uint64_t result, uint64_t a2)
{
  switch(*(_DWORD *)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C60022D4(_QWORD *a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD *))(*a1 + 72))(a1);
  v2 = *(_QWORD *)(a1[1] + 280);
  if (*(_QWORD *)(v2 + 512) != *(_QWORD *)(v2 + 520))
    llvm::MachineFunction::tidyLandingPads(v2, 0, 1);
}

uint64_t sub_1C6002328(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  llvm::MCStreamer *v4;

  if (*(_BYTE *)(result + 24))
  {
    v1 = *(_QWORD *)(result + 8);
    v2 = *(_DWORD *)(*(_QWORD *)(v1 + 280) + 640);
    if (v2 > 3 || v2 == 2)
    {
      v4 = *(llvm::MCStreamer **)(v1 + 272);
      result = llvm::MCStreamer::getCurrentDwarfFrameInfo(v4);
      if (result)
        return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)v4 + 8))(v4, result);
    }
  }
  return result;
}

void sub_1C600238C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60023A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const llvm::GlobalValue **v6;
  const llvm::GlobalValue **i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 256);
  v4 = *(_DWORD *)(v3 + 412);
  if (v4 != 1)
  {
    if (v4 == 4)
    {
      v13 = *(_DWORD *)(v3 + 420);
      if (v13)
        v14 = v13 == 6;
      else
        v14 = 1;
      if (v14)
        return result;
    }
    else if (v4 != 3)
    {
      return result;
    }
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 248) + 24))(*(_QWORD *)(v2 + 248));
  if ((*(_BYTE *)(result + 948) & 0x80) != 0)
  {
    v5 = *(_QWORD *)(v1 + 16);
    v6 = *(const llvm::GlobalValue ***)(v5 + 2080);
    for (i = *(const llvm::GlobalValue ***)(v5 + 2088); v6 != i; result = v8)
    {
      v8 = result;
      if (*v6)
      {
        v9 = sub_1C5FEC150(*(_QWORD *)(v1 + 8), *v6);
        v10 = *(_QWORD *)(v1 + 8);
        v11 = *(_QWORD *)(v10 + 272);
        v12 = sub_1C5FEB0C0(v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v8 + 32))(v8, v11, v12, v9);
      }
      ++v6;
    }
  }
  return result;
}

uint64_t sub_1C6002484(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  llvm::Value *v10;
  int v11;
  llvm::Value **v12;
  llvm::Value *v13;
  const llvm::Value *v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  BOOL v26;
  uint64_t v28;
  __int16 v29;
  BOOL v31;

  *(_BYTE *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  v4 = *a2;
  v5 = a2[64];
  v6 = a2[65];
  v7 = sub_1C5FEDDBC(*(_QWORD **)(a1 + 8), a2);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
  v9 = *(_DWORD *)(v8 + 948);
  if ((*(_WORD *)(v4 + 18) & 8) == 0)
  {
    v10 = 0;
    goto LABEL_11;
  }
  v11 = *(_DWORD *)(v4 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(llvm::Value ***)(v4 - 8);
  else
    v12 = (llvm::Value **)(v4 - 32 * (v11 & 0x7FFFFFF));
  v13 = llvm::Value::stripPointerCasts(*v12);
  if (*((_BYTE *)v13 + 16))
    v10 = 0;
  else
    v10 = v13;
  if ((*(_WORD *)(v4 + 18) & 8) == 0 || llvm::classifyEHPersonality(v10, v14))
  {
LABEL_11:
    v15 = 0;
    *(_BYTE *)(a1 + 27) = 0;
    if (v5 == v6 || v9 == 255)
      goto LABEL_14;
    goto LABEL_13;
  }
  v28 = v4 + 112;
  if (llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v4 + 112))
    || !*(_QWORD *)v28
    || (*(_BYTE *)(*(_QWORD *)v28 + 16) & 0x20) == 0)
  {
    *(_BYTE *)(a1 + 27) = 1;
LABEL_13:
    v15 = v10 != 0;
    goto LABEL_14;
  }
  v29 = *(_WORD *)(v4 + 18);
  *(_BYTE *)(a1 + 27) = (v29 & 8) != 0;
  v31 = v5 == v6 || v9 == 255;
  if ((v29 & 8) != 0 || !v31)
    goto LABEL_13;
  v15 = 0;
LABEL_14:
  LOBYTE(v16) = 0;
  *(_BYTE *)(a1 + 26) = v15;
  v17 = *(_DWORD *)(v8 + 952) != 255 && v15;
  *(_BYTE *)(a1 + 28) = v17;
  v18 = a2[4];
  v19 = *(_QWORD *)(v18 + 2056);
  v20 = v18 + 8;
  if (v19)
    v20 = v19;
  v21 = *(_QWORD *)(v20 + 152);
  switch(*(_DWORD *)(v21 + 412))
  {
    case 0:
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(_QWORD *)(v22 + 256);
      if (*(_DWORD *)(v23 + 412))
        goto LABEL_36;
      v16 = *(unsigned __int8 *)(v23 + 416);
      if (v16)
        LOBYTE(v16) = *(_DWORD *)(v22 + 592) == 2 && v7 != 0;
      break;
    case 1:
    case 3:
      goto LABEL_20;
    case 4:
      v25 = *(_DWORD *)(v21 + 420);
      if (v25)
        v26 = v25 == 6;
      else
        v26 = 1;
      if (v26)
      {
LABEL_36:
        LOBYTE(v16) = 0;
      }
      else
      {
LABEL_20:
        if (v7)
          LOBYTE(v16) = 1;
        else
          LOBYTE(v16) = v15;
      }
      break;
    default:
      break;
  }
  *(_BYTE *)(a1 + 24) = v16;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)()))(*(_QWORD *)a1 + 64))(a1, a2[41], sub_1C6002684);
}

void sub_1C6002688(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  llvm::Value **v10;
  llvm::Value *v11;
  const Function *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 25))
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_DWORD *)(v6 + 592);
      if (v7 == 2 || (*(_WORD *)(*(_QWORD *)(v6 + 248) + 1064) & 0x10) != 0)
        (*(void (**)(_QWORD, BOOL, uint64_t))(**(_QWORD **)(v6 + 272) + 856))(*(_QWORD *)(v6 + 272), v7 == 1, 1);
      *(_BYTE *)(a1 + 25) = 1;
    }
    llvm::MCStreamer::emitCFIStartProc(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), 0, 0);
    if (*(_BYTE *)(a1 + 26))
    {
      v8 = **(_QWORD **)(a2 + 32);
      v9 = *(_DWORD *)(v8 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(llvm::Value ***)(v8 - 8);
      else
        v10 = (llvm::Value **)(v8 - 32 * (v9 & 0x7FFFFFF));
      v11 = llvm::Value::stripPointerCasts(*v10);
      if (*((_BYTE *)v11 + 16))
        v12 = 0;
      else
        v12 = (const Function *)v11;
      if (*(_BYTE *)(a1 + 27))
        llvm::MachineModuleInfo::addPersonality(*(llvm::MachineModuleInfo **)(a1 + 16), v12);
      v13 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
      v14 = v13[237];
      v15 = (*(uint64_t (**)(unsigned int *, const Function *, _QWORD, _QWORD))(*(_QWORD *)v13 + 128))(v13, v12, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248), *(_QWORD *)(a1 + 16));
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 904))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v15, v14);
      if (*(_BYTE *)(a1 + 28))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
        v17 = a3();
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 912))(v16, v17, v13[238]);
      }
    }
  }
}

uint64_t *sub_1C6002804(uint64_t *a1)
{
  if (*((_BYTE *)a1 + 26))
    return (uint64_t *)sub_1C6025250(a1);
  return a1;
}

uint64_t sub_1C6002814(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v8;
  BOOL v9;
  __int16 v10;
  uint64_t v11;
  const char *v13;
  __int16 v14;

  v8 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 272) + 8) + 1624);
  *(_OWORD *)(a1 + 16) = 0u;
  v9 = v8 > 4 && a7 == 0;
  *(_DWORD *)(a1 + 32) = -1;
  if (v9)
    v10 = 74;
  else
    v10 = 17;
  *(_WORD *)(a1 + 36) = v10;
  *(_BYTE *)(a1 + 38) = 0;
  *(_OWORD *)(a1 + 40) = 0uLL;
  *(_OWORD *)(a1 + 56) = 0uLL;
  *(_QWORD *)(a1 + 48) = a1 | 4;
  *(_QWORD *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 80) = 0uLL;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_QWORD *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 176) = a4;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = a5;
  *(_QWORD *)(a1 + 200) = a6;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0uLL;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0uLL;
  *(_OWORD *)(a1 + 288) = 0uLL;
  *(_OWORD *)(a1 + 240) = 0uLL;
  *(_OWORD *)(a1 + 256) = 0uLL;
  *(_QWORD *)a1 = &off_1E81AB260;
  *(_QWORD *)(a1 + 8) = (a1 + 8) | 4;
  *(_DWORD *)(a1 + 312) = a2;
  *(_BYTE *)(a1 + 316) = 0;
  *(_OWORD *)(a1 + 328) = 0uLL;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0uLL;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0uLL;
  *(_DWORD *)(a1 + 396) = 16;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 408) = 0uLL;
  *(_DWORD *)(a1 + 428) = 16;
  *(_QWORD *)(a1 + 440) = a1 + 456;
  *(_QWORD *)(a1 + 448) = 0x200000000;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 488) = 0uLL;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0uLL;
  *(_OWORD *)(a1 + 544) = 0uLL;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0uLL;
  sub_1C60206C8((_QWORD *)a1, a3, a1 + 8);
  v11 = *(_QWORD *)(a1 + 176);
  v13 = "cu_macro_begin";
  v14 = 259;
  *(_QWORD *)(a1 + 344) = llvm::MCContext::createTempSymbol(*(_QWORD *)(v11 + 264), (uint64_t)&v13, 1);
  return a1;
}

unint64_t sub_1C60029A0(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  __int16 v35;
  unint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;

  if (*(_QWORD *)(a1 + 328))
  {
    if (!a4)
      goto LABEL_24;
    v8 = *(_QWORD *)(a1 + 192);
  }
  else
  {
    if (!a4)
      goto LABEL_24;
    v8 = *(_QWORD *)(a1 + 192);
    if (*(_BYTE *)(v8 + 3549))
      goto LABEL_24;
  }
  v9 = *(uint64_t **)(v8 + 616);
  v10 = *(_QWORD *)(v8 + 624);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(uint64_t **)(v8 + 608);
    v13 = ((char *)v9 - (char *)v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      abort();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 60)
        sub_1C4764EE4();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)&v17[16 * v13];
    *v18 = a4;
    v18[1] = a1;
    v11 = v18 + 2;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 2;
        v9 -= 2;
      }
      while (v9 != v12);
      v9 = *(uint64_t **)(v8 + 608);
    }
    *(_QWORD *)(v8 + 608) = v18;
    *(_QWORD *)(v8 + 616) = v11;
    *(_QWORD *)(v8 + 624) = &v17[16 * v16];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = a4;
    v9[1] = a1;
    v11 = v9 + 2;
  }
  *(_QWORD *)(v8 + 616) = v11;
LABEL_24:
  v19 = *(_QWORD *)(a1 + 192);
  if ((!*(_BYTE *)(v19 + 3549) || !*(_QWORD *)(a1 + 328))
    && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 272) + 8) + 1624) <= 4u)
  {
    v20 = (unint64_t *)(a2 + 8);
    if (a4)
    {
      v39 = a4;
      return sub_1C6002E3C(a1, v20, a3, 1, &v39);
    }
    v39 = 0;
    v36 = a1;
    v37 = a3;
    v35 = 1;
    return sub_1C6002D64(v36, v20, v37, v35, &v39);
  }
  v22 = *(_DWORD *)(v19 + 3540);
  v23 = *(_QWORD *)a4;
  v24 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
  if (!v24 && (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a4 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a4 + 24));
    v23 = *(_QWORD *)a4 & 7 | v24;
    *(_QWORD *)a4 = v23;
  }
  if (!v24)
  {
    v25 = *(_QWORD *)(a1 + 192);
LABEL_44:
    v33 = sub_1C63BB980(v25 + 4512, a4, 0);
    v20 = (unint64_t *)(a2 + 8);
    v34 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8) + 1624);
    v39 = v33;
    if (v34 <= 4)
      v35 = 7937;
    else
      v35 = 27;
    v36 = a1;
    v37 = a3;
    return sub_1C6002D64(v36, v20, v37, v35, &v39);
  }
  v26 = v22 - 5;
  v27 = v23 & 0xFFFFFFFFFFFFFFF8;
  if ((v23 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a4 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a4 + 24));
    v23 = *(_QWORD *)a4 & 7 | v27;
    *(_QWORD *)a4 = v23;
  }
  v25 = *(_QWORD *)(a1 + 192);
  if ((_UNKNOWN *)v27 == llvm::MCSymbol::AbsolutePseudoFragment || v26 < 0xFFFFFFFE)
    goto LABEL_44;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  if ((v23 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a4 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a4 + 24));
    *(_QWORD *)a4 = *(_QWORD *)a4 & 7 | v29;
  }
  v30 = sub_1C63C3248(v25, *(_QWORD *)(v29 + 16));
  v25 = *(_QWORD *)(a1 + 192);
  if (!v30)
    goto LABEL_44;
  v31 = v30;
  if (v30 == a4)
    goto LABEL_44;
  if (*(_DWORD *)(v25 + 3540) == 3)
  {
    v32 = (unint64_t *)sub_1C484358C(a1 + 80, 16, 3);
    *v32 = 0;
    v32[1] = 0;
    sub_1C6020A44(a1, v32, a4);
    return sub_1C63C7214(a1, a2, a3, 24, (uint64_t)v32);
  }
  else
  {
    v38 = (_QWORD *)sub_1C484358C(a1 + 80, 24, 3);
    *v38 = sub_1C63BB980(*(_QWORD *)(a1 + 192) + 4512, v31, 0);
    v38[1] = a4;
    v38[2] = v31;
    v39 = (uint64_t)v38;
    return sub_1C63C1098(a1, (unint64_t *)(a2 + 8), a3, &v39);
  }
}

unint64_t sub_1C6002D64(unint64_t result, unint64_t *a2, int a3, __int16 a4, _QWORD *a5)
{
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  _QWORD *v10;
  __int16 v11;
  unint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_3;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 176) + 248) + 1064) & 0x40) == 0)
    goto LABEL_3;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  v13 = result;
  v10 = a5;
  v11 = a4;
  v9 = a3;
  v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  v8 = v7;
  v5 = a2;
  result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    v14 = 1;
    v15 = a3;
    v16 = a4;
    v17 = *a5;
    return sub_1C6008110(v5, result + 80, &v14);
  }
  return result;
}

unint64_t sub_1C6002E3C(unint64_t result, unint64_t *a2, int a3, __int16 a4, _QWORD *a5)
{
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  _QWORD *v10;
  __int16 v11;
  unint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_3;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 176) + 248) + 1064) & 0x40) == 0)
    goto LABEL_3;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  v13 = result;
  v10 = a5;
  v11 = a4;
  v9 = a3;
  v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  v8 = v7;
  v5 = a2;
  result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    v14 = 4;
    v15 = a3;
    v16 = a4;
    v17 = *a5;
    return sub_1C6008110(v5, result + 80, &v14);
  }
  return result;
}

uint64_t sub_1C6002F14(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;
  __int128 v25;
  char v26;
  __int128 v27;
  char v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 176) + 272) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 272)) & 1) != 0)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + 312);
  if (a2)
  {
    if (*(_QWORD *)(a1 + 552) == a2)
    {
      return *(unsigned int *)(a1 + 560);
    }
    else
    {
      *(_QWORD *)(a1 + 552) = a2;
      v6 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      v7 = v6[1];
      if (v7)
      {
        v8 = *(uint64_t **)(v7 + 8);
        v11 = *v8;
        v9 = v8 + 3;
        v10 = v11;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 272);
      if (*v6)
      {
        v13 = *(uint64_t **)(*v6 + 8);
        v16 = *v13;
        v14 = v13 + 3;
        v15 = v16;
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      sub_1C600AD30(*(_QWORD *)(a1 + 192), a2, &v25);
      if (*(_BYTE *)(a2 + 56))
      {
        v20 = *(uint64_t **)(*(_QWORD *)(a2 + 48) + 8);
        v21 = *v20;
        v19 = v20 + 3;
        v17 = v21;
        v18 = 1;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v27 = v25;
      v28 = v26;
      v23[0] = v19;
      v23[1] = v17;
      v24 = v18;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD *, uint64_t, _QWORD *, uint64_t, __int128 *, _QWORD *, int))(*(_QWORD *)v12 + 680))(v29, v12, 0, v9, v10, v14, v15, &v27, v23, v4);
      result = LODWORD(v29[0]);
      *(_DWORD *)(a1 + 560) = v29[0];
    }
  }
  else
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 272);
    LOBYTE(v27) = 0;
    v28 = 0;
    LOBYTE(v23[0]) = 0;
    v24 = 0;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, const char *, _QWORD, const char *, _QWORD, __int128 *, _QWORD *, int))(*(_QWORD *)v22 + 680))(v29, v22, 0, "", 0, "", 0, &v27, v23, v4);
    return LODWORD(v29[0]);
  }
  return result;
}

void sub_1C60030E4(_QWORD *a1, const void *a2, size_t a3, size_t a4, llvm::DIScope *a5)
{
  std::string::size_type v10;
  void **v11;
  char v12;
  void *p_p;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void **v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  unsigned __int8 *v22;
  size_t v23;
  void *__p;
  size_t v25;
  unint64_t v26;
  std::string v27;
  void *v28[2];
  uint64_t v29;

  if (!sub_1C60071F4(a1))
    return;
  sub_1C6022C94(a5, (uint64_t)a1, (uint64_t)&v27);
  if (a2)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a3 >= 0x17)
    {
      v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v14 = a3 | 7;
      v15 = v14 + 1;
      p_p = operator new(v14 + 1);
      v25 = a3;
      v26 = v15 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v26) = a3;
      p_p = &__p;
      if (!a3)
        goto LABEL_13;
    }
    memmove(p_p, a2, a3);
LABEL_13:
    *((_BYTE *)p_p + a3) = 0;
    v12 = HIBYTE(v26);
    v11 = (void **)__p;
    v10 = v25;
    goto LABEL_14;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  __p = 0;
  v25 = 0;
  v26 = 0;
LABEL_14:
  v16 = v12 < 0;
  if (v12 >= 0)
    v17 = &__p;
  else
    v17 = v11;
  v18 = v12 & 0x7F;
  if (v16)
    v19 = v10;
  else
    v19 = v18;
  v20 = std::string::append(&v27, (const std::string::value_type *)v17, v19);
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)v28 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v29 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v29 >= 0)
    v22 = (unsigned __int8 *)v28;
  else
    v22 = (unsigned __int8 *)v28[0];
  if (v29 >= 0)
    v23 = HIBYTE(v29) & 0x7F;
  else
    v23 = (size_t)v28[1];
  (*sub_1C6136E50((uint64_t)(a1 + 47), v22, v23))[1] = a4;
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
}

void sub_1C600326C(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MDNode *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t Symbol;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int DwarfRegNum;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t isConstant;
  unsigned int v41;
  llvm::MDNode *AddressClass;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v60;
  _QWORD *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  size_t v68;
  size_t v69;
  unsigned int *v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  size_t v74;
  size_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  __int16 v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    v15 = 0;
    v83 = 0;
    v8 = 0;
    v86 = 0;
    goto LABEL_79;
  }
  v7 = a4;
  v86 = 0;
  v8 = 0;
  v83 = 0;
  v9 = 0;
  v10 = &a4[2 * a5];
  v11 = (uint64_t)(a1 + 10);
  v87 = (uint64_t)(a1 + 10);
  while (1)
  {
    v12 = *v7;
    v13 = (llvm::MDNode *)v7[1];
    if (a5 == 1)
    {
      if (v13)
      {
        isConstant = llvm::DIExpression::isConstant((llvm::DIExpression *)v7[1]);
        if ((isConstant & 0xFF00000000) != 0)
          break;
      }
    }
    if (v12)
    {
      v14 = *(_DWORD *)(v12 + 32);
      if ((v14 & 0x300) != 0x100
        && ((v14 & 0x1C00) == 0
         || *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[22] + 248) + 24))(*(_QWORD *)(a1[22] + 248))
                     + 946)))
      {
        goto LABEL_9;
      }
    }
    else if (v13 && (llvm::DIExpression::isConstant(v13) & 0xFF00000000) != 0)
    {
LABEL_9:
      if (v8)
      {
        v15 = (uint64_t)v9;
        if (!v13)
          goto LABEL_11;
LABEL_20:
        LODWORD(v89) = 0;
        if ((*(_DWORD *)(*(_QWORD *)(a1[22] + 248) + 472) & 0xFFFFFFFE) == 0x2C
          && *(_DWORD *)(a1[24] + 5512) == 1)
        {
          AddressClass = llvm::DIExpression::extractAddressClass(v13, (const llvm::DIExpression *)&v89, a3);
          if (AddressClass != v13)
          {
            v83 = v89 | 0x100000000;
            v13 = AddressClass;
          }
        }
        sub_1C601E6B4(v15, (uint64_t)v13);
        if (v12)
          goto LABEL_23;
      }
      else
      {
        v8 = sub_1C484358C(v11, 16, 3);
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
        v16 = a1[22];
        v15 = operator new();
        v17 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 272) + 8) + 1624);
        *(_BYTE *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = a1;
        *(_QWORD *)(v15 + 24) = v15 + 40;
        *(_QWORD *)(v15 + 32) = 0x200000000;
        *(_QWORD *)(v15 + 72) = 0;
        v18 = ((unint64_t)*(unsigned __int16 *)(v15 + 84) << 32) & 0xE00000000000;
        *(_DWORD *)(v15 + 80) = 0;
        *(_WORD *)(v15 + 84) = (v18 | ((unint64_t)(v17 & 0xF) << 41)) >> 32;
        *(_WORD *)(v15 + 86) = 0;
        *(_QWORD *)v15 = off_1E81AB9F8;
        *(_QWORD *)(v15 + 88) = v16;
        *(_QWORD *)(v15 + 96) = v8;
        *(_QWORD *)(v15 + 104) = 0;
        *(_DWORD *)(v15 + 112) = 0;
        *(_BYTE *)(v15 + 120) = 0;
        if (v9)
        {
          *v9 = &unk_1E81AB308;
          v19 = (_QWORD *)v9[3];
          if (v19 != v9 + 5)
            free(v19);
          MEMORY[0x1CAA32FC0](v9, 0x10E1C40483F315BLL);
        }
        v86 = 1;
        v11 = v87;
        if (v13)
          goto LABEL_20;
LABEL_11:
        if (v12)
        {
LABEL_23:
          Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[22] + 248), (const llvm::GlobalValue *)v12);
          v21 = Symbol;
          v22 = a1[22];
          v23 = *(_DWORD **)(v22 + 248);
          if ((*(_BYTE *)(v12 + 33) & 0x1C) != 0)
          {
            v24 = v23[260];
            if ((v24 & 0x40000) != 0)
            {
              if ((v24 & 0x20000) != 0)
                goto LABEL_42;
            }
            else
            {
              v25 = v23[122];
              if (v25 == 11)
                goto LABEL_42;
              v26 = v23[121];
              if (v26 == 13 || v26 == 15 && v25 == 18)
                goto LABEL_42;
            }
            if (*(_BYTE *)(a1[24] + 3549))
            {
              v89 = 0xB000000000001;
              v90 = 252;
              sub_1C6008110((unint64_t *)v8, v11, (int *)&v89);
              v41 = sub_1C63BB980(a1[24] + 4512, v21, 1);
              v89 = 0xF000000000001;
              v90 = v41;
            }
            else
            {
              if (((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 288) + 2064) + 504) + 4) + 7) & 0x1FFFFFFF8) == 0x20)
                v27 = 0xC00000006;
              else
                v27 = 0xE00000007;
              v89 = 0xB000000000001;
              v90 = HIDWORD(v27);
              sub_1C6008110((unint64_t *)v8, v87, (int *)&v89);
              v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[22] + 248) + 24))(*(_QWORD *)(a1[22] + 248));
              v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 152))(v28, v21);
              LODWORD(v89) = 3;
              WORD2(v89) = 0;
              HIWORD(v89) = v27;
              v11 = v87;
              v90 = v29;
            }
            sub_1C6008110((unint64_t *)v8, v11, (int *)&v89);
            v30 = 224;
            if (!*(_BYTE *)(a1[24] + 3528))
              v30 = 155;
            v89 = 0xB000000000001;
          }
          else
          {
            if ((v23[136] & 0xFFFFFFFE) != 4)
            {
              v43 = (_QWORD *)a1[24];
              v44 = (unint64_t *)v43[77];
              v45 = v43[78];
              if ((unint64_t)v44 >= v45)
              {
                v47 = (unint64_t *)v43[76];
                v48 = ((char *)v44 - (char *)v47) >> 4;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 60)
                  abort();
                v50 = v45 - (_QWORD)v47;
                if (v50 >> 3 > v49)
                  v49 = v50 >> 3;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
                  v51 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v82 = (_QWORD *)a1[24];
                  if (v51 >> 60)
                    sub_1C4764EE4();
                  v81 = v51;
                  v52 = (char *)operator new(16 * v51);
                  v51 = v81;
                  v48 = ((char *)v44 - (char *)v47) >> 4;
                  v43 = v82;
                }
                else
                {
                  v52 = 0;
                }
                v53 = (uint64_t *)&v52[16 * v48];
                *v53 = v21;
                v53[1] = (uint64_t)a1;
                v54 = v53;
                if (v44 != v47)
                {
                  do
                  {
                    *((_OWORD *)v54 - 1) = *((_OWORD *)v44 - 1);
                    v54 -= 2;
                    v44 -= 2;
                  }
                  while (v44 != v47);
                  v44 = (unint64_t *)v43[76];
                }
                v43[76] = v54;
                v46 = v53 + 2;
                v43[77] = v53 + 2;
                v43[78] = &v52[16 * v51];
                if (v44)
                {
                  v55 = v44;
                  v56 = v43;
                  operator delete(v55);
                  v43 = v56;
                }
              }
              else
              {
                *v44 = Symbol;
                v44[1] = (unint64_t)a1;
                v46 = v44 + 2;
              }
              v43[77] = v46;
              sub_1C63C70C8((uint64_t)a1, (unint64_t *)v8, v21);
              v11 = v87;
              goto LABEL_42;
            }
            if (((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 288) + 2064) + 504) + 4) + 7) & 0x1FFFFFFF8) == 0x20)
              v31 = 0xC00000006;
            else
              v31 = 0xE00000007;
            v89 = 0xB000000000001;
            v90 = HIDWORD(v31);
            sub_1C6008110((unint64_t *)v8, v87, (int *)&v89);
            v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[22] + 248) + 24))(*(_QWORD *)(a1[22] + 248));
            v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 184))(v32, v21);
            LODWORD(v89) = 3;
            WORD2(v89) = 0;
            HIWORD(v89) = v31;
            v11 = v87;
            v90 = v33;
            sub_1C6008110((unint64_t *)v8, v87, (int *)&v89);
            v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[22] + 248) + 24))(*(_QWORD *)(a1[22] + 248));
            v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 176))(v34);
            DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(*(_QWORD *)(a1[22] + 248) + 568), v35, 0);
            v89 = 0xB000000000001;
            v90 = (DwarfRegNum + 112);
            sub_1C6008110((unint64_t *)v8, v87, (int *)&v89);
            v89 = 0xD000000000001;
            v90 = 0;
            sub_1C6008110((unint64_t *)v8, v87, (int *)&v89);
            v89 = 0xB000000000001;
            v30 = 34;
          }
          v90 = v30;
          sub_1C6008110((unint64_t *)v8, v11, (int *)&v89);
        }
      }
LABEL_42:
      v37 = *(unsigned int *)(v15 + 80) | ((unint64_t)*(unsigned __int16 *)(v15 + 84) << 32);
      if ((v37 & 0x700000000) == 0)
      {
        v38 = v37 & 0xFFFFFFF8FFFFFFFFLL;
        *(_DWORD *)(v15 + 80) = v38;
        *(_WORD *)(v15 + 84) = (v38 | 0x200000000) >> 32;
      }
      v89 = 0;
      v90 = 0;
      if (v13)
      {
        v39 = *((_QWORD *)v13 + 4);
        v89 = *((_QWORD *)v13 + 3);
        v90 = v39;
      }
      sub_1C601E1B0(v15, (uint64_t **)&v89, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C601E828, (uint64_t)&v88);
      goto LABEL_47;
    }
    v15 = (uint64_t)v9;
LABEL_47:
    v7 += 2;
    v9 = (_QWORD *)v15;
    if (v7 == v10)
      goto LABEL_79;
  }
  v89 = *(_QWORD *)(*((_QWORD *)v13 + 3) + 8);
  if ((_DWORD)isConstant == 1)
    v80 = 15;
  else
    v80 = 13;
  sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 28, v80, &v89);
  v86 = 1;
  v15 = (uint64_t)v9;
LABEL_79:
  if ((*(_DWORD *)(*(_QWORD *)(a1[22] + 248) + 472) & 0xFFFFFFFE) == 0x2C && *(_DWORD *)(a1[24] + 5512) == 1)
  {
    v57 = v83;
    if (!HIDWORD(v83))
      v57 = 5;
    v89 = v57;
    sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 51, 11, &v89);
  }
  if (v8)
  {
    v58 = *(_DWORD *)(v15 + 80);
    if (v58 >= 0x10000 && (unsigned __int16)v58 != 0)
      sub_1C601D3D4((void (***)(void))v15, (unsigned __int16)v58, HIWORD(v58));
    sub_1C6021080((unint64_t)a1, a2, 2, *(_QWORD *)(v15 + 96));
  }
  if (*(_BYTE *)(a1[24] + 3530))
  {
    v60 = *(_QWORD *)&a3[-2 * a3[2] + 10];
    if (v60)
    {
      v61 = *(_QWORD **)(v60 + 8);
      v64 = *v61;
      v62 = v61 + 3;
      v63 = v64;
    }
    else
    {
      v63 = 0;
      v62 = 0;
    }
    sub_1C60214C4(a1, a2, v62, v63);
  }
  if ((v86 & 1) != 0)
  {
    v65 = *(_QWORD *)&a3[-2 * a3[2] + 2];
    if (v65)
    {
      v66 = *(_QWORD **)(v65 + 8);
      v69 = *v66;
      v67 = (unsigned __int8 *)(v66 + 3);
      v68 = v69;
    }
    else
    {
      v68 = 0;
      v67 = 0;
    }
    sub_1C60131A4(a1[24], a1[9], a1[24] + 4744, v67, v68, a2);
    v70 = &a3[-2 * a3[2]];
    v71 = *((_QWORD *)v70 + 5);
    if (v71)
    {
      v72 = *(_QWORD **)(v71 + 8);
      v75 = *v72;
      v73 = (unsigned __int8 *)(v72 + 3);
      v74 = v75;
      if (v75)
      {
        v76 = *((_QWORD *)v70 + 1);
        if (!v76 || (v77 = *(_QWORD **)(v76 + 8), *v77 != v74) || memcmp(v77 + 3, v73, v74))
        {
          v78 = a1[24];
          if (*(_BYTE *)(v78 + 3530))
            sub_1C60131A4(v78, a1[9], v78 + 4744, v73, v74, a2);
        }
      }
    }
  }
  if (v15)
  {
    *(_QWORD *)v15 = &unk_1E81AB308;
    v79 = *(void **)(v15 + 24);
    if (v79 != (void *)(v15 + 40))
      free(v79);
    MEMORY[0x1CAA32FC0](v15, 0x10E1C40483F315BLL);
  }
}

void sub_1C6003B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  sub_1C601341C(*(_QWORD *)(a1 + 192), a2);
  v6 = *(_QWORD *)(a1 + 192);
  v7 = *(_QWORD *)(v6 + 2968);
  *(_QWORD *)(v6 + 2968) = a1;
  v8 = *(unsigned int *)(a1 + 448);
  if ((_DWORD)v8)
    v9 = v7 == a1;
  else
    v9 = 0;
  if (!v9)
    goto LABEL_9;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 440) + 16 * v8 - 8);
  v11 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 && (*(_DWORD *)(v10 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v10 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v10 + 24));
    *(_QWORD *)v10 = *(_QWORD *)v10 & 7 | v11;
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (!v13 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
    *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v13;
  }
  if (v12 == *(_QWORD *)(v13 + 16))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 440) + 16 * *(unsigned int *)(a1 + 448) - 8) = a3;
  }
  else
  {
LABEL_9:
    if (v7)
      sub_1C600C60C(*(_QWORD *)(a1 + 192), v7);
    v14 = *(unsigned int *)(a1 + 448);
    if (v14 >= *(_DWORD *)(a1 + 452))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 440, a1 + 456, v14 + 1, 16);
      LODWORD(v14) = *(_DWORD *)(a1 + 448);
    }
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 440) + 16 * v14);
    *v15 = a2;
    v15[1] = a3;
    ++*(_DWORD *)(a1 + 448);
  }
}

unint64_t sub_1C6003CA8(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_DWORD *)(*(_QWORD *)(result + 72) + 36) != 3)
  {
    v1 = result;
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 176) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(result + 176) + 248));
    v3 = v2;
    if (*(_BYTE *)(*(_QWORD *)(v1 + 192) + 3533))
      v4 = *(_QWORD **)(*(_QWORD *)(v2 + 88) + 8);
    else
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 176) + 272) + 848))(*(_QWORD *)(*(_QWORD *)(v1 + 176) + 272), *(unsigned int *)(v1 + 312));
    *(_QWORD *)(v1 + 320) = v4;
    return sub_1C6024A24(v1, v1 + 8, 16, v4, *(_QWORD *)(*(_QWORD *)(v3 + 88) + 8));
  }
  return result;
}

unint64_t sub_1C6003D44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v10;

  sub_1C60029A0(a1, a2, 17, a3);
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8) + 1624) <= 3u)
    return sub_1C60029A0(a1, a2, 18, a4);
  v8 = (_QWORD *)sub_1C484358C(a1 + 80, 16, 3);
  *v8 = a4;
  v8[1] = a3;
  v10 = v8;
  return sub_1C6020CC4(a1, (unint64_t *)(a2 + 8), 18, 6, &v10);
}

uint64_t sub_1C6003DFC(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t *v5;

  if (*(_DWORD *)(a1[9] + 36) == 2)
  {
    v3 = 1;
  }
  else if (*(_BYTE *)(a1[24] + 3549))
  {
    v3 = a1[41] == 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = sub_1C6021B28(a1, a2, v3);
  v5 = (uint64_t *)sub_1C60008CC(v4);
  return sub_1C6003E68(v5, a2, v4);
}

uint64_t sub_1C6003E68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t *v32[2];
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[5];
  unsigned int v40;
  __int16 v41;
  __int16 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  void *__dst;
  uint64_t v49;
  _BYTE v50[32];
  _OWORD *v51;
  uint64_t v52;
  _QWORD v53[5];

  v53[4] = *MEMORY[0x1E0C80C00];
  v51 = v53;
  v52 = 0x200000000;
  v6 = a1[22];
  v7 = *(_QWORD *)(v6 + 376);
  v8 = *(_QWORD *)(v6 + 384);
  if (v7 == v8)
  {
    __dst = v50;
    v49 = 0x200000000;
  }
  else
  {
    LODWORD(v9) = 0;
    do
    {
      v10 = *(_OWORD *)(v7 + 8);
      if (v9 >= HIDWORD(v52))
      {
        v31 = *(_OWORD *)(v7 + 8);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v9 + 1, 16);
        v10 = v31;
        LODWORD(v9) = v52;
      }
      v51[v9] = v10;
      v9 = (v52 + 1);
      LODWORD(v52) = v52 + 1;
      v7 += 24;
    }
    while (v7 != v8);
    __dst = v50;
    v49 = 0x200000000;
    if ((_DWORD)v9)
    {
      v11 = v9;
      if (v9 < 3
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v50, v9, 16), (v11 = v52) != 0))
      {
        memcpy(__dst, v51, 16 * v11);
      }
      LODWORD(v49) = v9;
    }
  }
  sub_1C6004374((unint64_t)a1, a3, (uint64_t)&__dst);
  if (__dst != v50)
    free(__dst);
  v12 = a1[24];
  if (*(_BYTE *)(v12 + 3548)
    && !llvm::TargetOptions::DisableFramePointerElim((llvm::TargetOptions *)(*(_QWORD *)(*(_QWORD *)(v12 + 2960) + 8) + 1008), *(const llvm::MachineFunction **)(v12 + 2960)))
  {
    sub_1C602072C((unint64_t)a1, a3, 16359);
  }
  if (*(_DWORD *)(a1[9] + 36) != 2 && (!*(_BYTE *)(a1[24] + 3549) || a1[41]))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1[22] + 280) + 16);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 112))(v13);
    v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 368))(v14, *(_QWORD *)(a1[22] + 280));
    v17 = HIDWORD(v15);
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 == 1)
      {
        v23 = sub_1C484358C((uint64_t)(a1 + 10), 16, 3);
        *(_QWORD *)v23 = 0;
        *(_DWORD *)(v23 + 8) = 0;
        v34 = 0xB000000000001;
        v35 = 156;
        sub_1C6008110((unint64_t *)v23, (uint64_t)(a1 + 10), (int *)&v34);
        v24 = (unint64_t)a1;
        v25 = a3;
        v26 = v23;
LABEL_36:
        sub_1C6021080(v24, v25, 64, v26);
        goto LABEL_37;
      }
      if ((_DWORD)v15 != 2)
        goto LABEL_37;
      v18 = v16;
      if (HIDWORD(v15) == 3)
      {
        v19 = sub_1C63BC770(a1[22], "__stack_pointer", 15);
        v20 = v19;
        if (!*(_BYTE *)(v19 + 36))
          *(_BYTE *)(v19 + 36) = 1;
        *(_DWORD *)(v19 + 32) = 2;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[22] + 280) + 16) + 32) == 64)
          v21 = 382;
        else
          v21 = 383;
        if (!*(_BYTE *)(v19 + 130))
          *(_BYTE *)(v19 + 130) = 1;
        *(_WORD *)(v19 + 128) = v21;
        v22 = sub_1C484358C((uint64_t)(a1 + 10), 16, 3);
        *(_QWORD *)v22 = 0;
        *(_DWORD *)(v22 + 8) = 0;
        v34 = 0xB000000000001;
        v35 = 237;
        sub_1C6008110((unint64_t *)v22, (uint64_t)(a1 + 10), (int *)&v34);
        v34 = 0xD000000000001;
        v35 = 3;
        sub_1C6008110((unint64_t *)v22, (uint64_t)(a1 + 10), (int *)&v34);
        if (*(_BYTE *)(a1[24] + 3549) && a1[41])
        {
          v34 = 0x6000000000001;
          v35 = v18;
        }
        else
        {
          v34 = 0x6000000000004;
          v35 = v20;
        }
        sub_1C6008110((unint64_t *)v22, (uint64_t)(a1 + 10), (int *)&v34);
        v34 = 0xB000000000001;
        v35 = 159;
        sub_1C6008110((unint64_t *)v22, (uint64_t)(a1 + 10), (int *)&v34);
        v24 = (unint64_t)a1;
        v25 = a3;
        v26 = v22;
        goto LABEL_36;
      }
      v28 = sub_1C484358C((uint64_t)(a1 + 10), 16, 3);
      *(_QWORD *)v28 = 0;
      *(_DWORD *)(v28 + 8) = 0;
      v29 = a1[22];
      v30 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 272) + 8) + 1624);
      LOBYTE(v35) = 0;
      v36 = a1;
      v37 = v39;
      v38 = 0x200000000;
      v39[4] = 0;
      v40 = 0;
      v41 = (v30 & 0xF) << 9;
      v42 = 0;
      v34 = (uint64_t)off_1E81AB9F8;
      v43 = v29;
      v44 = v28;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v32[0] = 0;
      v32[1] = 0;
      sub_1C63C6794((unsigned int *)&v34, v17, v18);
      sub_1C601E1B0((uint64_t)&v34, v32, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C601E828, (uint64_t)&v33);
      if (v40 >= 0x10000 && (_WORD)v40)
        sub_1C601D3D4((void (***)(void))&v34, (unsigned __int16)v40, HIWORD(v40));
      sub_1C6021080((unint64_t)a1, a3, 64, v44);
      v34 = (uint64_t)&unk_1E81AB308;
      if (v37 != v39)
        free(v37);
    }
    else if ((HIDWORD(v15) - 1) <= 0x3FFFFFFE)
    {
      LOBYTE(v34) = 1;
      HIDWORD(v34) = HIDWORD(v15);
      sub_1C63C1564((unint64_t)a1, a3, 64, (uint64_t)&v34);
    }
  }
LABEL_37:
  sub_1C6009E78(a1[24], a1[9], a2, a3);
  if (v51 != (_OWORD *)v53)
    free(v51);
  return a3;
}

void sub_1C6004374(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 192);
  if (!*(_BYTE *)(v5 + 3532))
  {
    v7 = *(uint64_t **)a3;
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(a3 + 8);
  if (v6 == 1)
  {
    v7 = *(uint64_t **)a3;
    if (*(_DWORD *)(v5 + 3540) == 2)
    {
      v8 = a3;
      sub_1C593D6FC(*v7, 1);
      v10 = sub_1C63C3248(v5, *(_QWORD *)(v9 + 16));
      a3 = v8;
      v7 = *(uint64_t **)v8;
      if (v10 != **(_QWORD **)v8)
      {
        v6 = *(_DWORD *)(v8 + 8);
        goto LABEL_3;
      }
    }
LABEL_9:
    sub_1C6003D44(a1, a2, *v7, v7[2 * *(unsigned int *)(a3 + 8) - 1]);
    return;
  }
LABEL_3:
  v11[0] = v12;
  v11[1] = (void *)0x200000000;
  if (v6)
    sub_1C6007FD4((uint64_t)v11, (const void **)a3);
  sub_1C6005424(a1, a2, (uint64_t)v11);
  if (v11[0] != v12)
    free(v11[0]);
}

BOOL sub_1C60044C8(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 192) + 3549) && *(_QWORD *)(a1 + 328) != 0;
}

unint64_t sub_1C60044EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD **v10;
  uint64_t i;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _OWORD *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  _QWORD *v39;
  uint64_t v40;
  llvm::DISubrange **v41;
  llvm::DISubrange *v42;
  int v43;
  unint64_t Count;
  unint64_t v45;
  BOOL v46;
  unint64_t LowerBound;
  unint64_t v49;
  unint64_t UpperBound;
  unint64_t v53;
  unint64_t Stride;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  _BYTE **v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  _BYTE *v94;
  BOOL v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  __int16 v107;
  unsigned int v108;
  __int16 v109;
  unsigned int v110;
  __int16 v111;
  uint64_t v112;
  unint64_t v113;
  __int16 v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  int v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  _BYTE v135[64];
  _QWORD **v136;
  _QWORD *v137[2];
  void *v138;
  unsigned int v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  _QWORD v143[2];
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  _OWORD v150[4];
  _QWORD v151[2];
  unsigned int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  int v157;
  _QWORD v158[10];

  v158[8] = *MEMORY[0x1E0C80C00];
  v130 = 0;
  sub_1C6006654((char *)&v136, *(_QWORD *)(a1[25] + 336), *(_DWORD *)(a1[25] + 352), a2);
  v6 = v136;
  if (v136 != v137)
  {
    do
    {
      v7 = (_QWORD *)sub_1C600591C(a1, v6[5], *(_BYTE *)(a2 + 24), &v130);
      v7[5] = a3;
      v8 = *(_QWORD **)(a3 + 32);
      if (v8)
      {
        *v7 = *v8;
        *v8 = v7;
      }
      *(_QWORD *)(a3 + 32) = v7;
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = (_QWORD **)v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD **)v6[2];
          v46 = *v10 == v6;
          v6 = v10;
        }
        while (!v46);
      }
      v6 = v10;
    }
    while (v10 != v137);
  }
  v133 = v135;
  v134 = 0x800000000;
  v153 = (unint64_t)&v155;
  v154 = 0x800000000;
  v151[0] = 1;
  for (i = 1; i != 9; i += 2)
    v151[i] = -4096;
  v149 = 1;
  v150[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v150[1] = v150[0];
  v150[2] = v150[0];
  v150[3] = v150[0];
  v144 = 1;
  v145 = v150[0];
  v146 = v150[0];
  v147 = v150[0];
  v148 = v150[0];
  if (!v139)
    goto LABEL_156;
  v12 = 8 * v139;
  v13 = (char *)v138 - 8;
  do
  {
    v14 = *(_QWORD *)&v13[v12];
    v15 = *(_QWORD *)(v14 + 8);
    v141 = 0;
    if ((sub_1C4E45B90((uint64_t)v151, v15, &v141) & 1) != 0)
      goto LABEL_23;
    v16 = LODWORD(v151[0]) >> 1;
    if ((v151[0] & 1) != 0)
      v17 = 4;
    else
      v17 = v152;
    if (4 * v16 + 4 >= 3 * v17)
    {
      v17 *= 2;
LABEL_28:
      sub_1C5650494((uint64_t)v151, v17);
      v141 = 0;
      sub_1C4E45B90((uint64_t)v151, v15, &v141);
      goto LABEL_20;
    }
    if (v17 + ~v16 - HIDWORD(v151[0]) <= v17 >> 3)
      goto LABEL_28;
LABEL_20:
    v18 = v141;
    LODWORD(v151[0]) += 2;
    if (*(_QWORD *)v141 != -4096)
      --HIDWORD(v151[0]);
    *(_QWORD *)v141 = v15;
    v18[1] = v14;
LABEL_23:
    v19 = v154;
    if (v154 >= (unint64_t)HIDWORD(v154))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)&v155, v154 + 1, 8);
      v19 = v154;
    }
    *(_QWORD *)(v153 + 8 * v19) = v14 & 0xFFFFFFFFFFFFFFFBLL;
    v20 = v154 + 1;
    LODWORD(v154) = v154 + 1;
    v12 -= 8;
  }
  while (v12);
  if (!v20)
    goto LABEL_156;
  do
  {
    v21 = *(_QWORD *)(v153 + 8 * v20 - 8);
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    v131 = v21 & 0xFFFFFFFFFFFFFFF8;
    LODWORD(v154) = v20 - 1;
    if ((v149 & 1) != 0)
    {
      v23 = 8;
      v24 = v150;
    }
    else
    {
      v23 = DWORD2(v150[0]);
      if (!DWORD2(v150[0]))
        goto LABEL_39;
      v24 = *(_OWORD **)&v150[0];
    }
    v25 = v23 - 1;
    v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
    v27 = *((_QWORD *)v24 + v26);
    if (v27 == v22)
      goto LABEL_153;
    v28 = 1;
    while (v27 != -4096)
    {
      v29 = v26 + v28++;
      v26 = v29 & v25;
      v27 = *((_QWORD *)v24 + v26);
      if (v27 == v22)
        goto LABEL_153;
    }
LABEL_39:
    if ((v21 & 4) != 0)
    {
      sub_1C6007A3C((uint64_t)&v141, (uint64_t)&v149, (uint64_t *)&v131);
      v36 = v134;
      if (v134 >= (unint64_t)HIDWORD(v134))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, (uint64_t)v135, v134 + 1, 8);
        v36 = v134;
      }
      *((_QWORD *)v133 + v36) = v22;
      LODWORD(v134) = v134 + 1;
      goto LABEL_153;
    }
    sub_1C6007A3C((uint64_t)&v141, (uint64_t)&v144, (uint64_t *)&v131);
    if (!LOBYTE(v143[0]))
      break;
    v30 = v154;
    if (v154 >= (unint64_t)HIDWORD(v154))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)&v155, v154 + 1, 8);
      v30 = v154;
    }
    *(_QWORD *)(v153 + 8 * v30) = v22 | 4;
    LODWORD(v154) = v154 + 1;
    v141 = v143;
    v142 = 0x200000000;
    v31 = *(_QWORD *)(*(_QWORD *)(v22 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(v22 + 8) + 8) + 24);
    if (*(_BYTE *)v31 != 13 || *(_WORD *)(v31 + 2) != 1)
    {
LABEL_150:
      v73 = (_BYTE **)v141;
      goto LABEL_151;
    }
    v32 = *(unsigned int *)(v31 + 8);
    v33 = -v32;
    v34 = *(_BYTE **)(v31 - 8 * v32 + 72);
    if (v34 && (*v34 & 0xFE) == 0x18)
    {
      v143[0] = v34;
      v35 = 1;
      LODWORD(v142) = 1;
      v33 = -(uint64_t)*(unsigned int *)(v31 + 8);
    }
    else
    {
      v35 = 0;
    }
    v37 = *(_BYTE **)(v31 + 8 * v33 + 80);
    if (v37 && (*v37 & 0xFE) == 0x18)
    {
      v143[v35++] = v37;
      LODWORD(v142) = v35;
      v33 = -(uint64_t)*(unsigned int *)(v31 + 8);
    }
    v38 = *(_BYTE **)(v31 + 8 * v33 + 88);
    if (v38 && (*v38 & 0xFE) == 0x18)
    {
      if (v35 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
        v35 = v142;
        v39 = v141;
      }
      else
      {
        v39 = v143;
      }
      v39[v35] = v38;
      v35 = v142 + 1;
      LODWORD(v142) = v142 + 1;
      v33 = -(uint64_t)*(unsigned int *)(v31 + 8);
    }
    v40 = *(_QWORD *)(v31 + 8 * v33 + 32);
    if (v40)
      v41 = (llvm::DISubrange **)(v40 - 8 * *(unsigned int *)(v40 + 8));
    else
      v41 = 0;
    while (v41 != (llvm::DISubrange **)v40)
    {
      v42 = *v41;
      v43 = *(unsigned __int8 *)*v41;
      if (v43 != 34)
      {
        if (v43 == 9)
        {
          Count = llvm::DISubrange::getCount(*v41);
          v45 = Count & 0xFFFFFFFFFFFFFFF8;
          v46 = Count >= 8 && (Count & 6) == 2;
          if (v46 && v45 != 0)
          {
            if (v35 >= HIDWORD(v142))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
              v35 = v142;
            }
            *((_QWORD *)v141 + v35) = v45;
            v35 = v142 + 1;
            LODWORD(v142) = v142 + 1;
          }
          LowerBound = llvm::DISubrange::getLowerBound(v42);
          v49 = LowerBound & 0xFFFFFFFFFFFFFFF8;
          if (LowerBound >= 8 && (LowerBound & 6) == 2 && v49 != 0)
          {
            if (v35 >= HIDWORD(v142))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
              v35 = v142;
            }
            *((_QWORD *)v141 + v35) = v49;
            v35 = v142 + 1;
            LODWORD(v142) = v142 + 1;
          }
          UpperBound = llvm::DISubrange::getUpperBound(v42);
          if (UpperBound >= 8 && (UpperBound & 6) == 2)
          {
            v53 = UpperBound & 0xFFFFFFFFFFFFFFF8;
            if ((UpperBound & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (v35 >= HIDWORD(v142))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
                v35 = v142;
              }
              *((_QWORD *)v141 + v35) = v53;
              v35 = v142 + 1;
              LODWORD(v142) = v142 + 1;
            }
          }
          Stride = llvm::DISubrange::getStride(v42);
          if (Stride >= 8 && (Stride & 6) == 2)
          {
            v55 = Stride & 0xFFFFFFFFFFFFFFF8;
            if ((Stride & 0xFFFFFFFFFFFFFFF8) != 0)
              goto LABEL_137;
          }
        }
        goto LABEL_140;
      }
      v56 = *((unsigned int *)v42 + 2);
      v57 = -v56;
      v58 = *((_QWORD *)v42 - v56);
      if (v58)
      {
        v59 = *(unsigned __int8 *)v58;
        if ((v59 & 0xFE) == 0x18)
        {
          v60 = v58 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          if (v59 != 6)
            goto LABEL_107;
          v60 = v58 | 4;
        }
        if (v60 >= 8 && (v60 & 4) == 0)
        {
          v61 = v60 & 0xFFFFFFFFFFFFFFF8;
          if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (v35 >= HIDWORD(v142))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
              v35 = v142;
            }
            *((_QWORD *)v141 + v35) = v61;
            v35 = v142 + 1;
            LODWORD(v142) = v142 + 1;
            v57 = -(uint64_t)*((unsigned int *)v42 + 2);
          }
        }
      }
LABEL_107:
      v62 = *((_QWORD *)v42 + v57 + 1);
      if (!v62)
        goto LABEL_118;
      v63 = *(unsigned __int8 *)v62;
      if ((v63 & 0xFE) == 0x18)
      {
        v64 = v62 & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        if (v63 != 6)
          goto LABEL_118;
        v64 = v62 | 4;
      }
      if (v64 >= 8 && (v64 & 4) == 0)
      {
        v65 = v64 & 0xFFFFFFFFFFFFFFF8;
        if ((v64 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (v35 >= HIDWORD(v142))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
            v35 = v142;
          }
          *((_QWORD *)v141 + v35) = v65;
          v35 = v142 + 1;
          LODWORD(v142) = v142 + 1;
          v57 = -(uint64_t)*((unsigned int *)v42 + 2);
        }
      }
LABEL_118:
      v66 = *((_QWORD *)v42 + v57 + 2);
      if (!v66)
        goto LABEL_129;
      v67 = *(unsigned __int8 *)v66;
      if ((v67 & 0xFE) == 0x18)
      {
        v68 = v66 & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        if (v67 != 6)
          goto LABEL_129;
        v68 = v66 | 4;
      }
      if (v68 >= 8 && (v68 & 4) == 0)
      {
        v69 = v68 & 0xFFFFFFFFFFFFFFF8;
        if ((v68 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (v35 >= HIDWORD(v142))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
            v35 = v142;
          }
          *((_QWORD *)v141 + v35) = v69;
          v35 = v142 + 1;
          LODWORD(v142) = v142 + 1;
          v57 = -(uint64_t)*((unsigned int *)v42 + 2);
        }
      }
LABEL_129:
      v70 = *((_QWORD *)v42 + v57 + 3);
      if (!v70)
        goto LABEL_140;
      v71 = *(unsigned __int8 *)v70;
      if ((v71 & 0xFE) == 0x18)
      {
        v72 = v70 & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        if (v71 != 6)
          goto LABEL_140;
        v72 = v70 | 4;
      }
      if (v72 >= 8 && (v72 & 4) == 0)
      {
        v55 = v72 & 0xFFFFFFFFFFFFFFF8;
        if ((v72 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
LABEL_137:
          if (v35 >= HIDWORD(v142))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v35 + 1, 8);
            v35 = v142;
          }
          *((_QWORD *)v141 + v35) = v55;
          v35 = v142 + 1;
          LODWORD(v142) = v142 + 1;
        }
      }
LABEL_140:
      ++v41;
    }
    v73 = (_BYTE **)v141;
    if (v35)
    {
      v74 = 8 * v35;
      do
      {
        v75 = *v73;
        if (**v73 == 25)
        {
          v132 = 0;
          if ((sub_1C4E45B90((uint64_t)v151, (uint64_t)v75, &v132) & 1) != 0)
          {
            v76 = *(_QWORD *)(v132 + 8);
            if (v76)
            {
              v77 = v154;
              if (v154 >= (unint64_t)HIDWORD(v154))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)&v155, v154 + 1, 8);
                v77 = v154;
              }
              *(_QWORD *)(v153 + 8 * v77) = v76 & 0xFFFFFFFFFFFFFFFBLL;
              LODWORD(v154) = v154 + 1;
            }
          }
        }
        ++v73;
        v74 -= 8;
      }
      while (v74);
      goto LABEL_150;
    }
LABEL_151:
    if (v73 != v143)
      free(v73);
LABEL_153:
    v20 = v154;
  }
  while ((_DWORD)v154);
LABEL_156:
  if ((v144 & 1) == 0)
    MEMORY[0x1CAA32FB4](v145, 8);
  if ((v149 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v150[0], 8);
  if ((v151[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v151[1], 8);
  if ((uint64_t *)v153 != &v155)
    free((void *)v153);
  if ((_DWORD)v134)
  {
    v78 = (uint64_t *)v133;
    v79 = 8 * v134;
    do
    {
      v80 = (_QWORD *)sub_1C600591C(a1, *v78, *(_BYTE *)(a2 + 24), &v130);
      v80[5] = a3;
      v81 = *(_QWORD **)(a3 + 32);
      if (v81)
      {
        *v80 = *v81;
        *v81 = v80;
      }
      *(_QWORD *)(a3 + 32) = v80;
      ++v78;
      v79 -= 8;
    }
    while (v79);
  }
  if (*(_DWORD *)(a1[9] + 36) != 2 && (!*(_BYTE *)(a1[24] + 3549) || a1[41]))
  {
    v153 = *(_QWORD *)(a2 + 8);
    v82 = sub_1C6007D50(a1 + 44, &v153);
    v83 = *((unsigned int *)v82 + 4);
    if ((_DWORD)v83)
    {
      v84 = (uint64_t *)v82[1];
      v85 = 8 * v83;
      do
      {
        v86 = (_QWORD *)sub_1C60068D8(a1, *v84);
        v86[5] = a3;
        v87 = *(_QWORD **)(a3 + 32);
        if (v87)
        {
          *v86 = *v87;
          *v87 = v86;
        }
        *(_QWORD *)(a3 + 32) = v86;
        ++v84;
        v85 -= 8;
      }
      while (v85);
    }
  }
  v88 = a1[25];
  v89 = *(_DWORD *)(v88 + 376);
  if (v89)
  {
    v119 = *(_QWORD *)(v88 + 360);
    v120 = v89 - 1;
    v121 = v120 & ((a2 >> 4) ^ (a2 >> 9));
    v122 = (uint64_t *)(v119 + 56 * v121);
    v123 = *v122;
    if (*v122 == a2)
    {
LABEL_244:
      v153 = (unint64_t)&v155;
      v154 = 0x400000000;
      if (*((_DWORD *)v122 + 4))
      {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v153, (uint64_t)(v122 + 1));
        v124 = (uint64_t *)v153;
        if ((_DWORD)v154)
        {
          v125 = 8 * v154;
          do
          {
            v126 = (_QWORD *)sub_1C63C17B8(a1, *v124, a2);
            v126[5] = a3;
            v127 = *(_QWORD **)(a3 + 32);
            if (v127)
            {
              *v126 = *v127;
              *v127 = v126;
            }
            *(_QWORD *)(a3 + 32) = v126;
            ++v124;
            v125 -= 8;
          }
          while (v125);
          v124 = (uint64_t *)v153;
        }
        if (v124 != &v155)
          free(v124);
      }
    }
    else
    {
      v128 = 1;
      while (v123 != -4096)
      {
        v129 = v121 + v128++;
        v121 = v129 & v120;
        v122 = (uint64_t *)(v119 + 56 * v121);
        v123 = *v122;
        if (*v122 == a2)
          goto LABEL_244;
      }
    }
  }
  v90 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v90)
  {
    v91 = *(uint64_t **)(a2 + 32);
    v92 = 8 * v90;
    while (1)
    {
      v93 = (_QWORD *)*v91;
      v94 = *(_BYTE **)(*v91 + 8);
      if (*v94 == 17)
        break;
      sub_1C6006654((char *)&v153, *(_QWORD *)(a1[25] + 336), *(_DWORD *)(a1[25] + 352), *v91);
      if (v155)
        v95 = 0;
      else
        v95 = v157 == 0;
      v96 = 1;
      if (v95)
      {
        if (*(_DWORD *)(a1[9] + 36) == 2
          || *(_BYTE *)(a1[24] + 3549) && !a1[41]
          || (v151[0] = v93[1], !*((_DWORD *)sub_1C6007D50(a1 + 44, v151) + 4)))
        {
          v96 = 0;
        }
      }
      if (v156 != v158)
        free(v156);
      sub_1C47655E8((uint64_t)&v153, (_QWORD *)v154);
      v97 = a3;
      if (!v96)
        goto LABEL_227;
      v94 = (_BYTE *)v93[1];
      if (v94)
        break;
LABEL_228:
      ++v91;
      v92 -= 8;
      if (!v92)
        goto LABEL_238;
    }
    if (*v93)
    {
      v98 = a1[24];
      if (*v94 == 17)
      {
        if (!*(_BYTE *)(v98 + 3549) || !a1[41] || (v99 = a1 + 62, byte_1ED838588))
          v99 = (uint64_t *)(a1[25] + 384);
        v153 = (unint64_t)v94;
        v100 = sub_1C4EB63C4(v99, &v153)[1];
        v101 = sub_1C484358C((uint64_t)(a1 + 10), 48, 3);
        v97 = v101;
        *(_QWORD *)v101 = v101 | 4;
        *(_QWORD *)(v101 + 8) = 0;
        v102 = (unint64_t *)(v101 + 8);
        *(_QWORD *)(v101 + 16) = 0;
        *(_DWORD *)(v101 + 24) = -1;
        *(_WORD *)(v101 + 28) = 29;
        *(_BYTE *)(v101 + 30) = 0;
        *(_QWORD *)(v101 + 32) = 0;
        *(_QWORD *)(v101 + 40) = a3;
        v103 = *(unint64_t **)(a3 + 32);
        if (v103)
        {
          *(_QWORD *)v101 = *v103;
          *v103 = v101;
        }
        *(_QWORD *)(a3 + 32) = v101;
        sub_1C6020D94((unint64_t)a1, v101, 49, v100);
        sub_1C60055BC((unint64_t)a1, v97, (uint64_t)(v93 + 10));
        v104 = v93[2];
        v105 = *(_QWORD *)(v104 - 8 * *(unsigned int *)(v104 + 8));
        if (*(_BYTE *)v105 != 15)
          v105 = *(_QWORD *)(v105 - 8 * *(unsigned int *)(v105 + 8));
        v106 = sub_1C6002F14((uint64_t)a1, v105);
        if (v106 >= 0x100)
        {
          if (v106 >= 0x10000)
            v107 = 6;
          else
            v107 = 5;
        }
        else
        {
          v107 = 11;
        }
        v153 = v106;
        sub_1C6002D64((unint64_t)a1, v102, 88, v107, &v153);
        v108 = *(_DWORD *)(v104 + 4);
        if (v108 >= 0x100)
        {
          if (v108 >= 0x10000)
            v109 = 6;
          else
            v109 = 5;
        }
        else
        {
          v109 = 11;
        }
        v153 = *(unsigned int *)(v104 + 4);
        sub_1C6002D64((unint64_t)a1, v102, 89, v109, &v153);
        v110 = *(unsigned __int16 *)(v104 + 2);
        if (*(_WORD *)(v104 + 2))
        {
          v153 = *(unsigned __int16 *)(v104 + 2);
          if (v110 >= 0x100)
            v111 = 5;
          else
            v111 = 11;
          sub_1C6002D64((unint64_t)a1, v102, 87, v111, &v153);
        }
        v112 = *(_QWORD *)(v104 - 8 * *(unsigned int *)(v104 + 8));
        if (*(_BYTE *)v112 == 19)
        {
          v113 = *(unsigned int *)(v112 + 24);
          if ((_DWORD)v113)
          {
            if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624) >= 4u)
            {
              if (v113 >= 0x100)
              {
                if (v113 >= 0x10000)
                  v114 = 6;
                else
                  v114 = 5;
              }
              else
              {
                v114 = 11;
              }
              v153 = v113;
              sub_1C6002D64((unint64_t)a1, v102, 8502, v114, &v153);
            }
          }
        }
        sub_1C6009E78(a1[24], a1[9], (uint64_t)v94, v97);
LABEL_227:
        sub_1C60044EC(a1, v93, v97);
        goto LABEL_228;
      }
    }
    else
    {
      v98 = a1[24];
    }
    if (sub_1C600A224(v98, (uint64_t)v93))
      goto LABEL_228;
    v115 = (_QWORD *)sub_1C63C1724((unint64_t)a1, (uint64_t)v93);
    v97 = (uint64_t)v115;
    v115[5] = a3;
    v116 = *(_QWORD **)(a3 + 32);
    if (v116)
    {
      *v115 = *v116;
      *v116 = v115;
    }
    *(_QWORD *)(a3 + 32) = v115;
    goto LABEL_227;
  }
LABEL_238:
  v117 = v130;
  if (v133 != v135)
    free(v133);
  if (v138 != &v140)
    free(v138);
  sub_1C47655E8((uint64_t)&v136, v137[0]);
  return v117;
}

unint64_t sub_1C6005424(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  void *v15[2];
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 316) = 1;
  v5 = *(_QWORD *)(a1 + 328);
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8) + 1624) > 4u
    || (v6 = *(_QWORD *)(a1 + 328), !v5))
  {
    v6 = a1;
  }
  v7 = *(uint64_t **)(v6 + 200);
  if (v5)
    v8 = *(_QWORD *)(a1 + 328);
  else
    v8 = a1;
  v15[0] = v16;
  v15[1] = (void *)0x200000000;
  if (*(_DWORD *)(a3 + 8))
    sub_1C6007FD4((uint64_t)v15, (const void **)a3);
  v9 = sub_1C601ECF4(v7, v8, (uint64_t)v15);
  v11 = v10;
  if (v15[0] != v16)
    free(v15[0]);
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8) + 1624) >= 5u)
  {
    v14 = v9;
    return sub_1C6002D64(a1, (unint64_t *)(a2 + 8), 85, 35, &v14);
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 176) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 248))
                                + 152)
                    + 8);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 3549) && *(_QWORD *)(a1 + 328))
      return sub_1C63C850C(a1, a2, 85, *v11, v12);
    else
      return sub_1C6024A24(a1, a2, 85, (_QWORD *)*v11, v12);
  }
}

void sub_1C60055BC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v26;
  void *v27[2];
  _BYTE v28[32];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x200000000;
  v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v5, 16);
    LODWORD(v5) = *(_DWORD *)(a3 + 8);
  }
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a3;
    v7 = *(_QWORD *)a3 + 16 * v5;
    do
    {
      v8 = *(_QWORD *)(a1 + 192);
      v9 = *v6;
      v10 = sub_1C5FFEE9C(v8, *v6);
      v11 = v6[1];
      v12 = sub_1C5FFEF04(v8, v11);
      v13 = *(_QWORD *)(v9 + 24);
      v14 = *(_QWORD *)(v11 + 24);
      v15 = *(_QWORD *)(v14 + 192);
      v16 = v13;
      while (1)
      {
        v17 = *(_QWORD *)(v16 + 192);
        if (v17 == v15 || *(_BYTE *)(v16 + 201))
        {
          v18 = *(_QWORD *)(a1 + 176) + 352;
          v26 = HIDWORD(v17) - v17 + 2;
          v19 = (uint64_t *)sub_1C5FF137C(v18, &v26);
          v20 = *(_QWORD *)(v16 + 192);
          if (v20 == *(_QWORD *)(v13 + 192))
            v21 = v10;
          else
            v21 = *v19;
          if (v20 == *(_QWORD *)(v14 + 192))
            v22 = v12;
          else
            v22 = v19[1];
          v23 = v30;
          if (v30 >= (unint64_t)HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 16);
            v23 = v30;
          }
          v24 = (uint64_t *)((char *)v29 + 16 * v23);
          *v24 = v21;
          v24[1] = v22;
          LODWORD(v30) = v30 + 1;
          v17 = *(_QWORD *)(v16 + 192);
          v15 = *(_QWORD *)(v14 + 192);
        }
        if (v17 == v15)
          break;
        if (*(_QWORD *)(v16 + 8) == *(_QWORD *)(v16 + 32) + 320)
          v16 = 0;
        else
          v16 = *(_QWORD *)(v16 + 8);
      }
      v6 += 2;
    }
    while (v6 != (uint64_t *)v7);
  }
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  if ((_DWORD)v30)
    sub_1C6007FD4((uint64_t)v27, (const void **)&v29);
  sub_1C6004374(a1, a2, (uint64_t)v27);
  if (v27[0] != v28)
    free(v27[0]);
  if (v29 != v31)
    free(v29);
}

unint64_t sub_1C60057E0(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  size_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;

  v6 = *(unsigned int **)(a2 + 8);
  v7 = *(_QWORD *)&v6[-2 * v6[2] + 2];
  if (v7)
  {
    v8 = *(size_t **)(v7 + 8);
    if (*v8)
    {
      sub_1C60207E4(a1, a3, 3, v8 + 3, *v8);
      v6 = *(unsigned int **)(a2 + 8);
    }
  }
  v9 = v6[7];
  if (v9 >= 8)
  {
    v13 = v9 >> 3;
    sub_1C6002D64((unint64_t)a1, (unint64_t *)(a3 + 8), 136, 15, &v13);
  }
  sub_1C6022E40((unint64_t)a1, a3, *(_QWORD *)&v6[-2 * v6[2] + 8]);
  sub_1C602125C((unint64_t)a1, a3, v6[6], *(_QWORD *)&v6[-2 * v6[2] + 4]);
  v10 = sub_1C6021928(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 8) + 24));
  result = sub_1C6020D94((unint64_t)a1, a3, 73, v10);
  v12 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(v12 + 36) & 0x40) != 0
    || (*(_BYTE *)(*(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 24) + 28) & 0x40) != 0)
  {
    return sub_1C602072C((unint64_t)a1, a3, 52);
  }
  return result;
}

unint64_t sub_1C600591C(_QWORD *a1, uint64_t a2, unsigned __int8 a3, unint64_t *a4)
{
  int v7;
  uint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::MDNode **v38;
  llvm::MDNode *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::MDNode *AddressClass;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  unint64_t *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[64];
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE v90[32];
  uint64_t v91;
  unsigned int v92;
  unsigned __int16 v93;
  __int16 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  char v99;
  uint64_t v100;

  v7 = a3;
  v100 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t)(a1 + 10);
  if (*(_WORD *)(*(_QWORD *)(a2 + 8) + 32))
    v9 = 5;
  else
    v9 = 52;
  v10 = sub_1C484358C((uint64_t)(a1 + 10), 48, 3);
  *(_QWORD *)v10 = v10 | 4;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = (unint64_t *)(v10 + 8);
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = -1;
  *(_WORD *)(v10 + 28) = v9;
  *(_BYTE *)(v10 + 30) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  sub_1C60206C8(a1, *(unsigned __int8 **)(a2 + 8), v10);
  if (v7)
  {
    sub_1C60057E0(a1, a2, v10);
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v14 != -1)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8);
    v16 = *(unsigned __int16 *)(v15 + 1624);
    if (v16 > 4)
    {
      v17 = 34;
    }
    else if (v16 == 4)
    {
      v17 = 23;
    }
    else if (*(_BYTE *)(v15 + 1626) == 1)
    {
      v17 = 7;
    }
    else
    {
      v17 = 6;
    }
    if ((*(_WORD *)(*(_QWORD *)(a1[22] + 248) + 1064) & 0x40) == 0
      || llvm::dwarf::AttributeVersion(2) <= v16)
    {
      LODWORD(v85) = 10;
      WORD2(v85) = 2;
      HIWORD(v85) = v17;
      v86 = v14;
      sub_1C6008110(v11, v8, (int *)&v85);
    }
    if (*(unsigned __int16 *)(a2 + 40) >= 0x100u)
    {
      v85 = *(_WORD *)(a2 + 40);
      sub_1C6002D64((unint64_t)a1, v11, 15875, 11, &v85);
    }
    goto LABEL_6;
  }
  v18 = *(_QWORD *)(a2 + 48);
  v80 = v18;
  if (!v18)
  {
    if (!*(_DWORD *)(a2 + 64))
      goto LABEL_6;
    v32 = sub_1C484358C(v8, 16, 3);
    *(_QWORD *)v32 = 0;
    *(_DWORD *)(v32 + 8) = 0;
    v33 = a1[22];
    v34 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 272) + 8) + 1624);
    LOBYTE(v86) = 0;
    v87 = a1;
    v88 = v90;
    v89 = 0x200000000;
    v91 = 0;
    v92 = 0;
    v93 = (v34 & 0xF) << 9;
    v94 = 0;
    v85 = (unint64_t)off_1E81AB9F8;
    v95 = v33;
    v96 = v32;
    v74 = (unint64_t *)v32;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v35 = sub_1C60090C4(a2);
    if (v36)
    {
      v73 = 0;
      v37 = 16 * v36;
      v38 = (llvm::MDNode **)(v35 + 8);
      do
      {
        LODWORD(v80) = 0;
        v39 = *v38;
        v40 = *(_QWORD *)(*(_QWORD *)(a1[22] + 280) + 16);
        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 112))(v40);
        v78 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v41 + 232))(v41, *(_QWORD *)(a1[22] + 280), *((unsigned int *)v38 - 2), &v80);
        v79 = v42;
        sub_1C601E6B4((uint64_t)&v85, (uint64_t)v39);
        v43 = *(_QWORD *)(*(_QWORD *)(a1[22] + 280) + 16);
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 176))(v43);
        v82 = v84;
        v83 = 0x800000000;
        (*(void (**)(uint64_t, unint64_t *, void **))(*(_QWORD *)v44 + 488))(v44, &v78, &v82);
        v75 = 0;
        if ((*(_DWORD *)(*(_QWORD *)(a1[22] + 248) + 472) & 0xFFFFFFFE) == 0x2C
          && *(_DWORD *)(a1[24] + 5512) == 1)
        {
          AddressClass = llvm::DIExpression::extractAddressClass(v39, (const llvm::DIExpression *)&v75, v45);
          if (AddressClass != v39)
          {
            v73 = v75 | 0x100000000;
            v39 = AddressClass;
          }
        }
        if (v39)
          sub_1C4DFE610((unsigned int *)&v82, *((_BYTE **)v39 + 3), *((_BYTE **)v39 + 4));
        v76 = (unint64_t)v82;
        v77 = (uint64_t *)((char *)v82 + 8 * v83);
        v93 = ((v92 | ((unint64_t)v93 << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x200000000) >> 32;
        v46 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[22] + 176))(a1[22]);
        if (v46)
        {
          sub_1C63C70C8((uint64_t)a1, v74, v46);
        }
        else
        {
          v47 = *(_QWORD *)(*(_QWORD *)(a1[22] + 280) + 16);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 176))(v47);
          sub_1C601D588((uint64_t)&v85, v48, (uint64_t)&v76, v80);
        }
        sub_1C601E1B0((uint64_t)&v85, (uint64_t **)&v76, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C601E828, (uint64_t)&v81);
        if (v82 != v84)
          free(v82);
        v38 += 2;
        v37 -= 16;
      }
      while (v37);
    }
    else
    {
      v73 = 0;
    }
    if ((*(_DWORD *)(*(_QWORD *)(a1[22] + 248) + 472) & 0xFFFFFFFE) == 0x2C && *(_DWORD *)(a1[24] + 5512) == 1)
    {
      v60 = v73;
      if (!HIDWORD(v73))
        v60 = 6;
      v82 = (void *)v60;
      sub_1C6002D64((unint64_t)a1, v11, 51, 11, &v82);
    }
    if (v92 >= 0x10000 && (_WORD)v92)
      sub_1C601D3D4((void (***)(void))&v85, (unsigned __int16)v92, HIWORD(v92));
    sub_1C6021080((unint64_t)a1, v10, 2, v96);
    if (HIBYTE(v94))
    {
      v82 = (void *)v94;
      sub_1C6002D64((unint64_t)a1, v11, 15875, 11, &v82);
    }
    v85 = (unint64_t)&unk_1E81AB308;
    v31 = v88;
    if (v88 == v90)
      goto LABEL_6;
LABEL_88:
    free(v31);
    goto LABEL_6;
  }
  v19 = *(_QWORD *)(v18 + 8);
  if (!*(_BYTE *)(v18 + 72))
  {
    switch(*(_DWORD *)v19)
    {
      case 0:
        v50 = *(uint64_t **)(v19 + 16);
        v76 = (unint64_t)v50;
        if (*(_DWORD *)(a2 + 64))
        {
          v51 = sub_1C484358C(v8, 16, 3);
          *(_QWORD *)v51 = 0;
          *(_DWORD *)(v51 + 8) = 0;
          v52 = a1[22];
          v53 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 272) + 8) + 1624);
          LOBYTE(v86) = 0;
          v87 = a1;
          v88 = v90;
          v89 = 0x200000000;
          v91 = 0;
          v92 = 0;
          v93 = (v53 & 0xF) << 9;
          v94 = 0;
          v85 = (unint64_t)off_1E81AB9F8;
          v95 = v52;
          v96 = v51;
          v97 = 0;
          v98 = 0;
          v99 = 0;
          if (*(_DWORD *)(a2 + 64))
            v54 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8);
          else
            v54 = 0;
          sub_1C601E6B4((uint64_t)&v85, v54);
          sub_1C601E10C((uint64_t)&v85, &v76, v54);
          v82 = 0;
          v83 = 0;
          if (v54)
          {
            v55 = *(_QWORD **)(v54 + 24);
            v56 = *(_QWORD *)(v54 + 32);
            v57 = v56 - (_QWORD)v55;
            v82 = v55;
            v83 = v56;
          }
          else
          {
            v55 = (_QWORD *)MEMORY[0x18];
            v57 = MEMORY[0x20] - MEMORY[0x18];
          }
          if ((v57 & 0x7FFFFFFF8) != 0 && *v55 == 4099)
            sub_1C63C6464((uint64_t)&v85, (uint64_t **)&v82);
          v58 = *(_QWORD *)(*(_QWORD *)(a1[22] + 280) + 16);
          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 176))(v58);
          if (sub_1C601D588((uint64_t)&v85, v59, (uint64_t)&v82, HIDWORD(v50)))
          {
            sub_1C601E1B0((uint64_t)&v85, (uint64_t **)&v82, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C601E828, (uint64_t)&v78);
            if (v92 >= 0x10000 && (_WORD)v92)
              sub_1C601D3D4((void (***)(void))&v85, (unsigned __int16)v92, HIWORD(v92));
            sub_1C6021080((unint64_t)a1, v10, 2, v96);
            if (HIBYTE(v94))
            {
              v78 = v94;
              sub_1C6002D64((unint64_t)a1, v11, 15875, 11, &v78);
            }
          }
          v85 = (unint64_t)&unk_1E81AB308;
          v31 = v88;
          if (v88 != v90)
            goto LABEL_88;
        }
        else
        {
          sub_1C63C1564((unint64_t)a1, v10, 2, (uint64_t)&v76);
        }
        break;
      case 1:
        if (*(_DWORD *)(a2 + 64))
        {
          v61 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8);
          if (v61)
          {
            if (((*(_QWORD *)(v61 + 32) - *(_QWORD *)(v61 + 24)) & 0x7FFFFFFF8) != 0)
            {
              v62 = sub_1C484358C(v8, 16, 3);
              *(_QWORD *)v62 = 0;
              *(_DWORD *)(v62 + 8) = 0;
              v63 = a1[22];
              v64 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 272) + 8) + 1624);
              LOBYTE(v86) = 0;
              v87 = a1;
              v88 = v90;
              v89 = 0x200000000;
              v91 = 0;
              v92 = 0;
              v93 = (v64 & 0xF) << 9;
              v94 = 0;
              v85 = (unint64_t)off_1E81AB9F8;
              v95 = v63;
              v96 = v62;
              v97 = 0;
              v98 = 0;
              v99 = 0;
              sub_1C601E6B4((uint64_t)&v85, v61);
              v65 = *(_QWORD *)(v19 + 8);
              v93 = ((v92 | ((unint64_t)v93 << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000) >> 32;
              sub_1C601D2A8((void (***)(void))&v85, v65);
              v66 = *(_QWORD *)(v61 + 32);
              v82 = *(void **)(v61 + 24);
              v83 = v66;
              sub_1C601E1B0((uint64_t)&v85, (uint64_t **)&v82, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C601E828, (uint64_t)&v78);
              if (v92 >= 0x10000 && (_WORD)v92)
                sub_1C601D3D4((void (***)(void))&v85, (unsigned __int16)v92, HIWORD(v92));
              sub_1C6021080((unint64_t)a1, v10, 2, v96);
              if (HIBYTE(v94))
              {
                v82 = (void *)v94;
                v30 = &v82;
                goto LABEL_36;
              }
              goto LABEL_37;
            }
          }
        }
        sub_1C63C7414((unint64_t)a1, v10, *(_QWORD *)(v19 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 8) + 24));
        break;
      case 2:
        sub_1C63C73A0((unint64_t)a1, v10, *(_QWORD *)(v19 + 8));
        break;
      case 3:
        v71 = (uint64_t *)(*(_QWORD *)(v19 + 8) + 24);
        v72 = sub_1C5FFEFD4(*(_QWORD *)(*(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 8) + 24));
        sub_1C6021310((unint64_t)a1, v10, v71, v72);
        break;
      case 4:
        v67 = sub_1C484358C(v8, 16, 3);
        *(_QWORD *)v67 = 0;
        *(_DWORD *)(v67 + 8) = 0;
        v68 = a1[22];
        v69 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 272) + 8) + 1624);
        LOBYTE(v86) = 0;
        v87 = a1;
        v88 = v90;
        v89 = 0x200000000;
        v91 = 0;
        v92 = 0;
        v93 = (v69 & 0xF) << 9;
        v94 = 0;
        v85 = (unint64_t)off_1E81AB9F8;
        v95 = v68;
        v96 = v67;
        v97 = 0;
        v98 = 0;
        v99 = 0;
        if (**(_BYTE **)(*(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 8) + 24) == 11)
          v70 = *(_QWORD *)(*(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 8) + 24);
        else
          v70 = 0;
        sub_1C6010FA4(v68, v70, v18, (uint64_t)&v85);
        if (v92 >= 0x10000 && (_WORD)v92)
          sub_1C601D3D4((void (***)(void))&v85, (unsigned __int16)v92, HIWORD(v92));
        sub_1C6021080((unint64_t)a1, v10, 2, v96);
        v85 = (unint64_t)&unk_1E81AB308;
        v31 = v88;
        if (v88 != v90)
          goto LABEL_88;
        break;
      default:
        goto LABEL_6;
    }
    goto LABEL_6;
  }
  v20 = *(_DWORD *)(v18 + 16);
  if (!v20)
  {
LABEL_26:
    if (*(_DWORD *)(a2 + 64))
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8);
    else
      v23 = 0;
    v24 = sub_1C484358C(v8, 16, 3);
    *(_QWORD *)v24 = 0;
    *(_DWORD *)(v24 + 8) = 0;
    v25 = a1[22];
    v26 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 272) + 8) + 1624);
    LOBYTE(v86) = 0;
    v87 = a1;
    v88 = v90;
    v89 = 0x200000000;
    v91 = 0;
    v92 = 0;
    v93 = (v26 & 0xF) << 9;
    v94 = 0;
    v85 = (unint64_t)off_1E81AB9F8;
    v95 = v25;
    v96 = v24;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    sub_1C601E6B4((uint64_t)&v85, v23);
    v82 = 0;
    v83 = 0;
    if (v23)
    {
      v27 = *(_QWORD *)(v23 + 32);
      v82 = *(void **)(v23 + 24);
      v83 = v27;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(a1[22] + 280) + 16);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 176))(v28);
    v78 = (unint64_t)&v85;
    v79 = v29;
    v76 = (unint64_t)&v78;
    v77 = &v80;
    if (sub_1C601E1B0((uint64_t)&v85, (uint64_t **)&v82, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C600829C, (uint64_t)&v76))
    {
      if (v92 >= 0x10000 && (_WORD)v92)
        sub_1C601D3D4((void (***)(void))&v85, (unsigned __int16)v92, HIWORD(v92));
      sub_1C6021080((unint64_t)a1, v10, 2, v96);
      if (HIBYTE(v94))
      {
        v76 = v94;
        v30 = (void **)&v76;
LABEL_36:
        sub_1C6002D64((unint64_t)a1, v11, 15875, 11, v30);
      }
    }
LABEL_37:
    v85 = (unint64_t)&unk_1E81AB308;
    v31 = v88;
    if (v88 == v90)
      goto LABEL_6;
    goto LABEL_88;
  }
  v21 = v19 + 24 * v20;
  while (*(_DWORD *)v19 || HIDWORD(*(_QWORD *)(v19 + 16)) != 0)
  {
    v19 += 24;
    if (v19 == v21)
      goto LABEL_26;
  }
LABEL_6:
  *(_QWORD *)(a2 + 24) = v10;
  v12 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(v12 + 37) & 4) != 0
    || (*(_BYTE *)(*(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 24) + 29) & 4) != 0)
  {
    *a4 = v10;
  }
  return v10;
}

uint64_t sub_1C60064E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t *v20;

  v6 = sub_1C6003DFC(a1, a2);
  v7 = v6;
  while (1)
  {
    v8 = *(unsigned __int16 *)(v7 + 28) - 17;
    v9 = v8 > 0x39;
    v10 = (1 << v8) & 0x201000000000001;
    if (!v9 && v10 != 0)
      break;
    v13 = 0;
    v12 = *(_QWORD *)(v7 + 40);
    if ((v12 & 4) == 0)
    {
      v7 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v7)
        continue;
    }
    goto LABEL_9;
  }
  v13 = (_QWORD *)(*(_QWORD *)(v7 + 40) & ((uint64_t)(*(_QWORD *)(v7 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
LABEL_9:
  if (a3)
  {
    v14 = sub_1C60044EC(v13, a3, v6);
    if (v14)
      sub_1C6020D94((unint64_t)v13, v6, 100, v14);
  }
  v15 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v16 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 24);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 + 8);
    if (v17 >= 2
      && !*(_QWORD *)(v16 - 8 * v17 + 8 * (v17 - 1))
      && *(_DWORD *)(a1[9] + 36) != 2
      && (!*(_BYTE *)(a1[24] + 3549) || a1[41]))
    {
      v19 = sub_1C484358C((uint64_t)(a1 + 10), 48, 3);
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)v19 = v19 | 4;
      *(_DWORD *)(v19 + 24) = -1;
      *(_WORD *)(v19 + 28) = 24;
      *(_BYTE *)(v19 + 30) = 0;
      *(_QWORD *)(v19 + 32) = 0;
      *(_QWORD *)(v19 + 40) = v6;
      v20 = *(unint64_t **)(v6 + 32);
      if (v20)
      {
        *(_QWORD *)v19 = *v20;
        *v20 = v19;
      }
      *(_QWORD *)(v6 + 32) = v19;
    }
  }
  return v6;
}

char *sub_1C6006654(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  char *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v23;
  void **v24;
  unint64_t v25;
  const void **v26;
  BOOL v27;
  uint64_t v28;

  v4 = result;
  if (!a3)
  {
LABEL_2:
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = result + 8;
    *((_QWORD *)result + 3) = result + 40;
    *((_DWORD *)result + 9) = 8;
    return result;
  }
  v5 = ((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1);
  v6 = (uint64_t *)(a2 + 112 * v5);
  v7 = *v6;
  if (*v6 != a4)
  {
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (a3 - 1);
      v6 = (uint64_t *)(a2 + 112 * v5);
      v7 = *v6;
      if (*v6 == a4)
        goto LABEL_8;
    }
    goto LABEL_2;
  }
LABEL_8:
  *((_QWORD *)result + 1) = 0;
  v10 = result + 8;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = result + 8;
  v11 = (uint64_t *)v6[1];
  if (v11 != v6 + 2)
  {
    while (1)
    {
      v12 = *((_DWORD *)v11 + 8);
      v13 = *((_QWORD *)v4 + 1);
      v14 = v4 + 8;
      if (*(char **)v4 != v10)
      {
        v15 = *((_QWORD *)v4 + 1);
        v16 = v4 + 8;
        if (v13)
        {
          do
          {
            v14 = (char *)v15;
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15);
        }
        else
        {
          do
          {
            v14 = (char *)*((_QWORD *)v16 + 2);
            v27 = *(_QWORD *)v14 == (_QWORD)v16;
            v16 = v14;
          }
          while (v27);
        }
        if (*((_DWORD *)v14 + 8) >= v12)
          break;
      }
      if (v13)
        v17 = v14;
      else
        v17 = v4 + 8;
      if (v13)
        v18 = v14 + 8;
      else
        v18 = v4 + 8;
      if (!*(_QWORD *)v18)
        goto LABEL_22;
LABEL_25:
      v21 = (uint64_t *)v11[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v11[2];
          v27 = *v22 == (_QWORD)v11;
          v11 = v22;
        }
        while (!v27);
      }
      v11 = v22;
      if (v22 == v6 + 2)
        goto LABEL_39;
    }
    v18 = v4 + 8;
    v17 = v4 + 8;
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v17 = (char *)v13;
          v23 = *(_DWORD *)(v13 + 32);
          if (v23 <= v12)
            break;
          v13 = *(_QWORD *)v17;
          v18 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_22;
        }
        if (v23 >= v12)
          goto LABEL_25;
        v13 = *((_QWORD *)v17 + 1);
        if (!v13)
        {
          v18 = v17 + 8;
          break;
        }
      }
    }
LABEL_22:
    v19 = operator new(0x30uLL);
    v19[2] = *((_OWORD *)v11 + 2);
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = v17;
    *(_QWORD *)v18 = v19;
    v20 = **(_QWORD **)v4;
    if (v20)
    {
      *(_QWORD *)v4 = v20;
      v19 = *(_OWORD **)v18;
    }
    result = (char *)sub_1C4768E74(*((uint64_t **)v4 + 1), (uint64_t *)v19);
    ++*((_QWORD *)v4 + 2);
    goto LABEL_25;
  }
LABEL_39:
  *((_QWORD *)v4 + 3) = v4 + 40;
  v24 = (void **)(v4 + 24);
  *((_QWORD *)v4 + 4) = 0x800000000;
  v25 = *((unsigned int *)v6 + 10);
  v26 = (const void **)(v6 + 4);
  if ((_DWORD)v25)
    v27 = v24 == (void **)v26;
  else
    v27 = 1;
  if (!v27)
  {
    if (v25 >= 9)
    {
      result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 24), (uint64_t)(v4 + 40), v25, 8);
      v24 = (void **)(v4 + 24);
      v28 = *((unsigned int *)v6 + 10);
      if (!(_DWORD)v28)
        goto LABEL_46;
    }
    else
    {
      v28 = *((unsigned int *)v6 + 10);
    }
    result = (char *)memcpy(*v24, *v26, 8 * v28);
LABEL_46:
    *((_DWORD *)v4 + 8) = v25;
  }
  return result;
}

unint64_t sub_1C60068D8(_QWORD *a1, uint64_t a2)
{
  __int16 v4;
  unint64_t v5;
  _QWORD **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = *(_WORD *)(a2 + 2);
  v5 = sub_1C484358C((uint64_t)(a1 + 10), 48, 3);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = v5 | 4;
  *(_DWORD *)(v5 + 24) = -1;
  *(_WORD *)(v5 + 28) = v4;
  *(_BYTE *)(v5 + 30) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v6 = (_QWORD **)(v5 + 32);
  *(_QWORD *)(v5 + 40) = 0;
  sub_1C60206C8(a1, (unsigned __int8 *)a2, v5);
  v7 = *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  switch(*v7)
  {
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
      goto LABEL_2;
    case 0xFu:
    case 0x10u:
    case 0x12u:
    case 0x13u:
    case 0x16u:
    case 0x17u:
      goto LABEL_4;
    case 0x11u:
      v8 = sub_1C6021B28(a1, (uint64_t)v7, 0);
      goto LABEL_8;
    case 0x14u:
      v8 = sub_1C6021A0C(a1, (uint64_t)v7);
      goto LABEL_8;
    case 0x15u:
      v8 = sub_1C6021C40(a1, (uint64_t)v7);
      goto LABEL_8;
    case 0x18u:
      v8 = sub_1C63C1168(a1, (uint64_t)v7, 0, 0);
      goto LABEL_8;
    default:
      if (*v7 == 33)
LABEL_2:
        v8 = sub_1C6021928(a1, (uint64_t)v7);
      else
LABEL_4:
        v8 = sub_1C6020664(a1, v7);
LABEL_8:
      v9 = v8;
      sub_1C602125C((unint64_t)a1, v5, *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24));
      sub_1C6020D94((unint64_t)a1, v5, 24, v9);
      v10 = *(unsigned int *)(a2 + 8);
      v11 = -v10;
      v12 = *(_QWORD *)(a2 - 8 * v10 + 16);
      if (v12)
      {
        v13 = *(size_t **)(v12 + 8);
        if (*v13)
        {
          sub_1C60207E4(a1, v5, 3, v13 + 3, *v13);
          v11 = -(uint64_t)*(unsigned int *)(a2 + 8);
        }
      }
      v14 = *(_QWORD *)(a2 + 8 * v11 + 32);
      if (v14)
        v15 = (_QWORD *)(v14 - 8 * *(unsigned int *)(v14 + 8));
      else
        v15 = 0;
      for (; v15 != (_QWORD *)v14; ++v15)
      {
        if (*v15)
        {
          v16 = (_QWORD *)sub_1C60068D8(a1);
          v16[5] = v5 & 0xFFFFFFFFFFFFFFFBLL;
          v17 = *v6;
          if (*v6)
          {
            *v16 = *v17;
            *v17 = v16;
          }
          *v6 = v16;
        }
      }
      return v5;
  }
}

unint64_t sub_1C6006AB8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t *v11;
  unsigned int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)(a1[24] + 3549) && (a1[41] ? (v22 = byte_1ED838588 == 0) : (v22 = 0), v22))
    v4 = a1 + 62;
  else
    v4 = (uint64_t *)(a1[25] + 384);
  v24 = *(_QWORD *)(a2 + 8);
  result = (unint64_t)sub_1C4EB63C4(v4, &v24);
  if (!*(_QWORD *)(result + 8))
  {
    v6 = result;
    v7 = *(_QWORD *)(a2 + 8);
    if (*(_DWORD *)(a1[9] + 36) == 2 || *(_BYTE *)(a1[24] + 3549) && !a1[41])
    {
      v8 = (uint64_t)(a1 + 1);
    }
    else
    {
      v14 = v7 - 8 * *(unsigned int *)(v7 + 8);
      v15 = *(_QWORD *)(v14 + 48);
      if (!v15)
      {
        v16 = sub_1C60218D4(a1, *(unsigned __int8 **)(v14 + 8));
        v8 = v16;
        v17 = a1[24];
        if (v16)
        {
          v18 = v16;
          while (1)
          {
            v19 = *(unsigned __int16 *)(v18 + 28);
            if (v19 == 17 || v19 == 65 || v19 == 74)
              break;
            v20 = 0;
            v21 = *(_QWORD *)(v18 + 40);
            if ((v21 & 4) == 0)
            {
              v18 = v21 & 0xFFFFFFFFFFFFFFF8;
              if (v18)
                continue;
            }
            goto LABEL_19;
          }
          v20 = v18;
        }
        else
        {
          v20 = 0;
        }
LABEL_19:
        v23 = 0;
        v24 = v20;
        if (sub_1C6144EA0((uint64_t *)(v17 + 584), &v24, &v23))
          v9 = *(_QWORD **)(v23 + 8);
        else
          v9 = 0;
        goto LABEL_7;
      }
      v8 = (uint64_t)(a1 + 1);
      sub_1C6021B28(a1, v15, 0);
    }
    v9 = a1;
LABEL_7:
    v10 = sub_1C6020FE0(v9, 46, v8, 0);
    *(_QWORD *)(v6 + 8) = v10;
    sub_1C6006CB8(v9, v7, v10);
    v11 = (unint64_t *)(*(_QWORD *)(v6 + 8) + 8);
    v12 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624);
    v24 = 1;
    if (v12 >= 5)
      v13 = 33;
    else
      v13 = 11;
    sub_1C6002D64((unint64_t)v9, v11, 32, v13, &v24);
    result = sub_1C60044EC(v9, a2, *(_QWORD *)(v6 + 8));
    if (result)
      return sub_1C6020D94((unint64_t)v9, *(_QWORD *)(v6 + 8), 100, result);
  }
  return result;
}

void sub_1C6006CB8(_QWORD *a1, uint64_t a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::DIScope *v8;
  _BOOL4 v9;
  uint64_t v10;
  size_t *v11;
  const void *v12;
  size_t v13;
  size_t v14;

  v6 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7)
    v6 = v7 - 8 * *(unsigned int *)(v7 + 8);
  v8 = *(llvm::DIScope **)(v6 + 8);
  if (*(_DWORD *)(a1[9] + 36) == 2)
  {
    v9 = 1;
  }
  else if (*(_BYTE *)(a1[24] + 3549))
  {
    v9 = a1[41] == 0;
  }
  else
  {
    v9 = 0;
  }
  sub_1C6023958((unint64_t)a1, a2, a3, v9);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v10)
  {
    v11 = *(size_t **)(v10 + 8);
    v14 = *v11;
    v12 = v11 + 3;
    v13 = v14;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  sub_1C60030E4(a1, v12, v13, a3, v8);
}

void sub_1C6006D7C(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v9;

  v4 = sub_1C6020664(a1, a2);
  if (*(_BYTE *)(a1[24] + 3549) && (a1[41] ? (v7 = byte_1ED838588 == 0) : (v7 = 0), v7))
    v5 = a1 + 62;
  else
    v5 = (uint64_t *)(a1[25] + 384);
  v8 = 0;
  v9 = a2;
  if ((sub_1C4850EC8(v5, &v9, &v8) & 1) != 0 && (v6 = *(_QWORD *)(v8 + 8)) != 0)
  {
    if (v4)
      sub_1C6020D94((unint64_t)a1, v4, 49, v6);
  }
  else if (v4)
  {
    sub_1C6006CB8(a1, (uint64_t)a2, v4);
  }
}

unint64_t sub_1C6006E34(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v4 = sub_1C6006EF0(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 && (v6 = *(_QWORD *)(v4 + 24)) != 0)
  {
    result = sub_1C6020D94((unint64_t)a1, *(_QWORD *)(a2 + 24), 49, v6);
    if (*(_DWORD *)(a2 + 32) != 1)
      return result;
  }
  else
  {
    v9 = *(_DWORD *)(a2 + 32);
    if (!v9)
      return sub_1C60057E0(a1, a2, *(_QWORD *)(a2 + 24));
    if (v9 == 1)
      v10 = a2;
    else
      v10 = 0;
    result = sub_1C63C1850(a1, v10, *(_QWORD *)(a2 + 24));
  }
  v8 = *(_QWORD *)(a2 + 40);
  if (v8)
    return sub_1C60029A0((unint64_t)a1, v5, 17, v8);
  return result;
}

uint64_t sub_1C6006EF0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1[24] + 3549) && (a1[41] ? (v6 = byte_1ED838588 == 0) : (v6 = 0), v6))
    v2 = (uint64_t)(a1 + 65);
  else
    v2 = a1[25] + 408;
  v7 = a2;
  v8 = 0;
  v3 = sub_1C4926528(v2, &v7, &v8);
  result = 0;
  if (v3)
    v5 = v8 == *(_QWORD *)v2 + 16 * *(unsigned int *)(v2 + 16);
  else
    v5 = 1;
  if (!v5)
    return *(_QWORD *)(v8 + 8);
  return result;
}

_QWORD *sub_1C6006F80(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  _DWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v15 = a2;
  if (*(_BYTE *)(a1[24] + 3549) && (a1[41] ? (v12 = byte_1ED838588 == 0) : (v12 = 0), v12))
    v5 = a1 + 65;
  else
    v5 = (_DWORD *)(a1[25] + 408);
  result = sub_1C600849C(v5, &v15);
  v7 = result;
  v8 = v15;
  v9 = *v15;
  if (v9 == 25)
  {
    v10 = operator new();
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)v10 = &unk_1E81AB2C8;
    *(_QWORD *)(v10 + 8) = v8;
    *(_WORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v10 + 72;
    *(_QWORD *)(v10 + 64) = 0x100000000;
    v11 = v7[1];
    v7[1] = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v10 = v7[1];
    }
    return (_QWORD *)sub_1C601EBEC(a1[25], a3, (uint64_t *)v10);
  }
  else if (v9 == 26)
  {
    v13 = operator new();
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_DWORD *)(v13 + 32) = 1;
    *(_QWORD *)v13 = &unk_1E81AB2E8;
    *(_QWORD *)(v13 + 8) = v8;
    *(_QWORD *)(v13 + 40) = 0;
    v14 = v7[1];
    v7[1] = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v13 = v7[1];
    }
    return sub_1C63C682C(a1[25], a3, v13);
  }
  return result;
}

uint64_t sub_1C60070F0(_QWORD *a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t TempSymbol;
  const char *v9;
  __int16 v10;

  if (a1[41])
    goto LABEL_2;
  v5 = a1[24];
  if (!*(_BYTE *)(v5 + 3533))
  {
    v7 = a1[22];
    v9 = "cu_begin";
    v10 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(*(_QWORD *)(v7 + 264), (uint64_t)&v9, 1);
    a1[42] = TempSymbol;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1[22] + 272) + 192))(*(_QWORD *)(a1[22] + 272), TempSymbol, 0);
    if (a1[41])
    {
LABEL_2:
      v4 = 5;
      goto LABEL_7;
    }
    v5 = a1[24];
  }
  if (*(_BYTE *)(v5 + 3549))
    v4 = 4;
  else
    v4 = 1;
LABEL_7:
  result = sub_1C6024770(a1, a2, v4);
  if (v4 != 1
    && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624) >= 5u)
  {
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1[22] + 272) + 512))(*(_QWORD *)(a1[22] + 272), a1[68], 8);
  }
  return result;
}

BOOL sub_1C60071F4(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v5;

  v1 = a1[9];
  v2 = *(_DWORD *)(v1 + 52);
  if (v2)
    return v2 != 2;
  v3 = a1[24];
  if (*(_DWORD *)(v3 + 5512) != 1)
    return 0;
  v5 = *(_DWORD *)(v1 + 36);
  if (v5 == 2)
    return 0;
  if (!*(_BYTE *)(v3 + 3549))
  {
    if (v5 != 3)
      goto LABEL_14;
    return 0;
  }
  if (v5 == 3 || a1[41] == 0)
    return 0;
LABEL_14:
  if (*(_DWORD *)(v3 + 3544) == 2)
    return 0;
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 272) + 8) + 1624) < 5u;
}

void sub_1C6007280(_QWORD *a1, const void *a2, size_t a3, llvm::DIScope *a4)
{
  std::string::size_type v8;
  const std::string::value_type *v9;
  char v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  std::string *v21;
  size_t size;
  std::string v23;
  _QWORD *v24;
  std::string *v25;
  size_t v26;
  _QWORD *v27;
  void **__dst;
  size_t v29;
  unint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  if (!sub_1C60071F4(a1))
    return;
  sub_1C6022C94(a4, (uint64_t)a1, (uint64_t)&v23);
  if (a2)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a3 >= 0x17)
    {
      v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v12 = a3 | 7;
      v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      v29 = a3;
      v30 = v13 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v30) = a3;
      p_dst = (void **)&__dst;
      if (!a3)
        goto LABEL_13;
    }
    memmove(p_dst, a2, a3);
LABEL_13:
    *((_BYTE *)p_dst + a3) = 0;
    v10 = HIBYTE(v30);
    v9 = (const std::string::value_type *)__dst;
    v8 = v29;
    goto LABEL_14;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  __dst = 0;
  v29 = 0;
  v30 = 0;
LABEL_14:
  v14 = v10 < 0;
  if (v10 >= 0)
    v15 = (const std::string::value_type *)&__dst;
  else
    v15 = v9;
  v16 = v10 & 0x7F;
  if (v14)
    v17 = v8;
  else
    v17 = v16;
  v18 = std::string::append(&v23, v15, v17);
  v19 = v18->__r_.__value_.__r.__words[0];
  v31[0] = v18->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v23.__r_.__value_.__r.__words[0] = v19;
  v23.__r_.__value_.__l.__size_ = v31[0];
  *(std::string::size_type *)((char *)&v23.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v31 + 7);
  *((_BYTE *)&v23.__r_.__value_.__s + 23) = v20;
  if (v20 >= 0)
    v21 = &v23;
  else
    v21 = (std::string *)v19;
  if (v20 >= 0)
    size = v20 & 0x7F;
  else
    size = v23.__r_.__value_.__l.__size_;
  v24 = a1 + 1;
  v25 = v21;
  v26 = size;
  v27 = a1 + 1;
  sub_1C61CE3B0((uint64_t)(a1 + 47), (unsigned __int8 *)v21, size, (size_t *)&v27);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1C6007450(_QWORD *a1, uint64_t a2, size_t a3, llvm::DIScope *a4)
{
  uint64_t v8;
  std::string::size_type v9;
  void **v10;
  unint64_t *v11;
  size_t v12;
  const void *v13;
  unint64_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  void **v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  unsigned __int8 *v24;
  size_t v25;
  void *__p;
  size_t v27;
  unint64_t v28;
  std::string v29;
  void *v30[2];
  uint64_t v31;

  if (!sub_1C60071F4(a1))
    return;
  sub_1C6022C94(a4, (uint64_t)a1, (uint64_t)&v29);
  v8 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v8)
  {
    v11 = *(unint64_t **)(v8 + 8);
    v14 = *v11;
    v13 = v11 + 3;
    v12 = v14;
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v12 >= 0x17)
    {
      v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v16 = v12 | 7;
      v17 = v16 + 1;
      p_p = operator new(v16 + 1);
      v27 = v12;
      v28 = v17 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v28) = v12;
      p_p = &__p;
      if (!v12)
        goto LABEL_13;
    }
    memmove(p_p, v13, v12);
LABEL_13:
    *((_BYTE *)p_p + v12) = 0;
    LOBYTE(v8) = HIBYTE(v28);
    v10 = (void **)__p;
    v9 = v27;
    goto LABEL_14;
  }
  v9 = 0;
  v10 = 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
LABEL_14:
  v18 = (v8 & 0x80u) != 0;
  if ((v8 & 0x80u) == 0)
    v19 = &__p;
  else
    v19 = v10;
  v20 = v8 & 0x7F;
  if (v18)
    v21 = v9;
  else
    v21 = v20;
  v22 = std::string::append(&v29, (const std::string::value_type *)v19, v21);
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)v30 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v31 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v31 >= 0)
    v24 = (unsigned __int8 *)v30;
  else
    v24 = (unsigned __int8 *)v30[0];
  if (v31 >= 0)
    v25 = HIBYTE(v31) & 0x7F;
  else
    v25 = (size_t)v30[1];
  (*sub_1C6136E50((uint64_t)(a1 + 51), v24, v25))[1] = a3;
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
}

void sub_1C60075E4(_QWORD *a1, uint64_t a2, llvm::DIScope *a3)
{
  uint64_t v6;
  std::string::size_type v7;
  const std::string::value_type *v8;
  unint64_t *v9;
  size_t v10;
  const void *v11;
  unint64_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  std::string *v23;
  size_t size;
  std::string v25;
  _QWORD *v26;
  std::string *v27;
  size_t v28;
  _QWORD *v29;
  void **__dst;
  size_t v31;
  unint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  if (!sub_1C60071F4(a1))
    return;
  sub_1C6022C94(a3, (uint64_t)a1, (uint64_t)&v25);
  v6 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v6)
  {
    v9 = *(unint64_t **)(v6 + 8);
    v12 = *v9;
    v11 = v9 + 3;
    v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v10 >= 0x17)
    {
      v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v14 = v10 | 7;
      v15 = v14 + 1;
      p_dst = (void **)operator new(v14 + 1);
      v31 = v10;
      v32 = v15 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v32) = v10;
      p_dst = (void **)&__dst;
      if (!v10)
        goto LABEL_13;
    }
    memmove(p_dst, v11, v10);
LABEL_13:
    *((_BYTE *)p_dst + v10) = 0;
    LOBYTE(v6) = HIBYTE(v32);
    v8 = (const std::string::value_type *)__dst;
    v7 = v31;
    goto LABEL_14;
  }
  v7 = 0;
  v8 = 0;
  __dst = 0;
  v31 = 0;
  v32 = 0;
LABEL_14:
  v16 = (v6 & 0x80u) != 0;
  if ((v6 & 0x80u) == 0)
    v17 = (const std::string::value_type *)&__dst;
  else
    v17 = v8;
  v18 = v6 & 0x7F;
  if (v16)
    v19 = v7;
  else
    v19 = v18;
  v20 = std::string::append(&v25, v17, v19);
  v21 = v20->__r_.__value_.__r.__words[0];
  v33[0] = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__r.__words[0] = 0;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v32) < 0)
    operator delete(__dst);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v25.__r_.__value_.__r.__words[0] = v21;
  v25.__r_.__value_.__l.__size_ = v33[0];
  *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v33 + 7);
  *((_BYTE *)&v25.__r_.__value_.__s + 23) = v22;
  if (v22 >= 0)
    v23 = &v25;
  else
    v23 = (std::string *)v21;
  if (v22 >= 0)
    size = v22 & 0x7F;
  else
    size = v25.__r_.__value_.__l.__size_;
  v26 = a1 + 1;
  v27 = v23;
  v28 = size;
  v29 = a1 + 1;
  sub_1C61CE3B0((uint64_t)(a1 + 51), (unsigned __int8 *)v23, size, (size_t *)&v29);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

_QWORD *sub_1C60077C0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  size_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  const char *v21[5];
  void *v22;
  __int128 v23;
  _QWORD v24[6];

  v24[4] = *MEMORY[0x1E0C80C00];
  v1 = result[72];
  v2 = result[71];
  if (v1 != v2)
  {
    v16 = (uint64_t)(result + 10);
    v3 = (unint64_t)(result + 1) & 0xFFFFFFFFFFFFFFFBLL;
    do
    {
      v4 = result;
      v5 = sub_1C484358C(v16, 48, 3);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = v5 | 4;
      *(_DWORD *)(v5 + 24) = -1;
      *(_WORD *)(v5 + 28) = 36;
      *(_BYTE *)(v5 + 30) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = v3;
      v6 = v4;
      v7 = (unint64_t *)v4[5];
      if (v7)
      {
        *(_QWORD *)v5 = *v7 & 0xFFFFFFFFFFFFFFF8;
        *v7 = v5 | 4;
      }
      else
      {
        v4[5] = v5;
      }
      v8 = v5 & 0xFFFFFFFFFFFFFFF8;
      v22 = v24;
      v23 = xmmword_1C677F680;
      v9 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)*(unsigned __int8 *)(v1 - 12));
      v20 = 773;
      v19[0] = (uint64_t)v9;
      v19[1] = v10;
      v19[2] = (uint64_t)"_";
      v11 = *(_DWORD *)(v1 - 16);
      v18 = 264;
      LODWORD(v17[0]) = v11;
      sub_1C4825FE4(v19, v17, (uint64_t)v21);
      v12 = (char *)sub_1C50561CC(v21, (uint64_t)&v22);
      sub_1C60207E4(v6, v8, 3, v12, v13);
      v21[0] = (const char *)*(unsigned __int8 *)(v1 - 12);
      v14 = 11;
      sub_1C6002D64((unint64_t)v6, (unint64_t *)(v8 + 8), 62, 11, v21);
      v15 = *(unsigned int *)(v1 - 16);
      if (v15 >= 0x7F9)
      {
        if (v15 >= 0x7FFF9)
          v14 = 6;
        else
          v14 = 5;
      }
      v21[0] = (const char *)((unint64_t)(v15 + 7) >> 3);
      sub_1C6002D64((unint64_t)v6, (unint64_t *)(v8 + 8), 11, v14, v21);
      *(_QWORD *)(v1 - 8) = v8;
      if (v22 != v24)
        free(v22);
      v1 -= 16;
      result = v6;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1C60079D8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 192);
  v2 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 272) + 8) + 1624);
  v3 = 3;
  if (v2 >= 5)
  {
    if (*(_BYTE *)(v1 + 3549))
      v3 = 11;
    else
      v3 = 3;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 272) + 8) + 1626))
    v4 = 8;
  else
    v4 = 4;
  if (v2 <= 4)
    v5 = v3;
  else
    v5 = v3 + 1;
  return (v5 + v4);
}

uint64_t sub_1C6007A3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v17 = 0;
  result = sub_1C5ED70F8(a2, *a3, &v17);
  v7 = v17;
  v8 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v8 & 1) != 0)
    {
      v15 = a2 + 8;
      v16 = 8;
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(unsigned int *)(a2 + 16);
    }
    v14 = 0;
    v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  v9 = v8 >> 1;
  if ((v8 & 1) != 0)
    v10 = 8;
  else
    v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_15;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 4) <= v10 >> 3)
  {
LABEL_15:
    sub_1C5ED719C(a2, v10);
    v17 = 0;
    result = sub_1C5ED70F8(a2, *a3, &v17);
    v7 = v17;
  }
  *(_DWORD *)a2 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 4);
  *v7 = *a3;
  v11 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v12 = 8;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a2 + 16);
  }
  v13 = v11 + 8 * v12;
  v14 = 1;
LABEL_11:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1C6007B78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 24 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 24);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 24 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*(_QWORD *)a2 + 24 * v5), *(_QWORD *)a2 + 24 * v6 - (*(_QWORD *)a2 + 24 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C6007C68(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v6)
          v7 = v6 == -8;
        else
          v7 = 1;
        if (!v7)
          MEMORY[0x1CAA32FB4]();
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1C6007CE0(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 88 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      v4 = *(_QWORD *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
        {
          v6 = v3;
          v7 = v2;
          free(v5);
          v3 = v6;
          v2 = v7;
        }
      }
      v3 += 88;
      v2 -= 88;
    }
    while (v2);
  }
}

_QWORD *sub_1C6007D50(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6007DC0(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6007E60((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
  }
  return v5;
}

uint64_t sub_1C6007DC0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 88 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 88 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6007E60(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C6007F10(a1, v7);
  v9 = 0;
  sub_1C6007DC0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C6007F10(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63C1F88(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C6007FD4(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  void *v5;
  _DWORD *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v5 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v5);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_6;
    }
    v6 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, *a2, 16 * v8);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) < v8)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
      a2 = v14;
    }
    else if ((_DWORD)v9)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 16 * v9);
      v10 = v13;
      a2 = v15;
LABEL_12:
      v11 = *v6;
      if (v10 != v11)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v10), (char *)*a2 + 16 * v10, (_BYTE *)*a2 + 16 * v11 - ((_BYTE *)*a2 + 16 * v10));
LABEL_14:
      *(_DWORD *)(a1 + 8) = v8;
LABEL_6:
      *v6 = 0;
      return a1;
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

unint64_t sub_1C6008110(unint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t result;
  int v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  unint64_t *v11;

  result = sub_1C484358C(a2, 24, 3);
  v6 = *a3;
  v7 = *((_WORD *)a3 + 2);
  v8 = *((_WORD *)a3 + 3);
  switch(*a3)
  {
    case 1:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 1;
      goto LABEL_3;
    case 2:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 2;
      goto LABEL_3;
    case 3:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 3;
      goto LABEL_3;
    case 4:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 4;
      goto LABEL_3;
    case 5:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 5;
      goto LABEL_3;
    case 6:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 6;
      goto LABEL_3;
    case 7:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 7;
      goto LABEL_3;
    case 8:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 8;
      goto LABEL_3;
    case 9:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 9;
      goto LABEL_3;
    case 10:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 10;
      goto LABEL_3;
    case 11:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 11;
      goto LABEL_3;
    case 12:
      v9 = *((_QWORD *)a3 + 1);
      *(_QWORD *)result = result | 4;
      v10 = 12;
LABEL_3:
      *(_DWORD *)(result + 8) = v10;
      *(_WORD *)(result + 12) = v7;
      *(_WORD *)(result + 14) = v8;
      *(_QWORD *)(result + 16) = v9;
      break;
    default:
      *(_QWORD *)result = result | 4;
      *(_DWORD *)(result + 8) = v6;
      *(_WORD *)(result + 12) = v7;
      *(_WORD *)(result + 14) = v8;
      break;
  }
  v11 = (unint64_t *)*a1;
  if (*a1)
  {
    *(_QWORD *)result = *v11;
    *v11 = result;
  }
  *a1 = result;
  return result;
}

uint64_t sub_1C600829C(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  llvm::detail::DoubleAPFloat *v8;
  void *v9;
  unsigned int v10;
  void (***v11)(void);
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1[1] + 8);
  switch(*(_DWORD *)(v4 + 24 * a2))
  {
    case 0:
      v5 = sub_1C601D588(*v3, v3[1], a3, *(_DWORD *)(v4 + 24 * a2 + 20));
      result = 0;
      if ((v5 & 1) != 0)
        return 1;
      return result;
    case 1:
      v18 = *v3;
      v17 = *(_QWORD *)(v4 + 24 * a2 + 8);
      goto LABEL_15;
    case 2:
      v7 = *(_QWORD *)(v4 + 24 * a2 + 8);
      v9 = *(void **)(v7 + 32);
      v8 = (llvm::detail::DoubleAPFloat *)(v7 + 32);
      if (v9 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v8, (unsigned int *)&v23);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v8, (unsigned int *)&v23);
      v10 = v24;
      if (v24 > 0x40
        || (v11 = (void (***)(void))*v3,
            v12 = v23,
            v13 = (unsigned int *)(*v3 + 80),
            v14 = (*v13 | ((unint64_t)*(unsigned __int16 *)(*v3 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000,
            *v13 = *v13,
            *((_WORD *)v13 + 2) = WORD2(v14),
            sub_1C601D2A8(v11, v12),
            v24 > 0x40))
      {
        if (v23)
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        if (v10 >= 0x41)
          return 0;
      }
      return 1;
    case 3:
      v15 = *(_QWORD *)(v4 + 24 * a2 + 8);
      v16 = *(unsigned int *)(v15 + 32);
      if (v16 >= 0x41)
      {
        v20 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
        v21 = (void *)operator new[]();
        memcpy(v21, *(const void **)(v15 + 24), v20);
        MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
        return 0;
      }
      else
      {
        v17 = *(_QWORD *)(v15 + 24);
        v18 = *v3;
LABEL_15:
        v19 = (*(unsigned int *)(v18 + 80) | ((unint64_t)*(unsigned __int16 *)(v18 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
        *(_DWORD *)(v18 + 80) = *(_DWORD *)(v18 + 80);
        *(_WORD *)(v18 + 84) = WORD2(v19);
        sub_1C601D2A8((void (***)(void))v18, v17);
        return 1;
      }
    default:
      v22 = *(_QWORD *)(v4 + 24 * a2 + 16);
      sub_1C63C6794((unsigned int *)*v3, v22, v22 >> 32);
      return 1;
  }
}

_QWORD *sub_1C600849C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4926528((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C60084F8(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C60084F8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C60085A8((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4926528((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C60085A8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6008660(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C6008660(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C4926528(v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C600872C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E81AB2C8;
  v2 = (_QWORD *)a1[7];
  if (v2 != a1 + 9)
    free(v2);
  sub_1C60087D4(a1 + 6);
  return a1;
}

void sub_1C6008778(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E81AB2C8;
  v2 = (_QWORD *)a1[7];
  if (v2 != a1 + 9)
    free(v2);
  sub_1C60087D4(a1 + 6);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C60087D4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 8);
    if (v3 != (void *)(v2 + 24))
      free(v3);
    MEMORY[0x1CAA32FC0](v2, 0x10E0C400FD40FC7);
  }
  return a1;
}

uint64_t sub_1C600882C(uint64_t a1, llvm::dwarf *this, _BYTE *a3)
{
  uint64_t (***v4)(_QWORD, llvm::dwarf *, _QWORD *);
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9[4];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13[4];
  char v14;
  char v15;
  uint64_t v16[5];
  _QWORD v17[4];
  __int16 v18;

  if (*(_BYTE *)(a1 + 104))
    v4 = (uint64_t (***)(_QWORD, llvm::dwarf *, _QWORD *))(*(_QWORD *)(a1 + 88) + 80);
  else
    v4 = *(uint64_t (****)(_QWORD, llvm::dwarf *, _QWORD *))(a1 + 96);
  if (a3)
  {
    v7 = 1;
    v15 = 1;
    if (*a3)
    {
      v13[0] = (uint64_t)a3;
      v7 = 3;
    }
    v14 = v7;
    v11 = " ";
    v12 = 259;
    sub_1C4825FE4(v13, (uint64_t *)&v11, (uint64_t)v16);
    v10 = 261;
    v9[0] = (uint64_t)llvm::dwarf::OperationEncodingString(this);
    v9[1] = v8;
    sub_1C4825FE4(v16, v9, (uint64_t)v17);
  }
  else
  {
    v18 = 261;
    v17[0] = llvm::dwarf::OperationEncodingString(this);
    v17[1] = v5;
  }
  return (**v4)(v4, this, v17);
}

uint64_t sub_1C6008900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  __int16 v5;
  uint64_t v6;

  v6 = a2;
  if (*(_BYTE *)(a1 + 104))
    v2 = *(_QWORD *)(a1 + 88) + 80;
  else
    v2 = *(_QWORD *)(a1 + 96);
  v5 = 269;
  v4 = &v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v2 + 8))(v2, a2, &v4);
}

uint64_t sub_1C6008954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  __int16 v5;
  uint64_t v6;

  v6 = a2;
  if (*(_BYTE *)(a1 + 104))
    v2 = *(_QWORD *)(a1 + 88) + 80;
  else
    v2 = *(_QWORD *)(a1 + 96);
  v5 = 268;
  v4 = &v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **, _QWORD))(*(_QWORD *)v2 + 16))(v2, a2, &v4, 0);
}

uint64_t sub_1C60089AC()
{
  return 0;
}

void sub_1C60089B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t i;
  const char *v16;
  __int16 v17;

  v1 = *(uint64_t **)(a1 + 88);
  if (v1)
  {
    v2 = v1[1];
    if (v2)
    {
      v4 = 0;
      v5 = 0;
      v6 = *v1;
      do
      {
        v7 = *(_QWORD *)(a1 + 88);
        v8 = *(_QWORD *)(v7 + 56);
        v9 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 64) - v8) >> 3);
        v10 = "";
        if (v5 < v9)
        {
          v10 = (const char *)(v8 + v4);
          if (*(char *)(v8 + v4 + 23) < 0)
            v10 = *(const char **)v10;
        }
        v11 = *(_QWORD *)(a1 + 96);
        v12 = *(_BYTE *)(v6 + v5);
        v17 = 257;
        if (*v10)
        {
          v16 = v10;
          v13 = 3;
        }
        else
        {
          v13 = 1;
        }
        LOBYTE(v17) = v13;
        sub_1C6008AC0(v11, v12, (llvm::Twine *)&v16);
        ++v5;
        v4 += 24;
      }
      while (v2 != v5);
      v1 = *(uint64_t **)(a1 + 88);
    }
    v1[1] = 0;
    v14 = v1[7];
    for (i = v1[8]; i != v14; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    v1[8] = v14;
  }
}

void sub_1C6008AC0(uint64_t a1, char a2, llvm::Twine *this)
{
  _QWORD *v6;
  uint64_t v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  int v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[5];

  v6 = *(_QWORD **)(a1 + 8);
  v7 = v6[1];
  if ((unint64_t)(v7 + 1) > v6[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(_QWORD *)(a1 + 8), v6 + 3, v7 + 1, 1);
    v7 = v6[1];
  }
  *(_BYTE *)(*v6 + v7) = a2;
  ++v6[1];
  if (*(_BYTE *)(a1 + 24))
  {
    v8 = *(char ***)(a1 + 16);
    llvm::Twine::str(this, __p);
    v9 = (unint64_t)v8[1];
    v10 = (unint64_t)v8[2];
    if (v9 >= v10)
    {
      v12 = *v8;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)*v8) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)(v10 - (_QWORD)v12) >> 3) > v14)
        v14 = 0x5555555555555556 * ((uint64_t)(v10 - (_QWORD)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v12) >> 3) >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v14;
      v25[4] = v8 + 2;
      if (v15)
      {
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v16 = (char *)operator new(24 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[24 * v13];
      *(_OWORD *)v17 = *(_OWORD *)__p;
      *((_QWORD *)v17 + 2) = v24;
      __p[1] = 0;
      v24 = 0;
      __p[0] = 0;
      if ((char *)v9 == v12)
      {
        v20 = v9;
        v18 = &v16[24 * v13];
      }
      else
      {
        v18 = &v16[24 * v13];
        do
        {
          v19 = *(_OWORD *)(v9 - 24);
          *((_QWORD *)v18 - 1) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)(v18 - 24) = v19;
          v18 -= 24;
          *(_QWORD *)(v9 - 16) = 0;
          *(_QWORD *)(v9 - 8) = 0;
          *(_QWORD *)(v9 - 24) = 0;
          v9 -= 24;
        }
        while ((char *)v9 != v12);
        v20 = (unint64_t)*v8;
        v9 = (unint64_t)v8[1];
        v10 = (unint64_t)v8[2];
      }
      v21 = v17 + 24;
      *v8 = v18;
      v25[0] = v20;
      v25[1] = v20;
      v8[1] = v17 + 24;
      v25[2] = v9;
      v8[2] = &v16[24 * v15];
      v25[3] = v10;
      sub_1C4D868F0((uint64_t)v25);
      v22 = SHIBYTE(v24);
      v8[1] = v21;
      if (v22 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 16) = v24;
      *(_OWORD *)v9 = v11;
      v8[1] = (char *)(v9 + 24);
    }
  }
}

void sub_1C6008CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  int v13;
  _BYTE v14[56];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  sub_1C6008E34(a2, (uint64_t)&v11);
  v4 = operator new();
  *(_QWORD *)v4 = v11;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  *(_QWORD *)(v4 + 16) = 0x200000000;
  if (v13)
    sub_1C6014A70(v4 + 8, (uint64_t)&v12);
  *(_BYTE *)(v4 + 72) = v14[48];
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v5)
  {
    v6 = *(void **)(v5 + 8);
    if (v6 != (void *)(v5 + 24))
      free(v6);
    MEMORY[0x1CAA32FC0](v5, 0x10E0C400FD40FC7);
  }
  if (v12 != v14)
    free(v12);
  v7 = 96;
  if (**(_WORD **)(a2 + 16) == 14)
    v7 = 32;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v7 + 16);
  if (v8 && ((*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) & 0x7FFFFFFF8) != 0)
  {
    v9 = *(unsigned int *)(a1 + 64);
    if (v9 >= *(_DWORD *)(a1 + 68))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 56, a1 + 72, v9 + 1, 16);
      LODWORD(v9) = *(_DWORD *)(a1 + 64);
    }
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v9);
    *v10 = 0;
    v10[1] = v8;
    ++*(_DWORD *)(a1 + 64);
  }
}

void sub_1C6008E34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  void *__src;
  uint64_t v28;
  _QWORD v29[14];

  v29[12] = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned __int16 **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = 96;
  if (v4 == 14)
    v6 = 32;
  v7 = *(_QWORD *)(v5 + v6 + 16);
  __src = v29;
  v28 = 0x400000000;
  if (v4 == 14)
  {
    v8 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v8 == 2)
    {
      v9 = 0;
      v10 = v29;
      goto LABEL_21;
    }
    v22 = v7;
    v23 = 14;
    v11 = v5 + 32 * v8;
    v5 += 64;
  }
  else
  {
    v22 = v7;
    v23 = v4;
    v11 = v5 + 32;
  }
  while (2)
  {
    switch(*(_BYTE *)v5)
    {
      case 0:
        v12 = **(_WORD **)(a1 + 16) == 13 && *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32) == 1;
        v14 = !v12 | ((unint64_t)*(unsigned int *)(v5 + 4) << 32);
        v24 = 0;
        goto LABEL_18;
      case 1:
        v13 = *(_QWORD *)(v5 + 16);
        v24 = 1;
        goto LABEL_15;
      case 3:
        v13 = *(_QWORD *)(v5 + 16);
        v24 = 2;
        goto LABEL_15;
      case 7:
        v14 = *(unsigned int *)(v5 + 16) | ((unint64_t)*(unsigned int *)(v5 + 4) << 32);
        v24 = 4;
LABEL_18:
        v26 = v14;
        goto LABEL_19;
      default:
        v13 = *(_QWORD *)(v5 + 16);
        v24 = 3;
LABEL_15:
        v25 = v13;
LABEL_19:
        v15 = sub_1C4DC1E54((uint64_t)&__src, (unint64_t)&v24);
        v16 = (char *)__src + 24 * v28;
        v17 = *(_OWORD *)v15;
        *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
        *(_OWORD *)v16 = v17;
        v9 = v28 + 1;
        LODWORD(v28) = v28 + 1;
        v5 += 32;
        if (v5 != v11)
          continue;
        v10 = __src;
        v4 = v23;
        v7 = v22;
        break;
    }
    break;
  }
LABEL_21:
  v18 = v4 == 14;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x200000000;
  if (v9 >= 3)
  {
    v21 = v10;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 8, a2 + 24, v9, 24);
    v10 = v21;
    v19 = *(_DWORD *)(a2 + 16);
    goto LABEL_24;
  }
  if (v9)
  {
    v19 = 0;
LABEL_24:
    memcpy((void *)(*(_QWORD *)(a2 + 8) + 24 * v19), v10, 24 * v9);
    v20 = *(_DWORD *)(a2 + 16);
    goto LABEL_25;
  }
  v20 = 0;
LABEL_25:
  *(_DWORD *)(a2 + 16) = v20 + v9;
  *(_BYTE *)(a2 + 72) = v18;
  if (__src != v29)
    free(__src);
}

uint64_t sub_1C60090C4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != 1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = 126 - 2 * __clz(v2);
    if ((_DWORD)v2)
      v5 = v4;
    else
      v5 = 0;
    sub_1C6017018(v3, (int8x16_t *)(v3 + 16 * v2), v5, 1);
  }
  return *(_QWORD *)(a1 + 56);
}

void sub_1C6009120(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  int8x16_t v16;
  char v17;

  v4 = (uint64_t *)(a1 + 56);
  v5 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v5
    || (v6 = *(_QWORD *)(*v4 + 16 * v5 - 8)) != 0
    && (llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v6 + 24), *(uint64_t **)(v6 + 32), &v16), v17))
  {
    v7 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v7)
    {
      v8 = *(__int128 **)(a2 + 56);
      v9 = &v8[v7];
      do
      {
        v10 = *v4;
        v11 = v5;
        if ((_DWORD)v5)
        {
          v12 = 16 * v5;
          v13 = (_QWORD *)(v10 + 8);
          while (*(_DWORD *)v8 != *((_DWORD *)v13 - 2) || *((_QWORD *)v8 + 1) != *v13)
          {
            v13 += 2;
            v12 -= 16;
            if (!v12)
              goto LABEL_11;
          }
        }
        else
        {
LABEL_11:
          v14 = *v8;
          if (v5 >= *(_DWORD *)(a1 + 68))
          {
            v15 = *v8;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, a1 + 72, v5 + 1, 16);
            v14 = v15;
            v10 = *(_QWORD *)(a1 + 56);
            v11 = *(unsigned int *)(a1 + 64);
          }
          *(_OWORD *)(v10 + 16 * v11) = v14;
          LODWORD(v5) = *(_DWORD *)(a1 + 64) + 1;
          *(_DWORD *)(a1 + 64) = v5;
        }
        ++v8;
      }
      while (v8 != v9);
    }
  }
}

uint64_t sub_1C6009234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  int DwarfVersion;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  char v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  char v39;
  BOOL v40;
  char v41;
  int v42;
  uint64_t v43;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 288);
  v4 = a1 + 4440;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = a1 + 3531;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x400000000;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)a1 = &off_1E81AB368;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = a1 + 440;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 464) = 0x400000000;
  *(_QWORD *)(a1 + 504) = a1 + 520;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 528) = 1;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 588) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 656) = a1 + 672;
  *(_QWORD *)(a1 + 664) = 0x4000000000;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 272) + 88))(*(_QWORD *)(a2 + 272));
  *(_QWORD *)(a1 + 1184) = a1 + 1200;
  *(_QWORD *)(a1 + 1192) = 0x400000000;
  *(_QWORD *)(a1 + 1296) = a1 + 1312;
  *(_QWORD *)(a1 + 1304) = 0x2000000000;
  *(_QWORD *)(a1 + 2336) = a1 + 2360;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_QWORD *)(a1 + 2352) = 256;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_BYTE *)(a1 + 2648) = v7;
  *(_QWORD *)(a1 + 2656) = a1 + 2688;
  *(_QWORD *)(a1 + 2664) = a1 + 2688;
  *(_QWORD *)(a1 + 2672) = 16;
  *(_DWORD *)(a1 + 2680) = 0;
  *(_QWORD *)(a1 + 2816) = a1 + 2832;
  *(_QWORD *)(a1 + 2824) = 0x1000000000;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  sub_1C601E82C((uint64_t *)(a1 + 2992), a2, (uint64_t)"info_string", 11, v6);
  *(_DWORD *)(a1 + 3464) = 0;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_DWORD *)(a1 + 3488) = 0;
  *(_QWORD *)(a1 + 3496) = a1 + 3512;
  *(_QWORD *)(a1 + 3504) = 0x100000000;
  *(_DWORD *)v5 = 16777472;
  *(_DWORD *)(a1 + 3540) = 1;
  sub_1C601E82C((uint64_t *)(a1 + 3552), a2, (uint64_t)"skel_string", 11, v6);
  *(_QWORD *)(a1 + 4008) = 0;
  *(_QWORD *)(a1 + 4016) = a1 + 4032;
  *(_QWORD *)(a1 + 4024) = 0x300000000;
  *(_QWORD *)(a1 + 4104) = a1 + 4120;
  *(_QWORD *)(a1 + 4112) = 0x300000000;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_QWORD *)(a1 + 4352) = 0x1000000000;
  *(_BYTE *)(v5 + 905) = 0;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_OWORD *)(a1 + 4400) = 0u;
  *(_QWORD *)(a1 + 4413) = 0;
  *(_WORD *)(v4 + 25) = 1;
  *(_BYTE *)(v4 + 32) = 0;
  v8 = *(unsigned int *)(*(_QWORD *)(a2 + 248) + 484);
  v9 = (v8 < 0x22) & (0x3F0000888uLL >> v8);
  *(_BYTE *)(v4 + 41) = v9;
  *(_BYTE *)(v4 + 96) = 0;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_DWORD *)(a1 + 4504) = 0;
  *(_DWORD *)(a1 + 4528) = 0;
  *(_OWORD *)(a1 + 4512) = 0u;
  *(_QWORD *)(a1 + 4552) = 0;
  *(_QWORD *)(a1 + 4560) = 0;
  *(_QWORD *)(a1 + 4544) = 0;
  *(_QWORD *)(a1 + 4568) = a1 + 4584;
  *(_QWORD *)(a1 + 4576) = 0x400000000;
  *(_QWORD *)(a1 + 4616) = a1 + 4632;
  *(_QWORD *)(a1 + 4624) = 0;
  *(_QWORD *)(a1 + 4632) = 0;
  *(_QWORD *)(a1 + 4640) = 1;
  *(_QWORD *)(a1 + 4656) = 0;
  *(_QWORD *)(a1 + 4648) = 0;
  *(_DWORD *)(a1 + 4664) = 0;
  *(_DWORD *)(a1 + 4668) = 56;
  *(_QWORD *)(a1 + 4672) = a1 + 4552;
  *(_QWORD *)(a1 + 4680) = sub_1C63C5160;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_OWORD *)(a1 + 4744) = 0u;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(_OWORD *)(a1 + 4712) = 0u;
  *(_QWORD *)(a1 + 4760) = a1 + 4776;
  *(_QWORD *)(a1 + 4768) = 0x400000000;
  *(_QWORD *)(a1 + 4808) = a1 + 4824;
  *(_QWORD *)(a1 + 4824) = 0;
  *(_QWORD *)(a1 + 4816) = 0;
  *(_QWORD *)(a1 + 4832) = 1;
  *(_QWORD *)(a1 + 4848) = 0;
  *(_QWORD *)(a1 + 4840) = 0;
  *(_DWORD *)(a1 + 4856) = 0;
  *(_DWORD *)(a1 + 4860) = 56;
  *(_QWORD *)(a1 + 4864) = a1 + 4744;
  *(_QWORD *)(a1 + 4872) = sub_1C60180E4;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4888) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_QWORD *)(a1 + 4952) = a1 + 4968;
  *(_QWORD *)(a1 + 4960) = 0x400000000;
  *(_QWORD *)(a1 + 5000) = a1 + 5016;
  *(_QWORD *)(a1 + 5016) = 0;
  *(_QWORD *)(a1 + 5008) = 0;
  *(_QWORD *)(a1 + 5024) = 1;
  *(_QWORD *)(a1 + 5040) = 0;
  *(_QWORD *)(a1 + 5032) = 0;
  *(_DWORD *)(a1 + 5048) = 0;
  *(_DWORD *)(a1 + 5052) = 56;
  *(_QWORD *)(a1 + 5056) = a1 + 4936;
  *(_QWORD *)(a1 + 5064) = sub_1C60180E4;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_QWORD *)(a1 + 5144) = a1 + 5160;
  *(_QWORD *)(a1 + 5152) = 0x400000000;
  *(_QWORD *)(a1 + 5192) = a1 + 5208;
  *(_QWORD *)(a1 + 5208) = 0;
  *(_QWORD *)(a1 + 5200) = 0;
  *(_QWORD *)(a1 + 5216) = 1;
  *(_QWORD *)(a1 + 5232) = 0;
  *(_QWORD *)(a1 + 5224) = 0;
  *(_DWORD *)(a1 + 5240) = 0;
  *(_DWORD *)(a1 + 5244) = 56;
  *(_QWORD *)(a1 + 5248) = a1 + 5128;
  *(_QWORD *)(a1 + 5256) = sub_1C60180E4;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5320) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 5288) = 0u;
  *(_QWORD *)(a1 + 5336) = a1 + 5352;
  *(_QWORD *)(a1 + 5344) = 0x400000000;
  *(_QWORD *)(a1 + 5384) = a1 + 5400;
  *(_QWORD *)(a1 + 5400) = 0;
  *(_QWORD *)(a1 + 5392) = 0;
  *(_QWORD *)(a1 + 5408) = 1;
  *(_QWORD *)(a1 + 5424) = 0;
  *(_QWORD *)(a1 + 5416) = 0;
  *(_DWORD *)(a1 + 5432) = 0;
  *(_DWORD *)(a1 + 5436) = 56;
  *(_QWORD *)(a1 + 5440) = a1 + 5320;
  *(_QWORD *)(a1 + 5448) = sub_1C60180E4;
  *(_DWORD *)(a1 + 5512) = 0;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_OWORD *)(a1 + 5464) = 0u;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
  v11 = *(_DWORD *)(v10 + 1116);
  if (v11)
    v12 = *(_DWORD *)(v10 + 1116);
  else
    v12 = 2;
  *(_QWORD *)(a1 + 2960) = 0;
  if ((v9 & 1) == 0 && !v11)
  {
    if (*(_DWORD *)(v10 + 472) == 42 && *(_DWORD *)(v10 + 480) == 3 && *(_DWORD *)(v10 + 484) == 25)
    {
      v12 = 3;
    }
    else if (*(_DWORD *)(v10 + 484) == 21)
    {
      v12 = 4;
    }
    else
    {
      v12 = 1;
    }
  }
  *(_DWORD *)(a1 + 5512) = v12;
  if (dword_1ED829C68)
  {
    v13 = dword_1ED829C68 == 1;
    v14 = *(_DWORD *)(v10 + 472) & 0xFFFFFFFE;
  }
  else
  {
    v14 = *(_DWORD *)(v10 + 472) & 0xFFFFFFFE;
    v13 = v14 == 44 || v12 == 4;
  }
  *(_BYTE *)(a1 + 3531) = v13;
  *(_BYTE *)(a1 + 3534) = v14 != 44;
  *(_BYTE *)(a1 + 3548) = v12 == 2;
  if (*(char *)(v10 + 1215) < 0)
    v16 = *(_QWORD *)(v10 + 1200);
  else
    v16 = *(unsigned __int8 *)(v10 + 1215);
  *(_BYTE *)(a1 + 3549) = v16 != 0;
  v17 = v12 != 3;
  if (dword_1EF8F5918)
    v18 = dword_1EF8F5918 == 1;
  else
    v18 = v17;
  *(_BYTE *)(a1 + 3530) = v18;
  DwarfVersion = *(_DWORD *)(v10 + 1136);
  if (!DwarfVersion)
    DwarfVersion = llvm::Module::getDwarfVersion(*(llvm::Module **)(*(_QWORD *)(a1 + 16) + 2064));
  if (DwarfVersion)
    v20 = DwarfVersion;
  else
    v20 = 4;
  if ((*(_DWORD *)(v10 + 472) & 0xFFFFFFFE) == 0x2C)
    v21 = 2;
  else
    v21 = v20;
  v22 = v21 >= 3 && sub_1C5E4EA90(*(_DWORD *)(v10 + 472)) == 64;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248) + 1128) & 0x2000) == 0
    && !llvm::Module::isDwarf64(*(llvm::Module **)(*(_QWORD *)(a1 + 16) + 2064)))
  {
    v23 = *(_DWORD *)(v10 + 492);
    goto LABEL_43;
  }
  v23 = *(_DWORD *)(v10 + 492);
  if (v23 != 3)
  {
LABEL_43:
    v24 = v23 == 9;
    goto LABEL_44;
  }
  v24 = 1;
LABEL_44:
  v25 = v22 && v24;
  if (!v25 && sub_1C5E4EA90(*(_DWORD *)(v10 + 472)) == 64 && v23 == 9)
    llvm::report_fatal_error((llvm *)"XCOFF requires DWARF64 for 64-bit mode!", (const char *)1);
  if (byte_1ED829638)
    v26 = 0;
  else
    v26 = (*(_DWORD *)(v10 + 472) & 0xFFFFFFFE) != 44;
  *(_BYTE *)(a1 + 3532) = v26;
  if (dword_1ED829EC0)
    v27 = dword_1ED829EC0 == 1;
  else
    v27 = (*(_DWORD *)(v10 + 472) & 0xFFFFFFFE) == 44;
  v28 = v27;
  *(_BYTE *)(a1 + 3533) = v28;
  v29 = *(_DWORD *)(*(_QWORD *)(a2 + 248) + 492);
  v30 = (v29 | 4) == 7 && byte_1ED829578 != 0;
  *(_BYTE *)(a1 + 3535) = v30;
  v31 = *(_DWORD *)(a1 + 5512);
  if (dword_1ED829A10)
    v32 = dword_1ED829A10;
  else
    v32 = 1;
  if (!v30 && !dword_1ED829A10)
  {
    if (v21 <= 4)
    {
      if (v31 == 2)
      {
        if (v29 == 5)
          v32 = 2;
        else
          v32 = 3;
      }
      else
      {
        v32 = 1;
      }
    }
    else
    {
      v32 = 3;
    }
  }
  *(_DWORD *)(a1 + 3544) = v32;
  v33 = v21 < 3;
  if (v31 == 1)
    v33 = 1;
  *(_BYTE *)(a1 + 3528) = v33;
  v34 = v31 == 1 || v21 < 4;
  *(_BYTE *)(a1 + 3529) = v34;
  *(_BYTE *)(a1 + 3550) = v21 > 4;
  v35 = *(_QWORD *)(a1 + 8);
  v36 = *(_QWORD *)(v35 + 248);
  v37 = *(unsigned __int16 *)(v36 + 1064);
  if ((v37 & 2) == 0 || *(_DWORD *)(v36 + 1116) == 3)
    v38 = (v37 >> 2) & 1;
  else
    LOBYTE(v38) = 1;
  *(_BYTE *)(a1 + 3551) = v38;
  if (v21 <= 4)
  {
    v39 = byte_1ED8296F8;
    if (byte_1ED8296F8)
      v39 = *(_BYTE *)(a1 + 3549) == 0;
  }
  else
  {
    v39 = 1;
  }
  *(_BYTE *)(a1 + 3536) = v39;
  if (dword_1ED82A118)
  {
    v40 = dword_1ED82A118 == 1;
  }
  else if (v31 == 2)
  {
    v40 = v23 == 5;
  }
  else
  {
    if (v31 != 1)
    {
      v41 = 1;
      goto LABEL_87;
    }
    v40 = *(_BYTE *)(a1 + 3549) == 0;
  }
  v41 = v40;
LABEL_87:
  *(_BYTE *)(a1 + 3537) = v41;
  if (v21 >= 5)
  {
    v42 = dword_1EF8F5B70;
    if (dword_1EF8F5B70 <= 1)
      v42 = 1;
    *(_DWORD *)(a1 + 3540) = v42;
  }
  v43 = *(_QWORD *)(*(_QWORD *)(v35 + 272) + 8);
  *(_WORD *)(v43 + 1624) = v21;
  *(_BYTE *)(v43 + 1626) = v25;
  return a1;
}

uint64_t sub_1C6009A50(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void **v21;

  *(_QWORD *)a1 = &off_1E81AB368;
  v2 = a1 + 5320;
  v21 = (void **)(a1 + 5488);
  sub_1C4DB60AC(&v21);
  v3 = *(void **)(a1 + 5464);
  if (v3)
  {
    *(_QWORD *)(a1 + 5472) = v3;
    operator delete(v3);
  }
  sub_1C6013640(a1 + 5416);
  sub_1C4926AE8(v2);
  v21 = (void **)(a1 + 5296);
  sub_1C4DB60AC(&v21);
  v4 = *(void **)(a1 + 5272);
  if (v4)
  {
    *(_QWORD *)(a1 + 5280) = v4;
    operator delete(v4);
  }
  sub_1C6013640(a1 + 5224);
  sub_1C4926AE8(a1 + 5128);
  v21 = (void **)(a1 + 5104);
  sub_1C4DB60AC(&v21);
  v5 = *(void **)(a1 + 5080);
  if (v5)
  {
    *(_QWORD *)(a1 + 5088) = v5;
    operator delete(v5);
  }
  sub_1C6013640(a1 + 5032);
  sub_1C4926AE8(a1 + 4936);
  v21 = (void **)(a1 + 4912);
  sub_1C4DB60AC(&v21);
  v6 = *(void **)(a1 + 4888);
  if (v6)
  {
    *(_QWORD *)(a1 + 4896) = v6;
    operator delete(v6);
  }
  sub_1C6013640(a1 + 4840);
  sub_1C4926AE8(a1 + 4744);
  v21 = (void **)(a1 + 4720);
  sub_1C4DB60AC(&v21);
  v7 = *(void **)(a1 + 4696);
  if (v7)
  {
    *(_QWORD *)(a1 + 4704) = v7;
    operator delete(v7);
  }
  sub_1C6013640(a1 + 4648);
  sub_1C4926AE8(a1 + 4552);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4512), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4488), 8);
  if (*(char *)(a1 + 4415) < 0)
    operator delete(*(void **)(a1 + 4392));
  if (*(char *)(a1 + 4391) < 0)
    operator delete(*(void **)(a1 + 4368));
  sub_1C51838C8(a1 + 4336);
  sub_1C59348B8((char **)(a1 + 4104));
  sub_1C4E01820((char **)(a1 + 4016));
  sub_1C60136BC(a1 + 3552);
  sub_1C6018108((void **)(a1 + 3496));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 3472), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 3448), 8);
  sub_1C60136BC(a1 + 2992);
  v8 = *(void **)(a1 + 2816);
  if (v8 != (void *)(a1 + 2832))
    free(v8);
  v9 = *(void **)(a1 + 2664);
  if (v9 != *(void **)(a1 + 2656))
    free(v9);
  v21 = (void **)(a1 + 2616);
  sub_1C4765410(&v21);
  v10 = *(void **)(a1 + 2336);
  if (v10 != (void *)(a1 + 2360))
    free(v10);
  v11 = *(void **)(a1 + 1296);
  if (v11 != (void *)(a1 + 1312))
    free(v11);
  v12 = *(void **)(a1 + 1184);
  if (v12 != (void *)(a1 + 1200))
    free(v12);
  v13 = *(char **)(a1 + 656);
  v14 = *(unsigned int *)(a1 + 664);
  if ((_DWORD)v14)
  {
    v18 = 8 * v14;
    v19 = v13 - 8;
    do
    {
      v20 = *(_QWORD *)&v19[v18];
      *(_QWORD *)&v19[v18] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v18 -= 8;
    }
    while (v18);
    v13 = *(char **)(a1 + 656);
  }
  if (v13 != (char *)(a1 + 672))
    free(v13);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 632), 8);
  v15 = *(void **)(a1 + 608);
  if (v15)
  {
    *(_QWORD *)(a1 + 616) = v15;
    operator delete(v15);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 584), 8);
  v16 = *(void **)(a1 + 560);
  if (v16)
  {
    *(_QWORD *)(a1 + 568) = v16;
    operator delete(v16);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 536), 8);
  sub_1C4926AE8(a1 + 440);
  return sub_1C6009D90(a1);
}

uint64_t sub_1C6009D90(uint64_t a1)
{
  void *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void **v6;

  *(_QWORD *)a1 = off_1E81AB030;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 416), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 392), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 368), 8);
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v6 = (void **)(a1 + 296);
  sub_1C60138D8(&v6);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 272), 8);
  sub_1C5101D30(a1 + 64);
  v3 = *(unsigned __int8 **)(a1 + 48);
  if (v3)
    llvm::MetadataTracking::untrack(a1 + 48, v3);
  v4 = *(unsigned __int8 **)(a1 + 24);
  if (v4)
    llvm::MetadataTracking::untrack(a1 + 24, v4);
  return a1;
}

void sub_1C6009E54(uint64_t a1)
{
  sub_1C6009A50(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6009E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t *v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  int v29;
  _BYTE *v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  size_t v34;
  size_t v35;
  _BYTE *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  size_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  size_t *v45;
  void *v46;
  size_t v47;
  size_t v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55[2];

  v4 = *(_DWORD *)(a1 + 3544) != 2 && *(_DWORD *)(a2 + 52) == 2;
  if (v4 || (*(_BYTE *)(a3 + 44) & 8) == 0)
    return;
  v9 = *(unsigned int *)(a3 + 8);
  v10 = -v9;
  v11 = *(_QWORD *)(a3 - 8 * v9 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (*(_QWORD *)v12)
    {
      sub_1C60131A4(a1, a2, a1 + 4744, (unsigned __int8 *)(v12 + 24), *(_QWORD *)v12, a4);
      v10 = -(uint64_t)*(unsigned int *)(a3 + 8);
    }
  }
  v13 = a3 + 8 * v10;
  v14 = *(_QWORD *)(v13 + 24);
  if (v14)
  {
    v15 = *(size_t **)(v14 + 8);
    v16 = *v15;
    if (*v15)
    {
      v17 = *(_QWORD *)(v13 + 16);
      if (!v17 || (v18 = *(_QWORD **)(v17 + 8), *v18 != v16) || memcmp(v18 + 3, v15 + 3, v16))
      {
        if (!*(_BYTE *)(a1 + 3530))
        {
          v54 = 0;
          v55[0] = a3;
          if ((sub_1C4850EC8((uint64_t *)(a1 + 3376), v55, &v54) & 1) == 0 || !*(_QWORD *)(v54 + 8))
            goto LABEL_22;
          v10 = -(uint64_t)*(unsigned int *)(a3 + 8);
        }
        v19 = *(_QWORD *)(a3 + 8 * v10 + 24);
        if (v19)
        {
          v20 = *(_QWORD **)(v19 + 8);
          v23 = *v20;
          v21 = (unsigned __int8 *)(v20 + 3);
          v22 = v23;
        }
        else
        {
          v22 = 0;
          v21 = 0;
        }
        sub_1C60131A4(a1, a2, a1 + 4744, v21, v22, a4);
      }
    }
  }
LABEL_22:
  v24 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  if (!v24)
    return;
  v25 = *(_QWORD **)(v24 + 8);
  v28 = *v25;
  v26 = (unsigned __int8 *)(v25 + 3);
  v27 = v28;
  if (!v28)
    return;
  v29 = *v26;
  if (v29 != 45 && v29 != 43)
    return;
  v55[0] = (uint64_t)v26;
  v55[1] = v27;
  if (llvm::StringRef::find(v55, ") ", 2uLL, 0) == -1)
  {
    v40 = memchr(v26, 91, v27);
    if (v40)
      v41 = v40 - v26 + 1;
    else
      v41 = 0;
    v42 = memchr(v26, 32, v27);
    v39 = 0;
    v43 = v42 - v26;
    if (!v42)
      v43 = -1;
    if (v27 >= v41)
      v34 = v41;
    else
      v34 = v27;
    if (v34 > v43)
      v43 = v34;
    if (v27 < v43)
      v43 = v27;
    v35 = v43 - v34;
    v38 = "";
  }
  else
  {
    v30 = memchr(v26, 91, v27);
    if (v30)
      v31 = v30 - v26 + 1;
    else
      v31 = 0;
    v32 = memchr(v26, 40, v27);
    v33 = v32 - v26;
    if (!v32)
      v33 = -1;
    if (v27 >= v31)
      v34 = v31;
    else
      v34 = v27;
    if (v34 > v33)
      v33 = v34;
    if (v27 < v33)
      v33 = v27;
    v35 = v33 - v34;
    v36 = memchr(v26, 32, v27);
    v37 = v36 - v26;
    if (!v36)
      v37 = -1;
    if (v34 > v37)
      v37 = v34;
    if (v27 < v37)
      v37 = v27;
    v38 = &v26[v34];
    v39 = v37 - v34;
  }
  if (*(_DWORD *)(a1 + 3544) == 2)
    sub_1C60131A4(a1, a2, a1 + 4936, &v26[v34], v35, a4);
  if (v39 && *(_DWORD *)(a1 + 3544) == 2)
    sub_1C60131A4(a1, a2, a1 + 4936, v38, v39, a4);
  v44 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  if (!v44)
  {
    v47 = 0;
    v46 = 0;
    goto LABEL_72;
  }
  v45 = *(size_t **)(v44 + 8);
  v48 = *v45;
  v46 = v45 + 3;
  v47 = v48;
  if (!v48)
  {
LABEL_72:
    v50 = -1;
LABEL_73:
    v52 = -1;
    goto LABEL_74;
  }
  v49 = memchr(v46, 32, v47);
  if (v49)
    v50 = v49 - (_BYTE *)v46;
  else
    v50 = -1;
  v51 = memchr(v46, 93, v47);
  if (!v51)
    goto LABEL_73;
  v52 = v51 - (_BYTE *)v46;
LABEL_74:
  if (v47 >= v50 + 1)
    v53 = v50 + 1;
  else
    v53 = v47;
  if (v53 > v52)
    v52 = v53;
  if (v47 < v52)
    v52 = v47;
  sub_1C60131A4(a1, a2, a1 + 4744, (unsigned __int8 *)v46 + v53, v52 - v53, a4);
}

BOOL sub_1C600A224(uint64_t a1, uint64_t a2)
{
  int v3;

  if (*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *(_DWORD *)(a2 + 88);
  if (v3 == 1)
    return sub_1C5FFEF04(a1, *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8)) == 0;
  else
    return v3 == 0;
}

uint64_t sub_1C600A274(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  const char *v8;
  unsigned __int8 *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  unsigned __int8 **v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned __int8 **v45;
  _QWORD *v46;
  int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  _QWORD *v51;
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  char v57;
  unsigned __int8 *v58;
  int v59[3];
  _BYTE v60[17];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 536;
  v5 = sub_1C600ACA8((uint64_t *)(a1 + 536), (uint64_t)a2);
  if (v5)
    return v5;
  v6 = a2;
  if (*a2 == 15 || (v6 = *(unsigned __int8 **)&a2[-8 * *((unsigned int *)a2 + 2)]) != 0)
  {
    v6 = *(unsigned __int8 **)&v6[-8 * *((unsigned int *)v6 + 2) + 8];
    if (v6)
    {
      v7 = (_QWORD *)*((_QWORD *)v6 + 1);
      v9 = (unsigned __int8 *)*v7;
      v8 = (const char *)(v7 + 3);
      v6 = v9;
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = "";
  }
  *(_QWORD *)(a1 + 2976) = v8;
  *(_QWORD *)(a1 + 2984) = v6;
  v10 = *(_DWORD *)(a1 + 3152);
  v5 = operator new();
  v54 = sub_1C6002814(v5, v10, a2, *(_QWORD *)(a1 + 8), a1, a1 + 2992, 1);
  sub_1C601E954(a1 + 3144, (char *)&v54);
  v11 = (_QWORD *)v54;
  v54 = 0;
  if (v11)
  {
    v51 = sub_1C63C1F0C(v11);
    MEMORY[0x1CAA32FC0](v51, 0x10F1C4015B411C3);
  }
  v12 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 56];
  if (v12)
    v13 = (uint64_t *)(v12 - 8 * *(unsigned int *)(v12 + 8));
  else
    v13 = 0;
  for (; v13 != (uint64_t *)v12; ++v13)
  {
    v14 = *v13;
    v15 = *(unsigned __int8 **)(*v13 - 8 * *(unsigned int *)(*v13 + 8));
    v16 = *v15;
    if ((v16 - 17) <= 2)
    {
      while (v16 == 19)
      {
        v15 = *(unsigned __int8 **)&v15[-8 * *((unsigned int *)v15 + 2) + 8];
        v16 = *v15;
      }
      v55 = v15;
      v17 = sub_1C6007D50((uint64_t *)(v5 + 352), &v55);
      v18 = v17;
      v19 = *((unsigned int *)v17 + 4);
      if (v19 >= *((unsigned int *)v17 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v17 + 1), (uint64_t)(v17 + 3), v19 + 1, 8);
        v19 = *((unsigned int *)v18 + 4);
      }
      *(_QWORD *)(v18[1] + 8 * v19) = v14;
      ++*((_DWORD *)v18 + 4);
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272)) & 1) == 0
    || *(_BYTE *)(a1 + 4480))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
    v21 = *(_QWORD *)(a1 + 2976);
    v22 = *(_QWORD *)(a1 + 2984);
    v23 = *a2;
    v24 = a2;
    if (v23 == 15 || (v25 = *((unsigned int *)a2 + 2), (v24 = *(unsigned __int8 **)&a2[-8 * v25]) != 0))
    {
      v26 = *(_QWORD *)&v24[-8 * *((unsigned int *)v24 + 2)];
      if (v26)
      {
        v27 = *(_QWORD **)(v26 + 8);
        v30 = *v27;
        v29 = (const char *)(v27 + 3);
        v28 = v30;
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
      if (v23 == 15)
      {
        v31 = (uint64_t)a2;
LABEL_34:
        sub_1C600AD30(a1, v31, v60);
        v33 = a2;
        if (*a2 == 15 || (v33 = *(unsigned __int8 **)&a2[-8 * *((unsigned int *)a2 + 2)]) != 0)
        {
          if (v33[56])
          {
            v33 = *(unsigned __int8 **)(*((_QWORD *)v33 + 6) + 8);
            v34 = *(_QWORD *)v33;
            v52[0] = v33 + 24;
            v52[1] = v34;
            LOBYTE(v33) = 1;
LABEL_40:
            v53 = (char)v33;
            (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, _BYTE *, _QWORD *, _QWORD))(*(_QWORD *)v20 + 688))(v20, v21, v22, v29, v28, v60, v52, *(unsigned int *)(v5 + 312));
            goto LABEL_41;
          }
          LOBYTE(v33) = 0;
        }
        LOBYTE(v52[0]) = 0;
        goto LABEL_40;
      }
      v32 = -(uint64_t)*((unsigned int *)a2 + 2);
    }
    else
    {
      v28 = 0;
      v32 = -v25;
      v29 = "";
    }
    v31 = *(_QWORD *)&a2[8 * v32];
    goto LABEL_34;
  }
LABEL_41:
  if (*(_BYTE *)(a1 + 3549))
  {
    *(_QWORD *)(v5 + 328) = sub_1C63C2214(a1, *(unsigned __int8 **)(v5 + 72), *(_DWORD *)(v5 + 312));
    v35 = (_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
                   + 224);
  }
  else
  {
    sub_1C600A7F0(a1, (uint64_t)a2, (_QWORD *)v5);
    v35 = (_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
                   + 80);
  }
  *(_QWORD *)(v5 + 56) = *v35;
  v58 = a2;
  v59[0] = 0;
  sub_1C4DE26F4(v4, (uint64_t *)&v58, v59, (uint64_t)&v55);
  if (v57)
  {
    v36 = v55;
    v37 = *(unsigned __int8 ***)(a1 + 568);
    v38 = *(_QWORD *)(a1 + 576);
    if ((unint64_t)v37 < v38)
    {
      *v37 = a2;
      v37[1] = (unsigned __int8 *)v5;
      v46 = v37 + 2;
    }
    else
    {
      v39 = *(char **)(a1 + 560);
      v40 = ((char *)v37 - v39) >> 4;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60)
        abort();
      v42 = v38 - (_QWORD)v39;
      if (v42 >> 3 > v41)
        v41 = v42 >> 3;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
        v43 = 0xFFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 60)
          sub_1C4764EE4();
        v44 = (char *)operator new(16 * v43);
      }
      else
      {
        v44 = 0;
      }
      v45 = (unsigned __int8 **)&v44[16 * v40];
      *v45 = a2;
      v45[1] = (unsigned __int8 *)v5;
      v46 = v45 + 2;
      if (v37 != (unsigned __int8 **)v39)
      {
        do
        {
          *((_OWORD *)v45 - 1) = *((_OWORD *)v37 - 1);
          v45 -= 2;
          v37 -= 2;
        }
        while (v37 != (unsigned __int8 **)v39);
        v37 = *(unsigned __int8 ***)(a1 + 560);
      }
      *(_QWORD *)(a1 + 560) = v45;
      *(_QWORD *)(a1 + 568) = v46;
      *(_QWORD *)(a1 + 576) = &v44[16 * v43];
      if (v37)
        operator delete(v37);
    }
    *(_QWORD *)(a1 + 568) = v46;
    *((_DWORD *)v36 + 2) = (((unint64_t)v46 - *(_QWORD *)(a1 + 560)) >> 4) - 1;
  }
  v55 = (unsigned __int8 *)(v5 + 8);
  v56 = v5;
  v58 = 0;
  if ((sub_1C6144EA0((uint64_t *)(a1 + 584), &v55, &v58) & 1) == 0)
  {
    v47 = *(_DWORD *)(a1 + 592);
    v48 = *(_DWORD *)(a1 + 600);
    if (4 * v47 + 4 < 3 * v48)
    {
      if (v48 + ~v47 - *(_DWORD *)(a1 + 596) > v48 >> 3)
        goto LABEL_65;
    }
    else
    {
      v48 *= 2;
    }
    sub_1C6018198(a1 + 584, v48);
    v58 = 0;
    sub_1C6144EA0((uint64_t *)(a1 + 584), &v55, &v58);
LABEL_65:
    v49 = v58;
    ++*(_DWORD *)(a1 + 592);
    if (*(_QWORD *)v49 != -4096)
      --*(_DWORD *)(a1 + 596);
    *(_QWORD *)v49 = v55;
    *((_QWORD *)v49 + 1) = v56;
  }
  return v5;
}

unint64_t sub_1C600A7F0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t *v14;
  size_t v15;
  void *v16;
  size_t v17;
  uint64_t v18;
  size_t *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  unint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t *v27;
  uint64_t v28;
  size_t *v29;
  size_t v30;
  uint64_t v31;
  size_t *v32;
  uint64_t v33;
  size_t *v34;
  int v35;
  void *v36;
  uint64_t v37;
  void *v38;
  std::string *v39;
  std::string::size_type v40;
  void **p_dst;
  uint64_t v42;
  uint64_t v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  void **v48;
  size_t v49;
  uint64_t v50;
  size_t v51;
  void **__dst;
  std::string::size_type v53;
  int64_t v54;
  std::string v55;
  std::string v56;
  void *__p[2];
  uint64_t v58;

  v6 = a2;
  if (*(_BYTE *)a2 == 15 || (v6 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
  {
    v7 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (v7)
    {
      v8 = *(_QWORD **)(v7 + 8);
      v11 = *v8;
      v10 = (char *)(v8 + 3);
      v9 = v11;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  else
  {
    v9 = 0;
    v10 = "";
  }
  v12 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  if (v13)
  {
    v14 = *(size_t **)(v13 + 8);
    v17 = *v14;
    v16 = v14 + 3;
    v15 = v17;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v18 = *(_QWORD *)(v12 + 16);
  if (!v18 || (v19 = *(size_t **)(v18 + 8), v22 = *v19, v21 = v19 + 3, (v20 = v22) == 0) || *(_BYTE *)(a1 + 3548))
  {
    sub_1C60207E4(a3, (uint64_t)(a3 + 1), 37, v16, v15);
    goto LABEL_14;
  }
  if (!v16)
  {
    memset(&v55, 0, sizeof(v55));
    goto LABEL_55;
  }
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
  if (v15 >= 0x17)
  {
    v37 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v37 = v15 | 7;
    v50 = v37 + 1;
    v36 = operator new(v37 + 1);
    v55.__r_.__value_.__l.__size_ = v15;
    v55.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  }
  else
  {
    *((_BYTE *)&v55.__r_.__value_.__s + 23) = v15;
    v36 = &v55;
    if (!v15)
      goto LABEL_54;
  }
  v51 = v9;
  v38 = v36;
  memmove(v36, v16, v15);
  v36 = v38;
  v9 = v51;
LABEL_54:
  *((_BYTE *)v36 + v15) = 0;
LABEL_55:
  v39 = std::string::append(&v55, " ");
  v40 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (v20 > 0x7FFFFFFFFFFFFFF7)
LABEL_81:
    abort();
  if (v20 >= 0x17)
  {
    v42 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v42 = v20 | 7;
    v43 = v42 + 1;
    p_dst = (void **)operator new(v42 + 1);
    v53 = v20;
    v54 = v43 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v54) = v20;
    p_dst = (void **)&__dst;
  }
  memmove(p_dst, v21, v20);
  *((_BYTE *)p_dst + v20) = 0;
  if (v54 >= 0)
    v44 = (const std::string::value_type *)&__dst;
  else
    v44 = (const std::string::value_type *)__dst;
  if (v54 >= 0)
    v45 = HIBYTE(v54) & 0x7F;
  else
    v45 = v53;
  v46 = std::string::append(&v56, v44, v45);
  v47 = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v58 = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54) < 0)
    operator delete(__dst);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (v58 >= 0)
    v48 = __p;
  else
    v48 = (void **)__p[0];
  if (v58 >= 0)
    v49 = HIBYTE(v58) & 0x7F;
  else
    v49 = (size_t)__p[1];
  sub_1C60207E4(a3, (uint64_t)(a3 + 1), 37, v48, v49);
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
LABEL_14:
  __p[0] = (void *)*(unsigned int *)(a2 + 24);
  sub_1C6002D64((unint64_t)a3, a3 + 2, 19, 5, __p);
  result = (unint64_t)sub_1C60207E4(a3, (uint64_t)(a3 + 1), 3, v10, v9);
  v24 = *(unsigned int *)(a2 + 8);
  v25 = -v24;
  v26 = *(_QWORD *)(a2 - 8 * v24 + 72);
  if (v26)
  {
    v27 = *(size_t **)(v26 + 8);
    if (*v27)
    {
      result = (unint64_t)sub_1C60207E4(a3, (uint64_t)(a3 + 1), 15874, v27 + 3, *v27);
      v25 = -(uint64_t)*(unsigned int *)(a2 + 8);
    }
  }
  v28 = *(_QWORD *)(a2 + 8 * v25 + 80);
  if (v28)
  {
    v29 = *(size_t **)(v28 + 8);
    if (*v29)
      result = (unint64_t)sub_1C60207E4(a3, (uint64_t)(a3 + 1), 16367, v29 + 3, *v29);
  }
  if (*(_BYTE *)(a1 + 3550) && !*(_BYTE *)(a1 + 3549))
    result = sub_1C63C85D8((unint64_t)a3);
  if (!*(_BYTE *)(a1 + 3549))
  {
    sub_1C6003CA8((unint64_t)a3);
    v30 = *(_QWORD *)(a1 + 2984);
    if (v30)
      sub_1C60207E4(a3, (uint64_t)(a3 + 1), 27, *(void **)(a1 + 2976), v30);
    result = sub_1C60071F4(a3);
    if ((_DWORD)result)
      result = sub_1C602072C((unint64_t)a3, (uint64_t)(a3 + 1), 8500);
  }
  if (*(_BYTE *)(a1 + 3548))
  {
    if (*(_BYTE *)(a2 + 28))
      result = sub_1C602072C((unint64_t)a3, (uint64_t)(a3 + 1), 16353);
    v31 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v31)
    {
      v32 = *(size_t **)(v31 + 8);
      if (*v32)
        result = (unint64_t)sub_1C60207E4(a3, (uint64_t)(a3 + 1), 16354, v32 + 3, *v32);
    }
    if (*(_DWORD *)(a2 + 32))
    {
      __p[0] = (void *)*(unsigned int *)(a2 + 32);
      result = sub_1C6002D64((unint64_t)a3, a3 + 2, 16357, 11, __p);
    }
  }
  if (*(_QWORD *)(a2 + 40))
  {
    __p[0] = *(void **)(a2 + 40);
    result = sub_1C6002D64((unint64_t)a3, a3 + 2, 8497, 7, __p);
    v33 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
    if (v33)
    {
      v34 = *(size_t **)(v33 + 8);
      if (*v34)
      {
        if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) <= 4u)
          v35 = 8496;
        else
          v35 = 118;
        return (unint64_t)sub_1C60207E4(a3, (uint64_t)(a3 + 1), v35, v34 + 3, *v34);
      }
    }
  }
  return result;
}

uint64_t sub_1C600ACA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return *(_QWORD *)(a1[3] + 16 * *((unsigned int *)v5 + 2) + 8);
}

void sub_1C600AD30(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  std::string *v7;
  std::string *v8;
  int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v15;
  void *v16;
  size_t size;
  std::string *v18;
  std::string v19;
  __int128 __dst;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) <= 4u
    || !*(_BYTE *)(a2 + 40)
    || *(_DWORD *)(a2 + 24) != 1)
  {
    *a3 = 0;
    a3[16] = 0;
    return;
  }
  v4 = *(_QWORD **)(*(_QWORD *)(a2 + 32) + 8);
  v6 = (unsigned __int8 *)(v4 + 3);
  v5 = *v4;
  memset(&v19, 0, sizeof(v19));
  if (v5)
  {
    std::string::resize(&v19, (v5 + 1) >> 1, 0);
    v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v19;
    else
      v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v5 & 1) == 0)
    {
LABEL_13:
      if (v5 >= 2)
      {
        v10 = v5 >> 1;
        v11 = v6 + 1;
        do
        {
          v12 = (unsigned __int16)word_1C85F7092[*(v11 - 1)];
          v13 = (unsigned __int16)word_1C85F7092[*v11];
          if (v12 == 0xFFFF || v13 == 0xFFFF)
            break;
          v11 += 2;
          v8->__r_.__value_.__s.__data_[0] = v13 | (16 * v12);
          v8 = (std::string *)((char *)v8 + 1);
          --v10;
        }
        while (v10);
      }
      goto LABEL_20;
    }
    v9 = (unsigned __int16)word_1C85F7092[*v6];
    if (v9 != 0xFFFF)
    {
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v19;
      v8->__r_.__value_.__s.__data_[0] = v9;
      v8 = (std::string *)((char *)&v7->__r_.__value_.__l.__data_ + 1);
      v6 = (unsigned __int8 *)v4 + 25;
      --v5;
      goto LABEL_13;
    }
  }
LABEL_20:
  v15 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  v16 = (void *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v19.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v19.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v19;
    else
      v18 = (std::string *)v19.__r_.__value_.__r.__words[0];
    memcpy(&__dst, v18, size);
  }
  *(_OWORD *)a3 = __dst;
  a3[16] = 1;
  if (v15 < 0)
    operator delete(v16);
}

uint64_t sub_1C600AEDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t NamedMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t i;
  unsigned int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  __n128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD v97[2];
  int v98;
  _QWORD v99[2];
  unsigned int v100;
  uint64_t v101[2];
  char v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  __int16 v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  result = sub_1C5174BF0(a2, (uint64_t *)&v103);
  if ((_DWORD)v104 == v106)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2108))
  {
    v103 = "llvm.dbg.cu";
    v107 = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)&v103);
    v6 = NamedMetadata;
    if (NamedMetadata && (v92 = *(uint64_t **)(NamedMetadata + 48), v93 = *((unsigned int *)v92 + 2), (_DWORD)v93))
    {
      v7 = 0;
      v94 = *v92;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(v94 + 8 * v7) + 36))
          break;
        ++v7;
      }
      while (v93 != v7);
    }
    else
    {
      LODWORD(v7) = 0;
    }
    v103 = "llvm.dbg.cu";
    v107 = 259;
    v8 = llvm::Module::getNamedMetadata(a2, (uint64_t)&v103);
    if (v8)
      v9 = *(_DWORD *)(*(_QWORD *)(v8 + 48) + 8);
    else
      v9 = 0;
    if (v9 == (_DWORD)v7)
    {
      v10 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        v12 = (v7 + 1);
        if (v6)
        {
          v13 = *(_QWORD *)(v6 + 48);
          v14 = *(_DWORD *)(v13 + 8);
          if (v14 > (int)v7 + 1)
          {
            v15 = ~(_DWORD)v7 + v14;
            do
            {
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8 * v12) + 36))
                break;
              ++v12;
              --v15;
            }
            while (v15);
          }
        }
        ++v11;
        LODWORD(v7) = v12;
      }
      while (v9 != (_DWORD)v12);
      v10 = v11 == 1;
    }
    *(_BYTE *)(a1 + 4480) = v10;
    v99[0] = 0;
    v99[1] = 0;
    v100 = 0;
    for (i = *(_QWORD *)(a2 + 16); i != a2 + 8; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v17 = (unsigned int *)(i - 56);
      else
        v17 = 0;
      v103 = &v105;
      v104 = 0x100000000;
      llvm::GlobalVariable::getDebugInfo(v17, (uint64_t)&v103);
      v18 = (char *)v103;
      if ((_DWORD)v104)
      {
        v19 = 8 * v104;
        do
        {
          v20 = *(_QWORD *)v18;
          v101[0] = *(_QWORD *)(*(_QWORD *)v18 - 8 * *(unsigned int *)(*(_QWORD *)v18 + 8));
          v21 = sub_1C63C5214((uint64_t)v99, v101);
          v22 = v21;
          v23 = *(unsigned int **)(v20 - 8 * *(unsigned int *)(v20 + 8) + 8);
          v24 = *((unsigned int *)v21 + 4);
          if (v24 >= *((unsigned int *)v21 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v21 + 1), (uint64_t)(v21 + 3), v24 + 1, 16);
            v24 = *((unsigned int *)v22 + 4);
          }
          v25 = (unsigned int **)(v22[1] + 16 * v24);
          *v25 = v17;
          v25[1] = v23;
          ++*((_DWORD *)v22 + 4);
          v18 += 8;
          v19 -= 8;
        }
        while (v19);
        v18 = (char *)v103;
      }
      if (v18 != (char *)&v105)
        free(v18);
    }
    if (*(_BYTE *)(a1 + 3550))
    {
      if (*(_BYTE *)(a1 + 3549))
        v26 = a1 + 3552;
      else
        v26 = a1 + 2992;
      v27 = *(_QWORD *)(a1 + 8);
      v103 = "str_offsets_base";
      v107 = 259;
      *(_QWORD *)(v26 + 320) = llvm::MCContext::createTempSymbol(*(_QWORD *)(v27 + 264), (uint64_t)&v103, 1);
    }
    v28 = *(_QWORD *)(a1 + 8);
    if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v28 + 272) + 8) + 1624) >= 5u)
    {
      v29 = *(_BYTE *)(a1 + 3549) ? a1 + 3552 : a1 + 2992;
      v103 = "rnglists_table_base";
      v107 = 259;
      *(_QWORD *)(v29 + 328) = llvm::MCContext::createTempSymbol(*(_QWORD *)(v28 + 264), (uint64_t)&v103, 1);
      v28 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(a1 + 3549))
      {
        v103 = "rnglists_dwo_table_base";
        v107 = 259;
        *(_QWORD *)(a1 + 3320) = llvm::MCContext::createTempSymbol(*(_QWORD *)(v28 + 264), (uint64_t)&v103, 1);
        v28 = *(_QWORD *)(a1 + 8);
      }
    }
    v103 = "addr_table_base";
    v107 = 259;
    *(_QWORD *)(a1 + 4544) = llvm::MCContext::createTempSymbol(*(_QWORD *)(v28 + 264), (uint64_t)&v103, 1);
    v30 = *(_QWORD *)(a1 + 8);
    v103 = "loclists_table_base";
    v107 = 259;
    *(_QWORD *)(a1 + 2640) = llvm::MCContext::createTempSymbol(*(_QWORD *)(v30 + 264), (uint64_t)&v103, 1);
    sub_1C5174BF0(a2, (uint64_t *)&v103);
    v31 = v104;
    v95 = v106;
    if ((_DWORD)v104 != v106)
    {
      v36 = (_QWORD **)v103;
      do
      {
        v37 = *(_QWORD *)(*v36[6] + 8 * v31);
        v38 = (_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8));
        v39 = v38[7];
        if (v39)
          v40 = v39 - 8 * *(unsigned int *)(v39 + 8);
        else
          v40 = 0;
        while (v40 != v39)
        {
          if (**(unsigned __int8 **)(*(_QWORD *)v40 - 8 * *(unsigned int *)(*(_QWORD *)v40 + 8)) - 20 < 0xFFFFFFFD)
            goto LABEL_67;
          v40 += 8;
        }
        v41 = v38[4];
        if (!v41 || !*(_DWORD *)(v41 + 8))
        {
          v42 = v38[5];
          if (!v42 || !*(_DWORD *)(v42 + 8))
          {
            v43 = v38[6];
            if (!v43 || !*(_DWORD *)(v43 + 8))
            {
              v44 = v38[8];
              if (!v44 || !*(_DWORD *)(v44 + 8))
                goto LABEL_129;
            }
          }
        }
LABEL_67:
        v45 = (_QWORD *)sub_1C600A274(a1, *(unsigned __int8 **)(*v36[6] + 8 * v31));
        v46 = *(unsigned int *)(v37 + 8);
        v47 = *(_QWORD *)(v37 - 8 * v46 + 48);
        if (v47)
          v48 = (uint64_t *)(v47 - 8 * *(unsigned int *)(v47 + 8));
        else
          v48 = 0;
        if (v48 == (uint64_t *)v47)
        {
          v56 = -v46;
        }
        else
        {
          do
          {
            v49 = *v48;
            v101[0] = *(_QWORD *)(*v48 - 8 * *(unsigned int *)(*v48 + 8));
            v50 = sub_1C63C5214((uint64_t)v99, v101);
            v51 = v49 - 8 * *(unsigned int *)(v49 + 8);
            v52 = *(_QWORD *)(v51 + 8);
            v53 = *((unsigned int *)v50 + 4);
            if (!(_DWORD)v53
              || v52 && (llvm::DIExpression::isConstant(*(llvm::DIExpression **)(v51 + 8)) & 0xFF00000000) != 0)
            {
              if (v53 >= *((unsigned int *)v50 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v50 + 1), (uint64_t)(v50 + 3), v53 + 1, 16);
                v53 = *((unsigned int *)v50 + 4);
              }
              v54 = (_QWORD *)(v50[1] + 16 * v53);
              *v54 = 0;
              v54[1] = v52;
              ++*((_DWORD *)v50 + 4);
            }
            ++v48;
          }
          while (v48 != (uint64_t *)v47);
          v55 = *(unsigned int *)(v37 + 8);
          v56 = -v55;
          v47 = *(_QWORD *)(v37 - 8 * v55 + 48);
        }
        v97[0] = 0;
        v97[1] = 0;
        v98 = 0;
        if (v47)
          v57 = v47 - 8 * *(unsigned int *)(v47 + 8);
        else
          v57 = 0;
        if (v57 != v47)
        {
          do
          {
            v58 = *(_QWORD *)(*(_QWORD *)v57 - 8 * *(unsigned int *)(*(_QWORD *)v57 + 8));
            v96 = v58;
            sub_1C63C5438((uint64_t)v101, (uint64_t)v97, &v96);
            if (v102)
            {
              v59 = sub_1C63C5214((uint64_t)v99, &v96);
              v61 = *((unsigned int *)v59 + 4);
              v62 = 126 - 2 * __clz(v61);
              if ((_DWORD)v61)
                v63 = v62;
              else
                v63 = 0;
              sub_1C6014C04((__n128 *)v59[1], v59[1] + 16 * v61, v63, 1, v60);
              v64 = (uint64_t *)v59[1];
              v65 = *((unsigned int *)v59 + 4);
              v66 = &v64[2 * v65];
              v67 = (uint64_t)v64;
              if ((_DWORD)v65)
              {
                v68 = 0;
                v69 = 16 * v65 - 16;
                while (v69 != v68)
                {
                  v70 = v64[v68 / 8 + 1];
                  v71 = v64[v68 / 8 + 3];
                  v68 += 16;
                  if (v70 == v71)
                  {
                    v67 = (uint64_t)&v64[v68 / 8 - 2];
                    goto LABEL_95;
                  }
                }
              }
              else
              {
LABEL_95:
                if ((uint64_t *)v67 != v66)
                {
                  v72 = v67 + 32;
                  if ((uint64_t *)(v67 + 32) != v66)
                  {
                    do
                    {
                      if (*(_QWORD *)(v67 + 8) != *(_QWORD *)(v72 + 8))
                      {
                        *(_OWORD *)(v67 + 16) = *(_OWORD *)v72;
                        v67 += 16;
                      }
                      v72 += 16;
                    }
                    while ((uint64_t *)v72 != v66);
                    v64 = (uint64_t *)v59[1];
                  }
                  v66 = (uint64_t *)(v67 + 16);
                }
              }
              v73 = (char *)v66 - (char *)v64;
              *((_DWORD *)v59 + 4) = v73 >> 4;
              sub_1C63C1168(v45, v58, v64, (v73 >> 4));
            }
            v57 += 8;
          }
          while (v57 != v47);
          v56 = -(uint64_t)*(unsigned int *)(v37 + 8);
        }
        v74 = *(_QWORD *)(v37 + 8 * v56 + 32);
        if (v74)
          v75 = (uint64_t *)(v74 - 8 * *(unsigned int *)(v74 + 8));
        else
          v75 = 0;
        if (v75 != (uint64_t *)v74)
        {
          do
          {
            v76 = *v75++;
            sub_1C6021928(v45, v76);
          }
          while (v75 != (uint64_t *)v74);
          v56 = -(uint64_t)*(unsigned int *)(v37 + 8);
        }
        v77 = *(_QWORD *)(v37 + 8 * v56 + 40);
        if (v77)
          v78 = (uint64_t *)(v77 - 8 * *(unsigned int *)(v77 + 8));
        else
          v78 = 0;
        if (v78 != (uint64_t *)v77)
        {
          do
          {
            v79 = *(unsigned __int8 *)*v78;
            if ((v79 - 11) < 4 || v79 == 33)
              sub_1C6021928(v45, *v78);
            ++v78;
          }
          while (v78 != (uint64_t *)v77);
          v56 = -(uint64_t)*(unsigned int *)(v37 + 8);
        }
        v80 = *(_QWORD *)(v37 + 8 * v56 + 56);
        if (v80)
          v81 = (uint64_t *)(v80 - 8 * *(unsigned int *)(v80 + 8));
        else
          v81 = 0;
        while (v81 != (uint64_t *)v80)
        {
          v82 = *v81;
          v83 = *(unsigned __int8 **)(*v81 - 8 * *(unsigned int *)(*v81 + 8));
          if (*v83 - 17 >= 3)
          {
            v84 = sub_1C60218D4(v45, v83);
            if (v84)
            {
              v85 = v84;
              v86 = (_QWORD *)sub_1C60068D8(v45, v82);
              v86[5] = v85 & 0xFFFFFFFFFFFFFFFBLL;
              v87 = *(_QWORD **)(v85 + 32);
              if (v87)
              {
                *v86 = *v87;
                *v87 = v86;
              }
              *(_QWORD *)(v85 + 32) = v86;
            }
          }
          ++v81;
        }
        MEMORY[0x1CAA32FB4](v97[0], 8);
LABEL_129:
        v88 = v31 + 1;
        if (v36)
        {
          v89 = v36[6];
          v90 = *((_DWORD *)v89 + 2);
          if (v90 > v31 + 1)
          {
            v91 = ~v31 + v90;
            do
            {
              if (*(_DWORD *)(*(_QWORD *)(*v89 + 8 * v88) + 36))
                break;
              ++v88;
              --v91;
            }
            while (v91);
          }
        }
        v31 = v88;
      }
      while ((_DWORD)v88 != v95);
    }
    v32 = v99[0];
    if (v100)
    {
      v33 = 40 * v100;
      v34 = v99[0] + 24;
      do
      {
        if ((*(_QWORD *)(v34 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v35 = *(void **)(v34 - 16);
          if ((void *)v34 != v35)
            free(v35);
        }
        v34 += 40;
        v33 -= 40;
      }
      while (v33);
    }
    return MEMORY[0x1CAA32FB4](v32, 8);
  }
  return result;
}

void sub_1C600B774(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD **v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  const char *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD **v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  llvm::MCStreamer *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  unsigned int v110;
  uint64_t v111;
  char v112;
  void *v113;
  size_t v114;
  size_t v115;
  int v116;
  uint64_t v117;
  char v118;
  void *v119;
  size_t v120;
  size_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  void *v147[2];
  _BYTE v148[32];
  const char *v149;
  uint64_t v150;
  int v151;
  __int16 v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 2968);
  if (v2)
    sub_1C600C60C(a1, v2);
  *(_QWORD *)(a1 + 2968) = 0;
  v3 = *(_QWORD *)(a1 + 560);
  v4 = *(_QWORD *)(a1 + 568);
  while (v3 != v4)
  {
    sub_1C60077C0(*(_QWORD **)(v3 + 8));
    v3 += 16;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 && *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2108))
  {
    v144 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 248) + 24))(*(_QWORD *)(v5 + 248));
    v6 = *(unsigned int *)(a1 + 2824);
    if ((_DWORD)v6)
    {
      v7 = *(unsigned __int8 ***)(a1 + 2816);
      v8 = 8 * v6;
      do
      {
        v9 = *v7;
        v10 = (_QWORD *)sub_1C600A274(a1, *(unsigned __int8 **)&(*v7)[-8 * *((unsigned int *)*v7 + 2) + 40]);
        sub_1C6006D7C(v10, v9);
        v11 = (_QWORD *)v10[41];
        if (v11 && *(_BYTE *)(v10[9] + 48))
          sub_1C6006D7C(v11, v9);
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    v12 = *(unsigned int *)(a1 + 664);
    if ((_DWORD)v12)
    {
      v85 = *(uint64_t **)(a1 + 656);
      v86 = &v85[v12];
      do
      {
        v87 = *(_QWORD *)(*v85 + 24);
        if (v87)
        {
          while (1)
          {
            v88 = *(unsigned __int16 *)(v87 + 28);
            if (v88 == 17 || v88 == 65 || v88 == 74)
              break;
            v89 = 0;
            v92 = *(_QWORD *)(v87 + 40);
            if ((v92 & 4) == 0)
            {
              v87 = v92 & 0xFFFFFFFFFFFFFFF8;
              if (v87)
                continue;
            }
            goto LABEL_109;
          }
          v89 = (const char *)v87;
        }
        else
        {
          v89 = 0;
        }
LABEL_109:
        v149 = v89;
        v146 = 0;
        if (sub_1C6144EA0((uint64_t *)(a1 + 584), &v149, &v146))
          v90 = *(_QWORD **)(v146 + 8);
        else
          v90 = 0;
        v91 = *v85++;
        sub_1C6006E34(v90, v91);
      }
      while (v85 != v86);
    }
    v13 = *(unint64_t **)(a1 + 568);
    v14 = *(unint64_t **)(a1 + 560);
    if ((unint64_t)((char *)v13 - (char *)v14) >= 0x11)
    {
      v93 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
      v94 = *(_BYTE *)(v93 + 1215);
      if (v94 >= 0)
        v15 = v93 + 1192;
      else
        v15 = *(_QWORD *)(v93 + 1192);
      v95 = *(_QWORD *)(v93 + 1200);
      if (v94 >= 0)
        v16 = v94 & 0x7F;
      else
        v16 = v95;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    if (v14 != v13)
    {
      while (1)
      {
        v17 = v14[1];
        if (*(_DWORD *)(*(_QWORD *)(v17 + 72) + 36) == 3)
          goto LABEL_29;
        sub_1C602468C(v14[1]);
        v18 = *(_QWORD *)(v17 + 328);
        if (v18)
        {
          v109 = *(_QWORD **)(v17 + 40);
          if (v109 && *v109 >= 8uLL)
          {
            v110 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624);
            sub_1C600A7F0(a1, *(_QWORD *)(v17 + 72), (_QWORD *)v17);
            v111 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
            v112 = *(_BYTE *)(v111 + 1215);
            if (v112 >= 0)
              v113 = (void *)(v111 + 1192);
            else
              v113 = *(void **)(v111 + 1192);
            v114 = *(_QWORD *)(v111 + 1200);
            if (v112 >= 0)
              v115 = v112 & 0x7F;
            else
              v115 = v114;
            if (v110 <= 4)
              v116 = 8496;
            else
              v116 = 118;
            sub_1C60207E4((_QWORD *)v17, v17 + 8, v116, v113, v115);
            v117 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
            v118 = *(_BYTE *)(v117 + 1215);
            if (v118 >= 0)
              v119 = (void *)(v117 + 1192);
            else
              v119 = *(void **)(v117 + 1192);
            v120 = *(_QWORD *)(v117 + 1200);
            if (v118 >= 0)
              v121 = v118 & 0x7F;
            else
              v121 = v120;
            sub_1C60207E4((_QWORD *)v18, v18 + 8, v116, v119, v121);
            v122 = *(_QWORD *)(a1 + 8);
            llvm::MD5::MD5((llvm::MD5 *)&v149);
            v153 = v122;
            v154 = v17;
            v155 = 0;
            v156 = 0;
            v157 = 0;
            v123 = sub_1C63C0EA4((uint64_t)&v149, v15, v16, v17 + 8);
            MEMORY[0x1CAA32FB4](v155, 8);
            if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) < 5u)
            {
              v143 = v143 & 0xFFFFFFFF00000000 | 0x10007;
              sub_1C602078C(v17, (unint64_t *)(v17 + 16), 8497, 65543, v123);
              v142 = v142 & 0xFFFFFFFF00000000 | 0x10007;
              sub_1C602078C(v18, (unint64_t *)(v18 + 16), 8497, 65543, v123);
              if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) <= 4u
                && *(_DWORD *)(a1 + 3800))
              {
                sub_1C6024A24(v18, v18 + 8, 8498, *(_QWORD **)(v144[19] + 8), *(_QWORD *)(v144[19] + 8));
              }
            }
            else
            {
              *(_QWORD *)(v17 + 544) = v123;
              *(_QWORD *)(v18 + 544) = v123;
            }
            v19 = 1;
          }
          else
          {
            sub_1C600A7F0(a1, *(_QWORD *)(v18 + 72), *(_QWORD **)(v17 + 328));
            v19 = 0;
          }
        }
        else
        {
          v19 = 0;
          v18 = v17;
        }
        v20 = *(_DWORD *)(v17 + 448);
        if (v20 == 1)
          goto LABEL_20;
        if (v20)
          break;
LABEL_25:
        if (((v19 & 1) != 0
           || *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) >= 5u)
          && *(_DWORD *)(a1 + 4520))
        {
          sub_1C63C1DE8(v18);
        }
        if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) >= 5u)
        {
          if (*(_BYTE *)(v18 + 316))
            sub_1C63C8624(v18);
          if (*(_DWORD *)(a1 + 1192) && !*(_BYTE *)(a1 + 3549))
            sub_1C6024A24(v18, v18 + 8, 140, *(_QWORD **)(a1 + 2640), *(_QWORD *)(v144[40] + 8));
        }
        if (!*(_QWORD *)(*v14 - 8 * *(unsigned int *)(*v14 + 8) + 64))
          goto LABEL_29;
        if (*(_BYTE *)(a1 + 3536))
        {
          if (!*(_BYTE *)(a1 + 3549))
          {
            v138 = v18 + 8;
            v125 = *(_QWORD **)(v18 + 344);
            v139 = *(_QWORD *)(v144[21] + 8);
            if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) <= 4u)
              v140 = 8473;
            else
              v140 = 121;
            v141 = v18;
            goto LABEL_187;
          }
          v124 = v17 + 8;
          v125 = *(_QWORD **)(v18 + 344);
          v126 = *(_QWORD *)(v144[36] + 8);
          v127 = v17;
          v128 = 121;
        }
        else
        {
          v125 = *(_QWORD **)(v18 + 344);
          if (!*(_BYTE *)(a1 + 3549))
          {
            v138 = v18 + 8;
            v139 = *(_QWORD *)(v144[20] + 8);
            v141 = v18;
            v140 = 67;
LABEL_187:
            sub_1C6024A24(v141, v138, v140, v125, v139);
            goto LABEL_29;
          }
          v124 = v17 + 8;
          v126 = *(_QWORD *)(v144[35] + 8);
          v127 = v17;
          v128 = 67;
        }
        sub_1C63C850C(v127, v124, v128, (uint64_t)v125, v126);
LABEL_29:
        v14 += 2;
        if (v14 == v13)
          goto LABEL_30;
      }
      if (*(_BYTE *)(a1 + 3532))
      {
        v149 = 0;
        sub_1C6002D64(v18, (unint64_t *)(v18 + 16), 17, 1, &v149);
      }
      else
      {
LABEL_20:
        *(_QWORD *)(v18 + 488) = **(_QWORD **)(v17 + 440);
      }
      v147[0] = v148;
      v147[1] = (void *)0x200000000;
      if (*(_DWORD *)(v17 + 448))
        sub_1C6007FD4((uint64_t)v147, (const void **)(v17 + 440));
      sub_1C6004374(v18, v18 + 8, (uint64_t)v147);
      if (v147[0] != v148)
        free(v147[0]);
      goto LABEL_25;
    }
LABEL_30:
    sub_1C5174BF0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 2064), (uint64_t *)&v149);
    v21 = v150;
    v22 = v151;
    if ((_DWORD)v150 != v151)
    {
      v23 = v149;
      v24 = *((_QWORD *)v149 + 6);
      do
      {
        v25 = *(_QWORD *)(*(_QWORD *)v24 + 8 * v21);
        if (*(_QWORD *)(v25 + 40))
        {
          sub_1C600A274(a1, (unsigned __int8 *)v25);
          v24 = *((_QWORD *)v23 + 6);
        }
        v26 = v21 + 1;
        v27 = *(_DWORD *)(v24 + 8);
        if (v27 > v21 + 1)
        {
          v28 = ~v21 + v27;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 8 * v26) + 36))
              break;
            ++v26;
            --v28;
          }
          while (v28);
        }
        v21 = v26;
      }
      while ((_DWORD)v26 != v22);
    }
    sub_1C601EA98(a1 + 2992);
    if (*(_BYTE *)(a1 + 3549) && (sub_1C601EA98(a1 + 3552), *(_BYTE *)(a1 + 3549)))
    {
      sub_1C600C690(a1);
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v29 + 272) + 8) + 1624);
      v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 248) + 24))(*(_QWORD *)(v29 + 248));
      v32 = (uint64_t *)(v31 + 136);
      if (v30 >= 5)
        v32 = (uint64_t *)(v31 + 320);
      sub_1C60114D4(a1, *v32);
    }
    if (*(_BYTE *)(a1 + 3549))
      v33 = 3552;
    else
      v33 = 2992;
    if (*(_BYTE *)(a1 + 3549))
      v34 = a1 + 3552;
    else
      v34 = a1 + 2992;
    v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
    sub_1C6000794(v34 + 104, *(_QWORD *)(a1 + v33), *(_QWORD *)(v35 + 72));
    if (*(_BYTE *)(a1 + 3549))
      v37 = a1 + 3552;
    else
      v37 = a1 + 2992;
    v38 = *(unsigned int *)(v37 + 160);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD ***)(v37 + 152);
      v40 = 8 * v38;
      do
      {
        v41 = *v39++;
        sub_1C601E9D8((uint64_t *)v37, v41, 0);
        v40 -= 8;
      }
      while (v40);
    }
    if (byte_1ED8294B8)
      sub_1C600C874(a1, v36);
    v42 = *(unsigned __int8 *)(a1 + 3549);
    v43 = *(_QWORD *)(a1 + 8);
    v44 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v43 + 272) + 8) + 1624);
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v43 + 248) + 24))(*(_QWORD *)(v43 + 248));
    v46 = (uint64_t *)(v45 + 152);
    if (v44 >= 5)
      v46 = (uint64_t *)(v45 + 312);
    v145 = (uint64_t *)(a1 + 2992);
    if (v42)
      v47 = a1 + 3552;
    else
      v47 = a1 + 2992;
    sub_1C6011F2C((llvm::mcdwarf *)a1, v47, *v46);
    v48 = *(unsigned __int8 *)(a1 + 3549);
    v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
    v50 = (uint64_t *)(v49 + 168);
    v51 = (uint64_t *)(v49 + 160);
    if (v48)
    {
      v51 = (uint64_t *)(v49 + 280);
      v50 = (uint64_t *)(v49 + 288);
    }
    if (*(_BYTE *)(a1 + 3536))
      v52 = v50;
    else
      v52 = v51;
    v53 = *(_QWORD **)(a1 + 560);
    v54 = *(_QWORD **)(a1 + 568);
    if (v53 != v54)
    {
      v55 = *v52;
      do
      {
        v56 = v53[1];
        if (*(_QWORD *)(v56 + 328))
          v57 = *(_QWORD *)(v56 + 328);
        else
          v57 = v53[1];
        v58 = *(_QWORD *)(*v53 - 8 * *(unsigned int *)(*v53 + 8) + 64);
        if (v58 && *(_DWORD *)(v58 + 8))
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v55, 0);
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 192))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), *(_QWORD *)(v57 + 344), 0);
          if (*(_BYTE *)(a1 + 3536))
          {
            v59 = *(_QWORD *)(a1 + 8);
            v60 = *(_QWORD **)(v59 + 272);
            v61 = *(unsigned __int16 *)(v60[1] + 1624);
            v149 = "Macro information version";
            v152 = 259;
            (*(void (**)(_QWORD *, const char **, uint64_t))(*v60 + 112))(v60, &v149, 1);
            if (v61 <= 4)
              v62 = 4;
            else
              v62 = v61;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v59 + 272) + 512))(*(_QWORD *)(v59 + 272), v62, 2);
            v63 = *(_QWORD **)(v59 + 272);
            if (*(_BYTE *)(v63[1] + 1626) == 1)
            {
              v149 = "Flags: 64 bit, debug_line_offset present";
              v152 = 259;
              (*(void (**)(_QWORD *, const char **, uint64_t))(*v63 + 112))(v63, &v149, 1);
              v64 = 3;
            }
            else
            {
              v149 = "Flags: 32 bit, debug_line_offset present";
              v152 = 259;
              (*(void (**)(_QWORD *, const char **, uint64_t))(*v63 + 112))(v63, &v149, 1);
              v64 = 2;
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v59 + 272) + 512))(*(_QWORD *)(v59 + 272), v64, 1);
            v65 = *(_QWORD *)(v59 + 272);
            v149 = "debug_line_offset";
            v152 = 259;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v65 + 112))(v65, &v149, 1);
            if (*(_BYTE *)(a1 + 3549))
            {
              v66 = *(_QWORD **)(v59 + 272);
              if (*(_BYTE *)(v66[1] + 1626))
                v67 = 8;
              else
                v67 = 4;
              (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v66 + 512))(v66, 0, v67);
            }
            else
            {
              sub_1C5FFA9F8(v59, *(llvm::MCExpr ***)(v57 + 320), 0);
            }
          }
          sub_1C6012930(a1, v58, v57);
          v68 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
          v149 = "End Of Macro List Mark";
          v152 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v68 + 112))(v68, &v149, 1);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), 0, 1);
        }
        v53 += 2;
      }
      while (v53 != v54);
    }
    if (*(_BYTE *)(a1 + 3550))
    {
      v71 = a1 + 3552;
      v70 = a1 + 2992;
      if (*(_BYTE *)(a1 + 3549))
        v96 = a1 + 3552;
      else
        v96 = a1 + 2992;
      v97 = *(_QWORD *)(a1 + 8);
      v98 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v97 + 248) + 24))(*(_QWORD *)(v97 + 248));
      sub_1C63C6A54(v96 + 176, v97, *(_QWORD *)(v98 + 296), *(_QWORD *)(v96 + 320));
      v69 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
                      + 296);
    }
    else
    {
      v69 = 0;
      v71 = a1 + 3552;
      v70 = a1 + 2992;
    }
    if (*(_BYTE *)(a1 + 3549))
      v72 = 3552;
    else
      v72 = 2992;
    if (*(_BYTE *)(a1 + 3549))
      v73 = v71;
    else
      v73 = v70;
    v74 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
    sub_1C601F3F8(v73 + 176, *(_QWORD *)(a1 + v72), *(_QWORD *)(v74 + 128), v69, 1);
    if (*(_BYTE *)(a1 + 3549))
    {
      sub_1C63C22FC(a1);
      v99 = *(unsigned int *)(a1 + 3152);
      if ((_DWORD)v99)
      {
        v100 = *(_QWORD ***)(a1 + 3144);
        v101 = 8 * v99;
        do
        {
          v102 = *v100++;
          sub_1C601E9D8(v145, v102, 1);
          v101 -= 8;
        }
        while (v101);
      }
      v103 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
      sub_1C6000794(a1 + 3096, *(_QWORD *)(a1 + 2992), *(_QWORD *)(v103 + 240));
      v104 = *(_QWORD *)(a1 + 8);
      v105 = *(llvm::MCStreamer **)(v104 + 272);
      v106 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v104 + 248) + 24))(*(_QWORD *)(v104 + 248));
      llvm::MCDwarfDwoLineTable::Emit(a1 + 4008, v105, 981773, *(_QWORD *)(v106 + 256));
      v107 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
      sub_1C6011F2C((llvm::mcdwarf *)a1, (uint64_t)v145, *(_QWORD *)(v107 + 328));
    }
    v75 = *(_QWORD *)(a1 + 8);
    v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v75 + 248) + 24))(*(_QWORD *)(v75 + 248));
    sub_1C5FEA740(a1 + 4512, v75, *(_QWORD *)(v76 + 304));
    v77 = *(_DWORD *)(a1 + 3544);
    if (v77 == 2)
    {
      v78 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
                      + 192);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v78, 0);
      sub_1C5FE7478(*(_QWORD *)(a1 + 8), a1 + 4744, "Names", (char *)5, *(_QWORD *)(v78 + 8), &unk_1C86772AC, 1);
      v79 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
                      + 200);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v79, 0);
      sub_1C5FE7478(*(_QWORD *)(a1 + 8), a1 + 4936, "ObjC", (char *)4, *(_QWORD *)(v79 + 8), &unk_1C86772AC, 1);
      v80 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
                      + 208);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v80, 0);
      sub_1C5FE7478(*(_QWORD *)(a1 + 8), a1 + 5128, "namespac", (char *)8, *(_QWORD *)(v80 + 8), &unk_1C86772AC, 1);
      v81 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
                      + 216);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v81, 0);
      sub_1C5FE7478(*(_QWORD *)(a1 + 8), a1 + 5320, "types", (char *)5, *(_QWORD *)(v81 + 8), &unk_1C86772A0, 3);
    }
    else if (v77 == 3)
    {
      v108 = *(unsigned int *)(a1 + 3152);
      if ((_DWORD)v108)
        sub_1C5FE7B2C(*(_QWORD *)(a1 + 8), a1 + 4552, a1, *(uint64_t **)(a1 + 3144), v108);
    }
    v82 = *(_QWORD *)(a1 + 560);
    v83 = *(_QWORD *)(a1 + 568);
    while (v82 != v83)
    {
      v84 = *(_QWORD **)(v82 + 8);
      if (sub_1C60071F4(v84))
      {
        v129 = *(_DWORD *)(v84[9] + 52);
        v130 = *(_QWORD *)(a1 + 8);
        v131 = *(_QWORD *)(v130 + 272);
        v132 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v130 + 248) + 24))(*(_QWORD *)(v130 + 248));
        v133 = (_QWORD *)(v132 + 360);
        if (v129 != 1)
          v133 = (_QWORD *)(v132 + 176);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v131 + 168))(v131, *v133, 0);
        sub_1C63C2394(a1, v129 == 1, (uint64_t)"Names", 5, (uint64_t)v84, (uint64_t)(v84 + 47));
        v134 = *(_QWORD *)(a1 + 8);
        v135 = *(_QWORD *)(v134 + 272);
        v136 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v134 + 248) + 24))(*(_QWORD *)(v134 + 248));
        v137 = (_QWORD *)(v136 + 368);
        if (v129 != 1)
          v137 = (_QWORD *)(v136 + 112);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v135 + 168))(v135, *v137, 0);
        sub_1C63C2394(a1, v129 == 1, (uint64_t)"Types", 5, (uint64_t)v84, (uint64_t)(v84 + 51));
      }
      v82 += 16;
    }
  }
}

void sub_1C600C60C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  unsigned int *v9;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 272);
  v4 = v3[1];
  v5 = (*(uint64_t (**)(_QWORD *))(*v3 + 96))(v3);
  v6 = *(_DWORD *)(a2 + 312);
  if (v5)
    v6 = 0;
  v8 = v6;
  v9 = &v8;
  v7 = sub_1C592911C((uint64_t **)(v4 + 1472), &v8, (uint64_t)&std::piecewise_construct, &v9);
  llvm::MCLineSection::addEndEntry((llvm::MCLineSection *)(v7 + 504), *(llvm::MCSymbol **)(*(_QWORD *)(a2 + 440) + 16 * *(unsigned int *)(a2 + 448) - 8));
}

uint64_t sub_1C600C690(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int v17;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v2 + 272) + 8) + 1624) < 5u)
  {
    v4 = *(_DWORD *)(result + 1192);
    if (v4)
    {
      v5 = *(uint64_t **)(result + 1184);
      v6 = &v5[3 * v4];
      do
      {
        v7 = *(_QWORD *)(v1 + 8);
        v8 = *(_QWORD *)(v7 + 272);
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 248) + 24))(*(_QWORD *)(v7 + 248));
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 168))(v8, *(_QWORD *)(v9 + 264), 0);
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 8) + 272) + 192))(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 272), v5[1], 0);
        v10 = *(_QWORD *)(v1 + 1184);
        v11 = 1 - 0x5555555555555555 * (((uint64_t)v5 - v10) >> 3);
        if (v11 == *(_DWORD *)(v1 + 1192))
          v12 = *(unsigned int *)(v1 + 1304);
        else
          v12 = *(_QWORD *)(v10 + 24 * v11 + 16);
        v13 = v5[2];
        if (v13 != v12)
        {
          v14 = *(_QWORD *)(v1 + 1296);
          v15 = (uint64_t *)(v14 + 32 * v12);
          v16 = (uint64_t *)(v14 + 32 * v13);
          do
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 272), 3, 1);
            v17 = sub_1C63BB980(v1 + 4512, *v16, 0);
            llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)(v1 + 8) + 272), v17, 0);
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v1 + 8) + 272)
                                                                      + 832))(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 272), v16[1], *v16, 4);
            sub_1C60113A8(v1, (uint64_t)v16, *v5);
            v16 += 4;
          }
          while (v16 != v15);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 272), 0, 1);
        v5 += 3;
      }
      while (v5 != v6);
    }
  }
  else
  {
    v3 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 248) + 24))(*(_QWORD *)(v2 + 248)) + 336);
    return sub_1C60114D4(v1, v3);
  }
  return result;
}

uint64_t sub_1C600C874(uint64_t a1, __n128 a2)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const std::nothrow_t *v16;
  unint64_t v17;
  llvm::MCSection *v18;
  unint64_t **v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t *v34;
  __n128 *v35;
  unint64_t v36;
  __n128 *v37;
  BOOL v38;
  __n128 *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t i;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __n128 *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  __n128 v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114[4];
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  _QWORD v120[2];
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v120[0] = 0;
  v120[1] = 0;
  v121 = 0;
  v123 = 0;
  v124 = 0;
  v122 = 0;
  v3 = *(uint64_t ***)(a1 + 608);
  v4 = *(uint64_t ***)(a1 + 616);
  if (v3 == v4)
  {
    v5 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    goto LABEL_77;
  }
  do
  {
    v6 = *v3;
    v7 = **v3;
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 && (v6[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v6 + 2) |= 4u;
      llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v6[3]);
      v7 = *v6 & 7 | v8;
      *v6 = v7;
    }
    if (!v8)
      goto LABEL_11;
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 && (v6[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v6 + 2) |= 4u;
      llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v6[3]);
      *v6 = *v6 & 7 | v9;
    }
    if ((_UNKNOWN *)v9 == llvm::MCSymbol::AbsolutePseudoFragment)
    {
LABEL_11:
      v114[0] = 0;
LABEL_12:
      v12 = sub_1C63C2954((uint64_t)v120, v114);
      v13 = v12;
      a2 = *(__n128 *)v3;
      v14 = *(unsigned int *)(v12 + 8);
      if (v14 >= *(unsigned int *)(v12 + 12))
      {
        v110 = *(__n128 *)v3;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v12, v12 + 16, v14 + 1, 16);
        a2 = v110;
        v14 = *(unsigned int *)(v13 + 8);
      }
      *(__n128 *)(*(_QWORD *)v13 + 16 * v14) = a2;
      ++*(_DWORD *)(v13 + 8);
      goto LABEL_9;
    }
    v10 = *v3;
    v11 = **v3 & 0xFFFFFFFFFFFFFFF8;
    if (!v11 && (v10[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v10 + 2) |= 4u;
      llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v10[3]);
      *v10 = *v10 & 7 | v11;
    }
    v114[0] = *(_QWORD *)(v11 + 16);
    if (*(_BYTE *)(v114[0] + 220))
      goto LABEL_12;
LABEL_9:
    v3 += 2;
  }
  while (v3 != v4);
  v5 = 0;
  v15 = v122;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v111 = v123;
  if (v122 != v123)
  {
    v16 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    do
    {
      v17 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v17)
      {
        v18 = *(llvm::MCSection **)v15;
        v19 = (unint64_t **)(v15 + 8);
        v20 = *(__n128 **)(v15 + 8);
        v21 = &v20[v17];
        if (*(_QWORD *)v15)
        {
          v114[0] = a1;
          if (v17 < 0x81)
          {
LABEL_49:
            sub_1C601AB90(v20, &v20[v17], v114, v17, 0, 0, a2);
          }
          else
          {
            v36 = v17;
            while (1)
            {
              v37 = (__n128 *)operator new(16 * v36, v16);
              if (v37)
                break;
              v38 = v36 > 1;
              v36 >>= 1;
              if (!v38)
                goto LABEL_49;
            }
            v39 = v37;
            sub_1C601AB90(v20, &v20[v17], v114, v17, v37, v36, a2);
            operator delete(v39);
          }
          v40 = llvm::MCStreamer::endSection(*(llvm::MCContext ***)(*(_QWORD *)(a1 + 8) + 272), v18);
          v41 = *(unsigned int *)(v15 + 16);
          if (v41 >= *(unsigned int *)(v15 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 8, v15 + 24, v41 + 1, 16);
            v41 = *(unsigned int *)(v15 + 16);
          }
          v42 = (unint64_t *)(*(_QWORD *)(v15 + 8) + 16 * v41);
          *v42 = v40;
          v42[1] = 0;
          v43 = (*(_DWORD *)(v15 + 16) + 1);
          *(_DWORD *)(v15 + 16) = v43;
          if (v43 >= 2)
          {
            v44 = **v19;
            for (i = 1; i != v43; ++i)
            {
              v46 = &(*v19)[2 * i];
              if (v46[1] != *(v46 - 1))
              {
                v47 = *v46;
                v48 = sub_1C61D0AA8((uint64_t)&v117, (uint64_t *)v46 - 1);
                v49 = v48;
                v51 = (__n128 *)v48[2];
                v50 = v48[3];
                if ((unint64_t)v51 >= v50)
                {
                  v106 = v44;
                  v108 = v47;
                  v53 = (__n128 *)v48[1];
                  v54 = v51 - v53;
                  v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 60)
LABEL_136:
                    abort();
                  v56 = v50 - (_QWORD)v53;
                  if (v56 >> 3 > v55)
                    v55 = v56 >> 3;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
                    v55 = 0xFFFFFFFFFFFFFFFLL;
                  v105 = v55;
                  if (v55)
                  {
                    if (v55 >> 60)
LABEL_137:
                      sub_1C4764EE4();
                    v57 = (char *)operator new(16 * v55);
                  }
                  else
                  {
                    v57 = 0;
                  }
                  v58 = &v57[16 * v54];
                  *(_QWORD *)v58 = v106;
                  *((_QWORD *)v58 + 1) = v108;
                  v59 = (__n128 *)v58;
                  if (v51 == v53)
                  {
                    v60 = v105;
                  }
                  else
                  {
                    v60 = v105;
                    do
                    {
                      a2 = v51[-1];
                      v59[-1] = a2;
                      --v59;
                      --v51;
                    }
                    while (v51 != v53);
                    v51 = (__n128 *)v49[1];
                  }
                  v52 = (__n128 *)(v58 + 16);
                  v49[1] = v59;
                  v49[2] = v58 + 16;
                  v49[3] = &v57[16 * v60];
                  if (v51)
                    operator delete(v51);
                }
                else
                {
                  v51->n128_u64[0] = v44;
                  v51->n128_u64[1] = v47;
                  v52 = v51 + 1;
                }
                v49[2] = v52;
                v44 = *v46;
                v16 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
              }
            }
          }
        }
        else
        {
          do
          {
            v22 = v20->n128_u64[0];
            v23 = sub_1C61D0AA8((uint64_t)&v117, &v20->n128_i64[1]);
            v24 = v23;
            v26 = (__n128 *)v23[2];
            v25 = v23[3];
            if ((unint64_t)v26 >= v25)
            {
              v28 = (__n128 *)v23[1];
              v29 = v26 - v28;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 60)
                goto LABEL_136;
              v31 = v25 - (_QWORD)v28;
              if (v31 >> 3 > v30)
                v30 = v31 >> 3;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
                v32 = 0xFFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                if (v32 >> 60)
                  goto LABEL_137;
                v33 = (char *)operator new(16 * v32);
              }
              else
              {
                v33 = 0;
              }
              v34 = (unint64_t *)&v33[16 * v29];
              *v34 = v22;
              v34[1] = 0;
              v35 = (__n128 *)v34;
              if (v26 != v28)
              {
                do
                {
                  a2 = v26[-1];
                  v35[-1] = a2;
                  --v35;
                  --v26;
                }
                while (v26 != v28);
                v26 = (__n128 *)v24[1];
              }
              v27 = (__n128 *)(v34 + 2);
              v24[1] = v35;
              v24[2] = v34 + 2;
              v24[3] = &v33[16 * v32];
              if (v26)
                operator delete(v26);
            }
            else
            {
              v26->n128_u64[0] = v22;
              v26->n128_u64[1] = 0;
              v27 = v26 + 1;
            }
            v24[2] = v27;
            ++v20;
            v16 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          }
          while (v20 != v21);
        }
      }
      v15 += 152;
    }
    while (v15 != v111);
    v5 = v117;
  }
LABEL_77:
  v61 = *(_QWORD *)(a1 + 8);
  v62 = *(_QWORD *)(v61 + 272);
  v63 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v61 + 248) + 24))(*(_QWORD *)(v61 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v62 + 168))(v62, *(_QWORD *)(v63 + 144), 0);
  v64 = (uint64_t *)(v5 + 32 * v119);
  if ((_DWORD)v118)
  {
    if (v119)
    {
      v66 = 32 * v119;
      v65 = (uint64_t *)v5;
      while ((*v65 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v65 += 4;
        v66 -= 32;
        if (!v66)
          goto LABEL_83;
      }
    }
    else
    {
      v65 = (uint64_t *)v5;
    }
  }
  else
  {
LABEL_83:
    v65 = (uint64_t *)(v5 + 32 * v119);
  }
  v67 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 256) + 8);
  v68 = (uint64_t *)(v5 + 32 * v119);
  if (v65 == v68)
  {
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v70 = 0;
    v69 = 0;
    v71 = 0;
    v112 = v68;
    do
    {
      v72 = *v65;
      if (v69 >= v71)
      {
        v73 = v69 - v70;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 61)
          goto LABEL_136;
        if (((char *)v71 - (char *)v70) >> 2 > v74)
          v74 = ((char *)v71 - (char *)v70) >> 2;
        if ((unint64_t)((char *)v71 - (char *)v70) >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
        {
          if (v75 >> 61)
            goto LABEL_137;
          v76 = (char *)operator new(8 * v75);
        }
        else
        {
          v76 = 0;
        }
        v77 = (uint64_t *)&v76[8 * v73];
        *v77 = v72;
        v78 = v77 + 1;
        while (v69 != v70)
        {
          v79 = *--v69;
          *--v77 = v79;
        }
        v71 = (uint64_t *)&v76[8 * v75];
        if (v70)
          operator delete(v70);
        v70 = v77;
        v69 = v78;
        v68 = v112;
      }
      else
      {
        *v69++ = v72;
      }
      v80 = v65 + 4;
      v65 = v64;
      if (v80 != v64)
      {
        v65 = v80;
        while ((*v65 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v65 += 4;
          if (v65 == v64)
          {
            v65 = v64;
            break;
          }
        }
      }
    }
    while (v65 != v68);
  }
  v81 = 126 - 2 * __clz(v69 - v70);
  if (v69 == v70)
    v82 = 0;
  else
    v82 = v81;
  sub_1C601BB04(v70, v69, v82, 1);
  if (v69 != v70)
  {
    v113 = (2 * v67);
    v83 = 1 << (63 - __clz(v113));
    v107 = -v83;
    v109 = v83 - 1;
    v84 = v70;
    do
    {
      v116 = 0;
      v116 = *v84;
      v85 = v116;
      v86 = sub_1C61D0AA8((uint64_t)&v117, &v116);
      v87 = *(_QWORD *)(v85 + 328);
      if (v87)
      {
        v116 = *(_QWORD *)(v85 + 328);
        v85 = v87;
      }
      v88 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 272);
      v89 = 12;
      if (*(_BYTE *)(v88[1] + 1626))
        v90 = 12;
      else
        v90 = 8;
      if (*(_BYTE *)(v88[1] + 1626))
        v89 = 24;
      v91 = ((v109 + v89) & v107) - v89;
      v92 = v90 + (_DWORD)v113 + (_DWORD)v113 * ((v86[2] - v86[1]) >> 4) + v91;
      v114[0] = (uint64_t)"Length of ARange Set";
      v115 = 259;
      (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*v88 + 1240))(v88, v92, v114);
      v93 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
      v114[0] = (uint64_t)"DWARF Arange version number";
      v115 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v93 + 112))(v93, v114, 1);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), 2, 2);
      v94 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
      v114[0] = (uint64_t)"Offset Into Debug Info Section";
      v115 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v94 + 112))(v94, v114, 1);
      sub_1C63C2934(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 3533), v85);
      v95 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
      v114[0] = (uint64_t)"Address Size (in bytes)";
      v115 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v95 + 112))(v95, v114, 1);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v67, 1);
      v96 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
      v114[0] = (uint64_t)"Segment Size (in bytes)";
      v115 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v96 + 112))(v96, v114, 1);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), 0, 1);
      llvm::MCStreamer::emitFill(*(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272), v91, 0xFFu);
      v98 = (uint64_t *)v86[1];
      v97 = (uint64_t *)v86[2];
      while (v98 != v97)
      {
        sub_1C5FF4334(*(_QWORD *)(a1 + 8), *v98, 0, v67, 0);
        v99 = v98[1];
        if (v99)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 832))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v99, *v98, v67);
        }
        else
        {
          v100 = sub_1C6175338((uint64_t *)(a1 + 632), v98);
          if (v100[1] <= 1uLL)
            v101 = 1;
          else
            v101 = v100[1];
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v101, v67);
        }
        v98 += 2;
      }
      v102 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
      v114[0] = (uint64_t)"ARange terminator";
      v115 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v102 + 112))(v102, v114, 1);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), 0, v67);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), 0, v67);
      ++v84;
    }
    while (v84 != v69);
  }
  if (v70)
    operator delete(v70);
  v103 = v117;
  sub_1C62B4210(v117, v119);
  MEMORY[0x1CAA32FB4](v103, 8);
  return sub_1C62EA928((uint64_t)v120);
}

_QWORD *sub_1C600D26C(int8x8_t *a1, _QWORD *a2, unsigned __int8 *a3, unint64_t a4)
{
  _QWORD *result;
  int8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  result = (_QWORD *)sub_1C6006EF0(a2, (uint64_t)a3);
  if (!result)
  {
    v9 = a1[20];
    if (v9)
    {
      v10 = 0x9DDFEA08EB382D69 * (((8 * a4) + 8) ^ HIDWORD(a4));
      v11 = 0x9DDFEA08EB382D69 * (HIDWORD(a4) ^ (v10 >> 47) ^ v10);
      v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      v13 = (uint8x8_t)vcnt_s8(v9);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
        v14 = v12 < *(_QWORD *)&v9 ? v12 : v12 % *(_QWORD *)&v9;
      else
        v14 = (*(_QWORD *)&v9 - 1) & v12;
      v15 = *(_QWORD **)(*(_QWORD *)&a1[19] + 8 * v14);
      if (v15)
      {
        while (1)
        {
          v15 = (_QWORD *)*v15;
          if (!v15)
            break;
          v16 = v15[1];
          if (v16 == v12)
          {
            if (v15[2] == a4)
              return sub_1C6006F80(a2, a3, (uint64_t)(v15 + 3));
          }
          else
          {
            if (v13.u32[0] <= 1uLL)
            {
              v16 &= *(_QWORD *)&v9 - 1;
            }
            else if (v16 >= *(_QWORD *)&v9)
            {
              v16 %= *(_QWORD *)&v9;
            }
            if (v16 != v14)
              return result;
          }
        }
      }
    }
  }
  return result;
}

void sub_1C600D39C(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C60189BC(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C60189BC(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

void sub_1C600D420(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    sub_1C63C5BCC(a1, a2, a3, a4);
  }
  else
  {
    v6 = (uint64_t *)(*(_QWORD *)a1 + 112 * v5);
    v7 = *a2;
    v8 = *a3;
    v9 = *(_QWORD *)a4;
    v6[2] = (uint64_t)(v6 + 4);
    v10 = *(_DWORD *)(a4 + 8);
    *v6 = v7;
    v6[1] = v8;
    v6[3] = 0x100000000;
    sub_1C6018DA4((uint64_t)(v6 + 2), v9, v9 + 80 * v10);
    sub_1C6018E90((uint64_t)v6);
    ++*(_DWORD *)(a1 + 8);
  }
}

BOOL sub_1C600D4B0(int8x8_t *this, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  llvm::DILocation *v9;
  _QWORD *LexicalScope;
  _QWORD *v11;
  uint64_t v12;
  _BOOL8 v13;
  unint64_t v15;
  llvm::DILocation *v16;
  _QWORD *v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  llvm::DILocation *v22;
  llvm::DILocation *v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(llvm::DILocation **)(a2 + 56);
  v23 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, (unsigned __int8 *)v9, 2);
    v9 = v23;
  }
  LexicalScope = llvm::LexicalScopes::findLexicalScope(this, v9);
  if (!LexicalScope)
    goto LABEL_10;
  v11 = LexicalScope;
  if (!*((_DWORD *)LexicalScope + 22))
    goto LABEL_10;
  v12 = *(_QWORD *)LexicalScope[10];
  if (sub_1C5FFC224(a4, a2, v12))
    goto LABEL_6;
  if (*(_QWORD *)(v12 + 24) != v8)
  {
LABEL_10:
    v13 = 0;
    goto LABEL_11;
  }
  v15 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v15 || (*(_BYTE *)v15 & 4) == 0)
  {
    while ((*(_WORD *)(v15 + 44) & 4) != 0)
      v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
  }
  while (v15 != v8 + 48 && (*(_WORD *)(v15 + 44) & 1) == 0)
  {
    v16 = *(llvm::DILocation **)(v15 + 56);
    v22 = v16;
    if (v16)
    {
      llvm::MetadataTracking::track((uint64_t)&v22, (unsigned __int8 *)v16, 2);
      if (v22)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v15 + 16) + 8) & 0x10) != 0)
        {
          v18 = 4;
        }
        else if (*((_QWORD *)v23 - *((unsigned int *)v23 + 2)) == *((_QWORD *)v22 - *((unsigned int *)v22 + 2)))
        {
          v18 = 1;
        }
        else
        {
          v17 = llvm::LexicalScopes::findLexicalScope(this, v22);
          v18 = 1;
          if (v17
            && v17 != v11
            && (*((_DWORD *)v11 + 44) >= *((_DWORD *)v17 + 44) || *((_DWORD *)v11 + 45) <= *((_DWORD *)v17 + 45)))
          {
            v18 = 0;
          }
        }
        if (v22)
          llvm::MetadataTracking::untrack((uint64_t)&v22, (unsigned __int8 *)v22);
        if ((v18 | 4) != 4)
          goto LABEL_10;
      }
    }
    v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
    if (!v15 || (*(_BYTE *)v15 & 4) == 0)
    {
      while ((*(_WORD *)(v15 + 44) & 4) != 0)
        v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
    }
  }
LABEL_6:
  if (a3)
  {
    if (*(_QWORD *)(v8 + 64) != *(_QWORD *)(v8 + 72))
    {
LABEL_8:
      v13 = !sub_1C5FFC224(a4, a3, *(_QWORD *)(v11[10] + 16 * *((unsigned int *)v11 + 22) - 8));
      goto LABEL_11;
    }
    v19 = *(_BYTE **)(a2 + 32);
    if (**(_WORD **)(a2 + 16) == 14)
    {
      v20 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v20 == 2)
        goto LABEL_43;
      v21 = &v19[32 * v20];
      v19 += 64;
    }
    else
    {
      v21 = v19 + 32;
    }
    v13 = 1;
    while (*v19 == 1)
    {
      v19 += 32;
      if (v19 == v21)
        goto LABEL_11;
    }
    goto LABEL_8;
  }
LABEL_43:
  v13 = 1;
LABEL_11:
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, (unsigned __int8 *)v23);
  return v13;
}

uint64_t sub_1C600D724(int8x8_t *a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1C600D26C(a1, a2, a4, *(_QWORD *)(a3 + 8));
  v11 = *a4;
  if (v11 == 25)
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = a5;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)v12 = &unk_1E81AB2C8;
    *(_QWORD *)(v12 + 8) = a4;
    *(_QWORD *)(v12 + 32) = 0xFFFFFFFF00000000;
    *(_WORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 56) = v12 + 72;
    *(_QWORD *)(v12 + 64) = 0x100000000;
    v17 = v12;
    sub_1C600D39C((uint64_t)&a1[82], (char *)&v17);
    v13 = v17;
    v17 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    sub_1C601EBEC((uint64_t)&a1[374], a3, *(uint64_t **)(*(_QWORD *)&a1[82] + 8 * a1[83].u32[0] - 8));
  }
  else if (v11 == 26)
  {
    v15 = operator new();
    *(_QWORD *)(v15 + 16) = a5;
    *(_QWORD *)(v15 + 24) = 0;
    *(_DWORD *)(v15 + 32) = 1;
    *(_QWORD *)v15 = &unk_1E81AB2E8;
    *(_QWORD *)(v15 + 8) = a4;
    *(_QWORD *)(v15 + 40) = a6;
    v17 = v15;
    sub_1C600D39C((uint64_t)&a1[82], (char *)&v17);
    v16 = v17;
    v17 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    sub_1C63C682C((uint64_t)&a1[374], a3, *(_QWORD *)(*(_QWORD *)&a1[82] + 8 * a1[83].u32[0] - 8));
  }
  return *(_QWORD *)(*(_QWORD *)&a1[82] + 8 * a1[83].u32[0] - 8);
}

_QWORD *sub_1C600D8B4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t ****v10;
  uint64_t ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD ***v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 **v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t TempSymbol;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  BOOL v59;
  _BOOL4 v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[4];
  __int16 v67;

  v9 = result;
  v10 = *(uint64_t *****)(*(_QWORD *)(a2 + 24) + 32);
  v11 = *v10;
  if ((*((_BYTE *)*v10 + 23) & 0x20) == 0)
    goto LABEL_29;
  v12 = ***v11;
  v66[0] = (uint64_t)*v10;
  v13 = *(_DWORD *)(v12 + 2496);
  if (!v13)
  {
    v53 = 0;
LABEL_65:
    result = sub_1C541AB24(v12 + 2480, (uint64_t)v66, v66, v53);
    v54 = v66[0];
    result[3] = 0;
    result[4] = 0;
    *result = v54;
    result[1] = result + 3;
    result[2] = 0x100000000;
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(v12 + 2480);
  v15 = v13 - 1;
  v16 = v15 & ((v11 >> 4) ^ (v11 >> 9));
  result = (_QWORD *)(v14 + 40 * v16);
  v17 = (_QWORD ***)*result;
  if ((uint64_t ***)*result != v11)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != (_QWORD ***)-4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == (_QWORD ***)-8192;
      if (v20)
        v18 = result;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      result = (_QWORD *)(v14 + 40 * v16);
      v17 = (_QWORD ***)*result;
      if ((uint64_t ***)*result == v11)
        goto LABEL_12;
    }
    if (v18)
      v53 = v18;
    else
      v53 = result;
    goto LABEL_65;
  }
LABEL_12:
  v22 = *((unsigned int *)result + 4);
  if ((_DWORD)v22)
  {
    v23 = (_QWORD *)(result[1] + 8);
    v24 = 16 * v22;
    v25 = 1;
    while (*((_DWORD *)v23 - 2))
    {
      v23 += 2;
      v24 -= 16;
      if (!v24)
        goto LABEL_30;
    }
    v26 = *v23;
    if (v26)
    {
      if (*(_DWORD *)(*(_QWORD *)(v26 - 8 * *(unsigned int *)(v26 + 8) + 40) + 36))
      {
        if ((*(_BYTE *)(v26 + 43) & 0x20) == 0)
          goto LABEL_94;
        result = (_QWORD *)llvm::MachineInstr::isCandidateForCallSiteEntry(a2, 1);
        if (!(_DWORD)result)
          goto LABEL_94;
        v27 = *(_WORD *)(a2 + 44);
        v28 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
        if ((v27 & 0xC) == 0 || (v27 & 4) != 0)
        {
          if ((v27 & 8) == 0 && (v28 & 0x20000) != 0)
            goto LABEL_94;
        }
        else
        {
          if ((v28 & 0x20000) == 0)
          {
            v29 = a2;
            while ((*(_WORD *)(v29 + 44) & 8) != 0)
            {
              v29 = *(_QWORD *)(v29 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v29 + 16) + 10) & 2) != 0)
                goto LABEL_27;
            }
            goto LABEL_91;
          }
LABEL_27:
          if ((v27 & 8) == 0)
          {
LABEL_94:
            v25 = 0;
            goto LABEL_30;
          }
        }
LABEL_91:
        v62 = ((uint64_t (*)(uint64_t ***))(*v10[2])[13])(v10[2]);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 1136))(v62, a2))
        {
          v64 = a2;
          v65 = 0;
          sub_1C5FFFBD4((uint64_t)(v9 + 46), &v64, &v65, (uint64_t)v66);
        }
        v64 = a2;
        v65 = 0;
        result = sub_1C5FFFBD4((uint64_t)(v9 + 49), &v64, &v65, (uint64_t)v66);
        goto LABEL_94;
      }
    }
  }
LABEL_29:
  v25 = 1;
LABEL_30:
  if (!v9[1])
    goto LABEL_40;
  v30 = v9[2];
  if (!*(_BYTE *)(v30 + 2108))
    goto LABEL_40;
  v9[7] = a2;
  v31 = v9[46];
  v32 = *((unsigned int *)v9 + 96);
  if (!(_DWORD)v32)
    goto LABEL_38;
  LODWORD(v33) = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v34 = (uint64_t *)(v31 + 16 * v33);
  v35 = *v34;
  if (*v34 != a2)
  {
    v36 = 1;
    while (v35 != -4096)
    {
      v37 = v33 + v36++;
      v33 = v37 & (v32 - 1);
      v35 = *(_QWORD *)(v31 + 16 * v33);
      if (v35 == a2)
      {
        v34 = (uint64_t *)(v31 + 16 * v33);
        goto LABEL_39;
      }
    }
LABEL_38:
    v34 = (uint64_t *)(v31 + 16 * v32);
  }
LABEL_39:
  if (v34 != (uint64_t *)(v31 + 16 * v32) && !v34[1])
  {
    v47 = v9[4];
    if (!v47)
    {
      v48 = *(_QWORD *)(v30 + 2056);
      v49 = v30 + 8;
      if (v48)
        v50 = v48;
      else
        v50 = v49;
      v66[0] = (uint64_t)"tmp";
      v67 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v50, (uint64_t)v66, 1);
      v9[4] = TempSymbol;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v9[1] + 272)
                                                                                     + 192))(*(_QWORD *)(v9[1] + 272), TempSymbol, 0);
      v47 = v9[4];
    }
    v34[1] = v47;
  }
LABEL_40:
  if (v9[7])
    v38 = v25;
  else
    v38 = 1;
  if ((v38 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 8) & 0x10) == 0 && (*(_WORD *)(a2 + 44) & 1) == 0)
  {
    v40 = (unsigned __int8 **)(a2 + 56);
    v39 = *(_QWORD *)(a2 + 56);
    v42 = (unsigned __int8 **)(v9 + 3);
    v41 = (unsigned __int8 *)v9[3];
    result = (_QWORD *)v9[1];
    v43 = *(_QWORD *)(result[34] + 8);
    v44 = *(_DWORD *)(v43 + 1500);
    if ((unsigned __int8 *)v39 == v41)
    {
      if (v39)
      {
        if (!v44)
        {
          v52 = *(unsigned int *)(v39 + 4);
          if ((_DWORD)v52)
            return (_QWORD *)sub_1C600E08C((uint64_t)result, v52, *(unsigned __int16 *)(v39 + 2), *(unsigned __int8 **)(v39 - 8 * *(unsigned int *)(v39 + 8)), 0, *(_DWORD *)(v43 + 1632), *(unsigned __int16 *)(v43 + 1624), a8, v9[393]);
        }
      }
    }
    else if (v39)
    {
      if (*(_DWORD *)(v39 + 4) | v44)
      {
        v45 = v9 + 6;
        if (v39 == v9[6])
        {
          v66[0] = 0;
          if (v66 != v45)
          {
            llvm::MetadataTracking::untrack((uint64_t)(v9 + 6), (unsigned __int8 *)v39);
            v57 = (unsigned __int8 *)v66[0];
            *v45 = v66[0];
            if (v57)
              llvm::MetadataTracking::retrack((uint64_t)v66, v57, (uint64_t)(v9 + 6));
          }
          v41 = *v42;
          v46 = 5;
        }
        else
        {
          v46 = 0;
        }
        if (v41)
          v44 = *((_DWORD *)v41 + 1);
        v58 = *((unsigned int *)*v40 + 1);
        v59 = !(_DWORD)v58 || (_DWORD)v58 == v44;
        v60 = !v59;
        result = (_QWORD *)sub_1C600E08C(v9[1], v58, *((unsigned __int16 *)*v40 + 1), *(unsigned __int8 **)&(*v40)[-8 * *((unsigned int *)*v40 + 2)], v46 | v60, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9[1] + 272) + 8) + 1632), *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v9[1] + 272) + 8) + 1624), a8, v9[393]);
        if (v40 != v42)
        {
          v61 = *v40;
          if (*((_DWORD *)*v40 + 1))
          {
            if (!*v42)
            {
              *v42 = v61;
              return (_QWORD *)llvm::MetadataTracking::track((uint64_t)(v9 + 3), v61, 2);
            }
            result = (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)(v9 + 3), *v42);
            v61 = *v40;
            *v42 = *v40;
            if (v61)
              return (_QWORD *)llvm::MetadataTracking::track((uint64_t)(v9 + 3), v61, 2);
          }
        }
      }
    }
    else if (v44)
    {
      if (dword_1ED8297B8 == 1 || dword_1ED8297B8 != 2 && (v9[4] || (v63 = v9[5]) != 0 && v63 != *(_QWORD *)(a2 + 24)))
      {
        if (v41)
        {
          v55 = *(unsigned __int8 **)&v41[-8 * *((unsigned int *)v41 + 2)];
          v56 = *((unsigned __int16 *)v41 + 1);
        }
        else
        {
          v55 = 0;
          v56 = 0;
        }
        return (_QWORD *)sub_1C600E08C((uint64_t)result, 0, v56, v55, 0, *(_DWORD *)(v43 + 1632), *(unsigned __int16 *)(v43 + 1624), a8, v9[393]);
      }
    }
  }
  return result;
}

uint64_t sub_1C600DDC4@<X0>(uint64_t result@<X0>, unsigned __int8 **a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  uint64_t ****v5;
  uint64_t ***v6;
  uint64_t v9;
  uint64_t **i;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD ***v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t j;
  _QWORD *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;

  v36 = 0;
  v5 = (uint64_t ****)(a2 + 40);
  v6 = (uint64_t ***)a2[41];
  if (v6 == (uint64_t ***)(a2 + 40))
    goto LABEL_44;
  v9 = result;
  while (2)
  {
    for (i = v6[7]; i != (uint64_t **)(v6 + 6); i = (uint64_t **)i[1])
    {
      if ((i[2][1] & 0x10) == 0 && (*((_WORD *)i + 22) & 1) == 0)
      {
        v12 = (unsigned __int8 **)(i + 7);
        v11 = (unsigned __int8 *)i[7];
        if (v11)
        {
          if (*((_DWORD *)v11 + 1))
          {
            *a4 = v11;
            result = llvm::MetadataTracking::track((uint64_t)a4, v11, 2);
            if (v36)
              result = llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
LABEL_24:
            if (!*a4)
              goto LABEL_44;
            v14 = *a2;
            v15 = ***(_QWORD ***)*a2;
            v36 = *a2;
            v16 = *(_DWORD *)(v15 + 2496);
            if (v16)
            {
              v17 = *(_QWORD *)(v15 + 2480);
              v18 = v16 - 1;
              v19 = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (_QWORD *)(v17 + 40 * v19);
              v21 = (_QWORD ***)*v20;
              if ((unsigned __int8 *)*v20 != v14)
              {
                v22 = 0;
                v23 = 1;
                while (v21 != (_QWORD ***)-4096)
                {
                  if (v22)
                    v24 = 0;
                  else
                    v24 = v21 == (_QWORD ***)-8192;
                  if (v24)
                    v22 = v20;
                  v25 = v19 + v23++;
                  v19 = v25 & v18;
                  v20 = (_QWORD *)(v17 + 40 * v19);
                  v21 = (_QWORD ***)*v20;
                  if ((unsigned __int8 *)*v20 == v14)
                    goto LABEL_35;
                }
                if (v22)
                  v34 = v22;
                else
                  v34 = v20;
LABEL_50:
                v20 = sub_1C541AB24(v15 + 2480, (uint64_t)&v36, (uint64_t *)&v36, v34);
                v35 = v36;
                v20[3] = 0;
                v20[4] = 0;
                *v20 = v35;
                v20[1] = v20 + 3;
                v20[2] = 0x100000000;
              }
LABEL_35:
              v26 = v20[1];
              if (*(_DWORD *)v26)
              {
                v27 = 16 * *((unsigned int *)v20 + 4) - 16;
                do
                {
                  v28 = *(_DWORD *)(v26 + 16);
                  v26 += 16;
                  v27 -= 16;
                }
                while (v28);
              }
              sub_1C600A274(v9, *(unsigned __int8 **)(*(_QWORD *)(v26 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(v26 + 8) + 8) + 40));
              v30 = *a4;
              do
              {
                v31 = v30;
                v32 = *((unsigned int *)v30 + 2);
                if ((_DWORD)v32 != 2)
                  break;
                v30 = (unsigned __int8 *)*((_QWORD *)v30 - 1);
              }
              while (v30);
              for (j = *(_QWORD *)&v31[-8 * v32];
                    (*(_BYTE *)j & 0xFE) == 0x12;
              return sub_1C600E08C(*(_QWORD *)(v9 + 8), *(unsigned int *)(j + 28), 0, (unsigned __int8 *)j, 1, a3, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 272) + 8) + 1624), v29, *(_QWORD *)(v9 + 3144));
            }
            v34 = 0;
            goto LABEL_50;
          }
          if (v12 != &v36)
          {
            if (!v36)
            {
              v36 = (unsigned __int8 *)i[7];
LABEL_12:
              result = llvm::MetadataTracking::track((uint64_t)&v36, v11, 2);
              goto LABEL_13;
            }
            result = llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
            v11 = *v12;
            v36 = v11;
            if (v11)
              goto LABEL_12;
          }
        }
      }
LABEL_13:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*((_WORD *)i + 22) & 8) != 0)
          i = (uint64_t **)i[1];
      }
    }
    v6 = (uint64_t ***)v6[1];
    if (v6 != (uint64_t ***)v5)
      continue;
    break;
  }
  v13 = v36;
  *a4 = v36;
  if (v13)
  {
    result = llvm::MetadataTracking::retrack((uint64_t)&v36, v13, (uint64_t)a4);
    goto LABEL_24;
  }
LABEL_44:
  *a4 = 0;
  return result;
}

uint64_t sub_1C600E08C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4)
  {
    v13 = *a4;
    v14 = a4;
    if (v13 == 15 || (v14 = *(unsigned __int8 **)&a4[-8 * *((unsigned int *)a4 + 2)]) != 0)
    {
      if (*(_QWORD *)&v14[-8 * *((unsigned int *)v14 + 2)])
      {
        if (!(_DWORD)a2)
          goto LABEL_13;
      }
      else if (!(_DWORD)a2)
      {
        goto LABEL_13;
      }
      if (a7 < 4 || v13 != 19)
      {
LABEL_13:
        v15 = 0;
        v17 = *(_QWORD *)(a9 + 8 * a6);
        if (v13 == 15)
        {
LABEL_15:
          v16 = sub_1C6002F14(v17, (uint64_t)a4);
          return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 704))(*(_QWORD *)(a1 + 272), v16, a2, a3, a5, 0, v15);
        }
LABEL_14:
        a4 = *(unsigned __int8 **)&a4[-8 * *((unsigned int *)a4 + 2)];
        goto LABEL_15;
      }
    }
    else
    {
      v15 = 0;
      if (!(_DWORD)a2 || a7 < 4 || v13 != 19)
        goto LABEL_12;
    }
    v15 = *((unsigned int *)a4 + 6);
LABEL_12:
    v17 = *(_QWORD *)(a9 + 8 * a6);
    goto LABEL_14;
  }
  v15 = 0;
  v16 = 1;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272)
                                                                                                + 704))(*(_QWORD *)(a1 + 272), v16, a2, a3, a5, 0, v15);
}

unsigned __int8 **sub_1C600E1C4(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned __int8 **result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  unsigned __int8 **v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;

  *(_QWORD *)(a1 + 2960) = a2;
  v4 = *a2;
  v5 = ***(_QWORD ***)*a2;
  v29 = *a2;
  v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 2480);
    v8 = v6 - 1;
    v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
    result = (unsigned __int8 **)(v7 + 40 * v9);
    v11 = *result;
    if (*result == v4)
      goto LABEL_3;
    v23 = 0;
    v24 = 1;
    while (v11 != (unsigned __int8 *)-4096)
    {
      if (v23)
        v25 = 0;
      else
        v25 = v11 == (unsigned __int8 *)-8192;
      if (v25)
        v23 = result;
      v26 = v9 + v24++;
      v9 = v26 & v8;
      result = (unsigned __int8 **)(v7 + 40 * v9);
      v11 = *result;
      if (*result == v4)
        goto LABEL_3;
    }
    if (v23)
      v27 = v23;
    else
      v27 = result;
  }
  else
  {
    v27 = 0;
  }
  result = (unsigned __int8 **)sub_1C541AB24(v5 + 2480, (uint64_t)&v29, (uint64_t *)&v29, v27);
  v28 = v29;
  result[3] = 0;
  result[4] = 0;
  *result = v28;
  result[1] = (unsigned __int8 *)(result + 3);
  result[2] = (unsigned __int8 *)0x100000000;
LABEL_3:
  v12 = result[1];
  if (*(_DWORD *)v12)
  {
    v13 = 16 * *((unsigned int *)result + 4) - 16;
    do
    {
      v14 = *((_DWORD *)v12 + 4);
      v12 += 16;
      v13 -= 16;
    }
    while (v14);
  }
  v15 = *(_QWORD *)(*((_QWORD *)v12 + 1) - 8 * *(unsigned int *)(*((_QWORD *)v12 + 1) + 8) + 40);
  if (*(_DWORD *)(v15 + 36))
  {
    v16 = sub_1C600A274(a1, (unsigned __int8 *)v15);
    v17 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 272);
    v18 = v17[1];
    v19 = (*(uint64_t (**)(_QWORD *))(*v17 + 96))(v17);
    v20 = *(_DWORD *)(v16 + 312);
    if (v19)
      v20 = 0;
    *(_DWORD *)(v18 + 1632) = v20;
    result = (unsigned __int8 **)sub_1C600DDC4(a1, a2, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1632), &v29);
    v21 = (unsigned __int8 **)(a1 + 48);
    if (&v29 == v21)
    {
      if (v29)
        return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
    }
    else
    {
      if (*v21)
        result = (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)v21, *v21);
      v22 = v29;
      *v21 = v29;
      if (v22)
        return (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)&v29, v22, (uint64_t)v21);
    }
  }
  return result;
}

double sub_1C600E3A0(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 2968);
  if (v2)
    sub_1C600C60C(a1, v2);
  result = 0.0;
  *(_OWORD *)(a1 + 2960) = 0u;
  return result;
}

uint64_t sub_1C600E3D8(_QWORD *a1, void **a2)
{
  uint64_t ***v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t ****v10;
  uint64_t ***v11;
  uint64_t ****v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  const llvm::DILocation **v28;
  uint64_t v29;
  _QWORD *LexicalScope;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t *v38;
  int8x8_t v39;
  int8x8_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  int8x8_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v56;
  int8x8_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BOOL4 v74;
  int8x8_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  int8x8_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  BOOL v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  char *v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  BOOL v128;
  uint64_t v129;
  int8x8_t v130;
  uint64_t v131;
  unsigned int v132;
  BOOL v133;
  uint64_t v134;
  int8x16_t *v135;
  char **v136;
  int v137;
  char *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int8x8_t v152;
  uint64_t v153;
  unsigned int v154;
  _QWORD *v156;
  uint64_t *v157;
  unint64_t v158;
  int8x8_t v159;
  void **v160;
  uint64_t v161;
  __int128 v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  llvm::MachineBasicBlock *v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  _OWORD *v202;
  __int128 v203;
  char v204;
  uint64_t v205;
  void **v207;
  unint64_t v208;
  BOOL v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  int8x8_t v213;
  int8x8_t i;
  uint64_t v215;
  unsigned __int8 *v216;
  unint64_t j;
  int8x8_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint8x8_t v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *k;
  unint64_t v228;
  uint64_t v230;
  int8x8_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint8x8_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t *v242;
  unsigned __int8 *v243;
  int v244;
  int8x8_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint8x8_t v250;
  uint64_t v251;
  int8x8_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint8x8_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *m;
  unint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  int8x8_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t *v272;
  llvm::LexicalScopes *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  unint64_t v280;
  _QWORD *AbstractScope;
  unsigned __int8 *v282;
  BOOL v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  int v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  void **v293;
  int v294;
  uint64_t v295;
  void **v296;
  uint64_t v297;
  _QWORD *v298;
  unint64_t n;
  unsigned __int16 *v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int v303;
  __int16 v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t ***v308;
  BOOL v309;
  uint64_t v310;
  int v311;
  unsigned int v312;
  uint64_t v313;
  int v314;
  unsigned int v315;
  _QWORD *v316;
  _QWORD ***v317;
  _QWORD *v318;
  int v319;
  BOOL v320;
  unsigned int v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  int v330;
  unsigned int v331;
  uint64_t ****v332;
  uint64_t ***v333;
  uint64_t ****v334;
  int v335;
  BOOL v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  unint64_t v341;
  _QWORD *v342;
  void *v343;
  uint64_t v344;
  _QWORD *v345;
  _QWORD ***v346;
  uint64_t v347;
  uint64_t v348;
  int *v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  int *v357;
  uint64_t v358;
  _QWORD *ii;
  _QWORD *v361;
  int **v362;
  unsigned int *v363;
  unint64_t v364;
  int v365;
  uint64_t ****v366;
  uint64_t ***v367;
  unsigned int v368;
  unsigned int v369;
  uint64_t ****v370;
  uint64_t ***v371;
  int8x8_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  int8x8_t *v378;
  uint64_t v379;
  int v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  unint64_t v387;
  unint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  _QWORD *v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void **v401;
  int8x8_t v402;
  int8x8_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned __int8 *v407;
  uint64_t *v408;
  int8x8_t *v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  llvm::MDNode *Impl;
  uint64_t v420;
  int v421;
  uint64_t v422;
  char v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  _QWORD ***v427;
  llvm::MDNode *v428;
  _QWORD *v429;
  int8x8_t *v430;
  _QWORD *v431;
  uint64_t v432[2];
  int v433;
  _QWORD v434[5];
  __int16 v435;
  __int128 v436;
  unint64_t EndSymbol;
  uint64_t v438;
  uint64_t v439;
  int8x16_t v440;
  char v441;
  __int128 v442;
  uint64_t v443;
  _QWORD v444[6];
  char v445;
  void *v446;
  uint64_t v447;
  _QWORD v448[112];
  void *v449;
  void *v450;
  uint64_t v451;
  _QWORD v452[6];
  char v453;
  __int128 v454;
  uint64_t v455;
  void *v456[2];
  _QWORD v457[5];
  unsigned int v458;
  __int16 v459;
  __int16 v460;
  void **v461;
  void **v462;
  char v463;
  uint64_t v464;

  v464 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t ***)*a2;
  if ((*((_BYTE *)*a2 + 23) & 0x20) == 0)
    goto LABEL_17;
  v5 = ***v4;
  v446 = *a2;
  v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 2480);
    v8 = v6 - 1;
    v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
    v10 = (uint64_t ****)(v7 + 40 * v9);
    v11 = *v10;
    if (*v10 == v4)
      goto LABEL_12;
    v12 = 0;
    v13 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (uint64_t ***)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (uint64_t ****)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == v4)
        goto LABEL_12;
    }
    if (v12)
      v370 = v12;
    else
      v370 = v10;
  }
  else
  {
    v370 = 0;
  }
  v10 = (uint64_t ****)sub_1C541AB24(v5 + 2480, (uint64_t)&v446, (uint64_t *)&v446, v370);
  v371 = (uint64_t ***)v446;
  v10[3] = 0;
  v10[4] = 0;
  *v10 = v371;
  v10[1] = (uint64_t ***)(v10 + 3);
  v10[2] = (uint64_t ***)0x100000000;
LABEL_12:
  v16 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v16)
  {
    v17 = v10[1] + 1;
    v18 = 16 * v16;
    v19 = 0;
    while (*((_DWORD *)v17 - 2))
    {
      v17 += 2;
      v18 -= 16;
      if (!v18)
        goto LABEL_18;
    }
    v19 = *v17;
    goto LABEL_18;
  }
LABEL_17:
  v19 = 0;
LABEL_18:
  v20 = a1[1];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 272) + 8) + 1632) = 0;
  v404 = a1[30];
  result = sub_1C600ACA8(a1 + 67, *(_QWORD *)(v19 - 8 * *(unsigned int *)(v19 + 8) + 40));
  v431 = (_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)(result + 72) + 36) == 3)
  {
    a1[4] = 0;
    a1[370] = 0;
    return result;
  }
  v405 = v19;
  v401 = a2;
  v430 = (int8x8_t *)a1;
  v432[0] = 0;
  v432[1] = 0;
  v433 = 0;
  v446 = (void *)1;
  v22 = 8;
  v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v446 + v22) = v23;
    v22 += 24;
  }
  while (v22 != 104);
  v24 = *(_QWORD *)(v20 + 280);
  v25 = *(unsigned int *)(v24 + 776);
  v26 = (_QWORD *)result;
  if ((_DWORD)v25)
  {
    v27 = 32 * v25;
    v28 = (const llvm::DILocation **)(*(_QWORD *)(v24 + 768) + 24);
    do
    {
      if (*(v28 - 3))
      {
        v29 = *((_DWORD *)*v28 + 2) == 2 ? *((_QWORD *)*v28 - 1) : 0;
        *(_QWORD *)&v442 = *(v28 - 3);
        *((_QWORD *)&v442 + 1) = v29;
        sub_1C6018464((uint64_t)&v454, (uint64_t)v432, &v442);
        LexicalScope = llvm::LexicalScopes::findLexicalScope(v430 + 8, *v28);
        if (LexicalScope)
        {
          v31 = (uint64_t)LexicalScope;
          sub_1C600D26C(v430, v26, (unsigned __int8 *)v442, LexicalScope[1]);
          v32 = v442;
          v33 = operator new();
          v34 = v442;
          *(_QWORD *)(v33 + 16) = *((_QWORD *)&v442 + 1);
          *(_QWORD *)(v33 + 24) = 0;
          *(_QWORD *)v33 = &unk_1E81AB2C8;
          *(_QWORD *)(v33 + 8) = v32;
          *(_QWORD *)(v33 + 32) = 0xFFFFFFFF00000000;
          *(_WORD *)(v33 + 40) = 0;
          *(_QWORD *)(v33 + 48) = 0;
          v35 = (uint64_t)*(v28 - 2);
          *(_QWORD *)(v33 + 72) = *((unsigned int *)v28 - 2);
          *(_QWORD *)(v33 + 56) = v33 + 72;
          *(_QWORD *)(v33 + 80) = v35;
          *(_QWORD *)(v33 + 64) = 0x100000001;
          *(_QWORD *)&v454 = 0;
          if ((sub_1C63C5624((uint64_t)&v446, v34, *((uint64_t *)&v34 + 1), &v454) & 1) != 0
            && (v36 = *(_QWORD *)(v454 + 16)) != 0)
          {
            sub_1C6009120(v36, v33);
            v26 = v431;
          }
          else
          {
            v26 = v431;
            if (sub_1C601EBEC((uint64_t)&v430[374], v31, (uint64_t *)v33))
            {
              v454 = v442;
              v455 = v33;
              sub_1C63C572C((uint64_t)&v449, (uint64_t)&v446, (uint64_t *)&v454, &v455);
              *(_QWORD *)&v454 = v33;
              sub_1C600D39C((uint64_t)&v430[82], (char *)&v454);
              v37 = v454;
              *(_QWORD *)&v454 = 0;
              if (v37)
                (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
              goto LABEL_29;
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        }
      }
LABEL_29:
      v28 += 4;
      v27 -= 32;
    }
    while (v27);
  }
  if ((v446 & 1) == 0)
    MEMORY[0x1CAA32FB4](v447, 8);
  v38 = v430;
  v40 = v430[37];
  v39 = v430[38];
  if (*(_QWORD *)&v40 == *(_QWORD *)&v39)
    goto LABEL_320;
  v41 = (uint64_t)&v430[34];
  v408 = (uint64_t *)&v430[52];
  v409 = v430 + 8;
  v403 = v430 + 148;
  v400 = (uint64_t)&v430[150];
  v402 = v430[38];
  do
  {
    v436 = *(_OWORD *)*(_QWORD *)&v40;
    v446 = 0;
    if ((sub_1C60184F0(v432, &v436, &v446) & 1) != 0 || !sub_1C5FFCCF4(v41, *(_QWORD *)&v40 + 16))
      goto LABEL_317;
    v42 = (unsigned __int8 *)v436;
    v43 = *(_QWORD *)(v436 - 8 * *(unsigned int *)(v436 + 8));
    if (*((_QWORD *)&v436 + 1))
    {
      v44 = v38[15];
      if (!*(_QWORD *)&v44)
        goto LABEL_317;
      v45 = 0x9DDFEA08EB382D69 * (((8 * v43) + 8) ^ HIDWORD(v43));
      v46 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v45 >> 47) ^ v45);
      v47 = 0x9DDFEA08EB382D69 * (((8 * DWORD2(v436)) + 8) ^ HIDWORD(*((_QWORD *)&v436 + 1)));
      v48 = 0x9DDFEA08EB382D69 * (HIDWORD(*((_QWORD *)&v436 + 1)) ^ (v47 >> 47) ^ v47);
      v49 = 0x9DDFEA08EB382D69 * (v48 ^ (v48 >> 47)) + 0x1E1D57147BCD7FB7 * (v46 ^ (v46 >> 47));
      v50 = (uint8x8_t)vcnt_s8(v44);
      v50.i16[0] = vaddlv_u8(v50);
      if (v50.u32[0] <= 1uLL)
        v51 = (*(_QWORD *)&v44 - 1) & v49;
      else
        v51 = v49 < *(_QWORD *)&v44 ? v49 : v49 % *(_QWORD *)&v44;
      v52 = *(_QWORD **)(*(_QWORD *)&v38[14] + 8 * v51);
      if (!v52)
        goto LABEL_317;
      v53 = (_QWORD *)*v52;
      if (!v53)
        goto LABEL_317;
      while (1)
      {
        v54 = v53[1];
        if (v54 == v49)
        {
          if (v53[2] == v43 && v53[3] == *((_QWORD *)&v436 + 1))
          {
            v56 = (uint64_t)(v53 + 4);
            goto LABEL_83;
          }
        }
        else
        {
          if (v50.u32[0] <= 1uLL)
          {
            v54 &= *(_QWORD *)&v44 - 1;
          }
          else if (v54 >= *(_QWORD *)&v44)
          {
            v54 %= *(_QWORD *)&v44;
          }
          if (v54 != v51)
            goto LABEL_317;
        }
        v53 = (_QWORD *)*v53;
        if (!v53)
          goto LABEL_317;
      }
    }
    v57 = v38[10];
    if (!*(_QWORD *)&v57)
      goto LABEL_317;
    v58 = 0x9DDFEA08EB382D69 * (((8 * v43) + 8) ^ HIDWORD(v43));
    v59 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v58 >> 47) ^ v58);
    v60 = 0x9DDFEA08EB382D69 * (v59 ^ (v59 >> 47));
    v61 = (uint8x8_t)vcnt_s8(v57);
    v61.i16[0] = vaddlv_u8(v61);
    if (v61.u32[0] > 1uLL)
      v62 = v60 < *(_QWORD *)&v57 ? v60 : v60 % *(_QWORD *)&v57;
    else
      v62 = (*(_QWORD *)&v57 - 1) & v60;
    v63 = *(_QWORD **)(*(_QWORD *)&v38[9] + 8 * v62);
    if (!v63)
      goto LABEL_317;
    v64 = (_QWORD *)*v63;
    if (!v64)
      goto LABEL_317;
    while (1)
    {
      v65 = v64[1];
      if (v65 == v60)
        break;
      if (v61.u32[0] <= 1uLL)
      {
        v65 &= *(_QWORD *)&v57 - 1;
      }
      else if (v65 >= *(_QWORD *)&v57)
      {
        v65 %= *(_QWORD *)&v57;
      }
      if (v65 != v62)
        goto LABEL_317;
LABEL_79:
      v64 = (_QWORD *)*v64;
      if (!v64)
        goto LABEL_317;
    }
    if (v64[2] != v43)
      goto LABEL_79;
    v56 = (uint64_t)(v64 + 3);
LABEL_83:
    sub_1C6018464((uint64_t)&v446, (uint64_t)v432, &v436);
    v66 = sub_1C600D724(v38, v26, v56, v42, *((uint64_t *)&v436 + 1), 0);
    v67 = v66;
    v68 = *(_QWORD **)(*(_QWORD *)&v40 + 16);
    v69 = *v68 & 0xFFFFFFFFFFFFFFF8;
    v70 = *(_DWORD *)(*(_QWORD *)&v40 + 24);
    if (v70 == 1)
    {
      v72 = v66;
      v73 = 0;
      goto LABEL_88;
    }
    if (v70 == 2)
    {
      v71 = v68[2];
      if ((v71 & 4) != 0)
      {
        v72 = v66;
        v73 = v71 & 0xFFFFFFFFFFFFFFF8;
LABEL_88:
        v74 = sub_1C600D4B0(v409, v69, v73, v408);
        v67 = v72;
        if (v74)
        {
          sub_1C6008CB0(v72, v69);
          goto LABEL_317;
        }
      }
    }
    if (!v38[441].i8[6])
      goto LABEL_317;
    v75 = v38[1];
    v434[0] = v430 + 148;
    v434[1] = v75;
    v406 = v67;
    v434[2] = v67;
    v434[3] = v69;
    v76 = v38[149].u32[0];
    v77 = v38[163].u32[0];
    if (v76 >= v38[149].i32[1])
    {
      v446 = v26;
      v447 = 0;
      v448[0] = v77;
      v158 = v76 + 1;
      if (*(_QWORD *)v403 <= (unint64_t)&v446
        && *(_QWORD *)v403 + 24 * (unint64_t)v76 > (unint64_t)&v446)
      {
        v192 = (char *)&v446 - *(_QWORD *)v403;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v403, v400, v158, 24);
        v159 = *v403;
        v160 = (void **)&v192[*(_QWORD *)v403];
        v26 = v431;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v403, v400, v158, 24);
        v159 = *v403;
        v160 = &v446;
      }
      v161 = *(_QWORD *)&v159 + 24 * v38[149].u32[0];
      v162 = *(_OWORD *)v160;
      *(_QWORD *)(v161 + 16) = v160[2];
      *(_OWORD *)v161 = v162;
      v79 = v38[149].i32[0] + 1;
    }
    else
    {
      v78 = (_QWORD *)(*(_QWORD *)&v38[148] + 24 * v76);
      *v78 = v26;
      v78[1] = 0;
      v78[2] = v77;
      v79 = v76 + 1;
    }
    v38[149].i32[0] = v79;
    v407 = v42;
    v434[4] = v76;
    v435 = 0;
    v446 = v448;
    v447 = 0x800000000;
    *(_QWORD *)&v454 = &v455;
    *((_QWORD *)&v454 + 1) = 0x400000000;
    v80 = *(unsigned int *)(*(_QWORD *)&v40 + 24);
    if (!(_DWORD)v80)
    {
      v149 = 0;
      v150 = 0;
      goto LABEL_205;
    }
    v417 = 0;
    v420 = 0;
    v81 = *(_QWORD **)(*(_QWORD *)&v40 + 16);
    v429 = &v81[2 * v80];
    v423 = 1;
    v413 = (char *)v81;
    while (2)
    {
      v82 = *v81;
      v83 = v454;
      v84 = DWORD2(v454);
      if (DWORD2(v454))
      {
        v85 = 0;
        v86 = ((char *)v81 - v413) >> 4;
        v87 = v454 + 88 * DWORD2(v454);
        v88 = 88 * DWORD2(v454);
        v89 = v88 - 88;
        while (*(_QWORD *)(v454 + v85) > v86)
        {
          v85 += 88;
          v89 -= 88;
          if (v88 == v85)
            goto LABEL_107;
        }
        v87 = v454 + v85;
        if (v88 - 88 != v85)
        {
          v90 = v87 + 88;
          do
          {
            if (*(_QWORD *)v90 > v86)
            {
              *(_QWORD *)v87 = *(_QWORD *)v90;
              *(_QWORD *)(v87 + 8) = *(_QWORD *)(v90 + 8);
              sub_1C6014A70(v87 + 16, v90 + 16);
              *(_BYTE *)(v87 + 80) = *(_BYTE *)(v90 + 80);
              v87 += 88;
            }
            v90 += 88;
            v89 -= 88;
          }
          while (v89);
          v83 = v454;
          v84 = DWORD2(v454);
          v38 = v430;
        }
      }
      else
      {
        v84 = 0;
        v87 = v454;
      }
LABEL_107:
      v91 = v83 + 88 * v84;
      if (v91 != v87)
      {
        do
        {
          v92 = *(void **)(v91 - 72);
          if ((void *)(v91 - 56) != v92)
            free(v92);
          v91 -= 88;
        }
        while (v91 != v87);
        v83 = v454;
      }
      v93 = v82 & 0xFFFFFFFFFFFFFFF8;
      DWORD2(v454) = -1171354717 * ((unint64_t)(v87 - v83) >> 3);
      v94 = *v81;
      if ((*v81 & 4) != 0)
        v95 = sub_1C5FFEF04((uint64_t)v38, v82 & 0xFFFFFFFFFFFFFFF8);
      else
        v95 = sub_1C5FFEE9C((uint64_t)v38, v82 & 0xFFFFFFFFFFFFFFF8);
      v96 = v95;
      v26 = v431;
      v439 = v95;
      v97 = v81 + 2;
      if (v81 + 2 == (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v40 + 16) + 16 * *(unsigned int *)(*(_QWORD *)&v40 + 24)))
      {
        v100 = v38[1];
        LODWORD(v449) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v100 + 280) + 320) + 196)
                      - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v100 + 280) + 320) + 192)
                      + 2;
        v101 = *(_QWORD *)(sub_1C5FF137C(*(_QWORD *)&v100 + 352, (int *)&v449) + 8);
        v438 = v101;
        v102 = v417;
        if ((*v81 & 4) != 0)
          v102 = *v81 & 0xFFFFFFFFFFFFFFF8;
        v417 = v102;
        if ((*v81 & 4) == 0)
        {
LABEL_124:
          v103 = **(unsigned __int16 **)(v93 + 16);
          if ((v103 - 13) > 1)
            goto LABEL_132;
          v104 = *(_QWORD *)(v93 + 32);
          if (v103 != 14)
          {
            v106 = v104 + 32;
            goto LABEL_129;
          }
          v105 = *(unsigned int *)(v93 + 40);
          if ((_DWORD)v105 == 2)
          {
LABEL_132:
            sub_1C6008E34(v93, (uint64_t)&v449);
            v107 = v81[1];
            v440.i64[0] = v107;
            v108 = DWORD2(v454);
            if (DWORD2(v454) >= HIDWORD(v454))
            {
              sub_1C63C59B8((uint64_t)&v454, &v440, (uint64_t *)&v449);
              v112 = v420;
            }
            else
            {
              v109 = v454;
              v110 = (uint64_t *)(v454 + 88 * DWORD2(v454));
              *v110 = v107;
              v110[1] = (uint64_t)v449;
              v110[3] = 0x200000000;
              v110[2] = (uint64_t)(v110 + 4);
              v111 = (uint64_t)(v110 + 2);
              v112 = v420;
              if ((_DWORD)v451)
                sub_1C6007B78(v111, (uint64_t)&v450);
              *(_BYTE *)(v109 + 88 * v108 + 80) = v453;
              ++DWORD2(v454);
            }
            v113 = 32;
            if (**(_WORD **)(v93 + 16) != 14)
              v113 = 96;
            v114 = *(_QWORD *)(*(_QWORD *)(v93 + 32) + v113 + 16);
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v114 + 24), *(uint64_t **)(v114 + 32), &v440);
            v115 = v441 == 0;
            if (!v112)
              v112 = v93;
            v420 = v112;
            if (v450 != v452)
              free(v450);
            v423 &= v115;
            v26 = v431;
          }
          else
          {
            v106 = v104 + 32 * v105;
            v104 += 64;
LABEL_129:
            while (*(_BYTE *)v104 || *(_DWORD *)(v104 + 4))
            {
              v104 += 32;
              if (v104 == v106)
                goto LABEL_132;
            }
            v423 = 0;
          }
        }
      }
      else
      {
        v98 = *v97 & 0xFFFFFFFFFFFFFFF8;
        if ((*v97 & 4) != 0)
          v99 = sub_1C5FFEF04((uint64_t)v38, v98);
        else
          v99 = sub_1C5FFEE9C((uint64_t)v38, v98);
        v101 = v99;
        v438 = v99;
        if ((v94 & 4) == 0)
          goto LABEL_124;
      }
      if (DWORD2(v454))
        v116 = v96 == v101;
      else
        v116 = 1;
      if (!v116)
      {
        v117 = 0;
        v449 = &v451;
        v450 = (void *)0x400000000;
        v118 = 88 * DWORD2(v454);
        v119 = v454 + 8;
        v120 = v454 + 8;
        do
        {
          v121 = v449;
          v122 = (char *)v120;
          if (v117 >= HIDWORD(v450))
          {
            v126 = v117 + 1;
            v127 = (char *)v449 + 80 * v117;
            v128 = (unint64_t)v449 <= v120 && (unint64_t)v127 > v120;
            if (v128)
            {
              v129 = v119 - (_QWORD)v449;
              sub_1C63C5A8C((uint64_t)&v449, v126);
              v121 = v449;
              v122 = (char *)v449 + v129;
            }
            else
            {
              sub_1C63C5A8C((uint64_t)&v449, v126);
              v121 = v449;
              v122 = (char *)v120;
            }
          }
          v123 = (int)v450;
          v124 = &v121[80 * v450];
          *v124 = *(_QWORD *)v122;
          v124[2] = 0x200000000;
          v124[1] = v124 + 3;
          v125 = (uint64_t)(v124 + 1);
          if (*((_DWORD *)v122 + 4))
            sub_1C6007B78(v125, (uint64_t)(v122 + 8));
          v121[80 * v123 + 72] = v122[72];
          v117 = (_DWORD)v450 + 1;
          LODWORD(v450) = (_DWORD)v450 + 1;
          v120 += 88;
          v119 += 88;
          v118 -= 88;
        }
        while (v118);
        v130 = v430[1];
        v131 = *(_QWORD *)(*(_QWORD *)&v130 + 280);
        v132 = *(_DWORD *)(v131 + 640);
        v133 = v132 > 3 || v132 == 2;
        if (v133
          || v439 != *(_QWORD *)(*(_QWORD *)&v130 + 520)
          || (v134 = *(_QWORD *)(v131 + 328), *(_QWORD *)(*(_QWORD *)(v93 + 24) + 192) == *(_QWORD *)(v134 + 192)))
        {
          v135 = (int8x16_t *)&v439;
LABEL_166:
          sub_1C600D420((uint64_t)&v446, v135->i64, &v438, (uint64_t)&v449);
        }
        else
        {
          v440.i64[0] = v439;
          v148 = v131 + 320;
          while (v134 != v148)
          {
            if (*(_BYTE *)(v134 + 200) && v134 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v430[1] + 280) + 328))
              v440.i64[0] = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)v134);
            if (*(_QWORD *)(v134 + 192) == *(_QWORD *)(*(_QWORD *)(v93 + 24) + 192))
            {
              v135 = &v440;
              goto LABEL_166;
            }
            if (*(_BYTE *)(v134 + 201))
            {
              EndSymbol = llvm::MachineBasicBlock::getEndSymbol((llvm::MachineBasicBlock *)v134);
              sub_1C600D420((uint64_t)&v446, v440.i64, (uint64_t *)&EndSymbol, (uint64_t)&v449);
            }
            v134 = *(_QWORD *)(v134 + 8);
          }
        }
        v136 = (char **)v446;
        v137 = v447;
        v138 = (char *)v446 + 112 * v447;
        if (v138 - 112 != v446 && *((_QWORD *)v138 - 27) == *((_QWORD *)v138 - 14))
        {
          v139 = *((_DWORD *)v138 - 50);
          if (v139 == *((_DWORD *)v138 - 22))
          {
            if (v139)
            {
              v140 = *((_QWORD *)v138 - 26);
              v141 = v140 + 80 * v139;
              v142 = *((_QWORD *)v138 - 12);
              while (1)
              {
                v143 = *(_DWORD *)(v140 + 16);
                if (v143 != *(_DWORD *)(v142 + 16))
                  break;
                if (v143)
                {
                  v144 = **(unsigned int **)(v140 + 8);
                  if ((_DWORD)v144 == **(_DWORD **)(v142 + 8))
                    __asm { BR              X0 }
                  break;
                }
                if (*(_QWORD *)v140 != *(_QWORD *)v142
                  || *(unsigned __int8 *)(v140 + 72) != *(unsigned __int8 *)(v142 + 72))
                {
                  break;
                }
                v140 += 80;
                v142 += 80;
                if (v140 == v141)
                  goto LABEL_179;
              }
            }
            else
            {
LABEL_179:
              *((_QWORD *)v138 - 27) = *((_QWORD *)v138 - 13);
              LODWORD(v447) = v137 - 1;
              sub_1C6018D18(&v136[14 * (v137 - 1) + 2]);
            }
          }
        }
        v145 = (uint64_t *)v449;
        if ((_DWORD)v450)
        {
          v146 = 10 * v450;
          do
          {
            v147 = (char *)v145[v146 - 9];
            if (&v145[v146 - 7] != (uint64_t *)v147)
              free(v147);
            v146 -= 10;
          }
          while (v146 * 8);
          v145 = (uint64_t *)v449;
        }
        v26 = v431;
        if (v145 != &v451)
          free(v145);
      }
      v81 = v97;
      v38 = v430;
      if (v97 != v429)
        continue;
      break;
    }
    v150 = v417;
    v149 = v420;
    if ((v423 & 1) == 0)
      goto LABEL_250;
LABEL_205:
    if (!sub_1C600D4B0(v409, v149, v150, v408))
      goto LABEL_250;
    if ((_DWORD)v447 == 1)
    {
      v151 = 1;
    }
    else
    {
      v152 = v38[1];
      v153 = *(_QWORD *)(*(_QWORD *)&v152 + 280);
      v154 = *(_DWORD *)(v153 + 640);
      if (v154 <= 3 && v154 != 2)
      {
        v156 = v446;
        if (*(_QWORD *)v446 == *(_QWORD *)(*(_QWORD *)&v152 + 520))
          v157 = (uint64_t *)(v153 + 328);
        else
          v157 = (uint64_t *)((**(_QWORD **)(*(_QWORD *)&v40 + 16) & 0xFFFFFFFFFFFFFFF8) + 24);
        v163 = (char *)v446 + 112;
        v164 = *v157;
        while (1)
        {
          v165 = v163;
          if (!*(_BYTE *)(v164 + 201))
          {
            do
            {
              v166 = *(_QWORD *)(v164 + 32);
              v164 = *(_QWORD *)(v164 + 8);
              if (v164 == v166 + 320)
                v167 = 0;
              else
                v167 = v164;
            }
            while (!*(_BYTE *)(v167 + 201));
          }
          v168 = *(_QWORD *)(v164 + 8);
          v169 = v168 == *(_QWORD *)(v164 + 32) + 320 || v168 == 0;
          if (v169
            || (v170 = v156[1], v170 != llvm::MachineBasicBlock::getEndSymbol((llvm::MachineBasicBlock *)v164))
            || (*(_QWORD *)(v164 + 8) != *(_QWORD *)(v164 + 32) + 320
              ? (v172 = *(llvm::MachineBasicBlock **)(v164 + 8))
              : (v172 = 0),
                v171 = v156[14],
                v171 != llvm::MachineBasicBlock::getSymbol(v172)))
          {
            v151 = 0;
            v26 = v431;
            goto LABEL_251;
          }
          v173 = *((_DWORD *)v156 + 6);
          v26 = v431;
          if (v173 != *((_DWORD *)v156 + 34))
            goto LABEL_250;
          if (v173)
            break;
LABEL_245:
          if (*(_QWORD *)(v164 + 8) == *(_QWORD *)(v164 + 32) + 320)
            v164 = 0;
          else
            v164 = *(_QWORD *)(v164 + 8);
          v163 = v165 + 112;
          v151 = 1;
          v156 = v165;
          if (v165 + 112 == (char *)v446 + 112 * v447)
            goto LABEL_251;
        }
        v174 = v156[2];
        v175 = v174 + 80 * v173;
        v176 = v156[16];
        while (1)
        {
          v177 = *(_DWORD *)(v174 + 16);
          if (v177 != *(_DWORD *)(v176 + 16))
            break;
          if (v177)
          {
            v178 = **(unsigned int **)(v174 + 8);
            if ((_DWORD)v178 == **(_DWORD **)(v176 + 8))
              __asm { BR              X15 }
            break;
          }
          if (*(_QWORD *)v174 != *(_QWORD *)v176 || *(unsigned __int8 *)(v174 + 72) != *(unsigned __int8 *)(v176 + 72))
            break;
          v174 += 80;
          v176 += 80;
          if (v174 == v175)
            goto LABEL_245;
        }
      }
LABEL_250:
      v151 = 0;
    }
LABEL_251:
    v179 = (uint64_t *)v454;
    if (DWORD2(v454))
    {
      v180 = 11 * DWORD2(v454);
      do
      {
        v181 = (uint64_t *)v179[v180 - 9];
        if (&v179[v180 - 7] != v181)
          free(v181);
        v180 -= 11;
      }
      while (v180 * 8);
      v179 = (uint64_t *)v454;
      v26 = v431;
    }
    if (v179 != &v455)
    {
      free(v179);
      if (v151)
        goto LABEL_259;
LABEL_283:
      if (**(_BYTE **)&v407[-8 * *((unsigned int *)v407 + 2) + 24] == 11)
        v193 = *(_QWORD *)&v407[-8 * *((unsigned int *)v407 + 2) + 24];
      else
        v193 = 0;
      v190 = (char *)v446;
      if (!(_DWORD)v447)
        goto LABEL_314;
      v194 = (char *)v446 + 112 * v447;
      while (1)
      {
        v195 = (uint64_t)v430[1];
        v196 = v434[0];
        v197 = v434[0] + 112;
        v198 = *(_QWORD *)(v434[0] + 112);
        v454 = *(_OWORD *)v190;
        v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v196 + 1440) - *(_QWORD *)(v196 + 1432)) >> 3);
        v455 = *(_QWORD *)(v434[0] + 1160);
        v456[0] = (void *)v199;
        v200 = *(unsigned int *)(v434[0] + 120);
        if (v200 >= *(_DWORD *)(v434[0] + 124))
        {
          v208 = v200 + 1;
          v209 = v198 + 32 * v200 > (unint64_t)&v454;
          if (v198 <= (unint64_t)&v454 && v209)
          {
            v210 = (char *)&v454 - v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v197, v434[0] + 128, v208, 32);
            v198 = *(_QWORD *)(v196 + 112);
            v201 = &v210[v198];
            v26 = v431;
            goto LABEL_290;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(v197, v434[0] + 128, v208, 32);
          v198 = *(_QWORD *)(v196 + 112);
        }
        v201 = (char *)&v454;
LABEL_290:
        v202 = (_OWORD *)(v198 + 32 * *(unsigned int *)(v196 + 120));
        v203 = *((_OWORD *)v201 + 1);
        *v202 = *(_OWORD *)v201;
        v202[1] = v203;
        ++*(_DWORD *)(v196 + 120);
        v204 = *(_BYTE *)(v196 + 1464);
        v449 = &off_1E81AB850;
        v450 = (void *)(v196 + 1152);
        v451 = v196 + 1432;
        LOBYTE(v452[0]) = v204;
        LOBYTE(v202) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v195 + 272) + 8) + 1624);
        BYTE8(v454) = 0;
        v455 = (uint64_t)v26;
        v456[0] = v457;
        v456[1] = (void *)0x200000000;
        v457[4] = 0;
        v458 = 0;
        v459 = (v202 & 0xF) << 9;
        v460 = 0;
        *(_QWORD *)&v454 = &off_1E81AB410;
        v461 = 0;
        v462 = &v449;
        v463 = 0;
        v205 = *((_QWORD *)v190 + 2);
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)v205 + 24), *(uint64_t **)(*(_QWORD *)v205 + 32), &v440);
        if (v441)
        {
          v211 = *((unsigned int *)v190 + 6);
          if ((_DWORD)v211)
          {
            v212 = 80 * v211;
            do
            {
              sub_1C6010FA4(v195, v193, v205, (uint64_t)&v454);
              v205 += 80;
              v212 -= 80;
            }
            while (v212);
          }
        }
        else
        {
          sub_1C6010FA4(v195, v193, v205, (uint64_t)&v454);
        }
        if (v458 >= 0x10000 && (unsigned __int16)v458 != 0)
          sub_1C601D3D4((void (***)(void))&v454, (unsigned __int16)v458, HIWORD(v458));
        if (HIBYTE(v460))
        {
          LOBYTE(v435) = v460;
          if (!HIBYTE(v435))
            HIBYTE(v435) = 1;
        }
        v207 = v461;
        v461 = 0;
        if (v207)
          sub_1C6016C44(v207);
        *(_QWORD *)&v454 = &unk_1E81AB308;
        v26 = v431;
        if (v456[0] != v457)
          free(v456[0]);
        sub_1C5FFFE00(v196);
        v190 += 112;
        if (v190 == v194)
          goto LABEL_274;
      }
    }
    if (!v151)
      goto LABEL_283;
LABEL_259:
    v182 = *((_QWORD *)v446 + 2);
    *(_QWORD *)&v442 = *(_QWORD *)v182;
    *((_QWORD *)&v442 + 1) = v444;
    v443 = 0x200000000;
    if (*(_DWORD *)(v182 + 16))
      sub_1C6007B78((uint64_t)&v442 + 8, v182 + 8);
    v445 = *(_BYTE *)(v182 + 72);
    v183 = operator new();
    *(_QWORD *)v183 = v442;
    *(_QWORD *)(v183 + 8) = v183 + 24;
    *(_QWORD *)(v183 + 16) = 0x200000000;
    if ((_DWORD)v443)
      sub_1C6007B78(v183 + 8, (uint64_t)&v442 + 8);
    *(_BYTE *)(v183 + 72) = v445;
    v184 = v406;
    v185 = *(_QWORD *)(v406 + 48);
    *(_QWORD *)(v406 + 48) = v183;
    v26 = v431;
    if (v185)
    {
      v186 = *(void **)(v185 + 8);
      if (v186 != (void *)(v185 + 24))
        free(v186);
      MEMORY[0x1CAA32FC0](v185, 0x10E0C400FD40FC7);
      v184 = v406;
      v183 = *(_QWORD *)(v406 + 48);
    }
    v187 = *(_QWORD *)v183;
    if (v187 && ((*(_QWORD *)(v187 + 32) - *(_QWORD *)(v187 + 24)) & 0x7FFFFFFF8) != 0)
    {
      v188 = *(unsigned int *)(v184 + 64);
      if (v188 >= *(unsigned int *)(v184 + 68))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v184 + 56, v184 + 72, v188 + 1, 16);
        v184 = v406;
        v188 = *(unsigned int *)(v406 + 64);
      }
      v189 = (_QWORD *)(*(_QWORD *)(v184 + 56) + 16 * v188);
      *v189 = 0;
      v189[1] = v187;
      ++*(_DWORD *)(v184 + 64);
    }
    if (*((_QWORD **)&v442 + 1) != v444)
      free(*((void **)&v442 + 1));
LABEL_274:
    v190 = (char *)v446;
    if ((_DWORD)v447)
    {
      v191 = 112 * v447;
      v38 = v430;
      do
      {
        sub_1C6018D18((char **)&v190[v191 - 96]);
        v191 -= 112;
      }
      while (v191);
      v190 = (char *)v446;
      v26 = v431;
    }
    else
    {
      v38 = v430;
    }
LABEL_314:
    if (v190 != (char *)v448)
      free(v190);
    sub_1C5FFFEDC((uint64_t)v434);
    v41 = (uint64_t)&v430[34];
    v39 = v402;
LABEL_317:
    *(_QWORD *)&v40 += 96;
  }
  while (*(_QWORD *)&v40 != *(_QWORD *)&v39);
LABEL_320:
  v213 = v38[43];
  for (i = v38[44]; *(_QWORD *)&v213 != *(_QWORD *)&i; *(_QWORD *)&v213 += 24)
  {
    v454 = *(_OWORD *)*(_QWORD *)&v213;
    v215 = *(_QWORD *)(*(_QWORD *)&v213 + 16);
    if (!v215)
      continue;
    v216 = (unsigned __int8 *)v454;
    for (j = *(_QWORD *)(v454 - 8 * *(unsigned int *)(v454 + 8));
          *(_BYTE *)j == 19;
    if (!*((_QWORD *)&v454 + 1))
    {
      v231 = v38[10];
      if (!*(_QWORD *)&v231)
        continue;
      v232 = 0x9DDFEA08EB382D69 * (((8 * j) + 8) ^ HIDWORD(j));
      v233 = 0x9DDFEA08EB382D69 * (HIDWORD(j) ^ (v232 >> 47) ^ v232);
      v234 = 0x9DDFEA08EB382D69 * (v233 ^ (v233 >> 47));
      v235 = (uint8x8_t)vcnt_s8(v231);
      v235.i16[0] = vaddlv_u8(v235);
      if (v235.u32[0] > 1uLL)
        v236 = v234 < *(_QWORD *)&v231 ? v234 : v234 % *(_QWORD *)&v231;
      else
        v236 = (*(_QWORD *)&v231 - 1) & v234;
      v237 = *(_QWORD **)(*(_QWORD *)&v38[9] + 8 * v236);
      if (!v237)
        continue;
      v238 = (_QWORD *)*v237;
      if (!v238)
        continue;
      while (1)
      {
        v239 = v238[1];
        if (v239 == v234)
        {
          if (v238[2] == j)
          {
            v230 = (uint64_t)(v238 + 3);
LABEL_364:
            sub_1C6018464((uint64_t)&v446, (uint64_t)v432, &v454);
            v240 = sub_1C5FFEE9C((uint64_t)v38, v215);
            sub_1C600D724(v38, v26, v230, v216, *((uint64_t *)&v454 + 1), v240);
            goto LABEL_365;
          }
        }
        else
        {
          if (v235.u32[0] <= 1uLL)
          {
            v239 &= *(_QWORD *)&v231 - 1;
          }
          else if (v239 >= *(_QWORD *)&v231)
          {
            v239 %= *(_QWORD *)&v231;
          }
          if (v239 != v236)
            goto LABEL_365;
        }
        v238 = (_QWORD *)*v238;
        if (!v238)
          goto LABEL_365;
      }
    }
    v218 = v38[15];
    if (v218)
    {
      v219 = 0x9DDFEA08EB382D69 * (((8 * j) + 8) ^ HIDWORD(j));
      v220 = 0x9DDFEA08EB382D69 * (HIDWORD(j) ^ (v219 >> 47) ^ v219);
      v221 = 0x9DDFEA08EB382D69 * (((8 * DWORD2(v454)) + 8) ^ HIDWORD(*((_QWORD *)&v454 + 1)));
      v222 = 0x9DDFEA08EB382D69 * (HIDWORD(*((_QWORD *)&v454 + 1)) ^ (v221 >> 47) ^ v221);
      v223 = 0x1E1D57147BCD7FB7 * (v220 ^ (v220 >> 47)) - 0x622015F714C7D297 * (v222 ^ (v222 >> 47));
      v224 = (uint8x8_t)vcnt_s8(v218);
      v224.i16[0] = vaddlv_u8(v224);
      if (v224.u32[0] <= 1uLL)
        v225 = (*(_QWORD *)&v218 - 1) & v223;
      else
        v225 = v223 < *(_QWORD *)&v218 ? v223 : v223 % *(_QWORD *)&v218;
      v226 = *(_QWORD **)(*(_QWORD *)&v38[14] + 8 * v225);
      if (v226)
      {
        for (k = (_QWORD *)*v226; k; k = (_QWORD *)*k)
        {
          v228 = k[1];
          if (v228 == v223)
          {
            if (k[2] == j && k[3] == *((_QWORD *)&v454 + 1))
            {
              v230 = (uint64_t)(k + 4);
              goto LABEL_364;
            }
          }
          else
          {
            if (v224.u32[0] <= 1uLL)
            {
              v228 &= *(_QWORD *)&v218 - 1;
            }
            else if (v228 >= *(_QWORD *)&v218)
            {
              v228 %= *(_QWORD *)&v218;
            }
            if (v228 != v225)
              break;
          }
        }
      }
    }
LABEL_365:
    ;
  }
  v241 = *(_QWORD *)(v405 - 8 * *(unsigned int *)(v405 + 8) + 56);
  if (v241)
    v242 = (unint64_t *)(v241 - 8 * *(unsigned int *)(v241 + 8));
  else
    v242 = 0;
  while (v242 != (unint64_t *)v241)
  {
    v243 = (unsigned __int8 *)*v242;
    v454 = *v242;
    sub_1C601A858((uint64_t)v432, &v454, (uint64_t)&v446);
    if (!LOBYTE(v448[0]))
      goto LABEL_412;
    v244 = *v243;
    if (v244 == 26)
    {
      v252 = v38[10];
      if (v252)
      {
        v253 = *(_QWORD *)&v243[-8 * *((unsigned int *)v243 + 2)];
        v254 = 0x9DDFEA08EB382D69 * (((8 * v253) + 8) ^ HIDWORD(v253));
        v255 = 0x9DDFEA08EB382D69 * (HIDWORD(v253) ^ (v254 >> 47) ^ v254);
        v256 = 0x9DDFEA08EB382D69 * (v255 ^ (v255 >> 47));
        v257 = (uint8x8_t)vcnt_s8(v252);
        v257.i16[0] = vaddlv_u8(v257);
        if (v257.u32[0] > 1uLL)
          v258 = v256 < *(_QWORD *)&v252 ? 0x9DDFEA08EB382D69 * (v255 ^ (v255 >> 47)) : v256 % *(_QWORD *)&v252;
        else
          v258 = v256 & (*(_QWORD *)&v252 - 1);
        v262 = *(_QWORD **)(*(_QWORD *)&v38[9] + 8 * v258);
        if (v262)
        {
          for (m = (_QWORD *)*v262; m; m = (_QWORD *)*m)
          {
            v263 = m[1];
            if (v263 == v256)
            {
              if (m[2] == v253)
              {
LABEL_411:
                sub_1C600D724(v38, v26, (uint64_t)(m + 3), v243, 0, 0);
                break;
              }
            }
            else
            {
              if (v257.u32[0] <= 1uLL)
              {
                v263 &= *(_QWORD *)&v252 - 1;
              }
              else if (v263 >= *(_QWORD *)&v252)
              {
                v263 %= *(_QWORD *)&v252;
              }
              if (v263 != v258)
                break;
            }
          }
        }
      }
    }
    else if (v244 == 25)
    {
      v245 = v38[10];
      if (v245)
      {
        v246 = *(_QWORD *)&v243[-8 * *((unsigned int *)v243 + 2)];
        v247 = 0x9DDFEA08EB382D69 * (((8 * v246) + 8) ^ HIDWORD(v246));
        v248 = 0x9DDFEA08EB382D69 * (HIDWORD(v246) ^ (v247 >> 47) ^ v247);
        v249 = 0x9DDFEA08EB382D69 * (v248 ^ (v248 >> 47));
        v250 = (uint8x8_t)vcnt_s8(v245);
        v250.i16[0] = vaddlv_u8(v250);
        if (v250.u32[0] > 1uLL)
          v251 = v249 < *(_QWORD *)&v245 ? 0x9DDFEA08EB382D69 * (v248 ^ (v248 >> 47)) : v249 % *(_QWORD *)&v245;
        else
          v251 = v249 & (*(_QWORD *)&v245 - 1);
        v259 = *(_QWORD **)(*(_QWORD *)&v38[9] + 8 * v251);
        if (v259)
        {
          for (m = (_QWORD *)*v259; m; m = (_QWORD *)*m)
          {
            v261 = m[1];
            if (v261 == v249)
            {
              if (m[2] == v246)
                goto LABEL_411;
            }
            else
            {
              if (v250.u32[0] <= 1uLL)
              {
                v261 &= *(_QWORD *)&v245 - 1;
              }
              else if (v261 >= *(_QWORD *)&v245)
              {
                v261 %= *(_QWORD *)&v245;
              }
              if (v261 != v251)
                break;
            }
          }
        }
      }
    }
LABEL_412:
    ++v242;
  }
  v264 = v38[1];
  v265 = (uint64_t)v26;
  v266 = *(_QWORD *)(*(_QWORD *)&v264 + 376);
  v267 = *(_QWORD *)(*(_QWORD *)&v264 + 384);
  while (v266 != v267)
  {
    sub_1C6003B48(v265, *(_QWORD *)(v266 + 8), *(_QWORD *)(v266 + 16));
    v266 += 24;
  }
  v268 = *(_QWORD *)(v265 + 72);
  v269 = (_QWORD *)v265;
  if (*(_BYTE *)(v268 + 49) || *(_DWORD *)(v268 + 36) != 2 || v38[25].i32[0] || v38[560].i8[1])
  {
    v270 = v38[25].u32[0];
    if ((_DWORD)v270)
    {
      v271 = (uint64_t *)v38[24];
      v272 = &v271[v270];
      v273 = (llvm::LexicalScopes *)&v38[8];
      do
      {
        v274 = *v271;
        v275 = *(_QWORD *)(*v271 + 8);
        v276 = *(unsigned int *)(v275 + 8);
        v277 = *(_QWORD *)(v275 - 8 * v276 + 56);
        if (v277)
          v278 = (uint64_t *)(v277 - 8 * *(unsigned int *)(v277 + 8));
        else
          v278 = 0;
        if (v278 != (uint64_t *)v277)
        {
          do
          {
            v279 = *v278;
            v454 = (unint64_t)*v278;
            sub_1C601A858((uint64_t)v432, &v454, (uint64_t)&v446);
            if (LOBYTE(v448[0]))
            {
              v280 = *(_QWORD *)(v279 - 8 * *(unsigned int *)(v279 + 8));
              if (!sub_1C6006EF0(v269, v279))
              {
                AbstractScope = llvm::LexicalScopes::getOrCreateAbstractScope(v273, v280);
                sub_1C6006F80(v269, (unsigned __int8 *)v279, (uint64_t)AbstractScope);
              }
            }
            ++v278;
          }
          while (v278 != (uint64_t *)v277);
          v275 = *(_QWORD *)(v274 + 8);
          v276 = *(unsigned int *)(v275 + 8);
        }
        v38 = v430;
        v282 = *(unsigned __int8 **)(v275 - 8 * v276 + 40);
        if (v430[443].i8[5])
          v283 = byte_1ED838588 == 0;
        else
          v283 = 0;
        if (v283)
        {
          v285 = v431;
          if (!v282[48])
            goto LABEL_438;
        }
        v284 = (_QWORD *)sub_1C600A274((uint64_t)v430, v282);
        v285 = v284;
        v286 = (_QWORD *)v284[41];
        if (!v286)
          goto LABEL_438;
        if (!byte_1ED838588)
          v284 = v431;
        sub_1C6006AB8(v284, v274);
        v287 = *(unsigned __int8 *)(v285[9] + 48);
        v285 = v286;
        if (v287)
LABEL_438:
          sub_1C6006AB8(v285, v274);
        ++v271;
        v269 = v431;
      }
      while (v271 != v272);
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v38[332], v405);
    if (v288)
    {
      v289 = v38[353].u32[0];
      if (v289 >= v38[353].i32[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38[352], (uint64_t)&v38[354], v289 + 1, 8);
        LODWORD(v289) = v38[353].i32[0];
      }
      *(_QWORD *)(*(_QWORD *)&v38[352] + 8 * v289) = v405;
      ++v38[353].i32[0];
    }
    v290 = sub_1C60064E4(v269, v405, v404);
    v291 = (_QWORD *)v269[41];
    if (v291 && v38[25].i32[0] && *(_BYTE *)(v269[9] + 48))
      sub_1C60064E4(v291, v405, v404);
    if ((*(_BYTE *)(v405 + 43) & 0x20) != 0 && (*(_DWORD *)(v405 + 44) & 8) != 0)
    {
      v292 = v269[24];
      if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v292 + 8) + 272) + 8) + 1624) == 4)
      {
        v293 = v401;
        v294 = *(_DWORD *)(v292 + 5512) == 2 ? 122 : 8471;
      }
      else
      {
        v294 = 122;
        v293 = v401;
      }
      sub_1C602072C((unint64_t)v269, v290, v294);
      v295 = (*(uint64_t (**)(void *))(*(_QWORD *)v293[2] + 104))(v293[2]);
      v296 = (void **)v293[41];
      if (v296 != v293 + 40)
      {
        v297 = v295;
        v298 = v452;
        do
        {
          for (n = (unint64_t)v296[7]; (void **)n != v296 + 6; n = *(_QWORD *)(n + 8))
          {
            v300 = *(unsigned __int16 **)(n + 16);
            v301 = *v300;
            if (v301 == 20)
              continue;
            v302 = *((_QWORD *)v300 + 1);
            if ((v302 & 0x80) == 0)
              continue;
            v128 = v301 > 0x1F;
            v303 = (1 << v301) & 0x8E000000;
            if (!v128 && v303 != 0)
              continue;
            v305 = *(_WORD *)(n + 44);
            if ((v305 & 1) != 0)
              continue;
            if ((v305 & 0xC) == 0 || (v305 & 4) != 0)
            {
              if ((v302 & 0x20000) == 0)
                goto LABEL_481;
            }
            else
            {
              v306 = n;
              if ((v302 & 0x20000) == 0)
              {
                while ((*(_WORD *)(v306 + 44) & 8) != 0)
                {
                  v306 = *(_QWORD *)(v306 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v306 + 16) + 10) & 2) != 0)
                    goto LABEL_480;
                }
                goto LABEL_481;
              }
            }
LABEL_480:
            if ((v305 & 8) == 0)
              goto LABEL_595;
LABEL_481:
            v307 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v297 + 1280))(v297, n);
            if (*(_BYTE *)v307 != 10 && (*(_BYTE *)v307 || (*(_DWORD *)(v307 + 4) - 1) > 0x3FFFFFFE))
              continue;
            if (!*(_BYTE *)v307)
            {
              if (!*(_DWORD *)(v307 + 4))
                continue;
              v421 = *(_DWORD *)(v307 + 4);
              goto LABEL_508;
            }
            v308 = *(uint64_t ****)(v307 + 16);
            if (v308)
              v309 = *((_BYTE *)v308 + 16) == 0;
            else
              v309 = 0;
            if (!v309 || (*((_BYTE *)v308 + 23) & 0x20) == 0)
              continue;
            v310 = ***v308;
            v446 = *(void **)(v307 + 16);
            v311 = *(_DWORD *)(v310 + 2496);
            v312 = v308 >> 4;
            if (!v311)
            {
              v425 = v308 >> 4;
              v342 = 0;
LABEL_537:
              v316 = sub_1C541AB24(v310 + 2480, (uint64_t)&v446, (uint64_t *)&v446, v342);
              v343 = v446;
              v316[4] = 0;
              v316[3] = 0;
              *v316 = v343;
              v316[1] = v316 + 3;
              v316[2] = 0x100000000;
              v312 = v425;
              goto LABEL_501;
            }
            v313 = *(_QWORD *)(v310 + 2480);
            v314 = v311 - 1;
            v315 = v314 & (v312 ^ (v308 >> 9));
            v316 = (_QWORD *)(v313 + 40 * v315);
            v317 = (_QWORD ***)*v316;
            if ((uint64_t ***)*v316 != v308)
            {
              v318 = 0;
              v319 = 1;
              while (v317 != (_QWORD ***)-4096)
              {
                if (v318)
                  v320 = 0;
                else
                  v320 = v317 == (_QWORD ***)-8192;
                if (v320)
                  v318 = v316;
                v321 = v315 + v319++;
                v315 = v321 & v314;
                v316 = (_QWORD *)(v313 + 40 * v315);
                v317 = (_QWORD ***)*v316;
                if ((uint64_t ***)*v316 == v308)
                  goto LABEL_501;
              }
              v425 = v308 >> 4;
              if (v318)
                v342 = v318;
              else
                v342 = v316;
              goto LABEL_537;
            }
LABEL_501:
            v322 = *((unsigned int *)v316 + 4);
            if (!(_DWORD)v322)
              continue;
            v323 = (_QWORD *)(v316[1] + 8);
            v324 = 16 * v322;
            while (*((_DWORD *)v323 - 2))
            {
              v323 += 2;
              v324 -= 16;
              if (!v324)
                goto LABEL_466;
            }
            if (!*v323)
              continue;
            if ((*((_BYTE *)v308 + 23) & 0x20) == 0)
            {
LABEL_543:
              v421 = 0;
LABEL_508:
              v418 = 0;
              goto LABEL_509;
            }
            v327 = ***v308;
            v446 = v308;
            v328 = *(_DWORD *)(v327 + 2496);
            if (v328)
            {
              v329 = *(_QWORD *)(v327 + 2480);
              v330 = v328 - 1;
              v331 = v330 & (v312 ^ (v308 >> 9));
              v332 = (uint64_t ****)(v329 + 40 * v331);
              v333 = *v332;
              if (*v332 == v308)
                goto LABEL_528;
              v334 = 0;
              v335 = 1;
              while (v333 != (uint64_t ***)-4096)
              {
                if (v334)
                  v336 = 0;
                else
                  v336 = v333 == (uint64_t ***)-8192;
                if (v336)
                  v334 = v332;
                v337 = v331 + v335++;
                v331 = v337 & v330;
                v332 = (uint64_t ****)(v329 + 40 * v331);
                v333 = *v332;
                if (*v332 == v308)
                  goto LABEL_528;
              }
              if (v334)
                v366 = v334;
              else
                v366 = v332;
            }
            else
            {
              v366 = 0;
            }
            v332 = (uint64_t ****)sub_1C541AB24(v327 + 2480, (uint64_t)&v446, (uint64_t *)&v446, v366);
            v367 = (uint64_t ***)v446;
            v332[4] = 0;
            v332[3] = 0;
            *v332 = v367;
            v332[1] = (uint64_t ***)(v332 + 3);
            v332[2] = (uint64_t ***)0x100000000;
LABEL_528:
            v338 = *((unsigned int *)v332 + 4);
            if (!(_DWORD)v338)
              goto LABEL_543;
            v339 = (uint64_t *)(v332[1] + 1);
            v340 = 16 * v338;
            while (*((_DWORD *)v339 - 2))
            {
              v421 = 0;
              v418 = 0;
              v339 += 2;
              v340 -= 16;
              if (!v340)
                goto LABEL_509;
            }
            v421 = 0;
            v418 = *v339;
LABEL_509:
            v424 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v297 + 1136))(v297, n);
            v325 = n;
            if ((*(_WORD *)(n + 44) & 4) != 0)
            {
              v325 = n;
              do
                v325 = *(_QWORD *)v325 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v325 + 44) & 4) != 0);
            }
            if (v424)
            {
              v326 = v431[24];
              if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v326 + 8) + 272) + 8) + 1624) == 4
                && *(_DWORD *)(v326 + 5512) != 2)
              {
                v414 = sub_1C5FFEF04((uint64_t)v430, v325);
              }
              else
              {
                v414 = 0;
              }
              v344 = sub_1C5FFEE9C((uint64_t)v430, v325);
              v341 = sub_1C63C18F0(v431, v290, v418, v424, v414, v344, v421);
            }
            else
            {
              v415 = sub_1C5FFEF04((uint64_t)v430, v325);
              v341 = sub_1C63C18F0(v431, v290, v418, 0, v415, 0, v421);
            }
            v422 = v341;
            if (v430[443].i8[7])
            {
              v446 = v448;
              v447 = 0x400000000;
              v412 = v298;
              v416 = *(uint64_t **)(*(_QWORD *)(n + 24) + 32);
              *(_QWORD *)&v454 = n;
              v449 = 0;
              if (sub_1C61805E8(v416 + 93, &v454, &v449))
              {
                v345 = v449;
                v346 = (_QWORD ***)v416[93];
                v347 = *((unsigned int *)v416 + 190);
              }
              else
              {
                v346 = (_QWORD ***)v416[93];
                v347 = *((unsigned int *)v416 + 190);
                v345 = &v346[4 * v347];
              }
              if (v345 != &v346[4 * v347])
              {
                v410 = *(_QWORD *)n;
                v411 = *(_QWORD *)(n + 24);
                v450 = 0;
                v449 = 0;
                LODWORD(v451) = 0;
                v298[1] = 0;
                v298[2] = 0;
                *v298 = 0;
                Impl = llvm::DIExpression::getImpl(**(_QWORD ***)*v416, 0, 0, 0, 1);
                v348 = *((unsigned int *)v345 + 4);
                if ((_DWORD)v348)
                {
                  v349 = (int *)v345[1];
                  v426 = 8 * v348;
                  do
                  {
                    v350 = *v349;
                    *(_QWORD *)&v442 = &v443;
                    LODWORD(v443) = v350;
                    v444[0] = Impl;
                    *((_QWORD *)&v442 + 1) = 0x200000001;
                    LODWORD(v454) = v350;
                    *((_QWORD *)&v454 + 1) = v456;
                    v455 = 0x200000000;
                    sub_1C614EBE4((uint64_t)&v454 + 8, (uint64_t)&v442);
                    sub_1C63C3CF4((uint64_t)&v449, (int *)&v454);
                    if (*((void ***)&v454 + 1) != v456)
                      free(*((void **)&v454 + 1));
                    if ((uint64_t *)v442 != &v443)
                      free((void *)v442);
                    v349 += 2;
                    v426 -= 8;
                  }
                  while (v426);
                }
                v351 = *(_QWORD *)(n + 32);
                v352 = *(_QWORD *)(n + 16);
                v353 = *(unsigned __int8 *)(v352 + 4);
                v354 = *(_QWORD *)(v352 + 8);
                v355 = *(unsigned int *)(n + 40);
                if ((v354 & 2) != 0)
                {
                  if ((_DWORD)v355 != v353)
                  {
                    v356 = v353;
                    do
                    {
                      v365 = *(_DWORD *)(v351 + 32 * v353);
                      if ((v365 & 0x10000FF) != 0x1000000)
                        break;
                      v356 += (v365 & 0x2000000) == 0;
                      if ((_DWORD)v355 - 1 == v353)
                        break;
                      ++v353;
                    }
                    while ((v365 & 0x2000000) == 0);
                    goto LABEL_555;
                  }
                }
                else
                {
                  v356 = v353;
LABEL_555:
                  if (v356 != (_DWORD)v355)
                  {
                    v357 = (int *)(v351 + 32 * v356 + 4);
                    v358 = 32 * v355 - 32 * v356;
                    do
                    {
                      if ((*(v357 - 1) & 0x100000FF) == 0x10000000)
                        sub_1C63C3D90((uint64_t)&v449, *v357);
                      v357 += 8;
                      v358 -= 32;
                    }
                    while (v358);
                    v354 = *(_QWORD *)(*(_QWORD *)(n + 16) + 8);
                  }
                }
                v427 = (_QWORD ***)v416[41];
                if ((*(_WORD *)(n + 44) & 0xC) != 0 && (*(_WORD *)(n + 44) & 4) == 0)
                {
                  v364 = n;
                  if ((v354 & 0x20000) == 0)
                  {
                    while ((*(_WORD *)(v364 + 44) & 8) != 0)
                    {
                      v364 = *(_QWORD *)(v364 + 8);
                      if ((*(_BYTE *)(*(_QWORD *)(v364 + 16) + 10) & 2) != 0)
                        goto LABEL_567;
                    }
                    goto LABEL_568;
                  }
LABEL_567:
                  if ((sub_1C6013954(*(_QWORD *)(n + 8), (uint64_t)&v449, (uint64_t)&v446) & 1) != 0)
                    goto LABEL_568;
                }
                else
                {
                  if ((v354 & 0x20000) != 0)
                    goto LABEL_567;
LABEL_568:
                  for (ii = (_QWORD *)(v410 & 0xFFFFFFFFFFFFFFF8);
                        (_QWORD *)(v411 + 48) != ii;
                        ii = (_QWORD *)(*ii & 0xFFFFFFFFFFFFFFF8))
                  {
                    if (!sub_1C6013954((uint64_t)ii, (uint64_t)&v449, (uint64_t)&v446))
                      goto LABEL_576;
                  }
                  if ((_QWORD ***)v411 == v427)
                  {
                    v361 = **(_QWORD ***)*v416;
                    v454 = xmmword_1C8677710;
                    v428 = llvm::DIExpression::getImpl(v361, &v454, 2, 0, 1);
                    v362 = (int **)v452[0];
                    v363 = (unsigned int *)v452[1];
                    while (v362 != (int **)v363)
                    {
                      sub_1C601400C(((unint64_t)*(unsigned int *)v362 << 32) | 1, v428, v362[1], *((unsigned int *)v362 + 4), (uint64_t)&v446);
                      v362 += 7;
                    }
                  }
                }
LABEL_576:
                sub_1C63C413C((uint64_t)&v449);
              }
              sub_1C63C1B08((unint64_t)v431, v422, (uint64_t)&v446);
              sub_1C6210BE8((char **)&v446);
              v298 = v412;
              continue;
            }
LABEL_466:
            ;
          }
          v296 = (void **)v296[1];
        }
        while (v296 != v293 + 40);
      }
    }
LABEL_595:
    v38 = v430;
    v368 = v430[417].u32[0];
    if (v430[417])
    {
      v372 = v430 + 416;
      v373 = v430[418].u32[0];
      if (v373 > 4 * v368 && v373 >= 0x41)
      {
        sub_1C601384C((uint64_t)&v430[416]);
        if (v368)
        {
          v392 = 1 << (33 - __clz(v368 - 1));
          if (v392 <= 64)
            v368 = 64;
          else
            v368 = v392;
        }
        if (v368 == v430[418].i32[0])
        {
          v38 = v430;
          v430[417] = 0;
          if (v368)
          {
            v393 = (_QWORD *)v430[416];
            v394 = 112 * v368;
            do
            {
              *v393 = -4096;
              v393 += 14;
              v394 -= 112;
            }
            while (v394);
          }
        }
        else
        {
          ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32FB4])(*v372, 8);
          if (v368)
          {
            v395 = (4 * v368 / 3 + 1) | ((unint64_t)(4 * v368 / 3 + 1) >> 1);
            v396 = v395 | (v395 >> 2) | ((v395 | (v395 >> 2)) >> 4);
            LODWORD(v396) = (((v396 | (v396 >> 8)) >> 16) | v396 | (v396 >> 8)) + 1;
            v38 = v430;
            v430[418].i32[0] = v396;
            v397 = operator new(112 * v396, (std::align_val_t)8uLL);
            v430[416] = (int8x8_t)v397;
            v430[417] = 0;
            v398 = v430[418].u32[0];
            if ((_DWORD)v398)
            {
              v399 = 112 * v398;
              do
              {
                *v397 = -4096;
                v397 += 14;
                v399 -= 112;
              }
              while (v399);
            }
          }
          else
          {
            *v372 = 0;
            v430[417] = 0;
            v430[418].i32[0] = 0;
            v38 = v430;
          }
        }
      }
      else
      {
        if ((_DWORD)v373)
        {
          v374 = *(_QWORD *)v372 + 48;
          v375 = 112 * v373;
          do
          {
            v376 = *(_QWORD *)(v374 - 48);
            if (v376 != -4096)
            {
              if (v376 != -8192)
              {
                v377 = *(void **)(v374 - 16);
                if ((void *)v374 != v377)
                  free(v377);
                sub_1C47655E8(v374 - 40, *(_QWORD **)(v374 - 32));
              }
              *(_QWORD *)(v374 - 48) = -4096;
            }
            v374 += 112;
            v375 -= 112;
          }
          while (v375);
        }
        v430[417] = 0;
      }
    }
    v369 = v38[420].u32[0];
    if (v369 || v38[420].i32[1])
    {
      v378 = v38 + 419;
      v379 = v38[421].u32[0];
      if (v379 > 4 * v369 && v379 >= 0x41)
      {
        sub_1C60137E8((uint64_t)&v38[419]);
        if (v369)
        {
          v380 = 1 << (33 - __clz(v369 - 1));
          if (v380 <= 64)
            v369 = 64;
          else
            v369 = v380;
        }
        if (v369 == v430[421].i32[0])
        {
          v38 = v430;
          v430[420] = 0;
          if (v369)
          {
            v381 = (_QWORD *)v430[419];
            v382 = 56 * v369;
            do
            {
              *v381 = -4096;
              v381 += 7;
              v382 -= 56;
            }
            while (v382);
          }
        }
        else
        {
          ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32FB4])(*v378, 8);
          if (v369)
          {
            v387 = (4 * v369 / 3 + 1) | ((unint64_t)(4 * v369 / 3 + 1) >> 1);
            v388 = v387 | (v387 >> 2) | ((v387 | (v387 >> 2)) >> 4);
            LODWORD(v388) = (((v388 | (v388 >> 8)) >> 16) | v388 | (v388 >> 8)) + 1;
            v38 = v430;
            v430[421].i32[0] = v388;
            v389 = operator new(56 * v388, (std::align_val_t)8uLL);
            v430[419] = (int8x8_t)v389;
            v430[420] = 0;
            v390 = v430[421].u32[0];
            if ((_DWORD)v390)
            {
              v391 = 56 * v390;
              do
              {
                *v389 = -4096;
                v389 += 7;
                v391 -= 56;
              }
              while (v391);
            }
          }
          else
          {
            *v378 = 0;
            v38[420] = 0;
            v38[421].i32[0] = 0;
            v38 = v430;
          }
        }
        goto LABEL_598;
      }
      if (!(_DWORD)v379)
      {
LABEL_636:
        v38 = v430;
        v430[420] = 0;
        goto LABEL_598;
      }
      v383 = *(_QWORD *)v378 + 24;
      v384 = 56 * v379;
      while (1)
      {
        v385 = *(_QWORD *)(v383 - 24);
        if (v385 == -8192)
          goto LABEL_634;
        if (v385 != -4096)
          break;
LABEL_635:
        v383 += 56;
        v384 -= 56;
        if (!v384)
          goto LABEL_636;
      }
      v386 = *(void **)(v383 - 16);
      if ((void *)v383 != v386)
        free(v386);
LABEL_634:
      *(_QWORD *)(v383 - 24) = -4096;
      goto LABEL_635;
    }
  }
LABEL_598:
  v38[4] = 0;
  v38[370] = 0;
  return MEMORY[0x1CAA32FB4](v432[0], 8);
}

uint64_t sub_1C6010C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t result;
  unint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  unint64_t *v30;
  unint64_t j;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  int i;
  void *__p[2];
  uint64_t v39;
  _QWORD v40[4];
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  _BYTE v47[46];
  __int128 v48;
  char v49;
  char v50;
  char v51;
  __int16 v52;

  v5 = *(_QWORD *)(a1 + 1296);
  v6 = (a3 - v5) >> 5;
  v7 = *(_QWORD *)(a1 + 2616);
  v8 = v6 + 1;
  v9 = *(unsigned int *)(a1 + 1304);
  if (v6 + 1 == v9)
    v10 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 2624) - v7) >> 3);
  else
    v10 = *(_QWORD *)(v5 + 32 * v8 + 24);
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD **)(a1 + 8);
  v13 = *(_BYTE *)(v12[32] + 8);
  v14 = *(_QWORD *)(v5 + 32 * v6 + 16);
  v15 = *(_QWORD *)(a1 + 2336) + v14;
  v16 = (_QWORD *)(v5 + 32 * v8 + 16);
  if (v8 == v9)
    v16 = (_QWORD *)(a1 + 2344);
  v17 = *v16 - v14;
  v18 = *(_BYTE *)(*(_QWORD *)(v12[36] + 2064) + 272) ^ 1;
  v19 = *(unsigned __int8 *)(v12[33] + 1626) | 0x100;
  *(_QWORD *)&v48 = v15;
  *((_QWORD *)&v48 + 1) = v17;
  v49 = v18;
  v50 = v13;
  v51 = v13;
  v52 = v19;
  sub_1C54ADD60((uint64_t)&v44, &v48, 0);
  result = sub_1C54ADD60((uint64_t)&v42, &v48, *((unint64_t *)&v48 + 1));
  if (v44 != v42 || v45 != v43)
  {
    v21 = 0;
    v22 = (__int128 *)(v7 + 24 * v10);
    v23 = (__int128 *)(v7 + 24 * v11);
    do
    {
      v24 = v46;
      if (v23 == v22)
      {
        HIBYTE(v39) = 0;
        LOBYTE(__p[0]) = 0;
        v23 = v22;
      }
      else
      {
        if (*((char *)v23 + 23) < 0)
        {
          sub_1C47EBC30(__p, *(void **)v23, *((_QWORD *)v23 + 1));
        }
        else
        {
          v25 = *v23;
          v39 = *((_QWORD *)v23 + 2);
          *(_OWORD *)__p = v25;
        }
        v23 = (__int128 *)((char *)v23 + 24);
      }
      v41 = 260;
      v40[0] = __p;
      (**(void (***)(uint64_t, uint64_t, _QWORD *))a2)(a2, v24, v40);
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      v26 = 0;
      ++v21;
      v27 = 1;
      do
      {
        v28 = v27;
        v29 = v47[v26];
        if (v29 == 8)
        {
          for (i = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(*(_QWORD *)(a4 + 568) + 16 * *(_QWORD *)&v47[8 * v26 + 14] + 8)); i; --i)
            v23 = (__int128 *)((char *)v23 + 24 * (v23 != v22));
        }
        else
        {
          if (v29 == 255)
            goto LABEL_33;
          v30 = &v44 + v26;
          v33 = v30[6];
          v32 = v30 + 6;
          for (j = v33; v21 < j; j = *v32)
          {
            v34 = *(unsigned __int8 *)(v15 + v21);
            if (v23 == v22)
            {
              HIBYTE(v39) = 0;
              LOBYTE(__p[0]) = 0;
              v23 = v22;
            }
            else
            {
              if (*((char *)v23 + 23) < 0)
              {
                sub_1C47EBC30(__p, *(void **)v23, *((_QWORD *)v23 + 1));
              }
              else
              {
                v35 = *v23;
                v39 = *((_QWORD *)v23 + 2);
                *(_OWORD *)__p = v35;
              }
              v23 = (__int128 *)((char *)v23 + 24);
            }
            v41 = 260;
            v40[0] = __p;
            (**(void (***)(uint64_t, uint64_t, _QWORD *))a2)(a2, v34, v40);
            if (SHIBYTE(v39) < 0)
              operator delete(__p[0]);
            ++v21;
          }
        }
        v21 = *(_QWORD *)&v47[8 * v26 + 30];
LABEL_33:
        v27 = 0;
        v26 = 1;
      }
      while ((v28 & 1) != 0);
      result = (uint64_t)sub_1C54AD0C8(&v44);
    }
    while (v44 != v42 || v45 != v43);
  }
  return result;
}

void sub_1C6010FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v14)();
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v7 = *(_QWORD *)a3;
  v23 = 0;
  v24 = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 32);
    v23 = *(uint64_t **)(v7 + 24);
    v24 = v8;
    sub_1C601E6B4(a4, v7);
    v9 = *(_QWORD **)(v7 + 24);
    if (((*(_QWORD *)(v7 + 32) - (_QWORD)v9) & 0x7FFFFFFF8) != 0 && *v9 == 4099)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 16);
      *(_QWORD *)&v18 = v16;
      sub_1C601E10C(a4, &v18, v7);
      sub_1C63C6464(a4, &v23);
      v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 280) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16));
      if (!sub_1C601D588(a4, v17, (uint64_t)&v23, HIDWORD(v16)))
        return;
      v14 = sub_1C601E828;
      v15 = &v21;
LABEL_16:
      sub_1C601E1B0(a4, &v23, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))v14, (uint64_t)v15);
      return;
    }
  }
  *(_QWORD *)&v21 = a4;
  *((_QWORD *)&v21 + 1) = &v25;
  v22 = a1;
  v10 = *(_QWORD *)(a3 + 8);
  if (!*(_BYTE *)(a3 + 72))
  {
    if (!sub_1C6011118((uint64_t *)&v21, v10, &v23))
      return;
    v14 = sub_1C601E828;
    goto LABEL_15;
  }
  v11 = *(_DWORD *)(a3 + 16);
  if (!v11)
  {
LABEL_12:
    v18 = v21;
    v19 = v22;
    v20 = a3;
    v14 = (void (*)())sub_1C601A8E4;
LABEL_15:
    v15 = &v18;
    goto LABEL_16;
  }
  v12 = v10 + 24 * v11;
  while (*(_DWORD *)v10 || HIDWORD(*(_QWORD *)(v10 + 16)) != 0)
  {
    v10 += 24;
    if (v10 == v12)
      goto LABEL_12;
  }
}

uint64_t sub_1C6011118(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  llvm::detail::DoubleAPFloat *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (***v21)(void);
  unint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::detail::DoubleAPFloat *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v6 = HIDWORD(*(_QWORD *)(a2 + 16));
      if (!*(_QWORD *)(a2 + 16))
      {
        v7 = (unsigned int *)(*a1 + 80);
        v8 = (*v7 | ((unint64_t)*(unsigned __int16 *)(*a1 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x200000000;
        *v7 = *v7;
        *((_WORD *)v7 + 2) = WORD2(v8);
      }
      v9 = *(_QWORD *)(*(_QWORD *)(a1[2] + 280) + 16);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9);
      v11 = sub_1C601D588(*a1, v10, (uint64_t)a3, v6);
      result = 0;
      if ((v11 & 1) != 0)
        return 1;
      return result;
    case 1:
      v17 = *(_QWORD *)a1[1];
      if (v17 && (*(_DWORD *)(v17 + 52) - 5) <= 1)
      {
        v18 = *a1;
        v19 = *(_QWORD *)(a2 + 8);
        v20 = (*(unsigned int *)(v18 + 80) | ((unint64_t)*(unsigned __int16 *)(v18 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
        *(_DWORD *)(v18 + 80) = *(_DWORD *)(v18 + 80);
        *(_WORD *)(v18 + 84) = WORD2(v20);
        (**(void (***)(uint64_t, uint64_t, _QWORD))v18)(v18, 17, 0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 8))(v18, v19);
      }
      else
      {
        v21 = (void (***)(void))*a1;
        v22 = *(_QWORD *)(a2 + 8);
        v23 = (unsigned int *)(*a1 + 80);
        v24 = (*v23 | ((unint64_t)*(unsigned __int16 *)(*a1 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
        *v23 = *v23;
        *((_WORD *)v23 + 2) = WORD2(v24);
        sub_1C601D2A8(v21, v22);
      }
      return 1;
    case 2:
      v13 = a1[2];
      if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v13 + 272) + 8) + 1624) >= 4u
        && *(_DWORD *)(*(_QWORD *)(v13 + 576) + 5512) != 3
        && *a3 == a3[1])
      {
        sub_1C63C61B0(*a1, *(_QWORD *)(a2 + 8) + 24, v13);
        return 1;
      }
      v14 = *(_QWORD *)(a2 + 8);
      v16 = *(void **)(v14 + 32);
      v15 = (llvm::detail::DoubleAPFloat *)(v14 + 32);
      if (v16 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v15, (unsigned int *)&v29);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v15, (unsigned int *)&v29);
      if (v30 < 0x41)
      {
        v25 = *a1;
        v26 = *(_QWORD *)(a2 + 8);
        v28 = *(void **)(v26 + 32);
        v27 = (llvm::detail::DoubleAPFloat *)(v26 + 32);
        if (v28 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v27, (unsigned int *)&v29);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v27, (unsigned int *)&v29);
        sub_1C601D484(v25, (uint64_t)&v29);
        if (v30 >= 0x41 && v29)
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
        return 1;
      }
      if (v29)
        MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
      return 0;
    case 4:
      sub_1C63C6794((unsigned int *)*a1, *(_QWORD *)(a2 + 16), *(uint64_t *)(a2 + 16) >> 32);
      return 1;
    default:
      return 1;
  }
}

uint64_t sub_1C60113A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::MCStreamer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  v16[0] = "Loc expr size";
  v17 = 259;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 112))(v6, v16, 1);
  v7 = *(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272);
  v8 = *(_QWORD *)(a1 + 1296);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = ((a2 - v8) >> 5) + 1;
  v11 = *(unsigned int *)(a1 + 1304);
  if (*(unsigned __int16 *)(*((_QWORD *)v7 + 1) + 1624) < 5u)
  {
    if (v10 == v11)
      v13 = *(_QWORD *)(a1 + 2344);
    else
      v13 = *(_QWORD *)(v8 + 32 * v10 + 16);
    if ((unint64_t)(v13 - v9) >> 16)
      return (*(uint64_t (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v7 + 512))(v7, 0, 2);
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)v7 + 512))(v7);
  }
  else
  {
    v12 = (_QWORD *)(v8 + 32 * v10 + 16);
    if (v10 == v11)
      v12 = (_QWORD *)(a1 + 2344);
    llvm::MCStreamer::emitULEB128IntValue(v7, *v12 - v9, 0);
  }
  v15 = *(_QWORD *)(a1 + 8);
  v16[0] = off_1E81AB880;
  v16[1] = v15;
  return sub_1C6010C88(a1, (uint64_t)v16, a2, a3);
}

uint64_t sub_1C60114D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t **v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t ***v48;
  _QWORD *v49;
  unint64_t ****v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t ***v57;
  unint64_t **v58;
  __int128 v59;
  uint64_t *v60;
  void *v61;
  _QWORD ***v62;
  const llvm::MCSymbol *v63;
  uint64_t v64;
  const llvm::MCSymbol *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  const llvm::MCSymbol *v73;
  uint64_t v74;
  llvm::MCStreamer *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(void);
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  void *v88;
  void *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  const llvm::MCSymbol *v95;
  uint64_t *v96;
  uint64_t v97;
  char v98;
  uint64_t *v99;
  unint64_t **v100;
  _QWORD ***v101;
  unsigned int v102;
  unsigned int v103;
  const char *v104;
  uint64_t v105;
  char v106;
  __int16 v107;
  _QWORD v108[2];
  int v109;
  void *__p;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  int v114[4];

  if (!*(_DWORD *)(result + 1192))
    return result;
  v2 = result;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 272) + 168))(*(_QWORD *)(*(_QWORD *)(result + 8) + 272), a2, 0);
  v3 = 0;
  v4 = *(_QWORD *)(v2 + 8);
  result = *(_QWORD *)(v4 + 272);
  if (*(unsigned __int16 *)(*(_QWORD *)(result + 8) + 1624) >= 5u)
  {
    v5 = llvm::mcdwarf::emitListsTableHeaderStart((llvm::mcdwarf *)result, 0);
    v6 = *(_QWORD *)(v4 + 272);
    v108[0] = "Offset entry count";
    LOWORD(v111) = 259;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 112))(v6, v108, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v4 + 272) + 512))(*(_QWORD *)(v4 + 272), *(int *)(v2 + 1192), 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 272) + 192))(*(_QWORD *)(v4 + 272), *(_QWORD *)(v2 + 2640), 0);
    v7 = *(unsigned int *)(v2 + 1192);
    if (!(_DWORD)v7)
    {
      v3 = v5;
      if (v5)
        return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 272)
                                                                           + 192))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 272), v3, 0);
      return result;
    }
    v8 = *(_QWORD *)(v2 + 1184);
    v9 = v2;
    v10 = 24 * v7;
    v11 = (uint64_t *)(v8 + 8);
    do
    {
      v13 = *v11;
      v11 += 3;
      v12 = v13;
      v14 = *(_QWORD **)(v4 + 272);
      if (*(_BYTE *)(v14[1] + 1626))
        v15 = 8;
      else
        v15 = 4;
      result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v14 + 832))(v14, v12, *(_QWORD *)(v9 + 2640), v15);
      v10 -= 24;
    }
    while (v10);
    v2 = v9;
    v3 = v5;
  }
  v16 = *(_DWORD *)(v2 + 1192);
  if (!v16)
    goto LABEL_103;
  v17 = *(uint64_t **)(v2 + 1184);
  v90 = v3;
  v91 = &v17[3 * v16];
  v92 = (uint64_t *)(v2 + 3472);
  v93 = v2 + 4512;
  v97 = v2;
  do
  {
    v18 = *(_QWORD *)(v2 + 1184);
    v99 = v17;
    v19 = 1 - 0x5555555555555555 * (((uint64_t)v17 - v18) >> 3);
    if (v19 == *(_DWORD *)(v2 + 1192))
      v20 = *(unsigned int *)(v2 + 1304);
    else
      v20 = *(_QWORD *)(v18 + 24 * v19 + 16);
    v21 = *(_QWORD *)(v2 + 8);
    v22 = *(_QWORD *)(v2 + 1296);
    v23 = v17[2];
    v24 = *v17;
    v25 = *(unsigned int *)(*(_QWORD *)(v21 + 256) + 8);
    v26 = *(_QWORD **)(v21 + 272);
    v103 = *(unsigned __int16 *)(v26[1] + 1624);
    (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v26 + 192))(v26, v17[1], 0);
    v108[0] = 0;
    v108[1] = 0;
    v109 = 0;
    v111 = 0;
    v112 = 0;
    __p = 0;
    if (v23 != v20)
    {
      v94 = v24;
      v100 = (unint64_t **)(v22 + 32 * v20);
      v27 = (unint64_t **)(v22 + 32 * v23);
      v102 = v25;
      while (1)
      {
        v28 = *v27;
        v29 = **v27 & 0xFFFFFFFFFFFFFFF8;
        if (!v29 && (v28[1] & 0x1C00) == 0x800)
        {
          *((_DWORD *)v28 + 2) |= 4u;
          llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v28[3]);
          *v28 = *v28 & 7 | v29;
        }
        v30 = *(_QWORD *)(v29 + 16);
        v113 = v30;
        v114[0] = 0;
        sub_1C6016B54((uint64_t)&v104, (uint64_t)v108, &v113, v114);
        v31 = v104;
        if (v106)
          break;
        v32 = *((_DWORD *)v104 + 2);
        v33 = (char *)__p;
LABEL_32:
        v43 = &v33[32 * v32];
        v46 = *((_QWORD *)v43 + 3);
        v45 = v43 + 24;
        v44 = v46;
        v47 = v45 - 1;
        v48 = (unint64_t ***)*(v45 - 1);
        if ((unint64_t)v48 >= v46)
        {
          v50 = (unint64_t ****)(v45 - 2);
          v51 = (_QWORD *)*(v45 - 2);
          v52 = v48 - (unint64_t ***)v51;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
LABEL_108:
            abort();
          v54 = v44 - (_QWORD)v51;
          if (v54 >> 2 > v53)
            v53 = v54 >> 2;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            if (v55 >> 61)
              goto LABEL_109;
            v56 = (char *)operator new(8 * v55);
          }
          else
          {
            v56 = 0;
          }
          v57 = (unint64_t ***)&v56[8 * v52];
          *v57 = v27;
          v49 = v57 + 1;
          if (v48 != v51)
          {
            do
            {
              v58 = *--v48;
              *--v57 = v58;
            }
            while (v48 != v51);
            v48 = *v50;
          }
          *v50 = v57;
          *v47 = v49;
          *v45 = &v56[8 * v55];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v48 = v27;
          v49 = v48 + 1;
        }
        *v47 = v49;
        v27 += 4;
        if (v27 == v100)
        {
          v62 = (_QWORD ***)__p;
          v96 = v111;
          if (__p == v111)
            goto LABEL_91;
          v98 = 0;
          v63 = *(const llvm::MCSymbol **)(v94 + 488);
          v95 = v63;
          while (1)
          {
            if (v63)
            {
              v64 = v97;
              v65 = v63;
              v66 = v99;
              if ((v98 & (v103 < 5)) == 1)
              {
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 272) + 512))(*(_QWORD *)(v21 + 272), -1, v25);
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v21 + 272) + 512))(*(_QWORD *)(v21 + 272), 0, v25);
                v98 = 0;
                v65 = v63;
              }
            }
            else
            {
              v67 = **v62[1];
              v68 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
              v64 = v97;
              v66 = v99;
              if (!v68 && (*(_DWORD *)(v67 + 8) & 0x1C00) == 0x800)
              {
                *(_DWORD *)(v67 + 8) |= 4u;
                llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v67 + 24));
                *(_QWORD *)v67 = *(_QWORD *)v67 & 7 | v68;
              }
              v113 = *(_QWORD *)(v68 + 16);
              v104 = 0;
              v65 = 0;
              if (sub_1C596455C(v92, &v113, &v104)
                && v104 != (const char *)(*(_QWORD *)(v97 + 3472) + 16 * *(unsigned int *)(v97 + 3488)))
              {
                v65 = (const llvm::MCSymbol *)*((_QWORD *)v104 + 1);
              }
              if (v103 > 4)
              {
                if (v65 == (const llvm::MCSymbol *)v67 && (unint64_t)((char *)v62[2] - (char *)v62[1]) < 9)
                {
                  v65 = 0;
                }
                else
                {
                  v82 = *(_QWORD *)(v21 + 272);
                  v107 = 261;
                  v104 = "DW_LLE_base_addressx";
                  v105 = 20;
                  v98 = 1;
                  (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v82 + 112))(v82, &v104, 1);
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 272) + 512))(*(_QWORD *)(v21 + 272), 1, 1);
                  v83 = *(_QWORD *)(v21 + 272);
                  v104 = "  base address index";
                  v107 = 259;
                  (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v83 + 112))(v83, &v104, 1);
                  v84 = sub_1C63BB980(v93, (uint64_t)v65, 0);
                  llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v21 + 272), v84, 0);
                }
              }
              else
              {
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 272) + 512))(*(_QWORD *)(v21 + 272), -1, v25);
                v69 = *(_QWORD *)(v21 + 272);
                v104 = "  base address";
                v107 = 259;
                v98 = 1;
                (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v69 + 112))(v69, &v104, 1);
                llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(v21 + 272), v65, v25, 0);
              }
            }
            v101 = v62;
            v70 = v62[1];
            v71 = v62[2];
            while (v70 != v71)
            {
              v72 = *v70;
              v74 = **v70;
              v73 = (const llvm::MCSymbol *)(*v70)[1];
              v75 = *(llvm::MCStreamer **)(v21 + 272);
              if (v65)
              {
                if (v103 < 5)
                {
                  (*(void (**)(llvm::MCStreamer *, uint64_t, const llvm::MCSymbol *, uint64_t))(*(_QWORD *)v75 + 832))(v75, **v70, v65, v25);
                  (*(void (**)(_QWORD, const llvm::MCSymbol *, const llvm::MCSymbol *, uint64_t))(**(_QWORD **)(v21 + 272) + 832))(*(_QWORD *)(v21 + 272), v73, v65, v25);
                  goto LABEL_84;
                }
                v107 = 261;
                v104 = "DW_LLE_offset_pair";
                v105 = 18;
                (*(void (**)(llvm::MCStreamer *, const char **, uint64_t))(*(_QWORD *)v75 + 112))(v75, &v104, 1);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 272) + 512))(*(_QWORD *)(v21 + 272), 4, 1);
                v76 = *(_QWORD *)(v21 + 272);
                v104 = "  starting offset";
                v107 = 259;
                (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v76 + 112))(v76, &v104, 1);
                (*(void (**)(_QWORD, uint64_t, const llvm::MCSymbol *))(**(_QWORD **)(v21 + 272) + 840))(*(_QWORD *)(v21 + 272), v74, v65);
                v77 = *(_QWORD *)(v21 + 272);
                v104 = "  ending offset";
                v107 = 259;
                v25 = v102;
                (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v77 + 112))(v77, &v104, 1);
                v78 = *(void (**)(void))(**(_QWORD **)(v21 + 272) + 840);
              }
              else
              {
                if (v103 < 5)
                {
                  llvm::MCStreamer::emitSymbolValue(v75, (const llvm::MCSymbol *)**v70, v25, 0);
                  llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(v21 + 272), v73, v25, 0);
                  goto LABEL_84;
                }
                v107 = 261;
                v104 = "DW_LLE_startx_length";
                v105 = 20;
                (*(void (**)(llvm::MCStreamer *, const char **, uint64_t))(*(_QWORD *)v75 + 112))(v75, &v104, 1);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 272) + 512))(*(_QWORD *)(v21 + 272), 3, 1);
                v79 = *(_QWORD *)(v21 + 272);
                v104 = "  start index";
                v107 = 259;
                (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v79 + 112))(v79, &v104, 1);
                v80 = sub_1C63BB980(v93, v74, 0);
                llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v21 + 272), v80, 0);
                v81 = *(_QWORD *)(v21 + 272);
                v104 = "  length";
                v107 = 259;
                v25 = v102;
                (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v81 + 112))(v81, &v104, 1);
                v78 = *(void (**)(void))(**(_QWORD **)(v21 + 272) + 840);
              }
              v78();
LABEL_84:
              sub_1C60113A8(v64, (uint64_t)v72, *v66);
              ++v70;
            }
            v62 = v101 + 4;
            v63 = v95;
            if (v101 + 4 == (_QWORD ***)v96)
              goto LABEL_91;
          }
        }
      }
      v34 = v111;
      if (v111 < v112)
      {
        v35 = v111 + 4;
        *v111 = v30;
        v34[1] = 0;
        v34[2] = 0;
        v34[3] = 0;
LABEL_31:
        v111 = v35;
        v33 = (char *)__p;
        v32 = ((unint64_t)((char *)v35 - (_BYTE *)__p) >> 5) - 1;
        *((_DWORD *)v31 + 2) = v32;
        goto LABEL_32;
      }
      v36 = (uint64_t *)__p;
      v37 = ((char *)v111 - (_BYTE *)__p) >> 5;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 59)
        goto LABEL_108;
      v39 = (char *)v112 - (_BYTE *)__p;
      if (((char *)v112 - (_BYTE *)__p) >> 4 > v38)
        v38 = v39 >> 4;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
        v40 = 0x7FFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40 >> 59)
LABEL_109:
        sub_1C4764EE4();
      v41 = (char *)operator new(32 * v40);
      v42 = (uint64_t *)&v41[32 * v37];
      *v42 = v30;
      v42[1] = 0;
      v35 = v42 + 4;
      v42[2] = 0;
      v42[3] = 0;
      if (v34 == v36)
      {
        __p = &v41[32 * v37];
        v111 = v42 + 4;
        v112 = (uint64_t *)&v41[32 * v40];
        if (!v34)
          goto LABEL_31;
      }
      else
      {
        do
        {
          v59 = *((_OWORD *)v34 - 2);
          v34 -= 4;
          *((_OWORD *)v42 - 2) = v59;
          v42 -= 4;
          v42[2] = v34[2];
          v42[3] = v34[3];
          v34[1] = 0;
          v34[2] = 0;
          v34[3] = 0;
        }
        while (v34 != v36);
        v34 = (uint64_t *)__p;
        v60 = v111;
        __p = v42;
        v111 = v35;
        v112 = (uint64_t *)&v41[32 * v40];
        while (v60 != v34)
        {
          v61 = (void *)*(v60 - 3);
          if (v61)
          {
            *(v60 - 2) = (uint64_t)v61;
            operator delete(v61);
          }
          v60 -= 4;
        }
        v25 = v102;
        if (!v34)
          goto LABEL_31;
      }
      operator delete(v34);
      goto LABEL_31;
    }
LABEL_91:
    v85 = *(_QWORD *)(v21 + 272);
    if (v103 >= 5)
    {
      v107 = 261;
      v104 = "DW_LLE_end_of_list";
      v105 = 18;
      (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v85 + 112))(v85, &v104, 1);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v85 + 512))(v85, 0, v25);
    }
    (*(void (**)(void))(**(_QWORD **)(v21 + 272) + 512))();
    v2 = v97;
    v86 = (uint64_t *)__p;
    if (__p)
    {
      v87 = v111;
      v88 = __p;
      if (v111 != __p)
      {
        do
        {
          v89 = (void *)*(v87 - 3);
          if (v89)
          {
            *(v87 - 2) = (uint64_t)v89;
            operator delete(v89);
          }
          v87 -= 4;
        }
        while (v87 != v86);
        v88 = __p;
      }
      v111 = v86;
      operator delete(v88);
    }
    result = MEMORY[0x1CAA32FB4](v108[0], 8);
    v17 = v99 + 3;
  }
  while (v99 + 3 != v91);
  v3 = v90;
LABEL_103:
  if (v3)
    return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 272)
                                                                       + 192))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 272), v3, 0);
  return result;
}

llvm::mcdwarf *sub_1C6011F2C(llvm::mcdwarf *result, uint64_t a2, uint64_t a3)
{
  llvm::mcdwarf *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::mcdwarf *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t **v27;
  unint64_t **v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t ***v50;
  _QWORD *v51;
  unint64_t ****v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t ***v59;
  unint64_t **v60;
  __int128 v61;
  uint64_t *v62;
  void *v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  const llvm::MCSymbol *v68;
  uint64_t v69;
  const llvm::MCSymbol ***v70;
  const llvm::MCSymbol ***v71;
  const llvm::MCSymbol *v72;
  uint64_t v73;
  llvm::MCStreamer *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  void *v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  llvm::mcdwarf *v93;
  uint64_t v94;
  const llvm::MCSymbol *v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  unint64_t **v99;
  char v100;
  unsigned int v101;
  const char *v102;
  uint64_t v103;
  char v104;
  __int16 v105;
  _QWORD v106[2];
  int v107;
  void *__p;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  int v112[4];

  if (!*(_DWORD *)(a2 + 248))
    return result;
  v4 = result;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*((_QWORD *)result + 1) + 272) + 168))(*(_QWORD *)(*((_QWORD *)result + 1) + 272), a3, 0);
  v5 = 0;
  v93 = v4;
  v6 = *((_QWORD *)v4 + 1);
  result = *(llvm::mcdwarf **)(v6 + 272);
  if (*(unsigned __int16 *)(*((_QWORD *)result + 1) + 1624) >= 5u)
  {
    v7 = llvm::mcdwarf::emitListsTableHeaderStart(result, 0);
    v8 = *(_QWORD *)(v6 + 272);
    v106[0] = "Offset entry count";
    LOWORD(v109) = 259;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 112))(v8, v106, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v6 + 272) + 512))(*(_QWORD *)(v6 + 272), *(int *)(a2 + 248), 4);
    result = (llvm::mcdwarf *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 272) + 192))(*(_QWORD *)(v6 + 272), *(_QWORD *)(a2 + 328), 0);
    v9 = *(unsigned int *)(a2 + 248);
    if (!(_DWORD)v9)
    {
      v18 = v93;
      v5 = v7;
      if (!v7)
        return result;
      return (llvm::mcdwarf *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*((_QWORD *)v18 + 1) + 272)
                                                                                          + 192))(*(_QWORD *)(*((_QWORD *)v18 + 1) + 272), v5, 0);
    }
    v10 = *(uint64_t **)(a2 + 240);
    v11 = v9 << 6;
    do
    {
      v13 = *v10;
      v10 += 8;
      v12 = v13;
      v14 = *(_QWORD **)(v6 + 272);
      if (*(_BYTE *)(v14[1] + 1626))
        v15 = 8;
      else
        v15 = 4;
      result = (llvm::mcdwarf *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v14 + 832))(v14, v12, *(_QWORD *)(a2 + 328), v15);
      v11 -= 64;
    }
    while (v11);
    v5 = v7;
  }
  v16 = *(unsigned int *)(a2 + 248);
  if (!(_DWORD)v16)
  {
    v18 = v93;
    if (!v5)
      return result;
    return (llvm::mcdwarf *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*((_QWORD *)v18 + 1) + 272)
                                                                                        + 192))(*(_QWORD *)(*((_QWORD *)v18 + 1) + 272), v5, 0);
  }
  v17 = *(_QWORD *)(a2 + 240);
  v89 = v5;
  v90 = v17 + (v16 << 6);
  v18 = v93;
  v94 = (uint64_t)v93 + 4512;
  do
  {
    v19 = *((_QWORD *)v18 + 1);
    v96 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD **)(v19 + 272);
    v21 = *(unsigned __int16 *)(v20[1] + 1624);
    if (*(_BYTE *)(*(_QWORD *)(v96 + 72) + 56))
      v22 = 1;
    else
      v22 = v21 > 4;
    v23 = v22;
    v91 = v23;
    v24 = *(unsigned int *)(*(_QWORD *)(v19 + 256) + 8);
    (*(void (**)(void))(*v20 + 192))();
    v107 = 0;
    v106[0] = 0;
    v106[1] = 0;
    v109 = 0;
    v110 = 0;
    __p = 0;
    v92 = v17;
    v25 = *(unsigned int *)(v17 + 24);
    v26 = v21;
    if ((_DWORD)v25)
    {
      v101 = v21;
      v27 = *(unint64_t ***)(v92 + 16);
      v28 = &v27[2 * v25];
      v99 = v28;
      do
      {
        v29 = *v27;
        v30 = **v27 & 0xFFFFFFFFFFFFFFF8;
        if (!v30 && (v29[1] & 0x1C00) == 0x800)
        {
          *((_DWORD *)v29 + 2) |= 4u;
          llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v29[3]);
          *v29 = *v29 & 7 | v30;
        }
        v31 = *(_QWORD *)(v30 + 16);
        v111 = v31;
        v112[0] = 0;
        sub_1C6016B54((uint64_t)&v102, (uint64_t)v106, &v111, v112);
        v32 = v102;
        if (v104)
        {
          v35 = v109;
          if ((unint64_t)v109 >= v110)
          {
            v37 = (uint64_t *)__p;
            v38 = ((char *)v109 - (_BYTE *)__p) >> 5;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 59)
              goto LABEL_115;
            v40 = v110 - (_QWORD)__p;
            if ((uint64_t)(v110 - (_QWORD)__p) >> 4 > v39)
              v39 = v40 >> 4;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
              v41 = 0x7FFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41 >> 59)
LABEL_116:
              sub_1C4764EE4();
            v42 = (char *)operator new(32 * v41);
            v43 = (uint64_t *)&v42[32 * v38];
            *v43 = v31;
            v43[1] = 0;
            v44 = &v42[32 * v41];
            v36 = v43 + 4;
            v43[2] = 0;
            v43[3] = 0;
            if (v35 == v37)
            {
              __p = &v42[32 * v38];
              v109 = v43 + 4;
              v110 = (unint64_t)v44;
            }
            else
            {
              do
              {
                v61 = *((_OWORD *)v35 - 2);
                v35 -= 4;
                *((_OWORD *)v43 - 2) = v61;
                v43 -= 4;
                v43[2] = v35[2];
                v43[3] = v35[3];
                v35[1] = 0;
                v35[2] = 0;
                v35[3] = 0;
              }
              while (v35 != v37);
              v35 = (uint64_t *)__p;
              v62 = v109;
              __p = v43;
              v109 = v36;
              v110 = (unint64_t)v44;
              while (v62 != v35)
              {
                v63 = (void *)*(v62 - 3);
                if (v63)
                {
                  *(v62 - 2) = (uint64_t)v63;
                  operator delete(v63);
                }
                v62 -= 4;
              }
            }
            if (v35)
              operator delete(v35);
          }
          else
          {
            v36 = v109 + 4;
            *v109 = v31;
            v35[1] = 0;
            v35[2] = 0;
            v35[3] = 0;
          }
          v109 = v36;
          v34 = (char *)__p;
          v33 = ((unint64_t)((char *)v36 - (_BYTE *)__p) >> 5) - 1;
          *((_DWORD *)v32 + 2) = v33;
        }
        else
        {
          v33 = *((_DWORD *)v102 + 2);
          v34 = (char *)__p;
        }
        v45 = &v34[32 * v33];
        v48 = *((_QWORD *)v45 + 3);
        v47 = v45 + 24;
        v46 = v48;
        v49 = v47 - 1;
        v50 = (unint64_t ***)*(v47 - 1);
        if ((unint64_t)v50 >= v48)
        {
          v52 = (unint64_t ****)(v47 - 2);
          v53 = (_QWORD *)*(v47 - 2);
          v54 = v50 - (unint64_t ***)v53;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61)
LABEL_115:
            abort();
          v56 = v46 - (_QWORD)v53;
          if (v56 >> 2 > v55)
            v55 = v56 >> 2;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            if (v57 >> 61)
              goto LABEL_116;
            v58 = (char *)operator new(8 * v57);
          }
          else
          {
            v58 = 0;
          }
          v59 = (unint64_t ***)&v58[8 * v54];
          *v59 = v27;
          v51 = v59 + 1;
          if (v50 != v53)
          {
            do
            {
              v60 = *--v50;
              *--v59 = v60;
            }
            while (v50 != v53);
            v50 = *v52;
          }
          *v52 = v59;
          *v49 = v51;
          *v47 = &v58[8 * v57];
          if (v50)
            operator delete(v50);
          v28 = v99;
        }
        else
        {
          *v50 = v27;
          v51 = v50 + 1;
        }
        *v49 = v51;
        v27 += 2;
      }
      while (v27 != v28);
      v64 = (uint64_t *)__p;
      v98 = v109;
      v26 = v101;
      if (__p == v109)
        goto LABEL_97;
      v100 = 0;
      v95 = *(const llvm::MCSymbol **)(v96 + 488);
      v65 = v91;
      if (v95)
        v65 = 0;
      v97 = v65;
LABEL_69:
      if (v97)
      {
        v66 = **(_QWORD **)v64[1];
        v67 = *(_QWORD *)v66 & 0xFFFFFFFFFFFFFFF8;
        if (!v67 && (*(_DWORD *)(v66 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v66 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v66 + 24));
          *(_QWORD *)v66 = *(_QWORD *)v66 & 7 | v67;
        }
        v111 = *(_QWORD *)(v67 + 16);
        v102 = 0;
        v68 = 0;
        if (sub_1C596455C((uint64_t *)v93 + 434, &v111, &v102)
          && v102 != (const char *)(*((_QWORD *)v93 + 434) + 16 * *((unsigned int *)v93 + 872)))
        {
          v68 = (const llvm::MCSymbol *)*((_QWORD *)v102 + 1);
        }
        if (v26 > 4)
        {
          if (v68 == (const llvm::MCSymbol *)v66 && (unint64_t)(v64[2] - v64[1]) < 9)
          {
            v68 = 0;
          }
          else
          {
            v81 = *(_QWORD *)(v19 + 272);
            v105 = 261;
            v102 = "DW_RLE_base_addressx";
            v103 = 20;
            v100 = 1;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v81 + 112))(v81, &v102, 1);
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 272) + 512))(*(_QWORD *)(v19 + 272), 1, 1);
            v82 = *(_QWORD *)(v19 + 272);
            v102 = "  base address index";
            v105 = 259;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v82 + 112))(v82, &v102, 1);
            v83 = sub_1C63BB980(v94, (uint64_t)v68, 0);
            llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v19 + 272), v83, 0);
          }
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 272) + 512))(*(_QWORD *)(v19 + 272), -1, v24);
          v69 = *(_QWORD *)(v19 + 272);
          v102 = "  base address";
          v105 = 259;
          v100 = 1;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v69 + 112))(v69, &v102, 1);
          llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(v19 + 272), v68, v24, 0);
        }
      }
      else
      {
        v68 = v95;
        if ((v100 & (v26 < 5)) == 1)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 272) + 512))(*(_QWORD *)(v19 + 272), -1, v24);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v19 + 272) + 512))(*(_QWORD *)(v19 + 272), 0, v24);
          v100 = 0;
          v68 = v95;
        }
      }
      v71 = (const llvm::MCSymbol ***)v64[1];
      v70 = (const llvm::MCSymbol ***)v64[2];
      while (1)
      {
        if (v71 == v70)
        {
          v64 += 4;
          if (v64 == v98)
            break;
          goto LABEL_69;
        }
        v73 = (uint64_t)**v71;
        v72 = (*v71)[1];
        v74 = *(llvm::MCStreamer **)(v19 + 272);
        if (v68)
        {
          if (v26 < 5)
          {
            (*(void (**)(llvm::MCStreamer *, const llvm::MCSymbol *, const llvm::MCSymbol *, uint64_t))(*(_QWORD *)v74 + 832))(v74, **v71, v68, v24);
            (*(void (**)(_QWORD, const llvm::MCSymbol *, const llvm::MCSymbol *, uint64_t))(**(_QWORD **)(v19 + 272) + 832))(*(_QWORD *)(v19 + 272), v72, v68, v24);
            goto LABEL_90;
          }
          v105 = 261;
          v102 = "DW_RLE_offset_pair";
          v103 = 18;
          (*(void (**)(llvm::MCStreamer *, const char **, uint64_t))(*(_QWORD *)v74 + 112))(v74, &v102, 1);
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 272) + 512))(*(_QWORD *)(v19 + 272), 4, 1);
          v75 = *(_QWORD *)(v19 + 272);
          v102 = "  starting offset";
          v105 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v75 + 112))(v75, &v102, 1);
          (*(void (**)(_QWORD, uint64_t, const llvm::MCSymbol *))(**(_QWORD **)(v19 + 272) + 840))(*(_QWORD *)(v19 + 272), v73, v68);
          v76 = *(_QWORD *)(v19 + 272);
          v102 = "  ending offset";
          v105 = 259;
          v26 = v101;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v76 + 112))(v76, &v102, 1);
          v77 = *(void (**)(void))(**(_QWORD **)(v19 + 272) + 840);
        }
        else
        {
          if (v26 < 5)
          {
            llvm::MCStreamer::emitSymbolValue(v74, **v71, v24, 0);
            llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(v19 + 272), v72, v24, 0);
            goto LABEL_90;
          }
          v105 = 261;
          v102 = "DW_RLE_startx_length";
          v103 = 20;
          (*(void (**)(llvm::MCStreamer *, const char **, uint64_t))(*(_QWORD *)v74 + 112))(v74, &v102, 1);
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 272) + 512))(*(_QWORD *)(v19 + 272), 3, 1);
          v78 = *(_QWORD *)(v19 + 272);
          v102 = "  start index";
          v105 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v78 + 112))(v78, &v102, 1);
          v79 = sub_1C63BB980(v94, v73, 0);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v19 + 272), v79, 0);
          v80 = *(_QWORD *)(v19 + 272);
          v102 = "  length";
          v105 = 259;
          v26 = v101;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v80 + 112))(v80, &v102, 1);
          v77 = *(void (**)(void))(**(_QWORD **)(v19 + 272) + 840);
        }
        v77();
LABEL_90:
        ++v71;
      }
    }
LABEL_97:
    v84 = *(_QWORD *)(v19 + 272);
    if (v26 >= 5)
    {
      v105 = 261;
      v102 = "DW_RLE_end_of_list";
      v103 = 18;
      (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v84 + 112))(v84, &v102, 1);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v84 + 512))(v84, 0, v24);
    }
    (*(void (**)(void))(**(_QWORD **)(v19 + 272) + 512))();
    v85 = (uint64_t *)__p;
    if (__p)
    {
      v86 = v109;
      v87 = __p;
      if (v109 != __p)
      {
        do
        {
          v88 = (void *)*(v86 - 3);
          if (v88)
          {
            *(v86 - 2) = (uint64_t)v88;
            operator delete(v88);
          }
          v86 -= 4;
        }
        while (v86 != v85);
        v87 = __p;
      }
      v109 = v85;
      operator delete(v87);
    }
    result = (llvm::mcdwarf *)MEMORY[0x1CAA32FB4](v106[0], 8);
    v18 = v93;
    v17 = v92 + 64;
  }
  while (v92 + 64 != v90);
  v5 = v89;
  if (v89)
    return (llvm::mcdwarf *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*((_QWORD *)v18 + 1) + 272)
                                                                                        + 192))(*(_QWORD *)(*((_QWORD *)v18 + 1) + 272), v5, 0);
  return result;
}

void sub_1C6012930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  size_t v10;
  const void *v11;
  size_t *v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  size_t v28;
  int v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  size_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *p_dst;
  size_t v47;
  unint64_t v48;
  _QWORD v49[4];
  __int16 v50;
  const char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int16 v55;
  unsigned __int8 *__dst;
  size_t v57;
  int64_t v58;

  if (a2)
    v6 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  else
    v6 = 0;
  if (v6 != (uint64_t *)a2)
  {
    v7 = a1 + 3168;
    while (1)
    {
      v8 = (_BYTE *)*v6;
      if (*(_BYTE *)*v6 == 29)
        break;
      sub_1C63C2A78(a1, *v6, a3);
LABEL_58:
      if (++v6 == (uint64_t *)a2)
        return;
    }
    v9 = &v8[-8 * *((unsigned int *)v8 + 2)];
    if (*v9)
    {
      v12 = *(size_t **)(*v9 + 8);
      v13 = *v12;
      v11 = v12 + 3;
      v10 = v13;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v14 = v9[1];
    if (v14)
    {
      v15 = *(uint64_t **)(v14 + 8);
      v16 = *v15;
      if (*v15)
      {
        v50 = 773;
        v49[0] = v11;
        v49[1] = v10;
        v49[2] = " ";
        v51 = (const char *)v49;
        v53 = v15 + 3;
        v54 = v16;
        v55 = 1282;
        llvm::Twine::str((llvm::Twine *)&v51, &__dst);
        goto LABEL_25;
      }
    }
    if (!v11)
    {
      __dst = 0;
      v57 = 0;
      v58 = 0;
LABEL_25:
      v22 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 272);
      if (*(_BYTE *)(a1 + 3536))
      {
        v29 = *((unsigned __int16 *)v8 + 1);
        if (*(unsigned __int16 *)(v22[1] + 1624) < 5u)
        {
          if (v29 == 1)
            v40 = 5;
          else
            v40 = 6;
          v41 = llvm::dwarf::GnuMacroString((llvm::dwarf *)v40);
          v55 = 261;
          v51 = v41;
          v52 = v42;
          (*(void (**)(_QWORD *, const char **, uint64_t))(*v22 + 112))(v22, &v51, 1);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272), v40, 0);
          v43 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
          v51 = "Line Number";
          v55 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v43 + 112))(v43, &v51, 1);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272), *((unsigned int *)v8 + 6), 0);
          v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
          v51 = "Macro String";
          v55 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v44 + 112))(v44, &v51, 1);
          v45 = *(_QWORD *)(a1 + 8);
          if (v58 >= 0)
            p_dst = (unsigned __int8 *)&__dst;
          else
            p_dst = __dst;
          if (v58 >= 0)
            v47 = HIBYTE(v58) & 0x7F;
          else
            v47 = v57;
          v48 = sub_1C601F330(v7, *(_QWORD *)(a1 + 8), p_dst, v47);
          sub_1C5FFA9F8(v45, *(llvm::MCExpr ***)(v48 + 8), 0);
        }
        else
        {
          if (v29 == 1)
            v30 = 11;
          else
            v30 = 12;
          v31 = llvm::dwarf::MacroString((llvm::dwarf *)v30);
          v55 = 261;
          v51 = v31;
          v52 = v32;
          (*(void (**)(_QWORD *, const char **, uint64_t))(*v22 + 112))(v22, &v51, 1);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272), v30, 0);
          v33 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
          v51 = "Line Number";
          v55 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v33 + 112))(v33, &v51, 1);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272), *((unsigned int *)v8 + 6), 0);
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
          v51 = "Macro String";
          v55 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v34 + 112))(v34, &v51, 1);
          v35 = *(_QWORD *)(a1 + 8);
          if (v58 >= 0)
            v36 = (unsigned __int8 *)&__dst;
          else
            v36 = __dst;
          if (v58 >= 0)
            v37 = HIBYTE(v58) & 0x7F;
          else
            v37 = v57;
          v38 = sub_1C601F330(v7, *(_QWORD *)(a1 + 8), v36, v37);
          v39 = *(_DWORD *)(v38 + 24);
          if (v39 == -1)
          {
            v39 = *(_DWORD *)(a1 + 3224);
            *(_DWORD *)(a1 + 3224) = v39 + 1;
            *(_DWORD *)(v38 + 24) = v39;
          }
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v35 + 272), v39, 0);
        }
      }
      else
      {
        v23 = llvm::dwarf::MacinfoString((llvm::dwarf *)*((unsigned __int16 *)v8 + 1));
        v55 = 261;
        v51 = v23;
        v52 = v24;
        (*(void (**)(_QWORD *, const char **, uint64_t))(*v22 + 112))(v22, &v51, 1);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272), *((unsigned __int16 *)v8 + 1), 0);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
        v51 = "Line Number";
        v55 = 259;
        (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v25 + 112))(v25, &v51, 1);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)(a1 + 8) + 272), *((unsigned int *)v8 + 6), 0);
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
        v51 = "Macro String";
        v55 = 259;
        (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v26 + 112))(v26, &v51, 1);
        if (v58 >= 0)
          v27 = (void **)&__dst;
        else
          v27 = (void **)__dst;
        if (v58 >= 0)
          v28 = HIBYTE(v58) & 0x7F;
        else
          v28 = v57;
        (*(void (**)(_QWORD, void **, size_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 488))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), v27, v28);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), 0, 1);
      }
      if (SHIBYTE(v58) < 0)
        operator delete(__dst);
      goto LABEL_58;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v10 >= 0x17)
    {
      v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v18 = v10 | 7;
      v19 = v7;
      v20 = v18 + 1;
      v17 = (void **)operator new(v18 + 1);
      v21 = v20 | 0x8000000000000000;
      v7 = v19;
      v57 = v10;
      v58 = v21;
      __dst = (unsigned __int8 *)v17;
    }
    else
    {
      HIBYTE(v58) = v10;
      v17 = (void **)&__dst;
      if (!v10)
        goto LABEL_24;
    }
    memmove(v17, v11, v10);
LABEL_24:
    *((_BYTE *)v17 + v10) = 0;
    goto LABEL_25;
  }
}

uint64_t sub_1C6012E14(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  char *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  const char *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  __int128 *p_dst;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  const char *v40;
  char v41;
  unint64_t v42;
  __int128 __dst;
  unint64_t v44;
  __int128 v45;
  char v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 3549))
    return 0;
  v3 = a2;
  v5 = (char *)(a1 + 4391);
  v6 = *a2;
  v7 = a2;
  if (v6 == 15 || (v8 = *((unsigned int *)a2 + 2), (v7 = *(unsigned __int8 **)&a2[-8 * v8]) != 0))
  {
    v9 = *(_QWORD *)&v7[-8 * *((unsigned int *)v7 + 2) + 8];
    if (v9)
    {
      v10 = *(_QWORD **)(v9 + 8);
      v13 = *v10;
      v12 = (const char *)(v10 + 3);
      v11 = v13;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    if (v6 == 15)
    {
      v15 = a2;
      goto LABEL_13;
    }
    v16 = -(uint64_t)*((unsigned int *)a2 + 2);
  }
  else
  {
    v11 = 0;
    v16 = -v8;
    v12 = "";
  }
  v15 = *(unsigned __int8 **)&a2[8 * v16];
  if (!v15)
  {
    v19 = 0;
    v20 = "";
    goto LABEL_19;
  }
LABEL_13:
  v17 = *(_QWORD *)&v15[-8 * *((unsigned int *)v15 + 2)];
  if (v17)
  {
    v18 = *(_QWORD **)(v17 + 8);
    v21 = *v18;
    v20 = (const char *)(v18 + 3);
    v19 = v21;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  if (v6 != 15)
  {
    v16 = -(uint64_t)*((unsigned int *)a2 + 2);
LABEL_19:
    a2 = *(unsigned __int8 **)&a2[8 * v16];
  }
  sub_1C600AD30(a1, (uint64_t)a2, &v45);
  if ((*v3 == 15 || (v3 = *(unsigned __int8 **)&v3[-8 * *((unsigned int *)v3 + 2)]) != 0) && v3[56])
  {
    v22 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8);
    v23 = *(_QWORD *)v22;
    v22 += 24;
    v2 = v23;
    v24 = v22 & 0xFFFFFFFFFFFFFF00;
    v25 = v22;
    v26 = 1;
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v24 = 0;
  }
  if (v5[24] < 0)
  {
    if (!*(_QWORD *)(a1 + 4400))
      goto LABEL_29;
  }
  else if (!v5[24])
  {
LABEL_29:
    v47 = v45;
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_51;
    v42 = v24;
    v41 = v46;
    if (v11 >= 0x17)
    {
      v28 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v28 = v11 | 7;
      v40 = v12;
      v29 = v25;
      v30 = v20;
      v31 = v26;
      v32 = v2;
      v33 = v28 + 1;
      p_dst = (__int128 *)operator new(v28 + 1);
      v34 = v33 | 0x8000000000000000;
      v2 = v32;
      v26 = v31;
      v20 = v30;
      v25 = v29;
      v12 = v40;
      *((_QWORD *)&__dst + 1) = v11;
      v44 = v34;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v44) = v11;
      p_dst = &__dst;
      if (!v11)
      {
LABEL_37:
        *((_BYTE *)p_dst + v11) = 0;
        v35 = (void **)(a1 + 4368);
        if (*v5 < 0)
          operator delete(*v35);
        *(_OWORD *)v35 = __dst;
        *(_QWORD *)(a1 + 4384) = v44;
        if (v19 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v19 >= 0x17)
          {
            v37 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v37 = v19 | 7;
            v38 = v37 + 1;
            v36 = (__int128 *)operator new(v37 + 1);
            *((_QWORD *)&__dst + 1) = v19;
            v44 = v38 | 0x8000000000000000;
            *(_QWORD *)&__dst = v36;
          }
          else
          {
            HIBYTE(v44) = v19;
            v36 = &__dst;
            if (!v19)
              goto LABEL_47;
          }
          memmove(v36, v20, v19);
LABEL_47:
          *((_BYTE *)v36 + v19) = 0;
          v39 = (void **)(a1 + 4392);
          if (v5[24] < 0)
            operator delete(*v39);
          *(_OWORD *)v39 = __dst;
          *(_QWORD *)(a1 + 4408) = v44;
          *(_DWORD *)(a1 + 4416) = 0;
          *(_OWORD *)(a1 + 4420) = v47;
          v5[45] = v41;
          *(_QWORD *)(a1 + 4440) = v42 | v25;
          *(_QWORD *)(a1 + 4448) = v2;
          v5[65] = v26;
          *(_DWORD *)(a1 + 4457) = __dst;
          *(_DWORD *)(a1 + 4460) = *(_DWORD *)((char *)&__dst + 3);
          v5[74] &= v41;
          v5[75] |= v41;
          v5[73] = v26;
          return a1 + 4008;
        }
LABEL_51:
        abort();
      }
    }
    memmove(p_dst, v12, v11);
    goto LABEL_37;
  }
  return a1 + 4008;
}

void sub_1C60131A4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;

  v9 = *(_DWORD *)(a1 + 3544);
  if (v9 == 2 || v9 != 1 && !*(_DWORD *)(a2 + 52))
  {
    if (*(_BYTE *)(a1 + 3549))
      v10 = a1 + 3552;
    else
      v10 = a1 + 2992;
    v11 = sub_1C601F330(v10 + 176, *(_QWORD *)(a1 + 8), a4, a5);
    v12 = *(_DWORD *)(a1 + 3544);
    if (v12 == 2)
    {
      v27 = v11;
      v13 = (_QWORD *)*sub_1C601C6C0((uint64_t *)(a3 + 96), (unsigned __int8 *)(v11 + 32), *(_QWORD *)v11, (uint64_t *)&v27, (uint64_t (**)(unint64_t, _QWORD))(a3 + 128));
      v14 = (_QWORD *)sub_1C484358C(a3, 16, 3);
      v15 = v14;
      *v14 = &unk_1E81AABA0;
      v14[1] = a6;
      v17 = (_QWORD *)v13[4];
      v16 = v13[5];
      if ((unint64_t)v17 >= v16)
      {
        v19 = (_QWORD *)v13[3];
        v20 = v17 - v19;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          abort();
        v22 = v16 - (_QWORD)v19;
        if (v22 >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 61)
            sub_1C4764EE4();
          v24 = (char *)operator new(8 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = v15;
        v18 = v25 + 8;
        if (v17 != v19)
        {
          do
          {
            v26 = *--v17;
            *((_QWORD *)v25 - 1) = v26;
            v25 -= 8;
          }
          while (v17 != v19);
          v17 = (_QWORD *)v13[3];
        }
        v13[3] = v25;
        v13[4] = v18;
        v13[5] = &v24[8 * v23];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v17 = v14;
        v18 = v17 + 1;
      }
      v13[4] = v18;
    }
    else if (v12 == 3)
    {
      sub_1C63C6074(a1 + 4552, v11, a6);
    }
  }
}

void sub_1C601335C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  v9 = *(_DWORD *)(a1 + 3544);
  if (v9 == 2 || v9 != 1 && !*(_DWORD *)(a2 + 52))
  {
    if (*(_BYTE *)(a1 + 3549))
      v10 = a1 + 3552;
    else
      v10 = a1 + 2992;
    v11 = sub_1C601F330(v10 + 176, *(_QWORD *)(a1 + 8), a4, a5);
    v12 = *(_DWORD *)(a1 + 3544);
    if (v12 == 2)
    {
      sub_1C601C8EC(a3, v11, a6);
    }
    else if (v12 == 3)
    {
      sub_1C63C6074(a1 + 4552, v11, a6);
    }
  }
}

uint64_t sub_1C601341C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v4 = a1 + 3472;
  v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a2 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v5;
  }
  v7 = *(_QWORD *)(v5 + 16);
  v8 = a2;
  result = sub_1C59644CC(v4, &v7, &v8, (uint64_t)v9);
  if (v9[16]
    && (*(_BYTE *)(a1 + 3549)
     || *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) + 8) + 1624) >= 5u))
  {
    return sub_1C63BB980(a1 + 4512, a2, 0);
  }
  return result;
}

_QWORD *sub_1C60134F0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81AB470;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E81AB4D8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C6013570(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C6013584(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C6013598(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C60135AC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81AB758;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E81AB7C0;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C601362C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C6013640(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  void *v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v6)
          v7 = v6 == -8;
        else
          v7 = 1;
        if (!v7)
        {
          v8 = *(void **)(v6 + 24);
          if (v8)
          {
            *(_QWORD *)(v6 + 32) = v8;
            operator delete(v8);
          }
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C60136BC(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;

  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 432), 8);
  sub_1C4D8B52C((uint64_t *)(a1 + 408));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 384), 8);
  sub_1C60137E8(a1 + 360);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 360), 8);
  sub_1C601384C(a1 + 336);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 336), 8);
  v2 = *(char **)(a1 + 240);
  v3 = *(unsigned int *)(a1 + 248);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 64;
    }
    while (v4);
    v2 = *(char **)(a1 + 240);
  }
  if (v2 != (char *)(a1 + 256))
    free(v2);
  free(*(void **)(a1 + 176));
  v6 = *(char **)(a1 + 152);
  v7 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    v10 = v6 - 8;
    do
    {
      v11 = *(_QWORD **)&v10[v9];
      *(_QWORD *)&v10[v9] = 0;
      if (v11)
      {
        v12 = sub_1C63C1F0C(v11);
        MEMORY[0x1CAA32FC0](v12, 0x10F1C4015B411C3);
      }
      v9 -= 8;
    }
    while (v9);
    v6 = *(char **)(a1 + 152);
  }
  if (v6 != (char *)(a1 + 168))
    free(v6);
  sub_1C6000250(a1 + 104);
  sub_1C4926AE8(a1 + 8);
  return a1;
}

void sub_1C60137E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

void sub_1C601384C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 112 * v1;
    v3 = *(_QWORD *)a1 + 48;
    do
    {
      v4 = *(_QWORD *)(v3 - 48);
      if (v4 != -4096 && v4 != -8192)
      {
        v6 = v3;
        v7 = v2;
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
          free(v5);
        sub_1C47655E8(v6 - 40, *(_QWORD **)(v6 - 32));
        v3 = v6;
        v2 = v7;
      }
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
}

void sub_1C60138D8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 10);
        if (v4 - 64 != v6)
          free(v6);
        v4 -= 96;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C6013954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  llvm::MDNode *Impl;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t *v23;
  int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::DIExpression *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  int v45;
  llvm::DIExpression *v46;
  llvm::DIExpression *v47;
  _QWORD *v48;
  llvm::DIExpression *v49;
  char v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  _BOOL4 v56;
  llvm::DIExpression *v57;
  uint64_t v58;
  llvm::DIExpression *v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t i;
  llvm::DIExpression *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[4];
  llvm::DIExpression *v76;
  char v77;
  int v78;
  _QWORD v79[2];
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _BYTE v90[16];
  llvm::DIExpression *v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[48];
  char v95;
  int v96;
  llvm::DIExpression *v97;
  void *v98[2];
  _BYTE v99[56];
  llvm::DIExpression *v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE v103[48];
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  if (*(_WORD *)v3 == 20)
    return 1;
  v7 = *(_QWORD *)(v3 + 8);
  if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
  {
    if ((v7 & 0x80) != 0)
      return 0;
    v10 = a1;
    result = 0;
    while ((*(_WORD *)(v10 + 44) & 8) != 0)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v10 + 16) + 8) & 0x80) != 0)
        return result;
    }
  }
  else if ((v7 & 0x80) != 0)
  {
    return 0;
  }
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a2 + 32))
  {
    if (!*(_DWORD *)(a1 + 40))
      return 1;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    Impl = llvm::DIExpression::getImpl(***(_QWORD ****)v11, 0, 0, 0, 1);
    v69 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 176))(*(_QWORD *)(v11 + 16));
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 104))(*(_QWORD *)(v11 + 16));
    v68 = v11;
    v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 120))(*(_QWORD *)(v11 + 16));
    v79[0] = 0;
    v79[1] = 0;
    v80 = 0;
    v82 = 0;
    v83 = 0;
    v81 = 0;
    v85 = 1;
    v86 = -1;
    v87 = -1;
    v88 = v90;
    v89 = 0x400000000;
    if (**(unsigned __int16 **)(a1 + 16) - 13 < 5 || (v14 = *(unsigned int *)(a1 + 40), !(_DWORD)v14))
    {
LABEL_100:
      if ((v85 & 1) == 0)
        MEMORY[0x1CAA32FB4](v86, 4);
      sub_1C63C413C((uint64_t)v79);
      return 1;
    }
    v70 = v13;
    v71 = a1;
    v66 = Impl;
    v72 = a3;
    v15 = 0;
    v74 = a2;
    v16 = *(_DWORD **)(a1 + 32);
    v17 = &v16[8 * v14];
    do
    {
      if ((*v16 & 0x10000FF) == 0x1000000 && (v16[1] - 1) <= 0x3FFFFFFE)
      {
        v19 = *(unsigned int **)(a2 + 24);
        v18 = *(unsigned int **)(a2 + 32);
        while (1)
        {
          if (v19 == v18)
            goto LABEL_52;
          v20 = *v19;
          v21 = v16[1];
          if (*v19 == v21)
            break;
          v32 = v20 - 1 > 0x3FFFFFFE || v21 - 1 > 0x3FFFFFFE;
          if (!v32 && llvm::MCRegisterInfo::regsOverlap(v69 + 1, *v19, v21))
            break;
LABEL_48:
          v19 += 14;
        }
        if ((v85 & 1) != 0)
        {
          v22 = 4;
          v23 = &v86;
        }
        else
        {
          v22 = v87;
          if (!(_DWORD)v87)
          {
            v33 = 0;
LABEL_45:
            *sub_1C47686DC((uint64_t)&v85, (uint64_t)v19, v19, v33) = *v19;
            v34 = *v19;
            v35 = v89;
            if (v89 >= (unint64_t)HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, (uint64_t)v90, v89 + 1, 4);
              v35 = v89;
            }
            *((_DWORD *)v88 + v35) = v34;
            v15 = v89 + 1;
            LODWORD(v89) = v89 + 1;
            goto LABEL_48;
          }
          v23 = (uint64_t *)v86;
        }
        v24 = v22 - 1;
        v25 = v24 & (37 * v20);
        v26 = (_DWORD *)v23 + v25;
        v27 = *v26;
        if (v20 == *v26)
          goto LABEL_48;
        v28 = 0;
        v29 = 1;
        while (v27 != -1)
        {
          if (v28)
            v30 = 0;
          else
            v30 = v27 == -2;
          if (v30)
            v28 = v26;
          v31 = v25 + v29++;
          v25 = v31 & v24;
          v26 = (_DWORD *)v23 + v25;
          v27 = *v26;
          if (v20 == *v26)
            goto LABEL_48;
        }
        if (v28)
          v33 = v28;
        else
          v33 = v26;
        goto LABEL_45;
      }
LABEL_52:
      v16 += 8;
    }
    while (v16 != v17);
    v36 = (int *)v88;
    if (!v15)
    {
LABEL_98:
      if (v36 != (int *)v90)
        free(v36);
      goto LABEL_100;
    }
    v37 = (int *)((char *)v88 + 4 * v15);
    v39 = v70;
    v38 = v71;
    while (1)
    {
      v78 = *v36;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v39 + 1240))(v75, v39, v38);
      if (v77)
        break;
LABEL_58:
      if (++v36 == v37)
      {
        if ((_DWORD)v89)
        {
          v61 = (int *)v88;
          v62 = 4 * v89;
          do
          {
            v63 = *v61++;
            sub_1C63C3D90(v74, v63);
            v62 -= 4;
          }
          while (v62);
        }
        v64 = v81;
        for (i = v82; v64 != i; v64 += 56)
          sub_1C60145F8(v74, *(_DWORD *)v64, v66, *(llvm::DIExpression ***)(v64 + 8), *(unsigned int *)(v64 + 16));
        sub_1C63C3FF0((uint64_t)v79);
        v36 = (int *)v88;
        goto LABEL_98;
      }
    }
    if (LOBYTE(v75[0]))
    {
      if (LOBYTE(v75[0]) != 1)
        goto LABEL_58;
      v73 = v75[2];
      v40 = v76;
      v41 = sub_1C63C3ED8(v74, &v78);
      v42 = *(unsigned int *)(v41 + 8);
      if ((_DWORD)v42)
      {
        v43 = *(int **)v41;
        v44 = *(_QWORD *)v41 + 16 * v42;
        while (1)
        {
          v45 = *v43;
          if (!v40)
            break;
          v46 = (llvm::DIExpression *)*((_QWORD *)v43 + 1);
          v47 = v40;
          if (((*((_QWORD *)v46 + 4) - *((_QWORD *)v46 + 3)) & 0x7FFFFFFF8) == 0)
            goto LABEL_70;
          v48 = (_QWORD *)*((_QWORD *)v40 + 3);
          if (((*((_QWORD *)v40 + 4) - (_QWORD)v48) & 0x7FFFFFFF8) == 0 || *v48 != 4099)
          {
            v47 = sub_1C6014734(v40, v46);
            goto LABEL_70;
          }
LABEL_66:
          v43 += 4;
          if (v43 == (int *)v44)
            goto LABEL_91;
        }
        v47 = 0;
LABEL_70:
        LODWORD(v84) = 1;
        *((_QWORD *)&v84 + 1) = v73;
        v100 = v47;
        v101 = v103;
        v102 = 0x200000000;
        sub_1C6014870((char *)&v101, &v84);
        v104 = 0;
        v49 = v100;
        v91 = v100;
        v92 = v94;
        v93 = 0x200000000;
        v50 = v102;
        if ((_DWORD)v102)
        {
          sub_1C6007B78((uint64_t)&v92, (uint64_t)&v101);
          v50 = v104;
          v49 = v91;
          v51 = v93;
        }
        else
        {
          v51 = 0;
        }
        v95 = v50;
        v96 = v45;
        v97 = v49;
        v98[0] = v99;
        v98[1] = (void *)0x200000000;
        if (v51)
        {
          sub_1C6007B78((uint64_t)v98, (uint64_t)&v92);
          v50 = v95;
        }
        v99[48] = v50;
        if (v92 != v94)
          free(v92);
        sub_1C63C4044(v72, (unint64_t)&v96);
        if (v98[0] != v99)
          free(v98[0]);
        if (v101 != v103)
          free(v101);
        goto LABEL_66;
      }
    }
    else
    {
      v52 = HIDWORD(v75[0]);
      v53 = *(_DWORD *)(v67 + 88);
      v54 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v69 + 552))(v69, v68);
      v56 = (_DWORD)v52 == v53 || (_DWORD)v52 == v54;
      if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v69 + 136))(v69, v52, v68) & 1) != 0 || v56)
      {
        v59 = v76;
        v60 = sub_1C63C3ED8(v74, &v78);
        sub_1C601400C(!v56 | (unint64_t)(v52 << 32), v59, *(int **)v60, *(unsigned int *)(v60 + 8), v72);
      }
      else
      {
        v57 = v76;
        v58 = sub_1C63C3ED8(v74, &v78);
        sub_1C60145F8((uint64_t)v79, v52, v57, *(llvm::DIExpression ***)v58, *(unsigned int *)(v58 + 8));
      }
    }
LABEL_91:
    v39 = v70;
    v38 = v71;
    goto LABEL_58;
  }
  return 0;
}

void sub_1C601400C(uint64_t a1, llvm::DIExpression *a2, int *a3, uint64_t a4, uint64_t a5)
{
  int *v5;
  int *v8;
  int v9;
  llvm::DIExpression *v10;
  llvm::DIExpression *v11;
  _QWORD *v12;
  llvm::DIExpression *v13;
  char v14;
  int v15;
  __int128 v17;
  uint64_t v18;
  llvm::DIExpression *v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[48];
  char v23;
  int v24;
  llvm::DIExpression *v25;
  void *v26[2];
  _BYTE v27[56];
  llvm::DIExpression *v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE v31[48];
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v5 = a3;
    v8 = &a3[4 * a4];
    while (1)
    {
      v9 = *v5;
      if (!a2)
        break;
      v10 = (llvm::DIExpression *)*((_QWORD *)v5 + 1);
      v11 = a2;
      if (((*((_QWORD *)v10 + 4) - *((_QWORD *)v10 + 3)) & 0x7FFFFFFF8) == 0)
        goto LABEL_11;
      v12 = (_QWORD *)*((_QWORD *)a2 + 3);
      if (((*((_QWORD *)a2 + 4) - (_QWORD)v12) & 0x7FFFFFFF8) == 0 || *v12 != 4099)
      {
        v11 = sub_1C6014734(a2, v10);
        goto LABEL_11;
      }
LABEL_7:
      v5 += 4;
      if (v5 == v8)
        return;
    }
    v11 = 0;
LABEL_11:
    LODWORD(v17) = 0;
    v18 = a1;
    v28 = v11;
    v29 = v31;
    v30 = 0x200000000;
    sub_1C6014870((char *)&v29, &v17);
    v32 = 0;
    v13 = v28;
    v19 = v28;
    v20 = v22;
    v21 = 0x200000000;
    v14 = v30;
    if ((_DWORD)v30)
    {
      sub_1C6007B78((uint64_t)&v20, (uint64_t)&v29);
      v14 = v32;
      v13 = v19;
      v15 = v21;
    }
    else
    {
      v15 = 0;
    }
    v23 = v14;
    v24 = v9;
    v25 = v13;
    v26[0] = v27;
    v26[1] = (void *)0x200000000;
    if (v15)
    {
      sub_1C6007B78((uint64_t)v26, (uint64_t)&v20);
      v14 = v23;
    }
    v27[48] = v14;
    if (v20 != v22)
      free(v20);
    sub_1C63C4044(a5, (unint64_t)&v24);
    if (v26[0] != v27)
      free(v26[0]);
    if (v29 != v31)
      free(v29);
    goto LABEL_7;
  }
}

void sub_1C60141E4(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 >= v4)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0x492492492492492)
      abort();
    v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x492492492492492)
      sub_1C4764EE4();
    v11 = 56 * v10;
    v12 = (char *)operator new(56 * v10);
    v13 = &v12[56 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_DWORD *)v13 = *a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x200000000;
    if (a2[4])
      sub_1C6180FA8((uint64_t)(v13 + 8), (uint64_t)(a2 + 2));
    v19 = v13 + 56;
    sub_1C63C3E04(a1, &__p);
    v6 = a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 56)
    {
      v16 = (char *)*((_QWORD *)i - 6);
      if (i - 32 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *(_DWORD *)v5 = *a2;
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x200000000;
    if (a2[4])
      sub_1C6180FA8(v5 + 8, (uint64_t)(a2 + 2));
    v6 = v5 + 56;
  }
  a1[1] = v6;
}

_DWORD *sub_1C6014388@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  char v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a1;
    v10 = (37 * *a2) & (v8 - 1);
    result = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
    v12 = *result;
    if (*a2 == *result)
    {
LABEL_17:
      v16 = 0;
      goto LABEL_9;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v13 = result;
      v18 = v10 + v14++;
      v10 = v18 & (v8 - 1);
      result = (_DWORD *)(v9 + 8 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_17;
    }
    if (v13)
      v15 = v13;
    else
      v15 = result;
  }
  else
  {
    v15 = 0;
  }
  result = sub_1C476C0AC(a1, (uint64_t)a2, a2, v15);
  *result = *a2;
  result[1] = *a3;
  v9 = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 16);
  v16 = 1;
LABEL_9:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 8 * v8;
  *(_BYTE *)(a4 + 16) = v16;
  return result;
}

void sub_1C6014474(int32x2_t *a1, int *a2)
{
  int *v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;

  v4 = a2 + 14;
  sub_1C627A138(a1, *a2);
  v5 = a1[4];
  if (v4 == (int *)v5)
  {
    v9 = a2;
  }
  else
  {
    v6 = *(_QWORD *)&a1[3] + 8 * (((uint64_t)a2 - *(_QWORD *)&a1[3]) >> 3) + 64;
    do
    {
      *(_DWORD *)(v6 - 64) = *(_DWORD *)(v6 - 8);
      sub_1C6180FA8(v6 - 56, v6);
      v7 = v6 + 56;
      v8 = v6 + 48;
      v6 += 56;
    }
    while (v8 != *(_QWORD *)&v5);
    v5 = a1[4];
    v9 = (int *)(v7 - 64);
  }
  while ((int *)v5 != v9)
  {
    v10 = *(void **)(*(_QWORD *)&v5 - 48);
    if ((void *)(*(_QWORD *)&v5 - 32) != v10)
      free(v10);
    *(_QWORD *)&v5 -= 56;
  }
  a1[4] = (int32x2_t)v9;
  if (v9 != a2)
  {
    v11 = a1[2].u32[0];
    v12 = *(_QWORD *)a1 + 8 * v11;
    if (a1[1].i32[0])
    {
      if ((_DWORD)v11)
      {
        v13 = 8 * v11;
        v14 = (unsigned int *)*a1;
        while (*v14 >= 0xFFFFFFFE)
        {
          v14 += 2;
          v13 -= 8;
          if (!v13)
            goto LABEL_16;
        }
      }
      else
      {
        v14 = (unsigned int *)*a1;
      }
    }
    else
    {
LABEL_16:
      v14 = (unsigned int *)(*(_QWORD *)a1 + 8 * v11);
    }
    v15 = *(_QWORD *)a1 + 8 * v11;
    if (v14 != (unsigned int *)v15)
    {
      v16 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - *(_QWORD *)&a1[3]) >> 3);
      do
      {
        v17 = v14[1];
        if (v16 < v17)
          v14[1] = v17 - 1;
        v18 = v14 + 2;
        while (v18 != (unsigned int *)v12)
        {
          v19 = *v18;
          v18 += 2;
          if (v19 <= 0xFFFFFFFD)
          {
            v14 = v18 - 2;
            goto LABEL_27;
          }
        }
        v14 = (unsigned int *)v12;
LABEL_27:
        ;
      }
      while (v14 != (unsigned int *)v15);
    }
  }
}

void sub_1C60145F8(uint64_t a1, int a2, llvm::DIExpression *a3, llvm::DIExpression **a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  llvm::DIExpression *v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = v17;
  v16 = 0x200000000;
  v8 = sub_1C63C3CF4(a1, &v14);
  if (v15 != v17)
    free(v15);
  if (a5)
  {
    v9 = (unsigned int *)&a4[2 * a5];
    do
    {
      v10 = *(unsigned int *)a4;
      v11 = sub_1C6014734(a3, a4[1]);
      v12 = *(unsigned int *)(v8 + 16);
      if (v12 >= *(unsigned int *)(v8 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 8, v8 + 24, v12 + 1, 16);
        v12 = *(unsigned int *)(v8 + 16);
      }
      v13 = (_QWORD *)(*(_QWORD *)(v8 + 8) + 16 * v12);
      *v13 = v10;
      v13[1] = v11;
      ++*(_DWORD *)(v8 + 16);
      a4 += 2;
    }
    while (a4 != (llvm::DIExpression **)v9);
  }
}

llvm::DIExpression *sub_1C6014734(llvm::DIExpression *this, llvm::DIExpression *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v10;
  char *i;

  v5 = (_BYTE *)*((_QWORD *)a2 + 3);
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[8 * (v6 >> 3)];
    memmove(v7, v5, v6);
  }
  if (llvm::DIExpression::isImplicit(this) && llvm::DIExpression::isImplicit(a2))
  {
    v10 = v7;
    if (v7 != v8)
    {
      while (*(_QWORD *)v10 != 159)
      {
        v10 += 8;
        if (v10 == v8)
        {
          v10 = v8;
          break;
        }
      }
    }
    if (v10 != v8)
    {
      for (i = v10 + 8; i != v8; i += 8)
      {
        if (*(_QWORD *)i != 159)
        {
          *(_QWORD *)v10 = *(_QWORD *)i;
          v10 += 8;
        }
      }
      if (v10 != v8)
        v8 = v10;
    }
  }
  if (v8 != v7)
  {
    this = llvm::DIExpression::append(this, v7, (v8 - v7) >> 3);
    if (!v7)
      return this;
    goto LABEL_8;
  }
  if (v7)
LABEL_8:
    operator delete(v7);
  return this;
}

char *sub_1C6014870(char *result, __int128 *a2)
{
  uint64_t *v2;
  _DWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v2 = (uint64_t *)result;
  if (*((_DWORD *)result + 3))
  {
    v3 = result + 8;
    if (!*((_DWORD *)result + 2)
      || (v4 = *(_QWORD *)result,
          v5 = *a2,
          *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2),
          *(_OWORD *)v4 = v5,
          !*((_DWORD *)result + 2)))
    {
      v6 = *(_QWORD *)result;
      v7 = *a2;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v6 = v7;
    }
  }
  else
  {
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
    *((_DWORD *)result + 2) = 0;
    v3 = result + 8;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), 1uLL, 24);
    v8 = *v2;
    *(_OWORD *)v8 = v9;
    *(_QWORD *)(v8 + 16) = v10;
  }
  *v3 = 1;
  return result;
}

unint64_t sub_1C6014924(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 88 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C63C40D0(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C63C40D0(a1, v5);
    }
  }
  return a2;
}

void sub_1C601498C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 88 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_DWORD *)v8 = *(_DWORD *)(v6 + v5);
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + v5 + 8);
      *(_QWORD *)(a2 + v5 + 16) = a2 + v5 + 32;
      *(_QWORD *)(v8 + 24) = 0x200000000;
      if (*(_DWORD *)(v6 + v5 + 24))
        sub_1C6014A70(a2 + v5 + 16, v9 + 16);
      *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
      v5 += 88;
    }
    while (v9 + 88 != v7);
    v10 = *((_DWORD *)a1 + 2);
    if (v10)
    {
      v11 = *a1;
      v12 = 88 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 72);
        if ((void *)(v11 + v12 - 56) != v13)
          free(v13);
        v12 -= 88;
      }
      while (v12);
    }
  }
}

uint64_t sub_1C6014A70(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 24 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 24);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 24 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 24 * v8), (const void *)(*(_QWORD *)a2 + 24 * v8), *(_QWORD *)a2 + 24 * v9 - (*(_QWORD *)a2 + 24 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

_DWORD *sub_1C6014BB4(_DWORD *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_DWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2 = -1;
          v2 += 2;
          v3 -= 8;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C476BF54(result);
    }
  }
  return result;
}

double sub_1C6014C04(__n128 *a1, unint64_t a2, uint64_t a3, char a4, __n128 FragmentInfo)
{
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t n128_u64;
  __n128 *v26;
  __n128 *v27;
  unint64_t v28;
  __n128 *v31;
  unint64_t v32;
  BOOL v34;
  __n128 *v36;
  __n128 *v37;
  unint64_t v38;
  __n128 *v41;
  uint64_t v42;
  __n128 *v45;
  BOOL v46;
  __n128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __n128 *v52;
  __n128 *v53;
  unint64_t v54;
  __n128 *v55;
  __n128 *v56;
  unint64_t v57;
  __n128 *v58;
  unint64_t v59;
  __n128 *v60;
  uint64_t v61;
  __n128 *v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  __n128 *v66;
  uint64_t v67;
  __n128 *v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  __n128 *v76;
  uint64_t v77;
  __n128 *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  __n128 *v84;
  unint64_t v85;
  unint64_t v86;
  _BOOL4 v87;
  BOOL v88;
  __n128 *v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _BOOL4 v99;
  BOOL v100;
  unint64_t v101;
  BOOL v102;
  __n128 *v103;
  uint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL4 v111;
  BOOL v112;
  __n128 *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __n128 *v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  __n128 *v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  BOOL v126;
  __n128 *v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v132;
  unint64_t v133;
  unint64_t v134;
  __n128 *v135;
  uint64_t v136;
  __n128 *v138;
  __n128 *v139;
  unint64_t v141;
  __n128 *v142;
  __n128 v143;
  int8x16_t v144;
  char v145;
  __n128 v146;
  char v147;

__n128 sub_1C6015A9C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 a6)
{
  __n128 result;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int8x16_t v21;
  char v22;
  int8x16_t v23;
  char v24;

  result.n128_u64[0] = sub_1C6016178(a1, a2, a3, a4, a6).n128_u64[0];
  v12 = a5->n128_u64[1];
  v13 = a4->n128_u64[1];
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (v14)
  {
    if (!v13)
      return result;
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v12 + 24), *(uint64_t **)(v12 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v13 + 24), (uint64_t *)*(_QWORD *)(v13 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1])
        return result;
    }
    else if (!v22)
    {
      return result;
    }
  }
  result = *a4;
  *a4 = *a5;
  *a5 = result;
  v15 = a4->n128_u64[1];
  v16 = a3->n128_u64[1];
  if (v15 && v16)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v16 + 24), (uint64_t *)*(_QWORD *)(v16 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1])
        return result;
    }
    else if (!v22)
    {
      return result;
    }
  }
  else if (!v16)
  {
    return result;
  }
  result = *a3;
  *a3 = *a4;
  *a4 = result;
  v17 = a3->n128_u64[1];
  v18 = a2->n128_u64[1];
  if (v17 && v18)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v17 + 24), *(uint64_t **)(v17 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v18 + 24), (uint64_t *)*(_QWORD *)(v18 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1])
        return result;
    }
    else if (!v22)
    {
      return result;
    }
  }
  else if (!v18)
  {
    return result;
  }
  result = *a2;
  *a2 = *a3;
  *a3 = result;
  v19 = a2->n128_u64[1];
  v20 = a1->n128_u64[1];
  if (v19 && v20)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v19 + 24), *(uint64_t **)(v19 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v20 + 24), (uint64_t *)*(_QWORD *)(v20 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1])
        return result;
    }
    else if (!v22)
    {
      return result;
    }
  }
  else if (!v20)
  {
    return result;
  }
  result = *a1;
  *a1 = *a2;
  *a2 = result;
  return result;
}

__n128 sub_1C6015C88(__n128 *a1, __n128 *a2, __n128 *a3, __n128 result)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t v19;
  char v20;
  int8x16_t v21;
  char v22;

  v7 = a2->n128_u64[1];
  v8 = a1->n128_u64[1];
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (!v8)
      goto LABEL_31;
    goto LABEL_7;
  }
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v7 + 24), *(uint64_t **)(v7 + 32), &v21);
  result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v8 + 24), (uint64_t *)*(_QWORD *)(v8 + 32), &v19).u64[0];
  if (v22)
    v12 = v20 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    if (v21.i64[1] >= (unint64_t)v19.i64[1])
      goto LABEL_31;
LABEL_7:
    v10 = a3->n128_u64[1];
    if (v7)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (!v7)
        goto LABEL_24;
    }
    else
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), &v21);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v7 + 24), *(uint64_t **)(v7 + 32), &v19);
      if (v22 && v20)
      {
        if (v21.i64[1] >= (unint64_t)v19.i64[1])
          goto LABEL_24;
      }
      else if (!v20)
      {
LABEL_24:
        result = *a1;
        *a1 = *a2;
        *a2 = result;
        v13 = a3->n128_u64[1];
        v14 = a2->n128_u64[1];
        if (v13 && v14)
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v13 + 24), *(uint64_t **)(v13 + 32), &v21);
          result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v14 + 24), (uint64_t *)*(_QWORD *)(v14 + 32), &v19).u64[0];
          if (v22 && v20)
          {
            if (v21.i64[1] >= (unint64_t)v19.i64[1])
              return result;
          }
          else if (!v20)
          {
            return result;
          }
        }
        else if (!v14)
        {
          return result;
        }
        result = *a2;
        *a2 = *a3;
LABEL_57:
        *a3 = result;
        return result;
      }
    }
    result = *a1;
    *a1 = *a3;
    goto LABEL_57;
  }
  if (v20)
    goto LABEL_7;
LABEL_31:
  v15 = a3->n128_u64[1];
  if (v7)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (v16)
  {
    if (!v7)
      return result;
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v21);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v7 + 24), (uint64_t *)*(_QWORD *)(v7 + 32), &v19).u64[0];
    if (v22 && v20)
    {
      if (v21.i64[1] >= (unint64_t)v19.i64[1])
        return result;
    }
    else if (!v20)
    {
      return result;
    }
  }
  result = *a2;
  *a2 = *a3;
  *a3 = result;
  v17 = a2->n128_u64[1];
  v18 = a1->n128_u64[1];
  if (v17 && v18)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v17 + 24), *(uint64_t **)(v17 + 32), &v21);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v18 + 24), (uint64_t *)*(_QWORD *)(v18 + 32), &v19).u64[0];
    if (v22 && v20)
    {
      if (v21.i64[1] >= (unint64_t)v19.i64[1])
        return result;
    }
    else if (!v20)
    {
      return result;
    }
LABEL_59:
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    return result;
  }
  if (v18)
    goto LABEL_59;
  return result;
}

BOOL sub_1C6015ED0(__n128 *a1, __n128 *a2, __n128 a3)
{
  __n128 *v3;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  int8x16_t v25;
  char v26;
  int8x16_t v27;
  char v28;

  v3 = a2;
  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2[-1].n128_i64[1];
      v8 = a1->n128_u64[1];
      if (v7)
        v9 = v8 == 0;
      else
        v9 = 1;
      if (!v9)
      {
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v7 + 24), *(uint64_t **)(v7 + 32), &v27);
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8 + 24), *(uint64_t **)(v8 + 32), &v25);
        if (v28 && v26)
        {
          if (v27.i64[1] >= (unint64_t)v25.i64[1])
            return 1;
        }
        else if (!v26)
        {
          return 1;
        }
        goto LABEL_53;
      }
      if (v8)
      {
LABEL_53:
        v23 = *a1;
        *a1 = v3[-1];
        v3[-1] = v23;
        return 1;
      }
      return result;
    case 3:
      sub_1C6015C88(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C6016178(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C6015A9C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C6015C88(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (&a1[3] == v3)
        return 1;
      v12 = 0;
      v13 = 0;
      v24 = v3;
      break;
  }
LABEL_11:
  v14 = v11->n128_u64[1];
  v15 = v10->n128_u64[1];
  if (v14)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (v16)
  {
    if (!v15)
      goto LABEL_42;
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v14 + 24), *(uint64_t **)(v14 + 32), &v27);
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v25);
    if (v28)
      v17 = v26 == 0;
    else
      v17 = 1;
    if (v17)
    {
      if (!v26)
        goto LABEL_42;
    }
    else if (v27.i64[1] >= (unint64_t)v25.i64[1])
    {
      goto LABEL_42;
    }
  }
  v19 = v11->n128_u64[0];
  v18 = v11->n128_u64[1];
  *v11 = *v10;
  v20 = a1;
  if (v10 == a1)
    goto LABEL_41;
  v21 = v12;
  while (1)
  {
    v22 = *(uint64_t *)((char *)&a1[1].n128_i64[1] + v21);
    if (v18 && v22)
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v18 + 24), *(uint64_t **)(v18 + 32), &v27);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v22 + 24), *(uint64_t **)(v22 + 32), &v25);
      if (v28 && v26)
      {
        if (v27.i64[1] >= (unint64_t)v25.i64[1])
        {
          v20 = (__n128 *)((char *)a1 + v21 + 32);
          goto LABEL_40;
        }
      }
      else if (!v26)
      {
LABEL_39:
        v20 = v10;
LABEL_40:
        v3 = v24;
LABEL_41:
        v20->n128_u64[0] = v19;
        v20->n128_u64[1] = v18;
        if (++v13 == 8)
          return &v11[1] == v3;
LABEL_42:
        v10 = v11;
        v12 += 16;
        if (++v11 == v3)
          return 1;
        goto LABEL_11;
      }
    }
    else if (!v22)
    {
      goto LABEL_39;
    }
    --v10;
    *(__n128 *)((char *)a1 + v21 + 32) = *(__n128 *)((char *)a1 + v21 + 16);
    v21 -= 16;
    if (v21 == -32)
    {
      v20 = a1;
      goto LABEL_40;
    }
  }
}

__n128 sub_1C6016178(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 a5)
{
  __n128 result;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x16_t v17;
  char v18;
  int8x16_t v19;
  char v20;

  result.n128_u64[0] = sub_1C6015C88(a1, a2, a3, a5).n128_u64[0];
  v10 = a4->n128_u64[1];
  v11 = a3->n128_u64[1];
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (v12)
  {
    if (!v11)
      return result;
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), &v19);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v11 + 24), (uint64_t *)*(_QWORD *)(v11 + 32), &v17).u64[0];
    if (v20 && v18)
    {
      if (v19.i64[1] >= (unint64_t)v17.i64[1])
        return result;
    }
    else if (!v18)
    {
      return result;
    }
  }
  result = *a3;
  *a3 = *a4;
  *a4 = result;
  v13 = a3->n128_u64[1];
  v14 = a2->n128_u64[1];
  if (v13 && v14)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v13 + 24), *(uint64_t **)(v13 + 32), &v19);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v14 + 24), (uint64_t *)*(_QWORD *)(v14 + 32), &v17).u64[0];
    if (v20 && v18)
    {
      if (v19.i64[1] >= (unint64_t)v17.i64[1])
        return result;
    }
    else if (!v18)
    {
      return result;
    }
  }
  else if (!v14)
  {
    return result;
  }
  result = *a2;
  *a2 = *a3;
  *a3 = result;
  v15 = a2->n128_u64[1];
  v16 = a1->n128_u64[1];
  if (v15 && v16)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v19);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v16 + 24), (uint64_t *)*(_QWORD *)(v16 + 32), &v17).u64[0];
    if (v20 && v18)
    {
      if (v19.i64[1] >= (unint64_t)v17.i64[1])
        return result;
    }
    else if (!v18)
    {
      return result;
    }
  }
  else if (!v16)
  {
    return result;
  }
  result = *a1;
  *a1 = *a2;
  *a2 = result;
  return result;
}

void sub_1C60162F8(uint64_t a1, uint64_t a2, llvm::Twine *a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  char *v11;
  char **v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t i;
  char **v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  void *__p[2];
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;

  sub_1C613932C((uint64_t)v48, *(_QWORD *)(a1 + 8));
  v6 = 0;
  do
  {
    if ((unint64_t)a2 <= 0x3F)
    {
      ++v6;
LABEL_7:
      v8 = 0;
      v9 = 1;
      goto LABEL_9;
    }
    v7 = ((unint64_t)a2 >> 6) & 1;
    if (a2 >> 7 != -1)
      LODWORD(v7) = 0;
    ++v6;
    if ((_DWORD)v7 == 1)
      goto LABEL_7;
    v9 = 0;
    v8 = 0x80;
LABEL_9:
    v10 = v8 | a2 & 0x7F;
    v11 = v51;
    if ((unint64_t)v51 >= v50)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v48, v10);
    }
    else
    {
      ++v51;
      *v11 = v10;
    }
    a2 >>= 7;
  }
  while (!v9);
  if (*(_BYTE *)(a1 + 24))
  {
    v12 = *(char ***)(a1 + 16);
    llvm::Twine::str(a3, __p);
    v13 = (unint64_t)v12[1];
    v14 = (unint64_t)v12[2];
    if (v13 >= v14)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)*v12) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_57:
        abort();
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)*v12) >> 3);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      else
        v20 = v18;
      v57 = v12 + 2;
      if (v20)
      {
        if (v20 > 0xAAAAAAAAAAAAAAALL)
LABEL_58:
          sub_1C4764EE4();
        v21 = (char *)operator new(24 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[24 * v17];
      *((_QWORD *)v22 + 2) = v47;
      *(_OWORD *)v22 = *(_OWORD *)__p;
      __p[1] = 0;
      v47 = 0;
      __p[0] = 0;
      v24 = *v12;
      v23 = v12[1];
      if (v23 == *v12)
      {
        v27 = v12[1];
        v25 = &v21[24 * v17];
      }
      else
      {
        v25 = &v21[24 * v17];
        do
        {
          v26 = *(_OWORD *)(v23 - 24);
          *((_QWORD *)v25 - 1) = *((_QWORD *)v23 - 1);
          *(_OWORD *)(v25 - 24) = v26;
          v25 -= 24;
          *((_QWORD *)v23 - 2) = 0;
          *((_QWORD *)v23 - 1) = 0;
          *((_QWORD *)v23 - 3) = 0;
          v23 -= 24;
        }
        while (v23 != v24);
        v27 = *v12;
        v23 = v12[1];
      }
      v16 = v22 + 24;
      *v12 = v25;
      v53 = v27;
      v54 = v27;
      v12[1] = v22 + 24;
      v55 = v23;
      v28 = v12[2];
      v12[2] = &v21[24 * v20];
      v56 = v28;
      sub_1C4D868F0((uint64_t)&v53);
    }
    else
    {
      v15 = *(_OWORD *)__p;
      *(_QWORD *)(v13 + 16) = v47;
      *(_OWORD *)v13 = v15;
      __p[1] = 0;
      v47 = 0;
      __p[0] = 0;
      v16 = (char *)(v13 + 24);
    }
    v12[1] = v16;
    if (SHIBYTE(v47) < 0)
      operator delete(__p[0]);
    if (v6 >= 2)
    {
      for (i = 1; i != v6; ++i)
      {
        v30 = *(char ***)(a1 + 16);
        v31 = (unint64_t)v30[1];
        v32 = (unint64_t)v30[2];
        if (v31 >= v32)
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)*v30) >> 3);
          v35 = v34 + 1;
          if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_57;
          v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)*v30) >> 3);
          if (2 * v36 > v35)
            v35 = 2 * v36;
          if (v36 >= 0x555555555555555)
            v37 = 0xAAAAAAAAAAAAAAALL;
          else
            v37 = v35;
          v57 = v30 + 2;
          if (v37)
          {
            if (v37 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_58;
            v38 = (char *)operator new(24 * v37);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[24 * v34];
          *(_QWORD *)v39 = 0;
          v39[23] = 0;
          v41 = *v30;
          v40 = v30[1];
          if (v40 == *v30)
          {
            v44 = v30[1];
            v42 = &v38[24 * v34];
          }
          else
          {
            v42 = &v38[24 * v34];
            do
            {
              v43 = *(_OWORD *)(v40 - 24);
              *((_QWORD *)v42 - 1) = *((_QWORD *)v40 - 1);
              *(_OWORD *)(v42 - 24) = v43;
              v42 -= 24;
              *((_QWORD *)v40 - 2) = 0;
              *((_QWORD *)v40 - 1) = 0;
              *((_QWORD *)v40 - 3) = 0;
              v40 -= 24;
            }
            while (v40 != v41);
            v44 = *v30;
            v40 = v30[1];
          }
          v33 = v39 + 24;
          *v30 = v42;
          v53 = v44;
          v54 = v44;
          v30[1] = v39 + 24;
          v55 = v40;
          v45 = v30[2];
          v30[2] = &v38[24 * v37];
          v56 = v45;
          sub_1C4D868F0((uint64_t)&v53);
        }
        else
        {
          *(_QWORD *)v31 = 0;
          *(_BYTE *)(v31 + 23) = 0;
          v33 = (char *)(v31 + 24);
        }
        v30[1] = v33;
      }
    }
  }
  v48[0] = off_1E81A6E70;
  if (v52 == 1)
  {
    if (v49)
      MEMORY[0x1CAA32F9C](v49, 0x1000C8077774924);
  }
}

void sub_1C60166C8(uint64_t a1, unint64_t a2, llvm::Twine *a3, unsigned int a4)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  char v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  char **v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t i;
  char **v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  void *__p[2];
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  char *v58;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;

  sub_1C613932C((uint64_t)v55, *(_QWORD *)(a1 + 8));
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = v8 < a4 || a2 > 0x7F;
    if (v10)
      v11 = 0x80;
    else
      v11 = 0;
    v12 = v11 & 0x80 | a2 & 0x7F;
    v13 = v58;
    if ((unint64_t)v58 >= v57)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v55, v12);
    }
    else
    {
      ++v58;
      *v13 = v12;
    }
    v8 = v9 + 1;
    v10 = a2 > 0x7F;
    a2 >>= 7;
  }
  while (v10);
  v14 = v9;
  if (v9 < a4)
  {
    v15 = a4 - 1;
    if (v9 < a4 - 1)
    {
      v16 = a4 - v8;
      do
      {
        v17 = v58;
        if ((unint64_t)v58 >= v57)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v55, 128);
        }
        else
        {
          ++v58;
          *v17 = 0x80;
        }
        --v16;
      }
      while (v16);
      v14 = v15;
    }
    v18 = v58;
    if ((unint64_t)v58 >= v57)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v55, 0);
    }
    else
    {
      ++v58;
      *v18 = 0;
    }
    ++v14;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v19 = *(char ***)(a1 + 16);
    llvm::Twine::str(a3, __p);
    v20 = (unint64_t)v19[1];
    v21 = (unint64_t)v19[2];
    if (v20 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)*v19) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_68:
        abort();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)*v19) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v64 = v19 + 2;
      if (v27)
      {
        if (v27 > 0xAAAAAAAAAAAAAAALL)
LABEL_69:
          sub_1C4764EE4();
        v28 = (char *)operator new(24 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[24 * v24];
      *((_QWORD *)v29 + 2) = v54;
      *(_OWORD *)v29 = *(_OWORD *)__p;
      __p[1] = 0;
      v54 = 0;
      __p[0] = 0;
      v31 = *v19;
      v30 = v19[1];
      if (v30 == *v19)
      {
        v34 = v19[1];
        v32 = &v28[24 * v24];
      }
      else
      {
        v32 = &v28[24 * v24];
        do
        {
          v33 = *(_OWORD *)(v30 - 24);
          *((_QWORD *)v32 - 1) = *((_QWORD *)v30 - 1);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          *((_QWORD *)v30 - 2) = 0;
          *((_QWORD *)v30 - 1) = 0;
          *((_QWORD *)v30 - 3) = 0;
          v30 -= 24;
        }
        while (v30 != v31);
        v34 = *v19;
        v30 = v19[1];
      }
      v23 = v29 + 24;
      *v19 = v32;
      v60 = v34;
      v61 = v34;
      v19[1] = v29 + 24;
      v62 = v30;
      v35 = v19[2];
      v19[2] = &v28[24 * v27];
      v63 = v35;
      sub_1C4D868F0((uint64_t)&v60);
    }
    else
    {
      v22 = *(_OWORD *)__p;
      *(_QWORD *)(v20 + 16) = v54;
      *(_OWORD *)v20 = v22;
      __p[1] = 0;
      v54 = 0;
      __p[0] = 0;
      v23 = (char *)(v20 + 24);
    }
    v19[1] = v23;
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
    if (v14 >= 2)
    {
      for (i = 1; i != v14; ++i)
      {
        v37 = *(char ***)(a1 + 16);
        v38 = (unint64_t)v37[1];
        v39 = (unint64_t)v37[2];
        if (v38 >= v39)
        {
          v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)*v37) >> 3);
          v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_68;
          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)*v37) >> 3);
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x555555555555555)
            v44 = 0xAAAAAAAAAAAAAAALL;
          else
            v44 = v42;
          v64 = v37 + 2;
          if (v44)
          {
            if (v44 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_69;
            v45 = (char *)operator new(24 * v44);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[24 * v41];
          *(_QWORD *)v46 = 0;
          v46[23] = 0;
          v48 = *v37;
          v47 = v37[1];
          if (v47 == *v37)
          {
            v51 = v37[1];
            v49 = &v45[24 * v41];
          }
          else
          {
            v49 = &v45[24 * v41];
            do
            {
              v50 = *(_OWORD *)(v47 - 24);
              *((_QWORD *)v49 - 1) = *((_QWORD *)v47 - 1);
              *(_OWORD *)(v49 - 24) = v50;
              v49 -= 24;
              *((_QWORD *)v47 - 2) = 0;
              *((_QWORD *)v47 - 1) = 0;
              *((_QWORD *)v47 - 3) = 0;
              v47 -= 24;
            }
            while (v47 != v48);
            v51 = *v37;
            v47 = v37[1];
          }
          v40 = v46 + 24;
          *v37 = v49;
          v60 = v51;
          v61 = v51;
          v37[1] = v46 + 24;
          v62 = v47;
          v52 = v37[2];
          v37[2] = &v45[24 * v44];
          v63 = v52;
          sub_1C4D868F0((uint64_t)&v60);
        }
        else
        {
          *(_QWORD *)v38 = 0;
          *(_BYTE *)(v38 + 23) = 0;
          v40 = (char *)(v38 + 24);
        }
        v37[1] = v40;
      }
    }
  }
  v55[0] = off_1E81A6E70;
  if (v59 == 1)
  {
    if (v56)
      MEMORY[0x1CAA32F9C](v56, 0x1000C8077774924);
  }
}

uint64_t sub_1C6016B00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), a3, 1);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), a2, 1);
}

_QWORD *sub_1C6016B54(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v11 = *(_QWORD *)a2;
    v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
    result = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
    v14 = *result;
    if (*a3 == *result)
    {
LABEL_6:
      v12 = 0;
      goto LABEL_4;
    }
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = result;
      v18 = v13 + v16++;
      v13 = v18 & (v8 - 1);
      result = (_QWORD *)(v11 + 16 * v13);
      v14 = *result;
      if (*a3 == *result)
        goto LABEL_6;
    }
    if (v15)
      v9 = v15;
    else
      v9 = result;
  }
  else
  {
    v9 = 0;
  }
  result = sub_1C5960324(a2, (uint64_t)a3, a3, v9);
  *result = *a3;
  *((_DWORD *)result + 2) = *a4;
  v11 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v12 = 1;
LABEL_4:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v11 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_1C6016C44(void **a1)
{
  void **v3;

  v3 = a1 + 7;
  sub_1C4765410(&v3);
  if (*a1 != a1 + 3)
    free(*a1);
  return MEMORY[0x1CAA32FC0](a1, 0x10A0C40A6FFF1EALL);
}

void sub_1C6016CA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unsigned __int8 *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t (**v21)();
  int v22;
  char v23;

  if (a2)
  {
    v4 = a1;
    v5 = a1 + 40 * a2;
    v6 = (unint64_t *)(a3 + 168);
    do
    {
      v7 = *(unsigned __int8 **)v4;
      v8 = *(_QWORD *)(v4 + 8);
      v9 = *(_DWORD *)(v4 + 16);
      v19[0] = *(_QWORD *)v4;
      v19[1] = v8;
      v20 = *(_OWORD *)(v4 + 24);
      v21 = &off_1E81AB528;
      v23 = 1;
      v22 = v9;
      v10 = *(unsigned int *)(a3 + 176);
      v11 = *(_QWORD *)(a3 + 168);
      if (v10 >= *(_DWORD *)(a3 + 180))
      {
        v16 = v10 + 1;
        v17 = v11 + 48 * v10 > (unint64_t)v19;
        if (v11 <= (unint64_t)v19 && v17)
        {
          v18 = (char *)v19 - v11;
          sub_1C63C4474((uint64_t)v6, v16);
          v11 = *v6;
          v12 = &v18[*v6];
          goto LABEL_5;
        }
        sub_1C63C4474((uint64_t)v6, v16);
        v11 = *v6;
      }
      v12 = (char *)v19;
LABEL_5:
      v13 = v11 + 48 * *(unsigned int *)(a3 + 176);
      v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *(_OWORD *)(v13 + 16) = v14;
      *(_QWORD *)(v13 + 32) = &off_1E81AB548;
      v15 = *((_DWORD *)v12 + 10);
      *(_BYTE *)(v13 + 44) = v12[44];
      *(_DWORD *)(v13 + 40) = v15;
      *(_QWORD *)(v13 + 32) = &off_1E81AB528;
      ++*(_DWORD *)(a3 + 176);
      llvm::cl::AddLiteralOption(*(_QWORD *)(a3 + 160), v7, v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
}

void sub_1C6016DF0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C63C46D8(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C6016E34(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED829A40 >= HIDWORD(qword_1ED829A40))
  {
    v3 = qword_1ED829A40 + 1;
    if (qword_1ED829A38 <= a1 && qword_1ED829A38 + 48 * (unint64_t)qword_1ED829A40 > a1)
    {
      v5 = a1 - qword_1ED829A38;
      sub_1C63C478C(v3);
      return qword_1ED829A38 + v5;
    }
    else
    {
      sub_1C63C478C(v3);
    }
  }
  return a1;
}

void sub_1C6016EA8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C63C4CB4(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C6016EEC(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1EF8F5948 >= HIDWORD(qword_1EF8F5948))
  {
    v3 = qword_1EF8F5948 + 1;
    if (qword_1EF8F5940 <= a1 && qword_1EF8F5940 + 48 * (unint64_t)qword_1EF8F5948 > a1)
    {
      v5 = a1 - qword_1EF8F5940;
      sub_1C63C4D68(v3);
      return qword_1EF8F5940 + v5;
    }
    else
    {
      sub_1C63C4D68(v3);
    }
  }
  return a1;
}

void sub_1C6016F60(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C63C4FE0(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C6016FA4(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1EF8F5BA0 >= HIDWORD(qword_1EF8F5BA0))
  {
    v3 = qword_1EF8F5BA0 + 1;
    if (qword_1EF8F5B98 <= a1 && qword_1EF8F5B98 + 48 * (unint64_t)qword_1EF8F5BA0 > a1)
    {
      v5 = a1 - qword_1EF8F5B98;
      sub_1C63C5094(v3);
      return qword_1EF8F5B98 + v5;
    }
    else
    {
      sub_1C63C5094(v3);
    }
  }
  return a1;
}

void sub_1C6017018(uint64_t a1, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  unint64_t v22;
  int8x16_t *v23;
  unint64_t v24;
  int8x16_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  int8x16_t *v37;
  unint64_t v38;
  int8x16_t *v39;
  unint64_t v40;
  int8x16_t *v41;
  int8x16_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t *v48;
  unint64_t v49;
  unint64_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  unint64_t v54;
  int8x16_t v55;
  unint64_t v56;
  int8x16_t v57;
  unint64_t v58;
  int8x16_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  int8x16_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  __int128 *v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int8x16_t *v98;
  unint64_t v99;
  int8x16_t *v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  unint64_t v108;
  __int128 *i8;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v115;
  int8x16_t v116;
  int8x16_t v117;

void sub_1C6017B68(__int128 *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;

  v6 = *((_QWORD *)a2 + 1);
  v7 = *(uint64_t **)(v6 + 24);
  v8 = *(uint64_t **)(v6 + 32);
  llvm::DIExpression::getFragmentInfo(v7, v8, &v19);
  v9 = v19.u64[1];
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((_QWORD *)a1 + 1) + 24), *(uint64_t **)(*((_QWORD *)a1 + 1) + 32), &v18);
  if (v9 >= v18.i64[1])
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((_QWORD *)a3 + 1) + 24), *(uint64_t **)(*((_QWORD *)a3 + 1) + 32), &v19);
    v12 = v19.u64[1];
    llvm::DIExpression::getFragmentInfo(v7, v8, &v18);
    if (v12 < v18.i64[1])
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((_QWORD *)a2 + 1) + 24), *(uint64_t **)(*((_QWORD *)a2 + 1) + 32), &v19);
      v14 = v19.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((_QWORD *)a1 + 1) + 24), *(uint64_t **)(*((_QWORD *)a1 + 1) + 32), &v18);
      if (v14 < v18.i64[1])
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((_QWORD *)a3 + 1) + 24), *(uint64_t **)(*((_QWORD *)a3 + 1) + 32), &v19);
    v10 = v19.u64[1];
    llvm::DIExpression::getFragmentInfo(v7, v8, &v18);
    if (v10 >= v18.i64[1])
    {
      v16 = *a1;
      *a1 = *a2;
      *a2 = v16;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((_QWORD *)a3 + 1) + 24), *(uint64_t **)(*((_QWORD *)a3 + 1) + 32), &v19);
      v17 = v19.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((_QWORD *)a2 + 1) + 24), *(uint64_t **)(*((_QWORD *)a2 + 1) + 32), &v18);
      if (v17 >= v18.i64[1])
        return;
      v11 = *a2;
      *a2 = *a3;
    }
    else
    {
      v11 = *a1;
      *a1 = *a3;
    }
    *a3 = v11;
  }
}

BOOL sub_1C6017CF0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  int8x16_t v30;
  int8x16_t v31;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(a2 - 1) + 24), *(uint64_t **)(*(a2 - 1) + 32), &v31);
      v6 = v31.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 32), &v30);
      if (v6 < v30.i64[1])
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_1C6017B68((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)a2 - 1);
      return 1;
    case 4:
      sub_1C6017FE0(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      v19 = (__int128 *)(a1 + 16);
      v20 = (__int128 *)(a1 + 32);
      v21 = (__int128 *)(a1 + 48);
      sub_1C6017FE0(a1, a1 + 16, a1 + 32, a1 + 48);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(a2 - 1) + 24), *(uint64_t **)(*(a2 - 1) + 32), &v31);
      v22 = v31.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 56) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 56) + 32), &v30);
      if (v22 < v30.i64[1])
      {
        v23 = *v21;
        *v21 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v23;
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 56) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 56) + 32), &v31);
        v24 = v31.u64[1];
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 40) + 32), &v30);
        if (v24 < v30.i64[1])
        {
          v25 = *v20;
          *v20 = *v21;
          *v21 = v25;
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 40) + 32), &v31);
          v26 = v31.u64[1];
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 24) + 32), &v30);
          if (v26 < v30.i64[1])
          {
            v27 = *v19;
            *v19 = *v20;
            *v20 = v27;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 24) + 32), &v31);
            v28 = v31.u64[1];
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 32), &v30);
            if (v28 < v30.i64[1])
            {
              v29 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *v19 = v29;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (_QWORD *)(a1 + 32);
      sub_1C6017B68((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v9 = (_QWORD *)(a1 + 48);
      if ((_QWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 48;
      break;
  }
  while (1)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9[1] + 24), *(uint64_t **)(v9[1] + 32), &v31);
    v12 = v31.u64[1];
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8[1] + 24), *(uint64_t **)(v8[1] + 32), &v30);
    if (v12 < v30.i64[1])
    {
      v13 = *v9;
      v14 = v9[1];
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(a1 + v15) = *(_OWORD *)(a1 + v15 - 16);
        v15 -= 16;
        if (!v15)
          break;
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v14 + 24), *(uint64_t **)(v14 + 32), &v31);
        v17 = v31.u64[1];
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(v16 - 24) + 24), *(uint64_t **)(*(_QWORD *)(v16 - 24) + 32), &v30);
        if (v17 >= v30.i64[1])
        {
          v18 = (_QWORD *)(a1 + v15);
          goto LABEL_13;
        }
      }
      v18 = (_QWORD *)a1;
LABEL_13:
      *v18 = v13;
      v18[1] = v14;
      if (++v10 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v11 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

int8x16_t sub_1C6017FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  int8x16_t result;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;

  sub_1C6017B68((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a4 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a4 + 8) + 32), &v15);
  v8 = v15.u64[1];
  result.i64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24), (uint64_t *)*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32), &v14).u64[0];
  if (v8 < v14.i64[1])
  {
    v10 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a3 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a3 + 8) + 32), &v15);
    v11 = v15.u64[1];
    result.i64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24), (uint64_t *)*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32), &v14).u64[0];
    if (v11 < v14.i64[1])
    {
      v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a2 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a2 + 8) + 32), &v15);
      v13 = v15.u64[1];
      result.i64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t *)*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), &v14).u64[0];
      if (v13 < v14.i64[1])
      {
        result = *(int8x16_t *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(int8x16_t *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1C60180E4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t i;
  int v3;

  for (i = 5381; a2; --a2)
  {
    v3 = *a1++;
    i = (33 * i + v3);
  }
  return i;
}

void **sub_1C6018108(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v8 = result;
    v3 = 16 * v2;
    v4 = (char *)(v1 - 2);
    do
    {
      v5 = *(_QWORD **)&v4[v3];
      *(_QWORD *)&v4[v3] = 0;
      if (v5)
      {
        v6 = sub_1C6020570(v5);
        MEMORY[0x1CAA32FC0](v6, 0x10F1C401404827BLL);
      }
      v3 -= 16;
    }
    while (v3);
    result = v8;
    v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

_QWORD *sub_1C6018198(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63C5168(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C6018250(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C60182E8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63C5340(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C60183AC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63C5578(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C6018464(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C60184F0((uint64_t *)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C60185D8(a2, (uint64_t)a3, a3, v10);
    v7 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C60184F0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;
  uint64_t result;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = a2[1];
    v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (_QWORD *)(*a1 + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    if (*a2 == *v12 && v5 == v14)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18 && v13 == -8192)
          v16 = v12;
        v20 = v11 + v17++;
        v11 = v20 & v10;
        v12 = (_QWORD *)(v4 + 16 * (v20 & v10));
        v13 = *v12;
        v14 = v12[1];
        if (*a2 == *v12 && v5 == v14)
          goto LABEL_22;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
  *a3 = v12;
  return result;
}

_QWORD *sub_1C60185D8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_7;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_7:
    sub_1C6018694(a1, v7);
    v9 = 0;
    sub_1C60184F0((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C6018694(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C6018754(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C85F2160, 16 * v10);
}

void sub_1C6018754(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    memset_pattern16(*(void **)a1, &unk_1C85F2160, 16 * v6);
  while (a2 != a3)
  {
    v7 = a2[1];
    if ((*a2 != -4096 || v7 != -4096) && (*a2 != -8192 || v7 != -8192))
    {
      v9 = 0;
      sub_1C60184F0((uint64_t *)a1, a2, &v9);
      v8 = v9;
      *v9 = *a2;
      v8[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 2;
  }
}

uint64_t sub_1C6018810(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[13];

  v15[12] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63C58CC(a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      v9[2] = *(_QWORD *)(a1 + v8 + 24);
      v9 += 3;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C63C58CC(a1, v15, v9);
}

void sub_1C60189BC(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v14 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v14);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = v6;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      v11 = *(_QWORD *)(v10 + v6);
      *(_QWORD *)(v10 + v6) = 0;
      if (v11)
      {
        v13 = v6;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v6 = v13;
      }
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v12 = v14;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v12;
}

void sub_1C6018A80(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 88 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      v10 = *(_QWORD *)(v6 + v5 + 8);
      *(_QWORD *)v8 = *(_QWORD *)(v6 + v5);
      *(_QWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a2 + v5 + 16) = a2 + v5 + 32;
      *(_QWORD *)(v8 + 24) = 0x200000000;
      if (*(_DWORD *)(v6 + v5 + 24))
        sub_1C6014A70(a2 + v5 + 16, v9 + 16);
      *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
      v5 += 88;
    }
    while (v9 + 88 != v7);
    v11 = *((_DWORD *)a1 + 2);
    if (v11)
    {
      v12 = *a1;
      v13 = 88 * v11;
      do
      {
        v14 = *(void **)(v12 + v13 - 72);
        if ((void *)(v12 + v13 - 56) != v14)
          free(v14);
        v13 -= 88;
      }
      while (v13);
    }
  }
}

void sub_1C6018B5C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_DWORD *)a1 + 2);
  if (!v2)
    return;
  v4 = *a1;
  v5 = *a1 + 112 * v2;
  do
  {
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 16) = a2 + 32;
    *(_QWORD *)(a2 + 24) = 0x100000000;
    v6 = *(_DWORD *)(v4 + 24);
    if (v6)
      v7 = a2 == v4;
    else
      v7 = 1;
    if (v7)
      goto LABEL_21;
    v8 = *(_QWORD *)(v4 + 16);
    if (v8 != v4 + 32)
    {
      sub_1C63C5CB4((char **)(a2 + 16), (char **)(v4 + 16));
      goto LABEL_21;
    }
    if (v6 <= 1)
    {
      v9 = v8 + 80 * v6;
      goto LABEL_10;
    }
    sub_1C63C5A8C(a2 + 16, *(unsigned int *)(v4 + 24));
    v8 = *(_QWORD *)(v4 + 16);
    v16 = *(_DWORD *)(v4 + 24);
    if (v16)
    {
      v9 = v8 + 80 * v16;
LABEL_10:
      v10 = *(_QWORD *)(a2 + 16);
      v11 = v8 + 8;
      do
      {
        v12 = v11 - 8;
        *(_QWORD *)v10 = *(_QWORD *)(v11 - 8);
        *(_QWORD *)(v10 + 8) = v10 + 24;
        *(_QWORD *)(v10 + 16) = 0x200000000;
        if (*(_DWORD *)(v11 + 8))
          sub_1C6014A70(v10 + 8, v11);
        *(_BYTE *)(v10 + 72) = *(_BYTE *)(v11 + 64);
        v10 += 80;
        v11 += 80;
      }
      while (v12 + 80 != v9);
      v8 = *(_QWORD *)(v4 + 16);
    }
    *(_DWORD *)(a2 + 24) = v6;
    v13 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v13)
    {
      v14 = 80 * v13;
      do
      {
        v15 = *(void **)(v8 + v14 - 72);
        if ((void *)(v8 + v14 - 56) != v15)
          free(v15);
        v14 -= 80;
      }
      while (v14);
    }
    *(_DWORD *)(v4 + 24) = 0;
LABEL_21:
    v4 += 112;
    a2 += 112;
  }
  while (v4 != v5);
  v17 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v17)
  {
    v18 = *a1 - 96;
    v19 = 112 * v17;
    do
    {
      sub_1C6018D18((char **)(v18 + v19));
      v19 -= 112;
    }
    while (v19);
  }
}

char **sub_1C6018D18(char **result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char **v7;
  char **v8;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 80 * v2;
    do
    {
      v4 = *(char **)&v1[v3 - 72];
      if (&v1[v3 - 56] != v4)
      {
        v8 = result;
        v5 = v3;
        v6 = v1;
        free(v4);
        v3 = v5;
        v1 = v6;
        result = v8;
      }
      v3 -= 80;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

void sub_1C6018DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 4);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 > *(unsigned int *)(a1 + 12))
  {
    sub_1C63C5A8C(a1, v6 + v7);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (a2 != a3)
  {
    v8 = 0;
    v9 = *(_QWORD *)a1 + 80 * v7;
    do
    {
      v10 = a2 + v8;
      v11 = v9 + v8;
      *(_QWORD *)v11 = *(_QWORD *)(a2 + v8);
      *(_QWORD *)(v9 + v8 + 8) = v9 + v8 + 24;
      *(_QWORD *)(v11 + 16) = 0x200000000;
      if (*(_DWORD *)(a2 + v8 + 16))
        sub_1C6007B78(v9 + v8 + 8, v10 + 8);
      *(_BYTE *)(v11 + 72) = *(_BYTE *)(v10 + 72);
      v8 += 80;
    }
    while (v10 + 80 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

void sub_1C6018E90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 24);
  v4 = 126 - 2 * __clz(v3);
  if ((_DWORD)v3)
    v5 = v4;
  else
    v5 = 0;
  sub_1C6018FD8(v2, (uint64_t *)(v2 + 80 * v3), v5, 1);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = v6 + 80 * v7;
    v10 = 80 * v7 - 80;
    while (v10 != v8)
    {
      v11 = *(_QWORD *)(v6 + v8);
      v12 = *(_QWORD *)(v6 + v8 + 80);
      v8 += 80;
      if (v11 == v12)
      {
        v13 = v6 + v8 - 80;
        v14 = v10 - v8;
        if (v10 != v8)
        {
          v15 = (_BYTE *)(v6 + v8 + 152);
          do
          {
            v16 = *((_QWORD *)v15 - 9);
            if (*(_QWORD *)v13 != v16)
            {
              *(_QWORD *)(v13 + 80) = v16;
              v13 += 80;
              sub_1C6014A70(v13 + 8, (uint64_t)(v15 - 64));
              *(_BYTE *)(v13 + 72) = *v15;
            }
            v15 += 80;
            v14 -= 80;
          }
          while (v14);
          v6 = *(_QWORD *)(a1 + 16);
          LODWORD(v7) = *(_DWORD *)(a1 + 24);
        }
        v9 = v13 + 80;
        break;
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
  }
  v17 = v6 + 80 * v7;
  if (v17 != v9)
  {
    v18 = v9;
    do
    {
      v19 = *(void **)(v17 - 72);
      if ((void *)(v17 - 56) != v19)
        free(v19);
      v17 -= 80;
    }
    while (v17 != v18);
    v6 = *(_QWORD *)(a1 + 16);
    v9 = v18;
  }
  *(_DWORD *)(a1 + 24) = -858993459 * ((unint64_t)(v9 - v6) >> 4);
}

void sub_1C6018FD8(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  _BOOL4 v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  BOOL v89;
  unint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _BYTE v117[48];
  char v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  _BYTE v122[48];
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v102 = a2 - 20;
  v103 = a2 - 10;
  v101 = a2 - 30;
  v7 = a1;
  v108 = a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v7) >> 4);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v99 = *(_QWORD *)v7;
        if (sub_1C63C5D40(*(uint64_t **)(*(a2 - 10) + 24), *(uint64_t **)(*(a2 - 10) + 32), *(_QWORD *)v7))
        {
          v119 = v99;
          v120 = v122;
          v121 = 0x200000000;
          if (*(_DWORD *)(v7 + 16))
            sub_1C6014A70((uint64_t)&v120, v7 + 8);
          v123 = *(_BYTE *)(v7 + 72);
          *(_QWORD *)v7 = *(a2 - 10);
          sub_1C6014A70(v7 + 8, (uint64_t)(a2 - 9));
          *(_BYTE *)(v7 + 72) = *((_BYTE *)a2 - 8);
          *(a2 - 10) = v119;
          sub_1C6014A70((uint64_t)(a2 - 9), (uint64_t)&v120);
          *((_BYTE *)a2 - 8) = v123;
          if (v120 != v122)
            free(v120);
        }
        return;
      case 3:
        sub_1C6019D10(v7, v7 + 80, v103);
        return;
      case 4:
        sub_1C601A328(v7, (uint64_t *)(v7 + 80), (uint64_t *)(v7 + 160), v103);
        return;
      case 5:
        sub_1C601A570(v7, v7 + 80, v7 + 160, (uint64_t *)(v7 + 240), v103);
        return;
      default:
        if (v8 > 1919)
        {
          if (!a3)
          {
            if ((uint64_t *)v7 != a2)
            {
              v51 = (unint64_t)(v9 - 2) >> 1;
              v52 = v51;
              do
              {
                v53 = v52;
                if (v51 >= v52)
                {
                  v54 = (2 * v52) | 1;
                  v55 = (uint64_t *)(a1 + 80 * v54);
                  if (2 * v52 + 2 >= v9)
                  {
                    v107 = (uint64_t *)(a1 + 80 * v54);
                    v61 = *v55;
                  }
                  else
                  {
                    v56 = *v55;
                    v58 = v55 + 10;
                    v57 = v55[10];
                    v59 = sub_1C63C5D40(*(uint64_t **)(*v55 + 24), *(uint64_t **)(*v55 + 32), v57);
                    v60 = a1 + 80 * v54;
                    if (v59)
                      v61 = v57;
                    else
                      v61 = v56;
                    if (v59)
                      v60 = (uint64_t)v58;
                    v107 = (uint64_t *)v60;
                    if (v59)
                      v54 = 2 * v53 + 2;
                  }
                  v62 = a1 + 80 * v53;
                  v63 = *(_QWORD *)v62;
                  if (!sub_1C63C5D40(*(uint64_t **)(v61 + 24), *(uint64_t **)(v61 + 32), *(_QWORD *)v62))
                  {
                    v119 = v63;
                    v120 = v122;
                    v121 = 0x200000000;
                    if (*(_DWORD *)(a1 + 80 * v53 + 16))
                    {
                      sub_1C6014A70((uint64_t)&v120, a1 + 80 * v53 + 8);
                      v61 = *v107;
                    }
                    v123 = *(_BYTE *)(a1 + 80 * v53 + 72);
                    while (1)
                    {
                      v64 = v107;
                      *(_QWORD *)v62 = v61;
                      sub_1C6014A70(v62 + 8, (uint64_t)(v107 + 1));
                      *(_BYTE *)(v62 + 72) = *((_BYTE *)v107 + 72);
                      if (v51 < v54)
                        break;
                      v65 = (2 * v54) | 1;
                      v66 = (uint64_t *)(a1 + 80 * v65);
                      v54 = 2 * v54 + 2;
                      if (v54 >= v9)
                      {
                        v107 = (uint64_t *)(a1 + 80 * v65);
                        v61 = *v66;
                        v54 = v65;
                      }
                      else
                      {
                        v61 = *v66;
                        v104 = v66[10];
                        v67 = sub_1C63C5D40(*(uint64_t **)(*v66 + 24), *(uint64_t **)(*v66 + 32), v104);
                        if (v67)
                        {
                          v61 = v104;
                          v66 += 10;
                        }
                        v107 = v66;
                        if (!v67)
                          v54 = v65;
                      }
                      v68 = v119;
                      v62 = (uint64_t)v64;
                      if (sub_1C63C5D40(*(uint64_t **)(v61 + 24), *(uint64_t **)(v61 + 32), v119))
                        goto LABEL_123;
                    }
                    v68 = v119;
LABEL_123:
                    *v64 = v68;
                    sub_1C6014A70((uint64_t)(v64 + 1), (uint64_t)&v120);
                    *((_BYTE *)v64 + 72) = v123;
                    if (v120 != v122)
                      free(v120);
                  }
                }
                v52 = v53 - 1;
              }
              while (v53);
              v69 = v108;
              do
              {
                if (v9 < 2)
                  break;
                v109 = v69;
                v114 = *(_QWORD *)a1;
                v115 = v117;
                v116 = 0x200000000;
                if (*(_DWORD *)(a1 + 16))
                  sub_1C6014A70((uint64_t)&v115, a1 + 8);
                v70 = 0;
                v118 = *(_BYTE *)(a1 + 72);
                v71 = a1;
                do
                {
                  v72 = (uint64_t *)(v71 + 80 * v70 + 80);
                  v73 = (2 * v70) | 1;
                  v74 = 2 * v70 + 2;
                  if (v74 < v9)
                  {
                    v76 = *v72;
                    v77 = *(_QWORD *)(v71 + 80 * v70 + 160);
                    v78 = sub_1C63C5D40(*(uint64_t **)(*v72 + 24), *(uint64_t **)(*v72 + 32), v72[10]);
                    if (v78)
                      v75 = v77;
                    else
                      v75 = v76;
                    if (v78)
                    {
                      v72 += 10;
                      v70 = v74;
                    }
                    else
                    {
                      v70 = v73;
                    }
                  }
                  else
                  {
                    v75 = *v72;
                    v70 = (2 * v70) | 1;
                  }
                  *(_QWORD *)v71 = v75;
                  sub_1C6014A70(v71 + 8, (uint64_t)(v72 + 1));
                  *(_BYTE *)(v71 + 72) = *((_BYTE *)v72 + 72);
                  v71 = (uint64_t)v72;
                }
                while (v70 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v79 = v109 - 10;
                if (v72 == v109 - 10)
                {
                  *v72 = v114;
                  sub_1C6014A70((uint64_t)(v72 + 1), (uint64_t)&v115);
                  *((_BYTE *)v72 + 72) = v118;
                }
                else
                {
                  *v72 = *(v109 - 10);
                  sub_1C6014A70((uint64_t)(v72 + 1), (uint64_t)(v109 - 9));
                  *((_BYTE *)v72 + 72) = *((_BYTE *)v109 - 8);
                  *(v109 - 10) = v114;
                  sub_1C6014A70((uint64_t)(v109 - 9), (uint64_t)&v115);
                  *((_BYTE *)v109 - 8) = v118;
                  v80 = (uint64_t)v72 - a1 + 80;
                  if (v80 >= 81)
                  {
                    v81 = (v80 / 0x50uLL - 2) >> 1;
                    v110 = a1 + 80 * v81;
                    v82 = *(_QWORD *)v110;
                    v83 = *v72;
                    if (sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)v110 + 24), *(uint64_t **)(*(_QWORD *)v110 + 32), *v72))
                    {
                      v119 = v83;
                      v120 = v122;
                      v121 = 0x200000000;
                      if (*((_DWORD *)v72 + 4))
                      {
                        sub_1C6014A70((uint64_t)&v120, (uint64_t)(v72 + 1));
                        v84 = a1 + 80 * v81;
                        v82 = *(_QWORD *)v110;
                      }
                      else
                      {
                        v84 = a1 + 80 * v81;
                      }
                      v123 = *((_BYTE *)v72 + 72);
                      do
                      {
                        v86 = v84;
                        *v72 = v82;
                        v111 = v84 + 8;
                        sub_1C6014A70((uint64_t)(v72 + 1), v84 + 8);
                        *((_BYTE *)v72 + 72) = *(_BYTE *)(v86 + 72);
                        v87 = v119;
                        if (!v81)
                          break;
                        v81 = (v81 - 1) >> 1;
                        v88 = a1 + 80 * v81;
                        v82 = *(_QWORD *)v88;
                        v89 = sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)v88 + 24), *(uint64_t **)(*(_QWORD *)v88 + 32), v119);
                        v84 = v88;
                        v72 = (uint64_t *)v86;
                      }
                      while (v89);
                      *(_QWORD *)v86 = v87;
                      sub_1C6014A70(v111, (uint64_t)&v120);
                      *(_BYTE *)(v86 + 72) = v123;
                      if (v120 != v122)
                        free(v120);
                    }
                  }
                }
                if (v115 != v117)
                  free(v115);
                v69 = v79;
              }
              while (v9-- > 2);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = (_QWORD *)(v7 + 80 * ((unint64_t)v9 >> 1));
          if ((unint64_t)v8 < 0x2801)
          {
            sub_1C6019D10(v7 + 80 * ((unint64_t)v9 >> 1), v7, v103);
          }
          else
          {
            sub_1C6019D10(v7, v7 + 80 * ((unint64_t)v9 >> 1), v103);
            v12 = v7 + 80 * v10 - 80;
            sub_1C6019D10(a1 + 80, v12, v102);
            sub_1C6019D10(a1 + 160, a1 + 80 + 80 * v10, v101);
            sub_1C6019D10(v12, a1 + 80 * ((unint64_t)v9 >> 1), (_BYTE *)(a1 + 80 + 80 * v10));
            v119 = *(_QWORD *)a1;
            v120 = v122;
            v121 = 0x200000000;
            if (*(_DWORD *)(a1 + 16))
              sub_1C6014A70((uint64_t)&v120, a1 + 8);
            v123 = *(_BYTE *)(a1 + 72);
            *(_QWORD *)a1 = *v11;
            v13 = a1 + 80 * v10;
            sub_1C6014A70(a1 + 8, v13 + 8);
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(v13 + 72);
            *v11 = v119;
            sub_1C6014A70(v13 + 8, (uint64_t)&v120);
            *(_BYTE *)(v13 + 72) = v123;
            if (v120 != v122)
              free(v120);
            a2 = v108;
          }
          --a3;
          v14 = *(_QWORD *)a1;
          if ((a4 & 1) == 0
            && !sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)(a1 - 80) + 24), *(uint64_t **)(*(_QWORD *)(a1 - 80) + 32), *(_QWORD *)a1))
          {
            v113 = v14;
            v115 = v117;
            v116 = 0x200000000;
            if (*(_DWORD *)(a1 + 16))
              sub_1C6014A70((uint64_t)&v115, a1 + 8);
            v118 = *(_BYTE *)(a1 + 72);
            v25 = *(uint64_t **)(v14 + 24);
            v26 = *(uint64_t **)(v14 + 32);
            if (sub_1C63C5D40(v25, v26, *v103))
            {
              v7 = a1;
              do
              {
                v27 = *(_QWORD *)(v7 + 80);
                v7 += 80;
              }
              while (!sub_1C63C5D40(v25, v26, v27));
            }
            else
            {
              v40 = a1 + 80;
              do
              {
                v7 = v40;
                if (v40 >= (unint64_t)a2)
                  break;
                v40 += 80;
              }
              while (!sub_1C63C5D40(v25, v26, *(_QWORD *)v7));
            }
            v28 = v25;
            v29 = (unint64_t)a2;
            if (v7 < (unint64_t)a2)
            {
              v29 = (unint64_t)a2;
              do
              {
                v30 = *(_QWORD *)(v29 - 80);
                v29 -= 80;
              }
              while (sub_1C63C5D40(v28, v26, v30));
            }
            if (v7 < v29)
            {
              v106 = *(_QWORD *)v7;
              do
              {
                v119 = v106;
                v120 = v122;
                v121 = 0x200000000;
                if (*(_DWORD *)(v7 + 16))
                  sub_1C6014A70((uint64_t)&v120, v7 + 8);
                v123 = *(_BYTE *)(v7 + 72);
                *(_QWORD *)v7 = *(_QWORD *)v29;
                sub_1C6014A70(v7 + 8, v29 + 8);
                *(_BYTE *)(v7 + 72) = *(_BYTE *)(v29 + 72);
                *(_QWORD *)v29 = v119;
                sub_1C6014A70(v29 + 8, (uint64_t)&v120);
                v100 = v29;
                *(_BYTE *)(v29 + 72) = v123;
                if (v120 != v122)
                  free(v120);
                v14 = v113;
                v31 = *(uint64_t **)(v113 + 24);
                v32 = *(uint64_t **)(v113 + 32);
                do
                {
                  v34 = *(_QWORD *)(v7 + 80);
                  v7 += 80;
                  v33 = v34;
                  v35 = v32;
                  v36 = v31;
                  v37 = sub_1C63C5D40(v31, v32, v34);
                  v32 = v35;
                  v31 = v36;
                }
                while (!v37);
                v106 = v33;
                v29 = v100;
                do
                {
                  v38 = *(_QWORD *)(v29 - 80);
                  v29 -= 80;
                  v39 = sub_1C63C5D40(v31, v35, v38);
                  v31 = v36;
                }
                while (v39);
              }
              while (v7 < v29);
            }
            if (v7 - 80 != a1)
            {
              *(_QWORD *)a1 = *(_QWORD *)(v7 - 80);
              sub_1C6014A70(a1 + 8, v7 - 72);
              *(_BYTE *)(a1 + 72) = *(_BYTE *)(v7 - 8);
              v14 = v113;
            }
            *(_QWORD *)(v7 - 80) = v14;
            sub_1C6014A70(v7 - 72, (uint64_t)&v115);
            *(_BYTE *)(v7 - 8) = v118;
            if (v115 != v117)
              free(v115);
            goto LABEL_39;
          }
          v112 = v14;
          v115 = v117;
          v116 = 0x200000000;
          if (*(_DWORD *)(a1 + 16))
            sub_1C6014A70((uint64_t)&v115, a1 + 8);
          v15 = 0;
          v118 = *(_BYTE *)(a1 + 72);
          do
          {
            v16 = *(_QWORD *)(a1 + v15 + 80);
            v15 += 80;
          }
          while (sub_1C63C5D40(*(uint64_t **)(v16 + 24), *(uint64_t **)(v16 + 32), v14));
          v17 = a1 + v15;
          if (v15 == 80)
          {
            a2 = v108;
            do
            {
              if (v17 >= (unint64_t)a2)
                break;
              v24 = *(a2 - 10);
              a2 -= 10;
            }
            while (!sub_1C63C5D40(*(uint64_t **)(v24 + 24), *(uint64_t **)(v24 + 32), v14));
          }
          else
          {
            do
            {
              v18 = *(a2 - 10);
              a2 -= 10;
            }
            while (!sub_1C63C5D40(*(uint64_t **)(v18 + 24), *(uint64_t **)(v18 + 32), v14));
          }
          v7 = a1 + v15;
          if (v17 < (unint64_t)a2)
          {
            v19 = (unint64_t)a2;
            do
            {
              v119 = v16;
              v120 = v122;
              v121 = 0x200000000;
              if (*(_DWORD *)(v7 + 16))
                sub_1C6014A70((uint64_t)&v120, v7 + 8);
              v123 = *(_BYTE *)(v7 + 72);
              *(_QWORD *)v7 = *(_QWORD *)v19;
              sub_1C6014A70(v7 + 8, v19 + 8);
              *(_BYTE *)(v7 + 72) = *(_BYTE *)(v19 + 72);
              *(_QWORD *)v19 = v119;
              sub_1C6014A70(v19 + 8, (uint64_t)&v120);
              *(_BYTE *)(v19 + 72) = v123;
              if (v120 != v122)
                free(v120);
              v14 = v112;
              do
              {
                v20 = *(_QWORD *)(v7 + 80);
                v7 += 80;
                v16 = v20;
              }
              while (sub_1C63C5D40(*(uint64_t **)(v20 + 24), *(uint64_t **)(v20 + 32), v112));
              do
              {
                v21 = *(_QWORD *)(v19 - 80);
                v19 -= 80;
              }
              while (!sub_1C63C5D40(*(uint64_t **)(v21 + 24), *(uint64_t **)(v21 + 32), v112));
            }
            while (v7 < v19);
          }
          if (v7 - 80 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v7 - 80);
            sub_1C6014A70(a1 + 8, v7 - 72);
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(v7 - 8);
            v14 = v112;
          }
          *(_QWORD *)(v7 - 80) = v14;
          sub_1C6014A70(v7 - 72, (uint64_t)&v115);
          *(_BYTE *)(v7 - 8) = v118;
          if (v115 != v117)
            free(v115);
          v22 = v17 >= (unint64_t)a2;
          a2 = v108;
          if (!v22)
            goto LABEL_38;
          v23 = sub_1C601A04C(a1, (uint64_t *)(v7 - 80));
          if (!sub_1C601A04C(v7, v108))
          {
            if (v23)
              continue;
LABEL_38:
            sub_1C6018FD8(a1, v7 - 80, a3, a4 & 1);
LABEL_39:
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v7 - 80);
          if (v23)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((uint64_t *)v7 != a2)
          {
            v41 = v7 + 80;
            if ((uint64_t *)(v7 + 80) != a2)
            {
              v42 = 0;
              v43 = v7;
              do
              {
                v44 = v41;
                v45 = *(_QWORD *)(v43 + 80);
                if (sub_1C63C5D40(*(uint64_t **)(v45 + 24), *(uint64_t **)(v45 + 32), *(_QWORD *)v43))
                {
                  v119 = v45;
                  v120 = v122;
                  v121 = 0x200000000;
                  if (*(_DWORD *)(v43 + 96))
                    sub_1C6014A70((uint64_t)&v120, v43 + 88);
                  v123 = *(_BYTE *)(v43 + 152);
                  v46 = *(_QWORD *)v43;
                  v47 = v42;
                  while (1)
                  {
                    *(_QWORD *)(v7 + v47 + 80) = v46;
                    v48 = v7 + v47 + 8;
                    sub_1C6014A70(v7 + v47 + 88, v48);
                    *(_BYTE *)(v7 + v47 + 152) = *(_BYTE *)(v7 + v47 + 72);
                    v49 = v119;
                    if (!v47)
                      break;
                    v46 = *(_QWORD *)(v7 + v47 - 80);
                    v47 -= 80;
                    if (!sub_1C63C5D40(*(uint64_t **)(v119 + 24), *(uint64_t **)(v119 + 32), v46))
                    {
                      v50 = v7 + v47 + 80;
                      goto LABEL_90;
                    }
                  }
                  v50 = v7;
LABEL_90:
                  *(_QWORD *)v50 = v49;
                  sub_1C6014A70(v48, (uint64_t)&v120);
                  *(_BYTE *)(v50 + 72) = v123;
                  a2 = v108;
                  if (v120 != v122)
                    free(v120);
                }
                v41 = v44 + 80;
                v42 += 80;
                v43 = v44;
              }
              while ((uint64_t *)(v44 + 80) != a2);
            }
          }
        }
        else if ((uint64_t *)v7 != a2)
        {
          v90 = v7 + 80;
          if ((uint64_t *)(v7 + 80) != a2)
          {
            v91 = (_BYTE *)(v7 + 152);
            do
            {
              v92 = v90;
              v93 = *(_QWORD *)(a1 + 80);
              if (sub_1C63C5D40(*(uint64_t **)(v93 + 24), *(uint64_t **)(v93 + 32), *(_QWORD *)a1))
              {
                v119 = v93;
                v120 = v122;
                v121 = 0x200000000;
                if (*(_DWORD *)(a1 + 96))
                  sub_1C6014A70((uint64_t)&v120, a1 + 88);
                v123 = *(_BYTE *)(a1 + 152);
                v94 = *(_QWORD *)a1;
                v95 = v91;
                do
                {
                  v96 = v95;
                  *((_QWORD *)v95 - 9) = v94;
                  sub_1C6014A70((uint64_t)(v95 - 64), (uint64_t)(v95 - 144));
                  v97 = *(v95 - 80);
                  v95 -= 80;
                  *v96 = v97;
                  v98 = v119;
                  v94 = *((_QWORD *)v96 - 29);
                }
                while (sub_1C63C5D40(*(uint64_t **)(v119 + 24), *(uint64_t **)(v119 + 32), v94));
                *((_QWORD *)v95 - 9) = v98;
                sub_1C6014A70((uint64_t)(v95 - 64), (uint64_t)&v120);
                *v95 = v123;
                if (v120 != v122)
                  free(v120);
                a2 = v108;
              }
              v90 = v92 + 80;
              v91 += 80;
              a1 = v92;
            }
            while ((uint64_t *)(v92 + 80) != a2);
          }
        }
        return;
    }
  }
}

void sub_1C6019D10(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[48];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)a1;
  v8 = sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a2 + 24), *(uint64_t **)(*(_QWORD *)a2 + 32), *(_QWORD *)a1);
  v9 = *(_QWORD *)a3;
  v10 = sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a3 + 24), *(uint64_t **)(*(_QWORD *)a3 + 32), v6);
  if (v8)
  {
    if (v10)
    {
      v16 = v18;
      v17 = 0x200000000;
      if (*(_DWORD *)(a1 + 16))
      {
        sub_1C6014A70((uint64_t)&v16, a1 + 8);
        v9 = *(_QWORD *)a3;
      }
      v19 = *(_BYTE *)(a1 + 72);
      *(_QWORD *)a1 = v9;
      sub_1C6014A70(a1 + 8, (uint64_t)(a3 + 8));
      *(_BYTE *)(a1 + 72) = a3[72];
      *(_QWORD *)a3 = v7;
      v11 = (uint64_t)(a3 + 8);
LABEL_6:
      sub_1C6014A70(v11, (uint64_t)&v16);
      a3[72] = v19;
LABEL_7:
      if (v16 != v18)
        free(v16);
      return;
    }
    v16 = v18;
    v17 = 0x200000000;
    if (*(_DWORD *)(a1 + 16))
    {
      sub_1C6014A70((uint64_t)&v16, a1 + 8);
      v6 = *(_QWORD *)a2;
    }
    v19 = *(_BYTE *)(a1 + 72);
    *(_QWORD *)a1 = v6;
    sub_1C6014A70(a1 + 8, a2 + 8);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)a2 = v7;
    sub_1C6014A70(a2 + 8, (uint64_t)&v16);
    *(_BYTE *)(a2 + 72) = v19;
    if (v16 != v18)
      free(v16);
    v12 = *(_QWORD *)a3;
    v13 = *(_QWORD *)a2;
    if (sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a3 + 24), *(uint64_t **)(*(_QWORD *)a3 + 32), *(_QWORD *)a2))
    {
      v16 = v18;
      v17 = 0x200000000;
      if (*(_DWORD *)(a2 + 16))
      {
        sub_1C6014A70((uint64_t)&v16, a2 + 8);
        v12 = *(_QWORD *)a3;
      }
      v19 = *(_BYTE *)(a2 + 72);
      *(_QWORD *)a2 = v12;
      sub_1C6014A70(a2 + 8, (uint64_t)(a3 + 8));
      *(_BYTE *)(a2 + 72) = a3[72];
      *(_QWORD *)a3 = v13;
      v11 = (uint64_t)(a3 + 8);
      goto LABEL_6;
    }
  }
  else if (v10)
  {
    v16 = v18;
    v17 = 0x200000000;
    if (*(_DWORD *)(a2 + 16))
    {
      sub_1C6014A70((uint64_t)&v16, a2 + 8);
      v9 = *(_QWORD *)a3;
    }
    v19 = *(_BYTE *)(a2 + 72);
    *(_QWORD *)a2 = v9;
    sub_1C6014A70(a2 + 8, (uint64_t)(a3 + 8));
    *(_BYTE *)(a2 + 72) = a3[72];
    *(_QWORD *)a3 = v6;
    sub_1C6014A70((uint64_t)(a3 + 8), (uint64_t)&v16);
    a3[72] = v19;
    if (v16 != v18)
      free(v16);
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)a1;
    if (sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a2 + 24), *(uint64_t **)(*(_QWORD *)a2 + 32), *(_QWORD *)a1))
    {
      v16 = v18;
      v17 = 0x200000000;
      if (*(_DWORD *)(a1 + 16))
      {
        sub_1C6014A70((uint64_t)&v16, a1 + 8);
        v14 = *(_QWORD *)a2;
      }
      v19 = *(_BYTE *)(a1 + 72);
      *(_QWORD *)a1 = v14;
      sub_1C6014A70(a1 + 8, a2 + 8);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)a2 = v15;
      sub_1C6014A70(a2 + 8, (uint64_t)&v16);
      *(_BYTE *)(a2 + 72) = v19;
      goto LABEL_7;
    }
  }
}

BOOL sub_1C601A04C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[48];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v15 = *(a2 - 10);
      v16 = *(_QWORD *)a1;
      if (sub_1C63C5D40(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), *(_QWORD *)a1))
      {
        v17 = v19;
        v18 = 0x200000000;
        if (*(_DWORD *)(a1 + 16))
        {
          sub_1C6014A70((uint64_t)&v17, a1 + 8);
          v15 = *(a2 - 10);
        }
        v20 = *(_BYTE *)(a1 + 72);
        *(_QWORD *)a1 = v15;
        sub_1C6014A70(a1 + 8, (uint64_t)(a2 - 9));
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 - 8);
        *(a2 - 10) = v16;
        sub_1C6014A70((uint64_t)(a2 - 9), (uint64_t)&v17);
        *((_BYTE *)a2 - 8) = v20;
        if (v17 != v19)
          free(v17);
      }
      return 1;
    case 3uLL:
      sub_1C6019D10(a1, a1 + 80, (_BYTE *)a2 - 80);
      return 1;
    case 4uLL:
      sub_1C601A328(a1, (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 160), (_BYTE *)a2 - 80);
      return 1;
    case 5uLL:
      sub_1C601A570(a1, a1 + 80, a1 + 160, (uint64_t *)(a1 + 240), (_BYTE *)a2 - 80);
      return 1;
    default:
      v6 = (uint64_t *)(a1 + 160);
      sub_1C6019D10(a1, a1 + 80, (_BYTE *)(a1 + 160));
      v7 = (uint64_t *)(a1 + 240);
      if ((uint64_t *)(a1 + 240) == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *v7;
    if (sub_1C63C5D40(*(uint64_t **)(*v7 + 24), *(uint64_t **)(*v7 + 32), *v6))
    {
      v17 = v19;
      v18 = 0x200000000;
      if (*((_DWORD *)v7 + 4))
        sub_1C6014A70((uint64_t)&v17, (uint64_t)(v7 + 1));
      v20 = *((_BYTE *)v7 + 72);
      v11 = *v6;
      v12 = v8;
      while (1)
      {
        *(_QWORD *)(a1 + v12 + 240) = v11;
        v13 = a1 + v12 + 168;
        sub_1C6014A70(a1 + v12 + 248, v13);
        *(_BYTE *)(a1 + v12 + 312) = *(_BYTE *)(a1 + v12 + 232);
        if (v12 == -160)
          break;
        v11 = *(_QWORD *)(a1 + v12 + 80);
        v12 -= 80;
        if (!sub_1C63C5D40(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), v11))
        {
          v14 = a1 + v12 + 240;
          goto LABEL_13;
        }
      }
      v14 = a1;
LABEL_13:
      *(_QWORD *)v14 = v10;
      sub_1C6014A70(v13, (uint64_t)&v17);
      *(_BYTE *)(v14 + 72) = v20;
      if (v17 != v19)
        free(v17);
      if (++v9 == 8)
        return v7 + 10 == a2;
    }
    v6 = v7;
    v8 += 80;
    result = 1;
    v7 += 10;
    if (v7 == a2)
      return result;
  }
}

void sub_1C601A328(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sub_1C6019D10(a1, (uint64_t)a2, a3);
  v8 = *(_QWORD *)a4;
  v9 = *a3;
  if (sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a4 + 24), *(uint64_t **)(*(_QWORD *)a4 + 32), *a3))
  {
    v14 = v16;
    v15 = 0x200000000;
    if (*((_DWORD *)a3 + 4))
    {
      sub_1C6014A70((uint64_t)&v14, (uint64_t)(a3 + 1));
      v8 = *(_QWORD *)a4;
    }
    v17 = *((_BYTE *)a3 + 72);
    *a3 = v8;
    sub_1C6014A70((uint64_t)(a3 + 1), (uint64_t)(a4 + 8));
    *((_BYTE *)a3 + 72) = a4[72];
    *(_QWORD *)a4 = v9;
    sub_1C6014A70((uint64_t)(a4 + 8), (uint64_t)&v14);
    a4[72] = v17;
    if (v14 != v16)
      free(v14);
    v10 = *a3;
    v11 = *a2;
    if (sub_1C63C5D40(*(uint64_t **)(*a3 + 24), *(uint64_t **)(*a3 + 32), *a2))
    {
      v14 = v16;
      v15 = 0x200000000;
      if (*((_DWORD *)a2 + 4))
      {
        sub_1C6014A70((uint64_t)&v14, (uint64_t)(a2 + 1));
        v10 = *a3;
      }
      v17 = *((_BYTE *)a2 + 72);
      *a2 = v10;
      sub_1C6014A70((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
      *((_BYTE *)a2 + 72) = *((_BYTE *)a3 + 72);
      *a3 = v11;
      sub_1C6014A70((uint64_t)(a3 + 1), (uint64_t)&v14);
      *((_BYTE *)a3 + 72) = v17;
      if (v14 != v16)
        free(v14);
      v12 = *a2;
      v13 = *(_QWORD *)a1;
      if (sub_1C63C5D40(*(uint64_t **)(*a2 + 24), *(uint64_t **)(*a2 + 32), *(_QWORD *)a1))
      {
        v14 = v16;
        v15 = 0x200000000;
        if (*(_DWORD *)(a1 + 16))
        {
          sub_1C6014A70((uint64_t)&v14, a1 + 8);
          v12 = *a2;
        }
        v17 = *(_BYTE *)(a1 + 72);
        *(_QWORD *)a1 = v12;
        sub_1C6014A70(a1 + 8, (uint64_t)(a2 + 1));
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *a2 = v13;
        sub_1C6014A70((uint64_t)(a2 + 1), (uint64_t)&v14);
        *((_BYTE *)a2 + 72) = v17;
        if (v14 != v16)
          free(v14);
      }
    }
  }
}

void sub_1C601A570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[48];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  sub_1C601A328(a1, (uint64_t *)a2, (uint64_t *)a3, a4);
  v10 = *(_QWORD *)a5;
  v11 = *a4;
  if (sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a5 + 24), *(uint64_t **)(*(_QWORD *)a5 + 32), *a4))
  {
    v18 = v20;
    v19 = 0x200000000;
    if (*((_DWORD *)a4 + 4))
    {
      sub_1C6014A70((uint64_t)&v18, (uint64_t)(a4 + 1));
      v10 = *(_QWORD *)a5;
    }
    v21 = *((_BYTE *)a4 + 72);
    *a4 = v10;
    sub_1C6014A70((uint64_t)(a4 + 1), (uint64_t)(a5 + 8));
    *((_BYTE *)a4 + 72) = a5[72];
    *(_QWORD *)a5 = v11;
    sub_1C6014A70((uint64_t)(a5 + 8), (uint64_t)&v18);
    a5[72] = v21;
    if (v18 != v20)
      free(v18);
    v12 = *a4;
    v13 = *(_QWORD *)a3;
    if (sub_1C63C5D40(*(uint64_t **)(*a4 + 24), *(uint64_t **)(*a4 + 32), *(_QWORD *)a3))
    {
      v18 = v20;
      v19 = 0x200000000;
      if (*(_DWORD *)(a3 + 16))
      {
        sub_1C6014A70((uint64_t)&v18, a3 + 8);
        v12 = *a4;
      }
      v21 = *(_BYTE *)(a3 + 72);
      *(_QWORD *)a3 = v12;
      sub_1C6014A70(a3 + 8, (uint64_t)(a4 + 1));
      *(_BYTE *)(a3 + 72) = *((_BYTE *)a4 + 72);
      *a4 = v13;
      sub_1C6014A70((uint64_t)(a4 + 1), (uint64_t)&v18);
      *((_BYTE *)a4 + 72) = v21;
      if (v18 != v20)
        free(v18);
      v14 = *(_QWORD *)a3;
      v15 = *(_QWORD *)a2;
      if (sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a3 + 24), *(uint64_t **)(*(_QWORD *)a3 + 32), *(_QWORD *)a2))
      {
        v18 = v20;
        v19 = 0x200000000;
        if (*(_DWORD *)(a2 + 16))
        {
          sub_1C6014A70((uint64_t)&v18, a2 + 8);
          v14 = *(_QWORD *)a3;
        }
        v21 = *(_BYTE *)(a2 + 72);
        *(_QWORD *)a2 = v14;
        sub_1C6014A70(a2 + 8, a3 + 8);
        *(_BYTE *)(a2 + 72) = *(_BYTE *)(a3 + 72);
        *(_QWORD *)a3 = v15;
        sub_1C6014A70(a3 + 8, (uint64_t)&v18);
        *(_BYTE *)(a3 + 72) = v21;
        if (v18 != v20)
          free(v18);
        v16 = *(_QWORD *)a2;
        v17 = *(_QWORD *)a1;
        if (sub_1C63C5D40(*(uint64_t **)(*(_QWORD *)a2 + 24), *(uint64_t **)(*(_QWORD *)a2 + 32), *(_QWORD *)a1))
        {
          v18 = v20;
          v19 = 0x200000000;
          if (*(_DWORD *)(a1 + 16))
          {
            sub_1C6014A70((uint64_t)&v18, a1 + 8);
            v16 = *(_QWORD *)a2;
          }
          v21 = *(_BYTE *)(a1 + 72);
          *(_QWORD *)a1 = v16;
          sub_1C6014A70(a1 + 8, a2 + 8);
          *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
          *(_QWORD *)a2 = v17;
          sub_1C6014A70(a2 + 8, (uint64_t)&v18);
          *(_BYTE *)(a2 + 72) = v21;
          if (v18 != v20)
            free(v18);
        }
      }
    }
  }
}

uint64_t sub_1C601A858@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C60184F0((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C60185D8(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = a2[1];
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C601A8E4(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  return sub_1C6011118(a1, *(_QWORD *)(a1[3] + 8) + 24 * a2, a3);
}

void sub_1C601A8F8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x1AF286BCA1AF286)
      abort();
    v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0xD79435E50D7943)
      v10 = 0x1AF286BCA1AF286;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x1AF286BCA1AF286)
      sub_1C4764EE4();
    v11 = 152 * v10;
    v12 = (char *)operator new(152 * v10);
    v13 = &v12[152 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C6180FA8((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 152;
    sub_1C63C5D88(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 152)
    {
      v16 = (char *)*((_QWORD *)i - 18);
      if (i - 128 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C6180FA8((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 19;
  }
  a1[1] = (uint64_t)v6;
}

_QWORD *sub_1C601AAA0(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v16 = 0;
LABEL_11:
    result = sub_1C59175D0(a2, (uint64_t)a3, a3, v16);
    *result = *a3;
    *((_DWORD *)result + 2) = *a4;
    v9 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v13 = 1;
    goto LABEL_4;
  }
  v9 = *(_QWORD *)a2;
  v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v14 = 0;
    v15 = 1;
    while (v12 != -4096)
    {
      if (v14)
        v17 = 0;
      else
        v17 = v12 == -8192;
      if (v17)
        v14 = result;
      v18 = v10 + v15++;
      v10 = v18 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_3;
    }
    if (v14)
      v16 = v14;
    else
      v16 = result;
    goto LABEL_11;
  }
LABEL_3:
  v13 = 0;
LABEL_4:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

__n128 sub_1C601AB90(__n128 *a1, __n128 *a2, uint64_t *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  char *v9;
  unint64_t v10;
  __n128 *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  __n128 *v16;
  uint64_t v17;
  __n128 *v18;
  __n128 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  __n128 *v33;
  unint64_t v34;
  uint64_t *v35;
  char *v37;
  unint64_t v38;
  __n128 *v39;
  unint64_t v40;
  __n128 v41;
  __n128 *v42;
  char *v43;
  __n128 *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  int v48;
  unint64_t v49;
  uint64_t *v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unint64_t v57;

  if (a4 >= 2)
  {
    v9 = (char *)a1;
    if (a4 == 2)
    {
      v11 = a2 - 1;
      v10 = a2[-1].n128_u64[0];
      v12 = *a3;
      if (v10
        && (v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 272) + 88),
            v56 = 0,
            v57 = v10,
            sub_1C52A0CF8(v13, &v57, &v56)))
      {
        v14 = *(_DWORD *)(v56 + 8);
      }
      else
      {
        v14 = 0;
      }
      v34 = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
      {
        v35 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 272) + 88);
        v56 = 0;
        v57 = v34;
        if (sub_1C52A0CF8(v35, &v57, &v56))
          LODWORD(v34) = *(_DWORD *)(v56 + 8);
        else
          LODWORD(v34) = 0;
      }
      if (v14 - 1 < (v34 - 1))
      {
        result = *(__n128 *)v9;
        *(__n128 *)v9 = *v11;
        *v11 = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v37 = (char *)a5;
      v38 = a4 >> 1;
      v39 = &a1[a4 >> 1];
      v40 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v41 = sub_1C601AFAC(a1, v39, a3, v40, a5, result);
        v42 = (__n128 *)&v37[16 * v38];
        result.n128_u64[0] = sub_1C601AFAC((__n128 *)&v9[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v42, v41).n128_u64[0];
        v43 = &v37[16 * a4];
        v44 = v42;
        while (v44 != (__n128 *)v43)
        {
          v45 = *a3;
          v46 = v44->n128_u64[0];
          if (v44->n128_u64[0]
            && (v47 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) + 272) + 88),
                v56 = 0,
                v57 = v46,
                sub_1C52A0CF8(v47, &v57, &v56)))
          {
            v48 = *(_DWORD *)(v56 + 8);
          }
          else
          {
            v48 = 0;
          }
          v49 = *(_QWORD *)v37;
          if (*(_QWORD *)v37)
          {
            v50 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) + 272) + 88);
            v56 = 0;
            v57 = v49;
            if (sub_1C52A0CF8(v50, &v57, &v56))
              LODWORD(v49) = *(_DWORD *)(v56 + 8);
            else
              LODWORD(v49) = 0;
          }
          if (v48 - 1 >= (v49 - 1))
          {
            v52 = *(__n128 *)v37;
            v37 += 16;
            result = v52;
          }
          else
          {
            v51 = *v44++;
            result = v51;
          }
          *(__n128 *)v9 = result;
          v9 += 16;
          if (v37 == (char *)v42)
          {
            if (v44 != (__n128 *)v43)
            {
              v53 = 0;
              do
              {
                result = v44[v53];
                *(__n128 *)&v9[v53 * 16] = result;
                ++v53;
              }
              while (&v44[v53] != (__n128 *)v43);
            }
            return result;
          }
        }
        if (v37 != (char *)v42)
        {
          v54 = 0;
          do
          {
            result = *(__n128 *)&v37[v54];
            *(__n128 *)&v9[v54] = result;
            v54 += 16;
          }
          while (&v37[v54] != (char *)v42);
        }
      }
      else
      {
        sub_1C601AB90(a1, v39, a3, v40, a5, a6);
        sub_1C601AB90(&v9[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37, a6);
        sub_1C601B3A0(v9, &v9[16 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v37, a6);
      }
    }
    else if (a1 != a2)
    {
      v16 = a1 + 1;
      if (&a1[1] != a2)
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = v16;
          v20 = *a3;
          v21 = v18[1].n128_u64[0];
          if (v21
            && (v22 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 272) + 88),
                v56 = 0,
                v57 = v21,
                sub_1C52A0CF8(v22, &v57, &v56)))
          {
            v23 = *(_DWORD *)(v56 + 8);
          }
          else
          {
            v23 = 0;
          }
          v24 = v18->n128_u64[0];
          if (v18->n128_u64[0])
          {
            v25 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 272) + 88);
            v56 = 0;
            v57 = v24;
            if (sub_1C52A0CF8(v25, &v57, &v56))
              LODWORD(v24) = *(_DWORD *)(v56 + 8);
            else
              LODWORD(v24) = 0;
          }
          if (v23 - 1 < (v24 - 1))
          {
            v55 = *v19;
            v26 = v19->n128_u64[0];
            v27 = v17;
            while (1)
            {
              *(_OWORD *)&v9[v27 + 16] = *(_OWORD *)&v9[v27];
              if (!v27)
                break;
              v28 = *a3;
              if (v26
                && (v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 272) + 88),
                    v56 = 0,
                    v57 = v26,
                    sub_1C52A0CF8(v29, &v57, &v56)))
              {
                v30 = *(_DWORD *)(v56 + 8);
              }
              else
              {
                v30 = 0;
              }
              v31 = *(_QWORD *)&v9[v27 - 16];
              if (v31)
              {
                v32 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 272) + 88);
                v56 = 0;
                v57 = v31;
                if (sub_1C52A0CF8(v32, &v57, &v56))
                  LODWORD(v31) = *(_DWORD *)(v56 + 8);
                else
                  LODWORD(v31) = 0;
              }
              v27 -= 16;
              if (v30 - 1 >= (v31 - 1))
              {
                v33 = (__n128 *)&v9[v27 + 16];
                goto LABEL_32;
              }
            }
            v33 = (__n128 *)v9;
LABEL_32:
            result = v55;
            *v33 = v55;
          }
          v16 = v19 + 1;
          v17 += 16;
          v18 = v19;
        }
        while (&v19[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1C601AFAC(__n128 *a1, __n128 *a2, uint64_t *a3, unint64_t a4, __n128 *a5, __n128 result)
{
  __n128 *v6;
  __n128 *v9;
  unint64_t v10;
  __n128 *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  __n128 *v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  int v31;
  __n128 *v32;
  unint64_t v33;
  uint64_t *v34;
  __n128 v35;
  unint64_t v36;
  uint64_t *v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  __n128 v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;

  if (a4)
  {
    v6 = a5;
    v9 = a1;
    if (a4 == 2)
    {
      v11 = a2 - 1;
      v10 = a2[-1].n128_u64[0];
      v12 = *a3;
      if (v10
        && (v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 272) + 88),
            v52 = 0,
            v53 = v10,
            sub_1C52A0CF8(v13, &v53, &v52)))
      {
        v14 = *(_DWORD *)(v52 + 8);
      }
      else
      {
        v14 = 0;
      }
      v36 = v9->n128_u64[0];
      if (v9->n128_u64[0])
      {
        v37 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 272) + 88);
        v52 = 0;
        v53 = v36;
        if (sub_1C52A0CF8(v37, &v53, &v52))
          LODWORD(v36) = *(_DWORD *)(v52 + 8);
        else
          LODWORD(v36) = 0;
      }
      if (v14 - 1 >= (v36 - 1))
      {
        *v6 = *v9;
        result = *v11;
      }
      else
      {
        *v6 = *v11;
        result = *v9;
      }
      v6[1] = result;
    }
    else if (a4 == 1)
    {
      result = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      v38 = &a1[a4 >> 1];
      sub_1C601AB90(a1, v38, a3, a4 >> 1, a5, a4 >> 1);
      v39 = a2;
      sub_1C601AB90(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
      v40 = &v9[a4 >> 1];
      while (v40 != v39)
      {
        v41 = *a3;
        v42 = v40->n128_u64[0];
        if (v40->n128_u64[0]
          && (v43 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 272) + 88),
              v52 = 0,
              v53 = v42,
              sub_1C52A0CF8(v43, &v53, &v52)))
        {
          v44 = *(_DWORD *)(v52 + 8);
        }
        else
        {
          v44 = 0;
        }
        v45 = v9->n128_u64[0];
        if (v9->n128_u64[0])
        {
          v46 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 272) + 88);
          v52 = 0;
          v53 = v45;
          if (sub_1C52A0CF8(v46, &v53, &v52))
            LODWORD(v45) = *(_DWORD *)(v52 + 8);
          else
            LODWORD(v45) = 0;
        }
        if (v44 - 1 >= (v45 - 1))
        {
          v48 = *v9++;
          result = v48;
        }
        else
        {
          v47 = *v40++;
          result = v47;
        }
        *v6++ = result;
        v39 = a2;
        if (v9 == v38)
        {
          if (v40 != a2)
          {
            v49 = 0;
            do
            {
              result = v40[v49];
              v6[v49++] = result;
            }
            while (&v40[v49] != a2);
          }
          return result;
        }
      }
      if (v9 != v38)
      {
        v50 = 0;
        do
        {
          result = v9[v50];
          v6[v50++] = result;
        }
        while (&v9[v50] != v38);
      }
    }
    else if (a1 != a2)
    {
      v15 = a1 + 1;
      result = *a1;
      *a5 = *a1;
      if (&a1[1] != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v18 = v17;
          v19 = *a3;
          v20 = v15->n128_u64[0];
          if (v15->n128_u64[0]
            && (v21 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 272) + 88),
                v52 = 0,
                v53 = v20,
                sub_1C52A0CF8(v21, &v53, &v52)))
          {
            v22 = *(_DWORD *)(v52 + 8);
          }
          else
          {
            v22 = 0;
          }
          v23 = v17->n128_u64[0];
          if (v17->n128_u64[0])
          {
            v24 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 272) + 88);
            v52 = 0;
            v53 = v23;
            if (sub_1C52A0CF8(v24, &v53, &v52))
              LODWORD(v23) = *(_DWORD *)(v52 + 8);
            else
              LODWORD(v23) = 0;
          }
          ++v17;
          v25 = v23 - 1;
          v26 = v18 + 1;
          if (v22 - 1 < v25)
          {
            *v17 = *v18;
            v26 = v6;
            if (v18 != v6)
            {
              v27 = v16;
              while (1)
              {
                v28 = *a3;
                v29 = v15->n128_u64[0];
                if (v15->n128_u64[0]
                  && (v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 272) + 88),
                      v52 = 0,
                      v53 = v29,
                      sub_1C52A0CF8(v30, &v53, &v52)))
                {
                  v31 = *(_DWORD *)(v52 + 8);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (__n128 *)((char *)v6 + v27 - 16);
                v33 = v32->n128_u64[0];
                if (v32->n128_u64[0])
                {
                  v34 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 272) + 88);
                  v52 = 0;
                  v53 = v33;
                  if (sub_1C52A0CF8(v34, &v53, &v52))
                    LODWORD(v33) = *(_DWORD *)(v52 + 8);
                  else
                    LODWORD(v33) = 0;
                }
                if (v31 - 1 >= (v33 - 1))
                  break;
                *(__n128 *)((char *)v6 + v27) = *v32;
                v27 -= 16;
                if (!v27)
                {
                  v26 = v6;
                  goto LABEL_35;
                }
              }
              v26 = (__n128 *)((char *)v6 + v27);
            }
          }
LABEL_35:
          v35 = *v15++;
          result.n128_u64[0] = v35.n128_u64[0];
          *v26 = v35;
          v16 += 16;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

char *sub_1C601B3A0(char *result, char *a2, char *a3, uint64_t *a4, int64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t *v11;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  char *v60;
  char *v61;
  char *v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  unsigned int v78;
  BOOL v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *__src;
  char *__srca;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v104;
  __int128 v105;

  v102 = a6;
  if (!a6)
    return result;
  v11 = a4;
  v14 = result;
  while (a5 > a8 && v102 > a8)
  {
    if (!a5)
      return result;
    v15 = 0;
    v16 = -a5;
    while (1)
    {
      v17 = *v11;
      v18 = *(_QWORD *)a2;
      if (*(_QWORD *)a2
        && (v19 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 272) + 88),
            v104 = 0,
            *(_QWORD *)&v105 = v18,
            result = (char *)sub_1C52A0CF8(v19, &v105, &v104),
            (_DWORD)result))
      {
        v20 = *(_DWORD *)(v104 + 8);
      }
      else
      {
        v20 = 0;
      }
      v21 = *(_QWORD *)&v14[v15];
      if (v21)
      {
        v22 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 272) + 88);
        v104 = 0;
        *(_QWORD *)&v105 = v21;
        result = (char *)sub_1C52A0CF8(v22, &v105, &v104);
        if ((_DWORD)result)
          LODWORD(v21) = *(_DWORD *)(v104 + 8);
        else
          LODWORD(v21) = 0;
      }
      if (v20 - 1 < (v21 - 1))
        break;
      v15 += 16;
      v79 = __CFADD__(v16++, 1);
      if (v79)
        return result;
    }
    v23 = -v16;
    v100 = a8;
    v101 = a3;
    if (-v16 >= v102)
    {
      v99 = &v14[v15];
      if (v16 == -1)
      {
        v105 = *(_OWORD *)&v14[v15];
        *(_OWORD *)&v14[v15] = *(_OWORD *)a2;
        *(_OWORD *)a2 = v105;
        return result;
      }
      if (v16 > 0)
        v23 = 1 - v16;
      v36 = a3;
      v26 = v23 >> 1;
      v25 = &v14[16 * (v23 >> 1) + v15];
      v37 = a2;
      a2 = v36;
      v96 = a7;
      __srca = v37;
      v38 = v36 - v37;
      if (v38)
      {
        v39 = v38 >> 4;
        v40 = *v11;
        a2 = __srca;
        do
        {
          v41 = &a2[16 * (v39 >> 1)];
          v42 = *(_QWORD *)v41;
          if (*(_QWORD *)v41
            && (v43 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) + 272) + 88),
                v104 = 0,
                *(_QWORD *)&v105 = v42,
                sub_1C52A0CF8(v43, &v105, &v104)))
          {
            v44 = *(_DWORD *)(v104 + 8);
          }
          else
          {
            v44 = 0;
          }
          v45 = *(_QWORD *)v25;
          if (*(_QWORD *)v25)
          {
            v46 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) + 272) + 88);
            v104 = 0;
            *(_QWORD *)&v105 = v45;
            if (sub_1C52A0CF8(v46, &v105, &v104))
              LODWORD(v45) = *(_DWORD *)(v104 + 8);
            else
              LODWORD(v45) = 0;
          }
          v47 = v45 - 1;
          if (v44 - 1 >= v47)
            v39 >>= 1;
          else
            v39 += ~(v39 >> 1);
          if (v44 - 1 < v47)
            a2 = v41 + 16;
        }
        while (v39);
      }
      v34 = __srca;
      v35 = (a2 - __srca) >> 4;
      goto LABEL_58;
    }
    if (v102 >= 0)
      v24 = v102;
    else
      v24 = v102 + 1;
    v25 = a2;
    v95 = v24 >> 1;
    a2 += 16 * (v24 >> 1);
    v26 = (v25 - v14 - v15) >> 4;
    if (&v14[v15] != v25)
    {
      v96 = a7;
      __src = v25;
      v99 = &v14[v15];
      v25 = &v14[v15];
      do
      {
        v27 = *v11;
        v28 = *(_QWORD *)a2;
        if (*(_QWORD *)a2
          && (v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 272) + 88),
              v104 = 0,
              *(_QWORD *)&v105 = v28,
              sub_1C52A0CF8(v29, &v105, &v104)))
        {
          v30 = *(_DWORD *)(v104 + 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v25[16 * (v26 >> 1)];
        v32 = *(_QWORD *)v31;
        if (*(_QWORD *)v31)
        {
          v33 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 272) + 88);
          v104 = 0;
          *(_QWORD *)&v105 = v32;
          if (sub_1C52A0CF8(v33, &v105, &v104))
            LODWORD(v32) = *(_DWORD *)(v104 + 8);
          else
            LODWORD(v32) = 0;
        }
        if (v30 - 1 < (v32 - 1))
        {
          v26 >>= 1;
        }
        else
        {
          v25 = v31 + 16;
          v26 += ~(v26 >> 1);
        }
        v11 = a4;
      }
      while (v26);
      v26 = (v25 - v14 - v15) >> 4;
      v34 = __src;
      v35 = v95;
LABEL_58:
      a7 = v96;
      if (v25 == v34)
      {
        v25 = v34;
        v53 = a2;
      }
      else if (v34 == a2)
      {
        a2 = v34;
        v53 = v25;
      }
      else if (v25 + 16 == v34)
      {
        v105 = *(_OWORD *)v25;
        v54 = a2 - v34;
        memmove(v25, v34, a2 - v34);
        v53 = &v25[v54];
        *(_OWORD *)&v25[v54] = v105;
      }
      else if (v34 + 16 == a2)
      {
        v53 = v25 + 16;
        v105 = *((_OWORD *)a2 - 1);
        if (a2 - 16 != v25)
          memmove(v25 + 16, v25, a2 - 16 - v25);
        *(_OWORD *)v25 = v105;
      }
      else
      {
        v48 = (v34 - v25) >> 4;
        if (v48 == (a2 - v34) >> 4)
        {
          v49 = 0;
          do
          {
            v105 = *(_OWORD *)&v25[v49];
            *(_OWORD *)&v25[v49] = *(_OWORD *)&v34[v49];
            v50 = (uint64_t)&v25[v49 + 16];
            *(_OWORD *)&v34[v49] = v105;
            v51 = (uint64_t)&v34[v49 + 16];
            v49 += 16;
            v52 = (char *)v50 == v34 || v51 == (_QWORD)a2;
          }
          while (!v52);
          v53 = v34;
        }
        else
        {
          v55 = (a2 - v34) >> 4;
          v56 = (v34 - v25) >> 4;
          do
          {
            v57 = v56;
            v56 = v55;
            v55 = v57 % v55;
          }
          while (v55);
          if (v56)
          {
            v58 = &v25[16 * v56];
            do
            {
              v59 = *((_OWORD *)v58 - 1);
              v58 -= 16;
              v105 = v59;
              v60 = &v58[16 * v48];
              v61 = v58;
              do
              {
                v62 = v61;
                v61 = v60;
                *(_OWORD *)v62 = *(_OWORD *)v60;
                v63 = __OFSUB__(v48, (a2 - v60) >> 4);
                v65 = v48 - ((a2 - v60) >> 4);
                v64 = (v65 < 0) ^ v63;
                v60 = &v25[16 * v65];
                if (v64)
                  v60 = &v61[16 * v48];
              }
              while (v60 != v58);
              *(_OWORD *)v61 = v105;
            }
            while (v58 != v25);
          }
          v53 = &v25[16 * ((a2 - v34) >> 4)];
        }
      }
      goto LABEL_87;
    }
    v99 = v25;
    v53 = a2;
    v35 = v24 >> 1;
LABEL_87:
    a5 = -(uint64_t)(v26 + v16);
    v66 = v102 - v35;
    if ((uint64_t)(v35 + v26) >= (uint64_t)(v102 - (v35 + v26) - v16))
    {
      result = (char *)sub_1C601B3A0(v53, a2, v101, v11, -(uint64_t)(v26 + v16), v102 - v35, a7, v100);
      a2 = v25;
      a8 = v100;
      v66 = v35;
      a5 = v26;
      a3 = v53;
      v14 = v99;
    }
    else
    {
      v67 = v25;
      a8 = v100;
      result = (char *)sub_1C601B3A0(v99, v67, v53, v11, v26, v35, a7, v100);
      v14 = v53;
      a3 = v101;
    }
    v102 = v66;
    if (!v66)
      return result;
  }
  if (a5 <= v102)
  {
    if (v14 == a2)
      return result;
    v81 = 0;
    do
    {
      *(_OWORD *)&a7[v81] = *(_OWORD *)&v14[v81];
      v81 += 16;
    }
    while (&v14[v81] != a2);
    if (!v81)
      return result;
    v82 = &a7[v81];
    v83 = a7;
    while (1)
    {
      if (a2 == a3)
        return (char *)memmove(v14, v83, a7 - v83 + v81);
      v84 = *v11;
      v85 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
        break;
      v86 = a7;
      v87 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) + 272) + 88);
      v104 = 0;
      *(_QWORD *)&v105 = v85;
      result = (char *)sub_1C52A0CF8(v87, &v105, &v104);
      if (!(_DWORD)result)
        goto LABEL_126;
      v88 = *(_DWORD *)(v104 + 8);
LABEL_127:
      v89 = *(_QWORD *)v83;
      if (*(_QWORD *)v83)
      {
        v90 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) + 272) + 88);
        v104 = 0;
        *(_QWORD *)&v105 = v89;
        result = (char *)sub_1C52A0CF8(v90, &v105, &v104);
        if ((_DWORD)result)
          LODWORD(v89) = *(_DWORD *)(v104 + 8);
        else
          LODWORD(v89) = 0;
      }
      if (v88 - 1 >= (v89 - 1))
      {
        v93 = *(_OWORD *)v83;
        v83 += 16;
        v92 = v93;
      }
      else
      {
        v91 = *(_OWORD *)a2;
        a2 += 16;
        v92 = v91;
      }
      *(_OWORD *)v14 = v92;
      v14 += 16;
      a7 = v86;
      if (v82 == v83)
        return result;
    }
    v86 = a7;
LABEL_126:
    v88 = 0;
    goto LABEL_127;
  }
  if (a2 != a3)
  {
    v68 = 0;
    do
    {
      *(_OWORD *)&a7[v68] = *(_OWORD *)&a2[v68];
      v68 += 16;
    }
    while (&a2[v68] != a3);
    if (v68)
    {
      v69 = &a7[v68];
      v70 = a3 - 16;
      while (a2 != v14)
      {
        v71 = *((_QWORD *)v69 - 2);
        v72 = *v11;
        v73 = a7;
        if (v71
          && (v74 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v72 + 8) + 272) + 88),
              v104 = 0,
              *(_QWORD *)&v105 = v71,
              result = (char *)sub_1C52A0CF8(v74, &v105, &v104),
              (_DWORD)result))
        {
          v75 = *(_DWORD *)(v104 + 8);
        }
        else
        {
          v75 = 0;
        }
        v76 = *((_QWORD *)a2 - 2);
        if (v76)
        {
          v77 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v72 + 8) + 272) + 88);
          v104 = 0;
          *(_QWORD *)&v105 = v76;
          result = (char *)sub_1C52A0CF8(v77, &v105, &v104);
          if ((_DWORD)result)
            LODWORD(v76) = *(_DWORD *)(v104 + 8);
          else
            LODWORD(v76) = 0;
        }
        v78 = v76 - 1;
        v79 = v75 - 1 >= v78;
        if (v75 - 1 >= v78)
          v80 = v69 - 16;
        else
          v80 = a2 - 16;
        if (v79)
          v69 -= 16;
        else
          a2 -= 16;
        *(_OWORD *)v70 = *(_OWORD *)v80;
        v70 -= 16;
        a7 = v73;
        v52 = v69 == v73;
        v11 = a4;
        if (v52)
          return result;
      }
      if (v69 != a7)
      {
        v94 = 0;
        do
        {
          *(_OWORD *)&v70[v94] = *(_OWORD *)&v69[v94 - 16];
          v94 -= 16;
        }
        while (&v69[v94] != a7);
      }
    }
  }
  return result;
}

uint64_t *sub_1C601BB04(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)(v37 + 312) < *(_DWORD *)(*v8 + 312))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C601C1EC(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C601C45C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C601C45C(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)(v42 + 312) < *(_DWORD *)(v43 + 312))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)(*v41 + 312);
          if (v46 < *(_DWORD *)(*v40 + 312))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_DWORD *)(*v39 + 312))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_DWORD *)(*v8 + 312))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)(v54 + 312);
                if (v56 < *(_DWORD *)(v55 + 312))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_DWORD *)(v55 + 312))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_DWORD *)(v88 + 312);
              if (v90 < *(_DWORD *)(v89 + 312))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_DWORD *)(v89 + 312));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_DWORD *)(v65 + 312) < *(_DWORD *)(v64[1] + 312))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_DWORD *)(*result + 312);
                if (*(_DWORD *)(v65 + 312) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_DWORD *)(v65 + 312) < *(_DWORD *)(v64[1] + 312))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_DWORD *)(v65 + 312) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v76 + 312);
                  if (result < *(_DWORD *)(v75[1] + 312))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_DWORD *)(*v75 + 312);
                  if (*(_DWORD *)(*v82 + 312) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_DWORD *)(*v82 + 312) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C601C1EC(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C601C1EC(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C601C1EC(v7 + 1, v12 - 1, a2 - 2);
          sub_1C601C1EC(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C601C1EC(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 312);
          if (*(_DWORD *)(*(v7 - 1) + 312) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 312))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_DWORD *)(*v8 + 312));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v28 + 312));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_DWORD *)(v31 + 312));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_DWORD *)(v34 + 312));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_DWORD *)(v35 + 312));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 312);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 312) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 312) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 312) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)(v24 + 312) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)(v25 + 312) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C601BB04(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C601C274(v7, v8 - 1);
        result = (uint64_t *)sub_1C601C274(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C601C1EC(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 312);
  v6 = *(_DWORD *)(*result + 312);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 312);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 312) < *(_DWORD *)(*result + 312))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 312) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C601C274(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 312) < *(_DWORD *)(*a1 + 312))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C601C1EC(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C601C45C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C601C45C(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 312) < *(_DWORD *)(v22 + 312))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 312);
        if (v25 < *(_DWORD *)(*v19 + 312))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 312))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 312))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C601C1EC(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 312);
    if (v14 < *(_DWORD *)(*v8 + 312))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 312))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C601C45C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C601C1EC(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 312) < *(_DWORD *)(*a3 + 312))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 312) < *(_DWORD *)(*a2 + 312))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 312) < *(_DWORD *)(*a1 + 312))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C601C4F0(uint64_t a1, uint64_t a2)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;

  if (a1 != a2)
  {
    v5 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C63C5F74((char **)a1, (char **)a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      v8 = *(char **)a1;
      v9 = *(char **)a1;
      if ((_DWORD)v6)
      {
        v10 = 0;
        do
        {
          sub_1C601C668((uint64_t)&v8[v10], (uint64_t *)&v5[v10]);
          v10 += 16;
        }
        while (16 * v6 != v10);
        v7 = *(unsigned int *)(a1 + 8);
        v9 = &v8[v10];
        v8 = *(char **)a1;
      }
      v11 = &v8[16 * v7];
      while (v11 != v9)
      {
        v13 = (_QWORD *)*((_QWORD *)v11 - 2);
        v11 -= 16;
        v12 = v13;
        *(_QWORD *)v11 = 0;
        if (v13)
        {
          v14 = sub_1C6020570(v12);
          MEMORY[0x1CAA32FC0](v14, 0x10F1C401404827BLL);
        }
      }
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        v15 = *(char **)a1;
        v16 = 16 * v7;
        do
        {
          v17 = sub_1C601C668((uint64_t)v15, (uint64_t *)v5);
          v5 += 16;
          v15 = (char *)(v17 + 16);
          v16 -= 16;
        }
        while (v16);
LABEL_20:
        v18 = *(unsigned int *)(a2 + 8);
        if (v7 != v18)
        {
          v19 = (_OWORD *)(*(_QWORD *)a1 + 16 * v7);
          v20 = (__int128 *)(*(_QWORD *)a2 + 16 * v7);
          v21 = 16 * v18 - 16 * v7;
          do
          {
            v22 = *v20;
            *(_QWORD *)v20++ = 0;
            *v19++ = v22;
            v21 -= 16;
          }
          while (v21);
        }
LABEL_23:
        *(_DWORD *)(a1 + 8) = v6;
        sub_1C63C31E0(a2);
        return a1;
      }
    }
    else
    {
      sub_1C63C31E0(a1);
      sub_1C63C6008(a1, v6);
    }
    v7 = 0;
    goto LABEL_20;
  }
  return a1;
}

uint64_t sub_1C601C668(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    v6 = sub_1C6020570(v5);
    MEMORY[0x1CAA32FC0](v6, 0x10F1C401404827BLL);
  }
  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

unint64_t *sub_1C601C6C0(uint64_t *a1, unsigned __int8 *a2, size_t __n, uint64_t *a4, uint64_t (**a5)(unint64_t, _QWORD))
{
  unsigned int v9;
  int v10;
  size_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *i;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(unint64_t, _QWORD);
  uint64_t *v32;
  uint64_t (**v33)(unint64_t, _QWORD);

  v9 = *((_DWORD *)a1 + 2);
  if (!v9)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *a1 = (uint64_t)v25;
    v9 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v32 = a4;
  v33 = a5;
  v10 = 0;
  if (__n)
  {
    v11 = __n;
    v12 = a2;
    do
    {
      v13 = *v12++;
      v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  v14 = *a1;
  v15 = v9 - 1;
  v16 = *a1 + 8 * v9 + 8;
  v17 = -1;
  v18 = 1;
  v19 = v10;
  while (1)
  {
    v20 = v19 & v15;
    v21 = *(_QWORD **)(v14 + 8 * v20);
    if (!v21)
      break;
    if (v21 == (_QWORD *)-8)
    {
      if (v17 == -1)
        v17 = v19 & v15;
    }
    else if (*(_DWORD *)(v16 + 4 * v20) == v10
           && __n == *v21
           && (!__n || !memcmp(a2, (char *)v21 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v19 = v18 + v20;
    ++v18;
  }
  v22 = v17;
  if (v17 == -1)
  {
    v22 = v20;
    v20 = v20;
  }
  else
  {
    v20 = v17;
  }
  *(_DWORD *)(v16 + 4 * v22) = v10;
  v21 = *(_QWORD **)(v14 + 8 * v20);
LABEL_17:
  i = (unint64_t *)(v14 + 8 * v20);
  if (v21)
  {
    if (v21 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v26 = sub_1C484358C(a1[3], __n + 57, 3);
  v27 = v26;
  v28 = v26 + 56;
  if (__n)
    memcpy((void *)(v26 + 56), a2, __n);
  *(_BYTE *)(v28 + __n) = 0;
  *(_QWORD *)v27 = __n;
  v29 = *v32;
  v30 = *v33;
  *(_QWORD *)(v27 + 8) = *v32;
  *(_DWORD *)(v27 + 16) = v30((v29 & 0xFFFFFFFFFFFFFFF8) + 32, *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8));
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  *i = v27;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t *)(*a1
                               + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v20));
        !*i || *i == -8;
  return i;
}

void sub_1C601C8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v5 = (_QWORD *)*sub_1C601C6C0((uint64_t *)(a1 + 96), (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32), *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8), &v19, (uint64_t (**)(unint64_t, _QWORD))(a1 + 128));
  v6 = (_QWORD *)sub_1C484358C(a1, 16, 3);
  v7 = v6;
  *v6 = &unk_1E81AABD0;
  v6[1] = a3;
  v9 = (_QWORD *)v5[4];
  v8 = v5[5];
  if ((unint64_t)v9 < v8)
  {
    *v9 = v6;
    v17 = v9 + 1;
  }
  else
  {
    v10 = (_QWORD *)v5[3];
    v11 = v9 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = v7;
    v17 = v16 + 8;
    if (v9 != v10)
    {
      do
      {
        v18 = *--v9;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v9 != v10);
      v9 = (_QWORD *)v5[3];
    }
    v5[3] = v16;
    v5[4] = v17;
    v5[5] = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  v5[4] = v17;
}

uint64_t sub_1C601CA20()
{
  unsigned __int32 v0;
  unint64_t v1;
  int v3;
  int *v4;
  __int128 v5;
  int v6;
  __n128 v7;
  const char *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"Use base address specifiers in debug_ranges";
  v7.n128_u64[1] = 43;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED829378, "use-dwarf-ranges-base-address-specifier", &v4, &v7, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED829378, &dword_1C475E000);
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"Generate dwarf aranges";
  v7.n128_u64[1] = 22;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED829438, "generate-arange-section", &v4, &v7, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED829438, &dword_1C475E000);
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"Generate DWARF4 type units.";
  v7.n128_u64[1] = 27;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED8294F8, "generate-type-units", &v4, &v7, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8294F8, &dword_1C475E000);
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"Enable cross-cu references in DWO files";
  v7.n128_u64[1] = 39;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED838508, "split-dwarf-cross-cu-references", &v4, &v7, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED838508, &dword_1C475E000);
  v6 = 1;
  *(_QWORD *)&v5 = "Make an absence of debug location information explicit.";
  *((_QWORD *)&v5 + 1) = 55;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "Default";
  v9 = 7;
  v10 = 0;
  v11 = "At top of block or after label";
  v12 = 30;
  v13 = "Enable";
  v14 = 6;
  v15 = 1;
  v16 = "In all cases";
  v17 = 12;
  v18 = "Disable";
  v19 = 7;
  v20 = 2;
  v21 = "Never";
  v22 = 5;
  v7.n128_u64[1] = 0x400000003;
  v3 = 0;
  v4 = &v3;
  sub_1C63C42B8((llvm::cl::Option *)&unk_1ED829738, "use-unknown-locations", &v6, &v5, (uint64_t)&v7, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C63C2098, &unk_1ED829738, &dword_1C475E000);
  v6 = 1;
  *(_QWORD *)&v5 = "Output dwarf accelerator tables.";
  *((_QWORD *)&v5 + 1) = 32;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "Default";
  v9 = 7;
  v10 = 0;
  v11 = "Default for platform";
  v12 = 20;
  v13 = "Disable";
  v14 = 7;
  v15 = 1;
  v16 = "Disabled.";
  v17 = 9;
  v18 = "Apple";
  v19 = 5;
  v21 = "Apple";
  v22 = 5;
  v23 = "Dwarf";
  v24 = 5;
  v20 = 2;
  v25 = 3;
  v26 = "DWARF";
  v27 = 5;
  v7.n128_u64[1] = 0x400000004;
  v3 = 0;
  v4 = &v3;
  sub_1C63C452C(&v6, &v5, (uint64_t)&v7, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C63C209C, &qword_1ED829990, &dword_1C475E000);
  v6 = 1;
  *(_QWORD *)&v5 = "Use inlined strings rather than string section.";
  *((_QWORD *)&v5 + 1) = 47;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "Default";
  v9 = 7;
  v10 = 0;
  v11 = "Default for platform";
  v12 = 20;
  v13 = "Enable";
  v14 = 6;
  v15 = 1;
  v16 = "Enabled";
  v17 = 7;
  v18 = "Disable";
  v19 = 7;
  v20 = 2;
  v21 = "Disabled";
  v22 = 8;
  v7.n128_u64[1] = 0x400000003;
  v3 = 0;
  v4 = &v3;
  sub_1C63C42B8((llvm::cl::Option *)&unk_1ED829BE8, "dwarf-inlined-strings", &v6, &v5, (uint64_t)&v7, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C63C2098, &unk_1ED829BE8, &dword_1C475E000);
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"Disable emission .debug_ranges section.";
  v7.n128_u64[1] = 39;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED8295B8, "no-dwarf-ranges-section", &v4, &v7, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8295B8, &dword_1C475E000);
  v6 = 1;
  *(_QWORD *)&v5 = "Use sections+offset as references rather than labels.";
  *((_QWORD *)&v5 + 1) = 53;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "Default";
  v9 = 7;
  v10 = 0;
  v11 = "Default for platform";
  v12 = 20;
  v13 = "Enable";
  v14 = 6;
  v15 = 1;
  v16 = "Enabled";
  v17 = 7;
  v18 = "Disable";
  v19 = 7;
  v20 = 2;
  v21 = "Disabled";
  v22 = 8;
  v7.n128_u64[1] = 0x400000003;
  v3 = 0;
  v4 = &v3;
  sub_1C63C4858(&v6, &v5, (uint64_t)&v7, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C63C2098, &qword_1ED829E40, &dword_1C475E000);
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"Emit the GNU .debug_macro format with DWARF <5";
  v7.n128_u64[1] = 46;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED829678, "use-gnu-debug-macro", &v4, &v7, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED829678, &dword_1C475E000);
  v6 = 1;
  *(_QWORD *)&v5 = "Enable use of the DWARFv5 DW_OP_convert operator";
  *((_QWORD *)&v5 + 1) = 48;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "Default";
  v9 = 7;
  v10 = 0;
  v11 = "Default for platform";
  v12 = 20;
  v13 = "Enable";
  v14 = 6;
  v15 = 1;
  v16 = "Enabled";
  v17 = 7;
  v18 = "Disable";
  v19 = 7;
  v20 = 2;
  v21 = "Disabled";
  v22 = 8;
  v7.n128_u64[1] = 0x400000003;
  v3 = 0;
  v4 = &v3;
  sub_1C63C49B0(&v6, &v5, (uint64_t)&v7, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C63C2098, &qword_1ED82A098, &dword_1C475E000);
  v6 = 1;
  *(_QWORD *)&v5 = "Which DWARF linkage-name attributes to emit.";
  *((_QWORD *)&v5 + 1) = 44;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "Default";
  v9 = 7;
  v10 = 0;
  v11 = "Default for platform";
  v12 = 20;
  v13 = "All";
  v14 = 3;
  v15 = 1;
  v16 = "All";
  v17 = 3;
  v18 = "Abstract";
  v19 = 8;
  v20 = 2;
  v21 = "Abstract subprograms";
  v22 = 20;
  v7.n128_u64[1] = 0x400000003;
  v3 = 0;
  v4 = &v3;
  sub_1C63C4B08(&v6, &v5, (uint64_t)&v7, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C63C20A0, &qword_1EF8F5898, &dword_1C475E000);
  v6 = 1;
  *(_QWORD *)&v5 = "Always use DW_AT_ranges in DWARFv5 whenever it could allow more address pool entry sharing to reduce "
                   "relocations/object size";
  *((_QWORD *)&v5 + 1) = 124;
  v7.n128_u64[0] = (unint64_t)&v8;
  v7.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v7, (uint64_t)&v8, 5uLL, 40);
  v0 = v7.n128_u32[2];
  v1 = v7.n128_u64[0] + 40 * v7.n128_u32[2];
  *(_QWORD *)v1 = "Default";
  *(_QWORD *)(v1 + 8) = 7;
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = "Default address minimization strategy";
  *(_QWORD *)(v1 + 32) = 37;
  *(_QWORD *)(v1 + 40) = "Ranges";
  *(_QWORD *)(v1 + 48) = 6;
  *(_DWORD *)(v1 + 56) = 2;
  *(_QWORD *)(v1 + 64) = "Use rnglists for contiguous ranges if that allows using a pre-existing base address";
  *(_QWORD *)(v1 + 72) = 83;
  *(_QWORD *)(v1 + 80) = "Expressions";
  *(_QWORD *)(v1 + 88) = 11;
  *(_DWORD *)(v1 + 96) = 3;
  *(_QWORD *)(v1 + 104) = "Use exprloc addrx+offset expressions for any address with a prior base address";
  *(_QWORD *)(v1 + 112) = 78;
  *(_QWORD *)(v1 + 120) = "Form";
  *(_QWORD *)(v1 + 128) = 4;
  *(_DWORD *)(v1 + 136) = 4;
  *(_QWORD *)(v1 + 144) = "Use addrx+offset extension form for any address with a prior base address";
  *(_QWORD *)(v1 + 152) = 73;
  *(_QWORD *)(v1 + 160) = "Disabled";
  *(_QWORD *)(v1 + 168) = 8;
  *(_DWORD *)(v1 + 176) = 1;
  *(_QWORD *)(v1 + 184) = "Stuff";
  *(_QWORD *)(v1 + 192) = 5;
  v7.n128_u32[2] = v0 + 5;
  v3 = 0;
  v4 = &v3;
  sub_1C63C4E34(&v6, &v5, (uint64_t)&v7, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  return __cxa_atexit((void (*)(void *))sub_1C63C20A4, &qword_1EF8F5AF0, &dword_1C475E000);
}

uint64_t sub_1C601D2A8(void (***a1)(void), unint64_t a2)
{
  uint64_t (*v4)(void);
  void (*v6)(void);

  if (a2 <= 0x1F)
  {
    v4 = (uint64_t (*)(void))**a1;
    return v4();
  }
  v6 = **a1;
  if (a2 == -1)
  {
    v6();
    v4 = (uint64_t (*)(void))**a1;
    return v4();
  }
  v6();
  return ((uint64_t (*)(void (***)(void), unint64_t))(*a1)[2])(a1, a2);
}

uint64_t sub_1C601D344(uint64_t a1, int a2, int a3)
{
  if (a2 <= 31)
  {
    (**(void (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (a2 + 112), 0);
  }
  else
  {
    (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 146, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a2);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, a3);
}

void (***sub_1C601D3D4(void (***result)(void), int a2, unsigned int a3))(void)
{
  uint64_t v4;
  void (***v5)(void);
  void (*v6)(void);

  if (a2)
  {
    LODWORD(v4) = a2;
    v5 = result;
    v6 = **result;
    if (a2 & 7 | a3)
    {
      v6();
      v4 = v4;
      ((void (*)(void (***)(void), _QWORD))(*v5)[2])(v5, v4);
      result = (void (***)(void))((uint64_t (*)(void (***)(void), _QWORD))(*v5)[2])(v5, a3);
    }
    else
    {
      v6();
      result = (void (***)(void))((uint64_t (*)(void (***)(void), _QWORD))(*v5)[2])(v5, v4 >> 3);
      v4 = v4;
    }
    v5[9] = (void (**)(void))((char *)v5[9] + v4);
  }
  return result;
}

uint64_t sub_1C601D484(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v2 = (*(unsigned int *)(result + 80) | ((unint64_t)*(unsigned __int16 *)(result + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
  *(_DWORD *)(result + 80) = *(_DWORD *)(result + 80);
  *(_WORD *)(result + 84) = WORD2(v2);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    v4 = result;
    v5 = 0;
    if (v3 >= 0x41)
      v6 = *(unint64_t **)a2;
    else
      v6 = (unint64_t *)a2;
    v7 = *(_DWORD *)(a2 + 8);
    do
    {
      v8 = *v6;
      v9 = (*(unsigned int *)(v4 + 80) | ((unint64_t)*(unsigned __int16 *)(v4 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
      *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 80);
      *(_WORD *)(v4 + 84) = WORD2(v9);
      result = sub_1C601D2A8((void (***)(void))v4, v8);
      if (v3 <= 0x40 && !v5)
        break;
      if ((((unint64_t)*(unsigned __int16 *)(v4 + 84) << 32) & 0x180000000000) != 0)
        (**(void (***)(uint64_t, uint64_t, _QWORD))v4)(v4, 159, 0);
      ++v6;
      v10 = v7 >= 0x40 ? 64 : v7;
      result = (uint64_t)sub_1C601D3D4((void (***)(void))v4, v10, v5);
      v5 += 64;
      v7 -= 64;
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t sub_1C601D588(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t **v5;
  int8x16_t FragmentInfo;
  __int32 v9;
  _QWORD *v10;
  unsigned int DwarfRegNum;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t *v42;
  uint64_t **v43;
  unint64_t v44;
  uint64_t **v45;
  uint64_t v46;
  uint64_t *v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int16 v54;
  unsigned __int16 *v55;
  unsigned __int32 v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int32 v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  char v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unsigned int v98;
  unsigned __int16 *v99;
  int v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t j;
  uint64_t v114;
  unint64_t i;
  uint64_t v116;
  unint64_t v117;
  uint64_t **v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned __int32 v122;
  uint64_t v123;
  int8x16_t v124;
  unsigned __int8 v125;
  int8x16_t v126;
  char v127;
  unint64_t v128;

  v5 = (uint64_t **)a3;
  FragmentInfo = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)a3, (uint64_t *)*(_QWORD *)(a3 + 8), &v126);
  if (v127)
    v9 = v126.i32[0];
  else
    v9 = -2;
  v122 = v9;
  v123 = a4;
  if (a4 - 1 >= 0x3FFFFFFF)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, int8x16_t))(*(_QWORD *)a1 + 72))(a1, a2, a4, FragmentInfo))goto LABEL_151;
    v15 = *(unsigned int *)(a1 + 32);
    if (v15 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v15 + 1, 16);
      LODWORD(v15) = *(_DWORD *)(a1 + 32);
    }
    *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * v15) = xmmword_1C6612660;
LABEL_13:
    ++*(_DWORD *)(a1 + 32);
    goto LABEL_14;
  }
  v10 = (_QWORD *)(a2 + 8);
  DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(a2 + 8, a4, 0);
  if ((DwarfRegNum & 0x80000000) == 0)
  {
    v12 = DwarfRegNum;
    v13 = *(unsigned int *)(a1 + 32);
    if (v13 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v13 + 1, 16);
      LODWORD(v13) = *(_DWORD *)(a1 + 32);
    }
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v13);
    *v14 = v12;
    v14[1] = 0;
    goto LABEL_13;
  }
  v34 = *(_QWORD *)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 8);
  v36 = *(unsigned int *)(v35 + 24 * a4 + 8);
  if (*(_WORD *)(v34 + 2 * v36))
  {
    v37 = *(_WORD *)(v34 + 2 * v36) + a4;
    v38 = (unsigned __int16 *)(v34 + 2 * v36 + 2);
    while (1)
    {
      v39 = v37;
      v40 = llvm::MCRegisterInfo::getDwarfRegNum(a2 + 8, v37, 0);
      if ((v40 & 0x80000000) == 0)
        break;
      v41 = *v38++;
      v37 = v41 + v39;
      if (!v41)
        goto LABEL_44;
    }
    v98 = v40;
    v99 = (unsigned __int16 *)(*(_QWORD *)(a2 + 96)
                             + 4 * llvm::MCRegisterInfo::getSubRegIndex((_QWORD *)(a2 + 8), v39, a4));
    v100 = v99[1];
    v101 = *v99;
    v102 = *(unsigned int *)(a1 + 32);
    if (v102 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v102 + 1, 16);
      LODWORD(v102) = *(_DWORD *)(a1 + 32);
    }
    v103 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v102);
    *v103 = v98;
    v103[1] = "super-register";
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 80) = v100 | (v101 << 16);
LABEL_14:
    v16 = *v5;
    v17 = v5[1];
    if (*v5 == v17 || *v16 == 4096)
    {
      v18 = 0;
      v19 = 0;
      if (!*(_BYTE *)(a1 + 8))
        goto LABEL_22;
    }
    else
    {
      v18 = 1;
    }
    v19 = v18;
    if (*(_DWORD *)(a1 + 32) >= 2u)
    {
      if (*(_BYTE *)(a1 + 8))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v20 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
        *(_BYTE *)(a1 + 8) = 0;
      }
      else
      {
        v20 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
      }
      result = 0;
      *(_DWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 80) = v20;
      v24 = (v20 & 0xFFFFFFF8FFFFFFFFLL) >> 32;
      goto LABEL_128;
    }
LABEL_22:
    v21 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
    if ((v21 & 0x10000000000) != 0)
    {
      if ((v21 & 0x4000000000) == 0)
        goto LABEL_28;
    }
    else
    {
      if ((v21 & 0x700000000) == 0x200000000)
        v22 = 1;
      else
        v22 = v19;
      if ((v21 & 0x4000000000) == 0 && (v22 & 1) != 0)
      {
LABEL_28:
        if ((v21 & 0x180000000000) == 0)
        {
          v124.i64[0] = (uint64_t)*v5;
          if (v16 != v17)
          {
            v94 = v16;
            while (*v94 != 159)
            {
              v94 += llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v124);
              v124.i64[0] = (uint64_t)v94;
              if (v94 == v17)
                goto LABEL_29;
            }
            goto LABEL_30;
          }
        }
LABEL_29:
        if (*(_DWORD *)(a1 + 32) >= 2u)
        {
LABEL_30:
          result = 0;
          *(_DWORD *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + 80) = v21;
          v24 = (v21 & 0xFFFFFFF8FFFFFFFFLL) >> 32;
LABEL_128:
          *(_WORD *)(a1 + 84) = v24;
          return result;
        }
        v90 = **(_DWORD **)(a1 + 24);
        v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v123);
        if (v16 != v17)
        {
          if (*v16 == 16)
          {
            v108 = *v5;
            v107 = v5[1];
            if (*v5 != v107)
            {
              v109 = v16[1];
              v124.i64[0] = (uint64_t)*v5;
              v110 = &v108[llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v124)];
              if (v110 != v107)
              {
                v111 = *v110;
                if (v111 == 34 && v109 >> 31 == 0)
                {
                  for (i = 3; i > 1; --i)
                  {
                    v108 += llvm::DIExpression::ExprOperand::getSize(v5);
                    *v5 = v108;
                  }
                  LODWORD(v92) = v109;
                  if (!v91)
                    goto LABEL_135;
                  goto LABEL_168;
                }
                if (v111 == 28)
                {
                  LODWORD(v92) = 0;
                  if (!*(_WORD *)(a1 + 80) && v109 <= 0x80000000)
                  {
                    for (j = 3; j > 1; --j)
                    {
                      v108 += llvm::DIExpression::ExprOperand::getSize(v5);
                      *v5 = v108;
                    }
                    LODWORD(v92) = -(int)v109;
                    if (!v91)
                      goto LABEL_135;
                    goto LABEL_168;
                  }
                  goto LABEL_167;
                }
              }
            }
          }
          else if (*v16 == 35)
          {
            v92 = v16[1];
            if (!(v92 >> 31))
            {
              if (*v5 != v5[1])
              {
                v93 = *v5;
                *v5 = &v93[llvm::DIExpression::ExprOperand::getSize(v5)];
                if (!v91)
                {
LABEL_135:
                  sub_1C601D344(a1, v90, v92);
LABEL_169:
                  *(_DWORD *)(a1 + 32) = 0;
                  result = 1;
                  if (!*(_WORD *)(a1 + 80) || *v5 == v5[1] || **v5 == 4096)
                    return result;
LABEL_172:
                  sub_1C63C63D8(a1);
                  return 1;
                }
LABEL_168:
                (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 145, 0);
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, (int)v92);
                goto LABEL_169;
              }
LABEL_167:
              if (!v91)
                goto LABEL_135;
              goto LABEL_168;
            }
          }
        }
        LODWORD(v92) = 0;
        goto LABEL_167;
      }
    }
    llvm::DIExpression::getFragmentInfo(*v5, v5[1], &v124);
    v25 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v25)
    {
      LODWORD(v26) = 0;
      v27 = v125;
      v28 = v124.i64[0];
      v29 = 16 * v25;
      v30 = (int *)(*(_QWORD *)(a1 + 24) + 4);
      do
      {
        v31 = *(v30 - 1);
        v32 = *v30;
        if ((v31 & 0x80000000) == 0)
          sub_1C63C6128(a1, v31);
        v26 = (v32 + v26);
        if (v27 && v28 < v26)
          break;
        v33 = *v30;
        v30 += 4;
        sub_1C601D3D4((void (***)(void))a1, v33, 0);
        v29 -= 16;
      }
      while (v29);
      v21 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
    }
    if ((v21 & 0x4000000000) != 0)
    {
      sub_1C63C6330((uint64_t *)a1);
      v21 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
      if ((v21 & 0x8000000000) == 0)
      {
        v114 = (v21 >> 40) & 1;
        if ((v21 & 0x180000000000) == 0)
          LODWORD(v114) = 1;
        if (((v19 | v114) & 1) == 0)
        {
          (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 159, 0);
          LODWORD(v21) = *(_DWORD *)(a1 + 80);
        }
      }
    }
    *(_DWORD *)(a1 + 32) = 0;
    v47 = *v5;
    if ((_WORD)v21)
      v48 = v47 == v5[1];
    else
      v48 = 1;
    if (v48 || *v47 == 4096)
      return 1;
    goto LABEL_172;
  }
LABEL_44:
  v42 = 0;
  v43 = *(uint64_t ***)(a2 + 248);
  v44 = (unint64_t)a4 >> 3;
  v45 = *(uint64_t ***)(a2 + 240);
  do
  {
    if (a4 - 0x40000000 >= 0xC0000001)
    {
      v46 = **v45;
      if (v44 < *(unsigned __int16 *)(v46 + 22)
        && ((1 << (a4 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v46 + 8) + v44)) != 0
        && (!v42
         || *v45 != v42
         && ((*(_DWORD *)(v42[1] + ((*(unsigned __int16 *)(v46 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v46 + 24)) & 1) != 0))
      {
        v42 = *v45;
      }
    }
    ++v45;
  }
  while (v45 != v43);
  v49 = *(unsigned int *)(*(_QWORD *)(a2 + 264)
                        + 24
                        * (*(unsigned __int16 *)(*v42 + 24)
                         + *(_DWORD *)(a2 + 272) * (((unint64_t)v43 - *(_QWORD *)(a2 + 240)) >> 3)));
  if (v49 > 0x39)
  {
    v50 = operator new();
    *(_QWORD *)v50 = v50 + 16;
    *(_QWORD *)(v50 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v50, (v49 + 63) >> 6, 0);
    *(_DWORD *)(v50 + 64) = v49;
    v34 = *(_QWORD *)(a2 + 56);
    v35 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v50 = (v49 << 58) | 1;
  }
  v124.i64[0] = v50;
  v51 = (_WORD *)(v34 + 2 * *(unsigned int *)(v35 + 24 * a4 + 4));
  if (!*v51)
  {
    sub_1C4914448((void ***)&v124);
    goto LABEL_151;
  }
  v52 = a4;
  v53 = 0;
  v54 = *v51 + a4;
  v117 = (v49 + 63) >> 6;
  v118 = v5;
  v120 = (v49 << 58) | 1;
  v121 = v49;
  v119 = (_QWORD *)(a1 + 24);
  v116 = a1 + 40;
  do
  {
    v55 = (unsigned __int16 *)(*(_QWORD *)(a2 + 96)
                             + 4 * llvm::MCRegisterInfo::getSubRegIndex(v10, v52, v54));
    v56 = v55[1];
    v57 = *v55;
    v58 = llvm::MCRegisterInfo::getDwarfRegNum((uint64_t)v10, v54, 0);
    if ((v58 & 0x80000000) != 0)
      goto LABEL_124;
    v59 = v58;
    v60 = a2;
    v128 = 1;
    v61 = v120;
    if (v121 >= 0x3A)
    {
      v61 = operator new();
      *(_QWORD *)v61 = v61 + 16;
      *(_QWORD *)(v61 + 8) = 0x600000000;
      sub_1C4765AA4((char *)v61, v117, 0);
      *(_DWORD *)(v61 + 64) = v121;
    }
    v128 = v61;
    sub_1C49144A0(&v128, v57, v57 + v56);
    v62 = v122 - v57;
    if (v122 <= v57)
      goto LABEL_123;
    if ((v128 & 1) != 0)
    {
      v72 = v128 >> 58;
      if ((v124.i8[0] & 1) != 0)
      {
        if (((v128 >> 1) & ~(-1 << v72) & ((-1 << ((unint64_t)v124.i64[0] >> 58)) | ~((unint64_t)v124.i64[0] >> 1))) != 0)
          goto LABEL_100;
        goto LABEL_123;
      }
      v73 = *(unsigned int *)(v124.i64[0] + 64);
LABEL_86:
      if (v73 < v72)
        v72 = v73;
      if (v72)
      {
        v74 = 0;
        while (1)
        {
          v75 = v74;
          v76 = (v128 >> 1) & ~(-1 << (v128 >> 58));
          if ((v128 & 1) == 0)
          {
            v75 = v74 & 0x3F;
            v76 = *(_QWORD *)(*(_QWORD *)v128 + 8 * (v74 >> 6));
          }
          if (((v76 >> v75) & 1) != 0)
          {
            v77 = v74;
            v78 = ((unint64_t)v124.i64[0] >> 1) & ~(-1 << ((unint64_t)v124.i64[0] >> 58));
            if ((v124.i8[0] & 1) == 0)
            {
              v77 = v74 & 0x3F;
              v78 = *(_QWORD *)(*(_QWORD *)v124.i64[0] + 8 * (v74 >> 6));
            }
            if (((v78 >> v77) & 1) == 0)
              break;
          }
          if (v72 == ++v74)
            goto LABEL_97;
        }
      }
      else
      {
LABEL_97:
        if ((v128 & 1) != 0)
          v79 = v128 >> 58;
        else
          LODWORD(v79) = *(_DWORD *)(v128 + 64);
        if ((_DWORD)v72 == (_DWORD)v79)
          goto LABEL_123;
        while (1)
        {
          v87 = v72;
          v88 = (v128 >> 1) & ~(-1 << (v128 >> 58));
          if ((v128 & 1) == 0)
          {
            v87 = v72 & 0x3F;
            v88 = *(_QWORD *)(*(_QWORD *)v128 + 8 * (v72 >> 6));
          }
          if (((v88 >> v87) & 1) != 0)
            break;
          LODWORD(v72) = v72 + 1;
          if ((_DWORD)v79 == (_DWORD)v72)
            goto LABEL_123;
        }
      }
LABEL_100:
      v80 = v57 >= v53;
      v81 = v57 - v53;
      if ((_DWORD)v81 != 0 && v80)
      {
        v82 = *(unsigned int *)(a1 + 32);
        if (v82 >= *(unsigned int *)(a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v119, v116, v82 + 1, 16);
          v62 = v122 - v57;
          v82 = *(unsigned int *)(a1 + 32);
        }
        v83 = *(_QWORD *)(a1 + 24) + 16 * v82;
        *(_QWORD *)v83 = (v81 << 32) | 0xFFFFFFFFLL;
        *(_QWORD *)(v83 + 8) = "no DWARF register encoding";
        LODWORD(v83) = *(_DWORD *)(a1 + 32) + 1;
        *(_DWORD *)(a1 + 32) = v83;
      }
      else
      {
        v83 = *(unsigned int *)(a1 + 32);
        if (!v57 && v122 <= v56)
        {
          if (v83 >= *(_DWORD *)(a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v119, v116, v83 + 1, 16);
            LODWORD(v83) = *(_DWORD *)(a1 + 32);
          }
          v85 = v59;
LABEL_116:
          v86 = (unint64_t *)(*v119 + 16 * v83);
          *v86 = v85;
          v86[1] = (unint64_t)"sub-register";
          ++*(_DWORD *)(a1 + 32);
          goto LABEL_123;
        }
      }
      if (v62 >= v56)
        v84 = v56;
      else
        v84 = v62;
      if (v83 >= *(_DWORD *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v119, v116, v83 + 1, 16);
        LODWORD(v83) = *(_DWORD *)(a1 + 32);
      }
      v85 = v59 | (unint64_t)(v84 << 32);
      goto LABEL_116;
    }
    if ((v124.i8[0] & 1) != 0)
    {
      v72 = *(unsigned int *)(v128 + 64);
      v73 = (unint64_t)v124.i64[0] >> 58;
      goto LABEL_86;
    }
    v63 = *(_DWORD *)(v128 + 8);
    v64 = *(_DWORD *)(v124.i64[0] + 8);
    if (v64 >= v63)
      v65 = v63;
    else
      v65 = v64;
    if ((_DWORD)v65)
    {
      v66 = *(uint64_t **)v128;
      v67 = *(uint64_t **)v124.i64[0];
      v68 = v65;
      do
      {
        v70 = *v66++;
        v69 = v70;
        v71 = *v67++;
        if ((v69 & ~v71) != 0)
          goto LABEL_100;
      }
      while (--v68);
    }
    if (v63 > v64)
    {
      while (!*(_QWORD *)(*(_QWORD *)v128 + 8 * v65))
      {
        LODWORD(v65) = v65 + 1;
        if (v63 == (_DWORD)v65)
          goto LABEL_123;
      }
      goto LABEL_100;
    }
LABEL_123:
    sub_1C49144A0((unint64_t *)&v124, v57, v57 + v56);
    sub_1C4914448((void ***)&v128);
    v53 = v57 + v56;
    a2 = v60;
    v52 = v123;
LABEL_124:
    v89 = (unsigned __int16)v51[1];
    ++v51;
    v54 += v89;
  }
  while (v89);
  if (v53 && v121 > v53)
  {
    v95 = ((unint64_t)(v121 - v53) << 32) | 0xFFFFFFFF;
    v96 = *(unsigned int *)(a1 + 32);
    v5 = v118;
    if (v96 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v119, v116, v96 + 1, 16);
      LODWORD(v96) = *(_DWORD *)(a1 + 32);
    }
    v97 = (unint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v96);
    *v97 = v95;
    v97[1] = (unint64_t)"no DWARF register encoding";
    ++*(_DWORD *)(a1 + 32);
    sub_1C4914448((void ***)&v124);
    goto LABEL_14;
  }
  sub_1C4914448((void ***)&v124);
  v5 = v118;
  if (v53)
    goto LABEL_14;
LABEL_151:
  result = 0;
  v105 = *(_DWORD *)(a1 + 80);
  v104 = a1 + 80;
  v106 = *(unsigned __int16 *)(v104 + 4);
  *(_DWORD *)v104 = v105;
  *(_WORD *)(v104 + 4) = ((v105 | (unint64_t)(v106 << 32)) & 0xFFFFFFF8FFFFFFFFLL) >> 32;
  return result;
}

uint64_t sub_1C601E10C(uint64_t result, _BYTE *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;

  if (!*a2)
  {
    v4 = (*(unsigned int *)(result + 80) | ((unint64_t)*(unsigned __int16 *)(result + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x200000000;
    *(_DWORD *)(result + 80) = *(_DWORD *)(result + 80);
    *(_WORD *)(result + 84) = WORD2(v4);
  }
  v3 = *(_QWORD **)(a3 + 24);
  if (((*(_QWORD *)(a3 + 32) - (_QWORD)v3) & 0x7FFFFFFF8) != 0 && *v3 == 4099)
  {
    v5 = *(unsigned __int16 *)(result + 84);
    v6 = *(unsigned int *)(result + 80) | (unint64_t)(v5 << 32);
    v7 = (v5 >> 6) & 6;
    v8 = v6 & 0xFFFFFE3FFFFFFFFFLL;
    *(_DWORD *)(result + 80) = v8;
    *(_WORD *)(result + 84) = (v8 | ((unint64_t)(v7 | 1) << 38)) >> 32;
    if (!*a2)
    {
      *(_DWORD *)(result + 80) = v8;
      *(_WORD *)(result + 84) = (v8 | ((unint64_t)(v7 | 3) << 38)) >> 32;
    }
  }
  return result;
}

uint64_t sub_1C601E1B0(uint64_t a1, uint64_t **this, uint64_t (*a3)(uint64_t, _QWORD, uint64_t **), uint64_t a4)
{
  uint64_t *v5;
  char v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v5 = *this;
  if (*this != this[1])
  {
    v9 = 0;
    v10 = 0;
    do
    {
      result = llvm::DIExpression::ExprOperand::getSize(this);
      *this = &v5[result];
      v12 = *v5;
      if ((unint64_t)(*v5 - 80) <= 0x1F)
      {
LABEL_8:
        (**(void (***)(uint64_t, _QWORD, _QWORD))a1)(a1, *v5, 0);
      }
      else
      {
        if ((unint64_t)(v12 - 112) > 0x1F)
        {
          if (v12 <= 143)
            __asm { BR              X10 }
          switch(v12)
          {
            case 144:
              (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 144, 0);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5[1]);
              goto LABEL_9;
            case 145:
            case 147:
            case 149:
            case 150:
LABEL_49:
              __break(1u);
              return result;
            case 146:
              (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 146, 0);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5[1]);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v5[2]);
              goto LABEL_9;
            case 148:
              (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 148, 0);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, *((unsigned __int8 *)v5 + 8));
              goto LABEL_9;
            case 151:
              goto LABEL_8;
            default:
              switch(v12)
              {
                case 4096:
                  v23 = *(unsigned int *)(a1 + 80);
                  v24 = v23 | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
                  v25 = (unsigned __int16)*(_DWORD *)(a1 + 80);
                  if (v25 >= *((_DWORD *)v5 + 2) - *(_DWORD *)(a1 + 72) + *((_DWORD *)v5 + 4))
                    v25 = *((_DWORD *)v5 + 2) - *(_DWORD *)(a1 + 72) + *((_DWORD *)v5 + 4);
                  if ((_WORD)v23)
                    v26 = v25;
                  else
                    v26 = *((_DWORD *)v5 + 2) - *(_DWORD *)(a1 + 72) + *((_DWORD *)v5 + 4);
                  if ((v24 & 0x700000000) == 0x300000000 && (v24 & 0x180000000000) != 0)
                  {
                    (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 159, 0);
                    LODWORD(v23) = *(_DWORD *)(a1 + 80);
                  }
                  sub_1C601D3D4((void (***)(void))a1, v26, WORD1(v23));
                  v27 = *(_WORD *)(a1 + 84);
                  *(_DWORD *)(a1 + 80) = 0;
                  *(_WORD *)(a1 + 84) = v27 & 0xFFF8;
                  return 1;
                case 4097:
                  v13 = v5[1];
                  v14 = *((_BYTE *)v5 + 16);
                  if ((((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32) & 0x1E0000000000) >= 0x80000000001
                    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 192) + 3537))
                  {
                    (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 168, 0);
                    v18 = sub_1C63C64E8(*(_QWORD *)(a1 + 16), v13, v14);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v18);
                  }
                  else if (v9 && (v15 = v10[1], v15 < v5[1]))
                  {
                    if (*((_BYTE *)v5 + 16) == 7)
                    {
                      sub_1C63C66A4((void (***)(void))a1, v15);
                    }
                    else if (*((_BYTE *)v5 + 16) == 5)
                    {
                      sub_1C63C658C(a1, v15);
                    }
                    v10 = 0;
                    v9 = 0;
                  }
                  else
                  {
                    v10 = v5;
                    v9 = 1;
                  }
                  goto LABEL_9;
                case 4098:
                  v17 = *(unsigned __int8 *)(a1 + 87);
                  *(_BYTE *)(a1 + 86) = v5[1];
                  if (!v17)
                    *(_BYTE *)(a1 + 87) = 1;
                  goto LABEL_9;
                case 4099:
                case 4100:
                  goto LABEL_49;
                case 4101:
                  if ((a3(a4, *((unsigned int *)v5 + 2), this) & 1) != 0)
                    goto LABEL_9;
                  result = 0;
                  v29 = *(_DWORD *)(a1 + 80);
                  v28 = a1 + 80;
                  v30 = *(unsigned __int16 *)(v28 + 4);
                  *(_DWORD *)v28 = v29;
                  *(_WORD *)(v28 + 4) = ((v29 | (unint64_t)(v30 << 32)) & 0xFFFFFFF8FFFFFFFFLL) >> 32;
                  break;
                default:
                  v16 = (*(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
                  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80);
                  *(_WORD *)(a1 + 84) = WORD2(v16);
                  goto LABEL_9;
              }
              return result;
          }
        }
        sub_1C601D344(a1, v12 - 112, *((_DWORD *)v5 + 2));
      }
LABEL_9:
      v5 = *this;
    }
    while (*this != this[1]);
  }
  v19 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
  v20 = v19 & 0x10700000000;
  v21 = v19 & 0x180000000000;
  if (v20 == 0x300000000 && v21 != 0)
    (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, 159, 0);
  return 1;
}

void (***sub_1C601E694(void (***result)(void)))(void)
{
  unsigned int v1;

  v1 = *((_DWORD *)result + 20);
  if (v1 >= 0x10000 && (unsigned __int16)v1 != 0)
    return sub_1C601D3D4(result, (unsigned __int16)v1, HIWORD(v1));
  return result;
}

void sub_1C601E6B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  char v8;

  if (a2)
  {
    v3 = *(uint64_t **)(a2 + 24);
    v4 = *(uint64_t **)(a2 + 32);
    llvm::DIExpression::getFragmentInfo(v3, v4, &v7);
    if (v8)
    {
      llvm::DIExpression::getFragmentInfo(v3, v4, &v7);
      v5 = v7.i64[1];
      v6 = *(_QWORD *)(a1 + 72);
      if (v7.i64[1] > v6)
        sub_1C601D3D4((void (***)(void))a1, v7.i32[2] - v6, 0);
      *(_QWORD *)(a1 + 72) = v5;
    }
  }
}

char *sub_1C601E738(char **a1, int a2, char a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 60)
    sub_1C4764EE4();
  v12 = (char *)operator new(16 * v9);
  v13 = &v12[16 * v5];
  *(_DWORD *)v13 = a2;
  v13[4] = a3;
  *((_QWORD *)v13 + 1) = 0;
  v14 = v13 + 16;
  if (v4 == v3)
  {
    v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t *sub_1C601E82C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;

  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)(a1 + 5);
  a1[4] = 0x400000000;
  a1[11] = 0;
  a1[9] = (uint64_t)(a1 + 11);
  a1[10] = 0;
  a1[12] = 1;
  a1[13] = (uint64_t)(a1 + 1);
  *((_DWORD *)a1 + 30) = 64;
  v9 = malloc_type_calloc(0x41uLL, 8uLL, 0x6D9A4F0CuLL);
  if (!v9)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v9[64] = -1;
  a1[14] = (uint64_t)v9;
  *((_DWORD *)a1 + 37) = 0;
  *(uint64_t *)((char *)a1 + 140) = 0;
  *(uint64_t *)((char *)a1 + 132) = 0;
  *(uint64_t *)((char *)a1 + 124) = 0;
  a1[19] = (uint64_t)(a1 + 21);
  a1[20] = 0x100000000;
  v10 = *a1;
  a1[22] = 0;
  a1[23] = 0;
  *((_DWORD *)a1 + 48) = 0;
  *((_DWORD *)a1 + 49) = 32;
  a1[25] = a5;
  a1[26] = a3;
  a1[27] = a4;
  a1[28] = 0;
  *((_DWORD *)a1 + 58) = 0;
  *((_BYTE *)a1 + 236) = *(_BYTE *)(*(_QWORD *)(v10 + 256) + 424);
  a1[30] = (uint64_t)(a1 + 32);
  a1[31] = 0x100000000;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_DWORD *)a1 + 88) = 0;
  a1[45] = 0;
  a1[46] = 0;
  *((_DWORD *)a1 + 94) = 0;
  a1[48] = 0;
  a1[49] = 0;
  *((_DWORD *)a1 + 100) = 0;
  a1[51] = 0;
  a1[52] = 0;
  *((_DWORD *)a1 + 106) = 0;
  *((_DWORD *)a1 + 112) = 0;
  a1[54] = 0;
  a1[55] = 0;
  return a1;
}

void sub_1C601E954(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C63C68A0(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C63C68A0(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

void sub_1C601E9D8(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v7;

  if (*(_DWORD *)(a2[9] + 36) != 3)
  {
    if (a2[7])
    {
      v4 = (_QWORD *)a2[2];
      if (v4)
      {
        if (*v4 >= 8uLL)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*a1 + 272) + 168))(*(_QWORD *)(*a1 + 272));
          (*(void (**)(_QWORD *, uint64_t))(*a2 + 48))(a2, a3);
          sub_1C5FFAB40(*a1, (uint64_t)(a2 + 1));
          v7 = a2[23];
          if (v7)
            (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 272) + 192))(*(_QWORD *)(*a1 + 272), v7, 0);
        }
      }
    }
  }
}

uint64_t sub_1C601EA98(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(unsigned int *)(result + 160);
  if ((_DWORD)v1)
  {
    v2 = (uint64_t *)result;
    v3 = 0;
    v4 = *(uint64_t **)(result + 152);
    v5 = 8 * v1;
    do
    {
      v6 = *v4;
      if (*(_DWORD *)(*(_QWORD *)(*v4 + 72) + 36) != 3)
      {
        v7 = *(_QWORD **)(v6 + 16);
        if (!v7 || *v7 < 8uLL)
          return result;
        *(_QWORD *)(v6 + 64) = v3;
        result = sub_1C601EB38((uint64_t)v2, v6);
        v3 += result;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
    if (HIDWORD(v3))
    {
      result = sub_1C5FF6B64(*v2);
      if ((result & 1) == 0)
        llvm::report_fatal_error((llvm *)"The generated debug information is too large for the 32-bit DWARF format.", (const char *)1);
    }
  }
  return result;
}

uint64_t sub_1C601EB38(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  __int16 v9;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 272) + 8) + 1626))
    v3 = 12;
  else
    v3 = 4;
  v4 = a2 + 8;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v6 = ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 248) + 248) + 4) << 13) + 57344) & 0xFF0000 | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 272) + 8) + 1626) << 24) | *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 272) + 8) + 1624);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 256) + 424);
  v8 = v6;
  return sub_1C6001330(v4, (uint64_t)&v8, a1 + 104, v5 + v3);
}

uint64_t sub_1C601EBEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;

  v15 = a2;
  v4 = sub_1C601EE90((uint64_t *)(a1 + 336), &v15);
  v5 = v4;
  v6 = *(unsigned __int16 *)(a3[1] + 32);
  v14 = v6;
  if (!v6)
  {
    v7 = *((unsigned int *)v4 + 10);
    if (v7 >= *((_DWORD *)v4 + 11))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 4), (uint64_t)(v4 + 6), v7 + 1, 8);
      LODWORD(v7) = *((_DWORD *)v5 + 10);
    }
    *(_QWORD *)(v5[4] + 8 * v7) = a3;
    ++*((_DWORD *)v5 + 10);
    return 1;
  }
  v9 = v4[2];
  if (!v9)
    goto LABEL_7;
  v10 = v4 + 2;
  do
  {
    v11 = *(_DWORD *)(v9 + 32);
    v12 = v11 >= v6;
    if (v11 >= v6)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (v12)
      v10 = (_QWORD *)v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == v4 + 2 || *((_DWORD *)v10 + 8) > v6)
  {
LABEL_7:
    v16 = &v14;
    sub_1C522492C((uint64_t **)v4 + 1, &v14, (uint64_t)&std::piecewise_construct, &v16)[5] = a3;
    return 1;
  }
  sub_1C6009120(v10[5], (uint64_t)a3);
  return 0;
}

uint64_t sub_1C601ECF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  __int16 v10;
  _QWORD v11[2];
  void *v12[2];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t)(a1 + 30);
  v6 = *a1;
  v9 = "debug_ranges";
  v10 = 259;
  v11[0] = llvm::MCContext::createTempSymbol(*(_QWORD *)(v6 + 264), (uint64_t)&v9, 1);
  v11[1] = a2;
  v12[0] = v13;
  v12[1] = (void *)0x200000000;
  if (*(_DWORD *)(a3 + 8))
    sub_1C6007FD4((uint64_t)v12, (const void **)a3);
  sub_1C601EDE4(v7, (unint64_t)v11);
  if (v12[0] != v13)
    free(v12[0]);
  return (*((_DWORD *)a1 + 62) - 1);
}

uint64_t sub_1C601EDE4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + (v4 << 6);
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      sub_1C601F204(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v11;
    }
    else
    {
      sub_1C601F204(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_QWORD *)(v6 + 24) = 0x200000000;
  *(_QWORD *)(v6 + 16) = v6 + 32;
  result = v6 + 16;
  if (*(_DWORD *)(a2 + 24))
    result = sub_1C6007FD4(result, (const void **)(a2 + 16));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

_QWORD *sub_1C601EE90(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C601EF18(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C601EFB8((uint64_t)a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *v5 = v6;
    v5[1] = v5 + 2;
    v5[4] = v5 + 6;
    *((_DWORD *)v5 + 11) = 8;
  }
  return v5;
}

uint64_t sub_1C601EF18(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 112 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 112 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_13;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_13:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C601EFB8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C601F068(a1, v7);
  v9 = 0;
  sub_1C601EF18((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C601F068(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(112 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C601F12C(a1, v4, v4 + 112 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 112 * v10;
    do
    {
      *result = -4096;
      result += 14;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

void sub_1C601F12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 112 * v6;
    do
    {
      *v7 = -4096;
      v7 += 14;
      v8 -= 112;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C601EF18((uint64_t *)a1, (_QWORD *)a2, &v11);
      v9 = v11;
      *v11 = *(_QWORD *)a2;
      sub_1C63C6990(v9 + 1, a2 + 8);
      ++*(_DWORD *)(a1 + 8);
      v10 = *(void **)(a2 + 32);
      if ((void *)(a2 + 48) != v10)
        free(v10);
      sub_1C47655E8(a2 + 8, *(_QWORD **)(a2 + 16));
    }
    a2 += 112;
  }
}

void sub_1C601F204(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v5);
  sub_1C601F270((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C601F270(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1 + (v2 << 6);
    v5 = (_QWORD *)(a2 + 16);
    v6 = *a1 + 16;
    do
    {
      *((_OWORD *)v5 - 1) = *(_OWORD *)(v6 - 16);
      *v5 = v5 + 2;
      v5[1] = 0x200000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C6007FD4((uint64_t)v5, (const void **)v6);
      v7 = v6 - 16;
      v5 += 8;
      v6 += 64;
    }
    while (v7 + 64 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = v8 << 6;
      do
      {
        v11 = *(void **)(v9 + v10 - 48);
        if ((void *)(v9 + v10 - 32) != v11)
          free(v11);
        v10 -= 64;
      }
      while (v10);
    }
  }
}

unint64_t sub_1C601F330(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4)
{
  unint64_t *v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  unsigned __int8 *v17;
  size_t v18;
  __int128 v19;
  uint64_t v20;

  v19 = 0uLL;
  v20 = 0;
  v17 = a3;
  v18 = a4;
  v7 = sub_1C601F73C((uint64_t *)a1, a3, a4, &v19);
  result = *v7;
  if (v9)
  {
    *(_DWORD *)(result + 24) = -1;
    v10 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(result + 16) = v10;
    if (*(_BYTE *)(a1 + 60))
    {
      v16 = 261;
      v12 = *(_QWORD *)(a1 + 40);
      v15[0] = *(_QWORD *)(a1 + 32);
      v15[1] = v12;
      v13 = v7;
      v14 = result;
      v11 = sub_1C5FF1544(a2, (uint64_t)v15);
      v7 = v13;
      result = v14;
      v10 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)(result + 8) = v11;
    *(_QWORD *)(a1 + 48) = a4 + v10 + 1;
    return *v7;
  }
  return result;
}

void sub_1C601F3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *j;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[4];
  __int16 v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[65];

  v43[64] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 12))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 272) + 168))(*(_QWORD *)(a2 + 272), a3, 0);
    v41 = v43;
    v42 = 0x4000000000;
    v9 = *(unsigned int *)(a1 + 12);
    if (v9 >= 0x41)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v43, v9, 8);
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      for (i = *(uint64_t **)a1; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(uint64_t **)a1;
    }
    v13 = *(_QWORD *)a1 + 8 * v10;
    v14 = v42;
    if (i != (uint64_t *)v13)
    {
      v15 = *i;
      do
      {
        if (v14 >= HIDWORD(v42))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v43, v14 + 1, 8);
          v14 = v42;
        }
        *((_QWORD *)v41 + v14) = v15;
        v14 = v42 + 1;
        LODWORD(v42) = v42 + 1;
        do
        {
          v16 = i[1];
          ++i;
          v15 = v16;
          if (v16)
            v17 = v15 == -8;
          else
            v17 = 1;
        }
        while (v17);
      }
      while (i != (uint64_t *)v13);
    }
    v18 = 126 - 2 * __clz(v14);
    if (v14)
      v19 = v18;
    else
      v19 = 0;
    sub_1C601F954((uint64_t *)v41, (uint64_t *)v41 + v14, v19, 1);
    if ((_DWORD)v42)
    {
      v20 = (char *)v41;
      v21 = 8 * v42;
      do
      {
        if (*(_BYTE *)(a1 + 60))
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 272) + 192))(*(_QWORD *)(a2 + 272), *(_QWORD *)(*(_QWORD *)v20 + 8), 0);
        v22 = *(_QWORD *)(a2 + 272);
        v23 = *(_QWORD *)v20 + 16;
        v39[0] = "string offset=";
        v39[2] = v23;
        v40 = 3075;
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v22 + 112))(v22, v39, 1);
        v24 = *(_QWORD **)v20;
        v20 += 8;
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a2 + 272) + 488))(*(_QWORD *)(a2 + 272), v24 + 4, *v24 + 1);
        v21 -= 8;
      }
      while (v21);
    }
    if (a4)
    {
      sub_1C6154790((uint64_t)&v41, *(unsigned int *)(a1 + 56));
      v25 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v25)
      {
        for (j = *(uint64_t **)a1; !*j || *j == -8; ++j)
          ;
      }
      else
      {
        j = *(uint64_t **)a1;
      }
      v28 = *(_QWORD *)a1 + 8 * v25;
      if (j != (uint64_t *)v28)
      {
        v29 = *j;
        do
        {
          v30 = *(unsigned int *)(v29 + 24);
          if ((_DWORD)v30 != -1)
            *((_QWORD *)v41 + v30) = v29;
          do
          {
            v31 = j[1];
            ++j;
            v29 = v31;
            if (v31)
              v32 = v29 == -8;
            else
              v32 = 1;
          }
          while (v32);
        }
        while (j != (uint64_t *)v28);
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 272) + 168))(*(_QWORD *)(a2 + 272), a4, 0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 272) + 8) + 1626))
        v33 = 8;
      else
        v33 = 4;
      if ((_DWORD)v42)
      {
        v34 = (char *)v41;
        v35 = 8 * v42;
        do
        {
          if (a5)
          {
            v36 = *(_QWORD *)v34;
            v37 = *(_OWORD *)(*(_QWORD *)v34 + 8);
            v38 = *(_QWORD *)(v36 + 24);
            sub_1C5FFAAF0(a2, (uint64_t)&v37);
          }
          else
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 272) + 512))(*(_QWORD *)(a2 + 272), *(_QWORD *)(*(_QWORD *)v34 + 16), v33);
          }
          v34 += 8;
          v35 -= 8;
        }
        while (v35);
      }
    }
    if (v41 != v43)
      free(v41);
  }
}

unint64_t *sub_1C601F73C(uint64_t *a1, unsigned __int8 *a2, size_t __n, __int128 *a4)
{
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *i;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 *v29;

  v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v23 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v23)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v23[16] = 2;
    *a1 = (uint64_t)v23;
    v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v29 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *a1;
  v13 = v7 - 1;
  v14 = *a1 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8
           && __n == *v19
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_17:
  i = (unint64_t *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v24 = sub_1C484358C(a1[3], __n + 33, 3);
  v25 = v24;
  v26 = v24 + 32;
  if (__n)
    memcpy((void *)(v24 + 32), a2, __n);
  *(_BYTE *)(v26 + __n) = 0;
  *(_QWORD *)v25 = __n;
  v27 = *v29;
  *(_QWORD *)(v25 + 24) = *((_QWORD *)v29 + 2);
  *(_OWORD *)(v25 + 8) = v27;
  *i = v25;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t *)(*a1
                               + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_1C601F954(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_QWORD *)(v37 + 16) < *(_QWORD *)(*v8 + 16))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C602003C(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C60202AC(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C60202AC(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_QWORD *)(v42 + 16) < *(_QWORD *)(v43 + 16))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_QWORD *)(*v41 + 16);
          if (v46 < *(_QWORD *)(*v40 + 16))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_QWORD *)(*v39 + 16))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_QWORD *)(*v8 + 16))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_QWORD *)(v54 + 16);
                if (v56 < *(_QWORD *)(v55 + 16))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_QWORD *)(v55 + 16))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_QWORD *)(v88 + 16);
              if (v90 < *(_QWORD *)(v89 + 16))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_QWORD *)(v89 + 16));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_QWORD *)(v65 + 16) < *(_QWORD *)(v64[1] + 16))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_QWORD *)(*result + 16);
                if (*(_QWORD *)(v65 + 16) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_QWORD *)(v65 + 16) < *(_QWORD *)(v64[1] + 16))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_QWORD *)(v65 + 16) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = *(uint64_t **)(v76 + 16);
                  if ((unint64_t)result < *(_QWORD *)(v75[1] + 16))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_QWORD *)(*v75 + 16);
                  if (*(_QWORD *)(*v82 + 16) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_QWORD *)(*v82 + 16) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C602003C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C602003C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C602003C(v7 + 1, v12 - 1, a2 - 2);
          sub_1C602003C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C602003C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 16);
          if (*(_QWORD *)(*(v7 - 1) + 16) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 16))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_QWORD *)(*v8 + 16));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v28 + 16));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_QWORD *)(v31 + 16));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_QWORD *)(v34 + 16));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_QWORD *)(v35 + 16));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 16);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 16) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 16) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 16) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_QWORD *)(v24 + 16) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_QWORD *)(v25 + 16) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C601F954(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C60200C4(v7, v8 - 1);
        result = (uint64_t *)sub_1C60200C4(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C602003C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 16);
  v6 = *(_QWORD *)(*result + 16);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 16);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 16) < *(_QWORD *)(*result + 16))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_QWORD *)(*a3 + 16) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C60200C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 16) < *(_QWORD *)(*a1 + 16))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C602003C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C60202AC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C60202AC(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 16) < *(_QWORD *)(v22 + 16))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 16);
        if (v25 < *(_QWORD *)(*v19 + 16))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 16))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 16))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C602003C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 16);
    if (v14 < *(_QWORD *)(*v8 + 16))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 16))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C60202AC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C602003C(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 16) < *(_QWORD *)(*a3 + 16))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 16) < *(_QWORD *)(*a2 + 16))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_QWORD *)(*a2 + 16) < *(_QWORD *)(*a1 + 16))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unint64_t sub_1C6020340(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t *v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 120))
    v3 = (unint64_t *)(a1 + 104);
  else
    v3 = *(unint64_t **)(a1 + 96);
  v5[0] = 0xB000000000001;
  v5[1] = a2;
  return sub_1C6008110(v3, v2 + 80, (int *)v5);
}

unint64_t sub_1C60203B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 120))
    v3 = (unint64_t *)(a1 + 104);
  else
    v3 = *(unint64_t **)(a1 + 96);
  v5[0] = 0xD000000000001;
  v5[1] = a2;
  return sub_1C6008110(v3, v2 + 80, (int *)v5);
}

unint64_t sub_1C6020430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 120))
    v3 = (unint64_t *)(a1 + 104);
  else
    v3 = *(unint64_t **)(a1 + 96);
  v5[0] = 0xF000000000001;
  v5[1] = a2;
  return sub_1C6008110(v3, v2 + 80, (int *)v5);
}

BOOL sub_1C60204A8(uint64_t a1, uint64_t a2, int a3)
{
  return (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 552))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 280)) == a3;
}

double sub_1C60204E8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_WORD *)(a1 + 36) = a2;
  *(_BYTE *)(a1 + 38) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 48) = a1 | 4;
  *(_QWORD *)a1 = off_1E81ABA58;
  *(_QWORD *)(a1 + 8) = (a1 + 8) | 4;
  *(_QWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 176) = a4;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = a5;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 200) = a6;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  return result;
}

_QWORD *sub_1C6020570(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1E81ABA58;
  MEMORY[0x1CAA32FB4](a1[36], 8);
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[30];
  if (v3)
  {
    a1[31] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[27], 8);
  sub_1C4926AE8((uint64_t)(a1 + 10));
  return a1;
}

uint64_t sub_1C60205E4(_QWORD *a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t result;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 80))(a1) || (result = sub_1C63C2208(), (_DWORD)result))
  {
    v4 = *a2;
    if (v4 == 17)
    {
      if ((a2[44] & 8) != 0)
        return 0;
    }
    else if ((v4 - 11) >= 4 && v4 != 33)
    {
      return 0;
    }
    return *(_BYTE *)(a1[24] + 3535) == 0;
  }
  return result;
}

uint64_t sub_1C6020664(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned __int8 *v7;

  if (sub_1C60205E4(a1, a2))
    v4 = (uint64_t *)(a1[25] + 432);
  else
    v4 = a1 + 27;
  v6 = 0;
  v7 = a2;
  if (sub_1C4850EC8(v4, &v7, &v6))
    return *(_QWORD *)(v6 + 8);
  else
    return 0;
}

uint64_t sub_1C60206C8(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[24];
  unsigned __int8 *v9;
  uint64_t v10;

  if (sub_1C60205E4(a1, a2))
    v6 = a1[25] + 432;
  else
    v6 = (uint64_t)(a1 + 27);
  v9 = a2;
  v10 = a3;
  return sub_1C6024B4C(v6, &v9, &v10, (uint64_t)v8);
}

unint64_t sub_1C602072C(unint64_t a1, uint64_t a2, int a3)
{
  unint64_t *v3;
  __int16 v4;
  uint64_t v6;

  v3 = (unint64_t *)(a2 + 8);
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8) + 1624) >= 4u)
  {
    v6 = 1;
    v4 = 25;
  }
  else
  {
    v6 = 1;
    v4 = 12;
  }
  return sub_1C6002D64(a1, v3, a3, v4, &v6);
}

unint64_t sub_1C602078C(unint64_t a1, unint64_t *a2, int a3, int a4, unint64_t a5)
{
  __int16 v5;
  __int16 v6;
  __int16 v7;
  unint64_t v9;

  if (HIDWORD(a5))
    v5 = 7;
  else
    v5 = 6;
  if (a5 >= 0x10000)
    v6 = v5;
  else
    v6 = 5;
  if (a5 >= 0x100)
    v7 = v6;
  else
    v7 = 11;
  if ((*(_QWORD *)&a4 & 0xFF0000) != 0)
    v7 = a4;
  v9 = a5;
  return sub_1C6002D64(a1, a2, a3, v7, &v9);
}

_QWORD *sub_1C60207E4(_QWORD *result, uint64_t a2, int a3, void *a4, size_t a5)
{
  _QWORD *v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  _QWORD *v23;

  if (*(_DWORD *)(result[9] + 36) != 3)
  {
    v9 = result;
    if (*(_BYTE *)(result[24] + 3531))
    {
      v15 = (unint64_t *)(a2 + 8);
      v16 = (_QWORD *)sub_1C484358C((uint64_t)(result + 10), 16, 3);
      if (a5)
      {
        v17 = (void *)sub_1C484358C((uint64_t)(v9 + 10), a5, 0);
        memmove(v17, a4, a5);
      }
      else
      {
        v17 = 0;
      }
      *v16 = v17;
      v16[1] = a5;
      v23 = v16;
      return (_QWORD *)sub_1C63C6E0C((uint64_t)v9, v15, a3, 8, (uint64_t *)&v23);
    }
    else
    {
      v10 = (*(uint64_t (**)(_QWORD *))(*result + 80))(result);
      if (v10)
        v11 = 7938;
      else
        v11 = 14;
      v12 = v9[25] + 176;
      v13 = v9[22];
      if (*(_BYTE *)(v9[24] + 3550))
        v14 = 0;
      else
        v14 = v10 == 0;
      if (v14)
        v18 = sub_1C601F330(v12, v13, (unsigned __int8 *)a4, a5);
      else
        v18 = sub_1C63C6A14(v12, v13, (unsigned __int8 *)a4, a5);
      if (*(_BYTE *)(v9[24] + 3550))
      {
        v19 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
        v20 = HIBYTE(v19);
        v21 = HIWORD(v19);
        if (v19 <= 0xFF)
          v22 = 37;
        else
          v22 = 38;
        if (v21)
          v22 = 39;
        if (v20)
          v11 = 40;
        else
          v11 = v22;
      }
      v23 = (_QWORD *)v18;
      return (_QWORD *)sub_1C602096C((unint64_t)v9, (unint64_t *)(a2 + 8), a3, v11, &v23);
    }
  }
  return result;
}

unint64_t sub_1C602096C(unint64_t result, unint64_t *a2, int a3, __int16 a4, _QWORD *a5)
{
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  _QWORD *v10;
  __int16 v11;
  unint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_3;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 176) + 248) + 1064) & 0x40) == 0)
    goto LABEL_3;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  v13 = result;
  v10 = a5;
  v11 = a4;
  v9 = a3;
  v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  v8 = v7;
  v5 = a2;
  result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    v14 = 2;
    v15 = a3;
    v16 = a4;
    v17 = *a5;
    return sub_1C6008110(v5, result + 80, &v14);
  }
  return result;
}

unint64_t sub_1C6020A44(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 3540);
  v7 = *(_QWORD *)a3;
  v8 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (!v8 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
    v7 = *(_QWORD *)a3 & 7 | v8;
    *(_QWORD *)a3 = v7;
  }
  if (!v8)
    goto LABEL_8;
  v9 = v6 - 5;
  v10 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
    v7 = *(_QWORD *)a3 & 7 | v10;
    *(_QWORD *)a3 = v7;
  }
  if ((_UNKNOWN *)v10 != llvm::MCSymbol::AbsolutePseudoFragment && v9 >= 0xFFFFFFFE)
  {
    v13 = *(_QWORD *)(a1 + 192);
    v14 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a3 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
      *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v14;
    }
    v12 = sub_1C63C3248(v13, *(_QWORD *)(v14 + 16));
  }
  else
  {
LABEL_8:
    v12 = 0;
  }
  if (v12)
    v15 = v12;
  else
    v15 = a3;
  v16 = sub_1C63BB980(*(_QWORD *)(a1 + 192) + 4512, v15, 0);
  v17 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8) + 1624);
  v18 = a1 + 80;
  v19 = v16;
  if (v17 < 5)
  {
    v23 = 0xB000000000001;
    v24 = 251;
    sub_1C6008110(a2, v18, (int *)&v23);
    v20 = 0x1F01000000000001;
  }
  else
  {
    v23 = 0xB000000000001;
    v24 = 161;
    sub_1C6008110(a2, v18, (int *)&v23);
    v20 = 0x1B000000000001;
  }
  v23 = v20;
  v24 = v19;
  result = sub_1C6008110(a2, v18, (int *)&v23);
  if (v12)
  {
    if (v12 != a3)
    {
      v23 = 0xB000000000001;
      v24 = 12;
      sub_1C6008110(a2, v18, (int *)&v23);
      v22 = (_QWORD *)sub_1C484358C(v18, 16, 3);
      *v22 = a3;
      v22[1] = v12;
      v23 = 0x6000000000006;
      v24 = (uint64_t)v22;
      sub_1C6008110(a2, v18, (int *)&v23);
      v23 = 0xB000000000001;
      v24 = 34;
      return sub_1C6008110(a2, v18, (int *)&v23);
    }
  }
  return result;
}

unint64_t sub_1C6020CC4(unint64_t result, unint64_t *a2, int a3, __int16 a4, _QWORD *a5)
{
  unint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  __int16 v11;
  __int16 v12;
  unint64_t v14;
  int v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_3;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 176) + 248) + 1064) & 0x40) == 0)
    goto LABEL_3;
  v7 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  v14 = result;
  v11 = a4;
  v12 = a3;
  v10 = a5;
  v8 = llvm::dwarf::AttributeVersion(a3);
  a5 = v10;
  a4 = v11;
  LOWORD(a3) = v12;
  v9 = v8;
  v5 = a2;
  result = v14;
  if (v9 <= v7)
  {
LABEL_3:
    v6 = *a5;
    v15 = 6;
    v16 = a3;
    v17 = a4;
    v18 = v6;
    return sub_1C6008110(v5, result + 80, &v15);
  }
  return result;
}

unint64_t sub_1C6020D94(unint64_t a1, unint64_t a2, int a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;

  v29 = a4;
  v4 = a2;
  while (1)
  {
    v5 = *(unsigned __int16 *)(v4 + 28) - 17;
    v6 = v5 > 0x39;
    v7 = (1 << v5) & 0x201000000000001;
    if (!v6 && v7 != 0)
      break;
    v10 = 0;
    v9 = *(_QWORD *)(v4 + 40);
    if ((v9 & 4) == 0)
    {
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if (v4)
        continue;
    }
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(v4 + 40) & ((uint64_t)(*(_QWORD *)(v4 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
LABEL_9:
  if (a4)
  {
    while (1)
    {
      v11 = *(unsigned __int16 *)(a4 + 28) - 17;
      v6 = v11 > 0x39;
      v12 = (1 << v11) & 0x201000000000001;
      if (!v6 && v12 != 0)
        break;
      v15 = 0;
      v14 = *(_QWORD *)(a4 + 40);
      if ((v14 & 4) == 0)
      {
        a4 = v14 & 0xFFFFFFFFFFFFFFF8;
        if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0)
          continue;
      }
      goto LABEL_17;
    }
    v15 = *(_QWORD *)(a4 + 40) & ((uint64_t)(*(_QWORD *)(a4 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v15 = 0;
  }
LABEL_17:
  if (!v10)
  {
    v19 = a1 + 8;
    while (1)
    {
      v20 = *(unsigned __int16 *)(v19 + 28) - 17;
      v6 = v20 > 0x39;
      v21 = (1 << v20) & 0x201000000000001;
      if (!v6 && v21 != 0)
        break;
      v10 = 0;
      v23 = *(_QWORD *)(v19 + 40);
      if ((v23 & 4) == 0)
      {
        v19 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (v19)
          continue;
      }
      goto LABEL_18;
    }
    v10 = *(_QWORD *)(v19 + 40) & ((uint64_t)(*(_QWORD *)(v19 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  }
LABEL_18:
  if (!v15)
  {
    v28 = a1;
    v27 = a3;
    v25 = a2;
    v26 = v10;
    v24 = sub_1C60008CC(a1 + 8);
    a2 = v25;
    v10 = v26;
    a3 = v27;
    v15 = v24;
    a1 = v28;
  }
  v16 = (unint64_t *)(a2 + 8);
  if (v15 == v10)
    v17 = 19;
  else
    v17 = 16;
  return sub_1C6020F08(a1, v16, a3, v17, &v29);
}

unint64_t sub_1C6020F08(unint64_t result, unint64_t *a2, int a3, __int16 a4, _QWORD *a5)
{
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  _QWORD *v10;
  __int16 v11;
  unint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_3;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 176) + 248) + 1064) & 0x40) == 0)
    goto LABEL_3;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  v13 = result;
  v10 = a5;
  v11 = a4;
  v9 = a3;
  v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  v8 = v7;
  v5 = a2;
  result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    v14 = 7;
    v15 = a3;
    v16 = a4;
    v17 = *a5;
    return sub_1C6008110(v5, result + 80, &v14);
  }
  return result;
}

unint64_t sub_1C6020FE0(_QWORD *a1, __int16 a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;

  v8 = sub_1C484358C((uint64_t)(a1 + 10), 48, 3);
  v9 = v8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = v8 | 4;
  *(_DWORD *)(v8 + 24) = -1;
  *(_WORD *)(v8 + 28) = a2;
  *(_BYTE *)(v8 + 30) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = a3;
  v10 = *(unint64_t **)(a3 + 32);
  if (v10)
  {
    *(_QWORD *)v8 = *v10;
    *v10 = v8;
  }
  *(_QWORD *)(a3 + 32) = v8;
  if (a4)
    sub_1C60206C8(a1, a4, v8);
  return v9;
}

unint64_t sub_1C6021080(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  _QWORD *v9;
  __int16 v10;
  unsigned int v12;
  uint64_t v13;

  v4 = a4;
  v13 = a4;
  sub_1C6001F3C(a4);
  v8 = *(uint64_t **)(a1 + 272);
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 280))
  {
    v9 = sub_1C4DFEA3C((void **)(a1 + 264), &v13);
    v4 = v13;
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 272) = v9;
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8) + 1624) <= 3u)
  {
    v12 = *(_DWORD *)(v4 + 8);
    if (v12 >= 0x100)
    {
      if (v12 < 0x10000)
        v10 = 3;
      else
        v10 = 4;
    }
    else
    {
      v10 = 10;
    }
  }
  else
  {
    v10 = 24;
  }
  return sub_1C602118C(a1, (unint64_t *)(a2 + 8), a3, v10, &v13);
}

unint64_t sub_1C602118C(unint64_t result, unint64_t *a2, int a3, __int16 a4, _QWORD *a5)
{
  unint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  __int16 v11;
  __int16 v12;
  unint64_t v14;
  int v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_3;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 176) + 248) + 1064) & 0x40) == 0)
    goto LABEL_3;
  v7 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  v14 = result;
  v11 = a4;
  v12 = a3;
  v10 = a5;
  v8 = llvm::dwarf::AttributeVersion(a3);
  a5 = v10;
  a4 = v11;
  LOWORD(a3) = v12;
  v9 = v8;
  v5 = a2;
  result = v14;
  if (v9 <= v7)
  {
LABEL_3:
    v6 = *a5;
    v15 = 9;
    v16 = a3;
    v17 = a4;
    v18 = v6;
    return sub_1C6008110(v5, result + 80, &v15);
  }
  return result;
}

unint64_t sub_1C602125C(unint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;

  if (a3)
  {
    v6 = result;
    v7 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 64))(result, a4);
    v8 = (unint64_t *)(a2 + 8);
    if (v7 < 0x10000)
      v9 = 5;
    else
      v9 = 6;
    if (v7 >= 0x100)
      v10 = v9;
    else
      v10 = 11;
    v13 = v7;
    sub_1C6002D64(v6, v8, 58, v10, &v13);
    if (a3 < 0x10000)
      v11 = 5;
    else
      v11 = 6;
    if (a3 >= 0x100)
      v12 = v11;
    else
      v12 = 11;
    v13 = a3;
    return sub_1C6002D64(v6, v8, 59, v12, &v13);
  }
  return result;
}

unint64_t sub_1C6021310(unint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  __int16 v7;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a3 + 2);
  if (v4 > 0x40)
  {
    v9 = a1 + 80;
    v10 = a3;
    v11 = sub_1C484358C(a1 + 80, 16, 3);
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    v12 = *((_DWORD *)v10 + 2);
    if (v12 >= 0x41)
      v10 = (uint64_t *)*v10;
    if (v12 < 8)
      goto LABEL_11;
    v14 = 0;
    v15 = v12 >> 3;
    v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 288) + 2064) + 272);
    v17 = (v12 >> 3) - 1;
    v18 = v12 >> 3 <= 1 ? 1 : v12 >> 3;
    do
    {
      if (v16)
      {
        v19 = v15 + ~(_BYTE)v14;
        v20 = v17 + 7;
        if (v17 >= 0)
          v20 = v17;
        v21 = (uint64_t)v20 >> 3;
      }
      else
      {
        v21 = v14 >> 3;
        v19 = v14;
      }
      v22 = ((unint64_t)v10[v21] >> (8 * (v19 & 7u)));
      v26[0] = 0xB000000000001;
      v26[1] = v22;
      sub_1C6008110((unint64_t *)v11, v9, (int *)v26);
      ++v14;
      --v17;
    }
    while (v18 != v14);
    v23 = *(_DWORD *)(v11 + 8);
    v13 = v23 < 0x10000 ? 3 : 4;
    if (v23 <= 0xFF)
LABEL_11:
      v13 = 10;
    return sub_1C63C7214(a1, a2, 28, v13, v11);
  }
  else
  {
    v5 = *a3 << -(char)v4 >> -(char)v4;
    if (a4)
      v5 = *a3;
    v6 = (unint64_t *)(a2 + 8);
    v26[0] = v5;
    if (a4)
      v7 = 15;
    else
      v7 = 13;
    return sub_1C6002D64(a1, v6, 28, v7, v26);
  }
}

_QWORD *sub_1C60214C4(_QWORD *result, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  void *v4;
  _BOOL8 v5;
  int v6;

  if (a4)
  {
    v4 = a3 + 1;
    v5 = *a3 == 1;
    if (*a3 != 1)
      v4 = a3;
    if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result[24] + 8) + 272) + 8) + 1624) <= 3u)
      v6 = 8199;
    else
      v6 = 110;
    return sub_1C60207E4(result, a2, v6, v4, a4 - v5);
  }
  return result;
}

uint64_t sub_1C6021510(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t *v15;
  void *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unint64_t Symbol;
  int v30;
  _QWORD v31[3];

  v5 = (_QWORD *)result;
  v31[2] = *MEMORY[0x1E0C80C00];
  if (a3)
    v6 = (unsigned __int8 **)(a3 - 8 * *(unsigned int *)(a3 + 8));
  else
    v6 = 0;
  for (; v6 != (unsigned __int8 **)a3; ++v6)
  {
    v7 = *v6;
    v8 = **v6;
    if (v8 == 23)
    {
      result = sub_1C6020FE0(v5, *((_WORD *)v7 + 1), a2, 0);
      v19 = result;
      if (*((_WORD *)v7 + 1) == 48)
      {
        v20 = sub_1C6021928(v5, *(_QWORD *)&v7[-8 * *((unsigned int *)v7 + 2) + 8]);
        result = sub_1C6020D94((unint64_t)v5, v19, 73, v20);
      }
      v21 = *(_QWORD *)&v7[-8 * *((unsigned int *)v7 + 2)];
      if (v21)
      {
        v22 = *(size_t **)(v21 + 8);
        if (*v22)
          result = (uint64_t)sub_1C60207E4(v5, v19, 3, v22 + 3, *v22);
      }
      if (v7[24]
        && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[24] + 8) + 272) + 8) + 1624) >= 5u)
      {
        result = sub_1C602072C((unint64_t)v5, v19, 30);
      }
      v23 = &v7[-8 * *((unsigned int *)v7 + 2)];
      v24 = *((_QWORD *)v23 + 2);
      if (!v24)
        continue;
      if (*(_BYTE *)v24 != 1)
      {
LABEL_28:
        v30 = *((unsigned __int16 *)v7 + 1);
        if (v30 == 16647)
        {
          result = sub_1C6021510(v5, v19);
        }
        else if (v30 == 16646)
        {
          result = (uint64_t)sub_1C60207E4(v5, v19, 8464, (void *)(*(_QWORD *)(v24 + 8) + 24), **(_QWORD **)(v24 + 8));
        }
        continue;
      }
      v25 = *(_QWORD *)(v24 + 128);
      v26 = *(unsigned __int8 *)(v25 + 16);
      if (v26 == 16)
      {
        v27 = sub_1C5FFEFD4(*((_QWORD *)v23 + 1));
        result = sub_1C6021310((unint64_t)v5, v19, (uint64_t *)(v25 + 24), v27);
      }
      else
      {
        if (v26 > 3)
          goto LABEL_28;
        if ((*(_DWORD *)(v25 + 32) & 0x300) != 0x100)
        {
          v28 = sub_1C484358C((uint64_t)(v5 + 10), 16, 3);
          *(_QWORD *)v28 = 0;
          *(_DWORD *)(v28 + 8) = 0;
          Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v5[22] + 248), (const llvm::GlobalValue *)v25);
          sub_1C63C70C8((uint64_t)v5, (unint64_t *)v28, Symbol);
          v31[0] = 0xB000000000001;
          v31[1] = 159;
          sub_1C6008110((unint64_t *)v28, (uint64_t)(v5 + 10), (int *)v31);
          result = sub_1C6021080((unint64_t)v5, v19, 2, v28);
        }
      }
    }
    else if (v8 == 22)
    {
      result = sub_1C6020FE0(v5, 47, a2, 0);
      v9 = result;
      v10 = *((unsigned int *)v7 + 2);
      v11 = *(_QWORD *)&v7[-8 * v10 + 8];
      if (v11)
      {
        v12 = sub_1C6021928(v5, v11);
        result = sub_1C6020D94((unint64_t)v5, v9, 73, v12);
        v10 = *((unsigned int *)v7 + 2);
      }
      v13 = *(_QWORD *)&v7[-8 * v10];
      if (v13 && **(_QWORD **)(v13 + 8))
      {
        v14 = *(_QWORD *)&v7[-8 * v10];
        if (v14)
        {
          v15 = *(size_t **)(v14 + 8);
          v18 = *v15;
          v16 = v15 + 3;
          v17 = v18;
        }
        else
        {
          v17 = 0;
          v16 = 0;
        }
        result = (uint64_t)sub_1C60207E4(v5, v9, 3, v16, v17);
      }
      if (v7[24])
      {
        if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[24] + 8) + 272) + 8) + 1624) >= 5u)
          result = sub_1C602072C((unint64_t)v5, v9, 30);
      }
    }
  }
  return result;
}

unint64_t sub_1C6021868(unint64_t result, uint64_t a2, char a3)
{
  int v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3 & 3;
  switch(v3)
  {
    case 1:
      v4 = (unint64_t *)(a2 + 8);
      v5 = 3;
LABEL_6:
      v6 = v5;
      return sub_1C6002D64(result, v4, 50, 11, &v6);
    case 3:
      v4 = (unint64_t *)(a2 + 8);
      v5 = 1;
      goto LABEL_6;
    case 2:
      v4 = (unint64_t *)(a2 + 8);
      v5 = 2;
      goto LABEL_6;
  }
  return result;
}

uint64_t sub_1C60218D4(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t result;

  if (!a2)
    return (uint64_t)(a1 + 1);
  switch(*a2)
  {
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
      goto LABEL_3;
    case 0xFu:
      return (uint64_t)(a1 + 1);
    case 0x10u:
    case 0x12u:
    case 0x13u:
      goto LABEL_6;
    case 0x11u:
      return sub_1C6021B28(a1, (uint64_t)a2, 0);
    case 0x14u:
      return sub_1C6021A0C(a1, (uint64_t)a2);
    case 0x15u:
      return sub_1C6021C40(a1, (uint64_t)a2);
    default:
      if (*a2 == 33)
LABEL_3:
        result = sub_1C6021928(a1, a2);
      else
LABEL_6:
        result = sub_1C6020664(a1, a2);
      break;
  }
  return result;
}

unint64_t sub_1C6021928(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t result;
  uint64_t *v8;

  if (!a2)
    return 0;
  v2 = a2;
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 2);
    if (v4 != 71)
      break;
    if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624) >= 5u)
      goto LABEL_5;
LABEL_10:
    v2 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 24);
    if (!v2)
      return 0;
  }
  if (v4 == 55
    && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624) <= 2u)
  {
    goto LABEL_10;
  }
LABEL_5:
  v5 = *(unsigned __int8 **)(v2 - 8 * *(unsigned int *)(v2 + 8) + 8);
  v6 = sub_1C60218D4(a1, v5);
  result = sub_1C6020664(a1, (unsigned __int8 *)v2);
  if (!result)
  {
    v8 = (uint64_t *)sub_1C60008CC(v6);
    return sub_1C6022708(v8, v5, v6, (unsigned __int8 *)v2);
  }
  return result;
}

uint64_t sub_1C6021A0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t *v7;
  size_t v8;
  unsigned __int8 *v9;

  v4 = sub_1C60218D4(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  v5 = sub_1C6020664(a1, (unsigned __int8 *)a2);
  if (!v5)
  {
    v5 = sub_1C6020FE0(a1, 57, v4, (unsigned __int8 *)a2);
    v6 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v6 && (v7 = *(size_t **)(v6 + 8), (v8 = *v7) != 0))
    {
      v9 = (unsigned __int8 *)(v7 + 3);
      sub_1C60207E4(a1, v5, 3, v7 + 3, *v7);
    }
    else
    {
      v9 = "(anonymous namespace)";
      v8 = 21;
    }
    sub_1C60131A4(a1[24], a1[9], a1[24] + 5128, v9, v8, v5);
    (*(void (**)(_QWORD *, unsigned __int8 *, size_t, uint64_t, _QWORD))(*a1 + 24))(a1, v9, v8, v5, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      sub_1C602072C((unint64_t)a1, v5, 137);
  }
  return v5;
}

uint64_t sub_1C6021B28(_QWORD *a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v3 = a3;
  if (a3)
    v6 = (uint64_t)(a1 + 1);
  else
    v6 = sub_1C60218D4(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  v7 = sub_1C6020664(a1, (unsigned __int8 *)a2);
  if (!v7)
  {
    if (*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48) && (v3 & 1) == 0)
    {
      v6 = (uint64_t)(a1 + 1);
      sub_1C6021B28(a1);
    }
    v8 = sub_1C6020FE0(a1, 46, v6, (unsigned __int8 *)a2);
    v7 = v8;
    if ((*(_BYTE *)(a2 + 44) & 8) == 0)
    {
      v9 = v8;
      while (1)
      {
        v10 = *(unsigned __int16 *)(v9 + 28) - 17;
        v11 = v10 > 0x39;
        v12 = (1 << v10) & 0x201000000000001;
        if (!v11 && v12 != 0)
          break;
        v15 = 0;
        v14 = *(_QWORD *)(v9 + 40);
        if ((v14 & 4) == 0)
        {
          v9 = v14 & 0xFFFFFFFFFFFFFFF8;
          if (v9)
            continue;
        }
        goto LABEL_17;
      }
      v15 = *(_QWORD *)(v9 + 40) & ((uint64_t)(*(_QWORD *)(v9 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
LABEL_17:
      sub_1C6023958(v15, a2, v7, 0);
    }
  }
  return v7;
}

uint64_t sub_1C6021C40(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t *v17;
  uint64_t v18;
  size_t *v19;
  uint64_t v20;
  size_t *v21;
  uint64_t v22;
  unsigned int v23;
  __int16 v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  __int16 v28;
  uint64_t v30;

  v4 = sub_1C60218D4(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  v5 = sub_1C6020664(a1, (unsigned __int8 *)a2);
  if (!v5)
  {
    v5 = sub_1C6020FE0(a1, 30, v4, (unsigned __int8 *)a2);
    v6 = *(unsigned int *)(a2 + 8);
    v7 = -v6;
    v8 = *(_QWORD *)(a2 - 8 * v6 + 16);
    if (v8)
    {
      v9 = *(size_t **)(v8 + 8);
      if (*v9)
      {
        sub_1C60207E4(a1, v5, 3, v9 + 3, *v9);
        v10 = a2 - 8 * *(unsigned int *)(a2 + 8);
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v12 = *(uint64_t **)(v11 + 8);
          v15 = *v12;
          v13 = v12 + 3;
          v14 = v15;
        }
        else
        {
          v14 = 0;
          v13 = 0;
        }
        (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, _QWORD))(*a1 + 24))(a1, v13, v14, v5, *(_QWORD *)(v10 + 8));
        v7 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
    }
    v16 = *(_QWORD *)(a2 + 8 * v7 + 24);
    if (v16)
    {
      v17 = *(size_t **)(v16 + 8);
      if (*v17)
      {
        sub_1C60207E4(a1, v5, 15873, v17 + 3, *v17);
        v7 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
    }
    v18 = *(_QWORD *)(a2 + 8 * v7 + 32);
    if (v18)
    {
      v19 = *(size_t **)(v18 + 8);
      if (*v19)
      {
        sub_1C60207E4(a1, v5, 15872, v19 + 3, *v19);
        v7 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
    }
    v20 = *(_QWORD *)(a2 + 8 * v7 + 40);
    if (v20)
    {
      v21 = *(size_t **)(v20 + 8);
      if (*v21)
        sub_1C60207E4(a1, v5, 15879, v21 + 3, *v21);
    }
    v22 = a2;
    if (*(_BYTE *)a2 == 15 || (v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
    {
      v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 64))(a1, v22);
      if (v23 < 0x10000)
        v24 = 5;
      else
        v24 = 6;
      if (v23 >= 0x100)
        v25 = v24;
      else
        v25 = 11;
      v30 = v23;
      sub_1C6002D64((unint64_t)a1, (unint64_t *)(v5 + 8), 58, v25, &v30);
    }
    v26 = *(_DWORD *)(a2 + 24);
    if (v26)
    {
      if (v26 < 0x10000)
        v27 = 5;
      else
        v27 = 6;
      if (v26 >= 0x100)
        v28 = v27;
      else
        v28 = 11;
      v30 = *(unsigned int *)(a2 + 24);
      sub_1C6002D64((unint64_t)a1, (unint64_t *)(v5 + 8), 59, v28, &v30);
    }
    if (*(_BYTE *)(a2 + 28))
      sub_1C602072C((unint64_t)a1, v5, 60);
  }
  return v5;
}

unint64_t sub_1C6021E78(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  size_t *v8;
  void *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  size_t *v28;
  void *v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t *v39;
  unsigned int v40;
  unint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t *v49;
  uint64_t v50;
  size_t *v51;
  unsigned int v52;
  __int16 v53;
  __int16 v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t result;
  int v63;
  unint64_t *v64;
  unint64_t v65;
  __int16 v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  __int16 v71;
  __int16 v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  unint64_t v76;
  unint64_t v77;

  v6 = (_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8));
  v7 = v6[2];
  if (v7)
  {
    v8 = *(size_t **)(v7 + 8);
    v11 = *v8;
    v9 = v8 + 3;
    v10 = v11;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v12 = *(_QWORD *)(a3 + 32);
  v13 = *(unsigned __int16 *)(a2 + 28);
  if (v13 > 0x33)
    goto LABEL_96;
  if (((1 << v13) & 0x8080000880004) == 0)
  {
    if (v13 == 4)
    {
      sub_1C602301C((uint64_t)a1, a2, a3);
      if (!v10)
        goto LABEL_98;
      goto LABEL_97;
    }
    if (v13 == 1)
    {
      sub_1C63C797C(a1, a2, a3);
      if (!v10)
        goto LABEL_98;
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  v75 = v10;
  v76 = *(_QWORD *)(a3 + 32);
  if ((_DWORD)v13 == 51)
  {
    v14 = v6[8];
    if (v14)
    {
      v15 = sub_1C60231FC(a1, a2, v6[8]);
      sub_1C6020D94((unint64_t)a1, a2, 21, v15);
    }
  }
  else
  {
    v14 = 0;
    if (v13 <= 0x17 && ((1 << v13) & 0x880004) != 0)
    {
      sub_1C6021510((uint64_t)a1, a2, v6[6]);
      v14 = 0;
    }
  }
  v16 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 32);
  if (v16)
    v17 = (uint64_t *)(v16 - 8 * *(unsigned int *)(v16 + 8));
  else
    v17 = 0;
  while (v17 != (uint64_t *)v16)
  {
    v18 = (unsigned __int8 *)*v17;
    if (*v17)
    {
      v19 = *v18;
      if (v19 > 0x10)
      {
        if (v19 == 27)
        {
          v26 = sub_1C6020FE0(a1, *((_WORD *)v18 + 1), a2, 0);
          v27 = *(_QWORD *)&v18[-8 * *((unsigned int *)v18 + 2)];
          if (v27)
          {
            v28 = *(size_t **)(v27 + 8);
            v31 = *v28;
            v29 = v28 + 3;
            v30 = v31;
          }
          else
          {
            v30 = 0;
            v29 = 0;
          }
          sub_1C60207E4(a1, v26, 16360, v29, v30);
          v43 = *((unsigned int *)v18 + 2);
          v44 = *(_QWORD *)&v18[-8 * v43 + 32];
          if (v44)
          {
            v45 = sub_1C6021928(a1, v44);
            sub_1C6020D94((unint64_t)a1, v26, 73, v45);
            v43 = *((unsigned int *)v18 + 2);
          }
          sub_1C602125C((unint64_t)a1, v26, *((_DWORD *)v18 + 6), *(_QWORD *)&v18[-8 * v43 + 8]);
          v46 = *((unsigned int *)v18 + 2);
          v47 = -v46;
          v48 = *(_QWORD *)&v18[-8 * v46 + 16];
          if (v48)
          {
            v49 = *(size_t **)(v48 + 8);
            if (*v49)
            {
              sub_1C60207E4(a1, v26, 16361, v49 + 3, *v49);
              v47 = -(uint64_t)*((unsigned int *)v18 + 2);
            }
          }
          v50 = *(_QWORD *)&v18[8 * v47 + 24];
          if (v50)
          {
            v51 = *(size_t **)(v50 + 8);
            if (*v51)
              sub_1C60207E4(a1, v26, 16362, v51 + 3, *v51);
          }
          v52 = *((_DWORD *)v18 + 7);
          if (v52)
          {
            if (v52 < 0x10000)
              v53 = 5;
            else
              v53 = 6;
            if (v52 >= 0x100)
              v54 = v53;
            else
              v54 = 11;
            v77 = *((unsigned int *)v18 + 7);
            sub_1C6002D64((unint64_t)a1, (unint64_t *)(v26 + 8), 16363, v54, &v77);
          }
          goto LABEL_75;
        }
        if (v19 != 17)
          goto LABEL_29;
        sub_1C6021B28(a1, *v17, 0);
      }
      else
      {
        if (v19 != 12)
        {
          if (v19 == 13)
          {
            if (*((_WORD *)v18 + 1) == 51)
            {
              v20 = sub_1C6020FE0(a1, 51, a2, 0);
              sub_1C6021E78(a1, v20, v18);
            }
            goto LABEL_75;
          }
LABEL_29:
          if ((_DWORD)v13 != 43)
            goto LABEL_75;
          v32 = sub_1C6020664(a1, (unsigned __int8 *)*v17);
          if (!v32)
            goto LABEL_75;
          v33 = v32;
          v24 = sub_1C6020FE0(a1, 44, a2, 0);
          v23 = (unint64_t)a1;
          v25 = 68;
          v22 = v33;
LABEL_32:
          sub_1C6020D94(v23, v24, v25, v22);
          goto LABEL_75;
        }
        if (*((_WORD *)v18 + 1) == 42)
        {
          v21 = sub_1C6020FE0(a1, 42, a2, 0);
          v22 = sub_1C6021928(a1, *(_QWORD *)&v18[-8 * *((unsigned int *)v18 + 2) + 24]);
          v23 = (unint64_t)a1;
          v24 = v21;
          v25 = 65;
          goto LABEL_32;
        }
        if ((v18[29] & 0x10) == 0)
        {
          v34 = a1;
          if ((_DWORD)v13 == 51)
          {
            v35 = sub_1C6020FE0(a1, 25, a2, 0);
            v36 = *(_QWORD *)&v18[-8 * *((unsigned int *)v18 + 2) + 32];
            if (!v36)
              goto LABEL_73;
            v37 = *(_QWORD *)(v36 + 128);
            if (!v37 || *(_BYTE *)(v37 + 16) != 16)
              goto LABEL_73;
            v74 = v35;
            v38 = sub_1C5FFEFD4(*(_QWORD *)(v14 + 24 - 8 * *(unsigned int *)(v14 + 8)));
            v39 = (unint64_t *)(v37 + 24);
            v40 = *(_DWORD *)(v37 + 32);
            if (v38)
            {
              if (v40 >= 0x41)
                v39 = (unint64_t *)*v39;
              v41 = *v39;
              if (v41 >= 0x100)
              {
                if (v41 >= 0x10000)
                {
                  if (HIDWORD(v41))
                    v42 = 7;
                  else
                    v42 = 6;
                }
                else
                {
                  v42 = 5;
                }
LABEL_72:
                v77 = v41;
                sub_1C6002D64((unint64_t)a1, (unint64_t *)(v74 + 8), 22, v42, &v77);
                v35 = v74;
LABEL_73:
                v34 = a1;
LABEL_74:
                sub_1C60231FC(v34, v35, (uint64_t)v18);
                goto LABEL_75;
              }
            }
            else
            {
              if (v40 > 0x40)
                v41 = *(_QWORD *)*v39;
              else
                v41 = (uint64_t)(*v39 << -(char)v40) >> -(char)v40;
              if (v41 != (char)v41)
              {
                v42 = 7;
                goto LABEL_72;
              }
            }
            v42 = 11;
            goto LABEL_72;
          }
          v35 = a2;
          goto LABEL_74;
        }
        sub_1C6023774(a1, *v17);
      }
    }
LABEL_75:
    ++v17;
  }
  v55 = *(_DWORD *)(a3 + 28);
  if ((v55 & 8) != 0)
  {
    sub_1C602072C((unint64_t)a1, a2, 16356);
    v55 = *(_DWORD *)(a3 + 28);
  }
  v10 = v75;
  v12 = v76;
  if ((v55 & 0x8000) != 0)
    sub_1C602072C((unint64_t)a1, a2, 137);
  v56 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 40);
  if (v56)
  {
    v57 = sub_1C6021928(a1, v56);
    sub_1C6020D94((unint64_t)a1, a2, 29, v57);
  }
  if ((*(_BYTE *)(a3 + 29) & 2) != 0)
    sub_1C602072C((unint64_t)a1, a2, 16364);
  if ((*(_WORD *)(*(_QWORD *)(a1[22] + 248) + 1064) & 0x40) != 0
    && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624) < 5u
    || (v58 = *(_DWORD *)(a3 + 28), (v58 & 0xC00000) == 0))
  {
LABEL_96:
    if (!v10)
      goto LABEL_98;
LABEL_97:
    sub_1C60207E4(a1, a2, 3, v9, v10);
    goto LABEL_98;
  }
  if ((v58 & 0x400000) != 0)
    v59 = 5;
  else
    v59 = (v58 >> 21) & 4;
  v77 = v59;
  sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 54, 11, &v77);
  if (v75)
    goto LABEL_97;
LABEL_98:
  v60 = *(unsigned int *)(a3 + 8);
  if (*(_DWORD *)(a3 + 52) == 30)
  {
    v61 = *(_QWORD *)(a3 - 8 * v60 + 56);
    if (v61)
    {
      sub_1C60207E4(a1, a2, 110, (void *)(*(_QWORD *)(v61 + 8) + 24), **(_QWORD **)(v61 + 8));
      LODWORD(v60) = *(_DWORD *)(a3 + 8);
    }
  }
  result = sub_1C6022E40((unint64_t)a1, a2, *(_QWORD *)(a3 - 8 * v60 + 104));
  if (v13 <= 0x17 && ((1 << v13) & 0x880014) != 0)
  {
    v63 = *(_DWORD *)(a3 + 28);
    if (v12 >= 8)
    {
      if ((_DWORD)v13 != 4 && (v63 & 4) != 0)
        goto LABEL_117;
      v64 = (unint64_t *)(a2 + 8);
      if (v12 >= 0x800)
      {
        if (v12 >= 0x80000)
        {
          if (v12 >> 35)
            v67 = 7;
          else
            v67 = 6;
        }
        else
        {
          v67 = 5;
        }
      }
      else
      {
        v67 = 11;
      }
      v77 = v12 >> 3;
      v66 = v67;
      v65 = (unint64_t)a1;
    }
    else
    {
      if ((v63 & 4) != 0)
      {
LABEL_117:
        v68 = *(_DWORD *)(a3 + 28);
        if ((v68 & 4) != 0)
        {
          sub_1C602072C((unint64_t)a1, a2, 60);
          v68 = *(_DWORD *)(a3 + 28);
        }
        result = sub_1C6021868((unint64_t)a1, a2, v68);
        if ((*(_BYTE *)(a3 + 28) & 4) == 0)
        {
          v69 = a3;
          if (*(_BYTE *)a3 != 15)
            v69 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8));
          result = sub_1C602125C((unint64_t)a1, a2, *(_DWORD *)(a3 + 24), v69);
        }
        v70 = *(_DWORD *)(a3 + 52);
        if (v70)
        {
          if (v70 < 0x10000)
            v71 = 5;
          else
            v71 = 6;
          if (v70 >= 0x100)
            v72 = v71;
          else
            v72 = 11;
          v77 = *(unsigned int *)(a3 + 52);
          result = sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 16358, v72, &v77);
        }
        v73 = *(unsigned int *)(a3 + 48);
        if (v73 >= 8)
        {
          v77 = v73 >> 3;
          return sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 136, 15, &v77);
        }
        return result;
      }
      v64 = (unint64_t *)(a2 + 8);
      v77 = 0;
      v65 = (unint64_t)a1;
      v66 = 11;
    }
    sub_1C6002D64(v65, v64, 11, v66, &v77);
    goto LABEL_117;
  }
  return result;
}

void sub_1C602264C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  unsigned __int8 *v7;
  size_t v8;
  size_t v9;
  unsigned int v13;

  v4 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  if (v4)
  {
    v6 = *(_QWORD **)(v4 + 8);
    v9 = *v6;
    v7 = (unsigned __int8 *)(v6 + 3);
    v8 = v9;
    if (v9)
    {
      if ((*(_BYTE *)(a3 + 28) & 4) == 0)
      {
        sub_1C601335C(a1[24], a1[9], a1[24] + 5320, v7, v8, a4);
        if (!a2 || (v13 = *a2, v13 <= 0x1F) && ((1 << v13) & 0x80118000) != 0)
          (*(void (**)(uint64_t *, uint64_t, uint64_t, unsigned __int8 *))(*a1 + 32))(a1, a3, a4, a2);
      }
    }
  }
}

unint64_t sub_1C6022708(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;

  v7 = sub_1C6020FE0(a1, *((_WORD *)a4 + 1), a3, a4);
  sub_1C602264C(a1, a2, (uint64_t)a4, v7);
  v8 = *a4;
  if (v8 > 0xD)
  {
    if (v8 == 14)
    {
      sub_1C6022864((unint64_t)a1, v7, (uint64_t)a4);
      return v7;
    }
    if (v8 == 33)
    {
      sub_1C63C7634(a1, v7, (uint64_t)a4);
      return v7;
    }
LABEL_13:
    sub_1C60229A8(a1, v7, (uint64_t)a4);
    return v7;
  }
  if (v8 != 13)
  {
    if (v8 == 11)
    {
      sub_1C63C7514(a1, v7, (uint64_t)a4);
      return v7;
    }
    goto LABEL_13;
  }
  v9 = a1[24];
  if (!*(_BYTE *)(v9 + 3535) || (a4[28] & 4) != 0)
    goto LABEL_16;
  v10 = &a4[-8 * *((unsigned int *)a4 + 2)];
  v11 = *((_QWORD *)v10 + 7);
  if (!*((_QWORD *)v10 + 2))
  {
    if (v11)
      goto LABEL_15;
LABEL_16:
    sub_1C6021E78(a1, v7, (uint64_t)a4);
    return v7;
  }
  if (v11)
  {
LABEL_15:
    v12 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    sub_1C63C2E18((_QWORD *)v9, v12, *(_QWORD *)(v11 + 8) + 24, **(_QWORD **)(v11 + 8), v7, (uint64_t *)a4);
    return v7;
  }
  (*(void (**)(uint64_t *, unint64_t, unsigned __int8 *))(*a1 + 72))(a1, v7, a4);
  return v7;
}

unint64_t sub_1C6022864(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t result;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 24);
  if (!v6)
    goto LABEL_8;
  v7 = *(unsigned int *)(v6 + 8);
  if (!(_DWORD)v7)
    goto LABEL_8;
  v8 = *(_QWORD *)(v6 - 8 * v7);
  if (v8)
  {
    v9 = sub_1C6021928(a1, v8);
    sub_1C6020D94(a1, a2, 73, v9);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  if ((_DWORD)v7 == 2)
  {
    v10 = *(_QWORD *)(v6 - 8);
    result = sub_1C6022F3C(a1, a2, v6);
    if (!v10)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    result = sub_1C6022F3C(a1, a2, v6);
  }
  v12 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 24);
  v13 = v12 > 0x10;
  v14 = (1 << v12) & 0x11002;
  if (!v13 && v14 != 0)
    result = sub_1C602072C(a1, a2, 39);
LABEL_14:
  if (*(unsigned __int8 *)(a3 + 52) >= 2uLL)
  {
    v17 = *(unsigned __int8 *)(a3 + 52);
    result = sub_1C6002D64(a1, (unint64_t *)(a2 + 8), 54, 11, &v17);
  }
  v16 = *(_DWORD *)(a3 + 28);
  if ((v16 & 0x2000) != 0)
  {
    result = sub_1C602072C(a1, a2, 119);
    v16 = *(_DWORD *)(a3 + 28);
  }
  if ((v16 & 0x4000) != 0)
    return sub_1C602072C(a1, a2, 120);
  return result;
}

unint64_t sub_1C60229A8(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t *v8;
  size_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t result;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = a3 - 8 * *(unsigned int *)(a3 + 8);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = *(size_t **)(v7 + 8);
    v11 = *v8;
    v10 = v8 + 3;
    v9 = v11;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v12 = *(_QWORD *)(a3 + 32);
  v13 = *(unsigned __int16 *)(a2 + 28);
  v14 = *(_QWORD *)(v6 + 24);
  if (v14)
  {
    v15 = sub_1C6021928(a1, v14);
    sub_1C6020D94((unint64_t)a1, a2, 73, v15);
  }
  if (v9)
    sub_1C60207E4(a1, a2, 3, v10, v9);
  result = sub_1C6022E40((unint64_t)a1, a2, *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 40));
  if (v13 == 22
    && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624) >= 5u)
  {
    v17 = *(unsigned int *)(a3 + 48);
    if (v17 >= 8)
    {
      v21 = v17 >> 3;
      result = sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 136, 15, &v21);
    }
  }
  if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v13), (int16x4_t)0x420010001F000FLL)) & 1) == 0 && v12 >= 8)
  {
    if (v12 >= 0x800)
    {
      if (v12 >= 0x80000)
      {
        if (v12 >> 35)
          v18 = 7;
        else
          v18 = 6;
      }
      else
      {
        v18 = 5;
      }
    }
    else
    {
      v18 = 11;
    }
    v21 = v12 >> 3;
    result = sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 11, v18, &v21);
  }
  if (v13 == 31)
  {
    v19 = sub_1C6021928(a1, *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 32));
    result = sub_1C6020D94((unint64_t)a1, a2, 29, v19);
  }
  if ((*(_BYTE *)(a3 + 28) & 4) == 0)
  {
    v20 = a3;
    if (*(_BYTE *)a3 != 15)
      v20 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8));
    result = sub_1C602125C((unint64_t)a1, a2, *(_DWORD *)(a3 + 24), v20);
  }
  if ((*(_QWORD *)(a3 + 52) & 0xFF00000000) != 0)
  {
    v21 = *(_QWORD *)(a3 + 52);
    result = sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 51, 6, &v21);
  }
  if (*(_WORD *)(a3 + 2) == 17152)
  {
    v21 = *(_DWORD *)(a3 + 4) & 0xF;
    result = sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 15876, 11, &v21);
    if (*(_WORD *)(a3 + 2) == 17152)
    {
      result = sub_1C602072C((unint64_t)a1, a2, 15877);
      if (*(_WORD *)(a3 + 2) == 17152)
      {
        v21 = (unsigned __int16)((unint64_t)*(unsigned int *)(a3 + 4) >> 5);
        result = sub_1C6002D64((unint64_t)a1, (unint64_t *)(a2 + 8), 15878, 5, &v21);
        if (*(_WORD *)(a3 + 2) == 17152)
        {
          if ((*(_BYTE *)(a3 + 6) & 0x20) == 0
            || (result = sub_1C602072C((unint64_t)a1, a2, 15880), *(_WORD *)(a3 + 2) == 17152))
          {
            if ((*(_BYTE *)(a3 + 6) & 0x40) != 0)
              return sub_1C602072C((unint64_t)a1, a2, 15881);
          }
        }
      }
    }
  }
  return result;
}

void sub_1C6022C94(llvm::DIScope *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  llvm::DIScope *Scope;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  llvm::DIScope *v13;
  const std::string::value_type *Name;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if (!this
    || ((v4 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 24), v5 = v4 > 0x21, v6 = (1 << v4) & 0x206000010, !v5)
      ? (v7 = v6 == 0)
      : (v7 = 1),
        v7))
  {
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    Scope = this;
    v9 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v18 = v20;
    v19 = 0x100000000;
    do
    {
      if (*(_BYTE *)Scope == 16)
        break;
      if (v9 >= HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v9 + 1, 8);
        v9 = v19;
      }
      *((_QWORD *)v18 + v9) = Scope;
      v9 = v19 + 1;
      LODWORD(v19) = v19 + 1;
      Scope = (llvm::DIScope *)llvm::DIScope::getScope(Scope);
    }
    while (Scope);
    v10 = v18;
    if (v9)
    {
      v11 = 8 * v9;
      v12 = (char *)v18 - 8;
      while (1)
      {
        v13 = *(llvm::DIScope **)&v12[v11];
        Name = (const std::string::value_type *)llvm::DIScope::getName(v13);
        if (v15)
          break;
        if (*(_BYTE *)v13 == 20)
        {
          v17 = 21;
          v16 = "(anonymous namespace)";
          goto LABEL_17;
        }
LABEL_18:
        v11 -= 8;
        if (!v11)
        {
          v10 = v18;
          goto LABEL_20;
        }
      }
      v16 = Name;
      v17 = v15;
LABEL_17:
      std::string::append((std::string *)a3, v16, v17);
      std::string::append((std::string *)a3, "::");
      goto LABEL_18;
    }
LABEL_20:
    if (v10 != v20)
      free(v10);
  }
}

unint64_t sub_1C6022E40(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  llvm::UndefValue *AggregateElement;
  BOOL v13;

  if (a3)
  {
    v4 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v4)
    {
      v6 = (_QWORD *)result;
      v7 = -8 * v4;
      do
      {
        v8 = (uint64_t *)(*(_QWORD *)(a3 + v7) - 8 * *(unsigned int *)(*(_QWORD *)(a3 + v7) + 8));
        v9 = *v8;
        v10 = sub_1C6020FE0(v6, 24576, a2, 0);
        result = (unint64_t)sub_1C60207E4(v6, v10, 3, (void *)(*(_QWORD *)(v9 + 8) + 24), **(_QWORD **)(v9 + 8));
        v11 = v8[1];
        if (*(_BYTE *)v11 == 1)
        {
          AggregateElement = *(llvm::UndefValue **)(v11 + 128);
          if (AggregateElement)
            v13 = *((_BYTE *)AggregateElement + 16) == 16;
          else
            v13 = 0;
          if (!v13)
            AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
          result = sub_1C6021310((unint64_t)v6, v10, (uint64_t *)AggregateElement + 3, 1);
        }
        else if (!*(_BYTE *)v11)
        {
          result = (unint64_t)sub_1C60207E4(v6, v10, 28, (void *)(*(_QWORD *)(v11 + 8) + 24), **(_QWORD **)(v11 + 8));
        }
        v7 += 8;
      }
      while (v7);
    }
  }
  return result;
}

unint64_t sub_1C6022F3C(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (a3)
  {
    v4 = (unsigned int *)(a3 + 8);
    v3 = *(unsigned int *)(a3 + 8);
    if (v3 >= 2)
    {
      v6 = (_QWORD *)result;
      v7 = v3 - 1;
      v8 = a3 + 8;
      do
      {
        v9 = *(_QWORD *)(v8 - 8 * *v4);
        if (v9)
        {
          v10 = sub_1C6020FE0(v6, 5, a2, 0);
          v11 = sub_1C6021928(v6, v9);
          result = sub_1C6020D94((unint64_t)v6, v10, 73, v11);
          if ((*(_BYTE *)(v9 + 28) & 0x40) != 0)
            result = sub_1C602072C((unint64_t)v6, v10, 52);
        }
        else
        {
          result = sub_1C6020FE0(v6, 24, a2, 0);
        }
        v8 += 8;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1C602301C(uint64_t result, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t *v20;
  size_t v21;
  void *v22;
  size_t v23;
  int v24;

  v5 = (_QWORD *)result;
  v6 = a3 - 8 * *(unsigned int *)(a3 + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    result = sub_1C5FFEFD4(*(_QWORD *)(v6 + 24));
    v24 = result;
    if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[24] + 8) + 272) + 8) + 1624) >= 3u)
    {
      v8 = sub_1C6021928(v5, v7);
      result = sub_1C6020D94((unint64_t)v5, a2, 73, v8);
      if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[24] + 8) + 272) + 8) + 1624) >= 4u
        && (*(_BYTE *)(a3 + 31) & 1) != 0)
      {
        result = sub_1C602072C((unint64_t)v5, a2, 109);
      }
    }
  }
  else
  {
    v24 = 0;
  }
  v9 = a3 - 8 * *(unsigned int *)(a3 + 8);
  v10 = *(unsigned __int8 **)(v9 + 8);
  if (v10)
  {
    v11 = *v10;
    v12 = v11 > 0x1F;
    v13 = (0x80118000 >> v11) & 1;
    if (v12)
      v14 = 0;
    else
      v14 = v13;
  }
  else
  {
    v14 = 1;
  }
  v15 = *(_QWORD *)(v9 + 32);
  if (v15)
    v16 = (uint64_t *)(v15 - 8 * *(unsigned int *)(v15 + 8));
  else
    v16 = 0;
  while (v16 != (uint64_t *)v15)
  {
    v17 = *v16;
    if (*v16 && *(_BYTE *)v17 == 10)
    {
      v18 = sub_1C6020FE0(v5, 40, a2, 0);
      v19 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8));
      if (v19)
      {
        v20 = *(size_t **)(v19 + 8);
        v23 = *v20;
        v22 = v20 + 3;
        v21 = v23;
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      sub_1C60207E4(v5, v18, 3, v22, v21);
      result = sub_1C6021310((unint64_t)v5, v18, (uint64_t *)(v17 + 24), v24);
      if (v14)
        result = (*(uint64_t (**)(_QWORD *, void *, size_t, unint64_t, unsigned __int8 *))(*v5 + 24))(v5, v22, v21, v18, v10);
    }
    ++v16;
  }
  return result;
}

unint64_t sub_1C60231FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = sub_1C6020FE0(a1, *(_WORD *)(a3 + 2), a2, 0);
  v6 = *(unsigned int *)(a3 + 8);
  v7 = -v6;
  v8 = *(_QWORD *)(a3 - 8 * v6 + 16);
  if (v8)
  {
    v9 = *(size_t **)(v8 + 8);
    if (*v9)
    {
      sub_1C60207E4(a1, v5, 3, v9 + 3, *v9);
      v7 = -(uint64_t)*(unsigned int *)(a3 + 8);
    }
  }
  sub_1C6022E40((unint64_t)a1, v5, *(_QWORD *)(a3 + 8 * v7 + 40));
  v10 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 24);
  if (v10)
  {
    v11 = sub_1C6021928(a1, v10);
    sub_1C6020D94((unint64_t)a1, v5, 73, v11);
  }
  v12 = a3;
  if (*(_BYTE *)a3 != 15)
    v12 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8));
  sub_1C602125C((unint64_t)a1, v5, *(_DWORD *)(a3 + 24), v12);
  if (*(_WORD *)(a3 + 2) == 28 && (*(_BYTE *)(a3 + 28) & 0x20) != 0)
  {
    v25 = (uint64_t)(a1 + 10);
    v26 = sub_1C484358C((uint64_t)(a1 + 10), 16, 3);
    *(_QWORD *)v26 = 0;
    *(_DWORD *)(v26 + 8) = 0;
    v42 = 0xB000000000001;
    v43 = 18;
    sub_1C6008110((unint64_t *)v26, (uint64_t)(a1 + 10), (int *)&v42);
    v42 = 0xB000000000001;
    v43 = 6;
    sub_1C6008110((unint64_t *)v26, (uint64_t)(a1 + 10), (int *)&v42);
    v42 = 0xB000000000001;
    v43 = 16;
    sub_1C6008110((unint64_t *)v26, (uint64_t)(a1 + 10), (int *)&v42);
    v27 = *(_QWORD *)(a3 + 40);
    v42 = 0xF000000000001;
    v43 = v27;
    sub_1C6008110((unint64_t *)v26, (uint64_t)(a1 + 10), (int *)&v42);
    v42 = 0xB000000000001;
    v43 = 28;
    sub_1C6008110((unint64_t *)v26, (uint64_t)(a1 + 10), (int *)&v42);
    v42 = 0xB000000000001;
    v43 = 6;
    sub_1C6008110((unint64_t *)v26, (uint64_t)(a1 + 10), (int *)&v42);
    v42 = 0xB000000000001;
    v43 = 34;
LABEL_58:
    sub_1C6008110((unint64_t *)v26, v25, (int *)&v42);
    sub_1C6021080((unint64_t)a1, v5, 56, v26);
    goto LABEL_72;
  }
  v13 = *(_QWORD *)(a3 + 32);
  v14 = sub_1C5FFEF6C(a3);
  if (v14)
    v15 = v13 == v14;
  else
    v15 = 1;
  v16 = !v15;
  if (v15)
  {
    v19 = *(unsigned int *)(a3 + 48);
    v20 = *(_QWORD *)(a3 + 40);
    if (v19 < 8)
      goto LABEL_56;
    v21 = (unint64_t *)(v5 + 8);
    v42 = v19 >> 3;
    v22 = (unint64_t)a1;
    v23 = 136;
    v24 = 15;
  }
  else
  {
    v17 = v14;
    if (*(_BYTE *)(a1[24] + 3529))
    {
      if (v14 >= 0x800)
      {
        if (v14 >= 0x80000)
        {
          if (v14 >> 35)
            v18 = 7;
          else
            v18 = 6;
        }
        else
        {
          v18 = 5;
        }
      }
      else
      {
        v18 = 11;
      }
      v42 = v14 >> 3;
      sub_1C6002D64((unint64_t)a1, (unint64_t *)(v5 + 8), 11, v18, &v42);
    }
    if (v13 >= 0x100)
    {
      if (v13 >= 0x10000)
      {
        if (HIDWORD(v13))
          v28 = 7;
        else
          v28 = 6;
      }
      else
      {
        v28 = 5;
      }
    }
    else
    {
      v28 = 11;
    }
    v42 = v13;
    sub_1C6002D64((unint64_t)a1, (unint64_t *)(v5 + 8), 13, v28, &v42);
    v29 = *(_QWORD *)(a3 + 40);
    v30 = -(int)v17;
    if (*(_BYTE *)(a1[24] + 3529))
    {
      v20 = (((_DWORD)v29 + (_DWORD)v17) & v30) - v17;
      v31 = v29 - v20;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[22] + 288) + 2064) + 272))
        v31 = v17 - v13 - v31;
      if (v31 >= 0x100)
      {
        if (v31 >= 0x10000)
        {
          if (HIDWORD(v31))
            v32 = 7;
          else
            v32 = 6;
        }
        else
        {
          v32 = 5;
        }
      }
      else
      {
        v32 = 11;
      }
      v42 = v31;
      v24 = v32;
      v22 = (unint64_t)a1;
      v21 = (unint64_t *)(v5 + 8);
      v23 = 12;
    }
    else
    {
      v20 = v29 & v30;
      if (v29 >= 0x100)
      {
        if (v29 >= 0x10000)
        {
          if (HIDWORD(v29))
            v33 = 7;
          else
            v33 = 6;
        }
        else
        {
          v33 = 5;
        }
      }
      else
      {
        v33 = 11;
      }
      v42 = *(_QWORD *)(a3 + 40);
      v24 = v33;
      v22 = (unint64_t)a1;
      v21 = (unint64_t *)(v5 + 8);
      v23 = 107;
    }
  }
  sub_1C6002D64(v22, v21, v23, v24, &v42);
LABEL_56:
  v34 = a1[24];
  v35 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 272) + 8) + 1624);
  if (v35 <= 2)
  {
    v25 = (uint64_t)(a1 + 10);
    v26 = sub_1C484358C((uint64_t)(a1 + 10), 16, 3);
    *(_QWORD *)v26 = 0;
    *(_DWORD *)(v26 + 8) = 0;
    v42 = 0xB000000000001;
    v43 = 35;
    sub_1C6008110((unint64_t *)v26, (uint64_t)(a1 + 10), (int *)&v42);
    v42 = 0xF000000000001;
    v43 = v20 >> 3;
    goto LABEL_58;
  }
  if (!v16 || *(_BYTE *)(v34 + 3529))
  {
    if (v35 == 3)
    {
      v42 = v20 >> 3;
      v36 = (unint64_t)a1;
      v37 = 15;
    }
    else
    {
      if (v20 >= 0x800)
      {
        if (v20 >= 0x80000)
        {
          if (v20 >> 35)
            v38 = 7;
          else
            v38 = 6;
        }
        else
        {
          v38 = 5;
        }
      }
      else
      {
        v38 = 11;
      }
      v42 = v20 >> 3;
      v37 = v38;
      v36 = (unint64_t)a1;
    }
    sub_1C6002D64(v36, (unint64_t *)(v5 + 8), 56, v37, &v42);
  }
LABEL_72:
  sub_1C6021868((unint64_t)a1, v5, *(_DWORD *)(a3 + 28));
  if ((*(_BYTE *)(a3 + 28) & 0x20) != 0)
  {
    v42 = 1;
    sub_1C6002D64((unint64_t)a1, (unint64_t *)(v5 + 8), 76, 11, &v42);
  }
  v39 = *(unsigned __int8 **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 32);
  if (v39)
  {
    if (*v39 == 27)
    {
      v40 = sub_1C6020664(a1, v39);
      if (v40)
      {
        v42 = v40;
        sub_1C63C8380((uint64_t)a1, (unint64_t *)(v5 + 8), &v42);
      }
    }
  }
  if ((*(_BYTE *)(a3 + 28) & 0x40) != 0)
    sub_1C602072C((unint64_t)a1, v5, 52);
  return v5;
}

unint64_t sub_1C6023774(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t *v8;
  void *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;

  if (!a2)
    return 0;
  v4 = sub_1C60218D4(a1, *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  v5 = sub_1C6020664(a1, (unsigned __int8 *)a2);
  if (!v5)
  {
    v5 = sub_1C6020FE0(a1, *(_WORD *)(a2 + 2), v4, (unsigned __int8 *)a2);
    v6 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    v7 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
    if (v6)
    {
      v8 = *(size_t **)(v6 + 8);
      v11 = *v8;
      v9 = v8 + 3;
      v10 = v11;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    sub_1C60207E4(a1, v5, 3, v9, v10);
    v12 = sub_1C6021928(a1, v7);
    sub_1C6020D94((unint64_t)a1, v5, 73, v12);
    v13 = a2;
    if (*(_BYTE *)a2 != 15)
      v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    sub_1C602125C((unint64_t)a1, v5, *(_DWORD *)(a2 + 24), v13);
    sub_1C602072C((unint64_t)a1, v5, 63);
    sub_1C602072C((unint64_t)a1, v5, 60);
    sub_1C6021868((unint64_t)a1, v5, *(_DWORD *)(a2 + 28));
    v14 = *(unsigned int *)(a2 + 8);
    v15 = -v14;
    v16 = *(_QWORD *)(a2 - 8 * v14 + 32);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 128);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 16) == 16)
        {
          v18 = (uint64_t *)(v17 + 24);
          v19 = sub_1C5FFEFD4(v7);
          sub_1C6021310((unint64_t)a1, v5, v18, v19);
          v15 = -(uint64_t)*(unsigned int *)(a2 + 8);
        }
      }
    }
    v20 = *(_QWORD *)(a2 + 8 * v15 + 32);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 128);
      if (v21)
      {
        if (*(_BYTE *)(v21 + 16) == 17)
          sub_1C63C73A0((unint64_t)a1, v5, v21);
      }
    }
    v22 = *(unsigned int *)(a2 + 48);
    if (v22 >= 8)
    {
      v24 = v22 >> 3;
      sub_1C6002D64((unint64_t)a1, (unint64_t *)(v5 + 8), 136, 15, &v24);
    }
  }
  return v5;
}

unint64_t sub_1C6023958(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  __int16 v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t result;
  uint64_t v40;
  uint64_t v41;
  size_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  size_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = a4;
  v76 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 72) + 49))
    {
      LOBYTE(v9) = 1;
      goto LABEL_53;
    }
    v8 = 0;
    v9 = 0;
    v10 = (unsigned int *)(a2 + 8);
  }
  else
  {
    v10 = (unsigned int *)(a2 + 8);
    v11 = a2 - 8 * *(unsigned int *)(a2 + 8);
    v12 = *(_QWORD *)(v11 + 48);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 32);
      v14 = *(_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8) + 24);
      if (v14)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v11 + 32) - 8 * *(unsigned int *)(*(_QWORD *)(v11 + 32) + 8) + 24);
        v16 = *(unsigned int *)(v14 + 8);
        if ((_DWORD)v16 && v15 != 0)
        {
          v18 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v18)
          {
            v19 = *(_QWORD *)(v15 - 8 * v18);
            if (v19)
            {
              if (*(_QWORD *)(v14 - 8 * v16) != v19)
              {
                v20 = sub_1C6021928(a1, v19);
                sub_1C6020D94(a1, a3, 73, v20);
              }
            }
          }
        }
      }
      v9 = sub_1C6020664((_QWORD *)a1, (unsigned __int8 *)v12);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 3530)
        && (v21 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 24)) != 0)
      {
        v8 = **(_QWORD **)(v21 + 8);
      }
      else
      {
        v8 = 0;
      }
      v22 = v12;
      if (*(_BYTE *)v12 != 15)
        v22 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
      v23 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v22);
      v24 = a2;
      if (*(_BYTE *)a2 != 15)
        v24 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      v25 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v24);
      if (v23 != v25)
      {
        if (v25 < 0x10000)
          v26 = 5;
        else
          v26 = 6;
        if (v25 >= 0x100)
          v27 = v26;
        else
          v27 = 11;
        v74 = v25;
        sub_1C6002D64(a1, (unint64_t *)(a3 + 8), 58, v27, &v74);
      }
      v28 = *(_DWORD *)(a2 + 24);
      if (v28 != *(_DWORD *)(v12 + 24))
      {
        if (v28 < 0x10000)
          v29 = 5;
        else
          v29 = 6;
        if (v28 >= 0x100)
          v30 = v29;
        else
          v30 = 11;
        v74 = *(unsigned int *)(a2 + 24);
        sub_1C6002D64(a1, (unint64_t *)(a3 + 8), 59, v30, &v74);
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
  }
  v31 = *v10;
  if (v31 < 0xA)
    v32 = 0;
  else
    v32 = *(_QWORD *)(a2 - 8 * v31 + 72);
  sub_1C6021510(a1, a3, v32);
  v33 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  if (v33)
  {
    v34 = *(_QWORD **)(v33 + 8);
    v37 = *v34;
    v36 = v34 + 3;
    v35 = v37;
    if (v8)
      goto LABEL_51;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    if (v8)
      goto LABEL_51;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 3530)
    || (v38 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 384),
        v74 = a2,
        v72 = 0,
        sub_1C4850EC8(v38, &v74, &v72))
    && *(_QWORD *)(v72 + 8))
  {
    sub_1C60214C4((_QWORD *)a1, a3, v36, v35);
  }
LABEL_51:
  if (v9)
    return sub_1C6020D94(a1, a3, 71, v9);
LABEL_53:
  v40 = *(unsigned int *)(a2 + 8);
  v41 = *(_QWORD *)(a2 - 8 * v40 + 16);
  if (v41)
  {
    v42 = *(size_t **)(v41 + 8);
    if (*v42)
    {
      sub_1C60207E4((_QWORD *)a1, a3, 3, v42 + 3, *v42);
      LODWORD(v40) = *(_DWORD *)(a2 + 8);
    }
  }
  if (v40 < 0xC)
    v43 = 0;
  else
    v43 = *(_QWORD *)(a2 - 8 * v40 + 88);
  result = sub_1C6022E40(a1, a3, v43);
  if ((v9 & 1) == 0)
  {
    v44 = a2;
    if (*(_BYTE *)a2 != 15)
      v44 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    result = sub_1C602125C(a1, a3, *(_DWORD *)(a2 + 24), v44);
  }
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 41) & 1) != 0)
    {
      v45 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 24);
      v46 = v45 > 0x10;
      v47 = (1 << v45) & 0x11002;
      if (!v46 && v47 != 0)
        sub_1C602072C(a1, a3, 39);
    }
    if ((*(_BYTE *)(a2 + 45) & 8) != 0)
      sub_1C602072C(a1, a3, 16366);
    v49 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 - 8 * *(unsigned int *)(v49 + 8) + 24);
      v51 = *(unsigned __int8 *)(v49 + 52);
      if (v51 >= 2)
      {
        v74 = v51;
        sub_1C6002D64(a1, (unint64_t *)(a3 + 8), 54, 11, &v74);
      }
      if (v50)
      {
        v52 = *(unsigned int *)(v50 + 8);
        if ((_DWORD)v52)
        {
          v53 = *(_QWORD *)(v50 - 8 * v52);
          if (v53)
          {
            v54 = sub_1C6021928(a1, v53);
            sub_1C6020D94(a1, a3, 73, v54);
          }
        }
      }
    }
    else
    {
      v50 = 0;
    }
    v55 = *(_DWORD *)(a2 + 44);
    if ((v55 & 3) != 0)
    {
      v74 = v55 & 3;
      sub_1C6002D64(a1, (unint64_t *)(a3 + 8), 76, 11, &v74);
      if (*(_DWORD *)(a2 + 32) != -1)
      {
        v59 = sub_1C484358C(a1 + 80, 16, 3);
        *(_QWORD *)v59 = 0;
        *(_DWORD *)(v59 + 8) = 0;
        v74 = 0xB000000000001;
        v75 = 16;
        sub_1C6008110((unint64_t *)v59, a1 + 80, (int *)&v74);
        v60 = *(unsigned int *)(a2 + 32);
        v74 = 0xF000000000001;
        v75 = v60;
        sub_1C6008110((unint64_t *)v59, a1 + 80, (int *)&v74);
        sub_1C6021080(a1, a3, 77, v59);
      }
      v61 = *(unsigned int *)(a2 + 8);
      if (v61 < 9)
        v62 = 0;
      else
        v62 = *(_QWORD *)(a2 - 8 * v61 + 64);
      v72 = a3;
      v73 = v62;
      sub_1C6187718((uint64_t)&v74, a1 + 288, &v72, &v73);
      if ((*(_DWORD *)(a2 + 44) & 8) != 0)
      {
LABEL_83:
        v56 = *(unsigned int *)(a2 + 8);
        if (v56 >= 0xB)
        {
          v57 = *(_QWORD *)(a2 - 8 * v56 + 80);
          if (v57)
            v58 = (uint64_t *)(v57 - 8 * *(unsigned int *)(v57 + 8));
          else
            v58 = 0;
          while (v58 != (uint64_t *)v57)
          {
            v63 = *v58++;
            v64 = sub_1C6020FE0((_QWORD *)a1, 49, a3, 0);
            v65 = sub_1C6021928(a1, v63);
            sub_1C6020D94(a1, v64, 73, v65);
          }
        }
        if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
          sub_1C602072C(a1, a3, 52);
        if ((*(_BYTE *)(a2 + 44) & 4) == 0)
          sub_1C602072C(a1, a3, 63);
        if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 3548))
        {
          if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
            sub_1C602072C(a1, a3, 16353);
          v66 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 368))(*(_QWORD *)(a1 + 176));
          if (v66)
          {
            v74 = v66;
            sub_1C6002D64(a1, (unint64_t *)(a3 + 8), 16355, 12, &v74);
          }
        }
        v67 = *(_DWORD *)(a2 + 40);
        if ((v67 & 0x2000) != 0)
        {
          sub_1C602072C(a1, a3, 119);
          v67 = *(_DWORD *)(a2 + 40);
          if ((v67 & 0x4000) == 0)
          {
LABEL_107:
            if ((v67 & 0x100000) == 0)
              goto LABEL_109;
            goto LABEL_108;
          }
        }
        else if ((v67 & 0x4000) == 0)
        {
          goto LABEL_107;
        }
        sub_1C602072C(a1, a3, 120);
        v67 = *(_DWORD *)(a2 + 40);
        if ((v67 & 0x100000) == 0)
        {
LABEL_109:
          result = sub_1C6021868(a1, a3, v67);
          if ((*(_BYTE *)(a2 + 40) & 0x80) != 0)
            result = sub_1C602072C(a1, a3, 99);
          v68 = *(_DWORD *)(a2 + 44);
          if ((v68 & 0x100) != 0)
          {
            result = sub_1C602072C(a1, a3, 106);
            v68 = *(_DWORD *)(a2 + 44);
            if ((v68 & 0x20) == 0)
            {
LABEL_113:
              if ((v68 & 0x40) == 0)
                goto LABEL_114;
              goto LABEL_129;
            }
          }
          else if ((v68 & 0x20) == 0)
          {
            goto LABEL_113;
          }
          result = sub_1C602072C(a1, a3, 103);
          v68 = *(_DWORD *)(a2 + 44);
          if ((v68 & 0x40) == 0)
          {
LABEL_114:
            if ((v68 & 0x80) == 0)
              goto LABEL_116;
            goto LABEL_115;
          }
LABEL_129:
          result = sub_1C602072C(a1, a3, 102);
          if ((*(_DWORD *)(a2 + 44) & 0x80) == 0)
          {
LABEL_116:
            v69 = *(unsigned int *)(a2 + 8);
            if (v69 >= 0xD)
            {
              v70 = *(_QWORD *)(a2 - 8 * v69 + 96);
              if (v70)
              {
                v71 = *(size_t **)(v70 + 8);
                if (*v71)
                  result = (unint64_t)sub_1C60207E4((_QWORD *)a1, a3, 86, v71 + 3, *v71);
              }
            }
            if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8)
                                     + 1624) >= 5u
              && (*(_BYTE *)(a2 + 45) & 2) != 0)
            {
              return sub_1C602072C(a1, a3, 138);
            }
            return result;
          }
LABEL_115:
          result = sub_1C602072C(a1, a3, 104);
          goto LABEL_116;
        }
LABEL_108:
        sub_1C602072C(a1, a3, 135);
        v67 = *(_DWORD *)(a2 + 40);
        goto LABEL_109;
      }
    }
    else if ((v55 & 8) != 0)
    {
      goto LABEL_83;
    }
    sub_1C602072C(a1, a3, 60);
    sub_1C6022F3C(a1, a3, v50);
    goto LABEL_83;
  }
  return result;
}

void sub_1C602412C(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t *v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29[2];
  char v30;
  uint64_t (**v31)();
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[5];
  unsigned int v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)a1;
  v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 6) == 2 && v6 != 0)
  {
    v14 = sub_1C6020664(*(_QWORD **)a1, (unsigned __int8 *)(a3 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
      sub_1C6020D94((unint64_t)v5, *(_QWORD *)(a1 + 8), a2, v14);
    return;
  }
  if ((a3 & 6) != 4 || !v6)
  {
    if ((a3 & 6) != 0 || !v6)
      return;
    if (a2 == 34)
    {
      v17 = **(_QWORD **)(a1 + 16);
      if (v17 != -1)
      {
        v18 = *(_DWORD *)(v6 + 32);
        v19 = v18 > 0x40 ? **(_QWORD **)(v6 + 24) : (uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v18) >> -(char)v18;
        if (v19 == v17)
          return;
      }
    }
    else if (a2 == 55)
    {
      v15 = *(_DWORD *)(v6 + 32);
      if (v15 > 0x40)
        v16 = **(_QWORD **)(v6 + 24);
      else
        v16 = (uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v15) >> -(char)v15;
      if (v16 == -1)
        return;
      v20 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8);
      if (HIDWORD(v16))
        v21 = 7;
      else
        v21 = 6;
      if (v16 >= 0x10000)
        v22 = v21;
      else
        v22 = 5;
      if (v16 >= 0x100)
        v23 = v22;
      else
        v23 = 11;
      v31 = (uint64_t (**)())v16;
      v24 = v23;
      v25 = (unint64_t)v5;
      v26 = 55;
LABEL_42:
      sub_1C6002D64(v25, v20, v26, v24, &v31);
      return;
    }
    v20 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8);
    v27 = *(_DWORD *)(v6 + 32);
    if (v27 > 0x40)
      v28 = **(_QWORD **)(v6 + 24);
    else
      v28 = (uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v27) >> -(char)v27;
    v31 = (uint64_t (**)())v28;
    v25 = (unint64_t)v5;
    v26 = a2;
    v24 = 13;
    goto LABEL_42;
  }
  v8 = sub_1C484358C((uint64_t)(v5 + 10), 16, 3);
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(v8 + 8) = 0;
  v9 = v5[22];
  v10 = (*(uint64_t (**)(_QWORD *))(*v5 + 56))(v5);
  v11 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 272) + 8) + 1624);
  v32 = 0;
  v33 = v10;
  v34 = v36;
  v35 = 0x200000000;
  v36[4] = 0;
  v39 = 0;
  v31 = off_1E81AB9F8;
  v40 = v9;
  v41 = v8;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v38 = ((v11 & 0xF) << 9) | 2;
  v37 = 0;
  v12 = *(uint64_t **)(v6 + 32);
  v29[0] = *(uint64_t **)(v6 + 24);
  v29[1] = v12;
  sub_1C601E1B0((uint64_t)&v31, v29, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C601E828, (uint64_t)&v30);
  v13 = *(_QWORD *)(a1 + 8);
  if (v37 >= 0x10000 && (_WORD)v37)
    sub_1C601D3D4((void (***)(void))&v31, (unsigned __int16)v37, HIWORD(v37));
  sub_1C6021080((unint64_t)v5, v13, a2, v41);
  v31 = (uint64_t (**)())&unk_1E81AB308;
  if (v34 != v36)
    free(v34);
}

void sub_1C6024438(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t isConstant;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17[2];
  char v18;
  uint64_t (**v19)();
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];
  unsigned int v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)a1;
  v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 4) != 0 || !v6)
  {
    if (v6 && (a3 & 4) != 0)
    {
      isConstant = llvm::DIExpression::isConstant((llvm::DIExpression *)(a3 & 0xFFFFFFFFFFFFFFF8));
      if ((isConstant & 0xFF00000000) == 0 || (_DWORD)isConstant)
      {
        v11 = sub_1C484358C((uint64_t)(v5 + 10), 16, 3);
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        v12 = v5[22];
        v13 = (*(uint64_t (**)(_QWORD *))(*v5 + 56))(v5);
        v14 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 272) + 8) + 1624);
        v20 = 0;
        v21 = v13;
        v22 = v24;
        v23 = 0x200000000;
        v24[4] = 0;
        v27 = 0;
        v19 = off_1E81AB9F8;
        v28 = v12;
        v29 = v11;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v26 = ((v14 & 0xF) << 9) | 2;
        v25 = 0;
        v15 = *(uint64_t **)(v6 + 32);
        v17[0] = *(uint64_t **)(v6 + 24);
        v17[1] = v15;
        sub_1C601E1B0((uint64_t)&v19, v17, (uint64_t (*)(uint64_t, _QWORD, uint64_t **))sub_1C601E828, (uint64_t)&v18);
        v16 = *(_QWORD *)(a1 + 8);
        if (v25 >= 0x10000 && (_WORD)v25)
          sub_1C601D3D4((void (***)(void))&v19, (unsigned __int16)v25, HIWORD(v25));
        sub_1C6021080((unint64_t)v5, v16, a2, v29);
        v19 = (uint64_t (**)())&unk_1E81AB308;
        if (v22 != v24)
          free(v22);
      }
      else if (a2 != 34 || (v9 = **(_QWORD **)(a1 + 16), v9 == -1) || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) != v9)
      {
        v10 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8);
        v19 = *(uint64_t (***)())(*(_QWORD *)(v6 + 24) + 8);
        sub_1C6002D64((unint64_t)v5, v10, a2, 13, &v19);
      }
    }
  }
  else
  {
    v7 = sub_1C6020664(*(_QWORD **)a1, (unsigned __int8 *)(a3 & 0xFFFFFFFFFFFFFFF8));
    if (v7)
      sub_1C6020D94((unint64_t)v5, *(_QWORD *)(a1 + 8), a2, v7);
  }
}

unint64_t sub_1C602468C(unint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t *v10;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 288);
  v3 = *(unsigned int *)(result + 304);
  v4 = (unint64_t *)(v2 + 16 * v3);
  if (*(_DWORD *)(result + 296))
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = *(unint64_t **)(result + 288);
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(unint64_t **)(result + 288);
    }
  }
  else
  {
LABEL_6:
    v6 = (unint64_t *)(v2 + 16 * v3);
  }
  v7 = (unint64_t *)(v2 + 16 * v3);
LABEL_9:
  while (v6 != v7)
  {
    v8 = (unsigned __int8 *)v6[1];
    if (v8)
    {
      v9 = *v6;
      result = sub_1C6020664(v1, v8);
      if (result)
        result = sub_1C6020D94((unint64_t)v1, v9, 29, result);
    }
    v10 = v6 + 2;
    v6 = v4;
    if (v10 != v4)
    {
      v6 = v10;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        if (v6 == v4)
        {
          v6 = v4;
          goto LABEL_9;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C6024770(_QWORD *a1, int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  const char *v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v6 = a1[22];
  if (*(_BYTE *)(a1[24] + 3533))
  {
    (*(void (**)(_QWORD *))(*a1 + 40))(a1);
    v21[0] = "Length of Unit";
    v22 = 259;
    sub_1C63BDF88(v6);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    v8 = "debug_info_dwo";
    if (!v7)
      v8 = "debug_info";
    v9 = 1;
    HIBYTE(v22) = 1;
    if (*v8)
    {
      v21[0] = v8;
      v9 = 3;
    }
    LOBYTE(v22) = v9;
    v19 = "Length of Unit";
    v20 = 259;
    a1[23] = (*(uint64_t (**)(_QWORD, _QWORD *, const char **))(**(_QWORD **)(v6 + 272) + 1248))(*(_QWORD *)(v6 + 272), v21, &v19);
  }
  v10 = *(_QWORD *)(a1[22] + 272);
  v21[0] = "DWARF version number";
  v22 = 259;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v10 + 112))(v10, v21, 1);
  v11 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1[22] + 272) + 512))(*(_QWORD *)(a1[22] + 272), *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[24] + 8) + 272) + 8) + 1624), 2);
  if (v11 >= 5)
  {
    v17 = *(_QWORD *)(a1[22] + 272);
    v21[0] = "DWARF Unit Type";
    v22 = 259;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v17 + 112))(v17, v21, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1[22] + 272) + 512))(*(_QWORD *)(a1[22] + 272), a3, 1);
    v18 = *(_QWORD *)(a1[22] + 272);
    v21[0] = "Address Size (in bytes)";
    v22 = 259;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v18 + 112))(v18, v21, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1[22] + 272) + 512))(*(_QWORD *)(a1[22] + 272), *(int *)(*(_QWORD *)(a1[22] + 256) + 8), 1);
  }
  v12 = *(_QWORD *)(a1[22] + 272);
  v21[0] = "Offset Into Abbrev. Section";
  v22 = 259;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v12 + 112))(v12, v21, 1);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[22] + 248) + 24))(*(_QWORD *)(a1[22] + 248));
  v14 = a1[22];
  if (a2)
    result = sub_1C63BDF64(v14, 0);
  else
    result = sub_1C5FFA9F8(v14, *(llvm::MCExpr ***)(*(_QWORD *)(v13 + 72) + 8), 0);
  if (v11 <= 4)
  {
    v16 = *(_QWORD *)(a1[22] + 272);
    v21[0] = "Address Size (in bytes)";
    v22 = 259;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v16 + 112))(v16, v21, 1);
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1[22] + 272) + 512))(*(_QWORD *)(a1[22] + 272), *(int *)(*(_QWORD *)(a1[22] + 256) + 8), 1);
  }
  return result;
}

unint64_t sub_1C6024A24(unint64_t a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5)
{
  unint64_t *v9;
  uint64_t v10;
  __int16 v11;
  _QWORD *v12;
  _QWORD *v14;

  v9 = (unint64_t *)(a2 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 272) + 8);
  if (*(unsigned __int16 *)(v10 + 1624) <= 3u)
  {
    if (*(_BYTE *)(v10 + 1626) == 1)
      v11 = 7;
    else
      v11 = 6;
  }
  else
  {
    v11 = 23;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 256) + 424))
  {
    v14 = a4;
    return sub_1C6002E3C(a1, (unint64_t *)(a2 + 8), a3, v11, &v14);
  }
  else
  {
    v12 = (_QWORD *)sub_1C484358C(a1 + 80, 16, 3);
    *v12 = a4;
    v12[1] = a5;
    v14 = v12;
    return sub_1C6020CC4(a1, v9, a3, v11, &v14);
  }
}

uint64_t sub_1C6024AFC(_QWORD *a1)
{
  if (!*(_BYTE *)(*(_QWORD *)(a1[22] + 256) + 424) || ((*(uint64_t (**)(void))(*a1 + 80))() & 1) != 0)
    return 0;
  else
    return *(_QWORD *)(a1[7] + 8);
}

uint64_t sub_1C6024B4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4850EC8((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4E85244(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C6024BDC(_QWORD *result, uint64_t a2)
{
  *result = off_1E81ABB28;
  result[1] = a2;
  result[2] = *(_QWORD *)(a2 + 288);
  return result;
}

uint64_t sub_1C6024BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v1)
  {
    LOBYTE(v2) = 0;
    v3 = 0;
    v4 = 32 * v1;
    v5 = *(_QWORD *)(a1 + 32) + 16;
    do
    {
      if (*(_BYTE *)(v5 - 16) == 10)
      {
        v6 = *(_QWORD *)v5;
        if (*(_BYTE *)(*(_QWORD *)v5 + 16))
          v6 = 0;
        if ((v6 == 0) | v3 & 1)
        {
          if (v6)
            goto LABEL_14;
        }
        else
        {
          v2 = *(_QWORD *)(v6 + 112);
          if (v2)
            LODWORD(v2) = (*(unsigned __int8 *)(v2 + 16) >> 5) & 1;
          v3 = 1;
        }
      }
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  else
  {
LABEL_14:
    LOBYTE(v2) = 0;
  }
  return v2 & 1;
}

uint64_t sub_1C6024C74(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  unsigned int v43;
  _OWORD *v44;
  __int128 v45;
  int v46;
  int v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  BOOL v63;
  char *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  uint64_t v73;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  _QWORD v79[2];
  int v80;
  uint64_t v81;
  int v82[4];

  v79[0] = 0;
  v79[1] = 0;
  v80 = 0;
  sub_1C63C8B68(a4, (uint64_t)v79);
  v73 = a1;
  v7 = *(_QWORD **)(a1 + 8);
  v8 = v7[35];
  v9 = *(_QWORD *)(v8 + 328);
  v68 = v8 + 320;
  if (v9 != v8 + 320)
  {
    LOBYTE(v10) = 0;
    v11 = 0;
    v71 = *(_DWORD *)(v7[32] + 412);
    v12 = v7[65];
    v66 = a3 + 16;
    v67 = a3;
    while (1)
    {
      v13 = *(_QWORD *)(v73 + 8);
      if (v9 == *(_QWORD *)(*(_QWORD *)(v13 + 280) + 328) || *(_BYTE *)(v9 + 200))
        break;
LABEL_5:
      if (*(_BYTE *)(v9 + 184))
        *(_BYTE *)(*(_QWORD *)a3 + 48 * *(unsigned int *)(a3 + 8) - 8) = 1;
      v14 = v9 + 48;
      v69 = v9;
      v15 = *(_QWORD *)(v9 + 56);
      if (v15 != v9 + 48)
      {
        v16 = v79[0];
        v17 = v80;
        v18 = v80 - 1;
        while (1)
        {
          v19 = *(_QWORD *)(v15 + 16);
          if (*(_WORD *)v19 == 4)
            break;
          v32 = *(_QWORD *)(v19 + 8);
          if ((*(_WORD *)(v15 + 44) & 0xC) == 0 || (*(_WORD *)(v15 + 44) & 4) != 0)
          {
            if ((v32 & 0x80) == 0)
              goto LABEL_37;
LABEL_27:
            v34 = v11;
            v35 = sub_1C6024BF4(v15);
            v11 = v34;
            LOBYTE(v10) = v10 | v35 ^ 1;
            goto LABEL_37;
          }
          v36 = v15;
          if ((v32 & 0x80) != 0)
            goto LABEL_27;
          while ((*(_WORD *)(v36 + 44) & 8) != 0)
          {
            v36 = *(_QWORD *)(v36 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v36 + 16) + 8) & 0x80) != 0)
              goto LABEL_27;
          }
LABEL_37:
          if ((*(_BYTE *)v15 & 4) == 0)
          {
LABEL_40:
            while ((*(_WORD *)(v15 + 44) & 8) != 0)
              v15 = *(_QWORD *)(v15 + 8);
          }
          v15 = *(_QWORD *)(v15 + 8);
          if (v15 == v14)
            goto LABEL_57;
        }
        v20 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 16);
        v10 = (v20 != v12) & v10;
        if (!v17)
          goto LABEL_37;
        LODWORD(v21) = ((v20 >> 4) ^ (v20 >> 9)) & v18;
        v22 = (uint64_t *)(v16 + 16 * v21);
        v23 = *v22;
        if (v20 == *v22)
        {
LABEL_12:
          if ((_DWORD)v21 != v17)
          {
            v24 = v16;
            v25 = *(_QWORD *)(*a4 + 8 * *((unsigned int *)v22 + 2));
            if (v10)
            {
              v26 = *(_QWORD *)(*(_QWORD *)(v73 + 8) + 256);
              switch(*(_DWORD *)(v26 + 412))
              {
                case 1:
                case 3:
                case 6:
                  goto LABEL_15;
                case 4:
                  v40 = *(_DWORD *)(v26 + 420);
                  if (v40)
                    v41 = v40 == 6;
                  else
                    v41 = 1;
                  if (!v41)
                  {
LABEL_15:
                    *(_QWORD *)&v75 = v12;
                    *((_QWORD *)&v75 + 1) = v20;
                    *(_QWORD *)&v76 = 0;
                    DWORD2(v76) = 0;
                    v27 = (_OWORD *)sub_1C5B172F0(a2, (unint64_t)&v75);
                    v11 = 0;
                    v28 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 8));
                    v29 = v27[1];
                    *v28 = *v27;
                    v28[1] = v29;
                    ++*(_DWORD *)(a2 + 8);
                  }
                  break;
                default:
                  break;
              }
            }
            v12 = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * *((unsigned int *)v22 + 3));
            if (!*(_QWORD *)(v25 + 88))
            {
              v11 = 0;
              goto LABEL_35;
            }
            *(_QWORD *)&v75 = v20;
            *((_QWORD *)&v75 + 1) = v12;
            v76 = v25;
            v30 = *(_DWORD *)(*a5 + 4 * *((unsigned int *)v22 + 2));
            DWORD2(v76) = v30;
            if ((v11 & 1) == 0 || v71 == 2)
            {
              if (v71 != 2)
                goto LABEL_34;
              v42 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v73 + 8) + 280) + 584);
              v81 = 0;
              *(_QWORD *)v82 = v20;
              v16 = v24;
              if ((sub_1C61252B8(v42, v82, &v81) & 1) != 0)
              {
                v43 = *(_DWORD *)(v81 + 8);
                if (*(_DWORD *)(a2 + 8) < v43)
                  sub_1C63C8E78(a2, *(unsigned int *)(v81 + 8));
              }
              else
              {
                v43 = 0;
              }
              v44 = (_OWORD *)(*(_QWORD *)a2 + 32 * (v43 - 1));
              v45 = v76;
              *v44 = v75;
              v44[1] = v45;
              v11 = 1;
            }
            else
            {
              v31 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 8);
              if (v25 == *(_QWORD *)(v31 - 16) && v30 == *(_DWORD *)(v31 - 8))
              {
                *(_QWORD *)(v31 - 24) = v12;
                goto LABEL_35;
              }
LABEL_34:
              v37 = (_OWORD *)sub_1C5B172F0(a2, (unint64_t)&v75);
              v38 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 8));
              v39 = v37[1];
              *v38 = *v37;
              v38[1] = v39;
              ++*(_DWORD *)(a2 + 8);
              v11 = 1;
LABEL_35:
              v16 = v24;
            }
          }
        }
        else
        {
          v46 = 1;
          while (v23 != -4096)
          {
            v47 = v21 + v46++;
            v21 = v47 & v18;
            v23 = *(_QWORD *)(v16 + 16 * v21);
            if (v20 == v23)
            {
              v22 = (uint64_t *)(v16 + 16 * v21);
              goto LABEL_12;
            }
          }
        }
        if (!v15)
          goto LABEL_40;
        goto LABEL_37;
      }
LABEL_57:
      a3 = v67;
      if (v69 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 8) + 280) + 320) || *(_BYTE *)(v69 + 201))
      {
        if ((v10 & 1) == 0 || v71 == 2)
        {
          v52 = *(_DWORD *)(a2 + 8);
        }
        else
        {
          v76 = 0uLL;
          v75 = v12;
          *((_QWORD *)&v75 + 1) = *(_QWORD *)(*(_QWORD *)v67 + 48 * *(unsigned int *)(v67 + 8) - 40);
          v48 = v11;
          v49 = (_OWORD *)sub_1C5B172F0(a2, (unint64_t)&v75);
          v11 = v48;
          LOBYTE(v10) = 0;
          v50 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 8));
          v51 = v49[1];
          *v50 = *v49;
          v50[1] = v51;
          v52 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v52;
        }
        *(_QWORD *)(*(_QWORD *)v67 + 48 * *(unsigned int *)(v67 + 8) - 16) = v52;
      }
      v9 = *(_QWORD *)(v69 + 8);
      if (v9 == v68)
        return MEMORY[0x1CAA32FB4](v79[0], 8);
    }
    v82[0] = *(_DWORD *)(v9 + 196) - *(_DWORD *)(v9 + 192) + 2;
    *(_QWORD *)&v75 = *(_QWORD *)sub_1C5FF137C(v13 + 352, v82);
    v53 = *(_QWORD *)(v73 + 8) + 352;
    LODWORD(v81) = *(_DWORD *)(v9 + 196) - *(_DWORD *)(v9 + 192) + 2;
    *((_QWORD *)&v75 + 1) = *(_QWORD *)(sub_1C5FF137C(v53, (int *)&v81) + 8);
    v54 = sub_1C63BD1CC(*(_QWORD *)(v73 + 8), v9);
    v55 = *(unsigned int *)(a2 + 8);
    *(_QWORD *)&v76 = v54;
    *((_QWORD *)&v76 + 1) = v55;
    v77 = 0;
    v78 = 0;
    v56 = *(unsigned int *)(a3 + 8);
    v57 = *(_QWORD *)a3;
    if (v56 >= *(_DWORD *)(a3 + 12))
    {
      v62 = v56 + 1;
      v63 = v57 + 48 * v56 > (unint64_t)&v75;
      if (v57 <= (unint64_t)&v75 && v63)
      {
        v64 = (char *)&v75 - v57;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v66, v62, 48);
        v57 = *(_QWORD *)a3;
        v58 = &v64[*(_QWORD *)a3];
        goto LABEL_68;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v66, v62, 48);
      v57 = *(_QWORD *)a3;
    }
    v58 = (char *)&v75;
LABEL_68:
    v11 = 0;
    LOBYTE(v10) = 0;
    v12 = 0;
    v59 = (_OWORD *)(v57 + 48 * *(unsigned int *)(a3 + 8));
    v60 = *(_OWORD *)v58;
    v61 = *((_OWORD *)v58 + 2);
    v59[1] = *((_OWORD *)v58 + 1);
    v59[2] = v61;
    *v59 = v60;
    ++*(_DWORD *)(a3 + 8);
    goto LABEL_5;
  }
  return MEMORY[0x1CAA32FB4](v79[0], 8);
}

unint64_t sub_1C6025250(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  const llvm::MCSymbol *v6;
  const llvm::MCSymbol *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  unint64_t TempSymbol;
  uint64_t v28;
  const llvm::MCSymbol **v29;
  uint64_t *v30;
  uint64_t v31;
  const llvm::MCSymbol **v32;
  uint64_t v33;
  BOOL isPositionIndependent;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  const char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int16 v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  llvm::MCStreamer *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  unint64_t v115;
  unint64_t v116;
  unint64_t Symbol;
  uint64_t *v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  int v122;
  _QWORD v123[4];
  __int16 v124;
  _QWORD v125[2];
  const char *v126;
  __int16 v127;
  uint64_t v128[2];
  BOOL *v129;
  unint64_t *v130;
  unsigned int *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int v135;
  BOOL v136;
  unsigned int v137;
  _QWORD v138[2];
  const char *v139;
  uint64_t v140;
  __int16 v141;
  void *v142;
  uint64_t v143;
  _BYTE v144[192];
  void *v145;
  uint64_t v146;
  _BYTE v147[2048];
  void *v148[2];
  _BYTE v149[256];
  void *v150;
  uint64_t v151;
  _BYTE v152[384];
  void *v153;
  uint64_t v154;
  _QWORD v155[66];

  v155[64] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1[1] + 280);
  v153 = v155;
  v154 = 0x4000000000;
  v6 = *(const llvm::MCSymbol **)(v5 + 520);
  v7 = *(const llvm::MCSymbol **)(v5 + 512);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - v7) >> 3);
  if (v8 < 0x41)
  {
    v9 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v8, 8);
    v7 = *(const llvm::MCSymbol **)(v5 + 512);
    v6 = *(const llvm::MCSymbol **)(v5 + 520);
    v9 = v154;
  }
  if (v7 != v6)
  {
    v1 = (unint64_t)v7;
    do
    {
      if (v9 >= HIDWORD(v154))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v9 + 1, 8);
        v9 = v154;
      }
      *((_QWORD *)v153 + v9) = v1;
      v9 = v154 + 1;
      LODWORD(v154) = v154 + 1;
      v7 = (const llvm::MCSymbol *)((char *)v7 + 120);
      v1 += 120;
    }
    while (v7 != v6);
  }
  v10 = 126 - 2 * __clz(v9);
  if (v9)
    v11 = v10;
  else
    v11 = 0;
  sub_1C60262F0((uint64_t *)v153, (uint64_t *)v153 + v9, v11, 1);
  v150 = v152;
  v151 = 0x2000000000;
  v148[0] = v149;
  v148[1] = (void *)0x4000000000;
  sub_1C63C8734(*(_QWORD *)(a1[1] + 280), (unint64_t)&v153, &v150, (uint64_t)v148);
  v145 = v147;
  v146 = 0x4000000000;
  v142 = v144;
  v143 = 0x400000000;
  (*(void (**)(uint64_t *, void **, void **, void **, void **))(*a1 + 128))(a1, &v145, &v142, &v153, v148);
  v12 = a1[1];
  v13 = *(_QWORD *)(v12 + 256);
  v14 = *(_DWORD *)(v13 + 412);
  v120 = *(unsigned __int8 *)(v13 + 188);
  if (v14 == 2
    || (v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 248) + 24))(*(_QWORD *)(v12 + 248)),
        !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 840) + 152) + 188)))
  {
    v16 = 3;
  }
  else
  {
    v16 = *(_DWORD *)(v15 + 960);
  }
  v137 = v16;
  v17 = *(_QWORD *)(v5 + 648) != *(_QWORD *)(v5 + 656) || *(_QWORD *)(v5 + 672) != *(_QWORD *)(v5 + 680);
  v136 = v17;
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[1] + 248) + 24))(*(_QWORD *)(a1[1] + 248));
  v19 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 96))(v18, *(_QWORD *)v5, *(_QWORD *)(a1[1] + 328), *(_QWORD *)(a1[1] + 248));
  if (v136)
    v20 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[1] + 248) + 24))(*(_QWORD *)(a1[1] + 248))
                    + 956);
  else
    v20 = 255;
  v135 = v20;
  if (v19)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1[1] + 272) + 168))(*(_QWORD *)(a1[1] + 272), v19, 0);
  sub_1C5FECEF4((_QWORD *)a1[1], 2, 0, 0);
  v21 = a1[1];
  v22 = *(_QWORD *)(v21 + 264);
  v23 = (BOOL *)*(unsigned int *)(*(_QWORD *)(v21 + 280) + 336);
  v128[0] = (uint64_t)"GCC_except_table";
  v129 = v23;
  LOWORD(v131) = 2051;
  Symbol = llvm::MCContext::getOrCreateSymbol(v22, (uint64_t)v128);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[1] + 272) + 192))(*(_QWORD *)(a1[1] + 272));
  v24 = a1[1];
  v25 = "action_table_base";
  if (v143 <= 1)
    v25 = "cst_end";
  v26 = 1;
  BYTE1(v131) = 1;
  if (*v25)
  {
    v128[0] = (uint64_t)v25;
    v26 = 3;
  }
  LOBYTE(v131) = v26;
  TempSymbol = llvm::MCContext::createTempSymbol(*(_QWORD *)(v24 + 264), (uint64_t)v128, 1);
  v133 = 0;
  v134 = TempSymbol;
  if (v136)
  {
    v28 = a1[1];
    v128[0] = (uint64_t)"ttbase";
    LOWORD(v131) = 259;
    v133 = llvm::MCContext::createTempSymbol(*(_QWORD *)(v28 + 264), (uint64_t)v128, 1);
  }
  v122 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[1] + 272) + 88))(*(_QWORD *)(a1[1] + 272));
  v128[0] = (uint64_t)a1;
  v128[1] = (uint64_t)&v135;
  v129 = &v136;
  v130 = &v133;
  v131 = &v137;
  v132 = &v134;
  if (v14 == 5 || v14 == 2)
  {
    v94 = a1[1];
    v95 = *(_QWORD *)(v94 + 272);
    v96 = sub_1C63BD1CC(v94, *(_QWORD *)(*(_QWORD *)(v94 + 280) + 328));
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v95 + 192))(v95, v96, 0);
    sub_1C63BDCF0(a1[1], 0xFFu, "@LPStart");
    sub_1C60261B8(v128);
    if ((_DWORD)v146)
    {
      v97 = 0;
      v98 = 32 * v146;
      v99 = (unsigned int *)((char *)v145 + 24);
      v5 = 2051;
      do
      {
        v100 = *(llvm::MCStreamer **)(a1[1] + 272);
        if (v122)
        {
          v2 = v2 & 0xFFFFFFFF00000000 | v97;
          v125[0] = ">> Call Site ";
          v126 = (const char *)v2;
          v127 = 2051;
          v138[0] = v125;
          v139 = " <<";
          v141 = 770;
          (*(void (**)(llvm::MCStreamer *, _QWORD *, uint64_t))(*(_QWORD *)v100 + 112))(v100, v138, 1);
          v101 = *(_QWORD *)(a1[1] + 272);
          v1 = v97 | v1 & 0xFFFFFFFF00000000;
          v138[0] = "  On exception at call site ";
          v139 = (const char *)v1;
          v141 = 2051;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v101 + 112))(v101, v138, 1);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1[1] + 272), v97, 0);
          v102 = *(_QWORD *)(a1[1] + 272);
          if (*v99)
          {
            v3 = v3 & 0xFFFFFFFF00000000 | (((*v99 - 1) >> 1) + 1);
            v138[0] = "  Action: ";
            v139 = (const char *)v3;
            v141 = 2051;
          }
          else
          {
            v138[0] = "  Action: cleanup";
            v141 = 259;
          }
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v102 + 112))(v102, v138, 1);
        }
        else
        {
          llvm::MCStreamer::emitULEB128IntValue(v100, v97, 0);
        }
        v103 = *v99;
        v99 += 8;
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1[1] + 272), v103, 0);
        ++v97;
        v98 -= 32;
      }
      while (v98);
    }
  }
  else if ((_DWORD)v143)
  {
    v29 = 0;
    v30 = (uint64_t *)v142;
    v118 = (uint64_t *)((char *)v142 + 48 * v143);
    v31 = 48 * v143;
    v32 = (const llvm::MCSymbol **)v142;
    do
    {
      if (*((_BYTE *)v32 + 40))
        v29 = v32;
      v32 += 6;
      v31 -= 48;
    }
    while (v31);
    v121 = 0;
    v115 = v5;
    do
    {
      if (v30[3])
        sub_1C5FECEF4((_QWORD *)a1[1], 2, 0, 0);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1[1] + 272) + 192))(*(_QWORD *)(a1[1] + 272), v30[2], 0);
      v33 = a1[1];
      if ((_DWORD)v143 == 1)
      {
        sub_1C63BDCF0(v33, 0xFFu, "@LPStart");
      }
      else
      {
        isPositionIndependent = llvm::TargetMachine::isPositionIndependent(*(llvm::TargetMachine **)(v33 + 248));
        v35 = a1[1];
        if (isPositionIndependent)
        {
          sub_1C63BDCF0(v35, 0x10u, "@LPStart");
          v36 = *(_QWORD *)(*(_QWORD *)(a1[1] + 272) + 8);
          v138[0] = "tmp";
          v141 = 259;
          v37 = llvm::MCContext::createTempSymbol(v36, (uint64_t)v138, 1);
          (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1[1] + 272) + 192))(*(_QWORD *)(a1[1] + 272), v37, 0);
          v3 = *(_QWORD *)(a1[1] + 272);
          v1 = (unint64_t)*v29;
          v5 = v36 + 192;
          v38 = sub_1C484358C(v36 + 192, 24, 3);
          v39 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 152) + 18) << 16;
          *(_BYTE *)v38 = 2;
          *(_DWORD *)(v38 + 1) = v39 | (*(unsigned __int8 *)(v38 + 4) << 24);
          *(_QWORD *)(v38 + 8) = 0;
          *(_QWORD *)(v38 + 16) = v1;
          v40 = sub_1C484358C(v36 + 192, 24, 3);
          v41 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 152) + 18) << 16;
          *(_BYTE *)v40 = 2;
          *(_DWORD *)(v40 + 1) = v41 | (*(unsigned __int8 *)(v40 + 4) << 24);
          *(_QWORD *)(v40 + 8) = 0;
          *(_QWORD *)(v40 + 16) = v37;
          v42 = sub_1C484358C(v36 + 192, 32, 3);
          *(_BYTE *)v42 = 0;
          *(_DWORD *)(v42 + 1) = (*(unsigned __int8 *)(v42 + 4) << 24) | 0x12;
          *(_QWORD *)(v42 + 8) = 0;
          *(_QWORD *)(v42 + 16) = v38;
          *(_QWORD *)(v42 + 24) = v40;
          (*(void (**)(unint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 504))(v3, v42, *(unsigned int *)(*(_QWORD *)(a1[1] + 256) + 8), 0);
        }
        else
        {
          sub_1C63BDCF0(v35, 0, "@LPStart");
          llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1[1] + 272), *v29, *(unsigned int *)(*(_QWORD *)(a1[1] + 256) + 8), 0);
        }
      }
      if (v120)
      {
        sub_1C60261B8(v128);
      }
      else
      {
        if (v143 >= 2)
          llvm::report_fatal_error((llvm *)"-fbasic-block-sections is not yet supported on platforms that do not have general LEB128 directive support.", (const char *)1);
        v69 = (char *)v142 + 48 * v143;
        v70 = *((_QWORD *)v69 - 3);
        v71 = *((_QWORD *)v69 - 2);
        if (v70 >= v71)
        {
          v72 = 0;
        }
        else
        {
          v72 = 0;
          do
          {
            v73 = *((unsigned int *)v145 + 8 * v70 + 6);
            v72 += 12;
            do
            {
              ++v72;
              v74 = v73 > 0x7F;
              v73 >>= 7;
            }
            while (v74);
            ++v70;
          }
          while (v70 != v71);
        }
        sub_1C63BDCF0(a1[1], v135, "@TType");
        if (v136)
        {
          v1 = v72 + 1;
          v75 = -(int)v72;
          v76 = v72;
          do
          {
            v5 = v75;
            ++v1;
            v75 = (v75 + 3);
            v74 = v76 > 0x7F;
            v76 >>= 7;
          }
          while (v74);
          if ((_DWORD)v151)
          {
            v77 = 0;
            v78 = (int *)v150;
            do
            {
              v79 = 0;
              v80 = *v78;
              v81 = v80 >> 63;
              v82 = 1;
              do
              {
                do
                {
                  v83 = v80;
                  v84 = v82;
                  v80 >>= 7;
                  ++v79;
                  ++v82;
                }
                while (v80 != v81);
              }
              while (((v83 ^ v81) & 0x40) != 0);
              v85 = v78[1];
              v86 = v85 >> 63;
              do
              {
                do
                {
                  v87 = v85;
                  v85 >>= 7;
                  ++v84;
                }
                while (v85 != v86);
              }
              while (((v87 ^ v86) & 0x40) != 0);
              v77 += v84;
              v78 += 3;
            }
            while (v78 != (int *)((char *)v150 + 12 * v151));
          }
          else
          {
            v77 = 0;
          }
          v88 = sub_1C63BDE28(a1[1], v135)
              * ((*(_QWORD *)(v115 + 656) - *(_QWORD *)(v115 + 648)) >> 3);
          v89 = v77 + v1 + v88;
          v90 = v5 - v77;
          v91 = -1;
          do
          {
            v90 += 3;
            ++v91;
            v74 = v89 > 0x7F;
            v89 >>= 7;
          }
          while (v74);
          v92 = (v90 & 3) + v77 + v88 + v1;
          v93 = -1;
          do
          {
            ++v93;
            v74 = v92 > 0x7F;
            v92 >>= 7;
          }
          while (v74);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1[1] + 272), (v90 & 3) + v88 + v1 + v77 - (v93 > v91), v93 + 1);
        }
        sub_1C63BDCF0(a1[1], v137, "Call site");
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1[1] + 272), v72, 0);
      }
      v43 = v30[3];
      if (v43 != v30[4])
      {
        v5 = 32 * v43;
        do
        {
          v44 = (char *)v145;
          v3 = *v30;
          if (*(_QWORD *)((char *)v145 + v5))
            v45 = *(_BYTE **)((char *)v145 + v5);
          else
            v45 = (_BYTE *)*v30;
          if (*(_QWORD *)((char *)v145 + v5 + 8))
            v46 = *(_BYTE **)((char *)v145 + v5 + 8);
          else
            v46 = (_BYTE *)v30[1];
          v47 = a1[1];
          if ((v122 & 1) != 0)
          {
            v48 = *(_QWORD *)(v47 + 272);
            v121 = (v121 + 1);
            v125[0] = ">> Call Site ";
            v119 = v119 & 0xFFFFFFFF00000000 | v121;
            v126 = (const char *)v119;
            v127 = 2051;
            v138[0] = v125;
            v139 = " <<";
            v141 = 770;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v48 + 112))(v48, v138, 1);
            sub_1C63BDF98(a1[1], (uint64_t)v45, v3, v137);
            if ((*v45 & 4) != 0)
            {
              v51 = (uint64_t *)*((_QWORD *)v45 - 1);
              v52 = *v51;
              v49 = v51 + 2;
              v50 = v52;
            }
            else
            {
              v49 = 0;
              v50 = 0;
            }
            v53 = *(_QWORD *)(a1[1] + 272);
            v123[0] = "  Call between ";
            v123[2] = v49;
            v123[3] = v50;
            v124 = 1283;
            v125[0] = v123;
            v126 = " and ";
            v127 = 770;
            if ((*v46 & 4) != 0)
            {
              v56 = (_QWORD *)*((_QWORD *)v46 - 1);
              v57 = *v56;
              v54 = (const char *)(v56 + 2);
              v55 = v57;
            }
            else
            {
              v54 = 0;
              v55 = 0;
            }
            v138[0] = v125;
            v139 = v54;
            v140 = v55;
            v141 = 1282;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v53 + 112))(v53, v138, 1);
          }
          else
          {
            sub_1C63BDF98(v47, (uint64_t)v45, *v30, v137);
          }
          sub_1C63BDF98(a1[1], (uint64_t)v46, (uint64_t)v45, v137);
          v1 = (unint64_t)&v44[v5];
          v58 = *(_QWORD *)&v44[v5 + 16];
          if (v58)
          {
            if (v122)
            {
              v60 = *(_BYTE **)(v58 + 88);
              if ((*v60 & 4) != 0)
              {
                v63 = (_QWORD *)*((_QWORD *)v60 - 1);
                v64 = *v63;
                v61 = (const char *)(v63 + 2);
                v62 = v64;
              }
              else
              {
                v61 = 0;
                v62 = 0;
              }
              v65 = *(_QWORD *)(a1[1] + 272);
              v138[0] = "    jumps to ";
              v139 = v61;
              v140 = v62;
              v141 = 1283;
              (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v65 + 112))(v65, v138, 1);
              v58 = *(_QWORD *)(v1 + 16);
            }
            sub_1C63BDF98(a1[1], *(_QWORD *)(v58 + 88), (uint64_t)*v29, v137);
          }
          else
          {
            if (v122)
            {
              v59 = *(_QWORD *)(a1[1] + 272);
              v138[0] = "    has no landing pad";
              v141 = 259;
              (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v59 + 112))(v59, v138, 1);
            }
            sub_1C63BE018(a1[1], 0, v137);
          }
          if (v122)
          {
            v66 = *(_DWORD *)&v44[v5 + 24];
            v67 = *(_QWORD *)(a1[1] + 272);
            if (v66)
            {
              v138[0] = "  On action: ";
              v116 = v116 & 0xFFFFFFFF00000000 | (((v66 - 1) >> 1) + 1);
              v139 = (const char *)v116;
              v68 = 2051;
            }
            else
            {
              v138[0] = "  On action: cleanup";
              v68 = 259;
            }
            v141 = v68;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v67 + 112))(v67, v138, 1);
          }
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1[1] + 272), *(unsigned int *)&v44[v5 + 24], 0);
          ++v43;
          v5 += 32;
        }
        while (v43 != v30[4]);
      }
      v30 += 6;
    }
    while (v30 != v118);
  }
  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1[1] + 272) + 192))(*(_QWORD *)(a1[1] + 272), v134, 0);
  if ((_DWORD)v151)
  {
    LODWORD(v104) = 0;
    v105 = 12 * v151;
    v106 = (unsigned int *)v150;
    while (1)
    {
      v107 = a1[1];
      if (v122)
        break;
      llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(v107 + 272), (int)*v106);
LABEL_132:
      llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a1[1] + 272), (int)v106[1]);
      v106 += 3;
      v105 -= 12;
      if (!v105)
        goto LABEL_135;
    }
    v108 = *(_QWORD *)(v107 + 272);
    v104 = (v104 + 1);
    v1 = v1 & 0xFFFFFFFF00000000 | v104;
    v125[0] = ">> Action Record ";
    v126 = (const char *)v1;
    v127 = 2307;
    v138[0] = v125;
    v139 = " <<";
    v141 = 770;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v108 + 112))(v108, v138, 1);
    v109 = *v106;
    if ((int)v109 < 1)
    {
      v110 = *(_QWORD *)(a1[1] + 272);
      if ((v109 & 0x80000000) == 0)
      {
        v138[0] = "  Cleanup";
        v141 = 259;
        goto LABEL_128;
      }
      v138[0] = "  Filter TypeInfo ";
      v121 = v121 & 0xFFFFFFFF00000000 | v109;
      v139 = (const char *)v121;
    }
    else
    {
      v110 = *(_QWORD *)(a1[1] + 272);
      v3 = v3 & 0xFFFFFFFF00000000 | v109;
      v138[0] = "  Catch TypeInfo ";
      v139 = (const char *)v3;
    }
    v141 = 2307;
LABEL_128:
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v110 + 112))(v110, v138, 1);
    llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a1[1] + 272), (int)*v106);
    v111 = v106[2];
    v112 = *(_QWORD *)(a1[1] + 272);
    if ((_DWORD)v111 == -1)
    {
      v138[0] = "  No further actions";
      v113 = 259;
    }
    else
    {
      v5 = v5 & 0xFFFFFFFF00000000 | (v111 + 1);
      v138[0] = "  Continue to action ";
      v139 = (const char *)v5;
      v113 = 2051;
    }
    v141 = v113;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v112 + 112))(v112, v138, 1);
    goto LABEL_132;
  }
LABEL_135:
  if (v136)
  {
    sub_1C5FECEF4((_QWORD *)a1[1], 2, 0, 0);
    (*(void (**)(uint64_t *, _QWORD, unint64_t))(*a1 + 136))(a1, v135, v133);
  }
  sub_1C5FECEF4((_QWORD *)a1[1], 2, 0, 0);
  if (v142 != v144)
    free(v142);
  if (v145 != v147)
    free(v145);
  if (v148[0] != v149)
    free(v148[0]);
  if (v150 != v152)
    free(v150);
  if (v153 != v155)
    free(v153);
  return Symbol;
}

uint64_t sub_1C60261B8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TempSymbol;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[4];
  __int16 v9;

  v2 = *a1;
  sub_1C63BDCF0(*(_QWORD *)(*a1 + 8), *(_DWORD *)a1[1], "@TType");
  if (*(_BYTE *)a1[2])
  {
    v3 = *(_QWORD *)(v2 + 8);
    v8[0] = "ttbaseref";
    v9 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(*(_QWORD *)(v3 + 264), (uint64_t)v8, 1);
    (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 272) + 840))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 272), *(_QWORD *)a1[3], TempSymbol);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 272) + 192))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 272), TempSymbol, 0);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v8[0] = "cst_begin";
  v9 = 259;
  v6 = llvm::MCContext::createTempSymbol(*(_QWORD *)(v5 + 264), (uint64_t)v8, 1);
  sub_1C63BDCF0(*(_QWORD *)(v2 + 8), *(_DWORD *)a1[4], "Call site");
  (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 272) + 840))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 272), *(_QWORD *)a1[5], v6);
  return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 272) + 192))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 272), v6, 0);
}

uint64_t *sub_1C60262F0(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  int *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  uint64_t *v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int *v59;
  uint64_t v60;
  int *v61;
  int v62;
  int v63;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  int v78;
  int v79;
  BOOL v80;
  uint64_t *v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int v88;
  int v89;
  BOOL v90;
  uint64_t *v91;
  uint64_t v92;
  int *v93;
  int v94;
  int v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  int v106;
  int v107;
  BOOL v108;
  uint64_t v109;
  int *v110;
  int v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  int v123;
  int v124;
  BOOL v125;
  uint64_t *v126;
  BOOL v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  int v136;
  int v137;
  BOOL v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  int v146;
  BOOL v147;
  int64_t v148;
  int64_t v149;
  int64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  uint64_t v157;
  int v158;
  int v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  int *v164;
  int v165;
  int v166;
  BOOL v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  int v176;
  int v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  int *v206;
  int v207;
  int v208;
  BOOL v209;
  int *v210;
  int v211;
  int v212;
  BOOL v213;
  uint64_t *v214;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  uint64_t v221;
  int v222;
  int v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  int *v229;
  uint64_t v230;
  int v231;
  int v232;
  BOOL v233;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v117 = *i;
        v119 = *(_QWORD *)(*i + 96);
        v118 = *(_QWORD *)(*i + 104);
        if (v119 == v118)
          return result;
        v120 = *(a2 - 1);
        v121 = *(int **)(v120 + 96);
        v122 = v119 + 4;
        while (v121 != *(int **)(v120 + 104))
        {
          v123 = *v121;
          v124 = *(_DWORD *)(v122 - 4);
          if (*v121 < v124)
            break;
          ++v121;
          v125 = v124 < v123 || v122 == v118;
          v122 += 4;
          if (v125)
            return result;
        }
        *i = v120;
        *(a2 - 1) = v117;
        return result;
      case 3:
        return sub_1C602707C(i, i + 1, a2 - 1);
      case 4:
        return sub_1C6027418(i, i + 1, i + 2, a2 - 1);
      case 5:
        return sub_1C6026EEC(i, i + 1, i + 2, i + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v126 = i + 1;
          v128 = i == a2 || v126 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v128)
            {
              v129 = i;
              do
              {
                v130 = v129;
                v129 = v126;
                v132 = *(_QWORD *)(*v130 + 96);
                v131 = *(_QWORD *)(*v130 + 104);
                if (v132 != v131)
                {
                  v133 = v130[1];
                  v134 = *(int **)(v133 + 96);
                  v135 = v132 + 4;
                  while (v134 != *(int **)(v133 + 104))
                  {
                    v136 = *v134;
                    v137 = *(_DWORD *)(v135 - 4);
                    if (*v134 < v137)
                      break;
                    ++v134;
                    v138 = v137 < v136 || v135 == v131;
                    v135 += 4;
                    if (v138)
                      goto LABEL_211;
                  }
                  v130[1] = *v130;
                  v139 = i;
                  if (v130 != i)
                  {
                    while (1)
                    {
                      v139 = v130;
                      v141 = *--v130;
                      v140 = v141;
                      v143 = *(_QWORD *)(v141 + 96);
                      v142 = *(_QWORD *)(v141 + 104);
                      if (v143 == v142)
                        break;
                      v144 = *(int **)(v133 + 96);
                      v145 = v143 + 4;
                      while (v144 != *(int **)(v133 + 104))
                      {
                        v146 = *v144;
                        result = (uint64_t *)*(unsigned int *)(v145 - 4);
                        if (*v144 < (int)result)
                          break;
                        ++v144;
                        v147 = (int)result < v146 || v145 == v142;
                        v145 += 4;
                        if (v147)
                          goto LABEL_210;
                      }
                      *v139 = v140;
                      if (v130 == i)
                      {
                        v139 = i;
                        break;
                      }
                    }
                  }
LABEL_210:
                  *v139 = v133;
                }
LABEL_211:
                v126 = v129 + 1;
              }
              while (v129 + 1 != a2);
            }
          }
          else if (!v128)
          {
            do
            {
              v216 = v7;
              v7 = v126;
              v218 = *(_QWORD *)(*v216 + 96);
              v217 = *(_QWORD *)(*v216 + 104);
              if (v218 != v217)
              {
                v219 = v216[1];
                v220 = *(int **)(v219 + 96);
                v221 = v218 + 4;
                while (v220 != *(int **)(v219 + 104))
                {
                  v222 = *v220;
                  v223 = *(_DWORD *)(v221 - 4);
                  if (*v220 < v223)
                    break;
                  ++v220;
                  v224 = v223 < v222 || v221 == v217;
                  v221 += 4;
                  if (v224)
                    goto LABEL_332;
                }
                *v7 = *v216;
                while (1)
                {
                  v225 = *(v216 - 1);
                  v227 = *(_QWORD *)(v225 + 96);
                  v226 = *(_QWORD *)(v225 + 104);
                  if (v227 == v226)
                    break;
                  v228 = v216--;
                  v229 = *(int **)(v219 + 96);
                  v230 = v227 + 4;
                  while (v229 != *(int **)(v219 + 104))
                  {
                    v231 = *v229;
                    v232 = *(_DWORD *)(v230 - 4);
                    if (*v229 < v232)
                      break;
                    ++v229;
                    v233 = v232 < v231 || v230 == v226;
                    v230 += 4;
                    if (v233)
                    {
                      v216 = v228;
                      goto LABEL_331;
                    }
                  }
                  *v228 = v225;
                }
LABEL_331:
                *v216 = v219;
              }
LABEL_332:
              v126 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (i != a2)
          {
            v148 = (unint64_t)(v11 - 2) >> 1;
            v149 = v148;
            do
            {
              v150 = v149;
              if (v148 >= v149)
              {
                v151 = (2 * v149) | 1;
                v152 = &i[v151];
                if (2 * v150 + 2 < v11)
                {
                  v153 = v152[1];
                  v154 = *(_QWORD *)(v153 + 96);
                  v155 = *(_QWORD *)(v153 + 104);
                  if (v154 != v155)
                  {
                    v156 = *(int **)(*v152 + 96);
                    v157 = v154 + 4;
                    while (v156 != *(int **)(*v152 + 104))
                    {
                      v158 = *v156;
                      v159 = *(_DWORD *)(v157 - 4);
                      if (*v156 < v159)
                        break;
                      ++v156;
                      v160 = v159 < v158 || v157 == v155;
                      v157 += 4;
                      if (v160)
                        goto LABEL_228;
                    }
                    ++v152;
                    v151 = 2 * v150 + 2;
                  }
                }
LABEL_228:
                v161 = *v152;
                v162 = i[v150];
                result = *(uint64_t **)(v162 + 96);
                v163 = *(uint64_t **)(v162 + 104);
                if (result == v163)
                {
LABEL_237:
                  i[v150] = v161;
                  if (v148 >= v151)
                  {
                    while (1)
                    {
                      v169 = 2 * v151;
                      v151 = (2 * v151) | 1;
                      v168 = &i[v151];
                      v170 = v169 + 2;
                      if (v170 < v11)
                      {
                        v171 = v168[1];
                        v172 = *(_QWORD *)(v171 + 96);
                        v173 = *(_QWORD *)(v171 + 104);
                        if (v172 != v173)
                        {
                          v174 = *(uint64_t **)(*v168 + 96);
                          result = *(uint64_t **)(*v168 + 104);
                          v175 = v172 + 4;
                          while (v174 != result)
                          {
                            v176 = *(_DWORD *)v174;
                            v177 = *(_DWORD *)(v175 - 4);
                            if (*(_DWORD *)v174 < v177)
                              break;
                            v174 = (uint64_t *)((char *)v174 + 4);
                            v178 = v177 < v176 || v175 == v173;
                            v175 += 4;
                            if (v178)
                              goto LABEL_254;
                          }
                          ++v168;
                          v151 = v170;
                        }
                      }
LABEL_254:
                      v179 = *v168;
                      v180 = *(_QWORD *)(v162 + 96);
                      v181 = *(_QWORD *)(v162 + 104);
                      if (v180 != v181)
                        break;
LABEL_263:
                      *v152 = v179;
                      v152 = v168;
                      if (v148 < v151)
                        goto LABEL_239;
                    }
                    result = *(uint64_t **)(v179 + 96);
                    v182 = v180 + 4;
                    while (result != *(uint64_t **)(v179 + 104))
                    {
                      v183 = *(_DWORD *)result;
                      v184 = *(_DWORD *)(v182 - 4);
                      if (*(_DWORD *)result < v184)
                        break;
                      result = (uint64_t *)((char *)result + 4);
                      v185 = v184 < v183 || v182 == v181;
                      v182 += 4;
                      if (v185)
                        goto LABEL_263;
                    }
                  }
                  v168 = v152;
LABEL_239:
                  *v168 = v162;
                }
                else
                {
                  v164 = *(int **)(v161 + 96);
                  result = (uint64_t *)((char *)result + 4);
                  while (v164 != *(int **)(v161 + 104))
                  {
                    v165 = *v164;
                    v166 = *((_DWORD *)result - 1);
                    if (*v164 < v166)
                      break;
                    ++v164;
                    v167 = v166 < v165 || result == v163;
                    result = (uint64_t *)((char *)result + 4);
                    if (v167)
                      goto LABEL_237;
                  }
                }
              }
              v149 = v150 - 1;
            }
            while (v150);
            do
            {
              v186 = 0;
              v187 = *i;
              v188 = i;
              do
              {
                v189 = v188;
                v188 += v186 + 1;
                v190 = 2 * v186;
                v186 = (2 * v186) | 1;
                v191 = v190 + 2;
                if (v191 < v11)
                {
                  v192 = v188[1];
                  v193 = *(_QWORD *)(v192 + 96);
                  v194 = *(_QWORD *)(v192 + 104);
                  if (v193 != v194)
                  {
                    result = *(uint64_t **)(*v188 + 96);
                    v195 = v193 + 4;
                    while (result != *(uint64_t **)(*v188 + 104))
                    {
                      v196 = *(_DWORD *)result;
                      v197 = *(_DWORD *)(v195 - 4);
                      if (*(_DWORD *)result < v197)
                        break;
                      result = (uint64_t *)((char *)result + 4);
                      v198 = v197 < v196 || v195 == v194;
                      v195 += 4;
                      if (v198)
                        goto LABEL_278;
                    }
                    ++v188;
                    v186 = v191;
                  }
                }
LABEL_278:
                *v189 = *v188;
              }
              while (v186 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              if (v188 == --a2)
              {
                *v188 = v187;
              }
              else
              {
                *v188 = *a2;
                *a2 = v187;
                v199 = (char *)v188 - (char *)i + 8;
                if (v199 >= 9)
                {
                  v200 = *v188;
                  result = *(uint64_t **)(*v188 + 96);
                  v201 = *(uint64_t **)(*v188 + 104);
                  if (result != v201)
                  {
                    v202 = ((unint64_t)v199 >> 3) - 2;
                    v203 = v202 >> 1;
                    v204 = &i[v202 >> 1];
                    v205 = *v204;
                    v206 = *(int **)(*v204 + 96);
                    result = (uint64_t *)((char *)result + 4);
                    while (v206 != *(int **)(*v204 + 104))
                    {
                      v207 = *v206;
                      v208 = *((_DWORD *)result - 1);
                      if (*v206 < v208)
                        break;
                      ++v206;
                      v209 = v208 < v207 || result == v201;
                      result = (uint64_t *)((char *)result + 4);
                      if (v209)
                        goto LABEL_305;
                    }
                    while (1)
                    {
                      *v188 = v205;
                      if (v202 < 2)
                        break;
                      v188 = v204;
                      result = *(uint64_t **)(v200 + 96);
                      v214 = *(uint64_t **)(v200 + 104);
                      if (result == v214)
                      {
LABEL_303:
                        v204 = v188;
                        break;
                      }
                      v202 = v203 - 1;
                      v203 = (v203 - 1) >> 1;
                      v204 = &i[v203];
                      v205 = *v204;
                      v210 = *(int **)(*v204 + 96);
                      result = (uint64_t *)((char *)result + 4);
                      while (v210 != *(int **)(*v204 + 104))
                      {
                        v211 = *v210;
                        v212 = *((_DWORD *)result - 1);
                        if (*v210 < v212)
                          break;
                        ++v210;
                        v213 = v212 < v211 || result == v214;
                        result = (uint64_t *)((char *)result + 4);
                        if (v213)
                          goto LABEL_303;
                      }
                    }
                    *v204 = v200;
                  }
                }
              }
LABEL_305:
              ;
            }
            while (v11-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &i[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = sub_1C602707C(&v7[(unint64_t)v11 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C602707C(v7, &v7[(unint64_t)v11 >> 1], a2 - 1);
          sub_1C602707C(v7 + 1, v13 - 1, a2 - 2);
          sub_1C602707C(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = sub_1C602707C(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) != 0)
        {
          v17 = *(int **)(v15 + 96);
          v16 = *(int **)(v15 + 104);
          goto LABEL_11;
        }
        v17 = *(int **)(v15 + 96);
        v16 = *(int **)(v15 + 104);
        if (v17 == v16)
        {
LABEL_42:
          v43 = *(_QWORD *)(*v8 + 96);
          v42 = *(_QWORD *)(*v8 + 104);
          if (v43 == v42)
          {
LABEL_51:
            for (i = v7 + 1; i < a2; ++i)
            {
              v50 = *(_QWORD *)(*i + 96);
              v49 = *(_QWORD *)(*i + 104);
              if (v50 != v49)
              {
                v51 = v50 + 4;
                v52 = *(int **)(v15 + 96);
                while (v52 != v16)
                {
                  v53 = *v52;
                  v54 = *(_DWORD *)(v51 - 4);
                  if (*v52 < v54)
                    break;
                  ++v52;
                  v55 = v54 < v53 || v51 == v49;
                  v51 += 4;
                  if (v55)
                    goto LABEL_62;
                }
                break;
              }
LABEL_62:
              ;
            }
          }
          else
          {
            v44 = v43 + 4;
            v45 = *(int **)(v15 + 96);
            while (v45 != v16)
            {
              v46 = *v45;
              v47 = *(_DWORD *)(v44 - 4);
              if (*v45 < v47)
                break;
              ++v45;
              v48 = v47 < v46 || v44 == v42;
              v44 += 4;
              if (v48)
                goto LABEL_51;
            }
            i = v7;
            do
            {
LABEL_109:
              v83 = i[1];
              ++i;
              v85 = *(_QWORD *)(v83 + 96);
              v84 = *(_QWORD *)(v83 + 104);
            }
            while (v85 == v84);
            v86 = v85 + 4;
            v87 = *(int **)(v15 + 96);
            while (v87 != v16)
            {
              v88 = *v87;
              v89 = *(_DWORD *)(v86 - 4);
              if (*v87 < v89)
                break;
              ++v87;
              v90 = v89 < v88 || v86 == v84;
              v86 += 4;
              if (v90)
                goto LABEL_109;
            }
          }
          if (i < a2)
            v91 = a2 - 1;
          else
            v91 = a2;
          if (v43 != v42 && i < a2)
          {
            v91 = a2 - 1;
            do
            {
              v92 = v43 + 4;
              v93 = *(int **)(v15 + 96);
              while (v93 != v16)
              {
                v94 = *v93;
                v95 = *(_DWORD *)(v92 - 4);
                if (*v93 < v95)
                  break;
                ++v93;
                v96 = v95 < v94 || v92 == v42;
                v92 += 4;
                if (v96)
                  goto LABEL_135;
              }
              v97 = *--v91;
              v43 = *(_QWORD *)(v97 + 96);
              v42 = *(_QWORD *)(v97 + 104);
            }
            while (v43 != v42);
          }
LABEL_135:
          if (i < v91)
          {
            v98 = *i;
            v99 = *v91;
            do
            {
              *i = v99;
              *v91 = v98;
              v100 = *(int **)(v15 + 104);
              do
              {
LABEL_138:
                v101 = i[1];
                ++i;
                v98 = v101;
                v103 = *(_QWORD *)(v101 + 96);
                v102 = *(_QWORD *)(v101 + 104);
              }
              while (v103 == v102);
              v104 = v103 + 4;
              v105 = *(int **)(v15 + 96);
              while (v105 != v100)
              {
                v106 = *v105;
                v107 = *(_DWORD *)(v104 - 4);
                if (*v105 < v107)
                  break;
                ++v105;
                v108 = v107 < v106 || v104 == v102;
                v104 += 4;
                if (v108)
                  goto LABEL_138;
              }
              while (1)
              {
                v113 = *--v91;
                v99 = v113;
                v115 = *(_QWORD *)(v113 + 96);
                v114 = *(_QWORD *)(v113 + 104);
                if (v115 == v114)
                  break;
                v109 = v115 + 4;
                v110 = *(int **)(v15 + 96);
                while (v110 != v100)
                {
                  v111 = *v110;
                  result = (uint64_t *)*(unsigned int *)(v109 - 4);
                  if (*v110 < (int)result)
                    break;
                  ++v110;
                  v112 = (int)result < v111 || v109 == v114;
                  v109 += 4;
                  if (v112)
                    goto LABEL_158;
                }
              }
LABEL_158:
              ;
            }
            while (i < v91);
          }
          v116 = i - 1;
          if (i - 1 != v7)
            *v7 = *v116;
          a4 = 0;
          *v116 = v15;
          continue;
        }
        v37 = 0;
        v38 = *(_QWORD *)(*(v7 - 1) + 96);
        while (v38 + v37 * 4 != *(_QWORD *)(*(v7 - 1) + 104))
        {
          v39 = *(_DWORD *)(v38 + v37 * 4);
          v40 = v17[v37];
          if (v39 < v40)
            break;
          ++v37;
          if (v40 < v39 || &v17[v37] == v16)
            goto LABEL_42;
        }
LABEL_11:
        v18 = v7 + 1;
        if (v17 != v16)
        {
          v19 = v17 + 1;
          v20 = v7;
LABEL_13:
          v21 = v20;
          v20 = v18;
          v22 = v21[1];
          v23 = *(int **)(v22 + 96);
          v24 = *(int **)(v22 + 104);
          v25 = v17 + 1;
          do
          {
            if (v23 == v24 || (v26 = *v23, v27 = *(v25 - 1), *v23 < v27))
            {
              v18 = v20 + 1;
              goto LABEL_13;
            }
            ++v23;
          }
          while (v27 >= v26 && v25++ != v16);
          v29 = a2;
          if (v21 != v7)
          {
LABEL_24:
            v30 = *--v29;
            v32 = *(int **)(v30 + 96);
            v31 = *(int **)(v30 + 104);
            v33 = v19;
            while (v32 != v31)
            {
              v34 = *v32;
              v35 = *(v33 - 1);
              if (*v32 < v35)
                break;
              ++v32;
              if (v35 < v34 || v33++ == v16)
                goto LABEL_24;
            }
            goto LABEL_78;
          }
          v18 = v20;
        }
        if (v18 >= a2)
        {
          v20 = v18;
          v29 = a2;
        }
        else
        {
          v29 = a2;
          while (1)
          {
            v57 = *--v29;
            v56 = v57;
            if (v17 != v16)
              break;
LABEL_75:
            if (v18 >= v29)
              goto LABEL_76;
          }
          v60 = v56 + 96;
          v59 = *(int **)(v56 + 96);
          v58 = *(int **)(v60 + 8);
          v61 = v17 + 1;
          while (v59 != v58)
          {
            v62 = *v59;
            v63 = *(v61 - 1);
            if (*v59 < v63)
              break;
            ++v59;
            if (v63 < v62 || v61++ == v16)
              goto LABEL_75;
          }
LABEL_76:
          v20 = v18;
        }
LABEL_78:
        i = v20;
        if (v20 < v29)
        {
          v65 = *v29;
          i = v20;
          v66 = v29;
          do
          {
            v67 = *i;
            *i++ = v65;
            *v66 = v67;
            v68 = *(_QWORD *)(v15 + 96);
            v69 = *(_QWORD *)(v15 + 104);
            if (v68 != v69)
            {
              while (1)
              {
                v70 = *(int **)(*i + 96);
                v71 = v68 + 4;
                while (v70 != *(int **)(*i + 104))
                {
                  v72 = *v70;
                  v73 = *(_DWORD *)(v71 - 4);
                  if (*v70 < v73)
                    break;
                  ++v70;
                  v74 = v73 < v72 || v71 == v69;
                  v71 += 4;
                  if (v74)
                    goto LABEL_91;
                }
                ++i;
              }
            }
            do
            {
LABEL_91:
              v75 = *--v66;
              v65 = v75;
            }
            while (v68 == v69);
            v76 = *(int **)(v65 + 96);
            v77 = v68 + 4;
            while (v76 != *(int **)(v65 + 104))
            {
              v78 = *v76;
              v79 = *(_DWORD *)(v77 - 4);
              if (*v76 < v79)
                break;
              ++v76;
              v80 = v79 < v78 || v77 == v69;
              v77 += 4;
              if (v80)
                goto LABEL_91;
            }
          }
          while (i < v66);
        }
        v81 = i - 1;
        if (i - 1 != v7)
          *v7 = *v81;
        *v81 = v15;
        if (v20 < v29)
        {
LABEL_107:
          result = (uint64_t *)sub_1C60262F0(v7, i - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v82 = sub_1C6027210(v7, i - 1);
        result = (uint64_t *)sub_1C6027210(i, a2);
        if (!(_DWORD)result)
        {
          if (v82)
            continue;
          goto LABEL_107;
        }
        a2 = i - 1;
        if (!v82)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C6026EEC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  int v41;
  BOOL v42;

  result = sub_1C6027418(a1, a2, a3, a4);
  v11 = *a4;
  v13 = *(_QWORD *)(*a4 + 96);
  v12 = *(_QWORD *)(*a4 + 104);
  if (v13 != v12)
  {
    v14 = *(int **)(*a5 + 96);
    v15 = v13 + 4;
    while (v14 != *(int **)(*a5 + 104))
    {
      v16 = *v14;
      v17 = *(_DWORD *)(v15 - 4);
      if (*v14 < v17)
        break;
      ++v14;
      v18 = v17 < v16 || v15 == v12;
      v15 += 4;
      if (v18)
        return result;
    }
    *a4 = *a5;
    *a5 = v11;
    v19 = *a3;
    v21 = *(_QWORD *)(*a3 + 96);
    v20 = *(_QWORD *)(*a3 + 104);
    if (v21 != v20)
    {
      v22 = *(int **)(*a4 + 96);
      v23 = v21 + 4;
      while (v22 != *(int **)(*a4 + 104))
      {
        v24 = *v22;
        v25 = *(_DWORD *)(v23 - 4);
        if (*v22 < v25)
          break;
        ++v22;
        v26 = v25 < v24 || v23 == v20;
        v23 += 4;
        if (v26)
          return result;
      }
      *a3 = *a4;
      *a4 = v19;
      v27 = *a2;
      v29 = *(_QWORD *)(*a2 + 96);
      v28 = *(_QWORD *)(*a2 + 104);
      if (v29 != v28)
      {
        v30 = *(int **)(*a3 + 96);
        v31 = v29 + 4;
        while (v30 != *(int **)(*a3 + 104))
        {
          v32 = *v30;
          v33 = *(_DWORD *)(v31 - 4);
          if (*v30 < v33)
            break;
          ++v30;
          v34 = v33 < v32 || v31 == v28;
          v31 += 4;
          if (v34)
            return result;
        }
        *a2 = *a3;
        *a3 = v27;
        v35 = *a1;
        v37 = *(_QWORD *)(*a1 + 96);
        v36 = *(_QWORD *)(*a1 + 104);
        if (v37 != v36)
        {
          v38 = *(int **)(*a2 + 96);
          v39 = v37 + 4;
          while (v38 != *(int **)(*a2 + 104))
          {
            v40 = *v38;
            v41 = *(_DWORD *)(v39 - 4);
            if (*v38 < v41)
              break;
            ++v38;
            v42 = v41 < v40 || v39 == v36;
            v39 += 4;
            if (v42)
              return result;
          }
          *a1 = *a2;
          *a2 = v35;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C602707C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;

  v3 = *a2;
  v4 = *result;
  v6 = *(_QWORD *)(*a2 + 96);
  v5 = *(_QWORD *)(*a2 + 104);
  v7 = *(_QWORD *)(*result + 96);
  v8 = *(_QWORD *)(*result + 104);
  if (v7 == v8)
  {
LABEL_10:
    if (v6 != v5)
    {
      v13 = *(int **)(*a3 + 96);
      v14 = v6 + 4;
      while (v13 != *(int **)(*a3 + 104))
      {
        v15 = *v13;
        v16 = *(_DWORD *)(v14 - 4);
        if (*v13 < v16)
          break;
        ++v13;
        v17 = v16 < v15 || v14 == v5;
        v14 += 4;
        if (v17)
          return result;
      }
      *a2 = *a3;
      *a3 = v3;
      v30 = *result;
      v32 = *(_QWORD *)(*result + 96);
      v31 = *(_QWORD *)(*result + 104);
      if (v32 != v31)
      {
        v33 = *(int **)(*a2 + 96);
        v34 = v32 + 4;
        while (v33 != *(int **)(*a2 + 104))
        {
          v35 = *v33;
          v36 = *(_DWORD *)(v34 - 4);
          if (*v33 < v36)
            break;
          ++v33;
          v37 = v36 < v35 || v34 == v31;
          v34 += 4;
          if (v37)
            return result;
        }
        *result = *a2;
        *a2 = v30;
      }
    }
  }
  else
  {
    v9 = 0;
    while (v6 + v9 != v5)
    {
      v10 = *(_DWORD *)(v6 + v9);
      v11 = *(_DWORD *)(v7 + v9);
      if (v10 < v11)
        break;
      v9 += 4;
      if (v11 < v10 || v9 + v7 == v8)
        goto LABEL_10;
    }
    if (v6 != v5)
    {
      v18 = *(int **)(*a3 + 96);
      v19 = v6 + 4;
      while (v18 != *(int **)(*a3 + 104))
      {
        v20 = *v18;
        v21 = *(_DWORD *)(v19 - 4);
        if (*v18 < v21)
          break;
        ++v18;
        v22 = v21 < v20 || v19 == v5;
        v19 += 4;
        if (v22)
          goto LABEL_29;
      }
      *result = *a3;
      goto LABEL_51;
    }
LABEL_29:
    *result = v3;
    *a2 = v4;
    v24 = *(_QWORD *)(v4 + 96);
    v23 = *(_QWORD *)(v4 + 104);
    if (v24 != v23)
    {
      v25 = *(int **)(*a3 + 96);
      v26 = v24 + 4;
      while (v25 != *(int **)(*a3 + 104))
      {
        v27 = *v25;
        v28 = *(_DWORD *)(v26 - 4);
        if (*v25 < v28)
          break;
        ++v25;
        v29 = v28 < v27 || v26 == v23;
        v26 += 4;
        if (v29)
          return result;
      }
      *a2 = *a3;
LABEL_51:
      *a3 = v4;
    }
  }
  return result;
}

BOOL sub_1C6027210(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v8 = *(_QWORD *)(*a1 + 96);
      v7 = *(_QWORD *)(*a1 + 104);
      if (v8 != v7)
      {
        v9 = *(a2 - 1);
        v10 = *(int **)(v9 + 96);
        v11 = v8 + 4;
        do
        {
          if (v10 == *(int **)(v9 + 104) || (v12 = *v10, v13 = *(_DWORD *)(v11 - 4), *v10 < v13))
          {
            *a1 = v9;
            *(a2 - 1) = v6;
            return 1;
          }
          ++v10;
          v14 = v13 < v12 || v11 == v7;
          v11 += 4;
        }
        while (!v14);
      }
      return result;
    case 3:
      sub_1C602707C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C6027418(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C6026EEC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v15 = a1 + 2;
      sub_1C602707C(a1, a1 + 1, a1 + 2);
      v16 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v19 = *(_QWORD *)(*v15 + 96);
    v18 = *(_QWORD *)(*v15 + 104);
    if (v19 != v18)
    {
      v20 = *v16;
      v21 = *(int **)(*v16 + 96);
      v22 = v19 + 4;
      while (v21 != *(int **)(*v16 + 104))
      {
        v23 = *v21;
        v24 = *(_DWORD *)(v22 - 4);
        if (*v21 < v24)
          break;
        ++v21;
        v25 = v24 < v23 || v22 == v18;
        v22 += 4;
        if (v25)
          goto LABEL_38;
      }
      *v16 = *v15;
      v26 = a1;
      if (v15 != a1)
      {
        while (1)
        {
          v26 = v15;
          v28 = *--v15;
          v27 = v28;
          v30 = *(_QWORD *)(v28 + 96);
          v29 = *(_QWORD *)(v28 + 104);
          if (v30 == v29)
            break;
          v31 = *(int **)(v20 + 96);
          v32 = v30 + 4;
          while (v31 != *(int **)(v20 + 104))
          {
            v33 = *v31;
            v34 = *(_DWORD *)(v32 - 4);
            if (*v31 < v34)
              break;
            ++v31;
            v35 = v34 < v33 || v32 == v29;
            v32 += 4;
            if (v35)
              goto LABEL_37;
          }
          *v26 = v27;
          if (v15 == a1)
          {
            v26 = a1;
            break;
          }
        }
      }
LABEL_37:
      *v26 = v20;
      if (++v17 == 8)
        return v16 + 1 == a2;
    }
LABEL_38:
    v15 = v16++;
    if (v16 == a2)
      return 1;
  }
}

uint64_t *sub_1C6027418(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;

  result = sub_1C602707C(a1, a2, a3);
  v9 = *a3;
  v11 = *(_QWORD *)(*a3 + 96);
  v10 = *(_QWORD *)(*a3 + 104);
  if (v11 != v10)
  {
    v12 = *(int **)(*a4 + 96);
    v13 = v11 + 4;
    while (v12 != *(int **)(*a4 + 104))
    {
      v14 = *v12;
      v15 = *(_DWORD *)(v13 - 4);
      if (*v12 < v15)
        break;
      ++v12;
      v16 = v15 < v14 || v13 == v10;
      v13 += 4;
      if (v16)
        return result;
    }
    *a3 = *a4;
    *a4 = v9;
    v17 = *a2;
    v19 = *(_QWORD *)(*a2 + 96);
    v18 = *(_QWORD *)(*a2 + 104);
    if (v19 != v18)
    {
      v20 = *(int **)(*a3 + 96);
      v21 = v19 + 4;
      while (v20 != *(int **)(*a3 + 104))
      {
        v22 = *v20;
        v23 = *(_DWORD *)(v21 - 4);
        if (*v20 < v23)
          break;
        ++v20;
        v24 = v23 < v22 || v21 == v18;
        v21 += 4;
        if (v24)
          return result;
      }
      *a2 = *a3;
      *a3 = v17;
      v25 = *a1;
      v27 = *(_QWORD *)(*a1 + 96);
      v26 = *(_QWORD *)(*a1 + 104);
      if (v27 != v26)
      {
        v28 = *(int **)(*a2 + 96);
        v29 = v27 + 4;
        while (v28 != *(int **)(*a2 + 104))
        {
          v30 = *v28;
          v31 = *(_DWORD *)(v29 - 4);
          if (*v28 < v31)
            break;
          ++v28;
          v32 = v31 < v30 || v29 == v26;
          v29 += 4;
          if (v32)
            return result;
        }
        *a1 = *a2;
        *a2 = v25;
      }
    }
  }
  return result;
}

_QWORD *sub_1C6027548@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E81ABBC8;
  result[1] = 0;
  *a1 = result;
  return result;
}

void sub_1C6027590()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60275A4(uint64_t i, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t ELFSection;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  const void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  __int16 v45;
  unsigned __int8 v46[32];
  __int16 v47;

  v7 = *(_QWORD *)(a4 + 272);
  v8 = *(unsigned int *)(*(_QWORD *)(a2 + 504) + 4);
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 248) + 24))(*(_QWORD *)(a4 + 248)) + 840);
  v44 = ".note.gc";
  v45 = 259;
  v47 = 257;
  ELFSection = llvm::MCContext::getELFSection(v9, (llvm::Twine *)&v44, 1, 0, 0, v46, 0, -1, 0);
  result = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 168))(v7, ELFSection, 0);
  v12 = *(_QWORD *)(a3 + 88);
  v43 = *(_QWORD *)(a3 + 96);
  if (v12 != v43)
  {
    v13 = (unint64_t)(v8 + 7) >> 3;
    if ((_DWORD)v13 == 4)
      v14 = 2;
    else
      v14 = 3;
    v15 = 5;
    if ((_DWORD)v13 != 4)
      v15 = 6;
    v40 = v15;
    v41 = v14;
    v42 = i;
    while (1)
    {
      v16 = *(_QWORD **)v12;
      v17 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      v18 = *(_QWORD *)(i + 8);
      v19 = *(_BYTE *)(v17 + 31);
      v20 = *(_QWORD *)(v17 + 16);
      v21 = v19 & 0x7F;
      if (v19 >= 0)
        v22 = v19 & 0x7F;
      else
        v22 = *(_QWORD *)(v17 + 16);
      v23 = *(_BYTE *)(v18 + 31);
      v24 = v23;
      v25 = v23 & 0x7F;
      if (v24 < 0)
        v25 = *(_QWORD *)(v18 + 16);
      if (v22 != v25)
        goto LABEL_31;
      v26 = (const void **)(v17 + 8);
      v29 = *(_QWORD *)(v18 + 8);
      v27 = v18 + 8;
      v28 = v29;
      v30 = (unsigned __int8 *)(v24 >= 0 ? v27 : v28);
      if ((v19 & 0x80) == 0)
        break;
      result = memcmp(*v26, v30, v20);
      if (!(_DWORD)result)
        goto LABEL_23;
LABEL_31:
      v12 += 8;
      if (v12 == v43)
        return result;
    }
    if ((v19 & 0x7F) != 0)
    {
      while (*(unsigned __int8 *)v26 == *v30)
      {
        v26 = (const void **)((char *)v26 + 1);
        ++v30;
        if (!--v21)
          goto LABEL_23;
      }
      goto LABEL_31;
    }
LABEL_23:
    sub_1C5FECEF4((_QWORD *)a4, v41, 0, 0);
    *(_QWORD *)v46 = "safe point count";
    v47 = 259;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v7 + 112))(v7, v46, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), (int)((uint64_t)(v16[7] - v16[6]) >> 4), 2);
    v31 = (uint64_t *)v16[6];
    v32 = (uint64_t *)v16[7];
    while (v31 != v32)
    {
      *(_QWORD *)v46 = "safe point address";
      v47 = 259;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v7 + 112))(v7, v46, 1);
      v33 = *v31;
      v31 += 2;
      sub_1C5FF4334(a4, v33, 0, 4, 0);
    }
    *(_QWORD *)v46 = "stack frame size (in words)";
    v47 = 259;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v7 + 112))(v7, v46, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), (int)(v16[2] / v13), 2);
    v34 = *(_QWORD *)(*v16 + 96);
    v35 = v34 >= v40;
    v36 = v34 - v40;
    if (v35)
      v37 = v36;
    else
      v37 = 0;
    *(_QWORD *)v46 = "stack arity";
    v47 = 259;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v7 + 112))(v7, v46, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), v37, 2);
    *(_QWORD *)v46 = "live root count";
    v47 = 259;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v7 + 112))(v7, v46, 1);
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), (int)((uint64_t)(v16[4] - v16[3]) >> 4), 2);
    v38 = v16[3];
    v39 = v16[4];
    for (i = v42; v38 != v39; v38 += 16)
    {
      *(_QWORD *)v46 = "stack index (offset / wordsize)";
      v47 = 259;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v7 + 112))(v7, v46, 1);
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), (int)(*(_DWORD *)(v38 + 4) / v13), 2);
    }
    goto LABEL_31;
  }
  return result;
}

void sub_1C602792C()
{
  _QWORD *v0;

  qword_1ED82A2F0 = (uint64_t)"erlang";
  *(_QWORD *)algn_1ED82A2F8 = 6;
  qword_1ED82A300 = (uint64_t)"erlang-compatible garbage collector";
  unk_1ED82A308 = 35;
  qword_1ED82A310 = (uint64_t)sub_1C6027548;
  qword_1ED82A320 = (uint64_t)&qword_1ED82A2F0;
  qword_1ED82A318 = 0;
  v0 = (_QWORD *)llvm::Registry<llvm::GCMetadataPrinter>::Tail;
  if (!llvm::Registry<llvm::GCMetadataPrinter>::Tail)
    v0 = &llvm::Registry<llvm::GCMetadataPrinter>::Head;
  *v0 = &qword_1ED82A318;
  llvm::Registry<llvm::GCMetadataPrinter>::Tail = (uint64_t)&qword_1ED82A318;
}

_QWORD *sub_1C6027990@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E81ABC00;
  result[1] = 0;
  *a1 = result;
  return result;
}

void sub_1C60279D8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C60279EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(a4 + 272);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 248) + 24))(*(_QWORD *)(a4 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 168))(v6, *(_QWORD *)(v7 + 24), 0);
  sub_1C60280B0(a2, a4, "code_begin");
  v8 = *(_QWORD *)(a4 + 272);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 248) + 24))(*(_QWORD *)(a4 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 168))(v8, *(_QWORD *)(v9 + 32), 0);
  sub_1C60280B0(a2, a4, "data_begin");
}

uint64_t sub_1C6027A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned __int8 **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  unsigned __int8 *v33;
  char *v34;
  uint64_t v35;
  uint64_t result;
  llvm::Value ***v37;
  llvm::Value ***v38;
  llvm::Value **v39;
  llvm::Value *v40;
  uint64_t v41;
  char v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  const void **v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::Value **v60;
  llvm::Value *v61;
  int v62;
  int v63;
  llvm::Value *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  const llvm::MCSymbol **v69;
  const llvm::MCSymbol **v70;
  llvm::Value **v71;
  uint64_t v72;
  llvm::Value *v73;
  llvm::Value *v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  char *Name;
  uint64_t v79;
  llvm::Value **v80;
  llvm::Value ***v81;
  uint64_t v82;
  const char *v83;
  __int16 v84;
  llvm::Value **v85;
  llvm::Value ***v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  uint64_t v90[4];
  __int16 v91;
  uint64_t v92[4];
  __int16 v93;
  uint64_t v94[4];
  __int16 v95;
  uint64_t v96[4];
  __int16 v97;
  uint64_t v98[4];
  __int16 v99;
  uint64_t v100[5];
  uint64_t v101[5];
  _QWORD v102[4];
  __int16 v103;
  unint64_t v104;

  v8 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 504) + 4) + 7) >> 3;
  v9 = *(_QWORD *)(a4 + 272);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 248) + 24))(*(_QWORD *)(a4 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 168))(v9, *(_QWORD *)(v10 + 24), 0);
  sub_1C60280B0(a2, a4, "code_end");
  v11 = *(_QWORD *)(a4 + 272);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 248) + 24))(*(_QWORD *)(a4 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 168))(v11, *(_QWORD *)(v12 + 32), 0);
  sub_1C60280B0(a2, a4, "data_end");
  (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), 0, v8);
  v13 = *(_QWORD *)(a4 + 272);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 248) + 24))(*(_QWORD *)(a4 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 168))(v13, *(_QWORD *)(v14 + 32), 0);
  sub_1C60280B0(a2, a4, "frametable");
  v15 = *(uint64_t **)(a3 + 88);
  v16 = *(uint64_t **)(a3 + 96);
  v82 = a1;
  if (v15 == v16)
  {
    v18 = 0;
    goto LABEL_23;
  }
  v17 = a3;
  v18 = 0;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_BYTE *)(v19 + 31);
  v21 = v20;
  v22 = (unsigned __int8 **)(v19 + 8);
  v23 = *(_QWORD *)(v19 + 16);
  v24 = v20 & 0x7F;
  if (v21 >= 0)
    v25 = v24;
  else
    v25 = v23;
  do
  {
    v26 = *v15;
    v27 = *(_QWORD *)(*v15 + 8);
    v28 = *(_BYTE *)(v27 + 31);
    v29 = *(_QWORD *)(v27 + 16);
    v30 = v28 & 0x7F;
    if (v28 >= 0)
      v31 = v28 & 0x7F;
    else
      v31 = *(_QWORD *)(v27 + 16);
    if (v31 == v25)
    {
      v32 = (const void **)(v27 + 8);
      if (v21 >= 0)
        v33 = (unsigned __int8 *)v22;
      else
        v33 = *v22;
      if (v28 < 0)
      {
        if (memcmp(*v32, v33, v29))
          goto LABEL_19;
LABEL_18:
        v18 += (*(_QWORD *)(v26 + 56) - *(_QWORD *)(v26 + 48)) >> 4;
        goto LABEL_19;
      }
      if ((v28 & 0x7F) == 0)
        goto LABEL_18;
      while (*(unsigned __int8 *)v32 == *v33)
      {
        v32 = (const void **)((char *)v32 + 1);
        ++v33;
        if (!--v30)
          goto LABEL_18;
      }
    }
LABEL_19:
    ++v15;
  }
  while (v15 != v16);
  a1 = v82;
  a3 = v17;
  if (v18 >= 0x10000)
  {
    v34 = " Too much descriptor for ocaml GC";
    goto LABEL_66;
  }
LABEL_23:
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), v18, 2);
  if ((_DWORD)v8 == 4)
    v35 = 2;
  else
    v35 = 3;
  result = sub_1C5FECEF4((_QWORD *)a4, v35, 0, 0);
  v38 = *(llvm::Value ****)(a3 + 88);
  v37 = *(llvm::Value ****)(a3 + 96);
  if (v38 != v37)
  {
    v81 = *(llvm::Value ****)(a3 + 96);
    while (1)
    {
      v39 = *v38;
      v40 = (*v38)[1];
      v41 = *(_QWORD *)(a1 + 8);
      v42 = *((_BYTE *)v40 + 31);
      v43 = *((_QWORD *)v40 + 2);
      v44 = v42 & 0x7F;
      if (v42 >= 0)
        v45 = v42 & 0x7F;
      else
        v45 = *((_QWORD *)v40 + 2);
      v46 = *(_BYTE *)(v41 + 31);
      v47 = v46;
      v48 = v46 & 0x7F;
      if (v47 < 0)
        v48 = *(_QWORD *)(v41 + 16);
      if (v45 != v48)
        goto LABEL_61;
      v49 = (const void **)((char *)v40 + 8);
      v52 = *(unsigned __int8 **)(v41 + 8);
      v50 = (unsigned __int8 *)(v41 + 8);
      v51 = v52;
      if (v47 >= 0)
        v53 = v50;
      else
        v53 = v51;
      if (v42 < 0)
      {
        result = memcmp(*v49, v53, v43);
        if ((_DWORD)result)
          goto LABEL_61;
      }
      else if ((v42 & 0x7F) != 0)
      {
        while (*(unsigned __int8 *)v49 == *v53)
        {
          v49 = (const void **)((char *)v49 + 1);
          ++v53;
          if (!--v44)
            goto LABEL_43;
        }
        goto LABEL_61;
      }
LABEL_43:
      v54 = (unint64_t)v39[2];
      v104 = v54;
      if (v54 >= 0x10000)
      {
        Name = llvm::Value::getName(*v39);
        v95 = 1283;
        v94[0] = (uint64_t)"Function '";
        v94[2] = (uint64_t)Name;
        v94[3] = v79;
        v92[0] = (uint64_t)"' is too large for the ocaml GC! Frame size ";
        v93 = 259;
        sub_1C6131AAC(v94, v92, (uint64_t)v96);
        v91 = 268;
        v90[0] = (uint64_t)&v104;
        sub_1C6131AAC(v96, v90, (uint64_t)v98);
        v88 = ">= 65536.\n(";
        v89 = 259;
        sub_1C6131AAC(v98, (uint64_t *)&v88, (uint64_t)v100);
        v80 = *v38;
        v87 = 266;
        v85 = v80;
        v86 = &v85;
        sub_1C6131AAC(v100, (uint64_t *)&v86, (uint64_t)v101);
        v83 = ")";
        v84 = 259;
        v77 = (uint64_t *)&v83;
        goto LABEL_68;
      }
      v55 = *v39;
      if ((*((_BYTE *)*v39 + 23) & 0x10) == 0)
      {
        v65 = 0;
        v66 = &byte_1C871356D;
        goto LABEL_53;
      }
      v56 = ***(_QWORD ***)v55;
      v57 = *(_QWORD *)(v56 + 152);
      v58 = *(unsigned int *)(v56 + 168);
      if (!(_DWORD)v58)
        goto LABEL_51;
      LODWORD(v59) = (v58 - 1) & ((v55 >> 4) ^ (v55 >> 9));
      v60 = (llvm::Value **)(v57 + 16 * v59);
      v61 = *v60;
      if (*v60 != v55)
        break;
LABEL_52:
      v64 = v60[1];
      v67 = *(_QWORD *)v64;
      v66 = (char *)v64 + 16;
      v65 = v67;
LABEL_53:
      v68 = *(_QWORD *)(a4 + 272);
      v102[0] = "live roots for ";
      v102[2] = v66;
      v102[3] = v65;
      v103 = 1283;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v68 + 112))(v68, v102, 1);
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 272) + 152))(*(_QWORD *)(a4 + 272));
      v70 = (const llvm::MCSymbol **)(*v38)[6];
      v69 = (const llvm::MCSymbol **)(*v38)[7];
      if (v70 != v69)
      {
        while (1)
        {
          v71 = *v38;
          v72 = (*v38)[4] - (*v38)[3];
          v90[0] = v72 >> 4;
          if ((unint64_t)v72 >= 0xFFFF1)
            break;
          llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a4 + 272), *v70, v8, 0);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), (int)v54, 2);
          (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272), (unint64_t)v72 >> 4, 2);
          v73 = (*v38)[3];
          v74 = (*v38)[4];
          while (v73 != v74)
          {
            if (*((int *)v73 + 1) >= 0x10000)
            {
              v34 = "GC root stack offset is outside of fixed stack frame and out of range for ocaml GC!";
LABEL_66:
              llvm::report_fatal_error((llvm *)v34, (const char *)1);
            }
            (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 272) + 512))(*(_QWORD *)(a4 + 272));
            v73 = (llvm::Value *)((char *)v73 + 16);
          }
          result = sub_1C5FECEF4((_QWORD *)a4, v35, 0, 0);
          v70 += 2;
          if (v70 == v69)
            goto LABEL_60;
        }
        v75 = llvm::Value::getName(*v71);
        v99 = 1283;
        v98[0] = (uint64_t)"Function '";
        v98[2] = (uint64_t)v75;
        v98[3] = v76;
        v96[0] = (uint64_t)"' is too large for the ocaml GC! Live root count ";
        v97 = 259;
        sub_1C6131AAC(v98, v96, (uint64_t)v100);
        v95 = 266;
        v94[0] = (uint64_t)v90;
        sub_1C6131AAC(v100, v94, (uint64_t)v101);
        v92[0] = (uint64_t)" >= 65536.";
        v93 = 259;
        v77 = v92;
LABEL_68:
        sub_1C6131AAC(v101, v77, (uint64_t)v102);
        llvm::report_fatal_error((uint64_t)v102, 1);
      }
LABEL_60:
      v37 = v81;
      a1 = v82;
LABEL_61:
      if (++v38 == v37)
        return result;
    }
    v62 = 1;
    while (v61 != (llvm::Value *)-4096)
    {
      v63 = v59 + v62++;
      v59 = v63 & (v58 - 1);
      v61 = *(llvm::Value **)(v57 + 16 * v59);
      if (v61 == v55)
      {
        v60 = (llvm::Value **)(v57 + 16 * v59);
        goto LABEL_52;
      }
    }
LABEL_51:
    v60 = (llvm::Value **)(v57 + 16 * v58);
    goto LABEL_52;
  }
  return result;
}

void sub_1C60280B0(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  int v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string::size_type v9;
  char v10;
  std::string *v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v20;
  std::string::value_type *v21;
  std::string::size_type v22;
  std::string::value_type v23;
  const std::string::value_type *p_p;
  std::string::size_type v25;
  std::string *v26;
  std::string::value_type v27;
  std::string *v28;
  uint64_t v29;
  unint64_t Symbol;
  _QWORD v31[4];
  __int16 v32;
  std::string v33;
  void *__p;
  __int128 v35;
  _QWORD v36[17];

  v36[16] = *MEMORY[0x1E0C80C00];
  memset(&v33, 0, sizeof(v33));
  std::string::append(&v33, "caml");
  v6 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
  size = v33.__r_.__value_.__l.__size_;
  v8 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    v9 = v33.__r_.__value_.__l.__size_;
  v10 = *(_BYTE *)(a1 + 191);
  if (v10 >= 0)
    v11 = (std::string *)(a1 + 168);
  else
    v11 = *(std::string **)(a1 + 168);
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(a1 + 176);
  v13 = (char *)v11 + v12;
  v14 = (char *)memchr(v11, 46, v12);
  if (v14)
    v15 = v14;
  else
    v15 = v13;
  v16 = v15 - (char *)v11;
  if (v6 < 0)
  {
    if (v15 == (char *)v11)
      goto LABEL_39;
    v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
    v18 = (v33.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    LOBYTE(v6) = *((_BYTE *)&v33.__r_.__value_.__s + 23);
    v8 = size;
  }
  else
  {
    if (v15 == (char *)v11)
      goto LABEL_39;
    v17 = &v33;
    v18 = 22;
  }
  if (v17 <= v11 && (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + v8 + 1) > v11)
  {
    sub_1C4E61270(&__p, (char *)v11, v15, v15 - (char *)v11);
    if (v35 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v35 >= 0)
      v25 = HIBYTE(v35) & 0x7F;
    else
      v25 = v35;
    std::string::append(&v33, p_p, v25);
    if (SHIBYTE(v35) < 0)
      operator delete(__p);
  }
  else
  {
    if (v18 - v8 < v16)
    {
      std::string::__grow_by(&v33, v18, v8 + v16 - v18, v8, v8, 0, 0);
      v33.__r_.__value_.__l.__size_ = v8;
      LOBYTE(v6) = *((_BYTE *)&v33.__r_.__value_.__s + 23);
    }
    v20 = &v33;
    if ((v6 & 0x80u) != 0)
      v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
    v21 = (char *)v20 + v8;
    v22 = v16;
    do
    {
      v23 = v11->__r_.__value_.__s.__data_[0];
      v11 = (std::string *)((char *)v11 + 1);
      *v21++ = v23;
      --v22;
    }
    while (v22);
    *v21 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      v33.__r_.__value_.__l.__size_ = v8 + v16;
    else
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = (v8 + v16) & 0x7F;
  }
LABEL_39:
  std::string::append(&v33, "__");
  std::string::append(&v33, a3);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v33;
  else
    v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
  v27 = __toupper(v26->__r_.__value_.__s.__data_[v9]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v33;
  else
    v28 = (std::string *)v33.__r_.__value_.__r.__words[0];
  v28->__r_.__value_.__s.__data_[v9] = v27;
  __p = v36;
  v35 = xmmword_1C85F20B0;
  v32 = 260;
  v31[0] = &v33;
  llvm::Mangler::getNameWithPrefix((uint64_t)&__p, (uint64_t)v31, a1 + 272);
  v29 = *(_QWORD *)(a2 + 264);
  v32 = 261;
  v31[0] = __p;
  v31[1] = v35;
  Symbol = llvm::MCContext::getOrCreateSymbol(v29, (uint64_t)v31);
  (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a2 + 272) + 304))(*(_QWORD *)(a2 + 272), Symbol, 9);
  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a2 + 272) + 192))(*(_QWORD *)(a2 + 272), Symbol, 0);
  if (__p != v36)
    free(__p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1C6028398()
{
  _QWORD *v0;

  qword_1ED82A328 = (uint64_t)"ocaml";
  unk_1ED82A330 = 5;
  qword_1ED82A338 = (uint64_t)"ocaml 3.10-compatible collector";
  unk_1ED82A340 = 31;
  qword_1ED82A348 = (uint64_t)sub_1C6027990;
  qword_1ED82A358 = (uint64_t)&qword_1ED82A328;
  qword_1ED82A350 = 0;
  v0 = (_QWORD *)llvm::Registry<llvm::GCMetadataPrinter>::Tail;
  if (!llvm::Registry<llvm::GCMetadataPrinter>::Tail)
    v0 = &llvm::Registry<llvm::GCMetadataPrinter>::Head;
  *v0 = &qword_1ED82A350;
  llvm::Registry<llvm::GCMetadataPrinter>::Tail = (uint64_t)&qword_1ED82A350;
}

void sub_1C60283FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t i;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  size_t v18;
  int *v19;
  size_t *v20;
  size_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  char *v30;
  int *v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  int v36[4];
  void *v37[2];
  _QWORD v38[20];

  v38[18] = *MEMORY[0x1E0C80C00];
  v33 = v35;
  v34 = 0x800000000;
  if (!a6 || *(_DWORD *)(a6 + 8) != 2 || (v11 = *(_QWORD *)(a6 - 8)) == 0)
  {
    v12 = 0;
    v13 = v35;
    goto LABEL_5;
  }
  do
  {
    for (i = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8));
          (*(_BYTE *)i & 0xFE) == 0x12;
    v15 = *(_QWORD *)(i - 8 * *(unsigned int *)(i + 8) + 24);
    if (v15)
    {
      v16 = *(_QWORD **)(v15 + 8);
      v17 = *v16;
      v31 = (int *)(v16 + 3);
      v32 = v17;
      if (v17)
        goto LABEL_20;
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    v18 = *(_QWORD *)(i - 8 * *(unsigned int *)(i + 8) + 16);
    if (v18)
    {
      v20 = *(size_t **)(v18 + 8);
      v21 = *v20;
      v19 = (int *)(v20 + 3);
      v18 = v21;
    }
    else
    {
      v19 = 0;
    }
    v31 = v19;
    v32 = v18;
LABEL_20:
    v22 = sub_1C630D4EC((uint64_t *)(a1 + 16), (const void **)&v31);
    v23 = v22[2];
    if (!v23)
    {
      v24 = v22;
      *(_OWORD *)v37 = xmmword_1C85F4BB0;
      v38[0] = 0;
      llvm::MD5::update((int *)v37, v31, v32);
      llvm::MD5::final((int *)v37, v36);
      v23 = *(_QWORD *)v36;
      v24[2] = *(_QWORD *)v36;
    }
    v25 = *(unsigned int *)(v11 + 8);
    v26 = *(_QWORD *)(v11 - 8 * v25);
    if (*(_BYTE *)v26 == 19)
      v27 = *(_DWORD *)(v26 + 24);
    else
      v27 = 0;
    v28 = (unsigned __int16)(v27 >> 3);
    v29 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v34 + 1, 16);
      v25 = (unint64_t)v33 + 16 * v34;
      *(_QWORD *)v25 = v23;
      *(_QWORD *)(v25 + 8) = v28;
      v29 = v34;
      LODWORD(v25) = *(_DWORD *)(v11 + 8);
    }
    else
    {
      v30 = (char *)v33 + 16 * v34;
      *(_QWORD *)v30 = v23;
      *((_DWORD *)v30 + 2) = v28;
    }
    v12 = (v29 + 1);
    LODWORD(v34) = v12;
    if ((_DWORD)v25 != 2)
      break;
    v11 = *(_QWORD *)(v11 - 8);
  }
  while (v11);
  v13 = v33;
LABEL_5:
  v37[0] = v38;
  v37[1] = (void *)0x800000000;
  sub_1C63C8F64((unsigned int *)v37, (uint64_t)&v13[16 * v12], (uint64_t)&v13[16 * v12], (uint64_t)v13, (uint64_t)v13);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, void **))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272)
                                                                              + 1192))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), a2, a3, a4, a5, v37);
  if (v37[0] != v38)
    free(v37[0]);
  if (v33 != v35)
    free(v33);
}

void sub_1C602868C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  llvm::Value *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  unint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE *Symbol;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t *__p;
  unint64_t *v51;
  uint64_t v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD v56[5];

  v56[4] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(a1[1] + 288) + 2064);
  v2 = *(_QWORD *)(v1 + 32);
  v52 = v1 + 24;
  if (v2 == v1 + 24)
  {
    v18 = 0;
    v4 = 0;
    v19 = 0;
    __p = 0;
    goto LABEL_70;
  }
  v51 = 0;
  v47 = 0;
  __p = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v53 = v56;
    if (v2)
      v6 = (llvm::Value *)(v2 - 56);
    else
      v6 = 0;
    v55 = 4;
    v56[0] = v6;
    v7 = 1;
    while (1)
    {
      v8 = *((_QWORD *)v53 + --v7);
      v54 = v7;
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        break;
LABEL_22:
      if (!v7)
      {
        v17 = 1;
        goto LABEL_25;
      }
    }
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 24);
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 4)
        goto LABEL_21;
      if (v11 >= 0x1C)
        break;
      if (v11 <= 0x14)
      {
        if (llvm::Value::stripPointerCasts(*(llvm::Value **)(v9 + 24)) != v6)
          goto LABEL_24;
        v16 = v54;
        if (v54 >= (unint64_t)v55)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v56, v54 + 1, 8);
          v16 = v54;
        }
        *((_QWORD *)v53 + v16) = v10;
        v7 = ++v54;
      }
LABEL_21:
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        goto LABEL_22;
    }
    v12 = v11 - 33;
    v13 = v12 > 0x33;
    v14 = (1 << v12) & 0x8000000000041;
    v15 = v13 || v14 == 0;
    if (!v15 && v10 - 32 == v9)
      goto LABEL_21;
LABEL_24:
    v17 = 0;
LABEL_25:
    if (v53 != v56)
      free(v53);
    if ((v17 & 1) != 0)
    {
      v18 = v5;
      v19 = v3;
      goto LABEL_49;
    }
    if ((*((_DWORD *)v6 + 8) & 0x300) != 0x100
      || (Symbol = (_BYTE *)llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), v6),
          (v30 = sub_1C63C907C((uint64_t)a1, Symbol)) == 0))
    {
LABEL_30:
      v19 = v3;
      goto LABEL_31;
    }
    v31 = v30;
    if (v3 < v47)
    {
      *v3++ = v30;
      goto LABEL_30;
    }
    v32 = v3 - __p;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      goto LABEL_87;
    if (((char *)v47 - (char *)__p) >> 2 > v33)
      v33 = ((char *)v47 - (char *)__p) >> 2;
    v34 = 0x1FFFFFFFFFFFFFFFLL;
    if ((unint64_t)((char *)v47 - (char *)__p) < 0x7FFFFFFFFFFFFFF8)
      v34 = v33;
    v48 = v34;
    if (!v34)
    {
      v35 = 0;
      goto LABEL_63;
    }
    if (v34 >> 61)
      goto LABEL_88;
    v35 = (char *)operator new(8 * v34);
LABEL_63:
    v36 = (uint64_t *)&v35[8 * v32];
    *v36 = v31;
    v37 = v36 + 1;
    while (v3 != __p)
    {
      v38 = *--v3;
      *--v36 = v38;
    }
    v47 = (uint64_t *)&v35[8 * v48];
    if (__p)
      operator delete(__p);
    __p = v36;
    v19 = v37;
LABEL_31:
    v20 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), v6);
    v21 = v20;
    if (v5 < v51)
    {
      *v5 = v20;
      v18 = v5 + 1;
      goto LABEL_49;
    }
    v22 = v19;
    v23 = v5 - v4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
LABEL_87:
      abort();
    if (((char *)v51 - (char *)v4) >> 2 > v24)
      v24 = ((char *)v51 - (char *)v4) >> 2;
    if ((unint64_t)((char *)v51 - (char *)v4) >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      if (!(v25 >> 61))
      {
        v26 = (char *)operator new(8 * v25);
        goto LABEL_43;
      }
LABEL_88:
      sub_1C4764EE4();
    }
    v26 = 0;
LABEL_43:
    v27 = (unint64_t *)&v26[8 * v23];
    *v27 = v21;
    v18 = v27 + 1;
    while (v5 != v4)
    {
      v28 = *--v5;
      *--v27 = v28;
    }
    v51 = (unint64_t *)&v26[8 * v25];
    if (v4)
      operator delete(v4);
    v4 = v27;
    v19 = v22;
LABEL_49:
    v2 = *(_QWORD *)(v2 + 8);
    v3 = v19;
    v5 = v18;
  }
  while (v2 != v52);
LABEL_70:
  if (v4 != v18 || __p != v19 || a1[2] != a1[3])
  {
    v39 = *(_QWORD *)(a1[1] + 272);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 168))(v39, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 264) + 168) + 704), 0);
    if (v4 != v18)
    {
      v40 = v4;
      do
      {
        v41 = *v40++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 360))(v39, v41);
      }
      while (v40 != v18);
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 168))(v39, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 264) + 168) + 712), 0);
    if (__p != v19)
    {
      v42 = __p;
      do
      {
        v43 = *v42++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 360))(v39, v43);
      }
      while (v42 != v19);
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 168))(v39, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 264) + 168) + 720), 0);
    v44 = (uint64_t *)a1[2];
    v45 = (uint64_t *)a1[3];
    while (v44 != v45)
    {
      v46 = *v44++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 360))(v39, v46);
    }
  }
  if (__p)
    operator delete(__p);
  if (v4)
    operator delete(v4);
}

char *sub_1C6028B78(char **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v9;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF8];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = a1[1];
  v11 = a1[2];
  if (a5 <= (v11 - v12) >> 3)
  {
    v18 = (v12 - v7) >> 3;
    if (v18 >= a5)
    {
      v19 = &a3[a5];
      v20 = a1[1];
    }
    else
    {
      v19 = &a3[v18];
      v20 = a1[1];
      if (v19 != a4)
      {
        v21 = v19;
        v22 = a1[1];
        do
        {
          v23 = *v21++;
          *(_QWORD *)v22 = v23;
          v22 += 8;
          v20 += 8;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if (v12 - v7 < 1)
        return v7;
    }
    v24 = &v7[8 * a5];
    v25 = &v20[-8 * a5];
    v26 = v20;
    if (v25 < v12)
    {
      v26 = v20;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while (v25 < v12);
    }
    a1[1] = v26;
    if (v20 != v24)
      memmove(&v20[-8 * ((v20 - v24) >> 3)], v7, v20 - v24);
    if (v19 != v9)
    {
      v28 = v7;
      do
      {
        v29 = *v9++;
        *(_QWORD *)v28 = v29;
        v28 += 8;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v13 = a5 + ((v12 - v5) >> 3);
  if (v13 >> 61)
    abort();
  v14 = v11 - v5;
  v15 = v14 >> 2;
  if (v14 >> 2 <= v13)
    v15 = v13;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 >> 61)
      sub_1C4764EE4();
    v17 = (char *)operator new(8 * v16);
  }
  else
  {
    v17 = 0;
  }
  v30 = &v17[8 * (v6 >> 3)];
  v31 = &v30[8 * a5];
  v32 = 8 * a5;
  v33 = v30;
  do
  {
    v34 = *v9++;
    *(_QWORD *)v33 = v34;
    v33 += 8;
    v32 -= 8;
  }
  while (v32);
  v35 = *a1;
  if (v7 == *a1)
  {
    v37 = v30;
  }
  else
  {
    v36 = v7;
    v37 = v30;
    do
    {
      v38 = *((_QWORD *)v36 - 1);
      v36 -= 8;
      *((_QWORD *)v37 - 1) = v38;
      v37 -= 8;
    }
    while (v36 != v35);
    v12 = a1[1];
  }
  v39 = &v17[8 * v16];
  if (v12 != v7)
    memmove(v31, v7, v12 - v7);
  v40 = *a1;
  *a1 = v37;
  a1[1] = &v31[v12 - v7];
  a1[2] = v39;
  if (v40)
    operator delete(v40);
  return v30;
}

uint64_t sub_1C6028D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t ***v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  llvm::Value *v13;
  int v14;
  llvm::Value **v15;
  llvm::Value *v16;
  const llvm::Value *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  v4 = *(_QWORD *)(a2 + 512);
  v5 = *(_QWORD *)(a2 + 520);
  v6 = *(unsigned __int8 *)(a2 + 636);
  v7 = *(uint64_t ****)a2;
  v8 = sub_1C63BCAA4(*(_QWORD *)(a1 + 8));
  v9 = 0;
  if (v8)
    v9 = *(_BYTE *)(a2 + 355) != 0;
  *(_BYTE *)(a1 + 26) = v9;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
  v11 = *(_DWORD *)(v10 + 948);
  if ((*((_WORD *)v7 + 9) & 8) != 0)
  {
    v14 = *((_DWORD *)v7 + 5);
    if ((v14 & 0x40000000) != 0)
      v15 = (llvm::Value **)*(v7 - 1);
    else
      v15 = (llvm::Value **)&v7[-4 * (v14 & 0x7FFFFFF)];
    v16 = llvm::Value::stripPointerCasts(*v15);
    if (*((_BYTE *)v16 + 16))
      v13 = 0;
    else
      v13 = v16;
    result = (uint64_t)llvm::classifyEHPersonality(v13, v17);
    if ((*((_WORD *)v7 + 9) & 8) != 0 && !(_DWORD)result)
    {
      llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v7 + 14));
      result = 0;
      v18 = 1;
      goto LABEL_19;
    }
  }
  else
  {
    result = 0;
    v13 = 0;
  }
  if (v4 != v5)
  {
    if (v11 == 255)
    {
      v18 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v18 = 0;
  if (v6 && v11 != 255)
LABEL_18:
    v18 = v13 != 0;
LABEL_19:
  *(_BYTE *)(a1 + 24) = v18;
  if (*(_DWORD *)(v10 + 952) == 255)
    v18 = 0;
  *(_BYTE *)(a1 + 25) = v18;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(v19 + 256);
  if (*(_DWORD *)(v20 + 412) == 4)
  {
    v21 = *(_DWORD *)(v20 + 420);
    if (v21 != 6 && v21 != 0)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, *(_QWORD *)(a2 + 328), *(_QWORD *)(v19 + 328));
  }
  if (!v6 && (_DWORD)result == 7)
  {
    v23 = *(uint64_t ****)a2;
    if ((*(_BYTE *)(*(_QWORD *)a2 + 23) & 0x10) == 0)
    {
      v36 = 0;
      v33 = &byte_1C871356D;
LABEL_46:
      result = sub_1C63C9364(a1, *(unsigned int *)(*(_QWORD *)(a2 + 96) + 680), (uint64_t)v33, v36);
      goto LABEL_29;
    }
    v24 = ***v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v23)
        goto LABEL_39;
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_39;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
LABEL_39:
    v32 = v28[1];
    v35 = (uint64_t)*v32;
    v33 = (char *)(v32 + 2);
    v34 = v35;
    if (v35)
    {
      v37 = *v33;
      if (v37 == 1)
        v36 = v34 - 1;
      else
        v36 = v34;
      if (v37 == 1)
        v33 = (char *)v28[1] + 17;
    }
    else
    {
      v36 = 0;
    }
    goto LABEL_46;
  }
LABEL_29:
  *(_BYTE *)(a1 + 25) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1C6028FF4(uint64_t a1, uint64_t ****a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  uint64_t ***v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t ParentFrameOffsetSymbol;
  uint64_t v25;
  unint64_t v26;
  unint64_t TempSymbol;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  int v43;
  uint64_t ****v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v4 + 264);
  v5 = *(_QWORD *)(v4 + 272);
  v7 = (unint64_t)a2[12];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  if (!*(_BYTE *)(a1 + 28))
  {
    v9 = *a2;
    if ((*((_BYTE *)*a2 + 23) & 0x10) == 0)
    {
      v22 = 0;
      v19 = &byte_1C871356D;
LABEL_17:
      ParentFrameOffsetSymbol = llvm::MCContext::getOrCreateParentFrameOffsetSymbol(v6, (uint64_t)v19, v22);
      v25 = *(int *)(v7 + 692);
      v26 = sub_1C484358C(v6 + 192, 24, 3);
      *(_BYTE *)v26 = 1;
      *(_DWORD *)(v26 + 1) = *(unsigned __int8 *)(v26 + 4) << 24;
      *(_QWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v26 + 16) = v25;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 272)
                                                                         + 280))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272), ParentFrameOffsetSymbol, v26);
      goto LABEL_18;
    }
    v10 = ***v9;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = (uint64_t ****)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v9)
        goto LABEL_10;
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_10;
        }
      }
    }
    v14 = (uint64_t ****)(v11 + 16 * v12);
LABEL_10:
    v18 = v14[1];
    v21 = (uint64_t)*v18;
    v19 = (char *)(v18 + 2);
    v20 = v21;
    if (v21)
    {
      v23 = *v19;
      if (v23 == 1)
        v22 = v20 - 1;
      else
        v22 = v20;
      if (v23 == 1)
        v19 = (char *)v14[1] + 17;
    }
    else
    {
      v22 = 0;
    }
    goto LABEL_17;
  }
LABEL_18:
  v46 = a2;
  *(_QWORD *)&v52 = "lsda_begin";
  LOWORD(v54) = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v6, (uint64_t)&v52, 1);
  *(_QWORD *)&v52 = "lsda_end";
  LOWORD(v54) = 259;
  v28 = a1;
  v29 = llvm::MCContext::createTempSymbol(v6, (uint64_t)&v52, 1);
  v30 = sub_1C63C9EA8(a1, v29, TempSymbol);
  v31 = v6 + 192;
  v32 = sub_1C484358C(v31, 24, 3);
  *(_BYTE *)v32 = 1;
  *(_DWORD *)(v32 + 1) = *(unsigned __int8 *)(v32 + 4) << 24;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 16;
  v33 = sub_1C484358C(v31, 32, 3);
  *(_BYTE *)v33 = 0;
  *(_DWORD *)(v33 + 1) = (*(unsigned __int8 *)(v33 + 4) << 24) | 2;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = v30;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)&v52 = "Number of call sites";
  LOWORD(v54) = 259;
  if (v8)
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v52, 1);
  (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v33, 4, 0);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, TempSymbol, 0);
  v34 = (uint64_t)v46[41];
  v35 = *(uint64_t *****)(v34 + 8);
  v36 = v28;
  v37 = v29;
  if (v35 != v46 + 40)
  {
    while (!*((_BYTE *)v35 + 189))
    {
      v35 = (uint64_t ****)v35[1];
      if (v35 == v46 + 40)
      {
        v35 = v46 + 40;
        break;
      }
    }
  }
  sub_1C602AEBC((uint64_t)&v52, v7, v34, v35, -1);
  v47 = v52;
  v48 = v53;
  v49 = v54;
  v50 = v55;
  v38 = v57;
  v39 = v58;
  v51 = v56;
  v40 = v59;
  if ((_QWORD)v53 != v58 || (_QWORD)v49 != v59 || *((_QWORD *)&v47 + 1) != v57)
  {
    v42 = 0;
    v43 = -1;
    do
    {
      if (v43 != -1)
        sub_1C63CA080(v36, v7, v42, *((uint64_t *)&v49 + 1), v43);
      v42 = v50;
      v43 = DWORD2(v50);
      sub_1C602AF90((uint64_t *)&v47);
    }
    while ((_QWORD)v48 != v39 || (_QWORD)v49 != v40 || *((_QWORD *)&v47 + 1) != v38);
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, v37, 0);
}

void sub_1C60293A0(uint64_t a1, uint64_t a2)
{
  uint64_t ***v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t ***v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t LSDASymbol;
  uint64_t v23;
  unint64_t Symbol;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t j;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t k;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v109;
  unint64_t v110;
  _QWORD v111[4];
  __int16 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD v132[10];

  v132[8] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t ****)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 272);
  v110 = *(_QWORD *)(a2 + 96);
  if ((*(_BYTE *)(*(_QWORD *)a2 + 23) & 0x10) == 0)
  {
    v18 = 0;
    v16 = &byte_1C871356D;
    goto LABEL_11;
  }
  v6 = ***v3;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if ((_DWORD)v8)
  {
    LODWORD(v9) = (v8 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    v10 = (uint64_t ****)(v7 + 16 * v9);
    v11 = *v10;
    if (*v10 == v3)
      goto LABEL_9;
    v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(uint64_t ****)(v7 + 16 * v9);
      if (v11 == v3)
      {
        v10 = (uint64_t ****)(v7 + 16 * v9);
        goto LABEL_9;
      }
    }
  }
  v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_9:
  v14 = v10[1];
  v17 = (uint64_t)*v14;
  v16 = (char *)(v14 + 2);
  v15 = v17;
  if (!v17)
  {
    v18 = 0;
LABEL_11:
    v106 = (uint64_t)v16;
    goto LABEL_21;
  }
  v19 = *v16;
  v20 = v19 == 1;
  if (v19 == 1)
    v21 = (uint64_t)v10[1] + 17;
  else
    v21 = (uint64_t)v16;
  v106 = v21;
  if (v20)
    v16 = (char *)v10[1] + 17;
  if (v20)
    v18 = v15 - 1;
  else
    v18 = v15;
LABEL_21:
  v130 = (char *)v132;
  v131 = 0x400000000;
  v105 = v18;
  if (*(_BYTE *)(a1 + 24))
  {
    v23 = *(_QWORD *)(v4 + 264);
    LOWORD(v121) = 1283;
    *(_QWORD *)&v119 = "$cppxdata$";
    *(_QWORD *)&v120 = v16;
    *((_QWORD *)&v120 + 1) = v18;
    Symbol = llvm::MCContext::getOrCreateSymbol(v23, (uint64_t)&v119);
    LSDASymbol = Symbol;
    v25 = a2 + 320;
    v26 = *(_QWORD *)(a2 + 328);
    if (v26 != a2 + 320)
    {
      v103 = Symbol;
      v104 = v16;
      do
      {
        v27 = v26;
        while (1)
        {
          v26 = *(_QWORD *)(v26 + 8);
          if (v26 == v25)
            break;
          if (*(_BYTE *)(v26 + 189))
            goto LABEL_30;
        }
        v26 = a2 + 320;
LABEL_30:
        if (!*(_BYTE *)(v27 + 190))
        {
          if (v27 == *(_QWORD *)(a2 + 328))
          {
            v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 520);
            v29 = -1;
          }
          else
          {
            v30 = *(_QWORD *)(v27 + 16);
            v31 = v30 + 40;
            for (i = *(_QWORD *)(v30 + 48); i != v31; i = *(_QWORD *)(i + 8))
            {
              v33 = i - 24;
              if (i)
                v34 = i - 24;
              else
                v34 = 0;
              if (*(_BYTE *)(v34 + 16) != 83)
                goto LABEL_43;
            }
            v33 = 0;
LABEL_43:
            *(_QWORD *)&v119 = v33;
            *(_QWORD *)&v114 = 0;
            v35 = sub_1C61252B8((uint64_t *)(v110 + 24), &v119, &v114);
            v36 = v114;
            if (!v35)
              v36 = *(_QWORD *)(v110 + 24) + 16 * *(unsigned int *)(v110 + 40);
            v29 = *(_DWORD *)(v36 + 8);
            v28 = sub_1C602AD1C(v27);
          }
          v37 = sub_1C63C9D2C(a1, v28);
          v38 = v131;
          if (v131 >= (unint64_t)HIDWORD(v131))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, (uint64_t)v132, v131 + 1, 16);
            v38 = v131;
          }
          v39 = (unint64_t *)&v130[16 * v38];
          *v39 = v37;
          v39[1] = v29;
          LODWORD(v131) = v131 + 1;
          sub_1C602AEBC((uint64_t)&v119, v110, v27, (_QWORD *)v26, v29);
          v114 = v119;
          v115 = v120;
          v116 = v121;
          v117 = v122;
          v40 = v124;
          v41 = v125;
          v118 = v123;
          v42 = v126;
          while ((_QWORD)v115 != v41 || (_QWORD)v116 != v42 || *((_QWORD *)&v114 + 1) != v40)
          {
            if ((_QWORD)v117)
              v43 = v117;
            else
              v43 = *((_QWORD *)&v116 + 1);
            if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 29))
            {
              v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
              v45 = sub_1C484358C(v44 + 192, 24, 3);
              v46 = v45;
              if (*(_BYTE *)(*(_QWORD *)(v44 + 152) + 18))
                v47 = 65651;
              else
                v47 = 115;
              *(_BYTE *)v45 = 2;
              *(_DWORD *)(v45 + 1) = v47 | (*(unsigned __int8 *)(v45 + 4) << 24);
              *(_QWORD *)(v45 + 8) = 0;
              *(_QWORD *)(v45 + 16) = v43;
            }
            else
            {
              v46 = sub_1C63C9E04(a1, v43);
            }
            v48 = DWORD2(v117);
            v49 = v131;
            if (v131 >= (unint64_t)HIDWORD(v131))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, (uint64_t)v132, v131 + 1, 16);
              v49 = v131;
            }
            v50 = (unint64_t *)&v130[16 * v49];
            *v50 = v46;
            v50[1] = v48;
            LODWORD(v131) = v131 + 1;
            sub_1C602AF90((uint64_t *)&v114);
          }
        }
      }
      while (v26 != v25);
      v16 = v104;
      v18 = v105;
      LSDASymbol = v103;
    }
  }
  else
  {
    LSDASymbol = llvm::MCContext::getOrCreateLSDASymbol(*(_QWORD *)(v4 + 264), v106, v18);
  }
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 256);
  if (*(_DWORD *)(v51 + 412) != 4 || ((v52 = *(_DWORD *)(v51 + 420)) != 0 ? (v53 = v52 == 6) : (v53 = 1), v53))
    v102 = 0;
  else
    v102 = sub_1C63C9FCC(a1, *(unsigned int *)(v110 + 672), v110);
  if (*(_DWORD *)(v110 + 104))
  {
    v55 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
    LOWORD(v121) = 1283;
    *(_QWORD *)&v119 = "$stateUnwindMap$";
    *(_QWORD *)&v120 = v16;
    *((_QWORD *)&v120 + 1) = v18;
    v54 = llvm::MCContext::getOrCreateSymbol(v55, (uint64_t)&v119);
  }
  else
  {
    v54 = 0;
  }
  if (*(_DWORD *)(v110 + 184))
  {
    v57 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
    LOWORD(v121) = 1283;
    *(_QWORD *)&v119 = "$tryMap$";
    *(_QWORD *)&v120 = v16;
    *((_QWORD *)&v120 + 1) = v18;
    v56 = llvm::MCContext::getOrCreateSymbol(v57, (uint64_t)&v119);
  }
  else
  {
    v56 = 0;
  }
  if ((_DWORD)v131)
  {
    v59 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
    LOWORD(v121) = 1283;
    *(_QWORD *)&v119 = "$ip2state$";
    *(_QWORD *)&v120 = v16;
    *((_QWORD *)&v120 + 1) = v18;
    v58 = llvm::MCContext::getOrCreateSymbol(v59, (uint64_t)&v119);
  }
  else
  {
    v58 = 0;
  }
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 632))(v5, 4, 0, 1, 0);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, LSDASymbol, 0);
  *(_QWORD *)&v119 = "MagicNumber";
  LOWORD(v121) = 259;
  if (v60)
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 512))(v5, 429065506, 4);
  *(_QWORD *)&v119 = "MaxState";
  LOWORD(v121) = 259;
  if (v60)
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *(unsigned int *)(v110 + 104), 4);
  *(_QWORD *)&v119 = "UnwindMap";
  LOWORD(v121) = 259;
  if (v60)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
    v61 = sub_1C63C9D2C(a1, v54);
    (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v61, 4, 0);
    *(_QWORD *)&v119 = "NumTryBlocks";
    LOWORD(v121) = 259;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
  }
  else
  {
    v62 = sub_1C63C9D2C(a1, v54);
    (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v62, 4, 0);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *(unsigned int *)(v110 + 184), 4);
  *(_QWORD *)&v119 = "TryBlockMap";
  LOWORD(v121) = 259;
  if (v60)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
    v63 = sub_1C63C9D2C(a1, v56);
    (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v63, 4, 0);
    *(_QWORD *)&v119 = "IPMapEntries";
    LOWORD(v121) = 259;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
  }
  else
  {
    v64 = sub_1C63C9D2C(a1, v56);
    (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v64, 4, 0);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, v131, 4);
  *(_QWORD *)&v119 = "IPToStateXData";
  LOWORD(v121) = 259;
  if (v60)
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
  v65 = sub_1C63C9D2C(a1, v58);
  (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v65, 4, 0);
  v66 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 256);
  if (*(_DWORD *)(v66 + 412) == 4)
  {
    v67 = *(_DWORD *)(v66 + 420);
    if (v67)
    {
      if (v67 != 6)
      {
        *(_QWORD *)&v119 = "UnwindHelp";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, v102, 4);
      }
    }
  }
  *(_QWORD *)&v119 = "ESTypeList";
  LOWORD(v121) = 259;
  if (v60)
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
  v107 = v58;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, 0, 4);
  *(_QWORD *)&v119 = "EHFlags";
  LOWORD(v121) = 259;
  if (v60)
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 512))(v5, 1, 4);
  if (v54)
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, v54, 0);
    v68 = *(unsigned int *)(v110 + 104);
    if ((_DWORD)v68)
    {
      v69 = 16 * v68;
      v70 = (_QWORD *)(*(_QWORD *)(v110 + 96) + 8);
      do
      {
        v71 = sub_1C602AD1C(*v70 & ((uint64_t)(*v70 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)&v119 = "ToState";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *((int *)v70 - 2), 4);
        *(_QWORD *)&v119 = "Action";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        v72 = sub_1C63C9D2C(a1, v71);
        (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v72, 4, 0);
        v70 += 2;
        v69 -= 16;
      }
      while (v69);
    }
  }
  if (v56)
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, v56, 0);
    v127 = &v129;
    v128 = 0x100000000;
    v113 = 0;
    v73 = *(unsigned int *)(v110 + 184);
    if ((_DWORD)v73)
    {
      for (j = 0; j != v73; v113 = j)
      {
        v75 = *(_QWORD *)(v110 + 176);
        v76 = v75 + (j << 6);
        v78 = *(_DWORD *)(v76 + 24);
        v77 = (unsigned int *)(v76 + 24);
        if (v78)
        {
          v80 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
          v111[0] = "$handlerMap$";
          v111[2] = &v113;
          v112 = 2563;
          *(_QWORD *)&v114 = v111;
          *(_QWORD *)&v115 = "$";
          LOWORD(v116) = 770;
          *(_QWORD *)&v119 = &v114;
          *(_QWORD *)&v120 = v106;
          *((_QWORD *)&v120 + 1) = v105;
          LOWORD(v121) = 1282;
          v79 = llvm::MCContext::getOrCreateSymbol(v80, (uint64_t)&v119);
        }
        else
        {
          v79 = 0;
        }
        v81 = v128;
        if (v128 >= (unint64_t)HIDWORD(v128))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)&v129, v128 + 1, 8);
          v81 = v128;
        }
        v127[v81] = v79;
        LODWORD(v128) = v128 + 1;
        *(_QWORD *)&v119 = "TryLow";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *(int *)(v75 + (j << 6)), 4);
        *(_QWORD *)&v119 = "TryHigh";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        v82 = v75 + (j << 6);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *(int *)(v82 + 4), 4);
        *(_QWORD *)&v119 = "CatchHigh";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *(int *)(v82 + 8), 4);
        *(_QWORD *)&v119 = "NumCatches";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *v77, 4);
        *(_QWORD *)&v119 = "HandlerArray";
        LOWORD(v121) = 259;
        if (v60)
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        v83 = sub_1C63C9D2C(a1, v79);
        (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v83, 4, 0);
        j = v113 + 1;
      }
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v84 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
      v109 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 288))(v84, a2);
    }
    else
    {
      v109 = 0;
    }
    v85 = *(unsigned int *)(v110 + 184);
    if ((_DWORD)v85)
    {
      for (k = 0; k != v85; ++k)
      {
        v87 = v127[k];
        if (v87)
        {
          v88 = *(_QWORD *)(v110 + 176);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, v87, 0);
          v89 = v88 + (k << 6);
          v90 = *(unsigned int *)(v89 + 24);
          if ((_DWORD)v90)
          {
            v91 = 32 * v90;
            v92 = *(_QWORD *)(v89 + 16) + 16;
            do
            {
              v93 = *(unsigned int *)(v92 - 8);
              if ((_DWORD)v93 == 0x7FFFFFFF)
                v94 = 0;
              else
                v94 = (int)sub_1C63C9FCC(a1, v93, v110);
              v95 = sub_1C484358C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264) + 192, 24, 3);
              *(_BYTE *)v95 = 1;
              *(_DWORD *)(v95 + 1) = *(unsigned __int8 *)(v95 + 4) << 24;
              *(_QWORD *)(v95 + 8) = 0;
              *(_QWORD *)(v95 + 16) = v94;
              v96 = sub_1C602AD1C(*(_QWORD *)(v92 + 8) & ((uint64_t)(*(_QWORD *)(v92 + 8) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)&v119 = "Adjectives";
              LOWORD(v121) = 259;
              if (v60)
                (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *(int *)(v92 - 16), 4);
              *(_QWORD *)&v119 = "Type";
              LOWORD(v121) = 259;
              if (v60)
              {
                (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
                v97 = sub_1C63C9D9C(a1, *(const llvm::GlobalValue **)v92);
                (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v97, 4, 0);
                *(_QWORD *)&v119 = "CatchObjOffset";
                LOWORD(v121) = 259;
                (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
                (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v95, 4, 0);
                *(_QWORD *)&v119 = "Handler";
                LOWORD(v121) = 259;
                (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
              }
              else
              {
                v98 = sub_1C63C9D9C(a1, *(const llvm::GlobalValue **)v92);
                (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v98, 4, 0);
                (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v95, 4, 0);
              }
              v99 = sub_1C63C9D2C(a1, v96);
              (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v99, 4, 0);
              if (*(_BYTE *)(a1 + 24))
              {
                *(_QWORD *)&v119 = "ParentFrameOffset";
                LOWORD(v121) = 259;
                if (v60)
                  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 512))(v5, v109, 4);
              }
              v92 += 32;
              v91 -= 32;
            }
            while (v91);
          }
        }
      }
    }
    if (v127 != &v129)
      free(v127);
  }
  if (v107)
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, v107, 0);
    if ((_DWORD)v131)
    {
      v100 = v130;
      v101 = 16 * v131;
      do
      {
        *(_QWORD *)&v119 = "IP";
        LOWORD(v121) = 259;
        if (v60)
        {
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, *v100, 4, 0);
          *(_QWORD *)&v119 = "ToState";
          LOWORD(v121) = 259;
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v119, 1);
        }
        else
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, *v100, 4, 0);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, *((int *)v100 + 2), 4);
        v100 += 2;
        v101 -= 16;
      }
      while (v101);
    }
  }
  if (v130 != (char *)v132)
    free(v130);
}

void sub_1C602A3EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int j;
  int v20;
  int v21;
  int k;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  BOOL v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD v57[2];
  int v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[2];
  int v74;
  void *v75[2];
  _BYTE v76[16];
  void *v77;
  uint64_t v78;
  _BYTE v79[64];
  void *v80;
  uint64_t v81;
  _QWORD v82[27];

  v82[24] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 8);
  v54 = v3[34];
  v4 = *(_QWORD *)(a2 + 96);
  v51 = v3[65];
  v50 = v3[56];
  v80 = v82;
  v81 = 0x800000000;
  v5 = *(unsigned int *)(v4 + 568);
  v73[0] = 0;
  v73[1] = 0;
  v74 = 0;
  if ((int)v5 >= 1)
  {
    v6 = 0;
    for (i = 0; i != v5; ++i)
    {
      *(_QWORD *)&v65 = 0;
      *(_QWORD *)&v65 = *(_QWORD *)(*(_QWORD *)(v4 + 560) + v6) & 0xFFFFFFFFFFFFFFF8;
      *((_DWORD *)sub_1C6128C08(v73, &v65) + 2) = i;
      v6 += 24;
    }
  }
  v8 = a2 + 320;
  *(_QWORD *)&v65 = *(_QWORD *)(a2 + 328);
  *((_DWORD *)sub_1C6128C08(v73, &v65) + 2) = -1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 512))(v54, 0xFFFFFFFFLL, 4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v54 + 512))(v54, (int)v5, 4);
  v77 = v79;
  v78 = 0x400000000;
  v53 = operator new[]();
  v75[0] = v76;
  v75[1] = (void *)0x400000000;
  sub_1C4893E04((char *)v75, (int)v5, v5);
  v9 = *(_QWORD *)(a2 + 328);
  while (v9 != v8)
  {
    v10 = v9;
    *(_QWORD *)&v65 = v9;
    v11 = *((_DWORD *)sub_1C6128C08(v73, &v65) + 2);
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v8)
        break;
      if (*(_BYTE *)(v9 + 189))
      {
        v12 = sub_1C602AD1C(v9);
        goto LABEL_10;
      }
    }
    v9 = v8;
    v12 = v50;
LABEL_10:
    v13 = sub_1C63C9EA8(a1, v12, v51);
    (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v54 + 504))(v54, v13, 4, 0);
    if (v11 != -1)
      *(_QWORD *)(v53 + 8 * v11) = v12;
    sub_1C602AEBC((uint64_t)&v65, v4, v10, (_QWORD *)v9, -1);
    v60 = v65;
    v61 = v66;
    v62 = v67;
    v63 = v68;
    v14 = v71;
    v55 = v70;
    v64 = v69;
    v15 = v72;
    if ((_QWORD)v66 != v71 || (_QWORD)v62 != v72 || *((_QWORD *)&v60 + 1) != v70)
    {
      v16 = 0;
      v17 = 0xFFFFFFFFLL;
      do
      {
        if ((_DWORD)v17 == -1)
        {
          v18 = 0;
        }
        else
        {
          v18 = 0;
          for (j = v17; j != -1; j = *(_DWORD *)(*(_QWORD *)(v4 + 560) + 24 * j + 16))
            ++v18;
        }
        v20 = DWORD2(v63);
        if (DWORD2(v63) == -1)
        {
          v21 = 0;
        }
        else
        {
          v21 = 0;
          for (k = DWORD2(v63); k != -1; k = *(_DWORD *)(*(_QWORD *)(v4 + 560) + 24 * k + 16))
            ++v21;
        }
        if (v18 >= v21)
        {
          v23 = DWORD2(v63);
          LODWORD(v24) = v17;
          if (v21 < v18)
          {
            LODWORD(v24) = v17;
            do
            {
              LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(v4 + 560) + 24 * (int)v24 + 16);
              --v18;
            }
            while (v21 < v18);
            v23 = DWORD2(v63);
          }
        }
        else
        {
          LODWORD(v23) = DWORD2(v63);
          do
          {
            v23 = *(unsigned int *)(*(_QWORD *)(v4 + 560) + 24 * (int)v23 + 16);
            --v21;
          }
          while (v18 < v21);
          LODWORD(v24) = v17;
        }
        if ((_DWORD)v24 == (_DWORD)v23)
        {
          v24 = v23;
        }
        else
        {
          v25 = *(_QWORD *)(v4 + 560);
          do
          {
            v24 = *(unsigned int *)(v25 + 24 * (int)v24 + 16);
            LODWORD(v23) = *(_DWORD *)(v25 + 24 * (int)v23 + 16);
          }
          while ((_DWORD)v24 != (_DWORD)v23);
        }
        if ((_DWORD)v17 == (_DWORD)v24)
        {
          v24 = v17;
        }
        else
        {
          v26 = v81;
          do
          {
            v57[0] = v16;
            v57[1] = *((_QWORD *)&v62 + 1);
            v58 = v17;
            v59 = v11;
            v27 = (char *)v80;
            if (v26 >= HIDWORD(v81))
            {
              v32 = v26 + 1;
              v33 = (char *)v80 + 24 * v26 > (char *)v57;
              if (v80 <= v57 && v33)
              {
                v49 = (char *)v57 - (_BYTE *)v80;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v32, 24);
                v27 = (char *)v80;
                v28 = (char *)v80 + v49;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v32, 24);
                v28 = (char *)v57;
                v27 = (char *)v80;
              }
            }
            else
            {
              v28 = (char *)v57;
            }
            v29 = &v27[24 * v81];
            v30 = *(_OWORD *)v28;
            *((_QWORD *)v29 + 2) = *((_QWORD *)v28 + 2);
            *(_OWORD *)v29 = v30;
            v26 = v81 + 1;
            LODWORD(v81) = v81 + 1;
            LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v4 + 560) + 24 * (int)v17 + 16);
            v31 = (char *)v77 + 16 * v78;
            if (*((_DWORD *)v31 - 2) == (_DWORD)v17)
            {
              v16 = *((_QWORD *)v31 - 2);
              LODWORD(v78) = v78 - 1;
            }
          }
          while ((_DWORD)v17 != (_DWORD)v24);
          v20 = DWORD2(v63);
        }
        if (v20 == (_DWORD)v24)
        {
          v17 = v24;
        }
        else
        {
          v34 = v75[0];
          v35 = *(_QWORD *)(v4 + 560);
          do
          {
            if (v11 < v34[v20])
              v34[v20] = v11;
            v20 = *(_DWORD *)(v35 + 24 * v20 + 16);
          }
          while (v20 != (_DWORD)v24);
          sub_1C621E53C((uint64_t)&v77, v16, v24);
          v16 = v63;
          v17 = DWORD2(v63);
        }
        sub_1C602AF90((uint64_t *)&v60);
      }
      while ((_QWORD)v61 != v14 || (_QWORD)v62 != v15 || *((_QWORD *)&v60 + 1) != v55);
    }
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v54 + 512))(v54, v81, 4);
  if ((_DWORD)v81)
  {
    v36 = (uint64_t *)v80;
    v56 = (uint64_t *)((char *)v80 + 24 * v81);
    do
    {
      v37 = sub_1C63C9F3C(a1, *v36, v51);
      v38 = sub_1C63C9F3C(a1, v36[1], v51);
      v39 = *((_DWORD *)v36 + 4);
      v40 = *(_QWORD *)(v4 + 560);
      v41 = v40 + 24 * v39;
      v42 = sub_1C602AD1C(*(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8);
      v43 = sub_1C63C9EA8(a1, v42, v51);
      v44 = sub_1C63C9EA8(a1, *(_QWORD *)(v53 + 8 * *((int *)v36 + 4)), v51);
      v45 = *(_DWORD *)(v41 + 20) - 1;
      if (v45 > 2)
        v46 = 0;
      else
        v46 = dword_1C8677848[v45];
      if (*((_DWORD *)v36 + 5) == *((_DWORD *)v75[0] + *((int *)v36 + 4)))
        v47 = v46;
      else
        v47 = v46 | 8;
      v48 = v54;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 512))(v54, v47, 4);
      (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v48 + 504))(v48, v37, 4, 0);
      (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v48 + 504))(v48, v38, 4, 0);
      (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v48 + 504))(v48, v43, 4, 0);
      (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v48 + 504))(v48, v44, 4, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v48 + 512))(v48, *(unsigned int *)(v40 + 24 * v39 + 8), 4);
      v36 += 3;
    }
    while (v36 != v56);
  }
  if (v75[0] != v76)
    free(v75[0]);
  MEMORY[0x1CAA32F9C](v53, 0x20C8093837F09);
  if (v77 != v79)
    free(v77);
  MEMORY[0x1CAA32FB4](v73[0], 8);
  if (v80 != v82)
    free(v80);
}

uint64_t sub_1C602AB34(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  int v15;
  llvm::Value **v16;
  llvm::Value *v17;

  v3 = a3;
  v4 = result;
  *(_QWORD *)(result + 32) = a2;
  v5 = **(_QWORD **)(*(_QWORD *)(result + 8) + 280);
  if (!a3)
  {
    v3 = sub_1C602AD1C(a2);
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 272) + 320))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 272), v3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 272) + 328))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 272), 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 272) + 336))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 272), 32);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 272) + 344))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 272));
    v7 = *(_QWORD **)(v4 + 8);
    if (*(unsigned __int8 *)(v7[35] + 352) <= *(unsigned __int8 *)(a2 + 176))
      v8 = *(unsigned __int8 *)(a2 + 176);
    else
      v8 = *(unsigned __int8 *)(v7[35] + 352);
    sub_1C5FECEF4(v7, v8, (llvm::GlobalVariable *)v5, 0);
    result = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 272)
                                                                         + 192))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 272), v3, 0);
  }
  if (*(_BYTE *)(v4 + 26) || *(_BYTE *)(v4 + 24))
  {
    v9 = *(_QWORD *)(v4 + 8);
    v10 = *(_QWORD *)(v9 + 272);
    v11 = *(unsigned int *)(v10 + 120);
    v12 = (_DWORD)v11 ? *(_QWORD *)(*(_QWORD *)(v10 + 112) + 32 * v11 - 32) : 0;
    *(_QWORD *)(v4 + 40) = v12;
    result = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v9 + 272) + 1032))(*(_QWORD *)(v9 + 272), v3, 0);
    if (*(_BYTE *)(v4 + 24))
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 248));
      if ((*(_WORD *)(v5 + 18) & 8) != 0)
      {
        v15 = *(_DWORD *)(v5 + 20);
        if ((v15 & 0x40000000) != 0)
          v16 = *(llvm::Value ***)(v5 - 8);
        else
          v16 = (llvm::Value **)(v5 - 32 * (v15 & 0x7FFFFFF));
        v17 = llvm::Value::stripPointerCasts(*v16);
        if (*((_BYTE *)v17 + 16))
          v14 = 0;
        else
          v14 = v17;
      }
      else
      {
        v14 = 0;
      }
      result = (*(uint64_t (**)(uint64_t, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v13 + 128))(v13, v14, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 248), *(_QWORD *)(v4 + 16));
      if (!*(_BYTE *)(*(_QWORD *)(v4 + 32) + 190))
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8)
                                                                                                  + 272)
                                                                                    + 1128))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 272), result, 1, 1, 0);
    }
  }
  return result;
}

unint64_t sub_1C602AD1C(unint64_t result)
{
  uint64_t ****v1;
  uint64_t ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  int v10;
  uint64_t ***v11;
  char *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;

  if (!result)
    return result;
  v1 = *(uint64_t *****)(result + 32);
  v2 = *v1;
  if ((*((_BYTE *)*v1 + 23) & 0x10) != 0)
  {
    v3 = ***v2;
    v4 = *(_QWORD *)(v3 + 152);
    v5 = *(unsigned int *)(v3 + 168);
    if ((_DWORD)v5)
    {
      LODWORD(v6) = (v5 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v7 = (uint64_t ****)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == v2)
      {
LABEL_10:
        v11 = v7[1];
        v14 = *v11;
        v12 = (char *)(v11 + 2);
        v13 = v14;
        if (v14 && *v12 == 1)
        {
          v13 = (uint64_t **)((char *)v13 - 1);
          v12 = (char *)v7[1] + 17;
        }
        goto LABEL_13;
      }
      v9 = 1;
      while (v8 != (uint64_t ***)-4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & (v5 - 1);
        v8 = *(uint64_t ****)(v4 + 16 * v6);
        if (v8 == v2)
        {
          v7 = (uint64_t ****)(v4 + 16 * v6);
          goto LABEL_10;
        }
      }
    }
    v7 = (uint64_t ****)(v4 + 16 * v5);
    goto LABEL_10;
  }
  v13 = 0;
  v12 = &byte_1C871356D;
LABEL_13:
  v15 = (uint64_t)v1[3];
  v16 = "dtor";
  v21 = 1283;
  v17 = *(unsigned __int8 *)(result + 190);
  if (!*(_BYTE *)(result + 190))
    v16 = "catch";
  v20[0] = "?";
  v20[2] = v16;
  v18 = 4;
  if (!v17)
    v18 = 5;
  v20[3] = v18;
  v22[0] = v20;
  v22[2] = "$";
  v23 = 770;
  v19 = *(unsigned int *)(result + 24);
  v24[0] = v22;
  v24[2] = v19;
  v25 = 2306;
  v26[0] = v24;
  v26[2] = "@?0?";
  v27 = 770;
  v28[0] = v26;
  v28[2] = v12;
  v28[3] = v13;
  v29 = 1282;
  v30[0] = v28;
  v30[1] = v13;
  v30[2] = "@4HA";
  v31 = 770;
  return llvm::MCContext::getOrCreateSymbol(v15, (uint64_t)v30);
}

double sub_1C602AEBC(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v9 = *(_QWORD *)(a3 + 56);
  v10 = *a4 + 48;
  v21 = a2;
  *(_QWORD *)&v22 = a3;
  *((_QWORD *)&v22 + 1) = a4;
  LOBYTE(v25) = 0;
  HIDWORD(v25) = a5;
  *(_QWORD *)&v24 = 0;
  v23 = v9;
  DWORD2(v24) = a5;
  sub_1C602AF90((uint64_t *)&v21);
  v16 = a2;
  *(_QWORD *)&v17 = a4;
  *((_QWORD *)&v17 + 1) = a4;
  LOBYTE(v20) = 0;
  HIDWORD(v20) = a5;
  *(_QWORD *)&v19 = 0;
  v18 = (unint64_t)v10;
  DWORD2(v19) = a5;
  sub_1C602AF90((uint64_t *)&v16);
  v11 = v24;
  *(_OWORD *)(a1 + 32) = v23;
  *(_OWORD *)(a1 + 48) = v11;
  v12 = v22;
  *(_OWORD *)a1 = v21;
  *(_OWORD *)(a1 + 16) = v12;
  v13 = v16;
  *(_OWORD *)(a1 + 88) = v17;
  result = *(double *)&v18;
  v15 = v19;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 72) = v13;
  return result;
}

uint64_t *sub_1C602AF90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;

  v2 = a1[2];
  v3 = a1[3];
  if (v2 == v3)
  {
LABEL_36:
    v15 = *((_DWORD *)a1 + 17);
    if (*((_DWORD *)a1 + 14) == v15)
    {
      a1[1] = 0;
    }
    else
    {
      a1[5] = a1[1];
      a1[6] = 0;
      *((_DWORD *)a1 + 14) = v15;
    }
    return a1;
  }
  v4 = 0;
  while (1)
  {
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v2 + 56);
      a1[4] = v5;
    }
    else
    {
      v5 = a1[4];
    }
    v6 = v2 + 48;
    if (v5 != v2 + 48)
      break;
LABEL_35:
    v2 = *(_QWORD *)(v2 + 8);
    a1[2] = v2;
    v4 = 1;
    if (v2 == v3)
      goto LABEL_36;
  }
  while (1)
  {
    if (*((_BYTE *)a1 + 64) || *((_DWORD *)a1 + 14) == *((_DWORD *)a1 + 17))
      goto LABEL_15;
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    if ((*(_WORD *)(v5 + 44) & 0xC) == 0 || (*(_WORD *)(v5 + 44) & 4) != 0)
      break;
    v11 = v5;
    if ((v7 & 0x80) != 0)
      goto LABEL_14;
    while ((*(_WORD *)(v11 + 44) & 8) != 0)
    {
      v11 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v11 + 16) + 8) & 0x80) != 0)
        goto LABEL_14;
    }
LABEL_15:
    if (**(_WORD **)(v5 + 16) == 4)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 16);
      if (v9 == a1[1])
      {
        *((_BYTE *)a1 + 64) = 0;
      }
      else
      {
        v12 = *a1;
        v18 = 0;
        if (sub_1C617A1AC(*(_QWORD *)(v12 + 72), *(_DWORD *)(v12 + 88), v9, &v18))
          v13 = v18;
        else
          v13 = *(_QWORD *)(v12 + 72) + 24 * *(unsigned int *)(v12 + 88);
        if (*(_QWORD *)(*a1 + 72) + 24 * *(unsigned int *)(*a1 + 88) != v13)
        {
          v14 = *(_DWORD *)(v13 + 8);
          *((_BYTE *)a1 + 64) = 1;
          if (v14 != *((_DWORD *)a1 + 14))
          {
            a1[5] = a1[1];
            a1[6] = v9;
            *((_DWORD *)a1 + 14) = v14;
            a1[1] = *(_QWORD *)(v13 + 16);
            v16 = a1[4];
            if (!v16 || (*(_BYTE *)v16 & 4) == 0)
            {
              while ((*(_WORD *)(v16 + 44) & 8) != 0)
                v16 = *(_QWORD *)(v16 + 8);
            }
            goto LABEL_50;
          }
          a1[1] = *(_QWORD *)(v13 + 16);
        }
      }
    }
    v10 = a1[4];
    if (!v10 || (*(_BYTE *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
        v10 = *(_QWORD *)(v10 + 8);
    }
    v5 = *(_QWORD *)(v10 + 8);
    a1[4] = v5;
    if (v5 == v6)
    {
      v2 = a1[2];
      v3 = a1[3];
      goto LABEL_35;
    }
  }
  if ((v7 & 0x80) == 0)
    goto LABEL_15;
LABEL_14:
  if ((sub_1C6024BF4(v5) & 1) != 0)
    goto LABEL_15;
  a1[5] = a1[1];
  a1[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a1 + 17);
  a1[1] = 0;
  v16 = a1[4];
  if (!v16 || (*(_BYTE *)v16 & 4) == 0)
  {
    while ((*(_WORD *)(v16 + 44) & 8) != 0)
      v16 = *(_QWORD *)(v16 + 8);
  }
LABEL_50:
  a1[4] = *(_QWORD *)(v16 + 8);
  return a1;
}

std::string::value_type *sub_1C602B1E8(uint64_t a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t **v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void **v12;
  std::string::value_type *v13;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  _BYTE *v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  __int128 *p_dst;
  _BYTE *v26;
  __int128 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  char *v37;
  std::string::size_type v38;
  char *v39;
  char *v40;
  char *v41;
  std::string::size_type v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::string::size_type v49;
  std::string::size_type v50;
  char v51;
  char *v52;
  std::string::size_type v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD v57[4];
  __int16 v58;
  __int128 v59;
  unint64_t v60;
  __int128 __dst;
  unint64_t v62;
  std::string::size_type v63;
  __int16 v64;

  v4 = *(char **)(a1 + 1256);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v5 = v4;
        v6 = *((_QWORD *)v4 + 4);
        if (v6 <= a2)
          break;
        v4 = *(char **)v5;
        v7 = (uint64_t **)v5;
        if (!*(_QWORD *)v5)
          goto LABEL_9;
      }
      if (v6 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v5 + 1);
      if (!v4)
      {
        v7 = (uint64_t **)(v5 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 1256);
    v5 = (char *)(a1 + 1256);
LABEL_9:
    v8 = v5;
    v5 = (char *)operator new(0x40uLL);
    *((_QWORD *)v5 + 4) = a2;
    *((_QWORD *)v5 + 5) = 0;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = v8;
    *v7 = (uint64_t *)v5;
    v9 = **(_QWORD **)(a1 + 1248);
    v10 = (uint64_t *)v5;
    if (v9)
    {
      *(_QWORD *)(a1 + 1248) = v9;
      v10 = *v7;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 1256), v10);
    ++*(_QWORD *)(a1 + 1264);
  }
  if (v5[63] < 0)
    v11 = *((_QWORD *)v5 + 6);
  else
    v11 = v5[63];
  v12 = (void **)(v5 + 40);
  if (v11)
  {
    if (v5[63] >= 0)
      return v5 + 40;
    else
      return (std::string::value_type *)*((_QWORD *)v5 + 5);
  }
  v15 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v16 = v15[1];
  if (v16)
  {
    v17 = *(_QWORD **)(v16 + 8);
    v20 = *v17;
    v19 = v17 + 3;
    v18 = v20;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v21 = *v15;
  if (v21)
  {
    v22 = *(_QWORD **)(v21 + 8);
    v24 = *v22;
    v13 = (std::string::value_type *)(v22 + 3);
    v23 = v24;
    if (!v18)
      goto LABEL_28;
LABEL_27:
    if (*v19 == 47)
      goto LABEL_30;
    goto LABEL_28;
  }
  v23 = 0;
  v13 = 0;
  if (v18)
    goto LABEL_27;
  if (!v23)
    goto LABEL_40;
LABEL_28:
  if (*v13 == 47)
  {
LABEL_30:
    v64 = 261;
    *(_QWORD *)&__dst = v13;
    *((_QWORD *)&__dst + 1) = v23;
    if ((llvm::sys::path::is_absolute((const char **)&__dst, (const llvm::Twine *)1) & 1) != 0)
      return v13;
    if (v18 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v18 >= 0x17)
      {
        v29 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v29 = v18 | 7;
        v30 = v29 + 1;
        p_dst = (__int128 *)operator new(v29 + 1);
        *((_QWORD *)&__dst + 1) = v18;
        v62 = v30 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v62) = v18;
        p_dst = &__dst;
        if (!v18)
          goto LABEL_47;
      }
      memmove(p_dst, v19, v18);
LABEL_47:
      *((_BYTE *)p_dst + v18) = 0;
      if (v5[63] < 0)
        operator delete(*v12);
      *(_OWORD *)v12 = __dst;
      *((_QWORD *)v5 + 7) = v62;
      if (v19[v18 - 1] != 47)
        std::string::push_back((std::string *)(v5 + 40), 47);
      std::string::append((std::string *)(v5 + 40), v13, v23);
      if (v5[63] >= 0)
        return v5 + 40;
      else
        return (std::string::value_type *)*((_QWORD *)v5 + 5);
    }
LABEL_114:
    abort();
  }
  v26 = memchr(v13, 58, v23);
  if (v26 && v26 - v13 == 1)
  {
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_114;
    if (v23 >= 0x17)
    {
      v31 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v31 = v23 | 7;
      v32 = v31 + 1;
      v27 = (__int128 *)operator new(v31 + 1);
      *((_QWORD *)&__dst + 1) = v23;
      v62 = v32 | 0x8000000000000000;
      *(_QWORD *)&__dst = v27;
    }
    else
    {
      HIBYTE(v62) = v23;
      v27 = &__dst;
    }
    memmove(v27, v13, v23);
    *((_BYTE *)v27 + v23) = 0;
    if (v5[63] < 0)
      operator delete(*v12);
    *(_OWORD *)v12 = __dst;
    v28 = v62;
  }
  else
  {
LABEL_40:
    v58 = 773;
    v57[0] = v19;
    v57[1] = v18;
    v57[2] = "\\";
    *(_QWORD *)&__dst = v57;
    v62 = (unint64_t)v13;
    v63 = v23;
    v64 = 1282;
    llvm::Twine::str((llvm::Twine *)&__dst, &v59);
    if (v5[63] < 0)
      operator delete(*v12);
    *(_OWORD *)v12 = v59;
    v28 = v60;
  }
  *((_QWORD *)v5 + 7) = v28;
  if (v5[63] < 0)
  {
    v34 = (_BYTE *)*((_QWORD *)v5 + 5);
    v33 = *((_QWORD *)v5 + 6);
    if (!v33)
      goto LABEL_67;
  }
  else
  {
    v33 = v5[63];
    v34 = v5 + 40;
    if (!v5[63])
      goto LABEL_67;
  }
  do
  {
    if (*v34 == 47)
      *v34 = 92;
    ++v34;
    --v33;
  }
  while (v33);
LABEL_67:
  v35 = 0;
LABEL_68:
  v36 = v5[63];
  if (v5[63] < 0)
  {
    v37 = (char *)*((_QWORD *)v5 + 5);
    v38 = *((_QWORD *)v5 + 6);
  }
  else
  {
    v37 = v5 + 40;
    v38 = v5[63];
  }
  if (v38 >= v35)
  {
    v39 = &v37[v35];
    v40 = &v37[v38];
    while (v40 - v39 >= 3)
    {
      v41 = (char *)memchr(v39, 92, v40 - v39 - 2);
      if (!v41)
        break;
      if (*(_WORD *)v41 == 11868 && v41[2] == 92)
      {
        if (v41 != v40)
        {
          v35 = v41 - v37;
          if (v41 - v37 != -1)
          {
            std::string::erase((std::string *)(v5 + 40), v35, 2uLL);
            goto LABEL_68;
          }
        }
        break;
      }
      v39 = v41 + 1;
    }
  }
  v43 = 0;
LABEL_84:
  v44 = v5 + 40;
  if ((v36 & 0x80) != 0)
  {
    v44 = (char *)*((_QWORD *)v5 + 5);
    v36 = *((_QWORD *)v5 + 6);
  }
  if (v36 >= v43)
  {
    v45 = &v44[v43];
    v46 = &v44[v36];
    while (v46 - v45 >= 4)
    {
      v47 = (char *)memchr(v45, 92, v46 - v45 - 3);
      if (!v47)
        break;
      if (*(_DWORD *)v47 == 1546530396)
      {
        if (v47 == v46)
          v48 = -1;
        else
          v48 = v47 - v44;
        if ((unint64_t)(v48 + 1) >= 2)
        {
          v49 = std::string::rfind((const std::string *)(v5 + 40), 92, v48 - 1);
          if (v49 != -1)
          {
            v43 = v49;
            std::string::erase((std::string *)(v5 + 40), v49, v48 - v49 + 3);
            v36 = v5[63];
            goto LABEL_84;
          }
        }
        break;
      }
      v45 = v47 + 1;
    }
  }
  v50 = 0;
LABEL_99:
  v51 = v5[63];
  if (v51 < 0)
  {
    v52 = (char *)*((_QWORD *)v5 + 5);
    v53 = *((_QWORD *)v5 + 6);
  }
  else
  {
    v52 = v5 + 40;
    v53 = v5[63];
  }
  if (v53 >= v50)
  {
    v54 = &v52[v50];
    v55 = &v52[v53];
    while (v55 - v54 >= 2)
    {
      v56 = (char *)memchr(v54, 92, v55 - v54 - 1);
      if (!v56)
        break;
      if (*(_WORD *)v56 == 23644)
      {
        if (v56 != v55)
        {
          v50 = v56 - v52;
          if (v56 - v52 != -1)
          {
            std::string::erase((std::string *)(v5 + 40), v50, 1uLL);
            goto LABEL_99;
          }
        }
        break;
      }
      v54 = v56 + 1;
    }
  }
  if (v51 >= 0)
    return v5 + 40;
  else
    return (std::string::value_type *)*((_QWORD *)v5 + 5);
}

uint64_t sub_1C602B774(uint64_t a1, unint64_t a2)
{
  std::string::value_type *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  std::string *v11;
  std::string *p_p;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned int v19;
  void *v20;
  void *v21;
  std::string *v22;
  size_t size;
  std::string::size_type v24;
  unsigned int v25;
  uint64_t v26;
  std::string __p;
  uint64_t v29;
  char v30;

  v4 = sub_1C602B1E8(a1, a2);
  v6 = v5;
  v7 = (*(_DWORD *)(a1 + 984) + 1);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  __p.__r_.__value_.__l.__size_ = v5;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v7;
  sub_1C62B2444(a1 + 976, (const void **)&__p.__r_.__value_.__l.__data_, &__p.__r_.__value_.__r.__words[2], (uint64_t)&v29);
  if (v30)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      v21 = 0;
      v24 = 0;
      v26 = 0;
      goto LABEL_40;
    }
    v8 = *(_QWORD **)(*(_QWORD *)(a2 + 32) + 8);
    v10 = (unsigned __int8 *)(v8 + 3);
    v9 = *v8;
    memset(&__p, 0, sizeof(__p));
    if (v9)
    {
      std::string::resize(&__p, (v9 + 1) >> 1, 0);
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v9 & 1) == 0)
      {
LABEL_12:
        if (v9 >= 2)
        {
          v14 = v9 >> 1;
          v15 = v10 + 1;
          do
          {
            v16 = (unsigned __int16)word_1C85F7092[*(v15 - 1)];
            v17 = (unsigned __int16)word_1C85F7092[*v15];
            if (v16 == 0xFFFF || v17 == 0xFFFF)
              break;
            v15 += 2;
            p_p->__r_.__value_.__s.__data_[0] = v17 | (16 * v16);
            p_p = (std::string *)((char *)p_p + 1);
            --v14;
          }
          while (v14);
        }
        goto LABEL_19;
      }
      v13 = (unsigned __int16)word_1C85F7092[*v10];
      if (v13 != 0xFFFF)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &__p;
        p_p->__r_.__value_.__s.__data_[0] = v13;
        p_p = (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + 1);
        v10 = (unsigned __int8 *)v8 + 25;
        --v9;
        goto LABEL_12;
      }
    }
LABEL_19:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v19 = __p.__r_.__value_.__r.__words[1];
    v20 = (void *)sub_1C484358C(*(_QWORD *)(*(_QWORD *)(a1 + 440) + 8) + 192, v19, 0);
    v21 = v20;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &__p;
    else
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    memcpy(v20, v22, size);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v24 = __p.__r_.__value_.__l.__size_;
    if (*(_BYTE *)(a2 + 40))
    {
      v25 = *(_DWORD *)(a2 + 24);
      if (v25 - 1 >= 3)
        v26 = 0;
      else
        v26 = v25;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_39;
    }
    v26 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_40:
    (*(void (**)(_QWORD, uint64_t, std::string::value_type *, std::string::size_type, void *, std::string::size_type, uint64_t))(**(_QWORD **)(a1 + 440) + 712))(*(_QWORD *)(a1 + 440), v7, v4, v6, v21, v24, v26);
  }
  return *(unsigned int *)(v29 + 16);
}

char *sub_1C602B9A8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  void *v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  _QWORD *v53;
  unint64_t v54;
  unsigned int *v55;
  void *v56;
  uint64_t v57;
  _OWORD v58[4];
  void *v59[2];
  _OWORD v60[2];
  unint64_t v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  _QWORD v66[5];

  v66[3] = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)(a1 + 696);
  v59[0] = 0;
  memset(v60, 0, sizeof(v60));
  memset(v58, 0, sizeof(v58));
  v55 = (unsigned int *)a3;
  v56 = v58;
  v57 = 0x100000000;
  v59[1] = (char *)v60 + 8;
  DWORD1(v60[0]) = 1;
  v54 = a2;
  v61 = a2;
  sub_1C63CCE3C((uint64_t)&v62, (uint64_t)&v56);
  v6 = v61;
  v7 = 0x9DDFEA08EB382D69 * (((8 * v61) + 8) ^ HIDWORD(v61));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v61) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = v5[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*v5 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v61)
            {
              v15 = 1;
              goto LABEL_73;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v53 = v5 + 2;
  v13 = operator new(0x98uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = v6;
  sub_1C63CCE3C((uint64_t)(v13 + 3), (uint64_t)&v62);
  v16 = (float)(unint64_t)(v5[3] + 1);
  v17 = *((float *)v5 + 8);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = v5[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_29;
    if (*(_QWORD *)&prime < v10)
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)v5[3] / *((float *)v5 + 8));
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = v5[1];
      }
      else
      {
        if (prime)
        {
LABEL_29:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)*v5;
          *v5 = (uint64_t)v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          v5[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*v5 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v53;
          if (*v53)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v5 + 8 * v26) = v53;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*v5 + 8 * v32))
                  {
                    *(_QWORD *)(*v5 + 8 * v32) = v25;
                    goto LABEL_54;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*v5 + 8 * v32);
                  **(_QWORD **)(*v5 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_54:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_58;
        }
        v46 = (void *)*v5;
        *v5 = 0;
        if (v46)
          operator delete(v46);
        v10 = 0;
        v5[1] = 0;
      }
    }
LABEL_58:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v33 = *v5;
  v34 = *(_QWORD **)(*v5 + 8 * v3);
  if (v34)
  {
    *v13 = *v34;
LABEL_71:
    *v34 = v13;
    goto LABEL_72;
  }
  *v13 = *v53;
  *v53 = v13;
  *(_QWORD *)(v33 + 8 * v3) = v53;
  if (*v13)
  {
    v35 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10)
        v35 %= v10;
    }
    else
    {
      v35 &= v10 - 1;
    }
    v34 = (_QWORD *)(*v5 + 8 * v35);
    goto LABEL_71;
  }
LABEL_72:
  v15 = 0;
  ++v5[3];
LABEL_73:
  if (v65 != v66)
    free(v65);
  v36 = (uint64_t *)v62;
  if (v63)
  {
    v37 = (char *)v62 - 64;
    v38 = 72 * v63;
    do
    {
      sub_1C63CD318((char **)&v37[v38]);
      v38 -= 72;
    }
    while (v38);
    v36 = (uint64_t *)v62;
  }
  if (v36 != &v64)
    free(v36);
  if (v59[1] != (char *)v60 + 8)
    free(v59[1]);
  v39 = v56;
  if ((_DWORD)v57)
  {
    v40 = (char *)v56 - 64;
    v41 = 72 * v57;
    do
    {
      sub_1C63CD318((char **)&v40[v41]);
      v41 -= 72;
    }
    while (v41);
    v39 = v56;
  }
  if (v39 != v58)
    free(v39);
  if ((v15 & 1) == 0)
  {
    v43 = *(unsigned int *)(*(_QWORD *)(a1 + 696) + 312);
    v44 = v54;
    v45 = *(_DWORD *)(v54 + 8);
    if (v45 == 2)
    {
      if (*(_QWORD *)(v54 - 8))
      {
        for (i = *(_QWORD *)(v54 - 16);
              (*(_BYTE *)i & 0xFE) == 0x12;
        v43 = *(unsigned int *)(sub_1C602B9A8(a1) + 120);
        v45 = *(_DWORD *)(v44 + 8);
      }
      else
      {
        v45 = 2;
      }
    }
    v48 = *(unsigned int *)(a1 + 920);
    *(_DWORD *)(a1 + 920) = v48 + 1;
    *((_DWORD *)v13 + 36) = v48;
    v49 = *(_QWORD *)(a1 + 440);
    v50 = *(_QWORD *)(v44 - 8 * v45);
    if (*(_BYTE *)v50 != 15)
      v50 = *(_QWORD *)(v50 - 8 * *(unsigned int *)(v50 + 8));
    v51 = sub_1C602B774(a1, v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v49 + 728))(v49, v48, v43, v51, *(unsigned int *)(v44 + 4), *(unsigned __int16 *)(v44 + 2), 0);
    v52 = v55;
    v13[17] = v55;
    sub_1C61ABE04(a1 + 1000, (uint64_t *)&v55);
    sub_1C602C000(a1, v52);
  }
  return (char *)(v13 + 3);
}

uint64_t sub_1C602C000(uint64_t a1, unsigned int *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned __int16 *v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  unint64_t v28;
  int v29;
  int v30;
  llvm::DIScope *Scope;
  const char *Name;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  const char *v42;
  std::string *p_p;
  std::string::size_type size;
  std::__shared_weak_count_vtbl *v45;
  unint64_t v46;
  __int16 v47[8];
  _QWORD *v48;
  unint64_t v49;
  __int16 v50;
  int v51;
  std::string *v52;
  std::string::size_type v53;
  std::string __p;
  void *v55;
  uint64_t v56;
  int v57;

  *(_QWORD *)v47 = 0;
  v4 = sub_1C6200DDC(*(_QWORD *)(a1 + 1088), *(_DWORD *)(a1 + 1104), (uint64_t)a2, 0, v47);
  v5 = *(_QWORD *)(a1 + 1088);
  v6 = *(_DWORD *)(a1 + 1104);
  if (v4)
    v7 = *(_QWORD *)v47 == v5 + 24 * v6;
  else
    v7 = 1;
  if (!v7)
    return *(unsigned int *)(*(_QWORD *)v47 + 16);
  v10 = a1 + 1088;
  v11 = &a2[-2 * a2[2]];
  v12 = *((_QWORD *)v11 + 2);
  if (!v12)
  {
    v13 = 0;
    v14 = 0;
    goto LABEL_23;
  }
  v15 = *(unint64_t **)(v12 + 8);
  v16 = *v15;
  v13 = v15 + 3;
  v14 = v16;
  if (!v16)
    goto LABEL_23;
  v17 = (v14 - 1);
  if ((int)v14 - 1 < 0 || *((_BYTE *)v13 + v14 - 1) != 62)
    goto LABEL_23;
  v18 = 0;
  while (1)
  {
    v19 = *((unsigned __int8 *)v13 + v17);
    if (v19 != 60)
    {
      if (v19 == 62)
        ++v18;
      goto LABEL_18;
    }
    if (!--v18)
      break;
LABEL_18:
    if ((uint64_t)v17-- <= 0)
      goto LABEL_23;
  }
  if (v14 >= v17)
    v14 = v17;
LABEL_23:
  v21 = (unsigned __int16 *)*((_QWORD *)v11 + 1);
  if (!v21 || ((v22 = *(unsigned __int8 *)v21, v22 != 17) ? (v23 = v22 == 15) : (v23 = 1), v23))
  {
    v24 = 0;
LABEL_30:
    v25 = sub_1C602C698(a1, *(_QWORD *)&a2[-2 * a2[2] + 8], 0);
    v47[0] = 5633;
    *(_DWORD *)&v47[1] = v24;
    *(_DWORD *)&v47[3] = v25;
    v26 = a1 + 544;
    v48 = v13;
    v49 = v14;
    v27 = sub_1C63F0788(a1 + 560, v47);
    goto LABEL_31;
  }
  if (v22 != 13)
  {
    *(_QWORD *)v47 = 0;
    if (!sub_1C6200DDC(v5, v6, (uint64_t)v21, 0, v47)
      || *(_QWORD *)v47 == *(_QWORD *)(a1 + 1088) + 24 * *(unsigned int *)(a1 + 1104))
    {
      Scope = (llvm::DIScope *)llvm::DIScope::getScope((llvm::DIScope *)v21);
      Name = (const char *)llvm::DIScope::getName((llvm::DIScope *)v21);
      if (v33)
      {
        v42 = Name;
        v41 = v33;
      }
      else
      {
        v34 = v21[1];
        v35 = 1 << v34;
        v37 = 21;
        if (v34 != 57)
        {
          v37 = 0;
          v36 = 0;
        }
        v38 = (v35 & 0x880014) == 0;
        if ((v35 & 0x880014) != 0)
          v39 = 13;
        else
          v39 = v37;
        if (v38)
          v40 = v36;
        else
          v40 = "<unnamed-tag>";
        if (v34 <= 0x39)
          v41 = v39;
        else
          v41 = 0;
        if (v34 <= 0x39)
          v42 = v40;
        else
          v42 = 0;
      }
      sub_1C63CA530(&__p, a1, Scope, v42, v41);
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      v50 = 5637;
      v51 = 0;
      v52 = p_p;
      v53 = size;
      v45 = sub_1C63F0CD4(a1 + 560, &v50);
      v24 = sub_1C611BE0C(a1 + 544, v45, v46);
      v55 = v21;
      v56 = 0;
      v57 = v24;
      sub_1C63CD55C((uint64_t)v47, a1 + 1088, (uint64_t *)&v55, &v57);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v24 = *(_DWORD *)(*(_QWORD *)v47 + 16);
    }
    goto LABEL_30;
  }
  v29 = sub_1C602C698(a1, (std::string::size_type)v21, 0);
  v30 = sub_1C602D570(a1, a2, (uint64_t)v21);
  v47[0] = 5634;
  *(_DWORD *)&v47[1] = v29;
  *(_DWORD *)&v47[3] = v30;
  v26 = a1 + 544;
  v48 = v13;
  v49 = v14;
  v27 = sub_1C63F094C(a1 + 560, v47);
LABEL_31:
  v8 = sub_1C611BE0C(v26, v27, v28);
  v55 = a2;
  v56 = 0;
  v57 = v8;
  sub_1C63CD55C((uint64_t)v47, v10, (uint64_t *)&v55, &v57);
  return v8;
}

unsigned __int16 *sub_1C602C348(uint64_t a1, llvm::DIScope *this, uint64_t a3)
{
  unsigned __int16 *Scope;
  unsigned __int16 *v6;
  int v7;
  unsigned __int16 *v8;
  unint64_t v9;
  const char *Name;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char **v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (this)
  {
    Scope = (unsigned __int16 *)this;
    v6 = 0;
    v18 = a1 + 1152;
    v19 = a1 + 1136;
    v20 = a3 + 16;
    while (1)
    {
      v7 = *(unsigned __int8 *)Scope;
      if (v7 == 17)
        v8 = Scope;
      else
        v8 = 0;
      if (!v6)
        v6 = v8;
      if (v7 == 13)
      {
        v9 = *(unsigned int *)(a1 + 1144);
        if (v9 >= *(unsigned int *)(a1 + 1148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, v18, v9 + 1, 8);
          v9 = *(unsigned int *)(a1 + 1144);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 8 * v9) = Scope;
        ++*(_DWORD *)(a1 + 1144);
      }
      Name = (const char *)llvm::DIScope::getName((llvm::DIScope *)Scope);
      if (v11)
        break;
      v14 = Scope[1];
      if (v14 <= 0x39)
      {
        if (((1 << v14) & 0x880014) != 0)
        {
          v13 = 13;
          v12 = "<unnamed-tag>";
          goto LABEL_19;
        }
        if (v14 == 57)
        {
          v13 = 21;
          goto LABEL_19;
        }
      }
LABEL_22:
      Scope = (unsigned __int16 *)llvm::DIScope::getScope((llvm::DIScope *)Scope);
      if (!Scope)
        return v6;
    }
    v12 = Name;
    v13 = v11;
LABEL_19:
    v15 = *(unsigned int *)(a3 + 8);
    if (v15 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v20, v15 + 1, 16);
      v15 = *(unsigned int *)(a3 + 8);
    }
    v16 = (const char **)(*(_QWORD *)a3 + 16 * v15);
    *v16 = v12;
    v16[1] = (const char *)v13;
    ++*(_DWORD *)(a3 + 8);
    goto LABEL_22;
  }
  return 0;
}

void sub_1C602C4CC(std::string *this, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t i;
  size_t v8;
  const void *v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  void **__dst;
  std::string::size_type v23;
  int64_t v24;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3)
  {
    for (i = 16 * a3; i; i -= 16)
    {
      v8 = *(_QWORD *)(a2 + i - 8);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_37;
      v9 = *(const void **)(a2 + i - 16);
      if (v8 >= 0x17)
      {
        v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v11 = v8 | 7;
        v12 = v11 + 1;
        p_dst = (void **)operator new(v11 + 1);
        v23 = v8;
        v24 = v12 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v24) = *(_QWORD *)(a2 + i - 8);
        p_dst = (void **)&__dst;
        if (!v8)
          goto LABEL_11;
      }
      memmove(p_dst, v9, v8);
LABEL_11:
      *((_BYTE *)p_dst + v8) = 0;
      if (v24 >= 0)
        v13 = (const std::string::value_type *)&__dst;
      else
        v13 = (const std::string::value_type *)__dst;
      if (v24 >= 0)
        v14 = HIBYTE(v24) & 0x7F;
      else
        v14 = v23;
      std::string::append(this, v13, v14);
      if (SHIBYTE(v24) < 0)
        operator delete(__dst);
      std::string::append(this, "::");
    }
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_37:
    abort();
  if (a5 >= 0x17)
  {
    v16 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v16 = a5 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    v23 = a5;
    v24 = v17 | 0x8000000000000000;
    __dst = v15;
    goto LABEL_27;
  }
  HIBYTE(v24) = a5;
  v15 = (void **)&__dst;
  if (a5)
LABEL_27:
    memmove(v15, a4, a5);
  *((_BYTE *)v15 + a5) = 0;
  if (v24 >= 0)
    v18 = (const std::string::value_type *)&__dst;
  else
    v18 = (const std::string::value_type *)__dst;
  if (v24 >= 0)
    v19 = HIBYTE(v24) & 0x7F;
  else
    v19 = v23;
  std::string::append(this, v18, v19);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst);
}

uint64_t sub_1C602C698(uint64_t a1, std::string::size_type a2, std::string::size_type a3)
{
  uint64_t v3;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned __int16 v34;
  __int16 v35;
  llvm::DIScope *v36;
  const char *v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  llvm::DISubrange *v50;
  unint64_t Count;
  unint64_t v52;
  unsigned int v54;
  uint64_t v55;
  std::string *v56;
  _QWORD *v57;
  const char *v58;
  _QWORD *v59;
  _QWORD *v60;
  std::__shared_weak_count_vtbl *v61;
  unint64_t v62;
  unint64_t UpperBound;
  unint64_t LowerBound;
  unint64_t v67;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  __int16 v80;
  llvm::DIScope *Scope;
  const char *Name;
  size_t v83;
  size_t v84;
  uint64_t v85;
  const char *v86;
  std::string *v87;
  std::string::size_type v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  unint64_t v95;
  int v96;
  __int16 v97;
  __int16 v98;
  int v100;
  uint64_t v101;
  uint64_t v102;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v105;
  _QWORD *v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  std::__shared_weak_count_vtbl *v111;
  unint64_t v112;
  int v113;
  char v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  llvm::DIScope *v118;
  const char *v119;
  size_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  const char *v127;
  size_t v128;
  const char *v129;
  std::string *v130;
  std::string::size_type v131;
  std::string::size_type v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  std::__shared_weak_count_vtbl *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count_vtbl *v151;
  unint64_t v152;
  const void *v153;
  int v154;
  char *v155;
  char *v156;
  size_t v157;
  unint64_t v158;
  __int16 v159;
  int v160;
  std::string __p;
  char *v162;
  uint64_t v163;
  __int16 v164;
  int v165;
  char v166;
  char v167;
  __int16 v168;
  int v169;
  __int128 v170;
  std::string *v171;
  std::string::size_type v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 3;
  *(_QWORD *)&v170 = 0;
  if (sub_1C6200DDC(*(_QWORD *)(a1 + 1088), *(_DWORD *)(a1 + 1104), a2, a3, &v170))
    v8 = (_QWORD)v170 == *(_QWORD *)(a1 + 1088) + 24 * *(unsigned int *)(a1 + 1104);
  else
    v8 = 1;
  if (!v8)
    return *(unsigned int *)(v170 + 16);
  v3 = 0;
  ++*(_DWORD *)(a1 + 1184);
  v9 = *(unsigned __int16 *)(a2 + 2);
  if (v9 > 0x34)
  {
    if (*(unsigned __int16 *)(a2 + 2) <= 0x3Au)
    {
      if (v9 != 53 && v9 != 55)
        goto LABEL_121;
LABEL_23:
      v16 = 0;
      v17 = 0;
      v18 = a2;
      while (1)
      {
        v19 = *(unsigned __int16 *)(v18 + 2);
        if (v19 <= 0x34)
        {
          if (v19 != 38)
          {
            if (v19 - 15 >= 2)
            {
              if (v19 == 31)
              {
                v28 = a1;
LABEL_60:
                sub_1C63CBD14(v28, (llvm::DIDerivedType *)v18);
                goto LABEL_120;
              }
LABEL_32:
              v21 = sub_1C602C698(a1, v18, 0);
              v3 = v21;
              if (!v17)
                goto LABEL_121;
              LOWORD(v170) = 4097;
              *(_DWORD *)((char *)&v170 + 2) = v21;
              WORD3(v170) = v17;
              v22 = sub_1C63EF5E0(a1 + 560, (__int16 *)&v170);
              v15 = sub_1C611BE0C(a1 + 544, v22, v23);
LABEL_120:
              v3 = v15;
              goto LABEL_121;
            }
LABEL_118:
            v27 = a1;
            goto LABEL_119;
          }
          v17 |= 1u;
          v20 = 1024;
        }
        else
        {
          switch(v19)
          {
            case '5':
              v17 |= 2u;
              v20 = 512;
              break;
            case '7':
              v20 = 4096;
              break;
            case 'B':
              goto LABEL_118;
            default:
              goto LABEL_32;
          }
        }
        v16 |= v20;
        v18 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 24);
        if (!v18)
          goto LABEL_32;
      }
    }
    if (v9 == 59)
    {
      v73 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v73 && (v74 = *(_QWORD *)(v73 + 8), *(_QWORD *)v74 == 17))
      {
        if (*(_QWORD *)(v74 + 24) ^ 0x657079746C636564 | *(_QWORD *)(v74 + 32) ^ 0x7274706C6C756E28 | *(unsigned __int8 *)(v74 + 40) ^ 0x29)
          v3 = 0;
        else
          v3 = 259;
      }
      else
      {
        v3 = 0;
      }
    }
    else if (v9 == 66)
    {
LABEL_42:
      v27 = a1;
      v18 = a2;
      v16 = 0;
LABEL_119:
      v15 = sub_1C6032174(v27, v18, v16);
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (*(unsigned __int16 *)(a2 + 2) > 0xEu)
  {
    switch(*(_WORD *)(a2 + 2))
    {
      case 0xF:
        v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
        if (!v10)
          goto LABEL_42;
        v11 = *(_QWORD **)(v10 + 8);
        if (*v11 != 15)
          goto LABEL_42;
        v12 = v11[3];
        v13 = *(_QWORD *)((char *)v11 + 31);
        if (v12 != 0x705F6C6274765F5FLL || v13 != 0x657079745F727470)
          goto LABEL_42;
        v15 = sub_1C63CBC48(a1, *(_QWORD *)(a2 + 32));
        goto LABEL_120;
      case 0x10:
        goto LABEL_42;
      case 0x12:
        v15 = sub_1C63CBEC8(a1, a2);
        goto LABEL_120;
      case 0x13:
        goto LABEL_43;
      case 0x15:
        if (a3)
        {
          v15 = sub_1C602D738(a1, a2, a3, 0, 0, 0);
          goto LABEL_120;
        }
        *(_QWORD *)&v170 = &v171;
        *((_QWORD *)&v170 + 1) = 0x800000000;
        v29 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
        if (v29)
          v30 = (_QWORD *)(v29 - 8 * *(unsigned int *)(v29 + 8));
        else
          v30 = 0;
        if (v30 == (_QWORD *)v29)
          goto LABEL_176;
        do
        {
          v100 = sub_1C602C698(a1, *v30, 0);
          v101 = DWORD2(v170);
          if (DWORD2(v170) >= (unint64_t)HIDWORD(v170))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)&v171, DWORD2(v170) + 1, 4);
            v101 = DWORD2(v170);
          }
          *(_DWORD *)(v170 + 4 * v101) = v100;
          v102 = ++DWORD2(v170);
          ++v30;
        }
        while (v30 != (_QWORD *)v29);
        if (v102 <= 1)
          goto LABEL_175;
        v107 = (int *)v170;
        v108 = v170 + 4 * v102;
        if (*(_DWORD *)(v108 - 4) == 3)
        {
          *(_DWORD *)(v108 - 4) = 0;
          LODWORD(v102) = DWORD2(v170);
LABEL_175:
          if (!(_DWORD)v102)
          {
LABEL_176:
            LOWORD(v109) = 0;
            LOWORD(__p.__r_.__value_.__l.__data_) = 4609;
            v162 = 0;
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            v110 = 3;
            goto LABEL_177;
          }
          v107 = (int *)v170;
          v148 = v102;
        }
        else
        {
          v148 = v102;
        }
        v154 = *v107;
        v153 = v107 + 1;
        v110 = v154;
        LOWORD(__p.__r_.__value_.__l.__data_) = 4609;
        v162 = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        v109 = v148 - 1;
        if (v148 != 1)
        {
          v155 = (char *)operator new(4 * v109);
          v156 = v155;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v155;
          v162 = &v155[4 * v109];
          v157 = 4 * v148 - 4;
          if ((_DWORD)v102 != 1)
            memcpy(v155, v153, v157);
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v156[v157];
        }
LABEL_177:
        v111 = sub_1C63EFB2C(a1 + 560, (__int16 *)&__p);
        v113 = sub_1C611BE0C(a1 + 544, v111, v112);
        v114 = 0;
        switch(*(_BYTE *)(a2 + 52))
        {
          case 0xB1:
            v114 = 7;
            break;
          case 0xB2:
            v114 = 2;
            break;
          case 0xB3:
            v114 = 4;
            break;
          case 0xB4:
            break;
          case 0xB5:
            v114 = 11;
            break;
          default:
            if (*(unsigned __int8 *)(a2 + 52) == 192)
              v114 = 24;
            break;
        }
        v149 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
        if (!v149)
          goto LABEL_243;
        v150 = *(unsigned int *)(v149 + 8);
        if (!(_DWORD)v150)
          goto LABEL_239;
        v149 = *(_QWORD *)(v149 - 8 * v150);
        if (v149)
        {
          if (*(_BYTE *)v149 == 13)
            LODWORD(v149) = (*(_DWORD *)(v149 + 28) >> 26) & 1;
          else
LABEL_239:
            LOBYTE(v149) = 0;
        }
LABEL_243:
        v164 = 4104;
        v165 = v110;
        v166 = v114;
        v167 = v149;
        v168 = v109;
        v169 = v113;
        v151 = sub_1C63EF7A4(a1 + 560, &v164);
        v3 = sub_1C611BE0C(a1 + 544, v151, v152);
        if (__p.__r_.__value_.__l.__size_)
        {
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        if ((std::string **)v170 != &v171)
          free((void *)v170);
        break;
      case 0x16:
        v3 = sub_1C602C698(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 0);
        v31 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
        if (v31)
        {
          v76 = *(_QWORD **)(v31 + 8);
          v77 = *v76;
          v33 = v76 + 3;
          v32 = v77;
        }
        else
        {
          v32 = 0;
          v33 = 0;
        }
        sub_1C6031D5C((_QWORD *)a1, a2);
        if ((_DWORD)v3 == 33)
        {
          if (v32 == 7 && *v33 == 1634231159 && *(_DWORD *)((char *)v33 + 3) == 1952412257)
            v3 = 113;
        }
        else if ((_DWORD)v3 == 18 && v32 == 7 && *v33 == 1397051976 && *(_DWORD *)((char *)v33 + 3) == 1414288723)
        {
          v3 = 8;
        }
        goto LABEL_121;
      case 0x17:
        if (sub_1C6032A64(a2))
          goto LABEL_58;
        v80 = sub_1C6032374(a2) | 0x80;
        Scope = (llvm::DIScope *)llvm::DIScope::getScope((llvm::DIScope *)a2);
        Name = (const char *)llvm::DIScope::getName((llvm::DIScope *)a2);
        v84 = v83;
        if (v83)
        {
          v86 = Name;
        }
        else
        {
          v85 = *(unsigned __int16 *)(a2 + 2);
          if (v85 > 0x39)
          {
            v86 = 0;
          }
          else if (((1 << v85) & 0x880014) != 0)
          {
            v86 = "<unnamed-tag>";
            v84 = 13;
          }
          else
          {
            v86 = 0;
            if (v85 == 57)
            {
              v84 = 21;
            }
          }
        }
        sub_1C63CA530(&__p, a1, Scope, v86, v84);
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        v105 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
        if (v105)
        {
          v115 = *(uint64_t **)(v105 + 8);
          v116 = *v115;
          v106 = v115 + 3;
          v105 = v116;
        }
        else
        {
          v106 = 0;
        }
        LODWORD(v170) = 5382;
        WORD2(v170) = v80;
        *(_DWORD *)((char *)&v170 + 6) = 0;
        v171 = p_p;
        v172 = size;
        v173 = v106;
        v174 = v105;
        v93 = a1 + 544;
        v175 = 0;
        v94 = sub_1C63F0078(a1 + 560, (__int16 *)&v170);
        goto LABEL_181;
      case 0x1F:
        v28 = a1;
        v18 = a2;
        goto LABEL_60;
      case 0x24:
        v15 = sub_1C63CB8E8(a2);
        goto LABEL_120;
      case 0x26:
        goto LABEL_23;
      default:
        goto LABEL_121;
    }
    goto LABEL_121;
  }
  switch(v9)
  {
    case 1u:
      v42 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      v3 = sub_1C602C698(a1, v42, 0);
      v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 2064) + 504) + 4);
      v44 = sub_1C5FFEF6C(v42);
      v45 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
      if (!v45)
        goto LABEL_121;
      v46 = *(_DWORD *)(v45 + 8);
      v47 = (v46 - 1);
      if (v46 - 1 < 0)
        goto LABEL_121;
      v48 = v44 >> 3;
      if ((v43 & 0xFFFFFFF8) == 0x40)
        v49 = 35;
      else
        v49 = 34;
      v160 = v49;
      while (1)
      {
        v50 = *(llvm::DISubrange **)(v45 - 8 * *(unsigned int *)(v45 + 8) + 8 * v47);
        Count = llvm::DISubrange::getCount(v50);
        v52 = Count & 0xFFFFFFFFFFFFFFF8;
        if ((Count & 6) == 0 && v52 != 0)
          break;
        UpperBound = llvm::DISubrange::getUpperBound(v50);
        if ((UpperBound & 6) == 0 && (UpperBound & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v158 = UpperBound & 0xFFFFFFFFFFFFFFF8;
          LowerBound = llvm::DISubrange::getLowerBound(v50);
          v67 = LowerBound & 0xFFFFFFFFFFFFFFF8;
          if ((LowerBound & 6) != 0 || v67 == 0)
          {
            v69 = *(unsigned __int8 *)(a1 + 704) == 2;
          }
          else
          {
            v70 = *(_DWORD *)(v67 + 32);
            if (v70 > 0x40)
              v69 = **(_QWORD **)(v67 + 24);
            else
              v69 = (uint64_t)(*(_QWORD *)(v67 + 24) << -(char)v70) >> -(char)v70;
          }
          v71 = *(_DWORD *)(v158 + 32);
          if (v71 > 0x40)
            v72 = **(_QWORD **)(v158 + 24);
          else
            v72 = (uint64_t)(*(_QWORD *)(v158 + 24) << -(char)v71) >> -(char)v71;
          v55 = v72 - v69 + 1;
LABEL_82:
          if (v55 != -1)
            goto LABEL_84;
        }
        v55 = 0;
LABEL_84:
        v48 *= v55;
        if (!(v47 | v48))
        {
          v56 = (std::string *)(*(_QWORD *)(a2 + 32) >> 3);
LABEL_88:
          v57 = *(_QWORD **)(a2 + 16 - 8 * *(unsigned int *)(a2 + 8));
          if (v57)
          {
            v59 = (_QWORD *)v57[1];
            v60 = (_QWORD *)*v59;
            v58 = (const char *)(v59 + 3);
            v57 = v60;
          }
          else
          {
            v58 = 0;
          }
          goto LABEL_91;
        }
        v56 = (std::string *)v48;
        if (!v47)
          goto LABEL_88;
        v57 = 0;
        v56 = (std::string *)v48;
        v58 = "";
LABEL_91:
        LOWORD(v170) = 5379;
        *(_DWORD *)((char *)&v170 + 2) = v3;
        *(_DWORD *)((char *)&v170 + 6) = v160;
        v171 = v56;
        v172 = (std::string::size_type)v58;
        v173 = v57;
        v61 = sub_1C63EFCF0(a1 + 560, (__int16 *)&v170);
        v3 = sub_1C611BE0C(a1 + 544, v61, v62);
        if (v47-- <= 0)
          goto LABEL_121;
      }
      v54 = *(_DWORD *)(v52 + 32);
      if (v54 > 0x40)
        v55 = **(_QWORD **)(v52 + 24);
      else
        v55 = (uint64_t)(*(_QWORD *)(v52 + 24) << -(char)v54) >> -(char)v54;
      goto LABEL_82;
    case 2u:
LABEL_43:
      if (sub_1C6032A64(a2))
      {
        *(_QWORD *)&v170 = 0;
        if (sub_1C6144BDC(*(_QWORD *)(a1 + 1112), *(_DWORD *)(a1 + 1128), a2, &v170)
          && (_QWORD)v170 != *(_QWORD *)(a1 + 1112) + 16 * *(unsigned int *)(a1 + 1128)
          && !*(_DWORD *)(v170 + 8))
        {
          llvm::report_fatal_error((llvm *)"cannot debug circular reference to unnamed type", (const char *)1);
        }
LABEL_58:
        v15 = sub_1C60310B8(a1, a2);
        goto LABEL_120;
      }
      if (v9 == 2)
        v34 = 5380;
      else
        v34 = 5381;
      v35 = sub_1C6032374(a2) | 0x80;
      v36 = (llvm::DIScope *)llvm::DIScope::getScope((llvm::DIScope *)a2);
      v37 = (const char *)llvm::DIScope::getName((llvm::DIScope *)a2);
      v39 = v38;
      if (v38)
      {
        v41 = v37;
      }
      else
      {
        v40 = *(unsigned __int16 *)(a2 + 2);
        if (v40 > 0x39)
        {
          v41 = 0;
        }
        else if (((1 << v40) & 0x880014) != 0)
        {
          v41 = "<unnamed-tag>";
          v39 = 13;
        }
        else
        {
          v41 = 0;
          if (v40 == 57)
          {
            v39 = 21;
          }
        }
      }
      sub_1C63CA530(&__p, a1, v36, v41, v39);
      v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = &__p;
      v88 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v88 = __p.__r_.__value_.__l.__size_;
      v89 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
      if (v89)
      {
        v91 = *(uint64_t **)(v89 + 8);
        v92 = *v91;
        v90 = v91 + 3;
        v89 = v92;
      }
      else
      {
        v90 = 0;
      }
      LODWORD(v170) = v34;
      WORD2(v170) = v35;
      *(_DWORD *)((char *)&v170 + 6) = 0;
      v171 = v87;
      v172 = v88;
      v173 = v90;
      v174 = v89;
      v93 = a1 + 544;
      v175 = 0;
      v176 = 0;
      v94 = sub_1C63EFEB4(a1 + 560, (__int16 *)&v170);
LABEL_181:
      v3 = sub_1C611BE0C(v93, v94, v95);
      if ((*(_BYTE *)(a2 + 28) & 4) == 0)
      {
        v117 = *(unsigned int *)(a1 + 1144);
        if (v117 >= *(_DWORD *)(a1 + 1148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1136, a1 + 1152, v117 + 1, 8);
          LODWORD(v117) = *(_DWORD *)(a1 + 1144);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 8 * v117) = a2;
        ++*(_DWORD *)(a1 + 1144);
      }
      break;
    case 4u:
      v24 = sub_1C6032374(a2);
      if ((*(_BYTE *)(a2 + 28) & 4) != 0)
      {
        v96 = 0;
        v97 = 0;
        v98 = v24 | 0x80;
      }
      else
      {
        v159 = v24;
        sub_1C63ED034((uint64_t)&v170);
        sub_1C63ED1D4((uint64_t)&v170, 0);
        v25 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
        if (v25)
          v26 = (uint64_t *)(v25 - 8 * *(unsigned int *)(v25 + 8));
        else
          v26 = 0;
        if (v26 == (uint64_t *)v25)
        {
          v97 = 0;
        }
        else
        {
          v97 = 0;
          do
          {
            v141 = *v26;
            if (*v26 && *(_BYTE *)v141 == 10)
            {
              v142 = *(unsigned int *)(v141 + 32);
              if (v142 > 0x40)
              {
                v143 = (void *)operator new[]();
                memcpy(v143, *(const void **)(v141 + 24), ((unint64_t)(v142 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v143 = *(void **)(v141 + 24);
              }
              v144 = *(_QWORD *)(v141 - 8 * *(unsigned int *)(v141 + 8));
              if (v144)
              {
                v146 = *(_QWORD **)(v144 + 8);
                v147 = *v146;
                v145 = (char *)(v146 + 3);
                v144 = v147;
              }
              else
              {
                v145 = 0;
              }
              LODWORD(__p.__r_.__value_.__l.__data_) = 201986;
              LODWORD(__p.__r_.__value_.__r.__words[2]) = v142;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v143;
              __p.__r_.__value_.__s.__data_[20] = 1;
              v162 = v145;
              v163 = v144;
              sub_1C63EDB78((uint64_t)&v170, (unsigned __int16 *)&__p);
              if (LODWORD(__p.__r_.__value_.__r.__words[2]) >= 0x41 && __p.__r_.__value_.__l.__size_)
                MEMORY[0x1CAA32F9C](__p.__r_.__value_.__l.__size_, 0x1000C8000313F17);
              ++v97;
            }
            ++v26;
          }
          while (v26 != (uint64_t *)v25);
        }
        v96 = sub_1C63EEB00(a1 + 544, (uint64_t *)&v170);
        sub_1C63ED0DC((uint64_t)&v170);
        v98 = v159;
      }
      v118 = (llvm::DIScope *)llvm::DIScope::getScope((llvm::DIScope *)a2);
      v119 = (const char *)llvm::DIScope::getName((llvm::DIScope *)a2);
      if (v120)
      {
        v129 = v119;
        v128 = v120;
      }
      else
      {
        v121 = *(unsigned __int16 *)(a2 + 2);
        v122 = 1 << v121;
        v124 = 21;
        if (v121 != 57)
        {
          v124 = 0;
          v123 = 0;
        }
        v125 = (v122 & 0x880014) == 0;
        if ((v122 & 0x880014) != 0)
          v126 = 13;
        else
          v126 = v124;
        if (v125)
          v127 = v123;
        else
          v127 = "<unnamed-tag>";
        if (v121 <= 0x39)
          v128 = v126;
        else
          v128 = 0;
        if (v121 <= 0x39)
          v129 = v127;
        else
          v129 = 0;
      }
      v130 = &__p;
      sub_1C63CA530(&__p, a1, v118, v129, v128);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v131 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else
      {
        v131 = __p.__r_.__value_.__l.__size_;
        v130 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      v132 = a2 - 8 * *(unsigned int *)(a2 + 8);
      v133 = *(_QWORD *)(v132 + 56);
      if (v133)
      {
        v136 = *(uint64_t **)(v133 + 8);
        v137 = *v136;
        v135 = v136 + 3;
        v134 = v137;
      }
      else
      {
        v134 = 0;
        v135 = 0;
      }
      v138 = sub_1C602C698(a1, *(_QWORD *)(v132 + 24), 0);
      LOWORD(v170) = 5383;
      WORD1(v170) = v97;
      WORD2(v170) = v98;
      *(_DWORD *)((char *)&v170 + 6) = v96;
      v171 = v130;
      v172 = v131;
      v173 = v135;
      v174 = v134;
      LODWORD(v175) = v138;
      v139 = sub_1C63F023C(a1 + 560, (__int16 *)&v170);
      v3 = sub_1C611BE0C(a1 + 544, v139, v140);
      sub_1C6032280(a1, a2, v3);
      break;
    default:
      goto LABEL_121;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_121:
  __p.__r_.__value_.__r.__words[0] = a2;
  __p.__r_.__value_.__l.__size_ = a3;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v3;
  sub_1C63CD55C((uint64_t)&v170, a1 + 1088, (uint64_t *)&__p, &__p.__r_.__value_.__r.__words[2]);
  v75 = *(_DWORD *)(a1 + 1184);
  if (v75 == 1)
  {
    sub_1C63CC228(a1);
    v75 = *(_DWORD *)(a1 + 1184);
  }
  *(_DWORD *)(a1 + 1184) = v75 - 1;
  return v3;
}

uint64_t sub_1C602D570(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  BOOL v6;
  uint64_t v7;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27[2];
  int v28;
  _QWORD v29[3];

  if (*(_QWORD *)&a2[-2 * a2[2] + 12])
    v5 = *(unsigned int **)&a2[-2 * a2[2] + 12];
  else
    v5 = a2;
  v29[0] = 0;
  if (sub_1C6200DDC(*(_QWORD *)(a1 + 1088), *(_DWORD *)(a1 + 1104), (uint64_t)v5, a3, v29))
    v6 = v29[0] == *(_QWORD *)(a1 + 1088) + 24 * *(unsigned int *)(a1 + 1104);
  else
    v6 = 1;
  if (!v6)
    return *(unsigned int *)(v29[0] + 16);
  ++*(_DWORD *)(a1 + 1184);
  v9 = &v5[-2 * v5[2]];
  v10 = *((_QWORD *)v9 + 4);
  v11 = *((_QWORD *)v9 + 2);
  if (v11)
  {
    v14 = *(size_t **)(v11 + 8);
    v15 = *v14;
    v13 = v14 + 3;
    v12 = v15;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v16 = *(_QWORD *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 24);
  if (v16 && (v17 = *(unsigned int *)(v16 + 8), (_DWORD)v17) && (v18 = *(_BYTE **)(v16 - 8 * v17)) != 0 && *v18 == 13)
  {
    v19 = (v18[31] >> 2) & 1;
    if (a3)
      v20 = 1;
    else
      v20 = v19;
  }
  else
  {
    v20 = 0;
  }
  v21 = v5[10];
  if (a3 && (*(_BYTE *)(a3 + 31) & 4) != 0)
  {
    v22 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
    if (v22)
    {
      v23 = *(uint64_t **)(v22 + 8);
      v25 = *v23;
      v24 = v23 + 3;
      if (v12 != v25 || v12 && memcmp(v13, v24, v12))
        goto LABEL_30;
    }
    else if (v12)
    {
      goto LABEL_30;
    }
    v20 = v20 | 2;
  }
LABEL_30:
  v7 = sub_1C602D738(a1, v10, a3, v5[9], (v21 >> 12) & 1, v20);
  v27[0] = (uint64_t)v5;
  v27[1] = a3;
  v28 = v7;
  sub_1C63CD55C((uint64_t)v29, a1 + 1088, v27, &v28);
  v26 = *(_DWORD *)(a1 + 1184);
  if (v26 == 1)
  {
    sub_1C63CC228(a1);
    v26 = *(_DWORD *)(a1 + 1184);
  }
  *(_DWORD *)(a1 + 1184) = v26 - 1;
  return v7;
}

uint64_t sub_1C602D738(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  int v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  char *v23;
  size_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  unint64_t v30;
  int v31;
  char v32;
  int v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  uint64_t v36;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  _DWORD v44[4];
  uint64_t v45;
  void *__p;
  void *v47;
  char *v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x1E0C80C00];
  v11 = sub_1C602C698(a1, a3, 0);
  v12 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v49 = v51;
  v50 = 0x800000000;
  if (!v12)
  {
    v15 = 0;
    LODWORD(v14) = 0;
    v42 = 3;
    goto LABEL_12;
  }
  v13 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v13)
  {
    v42 = sub_1C602C698(a1, *(_QWORD *)(v12 - 8 * v13), 0);
    LODWORD(v14) = 1;
    if ((a5 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    LODWORD(v14) = 0;
    v42 = 3;
    if ((a5 & 1) != 0)
    {
LABEL_11:
      v15 = 0;
      goto LABEL_12;
    }
  }
  v16 = *(unsigned int *)(v12 + 8);
  if (v16 <= v14)
    goto LABEL_11;
  v17 = *(_QWORD *)(v12 - 8 * v16 + 8 * v14);
  if (!v17 || *(_BYTE *)v17 != 12 || *(_WORD *)(v17 + 2) != 15)
    goto LABEL_11;
  v38 = *(_DWORD *)(a2 + 28);
  v45 = 0;
  if (sub_1C6200DDC(*(_QWORD *)(a1 + 1088), *(_DWORD *)(a1 + 1104), v17, a2, &v45))
    v39 = v45 == *(_QWORD *)(a1 + 1088) + 24 * *(unsigned int *)(a1 + 1104);
  else
    v39 = 1;
  if (v39)
  {
    if ((v38 & 0x2000) != 0)
      v40 = 0x100000;
    else
      v40 = (v38 << 7) & 0x200000;
    ++*(_DWORD *)(a1 + 1184);
    v15 = sub_1C6032174(a1, v17, v40);
    *(_QWORD *)&v43 = v17;
    *((_QWORD *)&v43 + 1) = a2;
    v44[0] = v15;
    sub_1C63CD55C((uint64_t)&v45, a1 + 1088, (uint64_t *)&v43, v44);
    v41 = *(_DWORD *)(a1 + 1184);
    if (v41 == 1)
    {
      sub_1C63CC228(a1);
      v41 = *(_DWORD *)(a1 + 1184);
    }
    *(_DWORD *)(a1 + 1184) = v41 - 1;
  }
  else
  {
    v15 = *(_DWORD *)(v45 + 16);
  }
  LODWORD(v14) = v14 + 1;
LABEL_12:
  v14 = v14;
  if (!v12)
    goto LABEL_14;
LABEL_13:
  for (i = *(unsigned int *)(v12 + 8); v14 < i; i = 0)
  {
    v19 = sub_1C602C698(a1, *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8 * v14), 0);
    v20 = v50;
    if (v50 >= (unint64_t)HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v51, v50 + 1, 4);
      v20 = v50;
    }
    *((_DWORD *)v49 + v20) = v19;
    LODWORD(v50) = v50 + 1;
    ++v14;
    if (v12)
      goto LABEL_13;
LABEL_14:
    ;
  }
  v21 = v50;
  if (!(_DWORD)v50)
  {
    LOWORD(v45) = 4609;
    v47 = 0;
    v48 = 0;
    __p = 0;
    goto LABEL_27;
  }
  v22 = v49;
  v23 = (char *)v49 + 4 * v50;
  if (*((_DWORD *)v23 - 1) != 3)
  {
    LOWORD(v45) = 4609;
    __p = 0;
    v47 = 0;
    goto LABEL_26;
  }
  *((_DWORD *)v23 - 1) = 0;
  v22 = v49;
  v21 = v50;
  LOWORD(v45) = 4609;
  v47 = 0;
  v48 = 0;
  __p = 0;
  if ((_DWORD)v50)
  {
LABEL_26:
    v24 = 4 * v21;
    v25 = (char *)operator new(v24);
    v26 = &v25[v24];
    __p = v25;
    v48 = &v25[v24];
    memcpy(v25, v22, v24);
    v47 = v26;
  }
LABEL_27:
  v27 = a1 + 544;
  v28 = a1 + 560;
  v29 = sub_1C63EFB2C(v28, (__int16 *)&v45);
  v31 = sub_1C611BE0C(v27, v29, v30);
  v32 = 0;
  v33 = v42;
  switch(*(_BYTE *)(a2 + 52))
  {
    case 0xB1:
      v32 = 7;
      break;
    case 0xB2:
      v32 = 2;
      break;
    case 0xB3:
      v32 = 4;
      break;
    case 0xB4:
      break;
    case 0xB5:
      v32 = 11;
      break;
    default:
      v32 = 0;
      v33 = v42;
      break;
  }
  LOWORD(v43) = 4105;
  *(_DWORD *)((char *)&v43 + 2) = v33;
  *(_DWORD *)((char *)&v43 + 6) = v11;
  *(_DWORD *)((char *)&v43 + 10) = v15;
  BYTE14(v43) = v32;
  HIBYTE(v43) = a6;
  LOWORD(v44[0]) = v50;
  *(_DWORD *)((char *)v44 + 2) = v31;
  v44[2] = a4;
  v34 = sub_1C63EF968(v28, (__int16 *)&v43);
  v36 = sub_1C611BE0C(v27, v34, v35);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v49 != v51)
    free(v49);
  return v36;
}

uint64_t sub_1C602DB4C(uint64_t result, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t i;
  char v22;
  uint64_t v23;
  uint64_t j;
  char *v25;

  v2 = *a2;
  if (!*a2)
    return result;
  v3 = result;
  v5 = (unsigned __int8 **)(result + 24);
  v4 = *(_QWORD *)(result + 24);
  if (v2 == (unsigned __int8 *)v4)
    return result;
  v7 = *(unsigned __int8 **)&v2[-8 * *((unsigned int *)v2 + 2)];
  if (!v7)
    return result;
  v8 = *((_DWORD *)v2 + 1);
  v9 = HIBYTE(v8) || v8 == 15732480;
  if (v9 || v8 == 16707566)
    return result;
  v11 = *(_QWORD *)(result + 696);
  if (!*(_BYTE *)(v11 + 345))
    *(_BYTE *)(v11 + 345) = 1;
  if (!v4)
  {
    v13 = *v7;
LABEL_23:
    if (v13 != 15)
      v7 = *(unsigned __int8 **)&v7[-8 * *((unsigned int *)v7 + 2)];
    v15 = sub_1C602B774(result, (unint64_t)v7);
    *(_DWORD *)(*(_QWORD *)(v3 + 696) + 316) = v15;
    goto LABEL_26;
  }
  v12 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
  if (*(_BYTE *)v12 != 15)
    v12 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
  v13 = *v7;
  v14 = v7;
  if (v13 != 15)
    v14 = *(unsigned __int8 **)&v7[-8 * *((unsigned int *)v7 + 2)];
  if ((unsigned __int8 *)v12 != v14)
    goto LABEL_23;
  v15 = *(unsigned int *)(v11 + 316);
LABEL_26:
  if (v5 != a2)
  {
    if (*v5)
      llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
    v16 = *a2;
    *v5 = *a2;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)v5, v16, 2);
  }
  v17 = *(unsigned int *)(*(_QWORD *)(v3 + 696) + 312);
  v18 = (uint64_t)*a2;
  v19 = *((_DWORD *)*a2 + 2);
  if (v19 == 2)
  {
    v20 = *(_QWORD *)(v18 - 8);
    if (v20)
    {
      for (i = *(_QWORD *)(v18 - 16); (*(_BYTE *)i & 0xFE) == 0x12; i = *(_QWORD *)(i
                                                                                   - 8 * *(unsigned int *)(i + 8)
                                                                                   + 8))
        ;
      v17 = *((unsigned int *)sub_1C602B9A8(v3, v20, i) + 30);
      if (*(_DWORD *)(v18 + 8) == 2)
      {
        v22 = 1;
        while (1)
        {
          v23 = *(_QWORD *)(v18 - 8);
          if (!v23)
            break;
          for (j = *(_QWORD *)(v18 - 16);
                (*(_BYTE *)j & 0xFE) == 0x12;
          v25 = sub_1C602B9A8(v3, *(_QWORD *)(v18 - 8), j);
          if ((v22 & 1) == 0)
            sub_1C602DE14((unsigned int *)v25 + 22, v18);
          v22 = 0;
          v18 = v23;
          if (*(_DWORD *)(v23 + 8) != 2)
            goto LABEL_47;
        }
      }
      v23 = v18;
LABEL_47:
      sub_1C602DE14((unsigned int *)(*(_QWORD *)(v3 + 696) + 40), v23);
      v18 = (uint64_t)*a2;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 440)
                                                                                             + 736))(*(_QWORD *)(v3 + 440), v17, v15, *(unsigned int *)(v18 + 4), *(unsigned __int16 *)(v18 + 2), 0, 0);
}

unsigned int *sub_1C602DE14(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD **)result;
  v5 = result[2];
  v6 = *(_QWORD **)result;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    v6 = *(_QWORD **)result;
    while (*v6 != a2)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        v6 = &v4[v5];
        break;
      }
    }
  }
  if (v5 == v6 - v4)
  {
    if (v5 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v5 + 1, 8);
      v4 = *(_QWORD **)v3;
      v5 = v3[2];
    }
    v4[v5] = a2;
    ++v3[2];
  }
  return result;
}

llvm::APInt *sub_1C602DEB4(llvm::APInt *result, uint64_t a2)
{
  llvm::APInt *v2;
  llvm::APInt *v4;
  __int16 v5;
  uint64_t NamedMetadata;
  uint64_t i;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void **v42;
  uint64_t isConstant;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  void **v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  llvm::APInt *v59;
  char v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::APInt *v65;
  _QWORD v66[2];
  int v67;
  __int16 v68;
  uint64_t v69;
  void **v70;
  void *__p;
  uint64_t v72;
  _BYTE v73[8];
  int v74;
  __int16 v75;
  uint64_t v76;

  v2 = result;
  v76 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*((_QWORD *)result + 2) + 2108)
    || (v65 = result,
        result = (llvm::APInt *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)result + 1) + 248) + 24))(*(_QWORD *)(*((_QWORD *)result + 1) + 248)),
        v2 = v65,
        !*((_QWORD *)result + 48)))
  {
    *((_QWORD *)v2 + 1) = 0;
    return result;
  }
  v68 = 260;
  v66[0] = a2 + 216;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v66);
  if (v74 <= 40)
  {
    if (v74 != 3)
    {
      v4 = v65;
      if (v74 == 39)
      {
        v5 = 244;
        goto LABEL_14;
      }
LABEL_106:
      llvm::report_fatal_error((llvm *)"target architecture doesn't map to a CodeView CPUType", (const char *)1);
    }
    v5 = 246;
    goto LABEL_13;
  }
  if (v74 == 41)
  {
    v5 = 7;
LABEL_13:
    v4 = v65;
    goto LABEL_14;
  }
  v4 = v65;
  if (v74 != 42)
    goto LABEL_106;
  v5 = 208;
LABEL_14:
  *((_WORD *)v4 + 345) = v5;
  if ((v73[7] & 0x80000000) != 0)
    operator delete(__p);
  __p = "llvm.dbg.cu";
  v75 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)&__p);
  if (NamedMetadata)
  {
    v8 = *(_QWORD *)(NamedMetadata + 48);
    v19 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v19)
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8 * i) + 36))
          break;
      }
    }
    else
    {
      LODWORD(i) = 0;
    }
  }
  else
  {
    LODWORD(i) = 0;
    v8 = MEMORY[0x30];
  }
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8 * i) + 24) - 1;
  v62 = a2;
  if (v9 > 0x22)
    v10 = 3;
  else
    v10 = byte_1C86778E0[v9];
  *((_BYTE *)v65 + 704) = v10;
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v11 = *(_QWORD *)(*((_QWORD *)v65 + 2) + 2064);
  v12 = v11 + 8;
  v13 = *(_QWORD *)(v11 + 16);
  if (v13 == v11 + 8)
  {
    v18 = 0;
  }
  else
  {
    do
    {
      if (v13)
        v14 = (unsigned int *)(v13 - 56);
      else
        v14 = 0;
      __p = v73;
      v72 = 0x100000000;
      llvm::GlobalVariable::getDebugInfo(v14, (uint64_t)&__p);
      v15 = (uint64_t *)__p;
      if ((_DWORD)v72)
      {
        v16 = 8 * v72;
        do
        {
          v17 = *v15++;
          v69 = v17;
          sub_1C6180A54((uint64_t)v66, &v69)[1] = v14;
          v16 -= 8;
        }
        while (v16);
        v15 = (uint64_t *)__p;
      }
      if (v15 != (uint64_t *)v73)
        free(v15);
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13 != v12);
    v11 = *(_QWORD *)(*((_QWORD *)v65 + 2) + 2064);
    v18 = v66[0];
  }
  __p = "llvm.dbg.cu";
  v75 = 259;
  v20 = llvm::Module::getNamedMetadata(v11, (uint64_t)&__p);
  v63 = *(unsigned int *)(*(_QWORD *)(v20 + 48) + 8);
  v64 = v20;
  if ((_DWORD)v63)
  {
    v21 = 0;
    v22 = (_DWORD *)((char *)v65 + 784);
    v23 = v67;
    v24 = v67 - 1;
    do
    {
      v25 = *(_QWORD *)(**(_QWORD **)(v64 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8) + 48);
      if (v26)
        v27 = (uint64_t *)(v26 - 8 * *(unsigned int *)(v26 + 8));
      else
        v27 = 0;
      while (v27 != (uint64_t *)v26)
      {
        v28 = *v27;
        v29 = (uint64_t *)(*v27 - 8 * *(unsigned int *)(*v27 + 8));
        v30 = *v29;
        v31 = v29[1];
        v32 = *(_QWORD **)(v31 + 24);
        if (((*(_QWORD *)(v31 + 32) - (_QWORD)v32) & 0x7FFFFFFF8) == 0x10 && *v32 == 35)
        {
          v42 = (void **)v32[1];
          v69 = v30;
          v70 = v42;
          sub_1C618F0E8((uint64_t)&__p, (uint64_t)v65 + 712, &v69, (uint64_t *)&v70);
          v22 = (_DWORD *)((char *)v65 + 784);
          if (!v23)
            goto LABEL_66;
        }
        else if (!v23)
        {
          goto LABEL_66;
        }
        v33 = ((v28 >> 4) ^ (v28 >> 9)) & v24;
        v34 = *(_QWORD *)(v18 + 16 * v33);
        if (v28 == v34)
          goto LABEL_49;
        v54 = 1;
        while (v34 != -4096)
        {
          v55 = v33 + v54++;
          LODWORD(v33) = v55 & v24;
          v34 = *(_QWORD *)(v18 + 16 * v33);
          if (v28 == v34)
            goto LABEL_69;
        }
LABEL_66:
        isConstant = llvm::DIExpression::isConstant((llvm::DIExpression *)v31);
        v22 = (_DWORD *)((char *)v65 + 784);
        if ((isConstant & 0xFF00000000) != 0)
        {
          v44 = v31 | 4;
          v45 = *((unsigned int *)v65 + 206);
          if (v45 >= *((_DWORD *)v65 + 207))
          {
            sub_1C4F76720((_DWORD *)v65 + 204, v30, v44);
            v22 = (_DWORD *)((char *)v65 + 784);
          }
          else
          {
            v46 = (uint64_t *)(*((_QWORD *)v65 + 102) + 16 * v45);
            *v46 = v30;
            v46[1] = v44;
            ++*((_DWORD *)v65 + 206);
          }
        }
LABEL_69:
        if (!v23)
          goto LABEL_64;
        v33 = ((v28 >> 4) ^ (v28 >> 9)) & v24;
        v47 = *(_QWORD *)(v18 + 16 * v33);
        if (v28 != v47)
        {
          v48 = 1;
          while (v47 != -4096)
          {
            v49 = v33 + v48++;
            v33 = v49 & v24;
            v47 = *(_QWORD *)(v18 + 16 * v33);
            if (v28 == v47)
              goto LABEL_49;
          }
          goto LABEL_64;
        }
LABEL_49:
        v35 = *(_QWORD *)(v18 + 16 * v33 + 8);
        if (v35)
        {
          v36 = *(_DWORD *)(v35 + 32);
          if ((v36 & 0xF) != 1)
          {
            if (*(_BYTE *)(v35 + 16))
            {
              if (*(_BYTE *)(v35 + 16) == 3 && (*(_DWORD *)(v35 + 20) & 0x7FFFFFF) == 0)
                goto LABEL_64;
            }
            else if ((v36 & 0x800000) == 0 && *(_QWORD *)(v35 + 72) == v35 + 72)
            {
              goto LABEL_64;
            }
            v37 = *(unsigned __int8 **)(v30 - 8 * *(unsigned int *)(v30 + 8));
            if (v37 && *v37 - 17 <= 2)
            {
              v69 = *(_QWORD *)(v30 - 8 * *(unsigned int *)(v30 + 8));
              v70 = 0;
              sub_1C63CDDB0((uint64_t)&__p, (uint64_t)v65 + 760, &v69, (uint64_t *)&v70);
              v50 = v70;
              if (v70)
              {
                if (*v70 != v70 + 2)
                  free(*v70);
                MEMORY[0x1CAA32FC0](v50, 0x1080C40ABB4582ELL);
              }
              if (v73[0])
              {
                v51 = (_QWORD *)operator new();
                *v51 = v51 + 2;
                v51[1] = 0x100000000;
                v52 = __p;
                v53 = (void **)*((_QWORD *)__p + 1);
                *((_QWORD *)__p + 1) = v51;
                if (v53)
                {
                  if (*v53 != v53 + 2)
                  {
                    v61 = v53;
                    free(*v53);
                    v53 = v61;
                  }
                  MEMORY[0x1CAA32FC0](v53, 0x1080C40ABB4582ELL);
                }
              }
              else
              {
                v52 = __p;
              }
              v38 = (_DWORD *)v52[1];
              v22 = (_DWORD *)((char *)v65 + 784);
            }
            else if (*(_QWORD *)(v35 + 48))
            {
              v38 = v22;
            }
            else
            {
              v38 = (_DWORD *)((char *)v65 + 816);
            }
            v39 = v35 & 0xFFFFFFFFFFFFFFFBLL;
            v40 = v38[2];
            if (v40 >= v38[3])
            {
              sub_1C4F76720(v38, v30, v39);
              v22 = (_DWORD *)((char *)v65 + 784);
            }
            else
            {
              v41 = (uint64_t *)(*(_QWORD *)v38 + 16 * v40);
              *v41 = v30;
              v41[1] = v39;
              ++v38[2];
            }
          }
        }
LABEL_64:
        ++v27;
      }
      ++v21;
    }
    while (v21 != v63);
  }
  MEMORY[0x1CAA32FB4](v18, 8);
  result = (llvm::APInt *)llvm::Module::getModuleFlag(v62, "CodeViewGHash", 0xDuLL);
  if (result)
  {
    v56 = *((_QWORD *)result + 16);
    if (v56)
    {
      result = (llvm::APInt *)(v56 + 24);
      v57 = *(_DWORD *)(v56 + 32);
      if (v57 > 0x40)
      {
        result = (llvm::APInt *)llvm::APInt::countLeadingZerosSlowCase(result);
        v58 = (_DWORD)result == v57;
      }
      else
      {
        v58 = *(_QWORD *)result == 0;
      }
      v60 = v58;
      v59 = v65;
      LOBYTE(v56) = v60 ^ 1;
      goto LABEL_104;
    }
  }
  else
  {
    LOBYTE(v56) = 0;
  }
  v59 = v65;
LABEL_104:
  *((_BYTE *)v59 + 688) = v56;
  return result;
}

unsigned int *sub_1C602E530(unsigned int *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NamedMetadata;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  std::string::size_type v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  std::string::size_type v43;
  const char *v44;
  _QWORD *v45;
  std::string::size_type v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ****v50;
  uint64_t ****v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::DIScope *v57;
  uint64_t v58;
  size_t v59;
  const void *v60;
  size_t *v61;
  size_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::DIScope *v68;
  uint64_t v69;
  size_t v70;
  const void *v71;
  size_t *v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t k;
  uint64_t v79;
  uint64_t v80;
  std::string::size_type *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::string::size_type v91;
  std::string::size_type v92;
  uint64_t ***v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t ****v101;
  uint64_t ***v102;
  uint64_t ****v103;
  int v104;
  BOOL v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t *v115;
  std::string::size_type v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t ****v121;
  uint64_t ***v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ****v129;
  uint64_t ***v130;
  int v131;
  int v132;
  uint64_t *v133;
  uint64_t v134;
  std::string::size_type v135;
  std::string *v136;
  uint64_t *v137;
  int v138;
  _BOOL8 v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::string *v154;
  unint64_t v155;
  void *v156;
  uint64_t *v157;
  uint64_t v158;
  std::string::size_type v159;
  std::string *p_p;
  uint64_t v161;
  uint64_t *v162;
  int v163;
  _BOOL8 v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t ****v186;
  uint64_t ***v187;
  uint64_t ****v188;
  int v189;
  BOOL v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int **v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  std::string *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  uint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *m;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t ****v242;
  std::string::size_type v243;
  uint64_t ****v244;
  std::string::size_type v245;
  std::string::size_type *v246;
  std::string::size_type v247;
  uint64_t v248;
  std::__shared_weak_count_vtbl *v249;
  unint64_t v250;
  std::string::size_type v251;
  std::string::size_type v252;
  std::string::size_type *v253;
  std::string::size_type v254;
  std::__shared_weak_count_vtbl *v255;
  unint64_t v256;
  std::__shared_weak_count_vtbl *v257;
  unint64_t v258;
  uint64_t v259;
  std::string::size_type v260;
  size_t v261;
  std::__shared_weak_count_vtbl *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  size_t v268;
  const void *v269;
  size_t *v270;
  size_t v271;
  char v272;
  BOOL v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  std::string *p_dst;
  std::string::size_type size;
  std::__shared_weak_count_vtbl *v280;
  unint64_t v281;
  std::__shared_weak_count_vtbl *v282;
  unint64_t v283;
  unsigned int v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  void ***v302;
  uint64_t v303;
  void ***v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  size_t v312;
  BOOL v314;
  BOOL v315;
  int v316;
  unsigned int v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t ****v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t Symbol;
  unint64_t v334;
  uint64_t v335;
  BOOL v336;
  _QWORD v337[4];
  __int16 v338;
  uint64_t v339[4];
  __int16 v340;
  std::string __dst;
  uint64_t v342;
  uint64_t v343;
  char v344;
  uint64_t v345;
  int v346;
  std::string *p_src;
  std::string __p;
  uint64_t v349;
  _BYTE *v350;
  int v351;
  uint64_t (**v352)(llvm::detail::format_adapter *__hidden);
  uint64_t v353;
  _QWORD v354[2];
  std::string __src;
  std::string::size_type v356;
  __int16 v357;
  uint64_t v358;

  v358 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)result + 1))
  {
    v2 = (uint64_t)result;
    if (*(_BYTE *)(*((_QWORD *)result + 2) + 2108))
    {
      sub_1C63CA73C((uint64_t)result, 0);
      v3 = sub_1C63CA84C(v2, 0xF1u);
      sub_1C63CA930(v2);
      v4 = sub_1C63CB110(v2, 0x113Cu);
      LODWORD(v5) = *(unsigned __int8 *)(v2 + 704);
      if (llvm::Module::getProfileSummary(*(llvm::Module **)(*(_QWORD *)(v2 + 16) + 2064), 0))
        LODWORD(v5) = v5 | 0x40000;
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 2064) + 216;
      LOWORD(v343) = 260;
      __dst.__r_.__value_.__r.__words[0] = v6;
      llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&__dst);
      v7 = v349;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 248) + 1064) >> 7) & 1;
      if (v7 == 39)
        v8 = 1;
      if (v7 == 3)
        v8 = 1;
      if (v8)
        v5 = v5 | 0x4000;
      else
        v5 = v5;
      v9 = *(_QWORD *)(v2 + 440);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Flags and language";
      LOWORD(v350) = 259;
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v9 + 112))(v9, &__p, 1);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), v5, 4);
      v10 = *(_QWORD *)(v2 + 440);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"CPUType";
      LOWORD(v350) = 259;
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v10 + 112))(v10, &__p, 1);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), *(unsigned __int16 *)(v2 + 690), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 2064);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.dbg.cu";
      LOWORD(v350) = 259;
      NamedMetadata = llvm::Module::getNamedMetadata(v11, (uint64_t)&__p);
      v13 = *(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                      - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8)
                      + 8);
      if (!v13)
      {
        v14 = 0;
        v15 = 0;
        v16 = 0uLL;
        goto LABEL_31;
      }
      v17 = *(unint64_t **)(v13 + 8);
      v18 = *v17;
      v14 = (char *)(v17 + 3);
      v15 = v18;
      v16 = 0uLL;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0u;
      if (!v18)
      {
LABEL_31:
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v16;
        v24 = *(_QWORD *)(v2 + 440);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Frontend version";
        LOWORD(v350) = 259;
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v24 + 112))(v24, &__p, 1);
        for (i = 0; i != 16; i += 4)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), *(int *)((char *)&__dst.__r_.__value_.__l.__data_ + i), 2);
        *(_OWORD *)&__src.__r_.__value_.__l.__data_ = xmmword_1C8677960;
        v26 = *(_QWORD *)(v2 + 440);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Backend version";
        LOWORD(v350) = 259;
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v26 + 112))(v26, &__p, 1);
        for (j = 0; j != 16; j += 4)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), *(int *)((char *)&__src.__r_.__value_.__l.__data_ + j), 2);
        v28 = *(_QWORD *)(v2 + 440);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Null-terminated compiler version string";
        LOWORD(v350) = 259;
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v28 + 112))(v28, &__p, 1);
        sub_1C6030BE0(*(_QWORD *)(v2 + 440), v14, v15, 3840);
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
        (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v4, 0);
        (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v3, 0);
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
        if (*(_DWORD *)(v2 + 1048))
        {
          v29 = *(_QWORD *)(v2 + 440);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Inlinee lines subsection";
          LOWORD(v350) = 259;
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v29 + 112))(v29, &__p, 1);
          v334 = sub_1C63CA84C(v2, 0xF6u);
          v30 = *(_QWORD *)(v2 + 440);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Inlinee lines signature";
          LOWORD(v350) = 259;
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v30 + 112))(v30, &__p, 1);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
          v31 = *(unsigned int *)(v2 + 1048);
          if ((_DWORD)v31)
          {
            v32 = 8 * v31;
            v33 = *(unint64_t **)(v2 + 1040);
            do
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v33;
              v34 = __p.__r_.__value_.__r.__words[0];
              v35 = *((unsigned int *)sub_1C63181A0(v2 + 1088, (uint64_t *)&__p) + 4);
              (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 440) + 152))(*(_QWORD *)(v2 + 440));
              v36 = v34;
              if (*(_BYTE *)v34 != 15)
                v36 = *(_QWORD *)(v34 - 8 * *(unsigned int *)(v34 + 8));
              v37 = sub_1C602B774(v2, v36);
              v38 = *(_QWORD *)(v2 + 440);
              v39 = *(_QWORD *)(v34 - 8 * *(unsigned int *)(v34 + 8) + 16);
              if (v39)
              {
                v41 = *(uint64_t **)(v39 + 8);
                v42 = *v41;
                v40 = v41 + 3;
                v39 = v42;
              }
              else
              {
                v40 = 0;
              }
              v338 = 1283;
              v337[0] = "Inlined function ";
              v337[2] = v40;
              v337[3] = v39;
              v339[0] = (uint64_t)v337;
              v339[2] = (uint64_t)" starts at ";
              v340 = 770;
              v43 = v34;
              if (*(_BYTE *)v34 == 15 || (v43 = *(_QWORD *)(v34 - 8 * *(unsigned int *)(v34 + 8))) != 0)
              {
                v43 = *(_QWORD *)(v43 - 8 * *(unsigned int *)(v43 + 8));
                if (v43)
                {
                  v45 = *(_QWORD **)(v43 + 8);
                  v46 = *v45;
                  v44 = (const char *)(v45 + 3);
                  v43 = v46;
                }
                else
                {
                  v44 = 0;
                }
              }
              else
              {
                v44 = "";
              }
              __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v339;
              __src.__r_.__value_.__r.__words[2] = (std::string::size_type)v44;
              v356 = v43;
              v357 = 1282;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src;
              __dst.__r_.__value_.__r.__words[2] = 58;
              LOWORD(v343) = 1794;
              v1 = v1 & 0xFFFFFFFF00000000 | *(unsigned int *)(v34 + 24);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              __p.__r_.__value_.__r.__words[2] = v1;
              LOWORD(v350) = 2050;
              (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v38 + 112))(v38, &__p, 1);
              (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 440) + 152))(*(_QWORD *)(v2 + 440));
              v47 = *(_QWORD *)(v2 + 440);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Type index of inlined function";
              LOWORD(v350) = 259;
              (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v47 + 112))(v47, &__p, 1);
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), v35, 4);
              v48 = *(_QWORD *)(v2 + 440);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Offset into filechecksum table";
              LOWORD(v350) = 259;
              (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v48 + 112))(v48, &__p, 1);
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 816))(*(_QWORD *)(v2 + 440), v37);
              v49 = *(_QWORD *)(v2 + 440);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Starting line number";
              LOWORD(v350) = 259;
              (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v49 + 112))(v49, &__p, 1);
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), *(unsigned int *)(v34 + 24), 4);
              ++v33;
              v32 -= 8;
            }
            while (v32);
          }
          (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v334, 0);
          (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
        }
        v50 = *(uint64_t *****)(v2 + 952);
        v51 = *(uint64_t *****)(v2 + 960);
        if (v50 == v51)
        {
LABEL_52:
          v52 = *(unsigned int *)(v2 + 824);
          if ((_DWORD)v52)
          {
            v53 = *(uint64_t **)(v2 + 816);
            v54 = 16 * v52;
            do
            {
              v55 = *v53;
              v56 = *v53 - 8 * *(unsigned int *)(*v53 + 8);
              v57 = *(llvm::DIScope **)v56;
              sub_1C60310B8(v2, *(_QWORD *)(v56 + 24));
              v58 = *(_QWORD *)(v55 - 8 * *(unsigned int *)(v55 + 8) + 8);
              if (v58)
              {
                v61 = *(size_t **)(v58 + 8);
                v62 = *v61;
                v60 = v61 + 3;
                v59 = v62;
              }
              else
              {
                v59 = 0;
                v60 = 0;
              }
              sub_1C63CA530(&__p, v2, v57, v60, v59);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v53 += 2;
              v54 -= 16;
            }
            while (v54);
          }
          v63 = *(unsigned int *)(v2 + 792);
          if ((_DWORD)v63)
          {
            v64 = *(uint64_t **)(v2 + 784);
            v65 = 16 * v63;
            do
            {
              v66 = *v64;
              v67 = *v64 - 8 * *(unsigned int *)(*v64 + 8);
              v68 = *(llvm::DIScope **)v67;
              sub_1C60310B8(v2, *(_QWORD *)(v67 + 24));
              v69 = *(_QWORD *)(v66 - 8 * *(unsigned int *)(v66 + 8) + 8);
              if (v69)
              {
                v72 = *(size_t **)(v69 + 8);
                v73 = *v72;
                v71 = v72 + 3;
                v70 = v73;
              }
              else
              {
                v70 = 0;
                v71 = 0;
              }
              sub_1C63CA530(&__dst, v2, v68, v71, v70);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              v64 += 2;
              v65 -= 16;
            }
            while (v65);
          }
          v74 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 2064);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.dbg.cu";
          LOWORD(v350) = 259;
          v75 = llvm::Module::getNamedMetadata(v74, (uint64_t)&__p);
          v76 = *(unsigned int *)(*(_QWORD *)(v75 + 48) + 8);
          if ((_DWORD)v76)
          {
            v77 = v75;
            for (k = 0; k != v76; ++k)
            {
              v79 = *(_QWORD *)(**(_QWORD **)(v77 + 48) + 8 * k);
              v80 = *(_QWORD *)(v79 - 8 * *(unsigned int *)(v79 + 8) + 40);
              if (v80)
                v81 = (std::string::size_type *)(v80 - 8 * *(unsigned int *)(v80 + 8));
              else
                v81 = 0;
              while (v81 != (std::string::size_type *)v80)
              {
                v82 = *(unsigned __int8 *)*v81;
                if ((v82 - 11) < 4 || v82 == 33)
                  sub_1C602C698(v2, *v81, 0);
                ++v81;
              }
            }
          }
          *(_QWORD *)(v2 + 1192) = 0;
          v83 = *(_QWORD *)(v2 + 1208);
          v84 = *(_QWORD *)(v2 + 1200);
          while (v83 != v84)
          {
            if (*(char *)(v83 - 9) < 0)
              operator delete(*(void **)(v83 - 32));
            v83 -= 32;
          }
          *(_QWORD *)(v2 + 1208) = v84;
          sub_1C63CAB00(v2);
          sub_1C63CA73C(v2, 0);
          if (*(_QWORD *)(v2 + 1224) != *(_QWORD *)(v2 + 1232))
          {
            v85 = sub_1C63CA84C(v2, 0xF1u);
            sub_1C63CAD10(v2, *(void ***)(v2 + 1224), *(void ***)(v2 + 1232));
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v85, 0);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
          }
          v86 = *(_QWORD *)(v2 + 440);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"File index to string table offset subsection";
          LOWORD(v350) = 259;
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v86 + 112))(v86, &__p, 1);
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 440) + 808))(*(_QWORD *)(v2 + 440));
          v87 = *(_QWORD *)(v2 + 440);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"String table";
          LOWORD(v350) = 259;
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v87 + 112))(v87, &__p, 1);
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 440) + 800))(*(_QWORD *)(v2 + 440));
          *(std::string::size_type *)((char *)&__src.__r_.__value_.__r.__words[1] + 4) = 0;
          *(std::string::size_type *)((char *)__src.__r_.__value_.__r.__words + 4) = 0;
          v88 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 2064);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.dbg.cu";
          LOWORD(v350) = 259;
          v89 = ***(_QWORD ***)(llvm::Module::getNamedMetadata(v88, (uint64_t)&__p) + 48);
          if (*(_BYTE *)v89 != 15)
            v89 = *(_QWORD *)(v89 - 8 * *(unsigned int *)(v89 + 8));
          v90 = v2 + 544;
          v91 = *(_QWORD *)(v89 - 8 * *(unsigned int *)(v89 + 8) + 8);
          if (v91)
          {
            v246 = *(std::string::size_type **)(v91 + 8);
            v247 = *v246;
            v92 = (std::string::size_type)(v246 + 3);
            v91 = v247;
          }
          else
          {
            v92 = 0;
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 5637;
          *(_DWORD *)&__p.__r_.__value_.__s.__data_[2] = 0;
          __p.__r_.__value_.__l.__size_ = v92;
          __p.__r_.__value_.__r.__words[2] = v91;
          v248 = v2 + 560;
          v249 = sub_1C63F0CD4(v2 + 560, (__int16 *)&__p);
          LODWORD(__src.__r_.__value_.__l.__data_) = sub_1C611BE0C(v2 + 544, v249, v250);
          v251 = *(_QWORD *)(v89 - 8 * *(unsigned int *)(v89 + 8));
          if (v251)
          {
            v253 = *(std::string::size_type **)(v251 + 8);
            v254 = *v253;
            v252 = (std::string::size_type)(v253 + 3);
            v251 = v254;
          }
          else
          {
            v252 = 0;
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 5637;
          *(_DWORD *)&__p.__r_.__value_.__s.__data_[2] = 0;
          __p.__r_.__value_.__l.__size_ = v252;
          __p.__r_.__value_.__r.__words[2] = v251;
          v255 = sub_1C63F0CD4(v2 + 560, (__int16 *)&__p);
          LODWORD(__src.__r_.__value_.__r.__words[1]) = sub_1C611BE0C(v2 + 544, v255, v256);
          LOWORD(__p.__r_.__value_.__l.__data_) = 5637;
          *(_DWORD *)&__p.__r_.__value_.__s.__data_[2] = 0;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"";
          __p.__r_.__value_.__r.__words[2] = 0;
          v257 = sub_1C63F0CD4(v2 + 560, (__int16 *)&__p);
          HIDWORD(__src.__r_.__value_.__r.__words[1]) = sub_1C611BE0C(v2 + 544, v257, v258);
          v259 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 248);
          v260 = *(_QWORD *)(v259 + 1240);
          if (!v260)
            goto LABEL_270;
          v261 = strlen(*(const char **)(v259 + 1240));
          LOWORD(__p.__r_.__value_.__l.__data_) = 5637;
          *(_DWORD *)&__p.__r_.__value_.__s.__data_[2] = 0;
          __p.__r_.__value_.__l.__size_ = v260;
          __p.__r_.__value_.__r.__words[2] = v261;
          v262 = sub_1C63F0CD4(v2 + 560, (__int16 *)&__p);
          HIDWORD(__src.__r_.__value_.__r.__words[0]) = sub_1C611BE0C(v2 + 544, v262, v263);
          v264 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 248);
          v265 = *(_QWORD *)(v264 + 1248);
          v266 = *(_QWORD *)(v264 + 1256);
          v267 = *(_QWORD *)(v89 - 8 * *(unsigned int *)(v89 + 8));
          if (v267)
          {
            v270 = *(size_t **)(v267 + 8);
            v271 = *v270;
            v269 = v270 + 3;
            v268 = v271;
          }
          else
          {
            v268 = 0;
            v269 = 0;
          }
          memset(&__dst, 0, sizeof(__dst));
          LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
          LOBYTE(v351) = 0;
          v352 = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
          v354[0] = &__dst;
          LODWORD(v353) = 0;
          v349 = 0;
          v350 = 0;
          __p.__r_.__value_.__r.__words[2] = 0;
          v272 = *(_BYTE *)(v265 + 23);
          v273 = v272 < 0;
          v274 = *(_QWORD *)v265;
          if (v272 >= 0)
            v274 = v265;
          v275 = v272 & 0x7F;
          if (v273)
            v275 = *(_QWORD *)(v265 + 8);
          v339[0] = v274;
          v339[1] = v275;
          v276 = llvm::StringRef::find(v339, "-cc1", 4uLL, 0);
          v336 = v276 == -1;
          if (v276 == -1)
            llvm::sys::printArg((llvm::raw_ostream *)&__p, "-cc1", 4uLL, 1);
          if (!v266)
          {
LABEL_261:
            v277 = (uint64_t)&v350[-__p.__r_.__value_.__r.__words[2]];
            if (v350 != (_BYTE *)__p.__r_.__value_.__r.__words[2])
            {
              v350 = (_BYTE *)__p.__r_.__value_.__r.__words[2];
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&__p, (const char *)__p.__r_.__value_.__r.__words[2], v277);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
            v248 = v2 + 560;
            v90 = v2 + 544;
            if ((_DWORD)v353 == 1 && __p.__r_.__value_.__r.__words[2])
              MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924, v277);
            p_dst = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __dst.__r_.__value_.__l.__size_;
            LOWORD(__p.__r_.__value_.__l.__data_) = 5637;
            *(_DWORD *)&__p.__r_.__value_.__s.__data_[2] = 0;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)p_dst;
            __p.__r_.__value_.__r.__words[2] = size;
            v280 = sub_1C63F0CD4(v2 + 560, (__int16 *)&__p);
            LODWORD(__src.__r_.__value_.__r.__words[2]) = sub_1C611BE0C(v2 + 544, v280, v281);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_270:
            LOWORD(__p.__r_.__value_.__l.__data_) = 5635;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v349;
            __p.__r_.__value_.__r.__words[2] = 0x500000000;
            sub_1C617D6D0((unsigned int *)&__p.__r_.__value_.__r.__words[1], &__src, &__src.__r_.__value_.__s.__data_[20]);
            v282 = sub_1C63F0B10(v248, (__int16 *)&__p);
            v284 = sub_1C611BE0C(v90, v282, v283);
            v285 = sub_1C63CA84C(v2, 0xF1u);
            v286 = sub_1C63CB110(v2, 0x114Cu);
            v287 = *(_QWORD *)(v2 + 440);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"LF_BUILDINFO index";
            LOWORD(v343) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v287 + 112))(v287, &__dst, 1);
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), v284, 4);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v286, 0);
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v285, 0);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
            if ((uint64_t *)__p.__r_.__value_.__l.__size_ != &v349)
              free((void *)__p.__r_.__value_.__l.__size_);
            sub_1C63CAE30((_QWORD *)v2);
            if (*(_BYTE *)(v2 + 688))
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 56))(v90))
              {
                v288 = *(_QWORD *)(v2 + 440);
                v289 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 248) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 248));
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v288 + 168))(v288, *(_QWORD *)(v289 + 400), 0);
                (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
                v290 = *(_QWORD *)(v2 + 440);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Magic";
                LOWORD(v350) = 259;
                (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v290 + 112))(v290, &__p, 1);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 20171205, 4);
                v291 = *(_QWORD *)(v2 + 440);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Section Version";
                LOWORD(v350) = 259;
                (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v291 + 112))(v291, &__p, 1);
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 2);
                v292 = *(_QWORD *)(v2 + 440);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Hash Algorithm";
                LOWORD(v350) = 259;
                (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v292 + 112))(v292, &__p, 1);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 1, 2);
                v293 = *(unsigned int *)(v2 + 664);
                if ((_DWORD)v293)
                {
                  v320 = *(_QWORD *)(v2 + 656);
                  v321 = 8 * v293;
                  v322 = 4096;
                  v323 = v320;
                  do
                  {
                    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 440) + 88))(*(_QWORD *)(v2 + 440)))
                    {
                      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v356;
                      *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
                      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
                      v344 = 0;
                      v345 = 0;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A7280;
                      p_src = &__src;
                      v346 = 0;
                      v342 = 0;
                      v343 = 0;
                      __dst.__r_.__value_.__r.__words[2] = 0;
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:X+} [{1}]";
                      __p.__r_.__value_.__l.__size_ = 12;
                      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v354;
                      v349 = 2;
                      v350 = &unk_1E816A230;
                      v351 = v322;
                      v352 = &off_1E81AC068;
                      v353 = v323;
                      v354[0] = &v350;
                      v354[1] = &v352;
                      sub_1C639D338((uint64_t)&__p, (llvm::raw_ostream *)&__dst);
                      v324 = *(_QWORD *)(v2 + 440);
                      LOWORD(v350) = 261;
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                      (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v324 + 112))(v324, &__p, 1);
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
                      if (v346 == 1 && __dst.__r_.__value_.__r.__words[2])
                        MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
                      if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ != &v356)
                        free(__src.__r_.__value_.__l.__data_);
                      ++v322;
                    }
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 496))(*(_QWORD *)(v2 + 440), v320, 8);
                    v323 += 8;
                    v320 += 8;
                    v321 -= 8;
                  }
                  while (v321);
                }
              }
            }
            sub_1C63CBF74((unsigned int *)(v2 + 976));
            sub_1C4E2F044((_DWORD *)(v2 + 928));
            sub_1C6036354(v2 + 952, *(_QWORD *)(v2 + 952));
            sub_1C5A7CBDC(*(char **)(v2 + 1256));
            *(_QWORD *)(v2 + 1248) = v2 + 1256;
            *(_QWORD *)(v2 + 1264) = 0;
            *(_QWORD *)(v2 + 1256) = 0;
            v294 = *(_QWORD *)(v2 + 1208);
            v295 = *(_QWORD *)(v2 + 1200);
            while (v294 != v295)
            {
              if (*(char *)(v294 - 9) < 0)
                operator delete(*(void **)(v294 - 32));
              v294 -= 32;
            }
            *(_QWORD *)(v2 + 1208) = v295;
            v296 = *(_QWORD *)(v2 + 1232);
            v297 = *(_QWORD *)(v2 + 1224);
            while (v296 != v297)
            {
              if (*(char *)(v296 - 9) < 0)
                operator delete(*(void **)(v296 - 32));
              v296 -= 32;
            }
            *(_QWORD *)(v2 + 1232) = v297;
            sub_1C6201058((unsigned int *)(v2 + 1088));
            sub_1C61446F0((unsigned int *)(v2 + 1112));
            v298 = *(_DWORD *)(v2 + 768);
            if (!v298 && !*(_DWORD *)(v2 + 772))
              return sub_1C61446F0((unsigned int *)(v2 + 712));
            v299 = *(unsigned int *)(v2 + 776);
            v300 = *(_QWORD *)(v2 + 760);
            if (v299 > 4 * v298 && v299 >= 0x41)
            {
              v301 = (_QWORD *)(v2 + 760);
              v302 = (void ***)(v300 + 8);
              v303 = 16 * v299;
              do
              {
                if (((unint64_t)*(v302 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
                  v302 = sub_1C60376DC(v302);
                v302 += 2;
                v303 -= 16;
              }
              while (v303);
              if (v298)
              {
                v316 = 1 << (33 - __clz(v298 - 1));
                if (v316 <= 64)
                  v317 = 64;
                else
                  v317 = v316;
                if (v317 == *(_DWORD *)(v2 + 776))
                {
                  *(_QWORD *)(v2 + 768) = 0;
                  v318 = *(_QWORD **)(v2 + 760);
                  v319 = 16 * v317;
                  do
                  {
                    *v318 = -4096;
                    v318 += 2;
                    v319 -= 16;
                  }
                  while (v319);
                }
                else
                {
                  MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 760), 8);
                  v325 = (4 * v317 / 3 + 1) | ((unint64_t)(4 * v317 / 3 + 1) >> 1);
                  v326 = v325 | (v325 >> 2) | ((v325 | (v325 >> 2)) >> 4);
                  LODWORD(v326) = (((v326 | (v326 >> 8)) >> 16) | v326 | (v326 >> 8)) + 1;
                  *(_DWORD *)(v2 + 776) = v326;
                  v327 = operator new(16 * v326, (std::align_val_t)8uLL);
                  *(_QWORD *)(v2 + 760) = v327;
                  *(_QWORD *)(v2 + 768) = 0;
                  v328 = *(unsigned int *)(v2 + 776);
                  if ((_DWORD)v328)
                  {
                    v329 = 16 * v328;
                    do
                    {
                      *v327 = -4096;
                      v327 += 2;
                      v329 -= 16;
                    }
                    while (v329);
                  }
                }
                return sub_1C61446F0((unsigned int *)(v2 + 712));
              }
              if (*(_DWORD *)(v2 + 776))
              {
                MEMORY[0x1CAA32FB4](*v301, 8);
                *v301 = 0;
                *(_QWORD *)(v2 + 768) = 0;
                *(_DWORD *)(v2 + 776) = 0;
                return sub_1C61446F0((unsigned int *)(v2 + 712));
              }
LABEL_303:
              *(_QWORD *)(v2 + 768) = 0;
              return sub_1C61446F0((unsigned int *)(v2 + 712));
            }
            if (!(_DWORD)v299)
              goto LABEL_303;
            v304 = (void ***)(v300 + 8);
            v305 = 16 * v299;
            while (1)
            {
              v306 = (uint64_t)*(v304 - 1);
              if (v306 == -8192)
                goto LABEL_301;
              if (v306 != -4096)
                break;
LABEL_302:
              v304 += 2;
              v305 -= 16;
              if (!v305)
                goto LABEL_303;
            }
            v304 = sub_1C60376DC(v304);
LABEL_301:
            *(v304 - 1) = (void **)-4096;
            goto LABEL_302;
          }
          v307 = 0;
          v308 = 0;
          while (1)
          {
            v309 = v265 + 24 * v307;
            v310 = *(_BYTE *)(v309 + 23);
            if (v310 >= 0)
              v311 = v309;
            else
              v311 = *(_QWORD *)v309;
            if (v310 >= 0)
              v312 = v310 & 0x7F;
            else
              v312 = *(_QWORD *)(v309 + 8);
            if (!v312)
              goto LABEL_333;
            if (v312 == 2)
              break;
            if (v312 == 15)
            {
              if (*(_QWORD *)v311 != 0x69662D6E69616D2DLL || *(_QWORD *)(v311 + 7) != 0x656D616E2D656C69)
                goto LABEL_331;
              goto LABEL_322;
            }
            if (v312 < 0x11
              || (*(_QWORD *)v311 == 0x2D7463656A626F2DLL
                ? (v314 = *(_QWORD *)(v311 + 8) == 0x6D616E2D656C6966)
                : (v314 = 0),
                  v314 ? (v315 = *(_BYTE *)(v311 + 16) == 101) : (v315 = 0),
                  !v315))
            {
LABEL_331:
              if (v312 != v268 || memcmp((const void *)v311, v269, v268))
              {
                if (v336)
                {
                  if ((_BYTE *)v349 == v350)
                    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, " ", 1uLL);
                  else
                    *v350++ = 32;
                }
                v336 = 1;
                llvm::sys::printArg((llvm::raw_ostream *)&__p, (unsigned __int8 *)v311, v312, 1);
              }
            }
LABEL_333:
            v307 = ++v308;
            if (v266 <= v308)
              goto LABEL_261;
          }
          if (*(_WORD *)v311 != 28461)
            goto LABEL_331;
LABEL_322:
          ++v308;
          goto LABEL_333;
        }
        v330 = *(uint64_t *****)(v2 + 960);
        while (1)
        {
          v93 = *v50;
          v94 = *((_DWORD *)*v50 + 8);
          if ((v94 & 0xF) != 1)
            break;
LABEL_98:
          v50 += 2;
          if (v50 == v51)
            goto LABEL_52;
        }
        if (*((_BYTE *)v93 + 16))
        {
          if (*((_BYTE *)v93 + 16) == 3 && (*((_DWORD *)v93 + 5) & 0x7FFFFFF) == 0)
            goto LABEL_98;
        }
        else if ((v94 & 0x800000) == 0 && v93[9] == (uint64_t **)(v93 + 9))
        {
          goto LABEL_98;
        }
        v335 = (uint64_t)v50[1];
        Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(*(_QWORD *)(v2 + 8) + 248), (const llvm::GlobalValue *)v93);
        sub_1C63CA73C(v2, Symbol);
        memset(&__src, 0, sizeof(__src));
        v95 = v93 >> 4;
        if ((*((_BYTE *)v93 + 23) & 0x20) == 0)
          goto LABEL_116;
        v96 = ***v93;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
        v97 = *(_DWORD *)(v96 + 2496);
        if (v97)
        {
          v98 = *(_QWORD *)(v96 + 2480);
          v99 = v97 - 1;
          v100 = v99 & (v95 ^ (v93 >> 9));
          v101 = (uint64_t ****)(v98 + 40 * v100);
          v102 = *v101;
          if (*v101 == v93)
            goto LABEL_111;
          v103 = 0;
          v104 = 1;
          while (v102 != (uint64_t ***)-4096)
          {
            if (v103)
              v105 = 0;
            else
              v105 = v102 == (uint64_t ***)-8192;
            if (v105)
              v103 = v101;
            v106 = v100 + v104++;
            v100 = v106 & v99;
            v101 = (uint64_t ****)(v98 + 40 * v100);
            v102 = *v101;
            if (*v101 == v93)
              goto LABEL_111;
          }
          if (v103)
            v242 = v103;
          else
            v242 = v101;
        }
        else
        {
          v242 = 0;
        }
        v101 = (uint64_t ****)sub_1C541AB24(v96 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v242);
        v243 = __p.__r_.__value_.__r.__words[0];
        v101[4] = 0;
        v101[3] = 0;
        *v101 = (uint64_t ***)v243;
        v101[1] = (uint64_t ***)(v101 + 3);
        v101[2] = (uint64_t ***)0x100000000;
LABEL_111:
        v107 = *((unsigned int *)v101 + 4);
        if ((_DWORD)v107)
        {
          v108 = v101[1] + 1;
          v109 = 16 * v107;
          while (*((_DWORD *)v108 - 2))
          {
            v110 = 0;
            v108 += 2;
            v109 -= 16;
            if (!v109)
              goto LABEL_117;
          }
          v110 = *v108;
LABEL_117:
          *(_QWORD *)(v2 + 1192) = v110;
          v111 = *(_QWORD *)(v2 + 1208);
          v112 = *(_QWORD *)(v2 + 1200);
          while (v111 != v112)
          {
            if (*(char *)(v111 - 9) < 0)
              operator delete(*(void **)(v111 - 32));
            v111 -= 32;
          }
          *(_QWORD *)(v2 + 1208) = v112;
          if ((*(_BYTE *)(v110 + 43) & 2) == 0)
          {
            v113 = v110 - 8 * *(unsigned int *)(v110 + 8);
            v114 = *(_QWORD *)(v113 + 16);
            if (v114)
            {
              v115 = *(size_t **)(v114 + 8);
              if (*v115)
              {
                sub_1C63CA530(&__p, v2, *(llvm::DIScope **)(v113 + 8), v115 + 3, *v115);
                __src = __p;
                v116 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v116 = __src.__r_.__value_.__l.__size_;
                if (v116)
                {
LABEL_183:
                  v168 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 2064) + 216;
                  LOWORD(v343) = 260;
                  __dst.__r_.__value_.__r.__words[0] = v168;
                  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&__dst);
                  v169 = v349;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v332 = v110;
                  if (v169 == 41)
                    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 824))(*(_QWORD *)(v2 + 440), Symbol, 0);
                  v170 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Symbol subsection for ";
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__src;
                  LOWORD(v350) = 1027;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v170 + 112))(v170, &__p, 1);
                  v331 = sub_1C63CA84C(v2, 0xF1u);
                  if (((_DWORD)v93[4] & 0xFu) - 7 < 2)
                    v171 = 4422;
                  else
                    v171 = 4423;
                  v172 = sub_1C63CB110(v2, v171);
                  v173 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"PtrParent";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v173 + 112))(v173, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v174 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"PtrEnd";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v174 + 112))(v174, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v175 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"PtrNext";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v175 + 112))(v175, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v176 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Code size";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v176 + 112))(v176, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 832))(*(_QWORD *)(v2 + 440), *(_QWORD *)(v335 + 304), Symbol, 4);
                  v177 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Offset after prologue";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v177 + 112))(v177, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v178 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Offset before epilogue";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v178 + 112))(v178, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v179 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Function type index";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v179 + 112))(v179, &__p, 1);
                  v180 = *(_QWORD *)(v2 + 440);
                  if ((*((_BYTE *)v93 + 23) & 0x20) == 0)
                    goto LABEL_206;
                  v181 = ***v93;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
                  v182 = *(_DWORD *)(v181 + 2496);
                  if (v182)
                  {
                    v183 = *(_QWORD *)(v181 + 2480);
                    v184 = v182 - 1;
                    v185 = v184 & (v95 ^ (v93 >> 9));
                    v186 = (uint64_t ****)(v183 + 40 * v185);
                    v187 = *v186;
                    if (*v186 == v93)
                      goto LABEL_201;
                    v188 = 0;
                    v189 = 1;
                    while (v187 != (uint64_t ***)-4096)
                    {
                      if (v188)
                        v190 = 0;
                      else
                        v190 = v187 == (uint64_t ***)-8192;
                      if (v190)
                        v188 = v186;
                      v191 = v185 + v189++;
                      v185 = v191 & v184;
                      v186 = (uint64_t ****)(v183 + 40 * v185);
                      v187 = *v186;
                      if (*v186 == v93)
                        goto LABEL_201;
                    }
                    if (v188)
                      v244 = v188;
                    else
                      v244 = v186;
                  }
                  else
                  {
                    v244 = 0;
                  }
                  v186 = (uint64_t ****)sub_1C541AB24(v181 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v244);
                  v245 = __p.__r_.__value_.__r.__words[0];
                  v186[4] = 0;
                  v186[3] = 0;
                  *v186 = (uint64_t ***)v245;
                  v186[1] = (uint64_t ***)(v186 + 3);
                  v186[2] = (uint64_t ***)0x100000000;
LABEL_201:
                  v192 = *((unsigned int *)v186 + 4);
                  if ((_DWORD)v192)
                  {
                    v193 = (unsigned int **)(v186[1] + 1);
                    v194 = 16 * v192;
                    while (*((_DWORD *)v193 - 2))
                    {
                      v195 = 0;
                      v193 += 2;
                      v194 -= 16;
                      if (!v194)
                        goto LABEL_207;
                    }
                    v195 = *v193;
                    goto LABEL_207;
                  }
LABEL_206:
                  v195 = 0;
LABEL_207:
                  v196 = sub_1C602C000(v2, v195);
                  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v180 + 512))(v180, v196, 4);
                  v197 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Function section relative address";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v197 + 112))(v197, &__p, 1);
                  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 376))(*(_QWORD *)(v2 + 440), Symbol, 0);
                  v198 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Function section index";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v198 + 112))(v198, &__p, 1);
                  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v2 + 440) + 368))(*(_QWORD *)(v2 + 440), Symbol);
                  v199 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Flags";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v199 + 112))(v199, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 1);
                  v200 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Function name";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v200 + 112))(v200, &__p, 1);
                  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v201 = &__src;
                  else
                    v201 = (std::string *)__src.__r_.__value_.__r.__words[0];
                  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v202 = *((_BYTE *)&__src.__r_.__value_.__s + 23) & 0x7F;
                  else
                    v202 = __src.__r_.__value_.__l.__size_;
                  sub_1C6030BE0(*(_QWORD *)(v2 + 440), v201, v202, 3840);
                  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
                  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v172, 0);
                  v203 = sub_1C63CB110(v2, 0x1012u);
                  v204 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"FrameSize";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v204 + 112))(v204, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), (*(_DWORD *)(v335 + 320) - *(_DWORD *)(v335 + 328)), 4);
                  v205 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Padding";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v205 + 112))(v205, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v206 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Offset of padding";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v206 + 112))(v206, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v207 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Bytes of callee saved registers";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v207 + 112))(v207, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), *(unsigned int *)(v335 + 328), 4);
                  v208 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Exception handler offset";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v208 + 112))(v208, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
                  v209 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Exception handler section";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v209 + 112))(v209, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 2);
                  v210 = *(_QWORD *)(v2 + 440);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Flags (defines frame register)";
                  LOWORD(v350) = 259;
                  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v210 + 112))(v210, &__p, 1);
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), *(unsigned int *)(v335 + 340), 4);
                  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
                  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v203, 0);
                  sub_1C6030F0C(v2, v335, *(_QWORD *)(v335 + 64), *(unsigned int *)(v335 + 72));
                  v211 = *(unsigned int *)(v335 + 160);
                  if ((_DWORD)v211)
                  {
                    v212 = *(uint64_t **)(v335 + 152);
                    v213 = 16 * v211;
                    do
                    {
                      sub_1C6034304(v2, v212);
                      v212 += 2;
                      v213 -= 16;
                    }
                    while (v213);
                  }
                  v214 = *(unsigned int *)(v335 + 232);
                  if ((_DWORD)v214)
                  {
                    v215 = *(uint64_t **)(v335 + 224);
                    v216 = 8 * v214;
                    do
                    {
                      v217 = *v215++;
                      sub_1C63CC614(v2, v217, v335);
                      v216 -= 8;
                    }
                    while (v216);
                  }
                  v218 = *(unsigned int *)(v335 + 48);
                  if ((_DWORD)v218)
                  {
                    v219 = *(unint64_t **)(v335 + 40);
                    v220 = 8 * v218;
                    do
                    {
                      v221 = *v219++;
                      v222 = sub_1C63CD9EC(*(_QWORD *)v335, *(_QWORD *)(v335 + 8), v221);
                      sub_1C6030D10(v2, (uint64_t *)v335, (uint64_t)(v222 + 3));
                      v220 -= 8;
                    }
                    while (v220);
                  }
                  v223 = *(uint64_t **)(v335 + 248);
                  v224 = *(uint64_t **)(v335 + 256);
                  while (v223 != v224)
                  {
                    v225 = *v223;
                    v226 = v223[1];
                    v227 = sub_1C63CB110(v2, 0x1019u);
                    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 376))(*(_QWORD *)(v2 + 440), v225, 0);
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 368))(*(_QWORD *)(v2 + 440), v225);
                    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), *(unsigned int *)(v226 + 8), 2);
                    v228 = *(unsigned int *)(v226 + 8);
                    if ((_DWORD)v228)
                    {
                      v229 = -8 * v228;
                      do
                      {
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 488))(*(_QWORD *)(v2 + 440), *(_QWORD *)(*(_QWORD *)(v226 + v229) + 8) + 24, **(_QWORD **)(*(_QWORD *)(v226 + v229) + 8) + 1);
                        v229 += 8;
                      }
                      while (v229);
                    }
                    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
                    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v227, 0);
                    v223 += 2;
                  }
                  v231 = *(uint64_t **)(v335 + 272);
                  for (m = *(uint64_t **)(v335 + 280); v231 != m; v231 += 3)
                  {
                    v232 = *v231;
                    v233 = v231[1];
                    v234 = v231[2];
                    v235 = sub_1C63CB110(v2, 0x115Eu);
                    v236 = *(_QWORD *)(v2 + 440);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Call site offset";
                    LOWORD(v350) = 259;
                    (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v236 + 112))(v236, &__p, 1);
                    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 376))(*(_QWORD *)(v2 + 440), v232, 0);
                    v237 = *(_QWORD *)(v2 + 440);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Call site section index";
                    LOWORD(v350) = 259;
                    (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v237 + 112))(v237, &__p, 1);
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 368))(*(_QWORD *)(v2 + 440), v232);
                    v238 = *(_QWORD *)(v2 + 440);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Call instruction length";
                    LOWORD(v350) = 259;
                    (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v238 + 112))(v238, &__p, 1);
                    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 832))(*(_QWORD *)(v2 + 440), v233, v232, 2);
                    v239 = *(_QWORD *)(v2 + 440);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Type index";
                    LOWORD(v350) = 259;
                    (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v239 + 112))(v239, &__p, 1);
                    v240 = *(_QWORD *)(v2 + 440);
                    v241 = sub_1C60310B8(v2, v234);
                    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v240 + 512))(v240, v241, 4);
                    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
                    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v235, 0);
                  }
                  if (v332)
                    sub_1C63CAD10(v2, *(void ***)(v2 + 1200), *(void ***)(v2 + 1208));
                  sub_1C63CB284(v2, 0x114Fu);
                  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v331, 0);
                  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
                  (*(void (**)(_QWORD, _QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 744))(*(_QWORD *)(v2 + 440), *(unsigned int *)(v335 + 312), Symbol, *(_QWORD *)(v335 + 304));
                  v51 = v330;
                  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_98;
                  v156 = (void *)__src.__r_.__value_.__r.__words[0];
LABEL_234:
                  operator delete(v156);
                  goto LABEL_98;
                }
              }
            }
            if ((*((_BYTE *)v93 + 23) & 0x10) == 0)
              goto LABEL_167;
            v117 = ***v93;
            v118 = *(_QWORD *)(v117 + 152);
            v119 = *(unsigned int *)(v117 + 168);
            if ((_DWORD)v119)
            {
              LODWORD(v120) = (v119 - 1) & (v95 ^ (v93 >> 9));
              v121 = (uint64_t ****)(v118 + 16 * v120);
              v122 = *v121;
              if (*v121 == v93)
                goto LABEL_166;
              v123 = 1;
              while (v122 != (uint64_t ***)-4096)
              {
                v124 = v120 + v123++;
                v120 = v124 & (v119 - 1);
                v122 = *(uint64_t ****)(v118 + 16 * v120);
                if (v122 == v93)
                {
                  v121 = (uint64_t ****)(v118 + 16 * v120);
                  goto LABEL_166;
                }
              }
            }
            v121 = (uint64_t ****)(v118 + 16 * v119);
LABEL_166:
            v157 = (uint64_t *)v121[1];
            v158 = *v157;
            if (!*v157)
            {
LABEL_167:
              v159 = 0;
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
              p_p = &__p;
LABEL_180:
              p_p->__r_.__value_.__s.__data_[v159] = 0;
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__src.__r_.__value_.__l.__data_);
              __src = __p;
              goto LABEL_183;
            }
            v161 = v110;
            v163 = *((unsigned __int8 *)v157 + 16);
            v162 = v157 + 2;
            v164 = v163 == 1;
            if (v163 == 1)
              v165 = (uint64_t *)((char *)v162 + 1);
            else
              v165 = v162;
            v159 = v158 - v164;
            if ((unint64_t)(v158 - v164) > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_361;
            if (v159 >= 0x17)
            {
              v166 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v159 | 7) != 0x17)
                v166 = v159 | 7;
              v167 = v166 + 1;
              p_p = (std::string *)operator new(v166 + 1);
              __p.__r_.__value_.__l.__size_ = v159;
              __p.__r_.__value_.__r.__words[2] = v167 | 0x8000000000000000;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
            }
            else
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v158 - v164;
              p_p = &__p;
              if (!v159)
                goto LABEL_179;
            }
            memmove(p_p, v165, v159);
LABEL_179:
            v110 = v161;
            goto LABEL_180;
          }
          if ((*((_BYTE *)v93 + 23) & 0x10) == 0)
            goto LABEL_145;
          v125 = ***v93;
          v126 = *(_QWORD *)(v125 + 152);
          v127 = *(unsigned int *)(v125 + 168);
          if ((_DWORD)v127)
          {
            LODWORD(v128) = (v127 - 1) & (v95 ^ (v93 >> 9));
            v129 = (uint64_t ****)(v126 + 16 * v128);
            v130 = *v129;
            if (*v129 == v93)
              goto LABEL_144;
            v131 = 1;
            while (v130 != (uint64_t ***)-4096)
            {
              v132 = v128 + v131++;
              v128 = v132 & (v127 - 1);
              v130 = *(uint64_t ****)(v126 + 16 * v128);
              if (v130 == v93)
              {
                v129 = (uint64_t ****)(v126 + 16 * v128);
                goto LABEL_144;
              }
            }
          }
          v129 = (uint64_t ****)(v126 + 16 * v127);
LABEL_144:
          v133 = (uint64_t *)v129[1];
          v134 = *v133;
          if (*v133)
          {
            v138 = *((unsigned __int8 *)v133 + 16);
            v137 = v133 + 2;
            v139 = v138 == 1;
            if (v138 == 1)
              v140 = (uint64_t *)((char *)v137 + 1);
            else
              v140 = v137;
            v135 = v134 - v139;
            if ((unint64_t)(v134 - v139) > 0x7FFFFFFFFFFFFFF7)
LABEL_361:
              abort();
            if (v135 >= 0x17)
            {
              v141 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v135 | 7) != 0x17)
                v141 = v135 | 7;
              v142 = v141 + 1;
              v136 = (std::string *)operator new(v141 + 1);
              __dst.__r_.__value_.__l.__size_ = v135;
              __dst.__r_.__value_.__r.__words[2] = v142 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v136;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v134 - v139;
              v136 = &__dst;
              if (!v135)
                goto LABEL_157;
            }
            memmove(v136, v140, v135);
LABEL_157:
            v136->__r_.__value_.__s.__data_[v135] = 0;
            v143 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Symbol subsection for ";
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__dst;
            LOWORD(v350) = 1027;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v143 + 112))(v143, &__p, 1);
            v144 = sub_1C63CA84C(v2, 0xF1u);
            v145 = sub_1C63CB110(v2, 0x1102u);
            v146 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"PtrParent";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v146 + 112))(v146, &__p, 1);
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
            v147 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"PtrEnd";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v147 + 112))(v147, &__p, 1);
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
            v148 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"PtrNext";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v148 + 112))(v148, &__p, 1);
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 4);
            v149 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Thunk section relative address";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v149 + 112))(v149, &__p, 1);
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 376))(*(_QWORD *)(v2 + 440), Symbol, 0);
            v150 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Thunk section index";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v150 + 112))(v150, &__p, 1);
            (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v2 + 440) + 368))(*(_QWORD *)(v2 + 440), Symbol);
            v151 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Code size";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v151 + 112))(v151, &__p, 1);
            (*(void (**)(_QWORD, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v2 + 440) + 832))(*(_QWORD *)(v2 + 440), *(_QWORD *)(v335 + 304), Symbol, 2);
            v152 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Ordinal";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v152 + 112))(v152, &__p, 1);
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 440) + 512))(*(_QWORD *)(v2 + 440), 0, 1);
            v153 = *(_QWORD *)(v2 + 440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Function name";
            LOWORD(v350) = 259;
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v153 + 112))(v153, &__p, 1);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v154 = &__dst;
            else
              v154 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v155 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
            else
              v155 = __dst.__r_.__value_.__l.__size_;
            sub_1C6030BE0(*(_QWORD *)(v2 + 440), v154, v155, 3840);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v145, 0);
            sub_1C63CB284(v2, 0x114Fu);
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 192))(*(_QWORD *)(v2 + 440), v144, 0);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 440) + 632))(*(_QWORD *)(v2 + 440), 4, 0, 1, 0);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_98;
            v156 = (void *)__dst.__r_.__value_.__r.__words[0];
            goto LABEL_234;
          }
LABEL_145:
          v135 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          v136 = &__dst;
          goto LABEL_157;
        }
LABEL_116:
        v110 = 0;
        goto LABEL_117;
      }
      v19 = 0;
      v20 = 0;
      v21 = MEMORY[0x1E0C80978];
      while (1)
      {
        v22 = v14[v19];
        if ((v22 & 0x80000000) != 0)
          break;
        if ((*(_DWORD *)(v21 + 4 * v22 + 60) & 0x400) != 0)
        {
          v23 = v22 + 10 * *((_DWORD *)&__p.__r_.__value_.__l.__data_ + v20) - 48;
          if (v23 >= 0xFFFF)
            v23 = 0xFFFF;
          *((_DWORD *)&__p.__r_.__value_.__l.__data_ + v20) = v23;
        }
        else
        {
          if (v22 != 46)
            break;
          if (v20 > 2)
            goto LABEL_30;
          ++v20;
        }
LABEL_29:
        if (v15 == ++v19)
        {
LABEL_30:
          v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          goto LABEL_31;
        }
      }
      if (v20 > 0)
        goto LABEL_30;
      goto LABEL_29;
    }
  }
  return result;
}

void sub_1C6030BE0(uint64_t a1, void *__src, unint64_t a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  if (a3 >= (65279 - a4))
    v6 = (65279 - a4);
  else
    v6 = a3;
  v9 = v11;
  v10 = xmmword_1C677F680;
  if (v6 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v9, v11, v6, 1);
    v7 = v10;
  }
  else
  {
    v7 = 0;
    if (!v6)
      goto LABEL_7;
  }
  memcpy((char *)v9 + v7, __src, v6);
  v7 = v10;
LABEL_7:
  v8 = v7 + v6;
  *(_QWORD *)&v10 = v8;
  if ((unint64_t)(v8 + 1) > *((_QWORD *)&v10 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v9, v11, v8 + 1, 1);
    v8 = v10;
  }
  *((_BYTE *)v9 + v8) = 0;
  *(_QWORD *)&v10 = v10 + 1;
  (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 488))(a1, v9);
  if (v9 != v11)
    free(v9);
}

uint64_t sub_1C6030D10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19[4];
  __int16 v20;

  v19[0] = *(_QWORD *)(a3 + 112);
  v19[1] = 0;
  v6 = *((unsigned int *)sub_1C63181A0(a1 + 1088, v19) + 4);
  v7 = sub_1C63CB110(a1, 0x114Du);
  v8 = *(_QWORD *)(a1 + 440);
  v19[0] = (uint64_t)"PtrParent";
  v20 = 259;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v8 + 112))(v8, v19, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 440) + 512))(*(_QWORD *)(a1 + 440), 0, 4);
  v9 = *(_QWORD *)(a1 + 440);
  v19[0] = (uint64_t)"PtrEnd";
  v20 = 259;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 112))(v9, v19, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 440) + 512))(*(_QWORD *)(a1 + 440), 0, 4);
  v10 = *(_QWORD *)(a1 + 440);
  v19[0] = (uint64_t)"Inlinee type index";
  v20 = 259;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 112))(v10, v19, 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 440) + 512))(*(_QWORD *)(a1 + 440), v6, 4);
  v11 = *(_QWORD *)(a3 + 112);
  if (*(_BYTE *)v11 != 15)
    v11 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8));
  v12 = sub_1C602B774(a1, v11);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 440) + 752))(*(_QWORD *)(a1 + 440), *(unsigned int *)(a3 + 120), v12, *(unsigned int *)(*(_QWORD *)(a3 + 112) + 24), a2[37], a2[38]);
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 440) + 632))(*(_QWORD *)(a1 + 440), 4, 0, 1, 0);
  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 440) + 192))(*(_QWORD *)(a1 + 440), v7, 0);
  sub_1C6030F0C(a1, (uint64_t)a2, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v13 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v13)
  {
    v14 = *(unint64_t **)(a3 + 88);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      v17 = sub_1C62A2F7C(*a2, a2[1], v16);
      sub_1C6030D10(a1, a2, v17 + 3);
      v15 -= 8;
    }
    while (v15);
  }
  return sub_1C63CB284(a1, 0x114Eu);
}

void sub_1C6030F0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v5 = a3;
  v21[6] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x600000000;
  if (a4)
  {
    v8 = 0;
    v9 = 72 * a4;
    v10 = a3;
    v11 = a3;
    do
    {
      if (*(_WORD *)(*(_QWORD *)v11 + 32))
      {
        if (v8 >= HIDWORD(v20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v8 + 1, 8);
          v8 = v20;
        }
        *((_QWORD *)v19 + v8) = v10;
        v8 = v20 + 1;
        LODWORD(v20) = v20 + 1;
      }
      v11 += 72;
      v10 += 72;
      v9 -= 72;
    }
    while (v9);
    v12 = v19;
    v13 = (uint64_t *)((char *)v19 + 8 * v8);
    if (v8)
    {
      v14 = 126 - 2 * __clz(v8);
      goto LABEL_12;
    }
  }
  else
  {
    v13 = v21;
    v12 = v21;
  }
  v14 = 0;
LABEL_12:
  sub_1C6036A38((unint64_t)v12, v13, v14, 1);
  if ((_DWORD)v20)
  {
    v15 = (unint64_t *)v19;
    v16 = 8 * v20;
    do
    {
      v17 = *v15++;
      sub_1C63CC2F8(a1, a2, v17);
      v16 -= 8;
    }
    while (v16);
  }
  if (a4)
  {
    v18 = 72 * a4;
    do
    {
      if (!*(_WORD *)(*(_QWORD *)v5 + 32))
        sub_1C63CC2F8(a1, a2, v5);
      v5 += 72;
      v18 -= 72;
    }
    while (v18);
  }
  if (v19 != v21)
    free(v19);
}

uint64_t sub_1C60310B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  unint64_t v21;
  llvm::DIScope *Scope;
  const char *Name;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  const char *v33;
  __int16 v34;
  __int16 v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  int v42;
  llvm::DIScope *v43;
  const char *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  const char *v52;
  size_t v53;
  const char *v54;
  __int16 v55;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v58;
  _QWORD *v59;
  __int16 v60;
  uint64_t v61;
  std::string *v62;
  std::string::size_type v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BYTE v76[12];
  std::string *v77;
  std::string::size_type v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  std::string __p;

  if (!a2)
    return 3;
  v2 = a2;
  if (*(_WORD *)(a2 + 2) == 22)
    sub_1C602C698(a1, a2, 0);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 2);
    if (v4 != 22)
      break;
    v2 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 24);
  }
  v5 = v4 > 0x17;
  v6 = (1 << v4) & 0x880004;
  if (!v5 && v6 != 0)
  {
    v75 = v2;
    ++*(_DWORD *)(a1 + 1184);
    v8 = v2 - 8 * *(unsigned int *)(v2 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if ((v9 && **(_QWORD **)(v9 + 8) || (v10 = *(_QWORD *)(v8 + 56)) != 0 && **(_QWORD **)(v10 + 8))
      && (v11 = sub_1C602C698(a1, v2, 0), (*(_BYTE *)(v2 + 28) & 4) != 0))
    {
      v12 = v11;
    }
    else
    {
      *(_QWORD *)v76 = v2;
      *(_DWORD *)&v76[8] = 0;
      sub_1C6144658((uint64_t)&v73, a1 + 1112, (uint64_t *)v76, &v76[8]);
      if (v74)
      {
        v15 = *(unsigned __int16 *)(v2 + 2);
        if (v15 == 23)
        {
          v16 = sub_1C6032374(v2);
          v17 = sub_1C6032AAC(a1, v2);
          v19 = v18;
          if ((v18 & 0xFF00000000) != 0)
            v20 = 1040;
          else
            v20 = 1024;
          v21 = *(_QWORD *)(v2 + 32);
          Scope = (llvm::DIScope *)llvm::DIScope::getScope((llvm::DIScope *)v2);
          Name = (const char *)llvm::DIScope::getName((llvm::DIScope *)v2);
          if (v24)
          {
            v33 = Name;
            v32 = v24;
          }
          else
          {
            v25 = *(unsigned __int16 *)(v2 + 2);
            v26 = 1 << v25;
            v28 = 21;
            if (v25 != 57)
            {
              v28 = 0;
              v27 = 0;
            }
            v29 = (v26 & 0x880014) == 0;
            if ((v26 & 0x880014) != 0)
              v30 = 13;
            else
              v30 = v28;
            if (v29)
              v31 = v27;
            else
              v31 = "<unnamed-tag>";
            if (v25 <= 0x39)
              v32 = v30;
            else
              v32 = 0;
            if (v25 <= 0x39)
              v33 = v31;
            else
              v33 = 0;
          }
          v55 = v20 | v16;
          sub_1C63CA530(&__p, a1, Scope, v33, v32);
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          v58 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 56);
          if (v58)
          {
            v66 = *(uint64_t **)(v58 + 8);
            v67 = *v66;
            v59 = v66 + 3;
            v58 = v67;
          }
          else
          {
            v59 = 0;
          }
          *(_WORD *)v76 = 5382;
          *(_WORD *)&v76[2] = v19;
          *(_WORD *)&v76[4] = v55;
          *(_DWORD *)&v76[6] = v17;
          v77 = p_p;
          v78 = size;
          v79 = v59;
          v80 = v58;
          v68 = a1 + 544;
          v81 = v21 >> 3;
          v69 = sub_1C63F0078(a1 + 560, (__int16 *)v76);
        }
        else
        {
          if (v15 == 2)
            v34 = 5380;
          else
            v34 = 5381;
          v35 = sub_1C6032374(v2);
          v36 = sub_1C6032AAC(a1, v2);
          v37 = v36;
          v39 = v38;
          v40 = HIDWORD(v36);
          if ((v38 & 0xFF00000000) != 0)
            v41 = v35 | 0x10;
          else
            v41 = v35;
          v42 = (*(_DWORD *)(v2 + 28) >> 25) & 2;
          v43 = (llvm::DIScope *)llvm::DIScope::getScope((llvm::DIScope *)v2);
          v44 = (const char *)llvm::DIScope::getName((llvm::DIScope *)v2);
          if (v45)
          {
            v54 = v44;
            v53 = v45;
          }
          else
          {
            v46 = *(unsigned __int16 *)(v2 + 2);
            v47 = 1 << v46;
            v49 = 21;
            if (v46 != 57)
            {
              v49 = 0;
              v48 = 0;
            }
            v50 = (v47 & 0x880014) == 0;
            if ((v47 & 0x880014) != 0)
              v51 = 13;
            else
              v51 = v49;
            if (v50)
              v52 = v48;
            else
              v52 = "<unnamed-tag>";
            if (v46 <= 0x39)
              v53 = v51;
            else
              v53 = 0;
            if (v46 <= 0x39)
              v54 = v52;
            else
              v54 = 0;
          }
          v60 = v42 | v41;
          sub_1C63CA530(&__p, a1, v43, v54, v53);
          v61 = *(_QWORD *)(v2 + 32) >> 3;
          v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v62 = &__p;
          v63 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v63 = __p.__r_.__value_.__l.__size_;
          v64 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 56);
          if (v64)
          {
            v71 = *(uint64_t **)(v64 + 8);
            v72 = *v71;
            v65 = v71 + 3;
            v64 = v72;
          }
          else
          {
            v65 = 0;
          }
          *(_WORD *)v76 = v34;
          *(_WORD *)&v76[2] = v39;
          *(_WORD *)&v76[4] = v60;
          *(_DWORD *)&v76[6] = v37;
          v77 = v62;
          v78 = v63;
          v79 = v65;
          v80 = v64;
          LODWORD(v81) = 0;
          HIDWORD(v81) = v40;
          v68 = a1 + 544;
          v82 = v61;
          v69 = sub_1C63EFEB4(a1 + 560, (__int16 *)v76);
        }
        v12 = sub_1C611BE0C(v68, v69, v70);
        sub_1C6032280(a1, v2, v12);
        sub_1C6031D5C((_QWORD *)a1, v2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_DWORD *)sub_1C6144C70(a1 + 1112, &v75) + 2) = v12;
      }
      else
      {
        v12 = *(unsigned int *)(v73 + 8);
      }
    }
    v13 = *(_DWORD *)(a1 + 1184);
    if (v13 == 1)
    {
      sub_1C63CC228(a1);
      v13 = *(_DWORD *)(a1 + 1184);
    }
    *(_DWORD *)(a1 + 1184) = v13 - 1;
    return v12;
  }
  return sub_1C602C698(a1, v2, 0);
}

void sub_1C6031530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned __int16 CodeViewRegNum;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[16];
  int8x16_t v38;
  unsigned int v39;
  _QWORD v40[3];
  char v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 280) + 16);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v8 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD **)a3;
    v10 = *(_QWORD *)a3 + 16 * v8;
    v33 = v7 + 8;
    while (1)
    {
      if ((*v9 & 4) != 0)
        goto LABEL_48;
      sub_1C63BE960(*v9 & 0xFFFFFFFFFFFFFFF8, &v38);
      if (!v42)
        goto LABEL_48;
      v11 = v39;
      if (*(_BYTE *)(a2 + 64))
        break;
      if (v39 != 2)
        goto LABEL_12;
      if (*(_QWORD *)(v38.i64[1] + 8))
        goto LABEL_11;
      *(_BYTE *)(a2 + 64) = 1;
      v16 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(a2 + 8);
        v18 = 40 * v16;
        do
        {
          v19 = *(void **)(v17 + v18 - 32);
          if ((void *)(v17 + v18 - 16) != v19)
            free(v19);
          v18 -= 40;
        }
        while (v18);
      }
      *(_DWORD *)(a2 + 16) = 0;
      sub_1C6031530(a1, a2, a3);
      v12 = 1;
LABEL_44:
      if (v42)
      {
        if ((_QWORD *)v38.i64[1] != v40)
          free((void *)v38.i64[1]);
      }
      if ((v12 | 4) != 4)
        return;
LABEL_48:
      v9 += 2;
      if (v9 == (_QWORD *)v10)
        return;
    }
    if (!v39 || *(_QWORD *)(v38.i64[1] + 8 * v39 - 8))
    {
LABEL_11:
      v12 = 4;
      goto LABEL_44;
    }
    v11 = --v39;
LABEL_12:
    v12 = 4;
    if (v11 <= 1 && v38.i32[0])
    {
      v35 = v37;
      v36 = 0x100000000;
      CodeViewRegNum = llvm::MCRegisterInfo::getCodeViewRegNum(v33, v38.u32[0]);
      HIWORD(v34) = CodeViewRegNum;
      v14 = v34 & 0xFE | (v39 != 0);
      LODWORD(v34) = v34 & 0xFFFFFFFE | (v39 != 0);
      if (v39)
        v15 = *(_QWORD *)(v38.i64[1] + 8 * v39 - 8);
      else
        LODWORD(v15) = 0;
      LODWORD(v20) = (2 * v15) | v14 & 1;
      if (v41)
        v20 = (v40[2] << 30) & 0xFFFFFFFE00000000 | v20 | 0x100000000;
      else
        v20 = v20;
      LODWORD(v34) = v20;
      WORD2(v34) = WORD2(v20);
      v21 = *(_DWORD *)(a2 + 16);
      if (!v21
        || (v22 = *(_QWORD *)(a2 + 8) + 40 * v21,
            v23 = *(unsigned int *)(v22 - 40) | ((unint64_t)*(unsigned __int16 *)(v22 - 36) << 32),
            ((*(_DWORD *)(v22 - 40) ^ v20) & 1) != 0)
        || ((v23 ^ v20) & 0x100000000) != 0
        || ((unint64_t)((uint64_t)*(int *)(v22 - 40) << 16) >> 17) != ((unint64_t)((uint64_t)(int)v20 << 16) >> 17)
        || ((v23 >> 33) & 0x7FFF) != ((v20 >> 33) & 0x7FFF)
        || *(unsigned __int16 *)(v22 - 34) != CodeViewRegNum)
      {
        sub_1C63CB64C(a2 + 8, (uint64_t)&v34);
      }
      if (v35 != v37)
        free(v35);
      v24 = sub_1C5FFEE9C(a1, *v9 & 0xFFFFFFFFFFFFFFF8);
      v25 = v9[1];
      if (v25 == -1)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 448);
      }
      else
      {
        v26 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v25);
        v27 = v26 & 0xFFFFFFFFFFFFFFF8;
        if ((v26 & 4) != 0)
          v28 = sub_1C5FFEF04(a1, v27);
        else
          v28 = sub_1C5FFEE9C(a1, v27);
      }
      v34 = v28;
      v29 = *(_QWORD *)(a2 + 8) + 40 * *(unsigned int *)(a2 + 16);
      v30 = (_QWORD *)(v29 - 32);
      v31 = *(unsigned int *)(v29 - 24);
      if ((_DWORD)v31 && (v32 = *v30 + 16 * v31, *(_QWORD *)(v32 - 8) == v24))
        *(_QWORD *)(v32 - 8) = v28;
      else
        sub_1C61B1608((uint64_t)v30, v24, &v34);
      v12 = 0;
    }
    goto LABEL_44;
  }
}

uint64_t sub_1C60318AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  const llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  char v19;
  int v20;
  int v21;
  int v22;
  llvm::Value **v23;
  _BYTE *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t *v32;
  char v33;
  uint64_t i;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  unint64_t v41;
  BOOL v42;
  _BYTE *v43;
  BOOL v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v4 = a2[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = a2[7];
  v7 = *a2;
  v8 = (_OWORD *)operator new();
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[16] = 0u;
  v8[17] = 0u;
  v8[18] = 0u;
  v8[19] = 0u;
  v8[20] = 0u;
  v8[21] = 0u;
  sub_1C63CDB8C((uint64_t)v8);
  v48 = (unsigned __int8 *)v7;
  v49 = v9;
  v10 = sub_1C63CB82C((_QWORD *)(a1 + 928), (uint64_t)&v48);
  if (v49)
  {
    v46 = sub_1C63CDBFC(v49);
    MEMORY[0x1CAA32FC0](v46, 0x10E0C40A125B3FFLL);
  }
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(a1 + 696) = v11;
  v12 = *(_DWORD *)(a1 + 920);
  *(_DWORD *)(a1 + 920) = v12 + 1;
  *(_DWORD *)(v11 + 312) = v12;
  *(_QWORD *)(v11 + 296) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 520);
  *(_DWORD *)(v11 + 328) = *(_DWORD *)(v6 + 76);
  *(_DWORD *)(v11 + 320) = *(_QWORD *)(v6 + 48);
  *(_DWORD *)(v11 + 332) = *(_DWORD *)(v6 + 56);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 440))(v5, a2);
  if (v13)
    LOBYTE(v13) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 432))(v5, a2);
  v15 = *(_QWORD *)(a1 + 696);
  *(_BYTE *)(v15 + 344) = v13;
  *(_WORD *)(v15 + 336) = 0;
  if (*(_DWORD *)(v15 + 320))
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 200))(v16, a2);
    v18 = *(_BYTE **)(a1 + 696);
    if ((v17 & 1) != 0)
    {
      v19 = 2;
      v18[337] = 2;
      if (v18[344])
        v19 = 1;
      v18[336] = v19;
    }
    else
    {
      *((_WORD *)v18 + 168) = 257;
    }
  }
  v20 = *(unsigned __int8 *)(v6 + 36);
  if (*((_BYTE *)a2 + 353))
    v20 |= 2u;
  if (*((_BYTE *)a2 + 354))
    v21 = v20 | 8;
  else
    v21 = v20;
  if ((*(_WORD *)(v7 + 18) & 8) != 0)
  {
    v22 = *(_DWORD *)(v7 + 20);
    if ((v22 & 0x40000000) != 0)
      v23 = *(llvm::Value ***)(v7 - 8);
    else
      v23 = (llvm::Value **)(v7 - 32 * (v22 & 0x7FFFFFF));
    if (llvm::classifyEHPersonality(*v23, v14) - 7 > 1)
      v21 |= 0x10u;
    else
      v21 |= 0x40u;
  }
  v24 = *(_BYTE **)(v7 + 112);
  if (v24)
    v21 |= v24[13] & 0x20 | (v24[14] << 6) & 0xA0;
  if (*(_DWORD *)(v6 + 64) == -1)
    v25 = v21;
  else
    v25 = v21 | 0x100;
  v26 = v25 | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 696) + 336) << 14) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 696)
                                                                                                + 337) << 16);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248) + 552))
  {
    if (v24)
    {
      if ((v24[17] & 4) == 0 && ((char)v24[13] & 0x80000000) == 0 && (v24[17] & 8) == 0)
        v26 |= 0x100000u;
    }
    else
    {
      v26 |= 0x100000u;
    }
  }
  llvm::Function::getEntryCount((uint64_t ***)v7, 0, (uint64_t)&v48);
  if (v50)
    v27 = v26 | 0xC0000;
  else
    v27 = v26;
  v28 = *(_QWORD *)(a1 + 696);
  *(_DWORD *)(v28 + 340) = v27;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 440) + 720))(*(_QWORD *)(a1 + 440), *(unsigned int *)(v28 + 312));
  v47 = 0;
  v31 = a2 + 40;
  v32 = (uint64_t *)a2[41];
  if (v32 != a2 + 40)
  {
    v33 = 1;
    do
    {
      for (i = v32[7]; ; i = *(_QWORD *)(i + 8))
      {
        if ((uint64_t *)i == v32 + 6)
          goto LABEL_54;
        v35 = *(_QWORD *)(*(_QWORD *)(i + 16) + 8);
        if ((v35 & 0x10) == 0 && (*(_WORD *)(i + 44) & 1) == 0)
        {
          v30 = *(unsigned __int8 **)(i + 56);
          if (v30)
            break;
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
        v33 &= (v35 & 0x10) != 0;
      }
      v36 = (unsigned __int8 **)(i + 56);
      if ((unsigned __int8 **)(i + 56) == &v47)
        goto LABEL_54;
      if (!v47)
      {
        v47 = *(unsigned __int8 **)(i + 56);
LABEL_53:
        result = llvm::MetadataTracking::track((uint64_t)&v47, v30, 2);
        goto LABEL_54;
      }
      result = llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
      v30 = *v36;
      v47 = v30;
      if (v30)
        goto LABEL_53;
LABEL_54:
      v32 = (uint64_t *)v32[1];
    }
    while (v32 != v31);
    if (!((v47 == 0) | v33 & 1))
    {
      llvm::DebugLoc::getFnDebugLoc((llvm::DebugLoc *)&v47, (const llvm::MDNode *)v30, &v48);
      result = sub_1C602DB4C(a1, &v48);
      if (v48)
        result = llvm::MetadataTracking::untrack((uint64_t)&v48, v48);
    }
  }
  v37 = (uint64_t *)a2[41];
  if (v37 != v31)
  {
    v38 = a1 + 368;
    v39 = a1 + 392;
    do
    {
      for (j = v37[7]; (uint64_t *)j != v37 + 6; j = *(_QWORD *)(j + 8))
      {
        v41 = *(_QWORD *)(j + 48);
        v42 = v41 >= 8;
        v43 = (_BYTE *)(v41 & 0xFFFFFFFFFFFFFFF8);
        v45 = !v42 || (*(_QWORD *)(j + 48) & 7) != 3 || v43 == 0;
        if (!v45 && v43[6] && *(_QWORD *)&v43[8 * *(int *)v43 + 8 + 8 * (v43[5] + v43[4])])
        {
          v51 = j;
          v52 = 0;
          sub_1C5FFFBD4(v38, &v51, &v52, (uint64_t)&v48);
          v51 = j;
          v52 = 0;
          result = (uint64_t)sub_1C5FFFBD4(v39, &v51, &v52, (uint64_t)&v48);
        }
        if ((*(_BYTE *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
      }
      v37 = (uint64_t *)v37[1];
    }
    while (v37 != v31);
  }
  if (v47)
    return llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
  return result;
}

void sub_1C6031D5C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  unsigned __int16 *v12;
  void *v13;
  uint64_t v14;
  const char *Name;
  size_t v16;
  const char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  std::string::size_type v40;
  char *v41;
  __int128 v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  std::string::size_type v50;
  char *v51;
  __int128 v52;
  int64x2_t v53;
  std::string __p;
  uint64_t v55;
  int64x2_t v56;
  unint64_t v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[11];

  v61[10] = *MEMORY[0x1E0C80C00];
  v2 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3 || !**(_QWORD **)(v3 + 8))
    return;
  if (*(_WORD *)(a2 + 2) == 22)
  {
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
    {
      v7 = *(unsigned __int16 *)(v6 + 2);
      v8 = v7 > 0x17;
      v9 = (1 << v7) & 0x880004;
      if (!v8 && v9 != 0)
        return;
    }
  }
  v11 = a2;
  while (1)
  {
    if ((*(_BYTE *)(v11 + 28) & 4) != 0)
      return;
    if (*(_BYTE *)v11 != 12)
      break;
    v11 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 24);
    if (!v11)
      return;
  }
  v59 = v61;
  v60 = 0x500000000;
  v12 = sub_1C602C348((uint64_t)a1, *(llvm::DIScope **)(v2 + 8), (uint64_t)&v59);
  v13 = v59;
  v14 = v60;
  Name = (const char *)llvm::DIScope::getName((llvm::DIScope *)a2);
  if (v16)
  {
    v17 = Name;
    v18 = v16;
  }
  else
  {
    v19 = *(unsigned __int16 *)(a2 + 2);
    v20 = 1 << v19;
    v22 = 21;
    if (v19 != 57)
    {
      v22 = 0;
      v21 = 0;
    }
    v23 = (v20 & 0x880014) == 0;
    if ((v20 & 0x880014) != 0)
      v24 = 13;
    else
      v24 = v22;
    if (v23)
      v25 = v21;
    else
      v25 = "<unnamed-tag>";
    if (v19 <= 0x39)
      v18 = v24;
    else
      v18 = 0;
    if (v19 <= 0x39)
      v17 = v25;
    else
      v17 = 0;
  }
  sub_1C602C4CC(&__p, (uint64_t)v13, v14, v17, v18);
  if (v12)
  {
    if (v12 == (unsigned __int16 *)a1[149])
    {
      v26 = a1[151];
      v27 = a1[152];
      if (v26 < v27)
      {
        v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v26 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_QWORD *)(v26 + 24) = a2;
        *(_OWORD *)v26 = v28;
        memset(&__p, 0, sizeof(__p));
        v29 = v26 + 32;
LABEL_64:
        a1[151] = v29;
        goto LABEL_65;
      }
      v44 = a1[150];
      v45 = (uint64_t)(v26 - v44) >> 5;
      v46 = v45 + 1;
      if (!((unint64_t)(v45 + 1) >> 59))
      {
        if ((uint64_t)(v27 - v44) >> 4 > v46)
          v46 = (uint64_t)(v27 - v44) >> 4;
        if (v27 - v44 >= 0x7FFFFFFFFFFFFFE0)
          v47 = 0x7FFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        v58 = a1 + 152;
        if (!(v47 >> 59))
        {
          v48 = (char *)operator new(32 * v47);
          v49 = &v48[32 * v45];
          *(_OWORD *)v49 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v50 = __p.__r_.__value_.__r.__words[2];
          memset(&__p, 0, sizeof(__p));
          *((_QWORD *)v49 + 2) = v50;
          *((_QWORD *)v49 + 3) = a2;
          if (v26 == v44)
          {
            v53 = vdupq_n_s64(v26);
            v51 = &v48[32 * v45];
          }
          else
          {
            v51 = &v48[32 * v45];
            do
            {
              v52 = *(_OWORD *)(v26 - 32);
              *((_QWORD *)v51 - 2) = *(_QWORD *)(v26 - 16);
              *((_OWORD *)v51 - 2) = v52;
              *(_QWORD *)(v26 - 24) = 0;
              *(_QWORD *)(v26 - 16) = 0;
              *(_QWORD *)(v26 - 32) = 0;
              *((_QWORD *)v51 - 1) = *(_QWORD *)(v26 - 8);
              v51 -= 32;
              v26 -= 32;
            }
            while (v26 != v44);
            v53 = *((int64x2_t *)a1 + 75);
            v27 = a1[152];
          }
          v29 = (unint64_t)(v49 + 32);
          a1[150] = v51;
          a1[151] = v49 + 32;
          v56 = v53;
          a1[152] = &v48[32 * v47];
          v57 = v27;
          v55 = v53.i64[0];
          sub_1C5465AA0((uint64_t)&v55);
          goto LABEL_64;
        }
LABEL_71:
        sub_1C4764EE4();
      }
LABEL_70:
      abort();
    }
  }
  else
  {
    v30 = a1[154];
    v31 = a1[155];
    if (v30 >= v31)
    {
      v34 = a1[153];
      v35 = (uint64_t)(v30 - v34) >> 5;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 59)
        goto LABEL_70;
      if ((uint64_t)(v31 - v34) >> 4 > v36)
        v36 = (uint64_t)(v31 - v34) >> 4;
      if (v31 - v34 >= 0x7FFFFFFFFFFFFFE0)
        v37 = 0x7FFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      v58 = a1 + 155;
      if (v37 >> 59)
        goto LABEL_71;
      v38 = (char *)operator new(32 * v37);
      v39 = &v38[32 * v35];
      *(_OWORD *)v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v40 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((_QWORD *)v39 + 2) = v40;
      *((_QWORD *)v39 + 3) = a2;
      if (v30 == v34)
      {
        v43 = vdupq_n_s64(v30);
        v41 = &v38[32 * v35];
      }
      else
      {
        v41 = &v38[32 * v35];
        do
        {
          v42 = *(_OWORD *)(v30 - 32);
          *((_QWORD *)v41 - 2) = *(_QWORD *)(v30 - 16);
          *((_OWORD *)v41 - 2) = v42;
          *(_QWORD *)(v30 - 24) = 0;
          *(_QWORD *)(v30 - 16) = 0;
          *(_QWORD *)(v30 - 32) = 0;
          *((_QWORD *)v41 - 1) = *(_QWORD *)(v30 - 8);
          v41 -= 32;
          v30 -= 32;
        }
        while (v30 != v34);
        v43 = *(int64x2_t *)(a1 + 153);
        v31 = a1[155];
      }
      v33 = (unint64_t)(v39 + 32);
      a1[153] = v41;
      a1[154] = v39 + 32;
      v56 = v43;
      a1[155] = &v38[32 * v37];
      v57 = v31;
      v55 = v43.i64[0];
      sub_1C5465AA0((uint64_t)&v55);
    }
    else
    {
      v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v30 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_QWORD *)(v30 + 24) = a2;
      *(_OWORD *)v30 = v32;
      memset(&__p, 0, sizeof(__p));
      v33 = v30 + 32;
    }
    a1[154] = v33;
  }
LABEL_65:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v59 != v61)
    free(v59);
}

uint64_t sub_1C6032174(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t v16;
  int v18;
  __int16 v20;
  int v21;
  unsigned int v22;
  char v23;
  char v24;

  v6 = sub_1C602C698(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 0);
  v7 = *(unsigned __int16 *)(a2 + 2);
  v8 = *(_QWORD *)(a2 + 32);
  if (v6 & 0xFFFFF700 | a3)
    v9 = 0;
  else
    v9 = v7 == 15;
  if (v9)
  {
    if (v8 == 64)
      v18 = 1536;
    else
      v18 = 1024;
    return v18 & 0xFFFFFF00 | v6;
  }
  else
  {
    if (v7 == 16)
      v10 = 32;
    else
      v10 = 128;
    if (v7 == 15)
      v11 = 0;
    else
      v11 = v10;
    v12 = *(_DWORD *)(a2 + 28) & 0x400;
    v13 = v8 >> 3;
    v20 = 4098;
    v21 = v6;
    if (v8 == 64)
      v14 = 12;
    else
      v14 = 10;
    v22 = v14 & 0xFFE01FFF | (v13 << 13) | v11 | v12 | a3;
    v23 = 0;
    v24 = 0;
    v15 = sub_1C63EF41C(a1 + 560, &v20);
    return sub_1C611BE0C(a1 + 544, v15, v16);
  }
}

uint64_t sub_1C6032280(uint64_t result, unint64_t a2, int a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  unint64_t v14;
  int v15;
  int v16;
  std::__shared_weak_count_vtbl *v17;
  unint64_t v18;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  std::string::value_type *v25;
  uint64_t v26;

  v3 = *(unsigned __int16 *)(a2 + 2);
  v4 = v3 > 0x17;
  v5 = (1 << v3) & 0x880014;
  if (!v4 && v5 != 0)
  {
    v8 = a2;
    v9 = result;
    if (*(_BYTE *)a2 == 15 || (a2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
    {
      v23 = 5637;
      v24 = 0;
      v25 = sub_1C602B1E8(result, a2);
      v26 = v10;
      v11 = v9 + 544;
      v12 = v9 + 560;
      v13 = sub_1C63F0CD4(v12, &v23);
      v15 = sub_1C611BE0C(v11, v13, v14);
      v16 = *(_DWORD *)(v8 + 24);
      v19 = 5638;
      v20 = a3;
      v21 = v15;
      v22 = v16;
      v17 = sub_1C63F0E98(v12, (unsigned int *)&v19);
      return sub_1C611BE0C(v11, v17, v18);
    }
  }
  return result;
}

uint64_t sub_1C6032374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::DIScope *Scope;
  int v5;

  v1 = a1 - 8 * *(unsigned int *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
    v3 = (**(_QWORD **)(v2 + 8) != 0) << 9;
  else
    v3 = 0;
  Scope = *(llvm::DIScope **)(v1 + 8);
  if (Scope)
  {
    v5 = *(unsigned __int8 *)Scope;
    if (v5 == 13)
      v3 = v3 | 8;
    else
      v3 = v3;
    if (*(_WORD *)(a1 + 2) == 4)
    {
      if (v5 == 17)
        return v3 | 0x100;
      else
        return v3;
    }
    else
    {
      while (*(_BYTE *)Scope != 17)
      {
        Scope = (llvm::DIScope *)llvm::DIScope::getScope(Scope);
        if (!Scope)
          return v3;
      }
      return v3 | 0x100;
    }
  }
  return v3;
}

void sub_1C6032414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89[3];
  uint64_t *v90;
  uint64_t *v91;

  v3 = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 104) = 0;
  v6 = (_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 32);
  if (v7)
    v8 = (_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8));
  else
    v8 = 0;
  if (v8 != (_QWORD *)v7)
  {
    v85 = a2 + 864;
    v86 = a2 + 848;
    v88 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 32);
    do
    {
      v9 = (unsigned __int8 *)*v8;
      if (*v8)
      {
        v10 = *v9;
        if (v10 != 12)
        {
          if (v10 != 13)
          {
            if (v10 == 17)
            {
              v89[0] = *(_QWORD *)&v9[-8 * *((unsigned int *)v9 + 2) + 16];
              v11 = sub_1C63CBFCC(v5, v89);
              sub_1C619116C(v11, (uint64_t)v9);
            }
            goto LABEL_58;
          }
          v19 = *(_QWORD **)(a1 + 112);
          v18 = *(_QWORD *)(a1 + 120);
          if ((unint64_t)v19 >= v18)
          {
            v24 = (_QWORD *)*v6;
            v25 = ((uint64_t)v19 - *v6) >> 3;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61)
              goto LABEL_131;
            v27 = v18 - (_QWORD)v24;
            if (v27 >> 2 > v26)
              v26 = v27 >> 2;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              if (v28 >> 61)
                goto LABEL_132;
              v29 = (char *)operator new(8 * v28);
            }
            else
            {
              v29 = 0;
            }
            v40 = &v29[8 * v25];
            *(_QWORD *)v40 = v9;
            v20 = v40 + 8;
            if (v19 != v24)
            {
              do
              {
                v41 = *--v19;
                *((_QWORD *)v40 - 1) = v41;
                v40 -= 8;
              }
              while (v19 != v24);
              goto LABEL_54;
            }
            goto LABEL_55;
          }
          goto LABEL_23;
        }
        v12 = *((unsigned __int16 *)v9 + 1);
        if (v12 > 0x15)
        {
          if (v12 == 22)
          {
            v19 = *(_QWORD **)(a1 + 112);
            v35 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v19 >= v35)
            {
              v36 = (_QWORD *)*v6;
              v37 = ((uint64_t)v19 - *v6) >> 3;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61)
                goto LABEL_131;
              v39 = v35 - (_QWORD)v36;
              if (v39 >> 2 > v38)
                v38 = v39 >> 2;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v38;
              if (v28)
              {
                if (v28 >> 61)
                  goto LABEL_132;
                v29 = (char *)operator new(8 * v28);
              }
              else
              {
                v29 = 0;
              }
              v40 = &v29[8 * v37];
              *(_QWORD *)v40 = v9;
              v20 = v40 + 8;
              if (v19 != v36)
              {
                do
                {
                  v74 = *--v19;
                  *((_QWORD *)v40 - 1) = v74;
                  v40 -= 8;
                }
                while (v19 != v36);
LABEL_54:
                v19 = (_QWORD *)*v6;
              }
LABEL_55:
              *(_QWORD *)(a1 + 104) = v40;
              *(_QWORD *)(a1 + 112) = v20;
              *(_QWORD *)(a1 + 120) = &v29[8 * v28];
              v7 = v88;
              if (v19)
                operator delete(v19);
LABEL_57:
              *(_QWORD *)(a1 + 112) = v20;
              goto LABEL_58;
            }
LABEL_23:
            *v19 = v9;
            v20 = v19 + 1;
            goto LABEL_57;
          }
          if (v12 == 28)
          {
            v22 = *(_QWORD **)(a1 + 8);
            v21 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)v22 >= v21)
            {
              v61 = *(_QWORD **)a1;
              v62 = ((uint64_t)v22 - *(_QWORD *)a1) >> 3;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61)
                goto LABEL_131;
              v64 = v21 - (_QWORD)v61;
              if (v64 >> 2 > v63)
                v63 = v64 >> 2;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                if (v65 >> 61)
                  goto LABEL_132;
                v66 = (char *)operator new(8 * v65);
              }
              else
              {
                v66 = 0;
              }
              v75 = &v66[8 * v62];
              *(_QWORD *)v75 = v9;
              v23 = v75 + 8;
              if (v22 != v61)
              {
                do
                {
                  v76 = *--v22;
                  *((_QWORD *)v75 - 1) = v76;
                  v75 -= 8;
                }
                while (v22 != v61);
                v22 = *(_QWORD **)a1;
              }
              *(_QWORD *)a1 = v75;
              *(_QWORD *)(a1 + 8) = v23;
              *(_QWORD *)(a1 + 16) = &v66[8 * v65];
              v7 = v88;
              if (v22)
                operator delete(v22);
            }
            else
            {
              *v22 = v9;
              v23 = v22 + 1;
            }
            *(_QWORD *)(a1 + 8) = v23;
          }
        }
        else if (v12 == 13)
        {
          v30 = &v9[-8 * *((unsigned int *)v9 + 2)];
          v31 = *((_QWORD *)v30 + 2);
          if (v31 && **(_QWORD **)(v31 + 8))
          {
            v33 = *(char **)(a1 + 32);
            v32 = *(_QWORD *)(a1 + 40);
            if ((unint64_t)v33 >= v32)
            {
              v67 = *(char **)(a1 + 24);
              v68 = (v33 - v67) >> 4;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 60)
LABEL_131:
                abort();
              v70 = v3;
              v71 = v32 - (_QWORD)v67;
              if (v71 >> 3 > v69)
                v69 = v71 >> 3;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
                v72 = 0xFFFFFFFFFFFFFFFLL;
              else
                v72 = v69;
              if (v72)
              {
                if (v72 >> 60)
LABEL_132:
                  sub_1C4764EE4();
                v73 = (char *)operator new(16 * v72);
              }
              else
              {
                v73 = 0;
              }
              v77 = &v73[16 * v68];
              *(_QWORD *)v77 = v9;
              *((_QWORD *)v77 + 1) = 0;
              v78 = v77;
              if (v33 != v67)
              {
                do
                {
                  *((_OWORD *)v78 - 1) = *((_OWORD *)v33 - 1);
                  v78 -= 16;
                  v33 -= 16;
                }
                while (v33 != v67);
                v33 = *(char **)(a1 + 24);
              }
              v34 = v77 + 16;
              *(_QWORD *)(a1 + 24) = v78;
              *(_QWORD *)(a1 + 32) = v77 + 16;
              *(_QWORD *)(a1 + 40) = &v73[16 * v72];
              v7 = v88;
              if (v33)
                operator delete(v33);
              v3 = v70;
            }
            else
            {
              *(_QWORD *)v33 = v9;
              *((_QWORD *)v33 + 1) = 0;
              v34 = v33 + 16;
            }
            *(_QWORD *)(a1 + 32) = v34;
            if ((v9[29] & 0x10) != 0)
            {
              v79 = *(_QWORD *)&v9[-8 * *((unsigned int *)v9 + 2) + 32];
              if (v79)
              {
                v80 = *(_QWORD *)(v79 + 128);
                if (v80)
                {
                  if ((*(_BYTE *)(v80 + 16) & 0xFE) == 0x10)
                  {
                    v81 = *(unsigned int *)(v3 + 856);
                    if (v81 >= *(unsigned int *)(v3 + 860))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v86, v85, v81 + 1, 8);
                      v81 = *(unsigned int *)(v3 + 856);
                    }
                    *(_QWORD *)(*(_QWORD *)(v3 + 848) + 8 * v81) = v9;
                    ++*(_DWORD *)(v3 + 856);
                  }
                }
              }
            }
          }
          else
          {
            v42 = *((_QWORD *)v9 + 5);
            while (1)
            {
              v43 = *((_QWORD *)v30 + 3);
              v44 = *(unsigned __int16 *)(v43 + 2);
              if (v44 != 53 && v44 != 38)
                break;
              v30 = (unsigned __int8 *)(v43 - 8 * *(unsigned int *)(v43 + 8));
            }
            if (*(_BYTE *)v43 == 13)
            {
              v82 = v6;
              v83 = v5;
              v84 = v3;
              sub_1C6032414(v89, v3);
              v46 = v90;
              v45 = v91;
              if (v90 != v91)
              {
                v47 = *(char **)(a1 + 32);
                v87 = v91;
                do
                {
                  v48 = *v46;
                  v49 = v46[1] + v42;
                  v50 = *(_QWORD *)(a1 + 40);
                  if ((unint64_t)v47 >= v50)
                  {
                    v52 = *(char **)(a1 + 24);
                    v53 = (v47 - v52) >> 4;
                    v54 = v53 + 1;
                    if ((unint64_t)(v53 + 1) >> 60)
                      goto LABEL_131;
                    v55 = v42;
                    v56 = v50 - (_QWORD)v52;
                    if (v56 >> 3 > v54)
                      v54 = v56 >> 3;
                    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
                      v57 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v57 = v54;
                    if (v57)
                    {
                      if (v57 >> 60)
                        goto LABEL_132;
                      v58 = (char *)operator new(16 * v57);
                    }
                    else
                    {
                      v58 = 0;
                    }
                    v59 = &v58[16 * v53];
                    *(_QWORD *)v59 = v48;
                    *((_QWORD *)v59 + 1) = v49;
                    v60 = v59;
                    if (v47 != v52)
                    {
                      do
                      {
                        *((_OWORD *)v60 - 1) = *((_OWORD *)v47 - 1);
                        v60 -= 16;
                        v47 -= 16;
                      }
                      while (v47 != v52);
                      v47 = *(char **)(a1 + 24);
                    }
                    v51 = v59 + 16;
                    *(_QWORD *)(a1 + 24) = v60;
                    *(_QWORD *)(a1 + 32) = v59 + 16;
                    *(_QWORD *)(a1 + 40) = &v58[16 * v57];
                    if (v47)
                      operator delete(v47);
                    v42 = v55;
                    v45 = v87;
                  }
                  else
                  {
                    *(_QWORD *)v47 = v48;
                    *((_QWORD *)v47 + 1) = v49;
                    v51 = v47 + 16;
                  }
                  *(_QWORD *)(a1 + 32) = v51;
                  v46 += 2;
                  v47 = v51;
                }
                while (v46 != v45);
              }
              sub_1C63CD38C((uint64_t)v89);
              v5 = v83;
              v3 = v84;
              v6 = v82;
              v7 = v88;
            }
          }
        }
        else if (v12 == 15)
        {
          v13 = *(_QWORD *)&v9[-8 * *((unsigned int *)v9 + 2) + 16];
          if (v13)
          {
            v14 = *(_QWORD **)(v13 + 8);
            if (*v14 == 15)
            {
              v15 = v14[3];
              v16 = *(_QWORD *)((char *)v14 + 31);
              if (v15 == 0x705F6C6274765F5FLL && v16 == 0x657079745F727470)
                *(_DWORD *)(a1 + 96) = sub_1C602C698(v3, *v8, 0);
            }
          }
        }
      }
LABEL_58:
      ++v8;
    }
    while (v8 != (_QWORD *)v7);
  }
}

BOOL sub_1C6032A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 - 8 * *(unsigned int *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2 && **(_QWORD **)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v1 + 56);
  return (!v3 || !**(_QWORD **)(v3 + 8)) && (*(_BYTE *)(a1 + 28) & 4) == 0;
}

unint64_t sub_1C6032AAC(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unsigned int **v6;
  unint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  std::__shared_weak_count_vtbl *v13;
  unint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *i;
  uint64_t v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void **v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int **v28;
  unsigned int **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int16 v34[2];
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t *v43;
  uint64_t *v44;
  unsigned int **v45;
  unsigned int **v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50[33];

  v50[31] = *MEMORY[0x1E0C80C00];
  sub_1C6032414((uint64_t)v42, a1, a2);
  sub_1C63ED034((uint64_t)v50);
  sub_1C63ED1D4((uint64_t)v50, 0);
  v3 = 0;
  v30 = a1;
  if (v42[0] != v42[1])
  {
    v4 = *(_DWORD *)(*(_QWORD *)v42[0] + 28);
    if ((v4 & 0x20) == 0)
      __asm { BR              X9 }
    __asm { BR              X10 }
  }
  if (v43 != v44)
  {
    v5 = *v43;
    sub_1C602C698(a1, *(_QWORD *)(*v43 - 8 * *(unsigned int *)(*v43 + 8) + 24), 0);
    __asm { BR              X12 }
  }
  v6 = v45;
  v28 = v46;
  if (v45 != v46)
  {
    do
    {
      v8 = v6 + 1;
      v7 = (unint64_t)v6[1];
      if ((v7 & 4) != 0)
      {
        v10 = v7 & 0xFFFFFFFFFFFFFFF8;
        v8 = *(unsigned int ***)v10;
        v9 = *(_QWORD *)v10 + 8 * *(unsigned int *)(v10 + 8);
      }
      else
      {
        v9 = (uint64_t)&v8[v7 > 7];
      }
      v29 = v6;
      v11 = (uint64_t *)*((_QWORD *)*v6 + 1);
      v31 = *v11;
      v32 = v11 + 3;
      if (v8 != (unsigned int **)v9)
      {
        v12 = *v8;
        sub_1C602D570(a1, *v8, a2);
        __asm { BR              X11 }
      }
      LOWORD(v38) = 4614;
      v40 = 0;
      v41 = 0;
      __p = 0;
      v13 = sub_1C63F105C(a1 + 560, &v38);
      v15 = sub_1C611BE0C(a1 + 544, v13, v14);
      v34[0] = 5391;
      v34[1] = 0;
      v35 = v15;
      v36 = v32;
      v37 = v31;
      sub_1C63ED788((uint64_t)v50, v34);
      if (__p)
      {
        v40 = __p;
        operator delete(__p);
      }
      v6 += 2;
    }
    while (v29 + 2 != v28);
  }
  v16 = v48;
  for (i = v49; v16 != i; ++v16)
  {
    v18 = *v16;
    v19 = sub_1C602C698(v30, *v16, 0);
    v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 16);
    if (v22)
    {
      v23 = *(void ***)(v22 + 8);
      v24 = *v23;
      v21 = v23 + 3;
      v20 = v24;
    }
    LOWORD(v38) = 5392;
    *(_DWORD *)((char *)&v38 + 2) = v19;
    __p = v21;
    v40 = v20;
    sub_1C63ED980((uint64_t)v50, (unsigned __int16 *)&v38);
    ++v3;
  }
  v25 = sub_1C63EEB00(v30 + 544, v50);
  v26 = v47;
  sub_1C63ED0DC((uint64_t)v50);
  sub_1C63CD38C((uint64_t)v42);
  return v25 | (unint64_t)(v26 << 32);
}

void sub_1C60332EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  _QWORD **v32;
  _QWORD *v33;
  unint64_t v34;
  int8x8_t v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t prime;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int8x8_t v65;
  void *v66;
  char v67;
  llvm::DIScope *v68;
  unint64_t v69;
  llvm::DIScope *v70;
  unint64_t v71;
  _QWORD v72[2];
  _OWORD v73[4];
  uint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  _OWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD v83[24];

  v83[22] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 24))
    return;
  v82 = 0;
  v10 = sub_1C63CD750(*(_QWORD *)(a1 + 736), *(_DWORD *)(a1 + 752), a2, &v82);
  v11 = *(_QWORD *)(a1 + 736);
  v12 = *(_DWORD *)(a1 + 752);
  v13 = v11 + 96 * v12;
  if (v10)
    v14 = v82;
  else
    v14 = v11 + 96 * v12;
  v15 = *(_QWORD *)(a2 + 8);
  v82 = 0;
  v16 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 760), *(_DWORD *)(a1 + 776), v15, &v82)
    && v82 != *(_QWORD *)(a1 + 760) + 16 * *(unsigned int *)(a1 + 776))
  {
    v16 = *(_QWORD *)(v82 + 8);
  }
  if (**(_BYTE **)(a2 + 8) == 18)
    v17 = *(_QWORD *)(a2 + 8);
  else
    v17 = 0;
  if (*(_DWORD *)(a2 + 88) != 1
    || (v13 == v14 ? (v18 = v16 == 0) : (v18 = 0),
        !v18 ? (v19 = 0) : (v19 = 1),
        !sub_1C5FFEF04(a1, *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8)) || (v17 ? (v20 = v19 == 0) : (v20 = 0), !v20)))
  {
    if (v13 == v14)
    {
      if (!v16)
        goto LABEL_26;
    }
    else
    {
      sub_1C63CC87C(a4, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 8) + 72 * *(unsigned int *)(v14 + 16));
      if (!v16)
        goto LABEL_26;
    }
    sub_1C612E234(a5, *(_BYTE **)v16, (_BYTE *)(*(_QWORD *)v16 + 16 * *(unsigned int *)(v16 + 8)));
LABEL_26:
    v21 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v21)
    {
      v22 = *(uint64_t **)(a2 + 32);
      v23 = 8 * v21;
      do
      {
        v24 = *v22++;
        sub_1C60332EC(a1, v24, a3, a4, a5);
        v23 -= 8;
      }
      while (v23);
    }
    return;
  }
  v25 = *(_QWORD *)(a1 + 696);
  v74 = 0;
  v76 = 0u;
  v77 = 0;
  memset(v79, 0, sizeof(v79));
  memset(v73, 0, sizeof(v73));
  v72[1] = 0x100000000;
  v75 = (char *)&v76 + 8;
  DWORD1(v76) = 1;
  v78 = (char *)v79 + 8;
  DWORD1(v79[0]) = 1;
  v80 = 0;
  v81 = 0;
  v70 = (llvm::DIScope *)v17;
  v82 = v17;
  v72[0] = v73;
  sub_1C63CD428((uint64_t)v83, (uint64_t)v72);
  v26 = v82;
  v27 = 0x9DDFEA08EB382D69 * (((8 * v82) + 8) ^ HIDWORD(v82));
  v28 = 0x9DDFEA08EB382D69 * (HIDWORD(v82) ^ (v27 >> 47) ^ v27);
  v29 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
  v30 = *(int8x8_t *)(v25 + 192);
  if (!*(_QWORD *)&v30)
    goto LABEL_48;
  v31 = (uint8x8_t)vcnt_s8(v30);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    v17 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
    if (v29 >= *(_QWORD *)&v30)
      v17 = v29 % *(_QWORD *)&v30;
  }
  else
  {
    v17 = v29 & (*(_QWORD *)&v30 - 1);
  }
  v32 = *(_QWORD ***)(*(_QWORD *)(v25 + 184) + 8 * v17);
  if (!v32 || (v33 = *v32) == 0)
  {
LABEL_48:
    v71 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
    v69 = *(_QWORD *)(v25 + 192);
    v33 = operator new(0xC8uLL);
    *v33 = 0;
    v33[1] = v71;
    v33[2] = v26;
    sub_1C63CD428((uint64_t)(v33 + 3), (uint64_t)v83);
    v35 = (int8x8_t)v69;
    v36 = (float)(unint64_t)(*(_QWORD *)(v25 + 208) + 1);
    v37 = *(float *)(v25 + 216);
    if (v69 && (float)(v37 * (float)v69) >= v36)
    {
LABEL_83:
      v53 = *(_QWORD *)(v25 + 184);
      v54 = *(_QWORD **)(v53 + 8 * v17);
      if (v54)
      {
        *v33 = *v54;
        v68 = v70;
      }
      else
      {
        *v33 = *(_QWORD *)(v25 + 200);
        *(_QWORD *)(v25 + 200) = v33;
        *(_QWORD *)(v53 + 8 * v17) = v25 + 200;
        v68 = v70;
        if (!*v33)
        {
LABEL_92:
          v67 = 0;
          ++*(_QWORD *)(v25 + 208);
          goto LABEL_93;
        }
        v55 = *(_QWORD *)(*v33 + 8);
        if ((*(_QWORD *)&v35 & (*(_QWORD *)&v35 - 1)) != 0)
        {
          if (v55 >= *(_QWORD *)&v35)
            v55 %= *(_QWORD *)&v35;
        }
        else
        {
          v55 &= *(_QWORD *)&v35 - 1;
        }
        v54 = (_QWORD *)(*(_QWORD *)(v25 + 184) + 8 * v55);
      }
      *v54 = v33;
      goto LABEL_92;
    }
    v38 = 1;
    if (v69 >= 3)
      v38 = (v69 & (v69 - 1)) != 0;
    v39 = v38 | (2 * v69);
    v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40)
      prime = (int8x8_t)v40;
    else
      prime = (int8x8_t)v39;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v42 = v71;
    v35 = *(int8x8_t *)(v25 + 192);
    if (*(_QWORD *)&prime <= *(_QWORD *)&v35)
    {
      if (*(_QWORD *)&prime >= *(_QWORD *)&v35)
        goto LABEL_78;
      v49 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 208) / *(float *)(v25 + 216));
      if (*(_QWORD *)&v35 < 3uLL || (v50 = (uint8x8_t)vcnt_s8(v35), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v65 = *(int8x8_t *)(v25 + 192);
        v49 = std::__next_prime(v49);
        v35 = v65;
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      v42 = v71;
      if (*(_QWORD *)&prime >= *(_QWORD *)&v35)
      {
        v35 = *(int8x8_t *)(v25 + 192);
LABEL_78:
        if ((*(_QWORD *)&v35 & (*(_QWORD *)&v35 - 1)) != 0)
        {
          if (v42 >= *(_QWORD *)&v35)
            v17 = v42 % *(_QWORD *)&v35;
          else
            v17 = v42;
        }
        else
        {
          v17 = (*(_QWORD *)&v35 - 1) & v42;
        }
        goto LABEL_83;
      }
      if (!*(_QWORD *)&prime)
      {
        v66 = *(void **)(v25 + 184);
        *(_QWORD *)(v25 + 184) = 0;
        if (v66)
          operator delete(v66);
        v35 = 0;
        *(_QWORD *)(v25 + 192) = 0;
        v42 = v71;
        goto LABEL_78;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      sub_1C4764EE4();
    v43 = operator new(8 * *(_QWORD *)&prime);
    v44 = *(void **)(v25 + 184);
    *(_QWORD *)(v25 + 184) = v43;
    if (v44)
      operator delete(v44);
    v45 = 0;
    *(int8x8_t *)(v25 + 192) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v25 + 184) + 8 * v45++) = 0;
    while (*(_QWORD *)&prime != v45);
    v46 = *(_QWORD **)(v25 + 200);
    v42 = v71;
    if (!v46)
      goto LABEL_77;
    v47 = v46[1];
    v48 = (uint8x8_t)vcnt_s8(prime);
    v48.i16[0] = vaddlv_u8(v48);
    if (v48.u32[0] > 1uLL)
    {
      if (v47 >= *(_QWORD *)&prime)
        v47 %= *(_QWORD *)&prime;
    }
    else
    {
      v47 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v25 + 184) + 8 * v47) = v25 + 200;
    v52 = (_QWORD *)*v46;
    if (!*v46)
    {
LABEL_77:
      v35 = prime;
      goto LABEL_78;
    }
    while (1)
    {
      v63 = v52[1];
      if (v48.u32[0] > 1uLL)
      {
        if (v63 >= *(_QWORD *)&prime)
          v63 %= *(_QWORD *)&prime;
      }
      else
      {
        v63 &= *(_QWORD *)&prime - 1;
      }
      if (v63 != v47)
      {
        v64 = *(_QWORD *)(v25 + 184);
        if (!*(_QWORD *)(v64 + 8 * v63))
        {
          *(_QWORD *)(v64 + 8 * v63) = v46;
          goto LABEL_112;
        }
        *v46 = *v52;
        *v52 = **(_QWORD **)(*(_QWORD *)(v25 + 184) + 8 * v63);
        **(_QWORD **)(*(_QWORD *)(v25 + 184) + 8 * v63) = v52;
        v52 = v46;
      }
      v63 = v47;
LABEL_112:
      v46 = v52;
      v52 = (_QWORD *)*v52;
      v47 = v63;
      if (!v52)
        goto LABEL_77;
    }
  }
  while (1)
  {
    v34 = v33[1];
    if (v34 == v29)
      break;
    if (v31.u32[0] > 1uLL)
    {
      if (v34 >= *(_QWORD *)&v30)
        v34 %= *(_QWORD *)&v30;
    }
    else
    {
      v34 &= *(_QWORD *)&v30 - 1;
    }
    if (v34 != v17)
      goto LABEL_48;
LABEL_47:
    v33 = (_QWORD *)*v33;
    if (!v33)
      goto LABEL_48;
  }
  if (v33[2] != v82)
    goto LABEL_47;
  v67 = 1;
  v68 = v70;
LABEL_93:
  sub_1C63CD4CC((uint64_t)v83);
  sub_1C63CD4CC((uint64_t)v72);
  if ((v67 & 1) == 0)
  {
    v56 = *(uint64_t **)(a2 + 80);
    v33[21] = sub_1C5FFEE9C(a1, *v56);
    v33[22] = sub_1C5FFEF04(a1, v56[1]);
    v33[23] = llvm::DIScope::getName(v68);
    v33[24] = v57;
    if (v13 != v14)
      sub_1C6034720((uint64_t)(v33 + 3), v14 + 8);
    if (v16)
      sub_1C6180FA8((uint64_t)(v33 + 14), v16);
    v58 = *(unsigned int *)(a3 + 8);
    if (v58 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v58 + 1, 8);
      LODWORD(v58) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v58) = v33 + 3;
    ++*(_DWORD *)(a3 + 8);
    v59 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v59)
    {
      v60 = *(uint64_t **)(a2 + 32);
      v61 = 8 * v59;
      do
      {
        v62 = *v60++;
        sub_1C60332EC(a1, v62, v33 + 18, v33 + 3, v33 + 14);
        v61 -= 8;
      }
      while (v61);
    }
  }
}

void sub_1C6033A18(uint64_t a1, _QWORD *a2)
{
  uint64_t ***v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t ****v11;
  uint64_t ***v12;
  uint64_t ****v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t ****v23;
  uint64_t ***v24;
  uint64_t ****v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t ***v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t i;
  unint64_t v36;
  BOOL v37;
  _BYTE *v38;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t *v55;
  __int128 v56;
  _QWORD *v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  size_t v63;
  char *v64;
  _QWORD *v65;
  void *v66;
  uint64_t ****v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  int v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t ****v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t ***v103;

  v4 = (uint64_t ***)*a2;
  v5 = *a2 >> 4;
  if ((*(_BYTE *)(*a2 + 23) & 0x20) != 0)
  {
    v6 = ***v4;
    v103 = (uint64_t ***)*a2;
    v7 = *(_DWORD *)(v6 + 2496);
    if (v7)
    {
      v8 = *(_QWORD *)(v6 + 2480);
      v9 = v7 - 1;
      v10 = v9 & (v5 ^ (v4 >> 9));
      v11 = (uint64_t ****)(v8 + 40 * v10);
      v12 = *v11;
      if (*v11 == v4)
        goto LABEL_12;
      v13 = 0;
      v14 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == (uint64_t ***)-8192;
        if (v15)
          v13 = v11;
        v16 = v10 + v14++;
        v10 = v16 & v9;
        v11 = (uint64_t ****)(v8 + 40 * v10);
        v12 = *v11;
        if (*v11 == v4)
          goto LABEL_12;
      }
      if (v13)
        v67 = v13;
      else
        v67 = v11;
    }
    else
    {
      v67 = 0;
    }
    v68 = sub_1C541AB24(v6 + 2480, (uint64_t)&v103, (uint64_t *)&v103, v67);
    v69 = (uint64_t)v103;
    v68[3] = 0;
    v68[4] = 0;
    *v68 = v69;
    v68[1] = v68 + 3;
    v68[2] = 0x100000000;
  }
LABEL_12:
  sub_1C63CB6C8((int8x8_t *)a1);
  v17 = *(_QWORD *)(a1 + 240);
  if (v17)
    sub_1C60332EC(a1, v17, *(_QWORD *)(a1 + 696) + 224, *(_QWORD *)(a1 + 696) + 64, (unsigned int *)(*(_QWORD *)(a1 + 696) + 152));
  sub_1C63CC964((char **)(a1 + 736));
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 696) + 345))
  {
    v18 = ***v4;
    v103 = v4;
    v19 = *(_DWORD *)(v18 + 2496);
    if (v19)
    {
      v20 = *(_QWORD *)(v18 + 2480);
      v21 = v19 - 1;
      v22 = v21 & (v5 ^ (v4 >> 9));
      v23 = (uint64_t ****)(v20 + 40 * v22);
      v24 = *v23;
      if (*v23 == v4)
        goto LABEL_25;
      v25 = 0;
      v26 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v24 == (uint64_t ***)-8192;
        if (v27)
          v25 = v23;
        v28 = v22 + v26++;
        v22 = v28 & v21;
        v23 = (uint64_t ****)(v20 + 40 * v22);
        v24 = *v23;
        if (*v23 == v4)
          goto LABEL_25;
      }
      if (v25)
        v88 = v25;
      else
        v88 = v23;
    }
    else
    {
      v88 = 0;
    }
    v23 = (uint64_t ****)sub_1C541AB24(v18 + 2480, (uint64_t)&v103, (uint64_t *)&v103, v88);
    v89 = (uint64_t)v103;
    v23[3] = 0;
    v23[4] = 0;
    *v23 = (uint64_t ***)v89;
    v23[1] = (uint64_t ***)(v23 + 3);
    v23[2] = (uint64_t ***)0x100000000;
LABEL_25:
    v29 = v23[1];
    if (*(_DWORD *)v29)
    {
      v30 = 16 * *((unsigned int *)v23 + 4) - 16;
      do
      {
        v31 = *((_DWORD *)v29 + 4);
        v29 += 2;
        v30 -= 16;
      }
      while (v31);
    }
    if ((*((_BYTE *)v29[1] + 43) & 2) == 0)
    {
      v70 = (_QWORD *)sub_1C63CDD4C(a1 + 928, (uint64_t)v4);
      v71 = *(_QWORD **)(a1 + 960);
      if (v71 == v70)
        goto LABEL_77;
      v72 = v70;
      v73 = *(_DWORD *)(a1 + 944);
      if (v73)
      {
        v74 = *(_QWORD *)(a1 + 928);
        v75 = v73 - 1;
        LODWORD(v76) = ((*v70 >> 4) ^ (*v70 >> 9)) & (v73 - 1);
        v77 = (uint64_t *)(v74 + 16 * v76);
        v78 = *v77;
        if (*v70 != *v77)
        {
          v79 = 1;
          do
          {
            if (v78 == -4096)
              goto LABEL_90;
            v80 = v76 + v79++;
            v76 = v80 & v75;
            v78 = *(_QWORD *)(v74 + 16 * v76);
          }
          while (*v70 != v78);
          v77 = (uint64_t *)(v74 + 16 * v76);
        }
        *v77 = -8192;
        *(int32x2_t *)(a1 + 936) = vadd_s32(*(int32x2_t *)(a1 + 936), (int32x2_t)0x1FFFFFFFFLL);
        v71 = *(_QWORD **)(a1 + 960);
      }
LABEL_90:
      v81 = v70 + 2;
      v82 = v70;
      while (v81 != v71)
      {
        v84 = v82 + 2;
        v83 = v82[2];
        v85 = v82[3];
        v82[3] = 0;
        v86 = v82[1];
        *v82 = v83;
        v82[1] = v85;
        if (v86)
        {
          v87 = sub_1C63CDBFC(v86);
          MEMORY[0x1CAA32FC0](v87, 0x10E0C40A125B3FFLL);
        }
        v82 += 2;
        v81 = v84 + 2;
      }
      sub_1C6036354(a1 + 952, (uint64_t)v82);
      if (*(_QWORD **)(a1 + 960) == v72)
        goto LABEL_77;
      v90 = *(_QWORD *)(a1 + 928);
      v91 = *(unsigned int *)(a1 + 944);
      v92 = v90 + 16 * v91;
      if (*(_DWORD *)(a1 + 936))
      {
        if ((_DWORD)v91)
        {
          v93 = 16 * v91;
          v94 = *(_QWORD *)(a1 + 928);
          while ((*(_QWORD *)v94 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v94 += 16;
            v93 -= 16;
            if (!v93)
              goto LABEL_105;
          }
        }
        else
        {
          v94 = *(_QWORD *)(a1 + 928);
        }
      }
      else
      {
LABEL_105:
        v94 = v90 + 16 * v91;
      }
      v95 = v90 + 16 * v91;
      if (v94 == v95)
        goto LABEL_77;
      v96 = ((uint64_t)v72 - *(_QWORD *)(a1 + 952)) >> 4;
      while (1)
      {
        v97 = *(unsigned int *)(v94 + 8);
        if (v96 < v97)
          *(_DWORD *)(v94 + 8) = v97 - 1;
        v98 = v94 + 16;
        v94 = v92;
        if (v98 != v92)
        {
          v94 = v98;
          do
          {
            if ((*(_QWORD *)v94 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_116;
            v94 += 16;
          }
          while (v94 != v92);
          v94 = v92;
        }
LABEL_116:
        if (v94 == v95)
          goto LABEL_77;
      }
    }
  }
  v32 = a2 + 40;
  v99 = a2;
  v100 = a2 + 40;
  v33 = (_QWORD *)a2[41];
  while (v33 != v32)
  {
    v34 = v33 + 6;
    for (i = v33[7]; (_QWORD *)i != v34; i = *(_QWORD *)(i + 8))
    {
      v36 = *(_QWORD *)(i + 48);
      v37 = v36 >= 8;
      v38 = (_BYTE *)(v36 & 0xFFFFFFFFFFFFFFF8);
      if (!v37 || (*(_QWORD *)(i + 48) & 7) != 3 || v38 == 0)
        goto LABEL_41;
      if (!v38[6])
        goto LABEL_41;
      v41 = *(unsigned __int8 **)&v38[8 * *(int *)v38 + 8 + 8 * (v38[5] + v38[4])];
      if (!v41)
        goto LABEL_41;
      v42 = *(_QWORD **)(a1 + 696);
      v43 = sub_1C5FFEE9C(a1, i);
      v44 = sub_1C5FFEF04(a1, i);
      v45 = v44;
      v46 = *v41;
      if ((v46 - 11) >= 4 && v46 != 33)
        v41 = 0;
      v48 = (uint64_t *)v42[35];
      v47 = v42[36];
      if ((unint64_t)v48 < v47)
      {
        *v48 = v43;
        v48[1] = v44;
        v48[2] = (uint64_t)v41;
        v42[35] = v48 + 3;
LABEL_41:
        if ((*(_BYTE *)i & 4) != 0)
          continue;
        goto LABEL_67;
      }
      v102 = v33;
      v49 = (_QWORD *)v42[34];
      v50 = 0xAAAAAAAAAAAAAAABLL * (v48 - v49) + 1;
      if (v50 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_120;
      v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v49) >> 3);
      if (2 * v51 > v50)
        v50 = 2 * v51;
      if (v51 >= 0x555555555555555)
        v50 = 0xAAAAAAAAAAAAAAALL;
      v101 = v50;
      if (v50)
      {
        if (v50 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v52 = v44;
        v53 = (char *)operator new(24 * v50);
        v45 = v52;
      }
      else
      {
        v53 = 0;
      }
      v54 = (uint64_t *)&v53[8 * (v48 - v49)];
      *v54 = v43;
      v54[1] = v45;
      v54[2] = (uint64_t)v41;
      v55 = v54;
      if (v48 != v49)
      {
        do
        {
          v56 = *(_OWORD *)(v48 - 3);
          *(v55 - 1) = *(v48 - 1);
          *(_OWORD *)(v55 - 3) = v56;
          v55 -= 3;
          v48 -= 3;
        }
        while (v48 != v49);
        v48 = (uint64_t *)v42[34];
      }
      v57 = v54 + 3;
      v42[34] = v55;
      v42[35] = v54 + 3;
      v42[36] = &v53[24 * v101];
      if (v48)
        operator delete(v48);
      v42[35] = v57;
      v33 = v102;
      if (i)
        goto LABEL_41;
LABEL_67:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
    v33 = (_QWORD *)v33[1];
    v32 = v100;
  }
  v58 = (_BYTE *)v99[76];
  v59 = (_BYTE *)v99[77];
  v60 = v59 - v58;
  if (v59 == v58)
  {
    v61 = 0;
    v64 = 0;
    v62 = 0;
  }
  else
  {
    if (v60 < 0)
LABEL_120:
      abort();
    v61 = (char *)operator new(v59 - v58);
    v62 = &v61[16 * (v60 >> 4)];
    v63 = v60 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v61, v58, v63);
    v64 = &v61[v63];
  }
  v65 = *(_QWORD **)(a1 + 696);
  v66 = (void *)v65[31];
  if (v66)
  {
    v65[32] = v66;
    operator delete(v66);
  }
  v65[31] = v61;
  v65[32] = v64;
  v65[33] = v62;
  *(_QWORD *)(*(_QWORD *)(a1 + 696) + 304) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 448);
LABEL_77:
  *(_QWORD *)(a1 + 696) = 0;
}

void sub_1C6034090(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::DIScope *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  llvm::detail::DoubleAPFloat *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  std::string::size_type v20;
  size_t v21;
  const void *v22;
  size_t *v23;
  size_t v24;
  std::string __p;
  void *v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;
  char v30;

  v1 = *(unsigned int *)(a1 + 856);
  if ((_DWORD)v1)
  {
    v3 = *(uint64_t **)(a1 + 848);
    v4 = 8 * v1;
    while (1)
    {
      v5 = *v3;
      v6 = *(unsigned int *)(*v3 + 8);
      v7 = *v3 - 8 * v6;
      v8 = *(llvm::DIScope **)(v7 + 8);
      v29 = 1;
      v28 = 0;
      v30 = 0;
      v9 = *(_QWORD *)(v7 + 32);
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 128);
      if (!v10 || *(_BYTE *)(v10 + 16) != 16)
        goto LABEL_14;
      v11 = *(unsigned int *)(v10 + 32);
      if (v11 > 0x40)
      {
        v13 = (void *)operator new[]();
        memcpy(v13, *(const void **)(v10 + 24), ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
        v12 = -(uint64_t)*(unsigned int *)(v5 + 8);
      }
      else
      {
        v12 = -v6;
        v13 = *(void **)(v10 + 24);
      }
      v14 = sub_1C5FFEFD4(*(_QWORD *)(v5 + 8 * v12 + 24));
      if (v29 > 0x40 && v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      v28 = v13;
      v29 = v11;
      v30 = v14;
LABEL_19:
      v19 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8) + 16);
      v20 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8) + 24);
      if (v19)
      {
        v23 = *(size_t **)(v19 + 8);
        v24 = *v23;
        v22 = v23 + 3;
        v21 = v24;
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      sub_1C63CA530(&__p, a1, v8, v22, v21);
      sub_1C63CCBC4(a1, v20, (llvm::APInt *)&v28, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v29 >= 0x41)
      {
        if (v28)
          MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      }
      ++v3;
      v4 -= 8;
      if (!v4)
        return;
    }
    v10 = 0;
LABEL_14:
    v16 = *(void **)(v10 + 32);
    v15 = (llvm::detail::DoubleAPFloat *)(v10 + 32);
    if (v16 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v15, (unsigned int *)&v26);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v15, (unsigned int *)&v26);
    v17 = v27;
    v18 = v26;
    v27 = 0;
    if (v29 > 0x40 && v28)
    {
      MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      v28 = v18;
      v29 = v17;
      v30 = 1;
      if (v27 >= 0x41 && v26)
        MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    }
    else
    {
      v28 = v26;
      v29 = v17;
      v30 = 1;
    }
    goto LABEL_19;
  }
}

void sub_1C6034304(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  llvm::DIScope *v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string *p_dst;
  size_t v10;
  const void *v11;
  unint64_t *v12;
  const void *v13;
  unint64_t v14;
  size_t *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t Symbol;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  unint64_t size;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  char v44;
  const char *v45;
  const char *v46;
  unsigned int v47;
  char v48;
  __int16 v49;
  std::string __dst;
  unsigned __int8 *v51;

  v51 = (unsigned __int8 *)*a2;
  v4 = &v51[-8 * *((unsigned int *)v51 + 2)];
  v5 = *(llvm::DIScope **)v4;
  v6 = *((_QWORD *)v4 + 6);
  if (v6 && *(_BYTE *)v6 == 12)
    v5 = *(llvm::DIScope **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8);
  v7 = *((_QWORD *)v4 + 1);
  if (*(_BYTE *)(a1 + 704) == 2)
  {
    if (v7)
    {
      v12 = *(unint64_t **)(v7 + 8);
      v14 = *v12;
      v13 = v12 + 3;
      v8 = v14;
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v8 >= 0x17)
      {
        v17 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v17 = v8 | 7;
        v18 = v17 + 1;
        p_dst = (std::string *)operator new(v17 + 1);
        __dst.__r_.__value_.__l.__size_ = v8;
        __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
        p_dst = &__dst;
        if (!v8)
          goto LABEL_19;
      }
      memmove(p_dst, v13, v8);
    }
    else
    {
      v8 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
    }
LABEL_19:
    p_dst->__r_.__value_.__s.__data_[v8] = 0;
    goto LABEL_20;
  }
  if (v7)
  {
    v15 = *(size_t **)(v7 + 8);
    v16 = *v15;
    v11 = v15 + 3;
    v10 = v16;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  sub_1C63CA530(&__dst, a1, v5, v11, v10);
LABEL_20:
  v19 = a2[1];
  v20 = v19 & 0xFFFFFFFFFFFFFFF8;
  if ((v19 & 4) != 0 || !v20)
  {
    v37 = (uint64_t)v51;
    v38 = v51;
    while (1)
    {
      v38 = *(unsigned __int8 **)&v38[-8 * *((unsigned int *)v38 + 2) + 24];
      v39 = *v38;
      if (v39 != 12)
        break;
      v40 = *((unsigned __int16 *)v38 + 1) - 15;
      v41 = v40 > 0x33;
      v42 = (1 << v40) & 0x8000000010003;
      if (!v41 && v42 != 0)
        goto LABEL_51;
    }
    if (v39 != 13 && *((_DWORD *)v38 + 13) == 4)
    {
      v44 = 1;
      goto LABEL_52;
    }
LABEL_51:
    v44 = sub_1C5FFEFD4(*(_QWORD *)&v51[-8 * *((unsigned int *)v51 + 2) + 24]);
LABEL_52:
    v45 = *(const char **)(*(_QWORD *)(v20 + 24) + 8);
    v47 = 64;
    v46 = v45;
    v48 = v44;
    sub_1C63CCBC4(a1, *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8) + 24), (llvm::APInt *)&v46, (void **)&__dst.__r_.__value_.__l.__data_);
    if (v47 >= 0x41 && v46)
      MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
  }
  else
  {
    Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(*(_QWORD *)(a1 + 8) + 248), (const llvm::GlobalValue *)v20);
    v22 = (uint64_t)v51;
    if (v51[32])
      v23 = 4370;
    else
      v23 = 4371;
    if (v51[32])
      v24 = 4364;
    else
      v24 = 4365;
    if ((*(_DWORD *)(v20 + 32) & 0x1C00) != 0)
      v25 = v23;
    else
      v25 = v24;
    v26 = sub_1C63CB110(a1, v25);
    v27 = *(_QWORD *)(a1 + 440);
    v46 = "Type";
    v49 = 259;
    (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v27 + 112))(v27, &v46, 1);
    v28 = *(_QWORD *)(a1 + 440);
    v29 = sub_1C60310B8(a1, *(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 24));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v28 + 512))(v28, v29, 4);
    v30 = *(_QWORD *)(a1 + 440);
    v46 = "DataOffset";
    v49 = 259;
    (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v30 + 112))(v30, &v46, 1);
    v46 = 0;
    v31 = sub_1C6144BDC(*(_QWORD *)(a1 + 712), *(_DWORD *)(a1 + 728), v22, &v46);
    v32 = 0;
    if (v31 && v46 != (const char *)(*(_QWORD *)(a1 + 712) + 16 * *(unsigned int *)(a1 + 728)))
      v32 = sub_1C617C470(a1 + 712, (uint64_t *)&v51)[1];
    (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 440) + 376))(*(_QWORD *)(a1 + 440), Symbol, v32);
    v33 = *(_QWORD *)(a1 + 440);
    v46 = "Segment";
    v49 = 259;
    (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v33 + 112))(v33, &v46, 1);
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 440) + 368))(*(_QWORD *)(a1 + 440), Symbol);
    v34 = *(_QWORD *)(a1 + 440);
    v46 = "Name";
    v49 = 259;
    (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v34 + 112))(v34, &v46, 1);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &__dst;
    else
      v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __dst.__r_.__value_.__l.__size_;
    sub_1C6030BE0(*(_QWORD *)(a1 + 440), v35, size, 12);
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 440) + 632))(*(_QWORD *)(a1 + 440), 4, 0, 1, 0);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 440) + 192))(*(_QWORD *)(a1 + 440), v26, 0);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

uint64_t sub_1C6034720(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v12 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v13 = &v4[72 * v5];
          v14 = (uint64_t)(v4 + 8);
          do
          {
            *(_QWORD *)v12 = *(_QWORD *)(v14 - 8);
            sub_1C6034978((uint64_t)(v12 + 8), v14);
            v12[64] = *(_BYTE *)(v14 + 56);
            v12 += 72;
            v15 = v14 + 64;
            v14 += 72;
          }
          while ((char *)v15 != v13);
          v16 = v12;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v12 = *(char **)a1;
        }
        else
        {
          v16 = *(char **)a1;
        }
        v17 = &v12[72 * v6];
        if (v17 != v16)
        {
          do
          {
            v18 = v17 - 72;
            sub_1C63CD318((char **)v17 - 8);
            v17 = v18;
          }
          while (v18 != v16);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v19 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v19)
        {
          v20 = *(_QWORD *)a2 - 64;
          v21 = 72 * v19;
          do
          {
            sub_1C63CD318((char **)(v20 + v21));
            v21 -= 72;
          }
          while (v21);
        }
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v22 = *(_QWORD *)a1 - 64;
          v23 = 72 * v6;
          do
          {
            sub_1C63CD318((char **)(v22 + v23));
            v23 -= 72;
          }
          while (v23);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C63CCF40(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[72 * v6];
        v8 = *(_QWORD *)a1 + 8;
        v9 = (uint64_t)(v4 + 8);
        do
        {
          *(_QWORD *)(v8 - 8) = *(_QWORD *)(v9 - 8);
          v10 = sub_1C6034978(v8, v9);
          *(_BYTE *)(v10 + 56) = *(_BYTE *)(v9 + 56);
          v8 = v10 + 72;
          v11 = v9 + 64;
          v9 += 72;
        }
        while ((char *)v11 != v7);
        goto LABEL_26;
      }
      v6 = 0;
LABEL_26:
      v24 = *(char **)a2;
      v25 = *(unsigned int *)(a2 + 8);
      if (v6 != v25)
      {
        v26 = &v24[72 * v25];
        v27 = 72 * v6 + 8;
        v28 = *(_QWORD *)a1 + v27;
        v29 = (uint64_t)&v24[v27];
        do
        {
          v30 = v29 - 8;
          *(_QWORD *)(v28 - 8) = *(_QWORD *)(v29 - 8);
          *(_QWORD *)v28 = v28 + 16;
          *(_QWORD *)(v28 + 8) = 0x100000000;
          if (*(_DWORD *)(v29 + 8))
            v28 = sub_1C6034978(v28, v29);
          *(_BYTE *)(v28 + 56) = *(_BYTE *)(v29 + 56);
          v28 += 72;
          v29 += 72;
        }
        while ((char *)(v30 + 72) != v26);
        v24 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v31 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v31)
      {
        v32 = v24 - 64;
        v33 = 72 * v31;
        do
        {
          sub_1C63CD318((char **)&v32[v33]);
          v33 -= 72;
        }
        while (v33);
      }
LABEL_35:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C63CCEC4((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C6034978(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v10 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v11 = 40 * v5;
          v12 = (uint64_t)(v4 + 8);
          do
          {
            v13 = (uint64_t)(v10 + 8);
            *(_QWORD *)v10 = *(_QWORD *)(v12 - 8);
            v10 += 40;
            sub_1C486F510(v13, v12);
            v12 += 40;
            v11 -= 40;
          }
          while (v11);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v14 = *(char **)a1;
        }
        else
        {
          v14 = *(char **)a1;
        }
        if (&v14[40 * v6] != v10)
        {
          v15 = (uint64_t)&v14[40 * v6 - 16];
          do
          {
            v16 = *(void **)(v15 - 16);
            if ((void *)v15 != v16)
              free(v16);
            v17 = (char *)(v15 - 24);
            v15 -= 40;
          }
          while (v17 != v10);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v18 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v18)
        {
          v19 = *(char **)a2;
          v20 = 40 * v18;
          do
          {
            v21 = *(char **)&v19[v20 - 32];
            if (&v19[v20 - 16] != v21)
              free(v21);
            v20 -= 40;
          }
          while (v20);
        }
        goto LABEL_44;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v22 = *(char **)a1;
          v23 = 40 * v6;
          do
          {
            v24 = *(char **)&v22[v23 - 32];
            if (&v22[v23 - 16] != v24)
              free(v24);
            v23 -= 40;
          }
          while (v23);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C63CD038(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a1 + 8;
        v8 = 40 * v6;
        v9 = (uint64_t)(v4 + 8);
        do
        {
          *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 - 8);
          v7 = sub_1C486F510(v7, v9) + 40;
          v9 += 40;
          v8 -= 40;
        }
        while (v8);
        goto LABEL_33;
      }
      v6 = 0;
LABEL_33:
      v25 = *(char **)a2;
      v26 = *(unsigned int *)(a2 + 8);
      if (v6 != v26)
      {
        v27 = &v25[40 * v26];
        v28 = 40 * v6 + 8;
        v29 = (_QWORD *)(*(_QWORD *)a1 + v28);
        v30 = (uint64_t)&v25[v28];
        do
        {
          v31 = v30 - 8;
          *(v29 - 1) = *(_QWORD *)(v30 - 8);
          *v29 = v29 + 2;
          v29[1] = 0x100000000;
          if (*(_DWORD *)(v30 + 8))
            v29 = (_QWORD *)sub_1C486F510((uint64_t)v29, v30);
          v29 += 5;
          v30 += 40;
        }
        while ((char *)(v31 + 40) != v27);
        v25 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v32 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v32)
      {
        v33 = 40 * v32;
        do
        {
          v34 = *(char **)&v25[v33 - 32];
          if (&v25[v33 - 16] != v34)
            free(v34);
          v33 -= 40;
        }
        while (v33);
      }
LABEL_44:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C63CCFAC((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C6034BE0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD **)(result + 16);
  if (v4 == v5)
  {
LABEL_4:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 16))(*v4, a2);
      if (*a3)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034C44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD **)(result + 16);
  if (v4 == v5)
  {
LABEL_4:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 24))(*v4, a2);
      if (*a3)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034CA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_5:
    *a4 = 0;
  }
  else
  {
    v8 = a3;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 32))(*v5, a2, v8);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1C6034D1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD **)(result + 16);
  if (v4 == v5)
  {
LABEL_4:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 40))(*v4, a2);
      if (*a3)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034D80@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD **)(result + 16);
  if (v4 == v5)
  {
LABEL_4:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 48))(*v4, a2);
      if (*a3)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034DE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD **)(result + 16);
  if (v4 == v5)
  {
LABEL_4:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 56))(*v4, a2);
      if (*a3)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034E48@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD **)(result + 16);
  if (v4 == v5)
  {
LABEL_4:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 64))(*v4, a2);
      if (*a3)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034EAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 72))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034F20@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 80))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6034F94@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 88))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035008@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 96))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C603507C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 104))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60350F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 112))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035164@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 120))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60351D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 128))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C603524C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 136))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60352C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 144))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035334@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 152))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60353A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 160))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C603541C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 168))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035490@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 176))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035504@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 184))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035578@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 192))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60355EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 200))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035660@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 208))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60356D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 216))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035748@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 224))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60357BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 232))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035830@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 240))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C60358A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 248))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035918@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 256))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C603598C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 264))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035A00@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 272))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035A74@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 280))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035AE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 288))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035B5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 296))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035BD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 304))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035C44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 312))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035CB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 320))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035D2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 328))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035DA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 336))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035E14@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  if (v5 == v6)
  {
LABEL_4:
    *a4 = 0;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 344))(*v5, a2, a3);
      if (*a4)
        break;
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C6035E88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 488))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1C6035E98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 528))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1C6035EA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 496))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1C6035EB8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), a2, 1);
}

uint64_t sub_1C6035ECC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2, 1);
}

uint64_t sub_1C6035EE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

double sub_1C6035EF0@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const char *v4;
  unint64_t v5;
  const char *v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 __dst;
  unint64_t v13;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (!a2)
    return result;
  if (a2 > 0xFFF)
    v4 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  else
    v4 = sub_1C611D8FC(a2);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v6 = v4;
  v7 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v13 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v13) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_13;
  }
  memmove(p_dst, v6, v7);
LABEL_13:
  *((_BYTE *)p_dst + v7) = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  result = *(double *)&__dst;
  *(_OWORD *)a3 = __dst;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

void sub_1C6035FF0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6036004(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  unint64_t v13;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v4 >> 47) ^ v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v6 >> 47) ^ v6);
  v8 = 0x1E1D57147BCD7FB7 * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
  v9 = (uint8x8_t)vcnt_s8(v3);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] <= 1uLL)
    v10 = (*(_QWORD *)&v3 - 1) & v8;
  else
    v10 = v8 < *(_QWORD *)&v3 ? v8 : v8 % *(_QWORD *)&v3;
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  result = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = result[1];
      if (v13 == v8)
      {
        if (result[2] == a2 && result[3] == a3)
          return result;
      }
      else
      {
        if (v9.u32[0] <= 1uLL)
        {
          v13 &= *(_QWORD *)&v3 - 1;
        }
        else if (v13 >= *(_QWORD *)&v3)
        {
          v13 %= *(_QWORD *)&v3;
        }
        if (v13 != v10)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1C603612C(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        sub_1C619127C(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C60361A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  void **v16;

  *(_QWORD *)a1 = &off_1E81ABDF8;
  sub_1C5A7CBDC(*(char **)(a1 + 1256));
  v16 = (void **)(a1 + 1224);
  sub_1C5464DAC(&v16);
  v16 = (void **)(a1 + 1200);
  sub_1C5464DAC(&v16);
  v2 = *(void **)(a1 + 1136);
  if (v2 != (void *)(a1 + 1152))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1112), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1088), 8);
  v3 = *(void **)(a1 + 1040);
  if (v3 != (void *)(a1 + 1056))
    free(v3);
  if ((*(_BYTE *)(a1 + 1000) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1008), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 976), 8);
  sub_1C63CD514((_QWORD *)(a1 + 928));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 896), 8);
  v4 = *(void **)(a1 + 848);
  if (v4 != (void *)(a1 + 864))
    free(v4);
  v5 = *(void **)(a1 + 816);
  if (v5 != (void *)(a1 + 832))
    free(v5);
  v6 = *(void **)(a1 + 784);
  if (v6 != (void *)(a1 + 800))
    free(v6);
  v7 = *(unsigned int *)(a1 + 776);
  v8 = *(_QWORD *)(a1 + 760);
  if ((_DWORD)v7)
  {
    v9 = (void ***)(v8 + 8);
    v10 = 16 * v7;
    do
    {
      if (((unint64_t)*(v9 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v9 = sub_1C60376DC(v9);
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
    v8 = *(_QWORD *)(a1 + 760);
  }
  MEMORY[0x1CAA32FB4](v8, 8);
  v11 = *(unsigned int *)(a1 + 752);
  v12 = *(_QWORD *)(a1 + 736);
  if ((_DWORD)v11)
  {
    v13 = (char **)(v12 + 8);
    v14 = 96 * v11;
    do
    {
      if (((unint64_t)*(v13 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v13 = sub_1C63CD218(v13);
      v13 += 12;
      v14 -= 96;
    }
    while (v14);
    v12 = *(_QWORD *)(a1 + 736);
  }
  MEMORY[0x1CAA32FB4](v12, 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 712), 8);
  sub_1C611BD9C((_QWORD *)(a1 + 544));
  sub_1C4926AE8(a1 + 448);
  return sub_1C6009D90(a1);
}

uint64_t sub_1C6036354(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 16)
  {
    result = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (result)
    {
      v5 = sub_1C63CDBFC(result);
      result = MEMORY[0x1CAA32FC0](v5, 0x10E0C40A125B3FFLL);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_1C60363C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = *(_QWORD **)a1;
        v10 = 40 * v4;
        v11 = *(_QWORD *)a2 + 8;
        do
        {
          v12 = (uint64_t)(v9 + 1);
          *v9 = *(_QWORD *)(v11 - 8);
          v9 += 5;
          sub_1C49DA288(v12, v11);
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v13 = *(_QWORD **)a1;
      }
      else
      {
        v13 = *(_QWORD **)a1;
        v9 = *(_QWORD **)a1;
      }
      if (&v13[5 * v5] != v9)
      {
        v14 = (uint64_t)&v13[5 * v5 - 2];
        do
        {
          v15 = *(void **)(v14 - 16);
          if ((void *)v14 != v15)
            free(v15);
          v16 = (_QWORD *)(v14 - 24);
          v14 -= 40;
        }
        while (v16 != v9);
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v17 = *(_QWORD **)a1;
        v18 = 5 * v5;
        do
        {
          v19 = (_QWORD *)v17[v18 - 4];
          if (&v17[v18 - 2] != v19)
            free(v19);
          v18 -= 5;
        }
        while (v18 * 8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C63CD038(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a1 + 8;
      v7 = 40 * v5;
      v8 = *(_QWORD *)a2 + 8;
      do
      {
        *(_QWORD *)(v6 - 8) = *(_QWORD *)(v8 - 8);
        v6 = sub_1C49DA288(v6, v8) + 40;
        v8 += 40;
        v7 -= 40;
      }
      while (v7);
LABEL_26:
      v20 = *(unsigned int *)(a2 + 8);
      if (v5 != v20)
      {
        v21 = *(_QWORD *)a2 + 40 * v20;
        v22 = 40 * v5 + 8;
        v23 = (_QWORD *)(*(_QWORD *)a1 + v22);
        v24 = *(_QWORD *)a2 + v22;
        do
        {
          v25 = v24 - 8;
          *(v23 - 1) = *(_QWORD *)(v24 - 8);
          *v23 = v23 + 2;
          v23[1] = 0x100000000;
          if (*(_DWORD *)(v24 + 8))
            v23 = (_QWORD *)sub_1C49DA288((uint64_t)v23, v24);
          v23 += 5;
          v24 += 40;
        }
        while (v25 + 40 != v21);
      }
LABEL_31:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_26;
  }
  return a1;
}

_QWORD *sub_1C60365A8(uint64_t a1, int a2)
{
  int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63CD89C((char **)a1, (uint64_t)v4, (uint64_t)&v4[96 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 96 * v10;
    do
    {
      *result = -4096;
      result += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

char *sub_1C603666C(char **a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  else
    v6 = v3;
  if (v6 >> 60)
    sub_1C4764EE4();
  v8 = (char *)operator new(16 * v6);
  v9 = &v8[16 * v2];
  v10 = &v8[16 * v6];
  v11 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v9 = v11;
  v12 = v9 + 16;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 2);
      v14 -= 16;
      *((_QWORD *)v9 - 2) = v15;
      v9 -= 16;
      v16 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v9 + 1) = v16;
    }
    while (v14 != v13);
    v14 = *a1;
    v17 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v17 != v14)
    {
      v18 = *((_QWORD *)v17 - 1);
      *((_QWORD *)v17 - 1) = 0;
      if (v18)
      {
        v19 = sub_1C63CDBFC(v18);
        MEMORY[0x1CAA32FC0](v19, 0x10E0C40A125B3FFLL);
      }
      v17 -= 16;
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

_QWORD *sub_1C6036784(_QWORD *result, unint64_t a2)
{
  void **v3;
  unint64_t *v4;
  char *v5;
  unint64_t v6;
  size_t v7;

  v3 = (void **)result;
  if (result[2] >= a2)
  {
    v5 = (char *)*result;
    v4 = result + 1;
    v6 = result[1];
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = result[1];
    if (v7)
      result = memset(v5, 5, v7);
    if (a2 > v6)
      result = memset(&v5[v6], 5, a2 - v6);
  }
  else
  {
    result[1] = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 1);
    result = memset(*v3, 5, a2);
    v4 = (unint64_t *)(v3 + 1);
  }
  *v4 = a2;
  return result;
}

unsigned int *sub_1C6036824(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 24 * v2;
      do
      {
        *v6 = xmmword_1C85F6FF0;
        v6 = (_OWORD *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(24 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 24 * v10;
        do
        {
          *(_OWORD *)result = xmmword_1C85F6FF0;
          result += 6;
          v11 -= 24;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

_QWORD *sub_1C6036934(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8 >> 60)
    sub_1C4764EE4();
  v10 = (char *)operator new(16 * v8);
  v11 = &v10[16 * v4];
  v12 = a2[1];
  v13 = &v10[16 * v8];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  a2[1] = 0;
  v14 = v11 + 16;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    if (!v2)
      return v14;
    goto LABEL_14;
  }
  v15 = v3;
  do
  {
    v16 = *(v15 - 2);
    v15 -= 2;
    *((_QWORD *)v11 - 2) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v15[1];
    v15[1] = 0;
  }
  while (v15 != v2);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v13;
  do
  {
    sub_1C619127C(v3 - 1);
    v3 -= 2;
  }
  while (v3 != v2);
  if (v2)
LABEL_14:
    operator delete(v2);
  return v14;
}

unint64_t sub_1C6036A38(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v91;
  uint64_t v92;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(a2 - 1);
        v41 = *v8;
        if (*(unsigned __int16 *)(*(_QWORD *)v40 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v8 + 32))
        {
          *v8 = v40;
          *(a2 - 1) = v41;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C603720C(v8, v8 + 1, a2 - 1);
      case 4:
        return (unint64_t)sub_1C60374E0(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v42 = v8 + 1;
        v43 = v8 + 2;
        v44 = v8 + 3;
        result = (unint64_t)sub_1C60374E0(v8, v8 + 1, v8 + 2, v8 + 3);
        v45 = *(a2 - 1);
        v46 = v8[3];
        if (*(unsigned __int16 *)(*(_QWORD *)v45 + 32) < *(unsigned __int16 *)(*(_QWORD *)v46 + 32))
        {
          *v44 = v45;
          *(a2 - 1) = v46;
          v47 = *v44;
          v48 = *v43;
          if (*(unsigned __int16 *)(*(_QWORD *)*v44 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v43 + 32))
          {
            *v43 = v47;
            *v44 = v48;
            v49 = *v42;
            if (*(unsigned __int16 *)(*(_QWORD *)v47 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v42
                                                                                                  + 32))
            {
              v8[1] = v47;
              v8[2] = v49;
              v50 = *v8;
              if (*(unsigned __int16 *)(*(_QWORD *)v47 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v8 + 32))
              {
                *v8 = v47;
                v8[1] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 1;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 8;
              v55 = v8;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v51;
                if (*(unsigned __int16 *)(*(_QWORD *)v56 + 32) < *(unsigned __int16 *)(*(_QWORD *)v57 + 32))
                {
                  v58 = v54;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v57;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v57 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (*(unsigned __int16 *)(*(_QWORD *)v56 + 32) >= *(unsigned __int16 *)(*(_QWORD *)v57 + 32))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v56;
                }
                v51 = v55 + 1;
                v54 += 8;
              }
              while (v55 + 1 != a2);
            }
          }
          else if (!v53)
          {
            do
            {
              v92 = *v7;
              v91 = v7[1];
              v7 = v51;
              if (*(unsigned __int16 *)(*(_QWORD *)v91 + 32) < *(unsigned __int16 *)(*(_QWORD *)v92 + 32))
              {
                do
                {
                  *v51 = v92;
                  v92 = *(v51 - 2);
                  --v51;
                }
                while (*(unsigned __int16 *)(*(_QWORD *)v91 + 32) < *(unsigned __int16 *)(*(_QWORD *)v92 + 32));
                *v51 = v91;
              }
              v51 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (unint64_t)(v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 >= v10)
                {
                  v68 = *(_QWORD *)v66;
                }
                else
                {
                  v67 = v65[1];
                  v68 = *(_QWORD *)v66;
                  result = *(unsigned __int16 *)(*(_QWORD *)v66 + 32);
                  if (result < *(unsigned __int16 *)(*(_QWORD *)v67 + 32))
                  {
                    v68 = *(_QWORD *)v67;
                    v66 = v65[1];
                    ++v65;
                    v64 = 2 * v63 + 2;
                  }
                }
                v69 = &v8[v63];
                v70 = *v69;
                if (*(unsigned __int16 *)(v68 + 32) >= *(unsigned __int16 *)(*(_QWORD *)*v69 + 32))
                {
                  do
                  {
                    v71 = v65;
                    *v69 = v66;
                    if (v61 < v64)
                      break;
                    v72 = (2 * v64) | 1;
                    v65 = &v8[v72];
                    v64 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v64 >= v10)
                    {
                      v74 = *(_QWORD *)v66;
                      v64 = v72;
                    }
                    else
                    {
                      v73 = v65[1];
                      v74 = *(_QWORD *)v66;
                      if (*(unsigned __int16 *)(*(_QWORD *)v66 + 32) >= *(unsigned __int16 *)(*(_QWORD *)v73 + 32))
                      {
                        v64 = v72;
                      }
                      else
                      {
                        v74 = *(_QWORD *)v73;
                        v66 = v65[1];
                        ++v65;
                      }
                    }
                    result = *(unsigned __int16 *)(*(_QWORD *)v70 + 32);
                    v69 = v71;
                  }
                  while (*(unsigned __int16 *)(v74 + 32) >= result);
                  *v71 = v70;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            do
            {
              v75 = 0;
              v76 = *v8;
              v77 = v8;
              do
              {
                v78 = &v77[v75];
                v81 = v78[1];
                v79 = v78 + 1;
                v80 = v81;
                v82 = (2 * v75) | 1;
                v83 = 2 * v75 + 2;
                if (v83 < v10)
                {
                  result = *(unsigned __int16 *)(*(_QWORD *)v80 + 32);
                  if (result < *(unsigned __int16 *)(*(_QWORD *)v79[1] + 32))
                  {
                    v80 = v79[1];
                    ++v79;
                    v82 = v83;
                  }
                }
                *v77 = v80;
                v77 = v79;
                v75 = v82;
              }
              while (v82 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v79 == --a2)
              {
                *v79 = v76;
              }
              else
              {
                *v79 = *a2;
                *a2 = v76;
                v84 = (char *)v79 - (char *)v8 + 8;
                if (v84 >= 9)
                {
                  v85 = (((unint64_t)v84 >> 3) - 2) >> 1;
                  v86 = &v8[v85];
                  v87 = *v86;
                  v88 = *v79;
                  if (*(unsigned __int16 *)(*(_QWORD *)*v86 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v79 + 32))
                  {
                    do
                    {
                      v89 = v86;
                      *v79 = v87;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                      v86 = &v8[v85];
                      v87 = *v86;
                      v79 = v89;
                    }
                    while (*(unsigned __int16 *)(*(_QWORD *)*v86 + 32) < *(unsigned __int16 *)(*(_QWORD *)v88 + 32));
                    *v89 = v88;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)sub_1C603720C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C603720C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C603720C(v7 + 1, v12 - 1, a2 - 2);
          sub_1C603720C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)sub_1C603720C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = *(_QWORD *)*v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(unsigned __int16 *)(v15 + 32);
          if (*(unsigned __int16 *)(*(_QWORD *)*(v7 - 1) + 32) < v16)
            goto LABEL_12;
          if (v16 >= *(unsigned __int16 *)(*(_QWORD *)*(a2 - 1) + 32))
          {
            v31 = v7 + 1;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              ++v31;
            }
            while (v16 >= *(unsigned __int16 *)(*(_QWORD *)*v8 + 32));
          }
          else
          {
            v8 = v7;
            do
            {
              v30 = v8[1];
              ++v8;
            }
            while (v16 >= *(unsigned __int16 *)(*(_QWORD *)v30 + 32));
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
              v33 = *--v32;
            while (v16 < *(unsigned __int16 *)(*(_QWORD *)v33 + 32));
          }
          if (v8 < v32)
          {
            v34 = *v8;
            v35 = *v32;
            do
            {
              *v8 = v35;
              *v32 = v34;
              v36 = *(unsigned __int16 *)(*(_QWORD *)v14 + 32);
              do
              {
                v37 = v8[1];
                ++v8;
                v34 = v37;
              }
              while (v36 >= *(unsigned __int16 *)(*(_QWORD *)v37 + 32));
              do
              {
                v38 = *--v32;
                v35 = v38;
              }
              while (v36 < *(unsigned __int16 *)(*(_QWORD *)v38 + 32));
            }
            while (v8 < v32);
          }
          v39 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v39;
          a4 = 0;
          *v39 = v14;
          continue;
        }
        v16 = *(unsigned __int16 *)(v15 + 32);
LABEL_12:
        v17 = 0;
        do
          v18 = v7[++v17];
        while (*(unsigned __int16 *)(*(_QWORD *)v18 + 32) < v16);
        v19 = &v7[v17];
        v20 = a2;
        if (v17 == 1)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *--v20;
          }
          while (*(unsigned __int16 *)(*(_QWORD *)v22 + 32) >= v16);
        }
        else
        {
          do
            v21 = *--v20;
          while (*(unsigned __int16 *)(*(_QWORD *)v21 + 32) >= v16);
        }
        if (v19 >= v20)
        {
          v8 = &v7[v17];
        }
        else
        {
          v23 = *v20;
          v8 = v19;
          v24 = v20;
          do
          {
            *v8 = v23;
            *v24 = v18;
            v25 = *(unsigned __int16 *)(*(_QWORD *)v14 + 32);
            do
            {
              v26 = v8[1];
              ++v8;
              v18 = v26;
            }
            while (*(unsigned __int16 *)(*(_QWORD *)v26 + 32) < v25);
            do
            {
              v27 = *--v24;
              v23 = v27;
            }
            while (*(unsigned __int16 *)(*(_QWORD *)v27 + 32) >= v25);
          }
          while (v8 < v24);
        }
        v28 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v19 < v20)
        {
LABEL_33:
          result = sub_1C6036A38(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_1C60372B4(v7, v8 - 1);
        result = sub_1C60372B4(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C603720C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *result;
  v5 = *(unsigned __int16 *)(*(_QWORD *)*a2 + 32);
  v6 = *a3;
  v7 = *(unsigned __int16 *)(*(_QWORD *)*a3 + 32);
  if (v5 >= *(unsigned __int16 *)(*(_QWORD *)*result + 32))
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      v8 = *result;
      if (*(unsigned __int16 *)(*(_QWORD *)*a2 + 32) < *(unsigned __int16 *)(*(_QWORD *)*result + 32))
      {
        *result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(unsigned __int16 *)(*(_QWORD *)*a3 + 32) >= *(unsigned __int16 *)(*(_QWORD *)v4 + 32))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C60372B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(unsigned __int16 *)(*(_QWORD *)v6 + 32) < *(unsigned __int16 *)(*(_QWORD *)*a1 + 32))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C603720C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C60374E0(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_1C60374E0(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (*(unsigned __int16 *)(*(_QWORD *)v20 + 32) < *(unsigned __int16 *)(*(_QWORD *)v21 + 32))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (*(unsigned __int16 *)(*(_QWORD *)*v19 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v18 + 32))
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (*(unsigned __int16 *)(*(_QWORD *)v22 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v17 + 32))
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (*(unsigned __int16 *)(*(_QWORD *)v22 + 32) < *(unsigned __int16 *)(*(_QWORD *)*a1 + 32))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C603720C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*(unsigned __int16 *)(*(_QWORD *)*v9 + 32) < *(unsigned __int16 *)(*(_QWORD *)*v8 + 32))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (*(unsigned __int16 *)(*(_QWORD *)v12 + 32) >= *(unsigned __int16 *)(*(_QWORD *)v13 + 32))
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C60374E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C603720C(a1, a2, a3);
  v9 = *a3;
  if (*(unsigned __int16 *)(*(_QWORD *)*a4 + 32) < *(unsigned __int16 *)(*(_QWORD *)*a3 + 32))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(unsigned __int16 *)(*(_QWORD *)*a3 + 32) < *(unsigned __int16 *)(*(_QWORD *)*a2 + 32))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(unsigned __int16 *)(*(_QWORD *)*a2 + 32) < *(unsigned __int16 *)(*(_QWORD *)*a1 + 32))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

char **sub_1C603758C(char **result)
{
  char **v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = 96 * v2;
    result = (char **)(*result + 8);
    do
    {
      if (((unint64_t)*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C63CD218(result);
      result += 12;
      v4 -= 96;
    }
    while (v4);
  }
  v5 = 1 << (33 - __clz(v3 - 1));
  if (v5 <= 64)
    v5 = 64;
  if (v3)
    v6 = v5;
  else
    v6 = 0;
  if ((_DWORD)v6 == *((_DWORD *)v1 + 4))
  {
    v1[1] = 0;
    if ((_DWORD)v6)
    {
      v7 = *v1;
      v8 = 96 * v6;
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 += 96;
        v8 -= 96;
      }
      while (v8);
    }
  }
  else
  {
    result = (char **)MEMORY[0x1CAA32FB4](*v1, 8);
    if ((_DWORD)v6)
    {
      v9 = (4 * (int)v6 / 3u + 1) | ((unint64_t)(4 * (int)v6 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v10;
      result = (char **)operator new(96 * v10, (std::align_val_t)8uLL);
      *v1 = (char *)result;
      v1[1] = 0;
      v11 = *((unsigned int *)v1 + 4);
      if ((_DWORD)v11)
      {
        v12 = 96 * v11;
        do
        {
          *result = (char *)-4096;
          result += 12;
          v12 -= 96;
        }
        while (v12);
      }
    }
    else
    {
      *v1 = 0;
      v1[1] = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
  }
  return result;
}

void ***sub_1C60376DC(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x1CAA32FC0](v2, 0x1080C40ABB4582ELL);
  }
  return a1;
}

_QWORD *sub_1C6037734(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void ***v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (void ***)(v4 + 8);
      v13 = 16 * v3;
      do
      {
        v14 = (uint64_t)*(v12 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          *v19 = *(v12 - 1);
          v16 = *v12;
          *v12 = 0;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
          sub_1C60376DC(v12);
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C6037878(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t TempSymbol;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;

  v2 = (_QWORD *)a2[64];
  v3 = (_QWORD *)a2[65];
  if (v2 != v3)
  {
    v4 = (uint64_t *)result;
    v5 = a2 + 70;
    while (1)
    {
      v15[0] = *v2;
      v17 = 0;
      result = sub_1C61252B8(v5, v15, &v17);
      if ((_DWORD)result)
        break;
      v2 += 15;
      if (v2 == v3)
        return result;
    }
    v6 = sub_1C6025250(v4);
    v7 = v4[1];
    v15[0] = "GCC_except_table_end";
    v16 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(*(_QWORD *)(v7 + 264), (uint64_t)v15, 1);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v4[1] + 272) + 192))(*(_QWORD *)(v4[1] + 272), TempSymbol, 0);
    v9 = *(_QWORD *)(*(_QWORD *)(v4[1] + 272) + 8);
    v10 = sub_1C484358C(v9 + 192, 24, 3);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 18) << 16;
    *(_BYTE *)v10 = 2;
    *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = TempSymbol;
    v12 = sub_1C484358C(v9 + 192, 24, 3);
    v13 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 18) << 16;
    *(_BYTE *)v12 = 2;
    *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = v6;
    v14 = sub_1C484358C(v9 + 192, 32, 3);
    *(_BYTE *)v14 = 0;
    *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = v10;
    *(_QWORD *)(v14 + 24) = v12;
    return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v4[1] + 272) + 424))(*(_QWORD *)(v4[1] + 272), v6, v14);
  }
  return result;
}

uint64_t sub_1C6037A10(uint64_t *a1, uint64_t a2)
{
  int v5;
  uint64_t v6;
  _DWORD *i;

  if ((sub_1C6037B5C(a1, a2) & 1) != 0)
    return 1;
  v5 = **(unsigned __int16 **)(a2 + 16);
  if (v5 != 213)
  {
    if (v5 != 116)
      goto LABEL_13;
    v6 = *(unsigned int *)(a2 + 40);
    if (!(_DWORD)v6)
      return sub_1C54F87F0(a1, a2);
    for (i = (_DWORD *)(*(_QWORD *)(a2 + 32) + 16); *((_BYTE *)i - 16) != 17; i += 8)
    {
      if (!--v6)
        return sub_1C54F87F0(a1, a2);
    }
    if (*i != 2524)
      return sub_1C54F87F0(a1, a2);
  }
  if (sub_1C6038450((llvm::ConstantInt ******)a1, a2))
    return 1;
  v5 = **(unsigned __int16 **)(a2 + 16);
LABEL_13:
  if (v5 > 117)
  {
    switch(v5)
    {
      case 'v':
      case '|':
      case '~':
        if ((sub_1C603931C(a1, a2) & 1) == 0)
          return sub_1C54F87F0(a1, a2);
        return 1;
      case 'x':
        if ((sub_1C60385F8(a1, a2) & 1) == 0)
          return sub_1C54F87F0(a1, a2);
        return 1;
      default:
        return sub_1C54F87F0(a1, a2);
    }
  }
  if (v5 == 76)
  {
    if ((sub_1C60387A0(a1, a2) & 1) != 0)
      return 1;
  }
  else
  {
    if (v5 != 77)
    {
      if (v5 != 82 || (sub_1C6038970((uint64_t **)a1, a2) & 1) == 0)
        return sub_1C54F87F0(a1, a2);
      return 1;
    }
    if ((sub_1C6038E2C((uint64_t)a1, a2) & 1) != 0)
      return 1;
  }
  return sub_1C54F87F0(a1, a2);
}

uint64_t sub_1C6037B5C(uint64_t *a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  void **v15;
  void (**v16)(void **);
  void **v17;
  void (**v18)(void **);
  uint64_t *v19;
  void **v20;
  void (**v21)(void **);
  void **v22;
  void (**v23)(void **);
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t *v77;
  unsigned int v78;
  unsigned __int8 v79;
  char v80;
  void *v81;
  uint64_t (*v82)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v83;
  void **v84;
  uint64_t *v85;
  unsigned int v86;
  char v87;
  void *v88;
  uint64_t v89;
  int v90;
  void **v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned __int16 **)(a2 + 16);
  v5 = (v4 - 45) > 0x16 || ((1 << (v4 - 45)) & 0x700007) == 0;
  if (v5 && (v4 - 127) >= 3)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v7 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
  if ((v7 & 0x80000000) != 0)
    v8 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  else
    v8 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v7);
  v9 = *v8;
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  if (**(_WORD **)(v10 + 16) != 51)
    return 0;
  v11 = *(_QWORD *)(v10 + 32);
  if ((v7 & 0x80000000) != 0)
    v12 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  else
    v12 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v7);
  v75 = *(_DWORD *)(v11 + 68);
  v13 = *(_DWORD *)(v11 + 100);
  v14 = *v12;
  if (!v14)
  {
LABEL_19:
    v88 = &off_1E816EFF0;
    v89 = (uint64_t)sub_1C554C894;
    v91 = &v88;
    v81 = &off_1E816F038;
    v82 = sub_1C554C8B0;
    v84 = &v81;
    sub_1C554C3AC(v75, v6, (uint64_t)&v88, (uint64_t)&v81, 0, 0, &v77);
    v15 = v84;
    if (v84 == &v81)
    {
      v16 = (void (**)(void **))((char *)v81 + 32);
      v15 = &v81;
    }
    else
    {
      if (!v84)
      {
LABEL_22:
        v17 = v91;
        if (v91 == &v88)
        {
          v18 = (void (**)(void **))((char *)v88 + 32);
          v17 = &v88;
        }
        else
        {
          if (!v91)
          {
LABEL_25:
            if (v80)
            {
              if (v78 < 0x41)
                goto LABEL_42;
              v19 = v77;
              if (!v77)
                goto LABEL_42;
              goto LABEL_41;
            }
            v88 = &off_1E816EFF0;
            v89 = (uint64_t)sub_1C554C894;
            v91 = &v88;
            v81 = &off_1E816F038;
            v82 = sub_1C554C8B0;
            v84 = &v81;
            sub_1C554C3AC(v13, v6, (uint64_t)&v88, (uint64_t)&v81, 0, 0, &v85);
            v20 = v84;
            if (v84 == &v81)
            {
              v21 = (void (**)(void **))((char *)v81 + 32);
              v20 = &v81;
            }
            else
            {
              if (!v84)
              {
LABEL_35:
                v22 = v91;
                if (v91 == &v88)
                {
                  v23 = (void (**)(void **))((char *)v88 + 32);
                  v22 = &v88;
                }
                else
                {
                  if (!v91)
                  {
LABEL_38:
                    if (v87)
                    {
                      if (v86 < 0x41)
                        goto LABEL_42;
                      v19 = v85;
                      if (!v85)
                        goto LABEL_42;
LABEL_41:
                      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
                      goto LABEL_42;
                    }
                    return 0;
                  }
                  v23 = (void (**)(void **))((char *)*v91 + 40);
                }
                (*v23)(v22);
                goto LABEL_38;
              }
              v21 = (void (**)(void **))((char *)*v84 + 40);
            }
            (*v21)(v20);
            goto LABEL_35;
          }
          v18 = (void (**)(void **))((char *)*v91 + 40);
        }
        (*v18)(v17);
        goto LABEL_25;
      }
      v16 = (void (**)(void **))((char *)*v84 + 40);
    }
    (*v16)(v15);
    goto LABEL_22;
  }
  while ((*(_BYTE *)(v14 + 3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14)
      goto LABEL_19;
  }
  while (1)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14)
      break;
    if ((*(_BYTE *)(v14 + 3) & 1) == 0)
      goto LABEL_19;
  }
LABEL_42:
  v24 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
  v25 = *(_QWORD *)(v10 + 32);
  v26 = *(_DWORD *)(v25 + 164);
  sub_1C554CE74(**(unsigned __int16 **)(a2 + 16), *(_DWORD *)(v25 + 132), v24, v6, (uint64_t)&v81);
  if ((_BYTE)v83)
  {
    sub_1C554CE74(**(unsigned __int16 **)(a2 + 16), v26, v24, v6, (uint64_t)&v77);
    v27 = v79;
    if (v79)
    {
      v73 = v79;
      v28 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      v74 = v13;
      if (v28 < 0 && (v28 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
        v29 = *(void **)(*(_QWORD *)(v6 + 424) + 8 * (v28 & 0x7FFFFFFF));
      else
        v29 = 0;
      v31 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 48);
      v32 = *a1;
      *(_QWORD *)(v32 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v32 + 48) = a2;
      v33 = *a1;
      v88 = v29;
      LODWORD(v89) = 0;
      if (v82 > 0x40)
        v34 = *(_QWORD *)v81;
      else
        v34 = (uint64_t)((_QWORD)v81 << -(uint64_t)v82) >> -(uint64_t)v82;
      v35 = sub_1C5544694(v33, (unint64_t *)&v88, v34);
      v37 = v36;
      v38 = *a1;
      v88 = v29;
      LODWORD(v89) = 0;
      if (v78 > 0x40)
        v39 = *v77;
      else
        v39 = (uint64_t)((_QWORD)v77 << -(uint64_t)v78) >> -(uint64_t)v78;
      v40 = sub_1C5544694(v38, (unint64_t *)&v88, v39);
      v41 = *a1;
      LODWORD(v85) = v28;
      v86 = 1;
      LODWORD(v88) = v31;
      v90 = 2;
      LODWORD(v91) = v75;
      v92 = 0;
      v93 = v74;
      v94 = 0;
      v95 = v35;
      v96 = v37;
      v97 = 1;
      v98 = v40;
      v99 = v42;
      v100 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 51, &v85, 1, &v88, 5, 0);
      v43 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v43 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v43 = a2;
          do
            v43 = *(_QWORD *)(v43 + 8);
          while ((*(_WORD *)(v43 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v43 + 8));
      v27 = v73;
      if (v79 && v78 >= 0x41 && v77)
        MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
      if (!(_BYTE)v83)
        return 1;
LABEL_64:
      if (v82 >= 0x41 && v81)
        MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
      if (v27)
        return 1;
      goto LABEL_69;
    }
    if ((_BYTE)v83)
      goto LABEL_64;
  }
LABEL_69:
  v88 = &v90;
  v89 = 0x400000000;
  v44 = *(_QWORD *)(a2 + 32) + 32;
  v81 = &v83;
  HIDWORD(v82) = 4;
  v83 = v44;
  v45 = 1;
  do
  {
    v46 = *((_QWORD *)v81 + v45 - 1);
    LODWORD(v82) = v45 - 1;
    v47 = *(unsigned int *)(v46 + 4);
    sub_1C554CE74(**(unsigned __int16 **)(a2 + 16), *(_DWORD *)(v46 + 4), v24, v6, (uint64_t)&v77);
    if (v79)
    {
      if (v78 > 0x40)
        v48 = *v77;
      else
        v48 = (uint64_t)((_QWORD)v77 << -(uint64_t)v78) >> -(uint64_t)v78;
      v50 = v89;
      if (v89 >= (unint64_t)HIDWORD(v89))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, (uint64_t)&v90, v89 + 1, 16);
        v50 = v89;
      }
      v51 = (char *)v88 + 16 * v50;
      *v51 = v46;
      v51[1] = v48;
      v52 = &v89;
    }
    else
    {
      if ((v47 & 0x80000000) != 0)
        v49 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
      else
        v49 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v47);
      v53 = *v49;
      if (!v53)
        goto LABEL_103;
      while ((*(_BYTE *)(v53 + 3) & 1) != 0)
      {
        v53 = *(_QWORD *)(v53 + 24);
        if (!v53)
          goto LABEL_103;
      }
      while (1)
      {
        v53 = *(_QWORD *)(v53 + 24);
        if (!v53)
          break;
        if ((*(_BYTE *)(v53 + 3) & 1) == 0)
          goto LABEL_103;
      }
      if ((v47 & 0x80000000) != 0)
        v54 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
      else
        v54 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v47);
      v55 = *v54;
      if ((*(_BYTE *)(v55 + 3) & 1) == 0)
        v55 = *(_QWORD *)(v55 + 24);
      v56 = *(_QWORD *)(v55 + 8);
      if (**(_WORD **)(v56 + 16) != 51)
      {
LABEL_103:
        v30 = 0;
        goto LABEL_104;
      }
      v57 = *(_QWORD *)(v56 + 32);
      v58 = v82;
      if (v82 >= (unint64_t)HIDWORD(v82))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)&v83, v82 + 1, 8);
        v58 = v82;
      }
      *((_QWORD *)v81 + v58) = v57 + 128;
      v59 = ((_DWORD)v82 + 1);
      LODWORD(v82) = v59;
      v60 = *(_QWORD *)(v56 + 32);
      if (v59 >= HIDWORD(v82))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)&v83, v59 + 1, 8);
        LODWORD(v59) = (_DWORD)v82;
      }
      *((_QWORD *)v81 + v59) = v60 + 160;
      v52 = (uint64_t *)&v82;
    }
    ++*(_DWORD *)v52;
    if (v79 && v78 >= 0x41 && v77)
      MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
    v45 = v82;
  }
  while ((_DWORD)v82);
  v62 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  v76 = v62;
  if ((v62 & 0x80000000) != 0 && (v62 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v6 + 432))
    v63 = *(uint64_t **)(*(_QWORD *)(v6 + 424) + 8 * (v62 & 0x7FFFFFFF));
  else
    v63 = 0;
  if ((_DWORD)v89)
  {
    v64 = (uint64_t *)v88;
    v65 = (uint64_t *)((char *)v88 + 16 * v89);
    do
    {
      v66 = *(_QWORD *)(*v64 + 8);
      v67 = *a1;
      *(_QWORD *)(v67 + 40) = *(_QWORD *)(v66 + 24);
      *(_QWORD *)(v67 + 48) = v66;
      v68 = *a1;
      v77 = v63;
      v78 = 0;
      sub_1C5544694(v68, (unint64_t *)&v77, v64[1]);
      v70 = *(_DWORD *)(*(_QWORD *)(v69 + 32) + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 32))(a1[2], v66);
      v71 = *v64;
      v64 += 2;
      llvm::MachineOperand::setReg(v71, v70);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v66);
    }
    while (v64 != v65);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 32))(a1[2], v10);
  llvm::MachineOperand::setReg(*(_QWORD *)(v10 + 32), v76);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v10);
  v72 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v72 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v72 = a2;
      do
        v72 = *(_QWORD *)(v72 + 8);
      while ((*(_WORD *)(v72 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v72 + 8));
  v30 = 1;
LABEL_104:
  if (v81 != &v83)
    free(v81);
  if (v88 != &v90)
    free(v88);
  return v30;
}

BOOL sub_1C6038450(llvm::ConstantInt ******a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint8x8_t v8;
  __int32 v9;
  unsigned int v10;
  uint8x8_t v11;
  __int32 v12;
  __int32 v13;
  llvm::ConstantInt *****v15;
  llvm::ConstantInt *****v16;
  _DWORD v17[4];
  uint64_t v18;
  unsigned int v19;
  int8x8_t v20;
  unsigned int v21;
  int8x8_t v22;
  unsigned int v23;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = 64;
  if (**(_WORD **)(a2 + 16) == 213)
    v5 = 32;
  v6 = *(_DWORD *)(v4 + 4);
  sub_1C54EB4A0((uint64_t)a1[3], (const char *)*(unsigned int *)(v4 + v5 + 4), (uint64_t)&v20);
  v7 = v21;
  if (v21 > 0x40)
  {
    v9 = llvm::APInt::countPopulationSlowCase((uint64_t)&v20);
  }
  else
  {
    v8 = (uint8x8_t)vcnt_s8(v20);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.i32[0];
  }
  v10 = v23;
  if (v23 > 0x40)
  {
    v12 = llvm::APInt::countPopulationSlowCase((uint64_t)&v22);
  }
  else
  {
    v11 = (uint8x8_t)vcnt_s8(v22);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.i32[0];
  }
  v13 = v12 + v9;
  if (v13 == v7)
  {
    llvm::APInt::reverseBits((llvm::APInt *)&v22, (llvm::APInt *)&v18);
    v15 = *a1;
    v15[5] = *(llvm::ConstantInt *****)(a2 + 24);
    v15[6] = (llvm::ConstantInt ****)a2;
    v16 = *a1;
    v17[0] = v6;
    v17[2] = 1;
    sub_1C5545FB0(v16, (uint64_t)v17, (llvm::LLVMContext *)&v18);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (v19 >= 0x41 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
    v10 = v23;
  }
  if (v10 >= 0x41 && *(_QWORD *)&v22)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v22, 0x1000C8000313F17);
  if (v21 >= 0x41 && *(_QWORD *)&v20)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v20, 0x1000C8000313F17);
  return v13 == v7;
}

uint64_t sub_1C60385F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD v21[4];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) != 120)
    return 0;
  v4 = *a1;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 48) = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v6 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v5 + 432))
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * (v6 & 0x7FFFFFFF));
  else
    v7 = 0;
  result = 0;
  if ((v7 & 0xFFFFFFFFFFFFFFF9) != 0 && (v7 & 6) == 2)
  {
    v9 = sub_1C554C050(v6, v5);
    if (v10)
    {
      v11 = v9;
      v12 = *a1;
      if ((v7 & 1) != 0)
      {
        v13 = (v7 >> 3);
      }
      else if ((v7 & 4) != 0)
      {
        if ((v7 & 2) != 0)
          v13 = (unsigned __int16)(v7 >> 19);
        else
          v13 = (v7 >> 19);
      }
      else
      {
        v13 = (unsigned __int16)(v7 >> 3);
      }
      v18 = (8 * v13) | 1;
      LODWORD(v19) = 0;
      v14 = sub_1C5544694(v12, (unint64_t *)&v18, v11);
      v15 = *a1;
      v21[0] = v6;
      v21[2] = 1;
      v18 = v14;
      v19 = v16;
      v20 = 1;
      (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 81, v21, 1, &v18, 1, 0);
      v17 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v17 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v17 = a2;
          do
            v17 = *(_QWORD *)(v17 + 8);
          while ((*(_WORD *)(v17 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v17 + 8));
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C60387A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v21[6];
  _DWORD v22[4];

  if (**(_WORD **)(a2 + 16) != 76)
    return 0;
  v4 = *a1;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 48) = a2;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 0x80000000) == 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  if ((v6 & 0x7FFFFFFFu) >= *(_DWORD *)(v7 + 432))
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
  if (v8 != 513 && v8 != 257)
    return 0;
  if (*(_DWORD *)(a2 + 40) != 3)
    return 0;
  v9 = *(unsigned int *)(v5 + 68);
  v10 = sub_1C554C050(*(_DWORD *)(v5 + 68), *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40));
  if (!v11 || v10 != 0)
  {
    v13 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    if ((int)v9 >= 0)
      v13 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v9);
    v14 = *v13;
    if ((*(_BYTE *)(v14 + 3) & 1) == 0)
      v14 = *(_QWORD *)(v14 + 24);
    v15 = *(_QWORD *)(v14 + 8);
    if (**(_WORD **)(v15 + 16) != 121)
      return 0;
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48);
    if (!v17)
      return 0;
    v18 = *(_UNKNOWN **)(v17 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v17 + 40) : v17 + 24;
    if ((*(_BYTE *)(v18 + 28) & 7) != 3)
      return 0;
  }
  v19 = *a1;
  v22[0] = v6;
  v22[2] = 1;
  v21[0] = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
  v21[4] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 126, v22, 1, v21, 1, 0);
  v20 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v20 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v20 = a2;
      do
        v20 = *(_QWORD *)(v20 + 8);
      while ((*(_WORD *)(v20 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v20 + 8));
  return 1;
}

uint64_t sub_1C6038970(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int i;
  int v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _DWORD v46[4];
  void *v47;
  uint64_t v48;
  _BYTE v49[32];
  void *v50;
  uint64_t v51;
  _DWORD v52[48];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) != 82)
    return 0;
  v4 = *a1;
  v4[5] = *(_QWORD *)(a2 + 24);
  v4[6] = a2;
  v5 = *a1;
  v6 = *(_QWORD *)((*a1)[1] + 40);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_DWORD *)(v7 + 4);
  v9 = *(unsigned int *)(v7 + 36);
  if ((v8 & 0x80000000) == 0 || (v8 & 0x7FFFFFFFu) >= *(_DWORD *)(v6 + 432))
  {
    v10 = 0;
    if ((v9 & 0x80000000) != 0)
      goto LABEL_5;
LABEL_7:
    v11 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v9);
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v8 & 0x7FFFFFFF));
  if ((v9 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_5:
  v11 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
LABEL_8:
  v12 = *v11;
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 3) & 1) != 0 || (v12 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v12 + 3) & 1) != 0)
    {
      v40 = *(_QWORD *)(v12 + 8);
      if (v40)
      {
        if (**(_WORD **)(v40 + 16) == 82 && *(_DWORD *)(v40 + 40) == 2)
        {
          v41 = *(_DWORD *)(*(_QWORD *)(v40 + 32) + 36);
          v5[5] = *(_QWORD *)(a2 + 24);
          v5[6] = a2;
          v42 = *a1;
          LODWORD(v47) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          LODWORD(v48) = 1;
          LODWORD(v50) = v41;
          v52[0] = 0;
          sub_1C5546EF4(v42, (uint64_t *)&v47, (int *)&v50);
          v43 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v43 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v43 = a2;
              do
                v43 = *(_QWORD *)(v43 + 8);
              while ((*(_WORD *)(v43 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v43 + 8));
          return 1;
        }
      }
    }
  }
  if ((v9 & 0x80000000) != 0)
    v13 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  else
    v13 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v9);
  v14 = *v13;
  if ((*(_BYTE *)(v14 + 3) & 1) == 0)
    v14 = *(_QWORD *)(v14 + 24);
  if ((v9 & 0x80000000) != 0)
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  else
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v9);
  v16 = *v15;
  if (!v16)
    return 0;
  v17 = *(_QWORD *)(v14 + 8);
  v18 = **(unsigned __int16 **)(v17 + 16);
  while ((*(_BYTE *)(v16 + 3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v16 + 24);
    if (!v16)
      return 0;
  }
  v19 = *(_DWORD *)(v17 + 40) - 1;
  while (1)
  {
    v16 = *(_QWORD *)(v16 + 24);
    if (!v16)
      break;
    if ((*(_BYTE *)(v16 + 3) & 1) == 0)
      return 0;
  }
  if (v18 == 77 && (v10 & 1) != 0)
  {
LABEL_28:
    v20 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 36);
    if (v20 < 0)
    {
      v21 = v20 & 0x7FFFFFFF;
      if (v21 < *(_DWORD *)(v6 + 432))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * v21);
        if (v22 == 257 || v22 == 129)
        {
          v47 = v49;
          v23 = 0x800000000;
          v48 = 0x800000000;
          if (v19)
          {
            LODWORD(v24) = 0;
            for (i = 1; i <= v19; ++i)
            {
              v26 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 32 * i + 4);
              if (v24 >= HIDWORD(v48))
              {
                v45 = v23;
                v44 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 32 * i + 4);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v24 + 1, 4);
                v26 = v44;
                v23 = v45;
                LODWORD(v24) = v48;
              }
              *((_DWORD *)v47 + v24) = v26;
              v24 = (v48 + 1);
              LODWORD(v48) = v48 + 1;
            }
          }
          else
          {
            v24 = 0;
          }
          v29 = (uint64_t)*a1;
          if (v18 == 77)
          {
            LODWORD(v50) = v8;
            LODWORD(v51) = 1;
            sub_1C5544D6C(v29, (uint64_t)&v50, (int *)v47, v24);
LABEL_60:
            v38 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v38 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v38 = a2;
                do
                  v38 = *(_QWORD *)(v38 + 8);
                while ((*(_WORD *)(v38 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v38 + 8));
            if (v47 != v49)
              free(v47);
            return 1;
          }
          v46[0] = v8;
          v46[2] = 1;
          v30 = (int *)v47;
          v50 = v52;
          v51 = v23;
          if (v24 >= 9)
          {
            v39 = v24;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v24, 24);
            v24 = v39;
            v31 = v51;
            v32 = v50;
          }
          else
          {
            if (!v24)
            {
              v37 = 0;
              v32 = v52;
              goto LABEL_58;
            }
            v31 = 0;
            v32 = v52;
          }
          v33 = 6 * v31;
          v34 = 4 * v24;
          do
          {
            v35 = *v30++;
            v36 = &v32[v33];
            *v36 = v35;
            v36[4] = 0;
            v33 += 6;
            v34 -= 4;
          }
          while (v34);
          v37 = v51;
LABEL_58:
          LODWORD(v51) = v37 + v24;
          (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *))(*(_QWORD *)v29 + 32))(v29, 77, v46, 1, v32);
          if (v50 != v52)
            free(v50);
          goto LABEL_60;
        }
      }
    }
    return 0;
  }
  if (v18 != 76)
    return 0;
  result = 0;
  if ((v10 & 0xFFFFFFFFFFFFFFF9) != 0 && (v10 & 4) != 0)
  {
    v28 = 0x800000000000000;
    if ((v10 & 2) == 0)
      v28 = 0x8000000000000;
    if ((v28 & v10) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    if (v19 == (unsigned __int16)(v10 >> 3))
      goto LABEL_28;
    return 0;
  }
  return result;
}

uint64_t sub_1C6038E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  _DWORD v56[4];
  void *v57;
  uint64_t v58;
  _DWORD v59[4];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) != 77)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(unsigned int *)(v5 + 36);
  if ((v6 & 0x80000000) != 0)
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  else
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v6);
  v9 = *(_DWORD *)(a2 + 40);
  v10 = *(uint64_t **)a1;
  v11 = *v7;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
    v11 = *(_QWORD *)(v11 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  if (*(_DWORD *)(v12 + 40) != v9)
    goto LABEL_34;
  v13 = (v9 - 1);
  if (v9 == 1)
  {
LABEL_20:
    v10[5] = *(_QWORD *)(a2 + 24);
    v10[6] = a2;
    v20 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v13 + 4);
    if (v20 < 0 && (v21 = *(_DWORD *)(v4 + 432), (v20 & 0x7FFFFFFFu) < v21))
    {
      v22 = *(_QWORD *)(v4 + 424);
      v23 = *(_QWORD *)(v22 + 8 * (v20 & 0x7FFFFFFF));
      v24 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0
        && ((v24 & 0x80000000) == 0 || (v24 & 0x7FFFFFFFu) >= v21 || v23 != *(_QWORD *)(v22 + 8 * (v24 & 0x7FFFFFFF))))
      {
        LODWORD(v53) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        v54 = 1;
        LODWORD(v57) = v20;
        v59[0] = 0;
        sub_1C5546EF4(v10, &v53, (int *)&v57);
        goto LABEL_29;
      }
    }
    else
    {
      v24 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    }
    LODWORD(v53) = v24;
    v54 = 1;
    LODWORD(v57) = v20;
    v59[0] = 0;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v10 + 32))(v10, 19, &v53, 1, &v57, 1, 0);
LABEL_29:
    v25 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v25 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v25 = a2;
        do
          v25 = *(_QWORD *)(v25 + 8);
        while ((*(_WORD *)(v25 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v25 + 8));
    return 1;
  }
  v14 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(a2 + 32);
    v15 = *(unsigned int *)(v5 + 32 * (v14 + 1) + 4);
    if ((v15 & 0x80000000) != 0)
      v16 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    else
      v16 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v15);
    v17 = *v16;
    if ((*(_BYTE *)(v17 + 3) & 1) == 0)
      v17 = *(_QWORD *)(v17 + 24);
    v18 = *(_QWORD *)(v17 + 8);
    if (v18 != v12 || **(_WORD **)(v18 + 16) != 74)
      break;
    if (v14 != llvm::MachineInstr::findRegisterDefOperandIdx(v12, v15, 0, 0, 0))
    {
      v5 = *(_QWORD *)(a2 + 32);
      break;
    }
    v19 = v14 + 2;
    ++v14;
    if (v19 > v13)
      goto LABEL_20;
  }
  v10 = *(uint64_t **)a1;
LABEL_34:
  v26 = *(_QWORD *)(v10[1] + 40);
  v27 = *(_DWORD *)(v5 + 4);
  if (v27 < 0 && (v28 = v27 & 0x7FFFFFFF, v28 < *(_DWORD *)(v26 + 432)))
    v29 = *(_QWORD *)(*(_QWORD *)(v26 + 424) + 8 * v28);
  else
    v29 = 0;
  v57 = v59;
  v58 = 0x400000000;
  if (*(_DWORD *)(a2 + 40) < 2u)
  {
    v44 = v59;
LABEL_65:
    v45 = *(uint64_t **)a1;
    v45[5] = *(_QWORD *)(a2 + 24);
    v45[6] = a2;
    v46 = *(uint64_t **)a1;
    v56[0] = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    v56[2] = 1;
    LODWORD(v53) = *v44;
    v55 = 0;
    (*(void (**)(uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v46 + 32))(v46, 19, v56, 1, &v53, 1, 0);
    v47 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v47 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v47 = a2;
        do
          v47 = *(_QWORD *)(v47 + 8);
        while ((*(_WORD *)(v47 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v47 + 8));
    v8 = 1;
  }
  else
  {
    v30 = 1;
    v31 = 36;
    while (1)
    {
      v32 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + v31);
      v33 = (uint64_t *)((v32 & 0x80000000) != 0
                      ? *(_QWORD *)(v26 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v26 + 272) + 8 * v32);
      v34 = *v33;
      if (!v34)
        break;
      v51 = v30;
      v52 = v26;
      if ((*(_BYTE *)(v34 + 3) & 1) == 0)
      {
        v34 = *(_QWORD *)(v34 + 24);
        if (!v34 || (*(_BYTE *)(v34 + 3) & 1) == 0)
          break;
      }
      v35 = *(_QWORD *)(v34 + 8);
      if (!v35)
        break;
      if (**(_WORD **)(v35 + 16) != 205)
        break;
      if (*(_DWORD *)(v35 + 40) != 3)
        break;
      v36 = *(_QWORD *)(v35 + 32);
      v37 = *(_DWORD *)(v36 + 36);
      v38 = sub_1C554C050(*(_DWORD *)(v36 + 68), v26);
      if (!v39)
        break;
      v40 = v37 < 0 && (v37 & 0x7FFFFFFFu) < *(_DWORD *)(v52 + 432)
          ? *(_QWORD *)(*(_QWORD *)(v52 + 424) + 8 * (v37 & 0x7FFFFFFF))
          : 0;
      if (v51 - 1 != v38 || v29 != v40)
        break;
      v42 = v58;
      if (v58 >= (unint64_t)HIDWORD(v58))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 4);
        v42 = v58;
      }
      *((_DWORD *)v57 + v42) = v37;
      v43 = (v58 + 1);
      LODWORD(v58) = v58 + 1;
      v30 = v51 + 1;
      v31 += 32;
      v26 = v52;
      if (v51 + 1 >= (unint64_t)*(unsigned int *)(a2 + 40))
      {
        v44 = v57;
        if (!(_DWORD)v43)
          goto LABEL_65;
        v48 = 0;
        v49 = 4 * v43;
        while (*(_DWORD *)v57 == *(_DWORD *)((char *)v57 + v48))
        {
          v48 += 4;
          if (v49 == v48)
            goto LABEL_65;
        }
        break;
      }
    }
    v8 = 0;
  }
  if (v57 != v59)
    free(v57);
  return v8;
}

uint64_t sub_1C603931C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = **(unsigned __int16 **)(a2 + 16);
  if ((v2 - 118) > 8 || ((1 << (v2 - 118)) & 0x141) == 0)
    return 0;
  v6 = *a1;
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 48) = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(v8 + 4);
  v10 = *(_DWORD *)(v8 + 36);
  if (v9 < 0 && (v9 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432))
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (v9 & 0x7FFFFFFF));
  else
    v11 = 0;
  v29 = v11;
  if ((v10 & 0x80000000) == 0)
    return 0;
  v12 = v10 & 0x7FFFFFFF;
  if ((v10 & 0x7FFFFFFFu) >= *(_DWORD *)(v7 + 432) || *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * v12) != 9)
    return 0;
  v13 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * v12 + 8);
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    v13 = *(_QWORD *)(v13 + 24);
  if ((**(_WORD **)(*(_QWORD *)(v13 + 8) + 16) & 0xFFFE) != 0x86)
    return 0;
  v15 = sub_1C4825F50(&v29);
  if ((_DWORD)v14 == 1)
  if (v15 <= 0x10)
    v16 = v29;
  else
    v16 = 129;
  v17 = *a1;
  v31 = v16;
  LODWORD(v32) = 0;
  v18 = sub_1C5544694(v17, (unint64_t *)&v31, 0);
  v20 = v19;
  v21 = *a1;
  if ((_DWORD)v2 == 124)
    v22 = -1;
  else
    v22 = 1;
  v31 = v16;
  LODWORD(v32) = 0;
  v23 = sub_1C5544694(v21, (unint64_t *)&v31, v22);
  v25 = *a1;
  if (v16 == v29)
  {
    LODWORD(v40) = v9;
    v41 = 1;
    LODWORD(v31) = v10;
    v33 = 0;
    v34 = v23;
    v35 = v24;
    v36 = 1;
    v37 = v18;
    v38 = v20;
    v39 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 136, &v40, 1, &v31, 3, 0);
  }
  else
  {
    v30[0] = v9;
    v30[2] = 1;
    v40 = v16;
    v41 = 0;
    LODWORD(v31) = v10;
    v33 = 0;
    v34 = v23;
    v35 = v24;
    v36 = 1;
    v37 = v18;
    v38 = v20;
    v39 = 1;
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 136, &v40, 1, &v31, 3, 0);
    v32 = v27;
    v33 = 1;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, v2, v30, 1, &v31, 1, 0);
  }
  v28 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v28 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v28 = a2;
      do
        v28 = *(_QWORD *)(v28 + 8);
      while ((*(_WORD *)(v28 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v28 + 8));
  return 1;
}

uint64_t sub_1C60395F8(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t i;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unsigned __int8 v66;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if (v4 < 0 && (v5 = a1[1], v6 = v4 & 0x7FFFFFFF, v6 < *(_DWORD *)(v5 + 432)))
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v6);
  else
    v7 = 0;
  v77 = v7;
  v9 = sub_1C4825F50(&v77);
  if ((_DWORD)v8 == 1)
  if (v9 > 0x40)
    return 0;
  v10 = *a1;
  v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v12 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  *(_QWORD *)(v10 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 48) = a2;
  v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  if (v9 == 64)
    v13 = -1;
  if ((v12 & 0x80000000) != 0)
    v14 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  else
    v14 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v12);
  v15 = *v14;
  if (v15)
  {
    v19 = v13;
    v20 = v12;
    v76 = v11;
    if ((*(_BYTE *)(v15 + 3) & 1) != 0 || (v15 = *(_QWORD *)(v15 + 24)) != 0 && (*(_BYTE *)(v15 + 3) & 1) != 0)
    {
      v28 = *(_QWORD *)(v15 + 8);
      if (v28)
      {
        if (**(_WORD **)(v28 + 16) == 127 && *(_DWORD *)(v28 + 40) == 3)
        {
          v29 = *(_QWORD *)(v28 + 32);
          v23 = *(unsigned int *)(v29 + 36);
          v30 = sub_1C554C050(*(_DWORD *)(v29 + 68), v76);
          v13 = v19;
          v12 = v20;
          v11 = v76;
          if (v31)
          {
            v32 = v30;
            if ((v23 & 0x80000000) != 0)
              v33 = (uint64_t *)(*(_QWORD *)(v76 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
            else
              v33 = (uint64_t *)(*(_QWORD *)(v76 + 272) + 8 * v23);
            for (i = *v33; ; i = *(_QWORD *)(i + 24))
            {
              v11 = v76;
              v12 = v20;
              v13 = v19;
              if (!i)
                break;
              if ((*(_BYTE *)(i + 3) & 1) == 0)
              {
                v11 = v76;
                while (1)
                {
                  i = *(_QWORD *)(i + 24);
                  if (!i)
                    break;
                  v12 = v20;
                  v13 = v19;
                  if ((*(_BYTE *)(i + 3) & 1) == 0)
                    goto LABEL_14;
                }
                if ((v23 & 0x80000000) != 0)
                  v35 = (uint64_t *)(*(_QWORD *)(v76 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
                else
                  v35 = (uint64_t *)(*(_QWORD *)(v76 + 272) + 8 * v23);
                v38 = *v35;
                if (v38)
                {
                  if ((*(_BYTE *)(v38 + 3) & 1) != 0
                    || (v38 = *(_QWORD *)(v38 + 24)) != 0 && (*(_BYTE *)(v38 + 3) & 1) != 0)
                  {
                    v39 = *(_QWORD *)(v38 + 8);
                    if (v39)
                    {
                      if (**(_WORD **)(v39 + 16) == 128 && *(_DWORD *)(v39 + 40) == 3)
                      {
                        v40 = *(_QWORD *)(v39 + 32);
                        v41 = *(unsigned int *)(v40 + 36);
                        v42 = sub_1C554C050(*(_DWORD *)(v40 + 68), v76);
                        if (v43)
                        {
                          v44 = v42;
                          v45 = (uint64_t *)((v41 & 0x80000000) != 0
                                          ? *(_QWORD *)(v76 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8
                                          : *(_QWORD *)(v76 + 272) + 8 * v41);
                          v53 = *v45;
                          if (v53)
                          {
                            while ((*(_BYTE *)(v53 + 3) & 1) != 0)
                            {
                              v53 = *(_QWORD *)(v53 + 24);
                              if (!v53)
                                return 0;
                            }
                            result = 0;
                            while (1)
                            {
                              v53 = *(_QWORD *)(v53 + 24);
                              if (!v53)
                                break;
                              if ((*(_BYTE *)(v53 + 3) & 1) == 0)
                                return result;
                            }
                            if (v44 == v32)
                            {
                              v55 = v19 << v32;
                              goto LABEL_104;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                return 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_14:
  v16 = (uint64_t *)((v12 & 0x80000000) != 0
                  ? *(_QWORD *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v11 + 272) + 8 * v12);
  v17 = *v16;
  if (!v17)
    return 0;
  v19 = v13;
  LODWORD(v20) = v12;
  v76 = v11;
  if ((*(_BYTE *)(v17 + 3) & 1) == 0)
  {
    v17 = *(_QWORD *)(v17 + 24);
    if (!v17 || (*(_BYTE *)(v17 + 3) & 1) == 0)
      return 0;
  }
  v21 = *(_QWORD *)(v17 + 8);
  if (!v21)
    return 0;
  if (**(_WORD **)(v21 + 16) != 128)
    return 0;
  if (*(_DWORD *)(v21 + 40) != 3)
    return 0;
  v22 = *(_QWORD *)(v21 + 32);
  v23 = *(unsigned int *)(v22 + 36);
  v24 = sub_1C554C050(*(_DWORD *)(v22 + 68), v76);
  if (!v25)
    return 0;
  v26 = v24;
  v27 = (uint64_t *)((v23 & 0x80000000) != 0
                  ? *(_QWORD *)(v76 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v76 + 272) + 8 * v23);
  v36 = *v27;
  if (!v36)
    return 0;
  while ((*(_BYTE *)(v36 + 3) & 1) != 0)
  {
    v36 = *(_QWORD *)(v36 + 24);
    if (!v36)
      return 0;
  }
  result = 0;
  while (1)
  {
    v36 = *(_QWORD *)(v36 + 24);
    if (!v36)
      break;
    if ((*(_BYTE *)(v36 + 3) & 1) == 0)
      return result;
  }
  v37 = (uint64_t *)((v23 & 0x80000000) != 0
                  ? *(_QWORD *)(v76 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v76 + 272) + 8 * v23);
  v46 = *v37;
  if (!v46)
    return 0;
  if ((*(_BYTE *)(v46 + 3) & 1) == 0)
  {
    v46 = *(_QWORD *)(v46 + 24);
    if (!v46 || (*(_BYTE *)(v46 + 3) & 1) == 0)
      return 0;
  }
  v47 = *(_QWORD *)(v46 + 8);
  if (!v47)
    return 0;
  if (**(_WORD **)(v47 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v47 + 40) != 3)
    return 0;
  v48 = *(_QWORD *)(v47 + 32);
  v41 = *(unsigned int *)(v48 + 36);
  v49 = sub_1C554C050(*(_DWORD *)(v48 + 68), v76);
  if (!v50)
    return 0;
  v51 = v49;
  v52 = (uint64_t *)((v41 & 0x80000000) != 0
                  ? *(_QWORD *)(v76 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v76 + 272) + 8 * v41);
  v54 = *v52;
  if (!v54)
    return 0;
  while ((*(_BYTE *)(v54 + 3) & 1) != 0)
  {
    v54 = *(_QWORD *)(v54 + 24);
    if (!v54)
      return 0;
  }
  result = 0;
  while (1)
  {
    v54 = *(_QWORD *)(v54 + 24);
    if (!v54)
      break;
    if ((*(_BYTE *)(v54 + 3) & 1) == 0)
      return result;
  }
  if (v51 != v26)
    return 0;
  v55 = v19 >> v26;
LABEL_104:
  v56 = *(_QWORD *)(*a1 + 8);
  if ((**(_QWORD **)(v56 + 360) & 0x20) == 0)
    goto LABEL_118;
  v86 = v77;
  v87 = v77;
  v88 = v77;
  v80 = 65;
  v81 = &v86;
  v82 = 3;
  v83 = 0;
  v84 = 0;
  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v56 + 16) + 168))(*(_QWORD *)(v56 + 16));
  v58 = v57;
  v59 = *(_DWORD *)(v57 + 3368);
  if (v59)
    v60 = v59 - 45;
  else
    v60 = 20;
  v61 = sub_1C553C530(v57 + 168 * v60 + 8, (uint64_t)&v80);
  if (v61 == 11)
  {
    if (!v82)
      goto LABEL_118;
    v62 = 0;
    v63 = v58 + 35456;
    v64 = 1;
    while (1)
    {
      v65 = v81[v62];
      LODWORD(v78) = v80;
      HIDWORD(v78) = v64 - 1;
      v79 = v65;
      v66 = sub_1C553DEB0(v63, (uint64_t)&v78);
      if (v66)
        break;
      v62 = v64;
      if (v82 <= v64++)
        goto LABEL_118;
    }
    if (v66 - 1 >= 0xA)
      goto LABEL_118;
    return 0;
  }
  if (v61)
    return 0;
LABEL_118:
  v68 = v55 & v19;
  if ((v23 & 0x80000000) != 0)
    v69 = (uint64_t *)(*(_QWORD *)(v76 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  else
    v69 = (uint64_t *)(*(_QWORD *)(v76 + 272) + 8 * v23);
  v70 = *v69;
  if (v70 && ((*(_BYTE *)(v70 + 3) & 1) != 0 || (v70 = *(_QWORD *)(v70 + 24)) != 0 && (*(_BYTE *)(v70 + 3) & 1) != 0))
    v71 = *(_QWORD *)(v70 + 8);
  else
    v71 = 0;
  v72 = *a1;
  LODWORD(v86) = v20;
  LODWORD(v87) = 1;
  v80 = v41;
  LODWORD(v82) = 0;
  v78 = v77;
  LODWORD(v79) = 0;
  v83 = sub_1C5544694(v72, &v78, v68);
  v84 = v73;
  v85 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 65, &v86, 1, &v80, 2, 0);
  v74 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v74 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v74 = a2;
      do
        v74 = *(_QWORD *)(v74 + 8);
      while ((*(_WORD *)(v74 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v74 + 8));
  v75 = v71;
  if ((*(_BYTE *)v71 & 4) == 0)
  {
    v75 = v71;
    if ((*(_WORD *)(v71 + 44) & 8) != 0)
    {
      v75 = v71;
      do
        v75 = *(_QWORD *)(v75 + 8);
      while ((*(_WORD *)(v75 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v71 + 24) + 40, v71, *(_QWORD *)(v75 + 8));
  return 1;
}

uint64_t sub_1C6039D28(uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  uint64_t result;
  uint8x8_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  _QWORD v40[2];
  _DWORD v41[4];
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;

  v7 = a3;
  v48 = *MEMORY[0x1E0C80C00];
  if (a3 < 0 && (a3 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a5 + 432))
    v9 = *(_QWORD *)(*(_QWORD *)(a5 + 424) + 8 * (a3 & 0x7FFFFFFF));
  else
    v9 = 0;
  v10 = 0;
  v39 = v9;
  while (1)
  {
    v11 = byte_1C8677989[v10];
    v12 = (int8x8_t)(a4 / v11);
    if (!(a4 % v11))
      break;
    if (++v10 == 4)
      return 0;
  }
  result = 0;
  v40[0] = byte_1C8677989[v10];
  v40[1] = a4 / v11;
  if (v11 > 0x11 || (unint64_t)(*(_QWORD *)&v12 - 18) < 0xFFFFFFFFFFFFFFEFLL)
    return result;
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] != 1)
  {
    v33 = 0;
    while (*(_QWORD *)&v12 != byte_1C8677989[v33])
    {
      if (++v33 == 4)
        return 0;
    }
  }
  v15 = 0;
  v16 = 0;
  a6[5] = *(_QWORD *)(a2 + 24);
  a6[6] = a2;
  v17 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
  do
  {
    v18 = v15;
    v19 = v40[v16];
    if (!v19)
      goto LABEL_21;
    if (v19 == 1)
      goto LABEL_27;
    if ((v19 & (v19 - 1)) != 0)
    {
LABEL_21:
      v25 = v19 - 1;
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] != 1)
        llvm::llvm_unreachable_internal((llvm *)"Invalid multiply factor", 0, 0);
      v27 = sub_1C4825F50(&v39);
      if ((_DWORD)v28 == 1)
      {
        v35 = v27;
        v27 = v35;
      }
      v29 = 63 - __clz(v25);
      if (v27 <= v29)
        return 0;
      v46 = v39;
      v47 = 0;
      v41[0] = v7;
      v42 = 0;
      v37 = v39;
      v38 = 0;
      v43 = sub_1C5544694((uint64_t)a6, &v37, v29);
      v44 = v30;
      v45 = 1;
      v31 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a6 + 32))(a6, 127, &v46, 1, v41, 2, 0);
      v46 = v39;
      v47 = 0;
      v41[0] = v7;
      v42 = 0;
      v43 = v31;
      v44 = v32;
      v45 = 1;
      (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*a6 + 32))(a6, 45, &v46, 1, v41, 2, v17);
    }
    else
    {
      v20 = sub_1C4825F50(&v39);
      if ((_DWORD)v21 == 1)
      {
        v36 = v20;
        v20 = v36;
      }
      v22 = 63 - __clz(v19);
      if (v20 <= v22)
        return 0;
      v46 = v39;
      v47 = 0;
      v41[0] = v7;
      v42 = 0;
      v37 = v39;
      v38 = 0;
      v43 = sub_1C5544694((uint64_t)a6, &v37, v22);
      v44 = v23;
      v45 = 1;
      (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*a6 + 32))(a6, 127, &v46, 1, v41, 2, v17);
    }
    v7 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
LABEL_27:
    v15 = 1;
    v16 = 1;
  }
  while ((v18 & 1) == 0);
  LODWORD(v46) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  v47 = 1;
  v41[0] = v7;
  v42 = 0;
  (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a6 + 32))(a6, 19, &v46, 1, v41, 1, 0);
  v34 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v34 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v34 = a2;
      do
        v34 = *(_QWORD *)(v34 + 8);
      while ((*(_WORD *)(v34 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v34 + 8));
  return 1;
}

uint64_t sub_1C603A0B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v7;
  uint64_t v8;
  char v9;

  if (**(_WORD **)(a2 + 16) != 47)
    return 0;
  v7 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
  if (v7 < 0
    && (v7 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432)
    && *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v7 & 0x7FFFFFFF)) == 513)
  {
    return 0;
  }
  v8 = sub_1C554C050(v7, a3);
  if (!v9)
    return 0;
  else
    return sub_1C6039D28(v8, a2, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v8, a3, a4);
}

BOOL sub_1C603A154(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  const char *v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t *v65;
  char v66;
  const char *v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL4 v96;
  unint64_t v97;
  int64_t v98;
  unsigned int v99;
  unint64_t *v100;
  unsigned int v101;
  unint64_t *v102;
  unint64_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t *v109;
  int v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 48) = a2;
  v9 = *(_QWORD *)(v7 + 344);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 336))(v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 16);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 336))(v9);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 56))(v12, v11);
  if (v13)
  {
    v14 = (v13 - 1) | (((unint64_t)v13 - 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    v16 = (v15 | (v15 >> 8) | ((v15 | (v15 >> 8)) >> 16)) + 1;
  }
  else
  {
    v16 = 0;
  }
  v17 = a3;
  v18 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * a3 + 4);
  if ((v18 & 0x80000000) != 0)
  {
    v20 = v18 & 0x7FFFFFFF;
    if (v20 >= *(_DWORD *)(v8 + 432))
      v21 = 0;
    else
      v21 = *(unint64_t **)(*(_QWORD *)(v8 + 424) + 8 * v20);
    v102 = v21;
    v19 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * v20 + 8);
  }
  else
  {
    v102 = 0;
    v19 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v18);
  }
  v22 = *v19;
  if (!v22)
    return 0;
  if ((*(_BYTE *)(v22 + 3) & 1) == 0)
  {
    v22 = *(_QWORD *)(v22 + 24);
    if (!v22 || (*(_BYTE *)(v22 + 3) & 1) == 0)
      return 0;
  }
  v24 = *(_QWORD *)(v22 + 8);
  if (!v24)
    return 0;
  if (**(_WORD **)(v24 + 16) != 128)
    return 0;
  if (*(_DWORD *)(v24 + 40) != 3)
    return 0;
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(unsigned int *)(v25 + 36);
  v27 = sub_1C554C050(*(_DWORD *)(v25 + 68), v8);
  if (!v28)
    return 0;
  v29 = v27;
  v30 = 63 - __clz(v16);
  v32 = sub_1C4825F50((unint64_t *)&v102);
  if ((_DWORD)v31 == 1)
  if (v32 < v29 + (unint64_t)v30)
    return 0;
  if ((v26 & 0x80000000) != 0)
    v33 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
  else
    v33 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v26);
  v34 = *v33;
  if (v34)
  {
    if ((*(_BYTE *)(v34 + 3) & 1) != 0 || (v34 = *(_QWORD *)(v34 + 24)) != 0 && (*(_BYTE *)(v34 + 3) & 1) != 0)
    {
      v49 = *(_QWORD *)(v34 + 8);
      if (v49)
      {
        if (**(_WORD **)(v49 + 16) == 45 && *(_DWORD *)(v49 + 40) == 3)
        {
          v51 = *(_QWORD *)(v49 + 32);
          v50 = v49 + 32;
          v99 = *(_DWORD *)(v51 + 36);
          v52 = sub_1C554C050(*(_DWORD *)(v51 + 68), v8);
          if (v53)
          {
LABEL_67:
            v37 = v52;
            goto LABEL_84;
          }
          v54 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)v50 + 36), v8);
          if (v55)
            goto LABEL_83;
        }
      }
    }
  }
  if ((v26 & 0x80000000) != 0)
    v35 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
  else
    v35 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v26);
  v36 = *v35;
  if (!v36)
    goto LABEL_30;
  if ((*(_BYTE *)(v36 + 3) & 1) == 0)
  {
    v36 = *(_QWORD *)(v36 + 24);
    if (!v36 || (*(_BYTE *)(v36 + 3) & 1) == 0)
      goto LABEL_30;
  }
  v56 = *(_QWORD *)(v36 + 8);
  if (!v56 || **(_WORD **)(v56 + 16) != 66 || *(_DWORD *)(v56 + 40) != 3)
    goto LABEL_30;
  v57 = *(_QWORD *)(v56 + 32);
  v50 = v56 + 32;
  v99 = *(_DWORD *)(v57 + 36);
  v52 = sub_1C554C050(*(_DWORD *)(v57 + 68), v8);
  if (v58)
    goto LABEL_67;
  v54 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)v50 + 36), v8);
  if (!v66)
  {
LABEL_30:
    v37 = 0;
    v38 = 0;
    goto LABEL_31;
  }
LABEL_83:
  v37 = v54;
  v99 = *(_DWORD *)(*(_QWORD *)v50 + 68);
LABEL_84:
  v68 = sub_1C4825F50((unint64_t *)&v102);
  if ((_DWORD)v67 == 1)
  LODWORD(v104) = v68;
  if (v68 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v103, v37, 0);
    v68 = v104;
    if (v104 > 0x40)
    {
      v74 = llvm::APInt::countTrailingZerosSlowCase(&v103);
      goto LABEL_105;
    }
    v70 = v103;
  }
  else
  {
    v69 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v68;
    if (!v68)
      v69 = 0;
    v70 = (unint64_t *)(v69 & v37);
    v103 = v70;
  }
  v73 = __clz(__rbit64((unint64_t)v70));
  if (v68 >= v73)
    v74 = v73;
  else
    v74 = v68;
LABEL_105:
  v76 = v74;
  if (v29 <= v74
    && ((v26 & 0x80000000) != 0
      ? (v77 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8))
      : (v77 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v26)),
        (v80 = *v77) != 0
     && ((*(_BYTE *)(v80 + 3) & 1) != 0 || (v80 = *(_QWORD *)(v80 + 24)) != 0 && (*(_BYTE *)(v80 + 3) & 1) != 0)))
  {
    v38 = *(_QWORD *)(v80 + 8);
  }
  else
  {
    v38 = 0;
  }
  if (v68 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
  if (v29 > v76)
    return 0;
  v26 = v99;
LABEL_31:
  v39 = v26 >> 31;
  if (v26 >> 31)
    v40 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
  else
    v40 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v26);
  v41 = *v40;
  if (!v41
    || (*(_BYTE *)(v41 + 3) & 1) == 0 && ((v41 = *(_QWORD *)(v41 + 24)) == 0 || (*(_BYTE *)(v41 + 3) & 1) == 0)
    || (v59 = *(_QWORD *)(v41 + 8)) == 0
    || **(_WORD **)(v59 + 16) != 47
    || *(_DWORD *)(v59 + 40) != 3
    || (v98 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v59 + 32) + 68), v8), !v60)
    && (v98 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v59 + 32) + 36), v8), !v61))
  {
    if (v39)
      v42 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
    else
      v42 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v26);
    v43 = *v42;
    if (v43)
    {
      if ((*(_BYTE *)(v43 + 3) & 1) != 0 || (v43 = *(_QWORD *)(v43 + 24)) != 0 && (*(_BYTE *)(v43 + 3) & 1) != 0)
      {
        v44 = *(_QWORD *)(v43 + 8);
        if (v44)
        {
          if (**(_WORD **)(v44 + 16) == 127 && *(_DWORD *)(v44 + 40) == 3)
          {
            v45 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v44 + 32) + 68), v8);
            if (v46)
            {
              v47 = v45;
              if ((v45 & 0x8000000000000000) == 0)
              {
                v97 = sub_1C4825F50((unint64_t *)&v102);
                if ((_DWORD)v48 == 1)
                if (v47 < v97)
                {
                  v98 = 1 << v47;
                  goto LABEL_76;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
LABEL_76:
  v63 = sub_1C4825F50((unint64_t *)&v102);
  if ((_DWORD)v62 == 1)
  v101 = v63;
  if (v63 <= 0x40)
  {
    v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v63;
    if (!v63)
      v64 = 0;
    v65 = (unint64_t *)(v64 & v98);
    v100 = v65;
    goto LABEL_92;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v100, v98, 0);
  v63 = v101;
  if (v101 <= 0x40)
  {
    v65 = v100;
LABEL_92:
    v71 = __clz(__rbit64((unint64_t)v65));
    if (v63 >= v71)
      v72 = v71;
    else
      v72 = v63;
    goto LABEL_101;
  }
  v72 = llvm::APInt::countTrailingZerosSlowCase(&v100);
LABEL_101:
  v96 = v29 <= v72;
  if (v29 <= v72)
  {
    if (v39)
      v75 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
    else
      v75 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v26);
    v78 = *v75;
    if (v78 && ((*(_BYTE *)(v78 + 3) & 1) != 0 || (v78 = *(_QWORD *)(v78 + 24)) != 0 && (*(_BYTE *)(v78 + 3) & 1) != 0))
      v79 = *(_QWORD *)(v78 + 8);
    else
      v79 = 0;
    v81 = *a1;
    v103 = v102;
    LODWORD(v104) = 0;
    v82 = sub_1C5544694(v81, (unint64_t *)&v103, v98 >> v29);
    v83 = *a1;
    v84 = *(_DWORD *)(*(_QWORD *)(v79 + 32) + 36);
    v109 = v102;
    v110 = 0;
    LODWORD(v103) = v84;
    v105 = 0;
    v106 = v82;
    v107 = v85;
    v108 = 1;
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 47, &v109, 1, &v103, 2, 0);
    v88 = v87;
    if (v37 >> v29)
    {
      v89 = (unint64_t *)v86;
      v90 = *a1;
      v103 = v102;
      LODWORD(v104) = 0;
      v91 = sub_1C5544694(v90, (unint64_t *)&v103, v37 >> v29);
      v92 = *a1;
      v93 = **(unsigned __int16 **)(v38 + 16);
      v109 = v102;
      v110 = 0;
      v103 = v89;
      v104 = v88;
      v105 = 1;
      v106 = v91;
      v107 = v94;
      v108 = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, v93, &v109, 1, &v103, 2, 0);
      v88 = v95;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], a2);
    llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32 * v17, *(_DWORD *)(*(_QWORD *)(v88 + 32) + 4));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], a2);
  }
  if (v63 >= 0x41)
  {
    if (v100)
      MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
  }
  return v96;
}

uint64_t sub_1C603A960(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

uint64_t sub_1C603A970(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  _QWORD v22[2];
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a2 + 4);
  if ((v5 & 0x80000000) != 0)
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v5);
  v7 = *v6;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v7 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (v7)
      {
        if (**(_WORD **)(v7 + 16) == 165)
        {
          *a3 = *(_QWORD *)(v7 + 32) + 32;
          v11 = *(_QWORD *)(v7 + 32);
          *a4 = v11 + 64;
          if (!*(_BYTE *)(v11 + 64))
          {
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(unsigned int *)(v11 + 68);
            v14 = (uint64_t *)((v13 & 0x80000000) != 0
                            ? *(_QWORD *)(v12 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8
                            : *(_QWORD *)(v12 + 272) + 8 * v13);
            v15 = *v14;
            if (v15)
            {
              if ((*(_BYTE *)(v15 + 3) & 1) != 0
                || (v15 = *(_QWORD *)(v15 + 24)) != 0 && (*(_BYTE *)(v15 + 3) & 1) != 0)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v16)
                {
                  if (**(_WORD **)(v16 + 16) == 168)
                  {
                    v17 = *(_QWORD *)(v16 + 32);
                    if (!*(_BYTE *)(v17 + 32))
                    {
                      v18 = *(unsigned int *)(v17 + 36);
                      if ((v18 & 0x80000000) != 0)
                        v19 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
                      else
                        v19 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v18);
                      v7 = *v19;
                      if (!v7)
                        goto LABEL_18;
                      if ((*(_BYTE *)(v7 + 3) & 1) != 0)
                        goto LABEL_32;
                      v7 = *(_QWORD *)(v7 + 24);
                      if (!v7)
                        goto LABEL_18;
                      if ((*(_BYTE *)(v7 + 3) & 1) != 0)
                      {
LABEL_32:
                        v7 = *(_QWORD *)(v7 + 8);
                        if (!v7)
                          goto LABEL_18;
                        if (**(_WORD **)(v7 + 16) == 121)
                        {
                          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48);
                          LODWORD(v26) = 64;
                          v25 = 0x3FF0000000000000;
                          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v22, (const llvm::APInt **)&v25);
                          v26 = v22[0];
                          v27 = v22[1];
                          v28 = v23;
                          v29 = v24 & 0xF;
                          llvm::APFloat::convert((uint64_t)&v25, *(void **)(v20 + 32), 1, v22);
                          v21 = sub_1C47ECB98(v20 + 24, (uint64_t)&v25);
                          if ((_UNKNOWN *)v26 == &unk_1C866F1C0)
                          {
                            sub_1C4773C74(&v27);
                          }
                          else if ((*(_DWORD *)(v26 + 8) - 64) <= 0xFFFFFF7F && v27)
                          {
                            MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
                          }
                          if (v21)
                          {
                            *a4 = *(_QWORD *)(v16 + 32) + 64;
                            v8 = 1;
                            LODWORD(v7) = 1;
                            return v8 & v7;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        LODWORD(v7) = 0;
LABEL_18:
        v8 = 1;
        return v8 & v7;
      }
    }
  }
  v8 = 0;
  return v8 & v7;
}

__n128 sub_1C603AC04@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __n128 result;
  __int128 v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *a3 = *(_OWORD *)a2;
  a3[1] = v6;
  return result;
}

__n128 sub_1C603AC3C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __n128 result;
  __int128 v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *a3 = *(_OWORD *)a2;
  a3[1] = v6;
  return result;
}

uint64_t sub_1C603AC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  char v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int RegSizeInBits;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t result;
  __int128 v75;
  __int128 v76;
  _BYTE *v77;
  char v78;
  unint64_t v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _OWORD v87[2];
  unsigned int v88;
  unint64_t v89;
  int v90;
  _OWORD v91[2];
  unsigned int v92;
  int v93;
  int v94[3];

  v94[0] = 0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a4);
  v93 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a5) + 4);
  v13 = *(_QWORD *)(a1 + 48);
  sub_1C603B330(v13, &v93);
  v14 = v93;
  v15 = sub_1C554C050(v93, v13);
  if (v16)
    v17 = v15 < 0;
  else
    v17 = 0;
  v18 = v17;
  v92 = *(_DWORD *)(v11 + 4);
  v19 = *(_QWORD *)(a1 + 48);
  sub_1C603B330(v19, &v92);
  v20 = v92;
  v21 = sub_1C554C050(v92, v19);
  v23 = *(_QWORD *)(a1 + 48);
  if ((v20 & 0x80000000) != 0)
    v24 = (uint64_t *)(*(_QWORD *)(v23 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  else
    v24 = (uint64_t *)(*(_QWORD *)(v23 + 272) + 8 * v20);
  v25 = *v24;
  if (v25 && ((*(_BYTE *)(v25 + 3) & 1) != 0 || (v25 = *(_QWORD *)(v25 + 24)) != 0 && (*(_BYTE *)(v25 + 3) & 1) != 0))
    v26 = *(_QWORD *)(v25 + 8);
  else
    v26 = 0;
  if ((v18 & 1) == 0)
  {
    if (v22)
      v33 = v21;
    else
      v33 = 0;
    v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), v33);
    v80 = (v34 >> 24) & 0xFFF00 | 7;
    v79 = v34;
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 16);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 184))(v35);
    v37 = sub_1C554C050(v14, *(_QWORD *)(a1 + 48));
    if (v38)
    {
      v39 = v37;
      if (!v37 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
      {
        v28 = 4;
        v94[0] = 4;
        v29 = 1;
        v30 = 1;
        goto LABEL_40;
      }
      v40 = *(_QWORD *)(a1 + 64);
      v41 = 257;
      if (v39 < 0x10000)
        v41 = 129;
      *(_QWORD *)&v84 = v41;
      DWORD2(v84) = 0;
      sub_1C5544694(v40, (unint64_t *)&v84, v39);
      goto LABEL_33;
    }
    if ((v14 - 1) <= 0x3FFFFFFE)
    {
      v47 = *(_QWORD *)(a1 + 56);
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v47 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v36, v14, v47)
                                                       + 24)
                                 + *(_DWORD *)(v47 + 272)
                                 * ((*(_QWORD *)(v47 + 248) - *(_QWORD *)(v47 + 240)) >> 3)));
    }
    else
    {
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 56), v14, *(_QWORD *)(a1 + 48));
      if (v14 < 0)
      {
        v49 = *(_QWORD *)(a1 + 48);
        if ((v14 & 0x7FFFFFFFu) < *(_DWORD *)(v49 + 432)
          && (*(_QWORD *)(*(_QWORD *)(v49 + 424) + 8 * (v14 & 0x7FFFFFFF)) & 1) != 0)
        {
          goto LABEL_31;
        }
      }
    }
    v50 = *(uint64_t **)(a1 + 64);
    *(_QWORD *)&v81 = (8 * RegSizeInBits) | 1;
    DWORD2(v81) = 0;
    LODWORD(v84) = v14;
    LODWORD(v85) = 0;
    v51 = sub_1C5546EF4(v50, (uint64_t *)&v81, (int *)&v84);
    v52 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v81 = (8 * RegSizeInBits) | 1;
    DWORD2(v81) = 0;
    *(_QWORD *)&v84 = v51;
    *((_QWORD *)&v84 + 1) = v53;
    LODWORD(v85) = 1;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 19, &v81, 1, &v84, 1, 0);
    v14 = *(_DWORD *)(*(_QWORD *)(v54 + 32) + 4);
LABEL_31:
    if (RegSizeInBits < 0x21)
    {
LABEL_34:
      if ((v14 - 1) <= 0x3FFFFFFE)
      {
        v56 = *(_QWORD *)(a1 + 56);
        v57 = *(_DWORD *)(*(_QWORD *)(v56 + 264)
                        + 24
                        * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v36, v14, v56) + 24)
                         + *(_DWORD *)(v56 + 272)
                         * ((*(_QWORD *)(v56 + 248) - *(_QWORD *)(v56 + 240)) >> 3)));
      }
      else
      {
        v57 = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 56), v14, *(_QWORD *)(a1 + 48));
      }
      v30 = 0;
      if (v57 == 16)
        v28 = 6;
      else
        v28 = 8;
      v94[0] = v28;
      v29 = 1;
      goto LABEL_40;
    }
    v55 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v81 = 257;
    DWORD2(v81) = 0;
    LODWORD(v84) = v14;
    LODWORD(v85) = 0;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 119, &v81, 1, &v84, 1, 0);
LABEL_33:
    v14 = *(_DWORD *)(*(_QWORD *)(v42 + 32) + 4);
    goto LABEL_34;
  }
  if (v22)
  {
    v27 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v21);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v80 = (v31 >> 24) & 0xFFF00 | 7;
    v79 = v31;
    v32 = v27;
  }
  else
  {
    v28 = 2;
    v94[0] = 2;
    v43 = (_OWORD *)(*(_QWORD *)(v26 + 32)
                   + 32 * llvm::MachineInstr::findRegisterDefOperandIdx(v26, v20, 0, 0, 0));
    v44 = v43[1];
    v91[0] = *v43;
    v91[1] = v44;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a1 + 32))(&v84, a1, v91);
    v45 = *(uint64_t **)(a1 + 64);
    v89 = 129;
    v90 = 0;
    LODWORD(v81) = DWORD1(v84);
    LODWORD(v82) = 0;
    sub_1C5546B4C(v45, 118, &v89, (int *)&v81);
    v29 = 0;
    v30 = 0;
    v80 = 0;
    v79 = 0;
    v32 = *(_DWORD *)(*(_QWORD *)(v46 + 32) + 4);
  }
LABEL_40:
  v88 = *(_DWORD *)(v12 + 4);
  v58 = *(_QWORD *)(a1 + 48);
  sub_1C603B330(v58, &v88);
  v59 = v88;
  v60 = sub_1C554C050(v88, v58);
  if (v61)
  {
    v62 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), v60);
    v64 = (v63 >> 24) & 0xFFF00 | 7;
    v65 = v63;
  }
  else
  {
    v66 = *(_QWORD *)(a1 + 48);
    if ((v59 & 0x80000000) != 0)
      v67 = (uint64_t *)(*(_QWORD *)(v66 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
    else
      v67 = (uint64_t *)(*(_QWORD *)(v66 + 272) + 8 * v59);
    v68 = *v67;
    if (v68 && ((*(_BYTE *)(v68 + 3) & 1) != 0 || (v68 = *(_QWORD *)(v68 + 24)) != 0 && (*(_BYTE *)(v68 + 3) & 1) != 0))
      v69 = *(_QWORD *)(v68 + 8);
    else
      v69 = 0;
    v28 |= 1u;
    v94[0] = v28;
    v70 = (_OWORD *)(*(_QWORD *)(v69 + 32)
                   + 32 * llvm::MachineInstr::findRegisterDefOperandIdx(v69, v59, 0, 0, 0));
    v71 = v70[1];
    v87[0] = *v70;
    v87[1] = v71;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a1 + 40))(&v84, a1, v87);
    v72 = *(uint64_t **)(a1 + 64);
    v89 = 129;
    v90 = 0;
    LODWORD(v81) = DWORD1(v84);
    LODWORD(v82) = 0;
    sub_1C5546B4C(v72, 118, &v89, (int *)&v81);
    v64 = 0;
    v65 = 0;
    v62 = *(_DWORD *)(*(_QWORD *)(v73 + 32) + 4);
  }
  v84 = __PAIR64__(v32, v80);
  v85 = v79;
  LOBYTE(v86) = 1;
  v81 = __PAIR64__(v62, v64);
  v82 = v65;
  LOBYTE(v83) = 1;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, int *))(*(_QWORD *)a1 + 288))(a1, a2, &v84, &v81, v94);
    if (!(_DWORD)result)
    {
      v78 = 0;
      v77 = (_BYTE *)a6;
      goto LABEL_53;
    }
    v28 = v94[0];
  }
  v75 = v85;
  *(_OWORD *)a6 = v84;
  *(_OWORD *)(a6 + 16) = v75;
  *(_QWORD *)(a6 + 32) = v86;
  *(_DWORD *)(a6 + 73) = v89;
  *(_DWORD *)(a6 + 76) = *(_DWORD *)((char *)&v89 + 3);
  v76 = v82;
  *(_OWORD *)(a6 + 80) = v81;
  *(_OWORD *)(a6 + 96) = v76;
  *(_QWORD *)(a6 + 112) = v83;
  *(_DWORD *)(a6 + 40) = v30;
  *(_DWORD *)(a6 + 44) = v14;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = 0;
  *(_QWORD *)(a6 + 64) = 0;
  *(_BYTE *)(a6 + 72) = v29;
  *(_DWORD *)(a6 + 120) = v28;
  v77 = (_BYTE *)(a6 + 160);
  v78 = 1;
  *(_BYTE *)(a6 + 128) = 0;
LABEL_53:
  *v77 = 0;
  *(_BYTE *)(a6 + 168) = v78;
  return result;
}

uint64_t sub_1C603B330(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *a2;
  if ((v2 & 0x80000000) != 0)
    v3 = (uint64_t *)(*(_QWORD *)(result + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(result + 272) + 8 * v2);
  v4 = *v3;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 3) & 1) != 0 || (v4 = *(_QWORD *)(v4 + 24)) != 0 && (*(_BYTE *)(v4 + 3) & 1) != 0)
    {
      v15 = *(_QWORD *)(v4 + 8);
      if (v15)
      {
        if (**(_WORD **)(v15 + 16) == 119 && *(_DWORD *)(v15 + 40) == 2)
        {
          v2 = *(unsigned int *)(*(_QWORD *)(v15 + 32) + 36);
          *a2 = v2;
        }
      }
    }
  }
  if ((v2 & 0x80000000) != 0)
    v5 = (uint64_t *)(*(_QWORD *)(result + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  else
    v5 = (uint64_t *)(*(_QWORD *)(result + 272) + 8 * v2);
  v6 = *v5;
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 3) & 1) != 0 || (v6 = *(_QWORD *)(v6 + 24)) != 0 && (*(_BYTE *)(v6 + 3) & 1) != 0)
    {
      v16 = *(_QWORD *)(v6 + 8);
      if (v16)
      {
        if (**(_WORD **)(v16 + 16) == 81 && *(_DWORD *)(v16 + 40) == 2)
        {
          v2 = *(unsigned int *)(*(_QWORD *)(v16 + 32) + 36);
          *a2 = v2;
        }
      }
    }
  }
  v7 = *(_QWORD *)(result + 24);
  v8 = *(_QWORD *)(result + 272);
  v9 = (uint64_t *)(v7 + 16 * (v2 & 0x7FFFFFFF) + 8);
  if ((int)v2 >= 0)
    v9 = (uint64_t *)(v8 + 8 * v2);
  v10 = *v9;
  if (v10)
  {
    if ((*(_BYTE *)(v10 + 3) & 1) != 0 || (v10 = *(_QWORD *)(v10 + 24)) != 0 && (*(_BYTE *)(v10 + 3) & 1) != 0)
    {
      v17 = *(_QWORD *)(v10 + 8);
      if (v17 && **(_WORD **)(v17 + 16) == 80 && *(_DWORD *)(v17 + 40) == 2)
      {
        v18 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 36);
        v19 = (uint64_t *)((int)v18 >= 0 ? v8 + 8 * v18 : v7 + 16 * (v18 & 0x7FFFFFFF) + 8);
        v20 = *v19;
        if (v20)
        {
          if ((*(_BYTE *)(v20 + 3) & 1) != 0 || (v20 = *(_QWORD *)(v20 + 24)) != 0 && (*(_BYTE *)(v20 + 3) & 1) != 0)
          {
            v21 = *(_QWORD *)(v20 + 8);
            if (v21)
            {
              if (**(_WORD **)(v21 + 16) == 81 && *(_DWORD *)(v21 + 40) == 2)
              {
                v2 = *(unsigned int *)(*(_QWORD *)(v21 + 32) + 36);
                *a2 = v2;
              }
            }
          }
        }
      }
    }
  }
  v11 = v7 + 16 * (v2 & 0x7FFFFFFF) + 8;
  v12 = (uint64_t *)(v8 + 8 * v2);
  if ((int)v2 >= 0)
    v13 = v12;
  else
    v13 = (uint64_t *)v11;
  v14 = *v13;
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
    {
      v22 = *(_QWORD *)(v14 + 8);
      if (v22 && **(_WORD **)(v22 + 16) == 126 && *(_DWORD *)(v22 + 40) == 2)
        *a2 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 36);
    }
  }
  return result;
}

uint64_t sub_1C603B564(uint64_t result, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(result + 48);
  v5 = *(unsigned int *)(a2 + 4);
  if ((v5 & 0x80000000) != 0)
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v5);
  v7 = *v6;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = **(unsigned __int16 **)(v8 + 16);
  if (v9 == 77)
  {
    if (a4)
    {
      v10 = 0;
      for (i = 1; i <= a4; i = (v10++ + 2))
        a3[v10] = *(_QWORD *)(v8 + 32) + 32 * i;
    }
  }
  else if (v9 == 18)
  {
    v12 = *(unsigned int *)(v8 + 40);
    if (v12 >= 2)
    {
      v13 = 1;
      v14 = 32;
      do
      {
        *a3++ = *(_QWORD *)(v8 + 32) + v14;
        v13 += 2;
        v14 += 64;
      }
      while (v13 < v12);
    }
  }
  return result;
}

uint64_t sub_1C603B618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(a2 + 4);
  if ((v3 & 0x80000000) != 0)
    v4 = (uint64_t *)(*(_QWORD *)(v2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v2 + 272) + 8 * v3);
  v5 = *v4;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 368))(*(_QWORD *)(a1 + 8), **(unsigned __int16 **)(v6 + 16)))
  {
    return *(unsigned int *)(*(_QWORD *)(v6 + 32) + 48);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1C603B698(uint64_t a1, uint64_t a2)
{
  return sub_1C603B6AC(*(_DWORD *)(a2 + 4), 16, 0, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1C603B6AC(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v13;
  unint64_t v14;

  v6 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v6 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a1);
  v7 = *v6;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 3) & 1) == 0)
    {
      v7 = *(_QWORD *)(v7 + 24);
      if (!v7)
        goto LABEL_4;
      if ((*(_BYTE *)(v7 + 3) & 1) == 0)
      {
        v7 = 0;
        goto LABEL_4;
      }
    }
    v7 = *(_QWORD *)(v7 + 8);
  }
LABEL_4:
  if (a1 < 0 && (a1 & 0x7FFFFFFFu) < *(_DWORD *)(a4 + 432))
    v8 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (a1 & 0x7FFFFFFF));
  else
    v8 = 0;
  v14 = v8;
  v9 = **(unsigned __int16 **)(v7 + 16);
  v10 = sub_1C4825F50(&v14);
  if ((_DWORD)v11 == 1)
  {
    v13 = v10;
    v10 = v13;
  }
  if (v10 == a2)
    return ((v9 - 121) < 0x40) & (0xE7039C0000004001 >> (v9 - 121)) ^ a3 ^ 1;
  else
    return 0;
}

uint64_t sub_1C603B7BC(uint64_t a1, uint64_t a2)
{
  return sub_1C603B6AC(*(_DWORD *)(a2 + 4), 16, 1, *(_QWORD *)(a1 + 48));
}

__n128 sub_1C603B7D0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int32 a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int RegSizeInBits;
  __n128 result;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int32 i;
  int v34;
  unint64_t v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  int *v39;
  unsigned __int32 v40;
  int *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v14 = a5;
  v15 = (8 * a5) | 1;
  v16 = a1[8];
  v45 = v15;
  LODWORD(v46) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 68, &v45, 1, 0, 0, 0);
  v42 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 4);
  v18 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 16);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 184))(v18);
  v22 = *(_DWORD *)(a2 + 4);
  v21 = (int *)(a2 + 4);
  v20 = v22;
  if (v22 - 1 <= 0x3FFFFFFE)
  {
    v23 = a1[7];
    RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v23 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v19, v20, v23)
                                                     + 24)
                               + *(_DWORD *)(v23 + 272)
                               * ((*(_QWORD *)(v23 + 248) - *(_QWORD *)(v23 + 240)) >> 3)));
  }
  else
  {
    RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a1[7], v20, a1[6]);
  }
  v41 = v21;
  if (RegSizeInBits <= a5)
  {
    v31 = 0;
  }
  else
  {
    v26 = a1[8];
    v43 = (8 * (unsigned __int16)(RegSizeInBits / a5)) | (unint64_t)(v14 << 19) | 4;
    v44 = 0;
    LODWORD(v45) = *v21;
    LODWORD(v47) = 0;
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 19, &v43, 1, &v45, 1, 0);
    v28 = (uint64_t *)a1[8];
    v45 = v27;
    v46 = v29;
    LODWORD(v47) = 1;
    sub_1C5544C30(v28, v15, (int *)&v45);
    v31 = v30;
  }
  if (a7)
  {
    result.n128_u32[0] = a6;
    result.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)result.n128_u64[0]);
    result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
    v40 = 2 * result.n128_u32[0];
  }
  else
  {
    v40 = 0;
  }
  if (a4)
  {
    v32 = 0;
    for (i = 0; a4 != i; ++i)
    {
      if ((a7 & 1) != 0)
      {
        if (i < v40)
        {
LABEL_14:
          if (RegSizeInBits <= a5)
          {
            v39 = v41;
          }
          else
          {
            v38 = v32++;
            v39 = (int *)(*(_QWORD *)(v31 + 32) + 32 * v38 + 4);
          }
          v34 = *v39;
          goto LABEL_12;
        }
      }
      else if (((a6 >> i) & 1) != 0)
      {
        goto LABEL_14;
      }
      v34 = v42;
LABEL_12:
      v46 = 0;
      LODWORD(v45) = 0;
      HIDWORD(v45) = v34;
      v47 = 0;
      v48 = 0;
      v35 = sub_1C47C0F60(a3, (unint64_t)&v45, 1);
      v36 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
      result = *(__n128 *)v35;
      v37 = *(_OWORD *)(v35 + 16);
      *v36 = *(_OWORD *)v35;
      v36[1] = v37;
      ++*(_DWORD *)(a3 + 8);
    }
  }
  return result;
}

void sub_1C603BA6C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  unsigned int v19;
  int v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  char v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = a1[6];
  v8 = *(unsigned int *)(a2 + 4);
  if ((v8 & 0x80000000) != 0)
    v9 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v9 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v8);
  v10 = *v9;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
    v10 = *(_QWORD *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = **(unsigned __int16 **)(v11 + 16);
  if (v12 == 18)
  {
    if (*(_DWORD *)(v11 + 40) >= 2u)
    {
      v19 = 1;
      do
      {
        v20 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 32 * v19 + 4);
        v40 = 0;
        LODWORD(v39) = 0;
        HIDWORD(v39) = v20;
        v41 = 0;
        v42 = 0;
        v21 = (_OWORD *)sub_1C47C0F60(a3, (unint64_t)&v39, 1);
        v22 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
        v23 = v21[1];
        *v22 = *v21;
        v22[1] = v23;
        ++*(_DWORD *)(a3 + 8);
        v19 += 2;
      }
      while (v19 < *(_DWORD *)(v11 + 40));
    }
  }
  else if (v12 == 77)
  {
    if (*(_DWORD *)(v11 + 40) >= 2u)
    {
      v13 = 1;
      v14 = 36;
      do
      {
        v15 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + v14);
        v40 = 0;
        LODWORD(v39) = 0;
        HIDWORD(v39) = v15;
        v41 = 0;
        v42 = 0;
        v16 = (_OWORD *)sub_1C47C0F60(a3, (unint64_t)&v39, 1);
        v17 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
        v18 = v16[1];
        *v17 = *v16;
        v17[1] = v18;
        ++*(_DWORD *)(a3 + 8);
        ++v13;
        v14 += 32;
      }
      while (v13 < *(unsigned int *)(v11 + 40));
    }
  }
  else
  {
    v24 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4);
    if (v24 < 0 && (v25 = v24 & 0x7FFFFFFF, v25 < *(_DWORD *)(v7 + 432)))
      v26 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * v25);
    else
      v26 = 0;
    v27 = 0x800000000000000;
    if ((v26 & 2) == 0)
      v27 = 0x8000000000000;
    if ((v27 & v26) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v28 = (unsigned __int16)(v26 >> 3);
    if ((v26 & 2) != 0)
    {
      v35 = 35;
      v36 = 19;
      if ((v26 & 4) == 0)
        v35 = 19;
      v37 = v26 >> v35;
      if ((v26 & 4) == 0)
        v36 = 3;
      if ((v26 & 1) != 0)
        v36 = 3;
      v30 = (8 * (unsigned __int16)(v26 >> v36)) & 0xFFFFF8000007FFFFLL | ((v37 & 0xFFFFFF) << 19) | 2;
    }
    else
    {
      v29 = 3;
      if ((v26 & 1) == 0)
        v29 = 19;
      v30 = v26 & 0x8000000000000000 | (8 * (v26 >> v29)) | 1;
    }
    v39 = v30;
    v31 = *(_QWORD *)(v11 + 32);
    if (v28 < a4)
      a4 = v28;
    v33 = sub_1C4825F50(&v39);
    if ((_DWORD)v32 == 1)
    v34 = *(unsigned __int8 **)(v11 + 56);
    v38 = v34;
    if (v34)
      llvm::MetadataTracking::track((uint64_t)&v38, v34, 2);
    sub_1C603B7D0(a1, v31, a3, a4, v33, 0xFFFFFFFF, 0);
    if (v38)
      llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  }
}

void sub_1C603BD1C(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int RegSizeInBits;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[16];
  void *v57;
  uint64_t v58;
  _BYTE v59[16];
  void *v60;
  uint64_t v61;
  _DWORD v62[48];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (a4 == 1)
  {
    v7 = a3[1];
    *(_OWORD *)a5 = *a3;
    *(_OWORD *)(a5 + 16) = v7;
    return;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 16);
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 184))(v10);
  v57 = v59;
  v58 = 0x400000000;
  v54 = v56;
  v55 = 0x400000000;
  v11 = 32 * a4;
  v12 = (unsigned int *)a3 + 1;
  do
  {
    v14 = *v12;
    v12 += 8;
    v13 = v14;
    if (v14 - 1 <= 0x3FFFFFFE)
    {
      v15 = *(_QWORD *)(a1 + 56);
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v15 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v51, v13, v15)
                                                       + 24)
                                 + *(_DWORD *)(v15 + 272)
                                 * ((*(_QWORD *)(v15 + 248) - *(_QWORD *)(v15 + 240)) >> 3)));
    }
    else
    {
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 56), v13, *(_QWORD *)(a1 + 48));
    }
    v17 = v55;
    if (v55 >= (unint64_t)HIDWORD(v55))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 4);
      v17 = v55;
    }
    *((_DWORD *)v54 + v17) = RegSizeInBits;
    LODWORD(v55) = v55 + 1;
    if ((v13 & 0x80000000) != 0
      && (v18 = *(_QWORD *)(a1 + 48), (v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v18 + 432))
      && (v19 = *(_QWORD *)(*(_QWORD *)(v18 + 424) + 8 * (v13 & 0x7FFFFFFF)), (v19 & 0xFFFFFFFFFFFFFFF9) != 0))
    {
      if ((v19 & 1) != 0)
        goto LABEL_15;
      v20 = *(uint64_t **)(a1 + 64);
      v52 = (8 * RegSizeInBits) | 1;
      v53 = 0;
      LODWORD(v60) = v13;
      v62[0] = 0;
      sub_1C5546EF4(v20, (uint64_t *)&v52, (int *)&v60);
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 64);
      v52 = (8 * RegSizeInBits) | 1;
      v53 = 0;
      LODWORD(v60) = v13;
      v62[0] = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 19, &v52, 1, &v60, 1, 0);
    }
    v13 = *(_DWORD *)(*(_QWORD *)(v21 + 32) + 4);
LABEL_15:
    v23 = v58;
    if (v58 >= (unint64_t)HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 4);
      v23 = v58;
    }
    *((_DWORD *)v57 + v23) = v13;
    LODWORD(v58) = v58 + 1;
    v11 -= 32;
  }
  while (v11);
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 240)
                  + 8
                  * (*(unsigned int (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8), a4, *(_DWORD *)v54 == 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
  v25 = (unsigned int *)v54;
  if ((_DWORD)v55)
  {
    v26 = 0;
    while (*(_DWORD *)v54 == *(_DWORD *)((char *)v54 + v26))
    {
      v26 += 4;
      if (4 * v55 == v26)
        goto LABEL_24;
    }
    v27 = v58;
    if ((_DWORD)v58)
    {
      v28 = 0;
      do
      {
        v29 = v57;
        v30 = *((_DWORD *)v57 + v28);
        if (v30 - 1 <= 0x3FFFFFFE)
        {
          v31 = *(_QWORD *)(a1 + 56);
          v32 = *(_DWORD *)(*(_QWORD *)(v31 + 264)
                          + 24
                          * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v51, v30, v31) + 24)
                           + *(_DWORD *)(v31 + 272)
                           * ((*(_QWORD *)(v31 + 248) - *(_QWORD *)(v31 + 240)) >> 3)));
        }
        else
        {
          v32 = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 56), v30, *(_QWORD *)(a1 + 48));
        }
        if (v32 == 16)
        {
          v33 = *(_QWORD *)(a1 + 64);
          v52 = 257;
          v53 = 0;
          LODWORD(v60) = v29[v28];
          v62[0] = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 118, &v52, 1, &v60, 1, 0);
          v29[v28] = *(_DWORD *)(*(_QWORD *)(v34 + 32) + 4);
        }
        ++v28;
        v27 = v58;
      }
      while (v28 < v58);
      v25 = (unsigned int *)v54;
    }
  }
  else
  {
LABEL_24:
    v27 = v58;
  }
  v35 = *(_QWORD *)(a1 + 64);
  v52 = (8 * (unsigned __int16)v27) | ((unint64_t)*v25 << 19) | 4;
  v53 = 0;
  v36 = (int *)v57;
  v37 = v27;
  v60 = v62;
  v61 = 0x800000000;
  if (v27 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v27, 24);
    v38 = v61;
    v39 = v60;
    goto LABEL_37;
  }
  if (v27)
  {
    v38 = 0;
    v39 = v62;
LABEL_37:
    v40 = 6 * v38;
    v41 = 4 * v37;
    do
    {
      v42 = *v36++;
      v43 = &v39[v40];
      *v43 = v42;
      v43[4] = 0;
      v40 += 6;
      v41 -= 4;
    }
    while (v41);
    v44 = v61;
  }
  else
  {
    v44 = 0;
    v39 = v62;
  }
  LODWORD(v61) = v44 + v37;
  v45 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *))(*(_QWORD *)v35 + 32))(v35, 77, &v52, 1, v39);
  v47 = v46;
  if (v60 != v62)
    free(v60);
  v48 = *(_QWORD *)(a1 + 64);
  v52 = v24;
  v53 = 2;
  v60 = v45;
  v61 = v47;
  v62[0] = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 19, &v52, 1, &v60, 1, 0);
  v50 = *(_DWORD *)(*(_QWORD *)(v49 + 32) + 4);
  *(_DWORD *)a5 = 0;
  *(_DWORD *)(a5 + 4) = v50;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  if (v54 != v56)
    free(v54);
  if (v57 != v59)
    free(v57);
}

uint64_t sub_1C603C244(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint8x8_t v7;
  __int32 v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * v3 + 4), a1[6]));
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.i32[0] << *(_BYTE *)(a2 + 96);
    v9 = v8 + (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 200))(a1, a2, a3);
    v10 = 0x100000000;
  }
  return v10 | v9;
}

void sub_1C603C2DC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, unsigned __int8 a18, char a19, unsigned int a20,unsigned int a21)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  void (**v37)(_QWORD *);
  _QWORD *v38;
  void (**v39)(_QWORD *);
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int IncompleteVirtualRegister;
  uint64_t v56;
  llvm::MachineOperand *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  _OWORD *v64;
  _OWORD *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v80[2];
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;
  _OWORD v84[2];
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  unsigned __int8 *v89[4];
  unsigned __int8 *v90;
  _QWORD v91[3];
  _QWORD *v92;
  _QWORD v93[3];
  _QWORD *v94;
  llvm::MachineOperand *v95;
  uint64_t v96;
  _QWORD v97[64];
  void *v98;
  uint64_t v99;
  _QWORD v100[32];
  void *v101;
  uint64_t v102;
  _BYTE v103[256];
  void *v104[2];
  _QWORD v105[18];

  v105[16] = *MEMORY[0x1E0C80C00];
  v23 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v23 == -1)
    v24 = 0xFFFFFFFFLL;
  else
    v24 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * v23 + 4), a1[6]);
  v104[0] = v105;
  v104[1] = (void *)0x1000000000;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, char, void **, _BYTE))(*(_QWORD *)a1[1] + 288))(a1[1], a2, *(_QWORD *)(*(_QWORD *)(a3 + 24) + 32), a20, a21, v24, a17, a18, a19, v104, 0);
  (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 96))(v88, a1, a3, a9, a10);
  v86 = v88[0];
  v87 = v88[1];
  v101 = v103;
  v102 = 0x800000000;
  if (!a12)
  {
    v25 = a3;
    goto LABEL_6;
  }
  v25 = a3;
  (*(void (**)(llvm::MachineOperand **__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 96))(&v95, a1, a3, a11, a12);
  if (a20 != 7)
  {
    v26 = (_OWORD *)sub_1C47C0F60((uint64_t)&v101, (unint64_t)&v95, 1);
    v27 = (char *)v101 + 32 * v102;
    v28 = v26[1];
    *v27 = *v26;
    v27[1] = v28;
    LODWORD(v102) = v102 + 1;
LABEL_6:
    v30 = a6;
    v29 = a7;
    v31 = a5;
    goto LABEL_7;
  }
  v31 = a5;
  if (v95 == 1)
    v60 = v97[0];
  else
    v60 = sub_1C554C050(SHIDWORD(v95), a1[6]);
  v30 = a6;
  v29 = a7;
  LODWORD(v98) = 1;
  v99 = 0;
  v100[0] = v60;
  v61 = (_OWORD *)sub_1C47C0F60((uint64_t)&v101, (unint64_t)&v98, 1);
  v62 = (char *)v101 + 32 * v102;
  v63 = v61[1];
  *v62 = *v61;
  v62[1] = v63;
  LODWORD(v102) = v102 + 1;
LABEL_7:
  v98 = v100;
  v99 = 0x800000000;
  if (a14)
  {
    (*(void (**)(llvm::MachineOperand **__return_ptr, uint64_t *, uint64_t, uint64_t))(*a1 + 96))(&v95, a1, v25, a13);
    v64 = (_OWORD *)sub_1C47C0F60((uint64_t)&v98, (unint64_t)&v95, 1);
    v65 = (char *)v98 + 32 * v99;
    v66 = v64[1];
    *v65 = *v64;
    v65[1] = v66;
    LODWORD(v99) = v99 + 1;
  }
  v95 = (llvm::MachineOperand *)v97;
  v96 = 0x1000000000;
  v32 = *(_OWORD *)(v31 + 16);
  v84[0] = *(_OWORD *)v31;
  v84[1] = v32;
  v85 = *(_QWORD *)(v31 + 32);
  v33 = *(_OWORD *)(v30 + 16);
  v82[0] = *(_OWORD *)v30;
  v82[1] = v33;
  v83 = *(_QWORD *)(v30 + 32);
  v34 = *v29;
  v35 = v29[1];
  v81 = *((_QWORD *)v29 + 4);
  v80[0] = v34;
  v80[1] = v35;
  v94 = v93;
  v91[0] = &off_1E81AC180;
  v92 = v91;
  v93[0] = &off_1E81AC138;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD, _OWORD *, _OWORD *, _OWORD *))(*a1 + 352))(a1, a2, v25, a4, v84, v82, v80);
  v36 = v92;
  if (v92 == v91)
  {
    v37 = (void (**)(_QWORD *))(v91[0] + 32);
    v36 = v91;
LABEL_11:
    (*v37)(v36);
    goto LABEL_12;
  }
  if (v92)
  {
    v37 = (void (**)(_QWORD *))(*v92 + 40);
    goto LABEL_11;
  }
LABEL_12:
  v38 = v94;
  if (v94 == v93)
  {
    v39 = (void (**)(_QWORD *))(v93[0] + 32);
    v38 = v93;
LABEL_14:
    (*v39)(v38);
    goto LABEL_15;
  }
  if (v94)
  {
    v39 = (void (**)(_QWORD *))(*v94 + 40);
    goto LABEL_14;
  }
LABEL_15:
  v41 = a1[2];
  v40 = (unint64_t *)a1[3];
  v42 = *(_QWORD *)(a1[5] + 8);
  v43 = *(llvm::MachineFunction **)(v41 + 32);
  v44 = *(unsigned __int8 **)(v25 + 56);
  v90 = v44;
  if (v44)
    llvm::MetadataTracking::track((uint64_t)&v90, v44, 2);
  v45 = v42 + 48 * a4;
  v46 = *((_QWORD *)v43 + 28);
  if (v46)
    *((_QWORD *)v43 + 28) = *(_QWORD *)v46;
  else
    v46 = sub_1C484358C((uint64_t)v43 + 128, 72, 3);
  v89[0] = v90;
  if (v90)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v90, v90, (uint64_t)v89);
    v90 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v46, v43, v45, v89, 0);
  if (v89[0])
    llvm::MetadataTracking::untrack((uint64_t)v89, v89[0]);
  if (v90)
    llvm::MetadataTracking::untrack((uint64_t)&v90, v90);
  v47 = *(_QWORD *)(v41 + 40);
  *(_QWORD *)(v46 + 24) = v47;
  v48 = *(_QWORD *)(v47 + 32);
  v49 = *(unsigned int *)(v46 + 40);
  if ((_DWORD)v49)
  {
    v67 = *(_QWORD *)(v46 + 32);
    v68 = *(_QWORD *)(v48 + 40);
    v69 = 32 * v49;
    do
    {
      if (!*(_BYTE *)v67)
      {
        v70 = *(unsigned int *)(v67 + 4);
        if ((int)v70 >= 0)
          v71 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v70);
        else
          v71 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
        v72 = *v71;
        if (*v71)
        {
          v73 = *(_QWORD *)(v72 + 16);
          *(_QWORD *)(v72 + 16) = v67;
          *(_QWORD *)(v67 + 16) = v73;
          if ((*(_BYTE *)(v67 + 3) & 1) != 0)
          {
            *(_QWORD *)(v67 + 24) = v72;
          }
          else
          {
            *(_QWORD *)(v67 + 24) = 0;
            v71 = (uint64_t *)(v73 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v67 + 16) = v67;
          *(_QWORD *)(v67 + 24) = 0;
        }
        *v71 = v67;
      }
      v67 += 32;
      v69 -= 32;
    }
    while (v69);
  }
  v50 = *(_QWORD *)(v48 + 728);
  if (v50)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 24))(v50, v46);
  v51 = *v40 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v46 = v51 | *(_QWORD *)v46 & 7;
  *(_QWORD *)(v46 + 8) = v40;
  *(_QWORD *)(v51 + 8) = v46;
  *v40 = *v40 & 7 | v46;
  if (!a16)
  {
    v52 = sub_1C603C244(a1, a2, v25);
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)a1[1] + 256))(a1[1], v52, *(_BYTE *)(a2 + 8) == 0);
    v54 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v54, "", 0);
    *(_QWORD *)(*(_QWORD *)(v54 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v53 & 0xFFFFFFFFFFFFFFFBLL;
    v56 = *(_QWORD *)(v54 + 8);
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
    memset(&v89[1], 0, 24);
    HIDWORD(v89[0]) = IncompleteVirtualRegister;
    LODWORD(v89[0]) = 0x1000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v43, (const llvm::MachineOperand *)v89);
  }
  v57 = v95;
  if ((_DWORD)v96)
  {
    v58 = 32 * v96;
    v59 = a8;
    do
    {
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v43, v57);
      v57 = (llvm::MachineOperand *)((char *)v57 + 32);
      v58 -= 32;
    }
    while (v58);
    v57 = v95;
  }
  else
  {
    v59 = a8;
  }
  *(_QWORD *)v59 = v43;
  *(_QWORD *)(v59 + 8) = v46;
  *(_BYTE *)(v59 + 16) = 1;
  if (v57 != (llvm::MachineOperand *)v97)
    free(v57);
  if (v98 != v100)
    free(v98);
  if (v101 != v103)
    free(v101);
  if (v104[0] != v105)
    free(v104[0]);
}

BOOL sub_1C603C9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C603CA04(a2, a3, *(_QWORD *)(a1 + 48), 1u);
}

BOOL sub_1C603CA04(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD *v9;
  void (**v10)(_QWORD *);
  uint64_t v11;
  size_t v13;
  _QWORD *v14;
  void *v15;
  void *__src;
  unsigned int v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v4 == -1)
    return 0;
  v6 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v4 + 4);
  v20[0] = &off_1E816EFF0;
  v20[1] = sub_1C554C7E0;
  v21 = v20;
  v18[0] = &off_1E816F038;
  v18[1] = sub_1C554C7F8;
  v19 = v18;
  sub_1C554C3AC(v6, a3, (uint64_t)v20, (uint64_t)v18, 0, 0, &__src);
  v7 = v19;
  if (v19 == v18)
  {
    v8 = (void (**)(_QWORD *))(v18[0] + 32);
    v7 = v18;
LABEL_4:
    (*v8)(v7);
    goto LABEL_5;
  }
  if (v19)
  {
    v8 = (void (**)(_QWORD *))(*v19 + 40);
    goto LABEL_4;
  }
LABEL_5:
  v9 = v21;
  if (v21 == v20)
  {
    v10 = (void (**)(_QWORD *))(v20[0] + 32);
    v9 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_8;
    v10 = (void (**)(_QWORD *))(*v21 + 40);
  }
  (*v10)(v9);
LABEL_8:
  if (v17 >= 0x41)
  {
    v13 = (((unint64_t)v17 + 63) >> 3) & 0x3FFFFFF8;
    v14 = (_QWORD *)operator new[]();
    v15 = __src;
    memcpy(v14, __src, v13);
    if (v15)
      MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    v11 = *v14 & a4;
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  else
  {
    v11 = __src & a4;
  }
  return v11 != 0;
}

BOOL sub_1C603CBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C603CA04(a2, a3, *(_QWORD *)(a1 + 48), 2u);
}

BOOL sub_1C603CBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C603CA04(a2, a3, *(_QWORD *)(a1 + 48), 8u);
}

BOOL sub_1C603CC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C603CA04(a2, a3, *(_QWORD *)(a1 + 48), 0x10u);
}

BOOL sub_1C603CC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C603CA04(a2, a3, *(_QWORD *)(a1 + 48), 0x40u);
}

void sub_1C603CC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MachineFunction *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;

  v5 = *(llvm::MachineFunction **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 32);
  v6 = *(_QWORD *)(a3 + 48);
  if ((v6 & 7) != 0)
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a3 + 48) = v6 & 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_QWORD *)(a1 + 8);
  if ((*(_QWORD *)v7 & 4) != 0)
    v10 = 0;
  else
    v10 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
  v11 = (*(uint64_t (**)(uint64_t, unint64_t, llvm::MachineFunction *, BOOL))(*(_QWORD *)v9 + 272))(v9, v10, v5, v8 == -1);
  v12 = v11 | 4;
  if (v11)
    v13 = *(_DWORD *)(v11 + 12);
  else
    v13 = 0;
  v14 = *(_WORD *)(v7 + 32);
  v15 = sub_1C484358C((uint64_t)v5 + 128, 80, 3);
  *(_QWORD *)v15 = v12;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = v13;
  *(_BYTE *)(v15 + 20) = 0;
  *(_QWORD *)(v15 + 24) = 1025;
  *(_WORD *)(v15 + 32) = v14;
  *(_BYTE *)(v15 + 34) = 3;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_QWORD *)(v15 + 72) = 0;
  *(_WORD *)(v15 + 36) = 1;
  llvm::MachineInstr::addMemOperand(*(llvm::MachineInstr **)(a4 + 8), v5, (llvm::MachineMemOperand *)v15);
}

uint64_t sub_1C603CD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int RegSizeInBits;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  llvm::MachineFunction *v48;
  unsigned int v49;
  llvm::MachineInstr *v50;
  llvm::MachineInstr *v51;
  uint64_t v52;
  llvm::MachineFunction *v53;
  llvm::MachineInstr *v54;
  llvm::MachineInstr *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  __int16 v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int IncompleteVirtualRegister;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  llvm::MachineFunction *v94;
  unsigned __int8 *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  llvm::MachineFunction *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  __int16 v131;
  _QWORD *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a3, *(unsigned int *)(a2 + 40));
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 184))(*(_QWORD *)(v11 + 16));
  result = llvm::MachineInstr::getNumExplicitOperands((uint64_t)a5);
  if ((_DWORD)result)
  {
    v14 = 0;
    v15 = 0;
    v16 = result;
    do
    {
      v17 = a5[4] + v14;
      if (!*(_BYTE *)v17)
      {
        result = sub_1C554ADA8(v11, *(_QWORD *)(a1 + 56), *(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 40), v12, (uint64_t)a5, a5[2], v17, v15);
        if ((_DWORD)result != *(_DWORD *)(v17 + 4))
          result = llvm::MachineOperand::setReg(v17, result);
      }
      ++v15;
      v14 += 32;
    }
    while (v16 != v15);
  }
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    v18 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 4);
    v19 = a5[4];
    v20 = *(_DWORD *)(v19 + 4);
    v130 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 184))(*(_QWORD *)(v11 + 16));
    if ((v18 - 1) <= 0x3FFFFFFE)
    {
      v21 = *(_QWORD *)(a1 + 56);
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v21 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v130, v18, v21)
                                                       + 24)
                                 + *(_DWORD *)(v21 + 272)
                                 * ((*(_QWORD *)(v21 + 248) - *(_QWORD *)(v21 + 240)) >> 3)));
    }
    else
    {
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 56), v18, *(_QWORD *)(a1 + 48));
    }
    if (v20 - 1 <= 0x3FFFFFFE)
    {
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_DWORD *)(*(_QWORD *)(v23 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v130, v20, v23) + 24)
                       + *(_DWORD *)(v23 + 272) * ((*(_QWORD *)(v23 + 248) - *(_QWORD *)(v23 + 240)) >> 3)));
    }
    else
    {
      v24 = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 56), v20, *(_QWORD *)(a1 + 48));
    }
    if (*(_BYTE *)(a2 + 8))
      v25 = 32;
    else
      v25 = 16;
    v135 = v25;
    v132 = *(_QWORD **)(v11 + 736);
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
    v27 = HIDWORD(v26);
    v131 = v26;
    if (!*(_BYTE *)(a2 + 8))
      LODWORD(v27) = v26;
    v133 = v27;
    if (RegSizeInBits > v24
      || (v28 = v20, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, a3)))
    {
      v29 = *(_QWORD *)(a1 + 48);
      v134 = v20;
      v129 = v24;
      if ((v18 & 0x80000000) != 0)
        v30 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
      else
        v30 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v18);
      v31 = *v30;
      if (!*v30)
        goto LABEL_42;
      v32 = *(_QWORD *)(a1 + 56);
      while ((*(_BYTE *)(v31 + 3) & 1) != 0)
      {
        v31 = *(_QWORD *)(v31 + 24);
        if (!v31)
          goto LABEL_42;
      }
      v34 = (_QWORD *)(v31 + 8);
      v33 = *(_QWORD *)(v31 + 8);
      if (**(_WORD **)(v33 + 16) != 19)
        goto LABEL_42;
      v35 = 0;
      v127 = *(_QWORD *)(a1 + 56);
LABEL_29:
      v36 = *(_DWORD *)(*(_QWORD *)(v33 + 32) + 4);
      v37 = v36 - 1 <= 0x3FFFFFFE
          ? *(_DWORD *)(*(_QWORD *)(v127 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v130, v36, v32) + 24)
                       + *(_DWORD *)(v127 + 272)
                       * ((*(_QWORD *)(v127 + 248) - *(_QWORD *)(v127 + 240)) >> 3)))
          : llvm::TargetRegisterInfo::getRegSizeInBits(v32, v36, v29);
      v32 = v127;
      if (!v35 || v35 == v37)
      {
        while (1)
        {
          v31 = *(_QWORD *)(v31 + 24);
          if (!v31)
            break;
          if ((*(_BYTE *)(v31 + 3) & 1) == 0)
          {
            v33 = *(_QWORD *)(v31 + 8);
            if (v33 != *v34)
            {
              v34 = (_QWORD *)(v31 + 8);
              v35 = v37;
              if (**(_WORD **)(v33 + 16) == 19)
                goto LABEL_29;
              goto LABEL_42;
            }
          }
        }
        if (v37 != v135)
          goto LABEL_42;
        v139 = &v141;
        v140 = 0x800000000;
        v38 = *(_QWORD *)(a1 + 48);
        if ((v18 & 0x80000000) != 0)
          v39 = (uint64_t *)(*(_QWORD *)(v38 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        else
          v39 = (uint64_t *)(*(_QWORD *)(v38 + 272) + 8 * v18);
        v20 = v134;
        v70 = *v39;
        if (*v39)
        {
          while ((*(_BYTE *)(v70 + 3) & 1) != 0)
          {
            v70 = *(_QWORD *)(v70 + 24);
            if (!v70)
              goto LABEL_156;
          }
          v71 = 0;
          v72 = *(_QWORD *)(v70 + 8);
          v73 = 8;
LABEL_75:
          if (v71 >= v73)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, (uint64_t)&v141, v71 + 1, 8);
            v71 = v140;
          }
          *((_QWORD *)v139 + v71) = v72;
          v71 = v140 + 1;
          LODWORD(v140) = v140 + 1;
          v74 = *(_QWORD *)(v70 + 8);
          while (1)
          {
            v70 = *(_QWORD *)(v70 + 24);
            if (!v70)
              break;
            if ((*(_BYTE *)(v70 + 3) & 1) == 0)
            {
              v72 = *(_QWORD *)(v70 + 8);
              if (v72 != v74)
              {
                v73 = HIDWORD(v140);
                goto LABEL_75;
              }
            }
          }
          v75 = (uint64_t *)v139;
          if (v71)
          {
            v76 = (uint64_t *)((char *)v139 + 8 * v71);
            v123 = v76;
            v77 = -v133;
            v20 = v134;
            do
            {
              v78 = *(_DWORD *)(a2 + 12);
              if (v78)
              {
                v79 = 0;
                v80 = 0;
                v81 = *v75;
                v82 = *(_QWORD *)(*v75 + 32);
                v83 = (unsigned int *)(v82 + 32);
                while (v77 + ((*(_DWORD *)(v82 + 32) >> 8) & 0xFFF) != v79)
                {
                  v80 += (a7 >> v79++) & 1;
                  if (v78 == v79)
                    goto LABEL_125;
                }
                if (((a7 >> v79) & 1) != 0)
                {
                  v84 = v80 + v133;
                  llvm::MachineOperand::setReg(v82 + 32, v134);
                  v85 = (v84 & 0xFFF) << 8;
                  v20 = v134;
                  v77 = -v133;
                  if (v129 == v135)
                    v85 = 0;
                  *v83 = *v83 & 0xFFF000FF | v85;
                }
                else
                {
                  v86 = *(_QWORD *)(a1 + 48);
                  v124 = *(unsigned int *)(v82 + 4);
                  v122 = v124 & 0x7FFFFFFF;
                  v87 = *(_QWORD *)(*(_QWORD *)(v86 + 24) + 16 * v122);
                  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v86, "", 0);
                  v128 = IncompleteVirtualRegister;
                  v126 = IncompleteVirtualRegister;
                  if ((v87 & 4) != 0)
                    v89 = 0;
                  else
                    v89 = v87 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(*(_QWORD *)(v86 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v89;
                  v90 = *(_QWORD *)(v86 + 8);
                  if (v90)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 24))(v90, v126);
                  v92 = *(_QWORD *)(a1 + 16);
                  v91 = *(uint64_t **)(a1 + 24);
                  v93 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
                  v94 = *(llvm::MachineFunction **)(v92 + 32);
                  v95 = *(unsigned __int8 **)(v81 + 56);
                  v138 = v95;
                  v125 = v94;
                  if (v95)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v138, v95, 2);
                    v94 = v125;
                  }
                  v96 = *((_QWORD *)v94 + 28);
                  if (v96)
                  {
                    *((_QWORD *)v94 + 28) = *(_QWORD *)v96;
                  }
                  else
                  {
                    v97 = sub_1C484358C((uint64_t)v94 + 128, 72, 3);
                    v94 = v125;
                    v96 = v97;
                  }
                  v143 = (uint64_t)v138;
                  if (v138)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v138, v138, (uint64_t)&v143);
                    v94 = v125;
                    v138 = 0;
                  }
                  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v96, v94, v93 + 480, (unsigned __int8 **)&v143, 0);
                  if (v143)
                    llvm::MetadataTracking::untrack((uint64_t)&v143, (unsigned __int8 *)v143);
                  if (v138)
                    llvm::MetadataTracking::untrack((uint64_t)&v138, v138);
                  v98 = *(_QWORD *)(v92 + 40);
                  *(_QWORD *)(v96 + 24) = v98;
                  v99 = *(_QWORD *)(v98 + 32);
                  v100 = *(unsigned int *)(v96 + 40);
                  if ((_DWORD)v100)
                  {
                    v114 = *(_QWORD *)(v96 + 32);
                    v115 = *(_QWORD *)(v99 + 40);
                    v116 = 32 * v100;
                    do
                    {
                      if (!*(_BYTE *)v114)
                      {
                        v117 = *(unsigned int *)(v114 + 4);
                        if ((int)v117 >= 0)
                          v118 = (uint64_t *)(*(_QWORD *)(v115 + 272) + 8 * v117);
                        else
                          v118 = (uint64_t *)(*(_QWORD *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
                        v119 = *v118;
                        if (*v118)
                        {
                          v120 = *(_QWORD *)(v119 + 16);
                          *(_QWORD *)(v119 + 16) = v114;
                          *(_QWORD *)(v114 + 16) = v120;
                          if ((*(_BYTE *)(v114 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v114 + 24) = v119;
                          }
                          else
                          {
                            *(_QWORD *)(v114 + 24) = 0;
                            v118 = (uint64_t *)(v120 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v114 + 16) = v114;
                          *(_QWORD *)(v114 + 24) = 0;
                        }
                        *v118 = v114;
                      }
                      v114 += 32;
                      v116 -= 32;
                    }
                    while (v116);
                  }
                  v101 = *(_QWORD *)(v99 + 728);
                  if (v101)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v101 + 24))(v101, v96);
                  v102 = *v91 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v96 = v102 | *(_QWORD *)v96 & 7;
                  *(_QWORD *)(v96 + 8) = v91;
                  *(_QWORD *)(v102 + 8) = v96;
                  *v91 = *v91 & 7 | v96;
                  v144 = 0;
                  v145 = 0;
                  v146 = 0;
                  LODWORD(v143) = 0x1000000;
                  HIDWORD(v143) = v128;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v125, (const llvm::MachineOperand *)&v143);
                  v103 = *(_QWORD **)(a1 + 48);
                  if (v132)
                  {
                    sub_1C54F8CF8(v132, *(_QWORD *)(a1 + 48), v124);
                    v104 = *(_QWORD **)(a1 + 48);
                    v105 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v104 + 16) + 176))(*(_QWORD *)(*v104 + 16));
                    v76 = v123;
                    if ((v124 & 0x80000000) != 0)
                      v106 = (uint64_t *)(v104[3] + 16 * v122 + 8);
                    else
                      v106 = (uint64_t *)(v104[34] + 8 * v124);
                    v107 = *v106;
                    if (*v106)
                    {
                      do
                      {
                        v108 = *(_QWORD *)(v107 + 24);
                        if (v128 - 1 <= 0x3FFFFFFE)
                          llvm::MachineOperand::substPhysReg((unsigned int *)v107, v126, v105);
                        else
                          llvm::MachineOperand::setReg(v107, v126);
                        v107 = v108;
                      }
                      while (v108);
                    }
                    sub_1C54F8DA0((uint64_t)v132);
                  }
                  else
                  {
                    v110 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v103 + 16) + 176))(*(_QWORD *)(*v103 + 16));
                    v76 = v123;
                    if ((v124 & 0x80000000) != 0)
                      v111 = (uint64_t *)(v103[3] + 16 * v122 + 8);
                    else
                      v111 = (uint64_t *)(v103[34] + 8 * v124);
                    v112 = *v111;
                    if (*v111)
                    {
                      do
                      {
                        v113 = *(_QWORD *)(v112 + 24);
                        if (v128 - 1 <= 0x3FFFFFFE)
                          llvm::MachineOperand::substPhysReg((unsigned int *)v112, v126, v110);
                        else
                          llvm::MachineOperand::setReg(v112, v126);
                        v112 = v113;
                      }
                      while (v113);
                    }
                  }
                  v109 = v81;
                  if ((*(_BYTE *)v81 & 4) == 0)
                  {
                    v109 = v81;
                    if ((*(_WORD *)(v81 + 44) & 8) != 0)
                    {
                      v109 = v81;
                      do
                        v109 = *(_QWORD *)(v109 + 8);
                      while ((*(_WORD *)(v109 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(v81 + 24) + 40, v81, *(_QWORD *)(v109 + 8));
                  v20 = v134;
                  v77 = -v133;
                }
              }
LABEL_125:
              ++v75;
            }
            while (v75 != v76);
            v75 = (uint64_t *)v139;
          }
          else
          {
            v20 = v134;
          }
          if (v75 != &v141)
            free(v75);
        }
LABEL_156:
        v28 = v20;
      }
      else
      {
LABEL_42:
        v40 = (*(uint64_t (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 12), *(_BYTE *)(a2 + 8) == 0);
        v41 = *(unsigned int *)(a2 + 12);
        v42 = (unsigned __int8 *)a5[7];
        v137 = v42;
        if (v42)
          llvm::MetadataTracking::track((uint64_t)&v137, v42, 2);
        LOBYTE(v121) = *(_BYTE *)(a2 + 96);
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int8 **, uint64_t, uint64_t, _QWORD, int))(*(_QWORD *)a1 + 296))(a1, v19, v41, v135, &v137, a7, v40, *(unsigned __int8 *)(a2 + 8), v121);
        v20 = v134;
        if (v137)
          llvm::MetadataTracking::untrack((uint64_t)&v137, v137);
      }
    }
    v43 = *(_QWORD *)(a1 + 64);
    LODWORD(v143) = v18;
    LODWORD(v144) = 1;
    LODWORD(v139) = v28;
    LODWORD(v141) = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 19, &v143, 1, &v139, 1, 0);
    v44 = *(_QWORD *)(a3 + 32);
    if ((*(_DWORD *)(v44 + 32) & 0x10000FF) == 0x1000000)
    {
      result = sub_1C4778650(*(_QWORD *)(a1 + 48), *(_DWORD *)(v44 + 36));
      if ((result & 1) == 0)
      {
        v45 = sub_1C603C244((uint64_t *)a1, a2, a3);
        v46 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), 1, *(_BYTE *)(a2 + 8) == 0);
        v47 = *(_QWORD *)(a1 + 64);
        v143 = (uint64_t)v46;
        LODWORD(v144) = 2;
        v48 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v47 + 32))(v47, 19, &v143, 1, 0, 0, 0);
        v49 = v20;
        v51 = v50;
        v140 = 0;
        v141 = 0;
        v142 = 0;
        LODWORD(v139) = (((v133 + v45) << 8) + 1048320) & 0xFFF00;
        HIDWORD(v139) = v49;
        llvm::MachineInstr::addOperand(v50, v48, (const llvm::MachineOperand *)&v139);
        v52 = *(_QWORD *)(a1 + 64);
        if (*(_BYTE *)(a2 + 8))
        {
          v143 = 129;
          LODWORD(v144) = 0;
          v53 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v52 + 32))(v52, 19, &v143, 1, 0, 0, 0);
          v55 = v54;
          v56 = *(_DWORD *)(*((_QWORD *)v51 + 4) + 4);
          v140 = 0;
          v141 = 0;
          v142 = 0;
          LODWORD(v139) = (v131 & 0xFFF) << 8;
          HIDWORD(v139) = v56;
          llvm::MachineInstr::addOperand(v54, v53, (const llvm::MachineOperand *)&v139);
          v57 = *(_QWORD **)(a1 + 48);
          v58 = *(unsigned int *)(v44 + 36);
          if (v132)
          {
            sub_1C54F8CF8(v132, *(_QWORD *)(a1 + 48), *(_DWORD *)(v44 + 36));
            v59 = *(_QWORD **)(a1 + 48);
            v60 = *(unsigned int *)(v44 + 36);
            v61 = *(_DWORD *)(*((_QWORD *)v55 + 4) + 4);
            v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v59 + 16) + 176))(*(_QWORD *)(*v59 + 16));
            if ((v60 & 0x80000000) != 0)
              v63 = (uint64_t *)(v59[3] + 16 * (v60 & 0x7FFFFFFF) + 8);
            else
              v63 = (uint64_t *)(v59[34] + 8 * v60);
            v64 = *v63;
            if (*v63)
            {
              do
              {
                v65 = *(_QWORD *)(v64 + 24);
                if (v61 - 1 <= 0x3FFFFFFE)
                  llvm::MachineOperand::substPhysReg((unsigned int *)v64, v61, v62);
                else
                  llvm::MachineOperand::setReg(v64, v61);
                v64 = v65;
              }
              while (v65);
            }
            return (uint64_t)sub_1C54F8DA0((uint64_t)v132);
          }
          else
          {
            v66 = *(_DWORD *)(*((_QWORD *)v55 + 4) + 4);
            v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v57 + 16) + 176))(*(_QWORD *)(*v57 + 16));
            if ((v58 & 0x80000000) != 0)
              v68 = (uint64_t *)(v57[3] + 16 * (v58 & 0x7FFFFFFF) + 8);
            else
              v68 = (uint64_t *)(v57[34] + 8 * v58);
            result = *v68;
            if (*v68)
            {
              do
              {
                v69 = *(_QWORD *)(result + 24);
                if (v66 - 1 <= 0x3FFFFFFE)
                  llvm::MachineOperand::substPhysReg((unsigned int *)result, v66, v67);
                else
                  llvm::MachineOperand::setReg(result, v66);
                result = v69;
              }
              while (v69);
            }
          }
        }
        else
        {
          LODWORD(v143) = *(_DWORD *)(v44 + 36);
          LODWORD(v144) = 1;
          v139 = v48;
          v140 = (uint64_t)v51;
          LODWORD(v141) = 1;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 19, &v143, 1, &v139, 1, 0);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C603D9EC(uint64_t *a1, uint64_t a2, int a3, int a4, unsigned __int8 **a5, unsigned __int32 a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v10;
  unsigned __int8 *v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[16];
  void *v43;
  uint64_t v44;
  _BYTE v45[128];
  void *v46;
  uint64_t v47;
  _DWORD v48[48];
  uint64_t v49;

  LODWORD(v10) = a4;
  v49 = *MEMORY[0x1E0C80C00];
  v43 = v45;
  v44 = 0x400000000;
  v14 = *a5;
  v39 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v39, v14, 2);
  v15 = sub_1C603B7D0(a1, a2, (uint64_t)&v43, a3, v10, a6, a9);
  if (v39)
    llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  v40 = v42;
  v41 = 0x400000000;
  if ((_DWORD)v44)
  {
    LODWORD(v16) = 0;
    v10 = v10;
    v17 = 32 * v44;
    v18 = (int *)((char *)v43 + 4);
    do
    {
      v20 = *v18;
      v18 += 8;
      v19 = v20;
      if ((v20 & 0x80000000) == 0
        || (v21 = a1[6], (v19 & 0x7FFFFFFFu) >= *(_DWORD *)(v21 + 432))
        || (*(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v19 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) == 0)
      {
        v22 = a1[8];
        v37 = (8 * v10) | 1;
        v38 = 0;
        LODWORD(v46) = v19;
        v48[0] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD, __n128))(*(_QWORD *)v22 + 32))(v22, 19, &v37, 1, &v46, 1, 0, v15);
        v19 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 4);
        LODWORD(v16) = v41;
      }
      if (v16 >= HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v16 + 1, 4);
        LODWORD(v16) = v41;
      }
      *((_DWORD *)v40 + v16) = v19;
      v16 = (v41 + 1);
      LODWORD(v41) = v41 + 1;
      v17 -= 32;
    }
    while (v17);
    v24 = (int *)v40;
  }
  else
  {
    v16 = 0;
    v10 = v10;
    v24 = (int *)v42;
  }
  v25 = a1[8];
  v37 = (8 * (unsigned __int16)a3) | (unint64_t)(v10 << 19) | 4;
  v38 = 0;
  v46 = v48;
  v47 = 0x800000000;
  if (v16 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v16, 24);
    v26 = v47;
    v27 = v46;
  }
  else
  {
    if (!v16)
    {
      v32 = 0;
      v27 = v48;
      goto LABEL_23;
    }
    v26 = 0;
    v27 = v48;
  }
  v28 = 6 * v26;
  v29 = 4 * v16;
  do
  {
    v30 = *v24++;
    v31 = &v27[v28];
    *v31 = v30;
    v31[4] = 0;
    v28 += 6;
    v29 -= 4;
  }
  while (v29);
  v32 = v47;
LABEL_23:
  LODWORD(v47) = v32 + v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *))(*(_QWORD *)v25 + 32))(v25, 77, &v37, 1, v27);
  v34 = v33;
  if (v46 != v48)
    free(v46);
  v35 = *(unsigned int *)(*(_QWORD *)(v34 + 32) + 4);
  if (v40 != v42)
    free(v40);
  if (v43 != v45)
    free(v43);
  return v35;
}

void sub_1C603DCE8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C603DCFC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81AC138;
  return result;
}

void sub_1C603DD20(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81AC138;
}

void sub_1C603DD38(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFF00000 | 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v2;
}

void sub_1C603DD58()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C603DD6C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81AC180;
  return result;
}

void sub_1C603DD90(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81AC180;
}

__n128 sub_1C603DDA8@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C603DDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = operator new();
  sub_1C6041CF8(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3);
}

uint64_t sub_1C603DE00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  uint64_t BarrierNoopPass;
  uint64_t v7;

  v3 = operator new();
  sub_1C6059794(v3, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3);
  v4 = operator new();
  sub_1C6043368(v4);
  v5 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  BarrierNoopPass = llvm::createBarrierNoopPass(v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, BarrierNoopPass);
  v7 = operator new();
  sub_1C6040AC8(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v7);
}

uint64_t sub_1C603DED0(_DWORD *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *a1 != 0;
  v4 = operator new();
  sub_1C6059794(v4, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
}

uint64_t sub_1C603DF34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = operator new();
  sub_1C6043368(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3);
}

uint64_t sub_1C603DF80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = operator new();
  sub_1C6040AC8(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3);
}

BOOL sub_1C603DFCC(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  size_t v4;
  uint64_t v5;

  v2 = 0;
  do
  {
    v3 = (unsigned __int8 *)off_1E81AC1B8[v2];
    if (v3)
      v4 = strlen(off_1E81AC1B8[v2]);
    else
      v4 = 0;
    v5 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), v3, v4);
    if (v5)
      break;
  }
  while (v2++ != 28);
  return v5 != 0;
}

BOOL sub_1C603E040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  if (!a3)
    return 0;
  v3 = a2;
  v5 = a2 + 16 * a3;
  do
  {
    v6 = *(unsigned __int8 **)v3;
    v7 = *(_QWORD *)(v3 + 8);
    v3 += 16;
    v8 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), v6, v7);
    v10 = v8 == 0;
    result = v8 != 0;
    v10 = !v10 || v3 == v5;
  }
  while (!v10);
  return result;
}

void sub_1C603E094(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  llvm::ConstantPointerNull *v10;
  llvm::PointerType *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::ValueAsMetadata **v14;
  llvm::ValueAsMetadata **v15;
  llvm::ValueAsMetadata *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v5 = *(_QWORD *)(v2 + 24);
      v6 = sub_1C60400E0(v5);
      if (v5)
        v7 = !v6;
      else
        v7 = 1;
      if (!v7)
      {
        v8 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v20 + 1, 8);
          v8 = v20;
        }
        *((_QWORD *)v19 + v8) = v5;
        LODWORD(v20) = v20 + 1;
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
    v9 = v20;
    if ((_DWORD)v20)
    {
      if ((a2 & 1) == 0)
      {
        v14 = (llvm::ValueAsMetadata **)v19;
        v13 = *(llvm::Value **)(*(_QWORD *)v19 - 32 * (*(_DWORD *)(*(_QWORD *)v19 + 20) & 0x7FFFFFF) + 32);
LABEL_15:
        v15 = &v14[v9];
        do
        {
          v16 = *v14++;
          llvm::Value::doRAUW(v16, v13, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v16 + 5) + 40, (uint64_t ***)v16);
          v17 = *((_QWORD *)v16 + 3);
          v18 = (_QWORD *)*((_QWORD *)v16 + 4);
          *v18 = v17;
          *(_QWORD *)(v17 + 8) = v18;
          *((_QWORD *)v16 + 3) = 0;
          *((_QWORD *)v16 + 4) = 0;
          llvm::Value::deleteValue(v16);
        }
        while (v14 != v15);
        goto LABEL_17;
      }
      v10 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)*a1 + 1912), 0);
      v12 = (llvm::Value *)llvm::ConstantPointerNull::get(v10, v11);
      v9 = v20;
      if ((_DWORD)v20)
      {
        v13 = v12;
        v14 = (llvm::ValueAsMetadata **)v19;
        goto LABEL_15;
      }
    }
  }
LABEL_17:
  if (v19 != v21)
    free(v19);
}

void sub_1C603E224(unint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  void *__src;
  uint64_t v29;
  _QWORD v30[9];

  v30[8] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a4 + 16);
  if (!v9)
    goto LABEL_12;
  v10 = (_QWORD *)(a4 + 16);
  do
  {
    v11 = v9[4];
    v12 = v11 >= a1;
    if (v11 >= a1)
      v13 = v9;
    else
      v13 = v9 + 1;
    if (v12)
      v10 = v9;
    v9 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == (_QWORD *)(a4 + 16) || v10[4] > a1)
LABEL_12:
    v10 = (_QWORD *)(a4 + 16);
  v14 = v10[5];
  for (i = *(_QWORD *)(v14 + 16); ; i = *(_QWORD *)(v14 + 16))
  {
    v16 = *(_QWORD *)(v14 + 24);
    if (i == v16)
      break;
    --*(_DWORD *)(*(_QWORD *)(v16 - 8) + 40);
    sub_1C4DDDF70(v14 + 16, v16 - 40);
  }
  sub_1C603E468((char *)a4, v14);
  v17 = *(char **)(a5 + 16);
  v18 = *(char **)(a5 + 24);
  v19 = (_QWORD *)(a5 + 16);
  __src = v30;
  v29 = 0x800000000;
  sub_1C6177054((unsigned int *)&__src, v17, v18);
  if (a3)
  {
    v20 = 8 * a3;
    do
    {
      v26 = *a2;
      v27 = &v26;
      v22 = sub_1C4DE25A0((uint64_t **)(a4 + 8), &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27) + 5;
      v21 = (uint64_t)*v22;
      if (!*v22)
      {
        v23 = v26;
        v21 = operator new();
        *(_QWORD *)v21 = a4;
        *(_QWORD *)(v21 + 8) = v23;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_DWORD *)(v21 + 40) = 0;
        v24 = (uint64_t)*v22;
        *v22 = (uint64_t *)v21;
        if (v24)
        {
          sub_1C4DDE2A8((uint64_t)v22, v24);
          v21 = (uint64_t)*v22;
        }
      }
      v25 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v30, v29 + 1, 8);
        v25 = v29;
      }
      *((_QWORD *)__src + v25) = v21;
      LODWORD(v29) = v29 + 1;
      sub_1C603E468((char *)a4, v21);
      ++a2;
      v20 -= 8;
    }
    while (v20);
  }
  sub_1C4DE4490(v19, (char *)__src, (char *)__src + 8 * v29, v29);
  if (__src != v30)
    free(__src);
}

char *sub_1C603E468(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  unint64_t v26;
  unint64_t *v27;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = v2 + 72;
  v4 = *(_QWORD *)(v2 + 80);
  if (v4 == v2 + 72)
    return result;
  v6 = result;
  while (1)
  {
    v7 = v4 - 24;
    if (!v4)
      v7 = 0;
    v8 = *(_QWORD *)(v7 + 48);
    if (v8 != v7 + 40)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return result;
  }
  v9 = (uint64_t **)(result + 8);
  while (1)
  {
    if (v8)
      v10 = v8 - 24;
    else
      v10 = 0;
    v11 = *(unsigned __int8 *)(v10 + 16) - 33;
    v12 = v11 > 0x33;
    v13 = (1 << v11) & 0x8000000000041;
    if (!v12 && v13 != 0)
    {
      v15 = *(_QWORD *)(v8 - 56);
      if (!v15
        || *(_BYTE *)(v15 + 16)
        || *(_QWORD *)(v15 + 24) != *(_QWORD *)(v8 + 48)
        || ((v19 = *(_DWORD *)(v15 + 36) - 124, v12 = v19 > 4, v20 = (1 << v19) & 0x19, !v12)
          ? (v21 = v20 == 0)
          : (v21 = 1),
            !v21))
      {
        v16 = *((_QWORD *)v6 + 11);
LABEL_20:
        result = (char *)sub_1C4DDC318(a2, v8 - 24, v16);
        goto LABEL_21;
      }
      if ((*(_BYTE *)(v15 + 33) & 0x20) == 0)
      {
        v26 = *(_QWORD *)(v8 - 56);
        v27 = &v26;
        v22 = sub_1C4DE25A0(v9, &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27) + 5;
        v16 = (uint64_t)*v22;
        if (!*v22)
        {
          v25 = v9;
          v23 = v26;
          v16 = operator new();
          *(_QWORD *)v16 = v6;
          *(_QWORD *)(v16 + 8) = v23;
          v9 = v25;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          *(_DWORD *)(v16 + 40) = 0;
          v24 = (uint64_t)*v22;
          *v22 = (uint64_t *)v16;
          if (v24)
          {
            sub_1C4DDE2A8((uint64_t)v22, v24);
            v16 = (uint64_t)*v22;
          }
        }
        goto LABEL_20;
      }
    }
LABEL_21:
    v8 = *(_QWORD *)(v8 + 8);
    v17 = v4 - 24;
    if (!v4)
      v17 = 0;
    if (v8 == v17 + 40)
      break;
LABEL_28:
    if (v4 == v3)
      return result;
  }
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return result;
    v18 = v4 - 24;
    if (!v4)
      v18 = 0;
    v8 = *(_QWORD *)(v18 + 48);
    if (v8 != v18 + 40)
      goto LABEL_28;
  }
}

void sub_1C603E65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  llvm::Value *v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::UndefValue *v68;
  llvm::Type *v69;
  llvm::UndefValue *v70;
  llvm::Type *v71;
  llvm::MemorySSAUpdater *v72;
  llvm::Value *v73;
  llvm::ValueAsMetadata **v74;
  uint64_t v75;
  llvm::ValueAsMetadata *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  llvm::UndefValue ***v80;
  uint64_t v81;
  llvm::UndefValue **v82;
  llvm::UndefValue *v83;
  llvm::UndefValue *v84;
  llvm::UndefValue *v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  llvm **v92;
  uint64_t v93;
  llvm *v94;
  llvm::Value *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t Declaration;
  uint64_t v104;
  uint64_t **v105;
  char *v106;
  llvm::Value *v107;
  llvm::Value ***v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  llvm::Value **v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  llvm::Value **v119;
  uint64_t v120;
  uint64_t v121;
  llvm::ValueSymbolTable *v122;
  _QWORD *v123;
  uint64_t ***v124;
  char *v125;
  char v126;
  llvm::Value *v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  llvm::Value *v132;
  BOOL v133;
  uint64_t v134;
  _QWORD *v135;
  llvm::Value *v136;
  BOOL v137;
  uint64_t v138;
  _QWORD *v139;
  int v140;
  const llvm::Value *v141;
  char *v142;
  char *v143;
  unsigned __int8 v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  BOOL v148;
  _QWORD *v149;
  unsigned int v150;
  uint64_t v151;
  llvm::Type *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  _BOOL4 v166;
  uint64_t v167;
  _QWORD **v168;
  uint64_t v169;
  llvm::CastInst ***v170;
  llvm::CastInst ***v171;
  uint64_t *v172;
  char *v173;
  uint64_t v174;
  llvm::CastInst **v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t **v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  llvm::ValueAsMetadata **v188;
  uint64_t v189;
  llvm::ValueAsMetadata *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _BOOL4 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const llvm::Value *v218;
  const llvm::Value *v219;
  const llvm::Value *v220;
  const llvm::Value *v221;
  const llvm::Value *v222;
  const llvm::Value *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD v254[4];
  __int16 v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  _BYTE v259[16];
  void *v260;
  uint64_t v261;
  _QWORD v262[10];

  v262[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v260 = v262;
  v261 = 0x800000000;
  v257 = v259;
  v258 = 0x200000000;
  v4 = a2 + 72;
  v5 = *(_QWORD *)(a2 + 80);
  if (v5 == a2 + 72)
    goto LABEL_119;
  while (1)
  {
    v6 = v5 - 24;
    if (!v5)
      v6 = 0;
    v7 = *(_QWORD *)(v6 + 48);
    if (v7 != v6 + 40)
      break;
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v4)
      goto LABEL_119;
  }
  v8 = 0;
  v9 = 0;
  v10 = (_QWORD *)(a1 + 8);
  v11 = a1 + 24;
  v12 = a1 + 120;
  v13 = (const llvm::Value *)(a1 + 136);
  v14 = a1 + 88;
  v15 = a1 + 104;
  v16 = a1 + 56;
  while (1)
  {
    v17 = v7 - 24;
    if (v7)
      v18 = v7 - 24;
    else
      v18 = 0;
    if (*(_BYTE *)(v18 + 16) == 84)
    {
      v19 = *(_QWORD *)(v18 - 32);
      if (v19)
      {
        if (!*(_BYTE *)(v19 + 16)
          && *(_QWORD *)(v19 + 24) == *(_QWORD *)(v18 + 72)
          && (*(_BYTE *)(v19 + 33) & 0x20) != 0)
        {
          v22 = *(_DWORD *)(*(_QWORD *)(v7 - 56) + 36);
          switch(v22)
          {
            case 29:
              v211 = v11;
              v218 = v13;
              v204 = v10;
              v239 = v12;
              v246 = v14;
              v32 = *(_QWORD *)(v17 - 32 * (*(_DWORD *)(v7 - 4) & 0x7FFFFFF));
              v225 = v16;
              v232 = v15;
              if (v32)
              {
                if (*(_DWORD *)(*(_QWORD *)(v32 - 32) + 36) == 36)
                {
                  sub_1C603FA70(v32);
                  v16 = v225;
                  v15 = v232;
                  v14 = v246;
                  if (v33)
                  {
                    v12 = v239;
                    v10 = v204;
                    v11 = v211;
                    v13 = v218;
                    break;
                  }
                }
              }
              if (*(_QWORD *)a1)
              {
                v201 = "coroutine should have exactly one defining @llvm.coro.begin";
                goto LABEL_268;
              }
              *(_QWORD *)(v7 + 40) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v7 + 40), **(uint64_t ***)(v7 - 24), 0, 39);
              *(_QWORD *)(v7 + 40) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v7 + 40), **(uint64_t ***)(v7 - 24), 0, 19);
              *(_QWORD *)(v7 + 40) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v7 + 40), **(uint64_t ***)(v7 - 24), -1, 24);
              *(_QWORD *)a1 = v17;
LABEL_83:
              v12 = v239;
              v10 = v204;
              goto LABEL_84;
            case 30:
            case 31:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 47:
              break;
            case 32:
            case 33:
              v23 = *(unsigned int *)(a1 + 16);
              v239 = v12;
              v246 = v14;
              v211 = v11;
              v218 = v13;
              v225 = v16;
              v232 = v15;
              if (v23 >= *(unsigned int *)(a1 + 20))
              {
                v205 = v10;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v10, v11, v23 + 1, 8);
                v10 = v205;
                v23 = *(unsigned int *)(a1 + 16);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v23) = v17;
              v24 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 16) = v24;
              if (*(_DWORD *)(*(_QWORD *)(v7 - 56) + 36) == 33)
              {
                v49 = v10;
                sub_1C63CE814(v7 - 24);
                v10 = v49;
                v24 = *(_DWORD *)(a1 + 16);
              }
              v25 = v10;
              v26 = *(_QWORD *)(*v10 + 8 * v24 - 8);
              if (llvm::Constant::isOneValue(*(llvm::Constant **)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF) + 32)))
                goto LABEL_31;
              v11 = v211;
              v13 = v218;
              v14 = v246;
              v16 = v225;
              v15 = v232;
              if (*(_DWORD *)(*(_QWORD *)(v7 - 56) + 36) == 32)
              {
                v10 = v25;
                if (*(_DWORD *)(a1 + 16) < 2u)
                {
LABEL_80:
                  v12 = v239;
                }
                else
                {
                  if (!llvm::Constant::isOneValue(*(llvm::Constant **)(*(_QWORD *)*v25
                                                                      - 32
                                                                      * (*(_DWORD *)(*(_QWORD *)*v25 + 20) & 0x7FFFFFF)
                                                                      + 32)))
                  {
                    v201 = "Only one coro.end can be marked as fallthrough";
                    goto LABEL_268;
                  }
                  v46 = *(uint64_t **)(a1 + 8);
                  v47 = &v46[*(unsigned int *)(a1 + 16)];
                  v48 = *v46;
                  *v46 = *(v47 - 1);
                  *(v47 - 1) = v48;
LABEL_31:
                  v12 = v239;
                  v10 = v25;
LABEL_84:
                  v11 = v211;
                  v13 = v218;
                  v14 = v246;
                  v16 = v225;
                  v15 = v232;
                }
              }
              else
              {
                v12 = v239;
                v10 = v25;
              }
              break;
            case 34:
              v28 = v261;
              if (v261 >= (unint64_t)HIDWORD(v261))
              {
                v241 = v12;
                v248 = v14;
                v206 = v10;
                v213 = v11;
                v220 = v13;
                v227 = v16;
                v234 = v15;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v260, (uint64_t)v262, v261 + 1, 8);
                v16 = v227;
                v15 = v234;
                v12 = v241;
                v14 = v248;
                v11 = v213;
                v13 = v220;
                v10 = v206;
                v28 = v261;
              }
              *((_QWORD *)v260 + v28) = v17;
              LODWORD(v261) = v261 + 1;
              break;
            case 45:
              if (!*(_QWORD *)(v7 - 16))
              {
                v34 = v258;
                if (v258 >= (unint64_t)HIDWORD(v258))
                {
                  v244 = v12;
                  v251 = v14;
                  v209 = v10;
                  v216 = v11;
                  v223 = v13;
                  v230 = v16;
                  v237 = v15;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v257, (uint64_t)v259, v258 + 1, 8);
                  v16 = v230;
                  v15 = v237;
                  v12 = v244;
                  v14 = v251;
                  v11 = v216;
                  v13 = v223;
                  v10 = v209;
                  v34 = v258;
                }
                *((_QWORD *)v257 + v34) = v17;
                LODWORD(v258) = v258 + 1;
              }
              break;
            case 46:
              v29 = *(unsigned int *)(a1 + 64);
              if (v29 >= *(unsigned int *)(a1 + 68))
              {
                v242 = v12;
                v249 = v14;
                v207 = v10;
                v214 = v11;
                v221 = v13;
                v228 = v16;
                v235 = v15;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v16, a1 + 72, v29 + 1, 8);
                v16 = v228;
                v15 = v235;
                v12 = v242;
                v14 = v249;
                v11 = v214;
                v13 = v221;
                v10 = v207;
                v29 = *(unsigned int *)(a1 + 64);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v29) = v17;
              ++*(_DWORD *)(a1 + 64);
              break;
            case 48:
              v35 = *(unsigned int *)(a1 + 128);
              v239 = v12;
              v246 = v14;
              v204 = v10;
              v211 = v11;
              v218 = v13;
              v225 = v16;
              v232 = v15;
              if (v35 >= *(unsigned int *)(a1 + 132))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v12, (uint64_t)v13, v35 + 1, 8);
                v35 = *(unsigned int *)(a1 + 128);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v35) = v17;
              ++*(_DWORD *)(a1 + 128);
              if (!llvm::Constant::isOneValue(*(llvm::Constant **)(v17 - 32 * (*(_DWORD *)(v7 - 4) & 0x7FFFFFF) + 32)))
                goto LABEL_83;
              v10 = v204;
              v11 = v211;
              v13 = v218;
              v16 = v225;
              v14 = v246;
              v15 = v232;
              if ((v8 & 1) != 0)
              {
                v201 = "Only one suspend point can be marked as final";
                goto LABEL_268;
              }
              v9 = *(unsigned int *)(a1 + 128) - 1;
              v8 = 1;
              goto LABEL_80;
            case 49:
              v226 = v16;
              v233 = v15;
              v240 = v12;
              v247 = v14;
              v212 = v11;
              v219 = v13;
              v203 = v10;
              v36 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v17 - 32 * (*(_DWORD *)(v7 - 4) & 0x7FFFFFF) + 64));
              v37 = *((_QWORD *)v36 + 3);
              v38 = *(_QWORD **)(v37 + 16);
              if (*v38)
                v39 = *(_BYTE *)(*v38 + 8) == 15;
              else
                v39 = 0;
              if (!v39
                || ((v40 = ***(_QWORD ***)v36 + 1912, (v41 = *(_QWORD *)(*v38 + 24)) != 0)
                  ? (v42 = v41 == v40)
                  : (v42 = 1),
                    !v42))
              {
                v201 = "llvm.coro.suspend.async resume function projection function must return an i8* type";
                goto LABEL_268;
              }
              if (*(_DWORD *)(v37 + 12) != 2
                || (v43 = v38[1], *(_BYTE *)(v43 + 8) != 15)
                || ((v44 = *(_QWORD *)(v43 + 24)) != 0 ? (v45 = v44 == v40) : (v45 = 1), !v45))
              {
                v201 = "llvm.coro.suspend.async resume function projection function must take one i8* type as parameter";
                goto LABEL_268;
              }
              v30 = *(unsigned int *)(a1 + 128);
              v12 = v240;
              v14 = v247;
              v10 = v203;
              v11 = v212;
              v13 = v219;
              v16 = v226;
              v15 = v233;
              if (v30 >= *(unsigned int *)(a1 + 132))
              {
                v31 = v30 + 1;
                v12 = v240;
                v13 = v219;
LABEL_87:
                llvm::SmallVectorBase<unsigned int>::grow_pod(v12, (uint64_t)v13, v31, 8);
                v16 = v226;
                v15 = v233;
                v12 = v240;
                v14 = v247;
                v11 = v212;
                v13 = v219;
                v10 = v203;
                v30 = *(unsigned int *)(a1 + 128);
              }
LABEL_75:
              *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v30) = v17;
              ++*(_DWORD *)(a1 + 128);
              break;
            case 50:
              v30 = *(unsigned int *)(a1 + 128);
              if (v30 < *(unsigned int *)(a1 + 132))
                goto LABEL_75;
              v31 = v30 + 1;
              v240 = v12;
              v247 = v14;
              v203 = v10;
              v212 = v11;
              v219 = v13;
              v226 = v16;
              v233 = v15;
              goto LABEL_87;
            default:
              if (v22 == 20)
              {
                v27 = *(unsigned int *)(a1 + 96);
                if (v27 >= *(unsigned int *)(a1 + 100))
                {
                  v243 = v12;
                  v250 = v14;
                  v208 = v10;
                  v215 = v11;
                  v222 = v13;
                  v229 = v16;
                  v236 = v15;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v14, v15, v27 + 1, 8);
                  v16 = v229;
                  v15 = v236;
                  v12 = v243;
                  v14 = v250;
                  v11 = v215;
                  v13 = v222;
                  v10 = v208;
                  v27 = *(unsigned int *)(a1 + 96);
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v27) = v17;
                ++*(_DWORD *)(a1 + 96);
              }
              break;
          }
        }
      }
    }
    v7 = *(_QWORD *)(v7 + 8);
    v20 = v5 - 24;
    if (!v5)
      v20 = 0;
    if (v7 == v20 + 40)
      break;
LABEL_23:
    if (v5 == v4)
      goto LABEL_88;
  }
  while (1)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v4)
      break;
    v21 = v5 - 24;
    if (!v5)
      v21 = 0;
    v7 = *(_QWORD *)(v21 + 48);
    if (v7 != v21 + 40)
      goto LABEL_23;
  }
LABEL_88:
  if (!*(_QWORD *)a1)
  {
LABEL_119:
    v68 = (llvm::UndefValue *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)a2 + 1912), 0);
    v70 = llvm::UndefValue::get(v68, v69);
    if ((_DWORD)v261)
    {
      v73 = v70;
      v74 = (llvm::ValueAsMetadata **)v260;
      v75 = 8 * v261;
      do
      {
        v76 = *v74++;
        llvm::Value::doRAUW(v76, v73, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v76 + 5) + 40, (uint64_t ***)v76);
        v77 = *((_QWORD *)v76 + 3);
        v78 = (_QWORD *)*((_QWORD *)v76 + 4);
        *v78 = v77;
        *(_QWORD *)(v77 + 8) = v78;
        *((_QWORD *)v76 + 3) = 0;
        *((_QWORD *)v76 + 4) = 0;
        llvm::Value::deleteValue(v76);
        v75 -= 8;
      }
      while (v75);
    }
    v79 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v79)
    {
      v80 = *(llvm::UndefValue ****)(a1 + 120);
      v81 = 8 * v79;
      do
      {
        v82 = *v80;
        v83 = llvm::UndefValue::get(**v80, v71);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v82, v83, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v82[5] + 40, (uint64_t ***)v82);
        v84 = v82[3];
        v85 = v82[4];
        *(_QWORD *)v85 = v84;
        *((_QWORD *)v84 + 1) = v85;
        v82[3] = 0;
        v82[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v82);
        if (*((_DWORD *)*(v82 - 4) + 9) == 48)
        {
          v86 = (uint64_t)v82[-4 * (*((_DWORD *)v82 + 5) & 0x7FFFFFF)];
          v87 = sub_1C6040094(v86);
          if (v86 && v87)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v86 + 40) + 40, (uint64_t ***)v86);
            v89 = *(_QWORD *)(v86 + 24);
            v90 = *(_QWORD **)(v86 + 32);
            *v90 = v89;
            *(_QWORD *)(v89 + 8) = v90;
            *(_QWORD *)(v86 + 24) = 0;
            *(_QWORD *)(v86 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v86);
          }
        }
        ++v80;
        v81 -= 8;
      }
      while (v81);
    }
    v91 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v91)
    {
      v92 = *(llvm ***)(a1 + 8);
      v93 = 8 * v91;
      do
      {
        v94 = *v92++;
        llvm::changeToUnreachable(v94, 0, 0, 0, v72);
        v93 -= 8;
      }
      while (v93);
    }
    goto LABEL_257;
  }
  v50 = *(_QWORD *)(*(_QWORD *)a1 - 32 * (*(_DWORD *)(*(_QWORD *)a1 + 20) & 0x7FFFFFF));
  v51 = *(_DWORD *)(*(_QWORD *)(v50 - 32) + 36);
  v253 = v9;
  v245 = (_QWORD *)v12;
  if (v51 == 36)
  {
    v95 = 0;
    *(_DWORD *)(a1 + 200) = 0;
    *(_BYTE *)(a1 + 292) = v8 & 1;
    *(_QWORD *)(a1 + 256) = 0;
    if (*(_BYTE *)(*(_QWORD *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 32) + 16) != 19)
      v95 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 32));
    *(_QWORD *)(a1 + 264) = v95;
    *(_QWORD *)(a1 + 272) = 0;
    v96 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v96)
    {
      v97 = *(uint64_t **)(a1 + 120);
      v98 = 8 * v96;
      do
      {
        v99 = *v97;
        if (!*v97 || *(_DWORD *)(*(_QWORD *)(v99 - 32) + 36) != 48)
        {
          v201 = "coro.id must be paired with coro.suspend";
          goto LABEL_268;
        }
        v100 = *(_QWORD *)(v99 - 32 * (*(_DWORD *)(v99 + 20) & 0x7FFFFFF));
        v101 = sub_1C6040094(v100);
        if (!v100 || !v101)
        {
          v102 = *(_QWORD *)a1;
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v99 + 40) + 56) + 40), 45, 0, 0);
          v104 = Declaration;
          if (Declaration)
            v105 = *(uint64_t ***)(Declaration + 24);
          else
            v105 = 0;
          v256 = v102;
          v255 = 257;
          v106 = (char *)operator new(0x90uLL);
          v107 = (llvm::Value *)(v106 + 64);
          *((_DWORD *)v106 + 21) = *((_DWORD *)v106 + 21) & 0x38000000 | 2;
          *(_QWORD *)v106 = 0;
          *((_QWORD *)v106 + 1) = 0;
          *((_QWORD *)v106 + 2) = 0;
          *((_QWORD *)v106 + 3) = v106 + 64;
          *((_QWORD *)v106 + 4) = 0;
          *((_QWORD *)v106 + 5) = 0;
          *((_QWORD *)v106 + 6) = 0;
          *((_QWORD *)v106 + 7) = v106 + 64;
          *((_QWORD *)v106 + 8) = *v105[2];
          *((_QWORD *)v106 + 9) = 0;
          v108 = (llvm::Value ***)(v106 + 72);
          v106[80] = 84;
          v106[81] = 0;
          *((_WORD *)v106 + 41) = 0;
          *((_DWORD *)v106 + 21) = 2;
          *(_OWORD *)(v106 + 88) = 0u;
          v109 = v106 + 88;
          *(_OWORD *)(v106 + 104) = 0u;
          *((_DWORD *)v106 + 30) = 0;
          v110 = *(_QWORD *)(v99 + 40);
          *((_QWORD *)v106 + 13) = v110;
          *(_WORD *)(v110 + 18) &= ~0x8000u;
          if ((v106[87] & 0x10) != 0)
          {
            v121 = *(_QWORD *)(v110 + 56);
            if (v121)
            {
              v122 = *(llvm::ValueSymbolTable **)(v121 + 104);
              if (v122)
                llvm::ValueSymbolTable::reinsertValue(v122, v107);
            }
          }
          v111 = *(_QWORD *)(v99 + 24);
          *((_QWORD *)v106 + 11) = v111;
          *((_QWORD *)v106 + 12) = v99 + 24;
          *(_QWORD *)(v111 + 8) = v109;
          *(_QWORD *)(v99 + 24) = v109;
          *((_QWORD *)v106 + 16) = 0;
          llvm::CallInst::init((uint64_t ***)v107, v105, v104, &v256, 1, 0, 0, (uint64_t)v254);
          v112 = *(_DWORD *)(v99 + 20) & 0x7FFFFFF;
          v113 = -v112;
          v114 = (llvm::Value **)(v99 - 32 * v112);
          if (*v114)
          {
            v115 = v99 + 32 * v113;
            v117 = *(_QWORD **)(v115 + 16);
            v116 = (_QWORD *)(v115 + 16);
            *v117 = *(v116 - 1);
            v118 = *(v116 - 1);
            if (v118)
              *(_QWORD *)(v118 + 16) = *v116;
          }
          *v114 = v107;
          v119 = *v108;
          v120 = v99 + 32 * v113;
          *(_QWORD *)(v120 + 8) = *v108;
          if (v119)
            v119[2] = (llvm::Value *)(v120 + 8);
          *(_QWORD *)(v120 + 16) = v108;
          *v108 = v114;
        }
        ++v97;
        v98 -= 8;
      }
      while (v98);
    }
    goto LABEL_250;
  }
  if (v51 != 37)
  {
    v123 = (_QWORD *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF));
    if (*(_BYTE *)(*v123 + 16) != 16)
    {
      v201 = "size argument to coro.id.retcon.* must be constant";
      goto LABEL_268;
    }
    if (*(_BYTE *)(v123[4] + 16) != 16)
    {
      v201 = "alignment argument to coro.id.retcon.* must be constant";
      goto LABEL_268;
    }
    v124 = (uint64_t ***)v123[12];
    v125 = llvm::GlobalPtrAuthInfo::analyze(v124, v13);
    if (v126)
      v124 = *(uint64_t ****)(*((_QWORD *)v125 - 4) - 32 * (*(_DWORD *)(*((_QWORD *)v125 - 4) + 20) & 0x7FFFFFF));
    v127 = llvm::Value::stripPointerCasts((llvm::Value *)v124);
    if (v127)
      v128 = *((_BYTE *)v127 + 16) == 0;
    else
      v128 = 0;
    if (!v128)
    {
      v201 = "llvm.coro.id.retcon.* prototype not a Function";
      goto LABEL_268;
    }
    v129 = *((_QWORD *)v127 + 3);
    if (*(_DWORD *)(*(_QWORD *)(v50 - 32) + 36) == 38)
    {
      v130 = **(_QWORD **)(v129 + 16);
      v131 = *(_DWORD *)(v130 + 8);
      if (v131 != 15
        && ((v131 & 0x1FF) != 0x110 || !*(_DWORD *)(v130 + 12) || *(_BYTE *)(**(_QWORD **)(v130 + 16) + 8) != 15))
      {
        v201 = "llvm.coro.id.retcon prototype must return pointer as first result";
        goto LABEL_268;
      }
      if (v130 != **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 40) + 56) + 24) + 16))
      {
        v201 = "llvm.coro.id.retcon prototype return type must be same ascurrent function return type";
        goto LABEL_268;
      }
    }
    if (*(_DWORD *)(v129 + 12) == 1 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v129 + 16) + 8) + 8) != 15)
    {
      v201 = "llvm.coro.id.retcon.* prototype must take pointer as its first parameter";
      goto LABEL_268;
    }
    v132 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 128));
    if (v132)
      v133 = *((_BYTE *)v132 + 16) == 0;
    else
      v133 = 0;
    if (!v133)
    {
      v201 = "llvm.coro.* allocator not a Function";
      goto LABEL_268;
    }
    v134 = *((_QWORD *)v132 + 3);
    v135 = *(_QWORD **)(v134 + 16);
    if (*(_BYTE *)(*v135 + 8) != 15)
    {
      v201 = "llvm.coro.* allocator must return a pointer";
      goto LABEL_268;
    }
    if (*(_DWORD *)(v134 + 12) != 2 || *(_BYTE *)(v135[1] + 8) != 13)
    {
      v201 = "llvm.coro.* allocator must take integer as only param";
      goto LABEL_268;
    }
    v136 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 160));
    if (v136)
      v137 = *((_BYTE *)v136 + 16) == 0;
    else
      v137 = 0;
    if (!v137)
    {
      v201 = "llvm.coro.* deallocator not a Function";
      goto LABEL_268;
    }
    v138 = *((_QWORD *)v136 + 3);
    v139 = *(_QWORD **)(v138 + 16);
    if (*(_BYTE *)(*v139 + 8) != 7)
    {
      v201 = "llvm.coro.* deallocator must return void";
      goto LABEL_268;
    }
    if (*(_DWORD *)(v138 + 12) != 2 || *(_BYTE *)(v139[1] + 8) != 15)
    {
      v201 = "llvm.coro.* deallocator must take pointer as only param";
      goto LABEL_268;
    }
    if (v51 == 38)
      v140 = 1;
    else
      v140 = 2;
    *(_DWORD *)(a1 + 200) = v140;
    *(_QWORD *)(a1 + 264) = sub_1C63CE87C(v50);
    v142 = llvm::GlobalPtrAuthInfo::analyze(*(uint64_t ****)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 96), v141);
    v143 = v142;
    v145 = v144;
    if (v144)
      v146 = v142;
    else
      v146 = 0;
    *(_QWORD *)(a1 + 256) = v146;
    *(_QWORD *)(a1 + 272) = llvm::Value::stripPointerCasts(*(llvm::Value **)(v50
                                                                           - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF)
                                                                           + 128));
    *(_QWORD *)(a1 + 280) = llvm::Value::stripPointerCasts(*(llvm::Value **)(v50
                                                                           - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF)
                                                                           + 160));
    *(_QWORD *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 296) = 0;
    if (!v145
      || (llvm::Constant::isNullValue(*(llvm::Constant **)(*((_QWORD *)v143 - 4)
                                                         - 32
                                                         * (*(_DWORD *)(*((_QWORD *)v143 - 4) + 20) & 0x7FFFFFF)
                                                         + 64)) & 1) != 0)
    {
      goto LABEL_208;
    }
    v147 = *(_QWORD *)(*((_QWORD *)v143 - 4) - 32 * (*(_DWORD *)(*((_QWORD *)v143 - 4) + 20) & 0x7FFFFFF) + 64);
    if (v147)
      v148 = *(_BYTE *)(v147 + 16) == 16;
    else
      v148 = 0;
    if (!v148)
      goto LABEL_285;
    v149 = (_QWORD *)(v147 + 24);
    v150 = *(_DWORD *)(v147 + 32);
    if (v150 >= 0x41)
    {
      if (v150 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v147 + 24)) > 0x40)
        goto LABEL_285;
      v149 = (_QWORD *)*v149;
    }
    if (*v149 == 1)
    {
LABEL_208:
      v217 = sub_1C603FB2C(a1);
      v252 = v151;
      v153 = *(unsigned int *)(a1 + 128);
      if (!(_DWORD)v153)
        goto LABEL_250;
      v154 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
      v231 = *(_QWORD *)(v154 + 16) + 16;
      v238 = ((8 * *(unsigned int *)(v154 + 12) - 8) >> 3) - 1;
      v155 = *(uint64_t **)(a1 + 120);
      v224 = &v155[v153];
      v210 = v151 != 0;
      v202 = 8 * v151 - 8;
      while (1)
      {
        v156 = *v155;
        if (!*v155 || *(_DWORD *)(*(_QWORD *)(v156 - 32) + 36) != 50)
        {
          v201 = "coro.id.retcon.* must be paired with coro.suspend.retcon";
          goto LABEL_268;
        }
        v157 = *(unsigned __int8 *)(v156 + 16);
        if (v157 == 84)
        {
          v158 = 0;
        }
        else if (v157 == 39)
        {
          v158 = (*(_DWORD *)(v156 + 80) + 1);
        }
        else
        {
          v158 = 2;
        }
        v159 = *(_DWORD *)(v156 + 20);
        v160 = v159 & 0x7FFFFFF;
        v161 = v156 - 32 * v160;
        if (v159 < 0 && (v187 = *(_QWORD *)(v161 - 8), (v187 & 0xFFFFFFFF0) != 0))
          v162 = (*(_DWORD *)(v161 - 12) - *(_DWORD *)(v161 - v187));
        else
          v162 = 0;
        v163 = v156 - 32 * v158 - 32 * v162 - 32;
        v39 = v161 == v163;
        v164 = v161 != v163;
        if (!v39 && v252 != 0)
        {
          v167 = 32 * v160 - 32 * v158 - 32 * v162 - 64;
          v168 = (_QWORD **)(v161 + 8);
          v169 = v202;
          v170 = (llvm::CastInst ***)v217;
          while (1)
          {
            v172 = (uint64_t *)(v168 - 1);
            v171 = (llvm::CastInst ***)*(v168 - 1);
            if (*v171 != *v170)
            {
              if (!llvm::CastInst::isBitCastable(*v171, *v170, v152))
              {
                v201 = "argument to coro.suspend.retcon does not match corresponding prototype function result";
                goto LABEL_268;
              }
              v173 = (char *)operator new(0x60uLL);
              *((_DWORD *)v173 + 13) = *((_DWORD *)v173 + 13) & 0x38000000 | 1;
              *(_QWORD *)v173 = 0;
              *((_QWORD *)v173 + 1) = 0;
              *((_QWORD *)v173 + 2) = 0;
              *((_QWORD *)v173 + 3) = v173 + 32;
              v174 = *v172;
              v175 = *v170;
              v255 = 257;
              v176 = llvm::BitCastInst::BitCastInst((uint64_t)(v173 + 32), v174, (uint64_t)v175, (uint64_t)v254, v156);
              if (*v172)
              {
                *v168[1] = *v168;
                if (*v168)
                  (*v168)[2] = v168[1];
              }
              *(v168 - 1) = (_QWORD *)v176;
              v179 = (_QWORD *)*((_QWORD *)v173 + 5);
              v178 = (uint64_t **)(v173 + 40);
              v177 = v179;
              *v168 = v179;
              if (v179)
                v177[2] = v168;
              v168[1] = v178;
              *v178 = v172;
            }
            v164 = v167 != 0;
            v166 = v169 != 0;
            if (v167)
            {
              ++v170;
              v180 = v169;
              v169 -= 8;
              v167 -= 32;
              v168 += 4;
              if (v180)
                continue;
            }
            goto LABEL_232;
          }
        }
        v166 = v210;
LABEL_232:
        if (v164 || v166)
        {
          v201 = "wrong number of arguments to coro.suspend.retcon";
          goto LABEL_268;
        }
        v181 = *(_QWORD *)v156;
        v254[0] = v181;
        v182 = *(unsigned __int8 *)(v181 + 8);
        if (v182 == 7)
        {
          v184 = 0;
          v183 = 0;
        }
        else if (v182 == 16)
        {
          v183 = *(_QWORD **)(v181 + 16);
          v184 = *(unsigned int *)(v181 + 12);
        }
        else
        {
          v183 = v254;
          v184 = 1;
        }
        if (v184 != v238)
        {
          v201 = "wrong number of results from coro.suspend.retcon";
          goto LABEL_268;
        }
        v185 = v238;
        v186 = (_QWORD *)v231;
        if (v238)
          break;
LABEL_243:
        if (++v155 == v224)
          goto LABEL_250;
      }
      while (*v183 == *v186)
      {
        ++v186;
        ++v183;
        if (!--v185)
          goto LABEL_243;
      }
      v201 = "result from coro.suspend.retcon does not match corresponding prototype function param";
LABEL_268:
      llvm::report_fatal_error((llvm *)v201, (const char *)1);
    }
LABEL_285:
    v201 = "ptrauth-signed prototype must not have address diversity";
    goto LABEL_268;
  }
  v52 = v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF);
  if (*(_BYTE *)(*(_QWORD *)v52 + 16) != 16)
  {
    v201 = "size argument to coro.id.async must be constant";
    goto LABEL_268;
  }
  if (*(_BYTE *)(*(_QWORD *)(v52 + 32) + 16) != 16)
  {
    v201 = "alignment argument to coro.id.async must be constant";
    goto LABEL_268;
  }
  if (*(_BYTE *)(*(_QWORD *)(v52 + 64) + 16) != 16)
  {
    v201 = "storage argument offset to coro.id.async must be constant";
    goto LABEL_268;
  }
  v53 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v52 + 96));
  if (v53)
    v54 = *((_BYTE *)v53 + 16) == 3;
  else
    v54 = 0;
  if (!v54)
  {
    v201 = "llvm.coro.id.async async function pointer not a global";
    goto LABEL_268;
  }
  v55 = *(_QWORD *)v53;
  if (*(_QWORD *)v53)
    v56 = *(_BYTE *)(*(_QWORD *)v53 + 8) == 15;
  else
    v56 = 0;
  if (!v56 || *(_QWORD *)(v55 + 24))
  {
    v57 = **(_QWORD **)(v55 + 16);
    if ((~*(_DWORD *)(v57 + 8) & 0x300) != 0
      || *(_DWORD *)(v57 + 12) != 2
      || (v58 = *(_QWORD **)(v57 + 16), *(_DWORD *)(*v58 + 8) != 8205)
      || *(_DWORD *)(v58[1] + 8) != 8205)
    {
      v201 = "llvm.coro.id.async async function pointer argument's type is not <{i32, i32}>";
      goto LABEL_268;
    }
  }
  *(_DWORD *)(a1 + 200) = 3;
  *(_QWORD *)(a1 + 264) = sub_1C603FAC8(v50);
  v59 = *(_QWORD *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 64);
  v60 = (_QWORD *)(v59 + 24);
  if (*(_DWORD *)(v59 + 32) >= 0x41u)
    v60 = (_QWORD *)*v60;
  *(_DWORD *)(a1 + 276) = *v60;
  v61 = *(_QWORD *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF));
  v62 = (_QWORD *)(v61 + 24);
  if (*(_DWORD *)(v61 + 32) >= 0x41u)
    v62 = (_QWORD *)*v62;
  *(_QWORD *)(a1 + 280) = *v62;
  v63 = *(_QWORD *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 32);
  v64 = (unint64_t *)(v63 + 24);
  if (*(_DWORD *)(v63 + 32) >= 0x41u)
    v64 = (unint64_t *)*v64;
  v65 = *v64;
  v66 = 1 << (__clz(v65) ^ 0x3Fu);
  if (v65)
    v67 = v66;
  else
    v67 = 1;
  *(_QWORD *)(a1 + 288) = v67;
  *(_QWORD *)(a1 + 312) = llvm::Value::stripPointerCasts(*(llvm::Value **)(v50
                                                                         - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF)
                                                                         + 96));
  *(_DWORD *)(a1 + 272) = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
LABEL_250:
  if ((_DWORD)v261)
  {
    v188 = (llvm::ValueAsMetadata **)v260;
    v189 = 8 * v261;
    do
    {
      v190 = *v188++;
      llvm::Value::doRAUW(v190, *(llvm::Value **)a1, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v190 + 5) + 40, (uint64_t ***)v190);
      v191 = *((_QWORD *)v190 + 3);
      v192 = (_QWORD *)*((_QWORD *)v190 + 4);
      *v192 = v191;
      *(_QWORD *)(v191 + 8) = v192;
      *((_QWORD *)v190 + 3) = 0;
      *((_QWORD *)v190 + 4) = 0;
      llvm::Value::deleteValue(v190);
      v189 -= 8;
    }
    while (v189);
  }
  if (!*(_DWORD *)(a1 + 200))
  {
    if (*(_BYTE *)(a1 + 292))
    {
      v198 = *(unsigned int *)(a1 + 128);
      if (v253 != v198 - 1)
      {
        v199 = *v245 + 8 * v198;
        v200 = *(_QWORD *)(*v245 + 8 * v253);
        *(_QWORD *)(*v245 + 8 * v253) = *(_QWORD *)(v199 - 8);
        *(_QWORD *)(v199 - 8) = v200;
      }
    }
  }
  if ((_DWORD)v258)
  {
    v193 = (uint64_t *)v257;
    v194 = 8 * v258;
    do
    {
      v195 = *v193++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v195 + 40) + 40, (uint64_t ***)v195);
      v196 = *(_QWORD *)(v195 + 24);
      v197 = *(_QWORD **)(v195 + 32);
      *v197 = v196;
      *(_QWORD *)(v196 + 8) = v197;
      *(_QWORD *)(v195 + 24) = 0;
      *(_QWORD *)(v195 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v195);
      v194 -= 8;
    }
    while (v194);
  }
LABEL_257:
  if (v257 != v259)
    free(v257);
  if (v260 != v262)
    free(v260);
}

uint64_t sub_1C603FA70(uint64_t a1)
{
  llvm::Value *v1;
  BOOL v2;

  v1 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 96));
  if (v1)
    v2 = *((_BYTE *)v1 + 16) == 3;
  else
    v2 = 0;
  if (!v2)
    return 0;
  if (*(_BYTE *)(*((_QWORD *)v1 - 4) + 16) == 9)
    return *((_QWORD *)v1 - 4);
  return 0;
}

uint64_t sub_1C603FAC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
  v2 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 64);
  v3 = (_QWORD *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u)
    v3 = (_QWORD *)*v3;
  v4 = *(_DWORD *)v3;
  if ((*(_WORD *)(v1 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(*(_QWORD *)(a1 + 40) + 56));
  return *(_QWORD *)(v1 + 88) + 40 * v4;
}

uint64_t sub_1C603FB2C(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 56) + 24) + 16);
  if (v1)
    v2 = *(_BYTE *)(v1 + 8) == 16;
  else
    v2 = 0;
  if (v2)
    return *(_QWORD *)(v1 + 16) + 8;
  else
    return 0;
}

_QWORD *sub_1C603FB74(_QWORD *result, uint64_t a2, unint64_t a3)
{
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;

  if (result)
  {
    v5 = (_QWORD *)result[2];
    v3 = (char *)(result + 2);
    v4 = v5;
    if (!v5)
      goto LABEL_13;
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    v7 = v4;
    v8 = v3;
    do
    {
      v9 = v7[4];
      v10 = v9 >= v6;
      if (v9 >= v6)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = (char *)v7;
      v7 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 == v3 || *((_QWORD *)v8 + 4) > v6)
LABEL_13:
      v8 = v3;
    v12 = *((_QWORD *)v8 + 5);
    if (!v4)
      goto LABEL_25;
    v13 = v3;
    do
    {
      v14 = v4[4];
      v15 = v14 >= a3;
      if (v14 >= a3)
        v16 = v4;
      else
        v16 = v4 + 1;
      if (v15)
        v13 = (char *)v4;
      v4 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v13 == v3 || *((_QWORD *)v13 + 4) > a3)
LABEL_25:
      v13 = v3;
    return sub_1C4DDC318(v12, a2, *((_QWORD *)v13 + 5));
  }
  return result;
}

uint64_t LLVMAddCoroEarlyPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_1C6041CF8(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t LLVMAddCoroSplitPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_1C6059794(v2, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t LLVMAddCoroElidePass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_1C6043368(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t LLVMAddCoroCleanupPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_1C6040AC8(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t LLVMPassManagerBuilderAddCoroutinePassesToExtensionPoints(uint64_t a1)
{
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD *v8;
  void (**v9)(_QWORD *);
  uint64_t result;
  uint64_t (**v11)(void);
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20[0] = &off_1E81AC2B0;
  v20[1] = sub_1C603DDB4;
  v21 = v20;
  llvm::PassManagerBuilder::addExtension(a1, 0, v20);
  v2 = v21;
  if (v21 == v20)
  {
    v3 = (void (**)(_QWORD *))(v20[0] + 32);
    v2 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v3 = (void (**)(_QWORD *))(*v21 + 40);
  }
  (*v3)(v2);
LABEL_6:
  v18[0] = &off_1E81AC2B0;
  v18[1] = sub_1C603DE00;
  v19 = v18;
  llvm::PassManagerBuilder::addExtension(a1, 6, v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = (void (**)(_QWORD *))(v18[0] + 32);
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v5 = (void (**)(_QWORD *))(*v19 + 40);
  }
  (*v5)(v4);
LABEL_11:
  v16[0] = &off_1E81AC2B0;
  v16[1] = sub_1C603DED0;
  v17 = v16;
  llvm::PassManagerBuilder::addExtension(a1, 9, v16);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = (void (**)(_QWORD *))(v16[0] + 32);
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_16;
    v7 = (void (**)(_QWORD *))(*v17 + 40);
  }
  (*v7)(v6);
LABEL_16:
  v14[0] = &off_1E81AC2B0;
  v14[1] = sub_1C603DF34;
  v15 = v14;
  llvm::PassManagerBuilder::addExtension(a1, 3, v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = (void (**)(_QWORD *))(v14[0] + 32);
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_21;
    v9 = (void (**)(_QWORD *))(*v15 + 40);
  }
  (*v9)(v8);
LABEL_21:
  v12[0] = &off_1E81AC2B0;
  v12[1] = sub_1C603DF80;
  v13 = v12;
  llvm::PassManagerBuilder::addExtension(a1, 4, v12);
  result = (uint64_t)v13;
  if (v13 == v12)
  {
    v11 = (uint64_t (**)(void))(v12[0] + 32);
  }
  else
  {
    if (!v13)
      return result;
    v11 = (uint64_t (**)(void))(*v13 + 40);
  }
  return (*v11)();
}

llvm::Value *sub_1C603FF48(llvm::Value *a1, uint64_t **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v17;
  int v18;
  char *v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  _QWORD *v27;

  v17 = 0;
  if (a7)
  {
    v26 = 48 * a7;
    v27 = (_QWORD *)(a6 + 32);
    do
    {
      v17 += (*v27 - *(v27 - 1)) >> 3;
      v27 += 6;
      v26 -= 48;
    }
    while (v26);
  }
  *(_QWORD *)a1 = *a2[2];
  *((_QWORD *)a1 + 1) = 0;
  v18 = *((_DWORD *)a1 + 5) & 0xC0000000 | (a5 + v17 + 1) & 0x7FFFFFF;
  *((_DWORD *)a1 + 4) = 84;
  *((_DWORD *)a1 + 5) = v18;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  v19 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a9)
  {
    v21 = *(_QWORD *)(a9 + 40);
    v22 = (uint64_t *)(a9 + 24);
    *((_QWORD *)a1 + 5) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v24 = *(_QWORD *)(v21 + 56);
      if (v24)
      {
        v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25)
          llvm::ValueSymbolTable::reinsertValue(v25, a1);
      }
    }
    v23 = *v22;
    *((_QWORD *)a1 + 3) = *v22;
    *((_QWORD *)a1 + 4) = v22;
    *(_QWORD *)(v23 + 8) = v19;
    *v22 = (uint64_t)v19;
  }
  *((_QWORD *)a1 + 8) = 0;
  llvm::CallInst::init((uint64_t ***)a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

BOOL sub_1C6040094(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 45;
}

BOOL sub_1C60400E0(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 35;
}

uint64_t sub_1C604012C(uint64_t a1, llvm::PointerType *a2, const llvm::APInt *a3)
{
  llvm::Module **v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  int v18;
  llvm::Module *v19;
  llvm::Module *j;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Module *v29;
  _QWORD *v30;
  llvm::UndefValue *v31;
  llvm::UndefValue *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 **v38;
  uint64_t v39;
  unsigned int v40;
  llvm::Value *v41;
  llvm::ConstantAggregateZero *v42;
  llvm::ValueAsMetadata *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t ***v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t **v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 **v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  const void **v64;
  void (**v65)(void);
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t ***v72;
  uint64_t v73;
  llvm::ConstantInt *v74;
  llvm::ConstantInt *v75;
  llvm::ConstantInt *v76;
  uint64_t *v77;
  llvm::ConstantInt *v78;
  char v79;
  llvm::ConstantInt *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  unsigned int v83;
  llvm::Value *v84;
  void (**v85)(llvm::legacy::FunctionPassManager *__hidden);
  int32x2_t *v86;
  uint64_t v87;
  __int16 v88;
  _QWORD v89[3];
  unsigned __int8 *v90;
  uint64_t v91;
  unsigned __int8 **v92;
  __int16 v93;
  uint64_t v94;

  v3 = (llvm::Module **)a2;
  v94 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 14);
  if (v5)
  {
    if (!*(_DWORD *)(v5 + 8))
      goto LABEL_24;
    v5 = *(_QWORD *)(v5 + 40);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 40);
      if (v6)
      {
        v7 = *(_QWORD *)(v5 + 24);
        v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v66 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v66 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v66;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v9 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
        v10 = 0x9DDFEA08EB382D69
            * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                          * ((v9 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80
                                                                                          - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v9 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
        v11 = -348639895 * ((v10 >> 47) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = v11 & (v6 - 1);
          v14 = (uint64_t *)(v7 + 24 * v13);
          v15 = *v14;
          if (*v14 == -1)
          {
            if ("coroutine.presplit" == (char *)-1)
              goto LABEL_23;
          }
          else if (v15 == -2)
          {
            if ("coroutine.presplit" == (char *)-2)
              goto LABEL_23;
          }
          else if (v14[1] == 18)
          {
            a2 = (llvm::PointerType *)*(unsigned __int16 *)(v15 + 16);
            v16 = *(_QWORD *)v15 == 0x6E6974756F726F63 && *(_QWORD *)(v15 + 8) == 0x6C70736572702E65;
            if (v16 && (_DWORD)a2 == 29801)
            {
LABEL_23:
              LODWORD(v5) = 1;
              goto LABEL_25;
            }
          }
          if (v15 == -1)
            break;
          v11 = i + v13;
        }
      }
LABEL_24:
      LODWORD(v5) = 0;
    }
  }
LABEL_25:
  if (((_DWORD)v3[4] & 0xFu) - 7 < 2)
    v18 = v5;
  else
    v18 = 0;
  v19 = (llvm::Module *)(v3 + 9);
  for (j = v3[10]; ; j = (llvm::Module *)*((_QWORD *)j + 1))
  {
    if (j == v19)
      return 0;
    v21 = (_QWORD *)((char *)j - 24);
    if (!j)
      v21 = 0;
    v22 = (_QWORD *)v21[6];
    if (v22 != v21 + 5)
      break;
  }
  v23 = 0;
  do
  {
    while (1)
    {
      v24 = v22;
      v22 = (_QWORD *)v22[1];
      v25 = (_QWORD *)((char *)j - 24);
      if (!j)
        v25 = 0;
      if (v22 == v25 + 5)
      {
        v29 = (llvm::Module *)*((_QWORD *)j + 1);
        j = (llvm::Module *)(v3 + 9);
        if (v29 != v19)
        {
          while (1)
          {
            v30 = (_QWORD *)((char *)v29 - 24);
            if (!v29)
              v30 = 0;
            v22 = (_QWORD *)v30[6];
            if (v22 != v30 + 5)
              break;
            v29 = (llvm::Module *)*((_QWORD *)v29 + 1);
            if (v29 == v19)
            {
              j = (llvm::Module *)(v3 + 9);
              goto LABEL_38;
            }
          }
          j = v29;
        }
      }
LABEL_38:
      v26 = v24 - 3;
      v27 = v24 ? (uint64_t)(v24 - 3) : 0;
      if (*(_BYTE *)(v27 + 16) == 84)
      {
        v28 = *(_QWORD *)(v27 - 32);
        if (v28)
        {
          if (!*(_BYTE *)(v28 + 16)
            && *(_QWORD *)(v28 + 24) == *(_QWORD *)(v27 + 72)
            && (*(_BYTE *)(v28 + 33) & 0x20) != 0)
          {
            break;
          }
        }
      }
LABEL_48:
      if (j == v19)
      {
        if ((v23 & 1) != 0)
          goto LABEL_115;
        return 0;
      }
    }
    switch(*(_DWORD *)(*(v24 - 7) + 36))
    {
      case 0x15:
        v33 = **(_QWORD **)(a1 + 8);
        v31 = *(llvm::UndefValue **)(v33 + 1560);
        if (!v31)
        {
          v74 = *(llvm::ConstantInt **)(v33 + 1888);
          v81 = **(llvm::Value ***)(a1 + 8);
          v34 = *(unsigned int *)(v33 + 1896);
          LODWORD(v91) = v34 >> 8;
          if (v34 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, 1, 0);
          }
          else
          {
            if (v34 <= 0xFF)
              v35 = 0;
            else
              v35 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v34);
            v90 = (unsigned __int8 *)(v35 & 1);
          }
          v75 = llvm::ConstantInt::get(v74, (llvm::LLVMContext *)&v90, a3);
          if (v91 >= 0x41 && v90)
            MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
          v31 = v75;
          *((_QWORD *)v81 + 195) = v75;
        }
        goto LABEL_87;
      case 0x1B:
        v32 = (llvm::UndefValue *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)v27, a2);
        goto LABEL_76;
      case 0x1C:
        v82 = (llvm::Value *)*((_QWORD *)llvm::Value::stripPointerCasts((llvm::Value *)v26[-4
                                                                                         * (*((_DWORD *)v24 - 1) & 0x7FFFFFF)])
                             - 4);
        v41 = llvm::Value::stripPointerCasts((llvm::Value *)v26[-4 * (*((_DWORD *)v24 - 1) & 0x7FFFFFF) + 4]);
        v76 = *(llvm::ConstantInt **)(*((_QWORD *)v41 - 4)
                                    - 32 * (*(_DWORD *)(*((_QWORD *)v41 - 4) + 20) & 0x7FFFFFF)
                                    + 32);
        if ((llvm::Constant::isElementWiseEqual(((llvm::Constant **)v82 - 4 * (*((_DWORD *)v82 + 5) & 0x7FFFFFF))[4], v76) & 1) != 0)goto LABEL_89;
        v42 = *(llvm::ConstantAggregateZero **)v82;
        v90 = (unsigned __int8 *)*((_QWORD *)v82 - 4 * (*((_DWORD *)v82 + 5) & 0x7FFFFFF));
        v91 = (uint64_t)v76;
        v31 = llvm::ConstantStruct::get(v42, (llvm::Type *)&v90, 2);
        v43 = v82;
        goto LABEL_88;
      case 0x1D:
      case 0x23:
        v31 = (llvm::UndefValue *)v26[-4 * (*((_DWORD *)v24 - 1) & 0x7FFFFFF) + 4];
        goto LABEL_87;
      case 0x20:
      case 0x32:
        if (!v18)
          goto LABEL_48;
        v32 = llvm::UndefValue::get((llvm::UndefValue *)*(v24 - 3), a2);
        goto LABEL_76;
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
        v32 = (llvm::UndefValue *)llvm::ConstantTokenNone::get(*(llvm::ConstantTokenNone **)(a1 + 8), a2);
LABEL_76:
        v31 = v32;
        goto LABEL_87;
      case 0x2F:
        *(_QWORD *)(a1 + 88) = v24[2];
        *(_QWORD *)(a1 + 96) = v24;
        v36 = (unsigned __int8 *)v24[3];
        v90 = v36;
        if (v36)
        {
          llvm::MetadataTracking::track((uint64_t)&v90, v36, 2);
          v37 = v90;
        }
        else
        {
          v37 = 0;
        }
        sub_1C4774EF4(a1 + 40, 0, (uint64_t)v37);
        if (v90)
          llvm::MetadataTracking::untrack((uint64_t)&v90, v90);
        v38 = (unsigned __int8 **)&v26[-4 * (*((_DWORD *)v24 - 1) & 0x7FFFFFF)];
        v71 = *v38;
        v39 = (uint64_t)v38[4];
        v40 = *(_DWORD *)(v39 + 32);
        if (v40 > 0x40)
          LODWORD(v39) = **(_DWORD **)(v39 + 24);
        else
          v39 = (uint64_t)(*(_QWORD *)(v39 + 24) << -(char)v40) >> -(char)v40;
        v83 = v39;
        v77 = *(uint64_t **)*(v24 - 3);
        v90 = (unsigned __int8 *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 104) + 1912), 0);
        v91 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 104) + 1912), 0);
        v78 = (llvm::ConstantInt *)llvm::StructType::get(v77, (uint64_t)&v90, 2, 0);
        v68 = llvm::PointerType::get(v78, 0);
        *(_QWORD *)(a1 + 88) = v24[2];
        *(_QWORD *)(a1 + 96) = v24;
        v44 = (unsigned __int8 *)v24[3];
        v90 = v44;
        if (v44)
        {
          llvm::MetadataTracking::track((uint64_t)&v90, v44, 2);
          v45 = v90;
        }
        else
        {
          v45 = 0;
        }
        sub_1C4774EF4(a1 + 40, 0, (uint64_t)v45);
        if (v90)
          llvm::MetadataTracking::untrack((uint64_t)&v90, v90);
        v93 = 257;
        v46 = sub_1C4773E38((uint64_t *)(a1 + 40), 49, v71, v68, (uint64_t)&v90);
        v93 = 257;
        v47 = sub_1C5391F90((uint64_t *)(a1 + 40), v78, (uint64_t **)v46, 0, v83, (uint64_t)&v90);
        v48 = *(_QWORD *)(*((_QWORD *)v78 + 2) + 8 * v83);
        v69 = v48;
        v72 = v47;
        v88 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 56) + 40) + 272, v48);
        v79 = v49;
        v50 = (char *)operator new(0x60uLL);
        *((_QWORD *)v50 + 2) = 0;
        *((_QWORD *)v50 + 3) = v50 + 32;
        v93 = 257;
        *((_QWORD *)v50 + 4) = v69;
        *((_QWORD *)v50 + 5) = 0;
        *((_WORD *)v50 + 24) = 60;
        *((_DWORD *)v50 + 13) = 1;
        *(_OWORD *)(v50 + 56) = 0u;
        *(_OWORD *)(v50 + 72) = 0u;
        *((_DWORD *)v50 + 22) = 0;
        *(_QWORD *)v50 = v72;
        *((_QWORD *)v50 + 1) = 0;
        if (v72)
        {
          v52 = v72 + 1;
          v51 = v72[1];
          *((_QWORD *)v50 + 1) = v51;
          if (v51)
            v51[2] = (uint64_t *)(v50 + 8);
          *((_QWORD *)v50 + 2) = v52;
          *v52 = v50;
        }
        *((_WORD *)v50 + 25) = 2 * (v79 & 0x3F);
        v50[92] = 1;
        v84 = (llvm::Value *)(v50 + 32);
        v67 = v50;
        llvm::Value::setName((uint64_t ***)v50 + 4, (uint64_t)&v90);
        (*(void (**)(_QWORD, llvm::Value *, void (***)(llvm::legacy::FunctionPassManager *__hidden), _QWORD, _QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120), v84, &v85, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
        v31 = v84;
        v53 = *(unsigned int *)(a1 + 48);
        if (!(_DWORD)v53)
          goto LABEL_87;
        v56 = *(_QWORD *)(a1 + 40);
        v57 = v56 + 16 * v53;
        v58 = (unsigned __int8 **)(v67 + 80);
        break;
      default:
        goto LABEL_48;
    }
    do
    {
      v59 = *(_DWORD *)v56;
      v60 = *(unsigned __int8 **)(v56 + 8);
      if (v60)
      {
        v73 = v56;
        v80 = (llvm::ConstantInt *)v58;
        v70 = v57;
        if (v59)
          goto LABEL_99;
        v89[0] = *(_QWORD *)(v56 + 8);
        llvm::MetadataTracking::track((uint64_t)v89, v60, 2);
        v61 = *(unsigned __int8 **)v80;
LABEL_104:
        if (v61)
          llvm::MetadataTracking::untrack((uint64_t)v80, v61);
        v62 = (unsigned __int8 *)v89[0];
        *(_QWORD *)v80 = v89[0];
        if (v62)
          llvm::MetadataTracking::retrack((uint64_t)v89, v62, (uint64_t)v80);
LABEL_100:
        v57 = v70;
        v56 = v73;
        v58 = (unsigned __int8 **)v80;
        goto LABEL_101;
      }
      v61 = *v58;
      if (*v58 || (v67[55] & 0x20) != 0)
      {
        v73 = v56;
        v80 = (llvm::ConstantInt *)v58;
        v70 = v57;
        if (!v59)
        {
          v89[0] = 0;
          goto LABEL_104;
        }
LABEL_99:
        llvm::Value::setMetadata(v84, v59, (llvm::MDNode *)v60);
        goto LABEL_100;
      }
LABEL_101:
      v56 += 16;
      v31 = v84;
    }
    while (v56 != v57);
LABEL_87:
    v43 = (llvm::ValueAsMetadata *)(v24 - 3);
LABEL_88:
    llvm::Value::doRAUW(v43, v31, (llvm::Value *)1);
LABEL_89:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v24[2] + 40, (uint64_t ***)v24 - 3);
    v54 = *v24;
    v55 = (_QWORD *)v24[1];
    *v55 = *v24;
    *(_QWORD *)(v54 + 8) = v55;
    *v24 = 0;
    v24[1] = 0;
    llvm::Value::deleteValue((llvm::Value *)(v24 - 3));
    v23 = 1;
  }
  while (j != v19);
LABEL_115:
  llvm::legacy::FunctionPassManager::FunctionPassManager((llvm::legacy::FunctionPassManager *)&v85, v3[5]);
  v89[0] = 0x100000000000001;
  v89[1] = 16842752;
  v89[2] = 0;
  v92 = 0;
  v64 = (const void **)llvm::createCFGSimplificationPass((uint64_t)v89, &v90);
  llvm::PMTopLevelManager::schedulePass(v86 + 52, v64);
  if (v92 == &v90)
  {
    v65 = (void (**)(void))(v90 + 32);
LABEL_119:
    (*v65)();
  }
  else if (v92)
  {
    v65 = (void (**)(void))(*v92 + 40);
    goto LABEL_119;
  }
  (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)v86 + 24))(v86, v87);
  llvm::legacy::FunctionPassManager::run((llvm::legacy::FunctionPassManagerImpl **)&v85, v3);
  (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)v86 + 32))(v86, v87);
  v85 = &off_1E8168290;
  if (v86)
    (*(void (**)(int32x2_t *))(*(_QWORD *)v86 + 8))(v86);
  return 1;
}

uint64_t sub_1C6040A38(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower all coroutine related intrinsics";
  *(_QWORD *)(v2 + 8) = 38;
  *(_QWORD *)(v2 + 16) = "coro-cleanup";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7680;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6040B94;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C6040AC8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7680;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81AC398;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7678);
  if (v3 != -1)
  {
    v7[0] = sub_1C6040A38;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7678, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C6040B94()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6040AC8(v0);
}

void sub_1C6040BBC(llvm::Pass *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E81AC398;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56))
      free(v3);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C6040C34(llvm::Pass *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E81AC398;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56))
      free(v3);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C6040CC0()
{
  return "Coroutine Cleanup";
}

uint64_t sub_1C6040CD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[10];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10[6] = xmmword_1E81AC348;
  v10[7] = *(_OWORD *)&off_1E81AC358;
  v10[8] = xmmword_1E81AC368;
  v10[9] = *(_OWORD *)&off_1E81AC378;
  v10[2] = xmmword_1E81AC308;
  v10[3] = *(_OWORD *)&off_1E81AC318;
  v10[4] = xmmword_1E81AC328;
  v10[5] = *(_OWORD *)&off_1E81AC338;
  v10[0] = xmmword_1E81AC2E8;
  v10[1] = *(_OWORD *)&off_1E81AC2F8;
  if (sub_1C603E040((uint64_t)a2, (uint64_t)v10, 10))
  {
    v5 = operator new();
    v6 = sub_1C63CE630(v5, a2);
    v7 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 40) = v6 + 56;
    *(_QWORD *)(v6 + 48) = 0x200000000;
    *(_QWORD *)(v6 + 160) = &unk_1E8167888;
    *(_QWORD *)(v6 + 104) = v7;
    *(_QWORD *)(v6 + 112) = v6 + 160;
    *(_QWORD *)(v6 + 168) = &unk_1E8167A08;
    *(_QWORD *)(v6 + 120) = v6 + 168;
    *(_QWORD *)(v6 + 128) = 0;
    *(_DWORD *)(v6 + 136) = 0;
    *(_WORD *)(v6 + 140) = 512;
    *(_BYTE *)(v6 + 142) = 7;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 144) = 0;
    *(_QWORD *)(v6 + 152) = 0;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;
    if (v8)
    {
      v9 = *(void **)(v8 + 40);
      if (v9 != (void *)(v8 + 56))
        free(v9);
      MEMORY[0x1CAA32FC0](v8, 0x10E0C4023742DC2);
    }
  }
  return 0;
}

uint64_t sub_1C6040E30(uint64_t result, uint64_t a2)
{
  if (!*(_QWORD *)(result + 32))
    *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C6040E48(uint64_t a1, llvm::PointerType *a2, const llvm::APInt *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return sub_1C604012C(result, a2, a3);
  return result;
}

void sub_1C6040E58(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  _OWORD v7[2];
  void *v8[2];
  _OWORD v9[10];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9[7] = xmmword_1E81AC4C8;
  v9[8] = *(_OWORD *)&off_1E81AC4D8;
  v9[9] = xmmword_1E81AC4E8;
  v9[3] = xmmword_1E81AC488;
  v9[4] = *(_OWORD *)&off_1E81AC498;
  v9[5] = xmmword_1E81AC4A8;
  v9[6] = *(_OWORD *)&off_1E81AC4B8;
  *(_OWORD *)v8 = xmmword_1E81AC448;
  v9[0] = *(_OWORD *)&off_1E81AC458;
  v9[1] = xmmword_1E81AC468;
  v9[2] = *(_OWORD *)&off_1E81AC478;
  v7[0] = xmmword_1E81AC428;
  v7[1] = *(_OWORD *)&off_1E81AC438;
  if (sub_1C603E040((uint64_t)a1, (uint64_t)v7, 13))
  {
    sub_1C6040FD8((uint64_t)v7, a1);
    v4 = a1 + 3;
    for (i = a1[4]; (uint64_t *)i != v4; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v6 = i - 56;
      else
        v6 = 0;
      sub_1C6041090((uint64_t)v7, v6);
    }
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_QWORD *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::CFGAnalyses::SetKey);
    if (v8[1] != (char *)v9 + 8)
      free(v8[1]);
  }
  else
  {
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_QWORD *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
}

uint64_t sub_1C6040FD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t **v6;
  llvm::PointerType *v7;
  uint64_t v9;

  v3 = sub_1C63CE630(a1, a2);
  *(_QWORD *)(v3 + 40) = v3 + 56;
  *(_QWORD *)(v3 + 160) = &unk_1E8167888;
  v4 = *(_QWORD **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 104) = v4;
  *(_QWORD *)(v3 + 112) = v3 + 160;
  *(_QWORD *)(v3 + 168) = &unk_1E8167A08;
  *(_QWORD *)(v3 + 48) = 0x200000000;
  *(_QWORD *)(v3 + 120) = v3 + 168;
  *(_QWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 136) = 0;
  *(_WORD *)(v3 + 140) = 512;
  *(_BYTE *)(v3 + 142) = 7;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  v6 = (uint64_t **)(*v4 + 1576);
  v9 = v5;
  v7 = (llvm::PointerType *)llvm::FunctionType::get(v6, &v9, 1, 0);
  *(_QWORD *)(a1 + 176) = llvm::PointerType::get(v7, 0);
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

uint64_t sub_1C6041090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  llvm::GetElementPtrInst *v25;
  uint64_t *v26;
  llvm::StructType *v27;
  llvm::StructLayout *StructLayout;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 isOneValue;
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t ***v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  llvm::PointerType *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  char v48;
  char v49;
  char *v50;
  char *v51;
  llvm::Value *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  uint64_t **v65;
  llvm::PointerType *v66;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  llvm::Instruction *v71;
  llvm::UndefValue *v72;
  _DWORD *v73;
  char *v74;
  llvm::PointerType *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 **v85;
  int v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  uint64_t i;
  uint64_t v91;
  _BOOL4 v92;
  BOOL v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  char v120;
  llvm::AttributeList *v121;
  uint64_t *v124;
  unsigned __int8 *v125;
  void *v126;
  uint64_t v127;
  _BYTE v128[32];
  _QWORD v129[4];
  __int16 v130;
  char *v131;
  char *v132;
  llvm::GetElementPtrInst *v133;
  __int16 v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v126 = v128;
  v127 = 0x400000000;
  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 == a2 + 72)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_121;
  }
  v4 = (_QWORD *)a1;
  while (1)
  {
    v5 = v3 - 24;
    if (!v3)
      v5 = 0;
    v6 = *(_QWORD *)(v5 + 48);
    if (v6 != v5 + 40)
      break;
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == v2)
      goto LABEL_7;
  }
  v118 = 0;
  v7 = 0;
  v120 = 0;
  v124 = (uint64_t *)(a1 + 40);
  v121 = (llvm::AttributeList *)(a2 + 112);
  do
  {
    v8 = v6;
    v6 = *(_QWORD *)(v6 + 8);
    v9 = v3 - 24;
    if (!v3)
      v9 = 0;
    if (v6 == v9 + 40)
    {
      v17 = *(_QWORD *)(v3 + 8);
      v3 = v2;
      if (v17 != v2)
      {
        while (1)
        {
          v18 = v17 - 24;
          if (!v17)
            v18 = 0;
          v6 = *(_QWORD *)(v18 + 48);
          if (v6 != v18 + 40)
            break;
          v17 = *(_QWORD *)(v17 + 8);
          if (v17 == v2)
          {
            v3 = v2;
            goto LABEL_12;
          }
        }
        v3 = v17;
      }
    }
LABEL_12:
    v10 = v8 - 24;
    if (v8)
      v11 = v8 - 24;
    else
      v11 = 0;
    v12 = *(unsigned __int8 *)(v11 + 16) - 33;
    v13 = v12 > 0x33;
    v14 = (1 << v12) & 0x8000000000041;
    if (!v13 && v14 != 0)
    {
      v16 = *(_QWORD *)(v8 - 56);
      if (v16)
      {
        if (!*(_BYTE *)(v16 + 16) && *(_QWORD *)(v16 + 24) == *(_QWORD *)(v8 + 48))
        {
          switch(*(_DWORD *)(v16 + 36))
          {
            case 0x1E:
              v7 = 1;
              sub_1C6041DC4((uint64_t)v4, v10, 1);
              continue;
            case 0x1F:
              v41 = *(unsigned __int8 **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
              v42 = v4;
              v43 = (llvm::PointerType *)v4[2];
              v44 = llvm::PointerType::get(v43, 0);
              v42[11] = *(_QWORD *)(v11 + 40);
              v42[12] = v11 + 24;
              v45 = *(unsigned __int8 **)(v11 + 48);
              v131 = (char *)v45;
              if (v45)
              {
                llvm::MetadataTracking::track((uint64_t)&v131, v45, 2);
                v46 = (unsigned __int8 *)v131;
              }
              else
              {
                v46 = 0;
              }
              sub_1C4774EF4((uint64_t)v124, 0, (uint64_t)v46);
              if (v131)
                llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
              v134 = 257;
              v47 = sub_1C4773E38(v124, 49, v41, v44, (uint64_t)&v131);
              v130 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 56) + 40) + 272, (uint64_t)v43);
              v49 = v48;
              v50 = (char *)operator new(0x60uLL);
              v51 = v50;
              v52 = (llvm::Value *)(v50 + 32);
              *((_QWORD *)v50 + 2) = 0;
              *((_QWORD *)v50 + 3) = v50 + 32;
              v134 = 257;
              *((_QWORD *)v50 + 4) = v43;
              *((_QWORD *)v50 + 5) = 0;
              *((_WORD *)v50 + 24) = 60;
              *((_DWORD *)v50 + 13) = 1;
              *(_OWORD *)(v50 + 56) = 0u;
              *(_OWORD *)(v50 + 72) = 0u;
              *((_DWORD *)v50 + 22) = 0;
              *(_QWORD *)v50 = v47;
              *((_QWORD *)v50 + 1) = 0;
              if (v47)
              {
                v55 = *((_QWORD *)v47 + 1);
                v54 = v47 + 8;
                v53 = v55;
                *((_QWORD *)v50 + 1) = v55;
                if (v55)
                  *(_QWORD *)(v53 + 16) = v50 + 8;
                *((_QWORD *)v50 + 2) = v54;
                *v54 = v50;
              }
              *((_WORD *)v50 + 25) = 2 * (v49 & 0x3F);
              v50[92] = 1;
              llvm::Value::setName((uint64_t ***)v50 + 4, (uint64_t)&v131);
              v4 = (_QWORD *)a1;
              (*(void (**)(_QWORD, llvm::Value *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120), v52, v129, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
              v56 = *(unsigned int *)(a1 + 48);
              if (!(_DWORD)v56)
                goto LABEL_64;
              v83 = *(_QWORD *)(a1 + 40);
              v84 = v83 + 16 * v56;
              v85 = (unsigned __int8 **)(v51 + 80);
              break;
            case 0x20:
            case 0x21:
              if (!llvm::Constant::isOneValue(*(llvm::Constant **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32)))
                *(_QWORD *)(v8 + 40) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v8 + 40), **(uint64_t ***)(v8 - 24), -1, 24);
              goto LABEL_53;
            case 0x23:
              v39 = v127;
              if (v127 >= (unint64_t)HIDWORD(v127))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v128, v127 + 1, 8);
                v39 = v127;
              }
              *((_QWORD *)v126 + v39) = v11;
              LODWORD(v127) = v127 + 1;
              goto LABEL_53;
            case 0x24:
              sub_1C603FA70(v8 - 24);
              if (v40)
                goto LABEL_53;
              for (i = *(_QWORD *)(v8 - 16); i; i = *(_QWORD *)(i + 8))
              {
                v91 = *(_QWORD *)(i + 24);
                v92 = sub_1C6041E50(v91);
                if (v91)
                  v93 = !v92;
                else
                  v93 = 1;
                if (!v93)
                  *(_QWORD *)(v91 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v91 + 64), **(uint64_t ***)v91, -1, 24);
              }
              sub_1C63CECEC((llvm::Type ***)v11);
              v7 = 1;
              v118 = v11;
              continue;
            case 0x25:
            case 0x26:
            case 0x27:
              v7 = 1;
              *(_QWORD *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex(v121, **(uint64_t ***)a2, -1, "coroutine.presplit", 0x12uLL, "1", 1uLL);
              continue;
            case 0x28:
              if (!v4[23])
              {
                v61 = v4[13];
                v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 56) + 40);
                v119 = v62;
                v63 = sub_1C484358C(*(_QWORD *)v61 + 2040, 32, 3);
                *(_QWORD *)v63 = v61;
                *(_DWORD *)(v63 + 8) = 16;
                *(_QWORD *)(v63 + 20) = 0;
                *(_QWORD *)(v63 + 12) = 0;
                *(_DWORD *)(v63 + 28) = 0;
                llvm::StructType::setName(v63, "NoopCoro.Frame", 0xEuLL);
                v64 = (unsigned __int8 *)llvm::PointerType::get((llvm::PointerType *)v63, 0);
                v65 = (uint64_t **)(*(_QWORD *)v61 + 1576);
                v131 = (char *)v64;
                v66 = (llvm::PointerType *)llvm::FunctionType::get(v65, (uint64_t *)&v131, 1, 0);
                v131 = (char *)llvm::PointerType::get(v66, 0);
                v132 = v131;
                llvm::StructType::setBody(v63, (uint64_t)&v131, 2, 0);
                v131 = "NoopCoro.ResumeDestroy";
                v134 = 259;
                v67 = (char *)operator new(0x80uLL);
                *((_DWORD *)v67 + 7) = *((_DWORD *)v67 + 7) & 0x38000000 | 0x40000000;
                *(_QWORD *)v67 = 0;
                llvm::Function::Function((uint64_t *)v67 + 1, v66, 8, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v131, v62);
                *((_WORD *)v67 + 13) = *((_WORD *)v67 + 13) & 0xC00F | 0x80;
                v131 = "entry";
                v134 = 259;
                v68 = operator new();
                *(_QWORD *)v68 = *(_QWORD *)v61 + 1600;
                *(_QWORD *)(v68 + 8) = 0;
                v69 = *(_DWORD *)(v68 + 20) & 0xC0000000;
                *(_DWORD *)(v68 + 16) = 22;
                *(_DWORD *)(v68 + 20) = v69;
                *(_QWORD *)(v68 + 24) = 0;
                *(_QWORD *)(v68 + 32) = 0;
                *(_QWORD *)(v68 + 40) = v68 + 40;
                *(_QWORD *)(v68 + 48) = v68 + 40;
                *(_QWORD *)(v68 + 56) = 0;
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v67 + 80), (_QWORD *)v68);
                v70 = *((_QWORD *)v67 + 10);
                *(_QWORD *)(v68 + 32) = v67 + 80;
                *(_QWORD *)(v68 + 24) = v70;
                *(_QWORD *)(v70 + 8) = v68 + 24;
                *((_QWORD *)v67 + 10) = v68 + 24;
                llvm::Value::setName((uint64_t ***)v68, (uint64_t)&v131);
                v71 = (llvm::Instruction *)operator new(0x40uLL);
                *((_DWORD *)v71 + 5) &= 0x38000000u;
                llvm::Instruction::Instruction(v71, (llvm::Type *)(*(_QWORD *)v61 + 1576), 1, v71, 0, (llvm::BasicBlock *)v68);
                v129[0] = v67 + 8;
                v129[1] = v67 + 8;
                v4 = (_QWORD *)a1;
                v72 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)v63, (llvm::Type *)v129, 2);
                v73 = operator new(0x78uLL);
                v74 = (char *)(v73 + 8);
                v73[13] = v73[13] & 0x38000000 | 1;
                *(_QWORD *)v73 = 0;
                *((_QWORD *)v73 + 1) = 0;
                *((_QWORD *)v73 + 2) = 0;
                *((_QWORD *)v73 + 3) = v73 + 8;
                v75 = *(llvm::PointerType **)v72;
                v131 = "NoopCoro.Frame.Const";
                v134 = 259;
                llvm::GlobalVariable::GlobalVariable((uint64_t)(v73 + 8), v119, v75, 1, 8, (uint64_t)v72, (uint64_t)&v131, 0, 0, 0, 0);
                *(_QWORD *)(a1 + 184) = v74;
              }
              v4[11] = *(_QWORD *)(v11 + 40);
              v4[12] = v11 + 24;
              v76 = *(unsigned __int8 **)(v11 + 48);
              v131 = (char *)v76;
              if (v76)
              {
                llvm::MetadataTracking::track((uint64_t)&v131, v76, 2);
                v77 = (unsigned __int8 *)v131;
              }
              else
              {
                v77 = 0;
              }
              sub_1C4774EF4((uint64_t)v124, 0, (uint64_t)v77);
              if (v131)
                llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
              v78 = (unsigned __int8 *)v4[23];
              v79 = v4[2];
              v134 = 257;
              v80 = sub_1C4773E38(v124, 49, v78, v79, (uint64_t)&v131);
              v7 = 1;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, (llvm::Value *)v80, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v11 + 40) + 40, (uint64_t ***)v11);
              v81 = *(_QWORD *)(v11 + 24);
              v82 = *(_QWORD **)(v11 + 32);
              *v82 = v81;
              *(_QWORD *)(v81 + 8) = v82;
              *(_QWORD *)(v11 + 24) = 0;
              *(_QWORD *)(v11 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v11);
              continue;
            case 0x2B:
              v19 = v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF);
              v20 = *(_QWORD *)(v19 + 32);
              v21 = (unint64_t *)(v20 + 24);
              if (*(_DWORD *)(v20 + 32) >= 0x41u)
                v21 = (unint64_t *)*v21;
              v22 = *(_QWORD **)v19;
              v23 = *v21;
              v24 = __clz(*v21) ^ 0x3F;
              v25 = (llvm::GetElementPtrInst *)(*(_QWORD *)v4[13] + 1912);
              v26 = (uint64_t *)v4[1];
              v131 = (char *)v4[22];
              v132 = v131;
              v133 = v25;
              v27 = (llvm::StructType *)llvm::StructType::get(v26, (uint64_t)&v131, 3, 0);
              StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*v4 + 272), v27);
              v29 = 1 << v24;
              if (!v23)
                v29 = 1;
              v30 = (v29 + *((_QWORD *)StructLayout + 4) - 1) & -v29;
              isOneValue = llvm::Constant::isOneValue(*(llvm::Constant **)(v11
                                                                         - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)
                                                                         + 64));
              v32 = 0;
              v33 = v4;
              if (isOneValue)
                v34 = -v30;
              else
                LODWORD(v34) = v30;
              v33[11] = *(_QWORD *)(v11 + 40);
              v33[12] = v11 + 24;
              v35 = *(unsigned __int8 **)(v11 + 48);
              v131 = (char *)v35;
              if (v35)
              {
                llvm::MetadataTracking::track((uint64_t)&v131, v35, 2);
                v32 = (unsigned __int8 *)v131;
              }
              sub_1C4774EF4((uint64_t)v124, 0, (uint64_t)v32);
              if (v131)
                llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
              v134 = 257;
              v36 = sub_1C4772C18(v124, v25, v22, v34, (uint64_t)&v131);
              v7 = 1;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, (llvm::Value *)v36, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v11 + 40) + 40, (uint64_t ***)v11);
              v37 = *(_QWORD *)(v11 + 24);
              v38 = *(_QWORD **)(v11 + 32);
              *v38 = v37;
              *(_QWORD *)(v37 + 8) = v38;
              *(_QWORD *)(v11 + 24) = 0;
              *(_QWORD *)(v11 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v11);
              v4 = (_QWORD *)a1;
              continue;
            case 0x2C:
              sub_1C6041DC4((uint64_t)v4, v10, 0);
              goto LABEL_53;
            case 0x30:
              if (llvm::Constant::isOneValue(*(llvm::Constant **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32)))
                *(_QWORD *)(v8 + 40) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v8 + 40), **(uint64_t ***)(v8 - 24), -1, 24);
              v120 = 1;
LABEL_53:
              v7 = 1;
              continue;
            default:
              continue;
          }
          while (1)
          {
            v86 = *(_DWORD *)v83;
            v87 = *(unsigned __int8 **)(v83 + 8);
            if (v87)
            {
              if (!v86)
              {
                v125 = *(unsigned __int8 **)(v83 + 8);
                llvm::MetadataTracking::track((uint64_t)&v125, v87, 2);
                v88 = *v85;
                goto LABEL_85;
              }
            }
            else
            {
              v88 = *v85;
              if (!*v85 && (v51[55] & 0x20) == 0)
                goto LABEL_82;
              if (!v86)
              {
                v125 = 0;
LABEL_85:
                if (v88)
                  llvm::MetadataTracking::untrack((uint64_t)(v51 + 80), v88);
                v89 = v125;
                *v85 = v125;
                if (v89)
                  llvm::MetadataTracking::retrack((uint64_t)&v125, v89, (uint64_t)(v51 + 80));
                goto LABEL_82;
              }
            }
            llvm::Value::setMetadata(v52, *(_DWORD *)v83, (llvm::MDNode *)v87);
LABEL_82:
            v83 += 16;
            v4 = (_QWORD *)a1;
            if (v83 == v84)
            {
LABEL_64:
              v57 = v4[4];
              v134 = 257;
              v58 = (llvm::Value *)sub_1C4774B48((uint64_t)v124, 32, (uint64_t)v52, v57, (uint64_t)&v131);
              v7 = 1;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v58, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v11 + 40) + 40, (uint64_t ***)v11);
              v59 = *(_QWORD *)(v11 + 24);
              v60 = *(_QWORD **)(v11 + 32);
              *v60 = v59;
              *(_QWORD *)(v59 + 8) = v60;
              *(_QWORD *)(v11 + 24) = 0;
              *(_QWORD *)(v11 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v11);
              break;
            }
          }
        }
      }
    }
  }
  while (v3 != v2);
  if (v118 && (_DWORD)v127)
  {
    v94 = (char *)v126;
    v95 = (_QWORD *)(v118 + 8);
    v96 = 8 * v127;
    do
    {
      v97 = *(_QWORD *)v94;
      v98 = *(_DWORD *)(*(_QWORD *)v94 + 20) & 0x7FFFFFF;
      v99 = -v98;
      v100 = (_QWORD *)(*(_QWORD *)v94 - 32 * v98);
      if (*v100)
      {
        v101 = v97 + 32 * v99;
        v103 = *(_QWORD **)(v101 + 16);
        v102 = (_QWORD *)(v101 + 16);
        *v103 = *(v102 - 1);
        v104 = *(v102 - 1);
        if (v104)
          *(_QWORD *)(v104 + 16) = *v102;
      }
      *v100 = v118;
      v105 = *(_QWORD *)(v118 + 8);
      v106 = v97 + 32 * v99;
      *(_QWORD *)(v106 + 8) = v105;
      if (v105)
        *(_QWORD *)(v105 + 16) = v106 + 8;
      *(_QWORD *)(v106 + 16) = v95;
      *v95 = v100;
      v94 += 8;
      v96 -= 8;
    }
    while (v96);
  }
  if ((v120 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 18) & 1) == 0)
    {
      v107 = *(_QWORD *)(a2 + 88);
      goto LABEL_111;
    }
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
    v107 = *(_QWORD *)(a2 + 88);
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v108 = *(_QWORD *)(a2 + 88);
    }
    else
    {
LABEL_111:
      v108 = v107;
    }
    v109 = v108 + 40 * *(_QWORD *)(a2 + 96);
    while (v107 != v109)
    {
      if (*(_BYTE *)(*(_QWORD *)v107 + 8) == 15)
      {
        v111 = *(_QWORD *)(v107 + 24);
        v114 = *(_QWORD *)(v111 + 112);
        v112 = (uint64_t *)(v111 + 112);
        v113 = v114;
        if (v114)
        {
          v115 = *(_DWORD *)(v107 + 32);
          if ((v115 + 2) < *(_DWORD *)(v113 + 8))
          {
            v116 = *(_QWORD *)(v113 + 8 * (v115 + 2) + 40);
            if (v116)
            {
              if ((*(_BYTE *)(v116 + 14) & 8) != 0)
              {
                v110 = *(_QWORD *)(v107 + 24);
                *(_QWORD *)(v110 + 112) = llvm::AttributeList::removeAttributeAtIndex(v112, **(uint64_t ***)v110, v115 + 1, 19);
              }
            }
          }
        }
      }
      v107 += 40;
    }
  }
LABEL_121:
  if (v126 != v128)
    free(v126);
  return v7 & 1;
}

uint64_t sub_1C6041C68(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower early coroutine intrinsics";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "coro-early";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7690;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6041E9C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C6041CF8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7690;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81AC508;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7688);
  if (v3 != -1)
  {
    v7[0] = sub_1C6041C68;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7688, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *sub_1C6041DC4(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)sub_1C63CE6A8(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), a3, a2);
  v5 = (_QWORD *)(a2 - 32);
  if (*(_QWORD *)(a2 - 32))
  {
    **(_QWORD **)(a2 - 16) = *(_QWORD *)(a2 - 24);
    v6 = *(_QWORD *)(a2 - 24);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 - 16);
  }
  *v5 = result;
  if (result)
  {
    v8 = result[1];
    ++result;
    v7 = v8;
    *(_QWORD *)(a2 - 24) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = a2 - 24;
    *(_QWORD *)(a2 - 16) = result;
    *result = v5;
  }
  *(_WORD *)(a2 + 18) = *(_WORD *)(a2 + 18) & 0xF003 | 0x20;
  return result;
}

BOOL sub_1C6041E50(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 29;
}

uint64_t sub_1C6041E9C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6041CF8(v0);
}

void sub_1C6041EC4(llvm::Pass *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E81AC508;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56))
      free(v3);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C6041F3C(llvm::Pass *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E81AC508;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56))
      free(v3);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C6041FC8()
{
  return "Lower early coroutine intrinsics";
}

uint64_t sub_1C6041FD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD v9[13];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9[10] = xmmword_1E81AC4C8;
  v9[11] = *(_OWORD *)&off_1E81AC4D8;
  v9[12] = xmmword_1E81AC4E8;
  v9[6] = xmmword_1E81AC488;
  v9[7] = *(_OWORD *)&off_1E81AC498;
  v9[8] = xmmword_1E81AC4A8;
  v9[9] = *(_OWORD *)&off_1E81AC4B8;
  v9[2] = xmmword_1E81AC448;
  v9[3] = *(_OWORD *)&off_1E81AC458;
  v9[4] = xmmword_1E81AC468;
  v9[5] = *(_OWORD *)&off_1E81AC478;
  v9[0] = xmmword_1E81AC428;
  v9[1] = *(_OWORD *)&off_1E81AC438;
  if (sub_1C603E040((uint64_t)a2, (uint64_t)v9, 13))
  {
    v4 = operator new();
    v5 = sub_1C6040FD8(v4, a2);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    if (v6)
    {
      v7 = *(void **)(v6 + 40);
      if (v7 != (void *)(v6 + 56))
        free(v7);
      MEMORY[0x1CAA32FC0](v6, 0x10E0C40CB4F0DF4);
    }
  }
  return 0;
}

void sub_1C60420E8(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C60420F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return sub_1C6041090(result, a2);
  return result;
}

void *sub_1C6042100(uint64_t a1, uint64_t a2)
{
  void *v4;
  llvm::SmallPtrSetImplBase *v5;
  void *result;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  int v23;
  unsigned int v24;
  void *v25;

  v5 = (llvm::SmallPtrSetImplBase *)(a1 + 208);
  v4 = *(void **)(a1 + 208);
  *(_DWORD *)(a1 + 48) = 0;
  result = *(void **)(a1 + 216);
  if (result != v4)
  {
    v20 = *(unsigned int *)(a1 + 224);
    if (v20 >= 0x21 && 4 * (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232)) < v20)
    {
      free(result);
      v22 = *(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232);
      v23 = 1 << (33 - __clz(v22 - 1));
      *(_DWORD *)(a1 + 228) = 0;
      *(_DWORD *)(a1 + 232) = 0;
      if (v22 <= 0x10)
        v24 = 32;
      else
        v24 = v23;
      *(_DWORD *)(a1 + 224) = v24;
      v25 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
      if (!v25)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(a1 + 216) = v25;
      result = memset(v25, 255, 8 * *(unsigned int *)(a1 + 224));
      goto LABEL_3;
    }
    result = memset(result, 255, 8 * v20);
  }
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = 0;
LABEL_3:
  v7 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); i != v7; i = *(_QWORD *)(i + 8))
  {
    v9 = i - 24;
    if (!i)
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 != v9 + 40)
    {
      while (1)
      {
        if (v10)
          v11 = v10 - 24;
        else
          v11 = 0;
        v12 = sub_1C6043434(v11);
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        if (v10)
        {
          if (v12)
          {
            sub_1C603FA70(v13);
            if (v14)
            {
              if (llvm::Value::stripPointerCasts(*(llvm::Value **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 64)) != *(llvm::Value **)(*(_QWORD *)(v13 + 40) + 56))
              {
                v15 = *(unsigned int *)(a1 + 48);
                if (v15 >= *(unsigned int *)(a1 + 52))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5 - 168, a1 + 56, v15 + 1, 8);
                  v15 = *(unsigned int *)(a1 + 48);
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v15) = v13;
                ++*(_DWORD *)(a1 + 48);
              }
            }
          }
        }
        result = (void *)sub_1C6043480(v11);
        if (v10)
        {
          if ((_DWORD)result)
          {
            v16 = *(_QWORD *)(v11 + 8);
            if (v16)
            {
              if (!*(_QWORD *)(v16 + 8))
              {
                v17 = *(_QWORD *)(v16 + 24);
                if (*(_BYTE *)(v17 + 16) == 31 && (*(_DWORD *)(v17 + 20) & 0x7FFFFFE) == 6)
                  result = sub_1C4774094(v5, v17);
              }
            }
          }
        }
        v10 = *(_QWORD *)(v10 + 8);
        v18 = i - 24;
        if (!i)
          v18 = 0;
        if (v10 == v18 + 40)
          break;
LABEL_36:
        if (i == v7)
          return result;
      }
      while (1)
      {
        i = *(_QWORD *)(i + 8);
        if (i == v7)
          return result;
        v19 = i - 24;
        if (!i)
          v19 = 0;
        v10 = *(_QWORD *)(v19 + 48);
        if (v10 != v19 + 40)
          goto LABEL_36;
      }
    }
  }
  return result;
}

void sub_1C6042360(uint64_t a1, _QWORD *a2, uint64_t a3, llvm::DominatorTree *a4)
{
  unsigned int *v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  unint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _DWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  llvm::UndefValue *v35;
  llvm::UndefValue *v36;
  llvm::UndefValue *Value;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const llvm::Value **v55;
  const llvm::Value **v56;
  const llvm::Value *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  const llvm::Instruction *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::Instruction *v102;
  llvm::Instruction *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  char v108;
  llvm::UndefValue *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  llvm::AttributeList *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  llvm::Type *v128;
  const llvm::APInt *v129;
  unsigned int ParamAlignment;
  unsigned __int8 v131;
  uint64_t ***v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t j;
  uint64_t v138;
  uint64_t v139;
  llvm::Value *v140;
  uint64_t v141;
  llvm::ValueAsMetadata **v142;
  uint64_t v143;
  llvm::ValueAsMetadata *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  llvm::PointerType *v148;
  llvm::PointerType *v149;
  _DWORD *v150;
  llvm::Type *v151;
  _DWORD *v152;
  llvm::Value *v153;
  uint64_t v154;
  uint64_t v155;
  llvm::ValueAsMetadata **v156;
  uint64_t v157;
  llvm::ValueAsMetadata *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t k;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  uint64_t v175;
  llvm::ConstantInt *v176;
  llvm::ValueAsMetadata ***v177;
  llvm::UndefValue *v179;
  llvm::ValueAsMetadata ***v180;
  _DWORD *v181;
  _QWORD *v182;
  _DWORD *v183;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  int v189;
  _BYTE v190[64];
  char *v191;
  char *v192;
  uint64_t v193;
  int v194;
  _BYTE v195[64];
  const char *v196;
  uint64_t v197;
  __int128 v198;
  _OWORD v199[16];
  void *v200;
  uint64_t v201;
  _QWORD v202[34];

  v202[32] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 144) = 0;
  v6 = (unsigned int *)(a1 + 144);
  v7 = (_QWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 96) = 0;
  v8 = (unsigned int *)(a1 + 96);
  v9 = a1 + 112;
  *(_DWORD *)(a1 + 120) = 0;
  v183 = (_DWORD *)(a1 + 120);
  v10 = a1 + 136;
  v185 = a1 + 184;
  sub_1C63CEF0C(a1 + 184);
  v182 = a2;
  for (i = a2[1]; i; i = *(_QWORD *)(i + 8))
  {
    v12 = *(_QWORD *)(i + 24);
    v13 = sub_1C6041E50(v12);
    if (v12)
      v14 = !v13;
    else
      v14 = 1;
    if (v14)
    {
      v15 = sub_1C6043668(v12);
      if (v12)
        v16 = !v15;
      else
        v16 = 1;
      if (v16)
        continue;
      v17 = *(unsigned int *)(a1 + 120);
      if (v17 >= *(unsigned int *)(a1 + 124))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, a1 + 128, v17 + 1, 8);
        v19 = v183;
        v18 = (_QWORD *)v9;
        goto LABEL_20;
      }
      v18 = (_QWORD *)v9;
      v19 = v183;
    }
    else
    {
      v17 = *(unsigned int *)(a1 + 96);
      if (v17 >= *(unsigned int *)(a1 + 100))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, a1 + 104, v17 + 1, 8);
        v19 = v8;
        v18 = v7;
LABEL_20:
        v17 = *v19;
        goto LABEL_15;
      }
      v18 = v7;
      v19 = v8;
    }
LABEL_15:
    *(_QWORD *)(*v18 + 8 * v17) = v12;
    ++*v19;
  }
  v177 = (llvm::ValueAsMetadata ***)v9;
  v180 = (llvm::ValueAsMetadata ***)v7;
  v181 = v8;
  v20 = *v8;
  if ((_DWORD)v20)
  {
    v21 = (uint64_t *)*v7;
    v22 = *v7 + 8 * v20;
    while (1)
    {
      v196 = (const char *)*v21;
      v23 = *((_QWORD *)v196 + 1);
      if (v23)
        break;
LABEL_38:
      if (++v21 == (uint64_t *)v22)
        goto LABEL_39;
    }
    while (1)
    {
      v24 = *(_QWORD *)(v23 + 24);
      v25 = sub_1C60436B4(v24);
      if (v24)
        v26 = !v25;
      else
        v26 = 1;
      if (v26)
        goto LABEL_37;
      v27 = *(_QWORD *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) + 32);
      v28 = *(_DWORD *)(v27 + 32);
      if (v28 > 0x40)
      {
        if (!**(_DWORD **)(v27 + 24))
        {
LABEL_33:
          v31 = *(unsigned int *)(a1 + 144);
          if (v31 >= *(unsigned int *)(a1 + 148))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v10, a1 + 152, v31 + 1, 8);
            v31 = *v6;
          }
          v30 = (_QWORD *)v10;
          v32 = v6;
          goto LABEL_36;
        }
      }
      else if (!((uint64_t)(*(_QWORD *)(v27 + 24) << -(char)v28) >> -(char)v28))
      {
        goto LABEL_33;
      }
      v29 = sub_1C61AA364(v185, (uint64_t *)&v196);
      v30 = v29 + 1;
      v32 = v29 + 2;
      v31 = *((unsigned int *)v29 + 4);
      if (v31 >= *((unsigned int *)v29 + 5))
      {
        v33 = v29;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v29 + 1), (uint64_t)(v29 + 3), v31 + 1, 8);
        v31 = *((unsigned int *)v33 + 4);
      }
LABEL_36:
      *(_QWORD *)(*v30 + 8 * v31) = v24;
      ++*v32;
LABEL_37:
      v23 = *(_QWORD *)(v23 + 8);
      if (!v23)
        goto LABEL_38;
    }
  }
LABEL_39:
  v34 = (uint64_t)v182;
  sub_1C603FA70((uint64_t)v182);
  v36 = v35;
  LODWORD(v196) = 0;
  Value = llvm::ConstantExpr::getExtractValue(v35, (unsigned int *)&v196, 1, 0);
  sub_1C60434CC(Value, v10);
  if (!*v183)
  {
    v51 = 0;
    v52 = 1;
    goto LABEL_185;
  }
  v38 = *(_QWORD *)(v182[5] + 56);
  v191 = v195;
  v192 = v195;
  v193 = 8;
  v194 = 0;
  v39 = v38 + 72;
  v40 = *(_QWORD *)(v38 + 80);
  if (v40 != v38 + 72)
  {
    do
    {
      if (v40)
        v41 = v40 - 24;
      else
        v41 = 0;
      v42 = *(_QWORD *)(v41 + 40);
      if (v42 == v41 + 40)
      {
        v44 = 0;
      }
      else
      {
        if (v42)
          v43 = v42 - 24;
        else
          v43 = 0;
        if (*(unsigned __int8 *)(v43 + 16) - 29 >= 0xB)
          v44 = 0;
        else
          v44 = v43;
      }
      v45 = *(unsigned __int8 *)(v44 + 16);
      if (v45 != 30)
        __asm { BR              X11 }
      v40 = *(_QWORD *)(v40 + 8);
    }
    while (v40 != v39);
  }
  v179 = Value;
  v186 = v190;
  v187 = v190;
  v188 = 8;
  v189 = 0;
  v46 = *(_QWORD *)(a1 + 184);
  v47 = *(unsigned int *)(a1 + 200);
  v48 = v46 + 56 * v47;
  if (*(_DWORD *)(a1 + 192))
  {
    if ((_DWORD)v47)
    {
      v49 = 56 * v47;
      v50 = *(_QWORD *)(a1 + 184);
      while ((*(_QWORD *)v50 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v50 += 56;
        v49 -= 56;
        if (!v49)
          goto LABEL_61;
      }
    }
    else
    {
      v50 = *(_QWORD *)(a1 + 184);
    }
  }
  else
  {
LABEL_61:
    v50 = v46 + 56 * v47;
  }
  v53 = v46 + 56 * v47;
  if (v50 == v53)
  {
    v51 = *v181 == 0;
    v34 = (uint64_t)v182;
    Value = v179;
    goto LABEL_180;
  }
  do
  {
    v54 = *(unsigned int *)(v50 + 16);
    if ((_DWORD)v54)
    {
      v55 = *(const llvm::Value ***)(v50 + 8);
      v56 = &v55[v54];
      while (1)
      {
        v57 = *v55;
        v58 = v192 == v191 ? (uint64_t *)((char *)&v193 + 4) : &v193;
        v59 = *(unsigned int *)v58;
        if ((_DWORD)v59)
        {
          v60 = 8 * v59;
          v61 = (unint64_t *)v192;
          while (*v61 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v61;
            v60 -= 8;
            if (!v60)
              goto LABEL_92;
          }
        }
        else
        {
          v61 = (unint64_t *)v192;
        }
        v62 = &v192[8 * v59];
        if (v61 == (unint64_t *)v62)
          break;
        v63 = *v61;
LABEL_78:
        v64 = *(_QWORD *)(v63 + 40);
        if (v64 == v63 + 40)
        {
          v66 = 0;
        }
        else
        {
          v65 = (unsigned __int8 *)(v64 - 24);
          if (!v64)
            v65 = 0;
          if (v65[16] - 29 >= 0xB)
            v66 = 0;
          else
            v66 = (const llvm::Instruction *)v65;
        }
        if (llvm::DominatorTree::dominates(a4, v57, v66))
        {
          v67 = v61 + 1;
          while (v67 != (unint64_t *)v62)
          {
            v68 = *v67++;
            v63 = v68;
            if (v68 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v61 = v67 - 1;
              goto LABEL_78;
            }
          }
          break;
        }
        if (++v55 == v56)
          goto LABEL_93;
      }
LABEL_92:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v186, *(_QWORD *)v50);
    }
LABEL_93:
    v69 = (char *)sub_1C477672C((uint64_t)&v186, *(_QWORD *)v50);
    if (v187 == v186)
      v70 = (uint64_t *)((char *)&v188 + 4);
    else
      v70 = &v188;
    if (v69 == &v187[8 * *(unsigned int *)v70])
    {
      v72 = *(_QWORD *)v50;
      v196 = 0;
      if (sub_1C61A45F4(*(_QWORD *)(a1 + 184), *(_DWORD *)(a1 + 200), v72, &v196))
        v73 = (uint64_t)v196;
      else
        v73 = *(_QWORD *)(a1 + 184) + 56 * *(unsigned int *)(a1 + 200);
      v74 = *(_DWORD *)(v73 + 16);
      v200 = v202;
      v202[0] = *(_QWORD *)(v72 + 40);
      v201 = 0x2000000001;
      v196 = (const char *)v199;
      v197 = (uint64_t)v199;
      *(_QWORD *)&v198 = 32;
      DWORD2(v198) = 0;
      v75 = *(unsigned int *)(v73 + 16);
      if ((_DWORD)v75)
      {
        v76 = *(uint64_t **)(v73 + 8);
        v77 = 8 * v75;
        do
        {
          v78 = *v76++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v196, *(_QWORD *)(v78 + 40));
          v77 -= 8;
        }
        while (v77);
        v79 = v201;
      }
      else
      {
        v79 = 1;
      }
      v80 = 32 * v74 + 32;
      while (1)
      {
        while (1)
        {
          v81 = *((_QWORD *)v200 + v79 - 1);
          LODWORD(v201) = v79 - 1;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v196, v81);
          if (!v82)
            goto LABEL_159;
          v83 = (char *)sub_1C477672C((uint64_t)&v191, v81);
          if (v192 == v191)
            v84 = (uint64_t *)((char *)&v193 + 4);
          else
            v84 = &v193;
          if (v83 != &v192[8 * *(unsigned int *)v84] || (--v80, !v80))
          {
            v108 = 1;
LABEL_170:
            if ((const char *)v197 != v196)
              free((void *)v197);
            if (v200 != v202)
              free(v200);
            if ((v108 & 1) == 0)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v186, *(_QWORD *)v50);
            goto LABEL_97;
          }
          v87 = *(_QWORD **)(v81 + 40);
          v86 = (_QWORD *)(v81 + 40);
          v85 = v87;
          if (v87 == v86)
          {
            v89 = 0;
          }
          else
          {
            v88 = v85 - 3;
            if (!v85)
              v88 = 0;
            v89 = *((unsigned __int8 *)v88 + 16) - 29 >= 0xB ? 0 : (uint64_t)v88;
          }
          if (*(_BYTE *)(v89 + 16) == 31)
            break;
LABEL_143:
          if (v85 == v86)
          {
            v101 = 0;
            v102 = 0;
LABEL_157:
            v107 = 0;
          }
          else
          {
            v101 = (uint64_t)(v85 - 3);
            if (v85)
              v103 = (llvm::Instruction *)(v85 - 3);
            else
              v103 = 0;
            v104 = *((unsigned __int8 *)v103 + 16);
            v105 = v104 - 29;
            if ((v104 - 29) >= 0xB)
              v102 = 0;
            else
              v102 = v103;
            if (v104 != 30)
            {
              v106 = 0;
              switch(v105)
              {
                case 0:
                case 5:
                case 6:
                  goto LABEL_155;
                case 1:
                  __break(1u);
                  break;
                case 2:
                  v106 = (*((_DWORD *)v103 + 5) >> 1) & 0x3FFFFFF;
                  goto LABEL_155;
                case 3:
                case 9:
                  v106 = (*((_DWORD *)v103 + 5) & 0x7FFFFFF) - 1;
                  goto LABEL_155;
                case 4:
                  v106 = 2;
                  goto LABEL_155;
                case 7:
                  v106 = *((_WORD *)v103 + 9) & 1;
                  goto LABEL_155;
                case 8:
                  v106 = 1;
                  goto LABEL_155;
                case 10:
                  v106 = *((_DWORD *)v103 + 20) + 1;
                  goto LABEL_155;
                default:
                  v101 = 0;
                  goto LABEL_157;
              }
              return;
            }
            if ((*((_DWORD *)v103 + 5) & 0x7FFFFFF) == 3)
              v106 = 2;
            else
              v106 = 1;
LABEL_155:
            v107 = v106;
          }
          sub_1C61AAE24((unsigned int *)&v200, v102, 0, v101, v107);
LABEL_159:
          v79 = v201;
          if (!(_DWORD)v201)
            goto LABEL_169;
        }
        v90 = sub_1C477672C(a1 + 208, v89);
        v91 = *(_QWORD *)(a1 + 216);
        v92 = 224;
        if (v91 == *(_QWORD *)(a1 + 208))
          v92 = 228;
        if (v90 == (_QWORD *)(v91 + 8 * *(unsigned int *)(a1 + v92)))
        {
          v85 = (_QWORD *)*v86;
          goto LABEL_143;
        }
        v93 = *(_DWORD *)(v89 + 20);
        if ((v93 & 0x40000000) != 0)
          v94 = *(_QWORD *)(v89 - 8);
        else
          v94 = v89 - 32 * (v93 & 0x7FFFFFF);
        v95 = *(_QWORD *)(v94 + 96);
        v96 = v201;
        if (v201 >= (unint64_t)HIDWORD(v201))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v201 + 1, 8);
          v96 = v201;
        }
        *((_QWORD *)v200 + v96) = v95;
        v97 = (v201 + 1);
        LODWORD(v201) = v201 + 1;
        v98 = *(_DWORD *)(v89 + 20);
        if ((v98 & 0x40000000) != 0)
          v99 = *(_QWORD *)(v89 - 8);
        else
          v99 = v89 - 32 * (v98 & 0x7FFFFFF);
        v100 = *(_QWORD *)(v99 + 160);
        if (v97 >= HIDWORD(v201))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v97 + 1, 8);
          LODWORD(v97) = v201;
        }
        *((_QWORD *)v200 + v97) = v100;
        v79 = v201 + 1;
        LODWORD(v201) = v79;
        if (!v79)
        {
LABEL_169:
          v108 = 0;
          goto LABEL_170;
        }
      }
    }
LABEL_97:
    v71 = v50 + 56;
    v50 = v48;
    if (v71 != v48)
    {
      v50 = v71;
      while ((*(_QWORD *)v50 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v50 += 56;
        if (v50 == v48)
        {
          v50 = v48;
          break;
        }
      }
    }
  }
  while (v50 != v53);
  v51 = *v181 == HIDWORD(v188) - v189;
  Value = v179;
  if (v187 != v186)
    free(v187);
  v34 = (uint64_t)v182;
LABEL_180:
  if (v192 != v191)
    free(v192);
  if (v51)
    v52 = 2;
  else
    v52 = 1;
LABEL_185:
  LODWORD(v196) = v52;
  v109 = llvm::ConstantExpr::getExtractValue(v36, (unsigned int *)&v196, 1, 0);
  v110 = *(_QWORD *)(a1 + 184);
  v111 = *(unsigned int *)(a1 + 200);
  v112 = (_QWORD *)(v110 + 56 * v111);
  if (*(_DWORD *)(a1 + 192))
  {
    if ((_DWORD)v111)
    {
      v113 = 56 * v111;
      v114 = *(_QWORD **)(a1 + 184);
      while ((*v114 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v114 += 7;
        v113 -= 56;
        if (!v113)
          goto LABEL_190;
      }
    }
    else
    {
      v114 = *(_QWORD **)(a1 + 184);
    }
  }
  else
  {
LABEL_190:
    v114 = (_QWORD *)(v110 + 56 * v111);
  }
  v115 = (_QWORD *)(v110 + 56 * v111);
LABEL_193:
  while (v114 != v115)
  {
    sub_1C60434CC(v109, (uint64_t)(v114 + 1));
    v116 = v114 + 7;
    v114 = v112;
    if (v116 != v112)
    {
      v114 = v116;
      while ((*v114 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v114 += 7;
        if (v114 == v112)
        {
          v114 = v112;
          goto LABEL_193;
        }
      }
    }
  }
  if (v51)
  {
    v119 = *((_QWORD *)Value + 14);
    v118 = (llvm::UndefValue *)((char *)Value + 112);
    v117 = v119;
    if (v119)
    {
      if (*(_DWORD *)(v117 + 8) >= 3u)
      {
        v120 = *(_QWORD *)(v117 + 56);
        if (v120)
        {
          if ((*(_BYTE *)(v120 + 21) & 0x10) != 0)
          {
            v121 = (_QWORD *)(v120 + 48);
            v122 = 8 * *(unsigned int *)(v120 + 8) - 8 * *(unsigned int *)(v120 + 32);
            if (v122)
            {
              v123 = v122 >> 3;
              do
              {
                v124 = v123 >> 1;
                v125 = &v121[v123 >> 1];
                v126 = *v125;
                if (*v125)
                  LODWORD(v126) = *(_DWORD *)(v126 + 12);
                v127 = v125 + 1;
                v123 += ~v124;
                if ((int)v126 < 76)
                  v121 = v127;
                else
                  v123 = v124;
              }
              while (v123);
            }
            v128 = *(llvm::Type **)(*v121 + 16);
            if (v128)
            {
              ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment(v118, 0);
              if (ParamAlignment <= 0x100)
                v131 = 0;
              else
                v131 = ParamAlignment;
              v132 = *(uint64_t ****)(*(_QWORD *)(v34 + 40) + 56);
              v133 = **v132;
              v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 56) + 80);
              v135 = v134 - 24;
              if (!v134)
                v135 = 0;
              v136 = v135 + 40;
              for (j = *(_QWORD *)(v135 + 48); j != v136; j = *(_QWORD *)(j + 8))
              {
                v34 = j - 24;
                if (j)
                  v138 = j - 24;
                else
                  v138 = 0;
                if (*(_BYTE *)(v138 + 16) != 59)
                  break;
              }
              v139 = *v133;
              v140 = *(llvm::Value **)(*v133 + 1568);
              if (!v140)
              {
                v176 = *(llvm::ConstantInt **)(v139 + 1888);
                LODWORD(v197) = *(_DWORD *)(v139 + 1896) >> 8;
                if (v197 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v196, 0, 0);
                else
                  v196 = 0;
                v140 = llvm::ConstantInt::get(v176, (llvm::LLVMContext *)&v196, v129);
                if (v197 >= 0x41 && v196)
                  MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
                *(_QWORD *)(v139 + 1568) = v140;
              }
              v141 = *v183;
              if ((_DWORD)v141)
              {
                v142 = *v177;
                v143 = 8 * v141;
                do
                {
                  v144 = *v142++;
                  llvm::Value::doRAUW(v144, v140, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v144 + 5) + 40, (uint64_t ***)v144);
                  v145 = *((_QWORD *)v144 + 3);
                  v146 = (_QWORD *)*((_QWORD *)v144 + 4);
                  *v146 = v145;
                  *(_QWORD *)(v145 + 8) = v146;
                  *((_QWORD *)v144 + 3) = 0;
                  *((_QWORD *)v144 + 4) = 0;
                  llvm::Value::deleteValue(v144);
                  v143 -= 8;
                }
                while (v143);
              }
              v147 = (uint64_t *)v132[5];
              llvm::ArrayType::get((llvm::ArrayType *)(*v133 + 1912), v128);
              v149 = v148;
              v150 = operator new(0x68uLL);
              v150[13] = v150[13] & 0x38000000 | 1;
              *(_QWORD *)v150 = 0;
              *((_QWORD *)v150 + 1) = 0;
              *((_QWORD *)v150 + 2) = 0;
              *((_QWORD *)v150 + 3) = v150 + 8;
              v151 = (llvm::Type *)*((unsigned int *)v147 + 69);
              LOWORD(v199[0]) = 257;
              llvm::AllocaInst::AllocaInst((uint64_t)(v150 + 8), v149, v151, 0, (uint64_t)&v196, v34);
              *((_WORD *)v150 + 25) = *((_WORD *)v150 + 25) & 0xFFC0 | v131;
              v152 = operator new(0x60uLL);
              v153 = (llvm::Value *)(v152 + 8);
              v152[13] = v152[13] & 0x38000000 | 1;
              *(_QWORD *)v152 = 0;
              *((_QWORD *)v152 + 1) = 0;
              *((_QWORD *)v152 + 2) = 0;
              *((_QWORD *)v152 + 3) = v152 + 8;
              v154 = llvm::PointerType::get((llvm::PointerType *)(*v133 + 1912), 0);
              v196 = "vFrame";
              LOWORD(v199[0]) = 259;
              llvm::BitCastInst::BitCastInst((uint64_t)v153, (uint64_t)(v150 + 8), v154, (uint64_t)&v196, v34);
              v155 = *v181;
              if ((_DWORD)v155)
              {
                v156 = *v180;
                v157 = 8 * v155;
                do
                {
                  v158 = *v156++;
                  llvm::Value::doRAUW(v158, v153, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v158 + 5) + 40, (uint64_t ***)v158);
                  v159 = *((_QWORD *)v158 + 3);
                  v160 = (_QWORD *)*((_QWORD *)v158 + 4);
                  *v160 = v159;
                  *(_QWORD *)(v159 + 8) = v160;
                  *((_QWORD *)v158 + 3) = 0;
                  *((_QWORD *)v158 + 4) = 0;
                  llvm::Value::deleteValue(v158);
                  v157 -= 8;
                }
                while (v157);
              }
              v161 = *(_QWORD *)(*((_QWORD *)v150 + 9) + 56);
              v162 = v161 + 72;
              for (k = *(_QWORD *)(v161 + 80); k != v162; k = *(_QWORD *)(k + 8))
              {
                v164 = k - 24;
                if (!k)
                  v164 = 0;
                v165 = *(_QWORD *)(v164 + 48);
                if (v165 != v164 + 40)
                {
                  while (1)
                  {
                    v166 = v165 - 24;
                    if (!v165)
                      v166 = 0;
                    v167 = *(unsigned __int8 *)(v166 + 16);
                    if (v167 == 84)
                      v168 = v166;
                    else
                      v168 = 0;
                    if (v165 && v167 == 84 && (*(_WORD *)(v168 + 18) & 3u) - 1 <= 1)
                    {
                      v169 = *(_DWORD *)(v168 + 20);
                      if ((v169 & 0x40000000) != 0)
                      {
                        v171 = *(uint64_t **)(v168 - 8);
                        v170 = v169 & 0x7FFFFFF;
                      }
                      else
                      {
                        v170 = v169 & 0x7FFFFFF;
                        v171 = (uint64_t *)(v168 - 32 * v170);
                      }
                      if (v170)
                      {
                        v172 = 32 * v170;
                        while (1)
                        {
                          v196 = (const char *)*v171;
                          v197 = -1;
                          v198 = 0u;
                          v199[0] = 0u;
                          v200 = v150 + 8;
                          v201 = -1;
                          memset(v202, 0, 32);
                          if (llvm::AAResults::alias(a3, (uint64_t)&v196, (uint64_t)&v200))
                            break;
                          v171 += 4;
                          v172 -= 32;
                          if (!v172)
                            goto LABEL_256;
                        }
                        v173 = *(_WORD *)(v168 + 18);
                        if ((v173 & 3) != 2)
                          *(_WORD *)(v168 + 18) = v173 & 0xFFFC;
                      }
                    }
LABEL_256:
                    v165 = *(_QWORD *)(v165 + 8);
                    v174 = k - 24;
                    if (!k)
                      v174 = 0;
                    if (v165 == v174 + 40)
                      break;
LABEL_263:
                    if (k == v162)
                      goto LABEL_264;
                  }
                  while (1)
                  {
                    k = *(_QWORD *)(k + 8);
                    if (k == v162)
                      goto LABEL_264;
                    v175 = k - 24;
                    if (!k)
                      v175 = 0;
                    v165 = *(_QWORD *)(v175 + 48);
                    if (v165 != v175 + 40)
                      goto LABEL_263;
                  }
                }
              }
LABEL_264:
              sub_1C603E094(v182, 1);
            }
          }
        }
      }
    }
  }
}

_QWORD *sub_1C604323C(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (void *)a1[27];
  if (v2 != (void *)a1[26])
    free(v2);
  sub_1C61AA614((uint64_t)(a1 + 23));
  MEMORY[0x1CAA32FB4](a1[23], 8);
  v3 = (_QWORD *)a1[17];
  if (v3 != a1 + 19)
    free(v3);
  v4 = (_QWORD *)a1[14];
  if (v4 != a1 + 16)
    free(v4);
  v5 = (_QWORD *)a1[11];
  if (v5 != a1 + 13)
    free(v5);
  v6 = (_QWORD *)a1[5];
  if (v6 != a1 + 7)
    free(v6);
  return a1;
}

uint64_t sub_1C60432D4(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Coroutine frame allocation elision and indirect calls replacement";
  *(_QWORD *)(v3 + 8) = 65;
  *(_QWORD *)(v3 + 16) = "coro-elide";
  *(_QWORD *)(v3 + 24) = 10;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F76A0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C6043700;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C6043368(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F76A0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81AC5C8;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7698);
  if (v3 != -1)
  {
    v7[0] = sub_1C60432D4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7698, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL sub_1C6043434(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 36;
}

BOOL sub_1C6043480(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 48;
}

llvm::Value *sub_1C60434CC(llvm::Value *result, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v4;
  llvm::Constant ***v5;
  llvm::Constant *v6;
  llvm::Constant ***v7;
  llvm::Instruction *v8;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(llvm::Constant ****)a2;
    v6 = ***(llvm::Constant ****)a2;
    if (*(llvm::Constant **)result != v6)
    {
      result = sub_1C537D3B8((llvm *)0x31, (uint64_t)result, v6, 0);
      v2 = *(unsigned int *)(a2 + 8);
      if (!(_DWORD)v2)
        return result;
      v4 = result;
      v5 = *(llvm::Constant ****)a2;
    }
    v7 = &v5[v2];
    do
    {
      v8 = (llvm::Instruction *)*v5++;
      result = (llvm::Value *)llvm::replaceAndRecursivelySimplify(v8, v4, 0, 0, 0, 0);
    }
    while (v5 != v7);
  }
  return result;
}

void sub_1C604355C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C61AA614(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 56 * v4;
      do
      {
        *v5 = -4096;
        v5 += 7;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(56 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 56 * v10;
        do
        {
          *v9 = -4096;
          v9 += 7;
          v11 -= 56;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

BOOL sub_1C6043668(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 21;
}

BOOL sub_1C60436B4(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 47;
}

uint64_t sub_1C6043700()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6043368(v0);
}

void sub_1C6043728(llvm::Pass *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)this = &off_1E81AC5C8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = (void *)v2[27];
    if (v3 != (void *)v2[26])
      free(v3);
    sub_1C61AA614((uint64_t)(v2 + 23));
    MEMORY[0x1CAA32FB4](v2[23], 8);
    v4 = (_QWORD *)v2[17];
    if (v4 != v2 + 19)
      free(v4);
    v5 = (_QWORD *)v2[14];
    if (v5 != v2 + 16)
      free(v5);
    v6 = (_QWORD *)v2[11];
    if (v6 != v2 + 13)
      free(v6);
    v7 = (_QWORD *)v2[5];
    if (v7 != v2 + 7)
      free(v7);
    MEMORY[0x1CAA32FC0](v2, 0x10E0C40A43390BELL);
  }
  llvm::Pass::~Pass(this);
}

void sub_1C60437F0(llvm::Pass *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)this = &off_1E81AC5C8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = (void *)v2[27];
    if (v3 != (void *)v2[26])
      free(v3);
    sub_1C61AA614((uint64_t)(v2 + 23));
    MEMORY[0x1CAA32FB4](v2[23], 8);
    v4 = (_QWORD *)v2[17];
    if (v4 != v2 + 19)
      free(v4);
    v5 = (_QWORD *)v2[14];
    if (v5 != v2 + 16)
      free(v5);
    v6 = (_QWORD *)v2[11];
    if (v6 != v2 + 13)
      free(v6);
    v7 = (_QWORD *)v2[5];
    if (v7 != v2 + 7)
      free(v7);
    MEMORY[0x1CAA32FC0](v2, 0x10E0C40A43390BELL);
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C60438CC()
{
  return "Coroutine Elision";
}

uint64_t sub_1C60438DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13[0] = xmmword_1E81AC598;
  v13[1] = *(_OWORD *)&off_1E81AC5A8;
  if (sub_1C603E040((uint64_t)a2, (uint64_t)v13, 2))
  {
    v5 = operator new();
    v6 = sub_1C63CE630(v5, a2);
    *(_QWORD *)(v6 + 40) = v6 + 56;
    *(_QWORD *)(v6 + 48) = 0x400000000;
    *(_QWORD *)(v6 + 88) = v6 + 104;
    *(_QWORD *)(v6 + 96) = 0x100000000;
    *(_QWORD *)(v6 + 112) = v6 + 128;
    *(_QWORD *)(v6 + 120) = 0x100000000;
    *(_QWORD *)(v6 + 136) = v6 + 152;
    *(_QWORD *)(v6 + 144) = 0x400000000;
    *(_QWORD *)(v6 + 184) = 0;
    *(_QWORD *)(v6 + 192) = 0;
    *(_DWORD *)(v6 + 200) = 0;
    *(_QWORD *)(v6 + 208) = v6 + 240;
    *(_QWORD *)(v6 + 216) = v6 + 240;
    *(_QWORD *)(v6 + 224) = 4;
    *(_DWORD *)(v6 + 232) = 0;
    v7 = *(_QWORD **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;
    if (v7)
    {
      v8 = (void *)v7[27];
      if (v8 != (void *)v7[26])
        free(v8);
      sub_1C61AA614((uint64_t)(v7 + 23));
      MEMORY[0x1CAA32FB4](v7[23], 8);
      v9 = (_QWORD *)v7[17];
      if (v9 != v7 + 19)
        free(v9);
      v10 = (_QWORD *)v7[14];
      if (v10 != v7 + 16)
        free(v10);
      v11 = (_QWORD *)v7[11];
      if (v11 != v7 + 13)
        free(v11);
      v12 = (_QWORD *)v7[5];
      if (v12 != v7 + 7)
        free(v12);
      MEMORY[0x1CAA32FC0](v7, 0x10E0C40A43390BELL);
    }
  }
  return 0;
}

void *sub_1C6043A74(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C6043AB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v18;
  _QWORD *j;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char **v23;
  char *v24;
  uint64_t v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::DominatorTree *v31;
  _QWORD **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  llvm::Value *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v4 = a2[14];
  if (!v4 || !*(_DWORD *)(v4 + 8) || (v5 = *(_QWORD *)(v4 + 40)) == 0)
  {
LABEL_30:
    v6 = 0;
    goto LABEL_31;
  }
  v6 = *(unsigned int *)(v5 + 40);
  if (!(_DWORD)v6)
    goto LABEL_31;
  v7 = *(_QWORD *)(v5 + 24);
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v44 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v44 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v44;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v9 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
  v10 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                    * ((v9 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80
                                                                                    - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v9 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
  v11 = -348639895 * ((v10 >> 47) ^ v10);
  for (i = 1; ; ++i)
  {
    v13 = v11 & (v6 - 1);
    v14 = (uint64_t *)(v7 + 24 * v13);
    v15 = *v14;
    if (*v14 == -1)
    {
      if ("coroutine.presplit" == (char *)-1)
        goto LABEL_24;
      goto LABEL_10;
    }
    if (v15 != -2)
      break;
    if ("coroutine.presplit" == (char *)-2)
      goto LABEL_24;
LABEL_10:
    if (v15 == -1)
      goto LABEL_30;
    v11 = i + v13;
  }
  if (v14[1] != 18)
    goto LABEL_10;
  v16 = *(_QWORD *)v15 == 0x6E6974756F726F63 && *(_QWORD *)(v15 + 8) == 0x6C70736572702E65;
  if (!v16 || *(_WORD *)(v15 + 16) != 29801)
    goto LABEL_10;
LABEL_24:
  v45 = v47;
  v46 = 0x100000000;
  v18 = a2 + 9;
  for (j = (_QWORD *)a2[10]; ; j = (_QWORD *)j[1])
  {
    if (j == v18)
      goto LABEL_67;
    v20 = j - 3;
    if (!j)
      v20 = 0;
    v21 = (_QWORD *)v20[6];
    if (v21 != v20 + 5)
      break;
  }
  while (1)
  {
    if (v21)
      v36 = (uint64_t)(v21 - 3);
    else
      v36 = 0;
    v37 = sub_1C60436B4(v36);
    if (!v37)
      v36 = 0;
    if (v21 && v37)
    {
      v38 = *(_QWORD *)(v36 - 32 * (*(_DWORD *)(v36 + 20) & 0x7FFFFFF) + 32);
      v39 = *(_DWORD *)(v38 + 32);
      if (v39 > 0x40)
        LODWORD(v38) = **(_DWORD **)(v38 + 24);
      else
        v38 = (uint64_t)(*(_QWORD *)(v38 + 24) << -(char)v39) >> -(char)v39;
      if ((_DWORD)v38 == -1)
      {
        v40 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 8);
          v40 = v46;
        }
        *((_QWORD *)v45 + v40) = v36;
        LODWORD(v46) = v46 + 1;
      }
    }
    v21 = (_QWORD *)v21[1];
    v41 = j - 3;
    if (!j)
      v41 = 0;
    if (v21 == v41 + 5)
      break;
LABEL_63:
    if (j == v18)
      goto LABEL_64;
  }
  while (1)
  {
    j = (_QWORD *)j[1];
    if (j == v18)
      break;
    v42 = j - 3;
    if (!j)
      v42 = 0;
    v21 = (_QWORD *)v42[6];
    if (v21 != v42 + 5)
      goto LABEL_63;
  }
LABEL_64:
  if (!(_DWORD)v46)
  {
LABEL_67:
    v6 = 0;
    goto LABEL_68;
  }
  v43 = (llvm::Value *)sub_1C4FB7E80(*(uint64_t **)(a2[5] + 112), "coro.devirt.trigger", 0x13uLL);
  if (v43 && *((_BYTE *)v43 + 16))
    v43 = 0;
  sub_1C60434CC(v43, (uint64_t)&v45);
  v6 = 1;
LABEL_68:
  if (v45 != v47)
    free(v45);
LABEL_31:
  v22 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v22 + 48) = 0;
  sub_1C6042100(v22, (uint64_t)a2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 48))
  {
    v23 = **(char ****)(a1 + 8);
    do
    {
      v24 = *v23;
      v23 += 2;
    }
    while (v24 != llvm::AAResultsWrapperPass::ID);
    v25 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v23 - 1) + 96))(*(v23 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
    v26 = **(char ****)(a1 + 8);
    do
    {
      v27 = *v26;
      v26 += 2;
    }
    while (v27 != llvm::DominatorTreeWrapperPass::ID);
    v28 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v26 - 1) + 96))(*(v26 - 1), llvm::DominatorTreeWrapperPass::ID);
    v29 = *(_QWORD *)(a1 + 32);
    v30 = *(unsigned int *)(v29 + 48);
    if ((_DWORD)v30)
    {
      v31 = (llvm::DominatorTree *)(v28 + 32);
      v32 = *(_QWORD ***)(v29 + 40);
      v33 = 8 * v30;
      do
      {
        v34 = *v32++;
        sub_1C6042360(*(_QWORD *)(a1 + 32), v34, v25, v31);
        v33 -= 8;
      }
      while (v33);
      return 1;
    }
  }
  return v6;
}

llvm *sub_1C6043F24(llvm *a1, const void *a2, size_t a3, uint64_t a4)
{
  llvm *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm *result;
  _BYTE *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ****v21;
  uint64_t ***v22;
  int v23;
  int v24;
  size_t *v25;
  const void *v26;
  size_t v27;
  size_t v28;

  v8 = llvm::dbgs(a1);
  v9 = (_QWORD *)*((_QWORD *)v8 + 4);
  if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
  {
    if (a3)
    {
      memcpy(v9, a2, a3);
      v9 = (_QWORD *)(*((_QWORD *)v8 + 4) + a3);
      *((_QWORD *)v8 + 4) = v9;
    }
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, (const char *)a2, a3);
    v9 = (_QWORD *)*((_QWORD *)v8 + 4);
  }
  if (*((_QWORD **)v8 + 3) == v9)
  {
    v9 = llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    *(_BYTE *)v9 = 58;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = *(unsigned int *)(a4 + 64);
  if ((_DWORD)v10)
  {
    v13 = 0;
    while (1)
    {
      if (((*(_QWORD *)(*(_QWORD *)a4 + 8 * (v13 >> 6)) >> v13) & 1) != 0)
      {
        v9 = llvm::dbgs((llvm *)v9);
        v14 = (llvm::raw_ostream *)v9;
        v15 = (_BYTE *)v9[4];
        if ((_BYTE *)v9[3] == v15)
        {
          v9 = llvm::raw_ostream::write((llvm::raw_ostream *)v9, " ", 1uLL);
          v14 = (llvm::raw_ostream *)v9;
        }
        else
        {
          *v15 = 32;
          ++v9[4];
        }
        v16 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v13);
        if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
          break;
      }
LABEL_12:
      if (++v13 == v10)
        goto LABEL_8;
    }
    v17 = ***v16;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(unsigned int *)(v17 + 168);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v21 = (uint64_t ****)(v18 + 16 * v20);
      v22 = *v21;
      if (*v21 == v16)
        goto LABEL_24;
      v23 = 1;
      while (v22 != (uint64_t ***)-4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(uint64_t ****)(v18 + 16 * v20);
        if (v22 == v16)
        {
          v21 = (uint64_t ****)(v18 + 16 * v20);
          goto LABEL_24;
        }
      }
    }
    v21 = (uint64_t ****)(v18 + 16 * v19);
LABEL_24:
    v25 = (size_t *)v21[1];
    v28 = *v25;
    v26 = v25 + 2;
    v27 = v28;
    v9 = (_QWORD *)*((_QWORD *)v14 + 4);
    if (v28 <= *((_QWORD *)v14 + 3) - (_QWORD)v9)
    {
      if (v27)
      {
        v9 = memcpy(v9, v26, v27);
        *((_QWORD *)v14 + 4) += v27;
      }
    }
    else
    {
      v9 = llvm::raw_ostream::write(v14, (const char *)v26, v27);
    }
    goto LABEL_12;
  }
LABEL_8:
  result = llvm::dbgs((llvm *)v9);
  v12 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v12)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v12 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

llvm *sub_1C604416C(unsigned int *a1)
{
  uint64_t v1;
  llvm *result;
  _BYTE *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t ***v6;
  llvm *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  size_t *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _WORD *v21;

  v1 = a1[70];
  if ((_DWORD)v1)
  {
    v4 = a1;
    v5 = 0;
    while (1)
    {
      v6 = *(uint64_t ****)(*(_QWORD *)v4 + 8 * v5);
      v7 = llvm::dbgs((llvm *)a1);
      v8 = v7;
      if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
        break;
      v21 = (_WORD *)*((_QWORD *)v7 + 4);
LABEL_17:
      if (*((_QWORD *)v8 + 3) - (_QWORD)v21 > 1uLL)
      {
        *v21 = 2618;
        *((_QWORD *)v8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v8, ":\n", 2uLL);
      }
      sub_1C6043F24((llvm *)v4, "   Consumes", 0xBuLL, *((_QWORD *)v4 + 34) + 152 * v5);
      a1 = (unsigned int *)sub_1C6043F24((llvm *)v4, "      Kills", 0xBuLL, *((_QWORD *)v4 + 34) + 152 * v5++ + 72);
      if (v5 == v1)
        goto LABEL_2;
    }
    v9 = ***v6;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v13 = (uint64_t ****)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v6)
        goto LABEL_13;
      v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v6)
        {
          v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_13;
        }
      }
    }
    v13 = (uint64_t ****)(v10 + 16 * v11);
LABEL_13:
    v17 = (size_t *)v13[1];
    v20 = *v17;
    v18 = v17 + 2;
    v19 = v20;
    v21 = (_WORD *)*((_QWORD *)v7 + 4);
    if (v20 <= *((_QWORD *)v8 + 3) - (_QWORD)v21)
    {
      if (v19)
      {
        memcpy(v21, v18, v19);
        v21 = (_WORD *)(*((_QWORD *)v8 + 4) + v19);
        *((_QWORD *)v8 + 4) = v21;
      }
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, (const char *)v18, v19);
      v21 = (_WORD *)*((_QWORD *)v8 + 4);
    }
    goto LABEL_17;
  }
LABEL_2:
  result = llvm::dbgs((llvm *)a1);
  v3 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v3)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v3 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

void sub_1C6044370(_DWORD *a1, uint64_t a2, char a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::MDNode *appended;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  llvm::Instruction *v23;
  BOOL v24;
  llvm::Instruction *v25;
  unsigned int v26;
  int v27;
  llvm::Instruction **v28;
  unint64_t NumLocationOperands;
  llvm::Type **v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  llvm::Instruction *v36;
  _QWORD *v37;
  llvm::PointerType *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Instruction **v43;
  llvm::Instruction *v44;
  int v45;
  int v46;
  llvm::Instruction *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  char v52;
  char v53;
  char *v54;
  char *v55;
  unsigned __int8 ***v56;
  llvm::Value *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 ****v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t j;
  char *FirstNonPHIOrDbg;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t k;
  uint64_t v75;
  uint64_t *v76;
  llvm::BasicBlock *v77;
  char *v78;
  char *v79;
  unsigned __int8 **v80;
  int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  uint64_t v85;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  llvm::Instruction *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD v94[2];
  __int16 v95;
  void *v96;
  uint64_t v97;
  _BYTE v98[32];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  _QWORD v111[3];

  v111[1] = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t ***)(*(_QWORD *)(a2 + 40) + 56);
  v6 = **v5;
  v96 = v98;
  v97 = 0x200000000;
  v101 = v6;
  v102 = &v110;
  v103 = v111;
  v104 = 0;
  v105 = 0;
  v106 = 512;
  v107 = 7;
  v99 = 0;
  v100 = 0;
  v108 = 0;
  v109 = 0;
  v110 = &unk_1E8167888;
  v111[0] = &unk_1E8167A08;
  v7 = v5[10];
  v8 = v7 - 3;
  if (!v7)
    v8 = 0;
  v9 = (uint64_t)(v8 + 5);
  for (i = v8[6]; i != v9; i = *(_QWORD *)(i + 8))
  {
    v11 = i - 24;
    if (!i)
      v11 = 0;
    if (*(_BYTE *)(v11 + 16) != 83)
    {
      v12 = *(unsigned __int8 *)(i - 8) - 38;
      v13 = v12 > 0x38;
      v14 = (1 << v12) & 0x100060000000001;
      if (v13 || v14 == 0)
        v9 = i;
      else
        v9 = *(_QWORD *)(i + 8);
      break;
    }
  }
  v91 = v9;
  if (sub_1C56168B0(&v91))
  {
    do
      v91 = *(_QWORD *)(v91 + 8);
    while ((sub_1C56168B0(&v91) & 1) != 0);
  }
  v16 = v5[10];
  if (v16)
    v17 = (uint64_t)(v16 - 3);
  else
    v17 = 0;
  sub_1C4D8AE2C((uint64_t)&v96, v17, v91);
  v18 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  appended = *(llvm::MDNode **)(v18[8] + 24);
  v20 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
  v21 = *(unsigned __int8 **)(*v18 + 24);
  v22 = *v21;
  if (v22 <= 0x22)
  {
    if (v22 == 32)
    {
      v21 = (unsigned __int8 *)**((_QWORD **)v21 + 3);
    }
    else if (((1 << v22) & 0x6FFFFFFF0) != 0)
    {
      goto LABEL_57;
    }
  }
  v23 = (llvm::Instruction *)*((_QWORD *)v21 + 16);
  v90 = v23;
  if (!v23)
    goto LABEL_57;
  v24 = v20 != 58;
  v25 = v23;
  while (1)
  {
    v26 = *((unsigned __int8 *)v25 + 16);
    if (v26 < 0x1C)
      goto LABEL_61;
    if (v26 == 83)
    {
      v27 = *((_DWORD *)v25 + 5);
      if ((v27 & 0x7FFFFFF) != 1)
        goto LABEL_57;
      if ((v27 & 0x40000000) != 0)
        v28 = (llvm::Instruction **)*((_QWORD *)v25 - 1);
      else
        v28 = (llvm::Instruction **)((char *)v25 - 32);
      v25 = *v28;
      goto LABEL_38;
    }
    if (v26 != 61)
      break;
    v25 = (llvm::Instruction *)*((_QWORD *)v25 - 8);
LABEL_38:
    v90 = v25;
LABEL_54:
    v24 = 0;
    if (!v25)
      goto LABEL_57;
  }
  if (v26 == 60)
  {
    v25 = (llvm::Instruction *)*((_QWORD *)v25 - 4);
    v90 = v25;
    if (!v24)
      appended = llvm::DIExpression::prepend(appended, (const llvm::DIExpression *)1, 0);
    goto LABEL_54;
  }
  v92 = v94;
  v93 = 0x1000000000;
  v88 = &v90;
  v89 = 0;
  if (appended)
    NumLocationOperands = llvm::DIExpression::getNumLocationOperands(appended);
  else
    NumLocationOperands = 0;
  v30 = llvm::salvageDebugInfoImpl(v25, NumLocationOperands, (unsigned int *)&v92, (uint64_t)&v88);
  if (v30)
    v31 = (_DWORD)v89 == 0;
  else
    v31 = 0;
  v32 = !v31;
  if (v31)
  {
    v90 = (llvm::Instruction *)v30;
    appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v92, v93, 0, 0);
  }
  if (v88 != &v90)
    free(v88);
  if (v92 != v94)
    free(v92);
  v25 = v90;
  if (!v32)
    goto LABEL_54;
  if (v90)
  {
LABEL_61:
    if ((a3 & 1) != 0
      || byte_1ED82A3E0
      || *((_BYTE *)v25 + 16) != 21
      || (v33 = *(_QWORD *)(*((_QWORD *)v25 + 3) + 112)) != 0
      && (v34 = *((_DWORD *)v25 + 8) + 2, v34 < *(_DWORD *)(v33 + 8))
      && (v64 = *(_QWORD *)(v33 + 8 * v34 + 40)) != 0
      && (*(_BYTE *)(v64 + 19) & 0x40) != 0)
    {
      v36 = v25;
      goto LABEL_92;
    }
    v35 = sub_1C61B5A08(a1, (uint64_t *)&v90);
    v36 = (llvm::Instruction *)v35[1];
    if (!v36)
    {
      v37 = v35;
      v38 = *(llvm::PointerType **)v25;
      if ((*((_BYTE *)v25 + 23) & 0x10) != 0)
      {
        v39 = **(_QWORD **)v38;
        v40 = *(_QWORD *)(v39 + 152);
        v41 = *(unsigned int *)(v39 + 168);
        if (!(_DWORD)v41)
          goto LABEL_75;
        LODWORD(v42) = (v41 - 1) & ((v25 >> 4) ^ (v25 >> 9));
        v43 = (llvm::Instruction **)(v40 + 16 * v42);
        v44 = *v43;
        if (*v43 != v25)
        {
          v45 = 1;
          while (v44 != (llvm::Instruction *)-4096)
          {
            v46 = v42 + v45++;
            v42 = v46 & (v41 - 1);
            v44 = *(llvm::Instruction **)(v40 + 16 * v42);
            if (v44 == v25)
            {
              v43 = (llvm::Instruction **)(v40 + 16 * v42);
              goto LABEL_76;
            }
          }
LABEL_75:
          v43 = (llvm::Instruction **)(v40 + 16 * v41);
        }
LABEL_76:
        v47 = v43[1];
        v50 = *(_QWORD *)v47;
        v48 = (char *)v47 + 16;
        v49 = v50;
      }
      else
      {
        v49 = 0;
        v48 = &byte_1C871356D;
      }
      v95 = 773;
      v92 = v48;
      v93 = v49;
      v94[0] = ".debug";
      v51 = sub_1C627CF40((uint64_t)&v96, v38, 0, 0, (uint64_t)&v92);
      v87 = v37;
      v37[1] = v51;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v99 + 56) + 40) + 272, *(_QWORD *)v25);
      v53 = v52;
      v54 = (char *)operator new(0x80uLL);
      v55 = v54;
      *((_DWORD *)v54 + 21) = *((_DWORD *)v54 + 21) & 0x38000000 | 2;
      *(_QWORD *)v54 = 0;
      *((_QWORD *)v54 + 2) = 0;
      *((_QWORD *)v54 + 1) = 0;
      *((_QWORD *)v54 + 5) = 0;
      *((_QWORD *)v54 + 6) = 0;
      *((_QWORD *)v54 + 4) = 0;
      v56 = (unsigned __int8 ***)(v54 + 32);
      *((_QWORD *)v54 + 8) = ***(_QWORD ***)v25 + 1576;
      v57 = (llvm::Value *)(v54 + 64);
      *((_QWORD *)v54 + 3) = v54 + 64;
      *((_QWORD *)v54 + 7) = v54 + 64;
      *((_QWORD *)v54 + 9) = 0;
      v54[80] = 61;
      v54[81] = 0;
      *((_WORD *)v54 + 41) = 0;
      *((_DWORD *)v54 + 21) = 2;
      *(_OWORD *)(v54 + 88) = 0u;
      *(_OWORD *)(v54 + 104) = 0u;
      *((_DWORD *)v54 + 30) = 0;
      *(_QWORD *)v54 = v25;
      v60 = *((_QWORD *)v25 + 1);
      v59 = (_QWORD *)((char *)v25 + 8);
      v58 = v60;
      *((_QWORD *)v54 + 1) = v60;
      if (v60)
        *(_QWORD *)(v58 + 16) = v54 + 8;
      *((_QWORD *)v54 + 2) = v59;
      *v59 = v54;
      if (*((_QWORD *)v54 + 4))
      {
        **((_QWORD **)v54 + 6) = *((_QWORD *)v54 + 5);
        v85 = *((_QWORD *)v54 + 5);
        if (v85)
          *(_QWORD *)(v85 + 16) = *((_QWORD *)v54 + 6);
      }
      *v56 = v51;
      if (v51)
      {
        v63 = v51[1];
        v62 = (unsigned __int8 ****)(v51 + 1);
        v61 = v63;
        *((_QWORD *)v54 + 5) = v63;
        if (v63)
          *((_QWORD *)v61 + 2) = v54 + 40;
        *((_QWORD *)v54 + 6) = v62;
        *v62 = v56;
      }
      *((_WORD *)v54 + 41) = 2 * (v53 & 0x3F);
      v54[124] = 1;
      v95 = 257;
      (*(void (**)(_QWORD *, llvm::Value *, void **, uint64_t, uint64_t))(*v103 + 16))(v103, v57, &v92, v99, v100);
      if (!(_DWORD)v97)
      {
LABEL_85:
        v36 = (llvm::Instruction *)v87[1];
        goto LABEL_86;
      }
      v78 = (char *)v96;
      v79 = (char *)v96 + 16 * v97;
      v80 = (unsigned __int8 **)(v55 + 112);
      while (2)
      {
        v81 = *(_DWORD *)v78;
        v82 = (unsigned __int8 *)*((_QWORD *)v78 + 1);
        if (v82)
        {
          if (v81)
            goto LABEL_129;
          v88 = (void *)*((_QWORD *)v78 + 1);
          llvm::MetadataTracking::track((uint64_t)&v88, v82, 2);
          v83 = *v80;
LABEL_133:
          if (v83)
            llvm::MetadataTracking::untrack((uint64_t)(v55 + 112), v83);
          v84 = (unsigned __int8 *)v88;
          *v80 = (unsigned __int8 *)v88;
          if (v84)
            llvm::MetadataTracking::retrack((uint64_t)&v88, v84, (uint64_t)(v55 + 112));
        }
        else
        {
          v83 = *v80;
          if (*v80 || (v55[87] & 0x20) != 0)
          {
            if (!v81)
            {
              v88 = 0;
              goto LABEL_133;
            }
LABEL_129:
            llvm::Value::setMetadata(v57, *(_DWORD *)v78, (llvm::MDNode *)v82);
          }
        }
        v78 += 16;
        if (v78 == v79)
          goto LABEL_85;
        continue;
      }
    }
LABEL_86:
    v90 = v36;
    if (appended && llvm::DIExpression::isComplex(appended))
      appended = llvm::DIExpression::prepend(appended, (const llvm::DIExpression *)1, 0);
LABEL_92:
    llvm::DbgVariableIntrinsic::replaceVariableLocationOp((llvm::DbgVariableIntrinsic *)a2, v23, v36);
    sub_1C61D279C(a2, (uint64_t)appended);
    v65 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
    if (v65 != 55 && v65 != 58)
    {
      v66 = *((unsigned __int8 *)v90 + 16);
      if (v90 && v66 == 33)
      {
        v67 = *((_QWORD *)v90 - 12);
        v68 = v67 + 40;
        for (j = *(_QWORD *)(v67 + 48); j != v68; j = *(_QWORD *)(j + 8))
        {
          FirstNonPHIOrDbg = (char *)(j - 24);
          if (j)
            v71 = j - 24;
          else
            v71 = 0;
          if (*(_BYTE *)(v71 + 16) != 83)
            goto LABEL_120;
        }
        goto LABEL_137;
      }
      if (v90 && v66 == 39)
      {
        v72 = *((_QWORD *)v90 - 4 * *((unsigned int *)v90 + 20) - 8);
        v73 = v72 + 40;
        for (k = *(_QWORD *)(v72 + 48); k != v73; k = *(_QWORD *)(k + 8))
        {
          FirstNonPHIOrDbg = (char *)(k - 24);
          if (k)
            v75 = k - 24;
          else
            v75 = 0;
          if (*(_BYTE *)(v75 + 16) != 83)
            goto LABEL_120;
        }
LABEL_137:
        FirstNonPHIOrDbg = 0;
LABEL_120:
        llvm::Instruction::moveBefore((llvm::Instruction *)a2, (llvm::Instruction *)FirstNonPHIOrDbg);
      }
      else if (v90 && v66 >= 0x1C)
      {
        llvm::Instruction::moveAfter((llvm::Instruction *)a2, v90);
      }
      else if (v66 == 21)
      {
        v76 = v5[10];
        if (v76)
          v77 = (llvm::BasicBlock *)(v76 - 3);
        else
          v77 = 0;
        FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v77, 1);
        goto LABEL_120;
      }
    }
  }
LABEL_57:
  if (v96 != v98)
    free(v96);
}

void sub_1C6044B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  BOOL v10;
  llvm::ValueAsMetadata *v11;
  llvm::ValueAsMetadata *v12;
  llvm::ValueAsMetadata *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::BasicBlock *v18;
  char *FirstNonPHIOrDbg;
  llvm::PointerType ***v20;
  uint64_t v21;
  llvm::PointerType *v22;
  llvm::Type *v23;
  unsigned __int8 **v24;
  llvm::Type *v25;
  uint64_t *NullValue;
  char v27;
  char v28;
  char *v29;
  char *v30;
  unsigned __int8 ***v31;
  llvm::Value *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int8 ****v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  llvm::Value **v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  void **v79;
  uint64_t v80;
  llvm::Value *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  void **v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t ***v101;
  uint64_t v102;
  uint64_t **v103;
  uint64_t **v104;
  uint64_t **v105;
  uint64_t k;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v117;
  llvm::Value *v118;
  uint64_t **v119;
  uint64_t v120;
  _QWORD *v121;
  llvm::Value *v122;
  char *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  char v129;
  uint64_t n;
  uint64_t v131;
  unsigned int v132;
  BOOL v133;
  const llvm::Twine *v135;
  llvm **v136;
  llvm **v137;
  llvm *v138;
  uint64_t ***v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t ****v145;
  uint64_t ***v146;
  int v147;
  int v148;
  uint64_t ***v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  llvm **v157;
  llvm *v158;
  int v159;
  int v160;
  llvm *v161;
  void *v162;
  char *v163;
  void *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  llvm::ValueSymbolTable *v168;
  uint64_t *v169;
  uint64_t **v170;
  _QWORD **v171;
  unsigned int v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t ****v180;
  uint64_t ***v181;
  int v182;
  int v183;
  uint64_t ***v184;
  uint64_t **v185;
  char *v186;
  uint64_t **v187;
  uint64_t **v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t *v191;
  uint64_t **v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t **v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  BOOL v204;
  char *v206;
  char *v207;
  char *v208;
  unsigned __int8 **v209;
  int v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  unsigned __int8 *v213;
  uint64_t m;
  uint64_t v215;
  unsigned int v216;
  BOOL v217;
  void **v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t ****v225;
  uint64_t ***v226;
  int v227;
  int v228;
  uint64_t ***v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t ***v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t ****v239;
  uint64_t ***v240;
  int v241;
  int v242;
  uint64_t ***v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t **v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  llvm::PHINode *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t ****v257;
  uint64_t ***v258;
  int v259;
  int v260;
  uint64_t ***v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t ****v269;
  uint64_t ***v270;
  int v271;
  int v272;
  uint64_t ***v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  llvm::Value *v280;
  uint64_t **v281;
  char *v282;
  char *v283;
  unsigned __int8 **v284;
  int v285;
  unsigned __int8 *v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  llvm::BasicBlock *v289;
  uint64_t ***v290;
  uint64_t v291;
  uint64_t v292;
  const llvm::APInt *v293;
  llvm::ConstantInt *v294;
  unsigned int v295;
  unint64_t v296;
  llvm::ConstantInt *v297;
  int v298;
  uint64_t v299;
  unsigned int v300;
  BOOL v301;
  int v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v308;
  unint64_t v309;
  size_t v310;
  uint64_t v311;
  unsigned int v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  unsigned int v320;
  char *v321;
  const void *v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  void **v326;
  unsigned int v327;
  char *v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  int v333;
  int v334;
  unsigned int v335;
  uint64_t v336;
  char *v337;
  char *v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  _QWORD *v348;
  uint64_t v349;
  int v350;
  unsigned int v351;
  int v352;
  char *v353;
  uint64_t v354;
  int v355;
  char *v356;
  uint64_t v357;
  int v358;
  char *v359;
  unsigned int v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _BYTE *v367;
  unint64_t v368;
  _BYTE *v369;
  _BYTE *v370;
  unint64_t v371;
  unint64_t *v372;
  _QWORD *v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  uint64_t ii;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  BOOL v386;
  BOOL v387;
  BOOL v388;
  uint64_t jj;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  uint64_t ***v404;
  llvm::BasicBlock *v405;
  llvm::Value *v406;
  uint64_t *v407;
  uint64_t *v408;
  unsigned int v409;
  uint64_t v410;
  _BOOL4 v411;
  uint64_t SinglePredecessor;
  uint64_t ***v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  llvm::Value **v418;
  llvm::Value *v419;
  int v420;
  int v421;
  llvm::Value *v422;
  void *v423;
  char *v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t kk;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v435;
  uint64_t **v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  llvm::ValueSymbolTable *v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t SingleSuccessor;
  void *v450;
  void *v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t *v454;
  uint64_t v455;
  unint64_t v456;
  _BYTE *v457;
  unint64_t v458;
  unint64_t *v459;
  _QWORD *v460;
  unint64_t v461;
  char *v462;
  _QWORD *v463;
  unsigned int *v464;
  unsigned int v465;
  uint64_t v466;
  uint64_t *v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v472;
  _BYTE *v473;
  unint64_t v474;
  unint64_t *v475;
  _QWORD *v476;
  unint64_t v477;
  char *v478;
  _QWORD *v479;
  unsigned int *v480;
  unsigned int v481;
  uint64_t v482;
  uint64_t *v483;
  _QWORD *v484;
  uint64_t v485;
  int v486;
  uint64_t v487;
  unsigned int v488;
  unsigned int v489;
  unint64_t v490;
  uint64_t v491;
  int v492;
  int v493;
  uint64_t v494;
  unsigned int v495;
  unsigned int v496;
  unint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  int v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  int v507;
  unsigned int v508;
  uint64_t v509;
  int v510;
  unint64_t v511;
  _BYTE *v512;
  unint64_t v513;
  unint64_t *v514;
  _QWORD *v515;
  unint64_t v516;
  uint64_t v517;
  _BYTE *v518;
  void **v519;
  unint64_t v520;
  void **v522;
  uint64_t v523;
  char *v524;
  uint64_t v525;
  unint64_t v526;
  _QWORD *v528;
  uint64_t v529;
  char *v530;
  unsigned int *v531;
  int v532;
  char *v533;
  unsigned int v534;
  uint64_t v535;
  uint64_t *v536;
  _QWORD *v537;
  uint64_t v538;
  unsigned int v539;
  unsigned int v540;
  uint64_t v541;
  uint64_t *v542;
  _QWORD *v543;
  uint64_t v544;
  unsigned int v545;
  uint64_t v546;
  uint64_t *v547;
  _QWORD *v548;
  uint64_t v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t *v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  _BOOL4 v557;
  int v558;
  llvm::Instruction *v559;
  unsigned int v560;
  unsigned int v561;
  unint64_t v562;
  llvm::Instruction *v563;
  int v564;
  uint64_t v565;
  unsigned int v566;
  unsigned int v567;
  unint64_t v568;
  uint64_t v569;
  int v570;
  llvm::Instruction *v571;
  unsigned int v572;
  unsigned int v573;
  unint64_t v574;
  llvm::Instruction *v575;
  uint64_t v576;
  unsigned int v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  llvm::Instruction *v581;
  uint64_t v582;
  llvm::Instruction *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unsigned __int8 *v587;
  int v588;
  llvm::Value *v589;
  unint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t *v593;
  unint64_t *v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  const char **v602;
  unint64_t *v603;
  unint64_t v604;
  llvm::Instruction *v605;
  int v606;
  char *v607;
  llvm::Value *v608;
  _DWORD *v609;
  _DWORD *v610;
  int v611;
  llvm::Value **v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  _DWORD *v619;
  const char **v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  llvm::ValueSymbolTable *v628;
  llvm::Type ***v629;
  llvm::Function *v630;
  _QWORD *v631;
  _QWORD *v632;
  _QWORD *v633;
  uint64_t i2;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  uint64_t i3;
  uint64_t v642;
  uint64_t v643;
  uint64_t mm;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  _QWORD *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  BOOL v654;
  uint64_t i6;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  int v660;
  uint64_t i4;
  uint64_t v662;
  _BOOL4 v663;
  BOOL v664;
  char v665;
  uint64_t v666;
  llvm::Value *v667;
  uint64_t v668;
  llvm::ValueAsMetadata *v669;
  uint64_t v670;
  unsigned int v671;
  void *v672;
  void *v673;
  uint64_t i5;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  uint64_t *v679;
  uint64_t *v680;
  uint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  const llvm::Value *v690;
  uint64_t v691;
  int64x2_t v692;
  unint64_t *v693;
  unint64_t *v694;
  uint64_t i7;
  std::string *v696;
  int v697;
  void **v698;
  int v699;
  unsigned int v700;
  llvm::DominatorTree **v701;
  llvm::DominatorTree *v702;
  llvm::DominatorTree **v703;
  int v704;
  BOOL v705;
  unsigned int v706;
  llvm::DominatorTree **v707;
  _QWORD *v708;
  std::string *v709;
  uint64_t v710;
  std::string *v711;
  uint64_t v712;
  unsigned int v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  void **v717;
  int v718;
  unsigned int v719;
  void **v720;
  void *v721;
  void **v722;
  int v723;
  BOOL v724;
  unsigned int v725;
  void **v726;
  _QWORD *v727;
  void *v728;
  uint64_t v729;
  void *v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  BOOL v735;
  llvm::Instruction *v736;
  llvm::Instruction **v737;
  uint64_t v738;
  llvm::Instruction *v739;
  _QWORD *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  llvm::Function **v745;
  llvm::Function *v746;
  int v747;
  int v748;
  uint64_t v749;
  int v750;
  llvm::Type **v751;
  uint64_t v753;
  uint64_t v754;
  BOOL v755;
  void *v756;
  llvm::Value *v757;
  uint64_t v758;
  __n128 v759;
  int v760;
  _QWORD *v761;
  char *v762;
  unsigned int v763;
  uint64_t v764;
  std::string::size_type v765;
  unsigned int v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t *v771;
  uint64_t *v772;
  unsigned int v773;
  unsigned int v774;
  uint64_t v775;
  uint64_t *v776;
  unint64_t *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t *v780;
  uint64_t v781;
  uint64_t *v782;
  uint64_t *nn;
  unint64_t *v784;
  unint64_t v785;
  int v786;
  uint64_t *v787;
  uint64_t v788;
  uint64_t *v789;
  unint64_t *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t *v793;
  uint64_t *v794;
  uint64_t *i1;
  unint64_t *v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  _QWORD *v800;
  uint64_t v801;
  uint64_t v802;
  _QWORD *v803;
  unint64_t *v804;
  unint64_t v805;
  const void *v806;
  unint64_t v807;
  char *v808;
  void *v809;
  char *v810;
  char *v811;
  char *v812;
  llvm::PointerType *v813;
  int v814;
  __int16 v815;
  __int16 v816;
  llvm::AllocaInst *v817;
  uint64_t v818;
  void *v819;
  uint64_t **v820;
  llvm::PointerType *v821;
  uint64_t v822;
  int v823;
  unsigned int v824;
  _QWORD *v825;
  void *v826;
  _QWORD *v827;
  int v828;
  BOOL v829;
  unsigned int v830;
  _QWORD *v831;
  int v832;
  _QWORD *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t i8;
  uint64_t v838;
  BOOL v839;
  int v840;
  uint64_t v841;
  uint64_t v842;
  int v843;
  uint64_t v844;
  _QWORD *v845;
  uint64_t v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unsigned int v851;
  unsigned int v852;
  void **v853;
  uint64_t v854;
  void *v855;
  unint64_t v856;
  uint64_t v857;
  std::string *v858;
  std::string *v859;
  std::string *v860;
  uint64_t *v861;
  uint64_t v862;
  uint64_t v863;
  const llvm::AllocaInst **v864;
  const llvm::AllocaInst *v865;
  unsigned int *v866;
  std::string::size_type v867;
  uint64_t v868;
  const llvm::AllocaInst **v869;
  uint64_t v870;
  const llvm::AllocaInst *v871;
  uint64_t LiveRange;
  uint64_t v873;
  uint64_t v874;
  unsigned int v875;
  uint64_t *v876;
  uint64_t *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int v881;
  const llvm::AllocaInst **v882;
  unint64_t v883;
  uint64_t v884;
  std::string *v885;
  std::string::size_type v886;
  int v887;
  std::string::size_type v888;
  std::string::size_type size;
  std::string::size_type *v890;
  std::string::size_type **v891;
  uint64_t v892;
  uint64_t v893;
  std::string *v894;
  uint64_t v895;
  uint64_t v896;
  std::string::size_type v897;
  llvm::AllocaInst **v898;
  int v899;
  void **v900;
  int v901;
  void **v902;
  void *v903;
  unsigned int v904;
  _QWORD *v905;
  uint64_t v906;
  _QWORD *v907;
  int v908;
  BOOL v909;
  unsigned int v910;
  _QWORD *v911;
  unsigned int v912;
  unsigned int v913;
  uint64_t **v914;
  uint64_t **v915;
  uint64_t *v916;
  uint64_t ParamByValType;
  uint64_t v918;
  llvm::AttributeList *v919;
  uint64_t v920;
  uint64_t v921;
  int v922;
  int v923;
  uint64_t *v924;
  unsigned int v925;
  uint64_t **v926;
  uint64_t *v927;
  uint64_t **v928;
  int v929;
  BOOL v930;
  unsigned int v931;
  uint64_t **v932;
  uint64_t v933;
  char v934;
  unsigned int v935;
  _BOOL4 v936;
  int8x16_t *v937;
  uint64_t v938;
  int8x16_t *v939;
  __int8 v940;
  __int8 v941;
  unint64_t v942;
  char *v943;
  uint64_t v944;
  __int128 v945;
  uint64_t v946;
  char *v947;
  char *v948;
  uint64_t v949;
  BOOL v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  unsigned int v958;
  uint64_t v959;
  llvm::Type *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t *v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t *v967;
  uint64_t v968;
  uint64_t v969;
  unsigned int v970;
  unint64_t v971;
  int v972;
  uint64_t v973;
  unsigned __int8 v974;
  char *v975;
  uint64_t v976;
  _QWORD *v977;
  unint64_t *v978;
  BOOL v979;
  char *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unint64_t *v984;
  unint64_t v985;
  unsigned int v986;
  unsigned int v987;
  unsigned __int8 *v988;
  uint64_t v989;
  BOOL v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  int v994;
  uint64_t v995;
  int v996;
  unsigned int v997;
  llvm::Function **v998;
  llvm::Function *v999;
  llvm::Function **v1000;
  int v1001;
  BOOL v1002;
  unsigned int v1003;
  uint64_t v1004;
  _QWORD *v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  unsigned int v1009;
  uint64_t v1010;
  llvm *v1012;
  unint64_t v1013;
  llvm::Function **v1014;
  llvm::Function *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  unsigned __int8 *StructType;
  uint64_t v1021;
  uint64_t v1022;
  llvm **v1023;
  std::string::size_type v1024;
  llvm *v1025;
  unsigned int v1026;
  llvm *v1027;
  int v1028;
  unsigned int v1029;
  unint64_t *v1030;
  uint64_t *v1031;
  uint64_t *v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t *v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  const char *v1039;
  uint64_t v1040;
  uint64_t v1041;
  llvm::MDNode *BasicType;
  const char *v1043;
  uint64_t v1044;
  uint64_t v1045;
  llvm::MDNode *v1046;
  const char *v1047;
  unint64_t v1048;
  unint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  const char *v1052;
  int v1053;
  int v1054;
  llvm::MDNode *v1055;
  std::string *v1056;
  std::string::size_type v1057;
  std::string::size_type v1058;
  unsigned int v1059;
  unsigned int v1060;
  void *v1061;
  uint64_t *v1062;
  uint64_t v1063;
  uint64_t v1064;
  int v1065;
  _QWORD *v1066;
  uint64_t v1067;
  _QWORD *v1068;
  uint64_t *v1069;
  uint64_t v1070;
  _QWORD *v1071;
  uint64_t v1072;
  int v1073;
  unsigned int v1074;
  int v1075;
  int v1076;
  uint64_t v1077;
  std::string *v1078;
  std::string::size_type v1079;
  std::string::size_type v1080;
  unsigned int v1081;
  uint64_t v1082;
  uint64_t *v1083;
  uint64_t v1084;
  int v1085;
  int v1086;
  uint64_t v1087;
  uint64_t *v1088;
  uint64_t v1089;
  int v1090;
  int v1091;
  uint64_t v1092;
  uint64_t *v1093;
  uint64_t v1094;
  int v1095;
  int v1096;
  int v1097;
  uint64_t v1098;
  uint64_t v1099;
  unsigned int v1100;
  uint64_t Impl;
  unsigned __int8 *v1102;
  uint64_t v1103;
  char *v1104;
  unsigned int v1105;
  unsigned int v1106;
  int v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  int v1111;
  int v1112;
  unsigned int v1113;
  int data;
  void (*v1115)(llvm::raw_ostream *__hidden);
  uint64_t v1116;
  unint64_t *v1117;
  std::string::size_type v1118;
  const void *v1119;
  unint64_t v1120;
  std::string *v1121;
  _DWORD *v1122;
  const void *v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  std::string *v1127;
  std::string::size_type v1128;
  std::string *v1129;
  std::string::size_type v1130;
  std::string::size_type v1131;
  std::string *v1132;
  uint64_t v1133;
  uint64_t v1134;
  unint64_t v1135;
  unsigned __int8 *v1136;
  unsigned __int8 *v1137;
  unsigned int v1138;
  int v1139;
  std::string *p_p;
  size_t v1141;
  uint64_t MemberType;
  uint64_t v1143;
  int v1144;
  unsigned int v1145;
  int v1146;
  unsigned int v1147;
  unsigned __int8 *v1148;
  int v1149;
  BOOL v1150;
  unsigned int v1151;
  _DWORD *v1152;
  _DWORD *v1153;
  int v1154;
  unsigned int v1155;
  llvm::Metadata *v1156;
  llvm::ValueAsMetadata *v1157;
  llvm::MDNode *v1158;
  uint64_t v1159;
  _QWORD *v1160;
  uint64_t v1161;
  uint64_t i9;
  uint64_t *v1163;
  uint64_t v1164;
  uint64_t *v1165;
  uint64_t *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  _QWORD *v1170;
  void *v1171;
  void *v1172;
  const llvm::APInt *v1173;
  llvm::Value **v1174;
  uint64_t v1175;
  llvm::Value *v1176;
  unsigned int *v1177;
  uint64_t v1178;
  _QWORD *v1179;
  uint64_t *v1180;
  uint64_t ***v1181;
  unsigned int v1182;
  uint64_t v1183;
  uint64_t ****v1184;
  uint64_t ***v1185;
  int v1186;
  int v1187;
  unint64_t v1188;
  BOOL v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t *v1195;
  uint64_t **v1196;
  llvm::AttributeList *v1197;
  uint64_t *v1198;
  uint64_t *v1199;
  int v1200;
  uint64_t v1201;
  const llvm::Twine *v1202;
  int v1203;
  uint64_t **v1205;
  uint64_t *v1206;
  uint64_t **v1207;
  uint64_t v1208;
  unsigned int v1209;
  uint64_t v1210;
  uint64_t *i10;
  uint64_t *v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t ***v1216;
  int v1217;
  int v1218;
  unsigned int v1219;
  void *v1220;
  void *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t ****v1226;
  uint64_t ***v1227;
  int v1228;
  int v1229;
  uint64_t ***v1230;
  uint64_t **v1231;
  char *v1232;
  uint64_t **v1233;
  uint64_t ***v1234;
  __int16 v1235;
  char v1236;
  char v1237;
  char *v1238;
  uint64_t v1239;
  char *v1240;
  llvm::Value *v1241;
  uint64_t *v1242;
  uint64_t **v1243;
  _QWORD *v1244;
  uint64_t **v1245;
  char *v1246;
  char *v1247;
  llvm::Value *v1248;
  uint64_t v1249;
  uint64_t **v1250;
  _QWORD *v1251;
  uint64_t **v1252;
  llvm::Value *v1253;
  char *v1254;
  char *v1255;
  unsigned __int8 **v1256;
  int v1257;
  unsigned __int8 *v1258;
  unsigned __int8 *v1259;
  std::string *v1260;
  char *v1261;
  char *v1262;
  uint64_t ****v1263;
  llvm::Value *v1264;
  uint64_t **v1265;
  _QWORD *v1266;
  uint64_t **v1267;
  uint64_t **v1268;
  uint64_t *****v1269;
  uint64_t **v1270;
  uint64_t v1271;
  uint64_t v1272;
  llvm::Value *v1273;
  uint64_t *v1274;
  uint64_t *v1275;
  uint64_t v1276;
  uint64_t v1277;
  _BOOL4 v1278;
  BOOL v1279;
  uint64_t v1280;
  _QWORD *v1281;
  uint64_t v1282;
  uint64_t i11;
  uint64_t v1284;
  unsigned int v1285;
  uint64_t v1286;
  void *v1288;
  _QWORD *v1289;
  void *v1290;
  const llvm::APInt *v1291;
  unsigned int *v1292;
  unsigned int *v1293;
  uint64_t ***v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t ****v1299;
  uint64_t ***v1300;
  int v1301;
  int v1302;
  uint64_t ***v1303;
  uint64_t **v1304;
  char *v1305;
  uint64_t **v1306;
  uint64_t v1307;
  unsigned int v1308;
  uint64_t *v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t *v1316;
  uint64_t v1317;
  int v1318;
  int v1319;
  __int128 **v1320;
  __int128 *v1321;
  llvm::DominatorTree *v1322;
  __int128 *v1323;
  uint64_t v1324;
  char *v1325;
  char *v1326;
  uint64_t v1327;
  _QWORD *v1328;
  uint64_t v1329;
  std::string **v1330;
  llvm::DominatorTree **v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  char *v1337;
  char *v1338;
  unsigned __int8 **v1339;
  int v1340;
  unsigned __int8 *v1341;
  unsigned __int8 *v1342;
  unsigned __int8 *v1343;
  int v1344;
  int v1345;
  uint64_t **v1346;
  BOOL v1347;
  char *v1348;
  char *v1349;
  unsigned __int8 **v1350;
  int v1351;
  unsigned __int8 *v1352;
  unsigned __int8 *v1353;
  unsigned __int8 *v1354;
  unsigned int v1355;
  uint64_t v1356;
  llvm *v1358;
  llvm::BasicBlock *v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  char *v1363;
  char *v1364;
  unsigned __int8 **v1365;
  int v1366;
  unsigned __int8 *v1367;
  unsigned __int8 *v1368;
  std::string *v1369;
  uint64_t *v1370;
  llvm::BasicBlock *v1371;
  uint64_t *v1372;
  uint64_t *v1373;
  uint64_t *v1374;
  uint64_t v1375;
  _QWORD *v1376;
  int v1377;
  llvm::Type ***v1378;
  llvm::Type **v1379;
  _DWORD *v1380;
  llvm::Value *v1381;
  uint64_t v1382;
  _QWORD *v1383;
  uint64_t v1384;
  void *v1385;
  void *v1386;
  uint64_t v1387;
  llvm::DominatorTree *v1388;
  llvm::DominatorTree *v1389;
  const llvm::APInt *v1390;
  uint64_t *v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  _QWORD *v1395;
  llvm::Instruction *v1396;
  char *v1397;
  uint64_t v1398;
  char *v1399;
  uint64_t v1400;
  char *v1401;
  char *v1402;
  char *v1403;
  uint64_t *v1404;
  uint64_t *v1405;
  uint64_t v1406;
  uint64_t *v1407;
  uint64_t v1408;
  uint64_t v1409;
  _BOOL4 v1410;
  BOOL v1411;
  uint64_t Declaration;
  uint64_t **v1413;
  llvm::PointerType *v1414;
  llvm::ValueHandleBase *v1415;
  unsigned __int8 **v1416;
  llvm::Value *v1417;
  uint64_t v1418;
  unint64_t *v1419;
  unint64_t v1420;
  __int16 v1421;
  __int16 v1422;
  uint64_t v1423;
  llvm::ValueAsMetadata *v1424;
  void *v1425;
  void *v1426;
  uint64_t v1427;
  uint64_t **v1428;
  uint64_t v1429;
  unsigned int v1430;
  llvm::Value **v1431;
  llvm::Value **v1432;
  llvm::Value *v1433;
  uint64_t v1434;
  const llvm::Instruction *v1435;
  const llvm::APInt *v1436;
  uint64_t v1437;
  unsigned int *v1438;
  llvm::Value *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  llvm::Value **v1444;
  llvm::Value *v1445;
  int v1446;
  int v1447;
  llvm::Value *v1448;
  __int128 *v1449;
  llvm::DominatorTree *v1450;
  __int128 *v1451;
  llvm::User **v1452;
  uint64_t v1453;
  llvm::User *v1454;
  llvm::User **v1455;
  uint64_t v1456;
  llvm::User *v1457;
  char *v1458;
  llvm::AllocaInst *v1459;
  const llvm::APInt *v1460;
  unsigned int *v1461;
  uint64_t v1462;
  char v1463;
  char v1464;
  char *v1465;
  char *v1466;
  uint64_t *v1467;
  uint64_t *v1468;
  _QWORD *v1469;
  uint64_t v1470;
  char v1471;
  char v1472;
  char *v1473;
  char *v1474;
  llvm::Value *v1475;
  uint64_t v1476;
  uint64_t v1477;
  _QWORD *v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t **v1482;
  uint64_t v1483;
  uint64_t **v1484;
  uint64_t **v1485;
  unsigned __int8 *v1486;
  uint64_t v1487;
  uint64_t *v1488;
  llvm::GetElementPtrInst *v1489;
  const llvm::APInt *v1490;
  llvm::Value **v1491;
  unsigned __int8 *v1492;
  uint64_t v1493;
  unsigned __int8 *v1494;
  uint64_t *v1495;
  uint64_t **v1496;
  char *v1497;
  char *v1498;
  unsigned __int8 **v1499;
  int v1500;
  unsigned __int8 *v1501;
  unsigned __int8 *v1502;
  unsigned __int8 **v1503;
  unsigned __int8 *v1504;
  char *v1505;
  char *v1506;
  unsigned __int8 **v1507;
  int v1508;
  unsigned __int8 *v1509;
  unsigned __int8 *v1510;
  uint64_t *v1511;
  uint64_t *v1512;
  uint64_t *v1513;
  uint64_t v1514;
  uint64_t v1515;
  void *v1516;
  void *v1517;
  char v1518;
  char v1519;
  char *v1520;
  char *v1521;
  llvm::PointerType **v1522;
  uint64_t v1523;
  char *v1524;
  char *v1525;
  unsigned __int8 **v1526;
  int v1527;
  unsigned __int8 *v1528;
  unsigned __int8 *v1529;
  unsigned __int8 *v1530;
  char *v1531;
  char *v1532;
  unsigned __int8 **v1533;
  int v1534;
  unsigned __int8 *v1535;
  unsigned __int8 *v1536;
  unsigned __int8 *v1537;
  uint64_t v1538;
  int8x16_t v1539;
  unsigned int *v1540;
  llvm::Function *v1541;
  uint64_t v1542;
  uint64_t *v1543;
  unint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  char *v1547;
  uint64_t v1548;
  uint64_t v1549;
  llvm::Instruction *v1550;
  uint64_t v1551;
  llvm::PHINode *v1552;
  char **v1553;
  uint64_t v1554;
  _QWORD *v1555;
  uint64_t *v1556;
  llvm::SwitchInst *v1557;
  uint64_t v1558;
  unint64_t v1559;
  unint64_t v1560;
  unint64_t v1561;
  uint64_t v1562;
  void **v1563;
  int v1564;
  uint64_t v1565;
  uint64_t v1566;
  __int16 v1567;
  unint64_t v1568;
  unsigned int v1569;
  uint64_t v1570;
  unsigned __int8 **v1571;
  char *v1572;
  unsigned __int8 **v1573;
  unsigned __int8 **v1574;
  unint64_t *v1575;
  char *v1576;
  uint64_t v1577;
  uint64_t ***v1578;
  char *v1579;
  unsigned __int8 **v1580;
  unsigned __int8 **v1581;
  unsigned __int8 **v1582;
  uint64_t __val;
  char __vala;
  char *__valb;
  const llvm::AllocaInst **__valc;
  unsigned int __vald;
  unsigned int __vale[2];
  unsigned int __valf[2];
  unsigned int __valg[2];
  unsigned int __valh[2];
  unsigned __int8 *v1592;
  std::string v1593;
  std::string v1594;
  int v1595;
  __int128 v1596;
  int v1597;
  unint64_t v1598;
  __int128 v1599;
  unsigned __int8 *v1600;
  unint64_t v1601;
  unsigned __int8 *v1602;
  uint64_t v1603;
  int v1604;
  __int16 v1605;
  void **p_s2;
  uint64_t v1607;
  void **v1608;
  std::string *v1609;
  std::string *v1610;
  void *v1611;
  uint64_t v1612;
  _BYTE v1613[32];
  void *v1614;
  uint64_t v1615;
  _BYTE v1616[32];
  void *__s2;
  uint64_t v1618;
  _QWORD v1619[2];
  __int16 v1620;
  int v1621;
  uint64_t *v1622;
  uint64_t v1623;
  uint64_t v1624;
  void *v1625;
  uint64_t v1626;
  _BYTE v1627[320];
  char v1628;
  __int128 v1629;
  unsigned int v1630;
  __int128 v1631;
  unsigned int v1632;
  __int128 v1633;
  int v1634;
  __int128 v1635;
  unsigned int v1636;
  void *v1637;
  uint64_t v1638;
  _QWORD v1639[10];
  int v1640;
  __int16 v1641;
  char v1642;
  uint64_t v1643;
  uint64_t v1644;
  void *v1645;
  void *v1646;
  void *__base;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  int v1652;
  _QWORD **v1653;
  _QWORD **v1654;
  uint64_t *v1655;
  void **v1656;
  void **v1657;
  uint64_t v1658;
  int v1659;
  __int16 v1660;
  char v1661;
  uint64_t v1662;
  uint64_t v1663;
  void *v1664;
  void *v1665;
  void *v1666;
  uint64_t v1667;
  _BYTE v1668[4864];
  void *v1669;
  void *v1670;
  unint64_t v1671;
  uint64_t v1672;
  void *v1673;
  __int128 v1674;
  llvm::Function *v1675;
  _QWORD *v1676;
  void **v1677;
  _QWORD v1678[2];
  int v1679;
  __int16 v1680;
  char v1681;
  uint64_t v1682;
  uint64_t v1683;
  void *v1684;
  _QWORD v1685[15];
  _QWORD v1686[19];
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  int v1690;
  void *__dst[4];
  uint64_t v1692;
  void *v1693;
  uint64_t v1694;
  llvm::Function *v1695;
  _QWORD *v1696;
  char *v1697;
  uint64_t v1698;
  uint64_t v1699;
  void **p_src;
  void *v1701;
  uint64_t v1702;
  int v1703;
  void *__src;
  uint64_t v1705;
  _BYTE v1706[48];
  unint64_t v1707;
  BOOL v1708;
  std::string::size_type v1709;
  unsigned int v1710;
  llvm::DominatorTree *v1711;
  llvm::Value *v1712;
  void **p_base;
  uint64_t v1714;
  uint64_t v1715;
  unsigned int v1716;
  uint64_t *v1717;
  void *v1718;
  uint64_t v1719;
  int v1720;
  _BYTE v1721[32];
  _BYTE *v1722;
  void *v1723;
  uint64_t v1724;
  int v1725;
  _BYTE v1726[16];
  char v1727;
  BOOL v1728;
  __int16 v1729;
  uint64_t v1730;
  uint64_t v1731;
  char *v1732;
  void *v1733;
  uint64_t v1734;
  uint64_t v1735[5];
  std::string __p;
  uint64_t v1737;
  uint64_t v1738;
  int v1739;
  uint64_t v1740;
  uint64_t v1741;
  char v1742;
  int v1743;
  void *v1744;
  uint64_t v1745;
  const char *v1746;
  uint64_t v1747;
  uint64_t v1748;
  int v1749;
  uint64_t v1750;
  llvm::Function *v1751;
  char v1752;
  int v1753;
  std::string *v1754;
  __int128 *v1755;
  unsigned int v1756[4];
  __int16 v1757;
  uint64_t v1758;

  v7 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v9 = v7;
  v1758 = *MEMORY[0x1E0C80C00];
  v10 = v8[50] == 3 && v8[32] == 0;
  v1551 = (uint64_t)v8;
  v1541 = (llvm::Function *)v7;
  if (!v10)
  {
    __dst[0] = &__dst[2];
    __dst[1] = (void *)0x400000000;
    if ((*(_BYTE *)(v7 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v7);
      v11 = *(llvm::ValueAsMetadata **)(v9 + 88);
      if ((*(_WORD *)(v9 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v9);
        v12 = *(llvm::ValueAsMetadata **)(v9 + 88);
LABEL_8:
        v13 = (llvm::ValueAsMetadata *)((char *)v12 + 40 * *(_QWORD *)(v9 + 96));
        while (1)
        {
          if (v11 == v13)
            goto LABEL_40;
          v14 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 112);
          if (v14)
          {
            v15 = *((_DWORD *)v11 + 8) + 2;
            if (v15 < *(_DWORD *)(v14 + 8))
            {
              v16 = *(_QWORD *)(v14 + 8 * v15 + 40);
              if (v16)
              {
                if (*(char *)(v16 + 19) < 0)
                  break;
              }
            }
          }
          v11 = (llvm::ValueAsMetadata *)((char *)v11 + 40);
        }
        v17 = *(_QWORD *)(v9 + 80);
        if (v17)
          v18 = (llvm::BasicBlock *)(v17 - 24);
        else
          v18 = 0;
        FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v18, 1);
        sub_1C4773D54((uint64_t)&__base, (uint64_t)FirstNonPHIOrDbg, 0, 0, 0);
        v20 = (llvm::PointerType ***)v9;
        v21 = *(_QWORD *)v11;
        if (*(_QWORD *)(*(_QWORD *)v11 + 24))
          v22 = **(llvm::PointerType ***)(v21 + 16);
        else
          v22 = (llvm::PointerType *)llvm::PointerType::get(**v20, 0);
        v23 = (llvm::Type *)(*(_DWORD *)(v21 + 8) >> 8);
        v1620 = 257;
        v24 = sub_1C627CF40((uint64_t)&__base, v22, v23, 0, (uint64_t)&__s2);
        llvm::Value::doRAUW(v11, (llvm::Value *)v24, (llvm::Value *)1);
        NullValue = (uint64_t *)llvm::Constant::getNullValue(v22, v25);
        llvm::DataLayout::getAlignment(v1653[7][5] + 272, *NullValue);
        v28 = v27;
        v29 = (char *)operator new(0x80uLL);
        v30 = v29;
        *((_DWORD *)v29 + 21) = *((_DWORD *)v29 + 21) & 0x38000000 | 2;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 2) = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 5) = 0;
        *((_QWORD *)v29 + 6) = 0;
        *((_QWORD *)v29 + 4) = 0;
        v31 = (unsigned __int8 ***)(v29 + 32);
        *((_QWORD *)v29 + 8) = **(_QWORD **)*NullValue + 1576;
        v32 = (llvm::Value *)(v29 + 64);
        *((_QWORD *)v29 + 3) = v29 + 64;
        *((_QWORD *)v29 + 7) = v29 + 64;
        *((_QWORD *)v29 + 9) = 0;
        v29[80] = 61;
        v29[81] = 0;
        *((_WORD *)v29 + 41) = 0;
        *((_DWORD *)v29 + 21) = 2;
        *(_OWORD *)(v29 + 88) = 0u;
        *(_OWORD *)(v29 + 104) = 0u;
        *((_DWORD *)v29 + 30) = 0;
        *(_QWORD *)v29 = NullValue;
        v35 = NullValue[1];
        v34 = NullValue + 1;
        v33 = v35;
        *((_QWORD *)v29 + 1) = v35;
        if (v35)
          *(_QWORD *)(v33 + 16) = v29 + 8;
        *((_QWORD *)v29 + 2) = v34;
        *v34 = v29;
        if (*((_QWORD *)v29 + 4))
        {
          **((_QWORD **)v29 + 6) = *((_QWORD *)v29 + 5);
          v1538 = *((_QWORD *)v29 + 5);
          if (v1538)
            *(_QWORD *)(v1538 + 16) = *((_QWORD *)v29 + 6);
        }
        *v31 = v24;
        if (v24)
        {
          v36 = (unsigned __int8 ****)(v24 + 1);
          v37 = v24[1];
          *((_QWORD *)v29 + 5) = v37;
          if (v37)
            *((_QWORD *)v37 + 2) = v29 + 40;
          *((_QWORD *)v29 + 6) = v36;
          *v36 = v31;
        }
        *((_WORD *)v29 + 41) = 2 * (v28 & 0x3F);
        v29[124] = 1;
        v1620 = 257;
        (*((void (**)(void **, llvm::Value *, void **, _QWORD **, _QWORD **))*v1657 + 2))(v1657, v32, &__s2, v1653, v1654);
        if (!(_DWORD)v1648)
        {
LABEL_32:
          v38 = *(unsigned int *)(v1551 + 128);
          if ((_DWORD)v38)
          {
            v39 = *(uint64_t **)(v1551 + 120);
            v40 = 8 * v38;
            do
            {
              v41 = *v39++;
              sub_1C604E7B4(v41, (uint64_t)v24, v1551);
              v40 -= 8;
            }
            while (v40);
          }
          v42 = *(unsigned int *)(v1551 + 16);
          if (!(_DWORD)v42)
          {
LABEL_36:
            v43 = __dst[1];
            if (LODWORD(__dst[1]) >= HIDWORD(__dst[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&__dst[2], LODWORD(__dst[1]) + 1, 8);
              v43 = __dst[1];
            }
            *((_QWORD *)__dst[0] + v43) = v24;
            ++LODWORD(__dst[1]);
            sub_1C604E70C((uint64_t)v24, v1551);
            v9 = (uint64_t)v1541;
            if (__base != &v1649)
              free(__base);
LABEL_40:
            v44 = *(_QWORD *)(v9 + 80);
            if (v44)
              v45 = v44 - 24;
            else
              v45 = 0;
            v46 = v45 + 40;
            for (i = *(_QWORD *)(v45 + 48); i != v46; i = *(_QWORD *)(i + 8))
            {
              v48 = i - 24;
              if (!i)
                v48 = 0;
              v49 = *(unsigned __int8 *)(v48 + 16);
              if (v49 == 59)
                v50 = v48;
              else
                v50 = 0;
              if (i)
              {
                if (v49 == 59)
                {
                  v51 = *(_WORD *)(v50 + 18);
                  if ((v51 & 0x80) != 0)
                  {
                    *(_WORD *)(v50 + 18) = v51 & 0xFF7F;
                    v52 = LODWORD(__dst[1]);
                    if (LODWORD(__dst[1]) >= (unint64_t)HIDWORD(__dst[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&__dst[2], LODWORD(__dst[1]) + 1, 8);
                      v52 = LODWORD(__dst[1]);
                    }
                    *((_QWORD *)__dst[0] + v52) = v50;
                    ++LODWORD(__dst[1]);
                    sub_1C604E70C(v50, v1551);
                  }
                }
              }
            }
            if (LODWORD(__dst[1]))
            {
              __base = &v1649;
              v1648 = 0x100000000;
              HIDWORD(v1655) = 0;
              v1651 = 0;
              v1650 = 0;
              v1652 = 0;
              LOBYTE(v1655) = 0;
              v1653 = 0;
              v1654 = (_QWORD **)v1541;
              sub_1C53BA620((uint64_t)&__base, 0);
              llvm::PromoteMemToReg(__dst[0], LODWORD(__dst[1]), &__base, 0);
              sub_1C4DC4E38(&v1650);
              if (__base != &v1649)
                free(__base);
            }
            if (__dst[0] != &__dst[2])
              free(__dst[0]);
            v1540 = (unsigned int *)(v1551 + 264);
            if (!*(_DWORD *)(v1551 + 200) && *(_QWORD *)(v1551 + 264))
              sub_1C63CEFBC(*(_QWORD *)(*(_QWORD *)v1551 - 32 * (*(_DWORD *)(*(_QWORD *)v1551 + 20) & 0x7FFFFFF)));
            v53 = *(unsigned int *)(v1551 + 128);
            if ((_DWORD)v53)
            {
              v54 = *(uint64_t **)(v1551 + 120);
              v55 = 8 * v53;
              do
              {
                v56 = *v54;
                if (*v54 && *(_DWORD *)(*(_QWORD *)(v56 - 32) + 36) == 48)
                {
                  v57 = *(_QWORD *)(v56 - 32 * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF));
                  v58 = sub_1C6040094(v57);
                  if (v57 && v58)
                  {
                    __base = "CoroSave";
                    LOWORD(v1651) = 259;
                    sub_1C604E60C(v57, (uint64_t)&__base);
                  }
                }
                __base = "CoroSuspend";
                LOWORD(v1651) = 259;
                sub_1C604E60C(v56, (uint64_t)&__base);
                ++v54;
                v55 -= 8;
              }
              while (v55);
              v8 = (unsigned int *)v1551;
            }
            else
            {
              v8 = (unsigned int *)v1551;
            }
            v9 = (uint64_t)v1541;
            goto LABEL_78;
          }
          v1511 = *(uint64_t **)(v1551 + 8);
          v1512 = &v1511[v42];
          v1513 = (uint64_t *)(v24 + 1);
          while (1)
          {
            v1514 = *v1511;
            v1515 = *v1511 + 24;
            v1653 = *(_QWORD ***)(*v1511 + 40);
            v1654 = (_QWORD **)v1515;
            v1516 = *(void **)(v1514 + 48);
            __s2 = v1516;
            if (v1516)
            {
              llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v1516, 2);
              v1517 = __s2;
            }
            else
            {
              v1517 = 0;
            }
            sub_1C4774EF4((uint64_t)&__base, 0, (uint64_t)v1517);
            if (__s2)
              llvm::MetadataTracking::untrack((uint64_t)&__s2, (unsigned __int8 *)__s2);
            LOWORD(v1673) = 257;
            llvm::DataLayout::getAlignment(v1653[7][5] + 272, (uint64_t)v22);
            v1519 = v1518;
            v1520 = (char *)operator new(0x60uLL);
            v1521 = v1520;
            v1522 = (llvm::PointerType **)(v1520 + 32);
            *((_QWORD *)v1520 + 2) = 0;
            *((_QWORD *)v1520 + 3) = v1520 + 32;
            v1620 = 257;
            *((_QWORD *)v1520 + 4) = v22;
            *((_QWORD *)v1520 + 5) = 0;
            *((_WORD *)v1520 + 24) = 60;
            *((_DWORD *)v1520 + 13) = 1;
            *(_OWORD *)(v1520 + 56) = 0u;
            *(_OWORD *)(v1520 + 72) = 0u;
            *((_DWORD *)v1520 + 22) = 0;
            *(_QWORD *)v1520 = v24;
            *((_QWORD *)v1520 + 1) = 0;
            if (v24)
            {
              v1523 = *v1513;
              *((_QWORD *)v1520 + 1) = *v1513;
              if (v1523)
                *(_QWORD *)(v1523 + 16) = v1520 + 8;
              *((_QWORD *)v1520 + 2) = v1513;
              *v1513 = (uint64_t)v1520;
            }
            *((_WORD *)v1520 + 25) = 2 * (v1519 & 0x3F);
            v1520[92] = 1;
            llvm::Value::setName((uint64_t ***)v1520 + 4, (uint64_t)&__s2);
            (*((void (**)(void **, llvm::PointerType **, void **, _QWORD **, _QWORD **))*v1657 + 2))(v1657, v1522, &v1669, v1653, v1654);
            if ((_DWORD)v1648)
              break;
LABEL_2275:
            sub_1C604ECE4((uint64_t *)&__base, v1522, v1551);
            if (++v1511 == v1512)
              goto LABEL_36;
          }
          v1524 = (char *)__base;
          v1525 = (char *)__base + 16 * v1648;
          v1526 = (unsigned __int8 **)(v1521 + 80);
          while (1)
          {
            v1527 = *(_DWORD *)v1524;
            v1528 = (unsigned __int8 *)*((_QWORD *)v1524 + 1);
            if (v1528)
            {
              if (!v1527)
              {
                __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v1524 + 1);
                v1581 = v1526;
                *(_QWORD *)__valg = v1525;
                llvm::MetadataTracking::track((uint64_t)&__p, v1528, 2);
                v1526 = v1581;
                v1525 = *(char **)__valg;
                v1529 = *v1581;
                goto LABEL_2289;
              }
            }
            else
            {
              v1529 = *v1526;
              if (!*v1526 && (v1521[55] & 0x20) == 0)
                goto LABEL_2286;
              if (!v1527)
              {
                __p.__r_.__value_.__r.__words[0] = 0;
LABEL_2289:
                if (v1529)
                {
                  v1582 = v1526;
                  *(_QWORD *)__valh = v1525;
                  llvm::MetadataTracking::untrack((uint64_t)v1526, v1529);
                  v1526 = v1582;
                  v1525 = *(char **)__valh;
                }
                v1530 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
                *v1526 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
                if (!v1530)
                  goto LABEL_2286;
                v1580 = v1526;
                *(_QWORD *)__valf = v1525;
                llvm::MetadataTracking::retrack((uint64_t)&__p, v1530, (uint64_t)v1526);
                goto LABEL_2285;
              }
            }
            v1580 = v1526;
            *(_QWORD *)__valf = v1525;
            llvm::Value::setMetadata((llvm::Value *)v1522, *(_DWORD *)v1524, (llvm::MDNode *)v1528);
LABEL_2285:
            v1526 = v1580;
            v1525 = *(char **)__valf;
LABEL_2286:
            v1524 += 16;
            if (v1524 == v1525)
              goto LABEL_2275;
          }
        }
        v1531 = (char *)__base;
        v1532 = (char *)__base + 16 * v1648;
        v1533 = (unsigned __int8 **)(v30 + 112);
        while (1)
        {
          v1534 = *(_DWORD *)v1531;
          v1535 = (unsigned __int8 *)*((_QWORD *)v1531 + 1);
          if (v1535)
          {
            if (!v1534)
            {
              v1669 = (void *)*((_QWORD *)v1531 + 1);
              llvm::MetadataTracking::track((uint64_t)&v1669, v1535, 2);
              v1536 = *v1533;
              goto LABEL_2307;
            }
          }
          else
          {
            v1536 = *v1533;
            if (!*v1533 && (v30[87] & 0x20) == 0)
              goto LABEL_2304;
            if (!v1534)
            {
              v1669 = 0;
LABEL_2307:
              if (v1536)
                llvm::MetadataTracking::untrack((uint64_t)(v30 + 112), v1536);
              v1537 = (unsigned __int8 *)v1669;
              *v1533 = (unsigned __int8 *)v1669;
              if (v1537)
                llvm::MetadataTracking::retrack((uint64_t)&v1669, v1537, (uint64_t)(v30 + 112));
              goto LABEL_2304;
            }
          }
          llvm::Value::setMetadata(v32, *(_DWORD *)v1531, (llvm::MDNode *)v1535);
LABEL_2304:
          v1531 += 16;
          if (v1531 == v1532)
            goto LABEL_32;
        }
      }
    }
    else
    {
      v11 = *(llvm::ValueAsMetadata **)(v7 + 88);
    }
    v12 = v11;
    goto LABEL_8;
  }
  v1540 = v8 + 66;
LABEL_78:
  v60 = v8[4];
  if ((_DWORD)v60)
  {
    v77 = *(uint64_t **)(v1551 + 8);
    v78 = &v77[v60];
    v79 = &__dst[2];
    do
    {
      v80 = *v77;
      __base = "CoroEnd";
      LOWORD(v1651) = 259;
      sub_1C604E60C(v80, (uint64_t)&__base);
      if (v80)
      {
        if (*(_DWORD *)(*(_QWORD *)(v80 - 32) + 36) == 33)
        {
          v81 = sub_1C63CEA44(v80);
          if (v81)
          {
            __val = (uint64_t)v81;
            sub_1C4773D54((uint64_t)&__base, v80, 0, 0, 0);
            v82 = 0;
            v83 = *(unsigned __int8 *)(v80 + 16);
            if (v83 != 84)
            {
              if (v83 == 39)
                v82 = (*(_DWORD *)(v80 + 80) + 1);
              else
                v82 = 2;
            }
            v84 = *(_DWORD *)(v80 + 20);
            v85 = v84 & 0x7FFFFFF;
            v86 = (_QWORD *)(v80 - 32 * v85);
            if (v84 < 0 && (v99 = *(v86 - 1), (v99 & 0xFFFFFFFF0) != 0))
              v87 = (*((_DWORD *)v86 - 3) - *(_DWORD *)((char *)v86 - v99));
            else
              v87 = 0;
            v88 = v80 - 32 * v82 - 32 * v87 - 32;
            __dst[0] = &__dst[2];
            __dst[1] = (void *)0x800000000;
            v89 = v88 - (_QWORD)v86;
            if ((unint64_t)(v88 - (_QWORD)v86) >= 0x101)
            {
              v1562 = v82;
              v98 = v85;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&__dst[2], v89 >> 5, 8);
              v85 = v98;
              v82 = v1562;
              v90 = LODWORD(__dst[1]);
              v79 = (void **)__dst[0];
              v91 = (int)__dst[1];
            }
            else
            {
              v90 = 0;
              v91 = 0;
            }
            if (v86 != (_QWORD *)v88)
            {
              v92 = &v79[v90];
              v93 = 32 * v85 - 32 * v82 - 32 * v87 - 32;
              do
              {
                v94 = (void *)*v86;
                v86 += 4;
                *v92++ = v94;
                v93 -= 32;
              }
              while (v93);
              v79 = (void **)__dst[0];
            }
            v95 = v91 + ((unint64_t)v89 >> 5);
            LODWORD(__dst[1]) = v91 + ((unint64_t)v89 >> 5);
            v96 = *(unsigned __int8 **)(v80 + 48);
            v1592 = v96;
            if (v96)
              llvm::MetadataTracking::track((uint64_t)&v1592, v96, 2);
            v97 = sub_1C63CFAB4(&v1592, __val, (unsigned __int8 **)v79 + 3, v95 - 3, (uint64_t *)&__base);
            if (v1592)
              llvm::MetadataTracking::untrack((uint64_t)&v1592, v1592);
            __s2 = "MustTailCall.Before.CoroEnd";
            v1620 = 259;
            sub_1C604E60C(v97, (uint64_t)&__s2);
            v79 = &__dst[2];
            v9 = (uint64_t)v1541;
            if (__dst[0] != &__dst[2])
              free(__dst[0]);
            if (__base != &v1649)
              free(__base);
          }
        }
      }
      ++v77;
    }
    while (v77 != v78);
  }
  __base = &v1649;
  v61 = 0x2000000000;
  v1648 = 0x2000000000;
  v62 = v9 + 72;
  v63 = *(_QWORD *)(v9 + 80);
  if (v63 != v9 + 72)
  {
    v64 = 0;
    do
    {
      v65 = v63 - 24;
      if (!v63)
        v65 = 0;
      if (*(_QWORD *)(v65 + 40) != v65 + 40)
      {
        for (j = *(_QWORD *)(v65 + 48); ; j = *(_QWORD *)(v67 + 32))
        {
          v67 = j - 24;
          v68 = j ? j - 24 : 0;
          if (!j || *(_BYTE *)(v68 + 16) != 83 || (*(_DWORD *)(j - 4) & 0x7FFFFFF) != 1)
            break;
          if (v64 >= HIDWORD(v1648))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v1649, v64 + 1, 8);
            v64 = v1648;
          }
          *((_QWORD *)__base + v64) = v67;
          v64 = v1648 + 1;
          LODWORD(v1648) = v1648 + 1;
        }
      }
      v63 = *(_QWORD *)(v63 + 8);
    }
    while (v63 != v62);
    v9 = (uint64_t)v1541;
    if (v64)
    {
      do
      {
        v69 = (_DWORD *)*((_QWORD *)__base + v64 - 1);
        LODWORD(v1648) = v64 - 1;
        v70 = v69[5];
        if ((v70 & 0x40000000) != 0)
          v71 = (llvm::Value **)*((_QWORD *)v69 - 1);
        else
          v71 = (llvm::Value **)&v69[-8 * (v70 & 0x7FFFFFF)];
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v69, *v71, (llvm::Value *)1);
        v64 = v1648;
      }
      while ((_DWORD)v1648);
    }
  }
  v72 = (unint64_t)__base;
  if (__base != &v1649)
    free(__base);
  v1669 = &v1671;
  v1670 = (void *)0x800000000;
  v73 = *(_QWORD *)(v9 + 80);
  v1542 = v62;
  if (v73 != v62)
  {
    v74 = 0;
    do
    {
      if (v73)
        v75 = v73 - 24;
      else
        v75 = 0;
      v76 = *(_QWORD *)(v75 + 48);
      if (v76 && *(_BYTE *)(v76 - 8) == 83 && (*(_DWORD *)(v76 - 4) & 0x7FFFFFE) != 0)
      {
        if (v74 >= HIDWORD(v1670))
        {
          v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1669, (uint64_t)&v1671, v74 + 1, 8);
          v74 = v1670;
        }
        *((_QWORD *)v1669 + v74) = v75;
        v74 = (_DWORD)v1670 + 1;
        LODWORD(v1670) = (_DWORD)v1670 + 1;
      }
      v73 = *(_QWORD *)(v73 + 8);
    }
    while (v73 != v62);
    v100 = (unint64_t *)v1669;
    if (v74)
    {
      v1575 = (unint64_t *)((char *)v1669 + 8 * v74);
      v4 = 0x200000000;
      while (1)
      {
        v101 = (uint64_t ***)*v100;
        v102 = *v100 + 40;
        v103 = *(uint64_t ***)(*v100 + 48);
        v104 = v103;
        if (v103 == (uint64_t **)v102)
          goto LABEL_195;
        do
        {
          if (v104)
            v105 = v104 - 3;
          else
            v105 = 0;
          if (*((_BYTE *)v105 + 16) != 83)
          {
            if (*((_BYTE *)v104 - 8) != 79)
              break;
            for (k = (uint64_t)v101[1]; k; k = *(_QWORD *)(k + 8))
            {
              v107 = *(_QWORD *)(k + 24);
              v108 = *(unsigned __int8 *)(v107 + 16);
              if (v107)
                v109 = v108 >= 0x1C;
              else
                v109 = 0;
              if (v109 && v108 - 29 < 0xB)
                break;
            }
            __s2 = v1619;
            v1618 = 0x800000000;
            sub_1C4DBBCC0((unsigned int *)&__s2, k, 0);
            v72 = (unint64_t)__s2;
            if ((_DWORD)v1618)
            {
              v111 = 0;
              while (1)
              {
                v112 = *(_QWORD *)((char *)__s2 + v111);
                v113 = *(_QWORD *)(v112 + 40);
                if (v113 != v112 + 40)
                {
                  if (v113)
                    v114 = v113 - 24;
                  else
                    v114 = 0;
                  v115 = *(unsigned __int8 *)(v114 + 16) - 40;
                  if (v115 < 0xFFFFFFF5)
                    v114 = 0;
                  if (v113)
                  {
                    if (*(_BYTE *)(v114 + 16) == 38 && v115 >= 0xFFFFFFF5)
                      break;
                  }
                }
                v111 += 8;
                if (8 * v1618 == v111)
                  goto LABEL_178;
              }
              v1556 = (uint64_t *)(v101 + 1);
              v169 = **v101;
              __base = "unreachable";
              LOWORD(v1651) = 259;
              v170 = v101[7];
              v171 = (_QWORD **)operator new();
              *v171 = (_QWORD *)(*v169 + 1600);
              v171[1] = 0;
              v172 = *((_DWORD *)v171 + 5) & 0xC0000000;
              v171[3] = 0;
              v173 = (uint64_t *)(v171 + 3);
              *((_DWORD *)v171 + 4) = 22;
              *((_DWORD *)v171 + 5) = v172;
              v171[4] = 0;
              v171[5] = v171 + 5;
              v171[6] = v171 + 5;
              v171[7] = 0;
              if (v170)
              {
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v170 + 9), v171);
                v174 = v170[9];
                v171[3] = v174;
                v171[4] = v170 + 9;
                v174[1] = (uint64_t)v173;
                v170[9] = v173;
              }
              llvm::Value::setName((uint64_t ***)v171, (uint64_t)&__base);
              v175 = (uint64_t *)**v171;
              __base = &v1649;
              v1648 = 0x200000000;
              v1655 = v175;
              v1656 = &v1664;
              v1657 = &v1665;
              v1658 = 0;
              v1659 = 0;
              v1660 = 512;
              v1661 = 7;
              v1662 = 0;
              v1663 = 0;
              v1664 = &unk_1E8167888;
              v1665 = &unk_1E8167A08;
              v1653 = v171;
              v1654 = v171 + 5;
              LLVMBuildUnreachable_0((uint64_t)&__base);
              v176 = **v101;
              if ((*((_BYTE *)v101 + 23) & 0x10) != 0)
              {
                v177 = *(_QWORD *)(*v176 + 152);
                v178 = *(unsigned int *)(*v176 + 168);
                if (!(_DWORD)v178)
                  goto LABEL_248;
                LODWORD(v179) = (v178 - 1) & ((v101 >> 4) ^ (v101 >> 9));
                v180 = (uint64_t ****)(v177 + 16 * v179);
                v181 = *v180;
                if (*v180 != v101)
                {
                  v182 = 1;
                  while (v181 != (uint64_t ***)-4096)
                  {
                    v183 = v179 + v182++;
                    v179 = v183 & (v178 - 1);
                    v181 = *(uint64_t ****)(v177 + 16 * v179);
                    if (v181 == v101)
                    {
                      v180 = (uint64_t ****)(v177 + 16 * v179);
                      goto LABEL_249;
                    }
                  }
LABEL_248:
                  v180 = (uint64_t ****)(v177 + 16 * v178);
                }
LABEL_249:
                v184 = v180[1];
                v187 = *v184;
                v186 = (char *)(v184 + 2);
                v185 = v187;
              }
              else
              {
                v185 = 0;
                v186 = &byte_1C871356D;
              }
              __dst[0] = v186;
              __dst[1] = v185;
              __dst[2] = ".corodispatch";
              LOWORD(v1692) = 773;
              v188 = v101[7];
              v189 = operator new();
              *(_QWORD *)v189 = *v176 + 1600;
              *(_QWORD *)(v189 + 8) = 0;
              v190 = *(_DWORD *)(v189 + 20) & 0xC0000000;
              *(_QWORD *)(v189 + 24) = 0;
              v191 = (uint64_t *)(v189 + 24);
              *(_DWORD *)(v189 + 16) = 22;
              *(_DWORD *)(v189 + 20) = v190;
              *(_QWORD *)(v189 + 32) = 0;
              *(_QWORD *)(v189 + 40) = v189 + 40;
              *(_QWORD *)(v189 + 48) = v189 + 40;
              *(_QWORD *)(v189 + 56) = 0;
              if (v188)
              {
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v188 + 9), (_QWORD *)v189);
                v192 = v101[3];
                *(_QWORD *)(v189 + 24) = v192;
                *(_QWORD *)(v189 + 32) = v101 + 3;
                v192[1] = v191;
                v101[3] = (uint64_t **)v191;
              }
              llvm::Value::setName((uint64_t ***)v189, (uint64_t)__dst);
              v1653 = (_QWORD **)v189;
              v1654 = (_QWORD **)(v189 + 40);
              v1554 = *v1655;
              v193 = *v1556;
              if (*v1556)
              {
                v62 = v1542;
                while (1)
                {
                  v194 = *(_QWORD *)(v193 + 24);
                  v195 = *(unsigned __int8 *)(v194 + 16);
                  v196 = v194 && v195 >= 0x1C;
                  v197 = !v196 || v195 - 29 > 0xA;
                  if (!v197)
                    break;
                  v193 = *(_QWORD *)(v193 + 8);
                  if (!v193)
                  {
                    v298 = 0;
                    goto LABEL_265;
                  }
                }
                v298 = 0;
LABEL_386:
                ++v298;
                while (1)
                {
                  v193 = *(_QWORD *)(v193 + 8);
                  if (!v193)
                    break;
                  v299 = *(_QWORD *)(v193 + 24);
                  v300 = *(unsigned __int8 *)(v299 + 16);
                  if (v299)
                    v301 = v300 >= 0x1C;
                  else
                    v301 = 0;
                  if (v301 && v300 - 29 < 0xB)
                    goto LABEL_386;
                }
              }
              else
              {
                v298 = 0;
                v62 = v1542;
              }
LABEL_265:
              LOWORD(v1692) = 257;
              v198 = sub_1C4867E94((uint64_t)&__base, v1554 + 1912, v298, (uint64_t)__dst);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v104[2] + 5), (uint64_t ***)v104 - 3);
              v199 = *v104;
              v200 = (uint64_t **)v104[1];
              *v200 = *v104;
              v199[1] = (uint64_t)v200;
              *v104 = 0;
              v104[1] = 0;
              v1552 = (llvm::PHINode *)v198;
              sub_1C53DF664((_QWORD *)(*(_QWORD *)(v198 + 40) + 40), v198 + 24, (uint64_t)(v104 - 3));
              v201 = *v1556;
              if (*v1556)
              {
                while (1)
                {
                  v202 = *(_QWORD *)(v201 + 24);
                  v203 = *(unsigned __int8 *)(v202 + 16);
                  v204 = v202 && v203 >= 0x1C;
                  if (v204 && v203 - 29 <= 0xA)
                    break;
                  v201 = *(_QWORD *)(v201 + 8);
                  if (!v201)
                    goto LABEL_275;
                }
                v303 = 0;
LABEL_396:
                ++v303;
                while (1)
                {
                  v201 = *(_QWORD *)(v201 + 8);
                  if (!v201)
                    break;
                  v304 = *(_QWORD *)(v201 + 24);
                  v305 = *(unsigned __int8 *)(v304 + 16);
                  if (v304)
                    v306 = v305 >= 0x1C;
                  else
                    v306 = 0;
                  if (v306 && v305 - 29 < 0xB)
                    goto LABEL_396;
                }
              }
              else
              {
LABEL_275:
                v303 = 0;
              }
              v206 = (char *)operator new(0x48uLL);
              *((_DWORD *)v206 + 7) = *((_DWORD *)v206 + 7) & 0x38000000 | 0x40000000;
              *(_QWORD *)v206 = 0;
              *((_QWORD *)v206 + 1) = ***(_QWORD ***)v198 + 1576;
              *((_QWORD *)v206 + 2) = 0;
              v206[24] = 31;
              v206[25] = 0;
              *((_WORD *)v206 + 13) = 0;
              *((_DWORD *)v206 + 7) = 0x40000000;
              *((_DWORD *)v206 + 16) = 0;
              *((_OWORD *)v206 + 2) = 0u;
              *((_OWORD *)v206 + 3) = 0u;
              llvm::SwitchInst::init((uint64_t)(v206 + 8), v198, (uint64_t)v171, 2 * v303 + 2);
              LOWORD(v1692) = 257;
              v1557 = (llvm::SwitchInst *)(v206 + 8);
              (*((void (**)(void **, char *, void **, _QWORD **, _QWORD **))*v1657 + 2))(v1657, v206 + 8, __dst, v1653, v1654);
              if ((_DWORD)v1648)
              {
                v207 = (char *)__base;
                v208 = (char *)__base + 16 * v1648;
                v209 = (unsigned __int8 **)(v206 + 56);
                do
                {
                  v210 = *(_DWORD *)v207;
                  v211 = (unsigned __int8 *)*((_QWORD *)v207 + 1);
                  if (v211)
                  {
                    if (!v210)
                    {
                      __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v207 + 1);
                      llvm::MetadataTracking::track((uint64_t)&__p, v211, 2);
                      v212 = *v209;
                      if (!*v209)
                      {
LABEL_289:
                        v213 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
                        *v209 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
                        if (v213)
                          llvm::MetadataTracking::retrack((uint64_t)&__p, v213, (uint64_t)(v206 + 56));
                        goto LABEL_286;
                      }
LABEL_283:
                      llvm::MetadataTracking::untrack((uint64_t)(v206 + 56), v212);
                      goto LABEL_289;
                    }
                  }
                  else
                  {
                    v212 = *v209;
                    if (!*v209 && (v206[31] & 0x20) == 0)
                      goto LABEL_286;
                    if (!v210)
                    {
                      __p.__r_.__value_.__r.__words[0] = 0;
                      if (!v212)
                        goto LABEL_289;
                      goto LABEL_283;
                    }
                  }
                  llvm::Value::setMetadata(v1557, *(_DWORD *)v207, (llvm::MDNode *)v211);
LABEL_286:
                  v207 += 16;
                }
                while (v207 != v208);
              }
              for (m = *v1556; m; m = *(_QWORD *)(m + 8))
              {
                v215 = *(_QWORD *)(m + 24);
                v216 = *(unsigned __int8 *)(v215 + 16);
                if (v215)
                  v217 = v216 >= 0x1C;
                else
                  v217 = 0;
                if (v217 && v216 - 29 < 0xB)
                  break;
              }
              __dst[0] = &__dst[2];
              __dst[1] = (void *)0x800000000;
              sub_1C4DBBCC0((unsigned int *)__dst, m, 0);
              v219 = (void **)__dst[0];
              if (LODWORD(__dst[1]))
              {
                v220 = 0;
                v1543 = (uint64_t *)(v101 + 3);
                v1547 = (char *)__dst[0] + 8 * LODWORD(__dst[1]);
                LODWORD(v1558) = (v101 >> 4) ^ (v101 >> 9);
                v1550 = (llvm::Instruction *)v189;
                while (1)
                {
                  v221 = **v101;
                  if ((*((_BYTE *)v101 + 23) & 0x10) != 0)
                    break;
                  v230 = 0;
                  v231 = &byte_1C871356D;
LABEL_312:
                  v233 = (uint64_t ***)*v219;
                  v1744 = v231;
                  v1745 = v230;
                  v1746 = ".from.";
                  LOWORD(v1748) = 773;
                  v234 = v233 >> 4;
                  v1563 = v219;
                  if ((*((_BYTE *)v233 + 23) & 0x10) != 0)
                  {
                    v235 = ***v233;
                    v236 = *(_QWORD *)(v235 + 152);
                    v237 = *(unsigned int *)(v235 + 168);
                    if (!(_DWORD)v237)
                      goto LABEL_319;
                    LODWORD(v238) = (v237 - 1) & (v234 ^ (v233 >> 9));
                    v239 = (uint64_t ****)(v236 + 16 * v238);
                    v240 = *v239;
                    if (*v239 != v233)
                    {
                      v241 = 1;
                      while (v240 != (uint64_t ***)-4096)
                      {
                        v242 = v238 + v241++;
                        v238 = v242 & (v237 - 1);
                        v240 = *(uint64_t ****)(v236 + 16 * v238);
                        if (v240 == v233)
                        {
                          v239 = (uint64_t ****)(v236 + 16 * v238);
                          goto LABEL_320;
                        }
                      }
LABEL_319:
                      v239 = (uint64_t ****)(v236 + 16 * v237);
                    }
LABEL_320:
                    v243 = v239[1];
                    v246 = (uint64_t)*v243;
                    v245 = (char *)(v243 + 2);
                    v244 = v246;
                    goto LABEL_321;
                  }
                  v244 = 0;
                  v245 = &byte_1C871356D;
LABEL_321:
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1744;
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v245;
                  v1737 = v244;
                  LOWORD(v1738) = 1282;
                  v247 = v101[7];
                  v248 = operator new();
                  *(_QWORD *)v248 = *v221 + 1600;
                  *(_QWORD *)(v248 + 8) = 0;
                  v249 = *(_DWORD *)(v248 + 20) & 0xC0000000;
                  *(_QWORD *)(v248 + 24) = 0;
                  v250 = v248 + 24;
                  *(_DWORD *)(v248 + 16) = 22;
                  *(_DWORD *)(v248 + 20) = v249;
                  *(_QWORD *)(v248 + 32) = 0;
                  *(_QWORD *)(v248 + 40) = v248 + 40;
                  *(_QWORD *)(v248 + 48) = v248 + 40;
                  *(_QWORD *)(v248 + 56) = 0;
                  if (v247)
                  {
                    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v247 + 9), (_QWORD *)v248);
                    v251 = *v1543;
                    *(_QWORD *)(v248 + 24) = *v1543;
                    *(_QWORD *)(v248 + 32) = v1543;
                    *(_QWORD *)(v251 + 8) = v250;
                    *v1543 = v250;
                  }
                  llvm::Value::setName((uint64_t ***)v248, (uint64_t)&__p);
                  llvm::updatePhiNodes((uint64_t)v101, (llvm::BasicBlock *)v233, (llvm::BasicBlock *)v248, 0, v252);
                  if ((*((_BYTE *)v101 + 23) & 0x10) != 0)
                  {
                    v253 = ***v101;
                    v254 = *(_QWORD *)(v253 + 152);
                    v255 = *(unsigned int *)(v253 + 168);
                    if (!(_DWORD)v255)
                      goto LABEL_330;
                    LODWORD(v256) = (v255 - 1) & v1558;
                    v257 = (uint64_t ****)(v254 + 16 * v256);
                    v258 = *v257;
                    if (*v257 != v101)
                    {
                      v259 = 1;
                      while (v258 != (uint64_t ***)-4096)
                      {
                        v260 = v256 + v259++;
                        v256 = v260 & (v255 - 1);
                        v258 = *(uint64_t ****)(v254 + 16 * v256);
                        if (v258 == v101)
                        {
                          v257 = (uint64_t ****)(v254 + 16 * v256);
                          goto LABEL_331;
                        }
                      }
LABEL_330:
                      v257 = (uint64_t ****)(v254 + 16 * v255);
                    }
LABEL_331:
                    v261 = v257[1];
                    v264 = (uint64_t)*v261;
                    v263 = (char *)(v261 + 2);
                    v262 = v264;
                    goto LABEL_332;
                  }
                  v262 = 0;
                  v263 = &byte_1C871356D;
LABEL_332:
                  v1744 = v263;
                  v1745 = v262;
                  v1746 = ".from.";
                  LOWORD(v1748) = 773;
                  v1559 = v220;
                  if ((*((_BYTE *)v233 + 23) & 0x10) == 0)
                  {
                    v274 = 0;
                    v275 = &byte_1C871356D;
                    goto LABEL_341;
                  }
                  v265 = ***v233;
                  v266 = *(_QWORD *)(v265 + 152);
                  v267 = *(unsigned int *)(v265 + 168);
                  if (!(_DWORD)v267)
                    goto LABEL_339;
                  LODWORD(v268) = (v267 - 1) & (v234 ^ (v233 >> 9));
                  v269 = (uint64_t ****)(v266 + 16 * v268);
                  v270 = *v269;
                  if (*v269 != v233)
                  {
                    v271 = 1;
                    while (v270 != (uint64_t ***)-4096)
                    {
                      v272 = v268 + v271++;
                      v268 = v272 & (v267 - 1);
                      v270 = *(uint64_t ****)(v266 + 16 * v268);
                      if (v270 == v233)
                      {
                        v269 = (uint64_t ****)(v266 + 16 * v268);
                        goto LABEL_340;
                      }
                    }
LABEL_339:
                    v269 = (uint64_t ****)(v266 + 16 * v267);
                  }
LABEL_340:
                  v273 = v269[1];
                  v276 = (uint64_t)*v273;
                  v275 = (char *)(v273 + 2);
                  v274 = v276;
LABEL_341:
                  v277 = v102;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1744;
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v275;
                  v1737 = v274;
                  LOWORD(v1738) = 1282;
                  llvm::Value::setName((uint64_t ***)v248, (uint64_t)&__p);
                  v1653 = (_QWORD **)v248;
                  v1654 = (_QWORD **)(v248 + 40);
                  v278 = (char *)operator new(0x60uLL);
                  v279 = v278;
                  *((_DWORD *)v278 + 13) = *((_DWORD *)v278 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v278 = 0;
                  *((_QWORD *)v278 + 2) = 0;
                  *((_QWORD *)v278 + 1) = 0;
                  *((_QWORD *)v278 + 4) = ***v101 + 1576;
                  v280 = (llvm::Value *)(v278 + 32);
                  *((_QWORD *)v278 + 3) = v278 + 32;
                  *((_QWORD *)v278 + 5) = 0;
                  v278[48] = 30;
                  v278[49] = 0;
                  *((_WORD *)v278 + 25) = 0;
                  *((_DWORD *)v278 + 13) = 1;
                  *(_OWORD *)(v278 + 56) = 0u;
                  *(_OWORD *)(v278 + 72) = 0u;
                  *((_DWORD *)v278 + 22) = 0;
                  *(_QWORD *)v278 = v101;
                  v281 = v101[1];
                  *((_QWORD *)v278 + 1) = v281;
                  if (v281)
                    v281[2] = (uint64_t *)(v278 + 8);
                  *((_QWORD *)v278 + 2) = v1556;
                  *v1556 = (uint64_t)v278;
                  LOWORD(v1738) = 257;
                  (*((void (**)(void **, llvm::Value *, std::string *, _QWORD **, _QWORD **))*v1657 + 2))(v1657, v280, &__p, v1653, v1654);
                  if ((_DWORD)v1648)
                  {
                    v282 = (char *)__base;
                    v283 = (char *)__base + 16 * v1648;
                    v284 = (unsigned __int8 **)(v279 + 80);
                    do
                    {
                      v285 = *(_DWORD *)v282;
                      v286 = (unsigned __int8 *)*((_QWORD *)v282 + 1);
                      if (v286)
                      {
                        if (!v285)
                        {
                          v1744 = (void *)*((_QWORD *)v282 + 1);
                          llvm::MetadataTracking::track((uint64_t)&v1744, v286, 2);
                          v287 = *v284;
                          if (!*v284)
                          {
LABEL_356:
                            v288 = (unsigned __int8 *)v1744;
                            *v284 = (unsigned __int8 *)v1744;
                            if (v288)
                              llvm::MetadataTracking::retrack((uint64_t)&v1744, v288, (uint64_t)(v279 + 80));
                            goto LABEL_353;
                          }
LABEL_350:
                          llvm::MetadataTracking::untrack((uint64_t)(v279 + 80), v287);
                          goto LABEL_356;
                        }
                      }
                      else
                      {
                        v287 = *v284;
                        if (!*v284 && (v279[55] & 0x20) == 0)
                          goto LABEL_353;
                        if (!v285)
                        {
                          v1744 = 0;
                          if (!v287)
                            goto LABEL_356;
                          goto LABEL_350;
                        }
                      }
                      llvm::Value::setMetadata(v280, *(_DWORD *)v282, (llvm::MDNode *)v286);
LABEL_353:
                      v282 += 16;
                    }
                    while (v282 != v283);
                  }
                  sub_1C604EEBC(v101, v248, (uint64_t)v1550, 0);
                  v290 = (uint64_t ***)v233[5];
                  if (v290 == v233 + 5)
                  {
                    v292 = 0;
                  }
                  else
                  {
                    if (v290)
                      v291 = (uint64_t)(v290 - 3);
                    else
                      v291 = 0;
                    if (*(unsigned __int8 *)(v291 + 16) - 29 >= 0xB)
                      v292 = 0;
                    else
                      v292 = v291;
                  }
                  v62 = v1542;
                  v102 = v277;
                  llvm::setUnwindEdgeTo(v292, v1550, v289);
                  v294 = *(llvm::ConstantInt **)(v1554 + 1912);
                  v295 = *(_DWORD *)(v1554 + 1920);
                  LODWORD(__p.__r_.__value_.__r.__words[1]) = v295 >> 8;
                  if (v295 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v1559, 0);
                  }
                  else
                  {
                    if (v295 <= 0xFF)
                      v296 = 0;
                    else
                      v296 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v295);
                    __p.__r_.__value_.__r.__words[0] = v296 & v1559;
                  }
                  v297 = llvm::ConstantInt::get(v294, (llvm::LLVMContext *)&__p, v293);
                  if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
                    MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                  sub_1C477667C(v1552, (uint64_t)v297, (uint64_t)v233);
                  llvm::SwitchInst::addCase(v1557, v297, (llvm::BasicBlock *)v248);
                  v220 = v1559 + 1;
                  v219 = v1563 + 1;
                  if (v1563 + 1 == (void **)v1547)
                  {
                    v219 = (void **)__dst[0];
                    goto LABEL_381;
                  }
                }
                v222 = *(_QWORD *)(*v221 + 152);
                v223 = *(unsigned int *)(*v221 + 168);
                if ((_DWORD)v223)
                {
                  LODWORD(v224) = (v223 - 1) & v1558;
                  v225 = (uint64_t ****)(v222 + 16 * v224);
                  v226 = *v225;
                  if (*v225 != v101)
                  {
                    v227 = 1;
                    while (v226 != (uint64_t ***)-4096)
                    {
                      v228 = v224 + v227++;
                      v224 = v228 & (v223 - 1);
                      v226 = *(uint64_t ****)(v222 + 16 * v224);
                      if (v226 == v101)
                      {
                        v225 = (uint64_t ****)(v222 + 16 * v224);
                        goto LABEL_311;
                      }
                    }
                    goto LABEL_310;
                  }
                }
                else
                {
LABEL_310:
                  v225 = (uint64_t ****)(v222 + 16 * v223);
                }
LABEL_311:
                v229 = v225[1];
                v232 = (uint64_t)*v229;
                v231 = (char *)(v229 + 2);
                v230 = v232;
                goto LABEL_312;
              }
LABEL_381:
              if (v219 != &__dst[2])
                free(v219);
              if (__base != &v1649)
                free(__base);
              v117 = 0;
              v72 = (unint64_t)__s2;
            }
            else
            {
LABEL_178:
              v117 = 1;
            }
            if ((_QWORD *)v72 != v1619)
              free((void *)v72);
            if (v117)
            {
              v103 = v101[6];
              break;
            }
            goto LABEL_234;
          }
          v104 = (uint64_t **)v104[1];
        }
        while (v104 != (uint64_t **)v102);
        while (v103 != (uint64_t **)v102)
        {
          v118 = (llvm::Value *)(v103 - 3);
          if (v103)
            v119 = v103 - 3;
          else
            v119 = 0;
          if (*((_BYTE *)v119 + 16) != 83)
          {
            if (*((_BYTE *)v103 - 8) != 94)
              break;
            v120 = (uint64_t)*(v103 - 3);
            LOWORD(v1651) = 257;
            v121 = operator new(0x48uLL);
            v121[1] = v120;
            v122 = (llvm::Value *)(v121 + 1);
            *v121 = 0;
            v121[2] = 0;
            v121[3] = 0x4000000000000053;
            *((_OWORD *)v121 + 2) = 0u;
            v123 = (char *)(v121 + 4);
            *((_OWORD *)v121 + 3) = 0u;
            *((_DWORD *)v121 + 16) = 0;
            v124 = v103[2];
            v121[6] = v124;
            *((_WORD *)v124 + 9) &= ~0x8000u;
            if ((*((_BYTE *)v121 + 31) & 0x10) != 0)
            {
              v167 = v124[7];
              if (v167)
              {
                v168 = *(llvm::ValueSymbolTable **)(v167 + 104);
                if (v168)
                  llvm::ValueSymbolTable::reinsertValue(v168, v122);
              }
            }
            v125 = *v103;
            v121[4] = *v103;
            v121[5] = v103;
            v125[1] = (uint64_t)v123;
            *v103 = (uint64_t *)v123;
            *((_DWORD *)v121 + 17) = 1;
            llvm::Value::setName((uint64_t ***)v122, (uint64_t)&__base);
            v126 = *((unsigned int *)v121 + 17);
            v127 = operator new(40 * v126);
            *v121 = v127;
            if ((_DWORD)v126)
            {
              v128 = &v127[4 * v126];
              do
              {
                *v127 = 0;
                v127[1] = 0;
                v127[2] = 0;
                v127[3] = v122;
                v127 += 4;
              }
              while (v127 != v128);
            }
            llvm::Value::takeName(v122, v118);
            llvm::Value::doRAUW(v118, v122, (llvm::Value *)1);
            v129 = 0;
            goto LABEL_196;
          }
          v103 = (uint64_t **)v103[1];
        }
LABEL_195:
        v118 = 0;
        v122 = 0;
        v129 = 1;
LABEL_196:
        for (n = (uint64_t)v101[1]; n; n = *(_QWORD *)(n + 8))
        {
          v131 = *(_QWORD *)(n + 24);
          v132 = *(unsigned __int8 *)(v131 + 16);
          if (v131)
            v133 = v132 >= 0x1C;
          else
            v133 = 0;
          if (v133 && v132 - 29 < 0xB)
            break;
        }
        __base = &v1649;
        v1648 = 0x800000000;
        sub_1C4DBBCC0((unsigned int *)&__base, n, 0);
        if ((_DWORD)v1648)
        {
          v136 = (llvm **)__base;
          v137 = (llvm **)((char *)__base + 8 * v1648);
          while (1)
          {
            v138 = *v136;
            LODWORD(v1692) = 0;
            memset(__dst, 0, sizeof(__dst));
            BYTE4(v1692) = 1;
            v1620 = 257;
            v139 = (uint64_t ***)llvm::ehAwareSplitEdge(v138, (uint64_t)v101, v118, v122, (uint64_t)__dst, (llvm::MemorySSAUpdater *)&__s2, v135);
            v140 = (uint64_t)v139;
            if ((*((_BYTE *)v101 + 23) & 0x10) != 0)
              break;
            v150 = 0;
            v151 = &byte_1C871356D;
LABEL_217:
            __s2 = v151;
            v1618 = v150;
            v1619[0] = ".from.";
            v1620 = 773;
            if ((*((_BYTE *)v138 + 23) & 0x10) == 0)
            {
              v162 = 0;
              v163 = &byte_1C871356D;
              goto LABEL_226;
            }
            v153 = ***(_QWORD ***)v138;
            v154 = *(_QWORD *)(v153 + 152);
            v155 = *(unsigned int *)(v153 + 168);
            if (!(_DWORD)v155)
              goto LABEL_224;
            LODWORD(v156) = (v155 - 1) & ((v138 >> 4) ^ (v138 >> 9));
            v157 = (llvm **)(v154 + 16 * v156);
            v158 = *v157;
            if (*v157 != v138)
            {
              v159 = 1;
              while (v158 != (llvm *)-4096)
              {
                v160 = v156 + v159++;
                v156 = v160 & (v155 - 1);
                v158 = *(llvm **)(v154 + 16 * v156);
                if (v158 == v138)
                {
                  v157 = (llvm **)(v154 + 16 * v156);
                  goto LABEL_225;
                }
              }
LABEL_224:
              v157 = (llvm **)(v154 + 16 * v155);
            }
LABEL_225:
            v161 = v157[1];
            v164 = *(void **)v161;
            v163 = (char *)v161 + 16;
            v162 = v164;
LABEL_226:
            __dst[0] = &__s2;
            __dst[2] = v163;
            __dst[3] = v162;
            LOWORD(v1692) = 1282;
            llvm::Value::setName(v139, (uint64_t)__dst);
            sub_1C604EEBC(v101, v140, (uint64_t)v138, (uint64_t)v122);
            if (++v136 == v137)
              goto LABEL_230;
          }
          v141 = ***v101;
          v142 = *(_QWORD *)(v141 + 152);
          v143 = *(unsigned int *)(v141 + 168);
          if ((_DWORD)v143)
          {
            LODWORD(v144) = (v143 - 1) & ((v101 >> 4) ^ (v101 >> 9));
            v145 = (uint64_t ****)(v142 + 16 * v144);
            v146 = *v145;
            if (*v145 != v101)
            {
              v147 = 1;
              while (v146 != (uint64_t ***)-4096)
              {
                v148 = v144 + v147++;
                v144 = v148 & (v143 - 1);
                v146 = *(uint64_t ****)(v142 + 16 * v144);
                if (v146 == v101)
                {
                  v145 = (uint64_t ****)(v142 + 16 * v144);
                  goto LABEL_216;
                }
              }
              goto LABEL_215;
            }
          }
          else
          {
LABEL_215:
            v145 = (uint64_t ****)(v142 + 16 * v143);
          }
LABEL_216:
          v149 = v145[1];
          v152 = (uint64_t)*v149;
          v151 = (char *)(v149 + 2);
          v150 = v152;
          goto LABEL_217;
        }
LABEL_230:
        if ((v129 & 1) == 0)
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v118 + 5) + 40, (uint64_t ***)v118);
          v165 = *((_QWORD *)v118 + 3);
          v166 = (_QWORD *)*((_QWORD *)v118 + 4);
          *v166 = v165;
          *(_QWORD *)(v165 + 8) = v166;
          *((_QWORD *)v118 + 3) = 0;
          *((_QWORD *)v118 + 4) = 0;
          llvm::Value::deleteValue(v118);
        }
        v72 = (unint64_t)__base;
        v62 = v1542;
        if (__base != &v1649)
          free(__base);
LABEL_234:
        if (++v100 == v1575)
        {
          v100 = (unint64_t *)v1669;
          break;
        }
      }
    }
    if (v100 != &v1671)
      free(v100);
  }
  __base = &v1649;
  v1648 = 0x2000000000;
  v308 = *((_QWORD *)v1541 + 10);
  if (v308 == v62)
  {
    v309 = 0;
    v1666 = v1668;
    v1667 = 0x2000000000;
LABEL_422:
    __vala = 1;
    goto LABEL_492;
  }
  LODWORD(v310) = 0;
  do
  {
    if (v308)
      v311 = v308 - 24;
    else
      v311 = 0;
    if (v310 >= HIDWORD(v1648))
    {
      v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v1649, v310 + 1, 8);
      LODWORD(v310) = v1648;
    }
    *((_QWORD *)__base + v310) = v311;
    v310 = (v1648 + 1);
    LODWORD(v1648) = v1648 + 1;
    v308 = *(_QWORD *)(v308 + 8);
  }
  while (v308 != v62);
  if (v310 >= 2)
  {
    qsort(__base, v310, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4776710);
    LODWORD(v310) = v1648;
  }
  v1666 = v1668;
  v1667 = 0x2000000000;
  if (!(_DWORD)v310)
  {
    v309 = 0;
    goto LABEL_422;
  }
  v312 = v310;
  if (v310 < 0x21)
  {
    v335 = 0;
    v313 = v1668;
    goto LABEL_462;
  }
  __dst[0] = 0;
  v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v1666, v310, 152, (unint64_t *)__dst);
  v313 = (char *)v72;
  v314 = (char *)v1666;
  if (!(_DWORD)v1667)
    goto LABEL_459;
  v315 = 0;
  v316 = 152 * v1667;
  do
  {
    v317 = &v313[v315];
    v318 = &v314[v315];
    v319 = &v313[v315 + 16];
    *(_QWORD *)v317 = v319;
    *((_QWORD *)v317 + 1) = 0x600000000;
    if (v314 != v313)
    {
      v320 = *((_DWORD *)v318 + 2);
      if (v320)
      {
        v321 = &v314[v315];
        v323 = (uint64_t)&v314[v315 + 16];
        v322 = *(const void **)&v314[v315];
        if ((const void *)v323 != v322)
        {
          v334 = *((_DWORD *)v321 + 3);
          *(_QWORD *)v317 = v322;
          *((_DWORD *)v317 + 2) = v320;
          *((_DWORD *)v317 + 3) = v334;
          *(_QWORD *)v321 = v323;
          *((_DWORD *)v321 + 3) = 0;
          goto LABEL_433;
        }
        if (v320 >= 7)
        {
          v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313[v315], (uint64_t)&v313[v315 + 16], *((unsigned int *)v318 + 2), 8);
          v324 = *((unsigned int *)v318 + 2);
          if (!(_DWORD)v324)
            goto LABEL_432;
          v322 = *(const void **)v318;
          v319 = *(char **)v317;
        }
        else
        {
          v324 = *((unsigned int *)v318 + 2);
        }
        v72 = (unint64_t)memcpy(v319, v322, 8 * v324);
LABEL_432:
        *((_DWORD *)v317 + 2) = v320;
LABEL_433:
        *((_DWORD *)v318 + 2) = 0;
      }
    }
    *((_DWORD *)v317 + 16) = *((_DWORD *)v318 + 16);
    v325 = v317 + 88;
    *((_QWORD *)v317 + 9) = v317 + 88;
    v326 = (void **)(v317 + 72);
    *((_QWORD *)v317 + 10) = 0x600000000;
    v327 = *((_DWORD *)v318 + 20);
    if (v327 && v318 != v317)
    {
      v328 = &v314[v315];
      v329 = *(void **)&v314[v315 + 72];
      v330 = (uint64_t)&v314[v315 + 88];
      if ((void *)v330 == v329)
      {
        if (v327 < 7)
        {
          v331 = *((unsigned int *)v318 + 20);
          goto LABEL_439;
        }
        v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v317 + 72), (uint64_t)(v317 + 88), *((unsigned int *)v318 + 20), 8);
        v331 = *((unsigned int *)v318 + 20);
        if ((_DWORD)v331)
        {
          v329 = (void *)*((_QWORD *)v328 + 9);
          v325 = *v326;
LABEL_439:
          v72 = (unint64_t)memcpy(v325, v329, 8 * v331);
        }
        *((_DWORD *)v317 + 20) = v327;
      }
      else
      {
        v333 = *(_DWORD *)&v314[v315 + 84];
        *v326 = v329;
        *((_DWORD *)v317 + 20) = v327;
        *((_DWORD *)v317 + 21) = v333;
        *((_QWORD *)v328 + 9) = v330;
        *(_DWORD *)&v314[v315 + 84] = 0;
      }
      *((_DWORD *)v318 + 20) = 0;
    }
    v332 = &v313[v315];
    *((_DWORD *)v332 + 34) = *(_DWORD *)&v314[v315 + 136];
    *((_WORD *)v332 + 72) = *(_WORD *)&v314[v315 + 144];
    v315 += 152;
  }
  while (v316 != v315);
  v314 = (char *)v1666;
  v312 = v310;
  if ((_DWORD)v1667)
  {
    v336 = 152 * v1667;
    do
    {
      v337 = &v314[v336];
      v338 = *(char **)&v314[v336 - 80];
      if (&v314[v336 - 64] != v338)
        free(v338);
      v72 = *((_QWORD *)v337 - 19);
      if (v337 - 136 != (char *)v72)
        free((void *)v72);
      v336 -= 152;
    }
    while (v336);
    v314 = (char *)v1666;
  }
LABEL_459:
  v339 = (int)__dst[0];
  if (v314 != v1668)
    free(v314);
  v1666 = v313;
  HIDWORD(v1667) = v339;
  v335 = v1667;
LABEL_462:
  if (v335 != (_DWORD)v310)
  {
    v340 = 152 * v335;
    v341 = 152 * v312;
    do
    {
      v342 = &v313[v340];
      *((_OWORD *)v342 + 4) = 0uLL;
      *((_OWORD *)v342 + 5) = 0uLL;
      *((_QWORD *)v342 + 18) = 0;
      *((_OWORD *)v342 + 7) = 0uLL;
      *((_OWORD *)v342 + 8) = 0uLL;
      *((_OWORD *)v342 + 6) = 0uLL;
      *((_OWORD *)v342 + 2) = 0uLL;
      *((_OWORD *)v342 + 3) = 0uLL;
      *(_OWORD *)&v313[v340 + 16] = 0uLL;
      *(_QWORD *)v342 = &v313[v340 + 16];
      *((_QWORD *)v342 + 1) = 0x600000000;
      *((_QWORD *)v342 + 9) = &v313[v340 + 88];
      v341 -= 152;
      v313 += 152;
      *((_DWORD *)v342 + 21) = 6;
    }
    while (v340 != v341);
  }
  v343 = 0;
  LODWORD(v1667) = v310;
  v344 = (v310 + 63) >> 6;
  v345 = 136;
  do
  {
    v346 = (char *)v1666;
    v347 = (char *)v1666 + v345;
    v348 = (char *)v1666 + v345 - 136;
    v349 = *(unsigned int *)((char *)v1666 + v345 - 128);
    if ((*(_DWORD *)((_BYTE *)v1666 + v345 - 72) & 0x3F) != 0)
      *(_QWORD *)(*v348 + 8 * v349 - 8) &= ~(-1 << (*(_DWORD *)((_BYTE *)v1666 + v345 - 72) & 0x3F));
    v350 = v349;
    *((_DWORD *)v347 - 18) = v310;
    v351 = (v310 + 63) >> 6;
    LOBYTE(v352) = v310;
    if ((_DWORD)v349 != (_DWORD)v344)
    {
      v353 = &v346[v345];
      if (v349 > v344)
      {
        *((_DWORD *)v353 - 32) = v344;
        v351 = (v310 + 63) >> 6;
        LOBYTE(v352) = v310;
      }
      else
      {
        v354 = v349;
        if (v344 > *(_DWORD *)&v346[v345 - 124])
        {
          v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v348, (uint64_t)&v346[v345 - 120], v344, 8);
          v354 = *((unsigned int *)v353 - 32);
          v350 = *((_DWORD *)v353 - 32);
        }
        if (v344 != v349)
          bzero((void *)(*v348 + 8 * v354), 8 * (v344 - v349));
        v351 = v350 + v344 - v349;
        *((_DWORD *)v353 - 32) = v351;
        v352 = *((_DWORD *)v347 - 18);
      }
    }
    v355 = v352 & 0x3F;
    if (v355)
      *(_QWORD *)(*v348 + 8 * v351 - 8) &= ~(-1 << v355);
    v356 = &v346[v345 - 64];
    v357 = *(unsigned int *)&v346[v345 - 56];
    if ((*(_DWORD *)&v346[v345] & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)v356 + 8 * v357 - 8) &= ~(-1 << (*(_DWORD *)&v346[v345] & 0x3F));
    v358 = v357;
    v359 = &v346[v345];
    *(_DWORD *)&v346[v345] = v310;
    v360 = (v310 + 63) >> 6;
    LOBYTE(v361) = v310;
    if ((_DWORD)v357 != (_DWORD)v344)
    {
      if (v357 > v344)
      {
        *((_DWORD *)v359 - 14) = v344;
        v360 = (v310 + 63) >> 6;
        LOBYTE(v361) = v310;
      }
      else
      {
        v362 = v357;
        if (v344 > *(_DWORD *)&v346[v345 - 52])
        {
          v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346[v345 - 64], (uint64_t)&v346[v345 - 48], v344, 8);
          v362 = *((unsigned int *)v359 - 14);
          v358 = *((_DWORD *)v359 - 14);
        }
        if (v344 != v357)
          bzero((void *)(*(_QWORD *)v356 + 8 * v362), 8 * (v344 - v357));
        v360 = v358 + v344 - v357;
        *((_DWORD *)v359 - 14) = v360;
        v361 = *(_DWORD *)&v346[v345];
      }
    }
    v363 = v361 & 0x3F;
    if (v363)
      *(_QWORD *)(*(_QWORD *)v356 + 8 * v360 - 8) &= ~(-1 << v363);
    *(_QWORD *)(*v348 + 8 * (v343 >> 6)) |= 1 << v343;
    ++v343;
    v345 += 152;
    v309 = v310;
  }
  while (v310 != v343);
  __vala = 0;
LABEL_492:
  v364 = *(unsigned int *)(v1551 + 16);
  if ((_DWORD)v364)
  {
    v365 = *(_QWORD *)(v1551 + 8);
    v366 = v365 + 8 * v364;
    v367 = __base;
    v368 = v1648;
    v369 = v1666;
    do
    {
      if ((_DWORD)v368)
      {
        v370 = v367;
        v72 = v368;
        do
        {
          v371 = v72 >> 1;
          v372 = (unint64_t *)&v370[8 * (v72 >> 1)];
          v374 = *v372;
          v373 = v372 + 1;
          v72 += ~(v72 >> 1);
          if (v374 < *(_QWORD *)(*(_QWORD *)v365 + 40))
            v370 = v373;
          else
            v72 = v371;
        }
        while (v72);
      }
      else
      {
        v370 = v367;
      }
      v369[152 * ((v370 - v367) >> 3) + 145] = 1;
      v365 += 8;
    }
    while (v365 != v366);
  }
  v1544 = v309;
  v375 = *(unsigned int *)(v1551 + 128);
  if ((_DWORD)v375)
  {
    v453 = *(uint64_t **)(v1551 + 120);
    v454 = &v453[v375];
    do
    {
      v455 = *v453;
      v456 = v1648;
      if ((_DWORD)v1648)
      {
        v457 = __base;
        do
        {
          v458 = v456 >> 1;
          v459 = (unint64_t *)&v457[8 * (v456 >> 1)];
          v461 = *v459;
          v460 = v459 + 1;
          v456 += ~(v456 >> 1);
          if (v461 < *(_QWORD *)(v455 + 40))
            v457 = v460;
          else
            v456 = v458;
        }
        while (v456);
      }
      else
      {
        v457 = __base;
      }
      v462 = (char *)v1666 + 152 * ((v457 - (_BYTE *)__base) >> 3);
      v462[144] = 1;
      v463 = v462 + 72;
      v464 = (unsigned int *)(v462 + 136);
      v465 = *((_DWORD *)v462 + 16);
      if (*((_DWORD *)v462 + 34) < v465)
      {
        v486 = *((_DWORD *)v462 + 34) & 0x3F;
        v487 = *((unsigned int *)v462 + 20);
        if (v486)
          *(_QWORD *)(*v463 + 8 * v487 - 8) &= ~(-1 << v486);
        v488 = v487;
        *v464 = v465;
        v489 = v465 + 63;
        if ((_DWORD)v487 != (v465 + 63) >> 6)
        {
          v490 = v489 >> 6;
          if (v487 > v490)
          {
            *((_DWORD *)v462 + 20) = v490;
            v488 = v489 >> 6;
          }
          else
          {
            v491 = v487;
            if (v490 > *((_DWORD *)v462 + 21))
            {
              v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v462 + 72), (uint64_t)(v462 + 88), v490, 8);
              v491 = *((unsigned int *)v462 + 20);
              v488 = *((_DWORD *)v462 + 20);
            }
            if (v490 != v487)
              bzero((void *)(*v463 + 8 * v491), 8 * (v490 - v487));
            v488 += v490 - v487;
            *((_DWORD *)v462 + 20) = v488;
            v465 = *v464;
          }
        }
        v492 = v465 & 0x3F;
        if (v492)
          *(_QWORD *)(*v463 + 8 * v488 - 8) &= ~(-1 << v492);
      }
      v466 = *((unsigned int *)v462 + 2);
      if ((_DWORD)v466)
      {
        v467 = *(uint64_t **)v462;
        v468 = (_QWORD *)*v463;
        do
        {
          v469 = *v467++;
          *v468++ |= v469;
          --v466;
        }
        while (v466);
      }
      if (v455 && *(_DWORD *)(*(_QWORD *)(v455 - 32) + 36) == 48)
      {
        v470 = *(_QWORD *)(v455 - 32 * (*(_DWORD *)(v455 + 20) & 0x7FFFFFF));
        v72 = sub_1C6040094(v470);
        if (v470 && (_DWORD)v72 != 0)
        {
          v472 = v1648;
          if ((_DWORD)v1648)
          {
            v473 = __base;
            do
            {
              v474 = v472 >> 1;
              v475 = (unint64_t *)&v473[8 * (v472 >> 1)];
              v477 = *v475;
              v476 = v475 + 1;
              v472 += ~(v472 >> 1);
              if (v477 < *(_QWORD *)(v470 + 40))
                v473 = v476;
              else
                v472 = v474;
            }
            while (v472);
          }
          else
          {
            v473 = __base;
          }
          v478 = (char *)v1666 + 152 * ((v473 - (_BYTE *)__base) >> 3);
          v478[144] = 1;
          v479 = v478 + 72;
          v480 = (unsigned int *)(v478 + 136);
          v481 = *((_DWORD *)v478 + 16);
          if (*((_DWORD *)v478 + 34) < v481)
          {
            v493 = *((_DWORD *)v478 + 34) & 0x3F;
            v494 = *((unsigned int *)v478 + 20);
            if (v493)
              *(_QWORD *)(*v479 + 8 * v494 - 8) &= ~(-1 << v493);
            v495 = v494;
            *v480 = v481;
            v496 = v481 + 63;
            if ((_DWORD)v494 != (v481 + 63) >> 6)
            {
              v497 = v496 >> 6;
              if (v494 > v497)
              {
                *((_DWORD *)v478 + 20) = v497;
                v495 = v496 >> 6;
              }
              else
              {
                v498 = v494;
                if (v497 > *((_DWORD *)v478 + 21))
                {
                  v72 = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v478 + 72), (uint64_t)(v478 + 88), v497, 8);
                  v498 = *((unsigned int *)v478 + 20);
                  v495 = *((_DWORD *)v478 + 20);
                }
                if (v497 != v494)
                  bzero((void *)(*v479 + 8 * v498), 8 * (v497 - v494));
                v495 += v497 - v494;
                *((_DWORD *)v478 + 20) = v495;
                v481 = *v480;
              }
            }
            v499 = v481 & 0x3F;
            if (v499)
              *(_QWORD *)(*v479 + 8 * v495 - 8) &= ~(-1 << v499);
          }
          v482 = *((unsigned int *)v478 + 2);
          if ((_DWORD)v482)
          {
            v483 = *(uint64_t **)v478;
            v484 = (_QWORD *)*v479;
            do
            {
              v485 = *v483++;
              *v484++ |= v485;
              --v482;
            }
            while (v482);
          }
        }
      }
      ++v453;
    }
    while (v453 != v454);
  }
  if ((__vala & 1) == 0)
  {
    v500 = 0;
    v501 = 0;
    v1553 = (char **)&__dst[2];
    v1555 = v1619;
    while (1)
    {
      v502 = v501;
      v503 = *((_QWORD *)__base + v500);
      v504 = *(_QWORD *)(v503 + 40);
      v1548 = v500;
      if (v504 != v503 + 40)
        break;
LABEL_804:
      if (v1548 + 1 < v1544)
        v500 = v1548 + 1;
      else
        v500 = 0;
      v501 = (v1548 + 1 < v1544) & v502;
      if (v1548 + 1 >= v1544 && (v502 & 1) == 0)
        goto LABEL_505;
    }
    if (v504)
      v505 = v504 - 24;
    else
      v505 = 0;
    v506 = *(unsigned __int8 *)(v505 + 16);
    v507 = v506 - 29;
    if (v506 != 30)
    {
      v508 = 2;
      switch(v507)
      {
        case 1:
          __break(1u);
          goto LABEL_2317;
        case 2:
          v508 = (*(_DWORD *)(v505 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_811;
        case 3:
        case 9:
          v508 = (*(_DWORD *)(v505 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_811;
        case 4:
          goto LABEL_685;
        case 7:
          v508 = *(_WORD *)(v505 + 18) & 1;
          goto LABEL_811;
        case 8:
          v508 = 1;
          goto LABEL_685;
        case 10:
          v508 = *(_DWORD *)(v505 + 80) + 1;
LABEL_811:
          if (!v508)
            goto LABEL_804;
          goto LABEL_685;
        default:
          goto LABEL_804;
      }
    }
    if ((*(_DWORD *)(v505 + 20) & 0x7FFFFFF) == 3)
      v508 = 2;
    else
      v508 = 1;
LABEL_685:
    v509 = 0;
    v1576 = (char *)v1666 + 152 * v500;
    v1558 = (uint64_t)(v1576 + 144);
    v1556 = (uint64_t *)(v505 - 32);
    v1557 = (llvm::SwitchInst *)v508;
    v1565 = v505;
    while (1)
    {
      v510 = *(unsigned __int8 *)(v505 + 16);
      if (v510 != 30)
        __asm { BR              X9 }
      v511 = v1648;
      if ((_DWORD)v1648)
      {
        v512 = __base;
        do
        {
          v513 = v511 >> 1;
          v514 = (unint64_t *)&v512[8 * (v511 >> 1)];
          v516 = *v514;
          v515 = v514 + 1;
          v511 += ~(v511 >> 1);
          if (v516 < v1556[-4 * v509])
            v512 = v515;
          else
            v511 = v513;
        }
        while (v511);
      }
      else
      {
        v512 = __base;
      }
      v1568 = v512 - (_BYTE *)__base;
      v517 = (v512 - (_BYTE *)__base) >> 3;
      v518 = v1666;
      v519 = (void **)((char *)v1666 + 152 * v517);
      __dst[0] = &__dst[2];
      __dst[1] = (void *)0x600000000;
      v520 = *((unsigned int *)v519 + 2);
      if (__dst != v519 && v520 != 0)
        break;
LABEL_704:
      LODWORD(v1696) = *((_DWORD *)v519 + 16);
      v524 = &v518[152 * v517];
      v525 = (uint64_t)(v524 + 72);
      __s2 = v1619;
      v1618 = 0x600000000;
      v526 = *((unsigned int *)v524 + 20);
      if (&__s2 == (void **)(v524 + 72) || v526 == 0)
        goto LABEL_713;
      v528 = v1619;
      v529 = *((unsigned int *)v524 + 20);
      if (v526 < 7)
        goto LABEL_711;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v1619, v526, 8);
      v529 = *(unsigned int *)(v525 + 8);
      if ((_DWORD)v529)
      {
        v528 = __s2;
LABEL_711:
        memcpy(v528, *(const void **)v525, 8 * v529);
      }
      LODWORD(v1618) = v526;
LABEL_713:
      v530 = &v518[152 * v517];
      v532 = *((_DWORD *)v530 + 34);
      v531 = (unsigned int *)(v530 + 136);
      v1621 = v532;
      v533 = v1576;
      v534 = *((_DWORD *)v1576 + 16);
      if (*((_DWORD *)v519 + 16) < v534)
      {
        v558 = (_DWORD)v519[8] & 0x3F;
        v559 = (llvm::Instruction *)*((unsigned int *)v519 + 2);
        if (v558)
          *((_QWORD *)*v519 + v559 - 1) &= ~(-1 << v558);
        v560 = v559;
        *((_DWORD *)v519 + 16) = v534;
        v561 = v534 + 63;
        if ((_DWORD)v559 != (v534 + 63) >> 6)
        {
          v562 = v561 >> 6;
          if (v559 > v562)
          {
            *((_DWORD *)v519 + 2) = v562;
            v560 = v561 >> 6;
          }
          else
          {
            v563 = v559;
            if (v562 > *((_DWORD *)v519 + 3))
            {
              v581 = v559;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v519, (uint64_t)(v519 + 2), v562, 8);
              v559 = v581;
              v563 = (llvm::Instruction *)*((unsigned int *)v519 + 2);
              v560 = *((_DWORD *)v519 + 2);
            }
            if ((llvm::Instruction *)v562 != v559)
            {
              v1550 = v559;
              bzero((char *)*v519 + 8 * (_QWORD)v563, 8 * (v562 - (_QWORD)v559));
              LODWORD(v559) = (_DWORD)v1550;
            }
            v560 += v562 - (_DWORD)v559;
            *((_DWORD *)v519 + 2) = v560;
            v534 = *((_DWORD *)v519 + 16);
            v533 = v1576;
          }
        }
        v564 = v534 & 0x3F;
        if (v564)
          *((_QWORD *)*v519 + v560 - 1) &= ~(-1 << v564);
      }
      v535 = *((unsigned int *)v533 + 2);
      if ((_DWORD)v535)
      {
        v536 = *(uint64_t **)v533;
        v537 = *v519;
        do
        {
          v538 = *v536++;
          *v537++ |= v538;
          --v535;
        }
        while (v535);
      }
      v539 = *v531;
      v540 = *((_DWORD *)v1576 + 34);
      if (*v531 < v540)
      {
        v565 = *(unsigned int *)(v525 + 8);
        if ((v539 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)v525 + 8 * v565 - 8) &= ~(-1 << (v539 & 0x3F));
        v566 = v565;
        *v531 = v540;
        v567 = v540 + 63;
        if ((_DWORD)v565 != (v540 + 63) >> 6)
        {
          v568 = v567 >> 6;
          if (v565 > v568)
          {
            *(_DWORD *)(v525 + 8) = v568;
            v566 = v567 >> 6;
          }
          else
          {
            v569 = v565;
            if (v568 > *(_DWORD *)(v525 + 12))
            {
              v582 = v565;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v525, v525 + 16, v568, 8);
              v565 = v582;
              v533 = v1576;
              v569 = *(unsigned int *)(v525 + 8);
              v566 = *(_DWORD *)(v525 + 8);
            }
            if (v568 != v565)
            {
              LODWORD(v1550) = v502;
              v570 = v565;
              bzero((void *)(*(_QWORD *)v525 + 8 * v569), 8 * (v568 - v565));
              LODWORD(v565) = v570;
              v502 = (int)v1550;
              v533 = v1576;
            }
            v566 += v568 - v565;
            *(_DWORD *)(v525 + 8) = v566;
            v540 = *v531;
          }
        }
        if ((v540 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)v525 + 8 * v566 - 8) &= ~(-1 << (v540 & 0x3F));
        v539 = v540;
      }
      v541 = *((unsigned int *)v1576 + 20);
      if ((_DWORD)v541)
      {
        v542 = (uint64_t *)*((_QWORD *)v1576 + 9);
        v543 = *(_QWORD **)v525;
        do
        {
          v544 = *v542++;
          *v543++ |= v544;
          --v541;
        }
        while (v541);
      }
      if (*(_BYTE *)v1558)
      {
        v545 = *((_DWORD *)v533 + 16);
        if (v539 < v545)
        {
          v571 = (llvm::Instruction *)*(unsigned int *)(v525 + 8);
          if ((v539 & 0x3F) != 0)
            *(_QWORD *)(*(_QWORD *)v525 + 8 * v571 - 8) &= ~(-1 << (v539 & 0x3F));
          v572 = v571;
          *v531 = v545;
          v573 = v545 + 63;
          if ((_DWORD)v571 != (v545 + 63) >> 6)
          {
            v574 = v573 >> 6;
            if (v571 > v574)
            {
              *(_DWORD *)(v525 + 8) = v574;
              v572 = v573 >> 6;
            }
            else
            {
              v575 = v571;
              if (v574 > *(_DWORD *)(v525 + 12))
              {
                v583 = v571;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v525, v525 + 16, v574, 8);
                v571 = v583;
                v575 = (llvm::Instruction *)*(unsigned int *)(v525 + 8);
                v572 = *(_DWORD *)(v525 + 8);
              }
              if ((llvm::Instruction *)v574 != v571)
              {
                v1550 = v571;
                bzero((void *)(*(_QWORD *)v525 + 8 * (_QWORD)v575), 8 * (v574 - (_QWORD)v571));
                LODWORD(v571) = (_DWORD)v1550;
              }
              v572 += v574 - (_DWORD)v571;
              *(_DWORD *)(v525 + 8) = v572;
              v545 = *v531;
              v533 = v1576;
            }
          }
          if ((v545 & 0x3F) != 0)
            *(_QWORD *)(*(_QWORD *)v525 + 8 * v572 - 8) &= ~(-1 << (v545 & 0x3F));
        }
        else
        {
          v545 = v539;
        }
        v546 = *((unsigned int *)v533 + 2);
        if ((_DWORD)v546)
        {
          v547 = *(uint64_t **)v533;
          v548 = *(_QWORD **)v525;
          do
          {
            v549 = *v547++;
            *v548++ |= v549;
            --v546;
          }
          while (v546);
        }
        v539 = v545;
      }
      if (v518[152 * v517 + 144])
      {
        v550 = *((_DWORD *)v519 + 16);
        if (v539 < v550)
        {
          v576 = *(unsigned int *)(v525 + 8);
          if ((v539 & 0x3F) != 0)
            *(_QWORD *)(*(_QWORD *)v525 + 8 * v576 - 8) &= ~(-1 << (v539 & 0x3F));
          v577 = v576;
          *v531 = v550;
          v578 = v550 + 63;
          if ((_DWORD)v576 != (v550 + 63) >> 6)
          {
            v579 = v578 >> 6;
            if (v576 > v579)
            {
              *(_DWORD *)(v525 + 8) = v579;
              v577 = v578 >> 6;
            }
            else
            {
              v580 = v576;
              if (v579 > *(_DWORD *)(v525 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v525, v525 + 16, v579, 8);
                v580 = *(unsigned int *)(v525 + 8);
                v577 = *(_DWORD *)(v525 + 8);
              }
              if (v579 != v576)
                bzero((void *)(*(_QWORD *)v525 + 8 * v580), 8 * (v579 - v576));
              v577 += v579 - v576;
              *(_DWORD *)(v525 + 8) = v577;
              v550 = *v531;
            }
          }
          v505 = v1565;
          if ((v550 & 0x3F) != 0)
            *(_QWORD *)(*(_QWORD *)v525 + 8 * v577 - 8) &= ~(-1 << (v550 & 0x3F));
        }
        else
        {
          v550 = v539;
          v505 = v1565;
        }
        v551 = *((unsigned int *)v519 + 2);
        if ((_DWORD)v551)
        {
          v552 = (uint64_t *)*v519;
          v553 = *(_QWORD **)v525;
          do
          {
            v554 = *v552++;
            *v553++ |= v554;
            --v551;
          }
          while (v551);
        }
        v539 = v550;
      }
      else
      {
        if (v518[152 * v517 + 145])
        {
          v555 = *(unsigned int *)(v525 + 8);
          if ((_DWORD)v555)
            bzero(*(void **)v525, 8 * v555);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v525 + 8 * (v517 >> 6)) &= ~(1 << (v1568 >> 3));
        }
        v505 = v1565;
      }
      v556 = __s2;
      if (v539 == v1621)
      {
        if (!memcmp(*(const void **)v525, __s2, 8 * *(unsigned int *)(v525 + 8)))
          v557 = *((_DWORD *)v519 + 16) != (_DWORD)v1696
              || memcmp(*v519, __dst[0], 8 * *((unsigned int *)v519 + 2)) != 0;
        else
          v557 = 1;
      }
      else
      {
        v557 = 1;
      }
      if (v556 != v1619)
        free(v556);
      v72 = (unint64_t)__dst[0];
      if (__dst[0] != &__dst[2])
        free(__dst[0]);
      v502 |= v557;
      if ((llvm::SwitchInst *)++v509 == v1557)
        goto LABEL_804;
    }
    v522 = &__dst[2];
    v523 = *((unsigned int *)v519 + 2);
    if (v520 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&__dst[2], *((unsigned int *)v519 + 2), 8);
      v523 = *((unsigned int *)v519 + 2);
      if (!(_DWORD)v523)
      {
LABEL_703:
        LODWORD(__dst[1]) = v520;
        goto LABEL_704;
      }
      v522 = (void **)__dst[0];
    }
    memcpy(v522, *v519, 8 * v523);
    goto LABEL_703;
  }
LABEL_505:
  v376 = **(_QWORD **)v1541;
  v1555 = v1639;
  v1637 = v1639;
  v1557 = (llvm::SwitchInst *)0x200000000;
  v1638 = 0x200000000;
  v1639[6] = v376;
  v1639[7] = &v1645;
  v1639[8] = &v1646;
  v1639[9] = 0;
  v1640 = 0;
  v1641 = 512;
  v1642 = 7;
  v1639[5] = 0;
  v1639[4] = 0;
  v1644 = 0;
  v1643 = 0;
  v1645 = &unk_1E8167888;
  v1646 = &unk_1E8167A08;
  v61 = 1;
  v1553 = (char **)&v1622;
  v377 = 8;
  __s2 = (void *)1;
  v378 = v1542;
  do
  {
    *(void **)((char *)&__s2 + v377) = (void *)-4096;
    v377 += 16;
  }
  while (v377 != 136);
  v1622 = &v1624;
  v1623 = 0x800000000;
  v1550 = (llvm::Instruction *)v1627;
  v1625 = v1627;
  v1626 = 0x800000000;
  v1628 = 0;
  v1629 = 0u;
  v1630 = 0;
  v1631 = 0u;
  v1632 = 0;
  v1633 = 0u;
  v1634 = 0;
  v1635 = 0u;
  v1636 = 0;
  v1556 = (uint64_t *)v1616;
  v1614 = v1616;
  v4 = 0x400000000;
  v1615 = 0x400000000;
  v1558 = (uint64_t)v1613;
  v1611 = v1613;
  v1612 = 0x400000000;
  v379 = 1;
  __dst[0] = (void *)1;
  do
  {
    __dst[v379] = (void *)-4096;
    v379 += 2;
  }
  while (v379 != 17);
  v380 = 0;
  v1697 = (char *)&v1699;
  v1698 = 0x800000000;
  v6 = 0x1000000000;
  do
  {
    for (ii = *((_QWORD *)v1541 + 10); ii != v378; ii = *(_QWORD *)(ii + 8))
    {
      v382 = ii - 24;
      if (!ii)
        v382 = 0;
      v383 = *(_QWORD *)(v382 + 48);
      if (v383 != v382 + 40)
      {
        while (1)
        {
          if (v383)
            v384 = v383 - 24;
          else
            v384 = 0;
          v385 = *(unsigned __int8 *)(v384 + 16);
          if (v385 == 85
            || (v385 != 62 ? (v386 = (v385 - 66) >= 0xD) : (v386 = 0),
                v386 ? (v387 = (v385 - 41) >= 0x12) : (v387 = 0),
                v387 ? (v388 = (v385 - 81) > 1) : (v388 = 0),
                !v388))
          {
            for (jj = *(_QWORD *)(v384 + 8); jj; jj = *(_QWORD *)(jj + 8))
            {
              v390 = *(_QWORD *)(jj + 24);
              if (sub_1C604E6BC((uint64_t)&__base, v384, v390))
              {
                v1669 = (void *)v384;
                v391 = sub_1C63CF068((uint64_t)__dst, (uint64_t *)&v1669);
                v392 = v391;
                v393 = *(unsigned int *)(v391 + 8);
                if (v393 >= *(unsigned int *)(v391 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v391, v391 + 16, v393 + 1, 8);
                  v393 = *(unsigned int *)(v392 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v392 + 8 * v393) = v390;
                ++*(_DWORD *)(v392 + 8);
              }
            }
            v1669 = &v1671;
            v1670 = (void *)0x1000000000;
            llvm::findDbgValues((uint64_t)&v1669, v384);
            v394 = (uint64_t *)v1669;
            if ((_DWORD)v1670)
            {
              v395 = 8 * v1670;
              do
              {
                v396 = *v394;
                if (sub_1C604E6BC((uint64_t)&__base, v384, *v394))
                {
                  __p.__r_.__value_.__r.__words[0] = v384;
                  v397 = sub_1C63CF068((uint64_t)__dst, (uint64_t *)&__p);
                  v398 = v397;
                  v399 = *(unsigned int *)(v397 + 8);
                  if (v399 >= *(unsigned int *)(v397 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v397, v397 + 16, v399 + 1, 8);
                    v399 = *(unsigned int *)(v398 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v398 + 8 * v399) = v396;
                  ++*(_DWORD *)(v398 + 8);
                  v378 = v1542;
                }
                ++v394;
                v395 -= 8;
              }
              while (v395);
              v394 = (uint64_t *)v1669;
            }
            if (v394 != (uint64_t *)&v1671)
              free(v394);
          }
          v383 = *(_QWORD *)(v383 + 8);
          v400 = ii - 24;
          if (!ii)
            v400 = 0;
          if (v383 == v400 + 40)
            break;
LABEL_554:
          if (ii == v378)
            goto LABEL_555;
        }
        while (1)
        {
          ii = *(_QWORD *)(ii + 8);
          if (ii == v378)
            goto LABEL_555;
          v401 = ii - 24;
          if (!ii)
            v401 = 0;
          v383 = *(_QWORD *)(v401 + 48);
          if (v383 != v401 + 40)
            goto LABEL_554;
        }
      }
    }
LABEL_555:
    if (!(_DWORD)v1698)
      break;
    v1564 = v380;
    v402 = v1697;
    __valb = &v1697[40 * v1698];
    do
    {
      v403 = *((unsigned int *)v402 + 4);
      if ((_DWORD)v403)
      {
        v404 = 0;
        v405 = 0;
        v406 = *(llvm::Value **)v402;
        v407 = (uint64_t *)*((_QWORD *)v402 + 1);
        v408 = &v407[v403];
        v409 = (*(_QWORD *)v402 >> 4) ^ (*(_QWORD *)v402 >> 9);
        while (1)
        {
          v410 = *v407;
          if (v405 != *(llvm::BasicBlock **)(*v407 + 40))
            break;
LABEL_596:
          if (*(_BYTE *)(v410 + 16) == 83)
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v410, (llvm::Value *)v404, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v410 + 40) + 40, (uint64_t ***)v410);
            v438 = *(_QWORD *)(v410 + 24);
            v439 = *(_QWORD **)(v410 + 32);
            *v439 = v438;
            *(_QWORD *)(v438 + 8) = v439;
            *(_QWORD *)(v410 + 24) = 0;
            *(_QWORD *)(v410 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v410);
          }
          else
          {
            llvm::User::replaceUsesOfWith((llvm::User *)v410, v406, (llvm::Value *)v404);
          }
          if (++v407 == v408)
            goto LABEL_606;
        }
        v405 = *(llvm::BasicBlock **)(*v407 + 40);
        v411 = sub_1C604F354(*v407);
        SinglePredecessor = (uint64_t)v405;
        if (v411)
          SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v405);
        llvm::Instruction::clone(v406);
        v404 = v413;
        if ((*((_BYTE *)v406 + 23) & 0x10) == 0)
        {
          v423 = 0;
          v424 = &byte_1C871356D;
          goto LABEL_571;
        }
        v414 = ***(_QWORD ***)v406;
        v415 = *(_QWORD *)(v414 + 152);
        v416 = *(unsigned int *)(v414 + 168);
        if ((_DWORD)v416)
        {
          LODWORD(v417) = (v416 - 1) & v409;
          v418 = (llvm::Value **)(v415 + 16 * v417);
          v419 = *v418;
          if (*v418 == v406)
          {
LABEL_570:
            v422 = v418[1];
            v425 = *(void **)v422;
            v424 = (char *)v422 + 16;
            v423 = v425;
LABEL_571:
            LOWORD(v1673) = 261;
            v1669 = v424;
            v1670 = v423;
            llvm::Value::setName(v413, (uint64_t)&v1669);
            if (v411)
            {
              v426 = *(_QWORD *)(SinglePredecessor + 40);
              if (v426 == SinglePredecessor + 40)
              {
                v428 = 0;
              }
              else
              {
                if (v426)
                  v427 = v426 - 24;
                else
                  v427 = 0;
                if (*(unsigned __int8 *)(v427 + 16) - 29 >= 0xB)
                  v428 = 0;
                else
                  v428 = v427;
              }
            }
            else
            {
              v429 = SinglePredecessor + 40;
              for (kk = *(_QWORD *)(SinglePredecessor + 48); kk != v429; kk = *(_QWORD *)(kk + 8))
              {
                v431 = kk - 24;
                if (!kk)
                  v431 = 0;
                if (*(_BYTE *)(v431 + 16) != 83)
                {
                  v432 = *(unsigned __int8 *)(kk - 8) - 38;
                  v197 = v432 > 0x38;
                  v433 = (1 << v432) & 0x100060000000001;
                  if (v197 || v433 == 0)
                    v429 = kk;
                  else
                    v429 = *(_QWORD *)(kk + 8);
                  break;
                }
              }
              if (v429)
                v428 = v429 - 24;
              else
                v428 = 0;
            }
            v435 = *(_QWORD *)(v428 + 40);
            v404[5] = (uint64_t **)v435;
            *(_WORD *)(v435 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v404 + 23) & 0x10) != 0)
            {
              v440 = *(_QWORD *)(v435 + 56);
              if (v440)
              {
                v441 = *(llvm::ValueSymbolTable **)(v440 + 104);
                if (v441)
                  llvm::ValueSymbolTable::reinsertValue(v441, (llvm::Value *)v404);
              }
            }
            v437 = *(_QWORD *)(v428 + 24);
            v436 = (uint64_t **)(v428 + 24);
            v404[3] = (uint64_t **)v437;
            v404[4] = v436;
            *(_QWORD *)(v437 + 8) = v404 + 3;
            *v436 = (uint64_t *)(v404 + 3);
            goto LABEL_596;
          }
          v420 = 1;
          while (v419 != (llvm::Value *)-4096)
          {
            v421 = v417 + v420++;
            v417 = v421 & (v416 - 1);
            v419 = *(llvm::Value **)(v415 + 16 * v417);
            if (v419 == v406)
            {
              v418 = (llvm::Value **)(v415 + 16 * v417);
              goto LABEL_570;
            }
          }
        }
        v418 = (llvm::Value **)(v415 + 16 * v416);
        goto LABEL_570;
      }
LABEL_606:
      v402 += 40;
    }
    while (v402 != __valb);
    sub_1C63CF170((uint64_t)__dst);
    v380 = v1564 + 1;
    v378 = v1542;
  }
  while (v1564 != 3);
  sub_1C63CD318(&v1697);
  if (((uint64_t)__dst[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](__dst[1], 8);
  v442 = *(_DWORD *)(v1551 + 200);
  if ((v442 - 1) >= 3)
  {
    __dst[0] = &__dst[2];
    __dst[1] = (void *)0x100000000;
    HIDWORD(v1696) = 0;
    v1692 = 0;
    __dst[3] = 0;
    LODWORD(v1693) = 0;
    LOBYTE(v1696) = 0;
    v1694 = 0;
    v1695 = v1541;
    sub_1C53BA620((uint64_t)__dst, 0);
    v1669 = &v1673;
    v1670 = &v1673;
    v1671 = 4;
    LODWORD(v1672) = 0;
    v443 = *((_QWORD *)v1541 + 10);
    if (v443)
      v444 = v443 - 24;
    else
      v444 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1669, v444);
    v445 = *(unsigned int *)(v1551 + 128);
    if ((_DWORD)v445)
    {
      v446 = *(uint64_t **)(v1551 + 120);
      v447 = 8 * v445;
      do
      {
        v448 = *v446++;
        SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)(v448 + 40));
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1669, SingleSuccessor);
        v447 -= 8;
      }
      while (v447);
    }
    v450 = v1670;
    v451 = v1669;
    v452 = *((_QWORD *)v1541 + 10);
    if (v452 != v378)
    {
      v584 = v452 - 24;
      if (!v452)
        v584 = 0;
      v585 = *(_QWORD *)(v584 + 48);
      if (v585 == v584 + 40)
      {
        while (1)
        {
          v452 = *(_QWORD *)(v452 + 8);
          if (v452 == v378)
            break;
          v586 = v452 - 24;
          if (!v452)
            v586 = 0;
          v585 = *(_QWORD *)(v586 + 48);
          if (v585 != v586 + 40)
            goto LABEL_824;
        }
      }
      else
      {
        while (1)
        {
LABEL_824:
          v587 = (unsigned __int8 *)(v585 - 24);
          if (!v585)
            v587 = 0;
          v588 = v587[16];
          if (v588 == 59)
            v589 = (llvm::Value *)v587;
          else
            v589 = 0;
          if (v585 && v588 == 59)
          {
            if (v1670 == v1669)
              v590 = (unint64_t *)((char *)&v1671 + 4);
            else
              v590 = &v1671;
            v591 = *(unsigned int *)v590;
            if ((_DWORD)v591)
            {
              v592 = 8 * v591;
              v593 = (unint64_t *)v1670;
              while (*v593 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v593;
                v592 -= 8;
                if (!v592)
                  goto LABEL_897;
              }
            }
            else
            {
              v593 = (unint64_t *)v1670;
            }
            v594 = (unint64_t *)((char *)v1670 + 8 * v591);
            if (v593 != v594)
            {
              v595 = *v593;
LABEL_842:
              v1744 = &v1746;
              v1745 = 0x100000000;
              v596 = *((_QWORD *)v589 + 1);
              if (v596)
              {
                do
                {
                  v597 = *(_QWORD *)(v596 + 24);
                  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)__dst, v595, *(_QWORD *)(v597 + 40))|| sub_1C604F1F4((uint64_t)&__base, v595, v597))
                  {
                    if (*(_BYTE *)(v597 + 16) != 84
                      || (v598 = *(_QWORD *)(v597 - 32)) == 0
                      || *(_BYTE *)(v598 + 16)
                      || *(_QWORD *)(v598 + 24) != *(_QWORD *)(v597 + 72)
                      || (*(_BYTE *)(v598 + 33) & 0x20) == 0
                      || *(_DWORD *)(v598 + 36) != 168)
                    {
                      v599 = *(_QWORD *)(v597 + 8);
                      if (!v599
                        || *(_QWORD *)(v599 + 8)
                        || llvm::Value::stripPointerCasts((llvm::Value *)v597) != v589
                        || (v597 = *(_QWORD *)(*(_QWORD *)(v597 + 8) + 24), *(_BYTE *)(v597 + 16) != 84)
                        || (v600 = *(_QWORD *)(v597 - 32)) == 0
                        || *(_BYTE *)(v600 + 16)
                        || *(_QWORD *)(v600 + 24) != *(_QWORD *)(v597 + 72)
                        || (*(_BYTE *)(v600 + 33) & 0x20) == 0
                        || *(_DWORD *)(v600 + 36) != 168)
                      {
                        v602 = (const char **)v1744;
                        goto LABEL_866;
                      }
                    }
                    v601 = v1745;
                    if (v1745 >= (unint64_t)HIDWORD(v1745))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1744, (uint64_t)&v1746, v1745 + 1, 8);
                      v601 = v1745;
                    }
                    *((_QWORD *)v1744 + v601) = v597;
                    LODWORD(v1745) = v1745 + 1;
                  }
                  v596 = *(_QWORD *)(v596 + 8);
                }
                while (v596);
                v602 = (const char **)v1744;
                if ((_DWORD)v1745)
                {
                  v605 = *(llvm::Instruction **)v1744;
                  v606 = *(_DWORD *)(*(_QWORD *)v1744 + 20);
                  if ((v606 & 0x40000000) != 0)
                    v607 = (char *)*((_QWORD *)v605 - 1);
                  else
                    v607 = (char *)v605 - 32 * (v606 & 0x7FFFFFF);
                  if (*(_BYTE *)(*((_QWORD *)v607 + 4) + 16) != 59)
                  {
                    llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)v1541 + 1912), 0);
                    LOWORD(v1738) = 257;
                    llvm::CastInst::Create(49);
                    v589 = v608;
                    v605 = *(llvm::Instruction **)v1744;
                  }
                  llvm::Instruction::clone(v605);
                  v610 = v609;
                  v611 = v609[5];
                  if ((v611 & 0x40000000) != 0)
                    v612 = (llvm::Value **)*((_QWORD *)v609 - 1);
                  else
                    v612 = (llvm::Value **)&v609[-8 * (v611 & 0x7FFFFFF)];
                  llvm::User::replaceUsesOfWith((llvm::User *)v609, v612[4], v589);
                  v613 = *(_QWORD *)(v595 + 40);
                  if (v613 == v595 + 40)
                  {
                    v615 = 0;
                  }
                  else
                  {
                    if (v613)
                      v614 = v613 - 24;
                    else
                      v614 = 0;
                    if (*(unsigned __int8 *)(v614 + 16) - 29 >= 0xB)
                      v615 = 0;
                    else
                      v615 = v614;
                  }
                  v616 = *(_QWORD *)(v615 + 40);
                  *((_QWORD *)v610 + 5) = v616;
                  *(_WORD *)(v616 + 18) &= ~0x8000u;
                  if ((*((_BYTE *)v610 + 23) & 0x10) != 0)
                  {
                    v627 = *(_QWORD *)(v616 + 56);
                    if (v627)
                    {
                      v628 = *(llvm::ValueSymbolTable **)(v627 + 104);
                      if (v628)
                        llvm::ValueSymbolTable::reinsertValue(v628, (llvm::Value *)v610);
                    }
                  }
                  v618 = *(_QWORD *)(v615 + 24);
                  v617 = (_QWORD *)(v615 + 24);
                  *((_QWORD *)v610 + 3) = v618;
                  *((_QWORD *)v610 + 4) = v617;
                  v619 = v610 + 6;
                  *(_QWORD *)(v618 + 8) = v619;
                  *v617 = v619;
                  v620 = (const char **)v1744;
                  if ((_DWORD)v1745)
                  {
                    v621 = 8 * v1745;
                    v378 = v1542;
                    do
                    {
                      v622 = (uint64_t)*v620++;
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v622 + 40) + 40, (uint64_t ***)v622);
                      v623 = *(_QWORD *)(v622 + 24);
                      v624 = *(_QWORD **)(v622 + 32);
                      *v624 = v623;
                      *(_QWORD *)(v623 + 8) = v624;
                      *(_QWORD *)(v622 + 24) = 0;
                      *(_QWORD *)(v622 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v622);
                      v621 -= 8;
                    }
                    while (v621);
                    v620 = (const char **)v1744;
                  }
                  else
                  {
                    v378 = v1542;
                  }
                  if (v620 != &v1746)
                    free(v620);
                  goto LABEL_897;
                }
LABEL_866:
                v378 = v1542;
                if (v602 != &v1746)
                  free(v602);
              }
              v603 = v593 + 1;
              while (v603 != v594)
              {
                v604 = *v603++;
                v595 = v604;
                if (v604 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v593 = v603 - 1;
                  goto LABEL_842;
                }
              }
            }
          }
LABEL_897:
          v585 = *(_QWORD *)(v585 + 8);
          v625 = v452 - 24;
          if (!v452)
            v625 = 0;
          if (v585 == v625 + 40)
            break;
LABEL_904:
          if (v452 == v378)
            goto LABEL_909;
        }
        while (1)
        {
          v452 = *(_QWORD *)(v452 + 8);
          if (v452 == v378)
            break;
          v626 = v452 - 24;
          if (!v452)
            v626 = 0;
          v585 = *(_QWORD *)(v626 + 48);
          if (v585 != v626 + 40)
            goto LABEL_904;
        }
LABEL_909:
        v450 = v1670;
        v451 = v1669;
      }
    }
    if (v450 != v451)
      free(v450);
    sub_1C4DC4E38((uint64_t *)&__dst[3]);
    if (__dst[0] != &__dst[2])
      free(__dst[0]);
    v442 = *(_DWORD *)(v1551 + 200);
  }
  v629 = (llvm::Type ***)v1540;
  if (v442 == 3 && !*(_DWORD *)(v1551 + 128))
    goto LABEL_917;
  for (mm = *((_QWORD *)v1541 + 10); ; mm = *(_QWORD *)(mm + 8))
  {
    if (mm == v378)
      goto LABEL_917;
    v645 = mm - 24;
    if (!mm)
      v645 = 0;
    v646 = *(_QWORD *)(v645 + 48);
    if (v646 != v645 + 40)
      break;
  }
  v1539 = (int8x16_t)vdupq_n_s64(3uLL);
  while (2)
  {
    if (v646)
      v749 = v646 - 24;
    else
      v749 = 0;
    v750 = *(unsigned __int8 *)(v749 + 16);
    if (v750 == 59)
      v751 = (llvm::Type **)v749;
    else
      v751 = 0;
    v1744 = v751;
    if (v646)
    {
      if (v750 == 59 && v751 != *v629)
      {
        v1669 = &v1671;
        v1670 = (void *)0x100000000;
        HIDWORD(v1676) = 0;
        v1672 = 0;
        v1673 = 0;
        LODWORD(v1674) = 0;
        LOBYTE(v1676) = 0;
        *((_QWORD *)&v1674 + 1) = 0;
        v1675 = v1541;
        sub_1C53BA620((uint64_t)&v1669, 0);
        v755 = (*(_DWORD *)(v1551 + 200) - 4) < 0xFFFFFFFD;
        v756 = (void *)(*((_QWORD *)v1541 + 5) + 272);
        v757 = *(llvm::Value **)v1551;
        __dst[1] = 0;
        __dst[2] = 0;
        __dst[0] = v756;
        __dst[3] = &v1693;
        v1692 = 0x800000000;
        p_src = &__src;
        v1701 = &__src;
        v1702 = 8;
        v1703 = 0;
        v1710 = 1;
        v1709 = 0;
        v1711 = (llvm::DominatorTree *)&v1669;
        v1712 = v757;
        v1714 = 0;
        v1715 = 0;
        v1716 = 0;
        p_base = &__base;
        v1717 = (uint64_t *)v1721;
        v1718 = v1721;
        v1719 = 4;
        v1720 = 0;
        v1722 = v1726;
        v1723 = v1726;
        v1724 = 2;
        v1725 = 0;
        v1727 = 0;
        v1728 = v755;
        v1729 = 0;
        v759.n128_f64[0] = llvm::DataLayout::getIndexType((llvm::DataLayout *)v756, *v751);
        v1708 = 1;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v758 + 8) >> 8;
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
        else
          __p.__r_.__value_.__r.__words[0] = 0;
        if (v1710 >= 0x41 && v1709)
          MEMORY[0x1CAA32F9C](v1709, 0x1000C8000313F17, v759);
        v1709 = __p.__r_.__value_.__r.__words[0];
        v1710 = __p.__r_.__value_.__r.__words[1];
        *(int8x16_t *)&__dst[1] = vandq_s8(*(int8x16_t *)&__dst[1], v1539);
        llvm::detail::PtrUseVisitorBase::enqueueUsers((char *)__dst, (llvm::Instruction *)v751);
        v760 = v1692;
        if ((_DWORD)v1692)
        {
          v761 = __dst[3];
          v762 = (char *)__dst[3] + 24 * v1692;
          v763 = *((_DWORD *)v762 - 2);
          v764 = *((_QWORD *)v762 - 3);
          v765 = *((_QWORD *)v762 - 2);
          *((_DWORD *)v762 - 2) = 0;
          v766 = v760 - 1;
          LODWORD(v1692) = v766;
          if (LODWORD(v761[3 * v766 + 2]) >= 0x41)
          {
            v767 = v761[3 * v766 + 1];
            if (v767)
              MEMORY[0x1CAA32F9C](v767, 0x1000C8000313F17);
          }
          v768 = v764 & 0xFFFFFFFFFFFFFFF8;
          v1707 = v764 & 0xFFFFFFFFFFFFFFF8;
          v1708 = (v764 & 4) != 0;
          if ((v764 & 4) != 0)
          {
            if (v1710 >= 0x41 && v1709)
            {
              MEMORY[0x1CAA32F9C](v1709, 0x1000C8000313F17);
              v768 = v1707;
            }
            v1709 = v765;
            v1710 = v763;
          }
          v769 = *(_QWORD *)(v768 + 24);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1717, v769);
          __asm { BR              X9 }
        }
        if (HIBYTE(v1729))
        {
          v786 = v1729;
          v378 = v1542;
        }
        else
        {
          if (!v1728 || (LODWORD(v770) = HIDWORD(v1724), HIDWORD(v1724) == v1725))
          {
            if (((uint64_t)__dst[2] & 4) != 0)
            {
              v786 = 1;
              v378 = v1542;
              goto LABEL_1241;
            }
            v771 = (uint64_t *)v1718;
            v772 = v1717;
            v773 = HIDWORD(v1719);
            v774 = v1719;
            if (v1718 == v1717)
              v775 = HIDWORD(v1719);
            else
              v775 = v1719;
            v776 = (uint64_t *)v1718;
            v378 = v1542;
            if ((_DWORD)v775)
            {
              v798 = 8 * v775;
              v776 = (uint64_t *)v1718;
              while ((unint64_t)*v776 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v776;
                v798 -= 8;
                if (!v798)
                  goto LABEL_1236;
              }
            }
            v777 = (unint64_t *)((char *)v1718 + 8 * v775);
            if (v776 != (uint64_t *)v777)
            {
              v778 = *v776;
LABEL_1185:
              if (v771 == v772)
                v779 = v773;
              else
                v779 = v774;
              v780 = v771;
              if ((_DWORD)v779)
              {
                v781 = 8 * v779;
                v780 = v771;
                while ((unint64_t)*v780 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v780;
                  v781 -= 8;
                  if (!v781)
                    goto LABEL_1200;
                }
              }
              v782 = &v771[v779];
              if (v780 != v782)
              {
                if ((sub_1C604E6BC((uint64_t)p_base, v778, *v780) & 1) == 0)
                {
                  for (nn = v780 + 1; nn != v782; ++nn)
                  {
                    if ((unint64_t)*nn < 0xFFFFFFFFFFFFFFFELL
                      && (sub_1C604E6BC((uint64_t)p_base, v778, *nn) & 1) != 0)
                    {
                      goto LABEL_1272;
                    }
                  }
                  goto LABEL_1200;
                }
LABEL_1272:
                v786 = 1;
                v378 = v1542;
                goto LABEL_1241;
              }
LABEL_1200:
              v784 = (unint64_t *)(v776 + 1);
              v378 = v1542;
              while (v784 != v777)
              {
                v785 = *v784++;
                v778 = v785;
                if (v785 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v771 = (uint64_t *)v1718;
                  v772 = v1717;
                  v773 = HIDWORD(v1719);
                  v776 = (uint64_t *)(v784 - 1);
                  v774 = v1719;
                  goto LABEL_1185;
                }
              }
            }
LABEL_1240:
            v786 = 0;
            goto LABEL_1241;
          }
          if (v1718 == v1717)
            v787 = (uint64_t *)((char *)&v1719 + 4);
          else
            v787 = &v1719;
          v788 = *(unsigned int *)v787;
          if ((_DWORD)v788)
          {
            v799 = 8 * v788;
            v789 = (uint64_t *)v1718;
            v378 = v1542;
            while ((unint64_t)*v789 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v789;
              v799 -= 8;
              if (!v799)
                goto LABEL_1240;
            }
          }
          else
          {
            v789 = (uint64_t *)v1718;
            v378 = v1542;
          }
          v790 = (unint64_t *)((char *)v1718 + 8 * v788);
          if (v789 == (uint64_t *)v790)
            goto LABEL_1240;
          v791 = *v789;
LABEL_1213:
          if (v1723 == v1722)
            v770 = v770;
          else
            v770 = v1724;
          if ((_DWORD)v770)
          {
            v792 = 8 * v770;
            v793 = (uint64_t *)v1723;
            while ((unint64_t)*v793 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v793;
              v792 -= 8;
              if (!v792)
                goto LABEL_1229;
            }
          }
          else
          {
            v793 = (uint64_t *)v1723;
          }
          v794 = (uint64_t *)((char *)v1723 + 8 * v770);
          if (v793 != v794)
          {
            if ((sub_1C604E6BC((uint64_t)p_base, *v793, v791) & 1) != 0)
              goto LABEL_1272;
            for (i1 = v793 + 1; i1 != v794; ++i1)
            {
              if ((unint64_t)*i1 < 0xFFFFFFFFFFFFFFFELL && (sub_1C604E6BC((uint64_t)p_base, *i1, v791) & 1) != 0)
                goto LABEL_1272;
            }
          }
LABEL_1229:
          v796 = (unint64_t *)(v789 + 1);
          v378 = v1542;
          while (v796 != v790)
          {
            v797 = *v796++;
            v791 = v797;
            if (v797 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              LODWORD(v770) = HIDWORD(v1724);
              v789 = (uint64_t *)(v796 - 1);
              goto LABEL_1213;
            }
          }
LABEL_1236:
          v786 = 0;
LABEL_1241:
          LOBYTE(v1729) = v786;
          if (!HIBYTE(v1729))
            HIBYTE(v1729) = 1;
        }
        if (v786)
        {
          v800 = (_QWORD *)(v1714 + 32 * v1716);
          if ((_DWORD)v1715)
          {
            if (v1716)
            {
              v802 = 32 * v1716;
              v801 = v1714;
              while ((*(_QWORD *)v801 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v801 += 32;
                v802 -= 32;
                if (!v802)
                  goto LABEL_1250;
              }
            }
            else
            {
              v801 = v1714;
            }
          }
          else
          {
LABEL_1250:
            v801 = v1714 + 32 * v1716;
          }
LABEL_1251:
          while (v801 != v1714 + 32 * v1716)
          {
            if (!*(_BYTE *)(v801 + 24))
            {
              v975 = "Unable to handle an alias with unknown offset created before CoroBegin.";
              goto LABEL_2313;
            }
            v803 = (_QWORD *)(v801 + 32);
            v801 = v1714 + 32 * v1716;
            if (v803 != v800)
            {
              while ((*v803 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v803 += 4;
                if (v803 == v800)
                {
                  v801 = v1714 + 32 * v1716;
                  goto LABEL_1251;
                }
              }
              v801 = (uint64_t)v803;
            }
          }
          memset(&__p, 0, 20);
          sub_1C63CF3F4((uint64_t)&__p);
          MEMORY[0x1CAA32FB4](0, 8);
          LODWORD(__p.__r_.__value_.__r.__words[2]) = v1716;
          if (v1716)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(32 * v1716, (std::align_val_t)8uLL);
            sub_1C63CF478(&__p, &v1714);
          }
          else
          {
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          }
          LOBYTE(v1754) = v1727;
          sub_1C604F3A4((uint64_t)&v1625, (uint64_t *)&v1744, (uint64_t *)&__p, (char *)&v1754);
          sub_1C63CF3F4((uint64_t)&__p);
          MEMORY[0x1CAA32FB4](__p.__r_.__value_.__r.__words[0], 8);
        }
        if (v1723 != v1722)
          free(v1723);
        if (v1718 != v1717)
          free(v1718);
        sub_1C63CF3F4((uint64_t)&v1714);
        MEMORY[0x1CAA32FB4](v1714, 8);
        if (v1710 >= 0x41 && v1709)
          MEMORY[0x1CAA32F9C](v1709, 0x1000C8000313F17);
        if (v1701 != p_src)
          free(v1701);
        sub_1C5C1B88C((char **)&__dst[3]);
        sub_1C4DC4E38(&v1672);
        if (v1669 != &v1671)
          free(v1669);
        v629 = (llvm::Type ***)v1540;
      }
    }
    v646 = *(_QWORD *)(v646 + 8);
    v753 = mm - 24;
    if (!mm)
      v753 = 0;
    if (v646 != v753 + 40)
    {
LABEL_1158:
      if (mm == v378)
        goto LABEL_917;
      continue;
    }
    break;
  }
  while (1)
  {
    mm = *(_QWORD *)(mm + 8);
    if (mm == v378)
      break;
    v754 = mm - 24;
    if (!mm)
      v754 = 0;
    v646 = *(_QWORD *)(v754 + 48);
    if (v646 != v754 + 40)
      goto LABEL_1158;
  }
LABEL_917:
  v630 = v1541;
  if ((*((_WORD *)v1541 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v1541);
    v631 = (_QWORD *)*((_QWORD *)v1541 + 11);
    v5 = 0x2000000000;
    if ((*((_WORD *)v1541 + 9) & 1) != 0)
    {
      v630 = v1541;
      llvm::Function::BuildLazyArguments(v1541);
      v632 = (_QWORD *)*((_QWORD *)v1541 + 11);
    }
    else
    {
      v632 = (_QWORD *)*((_QWORD *)v1541 + 11);
      v630 = v1541;
    }
  }
  else
  {
    v631 = (_QWORD *)*((_QWORD *)v1541 + 11);
    v632 = v631;
    v5 = 0x2000000000;
  }
  v633 = &v632[5 * *((_QWORD *)v630 + 12)];
  while (v631 != v633)
  {
    for (i2 = v631[1]; i2; i2 = *(_QWORD *)(i2 + 8))
    {
      v638 = *(_QWORD *)(i2 + 24);
      v639 = *(_QWORD *)(v631[3] + 80);
      if (v639)
        v640 = v639 - 24;
      else
        v640 = 0;
      if (sub_1C604F1F4((uint64_t)&__base, v640, *(_QWORD *)(i2 + 24)))
      {
        __dst[0] = v631;
        v635 = sub_1C63CF068((uint64_t)&__s2, (uint64_t *)__dst);
        v636 = v635;
        v637 = *(unsigned int *)(v635 + 8);
        if (v637 >= *(unsigned int *)(v635 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v635, v635 + 16, v637 + 1, 8);
          v637 = *(unsigned int *)(v636 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v636 + 8 * v637) = v638;
        ++*(_DWORD *)(v636 + 8);
      }
    }
    v631 += 5;
  }
  for (i3 = *((_QWORD *)v1541 + 10); ; i3 = *(_QWORD *)(i3 + 8))
  {
    if (i3 == v378)
      goto LABEL_1023;
    v642 = i3 - 24;
    if (!i3)
      v642 = 0;
    v643 = *(_QWORD *)(v642 + 48);
    if (v643 != v642 + 40)
      break;
  }
  while (2)
  {
    v647 = v643 - 24;
    if (v643)
      v648 = (_QWORD *)(v643 - 24);
    else
      v648 = 0;
    if (!sub_1C6043434((uint64_t)v648)
      && !sub_1C6040094((uint64_t)v648)
      && !sub_1C6043480((uint64_t)v648)
      && v648 != *(_QWORD **)v1551
      && (*(_DWORD *)(v1551 + 200) || *(_QWORD **)(v1551 + 264) != v648))
    {
      v652 = *((unsigned __int8 *)v648 + 16);
      if (v652 == 84
        && (v653 = *(v648 - 4)) != 0
        && !*(_BYTE *)(v653 + 16)
        && *(_QWORD *)(v653 + 24) == v648[9]
        && (*(_BYTE *)(v653 + 33) & 0x20) != 0)
      {
        v660 = *(_DWORD *)(v653 + 36);
        if (v660 != 22)
          v647 = 0;
        if (v643 && v660 == 22)
        {
          __dst[0] = &v1692;
          __dst[1] = &v1692;
          __dst[2] = (void *)8;
          LODWORD(__dst[3]) = 0;
          for (i4 = *(_QWORD *)(v647 + 8); i4; i4 = *(_QWORD *)(i4 + 8))
          {
            v662 = *(_QWORD *)(i4 + 24);
            v663 = sub_1C604FCB0(v662);
            if (v662)
              v664 = !v663;
            else
              v664 = 1;
            if (!v664)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)__dst, *(_QWORD *)(v662 + 40));
          }
          v665 = sub_1C604FA7C(*(_QWORD *)(v647 + 40), (llvm::SmallPtrSetImplBase *)__dst);
          if (__dst[1] != __dst[0])
            free(__dst[1]);
          if ((v665 & 1) != 0)
          {
            sub_1C4773D54((uint64_t)__dst, v647, 0, 0, 0);
            v667 = (llvm::Value *)sub_1C63CE8DC(v1551, (uint64_t *)__dst, *(unsigned __int8 **)(v647 - 32 * (*(_DWORD *)(v647 + 20) & 0x7FFFFFF)), 0);
            v668 = *(_QWORD *)(v647 + 8);
            if (v668)
            {
              do
              {
                v669 = *(llvm::ValueAsMetadata **)(v668 + 24);
                if (sub_1C604FCFC((uint64_t)v669))
                {
                  llvm::Value::doRAUW(v669, v667, (llvm::Value *)1);
                }
                else
                {
                  v1694 = *((_QWORD *)v669 + 5);
                  v1695 = (llvm::ValueAsMetadata *)((char *)v669 + 24);
                  v672 = (void *)*((_QWORD *)v669 + 6);
                  v1669 = v672;
                  if (v672)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v1669, (unsigned __int8 *)v672, 2);
                    v673 = v1669;
                  }
                  else
                  {
                    v673 = 0;
                  }
                  sub_1C4774EF4((uint64_t)__dst, 0, (uint64_t)v673);
                  if (v1669)
                    llvm::MetadataTracking::untrack((uint64_t)&v1669, (unsigned __int8 *)v1669);
                  sub_1C63CE998(v1551, (uint64_t *)__dst, (unsigned __int8 *)v667, 0);
                }
                v670 = v1612;
                if (v1612 >= (unint64_t)HIDWORD(v1612))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1611, (uint64_t)v1613, v1612 + 1, 8);
                  v670 = v1612;
                }
                *((_QWORD *)v1611 + v670) = v669;
                v671 = v1612 + 1;
                LODWORD(v1612) = v1612 + 1;
                v668 = *(_QWORD *)(v668 + 8);
              }
              while (v668);
            }
            else
            {
              v671 = v1612;
            }
            if (v671 >= HIDWORD(v1612))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1611, (uint64_t)v1613, v671 + 1, 8);
              v671 = v1612;
            }
            *((_QWORD *)v1611 + v671) = v647;
            LODWORD(v1612) = v1612 + 1;
            if (__dst[0] != &__dst[2])
              free(__dst[0]);
            for (i5 = *((_QWORD *)v667 + 1); i5; i5 = *(_QWORD *)(i5 + 8))
            {
              v675 = *(_QWORD *)(i5 + 24);
              if (sub_1C604E6BC((uint64_t)&__base, (uint64_t)v667, v675))
              {
                __dst[0] = v667;
                v676 = sub_1C63CF068((uint64_t)&__s2, (uint64_t *)__dst);
                v677 = v676;
                v678 = *(unsigned int *)(v676 + 8);
                if (v678 >= *(unsigned int *)(v676 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v676, v676 + 16, v678 + 1, 8);
                  v678 = *(unsigned int *)(v677 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v677 + 8 * v678) = v675;
                ++*(_DWORD *)(v677 + 8);
              }
            }
          }
          else
          {
            v666 = v1615;
            if (v1615 >= (unint64_t)HIDWORD(v1615))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1614, (uint64_t)v1616, v1615 + 1, 8);
              v666 = v1615;
            }
            *((_QWORD *)v1614 + v666) = v647;
            LODWORD(v1615) = v1615 + 1;
          }
        }
        else if (!sub_1C604FCFC((uint64_t)v648))
        {
LABEL_971:
          for (i6 = v648[1]; i6; i6 = *(_QWORD *)(i6 + 8))
          {
            v656 = *(_QWORD *)(i6 + 24);
            if (sub_1C604E6BC((uint64_t)&__base, (uint64_t)v648, v656))
            {
              if (*(_BYTE *)(*v648 + 8) == 12)
              {
                v975 = "token definition is separated from the use by a suspend point";
LABEL_2313:
                llvm::report_fatal_error((llvm *)v975, (const char *)1);
              }
              __dst[0] = v648;
              v657 = sub_1C63CF068((uint64_t)&__s2, (uint64_t *)__dst);
              v658 = v657;
              v659 = *(unsigned int *)(v657 + 8);
              if (v659 >= *(unsigned int *)(v657 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v657, v657 + 16, v659 + 1, 8);
                v659 = *(unsigned int *)(v658 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v658 + 8 * v659) = v656;
              ++*(_DWORD *)(v658 + 8);
            }
          }
        }
      }
      else
      {
        v654 = sub_1C604FCFC((uint64_t)v648);
        if (v652 != 59 && !v654)
          goto LABEL_971;
      }
    }
    v643 = *(_QWORD *)(v643 + 8);
    v649 = i3 - 24;
    if (!i3)
      v649 = 0;
    if (v643 != v649 + 40)
    {
      v650 = v1542;
LABEL_958:
      if (i3 == v650)
        goto LABEL_1023;
      continue;
    }
    break;
  }
  v650 = v1542;
  while (1)
  {
    i3 = *(_QWORD *)(i3 + 8);
    if (i3 == v1542)
      break;
    v651 = i3 - 24;
    if (!i3)
      v651 = 0;
    v643 = *(_QWORD *)(v651 + 48);
    if (v643 != v651 + 40)
      goto LABEL_958;
  }
LABEL_1023:
  if (!(_DWORD)v1623)
    goto LABEL_1042;
  v679 = v1622;
  v680 = &v1622[5 * v1623];
  while (2)
  {
    v681 = *v679;
    v1669 = (void *)v681;
    __dst[0] = &__dst[2];
    __dst[1] = (void *)0x1000000000;
    llvm::findDbgValues((uint64_t)__dst, v681);
    v682 = (uint64_t *)__dst[0];
    if (!LODWORD(__dst[1]))
      goto LABEL_1039;
    v683 = 8 * LODWORD(__dst[1]);
    while (2)
    {
      v684 = *v682;
      if (*(_BYTE *)(v681 + 16) == 21)
      {
        v685 = *(_QWORD *)(*(_QWORD *)(v681 + 24) + 80);
        if (v685)
          v686 = v685 - 24;
        else
          v686 = 0;
        if ((sub_1C604F1F4((uint64_t)&__base, v686, *v682) & 1) != 0)
        {
LABEL_1036:
          v687 = sub_1C63CF068((uint64_t)&__s2, (uint64_t *)&v1669);
          v688 = v687;
          v689 = *(unsigned int *)(v687 + 8);
          if (v689 >= *(unsigned int *)(v687 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v687, v687 + 16, v689 + 1, 8);
            v689 = *(unsigned int *)(v688 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v688 + 8 * v689) = v684;
          ++*(_DWORD *)(v688 + 8);
        }
      }
      else if (sub_1C604E6BC((uint64_t)&__base, v681, *v682))
      {
        goto LABEL_1036;
      }
      ++v682;
      v683 -= 8;
      if (v683)
        continue;
      break;
    }
    v682 = (uint64_t *)__dst[0];
LABEL_1039:
    if (v682 != (uint64_t *)&__dst[2])
      free(v682);
    v679 += 5;
    if (v679 != v680)
      continue;
    break;
  }
LABEL_1042:
  if ((*(_DWORD *)(v1551 + 200) - 1) >= 3)
    goto LABEL_1131;
  v690 = *(const llvm::Value **)v1551;
  v1744 = &v1746;
  v1745 = 0x100000000;
  v1753 = 0;
  v1748 = 0;
  v1747 = 0;
  v1749 = 0;
  v1752 = 0;
  v1750 = 0;
  v1751 = v1541;
  sub_1C53BA620((uint64_t)&v1744, 0);
  __dst[0] = (void *)1;
  v691 = 1;
  v692 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__dst[v691] = v692;
    v691 += 2;
  }
  while (v691 != 33);
  __src = v1706;
  v1705 = 0x2000000000;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x2000000000;
  sub_1C604FD48(&v1669, (uint64_t)&__s2);
  v693 = (unint64_t *)v1669;
  if ((_DWORD)v1670)
  {
    v694 = (unint64_t *)((char *)v1669 + 8 * v1670);
    do
    {
      for (i7 = *(_QWORD *)(*v693 + 8); i7; i7 = *(_QWORD *)(i7 + 8))
      {
        v696 = *(std::string **)(i7 + 24);
        v1754 = v696;
        if (v696[1].__r_.__value_.__r.__words[2] == *((_QWORD *)v690 + 5)
          && !llvm::DominatorTree::dominates((llvm::DominatorTree *)&v1744, v690, (const llvm::Instruction *)v696))
        {
          if (((uint64_t)__dst[0] & 1) != 0)
          {
            v697 = 32;
            v698 = &__dst[1];
          }
          else
          {
            v697 = (int)__dst[2];
            if (!LODWORD(__dst[2]))
            {
              v707 = 0;
LABEL_1066:
              v708 = sub_1C5646E98((uint64_t)__dst, (uint64_t)&v1754, &v1754, v707);
              *v708 = v1754;
              v709 = v1754;
              v710 = v1705;
              if (v1705 >= (unint64_t)HIDWORD(v1705))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v1706, v1705 + 1, 8);
                v710 = v1705;
              }
              *((_QWORD *)__src + v710) = v709;
              LODWORD(v1705) = v1705 + 1;
              v711 = v1754;
              v712 = LODWORD(__p.__r_.__value_.__r.__words[1]);
              if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__p.__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 8);
                v712 = LODWORD(__p.__r_.__value_.__r.__words[1]);
              }
              *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v712) = v711;
              ++LODWORD(__p.__r_.__value_.__r.__words[1]);
              continue;
            }
            v698 = (void **)__dst[1];
          }
          v699 = v697 - 1;
          v700 = ((v1754 >> 4) ^ (v1754 >> 9)) & v699;
          v701 = (llvm::DominatorTree **)&v698[v700];
          v702 = *v701;
          if (v1754 != (std::string *)*v701)
          {
            v703 = 0;
            v704 = 1;
            while (v702 != (llvm::DominatorTree *)-4096)
            {
              if (v703)
                v705 = 0;
              else
                v705 = v702 == (llvm::DominatorTree *)-8192;
              if (v705)
                v703 = v701;
              v706 = v700 + v704++;
              v700 = v706 & v699;
              v701 = (llvm::DominatorTree **)&v698[v700];
              v702 = *v701;
              if (v1754 == (std::string *)*v701)
                goto LABEL_1071;
            }
            if (v703)
              v707 = v703;
            else
              v707 = v701;
            goto LABEL_1066;
          }
        }
LABEL_1071:
        ;
      }
      ++v693;
    }
    while (v693 != v694);
    v693 = (unint64_t *)v1669;
  }
  if (v693 != &v1671)
    free(v693);
  v713 = __p.__r_.__value_.__r.__words[1];
  if (!LODWORD(__p.__r_.__value_.__r.__words[1]))
    goto LABEL_1108;
  while (2)
  {
    v714 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v713-- - 8);
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v713;
    v715 = *(_QWORD *)(v714 + 8);
    if (!v715)
      goto LABEL_1107;
    while (2)
    {
      v1669 = *(void **)(v715 + 24);
      if (!llvm::DominatorTree::dominates((llvm::DominatorTree *)&v1744, v690, (const llvm::Instruction *)v1669))
      {
        if (((uint64_t)__dst[0] & 1) != 0)
        {
          v716 = 32;
          v717 = &__dst[1];
LABEL_1085:
          v718 = v716 - 1;
          v719 = ((v1669 >> 4) ^ (v1669 >> 9)) & v718;
          v720 = &v717[v719];
          v721 = *v720;
          if (v1669 != *v720)
          {
            v722 = 0;
            v723 = 1;
            while (v721 != (void *)-4096)
            {
              if (v722)
                v724 = 0;
              else
                v724 = v721 == (void *)-8192;
              if (v724)
                v722 = v720;
              v725 = v719 + v723++;
              v719 = v725 & v718;
              v720 = &v717[v719];
              v721 = *v720;
              if (v1669 == *v720)
                goto LABEL_1103;
            }
            if (v722)
              v726 = v722;
            else
              v726 = v720;
            goto LABEL_1098;
          }
        }
        else
        {
          v716 = (int)__dst[2];
          if (LODWORD(__dst[2]))
          {
            v717 = (void **)__dst[1];
            goto LABEL_1085;
          }
          v726 = 0;
LABEL_1098:
          v727 = sub_1C5646E98((uint64_t)__dst, (uint64_t)&v1669, &v1669, v726);
          *v727 = v1669;
          v728 = v1669;
          v729 = v1705;
          if (v1705 >= (unint64_t)HIDWORD(v1705))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v1706, v1705 + 1, 8);
            v729 = v1705;
          }
          *((_QWORD *)__src + v729) = v728;
          LODWORD(v1705) = v1705 + 1;
          v730 = v1669;
          v731 = LODWORD(__p.__r_.__value_.__r.__words[1]);
          if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__p.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 8);
            v731 = LODWORD(__p.__r_.__value_.__r.__words[1]);
          }
          *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v731) = v730;
          ++LODWORD(__p.__r_.__value_.__r.__words[1]);
        }
      }
LABEL_1103:
      v715 = *(_QWORD *)(v715 + 8);
      if (v715)
        continue;
      break;
    }
    v713 = __p.__r_.__value_.__r.__words[1];
LABEL_1107:
    if (v713)
      continue;
    break;
  }
LABEL_1108:
  v1669 = &v1671;
  v1670 = (void *)0x4000000000;
  sub_1C486AF08((unsigned int *)&v1669, __src, (_BYTE *)__src + 8 * v1705);
  v1754 = (std::string *)&v1744;
  v732 = 126 - 2 * __clz(v1670);
  if ((_DWORD)v1670)
    v733 = v732;
  else
    v733 = 0;
  sub_1C604FE64((uint64_t)v1669, (const llvm::Instruction **)v1669 + v1670, (llvm::DominatorTree **)&v1754, v733, 1);
  v734 = *((_QWORD *)v690 + 4);
  if (v734)
    v735 = v734 == *((_QWORD *)v690 + 5) + 40;
  else
    v735 = 1;
  if (v735)
    v736 = 0;
  else
    v736 = (llvm::Instruction *)(v734 - 24);
  v737 = (llvm::Instruction **)v1669;
  if ((_DWORD)v1670)
  {
    v738 = 8 * v1670;
    do
    {
      v739 = *v737++;
      llvm::Instruction::moveBefore(v739, v736);
      v738 -= 8;
    }
    while (v738);
    v737 = (llvm::Instruction **)v1669;
  }
  if (v737 != (llvm::Instruction **)&v1671)
    free(v737);
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  if (__src != v1706)
    free(__src);
  if (((uint64_t)__dst[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](__dst[1], 8);
  sub_1C4DC4E38(&v1747);
  if (v1744 != &v1746)
    free(v1744);
LABEL_1131:
  v740 = **(_QWORD ***)v1541;
  v741 = *((_QWORD *)v1541 + 5);
  LODWORD(v1542) = v1541 >> 4;
  if ((*((_BYTE *)v1541 + 23) & 0x10) != 0)
  {
    v742 = *(_QWORD *)(*v740 + 152);
    v743 = *(unsigned int *)(*v740 + 168);
    if (!(_DWORD)v743)
      goto LABEL_1276;
    LODWORD(v744) = (v743 - 1) & ((v1541 >> 4) ^ (v1541 >> 9));
    v745 = (llvm::Function **)(v742 + 16 * v744);
    v746 = *v745;
    if (*v745 != v1541)
    {
      v747 = 1;
      while (v746 != (llvm::Function *)-4096)
      {
        v748 = v744 + v747++;
        v744 = v748 & (v743 - 1);
        v746 = *(llvm::Function **)(v742 + 16 * v744);
        if (v746 == v1541)
        {
          v745 = (llvm::Function **)(v742 + 16 * v744);
          goto LABEL_1277;
        }
      }
LABEL_1276:
      v745 = (llvm::Function **)(v742 + 16 * v743);
    }
LABEL_1277:
    v804 = (unint64_t *)v745[1];
    v807 = *v804;
    v806 = v804 + 2;
    v805 = v807;
    __dst[0] = &__dst[3];
    *(_OWORD *)&__dst[1] = xmmword_1C677F680;
    if (v807 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, &__dst[3], v805, 1);
      v808 = (char *)__dst[1];
LABEL_1279:
      memcpy((char *)__dst[0] + (unint64_t)v808, v806, v805);
      v808 = (char *)__dst[1];
    }
    else
    {
      v808 = 0;
      if (v805)
        goto LABEL_1279;
    }
  }
  else
  {
    v805 = 0;
    v808 = 0;
    __dst[0] = &__dst[3];
    *(_OWORD *)&__dst[1] = xmmword_1C677F680;
  }
  v809 = (void *)(v741 + 272);
  v810 = &v808[v805];
  __dst[1] = &v808[v805];
  v811 = &v808[v805 + 6];
  if (__dst[2] < v811)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, &__dst[3], (unint64_t)v811, 1);
    v810 = (char *)__dst[1];
  }
  v812 = (char *)__dst[0] + (unint64_t)v810;
  *((_WORD *)v812 + 2) = 25965;
  *(_DWORD *)v812 = 1634879022;
  __dst[1] = (char *)__dst[1] + 6;
  v813 = (llvm::PointerType *)llvm::StructType::create(v740, (unsigned __int8 *)__dst[0], (size_t)__dst[1]);
  if (__dst[0] != &__dst[3])
    free(__dst[0]);
  v1545 = 0;
  v814 = *(_DWORD *)(v1551 + 200);
  v815 = (63 - __clz(*(_QWORD *)(v1551 + 288))) | 0x100;
  if (v814 == 3)
    v816 = v815;
  else
    v816 = 0;
  v1669 = v809;
  v1670 = v740;
  v1671 = 0;
  LOWORD(v1672) = 0;
  WORD1(v1672) = v816;
  v1673 = (char *)&v1674 + 8;
  *(_QWORD *)&v1674 = 0x800000000;
  v1689 = 0;
  v1688 = 0;
  v1690 = 0;
  v817 = *(llvm::AllocaInst **)(v1551 + 264);
  if (v814)
    v818 = 0;
  else
    v818 = *(_QWORD *)(v1551 + 264);
  v1602 = (unsigned __int8 *)v818;
  if (!v814)
  {
    v819 = (void *)llvm::PointerType::get(v813, 0);
    v820 = (uint64_t **)(*v740 + 1576);
    __dst[0] = v819;
    v821 = (llvm::PointerType *)llvm::FunctionType::get(v820, (uint64_t *)__dst, 1, 0);
    v822 = llvm::PointerType::get(v821, 0);
    sub_1C605099C((uint64_t)&v1669, v822, 0, 1, 0);
    sub_1C605099C((uint64_t)&v1669, v822, 0, 1, 0);
    if (v817)
    {
      v823 = sub_1C6050BD8((uint64_t)&v1669, v817, 1);
      __dst[0] = v817;
      if (!v1630)
      {
        v831 = 0;
        goto LABEL_1306;
      }
      v824 = (v1630 - 1) & ((v817 >> 4) ^ (v817 >> 9));
      v825 = (_QWORD *)(v1629 + 16 * v824);
      v826 = (void *)*v825;
      if (v817 != (llvm::AllocaInst *)*v825)
      {
        v827 = 0;
        v828 = 1;
        while (v826 != (void *)-4096)
        {
          if (v827)
            v829 = 0;
          else
            v829 = v826 == (void *)-8192;
          if (v829)
            v827 = v825;
          v830 = v824 + v828++;
          v824 = v830 & (v1630 - 1);
          v825 = (_QWORD *)(v1629 + 16 * v824);
          v826 = (void *)*v825;
          if (v818 == *v825)
            goto LABEL_1307;
        }
        if (v827)
          v831 = v827;
        else
          v831 = v825;
LABEL_1306:
        v825 = sub_1C4E38190((uint64_t)&v1629, (uint64_t)__dst, (uint64_t *)__dst, v831);
        *v825 = __dst[0];
        *((_DWORD *)v825 + 2) = 0;
      }
LABEL_1307:
      *((_DWORD *)v825 + 2) = v823;
    }
    v832 = 64 - __clz(*(unsigned int *)(v1551 + 128) - 1);
    if (v832 <= 1)
      v832 = 1;
    LODWORD(__dst[0]) = v832;
    if (v832 <= 63)
    {
      if (v832 <= 31)
      {
        switch(v832)
        {
          case 16:
            v833 = (_QWORD *)(*v740 + 1936);
            break;
          case 8:
            v833 = (_QWORD *)(*v740 + 1912);
            break;
          case 1:
            v833 = (_QWORD *)(*v740 + 1888);
            break;
          default:
            goto LABEL_1776;
        }
      }
      else
      {
        if (v832 != 32)
          goto LABEL_1776;
        v833 = (_QWORD *)(*v740 + 1960);
      }
    }
    else
    {
      if (v832 == 64)
      {
        v833 = (_QWORD *)(*v740 + 1984);
        goto LABEL_1320;
      }
LABEL_1776:
      v1152 = sub_1C5270984(*v740 + 2168, __dst);
      v833 = (_QWORD *)*((_QWORD *)v1152 + 1);
      if (!v833)
      {
        v1153 = v1152;
        v833 = (_QWORD *)sub_1C484358C(*v740 + 2040, 24, 3);
        v1154 = (int)__dst[0];
        *v833 = v740;
        v833[2] = 0;
        v833[1] = (v1154 << 8) | 0xDu;
        *((_QWORD *)v1153 + 1) = v833;
      }
    }
LABEL_1320:
    v1545 = sub_1C605099C((uint64_t)&v1669, (uint64_t)v833, 0, 0, 0);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x400000000;
  if (*(unsigned __int8 *)(v1551 + 248) | byte_1ED82A3E0)
  {
    v1754 = 0;
    v1755 = 0;
    LODWORD(v1756[0]) = 0;
    v834 = *(unsigned int *)(v1551 + 128);
    if ((_DWORD)v834)
    {
      v835 = *(_QWORD *)(v1551 + 120);
      v836 = v835 + 8 * v834;
      do
      {
        for (i8 = *(_QWORD *)(*(_QWORD *)v835 + 8); i8; i8 = *(_QWORD *)(i8 + 8))
        {
          v838 = *(_QWORD *)(i8 + 24);
          if (v838)
            v839 = *(_BYTE *)(v838 + 16) == 31;
          else
            v839 = 0;
          if (v839)
          {
            __dst[0] = *(void **)(i8 + 24);
            v840 = *(_DWORD *)(v838 + 20);
            if ((v840 & 0x40000000) != 0)
              v841 = *(_QWORD *)(v838 - 8);
            else
              v841 = v838 - 32 * (v840 & 0x7FFFFFF);
            v842 = *(_QWORD *)(v841 + 32);
            sub_1C6180A54((uint64_t)&v1754, (uint64_t *)__dst)[1] = v842;
            v843 = *(_DWORD *)(v838 + 20);
            if ((v843 & 0x40000000) != 0)
              v844 = *(_QWORD *)(v838 - 8);
            else
              v844 = v838 - 32 * (v843 & 0x7FFFFFF);
            v845 = (_QWORD *)(v844 + 32);
            v846 = *(_QWORD *)(v844 + 96);
            if (*(_QWORD *)(v844 + 32))
            {
              **(_QWORD **)(v844 + 48) = *(_QWORD *)(v844 + 40);
              v850 = *(_QWORD *)(v844 + 40);
              if (v850)
                *(_QWORD *)(v850 + 16) = *(_QWORD *)(v844 + 48);
            }
            *v845 = v846;
            if (v846)
            {
              v849 = *(_QWORD *)(v846 + 8);
              v847 = (_QWORD *)(v846 + 8);
              v848 = v849;
              *(_QWORD *)(v844 + 40) = v849;
              if (v849)
                *(_QWORD *)(v848 + 16) = v844 + 40;
              *(_QWORD *)(v844 + 48) = v847;
              *v847 = v845;
            }
          }
        }
        v835 += 8;
      }
      while (v835 != v836);
    }
    v1744 = &v1746;
    v1745 = 0x400000000;
    v851 = v1626;
    if (v1626 < 5)
    {
      v852 = 0;
      if ((_DWORD)v1626)
      {
LABEL_1363:
        v861 = (uint64_t *)v1625;
        v862 = 40 * v851;
        do
        {
          v863 = *v861;
          if (v852 >= HIDWORD(v1745))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1744, (uint64_t)&v1746, v852 + 1, 8);
            v852 = v1745;
          }
          *((_QWORD *)v1744 + v852) = v863;
          v852 = v1745 + 1;
          LODWORD(v1745) = v1745 + 1;
          v861 += 5;
          v862 -= 40;
        }
        while (v862);
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1744, (uint64_t)&v1746, v1626, 8);
      v851 = v1626;
      v852 = v1745;
      if ((_DWORD)v1626)
        goto LABEL_1363;
    }
    llvm::StackLifetime::StackLifetime((llvm::StackLifetime *)__dst, (uint64_t)v1541, v1744, v852, 0);
    if (v1744 != &v1746)
      free(v1744);
    llvm::StackLifetime::run((llvm::StackLifetime *)__dst);
    p_s2 = &v1669;
    v1744 = &p_s2;
    v856 = 126 - 2 * __clz(v1626);
    if ((_DWORD)v1626)
      v857 = v856;
    else
      v857 = 0;
    sub_1C6050C78((uint64_t)v1625, (llvm::AllocaInst **)v1625 + 5 * v1626, (const llvm::DataLayout ****)&v1744, v857, 1);
    if ((_DWORD)v1626)
    {
      v864 = (const llvm::AllocaInst **)v1625;
      __valc = (const llvm::AllocaInst **)((char *)v1625 + 40 * v1626);
      do
      {
        v865 = *v864;
        if (LODWORD(__p.__r_.__value_.__r.__words[1]))
        {
          v866 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          v867 = __p.__r_.__value_.__r.__words[0] + 48 * LODWORD(__p.__r_.__value_.__r.__words[1]);
          while (1)
          {
            v868 = v866[2];
            if (!(_DWORD)v868)
              goto LABEL_2323;
            v869 = *(const llvm::AllocaInst ***)v866;
            v870 = *(_QWORD *)v866 + 8 * v868;
            while (1)
            {
              v871 = *v869;
              LiveRange = llvm::StackLifetime::getLiveRange((llvm::StackLifetime *)__dst, v865);
              v873 = llvm::StackLifetime::getLiveRange((llvm::StackLifetime *)__dst, v871);
              LODWORD(v874) = *(_DWORD *)(LiveRange + 8);
              v875 = *(_DWORD *)(v873 + 8);
              v874 = v875 >= v874 ? v874 : v875;
              if ((_DWORD)v874)
                break;
LABEL_1380:
              if (++v869 == (const llvm::AllocaInst **)v870)
              {
                v881 = 1;
                goto LABEL_1384;
              }
            }
            v876 = *(uint64_t **)LiveRange;
            v877 = *(uint64_t **)v873;
            while (1)
            {
              v879 = *v876++;
              v878 = v879;
              v880 = *v877++;
              if ((v880 & v878) != 0)
                break;
              if (!--v874)
                goto LABEL_1380;
            }
            v881 = 0;
LABEL_1384:
            if (v881)
            {
LABEL_2323:
              v882 = *(const llvm::AllocaInst ***)v866;
              if (((-1 << *((_WORD *)v865 + 9)) & (1 << *(_WORD *)(**(_QWORD **)v866 + 18))) != 0)
                break;
            }
            v866 += 12;
            if (v866 == (unsigned int *)v867)
              goto LABEL_1387;
          }
          v883 = v866[2];
          if (v883 >= v866[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v866, (uint64_t)(v866 + 4), v883 + 1, 8);
            v882 = *(const llvm::AllocaInst ***)v866;
            v883 = v866[2];
          }
          v882[v883] = v865;
          ++v866[2];
        }
        else
        {
LABEL_1387:
          v1744 = &v1746;
          v1746 = (const char *)v865;
          v1745 = 0x400000001;
          sub_1C631A914((uint64_t)&__p, (uint64_t)&v1744);
          if (v1744 != &v1746)
            free(v1744);
        }
        v864 += 5;
      }
      while (v864 != __valc);
    }
    v858 = v1754;
    v859 = (std::string *)((char *)v1754 + 16 * LODWORD(v1756[0]));
    if ((_DWORD)v1755)
    {
      if (LODWORD(v1756[0]))
      {
        v884 = 16 * LODWORD(v1756[0]);
        v860 = v1754;
        while ((v860->__r_.__value_.__r.__words[0] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v860 = (std::string *)((char *)v860 + 16);
          v884 -= 16;
          if (!v884)
          {
            v860 = (std::string *)((char *)v1754 + 16 * LODWORD(v1756[0]));
            break;
          }
        }
      }
      else
      {
        v860 = v1754;
      }
    }
    else
    {
      v860 = (std::string *)((char *)v1754 + 16 * LODWORD(v1756[0]));
    }
    v885 = (std::string *)((char *)v1754 + 16 * LODWORD(v1756[0]));
LABEL_1401:
    while (v860 != v885)
    {
      v886 = v860->__r_.__value_.__r.__words[0];
      v887 = *(_DWORD *)(v860->__r_.__value_.__r.__words[0] + 20);
      if ((v887 & 0x40000000) != 0)
        v888 = *(_QWORD *)(v886 - 8);
      else
        v888 = v886 - 32 * (v887 & 0x7FFFFFF);
      size = v860->__r_.__value_.__l.__size_;
      v890 = (std::string::size_type *)(v888 + 32);
      if (*(_QWORD *)(v888 + 32))
      {
        **(_QWORD **)(v888 + 48) = *(_QWORD *)(v888 + 40);
        v895 = *(_QWORD *)(v888 + 40);
        if (v895)
          *(_QWORD *)(v895 + 16) = *(_QWORD *)(v888 + 48);
      }
      *v890 = size;
      if (size)
      {
        v893 = *(_QWORD *)(size + 8);
        v891 = (std::string::size_type **)(size + 8);
        v892 = v893;
        *(_QWORD *)(v888 + 40) = v893;
        if (v893)
          *(_QWORD *)(v892 + 16) = v888 + 40;
        *(_QWORD *)(v888 + 48) = v891;
        *v891 = v890;
      }
      v894 = (std::string *)&v860->__r_.__value_.__r.__words[2];
      v860 = v859;
      if (v894 != v859)
      {
        v860 = v894;
        while ((v860->__r_.__value_.__r.__words[0] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v860 = (std::string *)((char *)v860 + 16);
          if (v860 == v859)
          {
            v860 = v859;
            goto LABEL_1401;
          }
        }
      }
    }
    sub_1C61B5658((uint64_t)&v1735);
    MEMORY[0x1CAA32FB4](v1735, 8);
    if (v1733 != &v1734)
      free(v1733);
    sub_1C61B56BC(&v1732);
    MEMORY[0x1CAA32FB4](v1731, 8);
    MEMORY[0x1CAA32FB4](v1730, 8);
    if (v1693 != &v1695)
      free(v1693);
    sub_1C4F65B54((uint64_t *)&__dst[2]);
    MEMORY[0x1CAA32FB4](v858, 8);
  }
  else if ((_DWORD)v1626)
  {
    v853 = (void **)v1625;
    v854 = 40 * v1626;
    do
    {
      v855 = *v853;
      __dst[0] = &__dst[2];
      __dst[2] = v855;
      __dst[1] = (void *)0x400000001;
      sub_1C631A914((uint64_t)&__p, (uint64_t)__dst);
      if (__dst[0] != &__dst[2])
        free(__dst[0]);
      v853 += 5;
      v854 -= 40;
    }
    while (v854);
  }
  if (LODWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v896 = __p.__r_.__value_.__r.__words[0];
    v897 = __p.__r_.__value_.__r.__words[0] + 48 * LODWORD(__p.__r_.__value_.__r.__words[1]);
    while (1)
    {
      __dst[0] = &__dst[2];
      __dst[1] = (void *)0x400000000;
      v898 = (llvm::AllocaInst **)&__dst[2];
      if (*(_DWORD *)(v896 + 8))
      {
        sub_1C4B03D34((uint64_t)__dst, v896);
        v898 = (llvm::AllocaInst **)__dst[0];
      }
      v899 = sub_1C6050BD8((uint64_t)&v1669, *v898, 0);
      v900 = (void **)__dst[0];
      if (LODWORD(__dst[1]))
        break;
LABEL_1446:
      if (v900 != &__dst[2])
        free(v900);
      v896 += 48;
      if (v896 == v897)
        goto LABEL_1449;
    }
    v901 = v899;
    v902 = (void **)((char *)__dst[0] + 8 * LODWORD(__dst[1]));
    while (2)
    {
      v903 = *v900;
      v1744 = *v900;
      if (v1630)
      {
        v904 = (v1630 - 1) & ((v903 >> 4) ^ (v903 >> 9));
        v905 = (_QWORD *)(v1629 + 16 * v904);
        v906 = *v905;
        if (v903 != (void *)*v905)
        {
          v907 = 0;
          v908 = 1;
          while (v906 != -4096)
          {
            if (v907)
              v909 = 0;
            else
              v909 = v906 == -8192;
            if (v909)
              v907 = v905;
            v910 = v904 + v908++;
            v904 = v910 & (v1630 - 1);
            v905 = (_QWORD *)(v1629 + 16 * v904);
            v906 = *v905;
            if (v903 == (void *)*v905)
              goto LABEL_1443;
          }
          if (v907)
            v911 = v907;
          else
            v911 = v905;
LABEL_1442:
          v905 = sub_1C4E38190((uint64_t)&v1629, (uint64_t)&v1744, (uint64_t *)&v1744, v911);
          *v905 = v1744;
          *((_DWORD *)v905 + 2) = 0;
        }
LABEL_1443:
        *((_DWORD *)v905 + 2) = v901;
        if (++v900 == v902)
        {
          v900 = (void **)__dst[0];
          goto LABEL_1446;
        }
        continue;
      }
      break;
    }
    v911 = 0;
    goto LABEL_1442;
  }
LABEL_1449:
  sub_1C618F3AC(&__p.__r_.__value_.__l.__data_);
  if (!*(_DWORD *)(v1551 + 200) && v1602)
  {
    memset(__dst, 0, 20);
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_1C604F3A4((uint64_t)&v1625, (uint64_t *)&v1602, (uint64_t *)__dst, (char *)&__p);
    sub_1C63CF3F4((uint64_t)__dst);
    MEMORY[0x1CAA32FB4](__dst[0], 8);
  }
  if ((_DWORD)v1623)
  {
    v914 = (uint64_t **)v1622;
    v915 = (uint64_t **)&v1622[5 * v1623];
    while (1)
    {
      v916 = *v914;
      ParamByValType = **v914;
      if (*((_BYTE *)*v914 + 16) == 21 && *(_BYTE *)(ParamByValType + 8) == 15)
      {
        v918 = v916[3];
        v921 = *(_QWORD *)(v918 + 112);
        v919 = (llvm::AttributeList *)(v918 + 112);
        v920 = v921;
        if (v921)
        {
          v922 = *((_DWORD *)v916 + 8);
          if ((v922 + 2) < *(_DWORD *)(v920 + 8))
          {
            v933 = *(_QWORD *)(v920 + 8 * (v922 + 2) + 40);
            if (v933)
            {
              if ((*(_BYTE *)(v933 + 20) & 0x20) != 0)
                ParamByValType = llvm::AttributeList::getParamByValType(v919, v922);
            }
          }
        }
      }
      v923 = sub_1C605099C((uint64_t)&v1669, ParamByValType, 0, 0, 1);
      v924 = *v914;
      __dst[0] = *v914;
      if (!v1630)
        break;
      v925 = (v1630 - 1) & ((v924 >> 4) ^ (v924 >> 9));
      v926 = (uint64_t **)(v1629 + 16 * v925);
      v927 = *v926;
      if (v924 != *v926)
      {
        v928 = 0;
        v929 = 1;
        while (v927 != (uint64_t *)-4096)
        {
          if (v928)
            v930 = 0;
          else
            v930 = v927 == (uint64_t *)-8192;
          if (v930)
            v928 = v926;
          v931 = v925 + v929++;
          v925 = v931 & (v1630 - 1);
          v926 = (uint64_t **)(v1629 + 16 * v925);
          v927 = *v926;
          if (v924 == *v926)
            goto LABEL_1476;
        }
        if (v928)
          v932 = v928;
        else
          v932 = v926;
        goto LABEL_1475;
      }
LABEL_1476:
      *((_DWORD *)v926 + 2) = v923;
      v914 += 5;
      if (v914 == v915)
        goto LABEL_1453;
    }
    v932 = 0;
LABEL_1475:
    v926 = (uint64_t **)sub_1C4E38190((uint64_t)&v1629, (uint64_t)__dst, (uint64_t *)__dst, v932);
    *v926 = (uint64_t *)__dst[0];
    *((_DWORD *)v926 + 2) = 0;
    goto LABEL_1476;
  }
LABEL_1453:
  __dst[0] = &__dst[2];
  __dst[1] = (void *)0x800000000;
  v912 = v1674;
  if (v1674 < 9)
  {
    v913 = 0;
    if ((_DWORD)v1674)
    {
LABEL_1485:
      v937 = (int8x16_t *)v1673;
      v938 = 48 * v912;
      do
      {
        if (v913 >= HIDWORD(__dst[1]))
        {
          v941 = v937[2].i8[0];
          *(int8x16_t *)&__p.__r_.__value_.__l.__data_ = vextq_s8(*v937, *v937, 8uLL);
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v937;
          LOBYTE(v1738) = v941;
          v942 = sub_1C4A20B14((uint64_t)__dst, (unint64_t)&__p, 1);
          v943 = (char *)__dst[0] + 40 * LODWORD(__dst[1]);
          v944 = *(_QWORD *)(v942 + 32);
          v945 = *(_OWORD *)(v942 + 16);
          *(_OWORD *)v943 = *(_OWORD *)v942;
          *((_OWORD *)v943 + 1) = v945;
          *((_QWORD *)v943 + 4) = v944;
        }
        else
        {
          v939 = (int8x16_t *)((char *)__dst[0] + 40 * v913);
          v940 = v937[2].i8[0];
          *v939 = vextq_s8(*v937, *v937, 8uLL);
          v939[1].i64[0] = (uint64_t)v937;
          v939[2].i8[0] = v940;
        }
        v913 = ++LODWORD(__dst[1]);
        v937 += 3;
        v938 -= 48;
      }
      while (v938);
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&__dst[2], v1674, 40);
    v912 = v1674;
    v913 = __dst[1];
    if ((_DWORD)v1674)
      goto LABEL_1485;
  }
  v1671 = llvm::performOptimizedStructLayout((unint64_t *)__dst[0], v913);
  LOBYTE(v1672) = v934;
  v935 = __dst[1];
  if (!LODWORD(__dst[1]))
  {
    v936 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    __p.__r_.__value_.__l.__size_ = 0x1000000000;
    goto LABEL_1516;
  }
  v946 = 0;
  v947 = (char *)__dst[0];
  v948 = (char *)__dst[0] + 40 * LODWORD(__dst[1]);
  do
  {
    v949 = *(_QWORD *)((_BYTE *)__dst[0] + v946) & ~(-1 << *(_BYTE *)(*(_QWORD *)((char *)__dst[0] + v946 + 16) + 33));
    v936 = v949 != 0;
    if (v949)
      v950 = 1;
    else
      v950 = 40 * LODWORD(__dst[1]) - 40 == v946;
    v946 += 40;
  }
  while (!v950);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x1000000000;
  if (LODWORD(__dst[1]) >= 0xC)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], (3 * (unint64_t)LODWORD(__dst[1])) >> 1, 8);
    if (!LODWORD(__dst[1]))
    {
      v935 = __p.__r_.__value_.__r.__words[1];
      goto LABEL_1516;
    }
    v947 = (char *)__dst[0];
    v948 = (char *)__dst[0] + 40 * LODWORD(__dst[1]);
  }
  v1560 = (unint64_t)v813;
  v951 = 0;
  do
  {
    v952 = *((_QWORD *)v947 + 2);
    v953 = *(_QWORD *)v947;
    if (*(_QWORD *)v947 != v951
      && (v949 || ((v951 + (1 << *(_BYTE *)(v952 + 33)) - 1) & -(1 << *(_BYTE *)(v952 + 33))) != v953))
    {
      llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v1670 + 1912), (llvm::Type *)(*(_QWORD *)v947 - v951));
      v955 = v954;
      v956 = LODWORD(__p.__r_.__value_.__r.__words[1]);
      if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__p.__r_.__value_.__r.__words[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 8);
        v956 = LODWORD(__p.__r_.__value_.__r.__words[1]);
      }
      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v956) = v955;
      ++LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    *(_QWORD *)(v952 + 8) = v953;
    v957 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    v958 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    *(_QWORD *)(v952 + 24) = LODWORD(__p.__r_.__value_.__r.__words[1]);
    v959 = *(_QWORD *)(v952 + 16);
    if (v957 >= v958)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], v957 + 1, 8);
      v957 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v957) = v959;
    v935 = ++LODWORD(__p.__r_.__value_.__r.__words[1]);
    v960 = *(llvm::Type **)(v952 + 40);
    if (v960)
    {
      llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v1670 + 1912), v960);
      v962 = v961;
      v963 = LODWORD(__p.__r_.__value_.__r.__words[1]);
      if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__p.__r_.__value_.__r.__words[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 8);
        v963 = LODWORD(__p.__r_.__value_.__r.__words[1]);
      }
      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v963) = v962;
      v935 = ++LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    v951 = *(_QWORD *)v952 + v953;
    v947 += 40;
  }
  while (v947 != v948);
  v813 = (llvm::PointerType *)v1560;
LABEL_1516:
  llvm::StructType::setBody((uint64_t)v813, (uint64_t)__p.__r_.__value_.__l.__data_, v935, v936);
  BYTE1(v1672) = 1;
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  if (__dst[0] != &__dst[2])
    free(__dst[0]);
  v1628 = 1;
  if ((_DWORD)v1623)
  {
    v964 = v1622;
    v965 = 40 * v1623;
    do
    {
      v966 = *v964;
      v964 += 5;
      sub_1C6053040((uint64_t)&v1669, (uint64_t)&__s2, v966);
      v965 -= 40;
    }
    while (v965);
  }
  if ((_DWORD)v1626)
  {
    v967 = (uint64_t *)v1625;
    v968 = 40 * v1626;
    do
    {
      v969 = *v967;
      v967 += 5;
      sub_1C6053040((uint64_t)&v1669, (uint64_t)&__s2, v969);
      v968 -= 40;
    }
    while (v968);
  }
  v1628 = 0;
  v970 = v1672;
  *(_BYTE *)(v1551 + 216) = v1672;
  v971 = v1671;
  *(_QWORD *)(v1551 + 224) = v1671;
  v972 = *(_DWORD *)(v1551 + 200);
  if ((v972 - 1) < 2)
  {
    v976 = *(_QWORD *)(*(_QWORD *)v1551 - 32 * (*(_DWORD *)(*(_QWORD *)v1551 + 20) & 0x7FFFFFF));
    v977 = (_QWORD *)(v976 - 32 * (*(_DWORD *)(v976 + 20) & 0x7FFFFFF));
    v978 = (unint64_t *)(*v977 + 24);
    if (*(_DWORD *)(*v977 + 32) >= 0x41u)
      v978 = (unint64_t *)*v978;
    if (v971 <= *v978)
    {
      v983 = v977[4];
      v984 = (unint64_t *)(v983 + 24);
      if (*(_DWORD *)(v983 + 32) >= 0x41u)
        v984 = (unint64_t *)*v984;
      v985 = *v984;
      v986 = __clz(v985) ^ 0x3F;
      if (v985)
        v987 = v986;
      else
        v987 = 0;
      v979 = v987 >= v970;
    }
    else
    {
      v979 = 0;
    }
    *(_BYTE *)(v1551 + 296) = v979;
  }
  else if (v972)
  {
    if (v972 == 3)
    {
      v973 = ((1 << v970) + *(_QWORD *)(v1551 + 280) - 1) & -(1 << v970);
      v974 = 63 - __clz(*(_QWORD *)(v1551 + 288));
      *(_QWORD *)(v1551 + 296) = v973;
      *(_QWORD *)(v1551 + 304) = (v971 + (1 << v974) + v973 - 1) & -(1 << v974);
      if (v970 > v974)
      {
        v975 = "The alignment requirment of frame variables cannot be higher than the alignment of the async function context";
        goto LABEL_2313;
      }
    }
  }
  else
  {
    v980 = (char *)v1673 + 48 * v1545;
    v981 = *((_QWORD *)v980 + 1);
    v982 = *((_QWORD *)v980 + 3);
    LOBYTE(v980) = v980[32];
    *(_DWORD *)(v1551 + 280) = v982;
    *(_DWORD *)(v1551 + 284) = 1 << (char)v980;
    *(_DWORD *)(v1551 + 288) = v981;
    *(_QWORD *)(v1551 + 224) = (v971 + (1 << v970) - 1) & -(1 << v970);
  }
  MEMORY[0x1CAA32FB4](v1688, 8);
  if (v1673 != (char *)&v1674 + 8)
    free(v1673);
  *(_QWORD *)(v1551 + 208) = v813;
  v988 = *(unsigned __int8 **)v1551;
  v989 = *(_QWORD *)(*(_QWORD *)v1551 + 32);
  if (v989)
    v990 = v989 == *(_QWORD *)(*(_QWORD *)v1551 + 40) + 40;
  else
    v990 = 1;
  if (v990)
    v991 = 0;
  else
    v991 = v989 - 24;
  sub_1C4773D54((uint64_t)__dst, v991, 0, 0, 0);
  v992 = llvm::PointerType::get(*(llvm::PointerType **)(v1551 + 208), 0);
  v1669 = "FramePtr";
  LOWORD(v1673) = 259;
  *(_QWORD *)(v1551 + 232) = sub_1C4773E38((uint64_t *)__dst, 49, v988, v992, (uint64_t)&v1669);
  v72 = (unint64_t)__dst[0];
  if (__dst[0] != &__dst[2])
LABEL_2317:
    free((void *)v72);
  if ((*((_BYTE *)v1541 + 23) & 0x20) == 0)
    goto LABEL_1786;
  v993 = ***(_QWORD ***)v1541;
  __dst[0] = v1541;
  v994 = *(_DWORD *)(v993 + 2496);
  if (!v994)
  {
    v1014 = 0;
    goto LABEL_1586;
  }
  v995 = *(_QWORD *)(v993 + 2480);
  v996 = v994 - 1;
  v997 = v996 & (v1542 ^ (v1541 >> 9));
  v998 = (llvm::Function **)(v995 + 40 * v997);
  v999 = *v998;
  if (*v998 != v1541)
  {
    v1000 = 0;
    v1001 = 1;
    while (v999 != (llvm::Function *)-4096)
    {
      if (v1000)
        v1002 = 0;
      else
        v1002 = v999 == (llvm::Function *)-8192;
      if (v1002)
        v1000 = v998;
      v1003 = v997 + v1001++;
      v997 = v1003 & v996;
      v998 = (llvm::Function **)(v995 + 40 * v997);
      v999 = *v998;
      if (*v998 == v1541)
        goto LABEL_1563;
    }
    if (v1000)
      v1014 = v1000;
    else
      v1014 = v998;
LABEL_1586:
    v998 = (llvm::Function **)sub_1C541AB24(v993 + 2480, (uint64_t)__dst, (uint64_t *)__dst, v1014);
    v1015 = (llvm::Function *)__dst[0];
    v998[4] = 0;
    v998[3] = 0;
    *v998 = v1015;
    v998[1] = (llvm::Function *)(v998 + 3);
    v998[2] = (llvm::Function *)0x100000000;
  }
LABEL_1563:
  v1004 = *((unsigned int *)v998 + 4);
  if (!(_DWORD)v1004)
    goto LABEL_1786;
  v1005 = (_QWORD *)((char *)v998[1] + 8);
  v1006 = 16 * v1004;
  while (*((_DWORD *)v1005 - 2))
  {
    v1005 += 2;
    v1006 -= 16;
    if (!v1006)
      goto LABEL_1786;
  }
  v1007 = *v1005;
  if (!*v1005)
    goto LABEL_1786;
  v1008 = *(_QWORD *)(v1007 - 8 * *(unsigned int *)(v1007 + 8) + 40);
  if (!v1008)
    goto LABEL_1786;
  v1009 = *(_DWORD *)(v1008 + 24);
  v197 = v1009 > 0x21;
  v1010 = (1 << v1009) & 0x206000010;
  if (v197 || v1010 == 0)
    goto LABEL_1786;
  llvm::DIBuilder::DIBuilder((uint64_t)__dst, *((_QWORD **)v1541 + 5), 0, 0);
  if (*(_DWORD *)(v1551 + 200))
    v1012 = 0;
  else
    v1012 = *(llvm **)(v1551 + 264);
  llvm::FindDbgDeclareUses(v1012, &v1601);
  if (v1601 < 8)
    goto LABEL_1785;
  v1013 = v1601 & 0xFFFFFFFFFFFFFFF8;
  if ((v1601 & 4) != 0 && v1013)
  {
    if (!*(_DWORD *)(v1013 + 8))
      goto LABEL_1785;
LABEL_1591:
    v1013 = **(_QWORD **)v1013;
  }
  else if ((v1601 & 4) != 0)
  {
    goto LABEL_1591;
  }
  v1016 = *(_QWORD *)(*(_QWORD *)(v1013 - 32 * (*(_DWORD *)(v1013 + 20) & 0x7FFFFFF) + 32) + 24);
  v1017 = *(_QWORD *)(v1016 - 8 * *(unsigned int *)(v1016 + 8));
  v1018 = v1017;
  if (*(_BYTE *)v1017 != 15)
    v1018 = *(_QWORD *)(v1017 - 8 * *(unsigned int *)(v1017 + 8));
  v1549 = *(_QWORD *)(v1013 + 48);
  v1019 = *(unsigned int *)(v1016 + 24);
  StructType = (unsigned __int8 *)llvm::DIBuilder::createStructType((uint64_t)__dst, (_BYTE *)v1007, "__coro_frame_ty", 0xFuLL, v1018, *(_DWORD *)(v1016 + 24), 8 * *(_QWORD *)(v1551 + 224), 8 * (1 << *(_BYTE *)(v1551 + 216)), 0x40u, 0, 0, 0, 0, "", 0);
  v1600 = StructType;
  v1021 = *(_QWORD *)(v1551 + 208);
  v1744 = &v1746;
  v1745 = v6;
  v1022 = *((_QWORD *)v1541 + 5) + 272;
  LOWORD(v1670) = 0;
  WORD2(v1671) = 0;
  v1674 = xmmword_1C6464ED0;
  v1673 = &v1675;
  v1676 = v1678;
  v1677 = (void **)v6;
  memset(&v1685[10], 0, 24);
  v1685[13] = v1686;
  v1685[14] = 0x800000000;
  v1686[16] = 0;
  v1686[17] = &v1687;
  v1686[18] = 0x800000000;
  sub_1C48815D8((uint64_t)&v1669, v1022);
  p_s2 = 0;
  v1607 = 0;
  LODWORD(v1608) = 0;
  sub_1C604FD48(&__p, (uint64_t)&__s2);
  v1023 = (llvm **)__p.__r_.__value_.__r.__words[0];
  v1577 = v1021;
  v1546 = v1017;
  if (LODWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v1024 = __p.__r_.__value_.__r.__words[0] + 8 * LODWORD(__p.__r_.__value_.__r.__words[1]);
    while (1)
    {
      v1025 = *v1023;
      if (!(_DWORD)v1608)
        goto LABEL_1605;
      v1026 = ((v1025 >> 4) ^ (v1025 >> 9)) & ((_DWORD)v1608 - 1);
      v1027 = (llvm *)p_s2[2 * v1026];
      if (v1025 != v1027)
        break;
LABEL_1598:
      if (v1026 == (_DWORD)v1608)
        goto LABEL_1605;
LABEL_1599:
      if (++v1023 == (llvm **)v1024)
      {
        v1023 = (llvm **)__p.__r_.__value_.__r.__words[0];
        v1021 = v1577;
        goto LABEL_1618;
      }
    }
    v1028 = 1;
    while (v1027 != (llvm *)-4096)
    {
      v1029 = v1026 + v1028++;
      v1026 = v1029 & ((_DWORD)v1608 - 1);
      v1027 = (llvm *)p_s2[2 * v1026];
      if (v1025 == v1027)
        goto LABEL_1598;
    }
LABEL_1605:
    llvm::FindDbgDeclareUses(*v1023, &v1598);
    if ((v1598 & 4) != 0)
    {
      v1030 = *(unint64_t **)(v1598 & 0xFFFFFFFFFFFFFFF8);
      v1031 = (uint64_t *)&v1030[*(unsigned int *)((v1598 & 0xFFFFFFFFFFFFFFF8) + 8)];
    }
    else
    {
      v1030 = &v1598;
      v1031 = (uint64_t *)(&v1598 + (v1598 > 7));
    }
    if (v1030 != (unint64_t *)v1031)
    {
      while (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v1030 - 32 * (*(_DWORD *)(*v1030 + 20) & 0x7FFFFFF) + 64) + 24)
                          + 32)
              - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v1030 - 32 * (*(_DWORD *)(*v1030 + 20) & 0x7FFFFFF) + 64) + 24)
                          + 24)) & 0x7FFFFFFF8) != 0)
      {
        if (++v1030 == (unint64_t *)v1031)
        {
          v1030 = (unint64_t *)v1031;
          break;
        }
      }
    }
    if ((v1598 & 4) != 0)
      v1032 = (uint64_t *)(*(_QWORD *)(v1598 & 0xFFFFFFFFFFFFFFF8)
                        + 8 * *(unsigned int *)((v1598 & 0xFFFFFFFFFFFFFFF8) + 8));
    else
      v1032 = (uint64_t *)(&v1598 + (v1598 > 7));
    if (v1030 != (unint64_t *)v1032)
    {
      v1033 = *(_QWORD *)(*(_QWORD *)(*v1030 - 32 * (*(_DWORD *)(*v1030 + 20) & 0x7FFFFFF) + 32) + 24);
      v1602 = (unsigned __int8 *)v1025;
      v1603 = v1033;
      sub_1C6187718((uint64_t)&v1754, (uint64_t)&p_s2, (uint64_t *)&v1602, &v1603);
    }
    sub_1C619127C((uint64_t *)&v1598);
    goto LABEL_1599;
  }
LABEL_1618:
  if (v1023 != (llvm **)&__p.__r_.__value_.__r.__words[2])
    free(v1023);
  v1034 = *(unsigned int *)(v1551 + 280);
  v1754 = 0;
  v1755 = 0;
  LODWORD(v1756[0]) = 0;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"__resume_fn";
  __p.__r_.__value_.__r.__words[2] = 11;
  sub_1C63CF590((uint64_t)&v1754, &__p, &__p.__r_.__value_.__r.__words[1], (uint64_t)&v1602);
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"__destroy_fn";
  __p.__r_.__value_.__r.__words[2] = 12;
  sub_1C63CF590((uint64_t)&v1754, &__p, &__p.__r_.__value_.__r.__words[1], (uint64_t)&v1602);
  LODWORD(__p.__r_.__value_.__l.__data_) = v1034;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"__coro_index";
  __p.__r_.__value_.__r.__words[2] = 12;
  sub_1C63CF590((uint64_t)&v1754, &__p, &__p.__r_.__value_.__r.__words[1], (uint64_t)&v1602);
  v1035 = *(uint64_t **)(v1021 + 16);
  v1036 = *v1035;
  v1037 = v1035[1];
  v1038 = v1035[v1034];
  v1602 = 0;
  v1603 = 0;
  v1604 = 0;
  sub_1C4768AD0((uint64_t)&v1669, v1036);
  v1041 = v1040;
  if ((_DWORD)v1039 == 1)
  BasicType = llvm::DIBuilder::createBasicType((uint64_t)__dst, "__resume_fn", (_QWORD *)0xB, v1041, 1, 0);
  LODWORD(v1598) = 0;
  *(_QWORD *)&v1599 = BasicType;
  sub_1C605394C((uint64_t)&__p, (uint64_t)&v1602, &v1598, &v1599);
  sub_1C4768AD0((uint64_t)&v1669, v1037);
  v1045 = v1044;
  if ((_DWORD)v1043 == 1)
  v1046 = llvm::DIBuilder::createBasicType((uint64_t)__dst, "__destroy_fn", (_QWORD *)0xC, v1045, 1, 0);
  LODWORD(v1598) = 1;
  *(_QWORD *)&v1599 = v1046;
  sub_1C605394C((uint64_t)&__p, (uint64_t)&v1602, &v1598, &v1599);
  sub_1C4768AD0((uint64_t)&v1669, v1038);
  v1049 = v1048;
  if ((_DWORD)v1047 == 1)
  v1050 = v1577;
  if (v1049 >= 8)
  {
    sub_1C4768AD0((uint64_t)&v1669, v1038);
    v1054 = v1053;
    if ((_DWORD)v1052 == 1)
    v1051 = v1054;
  }
  else
  {
    v1051 = 8;
  }
  v1055 = llvm::DIBuilder::createBasicType((uint64_t)__dst, "__coro_index", (_QWORD *)0xC, v1051, 8, 0);
  LODWORD(v1598) = v1034;
  *(_QWORD *)&v1599 = v1055;
  sub_1C605394C((uint64_t)&__p, (uint64_t)&v1602, &v1598, &v1599);
  sub_1C604FD48(&__p, (uint64_t)&__s2);
  v1056 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v1566 = v1018;
  v1569 = v1019;
  if (LODWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v1057 = __p.__r_.__value_.__r.__words[0] + 8 * LODWORD(__p.__r_.__value_.__r.__words[1]);
    do
    {
      v1058 = v1056->__r_.__value_.__r.__words[0];
      v1594.__r_.__value_.__r.__words[0] = v1056->__r_.__value_.__r.__words[0];
      if ((_DWORD)v1608)
      {
        v1059 = (v1058 >> 4) ^ (v1058 >> 9);
        v1060 = v1059 & ((_DWORD)v1608 - 1);
        v1061 = p_s2[2 * v1060];
        if ((void *)v1058 == v1061)
        {
LABEL_1635:
          if (v1060 != (_DWORD)v1608)
          {
            if (v1630)
            {
              LODWORD(v1063) = (v1630 - 1) & v1059;
              v1062 = (uint64_t *)(v1629 + 16 * v1063);
              v1064 = *v1062;
              if (v1058 != *v1062)
              {
                v1075 = 1;
                while (v1064 != -4096)
                {
                  v1076 = v1063 + v1075++;
                  v1063 = v1076 & (v1630 - 1);
                  v1064 = *(_QWORD *)(v1629 + 16 * v1063);
                  if (v1058 == v1064)
                  {
                    v1062 = (uint64_t *)(v1629 + 16 * v1063);
                    goto LABEL_1654;
                  }
                }
                v1062 = (uint64_t *)(v1629 + 16 * v1630);
LABEL_1654:
                v5 = 0x2000000000;
                v1018 = v1566;
                v1019 = v1569;
              }
            }
            else
            {
              v1062 = (uint64_t *)v1629;
            }
            v1065 = *((_DWORD *)v1062 + 2);
            v1066 = sub_1C6180A54((uint64_t)&p_s2, (uint64_t *)&v1594);
            v1067 = *(_QWORD *)(v1066[1] - 8 * *(unsigned int *)(v1066[1] + 8) + 8);
            if (v1067)
            {
              v1069 = *(uint64_t **)(v1067 + 8);
              v1070 = *v1069;
              v1068 = v1069 + 3;
              v1067 = v1070;
            }
            else
            {
              v1068 = 0;
            }
            LODWORD(v1598) = v1065;
            *(_QWORD *)&v1599 = v1068;
            *((_QWORD *)&v1599 + 1) = v1067;
            sub_1C63CF590((uint64_t)&v1754, &v1598, &v1599, (uint64_t)&v1596);
            v1071 = sub_1C6180A54((uint64_t)&p_s2, (uint64_t *)&v1594);
            v1072 = *(_QWORD *)(v1071[1] - 8 * *(unsigned int *)(v1071[1] + 8) + 24);
            LODWORD(v1596) = v1065;
            *((_QWORD *)&v1596 + 1) = v1072;
            sub_1C605394C((uint64_t)&v1598, (uint64_t)&v1602, &v1596, (_QWORD *)&v1596 + 1);
          }
        }
        else
        {
          v1073 = 1;
          while (v1061 != (void *)-4096)
          {
            v1074 = v1060 + v1073++;
            v1060 = v1074 & ((_DWORD)v1608 - 1);
            v1061 = p_s2[2 * v1060];
            if ((void *)v1058 == v1061)
              goto LABEL_1635;
          }
        }
      }
      v1056 = (std::string *)((char *)v1056 + 8);
    }
    while (v1056 != (std::string *)v1057);
    v1056 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v1050 = v1577;
  }
  if (v1056 != (std::string *)&__p.__r_.__value_.__r.__words[2])
    free(v1056);
  v1598 = 0;
  *(_QWORD *)&v1599 = 0;
  DWORD2(v1599) = 0;
  LODWORD(v1596) = 0;
  *(_QWORD *)((char *)&v1596 + 4) = 8;
  sub_1C5A1DA88((uint64_t)&v1598, &v1596, (__int128 *)((char *)&v1596 + 4), (uint64_t)&__p);
  LODWORD(v1596) = 1;
  *(_QWORD *)((char *)&v1596 + 4) = 0x800000008;
  sub_1C5A1DA88((uint64_t)&v1598, &v1596, (__int128 *)((char *)&v1596 + 4), (uint64_t)&__p);
  v1077 = *(_QWORD *)(v1551 + 284);
  LODWORD(v1596) = v1034;
  *(_QWORD *)((char *)&v1596 + 4) = v1077;
  sub_1C5A1DA88((uint64_t)&v1598, &v1596, (__int128 *)((char *)&v1596 + 4), (uint64_t)&__p);
  sub_1C604FD48(&__p, (uint64_t)&__s2);
  v1078 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (LODWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v1079 = __p.__r_.__value_.__r.__words[0] + 8 * LODWORD(__p.__r_.__value_.__r.__words[1]);
    do
    {
      v1080 = v1078->__r_.__value_.__r.__words[0];
      v1081 = v1078->__r_.__value_.__r.__words[0] >> 4;
      if (v1630)
      {
        LODWORD(v1082) = (v1081 ^ (v1080 >> 9)) & (v1630 - 1);
        v1083 = (uint64_t *)(v1629 + 16 * v1082);
        v1084 = *v1083;
        if (v1080 != *v1083)
        {
          v1085 = 1;
          while (v1084 != -4096)
          {
            v1086 = v1082 + v1085++;
            v1082 = v1086 & (v1630 - 1);
            v1084 = *(_QWORD *)(v1629 + 16 * v1082);
            if (v1080 == v1084)
            {
              v1083 = (uint64_t *)(v1629 + 16 * v1082);
              goto LABEL_1666;
            }
          }
          v1083 = (uint64_t *)(v1629 + 16 * v1630);
        }
      }
      else
      {
        v1083 = (uint64_t *)v1629;
      }
LABEL_1666:
      if (v1632)
      {
        LODWORD(v1087) = (v1632 - 1) & (v1081 ^ (v1080 >> 9));
        v1088 = (uint64_t *)(v1631 + 16 * v1087);
        v1089 = *v1088;
        if (v1080 != *v1088)
        {
          v1090 = 1;
          while (v1089 != -4096)
          {
            v1091 = v1087 + v1090++;
            v1087 = v1091 & (v1632 - 1);
            v1089 = *(_QWORD *)(v1631 + 16 * v1087);
            if (v1080 == v1089)
            {
              v1088 = (uint64_t *)(v1631 + 16 * v1087);
              goto LABEL_1673;
            }
          }
          v1088 = (uint64_t *)(v1631 + 16 * v1632);
        }
      }
      else
      {
        v1088 = (uint64_t *)v1631;
      }
LABEL_1673:
      if (v1636)
      {
        LODWORD(v1092) = (v1636 - 1) & (v1081 ^ (v1080 >> 9));
        v1093 = (uint64_t *)(v1635 + 16 * v1092);
        v1094 = *v1093;
        if (v1080 != *v1093)
        {
          v1095 = 1;
          while (v1094 != -4096)
          {
            v1096 = v1092 + v1095++;
            v1092 = v1096 & (v1636 - 1);
            v1094 = *(_QWORD *)(v1635 + 16 * v1092);
            if (v1080 == v1094)
            {
              v1093 = (uint64_t *)(v1635 + 16 * v1092);
              goto LABEL_1680;
            }
          }
          v1093 = (uint64_t *)(v1635 + 16 * v1636);
        }
      }
      else
      {
        v1093 = (uint64_t *)v1635;
      }
LABEL_1680:
      v1097 = *((_DWORD *)v1083 + 2);
      v1098 = *((unsigned int *)v1088 + 2);
      v1099 = v1093[1];
      LODWORD(v1594.__r_.__value_.__l.__data_) = v1097;
      *(std::string::size_type *)((char *)v1594.__r_.__value_.__r.__words + 4) = v1098 | (v1099 << 32);
      sub_1C5A1DA88((uint64_t)&v1598, &v1594, (std::string::size_type *)((char *)v1594.__r_.__value_.__r.__words + 4), (uint64_t)&v1596);
      v1078 = (std::string *)((char *)v1078 + 8);
    }
    while (v1078 != (std::string *)v1079);
    v1078 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v1050 = v1577;
  }
  if (v1078 != (std::string *)&__p.__r_.__value_.__r.__words[2])
    free(v1078);
  v1596 = 0uLL;
  v1597 = 0;
  v1595 = 0;
  v1100 = *(_DWORD *)(v1050 + 12);
  if (v1100)
  {
    __vald = 0;
    v1105 = 0;
    while (1)
    {
      if (DWORD2(v1599))
      {
        v1106 = (DWORD2(v1599) - 1) & (37 * v1105);
        v1107 = *(_DWORD *)(v1598 + 12 * v1106);
        if (v1105 != v1107)
        {
          v1144 = 1;
          while (v1107 != -1)
          {
            v1145 = v1106 + v1144++;
            v1106 = v1145 & (DWORD2(v1599) - 1);
            v1107 = *(_DWORD *)(v1598 + 12 * v1106);
            if (v1105 == v1107)
              goto LABEL_1694;
          }
          goto LABEL_1695;
        }
LABEL_1694:
        if (v1106 != DWORD2(v1599))
          break;
      }
LABEL_1695:
      v1595 = ++v1105;
      if (v1105 >= v1100)
        goto LABEL_1688;
    }
    memset(&__p, 0, sizeof(__p));
    v1108 = *(_QWORD *)(*(_QWORD *)(v1050 + 16) + 8 * v1105);
    sub_1C4768AD0((uint64_t)&v1669, v1108);
    v1110 = v1109;
    v1111 = sub_1C61FC95C((uint64_t *)&v1598, &v1595)[1];
    v1112 = sub_1C61FC95C((uint64_t *)&v1598, &v1595)[2];
    if (LODWORD(v1756[0]))
    {
      v1113 = (37 * v1595) & (LODWORD(v1756[0]) - 1);
      data = (int)v1754[v1113].__r_.__value_.__l.__data_;
      if (v1595 == data)
      {
LABEL_1699:
        if (v1113 == LODWORD(v1756[0]))
          goto LABEL_1700;
        v1122 = sub_1C63CF828((uint64_t *)&v1754, &v1595);
        v1123 = (const void *)*((_QWORD *)v1122 + 1);
        if (!v1123)
        {
          memset(&v1594, 0, sizeof(v1594));
          goto LABEL_1735;
        }
        v1131 = *((_QWORD *)v1122 + 2);
        if (v1131 > 0x7FFFFFFFFFFFFFF7)
LABEL_2315:
          abort();
        if (v1131 >= 0x17)
        {
          v1133 = (v1131 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1131 | 7) != 0x17)
            v1133 = v1131 | 7;
          v1134 = v1133 + 1;
          v1132 = (std::string *)operator new(v1133 + 1);
          v1135 = v1134 | 0x8000000000000000;
          v1050 = v1577;
          v1594.__r_.__value_.__l.__size_ = v1131;
          v1594.__r_.__value_.__r.__words[2] = v1135;
          v1594.__r_.__value_.__r.__words[0] = (std::string::size_type)v1132;
        }
        else
        {
          *((_BYTE *)&v1594.__r_.__value_.__s + 23) = *((_QWORD *)v1122 + 2);
          v1132 = &v1594;
          if (!v1131)
            goto LABEL_1734;
        }
        memmove(v1132, v1123, v1131);
LABEL_1734:
        v1132->__r_.__value_.__s.__data_[v1131] = 0;
        v1019 = v1569;
LABEL_1735:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v1594;
        if (v1604)
        {
          v1138 = (37 * v1595) & (v1604 - 1);
          v1137 = &v1602[16 * v1138];
          v1139 = *(_DWORD *)v1137;
          if (v1595 == *(_DWORD *)v1137)
            goto LABEL_1741;
          v1148 = 0;
          v1149 = 1;
          while (v1139 != -1)
          {
            if (v1148)
              v1150 = 0;
            else
              v1150 = v1139 == -2;
            if (v1150)
              v1148 = v1137;
            v1151 = v1138 + v1149++;
            v1138 = v1151 & (v1604 - 1);
            v1137 = &v1602[16 * v1138];
            v1139 = *(_DWORD *)v1137;
            v5 = 0x2000000000;
            v1018 = v1566;
            v1019 = v1569;
            v1050 = v1577;
            if (v1595 == *(_DWORD *)v1137)
              goto LABEL_1741;
          }
          if (v1148)
            v1136 = v1148;
          else
            v1136 = v1137;
          v5 = 0x2000000000;
          v1018 = v1566;
          v1019 = v1569;
          v1050 = v1577;
        }
        else
        {
          v1136 = 0;
        }
        v1137 = (unsigned __int8 *)sub_1C4E382C0((uint64_t)&v1602, &v1595, v1136);
        *(_DWORD *)v1137 = v1595;
        *((_QWORD *)v1137 + 1) = 0;
LABEL_1741:
        v1115 = (void (*)(llvm::raw_ostream *__hidden))*((_QWORD *)v1137 + 1);
LABEL_1742:
        StructType = v1600;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1141 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v1141 = __p.__r_.__value_.__l.__size_;
        MemberType = llvm::DIBuilder::createMemberType((uint64_t)__dst, v1600, (unsigned __int8 *)p_p, v1141, v1018, v1019, v1110, 8 * v1111, (8 * v1112), 64, (uint64_t)v1115, 0);
        v1143 = v1745;
        if (v1745 >= (unint64_t)HIDWORD(v1745))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1744, (uint64_t)&v1746, v1745 + 1, 8);
          v1143 = v1745;
        }
        *((_QWORD *)v1744 + v1143) = MemberType;
        LODWORD(v1745) = v1745 + 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v1105 = v1595;
        v1100 = *(_DWORD *)(v1050 + 12);
        goto LABEL_1695;
      }
      v1146 = 1;
      while (data != -1)
      {
        v1147 = v1113 + v1146++;
        v1113 = v1147 & (LODWORD(v1756[0]) - 1);
        data = (int)v1754[v1113].__r_.__value_.__l.__data_;
        if (v1595 == data)
          goto LABEL_1699;
      }
    }
LABEL_1700:
    v1115 = sub_1C60531F0((uint64_t)__dst, v1108, (uint64_t)&v1669, (uint64_t)StructType, v1019, (uint64_t)&v1596);
    v1116 = ((_QWORD *)v1115 - *((unsigned int *)v1115 + 2))[2];
    if (!v1116)
    {
      memset(&v1594, 0, sizeof(v1594));
LABEL_1713:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v1594;
      std::to_string(&v1593, __vald);
      v1127 = std::string::insert(&v1593, 0, "_");
      v1128 = v1127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1594.__r_.__value_.__l.__data_ = *(_OWORD *)&v1127->__r_.__value_.__l.__data_;
      v1594.__r_.__value_.__r.__words[2] = v1128;
      v1127->__r_.__value_.__l.__size_ = 0;
      v1127->__r_.__value_.__r.__words[2] = 0;
      v1127->__r_.__value_.__r.__words[0] = 0;
      if ((v1594.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1129 = &v1594;
      else
        v1129 = (std::string *)v1594.__r_.__value_.__r.__words[0];
      if ((v1594.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1130 = *((_BYTE *)&v1594.__r_.__value_.__s + 23) & 0x7F;
      else
        v1130 = v1594.__r_.__value_.__l.__size_;
      std::string::append(&__p, (const std::string::value_type *)v1129, v1130);
      if (SHIBYTE(v1594.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1594.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1593.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1593.__r_.__value_.__l.__data_);
      ++__vald;
      goto LABEL_1742;
    }
    v1117 = *(unint64_t **)(v1116 + 8);
    v1120 = *v1117;
    v1119 = v1117 + 3;
    v1118 = v1120;
    if (v1120 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2315;
    if (v1118 >= 0x17)
    {
      v1124 = (v1118 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1118 | 7) != 0x17)
        v1124 = v1118 | 7;
      v1125 = v1124 + 1;
      v1121 = (std::string *)operator new(v1124 + 1);
      v1126 = v1125 | 0x8000000000000000;
      v1018 = v1566;
      v1594.__r_.__value_.__l.__size_ = v1118;
      v1594.__r_.__value_.__r.__words[2] = v1126;
      v1594.__r_.__value_.__r.__words[0] = (std::string::size_type)v1121;
    }
    else
    {
      *((_BYTE *)&v1594.__r_.__value_.__s + 23) = v1118;
      v1121 = &v1594;
      if (!v1118)
        goto LABEL_1712;
    }
    memmove(v1121, v1119, v1118);
LABEL_1712:
    v1121->__r_.__value_.__s.__data_[v1118] = 0;
    v1019 = v1569;
    v1050 = v1577;
    goto LABEL_1713;
  }
LABEL_1688:
  Impl = llvm::MDTuple::getImpl((uint64_t *)__dst[1], v1744, v1745, 0, 1);
  llvm::DIBuilder::replaceArrays((uint64_t)__dst, &v1600, Impl, 0);
  v1102 = sub_1C5393B20((uint64_t *)__dst[1], (uint64_t)&v1716, (unsigned __int8 *)v1546, "__coro_frame", 0xCuLL, 0, v1018, v1019, (uint64_t)v1600, 1u, 64, 0, 0);
  if (*(_BYTE *)v1546 == 17)
  {
    v1103 = *(_QWORD *)(v1546 - 8 * *(unsigned int *)(v1546 + 8) + 56);
    if (v1103)
      v1104 = (char *)(v1103 - 8 * *(unsigned int *)(v1103 + 8));
    else
      v1104 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    __p.__r_.__value_.__l.__size_ = v5;
    sub_1C63CF88C((unsigned int *)&__p, v1104, (char *)v1103);
    v1155 = __p.__r_.__value_.__r.__words[1];
    if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= HIDWORD(__p.__r_.__value_.__r.__words[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 8);
      v1155 = __p.__r_.__value_.__r.__words[1];
    }
    *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v1155) = v1102;
    ++LODWORD(__p.__r_.__value_.__r.__words[1]);
    v1156 = (llvm::Metadata *)llvm::MDTuple::getImpl(**(uint64_t ***)v1541, __p.__r_.__value_.__l.__data_, LODWORD(__p.__r_.__value_.__r.__words[1]), 0, 1);
    llvm::MDNode::replaceOperandWith((llvm::MDNode *)v1546, 7, v1156);
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
      free(__p.__r_.__value_.__l.__data_);
  }
  v1157 = *(llvm::ValueAsMetadata **)(v1551 + 232);
  v1158 = llvm::DIExpression::getImpl((_QWORD *)__dst[1], 0, 0, 0, 1);
  v1159 = sub_1C6053830(v1551);
  llvm::DIBuilder::insertDeclare((uint64_t)__dst, v1157, (uint64_t)v1102, (uint64_t)v1158, v1549, *(_QWORD *)(v1159 + 40), v1159);
  MEMORY[0x1CAA32FB4](v1596, 8);
  MEMORY[0x1CAA32FB4](v1598, 4);
  MEMORY[0x1CAA32FB4](v1602, 8);
  MEMORY[0x1CAA32FB4](v1754, 8);
  MEMORY[0x1CAA32FB4](p_s2, 8);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v1669);
  if (v1744 != &v1746)
    free(v1744);
LABEL_1785:
  sub_1C619127C((uint64_t *)&v1601);
  sub_1C50F023C((uint64_t)__dst);
LABEL_1786:
  *(_QWORD *)&v1596 = *(_QWORD *)v1551;
  v1160 = **(_QWORD ***)v1596;
  v1669 = &v1671;
  v1670 = v1557;
  *(_QWORD *)__vale = v1160;
  v1676 = v1160;
  v1677 = &v1684;
  v1678[0] = v1685;
  v1678[1] = 0;
  v1679 = 0;
  v1680 = 512;
  v1681 = 7;
  v1675 = 0;
  *((_QWORD *)&v1674 + 1) = 0;
  v1683 = 0;
  v1682 = 0;
  v1684 = &unk_1E8167888;
  v1685[0] = &unk_1E8167A08;
  v1594.__r_.__value_.__r.__words[0] = *(_QWORD *)(v1551 + 208);
  v1593.__r_.__value_.__r.__words[0] = *(_QWORD *)(v1551 + 232);
  v1161 = *(_QWORD *)(*(_QWORD *)(v1596 + 40) + 56);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x100000000;
  v1743 = 0;
  v1738 = 0;
  v1737 = 0;
  v1739 = 0;
  v1742 = 0;
  v1740 = 0;
  v1741 = v1161;
  sub_1C53BA620((uint64_t)&__p, 0);
  v1744 = (void *)v61;
  for (i9 = 8; i9 != 72; i9 += 16)
    *(void **)((char *)&v1744 + i9) = (void *)-4096;
  p_s2 = &__s2;
  v1607 = *(_QWORD *)__vale;
  v1608 = &v1669;
  v1609 = &v1594;
  v1610 = &v1593;
  if ((_DWORD)v1623)
  {
    v1180 = v1622;
    v1561 = (unint64_t)&v1622[5 * v1623];
    while (1)
    {
      v1181 = (uint64_t ***)*v1180;
      v1182 = *v1180 >> 4;
      if (v1632)
      {
        LODWORD(v1183) = (v1182 ^ (v1181 >> 9)) & (v1632 - 1);
        v1184 = (uint64_t ****)(v1631 + 16 * v1183);
        v1185 = *v1184;
        if (v1181 != *v1184)
        {
          v1186 = 1;
          while (v1185 != (uint64_t ***)-4096)
          {
            v1187 = v1183 + v1186++;
            v1183 = v1187 & (v1632 - 1);
            v1185 = *(uint64_t ****)(v1631 + 16 * v1183);
            if (v1181 == v1185)
            {
              v1184 = (uint64_t ****)(v1631 + 16 * v1183);
              goto LABEL_1812;
            }
          }
          v1184 = (uint64_t ****)(v1631 + 16 * v1632);
        }
      }
      else
      {
        v1184 = (uint64_t ****)v1631;
      }
LABEL_1812:
      v1188 = (unint64_t)v1184[1];
      v1189 = *((_BYTE *)v1181 + 16) != 21 || v1181 == 0;
      v1578 = (uint64_t ***)*v1180;
      if (!v1189)
      {
        v1194 = sub_1C6053830(v1551);
        v1195 = (uint64_t *)v1181[3];
        v1195[14] = llvm::AttributeList::removeAttributeAtIndex(v1195 + 14, *(uint64_t **)*v1195, *((_DWORD *)v1181 + 8) + 1, 22);
        if (*((_BYTE *)*v1181 + 8) == 15)
        {
          v1196 = v1181[3];
          v1199 = v1196[14];
          v1197 = (llvm::AttributeList *)(v1196 + 14);
          v1198 = v1199;
          if (v1199)
          {
            v1200 = *((_DWORD *)v1181 + 8);
            if ((v1200 + 2) < *((_DWORD *)v1198 + 2))
            {
              v1201 = v1198[(v1200 + 2) + 5];
              if (v1201)
              {
                if ((*(_BYTE *)(v1201 + 20) & 0x20) != 0)
                {
                  v1193 = llvm::AttributeList::getParamByValType(v1197, v1200);
                  goto LABEL_1858;
                }
              }
            }
          }
        }
        goto LABEL_1857;
      }
      if (sub_1C604F354((uint64_t)v1181))
        break;
      if (!llvm::DominatorTree::dominates((llvm::DominatorTree *)&__p, (const llvm::Value *)v1596, (const llvm::Instruction *)v1181))
      {
        v1194 = sub_1C6053830(v1551);
LABEL_1857:
        v1193 = 0;
        goto LABEL_1858;
      }
      v1203 = *((unsigned __int8 *)v1181 + 16);
      if (v1203 != 33 || v1181 == 0)
      {
        if (v1203 == 83)
        {
          v1205 = v1181[5];
          v1206 = (uint64_t *)(v1205 + 5);
          v1207 = (uint64_t **)v1205[5];
          if (v1207 != v1205 + 5)
          {
            v1208 = v1207 ? (uint64_t)(v1207 - 3) : 0;
            v1209 = *(unsigned __int8 *)(v1208 + 16) - 40;
            v1210 = v1209 >= 0xFFFFFFF5 ? v1208 : 0;
            if (v1207)
            {
              if (*(_BYTE *)(v1210 + 16) == 38 && v1209 >= 0xFFFFFFF5)
              {
                v1370 = *(uint64_t **)(v1210 + 40);
                LOWORD(v1692) = 257;
                v1371 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v1370, (uint64_t *)(v1210 + 24), (uint64_t)__dst, 0);
                v1372 = (uint64_t *)v1370[5];
                if (v1372 == v1370 + 5)
                {
                  v1373 = 0;
                }
                else
                {
                  if (v1372)
                    v1374 = v1372 - 3;
                  else
                    v1374 = 0;
                  if (*((unsigned __int8 *)v1374 + 16) - 29 >= 0xB)
                    v1373 = 0;
                  else
                    v1373 = v1374;
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v1373[5] + 40, (uint64_t ***)v1373);
                v1375 = v1373[3];
                v1376 = (_QWORD *)v1373[4];
                *v1376 = v1375;
                *(_QWORD *)(v1375 + 8) = v1376;
                v1373[3] = 0;
                v1373[4] = 0;
                llvm::Value::deleteValue((llvm::Value *)v1373);
                v1377 = *(_DWORD *)(v1210 + 20);
                if ((v1377 & 0x40000000) != 0)
                  v1378 = *(llvm::Type ****)(v1210 - 8);
                else
                  v1378 = (llvm::Type ***)(v1210 - 32 * (v1377 & 0x7FFFFFF));
                v1379 = *v1378;
                LOWORD(v1692) = 257;
                v1380 = operator new(0x60uLL);
                v1380[13] = v1380[13] & 0x38000000 | 1;
                v1381 = (llvm::Value *)(v1380 + 8);
                *(_QWORD *)v1380 = 0;
                *((_QWORD *)v1380 + 1) = 0;
                *((_QWORD *)v1380 + 2) = 0;
                *((_QWORD *)v1380 + 3) = v1380 + 8;
                llvm::FuncletPadInst::FuncletPadInst((llvm::Instruction *)(v1380 + 8), 51, v1379, 0, 0, 1u, (uint64_t)__dst, (llvm::BasicBlock *)v1370);
                if (v1371)
                  v1382 = 2;
                else
                  v1382 = 1;
                v1383 = operator new(32 * v1382 + 64);
                v1194 = (uint64_t)&v1383[4 * v1382];
                *(_DWORD *)(v1194 + 20) = *(_DWORD *)(v1194 + 20) & 0x38000000 | v1382;
                v1181 = v1578;
                do
                {
                  *v1383 = 0;
                  v1383[1] = 0;
                  v1383[2] = 0;
                  v1383[3] = v1194;
                  v1383 += 4;
                }
                while (v1383 != (_QWORD *)v1194);
                llvm::CleanupReturnInst::CleanupReturnInst((llvm::CleanupReturnInst *)v1194, v1381, v1371, v1382, (llvm::BasicBlock *)v1370);
                goto LABEL_1857;
              }
            }
          }
          for (i10 = v1205[6]; i10 != v1206; i10 = (uint64_t *)i10[1])
          {
            v1213 = i10 - 3;
            if (!i10)
              v1213 = 0;
            if (*((_BYTE *)v1213 + 16) != 83)
            {
              v1355 = *((unsigned __int8 *)i10 - 8) - 38;
              v197 = v1355 > 0x38;
              v1356 = (1 << v1355) & 0x100060000000001;
              if (v197 || v1356 == 0)
                v1206 = i10;
              else
                v1206 = (uint64_t *)i10[1];
              break;
            }
          }
          v1181 = v1578;
          v1193 = 0;
          if (v1206)
            v1194 = (uint64_t)(v1206 - 3);
          else
            v1194 = 0;
        }
        else
        {
          v1193 = 0;
          v1346 = v1181[4];
          if (v1346)
            v1347 = v1346 == v1181[5] + 5;
          else
            v1347 = 1;
          if (v1347)
            v1194 = 0;
          else
            v1194 = (uint64_t)(v1346 - 3);
        }
      }
      else
      {
        v1358 = (llvm *)v1181[5];
        v1359 = (llvm::BasicBlock *)*(v1181 - 12);
        LOWORD(v1692) = 257;
        v1360 = llvm::SplitEdge(v1358, v1359, 0, 0, 0, (llvm::MemorySSAUpdater *)__dst, v1202);
        v1361 = *(_QWORD *)(v1360 + 40);
        if (v1361 == v1360 + 40)
          goto LABEL_2062;
        v1193 = 0;
        if (v1361)
          v1362 = v1361 - 24;
        else
          v1362 = 0;
        if (*(unsigned __int8 *)(v1362 + 16) - 29 >= 0xB)
          v1194 = 0;
        else
          v1194 = v1362;
      }
LABEL_1858:
      if (v1630)
      {
        LODWORD(v1214) = (v1630 - 1) & (v1182 ^ (v1181 >> 9));
        v1215 = v1629 + 16 * v1214;
        v1216 = *(uint64_t ****)v1215;
        if (v1181 != *(uint64_t ****)v1215)
        {
          v1217 = 1;
          while (v1216 != (uint64_t ***)-4096)
          {
            v1218 = v1214 + v1217++;
            v1214 = v1218 & (v1630 - 1);
            v1216 = *(uint64_t ****)(v1629 + 16 * v1214);
            if (v1181 == v1216)
            {
              v1215 = v1629 + 16 * v1214;
              goto LABEL_1865;
            }
          }
          v1215 = v1629 + 16 * v1630;
        }
      }
      else
      {
        v1215 = v1629;
      }
LABEL_1865:
      v1219 = *(_DWORD *)(v1215 + 8);
      *((_QWORD *)&v1674 + 1) = *(_QWORD *)(v1194 + 40);
      v1675 = (llvm::Function *)(v1194 + 24);
      v1220 = *(void **)(v1194 + 48);
      __dst[0] = v1220;
      if (v1220)
      {
        llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v1220, 2);
        v1221 = __dst[0];
      }
      else
      {
        v1221 = 0;
      }
      sub_1C4774EF4((uint64_t)&v1669, 0, (uint64_t)v1221);
      if (__dst[0])
        llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
      if ((*((_BYTE *)v1181 + 23) & 0x10) != 0)
      {
        v1222 = ***v1181;
        v1223 = *(_QWORD *)(v1222 + 152);
        v1224 = *(unsigned int *)(v1222 + 168);
        if (!(_DWORD)v1224)
          goto LABEL_1876;
        LODWORD(v1225) = (v1224 - 1) & (v1182 ^ (v1181 >> 9));
        v1226 = (uint64_t ****)(v1223 + 16 * v1225);
        v1227 = *v1226;
        if (*v1226 != v1181)
        {
          v1228 = 1;
          while (v1227 != (uint64_t ***)-4096)
          {
            v1229 = v1225 + v1228++;
            v1225 = v1229 & (v1224 - 1);
            v1227 = *(uint64_t ****)(v1223 + 16 * v1225);
            if (v1227 == v1181)
            {
              v1226 = (uint64_t ****)(v1223 + 16 * v1225);
              goto LABEL_1877;
            }
          }
LABEL_1876:
          v1226 = (uint64_t ****)(v1223 + 16 * v1224);
        }
LABEL_1877:
        v1230 = v1226[1];
        v1233 = *v1230;
        v1232 = (char *)(v1230 + 2);
        v1231 = v1233;
        goto LABEL_1878;
      }
      v1231 = 0;
      v1232 = &byte_1C871356D;
LABEL_1878:
      __dst[0] = v1232;
      __dst[1] = v1231;
      __dst[2] = ".spill.addr";
      LOWORD(v1692) = 773;
      v1234 = sub_1C5391F90((uint64_t *)&v1669, (llvm::GetElementPtrInst *)v1594.__r_.__value_.__l.__data_, (uint64_t **)v1593.__r_.__value_.__l.__data_, 0, v1219, (uint64_t)__dst);
      v1235 = 2 * ((63 - __clz(v1188)) & 0x3F);
      v1570 = v1193;
      v1567 = v1235;
      if (!v1193)
      {
        v1261 = (char *)operator new(0x80uLL);
        v1262 = v1261;
        *((_DWORD *)v1261 + 21) = *((_DWORD *)v1261 + 21) & 0x38000000 | 2;
        *(_QWORD *)v1261 = 0;
        *((_QWORD *)v1261 + 2) = 0;
        *((_QWORD *)v1261 + 1) = 0;
        *((_QWORD *)v1261 + 5) = 0;
        *((_QWORD *)v1261 + 6) = 0;
        *((_QWORD *)v1261 + 4) = 0;
        v1263 = (uint64_t ****)(v1261 + 32);
        *((_QWORD *)v1261 + 8) = ***v1181 + 1576;
        v1264 = (llvm::Value *)(v1261 + 64);
        *((_QWORD *)v1261 + 3) = v1261 + 64;
        *((_QWORD *)v1261 + 7) = v1261 + 64;
        *((_QWORD *)v1261 + 9) = 0;
        v1261[80] = 61;
        v1261[81] = 0;
        *((_WORD *)v1261 + 41) = 0;
        *((_DWORD *)v1261 + 21) = 2;
        *(_OWORD *)(v1261 + 88) = 0u;
        *(_OWORD *)(v1261 + 104) = 0u;
        *((_DWORD *)v1261 + 30) = 0;
        *(_QWORD *)v1261 = v1181;
        v1267 = v1181[1];
        v1266 = v1181 + 1;
        v1265 = v1267;
        *((_QWORD *)v1261 + 1) = v1267;
        if (v1267)
          v1265[2] = (uint64_t *)(v1261 + 8);
        *((_QWORD *)v1261 + 2) = v1266;
        *v1266 = v1261;
        if (*((_QWORD *)v1261 + 4))
        {
          **((_QWORD **)v1261 + 6) = *((_QWORD *)v1261 + 5);
          v1384 = *((_QWORD *)v1261 + 5);
          if (v1384)
            *(_QWORD *)(v1384 + 16) = *((_QWORD *)v1261 + 6);
        }
        *v1263 = v1234;
        if (v1234)
        {
          v1270 = v1234[1];
          v1269 = (uint64_t *****)(v1234 + 1);
          v1268 = v1270;
          *((_QWORD *)v1261 + 5) = v1270;
          if (v1270)
            v1268[2] = (uint64_t *)(v1261 + 40);
          *((_QWORD *)v1261 + 6) = v1269;
          *v1269 = v1263;
        }
        *((_WORD *)v1261 + 41) = v1235;
        v1261[124] = 1;
        LOWORD(v1692) = 257;
        (*(void (**)(_QWORD, llvm::Value *, void **, _QWORD, llvm::Function *))(*(_QWORD *)v1678[0] + 16))(v1678[0], v1264, __dst, *((_QWORD *)&v1674 + 1), v1675);
        if (!(_DWORD)v1670)
        {
LABEL_1914:
          v1253 = (llvm::Value *)v1578;
          goto LABEL_1915;
        }
        v1363 = (char *)v1669;
        v1364 = (char *)v1669 + 16 * v1670;
        v1365 = (unsigned __int8 **)(v1262 + 112);
        while (2)
        {
          v1366 = *(_DWORD *)v1363;
          v1367 = (unsigned __int8 *)*((_QWORD *)v1363 + 1);
          if (v1367)
          {
            if (v1366)
              goto LABEL_2053;
            v1754 = (std::string *)*((_QWORD *)v1363 + 1);
            llvm::MetadataTracking::track((uint64_t)&v1754, v1367, 2);
            v1368 = *v1365;
LABEL_2057:
            if (v1368)
              llvm::MetadataTracking::untrack((uint64_t)(v1262 + 112), v1368);
            v1369 = v1754;
            *v1365 = (unsigned __int8 *)v1754;
            if (v1369)
              llvm::MetadataTracking::retrack((uint64_t)&v1754, (unsigned __int8 *)v1369, (uint64_t)(v1262 + 112));
          }
          else
          {
            v1368 = *v1365;
            if (*v1365 || (v1262[87] & 0x20) != 0)
            {
              if (!v1366)
              {
                v1754 = 0;
                goto LABEL_2057;
              }
LABEL_2053:
              llvm::Value::setMetadata(v1264, *(_DWORD *)v1363, (llvm::MDNode *)v1367);
            }
          }
          v1363 += 16;
          if (v1363 == v1364)
            goto LABEL_1914;
          continue;
        }
      }
      v1757 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v1674 + 1) + 56) + 40) + 272, v1193);
      v1237 = v1236;
      v1238 = (char *)operator new(0x60uLL);
      v1239 = v1193;
      v1240 = v1238;
      v1241 = (llvm::Value *)(v1238 + 32);
      *((_QWORD *)v1238 + 2) = 0;
      *((_QWORD *)v1238 + 3) = v1238 + 32;
      LOWORD(v1692) = 257;
      *((_QWORD *)v1238 + 4) = v1239;
      *((_QWORD *)v1238 + 5) = 0;
      v1242 = (uint64_t *)(v1238 + 40);
      *((_WORD *)v1238 + 24) = 60;
      *((_DWORD *)v1238 + 13) = 1;
      *(_OWORD *)(v1238 + 56) = 0u;
      *(_OWORD *)(v1238 + 72) = 0u;
      *((_DWORD *)v1238 + 22) = 0;
      *(_QWORD *)v1238 = v1181;
      *((_QWORD *)v1238 + 1) = 0;
      if (v1181)
      {
        v1245 = v1181[1];
        v1244 = v1181 + 1;
        v1243 = v1245;
        *((_QWORD *)v1238 + 1) = v1245;
        if (v1245)
          v1243[2] = (uint64_t *)(v1238 + 8);
        *((_QWORD *)v1238 + 2) = v1244;
        *v1244 = v1238;
      }
      *((_WORD *)v1238 + 25) = 2 * (v1237 & 0x3F);
      v1238[92] = 1;
      llvm::Value::setName((uint64_t ***)v1238 + 4, (uint64_t)__dst);
      (*(void (**)(_QWORD, llvm::Value *, std::string **, _QWORD, llvm::Function *))(*(_QWORD *)v1678[0]
                                                                                              + 16))(v1678[0], v1241, &v1754, *((_QWORD *)&v1674 + 1), v1675);
      if ((_DWORD)v1670)
      {
        v1348 = (char *)v1669;
        v1349 = (char *)v1669 + 16 * v1670;
        v1350 = (unsigned __int8 **)(v1240 + 80);
        do
        {
          v1351 = *(_DWORD *)v1348;
          v1352 = (unsigned __int8 *)*((_QWORD *)v1348 + 1);
          if (v1352)
          {
            if (!v1351)
            {
              v1602 = (unsigned __int8 *)*((_QWORD *)v1348 + 1);
              llvm::MetadataTracking::track((uint64_t)&v1602, v1352, 2);
              v1353 = *v1350;
              if (!*v1350)
              {
LABEL_2028:
                v1354 = v1602;
                *v1350 = v1602;
                if (v1354)
                  llvm::MetadataTracking::retrack((uint64_t)&v1602, v1354, (uint64_t)(v1240 + 80));
                goto LABEL_2025;
              }
LABEL_2022:
              llvm::MetadataTracking::untrack((uint64_t)(v1240 + 80), v1353);
              goto LABEL_2028;
            }
          }
          else
          {
            v1353 = *v1350;
            if (!*v1350 && (v1240[55] & 0x20) == 0)
              goto LABEL_2025;
            if (!v1351)
            {
              v1602 = 0;
              if (!v1353)
                goto LABEL_2028;
              goto LABEL_2022;
            }
          }
          llvm::Value::setMetadata(v1241, *(_DWORD *)v1348, (llvm::MDNode *)v1352);
LABEL_2025:
          v1348 += 16;
        }
        while (v1348 != v1349);
      }
      v1246 = (char *)operator new(0x80uLL);
      v1247 = v1246;
      *((_DWORD *)v1246 + 21) = *((_DWORD *)v1246 + 21) & 0x38000000 | 2;
      *(_QWORD *)v1246 = 0;
      *((_QWORD *)v1246 + 2) = 0;
      *((_QWORD *)v1246 + 1) = 0;
      *((_QWORD *)v1246 + 5) = 0;
      *((_QWORD *)v1246 + 6) = 0;
      *((_QWORD *)v1246 + 4) = 0;
      *((_QWORD *)v1246 + 8) = ***(_QWORD ***)v1241 + 1576;
      v1248 = (llvm::Value *)(v1246 + 64);
      *((_QWORD *)v1246 + 3) = v1246 + 64;
      *((_QWORD *)v1246 + 7) = v1246 + 64;
      *((_QWORD *)v1246 + 9) = 0;
      v1246[80] = 61;
      v1246[81] = 0;
      *((_DWORD *)v1246 + 21) = 2;
      *(_OWORD *)(v1246 + 88) = 0u;
      *(_OWORD *)(v1246 + 104) = 0u;
      *((_DWORD *)v1246 + 30) = 0;
      v1249 = *v1242;
      *(_QWORD *)v1246 = v1241;
      *((_QWORD *)v1246 + 1) = v1249;
      if (v1249)
        *(_QWORD *)(v1249 + 16) = v1246 + 8;
      *((_QWORD *)v1246 + 2) = v1242;
      *v1242 = (uint64_t)v1246;
      *((_QWORD *)v1246 + 4) = v1234;
      if (v1234)
      {
        v1252 = v1234[1];
        v1251 = v1234 + 1;
        v1250 = v1252;
        *((_QWORD *)v1246 + 5) = v1252;
        if (v1252)
          v1250[2] = (uint64_t *)(v1246 + 40);
        *((_QWORD *)v1246 + 6) = v1251;
        *v1251 = v1246 + 32;
      }
      *((_WORD *)v1246 + 41) = v1235;
      v1246[124] = 1;
      LOWORD(v1692) = 257;
      (*(void (**)(_QWORD, llvm::Value *, void **, _QWORD, llvm::Function *))(*(_QWORD *)v1678[0] + 16))(v1678[0], v1248, __dst, *((_QWORD *)&v1674 + 1), v1675);
      v1253 = (llvm::Value *)v1578;
      if ((_DWORD)v1670)
      {
        v1254 = (char *)v1669;
        v1255 = (char *)v1669 + 16 * v1670;
        v1256 = (unsigned __int8 **)(v1247 + 112);
        do
        {
          v1257 = *(_DWORD *)v1254;
          v1258 = (unsigned __int8 *)*((_QWORD *)v1254 + 1);
          if (v1258)
          {
            if (!v1257)
            {
              v1754 = (std::string *)*((_QWORD *)v1254 + 1);
              llvm::MetadataTracking::track((uint64_t)&v1754, v1258, 2);
              v1259 = *v1256;
              goto LABEL_1902;
            }
          }
          else
          {
            v1259 = *v1256;
            if (!*v1256 && (v1247[87] & 0x20) == 0)
              goto LABEL_1899;
            if (!v1257)
            {
              v1754 = 0;
LABEL_1902:
              if (v1259)
                llvm::MetadataTracking::untrack((uint64_t)(v1247 + 112), v1259);
              v1260 = v1754;
              *v1256 = (unsigned __int8 *)v1754;
              if (v1260)
                llvm::MetadataTracking::retrack((uint64_t)&v1754, (unsigned __int8 *)v1260, (uint64_t)(v1247 + 112));
              goto LABEL_1899;
            }
          }
          llvm::Value::setMetadata(v1248, *(_DWORD *)v1254, (llvm::MDNode *)v1258);
LABEL_1899:
          v1254 += 16;
        }
        while (v1254 != v1255);
      }
LABEL_1915:
      v1271 = *((unsigned int *)v1180 + 4);
      if ((_DWORD)v1271)
      {
        v1272 = 0;
        v1273 = 0;
        v1274 = (uint64_t *)v1180[1];
        v1275 = &v1274[v1271];
        while (1)
        {
          v1276 = *v1274;
          v1277 = *(_QWORD *)(*v1274 + 40);
          if (v1272 != v1277)
            break;
LABEL_1918:
          v1278 = sub_1C605437C(v1276);
          if (v1276)
            v1279 = !v1278;
          else
            v1279 = 1;
          if (!v1279)
            sub_1C6044370(&v1744, v1276, *(_BYTE *)(v1551 + 248));
          if (v1276 && *(_BYTE *)(v1276 + 16) == 83)
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1276, v1273, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1276 + 40) + 40, (uint64_t ***)v1276);
            v1280 = *(_QWORD *)(v1276 + 24);
            v1281 = *(_QWORD **)(v1276 + 32);
            *v1281 = v1280;
            *(_QWORD *)(v1280 + 8) = v1281;
            *(_QWORD *)(v1276 + 24) = 0;
            *(_QWORD *)(v1276 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v1276);
          }
          else
          {
            llvm::User::replaceUsesOfWith((llvm::User *)v1276, v1253, v1273);
          }
          if (++v1274 == v1275)
            goto LABEL_2007;
        }
        v1282 = v1277 + 40;
        for (i11 = *(_QWORD *)(v1277 + 48); i11 != v1282; i11 = *(_QWORD *)(i11 + 8))
        {
          v1284 = i11 - 24;
          if (!i11)
            v1284 = 0;
          if (*(_BYTE *)(v1284 + 16) != 83)
          {
            v1285 = *(unsigned __int8 *)(i11 - 8) - 38;
            v197 = v1285 > 0x38;
            v1286 = (1 << v1285) & 0x100060000000001;
            if (v197 || v1286 == 0)
              v1282 = i11;
            else
              v1282 = *(_QWORD *)(i11 + 8);
            break;
          }
        }
        v1288 = 0;
        if (v1282)
          v1289 = (_QWORD *)(v1282 - 24);
        else
          v1289 = 0;
        *((_QWORD *)&v1674 + 1) = v1289[5];
        v1675 = (llvm::Function *)(v1289 + 3);
        v1290 = (void *)v1289[6];
        __dst[0] = v1290;
        if (v1290)
        {
          llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v1290, 2);
          v1288 = __dst[0];
        }
        sub_1C4774EF4((uint64_t)&v1669, 0, (uint64_t)v1288);
        if (__dst[0])
          llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
        v1292 = sub_1C6053D74((unsigned int **)&p_s2, *v1180, v1291);
        v1293 = v1292;
        v1294 = (uint64_t ***)*v1180;
        if ((*(_BYTE *)(*v1180 + 23) & 0x10) == 0)
        {
          v1304 = 0;
          v1305 = &byte_1C871356D;
LABEL_1956:
          __dst[0] = v1305;
          __dst[1] = v1304;
          __dst[2] = ".reload.addr";
          LOWORD(v1692) = 773;
          llvm::Value::setName((uint64_t ***)v1292, (uint64_t)__dst);
          if (v1570)
          {
            v1273 = (llvm::Value *)v1293;
LABEL_1976:
            llvm::FindDbgDeclareUses(v1253, &v1754);
            if ((v1754 & 4) != 0)
            {
              v1330 = *(std::string ***)((unint64_t)v1754 & 0xFFFFFFFFFFFFFFF8);
              v1331 = (llvm::DominatorTree **)&v1330[*(unsigned int *)(((unint64_t)v1754 & 0xFFFFFFFFFFFFFFF8)
                                                                     + 8)];
            }
            else
            {
              v1330 = &v1754;
              v1331 = (llvm::DominatorTree **)(&v1754 + ((unint64_t)v1754 > 7));
            }
            while (v1330 != (std::string **)v1331)
            {
              v1333 = (uint64_t)*v1330++;
              v1332 = v1333;
              llvm::DIBuilder::DIBuilder((uint64_t)__dst, *(_QWORD **)(*(_QWORD *)(v1277 + 56) + 40), 0, 0);
              v1335 = *(_QWORD *)(v1333 + 48);
              if (v1675)
                v1336 = (uint64_t)v1675 - 24;
              else
                v1336 = 0;
              v1334 = v1332 - 32 * (*(_DWORD *)(v1332 + 20) & 0x7FFFFFF);
              llvm::DIBuilder::insertDeclare((uint64_t)__dst, v1273, *(_QWORD *)(*(_QWORD *)(v1334 + 32) + 24), *(_QWORD *)(*(_QWORD *)(v1334 + 64) + 24), v1335, *(_QWORD *)(v1336 + 40), v1336);
              sub_1C50F023C((uint64_t)__dst);
              sub_1C6044370(&v1744, v1332, *(_BYTE *)(v1551 + 248));
            }
            sub_1C619127C((uint64_t *)&v1754);
            v1272 = v1277;
            v1253 = (llvm::Value *)v1578;
            goto LABEL_1918;
          }
          v1307 = *v1180;
          v1308 = *v1180 >> 4;
          if (v1630)
          {
            LODWORD(v1310) = (v1308 ^ (v1307 >> 9)) & (v1630 - 1);
            v1309 = (uint64_t *)(v1629 + 16 * v1310);
            v1311 = *v1309;
            if (v1307 != *v1309)
            {
              v1344 = 1;
              while (v1311 != -4096)
              {
                v1345 = v1310 + v1344++;
                v1310 = v1345 & (v1630 - 1);
                v1311 = *(_QWORD *)(v1629 + 16 * v1310);
                if (v1307 == v1311)
                {
                  v1309 = (uint64_t *)(v1629 + 16 * v1310);
                  goto LABEL_1961;
                }
              }
              v1309 = (uint64_t *)(v1629 + 16 * v1630);
            }
          }
          else
          {
            v1309 = (uint64_t *)v1629;
          }
LABEL_1961:
          if ((*(_BYTE *)(v1307 + 23) & 0x10) == 0)
          {
            v1321 = 0;
            v1322 = (llvm::DominatorTree *)&byte_1C871356D;
            goto LABEL_1970;
          }
          v1312 = ***(_QWORD ***)v1307;
          v1313 = *(_QWORD *)(v1312 + 152);
          v1314 = *(unsigned int *)(v1312 + 168);
          if ((_DWORD)v1314)
          {
            LODWORD(v1315) = (v1314 - 1) & (v1308 ^ (v1307 >> 9));
            v1316 = (uint64_t *)(v1313 + 16 * v1315);
            v1317 = *v1316;
            if (*v1316 == v1307)
            {
LABEL_1969:
              v1320 = (__int128 **)v1316[1];
              v1323 = *v1320;
              v1322 = (llvm::DominatorTree *)(v1320 + 2);
              v1321 = v1323;
LABEL_1970:
              v1324 = *(_QWORD *)(*(_QWORD *)(v1594.__r_.__value_.__r.__words[0] + 16)
                                + 8 * *((unsigned int *)v1309 + 2));
              v1754 = (std::string *)v1322;
              v1755 = v1321;
              v1756[0] = ".reload";
              v1757 = 773;
              v1325 = (char *)operator new(0x60uLL);
              v1326 = v1325;
              v1273 = (llvm::Value *)(v1325 + 32);
              *((_QWORD *)v1325 + 2) = 0;
              *((_QWORD *)v1325 + 3) = v1325 + 32;
              LOWORD(v1692) = 257;
              *((_QWORD *)v1325 + 4) = v1324;
              *((_QWORD *)v1325 + 5) = 0;
              *((_WORD *)v1325 + 24) = 60;
              *((_DWORD *)v1325 + 13) = 1;
              *(_OWORD *)(v1325 + 56) = 0u;
              *(_OWORD *)(v1325 + 72) = 0u;
              *((_DWORD *)v1325 + 22) = 0;
              *(_QWORD *)v1325 = v1293;
              *((_QWORD *)v1325 + 1) = 0;
              if (v1293)
              {
                v1329 = *((_QWORD *)v1293 + 1);
                v1328 = v1293 + 2;
                v1327 = v1329;
                *((_QWORD *)v1325 + 1) = v1329;
                if (v1329)
                  *(_QWORD *)(v1327 + 16) = v1325 + 8;
                *((_QWORD *)v1325 + 2) = v1328;
                *v1328 = v1325;
              }
              *((_WORD *)v1325 + 25) = v1567;
              v1325[92] = 1;
              llvm::Value::setName((uint64_t ***)v1325 + 4, (uint64_t)__dst);
              (*(void (**)(_QWORD, llvm::Value *, std::string **, _QWORD, llvm::Function *))(*(_QWORD *)v1678[0] + 16))(v1678[0], v1273, &v1754, *((_QWORD *)&v1674 + 1), v1675);
              if (!(_DWORD)v1670)
              {
LABEL_1975:
                v1253 = (llvm::Value *)v1578;
                goto LABEL_1976;
              }
              v1337 = (char *)v1669;
              v1338 = (char *)v1669 + 16 * v1670;
              v1339 = (unsigned __int8 **)(v1326 + 80);
              while (1)
              {
                v1340 = *(_DWORD *)v1337;
                v1341 = (unsigned __int8 *)*((_QWORD *)v1337 + 1);
                if (v1341)
                {
                  if (!v1340)
                  {
                    v1602 = (unsigned __int8 *)*((_QWORD *)v1337 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v1602, v1341, 2);
                    v1342 = *v1339;
                    if (!*v1339)
                    {
LABEL_1998:
                      v1343 = v1602;
                      *v1339 = v1602;
                      if (v1343)
                        llvm::MetadataTracking::retrack((uint64_t)&v1602, v1343, (uint64_t)(v1326 + 80));
                      goto LABEL_1995;
                    }
LABEL_1992:
                    llvm::MetadataTracking::untrack((uint64_t)(v1326 + 80), v1342);
                    goto LABEL_1998;
                  }
                }
                else
                {
                  v1342 = *v1339;
                  if (!*v1339 && (v1326[55] & 0x20) == 0)
                    goto LABEL_1995;
                  if (!v1340)
                  {
                    v1602 = 0;
                    if (!v1342)
                      goto LABEL_1998;
                    goto LABEL_1992;
                  }
                }
                llvm::Value::setMetadata(v1273, *(_DWORD *)v1337, (llvm::MDNode *)v1341);
LABEL_1995:
                v1337 += 16;
                if (v1337 == v1338)
                  goto LABEL_1975;
              }
            }
            v1318 = 1;
            while (v1317 != -4096)
            {
              v1319 = v1315 + v1318++;
              v1315 = v1319 & (v1314 - 1);
              v1317 = *(_QWORD *)(v1313 + 16 * v1315);
              if (v1317 == v1307)
              {
                v1316 = (uint64_t *)(v1313 + 16 * v1315);
                goto LABEL_1969;
              }
            }
          }
          v1316 = (uint64_t *)(v1313 + 16 * v1314);
          goto LABEL_1969;
        }
        v1295 = ***v1294;
        v1296 = *(_QWORD *)(v1295 + 152);
        v1297 = *(unsigned int *)(v1295 + 168);
        if ((_DWORD)v1297)
        {
          LODWORD(v1298) = (v1297 - 1) & ((v1294 >> 4) ^ (v1294 >> 9));
          v1299 = (uint64_t ****)(v1296 + 16 * v1298);
          v1300 = *v1299;
          if (*v1299 == v1294)
          {
LABEL_1955:
            v1303 = v1299[1];
            v1306 = *v1303;
            v1305 = (char *)(v1303 + 2);
            v1304 = v1306;
            goto LABEL_1956;
          }
          v1301 = 1;
          while (v1300 != (uint64_t ***)-4096)
          {
            v1302 = v1298 + v1301++;
            v1298 = v1302 & (v1297 - 1);
            v1300 = *(uint64_t ****)(v1296 + 16 * v1298);
            if (v1300 == v1294)
            {
              v1299 = (uint64_t ****)(v1296 + 16 * v1298);
              goto LABEL_1955;
            }
          }
        }
        v1299 = (uint64_t ****)(v1296 + 16 * v1297);
        goto LABEL_1955;
      }
LABEL_2007:
      v1180 += 5;
      if (v1180 == (uint64_t *)v1561)
        goto LABEL_1789;
    }
    v1190 = llvm::BasicBlock::getSingleSuccessor((llvm::BasicBlock *)v1181[5]);
    v1191 = *(_QWORD *)(v1190 + 48);
    if (v1191 != v1190 + 40)
    {
      while (1)
      {
        v1194 = v1191 - 24;
        v1192 = v1191 ? v1191 - 24 : 0;
        if (*(_BYTE *)(v1192 + 16) != 83)
          goto LABEL_1857;
        v1193 = 0;
        v1194 = 0;
        v1191 = *(_QWORD *)(v1191 + 8);
        if (v1191 == v1190 + 40)
          goto LABEL_1858;
      }
    }
LABEL_2062:
    v1193 = 0;
    v1194 = 0;
    goto LABEL_1858;
  }
LABEL_1789:
  v1163 = *(uint64_t **)(sub_1C6053830(v1551) + 40);
  v1164 = sub_1C6053830(v1551);
  __dst[0] = "AllocaSpillBB";
  LOWORD(v1692) = 259;
  v1165 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v1163, (uint64_t *)(v1164 + 24), (uint64_t)__dst, 0);
  v1166 = v1165;
  v1167 = v1165[6];
  if (v1167)
    v1168 = v1167 - 24;
  else
    v1168 = 0;
  __dst[0] = "PostSpill";
  LOWORD(v1692) = 259;
  llvm::BasicBlock::splitBasicBlock(v1165, (uint64_t *)(v1168 + 24), (uint64_t)__dst, 0);
  *(_QWORD *)(v1551 + 240) = v1166;
  v1169 = v1166[6];
  if (v1169)
    v1170 = (_QWORD *)(v1169 - 24);
  else
    v1170 = 0;
  if ((*(_DWORD *)(v1551 + 200) - 1) < 3)
  {
    *((_QWORD *)&v1674 + 1) = v1170[5];
    v1675 = (llvm::Function *)(v1170 + 3);
    v1171 = (void *)v1170[6];
    __dst[0] = v1171;
    if (v1171)
    {
      llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v1171, 2);
      v1172 = __dst[0];
    }
    else
    {
      v1172 = 0;
    }
    sub_1C4774EF4((uint64_t)&v1669, 0, (uint64_t)v1172);
    if (__dst[0])
      llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
    if ((_DWORD)v1626)
    {
      v1174 = (llvm::Value **)v1625;
      v1175 = 40 * v1626;
      do
      {
        v1176 = *v1174;
        v1174 += 5;
        v1177 = sub_1C6053D74((unsigned int **)&p_s2, (uint64_t)v1176, v1173);
        llvm::Value::takeName((llvm::Value *)v1177, v1176);
        llvm::Value::doRAUW(v1176, (llvm::Value *)v1177, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1176 + 5) + 40, (uint64_t ***)v1176);
        v1178 = *((_QWORD *)v1176 + 3);
        v1179 = (_QWORD *)*((_QWORD *)v1176 + 4);
        *v1179 = v1178;
        *(_QWORD *)(v1178 + 8) = v1179;
        *((_QWORD *)v1176 + 3) = 0;
        *((_QWORD *)v1176 + 4) = 0;
        llvm::Value::deleteValue(v1176);
        v1175 -= 40;
      }
      while (v1175);
    }
    goto LABEL_2096;
  }
  *((_QWORD *)&v1674 + 1) = v1170[5];
  v1675 = (llvm::Function *)(v1170 + 3);
  v1385 = (void *)v1170[6];
  __dst[0] = v1385;
  if (v1385)
  {
    llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v1385, 2);
    v1386 = __dst[0];
  }
  else
  {
    v1386 = 0;
  }
  sub_1C4774EF4((uint64_t)&v1669, 0, (uint64_t)v1386);
  if (__dst[0])
    llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
  __dst[0] = &__dst[2];
  __dst[1] = (void *)v4;
  if ((_DWORD)v1626)
  {
    v1431 = (llvm::Value **)v1625;
    v1432 = (llvm::Value **)((char *)v1625 + 40 * v1626);
    while (1)
    {
      v1433 = *v1431;
      LODWORD(__dst[1]) = 0;
      v1434 = *((_QWORD *)v1433 + 1);
      if (!v1434)
        goto LABEL_2201;
      do
      {
        v1435 = *(const llvm::Instruction **)(v1434 + 24);
        if (llvm::DominatorTree::dominates((llvm::DominatorTree *)&__p, (const llvm::Value *)v1596, v1435))
        {
          v1437 = LODWORD(__dst[1]);
          if (LODWORD(__dst[1]) >= (unint64_t)HIDWORD(__dst[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&__dst[2], LODWORD(__dst[1]) + 1, 8);
            v1437 = LODWORD(__dst[1]);
          }
          *((_QWORD *)__dst[0] + v1437) = v1435;
          ++LODWORD(__dst[1]);
        }
        v1434 = *(_QWORD *)(v1434 + 8);
      }
      while (v1434);
      if (!LODWORD(__dst[1]))
        goto LABEL_2201;
      v1438 = sub_1C6053D74((unsigned int **)&p_s2, (uint64_t)v1433, v1436);
      v1439 = (llvm::Value *)v1438;
      if ((*((_BYTE *)v1433 + 23) & 0x10) == 0)
      {
        v1449 = 0;
        v1450 = (llvm::DominatorTree *)&byte_1C871356D;
        goto LABEL_2193;
      }
      v1440 = ***(_QWORD ***)v1433;
      v1441 = *(_QWORD *)(v1440 + 152);
      v1442 = *(unsigned int *)(v1440 + 168);
      if (!(_DWORD)v1442)
        goto LABEL_2191;
      LODWORD(v1443) = (v1442 - 1) & ((v1433 >> 4) ^ (v1433 >> 9));
      v1444 = (llvm::Value **)(v1441 + 16 * v1443);
      v1445 = *v1444;
      if (*v1444 != v1433)
        break;
LABEL_2192:
      v1448 = v1444[1];
      v1451 = *(__int128 **)v1448;
      v1450 = (llvm::Value *)((char *)v1448 + 16);
      v1449 = v1451;
LABEL_2193:
      v1754 = (std::string *)v1450;
      v1755 = v1449;
      v1756[0] = ".reload.addr";
      v1757 = 773;
      llvm::Value::setName((uint64_t ***)v1438, (uint64_t)&v1754);
      v1754 = (std::string *)v1756;
      v1755 = (__int128 *)v4;
      llvm::findDbgUsers((uint64_t)&v1754, (uint64_t)v1433);
      if ((_DWORD)v1755)
      {
        v1452 = (llvm::User **)v1754;
        v1453 = 8 * v1755;
        do
        {
          v1454 = *v1452++;
          llvm::User::replaceUsesOfWith(v1454, v1433, v1439);
          v1453 -= 8;
        }
        while (v1453);
      }
      if (LODWORD(__dst[1]))
      {
        v1455 = (llvm::User **)__dst[0];
        v1456 = 8 * LODWORD(__dst[1]);
        do
        {
          v1457 = *v1455++;
          llvm::User::replaceUsesOfWith(v1457, v1433, v1439);
          v1456 -= 8;
        }
        while (v1456);
      }
      if (v1754 != (std::string *)v1756)
        free(v1754);
LABEL_2201:
      v1431 += 5;
      if (v1431 == v1432)
        goto LABEL_2089;
    }
    v1446 = 1;
    while (v1445 != (llvm::Value *)-4096)
    {
      v1447 = v1443 + v1446++;
      v1443 = v1447 & (v1442 - 1);
      v1445 = *(llvm::Value **)(v1441 + 16 * v1443);
      if (v1445 == v1433)
      {
        v1444 = (llvm::Value **)(v1441 + 16 * v1443);
        goto LABEL_2192;
      }
    }
LABEL_2191:
    v1444 = (llvm::Value **)(v1441 + 16 * v1442);
    goto LABEL_2192;
  }
LABEL_2089:
  v1387 = sub_1C6053830(v1551);
  *((_QWORD *)&v1674 + 1) = *(_QWORD *)(v1387 + 40);
  v1675 = (llvm::Function *)(v1387 + 24);
  v1388 = *(llvm::DominatorTree **)(v1387 + 48);
  v1754 = (std::string *)v1388;
  if (v1388)
  {
    llvm::MetadataTracking::track((uint64_t)&v1754, (unsigned __int8 *)v1388, 2);
    v1389 = (llvm::DominatorTree *)v1754;
  }
  else
  {
    v1389 = 0;
  }
  sub_1C4774EF4((uint64_t)&v1669, 0, (uint64_t)v1389);
  if (v1754)
    llvm::MetadataTracking::untrack((uint64_t)&v1754, (unsigned __int8 *)v1754);
  if ((_DWORD)v1626)
  {
    v1458 = (char *)v1625;
    v1579 = (char *)v1625 + 40 * v1626;
    while (1)
    {
      v1459 = *(llvm::AllocaInst **)v1458;
      if (v1458[32])
        break;
LABEL_2217:
      v1480 = *((_QWORD *)v1458 + 1);
      v1481 = *((unsigned int *)v1458 + 6);
      v1482 = (uint64_t **)(v1480 + 32 * v1481);
      if (*((_DWORD *)v1458 + 4))
      {
        if (*((_DWORD *)v1458 + 6))
        {
          v1483 = 32 * v1481;
          v1484 = (uint64_t **)*((_QWORD *)v1458 + 1);
          while (((unint64_t)*v1484 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v1484 += 4;
            v1483 -= 32;
            if (!v1483)
              goto LABEL_2222;
          }
        }
        else
        {
          v1484 = (uint64_t **)*((_QWORD *)v1458 + 1);
        }
      }
      else
      {
LABEL_2222:
        v1484 = (uint64_t **)(v1480 + 32 * v1481);
      }
      v1485 = (uint64_t **)(v1480 + 32 * v1481);
LABEL_2225:
      while (v1484 != v1485)
      {
        v1486 = (unsigned __int8 *)sub_1C6053D74((unsigned int **)&p_s2, (uint64_t)v1459, v1390);
        v1487 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)__vale + 1912), 0);
        v1757 = 257;
        v1488 = (uint64_t *)sub_1C4773E38((uint64_t *)&v1669, 49, v1486, v1487, (uint64_t)&v1754);
        v1489 = (llvm::GetElementPtrInst *)(**(_QWORD **)__vale + 1912);
        v1491 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)__vale + 1984), (llvm::Type *)(v1484 + 1), v1490);
        v1757 = 257;
        v1492 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v1669, v1489, v1488, (uint64_t)v1491, (uint64_t)&v1754);
        v1493 = **v1484;
        v1757 = 257;
        v1494 = sub_1C4773E38((uint64_t *)&v1669, 49, v1492, v1493, (uint64_t)&v1754);
        v1496 = v1484 + 4;
        v1495 = *v1484;
        v1754 = &__p;
        v1755 = &v1596;
        llvm::Value::replaceUsesWithIf((llvm::Value *)v1495, (llvm::Value *)v1494, (unsigned int (*)(uint64_t, uint64_t))sub_1C60543C8, (uint64_t)&v1754);
        v1484 = v1482;
        if (v1496 != v1482)
        {
          v1484 = v1496;
          while (((unint64_t)*v1484 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v1484 += 4;
            if (v1484 == v1482)
            {
              v1484 = v1482;
              goto LABEL_2225;
            }
          }
        }
      }
      v1458 += 40;
      if (v1458 == v1579)
        goto LABEL_2094;
    }
    if (llvm::AllocaInst::isArrayAllocation(*(llvm::AllocaInst **)v1458))
    {
      v975 = "Coroutines cannot handle copying of array allocas yet";
      goto LABEL_2313;
    }
    v1461 = sub_1C6053D74((unsigned int **)&p_s2, (uint64_t)v1459, v1460);
    v1462 = *((_QWORD *)v1459 + 8);
    v1605 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v1674 + 1) + 56) + 40) + 272, v1462);
    v1464 = v1463;
    v1465 = (char *)operator new(0x60uLL);
    v1466 = v1465;
    *((_QWORD *)v1465 + 1) = 0;
    v1467 = (uint64_t *)(v1465 + 32);
    *((_QWORD *)v1465 + 2) = 0;
    *((_QWORD *)v1465 + 3) = v1465 + 32;
    v1757 = 257;
    *((_QWORD *)v1465 + 4) = v1462;
    *((_QWORD *)v1465 + 5) = 0;
    v1468 = (uint64_t *)(v1465 + 40);
    *((_WORD *)v1465 + 24) = 60;
    *((_DWORD *)v1465 + 13) = 1;
    *(_OWORD *)(v1465 + 56) = 0u;
    *(_OWORD *)(v1465 + 72) = 0u;
    *((_DWORD *)v1465 + 22) = 0;
    *(_QWORD *)v1465 = v1459;
    v1469 = (_QWORD *)((char *)v1459 + 8);
    v1470 = *((_QWORD *)v1459 + 1);
    *((_QWORD *)v1465 + 1) = v1470;
    if (v1470)
      *(_QWORD *)(v1470 + 16) = v1465 + 8;
    *((_QWORD *)v1465 + 2) = v1469;
    *v1469 = v1465;
    *((_WORD *)v1465 + 25) = 2 * (v1464 & 0x3F);
    v1465[92] = 1;
    llvm::Value::setName((uint64_t ***)v1465 + 4, (uint64_t)&v1754);
    (*(void (**)(_QWORD, uint64_t *, unsigned __int8 **, _QWORD, llvm::Function *))(*(_QWORD *)v1678[0] + 16))(v1678[0], v1467, &v1602, *((_QWORD *)&v1674 + 1), v1675);
    if (!(_DWORD)v1670)
    {
LABEL_2210:
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v1674 + 1) + 56) + 40) + 272, *v1467);
      v1472 = v1471;
      v1473 = (char *)operator new(0x80uLL);
      v1474 = v1473;
      *((_DWORD *)v1473 + 21) = *((_DWORD *)v1473 + 21) & 0x38000000 | 2;
      *(_QWORD *)v1473 = 0;
      *((_QWORD *)v1473 + 2) = 0;
      *((_QWORD *)v1473 + 1) = 0;
      *((_QWORD *)v1473 + 5) = 0;
      *((_QWORD *)v1473 + 6) = 0;
      *((_QWORD *)v1473 + 4) = 0;
      *((_QWORD *)v1473 + 8) = **(_QWORD **)*v1467 + 1576;
      v1475 = (llvm::Value *)(v1473 + 64);
      *((_QWORD *)v1473 + 3) = v1473 + 64;
      *((_QWORD *)v1473 + 7) = v1473 + 64;
      *((_QWORD *)v1473 + 9) = 0;
      v1473[80] = 61;
      v1473[81] = 0;
      *((_DWORD *)v1473 + 21) = 2;
      *(_OWORD *)(v1473 + 88) = 0u;
      *(_OWORD *)(v1473 + 104) = 0u;
      *((_DWORD *)v1473 + 30) = 0;
      v1476 = *v1468;
      *(_QWORD *)v1473 = v1467;
      *((_QWORD *)v1473 + 1) = v1476;
      if (v1476)
        *(_QWORD *)(v1476 + 16) = v1473 + 8;
      *((_QWORD *)v1473 + 2) = v1468;
      *v1468 = (uint64_t)v1473;
      *((_QWORD *)v1473 + 4) = v1461;
      if (v1461)
      {
        v1479 = *((_QWORD *)v1461 + 1);
        v1478 = v1461 + 2;
        v1477 = v1479;
        *((_QWORD *)v1473 + 5) = v1479;
        if (v1479)
          *(_QWORD *)(v1477 + 16) = v1473 + 40;
        *((_QWORD *)v1473 + 6) = v1478;
        *v1478 = v1473 + 32;
      }
      *((_WORD *)v1473 + 41) = 2 * (v1472 & 0x3F);
      v1473[124] = 1;
      v1757 = 257;
      (*(void (**)(_QWORD, llvm::Value *, std::string **, _QWORD, llvm::Function *))(*(_QWORD *)v1678[0]
                                                                                              + 16))(v1678[0], v1475, &v1754, *((_QWORD *)&v1674 + 1), v1675);
      if (!(_DWORD)v1670)
        goto LABEL_2217;
      v1505 = (char *)v1669;
      v1506 = (char *)v1669 + 16 * v1670;
      v1507 = (unsigned __int8 **)(v1474 + 112);
      while (1)
      {
        v1508 = *(_DWORD *)v1505;
        v1390 = (const llvm::APInt *)*((_QWORD *)v1505 + 1);
        if (v1390)
        {
          if (!v1508)
          {
            v1602 = (unsigned __int8 *)*((_QWORD *)v1505 + 1);
            llvm::MetadataTracking::track((uint64_t)&v1602, (unsigned __int8 *)v1390, 2);
            v1509 = *v1507;
            goto LABEL_2258;
          }
        }
        else
        {
          v1509 = *v1507;
          if (!*v1507 && (v1474[87] & 0x20) == 0)
            goto LABEL_2255;
          if (!v1508)
          {
            v1602 = 0;
LABEL_2258:
            if (v1509)
              llvm::MetadataTracking::untrack((uint64_t)(v1474 + 112), v1509);
            v1510 = v1602;
            *v1507 = v1602;
            if (v1510)
              llvm::MetadataTracking::retrack((uint64_t)&v1602, v1510, (uint64_t)(v1474 + 112));
            goto LABEL_2255;
          }
        }
        llvm::Value::setMetadata(v1475, *(_DWORD *)v1505, v1390);
LABEL_2255:
        v1505 += 16;
        if (v1505 == v1506)
          goto LABEL_2217;
      }
    }
    v1497 = (char *)v1669;
    v1498 = (char *)v1669 + 16 * v1670;
    v1499 = (unsigned __int8 **)(v1466 + 80);
    while (1)
    {
      v1500 = *(_DWORD *)v1497;
      v1501 = (unsigned __int8 *)*((_QWORD *)v1497 + 1);
      if (v1501)
      {
        if (!v1500)
        {
          v1598 = *((_QWORD *)v1497 + 1);
          v1573 = v1499;
          llvm::MetadataTracking::track((uint64_t)&v1598, v1501, 2);
          v1499 = v1573;
          v1502 = *v1573;
          if (!*v1573)
          {
LABEL_2245:
            v1504 = (unsigned __int8 *)v1598;
            *v1499 = (unsigned __int8 *)v1598;
            if (v1504)
            {
              v1574 = v1499;
              llvm::MetadataTracking::retrack((uint64_t)&v1598, v1504, (uint64_t)v1499);
              v1499 = v1574;
            }
            goto LABEL_2242;
          }
LABEL_2239:
          v1571 = v1499;
          llvm::MetadataTracking::untrack((uint64_t)v1499, v1502);
          v1499 = v1571;
          goto LABEL_2245;
        }
      }
      else
      {
        v1502 = *v1499;
        if (!*v1499 && (v1466[55] & 0x20) == 0)
          goto LABEL_2242;
        if (!v1500)
        {
          v1598 = 0;
          if (!v1502)
            goto LABEL_2245;
          goto LABEL_2239;
        }
      }
      v1572 = v1498;
      v1503 = v1499;
      llvm::Value::setMetadata((llvm::Value *)v1467, *(_DWORD *)v1497, (llvm::MDNode *)v1501);
      v1499 = v1503;
      v1498 = v1572;
LABEL_2242:
      v1497 += 16;
      if (v1497 == v1498)
        goto LABEL_2210;
    }
  }
LABEL_2094:
  if (__dst[0] != &__dst[2])
    free(__dst[0]);
LABEL_2096:
  if ((v1744 & 1) == 0)
    MEMORY[0x1CAA32FB4](v1745, 8);
  sub_1C4DC4E38(&v1737);
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  if (v1669 != &v1671)
    free(v1669);
  if ((_DWORD)v1615)
  {
    v1404 = (uint64_t *)v1614;
    v1405 = (uint64_t *)((char *)v1614 + 8 * v1615);
    do
    {
      v1406 = *v1404;
      v1407 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*v1404 + 40) + 56) + 40);
      sub_1C4773D54((uint64_t)__dst, *v1404, 0, 0, 0);
      __p.__r_.__value_.__r.__words[0] = 0;
      v1408 = *(_QWORD *)(v1406 + 8);
      if (v1408)
      {
        while (1)
        {
          v1409 = *(_QWORD *)(v1408 + 24);
          v1410 = sub_1C604FCB0(v1409);
          v1411 = !v1409 || !v1410;
          if (!v1411 && !sub_1C60543DC(*(_QWORD *)(v1409 + 40), 3))
            break;
          v1408 = *(_QWORD *)(v1408 + 8);
          if (!v1408)
            goto LABEL_2147;
        }
        Declaration = llvm::Intrinsic::getDeclaration(v1407, 288, 0, 0);
        if (Declaration)
          v1413 = *(uint64_t ***)(Declaration + 24);
        else
          v1413 = 0;
        LOWORD(v1673) = 257;
        __p.__r_.__value_.__r.__words[0] = sub_1C4774778((uint64_t *)__dst, v1413, Declaration, 0, 0, (uint64_t)&v1669, 0);
      }
LABEL_2147:
      v1414 = (llvm::PointerType *)(*v1696 + 1912);
      v1415 = *(llvm::ValueHandleBase **)(v1406 - 32 * (*(_DWORD *)(v1406 + 20) & 0x7FFFFFF));
      LOWORD(v1673) = 257;
      v1416 = sub_1C486A5CC((uint64_t *)__dst, v1414, v1415, (uint64_t)&v1669);
      v1417 = (llvm::Value *)v1416;
      v1418 = *(_QWORD *)(v1406 - 32 * (*(_DWORD *)(v1406 + 20) & 0x7FFFFFF) + 32);
      v1419 = (unint64_t *)(v1418 + 24);
      if (*(_DWORD *)(v1418 + 32) >= 0x41u)
        v1419 = (unint64_t *)*v1419;
      v1420 = *v1419;
      v1421 = __clz(v1420) ^ 0x3F;
      if (v1420)
        v1422 = v1421;
      else
        v1422 = 0;
      *((_WORD *)v1416 + 9) = v1422 | *((_WORD *)v1416 + 9) & 0xFFC0;
      v1423 = *(_QWORD *)(v1406 + 8);
      if (v1423)
      {
        do
        {
          v1424 = *(llvm::ValueAsMetadata **)(v1423 + 24);
          if (sub_1C604FCFC((uint64_t)v1424))
          {
            llvm::Value::doRAUW(v1424, v1417, (llvm::Value *)1);
          }
          else if (__p.__r_.__value_.__r.__words[0])
          {
            v1694 = *((_QWORD *)v1424 + 5);
            v1695 = (llvm::ValueAsMetadata *)((char *)v1424 + 24);
            v1425 = (void *)*((_QWORD *)v1424 + 6);
            v1669 = v1425;
            if (v1425)
            {
              llvm::MetadataTracking::track((uint64_t)&v1669, (unsigned __int8 *)v1425, 2);
              v1426 = v1669;
            }
            else
            {
              v1426 = 0;
            }
            sub_1C4774EF4((uint64_t)__dst, 0, (uint64_t)v1426);
            if (v1669)
              llvm::MetadataTracking::untrack((uint64_t)&v1669, (unsigned __int8 *)v1669);
            v1427 = llvm::Intrinsic::getDeclaration(v1407, 287, 0, 0);
            if (v1427)
              v1428 = *(uint64_t ***)(v1427 + 24);
            else
              v1428 = 0;
            LOWORD(v1673) = 257;
            sub_1C4774778((uint64_t *)__dst, v1428, v1427, (uint64_t *)&__p, 1, (uint64_t)&v1669, 0);
          }
          v1429 = v1612;
          if (v1612 >= (unint64_t)HIDWORD(v1612))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1611, v1558, v1612 + 1, 8);
            v1429 = v1612;
          }
          *((_QWORD *)v1611 + v1429) = v1424;
          v1430 = v1612 + 1;
          LODWORD(v1612) = v1612 + 1;
          v1423 = *(_QWORD *)(v1423 + 8);
        }
        while (v1423);
      }
      else
      {
        v1430 = v1612;
      }
      if (v1430 >= HIDWORD(v1612))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1611, v1558, v1430 + 1, 8);
        v1430 = v1612;
      }
      *((_QWORD *)v1611 + v1430) = v1406;
      LODWORD(v1612) = v1612 + 1;
      if (__dst[0] != &__dst[2])
        free(__dst[0]);
      ++v1404;
    }
    while (v1404 != v1405);
  }
  v1391 = (uint64_t *)v1611;
  if ((_DWORD)v1612)
  {
    v1392 = 8 * v1612;
    do
    {
      v1393 = *v1391++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1393 + 40) + 40, (uint64_t ***)v1393);
      v1394 = *(_QWORD *)(v1393 + 24);
      v1395 = *(_QWORD **)(v1393 + 32);
      *v1395 = v1394;
      *(_QWORD *)(v1394 + 8) = v1395;
      *(_QWORD *)(v1393 + 24) = 0;
      *(_QWORD *)(v1393 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v1393);
      v1392 -= 8;
    }
    while (v1392);
    v1391 = (uint64_t *)v1611;
  }
  if (v1391 != (uint64_t *)v1558)
    free(v1391);
  if (v1614 != v1556)
    free(v1614);
  MEMORY[0x1CAA32FB4](v1635, 8);
  MEMORY[0x1CAA32FB4](v1633, 8);
  MEMORY[0x1CAA32FB4](v1631, 8);
  MEMORY[0x1CAA32FB4](v1629, 8);
  v1396 = (llvm::Instruction *)v1625;
  if ((_DWORD)v1626)
  {
    v1397 = (char *)v1625 - 32;
    v1398 = 40 * v1626;
    do
    {
      sub_1C63CF3F4((uint64_t)&v1397[v1398]);
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v1397[v1398], 8);
      v1398 -= 40;
    }
    while (v1398);
    v1396 = (llvm::Instruction *)v1625;
  }
  if (v1396 != v1550)
    free(v1396);
  sub_1C63CD318(v1553);
  if ((__s2 & 1) == 0)
    MEMORY[0x1CAA32FB4](v1618, 8);
  if (v1637 != v1555)
    free(v1637);
  v1399 = (char *)v1666;
  if ((_DWORD)v1667)
  {
    v1400 = 152 * v1667;
    do
    {
      v1401 = &v1399[v1400];
      v1402 = *(char **)&v1399[v1400 - 80];
      if (&v1399[v1400 - 64] != v1402)
        free(v1402);
      v1403 = (char *)*((_QWORD *)v1401 - 19);
      if (v1401 - 136 != v1403)
        free(v1403);
      v1400 -= 152;
    }
    while (v1400);
    v1399 = (char *)v1666;
  }
  if (v1399 != v1668)
    free(v1399);
  if (__base != &v1649)
    free(__base);
}

void sub_1C604E60C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;

  sub_1C604EE44(a1, a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (v6 == 1)
  {
    v13[0] = "After";
    v7 = 259;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v7 = 256;
LABEL_5:
    v14 = v7;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v9 = *(_QWORD *)a2;
  }
  else
  {
    LOBYTE(v6) = 2;
    v9 = a2;
  }
  v13[0] = "After";
  v13[2] = v9;
  v13[3] = v8;
  LOBYTE(v14) = 3;
  HIBYTE(v14) = v6;
LABEL_10:
  v10 = v5 + 40;
  if (v4)
    v11 = v4 == v10;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = v4 - 24;
  sub_1C604EE44(v12, (uint64_t)v13);
}

uint64_t sub_1C604E6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::BasicBlock *SingleSuccessor;

  SingleSuccessor = *(llvm::BasicBlock **)(a2 + 40);
  if (sub_1C604F354(a2))
    SingleSuccessor = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(SingleSuccessor);
  return sub_1C604F1F4(a1, (unint64_t)SingleSuccessor, a3);
}

uint64_t sub_1C604E70C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    do
    {
      v5 = v2;
      v6 = (_QWORD *)(v2 + 8);
      v2 = *(_QWORD *)(v2 + 8);
      result = v6[2];
      if ((*(_BYTE *)(result + 16) & 0xFE) != 0x3C)
      {
        result = sub_1C604E7B4(result, v4, a2);
        if (*(_QWORD *)v5)
        {
          **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
          v7 = *(_QWORD *)(v5 + 8);
          if (v7)
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
        }
        *(_QWORD *)v5 = result;
        if (result)
        {
          v9 = *(_QWORD *)(result + 8);
          result += 8;
          v8 = v9;
          *v6 = v9;
          if (v9)
            *(_QWORD *)(v8 + 16) = v6;
          *(_QWORD *)(v5 + 16) = result;
          *(_QWORD *)result = v5;
        }
      }
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C604E7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  llvm::Value *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char *FirstNonPHIOrDbg;
  llvm::PointerType *v21;
  llvm::ConstantPointerNull *v22;
  llvm::PointerType *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  llvm::Value *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v38;
  char *v39;
  unsigned __int8 **v40;
  int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  char *v45;
  unsigned __int8 **v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  _QWORD v52[4];
  __int16 v53;
  unsigned __int8 *v54[4];
  __int16 v55;
  unsigned __int8 *v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t ***)(a2 + 64);
  sub_1C4773D54((uint64_t)&v57, a1, 0, 0, 0);
  v53 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v60 + 56) + 40) + 272, (uint64_t)v6);
  v8 = v7;
  v9 = (char *)operator new(0x60uLL);
  v10 = v9;
  v11 = (llvm::Value *)(v9 + 32);
  v55 = 257;
  *((_QWORD *)v9 + 3) = v9 + 32;
  *((_QWORD *)v9 + 4) = v6;
  *((_QWORD *)v9 + 5) = 0;
  *((_WORD *)v9 + 24) = 60;
  *((_DWORD *)v9 + 13) = 1;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *((_DWORD *)v9 + 22) = 0;
  *(_QWORD *)v9 = a2;
  v13 = (_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v9 + 1) = v12;
  if (v12)
    *(_QWORD *)(v12 + 16) = v9 + 8;
  *((_QWORD *)v9 + 2) = v13;
  *v13 = v9;
  *((_WORD *)v9 + 25) = 2 * (v8 & 0x3F);
  v9[92] = 1;
  llvm::Value::setName((uint64_t ***)v9 + 4, (uint64_t)v54);
  (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, char *))(*(_QWORD *)v62 + 16))(v62, v11, v52, v60, v61);
  if (v58)
  {
    v38 = (char *)v57;
    v39 = (char *)v57 + 16 * v58;
    v40 = (unsigned __int8 **)(v10 + 80);
    do
    {
      v41 = *(_DWORD *)v38;
      v42 = (unsigned __int8 *)*((_QWORD *)v38 + 1);
      if (v42)
      {
        if (!v41)
        {
          v56 = (unsigned __int8 *)*((_QWORD *)v38 + 1);
          llvm::MetadataTracking::track((uint64_t)&v56, v42, 2);
          v43 = *v40;
          goto LABEL_39;
        }
      }
      else
      {
        v43 = *v40;
        if (!*v40 && (v10[55] & 0x20) == 0)
          goto LABEL_36;
        if (!v41)
        {
          v56 = 0;
LABEL_39:
          if (v43)
            llvm::MetadataTracking::untrack((uint64_t)(v10 + 80), v43);
          v44 = v56;
          *v40 = v56;
          if (v44)
            llvm::MetadataTracking::retrack((uint64_t)&v56, v44, (uint64_t)(v10 + 80));
          goto LABEL_36;
        }
      }
      llvm::Value::setMetadata(v11, *(_DWORD *)v38, (llvm::MDNode *)v42);
LABEL_36:
      v38 += 16;
    }
    while (v38 != v39);
  }
  v14 = sub_1C604ECE4((uint64_t *)&v57, (llvm::PointerType **)v11, a3);
  if (*(_BYTE *)(a1 + 16) != 84)
  {
    FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(*(llvm::BasicBlock **)(a1 - 96), 1);
    v60 = *((_QWORD *)FirstNonPHIOrDbg + 5);
    v61 = FirstNonPHIOrDbg + 24;
    v19 = (unsigned __int8 *)*((_QWORD *)FirstNonPHIOrDbg + 6);
    v54[0] = v19;
    if (!v19)
    {
      v15 = 0;
      goto LABEL_15;
    }
    goto LABEL_43;
  }
  v15 = 0;
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
    v17 = v16 == *(_QWORD *)(a1 + 40) + 40;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16 - 24;
  v60 = *(_QWORD *)(v18 + 40);
  v61 = (char *)(v18 + 24);
  v19 = *(unsigned __int8 **)(v18 + 48);
  v54[0] = v19;
  if (v19)
  {
LABEL_43:
    llvm::MetadataTracking::track((uint64_t)v54, v19, 2);
    v15 = v54[0];
  }
LABEL_15:
  sub_1C4774EF4((uint64_t)&v57, 0, (uint64_t)v15);
  if (v54[0])
    llvm::MetadataTracking::untrack((uint64_t)v54, v54[0]);
  v21 = (llvm::PointerType *)llvm::FunctionType::get(v6, 0, 0, 0);
  v22 = (llvm::ConstantPointerNull *)llvm::PointerType::get(v21, 0);
  v24 = llvm::ConstantPointerNull::get(v22, v23);
  v55 = 257;
  v25 = (uint64_t *)sub_1C4774778((uint64_t *)&v57, (uint64_t **)v21, (uint64_t)v24, 0, 0, (uint64_t)v54, 0);
  v26 = *(unsigned int *)(a3 + 176);
  if (v26 >= *(_DWORD *)(a3 + 180))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 168, a3 + 184, v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a3 + 176);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 168) + 8 * v26) = v25;
  ++*(_DWORD *)(a3 + 176);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v60 + 56) + 40) + 272, *v25);
  v28 = v27;
  v29 = (char *)operator new(0x80uLL);
  v30 = v29;
  *((_DWORD *)v29 + 21) = *((_DWORD *)v29 + 21) & 0x38000000 | 2;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 5) = 0;
  *((_QWORD *)v29 + 6) = 0;
  *((_QWORD *)v29 + 4) = 0;
  *((_QWORD *)v29 + 8) = **(_QWORD **)*v25 + 1576;
  v31 = (llvm::Value *)(v29 + 64);
  *((_QWORD *)v29 + 3) = v29 + 64;
  *((_QWORD *)v29 + 7) = v29 + 64;
  *((_QWORD *)v29 + 9) = 0;
  v29[80] = 61;
  v29[81] = 0;
  *((_WORD *)v29 + 41) = 0;
  *((_DWORD *)v29 + 21) = 2;
  *(_OWORD *)(v29 + 88) = 0u;
  *(_OWORD *)(v29 + 104) = 0u;
  *((_DWORD *)v29 + 30) = 0;
  *(_QWORD *)v29 = v25;
  v34 = v25[1];
  v33 = v25 + 1;
  v32 = v34;
  *((_QWORD *)v29 + 1) = v34;
  if (v34)
    *(_QWORD *)(v32 + 16) = v29 + 8;
  *((_QWORD *)v29 + 2) = v33;
  *v33 = v29;
  if (*((_QWORD *)v29 + 4))
  {
    **((_QWORD **)v29 + 6) = *((_QWORD *)v29 + 5);
    v51 = *((_QWORD *)v29 + 5);
    if (v51)
      *(_QWORD *)(v51 + 16) = *((_QWORD *)v29 + 6);
  }
  v35 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v29 + 5) = v35;
  *((_QWORD *)v29 + 4) = a2;
  if (v35)
    *(_QWORD *)(v35 + 16) = v29 + 40;
  *((_QWORD *)v29 + 6) = v13;
  *v13 = v29 + 32;
  *((_WORD *)v29 + 41) = 2 * (v28 & 0x3F);
  v29[124] = 1;
  v55 = 257;
  (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, char *))(*(_QWORD *)v62 + 16))(v62, v31, v54, v60, v61);
  v36 = (char *)v57;
  if (v58)
  {
    v45 = (char *)v57 + 16 * v58;
    v46 = (unsigned __int8 **)(v30 + 112);
    while (1)
    {
      v47 = *(_DWORD *)v36;
      v48 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
      if (v48)
      {
        if (!v47)
        {
          v52[0] = *((_QWORD *)v36 + 1);
          llvm::MetadataTracking::track((uint64_t)v52, v48, 2);
          v49 = *v46;
          goto LABEL_55;
        }
      }
      else
      {
        v49 = *v46;
        if (!*v46 && (v30[87] & 0x20) == 0)
          goto LABEL_52;
        if (!v47)
        {
          v52[0] = 0;
LABEL_55:
          if (v49)
            llvm::MetadataTracking::untrack((uint64_t)(v30 + 112), v49);
          v50 = (unsigned __int8 *)v52[0];
          *v46 = (unsigned __int8 *)v52[0];
          if (v50)
            llvm::MetadataTracking::retrack((uint64_t)v52, v50, (uint64_t)(v30 + 112));
          goto LABEL_52;
        }
      }
      llvm::Value::setMetadata(v31, *(_DWORD *)v36, (llvm::MDNode *)v48);
LABEL_52:
      v36 += 16;
      if (v36 == v45)
      {
        v36 = (char *)v57;
        break;
      }
    }
  }
  if (v36 != (char *)&v59)
    free(v36);
  return v14;
}

uint64_t sub_1C604ECE4(uint64_t *a1, llvm::PointerType **a2, uint64_t a3)
{
  uint64_t **v6;
  llvm::PointerType *v7;
  llvm::ConstantPointerNull *v8;
  llvm::PointerType *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[4];
  __int16 v15;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t **)llvm::PointerType::get(*a2, 0);
  v14[0] = (uint64_t)*a2;
  v7 = (llvm::PointerType *)llvm::FunctionType::get(v6, v14, 1, 0);
  v8 = (llvm::ConstantPointerNull *)llvm::PointerType::get(v7, 0);
  v10 = llvm::ConstantPointerNull::get(v8, v9);
  v16[0] = (uint64_t)a2;
  v15 = 257;
  v11 = sub_1C4774778(a1, (uint64_t **)v7, (uint64_t)v10, v16, 1, (uint64_t)v14, 0);
  v12 = *(unsigned int *)(a3 + 176);
  if (v12 >= *(_DWORD *)(a3 + 180))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 168, a3 + 184, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 176);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 168) + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 176);
  return v11;
}

uint64_t sub_1C604EDE8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    do
    {
      result = *(_QWORD *)(v1 + 24);
      if (*(_BYTE *)(result + 16) == 84)
      {
        v2 = *(_QWORD *)(result - 32);
        if (v2)
        {
          if (!*(_BYTE *)(v2 + 16)
            && *(_QWORD *)(v2 + 24) == *(_QWORD *)(result + 72)
            && (*(_BYTE *)(v2 + 33) & 0x20) != 0
            && *(_DWORD *)(v2 + 36) == 29)
          {
            break;
          }
        }
      }
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

void sub_1C604EE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v4 + 48);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (v6 == a1 && llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(a1 + 40)))
    llvm::Value::setName((uint64_t ***)v4, a2);
  else
    llvm::BasicBlock::splitBasicBlock((uint64_t *)v4, (uint64_t *)(a1 + 24), a2, 0);
}

uint64_t sub_1C604EEBC(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t ***v33;
  int v34;
  int v35;
  uint64_t ***v36;
  uint64_t **v37;
  char *v38;
  uint64_t **v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  llvm::Value *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t result;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::ValueSymbolTable *v55;
  unsigned int v56;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[4];
  __int16 v61;

  v7 = a1[6];
  if (v7)
    v8 = (uint64_t)(v7 - 3);
  else
    v8 = 0;
  v56 = (a1 >> 4) ^ (a1 >> 9);
  do
  {
    v9 = *(_DWORD *)(v8 + 20);
    v10 = v9 & 0x7FFFFFF;
    if ((v9 & 0x7FFFFFF) != 0)
    {
      v11 = 0;
      while (1)
      {
        v12 = v8 - 32 * v10;
        if ((v9 & 0x40000000) != 0)
          v12 = *(_QWORD *)(v8 - 8);
        if (*(_QWORD *)(v12 + 32 * *(unsigned int *)(v8 + 60) + 8 * v11) == a2)
          break;
        if (v10 == ++v11)
          goto LABEL_11;
      }
      if ((v9 & 0x40000000) == 0)
      {
LABEL_12:
        v13 = v8 - 32 * v10;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_11:
      LODWORD(v11) = -1;
      if ((v9 & 0x40000000) == 0)
        goto LABEL_12;
    }
    v13 = *(_QWORD *)(v8 - 8);
LABEL_15:
    v14 = *(_QWORD *)(v13 + 32 * v11);
    v15 = *(uint64_t ***)v14;
    if ((*(_BYTE *)(v14 + 23) & 0x10) != 0)
    {
      v16 = **v15;
      v17 = *(_QWORD *)(v16 + 152);
      v18 = *(unsigned int *)(v16 + 168);
      if ((_DWORD)v18)
      {
        LODWORD(v19) = (v18 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v20 = (uint64_t *)(v17 + 16 * v19);
        v21 = *v20;
        if (*v20 == v14)
        {
LABEL_23:
          v24 = (_QWORD *)v20[1];
          v27 = *v24;
          v26 = (char *)(v24 + 2);
          v25 = v27;
          goto LABEL_24;
        }
        v22 = 1;
        while (v21 != -4096)
        {
          v23 = v19 + v22++;
          v19 = v23 & (v18 - 1);
          v21 = *(_QWORD *)(v17 + 16 * v19);
          if (v21 == v14)
          {
            v20 = (uint64_t *)(v17 + 16 * v19);
            goto LABEL_23;
          }
        }
      }
      v20 = (uint64_t *)(v17 + 16 * v18);
      goto LABEL_23;
    }
    v25 = 0;
    v26 = &byte_1C871356D;
LABEL_24:
    v58[0] = v26;
    v58[1] = v25;
    v58[2] = ".";
    v59 = 773;
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v28 = ***a1;
      v29 = *(_QWORD *)(v28 + 152);
      v30 = *(unsigned int *)(v28 + 168);
      if ((_DWORD)v30)
      {
        LODWORD(v31) = (v30 - 1) & v56;
        v32 = (uint64_t ****)(v29 + 16 * v31);
        v33 = *v32;
        if (*v32 == a1)
        {
LABEL_32:
          v36 = v32[1];
          v39 = *v36;
          v38 = (char *)(v36 + 2);
          v37 = v39;
          goto LABEL_33;
        }
        v34 = 1;
        while (v33 != (uint64_t ***)-4096)
        {
          v35 = v31 + v34++;
          v31 = v35 & (v30 - 1);
          v33 = *(uint64_t ****)(v29 + 16 * v31);
          if (v33 == a1)
          {
            v32 = (uint64_t ****)(v29 + 16 * v31);
            goto LABEL_32;
          }
        }
      }
      v32 = (uint64_t ****)(v29 + 16 * v30);
      goto LABEL_32;
    }
    v37 = 0;
    v38 = &byte_1C871356D;
LABEL_33:
    v60[0] = v58;
    v60[2] = v38;
    v60[3] = v37;
    v61 = 1282;
    v40 = *(uint64_t **)(a2 + 48);
    v41 = operator new(0x48uLL);
    v42 = v41;
    v41[1] = v15;
    v43 = (llvm::Value *)(v41 + 1);
    *v41 = 0;
    v41[2] = 0;
    v41[3] = 0x4000000000000053;
    *((_OWORD *)v41 + 2) = 0u;
    v44 = (char *)(v41 + 4);
    *((_OWORD *)v41 + 3) = 0u;
    *((_DWORD *)v41 + 16) = 0;
    if (v40)
    {
      v52 = v40[2];
      v41[6] = v52;
      *(_WORD *)(v52 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v41 + 31) & 0x10) != 0)
      {
        v54 = *(_QWORD *)(v52 + 56);
        if (v54)
        {
          v55 = *(llvm::ValueSymbolTable **)(v54 + 104);
          if (v55)
            llvm::ValueSymbolTable::reinsertValue(v55, v43);
        }
      }
      v53 = *v40;
      v42[4] = *v40;
      v42[5] = v40;
      *(_QWORD *)(v53 + 8) = v44;
      *v40 = (uint64_t)v44;
    }
    *((_DWORD *)v42 + 17) = 1;
    llvm::Value::setName((uint64_t ***)v43, (uint64_t)v60);
    v45 = *((unsigned int *)v42 + 17);
    v46 = operator new(40 * v45);
    *v42 = v46;
    if ((_DWORD)v45)
    {
      v47 = &v46[4 * v45];
      do
      {
        *v46 = 0;
        v46[1] = 0;
        v46[2] = 0;
        v46[3] = v43;
        v46 += 4;
      }
      while (v46 != v47);
    }
    sub_1C477667C(v43, v14, a3);
    result = sub_1C6125834(v8, v11, (uint64_t)v43);
    v49 = *(_QWORD *)(v8 + 32);
    if (v49)
      v50 = v49 == *(_QWORD *)(v8 + 40) + 40;
    else
      v50 = 1;
    if (v50)
      v51 = 0;
    else
      v51 = v49 - 24;
    if (*(_BYTE *)(v51 + 16) == 83)
      v8 = v51;
    else
      v8 = 0;
  }
  while (v8 != a4);
  return result;
}

uint64_t sub_1C604F1F4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v5;
  llvm::BasicBlock *SinglePredecessor;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *(unsigned __int8 *)(a3 + 16);
  if (a3 && v5 == 83)
  {
    if ((*(_DWORD *)(a3 + 20) & 0x7FFFFFE) != 0)
      return 0;
    SinglePredecessor = *(llvm::BasicBlock **)(a3 + 40);
  }
  else
  {
    SinglePredecessor = *(llvm::BasicBlock **)(a3 + 40);
    if (v5 == 84)
    {
      v8 = *(_QWORD *)(a3 - 32);
      if (v8)
      {
        if (!*(_BYTE *)(v8 + 16)
          && *(_QWORD *)(v8 + 24) == *(_QWORD *)(a3 + 72)
          && (*(_BYTE *)(v8 + 33) & 0x20) != 0
          && *(_DWORD *)(v8 + 36) == 50
          || !*(_BYTE *)(v8 + 16)
          && *(_QWORD *)(v8 + 24) == *(_QWORD *)(a3 + 72)
          && (*(_BYTE *)(v8 + 33) & 0x20) != 0
          && *(_DWORD *)(v8 + 36) == 49)
        {
          SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(SinglePredecessor);
        }
      }
    }
  }
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    do
    {
      v12 = v11 >> 1;
      v13 = &v10[v11 >> 1];
      v15 = *v13;
      v14 = v13 + 1;
      v11 += ~(v11 >> 1);
      if (v15 < a2)
        v10 = v14;
      else
        v11 = v12;
    }
    while (v11);
    v16 = *(_QWORD **)a1;
    do
    {
      v17 = v9 >> 1;
      v18 = &v16[v9 >> 1];
      v20 = *v18;
      v19 = v18 + 1;
      v9 += ~(v9 >> 1);
      if (v20 < (unint64_t)SinglePredecessor)
        v16 = v19;
      else
        v9 = v17;
    }
    while (v9);
  }
  else
  {
    v10 = *(_QWORD **)a1;
    v16 = *(_QWORD **)a1;
  }
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 152 * (((uint64_t)v16 - *(_QWORD *)a1) >> 3) + 72)
                    + 8 * ((((unint64_t)v10 - *(_QWORD *)a1) >> 9) & 0x3FFFFFF)) >> (((unint64_t)v10
                                                                                           - *(_QWORD *)a1) >> 3)) & 1;
}

BOOL sub_1C604F354(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 48) < 3;
}

void sub_1C604F3A4(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  _QWORD v32[2];
  int v33;
  _QWORD v34[2];
  int v35;
  unint64_t v36;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    v36 = 0;
    v16 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 40, &v36);
    v17 = *a2;
    v18 = &v16[40 * *(unsigned int *)(a1 + 8)];
    v19 = *a3;
    *a3 = 0;
    v20 = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = 0;
    v21 = *a4;
    *(_QWORD *)v18 = v17;
    v22 = a3[1];
    a3[1] = 0;
    *((_QWORD *)v18 + 1) = v19;
    v34[0] = 0;
    *((_QWORD *)v18 + 2) = v22;
    v34[1] = 0;
    *((_DWORD *)v18 + 6) = v20;
    v35 = 0;
    v18[32] = v21;
    sub_1C63CF3F4((uint64_t)v34);
    MEMORY[0x1CAA32FB4](0, 8);
    v23 = *(char **)a1;
    v24 = *(_DWORD *)(a1 + 8);
    if (v24)
    {
      v25 = &v23[40 * v24];
      v26 = v16;
      do
      {
        v27 = *(_QWORD *)v23;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        *(_QWORD *)v26 = v27;
        *((_DWORD *)v26 + 6) = 0;
        *((_QWORD *)v26 + 1) = *((_QWORD *)v23 + 1);
        *((_QWORD *)v23 + 1) = 0;
        *((_DWORD *)v26 + 4) = *((_DWORD *)v23 + 4);
        *((_DWORD *)v23 + 4) = 0;
        LODWORD(v27) = *((_DWORD *)v26 + 5);
        *((_DWORD *)v26 + 5) = *((_DWORD *)v23 + 5);
        *((_DWORD *)v23 + 5) = v27;
        LODWORD(v27) = *((_DWORD *)v26 + 6);
        *((_DWORD *)v26 + 6) = *((_DWORD *)v23 + 6);
        *((_DWORD *)v23 + 6) = v27;
        v26[32] = v23[32];
        v23 += 40;
        v26 += 40;
      }
      while (v23 != v25);
      v23 = *(char **)a1;
      v28 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v28)
      {
        v29 = v23 - 32;
        v30 = 40 * v28;
        do
        {
          sub_1C63CF3F4((uint64_t)&v29[v30]);
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v29[v30], 8);
          v30 -= 40;
        }
        while (v30);
        v23 = *(char **)a1;
      }
    }
    v31 = v36;
    if (v23 != (char *)(a1 + 16))
      free(v23);
    *(_QWORD *)a1 = v16;
    v15 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 12) = v31;
  }
  else
  {
    v9 = *a2;
    v10 = *(_QWORD *)a1 + 40 * v8;
    v11 = *a3;
    *a3 = 0;
    v12 = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = 0;
    v13 = *a4;
    *(_QWORD *)v10 = v9;
    v14 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v10 + 8) = v11;
    v32[0] = 0;
    *(_QWORD *)(v10 + 16) = v14;
    v32[1] = 0;
    *(_DWORD *)(v10 + 24) = v12;
    v33 = 0;
    *(_BYTE *)(v10 + 32) = v13;
    sub_1C63CF3F4((uint64_t)v32);
    MEMORY[0x1CAA32FB4](0, 8);
    v15 = *(_DWORD *)(a1 + 8) + 1;
  }
  *(_DWORD *)(a1 + 8) = v15;
}

BOOL sub_1C604F5B8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  char *v14;
  uint64_t v15;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 84)
  {
    v5 = 0;
  }
  else if (v4 == 39)
  {
    v5 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v5 = 2;
  }
  v6 = 0;
  v7 = *(_DWORD *)(a2 + 20);
  v8 = -(uint64_t)(v7 & 0x7FFFFFF);
  if (v7 < 0)
  {
    v14 = (char *)(a2 - 32 * (v7 & 0x7FFFFFF));
    v15 = *((_QWORD *)v14 - 1);
    if ((v15 & 0xFFFFFFFF0) != 0)
      v6 = (*((_DWORD *)v14 - 3) - *(_DWORD *)&v14[-v15]);
    else
      v6 = 0;
  }
  v9 = -32 * v5 - 32 * v6 - 32 * v8 - 32;
  if ((v9 & 0x1FFFFFFFE0) != 0)
  {
    v10 = 0;
    v11 = (v9 >> 5);
    v12 = a2;
    do
    {
      if (**(_QWORD **)(a1 + 328) == *(_QWORD *)(v12 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
        && (sub_1C4D91D40(a2, v10, 22) & 1) == 0)
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 16) & 3 | a2 | 4;
      }
      ++v10;
      v12 += 32;
    }
    while (v11 != v10);
  }
  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 360), *(const llvm::Value **)(a1 + 368), (const llvm::Instruction *)a2);
  if (!result)
    *(_BYTE *)(a1 + 520) = 1;
  return result;
}

uint64_t sub_1C604F6EC(uint64_t a1, const llvm::Use **a2)
{
  uint64_t result;
  const llvm::Use *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  llvm::Instruction *v15;

  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 360), *(const llvm::Value **)(a1 + 368), (const llvm::Instruction *)a2);
  if ((result & 1) != 0)
    return result;
  v5 = a2[1];
  if (!v5)
    return result;
  while (1)
  {
    result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 360), *(const llvm::Value **)(a1 + 368), v5);
    if ((_DWORD)result)
      break;
    v5 = (const llvm::Use *)*((_QWORD *)v5 + 1);
    if (!v5)
      return result;
  }
  if (!*(_BYTE *)(a1 + 336))
    goto LABEL_7;
  v15 = 0;
  result = sub_1C614ECAC(*(_QWORD *)(a1 + 384), *(_DWORD *)(a1 + 400), (uint64_t)a2, &v15);
  if ((_DWORD)result)
    v7 = v15 == (llvm::Instruction *)(*(_QWORD *)(a1 + 384) + 32 * *(unsigned int *)(a1 + 400));
  else
    v7 = 1;
  if (!v7)
  {
    if (!*((_BYTE *)v15 + 24))
      return result;
    v8 = *((unsigned int *)v15 + 4);
    if (v8 > 0x40)
    {
      result = memcmp(*((const void **)v15 + 1), *(const void **)(a1 + 344), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
      if (!(_DWORD)result)
        return result;
    }
    else if (*((_QWORD *)v15 + 1) == *(_QWORD *)(a1 + 344))
    {
      return result;
    }
LABEL_7:
    v15 = (llvm::Instruction *)a2;
    result = (uint64_t)sub_1C63CF1D0(a1 + 384, (uint64_t *)&v15);
    if (*(_BYTE *)(result + 24))
    {
      v6 = result;
      if (*(_DWORD *)(result + 16) >= 0x41u)
      {
        result = *(_QWORD *)(result + 8);
        if (result)
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
      *(_BYTE *)(v6 + 24) = 0;
    }
    return result;
  }
  v9 = (const void **)(a1 + 344);
  v15 = (llvm::Instruction *)a2;
  result = (uint64_t)sub_1C63CF1D0(a1 + 384, (uint64_t *)&v15);
  v10 = result;
  v11 = (void **)(result + 8);
  if (*(_BYTE *)(result + 24))
  {
    if (*(_DWORD *)(result + 16) > 0x40u || *(_DWORD *)(a1 + 352) > 0x40u)
    {
      if (v11 != (void **)v9)
      {
        result = llvm::APInt::reallocate(result + 8, *(_DWORD *)(a1 + 352));
        v13 = *(unsigned int *)(v10 + 16);
        if (v13 <= 0x40)
          *v11 = (void *)*v9;
        else
          return (uint64_t)memcpy(*v11, *v9, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 344);
      *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 352);
    }
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)(result + 16) = v12;
    if (v12 > 0x40)
    {
      v14 = (void *)operator new[]();
      *(_QWORD *)(v10 + 8) = v14;
      result = (uint64_t)memcpy(v14, *v9, (((unint64_t)*(unsigned int *)(v10 + 16) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *v11 = (void *)*v9;
    }
    *(_BYTE *)(v10 + 24) = 1;
  }
  return result;
}

_QWORD *sub_1C604F920(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63CF2EC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

_BYTE *sub_1C604F9D8(_BYTE *result, llvm::Instruction *a2)
{
  _BYTE *v3;
  int v4;
  unsigned int v5;

  v3 = result;
  v4 = *(_DWORD *)(*((_QWORD *)a2 - 4) + 36);
  if (v4 == 168)
  {
    if (!result[336])
      return result;
    result += 344;
    v5 = *((_DWORD *)v3 + 88);
    if (v5 > 0x40)
    {
      result = (_BYTE *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
      if ((_DWORD)result != v5)
        return result;
    }
    else if (*(_QWORD *)result)
    {
      return result;
    }
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)(v3 + 472), (uint64_t)a2);
  }
  else if ((v4 - 167) >= 2)
  {
    return (_BYTE *)sub_1C604F5B8((uint64_t)result, (uint64_t)a2);
  }
  return result;
}

uint64_t sub_1C604FA7C(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  sub_1C4774094(a2, a1);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (sub_1C604F354(v6))
    return 1;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 == a1 + 40)
    return 0;
  if (v8)
    v9 = v8 - 24;
  else
    v9 = 0;
  v10 = *(unsigned __int8 *)(v9 + 16);
  v11 = v10 - 29;
  if (v10 != 30)
  {
    v12 = 2;
    result = 0;
    switch(v11)
    {
      case 0:
      case 5:
      case 6:
        return result;
      case 1:
        __break(1u);
        goto LABEL_28;
      case 2:
        v12 = (*(_DWORD *)(v9 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
      case 9:
LABEL_28:
        v12 = (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) - 1;
        break;
      case 4:
        goto LABEL_15;
      case 7:
        v12 = *(_WORD *)(v9 + 18) & 1;
        break;
      case 8:
        v12 = 1;
        goto LABEL_15;
      case 10:
        v12 = *(_DWORD *)(v9 + 80) + 1;
        break;
      default:
        return 0;
    }
    if (v12)
      goto LABEL_15;
    return 0;
  }
  if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 3)
    v12 = 2;
  else
    v12 = 1;
LABEL_15:
  v13 = 0;
  v14 = 0;
  v15 = v12 - 1;
  v16 = v9 - 64;
  do
  {
    v17 = *(unsigned __int8 *)(v9 + 16);
    if (v17 != 30)
      __asm { BR              X9 }
    result = sub_1C604FA7C(*(_QWORD *)(v9 - 32 - 32 * v14), a2);
    if ((result & 1) != 0)
      break;
    v13 += 2;
    v16 += 32;
  }
  while (v15 != v14++);
  return result;
}

BOOL sub_1C604FCB0(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 23;
}

BOOL sub_1C604FCFC(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 24;
}

_QWORD *sub_1C604FD48(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (uint64_t)result;
  v4 = (uint64_t)(result + 2);
  *result = result + 2;
  result[1] = 0x800000000;
  v5 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(uint64_t **)(a2 + 136);
    v8 = 40 * v5;
    do
    {
      v9 = *v7;
      if (v6 >= *(_DWORD *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v4, v6 + 1, 8);
        v6 = *(_DWORD *)(v3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v6) = v9;
      v6 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v6;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  else
  {
    v6 = 0;
  }
  v10 = *(unsigned int *)(a2 + 480);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a2 + 472);
    v12 = 40 * v10;
    do
    {
      v13 = *v11;
      if (v6 >= *(_DWORD *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v4, v6 + 1, 8);
        v6 = *(_DWORD *)(v3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v6) = v13;
      v6 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v6;
      v11 += 5;
      v12 -= 40;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1C604FE64(uint64_t result, const llvm::Instruction **a2, llvm::DominatorTree **a3, uint64_t a4, char a5)
{
  const llvm::Instruction **v9;
  const llvm::Instruction **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const llvm::Instruction **v14;
  const llvm::Instruction *v15;
  uint64_t v16;
  const llvm::Instruction *v17;
  const llvm::Instruction **v19;
  const llvm::Instruction **v20;
  const llvm::Value *v21;
  const llvm::Value *v22;
  const llvm::Instruction **v23;
  const llvm::Instruction *v24;
  const llvm::Value *v25;
  const llvm::Value *v26;
  const llvm::Instruction **v27;
  BOOL v28;
  const llvm::Value *v29;
  const llvm::Instruction *v30;
  const llvm::Instruction **v31;
  const llvm::Instruction **v32;
  const llvm::Instruction *v33;
  const llvm::Instruction *v34;
  const llvm::Instruction *v35;
  const llvm::Instruction *v36;
  const llvm::Instruction **v37;
  const llvm::Instruction *v38;
  const llvm::Instruction **v39;
  BOOL v41;
  uint64_t v42;
  const llvm::Instruction **v43;
  const llvm::Value *v44;
  const llvm::Instruction *v45;
  const llvm::Value *v46;
  uint64_t v47;
  const llvm::Instruction **v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  const llvm::Value **v52;
  const llvm::Instruction **v53;
  const llvm::Instruction *v54;
  const llvm::Instruction **v55;
  uint64_t v56;
  uint64_t v57;
  const llvm::Instruction **v58;
  const llvm::Instruction **v59;
  uint64_t v60;
  const llvm::Instruction **v61;
  const llvm::Value **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  const llvm::Value **v67;
  const llvm::Instruction *v68;
  const llvm::Value **v69;
  const llvm::Value *v71;
  const llvm::Instruction *v72;
  const llvm::Value *v73;
  const llvm::Instruction **v74;
  const llvm::Instruction **v75;
  const llvm::Instruction *v76;
  const llvm::Instruction **v77;
  const llvm::Value **v78;
  int64_t v79;
  const llvm::Instruction *v80;

  v9 = (const llvm::Instruction **)result;
LABEL_2:
  v78 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = llvm::DominatorTree::dominates(*a3, *(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v38 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C6050668(v9, v9 + 1, v78, a3);
      case 4:
        return sub_1C60508EC(v9, v9 + 1, v9 + 2, v78, a3);
      case 5:
        return sub_1C6050590(v9, v9 + 1, v9 + 2, v9 + 3, v78, a3);
      default:
        if (v11 <= 191)
        {
          v39 = v9 + 1;
          v41 = v9 == a2 || v39 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 0;
              v43 = v9;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                result = llvm::DominatorTree::dominates(*a3, v44, v45);
                if ((_DWORD)result)
                {
                  v46 = *v43;
                  v47 = v42;
                  while (1)
                  {
                    *(const llvm::Instruction **)((char *)v9 + v47 + 8) = *(const llvm::Instruction **)((char *)v9 + v47);
                    if (!v47)
                      break;
                    result = llvm::DominatorTree::dominates(*a3, v46, *(const llvm::Instruction **)((char *)v9 + v47 - 8));
                    v47 -= 8;
                    if ((result & 1) == 0)
                    {
                      v48 = (const llvm::Instruction **)((char *)v9 + v47 + 8);
                      goto LABEL_72;
                    }
                  }
                  v48 = v9;
LABEL_72:
                  *v48 = v46;
                }
                v39 = v43 + 1;
                v42 += 8;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v72 = *v9;
              v71 = v9[1];
              v9 = v39;
              result = llvm::DominatorTree::dominates(*a3, v71, v72);
              if ((_DWORD)result)
              {
                v73 = *v9;
                v74 = v9;
                do
                {
                  v75 = v74;
                  v76 = *--v74;
                  *v75 = v76;
                  result = llvm::DominatorTree::dominates(*a3, v73, *(v75 - 2));
                }
                while ((result & 1) != 0);
                *v74 = v73;
              }
              v39 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v49 = (unint64_t)(v12 - 2) >> 1;
            v77 = a2;
            v79 = v49;
            do
            {
              v50 = v49;
              if (v79 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v9[v51];
                if (2 * v49 + 2 < v12 && llvm::DominatorTree::dominates(*a3, *v52, v52[1]))
                {
                  ++v52;
                  v51 = 2 * v50 + 2;
                }
                v53 = &v9[v50];
                result = llvm::DominatorTree::dominates(*a3, *v52, *v53);
                if ((result & 1) == 0)
                {
                  v54 = *v53;
                  do
                  {
                    v55 = v52;
                    *v53 = *v52;
                    if (v79 < v51)
                      break;
                    v56 = (2 * v51) | 1;
                    v52 = &v9[v56];
                    v57 = 2 * v51 + 2;
                    if (v57 < v12 && llvm::DominatorTree::dominates(*a3, *v52, v52[1]))
                    {
                      ++v52;
                      v56 = v57;
                    }
                    result = llvm::DominatorTree::dominates(*a3, *v52, v54);
                    v53 = v55;
                    v51 = v56;
                  }
                  while (!(_DWORD)result);
                  *v55 = v54;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v58 = v77;
            do
            {
              v59 = v58;
              v60 = 0;
              v80 = *v9;
              v61 = v9;
              do
              {
                v62 = &v61[v60 + 1];
                v63 = (2 * v60) | 1;
                v64 = 2 * v60 + 2;
                if (v64 < v12)
                {
                  result = llvm::DominatorTree::dominates(*a3, *v62, v61[v60 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v62;
                    v63 = v64;
                  }
                }
                *v61 = *v62;
                v61 = v62;
                v60 = v63;
              }
              while (v63 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              v58 = v59 - 1;
              if (v62 == v59 - 1)
              {
                *v62 = v80;
              }
              else
              {
                *v62 = *v58;
                *v58 = v80;
                v65 = (char *)v62 - (char *)v9 + 8;
                if (v65 >= 9)
                {
                  v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
                  v67 = &v9[v66];
                  result = llvm::DominatorTree::dominates(*a3, *v67, *v62);
                  if ((_DWORD)result)
                  {
                    v68 = *v62;
                    do
                    {
                      v69 = v67;
                      *v62 = *v67;
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = &v9[v66];
                      result = llvm::DominatorTree::dominates(*a3, *v67, v68);
                      v62 = v69;
                    }
                    while ((result & 1) != 0);
                    *v69 = v68;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C6050668(v14, v9, v78, a3);
        }
        else
        {
          sub_1C6050668(v9, v14, v78, a3);
          sub_1C6050668(v9 + 1, v14 - 1, a2 - 2, a3);
          sub_1C6050668(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          sub_1C6050668(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0 && !llvm::DominatorTree::dominates(*a3, *(v9 - 1), *v9))
        {
          v29 = *v9;
          result = llvm::DominatorTree::dominates(*a3, *v9, *v78);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v30 = v10[1];
              ++v10;
              result = llvm::DominatorTree::dominates(*a3, v29, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = v9 + 1;
            do
            {
              v10 = v31;
              if (v31 >= a2)
                break;
              ++v31;
              result = llvm::DominatorTree::dominates(*a3, v29, *v10);
            }
            while (!(_DWORD)result);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *--v32;
              result = llvm::DominatorTree::dominates(*a3, v29, v33);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v32)
          {
            v34 = *v10;
            *v10 = *v32;
            *v32 = v34;
            do
            {
              v35 = v10[1];
              ++v10;
            }
            while (!llvm::DominatorTree::dominates(*a3, v29, v35));
            do
            {
              v36 = *--v32;
              result = llvm::DominatorTree::dominates(*a3, v29, v36);
            }
            while ((result & 1) != 0);
          }
          v37 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v37;
          a5 = 0;
          *v37 = v29;
          continue;
        }
        v16 = 0;
        v17 = *v9;
        while (llvm::DominatorTree::dominates(*a3, v9[++v16], v17))
          ;
        v19 = &v9[v16];
        v20 = a2;
        if (v16 == 1)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *--v20;
          }
          while (!llvm::DominatorTree::dominates(*a3, v22, v17));
        }
        else
        {
          do
            v21 = *--v20;
          while (!llvm::DominatorTree::dominates(*a3, v21, v17));
        }
        v10 = &v9[v16];
        if (v19 < v20)
        {
          v23 = v20;
          do
          {
            v24 = *v10;
            *v10 = *v23;
            *v23 = v24;
            do
            {
              v25 = v10[1];
              ++v10;
            }
            while (llvm::DominatorTree::dominates(*a3, v25, v17));
            do
              v26 = *--v23;
            while (!llvm::DominatorTree::dominates(*a3, v26, v17));
          }
          while (v10 < v23);
        }
        v27 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v27;
        *v27 = v17;
        if (v19 < v20)
        {
LABEL_30:
          result = sub_1C604FE64(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v28 = sub_1C6050748(v9, v10 - 1, a3);
        result = sub_1C6050748(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v10 - 1;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C6050590(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, const llvm::Value **a5, llvm::DominatorTree **a6)
{
  _BOOL8 result;
  const llvm::Value *v13;
  const llvm::Value *v14;
  const llvm::Value *v15;
  const llvm::Instruction *v16;

  sub_1C60508EC(a1, a2, a3, a4, a6);
  result = llvm::DominatorTree::dominates(*a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = llvm::DominatorTree::dominates(*a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = llvm::DominatorTree::dominates(*a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = llvm::DominatorTree::dominates(*a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C6050668(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, llvm::DominatorTree **a4)
{
  BOOL v8;
  _BOOL8 result;
  const llvm::Instruction *v10;
  const llvm::Value *v11;
  const llvm::Instruction *v12;
  const llvm::Value *v13;

  v8 = llvm::DominatorTree::dominates(*a4, *a2, *a1);
  result = llvm::DominatorTree::dominates(*a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = llvm::DominatorTree::dominates(*a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = llvm::DominatorTree::dominates(*a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_1C6050748(const llvm::Instruction **a1, const llvm::Instruction **a2, llvm::DominatorTree **a3)
{
  uint64_t v6;
  _BOOL8 result;
  const llvm::Instruction *v8;
  const llvm::Instruction **v9;
  const llvm::Value **v10;
  uint64_t v11;
  int v12;
  const llvm::Value *v13;
  uint64_t v14;
  const llvm::Instruction **v15;
  const llvm::Instruction **v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (llvm::DominatorTree::dominates(*a3, *(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1C6050668(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C60508EC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C6050590(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1C6050668(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (llvm::DominatorTree::dominates(*a3, *v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (const llvm::Instruction **)((char *)a1 + v14);
        *(const llvm::Instruction **)((char *)a1 + v14 + 24) = *(const llvm::Instruction **)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!llvm::DominatorTree::dominates(*a3, v13, v15[1]))
        {
          v16 = (const llvm::Instruction **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

BOOL sub_1C60508EC(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, llvm::DominatorTree **a5)
{
  _BOOL8 result;
  const llvm::Value *v11;
  const llvm::Value *v12;
  const llvm::Instruction *v13;

  sub_1C6050668(a1, a2, a3, a5);
  result = llvm::DominatorTree::dominates(*a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = llvm::DominatorTree::dominates(*a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = llvm::DominatorTree::dominates(*a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1C605099C(uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  const char *v15;
  char v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v33;
  BOOL v34;
  char *v35;
  _QWORD v36[4];
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t v39;

  v10 = *(_QWORD *)a1;
  sub_1C4768AD0(*(_QWORD *)a1, a2);
  v12 = (unint64_t)(v11 + 7) >> 3;
  v14 = v13 == 1;
  llvm::DataLayout::getAlignment(v10, a2);
  v17 = ((1 << v16) + v12 - 1) & -(1 << v16);
  if (!v14)
  {
    if (v17)
      goto LABEL_3;
    return 0;
  }
  if (!v17)
    return 0;
LABEL_3:
  llvm::DataLayout::getAlignment(*(_QWORD *)a1, a2);
  if (!a5)
  {
    if ((a3 & 0xFF00) != 0)
      v20 = a3;
    else
      v20 = v18;
    if (*(_BYTE *)(a1 + 27))
    {
      v19 = *(unsigned __int8 *)(a1 + 26);
      goto LABEL_15;
    }
    v23 = 0;
    if (!a4)
      goto LABEL_26;
LABEL_28:
    v24 = ((1 << v20) + *(_QWORD *)(a1 + 16) - 1) & -(1 << v20);
    *(_QWORD *)(a1 + 16) = v24 + v17;
    goto LABEL_29;
  }
  if (!*(_BYTE *)(a1 + 27))
  {
    v23 = 0;
    if ((a3 & 0xFF00) != 0)
      v20 = a3;
    else
      v20 = v18;
    if (!a4)
      goto LABEL_26;
    goto LABEL_28;
  }
  v19 = *(unsigned __int8 *)(a1 + 26);
  if (v19 < v18)
    v18 = *(_BYTE *)(a1 + 26);
  if ((a3 & 0xFF00) != 0)
    v20 = a3;
  else
    v20 = v18;
LABEL_15:
  v21 = (((1 << v20) + (1 << v19) - 1) & -(1 << v20)) - (1 << v19);
  v22 = v19 >= v20;
  if (v19 >= v20)
  {
    v23 = 0;
  }
  else
  {
    v20 = v19;
    v23 = v21;
  }
  if (!v22)
    v17 += v21;
  if (a4)
    goto LABEL_28;
LABEL_26:
  v24 = -1;
LABEL_29:
  v25 = *(_QWORD *)(a1 + 32);
  v36[0] = v17;
  v36[1] = v24;
  v36[2] = a2;
  v36[3] = 0;
  v37 = v20;
  v38 = v18;
  v39 = v23;
  v26 = *(unsigned int *)(a1 + 40);
  v27 = (char *)v36;
  if (v26 >= *(_DWORD *)(a1 + 44))
  {
    v33 = v26 + 1;
    v34 = v25 + 48 * v26 > (unint64_t)v36;
    if (v25 <= (unint64_t)v36 && v34)
    {
      v35 = (char *)v36 - v25;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v33, 48);
      v25 = *(_QWORD *)(a1 + 32);
      v27 = &v35[v25];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v33, 48);
      v25 = *(_QWORD *)(a1 + 32);
      v27 = (char *)v36;
    }
  }
  v28 = (_OWORD *)(v25 + 48 * *(unsigned int *)(a1 + 40));
  v29 = *(_OWORD *)v27;
  v30 = *((_OWORD *)v27 + 2);
  v28[1] = *((_OWORD *)v27 + 1);
  v28[2] = v30;
  *v28 = v29;
  v31 = (*(_DWORD *)(a1 + 40) + 1);
  *(_DWORD *)(a1 + 40) = v31;
  return v31 - 1;
}

uint64_t sub_1C6050BD8(uint64_t a1, llvm::AllocaInst *this, int a3)
{
  llvm::ArrayType *v6;
  uint64_t v7;
  BOOL v8;
  llvm::Type **v9;
  llvm::ArrayType *v10;

  v6 = (llvm::ArrayType *)*((_QWORD *)this + 8);
  if (llvm::AllocaInst::isArrayAllocation(this))
  {
    v7 = *((_QWORD *)this - 4);
    if (v7)
      v8 = *(_BYTE *)(v7 + 16) == 16;
    else
      v8 = 0;
    if (!v8)
      llvm::report_fatal_error((llvm *)"Coroutines cannot handle non static allocas yet", (const char *)1);
    v9 = (llvm::Type **)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u)
      v9 = (llvm::Type **)*v9;
    llvm::ArrayType::get(v6, *v9);
    v6 = v10;
  }
  return sub_1C605099C(a1, (uint64_t)v6, *((_WORD *)this + 9) & 0x3F | 0x100u, a3, 0);
}

uint64_t sub_1C6050C78(uint64_t result, llvm::AllocaInst **a2, const llvm::DataLayout ****a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  llvm::AllocaInst *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  llvm::AllocaInst **v30;
  llvm::AllocaInst *v31;
  unint64_t v32;
  llvm::AllocaInst *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  llvm::AllocaInst *v41;
  unint64_t v42;
  llvm::AllocaInst *v43;
  unint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  llvm::AllocaInst *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  llvm::AllocaInst *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  llvm::AllocaInst *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  llvm::AllocaInst *v66;
  unint64_t v67;
  llvm::AllocaInst *v68;
  int v69;
  int v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  llvm::AllocaInst **v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  llvm::AllocaInst **v80;
  uint64_t v81;
  llvm::AllocaInst *v82;
  uint64_t v83;
  llvm::AllocaInst *v84;
  llvm::AllocaInst *v85;
  llvm::AllocaInst *v86;
  uint64_t v87;
  uint64_t v88;
  llvm::AllocaInst *v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  llvm::AllocaInst *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  llvm::AllocaInst **v116;
  _OWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  llvm::AllocaInst *v123;
  uint64_t v124;
  __int128 *v125;
  _BYTE *v126;
  __int128 *v127;
  unint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  char v131;
  uint64_t v132;
  llvm::AllocaInst *v133;
  llvm::AllocaInst *v134;
  llvm::AllocaInst *v135;
  int v136;
  int v137;
  int v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v149;
  uint64_t v150;
  llvm::AllocaInst **v151;
  uint64_t v152;
  int64_t v153;
  uint64_t v154;
  int v155;
  _QWORD v156[3];
  llvm::AllocaInst *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  char v161;
  __int128 v162;
  llvm::AllocaInst *v163;
  int v164;
  char v165;

  v8 = result;
LABEL_2:
  v149 = (uint64_t)a2;
  v151 = a2 - 5;
  v140 = (uint64_t)(a2 - 15);
  v141 = (uint64_t)(a2 - 10);
  v9 = v8;
  while (2)
  {
    v10 = v9;
    v11 = (uint64_t)a2 - v9;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        llvm::AllocaInst::getAllocationSizeInBits(*(a2 - 5), ***a3, (uint64_t)&v162);
        v113 = v162;
        result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v10, ***a3, (uint64_t)&v162);
        if (v113 > (unint64_t)v162)
        {
          *(_QWORD *)&v162 = *(_QWORD *)v10;
          v134 = (llvm::AllocaInst *)v162;
          v135 = *(llvm::AllocaInst **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          v136 = *(_DWORD *)(v10 + 16);
          v137 = *(_DWORD *)(v10 + 20);
          *(_QWORD *)(v10 + 16) = 0;
          v138 = *(_DWORD *)(v10 + 24);
          *(_DWORD *)(v10 + 24) = 0;
          v165 = *(_BYTE *)(v10 + 32);
          v139 = v165;
          *(_QWORD *)v10 = *(a2 - 5);
          sub_1C63CF51C(v10 + 8, (uint64_t)(a2 - 4));
          *(_BYTE *)(v10 + 32) = *((_BYTE *)a2 - 8);
          *(a2 - 5) = v134;
          sub_1C63CF3F4((uint64_t)(a2 - 4));
          MEMORY[0x1CAA32FB4](*(a2 - 4), 8);
          *(a2 - 4) = v135;
          *((_QWORD *)&v162 + 1) = 0;
          *((_DWORD *)a2 - 6) = v136;
          LODWORD(v163) = 0;
          *((_DWORD *)a2 - 5) = v137;
          HIDWORD(v163) = 0;
          *((_DWORD *)a2 - 4) = v138;
          v164 = 0;
          *((_BYTE *)a2 - 8) = v139;
          sub_1C63CF3F4((uint64_t)&v162 + 8);
          return MEMORY[0x1CAA32FB4](0, 8);
        }
        return result;
      case 3uLL:
        return sub_1C605251C(v9, v9 + 40, (uint64_t)v151, a3);
      case 4uLL:
        return sub_1C6052D30(v9, v9 + 40, v9 + 80, (uint64_t)v151, a3);
      case 5uLL:
        return sub_1C6052118(v9, v9 + 40, v9 + 80, v9 + 120, (uint64_t)v151, a3);
      default:
        if (v11 <= 959)
        {
          if ((a5 & 1) != 0)
          {
            if ((llvm::AllocaInst **)v9 != a2)
            {
              v114 = (_OWORD *)(v9 + 40);
              if ((llvm::AllocaInst **)(v9 + 40) != a2)
              {
                v115 = 0;
                v116 = (llvm::AllocaInst **)v9;
                do
                {
                  v117 = v114;
                  llvm::AllocaInst::getAllocationSizeInBits(v116[5], ***a3, (uint64_t)&v162);
                  v118 = v162;
                  result = llvm::AllocaInst::getAllocationSizeInBits(*v116, ***a3, (uint64_t)&v162);
                  if (v118 > (unint64_t)v162)
                  {
                    v162 = *v117;
                    v163 = v116[7];
                    v116[6] = 0;
                    v116[7] = 0;
                    v164 = *((_DWORD *)v116 + 16);
                    *((_DWORD *)v116 + 16) = 0;
                    v119 = v115;
                    v165 = *((_BYTE *)v116 + 72);
                    while (1)
                    {
                      v120 = v9 + v119;
                      *(_QWORD *)(v9 + v119 + 40) = *(_QWORD *)(v9 + v119);
                      v121 = v9 + v119 + 8;
                      sub_1C63CF51C(v9 + v119 + 48, v121);
                      *(_BYTE *)(v9 + v119 + 72) = *(_BYTE *)(v9 + v119 + 32);
                      v122 = v162;
                      if (!v119)
                        break;
                      llvm::AllocaInst::getAllocationSizeInBits((llvm::AllocaInst *)v162, ***a3, (uint64_t)&v157);
                      v123 = v157;
                      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)(v120 - 40), ***a3, (uint64_t)&v157);
                      v119 -= 40;
                      v98 = v123 > v157;
                      a2 = (llvm::AllocaInst **)v149;
                      if (!v98)
                      {
                        v124 = v9 + v119 + 40;
                        goto LABEL_107;
                      }
                    }
                    v124 = v9;
LABEL_107:
                    *(_QWORD *)v124 = v122;
                    sub_1C63CF3F4(v121);
                    MEMORY[0x1CAA32FB4](*(_QWORD *)(v120 + 8), 8);
                    *(_DWORD *)(v124 + 24) = 0;
                    *(_QWORD *)(v120 + 8) = 0;
                    *(_QWORD *)(v124 + 16) = 0;
                    *(_QWORD *)(v120 + 8) = *((_QWORD *)&v162 + 1);
                    *((_QWORD *)&v162 + 1) = 0;
                    *(_QWORD *)(v124 + 16) = v163;
                    v163 = 0;
                    *(_DWORD *)(v124 + 24) = v164;
                    v164 = 0;
                    *(_BYTE *)(v124 + 32) = v165;
                    sub_1C63CF3F4((uint64_t)&v162 + 8);
                    result = MEMORY[0x1CAA32FB4](0, 8);
                  }
                  v114 = (_OWORD *)((char *)v117 + 40);
                  v115 += 40;
                  v116 = (llvm::AllocaInst **)v117;
                }
                while ((llvm::AllocaInst **)((char *)v117 + 40) != a2);
              }
            }
          }
          else if ((llvm::AllocaInst **)v9 != a2)
          {
            v125 = (__int128 *)(v9 + 40);
            if ((llvm::AllocaInst **)(v9 + 40) != a2)
            {
              v126 = (_BYTE *)(v9 + 72);
              do
              {
                v127 = v125;
                llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)(v10 + 40), ***a3, (uint64_t)&v162);
                v128 = v162;
                result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v10, ***a3, (uint64_t)&v162);
                if (v128 > (unint64_t)v162)
                {
                  v162 = *v127;
                  v155 = *(_QWORD *)(v10 + 56);
                  v163 = *(llvm::AllocaInst **)(v10 + 56);
                  *(_QWORD *)(v10 + 48) = 0;
                  *(_QWORD *)(v10 + 56) = 0;
                  v164 = *(_DWORD *)(v10 + 64);
                  *(_DWORD *)(v10 + 64) = 0;
                  v129 = v126;
                  v165 = *(_BYTE *)(v10 + 72);
                  do
                  {
                    v130 = v129;
                    *((_QWORD *)v129 - 4) = *((_QWORD *)v129 - 9);
                    sub_1C63CF51C((uint64_t)(v129 - 24), (uint64_t)(v129 - 64));
                    v131 = *(v129 - 40);
                    v129 -= 40;
                    *v130 = v131;
                    v132 = v162;
                    llvm::AllocaInst::getAllocationSizeInBits((llvm::AllocaInst *)v162, ***a3, (uint64_t)&v157);
                    v133 = v157;
                    llvm::AllocaInst::getAllocationSizeInBits(*((llvm::AllocaInst **)v130 - 14), ***a3, (uint64_t)&v157);
                  }
                  while (v133 > v157);
                  *((_QWORD *)v129 - 4) = v132;
                  sub_1C63CF3F4((uint64_t)(v129 - 24));
                  MEMORY[0x1CAA32FB4](*((_QWORD *)v129 - 3), 8);
                  *((_QWORD *)v129 - 3) = 0;
                  *((_QWORD *)v129 - 2) = 0;
                  *((_DWORD *)v129 - 2) = 0;
                  *((_QWORD *)v129 - 3) = *((_QWORD *)&v162 + 1);
                  *((_QWORD *)&v162 + 1) = 0;
                  *((_DWORD *)v129 - 4) = v155;
                  *((_DWORD *)v129 - 3) = HIDWORD(v163);
                  v163 = 0;
                  *((_DWORD *)v129 - 2) = v164;
                  v164 = 0;
                  *v129 = v165;
                  sub_1C63CF3F4((uint64_t)&v162 + 8);
                  result = MEMORY[0x1CAA32FB4](0, 8);
                }
                v125 = (__int128 *)((char *)v127 + 40);
                v126 += 40;
                v10 = (uint64_t)v127;
              }
              while ((llvm::AllocaInst **)((char *)v127 + 40) != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if ((llvm::AllocaInst **)v9 != a2)
          {
            v71 = (v12 - 2) >> 1;
            v72 = v71;
            do
            {
              v73 = v72;
              if (v71 >= v72)
              {
                v74 = (2 * v72) | 1;
                v75 = (llvm::AllocaInst **)(v10 + 40 * v74);
                if (2 * v72 + 2 < (uint64_t)v12)
                {
                  llvm::AllocaInst::getAllocationSizeInBits(*v75, ***a3, (uint64_t)&v162);
                  v76 = v162;
                  llvm::AllocaInst::getAllocationSizeInBits(v75[5], ***a3, (uint64_t)&v162);
                  if (v76 > (unint64_t)v162)
                  {
                    v75 += 5;
                    v74 = 2 * v73 + 2;
                  }
                }
                v77 = v10 + 40 * v73;
                llvm::AllocaInst::getAllocationSizeInBits(*v75, ***a3, (uint64_t)&v162);
                v78 = v162;
                llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v77, ***a3, (uint64_t)&v162);
                if (v78 <= (unint64_t)v162)
                {
                  v153 = v71;
                  v154 = v12;
                  *(_QWORD *)&v162 = *(_QWORD *)v77;
                  v79 = v10 + 40 * v73;
                  *((_QWORD *)&v162 + 1) = *(_QWORD *)(v79 + 8);
                  *(_QWORD *)(v79 + 8) = 0;
                  v146 = *(_DWORD *)(v79 + 16);
                  LODWORD(v163) = v146;
                  *(_DWORD *)(v79 + 16) = 0;
                  HIDWORD(v163) = *(_DWORD *)(v79 + 20);
                  *(_DWORD *)(v79 + 20) = 0;
                  v164 = *(_DWORD *)(v79 + 24);
                  *(_DWORD *)(v79 + 24) = 0;
                  v165 = *(_BYTE *)(v79 + 32);
                  while (1)
                  {
                    v80 = v75;
                    v82 = *v75;
                    v81 = (uint64_t)(v75 + 1);
                    *(_QWORD *)v77 = v82;
                    sub_1C63CF51C(v77 + 8, v81);
                    *(_BYTE *)(v77 + 32) = *((_BYTE *)v80 + 32);
                    if (v71 < v74)
                      break;
                    v152 = v81;
                    v83 = (2 * v74) | 1;
                    v75 = (llvm::AllocaInst **)(v10 + 40 * v83);
                    if (2 * v74 + 2 < v154)
                    {
                      llvm::AllocaInst::getAllocationSizeInBits(*v75, ***a3, (uint64_t)&v157);
                      v84 = v157;
                      llvm::AllocaInst::getAllocationSizeInBits(v75[5], ***a3, (uint64_t)&v157);
                      if (v84 > v157)
                      {
                        v75 += 5;
                        v83 = 2 * v74 + 2;
                      }
                    }
                    llvm::AllocaInst::getAllocationSizeInBits(*v75, ***a3, (uint64_t)&v157);
                    v85 = v157;
                    v86 = (llvm::AllocaInst *)v162;
                    llvm::AllocaInst::getAllocationSizeInBits((llvm::AllocaInst *)v162, ***a3, (uint64_t)&v157);
                    v77 = (uint64_t)v80;
                    v74 = v83;
                    v71 = v153;
                    if (v85 > v157)
                    {
                      v81 = v152;
                      goto LABEL_68;
                    }
                  }
                  v86 = (llvm::AllocaInst *)v162;
LABEL_68:
                  *v80 = v86;
                  sub_1C63CF3F4(v81);
                  MEMORY[0x1CAA32FB4](v80[1], 8);
                  *(_QWORD *)v81 = 0;
                  *(_QWORD *)(v81 + 8) = 0;
                  *(_DWORD *)(v81 + 16) = 0;
                  v80[1] = (llvm::AllocaInst *)*((_QWORD *)&v162 + 1);
                  *((_DWORD *)v80 + 4) = v146;
                  *((_DWORD *)v80 + 5) = HIDWORD(v163);
                  *((_QWORD *)&v162 + 1) = 0;
                  v163 = 0;
                  *((_DWORD *)v80 + 6) = v164;
                  v164 = 0;
                  *((_BYTE *)v80 + 32) = v165;
                  sub_1C63CF3F4((uint64_t)&v162 + 8);
                  MEMORY[0x1CAA32FB4](0, 8);
                  v12 = v154;
                }
              }
              v72 = v73 - 1;
            }
            while (v73);
            v87 = v149;
            do
            {
              v150 = v87;
              v88 = 0;
              v89 = *(llvm::AllocaInst **)v10;
              v160 = 0;
              v158 = 0;
              v159 = 0;
              v90 = *(_QWORD *)(v10 + 8);
              v157 = v89;
              v158 = v90;
              *(_QWORD *)(v10 + 8) = 0;
              LODWORD(v90) = *(_DWORD *)(v10 + 20);
              LODWORD(v159) = *(_DWORD *)(v10 + 16);
              *(_DWORD *)(v10 + 16) = 0;
              LODWORD(v89) = HIDWORD(v159);
              HIDWORD(v159) = v90;
              *(_DWORD *)(v10 + 20) = (_DWORD)v89;
              LODWORD(v89) = v160;
              v160 = *(_DWORD *)(v10 + 24);
              *(_DWORD *)(v10 + 24) = (_DWORD)v89;
              v161 = *(_BYTE *)(v10 + 32);
              v91 = (v12 - 2) >> 1;
              v92 = v10;
              v93 = v12;
              do
              {
                v94 = v92 + 40 * v88 + 40;
                v95 = (2 * v88) | 1;
                v96 = 2 * v88 + 2;
                if (v96 < (uint64_t)v12)
                {
                  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v94, ***a3, (uint64_t)&v162);
                  v97 = v162;
                  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)(v94 + 40), ***a3, (uint64_t)&v162);
                  v98 = v97 > (unint64_t)v162;
                  v12 = v93;
                  if (v98)
                  {
                    v94 += 40;
                    v95 = v96;
                  }
                }
                *(_QWORD *)v92 = *(_QWORD *)v94;
                sub_1C63CF51C(v92 + 8, v94 + 8);
                *(_BYTE *)(v92 + 32) = *(_BYTE *)(v94 + 32);
                v92 = v94;
                v88 = v95;
              }
              while (v95 <= v91);
              v99 = v150 - 40;
              if (v94 == v150 - 40)
              {
                *(_QWORD *)v94 = v157;
                sub_1C63CF3F4(v94 + 8);
                MEMORY[0x1CAA32FB4](*(_QWORD *)(v94 + 8), 8);
                v100 = 0;
                *(_QWORD *)(v94 + 8) = 0;
                *(_QWORD *)(v94 + 16) = 0;
                *(_DWORD *)(v94 + 24) = 0;
                *(_QWORD *)(v94 + 8) = v158;
                *(_QWORD *)(v94 + 16) = v159;
                *(_DWORD *)(v94 + 24) = v160;
                *(_BYTE *)(v94 + 32) = v161;
                v158 = 0;
                v159 = 0;
                v160 = 0;
              }
              else
              {
                *(_QWORD *)v94 = *(_QWORD *)(v150 - 40);
                sub_1C63CF51C(v94 + 8, v150 - 32);
                *(_BYTE *)(v94 + 32) = *(_BYTE *)(v150 - 8);
                *(_QWORD *)(v150 - 40) = v157;
                sub_1C63CF3F4(v150 - 32);
                MEMORY[0x1CAA32FB4](*(_QWORD *)(v150 - 32), 8);
                v100 = 0;
                *(_QWORD *)(v150 - 32) = 0;
                *(_QWORD *)(v150 - 24) = 0;
                *(_DWORD *)(v150 - 16) = 0;
                *(_QWORD *)(v150 - 32) = v158;
                v158 = 0;
                *(_DWORD *)(v150 - 24) = v159;
                LODWORD(v159) = 0;
                v101 = *(_DWORD *)(v150 - 20);
                *(_DWORD *)(v150 - 20) = HIDWORD(v159);
                HIDWORD(v159) = v101;
                v102 = *(_DWORD *)(v150 - 16);
                *(_DWORD *)(v150 - 16) = v160;
                v160 = v102;
                *(_BYTE *)(v150 - 8) = v161;
                v103 = v94 - v10 + 40;
                if (v103 >= 41)
                {
                  v104 = (v103 / 0x28uLL - 2) >> 1;
                  v105 = v10 + 40 * v104;
                  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v105, ***a3, (uint64_t)&v162);
                  v106 = v162;
                  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v94, ***a3, (uint64_t)&v162);
                  if (v106 <= (unint64_t)v162)
                  {
                    v100 = 0;
                  }
                  else
                  {
                    v107 = *(llvm::AllocaInst **)v94;
                    v163 = 0;
                    v164 = 0;
                    v108 = *(_QWORD *)(v94 + 8);
                    v162 = (unint64_t)v107;
                    *((_QWORD *)&v162 + 1) = v108;
                    *(_QWORD *)(v94 + 8) = 0;
                    LODWORD(v163) = *(_DWORD *)(v94 + 16);
                    *(_DWORD *)(v94 + 16) = 0;
                    LODWORD(v107) = HIDWORD(v163);
                    HIDWORD(v163) = *(_DWORD *)(v94 + 20);
                    *(_DWORD *)(v94 + 20) = (_DWORD)v107;
                    LODWORD(v107) = v164;
                    v164 = *(_DWORD *)(v94 + 24);
                    *(_DWORD *)(v94 + 24) = (_DWORD)v107;
                    v165 = *(_BYTE *)(v94 + 32);
                    while (1)
                    {
                      v109 = v105;
                      *(_QWORD *)v94 = *(_QWORD *)v105;
                      v110 = v105 + 8;
                      sub_1C63CF51C(v94 + 8, v105 + 8);
                      *(_BYTE *)(v94 + 32) = *(_BYTE *)(v105 + 32);
                      if (!v104)
                        break;
                      v104 = (v104 - 1) >> 1;
                      v105 = v10 + 40 * v104;
                      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v105, ***a3, (uint64_t)v156);
                      v111 = v156[0];
                      v112 = v162;
                      llvm::AllocaInst::getAllocationSizeInBits((llvm::AllocaInst *)v162, ***a3, (uint64_t)v156);
                      v94 = v109;
                      v98 = v111 > v156[0];
                      v12 = v93;
                      if (!v98)
                        goto LABEL_84;
                    }
                    v112 = v162;
LABEL_84:
                    *(_QWORD *)v109 = v112;
                    sub_1C63CF3F4(v110);
                    MEMORY[0x1CAA32FB4](*(_QWORD *)(v109 + 8), 8);
                    *(_QWORD *)v110 = 0;
                    *(_QWORD *)(v110 + 8) = 0;
                    *(_DWORD *)(v110 + 16) = 0;
                    *(_QWORD *)(v109 + 8) = *((_QWORD *)&v162 + 1);
                    *(_QWORD *)(v109 + 16) = v163;
                    *((_QWORD *)&v162 + 1) = 0;
                    v163 = 0;
                    *(_DWORD *)(v109 + 24) = v164;
                    v164 = 0;
                    *(_BYTE *)(v109 + 32) = v165;
                    sub_1C63CF3F4((uint64_t)&v162 + 8);
                    MEMORY[0x1CAA32FB4](0, 8);
                    v100 = v158;
                    v99 = v150 - 40;
                  }
                }
              }
              sub_1C63CF3F4((uint64_t)&v158);
              result = MEMORY[0x1CAA32FB4](v100, 8);
              v87 = v99;
              v98 = (uint64_t)v12-- <= 2;
            }
            while (!v98);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = (_QWORD *)(v9 + 40 * (v12 >> 1));
        if ((unint64_t)v11 < 0x1401)
        {
          sub_1C605251C(v10 + 40 * (v12 >> 1), v10, (uint64_t)v151, a3);
        }
        else
        {
          sub_1C605251C(v10, v10 + 40 * (v12 >> 1), (uint64_t)v151, a3);
          v15 = 5 * v13;
          v16 = v10 + 40 * v13;
          sub_1C605251C(v10 + 40, v16 - 40, v141, a3);
          sub_1C605251C(v10 + 80, v10 + 40 + 8 * v15, v140, a3);
          sub_1C605251C(v16 - 40, v10 + 40 * (v12 >> 1), v10 + 40 + 8 * v15, a3);
          *(_QWORD *)&v162 = *(_QWORD *)v10;
          v17 = v162;
          v144 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          v18 = a4;
          v19 = *(_DWORD *)(v10 + 16);
          v142 = *(_DWORD *)(v10 + 20);
          *(_QWORD *)(v10 + 16) = 0;
          v20 = *(_DWORD *)(v10 + 24);
          *(_DWORD *)(v10 + 24) = 0;
          v165 = *(_BYTE *)(v10 + 32);
          v21 = v165;
          *(_QWORD *)v10 = *v14;
          sub_1C63CF51C(v10 + 8, v16 + 8);
          *(_BYTE *)(v10 + 32) = *(_BYTE *)(v16 + 32);
          *v14 = v17;
          sub_1C63CF3F4(v16 + 8);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v16 + 8), 8);
          *(_QWORD *)(v16 + 8) = v144;
          *((_QWORD *)&v162 + 1) = 0;
          *(_DWORD *)(v16 + 16) = v19;
          a4 = v18;
          LODWORD(v163) = 0;
          *(_DWORD *)(v16 + 20) = v142;
          HIDWORD(v163) = 0;
          *(_DWORD *)(v16 + 24) = v20;
          v164 = 0;
          *(_BYTE *)(v16 + 32) = v21;
          a2 = (llvm::AllocaInst **)v149;
          sub_1C63CF3F4((uint64_t)&v162 + 8);
          MEMORY[0x1CAA32FB4](0, 8);
        }
        v22 = a4 - 1;
        if ((a5 & 1) == 0)
        {
          llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)(v10 - 40), ***a3, (uint64_t)&v162);
          v23 = v162;
          llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v10, ***a3, (uint64_t)&v162);
          if (v23 <= (unint64_t)v162)
          {
            v48 = v22;
            v49 = *(llvm::AllocaInst **)v10;
            v160 = 0;
            v158 = 0;
            v159 = 0;
            v50 = *(_QWORD *)(v10 + 8);
            v157 = v49;
            v158 = v50;
            *(_QWORD *)(v10 + 8) = 0;
            v51 = *(_DWORD *)(v10 + 20);
            LODWORD(v159) = *(_DWORD *)(v10 + 16);
            *(_DWORD *)(v10 + 16) = 0;
            LODWORD(v50) = HIDWORD(v159);
            HIDWORD(v159) = v51;
            *(_DWORD *)(v10 + 20) = v50;
            LODWORD(v50) = v160;
            v160 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v10 + 24) = v50;
            v161 = *(_BYTE *)(v10 + 32);
            llvm::AllocaInst::getAllocationSizeInBits(v49, ***a3, (uint64_t)&v162);
            v52 = v162;
            llvm::AllocaInst::getAllocationSizeInBits(*v151, ***a3, (uint64_t)&v162);
            if (v52 <= (unint64_t)v162)
            {
              v55 = v10 + 40;
              do
              {
                v9 = v55;
                if (v55 >= (unint64_t)a2)
                  break;
                llvm::AllocaInst::getAllocationSizeInBits(v49, ***a3, (uint64_t)&v162);
                v56 = v162;
                v55 += 40;
                llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v9, ***a3, (uint64_t)&v162);
              }
              while (v56 <= (unint64_t)v162);
            }
            else
            {
              v9 = v10;
              do
              {
                llvm::AllocaInst::getAllocationSizeInBits(v49, ***a3, (uint64_t)&v162);
                v53 = v162;
                v54 = *(llvm::AllocaInst **)(v9 + 40);
                v9 += 40;
                llvm::AllocaInst::getAllocationSizeInBits(v54, ***a3, (uint64_t)&v162);
              }
              while (v53 <= (unint64_t)v162);
            }
            v57 = (unint64_t)a2;
            if (v9 < (unint64_t)a2)
            {
              v57 = (unint64_t)a2;
              do
              {
                llvm::AllocaInst::getAllocationSizeInBits(v49, ***a3, (uint64_t)&v162);
                v58 = v162;
                v59 = *(llvm::AllocaInst **)(v57 - 40);
                v57 -= 40;
                llvm::AllocaInst::getAllocationSizeInBits(v59, ***a3, (uint64_t)&v162);
              }
              while (v58 > (unint64_t)v162);
            }
            while (v9 < v57)
            {
              *(_QWORD *)&v162 = *(_QWORD *)v9;
              v60 = v162;
              v61 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = 0;
              v62 = *(_DWORD *)(v9 + 24);
              *(_DWORD *)(v9 + 24) = 0;
              v165 = *(_BYTE *)(v9 + 32);
              v63 = v165;
              *(_QWORD *)v9 = *(_QWORD *)v57;
              v64 = *(_QWORD *)(v9 + 16);
              *(_QWORD *)(v9 + 16) = 0;
              sub_1C63CF51C(v9 + 8, v57 + 8);
              *(_BYTE *)(v9 + 32) = *(_BYTE *)(v57 + 32);
              *(_QWORD *)v57 = v60;
              sub_1C63CF3F4(v57 + 8);
              MEMORY[0x1CAA32FB4](*(_QWORD *)(v57 + 8), 8);
              *(_QWORD *)(v57 + 8) = v61;
              *((_QWORD *)&v162 + 1) = 0;
              *(_QWORD *)(v57 + 16) = v64;
              v163 = 0;
              *(_DWORD *)(v57 + 24) = v62;
              v164 = 0;
              *(_BYTE *)(v57 + 32) = v63;
              sub_1C63CF3F4((uint64_t)&v162 + 8);
              MEMORY[0x1CAA32FB4](0, 8);
              v49 = v157;
              do
              {
                llvm::AllocaInst::getAllocationSizeInBits(v157, ***a3, (uint64_t)&v162);
                v65 = v162;
                v66 = *(llvm::AllocaInst **)(v9 + 40);
                v9 += 40;
                llvm::AllocaInst::getAllocationSizeInBits(v66, ***a3, (uint64_t)&v162);
              }
              while (v65 <= (unint64_t)v162);
              do
              {
                llvm::AllocaInst::getAllocationSizeInBits(v157, ***a3, (uint64_t)&v162);
                v67 = v162;
                v68 = *(llvm::AllocaInst **)(v57 - 40);
                v57 -= 40;
                llvm::AllocaInst::getAllocationSizeInBits(v68, ***a3, (uint64_t)&v162);
              }
              while (v67 > (unint64_t)v162);
            }
            if (v9 - 40 != v10)
            {
              *(_QWORD *)v10 = *(_QWORD *)(v9 - 40);
              sub_1C63CF51C(v10 + 8, v9 - 32);
              *(_BYTE *)(v10 + 32) = *(_BYTE *)(v9 - 8);
              v49 = v157;
            }
            *(_QWORD *)(v9 - 40) = v49;
            sub_1C63CF3F4(v9 - 32);
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 - 32), 8);
            *(_QWORD *)(v9 - 32) = 0;
            *(_QWORD *)(v9 - 24) = 0;
            *(_DWORD *)(v9 - 16) = 0;
            *(_QWORD *)(v9 - 32) = v158;
            v158 = 0;
            *(_DWORD *)(v9 - 24) = v159;
            LODWORD(v159) = 0;
            v69 = *(_DWORD *)(v9 - 20);
            *(_DWORD *)(v9 - 20) = HIDWORD(v159);
            HIDWORD(v159) = v69;
            v70 = *(_DWORD *)(v9 - 16);
            *(_DWORD *)(v9 - 16) = v160;
            v160 = v70;
            *(_BYTE *)(v9 - 8) = v161;
            sub_1C63CF3F4((uint64_t)&v158);
            result = MEMORY[0x1CAA32FB4](0, 8);
            a5 = 0;
            a2 = (llvm::AllocaInst **)v149;
            a4 = v48;
            continue;
          }
        }
        v24 = 0;
        v25 = *(llvm::AllocaInst **)v10;
        v160 = 0;
        v158 = 0;
        v159 = 0;
        v26 = *(_QWORD *)(v10 + 8);
        v157 = v25;
        v158 = v26;
        *(_QWORD *)(v10 + 8) = 0;
        v27 = *(_DWORD *)(v10 + 20);
        LODWORD(v159) = *(_DWORD *)(v10 + 16);
        *(_DWORD *)(v10 + 16) = 0;
        LODWORD(v26) = HIDWORD(v159);
        HIDWORD(v159) = v27;
        *(_DWORD *)(v10 + 20) = v26;
        LODWORD(v26) = v160;
        v160 = *(_DWORD *)(v10 + 24);
        *(_DWORD *)(v10 + 24) = v26;
        v161 = *(_BYTE *)(v10 + 32);
        do
        {
          llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)(v10 + v24 + 40), ***a3, (uint64_t)&v162);
          v28 = v162;
          llvm::AllocaInst::getAllocationSizeInBits(v25, ***a3, (uint64_t)&v162);
          v24 += 40;
        }
        while (v28 > (unint64_t)v162);
        v29 = v10 + v24;
        v30 = a2;
        if (v24 == 40)
        {
          v30 = a2;
          do
          {
            if (v29 >= (unint64_t)v30)
              break;
            v31 = *(v30 - 5);
            v30 -= 5;
            llvm::AllocaInst::getAllocationSizeInBits(v31, ***a3, (uint64_t)&v162);
            v32 = v162;
            llvm::AllocaInst::getAllocationSizeInBits(v25, ***a3, (uint64_t)&v162);
          }
          while (v32 <= (unint64_t)v162);
        }
        else
        {
          do
          {
            v33 = *(v30 - 5);
            v30 -= 5;
            llvm::AllocaInst::getAllocationSizeInBits(v33, ***a3, (uint64_t)&v162);
            v34 = v162;
            llvm::AllocaInst::getAllocationSizeInBits(v25, ***a3, (uint64_t)&v162);
          }
          while (v34 <= (unint64_t)v162);
        }
        v145 = v22;
        v147 = v10;
        v143 = v10 + 8;
        v9 = v29;
        if (v29 < (unint64_t)v30)
        {
          v35 = (unint64_t)v30;
          do
          {
            *(_QWORD *)&v162 = *(_QWORD *)v9;
            v36 = v162;
            v37 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = 0;
            v38 = *(_DWORD *)(v9 + 24);
            *(_DWORD *)(v9 + 24) = 0;
            v165 = *(_BYTE *)(v9 + 32);
            v39 = v165;
            *(_QWORD *)v9 = *(_QWORD *)v35;
            v40 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)(v9 + 16) = 0;
            sub_1C63CF51C(v9 + 8, v35 + 8);
            *(_BYTE *)(v9 + 32) = *(_BYTE *)(v35 + 32);
            *(_QWORD *)v35 = v36;
            sub_1C63CF3F4(v35 + 8);
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v35 + 8), 8);
            *(_QWORD *)(v35 + 8) = v37;
            *((_QWORD *)&v162 + 1) = 0;
            *(_QWORD *)(v35 + 16) = v40;
            v163 = 0;
            *(_DWORD *)(v35 + 24) = v38;
            v164 = 0;
            *(_BYTE *)(v35 + 32) = v39;
            sub_1C63CF3F4((uint64_t)&v162 + 8);
            MEMORY[0x1CAA32FB4](0, 8);
            v25 = v157;
            do
            {
              v41 = *(llvm::AllocaInst **)(v9 + 40);
              v9 += 40;
              llvm::AllocaInst::getAllocationSizeInBits(v41, ***a3, (uint64_t)&v162);
              v42 = v162;
              llvm::AllocaInst::getAllocationSizeInBits(v157, ***a3, (uint64_t)&v162);
            }
            while (v42 > (unint64_t)v162);
            do
            {
              v43 = *(llvm::AllocaInst **)(v35 - 40);
              v35 -= 40;
              llvm::AllocaInst::getAllocationSizeInBits(v43, ***a3, (uint64_t)&v162);
              v44 = v162;
              llvm::AllocaInst::getAllocationSizeInBits(v157, ***a3, (uint64_t)&v162);
            }
            while (v44 <= (unint64_t)v162);
          }
          while (v9 < v35);
        }
        v8 = v147;
        a2 = (llvm::AllocaInst **)v149;
        if (v9 - 40 != v147)
        {
          *(_QWORD *)v147 = *(_QWORD *)(v9 - 40);
          sub_1C63CF51C(v143, v9 - 32);
          *(_BYTE *)(v147 + 32) = *(_BYTE *)(v9 - 8);
          v25 = v157;
        }
        *(_QWORD *)(v9 - 40) = v25;
        sub_1C63CF3F4(v9 - 32);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 - 32), 8);
        *(_QWORD *)(v9 - 32) = 0;
        *(_QWORD *)(v9 - 24) = 0;
        *(_DWORD *)(v9 - 16) = 0;
        *(_QWORD *)(v9 - 32) = v158;
        v158 = 0;
        *(_DWORD *)(v9 - 24) = v159;
        LODWORD(v159) = 0;
        v45 = *(_DWORD *)(v9 - 20);
        *(_DWORD *)(v9 - 20) = HIDWORD(v159);
        HIDWORD(v159) = v45;
        v46 = *(_DWORD *)(v9 - 16);
        *(_DWORD *)(v9 - 16) = v160;
        v160 = v46;
        *(_BYTE *)(v9 - 8) = v161;
        sub_1C63CF3F4((uint64_t)&v158);
        MEMORY[0x1CAA32FB4](0, 8);
        a4 = v145;
        if (v29 < (unint64_t)v30)
        {
LABEL_30:
          result = sub_1C6050C78(v147, v9 - 40, a3, v145, a5 & 1);
          a5 = 0;
          continue;
        }
        v47 = sub_1C60529A4(v147, v9 - 40, a3);
        result = sub_1C60529A4(v9, v149, a3);
        if (!(_DWORD)result)
        {
          if (v47)
            continue;
          goto LABEL_30;
        }
        a2 = (llvm::AllocaInst **)(v9 - 40);
        if (!v47)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C6052118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::DataLayout ****a6)
{
  llvm::AllocaInst *v12;
  uint64_t result;
  llvm::AllocaInst *v14;
  char v15;
  uint64_t v16;
  llvm::AllocaInst *v17;
  llvm::AllocaInst *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  llvm::AllocaInst *v22;
  llvm::AllocaInst *v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  llvm::AllocaInst *v28;
  llvm::AllocaInst *v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  llvm::AllocaInst *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;

  sub_1C6052D30(a1, a2, a3, a4, a6);
  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a5, ***a6, (uint64_t)&v37);
  v12 = v37;
  result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a4, ***a6, (uint64_t)&v37);
  if (v12 > v37)
  {
    v34 = *(_QWORD *)(a4 + 8);
    v37 = *(llvm::AllocaInst **)a4;
    v14 = v37;
    *(_QWORD *)(a4 + 8) = 0;
    v35 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = 0;
    v41 = *(_BYTE *)(a4 + 32);
    v15 = v41;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = 0;
    sub_1C63CF51C(a4 + 8, a5 + 8);
    *(_BYTE *)(a4 + 32) = *(_BYTE *)(a5 + 32);
    *(_QWORD *)a5 = v14;
    sub_1C63CF3F4(a5 + 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a5 + 8), 8);
    *(_QWORD *)(a5 + 8) = v34;
    v38 = 0;
    *(_QWORD *)(a5 + 16) = v16;
    v39 = 0;
    *(_DWORD *)(a5 + 24) = v35;
    v40 = 0;
    *(_BYTE *)(a5 + 32) = v15;
    sub_1C63CF3F4((uint64_t)&v38);
    MEMORY[0x1CAA32FB4](0, 8);
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a4, ***a6, (uint64_t)&v37);
    v17 = v37;
    result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a3, ***a6, (uint64_t)&v37);
    if (v17 > v37)
    {
      v37 = *(llvm::AllocaInst **)a3;
      v18 = v37;
      v19 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v36 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = 0;
      v41 = *(_BYTE *)(a3 + 32);
      v20 = v41;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v21 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      sub_1C63CF51C(a3 + 8, a4 + 8);
      *(_BYTE *)(a3 + 32) = *(_BYTE *)(a4 + 32);
      *(_QWORD *)a4 = v18;
      sub_1C63CF3F4(a4 + 8);
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a4 + 8), 8);
      *(_QWORD *)(a4 + 8) = v19;
      v38 = 0;
      *(_QWORD *)(a4 + 16) = v21;
      v39 = 0;
      *(_DWORD *)(a4 + 24) = v36;
      v40 = 0;
      *(_BYTE *)(a4 + 32) = v20;
      sub_1C63CF3F4((uint64_t)&v38);
      MEMORY[0x1CAA32FB4](0, 8);
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a3, ***a6, (uint64_t)&v37);
      v22 = v37;
      result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a6, (uint64_t)&v37);
      if (v22 > v37)
      {
        v37 = *(llvm::AllocaInst **)a2;
        v23 = v37;
        v24 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v25 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = 0;
        v41 = *(_BYTE *)(a2 + 32);
        v26 = v41;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v27 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = 0;
        sub_1C63CF51C(a2 + 8, a3 + 8);
        *(_BYTE *)(a2 + 32) = *(_BYTE *)(a3 + 32);
        *(_QWORD *)a3 = v23;
        sub_1C63CF3F4(a3 + 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a3 + 8), 8);
        *(_QWORD *)(a3 + 8) = v24;
        v38 = 0;
        *(_QWORD *)(a3 + 16) = v27;
        v39 = 0;
        *(_DWORD *)(a3 + 24) = v25;
        v40 = 0;
        *(_BYTE *)(a3 + 32) = v26;
        sub_1C63CF3F4((uint64_t)&v38);
        MEMORY[0x1CAA32FB4](0, 8);
        llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a6, (uint64_t)&v37);
        v28 = v37;
        result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a1, ***a6, (uint64_t)&v37);
        if (v28 > v37)
        {
          v37 = *(llvm::AllocaInst **)a1;
          v29 = v37;
          v30 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          v31 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = 0;
          v41 = *(_BYTE *)(a1 + 32);
          v32 = v41;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v33 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          sub_1C63CF51C(a1 + 8, a2 + 8);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
          *(_QWORD *)a2 = v29;
          sub_1C63CF3F4(a2 + 8);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 8), 8);
          *(_QWORD *)(a2 + 8) = v30;
          v38 = 0;
          *(_QWORD *)(a2 + 16) = v33;
          v39 = 0;
          *(_DWORD *)(a2 + 24) = v31;
          v40 = 0;
          *(_BYTE *)(a2 + 32) = v32;
          sub_1C63CF3F4((uint64_t)&v38);
          return MEMORY[0x1CAA32FB4](0, 8);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C605251C(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::DataLayout ****a4)
{
  llvm::AllocaInst *v8;
  const llvm::DataLayout **v9;
  llvm::AllocaInst *v10;
  uint64_t result;
  llvm::AllocaInst *v12;
  uint64_t v13;
  llvm::AllocaInst *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  llvm::AllocaInst *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  llvm::AllocaInst *v24;
  llvm::AllocaInst *v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  llvm::AllocaInst *v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  llvm::AllocaInst *v35;
  llvm::AllocaInst *v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  llvm::AllocaInst *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;

  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a4, (uint64_t)&v41);
  v8 = v41;
  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a1, ***a4, (uint64_t)&v41);
  v9 = **a4;
  if (v8 > v41)
  {
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a3, *v9, (uint64_t)&v41);
    v12 = v41;
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a4, (uint64_t)&v41);
    v13 = a1 + 8;
    if (v12 > v41)
    {
      v15 = *(_QWORD *)(a1 + 8);
      v41 = *(llvm::AllocaInst **)a1;
      v14 = v41;
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = 0;
      v45 = *(_BYTE *)(a1 + 32);
      v17 = v45;
      *(_QWORD *)a1 = *(_QWORD *)a3;
      v18 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      sub_1C63CF51C(v13, a3 + 8);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a3 + 32);
      *(_QWORD *)a3 = v14;
      sub_1C63CF3F4(a3 + 8);
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a3 + 8), 8);
      *(_QWORD *)(a3 + 8) = v15;
      v42 = 0;
      *(_QWORD *)(a3 + 16) = v18;
      v43 = 0;
      *(_DWORD *)(a3 + 24) = v16;
      v44 = 0;
      *(_BYTE *)(a3 + 32) = v17;
LABEL_6:
      sub_1C63CF3F4((uint64_t)&v42);
      return MEMORY[0x1CAA32FB4](0, 8);
    }
    v31 = *(_QWORD *)(a1 + 8);
    v41 = *(llvm::AllocaInst **)a1;
    v30 = v41;
    *(_QWORD *)(a1 + 8) = 0;
    v32 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = 0;
    v45 = *(_BYTE *)(a1 + 32);
    v33 = v45;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v34 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    sub_1C63CF51C(v13, a2 + 8);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)a2 = v30;
    sub_1C63CF3F4(a2 + 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 8), 8);
    *(_QWORD *)(a2 + 8) = v31;
    v42 = 0;
    *(_QWORD *)(a2 + 16) = v34;
    v43 = 0;
    *(_DWORD *)(a2 + 24) = v32;
    v44 = 0;
    *(_BYTE *)(a2 + 32) = v33;
    sub_1C63CF3F4((uint64_t)&v42);
    MEMORY[0x1CAA32FB4](0, 8);
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a3, ***a4, (uint64_t)&v41);
    v35 = v41;
    result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a4, (uint64_t)&v41);
    if (v35 > v41)
    {
      v37 = *(_QWORD *)(a2 + 8);
      v41 = *(llvm::AllocaInst **)a2;
      v36 = v41;
      *(_QWORD *)(a2 + 8) = 0;
      v38 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      v45 = *(_BYTE *)(a2 + 32);
      v39 = v45;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v40 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      sub_1C63CF51C(a2 + 8, a3 + 8);
      *(_BYTE *)(a2 + 32) = *(_BYTE *)(a3 + 32);
      *(_QWORD *)a3 = v36;
      sub_1C63CF3F4(a3 + 8);
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a3 + 8), 8);
      *(_QWORD *)(a3 + 8) = v37;
      v42 = 0;
      *(_QWORD *)(a3 + 16) = v40;
      v43 = 0;
      *(_DWORD *)(a3 + 24) = v38;
      v44 = 0;
      *(_BYTE *)(a3 + 32) = v39;
      goto LABEL_6;
    }
  }
  else
  {
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a3, *v9, (uint64_t)&v41);
    v10 = v41;
    result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a4, (uint64_t)&v41);
    if (v10 > v41)
    {
      v20 = *(_QWORD *)(a2 + 8);
      v41 = *(llvm::AllocaInst **)a2;
      v19 = v41;
      *(_QWORD *)(a2 + 8) = 0;
      v21 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      v45 = *(_BYTE *)(a2 + 32);
      v22 = v45;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v23 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      sub_1C63CF51C(a2 + 8, a3 + 8);
      *(_BYTE *)(a2 + 32) = *(_BYTE *)(a3 + 32);
      *(_QWORD *)a3 = v19;
      sub_1C63CF3F4(a3 + 8);
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a3 + 8), 8);
      *(_QWORD *)(a3 + 8) = v20;
      v42 = 0;
      *(_QWORD *)(a3 + 16) = v23;
      v43 = 0;
      *(_DWORD *)(a3 + 24) = v21;
      v44 = 0;
      *(_BYTE *)(a3 + 32) = v22;
      sub_1C63CF3F4((uint64_t)&v42);
      MEMORY[0x1CAA32FB4](0, 8);
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a4, (uint64_t)&v41);
      v24 = v41;
      result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a1, ***a4, (uint64_t)&v41);
      if (v24 > v41)
      {
        v41 = *(llvm::AllocaInst **)a1;
        v25 = v41;
        v26 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        v27 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = 0;
        v45 = *(_BYTE *)(a1 + 32);
        v28 = v45;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v29 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        sub_1C63CF51C(a1 + 8, a2 + 8);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_QWORD *)a2 = v25;
        sub_1C63CF3F4(a2 + 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 8), 8);
        *(_QWORD *)(a2 + 8) = v26;
        v42 = 0;
        *(_QWORD *)(a2 + 16) = v29;
        v43 = 0;
        *(_DWORD *)(a2 + 24) = v27;
        v44 = 0;
        *(_BYTE *)(a2 + 32) = v28;
        goto LABEL_6;
      }
    }
  }
  return result;
}

BOOL sub_1C60529A4(uint64_t a1, uint64_t a2, const llvm::DataLayout ****a3)
{
  unint64_t v6;
  _BOOL8 result;
  llvm::AllocaInst *v8;
  llvm::AllocaInst *v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  llvm::AllocaInst **v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  llvm::AllocaInst *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::AllocaInst *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD v27[3];
  llvm::AllocaInst *v28[2];
  uint64_t v29;
  int v30;
  char v31;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)(a2 - 40), ***a3, (uint64_t)v28);
      v8 = v28[0];
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a1, ***a3, (uint64_t)v28);
      if (v8 > v28[0])
      {
        v28[0] = *(llvm::AllocaInst **)a1;
        v9 = v28[0];
        v10 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        v11 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = 0;
        v31 = *(_BYTE *)(a1 + 32);
        v12 = v31;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 40);
        v13 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        sub_1C63CF51C(a1 + 8, a2 - 32);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 - 8);
        *(_QWORD *)(a2 - 40) = v9;
        sub_1C63CF3F4(a2 - 32);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 - 32), 8);
        *(_QWORD *)(a2 - 32) = v10;
        v28[1] = 0;
        *(_QWORD *)(a2 - 24) = v13;
        v29 = 0;
        *(_DWORD *)(a2 - 16) = v11;
        v30 = 0;
        *(_BYTE *)(a2 - 8) = v12;
        sub_1C63CF3F4((uint64_t)&v28[1]);
        MEMORY[0x1CAA32FB4](0, 8);
      }
      return 1;
    case 3uLL:
      sub_1C605251C(a1, a1 + 40, a2 - 40, a3);
      return 1;
    case 4uLL:
      sub_1C6052D30(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1C6052118(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      v14 = (llvm::AllocaInst **)(a1 + 80);
      sub_1C605251C(a1, a1 + 40, a1 + 80, a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  do
  {
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)v15, ***a3, (uint64_t)v28);
    v18 = v28[0];
    llvm::AllocaInst::getAllocationSizeInBits(*v14, ***a3, (uint64_t)v28);
    if (v18 > v28[0])
    {
      v26 = v17;
      *(_OWORD *)v28 = *(_OWORD *)v15;
      v29 = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      v30 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = 0;
      v19 = v16;
      v31 = *(_BYTE *)(v15 + 32);
      while (1)
      {
        v20 = a1 + v19;
        *(_QWORD *)(a1 + v19 + 120) = *(_QWORD *)(a1 + v19 + 80);
        v21 = a1 + v19 + 88;
        sub_1C63CF51C(a1 + v19 + 128, v21);
        *(_BYTE *)(a1 + v19 + 152) = *(_BYTE *)(a1 + v19 + 112);
        v22 = v28[0];
        if (v19 == -80)
          break;
        llvm::AllocaInst::getAllocationSizeInBits(v28[0], ***a3, (uint64_t)v27);
        v23 = v27[0];
        llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)(v20 + 40), ***a3, (uint64_t)v27);
        v19 -= 40;
        if (v23 <= v27[0])
        {
          v24 = a1 + v19 + 120;
          goto LABEL_14;
        }
      }
      v24 = a1;
LABEL_14:
      *(_QWORD *)v24 = v22;
      sub_1C63CF3F4(v21);
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v20 + 88), 8);
      *(_QWORD *)(v24 + 16) = 0;
      *(llvm::AllocaInst **)(v20 + 88) = v28[1];
      v28[1] = 0;
      v25 = HIDWORD(v29);
      *(_DWORD *)(v24 + 16) = v29;
      *(_DWORD *)(v24 + 20) = v25;
      v29 = 0;
      *(_DWORD *)(v24 + 24) = v30;
      v30 = 0;
      v17 = v26 + 1;
      *(_BYTE *)(v24 + 32) = v31;
      sub_1C63CF3F4((uint64_t)&v28[1]);
      MEMORY[0x1CAA32FB4](0, 8);
      if (v26 == 7)
        return v15 + 40 == a2;
    }
    v14 = (llvm::AllocaInst **)v15;
    v16 += 40;
    v15 += 40;
  }
  while (v15 != a2);
  return 1;
}

uint64_t sub_1C6052D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::DataLayout ****a5)
{
  llvm::AllocaInst *v10;
  uint64_t result;
  llvm::AllocaInst *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  llvm::AllocaInst *v16;
  llvm::AllocaInst *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  llvm::AllocaInst *v22;
  llvm::AllocaInst *v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  llvm::AllocaInst *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;

  sub_1C605251C(a1, a2, a3, a5);
  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a4, ***a5, (uint64_t)&v29);
  v10 = v29;
  result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a3, ***a5, (uint64_t)&v29);
  if (v10 > v29)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v29 = *(llvm::AllocaInst **)a3;
    v12 = v29;
    *(_QWORD *)(a3 + 8) = 0;
    v28 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = 0;
    v33 = *(_BYTE *)(a3 + 32);
    v14 = v33;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v15 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    sub_1C63CF51C(a3 + 8, a4 + 8);
    *(_BYTE *)(a3 + 32) = *(_BYTE *)(a4 + 32);
    *(_QWORD *)a4 = v12;
    sub_1C63CF3F4(a4 + 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a4 + 8), 8);
    *(_QWORD *)(a4 + 8) = v13;
    v30 = 0;
    *(_QWORD *)(a4 + 16) = v15;
    v31 = 0;
    *(_DWORD *)(a4 + 24) = v28;
    v32 = 0;
    *(_BYTE *)(a4 + 32) = v14;
    sub_1C63CF3F4((uint64_t)&v30);
    MEMORY[0x1CAA32FB4](0, 8);
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a3, ***a5, (uint64_t)&v29);
    v16 = v29;
    result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a5, (uint64_t)&v29);
    if (v16 > v29)
    {
      v29 = *(llvm::AllocaInst **)a2;
      v17 = v29;
      v18 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v19 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      v33 = *(_BYTE *)(a2 + 32);
      v20 = v33;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v21 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      sub_1C63CF51C(a2 + 8, a3 + 8);
      *(_BYTE *)(a2 + 32) = *(_BYTE *)(a3 + 32);
      *(_QWORD *)a3 = v17;
      sub_1C63CF3F4(a3 + 8);
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a3 + 8), 8);
      *(_QWORD *)(a3 + 8) = v18;
      v30 = 0;
      *(_QWORD *)(a3 + 16) = v21;
      v31 = 0;
      *(_DWORD *)(a3 + 24) = v19;
      v32 = 0;
      *(_BYTE *)(a3 + 32) = v20;
      sub_1C63CF3F4((uint64_t)&v30);
      MEMORY[0x1CAA32FB4](0, 8);
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a2, ***a5, (uint64_t)&v29);
      v22 = v29;
      result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::AllocaInst **)a1, ***a5, (uint64_t)&v29);
      if (v22 > v29)
      {
        v29 = *(llvm::AllocaInst **)a1;
        v23 = v29;
        v24 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        v25 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = 0;
        v33 = *(_BYTE *)(a1 + 32);
        v26 = v33;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        sub_1C63CF51C(a1 + 8, a2 + 8);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_QWORD *)a2 = v23;
        sub_1C63CF3F4(a2 + 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 8), 8);
        *(_QWORD *)(a2 + 8) = v24;
        v30 = 0;
        *(_QWORD *)(a2 + 16) = v27;
        v31 = 0;
        *(_DWORD *)(a2 + 24) = v25;
        v32 = 0;
        *(_BYTE *)(a2 + 32) = v26;
        sub_1C63CF3F4((uint64_t)&v30);
        return MEMORY[0x1CAA32FB4](0, 8);
      }
    }
  }
  return result;
}

uint64_t sub_1C6053040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;

  v5 = *(_QWORD *)(a2 + 816);
  v6 = *(unsigned int *)(a2 + 832);
  v7 = a3 >> 4;
  if ((_DWORD)v6)
  {
    LODWORD(v8) = (v6 - 1) & (v7 ^ (a3 >> 9));
    v9 = (uint64_t *)(v5 + 16 * v8);
    v10 = *v9;
    if (*v9 == a3)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(_QWORD *)(v5 + 16 * v8);
      if (v10 == a3)
      {
        v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  v13 = *(_QWORD *)(a1 + 32) + 48 * *((unsigned int *)v9 + 2);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v13 + 24);
  v16 = *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 40);
  v29[0] = a3;
  if ((_DWORD)v6)
  {
    v18 = v6 - 1;
    v19 = v18 & (v7 ^ (a3 >> 9));
    v20 = (_QWORD *)(v5 + 16 * v19);
    v21 = *v20;
    if (*v20 == a3)
      goto LABEL_23;
    v22 = 0;
    v23 = 1;
    while (v21 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -8192;
      if (v24)
        v22 = v20;
      v25 = v19 + v23++;
      v19 = v25 & v18;
      v20 = (_QWORD *)(v5 + 16 * v19);
      v21 = *v20;
      if (*v20 == a3)
        goto LABEL_23;
    }
    if (v22)
      v26 = v22;
    else
      v26 = v20;
  }
  else
  {
    v26 = 0;
  }
  v20 = sub_1C4E38190(a2 + 816, (uint64_t)v29, v29, v26);
  *v20 = v29[0];
  *((_DWORD *)v20 + 2) = 0;
LABEL_23:
  *((_DWORD *)v20 + 2) = v15;
  v30 = a3;
  v31 = 1 << v16;
  sub_1C62C4BF8((uint64_t)v29, a2 + 840, &v30, &v31);
  v27 = (1 << v16) + v17;
  if (!v17)
    v27 = 0;
  v30 = a3;
  v31 = v27;
  sub_1C62C4BF8((uint64_t)v29, a2 + 864, &v30, &v31);
  v30 = a3;
  v31 = v14;
  return sub_1C62C4BF8((uint64_t)v29, a2 + 888, &v30, &v31);
}

void (*sub_1C60531F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(llvm::raw_ostream *__hidden this)
{
  uint64_t v10;
  void (*BasicType)(llvm::raw_ostream *__hidden);
  unsigned __int8 *v14;
  size_t v15;
  size_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  int v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  const char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void (**v36)(llvm::raw_ostream *__hidden);
  size_t v37;
  const char *v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  size_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  llvm::StructLayout *StructLayout;
  uint64_t MemberType;
  uint64_t v53;
  uint64_t Impl;
  void *v55;
  void **p_dst;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  const char *v64;
  size_t v65;
  size_t v66;
  llvm::raw_ostream *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  _QWORD *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  llvm::DataLayout *v80;
  uint64_t v81;
  void **__dst;
  size_t v83;
  unint64_t v84;
  void *StructType;
  __int128 v86;
  _BYTE v87[32];
  void (**v88)(llvm::raw_ostream *__hidden);
  uint64_t v89;
  _QWORD v90[5];
  int v91;
  uint64_t v92;
  uint64_t v93;

  v10 = a2;
  v93 = *MEMORY[0x1E0C80C00];
  v88 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)a6, *(_DWORD *)(a6 + 16), a2, &v88) & 1) == 0 || (BasicType = v88[1]) == 0)
  {
    v14 = (unsigned __int8 *)sub_1C6053A38(v10);
    v16 = v15;
    v17 = *(_DWORD *)(v10 + 8);
    if (v17 == 13)
    {
      v18 = (unint64_t)*(unsigned int *)(v10 + 8) >> 8;
      v19 = a1;
      v20 = v14;
      v21 = (_QWORD *)v16;
      v22 = 5;
LABEL_15:
      BasicType = (void (*)(llvm::raw_ostream *__hidden))llvm::DIBuilder::createBasicType(v19, v20, v21, v18, v22, 64);
LABEL_16:
      StructType = (void *)v10;
      *(_QWORD *)&v86 = BasicType;
      sub_1C6187718((uint64_t)&v88, a6, (uint64_t *)&StructType, &v86);
      return BasicType;
    }
    if (v17 <= 6)
    {
      sub_1C4768AD0(a3, v10);
      v25 = v24;
      if ((_DWORD)v23 == 1)
      v19 = a1;
      v20 = v14;
      v21 = (_QWORD *)v16;
      v18 = v25;
      v22 = 4;
      goto LABEL_15;
    }
    v26 = *(_DWORD *)(v10 + 8);
    if (v26 == 16)
    {
      v30 = a4;
      if (*(_BYTE *)a4 != 15)
        v30 = *(_QWORD *)(a4 - 8 * *(unsigned int *)(a4 + 8));
      sub_1C4768AD0(a3, v10);
      v33 = v32;
      if ((_DWORD)v31 == 1)
      llvm::DataLayout::getAlignment(a3, v10);
      StructType = (void *)llvm::DIBuilder::createStructType(a1, (_BYTE *)a4, v14, v16, v30, a5, v33, 1 << v34, 0x40u, 0, 0, 0, 0, "", 0);
      v88 = (void (**)(llvm::raw_ostream *__hidden))v90;
      v89 = 0x1000000000;
      if (*(_DWORD *)(v10 + 12))
      {
        v80 = (llvm::DataLayout *)a3;
        v81 = a1;
        v40 = 0;
        do
        {
          v41 = sub_1C60531F0(v81, *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v40), a3, a4, a5, a6);
          v42 = v41;
          v43 = *(_QWORD *)(v41 - 8 * *(unsigned int *)(v41 + 8) + 16);
          if (v43)
          {
            v45 = *(_QWORD **)(v43 + 8);
            v46 = *v45;
            v44 = (unsigned __int8 *)(v45 + 3);
            v79 = v46;
          }
          else
          {
            v79 = 0;
            v44 = 0;
          }
          v47 = (unsigned int *)v10;
          v48 = a4;
          if (*(_BYTE *)a4 != 15)
            v48 = *(_QWORD *)(a4 - 8 * *(unsigned int *)(a4 + 8));
          v49 = *(_QWORD *)(v41 + 32);
          v50 = *(_DWORD *)(v41 + 48);
          StructLayout = llvm::DataLayout::getStructLayout(v80, (llvm::StructType *)v47);
          MemberType = llvm::DIBuilder::createMemberType(v81, (_BYTE *)a4, v44, v79, v48, a5, v49, v50, 8 * *((_QWORD *)StructLayout + v40 + 2), 64, v42, 0);
          v53 = v89;
          if (v89 >= (unint64_t)HIDWORD(v89))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, (uint64_t)v90, v89 + 1, 8);
            v53 = v89;
          }
          v88[v53] = (void (*)(llvm::raw_ostream *__hidden))MemberType;
          v35 = (v89 + 1);
          LODWORD(v89) = v89 + 1;
          ++v40;
          v10 = (uint64_t)v47;
          a3 = (uint64_t)v80;
        }
        while (v40 < v47[3]);
        v36 = v88;
        a1 = v81;
      }
      else
      {
        v35 = 0;
        v36 = (void (**)(llvm::raw_ostream *__hidden))v90;
      }
      Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), v36, v35, 0, 1);
      llvm::DIBuilder::replaceArrays(a1, (unsigned __int8 **)&StructType, Impl, 0);
      BasicType = (void (*)(llvm::raw_ostream *__hidden))StructType;
      v55 = v88;
      if (v88 == v90)
        goto LABEL_16;
LABEL_63:
      free(v55);
      goto LABEL_16;
    }
    if (v26 == 15)
    {
      sub_1C4768AD0(a3, v10);
      v29 = v28;
      if ((_DWORD)v27 == 1)
      v19 = a1;
      v20 = v14;
      v21 = (_QWORD *)v16;
      v18 = v29;
      v22 = 1;
      goto LABEL_15;
    }
    StructType = v87;
    v86 = xmmword_1C677F680;
    sub_1C613932C((uint64_t)&v88, (uint64_t)&StructType);
    if (!v14)
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      __dst = 0;
      v83 = 0;
      v84 = 0;
      goto LABEL_46;
    }
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v16 >= 0x17)
    {
      v57 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v57 = v16 | 7;
      v58 = a3;
      v59 = a1;
      v60 = v10;
      v61 = v57 + 1;
      p_dst = (void **)operator new(v57 + 1);
      v62 = v61 | 0x8000000000000000;
      v10 = v60;
      a1 = v59;
      a3 = v58;
      v83 = v16;
      v84 = v62;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v84) = v16;
      p_dst = (void **)&__dst;
      if (!v16)
        goto LABEL_45;
    }
    memmove(p_dst, v14, v16);
LABEL_45:
    *((_BYTE *)p_dst + v16) = 0;
    v39 = HIBYTE(v84);
    v38 = (const char *)__dst;
    v37 = v83;
LABEL_46:
    v63 = v39 < 0;
    if (v39 >= 0)
      v64 = (const char *)&__dst;
    else
      v64 = v38;
    v65 = v39 & 0x7F;
    if (v63)
      v66 = v37;
    else
      v66 = v65;
    v67 = llvm::raw_ostream::write((llvm::raw_ostream *)&v88, v64, v66);
    v68 = v67;
    v69 = (_BYTE *)*((_QWORD *)v67 + 4);
    if (*((_BYTE **)v67 + 3) == v69)
    {
      v68 = llvm::raw_ostream::write(v67, "_", 1uLL);
    }
    else
    {
      *v69 = 95;
      ++*((_QWORD *)v67 + 4);
    }
    sub_1C4768AD0(a3, v10);
    v71 = v70;
    if (v72 == 1)
    {
      v73 = *((_QWORD *)v68 + 4);
      if ((unint64_t)(*((_QWORD *)v68 + 3) - v73) > 8)
      {
        *(_BYTE *)(v73 + 8) = 32;
        *(_QWORD *)v73 = *(_QWORD *)"vscale x ";
        *((_QWORD *)v68 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v68, "vscale x ", 9uLL);
      }
    }
    sub_1C5E21910(v68, v71, 0, 0, 0);
    if (SHIBYTE(v84) < 0)
      operator delete(__dst);
    v74 = *(unsigned __int8 **)v92;
    v75 = *(_QWORD **)(v92 + 8);
    sub_1C4768AD0(a3, v10);
    v78 = v77;
    if ((_DWORD)v76 == 1)
    BasicType = (void (*)(llvm::raw_ostream *__hidden))llvm::DIBuilder::createBasicType(a1, v74, v75, v78, 1, 64);
    v88 = off_1E81A6E70;
    if (v91 == 1 && v90[0])
      MEMORY[0x1CAA32F9C](v90[0], 0x1000C8077774924);
    v55 = StructType;
    if (StructType == v87)
      goto LABEL_16;
    goto LABEL_63;
  }
  return BasicType;
}

uint64_t sub_1C6053830(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v1 = *(_QWORD *)(a1 + 232);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  else
    v2 = 0;
  if (v2)
  {
    v8 = v1 + 32;
    v7 = *(_QWORD *)(v1 + 32);
    v9 = *(_QWORD *)(v8 + 8) + 40;
    if (v7)
      v10 = v7 == v9;
    else
      v10 = 1;
    if (v10)
      return 0;
    else
      return v7 - 24;
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 80);
    if (v3)
      v4 = v3 - 24;
    else
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    if (v5)
      return v5 - 24;
    else
      return 0;
  }
}

_DWORD *sub_1C6053888(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63CF774(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -1;
      result += 6;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

_DWORD *sub_1C605394C(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v14 = 0;
LABEL_5:
    result = sub_1C4E382C0(a2, a3, v14);
    *result = *a3;
    *((_QWORD *)result + 1) = *a4;
    v9 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v13 = 1;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a2;
  v10 = (37 * *a3) & (v8 - 1);
  result = (_DWORD *)(*(_QWORD *)a2 + 16 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v15 = 0;
    v16 = 1;
    while (v12 != -1)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v15 = result;
      v18 = v10 + v16++;
      v10 = v18 & (v8 - 1);
      result = (_DWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_3;
    }
    if (v15)
      v14 = v15;
    else
      v14 = result;
    goto LABEL_5;
  }
LABEL_3:
  v13 = 0;
LABEL_6:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

const char *sub_1C6053A38(uint64_t a1)
{
  unsigned int v2;
  const char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  size_t v11;
  unint64_t *v12;
  unint64_t v13;
  const void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  llvm::raw_ostream *v22;
  uint64_t *v23;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  _WORD v33[8];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 == 13)
  {
    v8 = (uint64_t *)v33;
    v31 = (uint64_t *)v33;
    v32 = xmmword_1C6612EE0;
    sub_1C613932C((uint64_t)&v25, (uint64_t)&v31);
    v21 = (_DWORD *)v28;
    if ((unint64_t)(v27 - v28) > 5)
    {
      *(_WORD *)(v28 + 4) = 24436;
      *v21 = 1852399455;
      v28 += 6;
      v22 = (llvm::raw_ostream *)&v25;
    }
    else
    {
      v22 = llvm::raw_ostream::write((llvm::raw_ostream *)&v25, "__int_", 6uLL);
    }
    sub_1C5E21910(v22, (unint64_t)*(unsigned int *)(a1 + 8) >> 8, 0, 0, 0);
    v4 = llvm::MDString::get(*(uint64_t **)a1, *(unsigned __int8 **)v30, *(_QWORD *)(v30 + 8))[1] + 24;
    v25 = off_1E81A6E70;
    if (v29 == 1 && *((_QWORD *)&v26 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v26 + 1), 0x1000C8077774924);
    v23 = v31;
    goto LABEL_37;
  }
  if (v2 <= 6)
  {
    v3 = "__floating_type_";
    if (v2 == 3)
      v3 = "__double_";
    if (v2 == 2)
      return "__float_";
    else
      return v3;
  }
  if (v2 != 16)
  {
    if (v2 != 15)
      return "UnknownType";
    if (!*(_QWORD *)(a1 + 24))
      return "PointerType";
    v5 = (uint64_t *)sub_1C6053A38(**(_QWORD **)(a1 + 16));
    if (v6 == 11 && *v5 == 0x546E776F6E6B6E55 && *(uint64_t *)((char *)v5 + 3) == 0x657079546E776F6ELL)
      return "PointerType";
    v8 = &v27;
    v25 = &v27;
    v26 = xmmword_1C6612EE0;
    v33[4] = 773;
    v31 = v5;
    *(_QWORD *)&v32 = v6;
    *((_QWORD *)&v32 + 1) = "_Ptr";
    llvm::Twine::toVector((uint64_t)&v31, (uint64_t)&v25);
    v9 = *(uint64_t **)a1;
    v10 = (unsigned __int8 *)v25;
    v11 = v26;
    goto LABEL_36;
  }
  v12 = *(unint64_t **)(a1 + 24);
  if (!v12)
    return "__LiteralStructType_";
  v15 = *v12;
  v14 = v12 + 2;
  v13 = v15;
  v8 = &v27;
  v25 = &v27;
  v26 = xmmword_1C6612EE0;
  if (v15 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v25, &v27, v13, 1);
    v18 = (uint64_t *)v25;
    v16 = v26;
    goto LABEL_20;
  }
  v16 = 0;
  v17 = 0;
  v18 = &v27;
  v10 = (unsigned __int8 *)&v27;
  if (v13)
  {
LABEL_20:
    memcpy((char *)v18 + v16, v14, v13);
    v10 = (unsigned __int8 *)v25;
    v17 = v26;
  }
  v19 = v17 + v13;
  *(_QWORD *)&v26 = v17 + v13;
  if (v17 + v13)
  {
    do
    {
      v20 = *v10;
      if (v20 == 58 || v20 == 46)
        *v10 = 95;
      ++v10;
      --v19;
    }
    while (v19);
    v10 = (unsigned __int8 *)v25;
    v11 = v26;
  }
  else
  {
    v11 = 0;
  }
  v9 = *(uint64_t **)a1;
LABEL_36:
  v4 = llvm::MDString::get(v9, v10, v11)[1] + 24;
  v23 = (uint64_t *)v25;
LABEL_37:
  if (v23 != v8)
    free(v23);
  return (const char *)v4;
}

unsigned int *sub_1C6053D74(unsigned int **a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ConstantInt *v15;
  const llvm::APInt *v16;
  llvm::ValueHandleBase *v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  unint64_t v20;
  unint64_t v21;
  const llvm::APInt *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  llvm::ConstantInt *v28;
  llvm::ValueHandleBase *v29;
  unsigned int v30;
  llvm::Value *v31;
  uint64_t *v32;
  llvm::GetElementPtrInst *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  llvm::ConstantInt *v38;
  llvm::ConstantInt *v39;
  uint64_t *v40;
  unsigned __int8 *v41;
  llvm::Value **v42;
  unsigned int *v43;
  _QWORD *v44;
  char *v45;
  llvm::Value **v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t *v56;
  llvm::Type *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[32];
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  __int16 v77;
  void *v78;
  uint64_t v79;
  _QWORD v80[4];

  v80[3] = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)*a1 + 102);
  v6 = (*a1)[208];
  v7 = a2 >> 4;
  if ((_DWORD)v6)
  {
    LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
    v9 = (uint64_t *)(v5 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(_QWORD *)(v5 + 16 * v8);
      if (v10 == a2)
      {
        v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  v13 = *((unsigned int *)v9 + 2);
  v14 = *(_QWORD *)a1[1];
  v15 = *(llvm::ConstantInt **)(v14 + 1960);
  LODWORD(v75) = *(_DWORD *)(v14 + 1968) >> 8;
  if (v75 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
  else
    v74 = 0;
  v17 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v74, a3);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  v18 = *(_QWORD *)a1[1];
  v19 = *(llvm::ConstantInt **)(v18 + 1960);
  v20 = *(unsigned int *)(v18 + 1968);
  LODWORD(v75) = v20 >> 8;
  if (v20 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, v13, 0);
  }
  else
  {
    if (v20 <= 0xFF)
      v21 = 0;
    else
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v20);
    v74 = v21 & v13;
  }
  v23 = (unsigned int *)llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v74, v16);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  v78 = v80;
  v80[0] = v17;
  v80[1] = v23;
  v79 = 0x300000002;
  v24 = 2;
  if (!a2 || *(_BYTE *)(a2 + 16) != 59)
    goto LABEL_31;
  v25 = *(_QWORD *)(a2 - 32);
  if (!v25 || *(_BYTE *)(v25 + 16) != 16)
    llvm::report_fatal_error((llvm *)"Coroutines cannot handle non static allocas yet", (const char *)1);
  v26 = (_QWORD *)(v25 + 24);
  if (*(_DWORD *)(v25 + 32) >= 0x41u)
    v26 = (_QWORD *)*v26;
  if (*v26 < 2uLL)
  {
    v24 = 2;
LABEL_31:
    v31 = (llvm::Value *)v80;
    goto LABEL_32;
  }
  v27 = *(_QWORD *)a1[1];
  v28 = *(llvm::ConstantInt **)(v27 + 1960);
  LODWORD(v75) = *(_DWORD *)(v27 + 1968) >> 8;
  if (v75 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
  else
    v74 = 0;
  v29 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v74, v22);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  v30 = v79;
  if (v79 >= HIDWORD(v79))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
    v30 = v79;
  }
  *((_QWORD *)v78 + v30) = v29;
  v24 = (v79 + 1);
  LODWORD(v79) = v79 + 1;
  v31 = (llvm::Value *)v78;
LABEL_32:
  v32 = (uint64_t *)a1[2];
  v33 = *(llvm::GetElementPtrInst **)a1[3];
  v34 = *(uint64_t **)a1[4];
  v77 = 257;
  v35 = sub_1C53901A0(v32, v33, v34, v31, v24, (uint64_t)&v74);
  v36 = 1;
  if (a2 && *(_BYTE *)(a2 + 16) == 59)
  {
    v23 = *a1;
    v74 = 0;
    if (sub_1C6144BDC(*((_QWORD *)v23 + 108), v23[220], a2, &v74))
      v37 = v74;
    else
      v37 = *((_QWORD *)v23 + 108) + 16 * v23[220];
    if (*(_QWORD *)(v37 + 8))
    {
      llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272), *(llvm::Type **)a2);
      v39 = v38;
      v40 = (uint64_t *)a1[2];
      v77 = 257;
      v41 = sub_1C4773E38(v40, 47, (unsigned __int8 *)v35, (uint64_t)v39, (uint64_t)&v74);
      v42 = llvm::ConstantInt::get(v39, ~(-1 << *(_WORD *)(a2 + 18)), 0);
      v43 = a1[2];
      v73 = 257;
      v44 = (_QWORD *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**((_QWORD **)v43 + 9) + 16))(*((_QWORD *)v43 + 9), v41, v42, 0, 0);
      if (!v44)
      {
        v77 = 257;
        v45 = (char *)operator new(0x80uLL);
        *((_QWORD *)v45 + 5) = 0;
        v46 = (llvm::Value **)(v45 + 40);
        *((_QWORD *)v45 + 6) = 0;
        *((_QWORD *)v45 + 8) = *(_QWORD *)v41;
        v47 = (uint64_t)(v45 + 64);
        *((_QWORD *)v45 + 3) = v45 + 64;
        *((_QWORD *)v45 + 7) = v45 + 64;
        *((_QWORD *)v45 + 9) = 0;
        v45[80] = 41;
        v45[81] = 0;
        *((_WORD *)v45 + 41) = 0;
        *((_DWORD *)v45 + 21) = 2;
        *(_OWORD *)(v45 + 88) = 0u;
        *(_OWORD *)(v45 + 104) = 0u;
        *((_DWORD *)v45 + 30) = 0;
        *(_QWORD *)v45 = v41;
        v50 = *((_QWORD *)v41 + 1);
        v49 = v41 + 8;
        v48 = v50;
        *((_QWORD *)v45 + 1) = v50;
        if (v50)
          *(_QWORD *)(v48 + 16) = v45 + 8;
        *((_QWORD *)v45 + 2) = v49;
        *v49 = v45;
        *((_QWORD *)v45 + 4) = v42;
        if (v42)
        {
          v51 = v42 + 1;
          v52 = v42[1];
          *v46 = v52;
          if (v52)
            *((_QWORD *)v52 + 2) = v46;
          *((_QWORD *)v45 + 6) = v51;
          *v51 = v45 + 32;
        }
        llvm::Value::setName((uint64_t ***)v45 + 8, (uint64_t)&v74);
        v44 = (_QWORD *)sub_1C4773754((uint64_t *)v43, v47, (uint64_t)v72);
      }
      v53 = (uint64_t)a1[2];
      v77 = 257;
      v54 = sub_1C506EAA0(v53, (uint64_t)v42, (uint64_t)&v74);
      v73 = 257;
      v55 = (unsigned __int8 *)sub_1C4D89BCC(v53, v44, v54, (uint64_t)v72);
      v56 = (uint64_t *)a1[2];
      v57 = *(llvm::Type **)a2;
      v77 = 257;
      v58 = 48;
      goto LABEL_63;
    }
    v57 = *(llvm::Type **)a2;
    if (*(_QWORD *)(v35 + 72) == *(_QWORD *)a2)
      goto LABEL_55;
    v56 = (uint64_t *)a1[2];
    if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
    {
      v70 = 0;
      v69 = &byte_1C871356D;
      goto LABEL_62;
    }
    v59 = **(_QWORD **)v57;
    v60 = *(_QWORD *)(v59 + 152);
    v61 = *(unsigned int *)(v59 + 168);
    if ((_DWORD)v61)
    {
      LODWORD(v62) = (v61 - 1) & (v7 ^ (a2 >> 9));
      v63 = (uint64_t *)(v60 + 16 * v62);
      v64 = *v63;
      if (*v63 == a2)
      {
LABEL_61:
        v68 = (_QWORD *)v63[1];
        v71 = *v68;
        v69 = (char *)(v68 + 2);
        v70 = v71;
LABEL_62:
        v74 = (uint64_t)v69;
        v75 = v70;
        v76 = ".cast";
        v77 = 773;
        v58 = 49;
        v55 = (unsigned __int8 *)v35;
LABEL_63:
        v23 = (unsigned int *)sub_1C4773E38(v56, v58, v55, (uint64_t)v57, (uint64_t)&v74);
        v36 = 0;
        goto LABEL_55;
      }
      v65 = 1;
      while (v64 != -4096)
      {
        v66 = v62 + v65++;
        v62 = v66 & (v61 - 1);
        v64 = *(_QWORD *)(v60 + 16 * v62);
        if (v64 == a2)
        {
          v63 = (uint64_t *)(v60 + 16 * v62);
          goto LABEL_61;
        }
      }
    }
    v63 = (uint64_t *)(v60 + 16 * v61);
    goto LABEL_61;
  }
LABEL_55:
  if (v78 != v80)
    free(v78);
  if (v36)
    return (unsigned int *)v35;
  else
    return v23;
}

BOOL sub_1C605437C(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 55;
}

BOOL sub_1C60543C8(uint64_t a1, llvm::Use *a2)
{
  return llvm::DominatorTree::dominates(*(llvm::DominatorTree **)a1, **(const llvm::Value ***)(a1 + 8), a2);
}

uint64_t sub_1C60543DC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  if (sub_1C604F354(v5))
    return 1;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 == a1 + 40)
    return 1;
  if (v7)
    v8 = v7 - 24;
  else
    v8 = 0;
  v9 = *(unsigned __int8 *)(v8 + 16);
  result = 1;
  if (v9 == 30)
  {
    if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3)
      v10 = 2;
    else
      v10 = 1;
LABEL_16:
    v11 = 0;
    v12 = 0;
    v13 = (a2 - 1);
    v14 = v10;
    v15 = 1;
    v16 = v8 - 64;
    do
    {
      if (v9 != 30)
        __asm { BR              X9 }
      result = sub_1C60543DC(*(_QWORD *)(v8 - 32 - 32 * v12++), v13);
      if ((_DWORD)result)
        v17 = v14 == v15;
      else
        v17 = 1;
      ++v15;
      v11 += 2;
      v16 += 32;
    }
    while (!v17);
    return result;
  }
  v10 = 2;
  switch(*(_BYTE *)(v8 + 16))
  {
    case 0x1D:
    case 0x22:
    case 0x23:
      return result;
    case 0x1E:
      __break(1u);
      goto LABEL_30;
    case 0x1F:
      v10 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
      break;
    case 0x20:
    case 0x26:
LABEL_30:
      v10 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
      break;
    case 0x21:
      goto LABEL_16;
    case 0x24:
      v10 = *(_WORD *)(v8 + 18) & 1;
      break;
    case 0x25:
      v10 = 1;
      goto LABEL_16;
    case 0x27:
      v10 = *(_DWORD *)(v8 + 80) + 1;
      break;
    default:
      return 1;
  }
  if (v10)
    goto LABEL_16;
  return result;
}

unint64_t sub_1C6054618(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C63CF984(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C63CF984(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C6054680()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable the optimization which would reuse the storage in the coroutine          fra"
                                     "me for allocas whose liferanges are not overlapped, for testing purposes";
  v3.n128_u64[1] = 155;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED82A360, "reuse-storage-in-coroutine-frame", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82A360, &dword_1C475E000);
}

void sub_1C6054700(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v32;
  unsigned __int8 *v33;
  const char *v34;
  int v35;
  unint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::APInt *v41;
  uint64_t *v42;
  uint64_t v43;
  llvm::ValueAsMetadata *v44;
  uint64_t *v45;
  uint64_t v46;
  llvm::Value *v47;
  uint64_t v48;
  _QWORD *v49;
  llvm::ConstantInt *v50;
  uint64_t v51;
  uint64_t ***v52;
  llvm::MemorySSAUpdater *v53;
  llvm::Function **v54;
  uint64_t v55;
  llvm::Function *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v77;
  llvm::LazyCallGraph::RefSCC **v78;
  uint64_t v79;
  llvm::LazyCallGraph::RefSCC **v80;
  unsigned int v81;
  uint64_t *v82[2];
  unsigned int v83;
  int v84;
  int v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  _BYTE v89[32];
  uint64_t *v90;
  uint64_t v91;
  _BYTE v92[48];
  uint64_t *v93;
  uint64_t v94;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 8) + 40);
  v73 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, a2, (uint64_t)a4)+ 8);
  v93 = v95;
  v94 = 0x200000000;
  sub_1C6054F44(*(uint64_t **)(v9 + 112), (uint64_t)&v93, "llvm.coro.prepare.retcon", 0x18uLL);
  sub_1C6054F44(*(uint64_t **)(v9 + 112), (uint64_t)&v93, "llvm.coro.prepare.async", 0x17uLL);
  v90 = (uint64_t *)v92;
  v91 = 0x600000000;
  v10 = *(unsigned int *)(a2 + 16);
  v78 = (llvm::LazyCallGraph::RefSCC **)a2;
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a2 + 8);
    v12 = &v11[v10];
    v13 = (unsigned __int8 *)&qword_1ED7EAC88;
    v14 = &unk_1ED7EA000;
    v15 = "coroutine.presplit";
    while (1)
    {
      v16 = *v11;
      v17 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) + 112);
      if (!v17)
        goto LABEL_28;
      if (!*(_DWORD *)(v17 + 8))
        goto LABEL_28;
      v18 = *(_QWORD *)(v17 + 40);
      if (!v18)
        goto LABEL_28;
      v19 = *(_DWORD *)(v18 + 40);
      if (!v19)
        goto LABEL_28;
      v20 = *(_QWORD *)(v18 + 24);
      v21 = atomic_load(v13);
      if ((v21 & 1) == 0)
      {
        v35 = __cxa_guard_acquire((__guard *)v13);
        v15 = "coroutine.presplit";
        v14 = &unk_1ED7EA000;
        v13 = (unsigned __int8 *)&qword_1ED7EAC88;
        if (v35)
        {
          v36 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v36 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v36;
          __cxa_guard_release(&qword_1ED7EAC88);
          v15 = "coroutine.presplit";
          v14 = (_QWORD *)&unk_1ED7EA000;
          v13 = (unsigned __int8 *)&qword_1ED7EAC88;
        }
      }
      v22 = v14[400];
      v23 = __ROR8__(v22 ^ 0x7A48DC6FE7EA5090, 30);
      v24 = 0x9DDFEA08EB382D69
          * ((v22 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                            * ((v23 - 0x574D426307C1BC2DLL) ^ (v22 - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v23 - 0x574D426307C1BC2DLL) ^ (v22 - 0x2D69957673248ED7))));
      v25 = -348639895 * ((v24 >> 47) ^ v24);
      for (i = 1; ; ++i)
      {
        v27 = v25 & (v19 - 1);
        v28 = (uint64_t *)(v20 + 24 * v27);
        v29 = *v28;
        if (*v28 == -1)
        {
          if (v15 == (const char *)-1)
            goto LABEL_25;
          goto LABEL_11;
        }
        if (v29 != -2)
          break;
        if (v15 == (const char *)-2)
          goto LABEL_25;
LABEL_11:
        if (v29 == -1)
          goto LABEL_28;
        v25 = i + v27;
      }
      if (v28[1] != 18)
        goto LABEL_11;
      v30 = *(_QWORD *)v29 == 0x6E6974756F726F63 && *(_QWORD *)(v29 + 8) == 0x6C70736572702E65;
      if (!v30 || *(_WORD *)(v29 + 16) != 29801)
        goto LABEL_11;
LABEL_25:
      v32 = v91;
      if (v91 >= (unint64_t)HIDWORD(v91))
      {
        v33 = v13;
        v34 = v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v91 + 1, 8);
        v15 = v34;
        v14 = (_QWORD *)&unk_1ED7EA000;
        v13 = v33;
        v32 = v91;
      }
      v90[v32] = v16;
      LODWORD(v91) = v91 + 1;
LABEL_28:
      if (++v11 == v12)
      {
        LODWORD(v10) = v91;
        break;
      }
    }
  }
  if (!(v10 | v94))
  {
    *(_QWORD *)a6 = a6 + 32;
    *(_QWORD *)(a6 + 8) = a6 + 32;
    *(_QWORD *)(a6 + 16) = 2;
    *(_DWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 48) = a6 + 80;
    *(_QWORD *)(a6 + 56) = a6 + 80;
    *(_QWORD *)(a6 + 64) = 2;
    *(_DWORD *)(a6 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a6, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    goto LABEL_79;
  }
  if ((_DWORD)v10)
  {
    v37 = v90;
    v38 = (char *)&v90[v10];
    goto LABEL_38;
  }
  if ((_DWORD)v94)
  {
    v69 = v93;
    v70 = 8 * v94;
    do
    {
      v71 = *v69++;
      sub_1C6054FD0(*(_QWORD *)(v71 + 8));
      v70 -= 8;
    }
    while (v70);
    if ((_DWORD)v91)
    {
      v37 = v90;
      v38 = (char *)&v90[v91];
LABEL_38:
      v72 = v38;
      do
      {
        v77 = v37;
        v39 = *v37;
        v40 = *(_QWORD *)(*v37 + 8);
        *(_QWORD *)(v40 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v40 + 112), **(uint64_t ***)v40, -1, "coroutine.presplit", 0x12uLL);
        v87 = (uint64_t *)v89;
        v88 = 0x400000000;
        sub_1C6055128(v82, (llvm *)v40, (uint64_t)&v87, (llvm::MemorySSAUpdater *)*a1);
        if (v82[0])
        {
          v42 = v82[1];
          if (v85)
          {
            if (v83)
            {
              v51 = 8 * v83;
              do
              {
                v52 = (uint64_t ***)*v42++;
                sub_1C605DA34(v52, (uint64_t)v82, v86, 0, 0);
                v51 -= 8;
              }
              while (v51);
            }
          }
          else if (v83)
          {
            v43 = 8 * v83;
            do
            {
              v44 = (llvm::ValueAsMetadata *)*v42;
              v45 = **(uint64_t ***)*v42;
              v46 = *v45;
              v47 = *(llvm::Value **)(*v45 + 1568);
              if (!v47)
              {
                v50 = *(llvm::ConstantInt **)(v46 + 1888);
                v81 = *(_DWORD *)(v46 + 1896) >> 8;
                if (v81 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v80, 0, 0);
                else
                  v80 = 0;
                v47 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v80, v41);
                if (v81 >= 0x41 && v80)
                  MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
                *(_QWORD *)(v46 + 1568) = v47;
              }
              llvm::Value::doRAUW(v44, v47, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v44 + 5) + 40, (uint64_t ***)v44);
              v48 = *((_QWORD *)v44 + 3);
              v49 = (_QWORD *)*((_QWORD *)v44 + 4);
              *v49 = v48;
              *(_QWORD *)(v48 + 8) = v49;
              *((_QWORD *)v44 + 3) = 0;
              *((_QWORD *)v44 + 4) = 0;
              llvm::Value::deleteValue(v44);
              ++v42;
              v43 -= 8;
            }
            while (v43);
          }
          v53 = (llvm::MemorySSAUpdater *)v88;
          if ((_DWORD)v88)
          {
            if ((v85 - 1) >= 3)
            {
              if (!v85)
              {
                v54 = (llvm::Function **)v87;
                v55 = 8 * v88;
                do
                {
                  v56 = *v54++;
                  llvm::LazyCallGraph::addSplitFunction((llvm::LazyCallGraph *)a4, *(llvm::Function **)(v39 + 8), v56);
                  v55 -= 8;
                }
                while (v55);
              }
            }
            else
            {
              llvm::LazyCallGraph::addSplitRefRecursiveFunctions((uint64_t)a4, *(_QWORD *)(v39 + 8), v87, v88);
            }
            llvm::updateCGAndAnalysisManagerForCGSCCPass((uint64_t)a4, v78, v39, a3, a5, v73);
          }
          llvm::removeUnreachableBlocks(*(llvm **)(v39 + 8), 0, 0, v53);
          llvm::updateCGAndAnalysisManagerForCGSCCPass((uint64_t)a4, v78, v39, a3, a5, v73);
        }
        if (v84)
        {
          v57 = *(_QWORD *)(a5 + 8);
          v80 = v78;
          sub_1C4DD5568(v57, (uint64_t *)&v80);
          if ((_DWORD)v88)
          {
            v58 = v87;
            v59 = 8 * v88;
            do
            {
              v60 = *v58;
              v61 = *(_QWORD *)(a5 + 8);
              v80 = (llvm::LazyCallGraph::RefSCC **)*v58;
              v62 = sub_1C4E851E8(a4 + 12, &v80);
              v63 = v62[1];
              if (!v63)
              {
                v63 = sub_1C484358C((uint64_t)a4, 104, 3);
                v62[1] = v63;
                *(_QWORD *)v63 = a4;
                *(_QWORD *)(v63 + 8) = v60;
                *(_BYTE *)(v63 + 96) = 0;
                *(_QWORD *)(v63 + 16) = 0;
                *(_BYTE *)(v63 + 24) = 0;
              }
              v79 = 0;
              v80 = (llvm::LazyCallGraph::RefSCC **)v63;
              v64 = sub_1C4DD8A9C(a4 + 36, &v80, &v79);
              v65 = 0;
              if (v64)
                v65 = *(_QWORD *)(v79 + 8);
              v80 = (llvm::LazyCallGraph::RefSCC **)v65;
              sub_1C4DD5568(v61, (uint64_t *)&v80);
              ++v58;
              v59 -= 8;
            }
            while (v59);
          }
        }
        sub_1C63CFD50(v82);
        if (v87 != (uint64_t *)v89)
          free(v87);
        v37 = v77 + 1;
      }
      while (v77 + 1 != (uint64_t *)v72);
    }
  }
  if ((_DWORD)v94)
  {
    v66 = v93;
    v67 = 8 * v94;
    do
    {
      v68 = *v66++;
      sub_1C6054FD0(*(_QWORD *)(v68 + 8));
      v67 -= 8;
    }
    while (v67);
  }
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_QWORD *)(a6 + 88) = 0;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_QWORD *)a6 = a6 + 32;
  *(_QWORD *)(a6 + 8) = a6 + 32;
  *(_QWORD *)(a6 + 16) = 2;
  *(_QWORD *)(a6 + 48) = a6 + 80;
  *(_QWORD *)(a6 + 56) = a6 + 80;
  *(_DWORD *)(a6 + 64) = 2;
LABEL_79:
  if (v90 != (uint64_t *)v92)
    free(v90);
  if (v93 != v95)
    free(v93);
}

uint64_t sub_1C6054F44(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = sub_1C4FB7E80(a1, a3, a4);
  if (result && !*(_BYTE *)(result + 16) && *(_QWORD *)(result + 8))
  {
    v6 = *(unsigned int *)(a2 + 8);
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      v7 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 8);
      result = v7;
      LODWORD(v6) = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = result;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

void sub_1C6054FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::Value *v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = *(_QWORD *)(v1 + 24);
      v1 = *(_QWORD *)(v1 + 8);
      v3 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
      v4 = llvm::Value::stripPointerCasts((llvm::Value *)v3);
      v5 = *(_QWORD *)(v2 + 8);
      if (v5)
      {
        v6 = v4;
        do
        {
          while (1)
          {
            v7 = *(_QWORD *)(v5 + 24);
            v5 = *(_QWORD *)(v5 + 8);
            if (v7)
            {
              if (*(_BYTE *)(v7 + 16) == 77 && *(_QWORD *)v7 == *(_QWORD *)v6)
                break;
            }
            if (!v5)
              goto LABEL_11;
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v6, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
          v8 = *(_QWORD *)(v7 + 24);
          v9 = *(_QWORD **)(v7 + 32);
          *v9 = v8;
          *(_QWORD *)(v8 + 8) = v9;
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v7);
        }
        while (v5);
      }
LABEL_11:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v2, (llvm::Value *)v3, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v2 + 40) + 40, (uint64_t ***)v2);
      v10 = *(_QWORD *)(v2 + 24);
      v11 = *(_QWORD **)(v2 + 32);
      *v11 = v10;
      *(_QWORD *)(v10 + 8) = v11;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v2);
      if (v3)
      {
        v12 = *(unsigned __int8 *)(v3 + 16);
        while (v12 == 77)
        {
          if (*(_QWORD *)(v3 + 8))
            break;
          v13 = *(_QWORD *)(v3 - 32);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v3 + 40) + 40, (uint64_t ***)v3);
          v14 = *(_QWORD *)(v3 + 24);
          v15 = *(_QWORD **)(v3 + 32);
          *v15 = v14;
          *(_QWORD *)(v14 + 8) = v15;
          *(_QWORD *)(v3 + 24) = 0;
          *(_QWORD *)(v3 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v3);
          if (!v13)
            break;
          v12 = *(unsigned __int8 *)(v13 + 16);
          v3 = v13;
        }
      }
    }
    while (v1);
  }
}

void sub_1C6055128(uint64_t **a1, llvm *this, uint64_t a3, llvm::MemorySSAUpdater *a4)
{
  char v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  llvm::Type *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  llvm::Value **v15;
  llvm::ConstantAggregateZero *v16;
  llvm::UndefValue *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  const char *v33;
  char v34;
  uint64_t v35;
  llvm::ConstantInt *v36;
  llvm::Value **v37;
  uint64_t v38;
  llvm::Value *v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::ValueAsMetadata *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  llvm::ConstantTokenNone *v46;
  uint64_t ***v47;
  unsigned int v48;
  uint64_t **v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD **v52;
  uint64_t *v53;
  uint64_t **v54;
  llvm::GetElementPtrInst *v55;
  unsigned int v56;
  uint64_t ***v57;
  uint64_t v58;
  char v59;
  char v60;
  char *v61;
  char *v62;
  llvm::Value *v63;
  uint64_t **v64;
  _QWORD *v65;
  uint64_t **v66;
  int v67;
  char *v68;
  llvm::Value *v69;
  unsigned __int8 *v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t v73;
  llvm *v74;
  llvm *v75;
  llvm::MemorySSAUpdater *v76;
  llvm::MemorySSAUpdater *v77;
  llvm::MemorySSAUpdater *v78;
  uint64_t v79;
  uint64_t ii;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  llvm::ValueAsMetadata *v87;
  _BOOL4 v88;
  int v90;
  llvm::UndefValue *v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t ***v97;
  unint64_t v98;
  uint64_t v99;
  int32x2_t *v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  llvm::GetElementPtrInst *v114;
  unsigned int v115;
  uint64_t ***v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int32x2_t *v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  int v130;
  llvm::PointerType *v131;
  unsigned __int8 **v132;
  uint64_t v133;
  const llvm::APInt *v134;
  unsigned __int8 *v135;
  uint64_t v136;
  llvm::Value *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t i;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  llvm::BasicBlock *v147;
  uint64_t v148;
  uint64_t SinglePredecessor;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  llvm::Value *v155;
  _BOOL4 v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  uint64_t j;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  llvm::Type *v170;
  uint64_t *v171;
  llvm::Type *v172;
  llvm::Type *v173;
  llvm::Type *v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  llvm::Type *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  BOOL v184;
  BOOL v185;
  uint64_t v186;
  llvm::Type *v187;
  uint64_t *v188;
  uint64_t v189;
  unsigned int v190;
  BOOL v191;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t k;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unint64_t *v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  llvm::ValueSymbolTable *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t ***v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  const llvm::Value *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  _QWORD *v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t **v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  llvm::UndefValue *v262;
  uint64_t v263;
  llvm::PHINode *v264;
  llvm::Type *v265;
  llvm::Value *v266;
  llvm::UndefValue *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t ***v271;
  char *v273;
  uint64_t v274;
  char *v275;
  unsigned __int8 *v276;
  llvm::Module *v277;
  uint64_t v278;
  uint64_t v279;
  llvm::ConstantInt *v280;
  uint64_t v281;
  uint64_t v282;
  llvm::Constant *v283;
  uint64_t Declaration;
  uint64_t **v285;
  unsigned __int8 *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t **v289;
  unsigned __int8 *v290;
  uint64_t v291;
  uint64_t ****v292;
  uint64_t v293;
  uint64_t *****v294;
  uint64_t **v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t m;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t *v315;
  uint64_t v316;
  int32x2_t *v317;
  unint64_t v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  int v324;
  int v325;
  unint64_t v327;
  unint64_t *v328;
  uint64_t v329;
  int32x2_t *v330;
  unint64_t v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  int v337;
  int v338;
  uint64_t *v339;
  uint64_t kk;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t *v343;
  _QWORD **v344;
  _QWORD *mm;
  uint64_t v346;
  _BOOL4 v347;
  _BOOL4 v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  int v357;
  BOOL v358;
  const char *v359;
  const llvm::APInt *v360;
  char v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  llvm::ConstantInt *v365;
  unsigned int v366;
  unint64_t v367;
  unsigned __int8 *v368;
  unsigned __int8 *v369;
  uint64_t v370;
  unsigned __int8 *v371;
  uint64_t v372;
  unsigned __int8 *v373;
  char v374;
  char v375;
  char *v376;
  char *v377;
  unsigned __int8 **v378;
  llvm::Value *v379;
  _QWORD *v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int8 ***v383;
  uint64_t v384;
  uint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  llvm::Value *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  llvm::Value **v394;
  llvm::Value *v395;
  int v396;
  int v397;
  llvm::Value *v398;
  unint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  unint64_t v403;
  unint64_t v404;
  int v405;
  void **v406;
  char v407;
  char v408;
  char v409;
  const char *v410;
  char v411;
  unsigned __int8 *v412;
  unint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t *v417;
  uint64_t *v418;
  _QWORD *v419;
  uint64_t **v420;
  unsigned int v421;
  _QWORD *v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  llvm::Value *v428;
  uint64_t v429;
  int v430;
  int v431;
  uint64_t v432;
  _QWORD *v433;
  unsigned __int8 **v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  unsigned __int8 **v440;
  uint64_t v441;
  unsigned __int8 *v442;
  uint64_t v443;
  unsigned __int8 *v444;
  uint64_t ***v445;
  llvm::Value *v446;
  llvm::UndefValue *v447;
  unsigned __int8 *v448;
  uint64_t v449;
  _QWORD *v450;
  llvm::Type *v451;
  llvm::UndefValue *v452;
  uint64_t v453;
  llvm::UndefValue **v454;
  uint64_t v455;
  llvm::UndefValue ***v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t n;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t *v469;
  uint64_t v470;
  int32x2_t *v471;
  unint64_t v472;
  uint64_t v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t *v476;
  uint64_t v477;
  int v478;
  int v479;
  unint64_t v481;
  unint64_t *v482;
  uint64_t v483;
  int32x2_t *v484;
  unint64_t v485;
  uint64_t v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t *v489;
  uint64_t v490;
  int v491;
  int v492;
  char *v493;
  char *v494;
  unsigned __int8 **v495;
  int v496;
  unsigned __int8 *v497;
  unsigned __int8 *v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  llvm::ConstantInt *v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  _BOOL4 v508;
  void *v509;
  uint64_t v510;
  void *v511;
  uint64_t *v512;
  unsigned int v513;
  uint64_t ***v514;
  char v515;
  char v516;
  char *v517;
  char *v518;
  uint64_t ****v519;
  llvm::Value *v520;
  _QWORD *v521;
  uint64_t v522;
  uint64_t **v523;
  uint64_t *****v524;
  uint64_t **v525;
  llvm::Value *v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t *v529;
  uint64_t *v530;
  llvm::BasicBlock *v531;
  uint64_t v532;
  BOOL v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t **v539;
  uint64_t *v540;
  int v541;
  int v542;
  uint64_t *v543;
  uint64_t v544;
  char *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t *v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t **v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t *v555;
  _QWORD *v556;
  _QWORD *v557;
  llvm::Value *v558;
  char *v559;
  uint64_t v560;
  _QWORD *v561;
  _QWORD *v562;
  const llvm::APInt *v563;
  llvm::ConstantInt *v564;
  unsigned int v565;
  unsigned __int8 v566;
  llvm::ValueHandleBase *v567;
  uint64_t v568;
  uint64_t v569;
  char *v570;
  char *v571;
  uint64_t **v572;
  int v573;
  unsigned __int8 *v574;
  uint64_t v575;
  llvm::ValueSymbolTable *v576;
  uint64_t v577;
  unsigned int v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  _QWORD *v583;
  uint64_t v584;
  unsigned int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  llvm::ConstantTokenNone *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  BOOL v595;
  _BOOL4 v596;
  uint64_t v597;
  unsigned int v598;
  llvm::BasicBlock *v600;
  llvm::DataLayout *v601;
  int v602;
  uint64_t *v603;
  llvm::BasicBlock *v604;
  char *jj;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  _QWORD *v615;
  uint64_t v616;
  _QWORD *v617;
  _QWORD *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  llvm::UndefValue *v622;
  uint64_t v623;
  _QWORD *v624;
  BOOL v625;
  uint64_t v626;
  int v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  llvm::BasicBlock *v631;
  uint64_t v632;
  uint64_t v633;
  _QWORD *v634;
  llvm::MemorySSAUpdater *v635;
  llvm::Value *v636;
  uint64_t *v637;
  uint64_t v638;
  llvm::GetElementPtrInst *v639;
  uint64_t **v640;
  uint64_t ***v641;
  char v642;
  char v643;
  char *v644;
  char *v645;
  uint64_t ****v646;
  llvm::Value *v647;
  _QWORD *v648;
  uint64_t v649;
  uint64_t **v650;
  uint64_t *****v651;
  uint64_t **v652;
  uint64_t v653;
  uint64_t *Select;
  uint64_t v655;
  _BOOL4 v656;
  BOOL v657;
  llvm::GetElementPtrInst *v658;
  uint64_t **v659;
  uint64_t ***v660;
  char v661;
  char v662;
  char *v663;
  char *v664;
  uint64_t ****v665;
  llvm::Value *v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  uint64_t **v670;
  uint64_t *****v671;
  uint64_t **v672;
  uint64_t *v673;
  uint64_t v674;
  unsigned int v675;
  uint64_t v676;
  unsigned int v677;
  uint64_t v678;
  unsigned int v679;
  char *v680;
  char *v681;
  llvm::ArrayType **v682;
  uint64_t v683;
  llvm::PoisonValue *v684;
  llvm::Value **v685;
  _DWORD *v686;
  llvm::ConstantExpr *v687;
  llvm::PointerType *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t **v693;
  uint64_t *v694;
  int v695;
  int v696;
  uint64_t *v697;
  char *v698;
  uint64_t v699;
  uint64_t v700;
  llvm::Constant *v701;
  llvm::Type *v702;
  llvm::ConstantExpr *PointerCast;
  uint64_t v704;
  uint64_t v705;
  llvm::ConstantExpr **v706;
  uint64_t v707;
  llvm::ConstantExpr ***v708;
  uint64_t v709;
  uint64_t v710;
  llvm::ConstantInt *v711;
  char *v712;
  char *v713;
  unsigned __int8 **v714;
  int v715;
  unsigned __int8 *v716;
  unsigned __int8 *v717;
  unsigned __int8 *v718;
  uint64_t *v719;
  unsigned __int8 **v720;
  int v721;
  unsigned __int8 *v722;
  unsigned __int8 *v723;
  unsigned __int8 *v724;
  char *v725;
  char *v726;
  unsigned __int8 **v727;
  int v728;
  unsigned __int8 *v729;
  unsigned __int8 *v730;
  unsigned __int8 *v731;
  uint64_t *v732;
  unsigned __int8 **v733;
  int v734;
  unsigned __int8 *v735;
  unsigned __int8 *v736;
  unsigned __int8 *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  char *v743;
  uint64_t v744;
  void *v745;
  uint64_t ***v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  llvm *v750;
  llvm *v751;
  llvm *v752;
  uint64_t **v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t *v757;
  uint64_t *v758;
  uint64_t **v759;
  unint64_t v760;
  uint64_t *v761;
  char v762;
  uint64_t v763;
  llvm::ConstantTokenNone *v764;
  llvm::ConstantTokenNone *v765;
  llvm::ConstantTokenNone *v766;
  unsigned __int8 *v767;
  uint64_t v768;
  _QWORD v769[4];
  __int16 v770;
  void *v771;
  llvm::Type *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _QWORD *v776;
  void *v777;
  uint64_t v778;
  uint64_t *v779;
  void **v780;
  _QWORD *v781;
  uint64_t v782;
  char *v783;
  void *v784;
  uint64_t v785;
  void *v786;
  _QWORD v787[11];
  void *v788;
  uint64_t v789;
  _BYTE v790[72];
  void *v791;
  uint64_t v792;
  _BYTE v793[64];
  __int128 v794;
  _QWORD v795[10];
  int v796;
  __int16 v797;
  char v798;
  uint64_t v799;
  uint64_t v800;
  void *v801;
  void *v802;
  uint64_t *v803[2];
  __int128 *v804;
  __int16 v805;
  void *v806;
  uint64_t v807;
  __int128 v808;
  __int16 v809;
  int v810;
  __int16 v811;
  uint64_t v812;

  v4 = (char)a4;
  v812 = *MEMORY[0x1E0C80C00];
  llvm::removeUnreachableBlocks(this, 0, 0, a4);
  a1[1] = (uint64_t *)(a1 + 3);
  a1[2] = (uint64_t *)0x400000000;
  a1[7] = (uint64_t *)(a1 + 9);
  a1[8] = (uint64_t *)0x200000000;
  a1[11] = (uint64_t *)(a1 + 13);
  a1[12] = (uint64_t *)0x200000000;
  a1[15] = (uint64_t *)(a1 + 17);
  v764 = (llvm::ConstantTokenNone *)(a1 + 15);
  a1[16] = (uint64_t *)0x400000000;
  a1[21] = (uint64_t *)(a1 + 23);
  a1[22] = (uint64_t *)0x200000000;
  *((_BYTE *)a1 + 216) = 0;
  *((_BYTE *)a1 + 248) = v4;
  sub_1C603E65C((uint64_t)a1, (uint64_t)this);
  if (!*a1)
    return;
  v754 = (uint64_t **)this;
  v763 = (uint64_t)a1;
  if (!*((_DWORD *)a1 + 50))
  {
    v9 = *((unsigned int *)a1 + 32);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v143 = *(_QWORD *)(*(_QWORD *)v764 + 8 * i);
        v144 = (_DWORD *)(v143 + 20);
        if (!llvm::Constant::isOneValue(*(llvm::Constant **)(v143 - 32 * (*(_DWORD *)(v143 + 20) & 0x7FFFFFF) + 32)))
        {
          v760 = i;
          do
          {
            v145 = *(_QWORD *)v763;
            v146 = (_QWORD *)(v143 + 24);
            v147 = *(llvm::BasicBlock **)(v143 + 40);
            if (*((_QWORD *)v147 + 6) == v143 + 24 || !*v146)
            {
              SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v147);
              if (!SinglePredecessor)
                break;
              v150 = *(_QWORD *)(SinglePredecessor + 40);
              if (v150 == SinglePredecessor + 40)
              {
                v148 = 0;
              }
              else
              {
                v151 = v150 ? v150 - 24 : 0;
                v148 = *(unsigned __int8 *)(v151 + 16) - 29 >= 0xB ? 0 : v151;
              }
            }
            else
            {
              v148 = *v146 - 24;
            }
            v152 = *(unsigned __int8 *)(v148 + 16) - 33;
            v185 = v152 > 0x33;
            v153 = (1 << v152) & 0x8000000000041;
            if (v185 || v153 == 0)
              break;
            v155 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v148 - 32));
            v156 = sub_1C60436B4((uint64_t)v155);
            v157 = !v155 || !v156;
            if (v157 || *((_QWORD *)v155 - 4 * (*((_DWORD *)v155 + 5) & 0x7FFFFFF)) != v145)
              break;
            v158 = *(_QWORD *)(v143 - 32 * (*v144 & 0x7FFFFFF));
            if (sub_1C6040094(v158))
              v159 = v158;
            else
              v159 = 0;
            v160 = *(_QWORD *)(v148 + 40);
            v161 = *(_QWORD *)(v159 + 32);
            v162 = *(_QWORD *)(v159 + 40);
            if (v161)
              v163 = v161 == v162 + 40;
            else
              v163 = 1;
            if (v163)
              v164 = 0;
            else
              v164 = v161 - 24;
            if (v162 == v160)
            {
              if ((sub_1C605A0E0(v164, v148) & 1) != 0)
                goto LABEL_224;
            }
            else
            {
              if ((sub_1C605A0E0(v164, 0) & 1) != 0)
                goto LABEL_224;
              for (j = *(_QWORD *)(v160 + 48); j != v160 + 40; j = *(_QWORD *)(j + 8))
              {
                v166 = j - 24;
                if (j)
                  v167 = j - 24;
                else
                  v167 = 0;
                if (*(_BYTE *)(v167 + 16) != 83)
                  goto LABEL_131;
              }
              v166 = 0;
LABEL_131:
              if ((sub_1C605A0E0(v166, v148) & 1) != 0)
                goto LABEL_224;
              v771 = &v775;
              v772 = (llvm::Type *)&v775;
              v773 = 8;
              LODWORD(v774) = 0;
              v806 = &v808;
              v807 = 0x800000000;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v771, v162);
              v168 = v807;
              if (v807 >= (unint64_t)HIDWORD(v807))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v806, (uint64_t)&v808, v807 + 1, 8);
                v168 = v807;
              }
              *((_QWORD *)v806 + v168) = v160;
              v184 = __CFADD__((_DWORD)v807, 1);
              v169 = v807 + 1;
              LODWORD(v807) = v807 + 1;
              if (!v184)
              {
                do
                {
                  v180 = *((_QWORD *)v806 + v169 - 1);
                  LODWORD(v807) = v169 - 1;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v771, v180);
                  v181 = *(_QWORD *)(v180 + 8);
                  if (v181)
                  {
                    while (1)
                    {
                      v182 = *(_QWORD *)(v181 + 24);
                      v183 = *(unsigned __int8 *)(v182 + 16);
                      v184 = v182 && v183 >= 0x1C;
                      v185 = !v184 || v183 - 29 > 0xA;
                      if (!v185)
                        break;
                      v181 = *(_QWORD *)(v181 + 8);
                      if (!v181)
                        goto LABEL_164;
                    }
LABEL_166:
                    v186 = *(_QWORD *)(v182 + 40);
                    v187 = (llvm::Type *)sub_1C477672C((uint64_t)&v771, v186);
                    if (v772 == v771)
                      v188 = (uint64_t *)((char *)&v773 + 4);
                    else
                      v188 = &v773;
                    if (v187 == (llvm::Type *)((char *)v772 + 8 * *(unsigned int *)v188))
                    {
                      v189 = v807;
                      if (v807 >= (unint64_t)HIDWORD(v807))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v806, (uint64_t)&v808, v807 + 1, 8);
                        v189 = v807;
                      }
                      *((_QWORD *)v806 + v189) = v186;
                      LODWORD(v807) = v807 + 1;
                    }
                    while (1)
                    {
                      v181 = *(_QWORD *)(v181 + 8);
                      if (!v181)
                        break;
                      v182 = *(_QWORD *)(v181 + 24);
                      v190 = *(unsigned __int8 *)(v182 + 16);
                      if (v182)
                        v191 = v190 >= 0x1C;
                      else
                        v191 = 0;
                      if (v191 && v190 - 29 < 0xB)
                        goto LABEL_166;
                    }
                  }
LABEL_164:
                  v169 = v807;
                }
                while ((_DWORD)v807);
              }
              v170 = (llvm::Type *)sub_1C477672C((uint64_t)&v771, v162);
              if (v772 == v771)
                v171 = (uint64_t *)((char *)&v773 + 4);
              else
                v171 = &v773;
              if (v170 != (llvm::Type *)((char *)v772 + 8 * *(unsigned int *)v171))
              {
                *(_QWORD *)v170 = -2;
                LODWORD(v774) = v774 + 1;
              }
              v172 = (llvm::Type *)sub_1C477672C((uint64_t)&v771, v160);
              v174 = (llvm::Type *)v771;
              v173 = v772;
              LODWORD(v175) = HIDWORD(v773);
              v176 = v773;
              if (v772 == v771)
                v177 = HIDWORD(v773);
              else
                v177 = v773;
              if (v172 != (llvm::Type *)((char *)v772 + 8 * v177))
              {
                *(_QWORD *)v172 = -2;
                LODWORD(v774) = v774 + 1;
                v174 = (llvm::Type *)v771;
                v173 = v772;
                LODWORD(v175) = HIDWORD(v773);
                v176 = v773;
              }
              if (v173 == v174)
                v175 = v175;
              else
                v175 = v176;
              v178 = v173;
              if ((_DWORD)v175)
              {
                v179 = 8 * v175;
                v178 = v173;
                while (*(_QWORD *)v178 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v178 = (llvm::Type *)((char *)v178 + 8);
                  v179 -= 8;
                  if (!v179)
                    goto LABEL_197;
                }
              }
              v193 = (_QWORD *)((char *)v173 + 8 * v175);
              if (v178 == (llvm::Type *)v193)
              {
LABEL_197:
                v202 = 1;
              }
              else
              {
                v194 = *(_QWORD *)v178;
LABEL_184:
                v195 = v194 + 40;
                for (k = *(_QWORD *)(v194 + 48); k != v195; k = *(_QWORD *)(k + 8))
                {
                  v197 = k - 24;
                  if (k)
                    v198 = k - 24;
                  else
                    v198 = 0;
                  if (*(_BYTE *)(v198 + 16) != 83)
                    goto LABEL_192;
                }
                v197 = 0;
LABEL_192:
                v199 = sub_1C605A0E0(v197, 0);
                if ((v199 & 1) == 0)
                {
                  v200 = (unint64_t *)((char *)v178 + 8);
                  while (v200 != v193)
                  {
                    v201 = *v200++;
                    v194 = v201;
                    if (v201 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v178 = (llvm::Type *)(v200 - 1);
                      goto LABEL_184;
                    }
                  }
                }
                v202 = v199 ^ 1;
              }
              if (v806 != &v808)
              {
                free(v806);
                v174 = (llvm::Type *)v771;
                v173 = v772;
              }
              if (v173 != v174)
                free(v173);
              if (!v202)
              {
LABEL_224:
                i = v760;
                break;
              }
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v143, ((llvm::Value **)v155 - 4 * (*((_DWORD *)v155 + 5) & 0x7FFFFFF))[4], (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v143 + 40) + 40, (uint64_t ***)v143);
            v203 = *(_QWORD *)(v143 + 24);
            v204 = *(_QWORD **)(v143 + 32);
            *v204 = v203;
            *(_QWORD *)(v203 + 8) = v204;
            *v146 = 0;
            *(_QWORD *)(v143 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v143);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v159 + 40) + 40, (uint64_t ***)v159);
            v205 = *(_QWORD *)(v159 + 24);
            v206 = *(_QWORD **)(v159 + 32);
            *v206 = v205;
            *(_QWORD *)(v205 + 8) = v206;
            *(_QWORD *)(v159 + 24) = 0;
            *(_QWORD *)(v159 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v159);
            if (*(_BYTE *)(v148 + 16) == 33)
            {
              v207 = *(_QWORD *)(v148 - 96);
              v208 = (char *)operator new(0x60uLL);
              *((_DWORD *)v208 + 13) = *((_DWORD *)v208 + 13) & 0x38000000 | 1;
              *((_QWORD *)v208 + 1) = 0;
              *((_QWORD *)v208 + 2) = 0;
              *(_QWORD *)v208 = 0;
              *((_QWORD *)v208 + 4) = ***(_QWORD ***)v207 + 1576;
              *((_QWORD *)v208 + 3) = v208 + 32;
              *((_QWORD *)v208 + 5) = 0;
              v208[48] = 30;
              v208[49] = 0;
              *((_WORD *)v208 + 25) = 0;
              *((_DWORD *)v208 + 13) = 1;
              *(_OWORD *)(v208 + 56) = 0u;
              v209 = v208 + 56;
              *(_OWORD *)(v208 + 72) = 0u;
              *((_DWORD *)v208 + 22) = 0;
              v210 = *(_QWORD *)(v148 + 40);
              v211 = (uint64_t *)(v148 + 24);
              *((_QWORD *)v208 + 9) = v210;
              *(_WORD *)(v210 + 18) &= ~0x8000u;
              if ((v208[55] & 0x10) != 0
                && (v225 = *(_QWORD *)(v210 + 56)) != 0
                && (v226 = *(llvm::ValueSymbolTable **)(v225 + 104)) != 0)
              {
                llvm::ValueSymbolTable::reinsertValue(v226, (llvm::Value *)(v208 + 32));
                v227 = *(_QWORD *)v208;
                v228 = *v211;
                *((_QWORD *)v208 + 7) = *v211;
                *((_QWORD *)v208 + 8) = v211;
                *(_QWORD *)(v228 + 8) = v209;
                *v211 = (uint64_t)v209;
                if (v227)
                {
                  **((_QWORD **)v208 + 2) = *((_QWORD *)v208 + 1);
                  v229 = *((_QWORD *)v208 + 1);
                  if (v229)
                    *(_QWORD *)(v229 + 16) = *((_QWORD *)v208 + 2);
                }
              }
              else
              {
                v212 = *v211;
                *((_QWORD *)v208 + 7) = *v211;
                *((_QWORD *)v208 + 8) = v211;
                *(_QWORD *)(v212 + 8) = v209;
                *v211 = (uint64_t)v209;
              }
              *(_QWORD *)v208 = v207;
              v215 = *(_QWORD *)(v207 + 8);
              v214 = (_QWORD *)(v207 + 8);
              v213 = v215;
              *((_QWORD *)v208 + 1) = v215;
              if (v215)
                *(_QWORD *)(v213 + 16) = v208 + 8;
              *((_QWORD *)v208 + 2) = v214;
              *v214 = v208;
            }
            v216 = *(_QWORD *)(v148 - 32);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v148 + 40) + 40, (uint64_t ***)v148);
            v217 = *(_QWORD *)(v148 + 24);
            v218 = *(_QWORD **)(v148 + 32);
            *v218 = v217;
            *(_QWORD *)(v217 + 8) = v218;
            *(_QWORD *)(v148 + 24) = 0;
            *(_QWORD *)(v148 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v148);
            i = v760;
            if ((llvm::Value *)v216 != v155 && !*(_QWORD *)(v216 + 8) && *(unsigned __int8 *)(v216 + 16) >= 0x1Cu)
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v216 + 40) + 40, (uint64_t ***)v216);
              v219 = *(_QWORD *)(v216 + 24);
              v220 = *(_QWORD **)(v216 + 32);
              *v220 = v219;
              *(_QWORD *)(v219 + 8) = v220;
              *(_QWORD *)(v216 + 24) = 0;
              *(_QWORD *)(v216 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v216);
            }
            if (!*((_QWORD *)v155 + 1))
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v155 + 5) + 40, (uint64_t ***)v155);
              v221 = *((_QWORD *)v155 + 3);
              v222 = (_QWORD *)*((_QWORD *)v155 + 4);
              *v222 = v221;
              *(_QWORD *)(v221 + 8) = v222;
              *((_QWORD *)v155 + 3) = 0;
              *((_QWORD *)v155 + 4) = 0;
              llvm::Value::deleteValue(v155);
            }
            if (--v9 == v760)
            {
              v9 = v760;
              goto LABEL_228;
            }
            v223 = *(_QWORD *)v764;
            v224 = *(_QWORD *)(*(_QWORD *)v764 + 8 * v760);
            *(_QWORD *)(*(_QWORD *)v764 + 8 * v760) = *(_QWORD *)(*(_QWORD *)v764 + 8 * v9);
            *(_QWORD *)(v223 + 8 * v9) = v224;
            v143 = *(_QWORD *)(*(_QWORD *)v764 + 8 * v760);
            v144 = (_DWORD *)(v143 + 20);
          }
          while (!llvm::Constant::isOneValue(*(llvm::Constant **)(v143
                                                                 - 32 * (*(_DWORD *)(v143 + 20) & 0x7FFFFFF)
                                                                 + 32)));
        }
      }
LABEL_228:
      sub_1C6154790((uint64_t)v764, v9);
      a1 = (uint64_t **)v763;
    }
  }
  v10 = (uint64_t *)v754;
  sub_1C6044B28((uint64_t)v754, (uint64_t)a1, v7, v8);
  if (*((_DWORD *)a1 + 50) == 3)
  {
    v12 = *(a1[39] - 4);
    v13 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
    v14 = *(void **)v13;
    v15 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v13 + 32), (uint64_t)a1[38], 0);
    v16 = *(llvm::ConstantAggregateZero **)v12;
    v771 = v14;
    v772 = (llvm::Type *)v15;
    v17 = llvm::ConstantStruct::get(v16, (llvm::Type *)&v771, 2);
    llvm::GlobalVariable::setInitializer((uint64_t)a1[39], v17);
  }
  v18 = *((unsigned int *)a1 + 24);
  if ((_DWORD)v18)
  {
    v19 = a1[11];
    v20 = 8 * v18;
    do
    {
      v21 = *v19++;
      v22 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v21, 1 << *((_BYTE *)a1 + 216), 0);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, (llvm::Value *)v22, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v21 + 40) + 40, (uint64_t ***)v21);
      v23 = *(_QWORD *)(v21 + 24);
      v24 = *(_QWORD **)(v21 + 32);
      *v24 = v23;
      *(_QWORD *)(v23 + 8) = v24;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v21);
      v20 -= 8;
    }
    while (v20);
  }
  v25 = *((unsigned int *)a1 + 16);
  if ((_DWORD)v25)
  {
    v26 = a1[7][v25 - 1];
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 56) + 40) + 272;
    v28 = (uint64_t)a1[26];
    sub_1C4768AD0(v27, v28);
    v30 = (unint64_t)(v29 + 7) >> 3;
    v32 = v31 == 1;
    llvm::DataLayout::getAlignment(v27, v28);
    v35 = ((1 << v34) + v30 - 1) & -(1 << v34);
    v36 = *(llvm::ConstantInt **)v26;
    if (v32)
    v37 = llvm::ConstantInt::get(v36, v35, 0);
    v38 = *((unsigned int *)a1 + 16);
    v10 = (uint64_t *)v754;
    if ((_DWORD)v38)
    {
      v39 = (llvm::Value *)v37;
      v40 = a1[7];
      v41 = 8 * v38;
      do
      {
        v42 = (llvm::ValueAsMetadata *)*v40++;
        llvm::Value::doRAUW(v42, v39, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v42 + 5) + 40, (uint64_t ***)v42);
        v43 = *((_QWORD *)v42 + 3);
        v44 = (_QWORD *)*((_QWORD *)v42 + 4);
        *v44 = v43;
        *(_QWORD *)(v43 + 8) = v44;
        *((_QWORD *)v42 + 3) = 0;
        *((_QWORD *)v42 + 4) = 0;
        llvm::Value::deleteValue(v42);
        v41 -= 8;
      }
      while (v41);
    }
  }
  if (!*((_DWORD *)a1 + 32))
  {
    v83 = *a1;
    v84 = (uint64_t)&(*a1)[-4 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF)];
    v85 = *(_QWORD **)v84;
    v86 = *(_QWORD *)(*(_QWORD *)v84 + 8);
    if (v86)
    {
      while (1)
      {
        v87 = *(llvm::ValueAsMetadata **)(v86 + 24);
        v88 = sub_1C6043668((uint64_t)v87);
        if (v87 && v88)
          break;
        v86 = *(_QWORD *)(v86 + 8);
        if (!v86)
          goto LABEL_41;
      }
    }
    else
    {
LABEL_41:
      v87 = 0;
    }
    v90 = *((_DWORD *)a1 + 50);
    if ((v90 - 1) >= 3)
    {
      if (v90)
        goto LABEL_85;
      sub_1C603E094(v85, v87 != 0);
      if (v87)
      {
        sub_1C4773D54((uint64_t)&v771, (uint64_t)v87, 0, 0, 0);
        v131 = (llvm::PointerType *)a1[26];
        v809 = 257;
        v132 = sub_1C486A5CC((uint64_t *)&v771, v131, 0, (uint64_t)&v806);
        *((_WORD *)v132 + 9) = *((_WORD *)v132 + 9) & 0xFFC0 | *((unsigned __int8 *)a1 + 216);
        v133 = llvm::PointerType::get((llvm::PointerType *)(*v779 + 1912), 0);
        v809 = 257;
        v135 = sub_1C4773E38((uint64_t *)&v771, 49, (unsigned __int8 *)v132, v133, (uint64_t)&v806);
        v136 = *v779;
        v137 = *(llvm::Value **)(*v779 + 1568);
        if (!v137)
        {
          v711 = *(llvm::ConstantInt **)(v136 + 1888);
          LODWORD(v807) = *(_DWORD *)(v136 + 1896) >> 8;
          if (v807 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v806, 0, 0);
          else
            v806 = 0;
          v137 = llvm::ConstantInt::get(v711, (llvm::LLVMContext *)&v806, v134);
          if (v807 >= 0x41 && v806)
            MEMORY[0x1CAA32F9C](v806, 0x1000C8000313F17);
          *(_QWORD *)(v136 + 1568) = v137;
        }
        llvm::Value::doRAUW(v87, v137, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v87 + 5) + 40, (uint64_t ***)v87);
        v138 = *((_QWORD *)v87 + 3);
        v139 = (_QWORD *)*((_QWORD *)v87 + 4);
        *v139 = v138;
        *(_QWORD *)(v138 + 8) = v139;
        *((_QWORD *)v87 + 3) = 0;
        *((_QWORD *)v87 + 4) = 0;
        llvm::Value::deleteValue(v87);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v83, (llvm::Value *)v135, (llvm::Value *)1);
        if (v771 != &v773)
          free(v771);
        v10 = (uint64_t *)v754;
        goto LABEL_85;
      }
      v91 = (llvm::UndefValue *)v83[-4 * (*((_DWORD *)v83 + 5) & 0x7FFFFFF) + 4];
    }
    else
    {
      v91 = llvm::UndefValue::get((llvm::UndefValue *)*v83, v11);
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v83, v91, (llvm::Value *)1);
LABEL_85:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v83[5] + 40, (uint64_t ***)v83);
    v140 = v83[3];
    v141 = (uint64_t *)v83[4];
    *v141 = v140;
    *(_QWORD *)(v140 + 8) = v141;
    v83[3] = 0;
    v83[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v83);
    goto LABEL_356;
  }
  v45 = *((_DWORD *)a1 + 50);
  if ((v45 - 1) < 2)
  {
    v10[14] = llvm::AttributeList::removeAttributeAtIndex(v10 + 14, *(uint64_t **)*v10, -1, 32);
    v10[14] = llvm::AttributeList::removeAttributeAtIndex(v10 + 14, *(uint64_t **)*v10, 0, 19);
    v10[14] = llvm::AttributeList::removeAttributeAtIndex(v10 + 14, *(uint64_t **)*v10, 0, 39);
    v92 = (*a1)[-4 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF)];
    v748 = v92;
    if (*((_BYTE *)a1 + 296))
    {
      v93 = *(unsigned __int8 **)(v92 - 32 * (*(_DWORD *)(v92 + 20) & 0x7FFFFFF) + 64);
      v94 = a3;
LABEL_47:
      v95 = (uint64_t)a1[29];
      v772 = 0;
      v773 = 0;
      v771 = (void *)6;
      if (v95)
      {
        v773 = v95;
        if ((v95 | 0x1000) != 0xFFFFFFFFFFFFF000)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v771);
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)*a1, (llvm::Value *)v93, (llvm::Value *)1);
      v96 = v773;
      a1[29] = (uint64_t *)v773;
      v97 = (uint64_t ***)v754;
      if (v96 != -8192 && v96 != -4096 && v96)
      {
        v98 = (unint64_t)v771 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v771 & 0xFFFFFFFFFFFFFFF8) = v772;
        if (v772)
        {
          *(_QWORD *)v772 = *(_QWORD *)v772 & 7 | v98;
        }
        else
        {
          v99 = v773;
          v100 = ***(int32x2_t ****)v773;
          v101 = (unint64_t)v100[303];
          if (v101 <= v98)
          {
            v102 = v100[305].u32[0];
            if (v101 + 16 * v102 > v98)
            {
              v103 = v102 - 1;
              LODWORD(v104) = v103 & ((v773 >> 4) ^ (v773 >> 9));
              v105 = (uint64_t *)(v101 + 16 * v104);
              v106 = *v105;
              if (v773 != *v105)
              {
                v107 = 1;
                do
                {
                  if (v106 == -4096)
                    goto LABEL_62;
                  v108 = v104 + v107++;
                  v104 = v108 & v103;
                  v106 = *(_QWORD *)(v101 + 16 * v104);
                }
                while (v773 != v106);
                v105 = (uint64_t *)(v101 + 16 * v104);
              }
              *v105 = -8192;
              v100[304] = vadd_s32(v100[304], (int32x2_t)0x1FFFFFFFFLL);
              v99 = v773;
LABEL_62:
              *(_BYTE *)(v99 + 17) &= ~1u;
            }
          }
        }
      }
      v806 = &v808;
      v807 = 0x400000000;
      v761 = v754[8];
      v230 = *((unsigned int *)a1 + 32);
      if (*(_DWORD *)(v94 + 12) < v230)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v94, v94 + 16, v230, 8);
        LODWORD(v230) = *((_DWORD *)a1 + 32);
      }
      v769[0] = 0;
      if (!(_DWORD)v230)
        goto LABEL_353;
      v231 = 0;
      v232 = 0;
      v756 = v230;
      v742 = v92 + 64;
      while (1)
      {
        v233 = a1[15][v231];
        v771 = ".resume.";
        v773 = (uint64_t)v769;
        LOWORD(v775) = 2563;
        v234 = (uint64_t *)sub_1C605D724(v97, (uint64_t)a1, (uint64_t *)&v771, v761, 0);
        v235 = *(unsigned int *)(a3 + 8);
        if (v235 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v94 + 16, v235 + 1, 8);
          v235 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v235) = v234;
        ++*(_DWORD *)(a3 + 8);
        v236 = *(uint64_t **)(v233 + 40);
        LOWORD(v775) = 257;
        v238 = llvm::BasicBlock::splitBasicBlock(v236, (uint64_t *)(v233 + 24), (uint64_t)&v771, 0);
        v239 = (uint64_t *)v236[5];
        if (v239 == v236 + 5)
        {
          v241 = 0;
          if (!v232)
            goto LABEL_247;
        }
        else
        {
          if (v239)
            v240 = (uint64_t)(v239 - 3);
          else
            v240 = 0;
          if (*(unsigned __int8 *)(v240 + 16) - 29 >= 0xB)
            v241 = 0;
          else
            v241 = v240;
          if (!v232)
          {
LABEL_247:
            v242 = v234;
            v243 = (_QWORD *)**v754;
            v771 = "coro.return";
            LOWORD(v775) = 259;
            v232 = (uint64_t ***)operator new();
            *v232 = (uint64_t **)(*v243 + 1600);
            v232[1] = 0;
            v244 = *((_DWORD *)v232 + 5) & 0xC0000000;
            *((_DWORD *)v232 + 4) = 22;
            *((_DWORD *)v232 + 5) = v244;
            v232[3] = 0;
            v245 = (uint64_t *)(v232 + 3);
            v232[4] = 0;
            v232[5] = (uint64_t **)(v232 + 5);
            v232[6] = (uint64_t **)(v232 + 5);
            v232[7] = 0;
            if (v238)
              v246 = (uint64_t **)(v238 + 24);
            else
              v246 = v754 + 9;
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v754 + 9), v232);
            v247 = *v246;
            v232[4] = v246;
            *v245 = (uint64_t)v247;
            v247[1] = (uint64_t)v245;
            *v246 = v245;
            llvm::Value::setName(v232, (uint64_t)&v771);
            a1[36] = (uint64_t *)v232;
            v248 = **v232;
            v771 = &v773;
            v772 = (llvm::Type *)0x200000000;
            v779 = v248;
            v780 = &v786;
            v781 = v787;
            v782 = 0;
            LODWORD(v783) = 0;
            WORD2(v783) = 512;
            BYTE6(v783) = 7;
            v784 = 0;
            v785 = 0;
            v786 = &unk_1E8167888;
            v787[0] = &unk_1E8167A08;
            v777 = v232;
            v778 = (uint64_t)(v232 + 5);
            v249 = *v242;
            v250 = *((_DWORD *)a1 + 32);
            v805 = 257;
            v251 = sub_1C4867E94((uint64_t)&v771, v249, v250, (uint64_t)v803);
            v252 = v807;
            if (v807 >= (unint64_t)HIDWORD(v807))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v806, (uint64_t)&v808, v807 + 1, 8);
              v252 = v807;
            }
            *((_QWORD *)v806 + v252) = v251;
            LODWORD(v807) = v807 + 1;
            v253 = sub_1C603FB2C((uint64_t)a1);
            if (v254)
            {
              v255 = (uint64_t *)v253;
              v256 = 8 * v254;
              do
              {
                v257 = *v255;
                v258 = *((_DWORD *)a1 + 32);
                v805 = 257;
                v259 = sub_1C4867E94((uint64_t)&v771, v257, v258, (uint64_t)v803);
                v260 = v807;
                if (v807 >= (unint64_t)HIDWORD(v807))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v806, (uint64_t)&v808, v807 + 1, 8);
                  v260 = v807;
                }
                *((_QWORD *)v806 + v260) = v259;
                v261 = v807 + 1;
                LODWORD(v807) = v807 + 1;
                ++v255;
                v256 -= 8;
              }
              while (v256);
            }
            else
            {
              v261 = v807;
            }
            v262 = *(llvm::UndefValue **)v754[3][2];
            v263 = (uint64_t)v262;
            if (v261 != 1)
              v263 = **((_QWORD **)v262 + 2);
            v264 = *(llvm::PHINode **)v806;
            v805 = 257;
            v266 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v771, 49, (unsigned __int8 *)v264, v263, (uint64_t)v803);
            if ((_DWORD)v807 != 1)
            {
              v267 = llvm::UndefValue::get(v262, v265);
              LODWORD(v794) = 0;
              v805 = 257;
              v266 = (llvm::Value *)sub_1C506D788((uint64_t)&v771, (uint64_t)v267, (uint64_t)v266, &v794, 1, (uint64_t)v803);
              v268 = v807;
              if ((_DWORD)v807 != 1)
              {
                v269 = 1;
                do
                {
                  v270 = *((_QWORD *)v806 + v269);
                  LODWORD(v794) = v269;
                  v805 = 257;
                  v266 = (llvm::Value *)sub_1C506D788((uint64_t)&v771, (uint64_t)v266, v270, &v794, 1, (uint64_t)v803);
                  ++v269;
                }
                while (v268 != v269);
              }
            }
            sub_1C538D7E4((uint64_t *)&v771, v266);
            if (v771 != &v773)
              free(v771);
            v234 = v242;
            v92 = v748;
          }
        }
        v271 = (uint64_t ***)a1[32];
        if ((*((_DWORD *)a1 + 50) - 3) >= 0xFFFFFFFE && v271 != 0)
        {
          v273 = llvm::GlobalPtrAuthInfo::analyze(v271, v237);
          v791 = v273;
          v792 = v274;
          if ((_BYTE)v274)
          {
            v275 = v273;
            v752 = (llvm *)v234;
            sub_1C4773D54((uint64_t)&v771, v241, 0, 0, 0);
            v276 = *(unsigned __int8 **)(v742 - 32 * (*(_DWORD *)(v92 + 20) & 0x7FFFFFF));
            v277 = *(llvm::Module **)(*((_QWORD *)v777 + 7) + 40);
            if (llvm::Constant::isNullValue(*(llvm::Constant **)(*((_QWORD *)v275 - 4)
                                                                              - 32
                                                                              * (*(_DWORD *)(*((_QWORD *)v275 - 4) + 20) & 0x7FFFFFF)
                                                                              + 64)))
            {
              v234 = (uint64_t *)llvm::GlobalPtrAuthInfo::createWithSameSchema((llvm::GlobalPtrAuthInfo *)&v791, v277, v752, v278, v279, v280);
            }
            else
            {
              v281 = **(_QWORD **)(*((_QWORD *)v275 - 4)
                                 - 32 * (*(_DWORD *)(*((_QWORD *)v275 - 4) + 20) & 0x7FFFFFF)
                                 + 64);
              v805 = 257;
              v282 = (uint64_t)sub_1C4773E38((uint64_t *)&v771, 47, v276, v281, (uint64_t)v803);
              v283 = *(llvm::Constant **)(*((_QWORD *)v275 - 4)
                                        - 32 * (*(_DWORD *)(*((_QWORD *)v275 - 4) + 20) & 0x7FFFFFF)
                                        + 96);
              if ((llvm::Constant::isNullValue(v283) & 1) == 0)
              {
                Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)v277, 247, 0, 0);
                if (Declaration)
                  v285 = *(uint64_t ***)(Declaration + 24);
                else
                  v285 = 0;
                *(_QWORD *)&v794 = v282;
                *((_QWORD *)&v794 + 1) = v283;
                v805 = 257;
                v282 = sub_1C4774778((uint64_t *)&v771, v285, Declaration, (uint64_t *)&v794, 2, (uint64_t)v803, 0);
              }
              v805 = 257;
              v286 = sub_1C4773E38((uint64_t *)&v771, 47, (unsigned __int8 *)v752, v281, (uint64_t)v803);
              v287 = llvm::Intrinsic::getDeclaration((uint64_t *)v277, 249, 0, 0);
              v288 = *(_QWORD *)(*((_QWORD *)v275 - 4)
                               - 32 * (*(_DWORD *)(*((_QWORD *)v275 - 4) + 20) & 0x7FFFFFF)
                               + 32);
              if (v287)
                v289 = *(uint64_t ***)(v287 + 24);
              else
                v289 = 0;
              a1 = (uint64_t **)v763;
              *(_QWORD *)&v794 = v286;
              *((_QWORD *)&v794 + 1) = v288;
              v795[0] = v282;
              v805 = 257;
              v290 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v771, v289, v287, (uint64_t *)&v794, 3, (uint64_t)v803, 0);
              v291 = *(_QWORD *)v752;
              v805 = 257;
              v234 = (uint64_t *)sub_1C4773E38((uint64_t *)&v771, 48, v290, v291, (uint64_t)v803);
              v92 = v748;
            }
            if (v771 != &v773)
              free(v771);
          }
        }
        v292 = (uint64_t ****)(v241 - 32);
        if (*(_QWORD *)(v241 - 32))
        {
          **(_QWORD **)(v241 - 16) = *(_QWORD *)(v241 - 24);
          v293 = *(_QWORD *)(v241 - 24);
          if (v293)
            *(_QWORD *)(v293 + 16) = *(_QWORD *)(v241 - 16);
        }
        *v292 = v232;
        if (v232)
        {
          v294 = (uint64_t *****)(v232 + 1);
          v295 = v232[1];
          *(_QWORD *)(v241 - 24) = v295;
          if (v295)
            v295[2] = (uint64_t *)(v241 - 24);
          *(_QWORD *)(v241 - 16) = v294;
          *v294 = v292;
        }
        sub_1C477667C(*(llvm::PHINode **)v806, (uint64_t)v234, (uint64_t)v236);
        v296 = *(_DWORD *)(v233 + 20);
        v297 = *(unsigned __int8 *)(v233 + 16);
        if (v297 == 84)
        {
          v298 = 0;
          v97 = (uint64_t ***)v754;
        }
        else
        {
          if (v297 == 39)
            v298 = (*(_DWORD *)(v233 + 80) + 1);
          else
            v298 = 2;
          a1 = (uint64_t **)v763;
          v97 = (uint64_t ***)v754;
          v92 = v748;
        }
        v299 = v296 & 0x7FFFFFF;
        v300 = (uint64_t *)(v233 - 32 * v299);
        if (v296 < 0)
        {
          v305 = *(v300 - 1);
          if ((v305 & 0xFFFFFFFF0) != 0)
            v301 = (*((_DWORD *)v300 - 3) - *(_DWORD *)((char *)v300 - v305));
          else
            v301 = 0;
          a1 = (uint64_t **)v763;
          v97 = (uint64_t ***)v754;
          v92 = v748;
        }
        else
        {
          v301 = 0;
        }
        if (v300 != (uint64_t *)(v233 - 32 * v298 - 32 * v301 - 32))
        {
          v302 = 32 * v299 - 32 * v298 - 32 * v301 - 32;
          v303 = 8;
          do
          {
            v304 = *v300;
            v300 += 4;
            sub_1C477667C(*(llvm::PHINode **)((char *)v806 + v303), v304, (uint64_t)v236);
            v303 += 8;
            v302 -= 32;
          }
          while (v302);
        }
        v231 = v769[0] + 1;
        v769[0] = v231;
        if (v231 == v756)
        {
          v306 = *((unsigned int *)a1 + 32);
          *(_QWORD *)&v794 = 0;
          if ((_DWORD)v306)
          {
            for (m = 0; m != v306; *(_QWORD *)&v794 = m)
            {
              v308 = a1[15][m];
              v309 = *(_QWORD *)(*(_QWORD *)a3 + 8 * m);
              v803[0] = (uint64_t *)"resume.";
              v804 = &v794;
              v805 = 2563;
              sub_1C605E4AC((uint64_t)&v771, v754, (uint64_t)v803, (uint64_t)a1, v309, v308);
              sub_1C605A6FC((uint64_t)&v771);
              if (v784 != &v786)
                free(v784);
              if ((_BYTE)v782)
              {
                sub_1C4E43068((uint64_t)&v779);
                MEMORY[0x1CAA32FB4](v779, 8);
                LOBYTE(v782) = 0;
              }
              v310 = v776;
              if ((_DWORD)v778)
              {
                v311 = &v776[8 * (unint64_t)v778];
                do
                {
                  v312 = v310[3];
                  if ((v312 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v313 = v310[7];
                    if (v313)
                    {
                      if (v313 != -8192 && v313 != -4096)
                      {
                        v314 = v310[5] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v314 = v310[6];
                        v315 = (unint64_t *)v310[6];
                        if (v315)
                        {
                          *v315 = *v315 & 7 | v314;
                        }
                        else
                        {
                          v316 = v310[7];
                          v317 = ***(int32x2_t ****)v316;
                          v318 = (unint64_t)v317[303];
                          if (v318 <= v314)
                          {
                            v319 = v317[305].u32[0];
                            if (v318 + 16 * v319 > v314)
                            {
                              v320 = v319 - 1;
                              LODWORD(v321) = v320 & ((v316 >> 4) ^ (v316 >> 9));
                              v322 = (uint64_t *)(v318 + 16 * v321);
                              v323 = *v322;
                              if (v316 != *v322)
                              {
                                v324 = 1;
                                do
                                {
                                  if (v323 == -4096)
                                    goto LABEL_331;
                                  v325 = v321 + v324++;
                                  v321 = v325 & v320;
                                  v323 = *(_QWORD *)(v318 + 16 * v321);
                                }
                                while (v316 != v323);
                                v322 = (uint64_t *)(v318 + 16 * v321);
                              }
                              *v322 = -8192;
                              v317[304] = vadd_s32(v317[304], (int32x2_t)0x1FFFFFFFFLL);
                              v316 = v310[7];
LABEL_331:
                              *(_BYTE *)(v316 + 17) &= ~1u;
                            }
                          }
                        }
                        v312 = v310[3];
                      }
                    }
                  }
                  if (v312 != -4096 && v312 != -8192 && v312 != 0)
                  {
                    v327 = v310[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v327 = v310[2];
                    v328 = (unint64_t *)v310[2];
                    if (v328)
                    {
                      *v328 = *v328 & 7 | v327;
                    }
                    else
                    {
                      v329 = v310[3];
                      v330 = ***(int32x2_t ****)v329;
                      v331 = (unint64_t)v330[303];
                      if (v331 <= v327)
                      {
                        v332 = v330[305].u32[0];
                        if (v331 + 16 * v332 > v327)
                        {
                          v333 = v332 - 1;
                          LODWORD(v334) = v333 & ((v329 >> 4) ^ (v329 >> 9));
                          v335 = (uint64_t *)(v331 + 16 * v334);
                          v336 = *v335;
                          if (v329 != *v335)
                          {
                            v337 = 1;
                            do
                            {
                              if (v336 == -4096)
                                goto LABEL_350;
                              v338 = v334 + v337++;
                              v334 = v338 & v333;
                              v336 = *(_QWORD *)(v331 + 16 * v334);
                            }
                            while (v329 != v336);
                            v335 = (uint64_t *)(v331 + 16 * v334);
                          }
                          *v335 = -8192;
                          v330[304] = vadd_s32(v330[304], (int32x2_t)0x1FFFFFFFFLL);
                          v329 = v310[3];
LABEL_350:
                          *(_BYTE *)(v329 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v310 += 8;
                }
                while (v310 != v311);
                v310 = v776;
              }
              MEMORY[0x1CAA32FB4](v310, 8);
              m = v794 + 1;
            }
          }
LABEL_353:
          v339 = (uint64_t *)v806;
          if (v806 != &v808)
            goto LABEL_354;
          goto LABEL_355;
        }
      }
    }
    sub_1C4773D54((uint64_t)&v771, v92, 0, 0, 0);
    v353 = v10[5] + 272;
    v354 = (uint64_t)a1[26];
    sub_1C4768AD0(v353, v354);
    v356 = (unint64_t)(v355 + 7) >> 3;
    v358 = v357 == 1;
    llvm::DataLayout::getAlignment(v353, v354);
    v362 = (1 << v361) + v356 - 1;
    v363 = -(1 << v361);
    if (v358)
    v364 = v362 & v363;
    v365 = *(llvm::ConstantInt **)(*v779 + 1984);
    v366 = *(_DWORD *)(*v779 + 1992);
    LODWORD(v807) = v366 >> 8;
    if (v366 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v806, v364, 0);
    }
    else
    {
      if (v366 <= 0xFF)
        v367 = 0;
      else
        v367 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v366);
      v806 = (void *)(v367 & v364);
    }
    v368 = (unsigned __int8 *)llvm::ConstantInt::get(v365, (llvm::LLVMContext *)&v806, v360);
    if (v807 >= 0x41 && v806)
      MEMORY[0x1CAA32F9C](v806, 0x1000C8000313F17);
    v369 = (unsigned __int8 *)sub_1C63CE8DC((uint64_t)a1, (uint64_t *)&v771, v368, 0);
    v370 = **a1;
    v809 = 257;
    v93 = sub_1C4773E38((uint64_t *)&v771, 49, v369, v370, (uint64_t)&v806);
    v371 = *(unsigned __int8 **)(v92 - 32 * (*(_DWORD *)(v92 + 20) & 0x7FFFFFF) + 64);
    v372 = llvm::PointerType::get(*(llvm::PointerType **)v93, 0);
    v809 = 257;
    v373 = sub_1C4773E38((uint64_t *)&v771, 49, v371, v372, (uint64_t)&v806);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v777 + 7) + 40) + 272, *(_QWORD *)v93);
    v375 = v374;
    v376 = (char *)operator new(0x80uLL);
    v377 = v376;
    *((_DWORD *)v376 + 21) = *((_DWORD *)v376 + 21) & 0x38000000 | 2;
    *(_QWORD *)v376 = 0;
    *((_QWORD *)v376 + 2) = 0;
    *((_QWORD *)v376 + 1) = 0;
    *((_QWORD *)v376 + 5) = 0;
    *((_QWORD *)v376 + 6) = 0;
    *((_QWORD *)v376 + 4) = 0;
    v378 = (unsigned __int8 **)(v376 + 32);
    *((_QWORD *)v376 + 8) = ***(_QWORD ***)v93 + 1576;
    v379 = (llvm::Value *)(v376 + 64);
    *((_QWORD *)v376 + 3) = v376 + 64;
    *((_QWORD *)v376 + 7) = v376 + 64;
    *((_QWORD *)v376 + 9) = 0;
    v376[80] = 61;
    v376[81] = 0;
    *((_WORD *)v376 + 41) = 0;
    *((_DWORD *)v376 + 21) = 2;
    *(_OWORD *)(v376 + 88) = 0u;
    *(_OWORD *)(v376 + 104) = 0u;
    *((_DWORD *)v376 + 30) = 0;
    *(_QWORD *)v376 = v93;
    v380 = v93 + 8;
    v381 = *((_QWORD *)v93 + 1);
    *((_QWORD *)v376 + 1) = v381;
    if (v381)
      *(_QWORD *)(v381 + 16) = v376 + 8;
    *((_QWORD *)v376 + 2) = v380;
    *v380 = v376;
    if (*((_QWORD *)v376 + 4))
    {
      **((_QWORD **)v376 + 6) = *((_QWORD *)v376 + 5);
      v738 = *((_QWORD *)v376 + 5);
      if (v738)
        *(_QWORD *)(v738 + 16) = *((_QWORD *)v376 + 6);
    }
    *v378 = v373;
    if (v373)
    {
      v384 = *((_QWORD *)v373 + 1);
      v383 = (unsigned __int8 ***)(v373 + 8);
      v382 = v384;
      *((_QWORD *)v376 + 5) = v384;
      if (v384)
        *(_QWORD *)(v382 + 16) = v376 + 40;
      *((_QWORD *)v376 + 6) = v383;
      *v383 = v378;
    }
    *((_WORD *)v376 + 41) = 2 * (v375 & 0x3F);
    v376[124] = 1;
    v809 = 257;
    (*(void (**)(_QWORD *, llvm::Value *, void **, void *, uint64_t))(*v781 + 16))(v781, v379, &v806, v777, v778);
    v385 = (uint64_t *)v771;
    if (!(_DWORD)v772)
    {
LABEL_399:
      v94 = a3;
      if (v385 != &v773)
        free(v385);
      v92 = v748;
      goto LABEL_47;
    }
    v719 = (uint64_t *)((char *)v771 + 16 * v772);
    v720 = (unsigned __int8 **)(v377 + 112);
    while (1)
    {
      v721 = *(_DWORD *)v385;
      v722 = (unsigned __int8 *)v385[1];
      if (v722)
      {
        if (!v721)
        {
          v803[0] = (uint64_t *)v385[1];
          llvm::MetadataTracking::track((uint64_t)v803, v722, 2);
          v723 = *v720;
          goto LABEL_878;
        }
      }
      else
      {
        v723 = *v720;
        if (!*v720 && (v377[87] & 0x20) == 0)
          goto LABEL_875;
        if (!v721)
        {
          v803[0] = 0;
LABEL_878:
          if (v723)
            llvm::MetadataTracking::untrack((uint64_t)(v377 + 112), v723);
          v724 = (unsigned __int8 *)v803[0];
          *v720 = (unsigned __int8 *)v803[0];
          if (v724)
            llvm::MetadataTracking::retrack((uint64_t)v803, v724, (uint64_t)(v377 + 112));
          a1 = (uint64_t **)v763;
          goto LABEL_875;
        }
      }
      llvm::Value::setMetadata(v379, *(_DWORD *)v385, (llvm::MDNode *)v722);
LABEL_875:
      v385 += 2;
      if (v385 == v719)
      {
        v385 = (uint64_t *)v771;
        goto LABEL_399;
      }
    }
  }
  if (v45 == 3)
  {
    v10[14] = llvm::AttributeList::removeAttributeAtIndex(v10 + 14, *(uint64_t **)*v10, -1, 32);
    v10[14] = llvm::AttributeList::removeAttributeAtIndex(v10 + 14, *(uint64_t **)*v10, 0, 19);
    v10[14] = llvm::AttributeList::removeAttributeAtIndex(v10 + 14, *(uint64_t **)*v10, 0, 39);
    v109 = *(_QWORD *)*v10;
    v110 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v109 + 1912), 0);
    v111 = (*a1)[-4 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF)];
    sub_1C4773D54((uint64_t)v803, v111, 0, 0, 0);
    v112 = (unsigned __int8 *)sub_1C603FAC8(v111);
    LOWORD(v775) = 257;
    v113 = sub_1C506D6A8((uint64_t *)v803, v112, v110, (uint64_t)&v771);
    v114 = (llvm::GetElementPtrInst *)(*(_QWORD *)v109 + 1912);
    v115 = *((_DWORD *)a1 + 74);
    v771 = "async.ctx.frameptr";
    LOWORD(v775) = 259;
    v116 = sub_1C4772C18((uint64_t *)v803, v114, v113, v115, (uint64_t)&v771);
    v117 = (uint64_t)a1[29];
    v772 = 0;
    v773 = 0;
    v771 = (void *)6;
    if (v117)
    {
      v773 = v117;
      if ((v117 | 0x1000) != 0xFFFFFFFFFFFFF000)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v771);
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)*a1, (llvm::Value *)v116, (llvm::Value *)1);
    v118 = v773;
    a1[29] = (uint64_t *)v773;
    v119 = a3;
    if (v118 != -8192 && v118 != -4096 && v118)
    {
      v120 = (unint64_t)v771 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v771 & 0xFFFFFFFFFFFFFFF8) = v772;
      if (v772)
      {
        *(_QWORD *)v772 = *(_QWORD *)v772 & 7 | v120;
      }
      else
      {
        v121 = v773;
        v122 = ***(int32x2_t ****)v773;
        v123 = (unint64_t)v122[303];
        if (v123 <= v120)
        {
          v124 = v122[305].u32[0];
          if (v123 + 16 * v124 > v120)
          {
            v125 = v124 - 1;
            LODWORD(v126) = v125 & ((v773 >> 4) ^ (v773 >> 9));
            v127 = (uint64_t *)(v123 + 16 * v126);
            v128 = *v127;
            if (v773 != *v127)
            {
              v129 = 1;
              do
              {
                if (v128 == -4096)
                  goto LABEL_78;
                v130 = v126 + v129++;
                v126 = v130 & v125;
                v128 = *(_QWORD *)(v123 + 16 * v126);
              }
              while (v773 != v128);
              v127 = (uint64_t *)(v123 + 16 * v126);
            }
            *v127 = -8192;
            v122[304] = vadd_s32(v122[304], (int32x2_t)0x1FFFFFFFFLL);
            v121 = v773;
LABEL_78:
            *(_BYTE *)(v121 + 17) &= ~1u;
          }
        }
      }
    }
    v757 = (uint64_t *)v10[8];
    v386 = *((unsigned int *)a1 + 32);
    if (*(_DWORD *)(a3 + 12) < v386)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v386, 8);
      LODWORD(v386) = *((_DWORD *)a1 + 32);
    }
    v768 = 0;
    if (!(_DWORD)v386)
      goto LABEL_535;
    v387 = 0;
    v749 = v386;
    v741 = (uint64_t)(v10 + 9);
    while (1)
    {
      v388 = *(_QWORD *)(*(_QWORD *)v764 + 8 * v387);
      v389 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v388 - 32 * (*(_DWORD *)(v388 + 20) & 0x7FFFFFF) + 64));
      if ((*((_BYTE *)v389 + 23) & 0x10) != 0)
      {
        v390 = ***(_QWORD ***)v389;
        v391 = *(_QWORD *)(v390 + 152);
        v392 = *(unsigned int *)(v390 + 168);
        if ((_DWORD)v392)
        {
          LODWORD(v393) = (v392 - 1) & ((v389 >> 4) ^ (v389 >> 9));
          v394 = (llvm::Value **)(v391 + 16 * v393);
          v395 = *v394;
          if (*v394 != v389)
          {
            v396 = 1;
            do
            {
              if (v395 == (llvm::Value *)-4096)
                goto LABEL_414;
              v397 = v393 + v396++;
              v393 = v397 & (v392 - 1);
              v395 = *(llvm::Value **)(v391 + 16 * v393);
            }
            while (v395 != v389);
            v394 = (llvm::Value **)(v391 + 16 * v393);
          }
        }
        else
        {
LABEL_414:
          v394 = (llvm::Value **)(v391 + 16 * v392);
        }
        v398 = v394[1];
        v401 = *(_QWORD *)v398;
        v399 = (unint64_t *)((char *)v398 + 16);
        v400 = v401;
        if (v401 == 32)
        {
          v403 = 0x5F5F73776966745FLL;
          v404 = bswap64(*v399);
          if (v404 == 0x5F5F73776966745FLL
            && (v403 = 0x6173796E635F7265, v404 = bswap64(v399[1]), v404 == 0x6173796E635F7265)
            && (v403 = 0x73756D655F676574, v404 = bswap64(v399[2]), v404 == 0x73756D655F676574)
            && (v403 = 0x5F636F6E74657874, v404 = bswap64(v399[3]), v404 == 0x5F636F6E74657874))
          {
            v405 = 0;
          }
          else if (v404 < v403)
          {
            v405 = -1;
          }
          else
          {
            v405 = 1;
          }
          v402 = "TY";
          if (!v405)
            goto LABEL_428;
        }
        else if (v400 == 36 && !memcmp(v399, "__swift_async_resume_project_context", 0x24uLL))
        {
          v402 = "TQ";
LABEL_428:
          if (*v402)
          {
            v406 = &v806;
            *(_QWORD *)&v808 = &v768;
            v409 = 2;
            v407 = 10;
            v408 = 3;
          }
          else
          {
            v406 = (void **)&v768;
            v808 = v794;
            v810 = (int)v791;
            v811 = WORD2(v791);
            v407 = 1;
            v408 = 10;
            v402 = (char *)&v768;
            v409 = 10;
          }
          v806 = v402;
          LOBYTE(v809) = v408;
          v411 = 3;
          v410 = "_";
          HIBYTE(v809) = v407;
          goto LABEL_433;
        }
      }
      v410 = (const char *)&v768;
      v411 = 10;
      v409 = 3;
      v406 = (void **)".resume.";
LABEL_433:
      v771 = v406;
      v773 = (uint64_t)v410;
      LOBYTE(v775) = v409;
      BYTE1(v775) = v411;
      v412 = (unsigned __int8 *)sub_1C605D724((uint64_t ***)v10, (uint64_t)a1, (uint64_t *)&v771, v757, (_QWORD *)v388);
      v413 = *(unsigned int *)(v119 + 8);
      if (v413 >= *(unsigned int *)(v119 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v119, a3 + 16, v413 + 1, 8);
        v413 = *(unsigned int *)(v119 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v119 + 8 * v413) = v412;
      ++*(_DWORD *)(v119 + 8);
      v414 = *(uint64_t **)(v388 + 40);
      LOWORD(v775) = 257;
      v415 = llvm::BasicBlock::splitBasicBlock(v414, (uint64_t *)(v388 + 24), (uint64_t)&v771, 0);
      v416 = (uint64_t *)v414[5];
      if (v416 == v414 + 5)
      {
        v417 = 0;
      }
      else
      {
        if (v416)
          v418 = v416 - 3;
        else
          v418 = 0;
        if (*((unsigned __int8 *)v418 + 16) - 29 >= 0xB)
          v417 = 0;
        else
          v417 = v418;
      }
      v419 = *(_QWORD **)*v10;
      v771 = "coro.return";
      LOWORD(v775) = 259;
      v420 = (uint64_t **)operator new();
      *v420 = (uint64_t *)(*v419 + 1600);
      v420[1] = 0;
      v421 = *((_DWORD *)v420 + 5) & 0xC0000000;
      *((_DWORD *)v420 + 4) = 22;
      *((_DWORD *)v420 + 5) = v421;
      v420[3] = 0;
      v422 = v420 + 3;
      v420[4] = 0;
      v420[5] = (uint64_t *)(v420 + 5);
      v420[6] = (uint64_t *)(v420 + 5);
      v420[7] = 0;
      if (v415)
        v423 = (uint64_t *)(v415 + 24);
      else
        v423 = (uint64_t *)v741;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v741, v420);
      v424 = *v423;
      v420[4] = v423;
      *v422 = v424;
      *(_QWORD *)(v424 + 8) = v422;
      *v423 = (uint64_t)v422;
      llvm::Value::setName((uint64_t ***)v420, (uint64_t)&v771);
      if (*(v417 - 4))
      {
        *(_QWORD *)*(v417 - 2) = *(v417 - 3);
        v425 = *(v417 - 3);
        if (v425)
          *(_QWORD *)(v425 + 16) = *(v417 - 2);
      }
      *(v417 - 4) = (uint64_t)v420;
      v426 = v420[1];
      *(v417 - 3) = (uint64_t)v426;
      if (v426)
        v426[2] = (uint64_t)(v417 - 3);
      *(v417 - 2) = (uint64_t)(v420 + 1);
      v420[1] = v417 - 4;
      v427 = **v420;
      *(_QWORD *)&v794 = v795;
      *((_QWORD *)&v794 + 1) = 0x200000000;
      v795[6] = v427;
      v795[7] = &v801;
      v795[8] = &v802;
      v795[9] = 0;
      v796 = 0;
      v797 = 512;
      v798 = 7;
      v799 = 0;
      v800 = 0;
      v801 = &unk_1E8167888;
      v802 = &unk_1E8167A08;
      v795[4] = v420;
      v795[5] = v420 + 5;
      v428 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v388 - 32 * (*(_DWORD *)(v388 + 20) & 0x7FFFFFF) + 96));
      v429 = 0;
      v430 = *(_DWORD *)(v388 + 20);
      v431 = *(unsigned __int8 *)(v388 + 16);
      if (v431 != 84)
      {
        if (v431 == 39)
          v429 = (*(_DWORD *)(v388 + 80) + 1);
        else
          v429 = 2;
      }
      v432 = v430 & 0x7FFFFFF;
      v433 = (_QWORD *)(v388 - 32 * v432);
      v434 = (unsigned __int8 **)v793;
      if (v430 < 0)
      {
        v459 = *(v433 - 1);
        if ((v459 & 0xFFFFFFFF0) != 0)
          v435 = (*((_DWORD *)v433 - 3) - *(_DWORD *)((char *)v433 - v459));
        else
          v435 = 0;
        v434 = (unsigned __int8 **)v793;
      }
      else
      {
        v435 = 0;
      }
      v436 = v388 - 32 * v429 - 32 * v435 - 32;
      v791 = v793;
      v792 = 0x800000000;
      v437 = v436 - (_QWORD)v433;
      if ((unint64_t)(v436 - (_QWORD)v433) >= 0x101)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v791, (uint64_t)v793, v437 >> 5, 8);
        v438 = v792;
        v434 = (unsigned __int8 **)v791;
        v439 = v792;
      }
      else
      {
        v438 = 0;
        v439 = 0;
      }
      if (v433 == (_QWORD *)v436)
      {
        a1 = (uint64_t **)v763;
        v10 = (uint64_t *)v754;
      }
      else
      {
        v440 = &v434[v438];
        v441 = 32 * v432 - 32 * v429 - 32 * v435 - 32;
        v10 = (uint64_t *)v754;
        do
        {
          v442 = (unsigned __int8 *)*v433;
          v433 += 4;
          *v440++ = v442;
          v441 -= 32;
        }
        while (v441);
        v434 = (unsigned __int8 **)v791;
        a1 = (uint64_t **)v763;
      }
      v443 = v439 + ((unint64_t)v437 >> 5);
      LODWORD(v792) = v439 + ((unint64_t)v437 >> 5);
      v444 = *(unsigned __int8 **)(v388 + 48);
      v767 = v444;
      if (v444)
        llvm::MetadataTracking::track((uint64_t)&v767, v444, 2);
      v445 = (uint64_t ***)sub_1C63CFAB4(&v767, (uint64_t)v428, v434 + 4, v443 - 4, (uint64_t *)&v794);
      if (v767)
        llvm::MetadataTracking::untrack((uint64_t)&v767, v767);
      LLVMBuildRetVoid_0((uint64_t *)&v794);
      v771 = 0;
      v772 = 0;
      v775 = 0;
      v776 = 0;
      v774 = 0;
      v777 = &v779;
      v778 = 0x400000000;
      v783 = (char *)&v785;
      v784 = (void *)0x800000000;
      v788 = v790;
      v789 = 0x800000000;
      v790[64] = 1;
      llvm::InlineFunction(v445, (uint64_t)&v771, 0, 1, 0);
      v446 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v388 - 32 * (*(_DWORD *)(v388 + 20) & 0x7FFFFFF) + 32));
      v447 = (llvm::UndefValue *)llvm::PointerType::get((llvm::PointerType *)(****(_QWORD ****)(*(_QWORD *)(v388 + 40) + 56) + 1912), 0);
      sub_1C4773D54((uint64_t)&v806, (uint64_t)v446, 0, 0, 0);
      v770 = 257;
      v448 = sub_1C506D6A8((uint64_t *)&v806, v412, (uint64_t)v447, (uint64_t)v769);
      llvm::Value::doRAUW(v446, (llvm::Value *)v448, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v446 + 5) + 40, (uint64_t ***)v446);
      v449 = *((_QWORD *)v446 + 3);
      v450 = (_QWORD *)*((_QWORD *)v446 + 4);
      *v450 = v449;
      *(_QWORD *)(v449 + 8) = v450;
      *((_QWORD *)v446 + 3) = 0;
      *((_QWORD *)v446 + 4) = 0;
      llvm::Value::deleteValue(v446);
      v452 = llvm::UndefValue::get(v447, v451);
      v453 = v388 - 32 * (*(_DWORD *)(v388 + 20) & 0x7FFFFFF);
      v454 = (llvm::UndefValue **)(v453 + 32);
      if (*(_QWORD *)(v453 + 32))
      {
        **(_QWORD **)(v453 + 48) = *(_QWORD *)(v453 + 40);
        v455 = *(_QWORD *)(v453 + 40);
        if (v455)
          *(_QWORD *)(v455 + 16) = *(_QWORD *)(v453 + 48);
      }
      *v454 = v452;
      v119 = a3;
      if (v452)
      {
        v458 = *((_QWORD *)v452 + 1);
        v456 = (llvm::UndefValue ***)((char *)v452 + 8);
        v457 = v458;
        *(_QWORD *)(v453 + 40) = v458;
        if (v458)
          *(_QWORD *)(v457 + 16) = v453 + 40;
        *(_QWORD *)(v453 + 48) = v456;
        *v456 = v454;
      }
      if (v806 != &v808)
        free(v806);
      if (v788 != v790)
        free(v788);
      sub_1C52768FC(&v783);
      if (v777 != &v779)
        free(v777);
      if (v791 != v793)
        free(v791);
      if ((_QWORD *)v794 != v795)
        free((void *)v794);
      v387 = v768 + 1;
      v768 = v387;
      if (v387 == v749)
      {
        v460 = *((unsigned int *)a1 + 32);
        *(_QWORD *)&v794 = 0;
        if ((_DWORD)v460)
        {
          for (n = 0; n != v460; *(_QWORD *)&v794 = n)
          {
            v462 = a1[15][n];
            v463 = *(_QWORD *)(*(_QWORD *)a3 + 8 * n);
            v806 = "resume.";
            *(_QWORD *)&v808 = &v794;
            v809 = 2563;
            sub_1C605E4AC((uint64_t)&v771, v754, (uint64_t)&v806, (uint64_t)a1, v463, v462);
            sub_1C605A6FC((uint64_t)&v771);
            if (v784 != &v786)
              free(v784);
            if ((_BYTE)v782)
            {
              sub_1C4E43068((uint64_t)&v779);
              MEMORY[0x1CAA32FB4](v779, 8);
              LOBYTE(v782) = 0;
            }
            v464 = v776;
            if ((_DWORD)v778)
            {
              v465 = &v776[8 * (unint64_t)v778];
              do
              {
                v466 = v464[3];
                if ((v466 | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  v467 = v464[7];
                  if (v467)
                  {
                    if (v467 != -8192 && v467 != -4096)
                    {
                      v468 = v464[5] & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v468 = v464[6];
                      v469 = (unint64_t *)v464[6];
                      if (v469)
                      {
                        *v469 = *v469 & 7 | v468;
                      }
                      else
                      {
                        v470 = v464[7];
                        v471 = ***(int32x2_t ****)v470;
                        v472 = (unint64_t)v471[303];
                        if (v472 <= v468)
                        {
                          v473 = v471[305].u32[0];
                          if (v472 + 16 * v473 > v468)
                          {
                            v474 = v473 - 1;
                            LODWORD(v475) = v474 & ((v470 >> 4) ^ (v470 >> 9));
                            v476 = (uint64_t *)(v472 + 16 * v475);
                            v477 = *v476;
                            if (v470 != *v476)
                            {
                              v478 = 1;
                              do
                              {
                                if (v477 == -4096)
                                  goto LABEL_513;
                                v479 = v475 + v478++;
                                v475 = v479 & v474;
                                v477 = *(_QWORD *)(v472 + 16 * v475);
                              }
                              while (v470 != v477);
                              v476 = (uint64_t *)(v472 + 16 * v475);
                            }
                            *v476 = -8192;
                            v471[304] = vadd_s32(v471[304], (int32x2_t)0x1FFFFFFFFLL);
                            v470 = v464[7];
LABEL_513:
                            *(_BYTE *)(v470 + 17) &= ~1u;
                          }
                        }
                      }
                      v466 = v464[3];
                    }
                  }
                }
                if (v466 != -4096 && v466 != -8192 && v466 != 0)
                {
                  v481 = v464[1] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v481 = v464[2];
                  v482 = (unint64_t *)v464[2];
                  if (v482)
                  {
                    *v482 = *v482 & 7 | v481;
                  }
                  else
                  {
                    v483 = v464[3];
                    v484 = ***(int32x2_t ****)v483;
                    v485 = (unint64_t)v484[303];
                    if (v485 <= v481)
                    {
                      v486 = v484[305].u32[0];
                      if (v485 + 16 * v486 > v481)
                      {
                        v487 = v486 - 1;
                        LODWORD(v488) = v487 & ((v483 >> 4) ^ (v483 >> 9));
                        v489 = (uint64_t *)(v485 + 16 * v488);
                        v490 = *v489;
                        if (v483 != *v489)
                        {
                          v491 = 1;
                          do
                          {
                            if (v490 == -4096)
                              goto LABEL_532;
                            v492 = v488 + v491++;
                            v488 = v492 & v487;
                            v490 = *(_QWORD *)(v485 + 16 * v488);
                          }
                          while (v483 != v490);
                          v489 = (uint64_t *)(v485 + 16 * v488);
                        }
                        *v489 = -8192;
                        v484[304] = vadd_s32(v484[304], (int32x2_t)0x1FFFFFFFFLL);
                        v483 = v464[3];
LABEL_532:
                        *(_BYTE *)(v483 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v464 += 8;
              }
              while (v464 != v465);
              v464 = v776;
            }
            MEMORY[0x1CAA32FB4](v464, 8);
            n = v794 + 1;
          }
        }
LABEL_535:
        v339 = v803[0];
        if ((__int128 **)v803[0] != &v804)
LABEL_354:
          free(v339);
LABEL_355:
        v10 = (uint64_t *)v754;
        goto LABEL_356;
      }
    }
  }
  if (v45)
    goto LABEL_356;
  v46 = *(llvm::ConstantTokenNone **)*v10;
  v771 = "resume.entry";
  LOWORD(v775) = 259;
  v47 = (uint64_t ***)operator new();
  *v47 = (uint64_t **)(*(_QWORD *)v46 + 1600);
  v47[1] = 0;
  v48 = *((_DWORD *)v47 + 5) & 0xC0000000;
  *((_DWORD *)v47 + 4) = 22;
  *((_DWORD *)v47 + 5) = v48;
  v47[3] = 0;
  v47[4] = 0;
  v47[5] = (uint64_t **)(v47 + 5);
  v47[6] = (uint64_t **)(v47 + 5);
  v47[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v10 + 9), v47);
  v49 = (uint64_t **)v10[9];
  v47[4] = (uint64_t **)(v10 + 9);
  v47[3] = v49;
  v49[1] = (uint64_t *)(v47 + 3);
  v10[9] = (uint64_t)(v47 + 3);
  llvm::Value::setName(v47, (uint64_t)&v771);
  v771 = "unreachable";
  LOWORD(v775) = 259;
  v50 = operator new();
  v765 = v46;
  *(_QWORD *)v50 = *(_QWORD *)v46 + 1600;
  *(_QWORD *)(v50 + 8) = 0;
  v51 = *(_DWORD *)(v50 + 20) & 0xC0000000;
  *(_DWORD *)(v50 + 16) = 22;
  *(_DWORD *)(v50 + 20) = v51;
  *(_QWORD *)(v50 + 24) = 0;
  *(_QWORD *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 40) = v50 + 40;
  v744 = v50 + 40;
  *(_QWORD *)(v50 + 48) = v50 + 40;
  *(_QWORD *)(v50 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v10 + 9), (_QWORD *)v50);
  v52 = (_QWORD **)v10[9];
  *(_QWORD *)(v50 + 32) = v10 + 9;
  *(_QWORD *)(v50 + 24) = v52;
  v52[1] = (_QWORD *)(v50 + 24);
  v10[9] = v50 + 24;
  llvm::Value::setName((uint64_t ***)v50, (uint64_t)&v771);
  v53 = **v47;
  v771 = &v773;
  v772 = (llvm::Type *)0x200000000;
  v779 = v53;
  v780 = &v786;
  v781 = v787;
  v782 = 0;
  LODWORD(v783) = 0;
  WORD2(v783) = 512;
  BYTE6(v783) = 7;
  v784 = 0;
  v785 = 0;
  v786 = &unk_1E8167888;
  v787[0] = &unk_1E8167A08;
  v777 = v47;
  v778 = (uint64_t)(v47 + 5);
  v54 = (uint64_t **)a1[29];
  v55 = (llvm::GetElementPtrInst *)a1[26];
  v56 = *((_DWORD *)a1 + 70);
  v806 = "index.addr";
  v809 = 259;
  v746 = v47;
  v750 = v55;
  v759 = v54;
  v57 = sub_1C5391F90((uint64_t *)&v771, v55, v54, 0, v56, (uint64_t)&v806);
  v58 = *(_QWORD *)(a1[26][2] + 8 * *((unsigned int *)a1 + 70));
  v803[0] = (uint64_t *)"index";
  v805 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v777 + 7) + 40) + 272, v58);
  v60 = v59;
  v61 = (char *)operator new(0x60uLL);
  v62 = v61;
  v63 = (llvm::Value *)(v61 + 32);
  *((_QWORD *)v61 + 2) = 0;
  *((_QWORD *)v61 + 3) = v61 + 32;
  v809 = 257;
  *((_QWORD *)v61 + 4) = v58;
  *((_QWORD *)v61 + 5) = 0;
  *((_WORD *)v61 + 24) = 60;
  *((_DWORD *)v61 + 13) = 1;
  *(_OWORD *)(v61 + 56) = 0u;
  *(_OWORD *)(v61 + 72) = 0u;
  *((_DWORD *)v61 + 22) = 0;
  *(_QWORD *)v61 = v57;
  *((_QWORD *)v61 + 1) = 0;
  if (v57)
  {
    v66 = v57[1];
    v65 = v57 + 1;
    v64 = v66;
    *((_QWORD *)v61 + 1) = v66;
    if (v66)
      v64[2] = (uint64_t *)(v61 + 8);
    *((_QWORD *)v61 + 2) = v65;
    *v65 = v61;
  }
  *((_WORD *)v61 + 25) = 2 * (v60 & 0x3F);
  v61[92] = 1;
  llvm::Value::setName((uint64_t ***)v61 + 4, (uint64_t)&v806);
  (*(void (**)(_QWORD *, llvm::Value *, uint64_t **, void *, uint64_t))(*v781 + 16))(v781, v63, v803, v777, v778);
  if ((_DWORD)v772)
  {
    v712 = (char *)v771;
    v713 = (char *)v771 + 16 * v772;
    v714 = (unsigned __int8 **)(v62 + 80);
    do
    {
      v715 = *(_DWORD *)v712;
      v716 = (unsigned __int8 *)*((_QWORD *)v712 + 1);
      if (v716)
      {
        if (!v715)
        {
          *(_QWORD *)&v794 = *((_QWORD *)v712 + 1);
          llvm::MetadataTracking::track((uint64_t)&v794, v716, 2);
          v717 = *v714;
          goto LABEL_862;
        }
      }
      else
      {
        v717 = *v714;
        if (!*v714 && (v62[55] & 0x20) == 0)
          goto LABEL_859;
        if (!v715)
        {
          *(_QWORD *)&v794 = 0;
LABEL_862:
          if (v717)
            llvm::MetadataTracking::untrack((uint64_t)(v62 + 80), v717);
          v718 = (unsigned __int8 *)v794;
          *v714 = (unsigned __int8 *)v794;
          if (v718)
            llvm::MetadataTracking::retrack((uint64_t)&v794, v718, (uint64_t)(v62 + 80));
          a1 = (uint64_t **)v763;
          goto LABEL_859;
        }
      }
      llvm::Value::setMetadata(v63, *(_DWORD *)v712, (llvm::MDNode *)v716);
LABEL_859:
      v712 += 16;
    }
    while (v712 != v713);
  }
  v67 = *((_DWORD *)a1 + 32);
  v68 = (char *)operator new(0x48uLL);
  *((_DWORD *)v68 + 7) = *((_DWORD *)v68 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v68 = 0;
  *((_QWORD *)v68 + 1) = ***(_QWORD ***)v63 + 1576;
  v69 = (llvm::Value *)(v68 + 8);
  *((_QWORD *)v68 + 2) = 0;
  v68[24] = 31;
  v68[25] = 0;
  *((_WORD *)v68 + 13) = 0;
  *((_DWORD *)v68 + 7) = 0x40000000;
  *((_DWORD *)v68 + 16) = 0;
  *((_OWORD *)v68 + 2) = 0u;
  *((_OWORD *)v68 + 3) = 0u;
  llvm::SwitchInst::init((uint64_t)(v68 + 8), (uint64_t)v63, v50, 2 * v67 + 2);
  v809 = 257;
  (*(void (**)(_QWORD *, char *, void **, void *, uint64_t))(*v781 + 16))(v781, v68 + 8, &v806, v777, v778);
  v71 = v754;
  if ((_DWORD)v772)
  {
    v493 = (char *)v771;
    v494 = (char *)v771 + 16 * v772;
    v495 = (unsigned __int8 **)(v68 + 56);
    do
    {
      v496 = *(_DWORD *)v493;
      v70 = (unsigned __int8 *)*((_QWORD *)v493 + 1);
      if (v70)
      {
        if (!v496)
        {
          v803[0] = *((uint64_t **)v493 + 1);
          llvm::MetadataTracking::track((uint64_t)v803, v70, 2);
          v497 = *v495;
          goto LABEL_548;
        }
      }
      else
      {
        v497 = *v495;
        if (!*v495 && (v68[31] & 0x20) == 0)
          goto LABEL_545;
        if (!v496)
        {
          v803[0] = 0;
LABEL_548:
          if (v497)
            llvm::MetadataTracking::untrack((uint64_t)(v68 + 56), v497);
          v498 = (unsigned __int8 *)v803[0];
          *v495 = (unsigned __int8 *)v803[0];
          if (v498)
            llvm::MetadataTracking::retrack((uint64_t)v803, v498, (uint64_t)(v68 + 56));
          goto LABEL_545;
        }
      }
      llvm::Value::setMetadata(v69, *(_DWORD *)v493, (llvm::MDNode *)v70);
LABEL_545:
      v493 += 16;
    }
    while (v493 != v494);
  }
  v745 = (void *)v50;
  *(_QWORD *)(v763 + 256) = v69;
  *(_QWORD *)&v794 = 0;
  v72 = *(unsigned int *)(v763 + 128);
  if ((_DWORD)v72)
  {
    v499 = 0;
    v500 = *(uint64_t **)(v763 + 120);
    v758 = &v500[v72];
    while (1)
    {
      v501 = *v500;
      v502 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v763 + 208) + 16) + 8 * *(unsigned int *)(v763 + 280));
      v503 = *(llvm::ConstantInt **)v502;
      v504 = *(unsigned int *)(v502 + 8);
      LODWORD(v807) = v504 >> 8;
      if (v504 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v806, v499, 0);
      }
      else
      {
        if (v504 <= 0xFF)
          v505 = 0;
        else
          v505 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v504);
        v806 = (void *)(v505 & v499);
      }
      v506 = (uint64_t *)llvm::ConstantInt::get(v503, (llvm::LLVMContext *)&v806, (const llvm::APInt *)v70);
      if (v807 >= 0x41 && v806)
        MEMORY[0x1CAA32F9C](v806, 0x1000C8000313F17);
      v507 = *(_QWORD *)(v501 - 32 * (*(_DWORD *)(v501 + 20) & 0x7FFFFFF));
      v508 = sub_1C6040094(v507);
      v509 = 0;
      if (v508)
        v510 = v507;
      else
        v510 = 0;
      v777 = *(void **)(v510 + 40);
      v778 = v510 + 24;
      v511 = *(void **)(v510 + 48);
      v806 = v511;
      if (v511)
      {
        llvm::MetadataTracking::track((uint64_t)&v806, (unsigned __int8 *)v511, 2);
        v509 = v806;
      }
      sub_1C4774EF4((uint64_t)&v771, 0, (uint64_t)v509);
      if (v806)
        llvm::MetadataTracking::untrack((uint64_t)&v806, (unsigned __int8 *)v806);
      if (llvm::Constant::isOneValue(*(llvm::Constant **)(v501 - 32 * (*(_DWORD *)(v501 + 20) & 0x7FFFFFF) + 32)))
      {
        sub_1C605A4CC((uint64_t)&v771, v763, v759);
        goto LABEL_576;
      }
      v513 = *(_DWORD *)(v763 + 280);
      v806 = "index.addr";
      v809 = 259;
      v514 = sub_1C5391F90((uint64_t *)&v771, v750, v759, 0, v513, (uint64_t)&v806);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v777 + 7) + 40) + 272, *v506);
      v516 = v515;
      v517 = (char *)operator new(0x80uLL);
      v518 = v517;
      *((_DWORD *)v517 + 21) = *((_DWORD *)v517 + 21) & 0x38000000 | 2;
      *(_QWORD *)v517 = 0;
      *((_QWORD *)v517 + 2) = 0;
      *((_QWORD *)v517 + 1) = 0;
      *((_QWORD *)v517 + 5) = 0;
      *((_QWORD *)v517 + 6) = 0;
      *((_QWORD *)v517 + 4) = 0;
      v519 = (uint64_t ****)(v517 + 32);
      *((_QWORD *)v517 + 8) = **(_QWORD **)*v506 + 1576;
      v520 = (llvm::Value *)(v517 + 64);
      *((_QWORD *)v517 + 3) = v517 + 64;
      *((_QWORD *)v517 + 7) = v517 + 64;
      *((_QWORD *)v517 + 9) = 0;
      v517[80] = 61;
      v517[81] = 0;
      *((_WORD *)v517 + 41) = 0;
      *((_DWORD *)v517 + 21) = 2;
      *(_OWORD *)(v517 + 88) = 0u;
      *(_OWORD *)(v517 + 104) = 0u;
      *((_DWORD *)v517 + 30) = 0;
      *(_QWORD *)v517 = v506;
      v521 = v506 + 1;
      v522 = v506[1];
      *((_QWORD *)v517 + 1) = v522;
      if (v522)
        *(_QWORD *)(v522 + 16) = v517 + 8;
      *((_QWORD *)v517 + 2) = v521;
      *v521 = v517;
      if (*((_QWORD *)v517 + 4))
      {
        **((_QWORD **)v517 + 6) = *((_QWORD *)v517 + 5);
        v577 = *((_QWORD *)v517 + 5);
        if (v577)
          *(_QWORD *)(v577 + 16) = *((_QWORD *)v517 + 6);
      }
      *v519 = v514;
      if (v514)
      {
        v525 = v514[1];
        v524 = (uint64_t *****)(v514 + 1);
        v523 = v525;
        *((_QWORD *)v517 + 5) = v525;
        if (v525)
          v523[2] = (uint64_t *)(v517 + 40);
        *((_QWORD *)v517 + 6) = v524;
        *v524 = v519;
      }
      *((_WORD *)v517 + 41) = 2 * (v516 & 0x3F);
      v517[124] = 1;
      v809 = 257;
      (*(void (**)(_QWORD *, llvm::Value *, void **, void *, uint64_t))(*v781 + 16))(v781, v520, &v806, v777, v778);
      if ((_DWORD)v772)
        break;
LABEL_576:
      v526 = (llvm::Value *)llvm::ConstantTokenNone::get(v765, (llvm::LLVMContext *)v512);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v510, v526, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v510 + 40) + 40, (uint64_t ***)v510);
      v527 = *(_QWORD *)(v510 + 24);
      v528 = *(_QWORD **)(v510 + 32);
      *v528 = v527;
      *(_QWORD *)(v527 + 8) = v528;
      *(_QWORD *)(v510 + 24) = 0;
      *(_QWORD *)(v510 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v510);
      v529 = *(uint64_t **)(v501 + 40);
      v806 = "resume.";
      *(_QWORD *)&v808 = &v794;
      v809 = 2563;
      v530 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v529, (uint64_t *)(v501 + 24), (uint64_t)&v806, 0);
      v531 = (llvm::BasicBlock *)v530;
      v532 = *(_QWORD *)(v501 + 32);
      if (v532)
        v533 = v532 == *(_QWORD *)(v501 + 40) + 40;
      else
        v533 = 1;
      if (v533)
        v534 = 0;
      else
        v534 = v532 - 24;
      if ((*((_BYTE *)v530 + 23) & 0x10) == 0)
      {
        v544 = 0;
        v545 = &byte_1C871356D;
        goto LABEL_591;
      }
      v535 = **(_QWORD **)*v530;
      v536 = *(_QWORD *)(v535 + 152);
      v537 = *(unsigned int *)(v535 + 168);
      if (!(_DWORD)v537)
        goto LABEL_589;
      LODWORD(v538) = (v537 - 1) & ((v530 >> 4) ^ (v530 >> 9));
      v539 = (uint64_t **)(v536 + 16 * v538);
      v540 = *v539;
      if (*v539 != v530)
      {
        v541 = 1;
        while (v540 != (uint64_t *)-4096)
        {
          v542 = v538 + v541++;
          v538 = v542 & (v537 - 1);
          v540 = *(uint64_t **)(v536 + 16 * v538);
          if (v540 == v530)
          {
            v539 = (uint64_t **)(v536 + 16 * v538);
            goto LABEL_590;
          }
        }
LABEL_589:
        v539 = (uint64_t **)(v536 + 16 * v537);
      }
LABEL_590:
      v543 = v539[1];
      v546 = *v543;
      v545 = (char *)(v543 + 2);
      v544 = v546;
LABEL_591:
      v806 = v545;
      v807 = v544;
      *(_QWORD *)&v808 = ".landing";
      v809 = 773;
      v547 = llvm::BasicBlock::splitBasicBlock(v530, (uint64_t *)(v534 + 24), (uint64_t)&v806, 0);
      llvm::SwitchInst::addCase(v69, (llvm::ConstantInt *)v506, v531);
      v548 = (uint64_t *)v529[5];
      if (v548 == v529 + 5)
      {
        v549 = 0;
      }
      else
      {
        if (v548)
          v549 = v548 - 3;
        else
          v549 = 0;
        if (*((unsigned __int8 *)v549 + 16) - 29 >= 0xB)
          v549 = 0;
      }
      v550 = v549 - 4;
      if (*(v549 - 4))
      {
        *(_QWORD *)*(v549 - 2) = *(v549 - 3);
        v551 = *(v549 - 3);
        if (v551)
          *(_QWORD *)(v551 + 16) = *(v549 - 2);
      }
      *v550 = v547;
      if (v547)
      {
        v552 = (uint64_t **)(v547 + 8);
        v553 = *(_QWORD *)(v547 + 8);
        *(v549 - 3) = v553;
        if (v553)
          *(_QWORD *)(v553 + 16) = v549 - 3;
        *(v549 - 2) = (uint64_t)v552;
        *v552 = v550;
      }
      v554 = *v779 + 1912;
      v809 = 257;
      v555 = *(uint64_t **)(v547 + 48);
      v556 = operator new(0x48uLL);
      v557 = v556;
      v556[1] = v554;
      v558 = (llvm::Value *)(v556 + 1);
      *v556 = 0;
      v556[2] = 0;
      v556[3] = 0x4000000000000053;
      *((_OWORD *)v556 + 2) = 0u;
      v559 = (char *)(v556 + 4);
      *((_OWORD *)v556 + 3) = 0u;
      *((_DWORD *)v556 + 16) = 0;
      if (v555)
      {
        v568 = v555[2];
        v556[6] = v568;
        *(_WORD *)(v568 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v556 + 31) & 0x10) != 0)
        {
          v575 = *(_QWORD *)(v568 + 56);
          if (v575)
          {
            v576 = *(llvm::ValueSymbolTable **)(v575 + 104);
            if (v576)
              llvm::ValueSymbolTable::reinsertValue(v576, v558);
          }
        }
        v569 = *v555;
        v557[4] = *v555;
        v557[5] = v555;
        *(_QWORD *)(v569 + 8) = v559;
        *v555 = (uint64_t)v559;
      }
      *((_DWORD *)v557 + 17) = 2;
      llvm::Value::setName((uint64_t ***)v558, (uint64_t)&v806);
      v560 = *((unsigned int *)v557 + 17);
      v561 = operator new(40 * v560);
      *v557 = v561;
      if ((_DWORD)v560)
      {
        v562 = &v561[4 * v560];
        do
        {
          *v561 = 0;
          v561[1] = 0;
          v561[2] = 0;
          v561[3] = v558;
          v561 += 4;
        }
        while (v561 != v562);
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v501, v558, (llvm::Value *)1);
      v564 = *(llvm::ConstantInt **)(*v779 + 1912);
      v565 = *(_DWORD *)(*v779 + 1920);
      LODWORD(v807) = v565 >> 8;
      if (v565 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v806, 255, 0);
      }
      else
      {
        if (v565 <= 0xFF)
          v566 = 0;
        else
          v566 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v565);
        v806 = (void *)v566;
      }
      v567 = llvm::ConstantInt::get(v564, (llvm::LLVMContext *)&v806, v563);
      if (v807 >= 0x41 && v806)
        MEMORY[0x1CAA32F9C](v806, 0x1000C8000313F17);
      sub_1C477667C(v558, (uint64_t)v567, (uint64_t)v529);
      sub_1C477667C(v558, v501, (uint64_t)v531);
      v499 = v794 + 1;
      *(_QWORD *)&v794 = v794 + 1;
      ++v500;
      v71 = v754;
      if (v500 == v758)
        goto LABEL_26;
    }
    v570 = (char *)v771;
    v571 = (char *)v771 + 16 * v772;
    v572 = (uint64_t **)(v518 + 112);
    while (1)
    {
      v573 = *(_DWORD *)v570;
      v574 = (unsigned __int8 *)*((_QWORD *)v570 + 1);
      if (v574)
      {
        v743 = v571;
        if (!v573)
        {
          v803[0] = *((uint64_t **)v570 + 1);
          llvm::MetadataTracking::track((uint64_t)v803, v574, 2);
          v512 = *v572;
          goto LABEL_632;
        }
      }
      else
      {
        v512 = *v572;
        if (!*v572 && (v518[87] & 0x20) == 0)
          goto LABEL_629;
        v743 = v571;
        if (!v573)
        {
          v803[0] = 0;
LABEL_632:
          if (v512)
            llvm::MetadataTracking::untrack((uint64_t)(v518 + 112), (unsigned __int8 *)v512);
          v512 = v803[0];
          *v572 = v803[0];
          if (v512)
            llvm::MetadataTracking::retrack((uint64_t)v803, (unsigned __int8 *)v512, (uint64_t)(v518 + 112));
          goto LABEL_628;
        }
      }
      llvm::Value::setMetadata(v520, v573, (llvm::MDNode *)v574);
LABEL_628:
      v571 = v743;
LABEL_629:
      v570 += 16;
      if (v570 == v571)
        goto LABEL_576;
    }
  }
LABEL_26:
  v777 = v745;
  v778 = v744;
  LLVMBuildUnreachable_0((uint64_t)&v771);
  a1 = (uint64_t **)v763;
  *(_QWORD *)(v763 + 272) = v746;
  if (v771 != &v773)
    free(v771);
  v771 = ".resume";
  LOWORD(v775) = 259;
  v73 = sub_1C605A164(v71, (uint64_t)&v771, v763, 0);
  v771 = ".destroy";
  LOWORD(v775) = 259;
  v74 = (llvm *)sub_1C605A164(v71, (uint64_t)&v771, v763, 1);
  v771 = ".cleanup";
  LOWORD(v775) = 259;
  v75 = (llvm *)sub_1C605A164(v71, (uint64_t)&v771, v763, 2);
  llvm::removeUnreachableBlocks((llvm *)v73, 0, 0, v76);
  v755 = (uint64_t *)v74;
  llvm::removeUnreachableBlocks(v74, 0, 0, v77);
  v747 = (uint64_t)v75;
  llvm::removeUnreachableBlocks(v75, 0, 0, v78);
  v771 = &v773;
  v772 = (llvm::Type *)0x400000000;
  v79 = v73 + 72;
  v751 = (llvm *)v73;
  for (ii = *(_QWORD *)(v73 + 80); ; ii = *(_QWORD *)(ii + 8))
  {
    if (ii == v79)
      goto LABEL_795;
    v81 = ii - 24;
    if (!ii)
      v81 = 0;
    v82 = *(_QWORD *)(v81 + 48);
    if (v82 != v81 + 40)
      break;
  }
  v578 = 0;
  while (1)
  {
    v579 = v82 - 24;
    if (!v82)
      v579 = 0;
    v580 = *(unsigned __int8 *)(v579 + 16);
    if (v580 == 84)
      v581 = v579;
    else
      v581 = 0;
    if (v82)
    {
      if (v580 == 84 && *(_BYTE *)(*(_QWORD *)(v581 - 32) + 16) != 24)
      {
        v582 = *(_QWORD *)(v581 + 72);
        v583 = *(_QWORD **)(v582 + 16);
        if (*(_BYTE *)(*v583 + 8) == 7 && *(_DWORD *)(v582 + 12) == 2)
        {
          v584 = v583[1];
          v585 = *(_DWORD *)(v584 + 8);
          if (v585 == 15)
          {
            if ((v585 & 0xFE) == 0x12)
              v585 = *(_DWORD *)(**(_QWORD **)(v584 + 16) + 8);
            if (v585 <= 0xFF
              && (((*(unsigned __int16 *)(v73 + 18) >> 4) ^ (*(unsigned __int16 *)(v581 + 18) >> 2)) & 0x3FF) == 0)
            {
              v586 = 0;
              v587 = *(_QWORD *)(v581 + 64);
              while (1)
              {
                if (v587)
                {
                  if (*(_DWORD *)(v587 + 8) >= 3u)
                  {
                    v588 = *(_QWORD *)(v587 + 56);
                    if (v588)
                    {
                      if (((*(unsigned __int8 *)(v588 + dword_1C8677AC4[v586] / 8 + 12) >> (dword_1C8677AC4[v586] & 7)) & 1) != 0)
                        break;
                    }
                  }
                }
                if (++v586 == 8)
                {
                  if (v578 >= HIDWORD(v772))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v771, (uint64_t)&v773, v578 + 1, 8);
                    v578 = v772;
                  }
                  *((_QWORD *)v771 + v578) = v581;
                  v578 = (_DWORD)v772 + 1;
                  LODWORD(v772) = (_DWORD)v772 + 1;
                  break;
                }
              }
            }
          }
        }
      }
    }
    v82 = *(_QWORD *)(v82 + 8);
    v589 = ii - 24;
    if (!ii)
      v589 = 0;
    if (v82 == v589 + 40)
      break;
LABEL_681:
    if (ii == v79)
      goto LABEL_682;
  }
  while (1)
  {
    ii = *(_QWORD *)(ii + 8);
    if (ii == v79)
      break;
    v590 = ii - 24;
    if (!ii)
      v590 = 0;
    v82 = *(_QWORD *)(v590 + 48);
    if (v82 != v590 + 40)
      goto LABEL_681;
  }
LABEL_682:
  if (!v578)
    goto LABEL_795;
  v762 = 0;
  v591 = (llvm::ConstantTokenNone *)v771;
  v766 = (llvm::ConstantTokenNone *)((char *)v771 + 8 * v578);
  while (2)
  {
    while (1)
    {
      v592 = *(_QWORD *)v591;
      v593 = *(_QWORD *)(*(_QWORD *)v591 + 32);
      v594 = v593 - 24;
      v595 = v593 == *(_QWORD *)(*(_QWORD *)v591 + 40) + 40 || v593 == 0;
      v596 = v595;
      v597 = v595 ? 0 : v593 - 24;
      LODWORD(v808) = 0;
      v807 = 0;
      v806 = 0;
      v598 = *(unsigned __int8 *)(v597 + 16);
      if (v598 - 29 < 0xB || v598 - 81 <= 1)
        break;
LABEL_783:
      MEMORY[0x1CAA32FB4](v806, 8);
      v591 = (llvm::ConstantTokenNone *)((char *)v591 + 8);
      if (v591 == v766)
      {
        a1 = (uint64_t **)v763;
        if ((v762 & 1) != 0)
          goto LABEL_794;
        goto LABEL_795;
      }
    }
    v600 = 0;
    v601 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v597 + 40) + 56) + 40) + 272);
    while (1)
    {
      if (v598 == 30)
      {
        if ((*(_DWORD *)(v594 + 20) & 0x7FFFFFF) == 1)
        {
          v604 = *(llvm::BasicBlock **)(v594 - 32);
          if (v594 == v597)
            v600 = *(llvm::BasicBlock **)(v594 - 32);
          sub_1C605E378(*(_QWORD **)(v594 + 40), *(_QWORD *)(v594 - 32), (uint64_t)&v806);
          for (jj = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v604, 1); ; jj = (char *)(v606 - 24))
          {
            if (jj[16] == 77
              || sub_1C4D99D08((uint64_t)jj)
              || sub_1C509DDB0((uint64_t)jj)
              || llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)jj))
            {
              v606 = *((_QWORD *)jj + 4);
            }
            else
            {
              if (*((_QWORD *)jj + 1) || !llvm::wouldInstructionBeTriviallyDead((uint64_t)jj, 0))
                goto LABEL_755;
              v606 = *((_QWORD *)jj + 4);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)jj + 5) + 40, (uint64_t ***)jj);
              v607 = *((_QWORD *)jj + 3);
              v608 = (_QWORD *)*((_QWORD *)jj + 4);
              *v608 = v607;
              *(_QWORD *)(v607 + 8) = v608;
              *((_QWORD *)jj + 3) = 0;
              *((_QWORD *)jj + 4) = 0;
              llvm::Value::deleteValue((llvm::Value *)jj);
            }
          }
        }
        v609 = *(_QWORD *)(v594 + 40);
        if (!llvm::ConstantFoldTerminator(v609, 1, 0, 0))
          goto LABEL_783;
        v610 = *(_QWORD *)(v609 + 40);
        if (v610)
          v611 = v610 - 24;
        else
          v611 = 0;
        if (*(unsigned __int8 *)(v611 + 16) - 29 >= 0xB)
          jj = 0;
        else
          jj = (char *)v611;
        goto LABEL_755;
      }
      if (v598 == 29)
        break;
      if (v598 < 0x51)
      {
        if (v598 == 31)
        {
          v602 = *(_DWORD *)(v594 + 20);
          if ((v602 & 0x40000000) != 0)
            v603 = *(uint64_t **)(v594 - 8);
          else
            v603 = (uint64_t *)(v594 - 32 * (v602 & 0x7FFFFFF));
          v626 = *v603;
          *(_QWORD *)&v794 = *v603;
          v803[0] = 0;
          if (sub_1C4926528((uint64_t)&v806, &v794, v803)
            && (char *)v803[0] != (char *)v806 + 16 * v808)
          {
            v626 = v803[0][1];
          }
          if (v626 && *(_BYTE *)(v626 + 16) == 16)
          {
            sub_1C4E5D490(v594, v626);
            v628 = *(_DWORD *)(v594 + 20);
            if ((v628 & 0x40000000) != 0)
              v629 = *(_QWORD *)(v594 - 8);
            else
              v629 = v594 - 32 * (v628 & 0x7FFFFFF);
            if (v627 == 4294967294)
              v630 = 1;
            else
              v630 = (2 * v627 + 3);
            v631 = *(llvm::BasicBlock **)(v629 + 32 * v630);
            sub_1C605E378(*(_QWORD **)(v594 + 40), (uint64_t)v631, (uint64_t)&v806);
            for (jj = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v631, 1); ; jj = (char *)(v632 - 24))
            {
              if (jj[16] == 77
                || sub_1C4D99D08((uint64_t)jj)
                || sub_1C509DDB0((uint64_t)jj)
                || llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)jj))
              {
                v632 = *((_QWORD *)jj + 4);
              }
              else
              {
                if (*((_QWORD *)jj + 1) || !llvm::wouldInstructionBeTriviallyDead((uint64_t)jj, 0))
                  goto LABEL_755;
                v632 = *((_QWORD *)jj + 4);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)jj + 5) + 40, (uint64_t ***)jj);
                v633 = *((_QWORD *)jj + 3);
                v634 = (_QWORD *)*((_QWORD *)jj + 4);
                *v634 = v633;
                *(_QWORD *)(v633 + 8) = v634;
                *((_QWORD *)jj + 3) = 0;
                *((_QWORD *)jj + 4) = 0;
                llvm::Value::deleteValue((llvm::Value *)jj);
              }
            }
          }
        }
        goto LABEL_783;
      }
      v613 = *(_QWORD **)(v594 + 32);
      v612 = *(_QWORD *)(v594 + 40);
LABEL_725:
      if (v613 == (_QWORD *)(v612 + 40) || v613 == 0)
        goto LABEL_783;
      while (1)
      {
        if (*((_BYTE *)v613 - 8) == 77
          || (jj = (char *)(v613 - 3), sub_1C4D99D08((uint64_t)(v613 - 3)))
          || sub_1C509DDB0((uint64_t)(v613 - 3))
          || llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)(v613 - 3)))
        {
          v618 = v613 + 1;
          v613 = (_QWORD *)v613[1];
          v612 = v618[1];
          goto LABEL_725;
        }
        if (*(v613 - 2) || !llvm::wouldInstructionBeTriviallyDead((uint64_t)(v613 - 3), 0))
          break;
        v615 = (_QWORD *)v613[1];
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v613[2] + 40, (uint64_t ***)v613 - 3);
        v616 = *v613;
        v617 = (_QWORD *)v613[1];
        *v617 = *v613;
        *(_QWORD *)(v616 + 8) = v617;
        *v613 = 0;
        v613[1] = 0;
        llvm::Value::deleteValue((llvm::Value *)(v613 - 3));
        v613 = v615;
        if (!v615)
          goto LABEL_783;
      }
      if (*((_BYTE *)v613 - 8) != 30 || (*((_DWORD *)v613 - 1) & 0x7FFFFFF) != 3 || v594 != *(v613 - 15))
        goto LABEL_783;
      v619 = *(_QWORD *)(v594 - 64);
      *(_QWORD *)&v794 = v619;
      v803[0] = 0;
      if (sub_1C4926528((uint64_t)&v806, &v794, v803)
        && (char *)v803[0] != (char *)v806 + 16 * v808)
      {
        v619 = v803[0][1];
      }
      v620 = *(_BYTE *)(v619 + 16) == 16 ? v619 : 0;
      v621 = *(_BYTE *)(*(_QWORD *)(v594 - 32) + 16) == 16 ? *(_QWORD *)(v594 - 32) : 0;
      if (!v620)
        goto LABEL_783;
      if (!v621)
        goto LABEL_783;
      v622 = llvm::ConstantFoldCompareInstOperands(*(_WORD *)(v594 + 18) & 0x3F, v620, v621, v601, 0);
      if (!v622 || *((_BYTE *)v622 + 16) != 16)
        goto LABEL_783;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v594, v622, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v594 + 40) + 40, (uint64_t ***)v594);
      v623 = *(_QWORD *)(v594 + 24);
      v624 = *(_QWORD **)(v594 + 32);
      *v624 = v623;
      *(_QWORD *)(v623 + 8) = v624;
      *(_QWORD *)(v594 + 24) = 0;
      *(_QWORD *)(v594 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v594);
LABEL_755:
      v598 = jj[16];
      v625 = v598 - 29 >= 0xB && v598 - 81 >= 2;
      v594 = (uint64_t)jj;
      if (v625)
        goto LABEL_783;
    }
    a1 = (uint64_t **)v763;
    if (v594 != v597)
    {
      if (v600)
        llvm::BasicBlock::removePredecessor(v600, *(llvm::BasicBlock **)(v597 + 40), 1);
      llvm::Instruction::clone((llvm::Instruction *)v594);
      v637 = (uint64_t *)(v597 + 24);
      if (v596)
        v637 = 0;
      v803[0] = v637;
      llvm::ReplaceInstWithInst(*(_QWORD *)(v597 + 40) + 40, v803, v636);
    }
    MEMORY[0x1CAA32FB4](v806, 8);
    *(_WORD *)(v592 + 18) = *(_WORD *)(v592 + 18) & 0xFFFC | 2;
    v591 = (llvm::ConstantTokenNone *)((char *)v591 + 8);
    v762 = 1;
    if (v591 != v766)
      continue;
    break;
  }
LABEL_794:
  llvm::removeUnreachableBlocks(v751, 0, 0, v635);
LABEL_795:
  if (v771 != &v773)
    free(v771);
  v638 = sub_1C6053830((uint64_t)a1);
  sub_1C4773D54((uint64_t)&v771, v638, 0, 0, 0);
  v639 = (llvm::GetElementPtrInst *)a1[26];
  v640 = (uint64_t **)a1[29];
  v806 = "resume.addr";
  v809 = 259;
  v641 = sub_1C5391F90((uint64_t *)&v771, v639, v640, 0, 0, (uint64_t)&v806);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v777 + 7) + 40) + 272, *(_QWORD *)v751);
  v643 = v642;
  v644 = (char *)operator new(0x80uLL);
  v645 = v644;
  *((_DWORD *)v644 + 21) = *((_DWORD *)v644 + 21) & 0x38000000 | 2;
  *(_QWORD *)v644 = 0;
  *((_QWORD *)v644 + 2) = 0;
  *((_QWORD *)v644 + 1) = 0;
  *((_QWORD *)v644 + 5) = 0;
  *((_QWORD *)v644 + 6) = 0;
  *((_QWORD *)v644 + 4) = 0;
  v646 = (uint64_t ****)(v644 + 32);
  *((_QWORD *)v644 + 8) = ***(_QWORD ***)v751 + 1576;
  v647 = (llvm::Value *)(v644 + 64);
  *((_QWORD *)v644 + 3) = v644 + 64;
  *((_QWORD *)v644 + 7) = v644 + 64;
  *((_QWORD *)v644 + 9) = 0;
  v644[80] = 61;
  v644[81] = 0;
  *((_WORD *)v644 + 41) = 0;
  *((_DWORD *)v644 + 21) = 2;
  *(_OWORD *)(v644 + 88) = 0u;
  *(_OWORD *)(v644 + 104) = 0u;
  *((_DWORD *)v644 + 30) = 0;
  *(_QWORD *)v644 = v751;
  v648 = (_QWORD *)((char *)v751 + 8);
  v649 = *((_QWORD *)v751 + 1);
  *((_QWORD *)v644 + 1) = v649;
  if (v649)
    *(_QWORD *)(v649 + 16) = v644 + 8;
  *((_QWORD *)v644 + 2) = v648;
  *v648 = v644;
  if (*((_QWORD *)v644 + 4))
  {
    **((_QWORD **)v644 + 6) = *((_QWORD *)v644 + 5);
    v739 = *((_QWORD *)v644 + 5);
    if (v739)
      *(_QWORD *)(v739 + 16) = *((_QWORD *)v644 + 6);
  }
  *v646 = v641;
  if (v641)
  {
    v652 = v641[1];
    v651 = (uint64_t *****)(v641 + 1);
    v650 = v652;
    *((_QWORD *)v644 + 5) = v652;
    if (v652)
      v650[2] = (uint64_t *)(v644 + 40);
    *((_QWORD *)v644 + 6) = v651;
    *v651 = v646;
  }
  *((_WORD *)v644 + 41) = 2 * (v643 & 0x3F);
  v644[124] = 1;
  v809 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, void **, void *, uint64_t))(*v781 + 16))(v781, v647, &v806, v777, v778);
  if ((_DWORD)v772)
  {
    v725 = (char *)v771;
    v726 = (char *)v771 + 16 * v772;
    v727 = (unsigned __int8 **)(v645 + 112);
    a1 = (uint64_t **)v763;
    do
    {
      v728 = *(_DWORD *)v725;
      v729 = (unsigned __int8 *)*((_QWORD *)v725 + 1);
      if (v729)
      {
        if (!v728)
        {
          v803[0] = *((uint64_t **)v725 + 1);
          llvm::MetadataTracking::track((uint64_t)v803, v729, 2);
          v730 = *v727;
          goto LABEL_896;
        }
      }
      else
      {
        v730 = *v727;
        if (!*v727 && (v645[87] & 0x20) == 0)
          goto LABEL_893;
        if (!v728)
        {
          v803[0] = 0;
LABEL_896:
          if (v730)
            llvm::MetadataTracking::untrack((uint64_t)(v645 + 112), v730);
          v731 = (unsigned __int8 *)v803[0];
          *v727 = (unsigned __int8 *)v803[0];
          if (v731)
            llvm::MetadataTracking::retrack((uint64_t)v803, v731, (uint64_t)(v645 + 112));
          goto LABEL_893;
        }
      }
      llvm::Value::setMetadata(v647, *(_DWORD *)v725, (llvm::MDNode *)v729);
LABEL_893:
      v725 += 16;
    }
    while (v725 != v726);
  }
  v653 = *(_QWORD *)((*a1)[-4 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF)] + 8);
  Select = v755;
  if (v653)
  {
    do
    {
      v655 = *(_QWORD *)(v653 + 24);
      v656 = sub_1C6043668(v655);
      if (v655)
        v657 = !v656;
      else
        v657 = 1;
      if (!v657)
      {
        v809 = 257;
        Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v771, v655, v755, v747, (uint64_t)&v806, 0);
        goto LABEL_813;
      }
      v653 = *(_QWORD *)(v653 + 8);
    }
    while (v653);
    Select = v755;
  }
LABEL_813:
  v658 = (llvm::GetElementPtrInst *)a1[26];
  v659 = (uint64_t **)a1[29];
  v806 = "destroy.addr";
  v809 = 259;
  v660 = sub_1C5391F90((uint64_t *)&v771, v658, v659, 0, 1u, (uint64_t)&v806);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v777 + 7) + 40) + 272, *Select);
  v662 = v661;
  v663 = (char *)operator new(0x80uLL);
  v664 = v663;
  *((_DWORD *)v663 + 21) = *((_DWORD *)v663 + 21) & 0x38000000 | 2;
  *(_QWORD *)v663 = 0;
  *((_QWORD *)v663 + 2) = 0;
  *((_QWORD *)v663 + 1) = 0;
  *((_QWORD *)v663 + 5) = 0;
  *((_QWORD *)v663 + 6) = 0;
  *((_QWORD *)v663 + 4) = 0;
  v665 = (uint64_t ****)(v663 + 32);
  *((_QWORD *)v663 + 8) = **(_QWORD **)*Select + 1576;
  v666 = (llvm::Value *)(v663 + 64);
  *((_QWORD *)v663 + 3) = v663 + 64;
  *((_QWORD *)v663 + 7) = v663 + 64;
  *((_QWORD *)v663 + 9) = 0;
  v663[80] = 61;
  v663[81] = 0;
  *((_WORD *)v663 + 41) = 0;
  *((_DWORD *)v663 + 21) = 2;
  *(_OWORD *)(v663 + 88) = 0u;
  *(_OWORD *)(v663 + 104) = 0u;
  *((_DWORD *)v663 + 30) = 0;
  *(_QWORD *)v663 = Select;
  v669 = Select[1];
  v668 = Select + 1;
  v667 = v669;
  *((_QWORD *)v663 + 1) = v669;
  if (v669)
    *(_QWORD *)(v667 + 16) = v663 + 8;
  *((_QWORD *)v663 + 2) = v668;
  *v668 = v663;
  if (*((_QWORD *)v663 + 4))
  {
    **((_QWORD **)v663 + 6) = *((_QWORD *)v663 + 5);
    v740 = *((_QWORD *)v663 + 5);
    if (v740)
      *(_QWORD *)(v740 + 16) = *((_QWORD *)v663 + 6);
  }
  *v665 = v660;
  v10 = (uint64_t *)v754;
  if (v660)
  {
    v672 = v660[1];
    v671 = (uint64_t *****)(v660 + 1);
    v670 = v672;
    *((_QWORD *)v663 + 5) = v672;
    if (v672)
      v670[2] = (uint64_t *)(v663 + 40);
    *((_QWORD *)v663 + 6) = v671;
    *v671 = v665;
  }
  *((_WORD *)v663 + 41) = 2 * (v662 & 0x3F);
  v663[124] = 1;
  v809 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, void **, void *, uint64_t))(*v781 + 16))(v781, v666, &v806, v777, v778);
  v673 = (uint64_t *)v771;
  if ((_DWORD)v772)
  {
    v732 = (uint64_t *)((char *)v771 + 16 * v772);
    v733 = (unsigned __int8 **)(v664 + 112);
    a1 = (uint64_t **)v763;
    v10 = (uint64_t *)v754;
    while (1)
    {
      v734 = *(_DWORD *)v673;
      v735 = (unsigned __int8 *)v673[1];
      if (v735)
      {
        if (!v734)
        {
          v803[0] = (uint64_t *)v673[1];
          llvm::MetadataTracking::track((uint64_t)v803, v735, 2);
          v736 = *v733;
          goto LABEL_911;
        }
      }
      else
      {
        v736 = *v733;
        if (!*v733 && (v664[87] & 0x20) == 0)
          goto LABEL_908;
        if (!v734)
        {
          v803[0] = 0;
LABEL_911:
          if (v736)
            llvm::MetadataTracking::untrack((uint64_t)(v664 + 112), v736);
          v737 = (unsigned __int8 *)v803[0];
          *v733 = (unsigned __int8 *)v803[0];
          if (v737)
            llvm::MetadataTracking::retrack((uint64_t)v803, v737, (uint64_t)(v664 + 112));
          goto LABEL_908;
        }
      }
      llvm::Value::setMetadata(v666, *(_DWORD *)v673, (llvm::MDNode *)v735);
LABEL_908:
      v673 += 2;
      if (v673 == v732)
      {
        v673 = (uint64_t *)v771;
        break;
      }
    }
  }
  if (v673 != &v773)
    free(v673);
  v674 = *(unsigned int *)(a3 + 8);
  if (v674 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v674 + 1, 8);
    LODWORD(v674) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v674) = v751;
  v675 = *(_DWORD *)(a3 + 12);
  v676 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v676;
  if (v676 >= v675)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v676 + 1, 8);
    LODWORD(v676) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v676) = v755;
  v677 = *(_DWORD *)(a3 + 12);
  v678 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v678;
  if (v678 >= v677)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v678 + 1, 8);
    LODWORD(v678) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v678) = v747;
  v679 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v679;
  v680 = *(char **)a3;
  v681 = (char *)(*(_QWORD *)a3 + 8 * v679);
  v771 = &v773;
  v772 = (llvm::Type *)0x400000000;
  sub_1C6177054((unsigned int *)&v771, v680, v681);
  v682 = *(llvm::ArrayType ***)v680;
  v683 = *(_QWORD *)(*(_QWORD *)v680 + 40);
  llvm::ArrayType::get(*v682, (llvm::Type *)v772);
  v685 = llvm::ConstantArray::get(v684, (llvm::Type *)v771, v772);
  v686 = operator new(0x78uLL);
  v687 = (llvm::ConstantExpr *)(v686 + 8);
  v686[13] = v686[13] & 0x38000000 | 1;
  *(_QWORD *)v686 = 0;
  *((_QWORD *)v686 + 1) = 0;
  *((_QWORD *)v686 + 2) = 0;
  *((_QWORD *)v686 + 3) = v686 + 8;
  v688 = *v685;
  if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
  {
    v689 = **(_QWORD **)*v10;
    v690 = *(_QWORD *)(v689 + 152);
    v691 = *(unsigned int *)(v689 + 168);
    if (!(_DWORD)v691)
      goto LABEL_836;
    LODWORD(v692) = (v691 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    v693 = (uint64_t **)(v690 + 16 * v692);
    v694 = *v693;
    if (*v693 != v10)
    {
      v695 = 1;
      while (v694 != (uint64_t *)-4096)
      {
        v696 = v692 + v695++;
        v692 = v696 & (v691 - 1);
        v694 = *(uint64_t **)(v690 + 16 * v692);
        if (v694 == v10)
        {
          v693 = (uint64_t **)(v690 + 16 * v692);
          goto LABEL_837;
        }
      }
LABEL_836:
      v693 = (uint64_t **)(v690 + 16 * v691);
    }
LABEL_837:
    v697 = v693[1];
    v700 = *v697;
    v698 = (char *)(v697 + 2);
    v699 = v700;
  }
  else
  {
    v699 = 0;
    v698 = &byte_1C871356D;
  }
  v806 = v698;
  v807 = v699;
  *(_QWORD *)&v808 = ".resumers";
  v809 = 773;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v686 + 8), v683, v688, 1, 8, (uint64_t)v685, (uint64_t)&v806, 0, 0, 0, 0);
  v701 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)*v10 + 1912), 0);
  PointerCast = llvm::ConstantExpr::getPointerCast(v687, v701, v702);
  v704 = (*a1)[-4 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF)];
  v705 = v704 - 32 * (*(_DWORD *)(v704 + 20) & 0x7FFFFFF);
  v706 = (llvm::ConstantExpr **)(v705 + 96);
  if (*(_QWORD *)(v705 + 96))
  {
    **(_QWORD **)(v705 + 112) = *(_QWORD *)(v705 + 104);
    v707 = *(_QWORD *)(v705 + 104);
    if (v707)
      *(_QWORD *)(v707 + 16) = *(_QWORD *)(v705 + 112);
  }
  *v706 = PointerCast;
  if (PointerCast)
  {
    v710 = *((_QWORD *)PointerCast + 1);
    v708 = (llvm::ConstantExpr ***)((char *)PointerCast + 8);
    v709 = v710;
    *(_QWORD *)(v705 + 104) = v710;
    if (v710)
      *(_QWORD *)(v709 + 16) = v705 + 104;
    *(_QWORD *)(v705 + 112) = v708;
    *v708 = v706;
  }
  if (v771 != &v773)
    free(v771);
LABEL_356:
  sub_1C6059864((uint64_t)v10, (uint64_t)a1, 0);
  v771 = &v773;
  v772 = (llvm::Type *)0x800000000;
  v806 = (void *)1;
  for (kk = 8; kk != 72; kk += 16)
    *(void **)((char *)&v806 + kk) = (void *)-4096;
  v341 = v10 + 9;
  v342 = (uint64_t *)v10[10];
  if (v342 != v10 + 9)
  {
    do
    {
      v343 = v342 - 3;
      if (!v342)
        v343 = 0;
      v344 = (_QWORD **)(v343 + 5);
      for (mm = (_QWORD *)v343[6]; mm != v344; mm = (_QWORD *)mm[1])
      {
        if (mm)
          v346 = (uint64_t)(mm - 3);
        else
          v346 = 0;
        v347 = sub_1C5021D50(v346);
        if (!mm || !v347)
        {
          v348 = sub_1C605437C(v346);
          if (!mm || !v348)
            continue;
        }
        v349 = v772;
        if (v772 >= (unint64_t)HIDWORD(v772))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v771, (uint64_t)&v773, v772 + 1, 8);
          v349 = v772;
        }
        *((_QWORD *)v771 + v349) = v346;
        LODWORD(v772) = (_DWORD)v772 + 1;
      }
      v342 = (uint64_t *)v342[1];
    }
    while (v342 != v341);
    if ((_DWORD)v772)
    {
      v350 = (uint64_t *)v771;
      v351 = 8 * v772;
      do
      {
        v352 = *v350++;
        sub_1C6044370(&v806, v352, *((_BYTE *)a1 + 248));
        v351 -= 8;
      }
      while (v351);
    }
  }
  if ((v806 & 1) == 0)
    MEMORY[0x1CAA32FB4](v807, 8);
  if (v771 != &v773)
    free(v771);
}

uint64_t sub_1C6059700(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeCallGraphWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Split coroutine into a set of functions driving its state machine";
  *(_QWORD *)(v3 + 8) = 65;
  *(_QWORD *)(v3 + 16) = "coro-split";
  *(_QWORD *)(v3 + 24) = 10;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F76B0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C605E5BC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C6059794(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F76B0;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)a1 = &off_1E81AC668;
  *(_BYTE *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 29) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1EF8F76A8);
  if (v4 != -1)
  {
    v8[0] = sub_1C6059700;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1EF8F76A8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C6059864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  unint64_t v13;
  int32x2_t ****v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t *****v20;
  int32x2_t ****v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  llvm::PointerType *v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  llvm::PointerType *v33;
  unsigned __int8 **v34;
  unsigned __int8 **v35;
  uint64_t v36;
  llvm::BasicBlock *v37;
  char *v38;
  char v39;
  char v40;
  char *v41;
  char *v42;
  unsigned __int8 ***v43;
  llvm::Value *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 ****v48;
  unsigned __int8 *v49;
  llvm::Value *v50;
  uint64_t v51;
  llvm::BasicBlock *v52;
  char *FirstNonPHIOrDbg;
  char v54;
  char v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  unsigned __int8 **v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 **v68;
  unsigned __int8 *v69;
  char *v70;
  char *v71;
  unsigned __int8 **v72;
  int v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 **v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unsigned __int8 **v82;
  unsigned __int8 **v83;
  unsigned __int8 **v84;
  char *v85;
  unsigned __int8 **v86;
  unsigned __int8 **v87;
  unsigned __int8 **v88;
  uint64_t *v90;
  _QWORD v91[4];
  __int16 v92;
  unsigned __int8 *v93;
  void *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  unint64_t *v102;
  int32x2_t ****v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 200) != 3 || *(_DWORD *)(a2 + 128) != 0)
  {
    v5 = *(unsigned int *)(a2 + 176);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = *(uint64_t **)(a2 + 168);
      v90 = &v8[v5];
      while (1)
      {
        v9 = *v8;
        v10 = *v8;
        if (a3)
        {
          v101 = 2;
          v102 = 0;
          v103 = (int32x2_t ****)v9;
          if (v9 != -8192 && v9 != -4096 && v9 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v101);
          v100 = &unk_1E814DA10;
          v104 = a3;
          v12 = sub_1C52E2ED8(a3, &v100);
          if (v103 != (int32x2_t ****)-8192 && v103 != (int32x2_t ****)-4096 && v103)
          {
            v13 = v101 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v101 & 0xFFFFFFFFFFFFFFF8) = v102;
            if (v102)
            {
              *v102 = *v102 & 7 | v13;
            }
            else
            {
              v14 = v103;
              v15 = ***v103;
              v16 = (unint64_t)v15[303];
              if (v16 <= v13)
              {
                v17 = v15[305].u32[0];
                if (v16 + 16 * v17 > v13)
                {
                  v18 = v17 - 1;
                  LODWORD(v19) = v18 & ((v103 >> 4) ^ (v103 >> 9));
                  v20 = (int32x2_t *****)(v16 + 16 * v19);
                  v21 = *v20;
                  if (v103 == *v20)
                  {
LABEL_25:
                    *v20 = (int32x2_t ****)-8192;
                    v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                    v14 = v103;
                  }
                  else
                  {
                    v22 = 1;
                    while (v21 != (int32x2_t ****)-4096)
                    {
                      v23 = v19 + v22++;
                      v19 = v23 & v18;
                      v21 = *(int32x2_t *****)(v16 + 16 * v19);
                      if (v103 == v21)
                      {
                        v20 = (int32x2_t *****)(v16 + 16 * v19);
                        goto LABEL_25;
                      }
                    }
                  }
                  *((_BYTE *)v14 + 17) &= ~1u;
                }
              }
            }
          }
          v10 = v12[7];
        }
        sub_1C4773D54((uint64_t)&v94, v10, 0, 0, 0);
        v24 = 0;
        v25 = *(unsigned __int8 *)(v9 + 16);
        if (v25 != 84)
        {
          if (v25 == 39)
            v24 = (*(_DWORD *)(v9 + 80) + 1);
          else
            v24 = 2;
        }
        v26 = *(_DWORD *)(v9 + 20);
        if (v26 < 0 && (v78 = v9 - 32 * (v26 & 0x7FFFFFF), v79 = *(_QWORD *)(v78 - 8), (v79 & 0xFFFFFFFF0) != 0))
        {
          v28 = -(uint64_t)(v26 & 0x7FFFFFF);
          v27 = (*(_DWORD *)(v78 - 12) - *(_DWORD *)(v78 - v79));
        }
        else
        {
          v27 = 0;
          v28 = -(uint64_t)(v26 & 0x7FFFFFF);
        }
        if (v9 - 32 * v24 - 32 * v27 - 32 == v9 + 32 * v28)
        {
          v33 = *(llvm::PointerType **)v9;
          if (!v7)
          {
            if ((*(_WORD *)(a1 + 18) & 1) == 0)
            {
              v7 = *(unsigned __int8 ***)(a1 + 88);
              goto LABEL_44;
            }
            llvm::Function::BuildLazyArguments((llvm::Function *)a1);
            v7 = *(unsigned __int8 ***)(a1 + 88);
            if ((*(_WORD *)(a1 + 18) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)a1);
              v34 = *(unsigned __int8 ***)(a1 + 88);
            }
            else
            {
LABEL_44:
              v34 = v7;
            }
            v35 = &v34[5 * *(_QWORD *)(a1 + 96)];
            while (v7 != v35)
            {
              if (llvm::Value::isSwiftError((llvm::Value *)v7))
                goto LABEL_68;
              v7 += 5;
            }
            v51 = *(_QWORD *)(a1 + 80);
            if (v51)
              v52 = (llvm::BasicBlock *)(v51 - 24);
            else
              v52 = 0;
            FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v52, 1);
            sub_1C4773D54((uint64_t)&v100, (uint64_t)FirstNonPHIOrDbg, 0, 0, 0);
            v92 = 257;
            v7 = sub_1C486A5CC((uint64_t *)&v100, v33, 0, (uint64_t)v91);
            *((_WORD *)v7 + 9) |= 0x80u;
            if (v100 != &v102)
              free(v100);
          }
LABEL_68:
          v92 = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v97 + 56) + 40) + 272, (uint64_t)v33);
          v55 = v54;
          v56 = (char *)operator new(0x60uLL);
          v57 = v56;
          v50 = (llvm::Value *)(v56 + 32);
          *((_QWORD *)v56 + 2) = 0;
          *((_QWORD *)v56 + 3) = v56 + 32;
          LOWORD(v104) = 257;
          *((_QWORD *)v56 + 4) = v33;
          *((_QWORD *)v56 + 5) = 0;
          *((_WORD *)v56 + 24) = 60;
          *((_DWORD *)v56 + 13) = 1;
          *(_OWORD *)(v56 + 56) = 0u;
          *(_OWORD *)(v56 + 72) = 0u;
          *((_DWORD *)v56 + 22) = 0;
          *(_QWORD *)v56 = v7;
          *((_QWORD *)v56 + 1) = 0;
          if (v7)
          {
            v58 = v7 + 1;
            v59 = v7[1];
            *((_QWORD *)v56 + 1) = v59;
            if (v59)
              *((_QWORD *)v59 + 2) = v56 + 8;
            *((_QWORD *)v56 + 2) = v58;
            *v58 = v56;
          }
          *((_WORD *)v56 + 25) = 2 * (v55 & 0x3F);
          v56[92] = 1;
          llvm::Value::setName((uint64_t ***)v56 + 4, (uint64_t)&v100);
          (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v50, v91, v97, v98);
          if (!v95)
            goto LABEL_73;
          v62 = (char *)v94;
          v63 = (char *)v94 + 16 * v95;
          v64 = (unsigned __int8 **)(v57 + 80);
          while (2)
          {
            v65 = *(_DWORD *)v62;
            v66 = (unsigned __int8 *)*((_QWORD *)v62 + 1);
            if (v66)
            {
              if (v65)
                goto LABEL_86;
              v93 = (unsigned __int8 *)*((_QWORD *)v62 + 1);
              v82 = v64;
              llvm::MetadataTracking::track((uint64_t)&v93, v66, 2);
              v64 = v82;
              v67 = *v82;
LABEL_90:
              if (v67)
              {
                v84 = v64;
                llvm::MetadataTracking::untrack((uint64_t)v64, v67);
                v64 = v84;
              }
              v69 = v93;
              *v64 = v93;
              if (v69)
              {
                v83 = v64;
                llvm::MetadataTracking::retrack((uint64_t)&v93, v69, (uint64_t)v64);
                v64 = v83;
              }
            }
            else
            {
              v67 = *v64;
              if (*v64 || (v57[55] & 0x20) != 0)
              {
                if (!v65)
                {
                  v93 = 0;
                  goto LABEL_90;
                }
LABEL_86:
                v81 = v63;
                v68 = v64;
                llvm::Value::setMetadata(v50, *(_DWORD *)v62, (llvm::MDNode *)v66);
                v64 = v68;
                v63 = v81;
              }
            }
            v62 += 16;
            if (v62 == v63)
              goto LABEL_73;
            continue;
          }
        }
        v29 = *(uint64_t **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
        if (!v7)
          break;
LABEL_54:
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v97 + 56) + 40) + 272, *v29);
        v40 = v39;
        v41 = (char *)operator new(0x80uLL);
        v42 = v41;
        *((_DWORD *)v41 + 21) = *((_DWORD *)v41 + 21) & 0x38000000 | 2;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v41 + 2) = 0;
        *((_QWORD *)v41 + 1) = 0;
        *((_QWORD *)v41 + 5) = 0;
        *((_QWORD *)v41 + 6) = 0;
        *((_QWORD *)v41 + 4) = 0;
        v43 = (unsigned __int8 ***)(v41 + 32);
        *((_QWORD *)v41 + 8) = **(_QWORD **)*v29 + 1576;
        v44 = (llvm::Value *)(v41 + 64);
        *((_QWORD *)v41 + 3) = v41 + 64;
        *((_QWORD *)v41 + 7) = v41 + 64;
        *((_QWORD *)v41 + 9) = 0;
        v41[80] = 61;
        v41[81] = 0;
        *((_WORD *)v41 + 41) = 0;
        *((_DWORD *)v41 + 21) = 2;
        *(_OWORD *)(v41 + 88) = 0u;
        *(_OWORD *)(v41 + 104) = 0u;
        *((_DWORD *)v41 + 30) = 0;
        *(_QWORD *)v41 = v29;
        v47 = v29[1];
        v46 = v29 + 1;
        v45 = v47;
        *((_QWORD *)v41 + 1) = v47;
        if (v47)
          *(_QWORD *)(v45 + 16) = v41 + 8;
        *((_QWORD *)v41 + 2) = v46;
        *v46 = v41;
        if (*((_QWORD *)v41 + 4))
        {
          **((_QWORD **)v41 + 6) = *((_QWORD *)v41 + 5);
          v80 = *((_QWORD *)v41 + 5);
          if (v80)
            *(_QWORD *)(v80 + 16) = *((_QWORD *)v41 + 6);
        }
        *v43 = v7;
        if (v7)
        {
          v48 = (unsigned __int8 ****)(v7 + 1);
          v49 = v7[1];
          *((_QWORD *)v41 + 5) = v49;
          if (v49)
            *((_QWORD *)v49 + 2) = v41 + 40;
          *((_QWORD *)v41 + 6) = v48;
          *v48 = v43;
        }
        *((_WORD *)v41 + 41) = 2 * (v40 & 0x3F);
        v41[124] = 1;
        LOWORD(v104) = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v44, &v100, v97, v98);
        if (v95)
        {
          v70 = (char *)v94;
          v71 = (char *)v94 + 16 * v95;
          v72 = (unsigned __int8 **)(v42 + 112);
          do
          {
            v73 = *(_DWORD *)v70;
            v74 = (unsigned __int8 *)*((_QWORD *)v70 + 1);
            if (v74)
            {
              if (!v73)
              {
                v91[0] = *((_QWORD *)v70 + 1);
                v86 = v72;
                llvm::MetadataTracking::track((uint64_t)v91, v74, 2);
                v72 = v86;
                v75 = *v86;
                goto LABEL_107;
              }
            }
            else
            {
              v75 = *v72;
              if (!*v72 && (v42[87] & 0x20) == 0)
                goto LABEL_104;
              if (!v73)
              {
                v91[0] = 0;
LABEL_107:
                if (v75)
                {
                  v88 = v72;
                  llvm::MetadataTracking::untrack((uint64_t)v72, v75);
                  v72 = v88;
                }
                v77 = (unsigned __int8 *)v91[0];
                *v72 = (unsigned __int8 *)v91[0];
                if (v77)
                {
                  v87 = v72;
                  llvm::MetadataTracking::retrack((uint64_t)v91, v77, (uint64_t)v72);
                  v72 = v87;
                }
                goto LABEL_104;
              }
            }
            v85 = v71;
            v76 = v72;
            llvm::Value::setMetadata(v44, *(_DWORD *)v70, (llvm::MDNode *)v74);
            v72 = v76;
            v71 = v85;
LABEL_104:
            v70 += 16;
          }
          while (v70 != v71);
        }
        v50 = (llvm::Value *)v7;
LABEL_73:
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, v50, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v10 + 40) + 40, (uint64_t ***)v10);
        v60 = *(_QWORD *)(v10 + 24);
        v61 = *(_QWORD **)(v10 + 32);
        *v61 = v60;
        *(_QWORD *)(v60 + 8) = v61;
        *(_QWORD *)(v10 + 24) = 0;
        *(_QWORD *)(v10 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v10);
        if (v94 != &v96)
          free(v94);
        if (++v8 == v90)
          goto LABEL_118;
      }
      v30 = (llvm::PointerType *)*v29;
      if ((*(_WORD *)(a1 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)a1);
        v7 = *(unsigned __int8 ***)(a1 + 88);
        if ((*(_WORD *)(a1 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)a1);
          v31 = *(unsigned __int8 ***)(a1 + 88);
LABEL_37:
          v32 = &v31[5 * *(_QWORD *)(a1 + 96)];
          while (v7 != v32)
          {
            if (llvm::Value::isSwiftError((llvm::Value *)v7))
              goto LABEL_54;
            v7 += 5;
          }
          v36 = *(_QWORD *)(a1 + 80);
          if (v36)
            v37 = (llvm::BasicBlock *)(v36 - 24);
          else
            v37 = 0;
          v38 = llvm::BasicBlock::getFirstNonPHIOrDbg(v37, 1);
          sub_1C4773D54((uint64_t)&v100, (uint64_t)v38, 0, 0, 0);
          v92 = 257;
          v7 = sub_1C486A5CC((uint64_t *)&v100, v30, 0, (uint64_t)v91);
          *((_WORD *)v7 + 9) |= 0x80u;
          if (v100 != &v102)
            free(v100);
          goto LABEL_54;
        }
      }
      else
      {
        v7 = *(unsigned __int8 ***)(a1 + 88);
      }
      v31 = v7;
      goto LABEL_37;
    }
LABEL_118:
    if (!a3)
      *(_DWORD *)(a2 + 176) = 0;
  }
}

uint64_t sub_1C605A0E0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  while (1)
  {
    if (a1 == a2)
      return 0;
    v2 = *(unsigned __int8 *)(a1 + 16);
    if (v2 == 84)
      break;
    v3 = 1;
    if (v2 == 33 || v2 == 39)
      return v3;
LABEL_10:
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      v6 = v5 == *(_QWORD *)(a1 + 40) + 40;
    else
      v6 = 1;
    if (v6)
      a1 = 0;
    else
      a1 = v5 - 24;
  }
  v4 = *(_QWORD *)(a1 - 32);
  if (v4 && !*(_BYTE *)(v4 + 16) && *(_QWORD *)(v4 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v4 + 33) & 0x20) != 0)
    goto LABEL_10;
  return 1;
}

uint64_t sub_1C605A164(uint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  int32x2_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48[3];
  char v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[10];
  int v53;
  __int16 v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _QWORD v59[4];

  v59[3] = *MEMORY[0x1E0C80C00];
  v40 = a1;
  v41 = 0;
  v42 = a2;
  v43 = a3;
  v44 = a4;
  v47 = 128;
  v5 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v6 = 0;
  v45 = v5;
  v46 = 0;
  do
  {
    v7 = &v5[v6];
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = -4096;
    *(_QWORD *)v7 = &unk_1E814DA10;
    *((_QWORD *)v7 + 1) = 2;
    v6 += 64;
    *((_QWORD *)v7 + 4) = 0;
  }
  while (v6 != 0x2000);
  LOBYTE(v48[0]) = 0;
  v49 = 0;
  v8 = **a1;
  v50 = v52;
  v51 = 0x200000000;
  v52[6] = v8;
  v52[7] = &v58;
  v52[8] = v59;
  v52[9] = 0;
  v53 = 0;
  v54 = 512;
  v55 = 7;
  v52[4] = 0;
  v52[5] = 0;
  v56 = 0;
  v57 = 0;
  v58 = &unk_1E8167888;
  v59[0] = &unk_1E8167A08;
  v59[1] = 0;
  v59[2] = 0;
  sub_1C605A6FC((uint64_t)&v40);
  v9 = v41;
  if (v50 != v52)
    free(v50);
  if (v49)
  {
    sub_1C4E43068((uint64_t)v48);
    MEMORY[0x1CAA32FB4](v48[0], 8);
    v49 = 0;
  }
  v10 = v45;
  if (v47)
  {
    v11 = &v45[8 * (unint64_t)v47];
    do
    {
      v12 = v10[3];
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = v10[7];
        if (v13)
        {
          if (v13 != -8192 && v13 != -4096)
          {
            v14 = v10[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v14 = v10[6];
            v15 = (unint64_t *)v10[6];
            if (v15)
            {
              *v15 = *v15 & 7 | v14;
            }
            else
            {
              v16 = v10[7];
              v17 = ***(int32x2_t ****)v16;
              v18 = (unint64_t)v17[303];
              if (v18 <= v14)
              {
                v19 = v17[305].u32[0];
                if (v18 + 16 * v19 > v14)
                {
                  v20 = v19 - 1;
                  LODWORD(v21) = v20 & ((v16 >> 4) ^ (v16 >> 9));
                  v22 = (uint64_t *)(v18 + 16 * v21);
                  v23 = *v22;
                  if (v16 == *v22)
                  {
LABEL_21:
                    *v22 = -8192;
                    v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                    v16 = v10[7];
                  }
                  else
                  {
                    v24 = 1;
                    while (v23 != -4096)
                    {
                      v25 = v21 + v24++;
                      v21 = v25 & v20;
                      v23 = *(_QWORD *)(v18 + 16 * v21);
                      if (v16 == v23)
                      {
                        v22 = (uint64_t *)(v18 + 16 * v21);
                        goto LABEL_21;
                      }
                    }
                  }
                  *(_BYTE *)(v16 + 17) &= ~1u;
                }
              }
            }
            v12 = v10[3];
          }
        }
      }
      if (v12 != -4096 && v12 != -8192 && v12 != 0)
      {
        v27 = v10[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v27 = v10[2];
        v28 = (unint64_t *)v10[2];
        if (v28)
        {
          *v28 = *v28 & 7 | v27;
        }
        else
        {
          v29 = v10[3];
          v30 = ***(int32x2_t ****)v29;
          v31 = (unint64_t)v30[303];
          if (v31 <= v27)
          {
            v32 = v30[305].u32[0];
            if (v31 + 16 * v32 > v27)
            {
              v33 = v32 - 1;
              LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
              v35 = (uint64_t *)(v31 + 16 * v34);
              v36 = *v35;
              if (v29 == *v35)
              {
LABEL_40:
                *v35 = -8192;
                v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
                v29 = v10[3];
              }
              else
              {
                v37 = 1;
                while (v36 != -4096)
                {
                  v38 = v34 + v37++;
                  v34 = v38 & v33;
                  v36 = *(_QWORD *)(v31 + 16 * v34);
                  if (v29 == v36)
                  {
                    v35 = (uint64_t *)(v31 + 16 * v34);
                    goto LABEL_40;
                  }
                }
              }
              *(_BYTE *)(v29 + 17) &= ~1u;
            }
          }
        }
      }
      v10 += 8;
    }
    while (v10 != v11);
    v10 = v45;
  }
  MEMORY[0x1CAA32FB4](v10, 8);
  return v9;
}

void sub_1C605A4CC(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  llvm::GetElementPtrInst *v5;
  uint64_t ***v6;
  llvm::PointerType *v7;
  uint64_t *v8;
  char v9;
  char v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  _QWORD v27[4];
  __int16 v28;
  unsigned __int8 *v29;

  v5 = *(llvm::GetElementPtrInst **)(a2 + 208);
  v27[0] = "ResumeFn.addr";
  v28 = 259;
  v6 = sub_1C5391F90((uint64_t *)a1, v5, a3, 0, 0, (uint64_t)v27);
  v8 = llvm::ConstantPointerNull::get(**(llvm::ConstantPointerNull ***)(*(_QWORD *)(a2 + 208) + 16), v7);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40) + 272, *v8);
  v10 = v9;
  v11 = (char *)operator new(0x80uLL);
  v12 = v11;
  *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 8) = **(_QWORD **)*v8 + 1576;
  v13 = (llvm::Value *)(v11 + 64);
  *((_QWORD *)v11 + 3) = v11 + 64;
  *((_QWORD *)v11 + 7) = v11 + 64;
  *((_QWORD *)v11 + 9) = 0;
  v11[80] = 61;
  v11[81] = 0;
  *((_DWORD *)v11 + 21) = 2;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *((_DWORD *)v11 + 30) = 0;
  v14 = v8 + 1;
  v15 = v8[1];
  *(_QWORD *)v11 = v8;
  *((_QWORD *)v11 + 1) = v15;
  if (v15)
    *(_QWORD *)(v15 + 16) = v11 + 8;
  *((_QWORD *)v11 + 2) = v14;
  *v14 = v11;
  *((_QWORD *)v11 + 4) = v6;
  if (v6)
  {
    v18 = v6[1];
    v17 = v6 + 1;
    v16 = v18;
    *((_QWORD *)v11 + 5) = v18;
    if (v18)
      v16[2] = (uint64_t *)(v11 + 40);
    *((_QWORD *)v11 + 6) = v17;
    *v17 = v11 + 32;
  }
  *((_WORD *)v11 + 41) = 2 * (v10 & 0x3F);
  v11[124] = 1;
  v28 = 257;
  (*(void (**)(_QWORD, llvm::Value *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, v27, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v19 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD *)a1 + 16 * v19;
    v22 = (unsigned __int8 **)(v12 + 112);
    do
    {
      v23 = *(_DWORD *)v20;
      v24 = *(unsigned __int8 **)(v20 + 8);
      if (v24)
      {
        if (!v23)
        {
          v29 = *(unsigned __int8 **)(v20 + 8);
          llvm::MetadataTracking::track((uint64_t)&v29, v24, 2);
          v25 = *v22;
          goto LABEL_20;
        }
      }
      else
      {
        v25 = *v22;
        if (!*v22 && (v12[87] & 0x20) == 0)
          goto LABEL_17;
        if (!v23)
        {
          v29 = 0;
LABEL_20:
          if (v25)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v25);
          v26 = v29;
          *v22 = v29;
          if (v26)
            llvm::MetadataTracking::retrack((uint64_t)&v29, v26, (uint64_t)(v12 + 112));
          goto LABEL_17;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v20, (llvm::MDNode *)v24);
LABEL_17:
      v20 += 16;
    }
    while (v20 != v21);
  }
}

void sub_1C605A6FC(uint64_t a1)
{
  uint64_t ***v2;
  llvm::UndefValue **v3;
  llvm::UndefValue **v4;
  llvm::UndefValue **i;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::UndefValue **v10;
  _QWORD *v12;
  unint64_t v13;
  llvm::UndefValue **v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  llvm::UndefValue ***v20;
  llvm::UndefValue **v21;
  int v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  llvm::Type *v26;
  llvm::UndefValue *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  llvm::UndefValue **v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  llvm::UndefValue ***v38;
  llvm::UndefValue **v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  int32x2_t *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  llvm::GlobalValue *v56;
  int v57;
  int v58;
  int v59;
  llvm::MemorySSAUpdater *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int **v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  void *v79;
  unsigned __int8 *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t ***v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t ****v90;
  uint64_t ***v91;
  int v92;
  int v93;
  _QWORD *v94;
  void *v95;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  int32x2_t *v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t ***v108;
  unsigned __int8 *v109;
  size_t v110;
  size_t v111;
  llvm::Metadata *v112;
  llvm::GlobalValue *v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  llvm::GlobalValue *v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  llvm **v144;
  uint64_t v145;
  llvm *v146;
  uint64_t v147;
  int v148;
  int v149;
  llvm::UndefValue **v150;
  _QWORD *v152;
  unint64_t v153;
  llvm::UndefValue **v154;
  int32x2_t *v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  llvm::UndefValue ***v160;
  llvm::UndefValue **v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  __int16 v169;
  llvm::UndefValue **v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  void *v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  int v183;
  llvm::UndefValue **v184;
  _QWORD *v185;
  uint64_t *v186;
  unint64_t v187;
  llvm::UndefValue **v188;
  int32x2_t *v189;
  unint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  llvm::UndefValue ***v194;
  llvm::UndefValue **v195;
  int v196;
  int v197;
  llvm::UndefValue **v198;
  _QWORD *v199;
  unint64_t v200;
  llvm::UndefValue **v201;
  int32x2_t *v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  llvm::UndefValue ***v207;
  llvm::UndefValue **v208;
  int v209;
  int v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t j;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  BOOL v234;
  uint64_t v235;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t *v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  unsigned __int8 *v247;
  llvm::PointerType *v248;
  uint64_t v249;
  unsigned __int8 *v250;
  uint64_t v251;
  uint64_t v252;
  unsigned __int8 *v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  llvm::Value *v258;
  llvm::UndefValue **v259;
  _QWORD *v260;
  unint64_t v261;
  llvm::UndefValue **v262;
  int32x2_t *v263;
  unint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  llvm::UndefValue ***v268;
  llvm::UndefValue **v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  unsigned __int8 *v274;
  char v275;
  char v276;
  char *v277;
  char *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned __int8 **v285;
  int v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  unsigned __int8 *v289;
  uint64_t v290;
  unsigned __int8 *v291;
  uint64_t **v292;
  uint64_t v293;
  unsigned __int8 **v294;
  unsigned __int8 *v295;
  llvm::GetElementPtrInst *v296;
  unsigned int v297;
  unsigned __int8 *v298;
  llvm::UndefValue **v299;
  _QWORD *v301;
  unint64_t v302;
  llvm::UndefValue **v303;
  int32x2_t *v304;
  unint64_t v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  llvm::UndefValue ***v309;
  llvm::UndefValue **v310;
  int v311;
  int v312;
  llvm::Value *v313;
  llvm::Value *v314;
  uint64_t v315;
  unsigned __int8 *v316;
  llvm::UndefValue **v317;
  _QWORD *v319;
  llvm::Type *v320;
  const llvm::APInt *v321;
  unint64_t v322;
  llvm::UndefValue **v323;
  int32x2_t *v324;
  unint64_t v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  llvm::UndefValue ***v329;
  llvm::UndefValue **v330;
  int v331;
  int v332;
  llvm::ValueAsMetadata *v333;
  llvm::UndefValue ***v334;
  uint64_t v335;
  llvm::UndefValue **v336;
  llvm::UndefValue *v337;
  uint64_t v338;
  int v339;
  llvm::UndefValue **v340;
  _QWORD *v341;
  llvm::Type *v342;
  unint64_t v343;
  llvm::UndefValue **v344;
  int32x2_t *v345;
  unint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  llvm::UndefValue ***v350;
  llvm::UndefValue **v351;
  int v352;
  int v353;
  llvm::UndefValue **v354;
  _QWORD *v356;
  unint64_t v357;
  llvm::UndefValue **v358;
  int32x2_t *v359;
  unint64_t v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  llvm::UndefValue ***v364;
  llvm::UndefValue **v365;
  int v366;
  int v367;
  llvm::ValueAsMetadata *v368;
  unint64_t v370;
  uint64_t v371;
  __int16 v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  llvm::ValueAsMetadata *v378;
  _QWORD **v379;
  llvm::ValueAsMetadata *v380;
  uint64_t v381;
  _QWORD *v382;
  llvm::Value *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  llvm::ValueAsMetadata *v388;
  int32x2_t *v389;
  unint64_t v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  llvm::ValueAsMetadata **v394;
  llvm::ValueAsMetadata *v395;
  int v396;
  int v397;
  uint64_t v398;
  unsigned int v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  llvm::BasicBlock *v403;
  uint64_t *v404;
  void *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  void *v410;
  llvm::GetElementPtrInst *v411;
  uint64_t **v412;
  uint64_t ***v413;
  uint64_t v414;
  char v415;
  char v416;
  char *v417;
  char *v418;
  llvm::Constant **v419;
  uint64_t **v420;
  _QWORD *v421;
  uint64_t **v422;
  llvm::Type *v423;
  uint64_t v424;
  llvm::Value **NullValue;
  llvm::Value *v426;
  char *v427;
  uint64_t v428;
  unsigned __int8 **v429;
  char *v430;
  _QWORD *v431;
  uint64_t ***v432;
  uint64_t ***v433;
  uint64_t **v434;
  uint64_t **v435;
  uint64_t v436;
  int v437;
  _BOOL8 v438;
  uint64_t v439;
  llvm::ConstantInt *v440;
  unint64_t v441;
  unint64_t v442;
  llvm::Value *v443;
  uint64_t v444;
  llvm::UndefValue ***v445;
  llvm::UndefValue ***v446;
  llvm::UndefValue **v447;
  _QWORD *v449;
  unint64_t v450;
  llvm::UndefValue **v451;
  int32x2_t *v452;
  unint64_t v453;
  uint64_t v454;
  unsigned int v455;
  uint64_t v456;
  llvm::UndefValue ***v457;
  llvm::UndefValue **v458;
  int v459;
  int v460;
  llvm::ValueAsMetadata *v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  llvm::UndefValue ***v466;
  llvm::UndefValue ***v467;
  llvm::UndefValue **v468;
  _QWORD *v470;
  unint64_t v472;
  llvm::UndefValue **v473;
  int32x2_t *v474;
  unint64_t v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  llvm::UndefValue ***v479;
  llvm::UndefValue **v480;
  int v481;
  int v482;
  uint64_t k;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t m;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  char *v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unsigned __int8 *v502;
  uint64_t v503;
  unsigned __int8 *v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  unsigned int v509;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  _QWORD *v516;
  _DWORD *v517;
  llvm::UndefValue **v518;
  _QWORD *v520;
  unint64_t v521;
  llvm::UndefValue **v522;
  int32x2_t *v523;
  unint64_t v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  llvm::UndefValue ***v528;
  llvm::UndefValue **v529;
  int v530;
  int v531;
  uint64_t v532;
  uint64_t v533;
  _QWORD *v534;
  unsigned int v535;
  int v536;
  uint64_t v537;
  uint64_t v538;
  llvm::Type **v539;
  int v540;
  unsigned __int8 *v541;
  llvm::BasicBlock *v542;
  llvm::BasicBlock *v543;
  uint64_t *v544;
  uint64_t v545;
  unsigned __int8 *v546;
  void *v547;
  uint64_t v548;
  _BYTE v549[32];
  void *v550;
  uint64_t v551;
  _BYTE v552[48];
  void *v553;
  void *v554;
  uint64_t v555;
  llvm::UndefValue **v556;
  uint64_t v557;
  uint64_t v558;
  void *v559;
  uint64_t v560;
  _BYTE v561[4];
  int v562;
  char *v563[2];
  uint64_t v564;
  void *v565;
  uint64_t v566;
  _BYTE v567[72];
  uint64_t v568;
  uint64_t v569;
  llvm::ValueAsMetadata *v570;
  uint64_t v571[2];
  int v572;
  uint64_t v573;
  uint64_t v574;
  char v575;
  int v576;
  uint64_t v577[4];
  __int16 v578;
  uint64_t v579;

  v579 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 8) = sub_1C605D724(*(uint64_t ****)a1, *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 16), (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 24), *(_QWORD **)(a1 + 248));
  v550 = v552;
  v551 = 0x600000000;
  v2 = *(uint64_t ****)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 18) & 1) == 0)
  {
    v3 = (llvm::UndefValue **)v2[11];
LABEL_5:
    v4 = v3;
    goto LABEL_6;
  }
  llvm::Function::BuildLazyArguments(*(llvm::Function **)a1);
  v3 = (llvm::UndefValue **)v2[11];
  if ((*((_WORD *)v2 + 9) & 1) == 0)
    goto LABEL_5;
  llvm::Function::BuildLazyArguments((llvm::Function *)v2);
  v4 = (llvm::UndefValue **)v2[11];
LABEL_6:
  for (i = &v4[5 * (_QWORD)v2[12]]; v3 != i; v3 += 5)
  {
    v24 = operator new(0x60uLL);
    v25 = (uint64_t)(v24 + 8);
    v24[13] = v24[13] & 0x38000000 | 1;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 3) = v24 + 8;
    v27 = llvm::UndefValue::get(*v3, v26);
    LOWORD(v557) = 257;
    llvm::FreezeInst::FreezeInst(v25, v27, (uint64_t)&v553, 0);
    v28 = v551;
    if (v551 >= (unint64_t)HIDWORD(v551))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v550, (uint64_t)v552, v551 + 1, 8);
      v28 = v551;
    }
    *((_QWORD *)v550 + v28) = v25;
    LODWORD(v551) = v551 + 1;
    v29 = *((_QWORD *)v550 + v551 - 1);
    v554 = (void *)2;
    v555 = 0;
    v556 = v3;
    if (v3 != (llvm::UndefValue **)-8192 && v3 != (llvm::UndefValue **)-4096 && v3)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
    v553 = &unk_1E814DA10;
    v557 = a1 + 40;
    v30 = sub_1C52E2ED8(a1 + 40, &v553);
    if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
    {
      v31 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
      if (v555)
      {
        *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v31;
      }
      else
      {
        v32 = v556;
        v33 = **(int32x2_t ***)*v556;
        v34 = (unint64_t)v33[303];
        if (v34 <= v31)
        {
          v35 = v33[305].u32[0];
          if (v34 + 16 * v35 > v31)
          {
            v36 = v35 - 1;
            LODWORD(v37) = v36 & ((v556 >> 4) ^ (v556 >> 9));
            v38 = (llvm::UndefValue ***)(v34 + 16 * v37);
            v39 = *v38;
            if (v556 == *v38)
            {
LABEL_46:
              *v38 = (llvm::UndefValue **)-8192;
              v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
              v32 = v556;
            }
            else
            {
              v40 = 1;
              while (v39 != (llvm::UndefValue **)-4096)
              {
                v41 = v37 + v40++;
                v37 = v41 & v36;
                v39 = *(llvm::UndefValue ***)(v34 + 16 * v37);
                if (v556 == v39)
                {
                  v38 = (llvm::UndefValue ***)(v34 + 16 * v37);
                  goto LABEL_46;
                }
              }
            }
            *((_BYTE *)v32 + 17) &= ~1u;
          }
        }
      }
    }
    v42 = v30[7];
    if (v42 != v29)
    {
      if (v42 && v42 != -8192 && v42 != -4096)
      {
        v43 = v30[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v43 = v30[6];
        v44 = (unint64_t *)v30[6];
        if (v44)
        {
          *v44 = *v44 & 7 | v43;
        }
        else
        {
          v45 = v30[7];
          v46 = ***(int32x2_t ****)v45;
          v47 = (unint64_t)v46[303];
          if (v47 <= v43)
          {
            v48 = v46[305].u32[0];
            if (v47 + 16 * v48 > v43)
            {
              v49 = v48 - 1;
              LODWORD(v50) = v49 & ((v45 >> 4) ^ (v45 >> 9));
              v51 = (uint64_t *)(v47 + 16 * v50);
              v52 = *v51;
              if (v45 == *v51)
              {
LABEL_67:
                *v51 = -8192;
                v46[304] = vadd_s32(v46[304], (int32x2_t)0x1FFFFFFFFLL);
                v45 = v30[7];
              }
              else
              {
                v53 = 1;
                while (v52 != -4096)
                {
                  v54 = v50 + v53++;
                  v50 = v54 & v49;
                  v52 = *(_QWORD *)(v47 + 16 * v50);
                  if (v45 == v52)
                  {
                    v51 = (uint64_t *)(v47 + 16 * v50);
                    goto LABEL_67;
                  }
                }
              }
              *(_BYTE *)(v45 + 17) &= ~1u;
            }
          }
        }
      }
      v30[7] = v29;
      if (v29 != -8192 && v29 != -4096 && v29)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v30 + 5));
    }
  }
  v6 = *(_DWORD **)(a1 + 24);
  if ((v6[50] - 1) < 2)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if ((*(_WORD *)(v7 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
      v6 = *(_DWORD **)(a1 + 24);
    }
    v8 = *(_QWORD *)(v7 + 88);
    v9 = *(_QWORD *)(*(_QWORD *)v6 - 32 * (*(_DWORD *)(*(_QWORD *)v6 + 20) & 0x7FFFFFF));
    v10 = *(llvm::UndefValue ***)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 64);
    v554 = (void *)2;
    v555 = 0;
    v556 = v10;
    if (v10 != (llvm::UndefValue **)-8192 && v10 != (llvm::UndefValue **)-4096 && v10 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
    v553 = &unk_1E814DA10;
    v557 = a1 + 40;
    v12 = sub_1C52E2ED8(a1 + 40, &v553);
    if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
    {
      v13 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
      if (v555)
      {
        *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v13;
      }
      else
      {
        v14 = v556;
        v15 = **(int32x2_t ***)*v556;
        v16 = (unint64_t)v15[303];
        if (v16 <= v13)
        {
          v17 = v15[305].u32[0];
          if (v16 + 16 * v17 > v13)
          {
            v18 = v17 - 1;
            LODWORD(v19) = v18 & ((v556 >> 4) ^ (v556 >> 9));
            v20 = (llvm::UndefValue ***)(v16 + 16 * v19);
            v21 = *v20;
            if (v556 == *v20)
            {
LABEL_27:
              *v20 = (llvm::UndefValue **)-8192;
              v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
              v14 = v556;
            }
            else
            {
              v22 = 1;
              while (v21 != (llvm::UndefValue **)-4096)
              {
                v23 = v19 + v22++;
                v19 = v23 & v18;
                v21 = *(llvm::UndefValue ***)(v16 + 16 * v19);
                if (v556 == v21)
                {
                  v20 = (llvm::UndefValue ***)(v16 + 16 * v19);
                  goto LABEL_27;
                }
              }
            }
            *((_BYTE *)v14 + 17) &= ~1u;
          }
        }
      }
    }
    v55 = v12[7];
    if (v55 != v8)
    {
      if (v55 && v55 != -8192 && v55 != -4096)
      {
        v96 = v12[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v96 = v12[6];
        v97 = (unint64_t *)v12[6];
        if (v97)
        {
          *v97 = *v97 & 7 | v96;
        }
        else
        {
          v98 = v12[7];
          v99 = ***(int32x2_t ****)v98;
          v100 = (unint64_t)v99[303];
          if (v100 <= v96)
          {
            v101 = v99[305].u32[0];
            if (v100 + 16 * v101 > v96)
            {
              v102 = v101 - 1;
              LODWORD(v103) = v102 & ((v98 >> 4) ^ (v98 >> 9));
              v104 = (uint64_t *)(v100 + 16 * v103);
              v105 = *v104;
              if (v98 == *v104)
              {
LABEL_133:
                *v104 = -8192;
                v99[304] = vadd_s32(v99[304], (int32x2_t)0x1FFFFFFFFLL);
                v98 = v12[7];
              }
              else
              {
                v106 = 1;
                while (v105 != -4096)
                {
                  v107 = v103 + v106++;
                  v103 = v107 & v102;
                  v105 = *(_QWORD *)(v100 + 16 * v103);
                  if (v98 == v105)
                  {
                    v104 = (uint64_t *)(v100 + 16 * v103);
                    goto LABEL_133;
                  }
                }
              }
              *(_BYTE *)(v98 + 17) &= ~1u;
            }
          }
        }
      }
      v12[7] = v8;
      if (v8 != -8192 && v8 != -4096 && v8)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v12 + 5));
    }
  }
  v547 = v549;
  v548 = 0x400000000;
  v56 = *(llvm::GlobalValue **)(a1 + 8);
  v57 = *((_DWORD *)v56 + 8);
  *((_DWORD *)v56 + 8) = v57 & 0xFFFFFFF0;
  v58 = v57 & 0x30;
  if ((v57 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v56) & 1) == 0)
    *((_DWORD *)v56 + 8) |= 0x4000u;
  v59 = v57 & 0xF;
  llvm::CloneFunctionInto(*(_QWORD *)(a1 + 8), *(const llvm::Function **)a1, a1 + 40, 0, (uint64_t)&v547, "", 0, 0, 0);
  v61 = *(_QWORD *)(a1 + 8);
  v62 = **(uint64_t ***)v61;
  if ((*(_BYTE *)(v61 + 23) & 0x20) == 0)
    goto LABEL_139;
  v63 = *v62;
  v553 = *(void **)(a1 + 8);
  v64 = *(_DWORD *)(v63 + 2496);
  if (!v64)
  {
    v94 = 0;
LABEL_122:
    v68 = sub_1C541AB24(v63 + 2480, (uint64_t)&v553, (uint64_t *)&v553, v94);
    v95 = v553;
    v68[4] = 0;
    v68[3] = 0;
    *v68 = v95;
    v68[1] = v68 + 3;
    v68[2] = 0x100000000;
    goto LABEL_91;
  }
  v65 = *(_QWORD *)(v63 + 2480);
  v66 = v64 - 1;
  v67 = v66 & ((v61 >> 4) ^ (v61 >> 9));
  v68 = (_QWORD *)(v65 + 40 * v67);
  v69 = *v68;
  if (*v68 != v61)
  {
    v70 = 0;
    v71 = 1;
    while (v69 != -4096)
    {
      if (v70)
        v72 = 0;
      else
        v72 = v69 == -8192;
      if (v72)
        v70 = v68;
      v73 = v67 + v71++;
      v67 = v73 & v66;
      v68 = (_QWORD *)(v65 + 40 * v67);
      v69 = *v68;
      if (*v68 == v61)
        goto LABEL_91;
    }
    if (v70)
      v94 = v70;
    else
      v94 = v68;
    goto LABEL_122;
  }
LABEL_91:
  v74 = *((unsigned int *)v68 + 4);
  if ((_DWORD)v74)
  {
    v75 = (unsigned int **)(v68[1] + 8);
    v76 = 16 * v74;
    while (*((_DWORD *)v75 - 2))
    {
      v75 += 2;
      v76 -= 16;
      if (!v76)
        goto LABEL_139;
    }
    v77 = *v75;
    if (*v75)
    {
      v78 = *(_QWORD *)(a1 + 248);
      if (v78)
      {
        v79 = *(void **)(v78 + 48);
        v553 = v79;
        if (v79)
        {
          llvm::MetadataTracking::track((uint64_t)&v553, (unsigned __int8 *)v79, 2);
          v80 = (unsigned __int8 *)v553;
          if (v553)
          {
            v81 = v77;
            if (*(_BYTE *)v77 != 15)
              v81 = *(unsigned int **)&v77[-2 * v77[2]];
            v82 = (unsigned int *)*((_QWORD *)v553 - *((unsigned int *)v553 + 2));
            if (*(_BYTE *)v82 != 15)
              v82 = *(unsigned int **)&v82[-2 * v82[2]];
            if (v81 == v82)
              v77[7] = *((_DWORD *)v553 + 1);
            llvm::MetadataTracking::untrack((uint64_t)&v553, v80);
          }
        }
      }
      v83 = &v77[-2 * v77[2]];
      if (!*((_QWORD *)v83 + 6))
      {
        v84 = *((_QWORD *)v83 + 5);
        if (v84)
        {
          if (*(_DWORD *)(v84 + 24) == 30)
          {
            v85 = *(uint64_t ****)(a1 + 8);
            if ((*((_BYTE *)v85 + 23) & 0x10) == 0)
            {
              v110 = 0;
              v109 = (unsigned __int8 *)&byte_1C871356D;
              goto LABEL_138;
            }
            v86 = ***v85;
            v87 = *(_QWORD *)(v86 + 152);
            v88 = *(unsigned int *)(v86 + 168);
            if ((_DWORD)v88)
            {
              LODWORD(v89) = (v88 - 1) & ((v85 >> 4) ^ (v85 >> 9));
              v90 = (uint64_t ****)(v87 + 16 * v89);
              v91 = *v90;
              if (*v90 == v85)
              {
LABEL_137:
                v108 = v90[1];
                v111 = (size_t)*v108;
                v109 = (unsigned __int8 *)(v108 + 2);
                v110 = v111;
LABEL_138:
                v112 = (llvm::Metadata *)llvm::MDString::get(v62, v109, v110);
                llvm::MDNode::replaceOperandWith((llvm::MDNode *)v77, 3, v112);
                goto LABEL_139;
              }
              v92 = 1;
              while (v91 != (uint64_t ***)-4096)
              {
                v93 = v89 + v92++;
                v89 = v93 & (v88 - 1);
                v91 = *(uint64_t ****)(v87 + 16 * v89);
                if (v91 == v85)
                {
                  v90 = (uint64_t ****)(v87 + 16 * v89);
                  goto LABEL_137;
                }
              }
            }
            v90 = (uint64_t ****)(v87 + 16 * v88);
            goto LABEL_137;
          }
        }
      }
    }
  }
LABEL_139:
  v113 = *(llvm::GlobalValue **)(a1 + 8);
  v114 = *((_DWORD *)v113 + 8);
  if ((v59 - 7) >= 2)
    v115 = *((_DWORD *)v113 + 8);
  else
    v115 = v114 & 0xFFFFFFC0;
  v116 = v115 & 0xFFFFFFF0 | v59;
  *((_DWORD *)v113 + 8) = v116;
  if ((v59 - 7) < 2)
    goto LABEL_750;
  if ((v114 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v113) & 1) == 0)
  {
    v116 = *((_DWORD *)v113 + 8);
LABEL_750:
    *((_DWORD *)v113 + 8) = v116 | 0x4000;
  }
  v117 = v57 & 0xC0;
  v118 = v57 & 0x300;
  v119 = *(llvm::GlobalValue **)(a1 + 8);
  v120 = *((_DWORD *)v119 + 8);
  v121 = v120 & 0xFFFFFFCF | v58;
  *((_DWORD *)v119 + 8) = v121;
  if ((v120 & 0xFu) - 7 < 2)
  {
LABEL_170:
    *((_DWORD *)v119 + 8) = v121 | 0x4000;
    goto LABEL_146;
  }
  if (v58 && (llvm::GlobalValue::hasExternalWeakLinkage(v119) & 1) == 0)
  {
    v121 = *((_DWORD *)v119 + 8);
    goto LABEL_170;
  }
LABEL_146:
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFF3F | v117;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFCFF | v118;
  v122 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
  v545 = 0;
  v123 = *(_QWORD *)(a1 + 24);
  v124 = *(_DWORD *)(v123 + 200);
  if ((v124 - 1) < 2)
  {
    v545 = *(_QWORD *)(*(_QWORD *)(v123 + 264) + 112);
    v128 = *(_QWORD *)(*(_QWORD *)v123 - 32 * (*(_DWORD *)(*(_QWORD *)v123 + 20) & 0x7FFFFFF));
    v129 = (_QWORD *)(v128 - 32 * (*(_DWORD *)(v128 + 20) & 0x7FFFFFF));
    v130 = (uint64_t *)(*v129 + 24);
    if (*(_DWORD *)(*v129 + 32) >= 0x41u)
      v130 = (uint64_t *)*v130;
    v131 = *v130;
    v132 = v129[4];
    v133 = (unint64_t *)(v132 + 24);
    if (*(_DWORD *)(v132 + 32) >= 0x41u)
      v133 = (unint64_t *)*v133;
    v134 = *v133;
    v135 = __clz(v134) ^ 0x3F;
    if (v134)
      v136 = v135;
    else
      v136 = 0;
    goto LABEL_178;
  }
  if (v124 == 3)
  {
    v137 = *(_QWORD *)(*(_QWORD *)a1 + 112);
    if (v137)
    {
      v138 = *(_DWORD *)(v123 + 276) + 2;
      if (v138 < *(_DWORD *)(v137 + 8))
      {
        v532 = *(_QWORD *)(v137 + 8 * v138 + 40);
        if (v532)
        {
          if ((*(_BYTE *)(v532 + 19) & 0x40) != 0)
          {
            v533 = *(_QWORD *)(*(_QWORD *)(a1 + 248) - 32 * (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 20) & 0x7FFFFFF));
            v534 = (_QWORD *)(v533 + 24);
            if (*(_DWORD *)(v533 + 32) >= 0x41u)
              v534 = (_QWORD *)*v534;
            v535 = *(_DWORD *)v534;
            v536 = *(_DWORD *)v534;
            v553 = v62;
            v554 = &v556;
            v555 = 0x800000000;
            llvm::AttrBuilder::addAttribute((unsigned int *)&v553, 62);
            v545 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v545, (llvm::LLVMContext *)v62, v536 + 1, (const llvm::AttrBuilder *)&v553);
            if (v554 != &v556)
              free(v554);
            if (v535 >= 0x100)
            {
              v553 = v62;
              v554 = &v556;
              v555 = 0x800000000;
              llvm::AttrBuilder::addAttribute((unsigned int *)&v553, 64);
              v545 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v545, (llvm::LLVMContext *)v62, (v535 >> 8) + 1, (const llvm::AttrBuilder *)&v553);
              if (v554 != &v556)
                free(v554);
            }
          }
        }
      }
    }
    v139 = *(_QWORD *)(*(_QWORD *)a1 + 112);
    if (v139 && *(_DWORD *)(v139 + 8))
    {
      v140 = *(_QWORD *)(v139 + 40);
      v553 = v62;
      v554 = &v556;
      v555 = 0x800000000;
      if (v140)
      {
        v141 = (char *)(v140 + 48);
        v142 = (char *)(v140 + 48 + 8 * *(unsigned int *)(v140 + 8));
      }
      else
      {
        v141 = 0;
        v142 = 0;
      }
    }
    else
    {
      v141 = 0;
      v142 = 0;
      v553 = v62;
      v554 = &v556;
      v555 = 0x800000000;
    }
    sub_1C53321EC((unsigned int *)&v554, (uint64_t)&v556, v141, v142);
    v545 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v545, (llvm::LLVMContext *)v62, -1, (const llvm::AttrBuilder *)&v553);
    if (v554 != &v556)
      free(v554);
  }
  else if (!v124)
  {
    if (v122 && *(_DWORD *)(v122 + 8))
    {
      v125 = *(_QWORD *)(v122 + 40);
      v553 = v62;
      v554 = &v556;
      v555 = 0x800000000;
      if (v125)
      {
        v126 = (char *)(v125 + 48);
        v127 = (char *)(v125 + 48 + 8 * *(unsigned int *)(v125 + 8));
      }
      else
      {
        v126 = 0;
        v127 = 0;
      }
    }
    else
    {
      v126 = 0;
      v127 = 0;
      v553 = v62;
      v554 = &v556;
      v555 = 0x800000000;
    }
    sub_1C53321EC((unsigned int *)&v554, (uint64_t)&v556, v126, v127);
    v545 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v545, (llvm::LLVMContext *)v62, -1, (const llvm::AttrBuilder *)&v553);
    if (v554 != &v556)
      free(v554);
    v143 = *(_QWORD *)(a1 + 24);
    v131 = *(_QWORD *)(v143 + 224);
    v136 = *(_BYTE *)(v143 + 216);
LABEL_178:
    sub_1C605D954((llvm::AttributeList *)&v545, (llvm::LLVMContext *)v62, v131, v136);
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 200) | 2) == 2 && (_DWORD)v548)
  {
    v144 = (llvm **)v547;
    v145 = 8 * v548;
    do
    {
      v146 = *v144++;
      llvm::changeToUnreachable(v146, 0, 0, 0, v60);
      v145 -= 8;
    }
    while (v145);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) = v545;
  v147 = *(_QWORD *)(a1 + 24);
  v148 = *(_DWORD *)(v147 + 200);
  if ((v148 - 1) >= 2)
  {
    if (v148)
      v149 = *(_DWORD *)(v147 + 272);
    else
      LOWORD(v149) = 8;
  }
  else
  {
    v149 = (*(unsigned __int16 *)(*(_QWORD *)(v147 + 264) + 18) >> 4) & 0x3FF;
  }
  *(_WORD *)(*(_QWORD *)(a1 + 8) + 18) = *(_WORD *)(*(_QWORD *)(a1 + 8) + 18) & 0xC00F | (16 * v149);
  v150 = *(llvm::UndefValue ***)(v147 + 240);
  v554 = (void *)2;
  v555 = 0;
  v556 = v150;
  if (v150 != (llvm::UndefValue **)-8192 && v150 != (llvm::UndefValue **)-4096 && v150 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
  v553 = &unk_1E814DA10;
  v557 = a1 + 40;
  v152 = sub_1C52E2ED8(a1 + 40, &v553);
  if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
  {
    v153 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
    if (v555)
    {
      *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v153;
    }
    else
    {
      v154 = v556;
      v155 = **(int32x2_t ***)*v556;
      v156 = (unint64_t)v155[303];
      if (v156 <= v153)
      {
        v157 = v155[305].u32[0];
        if (v156 + 16 * v157 > v153)
        {
          v158 = v157 - 1;
          LODWORD(v159) = v158 & ((v556 >> 4) ^ (v556 >> 9));
          v160 = (llvm::UndefValue ***)(v156 + 16 * v159);
          v161 = *v160;
          if (v556 == *v160)
          {
LABEL_205:
            *v160 = (llvm::UndefValue **)-8192;
            v155[304] = vadd_s32(v155[304], (int32x2_t)0x1FFFFFFFFLL);
            v154 = v556;
          }
          else
          {
            v162 = 1;
            while (v161 != (llvm::UndefValue **)-4096)
            {
              v163 = v159 + v162++;
              v159 = v163 & v158;
              v161 = *(llvm::UndefValue ***)(v156 + 16 * v159);
              if (v556 == v161)
              {
                v160 = (llvm::UndefValue ***)(v156 + 16 * v159);
                goto LABEL_205;
              }
            }
          }
          *((_BYTE *)v154 + 17) &= ~1u;
        }
      }
    }
  }
  v164 = v152[7];
  v165 = *(_QWORD *)(a1 + 16);
  v166 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v166)
    v167 = v166 - 24;
  else
    v167 = 0;
  v168 = *(unsigned __int8 *)(v165 + 32);
  if (v168 == 1)
  {
    v553 = "entry";
    v169 = 259;
  }
  else
  {
    if (*(_BYTE *)(v165 + 32))
    {
      v170 = *(llvm::UndefValue ***)(v165 + 8);
      if (*(_BYTE *)(v165 + 33) == 1)
        v165 = *(_QWORD *)v165;
      else
        LOBYTE(v168) = 2;
      v553 = "entry";
      v555 = v165;
      v556 = v170;
      LOBYTE(v557) = 3;
      BYTE1(v557) = v168;
      goto LABEL_220;
    }
    v169 = 256;
  }
  LOWORD(v557) = v169;
LABEL_220:
  llvm::Value::setName((uint64_t ***)v164, (uint64_t)&v553);
  sub_1C4FCEAA0(*(_QWORD *)(v167 + 56) + 72, (uint64_t *)(v167 + 24), *(_QWORD *)(v164 + 56) + 72, (uint64_t *)(v164 + 24));
  v172 = (uint64_t *)(v164 + 40);
  v171 = *(_QWORD *)(v164 + 40);
  if (v171 == v164 + 40)
  {
    v173 = 0;
  }
  else
  {
    if (v171)
      v174 = v171 - 24;
    else
      v174 = 0;
    if (*(unsigned __int8 *)(v174 + 16) - 29 >= 0xB)
      v173 = 0;
    else
      v173 = v174;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v173 + 40) + 40, (uint64_t ***)v173);
  v175 = *(_QWORD *)(v173 + 24);
  v176 = *(_QWORD **)(v173 + 32);
  *v176 = v175;
  *(_QWORD *)(v175 + 8) = v176;
  *(_QWORD *)(v173 + 24) = 0;
  *(_QWORD *)(v173 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v173);
  v177 = 0;
  v178 = *(_QWORD *)(*(_QWORD *)(v164 + 8) + 24);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v178 + 40);
  *(_QWORD *)(a1 + 160) = v178 + 24;
  v179 = *(void **)(v178 + 48);
  v553 = v179;
  if (v179)
  {
    llvm::MetadataTracking::track((uint64_t)&v553, (unsigned __int8 *)v179, 2);
    v177 = v553;
  }
  sub_1C4774EF4(a1 + 104, 0, (uint64_t)v177);
  if (v553)
    llvm::MetadataTracking::untrack((uint64_t)&v553, (unsigned __int8 *)v553);
  v544 = (uint64_t *)(a1 + 104);
  LLVMBuildUnreachable_0(a1 + 104);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v178 + 40) + 40, (uint64_t ***)v178);
  v180 = *(_QWORD *)(v178 + 24);
  v181 = *(_QWORD **)(v178 + 32);
  *v181 = v180;
  *(_QWORD *)(v180 + 8) = v181;
  *(_QWORD *)(v178 + 24) = 0;
  *(_QWORD *)(v178 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v178);
  *(_QWORD *)(a1 + 152) = v164;
  *(_QWORD *)(a1 + 160) = v172;
  v182 = *(_QWORD *)(a1 + 24);
  v183 = *(_DWORD *)(v182 + 200);
  if ((v183 - 1) < 3)
  {
    v184 = *(llvm::UndefValue ***)(a1 + 248);
    v554 = (void *)2;
    v555 = 0;
    v556 = v184;
    if (v184 != (llvm::UndefValue **)-8192 && v184 != (llvm::UndefValue **)-4096 && v184)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
    v553 = &unk_1E814DA10;
    v557 = a1 + 40;
    v185 = sub_1C52E2ED8(a1 + 40, &v553);
    v186 = (uint64_t *)(a1 + 104);
    if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
    {
      v187 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
      if (v555)
      {
        *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v187;
      }
      else
      {
        v188 = v556;
        v189 = **(int32x2_t ***)*v556;
        v190 = (unint64_t)v189[303];
        if (v190 <= v187)
        {
          v191 = v189[305].u32[0];
          if (v190 + 16 * v191 > v187)
          {
            v192 = v191 - 1;
            LODWORD(v193) = v192 & ((v556 >> 4) ^ (v556 >> 9));
            v194 = (llvm::UndefValue ***)(v190 + 16 * v193);
            v195 = *v194;
            if (v556 == *v194)
            {
LABEL_248:
              *v194 = (llvm::UndefValue **)-8192;
              v189[304] = vadd_s32(v189[304], (int32x2_t)0x1FFFFFFFFLL);
              v188 = v556;
            }
            else
            {
              v196 = 1;
              while (v195 != (llvm::UndefValue **)-4096)
              {
                v197 = v193 + v196++;
                v193 = v197 & v192;
                v195 = *(llvm::UndefValue ***)(v190 + 16 * v193);
                if (v556 == v195)
                {
                  v194 = (llvm::UndefValue ***)(v190 + 16 * v193);
                  goto LABEL_248;
                }
              }
            }
            *((_BYTE *)v188 + 17) &= ~1u;
          }
        }
      }
    }
    v211 = *(_QWORD *)(v185[7] + 32);
    if (v211)
      v212 = v211 == *(_QWORD *)(v185[7] + 40) + 40;
    else
      v212 = 1;
    if (v212)
      v213 = 0;
    else
      v213 = v211 - 24;
    v214 = *(_QWORD *)(v213 - 32);
LABEL_278:
    v215 = (char *)operator new(0x60uLL);
    *((_DWORD *)v215 + 13) = *((_DWORD *)v215 + 13) & 0x38000000 | 1;
    *(_QWORD *)v215 = 0;
    *((_QWORD *)v215 + 1) = 0;
    *((_QWORD *)v215 + 2) = 0;
    *((_QWORD *)v215 + 4) = ***(_QWORD ***)v214 + 1576;
    *((_QWORD *)v215 + 3) = v215 + 32;
    *((_QWORD *)v215 + 5) = 0;
    v215[48] = 30;
    v215[49] = 0;
    *((_WORD *)v215 + 25) = 0;
    *((_DWORD *)v215 + 13) = 1;
    *(_OWORD *)(v215 + 56) = 0u;
    *(_OWORD *)(v215 + 72) = 0u;
    *((_DWORD *)v215 + 22) = 0;
    *(_QWORD *)v215 = v214;
    v218 = *(_QWORD *)(v214 + 8);
    v217 = (_QWORD *)(v214 + 8);
    v216 = v218;
    *((_QWORD *)v215 + 1) = v218;
    if (v218)
      *(_QWORD *)(v216 + 16) = v215 + 8;
    *((_QWORD *)v215 + 2) = v217;
    *v217 = v215;
    LOWORD(v557) = 257;
    sub_1C4867F8C(v186, (unsigned __int8 **)v215 + 4, (uint64_t)&v553);
    goto LABEL_281;
  }
  if (!v183)
  {
    v198 = *(llvm::UndefValue ***)(v182 + 272);
    v554 = (void *)2;
    v555 = 0;
    v556 = v198;
    if (v198 != (llvm::UndefValue **)-8192 && v198 != (llvm::UndefValue **)-4096 && v198)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
    v553 = &unk_1E814DA10;
    v557 = a1 + 40;
    v199 = sub_1C52E2ED8(a1 + 40, &v553);
    v186 = (uint64_t *)(a1 + 104);
    if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
    {
      v200 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
      if (v555)
      {
        *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v200;
      }
      else
      {
        v201 = v556;
        v202 = **(int32x2_t ***)*v556;
        v203 = (unint64_t)v202[303];
        if (v203 <= v200)
        {
          v204 = v202[305].u32[0];
          if (v203 + 16 * v204 > v200)
          {
            v205 = v204 - 1;
            LODWORD(v206) = v205 & ((v556 >> 4) ^ (v556 >> 9));
            v207 = (llvm::UndefValue ***)(v203 + 16 * v206);
            v208 = *v207;
            if (v556 == *v207)
            {
LABEL_266:
              *v207 = (llvm::UndefValue **)-8192;
              v202[304] = vadd_s32(v202[304], (int32x2_t)0x1FFFFFFFFLL);
              v201 = v556;
            }
            else
            {
              v209 = 1;
              while (v208 != (llvm::UndefValue **)-4096)
              {
                v210 = v206 + v209++;
                v206 = v210 & v205;
                v208 = *(llvm::UndefValue ***)(v203 + 16 * v206);
                if (v556 == v208)
                {
                  v207 = (llvm::UndefValue ***)(v203 + 16 * v206);
                  goto LABEL_266;
                }
              }
            }
            *((_BYTE *)v201 + 17) &= ~1u;
          }
        }
      }
    }
    v214 = v199[7];
    goto LABEL_278;
  }
LABEL_281:
  v219 = *(_QWORD *)(v167 + 56);
  v553 = &v555;
  v554 = (void *)0x100000000;
  v562 = 0;
  v556 = 0;
  v557 = 0;
  LODWORD(v558) = 0;
  v561[0] = 0;
  v559 = 0;
  v560 = v219;
  sub_1C53BA620((uint64_t)&v553, 0);
  v220 = v219 + 72;
  for (j = *(_QWORD *)(v219 + 80); j != v220; j = *(_QWORD *)(j + 8))
  {
    v222 = j - 24;
    if (!j)
      v222 = 0;
    v223 = *(_QWORD *)(v222 + 48);
    if (v223 != v222 + 40)
    {
      do
      {
        v224 = v223;
        v223 = *(_QWORD *)(v223 + 8);
        v225 = j - 24;
        if (!j)
          v225 = 0;
        if (v223 == v225 + 40)
        {
          v231 = *(_QWORD *)(j + 8);
          j = v220;
          if (v231 != v220)
          {
            while (1)
            {
              v232 = v231 - 24;
              if (!v231)
                v232 = 0;
              v223 = *(_QWORD *)(v232 + 48);
              if (v223 != v232 + 40)
                break;
              v231 = *(_QWORD *)(v231 + 8);
              if (v231 == v220)
              {
                j = v220;
                goto LABEL_290;
              }
            }
            j = v231;
          }
        }
LABEL_290:
        if (v224)
          v226 = v224 - 24;
        else
          v226 = 0;
        v227 = *(unsigned __int8 *)(v226 + 16);
        if (v227 == 59)
          v228 = v226;
        else
          v228 = 0;
        if (v224
          && v227 == 59
          && *(_QWORD *)(v226 + 8)
          && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)&v553, *(_QWORD *)(v226 + 40))&& *(_BYTE *)(*(_QWORD *)(v228 - 32) + 16) == 16)
        {
          v229 = (uint64_t *)(v164 + 40);
          if (*(uint64_t **)(v164 + 48) != v172)
          {
            v229 = *(uint64_t **)(v164 + 48);
            while (1)
            {
              v230 = v229 - 3;
              if (!v229)
                v230 = 0;
              if (*((_BYTE *)v230 + 16) != 83)
                break;
              v229 = (uint64_t *)v229[1];
              if (v229 == v172)
              {
                v229 = (uint64_t *)(v164 + 40);
                goto LABEL_320;
              }
            }
            v233 = *((unsigned __int8 *)v229 - 8) - 38;
            v234 = v233 > 0x38;
            v235 = (1 << v233) & 0x100060000000001;
            if (!v234 && v235 != 0)
              v229 = (uint64_t *)v229[1];
          }
LABEL_320:
          llvm::Instruction::moveBefore((_QWORD *)v226, v164, v229);
        }
      }
      while (j != v220);
      break;
    }
  }
  sub_1C4DC4E38((uint64_t *)&v556);
  if (v553 != &v555)
    free(v553);
  v237 = 0;
  v238 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v238)
    v239 = v238 - 24;
  else
    v239 = 0;
  v240 = *(_QWORD *)(v239 + 48);
  if (v240)
    v241 = v240 - 24;
  else
    v241 = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v241 + 40);
  *(_QWORD *)(a1 + 160) = v241 + 24;
  v242 = *(void **)(v241 + 48);
  v553 = v242;
  v243 = (uint64_t *)(a1 + 104);
  if (v242)
  {
    llvm::MetadataTracking::track((uint64_t)&v553, (unsigned __int8 *)v242, 2);
    v237 = v553;
  }
  sub_1C4774EF4((uint64_t)v544, 0, (uint64_t)v237);
  if (v553)
    llvm::MetadataTracking::untrack((uint64_t)&v553, (unsigned __int8 *)v553);
  v244 = *(_QWORD *)(a1 + 24);
  v245 = *(_DWORD *)(v244 + 200);
  if ((v245 - 1) >= 2)
  {
    if (v245 == 3)
    {
      v251 = *(_QWORD *)(a1 + 248);
      v252 = *(_QWORD *)(v251 - 32 * (*(_DWORD *)(v251 + 20) & 0x7FFFFFF));
      v253 = (unsigned __int8 *)(v252 + 24);
      if (*(_DWORD *)(v252 + 32) >= 0x41u)
        v253 = *(unsigned __int8 **)v253;
      v254 = *v253;
      v255 = *(_QWORD *)(a1 + 8);
      if ((*(_WORD *)(v255 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
        v244 = *(_QWORD *)(a1 + 24);
      }
      v256 = *(_QWORD *)(v255 + 88);
      v257 = llvm::PointerType::get(*(llvm::PointerType **)(v244 + 208), 0);
      v258 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v251 - 32 * (*(_DWORD *)(v251 + 20) & 0x7FFFFFF) + 64));
      v259 = *(llvm::UndefValue ***)(a1 + 248);
      v554 = (void *)2;
      v555 = 0;
      v556 = v259;
      if (v259 != (llvm::UndefValue **)-8192 && v259 != (llvm::UndefValue **)-4096 && v259)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
      v553 = &unk_1E814DA10;
      v557 = a1 + 40;
      v260 = sub_1C52E2ED8(a1 + 40, &v553);
      if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
      {
        v261 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
        if (v555)
        {
          *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v261;
        }
        else
        {
          v262 = v556;
          v263 = **(int32x2_t ***)*v556;
          v264 = (unint64_t)v263[303];
          if (v264 <= v261)
          {
            v265 = v263[305].u32[0];
            if (v264 + 16 * v265 > v261)
            {
              v266 = v265 - 1;
              LODWORD(v267) = v266 & ((v556 >> 4) ^ (v556 >> 9));
              v268 = (llvm::UndefValue ***)(v264 + 16 * v267);
              v269 = *v268;
              if (v556 == *v268)
              {
LABEL_359:
                *v268 = (llvm::UndefValue **)-8192;
                v263[304] = vadd_s32(v263[304], (int32x2_t)0x1FFFFFFFFLL);
                v262 = v556;
              }
              else
              {
                v270 = 1;
                while (v269 != (llvm::UndefValue **)-4096)
                {
                  v271 = v267 + v270++;
                  v267 = v271 & v266;
                  v269 = *(llvm::UndefValue ***)(v264 + 16 * v267);
                  if (v556 == v269)
                  {
                    v268 = (llvm::UndefValue ***)(v264 + 16 * v267);
                    goto LABEL_359;
                  }
                }
              }
              *((_BYTE *)v262 + 17) &= ~1u;
            }
          }
        }
      }
      v290 = v256 + 40 * v254;
      v291 = *(unsigned __int8 **)(v260[7] + 48);
      v568 = (uint64_t)v291;
      if (v291)
        llvm::MetadataTracking::track((uint64_t)&v568, v291, 2);
      v292 = (uint64_t **)*((_QWORD *)v258 + 3);
      v577[0] = v290;
      LOWORD(v557) = 257;
      v293 = sub_1C4774778(v544, v292, (uint64_t)v258, v577, 1, (uint64_t)&v553, 0);
      *(_WORD *)(v293 + 18) = (*((_WORD *)v258 + 9) >> 2) & 0xFFC | *(_WORD *)(v293 + 18) & 0xF003;
      v546 = (unsigned __int8 *)v568;
      if (v568)
        llvm::MetadataTracking::track((uint64_t)&v546, (unsigned __int8 *)v568, 2);
      v294 = (unsigned __int8 **)(v293 + 48);
      if (&v546 == (unsigned __int8 **)(v293 + 48))
      {
        if (v546)
          llvm::MetadataTracking::untrack((uint64_t)&v546, v546);
      }
      else
      {
        if (*v294)
          llvm::MetadataTracking::untrack(v293 + 48, *v294);
        v295 = v546;
        *v294 = v546;
        if (v295)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v546, v295, v293 + 48);
          v546 = 0;
        }
      }
      v296 = (llvm::GetElementPtrInst *)(**(_QWORD **)(a1 + 168) + 1912);
      v297 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 296);
      v553 = "async.ctx.frameptr";
      LOWORD(v557) = 259;
      v298 = (unsigned __int8 *)sub_1C4772C18(v544, v296, (_QWORD *)v293, v297, (uint64_t)&v553);
      v553 = 0;
      v554 = 0;
      v556 = 0;
      v557 = 0;
      v558 = 0;
      v559 = v561;
      v560 = 0x400000000;
      v563[0] = (char *)&v564;
      v563[1] = (char *)0x800000000;
      v565 = v567;
      v566 = 0x800000000;
      v567[64] = 1;
      llvm::InlineFunction((uint64_t ***)v293, (uint64_t)&v553, 0, 1, 0);
      v578 = 257;
      v250 = sub_1C4773E38(v544, 49, v298, v257, (uint64_t)v577);
      if (v565 != v567)
        free(v565);
      sub_1C52768FC(v563);
      if (v559 != v561)
        free(v559);
      if (v568)
        llvm::MetadataTracking::untrack((uint64_t)&v568, (unsigned __int8 *)v568);
    }
    else
    {
      v272 = *(_QWORD *)(a1 + 8);
      if ((*(_WORD *)(v272 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
      v250 = *(unsigned __int8 **)(v272 + 88);
    }
  }
  else
  {
    v246 = *(_QWORD *)(a1 + 8);
    if ((*(_WORD *)(v246 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
      v244 = *(_QWORD *)(a1 + 24);
    }
    v247 = *(unsigned __int8 **)(v246 + 88);
    v248 = (llvm::PointerType *)llvm::PointerType::get(*(llvm::PointerType **)(v244 + 208), 0);
    v249 = (uint64_t)v248;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 296))
    {
      LOWORD(v557) = 257;
      v250 = sub_1C4773E38(v544, 49, v247, (uint64_t)v248, (uint64_t)&v553);
      goto LABEL_400;
    }
    v273 = llvm::PointerType::get(v248, 0);
    LOWORD(v557) = 257;
    v274 = sub_1C4773E38(v544, 49, v247, v273, (uint64_t)&v553);
    v578 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 56) + 40) + 272, v249);
    v276 = v275;
    v277 = (char *)operator new(0x60uLL);
    v278 = v277;
    v250 = (unsigned __int8 *)(v277 + 32);
    *((_QWORD *)v277 + 2) = 0;
    *((_QWORD *)v277 + 3) = v277 + 32;
    LOWORD(v557) = 257;
    *((_QWORD *)v277 + 4) = v249;
    *((_QWORD *)v277 + 5) = 0;
    *((_WORD *)v277 + 24) = 60;
    *((_DWORD *)v277 + 13) = 1;
    *(_OWORD *)(v277 + 56) = 0u;
    *(_OWORD *)(v277 + 72) = 0u;
    *((_DWORD *)v277 + 22) = 0;
    *(_QWORD *)v277 = v274;
    *((_QWORD *)v277 + 1) = 0;
    if (v274)
    {
      v281 = *((_QWORD *)v274 + 1);
      v280 = v274 + 8;
      v279 = v281;
      *((_QWORD *)v277 + 1) = v281;
      if (v281)
        *(_QWORD *)(v279 + 16) = v277 + 8;
      *((_QWORD *)v277 + 2) = v280;
      *v280 = v277;
    }
    *((_WORD *)v277 + 25) = 2 * (v276 & 0x3F);
    v277[92] = 1;
    llvm::Value::setName((uint64_t ***)v277 + 4, (uint64_t)&v553);
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 184) + 16))(*(_QWORD *)(a1 + 184), v250, v577, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160));
    v282 = *(unsigned int *)(a1 + 112);
    v243 = (uint64_t *)(a1 + 104);
    if ((_DWORD)v282)
    {
      v283 = *(_QWORD *)(a1 + 104);
      v284 = v283 + 16 * v282;
      v285 = (unsigned __int8 **)(v278 + 80);
      do
      {
        v286 = *(_DWORD *)v283;
        v287 = *(unsigned __int8 **)(v283 + 8);
        if (v287)
        {
          if (!v286)
          {
            v568 = *(_QWORD *)(v283 + 8);
            llvm::MetadataTracking::track((uint64_t)&v568, v287, 2);
            v288 = *v285;
            goto LABEL_380;
          }
        }
        else
        {
          v288 = *v285;
          if (!*v285 && (v278[55] & 0x20) == 0)
            goto LABEL_377;
          if (!v286)
          {
            v568 = 0;
LABEL_380:
            if (v288)
              llvm::MetadataTracking::untrack((uint64_t)(v278 + 80), v288);
            v289 = (unsigned __int8 *)v568;
            *v285 = (unsigned __int8 *)v568;
            if (v289)
              llvm::MetadataTracking::retrack((uint64_t)&v568, v289, (uint64_t)(v278 + 80));
            goto LABEL_377;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v250, *(_DWORD *)v283, (llvm::MDNode *)v287);
LABEL_377:
        v283 += 16;
      }
      while (v283 != v284);
    }
  }
LABEL_400:
  *(_QWORD *)(a1 + 240) = v250;
  v299 = *(llvm::UndefValue ***)(*(_QWORD *)(a1 + 24) + 232);
  v554 = (void *)2;
  v555 = 0;
  v556 = v299;
  if (v299 != (llvm::UndefValue **)-8192 && v299 != (llvm::UndefValue **)-4096 && v299 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
  v553 = &unk_1E814DA10;
  v557 = a1 + 40;
  v301 = sub_1C52E2ED8(a1 + 40, &v553);
  if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
  {
    v302 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
    if (v555)
    {
      *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v302;
    }
    else
    {
      v303 = v556;
      v304 = **(int32x2_t ***)*v556;
      v305 = (unint64_t)v304[303];
      if (v305 <= v302)
      {
        v306 = v304[305].u32[0];
        if (v305 + 16 * v306 > v302)
        {
          v307 = v306 - 1;
          LODWORD(v308) = v307 & ((v556 >> 4) ^ (v556 >> 9));
          v309 = (llvm::UndefValue ***)(v305 + 16 * v308);
          v310 = *v309;
          if (v556 == *v309)
          {
LABEL_417:
            *v309 = (llvm::UndefValue **)-8192;
            v304[304] = vadd_s32(v304[304], (int32x2_t)0x1FFFFFFFFLL);
            v303 = v556;
          }
          else
          {
            v311 = 1;
            while (v310 != (llvm::UndefValue **)-4096)
            {
              v312 = v308 + v311++;
              v308 = v312 & v307;
              v310 = *(llvm::UndefValue ***)(v305 + 16 * v308);
              if (v556 == v310)
              {
                v309 = (llvm::UndefValue ***)(v305 + 16 * v308);
                goto LABEL_417;
              }
            }
          }
          *((_BYTE *)v303 + 17) &= ~1u;
        }
      }
    }
  }
  v313 = (llvm::Value *)v301[7];
  v314 = *(llvm::Value **)(a1 + 240);
  if (v314 != v313)
  {
    llvm::Value::takeName(v314, v313);
    llvm::Value::doRAUW(v313, *(llvm::Value **)(a1 + 240), (llvm::Value *)1);
    v313 = *(llvm::Value **)(a1 + 240);
  }
  v315 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 168) + 1912), 0);
  v553 = "vFrame";
  LOWORD(v557) = 259;
  v316 = sub_1C4773E38(v243, 49, (unsigned __int8 *)v313, v315, (uint64_t)&v553);
  v317 = **(llvm::UndefValue ****)(a1 + 24);
  v554 = (void *)2;
  v555 = 0;
  v556 = v317;
  if (v317 != (llvm::UndefValue **)-8192 && v317 != (llvm::UndefValue **)-4096 && v317 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
  v553 = &unk_1E814DA10;
  v557 = a1 + 40;
  v319 = sub_1C52E2ED8(a1 + 40, &v553);
  if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
  {
    v322 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
    if (v555)
    {
      *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v322;
    }
    else
    {
      v323 = v556;
      v324 = **(int32x2_t ***)*v556;
      v325 = (unint64_t)v324[303];
      if (v325 <= v322)
      {
        v326 = v324[305].u32[0];
        if (v325 + 16 * v326 > v322)
        {
          v327 = v326 - 1;
          LODWORD(v328) = v327 & ((v556 >> 4) ^ (v556 >> 9));
          v329 = (llvm::UndefValue ***)(v325 + 16 * v328);
          v330 = *v329;
          if (v556 == *v329)
          {
LABEL_439:
            *v329 = (llvm::UndefValue **)-8192;
            v324[304] = vadd_s32(v324[304], (int32x2_t)0x1FFFFFFFFLL);
            v323 = v556;
          }
          else
          {
            v331 = 1;
            while (v330 != (llvm::UndefValue **)-4096)
            {
              v332 = v328 + v331++;
              v328 = v332 & v327;
              v330 = *(llvm::UndefValue ***)(v325 + 16 * v328);
              if (v556 == v330)
              {
                v329 = (llvm::UndefValue ***)(v325 + 16 * v328);
                goto LABEL_439;
              }
            }
          }
          *((_BYTE *)v323 + 17) &= ~1u;
        }
      }
    }
  }
  v333 = (llvm::ValueAsMetadata *)v319[7];
  if (v333 != (llvm::ValueAsMetadata *)v316)
    llvm::Value::doRAUW(v333, (llvm::Value *)v316, (llvm::Value *)1);
  if ((_DWORD)v551)
  {
    v334 = (llvm::UndefValue ***)v550;
    v335 = 8 * v551;
    do
    {
      v336 = *v334++;
      v337 = llvm::UndefValue::get(*v336, v320);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v336, v337, (llvm::Value *)1);
      llvm::Value::deleteValue((llvm::Value *)v336);
      v335 -= 8;
    }
    while (v335);
  }
  v338 = *(_QWORD *)(a1 + 24);
  v339 = *(_DWORD *)(v338 + 200);
  if ((v339 - 1) < 3)
  {
    v340 = *(llvm::UndefValue ***)(a1 + 248);
    v554 = (void *)2;
    v555 = 0;
    v556 = v340;
    if (v340 != (llvm::UndefValue **)-8192 && v340 != (llvm::UndefValue **)-4096 && v340)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
    v553 = &unk_1E814DA10;
    v557 = a1 + 40;
    v341 = sub_1C52E2ED8(a1 + 40, &v553);
    if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
    {
      v343 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
      if (v555)
      {
        *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v343;
      }
      else
      {
        v344 = v556;
        v345 = **(int32x2_t ***)*v556;
        v346 = (unint64_t)v345[303];
        if (v346 <= v343)
        {
          v347 = v345[305].u32[0];
          if (v346 + 16 * v347 > v343)
          {
            v348 = v347 - 1;
            LODWORD(v349) = v348 & ((v556 >> 4) ^ (v556 >> 9));
            v350 = (llvm::UndefValue ***)(v346 + 16 * v349);
            v351 = *v350;
            if (v556 == *v350)
            {
LABEL_463:
              *v350 = (llvm::UndefValue **)-8192;
              v345[304] = vadd_s32(v345[304], (int32x2_t)0x1FFFFFFFFLL);
              v344 = v556;
            }
            else
            {
              v352 = 1;
              while (v351 != (llvm::UndefValue **)-4096)
              {
                v353 = v349 + v352++;
                v349 = v353 & v348;
                v351 = *(llvm::UndefValue ***)(v346 + 16 * v349);
                if (v556 == v351)
                {
                  v350 = (llvm::UndefValue ***)(v346 + 16 * v349);
                  goto LABEL_463;
                }
              }
            }
            *((_BYTE *)v344 + 17) &= ~1u;
          }
        }
      }
    }
    v568 = 6;
    v569 = 0;
    v368 = (llvm::ValueAsMetadata *)v341[7];
    v570 = v368;
    if (v368 != (llvm::ValueAsMetadata *)-8192 && v368 != (llvm::ValueAsMetadata *)-4096 && v368 != 0)
    {
      v370 = v341[5] & 0xFFFFFFFFFFFFFFF8;
      v569 = *(_QWORD *)v370;
      *(_QWORD *)v370 = &v568;
      v568 = v370 | 6;
      if (v569)
        *(_QWORD *)v569 = *(_QWORD *)v569 & 7 | (unint64_t)&v569;
      v368 = v570;
    }
    if (!*((_QWORD *)v368 + 1))
      goto LABEL_527;
    v553 = &v555;
    v554 = (void *)0x800000000;
    v371 = *(_QWORD *)(a1 + 8);
    v372 = *(_WORD *)(v371 + 18);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 200) == 3)
    {
      if ((v372 & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
      v373 = *(_QWORD *)(v371 + 88);
    }
    else
    {
      if ((v372 & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
      v373 = *(_QWORD *)(v371 + 88) + 40;
    }
    v374 = *(_QWORD *)(a1 + 8);
    if ((*(_WORD *)(v374 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
    v375 = *(_QWORD *)(v374 + 88) + 40 * *(_QWORD *)(v374 + 96);
    if (v373 != v375)
    {
      v376 = v554;
      v377 = v373;
      do
      {
        if (v376 >= HIDWORD(v554))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v553, (uint64_t)&v555, v376 + 1, 8);
          v376 = v554;
        }
        *((_QWORD *)v553 + v376) = v377;
        v376 = (_DWORD)v554 + 1;
        LODWORD(v554) = (_DWORD)v554 + 1;
        v373 += 40;
        v377 += 40;
      }
      while (v373 != v375);
    }
    v378 = v570;
    if (*(_BYTE *)(*(_QWORD *)v570 + 8) == 16)
    {
      v379 = (_QWORD **)*((_QWORD *)v570 + 1);
      if (!v379)
        goto LABEL_524;
      do
      {
        v380 = (llvm::ValueAsMetadata *)v379[3];
        v379 = (_QWORD **)v379[1];
        if (v380 && *((_BYTE *)v380 + 16) == 92 && *((_DWORD *)v380 + 18) == 1)
        {
          llvm::Value::doRAUW(v380, *((llvm::Value **)v553 + **((unsigned int **)v380 + 8)), (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v380 + 5) + 40, (uint64_t ***)v380);
          v381 = *((_QWORD *)v380 + 3);
          v382 = (_QWORD *)*((_QWORD *)v380 + 4);
          *v382 = v381;
          *(_QWORD *)(v381 + 8) = v382;
          *((_QWORD *)v380 + 3) = 0;
          *((_QWORD *)v380 + 4) = 0;
          llvm::Value::deleteValue(v380);
        }
      }
      while (v379);
      if (!*((_QWORD *)v570 + 1))
        goto LABEL_524;
      v383 = llvm::UndefValue::get(*(llvm::UndefValue **)v570, v342);
      v384 = v554;
      if ((_DWORD)v554)
      {
        v385 = 0;
        do
        {
          v386 = *((_QWORD *)v553 + v385);
          LODWORD(v546) = v385;
          v578 = 257;
          v383 = (llvm::Value *)sub_1C506D788((uint64_t)v243, (uint64_t)v383, v386, &v546, 1, (uint64_t)v577);
          ++v385;
        }
        while (v384 != v385);
      }
      v378 = v570;
    }
    else
    {
      v383 = *(llvm::Value **)v553;
    }
    llvm::Value::doRAUW(v378, v383, (llvm::Value *)1);
LABEL_524:
    if (v553 != &v555)
      free(v553);
    v368 = v570;
LABEL_527:
    if (v368 != (llvm::ValueAsMetadata *)-8192 && v368 != (llvm::ValueAsMetadata *)-4096 && v368)
    {
      v387 = v568 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v568 & 0xFFFFFFFFFFFFFFF8) = v569;
      if (v569)
      {
        *(_QWORD *)v569 = *(_QWORD *)v569 & 7 | v387;
      }
      else
      {
        v388 = v570;
        v389 = ***(int32x2_t ****)v570;
        v390 = (unint64_t)v389[303];
        if (v390 <= v387)
        {
          v391 = v389[305].u32[0];
          if (v390 + 16 * v391 > v387)
          {
            v392 = v391 - 1;
            LODWORD(v393) = v392 & ((v570 >> 4) ^ (v570 >> 9));
            v394 = (llvm::ValueAsMetadata **)(v390 + 16 * v393);
            v395 = *v394;
            if (v570 == *v394)
            {
LABEL_538:
              *v394 = (llvm::ValueAsMetadata *)-8192;
              v389[304] = vadd_s32(v389[304], (int32x2_t)0x1FFFFFFFFLL);
              v388 = v570;
            }
            else
            {
              v396 = 1;
              while (v395 != (llvm::ValueAsMetadata *)-4096)
              {
                v397 = v393 + v396++;
                v393 = v397 & v392;
                v395 = *(llvm::ValueAsMetadata **)(v390 + 16 * v393);
                if (v570 == v395)
                {
                  v394 = (llvm::ValueAsMetadata **)(v390 + 16 * v393);
                  goto LABEL_538;
                }
              }
            }
            *((_BYTE *)v388 + 17) &= ~1u;
          }
        }
      }
    }
    goto LABEL_573;
  }
  if (!v339 && *(_BYTE *)(v338 + 292))
  {
    v354 = *(llvm::UndefValue ***)(v338 + 256);
    v554 = (void *)2;
    v555 = 0;
    v556 = v354;
    if (v354 != (llvm::UndefValue **)-8192 && v354 != (llvm::UndefValue **)-4096 && v354 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
    v553 = &unk_1E814DA10;
    v557 = a1 + 40;
    v356 = sub_1C52E2ED8(a1 + 40, &v553);
    if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
    {
      v357 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
      if (v555)
      {
        *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v357;
      }
      else
      {
        v358 = v556;
        v359 = **(int32x2_t ***)*v556;
        v360 = (unint64_t)v359[303];
        if (v360 <= v357)
        {
          v361 = v359[305].u32[0];
          if (v360 + 16 * v361 > v357)
          {
            v362 = v361 - 1;
            LODWORD(v363) = v362 & ((v556 >> 4) ^ (v556 >> 9));
            v364 = (llvm::UndefValue ***)(v360 + 16 * v363);
            v365 = *v364;
            if (v556 == *v364)
            {
LABEL_484:
              *v364 = (llvm::UndefValue **)-8192;
              v359[304] = vadd_s32(v359[304], (int32x2_t)0x1FFFFFFFFLL);
              v358 = v556;
            }
            else
            {
              v366 = 1;
              while (v365 != (llvm::UndefValue **)-4096)
              {
                v367 = v363 + v366++;
                v363 = v367 & v362;
                v365 = *(llvm::UndefValue ***)(v360 + 16 * v363);
                if (v556 == v365)
                {
                  v364 = (llvm::UndefValue ***)(v360 + 16 * v363);
                  goto LABEL_484;
                }
              }
            }
            *((_BYTE *)v358 + 17) &= ~1u;
          }
        }
      }
    }
    v398 = v356[7];
    v399 = *(_DWORD *)(v398 + 20);
    v400 = ((v399 >> 1) & 0x3FFFFFF) - 2;
    if ((v399 & 0x40000000) != 0)
      v401 = *(_QWORD *)(v398 - 8);
    else
      v401 = v398 - 32 * (v399 & 0x7FFFFFF);
    v402 = (2 * v400 + 3);
    if (v400 == -2)
      v402 = 1;
    v403 = *(llvm::BasicBlock **)(v401 + 32 * v402);
    llvm::SwitchInst::removeCase(v356[7], v398, v400);
    if ((*(_DWORD *)(a1 + 32) - 1) <= 1)
    {
      v404 = *(uint64_t **)(v398 + 40);
      v553 = "Switch";
      LOWORD(v557) = 259;
      v542 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v404, (uint64_t *)(v398 + 24), (uint64_t)&v553, 0);
      v405 = 0;
      v407 = v404[5];
      v406 = v404 + 5;
      v408 = v407 - 24;
      if (v407)
        v409 = v408;
      else
        v409 = 0;
      if (*(unsigned __int8 *)(v409 + 16) - 29 >= 0xB)
        v409 = 0;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(v409 + 40);
      *(_QWORD *)(a1 + 160) = v409 + 24;
      v410 = *(void **)(v409 + 48);
      v553 = v410;
      if (v410)
      {
        llvm::MetadataTracking::track((uint64_t)&v553, (unsigned __int8 *)v410, 2);
        v405 = v553;
      }
      v543 = v403;
      sub_1C4774EF4((uint64_t)v243, 0, (uint64_t)v405);
      if (v553)
        llvm::MetadataTracking::untrack((uint64_t)&v553, (unsigned __int8 *)v553);
      v411 = *(llvm::GetElementPtrInst **)(*(_QWORD *)(a1 + 24) + 208);
      v412 = *(uint64_t ***)(a1 + 240);
      v553 = "ResumeFn.addr";
      LOWORD(v557) = 259;
      v413 = sub_1C5391F90(v243, v411, v412, 0, 0, (uint64_t)&v553);
      v414 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 208) + 16);
      v578 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 56) + 40) + 272, v414);
      v416 = v415;
      v417 = (char *)operator new(0x60uLL);
      v418 = v417;
      v419 = (llvm::Constant **)(v417 + 32);
      *((_QWORD *)v417 + 2) = 0;
      *((_QWORD *)v417 + 3) = v417 + 32;
      LOWORD(v557) = 257;
      *((_QWORD *)v417 + 4) = v414;
      *((_QWORD *)v417 + 5) = 0;
      *((_WORD *)v417 + 24) = 60;
      *((_DWORD *)v417 + 13) = 1;
      *(_OWORD *)(v417 + 56) = 0u;
      *(_OWORD *)(v417 + 72) = 0u;
      *((_DWORD *)v417 + 22) = 0;
      *(_QWORD *)v417 = v413;
      *((_QWORD *)v417 + 1) = 0;
      if (v413)
      {
        v422 = v413[1];
        v421 = v413 + 1;
        v420 = v422;
        *((_QWORD *)v417 + 1) = v422;
        if (v422)
          v420[2] = (uint64_t *)(v417 + 8);
        *((_QWORD *)v417 + 2) = v421;
        *v421 = v417;
      }
      *((_WORD *)v417 + 25) = 2 * (v416 & 0x3F);
      v417[92] = 1;
      llvm::Value::setName((uint64_t ***)v417 + 4, (uint64_t)&v553);
      (*(void (**)(_QWORD, llvm::Constant **, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 184) + 16))(*(_QWORD *)(a1 + 184), v419, v577, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160));
      v424 = *(unsigned int *)(a1 + 112);
      if (!(_DWORD)v424)
      {
LABEL_562:
        LOWORD(v557) = 257;
        NullValue = llvm::Constant::getNullValue(*v419, v423);
        v426 = (llvm::Value *)sub_1C4774B48((uint64_t)v544, 32, (uint64_t)v419, (uint64_t)NullValue, (uint64_t)&v553);
        v427 = (char *)operator new(0xA0uLL);
        v428 = 0;
        v429 = (unsigned __int8 **)(v427 + 96);
        *((_DWORD *)v427 + 29) = *((_DWORD *)v427 + 29) & 0x38000000 | 3;
        do
        {
          v430 = &v427[v428];
          *(_QWORD *)v430 = 0;
          *((_QWORD *)v430 + 1) = 0;
          *((_QWORD *)v430 + 2) = 0;
          *((_QWORD *)v430 + 3) = v429;
          v428 += 32;
        }
        while (v428 != 96);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v427 + 96), v543, v542, v426, 0);
        LOWORD(v557) = 257;
        sub_1C4867F8C(v544, v429, (uint64_t)&v553);
        v431 = (_QWORD *)*v406;
        if ((_QWORD *)*v406 == v406)
        {
          v433 = 0;
        }
        else
        {
          if (v431)
            v432 = (uint64_t ***)(v431 - 3);
          else
            v432 = 0;
          if (*((unsigned __int8 *)v432 + 16) - 29 >= 0xB)
            v433 = 0;
          else
            v433 = v432;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v433[5] + 5), v433);
        v434 = v433[3];
        v435 = v433[4];
        *v435 = (uint64_t *)v434;
        v434[1] = (uint64_t *)v435;
        v433[3] = 0;
        v433[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v433);
        goto LABEL_573;
      }
      v537 = *(_QWORD *)(a1 + 104);
      v538 = v537 + 16 * v424;
      v539 = (llvm::Type **)(v418 + 80);
      while (1)
      {
        v540 = *(_DWORD *)v537;
        v541 = *(unsigned __int8 **)(v537 + 8);
        if (v541)
        {
          if (!v540)
          {
            v568 = *(_QWORD *)(v537 + 8);
            llvm::MetadataTracking::track((uint64_t)&v568, v541, 2);
            v423 = *v539;
            goto LABEL_739;
          }
        }
        else
        {
          v423 = *v539;
          if (!*v539 && (v418[55] & 0x20) == 0)
            goto LABEL_736;
          if (!v540)
          {
            v568 = 0;
LABEL_739:
            if (v423)
              llvm::MetadataTracking::untrack((uint64_t)(v418 + 80), (unsigned __int8 *)v423);
            v423 = (llvm::Type *)v568;
            *v539 = (llvm::Type *)v568;
            if (v423)
              llvm::MetadataTracking::retrack((uint64_t)&v568, (unsigned __int8 *)v423, (uint64_t)(v418 + 80));
            goto LABEL_736;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v419, *(_DWORD *)v537, (llvm::MDNode *)v541);
LABEL_736:
        v537 += 16;
        if (v537 == v538)
          goto LABEL_562;
      }
    }
  }
LABEL_573:
  v436 = *(_QWORD *)(a1 + 24);
  v437 = *(_DWORD *)(v436 + 200);
  if ((v437 - 1) >= 3)
  {
    if (v437)
    {
      v443 = 0;
    }
    else
    {
      v438 = (*(_DWORD *)(a1 + 32) - 1) < 2;
      v439 = **(_QWORD **)(a1 + 168);
      v440 = *(llvm::ConstantInt **)(v439 + 1912);
      v441 = *(unsigned int *)(v439 + 1920);
      LODWORD(v554) = v441 >> 8;
      if (v441 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v553, v438, 0);
      }
      else
      {
        if (v441 <= 0xFF)
          v442 = 0;
        else
          v442 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v441);
        v553 = (void *)(v442 & v438);
      }
      v443 = llvm::ConstantInt::get(v440, (llvm::LLVMContext *)&v553, v321);
      if (v554 >= 0x41 && v553)
        MEMORY[0x1CAA32F9C](v553, 0x1000C8000313F17);
      v436 = *(_QWORD *)(a1 + 24);
    }
    v444 = *(unsigned int *)(v436 + 128);
    if ((_DWORD)v444)
    {
      v445 = *(llvm::UndefValue ****)(v436 + 120);
      v446 = &v445[v444];
      do
      {
        v447 = *v445;
        if (*v445 != *(llvm::UndefValue ***)(a1 + 248))
        {
          v554 = (void *)2;
          v555 = 0;
          v556 = v447;
          if (v447 != (llvm::UndefValue **)-8192 && v447 != (llvm::UndefValue **)-4096 && v447 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
          v553 = &unk_1E814DA10;
          v557 = a1 + 40;
          v449 = sub_1C52E2ED8(a1 + 40, &v553);
          if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
          {
            v450 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
            if (v555)
            {
              *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v450;
            }
            else
            {
              v451 = v556;
              v452 = **(int32x2_t ***)*v556;
              v453 = (unint64_t)v452[303];
              if (v453 <= v450)
              {
                v454 = v452[305].u32[0];
                if (v453 + 16 * v454 > v450)
                {
                  v455 = v454 - 1;
                  LODWORD(v456) = v455 & ((v556 >> 4) ^ (v556 >> 9));
                  v457 = (llvm::UndefValue ***)(v453 + 16 * v456);
                  v458 = *v457;
                  if (v556 == *v457)
                  {
LABEL_603:
                    *v457 = (llvm::UndefValue **)-8192;
                    v452[304] = vadd_s32(v452[304], (int32x2_t)0x1FFFFFFFFLL);
                    v451 = v556;
                  }
                  else
                  {
                    v459 = 1;
                    while (v458 != (llvm::UndefValue **)-4096)
                    {
                      v460 = v456 + v459++;
                      v456 = v460 & v455;
                      v458 = *(llvm::UndefValue ***)(v453 + 16 * v456);
                      if (v556 == v458)
                      {
                        v457 = (llvm::UndefValue ***)(v453 + 16 * v456);
                        goto LABEL_603;
                      }
                    }
                  }
                  *((_BYTE *)v451 + 17) &= ~1u;
                }
              }
            }
          }
          v461 = (llvm::ValueAsMetadata *)v449[7];
          llvm::Value::doRAUW(v461, v443, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v461 + 5) + 40, (uint64_t ***)v461);
          v462 = *((_QWORD *)v461 + 3);
          v463 = (_QWORD *)*((_QWORD *)v461 + 4);
          *v463 = v462;
          *(_QWORD *)(v462 + 8) = v463;
          *((_QWORD *)v461 + 3) = 0;
          *((_QWORD *)v461 + 4) = 0;
          llvm::Value::deleteValue(v461);
        }
        ++v445;
      }
      while (v445 != v446);
      v436 = *(_QWORD *)(a1 + 24);
    }
  }
  sub_1C6059864(*(_QWORD *)(a1 + 8), v436, a1 + 40);
  v464 = *(_QWORD *)(a1 + 24);
  v465 = *(unsigned int *)(v464 + 16);
  if ((_DWORD)v465)
  {
    v466 = *(llvm::UndefValue ****)(v464 + 8);
    v467 = &v466[v465];
    do
    {
      v468 = *v466;
      v554 = (void *)2;
      v555 = 0;
      v556 = v468;
      if (v468 != (llvm::UndefValue **)-8192 && v468 != (llvm::UndefValue **)-4096 && v468 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
      v553 = &unk_1E814DA10;
      v557 = a1 + 40;
      v470 = sub_1C52E2ED8(a1 + 40, &v553);
      if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556 != 0)
      {
        v472 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
        if (v555)
        {
          *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v472;
        }
        else
        {
          v473 = v556;
          v474 = **(int32x2_t ***)*v556;
          v475 = (unint64_t)v474[303];
          if (v475 <= v472)
          {
            v476 = v474[305].u32[0];
            if (v475 + 16 * v476 > v472)
            {
              v477 = v476 - 1;
              LODWORD(v478) = v477 & ((v556 >> 4) ^ (v556 >> 9));
              v479 = (llvm::UndefValue ***)(v475 + 16 * v478);
              v480 = *v479;
              if (v556 == *v479)
              {
LABEL_630:
                *v479 = (llvm::UndefValue **)-8192;
                v474[304] = vadd_s32(v474[304], (int32x2_t)0x1FFFFFFFFLL);
                v473 = v556;
              }
              else
              {
                v481 = 1;
                while (v480 != (llvm::UndefValue **)-4096)
                {
                  v482 = v478 + v481++;
                  v478 = v482 & v477;
                  v480 = *(llvm::UndefValue ***)(v475 + 16 * v478);
                  if (v556 == v480)
                  {
                    v479 = (llvm::UndefValue ***)(v475 + 16 * v478);
                    goto LABEL_630;
                  }
                }
              }
              *((_BYTE *)v473 + 17) &= ~1u;
            }
          }
        }
      }
      sub_1C605DA34((uint64_t ***)v470[7], *(_QWORD *)(a1 + 24), *(uint64_t ***)(a1 + 240), 1, 0);
      ++v466;
    }
    while (v466 != v467);
  }
  v553 = &v555;
  v554 = (void *)0x800000000;
  v577[0] = 1;
  for (k = 1; k != 9; k += 2)
    v577[k] = -4096;
  v484 = *(_QWORD *)(a1 + 8);
  v485 = v484 + 72;
  v486 = *(_QWORD *)(v484 + 80);
  if (v486 != v484 + 72)
  {
    do
    {
      v487 = v486 - 24;
      if (!v486)
        v487 = 0;
      v488 = v487 + 40;
      for (m = *(_QWORD *)(v487 + 48); m != v488; m = *(_QWORD *)(m + 8))
      {
        if (m)
          v490 = m - 24;
        else
          v490 = 0;
        v491 = sub_1C53923FC(v490);
        if (m && v491)
        {
          v492 = v554;
          if (v554 >= (unint64_t)HIDWORD(v554))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v553, (uint64_t)&v555, v554 + 1, 8);
            v492 = v554;
          }
          *((_QWORD *)v553 + v492) = v490;
          LODWORD(v554) = (_DWORD)v554 + 1;
        }
      }
      v486 = *(_QWORD *)(v486 + 8);
    }
    while (v486 != v485);
    if ((_DWORD)v554)
    {
      v493 = (uint64_t *)v553;
      v494 = 8 * v554;
      do
      {
        v495 = *v493++;
        sub_1C6044370(v577, v495, *(_BYTE *)(*(_QWORD *)(a1 + 24) + 248));
        v494 -= 8;
      }
      while (v494);
    }
  }
  v496 = *(_QWORD *)(a1 + 8);
  v568 = (uint64_t)&v570;
  v569 = 0x100000000;
  v576 = 0;
  v571[0] = 0;
  v571[1] = 0;
  v572 = 0;
  v575 = 0;
  v573 = 0;
  v574 = v496;
  sub_1C53BA620((uint64_t)&v568, 0);
  if ((_DWORD)v554)
  {
    v497 = (char *)v553;
    v498 = (char *)v553 + 8 * v554;
    do
    {
      v499 = *(_QWORD *)v497;
      v500 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
      if (v500)
        v501 = v500 - 24;
      else
        v501 = 0;
      if ((llvm::isPotentiallyReachable(v501, *(_QWORD *)(*(_QWORD *)v497 + 40), 0, (uint64_t)&v568, 0) & 1) != 0)
      {
        v502 = *(unsigned __int8 **)(*(_QWORD *)(v499 - 32 * (*(_DWORD *)(v499 + 20) & 0x7FFFFFF)) + 24);
        v503 = *v502;
        v504 = v502;
        if (v503 <= 0x22)
        {
          if (v503 == 32)
          {
            v504 = (unsigned __int8 *)**((_QWORD **)v502 + 3);
          }
          else
          {
            v504 = *(unsigned __int8 **)(*(_QWORD *)(v499 - 32 * (*(_DWORD *)(v499 + 20) & 0x7FFFFFF)) + 24);
            if (((1 << v503) & 0x6FFFFFFF0) != 0)
              goto LABEL_685;
          }
        }
        v505 = *((_QWORD *)v504 + 16);
        if (!v505 || *(_BYTE *)(v505 + 16) != 59)
          goto LABEL_685;
        if ((_DWORD)v503 == 32)
          v502 = (unsigned __int8 *)**((_QWORD **)v502 + 3);
        v506 = *(_QWORD *)(*((_QWORD *)v502 + 16) + 8);
        if (v506)
        {
          v507 = 0;
          do
          {
            v508 = *(_QWORD *)(v506 + 24);
            v509 = *(unsigned __int8 *)(v508 + 16);
            if (v509 != 59 && v508 != 0 && v509 >= 0x1C)
            {
              v512 = *(_QWORD *)(v508 + 40);
              v513 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
              if (v513)
                v514 = v513 - 24;
              else
                v514 = 0;
              v507 += llvm::isPotentiallyReachable(v514, v512, 0, (uint64_t)&v568, 0);
            }
            v506 = *(_QWORD *)(v506 + 8);
          }
          while (v506);
          if (v507)
            goto LABEL_685;
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v499 + 40) + 40, (uint64_t ***)v499);
      v515 = *(_QWORD *)(v499 + 24);
      v516 = *(_QWORD **)(v499 + 32);
      *v516 = v515;
      *(_QWORD *)(v515 + 8) = v516;
      *(_QWORD *)(v499 + 24) = 0;
      *(_QWORD *)(v499 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v499);
LABEL_685:
      v497 += 8;
    }
    while (v497 != v498);
  }
  sub_1C4DC4E38(v571);
  if ((llvm::ValueAsMetadata **)v568 != &v570)
    free((void *)v568);
  if ((v577[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v577[1], 8);
  if (v553 != &v555)
    free(v553);
  v517 = *(_DWORD **)(a1 + 24);
  if (!v517[50])
  {
    v518 = *(llvm::UndefValue ***)(*(_QWORD *)v517 - 32 * (*(_DWORD *)(*(_QWORD *)v517 + 20) & 0x7FFFFFF));
    v554 = (void *)2;
    v555 = 0;
    v556 = v518;
    if (v518 != (llvm::UndefValue **)-8192 && v518 != (llvm::UndefValue **)-4096 && v518 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v554);
    v553 = &unk_1E814DA10;
    v557 = a1 + 40;
    v520 = sub_1C52E2ED8(a1 + 40, &v553);
    if (v556 != (llvm::UndefValue **)-8192 && v556 != (llvm::UndefValue **)-4096 && v556)
    {
      v521 = (unint64_t)v554 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v554 & 0xFFFFFFFFFFFFFFF8) = v555;
      if (v555)
      {
        *(_QWORD *)v555 = *(_QWORD *)v555 & 7 | v521;
      }
      else
      {
        v522 = v556;
        v523 = **(int32x2_t ***)*v556;
        v524 = (unint64_t)v523[303];
        if (v524 <= v521)
        {
          v525 = v523[305].u32[0];
          if (v524 + 16 * v525 > v521)
          {
            v526 = v525 - 1;
            LODWORD(v527) = v526 & ((v556 >> 4) ^ (v556 >> 9));
            v528 = (llvm::UndefValue ***)(v524 + 16 * v527);
            v529 = *v528;
            if (v556 == *v528)
            {
LABEL_710:
              *v528 = (llvm::UndefValue **)-8192;
              v523[304] = vadd_s32(v523[304], (int32x2_t)0x1FFFFFFFFLL);
              v522 = v556;
            }
            else
            {
              v530 = 1;
              while (v529 != (llvm::UndefValue **)-4096)
              {
                v531 = v527 + v530++;
                v527 = v531 & v526;
                v529 = *(llvm::UndefValue ***)(v524 + 16 * v527);
                if (v556 == v529)
                {
                  v528 = (llvm::UndefValue ***)(v524 + 16 * v527);
                  goto LABEL_710;
                }
              }
            }
            *((_BYTE *)v522 + 17) &= ~1u;
          }
        }
      }
    }
    sub_1C603E094((_QWORD *)v520[7], *(_DWORD *)(a1 + 32) == 2);
  }
  if (v547 != v549)
    free(v547);
  if (v550 != v552)
    free(v550);
}

uint64_t ***sub_1C605D724(uint64_t ***a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t **v9;
  unint64_t v10;
  llvm::PointerType *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t ***v20;
  uint64_t **v21;
  char *v22;
  uint64_t **v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t ***v29;
  llvm::ValueSymbolTable *v30;
  uint64_t v31;
  char *v32;
  char *v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  __int16 v38;

  v9 = a1[5];
  if (*(_DWORD *)(a2 + 200) == 3)
    v10 = llvm::FunctionType::get((uint64_t **)(****(_QWORD ****)(a5[5] + 56) + 1576), *(uint64_t **)(*a5 + 16), *(unsigned int *)(*a5 + 12), 0);
  else
    v10 = sub_1C63CFCD4(a2);
  v11 = (llvm::PointerType *)v10;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v12 = ***a1;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v16 = (uint64_t ****)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == a1)
      {
LABEL_11:
        v20 = v16[1];
        v23 = *v20;
        v22 = (char *)(v20 + 2);
        v21 = v23;
        goto LABEL_12;
      }
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == a1)
        {
          v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_11;
        }
      }
    }
    v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_11;
  }
  v21 = 0;
  v22 = &byte_1C871356D;
LABEL_12:
  v24 = *((unsigned __int8 *)a3 + 32);
  if (v24 == 1)
  {
    v34 = v22;
    v35 = v21;
    v25 = 261;
    goto LABEL_16;
  }
  if (!*((_BYTE *)a3 + 32))
  {
    v25 = 256;
LABEL_16:
    v38 = v25;
    goto LABEL_21;
  }
  v26 = a3[1];
  if (*((_BYTE *)a3 + 33) == 1)
  {
    v27 = (uint64_t *)*a3;
  }
  else
  {
    LOBYTE(v24) = 2;
    v27 = a3;
  }
  v34 = v22;
  v35 = v21;
  v36 = v27;
  v37 = v26;
  LOBYTE(v38) = 5;
  HIBYTE(v38) = v24;
LABEL_21:
  v28 = (char *)operator new(0x80uLL);
  v29 = (uint64_t ***)(v28 + 8);
  *((_DWORD *)v28 + 7) = *((_DWORD *)v28 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v28 = 0;
  llvm::Function::Function((uint64_t *)v28 + 1, v11, 7, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v34, 0);
  if (*(_DWORD *)(a2 + 200) != 3)
  {
    *((_QWORD *)v28 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v28 + 15, **((uint64_t ***)v28 + 1), 1, 39);
    if (*(_DWORD *)(a2 + 200) != 3)
      *((_QWORD *)v28 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v28 + 15, **v29, 1, 19);
  }
  *((_QWORD *)v28 + 6) = v9;
  if ((v28[31] & 0x10) != 0)
  {
    v30 = (llvm::ValueSymbolTable *)v9[14];
    if (v30)
      llvm::ValueSymbolTable::reinsertValue(v30, (llvm::Value *)v29);
  }
  v31 = *a4;
  *((_QWORD *)v28 + 8) = *a4;
  *((_QWORD *)v28 + 9) = a4;
  v32 = v28 + 64;
  *(_QWORD *)(v31 + 8) = v32;
  *a4 = (uint64_t)v32;
  return v29;
}

void sub_1C605D954(llvm::AttributeList *a1, llvm::LLVMContext *a2, uint64_t a3, unsigned __int8 a4)
{
  llvm::LLVMContext *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = v11;
  v10 = 0x800000000;
  llvm::AttrBuilder::addAttribute((unsigned int *)&v8, 39);
  llvm::AttrBuilder::addAttribute((unsigned int *)&v8, 19);
  llvm::AttrBuilder::addAlignmentAttr((uint64_t)&v8, a4 | 0x100);
  llvm::AttrBuilder::addDereferenceableAttr((llvm::AttrBuilder *)&v8, a3);
  *(_QWORD *)a1 = llvm::AttributeList::addAttributesAtIndex(a1, a2, 1, (const llvm::AttrBuilder *)&v8);
  if (v9 != v11)
    free(v9);
}

void sub_1C605DA34(uint64_t ***a1, uint64_t a2, uint64_t **a3, int a4, _QWORD *a5)
{
  int v10;
  const llvm::APInt *v11;
  unsigned __int8 *v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::ConstantInt *v22;
  unsigned int v23;
  char v24;
  uint64_t **v25;
  uint64_t **v26;
  unsigned __int8 **v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  llvm::ConstantInt *v35;
  unint64_t v36;
  llvm::PointerType *v37;
  uint64_t v38;
  BOOL v39;
  llvm::Value *v40;
  uint64_t **v41;
  uint64_t SinglePredecessor;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ***v46;
  uint64_t ***v47;
  uint64_t ***v48;
  uint64_t ***v49;
  uint64_t ***v50;
  llvm::ValueSymbolTable *v52;
  llvm::ValueSymbolTable *v53;
  uint64_t ***v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t **v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  llvm::Type *v65;
  llvm::UndefValue *v66;
  uint64_t v67;
  _QWORD *v68;
  llvm::Value *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::Value **v74;
  llvm::Value *v75;
  int v76;
  int v77;
  uint64_t v78;
  size_t *v79;
  size_t v80;
  int v81;
  size_t v82;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t ***v90;
  uint64_t ***v91;
  llvm::ValueSymbolTable *v92;
  uint64_t ***v93;
  uint64_t v94;
  int v95;
  llvm::ValueSymbolTable *v96;
  char *__s1;
  uint64_t v98;
  llvm::Value *v99;
  unsigned int v100;
  char v101[32];
  __int16 v102;
  void *v103[3];
  char v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[32];
  char *v113[2];
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _BYTE v117[72];
  void *v118[2];
  _WORD v119[16];
  uint64_t **v120;
  _QWORD *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (llvm::Constant::isOneValue((llvm::Constant *)a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4]))
  {
    sub_1C4773D54((uint64_t)&v105, (uint64_t)a1, 0, 0, 0);
    v10 = *(_DWORD *)(a2 + 200);
    if ((v10 - 1) >= 2)
    {
      if (!v10)
      {
        sub_1C605A4CC((uint64_t)&v105, a2, a3);
        if ((a4 & 1) == 0)
        {
LABEL_11:
          v12 = v105;
          v13 = (void **)&v105;
          goto LABEL_28;
        }
      }
    }
    else if (!*(_BYTE *)(a2 + 296))
    {
      sub_1C63CE998(a2, (uint64_t *)&v105, (unsigned __int8 *)a3, a5);
    }
    sub_1C5062CEC((uint64_t)a1, 1, (uint64_t)v103);
    if (v104)
    {
      v27 = LLVMBuildCleanupRet_0((uint64_t *)&v105, *(llvm::Value **)v103[0], 0);
      v28 = (uint64_t *)a1[5];
      v119[8] = 257;
      llvm::BasicBlock::splitBasicBlock(v28, (uint64_t *)a1 + 3, (uint64_t)v118, 0);
      v29 = v27[5];
      v30 = (unsigned __int8 *)*((_QWORD *)v29 + 5);
      if (v30 == v29 + 40)
      {
        v32 = 0;
      }
      else
      {
        if (v30)
          v31 = v30 - 24;
        else
          v31 = 0;
        if (v31[16] - 29 >= 0xB)
          v32 = 0;
        else
          v32 = v31;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v32 + 5) + 40, (uint64_t ***)v32);
      v33 = *((_QWORD *)v32 + 3);
      v34 = (_QWORD *)*((_QWORD *)v32 + 4);
      *v34 = v33;
      *(_QWORD *)(v33 + 8) = v34;
      *((_QWORD *)v32 + 3) = 0;
      *((_QWORD *)v32 + 4) = 0;
      llvm::Value::deleteValue((llvm::Value *)v32);
    }
    goto LABEL_11;
  }
  sub_1C4773D54((uint64_t)v103, (uint64_t)a1, 0, 0, 0);
  switch(*(_DWORD *)(a2 + 200))
  {
    case 0:
      if (a4)
        goto LABEL_17;
      goto LABEL_27;
    case 1:
      if (!*(_BYTE *)(a2 + 296))
        sub_1C63CE998(a2, (uint64_t *)v103, (unsigned __int8 *)a3, a5);
      v36 = sub_1C63CFCD4(a2);
      v38 = **(_QWORD **)(v36 + 16);
      if (v38)
        v39 = *(_BYTE *)(v38 + 8) == 16;
      else
        v39 = 0;
      if (v39)
      {
        v64 = llvm::ConstantPointerNull::get(**(llvm::ConstantPointerNull ***)(v38 + 16), v37);
        v66 = llvm::UndefValue::get((llvm::UndefValue *)v38, v65);
        LODWORD(v118[0]) = 0;
        LOWORD(v108) = 257;
        v40 = (llvm::Value *)sub_1C506D788((uint64_t)v103, (uint64_t)v66, (uint64_t)v64, v118, 1, (uint64_t)&v105);
      }
      else
      {
        v40 = (llvm::Value *)llvm::ConstantPointerNull::get(**(llvm::ConstantPointerNull ***)(v36 + 16), v37);
      }
      sub_1C538D7E4((uint64_t *)v103, v40);
      goto LABEL_18;
    case 2:
      if (!*(_BYTE *)(a2 + 296))
        sub_1C63CE998(a2, (uint64_t *)v103, (unsigned __int8 *)a3, a5);
LABEL_17:
      LLVMBuildRetVoid_0((uint64_t *)v103);
      goto LABEL_18;
    case 3:
      sub_1C4773D54((uint64_t)v118, (uint64_t)a1, 0, 0, 0);
      if (*((_DWORD *)*(a1 - 4) + 9) == 33 && sub_1C63CEA44((uint64_t)a1))
      {
        v41 = a1[5];
        SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v41);
        v43 = *(_QWORD *)(SinglePredecessor + 40);
        if (v43)
          v44 = v43 - 24;
        else
          v44 = 0;
        if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB)
          v44 = 0;
        v45 = *(_QWORD *)(v44 + 24);
        if (v45)
          v46 = (uint64_t ***)(v45 - 24);
        else
          v46 = 0;
        v47 = a1 + 3;
        v48 = v46 + 3;
        if (v45)
          v49 = v46 + 3;
        else
          v49 = 0;
        v50 = (uint64_t ***)v49[1];
        if (v47 != v49 && v50 != v47)
        {
          *((_WORD *)v41 + 9) &= ~0x8000u;
          if (v41 != (uint64_t **)SinglePredecessor)
          {
            v52 = (llvm::ValueSymbolTable *)v41[7];
            if (v52)
              v52 = (llvm::ValueSymbolTable *)*((_QWORD *)v52 + 13);
            v53 = *(llvm::ValueSymbolTable **)(SinglePredecessor + 56);
            if (v53)
              v53 = (llvm::ValueSymbolTable *)*((_QWORD *)v53 + 13);
            if (v52 == v53)
            {
              if (v49 != v50)
              {
                do
                {
                  v54 = v48 - 3;
                  if (!v48)
                    v54 = 0;
                  v54[5] = v41;
                  v48 = (uint64_t ***)v48[1];
                }
                while (v48 != v50);
              }
            }
            else
            {
              v96 = v53;
              v92 = v52;
              if (v49 != v50)
              {
                v90 = v50;
                v91 = v49;
                do
                {
                  v69 = (llvm::Value *)(v48 - 3);
                  v93 = v48;
                  if (!v48)
                    v69 = 0;
                  v99 = v69;
                  v95 = *((_DWORD *)v69 + 5) & 0x10000000;
                  if (v96 && v95)
                  {
                    v70 = ***(_QWORD ***)v69;
                    v71 = *(_QWORD *)(v70 + 152);
                    v72 = *(unsigned int *)(v70 + 168);
                    if ((_DWORD)v72)
                    {
                      LODWORD(v73) = (v72 - 1) & ((v99 >> 4) ^ (v99 >> 9));
                      v74 = (llvm::Value **)(v71 + 16 * v73);
                      v75 = *v74;
                      if (*v74 != v99)
                      {
                        v76 = 1;
                        do
                        {
                          if (v75 == (llvm::Value *)-4096)
                            goto LABEL_128;
                          v77 = v73 + v76++;
                          v73 = v77 & (v72 - 1);
                          v75 = *(llvm::Value **)(v71 + 16 * v73);
                        }
                        while (v75 != v99);
                        v74 = (llvm::Value **)(v71 + 16 * v73);
                      }
                    }
                    else
                    {
LABEL_128:
                      v74 = (llvm::Value **)(v71 + 16 * v72);
                    }
                    v78 = *((unsigned int *)v96 + 2);
                    if ((_DWORD)v78)
                    {
                      v79 = (size_t *)v74[1];
                      v94 = *((unsigned int *)v96 + 5);
                      __s1 = (char *)v79 + v94;
                      v80 = *v79;
                      if (*v79)
                      {
                        v81 = 0;
                        v82 = *v79;
                        v83 = (unsigned __int8 *)v79 + v94;
                        do
                        {
                          v84 = *v83++;
                          v81 = 33 * v81 + v84;
                          --v82;
                        }
                        while (v82);
                      }
                      else
                      {
                        v81 = 0;
                      }
                      v100 = v78 - 1;
                      v85 = *(_QWORD *)v96;
                      v98 = *(_QWORD *)v96 + 8 * v78 + 8;
                      v86 = 1;
                      v87 = v81;
                      while (1)
                      {
                        v88 = v87 & v100;
                        v89 = *(_QWORD **)(v85 + 8 * v88);
                        if (v89 != (_QWORD *)-8)
                        {
                          if (!v89)
                            goto LABEL_142;
                          if (*(_DWORD *)(v98 + 4 * v88) == v81
                            && v80 == *v89
                            && (!v80 || !memcmp(__s1, (char *)v89 + v94, v80)))
                          {
                            break;
                          }
                        }
                        v87 = v86 + v88;
                        ++v86;
                      }
                      *(_QWORD *)(v85 + 8 * (int)v88) = -8;
                      *(int32x2_t *)((char *)v96 + 12) = vadd_s32(*(int32x2_t *)((char *)v96 + 12), (int32x2_t)0x1FFFFFFFFLL);
                    }
                  }
LABEL_142:
                  *((_QWORD *)v99 + 5) = v41;
                  if (v92 && v95)
                    llvm::ValueSymbolTable::reinsertValue(v92, v99);
                  v48 = (uint64_t ***)v93[1];
                  v50 = v90;
                  v49 = v91;
                }
                while (v48 != v90);
              }
            }
          }
          if (v50 != v49)
          {
            v55 = *v50;
            v56 = *v49;
            v56[1] = (uint64_t *)v50;
            *v50 = v56;
            v57 = *v47;
            v55[1] = (uint64_t *)v47;
            *v49 = v57;
            v57[1] = (uint64_t *)v49;
            *v47 = v55;
          }
        }
        v58 = (unsigned __int8 *)a1[6];
        v120 = a1[5];
        v121 = a1 + 3;
        v105 = v58;
        if (v58)
        {
          llvm::MetadataTracking::track((uint64_t)&v105, v58, 2);
          v59 = v105;
        }
        else
        {
          v59 = 0;
        }
        sub_1C4774EF4((uint64_t)v118, 0, (uint64_t)v59);
        if (v105)
          llvm::MetadataTracking::untrack((uint64_t)&v105, v105);
        LLVMBuildRetVoid_0((uint64_t *)v118);
        v105 = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
        v109 = 0;
        v110 = v112;
        v111 = 0x400000000;
        v113[0] = (char *)&v114;
        v113[1] = (char *)0x800000000;
        v115 = v117;
        v116 = 0x800000000;
        v117[64] = 1;
        v60 = (uint64_t *)a1[5];
        v102 = 257;
        llvm::BasicBlock::splitBasicBlock(v60, (uint64_t *)a1 + 3, (uint64_t)v101, 0);
        v61 = (uint64_t *)v60[5];
        if (v61 == v60 + 5)
        {
          v63 = 0;
        }
        else
        {
          if (v61)
            v62 = v61 - 3;
          else
            v62 = 0;
          if (*((unsigned __int8 *)v62 + 16) - 29 >= 0xB)
            v63 = 0;
          else
            v63 = v62;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v63[5] + 40, (uint64_t ***)v63);
        v67 = v63[3];
        v68 = (_QWORD *)v63[4];
        *v68 = v67;
        *(_QWORD *)(v67 + 8) = v68;
        v63[3] = 0;
        v63[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v63);
        llvm::InlineFunction(v46, (uint64_t)&v105, 0, 1, 0);
        if (v115 != v117)
          free(v115);
        sub_1C52768FC(v113);
        if (v110 != v112)
          free(v110);
        if (v118[0] != v119)
          free(v118[0]);
        goto LABEL_27;
      }
      LLVMBuildRetVoid_0((uint64_t *)v118);
      if (v118[0] != v119)
        free(v118[0]);
LABEL_18:
      v14 = (uint64_t *)a1[5];
      LOWORD(v108) = 257;
      llvm::BasicBlock::splitBasicBlock(v14, (uint64_t *)a1 + 3, (uint64_t)&v105, 0);
      v15 = (uint64_t *)v14[5];
      if (v15 == v14 + 5)
      {
        v17 = 0;
      }
      else
      {
        if (v15)
          v16 = v15 - 3;
        else
          v16 = 0;
        if (*((unsigned __int8 *)v16 + 16) - 29 >= 0xB)
          v17 = 0;
        else
          v17 = v16;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v17[5] + 40, (uint64_t ***)v17);
      v18 = v17[3];
      v19 = (_QWORD *)v17[4];
      *v19 = v18;
      *(_QWORD *)(v18 + 8) = v19;
      v17[3] = 0;
      v17[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v17);
LABEL_27:
      v12 = (unsigned __int8 *)v103[0];
      v13 = v103;
      break;
    default:
      goto LABEL_18;
  }
LABEL_28:
  if (v12 != (unsigned __int8 *)(v13 + 2))
    free(v12);
  v20 = ***a1;
  if (a4)
  {
    v21 = *(llvm::Value **)(v20 + 1560);
    if (!v21)
    {
      v22 = *(llvm::ConstantInt **)(v20 + 1888);
      v23 = *(_DWORD *)(v20 + 1896);
      LODWORD(v106) = v23 >> 8;
      if (v23 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v105, 1, 0);
      }
      else
      {
        if (v23 <= 0xFF)
          v24 = 0;
        else
          v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
        v105 = (unsigned __int8 *)(v24 & 1);
      }
      v21 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v105, v11);
      if (v106 >= 0x41 && v105)
        MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
      *(_QWORD *)(v20 + 1560) = v21;
    }
  }
  else
  {
    v21 = *(llvm::Value **)(v20 + 1568);
    if (!v21)
    {
      v35 = *(llvm::ConstantInt **)(v20 + 1888);
      LODWORD(v106) = *(_DWORD *)(v20 + 1896) >> 8;
      if (v106 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v105, 0, 0);
      else
        v105 = 0;
      v21 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v105, v11);
      if (v106 >= 0x41 && v105)
        MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
      *(_QWORD *)(v20 + 1568) = v21;
    }
  }
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, v21, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(a1[5] + 5), a1);
  v25 = a1[3];
  v26 = a1[4];
  *v26 = (uint64_t *)v25;
  v25[1] = (uint64_t *)v26;
  a1[3] = 0;
  a1[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)a1);
}

_QWORD *sub_1C605E378(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(a2 + 40) != a2 + 40)
  {
    v3 = *(_QWORD *)(a2 + 48);
    v4 = v3 - 24;
    v5 = v3 ? v3 - 24 : 0;
    if (v3 && *(_BYTE *)(v5 + 16) == 83)
    {
      v7 = result;
      do
      {
        v8 = *(_DWORD *)(v4 + 20);
        v9 = v8 & 0x7FFFFFF;
        if ((v8 & 0x7FFFFFF) != 0)
        {
          v10 = 0;
          while (1)
          {
            v11 = v4 - 32 * v9;
            if ((v8 & 0x40000000) != 0)
              v11 = *(_QWORD *)(v4 - 8);
            if (*(_QWORD **)(v11 + 32 * *(unsigned int *)(v4 + 60) + 8 * v10) == v7)
              break;
            if (v9 == ++v10)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_14:
          LODWORD(v10) = -1;
        }
        if ((v8 & 0x40000000) != 0)
          v12 = *(_QWORD *)(v4 - 8);
        else
          v12 = v4 - 32 * v9;
        v13 = *(_QWORD *)(v12 + 32 * v10);
        v16 = v13;
        v17 = 0;
        if (sub_1C4926528(a3, &v16, &v17) && v17 != *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16))
          v13 = *(_QWORD *)(v17 + 8);
        v17 = v4;
        result = sub_1C4EAD954((uint64_t *)a3, &v17);
        result[1] = v13;
        v14 = *(_QWORD *)(v4 + 32);
        v4 = v14 - 24;
        if (v14)
          v15 = v14 - 24;
        else
          v15 = 0;
      }
      while (v14 && *(_BYTE *)(v15 + 16) == 83);
    }
  }
  return result;
}

uint64_t sub_1C605E4AC(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  if (*(_DWORD *)(a4 + 200) == 3)
    v9 = 4;
  else
    v9 = 3;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 56) = 128;
  v10 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v11)
  {
    v12 = v11 << 6;
    v13 = v10 + 16;
    do
    {
      *v13 = 0;
      v13[1] = -4096;
      *(v13 - 2) = &unk_1E814DA10;
      *(v13 - 1) = 2;
      v13[2] = 0;
      v13 += 8;
      v12 -= 64;
    }
    while (v12);
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  v14 = **a2;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 0x200000000;
  *(_QWORD *)(a1 + 168) = v14;
  *(_QWORD *)(a1 + 176) = a1 + 224;
  *(_QWORD *)(a1 + 184) = a1 + 232;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 204) = 512;
  *(_BYTE *)(a1 + 206) = 7;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = &unk_1E8167888;
  *(_QWORD *)(a1 + 232) = &unk_1E8167A08;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a6;
  return a1;
}

uint64_t sub_1C605E5BC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6059794(v0, 0);
}

void sub_1C605E5EC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C605E610()
{
  return "Coroutine Splitting";
}

uint64_t sub_1C605E624(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _OWORD v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v5[0] = xmmword_1E81AC708;
  v5[1] = *(_OWORD *)&off_1E81AC718;
  v5[2] = xmmword_1E81AC728;
  *(_BYTE *)(a1 + 28) = sub_1C603E040(v3, (uint64_t)v5, 3);
  return 0;
}

uint64_t sub_1C605E6A4(uint64_t a1, uint64_t **a2)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int i;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  int v31;
  unint64_t v32;
  int v33;
  void **v34;
  void *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t **v41;
  llvm::PointerType *v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  llvm::Instruction *v47;
  uint64_t v48;
  uint64_t **v49;
  unint64_t *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unsigned int v54;
  unint64_t *v55;
  char *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int j;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  int v74;
  llvm::MemorySSAUpdater *v75;
  uint64_t ****v76;
  uint64_t v77;
  uint64_t ***v78;
  int v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v88[2];
  _QWORD *v89;
  int v90[2];
  uint64_t v91;
  void *__src;
  uint64_t v94;
  _DWORD v95[4];
  __int16 v96;
  int v97;
  uint64_t **v98;
  unint64_t *v99;
  uint64_t v100;
  _BYTE v101[32];
  unint64_t *v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t *v105;
  uint64_t v106;
  _QWORD v107[4];

  v107[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = a2;
    v105 = v107;
    v106 = 0x200000000;
    v3 = **a2;
    sub_1C6054F44(*(uint64_t **)(v3 + 112), (uint64_t)&v105, "llvm.coro.prepare.retcon", 0x18uLL);
    sub_1C6054F44(*(uint64_t **)(v3 + 112), (uint64_t)&v105, "llvm.coro.prepare.async", 0x17uLL);
    v102 = (unint64_t *)v104;
    v103 = 0x400000000;
    v11 = v2[2];
    v12 = v2[3];
    v10 = v2 + 2;
    v91 = (uint64_t)v2;
    if (v11 == v12)
      goto LABEL_39;
    v4 = 0x7A48DC6FE7EA5090;
    v5 = 3946327401;
    v6 = &llvm::hashing::detail::fixed_seed_override;
    v7 = 0x6E6974756F726F63;
    v8 = 0x6C70736572702E65;
    v9 = 29801;
    do
    {
      v13 = *(_QWORD *)(*v11 + 8);
      if (!v13)
        goto LABEL_30;
      v14 = *(_QWORD *)(v13 + 112);
      if (!v14)
        goto LABEL_30;
      if (!*(_DWORD *)(v14 + 8))
        goto LABEL_30;
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
        goto LABEL_30;
      v16 = *(_DWORD *)(v15 + 40);
      if (!v16)
        goto LABEL_30;
      v17 = *(_QWORD *)(v15 + 24);
      v18 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v18 & 1) == 0)
      {
        *(_QWORD *)v88 = v10;
        v31 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v9 = 29801;
        v8 = 0x6C70736572702E65;
        v7 = 0x6E6974756F726F63;
        v6 = &llvm::hashing::detail::fixed_seed_override;
        v5 = 3946327401;
        v4 = 0x7A48DC6FE7EA5090;
        v10 = *(_QWORD **)v88;
        if (v31)
        {
          v32 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v32 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v32;
          __cxa_guard_release(&qword_1ED7EAC88);
          v9 = 29801;
          v8 = 0x6C70736572702E65;
          v7 = 0x6E6974756F726F63;
          v6 = &llvm::hashing::detail::fixed_seed_override;
          v5 = 3946327401;
          v4 = 0x7A48DC6FE7EA5090;
          v10 = *(_QWORD **)v88;
        }
      }
      v19 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
      v20 = 0x9DDFEA08EB382D69
          * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                        * ((v19 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80
                                                                                         - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v19 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
      v21 = -348639895 * ((v20 >> 47) ^ v20);
      for (i = 1; ; ++i)
      {
        v23 = v21 & (v16 - 1);
        v24 = (uint64_t *)(v17 + 24 * v23);
        v25 = *v24;
        if (*v24 == -1)
        {
          if ("coroutine.presplit" == (char *)-1)
            goto LABEL_27;
          goto LABEL_13;
        }
        if (v25 != -2)
          break;
        if ("coroutine.presplit" == (char *)-2)
          goto LABEL_27;
LABEL_13:
        if (v25 == -1)
          goto LABEL_30;
        v21 = i + v23;
      }
      if (v24[1] != 18)
        goto LABEL_13;
      v26 = *(_QWORD *)v25 == 0x6E6974756F726F63 && *(_QWORD *)(v25 + 8) == 0x6C70736572702E65;
      if (!v26 || *(_WORD *)(v25 + 16) != 29801)
        goto LABEL_13;
LABEL_27:
      v28 = v103;
      if (v103 >= (unint64_t)HIDWORD(v103))
      {
        v29 = v10;
        v30 = v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, (uint64_t)v104, v103 + 1, 8);
        v9 = 29801;
        v8 = 0x6C70736572702E65;
        v7 = 0x6E6974756F726F63;
        v6 = v30;
        v5 = 3946327401;
        v4 = 0x7A48DC6FE7EA5090;
        v10 = v29;
        v28 = v103;
      }
      v102[v28] = v13;
      LODWORD(v103) = v103 + 1;
LABEL_30:
      ++v11;
    }
    while (v11 != v12);
    v2 = (_QWORD **)v91;
    if ((_DWORD)v103)
      goto LABEL_41;
LABEL_39:
    if (!(_DWORD)v106)
    {
LABEL_40:
      LOBYTE(v33) = 0;
      goto LABEL_106;
    }
LABEL_41:
    v89 = v10;
    v34 = **(void ****)(a1 + 8);
    do
    {
      v35 = *v34;
      v34 += 2;
    }
    while (v35 != &llvm::CallGraphWrapperPass::ID);
    v36 = *(uint64_t ***)((*(uint64_t (**)(_QWORD, void *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*(v34 - 1) + 96))(*(v34 - 1), &llvm::CallGraphWrapperPass::ID, v4, v5, v6, v7, v8, v9)+ 32);
    if ((_DWORD)v103)
    {
      v37 = *v36;
      v38 = sub_1C4FB7E80((uint64_t *)(*v36)[14], "coro.devirt.trigger", 0x13uLL);
      if (!v38 || *(_BYTE *)(v38 + 16))
      {
        v39 = (_QWORD *)*v37;
        v40 = *(_QWORD *)*v37;
        v41 = (uint64_t **)(v40 + 1576);
        __src = (void *)llvm::PointerType::get((llvm::PointerType *)(v40 + 1912), 0);
        v42 = (llvm::PointerType *)llvm::FunctionType::get(v41, (uint64_t *)&__src, 1, 0);
        __src = "coro.devirt.trigger";
        v96 = 259;
        v43 = (char *)operator new(0x80uLL);
        *((_DWORD *)v43 + 7) = *((_DWORD *)v43 + 7) & 0x38000000 | 0x40000000;
        *(_QWORD *)v43 = 0;
        llvm::Function::Function((uint64_t *)v43 + 1, v42, 8, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&__src, (uint64_t)v37);
        *((_QWORD *)v43 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v43 + 15, **((uint64_t ***)v43 + 1), -1, 2);
        __src = "entry";
        v96 = 259;
        v44 = operator new();
        *(_QWORD *)v44 = *v39 + 1600;
        *(_QWORD *)(v44 + 8) = 0;
        v45 = *(_DWORD *)(v44 + 20) & 0xC0000000;
        *(_DWORD *)(v44 + 16) = 22;
        *(_DWORD *)(v44 + 20) = v45;
        *(_QWORD *)(v44 + 24) = 0;
        *(_QWORD *)(v44 + 32) = 0;
        *(_QWORD *)(v44 + 40) = v44 + 40;
        *(_QWORD *)(v44 + 48) = v44 + 40;
        *(_QWORD *)(v44 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v43 + 80), (_QWORD *)v44);
        v46 = *((_QWORD *)v43 + 10);
        *(_QWORD *)(v44 + 32) = v43 + 80;
        *(_QWORD *)(v44 + 24) = v46;
        *(_QWORD *)(v46 + 8) = v44 + 24;
        *((_QWORD *)v43 + 10) = v44 + 24;
        llvm::Value::setName((uint64_t ***)v44, (uint64_t)&__src);
        v47 = (llvm::Instruction *)operator new(0x40uLL);
        *((_DWORD *)v47 + 5) &= 0x38000000u;
        llvm::Instruction::Instruction(v47, (llvm::Type *)(*v39 + 1576), 1, v47, 0, (llvm::BasicBlock *)v44);
        v99 = (unint64_t *)(v43 + 8);
        __src = &v99;
        v49 = sub_1C4DE25A0(v36 + 1, (unint64_t *)&v99, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src)
            + 5;
        v48 = (uint64_t)*v49;
        if (!*v49)
        {
          v50 = v99;
          v48 = operator new();
          *(_QWORD *)v48 = v36;
          *(_QWORD *)(v48 + 8) = v50;
          *(_QWORD *)(v48 + 24) = 0;
          *(_QWORD *)(v48 + 32) = 0;
          *(_QWORD *)(v48 + 16) = 0;
          *(_DWORD *)(v48 + 40) = 0;
          v51 = (uint64_t)*v49;
          *v49 = (uint64_t *)v48;
          if (v51)
          {
            sub_1C4DDE2A8((uint64_t)v49, v51);
            v48 = (uint64_t)*v49;
          }
        }
        v52 = (char *)v2[2];
        v53 = (char *)v2[3];
        __src = v95;
        v94 = 0x800000000;
        sub_1C6177054((unsigned int *)&__src, v52, v53);
        v54 = v94;
        if (v94 >= HIDWORD(v94))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v95, v94 + 1, 8);
          v54 = v94;
        }
        *((_QWORD *)__src + v54) = v48;
        LODWORD(v94) = v94 + 1;
        sub_1C4DE4490(v89, (char *)__src, (char *)__src + 8 * v94, v94);
        if (__src != v95)
          free(__src);
      }
      if (!(_DWORD)v103)
        goto LABEL_97;
      v55 = v102;
      v56 = (char *)&v102[v103];
      while (1)
      {
        v57 = *v55;
        v58 = (uint64_t *)(*v55 + 112);
        v59 = *v58;
        if (!*v58)
          goto LABEL_81;
        if (!*(_DWORD *)(v59 + 8))
          goto LABEL_81;
        v60 = *(_QWORD *)(v59 + 40);
        if (!v60)
          goto LABEL_81;
        v61 = *(_DWORD *)(v60 + 40);
        if (!v61)
          goto LABEL_81;
        v62 = *(_QWORD *)(v60 + 24);
        v63 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v63 & 1) == 0)
        {
          *(_QWORD *)v90 = *v55 + 112;
          v79 = __cxa_guard_acquire(&qword_1ED7EAC88);
          v58 = *(uint64_t **)v90;
          if (v79)
          {
            v80 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v80 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v80;
            __cxa_guard_release(&qword_1ED7EAC88);
            v58 = *(uint64_t **)v90;
          }
        }
        v64 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
        v65 = 0x9DDFEA08EB382D69
            * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                          * ((v64 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80
                                                                                           - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v64 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
        v66 = -348639895 * ((v65 >> 47) ^ v65);
        for (j = 1; ; ++j)
        {
          v68 = v66 & (v61 - 1);
          v69 = (uint64_t *)(v62 + 24 * v68);
          v70 = *v69;
          if (*v69 == -1)
          {
            if ("coroutine.presplit" == (char *)-1)
              goto LABEL_76;
            goto LABEL_62;
          }
          if (v70 != -2)
            break;
          if ("coroutine.presplit" == (char *)-2)
            goto LABEL_76;
LABEL_62:
          if (v70 == -1)
            goto LABEL_81;
          v66 = j + v68;
        }
        if (v69[1] != 18)
          goto LABEL_62;
        v71 = *(_QWORD *)v70 == 0x6E6974756F726F63 && *(_QWORD *)(v70 + 8) == 0x6C70736572702E65;
        if (!v71 || *(_WORD *)(v70 + 16) != 29801)
          goto LABEL_62;
LABEL_76:
        v73 = v69[2];
        if (!v73 || *(_DWORD *)(v73 + 16) != 1)
          goto LABEL_81;
        v74 = *(unsigned __int8 *)(v73 + *(unsigned int *)(v73 + 12) + 25);
        if (v74 == 48)
        {
          sub_1C605F444(v57, (uint64_t)v36, 0);
        }
        else
        {
          if (v74 == 50)
          {
            *(_QWORD *)(v57 + 112) = llvm::AttributeList::removeAttributeAtIndex(v58, **(uint64_t ***)v57, -1, "coroutine.presplit", 0x12uLL);
            goto LABEL_90;
          }
LABEL_81:
          *(_QWORD *)(v57 + 112) = llvm::AttributeList::removeAttributeAtIndex(v58, **(uint64_t ***)v57, -1, "coroutine.presplit", 0x12uLL);
          v99 = (unint64_t *)v101;
          v100 = 0x400000000;
          sub_1C6055128((uint64_t **)&__src, (llvm *)v57, (uint64_t)&v99, (llvm::MemorySSAUpdater *)*(unsigned __int8 *)(a1 + 29));
          if (__src)
          {
            if (v95[0])
            {
              v76 = (uint64_t ****)v94;
              v77 = 8 * v95[0];
              do
              {
                v78 = *v76++;
                sub_1C605DA34(v78, (uint64_t)&__src, v98, 0, v36);
                v77 -= 8;
              }
              while (v77);
            }
            llvm::removeUnreachableBlocks((llvm *)v57, 0, 0, v75);
            sub_1C603E224(v57, v99, v100, (uint64_t)v36, v91);
          }
          if (v97 == 3)
            sub_1C605F444(v57, (uint64_t)v36, 1);
          sub_1C63CFD50(&__src);
          if (v99 != (unint64_t *)v101)
            free(v99);
        }
LABEL_90:
        if (++v55 == (unint64_t *)v56)
        {
LABEL_97:
          if ((_DWORD)v106)
          {
            v81 = v105;
            v82 = 8 * v106;
            do
            {
              v83 = *v81++;
              sub_1C605F198(*(_QWORD *)(v83 + 8), (uint64_t)v36);
              v82 -= 8;
            }
            while (v82);
            LOBYTE(v33) = 1;
          }
          else
          {
            LOBYTE(v33) = 1;
          }
          goto LABEL_106;
        }
      }
    }
    if (!(_DWORD)v106)
      goto LABEL_40;
    v33 = 0;
    v84 = v105;
    v85 = 8 * v106;
    do
    {
      v86 = *v84++;
      v33 |= sub_1C605F198(*(_QWORD *)(v86 + 8), (uint64_t)v36);
      v85 -= 8;
    }
    while (v85);
LABEL_106:
    if (v102 != (unint64_t *)v104)
      free(v102);
    if (v105 != v107)
      free(v105);
  }
  else
  {
    LOBYTE(v33) = 0;
  }
  return v33 & 1;
}

BOOL sub_1C605F198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  llvm::Value *v7;
  BOOL v8;
  uint64_t v9;
  llvm::CallGraphNode *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v41;
  uint64_t v42;

  if (a1)
  {
    v41 = (_QWORD *)(a2 + 16);
    v2 = a1;
    do
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = *(_QWORD *)(v2 + 8);
      v5 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
      v6 = llvm::Value::stripPointerCasts((llvm::Value *)v5);
      v7 = v6;
      if (v6)
        v8 = *((_BYTE *)v6 + 16) == 0;
      else
        v8 = 0;
      v42 = v4;
      if (v8)
      {
        v11 = (_QWORD *)*v41;
        if (!*v41)
          goto LABEL_19;
        v12 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56);
        v13 = (_QWORD *)*v41;
        v14 = v41;
        do
        {
          v15 = v13[4];
          v16 = v15 >= v12;
          if (v15 >= v12)
            v17 = v13;
          else
            v17 = v13 + 1;
          if (v16)
            v14 = v13;
          v13 = (_QWORD *)*v17;
        }
        while (*v17);
        if (v14 == v41 || v14[4] > v12)
LABEL_19:
          v14 = v41;
        if (!v11)
          goto LABEL_31;
        v18 = v41;
        do
        {
          v19 = v11[4];
          v20 = v19 >= (unint64_t)v6;
          if (v19 >= (unint64_t)v6)
            v21 = v11;
          else
            v21 = v11 + 1;
          if (v20)
            v18 = v11;
          v11 = (_QWORD *)*v21;
        }
        while (*v21);
        if (v18 == v41 || v18[4] > (unint64_t)v6)
LABEL_31:
          v18 = v41;
        v10 = (llvm::CallGraphNode *)v14[5];
        v9 = v18[5];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v22 = *(_QWORD *)(v3 + 8);
      while (v22)
      {
        v23 = *(_QWORD *)(v22 + 24);
        v22 = *(_QWORD *)(v22 + 8);
        if (v23 && *(_BYTE *)(v23 + 16) == 77 && *(_QWORD *)v23 == *(_QWORD *)v7)
        {
          if (v10)
          {
            for (i = *(_QWORD *)(v23 + 8); i; i = *(_QWORD *)(i + 8))
            {
              v25 = *(_QWORD *)(i + 24);
              v26 = *(unsigned __int8 *)(v25 + 16);
              if (v26 >= 0x1C)
              {
                v27 = v26 - 33;
                v28 = v27 > 0x33;
                v29 = (1 << v27) & 0x8000000000041;
                v30 = v28 || v29 == 0;
                if (!v30 && v25 - 32 == i)
                {
                  llvm::CallGraphNode::removeCallEdgeFor(v10, *(llvm::CallBase **)(i + 24));
                  sub_1C4DDC318((uint64_t)v10, v25, v9);
                }
              }
            }
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v23, v7, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v23 + 40) + 40, (uint64_t ***)v23);
          v31 = *(_QWORD *)(v23 + 24);
          v32 = *(_QWORD **)(v23 + 32);
          *v32 = v31;
          *(_QWORD *)(v31 + 8) = v32;
          *(_QWORD *)(v23 + 24) = 0;
          *(_QWORD *)(v23 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v23);
        }
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v3, (llvm::Value *)v5, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v3 + 40) + 40, (uint64_t ***)v3);
      v33 = *(_QWORD *)(v3 + 24);
      v34 = *(_QWORD **)(v3 + 32);
      *v34 = v33;
      *(_QWORD *)(v33 + 8) = v34;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v3);
      if (v5)
      {
        v35 = *(unsigned __int8 *)(v5 + 16);
        while (v35 == 77)
        {
          if (*(_QWORD *)(v5 + 8))
            break;
          v36 = *(_QWORD *)(v5 - 32);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v5 + 40) + 40, (uint64_t ***)v5);
          v37 = *(_QWORD *)(v5 + 24);
          v38 = *(_QWORD **)(v5 + 32);
          *v38 = v37;
          *(_QWORD *)(v37 + 8) = v38;
          *(_QWORD *)(v5 + 24) = 0;
          *(_QWORD *)(v5 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v5);
          if (!v36)
            break;
          v35 = *(unsigned __int8 *)(v36 + 16);
          v5 = v36;
        }
      }
      v2 = v42;
    }
    while (v42);
  }
  return a1 != 0;
}

void *sub_1C605F444(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  llvm::AttributeList *v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  char *FirstNonPHIOrDbgOrLifetime;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  llvm::ConstantPointerNull *v17;
  llvm::PointerType *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  char *v24;
  _QWORD *v25;
  llvm::Value *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::ValueSymbolTable *v38;
  _QWORD *v39;
  _BYTE v40[40];
  uint64_t v41[4];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(a1 + 40);
  v8 = *(uint64_t ***)a1;
  v7 = (llvm::AttributeList *)(a1 + 112);
  v9 = *v8;
  if (a3)
    v10 = "2";
  else
    v10 = "1";
  *(_QWORD *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v7, v9, -1, "coroutine.presplit", 0x12uLL, (unsigned __int8 *)v10, 1uLL);
  sub_1C63CE630((uint64_t)v40, v6);
  v11 = *(_QWORD *)(a1 + 80);
  if (v11)
    v12 = (llvm::BasicBlock *)(v11 - 24);
  else
    v12 = 0;
  if (a3)
  {
    FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v12, 1);
  }
  else
  {
    v14 = (_QWORD *)*((_QWORD *)v12 + 5);
    if (v14 == (_QWORD *)((char *)v12 + 40))
    {
      FirstNonPHIOrDbgOrLifetime = 0;
    }
    else
    {
      v15 = (char *)(v14 - 3);
      if (v14)
        v16 = v14 - 3;
      else
        v16 = 0;
      if (*((unsigned __int8 *)v16 + 16) - 29 >= 0xB)
        FirstNonPHIOrDbgOrLifetime = 0;
      else
        FirstNonPHIOrDbgOrLifetime = v15;
    }
  }
  v17 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(*v9 + 1912), 0);
  v19 = llvm::ConstantPointerNull::get(v17, v18);
  v20 = sub_1C63CE6A8((uint64_t)v40, (uint64_t)v19, -1, (uint64_t)FirstNonPHIOrDbgOrLifetime);
  v21 = *v9;
  v22 = (uint64_t **)(*v9 + 1576);
  v41[0] = llvm::PointerType::get((llvm::PointerType *)(v21 + 1912), 0);
  v23 = (uint64_t **)llvm::FunctionType::get(v22, v41, 1, 0);
  v39 = v19;
  v42 = 257;
  v24 = (char *)operator new(0x90uLL);
  v25 = v24;
  v26 = (llvm::Value *)(v24 + 64);
  *((_DWORD *)v24 + 21) = *((_DWORD *)v24 + 21) & 0x38000000 | 2;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *((_QWORD *)v24 + 3) = v24 + 64;
  *((_QWORD *)v24 + 4) = 0;
  *((_QWORD *)v24 + 5) = 0;
  *((_QWORD *)v24 + 6) = 0;
  *((_QWORD *)v24 + 7) = v24 + 64;
  *((_QWORD *)v24 + 8) = *v23[2];
  *((_QWORD *)v24 + 9) = 0;
  v24[80] = 84;
  v24[81] = 0;
  *((_WORD *)v24 + 41) = 0;
  *((_DWORD *)v24 + 21) = 2;
  *(_OWORD *)(v24 + 88) = 0u;
  v27 = v24 + 88;
  *((_DWORD *)v24 + 30) = 0;
  *(_OWORD *)(v24 + 104) = 0u;
  if (FirstNonPHIOrDbgOrLifetime)
  {
    v34 = *((_QWORD *)FirstNonPHIOrDbgOrLifetime + 5);
    v35 = (uint64_t *)(FirstNonPHIOrDbgOrLifetime + 24);
    *((_QWORD *)v24 + 13) = v34;
    *(_WORD *)(v34 + 18) &= ~0x8000u;
    if ((v24[87] & 0x10) != 0)
    {
      v37 = *(_QWORD *)(v34 + 56);
      if (v37)
      {
        v38 = *(llvm::ValueSymbolTable **)(v37 + 104);
        if (v38)
          llvm::ValueSymbolTable::reinsertValue(v38, v26);
      }
    }
    v36 = *v35;
    v25[11] = *v35;
    v25[12] = v35;
    *(_QWORD *)(v36 + 8) = v27;
    *v35 = (uint64_t)v27;
  }
  v25[16] = 0;
  llvm::CallInst::init((uint64_t ***)v26, v23, v20, (uint64_t *)&v39, 1, 0, 0, (uint64_t)v41);
  v28 = *(_QWORD **)(a2 + 16);
  if (!v28)
    goto LABEL_29;
  v29 = (_QWORD *)(a2 + 16);
  do
  {
    v30 = v28[4];
    v31 = v30 >= a1;
    if (v30 >= a1)
      v32 = v28;
    else
      v32 = v28 + 1;
    if (v31)
      v29 = v28;
    v28 = (_QWORD *)*v32;
  }
  while (*v32);
  if (v29 == (_QWORD *)(a2 + 16) || v29[4] > a1)
LABEL_29:
    v29 = (_QWORD *)(a2 + 16);
  return sub_1C4DDC318(v29[5], (uint64_t)v26, *(_QWORD *)(a2 + 88));
}

void llvm::initializeLoadStoreVectorizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8385C8);
  if (v2 != -1)
  {
    v5[0] = sub_1C605F75C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8385C8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C605F75C(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeSCEVAAWrapperPassPass(a1, a2);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v4);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v5 = operator new();
  *(_QWORD *)v5 = "Vectorize load and store instructions";
  *(_QWORD *)(v5 + 8) = 37;
  *(_QWORD *)(v5 + 16) = "load-store-vectorizer";
  *(_QWORD *)(v5 + 24) = 21;
  *(_QWORD *)(v5 + 32) = &unk_1EF8F5D48;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C60604B8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C605F818(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5D48;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81AC748;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8385C8);
  if (v3 != -1)
  {
    v7[0] = sub_1C605F75C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8385C8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C605F8E0(uint64_t a1)
{
  _BYTE *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  llvm *UnderlyingObject;
  void ***v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  llvm *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  void *v71;
  void *v72;
  char *v73;
  void *v74;
  char *v75;
  unsigned int v77;
  unsigned int v78;
  llvm *v79;
  llvm *v80;
  int v81;
  void **p_p;
  uint64_t v84;
  int v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *v96[2];
  uint64_t v97;
  void **v98;
  uint64_t v99;
  int v100;
  __int128 __p;
  uint64_t v102;
  void **v103[2];
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void **v108[2];
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  _BYTE *v114;
  _BYTE *v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  _BYTE v119[64];
  void *v120;
  uint64_t v121;
  _BYTE v122[192];
  __int128 v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  _BYTE v127[64];
  void *v128;
  uint64_t v129;
  _BYTE v130[192];
  void *v131;
  void *__src;
  unsigned int v133;
  unsigned int v134;
  int v135;
  void *v136;
  int v137;
  uint64_t v138;
  void *v139;
  void *v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  void *v144;
  int v145;
  _QWORD v146[26];

  v146[24] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v123 = *(_QWORD *)a1;
  sub_1C5AE96B8((uint64_t)&v123, (uint64_t)&v131);
  v1 = v127;
  *(_QWORD *)&v123 = v127;
  v2 = __src;
  if (__src == v131)
  {
    *((_QWORD *)&v123 + 1) = v127;
    v3 = __src;
  }
  else
  {
    v77 = v133;
    v1 = malloc_type_malloc(8 * v133, 0x4065EBACuLL);
    if (!v1)
    {
      if (v77)
        goto LABEL_190;
      v1 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v1)
        goto LABEL_190;
    }
    *((_QWORD *)&v123 + 1) = v1;
    v3 = v131;
    v2 = __src;
  }
  v4 = v134;
  v124 = v133;
  if (v2 == v3)
    v5 = v134;
  else
    v5 = v133;
  if (v5)
  {
    memmove(v1, v2, 8 * v5);
    v4 = v134;
  }
  v125 = v4;
  v126 = v135;
  v128 = v130;
  v129 = 0x800000000;
  if (v137)
    sub_1C4DB22B8((uint64_t)&v128, (uint64_t *)&v136);
  v6 = v119;
  v114 = v119;
  v7 = v140;
  if (v140 != v139)
  {
    v78 = v141;
    v6 = malloc_type_malloc(8 * v141, 0x4065EBACuLL);
    if (v6 || !v78 && (v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v115 = v6;
      v8 = v139;
      v7 = v140;
      goto LABEL_12;
    }
LABEL_190:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v115 = v119;
  v8 = v140;
LABEL_12:
  v116 = v141;
  v9 = v142;
  if (v7 == v8)
    v10 = v142;
  else
    v10 = v141;
  if (v10)
  {
    memmove(v6, v7, 8 * v10);
    v9 = v142;
  }
  v117 = v9;
  v118 = v143;
  v120 = v122;
  v121 = 0x800000000;
  if (v145)
    sub_1C4DB22B8((uint64_t)&v120, (uint64_t *)&v144);
  v11 = 0;
LABEL_20:
  if ((_DWORD)v129 != (_DWORD)v121)
  {
LABEL_30:
    v81 = v11;
    v15 = *((_QWORD *)v128 + 3 * v129 - 3);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v102 = 0;
    __p = 0uLL;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96[1] = 0;
    v97 = 0;
    v96[0] = 0;
    v108[0] = 0;
    v108[1] = 0;
    v109 = 0;
    v111 = 0;
    v112 = 0;
    v110 = 0;
    v16 = v15 + 40;
    v103[0] = 0;
    v103[1] = 0;
    v104 = 0;
    v106 = 0;
    v107 = 0;
    v105 = 0;
    for (i = *(_QWORD *)(v15 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v16)
      {
        p_p = 0;
        v84 = 0;
        v85 = 0;
        sub_1C4DFEB14((uint64_t)&p_p, (uint64_t)v108);
        v86 = 0uLL;
        v87 = 0;
        sub_1C606152C(&v86, v110, v111, 0x2E8BA2E8BA2E8BA3 * ((v111 - v110) >> 3));
        v88 = 0;
        v89 = 0;
        v90 = 0;
        sub_1C4DFEB14((uint64_t)&v88, (uint64_t)v103);
        v91 = 0uLL;
        v92 = 0;
        sub_1C606152C(&v91, v105, v106, 0x2E8BA2E8BA2E8BA3 * ((v106 - v105) >> 3));
        v113 = (void **)&v105;
        sub_1C549A370(&v113);
        MEMORY[0x1CAA32FB4](v103[0], 8);
        v103[0] = (void **)&v110;
        sub_1C549A370(v103);
        MEMORY[0x1CAA32FB4](v108[0], 8);
        MEMORY[0x1CAA32FB4](v98, 8);
        v98 = p_p;
        v99 = v84;
        p_p = 0;
        v84 = 0;
        v100 = v85;
        v85 = 0;
        v67 = __p;
        if ((_QWORD)__p)
        {
          v70 = *((_QWORD *)&__p + 1);
          v71 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
            {
              v72 = *(void **)(v70 - 80);
              if ((void *)(v70 - 64) != v72)
                free(v72);
              v70 -= 88;
            }
            while (v70 != v67);
            v71 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v67;
          operator delete(v71);
        }
        __p = v86;
        v102 = v87;
        v87 = 0;
        v86 = 0uLL;
        MEMORY[0x1CAA32FB4](v93, 8);
        v93 = v88;
        v94 = v89;
        v88 = 0;
        v89 = 0;
        v95 = v90;
        v90 = 0;
        v68 = (char *)v96[0];
        if (v96[0])
        {
          v73 = (char *)v96[1];
          v74 = v96[0];
          if (v96[1] != v96[0])
          {
            do
            {
              v75 = (char *)*((_QWORD *)v73 - 10);
              if (v73 - 64 != v75)
                free(v75);
              v73 -= 88;
            }
            while (v73 != v68);
            v74 = v96[0];
          }
          v96[1] = v68;
          operator delete(v74);
        }
        *(_OWORD *)v96 = v91;
        v97 = v92;
        v92 = 0;
        v91 = 0uLL;
        v108[0] = (void **)&v91;
        sub_1C549A370(v108);
        MEMORY[0x1CAA32FB4](v88, 8);
        v108[0] = (void **)&v86;
        sub_1C549A370(v108);
        MEMORY[0x1CAA32FB4](p_p, 8);
        v69 = sub_1C60608A4((uint64_t *)a1, __p, *((uint64_t *)&__p + 1));
        v11 = v81 | v69 | sub_1C60608A4((uint64_t *)a1, (uint64_t)v96[0], (uint64_t)v96[1]);
        p_p = v96;
        sub_1C549A370(&p_p);
        MEMORY[0x1CAA32FB4](v93, 8);
        p_p = (void **)&__p;
        sub_1C549A370(&p_p);
        MEMORY[0x1CAA32FB4](v98, 8);
        LODWORD(v129) = v129 - 1;
        if ((_DWORD)v129)
          sub_1C56169E8(&v123);
        goto LABEL_20;
      }
      if (i)
        v18 = i - 24;
      else
        v18 = 0;
      v19 = *(unsigned __int8 *)(v18 + 16);
      v20 = (v19 - 33);
      if (v20 <= 0x37)
      {
        if (((1 << (v19 - 33)) & 0x8000000000041) != 0)
        {
          v22 = *(_QWORD *)(v18 + 64);
          if (!v22 || (*(_BYTE *)(v22 + 20) & 4) == 0 && (*(_BYTE *)(v22 + 17) & 0x10) == 0)
          {
            LODWORD(v113) = 7;
            if (sub_1C53E4BBC(v18, (__int32 *)&v113, 1uLL))
            {
              v58 = *(_QWORD *)(v18 - 32);
              if (!v58
                || *(_BYTE *)(v58 + 16)
                || *(_QWORD *)(v58 + 24) != *(_QWORD *)(v18 + 72)
                || *(_DWORD *)(v58 + 36) != 7)
              {
                goto LABEL_60;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44))
            {
              goto LABEL_60;
            }
          }
        }
        else
        {
          if (((1 << (v19 - 33)) & 0x808001C8000010) != 0)
            goto LABEL_60;
          if (v20 != 28)
            goto LABEL_39;
          if ((*(_WORD *)(v18 + 18) & 0x301) != 0)
            goto LABEL_60;
        }
        v19 = *(unsigned __int8 *)(v18 + 16);
      }
LABEL_39:
      v21 = (v19 - 33);
      if (v21 > 0x37)
        continue;
      if (((1 << v21) & 0x8000000000041) != 0)
      {
        v23 = *(_QWORD *)(v18 + 64);
        if (v23 && (*(_BYTE *)(v23 + 17) & 0x30) != 0)
          continue;
        v24 = *(_DWORD *)(v18 + 20);
        if (v24 < 0
          && (v59 = v18 - 32 * (v24 & 0x7FFFFFF), v62 = *(_QWORD *)(v59 - 8), v60 = v59 - 8, (v61 = v62) != 0))
        {
          v63 = -v61;
          while (1)
          {
            v64 = *(_DWORD *)(*(_QWORD *)(v60 + v63) + 8);
            v31 = v64 > 7;
            v65 = (1 << v64) & 0x83;
            if (v31 || v65 == 0)
              break;
            v63 += 16;
            if (!v63)
              goto LABEL_54;
          }
        }
        else
        {
LABEL_54:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44) & 1) != 0)
          {
            continue;
          }
        }
      }
      else if (v21 == 27)
      {
        if ((*(_WORD *)(v18 + 18) & 0x301) == 0)
          continue;
      }
      else if (((1 << v21) & 0x808001D0000010) == 0)
      {
        continue;
      }
LABEL_60:
      v25 = *(unsigned __int8 *)(v18 + 16);
      if (v25 == 60)
        v26 = v18;
      else
        v26 = 0;
      if (i && v25 == 60)
      {
        v27 = *(unsigned __int8 *)(v26 + 16);
        if (v27 == 60 || v27 == 61)
        {
          v28 = *(_WORD *)(v26 + 18);
          if ((v28 & 0x380) != 0 || (v28 & 1) != 0)
            continue;
        }
        else if ((v27 - 63) < 3 || (*(_WORD *)(v26 + 18) & 1) != 0)
        {
          continue;
        }
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 1072))(**(_QWORD **)(a1 + 40), v26))
        {
          v29 = *(_QWORD *)v26;
          v30 = *(_DWORD *)(*(_QWORD *)v26 + 8);
          if ((v30 & 0xFE) == 0x12)
            v30 = *(_DWORD *)(**(_QWORD **)(v29 + 16) + 8);
          v31 = v30 > 0x14u;
          v32 = (1 << v30) & 0x10A07F;
          if (!v31 && v32 != 0)
          {
            sub_1C4768AD0(*(_QWORD *)(a1 + 48), *(_QWORD *)v26);
            v36 = v35;
            if ((_DWORD)v34 == 1)
            if ((v36 & 7) == 0
              && ((*(_DWORD *)(v29 + 8) & 0xFE) != 0x12 || *(_BYTE *)(**(_QWORD **)(v29 + 16) + 8) != 15))
            {
              v79 = *(llvm **)(v26 - 32);
              v37 = *(_DWORD *)(*(_QWORD *)v79 + 8);
              if ((v37 & 0xFE) == 0x12)
                v37 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v79 + 16) + 8);
              v38 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 40) + 1064))(**(_QWORD **)(a1 + 40), v37 >> 8);
              v39 = (*(_DWORD *)(v29 + 8) & 0xFE) == 0x12 ? v29 : 0;
              if (v36 <= v38 >> 1
                && (!v39
                 || (*(unsigned int (**)(_QWORD, _QWORD, uint64_t, _QWORD))(***(_QWORD ***)(a1 + 40) + 1120))(**(_QWORD **)(a1 + 40), v38 / v36, v36, v36 >> 3)))
              {
                UnderlyingObject = llvm::getUnderlyingObject(v79, (const llvm::Value *)6);
                if (UnderlyingObject && *((_BYTE *)UnderlyingObject + 16) == 85)
                  UnderlyingObject = (llvm *)*((_QWORD *)UnderlyingObject - 12);
                v113 = (void **)UnderlyingObject;
                v41 = v108;
LABEL_124:
                v55 = sub_1C60610EC((uint64_t)v41, (uint64_t *)&v113);
                v56 = v55;
                v57 = *(unsigned int *)(v55 + 8);
                if (v57 >= *(unsigned int *)(v55 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v55, v55 + 16, v57 + 1, 8);
                  v57 = *(unsigned int *)(v56 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v56 + 8 * v57) = v26;
                ++*(_DWORD *)(v56 + 8);
                continue;
              }
            }
          }
        }
      }
      else
      {
        if (v25 == 61)
          v26 = v18;
        else
          v26 = 0;
        if (i && v25 == 61)
        {
          v42 = *(unsigned __int8 *)(v26 + 16);
          if (v42 == 60 || v42 == 61)
          {
            v43 = *(_WORD *)(v26 + 18);
            if ((v43 & 0x380) != 0 || (v43 & 1) != 0)
              continue;
          }
          else if ((v42 - 63) < 3 || (*(_WORD *)(v26 + 18) & 1) != 0)
          {
            continue;
          }
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 1080))(**(_QWORD **)(a1 + 40), v26))
          {
            v44 = **(_QWORD **)(v26 - 64);
            v45 = *(_DWORD *)(v44 + 8);
            if ((v45 & 0xFE) == 0x12)
              v45 = *(_DWORD *)(**(_QWORD **)(v44 + 16) + 8);
            v31 = v45 > 0x14u;
            v46 = (1 << v45) & 0x10A07F;
            v47 = v31 || v46 == 0;
            if (!v47 && ((*(_DWORD *)(v44 + 8) & 0xFE) != 0x12 || *(_BYTE *)(**(_QWORD **)(v44 + 16) + 8) != 15))
            {
              sub_1C4768AD0(*(_QWORD *)(a1 + 48), **(_QWORD **)(v26 - 64));
              v50 = v49;
              if ((_DWORD)v48 == 1)
              if ((v50 & 7) == 0)
              {
                v80 = *(llvm **)(v26 - 32);
                v51 = *(_DWORD *)(*(_QWORD *)v80 + 8);
                if ((v51 & 0xFE) == 0x12)
                  v51 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v80 + 16) + 8);
                v52 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 40) + 1064))(**(_QWORD **)(a1 + 40), v51 >> 8);
                v53 = (*(_DWORD *)(v44 + 8) & 0xFE) == 0x12 ? v44 : 0;
                if (v50 <= v52 >> 1
                  && (!v53
                   || (*(unsigned int (**)(_QWORD, _QWORD, uint64_t, _QWORD))(***(_QWORD ***)(a1 + 40) + 1128))(**(_QWORD **)(a1 + 40), v52 / v50, v50, v50 >> 3)))
                {
                  v54 = llvm::getUnderlyingObject(v80, (const llvm::Value *)6);
                  if (v54 && *((_BYTE *)v54 + 16) == 85)
                    v54 = (llvm *)*((_QWORD *)v54 - 12);
                  v113 = (void **)v54;
                  v41 = v103;
                  goto LABEL_124;
                }
              }
            }
          }
        }
      }
    }
  }
  if ((_DWORD)v129)
  {
    v12 = v120;
    v13 = v128;
    while (*(_QWORD *)v13 == *(_QWORD *)v12 && v13[4] == v12[4])
    {
      v13 += 6;
      v12 += 6;
      if (v13 == (_DWORD *)((char *)v128 + 24 * v129))
        goto LABEL_164;
    }
    goto LABEL_30;
  }
LABEL_164:
  if (v120 != v122)
    free(v120);
  if (v115 != v114)
    free(v115);
  if (v128 != v130)
    free(v128);
  if (*((_QWORD *)&v123 + 1) != (_QWORD)v123)
    free(*((void **)&v123 + 1));
  if (v144 != v146)
    free(v144);
  if (v140 != v139)
    free(v140);
  if (v136 != &v138)
    free(v136);
  if (__src != v131)
    free(__src);
  return v11 & 1;
}

uint64_t sub_1C60604B8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C605F818(v0);
}

void sub_1C60604E4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C6060508()
{
  return "GPU Load and Store Vectorizer";
}

void sub_1C6060518(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C6060598(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t ***v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  char *v24;
  llvm::AssumptionCacheTracker *v25;
  uint64_t AssumptionCache;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  const llvm::Function *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ***v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[10];
  int v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v6 = *((_QWORD *)a2 + 14);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 15) & 4) != 0)
      return 0;
  }
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::AAResultsWrapperPass::ID);
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v10 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::DominatorTreeWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::DominatorTreeWrapperPass::ID);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::ScalarEvolutionWrapperPass::ID);
  v15 = *(uint64_t ****)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v16 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::TargetTransformInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v31 = 0;
  v32 = 0;
  LODWORD(v33) = 0;
  v34 = 0;
  v35 = 0;
  LODWORD(v36) = 0;
  v37 = 0;
  v38 = 0;
  LODWORD(v39) = 0;
  v19 = *(_QWORD *)(v18 + 56);
  if (!v19)
  {
    sub_1C485C2F0();
    goto LABEL_24;
  }
  v2 = &v34;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v19 + 48))(&v30, v19, a2);
  v3 = (_QWORD *)(v18 + 64);
  v20 = v30;
  if (!*(_BYTE *)(v18 + 72))
  {
    *(_QWORD *)(v18 + 64) = v30;
    *(_BYTE *)(v18 + 72) = 1;
    goto LABEL_16;
  }
  v30 = 0;
  v21 = *v3;
  *v3 = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v30;
    v30 = 0;
    if (v22)
LABEL_24:
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
LABEL_16:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C((uint64_t *)&v31);
  v23 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v24 = *v23;
    v23 += 2;
  }
  while (v24 != llvm::AssumptionCacheTracker::ID);
  v25 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v23 - 1) + 96))(*(v23 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v25, a2);
  v31 = a2;
  v32 = v9;
  v33 = AssumptionCache;
  v34 = v12 + 32;
  v35 = v15;
  v36 = v3;
  v37 = *((_QWORD *)a2 + 5) + 272;
  v27 = ***v15;
  v38 = v40;
  v39 = 0x200000000;
  v40[6] = v27;
  v40[7] = &v46;
  v40[8] = v47;
  v40[9] = 0;
  v41 = 0;
  v42 = 512;
  v43 = 7;
  v40[4] = 0;
  v40[5] = 0;
  v44 = 0;
  v45 = 0;
  v46 = &unk_1E8167888;
  v47[0] = &unk_1E8167A08;
  v28 = sub_1C605F8E0((uint64_t)&v31);
  if (v38 != v40)
    free(v38);
  return v28;
}

uint64_t sub_1C60608A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  llvm::DataLayout *v46;
  unsigned int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  __int32 *v59;
  int v60;
  __int32 *v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t i;
  char *v67;
  uint64_t *v68;
  uint64_t *v69;
  __int32 *v70;
  __int32 *v71;
  __int32 *v72;
  __int32 *v73;
  __int32 *v74;
  __int32 *v75;
  char *v76;
  uint64_t *v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  int v91;
  _BOOL4 v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *__src;
  char *v99;
  uint64_t v100;
  int v101;
  _BYTE v102[128];
  void *v103;
  uint64_t v104;
  _BYTE v105[384];
  __int32 *__s;
  size_t __n;
  _BYTE v108[64];
  __int32 *v109;
  uint64_t v110;
  _QWORD v111[10];

  v111[8] = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v3 = a2;
    v4 = 0;
    while (1)
    {
      v5 = *(_DWORD *)(v3 + 16);
      if (v5 < 2)
        goto LABEL_142;
      v6 = 0;
      v7 = *(_DWORD *)(v3 + 16);
      v84 = v3;
      v85 = v7;
      do
      {
        v8 = v7;
        if (v7 >= 0x40uLL)
          v8 = 64;
        v87 = v7 - 64;
        if (v7 >= 0x40)
          v9 = 64;
        else
          v9 = v7;
        v10 = v5 - v6;
        v11 = *(_QWORD *)(v3 + 8);
        v109 = (__int32 *)v111;
        v110 = 0x1000000000;
        if (v10 >= 0x40)
          v10 = 64;
        __s = (__int32 *)v108;
        __n = 0x1000000000;
        v88 = v6;
        if (!v10)
        {
          v60 = 0;
          goto LABEL_137;
        }
        v86 = v4;
        v12 = 0;
        v89 = 1 - v8;
        v13 = v11 + 8 * v6;
        v94 = v13 - 8;
        v95 = v13;
        v90 = v9;
        do
        {
          v91 = -1;
          *(_DWORD *)&v105[4 * v12 + 128] = -1;
          v14 = v12 + 1;
          v15 = v89;
          v16 = v9;
          v96 = v12 + 1;
          v97 = v12;
          do
          {
            v17 = v16 - 1;
            if (v14 == v16)
              goto LABEL_48;
            v18 = *(_QWORD *)(v13 + 8 * v12);
            v19 = *(unsigned __int8 *)(v18 + 16);
            if (v18)
              v20 = v19 == 60;
            else
              v20 = 0;
            v21 = !v20;
            v22 = v19 - 62;
            if (v18)
              v23 = v22 >= 0xFFFFFFFE;
            else
              v23 = 0;
            if (v23)
              v24 = *(uint64_t **)(v18 - 32);
            else
              v24 = 0;
            v25 = 0;
            v26 = *(unsigned __int8 **)(v94 + 8 * v16);
            v27 = v26[16];
            if (v26)
              v28 = v27 == 60;
            else
              v28 = 0;
            v29 = !v28;
            if (v26 && (v27 - 62) >= 0xFFFFFFFE)
              v25 = *((_QWORD *)v26 - 4);
            v30 = sub_1C6062ADC(v18);
            v31 = sub_1C6062ADC((uint64_t)v26);
            if (!v24 || !v25 || v30 != v31)
              goto LABEL_46;
            if (v21)
              v18 = *(_QWORD *)(v18 - 64);
            if (v29)
              v26 = (unsigned __int8 *)*((_QWORD *)v26 - 8);
            if (v24 == (uint64_t *)v25)
              goto LABEL_46;
            v32 = *(_QWORD *)v18;
            v33 = *(_QWORD *)v26;
            if (((*(_DWORD *)(v32 + 8) & 0xFE) == 18) != ((*(_DWORD *)(*(_QWORD *)v26 + 8) & 0xFE) == 18))
              goto LABEL_46;
            sub_1C4768AD0(a1[6], v32);
            v35 = v34 + 7;
            v92 = v36 == 1;
            sub_1C4768AD0(a1[6], v33);
            if (((v38 + 7) ^ v35) > 7 || ((v92 ^ (v37 == 1)) & 1) != 0)
              goto LABEL_46;
            v39 = v32;
            if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12)
              v39 = **(_QWORD **)(v32 + 16);
            sub_1C4768AD0(a1[6], v39);
            if ((*(_DWORD *)(v33 + 8) & 0xFE) == 0x12)
              v33 = **(_QWORD **)(v33 + 16);
            v42 = v40 + 7;
            v43 = v41 == 1;
            sub_1C4768AD0(a1[6], v33);
            if (((v45 + 7) ^ v42) > 7 || ((v43 ^ (v44 == 1)) & 1) != 0)
            {
LABEL_46:
              v13 = v95;
LABEL_47:
              v14 = v96;
              v12 = v97;
              goto LABEL_48;
            }
            v46 = (llvm::DataLayout *)a1[6];
            v47 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v46, v30) + 4);
            sub_1C4768AD0((uint64_t)v46, v32);
            v50 = v49;
            if ((_DWORD)v48 == 1)
            v51 = (unint64_t)(v50 + 7) >> 3;
            LODWORD(v99) = v47;
            if (v47 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, v51, 0);
              v47 = v99;
              LODWORD(v104) = (_DWORD)v99;
              if (v99 > 0x40)
              {
                v103 = (void *)operator new[]();
                v53 = __src;
                memcpy(v103, __src, (((unint64_t)v104 + 63) >> 3) & 0x3FFFFFF8);
                v13 = v95;
                goto LABEL_65;
              }
              v53 = __src;
              v13 = v95;
            }
            else
            {
              if (v47)
                v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
              else
                v52 = 0;
              v13 = v95;
              v53 = (void *)(v52 & v51);
              LODWORD(v104) = v47;
            }
            v103 = v53;
LABEL_65:
            v54 = sub_1C6062B2C((uint64_t)a1, v24, v25, (llvm::APInt *)&v103, 0);
            if (v104 >= 0x41 && v103)
              MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
            if (v47 >= 0x41 && v53)
              MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
            if (!v54)
              goto LABEL_47;
            v14 = v96;
            v12 = v97;
            if (v91 == -1)
              goto LABEL_79;
            if (v16 > v97)
            {
              v55 = v15 + v91;
              if (v15 + v91 < 0)
                v55 = -v55;
              v56 = v91 - v97;
              if (v91 - (int)v97 < 0)
                v56 = v97 - v91;
              if (v55 <= v56)
              {
LABEL_79:
                v57 = __n;
                if (__n >= (unint64_t)HIDWORD(__n))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s, (uint64_t)v108, __n + 1, 4);
                  v57 = __n;
                }
                __s[v57] = v17;
                LODWORD(__n) = __n + 1;
                v58 = v110;
                if (v110 >= (unint64_t)HIDWORD(v110))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 4);
                  v58 = v110;
                }
                v109[v58] = v97;
                LODWORD(v110) = v110 + 1;
                *(_DWORD *)&v105[4 * v97 + 128] = v17;
                v91 = v16 - 1;
              }
            }
LABEL_48:
            ++v15;
            --v16;
          }
          while (v17 + 1 > 1);
          ++v12;
          v9 = v90;
        }
        while (v12 != v90);
        v59 = v109;
        __src = v102;
        v99 = v102;
        v100 = 16;
        v101 = 0;
        v60 = 0;
        if ((_DWORD)v110)
        {
          v61 = &v109[v110];
          do
          {
            v62 = *v59;
            v63 = (char *)sub_1C477672C((uint64_t)&__src, *(_QWORD *)(v13 + 8 * v62));
            if (v99 == __src)
              v64 = (uint64_t *)((char *)&v100 + 4);
            else
              v64 = &v100;
            if (v63 == &v99[8 * *(unsigned int *)v64])
            {
              v65 = __n;
              if ((_DWORD)__n)
              {
                for (i = 0; i < v65; ++i)
                {
                  if ((_DWORD)v62 == __s[i])
                  {
                    v67 = (char *)sub_1C477672C((uint64_t)&__src, *(_QWORD *)(v13 + 8 * v109[i]));
                    if (v99 == __src)
                      v68 = (uint64_t *)((char *)&v100 + 4);
                    else
                      v68 = &v100;
                    if (v67 == &v99[8 * *(unsigned int *)v68])
                      goto LABEL_130;
                    v65 = __n;
                  }
                }
              }
              v69 = (uint64_t *)v105;
              v103 = v105;
              v104 = 0x1000000000;
              if ((_DWORD)v62 == -1)
              {
                v78 = 0;
              }
              else
              {
                while (1)
                {
                  v70 = &__s[__n];
                  v71 = wmemchr(__s, v62, __n);
                  v72 = v71 ? v71 : v70;
                  if (v72 == &__s[__n])
                  {
                    v73 = &v109[v110];
                    v74 = wmemchr(v109, v62, v110);
                    v75 = v74 ? v74 : v73;
                    if (v75 == &v109[v110])
                      break;
                  }
                  v76 = (char *)sub_1C477672C((uint64_t)&__src, *(_QWORD *)(v13 + 8 * (int)v62));
                  if (v99 == __src)
                    v77 = (uint64_t *)((char *)&v100 + 4);
                  else
                    v77 = &v100;
                  v78 = v104;
                  if (v76 == &v99[8 * *(unsigned int *)v77])
                  {
                    v79 = *(_QWORD *)(v13 + 8 * (int)v62);
                    if (v104 >= HIDWORD(v104))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v104 + 1, 8);
                      v78 = v104;
                    }
                    *((_QWORD *)v103 + v78) = v79;
                    v78 = v104 + 1;
                    LODWORD(v104) = v104 + 1;
                    LODWORD(v62) = *(_DWORD *)&v105[4 * (int)v62 + 128];
                    if ((_DWORD)v62 != -1)
                      continue;
                  }
                  goto LABEL_123;
                }
                v78 = v104;
LABEL_123:
                v69 = (uint64_t *)v103;
              }
              if (*(_BYTE *)(*v69 + 16) == 60)
                v80 = sub_1C606165C((uint64_t)a1, v69, v78, (llvm::SmallPtrSetImplBase *)&__src);
              else
                v80 = sub_1C60621A0(a1, v69, v78, (llvm::SmallPtrSetImplBase *)&__src);
              v81 = v80;
              if (v103 != v105)
                free(v103);
              v60 |= v81;
            }
LABEL_130:
            ++v59;
          }
          while (v59 != v61);
          if (v99 != __src)
            free(v99);
          v4 = v86;
          v3 = v84;
        }
        else
        {
          v4 = v86;
          v3 = v84;
        }
        v6 = v88;
LABEL_137:
        if (__s != (__int32 *)v108)
        {
          free(__s);
          v6 = v88;
        }
        if (v109 != (__int32 *)v111)
        {
          free(v109);
          v6 = v88;
        }
        v4 |= v60;
        v6 += 64;
        v7 = v87;
        v5 = v85;
      }
      while (v6 < v85);
LABEL_142:
      v3 += 88;
      if (v3 == a3)
        return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

