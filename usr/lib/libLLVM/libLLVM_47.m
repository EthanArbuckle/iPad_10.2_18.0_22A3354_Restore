uint64_t sub_1C5AEAFDC(uint64_t ***a1, _QWORD *a2, unint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int ParamAlignment;
  char v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::ConstantInt **v24;
  llvm::Value **v25;
  uint64_t ***v26;
  llvm::Value ***v27;
  uint64_t **v28;
  llvm::Value ****v29;
  llvm::Value *v30;
  llvm::Value *v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *PointerCast;
  uint64_t v36;
  char *v37;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  uint64_t ***v50;
  uint64_t v51;
  char *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 **v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value **v61;
  uint64_t ***v62;
  _QWORD *v63;
  uint64_t **v64;
  uint64_t v65;
  _QWORD **v66;
  llvm::Value ***v67;
  _QWORD **v68;
  uint64_t ***v69;
  uint64_t *v71;
  llvm::ValueSymbolTable *v72;
  unsigned int v73;
  BOOL v74;
  int v75;
  BOOL v76;
  uint64_t **v77;
  unsigned int *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unsigned __int8 *v85;
  _BYTE v86[32];
  __int16 v87;
  char v88;
  llvm::Value **v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a1 + 8), 0);
  if (ParamAlignment <= 0x100)
    v13 = 0;
  else
    v13 = ParamAlignment;
  v14 = *a2;
  if (a6)
  {
    v15 = (~v14 + a4 + (1 << v13)) & -(1 << v13);
    v16 = *a3 >= v15;
    v17 = *a3 - v15;
    if (v16)
      v18 = v17;
    else
      v18 = 0;
    if (v17 == 0 || !v16)
      return 0;
  }
  else
  {
    v18 = a4 - v14 + a5;
    v19 = 1 << v13;
    v20 = ((v18 + (1 << v13) - 1) & -(1 << v13)) - v18;
    if (v20)
    {
      if (v18 <= v19 - v20)
        return 0;
      v18 = ((v18 + (1 << v13) - 1) & -(1 << v13)) - v19;
    }
  }
  v21 = *a3 - v18;
  if (*((_BYTE *)a1 + 16) == 84
    && (v22 = (uint64_t)*(a1 - 4)) != 0
    && !*(_BYTE *)(v22 + 16)
    && *(uint64_t ***)(v22 + 24) == a1[9]
    && (*(_BYTE *)(v22 + 33) & 0x20) != 0
    && ((v73 = *(_DWORD *)(v22 + 36) - 195, v74 = v73 > 5, v75 = (1 << v73) & 0x29, !v74) ? (v76 = v75 == 0) : (v76 = 1),
        !v76))
  {
    v23 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
    v77 = a1[-4 * v23 + 12];
    v78 = (unsigned int *)(v77 + 3);
    if (*((_DWORD *)v77 + 8) >= 0x41u)
      v78 = *(unsigned int **)v78;
    if (v21 % *v78)
      return 0;
  }
  else
  {
    v23 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  }
  v24 = (llvm::ConstantInt **)a1[-4 * v23 + 8];
  v25 = llvm::ConstantInt::get(*v24, *a3 - v18, 0);
  v26 = &a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
  v27 = (llvm::Value ***)(v26 + 8);
  if (v26[8])
  {
    *v26[10] = (uint64_t *)v26[9];
    v28 = v26[9];
    if (v28)
      v28[2] = (uint64_t *)v26[10];
  }
  *v27 = v25;
  if (v25)
  {
    v31 = v25[1];
    v29 = (llvm::Value ****)(v25 + 1);
    v30 = v31;
    v26[9] = (uint64_t **)v31;
    if (v31)
      *((_QWORD *)v30 + 2) = v26 + 9;
    v26[10] = (uint64_t **)v29;
    *v29 = v27;
  }
  sub_1C509D0D0((uint64_t)a1, v13);
  if ((a6 & 1) == 0)
  {
    v32 = (uint64_t *)a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    v33 = *(_DWORD *)(*v32 + 8);
    if ((v33 & 0xFE) == 0x12)
      v33 = *(_DWORD *)(**(_QWORD **)(*v32 + 16) + 8);
    v83 = v21;
    v84 = a2;
    v34 = llvm::PointerType::get((llvm::PointerType *)(***a1 + 1912), (llvm::Type *)(v33 >> 8));
    PointerCast = v32;
    if (*v32 != v34)
    {
      v87 = 257;
      PointerCast = (uint64_t *)llvm::CastInst::CreatePointerCast(v32, v34, (uint64_t)v86, (uint64_t)a1);
    }
    v89 = llvm::ConstantInt::get(*v24, v18, 0);
    v36 = ***a1;
    v87 = 257;
    v37 = (char *)operator new(0x90uLL);
    *((_DWORD *)v37 + 21) = *((_DWORD *)v37 + 21) & 0x38000000 | 2;
    v38 = (llvm::Value *)(v37 + 64);
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = v37 + 64;
    *((_QWORD *)v37 + 4) = 0;
    *((_QWORD *)v37 + 5) = 0;
    *((_QWORD *)v37 + 6) = 0;
    *((_QWORD *)v37 + 7) = v37 + 64;
    v39 = v36 + 1912;
    sub_1C4774650((llvm::GetElementPtrInst *)(v36 + 1912), PointerCast, (llvm::Value *)&v89, 1);
    *((_QWORD *)v37 + 8) = v40;
    *((_QWORD *)v37 + 9) = 0;
    v41 = *((_DWORD *)v37 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v37 + 20) = 62;
    *((_DWORD *)v37 + 21) = v41;
    *(_OWORD *)(v37 + 88) = 0u;
    v42 = v37 + 88;
    *(_OWORD *)(v37 + 104) = 0u;
    *((_DWORD *)v37 + 30) = 0;
    v43 = a1[5];
    v44 = (uint64_t *)(a1 + 3);
    *((_QWORD *)v37 + 13) = v43;
    *((_WORD *)v43 + 9) &= ~0x8000u;
    if ((v37[87] & 0x10) != 0)
    {
      v71 = v43[7];
      if (v71)
      {
        v72 = (llvm::ValueSymbolTable *)v71[13];
        if (v72)
          llvm::ValueSymbolTable::reinsertValue(v72, v38);
      }
    }
    v45 = *v44;
    *((_QWORD *)v37 + 11) = *v44;
    *((_QWORD *)v37 + 12) = v44;
    *(_QWORD *)(v45 + 8) = v42;
    *v44 = (uint64_t)v42;
    LODWORD(v45) = *((_DWORD *)v37 + 21);
    *((_QWORD *)v37 + 16) = v39;
    *((_QWORD *)v37 + 17) = v39;
    v46 = v45 & 0x7FFFFFF;
    v47 = -v46;
    v48 = (uint64_t **)((char *)v38 - 32 * v46);
    if (*v48)
    {
      v79 = (char *)v38 + 32 * v47;
      v81 = (_QWORD *)*((_QWORD *)v79 + 2);
      v80 = v79 + 16;
      *v81 = *(v80 - 1);
      v82 = *(v80 - 1);
      if (v82)
        *(_QWORD *)(v82 + 16) = *v80;
    }
    *v48 = PointerCast;
    v21 = v83;
    if (PointerCast)
    {
      v51 = PointerCast[1];
      v50 = (uint64_t ***)(PointerCast + 1);
      v49 = v51;
      v52 = (char *)v38 + 32 * v47;
      *((_QWORD *)v52 + 1) = v51;
      if (v51)
        *(_QWORD *)(v49 + 16) = v52 + 8;
      *((_QWORD *)v52 + 2) = v50;
      *v50 = v48;
    }
    sub_1C5382FD4((uint64_t)&v88, (uint64_t *)&v89, &v90, (uint64_t)v38 - 32 * (*((_DWORD *)v37 + 21) & 0x7FFFFFF) + 32);
    llvm::Value::setName((uint64_t ***)v38, (uint64_t)v86);
    v37[81] |= 2u;
    v53 = (unsigned __int8 *)a1[6];
    v85 = v53;
    if (v53)
      llvm::MetadataTracking::track((uint64_t)&v85, v53, 2);
    v56 = (unsigned __int8 *)*((_QWORD *)v37 + 14);
    v55 = (unsigned __int8 **)(v37 + 112);
    v54 = v56;
    if (v56)
      llvm::MetadataTracking::untrack((uint64_t)v55, v54);
    v57 = v85;
    *v55 = v85;
    if (v57)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v85, v57, (uint64_t)v55);
      v85 = 0;
    }
    v58 = *v32;
    if (*(_QWORD *)v38 != *v32)
    {
      v87 = 257;
      v38 = llvm::CastInst::CreatePointerCast(v38, v58, (uint64_t)v86, (uint64_t)a1);
    }
    v59 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
    v60 = -v59;
    v61 = (llvm::Value **)&a1[-4 * v59];
    if (*v61)
    {
      v62 = &a1[4 * v60];
      v64 = v62[2];
      v63 = v62 + 2;
      *v64 = (uint64_t *)*(v63 - 1);
      v65 = *(v63 - 1);
      if (v65)
        *(_QWORD *)(v65 + 16) = *v63;
    }
    *v61 = v38;
    if (v38)
    {
      v68 = (_QWORD **)*((_QWORD *)v38 + 1);
      v67 = (llvm::Value ***)((char *)v38 + 8);
      v66 = v68;
      v69 = &a1[4 * v60];
      v69[1] = v68;
      if (v68)
        v66[2] = v69 + 1;
      v69[2] = (uint64_t **)v67;
      *v67 = v61;
    }
    *v84 += v18;
  }
  *a3 = v21;
  return 1;
}

uint64_t sub_1C5AEB508()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AE8568(v0);
}

void sub_1C5AEB534(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5AEB558(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AssumptionCacheTracker::ID);
}

uint64_t sub_1C5AEB674(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t result;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  llvm::DominatorTree *v18;
  void **v19;
  void *v20;
  llvm::MemorySSA *v21;
  void **v22;
  void *v23;
  uint64_t v24;
  char **v25;
  char *v26;
  llvm::AssumptionCacheTracker *v27;
  llvm::AssumptionCache *AssumptionCache;
  char **v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *i;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void **v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44[2];
  int v45;
  uint64_t v46[2];
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *__src;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::AAResultsWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v8 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::DominatorTreeWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::TargetLibraryInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v44[0] = 0;
  v44[1] = 0;
  v45 = 0;
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  llvm::TargetLibraryAnalysis::run(v13 + 32, (uint64_t)a2, (uint64_t)&v51);
  *(_QWORD *)(v13 + 240) = v51;
  v14 = (uint64_t *)(v13 + 240);
  if (*(_BYTE *)(v13 + 320))
  {
    if (v14 == &v51)
    {
LABEL_22:
      *(_DWORD *)(v13 + 312) = v55;
      goto LABEL_23;
    }
    v15 = (void **)(v13 + 248);
    v16 = v53;
    v17 = *(unsigned int *)(v13 + 256);
    if (v17 >= v53)
    {
      if (v53)
        memmove(*v15, __src, 8 * v53);
      goto LABEL_21;
    }
    if (*(_DWORD *)(v13 + 260) < v53)
    {
      *(_DWORD *)(v13 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13 + 248, v13 + 264, v16, 8);
    }
    else if ((_DWORD)v17)
    {
      memmove(*v15, __src, 8 * v17);
      goto LABEL_19;
    }
    v17 = 0;
LABEL_19:
    if (v17 != v53)
      memcpy((char *)*v15 + 8 * v17, (char *)__src + 8 * v17, 8 * v53 - 8 * v17);
LABEL_21:
    *(_DWORD *)(v13 + 256) = v16;
    goto LABEL_22;
  }
  v40 = (void *)(v13 + 264);
  *(_QWORD *)(v13 + 248) = v13 + 264;
  v41 = (void **)(v13 + 248);
  *(_QWORD *)(v13 + 256) = 0x600000000;
  v42 = v53;
  if (v53 && v41 != &__src)
  {
    if (v53 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13 + 248, v13 + 264, v53, 8);
      v43 = v53;
      if (!v53)
      {
LABEL_59:
        *(_DWORD *)(v13 + 256) = v42;
        goto LABEL_60;
      }
      v40 = *v41;
    }
    else
    {
      v43 = v53;
    }
    memcpy(v40, __src, 8 * v43);
    goto LABEL_59;
  }
LABEL_60:
  *(_DWORD *)(v13 + 312) = v55;
  *(_BYTE *)(v13 + 320) = 1;
LABEL_23:
  v18 = (llvm::DominatorTree *)(v10 + 32);
  if (__src != &v54)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v46);
  sub_1C4D8B52C(v44);
  v19 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::MemorySSAWrapperPass::ID);
  v21 = *(llvm::MemorySSA **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  v22 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != &llvm::PostDominatorTreeWrapperPass::ID);
  v24 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v25 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != llvm::AssumptionCacheTracker::ID);
  v27 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v27, a2);
  v29 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v30 = *v29;
    v29 += 2;
  }
  while (v30 != llvm::LoopInfoWrapperPass::ID);
  v31 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v29 - 1) + 96))(*(v29 - 1), llvm::LoopInfoWrapperPass::ID);
  result = sub_1C5AE489C((uint64_t)a2, v7, v21, v18, v24 + 32, AssumptionCache, v14, (llvm::Function *)(v31 + 32));
  if ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308)
  {
    v32 = (_QWORD *)((char *)a2 + 72);
    for (i = (_QWORD *)*((_QWORD *)a2 + 10); i != v32; i = (_QWORD *)i[1])
    {
      v34 = i - 3;
      if (!i)
        v34 = 0;
      v35 = v34 + 5;
      v36 = (_QWORD *)v34[6];
      if (v36 != v35)
      {
        do
        {
          v36 = (_QWORD *)v36[1];
          v37 = i - 3;
          if (!i)
            v37 = 0;
          v38 = v37 + 5;
          while (v36 == v38)
          {
            i = (_QWORD *)i[1];
            if (i == v32)
              return result;
            v39 = i - 3;
            if (!i)
              v39 = 0;
            v38 = v39 + 5;
            v36 = (_QWORD *)v39[6];
          }
        }
        while (i != v32);
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1C5AEBAF8()
{
  int v1;
  __n128 v2;
  int v3;
  int *v4;

  dword_1ED81BC8C = sub_1C4D9A2C4("dse-memoryssa", 0xDuLL, "Controls which MemoryDefs are eliminated.", 0x29uLL);
  LOBYTE(v1) = 1;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Enable partial-overwrite tracking in DSE";
  v2.n128_u64[1] = 40;
  sub_1C498EDF8((llvm::cl::Option *)&qword_1ED81BC90[1], "enable-dse-partial-overwrite-tracking", (_BYTE **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81BC90[1], &dword_1C475E000);
  LOBYTE(v1) = 1;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Enable partial store merging in DSE";
  v2.n128_u64[1] = 35;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81BD58, "enable-dse-partial-store-merging", (_BYTE **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81BD58, &dword_1C475E000);
  v3 = 150;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The number of memory instructions to scan for dead store elimination (default = 150)";
  v2.n128_u64[1] = 84;
  sub_1C4DB1928((uint64_t)&unk_1ED81BE18, "dse-memoryssa-scanlimit", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81BE18, &dword_1C475E000);
  v3 = 90;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The maximum number of steps while walking upwards to find MemoryDefs that may be ki"
                                     "lled (default = 90)";
  v2.n128_u64[1] = 102;
  sub_1C4DB1928((uint64_t)&unk_1ED81BED8, "dse-memoryssa-walklimit", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81BED8, &dword_1C475E000);
  v3 = 5;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The maximum number candidates that only partially overwrite the killing MemoryDef t"
                                     "o consider (default = 5)";
  v2.n128_u64[1] = 107;
  sub_1C4DB1928((uint64_t)&unk_1ED81BF98, "dse-memoryssa-partial-store-limit", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81BF98, &dword_1C475E000);
  v3 = 5000;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The number of MemoryDefs we consider as candidates to eliminated other stores per b"
                                     "asic block (default = 5000)";
  v2.n128_u64[1] = 110;
  sub_1C4DB1928((uint64_t)&unk_1ED81C058, "dse-memoryssa-defs-per-block-limit", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81C058, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The cost of a step in the same basic block as the killing MemoryDef(default = 1)";
  v2.n128_u64[1] = 80;
  sub_1C4DB1928((uint64_t)&unk_1ED81C118, "dse-memoryssa-samebb-cost", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81C118, &dword_1C475E000);
  v3 = 5;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The cost of a step in a different basic block than the killing MemoryDef(default = 5)";
  v2.n128_u64[1] = 85;
  sub_1C4DB1928((uint64_t)&unk_1ED81C1D8, "dse-memoryssa-otherbb-cost", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81C1D8, &dword_1C475E000);
  v3 = 50;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The maximum number of blocks to check when trying to prove that all paths to an exi"
                                     "t go through a killing block (default = 50)";
  v2.n128_u64[1] = 126;
  sub_1C4DB1928((uint64_t)&unk_1ED81C298, "dse-memoryssa-path-check-limit", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81C298, &dword_1C475E000);
  LOBYTE(v1) = 1;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Allow DSE to optimize memory accesses.";
  v2.n128_u64[1] = 38;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81C358, "dse-optimize-memoryssa", (_BYTE **)&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81C358, &dword_1C475E000);
}

uint64_t sub_1C5AEBE8C(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "DFA Jump Threading";
  *(_QWORD *)(v3 + 8) = 18;
  *(_QWORD *)(v3 + 16) = "dfa-jump-threading";
  *(_QWORD *)(v3 + 24) = 18;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F5758;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5AF1520;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

_QWORD *llvm::DFAJumpThreadingPass::run@<X0>(const llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *result;
  uint64_t *v11;
  uint64_t v12;
  _QWORD v13[4];
  _BYTE v14[16];
  uint64_t *v15;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, (uint64_t)a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, (uint64_t)a1) + 8;
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v14, a1);
  v13[0] = v6;
  v13[1] = v7;
  v13[2] = v8;
  v13[3] = v14;
  sub_1C5AEC068((uint64_t)v13, a1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v9 & 1) != 0)
    result = sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  else
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    v12 = *v11;
    *v11 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return (_QWORD *)MEMORY[0x1CAA32FC0](v11, 0x20C4093837F09);
  }
  return result;
}

void sub_1C5AEC068(uint64_t a1, llvm::Function *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::OptimizationRemarkEmitter *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v39;
  _QWORD *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v56;
  unsigned int v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  char *v61;
  uint64_t ***v62;
  uint64_t v63;
  llvm::BasicBlock *v64;
  _QWORD *v65;
  uint64_t ***v66;
  uint64_t ***v67;
  unint64_t v68;
  int v69;
  llvm::Instruction *v70;
  uint64_t v71;
  llvm::Instruction *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void **v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  uint64_t v128;
  int v129;
  uint64_t ***v130;
  uint64_t **v131;
  uint64_t **v132;
  llvm::Value *v133;
  _DWORD *v134;
  uint64_t v135;
  llvm::BranchInst *v136;
  _QWORD *v137;
  uint64_t **v138;
  uint64_t **v139;
  __int128 v140;
  unsigned int v141;
  __int128 *v142;
  __int128 v143;
  int v144;
  BOOL v145;
  std::string::size_type v146;
  std::string::size_type v147;
  int v148;
  uint64_t *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unsigned int *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  void **v167;
  uint64_t v168;
  void *v169;
  void *v170;
  unsigned int v171;
  void *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  _QWORD *v181;
  _QWORD *v182;
  void **v183;
  int v184;
  unsigned int v185;
  int v186;
  uint64_t *v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD **v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  char *i;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  void *v225;
  char *v226;
  char *v227;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char **v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  BOOL v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char **v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  char **v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char v257;
  char v258;
  int v259;
  char *v260;
  uint64_t v261;
  __int128 v262;
  char *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  __int128 v276;
  char *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  char *v289;
  uint64_t v290;
  BOOL v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  int v297;
  char *v298;
  std::string *v299;
  void **v300;
  void **v301;
  char *v302;
  __int128 v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  _BYTE *v307;
  char *v308;
  int64_t v309;
  unint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  __int128 v314;
  char *v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  unint64_t v320;
  void **v321;
  char *v322;
  unint64_t v323;
  void **v324;
  BOOL v325;
  int v326;
  unint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  int v334;
  char *v335;
  void **v336;
  _QWORD *v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  int64_t v341;
  unint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  __int128 v346;
  int8x16_t v347;
  __int128 v348;
  const void *v349;
  _BYTE *v350;
  void *v351;
  unsigned int v352;
  unsigned int v353;
  _BYTE *v354;
  _BYTE *v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  llvm::BasicBlock *v360;
  uint64_t *v361;
  uint64_t *v362;
  unint64_t v363;
  llvm::BasicBlock **v364;
  _QWORD *v365;
  llvm::BasicBlock **v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  llvm::BasicBlock **v372;
  llvm::BasicBlock **v373;
  char *v374;
  _QWORD *v375;
  char *v376;
  _QWORD **v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  llvm::BasicBlock **v381;
  llvm::BasicBlock **v382;
  uint64_t v383;
  llvm::BasicBlock *v384;
  uint64_t *v385;
  uint64_t *v386;
  unint64_t v387;
  llvm::BasicBlock **v388;
  _QWORD *v389;
  llvm::BasicBlock **v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  char *v395;
  llvm::BasicBlock **v396;
  llvm::BasicBlock **v397;
  char *v398;
  llvm::BasicBlock **v399;
  unsigned int data;
  void *v401;
  unsigned int v402;
  unsigned int v403;
  llvm::OptimizationRemarkEmitter *v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  unint64_t v412;
  void **v413;
  char *v414;
  unint64_t v415;
  void **v416;
  uint64_t v417;
  _QWORD *v418;
  _QWORD *v419;
  char *v420;
  char *v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  uint64_t v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  char *v433;
  unint64_t v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  char *v440;
  char *v441;
  uint64_t v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  uint64_t v447;
  unint64_t v448;
  _QWORD *j;
  void *v450;
  unint64_t v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  int v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  llvm::OptimizationRemarkEmitter *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char *v471;
  unint64_t v472;
  void **v473;
  char *v474;
  unint64_t v475;
  void **v476;
  llvm::OptimizationRemarkEmitter *v477;
  uint64_t v478;
  _QWORD *v479;
  void **v480;
  unint64_t v481;
  void **v482;
  void **v483;
  _QWORD *v484;
  unint64_t v485;
  void **v486;
  _QWORD *v487;
  _QWORD *v488;
  _QWORD *v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  llvm::BasicBlock *v505;
  char *v506;
  unint64_t v507;
  _QWORD *v508;
  std::string *v509;
  std::string::size_type v510;
  uint64_t *v511;
  uint64_t *k;
  uint64_t v513;
  _QWORD *v514;
  llvm::LLVMContext *v515;
  llvm::LLVMContext *v516;
  _BOOL4 v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  int v521;
  unsigned int v522;
  uint64_t v523;
  char *v524;
  uint64_t *v525;
  uint64_t *v526;
  int v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  unint64_t v531;
  unint64_t v532;
  char *v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unint64_t v540;
  char *v541;
  uint64_t *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t *v547;
  uint64_t *v548;
  uint64_t v549;
  _DWORD *v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  _DWORD *v555;
  _DWORD *v556;
  uint64_t v557;
  _QWORD *v559;
  unint64_t v560;
  uint64_t v561;
  int32x2_t *v562;
  unint64_t v563;
  uint64_t v564;
  unsigned int v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  int v569;
  int v570;
  uint64_t v571;
  int v572;
  int v573;
  std::string::size_type v574;
  unint64_t v575;
  std::string::size_type v576;
  std::string::size_type v577;
  uint64_t v578;
  unsigned int v579;
  BOOL v580;
  uint64_t v581;
  BOOL v582;
  uint64_t v583;
  _QWORD *v584;
  std::string::size_type v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t *v589;
  char **v590;
  char **v591;
  unint64_t v592;
  char *v593;
  char *v594;
  char *v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t v599;
  char *v600;
  char *v601;
  uint64_t v602;
  _QWORD *v603;
  _QWORD *v604;
  int v605;
  int v606;
  unsigned int v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _QWORD *v611;
  int v612;
  uint64_t v613;
  char v614;
  _QWORD *v615;
  std::string::size_type v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  unint64_t *v620;
  uint64_t v621;
  int32x2_t *v622;
  unint64_t v623;
  uint64_t v624;
  unsigned int v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  int v629;
  int v630;
  unint64_t v632;
  unint64_t *v633;
  uint64_t v634;
  int32x2_t *v635;
  unint64_t v636;
  uint64_t v637;
  unsigned int v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  int v642;
  int v643;
  uint64_t *v644;
  uint64_t *v645;
  unint64_t v646;
  uint64_t *v647;
  _QWORD *v648;
  uint64_t *v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  unint64_t v653;
  char *v654;
  uint64_t *v655;
  uint64_t *v656;
  uint64_t *v657;
  int v658;
  unsigned int v659;
  void *v660;
  _QWORD *v661;
  _QWORD *v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  llvm::BasicBlock *v670;
  uint64_t v671;
  llvm::BasicBlock *v672;
  unsigned int v673;
  uint64_t v674;
  unint64_t *v675;
  unint64_t *v676;
  unint64_t *v677;
  uint64_t v678;
  int v679;
  uint64_t *v680;
  uint64_t v681;
  char v682;
  uint64_t v683;
  unint64_t *v684;
  llvm::BasicBlock *v685;
  uint64_t v686;
  unint64_t v687;
  unint64_t v688;
  char *v689;
  unint64_t *v690;
  unint64_t *v691;
  uint64_t v692;
  _QWORD *v693;
  _DWORD *v694;
  uint64_t *v695;
  uint64_t *v696;
  _BYTE *v697;
  uint64_t v698;
  _BYTE *v699;
  size_t v700;
  void *v701;
  void *v702;
  char *v703;
  char *v704;
  uint64_t n;
  uint64_t v706;
  int v707;
  uint64_t v708;
  void *v709;
  uint64_t v710;
  uint64_t **v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  int v718;
  int v719;
  _QWORD *v720;
  char *v721;
  uint64_t v722;
  uint64_t v723;
  unsigned int v724;
  unsigned int v725;
  char *ii;
  uint64_t v727;
  llvm::Use *v728;
  llvm::Type *v729;
  char *v730;
  uint64_t v731;
  char *v732;
  void *v733;
  void *v734;
  void **v735;
  uint64_t v736;
  unint64_t *v737;
  uint64_t v738;
  char *v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unsigned int v743;
  BOOL v744;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  char *v749;
  char *v750;
  char *v751;
  uint64_t v752;
  unint64_t v753;
  unint64_t v754;
  char *v755;
  char *v756;
  char *v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  char *v761;
  uint64_t v762;
  llvm::UndefValue *v763;
  uint64_t v764;
  _QWORD *v765;
  uint64_t v766;
  _DWORD *v767;
  uint64_t v768;
  int v769;
  uint64_t v770;
  _DWORD *v771;
  uint64_t *v772;
  uint64_t *v773;
  uint64_t *v774;
  uint64_t *v775;
  uint64_t *v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  unint64_t v780;
  char *v781;
  uint64_t *v782;
  uint64_t *v783;
  uint64_t v784;
  uint64_t *jj;
  int v786;
  uint64_t v787;
  uint64_t v788;
  _DWORD *v789;
  uint64_t v790;
  int v791;
  unint64_t *v792;
  unint64_t v793;
  void *v794;
  uint64_t v795;
  void *v796;
  char *v797;
  uint64_t v798;
  void *v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  char *v803;
  unint64_t v804;
  void **v805;
  unint64_t v806;
  void **v807;
  uint64_t v808;
  uint64_t v809;
  char *v810;
  unint64_t v811;
  void **v812;
  unint64_t v813;
  void **v814;
  _BYTE *v815;
  char *v816;
  uint64_t v817;
  char *v818;
  int v819;
  _QWORD *v820;
  _QWORD *v822;
  _QWORD *v823;
  _QWORD *v824;
  _QWORD *v825;
  char v826;
  _QWORD *v827;
  uint64_t *v828;
  llvm::BasicBlock *v829;
  _QWORD *m;
  _QWORD *v831;
  uint64_t v832;
  uint64_t v833;
  unint64_t __vale[2];
  uint64_t __val;
  unint64_t __vala;
  _QWORD *__valb;
  unint64_t *__valc;
  unint64_t __vald[2];
  uint64_t ***v840;
  uint64_t v841;
  __int128 v842;
  int v843;
  __int128 v844;
  uint64_t v845;
  __int128 v846;
  uint64_t v847;
  llvm::BasicBlock *v848;
  llvm::BasicBlock *v849;
  unint64_t *v850;
  __int128 v851;
  _BYTE *v852;
  unsigned int v853;
  unsigned int v854;
  int v855;
  _BYTE v856[256];
  __int128 v857;
  uint64_t v858;
  void *v859;
  char *v860;
  char *v861;
  void *__p;
  void **v863;
  void **v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  _QWORD *v870;
  int v871;
  uint64_t *v872;
  uint64_t *v873;
  uint64_t v874;
  uint64_t v875[2];
  int v876;
  uint64_t v877;
  uint64_t v878;
  std::string v879;
  uint64_t *v880;
  int8x16_t v881;
  __int128 v882;
  _BYTE *v883;
  void *v884;
  unsigned int v885;
  unsigned int v886;
  int v887;
  _BYTE v888[256];
  void *v889;
  void *v890;
  uint64_t v891;
  void *__src[2];
  uint64_t v893;
  int v894;
  unint64_t v895;
  uint64_t v896;
  void *v897;
  uint64_t v898;
  _BYTE v899[96];
  void *v900[2];
  void *v901[2];
  unint64_t v902;
  uint64_t v903;
  void *v904[2];
  __int128 v905;
  _OWORD v906[3];
  void *v907;
  unsigned int v908;
  _QWORD v909[26];
  char v910;
  _BYTE *v911;
  void *v912;
  uint64_t v913;
  int v914;
  _BYTE v915[33];
  _BYTE v916[24];
  __int16 v917;
  void *v918[2];
  std::string::size_type v919;
  std::string v920;
  void *v921;
  char *v922;
  unint64_t v923;
  char v924;
  void *__b[2];
  _OWORD v926[2];
  __int128 v927;
  char v928;
  char v929;
  void *v930;
  uint64_t v931;
  _QWORD v932[26];
  char v933;
  uint64_t *v934;
  void *v935;
  uint64_t v936;
  int v937;
  uint64_t v938;
  char v939;
  int v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  int v947;
  _QWORD v948[4];
  _QWORD v949[6];
  _QWORD v950[6];

  v950[3] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 14);
  if (v3 && ((*(_BYTE *)(v3 + 17) & 4) != 0 || *(char *)(v3 + 13) < 0))
    return;
  if (byte_1ED81C4A0)
    llvm::Function::viewCFG(a2, 0, 0, 0);
  v897 = v899;
  v898 = 0x200000000;
  v4 = (_QWORD *)((char *)a2 + 72);
  v5 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v5 == (_QWORD *)((char *)a2 + 72))
  {
    __src[0] = &v895;
    __src[1] = &v895;
    v893 = 32;
    v894 = 0;
    goto LABEL_1359;
  }
  v826 = 0;
  v819 = (int)a2;
  v6 = 0uLL;
  v824 = (_QWORD *)((char *)a2 + 72);
  while (2)
  {
    if (v5)
      v7 = v5 - 3;
    else
      v7 = 0;
    v8 = (_QWORD *)v7[5];
    if (v8 == v7 + 5)
      goto LABEL_504;
    v9 = v8 ? (uint64_t)(v8 - 3) : 0;
    v10 = *(unsigned __int8 *)(v9 + 16) - 40;
    v11 = v10 >= 0xFFFFFFF5 ? v9 : 0;
    if (!v8)
      goto LABEL_504;
    if (*(_BYTE *)(v11 + 16) != 31 || v10 < 0xFFFFFFF5)
      goto LABEL_504;
    v13 = *(llvm::OptimizationRemarkEmitter **)(a1 + 24);
    v880 = (uint64_t *)&off_1E81944A8;
    v881.i64[0] = 0;
    v881.i64[1] = (uint64_t)&v882 + 8;
    v906[0] = v6;
    v905 = v6;
    *(_OWORD *)v904 = v6;
    __b[0] = &v926[1];
    __b[1] = &v926[1];
    *(_QWORD *)&v926[0] = 16;
    DWORD2(v926[0]) = 0;
    *(_QWORD *)&v882 = 0x400000000;
    v14 = *(_DWORD *)(v11 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(uint64_t **)(v11 - 8);
    else
      v15 = (uint64_t *)(v11 - 32 * (v14 & 0x7FFFFFF));
    v16 = *v15;
    if (*(unsigned __int8 *)(*v15 + 16) <= 0x1Bu)
      v17 = 0;
    else
      v17 = (_BYTE *)*v15;
    __src[0] = v17;
    v831 = v5;
    if (!v17 || v17[16] != 83)
      goto LABEL_109;
    sub_1C48410F0(v904, __src);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)__b, v16);
    v18 = *((_QWORD *)&v906[0] + 1);
    if (!*((_QWORD *)&v906[0] + 1))
    {
      v27 = 1;
      goto LABEL_110;
    }
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)((char *)v904[1] + ((*(_QWORD *)&v906[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v906[0] & 0x1FF));
      *((_QWORD *)&v906[0] + 1) = v18 - 1;
      if (++*(_QWORD *)&v906[0] >= 0x400uLL)
      {
        operator delete(*(void **)v904[1]);
        v904[1] = (char *)v904[1] + 8;
        *(_QWORD *)&v906[0] -= 512;
      }
      v20 = *(unsigned __int8 *)(v19 + 16);
      v21 = v20 != 83 || v19 == 0;
      if (v21)
        break;
      v47 = *(_DWORD *)(v19 + 20);
      if ((v47 & 0x40000000) != 0)
      {
        v49 = *(uint64_t **)(v19 - 8);
        v48 = v47 & 0x7FFFFFF;
        if (v48)
        {
LABEL_96:
          v50 = 32 * v48;
          do
          {
            v51 = *v49;
            v52 = sub_1C477672C((uint64_t)__b, *v49);
            v53 = __b[1] == __b[0] ? (unsigned int *)((char *)v926 + 4) : (unsigned int *)v926;
            if (v52 == (_QWORD *)((char *)__b[1] + 8 * *v53))
            {
              v54 = *(unsigned __int8 *)(v51 + 16);
              if (v54 != 16 && v54 < 0x1C)
                goto LABEL_109;
            }
            sub_1C5AF1930(v51, v904, (unsigned int *)__b);
            v49 += 4;
            v50 -= 32;
          }
          while (v50);
        }
      }
      else
      {
        v48 = v47 & 0x7FFFFFF;
        v49 = (uint64_t *)(v19 - 32 * v48);
        if (v48)
          goto LABEL_96;
      }
LABEL_107:
      v18 = *((_QWORD *)&v906[0] + 1);
      v27 = 1;
      if (!*((_QWORD *)&v906[0] + 1))
        goto LABEL_110;
    }
    if (v20 != 85 || v19 == 0)
      goto LABEL_109;
    v23 = *(_QWORD *)(v19 + 8);
    if (!v23)
      goto LABEL_109;
    if (*(_QWORD *)(v23 + 8))
      goto LABEL_109;
    v24 = *(_QWORD *)(v23 + 24);
    if (!v24 && MEMORY[0x10] != 85 && MEMORY[0x10] != 83)
      goto LABEL_109;
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_QWORD *)(v25 + 40);
    if (v26 == v25 + 40)
      goto LABEL_109;
    v27 = 0;
    v28 = v26 - 24;
    if (!v26)
      v28 = 0;
    v29 = *(unsigned __int8 *)(v28 + 16) - 40;
    if (v29 < 0xFFFFFFF5)
      v28 = 0;
    if (!v26)
      goto LABEL_110;
    if (*(_BYTE *)(v28 + 16) != 30 || v29 < 0xFFFFFFF5)
      goto LABEL_110;
    if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFF) != 1
      || *(_BYTE *)(v24 + 16) == 83
      && llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)(v19 + 40)) != *(_QWORD *)(v24 + 40))
    {
      goto LABEL_109;
    }
    if (!(_DWORD)v882)
    {
LABEL_69:
      v34 = *(_QWORD *)(v19 - 64);
      v35 = sub_1C477672C((uint64_t)__b, v34);
      if (__b[1] == __b[0])
        v36 = (unsigned int *)v926 + 1;
      else
        v36 = (unsigned int *)v926;
      if (v35 == (_QWORD *)((char *)__b[1] + 8 * *v36))
      {
        v37 = *(unsigned __int8 *)(v34 + 16);
        if (v37 != 16 && v37 < 0x1C)
          goto LABEL_109;
      }
      v39 = *(_QWORD *)(v19 - 32);
      v40 = sub_1C477672C((uint64_t)__b, v39);
      v41 = __b[1] == __b[0] ? (unsigned int *)((char *)v926 + 4) : (unsigned int *)v926;
      if (v40 == (_QWORD *)((char *)__b[1] + 8 * *v41))
      {
        v42 = *(unsigned __int8 *)(v39 + 16);
        if (v42 != 16 && v42 < 0x1C)
          goto LABEL_109;
      }
      sub_1C5AF1930(*(_QWORD *)(v19 - 64), v904, (unsigned int *)__b);
      sub_1C5AF1930(*(_QWORD *)(v19 - 32), v904, (unsigned int *)__b);
      v44 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 24);
      if (v44 && *(_BYTE *)(v44 + 16) == 83)
      {
        v45 = v882;
        if (v882 >= (unint64_t)DWORD1(v882))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v881.i64[1], (uint64_t)&v882 + 8, v882 + 1, 16);
          v45 = v882;
        }
        v46 = (_QWORD *)(v881.i64[1] + 16 * v45);
        *v46 = v19;
        v46[1] = v44;
        LODWORD(v882) = v882 + 1;
      }
      goto LABEL_107;
    }
    v31 = (uint64_t *)v881.i64[1];
    v32 = 16 * v882;
    while (1)
    {
      v33 = *v31;
      if (*(_QWORD *)(*v31 - 64) != v19
        && *(_QWORD *)(v33 - 32) != v19
        && *(_QWORD *)(v33 + 40) == *(_QWORD *)(v19 + 40))
      {
        break;
      }
      v31 += 2;
      v32 -= 16;
      if (!v32)
        goto LABEL_69;
    }
LABEL_109:
    v27 = 0;
LABEL_110:
    if (__b[1] != __b[0])
      free(__b[1]);
    sub_1C484143C((uint64_t)v904);
    if (v27)
    {
      v881.i64[0] = v11;
      if (v11)
        goto LABEL_114;
LABEL_279:
      v151 = 7;
      goto LABEL_498;
    }
    v150 = ****(_QWORD ****)v13;
    if (*(_QWORD *)(v150 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v150 + 72) + 48))(*(_QWORD *)(v150 + 72)))
    {
      v317 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)__src, (const llvm::DebugLoc *)(v11 + 48));
      v318 = *(_QWORD *)(v11 + 40);
      LODWORD(__b[1]) = 10;
      BYTE4(__b[1]) = 2;
      *(_OWORD *)((char *)v926 + 8) = *(_OWORD *)__src;
      *(_QWORD *)&v926[0] = v317;
      *((_QWORD *)&v926[1] + 1) = "dfa-jump-threading";
      *(_QWORD *)&v927 = "SwitchNotPredictable";
      *((_QWORD *)&v927 + 1) = 20;
      v928 = 0;
      v929 = 0;
      v930 = v932;
      v931 = 0x400000000;
      v939 = 0;
      v940 = -1;
      v941 = v318;
      __b[0] = &off_1E814E538;
      __src[0] = "Switch instruction is not predictable.";
      __src[1] = (void *)38;
      sub_1C53B17B4((uint64_t)&v930, (const void **)__src);
      sub_1C61998EC((uint64_t)v904, (uint64_t)__b);
      v904[0] = &off_1E814E538;
      __b[0] = &off_1E814E790;
      v319 = (char *)v930;
      if ((_DWORD)v931)
      {
        v320 = (unint64_t)v931 << 6;
        do
        {
          v321 = (void **)&v319[v320];
          if (v319[v320 - 17] < 0)
            operator delete(*(v321 - 5));
          if (*((char *)v321 - 41) < 0)
            operator delete(*(v321 - 8));
          v320 -= 64;
        }
        while (v320);
        v319 = (char *)v930;
      }
      if (v319 != (char *)v932)
        free(v319);
      llvm::OptimizationRemarkEmitter::emit(v13, (llvm::DiagnosticInfoOptimizationBase *)v904);
      v904[0] = &off_1E814E790;
      v322 = (char *)v907;
      if (v908)
      {
        v323 = (unint64_t)v908 << 6;
        do
        {
          v324 = (void **)&v322[v323];
          if (v322[v323 - 17] < 0)
            operator delete(*(v324 - 5));
          if (*((char *)v324 - 41) < 0)
            operator delete(*(v324 - 8));
          v323 -= 64;
        }
        while (v323);
        v322 = (char *)v907;
      }
      if (v322 != (char *)v909)
        free(v322);
    }
    if (!v881.i64[0])
      goto LABEL_279;
LABEL_114:
    v56 = *(_QWORD *)(a1 + 8);
    sub_1C5AF180C(__src, (uint64_t)&v880);
    __b[0] = v926;
    __b[1] = (void *)0x1000000000;
    v932[22] = 0;
    v932[23] = 0;
    v932[24] = v56;
    v932[25] = 0;
    v933 = 0;
    v934 = &v938;
    v935 = &v938;
    v936 = 8;
    v937 = 0;
    v944 = 0;
    v945 = 0;
    v943 = 0;
    LOWORD(v946) = 0;
    v904[0] = &v905;
    v904[1] = (void *)0x400000000;
    if (LODWORD(__src[1]))
    {
      v57 = 0;
      v58 = (__int128 *)__src[0];
      v59 = 16 * LODWORD(__src[1]);
      do
      {
        v60 = *v58;
        if (v57 >= HIDWORD(v904[1]))
        {
          v842 = *v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v904, (uint64_t)&v905, v57 + 1, 16);
          v60 = v842;
          v57 = v904[1];
        }
        *((_OWORD *)v904[0] + v57) = v60;
        v57 = ++LODWORD(v904[1]);
        ++v58;
        v59 -= 16;
      }
      while (v59);
      while (v57)
      {
        v61 = (char *)v904[0] + 16 * v57;
        v62 = (uint64_t ***)*((_QWORD *)v61 - 2);
        v63 = *((_QWORD *)v61 - 1);
        LODWORD(v904[1]) = v57 - 1;
        memset(&v920, 0, sizeof(v920));
        v863 = 0;
        __p = 0;
        v864 = 0;
        v64 = (llvm::BasicBlock *)v62[5];
        v65 = (_QWORD *)*((_QWORD *)v64 + 5);
        if (v65 == (_QWORD *)((char *)v64 + 40))
        {
          v67 = 0;
        }
        else
        {
          if (v65)
            v66 = (uint64_t ***)(v65 - 3);
          else
            v66 = 0;
          if (*((unsigned __int8 *)v66 + 16) - 29 >= 0xB)
            v67 = 0;
          else
            v67 = v66;
        }
        v68 = *(_QWORD *)(v63 + 40);
        v69 = *((unsigned __int8 *)v67 + 16);
        v869 = 0;
        *(_QWORD *)&v857 = 0;
        v918[0] = 0;
        v879.__r_.__value_.__r.__words[0] = 0;
        v70 = (llvm::Instruction *)*(v62 - 8);
        if (v70 && *((_BYTE *)v70 + 16) == 85)
          sub_1C5AF19C0((uint64_t)__b, **v62, (llvm::Instruction *)v63, v70, v68, (unint64_t)"si.unfold.true", 0xEuLL, &v869, (llvm::Instruction **)v918, (llvm::Instruction ***)&v920, (uint64_t **)&__p);
        v71 = 0;
        v72 = (llvm::Instruction *)*(v62 - 4);
        if (v72 && *((_BYTE *)v72 + 16) == 85)
        {
          sub_1C5AF19C0((uint64_t)__b, **v62, (llvm::Instruction *)v63, v72, v68, (unint64_t)"si.unfold.false", 0xFuLL, (uint64_t *)&v857, (llvm::Instruction **)&v879, (llvm::Instruction ***)&v920, (uint64_t **)&__p);
          v71 = v857;
        }
        v73 = v869;
        v843 = v69;
        if (!(v869 | v71))
        {
          v74 = **v62;
          v900[0] = "si.unfold.false";
          LOWORD(v902) = 259;
          v75 = *(_QWORD *)(v68 + 56);
          v76 = operator new();
          *(_QWORD *)v76 = *v74 + 1600;
          *(_QWORD *)(v76 + 8) = 0;
          v77 = *(_DWORD *)(v76 + 20) & 0xC0000000;
          *(_QWORD *)(v76 + 24) = 0;
          v78 = v76 + 24;
          *(_DWORD *)(v76 + 16) = 22;
          *(_DWORD *)(v76 + 20) = v77;
          *(_QWORD *)(v76 + 32) = 0;
          *(_QWORD *)(v76 + 40) = v76 + 40;
          *(_QWORD *)(v76 + 48) = v76 + 40;
          *(_QWORD *)(v76 + 56) = 0;
          if (v75)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v75 + 72, (_QWORD *)v76);
            v79 = *(_QWORD *)(v68 + 24);
            *(_QWORD *)(v76 + 24) = v79;
            *(_QWORD *)(v76 + 32) = v68 + 24;
            *(_QWORD *)(v79 + 8) = v78;
            *(_QWORD *)(v68 + 24) = v78;
          }
          llvm::Value::setName((uint64_t ***)v76, (uint64_t)v900);
          *(_QWORD *)&v857 = v76;
          v80 = (char *)v863;
          if (v863 >= v864)
          {
            v82 = (char *)__p;
            v83 = ((char *)v863 - (_BYTE *)__p) >> 3;
            v84 = v83 + 1;
            if ((unint64_t)(v83 + 1) >> 61)
              goto LABEL_1368;
            v85 = (char *)v864 - (_BYTE *)__p;
            if (((char *)v864 - (_BYTE *)__p) >> 2 > v84)
              v84 = v85 >> 2;
            if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
              v86 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v86 = v84;
            if (v86)
            {
              if (v86 >> 61)
LABEL_1369:
                sub_1C4764EE4();
              v87 = (char *)operator new(8 * v86);
            }
            else
            {
              v87 = 0;
            }
            v88 = (uint64_t *)&v87[8 * v83];
            *v88 = v76;
            v81 = (void **)(v88 + 1);
            if (v80 != v82)
            {
              do
              {
                v89 = *((_QWORD *)v80 - 1);
                v80 -= 8;
                *--v88 = v89;
              }
              while (v80 != v82);
              v80 = (char *)__p;
            }
            __p = v88;
            v864 = (void **)&v87[8 * v86];
            v69 = v843;
            if (v80)
              operator delete(v80);
          }
          else
          {
            *v863 = (void *)v76;
            v81 = (void **)(v80 + 8);
            v69 = v843;
          }
          v863 = v81;
          v71 = v857;
          v90 = operator new(0x60uLL);
          v90[13] = v90[13] & 0x38000000 | 1;
          *(_QWORD *)v90 = 0;
          *((_QWORD *)v90 + 1) = 0;
          *((_QWORD *)v90 + 2) = 0;
          *((_QWORD *)v90 + 3) = v90 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v90 + 8), (llvm::BasicBlock *)v68, (llvm::BasicBlock *)v71);
          v900[0] = (void *)v71;
          v900[1] = (void *)(v68 & 0xFFFFFFFFFFFFFFFBLL);
          llvm::DomTreeUpdater::applyUpdates((uint64_t)__b, (unint64_t *)v900, 1);
          v73 = v869;
        }
        v840 = v67;
        if (v73 && v71)
        {
          v91 = *(_DWORD *)(v63 + 20);
          v92 = v91 & 0x7FFFFFF;
          if ((v91 & 0x7FFFFFF) != 0)
          {
            v93 = 0;
            while (1)
            {
              v94 = v63 - 32 * v92;
              if ((v91 & 0x40000000) != 0)
                v94 = *(_QWORD *)(v63 - 8);
              if (*(llvm::BasicBlock **)(v94 + 32 * *(unsigned int *)(v63 + 60) + 8 * v93) == v64)
                break;
              if (v92 == ++v93)
                goto LABEL_163;
            }
          }
          else
          {
LABEL_163:
            LODWORD(v93) = -1;
          }
          llvm::PHINode::removeIncomingValue((llvm::PHINode *)v63, v93, 0);
          sub_1C477667C((llvm::PHINode *)v63, (uint64_t)*(v62 - 8), v73);
          sub_1C477667C((llvm::PHINode *)v63, (uint64_t)*(v62 - 4), v71);
          if (*(_QWORD *)(v68 + 40) != v68 + 40)
          {
            v95 = *(_QWORD *)(v68 + 48);
            v96 = v95 - 24;
            v97 = v95 ? v95 - 24 : 0;
            if (v95 && *(_BYTE *)(v97 + 16) == 83)
            {
              v98 = v869;
              v99 = v857;
              do
              {
                if (v96 != v63)
                {
                  v100 = *(_DWORD *)(v96 + 20);
                  v101 = v100 & 0x7FFFFFF;
                  if ((v100 & 0x7FFFFFF) != 0)
                  {
                    v102 = 0;
                    while (1)
                    {
                      v103 = v96 - 32 * v101;
                      if ((v100 & 0x40000000) != 0)
                        v103 = *(_QWORD *)(v96 - 8);
                      if (*(llvm::BasicBlock **)(v103 + 32 * *(unsigned int *)(v96 + 60) + 8 * v102) == v64)
                        break;
                      if (v101 == ++v102)
                        goto LABEL_178;
                    }
                  }
                  else
                  {
LABEL_178:
                    LODWORD(v102) = -1;
                  }
                  if ((v100 & 0x40000000) != 0)
                    v104 = *(_QWORD *)(v96 - 8);
                  else
                    v104 = v96 - 32 * v101;
                  sub_1C477667C((llvm::PHINode *)v96, *(_QWORD *)(v104 + 32 * v102), v98);
                  v105 = *(_DWORD *)(v96 + 20);
                  v106 = v105 & 0x7FFFFFF;
                  if ((v105 & 0x7FFFFFF) != 0)
                  {
                    v107 = 0;
                    while (1)
                    {
                      v108 = v96 - 32 * v106;
                      if ((v105 & 0x40000000) != 0)
                        v108 = *(_QWORD *)(v96 - 8);
                      if (*(llvm::BasicBlock **)(v108 + 32 * *(unsigned int *)(v96 + 60) + 8 * v107) == v64)
                        break;
                      if (v106 == ++v107)
                        goto LABEL_187;
                    }
                  }
                  else
                  {
LABEL_187:
                    LODWORD(v107) = -1;
                  }
                  if ((v105 & 0x40000000) != 0)
                    v109 = *(_QWORD *)(v96 - 8);
                  else
                    v109 = v96 - 32 * v106;
                  sub_1C477667C((llvm::PHINode *)v96, *(_QWORD *)(v109 + 32 * v107), v99);
                }
                v110 = *(_QWORD *)(v96 + 32);
                v96 = v110 - 24;
                if (v110)
                  v111 = v110 - 24;
                else
                  v111 = 0;
              }
              while (v110 && *(_BYTE *)(v111 + 16) == 83);
            }
          }
          v114 = v73;
          v115 = v71;
        }
        else
        {
          if (v73)
            v112 = (uint64_t)*(v62 - 8);
          else
            v112 = (uint64_t)*(v62 - 4);
          if (v73)
            v113 = (uint64_t)*(v62 - 4);
          else
            v113 = (uint64_t)*(v62 - 8);
          if (v73)
            v114 = v73;
          else
            v114 = v68;
          if (v73)
            v115 = v68;
          else
            v115 = v71;
          if (v73)
            v71 = v73;
          v116 = *(_DWORD *)(v63 + 20);
          v117 = v116 & 0x7FFFFFF;
          if ((v116 & 0x7FFFFFF) != 0)
          {
            v118 = 0;
            do
            {
              if ((v116 & 0x40000000) != 0)
                v119 = *(_QWORD *)(v63 - 8);
              else
                v119 = v63 - 32 * v117;
              if (*(llvm::BasicBlock **)(v119 + 32 * *(unsigned int *)(v63 + 60) + 8 * v118) == v64)
              {
                sub_1C6125834(v63, v118, v113);
                v116 = *(_DWORD *)(v63 + 20);
              }
              ++v118;
              v117 = v116 & 0x7FFFFFF;
            }
            while (v118 < v117);
          }
          sub_1C477667C((llvm::PHINode *)v63, v112, v71);
          v120 = *(_QWORD *)(v68 + 48);
          v121 = (_DWORD *)(v120 - 24);
          if (v120)
            v122 = v120 - 24;
          else
            v122 = 0;
          if (v120)
          {
            v69 = v843;
            if (*(_BYTE *)(v122 + 16) == 83)
            {
              do
              {
                if (v121 != (_DWORD *)v63)
                {
                  v123 = v121[5];
                  v124 = v123 & 0x7FFFFFF;
                  if ((v123 & 0x7FFFFFF) != 0)
                  {
                    v125 = 0;
                    while (1)
                    {
                      v126 = &v121[-8 * v124];
                      if ((v123 & 0x40000000) != 0)
                        v126 = (_DWORD *)*((_QWORD *)v121 - 1);
                      if (*(llvm::BasicBlock **)&v126[8 * v121[15] + 2 * v125] == v64)
                        break;
                      if (v124 == ++v125)
                        goto LABEL_233;
                    }
                  }
                  else
                  {
LABEL_233:
                    LODWORD(v125) = -1;
                  }
                  if ((v123 & 0x40000000) != 0)
                    v127 = (_DWORD *)*((_QWORD *)v121 - 1);
                  else
                    v127 = &v121[-8 * v124];
                  sub_1C477667C((llvm::PHINode *)v121, *(_QWORD *)&v127[8 * v125], v71);
                }
                v120 = *(_QWORD *)(v120 + 8);
                v128 = v120 - 24;
                if (!v120)
                  v128 = 0;
                v129 = *(unsigned __int8 *)(v128 + 16);
                if (v129 == 83)
                  v121 = (_DWORD *)v128;
                else
                  v121 = 0;
              }
              while (v120 && v129 == 83);
            }
          }
          else
          {
            v69 = v843;
          }
        }
        if (v69 == 30)
          v130 = v840;
        else
          v130 = 0;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v130[5] + 5), v130);
        v131 = v130[3];
        v132 = v130[4];
        *v132 = (uint64_t *)v131;
        v131[1] = (uint64_t *)v132;
        v130[3] = 0;
        v130[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v130);
        v133 = (llvm::Value *)*(v62 - 12);
        v134 = operator new(0xA0uLL);
        v135 = 0;
        v136 = (llvm::BranchInst *)(v134 + 24);
        v134[29] = v134[29] & 0x38000000 | 3;
        do
        {
          v137 = &v134[v135];
          *v137 = 0;
          v137[1] = 0;
          v137[2] = 0;
          v137[3] = v136;
          v135 += 8;
        }
        while (v135 != 24);
        llvm::BranchInst::BranchInst(v136, (llvm::BasicBlock *)v114, (llvm::BasicBlock *)v115, v133, v64);
        v900[0] = v64;
        v900[1] = (void *)(v114 & 0xFFFFFFFFFFFFFFFBLL);
        v901[0] = v64;
        v901[1] = (void *)(v115 & 0xFFFFFFFFFFFFFFFBLL);
        llvm::DomTreeUpdater::applyUpdates((uint64_t)__b, (unint64_t *)v900, 2);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v62[5] + 5), v62);
        v138 = v62[3];
        v139 = v62[4];
        *v139 = (uint64_t *)v138;
        v138[1] = (uint64_t *)v139;
        v62[3] = 0;
        v62[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v62);
        v140 = *(_OWORD *)&v920.__r_.__value_.__l.__data_;
        if (v920.__r_.__value_.__r.__words[0] != v920.__r_.__value_.__l.__size_)
        {
          v141 = v904[1];
          v142 = (__int128 *)v920.__r_.__value_.__r.__words[0];
          do
          {
            v143 = *v142;
            if (v141 >= HIDWORD(v904[1]))
            {
              v844 = *v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v904, (uint64_t)&v905, v141 + 1, 16);
              v143 = v844;
              v141 = v904[1];
            }
            *((_OWORD *)v904[0] + v141) = v143;
            v141 = ++LODWORD(v904[1]);
            ++v142;
          }
          while (v142 != *((__int128 **)&v140 + 1));
        }
        if (__p)
          operator delete(__p);
        if ((_QWORD)v140)
          operator delete((void *)v140);
        v57 = v904[1];
      }
    }
    if (v904[0] != &v905)
      free(v904[0]);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)__b);
    v904[0] = &v943;
    sub_1C50B10F0((void ***)v904);
    if (v935 != v934)
      free(v935);
    if (__b[0] != v926)
      free(__b[0]);
    if (__src[0] != &v893)
      free(__src[0]);
    sub_1C5AF180C(__b, (uint64_t)&v880);
    v144 = (int)__b[1];
    if (__b[0] != v926)
      free(__b[0]);
    v145 = v144 != 0;
    v146 = *(_QWORD *)(a1 + 24);
    v147 = *(_QWORD *)(v881.i64[0] + 40);
    v920.__r_.__value_.__r.__words[0] = v881.i64[0];
    v920.__r_.__value_.__l.__size_ = v147;
    v920.__r_.__value_.__r.__words[2] = v146;
    v921 = 0;
    v922 = 0;
    v923 = 0;
    v904[0] = v906;
    v904[1] = v906;
    *(_QWORD *)&v905 = 8;
    DWORD2(v905) = 0;
    sub_1C5AF1CB4(&v869, (uint64_t)&v920, v147, (uint64_t)v904, 1u);
    v857 = 0uLL;
    LODWORD(v858) = 0;
    v148 = *(_DWORD *)(v920.__r_.__value_.__r.__words[0] + 20);
    if ((v148 & 0x40000000) != 0)
      v149 = *(uint64_t **)(v920.__r_.__value_.__r.__words[0] - 8);
    else
      v149 = (uint64_t *)(v920.__r_.__value_.__r.__words[0] - 32 * (v148 & 0x7FFFFFF));
    v826 |= v145;
    v152 = *v149;
    __src[0] = &v893;
    HIDWORD(__src[1]) = 8;
    if (*(_BYTE *)(v152 + 16) == 83)
      v153 = v152;
    else
      v153 = 0;
    v893 = v153;
    __b[0] = &v926[1];
    __b[1] = &v926[1];
    *(_QWORD *)&v926[0] = 16;
    DWORD2(v926[0]) = 0;
    v154 = 1;
    while (2)
    {
      v155 = *((_QWORD *)__src[0] + v154 - 1);
      LODWORD(__src[1]) = v154 - 1;
      v900[0] = *(void **)(v155 + 40);
      sub_1C6180A54((uint64_t)&v857, (uint64_t *)v900)[1] = v155;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)__b, v155);
      v156 = *(_DWORD *)(v155 + 20);
      if ((v156 & 0x40000000) != 0)
      {
        v158 = *(uint64_t **)(v155 - 8);
        v157 = v156 & 0x7FFFFFF;
        if (!v157)
          goto LABEL_300;
      }
      else
      {
        v157 = v156 & 0x7FFFFFF;
        v158 = (uint64_t *)(v155 - 32 * v157);
        if (!v157)
          goto LABEL_300;
      }
      v159 = 32 * v157;
      do
      {
        v160 = *v158;
        if (*v158 != v152 && *(_BYTE *)(v160 + 16) != 16)
        {
          v161 = sub_1C477672C((uint64_t)__b, *v158);
          v162 = __b[1] == __b[0] ? (unsigned int *)((char *)v926 + 4) : (unsigned int *)v926;
          if (v161 == (_QWORD *)((char *)__b[1] + 8 * *v162))
          {
            v163 = LODWORD(__src[1]);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v893, LODWORD(__src[1]) + 1, 8);
              v163 = LODWORD(__src[1]);
            }
            *((_QWORD *)__src[0] + v163) = v160;
            ++LODWORD(__src[1]);
          }
        }
        v158 += 4;
        v159 -= 32;
      }
      while (v159);
LABEL_300:
      v154 = __src[1];
      if (LODWORD(__src[1]))
        continue;
      break;
    }
    if (__b[1] != __b[0])
      free(__b[1]);
    if (__src[0] != &v893)
      free(__src[0]);
    v164 = (_QWORD *)v869;
    v165 = v870;
    while (2)
    {
      if (v164 != v165)
      {
        sub_1C5AF2AA8((uint64_t)v900, v164);
        *((_QWORD *)&v927 + 1) = 0;
        v928 = 0;
        *(_OWORD *)__b = 0u;
        memset(v926, 0, sizeof(v926));
        if (v901[0] != v900[1])
        {
          v166 = (char *)v900[1] + 8 * (v902 >> 9);
          v167 = (void **)(*v166 + 8 * (v902 & 0x1FF));
          v168 = *(_QWORD *)((char *)v900[1] + (((v903 + v902) >> 6) & 0x3FFFFFFFFFFFFF8))
               + 8 * ((v903 + v902) & 0x1FF);
          if (v167 != (void **)v168)
          {
            v169 = *(void **)(*(_QWORD *)((char *)v900[1] + (((v903 + v902 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v903 + v902 - 1) & 0x1FF));
            do
            {
              __src[0] = 0;
              v170 = *v167;
              __src[0] = *v167;
              if ((_DWORD)v858)
              {
                v171 = ((v170 >> 4) ^ (v170 >> 9)) & (v858 - 1);
                v172 = *(void **)(v857 + 16 * v171);
                if (v170 == v172)
                {
LABEL_312:
                  v173 = sub_1C6180A54((uint64_t)&v857, (uint64_t *)__src)[1];
                  v174 = *(_DWORD *)(v173 + 20);
                  v175 = v174 & 0x7FFFFFF;
                  if ((v174 & 0x7FFFFFF) != 0)
                  {
                    v176 = 0;
                    while (1)
                    {
                      v177 = v173 - 32 * v175;
                      if ((v174 & 0x40000000) != 0)
                        v177 = *(_QWORD *)(v173 - 8);
                      if (*(void **)(v177 + 32 * *(unsigned int *)(v173 + 60) + 8 * v176) == v169)
                        break;
                      if (v175 == ++v176)
                        goto LABEL_318;
                    }
                  }
                  else
                  {
LABEL_318:
                    LODWORD(v176) = -1;
                  }
                  if ((v174 & 0x40000000) != 0)
                    v178 = *(_QWORD *)(v173 - 8);
                  else
                    v178 = v173 - 32 * v175;
                  v179 = *(_QWORD *)(v178 + 32 * v176);
                  if (v179)
                    v180 = *(_BYTE *)(v179 + 16) == 16;
                  else
                    v180 = 0;
                  if (v180)
                  {
                    v181 = (_QWORD *)(v179 + 24);
                    if (*(_DWORD *)(v179 + 32) >= 0x41u)
                      v181 = (_QWORD *)*v181;
                    v182 = (_QWORD *)*v181;
                    v928 = 1;
                    *(_QWORD *)&v927 = v182;
                    *((_QWORD *)&v927 + 1) = v170;
                    sub_1C5AF2CC4(__b, v900);
                  }
                }
                else
                {
                  v184 = 1;
                  while (v172 != (void *)-4096)
                  {
                    v185 = v171 + v184++;
                    v171 = v185 & (v858 - 1);
                    v172 = *(void **)(v857 + 16 * v171);
                    if (v170 == v172)
                      goto LABEL_312;
                  }
                }
              }
              if (v928
                && v170 == *(void **)(*(_QWORD *)((char *)v900[1] + ((v902 >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * (v902 & 0x1FF)))
              {
                goto LABEL_341;
              }
              if ((void **)((char *)++v167 - *v166) == (void **)4096)
              {
                v183 = (void **)v166[1];
                ++v166;
                v167 = v183;
              }
              v169 = v170;
            }
            while (v167 != (void **)v168);
            if (v928)
            {
LABEL_341:
              v186 = *(_DWORD *)(v920.__r_.__value_.__r.__words[0] + 20);
              if ((v186 & 0x40000000) != 0)
                v187 = *(uint64_t **)(v920.__r_.__value_.__r.__words[0] - 8);
              else
                v187 = (uint64_t *)(v920.__r_.__value_.__r.__words[0] - 32 * (v186 & 0x7FFFFFF));
              v188 = *v187;
              if (v188)
                v189 = *(unsigned __int8 *)(v188 + 16) >= 0x1Cu;
              else
                v189 = 0;
              if (v189)
              {
                v190 = *(_QWORD *)(v188 + 40);
                v191 = *(_QWORD *)(v920.__r_.__value_.__r.__words[0] + 40);
                v879.__r_.__value_.__r.__words[0] = *((_QWORD *)&v927 + 1);
                if (v191 == *(_QWORD *)(*(_QWORD *)((char *)__b[1] + ((*(_QWORD *)&v926[1] >> 6) & 0x3FFFFFFFFFFFFF8))
                                       + 8 * (v926[1] & 0x1FF)))
                {
                  v845 = v190;
                  sub_1C5AF2AA8((uint64_t)__src, __b);
                  v192 = v895;
                  v193 = (char *)__src[1];
                  v194 = (char *)v893;
                  v195 = (char *)__src[1] + 8 * (v895 >> 9);
                  if ((void *)v893 == __src[1])
                  {
                    v196 = 0;
                    v199 = 0;
                    v197 = v896;
                    v198 = (_QWORD **)((char *)__src[1] + 8 * ((v896 + v895) >> 9));
                  }
                  else
                  {
                    v196 = (_QWORD *)(*v195 + 8 * (v895 & 0x1FF));
                    v197 = v896;
                    v198 = (_QWORD **)((char *)__src[1] + 8 * ((v896 + v895) >> 9));
                    v199 = &(*v198)[(v896 + v895) & 0x1FF];
                  }
                  v200 = (char *)sub_1C5AF2EE8((_QWORD *)__src[1] + (v895 >> 9), v196, v198, v199, &v879);
                  if (v194 == v193)
                  {
                    v202 = 0;
                    v204 = 0;
                    v203 = &v193[8 * ((v197 + v192) >> 9)];
                  }
                  else
                  {
                    v202 = (char *)(*v195 + 8 * (v192 & 0x1FF));
                    v203 = &v193[8 * ((v197 + v192) >> 9)];
                    v204 = (char *)(*(_QWORD *)v203 + 8 * ((v197 + v192) & 0x1FF));
                  }
                  if (v202 != v201 && v201 != v204)
                  {
                    v205 = (uint64_t)&v202[-*v195];
                    v206 = v205 >> 3;
                    if (v205 < -7)
                    {
                      v210 = 1021 - v206;
                      if (v206 <= 510)
                        v210 = 510 - v206;
                      v207 = (char *)&v195[-(v210 >> 9)];
                      v208 = *(_QWORD *)v207;
                      if (v206 - 510 >= 0)
                        v211 = -((v206 - 510) & 0x1FF);
                      else
                        v211 = (510 - (_WORD)v206) & 0x1FF;
                      v209 = 511 - v211;
                    }
                    else
                    {
                      v207 = (char *)&v195[(unint64_t)(v206 + 1) >> 9];
                      v208 = *(_QWORD *)v207;
                      v209 = (v206 + 1) & 0x1FF;
                    }
                    if ((char *)(v208 + 8 * v209) == v201)
                    {
                      v216 = *(void **)v202;
                      __p = v195;
                      v863 = (void **)v202;
                      v918[0] = &__p;
                      if (v207 != v203)
                      {
                        sub_1C4EBA3AC((void ****)v918, v201, (_BYTE *)(v208 + 4096));
                        for (i = v207 + 8; i != v203; i += 8)
                        {
                          v218 = *(_BYTE **)i;
                          sub_1C4EBA3AC((void ****)v918, v218, v218 + 4096);
                        }
                        v201 = *(char **)v203;
                      }
                      sub_1C4EBA3AC((void ****)v918, v201, v204);
                      *v863 = v216;
                      goto LABEL_421;
                    }
                    v212 = (uint64_t)&v201[-*(_QWORD *)v200];
                    v213 = v212 >> 3;
                    if (v212 < -7)
                    {
                      v219 = 1021 - v213;
                      if (v213 <= 510)
                        v219 = 510 - v213;
                      v214 = *(_QWORD *)&v200[-8 * (v219 >> 9)];
                      if (v213 - 510 >= 0)
                        v220 = -((v213 - 510) & 0x1FF);
                      else
                        v220 = (510 - (_WORD)v213) & 0x1FF;
                      v215 = 511 - v220;
                    }
                    else
                    {
                      v214 = *(_QWORD *)&v200[((unint64_t)(v213 + 1) >> 6) & 0x3FFFFFFFFFFFFF8];
                      v215 = (v213 + 1) & 0x1FF;
                    }
                    if ((char *)(v214 + 8 * v215) == v204)
                    {
                      v232 = (uint64_t)&v204[-*(_QWORD *)v203];
                      v233 = v232 >> 3;
                      if (v232 < 9)
                      {
                        v325 = v233 > 512;
                        v238 = 512 - v233;
                        v239 = 1023 - v233;
                        if (!v325)
                          v239 = v238;
                        v235 = (char **)&v203[-8 * (v239 >> 9)];
                        v236 = *v235;
                        v240 = v238 & 0x1FF;
                        v242 = -v238;
                        v241 = v242 < 0;
                        v243 = v242 & 0x1FF;
                        if (!v241)
                          v240 = -v243;
                        v237 = 511 - v240;
                      }
                      else
                      {
                        v234 = v233 - 1;
                        v235 = (char **)&v203[8 * (v234 >> 9)];
                        v236 = *v235;
                        v237 = v234 & 0x1FF;
                      }
                      v244 = &v236[8 * v237];
                      v841 = *(_QWORD *)v244;
                      if (v235 != v195)
                      {
                        sub_1C4EB9D18(&__p, v236, v244, v203, v204);
                        v203 = (char *)v863;
                        v204 = (char *)v864;
                        v245 = v235 - 1;
                        if (v235 - 1 != v195)
                        {
                          v246 = (char *)*v863;
                          do
                          {
                            v247 = *v245;
                            v248 = *v245 + 4096;
                            while (1)
                            {
                              v249 = v204 - v246;
                              if ((v248 - v247) >> 3 >= v249 >> 3)
                                v250 = v249 >> 3;
                              else
                                v250 = (v248 - v247) >> 3;
                              v248 -= 8 * v250;
                              v204 -= 8 * v250;
                              if (v250)
                                memmove(v204, v248, 8 * v250);
                              if (v248 == v247)
                                break;
                              v251 = (char *)*((_QWORD *)v203 - 1);
                              v203 -= 8;
                              v246 = v251;
                              v204 = v251 + 4096;
                            }
                            v246 = *(char **)v203;
                            if ((char *)(*(_QWORD *)v203 + 4096) == v204)
                            {
                              v252 = (char *)*((_QWORD *)v203 + 1);
                              v203 += 8;
                              v246 = v252;
                              v204 = v252;
                            }
                            --v245;
                          }
                          while (v245 != v195);
                        }
                        v244 = (char *)(*v195 + 4096);
                      }
                      sub_1C4EB9D18(&__p, v202, v244, v203, v204);
                      *(_QWORD *)v202 = v841;
                      goto LABEL_421;
                    }
                    v221 = v213 - v206 + ((v200 - (char *)v195) << 6);
                    v222 = ((v203 - v200) << 6) - v213 + ((uint64_t)&v204[-*(_QWORD *)v203] >> 3);
                    v223 = v221;
                    if (v221 == v222)
                    {
                      v224 = v201;
                      do
                      {
                        v225 = *(void **)v202;
                        *(_QWORD *)v202 = *(_QWORD *)v224;
                        v202 += 8;
                        *(_QWORD *)v224 = v225;
                        if (&v202[-*v195] == (char *)4096)
                        {
                          v226 = (char *)v195[1];
                          ++v195;
                          v202 = v226;
                        }
                        v224 += 8;
                        if (&v224[-*(_QWORD *)v200] == (char *)4096)
                        {
                          v227 = (char *)*((_QWORD *)v200 + 1);
                          v200 += 8;
                          v224 = v227;
                        }
                      }
                      while (v202 != v201 && v224 != v204);
                      goto LABEL_421;
                    }
                    do
                    {
                      v229 = v223;
                      v223 = v222;
                      v222 = v229 % v222;
                    }
                    while (v222);
                    if (!v223)
                      goto LABEL_421;
                    v230 = v223 + v206;
                    if (v230 < 1)
                    {
                      v278 = 511 - v230;
                      LOWORD(v230) = ~(511 - v230);
                      v231 = (char *)&v195[-(v278 >> 9)];
                    }
                    else
                    {
                      v231 = (char *)&v195[(unint64_t)v230 >> 9];
                    }
                    v279 = *(_QWORD *)v231 + 8 * (v230 & 0x1FF);
                    while ((char *)v279 != v202)
                    {
                      v280 = *(_QWORD *)v231;
                      if (v279 == *(_QWORD *)v231)
                      {
                        v281 = *((_QWORD *)v231 - 1);
                        v231 -= 8;
                        v280 = v281;
                        v279 = v281 + 4096;
                      }
                      v283 = *(_QWORD *)(v279 - 8);
                      v279 -= 8;
                      v282 = v283;
                      v284 = (char *)v279;
                      v285 = v231;
                      if (v221)
                      {
                        v286 = v221 + ((v279 - v280) >> 3);
                        if (v286 < 1)
                        {
                          v287 = 511 - v286;
                          LOWORD(v286) = ~(511 - v286);
                          v285 = &v231[-8 * (v287 >> 9)];
                        }
                        else
                        {
                          v285 = &v231[8 * ((unint64_t)v286 >> 9)];
                        }
                        v284 = (char *)(*(_QWORD *)v285 + 8 * (v286 & 0x1FF));
                      }
                      v288 = (_QWORD *)v279;
LABEL_465:
                      v289 = v284;
                      *v288 = *(_QWORD *)v284;
                      if (v284 == v204)
                        v290 = 0;
                      else
                        v290 = ((uint64_t)&v204[-*(_QWORD *)v203] >> 3)
                             + ((v203 - v285) << 6)
                             - ((uint64_t)&v284[-*(_QWORD *)v285] >> 3);
                      v292 = v221 - v290;
                      v291 = v221 == v290;
                      if (v221 >= v290)
                      {
                        v284 = v202;
                        v285 = (char *)v195;
                        if (!v291)
                        {
                          v293 = v292 + ((uint64_t)&v202[-*v195] >> 3);
                          if (v293 < 1)
                          {
                            v295 = 511 - v293;
                            LOWORD(v293) = ~(511 - v293);
                            v285 = (char *)&v195[-(v295 >> 9)];
                          }
                          else
                          {
                            v285 = (char *)&v195[(unint64_t)v293 >> 9];
                          }
LABEL_478:
                          v284 = (char *)(*(_QWORD *)v285 + 8 * (v293 & 0x1FF));
                        }
                      }
                      else if (v221)
                      {
                        v293 = v221 + ((uint64_t)&v289[-*(_QWORD *)v285] >> 3);
                        if (v293 >= 1)
                        {
                          v285 += 8 * ((unint64_t)v293 >> 9);
                          goto LABEL_478;
                        }
                        v294 = 511 - v293;
                        v285 -= 8 * (v294 >> 9);
                        v284 = (char *)(*(_QWORD *)v285 + 8 * (~(_WORD)v294 & 0x1FF));
                      }
                      else
                      {
                        v284 = v289;
                      }
                      v288 = v289;
                      if (v284 == (char *)v279)
                      {
                        *(_QWORD *)v289 = v282;
                        continue;
                      }
                      goto LABEL_465;
                    }
                  }
LABEL_421:
                  if ((void *)v893 == __src[1]
                    || (v253 = (char **)((char *)__src[1] + 8 * (v895 >> 9)),
                        v254 = *v253,
                        v255 = &(*v253)[8 * (v895 & 0x1FF)],
                        v256 = *(_QWORD *)((char *)__src[1] + (((v896 + v895) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v896 + v895) & 0x1FF),
                        v255 == (char *)v256))
                  {
LABEL_430:
                    sub_1C484143C((uint64_t)__src);
                    if ((unint64_t)v922 >= v923)
                    {
                      v264 = 0x8E38E38E38E38E39 * ((v922 - (_BYTE *)v921) >> 3);
                      v265 = v264 + 1;
                      if (v264 + 1 > 0x38E38E38E38E38ELL)
                        goto LABEL_1368;
                      if (0x1C71C71C71C71C72 * ((uint64_t)(v923 - (_QWORD)v921) >> 3) > v265)
                        v265 = 0x1C71C71C71C71C72 * ((uint64_t)(v923 - (_QWORD)v921) >> 3);
                      if (0x8E38E38E38E38E39 * ((uint64_t)(v923 - (_QWORD)v921) >> 3) >= 0x1C71C71C71C71C7)
                        v266 = 0x38E38E38E38E38ELL;
                      else
                        v266 = v265;
                      if (v266)
                      {
                        if (v266 > 0x38E38E38E38E38ELL)
                          goto LABEL_1369;
                        v267 = (char *)operator new(72 * v266);
                      }
                      else
                      {
                        v267 = 0;
                      }
                      v268 = &v267[72 * v266];
                      v269 = sub_1C5AF2AA8((uint64_t)&v267[72 * v264], __b);
                      *(_OWORD *)(v269 + 48) = v927;
                      *(_BYTE *)(v269 + 64) = v928;
                      v263 = (char *)(v269 + 72);
                      v270 = v922;
                      v271 = (char *)v921;
                      if (v922 == v921)
                      {
                        v921 = (void *)v269;
                        v922 = (char *)(v269 + 72);
                        v923 = (unint64_t)v268;
                      }
                      else
                      {
                        v272 = 0;
                        do
                        {
                          v273 = v269 + v272;
                          v274 = &v270[v272];
                          *(_QWORD *)(v273 - 72) = *(_QWORD *)&v270[v272 - 72];
                          *(_QWORD *)(v273 - 64) = *(_QWORD *)&v270[v272 - 64];
                          *(_QWORD *)(v273 - 56) = *(_QWORD *)&v270[v272 - 56];
                          *(_QWORD *)(v273 - 48) = *(_QWORD *)&v270[v272 - 48];
                          *(_OWORD *)(v274 - 56) = 0uLL;
                          v275 = *(_QWORD *)&v270[v272 - 40];
                          *(_OWORD *)(v274 - 72) = 0uLL;
                          *(_QWORD *)(v273 - 40) = v275;
                          *(_QWORD *)(v273 - 32) = *(_QWORD *)&v270[v272 - 32];
                          *((_QWORD *)v274 - 5) = 0;
                          *((_QWORD *)v274 - 4) = 0;
                          v276 = *(_OWORD *)&v270[v272 - 24];
                          *(_BYTE *)(v273 - 8) = v270[v272 - 8];
                          *(_OWORD *)(v273 - 24) = v276;
                          v272 -= 72;
                        }
                        while (&v270[v272] != v271);
                        v270 = (char *)v921;
                        v277 = v922;
                        v921 = (void *)(v269 + v272);
                        v922 = (char *)(v269 + 72);
                        v923 = (unint64_t)v268;
                        while (v277 != v270)
                        {
                          v277 -= 72;
                          sub_1C484143C((uint64_t)v277);
                        }
                      }
                      if (v270)
                        operator delete(v270);
                    }
                    else
                    {
                      v261 = sub_1C5AF2AA8((uint64_t)v922, __b);
                      v262 = v927;
                      *(_BYTE *)(v261 + 64) = v928;
                      *(_OWORD *)(v261 + 48) = v262;
                      v263 = (char *)(v261 + 72);
                    }
                    v922 = v263;
                  }
                  else
                  {
                    v257 = 0;
                    v258 = 0;
                    v259 = 0;
                    while (1)
                    {
                      v259 |= *(_QWORD *)v255 == v879.__r_.__value_.__r.__words[0];
                      v258 |= *(_QWORD *)v255 == v845;
                      v257 |= *(_QWORD *)v255 == v191;
                      if ((v259 & 1) != 0 && (v257 & 1) != 0 && (v258 & 1) == 0)
                        break;
                      v255 += 8;
                      if (v255 - v254 == 4096)
                      {
                        v260 = v253[1];
                        ++v253;
                        v254 = v260;
                        v255 = v260;
                      }
                      if (v255 == (char *)v256)
                        goto LABEL_430;
                    }
                    sub_1C484143C((uint64_t)__src);
                  }
                }
              }
            }
          }
        }
        sub_1C484143C((uint64_t)__b);
        sub_1C484143C((uint64_t)v900);
        v164 += 6;
        continue;
      }
      break;
    }
    MEMORY[0x1CAA32FB4](v857, 8);
    __b[0] = &v869;
    sub_1C5AF3014((void ***)__b);
    if (v904[1] != v904[0])
      free(v904[1]);
    v296 = (char *)v921;
    if (!(954437177 * ((unint64_t)(v922 - (_BYTE *)v921) >> 3)))
    {
      v151 = 0;
      if (!v921)
        goto LABEL_498;
LABEL_494:
      v315 = v922;
      v316 = v296;
      if (v922 != v296)
      {
        do
          v315 = (char *)sub_1C484143C((uint64_t)(v315 - 72));
        while (v315 != v296);
        v316 = v921;
      }
      v922 = v296;
      operator delete(v316);
      goto LABEL_498;
    }
    v297 = v898;
    v298 = (char *)v897;
    if (v898 >= HIDWORD(v898))
    {
      v325 = v897 <= &v920 && (char *)v897 + 48 * v898 > (char *)&v920;
      v326 = v325;
      if (v326 == 1)
        v327 = 0xAAAAAAAAAAAAAAABLL * (((char *)&v920 - (_BYTE *)v897) >> 4);
      else
        v327 = -1;
      __b[0] = 0;
      v298 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v897, v898 + 1, 48, (unint64_t *)__b);
      v328 = (char *)v897;
      if ((_DWORD)v898)
      {
        v329 = (char *)v897 + 48 * v898;
        v330 = v298;
        do
        {
          v331 = *((_QWORD *)v328 + 2);
          *(_OWORD *)v330 = *(_OWORD *)v328;
          *((_QWORD *)v330 + 2) = v331;
          *((_QWORD *)v330 + 3) = 0;
          *((_QWORD *)v330 + 4) = 0;
          *((_QWORD *)v330 + 5) = 0;
          *(_OWORD *)(v330 + 24) = *(_OWORD *)(v328 + 24);
          *((_QWORD *)v330 + 5) = *((_QWORD *)v328 + 5);
          *((_QWORD *)v328 + 3) = 0;
          *((_QWORD *)v328 + 4) = 0;
          *((_QWORD *)v328 + 5) = 0;
          v328 += 48;
          v330 += 48;
        }
        while (v328 != v329);
        v328 = (char *)v897;
        if ((_DWORD)v898)
        {
          v332 = (char *)v897 - 24;
          v333 = 48 * v898;
          do
          {
            sub_1C5AF3084((void **)&v332[v333]);
            v333 -= 48;
          }
          while (v333);
          v328 = (char *)v897;
        }
      }
      v334 = (int)__b[0];
      if (v328 != v899)
        free(v328);
      v897 = v298;
      HIDWORD(v898) = v334;
      v335 = &v298[48 * v327];
      v299 = &v920;
      if (v326)
        v299 = (std::string *)&v298[48 * v327];
      v300 = (void **)(v335 + 24);
      v336 = (void **)(v335 + 32);
      v301 = (void **)&v922;
      if (v326)
        v301 = v336;
      else
        v300 = &v921;
      v297 = v898;
    }
    else
    {
      v299 = &v920;
      v300 = &v921;
      v301 = (void **)&v922;
    }
    v302 = &v298[48 * v297];
    v303 = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
    *((_QWORD *)v302 + 2) = *((_QWORD *)&v299->__r_.__value_.__l + 2);
    *((_QWORD *)v302 + 3) = 0;
    v304 = v302 + 24;
    *((_QWORD *)v302 + 4) = 0;
    v305 = v302 + 32;
    *(_OWORD *)v302 = v303;
    *((_QWORD *)v302 + 5) = 0;
    v306 = v302 + 40;
    v307 = *v300;
    v308 = (char *)*v301;
    v309 = (_BYTE *)*v301 - (_BYTE *)*v300;
    if (*v301 != *v300)
    {
      v310 = 0x8E38E38E38E38E39 * (v309 >> 3);
      if (v310 <= 0x38E38E38E38E38ELL)
      {
        v311 = (char *)operator new(v309);
        v312 = 0;
        *v304 = v311;
        *v305 = v311;
        *v306 = &v311[72 * v310];
        do
        {
          v313 = sub_1C5AF2AA8((uint64_t)&v311[v312], &v307[v312]);
          v314 = *(_OWORD *)&v307[v312 + 48];
          *(_BYTE *)(v313 + 64) = v307[v312 + 64];
          *(_OWORD *)(v313 + 48) = v314;
          v312 += 72;
        }
        while (&v307[v312] != v308);
        *v305 = &v311[v312];
        goto LABEL_491;
      }
LABEL_1368:
      abort();
    }
LABEL_491:
    LODWORD(v898) = v898 + 1;
    v151 = 6;
    v296 = (char *)v921;
    if (v921)
      goto LABEL_494;
LABEL_498:
    v880 = (uint64_t *)&off_1E81944A8;
    if ((__int128 *)v881.i64[1] != (__int128 *)((char *)&v882 + 8))
      free((void *)v881.i64[1]);
    if (v151 == 7)
    {
      v4 = v824;
      v5 = v831;
      v6 = 0uLL;
      goto LABEL_504;
    }
    v4 = v824;
    v5 = v831;
    v6 = 0uLL;
    if (!v151)
    {
LABEL_504:
      v5 = (_QWORD *)v5[1];
      if (v5 == v4)
        break;
      continue;
    }
    break;
  }
  __src[0] = &v895;
  __src[1] = &v895;
  v893 = 32;
  v894 = 0;
  if (!(_DWORD)v898)
    goto LABEL_1359;
  llvm::CodeMetrics::collectEphemeralValues(v819, *(llvm::AssumptionCache **)a1, (llvm::SmallPtrSetImplBase *)__src);
  if (!(_DWORD)v898)
    goto LABEL_1359;
  v337 = v897;
  v818 = (char *)v897 + 48 * v898;
  while (2)
  {
    v338 = *(_OWORD *)v337;
    v858 = v337[2];
    v857 = v338;
    v860 = 0;
    v861 = 0;
    v859 = 0;
    v339 = v337[3];
    v340 = v337[4];
    v820 = v337;
    v341 = v340 - v339;
    if (v340 != v339)
    {
      v342 = 0x8E38E38E38E38E39 * (v341 >> 3);
      if (v342 > 0x38E38E38E38E38ELL)
        goto LABEL_1368;
      v343 = (char *)operator new(v341);
      v344 = 0;
      v859 = v343;
      v860 = v343;
      v861 = &v343[72 * v342];
      do
      {
        v345 = sub_1C5AF2AA8((uint64_t)&v343[v344], (_QWORD *)(v339 + v344));
        v346 = *(_OWORD *)(v339 + v344 + 48);
        *(_BYTE *)(v345 + 64) = *(_BYTE *)(v339 + v344 + 64);
        *(_OWORD *)(v345 + 48) = v346;
        v344 += 72;
      }
      while (v339 + v344 != v340);
      v860 = &v343[v344];
    }
    v347 = *(int8x16_t *)a1;
    v348 = *(_OWORD *)(a1 + 16);
    v349 = __src[1];
    if (__src[1] == __src[0])
    {
      v852 = v856;
      v350 = v856;
      v351 = __src[1];
    }
    else
    {
      *(_OWORD *)__vald = *(_OWORD *)a1;
      v851 = *(_OWORD *)(a1 + 16);
      v800 = v893;
      v350 = malloc_type_malloc(8 * v893, 0x4065EBACuLL);
      if (!v350 && (v800 || (v350 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_1357:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v852 = v350;
      v351 = __src[0];
      v349 = __src[1];
      v348 = v851;
      v347 = *(int8x16_t *)__vald;
    }
    v352 = HIDWORD(v893);
    v853 = v893;
    if (v349 == v351)
      v353 = HIDWORD(v893);
    else
      v353 = v893;
    if (v353)
    {
      v846 = v348;
      *(int8x16_t *)__vale = v347;
      memmove(v350, v349, 8 * v353);
      v347 = *(int8x16_t *)__vale;
      v348 = v846;
      v352 = HIDWORD(v893);
      v350 = v852;
    }
    v854 = v352;
    v855 = v894;
    v881 = vextq_s8(v347, v347, 8uLL);
    v882 = v348;
    v880 = (uint64_t *)&v857;
    v354 = v888;
    v883 = v888;
    if (v350 == v856)
    {
      v884 = v888;
      v355 = v350;
    }
    else
    {
      v354 = malloc_type_malloc(8 * v853, 0x4065EBACuLL);
      if (!v354)
      {
        if (v853)
          goto LABEL_1357;
        v354 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v354)
          goto LABEL_1357;
      }
      v884 = v354;
      v355 = v856;
      v350 = v852;
      v352 = v854;
    }
    v356 = v853;
    v885 = v853;
    if (v350 == v355)
      v356 = v352;
    if (v356)
    {
      memmove(v354, v350, 8 * v356);
      v352 = v854;
      v355 = v856;
      v350 = v852;
    }
    v886 = v352;
    v887 = v855;
    v890 = 0;
    v891 = 0;
    v889 = 0;
    if (v350 != v355)
      free(v350);
    BYTE4(__p) = 0;
    LODWORD(__p) = 0;
    v864 = 0;
    v865 = 0;
    v863 = 0;
    LODWORD(v866) = 0;
    v867 = 0;
    v868 = 0;
    __val = *v880;
    v870 = 0;
    v869 = 0;
    v871 = 0;
    v358 = v880[3];
    v357 = v880[4];
    v847 = v357;
    while (2)
    {
      if (v358 == v357)
      {
        LODWORD(v879.__r_.__value_.__l.__data_) = 0;
        (*(void (**)(_QWORD, uint64_t, std::string *, _QWORD, _QWORD))(**(_QWORD **)v882 + 64))(*(_QWORD *)v882, __val, &v879, 0, 0);
        data = v879.__r_.__value_.__l.__data_;
        if (!LODWORD(v879.__r_.__value_.__l.__data_))
        {
          v401 = (void *)(((unint64_t)*(unsigned int *)(__val + 20) >> 1) & 0x3FFFFFF);
          LODWORD(__b[1]) = 32;
          __b[0] = v401;
          data = sub_1C4F95A34((uint64_t)__b);
          if (LODWORD(__b[1]) >= 0x41)
          {
            if (__b[0])
              MEMORY[0x1CAA32F9C](__b[0], 0x1000C8000313F17);
          }
        }
        v402 = v863 / data;
        v403 = dword_1ED81C620;
        v404 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)&v882 + 1);
        v405 = *****((_QWORD *****)&v882 + 1);
        if (*(_QWORD *)(v405 + 128))
        {
          if (v402 > dword_1ED81C620)
            goto LABEL_640;
        }
        else
        {
          v406 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v405 + 72) + 48))(*(_QWORD *)(v405 + 72));
          if (v402 > v403)
          {
            if (v406)
            {
LABEL_640:
              v407 = *(_QWORD *)(*(_QWORD *)(__val + 40) + 56);
              llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v900, (const llvm::DebugLoc *)(__val + 48));
              v408 = *(_QWORD *)(__val + 40);
              LODWORD(__b[1]) = 10;
              BYTE4(__b[1]) = 2;
              *(_OWORD *)((char *)v926 + 8) = *(_OWORD *)v900;
              *(_QWORD *)&v926[0] = v407;
              *((_QWORD *)&v926[1] + 1) = "dfa-jump-threading";
              *(_QWORD *)&v927 = "NotProfitable";
              *((_QWORD *)&v927 + 1) = 13;
              v928 = 0;
              v929 = 0;
              v930 = v932;
              v931 = 0x400000000;
              v939 = 0;
              v940 = -1;
              v941 = v408;
              __b[0] = &off_1E814E538;
              v900[0] = "Duplication cost exceeds the cost threshold (cost=";
              v900[1] = (void *)50;
              sub_1C53B17B4((uint64_t)&v930, (const void **)v900);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument((std::string *)v900, "Cost", 4uLL, v402);
              v409 = sub_1C47E3888((uint64_t)__b, (uint64_t)v900);
              v920.__r_.__value_.__r.__words[0] = (std::string::size_type)", threshold=";
              v920.__r_.__value_.__l.__size_ = 12;
              sub_1C53B17B4(v409 + 80, (const void **)&v920.__r_.__value_.__l.__data_);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v920, "Threshold", 9uLL, dword_1ED81C620);
              v410 = sub_1C47E3888(v409, (uint64_t)&v920);
              v918[0] = ").";
              v918[1] = (void *)2;
              sub_1C53B17B4(v410 + 80, (const void **)v918);
              sub_1C61998EC((uint64_t)v904, v410);
              v904[0] = &off_1E814E538;
              if (SHIBYTE(v923) < 0)
                operator delete(v921);
              if (SHIBYTE(v920.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v920.__r_.__value_.__l.__data_);
              if (SHIBYTE(v903) < 0)
                operator delete(v901[1]);
              if (SHIBYTE(v901[0]) < 0)
                operator delete(v900[0]);
              __b[0] = &off_1E814E790;
              v411 = (char *)v930;
              if ((_DWORD)v931)
              {
                v412 = (unint64_t)v931 << 6;
                do
                {
                  v413 = (void **)&v411[v412];
                  if (v411[v412 - 17] < 0)
                    operator delete(*(v413 - 5));
                  if (*((char *)v413 - 41) < 0)
                    operator delete(*(v413 - 8));
                  v412 -= 64;
                }
                while (v412);
                v411 = (char *)v930;
              }
              if (v411 != (char *)v932)
                free(v411);
              llvm::OptimizationRemarkEmitter::emit(v404, (llvm::DiagnosticInfoOptimizationBase *)v904);
              v904[0] = &off_1E814E790;
              v414 = (char *)v907;
              if (!v908)
                goto LABEL_1346;
              v415 = (unint64_t)v908 << 6;
              do
              {
                v416 = (void **)&v414[v415];
                if (v414[v415 - 17] < 0)
                  operator delete(*(v416 - 5));
                if (*((char *)v416 - 41) < 0)
                  operator delete(*(v416 - 8));
                v415 -= 64;
              }
              while (v415);
LABEL_1345:
              v414 = (char *)v907;
LABEL_1346:
              if (v414 != (char *)v909)
                free(v414);
            }
LABEL_667:
            sub_1C5AF3394(&v869);
            MEMORY[0x1CAA32FB4](v864, 8);
            if (v402 > v403)
              goto LABEL_1286;
            v904[0] = &v905;
            v904[1] = (void *)0x1000000000;
            v909[22] = 0;
            v909[23] = 0;
            v909[24] = v881.i64[0];
            v909[25] = 0;
            v910 = 0;
            v911 = v915;
            v912 = v915;
            v913 = 8;
            v914 = 0;
            memset(v916, 0, sizeof(v916));
            v917 = 0;
            v417 = v880[1];
            v418 = (_QWORD *)v880[3];
            v419 = (_QWORD *)v880[4];
            while (v418 != v419)
            {
              sub_1C5AF2AA8((uint64_t)__b, v418);
              v420 = *(char **)&v926[0];
              v421 = (char *)__b[1];
              v422 = *(_QWORD *)&v926[0] - (unint64_t)__b[1];
              if (*(void **)&v926[0] == __b[1])
                v423 = 0;
              else
                v423 = ((*(_QWORD *)&v926[0] - (unint64_t)__b[1]) << 6) - 1;
              v424 = *((_QWORD *)&v926[1] + 1);
              v425 = *((_QWORD *)&v926[1] + 1) + *(_QWORD *)&v926[1];
              if (v423 == *((_QWORD *)&v926[1] + 1) + *(_QWORD *)&v926[1])
              {
                if (*(_QWORD *)&v926[1] >= 0x200uLL)
                {
                  *(_QWORD *)&v926[1] -= 512;
                  v426 = (char *)__b[1] + 8;
                  v427 = *(_QWORD *)__b[1];
                  __b[1] = (char *)__b[1] + 8;
                  if (*(_QWORD *)&v926[0] == *((_QWORD *)&v926[0] + 1))
                  {
                    v428 = __b[0];
                    if (v426 <= __b[0])
                    {
                      if (*(void **)&v926[0] == __b[0])
                        v434 = 1;
                      else
                        v434 = (uint64_t)(*(_QWORD *)&v926[0] - (unint64_t)__b[0]) >> 2;
                      if (v434 >> 61)
                        goto LABEL_1369;
                      v435 = (char *)operator new(8 * v434);
                      v436 = v420 - v426;
                      v21 = v420 == v426;
                      v420 = &v435[8 * (v434 >> 2)];
                      if (!v21)
                      {
                        v420 = &v435[8 * (v434 >> 2) + (v436 & 0xFFFFFFFFFFFFFFF8)];
                        v437 = 8 * (v436 >> 3);
                        v438 = &v435[8 * (v434 >> 2)];
                        do
                        {
                          v439 = *(_QWORD *)v426;
                          v426 += 8;
                          *(_QWORD *)v438 = v439;
                          v438 += 8;
                          v437 -= 8;
                        }
                        while (v437);
                      }
                      __b[0] = v435;
                      __b[1] = &v435[8 * (v434 >> 2)];
                      *(_QWORD *)&v926[0] = v420;
                      *((_QWORD *)&v926[0] + 1) = &v435[8 * v434];
                      if (v428)
                      {
                        operator delete(v428);
                        v420 = *(char **)&v926[0];
                      }
                    }
                    else
                    {
                      v429 = (v426 - (char *)__b[0]) >> 3;
                      if (v429 >= -1)
                        v430 = v429 + 1;
                      else
                        v430 = v429 + 2;
                      v431 = &v426[-8 * (v430 >> 1)];
                      v432 = *(_QWORD *)&v926[0] - (_QWORD)v426;
                      if (*(char **)&v926[0] != v426)
                      {
                        memmove(&v426[-8 * (v430 >> 1)], v426, *(_QWORD *)&v926[0] - (_QWORD)v426);
                        v420 = (char *)__b[1];
                      }
                      v433 = &v420[-8 * (v430 >> 1)];
                      v420 = &v431[v432];
                      *(_QWORD *)&v926[0] = &v431[v432];
                      __b[1] = v433;
                    }
                  }
                  *(_QWORD *)v420 = v427;
                  goto LABEL_693;
                }
                if (v422 >= *((_QWORD *)&v926[0] + 1) - (unint64_t)__b[0])
                {
                  if (*((void **)&v926[0] + 1) == __b[0])
                    v448 = 1;
                  else
                    v448 = (uint64_t)(*((_QWORD *)&v926[0] + 1) - (unint64_t)__b[0]) >> 2;
                  v902 = (unint64_t)v926 + 8;
                  if (v448 >> 61)
                    goto LABEL_1369;
                  v900[0] = operator new(8 * v448);
                  v900[1] = (char *)v900[0] + v422;
                  v901[0] = (char *)v900[0] + v422;
                  v901[1] = (char *)v900[0] + 8 * v448;
                  v920.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                  sub_1C61351F0((uint64_t)v900, &v920);
                  for (j = *(_QWORD **)&v926[0]; j != __b[1]; sub_1C6135314(v900, j))
                    --j;
                  v450 = __b[0];
                  *(_OWORD *)__b = *(_OWORD *)v900;
                  v926[0] = *(_OWORD *)v901;
                  if (v450)
                    operator delete(v450);
                }
                else if (*((_QWORD *)&v926[0] + 1) == *(_QWORD *)&v926[0])
                {
                  v900[0] = operator new(0x1000uLL);
                  sub_1C6135314(__b, v900);
                  v440 = *(char **)&v926[0];
                  v441 = (char *)__b[1] + 8;
                  v442 = *(_QWORD *)__b[1];
                  __b[1] = (char *)__b[1] + 8;
                  if (*(_QWORD *)&v926[0] == *((_QWORD *)&v926[0] + 1))
                  {
                    v443 = __b[0];
                    if (v441 <= __b[0])
                    {
                      if (*(void **)&v926[0] == __b[0])
                        v451 = 1;
                      else
                        v451 = (uint64_t)(*(_QWORD *)&v926[0] - (unint64_t)__b[0]) >> 2;
                      if (v451 >> 61)
                        goto LABEL_1369;
                      v452 = (char *)operator new(8 * v451);
                      v453 = v440 - v441;
                      v21 = v440 == v441;
                      v440 = &v452[8 * (v451 >> 2)];
                      if (!v21)
                      {
                        v440 = &v452[8 * (v451 >> 2) + (v453 & 0xFFFFFFFFFFFFFFF8)];
                        v454 = 8 * (v453 >> 3);
                        v455 = &v452[8 * (v451 >> 2)];
                        do
                        {
                          v456 = *(_QWORD *)v441;
                          v441 += 8;
                          *(_QWORD *)v455 = v456;
                          v455 += 8;
                          v454 -= 8;
                        }
                        while (v454);
                      }
                      __b[0] = v452;
                      __b[1] = &v452[8 * (v451 >> 2)];
                      *(_QWORD *)&v926[0] = v440;
                      *((_QWORD *)&v926[0] + 1) = &v452[8 * v451];
                      if (v443)
                      {
                        operator delete(v443);
                        v440 = *(char **)&v926[0];
                      }
                    }
                    else
                    {
                      v444 = (v441 - (char *)__b[0]) >> 3;
                      if (v444 >= -1)
                        v445 = v444 + 1;
                      else
                        v445 = v444 + 2;
                      v446 = &v441[-8 * (v445 >> 1)];
                      v447 = *(_QWORD *)&v926[0] - (_QWORD)v441;
                      if (*(_QWORD *)&v926[0] != (_QWORD)v441)
                      {
                        memmove(&v441[-8 * (v445 >> 1)], v441, *(_QWORD *)&v926[0] - (_QWORD)v441);
                        v441 = (char *)__b[1];
                      }
                      v440 = &v446[v447];
                      *(_QWORD *)&v926[0] = v440;
                      __b[1] = &v441[-8 * (v445 >> 1)];
                    }
                  }
                  *(_QWORD *)v440 = v442;
LABEL_693:
                  *(_QWORD *)&v926[0] += 8;
                }
                else
                {
                  v900[0] = operator new(0x1000uLL);
                  sub_1C61351F0((uint64_t)__b, v900);
                }
                v424 = *((_QWORD *)&v926[1] + 1);
                v421 = (char *)__b[1];
                v425 = *(_QWORD *)&v926[1] + *((_QWORD *)&v926[1] + 1);
              }
              *(_QWORD *)(*(_QWORD *)&v421[(v425 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v425 & 0x1FF)) = v417;
              *((_QWORD *)&v926[1] + 1) = v424 + 1;
              sub_1C5AF2CC4(v418, __b);
              sub_1C484143C((uint64_t)__b);
              v418 += 9;
            }
            v875[1] = 0;
            v875[0] = 0;
            v876 = 0;
            v870 = 0;
            v869 = 0;
            v871 = 0;
            v873 = 0;
            v874 = 0;
            v872 = 0;
            v900[0] = &v902;
            v900[1] = &v902;
            v901[0] = (void *)16;
            LODWORD(v901[1]) = 0;
            v457 = *(_QWORD *)(v417 + 40);
            if (v457 != v417 + 40)
            {
              if (v457)
                v458 = v457 - 24;
              else
                v458 = 0;
              v459 = *(unsigned __int8 *)(v458 + 16);
              v460 = v459 - 29;
              if (v459 != 30)
              {
                v461 = 2;
                switch(v460)
                {
                  case 1:
LABEL_1370:
                    __break(1u);
                    return;
                  case 2:
                    v461 = (*(_DWORD *)(v458 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_1325;
                  case 3:
                  case 9:
                    v461 = (*(_DWORD *)(v458 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_1325;
                  case 4:
                    goto LABEL_734;
                  case 7:
                    v461 = *(_WORD *)(v458 + 18) & 1;
                    goto LABEL_1325;
                  case 8:
                    v461 = 1;
                    goto LABEL_734;
                  case 10:
                    v461 = *(_DWORD *)(v458 + 80) + 1;
LABEL_1325:
                    if (!v461)
                      goto LABEL_763;
                    goto LABEL_734;
                  default:
                    goto LABEL_763;
                }
              }
              if ((*(_DWORD *)(v458 + 20) & 0x7FFFFFF) == 3)
                v461 = 2;
              else
                v461 = 1;
LABEL_734:
              v462 = 0;
              v463 = 0;
              v464 = v461;
              v465 = v458 - 64;
              do
              {
                v466 = *(unsigned __int8 *)(v458 + 16);
                if (v466 != 30)
                  __asm { BR              X9 }
                sub_1C4774094((llvm::SmallPtrSetImplBase *)v900, *(_QWORD *)(v458 - 32 - 32 * v463++));
                v462 += 2;
                v465 += 32;
              }
              while (v464 != v463);
            }
LABEL_763:
            v479 = (_QWORD *)v880[3];
            v822 = (_QWORD *)v880[4];
            if (v479 == v822)
              goto LABEL_1121;
            while (2)
            {
              __vala = v479[6];
              v878 = v479[7];
              sub_1C5AF2AA8((uint64_t)&__p, v479);
              v480 = v863;
              v481 = v866;
              v823 = v479;
              if ((*(_QWORD **)((char *)v863 + ((v866 >> 6) & 0x3FFFFFFFFFFFFF8)))[v866 & 0x1FF] == v878)
              {
                v481 = v866 + 1;
                --v867;
                v866 = v481;
                if (v481 >= 0x400)
                {
                  operator delete(*v863);
                  v480 = v863 + 1;
                  v481 = v866 - 512;
                  ++v863;
                  v866 -= 512;
                }
              }
              v482 = &v480[v481 >> 9];
              v483 = v864;
              if (v864 == v480)
              {
                v484 = 0;
                v487 = 0;
                v486 = &v480[(v867 + v481) >> 9];
              }
              else
              {
                v484 = (char *)*v482 + 8 * (v481 & 0x1FF);
                v485 = v867 + v481;
                v486 = &v480[v485 >> 9];
                v487 = (char *)*v486 + 8 * (v485 & 0x1FF);
              }
              v488 = sub_1C5AF2EE8(v482, v484, (_QWORD **)v486, v487, &v878);
              v489 = v488;
              v491 = v490;
              v492 = (uint64_t)v490 - *v488;
              v493 = v492 >> 3;
              if (v492 < 9)
              {
                v325 = v493 > 512;
                v495 = 512 - v493;
                v496 = 1023 - v493;
                if (!v325)
                  v496 = v495;
                v497 = v488[-(v496 >> 9)];
                v498 = v495 & 0x1FF;
                v499 = -v495;
                v241 = v499 < 0;
                v500 = v499 & 0x1FF;
                if (v241)
                  v501 = v498;
                else
                  v501 = -v500;
                v494 = (uint64_t *)(v497 + 8 * (511 - v501));
              }
              else
              {
                v494 = (uint64_t *)(*(_QWORD *)((char *)v488 + (((unint64_t)(v493 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v493 - 1) & 0x1FF));
              }
              v502 = *v494;
              while (2)
              {
                if (v483 == v480)
                  v503 = 0;
                else
                  v503 = *(uint64_t *)((char *)v480 + (((v866 + v867) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v866 + v867) & 0x1FF);
                if (v491 != (uint64_t *)v503)
                {
                  v829 = (llvm::BasicBlock *)v502;
                  v877 = 0;
                  v504 = *v491;
                  v877 = v504;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)v900, v504);
                  v505 = (llvm::BasicBlock *)sub_1C5AF30DC(v504, __vala, (uint64_t)v875);
                  if (v505)
                  {
                    v502 = (uint64_t)v505;
                    sub_1C5AF3408(v829, v504, v505, (uint64_t)v904);
LABEL_1039:
                    if ((uint64_t *)((char *)++v491 - *v489) == (uint64_t *)4096)
                    {
                      v657 = (uint64_t *)v489[1];
                      ++v489;
                      v491 = v657;
                    }
                    v480 = v863;
                    v483 = v864;
                    continue;
                  }
                  LODWORD(v920.__r_.__value_.__r.__words[2]) = 128;
                  v506 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
                  *(_OWORD *)&v920.__r_.__value_.__l.__data_ = (unint64_t)v506;
                  if (LODWORD(v920.__r_.__value_.__r.__words[2]))
                  {
                    v507 = (unint64_t)LODWORD(v920.__r_.__value_.__r.__words[2]) << 6;
                    v508 = v506 + 16;
                    do
                    {
                      *v508 = 0;
                      v508[1] = -4096;
                      *(v508 - 2) = &unk_1E814DA10;
                      *(v508 - 1) = 2;
                      v508[2] = 0;
                      v508 += 8;
                      v507 -= 64;
                    }
                    while (v507);
                  }
                  LOBYTE(v921) = 0;
                  v924 = 0;
                  std::to_string(&v879, __vala);
                  v509 = std::string::insert(&v879, 0, ".jt");
                  v510 = v509->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v918 = *(_OWORD *)&v509->__r_.__value_.__l.__data_;
                  v919 = v510;
                  v509->__r_.__value_.__l.__size_ = 0;
                  v509->__r_.__value_.__r.__words[2] = 0;
                  v509->__r_.__value_.__r.__words[0] = 0;
                  LOWORD(v926[1]) = 260;
                  __b[0] = v918;
                  v511 = (uint64_t *)llvm::CloneBasicBlock((uint64_t ***)v504, (uint64_t)&v920, (uint64_t)__b, *(_QWORD *)(v504 + 56), 0, 0);
                  if (SHIBYTE(v919) < 0)
                    operator delete(v918[0]);
                  if (SHIBYTE(v879.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v879.__r_.__value_.__l.__data_);
                  sub_1C4FCEAA0(*(_QWORD *)(v504 + 56) + 72, *(uint64_t **)(v504 + 32), v511[7] + 72, v511 + 3);
                  for (k = (uint64_t *)v511[6]; k != v511 + 5; k = (uint64_t *)k[1])
                  {
                    if (k)
                      v513 = (uint64_t)(k - 3);
                    else
                      v513 = 0;
                    if (*(_BYTE *)(v513 + 16) != 83)
                    {
                      v514 = (_QWORD *)operator new();
                      *(_DWORD *)v514 = 3;
                      v514[1] = 0;
                      *((_DWORD *)v514 + 4) = 0;
                      v514[5] = &v920;
                      v514[3] = v514 + 5;
                      v514[6] = 0;
                      v514[4] = 0x200000001;
                      v514[9] = v514 + 11;
                      v514[10] = 0x400000000;
                      v514[23] = v514 + 25;
                      v514[24] = 0x100000000;
                      v514[27] = v514 + 29;
                      v514[28] = 0x1000000000;
                      v918[0] = v514;
                      __b[0] = v514;
                      sub_1C5FD706C((uint64_t)v514, (uint64_t ***)v513);
                      sub_1C5FD3718((uint64_t *)__b, v515);
                      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)v918, v516);
                      v517 = sub_1C4D9F8B4(v513);
                      if (k)
                      {
                        if (v517)
                          llvm::AssumptionCache::registerAssumption((char **)v881.i64[1], v513);
                      }
                    }
                  }
                  v827 = v489;
                  v828 = v491;
                  v848 = (llvm::BasicBlock *)v511;
                  v825 = v511 + 5;
                  if (v880[1] == v504)
                  {
                    v544 = sub_1C5AF3700(*v880, __vala);
                    v526 = (uint64_t *)operator new(8uLL);
                    *v526 = v544;
                    v525 = v526 + 1;
                    v545 = sub_1C5AF30DC(v544, __vala, (uint64_t)v875);
                    if (v545)
                    {
                      v546 = v545;
                      v547 = (uint64_t *)operator new(0x10uLL);
                      *v547 = *v526;
                      v547[1] = v546;
                      v525 = v547 + 2;
                      operator delete(v526);
                      v526 = v547;
                    }
LABEL_856:
                    v548 = v526;
                    do
                    {
                      v549 = *(_QWORD *)(*v548 + 48);
                      v550 = (_DWORD *)(v549 - 24);
                      if (v549)
                        v551 = v549 - 24;
                      else
                        v551 = 0;
                      if (v549 && *(_BYTE *)(v551 + 16) == 83)
                      {
                        do
                        {
                          v552 = v550[5];
                          v553 = v552 & 0x7FFFFFF;
                          if ((v552 & 0x7FFFFFF) != 0)
                          {
                            v554 = 0;
                            while (1)
                            {
                              v555 = &v550[-8 * v553];
                              if ((v552 & 0x40000000) != 0)
                                v555 = (_DWORD *)*((_QWORD *)v550 - 1);
                              if (*(_QWORD *)&v555[8 * v550[15] + 2 * v554] == v504)
                                break;
                              if (v553 == ++v554)
                                goto LABEL_868;
                            }
                          }
                          else
                          {
LABEL_868:
                            LODWORD(v554) = -1;
                          }
                          if ((v552 & 0x40000000) != 0)
                            v556 = (_DWORD *)*((_QWORD *)v550 - 1);
                          else
                            v556 = &v550[-8 * v553];
                          v557 = *(_QWORD *)&v556[8 * v554];
                          if (v557)
                          {
                            if (*(unsigned __int8 *)(v557 + 16) >= 0x15u)
                            {
                              __b[1] = (void *)2;
                              *(_QWORD *)&v926[0] = 0;
                              *((_QWORD *)&v926[0] + 1) = v557;
                              if (v557 != -8192 && v557 != -4096 && v557 != 0)
                                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__b[1]);
                              __b[0] = &unk_1E814DA10;
                              *(_QWORD *)&v926[1] = &v920;
                              v559 = sub_1C52E2ED8((uint64_t)&v920, __b);
                              if (*((_QWORD *)&v926[0] + 1) != -8192
                                && *((_QWORD *)&v926[0] + 1) != -4096
                                && *((_QWORD *)&v926[0] + 1))
                              {
                                v560 = (unint64_t)__b[1] & 0xFFFFFFFFFFFFFFF8;
                                *(_QWORD *)((unint64_t)__b[1] & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)&v926[0];
                                if (*(_QWORD *)&v926[0])
                                {
                                  **(_QWORD **)&v926[0] = **(_QWORD **)&v926[0] & 7 | v560;
                                }
                                else
                                {
                                  v561 = *((_QWORD *)&v926[0] + 1);
                                  v562 = (int32x2_t *)****((_QWORD ****)&v926[0] + 1);
                                  v563 = (unint64_t)v562[303];
                                  if (v563 <= v560)
                                  {
                                    v564 = v562[305].u32[0];
                                    if (v563 + 16 * v564 > v560)
                                    {
                                      v565 = v564 - 1;
                                      LODWORD(v566) = v565 & ((DWORD2(v926[0]) >> 4) ^ (DWORD2(v926[0]) >> 9));
                                      v567 = (uint64_t *)(v563 + 16 * v566);
                                      v568 = *v567;
                                      if (*((_QWORD *)&v926[0] + 1) == *v567)
                                      {
LABEL_890:
                                        *v567 = -8192;
                                        v562[304] = vadd_s32(v562[304], (int32x2_t)0x1FFFFFFFFLL);
                                        v561 = *((_QWORD *)&v926[0] + 1);
                                      }
                                      else
                                      {
                                        v569 = 1;
                                        while (v568 != -4096)
                                        {
                                          v570 = v566 + v569++;
                                          v566 = v570 & v565;
                                          v568 = *(_QWORD *)(v563 + 16 * v566);
                                          if (*((_QWORD *)&v926[0] + 1) == v568)
                                          {
                                            v567 = (uint64_t *)(v563 + 16 * v566);
                                            goto LABEL_890;
                                          }
                                        }
                                      }
                                      *(_BYTE *)(v561 + 17) &= ~1u;
                                    }
                                  }
                                }
                              }
                              if (v559[7])
                                v557 = v559[7];
                            }
                            sub_1C477667C((llvm::PHINode *)v550, v557, (uint64_t)v848);
                          }
                          v549 = *(_QWORD *)(v549 + 8);
                          v571 = v549 - 24;
                          if (!v549)
                            v571 = 0;
                          v572 = *(unsigned __int8 *)(v571 + 16);
                          if (v572 == 83)
                            v550 = (_DWORD *)v571;
                          else
                            v550 = 0;
                        }
                        while (v549 && v572 == 83);
                      }
                      ++v548;
                    }
                    while (v548 != v525);
LABEL_906:
                    v489 = v827;
                    if (v526)
                      operator delete(v526);
                  }
                  else
                  {
                    v518 = *(_QWORD *)(v504 + 40);
                    if (v518 != v504 + 40)
                    {
                      if (v518)
                        v519 = v518 - 24;
                      else
                        v519 = 0;
                      v520 = *(unsigned __int8 *)(v519 + 16);
                      v521 = v520 - 29;
                      if (v520 != 30)
                      {
                        v522 = 2;
                        switch(v521)
                        {
                          case 1:
                            goto LABEL_1370;
                          case 2:
                            v522 = (*(_DWORD *)(v519 + 20) >> 1) & 0x3FFFFFF;
                            goto LABEL_1051;
                          case 3:
                          case 9:
                            v522 = (*(_DWORD *)(v519 + 20) & 0x7FFFFFF) - 1;
                            goto LABEL_1051;
                          case 4:
                            goto LABEL_811;
                          case 7:
                            v522 = *(_WORD *)(v519 + 18) & 1;
                            goto LABEL_1051;
                          case 8:
                            v522 = 1;
                            goto LABEL_811;
                          case 10:
                            v522 = *(_DWORD *)(v519 + 80) + 1;
LABEL_1051:
                            if (!v522)
                              goto LABEL_908;
                            goto LABEL_811;
                          default:
                            goto LABEL_908;
                        }
                      }
                      if ((*(_DWORD *)(v519 + 20) & 0x7FFFFFF) == 3)
                        v522 = 2;
                      else
                        v522 = 1;
LABEL_811:
                      v523 = 0;
                      v524 = 0;
                      v525 = 0;
                      v526 = 0;
                      v832 = v522;
                      while (1)
                      {
                        v527 = *(unsigned __int8 *)(v519 + 16);
                        if (v527 != 30)
                          __asm { BR              X9 }
                        v528 = *(_QWORD *)(v519 - 32 - 32 * v523);
                        if (v525 >= (uint64_t *)v524)
                        {
                          v530 = v525 - v526;
                          v531 = v530 + 1;
                          if ((unint64_t)(v530 + 1) >> 61)
                            goto LABEL_1368;
                          if ((v524 - (char *)v526) >> 2 > v531)
                            v531 = (v524 - (char *)v526) >> 2;
                          if ((unint64_t)(v524 - (char *)v526) >= 0x7FFFFFFFFFFFFFF8)
                            v532 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v532 = v531;
                          if (v532)
                          {
                            if (v532 >> 61)
                              goto LABEL_1369;
                            v533 = (char *)operator new(8 * v532);
                          }
                          else
                          {
                            v533 = 0;
                          }
                          v534 = (uint64_t *)&v533[8 * v530];
                          *v534 = v528;
                          v529 = v534 + 1;
                          if (v525 != v526)
                          {
                            do
                            {
                              v535 = *--v525;
                              *--v534 = v535;
                            }
                            while (v525 != v526);
                            v525 = v526;
                          }
                          v526 = v534;
                          v524 = &v533[8 * v532];
                          if (v525)
                            operator delete(v525);
                        }
                        else
                        {
                          *v525 = v528;
                          v529 = v525 + 1;
                        }
                        v536 = sub_1C5AF30DC(v528, __vala, (uint64_t)v875);
                        if (v536)
                        {
                          v537 = v536;
                          if (v529 >= (uint64_t *)v524)
                          {
                            v538 = v529 - v526;
                            v539 = v538 + 1;
                            if ((unint64_t)(v538 + 1) >> 61)
                              goto LABEL_1368;
                            if ((v524 - (char *)v526) >> 2 > v539)
                              v539 = (v524 - (char *)v526) >> 2;
                            if ((unint64_t)(v524 - (char *)v526) >= 0x7FFFFFFFFFFFFFF8)
                              v540 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v540 = v539;
                            if (v540)
                            {
                              if (v540 >> 61)
                                goto LABEL_1369;
                              v541 = (char *)operator new(8 * v540);
                            }
                            else
                            {
                              v541 = 0;
                            }
                            v542 = (uint64_t *)&v541[8 * v538];
                            v524 = &v541[8 * v540];
                            *v542 = v537;
                            v525 = v542 + 1;
                            if (v529 == v526)
                              goto LABEL_847;
                            do
                            {
                              v543 = *--v529;
                              *--v542 = v543;
                            }
                            while (v529 != v526);
                            if (v526)
LABEL_847:
                              operator delete(v526);
                            v526 = v542;
                            goto LABEL_849;
                          }
                          *v529++ = v536;
                        }
                        v525 = v529;
LABEL_849:
                        if (++v523 == v832)
                        {
                          if (v526 == v525)
                            goto LABEL_906;
                          goto LABEL_856;
                        }
                      }
                    }
                  }
LABEL_908:
                  v502 = (uint64_t)v848;
                  sub_1C5AF3408(v829, v504, v848, (uint64_t)v904);
                  __b[0] = v926;
                  __b[1] = (void *)0x300000000;
                  v573 = v920.__r_.__value_.__r.__words[1];
                  if (LODWORD(v920.__r_.__value_.__r.__words[1]) >= 4)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__b, (uint64_t)v926, LODWORD(v920.__r_.__value_.__r.__words[1]), 16);
                    v573 = v920.__r_.__value_.__r.__words[1];
                  }
                  v574 = v920.__r_.__value_.__r.__words[0]
                       + ((unint64_t)LODWORD(v920.__r_.__value_.__r.__words[2]) << 6);
                  if (v573)
                  {
                    v491 = v828;
                    if (LODWORD(v920.__r_.__value_.__r.__words[2]))
                    {
                      v575 = (unint64_t)LODWORD(v920.__r_.__value_.__r.__words[2]) << 6;
                      v576 = v920.__r_.__value_.__r.__words[0];
                      while ((*(_QWORD *)(v576 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v576 += 64;
                        v575 -= 64;
                        if (!v575)
                        {
                          v576 = v920.__r_.__value_.__r.__words[0]
                               + ((unint64_t)LODWORD(v920.__r_.__value_.__r.__words[2]) << 6);
                          break;
                        }
                      }
                    }
                    else
                    {
                      v576 = v920.__r_.__value_.__r.__words[0];
                    }
                  }
                  else
                  {
                    v576 = v920.__r_.__value_.__r.__words[0]
                         + ((unint64_t)LODWORD(v920.__r_.__value_.__r.__words[2]) << 6);
                    v491 = v828;
                  }
                  v577 = v920.__r_.__value_.__r.__words[0]
                       + ((unint64_t)LODWORD(v920.__r_.__value_.__r.__words[2]) << 6);
LABEL_918:
                  while (v576 != v577)
                  {
                    v578 = *(_QWORD *)(v576 + 24);
                    v579 = *(unsigned __int8 *)(v578 + 16);
                    if (v578)
                      v580 = v579 >= 0x1C;
                    else
                      v580 = 0;
                    if (v580)
                    {
                      v581 = *(_QWORD *)(v576 + 56);
                      v582 = (v579 & 0xFE) == 0x1E || v581 == 0;
                      if (!v582 && *(unsigned __int8 *)(v581 + 16) >= 0x1Cu)
                      {
                        v583 = LODWORD(__b[1]);
                        if (LODWORD(__b[1]) >= (unint64_t)HIDWORD(__b[1]))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__b, (uint64_t)v926, LODWORD(__b[1]) + 1, 16);
                          v583 = LODWORD(__b[1]);
                        }
                        v584 = (char *)__b[0] + 16 * v583;
                        *v584 = v578;
                        v584[1] = v581;
                        ++LODWORD(__b[1]);
                      }
                    }
                    v585 = v576 + 64;
                    v576 = v574;
                    if (v585 != v574)
                    {
                      v576 = v585;
                      while ((*(_QWORD *)(v576 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v576 += 64;
                        if (v576 == v574)
                        {
                          v576 = v574;
                          goto LABEL_918;
                        }
                      }
                    }
                  }
                  v586 = 126 - 2 * __clz(LODWORD(__b[1]));
                  if (LODWORD(__b[1]))
                    v587 = v586;
                  else
                    v587 = 0;
                  sub_1C5AF37B0((uint64_t)__b[0], (char *)__b[0] + 16 * LODWORD(__b[1]), v587, 1);
                  v588 = (uint64_t *)__b[0];
                  v589 = (uint64_t *)((char *)__b[0] + 16 * LODWORD(__b[1]));
                  if (LODWORD(__b[1]))
                  {
                    do
                    {
                      v590 = (char **)sub_1C6312218((uint64_t)&v869, v588);
                      v591 = v590;
                      v593 = v590[1];
                      v592 = (unint64_t)v590[2];
                      if ((unint64_t)v593 >= v592)
                      {
                        v595 = *v590;
                        v596 = (v593 - *v590) >> 3;
                        v597 = v596 + 1;
                        if ((unint64_t)(v596 + 1) >> 61)
                          goto LABEL_1368;
                        v598 = v592 - (_QWORD)v595;
                        if (v598 >> 2 > v597)
                          v597 = v598 >> 2;
                        if ((unint64_t)v598 >= 0x7FFFFFFFFFFFFFF8)
                          v599 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v599 = v597;
                        if (v599)
                        {
                          if (v599 >> 61)
                            goto LABEL_1369;
                          v600 = (char *)operator new(8 * v599);
                        }
                        else
                        {
                          v600 = 0;
                        }
                        v601 = &v600[8 * v596];
                        *(_QWORD *)v601 = v588[1];
                        v594 = v601 + 8;
                        if (v593 == v595)
                        {
                          v491 = v828;
                        }
                        else
                        {
                          v491 = v828;
                          do
                          {
                            v602 = *((_QWORD *)v593 - 1);
                            v593 -= 8;
                            *((_QWORD *)v601 - 1) = v602;
                            v601 -= 8;
                          }
                          while (v593 != v595);
                          v593 = *v591;
                        }
                        *v591 = v601;
                        v591[1] = v594;
                        v591[2] = &v600[8 * v599];
                        if (v593)
                          operator delete(v593);
                        v502 = (uint64_t)v848;
                      }
                      else
                      {
                        *(_QWORD *)v593 = v588[1];
                        v594 = v593 + 8;
                      }
                      v591[1] = v594;
                      v588 += 2;
                    }
                    while (v588 != v589);
                    v588 = (uint64_t *)__b[0];
                  }
                  if (v588 != (uint64_t *)v926)
                    free(v588);
                  __b[0] = &v926[1];
                  __b[1] = &v926[1];
                  *(_QWORD *)&v926[0] = 4;
                  DWORD2(v926[0]) = 0;
                  v603 = (_QWORD *)*v825;
                  if ((_QWORD *)*v825 != v825)
                  {
                    if (v603)
                      v604 = v603 - 3;
                    else
                      v604 = 0;
                    v605 = *((unsigned __int8 *)v604 + 16);
                    v606 = v605 - 29;
                    if (v605 != 30)
                    {
                      v607 = 2;
                      switch(v606)
                      {
                        case 1:
                          goto LABEL_1370;
                        case 2:
                          v607 = (*((_DWORD *)v604 + 5) >> 1) & 0x3FFFFFF;
                          goto LABEL_1047;
                        case 3:
                        case 9:
                          v607 = (*((_DWORD *)v604 + 5) & 0x7FFFFFF) - 1;
                          goto LABEL_1047;
                        case 4:
                          goto LABEL_973;
                        case 7:
                          v607 = *((_WORD *)v604 + 9) & 1;
                          goto LABEL_1047;
                        case 8:
                          v607 = 1;
                          goto LABEL_973;
                        case 10:
                          v607 = *((_DWORD *)v604 + 20) + 1;
LABEL_1047:
                          if (!v607)
                            goto LABEL_980;
                          goto LABEL_973;
                        default:
                          goto LABEL_980;
                      }
                    }
                    v607 = (*((_DWORD *)v604 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_973:
                    v608 = 0;
                    v609 = 0;
                    v610 = v607;
                    v611 = v604 - 8;
                    do
                    {
                      v612 = *((unsigned __int8 *)v604 + 16);
                      if (v612 != 30)
                        __asm { BR              X9 }
                      v613 = v604[-4 * v609 - 4];
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)__b, v613);
                      if (v614)
                      {
                        v918[0] = v848;
                        v918[1] = (void *)(v613 & 0xFFFFFFFFFFFFFFFBLL);
                        llvm::DomTreeUpdater::applyUpdates((uint64_t)v904, (unint64_t *)v918, 1);
                      }
                      ++v609;
                      v608 += 2;
                      v611 += 4;
                    }
                    while (v610 != v609);
                    v489 = v827;
                    v502 = (uint64_t)v848;
                    if (__b[1] != __b[0])
                    {
                      if (LODWORD(v926[0]) >= 0x21
                        && (4 * (DWORD1(v926[0]) - DWORD2(v926[0]))) < LODWORD(v926[0]))
                      {
                        free(__b[1]);
                        v658 = 1 << (33 - __clz(DWORD1(v926[0]) - DWORD2(v926[0]) - 1));
                        v325 = (DWORD1(v926[0]) - DWORD2(v926[0])) > 0x10;
                        DWORD2(v926[0]) = 0;
                        if (v325)
                          v659 = v658;
                        else
                          v659 = 32;
                        *(_QWORD *)&v926[0] = v659;
                        v660 = malloc_type_malloc(8 * v659, 0x4065EBACuLL);
                        if (!v660)
                          goto LABEL_1357;
                        __b[1] = v660;
                        memset(v660, 255, 8 * LODWORD(v926[0]));
                        goto LABEL_981;
                      }
                      memset(__b[1], 255, 8 * LODWORD(v926[0]));
                    }
                  }
LABEL_980:
                  *(_QWORD *)((char *)v926 + 4) = 0;
LABEL_981:
                  if (__b[1] != __b[0])
                    free(__b[1]);
                  if (v924)
                  {
                    sub_1C4E43068((uint64_t)&v921);
                    MEMORY[0x1CAA32FB4](v921, 8);
                    v924 = 0;
                  }
                  v615 = (_QWORD *)v920.__r_.__value_.__r.__words[0];
                  if (LODWORD(v920.__r_.__value_.__r.__words[2]))
                  {
                    v616 = v920.__r_.__value_.__r.__words[0]
                         + ((unint64_t)LODWORD(v920.__r_.__value_.__r.__words[2]) << 6);
                    do
                    {
                      v617 = v615[3];
                      if ((v617 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      {
                        v618 = v615[7];
                        if (v618)
                        {
                          if (v618 != -8192 && v618 != -4096)
                          {
                            v619 = v615[5] & 0xFFFFFFFFFFFFFFF8;
                            *(_QWORD *)v619 = v615[6];
                            v620 = (unint64_t *)v615[6];
                            if (v620)
                            {
                              *v620 = *v620 & 7 | v619;
                            }
                            else
                            {
                              v621 = v615[7];
                              v622 = ***(int32x2_t ****)v621;
                              v623 = (unint64_t)v622[303];
                              if (v623 <= v619)
                              {
                                v624 = v622[305].u32[0];
                                if (v623 + 16 * v624 > v619)
                                {
                                  v625 = v624 - 1;
                                  LODWORD(v626) = v625 & ((v621 >> 4) ^ (v621 >> 9));
                                  v627 = (uint64_t *)(v623 + 16 * v626);
                                  v628 = *v627;
                                  if (v621 == *v627)
                                  {
LABEL_999:
                                    *v627 = -8192;
                                    v622[304] = vadd_s32(v622[304], (int32x2_t)0x1FFFFFFFFLL);
                                    v621 = v615[7];
                                  }
                                  else
                                  {
                                    v629 = 1;
                                    while (v628 != -4096)
                                    {
                                      v630 = v626 + v629++;
                                      v626 = v630 & v625;
                                      v628 = *(_QWORD *)(v623 + 16 * v626);
                                      if (v621 == v628)
                                      {
                                        v627 = (uint64_t *)(v623 + 16 * v626);
                                        goto LABEL_999;
                                      }
                                    }
                                  }
                                  *(_BYTE *)(v621 + 17) &= ~1u;
                                }
                              }
                            }
                            v617 = v615[3];
                          }
                        }
                      }
                      if (v617 != -4096 && v617 != -8192 && v617 != 0)
                      {
                        v632 = v615[1] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v632 = v615[2];
                        v633 = (unint64_t *)v615[2];
                        if (v633)
                        {
                          *v633 = *v633 & 7 | v632;
                        }
                        else
                        {
                          v634 = v615[3];
                          v635 = ***(int32x2_t ****)v634;
                          v636 = (unint64_t)v635[303];
                          if (v636 <= v632)
                          {
                            v637 = v635[305].u32[0];
                            if (v636 + 16 * v637 > v632)
                            {
                              v638 = v637 - 1;
                              LODWORD(v639) = v638 & ((v634 >> 4) ^ (v634 >> 9));
                              v640 = (uint64_t *)(v636 + 16 * v639);
                              v641 = *v640;
                              if (v634 == *v640)
                              {
LABEL_1018:
                                *v640 = -8192;
                                v635[304] = vadd_s32(v635[304], (int32x2_t)0x1FFFFFFFFLL);
                                v634 = v615[3];
                              }
                              else
                              {
                                v642 = 1;
                                while (v641 != -4096)
                                {
                                  v643 = v639 + v642++;
                                  v639 = v643 & v638;
                                  v641 = *(_QWORD *)(v636 + 16 * v639);
                                  if (v634 == v641)
                                  {
                                    v640 = (uint64_t *)(v636 + 16 * v639);
                                    goto LABEL_1018;
                                  }
                                }
                              }
                              *(_BYTE *)(v634 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      v615 += 8;
                    }
                    while (v615 != (_QWORD *)v616);
                    v615 = (_QWORD *)v920.__r_.__value_.__r.__words[0];
                  }
                  MEMORY[0x1CAA32FB4](v615, 8);
                  v644 = sub_1C5AF3194((uint64_t)v875, &v877);
                  v645 = v644;
                  v647 = (uint64_t *)v644[1];
                  v646 = v644[2];
                  if ((unint64_t)v647 >= v646)
                  {
                    v649 = (uint64_t *)*v644;
                    v650 = ((uint64_t)v647 - *v644) >> 4;
                    v651 = v650 + 1;
                    if ((unint64_t)(v650 + 1) >> 60)
                      goto LABEL_1368;
                    v652 = v646 - (_QWORD)v649;
                    if (v652 >> 3 > v651)
                      v651 = v652 >> 3;
                    if ((unint64_t)v652 >= 0x7FFFFFFFFFFFFFF0)
                      v653 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v653 = v651;
                    if (v653)
                    {
                      if (v653 >> 60)
                        goto LABEL_1369;
                      v654 = (char *)operator new(16 * v653);
                    }
                    else
                    {
                      v654 = 0;
                    }
                    v655 = (uint64_t *)&v654[16 * v650];
                    *v655 = v502;
                    v655[1] = __vala;
                    v656 = v655;
                    if (v647 != v649)
                    {
                      do
                      {
                        *((_OWORD *)v656 - 1) = *((_OWORD *)v647 - 1);
                        v656 -= 2;
                        v647 -= 2;
                      }
                      while (v647 != v649);
                      v647 = (uint64_t *)*v645;
                    }
                    v648 = v655 + 2;
                    *v645 = (uint64_t)v656;
                    v645[1] = (uint64_t)(v655 + 2);
                    v645[2] = (uint64_t)&v654[16 * v653];
                    if (v647)
                      operator delete(v647);
                  }
                  else
                  {
                    *v647 = v502;
                    v647[1] = __vala;
                    v648 = v647 + 2;
                  }
                  v645[1] = (uint64_t)v648;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)v900, v502);
                  goto LABEL_1039;
                }
                break;
              }
              sub_1C484143C((uint64_t)&__p);
              v479 = v823 + 9;
              if (v823 + 9 != v822)
                continue;
              break;
            }
            v661 = (_QWORD *)v880[3];
            v662 = (_QWORD *)v880[4];
            for (m = v662; v661 != v662; v661 += 9)
            {
              v663 = v661[6];
              v664 = v661[5] + v661[4] - 1;
              v665 = sub_1C5AF30DC(*(_QWORD *)(*(_QWORD *)(v661[1] + ((v664 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v664 & 0x1FF)), v663, (uint64_t)v875);
              v666 = *(_QWORD *)(v665 + 40);
              if (v666)
                v667 = v666 - 24;
              else
                v667 = 0;
              v668 = *(unsigned __int8 *)(v667 + 16);
              if ((v668 - 29) >= 0xB)
                v669 = 0;
              else
                v669 = v667;
              if (*(_BYTE *)(v669 + 16) == 31)
              {
                v670 = (llvm::BasicBlock *)v665;
                v671 = sub_1C5AF3700(v669, v663);
                v672 = (llvm::BasicBlock *)v671;
                __b[0] = &v926[1];
                __b[1] = &v926[1];
                *(_QWORD *)&v926[0] = 4;
                DWORD2(v926[0]) = 0;
                v833 = v669;
                __valb = v661;
                if (v668 == 30)
                {
                  if ((*(_DWORD *)(v667 + 20) & 0x7FFFFFF) == 3)
                    v673 = 2;
                  else
                    v673 = 1;
LABEL_1080:
                  v674 = 0;
                  v675 = 0;
                  v676 = 0;
                  v677 = 0;
                  v678 = v673;
                  v849 = (llvm::BasicBlock *)v671;
                  while (1)
                  {
                    v679 = *(unsigned __int8 *)(v667 + 16);
                    if (v679 != 30)
                      __asm { BR              X9 }
                    v680 = (uint64_t *)(v667 - 32 - 32 * v674);
                    v681 = *v680;
                    if ((llvm::BasicBlock *)*v680 == v672
                      || (sub_1C4774094((llvm::SmallPtrSetImplBase *)__b, *v680), !v682))
                    {
                      v684 = v676;
                    }
                    else
                    {
                      v683 = v681 | 4;
                      if (v676 >= v675)
                      {
                        v685 = v670;
                        v686 = ((char *)v676 - (char *)v677) >> 4;
                        v687 = v686 + 1;
                        if ((unint64_t)(v686 + 1) >> 60)
                          goto LABEL_1368;
                        if (v675 - v677 > v687)
                          v687 = v675 - v677;
                        if ((unint64_t)((char *)v675 - (char *)v677) >= 0x7FFFFFFFFFFFFFF0)
                          v688 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v688 = v687;
                        if (v688)
                        {
                          if (v688 >> 60)
                            goto LABEL_1369;
                          v689 = (char *)operator new(16 * v688);
                        }
                        else
                        {
                          v689 = 0;
                        }
                        v690 = (unint64_t *)&v689[16 * v686];
                        v670 = v685;
                        *v690 = (unint64_t)v685;
                        v690[1] = v683;
                        if (v676 == v677)
                        {
                          v677 = v690;
                          v672 = v849;
                        }
                        else
                        {
                          v691 = v690;
                          v672 = v849;
                          do
                          {
                            *((_OWORD *)v691 - 1) = *((_OWORD *)v676 - 1);
                            v691 -= 2;
                            v676 -= 2;
                          }
                          while (v676 != v677);
                          v676 = v677;
                          v677 = v691;
                        }
                        v675 = (unint64_t *)&v689[16 * v688];
                        v684 = v690 + 2;
                        if (v676)
                          operator delete(v676);
                      }
                      else
                      {
                        *v676 = (unint64_t)v670;
                        v676[1] = v683;
                        v684 = v676 + 2;
                      }
                    }
                    ++v674;
                    v676 = v684;
                    if (v674 == v678)
                      goto LABEL_1108;
                  }
                }
                v673 = 2;
                v677 = 0;
                v684 = 0;
                switch(v668)
                {
                  case 29:
                  case 34:
                  case 35:
                    break;
                  case 30:
                    goto LABEL_1370;
                  case 31:
                    v673 = (*(_DWORD *)(v667 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_1115;
                  case 32:
                  case 38:
                    v673 = (*(_DWORD *)(v667 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_1115;
                  case 33:
                    goto LABEL_1080;
                  case 36:
                    v673 = *(_WORD *)(v667 + 18) & 1;
                    goto LABEL_1115;
                  case 37:
                    v673 = 1;
                    goto LABEL_1080;
                  case 39:
                    v673 = *(_DWORD *)(v667 + 80) + 1;
LABEL_1115:
                    if (!v673)
                      goto LABEL_1116;
                    goto LABEL_1080;
                  default:
LABEL_1116:
                    v677 = 0;
                    v684 = 0;
                    break;
                }
LABEL_1108:
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v833 + 40) + 40, (uint64_t ***)v833);
                v692 = *(_QWORD *)(v833 + 24);
                v693 = *(_QWORD **)(v833 + 32);
                *v693 = v692;
                *(_QWORD *)(v692 + 8) = v693;
                *(_QWORD *)(v833 + 24) = 0;
                *(_QWORD *)(v833 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v833);
                v694 = operator new(0x60uLL);
                v694[13] = v694[13] & 0x38000000 | 1;
                *(_QWORD *)v694 = 0;
                *((_QWORD *)v694 + 1) = 0;
                *((_QWORD *)v694 + 2) = 0;
                *((_QWORD *)v694 + 3) = v694 + 8;
                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v694 + 8), v672, v670);
                llvm::DomTreeUpdater::applyUpdates((uint64_t)v904, v677, ((char *)v684 - (char *)v677) >> 4);
                if (__b[1] != __b[0])
                  free(__b[1]);
                v661 = __valb;
                v662 = m;
                if (v677)
                  operator delete(v677);
              }
            }
LABEL_1121:
            __b[0] = v926;
            __b[1] = (void *)0x400000000;
            v942 = 0;
            v943 = 0;
            LODWORD(v944) = 0;
            v945 = 0;
            v946 = 0;
            v947 = 0;
            v948[0] = 0;
            v948[1] = 0;
            v948[2] = v949;
            v948[3] = 0x400000000;
            v949[4] = v950;
            v949[5] = 0;
            v950[0] = 0;
            v950[1] = 1;
            v920.__r_.__value_.__r.__words[0] = (std::string::size_type)&v920.__r_.__value_.__r.__words[2];
            v920.__r_.__value_.__l.__size_ = 0x1000000000;
            v695 = v872;
            v696 = v873;
            while (2)
            {
              if (v695 != v696)
              {
                v698 = *v695;
                v697 = (_BYTE *)v695[1];
                v699 = (_BYTE *)v695[2];
                v700 = v699 - v697;
                if (v699 == v697)
                {
                  v701 = 0;
                  v704 = 0;
                  v703 = 0;
                  v702 = *(void **)(v698 + 40);
                }
                else
                {
                  if ((v700 & 0x8000000000000000) != 0)
                    goto LABEL_1368;
                  v701 = operator new(v699 - v697);
                  memmove(v701, v697, v700);
                  v702 = *(void **)(v698 + 40);
                  v703 = (char *)operator new(v700);
                  memcpy(v703, v701, v700);
                  v704 = &v703[v700];
                }
                for (n = *(_QWORD *)(v698 + 8); n; n = *(_QWORD *)(n + 8))
                {
                  v706 = *(_QWORD *)(n + 24);
                  if (v706 && *(_BYTE *)(v706 + 16) == 83)
                  {
                    v707 = *(_DWORD *)(v706 + 20);
                    if ((v707 & 0x40000000) != 0)
                      v708 = *(_QWORD *)(v706 - 8);
                    else
                      v708 = v706 - 32 * (v707 & 0x7FFFFFF);
                    v709 = *(void **)(v708
                                    + 32 * *(unsigned int *)(v706 + 60)
                                    + 8 * ((unint64_t)(n - v708) >> 5));
                  }
                  else
                  {
                    v709 = *(void **)(v706 + 40);
                  }
                  if (v709 != v702)
                  {
                    v710 = LODWORD(v920.__r_.__value_.__r.__words[1]);
                    if (LODWORD(v920.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v920.__r_.__value_.__r.__words[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v920, (uint64_t)&v920.__r_.__value_.__r.__words[2], LODWORD(v920.__r_.__value_.__r.__words[1]) + 1, 8);
                      v710 = LODWORD(v920.__r_.__value_.__r.__words[1]);
                    }
                    *(_QWORD *)(v920.__r_.__value_.__r.__words[0] + 8 * v710) = n;
                    ++LODWORD(v920.__r_.__value_.__r.__words[1]);
                  }
                }
                if (!LODWORD(v920.__r_.__value_.__r.__words[1]))
                  goto LABEL_1141;
                v711 = *(uint64_t ***)v698;
                if ((*(_BYTE *)(v698 + 23) & 0x10) != 0)
                {
                  v712 = **v711;
                  v713 = *(_QWORD *)(v712 + 152);
                  v714 = *(unsigned int *)(v712 + 168);
                  if (!(_DWORD)v714)
                    goto LABEL_1153;
                  LODWORD(v715) = (v714 - 1) & ((v698 >> 4) ^ (v698 >> 9));
                  v716 = (uint64_t *)(v713 + 16 * v715);
                  v717 = *v716;
                  if (*v716 != v698)
                  {
                    v718 = 1;
                    while (v717 != -4096)
                    {
                      v719 = v715 + v718++;
                      v715 = v719 & (v714 - 1);
                      v717 = *(_QWORD *)(v713 + 16 * v715);
                      if (v717 == v698)
                      {
                        v716 = (uint64_t *)(v713 + 16 * v715);
                        goto LABEL_1154;
                      }
                    }
LABEL_1153:
                    v716 = (uint64_t *)(v713 + 16 * v714);
                  }
LABEL_1154:
                  v720 = (_QWORD *)v716[1];
                  v723 = *v720;
                  v721 = (char *)(v720 + 2);
                  v722 = v723;
                }
                else
                {
                  v722 = 0;
                  v721 = &byte_1C871356D;
                }
                v724 = llvm::SSAUpdaterBulk::AddVariable((uint64_t)__b, (uint64_t)v721, v722, (uint64_t)v711);
                __p = v702;
                v725 = v724;
                sub_1C5F82A8C((uint64_t)__b[0] + 96 * v724, (uint64_t *)&__p)[1] = v698;
                for (ii = v703; ii != v704; sub_1C5F82A8C((uint64_t)__b[0] + 96 * v725, (uint64_t *)&__p)[1] = v727)
                {
                  v727 = *(_QWORD *)ii;
                  ii += 8;
                  __p = *(void **)(v727 + 40);
                }
                while (LODWORD(v920.__r_.__value_.__r.__words[1]))
                {
                  v728 = *(llvm::Use **)(v920.__r_.__value_.__r.__words[0]
                                       + 8 * LODWORD(v920.__r_.__value_.__r.__words[1])
                                       - 8);
                  --LODWORD(v920.__r_.__value_.__r.__words[1]);
                  llvm::SSAUpdaterBulk::AddUse(__b, v725, v728);
                }
LABEL_1141:
                if (v703)
                  operator delete(v703);
                if (v701)
                  operator delete(v701);
                v695 += 4;
                continue;
              }
              break;
            }
            llvm::SSAUpdaterBulk::RewriteAllUses((uint64_t)__b, v881.i64[0], 0);
            if ((std::string::size_type *)v920.__r_.__value_.__l.__data_ != &v920.__r_.__value_.__r.__words[2])
              free(v920.__r_.__value_.__l.__data_);
            sub_1C4926AE8((uint64_t)v948);
            MEMORY[0x1CAA32FB4](v945, 8);
            MEMORY[0x1CAA32FB4](v942, 8);
            v730 = (char *)__b[0];
            if (LODWORD(__b[1]))
            {
              v731 = 96 * LODWORD(__b[1]);
              do
              {
                v732 = *(char **)&v730[v731 - 72];
                if (&v730[v731 - 56] != v732)
                  free(v732);
                MEMORY[0x1CAA32FB4](*(_QWORD *)&v730[v731 - 96], 8);
                v731 -= 96;
              }
              while (v731);
              v730 = (char *)__b[0];
            }
            if (v730 != (char *)v926)
              free(v730);
            v733 = v900[1];
            v734 = v900[0];
            v735 = (void **)((char *)v901 + 4);
            if (v900[1] != v900[0])
              v735 = v901;
            v736 = *(unsigned int *)v735;
            v737 = (unint64_t *)v900[1];
            if ((_DWORD)v736)
            {
              v738 = 0;
              while (*(_QWORD *)((char *)v900[1] + v738) >= 0xFFFFFFFFFFFFFFFELL)
              {
                v738 += 8;
                if (8 * v736 == v738)
                  goto LABEL_1280;
              }
              v737 = (unint64_t *)((char *)v900[1] + v738);
            }
            v739 = (char *)v900[1] + 8 * v736;
            if (v737 != (unint64_t *)v739)
            {
              __valc = (unint64_t *)v739;
              v850 = v737;
              v740 = *v737;
              while (1)
              {
                v741 = *(_QWORD *)(v740 + 8);
                if (v741)
                {
                  while (1)
                  {
                    v742 = *(_QWORD *)(v741 + 24);
                    v743 = *(unsigned __int8 *)(v742 + 16);
                    v744 = v742 && v743 >= 0x1C;
                    if (v744 && v743 - 29 < 0xB)
                      break;
                    v741 = *(_QWORD *)(v741 + 8);
                    if (!v741)
                      goto LABEL_1192;
                  }
                  v766 = *(_QWORD *)(v740 + 48);
                  v767 = (_DWORD *)(v766 - 24);
                  if (v766)
                    v768 = v766 - 24;
                  else
                    v768 = 0;
                  if (v766 && *(_BYTE *)(v768 + 16) == 83)
                  {
                    do
                    {
                      v769 = v767[5];
                      if ((v769 & 0x40000000) != 0)
                      {
                        v771 = (_DWORD *)*((_QWORD *)v767 - 1);
                        v770 = v769 & 0x7FFFFFF;
                        if (v770)
                        {
LABEL_1236:
                          v772 = 0;
                          v773 = 0;
                          v774 = 0;
                          v775 = (uint64_t *)&v771[8 * v767[15]];
                          v776 = &v775[v770];
                          do
                          {
                            v777 = *v775;
                            if (!sub_1C5AF3698(*(_QWORD *)(v740 + 8), *v775))
                            {
                              if (v773 >= v772)
                              {
                                v778 = v773 - v774;
                                v779 = v778 + 1;
                                if ((unint64_t)(v778 + 1) >> 61)
                                  goto LABEL_1368;
                                if (((char *)v772 - (char *)v774) >> 2 > v779)
                                  v779 = ((char *)v772 - (char *)v774) >> 2;
                                if ((unint64_t)((char *)v772 - (char *)v774) >= 0x7FFFFFFFFFFFFFF8)
                                  v780 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v780 = v779;
                                if (v780)
                                {
                                  if (v780 >> 61)
                                    goto LABEL_1369;
                                  v781 = (char *)operator new(8 * v780);
                                }
                                else
                                {
                                  v781 = 0;
                                }
                                v782 = (uint64_t *)&v781[8 * v778];
                                *v782 = v777;
                                v783 = v782 + 1;
                                if (v773 != v774)
                                {
                                  do
                                  {
                                    v784 = *--v773;
                                    *--v782 = v784;
                                  }
                                  while (v773 != v774);
                                  v773 = v774;
                                }
                                v774 = v782;
                                v772 = (uint64_t *)&v781[8 * v780];
                                if (v773)
                                  operator delete(v773);
                                v773 = v783;
                              }
                              else
                              {
                                *v773++ = v777;
                              }
                            }
                            ++v775;
                          }
                          while (v775 != v776);
                          for (jj = v774; jj != v773; ++jj)
                          {
                            v786 = v767[5];
                            v787 = v786 & 0x7FFFFFF;
                            if ((v786 & 0x7FFFFFF) != 0)
                            {
                              v788 = 0;
                              while (1)
                              {
                                v789 = &v767[-8 * v787];
                                if ((v786 & 0x40000000) != 0)
                                  v789 = (_DWORD *)*((_QWORD *)v767 - 1);
                                if (*(_QWORD *)&v789[8 * v767[15] + 2 * v788] == *jj)
                                  break;
                                if (v787 == ++v788)
                                  goto LABEL_1264;
                              }
                            }
                            else
                            {
LABEL_1264:
                              LODWORD(v788) = -1;
                            }
                            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v767, v788, 1);
                          }
                          if (v774)
                            operator delete(v774);
                        }
                      }
                      else
                      {
                        v770 = v769 & 0x7FFFFFF;
                        v771 = &v767[-8 * v770];
                        if (v770)
                          goto LABEL_1236;
                      }
                      v766 = *(_QWORD *)(v766 + 8);
                      v790 = v766 - 24;
                      if (!v766)
                        v790 = 0;
                      v791 = *(unsigned __int8 *)(v790 + 16);
                      if (v791 == 83)
                        v767 = (_DWORD *)v790;
                      else
                        v767 = 0;
                    }
                    while (v766 && v791 == 83);
                  }
                }
                else
                {
LABEL_1192:
                  v746 = *(_QWORD *)(v740 + 48);
                  v747 = v746 - 24;
                  if (v746)
                    v748 = v746 - 24;
                  else
                    v748 = 0;
                  if (v746 && *(_BYTE *)(v748 + 16) == 83)
                  {
                    v749 = 0;
                    v750 = 0;
                    v751 = 0;
                    do
                    {
                      if (v750 >= v749)
                      {
                        v752 = (v750 - v751) >> 3;
                        v753 = v752 + 1;
                        if ((unint64_t)(v752 + 1) >> 61)
                          goto LABEL_1368;
                        if ((v749 - v751) >> 2 > v753)
                          v753 = (v749 - v751) >> 2;
                        if ((unint64_t)(v749 - v751) >= 0x7FFFFFFFFFFFFFF8)
                          v754 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v754 = v753;
                        if (v754)
                        {
                          if (v754 >> 61)
                            goto LABEL_1369;
                          v755 = (char *)operator new(8 * v754);
                        }
                        else
                        {
                          v755 = 0;
                        }
                        v756 = &v755[8 * v752];
                        *(_QWORD *)v756 = v747;
                        v757 = v756 + 8;
                        if (v750 != v751)
                        {
                          do
                          {
                            v758 = *((_QWORD *)v750 - 1);
                            v750 -= 8;
                            *((_QWORD *)v756 - 1) = v758;
                            v756 -= 8;
                          }
                          while (v750 != v751);
                          v750 = v751;
                        }
                        v751 = v756;
                        v749 = &v755[8 * v754];
                        if (v750)
                          operator delete(v750);
                        v750 = v757;
                      }
                      else
                      {
                        *(_QWORD *)v750 = v747;
                        v750 += 8;
                      }
                      v746 = *(_QWORD *)(v746 + 8);
                      v759 = v746 - 24;
                      if (!v746)
                        v759 = 0;
                      v760 = *(unsigned __int8 *)(v759 + 16);
                      if (v760 == 83)
                        v747 = v759;
                      else
                        v747 = 0;
                    }
                    while (v746 && v760 == 83);
                    v761 = v751;
                    while (v761 != v750)
                    {
                      v762 = *(_QWORD *)v761;
                      v761 += 8;
                      v763 = llvm::UndefValue::get(*(llvm::UndefValue **)v762, v729);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v762, v763, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v762 + 40) + 40, (uint64_t ***)v762);
                      v764 = *(_QWORD *)(v762 + 24);
                      v765 = *(_QWORD **)(v762 + 32);
                      *v765 = v764;
                      *(_QWORD *)(v764 + 8) = v765;
                      *(_QWORD *)(v762 + 24) = 0;
                      *(_QWORD *)(v762 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v762);
                    }
                    if (v751)
                      operator delete(v751);
                  }
                }
                v792 = v850 + 1;
                do
                {
                  if (v792 == __valc)
                  {
                    v733 = v900[1];
                    v734 = v900[0];
                    goto LABEL_1280;
                  }
                  v793 = *v792++;
                  v740 = v793;
                }
                while (v793 > 0xFFFFFFFFFFFFFFFDLL);
                v850 = v792 - 1;
              }
            }
LABEL_1280:
            if (v733 != v734)
              free(v733);
            sub_1C621E630((uint64_t)&v869);
            sub_1C5AF3394(v875);
            llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v904);
            __b[0] = v916;
            sub_1C50B10F0((void ***)__b);
            if (v912 != v911)
              free(v912);
            if (v904[0] != &v905)
              free(v904[0]);
            goto LABEL_1286;
          }
          if (!v406)
            goto LABEL_667;
        }
        v808 = *(_QWORD *)(*(_QWORD *)(__val + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v900, (const llvm::DebugLoc *)(__val + 48));
        v809 = *(_QWORD *)(__val + 40);
        LODWORD(__b[1]) = 9;
        BYTE4(__b[1]) = 2;
        *(_OWORD *)((char *)v926 + 8) = *(_OWORD *)v900;
        *(_QWORD *)&v926[0] = v808;
        *((_QWORD *)&v926[1] + 1) = "dfa-jump-threading";
        *(_QWORD *)&v927 = "JumpThreaded";
        *((_QWORD *)&v927 + 1) = 12;
        v928 = 0;
        v929 = 0;
        v930 = v932;
        v931 = 0x400000000;
        v939 = 0;
        v940 = -1;
        v941 = v809;
        __b[0] = &off_1E814E500;
        v900[0] = "Switch statement jump-threaded.";
        v900[1] = (void *)31;
        sub_1C53B17B4((uint64_t)&v930, (const void **)v900);
        sub_1C61998EC((uint64_t)v904, (uint64_t)__b);
        v904[0] = &off_1E814E500;
        __b[0] = &off_1E814E790;
        v810 = (char *)v930;
        if ((_DWORD)v931)
        {
          v811 = (unint64_t)v931 << 6;
          do
          {
            v812 = (void **)&v810[v811];
            if (v810[v811 - 17] < 0)
              operator delete(*(v812 - 5));
            if (*((char *)v812 - 41) < 0)
              operator delete(*(v812 - 8));
            v811 -= 64;
          }
          while (v811);
          v810 = (char *)v930;
        }
        if (v810 != (char *)v932)
          free(v810);
        llvm::OptimizationRemarkEmitter::emit(v404, (llvm::DiagnosticInfoOptimizationBase *)v904);
        v904[0] = &off_1E814E790;
        v414 = (char *)v907;
        if (!v908)
          goto LABEL_1346;
        v813 = (unint64_t)v908 << 6;
        do
        {
          v814 = (void **)&v414[v813];
          if (v414[v813 - 17] < 0)
            operator delete(*(v814 - 5));
          if (*((char *)v814 - 41) < 0)
            operator delete(*(v814 - 8));
          v813 -= 64;
        }
        while (v813);
        goto LABEL_1345;
      }
      sub_1C5AF2AA8((uint64_t)v900, (_QWORD *)v358);
      v359 = *(_QWORD *)(v358 + 48);
      v918[0] = *(void **)(v358 + 56);
      v360 = (llvm::BasicBlock *)v880[1];
      v879.__r_.__value_.__r.__words[0] = (std::string::size_type)v360;
      if (!sub_1C5AF30DC((uint64_t)v360, v359, (uint64_t)&v869))
      {
        llvm::CodeMetrics::analyzeBasicBlock((uint64_t)&__p, v360, (_QWORD *)v882, &v883, 0);
        v361 = sub_1C5AF3194((uint64_t)&v869, (uint64_t *)&v879);
        v362 = v361;
        v364 = (llvm::BasicBlock **)v361[1];
        v363 = v361[2];
        if ((unint64_t)v364 >= v363)
        {
          v366 = (llvm::BasicBlock **)*v361;
          v367 = ((uint64_t)v364 - *v361) >> 4;
          v368 = v367 + 1;
          if ((unint64_t)(v367 + 1) >> 60)
            goto LABEL_1368;
          v369 = v363 - (_QWORD)v366;
          if (v369 >> 3 > v368)
            v368 = v369 >> 3;
          if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF0)
            v370 = 0xFFFFFFFFFFFFFFFLL;
          else
            v370 = v368;
          if (v370)
          {
            if (v370 >> 60)
              goto LABEL_1369;
            v371 = (char *)operator new(16 * v370);
          }
          else
          {
            v371 = 0;
          }
          v372 = (llvm::BasicBlock **)&v371[16 * v367];
          *v372 = v360;
          v372[1] = (llvm::BasicBlock *)v359;
          v373 = v372;
          if (v364 != v366)
          {
            do
            {
              *((_OWORD *)v373 - 1) = *((_OWORD *)v364 - 1);
              v373 -= 2;
              v364 -= 2;
            }
            while (v364 != v366);
            v364 = (llvm::BasicBlock **)*v362;
          }
          v365 = v372 + 2;
          *v362 = (uint64_t)v373;
          v362[1] = (uint64_t)(v372 + 2);
          v362[2] = (uint64_t)&v371[16 * v370];
          if (v364)
            operator delete(v364);
        }
        else
        {
          *v364 = v360;
          v364[1] = (llvm::BasicBlock *)v359;
          v365 = v364 + 2;
        }
        v362[1] = (uint64_t)v365;
      }
      v374 = (char *)v900[1];
      v375 = (char *)v900[1] + 8 * (v902 >> 9);
      if (*(void **)(*v375 + 8 * (v902 & 0x1FF)) == v918[0])
      {
LABEL_632:
        sub_1C484143C((uint64_t)v900);
        v358 += 72;
        v357 = v847;
        continue;
      }
      break;
    }
    v376 = (char *)v901[0];
    v377 = (_QWORD **)((char *)v900[1] + 8 * ((v903 + v902) >> 9));
    if (v901[0] == v900[1])
      v378 = 0;
    else
      v378 = (_QWORD *)(*v375 + 8 * (v902 & 0x1FF));
    if (v901[0] == v900[1])
      v379 = 0;
    else
      v379 = &(*v377)[((_WORD)v903 + (_WORD)v902) & 0x1FF];
    v380 = sub_1C5AF2EE8(v375, v378, v377, v379, v918);
    v382 = v381;
    while (1)
    {
      v383 = v376 == v374
           ? 0
           : *(_QWORD *)&v374[((v902 + v903) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v902 + v903) & 0x1FF);
      if (v382 == (llvm::BasicBlock **)v383)
        break;
      v384 = *v382;
      v879.__r_.__value_.__r.__words[0] = (std::string::size_type)v384;
      if (!sub_1C5AF30DC((uint64_t)v384, v359, (uint64_t)&v869))
      {
        llvm::CodeMetrics::analyzeBasicBlock((uint64_t)&__p, v384, (_QWORD *)v882, &v883, 0);
        v385 = sub_1C5AF3194((uint64_t)&v869, (uint64_t *)&v879);
        v386 = v385;
        v388 = (llvm::BasicBlock **)v385[1];
        v387 = v385[2];
        if ((unint64_t)v388 >= v387)
        {
          v390 = (llvm::BasicBlock **)*v385;
          v391 = ((uint64_t)v388 - *v385) >> 4;
          v392 = v391 + 1;
          if ((unint64_t)(v391 + 1) >> 60)
            goto LABEL_1368;
          v393 = v387 - (_QWORD)v390;
          if (v393 >> 3 > v392)
            v392 = v393 >> 3;
          if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFF0)
            v394 = 0xFFFFFFFFFFFFFFFLL;
          else
            v394 = v392;
          if (v394)
          {
            if (v394 >> 60)
              goto LABEL_1369;
            v395 = (char *)operator new(16 * v394);
          }
          else
          {
            v395 = 0;
          }
          v396 = (llvm::BasicBlock **)&v395[16 * v391];
          *v396 = v384;
          v396[1] = (llvm::BasicBlock *)v359;
          v397 = v396;
          if (v388 != v390)
          {
            do
            {
              *((_OWORD *)v397 - 1) = *((_OWORD *)v388 - 1);
              v397 -= 2;
              v388 -= 2;
            }
            while (v388 != v390);
            v388 = (llvm::BasicBlock **)*v386;
          }
          v398 = &v395[16 * v394];
          v389 = v396 + 2;
          *v386 = (uint64_t)v397;
          v386[1] = (uint64_t)(v396 + 2);
          v386[2] = (uint64_t)v398;
          if (v388)
            operator delete(v388);
        }
        else
        {
          *v388 = v384;
          v388[1] = (llvm::BasicBlock *)v359;
          v389 = v388 + 2;
        }
        v386[1] = (uint64_t)v389;
      }
      if ((llvm::BasicBlock **)((char *)++v382 - *v380) == (llvm::BasicBlock **)4096)
      {
        v399 = (llvm::BasicBlock **)v380[1];
        ++v380;
        v382 = v399;
      }
      v374 = (char *)v900[1];
      v376 = (char *)v901[0];
    }
    if (!BYTE2(__p))
    {
      if (BYTE3(__p))
      {
        v477 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)&v882 + 1);
        v478 = *****((_QWORD *****)&v882 + 1);
        if (*(_QWORD *)(v478 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v478 + 72) + 48))(*(_QWORD *)(v478 + 72)))
        {
          v801 = *(_QWORD *)(*(_QWORD *)(__val + 40) + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v920, (const llvm::DebugLoc *)(__val + 48));
          v802 = *(_QWORD *)(__val + 40);
          LODWORD(__b[1]) = 10;
          BYTE4(__b[1]) = 2;
          *(_OWORD *)((char *)v926 + 8) = *(_OWORD *)&v920.__r_.__value_.__l.__data_;
          *(_QWORD *)&v926[0] = v801;
          *((_QWORD *)&v926[1] + 1) = "dfa-jump-threading";
          *(_QWORD *)&v927 = "ConvergentInst";
          *((_QWORD *)&v927 + 1) = 14;
          v928 = 0;
          v929 = 0;
          v930 = v932;
          v931 = 0x400000000;
          v939 = 0;
          v940 = -1;
          v941 = v802;
          __b[0] = &off_1E814E538;
          v920.__r_.__value_.__r.__words[0] = (std::string::size_type)"Contains convergent instructions.";
          v920.__r_.__value_.__l.__size_ = 33;
          sub_1C53B17B4((uint64_t)&v930, (const void **)&v920.__r_.__value_.__l.__data_);
          sub_1C61998EC((uint64_t)v904, (uint64_t)__b);
          v904[0] = &off_1E814E538;
          __b[0] = &off_1E814E790;
          v803 = (char *)v930;
          if ((_DWORD)v931)
          {
            v804 = (unint64_t)v931 << 6;
            do
            {
              v805 = (void **)&v803[v804];
              if (v803[v804 - 17] < 0)
                operator delete(*(v805 - 5));
              if (*((char *)v805 - 41) < 0)
                operator delete(*(v805 - 8));
              v804 -= 64;
            }
            while (v804);
            v803 = (char *)v930;
          }
          if (v803 != (char *)v932)
            free(v803);
          llvm::OptimizationRemarkEmitter::emit(v477, (llvm::DiagnosticInfoOptimizationBase *)v904);
          v904[0] = &off_1E814E790;
          v474 = (char *)v907;
          if (v908)
          {
            v806 = (unint64_t)v908 << 6;
            do
            {
              v807 = (void **)&v474[v806];
              if (v474[v806 - 17] < 0)
                operator delete(*(v807 - 5));
              if (*((char *)v807 - 41) < 0)
                operator delete(*(v807 - 8));
              v806 -= 64;
            }
            while (v806);
            goto LABEL_1321;
          }
          goto LABEL_1322;
        }
        goto LABEL_761;
      }
      goto LABEL_632;
    }
    v467 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)&v882 + 1);
    v468 = *****((_QWORD *****)&v882 + 1);
    if (*(_QWORD *)(v468 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v468 + 72) + 48))(*(_QWORD *)(v468 + 72)))
    {
      v469 = *(_QWORD *)(*(_QWORD *)(__val + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v920, (const llvm::DebugLoc *)(__val + 48));
      v470 = *(_QWORD *)(__val + 40);
      LODWORD(__b[1]) = 10;
      BYTE4(__b[1]) = 2;
      *(_OWORD *)((char *)v926 + 8) = *(_OWORD *)&v920.__r_.__value_.__l.__data_;
      *(_QWORD *)&v926[0] = v469;
      *((_QWORD *)&v926[1] + 1) = "dfa-jump-threading";
      *(_QWORD *)&v927 = "NonDuplicatableInst";
      *((_QWORD *)&v927 + 1) = 19;
      v928 = 0;
      v929 = 0;
      v930 = v932;
      v931 = 0x400000000;
      v939 = 0;
      v940 = -1;
      v941 = v470;
      __b[0] = &off_1E814E538;
      v920.__r_.__value_.__r.__words[0] = (std::string::size_type)"Contains non-duplicatable instructions.";
      v920.__r_.__value_.__l.__size_ = 39;
      sub_1C53B17B4((uint64_t)&v930, (const void **)&v920.__r_.__value_.__l.__data_);
      sub_1C61998EC((uint64_t)v904, (uint64_t)__b);
      v904[0] = &off_1E814E538;
      __b[0] = &off_1E814E790;
      v471 = (char *)v930;
      if ((_DWORD)v931)
      {
        v472 = (unint64_t)v931 << 6;
        do
        {
          v473 = (void **)&v471[v472];
          if (v471[v472 - 17] < 0)
            operator delete(*(v473 - 5));
          if (*((char *)v473 - 41) < 0)
            operator delete(*(v473 - 8));
          v472 -= 64;
        }
        while (v472);
        v471 = (char *)v930;
      }
      if (v471 != (char *)v932)
        free(v471);
      llvm::OptimizationRemarkEmitter::emit(v467, (llvm::DiagnosticInfoOptimizationBase *)v904);
      v904[0] = &off_1E814E790;
      v474 = (char *)v907;
      if (v908)
      {
        v475 = (unint64_t)v908 << 6;
        do
        {
          v476 = (void **)&v474[v475];
          if (v474[v475 - 17] < 0)
            operator delete(*(v476 - 5));
          if (*((char *)v476 - 41) < 0)
            operator delete(*(v476 - 8));
          v475 -= 64;
        }
        while (v475);
LABEL_1321:
        v474 = (char *)v907;
      }
LABEL_1322:
      if (v474 != (char *)v909)
        free(v474);
    }
LABEL_761:
    sub_1C484143C((uint64_t)v900);
    sub_1C5AF3394(&v869);
    MEMORY[0x1CAA32FB4](v864, 8);
LABEL_1286:
    v794 = v889;
    if (v889)
    {
      v795 = (uint64_t)v890;
      v796 = v889;
      if (v890 != v889)
      {
        do
          v795 = sub_1C484143C(v795 - 72);
        while ((void *)v795 != v794);
        v796 = v889;
      }
      v890 = v794;
      operator delete(v796);
    }
    if (v884 != v883)
      free(v884);
    v797 = (char *)v859;
    if (v859)
    {
      v798 = (uint64_t)v860;
      v799 = v859;
      if (v860 != v859)
      {
        do
          v798 = sub_1C484143C(v798 - 72);
        while ((char *)v798 != v797);
        v799 = v859;
      }
      v860 = v797;
      operator delete(v799);
    }
    v337 = v820 + 6;
    if (v820 + 6 != (_QWORD *)v818)
      continue;
    break;
  }
LABEL_1359:
  if (__src[1] != __src[0])
    free(__src[1]);
  v815 = v897;
  if ((_DWORD)v898)
  {
    v816 = (char *)v897 - 24;
    v817 = 48 * v898;
    do
    {
      sub_1C5AF3084((void **)&v816[v817]);
      v817 -= 48;
    }
    while (v817);
    v815 = v897;
  }
  if (v815 != v899)
    free(v815);
}

uint64_t sub_1C5AF1520()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F5758;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E8194408;
  return result;
}

void sub_1C5AF156C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5AF1590(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
}

void sub_1C5AF1608(llvm::FunctionPass *a1, llvm::Function *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  char **v6;
  char *v7;
  llvm::AssumptionCacheTracker *v8;
  uint64_t AssumptionCache;
  void **v10;
  void *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v27[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) == 0)
  {
    v6 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v7 = *v6;
      v6 += 2;
    }
    while (v7 != llvm::AssumptionCacheTracker::ID);
    v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::AssumptionCacheTracker::ID);
    AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
    v10 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v11 = *v10;
      v10 += 2;
    }
    while (v11 != &llvm::DominatorTreeWrapperPass::ID);
    v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::DominatorTreeWrapperPass::ID);
    v13 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v14 = *v13;
      v13 += 2;
    }
    while (v14 != llvm::TargetTransformInfoWrapperPass::ID);
    v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::TargetTransformInfoWrapperPass::ID);
    v24 = 0;
    v25 = 0;
    LODWORD(v26) = 0;
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v16 = *(_QWORD *)(v15 + 56);
    if (v16)
    {
      v2 = v27;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v16 + 48))(&v23, v16, a2);
      v3 = (_QWORD *)(v15 + 64);
      v17 = v23;
      if (!*(_BYTE *)(v15 + 72))
      {
        *(_QWORD *)(v15 + 64) = v23;
        *(_BYTE *)(v15 + 72) = 1;
        goto LABEL_12;
      }
      v23 = 0;
      v18 = *v3;
      *v3 = v17;
      if (!v18)
        goto LABEL_12;
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = v23;
      v23 = 0;
      if (!v19)
        goto LABEL_12;
    }
    else
    {
      sub_1C485C2F0();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
LABEL_12:
    MEMORY[0x1CAA32FB4](0, 8);
    sub_1C4D8B440(v2);
    sub_1C4D8B52C(&v24);
    v20 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v21 = *v20;
      v20 += 2;
    }
    while (v21 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
    v22 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
    v24 = AssumptionCache;
    v25 = v12 + 32;
    v26 = v3;
    v27[0] = v22;
    sub_1C5AEC068((uint64_t)&v24, a2);
  }
}

_QWORD *sub_1C5AF180C(_QWORD *result, uint64_t a2)
{
  const void **v2;
  void *v3;
  unint64_t v5;
  _QWORD *v6;
  unsigned int v7;

  v2 = (const void **)(a2 + 16);
  v3 = result + 2;
  *result = result + 2;
  result[1] = 0x400000000;
  if ((_QWORD *)(a2 + 16) != result)
  {
    v5 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v5)
    {
      v6 = result;
      if (v5 < 5)
      {
        v7 = *(_DWORD *)(a2 + 24);
      }
      else
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v5, 16);
        v7 = *(_DWORD *)(a2 + 24);
        if (!v7)
        {
LABEL_8:
          *((_DWORD *)v6 + 2) = v5;
          return result;
        }
        v3 = (void *)*v6;
      }
      result = memcpy(v3, *v2, 16 * v7);
      goto LABEL_8;
    }
  }
  return result;
}

_QWORD *sub_1C5AF18A0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81944A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C5AF18E0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81944A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5AF1930(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_1C477672C((uint64_t)a3, a1);
  v7 = *((_QWORD *)a3 + 1);
  if (v7 == *(_QWORD *)a3)
    v8 = a3 + 5;
  else
    v8 = a3 + 4;
  if (result == (_QWORD *)(v7 + 8 * *v8))
  {
    if (*(unsigned __int8 *)(a1 + 16) <= 0x1Bu)
      v9 = 0;
    else
      v9 = a1;
    v10 = v9;
    if (v9)
      sub_1C48410F0(a2, &v10);
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, a1);
  }
  return result;
}

uint64_t sub_1C5AF19C0(uint64_t a1, _QWORD *a2, llvm::Instruction *a3, llvm::Instruction *a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t *a8, llvm::Instruction **a9, llvm::Instruction ***a10, uint64_t **a11)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::BasicBlock *v32;
  _DWORD *v33;
  llvm::Instruction *v34;
  unint64_t v35;
  llvm::Instruction **v36;
  llvm::Instruction **v37;
  llvm::Instruction **v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  llvm::Instruction **v44;
  llvm::BasicBlock *v47;
  unint64_t v48;
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v49 = 261;
  v47 = (llvm::BasicBlock *)a6;
  v48 = a7;
  v16 = *(_QWORD *)(a5 + 56);
  v17 = operator new();
  *(_QWORD *)v17 = *a2 + 1600;
  *(_QWORD *)(v17 + 8) = 0;
  v18 = *(_DWORD *)(v17 + 20) & 0xC0000000;
  *(_QWORD *)(v17 + 24) = 0;
  v19 = v17 + 24;
  *(_DWORD *)(v17 + 16) = 22;
  *(_DWORD *)(v17 + 20) = v18;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = v17 + 40;
  *(_QWORD *)(v17 + 48) = v17 + 40;
  *(_QWORD *)(v17 + 56) = 0;
  if (v16)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v16 + 72, (_QWORD *)v17);
    v20 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(v17 + 24) = v20;
    *(_QWORD *)(v17 + 32) = a5 + 24;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(a5 + 24) = v19;
  }
  llvm::Value::setName((uint64_t ***)v17, (uint64_t)&v47);
  *a8 = v17;
  v22 = a11[1];
  v21 = (unint64_t)a11[2];
  if ((unint64_t)v22 >= v21)
  {
    v24 = *a11;
    v25 = v22 - *a11;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      goto LABEL_38;
    v27 = v21 - (_QWORD)v24;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        goto LABEL_39;
      v29 = (char *)operator new(8 * v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = (uint64_t *)&v29[8 * v25];
    *v30 = v17;
    v23 = v30 + 1;
    if (v22 != v24)
    {
      do
      {
        v31 = *--v22;
        *--v30 = v31;
      }
      while (v22 != v24);
      v22 = *a11;
    }
    *a11 = v30;
    a11[1] = v23;
    a11[2] = (uint64_t *)&v29[8 * v28];
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v22 = v17;
    v23 = v22 + 1;
  }
  a11[1] = v23;
  v32 = (llvm::BasicBlock *)*a8;
  v33 = operator new(0x60uLL);
  v33[13] = v33[13] & 0x38000000 | 1;
  v34 = (llvm::Instruction *)(v33 + 8);
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = 0;
  *((_QWORD *)v33 + 3) = v33 + 8;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v33 + 8), (llvm::BasicBlock *)a5, v32);
  *a9 = v34;
  llvm::Instruction::moveBefore(a4, v34);
  v36 = a10[1];
  v35 = (unint64_t)a10[2];
  if ((unint64_t)v36 < v35)
  {
    *v36 = a4;
    v36[1] = a3;
    v37 = v36 + 2;
    goto LABEL_37;
  }
  v38 = *a10;
  v39 = ((char *)v36 - (char *)*a10) >> 4;
  v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 60)
LABEL_38:
    abort();
  v41 = v35 - (_QWORD)v38;
  if (v41 >> 3 > v40)
    v40 = v41 >> 3;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
    v42 = 0xFFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (!v42)
  {
    v43 = 0;
    goto LABEL_32;
  }
  if (v42 >> 60)
LABEL_39:
    sub_1C4764EE4();
  v43 = (char *)operator new(16 * v42);
LABEL_32:
  v44 = (llvm::Instruction **)&v43[16 * v39];
  *v44 = a4;
  v44[1] = a3;
  v37 = v44 + 2;
  if (v36 != v38)
  {
    do
    {
      *((_OWORD *)v44 - 1) = *((_OWORD *)v36 - 1);
      v44 -= 2;
      v36 -= 2;
    }
    while (v36 != v38);
    v36 = *a10;
  }
  *a10 = v44;
  a10[1] = v37;
  a10[2] = (llvm::Instruction **)&v43[16 * v42];
  if (v36)
    operator delete(v36);
LABEL_37:
  a10[1] = v37;
  v47 = (llvm::BasicBlock *)*a8;
  v48 = a5 & 0xFFFFFFFFFFFFFFFBLL;
  return llvm::DomTreeUpdater::applyUpdates(a1, (unint64_t *)&v47, 1);
}

void sub_1C5AF1CB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v5;
  uint64_t *v6;
  llvm::OptimizationRemarkEmitter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void **v15;
  uint64_t *v16;
  unint64_t v17;
  void **v18;
  void *v19;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  void **v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  unint64_t v66;
  _OWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  std::string::size_type v73;
  uint64_t v74;
  uint64_t v75;
  std::string::size_type size;
  _QWORD *v77;
  uint64_t v78;
  unsigned int *v79;
  _QWORD *v80;
  uint64_t *v81;
  _QWORD v82[3];
  void *v83;
  std::string v84;
  void *__p;
  uint64_t *v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t (**v94)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v95;
  uint64_t v96;
  int v97;
  _QWORD v98[4];
  char v99;
  char v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[260];
  int v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;

  v5 = (_QWORD *)a2;
  v111 = *MEMORY[0x1E0C80C00];
  a1[2] = 0;
  v6 = a1 + 2;
  v83 = (void *)a3;
  *a1 = 0;
  a1[1] = 0;
  if (dword_1ED81C560 >= a5)
  {
    v22 = a3;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, a3);
    v94 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v98;
    v95 = v98;
    v96 = 4;
    v97 = 0;
    v24 = *(_QWORD *)(v22 + 40);
    if (v24 != v22 + 40)
    {
      if (v24)
        v25 = v24 - 24;
      else
        v25 = 0;
      v26 = *(unsigned __int8 *)(v25 + 16);
      v27 = v26 - 29;
      if (v26 != 30)
      {
        v28 = 2;
        switch(v27)
        {
          case 1:
            __break(1u);
            goto LABEL_116;
          case 2:
            v28 = (*(_DWORD *)(v25 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_111;
          case 3:
          case 9:
LABEL_116:
            v28 = (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_111;
          case 4:
            goto LABEL_36;
          case 7:
            v28 = *(_WORD *)(v25 + 18) & 1;
            goto LABEL_111;
          case 8:
            v28 = 1;
            goto LABEL_36;
          case 10:
            v28 = *(_DWORD *)(v25 + 80) + 1;
LABEL_111:
            if (!v28)
              goto LABEL_101;
            goto LABEL_36;
          default:
            goto LABEL_101;
        }
      }
      if ((*(_DWORD *)(v25 + 20) & 0x7FFFFFF) == 3)
        v28 = 2;
      else
        v28 = 1;
LABEL_36:
      v80 = v5;
      v81 = v6;
      v29 = 0;
      v30 = v28;
      do
      {
        v31 = *(unsigned __int8 *)(v25 + 16);
        if (v31 != 30)
          __asm { BR              X9 }
        v32 = *(_QWORD *)(v25 - 32 - 32 * v29);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v94, v32);
        if (v33)
        {
          if (v32 == v5[1])
          {
            v106 = v83;
            v88 = 0u;
            v89 = 0u;
            v90 = 0u;
            sub_1C5AF25BC((uint64_t)&v88, 1uLL);
            v50 = *((_QWORD *)&v90 + 1);
            v51 = v90;
            v52 = (uint64_t *)(*((_QWORD *)&v88 + 1) + 8 * (((_QWORD)v90 + *((_QWORD *)&v90 + 1)) >> 9));
            v53 = *v52;
            v54 = *v52 + 8 * ((v90 + *((_QWORD *)&v90 + 1)) & 0x1FF);
            if ((_QWORD)v89 == *((_QWORD *)&v88 + 1))
              v54 = 0;
            v55 = (v54 - v53) >> 3;
            if (v54 - v53 < -7)
            {
              v58 = 510 - v55;
              v56 = ~(_WORD)v58;
              v57 = &v52[-(v58 >> 9)];
            }
            else
            {
              v56 = v55 + 1;
              v57 = &v52[(unint64_t)(v55 + 1) >> 9];
            }
            v59 = *v57 + 8 * (v56 & 0x1FF);
            if (v54 != v59)
            {
              v60 = &v106;
              do
              {
                v61 = (_QWORD *)(v53 + 4096);
                if (v52 == v57)
                  v61 = (_QWORD *)v59;
                if ((_QWORD *)v54 == v61)
                {
                  v61 = (_QWORD *)v54;
                }
                else
                {
                  v62 = (_QWORD *)v54;
                  do
                  {
                    v63 = (uint64_t)*v60++;
                    *v62++ = v63;
                  }
                  while (v62 != v61);
                }
                v50 += ((uint64_t)v61 - v54) >> 3;
                if (v52 == v57)
                  break;
                v64 = v52[1];
                ++v52;
                v53 = v64;
                v54 = v64;
              }
              while (v64 != v59);
              *((_QWORD *)&v90 + 1) = v50;
            }
            v65 = (_OWORD *)a1[1];
            v66 = a1[2];
            if ((unint64_t)v65 >= v66)
            {
              v68 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65 - *a1) >> 4);
              v69 = v68 + 1;
              if (v68 + 1 > 0x555555555555555)
LABEL_113:
                abort();
              v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *a1) >> 4);
              if (2 * v70 > v69)
                v69 = 2 * v70;
              if (v70 >= 0x2AAAAAAAAAAAAAALL)
                v69 = 0x555555555555555;
              v86 = v81;
              if (v69 > 0x555555555555555)
LABEL_114:
                sub_1C4764EE4();
              v71 = 3 * v69;
              v72 = (char *)operator new(48 * v69);
              v73 = (std::string::size_type)&v72[48 * v68];
              v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
              v84.__r_.__value_.__l.__size_ = v73;
              *(_OWORD *)v73 = v88;
              v74 = *((_QWORD *)&v89 + 1);
              *(_QWORD *)(v73 + 16) = v89;
              *(_QWORD *)(v73 + 24) = v74;
              v88 = 0u;
              v89 = 0u;
              *(_QWORD *)(v73 + 32) = v51;
              *(_QWORD *)(v73 + 40) = v50;
              v90 = 0uLL;
              v84.__r_.__value_.__r.__words[2] = v73 + 48;
              __p = &v72[16 * v71];
              sub_1C63120E0(a1, &v84);
              v67 = (_OWORD *)a1[1];
              v75 = v84.__r_.__value_.__r.__words[2];
              size = v84.__r_.__value_.__l.__size_;
              while (v75 != size)
                v75 = sub_1C484143C(v75 - 48);
              if (v84.__r_.__value_.__r.__words[0])
                operator delete(v84.__r_.__value_.__l.__data_);
              v5 = v80;
            }
            else
            {
              *v65 = v88;
              v65[1] = v89;
              v88 = 0u;
              v89 = 0u;
              v65[2] = v90;
              v67 = v65 + 3;
              v90 = 0uLL;
            }
            a1[1] = (uint64_t)v67;
            sub_1C484143C((uint64_t)&v88);
          }
          else
          {
            v34 = sub_1C477672C(a4, v32);
            v35 = *(_QWORD *)(a4 + 8);
            if (v35 == *(_QWORD *)a4)
              v36 = (unsigned int *)(a4 + 20);
            else
              v36 = (unsigned int *)(a4 + 16);
            if (v34 == (_QWORD *)(v35 + 8 * *v36))
            {
              sub_1C5AF1CB4(v82, v5, v32, a4, a5 + 1);
              v37 = (_QWORD *)v82[0];
              v38 = (_QWORD *)v82[1];
              while (v37 != v38)
              {
                sub_1C5AF2AA8((uint64_t)&v88, v37);
                sub_1C5AF2AA8((uint64_t)&v84, &v88);
                sub_1C617CB38(&v84, &v83);
                v39 = a1[1];
                v40 = a1[2];
                if (v39 >= v40)
                {
                  v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *a1) >> 4);
                  v43 = v42 + 1;
                  if (v42 + 1 > 0x555555555555555)
                    goto LABEL_113;
                  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a1) >> 4);
                  if (2 * v44 > v43)
                    v43 = 2 * v44;
                  if (v44 >= 0x2AAAAAAAAAAAAAALL)
                    v45 = 0x555555555555555;
                  else
                    v45 = v43;
                  v110 = v81;
                  if (v45)
                  {
                    if (v45 > 0x555555555555555)
                      goto LABEL_114;
                    v46 = (char *)operator new(48 * v45);
                  }
                  else
                  {
                    v46 = 0;
                  }
                  v47 = (uint64_t)&v46[48 * v42];
                  v106 = v46;
                  v107 = v47;
                  v109 = &v46[48 * v45];
                  sub_1C5AF2AA8(v47, &v84);
                  v108 = v47 + 48;
                  sub_1C63120E0(a1, &v106);
                  v41 = a1[1];
                  v49 = v107;
                  for (i = v108; i != v49; i = sub_1C484143C(i - 48))
                    ;
                  if (v106)
                    operator delete(v106);
                  v5 = v80;
                }
                else
                {
                  v41 = sub_1C5AF2AA8(v39, &v84) + 48;
                }
                a1[1] = v41;
                sub_1C484143C((uint64_t)&v84);
                sub_1C484143C((uint64_t)&v88);
                v37 += 6;
              }
              *(_QWORD *)&v88 = v82;
              sub_1C5AF3014((void ***)&v88);
            }
          }
        }
        ++v29;
      }
      while (v29 != v30);
      v22 = (uint64_t)v83;
    }
LABEL_101:
    v77 = sub_1C477672C(a4, v22);
    v78 = *(_QWORD *)(a4 + 8);
    if (v78 == *(_QWORD *)a4)
      v79 = (unsigned int *)(a4 + 20);
    else
      v79 = (unsigned int *)(a4 + 16);
    if (v77 != (_QWORD *)(v78 + 8 * *v79))
    {
      *v77 = -2;
      ++*(_DWORD *)(a4 + 24);
    }
    v19 = v95;
    if (v95 != v94)
      goto LABEL_107;
  }
  else
  {
    v7 = *(llvm::OptimizationRemarkEmitter **)(a2 + 16);
    v8 = ****(_QWORD ****)v7;
    if (*(_QWORD *)(v8 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 48))(*(_QWORD *)(v8 + 72)))
    {
      v9 = *v5;
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v97, (const llvm::DebugLoc *)(v9 + 48));
      v11 = *(_QWORD *)(v9 + 40);
      LODWORD(v95) = 11;
      BYTE4(v95) = 2;
      v96 = v10;
      v98[1] = "dfa-jump-threading";
      v98[2] = "MaxPathLengthReached";
      v98[3] = 20;
      v99 = 0;
      v100 = 0;
      v101 = v103;
      v102 = 0x400000000;
      v103[256] = 0;
      v104 = -1;
      v105 = v11;
      v94 = &off_1E814E570;
      *(_QWORD *)&v88 = "Exploration stopped after visiting MaxPathLength=";
      *((_QWORD *)&v88 + 1) = 49;
      sub_1C53B17B4((uint64_t)&v101, (const void **)&v88);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v84, "MaxPathLength", 0xDuLL, dword_1ED81C560);
      v12 = sub_1C47E3888((uint64_t)&v94, (uint64_t)&v84);
      *(_QWORD *)&v88 = " blocks.";
      *((_QWORD *)&v88 + 1) = 8;
      sub_1C53B17B4(v12 + 80, (const void **)&v88);
      sub_1C61998EC((uint64_t)&v88, v12);
      *(_QWORD *)&v88 = &off_1E814E570;
      if (v87 < 0)
        operator delete(__p);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      v94 = &off_1E814E790;
      v13 = (char *)v101;
      if ((_DWORD)v102)
      {
        v14 = (unint64_t)v102 << 6;
        do
        {
          v15 = (void **)&v13[v14];
          if (v13[v14 - 17] < 0)
            operator delete(*(v15 - 5));
          if (*((char *)v15 - 41) < 0)
            operator delete(*(v15 - 8));
          v14 -= 64;
        }
        while (v14);
        v13 = (char *)v101;
      }
      if (v13 != v103)
        free(v13);
      llvm::OptimizationRemarkEmitter::emit(v7, (llvm::DiagnosticInfoOptimizationBase *)&v88);
      *(_QWORD *)&v88 = &off_1E814E790;
      v16 = v91;
      if (v92)
      {
        v17 = (unint64_t)v92 << 6;
        do
        {
          v18 = (void **)((char *)v16 + v17);
          if (*((char *)v16 + v17 - 17) < 0)
            operator delete(*(v18 - 5));
          if (*((char *)v18 - 41) < 0)
            operator delete(*(v18 - 8));
          v17 -= 64;
        }
        while (v17);
        v16 = v91;
      }
      if (v16 != &v93)
      {
        v19 = v16;
LABEL_107:
        free(v19);
      }
    }
  }
}

void sub_1C5AF25BC(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (*(_QWORD *)(a1 + 32) = v7 - (v8 << 9); v8; --v8)
    {
      v14 = *(_QWORD **)(a1 + 8);
      v17 = *v14;
      v15 = (char *)(v14 + 1);
      v16 = v17;
      *(_QWORD *)(a1 + 8) = v15;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v15 <= *(_QWORD *)a1)
        {
          if (v3 == v18)
            v24 = 1;
          else
            v24 = (v3 - v18) >> 2;
          if (v24 >> 61)
            goto LABEL_98;
          v25 = (char *)operator new(8 * v24);
          v26 = &v25[8 * (v24 >> 2)];
          v28 = v3 - v15;
          v27 = v3 == v15;
          v3 = v26;
          if (!v27)
          {
            v3 = &v26[v28 & 0xFFFFFFFFFFFFFFF8];
            v29 = 8 * (v28 >> 3);
            v30 = &v25[8 * (v24 >> 2)];
            do
            {
              v31 = *(_QWORD *)v15;
              v15 += 8;
              *(_QWORD *)v30 = v31;
              v30 += 8;
              v29 -= 8;
            }
            while (v29);
          }
          *(_QWORD *)a1 = v25;
          *(_QWORD *)(a1 + 8) = v26;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v25[8 * v24];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v19 = (uint64_t)&v15[-*(_QWORD *)a1] >> 3;
          if (v19 >= -1)
            v20 = v19 + 1;
          else
            v20 = v19 + 2;
          v21 = &v15[-8 * (v20 >> 1)];
          v22 = v3 - v15;
          if (v3 != v15)
          {
            memmove(&v15[-8 * (v20 >> 1)], v15, v3 - v15);
            v3 = *(char **)(a1 + 8);
          }
          v23 = &v3[-8 * (v20 >> 1)];
          v3 = &v21[v22];
          *(_QWORD *)(a1 + 8) = v23;
          *(_QWORD *)(a1 + 16) = &v21[v22];
        }
      }
      *(_QWORD *)v3 = v16;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
        {
          *(_QWORD *)&v73 = operator new(0x1000uLL);
          sub_1C61351F0(a1, &v73);
          --v6;
          if (!--v9)
            goto LABEL_48;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v73 = operator new(0x1000uLL);
          sub_1C6135314((void **)a1, &v73);
          if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
            v33 = 511;
          else
            v33 = 512;
          v34 = v33 + *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v34;
        }
        v8 = v6;
      }
      else
      {
LABEL_48:
        v34 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v34 - (v8 << 9);
      if (v8)
      {
        v35 = *(char **)(a1 + 16);
        do
        {
          v36 = *(_QWORD **)(a1 + 8);
          v39 = *v36;
          v37 = (char *)(v36 + 1);
          v38 = v39;
          *(_QWORD *)(a1 + 8) = v37;
          if (v35 == *(char **)(a1 + 24))
          {
            v40 = *(char **)a1;
            if ((unint64_t)v37 <= *(_QWORD *)a1)
            {
              if (v35 == v40)
                v46 = 1;
              else
                v46 = (v35 - v40) >> 2;
              if (v46 >> 61)
                goto LABEL_98;
              v47 = (char *)operator new(8 * v46);
              v48 = &v47[8 * (v46 >> 2)];
              v49 = v35 - v37;
              v27 = v35 == v37;
              v35 = v48;
              if (!v27)
              {
                v35 = &v48[v49 & 0xFFFFFFFFFFFFFFF8];
                v50 = 8 * (v49 >> 3);
                v51 = &v47[8 * (v46 >> 2)];
                do
                {
                  v52 = *(_QWORD *)v37;
                  v37 += 8;
                  *(_QWORD *)v51 = v52;
                  v51 += 8;
                  v50 -= 8;
                }
                while (v50);
              }
              *(_QWORD *)a1 = v47;
              *(_QWORD *)(a1 + 8) = v48;
              *(_QWORD *)(a1 + 16) = v35;
              *(_QWORD *)(a1 + 24) = &v47[8 * v46];
              if (v40)
              {
                operator delete(v40);
                v35 = *(char **)(a1 + 16);
              }
            }
            else
            {
              v41 = (uint64_t)&v37[-*(_QWORD *)a1] >> 3;
              if (v41 >= -1)
                v42 = v41 + 1;
              else
                v42 = v41 + 2;
              v43 = &v37[-8 * (v42 >> 1)];
              v44 = v35 - v37;
              if (v35 != v37)
              {
                memmove(&v37[-8 * (v42 >> 1)], v37, v35 - v37);
                v35 = *(char **)(a1 + 8);
              }
              v45 = &v35[-8 * (v42 >> 1)];
              v35 = &v43[v44];
              *(_QWORD *)(a1 + 8) = v45;
              *(_QWORD *)(a1 + 16) = &v43[v44];
            }
          }
          *(_QWORD *)v35 = v38;
          v35 = (char *)(*(_QWORD *)(a1 + 16) + 8);
          *(_QWORD *)(a1 + 16) = v35;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      if (v10 >> 2 <= v9 + (v4 >> 3))
        v12 = v9 + v11;
      else
        v12 = v10 >> 2;
      v75 = a1 + 24;
      if (v12)
      {
        if (v12 >> 61)
LABEL_98:
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v53 = v8 << 9;
      *(_QWORD *)&v73 = v13;
      *((_QWORD *)&v73 + 1) = &v13[8 * (v11 - v8)];
      *(_QWORD *)&v74 = *((_QWORD *)&v73 + 1);
      *((_QWORD *)&v74 + 1) = &v13[8 * v12];
      do
      {
        v72 = operator new(0x1000uLL);
        sub_1C61351F0((uint64_t)&v73, &v72);
        --v9;
      }
      while (v9);
      v54 = *(_QWORD **)(a1 + 8);
      if (v8)
      {
        v55 = (char *)v74;
        do
        {
          if (v55 == *((char **)&v74 + 1))
          {
            v56 = (char *)*((_QWORD *)&v73 + 1);
            v57 = (void *)v73;
            if (*((_QWORD *)&v73 + 1) <= (unint64_t)v73)
            {
              if (v55 == (char *)v73)
                v63 = 1;
              else
                v63 = (uint64_t)&v55[-v73] >> 2;
              if (v63 >> 61)
                goto LABEL_98;
              v64 = (char *)operator new(8 * v63);
              v65 = v55 - v56;
              v27 = v55 == v56;
              v55 = &v64[8 * (v63 >> 2)];
              if (!v27)
              {
                v55 = &v64[8 * (v63 >> 2) + (v65 & 0xFFFFFFFFFFFFFFF8)];
                v66 = 8 * (v65 >> 3);
                v67 = &v64[8 * (v63 >> 2)];
                do
                {
                  v68 = *(_QWORD *)v56;
                  v56 += 8;
                  *(_QWORD *)v67 = v68;
                  v67 += 8;
                  v66 -= 8;
                }
                while (v66);
              }
              *(_QWORD *)&v73 = v64;
              *((_QWORD *)&v73 + 1) = &v64[8 * (v63 >> 2)];
              *(_QWORD *)&v74 = v55;
              *((_QWORD *)&v74 + 1) = &v64[8 * v63];
              if (v57)
                operator delete(v57);
            }
            else
            {
              v58 = (uint64_t)(*((_QWORD *)&v73 + 1) - v73) >> 3;
              if (v58 >= -1)
                v59 = v58 + 1;
              else
                v59 = v58 + 2;
              v60 = *((_QWORD *)&v73 + 1) - 8 * (v59 >> 1);
              v61 = &v55[-*((_QWORD *)&v73 + 1)];
              if (v55 != *((char **)&v73 + 1))
              {
                memmove((void *)(*((_QWORD *)&v73 + 1) - 8 * (v59 >> 1)), *((const void **)&v73 + 1), (size_t)&v55[-*((_QWORD *)&v73 + 1)]);
                v55 = v56;
              }
              v62 = &v55[-8 * (v59 >> 1)];
              v55 = &v61[v60];
              *((_QWORD *)&v73 + 1) = v62;
              *(_QWORD *)&v74 = &v61[v60];
            }
          }
          *(_QWORD *)v55 = *v54;
          v55 = (char *)(v74 + 8);
          *(_QWORD *)&v74 = v74 + 8;
          v54 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v54;
          --v8;
        }
        while (v8);
      }
      v69 = *(_QWORD **)(a1 + 16);
      if (v69 != v54)
      {
        do
          sub_1C6135314((void **)&v73, --v69);
        while (v69 != *(_QWORD **)(a1 + 8));
      }
      v70 = *(char **)a1;
      v71 = v74;
      *(_OWORD *)a1 = v73;
      *(_OWORD *)(a1 + 16) = v71;
      *(_QWORD *)(a1 + 32) -= v53;
      if (v70)
        operator delete(v70);
    }
  }
}

uint64_t sub_1C5AF2AA8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = (uint64_t *)(*(_QWORD *)v7 + 8 * (v4 & 0x1FF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = *(_QWORD *)v10 + 8 * (v9 & 0x1FF);
  }
  if ((uint64_t *)v11 == v8)
    v12 = 0;
  else
    v12 = ((v11 - *(_QWORD *)v10) >> 3) + ((v10 - v7) << 6) - (((uint64_t)v8 - *(_QWORD *)v7) >> 3);
  sub_1C5AF2B6C((_QWORD *)a1, v7, v8, v12);
  return a1;
}

void sub_1C5AF2B6C(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5];
  v12 = v11 + a1[4];
  v13 = v10 - v12;
  if (a4 > v13)
  {
    sub_1C5AF25BC((uint64_t)a1, a4 - v13);
    v11 = a1[5];
    v8 = a1[1];
    v9 = a1[2];
    v12 = a1[4] + v11;
  }
  v14 = (_QWORD *)(v8 + 8 * (v12 >> 9));
  if (v9 == v8)
  {
    v15 = 0;
    if (a4)
      goto LABEL_8;
LABEL_11:
    v18 = v15;
    v17 = v14;
    goto LABEL_14;
  }
  v15 = *v14 + 8 * (v12 & 0x1FF);
  if (!a4)
    goto LABEL_11;
LABEL_8:
  v16 = a4 + ((v15 - *v14) >> 3);
  if (v16 < 1)
  {
    v19 = 511 - v16;
    LOWORD(v16) = ~(511 - v16);
    v17 = &v14[-(v19 >> 9)];
  }
  else
  {
    v17 = &v14[(unint64_t)v16 >> 9];
  }
  v18 = *v17 + 8 * (v16 & 0x1FF);
LABEL_14:
  if (v15 != v18)
  {
    do
    {
      v20 = v18;
      if (v14 != v17)
        v20 = *v14 + 4096;
      if (v15 == v20)
      {
        v20 = v15;
      }
      else
      {
        v21 = (_QWORD *)v15;
        do
        {
          v22 = *a3++;
          *v21++ = v22;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            v23 = (uint64_t *)a2[1];
            ++a2;
            a3 = v23;
          }
        }
        while (v21 != (_QWORD *)v20);
      }
      v11 += (v20 - v15) >> 3;
      if (v14 == v17)
        break;
      v24 = v14[1];
      ++v14;
      v15 = v24;
    }
    while (v24 != v18);
    a1[5] = v11;
  }
}

_QWORD *sub_1C5AF2CC4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE **v26;
  _BYTE *v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;

  if (a1 == a2)
    return a1;
  v4 = a2[4];
  v5 = a2[1];
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (a2[2] == v5)
  {
    v7 = 0;
    v10 = 0;
    v9 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v7 = (_BYTE *)(*v6 + 8 * (a2[4] & 0x1FFLL));
    v8 = a2[5] + v4;
    v9 = (char *)(v5 + 8 * (v8 >> 9));
    v10 = *(_QWORD *)v9 + 8 * (v8 & 0x1FF);
  }
  if ((_BYTE *)v10 == v7)
  {
    v13 = 0;
LABEL_18:
    v22 = a1[1];
    v23 = (void **)(v22 + 8 * (a1[4] >> 9));
    if (a1[2] == v22)
    {
      v24 = 0;
      if (v13)
        goto LABEL_20;
    }
    else
    {
      v24 = (uint64_t)*v23 + 8 * (a1[4] & 0x1FFLL);
      if (v13)
      {
LABEL_20:
        v25 = v13 + ((uint64_t)&v7[-*v6] >> 3);
        if (v25 < 1)
        {
          v28 = 511 - v25;
          v26 = (_BYTE **)&v6[-(v28 >> 9)];
          v27 = &(*v26)[8 * (~(_WORD)v28 & 0x1FF)];
        }
        else
        {
          v26 = (_BYTE **)&v6[(unint64_t)v25 >> 9];
          v27 = &(*v26)[8 * (v25 & 0x1FF)];
        }
        goto LABEL_25;
      }
    }
    v27 = v7;
    v26 = (_BYTE **)v6;
LABEL_25:
    v29 = v23;
    v30 = v24;
    sub_1C5194838(v6, v7, v26, v27, &v29);
    sub_1C6312188((_BOOL8)a1, (char *)v29, v30);
    return a1;
  }
  v11 = ((v10 - *(_QWORD *)v9) >> 3) + ((v9 - (char *)v6) << 6);
  v12 = (uint64_t)&v7[-*v6];
  v13 = v11 - (v12 >> 3);
  v14 = a1[5];
  if (v14 >= v13)
    goto LABEL_18;
  if (v14)
  {
    v15 = (v12 >> 3) + v14;
    if (v15 < 1)
    {
      v18 = 511 - v15;
      v16 = (_BYTE **)&v6[-(v18 >> 9)];
      v17 = (uint64_t *)&(*v16)[8 * (~(_WORD)v18 & 0x1FF)];
    }
    else
    {
      v16 = (_BYTE **)&v6[(unint64_t)v15 >> 9];
      v17 = (uint64_t *)&(*v16)[8 * (v15 & 0x1FF)];
    }
  }
  else
  {
    v17 = (uint64_t *)v7;
    v16 = (_BYTE **)(v5 + 8 * (v4 >> 9));
  }
  v19 = a1[1];
  if (a1[2] == v19)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
  v29 = (void **)(v19 + 8 * (a1[4] >> 9));
  v30 = v20;
  sub_1C5194838(v6, v7, v16, v17, &v29);
  sub_1C5AF2B6C(a1, v16, v17, v13 - a1[5]);
  return a1;
}

_QWORD *sub_1C5AF2EE8(_QWORD *a1, _QWORD *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (a1 == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        if (++a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }
    if (a1)
    {
      if ((_QWORD *)(*a1 + 4096) == a2)
        ++a1;
      return a1;
    }
    return 0;
  }
  else
  {
    v5 = *a1 + 4096;
    if ((_QWORD *)v5 != a2)
    {
      while (*a2 != *a5)
      {
        if (++a2 == (_QWORD *)v5)
          goto LABEL_5;
      }
      return a1;
    }
LABEL_5:
    v6 = a1 + 1;
    if (a1 + 1 != a3)
    {
LABEL_6:
      v7 = 0;
      a1 = v6;
      v8 = *v6;
      while (*(_QWORD *)(v8 + v7) != *a5)
      {
        v7 += 8;
        if (v7 == 4096)
        {
          v6 = a1 + 1;
          if (a1 + 1 != a3)
            goto LABEL_6;
          goto LABEL_10;
        }
      }
      return a1;
    }
LABEL_10:
    v9 = *a3;
    if (*a3 != a4)
    {
      v10 = 0;
      do
      {
        if (*v9 == *a5)
          break;
        ++v10;
        ++v9;
      }
      while (v9 != a4);
      if (v10 == 512)
      {
        a1 += 2;
        return a1;
      }
    }
  }
  return a3;
}

void sub_1C5AF3014(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1C484143C(v4 - 48);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_1C5AF3084(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_1C484143C(v3 - 72);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1C5AF30DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = a1;
  v4 = sub_1C5AF3194(a3, &v12);
  v6 = (const void *)*v4;
  v5 = v4[1];
  v7 = v5 - *v4;
  if (v5 == *v4)
    return 0;
  if (v7 < 0)
    abort();
  v8 = (char *)operator new(v5 - *v4);
  memmove(v8, v6, v7);
  v9 = 0;
  while (*(_QWORD *)&v8[v9 + 8] != a2)
  {
    v9 += 16;
    if (16 * (v7 >> 4) == v9)
    {
      v10 = 0;
      goto LABEL_9;
    }
  }
  v10 = *(_QWORD *)&v8[v9];
LABEL_9:
  operator delete(v8);
  return v10;
}

uint64_t *sub_1C5AF3194(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v25 = 0;
  v4 = sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v25);
  v5 = v25;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v26 = v25;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v10 = *(_QWORD *)a1;
    v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40)
      v14 = v13 + 1;
    else
      v14 = 64;
    *(_DWORD *)(a1 + 16) = v14;
    v15 = operator new(32 * v14, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v15;
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v16)
      {
        v17 = 32 * v16;
        do
        {
          *v15 = -4096;
          v15 += 4;
          v17 -= 32;
        }
        while (v17);
      }
      if ((_DWORD)v7)
      {
        v18 = 0;
        v19 = 32 * v7;
        v20 = v10;
        do
        {
          v21 = *(_QWORD *)v20;
          if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v27 = 0;
            sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v21, &v27);
            v22 = v27;
            *v27 = v21;
            v22[1] = 0;
            v22[2] = 0;
            v22[3] = 0;
            *(_OWORD *)(v22 + 1) = *(_OWORD *)(v20 + 8);
            v22[3] = *(_QWORD *)(v20 + 24);
            ++v18;
            *(_QWORD *)(v20 + 8) = 0;
            *(_QWORD *)(v20 + 16) = 0;
            *(_QWORD *)(v20 + 24) = 0;
            *(_DWORD *)(a1 + 8) = v18;
          }
          v20 += 32;
          v19 -= 32;
        }
        while (v19);
      }
      MEMORY[0x1CAA32FB4](v10, 8);
      v15 = *(_QWORD **)a1;
      LODWORD(v23) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v23 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v23)
      {
        v24 = 0;
        do
        {
          v15[v24] = -4096;
          v24 += 4;
        }
        while (4 * v23 != v24);
      }
    }
    sub_1C4DCDF60((uint64_t)v15, v23, *a2, &v26);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v26;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v5 = *a2;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = 0;
  return v5 + 1;
}

uint64_t *sub_1C5AF3394(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (_QWORD *)(v3 + 16);
    do
    {
      if ((*(v5 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (void *)*(v5 - 1);
        if (v6)
        {
          *v5 = v6;
          operator delete(v6);
        }
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C5AF3408(llvm::BasicBlock *a1, unint64_t a2, llvm::BasicBlock *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *i;
  int v15;
  unsigned int v16;
  unint64_t v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  result = sub_1C5AF3698(*(_QWORD *)(a2 + 8), (uint64_t)a1);
  if ((_DWORD)result)
  {
    v9 = (_QWORD *)*((_QWORD *)a1 + 5);
    if (v9 == (_QWORD *)((char *)a1 + 40))
    {
      v11 = 0;
    }
    else
    {
      if (v9)
        v10 = v9 - 3;
      else
        v10 = 0;
      if (*((unsigned __int8 *)v10 + 16) - 29 >= 0xB)
        v11 = 0;
      else
        v11 = v10;
    }
    v12 = 0;
    v13 = 0;
    for (i = v11 - 8; ; i += 4)
    {
      v15 = *((unsigned __int8 *)v11 + 16);
      if (v15 != 30)
        __asm { BR              X11 }
      v16 = (*((_DWORD *)v11 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
      if (v13 >= v16)
        break;
      if (v11[-4 * v13 - 4] == a2)
      {
        llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)a2, a1, 1);
        llvm::Instruction::setSuccessor((llvm::Instruction *)v11, v13, a3);
      }
      ++v13;
      v12 += 2;
    }
    v17[0] = (unint64_t)a1;
    v17[1] = a2 | 4;
    v17[2] = (unint64_t)a1;
    v17[3] = (unint64_t)a3 & 0xFFFFFFFFFFFFFFFBLL;
    return llvm::DomTreeUpdater::applyUpdates(a4, v17, 2);
  }
  return result;
}

BOOL sub_1C5AF3698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v6;
  BOOL v7;

  if (a1)
  {
    while (1)
    {
      v2 = *(_QWORD *)(a1 + 24);
      v3 = *(unsigned __int8 *)(v2 + 16);
      v4 = v2 && v3 >= 0x1C;
      if (v4 && v3 - 29 <= 0xA)
        break;
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        return a1 != 0;
    }
LABEL_20:
    if (*(_QWORD *)(v2 + 40) != a2)
    {
      while (1)
      {
        a1 = *(_QWORD *)(a1 + 8);
        if (!a1)
          break;
        v2 = *(_QWORD *)(a1 + 24);
        v6 = *(unsigned __int8 *)(v2 + 16);
        if (v2)
          v7 = v6 >= 0x1C;
        else
          v7 = 0;
        if (v7 && v6 - 29 <= 0xA)
          goto LABEL_20;
      }
    }
  }
  return a1 != 0;
}

uint64_t sub_1C5AF3700(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = (v2 >> 1) & 0x3FFFFFF;
  v4 = (v3 - 1);
  if (v3 == 1)
    goto LABEL_16;
  v5 = 0;
  v6 = a1 - 32 * (v2 & 0x7FFFFFF);
  v7 = 2 * v4;
  while (1)
  {
    v8 = a1 - 32 * (v2 & 0x7FFFFFF);
    if ((v2 & 0x40000000) != 0)
      v8 = *(_QWORD *)(a1 - 8);
    v9 = *(_QWORD *)(v8 + 32 * (((_DWORD)v5 + 2) & 0xFFFFFFFE));
    v10 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v10 = (_QWORD *)*v10;
    if (*v10 == a2)
      break;
    v5 += 2;
    if (v7 == v5)
      goto LABEL_16;
  }
  if ((v2 & 0x40000000) != 0)
    v6 = *(_QWORD *)(a1 - 8);
  v11 = v5 == 0x1FFFFFFFCLL ? 1 : (v5 + 3);
  v12 = *(_QWORD *)(v6 + 32 * v11);
  if (!v12)
  {
LABEL_16:
    if ((v2 & 0x40000000) != 0)
      v13 = *(_QWORD *)(a1 - 8);
    else
      v13 = a1 - 32 * (v2 & 0x7FFFFFF);
    return *(_QWORD *)(v13 + 32);
  }
  return v12;
}

uint64_t sub_1C5AF37B0(uint64_t result, char *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t *i;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  char *v141;
  char *j;
  uint64_t v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  char *v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t *v192;
  BOOL v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int64_t v223;
  int64_t v224;
  int64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _WORD *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _WORD *v252;
  __int16 v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t *v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _WORD *v320;
  __int16 v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 16;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - (char *)v9;
    v11 = (a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v186 = *((_QWORD *)a2 - 2);
        v187 = *v9;
        if (v186 == *v9)
        {
          v370 = *((_QWORD *)a2 - 1);
          v371 = v9[1];
          v372 = *(_QWORD *)(v370 + 40);
          v373 = *(__int16 *)(v372 + 18);
          if ((v373 & 0x80000000) == 0)
          {
            v378 = *(_QWORD *)(v372 + 48);
            if (v378 != v372 + 40)
            {
              v379 = 0;
              do
              {
                v380 = v378 - 24;
                if (!v378)
                  v380 = 0;
                *(_DWORD *)(v380 + 56) = v379++;
                v378 = *(_QWORD *)(v378 + 8);
              }
              while (v378 != v372 + 40);
            }
            *(_WORD *)(v372 + 18) = v373 | 0x8000;
          }
          v190 = *(_DWORD *)(v370 + 56);
          v191 = *(_DWORD *)(v371 + 56);
        }
        else
        {
          v188 = *(_QWORD *)(v186 + 40);
          v189 = *(__int16 *)(v188 + 18);
          if ((v189 & 0x80000000) == 0)
          {
            v375 = *(_QWORD *)(v188 + 48);
            if (v375 != v188 + 40)
            {
              v376 = 0;
              do
              {
                v377 = v375 - 24;
                if (!v375)
                  v377 = 0;
                *(_DWORD *)(v377 + 56) = v376++;
                v375 = *(_QWORD *)(v375 + 8);
              }
              while (v375 != v188 + 40);
            }
            *(_WORD *)(v188 + 18) = v189 | 0x8000;
          }
          v190 = *(_DWORD *)(v186 + 56);
          v191 = *(_DWORD *)(v187 + 56);
        }
        if (v190 < v191)
        {
          *v9 = v186;
          *((_QWORD *)a2 - 2) = v187;
          v374 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v374;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C5AF547C(v9, v9 + 2, (uint64_t *)a2 - 2);
      case 4:
        return (uint64_t)sub_1C5AF5CAC(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2);
      case 5:
        return (uint64_t)sub_1C5AF50AC(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (v9 == (uint64_t *)a2)
              return result;
            v223 = (unint64_t)(v11 - 2) >> 1;
            v224 = v223;
            while (1)
            {
              v225 = v224;
              if (v223 < v224)
                goto LABEL_351;
              v226 = (2 * v224) | 1;
              v227 = &v9[2 * v226];
              if (2 * v225 + 2 < v11)
                break;
LABEL_342:
              v237 = &v9[2 * v225];
              v238 = *v227;
              v239 = *v237;
              if (*v227 == *v237)
              {
                v243 = v227[1];
                v242 = v9[2 * v225 + 1];
                v244 = *(_QWORD *)(v243 + 40);
                v245 = *(__int16 *)(v244 + 18);
                if ((v245 & 0x80000000) == 0)
                {
                  v279 = *(_QWORD *)(v244 + 48);
                  if (v279 != v244 + 40)
                  {
                    v280 = 0;
                    do
                    {
                      v281 = v279 - 24;
                      if (!v279)
                        v281 = 0;
                      *(_DWORD *)(v281 + 56) = v280++;
                      v279 = *(_QWORD *)(v279 + 8);
                    }
                    while (v279 != v244 + 40);
                  }
                  *(_WORD *)(v244 + 18) = v245 | 0x8000;
                }
                result = *(unsigned int *)(v242 + 56);
                if (*(_DWORD *)(v243 + 56) >= result)
                  goto LABEL_348;
              }
              else
              {
                v240 = *(_QWORD *)(v238 + 40);
                v241 = *(__int16 *)(v240 + 18);
                if ((v241 & 0x80000000) == 0)
                {
                  result = v240 + 40;
                  v276 = *(_QWORD *)(v240 + 48);
                  if (v276 != v240 + 40)
                  {
                    v277 = 0;
                    do
                    {
                      v278 = v276 - 24;
                      if (!v276)
                        v278 = 0;
                      *(_DWORD *)(v278 + 56) = v277++;
                      v276 = *(_QWORD *)(v276 + 8);
                    }
                    while (v276 != result);
                  }
                  *(_WORD *)(v240 + 18) = v241 | 0x8000;
                }
                if (*(_DWORD *)(v238 + 56) >= *(_DWORD *)(v239 + 56))
                {
                  v242 = v237[1];
LABEL_348:
                  *v237 = v238;
                  v237[1] = v227[1];
                  if (v223 < v226)
                  {
LABEL_349:
                    v246 = v227;
LABEL_350:
                    *v246 = v239;
                    v246[1] = v242;
                    goto LABEL_351;
                  }
                  while (2)
                  {
                    v247 = 2 * v226;
                    v226 = (2 * v226) | 1;
                    v246 = &v9[2 * v226];
                    v248 = v247 + 2;
                    if (v248 < v11)
                    {
                      v249 = v246[2];
                      v250 = *v246;
                      if (*v246 == v249)
                      {
                        v250 = v9[2 * v226 + 1];
                        v249 = v246[3];
                        v258 = *(_QWORD *)(v250 + 40);
                        v252 = (_WORD *)(v258 + 18);
                        v253 = *(_WORD *)(v258 + 18);
                        if ((v253 & 0x80000000) == 0)
                        {
                          v272 = v258 + 40;
                          v273 = *(_QWORD *)(v258 + 48);
                          if (v273 != v272)
                          {
                            v274 = 0;
                            do
                            {
                              v275 = v273 - 24;
                              if (!v273)
                                v275 = 0;
                              *(_DWORD *)(v275 + 56) = v274++;
                              v273 = *(_QWORD *)(v273 + 8);
                            }
                            while (v273 != v272);
                          }
LABEL_390:
                          *v252 = v253 | 0x8000;
                        }
                      }
                      else
                      {
                        v251 = *(_QWORD *)(v250 + 40);
                        v252 = (_WORD *)(v251 + 18);
                        v253 = *(_WORD *)(v251 + 18);
                        if ((v253 & 0x80000000) == 0)
                        {
                          v254 = v251 + 40;
                          v255 = *(_QWORD *)(v251 + 48);
                          if (v255 != v254)
                          {
                            v256 = 0;
                            do
                            {
                              v257 = v255 - 24;
                              if (!v255)
                                v257 = 0;
                              *(_DWORD *)(v257 + 56) = v256++;
                              v255 = *(_QWORD *)(v255 + 8);
                            }
                            while (v255 != v254);
                          }
                          goto LABEL_390;
                        }
                      }
                      if (*(_DWORD *)(v250 + 56) < *(_DWORD *)(v249 + 56))
                      {
                        v246 += 2;
                        v226 = v248;
                      }
                    }
                    v259 = *v246;
                    if (*v246 == v239)
                    {
                      v263 = v246[1];
                      v264 = *(_QWORD *)(v263 + 40);
                      v265 = *(__int16 *)(v264 + 18);
                      if ((v265 & 0x80000000) == 0)
                      {
                        v269 = *(_QWORD *)(v264 + 48);
                        if (v269 != v264 + 40)
                        {
                          v270 = 0;
                          do
                          {
                            v271 = v269 - 24;
                            if (!v269)
                              v271 = 0;
                            *(_DWORD *)(v271 + 56) = v270++;
                            v269 = *(_QWORD *)(v269 + 8);
                          }
                          while (v269 != v264 + 40);
                        }
                        *(_WORD *)(v264 + 18) = v265 | 0x8000;
                      }
                      v262 = *(_DWORD *)(v263 + 56);
                      result = *(unsigned int *)(v242 + 56);
                    }
                    else
                    {
                      v260 = *(_QWORD *)(v259 + 40);
                      v261 = *(__int16 *)(v260 + 18);
                      if ((v261 & 0x80000000) == 0)
                      {
                        v266 = *(_QWORD *)(v260 + 48);
                        if (v266 != v260 + 40)
                        {
                          v267 = 0;
                          do
                          {
                            v268 = v266 - 24;
                            if (!v266)
                              v268 = 0;
                            *(_DWORD *)(v268 + 56) = v267++;
                            v266 = *(_QWORD *)(v266 + 8);
                          }
                          while (v266 != v260 + 40);
                        }
                        *(_WORD *)(v260 + 18) = v261 | 0x8000;
                      }
                      v262 = *(_DWORD *)(v259 + 56);
                      result = *(unsigned int *)(v239 + 56);
                    }
                    if (v262 < result)
                      goto LABEL_349;
                    *v227 = v259;
                    v227[1] = v246[1];
                    v227 = v246;
                    if (v223 < v226)
                      goto LABEL_350;
                    continue;
                  }
                }
              }
LABEL_351:
              v224 = v225 - 1;
              if (!v225)
              {
                while (1)
                {
                  v309 = 0;
                  v310 = *v9;
                  v311 = v9[1];
                  v312 = v9;
                  do
                  {
                    v313 = v309 + 1;
                    v314 = (char *)&v312[2 * v309 + 2];
                    v315 = (2 * v309) | 1;
                    v316 = 2 * v309 + 2;
                    if (v316 >= v11)
                      goto LABEL_454;
                    v317 = *((_QWORD *)v314 + 2);
                    v318 = *(_QWORD *)v314;
                    if (*(_QWORD *)v314 == v317)
                    {
                      v318 = v312[2 * v313 + 1];
                      v317 = *((_QWORD *)v314 + 3);
                      v326 = *(_QWORD *)(v318 + 40);
                      v320 = (_WORD *)(v326 + 18);
                      v321 = *(_WORD *)(v326 + 18);
                      if (v321 < 0)
                        goto LABEL_452;
                      v327 = v326 + 40;
                      v328 = *(_QWORD *)(v326 + 48);
                      if (v328 != v327)
                      {
                        v329 = 0;
                        do
                        {
                          v330 = v328 - 24;
                          if (!v328)
                            v330 = 0;
                          *(_DWORD *)(v330 + 56) = v329++;
                          v328 = *(_QWORD *)(v328 + 8);
                        }
                        while (v328 != v327);
                      }
                    }
                    else
                    {
                      v319 = *(_QWORD *)(v318 + 40);
                      v320 = (_WORD *)(v319 + 18);
                      v321 = *(_WORD *)(v319 + 18);
                      if (v321 < 0)
                        goto LABEL_452;
                      v322 = v319 + 40;
                      v323 = *(_QWORD *)(v319 + 48);
                      if (v323 != v322)
                      {
                        v324 = 0;
                        do
                        {
                          v325 = v323 - 24;
                          if (!v323)
                            v325 = 0;
                          *(_DWORD *)(v325 + 56) = v324++;
                          v323 = *(_QWORD *)(v323 + 8);
                        }
                        while (v323 != v322);
                      }
                    }
                    *v320 = v321 | 0x8000;
LABEL_452:
                    result = *(unsigned int *)(v317 + 56);
                    if (*(_DWORD *)(v318 + 56) < result)
                    {
                      v314 += 16;
                      v315 = v316;
                    }
LABEL_454:
                    *v312 = *(_QWORD *)v314;
                    v312[1] = *((_QWORD *)v314 + 1);
                    v312 = v314;
                    v309 = v315;
                  }
                  while (v315 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                  if (v314 == a2 - 16)
                  {
                    *(_QWORD *)v314 = v310;
                    *((_QWORD *)v314 + 1) = v311;
                  }
                  else
                  {
                    *(_QWORD *)v314 = *((_QWORD *)a2 - 2);
                    *((_QWORD *)v314 + 1) = *((_QWORD *)a2 - 1);
                    *((_QWORD *)a2 - 2) = v310;
                    *((_QWORD *)a2 - 1) = v311;
                    v331 = v314 - (char *)v9 + 16;
                    if (v331 >= 17)
                    {
                      v332 = ((unint64_t)v331 >> 4) - 2;
                      v287 = v332 >> 1;
                      v296 = &v9[2 * (v332 >> 1)];
                      v333 = *v296;
                      v334 = *(_QWORD *)v314;
                      if (*v296 == *(_QWORD *)v314)
                      {
                        v339 = v296[1];
                        v340 = *((_QWORD *)v314 + 1);
                        result = *(_QWORD *)(v339 + 40);
                        v341 = *(__int16 *)(result + 18);
                        if ((v341 & 0x80000000) == 0)
                        {
                          v306 = *(_QWORD *)(result + 48);
                          if (v306 != result + 40)
                          {
                            v307 = 0;
                            do
                            {
                              v308 = v306 - 24;
                              if (!v306)
                                v308 = 0;
                              *(_DWORD *)(v308 + 56) = v307++;
                              v306 = *(_QWORD *)(v306 + 8);
                            }
                            while (v306 != result + 40);
                          }
                          *(_WORD *)(result + 18) = v341 | 0x8000;
                        }
                        v337 = *(_DWORD *)(v339 + 56);
                        v338 = *(_DWORD *)(v340 + 56);
                      }
                      else
                      {
                        v335 = *(_QWORD *)(v333 + 40);
                        v336 = *(__int16 *)(v335 + 18);
                        if ((v336 & 0x80000000) == 0)
                        {
                          result = v335 + 40;
                          v303 = *(_QWORD *)(v335 + 48);
                          if (v303 != v335 + 40)
                          {
                            v304 = 0;
                            do
                            {
                              v305 = v303 - 24;
                              if (!v303)
                                v305 = 0;
                              *(_DWORD *)(v305 + 56) = v304++;
                              v303 = *(_QWORD *)(v303 + 8);
                            }
                            while (v303 != result);
                          }
                          *(_WORD *)(v335 + 18) = v336 | 0x8000;
                        }
                        v337 = *(_DWORD *)(v333 + 56);
                        v338 = *(_DWORD *)(v334 + 56);
                      }
                      if (v337 < v338)
                      {
                        v342 = *((_QWORD *)v314 + 1);
                        *(_QWORD *)v314 = v333;
                        *((_QWORD *)v314 + 1) = v9[2 * v287 + 1];
                        if (v332 >= 2)
                        {
                          while (1)
                          {
                            v286 = v287 - 1;
                            v287 = (v287 - 1) >> 1;
                            v288 = &v9[2 * v287];
                            v289 = *v288;
                            if (*v288 == v334)
                            {
                              v293 = v288[1];
                              v294 = *(_QWORD *)(v293 + 40);
                              v295 = *(__int16 *)(v294 + 18);
                              if ((v295 & 0x80000000) == 0)
                              {
                                v300 = *(_QWORD *)(v294 + 48);
                                if (v300 != v294 + 40)
                                {
                                  v301 = 0;
                                  do
                                  {
                                    v302 = v300 - 24;
                                    if (!v300)
                                      v302 = 0;
                                    *(_DWORD *)(v302 + 56) = v301++;
                                    v300 = *(_QWORD *)(v300 + 8);
                                  }
                                  while (v300 != v294 + 40);
                                }
                                *(_WORD *)(v294 + 18) = v295 | 0x8000;
                              }
                              v292 = *(_DWORD *)(v293 + 56);
                              result = *(unsigned int *)(v342 + 56);
                            }
                            else
                            {
                              v290 = *(_QWORD *)(v289 + 40);
                              v291 = *(__int16 *)(v290 + 18);
                              if ((v291 & 0x80000000) == 0)
                              {
                                v297 = *(_QWORD *)(v290 + 48);
                                if (v297 != v290 + 40)
                                {
                                  v298 = 0;
                                  do
                                  {
                                    v299 = v297 - 24;
                                    if (!v297)
                                      v299 = 0;
                                    *(_DWORD *)(v299 + 56) = v298++;
                                    v297 = *(_QWORD *)(v297 + 8);
                                  }
                                  while (v297 != v290 + 40);
                                }
                                *(_WORD *)(v290 + 18) = v291 | 0x8000;
                              }
                              v292 = *(_DWORD *)(v289 + 56);
                              result = *(unsigned int *)(v334 + 56);
                            }
                            if (v292 >= result)
                              break;
                            *v296 = v289;
                            v296[1] = v9[2 * v287 + 1];
                            v296 = &v9[2 * v287];
                            if (v286 <= 1)
                              goto LABEL_473;
                          }
                        }
                        v288 = v296;
LABEL_473:
                        *v288 = v334;
                        v288[1] = v342;
                      }
                    }
                  }
                  a2 -= 16;
                  if (v11-- <= 2)
                    return result;
                }
              }
            }
            v228 = v227[2];
            v229 = *v227;
            if (*v227 == v228)
            {
              v229 = v9[2 * v226 + 1];
              v228 = v227[3];
              v236 = *(_QWORD *)(v229 + 40);
              v231 = (_WORD *)(v236 + 18);
              result = *(__int16 *)(v236 + 18);
              if (*(__int16 *)(v236 + 18) < 0)
                goto LABEL_340;
              v282 = v236 + 40;
              v283 = *(_QWORD *)(v236 + 48);
              if (v283 != v282)
              {
                v284 = 0;
                do
                {
                  v285 = v283 - 24;
                  if (!v283)
                    v285 = 0;
                  *(_DWORD *)(v285 + 56) = v284++;
                  v283 = *(_QWORD *)(v283 + 8);
                }
                while (v283 != v282);
              }
            }
            else
            {
              v230 = *(_QWORD *)(v229 + 40);
              v231 = (_WORD *)(v230 + 18);
              result = *(__int16 *)(v230 + 18);
              if (*(__int16 *)(v230 + 18) < 0)
                goto LABEL_340;
              v232 = v230 + 40;
              v233 = *(_QWORD *)(v230 + 48);
              if (v233 != v232)
              {
                v234 = 0;
                do
                {
                  v235 = v233 - 24;
                  if (!v233)
                    v235 = 0;
                  *(_DWORD *)(v235 + 56) = v234++;
                  v233 = *(_QWORD *)(v233 + 8);
                }
                while (v233 != v232);
              }
            }
            result = result | 0x8000;
            *v231 = result;
LABEL_340:
            if (*(_DWORD *)(v229 + 56) < *(_DWORD *)(v228 + 56))
            {
              v227 += 2;
              v226 = 2 * v225 + 2;
            }
            goto LABEL_342;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[2 * ((unint64_t)v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (uint64_t)sub_1C5AF547C(&v7[2 * ((unint64_t)v11 >> 1)], v7, (uint64_t *)a2 - 2);
          }
          else
          {
            sub_1C5AF547C(v7, &v7[2 * ((unint64_t)v11 >> 1)], (uint64_t *)a2 - 2);
            sub_1C5AF547C(v7 + 2, v13 - 2, (uint64_t *)a2 - 4);
            sub_1C5AF547C(v7 + 4, &v7[2 * v12 + 2], (uint64_t *)a2 - 6);
            result = (uint64_t)sub_1C5AF547C(v13 - 2, v13, &v7[2 * v12 + 2]);
            v14 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v14;
          }
          --a3;
          v15 = *v7;
          if ((a4 & 1) != 0)
            goto LABEL_16;
          v16 = *(v7 - 2);
          if (v16 != v15)
          {
            v17 = *(_QWORD *)(v16 + 40);
            v18 = *(__int16 *)(v17 + 18);
            if ((v18 & 0x80000000) == 0)
            {
              v104 = *(_QWORD *)(v17 + 48);
              if (v104 != v17 + 40)
              {
                v105 = 0;
                do
                {
                  v106 = v104 - 24;
                  if (!v104)
                    v106 = 0;
                  *(_DWORD *)(v106 + 56) = v105++;
                  v104 = *(_QWORD *)(v104 + 8);
                }
                while (v104 != v17 + 40);
              }
              *(_WORD *)(v17 + 18) = v18 | 0x8000;
            }
            if (*(_DWORD *)(v16 + 56) < *(_DWORD *)(v15 + 56))
              goto LABEL_16;
            v19 = v7[1];
LABEL_135:
            v107 = *(_QWORD *)v8;
            if (v15 == *(_QWORD *)v8)
            {
              v126 = *((_QWORD *)a2 - 1);
              v127 = *(_QWORD *)(v19 + 40);
              v128 = *(__int16 *)(v127 + 18);
              if ((v128 & 0x80000000) == 0)
              {
                v183 = *(_QWORD *)(v127 + 48);
                if (v183 != v127 + 40)
                {
                  v184 = 0;
                  do
                  {
                    v185 = v183 - 24;
                    if (!v183)
                      v185 = 0;
                    *(_DWORD *)(v185 + 56) = v184++;
                    v183 = *(_QWORD *)(v183 + 8);
                  }
                  while (v183 != v127 + 40);
                }
                *(_WORD *)(v127 + 18) = v128 | 0x8000;
              }
              if (*(_DWORD *)(v19 + 56) < *(_DWORD *)(v126 + 56))
              {
LABEL_138:
                v110 = v7;
                do
                {
                  v9 = v110 + 2;
                  v111 = v110[2];
                  if (v15 == v111)
                  {
                    v111 = v110[3];
                    v115 = *(_QWORD *)(v19 + 40);
                    v116 = *(__int16 *)(v115 + 18);
                    if ((v116 & 0x80000000) == 0)
                    {
                      v120 = *(_QWORD *)(v115 + 48);
                      if (v120 != v115 + 40)
                      {
                        v121 = 0;
                        do
                        {
                          v122 = v120 - 24;
                          if (!v120)
                            v122 = 0;
                          *(_DWORD *)(v122 + 56) = v121++;
                          v120 = *(_QWORD *)(v120 + 8);
                        }
                        while (v120 != v115 + 40);
                      }
                      *(_WORD *)(v115 + 18) = v116 | 0x8000;
                    }
                    v114 = *(_DWORD *)(v19 + 56);
                  }
                  else
                  {
                    v112 = *(_QWORD *)(v15 + 40);
                    v113 = *(__int16 *)(v112 + 18);
                    if ((v113 & 0x80000000) == 0)
                    {
                      v117 = *(_QWORD *)(v112 + 48);
                      if (v117 != v112 + 40)
                      {
                        v118 = 0;
                        do
                        {
                          v119 = v117 - 24;
                          if (!v117)
                            v119 = 0;
                          *(_DWORD *)(v119 + 56) = v118++;
                          v117 = *(_QWORD *)(v117 + 8);
                        }
                        while (v117 != v112 + 40);
                      }
                      *(_WORD *)(v112 + 18) = v113 | 0x8000;
                    }
                    v114 = *(_DWORD *)(v15 + 56);
                  }
                  v110 = v9;
                }
                while (v114 >= *(_DWORD *)(v111 + 56));
                goto LABEL_187;
              }
            }
            else
            {
              v108 = *(_QWORD *)(v15 + 40);
              v109 = *(__int16 *)(v108 + 18);
              if ((v109 & 0x80000000) == 0)
              {
                v180 = *(_QWORD *)(v108 + 48);
                if (v180 != v108 + 40)
                {
                  v181 = 0;
                  do
                  {
                    v182 = v180 - 24;
                    if (!v180)
                      v182 = 0;
                    *(_DWORD *)(v182 + 56) = v181++;
                    v180 = *(_QWORD *)(v180 + 8);
                  }
                  while (v180 != v108 + 40);
                }
                *(_WORD *)(v108 + 18) = v109 | 0x8000;
              }
              if (*(_DWORD *)(v15 + 56) < *(_DWORD *)(v107 + 56))
                goto LABEL_138;
            }
            v9 = v7 + 2;
            for (i = v7; v9 < (uint64_t *)a2; i = v130)
            {
              v130 = v9;
              v131 = i[2];
              if (v15 == v131)
              {
                v131 = i[3];
                v135 = *(_QWORD *)(v19 + 40);
                v136 = *(__int16 *)(v135 + 18);
                if ((v136 & 0x80000000) == 0)
                {
                  v139 = *(_QWORD *)(v135 + 48);
                  if (v139 != v135 + 40)
                  {
                    v140 = 0;
                    do
                    {
                      result = v139 - 24;
                      if (!v139)
                        result = 0;
                      *(_DWORD *)(result + 56) = v140++;
                      v139 = *(_QWORD *)(v139 + 8);
                    }
                    while (v139 != v135 + 40);
                  }
                  *(_WORD *)(v135 + 18) = v136 | 0x8000;
                }
                v134 = *(_DWORD *)(v19 + 56);
              }
              else
              {
                v132 = *(_QWORD *)(v15 + 40);
                v133 = *(__int16 *)(v132 + 18);
                if ((v133 & 0x80000000) == 0)
                {
                  v137 = *(_QWORD *)(v132 + 48);
                  if (v137 != v132 + 40)
                  {
                    v138 = 0;
                    do
                    {
                      result = v137 - 24;
                      if (!v137)
                        result = 0;
                      *(_DWORD *)(result + 56) = v138++;
                      v137 = *(_QWORD *)(v137 + 8);
                    }
                    while (v137 != v132 + 40);
                  }
                  *(_WORD *)(v132 + 18) = v133 | 0x8000;
                }
                v134 = *(_DWORD *)(v15 + 56);
              }
              if (v134 < *(_DWORD *)(v131 + 56))
                break;
              v9 += 2;
            }
LABEL_187:
            v141 = a2;
            if (v9 < (uint64_t *)a2)
            {
              for (j = a2; ; j -= 16)
              {
                v141 = j - 16;
                if (v15 == v107)
                {
                  v107 = *((_QWORD *)j - 1);
                  v146 = *(_QWORD *)(v19 + 40);
                  v147 = *(__int16 *)(v146 + 18);
                  if ((v147 & 0x80000000) == 0)
                  {
                    v150 = *(_QWORD *)(v146 + 48);
                    if (v150 != v146 + 40)
                    {
                      v151 = 0;
                      do
                      {
                        result = v150 - 24;
                        if (!v150)
                          result = 0;
                        *(_DWORD *)(result + 56) = v151++;
                        v150 = *(_QWORD *)(v150 + 8);
                      }
                      while (v150 != v146 + 40);
                    }
                    *(_WORD *)(v146 + 18) = v147 | 0x8000;
                  }
                  v145 = *(_DWORD *)(v19 + 56);
                }
                else
                {
                  v143 = *(_QWORD *)(v15 + 40);
                  v144 = *(__int16 *)(v143 + 18);
                  if ((v144 & 0x80000000) == 0)
                  {
                    v148 = *(_QWORD *)(v143 + 48);
                    if (v148 != v143 + 40)
                    {
                      v149 = 0;
                      do
                      {
                        result = v148 - 24;
                        if (!v148)
                          result = 0;
                        *(_DWORD *)(result + 56) = v149++;
                        v148 = *(_QWORD *)(v148 + 8);
                      }
                      while (v148 != v143 + 40);
                    }
                    *(_WORD *)(v143 + 18) = v144 | 0x8000;
                  }
                  v145 = *(_DWORD *)(v15 + 56);
                }
                if (v145 >= *(_DWORD *)(v107 + 56))
                  break;
                v107 = *((_QWORD *)j - 4);
              }
            }
            if (v9 < (uint64_t *)v141)
            {
              v152 = *v9;
              v153 = *(_QWORD *)v141;
              do
              {
                *v9 = v153;
                *(_QWORD *)v141 = v152;
                v154 = v9[1];
                v9[1] = *((_QWORD *)v141 + 1);
                *((_QWORD *)v141 + 1) = v154;
                v155 = v9;
                do
                {
                  v9 = v155 + 2;
                  v152 = v155[2];
                  if (v15 == v152)
                  {
                    v160 = v155[3];
                    v161 = *(_QWORD *)(v19 + 40);
                    v162 = *(__int16 *)(v161 + 18);
                    if ((v162 & 0x80000000) == 0)
                    {
                      v166 = *(_QWORD *)(v161 + 48);
                      if (v166 != v161 + 40)
                      {
                        v167 = 0;
                        do
                        {
                          result = v166 - 24;
                          if (!v166)
                            result = 0;
                          *(_DWORD *)(result + 56) = v167++;
                          v166 = *(_QWORD *)(v166 + 8);
                        }
                        while (v166 != v161 + 40);
                      }
                      *(_WORD *)(v161 + 18) = v162 | 0x8000;
                    }
                    v158 = *(_DWORD *)(v19 + 56);
                    v159 = *(_DWORD *)(v160 + 56);
                  }
                  else
                  {
                    v156 = *(_QWORD *)(v15 + 40);
                    v157 = *(__int16 *)(v156 + 18);
                    if ((v157 & 0x80000000) == 0)
                    {
                      v163 = *(_QWORD *)(v156 + 48);
                      if (v163 != v156 + 40)
                      {
                        v164 = 0;
                        do
                        {
                          v165 = v163 - 24;
                          if (!v163)
                            v165 = 0;
                          *(_DWORD *)(v165 + 56) = v164++;
                          v163 = *(_QWORD *)(v163 + 8);
                        }
                        while (v163 != v156 + 40);
                      }
                      *(_WORD *)(v156 + 18) = v157 | 0x8000;
                    }
                    v158 = *(_DWORD *)(v15 + 56);
                    v159 = *(_DWORD *)(v152 + 56);
                  }
                  v155 = v9;
                }
                while (v158 >= v159);
                v168 = v141;
                do
                {
                  v141 = v168 - 16;
                  v153 = *((_QWORD *)v168 - 2);
                  if (v15 == v153)
                  {
                    v173 = *((_QWORD *)v168 - 1);
                    v174 = *(_QWORD *)(v19 + 40);
                    v175 = *(__int16 *)(v174 + 18);
                    if ((v175 & 0x80000000) == 0)
                    {
                      v178 = *(_QWORD *)(v174 + 48);
                      if (v178 != v174 + 40)
                      {
                        LODWORD(result) = 0;
                        do
                        {
                          v179 = v178 - 24;
                          if (!v178)
                            v179 = 0;
                          *(_DWORD *)(v179 + 56) = result;
                          result = (result + 1);
                          v178 = *(_QWORD *)(v178 + 8);
                        }
                        while (v178 != v174 + 40);
                      }
                      *(_WORD *)(v174 + 18) = v175 | 0x8000;
                    }
                    v171 = *(_DWORD *)(v19 + 56);
                    v172 = *(_DWORD *)(v173 + 56);
                  }
                  else
                  {
                    v169 = *(_QWORD *)(v15 + 40);
                    v170 = *(__int16 *)(v169 + 18);
                    if ((v170 & 0x80000000) == 0)
                    {
                      v176 = *(_QWORD *)(v169 + 48);
                      if (v176 != v169 + 40)
                      {
                        v177 = 0;
                        do
                        {
                          result = v176 - 24;
                          if (!v176)
                            result = 0;
                          *(_DWORD *)(result + 56) = v177++;
                          v176 = *(_QWORD *)(v176 + 8);
                        }
                        while (v176 != v169 + 40);
                      }
                      *(_WORD *)(v169 + 18) = v170 | 0x8000;
                    }
                    v171 = *(_DWORD *)(v15 + 56);
                    v172 = *(_DWORD *)(v153 + 56);
                  }
                  v168 = v141;
                }
                while (v171 < v172);
              }
              while (v9 < (uint64_t *)v141);
            }
            if (v9 - 2 != v7)
            {
              *v7 = *(v9 - 2);
              v7[1] = *(v9 - 1);
            }
            a4 = 0;
            *(v9 - 2) = v15;
            *(v9 - 1) = v19;
            continue;
          }
          v20 = *(v7 - 1);
          v19 = v7[1];
          v21 = *(_QWORD *)(v20 + 40);
          v22 = *(__int16 *)(v21 + 18);
          if ((v22 & 0x80000000) == 0)
          {
            v123 = *(_QWORD *)(v21 + 48);
            if (v123 != v21 + 40)
            {
              v124 = 0;
              do
              {
                v125 = v123 - 24;
                if (!v123)
                  v125 = 0;
                *(_DWORD *)(v125 + 56) = v124++;
                v123 = *(_QWORD *)(v123 + 8);
              }
              while (v123 != v21 + 40);
            }
            *(_WORD *)(v21 + 18) = v22 | 0x8000;
          }
          if (*(_DWORD *)(v20 + 56) >= *(_DWORD *)(v19 + 56))
            goto LABEL_135;
LABEL_16:
          v23 = v7[1];
          v24 = v7;
          do
          {
            v25 = v24;
            v27 = v24[2];
            v24 += 2;
            v26 = v27;
            if (v27 == v15)
            {
              v32 = v25[3];
              v33 = *(_QWORD *)(v32 + 40);
              v34 = *(__int16 *)(v33 + 18);
              if ((v34 & 0x80000000) == 0)
              {
                v38 = *(_QWORD *)(v33 + 48);
                if (v38 != v33 + 40)
                {
                  v39 = 0;
                  do
                  {
                    v40 = v38 - 24;
                    if (!v38)
                      v40 = 0;
                    *(_DWORD *)(v40 + 56) = v39++;
                    v38 = *(_QWORD *)(v38 + 8);
                  }
                  while (v38 != v33 + 40);
                }
                *(_WORD *)(v33 + 18) = v34 | 0x8000;
              }
              v30 = *(_DWORD *)(v32 + 56);
              v31 = *(_DWORD *)(v23 + 56);
            }
            else
            {
              v28 = *(_QWORD *)(v26 + 40);
              v29 = *(__int16 *)(v28 + 18);
              if ((v29 & 0x80000000) == 0)
              {
                v35 = *(_QWORD *)(v28 + 48);
                if (v35 != v28 + 40)
                {
                  v36 = 0;
                  do
                  {
                    v37 = v35 - 24;
                    if (!v35)
                      v37 = 0;
                    *(_DWORD *)(v37 + 56) = v36++;
                    v35 = *(_QWORD *)(v35 + 8);
                  }
                  while (v35 != v28 + 40);
                }
                *(_WORD *)(v28 + 18) = v29 | 0x8000;
              }
              v30 = *(_DWORD *)(v26 + 56);
              v31 = *(_DWORD *)(v15 + 56);
            }
          }
          while (v30 < v31);
          v41 = a2;
          if (v25 == v7)
          {
            v42 = a2;
            if (v24 < (uint64_t *)a2)
            {
              v57 = a2;
              do
              {
                v42 = v57 - 16;
                v58 = *((_QWORD *)v57 - 2);
                if (v58 == v15)
                {
                  v63 = *((_QWORD *)v57 - 1);
                  v64 = *(_QWORD *)(v63 + 40);
                  v65 = *(__int16 *)(v64 + 18);
                  if ((v65 & 0x80000000) == 0)
                  {
                    v69 = *(_QWORD *)(v64 + 48);
                    if (v69 != v64 + 40)
                    {
                      v70 = 0;
                      do
                      {
                        v71 = v69 - 24;
                        if (!v69)
                          v71 = 0;
                        *(_DWORD *)(v71 + 56) = v70++;
                        v69 = *(_QWORD *)(v69 + 8);
                      }
                      while (v69 != v64 + 40);
                    }
                    *(_WORD *)(v64 + 18) = v65 | 0x8000;
                  }
                  if (v24 >= (uint64_t *)v42)
                    break;
                  v61 = *(_DWORD *)(v63 + 56);
                  v62 = *(_DWORD *)(v23 + 56);
                }
                else
                {
                  v59 = *(_QWORD *)(v58 + 40);
                  v60 = *(__int16 *)(v59 + 18);
                  if ((v60 & 0x80000000) == 0)
                  {
                    v66 = *(_QWORD *)(v59 + 48);
                    if (v66 != v59 + 40)
                    {
                      v67 = 0;
                      do
                      {
                        v68 = v66 - 24;
                        if (!v66)
                          v68 = 0;
                        *(_DWORD *)(v68 + 56) = v67++;
                        v66 = *(_QWORD *)(v66 + 8);
                      }
                      while (v66 != v59 + 40);
                    }
                    *(_WORD *)(v59 + 18) = v60 | 0x8000;
                  }
                  if (v24 >= (uint64_t *)v42)
                    break;
                  v61 = *(_DWORD *)(v58 + 56);
                  v62 = *(_DWORD *)(v15 + 56);
                }
                v57 = v42;
              }
              while (v61 >= v62);
            }
          }
          else
          {
            do
            {
              v42 = v41 - 16;
              v43 = *((_QWORD *)v41 - 2);
              if (v43 == v15)
              {
                v48 = *((_QWORD *)v41 - 1);
                v49 = *(_QWORD *)(v48 + 40);
                v50 = *(__int16 *)(v49 + 18);
                if ((v50 & 0x80000000) == 0)
                {
                  v54 = *(_QWORD *)(v49 + 48);
                  if (v54 != v49 + 40)
                  {
                    v55 = 0;
                    do
                    {
                      v56 = v54 - 24;
                      if (!v54)
                        v56 = 0;
                      *(_DWORD *)(v56 + 56) = v55++;
                      v54 = *(_QWORD *)(v54 + 8);
                    }
                    while (v54 != v49 + 40);
                  }
                  *(_WORD *)(v49 + 18) = v50 | 0x8000;
                }
                v46 = *(_DWORD *)(v48 + 56);
                v47 = *(_DWORD *)(v23 + 56);
              }
              else
              {
                v44 = *(_QWORD *)(v43 + 40);
                v45 = *(__int16 *)(v44 + 18);
                if ((v45 & 0x80000000) == 0)
                {
                  v51 = *(_QWORD *)(v44 + 48);
                  if (v51 != v44 + 40)
                  {
                    v52 = 0;
                    do
                    {
                      v53 = v51 - 24;
                      if (!v51)
                        v53 = 0;
                      *(_DWORD *)(v53 + 56) = v52++;
                      v51 = *(_QWORD *)(v51 + 8);
                    }
                    while (v51 != v44 + 40);
                  }
                  *(_WORD *)(v44 + 18) = v45 | 0x8000;
                }
                v46 = *(_DWORD *)(v43 + 56);
                v47 = *(_DWORD *)(v15 + 56);
              }
              v41 = v42;
            }
            while (v46 >= v47);
          }
          if (v24 >= (uint64_t *)v42)
          {
            v9 = v24;
          }
          else
          {
            v72 = *(_QWORD *)v42;
            v9 = v24;
            v73 = (uint64_t *)v42;
            do
            {
              *v9 = v72;
              *v73 = v26;
              v74 = v9[1];
              v9[1] = v73[1];
              v73[1] = v74;
              v75 = v9;
              do
              {
                v9 = v75 + 2;
                v26 = v75[2];
                if (v26 == v15)
                {
                  v80 = v75[3];
                  v81 = *(_QWORD *)(v80 + 40);
                  v82 = *(__int16 *)(v81 + 18);
                  if ((v82 & 0x80000000) == 0)
                  {
                    v86 = *(_QWORD *)(v81 + 48);
                    if (v86 != v81 + 40)
                    {
                      v87 = 0;
                      do
                      {
                        v88 = v86 - 24;
                        if (!v86)
                          v88 = 0;
                        *(_DWORD *)(v88 + 56) = v87++;
                        v86 = *(_QWORD *)(v86 + 8);
                      }
                      while (v86 != v81 + 40);
                    }
                    *(_WORD *)(v81 + 18) = v82 | 0x8000;
                  }
                  v78 = *(_DWORD *)(v80 + 56);
                  v79 = *(_DWORD *)(v23 + 56);
                }
                else
                {
                  v76 = *(_QWORD *)(v26 + 40);
                  v77 = *(__int16 *)(v76 + 18);
                  if ((v77 & 0x80000000) == 0)
                  {
                    v83 = *(_QWORD *)(v76 + 48);
                    if (v83 != v76 + 40)
                    {
                      v84 = 0;
                      do
                      {
                        v85 = v83 - 24;
                        if (!v83)
                          v85 = 0;
                        *(_DWORD *)(v85 + 56) = v84++;
                        v83 = *(_QWORD *)(v83 + 8);
                      }
                      while (v83 != v76 + 40);
                    }
                    *(_WORD *)(v76 + 18) = v77 | 0x8000;
                  }
                  v78 = *(_DWORD *)(v26 + 56);
                  v79 = *(_DWORD *)(v15 + 56);
                }
                v75 = v9;
              }
              while (v78 < v79);
              v89 = v73;
              do
              {
                v73 = v89 - 2;
                v72 = *(v89 - 2);
                if (v72 == v15)
                {
                  v94 = *(v89 - 1);
                  v95 = *(_QWORD *)(v94 + 40);
                  v96 = *(__int16 *)(v95 + 18);
                  if ((v96 & 0x80000000) == 0)
                  {
                    v100 = *(_QWORD *)(v95 + 48);
                    if (v100 != v95 + 40)
                    {
                      v101 = 0;
                      do
                      {
                        v102 = v100 - 24;
                        if (!v100)
                          v102 = 0;
                        *(_DWORD *)(v102 + 56) = v101++;
                        v100 = *(_QWORD *)(v100 + 8);
                      }
                      while (v100 != v95 + 40);
                    }
                    *(_WORD *)(v95 + 18) = v96 | 0x8000;
                  }
                  v92 = *(_DWORD *)(v94 + 56);
                  v93 = *(_DWORD *)(v23 + 56);
                }
                else
                {
                  v90 = *(_QWORD *)(v72 + 40);
                  v91 = *(__int16 *)(v90 + 18);
                  if ((v91 & 0x80000000) == 0)
                  {
                    v97 = *(_QWORD *)(v90 + 48);
                    if (v97 != v90 + 40)
                    {
                      v98 = 0;
                      do
                      {
                        v99 = v97 - 24;
                        if (!v97)
                          v99 = 0;
                        *(_DWORD *)(v99 + 56) = v98++;
                        v97 = *(_QWORD *)(v97 + 8);
                      }
                      while (v97 != v90 + 40);
                    }
                    *(_WORD *)(v90 + 18) = v91 | 0x8000;
                  }
                  v92 = *(_DWORD *)(v72 + 56);
                  v93 = *(_DWORD *)(v15 + 56);
                }
                v89 = v73;
              }
              while (v92 >= v93);
            }
            while (v9 < v73);
          }
          if (v9 - 2 != v7)
          {
            *v7 = *(v9 - 2);
            v7[1] = *(v9 - 1);
          }
          *(v9 - 2) = v15;
          *(v9 - 1) = v23;
          if (v24 < (uint64_t *)v42)
          {
LABEL_128:
            result = sub_1C5AF37B0(v7, v9 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v103 = sub_1C5AF58E8(v7, (char *)v9 - 16);
          result = sub_1C5AF58E8(v9, a2);
          if (!(_DWORD)result)
          {
            if (v103)
              continue;
            goto LABEL_128;
          }
          a2 = (char *)(v9 - 2);
          if (v103)
            return result;
          goto LABEL_2;
        }
        v192 = v9 + 2;
        v194 = v9 == (uint64_t *)a2 || v192 == (uint64_t *)a2;
        if ((a4 & 1) == 0)
        {
          if (v194)
            return result;
          while (1)
          {
            v344 = v7;
            v7 = v192;
            v345 = v344[2];
            v346 = *v344;
            if (v345 == *v344)
            {
              v349 = v344[3];
              v350 = v344[1];
              v351 = *(_QWORD *)(v349 + 40);
              v352 = *(__int16 *)(v351 + 18);
              if ((v352 & 0x80000000) == 0)
              {
                v368 = *(_QWORD *)(v351 + 48);
                if (v368 != v351 + 40)
                {
                  v369 = 0;
                  do
                  {
                    result = v368 - 24;
                    if (!v368)
                      result = 0;
                    *(_DWORD *)(result + 56) = v369++;
                    v368 = *(_QWORD *)(v368 + 8);
                  }
                  while (v368 != v351 + 40);
                }
                *(_WORD *)(v351 + 18) = v352 | 0x8000;
              }
              if (*(_DWORD *)(v349 + 56) >= *(_DWORD *)(v350 + 56))
                goto LABEL_505;
            }
            else
            {
              v347 = *(_QWORD *)(v345 + 40);
              v348 = *(__int16 *)(v347 + 18);
              if ((v348 & 0x80000000) == 0)
              {
                v365 = *(_QWORD *)(v347 + 48);
                if (v365 != v347 + 40)
                {
                  v366 = 0;
                  do
                  {
                    v367 = v365 - 24;
                    if (!v365)
                      v367 = 0;
                    *(_DWORD *)(v367 + 56) = v366++;
                    v365 = *(_QWORD *)(v365 + 8);
                  }
                  while (v365 != v347 + 40);
                }
                *(_WORD *)(v347 + 18) = v348 | 0x8000;
              }
              if (*(_DWORD *)(v345 + 56) >= *(_DWORD *)(v346 + 56))
                goto LABEL_505;
              v349 = v344[3];
            }
            v353 = v7;
            do
            {
              while (1)
              {
                v354 = v353;
                v353 = v344;
                *v354 = v346;
                v354[1] = v344[1];
                v355 = *(v344 - 2);
                v344 -= 2;
                v346 = v355;
                if (v345 == v355)
                  break;
                v356 = *(_QWORD *)(v345 + 40);
                v357 = *(__int16 *)(v356 + 18);
                if ((v357 & 0x80000000) == 0)
                {
                  v361 = *(_QWORD *)(v356 + 48);
                  if (v361 != v356 + 40)
                  {
                    v362 = 0;
                    do
                    {
                      result = v361 - 24;
                      if (!v361)
                        result = 0;
                      *(_DWORD *)(result + 56) = v362++;
                      v361 = *(_QWORD *)(v361 + 8);
                    }
                    while (v361 != v356 + 40);
                  }
                  *(_WORD *)(v356 + 18) = v357 | 0x8000;
                }
                if (*(_DWORD *)(v345 + 56) >= *(_DWORD *)(v346 + 56))
                  goto LABEL_504;
              }
              v358 = *(v353 - 1);
              v359 = *(_QWORD *)(v349 + 40);
              v360 = *(__int16 *)(v359 + 18);
              if ((v360 & 0x80000000) == 0)
              {
                v363 = *(_QWORD *)(v359 + 48);
                if (v363 != v359 + 40)
                {
                  LODWORD(result) = 0;
                  do
                  {
                    v364 = v363 - 24;
                    if (!v363)
                      v364 = 0;
                    *(_DWORD *)(v364 + 56) = result;
                    result = (result + 1);
                    v363 = *(_QWORD *)(v363 + 8);
                  }
                  while (v363 != v359 + 40);
                }
                *(_WORD *)(v359 + 18) = v360 | 0x8000;
              }
            }
            while (*(_DWORD *)(v349 + 56) < *(_DWORD *)(v358 + 56));
LABEL_504:
            *v353 = v345;
            v353[1] = v349;
LABEL_505:
            v192 = v7 + 2;
            if (v7 + 2 == (uint64_t *)a2)
              return result;
          }
        }
        if (v194)
          return result;
        v195 = v9;
        do
        {
          v196 = v195;
          v195 = v192;
          v197 = v196[2];
          v198 = *v196;
          if (v197 == *v196)
          {
            v201 = v196[3];
            v202 = v196[1];
            v203 = *(_QWORD *)(v201 + 40);
            v204 = *(__int16 *)(v203 + 18);
            if ((v204 & 0x80000000) == 0)
            {
              v221 = *(_QWORD *)(v203 + 48);
              if (v221 != v203 + 40)
              {
                LODWORD(result) = 0;
                do
                {
                  v222 = v221 - 24;
                  if (!v221)
                    v222 = 0;
                  *(_DWORD *)(v222 + 56) = result;
                  result = (result + 1);
                  v221 = *(_QWORD *)(v221 + 8);
                }
                while (v221 != v203 + 40);
              }
              *(_WORD *)(v203 + 18) = v204 | 0x8000;
            }
            if (*(_DWORD *)(v201 + 56) >= *(_DWORD *)(v202 + 56))
              goto LABEL_313;
          }
          else
          {
            v199 = *(_QWORD *)(v197 + 40);
            v200 = *(__int16 *)(v199 + 18);
            if ((v200 & 0x80000000) == 0)
            {
              v218 = *(_QWORD *)(v199 + 48);
              if (v218 != v199 + 40)
              {
                v219 = 0;
                do
                {
                  v220 = v218 - 24;
                  if (!v218)
                    v220 = 0;
                  *(_DWORD *)(v220 + 56) = v219++;
                  v218 = *(_QWORD *)(v218 + 8);
                }
                while (v218 != v199 + 40);
              }
              *(_WORD *)(v199 + 18) = v200 | 0x8000;
            }
            if (*(_DWORD *)(v197 + 56) >= *(_DWORD *)(v198 + 56))
              goto LABEL_313;
            v201 = v196[3];
          }
          v196[2] = v198;
          v195[1] = v196[1];
          v205 = v9;
          if (v196 == v9)
            goto LABEL_312;
          v206 = v196;
          while (1)
          {
            v208 = *(v206 - 2);
            v206 -= 2;
            v207 = v208;
            if (v197 == v208)
              break;
            v209 = *(_QWORD *)(v197 + 40);
            v210 = *(__int16 *)(v209 + 18);
            if ((v210 & 0x80000000) == 0)
            {
              v214 = *(_QWORD *)(v209 + 48);
              if (v214 != v209 + 40)
              {
                LODWORD(result) = 0;
                do
                {
                  v215 = v214 - 24;
                  if (!v214)
                    v215 = 0;
                  *(_DWORD *)(v215 + 56) = result;
                  result = (result + 1);
                  v214 = *(_QWORD *)(v214 + 8);
                }
                while (v214 != v209 + 40);
              }
              *(_WORD *)(v209 + 18) = v210 | 0x8000;
            }
            if (*(_DWORD *)(v197 + 56) >= *(_DWORD *)(v207 + 56))
              goto LABEL_311;
            v211 = *(v196 - 1);
LABEL_297:
            *v196 = v207;
            v196[1] = v211;
            v196 = v206;
            if (v206 == v9)
            {
              v205 = v9;
              goto LABEL_312;
            }
          }
          v211 = *(v196 - 1);
          v212 = *(_QWORD *)(v201 + 40);
          v213 = *(__int16 *)(v212 + 18);
          if ((v213 & 0x80000000) == 0)
          {
            result = *(_QWORD *)(v212 + 48);
            if (result != v212 + 40)
            {
              v216 = 0;
              do
              {
                v217 = result - 24;
                if (!result)
                  v217 = 0;
                *(_DWORD *)(v217 + 56) = v216++;
                result = *(_QWORD *)(result + 8);
              }
              while (result != v212 + 40);
            }
            *(_WORD *)(v212 + 18) = v213 | 0x8000;
          }
          if (*(_DWORD *)(v201 + 56) < *(_DWORD *)(v211 + 56))
            goto LABEL_297;
LABEL_311:
          v205 = v196;
LABEL_312:
          *v205 = v197;
          v205[1] = v201;
LABEL_313:
          v192 = v195 + 2;
        }
        while (v195 + 2 != (uint64_t *)a2);
        return result;
    }
  }
}

_QWORD *sub_1C5AF50AC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;

  result = sub_1C5AF5CAC(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 == *a4)
  {
    v17 = a5[1];
    v18 = a4[1];
    v19 = *(_QWORD *)(v17 + 40);
    v20 = *(__int16 *)(v19 + 18);
    if ((v20 & 0x80000000) == 0)
    {
      v58 = *(_QWORD *)(v19 + 48);
      if (v58 != v19 + 40)
      {
        v59 = 0;
        do
        {
          v60 = v58 - 24;
          if (!v58)
            v60 = 0;
          *(_DWORD *)(v60 + 56) = v59++;
          v58 = *(_QWORD *)(v58 + 8);
        }
        while (v58 != v19 + 40);
      }
      *(_WORD *)(v19 + 18) = v20 | 0x8000;
    }
    v15 = *(_DWORD *)(v17 + 56);
    v16 = *(_DWORD *)(v18 + 56);
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 40);
    v14 = *(__int16 *)(v13 + 18);
    if ((v14 & 0x80000000) == 0)
    {
      v55 = *(_QWORD *)(v13 + 48);
      if (v55 != v13 + 40)
      {
        v56 = 0;
        do
        {
          v57 = v55 - 24;
          if (!v55)
            v57 = 0;
          *(_DWORD *)(v57 + 56) = v56++;
          v55 = *(_QWORD *)(v55 + 8);
        }
        while (v55 != v13 + 40);
      }
      *(_WORD *)(v13 + 18) = v14 | 0x8000;
    }
    v15 = *(_DWORD *)(v11 + 56);
    v16 = *(_DWORD *)(v12 + 56);
  }
  if (v15 < v16)
  {
    *a4 = v11;
    *a5 = v12;
    v21 = a4[1];
    a4[1] = a5[1];
    a5[1] = v21;
    v22 = *a4;
    v23 = *a3;
    if (*a4 == *a3)
    {
      v28 = a4[1];
      v29 = a3[1];
      v30 = *(_QWORD *)(v28 + 40);
      v31 = *(__int16 *)(v30 + 18);
      if ((v31 & 0x80000000) == 0)
      {
        v64 = *(_QWORD *)(v30 + 48);
        if (v64 != v30 + 40)
        {
          v65 = 0;
          do
          {
            v66 = v64 - 24;
            if (!v64)
              v66 = 0;
            *(_DWORD *)(v66 + 56) = v65++;
            v64 = *(_QWORD *)(v64 + 8);
          }
          while (v64 != v30 + 40);
        }
        *(_WORD *)(v30 + 18) = v31 | 0x8000;
      }
      v26 = *(_DWORD *)(v28 + 56);
      v27 = *(_DWORD *)(v29 + 56);
    }
    else
    {
      v24 = *(_QWORD *)(v22 + 40);
      v25 = *(__int16 *)(v24 + 18);
      if ((v25 & 0x80000000) == 0)
      {
        v61 = *(_QWORD *)(v24 + 48);
        if (v61 != v24 + 40)
        {
          v62 = 0;
          do
          {
            v63 = v61 - 24;
            if (!v61)
              v63 = 0;
            *(_DWORD *)(v63 + 56) = v62++;
            v61 = *(_QWORD *)(v61 + 8);
          }
          while (v61 != v24 + 40);
        }
        *(_WORD *)(v24 + 18) = v25 | 0x8000;
      }
      v26 = *(_DWORD *)(v22 + 56);
      v27 = *(_DWORD *)(v23 + 56);
    }
    if (v26 < v27)
    {
      *a3 = v22;
      *a4 = v23;
      v32 = a3[1];
      a3[1] = a4[1];
      a4[1] = v32;
      v33 = *a3;
      v34 = *a2;
      if (*a3 == *a2)
      {
        v39 = a3[1];
        v40 = a2[1];
        v41 = *(_QWORD *)(v39 + 40);
        v42 = *(__int16 *)(v41 + 18);
        if ((v42 & 0x80000000) == 0)
        {
          v70 = *(_QWORD *)(v41 + 48);
          if (v70 != v41 + 40)
          {
            v71 = 0;
            do
            {
              v72 = v70 - 24;
              if (!v70)
                v72 = 0;
              *(_DWORD *)(v72 + 56) = v71++;
              v70 = *(_QWORD *)(v70 + 8);
            }
            while (v70 != v41 + 40);
          }
          *(_WORD *)(v41 + 18) = v42 | 0x8000;
        }
        v37 = *(_DWORD *)(v39 + 56);
        v38 = *(_DWORD *)(v40 + 56);
      }
      else
      {
        v35 = *(_QWORD *)(v33 + 40);
        v36 = *(__int16 *)(v35 + 18);
        if ((v36 & 0x80000000) == 0)
        {
          v67 = *(_QWORD *)(v35 + 48);
          if (v67 != v35 + 40)
          {
            v68 = 0;
            do
            {
              v69 = v67 - 24;
              if (!v67)
                v69 = 0;
              *(_DWORD *)(v69 + 56) = v68++;
              v67 = *(_QWORD *)(v67 + 8);
            }
            while (v67 != v35 + 40);
          }
          *(_WORD *)(v35 + 18) = v36 | 0x8000;
        }
        v37 = *(_DWORD *)(v33 + 56);
        v38 = *(_DWORD *)(v34 + 56);
      }
      if (v37 < v38)
      {
        *a2 = v33;
        *a3 = v34;
        v43 = a2[1];
        a2[1] = a3[1];
        a3[1] = v43;
        v44 = *a2;
        v45 = *a1;
        if (*a2 == *a1)
        {
          v50 = a2[1];
          v51 = a1[1];
          v52 = *(_QWORD *)(v50 + 40);
          v53 = *(__int16 *)(v52 + 18);
          if ((v53 & 0x80000000) == 0)
          {
            v76 = *(_QWORD *)(v52 + 48);
            if (v76 != v52 + 40)
            {
              v77 = 0;
              do
              {
                v78 = v76 - 24;
                if (!v76)
                  v78 = 0;
                *(_DWORD *)(v78 + 56) = v77++;
                v76 = *(_QWORD *)(v76 + 8);
              }
              while (v76 != v52 + 40);
            }
            *(_WORD *)(v52 + 18) = v53 | 0x8000;
          }
          v48 = *(_DWORD *)(v50 + 56);
          v49 = *(_DWORD *)(v51 + 56);
        }
        else
        {
          v46 = *(_QWORD *)(v44 + 40);
          v47 = *(__int16 *)(v46 + 18);
          if ((v47 & 0x80000000) == 0)
          {
            v73 = *(_QWORD *)(v46 + 48);
            if (v73 != v46 + 40)
            {
              v74 = 0;
              do
              {
                v75 = v73 - 24;
                if (!v73)
                  v75 = 0;
                *(_DWORD *)(v75 + 56) = v74++;
                v73 = *(_QWORD *)(v73 + 8);
              }
              while (v73 != v46 + 40);
            }
            *(_WORD *)(v46 + 18) = v47 | 0x8000;
          }
          v48 = *(_DWORD *)(v44 + 56);
          v49 = *(_DWORD *)(v45 + 56);
        }
        if (v48 < v49)
        {
          *a1 = v44;
          *a2 = v45;
          v54 = a1[1];
          a1[1] = a2[1];
          a2[1] = v54;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5AF547C(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;

  v3 = *a2;
  v4 = *result;
  if (*a2 == *result)
  {
    v9 = a2[1];
    v10 = result[1];
    v11 = *(_QWORD *)(v9 + 40);
    v12 = *(__int16 *)(v11 + 18);
    if ((v12 & 0x80000000) == 0)
    {
      v56 = *(_QWORD *)(v11 + 48);
      if (v56 != v11 + 40)
      {
        v57 = 0;
        do
        {
          v58 = v56 - 24;
          if (!v56)
            v58 = 0;
          *(_DWORD *)(v58 + 56) = v57++;
          v56 = *(_QWORD *)(v56 + 8);
        }
        while (v56 != v11 + 40);
      }
      *(_WORD *)(v11 + 18) = v12 | 0x8000;
    }
    v7 = *(_DWORD *)(v9 + 56);
    v8 = *(_DWORD *)(v10 + 56);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(__int16 *)(v5 + 18);
    if ((v6 & 0x80000000) == 0)
    {
      v53 = *(_QWORD *)(v5 + 48);
      if (v53 != v5 + 40)
      {
        v54 = 0;
        do
        {
          v55 = v53 - 24;
          if (!v53)
            v55 = 0;
          *(_DWORD *)(v55 + 56) = v54++;
          v53 = *(_QWORD *)(v53 + 8);
        }
        while (v53 != v5 + 40);
      }
      *(_WORD *)(v5 + 18) = v6 | 0x8000;
    }
    v7 = *(_DWORD *)(v3 + 56);
    v8 = *(_DWORD *)(v4 + 56);
  }
  if (v7 >= v8)
  {
    v18 = *a3;
    if (*a3 == v3)
    {
      v33 = a3[1];
      v34 = a2[1];
      v35 = *(_QWORD *)(v33 + 40);
      v36 = *(__int16 *)(v35 + 18);
      if ((v36 & 0x80000000) == 0)
      {
        v68 = *(_QWORD *)(v35 + 48);
        if (v68 != v35 + 40)
        {
          v69 = 0;
          do
          {
            v70 = v68 - 24;
            if (!v68)
              v70 = 0;
            *(_DWORD *)(v70 + 56) = v69++;
            v68 = *(_QWORD *)(v68 + 8);
          }
          while (v68 != v35 + 40);
        }
        *(_WORD *)(v35 + 18) = v36 | 0x8000;
      }
      v21 = *(_DWORD *)(v33 + 56);
      v22 = *(_DWORD *)(v34 + 56);
    }
    else
    {
      v19 = *(_QWORD *)(v18 + 40);
      v20 = *(__int16 *)(v19 + 18);
      if ((v20 & 0x80000000) == 0)
      {
        v62 = *(_QWORD *)(v19 + 48);
        if (v62 != v19 + 40)
        {
          v63 = 0;
          do
          {
            v64 = v62 - 24;
            if (!v62)
              v64 = 0;
            *(_DWORD *)(v64 + 56) = v63++;
            v62 = *(_QWORD *)(v62 + 8);
          }
          while (v62 != v19 + 40);
        }
        *(_WORD *)(v19 + 18) = v20 | 0x8000;
      }
      v21 = *(_DWORD *)(v18 + 56);
      v22 = *(_DWORD *)(v3 + 56);
    }
    if (v21 < v22)
    {
      *a2 = v18;
      *a3 = v3;
      v37 = a2 + 1;
      v38 = a2[1];
      a2[1] = a3[1];
      a3[1] = v38;
      v39 = *a2;
      v40 = *result;
      if (*a2 == *result)
      {
        v48 = *v37;
        v49 = result[1];
        v50 = *(_QWORD *)(*v37 + 40);
        v51 = *(__int16 *)(v50 + 18);
        if ((v51 & 0x80000000) == 0)
        {
          v79 = *(_QWORD *)(v50 + 48);
          if (v79 != v50 + 40)
          {
            v80 = 0;
            do
            {
              v81 = v79 - 24;
              if (!v79)
                v81 = 0;
              *(_DWORD *)(v81 + 56) = v80++;
              v79 = *(_QWORD *)(v79 + 8);
            }
            while (v79 != v50 + 40);
          }
          *(_WORD *)(v50 + 18) = v51 | 0x8000;
        }
        v43 = *(_DWORD *)(v48 + 56);
        v44 = *(_DWORD *)(v49 + 56);
      }
      else
      {
        v41 = *(_QWORD *)(v39 + 40);
        v42 = *(__int16 *)(v41 + 18);
        if ((v42 & 0x80000000) == 0)
        {
          v74 = *(_QWORD *)(v41 + 48);
          if (v74 != v41 + 40)
          {
            v75 = 0;
            do
            {
              v76 = v74 - 24;
              if (!v74)
                v76 = 0;
              *(_DWORD *)(v76 + 56) = v75++;
              v74 = *(_QWORD *)(v74 + 8);
            }
            while (v74 != v41 + 40);
          }
          *(_WORD *)(v41 + 18) = v42 | 0x8000;
        }
        v43 = *(_DWORD *)(v39 + 56);
        v44 = *(_DWORD *)(v40 + 56);
      }
      if (v43 < v44)
      {
        *result++ = v39;
        *a2 = v40;
        goto LABEL_35;
      }
    }
  }
  else
  {
    v13 = *a3;
    if (*a3 == v3)
    {
      v23 = a3[1];
      v24 = a2[1];
      v25 = *(_QWORD *)(v23 + 40);
      v26 = *(__int16 *)(v25 + 18);
      if ((v26 & 0x80000000) == 0)
      {
        v65 = *(_QWORD *)(v25 + 48);
        if (v65 != v25 + 40)
        {
          v66 = 0;
          do
          {
            v67 = v65 - 24;
            if (!v65)
              v67 = 0;
            *(_DWORD *)(v67 + 56) = v66++;
            v65 = *(_QWORD *)(v65 + 8);
          }
          while (v65 != v25 + 40);
        }
        *(_WORD *)(v25 + 18) = v26 | 0x8000;
      }
      v16 = *(_DWORD *)(v23 + 56);
      v17 = *(_DWORD *)(v24 + 56);
    }
    else
    {
      v14 = *(_QWORD *)(v13 + 40);
      v15 = *(__int16 *)(v14 + 18);
      if ((v15 & 0x80000000) == 0)
      {
        v59 = *(_QWORD *)(v14 + 48);
        if (v59 != v14 + 40)
        {
          v60 = 0;
          do
          {
            v61 = v59 - 24;
            if (!v59)
              v61 = 0;
            *(_DWORD *)(v61 + 56) = v60++;
            v59 = *(_QWORD *)(v59 + 8);
          }
          while (v59 != v14 + 40);
        }
        *(_WORD *)(v14 + 18) = v15 | 0x8000;
      }
      v16 = *(_DWORD *)(v13 + 56);
      v17 = *(_DWORD *)(v3 + 56);
    }
    if (v16 < v17)
    {
      *result++ = v13;
      *a3 = v4;
      v27 = a3 + 1;
LABEL_30:
      v37 = v27;
LABEL_35:
      v52 = *result;
      *result = *v37;
      *v37 = v52;
      return result;
    }
    *result = v3;
    *a2 = v4;
    v28 = result[1];
    result[1] = a2[1];
    a2[1] = v28;
    v29 = *a3;
    v30 = *a2;
    if (*a3 != *a2)
    {
      v31 = *(_QWORD *)(v29 + 40);
      v32 = *(__int16 *)(v31 + 18);
      if ((v32 & 0x80000000) == 0)
      {
        v71 = *(_QWORD *)(v31 + 48);
        if (v71 != v31 + 40)
        {
          v72 = 0;
          do
          {
            v73 = v71 - 24;
            if (!v71)
              v73 = 0;
            *(_DWORD *)(v73 + 56) = v72++;
            v71 = *(_QWORD *)(v71 + 8);
          }
          while (v71 != v31 + 40);
        }
        *(_WORD *)(v31 + 18) = v32 | 0x8000;
      }
      if (*(_DWORD *)(v29 + 56) >= *(_DWORD *)(v30 + 56))
        return result;
LABEL_29:
      *a2 = v29;
      *a3 = v30;
      v27 = a3 + 1;
      result = a2 + 1;
      goto LABEL_30;
    }
    v45 = a3[1];
    v46 = *(_QWORD *)(v45 + 40);
    v47 = *(__int16 *)(v46 + 18);
    if ((v47 & 0x80000000) == 0)
    {
      v77 = *(_QWORD *)(v46 + 48);
      if (v77 != v46 + 40)
      {
        v78 = 0;
        do
        {
          result = (_QWORD *)(v77 - 24);
          if (!v77)
            result = 0;
          *((_DWORD *)result + 14) = v78++;
          v77 = *(_QWORD *)(v77 + 8);
        }
        while (v77 != v46 + 40);
      }
      *(_WORD *)(v46 + 18) = v47 | 0x8000;
    }
    if (*(_DWORD *)(v45 + 56) < *(_DWORD *)(v28 + 56))
      goto LABEL_29;
  }
  return result;
}

BOOL sub_1C5AF58E8(uint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 2);
      v7 = *a1;
      if (v6 == *a1)
      {
        v44 = *((_QWORD *)a2 - 1);
        v45 = a1[1];
        v46 = *(_QWORD *)(v44 + 40);
        v47 = *(__int16 *)(v46 + 18);
        if ((v47 & 0x80000000) == 0)
        {
          v52 = *(_QWORD *)(v46 + 48);
          if (v52 != v46 + 40)
          {
            v53 = 0;
            do
            {
              v54 = v52 - 24;
              if (!v52)
                v54 = 0;
              *(_DWORD *)(v54 + 56) = v53++;
              v52 = *(_QWORD *)(v52 + 8);
            }
            while (v52 != v46 + 40);
          }
          *(_WORD *)(v46 + 18) = v47 | 0x8000;
        }
        v10 = *(_DWORD *)(v44 + 56);
        v11 = *(_DWORD *)(v45 + 56);
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 40);
        v9 = *(__int16 *)(v8 + 18);
        if ((v9 & 0x80000000) == 0)
        {
          v49 = *(_QWORD *)(v8 + 48);
          if (v49 != v8 + 40)
          {
            v50 = 0;
            do
            {
              v51 = v49 - 24;
              if (!v49)
                v51 = 0;
              *(_DWORD *)(v51 + 56) = v50++;
              v49 = *(_QWORD *)(v49 + 8);
            }
            while (v49 != v8 + 40);
          }
          *(_WORD *)(v8 + 18) = v9 | 0x8000;
        }
        v10 = *(_DWORD *)(v6 + 56);
        v11 = *(_DWORD *)(v7 + 56);
      }
      if (v10 < v11)
      {
        *a1 = v6;
        *((_QWORD *)a2 - 2) = v7;
        v48 = a1[1];
        a1[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v48;
      }
      return 1;
    case 3:
      sub_1C5AF547C(a1, a1 + 2, (uint64_t *)a2 - 2);
      return 1;
    case 4:
      sub_1C5AF5CAC(a1, a1 + 2, a1 + 4, (uint64_t *)a2 - 2);
      return 1;
    case 5:
      sub_1C5AF50AC(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t *)a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      sub_1C5AF547C(a1, a1 + 2, a1 + 4);
      v13 = (char *)(a1 + 6);
      if (a1 + 6 == (uint64_t *)a2)
        return 1;
      v14 = 0;
      break;
  }
  while (2)
  {
    v15 = *(_QWORD *)v13;
    v16 = *v12;
    if (*(_QWORD *)v13 == *v12)
    {
      v19 = *((_QWORD *)v13 + 1);
      v20 = v12[1];
      v21 = *(_QWORD *)(v19 + 40);
      v22 = *(__int16 *)(v21 + 18);
      if ((v22 & 0x80000000) == 0)
      {
        v41 = *(_QWORD *)(v21 + 48);
        if (v41 != v21 + 40)
        {
          v42 = 0;
          do
          {
            v43 = v41 - 24;
            if (!v41)
              v43 = 0;
            *(_DWORD *)(v43 + 56) = v42++;
            v41 = *(_QWORD *)(v41 + 8);
          }
          while (v41 != v21 + 40);
        }
        *(_WORD *)(v21 + 18) = v22 | 0x8000;
      }
      if (*(_DWORD *)(v19 + 56) >= *(_DWORD *)(v20 + 56))
        goto LABEL_37;
    }
    else
    {
      v17 = *(_QWORD *)(v15 + 40);
      v18 = *(__int16 *)(v17 + 18);
      if ((v18 & 0x80000000) == 0)
      {
        v38 = *(_QWORD *)(v17 + 48);
        if (v38 != v17 + 40)
        {
          v39 = 0;
          do
          {
            v40 = v38 - 24;
            if (!v38)
              v40 = 0;
            *(_DWORD *)(v40 + 56) = v39++;
            v38 = *(_QWORD *)(v38 + 8);
          }
          while (v38 != v17 + 40);
        }
        *(_WORD *)(v17 + 18) = v18 | 0x8000;
      }
      if (*(_DWORD *)(v15 + 56) >= *(_DWORD *)(v16 + 56))
        goto LABEL_37;
      v19 = *((_QWORD *)v13 + 1);
    }
    *(_QWORD *)v13 = v16;
    *((_QWORD *)v13 + 1) = v12[1];
    v23 = a1;
    if (v12 == a1)
      goto LABEL_36;
    v24 = v12;
    while (1)
    {
      v26 = *(v24 - 2);
      v24 -= 2;
      v25 = v26;
      if (v15 == v26)
        break;
      v27 = *(_QWORD *)(v15 + 40);
      v28 = *(__int16 *)(v27 + 18);
      if ((v28 & 0x80000000) == 0)
      {
        v32 = *(_QWORD *)(v27 + 48);
        if (v32 != v27 + 40)
        {
          v33 = 0;
          do
          {
            v34 = v32 - 24;
            if (!v32)
              v34 = 0;
            *(_DWORD *)(v34 + 56) = v33++;
            v32 = *(_QWORD *)(v32 + 8);
          }
          while (v32 != v27 + 40);
        }
        *(_WORD *)(v27 + 18) = v28 | 0x8000;
      }
      if (*(_DWORD *)(v15 + 56) >= *(_DWORD *)(v25 + 56))
        goto LABEL_35;
      v29 = *(v12 - 1);
LABEL_21:
      *v12 = v25;
      v12[1] = v29;
      v12 = v24;
      if (v24 == a1)
      {
        v23 = a1;
        goto LABEL_36;
      }
    }
    v29 = *(v12 - 1);
    v30 = *(_QWORD *)(v19 + 40);
    v31 = *(__int16 *)(v30 + 18);
    if ((v31 & 0x80000000) == 0)
    {
      v35 = *(_QWORD *)(v30 + 48);
      if (v35 != v30 + 40)
      {
        v36 = 0;
        do
        {
          v37 = v35 - 24;
          if (!v35)
            v37 = 0;
          *(_DWORD *)(v37 + 56) = v36++;
          v35 = *(_QWORD *)(v35 + 8);
        }
        while (v35 != v30 + 40);
      }
      *(_WORD *)(v30 + 18) = v31 | 0x8000;
    }
    if (*(_DWORD *)(v19 + 56) < *(_DWORD *)(v29 + 56))
      goto LABEL_21;
LABEL_35:
    v23 = v12;
LABEL_36:
    *v23 = v15;
    v23[1] = v19;
    if (++v14 != 8)
    {
LABEL_37:
      v12 = (uint64_t *)v13;
      v13 += 16;
      if (v13 == a2)
        return 1;
      continue;
    }
    return v13 + 16 == a2;
  }
}

_QWORD *sub_1C5AF5CAC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  result = sub_1C5AF547C(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 == *a3)
  {
    v15 = a4[1];
    v16 = a3[1];
    v17 = *(_QWORD *)(v15 + 40);
    v18 = *(__int16 *)(v17 + 18);
    if ((v18 & 0x80000000) == 0)
    {
      v45 = *(_QWORD *)(v17 + 48);
      if (v45 != v17 + 40)
      {
        v46 = 0;
        do
        {
          v47 = v45 - 24;
          if (!v45)
            v47 = 0;
          *(_DWORD *)(v47 + 56) = v46++;
          v45 = *(_QWORD *)(v45 + 8);
        }
        while (v45 != v17 + 40);
      }
      *(_WORD *)(v17 + 18) = v18 | 0x8000;
    }
    v13 = *(_DWORD *)(v15 + 56);
    v14 = *(_DWORD *)(v16 + 56);
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 40);
    v12 = *(__int16 *)(v11 + 18);
    if ((v12 & 0x80000000) == 0)
    {
      v42 = *(_QWORD *)(v11 + 48);
      if (v42 != v11 + 40)
      {
        v43 = 0;
        do
        {
          v44 = v42 - 24;
          if (!v42)
            v44 = 0;
          *(_DWORD *)(v44 + 56) = v43++;
          v42 = *(_QWORD *)(v42 + 8);
        }
        while (v42 != v11 + 40);
      }
      *(_WORD *)(v11 + 18) = v12 | 0x8000;
    }
    v13 = *(_DWORD *)(v9 + 56);
    v14 = *(_DWORD *)(v10 + 56);
  }
  if (v13 < v14)
  {
    *a3 = v9;
    *a4 = v10;
    v19 = a3[1];
    a3[1] = a4[1];
    a4[1] = v19;
    v20 = *a3;
    v21 = *a2;
    if (*a3 == *a2)
    {
      v26 = a3[1];
      v27 = a2[1];
      v28 = *(_QWORD *)(v26 + 40);
      v29 = *(__int16 *)(v28 + 18);
      if ((v29 & 0x80000000) == 0)
      {
        v51 = *(_QWORD *)(v28 + 48);
        if (v51 != v28 + 40)
        {
          v52 = 0;
          do
          {
            v53 = v51 - 24;
            if (!v51)
              v53 = 0;
            *(_DWORD *)(v53 + 56) = v52++;
            v51 = *(_QWORD *)(v51 + 8);
          }
          while (v51 != v28 + 40);
        }
        *(_WORD *)(v28 + 18) = v29 | 0x8000;
      }
      v24 = *(_DWORD *)(v26 + 56);
      v25 = *(_DWORD *)(v27 + 56);
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 40);
      v23 = *(__int16 *)(v22 + 18);
      if ((v23 & 0x80000000) == 0)
      {
        v48 = *(_QWORD *)(v22 + 48);
        if (v48 != v22 + 40)
        {
          v49 = 0;
          do
          {
            v50 = v48 - 24;
            if (!v48)
              v50 = 0;
            *(_DWORD *)(v50 + 56) = v49++;
            v48 = *(_QWORD *)(v48 + 8);
          }
          while (v48 != v22 + 40);
        }
        *(_WORD *)(v22 + 18) = v23 | 0x8000;
      }
      v24 = *(_DWORD *)(v20 + 56);
      v25 = *(_DWORD *)(v21 + 56);
    }
    if (v24 < v25)
    {
      *a2 = v20;
      *a3 = v21;
      v30 = a2[1];
      a2[1] = a3[1];
      a3[1] = v30;
      v31 = *a2;
      v32 = *a1;
      if (*a2 == *a1)
      {
        v37 = a2[1];
        v38 = a1[1];
        v39 = *(_QWORD *)(v37 + 40);
        v40 = *(__int16 *)(v39 + 18);
        if ((v40 & 0x80000000) == 0)
        {
          v57 = *(_QWORD *)(v39 + 48);
          if (v57 != v39 + 40)
          {
            v58 = 0;
            do
            {
              v59 = v57 - 24;
              if (!v57)
                v59 = 0;
              *(_DWORD *)(v59 + 56) = v58++;
              v57 = *(_QWORD *)(v57 + 8);
            }
            while (v57 != v39 + 40);
          }
          *(_WORD *)(v39 + 18) = v40 | 0x8000;
        }
        v35 = *(_DWORD *)(v37 + 56);
        v36 = *(_DWORD *)(v38 + 56);
      }
      else
      {
        v33 = *(_QWORD *)(v31 + 40);
        v34 = *(__int16 *)(v33 + 18);
        if ((v34 & 0x80000000) == 0)
        {
          v54 = *(_QWORD *)(v33 + 48);
          if (v54 != v33 + 40)
          {
            v55 = 0;
            do
            {
              v56 = v54 - 24;
              if (!v54)
                v56 = 0;
              *(_DWORD *)(v56 + 56) = v55++;
              v54 = *(_QWORD *)(v54 + 8);
            }
            while (v54 != v33 + 40);
          }
          *(_WORD *)(v33 + 18) = v34 | 0x8000;
        }
        v35 = *(_DWORD *)(v31 + 56);
        v36 = *(_DWORD *)(v32 + 56);
      }
      if (v35 < v36)
      {
        *a1 = v31;
        *a2 = v32;
        v41 = a1[1];
        a1[1] = a2[1];
        a2[1] = v41;
      }
    }
  }
  return result;
}

uint64_t sub_1C5AF5F8C()
{
  int v1;
  int *v2;
  int v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"View the CFG before DFA Jump Threading";
  v4.n128_u64[1] = 38;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED81C420, "dfa-jump-view-cfg-before", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81C420, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Max number of blocks searched to find a threading path";
  v4.n128_u64[1] = 54;
  v3 = 1;
  v1 = 20;
  v2 = &v1;
  sub_1C63122C4((__int128 *)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81C4E0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Maximum cost accepted for the transformation";
  v4.n128_u64[1] = 44;
  v3 = 1;
  v1 = 50;
  v2 = &v1;
  sub_1C61DFB30((uint64_t)&unk_1ED81C5A0, "dfa-cost-threshold", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81C5A0, &dword_1C475E000);
}

uint64_t sub_1C5AF60B8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Hoist/decompose integer division and remainder";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "div-rem-pairs";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1ED81C668;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5AF7540;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5AF614C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81C668;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81944C8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81C670);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AF60B8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81C670, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::DivRemPairsPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t ResultImpl;
  char v8;

  v6 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  v8 = sub_1C5AF62D0(a1, v6, ResultImpl + 8);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v8 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5AF62D0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  llvm::DominatorTree *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v19;
  int v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  const llvm::Instruction **v36;
  char v37;
  const llvm::Instruction **v38;
  int v39;
  const llvm::Instruction *v40;
  const llvm::Instruction *v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t ***v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  const llvm::Instruction *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const llvm::Instruction **v62;
  const llvm::Instruction *v63;
  int v64;
  int v65;
  const llvm::Instruction *v66;
  uint64_t **v67;
  char *v68;
  uint64_t **v69;
  llvm::ValueAsMetadata *v70;
  uint64_t v71;
  _QWORD *v72;
  const llvm::Instruction *v73;
  llvm::Instruction *v74;
  llvm::Instruction *v75;
  char v76;
  const llvm::Instruction *v77;
  int v78;
  char *v79;
  llvm::BasicBlock *v80;
  llvm::BasicBlock *v81;
  uint64_t ***v82;
  uint64_t ***v83;
  char *v84;
  char *v85;
  uint64_t ****v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *****v93;
  uint64_t **v94;
  char *v95;
  char *v96;
  uint64_t ***v97;
  _QWORD *v98;
  uint64_t **v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t ****v106;
  uint64_t ***v107;
  int v108;
  int v109;
  uint64_t result;
  uint64_t v111;
  uint64_t v112;
  uint64_t i;
  unsigned __int8 *v114;
  int v115;
  llvm::Function *Function;
  llvm::Value *PersonalityFn;
  const llvm::Value *v118;
  uint64_t v119;
  uint64_t j;
  unsigned __int8 *v121;
  int v122;
  llvm::Function *v123;
  llvm::Value *v124;
  const llvm::Value *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  int v129;
  int v130;
  uint64_t v131;
  llvm::BasicBlock **v132;
  uint64_t ***v134;
  uint64_t **v135;
  char *v136;
  uint64_t **v137;
  uint64_t v138;
  const llvm::Instruction *v139;
  int v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t v145;
  int v146;
  uint64_t ***v147;
  uint64_t **v148;
  uint64_t *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t ****v155;
  uint64_t ***v156;
  int v157;
  int v158;
  uint64_t ***v159;
  uint64_t **v160;
  char *v161;
  uint64_t **v162;
  uint64_t v163;
  const llvm::Instruction *v164;
  int v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const llvm::Instruction *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const llvm::Instruction **v180;
  const llvm::Instruction *v181;
  int v182;
  int v183;
  const llvm::Instruction *v184;
  uint64_t **v185;
  char *v186;
  uint64_t **v187;
  llvm::ValueAsMetadata *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  BOOL v194;
  unsigned __int8 *v196;
  llvm::Instruction *v197;
  unsigned int v198;
  BOOL v199;
  _QWORD *v201;
  _QWORD *v203;
  unsigned __int8 *v204;
  llvm::Instruction *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v218;
  const llvm::Instruction **v219;
  char *v220;
  uint64_t **v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD v226[2];
  unsigned int v227;
  uint64_t v228;
  uint64_t *v229;
  __int128 v230;
  uint64_t *v231;
  uint64_t **v232;
  char v233;
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v226[0] = 0;
  v226[1] = 0;
  v227 = 0;
  v220 = 0;
  v221 = 0;
  LODWORD(v222) = 0;
  v224 = 0;
  v225 = 0;
  v223 = 0;
  v3 = *(_QWORD *)(a1 + 80);
  v218 = a1 + 72;
  if (v3 == a1 + 72)
  {
    v4 = (llvm::DominatorTree *)a3;
    v5 = a2;
    v6 = 0;
    *(_QWORD *)&v230 = &v231;
    *((_QWORD *)&v230 + 1) = 0x400000000;
  }
  else
  {
    do
    {
      v7 = v3 - 24;
      if (!v3)
        v7 = 0;
      v8 = v7 + 40;
      v9 = *(_QWORD *)(v7 + 48);
      while (v9 != v8)
      {
        if (v9)
          v10 = v9 - 24;
        else
          v10 = 0;
        v11 = *(unsigned __int8 *)(v10 + 16);
        switch(*(_BYTE *)(v10 + 16))
        {
          case '/':
            v24 = *(_DWORD *)(v10 + 20);
            if ((v24 & 0x40000000) != 0)
              v25 = *(uint64_t **)(v10 - 8);
            else
              v25 = (uint64_t *)(v10 - 32 * (v24 & 0x7FFFFFF));
            v32 = *v25;
            v33 = (uint64_t *)v25[4];
            LOBYTE(v230) = 0;
            goto LABEL_67;
          case '0':
            v28 = *(_DWORD *)(v10 + 20);
            if ((v28 & 0x40000000) != 0)
              v29 = *(uint64_t **)(v10 - 8);
            else
              v29 = (uint64_t *)(v10 - 32 * (v28 & 0x7FFFFFF));
            v32 = *v29;
            v33 = (uint64_t *)v29[4];
            LOBYTE(v230) = 1;
LABEL_67:
            *((_QWORD *)&v230 + 1) = v32;
            v231 = v33;
            *(_QWORD *)(sub_1C63124F8((uint64_t)v226, (uint64_t)&v230) + 24) = v10;
            goto LABEL_68;
          case '2':
            v26 = *(_DWORD *)(v10 + 20);
            if ((v26 & 0x40000000) != 0)
              v27 = *(uint64_t **)(v10 - 8);
            else
              v27 = (uint64_t *)(v10 - 32 * (v26 & 0x7FFFFFF));
            v30 = *v27;
            v31 = (uint64_t *)v27[4];
            LOBYTE(v230) = 0;
            goto LABEL_63;
          case '3':
            v22 = *(_DWORD *)(v10 + 20);
            if ((v22 & 0x40000000) != 0)
              v23 = *(uint64_t **)(v10 - 8);
            else
              v23 = (uint64_t *)(v10 - 32 * (v22 & 0x7FFFFFF));
            v30 = *v23;
            v31 = (uint64_t *)v23[4];
            LOBYTE(v230) = 1;
LABEL_63:
            *((_QWORD *)&v230 + 1) = v30;
            v231 = v31;
            goto LABEL_64;
          default:
            if (v11 == 5)
            {
              if (*(_WORD *)(v10 + 18) != 15)
                goto LABEL_68;
              v14 = (uint64_t *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
              v12 = *v14;
              if (!*v14)
                goto LABEL_68;
              v13 = v14[4];
              if (!v13)
                goto LABEL_68;
            }
            else
            {
              if (v11 != 43)
                goto LABEL_68;
              v12 = *(_QWORD *)(v10 - 64);
              if (!v12)
                goto LABEL_68;
              v13 = *(_QWORD *)(v10 - 32);
              if (!v13)
                goto LABEL_68;
            }
            v228 = 0;
            v229 = 0;
            *(_QWORD *)&v230 = v12;
            *((_QWORD *)&v230 + 1) = &v229;
            v231 = &v228;
            v232 = &v229;
            v15 = *(unsigned __int8 *)(v13 + 16);
            if (v15 == 5)
            {
              if (*(_WORD *)(v13 + 18) != 17)
                goto LABEL_68;
              v16 = *(_QWORD *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
              if (sub_1C5AF7AEC((uint64_t)&v230, v16))
              {
                if (v16 && *(unsigned __int8 *)(v16 + 16) >= 0x1Cu)
                {
                  v228 = v16;
                  v19 = *(uint64_t **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 32);
                  if (v229 == v19)
                    goto LABEL_48;
                }
              }
              v16 = *(_QWORD *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 32);
              if (!sub_1C5AF7AEC((uint64_t)&v230, v16))
                goto LABEL_68;
              if (!v16 || *(unsigned __int8 *)(v16 + 16) < 0x1Cu)
                goto LABEL_68;
              v228 = v16;
              v17 = (uint64_t **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
            }
            else
            {
              if (v15 != 45)
                goto LABEL_68;
              v17 = (uint64_t **)(v13 - 64);
              v16 = *(_QWORD *)(v13 - 64);
              if (sub_1C5AF7AEC((uint64_t)&v230, v16))
              {
                if (v16 && *(unsigned __int8 *)(v16 + 16) >= 0x1Cu)
                {
                  v228 = v16;
                  v19 = *(uint64_t **)(v13 - 32);
                  if (v229 == v19)
                    goto LABEL_48;
                }
              }
              v16 = *(_QWORD *)(v13 - 32);
              if (!sub_1C5AF7AEC((uint64_t)&v230, v16) || !v16 || *(unsigned __int8 *)(v16 + 16) < 0x1Cu)
                goto LABEL_68;
              v228 = v16;
            }
            v19 = *v17;
            if (v229 != *v17)
              goto LABEL_68;
LABEL_48:
            LOBYTE(v230) = *(_BYTE *)(v16 + 16) == 48;
            *((_QWORD *)&v230 + 1) = v12;
            v231 = v19;
            v232 = (uint64_t **)v10;
            v233 = 1;
LABEL_64:
            *(_QWORD *)sub_1C6312428((uint64_t)&v220, &v230) = v10;
LABEL_68:
            v9 = *(_QWORD *)(v9 + 8);
            break;
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v218);
    v35 = v223;
    v34 = v224;
    *(_QWORD *)&v230 = &v231;
    *((_QWORD *)&v230 + 1) = 0x400000000;
    v6 = v226[0];
    if (v223 == v224)
    {
      v4 = (llvm::DominatorTree *)a3;
      v5 = a2;
    }
    else
    {
      v209 = v227;
      v210 = v226[0] + 32 * v227;
      v4 = (llvm::DominatorTree *)a3;
      v5 = a2;
      do
      {
        v229 = 0;
        if (sub_1C5AF7790(v6, v209, (unsigned __int8 *)v35, &v229) && v229 != (uint64_t *)v210)
        {
          v211 = *(_QWORD *)(v35 + 24);
          v212 = DWORD2(v230);
          if (DWORD2(v230) >= HIDWORD(v230))
          {
            v214 = v229[3];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v230, (uint64_t)&v231, DWORD2(v230) + 1, 16);
            v215 = (_QWORD *)(v230 + 16 * DWORD2(v230));
            *v215 = v214;
            v215[1] = v211;
            v212 = DWORD2(v230);
          }
          else
          {
            v213 = (_QWORD *)(v230 + 16 * DWORD2(v230));
            *v213 = v229[3];
            v213[1] = v211;
          }
          DWORD2(v230) = v212 + 1;
        }
        v35 += 32;
      }
      while (v35 != v34);
    }
  }
  sub_1C6176BF8(&v220);
  MEMORY[0x1CAA32FB4](v6, 8);
  v36 = (const llvm::Instruction **)v230;
  if (!DWORD2(v230))
  {
    v37 = 0;
    goto LABEL_303;
  }
  v37 = 0;
  v38 = (const llvm::Instruction **)(v230 + 16 * DWORD2(v230));
  v219 = v38;
  do
  {
    v39 = (*(uint64_t (**)(_QWORD, _QWORD, BOOL))(*(_QWORD *)*v5 + 416))(*v5, *(_QWORD *)*v36, *((_BYTE *)*v36 + 16) == 48);
    v40 = v36[1];
    if (v39 && (*((_BYTE *)v40 + 16) & 0xFE) != 0x32)
    {
      v41 = *v36;
      v42 = *((_DWORD *)*v36 + 5);
      if ((v42 & 0x40000000) != 0)
        v43 = (_QWORD *)*((_QWORD *)v41 - 1);
      else
        v43 = (_QWORD *)((char *)v41 - 32 * (v42 & 0x7FFFFFF));
      v44 = (_QWORD *)*v43;
      v45 = v43[4];
      if (*((_BYTE *)v41 + 16) == 48)
      {
        LOWORD(v224) = 257;
        v46 = (char *)operator new(0x80uLL);
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
        v47 = v46 + 8;
        *((_QWORD *)v46 + 2) = 0;
        *((_QWORD *)v46 + 5) = 0;
        *((_QWORD *)v46 + 6) = 0;
        *((_QWORD *)v46 + 4) = 0;
        v48 = v46 + 32;
        *((_QWORD *)v46 + 8) = *v44;
        v49 = (uint64_t ***)(v46 + 64);
        *((_QWORD *)v46 + 3) = v46 + 64;
        *((_QWORD *)v46 + 7) = v46 + 64;
        *((_QWORD *)v46 + 9) = 0;
        v50 = 51;
      }
      else
      {
        LOWORD(v224) = 257;
        v46 = (char *)operator new(0x80uLL);
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
        v47 = v46 + 8;
        *((_QWORD *)v46 + 2) = 0;
        *((_QWORD *)v46 + 5) = 0;
        *((_QWORD *)v46 + 6) = 0;
        *((_QWORD *)v46 + 4) = 0;
        v48 = v46 + 32;
        *((_QWORD *)v46 + 8) = *v44;
        v49 = (uint64_t ***)(v46 + 64);
        *((_QWORD *)v46 + 3) = v46 + 64;
        *((_QWORD *)v46 + 7) = v46 + 64;
        *((_QWORD *)v46 + 9) = 0;
        v50 = 50;
      }
      v46[80] = v50;
      v46[81] = 0;
      *((_WORD *)v46 + 41) = 0;
      *((_DWORD *)v46 + 21) = 2;
      *((_DWORD *)v46 + 30) = 0;
      *(_OWORD *)(v46 + 104) = 0u;
      *(_OWORD *)(v46 + 88) = 0u;
      *(_QWORD *)v46 = v44;
      v53 = v44[1];
      v52 = v44 + 1;
      v51 = v53;
      *v47 = v53;
      if (v53)
        *(_QWORD *)(v51 + 16) = v47;
      *((_QWORD *)v46 + 2) = v52;
      *v52 = v46;
      if (*((_QWORD *)v46 + 4))
      {
        **((_QWORD **)v46 + 6) = *((_QWORD *)v46 + 5);
        v206 = *((_QWORD *)v46 + 5);
        if (v206)
          *(_QWORD *)(v206 + 16) = *((_QWORD *)v46 + 6);
      }
      *v48 = v45;
      if (v45)
      {
        v56 = *(_QWORD *)(v45 + 8);
        v55 = (_QWORD *)(v45 + 8);
        v54 = v56;
        *((_QWORD *)v46 + 5) = v56;
        if (v56)
          *(_QWORD *)(v54 + 16) = v46 + 40;
        *((_QWORD *)v46 + 6) = v55;
        *v55 = v48;
      }
      llvm::Value::setName(v49, (uint64_t)&v220);
      v57 = v36[1];
      if ((*((_BYTE *)v57 + 23) & 0x10) == 0)
      {
        v67 = 0;
        v68 = &byte_1C871356D;
        goto LABEL_98;
      }
      v58 = ***(_QWORD ***)v57;
      v59 = *(_QWORD *)(v58 + 152);
      v60 = *(unsigned int *)(v58 + 168);
      if ((_DWORD)v60)
      {
        LODWORD(v61) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
        v62 = (const llvm::Instruction **)(v59 + 16 * v61);
        v63 = *v62;
        if (*v62 == v57)
        {
LABEL_97:
          v66 = v62[1];
          v69 = *(_QWORD *)v66;
          v68 = (char *)v66 + 16;
          v67 = v69;
LABEL_98:
          LOWORD(v224) = 773;
          v220 = v68;
          v221 = v67;
          v222 = ".recomposed";
          llvm::Value::setName(v49, (uint64_t)&v220);
          sub_1C53DF664((_QWORD *)(*((_QWORD *)v36[1] + 5) + 40), (uint64_t)v36[1] + 24, (uint64_t)v49);
          v70 = v36[1];
          v36[1] = (const llvm::Instruction *)v49;
          v37 = 1;
          llvm::Value::doRAUW(v70, (llvm::Value *)v49, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v70 + 5) + 40, (uint64_t ***)v70);
          v71 = *((_QWORD *)v70 + 3);
          v72 = (_QWORD *)*((_QWORD *)v70 + 4);
          *v72 = v71;
          *(_QWORD *)(v71 + 8) = v72;
          *((_QWORD *)v70 + 3) = 0;
          *((_QWORD *)v70 + 4) = 0;
          llvm::Value::deleteValue(v70);
          v40 = v36[1];
          goto LABEL_99;
        }
        v64 = 1;
        while (v63 != (const llvm::Instruction *)-4096)
        {
          v65 = v61 + v64++;
          v61 = v65 & (v60 - 1);
          v63 = *(const llvm::Instruction **)(v59 + 16 * v61);
          if (v63 == v57)
          {
            v62 = (const llvm::Instruction **)(v59 + 16 * v61);
            goto LABEL_97;
          }
        }
      }
      v62 = (const llvm::Instruction **)(v59 + 16 * v60);
      goto LABEL_97;
    }
LABEL_99:
    v73 = *v36;
    if (v39)
    {
      if (*((_QWORD *)v40 + 5) == *((_QWORD *)v73 + 5))
        goto LABEL_236;
      if (llvm::DominatorTree::dominates(v4, v73, v40))
      {
        v74 = v36[1];
        v75 = *v36;
        goto LABEL_112;
      }
      if (llvm::DominatorTree::dominates(v4, v36[1], *v36))
      {
        v74 = *v36;
        v75 = v36[1];
LABEL_112:
        llvm::Instruction::moveAfter(v74, v75);
LABEL_113:
        v37 = 1;
        goto LABEL_236;
      }
LABEL_114:
      v80 = (llvm::BasicBlock *)*((_QWORD *)*v36 + 5);
      v81 = (llvm::BasicBlock *)*((_QWORD *)v36[1] + 5);
      if ((llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v81) != v80)
      {
        v5 = a2;
        goto LABEL_236;
      }
      result = llvm::BasicBlock::getUniquePredecessor(v81);
      if (!result)
        goto LABEL_165;
      v111 = result;
      v112 = (uint64_t)v36[1] + 24;
      for (i = *((_QWORD *)v81 + 6); i != v112; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v114 = (unsigned __int8 *)(i - 24);
        else
          v114 = 0;
        v115 = v114[16];
        if (v115 == 29 || v115 == 35)
          goto LABEL_165;
        if (v115 == 80)
        {
          Function = (llvm::Function *)llvm::Instruction::getFunction((llvm::Instruction *)v114);
          PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(Function);
          result = (uint64_t)llvm::classifyEHPersonality(PersonalityFn, v118);
          if ((_DWORD)result != 10)
            goto LABEL_165;
        }
        else
        {
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v114) & 1) != 0)
            goto LABEL_165;
          result = llvm::Instruction::willReturn((llvm::Instruction *)v114);
          if ((result & 1) == 0)
            goto LABEL_165;
        }
      }
      v119 = (uint64_t)*v36 + 24;
      for (j = *((_QWORD *)v80 + 6); j != v119; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v121 = (unsigned __int8 *)(j - 24);
        else
          v121 = 0;
        v122 = v121[16];
        if (v122 == 29 || v122 == 35)
          goto LABEL_165;
        if (v122 == 80)
        {
          v123 = (llvm::Function *)llvm::Instruction::getFunction((llvm::Instruction *)v121);
          v124 = (llvm::Value *)llvm::Function::getPersonalityFn(v123);
          result = (uint64_t)llvm::classifyEHPersonality(v124, v125);
          if ((_DWORD)result != 10)
            goto LABEL_165;
        }
        else
        {
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v121) & 1) != 0)
            goto LABEL_165;
          result = llvm::Instruction::willReturn((llvm::Instruction *)v121);
          if ((result & 1) == 0)
            goto LABEL_165;
        }
      }
      v127 = (_QWORD *)(v111 + 40);
      v126 = *(_QWORD **)(v111 + 40);
      if (v126 != (_QWORD *)(v111 + 40))
      {
        v128 = v126 - 3;
        if (!v126)
          v128 = 0;
        v129 = *((unsigned __int8 *)v128 + 16);
        if (v129 != 30)
        {
          v130 = 2;
          switch(*((_BYTE *)v128 + 16))
          {
            case 0x1E:
              __break(1u);
              return result;
            case 0x1F:
              v130 = (*((_DWORD *)v128 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_286;
            case 0x20:
            case 0x26:
              v130 = (*((_DWORD *)v128 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_286;
            case 0x21:
              goto LABEL_174;
            case 0x24:
              v130 = *((_WORD *)v128 + 9) & 1;
              goto LABEL_286;
            case 0x25:
              v130 = 1;
              goto LABEL_174;
            case 0x27:
              v130 = *((_DWORD *)v128 + 20) + 1;
LABEL_286:
              if (!v130)
                goto LABEL_243;
              goto LABEL_174;
            default:
              goto LABEL_243;
          }
        }
        if ((*((_DWORD *)v128 + 5) & 0x7FFFFFF) == 3)
          v130 = 2;
        else
          v130 = 1;
LABEL_174:
        v131 = 0;
        v132 = (llvm::BasicBlock **)(v128 - 4);
        while (1)
        {
          if (v129 != 30)
            __asm { BR              X0 }
          if (v80 != *v132 && v81 != *v132)
            break;
          ++v131;
          v132 -= 4;
          if (v130 == v131)
            goto LABEL_243;
        }
LABEL_165:
        v5 = a2;
LABEL_166:
        v38 = v219;
        goto LABEL_236;
      }
LABEL_243:
      v191 = *((_QWORD *)v80 + 1);
      v5 = a2;
      if (v191)
      {
        while (1)
        {
          v192 = *(_QWORD *)(v191 + 24);
          v193 = *(unsigned __int8 *)(v192 + 16);
          v194 = v192 && v193 >= 0x1C;
          if (v194 && v193 - 29 <= 0xA)
            break;
          v191 = *(_QWORD *)(v191 + 8);
          if (!v191)
            goto LABEL_253;
        }
LABEL_268:
        v201 = *(_QWORD **)(v192 + 40);
        if (v81 != (llvm::BasicBlock *)v201 && v111 != (_QWORD)v201)
          goto LABEL_166;
        while (1)
        {
          v191 = *(_QWORD *)(v191 + 8);
          if (!v191)
            break;
          v192 = *(_QWORD *)(v191 + 24);
          v198 = *(unsigned __int8 *)(v192 + 16);
          if (v192)
            v199 = v198 >= 0x1C;
          else
            v199 = 0;
          if (v199 && v198 - 29 <= 0xA)
            goto LABEL_268;
        }
      }
LABEL_253:
      if (v126 == v127)
      {
        v197 = 0;
      }
      else
      {
        if (v126)
          v196 = (unsigned __int8 *)(v126 - 3);
        else
          v196 = 0;
        if (v196[16] - 29 >= 0xB)
          v197 = 0;
        else
          v197 = (llvm::Instruction *)v196;
      }
      v38 = v219;
      llvm::Instruction::moveBefore(*v36, v197);
      if (v39)
      {
        v203 = (_QWORD *)*v127;
        if ((_QWORD *)*v127 == v127)
        {
          v205 = 0;
        }
        else
        {
          if (v203)
            v204 = (unsigned __int8 *)(v203 - 3);
          else
            v204 = 0;
          if (v204[16] - 29 >= 0xB)
            v205 = 0;
          else
            v205 = (llvm::Instruction *)v204;
        }
        llvm::Instruction::moveBefore(v36[1], v205);
        goto LABEL_113;
      }
      v37 = 1;
LABEL_104:
      v76 = 1;
      goto LABEL_107;
    }
    if (llvm::DominatorTree::dominates(v4, v73, v40))
      goto LABEL_104;
    if (!llvm::DominatorTree::dominates(v4, v36[1], *v36))
      goto LABEL_114;
    v76 = 0;
LABEL_107:
    if ((*((_BYTE *)v36[1] + 16) & 0xFE) != 0x32)
      goto LABEL_236;
    v77 = *v36;
    v78 = *((_DWORD *)*v36 + 5);
    if ((v78 & 0x40000000) != 0)
      v79 = (char *)*((_QWORD *)v77 - 1);
    else
      v79 = (char *)v77 - 32 * (v78 & 0x7FFFFFF);
    v82 = *(uint64_t ****)v79;
    v83 = (uint64_t ***)*((_QWORD *)v79 + 4);
    LOWORD(v224) = 257;
    v84 = (char *)operator new(0x80uLL);
    v85 = v84;
    *(_QWORD *)v84 = 0;
    *((_QWORD *)v84 + 2) = 0;
    *((_QWORD *)v84 + 1) = 0;
    *((_QWORD *)v84 + 5) = 0;
    *((_QWORD *)v84 + 6) = 0;
    *((_QWORD *)v84 + 4) = 0;
    v86 = (uint64_t ****)(v84 + 32);
    *((_QWORD *)v84 + 8) = *(_QWORD *)v77;
    v87 = (uint64_t)(v84 + 64);
    *((_QWORD *)v84 + 3) = v84 + 64;
    *((_QWORD *)v84 + 7) = v84 + 64;
    *((_QWORD *)v84 + 9) = 0;
    v88 = (uint64_t *)(v84 + 72);
    v84[80] = 45;
    v84[81] = 0;
    *((_WORD *)v84 + 41) = 0;
    *((_DWORD *)v84 + 21) = 2;
    *(_OWORD *)(v84 + 88) = 0u;
    v89 = (uint64_t)(v84 + 88);
    *((_DWORD *)v84 + 30) = 0;
    *(_OWORD *)(v84 + 104) = 0u;
    *(_QWORD *)v84 = v77;
    v92 = *((_QWORD *)v77 + 1);
    v91 = (_QWORD *)((char *)v77 + 8);
    v90 = v92;
    *((_QWORD *)v84 + 1) = v92;
    if (v92)
      *(_QWORD *)(v90 + 16) = v84 + 8;
    *((_QWORD *)v84 + 2) = v91;
    *v91 = v84;
    if (*((_QWORD *)v84 + 4))
    {
      **((_QWORD **)v84 + 6) = *((_QWORD *)v84 + 5);
      v207 = *((_QWORD *)v84 + 5);
      if (v207)
        *(_QWORD *)(v207 + 16) = *((_QWORD *)v84 + 6);
    }
    *v86 = v83;
    if (v83)
    {
      v93 = (uint64_t *****)(v83 + 1);
      v94 = v83[1];
      *((_QWORD *)v84 + 5) = v94;
      if (v94)
        v94[2] = (uint64_t *)(v84 + 40);
      *((_QWORD *)v84 + 6) = v93;
      *v93 = v86;
    }
    llvm::Value::setName((uint64_t ***)v84 + 8, (uint64_t)&v220);
    LOWORD(v224) = 257;
    v95 = (char *)operator new(0x80uLL);
    v96 = v95;
    *(_QWORD *)v95 = 0;
    *((_QWORD *)v95 + 2) = 0;
    *((_QWORD *)v95 + 1) = 0;
    *((_QWORD *)v95 + 5) = 0;
    *((_QWORD *)v95 + 6) = 0;
    *((_QWORD *)v95 + 4) = 0;
    *((_QWORD *)v95 + 8) = *v82;
    v97 = (uint64_t ***)(v95 + 64);
    *((_QWORD *)v95 + 3) = v95 + 64;
    *((_QWORD *)v95 + 7) = v95 + 64;
    *((_QWORD *)v95 + 9) = 0;
    v95[80] = 43;
    v95[81] = 0;
    *((_WORD *)v95 + 41) = 0;
    *((_DWORD *)v95 + 21) = 2;
    *((_DWORD *)v95 + 30) = 0;
    *(_OWORD *)(v95 + 104) = 0u;
    *(_OWORD *)(v95 + 88) = 0u;
    *(_QWORD *)v95 = v82;
    v98 = v82 + 1;
    v99 = v82[1];
    *((_QWORD *)v95 + 1) = v99;
    if (v99)
      v99[2] = (uint64_t *)(v95 + 8);
    *((_QWORD *)v95 + 2) = v98;
    *v98 = v95;
    if (*((_QWORD *)v95 + 4))
    {
      **((_QWORD **)v95 + 6) = *((_QWORD *)v95 + 5);
      v208 = *((_QWORD *)v95 + 5);
      if (v208)
        *(_QWORD *)(v208 + 16) = *((_QWORD *)v95 + 6);
    }
    v100 = *v88;
    *((_QWORD *)v95 + 5) = *v88;
    *((_QWORD *)v95 + 4) = v87;
    if (v100)
      *(_QWORD *)(v100 + 16) = v95 + 40;
    *((_QWORD *)v95 + 6) = v88;
    *v88 = (uint64_t)(v95 + 32);
    llvm::Value::setName((uint64_t ***)v95 + 8, (uint64_t)&v220);
    if ((v76 & 1) == 0)
      llvm::Instruction::moveBefore(*v36, v36[1]);
    sub_1C53DF664((_QWORD *)(*((_QWORD *)v36[1] + 5) + 40), (uint64_t)v36[1] + 24, v87);
    sub_1C53DF664((_QWORD *)(*((_QWORD *)v85 + 13) + 40), v89, (uint64_t)v97);
    if ((sub_1C4F8BE80(v82, 0, (uint64_t)*v36, a3, 0, 0) & 1) == 0)
    {
      v101 = (char *)operator new(0x60uLL);
      *((_DWORD *)v101 + 13) = *((_DWORD *)v101 + 13) & 0x38000000 | 1;
      *(_QWORD *)v101 = 0;
      *((_QWORD *)v101 + 1) = 0;
      *((_QWORD *)v101 + 2) = 0;
      *((_QWORD *)v101 + 3) = v101 + 32;
      if ((*((_BYTE *)v82 + 23) & 0x10) == 0)
      {
        v135 = 0;
        v136 = &byte_1C871356D;
        goto LABEL_186;
      }
      v102 = ***v82;
      v103 = *(_QWORD *)(v102 + 152);
      v104 = *(unsigned int *)(v102 + 168);
      if ((_DWORD)v104)
      {
        LODWORD(v105) = (v104 - 1) & ((v82 >> 4) ^ (v82 >> 9));
        v106 = (uint64_t ****)(v103 + 16 * v105);
        v107 = *v106;
        if (*v106 == v82)
        {
LABEL_185:
          v134 = v106[1];
          v137 = *v134;
          v136 = (char *)(v134 + 2);
          v135 = v137;
LABEL_186:
          LOWORD(v224) = 773;
          v220 = v136;
          v221 = (uint64_t)v135;
          v222 = ".frozen";
          v138 = llvm::FreezeInst::FreezeInst((uint64_t)(v101 + 32), v82, (uint64_t)&v220, (uint64_t)*v36);
          v139 = *v36;
          v140 = *((_DWORD *)*v36 + 5);
          if ((v140 & 0x40000000) != 0)
            v141 = (char *)*((_QWORD *)v139 - 1);
          else
            v141 = (char *)v139 - 32 * (v140 & 0x7FFFFFF);
          if (*(_QWORD *)v141)
          {
            **((_QWORD **)v141 + 2) = *((_QWORD *)v141 + 1);
            v142 = *((_QWORD *)v141 + 1);
            if (v142)
              *(_QWORD *)(v142 + 16) = *((_QWORD *)v141 + 2);
          }
          *(_QWORD *)v141 = v138;
          v145 = *((_QWORD *)v101 + 5);
          v144 = (uint64_t **)(v101 + 40);
          v143 = v145;
          *((_QWORD *)v141 + 1) = v145;
          if (v145)
            *(_QWORD *)(v143 + 16) = v141 + 8;
          *((_QWORD *)v141 + 2) = v144;
          *v144 = (uint64_t *)v141;
          v146 = *((_DWORD *)v96 + 21);
          if ((v146 & 0x40000000) != 0)
            v147 = (uint64_t ***)*((_QWORD *)v96 + 7);
          else
            v147 = &v97[-4 * (v146 & 0x7FFFFFF)];
          if (*v147)
          {
            *v147[2] = (uint64_t *)v147[1];
            v148 = v147[1];
            if (v148)
              v148[2] = (uint64_t *)v147[2];
          }
          *v147 = (uint64_t **)v138;
          v149 = *v144;
          v147[1] = (uint64_t **)*v144;
          if (v149)
            v149[2] = (uint64_t)(v147 + 1);
          v147[2] = v144;
          *v144 = (uint64_t *)v147;
          goto LABEL_201;
        }
        v108 = 1;
        while (v107 != (uint64_t ***)-4096)
        {
          v109 = v105 + v108++;
          v105 = v109 & (v104 - 1);
          v107 = *(uint64_t ****)(v103 + 16 * v105);
          if (v107 == v82)
          {
            v106 = (uint64_t ****)(v103 + 16 * v105);
            goto LABEL_185;
          }
        }
      }
      v106 = (uint64_t ****)(v103 + 16 * v104);
      goto LABEL_185;
    }
LABEL_201:
    v4 = (llvm::DominatorTree *)a3;
    if ((sub_1C4F8BE80(v83, 0, (uint64_t)*v36, a3, 0, 0) & 1) != 0)
      goto LABEL_226;
    v150 = (char *)operator new(0x60uLL);
    *((_DWORD *)v150 + 13) = *((_DWORD *)v150 + 13) & 0x38000000 | 1;
    *(_QWORD *)v150 = 0;
    *((_QWORD *)v150 + 1) = 0;
    *((_QWORD *)v150 + 2) = 0;
    *((_QWORD *)v150 + 3) = v150 + 32;
    if ((*((_BYTE *)v83 + 23) & 0x10) == 0)
    {
      v160 = 0;
      v161 = &byte_1C871356D;
      goto LABEL_211;
    }
    v151 = ***v83;
    v152 = *(_QWORD *)(v151 + 152);
    v153 = *(unsigned int *)(v151 + 168);
    if (!(_DWORD)v153)
      goto LABEL_209;
    LODWORD(v154) = (v153 - 1) & ((v83 >> 4) ^ (v83 >> 9));
    v155 = (uint64_t ****)(v152 + 16 * v154);
    v156 = *v155;
    if (*v155 != v83)
    {
      v157 = 1;
      while (v156 != (uint64_t ***)-4096)
      {
        v158 = v154 + v157++;
        v154 = v158 & (v153 - 1);
        v156 = *(uint64_t ****)(v152 + 16 * v154);
        if (v156 == v83)
        {
          v155 = (uint64_t ****)(v152 + 16 * v154);
          goto LABEL_210;
        }
      }
LABEL_209:
      v155 = (uint64_t ****)(v152 + 16 * v153);
    }
LABEL_210:
    v159 = v155[1];
    v162 = *v159;
    v161 = (char *)(v159 + 2);
    v160 = v162;
LABEL_211:
    LOWORD(v224) = 773;
    v220 = v161;
    v221 = (uint64_t)v160;
    v222 = ".frozen";
    v163 = llvm::FreezeInst::FreezeInst((uint64_t)(v150 + 32), v83, (uint64_t)&v220, (uint64_t)*v36);
    v164 = *v36;
    v165 = *((_DWORD *)*v36 + 5);
    if ((v165 & 0x40000000) != 0)
      v166 = (char *)*((_QWORD *)v164 - 1);
    else
      v166 = (char *)v164 - 32 * (v165 & 0x7FFFFFF);
    if (*((_QWORD *)v166 + 4))
    {
      **((_QWORD **)v166 + 6) = *((_QWORD *)v166 + 5);
      v167 = *((_QWORD *)v166 + 5);
      if (v167)
        *(_QWORD *)(v167 + 16) = *((_QWORD *)v166 + 6);
    }
    *((_QWORD *)v166 + 4) = v163;
    v170 = *((_QWORD *)v150 + 5);
    v169 = (uint64_t *)(v150 + 40);
    v168 = v170;
    *((_QWORD *)v166 + 5) = v170;
    if (v170)
      *(_QWORD *)(v168 + 16) = v166 + 40;
    *((_QWORD *)v166 + 6) = v169;
    *v169 = (uint64_t)(v166 + 32);
    v171 = *((_DWORD *)v85 + 21);
    if ((v171 & 0x40000000) != 0)
      v172 = *((_QWORD *)v85 + 7);
    else
      v172 = v87 - 32 * (v171 & 0x7FFFFFF);
    if (*(_QWORD *)(v172 + 32))
    {
      **(_QWORD **)(v172 + 48) = *(_QWORD *)(v172 + 40);
      v173 = *(_QWORD *)(v172 + 40);
      if (v173)
        *(_QWORD *)(v173 + 16) = *(_QWORD *)(v172 + 48);
    }
    *(_QWORD *)(v172 + 32) = v163;
    v174 = *v169;
    *(_QWORD *)(v172 + 40) = *v169;
    if (v174)
      *(_QWORD *)(v174 + 16) = v172 + 40;
    *(_QWORD *)(v172 + 48) = v169;
    *v169 = v172 + 32;
LABEL_226:
    v175 = v36[1];
    v5 = a2;
    if ((*((_BYTE *)v175 + 23) & 0x10) == 0)
    {
      v185 = 0;
      v186 = &byte_1C871356D;
      v38 = v219;
      goto LABEL_235;
    }
    v176 = ***(_QWORD ***)v175;
    v177 = *(_QWORD *)(v176 + 152);
    v178 = *(unsigned int *)(v176 + 168);
    v38 = v219;
    if (!(_DWORD)v178)
      goto LABEL_233;
    LODWORD(v179) = (v178 - 1) & ((v175 >> 4) ^ (v175 >> 9));
    v180 = (const llvm::Instruction **)(v177 + 16 * v179);
    v181 = *v180;
    if (*v180 != v175)
    {
      v182 = 1;
      while (v181 != (const llvm::Instruction *)-4096)
      {
        v183 = v179 + v182++;
        v179 = v183 & (v178 - 1);
        v181 = *(const llvm::Instruction **)(v177 + 16 * v179);
        if (v181 == v175)
        {
          v180 = (const llvm::Instruction **)(v177 + 16 * v179);
          goto LABEL_234;
        }
      }
LABEL_233:
      v180 = (const llvm::Instruction **)(v177 + 16 * v178);
    }
LABEL_234:
    v184 = v180[1];
    v187 = *(_QWORD *)v184;
    v186 = (char *)v184 + 16;
    v185 = v187;
LABEL_235:
    LOWORD(v224) = 773;
    v220 = v186;
    v221 = v185;
    v222 = ".decomposed";
    llvm::Value::setName(v97, (uint64_t)&v220);
    v188 = v36[1];
    v36[1] = (const llvm::Instruction *)v97;
    v37 = 1;
    llvm::Value::doRAUW(v188, (llvm::Value *)v97, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v188 + 5) + 40, (uint64_t ***)v188);
    v189 = *((_QWORD *)v188 + 3);
    v190 = (_QWORD *)*((_QWORD *)v188 + 4);
    *v190 = v189;
    *(_QWORD *)(v189 + 8) = v190;
    *((_QWORD *)v188 + 3) = 0;
    *((_QWORD *)v188 + 4) = 0;
    llvm::Value::deleteValue(v188);
LABEL_236:
    v36 += 2;
  }
  while (v36 != v38);
  v36 = (const llvm::Instruction **)v230;
LABEL_303:
  if (v36 != (const llvm::Instruction **)&v231)
    free(v36);
  return v37 & 1;
}

uint64_t sub_1C5AF7540()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AF614C(v0);
}

void sub_1C5AF756C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5AF7590(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5AF7608(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  int v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::TargetTransformInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v10 = *(_QWORD *)(v9 + 56);
  if (v10)
  {
    v3 = v20;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v10 + 48))(&v17, v10, a2);
    v2 = (uint64_t *)(v9 + 64);
    v11 = v17;
    if (!*(_BYTE *)(v9 + 72))
    {
      *(_QWORD *)(v9 + 64) = v17;
      *(_BYTE *)(v9 + 72) = 1;
      goto LABEL_9;
    }
    v17 = 0;
    v12 = *v2;
    *v2 = v11;
    if (!v12)
      goto LABEL_9;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v17;
    v17 = 0;
    if (!v13)
      goto LABEL_9;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_9:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C(v18);
  v14 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::DominatorTreeWrapperPass::ID);
  v16 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::DominatorTreeWrapperPass::ID);
  return sub_1C5AF62D0((uint64_t)a2, v2, v16 + 32);
}

uint64_t sub_1C5AF7790(uint64_t a1, int a2, unsigned __int8 *a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int i;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  BOOL v14;
  uint64_t result;

  if (!a2)
  {
    v11 = 0;
    result = 0;
    goto LABEL_23;
  }
  v4 = 0;
  v5 = *((_QWORD *)a3 + 1);
  v6 = *((_QWORD *)a3 + 2);
  v7 = *a3;
  v8 = v6 ^ v5 ^ v7;
  for (i = 1; ; ++i)
  {
    v10 = v8 & (a2 - 1);
    v11 = (unsigned __int8 *)(a1 + 32 * v10);
    v12 = *((_QWORD *)v11 + 1);
    if (v7 == *v11 && v5 == v12)
    {
      v12 = *((_QWORD *)a3 + 1);
      if (v6 == *((_QWORD *)v11 + 2))
      {
        result = 1;
        goto LABEL_23;
      }
    }
    if (!*v11)
      break;
    if (!v12)
    {
      v14 = *((_QWORD *)v11 + 2) == 0;
      goto LABEL_14;
    }
LABEL_13:
    v14 = 0;
LABEL_14:
    if (v14 && v4 == 0)
      v4 = (unsigned __int8 *)(a1 + 32 * v10);
    v8 = v10 + i;
  }
  if (v12 || *((_QWORD *)v11 + 2))
    goto LABEL_13;
  result = 0;
  if (v4)
    v11 = v4;
LABEL_23:
  *a4 = v11;
  return result;
}

char *sub_1C5AF784C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = &result[32 * v10];
      do
      {
        *result = 0;
        *((_QWORD *)result + 1) = 0;
        *((_QWORD *)result + 2) = 0;
        result += 32;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        if (*(_QWORD *)(v13 + 8) || *(_QWORD *)(v13 + 16))
        {
          v17 = 0;
          sub_1C5AF7790(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (unsigned __int8 *)v13, &v17);
          v14 = v17;
          *v17 = *(_BYTE *)v13;
          v14[1] = *(_QWORD *)(v13 + 8);
          v14[2] = *(_QWORD *)(v13 + 16);
          v14[3] = *(_QWORD *)(v13 + 24);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = &result[32 * v15];
    do
    {
      *result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = 0;
      result += 32;
    }
    while (result != v16);
  }
  return result;
}

char *sub_1C5AF799C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = &result[32 * v10];
      do
      {
        *result = 0;
        *((_QWORD *)result + 1) = 0;
        *((_QWORD *)result + 2) = 0;
        result += 32;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        if (*(_QWORD *)(v13 + 8) || *(_QWORD *)(v13 + 16))
        {
          v17 = 0;
          sub_1C5AF7790(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (unsigned __int8 *)v13, &v17);
          v14 = v17;
          *v17 = *(_BYTE *)v13;
          *((_QWORD *)v14 + 1) = *(_QWORD *)(v13 + 8);
          *((_QWORD *)v14 + 2) = *(_QWORD *)(v13 + 16);
          *((_DWORD *)v14 + 6) = *(_DWORD *)(v13 + 24);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = &result[32 * v15];
    do
    {
      *result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = 0;
      result += 32;
    }
    while (result != v16);
  }
  return result;
}

uint64_t sub_1C5AF7AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v3 >= 0x1C)
  {
    if (v3 - 47 <= 1
      && ((v4 = *(_DWORD *)(a2 + 20), (v4 & 0x40000000) != 0)
        ? (v5 = *(_QWORD **)(a2 - 8))
        : (v5 = (_QWORD *)(a2 - 32 * (v4 & 0x7FFFFFF))),
          *(_QWORD *)a1 == *v5 && (v8 = v5[4]) != 0))
    {
      **(_QWORD **)(a1 + 8) = v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (v3 == 5)
    {
      if (*(unsigned __int16 *)(a2 + 18) - 19 <= 1
        && (v6 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), *(_QWORD *)a1 == *v6))
      {
        v2 = v6[4];
        if (v2)
        {
          **(_QWORD **)(a1 + 8) = v2;
          LOBYTE(v2) = 1;
        }
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
    return (v3 == 5) & v2;
  }
}

uint64_t sub_1C5AF7BB0()
{
  uint64_t result;

  result = sub_1C4D9A2C4("div-rem-pairs-transform", 0x17uLL, "Controls transformations in div-rem-pairs pass", 0x2EuLL);
  dword_1ED81C660 = result;
  return result;
}

_QWORD *llvm::EarlyCSEPass::run@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v17[9];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[6];
  _QWORD v29[4];
  int v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[6];
  _QWORD v36[4];
  int v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[6];
  _QWORD v43[4];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, a2) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, a2) + 8;
  if (*a1)
    v12 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::MemorySSAAnalysis::Key, a2) + 8);
  else
    v12 = 0;
  v13 = *(_QWORD *)(a2 + 40) + 272;
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = v13;
  v17[5] = v8;
  v17[6] = v10;
  v17[7] = v11;
  v17[8] = 0;
  v18 = 257;
  v19 = v12;
  v14 = operator new();
  *(_QWORD *)v14 = v12;
  *(_QWORD *)(v14 + 8) = v14 + 24;
  *(_QWORD *)(v14 + 16) = 0x1000000000;
  *(_QWORD *)(v14 + 408) = v14 + 440;
  *(_QWORD *)(v14 + 416) = v14 + 440;
  *(_QWORD *)(v14 + 424) = 8;
  *(_DWORD *)(v14 + 432) = 0;
  *(_QWORD *)(v14 + 504) = v14 + 520;
  *(_QWORD *)(v14 + 512) = 0x800000000;
  *(_QWORD *)(v14 + 600) = 0;
  *(_QWORD *)(v14 + 592) = 0;
  *(_QWORD *)(v14 + 584) = v14 + 592;
  v21 = 0;
  v22 = 0;
  v20 = v14;
  v23 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = v28;
  v27 = 0x400000000;
  v28[4] = v29;
  v28[5] = 0;
  v29[0] = 0;
  v29[1] = 1;
  v30 = 0;
  v29[2] = 0;
  v29[3] = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = v35;
  v34 = 0x400000000;
  v35[4] = v36;
  v35[5] = 0;
  v36[0] = 0;
  v36[1] = 1;
  v36[2] = 0;
  v36[3] = 0;
  v37 = 0;
  v39 = 0u;
  v38 = 0u;
  v40 = v42;
  v41 = 0x400000000;
  v42[4] = v43;
  v42[5] = 0;
  v43[0] = 0;
  v43[1] = 1;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v43[2] = 0;
  v43[3] = 0;
  v15 = sub_1C5AF7E90((uint64_t)v17);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v15 & 1) != 0)
  {
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
    if (*a1)
      sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return sub_1C5AF9934(v17);
}

uint64_t sub_1C5AF7E90(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  int *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::BasicBlock *v20;
  uint64_t SinglePredecessor;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  BOOL v30;
  const llvm::APInt *v31;
  llvm::BasicBlock *v32;
  uint64_t v33;
  llvm::ValueHandleBase *v34;
  llvm::ConstantInt *v35;
  _QWORD **v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  llvm::Type *v42;
  llvm::DSOLocalEquivalent **v43;
  unsigned __int8 *v44;
  BOOL v45;
  const llvm::APInt *v46;
  uint64_t *v47;
  uint64_t v48;
  llvm::ValueHandleBase *v49;
  void **v50;
  void **v51;
  uint64_t v52;
  unsigned __int8 *v53;
  BOOL v54;
  const llvm::APInt *v55;
  llvm::DominatorTree *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t *v62;
  unsigned __int32 v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 *v69;
  llvm::UndefValue *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::DominatorTree *v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  int v101;
  unint64_t v103;
  uint64_t v104;
  int v105;
  llvm::DominatorTree *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  llvm::Value *v110;
  llvm::ValueAsMetadata *v111;
  llvm::Value *v112;
  uint64_t v113;
  uint64_t v114;
  const llvm::Instruction **v115;
  uint64_t v116;
  uint64_t v117;
  const llvm::Instruction *v118;
  const llvm::Instruction *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  int v129;
  BOOL v130;
  llvm::ValueHandleBase *v131;
  int v132;
  unsigned int v133;
  int v134;
  BOOL v135;
  int v136;
  unsigned __int32 v138;
  unint64_t *v139;
  int v140;
  unint64_t v141;
  llvm::BasicBlock **v142;
  int v143;
  llvm::BasicBlock *v144;
  int v145;
  BOOL v146;
  llvm::ConstantInt *v147;
  unsigned int v148;
  char v149;
  uint64_t v150;
  llvm::APInt *v151;
  unsigned int v152;
  void *v153;
  int v154;
  unsigned int v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BOOL4 v161;
  _BOOL4 v162;
  int v163;
  int v164;
  llvm::DominatorTree *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  llvm::ValueHandleBase *v180;
  llvm::ConstantInt *v181;
  unsigned int v182;
  char v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  BOOL v192;
  int v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _OWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t *v212;
  _QWORD *v213;
  uint64_t v214;
  llvm::Instruction **v215;
  llvm::Instruction **v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  _QWORD *v222;
  llvm::DominatorTree *v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  int v231;
  char v232;
  uint64_t v233;
  char v234;
  _QWORD *v235;
  BOOL v236;
  char v237;
  uint64_t v238;
  llvm::ConstantInt *v239;
  unsigned int v240;
  char v241;
  void **v242;
  void **v243;
  unint64_t v244;
  void *v245;
  void *v246;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int *v254;
  uint64_t v255;
  llvm::BasicBlock *v256;
  llvm::BasicBlock *v257;
  uint64_t v258;
  int v259;
  _QWORD *v260;
  _QWORD ***v261;
  llvm::ValueHandleBase *v262;
  void *__p[2];
  __int128 v264;
  __int128 v265;
  llvm::BasicBlock *v266;
  llvm::ValueHandleBase *v267;
  _QWORD *v268;
  llvm::BasicBlock *v269;
  int v270;
  unsigned __int16 v271;
  char v272;
  char v273;
  char v274;
  uint64_t ***v275;
  void *v276[2];
  _OWORD v277[2];
  __n128 v278;
  __int128 v279;
  _OWORD v280[3];
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  v264 = 0u;
  v265 = 0u;
  *(_OWORD *)__p = 0u;
  v2 = operator new();
  v3 = *(_DWORD *)(a1 + 544);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = v5 + 8 * *(unsigned int *)(v4 + 32);
  *(_DWORD *)v2 = v3;
  *(_DWORD *)(v2 + 4) = v3;
  *(_QWORD *)(v2 + 8) = v4;
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 24) = v6;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 88) = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 112) = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(v2 + 120) = 0;
  *(_BYTE *)(v2 + 128) = 0;
  v278.n128_u64[0] = v2;
  v258 = a1 + 96;
  *(_QWORD *)(v2 + 32) = a1 + 96;
  *(_QWORD *)(a1 + 120) = v2 + 32;
  v252 = a1 + 504;
  v253 = a1 + 232;
  *(_QWORD *)(v2 + 56) = a1 + 232;
  *(_QWORD *)(a1 + 256) = v2 + 56;
  v251 = a1 + 368;
  *(_QWORD *)(v2 + 80) = a1 + 368;
  *(_QWORD *)(a1 + 392) = v2 + 80;
  *(_QWORD *)(v2 + 104) = a1 + 504;
  *(_QWORD *)(a1 + 528) = v2 + 104;
  sub_1C5AF9D00((uint64_t)__p, &v278);
  v7 = *((_QWORD *)&v265 + 1);
  if (*((_QWORD *)&v265 + 1))
  {
    v8 = 0;
    v9 = (_DWORD *)(a1 + 544);
    v254 = (unsigned int *)(a1 + 544);
    while (1)
    {
      v10 = v265;
      v11 = __p[1];
      v12 = *(int **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v265 + v7 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v265 + v7 - 1) & 0x1FF));
      v13 = *v12;
      *v9 = *v12;
      if (*((_BYTE *)v12 + 128))
      {
        v14 = (uint64_t *)*((_QWORD *)v12 + 2);
        if (v14 == *((uint64_t **)v12 + 3))
        {
          *(_QWORD *)(*((_QWORD *)v12 + 13) + 24) = *((_QWORD *)v12 + 14);
          while (1)
          {
            v204 = *((_QWORD *)v12 + 15);
            if (!v204)
              break;
            v205 = *((_QWORD *)v12 + 13);
            if (*(_QWORD *)(v204 + 8))
            {
              *sub_1C5AFCABC(*((_QWORD *)v12 + 13), (llvm::Instruction **)(v204 + 16)) = *(const llvm::Instruction **)(v204 + 8);
            }
            else
            {
              v278.n128_u64[0] = 0;
              if (sub_1C5AFC884(*(_QWORD *)v205, *(_DWORD *)(v205 + 16), (llvm::Instruction **)(v204 + 16), (const llvm::Instruction ***)&v278))
              {
                *(_QWORD *)v278.n128_u64[0] = -8192;
                *(int32x2_t *)(v205 + 8) = vadd_s32(*(int32x2_t *)(v205 + 8), (int32x2_t)0x1FFFFFFFFLL);
              }
            }
            *((_QWORD *)v12 + 15) = *(_QWORD *)v204;
            MEMORY[0x1CAA32FB4](v204, 8);
          }
          v206 = *((_QWORD *)v12 + 10);
          *(_QWORD *)(v206 + 24) = *((_QWORD *)v12 + 11);
          v207 = (_QWORD *)*((_QWORD *)v12 + 12);
          if (v207)
          {
            do
            {
              v208 = v207 + 2;
              if (v207[1])
                sub_1C6312A30(v206, v208)[6] = v207[1];
              else
                sub_1C6312C98(v206, (uint64_t)v208);
              v209 = (_QWORD *)*v207;
              *((_QWORD *)v12 + 12) = *v207;
              v206 = *((_QWORD *)v12 + 10);
              *v207 = *(_QWORD *)(v206 + 32);
              *(_QWORD *)(v206 + 32) = v207;
              v207 = v209;
            }
            while (v209);
          }
          v210 = *((_QWORD *)v12 + 7);
          *(_QWORD *)(v210 + 24) = *((_QWORD *)v12 + 8);
          v211 = (_QWORD *)*((_QWORD *)v12 + 9);
          if (v211)
          {
            do
            {
              v212 = v211 + 2;
              if (v211[1])
              {
                *sub_1C5717998(v210, v212) = v211[1];
              }
              else
              {
                v278.n128_u64[0] = 0;
                if (sub_1C49F21C0(*(_QWORD *)v210, *(_DWORD *)(v210 + 16), *v212, &v278))
                {
                  *(_QWORD *)v278.n128_u64[0] = -8192;
                  *(int32x2_t *)(v210 + 8) = vadd_s32(*(int32x2_t *)(v210 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
              v213 = (_QWORD *)*v211;
              *((_QWORD *)v12 + 9) = *v211;
              v210 = *((_QWORD *)v12 + 7);
              *v211 = *(_QWORD *)(v210 + 32);
              *(_QWORD *)(v210 + 32) = v211;
              v211 = v213;
            }
            while (v213);
          }
          v214 = *((_QWORD *)v12 + 4);
          *(_QWORD *)(v214 + 24) = *((_QWORD *)v12 + 5);
          v215 = (llvm::Instruction **)*((_QWORD *)v12 + 6);
          if (v215)
          {
            do
            {
              if (v215[1])
              {
                *sub_1C5AFACF4(v214, v215 + 2) = v215[1];
              }
              else
              {
                v278.n128_u64[0] = 0;
                if (sub_1C5AFADCC(*(_QWORD *)v214, *(_DWORD *)(v214 + 16), v215 + 2, (const llvm::Instruction ***)&v278))
                {
                  *(_QWORD *)v278.n128_u64[0] = -8192;
                  *(int32x2_t *)(v214 + 8) = vadd_s32(*(int32x2_t *)(v214 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
              v216 = (llvm::Instruction **)*v215;
              *((_QWORD *)v12 + 6) = *v215;
              v214 = *((_QWORD *)v12 + 4);
              *v215 = *(llvm::Instruction **)(v214 + 32);
              *(_QWORD *)(v214 + 32) = v215;
              v215 = v216;
            }
            while (v216);
          }
          MEMORY[0x1CAA32FC0](v12, 0x10E0C40A0C30970);
          v217 = v264;
          v218 = (((_QWORD)v264 - (_QWORD)v11) << 6) - 1;
          *((_QWORD *)&v265 + 1) = v7 - 1;
          if ((void *)v264 == v11)
            v218 = 0;
          if ((unint64_t)(v218 - (v7 + v10) - 1023) <= 0xFFFFFFFFFFFFFBFFLL)
          {
            operator delete(*(void **)(v264 - 8));
            *(_QWORD *)&v264 = v217 - 8;
          }
        }
        else
        {
          v15 = *v14;
          *((_QWORD *)v12 + 2) = v14 + 1;
          v16 = operator new();
          v17 = v12[1];
          v18 = *(_QWORD *)(v15 + 24);
          v19 = v18 + 8 * *(unsigned int *)(v15 + 32);
          *(_DWORD *)v16 = v17;
          *(_DWORD *)(v16 + 4) = v17;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)(v16 + 16) = v18;
          *(_QWORD *)(v16 + 24) = v19;
          *(_QWORD *)(v16 + 40) = *(_QWORD *)(a1 + 120);
          *(_QWORD *)(v16 + 48) = 0;
          *(_QWORD *)(v16 + 64) = *(_QWORD *)(a1 + 256);
          *(_QWORD *)(v16 + 72) = 0;
          *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + 392);
          *(_QWORD *)(v16 + 96) = 0;
          *(_QWORD *)(v16 + 112) = *(_QWORD *)(a1 + 528);
          *(_QWORD *)(v16 + 120) = 0;
          *(_BYTE *)(v16 + 128) = 0;
          v278.n128_u64[0] = v16;
          *(_QWORD *)(v16 + 32) = v258;
          *(_QWORD *)(a1 + 120) = v16 + 32;
          *(_QWORD *)(v16 + 56) = v253;
          *(_QWORD *)(a1 + 256) = v16 + 56;
          *(_QWORD *)(v16 + 80) = v251;
          *(_QWORD *)(a1 + 392) = v16 + 80;
          *(_QWORD *)(v16 + 104) = v252;
          *(_QWORD *)(a1 + 528) = v16 + 104;
          sub_1C5AF9D00((uint64_t)__p, &v278);
        }
        goto LABEL_403;
      }
      v20 = (llvm::BasicBlock *)**((_QWORD **)v12 + 1);
      if (!llvm::BasicBlock::getSinglePredecessor(v20))
        *v9 = v13 + 1;
      SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v20);
      v257 = v20;
      if (!SinglePredecessor)
        goto LABEL_35;
      v22 = (_QWORD *)SinglePredecessor;
      v23 = *(_QWORD *)(SinglePredecessor + 40);
      if (v23 == SinglePredecessor + 40)
        goto LABEL_35;
      v24 = 0;
      if (v23)
        v25 = v23 - 24;
      else
        v25 = 0;
      v26 = *(unsigned __int8 *)(v25 + 16) - 40;
      if (v26 >= 0xFFFFFFF5)
        v27 = v25;
      else
        v27 = 0;
      if (!v23)
        goto LABEL_36;
      if (*(_BYTE *)(v27 + 16) != 30 || v26 < 0xFFFFFFF5)
        goto LABEL_36;
      if ((*(_DWORD *)(v27 + 20) & 0x7FFFFFF) != 3
        || ((v29 = *(_QWORD *)(v27 - 96)) != 0 ? (v30 = *(unsigned __int8 *)(v29 + 16) >= 0x1Cu) : (v30 = 0),
            !v30 || !sub_1C5AFA1EC(*(llvm::ConstrainedFPIntrinsic **)(v27 - 96))))
      {
LABEL_35:
        v24 = 0;
        goto LABEL_36;
      }
      v32 = v20;
      v33 = ***(_QWORD ***)v20;
      if (*(llvm::BasicBlock **)(v27 - 32) == v32)
      {
        v34 = *(llvm::ValueHandleBase **)(v33 + 1560);
        if (!v34)
        {
          v239 = *(llvm::ConstantInt **)(v33 + 1888);
          v240 = *(_DWORD *)(v33 + 1896);
          v278.n128_u32[2] = v240 >> 8;
          if (v240 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v278, 1, 0);
          }
          else
          {
            if (v240 <= 0xFF)
              v241 = 0;
            else
              v241 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v240);
            v278.n128_u64[0] = v241 & 1;
          }
          v34 = llvm::ConstantInt::get(v239, (llvm::LLVMContext *)&v278, v31);
          if (v278.n128_u32[2] >= 0x41 && v278.n128_u64[0])
            MEMORY[0x1CAA32F9C](v278.n128_u64[0], 0x1000C8000313F17);
          *(_QWORD *)(v33 + 1560) = v34;
        }
      }
      else
      {
        v34 = *(llvm::ValueHandleBase **)(v33 + 1568);
        if (!v34)
        {
          v35 = *(llvm::ConstantInt **)(v33 + 1888);
          v278.n128_u32[2] = *(_DWORD *)(v33 + 1896) >> 8;
          if (v278.n128_u32[2] > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v278, 0, 0);
          else
            v278.n128_u64[0] = 0;
          v34 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v278, v31);
          if (v278.n128_u32[2] >= 0x41 && v278.n128_u64[0])
            MEMORY[0x1CAA32F9C](v278.n128_u64[0], 0x1000C8000313F17);
          *(_QWORD *)(v33 + 1568) = v34;
        }
      }
      v24 = 0;
      v256 = *(llvm::BasicBlock **)(v27 - 32);
      v276[0] = v277;
      HIDWORD(v276[1]) = 4;
      v278.n128_u64[0] = (unint64_t)v280;
      v278.n128_u64[1] = (unint64_t)v280;
      *(_QWORD *)&v279 = 4;
      DWORD2(v279) = 0;
      v250 = (uint64_t *)((char *)v34 + 8);
      v219 = 1;
      *(_QWORD *)&v277[0] = v29;
      v20 = v257;
      v260 = v22;
      v262 = v34;
      do
      {
        v220 = v8;
        v221 = v24;
        v222 = (_QWORD *)*((_QWORD *)v276[0] + v219 - 1);
        LODWORD(v276[1]) = v219 - 1;
        v267 = v34;
        v268 = v222;
        sub_1C5AFA404(v258, (llvm::Instruction **)&v268, &v267);
        v223 = *(llvm::DominatorTree **)(a1 + 16);
        v268 = v22;
        v269 = v20;
        v224 = v222[1];
        if (v224)
        {
          v225 = 0;
          do
          {
            v227 = (uint64_t *)(v224 + 8);
            v226 = *(_QWORD *)(v224 + 8);
            if (llvm::DominatorTree::dominates(v223, (const llvm::BasicBlockEdge *)&v268, (const llvm::Use *)v224))
            {
              if (*(_QWORD *)v224)
              {
                **(_QWORD **)(v224 + 16) = *(_QWORD *)(v224 + 8);
                v228 = *(_QWORD *)(v224 + 8);
                if (v228)
                  *(_QWORD *)(v228 + 16) = *(_QWORD *)(v224 + 16);
              }
              *(_QWORD *)v224 = v262;
              if (v262)
              {
                v229 = *v250;
                *v227 = *v250;
                if (v229)
                  *(_QWORD *)(v229 + 16) = v227;
                *(_QWORD *)(v224 + 16) = v250;
                *v250 = v224;
              }
              ++v225;
            }
            v224 = v226;
          }
          while (v226);
        }
        else
        {
          v225 = 0;
        }
        v230 = v225 != 0;
        v266 = 0;
        v267 = 0;
        v20 = v257;
        if (v256 == v257)
        {
          v268 = &v267;
          v269 = (llvm::BasicBlock *)&v266;
          v231 = v221;
          v8 = v220;
          if ((sub_1C4FA438C(&v268, v222) & 1) == 0)
            goto LABEL_437;
        }
        else
        {
          v268 = &v267;
          v269 = (llvm::BasicBlock *)&v266;
          v231 = v221;
          v8 = v220;
          if (!sub_1C4FA4278(&v268, v222))
            goto LABEL_437;
        }
        v232 = 0;
        v233 = 0;
        v268 = v267;
        v269 = v266;
        do
        {
          v234 = v232;
          v235 = (&v268)[v233];
          if (v235)
            v236 = *((unsigned __int8 *)v235 + 16) >= 0x1Cu;
          else
            v236 = 0;
          if (v236 && sub_1C5AFA1EC((llvm::ConstrainedFPIntrinsic *)(&v268)[v233]))
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v278, (uint64_t)v235);
            if (v237)
            {
              v238 = LODWORD(v276[1]);
              if (LODWORD(v276[1]) >= (unint64_t)HIDWORD(v276[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v276, (uint64_t)v277, LODWORD(v276[1]) + 1, 8);
                v238 = LODWORD(v276[1]);
              }
              *((_QWORD *)v276[0] + v238) = v235;
              ++LODWORD(v276[1]);
            }
          }
          v232 = 1;
          v233 = 1;
        }
        while ((v234 & 1) == 0);
LABEL_437:
        v24 = v230 | v231;
        v219 = v276[1];
        v22 = v260;
        v34 = v262;
      }
      while (LODWORD(v276[1]));
      if (v278.n128_u64[1] != v278.n128_u64[0])
        free((void *)v278.n128_u64[1]);
      if (v276[0] != v277)
        free(v276[0]);
LABEL_36:
      v259 = v24;
      v36 = (_QWORD **)*((_QWORD *)v20 + 6);
      v261 = (_QWORD ***)((char *)v20 + 40);
      if (v36 != (_QWORD **)((char *)v20 + 40))
      {
        v255 = 0;
        v37 = a1 + 32;
        do
        {
          v38 = (_QWORD **)v36[1];
          v39 = (uint64_t)(v36 - 3);
          if (v36)
            v40 = (uint64_t)(v36 - 3);
          else
            v40 = 0;
          if (!*(_QWORD *)(v40 + 8) && llvm::wouldInstructionBeTriviallyDead(v40, *(uint64_t **)a1))
          {
            llvm::salvageKnowledge((llvm *)v40, *(char ***)(a1 + 24), 0, v74);
            v278.n128_u64[0] = (unint64_t)&v279;
            v278.n128_u64[1] = 0x100000000;
            llvm::findDbgUsers((uint64_t)&v278, v40);
            llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v40, (uint64_t *)v278.n128_u64[0], v278.n128_u32[2]);
            if ((__int128 *)v278.n128_u64[0] != &v279)
              free((void *)v278.n128_u64[0]);
            goto LABEL_229;
          }
          v41 = sub_1C4D9F8B4(v40);
          if (v36 && v41)
          {
            v44 = *(unsigned __int8 **)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
            if (v44)
              v45 = v44[16] >= 0x1Cu;
            else
              v45 = 0;
            if (!v45 || !sub_1C5AFA1EC((llvm::ConstrainedFPIntrinsic *)v44))
              goto LABEL_230;
            v276[0] = v44;
            v47 = **(uint64_t ***)v257;
            v48 = *v47;
            v49 = *(llvm::ValueHandleBase **)(*v47 + 1560);
            if (!v49)
            {
              v147 = *(llvm::ConstantInt **)(v48 + 1888);
              v148 = *(_DWORD *)(v48 + 1896);
              v278.n128_u32[2] = v148 >> 8;
              if (v148 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v278, 1, 0);
              }
              else
              {
                if (v148 <= 0xFF)
                  v149 = 0;
                else
                  v149 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v148);
                v278.n128_u64[0] = v149 & 1;
              }
              v49 = llvm::ConstantInt::get(v147, (llvm::LLVMContext *)&v278, v46);
              if (v278.n128_u32[2] >= 0x41 && v278.n128_u64[0])
                MEMORY[0x1CAA32F9C](v278.n128_u64[0], 0x1000C8000313F17);
              *(_QWORD *)(v48 + 1560) = v49;
            }
            v278.n128_u64[0] = (unint64_t)v49;
            v50 = v276;
            v51 = (void **)&v278;
            goto LABEL_100;
          }
          if (v36)
          {
            if (*(_BYTE *)(v40 + 16) == 84)
            {
              v52 = *(_QWORD *)(v40 - 32);
              if (v52)
              {
                if (!*(_BYTE *)(v52 + 16) && *(_QWORD *)(v52 + 24) == *(_QWORD *)(v40 + 72))
                {
                  v105 = *(_DWORD *)(v52 + 36);
                  if (v105 > 243)
                  {
                    if (v105 == 244 || v105 == 272)
                      goto LABEL_230;
                  }
                  else
                  {
                    if (v105 == 126)
                      goto LABEL_230;
                    if (v105 == 164)
                    {
                      if (!*(_QWORD *)(v40 + 8))
                      {
                        llvm::MemoryLocation::getForArgument(v40, 1u, *(uint64_t **)a1, (uint64_t)&v278);
                        if ((sub_1C5AFC1B0(*(_QWORD *)(a1 + 368), *(_DWORD *)(a1 + 384), (uint64_t)&v278, v276) & 1) == 0)
                          sub_1C6312994(v251, *(_QWORD *)(a1 + 392), &v278, v254);
                      }
                      goto LABEL_230;
                    }
                  }
                }
                if (!*(_BYTE *)(v52 + 16)
                  && *(_QWORD *)(v52 + 24) == *(_QWORD *)(v40 + 72)
                  && *(_DWORD *)(v52 + 36) == 125)
                {
                  v53 = *(unsigned __int8 **)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
                  if (v53)
                    v54 = v53[16] >= 0x1Cu;
                  else
                    v54 = 0;
                  if (!v54
                    || !sub_1C5AFA1EC(*(llvm::ConstrainedFPIntrinsic **)(v40 - 32
                                                                             * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF))))
                  {
                    goto LABEL_241;
                  }
                  v276[0] = v53;
                  v278.n128_u64[0] = 0;
                  if (sub_1C5AFADCC(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), (llvm::Instruction **)v276, (const llvm::Instruction ***)&v278))
                  {
                    v57 = v278.n128_u64[0];
                    v58 = *(_QWORD *)(a1 + 96);
                    v59 = *(unsigned int *)(a1 + 112);
                  }
                  else
                  {
                    v58 = *(_QWORD *)(a1 + 96);
                    v59 = *(unsigned int *)(a1 + 112);
                    v57 = v58 + 16 * v59;
                  }
                  if (v57 == v58 + 16 * v59)
                    goto LABEL_331;
                  v150 = *(_QWORD *)(*(_QWORD *)(v57 + 8) + 24);
                  if (!v150)
                    goto LABEL_331;
                  if (*(_BYTE *)(v150 + 16) != 16)
                    goto LABEL_325;
                  v151 = (llvm::APInt *)(v150 + 24);
                  v152 = *(_DWORD *)(v150 + 32);
                  if (v152 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase(v151) != v152 - 1)
                    {
LABEL_325:
                      v167 = *(_DWORD *)(v40 + 20) & 0x7FFFFFF;
                      v168 = -v167;
                      v169 = (_QWORD *)(v40 - 32 * v167);
                      if (*v169)
                      {
                        v170 = v40 + 32 * v168;
                        v172 = *(_QWORD **)(v170 + 16);
                        v171 = (_QWORD *)(v170 + 16);
                        *v172 = *(v171 - 1);
                        v173 = *(v171 - 1);
                        if (v173)
                          *(_QWORD *)(v173 + 16) = *v171;
                      }
                      *v169 = v150;
                      v176 = *(_QWORD *)(v150 + 8);
                      v175 = (_QWORD *)(v150 + 8);
                      v174 = v176;
                      v177 = v40 + 32 * v168;
                      *(_QWORD *)(v177 + 8) = v176;
                      if (v176)
                        *(_QWORD *)(v174 + 16) = v177 + 8;
                      *(_QWORD *)(v177 + 16) = v175;
                      *v175 = v169;
LABEL_331:
                      v276[0] = v53;
                      v178 = **(uint64_t ***)v257;
                      v179 = *v178;
                      v180 = *(llvm::ValueHandleBase **)(*v178 + 1560);
                      if (!v180)
                      {
                        v181 = *(llvm::ConstantInt **)(v179 + 1888);
                        v182 = *(_DWORD *)(v179 + 1896);
                        v278.n128_u32[2] = v182 >> 8;
                        if (v182 >> 8 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v278, 1, 0);
                        }
                        else
                        {
                          if (v182 <= 0xFF)
                            v183 = 0;
                          else
                            v183 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v182);
                          v278.n128_u64[0] = v183 & 1;
                        }
                        v180 = llvm::ConstantInt::get(v181, (llvm::LLVMContext *)&v278, v55);
                        if (v278.n128_u32[2] >= 0x41 && v278.n128_u64[0])
                          MEMORY[0x1CAA32F9C](v278.n128_u64[0], 0x1000C8000313F17);
                        *(_QWORD *)(v179 + 1560) = v180;
                      }
                      v278.n128_u64[0] = (unint64_t)v180;
                      sub_1C5AFA404(v258, (llvm::Instruction **)v276, &v278);
LABEL_241:
                      v255 = 0;
                      goto LABEL_230;
                    }
                  }
                  else if (*(_QWORD *)v151 != 1)
                  {
                    goto LABEL_325;
                  }
                  goto LABEL_228;
                }
              }
            }
          }
          v60 = *(_DWORD *)(v40 + 20);
          if ((v60 & 0x40000000) != 0)
          {
            v62 = *(uint64_t **)(v40 - 8);
            v61 = v60 & 0x7FFFFFF;
          }
          else
          {
            v61 = v60 & 0x7FFFFFF;
            v62 = (uint64_t *)(v40 - 32 * v61);
          }
          v278.n128_u64[0] = (unint64_t)&v279;
          v278.n128_u64[1] = 0x800000000;
          if (v61 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v278, (uint64_t)&v279, v61, 8);
            v63 = v278.n128_u32[2];
            v65 = (__int128 *)v278.n128_u64[0];
            v64 = v278.n128_u32[2];
          }
          else
          {
            v63 = 0;
            if (!v61)
            {
              v69 = &v279;
              goto LABEL_77;
            }
            v64 = 0;
            v65 = &v279;
          }
          v66 = 32 * v61;
          v67 = (_QWORD *)v65 + v64;
          do
          {
            v68 = *v62;
            v62 += 4;
            *v67++ = v68;
            v66 -= 32;
          }
          while (v66);
          v69 = (__int128 *)v278.n128_u64[0];
LABEL_77:
          v278.n128_u32[2] = v63 + v61;
          v70 = llvm::SimplifyInstructionWithOperands((llvm *)v40, (uint64_t)v69, v63 + v61, v37, v42, v43);
          if ((__int128 *)v278.n128_u64[0] == &v279)
          {
            if (!v70)
              goto LABEL_82;
          }
          else
          {
            free((void *)v278.n128_u64[0]);
            if (!v70)
              goto LABEL_82;
          }
          if (!*(_QWORD *)(v40 + 8)
            || (v259 = 1, llvm::Value::doRAUW((llvm::ValueAsMetadata *)v40, v70, (llvm::Value *)1),
                          !*(_QWORD *)(v40 + 8)))
          {
            if (llvm::wouldInstructionBeTriviallyDead(v40, *(uint64_t **)a1))
              goto LABEL_228;
          }
LABEL_82:
          if (sub_1C5AFA1EC((llvm::ConstrainedFPIntrinsic *)v40))
          {
            v276[0] = (void *)v40;
            v278.n128_u64[0] = 0;
            if (sub_1C5AFADCC(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), (llvm::Instruction **)v276, (const llvm::Instruction ***)&v278))
            {
              v71 = v278.n128_u64[0];
              v72 = *(_QWORD *)(a1 + 96);
              v73 = *(unsigned int *)(a1 + 112);
            }
            else
            {
              v72 = *(_QWORD *)(a1 + 96);
              v73 = *(unsigned int *)(a1 + 112);
              v71 = v72 + 16 * v73;
            }
            if (v71 != v72 + 16 * v73)
            {
              v75 = *(unsigned __int8 **)(*(_QWORD *)(v71 + 8) + 24);
              if (v75)
              {
                if (v75[16] >= 0x1Cu
                  && (sub_1C4774A9C((uint64_t)v75)
                   || llvm::Operator::hasPoisonGeneratingFlags((llvm::Operator *)v75)
                   && (sub_1C4F8CF08((uint64_t)v75, 1, 0) & 1) == 0))
                {
                  llvm::Instruction::andIRFlags((uint64_t)v75, v40);
                }
                v259 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v40, (llvm::Value *)v75, (llvm::Value *)1);
                llvm::salvageKnowledge((llvm *)v40, *(char ***)(a1 + 24), 0, v106);
                sub_1C5AFA388(a1, v40);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v40 + 40) + 40, (uint64_t ***)v40);
                v107 = *(_QWORD *)(v40 + 24);
                v108 = *(_QWORD **)(v40 + 32);
                *v108 = v107;
                *(_QWORD *)(v107 + 8) = v108;
                *(_QWORD *)(v40 + 24) = 0;
                *(_QWORD *)(v40 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v40);
                goto LABEL_230;
              }
            }
            v278.n128_u64[0] = v40;
            v276[0] = (void *)v40;
            v50 = (void **)&v278;
            v51 = v276;
LABEL_100:
            sub_1C5AFA404(v258, (llvm::Instruction **)v50, v51);
            goto LABEL_230;
          }
          sub_1C5AFA494((int *)&v268, v40, *(_QWORD **)(a1 + 8));
          if ((_DWORD)v268)
          {
            if (v269 && v272)
            {
              if (v274)
                goto LABEL_107;
LABEL_106:
              if (!sub_1C5AFA5B0((uint64_t)&v268))
              {
LABEL_107:
                v255 = 0;
                ++*v254;
              }
              if (v275 && *((_BYTE *)v275 + 16) == 60 && (*((_BYTE *)v275 + 23) & 0x20) != 0)
              {
                v77 = ***v275;
                v278.n128_u64[0] = (unint64_t)v275;
                v78 = *(_DWORD *)(v77 + 2496);
                if (!v78)
                {
                  v156 = 0;
                  goto LABEL_303;
                }
                v79 = *(_QWORD *)(v77 + 2480);
                v80 = v78 - 1;
                v81 = v80 & ((v275 >> 4) ^ (v275 >> 9));
                v82 = (_QWORD *)(v79 + 40 * v81);
                v83 = *v82;
                if ((uint64_t ***)*v82 != v275)
                {
                  v84 = 0;
                  v85 = 1;
                  while (v83 != -4096)
                  {
                    if (v84)
                      v86 = 0;
                    else
                      v86 = v83 == -8192;
                    if (v86)
                      v84 = v82;
                    v87 = v81 + v85++;
                    v81 = v87 & v80;
                    v82 = (_QWORD *)(v79 + 40 * v81);
                    v83 = *v82;
                    if ((uint64_t ***)*v82 == v275)
                      goto LABEL_121;
                  }
                  if (v84)
                    v156 = v84;
                  else
                    v156 = v82;
LABEL_303:
                  v82 = sub_1C541AB24(v77 + 2480, (uint64_t)&v278, (uint64_t *)&v278, v156);
                  v157 = v278.n128_u64[0];
                  v82[4] = 0;
                  v82[3] = 0;
                  *v82 = v157;
                  v82[1] = v82 + 3;
                  v82[2] = 0x100000000;
                }
LABEL_121:
                v88 = *((unsigned int *)v82 + 4);
                if ((_DWORD)v88)
                {
                  v89 = (_QWORD *)(v82[1] + 8);
                  v90 = 16 * v88;
                  while (*((_DWORD *)v89 - 2) != 6)
                  {
                    v89 += 2;
                    v90 -= 16;
                    if (!v90)
                      goto LABEL_217;
                  }
                  if (*v89)
                  {
                    llvm::MemoryLocation::getOrNone((uint64_t ***)v40, (uint64_t)&v278);
                    *(__n128 *)v276 = v278;
                    v277[0] = v279;
                    v277[1] = v280[0];
                    if ((sub_1C5AFC1B0(*(_QWORD *)(a1 + 368), *(_DWORD *)(a1 + 384), (uint64_t)v276, &v278) & 1) == 0)
                      sub_1C6312994(v251, *(_QWORD *)(a1 + 392), (__n128 *)v276, v254);
                  }
                }
              }
LABEL_217:
              v123 = (uint64_t *)&v269;
              if ((_DWORD)v268)
              {
LABEL_223:
                v125 = *v123;
              }
              else
              {
                v124 = *((unsigned __int8 *)v275 + 16);
                if (v275 && v124 == 60 || (v125 = 0, v275) && v124 == 61)
                {
                  v123 = (uint64_t *)(v275 - 4);
                  goto LABEL_223;
                }
              }
              sub_1C5AFA644((uint64_t)&v278, *(_QWORD *)(a1 + 232), *(_DWORD *)(a1 + 248), v125);
              v126 = sub_1C5AFA6D4(a1, (uint64_t)&v278, (uint64_t)&v268, *(_DWORD *)(a1 + 544));
              if (!v126)
              {
                if ((_DWORD)v268)
                {
                  v267 = v269;
                  v129 = v271;
                  v130 = v270 != 0;
                }
                else
                {
                  v131 = 0;
                  v132 = *((unsigned __int8 *)v275 + 16);
                  if (v275 && (v132 - 62) >= 0xFFFFFFFE)
                    v131 = (llvm::ValueHandleBase *)*(v275 - 4);
                  v267 = v131;
                  if (v132 == 60 || v132 == 61)
                    v130 = (*((_WORD *)v275 + 9) & 0x380) != 0;
                  else
                    v130 = (v132 - 63) <= 2;
                  v129 = -1;
                }
                v133 = *v254;
                v276[0] = (void *)v40;
                v276[1] = (void *)__PAIR64__(v129, v133);
                LOBYTE(v277[0]) = v130;
                sub_1C5AFAA94(v253, (uint64_t *)&v267, (__n128 *)v276);
                goto LABEL_241;
              }
              if (*(_QWORD *)(v40 + 8))
              {
                v112 = (llvm::Value *)v126;
                v111 = (llvm::ValueAsMetadata *)v40;
LABEL_227:
                llvm::Value::doRAUW(v111, v112, (llvm::Value *)1);
              }
              goto LABEL_228;
            }
          }
          else if (v275)
          {
            v76 = *((unsigned __int8 *)v275 + 16);
            if ((v76 - 62) >= 0xFFFFFFFE && v76 == 60 && *(v275 - 4))
            {
              if ((*((_WORD *)v275 + 9) & 1) == 0)
                goto LABEL_106;
              goto LABEL_107;
            }
          }
          v91 = *(unsigned __int8 *)(v40 + 16) - 33;
          if (v91 > 0x37)
          {
LABEL_130:
            if (!llvm::Instruction::mayThrow((llvm::Instruction *)v40))
              goto LABEL_143;
            goto LABEL_131;
          }
          if (((1 << (*(_BYTE *)(v40 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v120 = *(_QWORD *)(v40 + 64);
            if (v120 && ((*(_BYTE *)(v120 + 20) & 4) != 0 || (*(_BYTE *)(v120 + 17) & 0x10) != 0))
              goto LABEL_130;
            v278.n128_u32[0] = 7;
            if (!sub_1C53E4BBC(v40, (__int32 *)&v278, 1uLL))
              goto LABEL_466;
            v195 = *(_QWORD *)(v40 - 32);
            if (!v195 || *(_BYTE *)(v195 + 16) || *(_QWORD *)(v195 + 24) != *(_QWORD *)(v40 + 72))
            {
              v37 = a1 + 32;
              goto LABEL_131;
            }
            v37 = a1 + 32;
            if (*(_DWORD *)(v195 + 36) == 7)
            {
LABEL_466:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v40, 66) & 1) != 0
                || llvm::CallBase::hasFnAttrOnCalledFunction(v40, 44))
              {
                goto LABEL_130;
              }
            }
          }
          else if (((1 << (*(_BYTE *)(v40 + 16) - 33)) & 0x808001C8000010) == 0
                 && (v91 != 28 || (*(_WORD *)(v40 + 18) & 0x301) == 0))
          {
            goto LABEL_130;
          }
LABEL_131:
          if ((_DWORD)v268)
          {
            if (v269 && !v272)
              goto LABEL_143;
          }
          else if (v275)
          {
            v92 = *((unsigned __int8 *)v275 + 16);
            if ((v92 - 62) >= 0xFFFFFFFE
              && *(v275 - 4)
              && v92 != 60
              && (v92 != 61 || (*((_WORD *)v275 + 9) & 0x301) == 0))
            {
              goto LABEL_143;
            }
          }
          v255 = 0;
LABEL_143:
          v93 = *(unsigned __int8 *)(v40 + 16);
          if (*(_BYTE *)(*(_QWORD *)v40 + 8) == 7 || v93 != 84)
            goto LABEL_153;
          v94 = *(_QWORD *)(v40 + 64);
          if (!v94 || (*(_BYTE *)(v94 + 17) & 0x30) == 0)
          {
            v95 = *(_DWORD *)(v40 + 20);
            if (v95 < 0)
            {
              v186 = v40 - 32 * (v95 & 0x7FFFFFF);
              v189 = *(_QWORD *)(v186 - 8);
              v187 = v186 - 8;
              v188 = v189;
              if (v189)
              {
                v190 = -v188;
                while (1)
                {
                  v191 = *(_DWORD *)(*(_QWORD *)(v187 + v190) + 8);
                  v192 = v191 > 7;
                  v193 = (1 << v191) & 0x83;
                  if (v192 || v193 == 0)
                    break;
                  v190 += 16;
                  v37 = a1 + 32;
                  if (!v190)
                    goto LABEL_148;
                }
                v93 = 84;
                v37 = a1 + 32;
                goto LABEL_157;
              }
            }
LABEL_148:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v40, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v40, 44) & 1) == 0)
            {
              v93 = *(unsigned __int8 *)(v40 + 16);
LABEL_153:
              if (v36 && v93 == 63)
              {
                if ((*(_WORD *)(v40 + 18) & 7) == 5)
                  goto LABEL_230;
                v93 = 63;
              }
LABEL_157:
              if ((_DWORD)v268)
              {
                v99 = (uint64_t)v269;
                if (v269)
                  v100 = v273 == 0;
                else
                  v100 = 1;
                if (!v100)
                  goto LABEL_170;
              }
              else if (v275)
              {
                v101 = *((unsigned __int8 *)v275 + 16);
                if ((v101 - 62) >= 0xFFFFFFFE)
                {
                  v99 = (uint64_t)*(v275 - 4);
                  if (v101 == 61 && v99 != 0)
                  {
LABEL_170:
                    sub_1C5AFA644((uint64_t)&v278, *(_QWORD *)(a1 + 232), *(_DWORD *)(a1 + 248), v99);
                    v103 = v278.n128_u64[0];
                    if (v278.n128_u64[0]
                      && v103 == sub_1C5AFA6D4(a1, (uint64_t)&v278, (uint64_t)&v268, *(_DWORD *)(a1 + 544)))
                    {
                      goto LABEL_228;
                    }
                    v93 = *(unsigned __int8 *)(v40 + 16);
                  }
                }
              }
              v104 = (v93 - 33);
              if (v104 <= 0x37)
              {
                if (((1 << v104) & 0x8000000000041) != 0)
                {
                  v121 = *(_QWORD *)(v40 + 64);
                  if (v121 && (*(_BYTE *)(v121 + 17) & 0x30) != 0)
                    goto LABEL_230;
                  v122 = *(_DWORD *)(v40 + 20);
                  if (v122 < 0
                    && (v196 = v40 - 32 * (v122 & 0x7FFFFFF),
                        v199 = *(_QWORD *)(v196 - 8),
                        v197 = v196 - 8,
                        (v198 = v199) != 0))
                  {
                    v200 = -v198;
                    while (1)
                    {
                      v201 = *(_DWORD *)(*(_QWORD *)(v197 + v200) + 8);
                      v192 = v201 > 7;
                      v202 = (1 << v201) & 0x83;
                      if (v192 || v202 == 0)
                        break;
                      v200 += 16;
                      if (!v200)
                        goto LABEL_211;
                    }
                  }
                  else
                  {
LABEL_211:
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v40, 45) & 1) != 0
                      || (llvm::CallBase::hasFnAttrOnCalledFunction(v40, 44) & 1) != 0)
                    {
                      goto LABEL_230;
                    }
                  }
                  goto LABEL_243;
                }
                if (v104 == 27)
                {
                  if ((*(_WORD *)(v40 + 18) & 0x301) == 0)
                    goto LABEL_230;
LABEL_243:
                  ++*v254;
                  v134 = (int)v268;
                  if ((_DWORD)v268)
                  {
                    if (v269)
                      v135 = v273 == 0;
                    else
                      v135 = 1;
                    if (v135)
                      goto LABEL_230;
                  }
                  else
                  {
                    if (!v275)
                      goto LABEL_230;
                    v136 = *((unsigned __int8 *)v275 + 16);
                    if ((v136 - 62) < 0xFFFFFFFE)
                      goto LABEL_230;
                    if (v136 != 61 || *(v275 - 4) == 0)
                      goto LABEL_230;
                  }
                  if (v255)
                  {
                    sub_1C5AFA494((int *)&v278, v255, *(_QWORD **)(a1 + 8));
                    v138 = v278.n128_u32[0];
                    v139 = &v278.n128_u64[1];
                    if (v278.n128_u32[0])
                      goto LABEL_262;
                    v140 = *(unsigned __int8 *)(*(_QWORD *)&v280[0] + 16);
                    if (*(_QWORD *)&v280[0] && v140 == 60 || (v141 = 0, *(_QWORD *)&v280[0]) && v140 == 61)
                    {
                      v139 = (unint64_t *)(*(_QWORD *)&v280[0] - 32);
LABEL_262:
                      v141 = *v139;
                    }
                    v134 = (int)v268;
                    v142 = &v269;
                    if ((_DWORD)v268)
                    {
LABEL_269:
                      v144 = *v142;
                    }
                    else
                    {
                      v143 = *((unsigned __int8 *)v275 + 16);
                      if (v275 && v143 == 60 || (v144 = 0, v275) && v143 == 61)
                      {
                        v142 = (llvm::BasicBlock **)(v275 - 4);
                        goto LABEL_269;
                      }
                    }
                    if ((llvm::BasicBlock *)v141 == v144)
                    {
                      v249 = *(_QWORD *)&v280[0];
                      v158 = sub_1C5AFCCC8(*(uint64_t *)&v280[0]);
                      if (v158)
                      {
                        v159 = v158;
                        v248 = (uint64_t)v275;
                        v160 = sub_1C5AFCCC8((uint64_t)v275);
                        if (v160)
                        {
                          if (v159 == v160)
                          {
                            v161 = v134 == 0;
                            v162 = v134 != 0;
                            if (v271 != WORD2(v279))
                              v162 = 0;
                            if (v138)
                              v161 = v162;
                            if (v161 && sub_1C5AFA5B0((uint64_t)&v278) && sub_1C5AFA5B0((uint64_t)&v268))
                            {
                              v163 = sub_1C5AFC544(v249);
                              v164 = sub_1C5AFC544(v248);
                              if (v163 && v164)
                              {
                                if ((sub_1C5AFC594(v249, v248) & 1) != 0)
                                {
LABEL_343:
                                  llvm::salvageKnowledge((llvm *)v40, *(char ***)(a1 + 24), 0, v165);
                                  sub_1C5AFA388(a1, v255);
                                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v255 + 40) + 40, (uint64_t ***)v255);
                                  v184 = *(_QWORD *)(v255 + 24);
                                  v185 = *(_QWORD **)(v255 + 32);
                                  *v185 = v184;
                                  *(_QWORD *)(v184 + 8) = v185;
                                  *(_QWORD *)(v255 + 24) = 0;
                                  *(_QWORD *)(v255 + 32) = 0;
                                  llvm::Value::deleteValue((llvm::Value *)v255);
                                  v259 = 1;
                                  v134 = (int)v268;
                                }
                              }
                              else if (v163 == v164)
                              {
                                goto LABEL_343;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (v134)
                  {
                    v276[0] = v269;
                    v145 = v271;
                    v146 = v270 != 0;
                  }
                  else
                  {
                    v153 = 0;
                    v154 = *((unsigned __int8 *)v275 + 16);
                    if (v275 && (v154 - 62) >= 0xFFFFFFFE)
                      v153 = *(v275 - 4);
                    v276[0] = v153;
                    if (v154 == 60 || v154 == 61)
                    {
                      v146 = (*((_WORD *)v275 + 9) & 0x380) != 0;
                      v145 = -1;
                    }
                    else
                    {
                      v146 = (v154 - 63) <= 2;
                      v145 = -1;
                      v37 = a1 + 32;
                    }
                  }
                  v155 = *v254;
                  v278.n128_u64[0] = v40;
                  v278.n128_u64[1] = __PAIR64__(v145, v155);
                  LOBYTE(v279) = v146;
                  sub_1C5AFAA94(v253, (uint64_t *)v276, &v278);
                  if (sub_1C5AFA5B0((uint64_t)&v268))
                  {
                    if ((_DWORD)v268)
                    {
                      if (!v274)
                        goto LABEL_323;
                    }
                    else
                    {
                      v166 = *((unsigned __int8 *)v275 + 16);
                      if ((v275 && v166 == 60 || v275 && v166 == 61) && (*((_WORD *)v275 + 9) & 1) == 0)
                      {
LABEL_323:
                        v255 = v39;
                        goto LABEL_230;
                      }
                    }
                  }
                  goto LABEL_241;
                }
                if (((1 << v104) & 0x808001D0000010) != 0)
                  goto LABEL_243;
              }
              goto LABEL_230;
            }
          }
          v276[0] = (void *)v40;
          v278.n128_u64[0] = 0;
          if (sub_1C5AFC884(*(_QWORD *)(a1 + 504), *(_DWORD *)(a1 + 520), (llvm::Instruction **)v276, (const llvm::Instruction ***)&v278))
          {
            v96 = v278.n128_u64[0];
            v97 = *(_QWORD *)(a1 + 504);
            v98 = *(unsigned int *)(a1 + 520);
          }
          else
          {
            v97 = *(_QWORD *)(a1 + 504);
            v98 = *(unsigned int *)(a1 + 520);
            v96 = v97 + 16 * v98;
          }
          if (v96 != v97 + 16 * v98)
          {
            v109 = *(_QWORD *)(v96 + 8);
            v110 = *(llvm::Value **)(v109 + 24);
            if (v110)
            {
              if (sub_1C5AFAB2C(a1, *(_QWORD *)(v109 + 32), *(_DWORD *)(a1 + 544), *(_QWORD *)(v109 + 24), v40)&& (*(unsigned int (**)(_QWORD, uint64_t, llvm::Value *))(***(_QWORD ***)(a1 + 8) + 1232))(**(_QWORD **)(a1 + 8), v40, v110))
              {
                if (*(_QWORD *)(v40 + 8))
                {
                  v111 = (llvm::ValueAsMetadata *)v40;
                  v112 = v110;
                  goto LABEL_227;
                }
LABEL_228:
                llvm::salvageKnowledge((llvm *)v40, *(char ***)(a1 + 24), 0, v56);
LABEL_229:
                sub_1C5AFA388(a1, v40);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v40 + 40) + 40, (uint64_t ***)v40);
                v127 = *(_QWORD *)(v40 + 24);
                v128 = *(_QWORD **)(v40 + 32);
                *v128 = v127;
                *(_QWORD *)(v127 + 8) = v128;
                *(_QWORD *)(v40 + 24) = 0;
                *(_QWORD *)(v40 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v40);
                v259 = 1;
                goto LABEL_230;
              }
            }
          }
          v278.n128_u64[0] = v40;
          v113 = *(unsigned int *)(a1 + 544);
          v114 = *(_QWORD *)(a1 + 528);
          v115 = sub_1C5AFCABC(v252, (llvm::Instruction **)&v278);
          v116 = *(_QWORD *)(v114 + 16);
          v117 = v8;
          v118 = *v115;
          v119 = (const llvm::Instruction *)operator new(0x28uLL, (std::align_val_t)8uLL);
          *((_QWORD *)v119 + 2) = v40;
          *((_QWORD *)v119 + 3) = v40;
          *((_QWORD *)v119 + 4) = v113;
          *(_QWORD *)v119 = v116;
          *((_QWORD *)v119 + 1) = v118;
          v8 = v117;
          v37 = a1 + 32;
          *v115 = v119;
          *(_QWORD *)(v114 + 16) = v119;
LABEL_230:
          v36 = v38;
        }
        while (v38 != v261);
      }
      v8 = v8 | v259;
      v9 = (_DWORD *)(a1 + 544);
      v12[1] = *v254;
      *((_BYTE *)v12 + 128) = 1;
LABEL_403:
      v7 = *((_QWORD *)&v265 + 1);
      if (!*((_QWORD *)&v265 + 1))
        goto LABEL_456;
    }
  }
  LOBYTE(v8) = 0;
LABEL_456:
  v242 = (void **)__p[1];
  v243 = (void **)v264;
  v244 = v264 - (unint64_t)__p[1];
  if ((unint64_t)v264 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      v245 = *v242++;
      operator delete(v245);
      v244 -= 8;
    }
    while (v244 > 0x10);
  }
  while (v242 != v243)
  {
    v246 = *v242++;
    operator delete(v246);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v8 & 1;
}

_QWORD *sub_1C5AF9934(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  MEMORY[0x1CAA32FB4](a1[63], 8);
  a1[50] = 0;
  sub_1C4926AE8((uint64_t)(a1 + 51));
  MEMORY[0x1CAA32FB4](a1[46], 8);
  a1[33] = 0;
  sub_1C4926AE8((uint64_t)(a1 + 34));
  MEMORY[0x1CAA32FB4](a1[29], 8);
  a1[16] = 0;
  sub_1C4926AE8((uint64_t)(a1 + 17));
  MEMORY[0x1CAA32FB4](a1[12], 8);
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
  {
    sub_1C61247C0(v2 + 584, *(_QWORD **)(v2 + 592));
    v3 = *(void **)(v2 + 504);
    if (v3 != (void *)(v2 + 520))
      free(v3);
    v4 = *(void **)(v2 + 416);
    if (v4 != *(void **)(v2 + 408))
      free(v4);
    sub_1C4EE41F8((char **)(v2 + 8));
    MEMORY[0x1CAA32FC0](v2, 0x10E0C40B8556DDDLL);
  }
  return a1;
}

uint64_t sub_1C5AF9A0C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Early CSE";
  *(_QWORD *)(v2 + 8) = 9;
  *(_QWORD *)(v2 + 16) = "early-cse";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1ED81C678;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5AFCD44;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5AF9AB4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81C679;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194568;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(qword_1ED81C688);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AF9C44;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(qword_1ED81C688, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5AF9B7C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81C678;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194608;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81C680);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AF9A0C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81C680, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5AF9C44(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Early CSE w/ MemorySSA";
  *(_QWORD *)(v4 + 8) = 22;
  *(_QWORD *)(v4 + 16) = "early-cse-memssa";
  *(_QWORD *)(v4 + 24) = 16;
  *(_QWORD *)(v4 + 32) = &unk_1ED81C679;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5AFCD6C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

void sub_1C5AF9D00(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  void *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v8 = *(_QWORD *)(a1 + 32);
  if (v7 == *(_QWORD *)(a1 + 40) + v8)
  {
    v9 = v8 >= 0x200;
    v10 = v8 - 512;
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = v10;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      *(_QWORD *)(a1 + 8) = v11;
      if (v5 == *(char **)(a1 + 24))
      {
        v14 = *(char **)a1;
        if ((unint64_t)v11 <= *(_QWORD *)a1)
        {
          if (v5 == v14)
            v34 = 1;
          else
            v34 = (v5 - v14) >> 2;
          if (v34 >> 61)
            goto LABEL_96;
          v35 = (char *)operator new(8 * v34);
          v36 = &v35[8 * (v34 >> 2)];
          v38 = v5 - v11;
          v37 = v5 == v11;
          v5 = v36;
          if (!v37)
          {
            v5 = &v36[v38 & 0xFFFFFFFFFFFFFFF8];
            v39 = 8 * (v38 >> 3);
            v40 = &v35[8 * (v34 >> 2)];
            do
            {
              v41 = *(_QWORD *)v11;
              v11 += 8;
              *(_QWORD *)v40 = v41;
              v40 += 8;
              v39 -= 8;
            }
            while (v39);
          }
          *(_QWORD *)a1 = v35;
          *(_QWORD *)(a1 + 8) = v36;
          *(_QWORD *)(a1 + 16) = v5;
          *(_QWORD *)(a1 + 24) = &v35[8 * v34];
          if (v14)
          {
            operator delete(v14);
            v5 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v15 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
          if (v15 >= -1)
            v16 = v15 + 1;
          else
            v16 = v15 + 2;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v11[-8 * v18];
          v20 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v18], v11, v5 - v11);
            v5 = *(char **)(a1 + 8);
          }
          v21 = &v5[8 * v17];
          v5 = &v19[v20];
          *(_QWORD *)(a1 + 8) = v21;
          *(_QWORD *)(a1 + 16) = &v19[v20];
        }
      }
      *(_QWORD *)v5 = v12;
      goto LABEL_37;
    }
    v22 = v6 >> 3;
    v23 = *(char **)(a1 + 24);
    v24 = *(char **)a1;
    v25 = (uint64_t)&v23[-*(_QWORD *)a1];
    if (v6 >> 3 < (unint64_t)(v25 >> 3))
    {
      v26 = operator new(0x1000uLL);
      v27 = v26;
      if (v23 != v5)
      {
        *(_QWORD *)v5 = v26;
LABEL_37:
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_38;
      }
      if (v4 == v24)
      {
        if (v5 == v4)
          v61 = 1;
        else
          v61 = v25 >> 2;
        if (v61 >> 61)
          goto LABEL_96;
        v62 = (char *)operator new(8 * v61);
        v43 = &v62[(2 * v61 + 6) & 0xFFFFFFFFFFFFFFF8];
        v63 = v43;
        if (v5 != v4)
        {
          v64 = 8 * v22;
          v65 = &v62[(2 * v61 + 6) & 0xFFFFFFFFFFFFFFF8];
          v66 = v4;
          v63 = &v43[8 * v22];
          do
          {
            v67 = *(_QWORD *)v66;
            v66 += 8;
            *(_QWORD *)v65 = v67;
            v65 += 8;
            v64 -= 8;
          }
          while (v64);
        }
        *(_QWORD *)a1 = v62;
        *(_QWORD *)(a1 + 8) = v43;
        *(_QWORD *)(a1 + 16) = v63;
        *(_QWORD *)(a1 + 24) = &v62[8 * v61];
        if (v4)
        {
          operator delete(v4);
          v43 = *(char **)(a1 + 8);
        }
      }
      else
      {
        v43 = v4;
      }
      *((_QWORD *)v43 - 1) = v27;
      v68 = *(char **)(a1 + 8);
      v69 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v68 - 8;
      v70 = *((_QWORD *)v68 - 1);
      *(_QWORD *)(a1 + 8) = v68;
      if (v69 != *(char **)(a1 + 24))
      {
LABEL_95:
        *(_QWORD *)v69 = v70;
        goto LABEL_37;
      }
      v71 = *(char **)a1;
      if ((unint64_t)v68 > *(_QWORD *)a1)
      {
        v72 = (uint64_t)&v68[-*(_QWORD *)a1] >> 3;
        if (v72 >= -1)
          v73 = v72 + 1;
        else
          v73 = v72 + 2;
        v74 = -(v73 >> 1);
        v75 = v73 >> 1;
        v76 = &v68[-8 * v75];
        v77 = v69 - v68;
        if (v77)
        {
          memmove(&v68[-8 * v75], v68, v77);
          v68 = *(char **)(a1 + 8);
        }
        v69 = &v76[v77];
        *(_QWORD *)(a1 + 8) = &v68[8 * v74];
        *(_QWORD *)(a1 + 16) = v69;
        goto LABEL_95;
      }
      if (v69 == v71)
        v78 = 1;
      else
        v78 = (v69 - v71) >> 2;
      if (!(v78 >> 61))
      {
        v79 = (char *)operator new(8 * v78);
        v80 = &v79[8 * (v78 >> 2)];
        v81 = v69 - v68;
        v37 = v69 == v68;
        v69 = v80;
        if (!v37)
        {
          v69 = &v80[v81 & 0xFFFFFFFFFFFFFFF8];
          v82 = 8 * (v81 >> 3);
          v83 = &v79[8 * (v78 >> 2)];
          do
          {
            v84 = *(_QWORD *)v68;
            v68 += 8;
            *(_QWORD *)v83 = v84;
            v83 += 8;
            v82 -= 8;
          }
          while (v82);
        }
        *(_QWORD *)a1 = v79;
        *(_QWORD *)(a1 + 8) = v80;
        *(_QWORD *)(a1 + 16) = v69;
        *(_QWORD *)(a1 + 24) = &v79[8 * v78];
        if (v71)
        {
          operator delete(v71);
          v69 = *(char **)(a1 + 16);
        }
        goto LABEL_95;
      }
LABEL_96:
      sub_1C4764EE4();
    }
    if (v23 == v24)
      v28 = 1;
    else
      v28 = v25 >> 2;
    if (v28 >> 61)
      goto LABEL_96;
    v29 = (char *)operator new(8 * v28);
    v30 = &v29[8 * v22];
    v31 = &v29[8 * v28];
    v32 = operator new(0x1000uLL);
    if (v22 == v28)
    {
      if (v6 < 1)
      {
        if (v5 == v4)
          v44 = 1;
        else
          v44 = v6 >> 2;
        if (v44 >> 61)
          goto LABEL_96;
        v45 = v32;
        v30 = (char *)operator new(8 * v44);
        v31 = &v30[8 * v44];
        operator delete(v29);
        v4 = *(char **)(a1 + 8);
        v5 = *(char **)(a1 + 16);
        v29 = v30;
        v32 = v45;
      }
      else
      {
        v33 = v22 + 2;
        if (v22 >= -1)
          v33 = v22 + 1;
        v30 -= 8 * (v33 >> 1);
      }
    }
    *(_QWORD *)v30 = v32;
    v46 = v30 + 8;
    if (v5 != v4)
    {
      while (1)
      {
        if (v30 == v29)
        {
          if (v46 >= v31)
          {
            if (v31 == v30)
              v51 = 1;
            else
              v51 = (v31 - v30) >> 2;
            if (v51 >> 61)
              goto LABEL_96;
            v52 = (char *)operator new(8 * v51);
            v29 = v52;
            v47 = &v52[(2 * v51 + 6) & 0xFFFFFFFFFFFFFFF8];
            v48 = v47;
            v53 = v46 - v30;
            if (v46 != v30)
            {
              v48 = &v47[v53 & 0xFFFFFFFFFFFFFFF8];
              v54 = 8 * (v53 >> 3);
              v55 = &v52[(2 * v51 + 6) & 0xFFFFFFFFFFFFFFF8];
              v56 = v30;
              do
              {
                v57 = *(_QWORD *)v56;
                v56 += 8;
                *(_QWORD *)v55 = v57;
                v55 += 8;
                v54 -= 8;
              }
              while (v54);
            }
            v31 = &v52[8 * v51];
            operator delete(v30);
          }
          else
          {
            v49 = (v31 - v46) >> 3;
            if (v49 >= -1)
              v50 = v49 + 1;
            else
              v50 = v49 + 2;
            v48 = &v46[8 * (v50 >> 1)];
            v47 = &v30[8 * (v50 >> 1)];
            if (v46 == v30)
            {
              v29 = v46;
            }
            else
            {
              memmove(&v30[8 * (v50 >> 1)], v30, v46 - v30);
              v29 = v30;
            }
          }
        }
        else
        {
          v47 = v30;
          v48 = v46;
        }
        v58 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v47 - 1) = v58;
        v59 = v47 - 8;
        v46 = v48;
        v30 = v59;
        if (v5 == *(char **)(a1 + 8))
          goto LABEL_67;
      }
    }
    v59 = v30;
    v48 = v30 + 8;
LABEL_67:
    v60 = *(char **)a1;
    *(_QWORD *)a1 = v29;
    *(_QWORD *)(a1 + 8) = v59;
    *(_QWORD *)(a1 + 16) = v48;
    *(_QWORD *)(a1 + 24) = v31;
    if (v60)
      operator delete(v60);
  }
LABEL_38:
  v42 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                        + (((unint64_t)(*(_QWORD *)(a1 + 32) + v42) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(_QWORD *)(a1 + 32) + v42) & 0x1FF)) = *a2;
  *(_QWORD *)(a1 + 40) = v42 + 1;
}

BOOL sub_1C5AFA1EC(llvm::ConstrainedFPIntrinsic *this)
{
  unsigned int v1;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  __int32 v18;

  v1 = *((unsigned __int8 *)this + 16);
  if (this && *((_BYTE *)this + 16) == 84)
  {
    v3 = *((_QWORD *)this - 4);
    if (v3 && !*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *((_QWORD *)this + 9))
    {
      v4 = *(_DWORD *)(v3 + 36) - 83;
      v5 = v4 > 0x23;
      v6 = (1 << v4) & 0x90000364FLL;
      if (!v5 && v6 != 0)
        return llvm::ConstrainedFPIntrinsic::isDefaultFPEnvironment(this);
    }
    v8 = *((_QWORD *)this + 8);
    if ((v8 && (*(_BYTE *)(v8 + 17) & 0x10) != 0
       || ((v18 = 7, !sub_1C53E4BBC((uint64_t)this, &v18, 1uLL))
        || (v17 = *((_QWORD *)this - 4)) != 0
        && !*(_BYTE *)(v17 + 16)
        && *(_QWORD *)(v17 + 24) == *((_QWORD *)this + 9)
        && *(_DWORD *)(v17 + 36) == 7)
       && llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      && *(_BYTE *)(*(_QWORD *)this + 8) != 7
      && ((v15 = *((_QWORD *)this + 8)) == 0 || (*(_BYTE *)(v15 + 12) & 0x40) == 0))
    {
      v9 = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 6) ^ 1;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v10 = *(_QWORD *)&vdup_n_s16(v1) & 0xFF00FF00FF00FFLL;
    v11 = (v1 - 89) < 5u;
    v12 = vmaxv_u16((uint16x4_t)vceq_s16((int16x4_t)v10, (int16x4_t)0x5F0055003E0028)) | (*((unsigned __int8 *)this + 16)
                                                                                          - 66 < 0xD);
    v14 = *((unsigned __int8 *)this + 16) - 41 < 0x12
       || *((unsigned __int8 *)this + 16) - 81 < 2;
    v9 = v12 | (v14 || v11);
  }
  return v9 & 1;
}

void sub_1C5AFA388(uint64_t a1, uint64_t a2)
{
  int32x2_t **v2;
  __int32 v3;
  int32x2_t v4;
  __int32 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  llvm::MemoryAccess *v10;

  if (*(_QWORD *)(a1 + 80))
  {
    v2 = *(int32x2_t ***)(a1 + 88);
    v3 = (*v2)[5].i32[0];
    if (v3)
    {
      v4 = (*v2)[3];
      v5 = v3 - 1;
      v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v6);
      if (v7 == a2)
      {
LABEL_7:
        v10 = *(llvm::MemoryAccess **)(*(_QWORD *)&v4 + 16 * v6 + 8);
        if (v10)
          llvm::MemorySSAUpdater::removeMemoryAccess(v2, v10, (llvm::Value *)1);
      }
      else
      {
        v8 = 1;
        while (v7 != -4096)
        {
          v9 = v6 + v8++;
          v6 = v9 & v5;
          v7 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v6);
          if (v7 == a2)
            goto LABEL_7;
        }
      }
    }
  }
}

const llvm::Instruction *sub_1C5AFA404(uint64_t a1, llvm::Instruction **a2, _QWORD *a3)
{
  uint64_t v6;
  const llvm::Instruction **v7;
  uint64_t v8;
  const llvm::Instruction *v9;
  const llvm::Instruction *result;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = sub_1C5AFACF4(a1, a2);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *v7;
  result = *(const llvm::Instruction **)(a1 + 32);
  if (result)
    *(_QWORD *)(a1 + 32) = *(_QWORD *)result;
  else
    result = (const llvm::Instruction *)sub_1C484358C(a1 + 40, 32, 3);
  *((_QWORD *)result + 2) = *a2;
  *((_QWORD *)result + 3) = *a3;
  *(_QWORD *)result = v8;
  *((_QWORD *)result + 1) = v9;
  *v7 = result;
  *(_QWORD *)(v6 + 16) = result;
  return result;
}

int *sub_1C5AFA494(int *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  char v12;

  *((_QWORD *)a1 + 1) = 0;
  *a1 = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 24) = 0;
  *((_QWORD *)a1 + 4) = a2;
  if (*(_BYTE *)(a2 + 16) == 84)
  {
    v5 = *(_QWORD *)(a2 - 32);
    if (v5)
    {
      if (!*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v5 + 33) & 0x20) != 0)
      {
        *a1 = *(_DWORD *)(v5 + 36);
        if (((*(uint64_t (**)(_QWORD, uint64_t, int *))(*(_QWORD *)*a3 + 992))(*a3, a2, a1 + 2) & 1) == 0)
        {
          v6 = *a1;
          if (((*a1 - 185) & 0xFFFFFFFD) == 0)
          {
            if (v6 == 187)
            {
              v10 = *(_DWORD *)(a2 + 20);
              if ((v10 & 0x40000000) != 0)
                v11 = *(_QWORD *)(a2 - 8);
              else
                v11 = a2 - 32 * (v10 & 0x7FFFFFF);
              v12 = 0;
              v9 = (_QWORD *)(v11 + 32);
              v8 = 1;
              goto LABEL_18;
            }
            if (v6 == 185)
            {
              v7 = *(_DWORD *)(a2 + 20);
              v8 = 0;
              if ((v7 & 0x40000000) != 0)
                v9 = *(_QWORD **)(a2 - 8);
              else
                v9 = (_QWORD *)(a2 - 32 * (v7 & 0x7FFFFFF));
              v12 = 1;
LABEL_18:
              *((_QWORD *)a1 + 1) = *v9;
              *((_WORD *)a1 + 10) = 185;
              *((_BYTE *)a1 + 22) = v12;
              *((_BYTE *)a1 + 23) = v8;
              *((_BYTE *)a1 + 24) = 0;
            }
          }
        }
      }
    }
  }
  return a1;
}

BOOL sub_1C5AFA5B0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL4 v5;

  if (*(_DWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 16) > 1u)
      return 0;
    return *(_BYTE *)(a1 + 24) == 0;
  }
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2 && v3 == 60 || v2 && v3 == 61)
    return (*(_WORD *)(v2 + 18) & 0x301) == 0;
  if (v3 == 60 || v3 == 61)
    v5 = (*(_WORD *)(v2 + 18) & 0x380) != 0;
  else
    v5 = (v3 - 63) <= 2;
  return !v5;
}

uint64_t sub_1C5AFA644(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (a3)
  {
    LODWORD(v4) = ((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1);
    v5 = (uint64_t *)(a2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a4)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (a3 - 1);
      v6 = *(_QWORD *)(a2 + 16 * v4);
      if (v6 == a4)
      {
        v5 = (uint64_t *)(a2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(a2 + 16 * a3);
LABEL_8:
  if (v5 == (uint64_t *)(a2 + 16 * a3))
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 12) = -1;
  }
  else
  {
    v9 = v5[1];
    *(_OWORD *)result = *(_OWORD *)(v9 + 24);
    *(_QWORD *)(result + 16) = *(_QWORD *)(v9 + 40);
  }
  return result;
}

uint64_t sub_1C5AFA6D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t ***v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t ****v28;
  uint64_t ***v29;
  uint64_t ****v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t ****v41;
  uint64_t ***v42;
  _OWORD v43[3];
  _OWORD v44[3];
  char v45;
  uint64_t v46;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v7 = *(unsigned __int16 *)(a3 + 20);
  if (!*(_DWORD *)a3)
    v7 = -1;
  if (*(_DWORD *)(a2 + 12) != v7)
    return 0;
  if (*(_DWORD *)a3)
  {
    if (*(_BYTE *)(a3 + 24)
      || !sub_1C5AFA5B0(a3)
      || *(_BYTE *)(a3 + 22) && !*(_BYTE *)(a2 + 16) && *(_DWORD *)(a3 + 16))
    {
      return 0;
    }
    v10 = (uint64_t *)(a3 + 32);
    if (*(_BYTE *)(a3 + 22))
      v11 = v4;
    else
      v11 = *(_QWORD *)(a3 + 32);
    if (*(_BYTE *)(a3 + 22))
      v12 = *(_QWORD *)(a3 + 32);
    else
      v12 = v4;
    v13 = *(unsigned __int8 *)(a3 + 23);
    if (!*(_BYTE *)(a3 + 23))
    {
      v14 = 0;
      goto LABEL_39;
    }
LABEL_35:
    v14 = sub_1C5AFC4AC(a1, v11, *(_QWORD *)v12);
    if (*(_DWORD *)a3)
      v13 = *(_BYTE *)(a3 + 23) != 0;
    else
      v13 = *(unsigned __int8 *)(*v10 + 16) == 61;
    goto LABEL_39;
  }
  v10 = (uint64_t *)(a3 + 32);
  v12 = *(_QWORD *)(a3 + 32);
  v15 = *(unsigned __int8 *)(v12 + 16);
  if (v12 && v15 == 60 || (v14 = 0, v12) && v15 == 61)
  {
    v16 = *(_WORD *)(v12 + 18);
    if ((v16 & 1) != 0 || !sub_1C5AFA5B0(a3))
      return 0;
    if (v15 != 60 || *(_BYTE *)(a2 + 16))
    {
      if (v15 == 60)
        v11 = v4;
      else
        v11 = v12;
      if (v15 != 60)
        v12 = v4;
      if (v15 == 61)
        goto LABEL_35;
      v14 = 0;
      v13 = 0;
    }
    else
    {
      v14 = 0;
      if ((v16 & 0x380) != 0)
        return v14;
      v13 = 0;
      v11 = v4;
    }
LABEL_39:
    v17 = *(_QWORD *)a2;
    if (v13 && v17 != v14)
      return 0;
    v18 = sub_1C5AFC544(v11);
    v19 = sub_1C5AFC544(v12);
    if (v18 != v19)
      return 0;
    v20 = v18 & v19;
    v21 = (uint64_t ***)*v10;
    if (v20 == 1 && !sub_1C5AFC594(v17, *v10))
      return 0;
    v22 = *(_DWORD *)(a2 + 8);
    if (!v21 || *((_BYTE *)v21 + 16) != 60 || (*((_BYTE *)v21 + 23) & 0x20) == 0)
      goto LABEL_61;
    v23 = ***v21;
    *(_QWORD *)&v44[0] = v21;
    v24 = *(_DWORD *)(v23 + 2496);
    if (v24)
    {
      v25 = *(_QWORD *)(v23 + 2480);
      v26 = v24 - 1;
      v27 = v26 & ((v21 >> 4) ^ (v21 >> 9));
      v28 = (uint64_t ****)(v25 + 40 * v27);
      v29 = *v28;
      if (*v28 == v21)
      {
LABEL_57:
        v34 = *((unsigned int *)v28 + 4);
        if ((_DWORD)v34)
        {
          v35 = v28[1] + 1;
          v36 = 16 * v34;
          while (*((_DWORD *)v35 - 2) != 6)
          {
            v35 += 2;
            v36 -= 16;
            if (!v36)
              goto LABEL_61;
          }
          if (*v35)
            goto LABEL_69;
        }
LABEL_61:
        llvm::MemoryLocation::getOrNone(v21, (uint64_t)v44);
        if (v45)
        {
          v43[0] = v44[0];
          v43[1] = v44[1];
          v43[2] = v44[2];
          if ((sub_1C5AFC1B0(*(_QWORD *)(a1 + 368), *(_DWORD *)(a1 + 384), (uint64_t)v43, &v46) & 1) != 0)
          {
            v46 = 0;
            if (sub_1C5AFC1B0(*(_QWORD *)(a1 + 368), *(_DWORD *)(a1 + 384), (uint64_t)v43, &v46))
            {
              v37 = v46;
              v38 = *(_QWORD *)(a1 + 368);
              v39 = *(_DWORD *)(a1 + 384);
            }
            else
            {
              v38 = *(_QWORD *)(a1 + 368);
              v39 = *(_DWORD *)(a1 + 384);
              v37 = v38 + 56 * v39;
            }
            if (v37 == v38 + 56 * v39 || *(_DWORD *)(*(_QWORD *)(v37 + 48) + 64) <= v22)
              goto LABEL_69;
          }
        }
        if (sub_1C5AFAB2C(a1, *(_DWORD *)(a2 + 8), a4, *(_QWORD *)a2, *v10))
        {
LABEL_69:
          if (!v14)
            return sub_1C5AFC4AC(a1, v11, *(_QWORD *)v12);
          return v14;
        }
        return 0;
      }
      v30 = 0;
      v31 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == (uint64_t ***)-8192;
        if (v32)
          v30 = v28;
        v33 = v27 + v31++;
        v27 = v33 & v26;
        v28 = (uint64_t ****)(v25 + 40 * v27);
        v29 = *v28;
        if (*v28 == v21)
          goto LABEL_57;
      }
      if (v30)
        v41 = v30;
      else
        v41 = v28;
    }
    else
    {
      v41 = 0;
    }
    v28 = (uint64_t ****)sub_1C541AB24(v23 + 2480, (uint64_t)v44, (uint64_t *)v44, v41);
    v42 = *(uint64_t ****)&v44[0];
    v28[3] = 0;
    v28[4] = 0;
    *v28 = v42;
    v28[1] = (uint64_t ***)(v28 + 3);
    v28[2] = (uint64_t ***)0x100000000;
    goto LABEL_57;
  }
  return v14;
}

__n128 sub_1C5AFAA94(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 result;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = sub_1C5717998(a1, a2);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *v7;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v10;
  else
    v10 = sub_1C484358C(a1 + 40, 48, 3);
  *(_QWORD *)(v10 + 16) = *a2;
  result = *a3;
  *(_QWORD *)(v10 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(v10 + 24) = result;
  *(_QWORD *)v10 = v8;
  *(_QWORD *)(v10 + 8) = v9;
  *v7 = v10;
  *(_QWORD *)(v6 + 16) = v10;
  return result;
}

uint64_t sub_1C5AFAB2C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *WalkerImpl;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  if (a2 == a3)
    return 1;
  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v7 = *(_DWORD *)(result + 40);
    if (v7)
    {
      v9 = *(_QWORD *)(result + 24);
      v10 = v7 - 1;
      LODWORD(v11) = v10 & ((a4 >> 4) ^ (a4 >> 9));
      v12 = (uint64_t *)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 != a4)
      {
        v14 = 1;
        while (v13 != -4096)
        {
          v15 = v11 + v14++;
          v11 = v15 & v10;
          v13 = *(_QWORD *)(v9 + 16 * v11);
          if (v13 == a4)
          {
            v16 = *(_QWORD *)(v9 + 16 * v11 + 8);
            if (!v16)
              return 1;
            goto LABEL_13;
          }
        }
        return 1;
      }
      v16 = v12[1];
      if (v16)
      {
LABEL_13:
        v17 = (a5 >> 4) ^ (a5 >> 9);
        v18 = v10 & v17;
        v19 = *(_QWORD *)(v9 + 16 * v18);
        if (v19 != a5)
        {
          v20 = 1;
          while (v19 != -4096)
          {
            v21 = v18 + v20++;
            v18 = v21 & v10;
            v19 = *(_QWORD *)(v9 + 16 * v18);
            if (v19 == a5)
              goto LABEL_17;
          }
          return 1;
        }
LABEL_17:
        v22 = *(_QWORD *)(v9 + 16 * v18 + 8);
        if (v22)
        {
          if (*(_DWORD *)(a1 + 548) >= dword_1ED81C710)
          {
            if (*(_BYTE *)(v22 + 16) == 25)
              v33 = v22;
            else
              v33 = 0;
            v34 = (uint64_t *)(v22 - 64);
            if (v33)
              v34 = (uint64_t *)(v33 - 32);
            v35 = *v34;
            return llvm::MemorySSA::dominates(result, v35, v16);
          }
          WalkerImpl = llvm::MemorySSA::getWalkerImpl((llvm::MemorySSA *)result);
          v24 = WalkerImpl[1];
          v25 = *(_DWORD *)(v24 + 40);
          if (v25)
          {
            v26 = *(_QWORD *)(v24 + 24);
            v27 = v25 - 1;
            v28 = (v25 - 1) & v17;
            v29 = *(_QWORD *)(v26 + 16 * v28);
            if (v29 == a5)
            {
LABEL_24:
              v32 = *(_QWORD *)(v26 + 16 * v28 + 8);
LABEL_32:
              v35 = (*(uint64_t (**)(_QWORD *, uint64_t))(*WalkerImpl + 16))(WalkerImpl, v32);
              ++*(_DWORD *)(a1 + 548);
              result = *(_QWORD *)(a1 + 80);
              return llvm::MemorySSA::dominates(result, v35, v16);
            }
            v30 = 1;
            while (v29 != -4096)
            {
              v31 = v28 + v30++;
              v28 = v31 & v27;
              v29 = *(_QWORD *)(v26 + 16 * v28);
              if (v29 == a5)
                goto LABEL_24;
            }
          }
          v32 = 0;
          goto LABEL_32;
        }
      }
    }
    return 1;
  }
  return result;
}

const llvm::Instruction **sub_1C5AFACF4(uint64_t a1, llvm::Instruction **a2)
{
  char v4;
  const llvm::Instruction **v5;
  int v6;
  unsigned int v7;
  const llvm::Instruction **v9;

  v9 = 0;
  v4 = sub_1C5AFADCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
  v5 = v9;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C5AFC07C(a1, v7);
    v9 = 0;
    sub_1C5AFADCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
    v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v5 != (const llvm::Instruction *)-4096)
    --*(_DWORD *)(a1 + 12);
  *v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

uint64_t sub_1C5AFADCC(uint64_t a1, int a2, llvm::Instruction **a3, const llvm::Instruction ***a4)
{
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  const llvm::Instruction **v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  int isCommutative;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  unsigned int v40;
  unsigned __int8 v41;
  const llvm::Instruction **v42;
  int v43;
  int i;
  unsigned int v45;
  llvm::Instruction *v46;
  const llvm::Instruction *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  const llvm::Instruction *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  unsigned __int8 v79;
  unsigned int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned __int8 v87;
  int v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int8 v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int8 v106;
  _BOOL4 v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t BasePtr;
  uint64_t DerivedPtr;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  unsigned __int8 v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const llvm::Instruction *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD __src[2];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v17 = 0;
    result = 0;
    goto LABEL_132;
  }
  v8 = (uint64_t)*a3;
  v9 = *((unsigned __int8 *)*a3 + 16);
  if (*a3)
    v10 = (v9 - 59) >= 0xFFFFFFEE;
  else
    v10 = 0;
  if (v10)
  {
    v19 = *(_QWORD *)(v8 - 64);
    v20 = *(_QWORD *)(v8 - 32);
    isCommutative = llvm::Instruction::isCommutative(*a3);
    v22 = v19 > v20;
    if ((isCommutative & v22) != 0)
      v23 = v19;
    else
      v23 = v20;
    if ((isCommutative & v22) != 0)
      v24 = v20;
    else
      v24 = v19;
    v25 = v9 - 28;
    memset(__src, 0, 20);
    v26 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v120 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v120 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v120;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v27 = qword_1ED7EAC80;
    goto LABEL_25;
  }
  if (v8)
    v11 = (v9 - 83) >= 0xFFFFFFFE;
  else
    v11 = 0;
  if (v11)
  {
    v35 = *(_QWORD *)(v8 - 64);
    v36 = *(_QWORD *)(v8 - 32);
    v37 = *(_WORD *)(v8 + 18) & 0x3F;
    if (v36 >= v35 && (v35 >= v36 ? (v38 = dword_1C8668A88[v37] >= v37) : (v38 = 1), v38))
    {
      v39 = v36;
      v36 = v35;
    }
    else
    {
      LODWORD(v37) = dword_1C8668A88[v37];
      v39 = v35;
    }
    v40 = v9 - 28;
    v149 = 0;
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v144 = 0u;
    memset(__src, 0, sizeof(__src));
    v41 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v121 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v121 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v121;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v150 = qword_1ED7EAC80;
    *(_QWORD *)&__src[0] = __PAIR64__(v37, v40);
    v15 = (char *)&__src[1] + 8;
    *((_QWORD *)&__src[0] + 1) = v36;
    *(_QWORD *)&__src[1] = v39;
    goto LABEL_39;
  }
  HIDWORD(v140) = 0;
  v138 = 0;
  v139 = 0;
  v137 = 0;
  if (!sub_1C5AFBF30(v8, &v139, &v138, &v137, (_DWORD *)&v140 + 1))
  {
    v73 = *(unsigned __int8 *)(v8 + 16);
    if (v8 && (v73 - 79) >= 0xFFFFFFF3)
    {
      v74 = v73 - 28;
      v75 = *(_QWORD *)v8;
      v76 = *(_QWORD *)(v8 - 32);
      memset(__src, 0, 20);
      v77 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v123 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v123 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v123;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v27 = qword_1ED7EAC80;
      LODWORD(__src[0]) = v74;
LABEL_137:
      *(_QWORD *)((char *)__src + 4) = v75;
      *(_QWORD *)((char *)__src + 12) = v76;
      v28 = *((_QWORD *)&__src[0] + 1);
      v29 = 0xB492B66FBE98F273 * *(_QWORD *)&__src[0];
      v30 = 0x9AE16A3B2F90404FLL * v76;
      v31 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)&__src[0] - *((_QWORD *)&__src[0] + 1), 43)
          + __ROR8__(v27 ^ (0x9AE16A3B2F90404FLL * v76), 30)
          - 0x3C5A37A36834CED9 * v75;
      goto LABEL_26;
    }
    if (v8 && v73 == 95)
    {
      v78 = *(_QWORD *)(v8 - 32);
      v149 = 0;
      v147 = 0u;
      v148 = 0u;
      v145 = 0u;
      v146 = 0u;
      v144 = 0u;
      memset(__src, 0, sizeof(__src));
      v79 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v125 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v125 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v125;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v150 = qword_1ED7EAC80;
      LODWORD(__src[0]) = 67;
      v15 = (char *)((unint64_t)__src | 0xC);
      *(_QWORD *)((char *)__src + 4) = v78;
      goto LABEL_39;
    }
    if (v8 && v73 == 92)
    {
      v75 = *(_QWORD *)(v8 - 32);
      v76 = sub_1C4F5AB38(*(_QWORD **)(v8 + 64), *(_QWORD *)(v8 + 64) + 4 * *(unsigned int *)(v8 + 72));
      memset(__src, 0, 20);
      v90 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v126 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v126 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v126;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v27 = qword_1ED7EAC80;
      LODWORD(__src[0]) = 64;
      goto LABEL_137;
    }
    if (v8 && v73 == 93)
    {
      v91 = *(_QWORD *)(v8 - 64);
      v92 = *(_QWORD *)(v8 - 32);
      v93 = sub_1C4F5AB38(*(_QWORD **)(v8 + 64), *(_QWORD *)(v8 + 64) + 4 * *(unsigned int *)(v8 + 72));
      v149 = 0;
      v147 = 0u;
      v148 = 0u;
      v145 = 0u;
      v146 = 0u;
      v144 = 0u;
      memset(__src, 0, sizeof(__src));
      v94 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v128 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v128 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v128;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v150 = qword_1ED7EAC80;
      LODWORD(__src[0]) = 65;
      *(_QWORD *)((char *)__src + 4) = v91;
      v141 = 0;
      v95 = sub_1C50FDB34(__src, &v141, (_QWORD *)((unint64_t)__src | 0xC), (unint64_t)&v146, v92);
      v142 = v141;
      v15 = (char *)sub_1C4E37644(__src, &v142, v95, (unint64_t)&v146, v93);
      v16 = v142;
      goto LABEL_40;
    }
    if (v73 != 84)
      goto LABEL_186;
    v96 = *(_QWORD *)(v8 - 32);
    if (!v96
      || *(_BYTE *)(v96 + 16)
      || *(_QWORD *)(v96 + 24) != *(_QWORD *)(v8 + 72)
      || (*(_BYTE *)(v96 + 33) & 0x20) == 0
      || !sub_1C53E178C(v8))
    {
      goto LABEL_186;
    }
    v97 = *(unsigned __int8 *)(v8 + 16);
    if (v97 == 84)
      v98 = 0;
    else
      v98 = v97 == 39 ? (*(_DWORD *)(v8 + 80) + 1) : 2;
    v99 = *(_DWORD *)(v8 + 20);
    if (v99 < 0 && (v132 = v8 - 32 * (v99 & 0x7FFFFFF), v133 = *(_QWORD *)(v132 - 8), (v133 & 0xFFFFFFFF0) != 0))
    {
      v101 = -(uint64_t)(v99 & 0x7FFFFFF);
      v100 = *(_DWORD *)(v132 - 12) - *(_DWORD *)(v132 - v133);
    }
    else
    {
      v100 = 0;
      v101 = -(uint64_t)(v99 & 0x7FFFFFF);
    }
    v102 = v8 - 32 * v98 + 32 * -v100;
    v103 = (unint64_t *)(v8 + 32 * v101);
    if (((v102 - (_QWORD)v103 - 32) & 0x1FFFFFFFE0) != 0x40)
    {
LABEL_186:
      v107 = sub_1C4E9AE24(v8);
      v108 = *(unsigned __int8 *)(v8 + 16) - 28;
      v109 = *(_DWORD *)(v8 + 20);
      if (!v107)
      {
        if ((v109 & 0x40000000) != 0)
        {
          v115 = *(uint64_t **)(v8 - 8);
          v114 = v109 & 0x7FFFFFF;
        }
        else
        {
          v114 = v109 & 0x7FFFFFF;
          v115 = (uint64_t *)(v8 - 32 * v114);
        }
        v116 = sub_1C564700C(v115, &v115[4 * v114]);
        DWORD2(__src[0]) = 0;
        *(_QWORD *)&__src[0] = 0;
        v117 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v130 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v130 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v130;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        LODWORD(__src[0]) = v108;
        *(_QWORD *)((char *)__src + 4) = v116;
        v118 = 0x9DDFEA08EB382D69 * (*(_QWORD *)&__src[0] ^ qword_1ED7EAC80 ^ __ROR8__(v116 + 12, 12));
        v119 = __ROR8__(v116 + 12, 12) ^ (v118 >> 47);
        v34 = (0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v119 ^ v118)) ^ ((0x9DDFEA08EB382D69 * (v119 ^ v118)) >> 47))) ^ v116;
        goto LABEL_41;
      }
      v110 = *(_QWORD *)(v8 - 32 * (v109 & 0x7FFFFFF));
      BasePtr = llvm::GCRelocateInst::getBasePtr((llvm::GCRelocateInst *)v8);
      DerivedPtr = llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)v8);
      memset(__src, 0, 20);
      v113 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v129 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v129 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v129;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      LODWORD(__src[0]) = v108;
      *(_QWORD *)((char *)__src + 4) = v110;
      *(_QWORD *)((char *)__src + 12) = BasePtr;
      v31 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)&__src[0] - *((_QWORD *)&__src[0] + 1), 43)
          + __ROR8__(qword_1ED7EAC80 ^ (0x9AE16A3B2F90404FLL * DerivedPtr), 30)
          - 0x3C5A37A36834CED9 * BasePtr;
      v32 = qword_1ED7EAC80
          - 0x9AE16A3B2F90404FLL * DerivedPtr
          + 0xB492B66FBE98F273 * *(_QWORD *)&__src[0]
          + __ROR8__(*((_QWORD *)&__src[0] + 1) ^ 0xC949D7C7509E6557, 20)
          + 28;
      goto LABEL_27;
    }
    v104 = *v103;
    v105 = v103[4];
    if (v104 <= v105)
      v24 = v104;
    else
      v24 = v105;
    if (v104 <= v105)
      v23 = v105;
    else
      v23 = v104;
    v25 = v97 - 28;
    memset(__src, 0, 20);
    v106 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v131 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v131 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v131;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v27 = qword_1ED7EAC80;
LABEL_25:
    LODWORD(__src[0]) = v25;
    *(_QWORD *)((char *)__src + 4) = v24;
    *(_QWORD *)((char *)__src + 12) = v23;
    v28 = *((_QWORD *)&__src[0] + 1);
    v29 = 0xB492B66FBE98F273 * *(_QWORD *)&__src[0];
    v30 = 0x9AE16A3B2F90404FLL * v23;
    v31 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)&__src[0] - *((_QWORD *)&__src[0] + 1), 43)
        + __ROR8__(v27 ^ (0x9AE16A3B2F90404FLL * v23), 30)
        - 0x3C5A37A36834CED9 * v24;
LABEL_26:
    v32 = v27 - v30 + v29 + __ROR8__(v28 ^ 0xC949D7C7509E6557, 20) + 20;
LABEL_27:
    v33 = v31 ^ v32;
    goto LABEL_28;
  }
  if ((HIDWORD(v140) - 1) <= 3)
  {
    v12 = v137;
    if (v138 > v137)
    {
      v137 = v138;
      v138 = v12;
    }
    v13 = *(unsigned __int8 *)(v8 + 16) - 28;
    v149 = 0;
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v144 = 0u;
    memset(__src, 0, sizeof(__src));
    v14 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v122 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v122 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v122;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    *(_QWORD *)&__src[0] = __PAIR64__(HIDWORD(v140), v13);
    v150 = qword_1ED7EAC80;
    *((_QWORD *)&__src[0] + 1) = v138;
    v142 = 0;
    v15 = (char *)sub_1C50FDB34(__src, &v142, &__src[1], (unint64_t)&v146, v137);
    v16 = v142;
    goto LABEL_40;
  }
  if (v139)
  {
    v80 = *(unsigned __int8 *)(v139 + 16);
    if (v80 >= 0x1C && v80 - 83 >= 0xFFFFFFFE)
    {
      v82 = *(_QWORD *)(v139 - 64);
      if (v82)
      {
        v83 = *(_QWORD *)(v139 - 32);
        if (v83)
        {
          v84 = *(_WORD *)(v139 + 18) & 0x3F;
          if (dword_1C86689E0[v84] < v84)
          {
            LODWORD(v84) = dword_1C866893C[(*(_WORD *)(v139 + 18) & 0x3F) - 1];
            v85 = v137;
            v137 = v138;
            v138 = v85;
          }
          v86 = *(unsigned __int8 *)(v8 + 16) - 28;
          v149 = 0;
          v147 = 0u;
          v148 = 0u;
          v145 = 0u;
          v146 = 0u;
          v144 = 0u;
          memset(__src, 0, sizeof(__src));
          v87 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v127 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v127 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v127;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v150 = qword_1ED7EAC80;
          *(_QWORD *)&__src[0] = __PAIR64__(v84, v86);
          *((_QWORD *)&__src[0] + 1) = v82;
          *(_QWORD *)&__src[1] = v83;
          v15 = (char *)&v144 + 8;
          *((_QWORD *)&__src[1] + 1) = v138;
          *(_QWORD *)&v144 = v137;
LABEL_39:
          v16 = 0;
LABEL_40:
          LODWORD(v34) = sub_1C4E37BA0((char *)__src, v16, v15, (char *)&v146);
          goto LABEL_41;
        }
      }
    }
  }
  v88 = *(unsigned __int8 *)(v8 + 16) - 28;
  memset(__src, 0, 20);
  v89 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v124 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v124 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v124;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  LODWORD(__src[0]) = v88;
  *(_QWORD *)((char *)__src + 4) = v139;
  *(_QWORD *)((char *)__src + 12) = v138;
  v32 = qword_1ED7EAC80
      - 0x9AE16A3B2F90404FLL * v137
      + 0xB492B66FBE98F273 * *(_QWORD *)&__src[0]
      + __ROR8__(*((_QWORD *)&__src[0] + 1) ^ 0xC949D7C7509E6557, 20)
      + 28;
  v33 = (__ROR8__(0xB492B66FBE98F273 * *(_QWORD *)&__src[0] - *((_QWORD *)&__src[0] + 1), 43)
       + __ROR8__((0x9AE16A3B2F90404FLL * v137) ^ qword_1ED7EAC80, 30)
       - 0x3C5A37A36834CED9 * v138) ^ v32;
LABEL_28:
  v34 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v32 ^ ((0x9DDFEA08EB382D69 * v33) >> 47) ^ (0x9DDFEA08EB382D69 * v33))) ^ ((0x9DDFEA08EB382D69 * (v32 ^ ((0x9DDFEA08EB382D69 * v33) >> 47) ^ (0x9DDFEA08EB382D69 * v33))) >> 47));
LABEL_41:
  v42 = 0;
  v43 = a2 - 1;
  for (i = 1; ; ++i)
  {
    v45 = v34 & v43;
    v17 = (const llvm::Instruction **)(a1 + 16 * (v34 & v43));
    v46 = *a3;
    v47 = *v17;
    if (((unint64_t)*a3 | 0x1000) == 0xFFFFFFFFFFFFF000
      || ((unint64_t)v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      if (v46 == v47)
        goto LABEL_131;
      goto LABEL_86;
    }
    if (*((unsigned __int8 *)v46 + 16) != *((unsigned __int8 *)v47 + 16))
      goto LABEL_86;
    if ((llvm::Instruction::isIdenticalToWhenDefined(*a3, *v17) & 1) != 0)
      goto LABEL_131;
    v48 = *((unsigned __int8 *)v46 + 16);
    if ((v48 - 59) >= 0xFFFFFFEE)
    {
      if (!llvm::Instruction::isCommutative(v46) || *((_QWORD *)v46 - 8) != *((_QWORD *)v47 - 4))
        goto LABEL_86;
      v53 = *((_QWORD *)v46 - 4);
      v54 = *((_QWORD *)v47 - 8);
      goto LABEL_68;
    }
    if ((v48 - 83) >= 0xFFFFFFFE)
    {
      if (*((_QWORD *)v46 - 8) == *((_QWORD *)v47 - 4)
        && *((_QWORD *)v46 - 4) == *((_QWORD *)v47 - 8)
        && dword_1C8668A88[*((_WORD *)v46 + 9) & 0x3F] == (*((_WORD *)v47 + 9) & 0x3F))
      {
        goto LABEL_131;
      }
    }
    else
    {
      if (v48 == 84
        && (v49 = *((_QWORD *)v46 - 4)) != 0
        && !*(_BYTE *)(v49 + 16)
        && *(_QWORD *)(v49 + 24) == *((_QWORD *)v46 + 9))
      {
        if ((*(_BYTE *)(v49 + 33) & 0x20) != 0)
          v50 = (uint64_t)v46;
        else
          v50 = 0;
      }
      else
      {
        v50 = 0;
      }
      if (*((_BYTE *)v47 + 16) == 84)
      {
        v51 = *((_QWORD *)v47 - 4);
        if (v51)
        {
          if (!*(_BYTE *)(v51 + 16) && *(_QWORD *)(v51 + 24) == *((_QWORD *)v47 + 9))
          {
            v58 = (*(_BYTE *)(v51 + 33) & 0x20) != 0 ? v47 : 0;
            if (v50)
            {
              if (v58)
              {
                if (*(_DWORD *)(*(_QWORD *)(v50 - 32) + 36) == *(_DWORD *)(*((_QWORD *)v58 - 4) + 36))
                {
                  v134 = v58;
                  v136 = v50;
                  if (sub_1C53E178C(v50))
                  {
                    v59 = *(unsigned __int8 *)(v136 + 16);
                    if (v59 == 84)
                      v60 = 0;
                    else
                      v60 = v59 == 39 ? (*(_DWORD *)(v136 + 80) + 1) : 2;
                    v61 = *(_DWORD *)(v136 + 20);
                    if (v61 < 0
                      && (v71 = v136 - 32 * (v61 & 0x7FFFFFF), v72 = *(_QWORD *)(v71 - 8), (v72 & 0xFFFFFFFF0) != 0))
                    {
                      v63 = -(uint64_t)(v61 & 0x7FFFFFF);
                      v62 = *(_DWORD *)(v71 - 12) - *(_DWORD *)(v71 - v72);
                    }
                    else
                    {
                      v62 = 0;
                      v63 = -(uint64_t)(v61 & 0x7FFFFFF);
                    }
                    v64 = v136 - 32 * v60 + 32 * -v62;
                    v65 = (_QWORD *)(v136 + 32 * v63);
                    if (((v64 - (_QWORD)v65 - 32) & 0x1FFFFFFFE0) == 0x40)
                    {
                      v66 = (uint64_t *)((char *)v134 - 32 * (*((_DWORD *)v134 + 5) & 0x7FFFFFF));
                      if (*v65 != v66[4])
                        goto LABEL_86;
                      v53 = v65[4];
                      v54 = *v66;
LABEL_68:
                      if (v53 == v54)
                        goto LABEL_131;
                      goto LABEL_86;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (sub_1C4E9AE24((uint64_t)v46) && sub_1C4E9AE24((uint64_t)v47))
      {
        if (*((_QWORD *)v46 - 4 * (*((_DWORD *)v46 + 5) & 0x7FFFFFF)) == *((_QWORD *)v47
                                                                          - 4 * (*((_DWORD *)v47 + 5) & 0x7FFFFFF)))
        {
          v135 = llvm::GCRelocateInst::getBasePtr(v46);
          if (v135 == llvm::GCRelocateInst::getBasePtr(v47))
          {
            v52 = llvm::GCRelocateInst::getDerivedPtr(v46);
            if (v52 == llvm::GCRelocateInst::getDerivedPtr(v47))
              goto LABEL_131;
          }
        }
        goto LABEL_86;
      }
      v140 = 0;
      v141 = 0;
      v142 = 0;
      *(_QWORD *)&__src[0] = 0;
      v138 = 0;
      v139 = 0;
      v137 = 0;
      if (!sub_1C5AFBF30((uint64_t)v46, __src, &v141, &v138, (_DWORD *)&v140 + 1)
        || !sub_1C5AFBF30((uint64_t)v47, &v142, &v139, &v137, &v140))
      {
        goto LABEL_86;
      }
      if (HIDWORD(v140) != (_DWORD)v140)
      {
        v55 = v141;
        v56 = v137;
LABEL_84:
        if (v55 == v56 && v138 == v139)
        {
          if (*(_QWORD *)&__src[0])
          {
            v67 = *(unsigned __int8 *)(*(_QWORD *)&__src[0] + 16);
            if (v67 >= 0x1C && v67 - 83 >= 0xFFFFFFFE)
            {
              v68 = *(_QWORD *)(*(_QWORD *)&__src[0] - 64);
              if (v68)
              {
                v69 = *(_QWORD *)(*(_QWORD *)&__src[0] - 32);
                if (v69)
                {
                  if (v142)
                  {
                    v70 = *(unsigned __int8 *)(v142 + 16);
                    if (v70 >= 0x1C
                      && v70 - 83 >= 0xFFFFFFFE
                      && v68 == *(_QWORD *)(v142 - 64)
                      && v69 == *(_QWORD *)(v142 - 32)
                      && dword_1C86689E0[*(_WORD *)(*(_QWORD *)&__src[0] + 18) & 0x3F] == (*(_WORD *)(v142 + 18) & 0x3F))
                    {
                      goto LABEL_131;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_86;
      }
      if ((HIDWORD(v140) - 1) > 3)
      {
        v55 = v141;
        v56 = v137;
        if (*(_QWORD *)&__src[0] == v142 && v141 == v139 && v138 == v137)
          goto LABEL_131;
        goto LABEL_84;
      }
      if (v141 == v139 && v138 == v137 || v141 == v137 && v138 == v139)
      {
LABEL_131:
        result = 1;
        goto LABEL_132;
      }
    }
LABEL_86:
    if (*v17 == (const llvm::Instruction *)-4096)
      break;
    if (v42)
      v57 = 0;
    else
      v57 = *v17 == (const llvm::Instruction *)-8192;
    if (v57)
      v42 = (const llvm::Instruction **)(a1 + 16 * v45);
    LODWORD(v34) = i + v45;
  }
  result = 0;
  if (v42)
    v17 = v42;
LABEL_132:
  *a4 = v17;
  return result;
}

uint64_t sub_1C5AFBF30(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17[3];

  v17[0] = a2;
  v17[1] = a3;
  v17[2] = a4;
  v9 = sub_1C4FA9CBC(v17, a1);
  if ((_DWORD)v9)
  {
    v10 = *a2;
    v16 = 0;
    v17[0] = &v16;
    if ((sub_1C4D9EC28(v17, 30, v10) & 1) != 0)
    {
      *a2 = v16;
      v11 = *a3;
      *a3 = *a4;
      *a4 = v11;
    }
    else
    {
      v11 = *a4;
    }
    *a5 = 0;
    v12 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v12 + 16) == 81)
      {
        v13 = *(_QWORD *)(v12 - 64);
        if (*a3 == v13 && v11 == *(_QWORD *)(v12 - 32))
        {
          v14 = (*(_WORD *)(v12 + 18) & 0x3F) - 34;
          if (v14 < 8)
            *a5 = dword_1C8668B30[v14];
        }
        else if (v11 == v13 && *a3 == *(_QWORD *)(v12 - 32))
        {
          __asm { BR              X11 }
        }
      }
    }
  }
  return v9;
}

void sub_1C5AFC068()
{
  JUMPOUT(0x1C5AFC048);
}

void sub_1C5AFC070()
{
  JUMPOUT(0x1C5AFC048);
}

_QWORD *sub_1C5AFC07C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const llvm::Instruction **v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::Instruction **v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          sub_1C5AFADCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (llvm::Instruction **)v13, &v17);
          v14 = v17;
          *v17 = *(const llvm::Instruction **)v13;
          v14[1] = *(const llvm::Instruction **)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 16 * v15;
    do
    {
      *result = -4096;
      result += 2;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C5AFC1B0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  int32x2_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;

  if (!a2)
  {
    v4 = 0;
    result = 0;
    goto LABEL_3;
  }
  v6 = a4;
  v7.i32[0] = *(_DWORD *)a3;
  v7.i32[1] = *(_DWORD *)(a3 + 16);
  v8 = vmovn_hight_s64(v7, *(int64x2_t *)(a3 + 24));
  v9 = (int8x16_t)vshlq_u32((uint32x4_t)veorq_s8((int8x16_t)vzip1q_s32(v8, v8), (int8x16_t)vzip2q_s32(v8, v8)), (uint32x4_t)xmmword_1C85F4B40);
  *(int8x8_t *)v9.i8 = veor_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  v10 = a2 - 1;
  v11 = (v9.i32[0] ^ v9.i32[1] ^ (*(_DWORD *)(a3 + 40) >> 9) ^ (37 * *(_DWORD *)(a3 + 8)) ^ (*(_DWORD *)(a3 + 40) >> 4)) & (a2 - 1);
  v4 = (_QWORD *)(a1 + 56 * v11);
  if (sub_1C5AFC36C((_QWORD *)a3, v4))
  {
    result = 1;
    goto LABEL_6;
  }
  v13 = 0;
  v14 = 1;
  while (*v4 == -8192)
  {
    if (v4[1] == -4 && !v4[2] && !v4[3] && !v4[4])
    {
      v15 = v4[5] == 0;
      goto LABEL_14;
    }
LABEL_13:
    v15 = 0;
LABEL_14:
    if (v15 && v13 == 0)
      v13 = v4;
    v16 = v14 + 1;
    v11 = (v11 + v14) & v10;
    v4 = (_QWORD *)(a1 + 56 * v11);
    v17 = sub_1C5AFC36C((_QWORD *)a3, v4);
    result = 1;
    v14 = v16;
    a4 = v6;
    if (v17)
      goto LABEL_3;
  }
  if (*v4 != -4096 || v4[1] != -3 || v4[2] || v4[3] || v4[4] || v4[5])
    goto LABEL_13;
  result = 0;
  if (v13)
    v4 = v13;
LABEL_6:
  a4 = v6;
LABEL_3:
  *a4 = v4;
  return result;
}

BOOL sub_1C5AFC36C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

char *sub_1C5AFC3D8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6312B84(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = &result[56 * v10];
    do
    {
      *(_QWORD *)result = -4096;
      *((_QWORD *)result + 1) = -3;
      *((_OWORD *)result + 1) = 0uLL;
      *((_OWORD *)result + 2) = 0uLL;
      result += 56;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1C5AFC4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v5;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v3 == 60)
  {
    if (*(_QWORD *)a2 != a3)
      return 0;
    return a2;
  }
  if (a2 && v3 == 61)
  {
    if (**(_QWORD **)(a2 - 64) == a3)
      return *(_QWORD *)(a2 - 64);
    else
      return 0;
  }
  v5 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
  if (((v5 - 185) & 0xFFFFFFFD) == 0)
  {
    if (v5 != 185)
    {
      if (v5 == 187)
        return *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      else
        return 0;
    }
    return a2;
  }
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 1008))(**(_QWORD **)(a1 + 8));
}

BOOL sub_1C5AFC544(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && ((*(_DWORD *)(v1 + 36) - 185) & 0xFFFFFFFD) == 0;
}

uint64_t sub_1C5AFC594(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36);
  v3 = *(_DWORD *)(a1 + 20);
  if (v2 == 185)
    v4 = (uint64_t *)(a1 - 32 * (v3 & 0x7FFFFFF));
  else
    v4 = (uint64_t *)(a1 - 32 * (v3 & 0x7FFFFFF) + 32);
  v5 = *v4;
  v6 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
  v7 = *(_DWORD *)(a2 + 20);
  if (v6 == 185)
    v8 = (_QWORD *)(a2 - 32 * (v7 & 0x7FFFFFF));
  else
    v8 = (_QWORD *)(a2 - 32 * (v7 & 0x7FFFFFF) + 32);
  if (v5 != *v8)
    return 0;
  if (v2 == 185 && v6 == 185)
  {
    v11 = a1 - 32 * (v3 & 0x7FFFFFF);
    v12 = *(_QWORD *)(v11 + 64);
    v13 = a2 - 32 * (v7 & 0x7FFFFFF);
    v14 = *(_QWORD *)(v13 + 64);
    if (v12 == v14)
    {
      v19 = *(_QWORD *)(v11 + 96);
      v15 = *(_QWORD *)(v13 + 96);
      if (v19 == v15)
        return 1;
    }
    else
    {
      v15 = *(_QWORD *)(v13 + 96);
    }
    if (*(unsigned __int8 *)(v15 + 16) - 11 > 1)
      return 0;
    v18 = v12;
  }
  else
  {
    if (v2 == 187 && v6 == 185)
    {
      v16 = a2 - 32 * (v7 & 0x7FFFFFF);
      if (sub_1C5AFC740(*(_QWORD *)(v16 + 64), *(_QWORD *)(a1 - 32 * (v3 & 0x7FFFFFF) + 96)))
        return *(unsigned __int8 *)(*(_QWORD *)(v16 + 96) + 16) - 11 < 2;
      return 0;
    }
    if (v2 == 185 && v6 == 187)
    {
      v17 = *(_QWORD *)(a2 - 32 * (v7 & 0x7FFFFFF) + 96);
      v18 = *(_QWORD *)(a1 - 32 * (v3 & 0x7FFFFFF) + 64);
      v14 = v17;
    }
    else
    {
      v9 = 0;
      if (v2 != 187 || v6 != 187)
        return v9;
      v14 = *(_QWORD *)(a1 - 32 * (v3 & 0x7FFFFFF) + 96);
      v18 = *(_QWORD *)(a2 - 32 * (v7 & 0x7FFFFFF) + 96);
    }
  }
  return sub_1C5AFC740(v14, v18);
}

uint64_t sub_1C5AFC740(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  llvm::APInt *v16;
  unsigned int v17;
  int v18;
  llvm::APInt *v20;
  unsigned int v21;

  if (a1 == a2)
    return 1;
  v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 11) < 2)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 16);
  if ((v3 - 11) < 2)
    return 0;
  v4 = v2 == 10 ? a1 : 0;
  v5 = v3 == 10 ? a2 : 0;
  if (!v4 || v5 == 0)
    return 0;
  v8 = *(_DWORD *)(v4 + 20);
  v9 = v8 & 0x7FFFFFF;
  if ((v8 & 0x7FFFFFF) != 0)
  {
    v10 = (uint64_t *)(v4 - 32 * v9);
    v11 = (uint64_t *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    do
    {
      v12 = *v10;
      v13 = *v11;
      v14 = *(unsigned __int8 *)(*v10 + 16);
      if (*v10)
        v15 = v14 == 16;
      else
        v15 = 0;
      if (v15)
      {
        v16 = (llvm::APInt *)(v12 + 24);
        v17 = *(_DWORD *)(v12 + 32);
        if (v17 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v16) == v17)
            goto LABEL_44;
        }
        else if (!*(_QWORD *)v16)
        {
          goto LABEL_44;
        }
      }
      v18 = *(unsigned __int8 *)(v13 + 16);
      if (v18 == 16 && v13 != 0)
      {
        v20 = (llvm::APInt *)(v13 + 24);
        v21 = *(_DWORD *)(v13 + 32);
        if (v21 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v20) != v21)
            goto LABEL_44;
        }
        else if (*(_QWORD *)v20)
        {
          goto LABEL_44;
        }
      }
      if ((v14 - 13) > 0xFFFFFFFD || (v18 - 13) > 0xFFFFFFFD || v12 != v13)
        return 0;
LABEL_44:
      v11 += 4;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  return 1;
}

uint64_t sub_1C5AFC884(uint64_t a1, int a2, llvm::Instruction **a3, const llvm::Instruction ***a4)
{
  llvm::Instruction *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  const llvm::Instruction **v12;
  uint64_t result;
  int v14;
  unint64_t v15;
  unsigned __int8 v16;
  const llvm::Instruction **v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int i;
  unsigned __int8 *v23;
  const llvm::Instruction *v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;

  if (a2)
  {
    v8 = *a3;
    v9 = *((_DWORD *)*a3 + 5);
    if ((v9 & 0x40000000) != 0)
    {
      v11 = (uint64_t *)*((_QWORD *)v8 - 1);
      v10 = v9 & 0x7FFFFFF;
    }
    else
    {
      v10 = v9 & 0x7FFFFFF;
      v11 = (uint64_t *)((char *)v8 - 32 * v10);
    }
    v14 = *((unsigned __int8 *)*a3 + 16) - 28;
    v15 = sub_1C564700C(v11, &v11[4 * v10]);
    v16 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v16 & 1) == 0)
    {
      v27 = v15;
      v28 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v15 = v27;
      if (v28)
      {
        v29 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v29 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v29;
        __cxa_guard_release(&qword_1ED7EAC88);
        v15 = v27;
      }
    }
    v17 = 0;
    v18 = __ROR8__(v15 + 12, 12);
    v19 = 0x9DDFEA08EB382D69
        * (v18 ^ ((0x9DDFEA08EB382D69 * (__PAIR64__(v15, v14) ^ qword_1ED7EAC80 ^ v18)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (__PAIR64__(v15, v14) ^ qword_1ED7EAC80 ^ v18)));
    v20 = a2 - 1;
    v21 = (a2 - 1) & ((-348639895 * ((v19 >> 47) ^ v19)) ^ v15);
    for (i = 1; ; ++i)
    {
      v12 = (const llvm::Instruction **)(a1 + 16 * v21);
      v23 = (unsigned __int8 *)*a3;
      v24 = *v12;
      if (((unint64_t)*a3 | 0x1000) == 0xFFFFFFFFFFFFF000
        || ((unint64_t)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (v23 == (unsigned __int8 *)v24)
          goto LABEL_22;
      }
      else
      {
        if (llvm::Instruction::isIdenticalToWhenDefined(*a3, *v12)
          && (*((unsigned __int8 *)v24 + 17) ^ v23[17]) < 2)
        {
LABEL_22:
          result = 1;
          goto LABEL_23;
        }
        v24 = *v12;
      }
      if (v24 == (const llvm::Instruction *)-4096)
        break;
      if (v17)
        v25 = 0;
      else
        v25 = v24 == (const llvm::Instruction *)-8192;
      if (v25)
        v17 = (const llvm::Instruction **)(a1 + 16 * v21);
      v26 = v21 + i;
      v21 = v26 & v20;
    }
    result = 0;
    if (v17)
      v12 = v17;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_23:
  *a4 = v12;
  return result;
}

const llvm::Instruction **sub_1C5AFCABC(uint64_t a1, llvm::Instruction **a2)
{
  char v4;
  const llvm::Instruction **v5;
  int v6;
  unsigned int v7;
  const llvm::Instruction **v9;

  v9 = 0;
  v4 = sub_1C5AFC884(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
  v5 = v9;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C5AFCB94(a1, v7);
    v9 = 0;
    sub_1C5AFC884(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
    v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v5 != (const llvm::Instruction *)-4096)
    --*(_DWORD *)(a1 + 12);
  *v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

_QWORD *sub_1C5AFCB94(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const llvm::Instruction **v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::Instruction **v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          sub_1C5AFC884(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (llvm::Instruction **)v13, &v17);
          v14 = v17;
          *v17 = *(const llvm::Instruction **)v13;
          v14[1] = *(const llvm::Instruction **)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 16 * v15;
    do
    {
      *result = -4096;
      result += 2;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C5AFCCC8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 60)
    return *(_QWORD *)a1;
  if (v1 != 84
    || (v2 = *(_QWORD *)(a1 - 32)) == 0
    || *(_BYTE *)(v2 + 16)
    || *(_QWORD *)(v2 + 24) != *(_QWORD *)(a1 + 72)
    || (*(_BYTE *)(v2 + 33) & 0x20) == 0)
  {
    v3 = -2;
LABEL_8:
    a1 = *(_QWORD *)(a1 + 32 * v3);
    return *(_QWORD *)a1;
  }
  v5 = *(_DWORD *)(v2 + 36);
  if (v5 == 185)
    return *(_QWORD *)a1;
  if (v5 == 187)
  {
    v3 = -(uint64_t)(*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
    goto LABEL_8;
  }
  return 0;
}

uint64_t sub_1C5AFCD44()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AF9B7C(v0);
}

uint64_t sub_1C5AFCD6C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AF9AB4(v0);
}

void sub_1C5AFCD98(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5AFCDBC(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5AFCE98(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  char **v21;
  char *v22;
  llvm::AssumptionCacheTracker *v23;
  uint64_t AssumptionCache;
  void **v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[6];
  _QWORD v53[4];
  int v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[6];
  _QWORD v60[4];
  int v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD v66[6];
  _QWORD v67[4];
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::TargetLibraryInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v10 = sub_1C4D914E8(v9, (uint64_t)a2);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::TargetTransformInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v33 = 0;
  v34 = 0;
  LODWORD(v35) = 0;
  v36 = 0;
  v37 = 0;
  LODWORD(v38) = 0;
  v39 = 0;
  v40 = 0;
  LODWORD(v41) = 0;
  v14 = *(_QWORD *)(v13 + 56);
  if (v14)
  {
    v2 = &v36;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v14 + 48))(&v32, v14, a2);
    v3 = (_QWORD *)(v13 + 64);
    v15 = v32;
    if (!*(_BYTE *)(v13 + 72))
    {
      *(_QWORD *)(v13 + 64) = v32;
      *(_BYTE *)(v13 + 72) = 1;
      goto LABEL_11;
    }
    v32 = 0;
    v16 = *v3;
    *v3 = v15;
    if (!v16)
      goto LABEL_11;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v32;
    v32 = 0;
    if (!v17)
      goto LABEL_11;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_11:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(&v33);
  v18 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::DominatorTreeWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v21 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != llvm::AssumptionCacheTracker::ID);
  v23 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v23, a2);
  v25 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != &llvm::MemorySSAWrapperPass::ID);
  v27 = v20 + 32;
  v28 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  v29 = *((_QWORD *)a2 + 5) + 272;
  v33 = v10;
  v34 = v3;
  v35 = v27;
  v36 = AssumptionCache;
  v37 = v29;
  v38 = v10;
  v39 = v27;
  v40 = AssumptionCache;
  v41 = 0;
  v42 = 257;
  v43 = v28;
  v30 = operator new();
  *(_QWORD *)v30 = v28;
  *(_QWORD *)(v30 + 8) = v30 + 24;
  *(_QWORD *)(v30 + 16) = 0x1000000000;
  *(_QWORD *)(v30 + 408) = v30 + 440;
  *(_QWORD *)(v30 + 416) = v30 + 440;
  *(_QWORD *)(v30 + 424) = 8;
  *(_DWORD *)(v30 + 432) = 0;
  *(_QWORD *)(v30 + 504) = v30 + 520;
  *(_QWORD *)(v30 + 512) = 0x800000000;
  *(_QWORD *)(v30 + 600) = 0;
  *(_QWORD *)(v30 + 592) = 0;
  *(_QWORD *)(v30 + 584) = v30 + 592;
  v45 = 0;
  v46 = 0;
  v44 = v30;
  v47 = 0;
  v48 = 0u;
  v49 = 0u;
  v50 = v52;
  v51 = 0x400000000;
  v52[4] = v53;
  v52[5] = 0;
  v53[0] = 0;
  v53[1] = 1;
  v53[2] = 0;
  v53[3] = 0;
  v54 = 0;
  v55 = 0u;
  v56 = 0u;
  v57 = v59;
  v58 = 0x400000000;
  v59[4] = v60;
  v59[5] = 0;
  v60[0] = 0;
  v60[1] = 1;
  v60[2] = 0;
  v60[3] = 0;
  v61 = 0;
  v63 = 0u;
  v62 = 0u;
  v64 = v66;
  v65 = 0x400000000;
  v66[4] = v67;
  v66[5] = 0;
  v67[0] = 0;
  v67[1] = 1;
  v69 = 0;
  v70 = 0;
  v67[3] = 0;
  v67[2] = 0;
  v68 = 0;
  v6 = sub_1C5AF7E90((uint64_t)&v33);
  sub_1C5AF9934(&v33);
  return v6;
}

void sub_1C5AFD248(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5AFD26C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5AFD304(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  llvm::AssumptionCacheTracker *v24;
  uint64_t AssumptionCache;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[6];
  _QWORD v50[4];
  int v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[6];
  _QWORD v57[4];
  int v58;
  __int128 v59;
  __int128 v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[6];
  _QWORD v64[4];
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::TargetLibraryInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v10 = sub_1C4D914E8(v9, (uint64_t)a2);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::TargetTransformInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v30 = 0;
  v31 = 0;
  LODWORD(v32) = 0;
  v33 = 0;
  v34 = 0;
  LODWORD(v35) = 0;
  v36 = 0;
  v37 = 0;
  LODWORD(v38) = 0;
  v14 = *(_QWORD *)(v13 + 56);
  if (v14)
  {
    v2 = &v33;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v14 + 48))(&v29, v14, a2);
    v3 = (_QWORD *)(v13 + 64);
    v15 = v29;
    if (!*(_BYTE *)(v13 + 72))
    {
      *(_QWORD *)(v13 + 64) = v29;
      *(_BYTE *)(v13 + 72) = 1;
      goto LABEL_11;
    }
    v29 = 0;
    v16 = *v3;
    *v3 = v15;
    if (!v16)
      goto LABEL_11;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v29;
    v29 = 0;
    if (!v17)
      goto LABEL_11;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_11:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(&v30);
  v18 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::DominatorTreeWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v21 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != llvm::AssumptionCacheTracker::ID);
  v23 = v20 + 32;
  v24 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v24, a2);
  v26 = *((_QWORD *)a2 + 5) + 272;
  v30 = v10;
  v31 = v3;
  v32 = v23;
  v33 = AssumptionCache;
  v34 = v26;
  v35 = v10;
  v36 = v23;
  v37 = AssumptionCache;
  v38 = 0;
  v39 = 257;
  v40 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = v27 + 24;
  *(_QWORD *)(v27 + 16) = 0x1000000000;
  *(_QWORD *)(v27 + 408) = v27 + 440;
  *(_QWORD *)(v27 + 416) = v27 + 440;
  *(_QWORD *)(v27 + 424) = 8;
  *(_DWORD *)(v27 + 432) = 0;
  *(_QWORD *)(v27 + 504) = v27 + 520;
  *(_QWORD *)(v27 + 512) = 0x800000000;
  *(_QWORD *)(v27 + 600) = 0;
  *(_QWORD *)(v27 + 592) = 0;
  *(_QWORD *)(v27 + 584) = v27 + 592;
  v42 = 0;
  v43 = 0;
  v41 = v27;
  v44 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = v49;
  v48 = 0x400000000;
  v49[4] = v50;
  v49[5] = 0;
  v50[0] = 0;
  v50[1] = 1;
  v50[2] = 0;
  v50[3] = 0;
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = v56;
  v55 = 0x400000000;
  v56[4] = v57;
  v56[5] = 0;
  v57[0] = 0;
  v57[1] = 1;
  v57[2] = 0;
  v57[3] = 0;
  v58 = 0;
  v60 = 0u;
  v59 = 0u;
  v61 = v63;
  v62 = 0x400000000;
  v63[4] = v64;
  v63[5] = 0;
  v64[0] = 0;
  v64[1] = 1;
  v66 = 0;
  v67 = 0;
  v64[3] = 0;
  v64[2] = 0;
  v65 = 0;
  v6 = sub_1C5AF7E90((uint64_t)&v30);
  sub_1C5AF9934(&v30);
  return v6;
}

uint64_t sub_1C5AFD670()
{
  int v1;
  __n128 v2;
  int v3;
  int *v4;

  dword_1ED81C67C = sub_1C4D9A2C4("early-cse", 9uLL, "Controls which instructions are removed", 0x27uLL);
  v3 = 500;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Enable imprecision in EarlyCSE in pathological cases, in exchange for faster compil"
                                     "e. Caps the MemorySSA clobbering calls.";
  v2.n128_u64[1] = 122;
  sub_1C4DB1928((uint64_t)&qword_1ED81C688[1], "earlycse-mssa-optimization-cap", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81C688[1], &dword_1C475E000);
  LOBYTE(v1) = 0;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Perform extra assertion checking to verify that SimpleValue's hash function is well"
                                     "-behaved w.r.t. its isEqual predicate";
  v2.n128_u64[1] = 120;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81C750, "earlycse-debug-hash", (_BYTE **)&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81C750, &dword_1C475E000);
}

uint64_t sub_1C5AFD780(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Flatten the CFG";
  *(_QWORD *)(v3 + 8) = 15;
  *(_QWORD *)(v3 + 16) = "flattencfg";
  *(_QWORD *)(v3 + 24) = 10;
  *(_QWORD *)(v3 + 32) = &unk_1ED81C810;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5AFDCA0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::createFlattenCFGPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5AFD83C(v1);
}

uint64_t sub_1C5AFD83C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81C810;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81946A8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81C818);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AFD780;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81C818, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5AFD904(uint64_t a1, llvm::BasicBlock *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  llvm::AAResults *v7;
  llvm::BasicBlock **v8;
  uint64_t i;
  int32x2_t ****v10;
  unint64_t *v12;
  int32x2_t ****v13;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  int32x2_t ****v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int32x2_t *****v25;
  int32x2_t ****v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int32x2_t ****v32;
  unint64_t v33;
  void **v34;
  void **v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  unint64_t *v39;
  char v40;
  llvm *v41;
  uint64_t v43;
  unint64_t *v44;
  int32x2_t ****v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  void **v49[5];

  v4 = a1 + 72;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v5 = -1;
  v6 = a1 + 72;
  do
  {
    v6 = *(_QWORD *)(v6 + 8);
    ++v5;
  }
  while (v6 != v4);
  sub_1C6312E24((uint64_t *)&v46, v5);
  for (i = *(_QWORD *)(a1 + 80); i != v4; i = *(_QWORD *)(i + 8))
  {
    v10 = (int32x2_t ****)(i - 24);
    if (!i)
      v10 = 0;
    v43 = 4;
    v44 = 0;
    v45 = v10;
    if (v10 != (int32x2_t ****)-8192 && v10 != (int32x2_t ****)-4096 && v10 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v43);
    v12 = v47;
    if ((unint64_t)v47 >= v48)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * (v47 - v46);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v31 = v43;
      v32 = v45;
      if (0x5555555555555556 * ((uint64_t)(v48 - (_QWORD)v46) >> 3) > v30)
        v30 = 0x5555555555555556 * ((uint64_t)(v48 - (_QWORD)v46) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v46) >> 3) >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v30;
      v49[4] = (void **)&v48;
      if (v33)
      {
        if (v33 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v34 = (void **)operator new(24 * v33);
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[3 * v29];
      v49[0] = v34;
      v49[1] = v35;
      v49[3] = &v34[3 * v33];
      *v35 = (void *)4;
      v35[1] = 0;
      v35[2] = v32;
      if (v32 != (int32x2_t ****)-8192 && v32 != (int32x2_t ****)-4096)
      {
        if (v32)
        {
          v35[1] = *(void **)(v31 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8) = v35;
          *v35 = (void *)(v31 & 0xFFFFFFFFFFFFFFF8 | 4);
          v36 = (uint64_t *)v35[1];
          if (v36)
            *v36 = *v36 & 7 | (unint64_t)(v35 + 1);
        }
      }
      v49[2] = v35 + 3;
      sub_1C6179B20((uint64_t *)&v46, v49);
      v17 = v47;
      sub_1C6179ABC((uint64_t)v49);
    }
    else
    {
      *v47 = 4;
      v12[1] = 0;
      v13 = v45;
      v12[2] = (unint64_t)v45;
      if (v13 != (int32x2_t ****)-8192 && v13 != (int32x2_t ****)-4096 && v13 != 0)
      {
        v15 = v43 & 0xFFFFFFFFFFFFFFF8;
        v12[1] = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)v15 = v12;
        *v12 = v15 | 4;
        v16 = (unint64_t *)v12[1];
        if (v16)
          *v16 = *v16 & 7 | (unint64_t)(v12 + 1);
      }
      v17 = v12 + 3;
    }
    v47 = v17;
    if (v45 != (int32x2_t ****)-8192 && v45 != (int32x2_t ****)-4096 && v45)
    {
      v18 = v43 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8) = v44;
      if (v44)
      {
        *v44 = *v44 & 7 | v18;
      }
      else
      {
        v19 = v45;
        v20 = ***v45;
        v21 = (unint64_t)v20[303];
        if (v21 <= v18)
        {
          v22 = v20[305].u32[0];
          if (v21 + 16 * v22 > v18)
          {
            v23 = v22 - 1;
            LODWORD(v24) = v23 & ((v45 >> 4) ^ (v45 >> 9));
            v25 = (int32x2_t *****)(v21 + 16 * v24);
            v26 = *v25;
            if (v45 == *v25)
            {
LABEL_32:
              *v25 = (int32x2_t ****)-8192;
              v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
              v19 = v45;
            }
            else
            {
              v27 = 1;
              while (v26 != (int32x2_t ****)-4096)
              {
                v28 = v24 + v27++;
                v24 = v28 & v23;
                v26 = *(int32x2_t *****)(v21 + 16 * v24);
                if (v45 == v26)
                {
                  v25 = (int32x2_t *****)(v21 + 16 * v24);
                  goto LABEL_32;
                }
              }
            }
            *((_BYTE *)v19 + 17) &= ~1u;
          }
        }
      }
    }
  }
  v37 = 0;
  do
  {
    v38 = (uint64_t)v46;
    v39 = v47;
    if (v46 == v47)
      break;
    v40 = 0;
    do
    {
      v41 = *(llvm **)(v38 + 16);
      if (v41 && llvm::FlattenCFG(v41, a2, v7, v8))
        v40 = 1;
      v38 += 24;
    }
    while ((unint64_t *)v38 != v39);
    v37 = (v40 | v37) & 1;
  }
  while ((v40 & 1) != 0);
  v49[0] = (void **)&v46;
  sub_1C4D99900(v49);
  return v37 & 1;
}

uint64_t sub_1C5AFDCA0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AFD83C(v0);
}

void sub_1C5AFDCCC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5AFDCF0(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
}

uint64_t sub_1C5AFDD00(uint64_t a1, llvm *a2)
{
  void **v4;
  void *v5;
  llvm::BasicBlock *v6;
  llvm::MemorySSAUpdater *v7;
  uint64_t v8;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::AAResultsWrapperPass::ID);
  v6 = *(llvm::BasicBlock **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  *(_QWORD *)(a1 + 32) = v6;
  v8 = sub_1C5AFD904((uint64_t)a2, v6);
  if ((_DWORD)v8)
  {
    do
      llvm::removeUnreachableBlocks(a2, 0, 0, v7);
    while ((sub_1C5AFD904((uint64_t)a2, *(llvm::BasicBlock **)(a1 + 32)) & 1) != 0);
  }
  return v8;
}

uint64_t sub_1C5AFDD98(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Float to int";
  *(_QWORD *)(v2 + 8) = 12;
  *(_QWORD *)(v2 + 16) = "float2int";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1ED81C8E0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5B00150;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

BOOL llvm::Float2IntPass::findRoots(_BOOL8 this, llvm::Function *a2, const llvm::DominatorTree *a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  uint64_t v16;

  v3 = (char *)a2 + 72;
  v4 = (char *)*((_QWORD *)a2 + 10);
  if (v4 != (char *)a2 + 72)
  {
    v6 = this + 48;
    do
    {
      if (v4)
        v7 = (uint64_t)(v4 - 24);
      else
        v7 = 0;
      this = llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)a3, v7);
      if (this)
      {
        v8 = v7 + 40;
        for (i = *(_QWORD *)(v7 + 48); i != v8; i = *(_QWORD *)(i + 8))
        {
          v10 = i - 24;
          if (!i)
            v10 = 0;
          if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) != 0x12)
          {
            v11 = *(unsigned __int8 *)(v10 + 16);
            if ((v11 - 69) < 2
              || v11 == 82
              && ((v12 = *(_WORD *)(v10 + 18) & 0x3F, v13 = v12 > 0xE, v14 = (1 << v12) & 0x7E7E, !v13)
                ? (v15 = v14 == 0)
                : (v15 = 1),
                  !v15))
            {
              v16 = v10;
              this = sub_1C4E7C77C(v6, &v16);
            }
          }
        }
      }
      v4 = (char *)*((_QWORD *)v4 + 1);
    }
    while (v4 != v3);
  }
  return this;
}

void llvm::Float2IntPass::badRange(uint64_t a1@<X8>)
{
  char v3;
  unsigned int v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;

  v3 = dword_1ED81C8A0;
  v4 = dword_1ED81C8A0 + 1;
  *(_DWORD *)(a1 + 8) = dword_1ED81C8A0 + 1;
  if (v4 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a1, -1, 1);
    v7 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = v7;
    if (v7 > 0x40)
    {
      v8 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
      v6 = (void *)operator new[]();
      memcpy(v6, *(const void **)a1, v8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0xFFFFFFFFFFFFFFFFLL >> ~v3;
    if (!v4)
      v5 = 0;
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 24) = v4;
  }
  v6 = *(void **)a1;
LABEL_6:
  *(_QWORD *)(a1 + 16) = v6;
}

void llvm::Float2IntPass::unknownRange(uint64_t *a1@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  const void **v7;
  void *v8;

  v2 = dword_1ED81C8A0 + 1;
  *((_DWORD *)a1 + 2) = dword_1ED81C8A0 + 1;
  if (v2 <= 0x40)
  {
    v3 = 0;
    *a1 = 0;
    *((_DWORD *)a1 + 6) = v2;
LABEL_3:
    a1[2] = v3;
    return;
  }
  v4 = a1;
  llvm::APInt::initSlowCase((llvm::APInt *)a1, 0, 0);
  a1 = v4;
  v5 = *((unsigned int *)v4 + 2);
  *((_DWORD *)v4 + 6) = v5;
  if (v5 <= 0x40)
  {
    v3 = *v4;
    goto LABEL_3;
  }
  v6 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
  v7 = (const void **)a1;
  v8 = (void *)operator new[]();
  v7[2] = v8;
  memcpy(v8, *v7, v6);
}

void llvm::Float2IntPass::validateRange(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = dword_1ED81C8A0;
  v5 = dword_1ED81C8A0 + 1;
  if (v3 <= dword_1ED81C8A0 + 1)
  {
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = v5;
    if (v5 <= 0x40)
    {
      v6 = 0xFFFFFFFFFFFFFFFFLL >> ~v4;
      if (!v5)
        v6 = 0;
      *(_QWORD *)a2 = v6;
      *(_DWORD *)(a2 + 24) = v5;
      goto LABEL_6;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)a2, -1, 1);
    v7 = *(unsigned int *)(a2 + 8);
    *(_DWORD *)(a2 + 24) = v7;
    if (v7 <= 0x40)
    {
LABEL_6:
      *(_QWORD *)(a2 + 16) = *(_QWORD *)a2;
      return;
    }
    v8 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
    v9 = (void *)operator new[]();
    *(_QWORD *)(a2 + 16) = v9;
    memcpy(v9, *(const void **)a2, v8);
  }
}

uint64_t llvm::Float2IntPass::walkBackwards(llvm::Float2IntPass *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int16 v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  _DWORD *v26;
  llvm *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  llvm *v39;
  uint64_t **v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char v50;
  int v51;
  unsigned int v52;
  void *v53;
  char *v54;
  size_t v55;
  char *v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  llvm::Type ***v64;
  unsigned int PrimitiveSizeInBits;
  const char *v66;
  char *v67;
  int v68;
  unsigned int v69;
  void *v70;
  int v71;
  unsigned int v72;
  void *v73;
  void *v74;
  unsigned int v75;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *__src;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  void *v85;
  unsigned int v86;
  void *v87;
  unsigned int v88;
  void *v89;
  unsigned int v90;
  void *v91;
  unsigned int v92;
  void *v93;
  unsigned int v94;
  void *v95;
  unsigned int v96;
  void *v97;
  unsigned int v98;
  void *v99;
  unsigned int v100;
  void *__p[2];
  __int128 v102;
  __int128 v103;
  void *v104;
  char *v105;
  char *v106;
  __int128 v107;
  char *v108;

  v1 = (uint64_t *)*((_QWORD *)this + 15);
  v2 = *((unsigned int *)this + 32);
  *(_OWORD *)__p = 0u;
  v102 = 0u;
  v103 = 0u;
  if ((_DWORD)v2)
  {
    v4 = ((v2 + 1) & 0x1FF) != 0 ? ((unint64_t)(v2 + 1) >> 9) + 1 : (unint64_t)(v2 + 1) >> 9;
    if (v4)
    {
      v108 = (char *)&v102 + 8;
      v105 = (char *)operator new(8 * v4);
      v106 = v105;
      *(_QWORD *)&v107 = v105;
      *((_QWORD *)&v107 + 1) = &v105[8 * v4];
      do
      {
        v104 = operator new(0x1000uLL);
        sub_1C61351F0((uint64_t)&v105, &v104);
        --v4;
      }
      while (v4);
      v5 = (char *)__p[1];
      v6 = (char *)v102;
      if ((void *)v102 == __p[1])
      {
        v6 = (char *)__p[1];
      }
      else
      {
        do
        {
          v6 -= 8;
          sub_1C6135314((void **)&v105, v6);
        }
        while (v6 != __p[1]);
        v5 = (char *)v102;
      }
      v10 = v106;
      v11 = (char *)__p[0];
      v12 = *((_QWORD *)&v102 + 1);
      __p[0] = v105;
      __p[1] = v106;
      v105 = v11;
      v106 = v6;
      v13 = (char *)v107;
      v102 = v107;
      *(_QWORD *)&v107 = v5;
      *((_QWORD *)&v107 + 1) = v12;
      if (v5 != v6)
        *(_QWORD *)&v107 = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v11)
      {
        operator delete(v11);
        v14 = v103;
        v10 = (char *)__p[1];
        v15 = (char *)v102;
      }
      else
      {
        v14 = v103;
        v15 = v13;
      }
      v8 = *((_QWORD *)&v103 + 1);
      v16 = v14 + WORD4(v103);
      v9 = &v10[8 * ((unint64_t)(v14 + *((_QWORD *)&v103 + 1)) >> 9)];
      v7 = v15 == v10 ? 0 : *(_QWORD *)v9 + 8 * (v16 & 0x1FF);
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
    v17 = v2 + ((v7 - *(_QWORD *)v9) >> 3);
    if (v17 < 1)
    {
      v19 = 511 - v17;
      LOWORD(v17) = ~(511 - v17);
      v18 = &v9[-8 * (v19 >> 9)];
    }
    else
    {
      v18 = &v9[8 * ((unint64_t)v17 >> 9)];
    }
    v20 = *(_QWORD *)v18 + 8 * (v17 & 0x1FF);
    if (v7 != v20)
    {
      do
      {
        v21 = v20;
        if (v9 != v18)
          v21 = *(_QWORD *)v9 + 4096;
        if (v7 == v21)
        {
          v21 = v7;
        }
        else
        {
          v22 = (_QWORD *)v7;
          do
          {
            v23 = *v1++;
            *v22++ = v23;
          }
          while (v22 != (_QWORD *)v21);
        }
        v8 += (v21 - v7) >> 3;
        if (v9 == v18)
          break;
        v24 = *((_QWORD *)v9 + 1);
        v9 += 8;
        v7 = v24;
      }
      while (v24 != v20);
      *((_QWORD *)&v103 + 1) = v8;
    }
    if (v8)
    {
      v25 = (uint64_t **)((char *)this + 200);
      v26 = &unk_1ED81C000;
      do
      {
        v28 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v8 - 1 + v103) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v8 - 1 + v103) & 0x1FF));
        if ((void *)v102 == __p[1])
          v29 = 0;
        else
          v29 = (((_QWORD)v102 - (unint64_t)__p[1]) << 6) - 1;
        *((_QWORD *)&v103 + 1) = v8 - 1;
        if (v29 - (v8 + (_QWORD)v103) + 1 >= 0x400)
        {
          operator delete(*(void **)(v102 - 8));
          *(_QWORD *)&v102 = v102 - 8;
        }
        if (*((_QWORD *)this + 4) != sub_1C6312FD4((uint64_t)this, v28))
          goto LABEL_43;
        v30 = *(unsigned __int8 *)(v28 + 16) - 40;
        if (v30 <= 0x2A)
        {
          if (((1 << v30) & 0x40060000055) != 0)
          {
            v31 = v26[552] + 1;
            v86 = v31;
            if (v31 <= 0x40)
            {
              v32 = 0;
              v85 = 0;
              v88 = v31;
              goto LABEL_49;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v85, 0, 0);
            v88 = v86;
            if (v86 > 0x40)
            {
              v87 = (void *)operator new[]();
              memcpy(v87, v85, (((unint64_t)v88 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v32 = v85;
LABEL_49:
              v87 = v32;
            }
            llvm::Float2IntPass::seen((uint64_t)this, v28, (uint64_t)&v85);
            if (v88 >= 0x41 && v87)
              MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
            if (v86 >= 0x41)
            {
              v74 = v85;
              if (v85)
                goto LABEL_139;
            }
            goto LABEL_52;
          }
          if (((1 << v30) & 0x180000000) != 0)
          {
            v63 = *(_DWORD *)(v28 + 20);
            if ((v63 & 0x40000000) != 0)
              v64 = *(llvm::Type ****)(v28 - 8);
            else
              v64 = (llvm::Type ***)(v28 - 32 * (v63 & 0x7FFFFFF));
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**v64);
            if ((_DWORD)v66 == 1)
            {
              v75 = PrimitiveSizeInBits;
              llvm::reportInvalidSizeRequest(v27, v66);
              PrimitiveSizeInBits = v75;
            }
            LODWORD(v106) = PrimitiveSizeInBits;
            if (PrimitiveSizeInBits > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v105, -1, 1);
              DWORD2(v107) = (_DWORD)v106;
              if (v106 <= 0x40)
                goto LABEL_111;
              *(_QWORD *)&v107 = operator new[]();
              memcpy((void *)v107, v105, (((unint64_t)DWORD2(v107) + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v67 = (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
              if (!PrimitiveSizeInBits)
                v67 = 0;
              v105 = v67;
              DWORD2(v107) = PrimitiveSizeInBits;
LABEL_111:
              *(_QWORD *)&v107 = v105;
            }
            llvm::ConstantRange::castOp((uint64_t)&v105, *(unsigned __int8 *)(v28 + 16) - 28);
            v68 = v26[552];
            v69 = v68 + 1;
            if (v90 <= v68 + 1)
            {
              v94 = v90;
              v93 = v89;
              v96 = v92;
              v95 = v91;
              v90 = 0;
              v92 = 0;
            }
            else
            {
              v94 = v68 + 1;
              if (v69 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v93, -1, 1);
                v96 = v94;
                if (v94 <= 0x40)
                  goto LABEL_117;
                v95 = (void *)operator new[]();
                memcpy(v95, v93, (((unint64_t)v96 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                if (v68 == -1)
                  v70 = 0;
                else
                  v70 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v68);
                v93 = v70;
                v96 = v69;
LABEL_117:
                v95 = v93;
              }
            }
            llvm::Float2IntPass::seen((uint64_t)this, v28, (uint64_t)&v93);
            if (v96 >= 0x41 && v95)
              MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
            if (v94 >= 0x41 && v93)
              MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
            if (v92 >= 0x41 && v91)
              MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
            if (v90 >= 0x41 && v89)
              MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
            if (DWORD2(v107) >= 0x41 && (_QWORD)v107)
              MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
            if (v106 >= 0x41 && v105)
              MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
            goto LABEL_43;
          }
        }
        v71 = v26[552];
        v72 = v71 + 1;
        v98 = v71 + 1;
        if ((v71 + 1) > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v97, -1, 1);
          v100 = v98;
          if (v98 > 0x40)
          {
            v99 = (void *)operator new[]();
            memcpy(v99, v97, (((unint64_t)v100 + 63) >> 3) & 0x3FFFFFF8);
            goto LABEL_132;
          }
        }
        else
        {
          v73 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v71);
          if (!v72)
            v73 = 0;
          v97 = v73;
          v100 = v72;
        }
        v99 = v97;
LABEL_132:
        llvm::Float2IntPass::seen((uint64_t)this, v28, (uint64_t)&v97);
        if (v100 >= 0x41 && v99)
          MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
        if (v98 >= 0x41)
        {
          v74 = v97;
          if (v97)
LABEL_139:
            MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
        }
LABEL_52:
        v33 = *(_DWORD *)(v28 + 20);
        if ((v33 & 0x40000000) != 0)
        {
          v35 = *(_QWORD *)(v28 - 8);
          v34 = v33 & 0x7FFFFFF;
        }
        else
        {
          v34 = v33 & 0x7FFFFFF;
          v35 = v28 - 32 * v34;
        }
        if (v34)
        {
          v36 = 32 * v34;
          while (1)
          {
            v37 = *(void **)v35;
            v38 = *(unsigned __int8 *)(*(_QWORD *)v35 + 16);
            if (v38 <= 0x1B)
              v37 = 0;
            v104 = v37;
            if (v37)
            {
              v39 = v27;
              v40 = v25;
              sub_1C63130C4(v25, v28, (uint64_t *)&v104);
              v41 = sub_1C6312FD4((uint64_t)this, v28);
              v42 = v26[552];
              v43 = v42 + 1;
              LODWORD(v106) = v42 + 1;
              if ((v42 + 1) > 0x40)
              {
                v78 = v41;
                llvm::APInt::initSlowCase((llvm::APInt *)&v105, -1, 1);
                v43 = v106;
                if (v106 <= 0x40)
                {
                  v41 = v78;
                  v26 = (_DWORD *)&unk_1ED81C000;
                  goto LABEL_67;
                }
                v55 = (((unint64_t)v106 + 63) >> 3) & 0x3FFFFFF8;
                v56 = (char *)operator new[]();
                v57 = v105;
                memcpy(v56, v105, v55);
                v46 = v56;
                v45 = v57;
                v41 = v78;
                v26 = (_DWORD *)&unk_1ED81C000;
              }
              else
              {
                v44 = (char *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v42);
                if (!v43)
                  v44 = 0;
                v105 = v44;
LABEL_67:
                v45 = v105;
                v46 = v105;
              }
              v47 = *(unsigned int *)(v41 + 16);
              if (v47 > 0x40)
              {
                v77 = v45;
                v80 = v41;
                v60 = v46;
                v61 = memcmp(*(const void **)(v41 + 8), v45, ((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8);
                v46 = v60;
                v62 = v61;
                v45 = v77;
                v41 = v80;
                if (v62)
                  goto LABEL_99;
LABEL_70:
                v48 = *(unsigned int *)(v41 + 32);
                if (v48 > 0x40)
                {
                  v58 = v45;
                  v79 = v46;
                  v59 = memcmp(*(const void **)(v41 + 24), v46, ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8);
                  v46 = v79;
                  v45 = v58;
                  v49 = v59 == 0;
                }
                else
                {
                  v49 = *(_QWORD *)(v41 + 24) == (_QWORD)v46;
                }
                v50 = v49;
              }
              else
              {
                if (*(char **)(v41 + 8) == v45)
                  goto LABEL_70;
LABEL_99:
                v50 = 0;
              }
              if (v43 >= 0x41)
              {
                v54 = v45;
                if (v46)
                  MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
                if (v54)
                  MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
              }
              v25 = v40;
              v27 = v39;
              if ((v50 & 1) == 0)
                sub_1C48410F0(__p, &v104);
              goto LABEL_61;
            }
            if (v38 != 17)
              break;
LABEL_61:
            v35 += 32;
            v36 -= 32;
            if (!v36)
              goto LABEL_43;
          }
          v51 = v26[552];
          v52 = v51 + 1;
          v82 = v51 + 1;
          if ((v51 + 1) > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
            v84 = v82;
            if (v82 <= 0x40)
              goto LABEL_82;
            v83 = (void *)operator new[]();
            memcpy(v83, __src, (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v53 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v51);
            if (!v52)
              v53 = 0;
            __src = v53;
            v84 = v52;
LABEL_82:
            v83 = __src;
          }
          llvm::Float2IntPass::seen((uint64_t)this, v28, (uint64_t)&__src);
          if (v84 >= 0x41 && v83)
            MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
          if (v82 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          goto LABEL_61;
        }
LABEL_43:
        v8 = *((_QWORD *)&v103 + 1);
      }
      while (*((_QWORD *)&v103 + 1));
    }
  }
  return sub_1C484143C((uint64_t)__p);
}

void llvm::Float2IntPass::calcRange(llvm::Float2IntPass *this@<X0>, llvm::Instruction *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _DWORD *v14;
  char v15;
  int v16;
  _BOOL4 v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  const void *v39;
  const void **v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  size_t v45;
  uint64_t v46;
  int v47;
  const void *v48;
  int v49;
  int v50;
  uint64_t *v51;
  int v52;
  int v53;
  void *v54;
  void *v55;
  void *v56;
  llvm::ConstantRange *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  void *v63;
  size_t v64;
  uint64_t v65;
  size_t v66;
  void *v67;
  size_t __n;
  size_t __na;
  unint64_t __nb;
  void *v72;
  unsigned int v73;
  char v74;
  void *__src;
  unsigned int v76;
  char v77;
  void *v78;
  unsigned int v79;
  void *v80;
  unsigned int v81;
  void *v82;
  unsigned int v83;
  void *v84;
  _DWORD *v85;
  uint64_t *v86;
  unsigned int v87;
  char v88;
  llvm::ConstantRange *v89;
  uint64_t v90;
  _QWORD v91[18];

  v91[16] = *MEMORY[0x1E0C80C00];
  v89 = (llvm::ConstantRange *)v91;
  v90 = 0x400000000;
  v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) == 0)
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (uint64_t *)((char *)a2 - 32 * v6);
    if (!v6)
      goto LABEL_103;
    goto LABEL_5;
  }
  v7 = (uint64_t *)*((_QWORD *)a2 - 1);
  v6 = v5 & 0x7FFFFFF;
  if (v6)
  {
LABEL_5:
    v8 = &v7[4 * v6];
    while (1)
    {
      v9 = *(unsigned __int8 *)(*v7 + 16);
      if (*v7)
        v10 = v9 >= 0x1C;
      else
        v10 = 0;
      if (!v10)
      {
        if (v9 == 17)
          v11 = *v7;
        else
          v11 = 0;
        v12 = (_QWORD *)(v11 + 32);
        if (*(_UNKNOWN **)(v11 + 32) == &unk_1C866F1C0)
          v13 = *(_BYTE *)(*(_QWORD *)(v11 + 40) + 28);
        else
          v13 = *(_BYTE *)(v11 + 52);
        if ((v13 & 7) == 3)
        {
          if ((v13 & 8) != 0 && sub_1C4774A9C((uint64_t)a2) && (*((_BYTE *)a2 + 17) & 0x10) == 0)
          {
LABEL_107:
            v53 = dword_1ED81C8A0 + 1;
            LODWORD(v85) = dword_1ED81C8A0 + 1;
            if ((dword_1ED81C8A0 + 1) > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v84, -1, 1);
              v53 = (int)v85;
              if (v85 <= 0x40)
                goto LABEL_111;
              v64 = (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8;
              v56 = (void *)operator new[]();
              v55 = v84;
              memcpy(v56, v84, v64);
            }
            else
            {
              v54 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)dword_1ED81C8A0);
              if (dword_1ED81C8A0 == -1)
                v54 = 0;
              v84 = v54;
LABEL_111:
              v55 = v84;
              v56 = v84;
            }
            *(_DWORD *)(a3 + 8) = v53;
            *(_QWORD *)a3 = v55;
            *(_DWORD *)(a3 + 24) = v53;
            *(_QWORD *)(a3 + 16) = v56;
            goto LABEL_115;
          }
        }
        else if ((v13 & 7u) < 2)
        {
          goto LABEL_107;
        }
        v14 = (_DWORD *)*v12;
        if ((_UNKNOWN *)*v12 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v85, (const llvm::detail::DoubleAPFloat *)(v11 + 32));
        }
        else
        {
          v85 = (_DWORD *)*v12;
          if ((v14[2] + 64) >= 0x80)
            v86 = (uint64_t *)operator new[]();
          v15 = *(_BYTE *)(v11 + 52);
          v16 = v15 & 7;
          v88 = v88 & 0xF0 | v15 & 0xF;
          v87 = *(_DWORD *)(v11 + 48);
          v18 = (v15 & 6) != 0 && v16 != 3;
          if (v16 == 1 || v18)
          {
            v20 = v85[2];
            v21 = (uint64_t *)&v86;
            if ((v20 - 64) <= 0xFFFFFF7F)
              v21 = v86;
            v22 = (uint64_t *)(v11 + 40);
            if ((*(_DWORD *)(*(_QWORD *)(v11 + 32) + 8) - 64) < 0xFFFFFF80)
              v22 = *(uint64_t **)(v11 + 40);
            if (v20 <= 0xFFFFFFBF)
            {
              v23 = (unint64_t)(v20 + 64) >> 6;
              do
              {
                v24 = *v22++;
                *v21++ = v24;
                --v23;
              }
              while (v23);
            }
          }
        }
        if (!sub_1C4DF8890((uint64_t)&v84, 1))
        {
          if (v85 == (_DWORD *)&unk_1C866F1C0)
            v25 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v85, (const llvm::detail::DoubleAPFloat *)(v11 + 32));
          else
            llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v85, (const llvm::detail::IEEEFloat *)(v11 + 32));
          if (v25 == 1)
          {
            v76 = dword_1ED81C8A0 + 1;
            if ((dword_1ED81C8A0 + 1) > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            else
              __src = 0;
            v77 = 0;
            v74 = 0;
            llvm::APFloat::convertToInteger(v11 + 24, (uint64_t)&__src, 1, &v74);
            v26 = v76;
            if (v76 > 0x40)
            {
              v34 = (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8;
              v35 = (void *)operator new[]();
              v27 = __src;
              memcpy(v35, __src, v34);
              v79 = v26;
              v78 = v35;
              v83 = v26;
              v28 = (void *)operator new[]();
              memcpy(v28, v78, v34);
            }
            else
            {
              v27 = __src;
              v79 = v76;
              v78 = __src;
              v83 = v76;
              v28 = __src;
            }
            v82 = v28;
            llvm::APInt::operator+=((uint64_t)&v82, 1uLL);
            v81 = v83;
            v80 = v82;
            sub_1C5AFF618((uint64_t)&v89, (unint64_t)&v78);
            if (v81 >= 0x41 && v80)
              MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
            if (v79 >= 0x41 && v78)
              MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
            if (v26 >= 0x41 && v27)
              MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
            v33 = 1;
LABEL_56:
            if (v85 == (_DWORD *)&unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v86);
            }
            else if ((v85[2] - 64) <= 0xFFFFFF7F && v86)
            {
              MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
            }
            if (!v33)
              goto LABEL_116;
            goto LABEL_59;
          }
        }
        v29 = dword_1ED81C8A0 + 1;
        v79 = dword_1ED81C8A0 + 1;
        if ((dword_1ED81C8A0 + 1) > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v78, -1, 1);
          v29 = v79;
          if (v79 <= 0x40)
            goto LABEL_54;
          v45 = (((unint64_t)v79 + 63) >> 3) & 0x3FFFFFF8;
          v32 = (void *)operator new[]();
          v31 = v78;
          memcpy(v32, v78, v45);
        }
        else
        {
          v30 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)dword_1ED81C8A0);
          if (dword_1ED81C8A0 == -1)
            v30 = 0;
          v78 = v30;
LABEL_54:
          v31 = v78;
          v32 = v78;
        }
        v33 = 0;
        *(_DWORD *)(a3 + 8) = v29;
        *(_QWORD *)a3 = v31;
        *(_DWORD *)(a3 + 24) = v29;
        *(_QWORD *)(a3 + 16) = v32;
        *(_BYTE *)(a3 + 32) = 1;
        goto LABEL_56;
      }
      v36 = sub_1C6312FD4((uint64_t)this, *v7);
      v37 = dword_1ED81C8A0 + 1;
      LODWORD(v85) = dword_1ED81C8A0 + 1;
      if ((dword_1ED81C8A0 + 1) <= 0x40)
        break;
      v46 = v36;
      llvm::APInt::initSlowCase((llvm::APInt *)&v84, 0, 0);
      v37 = v85;
      v87 = v85;
      if (v85 <= 0x40)
      {
        v38 = v84;
        v36 = v46;
        goto LABEL_70;
      }
      __nb = (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8;
      v51 = (uint64_t *)operator new[]();
      v86 = v51;
      v38 = v84;
      memcpy(v51, v84, __nb);
      v39 = v51;
      v36 = v46;
LABEL_71:
      v40 = (const void **)(v36 + 8);
      v41 = *(unsigned int *)(v36 + 16);
      if (v41 > 0x40)
      {
        __na = v36;
        v48 = v39;
        v49 = memcmp(*v40, v38, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
        v39 = v48;
        v50 = v49;
        v36 = __na;
        if (!v50)
        {
LABEL_73:
          v42 = *(unsigned int *)(v36 + 32);
          if (v42 > 0x40)
          {
            __n = (size_t)v39;
            v47 = memcmp(*(const void **)(v36 + 24), v39, ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8);
            v39 = (const void *)__n;
            v43 = v47 == 0;
          }
          else
          {
            v43 = *(_QWORD *)(v36 + 24) == (_QWORD)v39;
          }
          v44 = v43;
          goto LABEL_78;
        }
      }
      else if (*v40 == v38)
      {
        goto LABEL_73;
      }
      v44 = 0;
LABEL_78:
      if (v37 >= 0x41)
      {
        if (v39)
          MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
        if (v38)
          MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
      }
      if (v44)
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 32) = 0;
        goto LABEL_116;
      }
      sub_1C4E94140((uint64_t)&v89, (unint64_t)v40);
LABEL_59:
      v7 += 4;
      if (v7 == v8)
        goto LABEL_103;
    }
    v38 = 0;
    v84 = 0;
    v87 = dword_1ED81C8A0 + 1;
LABEL_70:
    v86 = (uint64_t *)v38;
    v39 = v38;
    goto LABEL_71;
  }
LABEL_103:
  v52 = *((unsigned __int8 *)a2 + 16);
  switch(*((_BYTE *)a2 + 16))
  {
    case '(':
      v62 = *((_DWORD *)v89 + 2);
      v73 = v62;
      if (v62 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v72, 0, 0);
        v65 = v73;
        LODWORD(v85) = v65;
        v63 = v72;
        v84 = v72;
        v73 = 0;
        v79 = v65;
        if (v65 > 0x40)
        {
          v66 = ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8;
          v67 = (void *)operator new[]();
          memcpy(v67, v63, v66);
          v63 = v67;
        }
      }
      else
      {
        v63 = 0;
        v72 = 0;
        LODWORD(v85) = v62;
        v84 = 0;
        v73 = 0;
        v79 = v62;
      }
      v78 = v63;
      llvm::APInt::operator+=((uint64_t)&v78, 1uLL);
      v87 = v79;
      v86 = (uint64_t *)v78;
      llvm::ConstantRange::sub((llvm::ConstantRange *)&v84, v89, (uint64_t)&v78);
      *(_DWORD *)(a3 + 8) = v79;
      *(_QWORD *)a3 = v78;
      *(_DWORD *)(a3 + 24) = v81;
      *(_QWORD *)(a3 + 16) = v80;
      *(_BYTE *)(a3 + 32) = 1;
      if (v87 >= 0x41 && v86)
        MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
      if (v85 >= 0x41 && v84)
        MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
      goto LABEL_116;
    case ')':
    case '+':
    case '-':
      __break(1u);
      return;
    case '*':
    case ',':
    case '.':
      llvm::ConstantRange::binaryOp((llvm::ConstantRange *)((char *)v89 + 32), (unsigned int *)v89, v52 - 28, (llvm::ConstantRange *)&v84);
      goto LABEL_114;
    default:
      if ((v52 - 69) >= 2)
        llvm::ConstantRange::unionWith((uint64_t)v89, (unsigned int *)v89 + 8, 0, (uint64_t)&v84);
      else
        llvm::ConstantRange::castOp((uint64_t)v89, v52 - 28);
LABEL_114:
      *(_DWORD *)(a3 + 8) = (_DWORD)v85;
      *(_QWORD *)a3 = v84;
      *(_DWORD *)(a3 + 24) = v87;
      *(_QWORD *)(a3 + 16) = v86;
      break;
  }
LABEL_115:
  *(_BYTE *)(a3 + 32) = 1;
LABEL_116:
  v57 = v89;
  if ((_DWORD)v90)
  {
    v58 = 32 * v90;
    do
    {
      v59 = (char *)v57 + v58;
      if (*(_DWORD *)((char *)v57 + v58 - 8) >= 0x41u)
      {
        v60 = *((_QWORD *)v59 - 2);
        if (v60)
          MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
      }
      if (*((_DWORD *)v59 - 6) >= 0x41u)
      {
        v61 = *((_QWORD *)v59 - 4);
        if (v61)
          MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
      }
      v58 -= 32;
    }
    while (v58);
    v57 = v89;
  }
  if (v57 != (llvm::ConstantRange *)v91)
    free(v57);
}

void sub_1C5AFF618(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 32 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_1C619CFE0(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_1C619CFE0(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 32 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 24) = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t llvm::Float2IntPass::walkForwards(llvm::Float2IntPass *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  llvm::Instruction *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  void *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *__src;
  unsigned int v27;
  void *v28;
  unsigned int v29;
  char v30;
  llvm::Instruction *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  v1 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  if (v1 == v2)
    return sub_1C484143C((uint64_t)&v32);
  do
  {
    v4 = dword_1ED81C8A0 + 1;
    v27 = dword_1ED81C8A0 + 1;
    if ((dword_1ED81C8A0 + 1) <= 0x40)
    {
      v5 = 0;
      __src = 0;
      v29 = dword_1ED81C8A0 + 1;
LABEL_4:
      v28 = v5;
      v6 = v5;
      goto LABEL_5;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v4 = v27;
    v29 = v27;
    if (v27 <= 0x40)
    {
      v5 = __src;
      goto LABEL_4;
    }
    v11 = v2;
    v12 = (((unint64_t)v27 + 63) >> 3) & 0x3FFFFFF8;
    v6 = (void *)operator new[]();
    v28 = v6;
    v5 = __src;
    v13 = v12;
    v2 = v11;
    memcpy(v6, __src, v13);
LABEL_5:
    v7 = *(unsigned int *)(v1 + 16);
    if (v7 > 0x40)
    {
      if (memcmp(*(const void **)(v1 + 8), v5, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8))
      {
LABEL_24:
        v10 = 0;
        goto LABEL_12;
      }
    }
    else if (*(void **)(v1 + 8) != v5)
    {
      goto LABEL_24;
    }
    v8 = *(unsigned int *)(v1 + 32);
    if (v8 > 0x40)
      v9 = memcmp(*(const void **)(v1 + 24), v6, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v9 = *(_QWORD *)(v1 + 24) == (_QWORD)v6;
    v10 = v9;
LABEL_12:
    if (v4 >= 0x41)
    {
      if (v6)
        MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
      if (v5)
        MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
    }
    if (v10)
      sub_1C48410F0(&v32, (_QWORD *)v1);
    v1 += 40;
  }
  while (v1 != v2);
  while (1)
  {
    v20 = *((_QWORD *)&v34 + 1);
    if (!*((_QWORD *)&v34 + 1))
      break;
    v14 = (((_QWORD)v33 - *((_QWORD *)&v32 + 1)) << 6) - 1;
    if ((_QWORD)v33 == *((_QWORD *)&v32 + 1))
      v14 = 0;
    v15 = *(llvm::Instruction **)(*(_QWORD *)(*((_QWORD *)&v32 + 1)
                                            + (((unint64_t)(v34 + *((_QWORD *)&v34 + 1) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * ((v34 + *((_QWORD *)&v34 + 1) - 1) & 0x1FF));
    v31 = v15;
    --*((_QWORD *)&v34 + 1);
    if ((unint64_t)(v14 - (v20 + v34) + 1) >= 0x400)
    {
      operator delete(*(void **)(v33 - 8));
      *(_QWORD *)&v33 = v33 - 8;
    }
    llvm::Float2IntPass::calcRange(this, v15, (uint64_t)&__src);
    if (v30)
    {
      v16 = v27;
      v23 = v27;
      if (v27 > 0x40)
      {
        v22 = (void *)operator new[]();
        v17 = __src;
        memcpy(v22, __src, (((unint64_t)v23 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v17 = __src;
        v22 = __src;
      }
      v18 = v29;
      v25 = v29;
      if (v29 > 0x40)
      {
        v24 = (void *)operator new[]();
        v19 = v28;
        memcpy(v24, v28, (((unint64_t)v25 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v19 = v28;
        v24 = v28;
      }
      llvm::Float2IntPass::seen((uint64_t)this, (uint64_t)v15, (uint64_t)&v22);
      if (v25 >= 0x41 && v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
      if (v23 >= 0x41 && v22)
        MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      if (v18 >= 0x41 && v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      if (v16 >= 0x41 && v17)
        MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
    else
    {
      sub_1C61F6E60(&v32, &v31);
    }
  }
  return sub_1C484143C((uint64_t)&v32);
}

uint64_t llvm::Float2IntPass::validateAndTransform(llvm::Float2IntPass *this)
{
  char *v1;
  char *v2;
  char v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  llvm::Type *v23;
  char *v24;
  char *v25;
  BOOL v26;
  char *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  void *__s1;
  unsigned int v34;
  void *__s2;
  unsigned int v36;

  v1 = (char *)*((_QWORD *)this + 25);
  v2 = (char *)this + 208;
  if (v1 != (char *)this + 208)
  {
    v4 = 0;
    v5 = (char *)this + 48;
    v28 = (char *)this + 56;
    while (1)
    {
      v34 = dword_1ED81C8A0 + 1;
      if ((dword_1ED81C8A0 + 1) > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__s1, 0, 0);
        v36 = v34;
        if (v34 > 0x40)
        {
          __s2 = (void *)operator new[]();
          memcpy(__s2, __s1, (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_6;
        }
        v6 = __s1;
      }
      else
      {
        v6 = 0;
        __s1 = 0;
        v36 = dword_1ED81C8A0 + 1;
      }
      __s2 = v6;
LABEL_6:
      if ((v1[40] & 1) == 0)
        goto LABEL_48;
      v7 = 0;
      v8 = (unint64_t)(v1 + 32);
      v9 = (unint64_t)(v1 + 32);
      do
      {
        v10 = *(uint64_t **)(v9 + 16);
        v11 = sub_1C6312FD4((uint64_t)this, (uint64_t)v10);
        if (*((_QWORD *)this + 4) != v11)
        {
          llvm::ConstantRange::unionWith((uint64_t)&__s1, (unsigned int *)(v11 + 8), 0, (uint64_t)&v29);
          if (v34 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          __s1 = v29;
          v34 = v30;
          v30 = 0;
          if (v36 >= 0x41 && __s2)
          {
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            __s2 = v31;
            v36 = v32;
            v32 = 0;
            if (v30 >= 0x41 && v29)
              MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
          }
          else
          {
            __s2 = v31;
            v36 = v32;
          }
          v12 = sub_1C631374C((uint64_t)v5, (uint64_t)v10);
          if ((*v5 & 1) != 0)
          {
            v13 = v28;
            v14 = 8;
          }
          else
          {
            v13 = (char *)*((_QWORD *)this + 7);
            v14 = *((unsigned int *)this + 16);
          }
          if (&v13[8 * v14] == (char *)v12)
          {
            if (!v7)
              v7 = *v10;
            while (1)
            {
              v10 = (uint64_t *)v10[1];
              if (!v10)
                break;
              v15 = v10[3];
              if (v15)
                v16 = *(unsigned __int8 *)(v15 + 16) >= 0x1Cu;
              else
                v16 = 0;
              if (!v16 || *((_QWORD *)this + 4) == sub_1C6312FD4((uint64_t)this, v15))
                goto LABEL_48;
            }
          }
        }
        v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFFELL;
      }
      while (v9);
      if ((v1[40] & 1) == 0)
        goto LABEL_48;
      v17 = v34;
      if (v34 > 0x40)
      {
        if (memcmp(__s1, __s2, (((unint64_t)v34 + 63) >> 3) & 0x3FFFFFF8)
          || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) != v17)
        {
LABEL_37:
          if (!llvm::ConstantRange::isSignWrappedSet((llvm::ConstantRange *)&__s1))
          {
            v18 = v34;
            v19 = v18 - sub_1C4959174((llvm::APInt *)&__s1) + 1;
            v20 = v36;
            v21 = v20 - sub_1C4959174((llvm::APInt *)&__s2);
            if (v19 <= v21 + 1)
              v19 = v21 + 1;
            v22 = *(unsigned __int8 *)(v7 + 8);
            if ((_DWORD)v22 != 2)
              __asm { BR              X9 }
            if (v19 + 1 < 0x18)
            {
              v23 = (llvm::Type *)(**((_QWORD **)this + 35) + 1960);
              if ((v1[40] & 1) != 0)
              {
                do
                {
                  llvm::Float2IntPass::convert(this, *(llvm::Instruction **)(v8 + 16), v23);
                  v4 = 1;
                  v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL;
                }
                while (v8);
              }
              else
              {
                v4 = 1;
              }
            }
          }
        }
      }
      else if (__s1 != __s2 || v34 && __s1 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v34))
      {
        goto LABEL_37;
      }
LABEL_48:
      if (v36 >= 0x41 && __s2)
        MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      if (v34 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
      v24 = (char *)*((_QWORD *)v1 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(char **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (char *)*((_QWORD *)v1 + 2);
          v26 = *(_QWORD *)v25 == (_QWORD)v1;
          v1 = v25;
        }
        while (!v26);
      }
      v1 = v25;
      if (v25 == v2)
        return v4 & 1;
    }
  }
  v4 = 0;
  return v4 & 1;
}

void llvm::Float2IntPass::cleanup(llvm::Float2IntPass *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((_QWORD *)this + 32);
  v1 = *((_QWORD *)this + 33);
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(v1 - 16);
    v1 -= 16;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v3 + 40) + 40, (uint64_t ***)v3);
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(_QWORD **)(v3 + 32);
    *v5 = v4;
    *(_QWORD *)(v4 + 8) = v5;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v3);
  }
}

uint64_t sub_1C5AFFF7C(uint64_t a1)
{
  int64x2_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81C8E0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194748;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  v2 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_QWORD *)(a1 + 56) = 0;
  *(int64x2_t *)(a1 + 88) = v2;
  *(int64x2_t *)(a1 + 104) = v2;
  *(int64x2_t *)(a1 + 120) = v2;
  *(int64x2_t *)(a1 + 136) = v2;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 160) = 0x800000000;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED81C8E8);
  if (v4 != -1)
  {
    v8[0] = sub_1C5AFDD98;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED81C8E8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::Float2IntPass::run@<X0>(llvm::Float2IntPass *a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  char v8;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2);
  v8 = llvm::Float2IntPass::runImpl(a1, a2, (const llvm::DominatorTree *)(ResultImpl + 8));
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v8 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5B00150()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AFFF7C(v0);
}

void sub_1C5B00178(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8194748;
  sub_1C62EA7A0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C5B001A8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8194748;
  sub_1C62EA7A0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B001EC(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5B00234(_QWORD **a1, const llvm::Function *a2)
{
  void **v5;
  void *v6;
  const llvm::DominatorTree *v7;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v5 = (void **)*a1[1];
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::DominatorTreeWrapperPass::ID);
  v7 = (const llvm::DominatorTree *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32);
  return llvm::Float2IntPass::runImpl((llvm::Float2IntPass *)(a1 + 4), a2, v7);
}

void sub_1C5B002AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)a1;
    v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11 > 0x666666666666666)
      sub_1C4764EE4();
    v12 = 5 * v11;
    v13 = (char *)operator new(40 * v11);
    v14 = &v13[40 * v8];
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v15 = &v13[8 * v12];
    v16 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v14 = *(_QWORD *)a2;
    *((_QWORD *)v14 + 1) = v16;
    *(_DWORD *)(a2 + 16) = 0;
    *((_DWORD *)v14 + 8) = *(_DWORD *)(a2 + 32);
    *((_QWORD *)v14 + 3) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 32) = 0;
    v6 = v14 + 40;
    if (v5 == v7)
    {
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v14[v17 * 8];
        v19 = &v5[v17];
        *((_QWORD *)v18 - 5) = v5[v17 - 5];
        *((_DWORD *)v18 - 6) = v5[v17 - 3];
        *((_QWORD *)v18 - 4) = v5[v17 - 4];
        *((_DWORD *)v19 - 6) = 0;
        *((_DWORD *)v18 - 2) = v5[v17 - 1];
        *((_QWORD *)v18 - 2) = v5[v17 - 2];
        *((_DWORD *)v19 - 2) = 0;
        v17 -= 5;
      }
      while (&v5[v17] != v7);
      *(_QWORD *)a1 = &v14[v17 * 8];
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v15;
      do
      {
        if (*((_DWORD *)v5 - 2) >= 0x41u)
        {
          v20 = *(v5 - 2);
          if (v20)
            MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v5 - 6) >= 0x41u)
        {
          v21 = *(v5 - 4);
          if (v21)
            MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
        }
        v5 -= 5;
      }
      while (v5 != v7);
    }
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    *((_DWORD *)v5 + 4) = *(_DWORD *)(a2 + 16);
    v5[1] = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 16) = 0;
    *((_DWORD *)v5 + 8) = *(_DWORD *)(a2 + 32);
    v5[3] = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 32) = 0;
    v6 = (char *)(v5 + 5);
  }
  *(_QWORD *)(a1 + 8) = v6;
}

uint64_t sub_1C5B004A8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5B00554()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 64;
  *(_QWORD *)&v1 = "Max integer bitwidth to consider in float2int(default=64)";
  *((_QWORD *)&v1 + 1) = 57;
  sub_1C4DB1928((uint64_t)&unk_1ED81C820, "float2int-max-integer-bw", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81C820, &dword_1C475E000);
}

llvm *sub_1C5B005D4(llvm::Value **a1)
{
  llvm *v2;
  llvm *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm *v7;
  llvm *result;
  _BYTE *v9;

  v2 = llvm::dbgs((llvm *)a1);
  v3 = v2;
  v4 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8250;
    *(_DWORD *)v4 = 1702060354;
    *((_QWORD *)v2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Base: ", 6uLL);
  }
  llvm::Value::printAsOperand(*a1, v3, 0, 0);
  v5 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v5) > 8)
  {
    *(_BYTE *)(v5 + 8) = 32;
    *(_QWORD *)v5 = *(_QWORD *)" Offset: ";
    *((_QWORD *)v3 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v3, " Offset: ", 9uLL);
  }
  llvm::Value::printAsOperand(a1[1], v3, 0, 0);
  v6 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v6) > 8)
  {
    *(_BYTE *)(v6 + 8) = 32;
    *(_QWORD *)v6 = *(_QWORD *)" Length: ";
    *((_QWORD *)v3 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v3, " Length: ", 9uLL);
  }
  v7 = (llvm *)llvm::Value::printAsOperand(a1[2], v3, 0, 0);
  result = llvm::dbgs(v7);
  v9 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v9)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v9 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

_QWORD *llvm::GuardWideningPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v7;
  uint64_t v8;
  uint64_t CachedResultImpl;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  void (**v16)(void);
  _QWORD *result;
  void *v18;
  void *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _BYTE v22[40];
  _BYTE v23[24];
  _BYTE *v24;
  void *v25;
  _QWORD v26[20];

  v26[19] = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::PostDominatorTreeAnalysis::Key, a1) + 8;
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::MemorySSAAnalysis::Key, a1);
  if (CachedResultImpl)
  {
    v10 = *(_QWORD *)(CachedResultImpl + 8);
    v11 = operator new();
    *(_QWORD *)v11 = v10;
    *(_QWORD *)(v11 + 8) = v11 + 24;
    *(_QWORD *)(v11 + 16) = 0x1000000000;
    *(_QWORD *)(v11 + 408) = v11 + 440;
    *(_QWORD *)(v11 + 416) = v11 + 440;
    *(_QWORD *)(v11 + 424) = 8;
    *(_DWORD *)(v11 + 432) = 0;
    *(_QWORD *)(v11 + 504) = v11 + 520;
    *(_QWORD *)(v11 + 512) = 0x800000000;
    *(_QWORD *)(v11 + 600) = 0;
    *(_QWORD *)(v11 + 592) = 0;
    *(_QWORD *)(v11 + 584) = v11 + 592;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(ResultImpl + 56);
  v20[0] = &off_1E81949C8;
  v21 = v20;
  sub_1C5B00A24((uint64_t)v22, ResultImpl + 8, v8, v7, v11, v12, (uint64_t)v20);
  v13 = sub_1C5B00AB0((uint64_t)v22);
  MEMORY[0x1CAA32FB4](v26[16], 8);
  if (v25 != v26)
    free(v25);
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
  if (v21 == v20)
  {
    v16 = (void (**)(void))(v20[0] + 32);
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v16 = (void (**)(void))(*v21 + 40);
  }
  (*v16)();
LABEL_16:
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v13 & 1) != 0)
  {
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
    result = sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
    if (!v11)
      return result;
  }
  else
  {
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (!v11)
      return result;
  }
  sub_1C61247C0(v11 + 584, *(_QWORD **)(v11 + 592));
  v18 = *(void **)(v11 + 504);
  if (v18 != (void *)(v11 + 520))
    free(v18);
  v19 = *(void **)(v11 + 416);
  if (v19 != *(void **)(v11 + 408))
    free(v19);
  sub_1C4EE41F8((char **)(v11 + 8));
  return (_QWORD *)MEMORY[0x1CAA32FC0](v11, 0x10E0C40B8556DDDLL);
}

uint64_t sub_1C5B00A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  v8 = *(_QWORD *)(a7 + 24);
  if (v8)
  {
    if (v8 == a7)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      (*(void (**)(_QWORD))(**(_QWORD **)(a7 + 24) + 24))(*(_QWORD *)(a7 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x1000000000;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  return a1;
}

uint64_t sub_1C5B00AB0(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  int v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  llvm::BranchInst *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *i;
  llvm *v26;
  const llvm::User *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  llvm::BranchInst *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  llvm::BranchInst *v40;
  _QWORD **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD **v46;
  const llvm::Instruction *v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  _QWORD *v63;
  _BOOL4 v64;
  llvm::ValueHandleBase *v66;
  int v67;
  llvm::ValueHandleBase *v68;
  llvm::ValueHandleBase *v69;
  const llvm::User *v70;
  uint64_t v71;
  llvm::BasicBlock *v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  llvm::Instruction *v76;
  llvm::ValueHandleBase *v77;
  llvm::ValueHandleBase *v78;
  const llvm::User *v79;
  llvm::Value *v80;
  const llvm::APInt *v81;
  uint64_t *v82;
  uint64_t v83;
  llvm::ValueHandleBase *v84;
  unint64_t v85;
  llvm::ConstantInt *v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  const llvm::User *v93;
  int32x2_t **v94;
  uint64_t v95;
  _QWORD *v96;
  __int32 v97;
  int32x2_t v98;
  __int32 v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  llvm::MemoryAccess *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  llvm::BranchInst *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  _OWORD v123[4];
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  int v131;
  _BYTE v132[64];
  void *__p;
  char *v134;
  char *v135;
  _QWORD v136[2];
  unsigned int v137;
  llvm::Instruction *v138;
  llvm::BranchInst *v139;
  llvm::BranchInst *v140;
  uint64_t v141;
  int v142;
  _BYTE v143[71];

  v136[0] = 0;
  v136[1] = 0;
  v137 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v128 = v132;
  v129 = v132;
  v130 = 8;
  v131 = 0;
  v134 = 0;
  v135 = 0;
  __p = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v128, v2);
  v3 = v134;
  if (v134 < v135)
  {
    *(_QWORD *)v134 = v2;
    v3[8] = 0;
    v10 = v3 + 24;
    v3[16] = 0;
  }
  else
  {
    v4 = __p;
    v5 = 0xAAAAAAAAAAAAAAABLL * ((v134 - (_BYTE *)__p) >> 3);
    v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_167;
    if (0x5555555555555556 * ((v135 - (_BYTE *)__p) >> 3) > v6)
      v6 = 0x5555555555555556 * ((v135 - (_BYTE *)__p) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v135 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
      v7 = 0xAAAAAAAAAAAAAAALL;
    else
      v7 = v6;
    if (v7)
    {
      if (v7 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v8 = (char *)operator new(24 * v7);
    }
    else
    {
      v8 = 0;
    }
    v9 = &v8[24 * v5];
    *(_QWORD *)v9 = v2;
    v9[8] = 0;
    v9[16] = 0;
    v10 = v9 + 24;
    if (v3 != v4)
    {
      do
      {
        v11 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v9 - 24) = v11;
        v9 -= 24;
        v3 -= 24;
      }
      while (v3 != v4);
      v3 = __p;
    }
    __p = v9;
    v134 = v10;
    v135 = &v8[24 * v7];
    if (v3)
      operator delete(v3);
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v134 = v10;
  v124 = 0;
  v125 = 0;
  memset(v123, 0, sizeof(v123));
  v120 = (char *)v123 + 8;
  v121 = (char *)v123 + 8;
  v111 = (uint64_t *)(a1 + 216);
  v122 = 8;
  v15 = &unk_1ED81C000;
  v126 = 0;
  v127 = 0;
  while (1)
  {
    if (v10 - (_BYTE *)__p != v13 - v12)
      goto LABEL_32;
    if (__p == v10)
      break;
    v16 = v12 + 8;
    v17 = (char *)__p + 8;
    while (1)
    {
      v18 = v17 - 8;
      if (*((_QWORD *)v17 - 1) != *((_QWORD *)v16 - 1))
        break;
      v19 = v16[8];
      if (v17[8])
        v20 = v19 == 0;
      else
        v20 = 1;
      if (v20)
      {
        if ((v17[8] == 0) == (v19 != 0))
          break;
      }
      else if (*(_QWORD *)v17 != *(_QWORD *)v16)
      {
        break;
      }
      v16 += 24;
      v17 += 24;
      if (v18 + 24 == v10)
        goto LABEL_135;
    }
LABEL_32:
    v119 = 0;
    v21 = (llvm::BranchInst *)**((_QWORD **)v10 - 3);
    v119 = v21;
    v139 = v21;
    v22 = *(_QWORD *)(a1 + 64);
    if (!v22)
    {
LABEL_166:
      sub_1C485C2F0();
LABEL_167:
      abort();
    }
    if ((*(unsigned int (**)(uint64_t, llvm::BranchInst **))(*(_QWORD *)v22 + 48))(v22, &v139))
    {
      v23 = sub_1C627EDC8((uint64_t)v136, (uint64_t *)&v119);
      v24 = (_QWORD *)((char *)v21 + 40);
      for (i = (_QWORD *)*((_QWORD *)v21 + 6); i != v24; i = (_QWORD *)i[1])
      {
        if (i)
          v26 = (llvm *)(i - 3);
        else
          v26 = 0;
        if (llvm::isGuard((uint64_t)v26) || v15[2416] && llvm::isGuardAsWidenableBranch(v26, v27))
        {
          v28 = *((unsigned int *)v23 + 4);
          if (v28 >= *((unsigned int *)v23 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v23 + 1), (uint64_t)(v23 + 3), v28 + 1, 8);
            v28 = *((unsigned int *)v23 + 4);
          }
          *(_QWORD *)(v23[1] + 8 * v28) = v26;
          ++*((_DWORD *)v23 + 4);
        }
      }
      v29 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v29)
      {
        v30 = (uint64_t *)v23[1];
        v31 = &v30[v29];
        v110 = v31;
        while (1)
        {
          v32 = *v30;
          if (*((_BYTE *)sub_1C5B01A94(*v30) + 16) != 16)
            break;
          LODWORD(v33) = 0;
LABEL_116:
          v14 |= v33;
          if (++v30 == v31)
            goto LABEL_34;
        }
        v138 = 0;
        v33 = -1431655765 * ((unint64_t)(v134 - (_BYTE *)__p) >> 3);
        v118 = v33;
        if (!(_DWORD)v33)
          goto LABEL_116;
        v112 = v30;
        v34 = 0;
        v35 = 0;
        v113 = v14;
        v114 = v137 - 1;
        v115 = v136[0];
        v116 = v137;
        v117 = v136[0] + 88 * v137;
        while (2)
        {
          v36 = (llvm::BranchInst *)**((_QWORD **)__p + 3 * v34);
          v139 = v36;
          v37 = *(_QWORD *)(a1 + 64);
          if (!v37)
            goto LABEL_166;
          if (!(*(unsigned int (**)(uint64_t, llvm::BranchInst **))(*(_QWORD *)v37 + 48))(v37, &v139))
            goto LABEL_114;
          v38 = v117;
          if (v116)
          {
            v39 = v114 & ((v36 >> 4) ^ (v36 >> 9));
            v38 = v115 + 88 * v39;
            v40 = *(llvm::BranchInst **)v38;
            if (*(llvm::BranchInst **)v38 != v36)
            {
              v74 = 1;
              while (v40 != (llvm::BranchInst *)-4096)
              {
                v75 = v39 + v74++;
                v39 = v75 & v114;
                v38 = v115 + 88 * v39;
                v40 = *(llvm::BranchInst **)v38;
                if (*(llvm::BranchInst **)v38 == v36)
                  goto LABEL_56;
              }
              v38 = v117;
            }
          }
LABEL_56:
          v41 = *(_QWORD ***)(v38 + 8);
          v42 = *(unsigned int *)(v38 + 16);
          if (*(llvm::BranchInst **)(v32 + 40) != v36)
          {
            if (*(_DWORD *)(v38 + 16))
              goto LABEL_65;
LABEL_107:
            if (++v34 == v118)
            {
LABEL_114:
              v14 = v113;
              if (v35)
              {
                v76 = v138;
                v77 = sub_1C5B01A94(v32);
                v139 = 0;
                v78 = sub_1C5B01A94((uint64_t)v76);
                sub_1C5B01EB8((llvm::DominatorTree **)a1, (uint64_t)v78, (uint64_t)v77, v76, (uint64_t *)&v139);
                v15 = (_BYTE *)&unk_1ED81C000;
                if (llvm::isGuardAsWidenableBranch(v76, v79))
                  llvm::setWidenableBranchCond((llvm::Instruction **)v76, v139, v80);
                else
                  sub_1C5B01BDC((uint64_t)v76, (uint64_t)v139);
                v82 = **(uint64_t ***)v32;
                v83 = *v82;
                v84 = *(llvm::ValueHandleBase **)(*v82 + 1560);
                v31 = v110;
                if (!v84)
                {
                  v86 = *(llvm::ConstantInt **)(v83 + 1888);
                  v87 = *(_DWORD *)(v83 + 1896);
                  LODWORD(v140) = v87 >> 8;
                  if (v87 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v139, 1, 0);
                  }
                  else
                  {
                    if (v87 <= 0xFF)
                      v88 = 0;
                    else
                      v88 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v87);
                    v139 = (llvm::BranchInst *)(v88 & 1);
                  }
                  v84 = llvm::ConstantInt::get(v86, (llvm::LLVMContext *)&v139, v81);
                  if (v140 >= 0x41 && v139)
                    MEMORY[0x1CAA32F9C](v139, 0x1000C8000313F17);
                  *(_QWORD *)(v83 + 1560) = v84;
                }
                sub_1C5B01BDC(v32, (uint64_t)v84);
                v85 = *(unsigned int *)(a1 + 80);
                if (v85 >= *(unsigned int *)(a1 + 84))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v85 + 1, 8);
                  v85 = *(unsigned int *)(a1 + 80);
                }
                v30 = v112;
                *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v85) = v32;
                ++*(_DWORD *)(a1 + 80);
                sub_1C61DB390((uint64_t)v111, &v138, (uint64_t)&v139);
                LODWORD(v33) = 1;
              }
              else
              {
                LODWORD(v33) = 0;
                v15 = (_BYTE *)&unk_1ED81C000;
                v30 = v112;
                v31 = v110;
              }
              goto LABEL_116;
            }
            continue;
          }
          break;
        }
        v43 = *(_QWORD **)(v38 + 8);
        if ((_DWORD)v42)
        {
          v44 = 8 * v42;
          v43 = v41;
          v45 = &v41[v42];
          while (*v43 != v32)
          {
            ++v43;
            v44 -= 8;
            if (!v44)
            {
              v43 = v45;
              break;
            }
          }
        }
        v42 = (_QWORD **)v43 - v41;
        if (!v42)
          goto LABEL_107;
LABEL_65:
        v46 = &v41[v42];
        while (2)
        {
          v47 = (const llvm::Instruction *)*v41;
          v48 = *(uint64_t **)(a1 + 16);
          v49 = *((_DWORD *)v48 + 4);
          if (!v49)
          {
            v57 = 0;
            goto LABEL_85;
          }
          v50 = *(_QWORD *)(v32 + 40);
          v51 = *v48;
          v52 = v49 - 1;
          v53 = ((v50 >> 4) ^ (v50 >> 9)) & v52;
          v54 = *(_QWORD *)(v51 + 16 * v53);
          if (v50 == v54)
          {
LABEL_71:
            v57 = *(_QWORD **)(v51 + 16 * v53 + 8);
          }
          else
          {
            v55 = 1;
            while (v54 != -4096)
            {
              v56 = v53 + v55++;
              v53 = v56 & v52;
              v54 = *(_QWORD *)(v51 + 16 * v53);
              if (v50 == v54)
                goto LABEL_71;
            }
            v57 = 0;
          }
          v58 = *((_QWORD *)v47 + 5);
          v59 = ((v58 >> 4) ^ (v58 >> 9)) & v52;
          v60 = *(_QWORD *)(v51 + 16 * v59);
          if (v58 == v60)
          {
LABEL_77:
            v63 = *(_QWORD **)(v51 + 16 * v59 + 8);
            v64 = v63 == v57;
            if (v63 == v57 || v63 == 0)
              goto LABEL_86;
            while (v57)
            {
              v64 = 0;
              v57 = (_QWORD *)*v57;
              if (v57 == v63)
                goto LABEL_86;
            }
          }
          else
          {
            v61 = 1;
            while (v60 != -4096)
            {
              v62 = v59 + v61++;
              v59 = v62 & v52;
              v60 = *(_QWORD *)(v51 + 16 * v59);
              if (v58 == v60)
                goto LABEL_77;
            }
LABEL_85:
            v64 = v57 == 0;
LABEL_86:
            v66 = sub_1C5B01A94(v32);
            v139 = (llvm::BranchInst *)v143;
            v140 = (llvm::BranchInst *)v143;
            v141 = 8;
            v142 = 0;
            v67 = sub_1C5B01CBC((llvm::DominatorTree **)a1, (uint64_t)v66, v47, &v139);
            if (v140 != v139)
              free(v140);
            if (v67)
            {
              v68 = sub_1C5B01A94(v32);
              v69 = sub_1C5B01A94((uint64_t)v47);
              v139 = 0;
              if (sub_1C5B01EB8((llvm::DominatorTree **)a1, (uint64_t)v68, (uint64_t)v69, 0, (uint64_t *)&v139))
              {
                if (v64)
                  LODWORD(v71) = 2;
                else
                  LODWORD(v71) = 3;
              }
              else if (v64)
              {
                v72 = (llvm::BasicBlock *)*((_QWORD *)v47 + 5);
                v73 = *(_QWORD *)(v32 + 40);
                if (llvm::isGuardAsWidenableBranch(v47, v70))
                  v72 = (llvm::BasicBlock *)*((_QWORD *)v47 - 4);
                if ((llvm::BasicBlock *)v73 == v72 || v73 == llvm::BasicBlock::getUniqueSuccessor(v72))
                {
                  LODWORD(v71) = 1;
                }
                else
                {
                  v71 = *(_QWORD *)(a1 + 8);
                  if (v71)
                    LODWORD(v71) = llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(v71, v73, (uint64_t)v72);
                }
              }
              else
              {
                LODWORD(v71) = 2;
              }
LABEL_94:
              if ((int)v71 > v35)
              {
                v138 = v47;
                v35 = v71;
              }
              if (++v41 == v46)
                goto LABEL_107;
              continue;
            }
          }
          break;
        }
        LODWORD(v71) = 0;
        goto LABEL_94;
      }
    }
LABEL_34:
    sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)&v128);
    v10 = v134;
    v12 = v125;
    v13 = v126;
  }
LABEL_135:
  if (v12)
  {
    v126 = v12;
    operator delete(v12);
  }
  if (v121 != v120)
    free(v121);
  if (__p)
  {
    v134 = (char *)__p;
    operator delete(__p);
  }
  if (v129 != v128)
    free(v129);
  v89 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v89)
  {
    v90 = *(uint64_t **)(a1 + 72);
    v91 = &v90[v89];
    do
    {
      v92 = *v90;
      v128 = (_BYTE *)*v90;
      v120 = 0;
      if ((sub_1C61DB414(v111, &v128, &v120) & 1) == 0
        && (llvm::isGuard(v92) || v15[2416] && llvm::isGuardAsWidenableBranch((llvm *)v92, v93)))
      {
        v94 = *(int32x2_t ***)(a1 + 24);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v92 + 40) + 40, (uint64_t ***)v92);
        v95 = *(_QWORD *)(v92 + 24);
        v96 = *(_QWORD **)(v92 + 32);
        *v96 = v95;
        *(_QWORD *)(v95 + 8) = v96;
        *(_QWORD *)(v92 + 24) = 0;
        *(_QWORD *)(v92 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v92);
        if (v94)
        {
          v97 = (*v94)[5].i32[0];
          if (v97)
          {
            v98 = (*v94)[3];
            v99 = v97 - 1;
            v100 = (v97 - 1) & ((v92 >> 4) ^ (v92 >> 9));
            v101 = *(_QWORD *)(*(_QWORD *)&v98 + 16 * v100);
            if (v101 == v92)
            {
LABEL_157:
              v104 = *(llvm::MemoryAccess **)(*(_QWORD *)&v98 + 16 * v100 + 8);
              if (v104)
                llvm::MemorySSAUpdater::removeMemoryAccess(v94, v104, 0);
            }
            else
            {
              v102 = 1;
              while (v101 != -4096)
              {
                v103 = v100 + v102++;
                v100 = v103 & v99;
                v101 = *(_QWORD *)(*(_QWORD *)&v98 + 16 * v100);
                if (v101 == v92)
                  goto LABEL_157;
              }
            }
          }
        }
      }
      ++v90;
    }
    while (v90 != v91);
  }
  v105 = v136[0];
  if (v137)
  {
    v106 = 88 * v137;
    v107 = v136[0] + 24;
    do
    {
      if ((*(_QWORD *)(v107 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v108 = *(void **)(v107 - 16);
        if ((void *)v107 != v108)
          free(v108);
      }
      v107 += 88;
      v106 -= 88;
    }
    while (v106);
  }
  MEMORY[0x1CAA32FB4](v105, 8);
  return v14 & 1;
}

_QWORD *llvm::GuardWideningPass::run@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t LoopPredecessor;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  void (**v22)(_QWORD *);
  _QWORD *result;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  _BYTE v29[40];
  _BYTE v30[24];
  _BYTE *v31;
  void *v32;
  _QWORD v33[20];

  v33[19] = *MEMORY[0x1E0C80C00];
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
  v26 = LoopPredecessor;
  if (!LoopPredecessor)
  {
    LoopPredecessor = **(_QWORD **)(a1 + 32);
    v26 = LoopPredecessor;
  }
  if (a2[9])
  {
    v7 = operator new();
    *(_QWORD *)v7 = a2[9];
    *(_QWORD *)(v7 + 8) = v7 + 24;
    *(_QWORD *)(v7 + 16) = 0x1000000000;
    *(_QWORD *)(v7 + 408) = v7 + 440;
    *(_QWORD *)(v7 + 416) = v7 + 440;
    *(_QWORD *)(v7 + 424) = 8;
    *(_DWORD *)(v7 + 432) = 0;
    *(_QWORD *)(v7 + 504) = v7 + 520;
    *(_QWORD *)(v7 + 512) = 0x800000000;
    *(_QWORD *)(v7 + 600) = 0;
    *(_QWORD *)(v7 + 592) = 0;
    *(_QWORD *)(v7 + 584) = v7 + 592;
  }
  else
  {
    v7 = 0;
  }
  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(unsigned int *)(v8 + 40);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & ((LoopPredecessor >> 4) ^ (LoopPredecessor >> 9));
    v13 = (uint64_t *)(v10 + 16 * v12);
    v14 = *v13;
    if (LoopPredecessor == *v13)
      goto LABEL_13;
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (LoopPredecessor == v14)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_13;
      }
    }
  }
  v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_13:
  if (v13 == (uint64_t *)(v10 + 16 * v11))
    v17 = 0;
  else
    v17 = v13[1];
  v27[0] = &off_1E8194A10;
  v27[1] = &v26;
  v27[2] = a1;
  v28 = v27;
  sub_1C5B00A24((uint64_t)v29, v8, 0, v9, v7, v17, (uint64_t)v27);
  v18 = sub_1C5B00AB0((uint64_t)v29);
  MEMORY[0x1CAA32FB4](v33[16], 8);
  if (v32 != v33)
    free(v32);
  v19 = v31;
  if (v31 == v30)
  {
    v20 = 4;
    v19 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_23;
    v20 = 5;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v20))(v19);
LABEL_23:
  v21 = v28;
  if (v28 == v27)
  {
    v22 = (void (**)(_QWORD *))(v27[0] + 32);
    v21 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_28;
    v22 = (void (**)(_QWORD *))(*v28 + 40);
  }
  (*v22)(v21);
LABEL_28:
  if ((v18 & 1) != 0)
  {
    result = llvm::getLoopPassPreservedAnalyses(a3);
    if (a2[9])
      result = sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v7)
  {
    sub_1C61247C0(v7 + 584, *(_QWORD **)(v7 + 592));
    v24 = *(void **)(v7 + 504);
    if (v24 != (void *)(v7 + 520))
      free(v24);
    v25 = *(void **)(v7 + 416);
    if (v25 != *(void **)(v7 + 408))
      free(v25);
    sub_1C4EE41F8((char **)(v7 + 8));
    return (_QWORD *)MEMORY[0x1CAA32FC0](v7, 0x10E0C40B8556DDDLL);
  }
  return result;
}

uint64_t sub_1C5B017BC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Widen guards";
  *(_QWORD *)(v2 + 8) = 12;
  *(_QWORD *)(v2 + 16) = "guard-widening";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED81C9B0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5B05B18;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5B01860(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Widen guards (within a single loop, as a loop pass)";
  *(_QWORD *)(v2 + 8) = 51;
  *(_QWORD *)(v2 + 16) = "loop-guard-widening";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED81C9B1;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5B05B40;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5B01904(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81C9B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81947E8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81C9B8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B017BC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81C9B8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B019CC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81C9B1;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E81948D0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81C9C0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B01860;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81C9C0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

llvm::ValueHandleBase *sub_1C5B01A94(uint64_t a1)
{
  uint64_t v2;
  const llvm::APInt *v3;
  llvm::ValueHandleBase *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::ConstantInt *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (*(_BYTE *)(a1 + 16) == 84)
  {
    v2 = *(_QWORD *)(a1 - 32);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v2 + 33) & 0x20) != 0)
      {
        v6 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
        return *(llvm::ValueHandleBase **)v6;
      }
    }
  }
  v13 = 0;
  v15 = 0;
  if (!llvm::parseWidenableBranch(a1, &v15, &v14, &v13, &v12))
    return *(llvm::ValueHandleBase **)(a1 - 96);
  v6 = v15;
  if (v15)
    return *(llvm::ValueHandleBase **)v6;
  v7 = **v13;
  v8 = *v7;
  v4 = *(llvm::ValueHandleBase **)(*v7 + 1560);
  if (!v4)
  {
    v9 = *(llvm::ConstantInt **)(v8 + 1888);
    v10 = *(_DWORD *)(v8 + 1896);
    v17 = v10 >> 8;
    if (v10 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v16, 1, 0);
    }
    else
    {
      if (v10 <= 0xFF)
        v11 = 0;
      else
        v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
      v16 = v11 & 1;
    }
    v4 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v16, v3);
    if (v17 >= 0x41 && v16)
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    *(_QWORD *)(v8 + 1560) = v4;
  }
  return v4;
}

uint64_t sub_1C5B01BDC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(result + 16) == 84
    && (v2 = *(_QWORD *)(result - 32)) != 0
    && !*(_BYTE *)(v2 + 16)
    && *(_QWORD *)(v2 + 24) == *(_QWORD *)(result + 72)
    && (*(_BYTE *)(v2 + 33) & 0x20) != 0)
  {
    v8 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    v9 = -v8;
    v3 = (_QWORD *)(result - 32 * v8);
    if (*v3)
    {
      v10 = result + 32 * v9;
      v12 = *(_QWORD **)(v10 + 16);
      v11 = (_QWORD *)(v10 + 16);
      *v12 = *(v11 - 1);
      v13 = *(v11 - 1);
      if (v13)
        *(_QWORD *)(v13 + 16) = *v11;
    }
    *v3 = a2;
    if (a2)
    {
      v15 = *(_QWORD *)(a2 + 8);
      v5 = (_QWORD *)(a2 + 8);
      v14 = v15;
      v16 = result + 32 * v9;
      *(_QWORD *)(v16 + 8) = v15;
      if (v15)
        *(_QWORD *)(v14 + 16) = v16 + 8;
      *(_QWORD *)(v16 + 16) = v5;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = (_QWORD *)(result - 96);
    if (*(_QWORD *)(result - 96))
    {
      **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
      v4 = *(_QWORD *)(result - 88);
      if (v4)
        *(_QWORD *)(v4 + 16) = *(_QWORD *)(result - 80);
    }
    *v3 = a2;
    if (a2)
    {
      v7 = *(_QWORD *)(a2 + 8);
      v5 = (_QWORD *)(a2 + 8);
      v6 = v7;
      *(_QWORD *)(result - 88) = v7;
      if (v7)
        *(_QWORD *)(v6 + 16) = result - 88;
      *(_QWORD *)(result - 80) = v5;
LABEL_13:
      *v5 = v3;
    }
  }
  return result;
}

uint64_t sub_1C5B01CBC(llvm::DominatorTree **a1, uint64_t a2, const llvm::Instruction *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int32 v21;

  result = 1;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu)
    return result;
  if (llvm::DominatorTree::dominates(*a1, (const llvm::Value *)a2, a3))
    return 1;
  v9 = sub_1C477672C((uint64_t)a4, a2);
  v10 = a4[1];
  v11 = v10 == *a4 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
  if (v9 != (_QWORD *)(v10 + 8 * *v11))
    return 1;
  result = llvm::isSafeToSpeculativelyExecute(a2, (unint64_t *)a3, (unsigned __int8 *)*a1, 0);
  if (!(_DWORD)result)
    return result;
  v12 = *(unsigned __int8 *)(a2 + 16) - 33;
  if (v12 > 0x37)
    goto LABEL_15;
  if (((1 << (*(_BYTE *)(a2 + 16) - 33)) & 0x8000000000041) == 0)
  {
    if (((1 << (*(_BYTE *)(a2 + 16) - 33)) & 0x808001C8000010) != 0
      || v12 == 28 && (*(_WORD *)(a2 + 18) & 0x301) != 0)
    {
      return 0;
    }
LABEL_15:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, a2);
    v13 = *(_DWORD *)(a2 + 20);
    if ((v13 & 0x40000000) != 0)
    {
      v15 = *(uint64_t **)(a2 - 8);
      v14 = v13 & 0x7FFFFFF;
    }
    else
    {
      v14 = v13 & 0x7FFFFFF;
      v15 = (uint64_t *)(a2 - 32 * v14);
    }
    if (!v14)
      return 1;
    v16 = 32 * v14 - 32;
    do
    {
      v17 = *v15;
      v15 += 4;
      result = sub_1C5B01CBC(a1, v17, a3, a4);
      if ((_DWORD)result)
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 32;
    }
    while (!v18);
    return result;
  }
  v19 = *(_QWORD *)(a2 + 64);
  if (v19 && ((*(_BYTE *)(v19 + 20) & 4) != 0 || (*(_BYTE *)(v19 + 17) & 0x10) != 0))
    goto LABEL_15;
  v21 = 7;
  if (sub_1C53E4BBC(a2, &v21, 1uLL))
  {
    v20 = *(_QWORD *)(a2 - 32);
    if (!v20 || *(_BYTE *)(v20 + 16) || *(_QWORD *)(v20 + 24) != *(_QWORD *)(a2 + 72) || *(_DWORD *)(v20 + 36) != 7)
      return 0;
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) != 0)
    goto LABEL_15;
  result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44);
  if ((_DWORD)result)
    goto LABEL_15;
  return result;
}

uint64_t sub_1C5B01EB8(llvm::DominatorTree **a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4, uint64_t *a5)
{
  uint64_t v7;
  llvm::ConstantInt ***v8;
  _DWORD **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  unint64_t v46;
  _BOOL4 v47;
  unsigned int v48;
  __int128 *v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t *v57;
  int64_t v58;
  unint64_t *v59;
  int64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BOOL4 v63;
  unint64_t v64;
  int v65;
  unint64_t v67;
  int v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  _BOOL4 v85;
  unint64_t v86;
  unint64_t v87;
  __int128 *v88;
  __int128 v89;
  unsigned int v90;
  __int128 *v91;
  __int128 *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  llvm::Value *v101;
  uint64_t result;
  uint64_t v103;
  uint64_t v104;
  const llvm::APInt *v105;
  llvm::ConstantInt ***v106;
  uint64_t v107;
  llvm::ValueHandleBase *v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t *v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;
  llvm::ConstantInt ***v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  __int128 *v119;
  int v121;
  void *v122;
  unsigned int v123;
  __int128 v124;
  __int128 v125;
  void *v126;
  uint64_t v127;
  _WORD v128[64];
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  __int16 v133;
  __int128 *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  __int16 v138;
  uint64_t v139;

  v7 = a3;
  v8 = (llvm::ConstantInt ***)a2;
  v139 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 81)
    {
      v9 = *(_DWORD ***)(a2 - 64);
      if (v9)
      {
        v10 = *(_QWORD *)(a2 - 32);
        if (v10)
        {
          if (*(_BYTE *)(v10 + 16) == 16)
          {
            if (a3)
            {
              if (*(_BYTE *)(a3 + 16) == 81 && v9 == *(_DWORD ***)(a3 - 64))
              {
                v103 = *(_QWORD *)(a3 - 32);
                if (v103)
                {
                  if (*(_BYTE *)(v103 + 16) == 16)
                  {
                    v104 = *(_WORD *)(a3 + 18) & 0x3F;
                    llvm::ConstantRange::makeExactICmpRegion(&v134, *(_WORD *)(a2 + 18) & 0x3F, v10 + 24);
                    llvm::ConstantRange::makeExactICmpRegion(&v124, v104, v103 + 24);
                    llvm::ConstantRange::exactIntersectWith((llvm::ConstantRange *)&v134, (const llvm::ConstantRange *)&v124, (uint64_t)&v129);
                    if ((_BYTE)v133)
                    {
                      v123 = 1;
                      v122 = 0;
                      v121 = 0;
                      if (llvm::ConstantRange::getEquivalentICmp((uint64_t)&v129, &v121, &v122))
                      {
                        if (a4)
                        {
                          v106 = v8;
                          v107 = (uint64_t)a4;
                          v108 = llvm::ConstantInt::get(**v106, (llvm::LLVMContext *)&v122, v105);
                          v109 = operator new(0x80uLL);
                          v110 = (uint64_t)(v109 + 16);
                          v109[21] = v109[21] & 0x38000000 | 2;
                          *(_QWORD *)v109 = 0;
                          *((_QWORD *)v109 + 1) = 0;
                          *((_QWORD *)v109 + 2) = 0;
                          *((_QWORD *)v109 + 3) = v109 + 16;
                          *((_QWORD *)v109 + 4) = 0;
                          *((_QWORD *)v109 + 5) = 0;
                          *((_QWORD *)v109 + 6) = 0;
                          *((_QWORD *)v109 + 7) = v109 + 16;
                          v111 = a5;
                          v112 = v121;
                          v126 = "wide.chk";
                          v128[8] = 259;
                          sub_1C4774CC4(*v9);
                          llvm::CmpInst::CmpInst(v110, v113, 53, v112, (uint64_t)v9, (uint64_t)v108, (uint64_t)&v126, v107, 0);
                          *v111 = v110;
                        }
                        if (v123 >= 0x41 && v122)
                          MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
                        if ((_BYTE)v133)
                        {
                          if (v132 >= 0x41 && v131)
                            MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
                          if (v130 >= 0x41 && v129)
                            MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
                        }
                        if (DWORD2(v125) >= 0x41 && (_QWORD)v125)
                          MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
                        if (DWORD2(v124) >= 0x41 && (_QWORD)v124)
                          MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
                        if (v137 >= 0x41 && v136)
                          MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
                        if (v135 >= 0x41 && v134)
                          MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
                        return 1;
                      }
                      if (v123 >= 0x41 && v122)
                        MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
                      if ((_BYTE)v133)
                      {
                        if (v132 >= 0x41 && v131)
                          MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
                        if (v130 >= 0x41 && v129)
                          MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
                      }
                    }
                    if (DWORD2(v125) >= 0x41 && (_QWORD)v125)
                      MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
                    if (DWORD2(v124) >= 0x41 && (_QWORD)v124)
                      MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
                    if (v137 >= 0x41 && v136)
                      MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
                    if (v135 >= 0x41 && v134)
                      MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v129 = (char *)&v131;
  v130 = 0x400000000;
  v126 = v128;
  v127 = 0x400000000;
  if (!sub_1C5B02B90((uint64_t)v8, (uint64_t)&v129) || !sub_1C5B02B90(v7, (uint64_t)&v129))
  {
    v96 = 1;
    goto LABEL_126;
  }
  v114 = v7;
  v115 = v8;
  v116 = v130;
  if ((_DWORD)v130)
  {
    v11 = v130;
    v117 = a5;
    while (1)
    {
      v12 = v129;
      v13 = *(_QWORD *)v129;
      v14 = *((_QWORD *)v129 + 2);
      v134 = (__int128 *)&v136;
      v135 = 0x300000000;
      v15 = 32 * v11;
      do
      {
        if (*(_QWORD *)v12 == v13 && *((_QWORD *)v12 + 2) == v14)
          sub_1C47E9C18((uint64_t)&v134, (unint64_t)v12);
        v12 += 32;
        v15 -= 32;
      }
      while (v15);
      v16 = v129;
      if ((_DWORD)v130)
      {
        v17 = 0;
        v18 = 32 * v130 - 32;
        while (1)
        {
          if (*(_QWORD *)&v129[v17] == v13)
          {
            v19 = &v129[v17];
            if (*(_QWORD *)&v129[v17 + 16] == v14)
              break;
          }
          v17 += 32;
          v18 -= 32;
          if (32 * v130 == v17)
          {
            v19 = &v129[32 * v130];
            goto LABEL_32;
          }
        }
        if (32 * v130 - 32 != v17)
        {
          v20 = v19 + 32;
          do
          {
            if (*(_QWORD *)v20 != v13 || *((_QWORD *)v20 + 2) != v14)
            {
              v21 = v20[1];
              *(_OWORD *)v19 = *v20;
              *((_OWORD *)v19 + 1) = v21;
              v19 += 32;
            }
            v20 += 2;
            v18 -= 32;
          }
          while (v18);
          v16 = v129;
        }
      }
      else
      {
        v19 = v129;
      }
LABEL_32:
      LODWORD(v130) = (unint64_t)(v19 - v16) >> 5;
      v22 = v135;
      if (v135 <= 2)
      {
        v23 = v134;
        v24 = v127;
        v25 = v127 + (unint64_t)v135;
        if (v25 > HIDWORD(v127))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v128, v25, 32);
          v24 = v127;
        }
        if ((_DWORD)v22)
        {
          memcpy((char *)v126 + 32 * v24, v23, 32 * v22);
          v24 = v127;
        }
        LODWORD(v127) = v24 + v22;
        v26 = 2;
        goto LABEL_101;
      }
      sub_1C5B03290((uint64_t)v134, &v134[2 * v135], 126 - 2 * __clz(v135), 1);
      v27 = *((_QWORD *)v134 + 1);
      v28 = *((_QWORD *)&v134[2 * v135 - 1] - 1);
      v29 = *(unsigned int *)(v28 + 32);
      if (v29 >= 0x41)
        break;
      v31 = *(_QWORD *)(v27 + 24);
      v30 = (unint64_t **)(v27 + 24);
      v32 = *(_QWORD *)(v28 + 24) - v31;
      v33 = (v29 - 1) & 0x3F;
      v34 = 0xFFFFFFFFFFFFFFFFLL >> (v33 ^ 0x3Fu);
      if (!(_DWORD)v29)
        v34 = 0;
      v26 = 1;
      if ((v34 & v32) <= 1 << v33)
        goto LABEL_58;
LABEL_101:
      if (v134 != (__int128 *)&v136)
        free(v134);
      if ((v26 | 2) != 2)
        goto LABEL_116;
      v11 = v130;
      if (!(_DWORD)v130)
        goto LABEL_115;
    }
    v35 = (char *)operator new[]();
    memcpy(v35, *(const void **)(v28 + 24), ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
    v36 = 0;
    v37 = 0;
    v39 = *(_QWORD *)(v27 + 24);
    v30 = (unint64_t **)(v27 + 24);
    v38 = v39;
    v40 = (unint64_t)(v29 + 63) >> 6;
    v41 = 8 * v40;
    do
    {
      v42 = *(_QWORD *)&v35[v36];
      v43 = *(_QWORD *)(v38 + v36);
      v44 = v42 - v43;
      v45 = v42 < v43;
      v46 = v42 + ~v43;
      v47 = v46 >= v42;
      if (v37)
      {
        v37 = v47;
      }
      else
      {
        v46 = v44;
        v37 = v45;
      }
      *(_QWORD *)&v35[v36] = v46;
      v36 += 8;
    }
    while (v41 != v36);
    *(_QWORD *)&v35[8 * (v40 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
    DWORD2(v124) = v29;
    llvm::APInt::initSlowCase((llvm::APInt *)&v124, 0, 0);
    v48 = DWORD2(v124);
    v49 = (__int128 *)(v124 + 8 * ((v29 - 1) >> 6));
    if (DWORD2(v124) < 0x41)
      v49 = &v124;
    *(_QWORD *)v49 |= 1 << (v29 - 1);
    while (v41)
    {
      v50 = *(_QWORD *)&v35[v41 - 8];
      v51 = *(_QWORD *)(v124 + v41 - 8);
      v41 -= 8;
      if (v50 != v51)
      {
        v52 = v50 > v51;
        goto LABEL_54;
      }
    }
    v52 = 0;
LABEL_54:
    if (v48 >= 0x41 && (_QWORD)v124)
      MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    if (v52)
    {
LABEL_62:
      v26 = 1;
      goto LABEL_101;
    }
LABEL_58:
    v53 = *(unsigned int *)(v28 + 32);
    if (v53 >= 0x41)
    {
      v55 = (char *)operator new[]();
      memcpy(v55, *(const void **)(v28 + 24), ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8);
      v56 = 0;
      v57 = *v30;
      v58 = (unint64_t)(v53 + 63) >> 6;
      v59 = (unint64_t *)v55;
      v60 = v58;
      do
      {
        v61 = *v57++;
        v62 = *v59 - v61;
        v63 = *v59 < v61;
        v64 = *v59 + ~v61;
        if (v56)
        {
          v56 = v64 >= *v59;
        }
        else
        {
          v64 = v62;
          v56 = v63;
        }
        *v59++ = v64;
        --v60;
      }
      while (v60);
      v65 = 0;
      *(_QWORD *)&v55[8 * (v58 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      do
      {
        if (v58-- < 1)
          break;
        v67 = *(_QWORD *)&v55[8 * v58];
        v65 += __clz(v67);
      }
      while (!v67);
      v68 = v53 | 0xFFFFFFC0;
      if ((v53 & 0x3F) == 0)
        v68 = 0;
      if (v65 + v68 == (_DWORD)v53)
      {
        v26 = 1;
LABEL_98:
        if (v53 >= 0x41 && v55)
          MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
        goto LABEL_101;
      }
    }
    else
    {
      if ((_DWORD)v53)
        v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      else
        v54 = 0;
      v55 = (char *)(v54 & (*(_QWORD *)(v28 + 24) - (_QWORD)*v30));
      if (!v55)
        goto LABEL_62;
    }
    v118 = v53;
    v69 = v134;
    v70 = &v134[2 * v135];
    v119 = v70;
    while (v69 + 2 != v70)
    {
      v71 = *(unsigned int *)(v28 + 32);
      if (v71 >= 0x41)
      {
        v74 = (char *)operator new[]();
        memcpy(v74, *(const void **)(v28 + 24), ((unint64_t)(v71 + 63) >> 3) & 0x3FFFFFF8);
        v75 = 0;
        v76 = 0;
        v77 = *(_QWORD *)(*((_QWORD *)v69 + 5) + 24);
        v78 = (unint64_t)(v71 + 63) >> 6;
        v79 = 8 * v78;
        do
        {
          v80 = *(_QWORD *)&v74[v75];
          v81 = *(_QWORD *)(v77 + v75);
          v82 = v80 - v81;
          v83 = v80 < v81;
          v84 = v80 + ~v81;
          v85 = v84 >= v80;
          if (v76)
          {
            v76 = v85;
          }
          else
          {
            v84 = v82;
            v76 = v83;
          }
          *(_QWORD *)&v74[v75] = v84;
          v75 += 8;
        }
        while (v79 != v75);
        *(_QWORD *)&v74[8 * (v78 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
        do
        {
          if (!v79)
          {
            v73 = 0;
            goto LABEL_93;
          }
          v86 = *(_QWORD *)&v74[v79 - 8];
          v87 = *(_QWORD *)&v55[v79 - 8];
          v79 -= 8;
        }
        while (v86 == v87);
        if (v86 > v87)
          v73 = 1;
        else
          v73 = -1;
LABEL_93:
        MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
        v70 = v119;
      }
      else
      {
        v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
        if (!(_DWORD)v71)
          v72 = 0;
        if ((v72 & (*(_QWORD *)(v28 + 24) - *(_QWORD *)(*((_QWORD *)v69 + 5) + 24))) >= (unint64_t)v55)
        {
LABEL_97:
          v26 = 1;
          a5 = v117;
          LODWORD(v53) = v118;
          goto LABEL_98;
        }
        v73 = -1;
      }
      v69 += 2;
      if ((v73 & 0x80000000) == 0)
        goto LABEL_97;
    }
    if (v127 >= HIDWORD(v127))
    {
      v94 = v134[1];
      v124 = *v134;
      v125 = v94;
      sub_1C47E9C18((uint64_t)&v126, (unint64_t)&v124);
      v90 = v127;
    }
    else
    {
      v88 = (__int128 *)((char *)v126 + 32 * v127);
      v89 = v134[1];
      *v88 = *v134;
      v88[1] = v89;
      v90 = v127 + 1;
      LODWORD(v127) = v127 + 1;
    }
    a5 = v117;
    LODWORD(v53) = v118;
    v91 = &v134[2 * v135 - 2];
    if (v90 >= HIDWORD(v127))
    {
      v95 = v134[2 * v135 - 1];
      v124 = *v91;
      v125 = v95;
      sub_1C47E9C18((uint64_t)&v126, (unint64_t)&v124);
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v92 = (__int128 *)((char *)v126 + 32 * v90);
      v93 = v134[2 * v135 - 1];
      *v92 = *v91;
      v92[1] = v93;
      LODWORD(v127) = v127 + 1;
    }
    goto LABEL_98;
  }
LABEL_115:
  v97 = v127;
  if (v127 == v116)
  {
LABEL_116:
    v96 = 1;
  }
  else
  {
    v8 = v115;
    if (!a4)
    {
      v96 = 0;
      goto LABEL_125;
    }
    *a5 = 0;
    if (v97)
    {
      v98 = 32 * v97;
      v99 = (uint64_t *)((char *)v126 + 24);
      do
      {
        sub_1C5B031E0(a1, *v99, a4);
        v100 = *a5;
        v97 = *v99;
        if (*a5)
        {
          v138 = 257;
          v97 = (uint64_t)llvm::BinaryOperator::Create(28, (_QWORD *)v97, v100, (uint64_t)&v134, (uint64_t)a4);
        }
        *a5 = v97;
        v99 += 4;
        v98 -= 32;
      }
      while (v98);
    }
    v134 = (__int128 *)"wide.chk";
    v138 = 259;
    llvm::Value::setName((uint64_t ***)v97, (uint64_t)&v134);
    v96 = 0;
  }
  v8 = v115;
LABEL_125:
  v7 = v114;
LABEL_126:
  if (v126 != v128)
    free(v126);
  if (v129 != (char *)&v131)
    free(v129);
  if (!v96)
    return 1;
  if (!a4)
    return 0;
  sub_1C5B031E0(a1, (uint64_t)v8, a4);
  sub_1C5B031E0(a1, v7, a4);
  v129 = "wide.chk";
  v133 = 259;
  v101 = llvm::BinaryOperator::Create(28, v8, v7, (uint64_t)&v129, (uint64_t)a4);
  result = 0;
  *a5 = (uint64_t)v101;
  return result;
}

unint64_t sub_1C5B02B90(uint64_t a1, uint64_t a2)
{
  llvm::Type *v4;
  int v5;
  unint64_t isKnownNonNegative;
  _QWORD *v7;
  int v8;
  llvm::Constant **v10;
  uint64_t v11;
  const llvm::Value *v12;
  const void **NullValue;
  const llvm::APInt *v14;
  llvm::ConstantInt *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;
  const llvm::APInt *v37;
  uint64_t v38;
  size_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BOOL4 v54;
  llvm::ConstantInt *v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  const void **v67;
  llvm::Constant **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;

  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, a1);
  if (!(_BYTE)v4)
  {
    isKnownNonNegative = 1;
    goto LABEL_18;
  }
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 28)
    {
      v7 = (_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      if (*v7)
      {
        isKnownNonNegative = v7[4];
        if (!isKnownNonNegative)
          goto LABEL_18;
LABEL_12:
        if (((uint64_t (*)(void))sub_1C5B02B90)())
        {
          isKnownNonNegative = sub_1C5B02B90(isKnownNonNegative, a2);
          goto LABEL_18;
        }
      }
    }
LABEL_17:
    isKnownNonNegative = 0;
    goto LABEL_18;
  }
  if (v5 != 81)
  {
    if (v5 == 56 && *(_QWORD *)(a1 - 64))
    {
      isKnownNonNegative = *(_QWORD *)(a1 - 32);
      if (!isKnownNonNegative)
        goto LABEL_18;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  if (*(_BYTE *)(**(_QWORD **)(a1 - 64) + 8) != 13)
    goto LABEL_17;
  v8 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v8 != 36 && v8 != 34)
    goto LABEL_17;
  if (v8 == 34)
    v10 = *(llvm::Constant ***)(a1 - 64);
  else
    v10 = *(llvm::Constant ***)(a1 - 32);
  if (v8 == 34)
    v11 = *(_QWORD *)(a1 - 32);
  else
    v11 = *(_QWORD *)(a1 - 64);
  v12 = (const llvm::Value *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272);
  NullValue = (const void **)llvm::Constant::getNullValue(*v10, v4);
  v66 = v11;
  v67 = NullValue;
  v68 = v10;
  v69 = a1;
  v56 = (uint64_t)v12;
  isKnownNonNegative = llvm::isKnownNonNegative((llvm *)v10, v12, 0, 0, 0, 0, (const llvm::DominatorTree *)1);
  if (!(_DWORD)isKnownNonNegative)
    goto LABEL_18;
  v15 = **(llvm::ConstantInt ***)a1;
  v55 = v15;
  while (1)
  {
    while (1)
    {
      v16 = *(unsigned __int8 *)(v11 + 16);
      if (v16 == 5)
        break;
      if (v16 == 57)
      {
        if (!*(_QWORD *)(v11 - 64))
          goto LABEL_97;
        v24 = *(_QWORD *)(v11 - 32);
        if (!v24 || *(_BYTE *)(v24 + 16) != 16)
          goto LABEL_97;
        v11 = *(_QWORD *)(v11 - 64);
        goto LABEL_67;
      }
      if (v16 != 41)
        goto LABEL_97;
      if (!*(_QWORD *)(v11 - 64))
        goto LABEL_97;
      v17 = *(_QWORD *)(v11 - 32);
      if (!v17 || *(_BYTE *)(v17 + 16) != 16)
        goto LABEL_97;
      v11 = *(_QWORD *)(v11 - 64);
LABEL_44:
      v66 = v11;
      v21 = *((unsigned int *)NullValue + 8);
      if (v21 >= 0x41)
      {
        v23 = (void *)operator new[]();
        memcpy(v23, NullValue[3], ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
        v25 = 0;
        v26 = *(uint64_t **)(v17 + 24);
        v27 = (unint64_t)(v21 + 63) >> 6;
        v28 = (unint64_t *)v23;
        v29 = v27;
        do
        {
          v30 = *v26++;
          v31 = v30 + *v28;
          v32 = v31 + 1 <= *v28;
          if (v25)
          {
            ++v31;
            v25 = v32;
          }
          else
          {
            v25 = v31 < *v28;
          }
          *v28++ = v31;
          --v29;
        }
        while (v29);
        *((_QWORD *)v23 + (v27 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
        v15 = v55;
      }
      else
      {
        v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
        if (!(_DWORD)v21)
          v22 = 0;
        v23 = (void *)(v22 & ((unint64_t)NullValue[3] + *(_QWORD *)(v17 + 24)));
      }
      LODWORD(v71) = v21;
      v70 = (uint64_t)v23;
      NullValue = (const void **)llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v70, v14);
      v67 = NullValue;
      if (v71 >= 0x41)
      {
        v33 = v70;
        if (v70)
          goto LABEL_60;
      }
    }
    v18 = *(unsigned __int16 *)(v11 + 18);
    if (v18 != 29)
    {
      if (v18 != 13)
        goto LABEL_97;
      v19 = (uint64_t *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
      v11 = *v19;
      if (!*v19)
        goto LABEL_97;
      v17 = v19[4];
      if (!v17 || *(_BYTE *)(v17 + 16) != 16)
        goto LABEL_97;
      goto LABEL_44;
    }
    v34 = (uint64_t *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
    v11 = *v34;
    if (!*v34)
      goto LABEL_97;
    v24 = v34[4];
    if (!v24 || *(_BYTE *)(v24 + 16) != 16)
      goto LABEL_97;
LABEL_67:
    if (*(unsigned __int8 *)(v11 + 16) < 0x1Cu || (v36 = v11, !*(_QWORD *)(v11 + 40)))
      v36 = 0;
    v70 = v56;
    v71 = 0;
    v72 = v36;
    v73 = 0;
    v74 = 0;
    v75 = 1;
    sub_1C4F83784(v11, 0, &v70, &v62);
    v38 = *(unsigned int *)(v24 + 32);
    if (v38 < 0x41)
    {
      if ((*(_QWORD *)(v24 + 24) & ~v62) != 0)
        break;
      goto LABEL_76;
    }
    v39 = ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8;
    v40 = (char *)operator new[]();
    memcpy(v40, *(const void **)(v24 + 24), v39);
    v41 = 0;
    v42 = v62;
    do
    {
      *(_QWORD *)&v40[v41] &= *(_QWORD *)(v42 + v41);
      v41 += 8;
    }
    while (v39 != v41);
    v43 = memcmp(v40, *(const void **)(v24 + 24), v39);
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
    if (v43)
      break;
LABEL_76:
    v66 = v11;
    v44 = *((unsigned int *)NullValue + 8);
    if (v44 >= 0x41)
    {
      v46 = (void *)operator new[]();
      memcpy(v46, NullValue[3], ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8);
      v47 = 0;
      v48 = *(uint64_t **)(v24 + 24);
      v49 = (unint64_t)(v44 + 63) >> 6;
      v50 = (unint64_t *)v46;
      v51 = v49;
      do
      {
        v52 = *v48++;
        v53 = v52 + *v50;
        v54 = v53 + 1 <= *v50;
        if (v47)
        {
          ++v53;
          v47 = v54;
        }
        else
        {
          v47 = v53 < *v50;
        }
        *v50++ = v53;
        --v51;
      }
      while (v51);
      *((_QWORD *)v46 + (v49 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
      v15 = v55;
    }
    else
    {
      v45 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
      if (!(_DWORD)v44)
        v45 = 0;
      v46 = (void *)(v45 & ((unint64_t)NullValue[3] + *(_QWORD *)(v24 + 24)));
    }
    LODWORD(v71) = v44;
    v70 = (uint64_t)v46;
    NullValue = (const void **)llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v70, v37);
    v67 = NullValue;
    if (v71 >= 0x41 && v70)
      MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
    if (v65 >= 0x41 && v64)
      MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
    if (v63 >= 0x41)
    {
      v33 = v62;
      if (v62)
LABEL_60:
        MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    }
  }
  if (v65 >= 0x41 && v64)
    MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
  if (v63 >= 0x41 && v62)
    MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
LABEL_97:
  sub_1C47E9C18(a2, (unint64_t)&v66);
LABEL_18:
  if (v58 != v57)
    free(v58);
  return isKnownNonNegative;
}

void sub_1C5B031E0(llvm::DominatorTree **a1, uint64_t a2, llvm::Instruction *a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu && !llvm::DominatorTree::dominates(*a1, (const llvm::Value *)a2, a3))
  {
    v6 = *(_DWORD *)(a2 + 20);
    if ((v6 & 0x40000000) != 0)
    {
      v8 = *(uint64_t **)(a2 - 8);
      v7 = v6 & 0x7FFFFFF;
      if (!v7)
      {
LABEL_11:
        llvm::Instruction::moveBefore((llvm::Instruction *)a2, a3);
        return;
      }
    }
    else
    {
      v7 = v6 & 0x7FFFFFF;
      v8 = (uint64_t *)(a2 - 32 * v7);
      if (!v7)
        goto LABEL_11;
    }
    v9 = 32 * v7;
    do
    {
      v10 = *v8;
      v8 += 4;
      sub_1C5B031E0(a1, v10, a3);
      v9 -= 32;
    }
    while (v9);
    goto LABEL_11;
  }
}

uint64_t sub_1C5B03290(uint64_t result, __int128 *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int128 v93;
  BOOL v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *i;
  _QWORD *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  __int128 v175;
  __int128 *v176;
  __int128 *v177;
  __int128 *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  __int128 v203;
  __int128 *v204;
  BOOL v206;
  _OWORD *v207;
  _OWORD *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  unint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int64_t v241;
  int64_t v242;
  int64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  _OWORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  __int128 v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  _OWORD *v337;
  __int128 v338;
  _OWORD *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  _QWORD *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  _QWORD *v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _OWORD *v373;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned int v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  unsigned int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v171 = *((_QWORD *)a2 - 3);
        v172 = *(_QWORD *)(v8 + 8);
        v173 = (_QWORD *)(v172 + 24);
        v174 = *(unsigned int *)(v171 + 32);
        if (v174 > 0x40)
        {
          v400 = *(_QWORD *)(v171 + 24);
          v401 = *(_QWORD *)(v400 + 8 * ((v174 - 1) >> 6)) & (1 << (v174 - 1));
          v402 = *(_DWORD *)(v172 + 32);
          v403 = v402 - 1;
          v404 = *(_QWORD *)(v172 + 24);
          if (v402 >= 0x41)
            v173 = (_QWORD *)(v404 + 8 * (v403 >> 6));
          if ((v401 != 0) == ((*v173 >> v403) & 1))
          {
            v425 = v174 + 63;
            v426 = v404 - 8;
            v427 = (v425 >> 3) & 0x3FFFFFF8;
            v428 = v400 - 8;
            do
            {
              if (!v427)
                return result;
              v429 = *(_QWORD *)(v428 + v427);
              v430 = *(_QWORD *)(v426 + v427);
              v427 -= 8;
            }
            while (v429 == v430);
            if (v429 > v430)
              return result;
          }
          else if (!v401)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v171 + 24) << -(char)v174) >> -(char)v174 >= (uint64_t)(*v173 << -(char)v174) >> -(char)v174)
        {
          return result;
        }
        v460 = *(_OWORD *)v8;
        v469 = *(_OWORD *)(v8 + 16);
        v175 = *(a2 - 1);
        *(_OWORD *)v8 = *(a2 - 2);
        *(_OWORD *)(v8 + 16) = v175;
        *(a2 - 2) = v460;
        *(a2 - 1) = v469;
        return result;
      case 3:
        return (uint64_t)sub_1C5B04DDC((__int128 *)v8, (__int128 *)(v8 + 32), a2 - 2);
      case 4:
        return (uint64_t)sub_1C5B05854(v8, v8 + 32, v8 + 64, (uint64_t)(a2 - 2));
      case 5:
        v176 = (__int128 *)(v8 + 32);
        v177 = (__int128 *)(v8 + 64);
        v178 = (__int128 *)(v8 + 96);
        result = (uint64_t)sub_1C5B05854(v8, v8 + 32, v8 + 64, v8 + 96);
        v179 = *((_QWORD *)a2 - 3);
        v180 = *(_QWORD *)(v8 + 104);
        v181 = (_QWORD *)(v180 + 24);
        v182 = *(unsigned int *)(v179 + 32);
        if (v182 > 0x40)
        {
          v405 = *(_QWORD *)(v179 + 24);
          v406 = *(_QWORD *)(v405 + 8 * ((v182 - 1) >> 6)) & (1 << (v182 - 1));
          v407 = *(_DWORD *)(v180 + 32);
          v408 = v407 - 1;
          v409 = *(_QWORD *)(v180 + 24);
          if (v407 >= 0x41)
            v181 = (_QWORD *)(v409 + 8 * (v408 >> 6));
          if ((v406 != 0) == ((*v181 >> v408) & 1))
          {
            v431 = v182 + 63;
            v432 = v409 - 8;
            v433 = (v431 >> 3) & 0x3FFFFFF8;
            v434 = v405 - 8;
            do
            {
              if (!v433)
                return result;
              v435 = *(_QWORD *)(v434 + v433);
              v436 = *(_QWORD *)(v432 + v433);
              v433 -= 8;
            }
            while (v435 == v436);
            if (v435 > v436)
              return result;
          }
          else if (!v406)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v179 + 24) << -(char)v182) >> -(char)v182 >= (uint64_t)(*v181 << -(char)v182) >> -(char)v182)
        {
          return result;
        }
        v183 = *v178;
        v470 = *(_OWORD *)(v8 + 112);
        v184 = *(a2 - 1);
        *v178 = *(a2 - 2);
        *(_OWORD *)(v8 + 112) = v184;
        *(a2 - 2) = v183;
        *(a2 - 1) = v470;
        v185 = *(_QWORD *)(v8 + 104);
        v186 = *(_QWORD *)(v8 + 72);
        v187 = (_QWORD *)(v186 + 24);
        v188 = *(unsigned int *)(v185 + 32);
        if (v188 > 0x40)
        {
          v410 = *(_QWORD *)(v185 + 24);
          v411 = *(_QWORD *)(v410 + 8 * ((v188 - 1) >> 6)) & (1 << (v188 - 1));
          v412 = *(_DWORD *)(v186 + 32);
          v413 = v412 - 1;
          v414 = *(_QWORD *)(v186 + 24);
          if (v412 >= 0x41)
            v187 = (_QWORD *)(v414 + 8 * (v413 >> 6));
          if ((v411 != 0) == ((*v187 >> v413) & 1))
          {
            v437 = v188 + 63;
            v438 = v414 - 8;
            v439 = (v437 >> 3) & 0x3FFFFFF8;
            v440 = v410 - 8;
            do
            {
              if (!v439)
                return result;
              v441 = *(_QWORD *)(v440 + v439);
              v442 = *(_QWORD *)(v438 + v439);
              v439 -= 8;
            }
            while (v441 == v442);
            if (v441 > v442)
              return result;
          }
          else if (!v411)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v185 + 24) << -(char)v188) >> -(char)v188 >= (uint64_t)(*v187 << -(char)v188) >> -(char)v188)
        {
          return result;
        }
        v190 = *v177;
        v189 = *(_OWORD *)(v8 + 80);
        v191 = *(_OWORD *)(v8 + 112);
        *v177 = *v178;
        *(_OWORD *)(v8 + 80) = v191;
        *v178 = v190;
        *(_OWORD *)(v8 + 112) = v189;
        v192 = *(_QWORD *)(v8 + 72);
        v193 = *(_QWORD *)(v8 + 40);
        v194 = (_QWORD *)(v193 + 24);
        v195 = *(unsigned int *)(v192 + 32);
        if (v195 > 0x40)
        {
          v415 = *(_QWORD *)(v192 + 24);
          v416 = *(_QWORD *)(v415 + 8 * ((v195 - 1) >> 6)) & (1 << (v195 - 1));
          v417 = *(_DWORD *)(v193 + 32);
          v418 = v417 - 1;
          v419 = *(_QWORD *)(v193 + 24);
          if (v417 >= 0x41)
            v194 = (_QWORD *)(v419 + 8 * (v418 >> 6));
          if ((v416 != 0) == ((*v194 >> v418) & 1))
          {
            v443 = v195 + 63;
            v444 = v419 - 8;
            v445 = (v443 >> 3) & 0x3FFFFFF8;
            v446 = v415 - 8;
            do
            {
              if (!v445)
                return result;
              v447 = *(_QWORD *)(v446 + v445);
              v448 = *(_QWORD *)(v444 + v445);
              v445 -= 8;
            }
            while (v447 == v448);
            if (v447 > v448)
              return result;
          }
          else if (!v416)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v192 + 24) << -(char)v195) >> -(char)v195 >= (uint64_t)(*v194 << -(char)v195) >> -(char)v195)
        {
          return result;
        }
        v197 = *v176;
        v196 = *(_OWORD *)(v8 + 48);
        v198 = *(_OWORD *)(v8 + 80);
        *v176 = *v177;
        *(_OWORD *)(v8 + 48) = v198;
        *v177 = v197;
        *(_OWORD *)(v8 + 80) = v196;
        v199 = *(_QWORD *)(v8 + 40);
        v200 = *(_QWORD *)(v8 + 8);
        v201 = (_QWORD *)(v200 + 24);
        v202 = *(unsigned int *)(v199 + 32);
        if (v202 > 0x40)
        {
          v420 = *(_QWORD *)(v199 + 24);
          v421 = *(_QWORD *)(v420 + 8 * ((v202 - 1) >> 6)) & (1 << (v202 - 1));
          v422 = *(_DWORD *)(v200 + 32);
          v423 = v422 - 1;
          v424 = *(_QWORD *)(v200 + 24);
          if (v422 >= 0x41)
            v201 = (_QWORD *)(v424 + 8 * (v423 >> 6));
          if ((v421 != 0) == ((*v201 >> v423) & 1))
          {
            v449 = v202 + 63;
            v450 = v424 - 8;
            v451 = (v449 >> 3) & 0x3FFFFFF8;
            v452 = v420 - 8;
            do
            {
              if (!v451)
                return result;
              v453 = *(_QWORD *)(v452 + v451);
              v454 = *(_QWORD *)(v450 + v451);
              v451 -= 8;
            }
            while (v453 == v454);
            if (v453 > v454)
              return result;
          }
          else if (!v421)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v199 + 24) << -(char)v202) >> -(char)v202 >= (uint64_t)(*v201 << -(char)v202) >> -(char)v202)
        {
          return result;
        }
        v461 = *(_OWORD *)v8;
        v471 = *(_OWORD *)(v8 + 16);
        v203 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)v8 = *v176;
        *(_OWORD *)(v8 + 16) = v203;
        *v176 = v461;
        *(_OWORD *)(v8 + 48) = v471;
        return result;
      default:
        if (v9 <= 767)
        {
          v204 = (__int128 *)(v8 + 32);
          v206 = (__int128 *)v8 == a2 || v204 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v206)
            {
              v207 = (_OWORD *)v8;
              while (1)
              {
                v208 = v207;
                v207 = v204;
                v209 = *((_QWORD *)v208 + 5);
                v210 = *((_QWORD *)v208 + 1);
                v211 = (_QWORD *)(v210 + 24);
                v212 = *(unsigned int *)(v209 + 32);
                if (v212 <= 0x40)
                  break;
                v231 = *(_QWORD *)(v209 + 24);
                v232 = *(_QWORD *)(v231 + 8 * ((v212 - 1) >> 6)) & (1 << (v212 - 1));
                result = *(unsigned int *)(v210 + 32);
                v233 = result - 1;
                v234 = *(_QWORD *)(v210 + 24);
                if (result >= 0x41)
                  v211 = (_QWORD *)(v234 + 8 * (v233 >> 6));
                if ((v232 != 0) != ((*v211 >> v233) & 1))
                {
                  if (!v232)
                    goto LABEL_246;
                  goto LABEL_230;
                }
                v235 = v212 + 63;
                v236 = v234 - 8;
                v237 = (v235 >> 3) & 0x3FFFFFF8;
                v238 = v231 - 8;
                do
                {
                  if (!v237)
                    goto LABEL_246;
                  v239 = *(_QWORD *)(v238 + v237);
                  v240 = *(_QWORD *)(v236 + v237);
                  v237 -= 8;
                }
                while (v239 == v240);
                if (v239 <= v240)
                  goto LABEL_230;
LABEL_246:
                v204 = v207 + 2;
                if (v207 + 2 == a2)
                  return result;
              }
              if ((uint64_t)(*(_QWORD *)(v209 + 24) << -(char)v212) >> -(char)v212 >= (uint64_t)(*v211 << -(char)v212) >> -(char)v212)
                goto LABEL_246;
LABEL_230:
              v213 = *((_QWORD *)v208 + 4);
              v462 = v208[3];
              v214 = v208[1];
              *v207 = *v208;
              v207[1] = v214;
              v215 = v8;
              if (v208 == (_OWORD *)v8)
                goto LABEL_245;
              while (1)
              {
                v216 = *((_QWORD *)v208 - 3);
                v217 = (_QWORD *)(v216 + 24);
                v218 = *(unsigned int *)(v209 + 32);
                if (v218 > 0x40)
                {
                  v220 = *(_QWORD *)(v209 + 24);
                  v221 = *(_QWORD *)(v220 + 8 * ((v218 - 1) >> 6)) & (1 << (v218 - 1));
                  result = v221 != 0;
                  v222 = *(_DWORD *)(v216 + 32);
                  v223 = v222 - 1;
                  v224 = *(_QWORD *)(v216 + 24);
                  if (v222 >= 0x41)
                    v217 = (_QWORD *)(v224 + 8 * (v223 >> 6));
                  if ((_DWORD)result == ((*v217 >> v223) & 1))
                  {
                    v225 = v218 + 63;
                    v226 = v224 - 8;
                    v227 = (v225 >> 3) & 0x3FFFFFF8;
                    v228 = v220 - 8;
                    while (v227)
                    {
                      v229 = *(_QWORD *)(v228 + v227);
                      v230 = *(_QWORD *)(v226 + v227);
                      v227 -= 8;
                      if (v229 != v230)
                      {
                        if (v229 <= v230)
                          goto LABEL_233;
                        break;
                      }
                    }
LABEL_244:
                    v215 = (unint64_t)v208;
LABEL_245:
                    *(_QWORD *)v215 = v213;
                    *(_QWORD *)(v215 + 8) = v209;
                    *(_OWORD *)(v215 + 16) = v462;
                    goto LABEL_246;
                  }
                  if (!v221)
                    goto LABEL_244;
                }
                else if ((uint64_t)(*(_QWORD *)(v209 + 24) << -(char)v218) >> -(char)v218 >= (uint64_t)(*v217 << -(char)v218) >> -(char)v218)
                {
                  goto LABEL_244;
                }
LABEL_233:
                v219 = *(v208 - 1);
                *v208 = *(v208 - 2);
                v208[1] = v219;
                v208 -= 2;
                if (v208 == (_OWORD *)v8)
                {
                  v215 = v8;
                  goto LABEL_245;
                }
              }
            }
            return result;
          }
          if (v206)
            return result;
          while (1)
          {
            v366 = v7;
            v7 = (uint64_t)v204;
            v367 = *(_QWORD *)(v366 + 40);
            v368 = *(_QWORD *)(v366 + 8);
            v369 = (_QWORD *)(v368 + 24);
            v370 = *(unsigned int *)(v367 + 32);
            if (v370 > 0x40)
            {
              v390 = *(_QWORD *)(v367 + 24);
              v391 = *(_QWORD *)(v390 + 8 * ((v370 - 1) >> 6)) & (1 << (v370 - 1));
              v392 = *(_DWORD *)(v368 + 32);
              result = v392 - 1;
              v393 = *(_QWORD *)(v368 + 24);
              if (v392 >= 0x41)
                v369 = (_QWORD *)(v393 + 8 * (result >> 6));
              if ((v391 != 0) == ((*v369 >> (v392 - 1)) & 1))
              {
                v394 = v370 + 63;
                v395 = v393 - 8;
                v396 = (v394 >> 3) & 0x3FFFFFF8;
                v397 = v390 - 8;
                while (v396)
                {
                  v398 = *(_QWORD *)(v397 + v396);
                  v399 = *(_QWORD *)(v395 + v396);
                  v396 -= 8;
                  if (v398 != v399)
                  {
                    if (v398 <= v399)
                      goto LABEL_380;
                    goto LABEL_394;
                  }
                }
                goto LABEL_394;
              }
              if (v391)
              {
LABEL_380:
                v371 = *(_QWORD *)v7;
                v465 = *(_OWORD *)(v366 + 48);
                v372 = v7;
                while (1)
                {
LABEL_381:
                  while (1)
                  {
                    v373 = (_OWORD *)v372;
                    v372 = v366;
                    v374 = *(_OWORD *)v366;
                    v375 = *(_OWORD *)(v366 + 16);
                    v366 -= 32;
                    *v373 = v374;
                    v373[1] = v375;
                    v376 = *(_QWORD *)(v372 - 24);
                    v377 = (_QWORD *)(v376 + 24);
                    v378 = *(unsigned int *)(v367 + 32);
                    if (v378 > 0x40)
                      break;
                    if ((uint64_t)(*(_QWORD *)(v367 + 24) << -(char)v378) >> -(char)v378 >= (uint64_t)(*v377 << -(char)v378) >> -(char)v378)
                      goto LABEL_393;
                  }
                  v379 = *(_QWORD *)(v367 + 24);
                  v380 = *(_QWORD *)(v379 + 8 * ((v378 - 1) >> 6)) & (1 << (v378 - 1));
                  result = v380 != 0;
                  v381 = *(_DWORD *)(v376 + 32);
                  v382 = v381 - 1;
                  v383 = *(_QWORD *)(v376 + 24);
                  if (v381 >= 0x41)
                    v377 = (_QWORD *)(v383 + 8 * (v382 >> 6));
                  if ((_DWORD)result == ((*v377 >> v382) & 1))
                    break;
                  if (!v380)
                    goto LABEL_393;
                }
                v384 = v378 + 63;
                v385 = v383 - 8;
                v386 = (v384 >> 3) & 0x3FFFFFF8;
                v387 = v379 - 8;
                while (v386)
                {
                  v388 = *(_QWORD *)(v387 + v386);
                  v389 = *(_QWORD *)(v385 + v386);
                  v386 -= 8;
                  if (v388 != v389)
                  {
                    if (v388 <= v389)
                      goto LABEL_381;
                    break;
                  }
                }
LABEL_393:
                *(_QWORD *)v372 = v371;
                *(_QWORD *)(v372 + 8) = v367;
                *(_OWORD *)(v372 + 16) = v465;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v367 + 24) << -(char)v370) >> -(char)v370 < (uint64_t)(*v369 << -(char)v370) >> -(char)v370)
            {
              goto LABEL_380;
            }
LABEL_394:
            v204 = (__int128 *)(v7 + 32);
            if ((__int128 *)(v7 + 32) == a2)
              return result;
          }
        }
        if (!a3)
        {
          if ((__int128 *)v8 == a2)
            return result;
          v241 = (unint64_t)(v10 - 2) >> 1;
          v242 = v241;
          while (1)
          {
            v243 = v242;
            if (v241 < v242)
              goto LABEL_299;
            v244 = (2 * v242) | 1;
            v245 = v8 + 32 * v244;
            if (2 * v243 + 2 >= v10)
              goto LABEL_265;
            v246 = *(_QWORD *)(v245 + 8);
            v247 = *(_QWORD *)(v245 + 40);
            v248 = (_QWORD *)(v247 + 24);
            v249 = *(unsigned int *)(v246 + 32);
            if (v249 > 0x40)
              break;
            if ((uint64_t)(*(_QWORD *)(v246 + 24) << -(char)v249) >> -(char)v249 < (uint64_t)(*v248 << -(char)v249) >> -(char)v249)
              goto LABEL_264;
LABEL_265:
            v250 = *(_QWORD *)(v245 + 8);
            v251 = *(_QWORD *)(v8 + 32 * v243 + 8);
            v252 = (_QWORD *)(v251 + 24);
            v253 = *(unsigned int *)(v250 + 32);
            if (v253 > 0x40)
            {
              v289 = *(_QWORD *)(v250 + 24);
              result = *(_QWORD *)(v289 + 8 * ((v253 - 1) >> 6)) & (1 << (v253 - 1));
              v290 = *(_DWORD *)(v251 + 32);
              v291 = v290 - 1;
              v292 = *(_QWORD *)(v251 + 24);
              if (v290 >= 0x41)
                v293 = (_QWORD *)(v292 + 8 * (v291 >> 6));
              else
                v293 = (_QWORD *)(v251 + 24);
              if ((result != 0) == ((*v293 >> v291) & 1))
              {
                v299 = v253 + 63;
                v300 = v292 - 8;
                result = (v299 >> 3) & 0x3FFFFFF8;
                v301 = v289 - 8;
                do
                {
                  if (!result)
                    goto LABEL_267;
                  v302 = *(_QWORD *)(v301 + result);
                  v303 = *(_QWORD *)(v300 + result);
                  result -= 8;
                }
                while (v302 == v303);
                if (v302 <= v303)
                  goto LABEL_299;
              }
              else if (result)
              {
                goto LABEL_299;
              }
            }
            else
            {
              v254 = -v253;
              result = *v252 << v254;
              if ((uint64_t)(*(_QWORD *)(v250 + 24) << v254) >> v254 < result >> v254)
                goto LABEL_299;
            }
LABEL_267:
            v255 = v8 + 32 * v243;
            v256 = *(_QWORD *)v255;
            v463 = *(_OWORD *)(v255 + 16);
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_268:
                  v257 = *(_OWORD *)(v245 + 16);
                  *(_OWORD *)v255 = *(_OWORD *)v245;
                  *(_OWORD *)(v255 + 16) = v257;
                  if (v241 < v244)
                    goto LABEL_298;
                  v255 = v245;
                  v258 = 2 * v244;
                  v244 = (2 * v244) | 1;
                  v245 = v8 + 32 * v244;
                  v259 = v258 + 2;
                  if (v259 < v10)
                  {
                    v260 = *(_QWORD *)(v245 + 8);
                    v261 = *(_QWORD *)(v245 + 40);
                    v262 = (_QWORD *)(v261 + 24);
                    v263 = *(unsigned int *)(v260 + 32);
                    if (v263 <= 0x40)
                    {
                      if ((uint64_t)(*(_QWORD *)(v260 + 24) << -(char)v263) >> -(char)v263 >= (uint64_t)(*v262 << -(char)v263) >> -(char)v263)
                        goto LABEL_273;
LABEL_272:
                      v245 += 32;
                      v244 = v259;
                      goto LABEL_273;
                    }
                    v273 = *(_QWORD *)(v260 + 24);
                    v274 = *(_QWORD *)(v273 + 8 * ((v263 - 1) >> 6)) & (1 << (v263 - 1));
                    v275 = *(_DWORD *)(v261 + 32);
                    v276 = v275 - 1;
                    v277 = *(_QWORD *)(v261 + 24);
                    if (v275 >= 0x41)
                      v262 = (_QWORD *)(v277 + 8 * (v276 >> 6));
                    if ((v274 != 0) == ((*v262 >> v276) & 1))
                    {
                      v283 = v263 + 63;
                      v284 = v277 - 8;
                      v285 = (v283 >> 3) & 0x3FFFFFF8;
                      v286 = v273 - 8;
                      do
                      {
                        if (!v285)
                          goto LABEL_273;
                        v287 = *(_QWORD *)(v286 + v285);
                        v288 = *(_QWORD *)(v284 + v285);
                        v285 -= 8;
                      }
                      while (v287 == v288);
                      if (v287 <= v288)
                        goto LABEL_272;
                    }
                    else if (v274)
                    {
                      goto LABEL_272;
                    }
                  }
LABEL_273:
                  v264 = *(_QWORD *)(v245 + 8);
                  result = *(unsigned int *)(v264 + 32);
                  if (result > 0x40)
                    break;
                  v265 = -result;
                  v266 = (uint64_t)(*(_QWORD *)(v264 + 24) << v265) >> v265;
                  result = (uint64_t)(*v252 << v265) >> v265;
                  if (v266 < result)
                    goto LABEL_297;
                }
                v267 = *(_QWORD *)(v264 + 24);
                v268 = *(_QWORD *)(v267 + 8 * ((result - 1) >> 6)) & (1 << (result - 1));
                v269 = *(_DWORD *)(v251 + 32);
                v270 = v269 - 1;
                v271 = *(_QWORD *)(v251 + 24);
                v272 = (_QWORD *)(v269 >= 0x41 ? v271 + 8 * (v270 >> 6) : v251 + 24);
                if ((v268 != 0) == ((*v272 >> v270) & 1))
                  break;
                if (v268)
                  goto LABEL_297;
              }
              v278 = result + 63;
              result = v271 - 8;
              v279 = (v278 >> 3) & 0x3FFFFFF8;
              v280 = v267 - 8;
              do
              {
                if (!v279)
                  goto LABEL_268;
                v281 = *(_QWORD *)(v280 + v279);
                v282 = *(_QWORD *)(result + v279);
                v279 -= 8;
              }
              while (v281 == v282);
            }
            while (v281 > v282);
LABEL_297:
            v245 = v255;
LABEL_298:
            *(_QWORD *)v245 = v256;
            *(_QWORD *)(v245 + 8) = v251;
            *(_OWORD *)(v245 + 16) = v463;
LABEL_299:
            v242 = v243 - 1;
            if (!v243)
            {
LABEL_322:
              v310 = 0;
              v464 = *(_OWORD *)v8;
              v472 = *(_OWORD *)(v8 + 16);
              v311 = v8;
              while (1)
              {
                v312 = (_OWORD *)v311;
                v311 += 32 * (v310 + 1);
                v313 = 2 * v310;
                v310 = (2 * v310) | 1;
                v314 = v313 + 2;
                if (v314 < v10)
                {
                  v315 = *(_QWORD *)(v311 + 8);
                  result = *(_QWORD *)(v311 + 40);
                  v316 = (_QWORD *)(result + 24);
                  v317 = *(unsigned int *)(v315 + 32);
                  if (v317 > 0x40)
                  {
                    v319 = *(_QWORD *)(v315 + 24);
                    v320 = *(_QWORD *)(v319 + 8 * ((v317 - 1) >> 6)) & (1 << (v317 - 1));
                    v321 = *(_DWORD *)(result + 32);
                    v322 = v321 - 1;
                    result = *(_QWORD *)(result + 24);
                    if (v321 >= 0x41)
                      v316 = (_QWORD *)(result + 8 * (v322 >> 6));
                    if ((v320 != 0) == ((*v316 >> v322) & 1))
                    {
                      v323 = v317 + 63;
                      v324 = result - 8;
                      v325 = (v323 >> 3) & 0x3FFFFFF8;
                      v326 = v319 - 8;
                      while (v325)
                      {
                        result = *(_QWORD *)(v326 + v325);
                        v327 = *(_QWORD *)(v324 + v325);
                        v325 -= 8;
                        if (result != v327)
                        {
                          if (result <= v327)
                            goto LABEL_326;
                          goto LABEL_327;
                        }
                      }
                      goto LABEL_327;
                    }
                    if (v320)
                    {
LABEL_326:
                      v311 += 32;
                      v310 = v314;
                    }
                  }
                  else if ((uint64_t)(*(_QWORD *)(v315 + 24) << -(char)v317) >> -(char)v317 < (uint64_t)(*v316 << -(char)v317) >> -(char)v317)
                  {
                    goto LABEL_326;
                  }
                }
LABEL_327:
                v318 = *(_OWORD *)(v311 + 16);
                *v312 = *(_OWORD *)v311;
                v312[1] = v318;
                if (v310 > (uint64_t)((unint64_t)(v10 - 2) >> 1))
                {
                  a2 -= 2;
                  if ((__int128 *)v311 == a2)
                  {
                    *(_OWORD *)v311 = v464;
                    *(_OWORD *)(v311 + 16) = v472;
                  }
                  else
                  {
                    v328 = a2[1];
                    *(_OWORD *)v311 = *a2;
                    *(_OWORD *)(v311 + 16) = v328;
                    *a2 = v464;
                    a2[1] = v472;
                    v329 = v311 - v8 + 32;
                    if (v329 >= 33)
                    {
                      v330 = ((unint64_t)v329 >> 5) - 2;
                      v331 = v330 >> 1;
                      v332 = *(_QWORD *)(v8 + 32 * (v330 >> 1) + 8);
                      v333 = *(_QWORD *)(v311 + 8);
                      v334 = (_QWORD *)(v333 + 24);
                      v335 = *(unsigned int *)(v332 + 32);
                      if (v335 > 0x40)
                      {
                        v356 = *(_QWORD *)(v332 + 24);
                        v357 = *(_QWORD *)(v356 + 8 * ((v335 - 1) >> 6)) & (1 << (v335
                                                                                                  - 1));
                        v358 = *(_DWORD *)(v333 + 32);
                        v359 = v358 - 1;
                        result = *(_QWORD *)(v333 + 24);
                        if (v358 >= 0x41)
                          v360 = (_QWORD *)(result + 8 * (v359 >> 6));
                        else
                          v360 = (_QWORD *)(v333 + 24);
                        if ((v357 != 0) == ((*v360 >> v359) & 1))
                        {
                          v361 = v335 + 63;
                          v362 = result - 8;
                          v363 = (v361 >> 3) & 0x3FFFFFF8;
                          v364 = v356 - 8;
                          while (v363)
                          {
                            result = *(_QWORD *)(v364 + v363);
                            v365 = *(_QWORD *)(v362 + v363);
                            v363 -= 8;
                            if (result != v365)
                            {
                              if (result <= v365)
                                goto LABEL_343;
                              break;
                            }
                          }
                        }
                        else if (v357)
                        {
LABEL_343:
                          v336 = *(_QWORD *)v311;
                          v457 = *(_OWORD *)(v311 + 16);
                          v337 = (_OWORD *)(v8 + 32 * v331);
                          v338 = v337[1];
                          *(_OWORD *)v311 = *v337;
                          *(_OWORD *)(v311 + 16) = v338;
                          if (v330 >= 2)
                          {
                            while (1)
                            {
                              v340 = v331 - 1;
                              v331 = (v331 - 1) >> 1;
                              v341 = *(_QWORD *)(v8 + 32 * v331 + 8);
                              v342 = *(unsigned int *)(v341 + 32);
                              if (v342 > 0x40)
                              {
                                v345 = *(_QWORD *)(v341 + 24);
                                result = *(_QWORD *)(v345 + 8 * ((v342 - 1) >> 6)) & (1 << (v342 - 1));
                                v346 = *(_DWORD *)(v333 + 32);
                                v347 = v346 - 1;
                                v348 = *(_QWORD *)(v333 + 24);
                                if (v346 >= 0x41)
                                  v349 = (_QWORD *)(v348 + 8 * (v347 >> 6));
                                else
                                  v349 = (_QWORD *)(v333 + 24);
                                if ((result != 0) == ((*v349 >> v347) & 1))
                                {
                                  v350 = v342 + 63;
                                  v351 = v348 - 8;
                                  result = (v350 >> 3) & 0x3FFFFFF8;
                                  v352 = v345 - 8;
                                  while (result)
                                  {
                                    v353 = *(_QWORD *)(v352 + result);
                                    v354 = *(_QWORD *)(v351 + result);
                                    result -= 8;
                                    if (v353 != v354)
                                    {
                                      if (v353 <= v354)
                                        goto LABEL_348;
                                      goto LABEL_344;
                                    }
                                  }
                                  break;
                                }
                                if (!result)
                                  break;
                              }
                              else
                              {
                                v343 = -v342;
                                result = *v334 << v343;
                                if ((uint64_t)(*(_QWORD *)(v341 + 24) << v343) >> v343 >= result >> v343)
                                  break;
                              }
LABEL_348:
                              v339 = (_OWORD *)(v8 + 32 * v331);
                              v344 = v339[1];
                              *v337 = *v339;
                              v337[1] = v344;
                              v337 = v339;
                              if (v340 <= 1)
                                goto LABEL_345;
                            }
                          }
LABEL_344:
                          v339 = v337;
LABEL_345:
                          *(_QWORD *)v339 = v336;
                          *((_QWORD *)v339 + 1) = v333;
                          v339[1] = v457;
                        }
                      }
                      else if ((uint64_t)(*(_QWORD *)(v332 + 24) << -(char)v335) >> -(char)v335 < (uint64_t)(*v334 << -(char)v335) >> -(char)v335)
                      {
                        goto LABEL_343;
                      }
                    }
                  }
                  if (v10-- <= 2)
                    return result;
                  goto LABEL_322;
                }
              }
            }
          }
          v294 = *(_QWORD *)(v246 + 24);
          v295 = *(_QWORD *)(v294 + 8 * ((v249 - 1) >> 6)) & (1 << (v249 - 1));
          v296 = *(_DWORD *)(v247 + 32);
          v297 = v296 - 1;
          v298 = *(_QWORD *)(v247 + 24);
          if (v296 >= 0x41)
            v248 = (_QWORD *)(v298 + 8 * (v297 >> 6));
          if ((v295 != 0) == ((*v248 >> v297) & 1))
          {
            v304 = v249 + 63;
            v305 = v298 - 8;
            v306 = (v304 >> 3) & 0x3FFFFFF8;
            v307 = v294 - 8;
            do
            {
              if (!v306)
                goto LABEL_265;
              v308 = *(_QWORD *)(v307 + v306);
              v309 = *(_QWORD *)(v305 + v306);
              v306 -= 8;
            }
            while (v308 == v309);
            if (v308 > v309)
              goto LABEL_265;
          }
          else if (!v295)
          {
            goto LABEL_265;
          }
LABEL_264:
          v245 += 32;
          v244 = 2 * v243 + 2;
          goto LABEL_265;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 32 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x1000)
        {
          result = (uint64_t)sub_1C5B04DDC((__int128 *)(v7 + 32 * ((unint64_t)v10 >> 1)), (__int128 *)v7, a2 - 2);
        }
        else
        {
          sub_1C5B04DDC((__int128 *)v7, (__int128 *)(v7 + 32 * ((unint64_t)v10 >> 1)), a2 - 2);
          sub_1C5B04DDC((__int128 *)(v7 + 32), v12 - 2, a2 - 4);
          sub_1C5B04DDC((__int128 *)(v7 + 64), (__int128 *)(v7 + 32 + 32 * v11), a2 - 6);
          result = (uint64_t)sub_1C5B04DDC(v12 - 2, v12, (__int128 *)(v7 + 32 + 32 * v11));
          v458 = *(_OWORD *)v7;
          v466 = *(_OWORD *)(v7 + 16);
          v13 = v12[1];
          *(_OWORD *)v7 = *v12;
          *(_OWORD *)(v7 + 16) = v13;
          *v12 = v458;
          v12[1] = v466;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v7 - 24);
          v14 = *(_QWORD *)(v7 + 8);
          v16 = (uint64_t *)(v14 + 24);
          v17 = *(unsigned int *)(v15 + 32);
          if (v17 > 0x40)
          {
            v147 = *(_QWORD *)(v15 + 24);
            v148 = *(_QWORD *)(v147 + 8 * ((v17 - 1) >> 6)) & (1 << (v17 - 1));
            v95 = *(_DWORD *)(v14 + 32);
            v20 = *(_QWORD *)(v14 + 24);
            v149 = (_QWORD *)(v20 + 8 * ((v95 - 1) >> 6));
            if (v95 < 0x41)
              v149 = (_QWORD *)(v14 + 24);
            if ((v148 != 0) == ((*v149 >> (v95 - 1)) & 1))
            {
              v150 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
              v151 = v147 - 8;
              do
              {
                if (!v150)
                  goto LABEL_107;
                v152 = *(_QWORD *)(v151 + v150);
                v153 = *(_QWORD *)(v20 + v150 - 8);
                v150 -= 8;
              }
              while (v152 == v153);
              if (v152 <= v153)
                goto LABEL_13;
            }
            else if (v148)
            {
              goto LABEL_13;
            }
          }
          else
          {
            v18 = -v17;
            v19 = (uint64_t)(*(_QWORD *)(v15 + 24) << v18) >> v18;
            v20 = *v16;
            if (v19 < *v16 << v18 >> v18)
              goto LABEL_13;
            v95 = *(_DWORD *)(v14 + 32);
          }
LABEL_107:
          v96 = *(_QWORD *)v7;
          v456 = *(_OWORD *)(v7 + 16);
          v97 = *((_QWORD *)a2 - 3);
          v98 = (_QWORD *)(v97 + 24);
          if (v95 > 0x40)
          {
            v154 = *(_QWORD *)(v20 + 8 * ((v95 - 1) >> 6)) & (1 << (v95 - 1));
            result = *(unsigned int *)(v97 + 32);
            v155 = result - 1;
            v156 = *(_QWORD *)(v97 + 24);
            if (result >= 0x41)
              v98 = (_QWORD *)(v156 + 8 * (v155 >> 6));
            if ((v154 != 0) == ((*v98 >> v155) & 1))
            {
              v169 = (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8;
              while (v169)
              {
                v170 = *(_QWORD *)(v20 - 8 + v169);
                result = *(_QWORD *)(v156 - 8 + v169);
                v169 -= 8;
                if (v170 != result)
                {
                  if (v170 <= result)
                    goto LABEL_109;
                  break;
                }
              }
LABEL_181:
              v8 = v7 + 32;
              if (v7 + 32 < (unint64_t)a2)
              {
                v157 = (v95 - 1) >> 6;
                v158 = 1 << (v95 - 1);
                result = (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8;
                v159 = v7;
                while (1)
                {
                  v160 = *(_QWORD *)(v159 + 40);
                  v159 = v8;
                  v161 = (_QWORD *)(v160 + 24);
                  if (v95 > 0x40)
                  {
                    v162 = *(_DWORD *)(v160 + 32);
                    v163 = v162 - 1;
                    v164 = *(_QWORD *)(v160 + 24);
                    if (v162 >= 0x41)
                      v161 = (_QWORD *)(v164 + 8 * (v163 >> 6));
                    if (((((*(_QWORD *)(v20 + 8 * v157) & v158) != 0) ^ (*v161 >> v163)) & 1) != 0)
                    {
                      if ((*(_QWORD *)(v20 + 8 * v157) & v158) != 0)
                        goto LABEL_122;
                    }
                    else
                    {
                      v165 = v164 - 8;
                      v166 = (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8;
                      while (v166)
                      {
                        v167 = *(_QWORD *)(v20 + v166 - 8);
                        v168 = *(_QWORD *)(v165 + v166);
                        v166 -= 8;
                        if (v167 != v168)
                        {
                          if (v167 > v168)
                            break;
                          goto LABEL_122;
                        }
                      }
                    }
                  }
                  else if (v20 << -(char)v95 >> -(char)v95 < (uint64_t)(*v161 << (64 - v95)) >> (64 - v95))
                  {
                    goto LABEL_122;
                  }
                  v8 += 32;
                  if (v159 + 32 >= (unint64_t)a2)
                    goto LABEL_122;
                }
              }
              goto LABEL_122;
            }
            if (!v154)
              goto LABEL_181;
          }
          else if (v20 << -(char)v95 >> -(char)v95 >= (uint64_t)(*v98 << -(char)v95) >> -(char)v95)
          {
            goto LABEL_181;
          }
LABEL_109:
          v99 = (v95 - 1) >> 6;
          v100 = 1 << (v95 - 1);
          result = (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8;
          v8 = v7;
          do
          {
LABEL_110:
            while (1)
            {
              v101 = *(_QWORD *)(v8 + 40);
              v8 += 32;
              v102 = (_QWORD *)(v101 + 24);
              if (v95 <= 0x40)
                break;
              v103 = *(_DWORD *)(v101 + 32);
              v104 = v103 - 1;
              v105 = *(_QWORD *)(v101 + 24);
              if (v103 >= 0x41)
                v102 = (_QWORD *)(v105 + 8 * (v104 >> 6));
              if (((((*(_QWORD *)(v20 + 8 * v99) & v100) != 0) ^ (*v102 >> v104)) & 1) != 0)
              {
                if ((*(_QWORD *)(v20 + 8 * v99) & v100) != 0)
                  goto LABEL_122;
              }
              else
              {
                v106 = v105 - 8;
                v107 = (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8;
                while (v107)
                {
                  v108 = *(_QWORD *)(v20 - 8 + v107);
                  v109 = *(_QWORD *)(v106 + v107);
                  v107 -= 8;
                  if (v108 != v109)
                  {
                    if (v108 <= v109)
                      goto LABEL_122;
                    goto LABEL_110;
                  }
                }
              }
            }
          }
          while (v20 << -(char)v95 >> -(char)v95 >= (uint64_t)(*v102 << (64 - v95)) >> (64 - v95));
LABEL_122:
          v110 = a2;
          if (v8 >= (unint64_t)a2)
            goto LABEL_163;
          v111 = (v95 - 1) >> 6;
          v112 = 1 << (v95 - 1);
          result = v20 << -(char)v95 >> -(char)v95;
          for (i = a2; ; i -= 2)
          {
            v110 = i - 2;
            v114 = (_QWORD *)(v97 + 24);
            if (v95 <= 0x40)
            {
              if (result >= (uint64_t)(*v114 << (64 - v95)) >> (64 - v95))
                goto LABEL_163;
              goto LABEL_126;
            }
            v115 = *(_DWORD *)(v97 + 32);
            v116 = v115 - 1;
            v117 = *(_QWORD *)(v97 + 24);
            if (v115 >= 0x41)
              v114 = (_QWORD *)(v117 + 8 * (v116 >> 6));
            if (((((*(_QWORD *)(v20 + 8 * v111) & v112) != 0) ^ (*v114 >> v116)) & 1) == 0)
              break;
            if ((*(_QWORD *)(v20 + 8 * v111) & v112) == 0)
              goto LABEL_163;
LABEL_126:
            v97 = *((_QWORD *)i - 7);
          }
          v118 = v117 - 8;
          v119 = (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8;
          while (v119)
          {
            v120 = *(_QWORD *)(v20 + v119 - 8);
            v121 = *(_QWORD *)(v118 + v119);
            v119 -= 8;
            if (v120 != v121)
            {
              if (v120 <= v121)
                goto LABEL_126;
              break;
            }
          }
LABEL_163:
          while (v8 < (unint64_t)v110)
          {
            v459 = *(_OWORD *)v8;
            v468 = *(_OWORD *)(v8 + 16);
            v122 = v110[1];
            *(_OWORD *)v8 = *v110;
            *(_OWORD *)(v8 + 16) = v122;
            *v110 = v459;
            v110[1] = v468;
            v123 = *(unsigned int *)(v14 + 32);
            v124 = (v123 - 1) >> 6;
            v125 = 1 << (v123 - 1);
            v126 = 64 - v123;
            do
            {
              while (1)
              {
LABEL_138:
                while (1)
                {
                  v127 = *(_QWORD *)(v8 + 40);
                  v8 += 32;
                  v128 = (_QWORD *)(v127 + 24);
                  if (v123 > 0x40)
                    break;
                  v129 = *v16;
                  if (*v16 << v126 >> v126 < (uint64_t)(*v128 << v126) >> v126)
                    goto LABEL_150;
                }
                v129 = *v16;
                v130 = *(_DWORD *)(v127 + 32);
                v131 = v130 - 1;
                v132 = *(_QWORD *)(v127 + 24);
                if (v130 >= 0x41)
                  v128 = (_QWORD *)(v132 + 8 * (v131 >> 6));
                if (((((*(_QWORD *)(*v16 + 8 * v124) & v125) != 0) ^ (*v128 >> v131)) & 1) != 0)
                  break;
                v133 = v132 - 8;
                v134 = ((unint64_t)(v123 + 63) >> 3) & 0x3FFFFFF8;
                while (v134)
                {
                  v135 = *(_QWORD *)(v129 + v134 - 8);
                  v136 = *(_QWORD *)(v133 + v134);
                  v134 -= 8;
                  if (v135 != v136)
                  {
                    if (v135 > v136)
                      goto LABEL_138;
                    goto LABEL_150;
                  }
                }
              }
            }
            while ((*(_QWORD *)(*v16 + 8 * v124) & v125) == 0);
LABEL_150:
            result = v129 << v126 >> v126;
            while (1)
            {
LABEL_151:
              while (1)
              {
                v137 = *((_QWORD *)v110 - 3);
                v110 -= 2;
                v138 = (_QWORD *)(v137 + 24);
                if (v123 > 0x40)
                  break;
                if (result >= (uint64_t)(*v138 << v126) >> v126)
                  goto LABEL_163;
              }
              v139 = *(_DWORD *)(v137 + 32);
              v140 = v139 - 1;
              v141 = *(_QWORD *)(v137 + 24);
              if (v139 >= 0x41)
                v138 = (_QWORD *)(v141 + 8 * (v140 >> 6));
              if (((((*(_QWORD *)(v129 + 8 * v124) & v125) != 0) ^ (*v138 >> v140)) & 1) == 0)
                break;
              if ((*(_QWORD *)(v129 + 8 * v124) & v125) == 0)
                goto LABEL_163;
            }
            v142 = v141 - 8;
            v143 = ((unint64_t)(v123 + 63) >> 3) & 0x3FFFFFF8;
            while (v143)
            {
              v144 = *(_QWORD *)(v129 - 8 + v143);
              v145 = *(_QWORD *)(v142 + v143);
              v143 -= 8;
              if (v144 != v145)
              {
                if (v144 <= v145)
                  goto LABEL_151;
                goto LABEL_163;
              }
            }
          }
          if (v8 - 32 != v7)
          {
            v146 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)v7 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(v7 + 16) = v146;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v96;
          *(_QWORD *)(v8 - 24) = v14;
          *(_OWORD *)(v8 - 16) = v456;
          continue;
        }
        v14 = *(_QWORD *)(v7 + 8);
LABEL_13:
        v21 = *(_QWORD *)v7;
        v455 = *(_OWORD *)(v7 + 16);
        v22 = (uint64_t *)(v14 + 24);
        v23 = v7;
        while (1)
        {
LABEL_14:
          while (1)
          {
            v24 = v23;
            v23 += 32;
            v25 = *(_QWORD *)(v24 + 40);
            v26 = *(unsigned int *)(v25 + 32);
            if (v26 > 0x40)
              break;
            v27 = -v26;
            v28 = (uint64_t)(*(_QWORD *)(v25 + 24) << v27) >> v27;
            v29 = *v22;
            if (v28 >= *v22 << v27 >> v27)
              goto LABEL_27;
          }
          v30 = *(_QWORD *)(v25 + 24);
          v31 = *(_QWORD *)(v30 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
          v32 = *(_DWORD *)(v14 + 32);
          v33 = v32 - 1;
          v29 = *(_QWORD *)(v14 + 24);
          v34 = (_QWORD *)(v32 >= 0x41 ? v29 + 8 * (v33 >> 6) : v14 + 24);
          if ((v31 != 0) == ((*v34 >> v33) & 1))
            break;
          if (!v31)
            goto LABEL_27;
        }
        v35 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
        v36 = v30 - 8;
        while (v35)
        {
          v37 = *(_QWORD *)(v36 + v35);
          v38 = *(_QWORD *)(v29 + v35 - 8);
          v35 -= 8;
          if (v37 != v38)
          {
            if (v37 <= v38)
              goto LABEL_14;
            break;
          }
        }
LABEL_27:
        if (v24 == v7)
        {
          v39 = a2;
          if (v23 < (unint64_t)a2)
          {
            v39 = a2;
            do
            {
LABEL_45:
              while (1)
              {
                v51 = *((_QWORD *)v39 - 3);
                v39 -= 2;
                v52 = *(unsigned int *)(v51 + 32);
                if (v52 <= 0x40)
                  break;
                v53 = *(_QWORD *)(v51 + 24);
                v54 = *(_QWORD *)(v53 + 8 * ((v52 - 1) >> 6)) & (1 << (v52 - 1));
                v55 = *(_DWORD *)(v14 + 32);
                v56 = v55 - 1;
                if (v55 >= 0x41)
                  v57 = (_QWORD *)(v29 + 8 * (v56 >> 6));
                else
                  v57 = (_QWORD *)(v14 + 24);
                if ((v54 != 0) == ((*v57 >> v56) & 1))
                {
                  v59 = ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8;
                  v60 = v53 - 8;
                  do
                  {
                    if (!v59)
                    {
                      if (v23 < (unint64_t)v39)
                        goto LABEL_45;
                      goto LABEL_70;
                    }
                    v61 = *(_QWORD *)(v60 + v59);
                    v62 = *(_QWORD *)(v29 - 8 + v59);
                    v59 -= 8;
                  }
                  while (v61 == v62);
                  if (v61 <= v62 || v23 >= (unint64_t)v39)
                    goto LABEL_70;
                }
                else
                {
                  if (v54)
                    v58 = 1;
                  else
                    v58 = v23 >= (unint64_t)v39;
                  if (v58)
                    goto LABEL_70;
                }
              }
            }
            while ((uint64_t)(*(_QWORD *)(v51 + 24) << -(char)v52) >> -(char)v52 >= v29 << -(char)v52 >> -(char)v52
                 && v23 < (unint64_t)v39);
          }
        }
        else
        {
          v39 = a2;
          do
          {
LABEL_29:
            while (1)
            {
              v40 = *((_QWORD *)v39 - 3);
              v39 -= 2;
              v41 = *(unsigned int *)(v40 + 32);
              if (v41 <= 0x40)
                break;
              v42 = *(_QWORD *)(v40 + 24);
              v43 = *(_QWORD *)(v42 + 8 * ((v41 - 1) >> 6)) & (1 << (v41 - 1));
              v44 = *(_DWORD *)(v14 + 32);
              v45 = v44 - 1;
              if (v44 >= 0x41)
                v46 = (_QWORD *)(v29 + 8 * (v45 >> 6));
              else
                v46 = (_QWORD *)(v14 + 24);
              if ((v43 != 0) == ((*v46 >> v45) & 1))
              {
                v47 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
                v48 = v42 - 8;
                while (v47)
                {
                  v49 = *(_QWORD *)(v48 + v47);
                  v50 = *(_QWORD *)(v29 - 8 + v47);
                  v47 -= 8;
                  if (v49 != v50)
                  {
                    if (v49 <= v50)
                      goto LABEL_70;
                    goto LABEL_29;
                  }
                }
              }
              else if (v43)
              {
                goto LABEL_70;
              }
            }
          }
          while ((uint64_t)(*(_QWORD *)(v40 + 24) << -(char)v41) >> -(char)v41 >= v29 << -(char)v41 >> -(char)v41);
        }
LABEL_70:
        v8 = v23;
        if (v23 < (unint64_t)v39)
        {
          v65 = v39;
          do
          {
            v66 = *(_OWORD *)v8;
            v467 = *(_OWORD *)(v8 + 16);
            v67 = v65[1];
            *(_OWORD *)v8 = *v65;
            *(_OWORD *)(v8 + 16) = v67;
            *v65 = v66;
            v65[1] = v467;
            do
            {
              while (1)
              {
                while (1)
                {
                  v68 = *(_QWORD *)(v8 + 40);
                  v8 += 32;
                  v69 = *(unsigned int *)(v68 + 32);
                  if (v69 > 0x40)
                    break;
                  v70 = -v69;
                  v71 = (uint64_t)(*(_QWORD *)(v68 + 24) << v70) >> v70;
                  v72 = *v22;
                  if (v71 >= *v22 << v70 >> v70)
                    goto LABEL_86;
                }
                v73 = *(_QWORD *)(v68 + 24);
                v74 = *(_QWORD *)(v73 + 8 * ((v69 - 1) >> 6)) & (1 << (v69 - 1));
                v75 = *(_DWORD *)(v14 + 32);
                v76 = v75 - 1;
                v72 = *(_QWORD *)(v14 + 24);
                v77 = (_QWORD *)(v75 >= 0x41 ? v72 + 8 * (v76 >> 6) : v14 + 24);
                if ((v74 != 0) == ((*v77 >> v76) & 1))
                  break;
                if (!v74)
                  goto LABEL_86;
              }
              v78 = ((unint64_t)(v69 + 63) >> 3) & 0x3FFFFFF8;
              v79 = v73 - 8;
              do
              {
                if (!v78)
                  goto LABEL_86;
                v80 = *(_QWORD *)(v79 + v78);
                v81 = *(_QWORD *)(v72 + v78 - 8);
                v78 -= 8;
              }
              while (v80 == v81);
            }
            while (v80 <= v81);
            do
            {
LABEL_86:
              while (1)
              {
                v82 = *((_QWORD *)v65 - 3);
                v65 -= 2;
                v83 = *(unsigned int *)(v82 + 32);
                if (v83 <= 0x40)
                  break;
                v84 = *(_QWORD *)(v82 + 24);
                v85 = *(_QWORD *)(v84 + 8 * ((v83 - 1) >> 6)) & (1 << (v83 - 1));
                v86 = *(_DWORD *)(v14 + 32);
                v87 = v86 - 1;
                if (v86 >= 0x41)
                  v88 = (_QWORD *)(v72 + 8 * (v87 >> 6));
                else
                  v88 = (_QWORD *)(v14 + 24);
                if ((v85 != 0) == ((*v88 >> v87) & 1))
                {
                  v89 = ((unint64_t)(v83 + 63) >> 3) & 0x3FFFFFF8;
                  v90 = v84 - 8;
                  while (v89)
                  {
                    v91 = *(_QWORD *)(v90 + v89);
                    v92 = *(_QWORD *)(v72 - 8 + v89);
                    v89 -= 8;
                    if (v91 != v92)
                    {
                      if (v91 <= v92)
                        goto LABEL_99;
                      goto LABEL_86;
                    }
                  }
                }
                else if (v85)
                {
                  goto LABEL_99;
                }
              }
            }
            while ((uint64_t)(*(_QWORD *)(v82 + 24) << -(char)v83) >> -(char)v83 >= v72 << -(char)v83 >> -(char)v83);
LABEL_99:
            ;
          }
          while (v8 < (unint64_t)v65);
        }
        if (v8 - 32 != v7)
        {
          v93 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)v7 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(v7 + 16) = v93;
        }
        *(_QWORD *)(v8 - 32) = v21;
        *(_QWORD *)(v8 - 24) = v14;
        *(_OWORD *)(v8 - 16) = v455;
        if (v23 < (unint64_t)v39)
        {
LABEL_105:
          result = sub_1C5B03290(v7, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v94 = sub_1C5B05134(v7, v8 - 32);
        result = sub_1C5B05134(v8, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v94)
            continue;
          goto LABEL_105;
        }
        a2 = (__int128 *)(v8 - 32);
        if (!v94)
          goto LABEL_2;
        return result;
    }
  }
}

__int128 *sub_1C5B04DDC(__int128 *result, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;

  v3 = *((_QWORD *)a2 + 1);
  v4 = (uint64_t *)(v3 + 24);
  v5 = *((_QWORD *)result + 1);
  v6 = (_QWORD *)(v5 + 24);
  v7 = *(unsigned int *)(v3 + 32);
  if (v7 > 0x40)
  {
    v8 = *v4;
    v9 = *(_QWORD *)(*v4 + 8 * ((v7 - 1) >> 6)) >> (v7 - 1);
    v25 = *(_DWORD *)(v5 + 32);
    v26 = v25 - 1;
    v27 = *(_QWORD *)(v5 + 24);
    if (v25 >= 0x41)
      v6 = (_QWORD *)(v27 + 8 * (v26 >> 6));
    if (((v9 ^ (*v6 >> v26)) & 1) == 0)
    {
      v28 = v27 - 8;
      v29 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
      while (v29)
      {
        v30 = *(_QWORD *)(v8 + v29 - 8);
        v31 = *(_QWORD *)(v28 + v29);
        v29 -= 8;
        if (v30 != v31)
        {
          LOBYTE(v9) = v30 <= v31;
          goto LABEL_3;
        }
      }
      LOBYTE(v9) = 0;
    }
  }
  else
  {
    v8 = *v4;
    LOBYTE(v9) = *v4 << -(char)v7 >> -(char)v7 < (uint64_t)(*v6 << -(char)v7) >> -(char)v7;
  }
LABEL_3:
  v10 = *((_QWORD *)a3 + 1);
  v11 = *(unsigned int *)(v10 + 32);
  if (v11 > 0x40)
  {
    v32 = *(_QWORD *)(v10 + 24);
    v10 = *(_QWORD *)(v32 + 8 * ((v11 - 1) >> 6)) >> (v11 - 1);
    v33 = v7 - 1;
    if (v7 >= 0x41)
      v4 = (uint64_t *)(v8 + 8 * (v33 >> 6));
    if (((v10 ^ ((unint64_t)*v4 >> v33)) & 1) == 0)
    {
      v34 = v8 - 8;
      v35 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      while (v35)
      {
        v36 = *(_QWORD *)(v32 - 8 + v35);
        v10 = *(_QWORD *)(v34 + v35);
        v35 -= 8;
        if (v36 != v10)
        {
          LOBYTE(v10) = v36 <= v10;
          goto LABEL_5;
        }
      }
      if ((v9 & 1) == 0)
        return result;
      goto LABEL_28;
    }
  }
  else
  {
    LOBYTE(v10) = (uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v11) >> -(char)v11 < v8 << -(char)v11 >> -(char)v11;
  }
LABEL_5:
  if ((v9 & 1) == 0)
  {
    if ((v10 & 1) == 0)
      return result;
    v16 = *a2;
    v15 = a2[1];
    v17 = a3[1];
    *a2 = *a3;
    a2[1] = v17;
    *a3 = v16;
    a3[1] = v15;
    v18 = *((_QWORD *)a2 + 1);
    v19 = *((_QWORD *)result + 1);
    v20 = (_QWORD *)(v19 + 24);
    v21 = *(unsigned int *)(v18 + 32);
    if (v21 > 0x40)
    {
      v50 = *(_QWORD *)(v18 + 24);
      v51 = *(_QWORD *)(v50 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
      v52 = *(_DWORD *)(v19 + 32);
      v53 = v52 - 1;
      v54 = *(_QWORD *)(v19 + 24);
      if (v52 >= 0x41)
        v20 = (_QWORD *)(v54 + 8 * (v53 >> 6));
      if ((v51 != 0) == ((*v20 >> v53) & 1))
      {
        v61 = v21 + 63;
        v62 = v54 - 8;
        v63 = (v61 >> 3) & 0x3FFFFFF8;
        v64 = v50 - 8;
        while (v63)
        {
          v65 = *(_QWORD *)(v64 + v63);
          v66 = *(_QWORD *)(v62 + v63);
          v63 -= 8;
          if (v65 != v66)
          {
            if (v65 <= v66)
              goto LABEL_11;
            return result;
          }
        }
        return result;
      }
      if (!v51)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v18 + 24) << -(char)v21) >> -(char)v21 >= (uint64_t)(*v20 << -(char)v21) >> -(char)v21)
    {
      return result;
    }
LABEL_11:
    v23 = *result;
    v22 = result[1];
    v24 = a2[1];
    *result = *a2;
    result[1] = v24;
    *a2 = v23;
    a2[1] = v22;
    return result;
  }
  if ((v10 & 1) != 0)
  {
    v13 = *result;
    v12 = result[1];
    v14 = a3[1];
    *result = *a3;
    result[1] = v14;
LABEL_31:
    *a3 = v13;
    a3[1] = v12;
    return result;
  }
LABEL_28:
  v38 = *result;
  v37 = result[1];
  v39 = a2[1];
  *result = *a2;
  result[1] = v39;
  *a2 = v38;
  a2[1] = v37;
  v40 = *((_QWORD *)a3 + 1);
  v41 = *((_QWORD *)a2 + 1);
  v42 = (_QWORD *)(v41 + 24);
  v43 = *(unsigned int *)(v40 + 32);
  if (v43 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v40 + 24) << -(char)v43) >> -(char)v43 >= (uint64_t)(*v42 << -(char)v43) >> -(char)v43)
      return result;
    goto LABEL_30;
  }
  v45 = *(_QWORD *)(v40 + 24);
  v46 = *(_QWORD *)(v45 + 8 * ((v43 - 1) >> 6)) & (1 << (v43 - 1));
  v47 = *(_DWORD *)(v41 + 32);
  v48 = v47 - 1;
  v49 = *(_QWORD *)(v41 + 24);
  if (v47 >= 0x41)
    v42 = (_QWORD *)(v49 + 8 * (v48 >> 6));
  if ((v46 != 0) == ((*v42 >> v48) & 1))
  {
    v55 = v43 + 63;
    v56 = v49 - 8;
    v57 = (v55 >> 3) & 0x3FFFFFF8;
    v58 = v45 - 8;
    while (v57)
    {
      v59 = *(_QWORD *)(v58 + v57);
      v60 = *(_QWORD *)(v56 + v57);
      v57 -= 8;
      if (v59 != v60)
      {
        if (v59 <= v60)
          goto LABEL_30;
        return result;
      }
    }
  }
  else if (v46)
  {
LABEL_30:
    v13 = *a2;
    v12 = a2[1];
    v44 = a3[1];
    *a2 = *a3;
    a2[1] = v44;
    goto LABEL_31;
  }
  return result;
}

BOOL sub_1C5B05134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  __int128 v135;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 24);
      v7 = *(_QWORD *)(a1 + 8);
      v8 = (_QWORD *)(v7 + 24);
      v9 = *(unsigned int *)(v6 + 32);
      if (v9 <= 0x40)
      {
        if ((uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v9) >> -(char)v9 >= (uint64_t)(*v8 << -(char)v9) >> -(char)v9)
          return result;
        goto LABEL_4;
      }
      v80 = *(_QWORD *)(v6 + 24);
      v81 = *(_QWORD *)(v80 + 8 * ((v9 - 1) >> 6)) & (1 << (v9 - 1));
      v82 = *(_DWORD *)(v7 + 32);
      v83 = v82 - 1;
      v84 = *(_QWORD *)(v7 + 24);
      if (v82 >= 0x41)
        v8 = (_QWORD *)(v84 + 8 * (v83 >> 6));
      if ((v81 != 0) != ((*v8 >> v83) & 1))
      {
        if (!v81)
          return result;
LABEL_4:
        v11 = *(_OWORD *)a1;
        v10 = *(_OWORD *)(a1 + 16);
        v12 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v12;
        *(_OWORD *)(a2 - 32) = v11;
        *(_OWORD *)(a2 - 16) = v10;
        return 1;
      }
      v105 = v9 + 63;
      v106 = v84 - 8;
      v107 = (v105 >> 3) & 0x3FFFFFF8;
      v108 = v80 - 8;
      do
      {
        if (!v107)
          return 1;
        v109 = *(_QWORD *)(v108 + v107);
        v110 = *(_QWORD *)(v106 + v107);
        v107 -= 8;
      }
      while (v109 == v110);
      if (v109 <= v110)
        goto LABEL_4;
      return 1;
    case 3:
      sub_1C5B04DDC((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      sub_1C5B05854(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      v49 = (__int128 *)(a1 + 32);
      v50 = (__int128 *)(a1 + 64);
      v51 = (__int128 *)(a1 + 96);
      sub_1C5B05854(a1, a1 + 32, a1 + 64, a1 + 96);
      v52 = *(_QWORD *)(a2 - 24);
      v53 = *(_QWORD *)(a1 + 104);
      v54 = (_QWORD *)(v53 + 24);
      v55 = *(unsigned int *)(v52 + 32);
      if (v55 > 0x40)
      {
        v85 = *(_QWORD *)(v52 + 24);
        v86 = *(_QWORD *)(v85 + 8 * ((v55 - 1) >> 6)) & (1 << (v55 - 1));
        v87 = *(_DWORD *)(v53 + 32);
        v88 = v87 - 1;
        v89 = *(_QWORD *)(v53 + 24);
        if (v87 >= 0x41)
          v54 = (_QWORD *)(v89 + 8 * (v88 >> 6));
        if ((v86 != 0) == ((*v54 >> v88) & 1))
        {
          v111 = v55 + 63;
          v112 = v89 - 8;
          v113 = (v111 >> 3) & 0x3FFFFFF8;
          v114 = v85 - 8;
          do
          {
            if (!v113)
              return 1;
            v115 = *(_QWORD *)(v114 + v113);
            v116 = *(_QWORD *)(v112 + v113);
            v113 -= 8;
          }
          while (v115 == v116);
          if (v115 > v116)
            return 1;
        }
        else if (!v86)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v52 + 24) << -(char)v55) >> -(char)v55 >= (uint64_t)(*v54 << -(char)v55) >> -(char)v55)
      {
        return 1;
      }
      v57 = *v51;
      v56 = *(_OWORD *)(a1 + 112);
      v58 = *(_OWORD *)(a2 - 16);
      *v51 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 112) = v58;
      *(_OWORD *)(a2 - 32) = v57;
      *(_OWORD *)(a2 - 16) = v56;
      v59 = *(_QWORD *)(a1 + 104);
      v60 = *(_QWORD *)(a1 + 72);
      v61 = (_QWORD *)(v60 + 24);
      v62 = *(unsigned int *)(v59 + 32);
      if (v62 > 0x40)
      {
        v90 = *(_QWORD *)(v59 + 24);
        v91 = *(_QWORD *)(v90 + 8 * ((v62 - 1) >> 6)) & (1 << (v62 - 1));
        v92 = *(_DWORD *)(v60 + 32);
        v93 = v92 - 1;
        v94 = *(_QWORD *)(v60 + 24);
        if (v92 >= 0x41)
          v61 = (_QWORD *)(v94 + 8 * (v93 >> 6));
        if ((v91 != 0) == ((*v61 >> v93) & 1))
        {
          v117 = v62 + 63;
          v118 = v94 - 8;
          v119 = (v117 >> 3) & 0x3FFFFFF8;
          v120 = v90 - 8;
          do
          {
            if (!v119)
              return 1;
            v121 = *(_QWORD *)(v120 + v119);
            v122 = *(_QWORD *)(v118 + v119);
            v119 -= 8;
          }
          while (v121 == v122);
          if (v121 > v122)
            return 1;
        }
        else if (!v91)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v59 + 24) << -(char)v62) >> -(char)v62 >= (uint64_t)(*v61 << -(char)v62) >> -(char)v62)
      {
        return 1;
      }
      v64 = *v50;
      v63 = *(_OWORD *)(a1 + 80);
      v65 = *(_OWORD *)(a1 + 112);
      *v50 = *v51;
      *(_OWORD *)(a1 + 80) = v65;
      *v51 = v64;
      *(_OWORD *)(a1 + 112) = v63;
      v66 = *(_QWORD *)(a1 + 72);
      v67 = *(_QWORD *)(a1 + 40);
      v68 = (_QWORD *)(v67 + 24);
      v69 = *(unsigned int *)(v66 + 32);
      if (v69 > 0x40)
      {
        v95 = *(_QWORD *)(v66 + 24);
        v96 = *(_QWORD *)(v95 + 8 * ((v69 - 1) >> 6)) & (1 << (v69 - 1));
        v97 = *(_DWORD *)(v67 + 32);
        v98 = v97 - 1;
        v99 = *(_QWORD *)(v67 + 24);
        if (v97 >= 0x41)
          v68 = (_QWORD *)(v99 + 8 * (v98 >> 6));
        if ((v96 != 0) == ((*v68 >> v98) & 1))
        {
          v123 = v69 + 63;
          v124 = v99 - 8;
          v125 = (v123 >> 3) & 0x3FFFFFF8;
          v126 = v95 - 8;
          do
          {
            if (!v125)
              return 1;
            v127 = *(_QWORD *)(v126 + v125);
            v128 = *(_QWORD *)(v124 + v125);
            v125 -= 8;
          }
          while (v127 == v128);
          if (v127 > v128)
            return 1;
        }
        else if (!v96)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v66 + 24) << -(char)v69) >> -(char)v69 >= (uint64_t)(*v68 << -(char)v69) >> -(char)v69)
      {
        return 1;
      }
      v71 = *v49;
      v70 = *(_OWORD *)(a1 + 48);
      v72 = *(_OWORD *)(a1 + 80);
      *v49 = *v50;
      *(_OWORD *)(a1 + 48) = v72;
      *v50 = v71;
      *(_OWORD *)(a1 + 80) = v70;
      v73 = *(_QWORD *)(a1 + 40);
      v74 = *(_QWORD *)(a1 + 8);
      v75 = (_QWORD *)(v74 + 24);
      v76 = *(unsigned int *)(v73 + 32);
      if (v76 <= 0x40)
      {
        if ((uint64_t)(*(_QWORD *)(v73 + 24) << -(char)v76) >> -(char)v76 >= (uint64_t)(*v75 << -(char)v76) >> -(char)v76)
          return 1;
        goto LABEL_47;
      }
      v100 = *(_QWORD *)(v73 + 24);
      v101 = *(_QWORD *)(v100 + 8 * ((v76 - 1) >> 6)) & (1 << (v76 - 1));
      v102 = *(_DWORD *)(v74 + 32);
      v103 = v102 - 1;
      v104 = *(_QWORD *)(v74 + 24);
      if (v102 >= 0x41)
        v75 = (_QWORD *)(v104 + 8 * (v103 >> 6));
      if ((v101 != 0) == ((*v75 >> v103) & 1))
      {
        v129 = v76 + 63;
        v130 = v104 - 8;
        v131 = (v129 >> 3) & 0x3FFFFFF8;
        v132 = v100 - 8;
        do
        {
          if (!v131)
            return 1;
          v133 = *(_QWORD *)(v132 + v131);
          v134 = *(_QWORD *)(v130 + v131);
          v131 -= 8;
        }
        while (v133 == v134);
        if (v133 <= v134)
        {
LABEL_47:
          v78 = *(_OWORD *)a1;
          v77 = *(_OWORD *)(a1 + 16);
          v79 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v49;
          *(_OWORD *)(a1 + 16) = v79;
          *v49 = v78;
          *(_OWORD *)(a1 + 48) = v77;
        }
      }
      else if (v101)
      {
        goto LABEL_47;
      }
      return 1;
    default:
      v13 = a1 + 64;
      sub_1C5B04DDC((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v14 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v15 = 0;
      while (2)
      {
        v16 = *(_QWORD *)(v14 + 8);
        v17 = *(_QWORD *)(v13 + 8);
        v18 = (_QWORD *)(v17 + 24);
        v19 = *(unsigned int *)(v16 + 32);
        if (v19 > 0x40)
        {
          v38 = *(_QWORD *)(v16 + 24);
          v39 = *(_QWORD *)(v38 + 8 * ((v19 - 1) >> 6)) & (1 << (v19 - 1));
          v40 = *(_DWORD *)(v17 + 32);
          v41 = v40 - 1;
          v42 = *(_QWORD *)(v17 + 24);
          if (v40 >= 0x41)
            v18 = (_QWORD *)(v42 + 8 * (v41 >> 6));
          if ((v39 != 0) == ((*v18 >> v41) & 1))
          {
            v43 = v19 + 63;
            v44 = v42 - 8;
            v45 = (v43 >> 3) & 0x3FFFFFF8;
            v46 = v38 - 8;
            do
            {
              if (!v45)
                goto LABEL_25;
              v47 = *(_QWORD *)(v46 + v45);
              v48 = *(_QWORD *)(v44 + v45);
              v45 -= 8;
            }
            while (v47 == v48);
            if (v47 > v48)
            {
LABEL_25:
              v13 = v14;
              v14 += 32;
              if (v14 == a2)
                return 1;
              continue;
            }
          }
          else if (!v39)
          {
            goto LABEL_25;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v16 + 24) << -(char)v19) >> -(char)v19 >= (uint64_t)(*v18 << -(char)v19) >> -(char)v19)
        {
          goto LABEL_25;
        }
        break;
      }
      v20 = *(_QWORD *)v14;
      v135 = *(_OWORD *)(v14 + 16);
      v21 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)v14 = *(_OWORD *)v13;
      *(_OWORD *)(v14 + 16) = v21;
      v22 = a1;
      if (v13 == a1)
        goto LABEL_24;
      while (2)
      {
        v23 = *(_QWORD *)(v13 - 24);
        v24 = (_QWORD *)(v23 + 24);
        v25 = *(unsigned int *)(v16 + 32);
        if (v25 <= 0x40)
        {
          if ((uint64_t)(*(_QWORD *)(v16 + 24) << -(char)v25) >> -(char)v25 >= (uint64_t)(*v24 << -(char)v25) >> -(char)v25)
            goto LABEL_23;
LABEL_12:
          v26 = *(_OWORD *)(v13 - 16);
          *(_OWORD *)v13 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(v13 + 16) = v26;
          v13 -= 32;
          if (v13 == a1)
          {
            v22 = a1;
            goto LABEL_24;
          }
          continue;
        }
        break;
      }
      v27 = *(_QWORD *)(v16 + 24);
      v28 = *(_QWORD *)(v27 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
      v29 = *(_DWORD *)(v23 + 32);
      v30 = v29 - 1;
      v31 = *(_QWORD *)(v23 + 24);
      if (v29 >= 0x41)
        v24 = (_QWORD *)(v31 + 8 * (v30 >> 6));
      if ((v28 != 0) != ((*v24 >> v30) & 1))
      {
        if (!v28)
          goto LABEL_23;
        goto LABEL_12;
      }
      v32 = v25 + 63;
      v33 = v31 - 8;
      v34 = (v32 >> 3) & 0x3FFFFFF8;
      v35 = v27 - 8;
      while (v34)
      {
        v36 = *(_QWORD *)(v35 + v34);
        v37 = *(_QWORD *)(v33 + v34);
        v34 -= 8;
        if (v36 != v37)
        {
          if (v36 <= v37)
            goto LABEL_12;
          break;
        }
      }
LABEL_23:
      v22 = v13;
LABEL_24:
      *(_QWORD *)v22 = v20;
      *(_QWORD *)(v22 + 8) = v16;
      *(_OWORD *)(v22 + 16) = v135;
      if (++v15 != 8)
        goto LABEL_25;
      return v14 + 32 == a2;
  }
}

__int128 *sub_1C5B05854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;

  result = sub_1C5B04DDC((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = (_QWORD *)(v10 + 24);
  v12 = *(unsigned int *)(v9 + 32);
  if (v12 > 0x40)
  {
    v30 = *(_QWORD *)(v9 + 24);
    v31 = *(_QWORD *)(v30 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
    v32 = *(_DWORD *)(v10 + 32);
    v33 = v32 - 1;
    v34 = *(_QWORD *)(v10 + 24);
    if (v32 >= 0x41)
      v11 = (_QWORD *)(v34 + 8 * (v33 >> 6));
    if ((v31 != 0) == ((*v11 >> v33) & 1))
    {
      v45 = v12 + 63;
      v46 = v34 - 8;
      v47 = (v45 >> 3) & 0x3FFFFFF8;
      v48 = v30 - 8;
      while (v47)
      {
        v49 = *(_QWORD *)(v48 + v47);
        v50 = *(_QWORD *)(v46 + v47);
        v47 -= 8;
        if (v49 != v50)
        {
          if (v49 <= v50)
            goto LABEL_3;
          return result;
        }
      }
      return result;
    }
    if (!v31)
      return result;
  }
  else if ((uint64_t)(*(_QWORD *)(v9 + 24) << -(char)v12) >> -(char)v12 >= (uint64_t)(*v11 << -(char)v12) >> -(char)v12)
  {
    return result;
  }
LABEL_3:
  v14 = *(_OWORD *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  v15 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v13;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = *(_QWORD *)(a2 + 8);
  v18 = (_QWORD *)(v17 + 24);
  v19 = *(unsigned int *)(v16 + 32);
  if (v19 > 0x40)
  {
    v35 = *(_QWORD *)(v16 + 24);
    v36 = *(_QWORD *)(v35 + 8 * ((v19 - 1) >> 6)) & (1 << (v19 - 1));
    v37 = *(_DWORD *)(v17 + 32);
    v38 = v37 - 1;
    v39 = *(_QWORD *)(v17 + 24);
    if (v37 >= 0x41)
      v18 = (_QWORD *)(v39 + 8 * (v38 >> 6));
    if ((v36 != 0) == ((*v18 >> v38) & 1))
    {
      v51 = v19 + 63;
      v52 = v39 - 8;
      v53 = (v51 >> 3) & 0x3FFFFFF8;
      v54 = v35 - 8;
      while (v53)
      {
        v55 = *(_QWORD *)(v54 + v53);
        v56 = *(_QWORD *)(v52 + v53);
        v53 -= 8;
        if (v55 != v56)
        {
          if (v55 <= v56)
            goto LABEL_5;
          return result;
        }
      }
      return result;
    }
    if (!v36)
      return result;
  }
  else if ((uint64_t)(*(_QWORD *)(v16 + 24) << -(char)v19) >> -(char)v19 >= (uint64_t)(*v18 << -(char)v19) >> -(char)v19)
  {
    return result;
  }
LABEL_5:
  v21 = *(_OWORD *)a2;
  v20 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v22;
  *(_OWORD *)a3 = v21;
  *(_OWORD *)(a3 + 16) = v20;
  v23 = *(_QWORD *)(a2 + 8);
  v24 = *(_QWORD *)(a1 + 8);
  v25 = (_QWORD *)(v24 + 24);
  v26 = *(unsigned int *)(v23 + 32);
  if (v26 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v23 + 24) << -(char)v26) >> -(char)v26 >= (uint64_t)(*v25 << -(char)v26) >> -(char)v26)
      return result;
    goto LABEL_7;
  }
  v40 = *(_QWORD *)(v23 + 24);
  v41 = *(_QWORD *)(v40 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
  v42 = *(_DWORD *)(v24 + 32);
  v43 = v42 - 1;
  v44 = *(_QWORD *)(v24 + 24);
  if (v42 >= 0x41)
    v25 = (_QWORD *)(v44 + 8 * (v43 >> 6));
  if ((v41 != 0) == ((*v25 >> v43) & 1))
  {
    v57 = v26 + 63;
    v58 = v44 - 8;
    v59 = (v57 >> 3) & 0x3FFFFFF8;
    v60 = v40 - 8;
    while (v59)
    {
      v61 = *(_QWORD *)(v60 + v59);
      v62 = *(_QWORD *)(v58 + v59);
      v59 -= 8;
      if (v61 != v62)
      {
        if (v61 <= v62)
          goto LABEL_7;
        return result;
      }
    }
  }
  else if (v41)
  {
LABEL_7:
    v28 = *(_OWORD *)a1;
    v27 = *(_OWORD *)(a1 + 16);
    v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v29;
    *(_OWORD *)a2 = v28;
    *(_OWORD *)(a2 + 16) = v27;
  }
  return result;
}

uint64_t sub_1C5B05B18()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B01904(v0);
}

uint64_t sub_1C5B05B40()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B019CC(v0);
}

void sub_1C5B05B6C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B05B90(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5B05C00(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t v3;
  void **v4;
  void *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AnalysisPass;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void (**v21)(void);
  void *v22;
  void *v23;
  _QWORD v25[3];
  _QWORD *v26;
  _BYTE v27[40];
  _BYTE v28[24];
  _BYTE *v29;
  void *v30;
  _QWORD v31[20];

  v31[19] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v4 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LoopInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LoopInfoWrapperPass::ID);
  v10 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::PostDominatorTreeWrapperPass::ID);
  v12 = v9 + 32;
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::PostDominatorTreeWrapperPass::ID)+ 32;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (AnalysisPass
    && (v15 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MemorySSAWrapperPass::ID)) != 0)
  {
    v16 = *(_QWORD *)(v15 + 32);
    v17 = operator new();
    *(_QWORD *)v17 = v16;
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_QWORD *)(v17 + 16) = 0x1000000000;
    *(_QWORD *)(v17 + 408) = v17 + 440;
    *(_QWORD *)(v17 + 416) = v17 + 440;
    *(_QWORD *)(v17 + 424) = 8;
    *(_DWORD *)(v17 + 432) = 0;
    *(_QWORD *)(v17 + 504) = v17 + 520;
    *(_QWORD *)(v17 + 512) = 0x800000000;
    *(_QWORD *)(v17 + 600) = 0;
    *(_QWORD *)(v17 + 592) = 0;
    *(_QWORD *)(v17 + 584) = v17 + 592;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v6 + 80);
  v25[0] = &off_1E8194888;
  v26 = v25;
  sub_1C5B00A24((uint64_t)v27, v6 + 32, v13, v12, v17, v18, (uint64_t)v25);
  v3 = sub_1C5B00AB0((uint64_t)v27);
  MEMORY[0x1CAA32FB4](v31[16], 8);
  if (v30 != v31)
    free(v30);
  v19 = v29;
  if (v29 == v28)
  {
    v20 = 4;
    v19 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_20;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_20:
  if (v26 == v25)
  {
    v21 = (void (**)(void))(v25[0] + 32);
  }
  else
  {
    if (!v26)
      goto LABEL_25;
    v21 = (void (**)(void))(*v26 + 40);
  }
  (*v21)();
LABEL_25:
  if (v17)
  {
    sub_1C61247C0(v17 + 584, *(_QWORD **)(v17 + 592));
    v22 = *(void **)(v17 + 504);
    if (v22 != (void *)(v17 + 520))
      free(v22);
    v23 = *(void **)(v17 + 416);
    if (v23 != *(void **)(v17 + 408))
      free(v23);
    sub_1C4EE41F8((char **)(v17 + 8));
    MEMORY[0x1CAA32FC0](v17, 0x10E0C40B8556DDDLL);
  }
  return v3;
}

void sub_1C5B05EFC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5B05F10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8194888;
  return result;
}

void sub_1C5B05F34(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8194888;
}

uint64_t sub_1C5B05F4C()
{
  return 1;
}

void sub_1C5B05F58(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B05F7C(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage *v3;

  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::getLoopAnalysisUsage(this, v3);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5B05FD0(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  llvm::PMDataManager *v11;
  uint64_t AnalysisPass;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t LoopPredecessor;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (**v29)(void);
  void *v30;
  void *v31;
  uint64_t v33;
  const llvm::Loop *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _BYTE v37[40];
  _BYTE v38[24];
  _BYTE *v39;
  void *v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v34 = a2;
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::LoopInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::LoopInfoWrapperPass::ID);
  v11 = *(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v11, &llvm::PostDominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::PostDominatorTreeWrapperPass::ID);
    v11 = *(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24);
  }
  if (AnalysisPass)
    v13 = AnalysisPass + 32;
  else
    v13 = 0;
  v14 = llvm::PMDataManager::findAnalysisPass(v11, &llvm::MemorySSAWrapperPass::ID, 1);
  if (v14
    && (v15 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v14 + 96))(v14, &llvm::MemorySSAWrapperPass::ID)) != 0)
  {
    v16 = *(_QWORD *)(v15 + 32);
    v17 = operator new();
    *(_QWORD *)v17 = v16;
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_QWORD *)(v17 + 16) = 0x1000000000;
    *(_QWORD *)(v17 + 408) = v17 + 440;
    *(_QWORD *)(v17 + 416) = v17 + 440;
    *(_QWORD *)(v17 + 424) = 8;
    *(_DWORD *)(v17 + 432) = 0;
    *(_QWORD *)(v17 + 504) = v17 + 520;
    *(_QWORD *)(v17 + 512) = 0x800000000;
    *(_QWORD *)(v17 + 600) = 0;
    *(_QWORD *)(v17 + 592) = 0;
    *(_QWORD *)(v17 + 584) = v17 + 592;
  }
  else
  {
    v17 = 0;
  }
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  v33 = LoopPredecessor;
  if (!LoopPredecessor)
  {
    LoopPredecessor = **((_QWORD **)a2 + 4);
    v33 = LoopPredecessor;
  }
  v19 = *(_QWORD *)(v7 + 56);
  v20 = *(unsigned int *)(v7 + 72);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = ((LoopPredecessor >> 4) ^ (LoopPredecessor >> 9)) & (v20 - 1);
    v22 = (uint64_t *)(v19 + 16 * v21);
    v23 = *v22;
    if (LoopPredecessor == *v22)
      goto LABEL_25;
    v24 = 1;
    while (v23 != -4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(_QWORD *)(v19 + 16 * v21);
      if (LoopPredecessor == v23)
      {
        v22 = (uint64_t *)(v19 + 16 * v21);
        goto LABEL_25;
      }
    }
  }
  v22 = (uint64_t *)(v19 + 16 * v20);
LABEL_25:
  if (v22 == (uint64_t *)(v19 + 16 * v20))
    v26 = 0;
  else
    v26 = v22[1];
  v35[0] = &off_1E8194980;
  v35[1] = &v33;
  v35[2] = &v34;
  v36 = v35;
  sub_1C5B00A24((uint64_t)v37, v7 + 32, v13, v10 + 32, v17, v26, (uint64_t)v35);
  v4 = sub_1C5B00AB0((uint64_t)v37);
  MEMORY[0x1CAA32FB4](v41[16], 8);
  if (v40 != v41)
    free(v40);
  v27 = v39;
  if (v39 == v38)
  {
    v28 = 4;
    v27 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_35;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_35:
  if (v36 == v35)
  {
    v29 = (void (**)(void))(v35[0] + 32);
  }
  else
  {
    if (!v36)
      goto LABEL_40;
    v29 = (void (**)(void))(*v36 + 40);
  }
  (*v29)();
LABEL_40:
  if (v17)
  {
    sub_1C61247C0(v17 + 584, *(_QWORD **)(v17 + 592));
    v30 = *(void **)(v17 + 504);
    if (v30 != (void *)(v17 + 520))
      free(v30);
    v31 = *(void **)(v17 + 416);
    if (v31 != *(void **)(v17 + 408))
      free(v31);
    sub_1C4EE41F8((char **)(v17 + 8));
    MEMORY[0x1CAA32FC0](v17, 0x10E0C40B8556DDDLL);
  }
  return v4;
}

void sub_1C5B06374()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5B06388(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8194980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5B063C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8194980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C5B063E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  if (**(_QWORD **)(a1 + 8) == v2)
    return 1;
  v3 = **(_QWORD **)(a1 + 16);
  v4 = sub_1C477672C(v3 + 56, v2);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = 72;
  if (v5 == *(_QWORD *)(v3 + 56))
    v6 = 76;
  return v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)(v3 + v6));
}

void sub_1C5B0644C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5B06460()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81949C8;
  return result;
}

void sub_1C5B06484(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81949C8;
}

uint64_t sub_1C5B0649C()
{
  return 1;
}

void sub_1C5B064A8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5B064BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8194A10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5B064F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8194A10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C5B06514(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  if (**(_QWORD **)(a1 + 8) == v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_1C477672C(v3 + 56, v2);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = 72;
  if (v5 == *(_QWORD *)(v3 + 56))
    v6 = 76;
  return v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)(v3 + v6));
}

uint64_t sub_1C5B06578()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Whether or not we should widen guards  expressed as branches by widenable conditions";
  v3.n128_u64[1] = 84;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED81C8F0, "guard-widening-widen-branch-guards", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81C8F0, &dword_1C475E000);
}

void *llvm::GVNPass::ValueTable::createExpr@<X0>(llvm::GVNPass::ValueTable *this@<X0>, llvm::Instruction *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int **v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  int v13;
  uint64_t v14;
  llvm::Value *BasePtr;
  int v16;
  uint64_t v17;
  llvm::Value *DerivedPtr;
  int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value **v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  void *result;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;

  *(_BYTE *)(a3 + 4) = 0;
  v6 = a3 + 32;
  *(_QWORD *)(a3 + 16) = a3 + 32;
  v7 = (unsigned int **)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0x400000000;
  v8 = *((unsigned __int8 *)a2 + 16);
  v9 = v8 != 62 || a2 == 0;
  v10 = 64;
  if (v9)
    v10 = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)((char *)a2 + v10);
  *(_DWORD *)a3 = v8 - 28;
  v11 = sub_1C4E9AE24((uint64_t)a2);
  v12 = *((_DWORD *)a2 + 5);
  if (v11)
  {
    v13 = llvm::GVNPass::ValueTable::lookupOrAdd(this, *((llvm::Value **)a2 - 4 * (v12 & 0x7FFFFFF)));
    v14 = *(unsigned int *)(a3 + 24);
    if (v14 >= *(_DWORD *)(a3 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v14 + 1, 4);
      LODWORD(v14) = *(_DWORD *)(a3 + 24);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v14) = v13;
    ++*(_DWORD *)(a3 + 24);
    BasePtr = (llvm::Value *)llvm::GCRelocateInst::getBasePtr(a2);
    v16 = llvm::GVNPass::ValueTable::lookupOrAdd(this, BasePtr);
    v17 = *(unsigned int *)(a3 + 24);
    if (v17 >= *(_DWORD *)(a3 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v17 + 1, 4);
      LODWORD(v17) = *(_DWORD *)(a3 + 24);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v17) = v16;
    ++*(_DWORD *)(a3 + 24);
    DerivedPtr = (llvm::Value *)llvm::GCRelocateInst::getDerivedPtr(a2);
    v19 = llvm::GVNPass::ValueTable::lookupOrAdd(this, DerivedPtr);
    v20 = *(unsigned int *)(a3 + 24);
    if (v20 >= *(_DWORD *)(a3 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v20 + 1, 4);
      LODWORD(v20) = *(_DWORD *)(a3 + 24);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v20) = v19;
    ++*(_DWORD *)(a3 + 24);
  }
  else
  {
    if ((v12 & 0x40000000) != 0)
    {
      v22 = (llvm::Value **)*((_QWORD *)a2 - 1);
      v21 = v12 & 0x7FFFFFF;
      if (!v21)
        goto LABEL_22;
    }
    else
    {
      v21 = v12 & 0x7FFFFFF;
      v22 = (llvm::Value **)((char *)a2 - 32 * v21);
      if (!v21)
        goto LABEL_22;
    }
    v23 = 32 * v21;
    do
    {
      v24 = llvm::GVNPass::ValueTable::lookupOrAdd(this, *v22);
      v25 = *(unsigned int *)(a3 + 24);
      if (v25 >= *(unsigned int *)(a3 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v25 + 1, 4);
        v25 = *(unsigned int *)(a3 + 24);
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v25) = v24;
      ++*(_DWORD *)(a3 + 24);
      v22 += 4;
      v23 -= 32;
    }
    while (v23);
  }
LABEL_22:
  result = (void *)llvm::Instruction::isCommutative(a2);
  if ((_DWORD)result)
  {
    v27 = *v7;
    v28 = **v7;
    v29 = (*v7)[1];
    if (v28 > v29)
    {
      *v27 = v29;
      v27[1] = v28;
    }
    *(_BYTE *)(a3 + 4) = 1;
  }
  v30 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || (v30 - 83) < 0xFFFFFFFE)
  {
    if (a2 && v30 == 93)
    {
      v35 = (const void *)*((_QWORD *)a2 + 8);
      v36 = *((unsigned int *)a2 + 18);
      v37 = *(unsigned int *)(a3 + 24);
      if (v37 + v36 > (unint64_t)*(unsigned int *)(a3 + 28))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v37 + v36, 4);
        LODWORD(v37) = *(_DWORD *)(a3 + 24);
        if (!(_DWORD)v36)
          goto LABEL_44;
        goto LABEL_35;
      }
      if ((_DWORD)v36)
      {
LABEL_35:
        result = memcpy((void *)(*(_QWORD *)(a3 + 16) + 4 * v37), v35, 4 * v36);
LABEL_43:
        LODWORD(v37) = *(_DWORD *)(a3 + 24);
      }
    }
    else
    {
      if (!a2 || v30 != 91)
        return result;
      v38 = (int *)*((_QWORD *)a2 + 8);
      v36 = *((unsigned int *)a2 + 18);
      v37 = *(unsigned int *)(a3 + 24);
      if (v37 + v36 > (unint64_t)*(unsigned int *)(a3 + 28))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v37 + v36, 4);
        v37 = *(unsigned int *)(a3 + 24);
      }
      if ((_DWORD)v36)
      {
        v39 = &(*v7)[v37];
        v40 = 4 * v36;
        do
        {
          v41 = *v38++;
          *v39++ = v41;
          v40 -= 4;
        }
        while (v40);
        goto LABEL_43;
      }
    }
LABEL_44:
    *(_DWORD *)(a3 + 24) = v37 + v36;
    return result;
  }
  v31 = *((_WORD *)a2 + 9) & 0x3F;
  v32 = *v7;
  v33 = **v7;
  v34 = (*v7)[1];
  if (v33 > v34)
  {
    *v32 = v34;
    v32[1] = v33;
    LODWORD(v31) = dword_1C8668D0C[v31];
  }
  *(_DWORD *)a3 = v31 | ((v30 << 8) - 7168);
  *(_BYTE *)(a3 + 4) = 1;
  return result;
}

uint64_t llvm::GVNPass::ValueTable::lookupOrAdd(llvm::GVNPass::ValueTable *this, llvm::Value *a2)
{
  llvm::Value *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v14;
  void *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  int v26;
  int v27;
  unsigned int v28;
  llvm::Value **v29;
  llvm::Value *v30;
  llvm::Value **v31;
  int v32;
  llvm::Value **v33;
  int v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  _QWORD *v41;
  int v42;
  int v43;
  unsigned int v44;
  llvm::Value **v45;
  llvm::Value *v46;
  llvm::Value **v47;
  int v48;
  llvm::Value **v49;
  BOOL v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  llvm::Value *v59;
  __int128 v60;
  void *__src;
  uint64_t v62;
  _BYTE v63[16];
  __int128 v64;
  void *__dst;
  uint64_t v66;
  _QWORD v67[4];

  v2 = a2;
  v67[3] = *MEMORY[0x1E0C80C00];
  v59 = a2;
  v4 = *(_QWORD *)this;
  v5 = *((unsigned int *)this + 4);
  v6 = a2 >> 4;
  if ((_DWORD)v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = v4 + 16 * v7;
    v9 = *(llvm::Value **)v8;
    if (*(llvm::Value **)v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(llvm::Value **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = v4 + 16 * v7;
        goto LABEL_8;
      }
    }
  }
  v8 = v4 + 16 * v5;
LABEL_8:
  if (v8 != v4 + 16 * v5)
    return *(unsigned int *)(v8 + 8);
  v14 = *((unsigned __int8 *)a2 + 16);
  if (v14 <= 0x1B)
  {
    v42 = *((_DWORD *)this + 44);
    if ((_DWORD)v5)
    {
      v43 = v5 - 1;
      v44 = v43 & (v6 ^ (a2 >> 9));
      v45 = (llvm::Value **)(v4 + 16 * v44);
      v46 = *v45;
      if (*v45 == a2)
      {
LABEL_63:
        *((_DWORD *)v45 + 2) = v42;
        v12 = *((unsigned int *)this + 44);
        *((_DWORD *)this + 44) = v12 + 1;
        return v12;
      }
      v47 = 0;
      v48 = 1;
      while (v46 != (llvm::Value *)-4096)
      {
        if (v47)
          v56 = 0;
        else
          v56 = v46 == (llvm::Value *)-8192;
        if (v56)
          v47 = v45;
        v57 = v44 + v48++;
        v44 = v57 & v43;
        v45 = (llvm::Value **)(v4 + 16 * v44);
        v46 = *v45;
        if (*v45 == a2)
          goto LABEL_63;
      }
      if (v47)
        v49 = v47;
      else
        v49 = v45;
    }
    else
    {
      v49 = 0;
    }
    v45 = (llvm::Value **)sub_1C4E38190((uint64_t)this, (uint64_t)&v59, (uint64_t *)&v59, v49);
    *v45 = v59;
    *((_DWORD *)v45 + 2) = 0;
    goto LABEL_63;
  }
  LODWORD(v64) = -3;
  BYTE4(v64) = 0;
  *((_QWORD *)&v64 + 1) = 0;
  __dst = v67;
  v66 = 0x400000000;
  switch(v14)
  {
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case '>':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'Q':
    case 'R':
    case 'U':
    case 'Y':
    case 'Z':
    case '[':
    case ']':
    case '_':
      llvm::GVNPass::ValueTable::createExpr(this, a2, (uint64_t)&v60);
      goto LABEL_14;
    case 'S':
      v34 = *((_DWORD *)this + 44);
      if (!(_DWORD)v5)
      {
        v41 = 0;
LABEL_53:
        v37 = sub_1C4E38190((uint64_t)this, (uint64_t)&v59, (uint64_t *)&v59, v41);
        *v37 = v59;
        *((_DWORD *)v37 + 2) = 0;
        v2 = v59;
        goto LABEL_54;
      }
      v35 = v5 - 1;
      v36 = v35 & (v6 ^ (a2 >> 9));
      v37 = (_QWORD *)(v4 + 16 * v36);
      v38 = *v37;
      if ((llvm::Value *)*v37 == a2)
        goto LABEL_54;
      v39 = 0;
      v40 = 1;
      do
      {
        if (v38 == -4096)
        {
          if (v39)
            v41 = v39;
          else
            v41 = v37;
          goto LABEL_53;
        }
        if (v39)
          v54 = 0;
        else
          v54 = v38 == -8192;
        if (v54)
          v39 = v37;
        v55 = v36 + v40++;
        v36 = v55 & v35;
        v37 = (_QWORD *)(v4 + 16 * v36);
        v38 = *v37;
      }
      while ((llvm::Value *)*v37 != a2);
LABEL_54:
      *((_DWORD *)v37 + 2) = v34;
      *(_QWORD *)(sub_1C514D9B4((uint64_t)this + 104, (_DWORD *)this + 44) + 8) = v2;
LABEL_44:
      v12 = *((unsigned int *)this + 44);
      *((_DWORD *)this + 44) = v12 + 1;
LABEL_33:
      if (__dst != v67)
        free(__dst);
      return v12;
    case 'T':
      v12 = llvm::GVNPass::ValueTable::lookupOrAddCall(this, a2);
      goto LABEL_33;
    case '\\':
      llvm::GVNPass::ValueTable::createExtractvalueExpr(this, a2, (uint64_t)&v60);
LABEL_14:
      v64 = v60;
      v15 = __src;
      if (__src == v63)
      {
        v16 = v62;
        if (v66 >= v62)
        {
          if ((_DWORD)v62)
            memmove(__dst, __src, 4 * v62);
          goto LABEL_21;
        }
        if (HIDWORD(v66) < v62)
        {
          LODWORD(v66) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v67, v62, 4);
        }
        else if ((_DWORD)v66)
        {
          v58 = v66;
          memmove(__dst, __src, 4 * v66);
          v17 = v58;
LABEL_19:
          if (v17 != v62)
            memcpy((char *)__dst + 4 * v17, (char *)__src + 4 * v17, 4 * v62 - 4 * v17);
LABEL_21:
          LODWORD(v66) = v16;
          goto LABEL_22;
        }
        v17 = 0;
        goto LABEL_19;
      }
      if (__dst != v67)
      {
        free(__dst);
        v15 = __src;
      }
      __dst = v15;
      v66 = v62;
      __src = v63;
      HIDWORD(v62) = 0;
LABEL_22:
      LODWORD(v62) = 0;
      if (__src != v63)
        free(__src);
      v12 = llvm::GVNPass::ValueTable::assignExpNewValueNum((uint64_t)this, (uint64_t)&v64);
      v18 = *((_DWORD *)this + 4);
      if (v18)
      {
        v19 = v18 - 1;
        v20 = ((v59 >> 4) ^ (v59 >> 9)) & v19;
        v21 = (_QWORD *)(*(_QWORD *)this + 16 * v20);
        v22 = *v21;
        if (v59 == (llvm::Value *)*v21)
        {
LABEL_32:
          *((_DWORD *)v21 + 2) = v12;
          goto LABEL_33;
        }
        v23 = 0;
        v24 = 1;
        while (v22 != -4096)
        {
          if (v23)
            v50 = 0;
          else
            v50 = v22 == -8192;
          if (v50)
            v23 = v21;
          v51 = v20 + v24++;
          v20 = v51 & v19;
          v21 = (_QWORD *)(*(_QWORD *)this + 16 * v20);
          v22 = *v21;
          if (v59 == (llvm::Value *)*v21)
            goto LABEL_32;
        }
        if (v23)
          v25 = v23;
        else
          v25 = v21;
      }
      else
      {
        v25 = 0;
      }
      v21 = sub_1C4E38190((uint64_t)this, (uint64_t)&v59, (uint64_t *)&v59, v25);
      *v21 = v59;
      *((_DWORD *)v21 + 2) = 0;
      goto LABEL_32;
    default:
      v26 = *((_DWORD *)this + 44);
      if ((_DWORD)v5)
      {
        v27 = v5 - 1;
        v28 = v27 & (v6 ^ (a2 >> 9));
        v29 = (llvm::Value **)(v4 + 16 * v28);
        v30 = *v29;
        if (*v29 == a2)
          goto LABEL_43;
        v31 = 0;
        v32 = 1;
        while (v30 != (llvm::Value *)-4096)
        {
          if (v31)
            v52 = 0;
          else
            v52 = v30 == (llvm::Value *)-8192;
          if (v52)
            v31 = v29;
          v53 = v28 + v32++;
          v28 = v53 & v27;
          v29 = (llvm::Value **)(v4 + 16 * v28);
          v30 = *v29;
          if (*v29 == a2)
          {
LABEL_43:
            *((_DWORD *)v29 + 2) = v26;
            goto LABEL_44;
          }
        }
        if (v31)
          v33 = v31;
        else
          v33 = v29;
      }
      else
      {
        v33 = 0;
      }
      v29 = (llvm::Value **)sub_1C4E38190((uint64_t)this, (uint64_t)&v59, (uint64_t *)&v59, v33);
      *v29 = v59;
      *((_DWORD *)v29 + 2) = 0;
      goto LABEL_43;
  }
}

void *llvm::GVNPass::ValueTable::createCmpExpr@<X0>(llvm::GVNPass::ValueTable *a1@<X0>, int a2@<W1>, int a3@<W2>, llvm::Value *a4@<X3>, llvm::Value *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *result;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  *(_DWORD *)a6 = -3;
  *(_BYTE *)(a6 + 4) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v12 = a6 + 32;
  *(_QWORD *)(a6 + 16) = a6 + 32;
  v13 = a6 + 16;
  *(_QWORD *)(a6 + 24) = 0x400000000;
  sub_1C4774CC4(*(_DWORD **)a4);
  *(_QWORD *)(a6 + 8) = v14;
  v15 = llvm::GVNPass::ValueTable::lookupOrAdd(a1, a4);
  v16 = *(unsigned int *)(a6 + 24);
  if (v16 >= *(_DWORD *)(a6 + 28))
  {
    v23 = v15;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v16 + 1, 4);
    v15 = v23;
    LODWORD(v16) = *(_DWORD *)(a6 + 24);
  }
  *(_DWORD *)(*(_QWORD *)(a6 + 16) + 4 * v16) = v15;
  ++*(_DWORD *)(a6 + 24);
  result = (void *)llvm::GVNPass::ValueTable::lookupOrAdd(a1, a5);
  v18 = (int)result;
  v19 = *(unsigned int *)(a6 + 24);
  if (v19 >= *(_DWORD *)(a6 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v19 + 1, 4);
    LODWORD(v19) = *(_DWORD *)(a6 + 24);
  }
  *(_DWORD *)(*(_QWORD *)(a6 + 16) + 4 * v19) = v18;
  ++*(_DWORD *)(a6 + 24);
  v20 = *(unsigned int **)(a6 + 16);
  v21 = *v20;
  v22 = v20[1];
  if (*v20 > v22)
  {
    *v20 = v22;
    v20[1] = v21;
    a3 = dword_1C8668D0C[a3];
  }
  *(_DWORD *)a6 = a3 | (a2 << 8);
  *(_BYTE *)(a6 + 4) = 1;
  return result;
}

_BYTE *llvm::GVNPass::ValueTable::createExtractvalueExpr@<X0>(llvm::GVNPass::ValueTable *this@<X0>, llvm::ExtractValueInst *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  llvm::Value **v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  _BYTE *result;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  *(_BYTE *)(a3 + 4) = 0;
  v6 = a3 + 32;
  *(_QWORD *)(a3 + 16) = a3 + 32;
  v7 = (unsigned int *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0x400000000;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a2;
  *(_DWORD *)a3 = 0;
  v8 = *((_QWORD *)a2 - 4);
  v9 = sub_1C4E8FD48(v8);
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (v10 || *((_DWORD *)a2 + 18) != 1 || **((_DWORD **)a2 + 8))
  {
    *(_DWORD *)a3 = *((unsigned __int8 *)a2 + 16) - 28;
    v11 = *((_DWORD *)a2 + 5);
    if ((v11 & 0x40000000) != 0)
    {
      v13 = (llvm::Value **)*((_QWORD *)a2 - 1);
      v12 = v11 & 0x7FFFFFF;
      if (v12)
      {
LABEL_9:
        v14 = 32 * v12;
        do
        {
          v15 = llvm::GVNPass::ValueTable::lookupOrAdd(this, *v13);
          v16 = *(unsigned int *)(a3 + 24);
          if (v16 >= *(unsigned int *)(a3 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v16 + 1, 4);
            v16 = *(unsigned int *)(a3 + 24);
          }
          *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v16) = v15;
          v17 = *(_DWORD *)(a3 + 24) + 1;
          *(_DWORD *)(a3 + 24) = v17;
          v13 += 4;
          v14 -= 32;
        }
        while (v14);
        return sub_1C50101C4(v7, *(_QWORD *)v7 + 4 * v17, *((char **)a2 + 8), (char *)(*((_QWORD *)a2 + 8) + 4 * *((unsigned int *)a2 + 18)));
      }
    }
    else
    {
      v12 = v11 & 0x7FFFFFF;
      v13 = (llvm::Value **)((char *)a2 - 32 * v12);
      if (v12)
        goto LABEL_9;
    }
    v17 = *(_DWORD *)(a3 + 24);
    return sub_1C50101C4(v7, *(_QWORD *)v7 + 4 * v17, *((char **)a2 + 8), (char *)(*((_QWORD *)a2 + 8) + 4 * *((unsigned int *)a2 + 18)));
  }
  v19 = 13;
  if (((1 << (*(_BYTE *)(*(_QWORD *)(v8 - 32) + 36) - 6)) & 0xC000000003) == 0)
  {
    if (((1 << (*(_BYTE *)(*(_QWORD *)(v8 - 32) + 36) - 6)) & 0x6000000600000) != 0)
      v19 = 15;
    else
      v19 = 17;
  }
  *(_DWORD *)a3 = v19;
  v20 = llvm::GVNPass::ValueTable::lookupOrAdd(this, *(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
  v21 = *(unsigned int *)(a3 + 24);
  if (v21 >= *(_DWORD *)(a3 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v21 + 1, 4);
    LODWORD(v21) = *(_DWORD *)(a3 + 24);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v21) = v20;
  ++*(_DWORD *)(a3 + 24);
  result = (_BYTE *)llvm::GVNPass::ValueTable::lookupOrAdd(this, *(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
  v22 = (int)result;
  v23 = *(unsigned int *)(a3 + 24);
  if (v23 >= *(_DWORD *)(a3 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v6, v23 + 1, 4);
    LODWORD(v23) = *(_DWORD *)(a3 + 24);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v23) = v22;
  ++*(_DWORD *)(a3 + 24);
  return result;
}

double llvm::GVNPass::ValueTable::ValueTable(llvm::GVNPass::ValueTable *this)
{
  double result;

  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 44) = 1;
  return result;
}

{
  double result;

  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 44) = 1;
  return result;
}

llvm::GVNPass::ValueTable *llvm::GVNPass::ValueTable::ValueTable(llvm::GVNPass::ValueTable *this, const llvm::GVNPass::ValueTable *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  sub_1C4DFEB14((uint64_t)this, (uint64_t)a2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  sub_1C5B11A9C((uint64_t)this + 24, (uint64_t *)a2 + 3);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  v4 = *((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)a2 + 8);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      abort();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *((_QWORD *)this + 7) = v8;
    *((_QWORD *)this + 8) = v8;
    *((_QWORD *)this + 9) = &v8[48 * v7];
    while (1)
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      *(_OWORD *)v11 = *(_OWORD *)(v4 + v9);
      v12 = &v8[v9 + 32];
      *(_QWORD *)&v8[v9 + 16] = v12;
      *((_QWORD *)v11 + 3) = 0x400000000;
      v13 = *(_DWORD *)(v4 + v9 + 24);
      if (v13)
        v14 = v11 == (char *)v10;
      else
        v14 = 1;
      if (v14)
        goto LABEL_12;
      if (v13 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8[v9 + 16], (uint64_t)&v8[v9 + 32], *(unsigned int *)(v4 + v9 + 24), 4);
        v15 = *(unsigned int *)(v10 + 24);
        if (!(_DWORD)v15)
          goto LABEL_11;
        v12 = *(char **)&v8[v9 + 16];
      }
      else
      {
        v15 = *(unsigned int *)(v4 + v9 + 24);
      }
      memcpy(v12, *(const void **)(v10 + 16), 4 * v15);
LABEL_11:
      *((_DWORD *)v11 + 6) = v13;
LABEL_12:
      v9 += 48;
      if (v4 + v9 == v5)
      {
        *((_QWORD *)this + 8) = &v8[v9];
        break;
      }
    }
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  sub_1C4979194((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 13) = 0;
  sub_1C4DFEB14((uint64_t)this + 104, (uint64_t)a2 + 104);
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 16) = 0;
  sub_1C5B11C78((char **)this + 16, (uint64_t)a2 + 128);
  v16 = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)this + 164) = *(_OWORD *)((char *)a2 + 164);
  *(_OWORD *)((char *)this + 152) = v16;
  return this;
}

void llvm::GVNPass::ValueTable::~ValueTable(llvm::GVNPass::ValueTable *this)
{
  void *v2;
  void **v3;

  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 16), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 13), 8);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 56);
  sub_1C5B11A1C(&v3);
  sub_1C5B118C4((uint64_t)this + 24);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 3), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)this, 8);
}

uint64_t llvm::GVNPass::ValueTable::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void **v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = a2;
  v3 = a1;
  if (a2 == a1)
    goto LABEL_88;
  sub_1C4DFEB14(a1, a2);
  sub_1C5B11A9C(v3 + 24, (uint64_t *)(v2 + 24));
  v4 = (void **)(v3 + 56);
  v5 = *(char **)(v3 + 56);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(v2 + 48);
  v7 = *(char **)(v2 + 56);
  v6 = *(char **)(v2 + 64);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
  v9 = *(_QWORD *)(v3 + 72);
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v5) >> 4) < v8)
  {
    if (v5)
    {
      v10 = *(char **)(v3 + 64);
      v11 = v5;
      if (v10 != v5)
      {
        v12 = v10 - 16;
        do
        {
          v13 = (char *)*((_QWORD *)v12 - 2);
          if (v12 != v13)
            free(v13);
          v14 = v12 - 32;
          v12 -= 48;
        }
        while (v14 != v5);
        v11 = *v4;
      }
      *(_QWORD *)(v3 + 64) = v5;
      operator delete(v11);
      v9 = 0;
      *v4 = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 72) = 0;
    }
    if (v8 > 0x555555555555555)
      goto LABEL_89;
    v15 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 4);
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
    v17 = v15 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v16;
    if (v17 > 0x555555555555555)
LABEL_89:
      abort();
    v18 = 3 * v17;
    v19 = (char *)operator new(48 * v17);
    *(_QWORD *)(v3 + 56) = v19;
    *(_QWORD *)(v3 + 64) = v19;
    *(_QWORD *)(v3 + 72) = &v19[16 * v18];
    if (v7 == v6)
    {
LABEL_49:
      *(_QWORD *)(v3 + 64) = v19;
      goto LABEL_87;
    }
    v20 = v2;
    v21 = v3;
    v22 = 0;
    while (1)
    {
      v23 = &v7[v22];
      v24 = &v19[v22];
      *(_OWORD *)v24 = *(_OWORD *)&v7[v22];
      v25 = &v19[v22 + 32];
      *(_QWORD *)&v19[v22 + 16] = v25;
      *((_QWORD *)v24 + 3) = 0x400000000;
      v26 = *(_DWORD *)&v7[v22 + 24];
      if (v26)
        v27 = v24 == v23;
      else
        v27 = 1;
      if (v27)
        goto LABEL_28;
      if (v26 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19[v22 + 16], (uint64_t)&v19[v22 + 32], *(unsigned int *)&v7[v22 + 24], 4);
        v28 = *((unsigned int *)v23 + 6);
        if (!(_DWORD)v28)
          goto LABEL_27;
        v25 = *(char **)&v19[v22 + 16];
      }
      else
      {
        v28 = *(unsigned int *)&v7[v22 + 24];
      }
      memcpy(v25, *((const void **)v23 + 2), 4 * v28);
LABEL_27:
      *((_DWORD *)v24 + 6) = v26;
LABEL_28:
      v22 += 48;
      if (&v7[v22] == v6)
      {
        v19 += v22;
        v3 = v21;
        v2 = v20;
        goto LABEL_49;
      }
    }
  }
  v29 = *(char **)(v3 + 64);
  if (0xAAAAAAAAAAAAAAABLL * ((v29 - v5) >> 4) >= v8)
  {
    if (v7 == v6)
    {
LABEL_80:
      if (v29 != v5)
      {
        v54 = v29 - 16;
        do
        {
          v55 = (char *)*((_QWORD *)v54 - 2);
          if (v54 != v55)
            free(v55);
          v56 = v54 - 32;
          v54 -= 48;
        }
        while (v56 != v5);
      }
      *(_QWORD *)(v3 + 64) = v5;
      goto LABEL_87;
    }
    v61 = v2;
    v38 = v3;
    v39 = 0;
    while (1)
    {
      v40 = &v5[v39];
      v41 = &v7[v39];
      *(_OWORD *)&v5[v39] = *(_OWORD *)&v7[v39];
      if (v7 != v5)
        break;
LABEL_62:
      v39 += 48;
      if (&v7[v39] == v6)
      {
        v3 = v38;
        v29 = *(char **)(v38 + 64);
        v5 += v39;
        v2 = v61;
        goto LABEL_80;
      }
    }
    v42 = (void **)(v40 + 16);
    v43 = *((unsigned int *)v41 + 6);
    v44 = *((unsigned int *)v40 + 6);
    if (v44 >= v43)
    {
      if ((_DWORD)v43)
        memmove(*v42, *((const void **)v41 + 2), 4 * v43);
      goto LABEL_61;
    }
    if (*(_DWORD *)&v5[v39 + 28] < v43)
    {
      *((_DWORD *)v40 + 6) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v40 + 16), (uint64_t)&v5[v39 + 32], v43, 4);
    }
    else if ((_DWORD)v44)
    {
      memmove(*v42, *((const void **)v41 + 2), 4 * v44);
LABEL_57:
      v45 = *((unsigned int *)v41 + 6);
      if (v44 != v45)
        memcpy((char *)*v42 + 4 * v44, (const void *)(*((_QWORD *)v41 + 2) + 4 * v44), 4 * v45 - 4 * v44);
LABEL_61:
      *((_DWORD *)v40 + 6) = v43;
      goto LABEL_62;
    }
    v44 = 0;
    goto LABEL_57;
  }
  v59 = v3;
  v60 = v2;
  v30 = &v7[16 * ((v29 - v5) >> 4)];
  if (v29 == v5)
    goto LABEL_66;
  v31 = 0;
  v62 = 16 * ((v29 - v5) >> 4);
  do
  {
    v32 = &v5[v31];
    v33 = &v7[v31];
    *(_OWORD *)&v5[v31] = *(_OWORD *)&v7[v31];
    if (v7 == v5)
      goto LABEL_45;
    v34 = (void **)(v32 + 16);
    v35 = *((unsigned int *)v33 + 6);
    v36 = *((unsigned int *)v32 + 6);
    if (v36 >= v35)
    {
      if ((_DWORD)v35)
        memmove(*v34, *((const void **)v33 + 2), 4 * v35);
      goto LABEL_44;
    }
    if (*(_DWORD *)&v5[v31 + 28] < v35)
    {
      *((_DWORD *)v32 + 6) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v32 + 16), (uint64_t)&v5[v31 + 32], v35, 4);
LABEL_39:
      v36 = 0;
      goto LABEL_40;
    }
    if (!(_DWORD)v36)
      goto LABEL_39;
    memmove(*v34, *((const void **)v33 + 2), 4 * v36);
LABEL_40:
    v37 = *((unsigned int *)v33 + 6);
    if (v36 != v37)
      memcpy((char *)*v34 + 4 * v36, (const void *)(*((_QWORD *)v33 + 2) + 4 * v36), 4 * v37 - 4 * v36);
LABEL_44:
    *((_DWORD *)v32 + 6) = v35;
LABEL_45:
    v31 += 48;
  }
  while (v62 != v31);
  v5 = *(char **)(v59 + 64);
LABEL_66:
  v46 = v5;
  if (v30 == v6)
    goto LABEL_86;
  v47 = 0;
  while (2)
  {
    v48 = &v30[v47];
    v49 = &v5[v47];
    *(_OWORD *)v49 = *(_OWORD *)&v30[v47];
    v50 = &v5[v47 + 32];
    *(_QWORD *)&v5[v47 + 16] = v50;
    *((_QWORD *)v49 + 3) = 0x400000000;
    v51 = *(_DWORD *)&v30[v47 + 24];
    if (v51)
      v52 = v49 == v48;
    else
      v52 = 1;
    if (!v52)
    {
      if (v51 < 5)
      {
        v53 = *(unsigned int *)&v30[v47 + 24];
        goto LABEL_74;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v5[v47 + 16], (uint64_t)&v5[v47 + 32], *(unsigned int *)&v30[v47 + 24], 4);
      v53 = *((unsigned int *)v48 + 6);
      if ((_DWORD)v53)
      {
        v50 = *(char **)&v5[v47 + 16];
LABEL_74:
        memcpy(v50, *((const void **)v48 + 2), 4 * v53);
      }
      *((_DWORD *)v49 + 6) = v51;
    }
    v47 += 48;
    if (&v30[v47] != v6)
      continue;
    break;
  }
  v46 = &v5[v47];
LABEL_86:
  v3 = v59;
  v2 = v60;
  *(_QWORD *)(v59 + 64) = v46;
LABEL_87:
  sub_1C4FCE520((_QWORD *)(v3 + 80), *(char **)(v2 + 80), *(char **)(v2 + 88), (uint64_t)(*(_QWORD *)(v2 + 88) - *(_QWORD *)(v2 + 80)) >> 2);
  sub_1C4DFEB14(v3 + 104, v2 + 104);
  sub_1C5B11C78((char **)(v3 + 128), v2 + 128);
LABEL_88:
  v57 = *(_OWORD *)(v2 + 152);
  *(_OWORD *)(v3 + 164) = *(_OWORD *)(v2 + 164);
  *(_OWORD *)(v3 + 152) = v57;
  return v3;
}

uint64_t llvm::GVNPass::ValueTable::add(llvm::GVNPass::ValueTable *this, llvm::Value *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v6;
  llvm::Value *v7;
  uint64_t v8;
  unsigned int v9;

  v9 = a3;
  v7 = a2;
  v8 = a3;
  result = (uint64_t)sub_1C5ADC8F0((uint64_t)this, (uint64_t *)&v7, &v8, (uint64_t)&v6);
  if (a2)
  {
    if (*((_BYTE *)a2 + 16) == 83)
    {
      result = sub_1C514D9B4((uint64_t)this + 104, &v9);
      *(_QWORD *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t llvm::GVNPass::ValueTable::lookupOrAddCall(llvm::GVNPass::ValueTable *this, llvm::CallInst *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t Dependency;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  llvm::CallInst *v73;
  uint64_t v74[2];
  void *v75;
  _QWORD v76[3];

  v76[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 19);
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD **)(v4 + 16);
  if (v5 != v6)
  {
    v7 = 63;
    while (1)
    {
      v7 &= (*(uint64_t (**)(_QWORD, llvm::CallInst *))(*(_QWORD *)*v5 + 48))(*v5, a2);
      if (v7 == 4)
        break;
      if (++v5 == v6)
        goto LABEL_5;
    }
    llvm::GVNPass::ValueTable::createExpr(this, a2, (uint64_t)v74);
    v34 = llvm::GVNPass::ValueTable::assignExpNewValueNum((uint64_t)this, (uint64_t)v74);
    v73 = a2;
    *((_DWORD *)sub_1C4EA30AC((uint64_t)this, (uint64_t *)&v73) + 2) = v34;
    v35 = v75;
    goto LABEL_70;
  }
LABEL_5:
  if (!*((_QWORD *)this + 20)
    || (v8 = *((_QWORD *)this + 19), v9 = *(_QWORD **)(v8 + 8), v10 = *(_QWORD **)(v8 + 16), v9 == v10))
  {
LABEL_35:
    v33 = *((_DWORD *)this + 44);
    v74[0] = (uint64_t)a2;
    *((_DWORD *)sub_1C4EA30AC((uint64_t)this, v74) + 2) = v33;
    v34 = *((unsigned int *)this + 44);
    *((_DWORD *)this + 44) = v34 + 1;
    return v34;
  }
  v11 = 63;
  while (1)
  {
    v11 &= (*(uint64_t (**)(_QWORD, llvm::CallInst *))(*(_QWORD *)*v9 + 48))(*v9, a2);
    if (v11 == 4)
      break;
    if (++v9 == v10)
    {
      if ((v11 & 2) != 0)
        goto LABEL_35;
      break;
    }
  }
  llvm::GVNPass::ValueTable::createExpr(this, a2, (uint64_t)v74);
  v12 = llvm::GVNPass::ValueTable::assignExpNewValueNum((uint64_t)this, (uint64_t)v74);
  if (HIDWORD(v12))
  {
    v34 = v12;
    v73 = a2;
    *((_DWORD *)sub_1C4EA30AC((uint64_t)this, (uint64_t *)&v73) + 2) = v12;
  }
  else
  {
    Dependency = llvm::MemoryDependenceResults::getDependency(*((llvm::MemoryDependenceResults **)this + 20), a2);
    if ((Dependency & 7) != 2 && (Dependency & 0xE000000000000007) != 0x2000000000000003)
      goto LABEL_68;
    if ((Dependency & 7) != 2)
    {
      v36 = llvm::MemoryDependenceResults::getNonLocalCallDependency(*((llvm::MemoryDependenceResults **)this + 20), a2);
      v37 = v36[1] - *v36;
      if ((v37 & 0xFFFFFFFF0) != 0)
      {
        v38 = v36;
        v39 = 0;
        v15 = 0;
        v40 = (v37 >> 4);
        while (1)
        {
          v41 = *(_QWORD *)(*v38 + v39 + 8);
          if ((v41 & 0xE000000000000007) != 0x2000000000000003)
          {
            if ((*(_QWORD *)(*v38 + v39 + 8) & 7) != 2 || v15 != 0)
              break;
            v15 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 0xFFFFFFFFFFFFFFF8) == 0
              || *(_BYTE *)(v15 + 16) != 84
              || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*((_QWORD *)this + 21), *(_QWORD *)(*v38 + v39), *((_QWORD *)a2 + 5)))
            {
              break;
            }
          }
          v39 += 16;
          if (!--v40)
          {
            if (v15)
            {
              v43 = *(unsigned __int8 *)(v15 + 16);
              if (v43 == 84)
              {
                v44 = 0;
              }
              else if (v43 == 39)
              {
                v44 = (*(_DWORD *)(v15 + 80) + 1);
              }
              else
              {
                v44 = 2;
              }
              v45 = 0;
              v46 = *(_DWORD *)(v15 + 20);
              v47 = -(uint64_t)(v46 & 0x7FFFFFF);
              if (v46 < 0)
              {
                v68 = v15 - 32 * (v46 & 0x7FFFFFF);
                v69 = *(_QWORD *)(v68 - 8);
                if ((v69 & 0xFFFFFFFF0) != 0)
                  v45 = *(_DWORD *)(v68 - 12) - *(_DWORD *)(v68 - v69);
                else
                  v45 = 0;
              }
              v48 = (-32 * v44 + 32 * (unint64_t)-v45 - 32 * v47 - 32) >> 5;
              v49 = *((unsigned __int8 *)a2 + 16);
              if (v49 == 84)
              {
                v50 = 0;
              }
              else if (v49 == 39)
              {
                v50 = (*((_DWORD *)a2 + 20) + 1);
              }
              else
              {
                v50 = 2;
              }
              v51 = 0;
              v52 = *((_DWORD *)a2 + 5);
              if (v52 < 0)
              {
                v70 = (char *)a2 - 32 * (v52 & 0x7FFFFFF);
                v71 = *((_QWORD *)v70 - 1);
                if ((v71 & 0xFFFFFFFF0) != 0)
                  v51 = *((_DWORD *)v70 - 3) - *(_DWORD *)&v70[-v71];
                else
                  v51 = 0;
              }
              v53 = (char *)a2 + 32 * -v51 + -32 * v50;
              v54 = (char *)a2 - 32 * (v52 & 0x7FFFFFF);
              if ((_DWORD)v48 == ((unint64_t)(v53 - v54 - 32) >> 5))
              {
                if (v49 == 84)
                {
                  v55 = 0;
                }
                else if (v49 == 39)
                {
                  v55 = (*((_DWORD *)a2 + 20) + 1);
                }
                else
                {
                  v55 = 2;
                }
                if (v52 < 0 && (v72 = *((_QWORD *)v54 - 1), (v72 & 0xFFFFFFFF0) != 0))
                  v56 = (*((_DWORD *)v54 - 3) - *(_DWORD *)&v54[-v72]);
                else
                  v56 = 0;
                v57 = (llvm::CallInst *)((char *)a2 - 32 * v55 + -32 * v56) - (llvm::CallInst *)v54 - 32;
                if ((v57 & 0x1FFFFFFFE0) == 0)
                  goto LABEL_67;
                v58 = 0;
                v59 = -(uint64_t)(v57 >> 5);
                while (1)
                {
                  v60 = llvm::GVNPass::ValueTable::lookupOrAdd(this, *(llvm::Value **)((char *)a2 + v58 + -32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
                  if (v60 != llvm::GVNPass::ValueTable::lookupOrAdd(this, *(llvm::Value **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + v58)))break;
                  v58 += 32;
                  v32 = __CFADD__(v59++, 1);
                  if (v32)
                    goto LABEL_67;
                }
              }
            }
            goto LABEL_68;
          }
        }
      }
      goto LABEL_68;
    }
    v15 = Dependency & 0xFFFFFFFFFFFFFFF8;
    if ((Dependency & 0xFFFFFFFFFFFFFFF8) == 0 || *(_BYTE *)(v15 + 16) != 84)
      goto LABEL_68;
    v16 = 0;
    v17 = *(_DWORD *)(v15 + 20);
    v18 = -(uint64_t)(v17 & 0x7FFFFFF);
    if (v17 < 0)
    {
      v63 = v15 - 32 * (v17 & 0x7FFFFFF);
      v64 = *(_QWORD *)(v63 - 8);
      if ((v64 & 0xFFFFFFFF0) != 0)
        v16 = *(_DWORD *)(v63 - 12) - *(_DWORD *)(v63 - v64);
      else
        v16 = 0;
    }
    v19 = (32 * (unint64_t)-v16 - 32 * v18 - 32) >> 5;
    v20 = *((unsigned __int8 *)a2 + 16);
    if (v20 == 84)
    {
      v21 = 0;
    }
    else if (v20 == 39)
    {
      v21 = (*((_DWORD *)a2 + 20) + 1);
    }
    else
    {
      v21 = 2;
    }
    v22 = 0;
    v23 = *((_DWORD *)a2 + 5);
    if (v23 < 0)
    {
      v65 = (char *)a2 - 32 * (v23 & 0x7FFFFFF);
      v66 = *((_QWORD *)v65 - 1);
      if ((v66 & 0xFFFFFFFF0) != 0)
        v22 = *((_DWORD *)v65 - 3) - *(_DWORD *)&v65[-v66];
      else
        v22 = 0;
    }
    v24 = (char *)a2 + 32 * -v22 + -32 * v21;
    v25 = (char *)a2 - 32 * (v23 & 0x7FFFFFF);
    if ((_DWORD)v19 != ((unint64_t)(v24 - v25 - 32) >> 5))
    {
LABEL_68:
      v61 = *((_DWORD *)this + 44);
      v73 = a2;
      *((_DWORD *)sub_1C4EA30AC((uint64_t)this, (uint64_t *)&v73) + 2) = v61;
      v34 = *((unsigned int *)this + 44);
      *((_DWORD *)this + 44) = v34 + 1;
      goto LABEL_69;
    }
    if (v20 == 84)
    {
      v26 = 0;
    }
    else if (v20 == 39)
    {
      v26 = (*((_DWORD *)a2 + 20) + 1);
    }
    else
    {
      v26 = 2;
    }
    if (v23 < 0 && (v67 = *((_QWORD *)v25 - 1), (v67 & 0xFFFFFFFF0) != 0))
      v27 = (*((_DWORD *)v25 - 3) - *(_DWORD *)&v25[-v67]);
    else
      v27 = 0;
    v28 = (llvm::CallInst *)((char *)a2 - 32 * v26 + -32 * v27) - (llvm::CallInst *)v25 - 32;
    if ((v28 & 0x1FFFFFFFE0) != 0)
    {
      v29 = 0;
      v30 = -(uint64_t)(v28 >> 5);
      do
      {
        v31 = llvm::GVNPass::ValueTable::lookupOrAdd(this, *(llvm::Value **)((char *)a2 + v29 + -32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
        if (v31 != llvm::GVNPass::ValueTable::lookupOrAdd(this, *(llvm::Value **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + v29)))goto LABEL_68;
        v29 += 32;
        v32 = __CFADD__(v30++, 1);
      }
      while (!v32);
    }
LABEL_67:
    v34 = llvm::GVNPass::ValueTable::lookupOrAdd(this, (llvm::Value *)v15);
    v73 = a2;
    *((_DWORD *)sub_1C4EA30AC((uint64_t)this, (uint64_t *)&v73) + 2) = v34;
  }
LABEL_69:
  v35 = v75;
LABEL_70:
  if (v35 != v76)
    free(v35);
  return v34;
}

uint64_t llvm::GVNPass::ValueTable::assignExpNewValueNum(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  void **v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  void **v35;
  unsigned int v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;

  v4 = sub_1C5B12130(a1 + 24, a2);
  v5 = *(_DWORD *)(v4 + 48);
  if (v5)
  {
    v18 = 0;
    return v18 | v5;
  }
  v6 = v4;
  v8 = *(char **)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v8 < v7)
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    v9 = v8 + 32;
    *((_QWORD *)v8 + 2) = v8 + 32;
    *((_QWORD *)v8 + 3) = 0x400000000;
    v10 = *(_DWORD *)(a2 + 24);
    if (!v10 || v8 == (char *)a2)
      goto LABEL_9;
    if (v10 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 16), (uint64_t)(v8 + 32), *(unsigned int *)(a2 + 24), 4);
      v11 = *(unsigned int *)(a2 + 24);
      if (!(_DWORD)v11)
        goto LABEL_8;
      v9 = (void *)*((_QWORD *)v8 + 2);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 24);
    }
    memcpy(v9, *(const void **)(a2 + 16), 4 * v11);
LABEL_8:
    *((_DWORD *)v8 + 6) = v10;
LABEL_9:
    v12 = v8 + 48;
    goto LABEL_10;
  }
  v20 = *(char **)(a1 + 56);
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v20) >> 4) + 1;
  if (v21 > 0x555555555555555)
    abort();
  v47 = v4;
  v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v20) >> 4);
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x2AAAAAAAAAAAAAALL)
    v23 = 0x555555555555555;
  else
    v23 = v21;
  if (v23 > 0x555555555555555)
    sub_1C4764EE4();
  v24 = 3 * v23;
  v25 = (char *)operator new(48 * v23);
  v26 = &v25[16 * ((v8 - v20) >> 4)];
  *(_OWORD *)v26 = *(_OWORD *)a2;
  v27 = v26 + 32;
  *((_QWORD *)v26 + 2) = v26 + 32;
  v28 = (void **)(v26 + 16);
  *((_QWORD *)v26 + 3) = 0x400000000;
  v29 = *(unsigned int *)(a2 + 24);
  if (!(_DWORD)v29 || v28 == (void **)(a2 + 16))
    goto LABEL_26;
  if (v29 >= 5)
  {
    *((_DWORD *)v26 + 6) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v26 + 16), (uint64_t)(v26 + 32), v29, 4);
    v30 = *(unsigned int *)(a2 + 24);
    if (!(_DWORD)v30)
      goto LABEL_25;
    v27 = *v28;
  }
  else
  {
    v30 = *(unsigned int *)(a2 + 24);
  }
  memcpy(v27, *(const void **)(a2 + 16), 4 * v30);
LABEL_25:
  *((_DWORD *)v26 + 6) = v29;
  v20 = *(char **)(a1 + 56);
  v8 = *(char **)(a1 + 64);
LABEL_26:
  v12 = v26 + 48;
  if (v8 == v20)
  {
    *(_QWORD *)(a1 + 56) = v26;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 72) = &v25[16 * v24];
    goto LABEL_58;
  }
  v46 = &v25[16 * v24];
  v31 = 0;
  do
  {
    v32 = &v8[v31];
    v33 = &v26[v31];
    *((_OWORD *)v33 - 3) = *(_OWORD *)&v8[v31 - 48];
    v34 = &v26[v31 - 16];
    *(_QWORD *)&v26[v31 - 32] = v34;
    v35 = (void **)&v26[v31 - 32];
    *((_QWORD *)v33 - 3) = 0x400000000;
    v36 = *(_DWORD *)&v8[v31 - 24];
    if (v36)
      v37 = v33 == v32;
    else
      v37 = 1;
    if (!v37)
    {
      v38 = (char *)*((_QWORD *)v32 - 4);
      if (v32 - 16 != v38)
      {
        *v35 = v38;
        v40 = *(_DWORD *)&v8[v31 - 20];
        *((_DWORD *)v33 - 6) = v36;
        *((_DWORD *)v33 - 5) = v40;
        *((_QWORD *)v32 - 4) = v32 - 16;
        *(_DWORD *)&v8[v31 - 20] = 0;
        goto LABEL_37;
      }
      if (v36 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26[v31 - 32], (uint64_t)&v26[v31 - 16], *(unsigned int *)&v8[v31 - 24], 4);
        v39 = *((unsigned int *)v32 - 6);
        if (!(_DWORD)v39)
          goto LABEL_36;
        v38 = (char *)*((_QWORD *)v32 - 4);
        v34 = (char *)*v35;
      }
      else
      {
        v39 = *(unsigned int *)&v8[v31 - 24];
      }
      memcpy(v34, v38, 4 * v39);
LABEL_36:
      *((_DWORD *)v33 - 6) = v36;
LABEL_37:
      *((_DWORD *)v32 - 6) = 0;
    }
    v31 -= 48;
  }
  while (&v8[v31] != v20);
  v20 = *(char **)(a1 + 56);
  v41 = *(char **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = &v26[v31];
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v46;
  if (v41 == v20)
  {
LABEL_58:
    v6 = v47;
    goto LABEL_48;
  }
  v42 = v41 - 16;
  v6 = v47;
  do
  {
    v43 = (char *)*((_QWORD *)v42 - 2);
    if (v42 != v43)
      free(v43);
    v44 = v42 - 32;
    v42 -= 48;
  }
  while (v44 != v20);
LABEL_48:
  if (v20)
    operator delete(v20);
LABEL_10:
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v12;
  v14 = (*(_QWORD *)(a1 + 88) - v13) >> 2;
  v15 = *(_DWORD *)(a1 + 176);
  if (v14 < (v15 + 1))
  {
    v45 = (2 * v15);
    if (v45 <= v14)
    {
      if (v45 < v14)
        *(_QWORD *)(a1 + 88) = v13 + 4 * v45;
    }
    else
    {
      sub_1C4D63CD0((char **)(a1 + 80), v45 - v14);
      v15 = *(_DWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 80);
    }
  }
  *(_DWORD *)(v6 + 48) = v15;
  v16 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v16 + 1;
  v17 = *(unsigned int *)(a1 + 176);
  *(_DWORD *)(a1 + 176) = v17 + 1;
  *(_DWORD *)(v13 + 4 * v17) = v16;
  v5 = *(_DWORD *)(v6 + 48);
  v18 = 0x100000000;
  return v18 | v5;
}

BOOL llvm::GVNPass::ValueTable::exists(llvm::GVNPass::ValueTable *this, llvm::Value *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::Value *v6;
  int v7;
  _BOOL8 result;
  unsigned int v9;

  v2 = *((_DWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)this;
  v4 = v2 - 1;
  v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(llvm::Value **)(*(_QWORD *)this + 16 * v5);
  if (v6 == a2)
    return 1;
  v7 = 1;
  do
  {
    result = v6 != (llvm::Value *)-4096;
    if (v6 == (llvm::Value *)-4096)
      break;
    v9 = v5 + v7++;
    v5 = v9 & v4;
    v6 = *(llvm::Value **)(v3 + 16 * v5);
  }
  while (v6 != a2);
  return result;
}

uint64_t llvm::GVNPass::ValueTable::lookup(llvm::GVNPass::ValueTable *this, llvm::Value *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  int v8;
  int v9;

  v3 = *(_QWORD *)this;
  v4 = *((unsigned int *)this + 4);
  if (!(_DWORD)v4)
    goto LABEL_9;
  LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = v3 + 16 * v5;
  v7 = *(llvm::Value **)v6;
  if (*(llvm::Value **)v6 != a2)
  {
    v8 = 1;
    while (v7 != (llvm::Value *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(llvm::Value **)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = v3 + 16 * v5;
        goto LABEL_7;
      }
    }
LABEL_9:
    v6 = v3 + 16 * v4;
    if ((a3 & 1) != 0)
      return *(unsigned int *)(v6 + 8);
    goto LABEL_10;
  }
LABEL_7:
  if ((a3 & 1) != 0)
    return *(unsigned int *)(v6 + 8);
LABEL_10:
  if (v6 == v3 + 16 * v4)
    return 0;
  return *(unsigned int *)(v6 + 8);
}

uint64_t llvm::GVNPass::ValueTable::lookupOrAddCmp(llvm::GVNPass::ValueTable *a1, int a2, int a3, llvm::Value *a4, llvm::Value *a5)
{
  uint64_t result;
  uint64_t v7;
  _BYTE v8[16];
  void *v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  llvm::GVNPass::ValueTable::createCmpExpr(a1, a2, a3, a4, a5, (uint64_t)v8);
  result = llvm::GVNPass::ValueTable::assignExpNewValueNum((uint64_t)a1, (uint64_t)v8);
  if (v9 != v10)
  {
    v7 = result;
    free(v9);
    return v7;
  }
  return result;
}

void llvm::GVNPass::ValueTable::clear(llvm::GVNPass::ValueTable *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  sub_1C5015F50(this);
  sub_1C5B08654((uint64_t)this + 24);
  sub_1C5B08908((_DWORD *)this + 26);
  sub_1C5B08958((_DWORD *)this + 32);
  *((_DWORD *)this + 44) = 1;
  v3 = (char *)*((_QWORD *)this + 7);
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 != v3)
  {
    v4 = v2 - 16;
    do
    {
      v5 = (char *)*((_QWORD *)v4 - 2);
      if (v4 != v5)
        free(v5);
      v6 = v4 - 32;
      v4 -= 48;
    }
    while (v6 != v3);
  }
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  *((_DWORD *)this + 12) = 0;
}

void sub_1C5B08654(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  void *__src;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2 && !*(_DWORD *)(a1 + 12))
    return;
  v3 = *(unsigned int *)(a1 + 16);
  if (v3 > 4 * v2 && v3 >= 0x41)
  {
    sub_1C5B118C4(a1);
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v4 = 64;
    if (v2)
      v5 = v4;
    else
      v5 = 0;
    if (v5 != *(_DWORD *)(a1 + 16))
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      if (!v5)
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        return;
      }
      v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v11;
      *(_QWORD *)a1 = operator new(56 * v11, (std::align_val_t)8uLL);
    }
    sub_1C5B1173C(a1);
    return;
  }
  LODWORD(v12) = -1;
  BYTE4(v12) = 0;
  *((_QWORD *)&v12 + 1) = 0;
  __src = v15;
  v14 = 0x400000000;
  if (!(_DWORD)v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
  v6 = *(_QWORD *)a1 + 16;
  v7 = 56 * v3;
  do
  {
    *(_OWORD *)(v6 - 16) = v12;
    if ((__int128 *)(v6 - 16) == &v12)
      goto LABEL_23;
    v8 = v14;
    v9 = *(unsigned int *)(v6 + 8);
    if (v9 >= v14)
    {
      if ((_DWORD)v14)
        memmove(*(void **)v6, __src, 4 * v14);
      goto LABEL_22;
    }
    if (*(_DWORD *)(v6 + 12) < v14)
    {
      *(_DWORD *)(v6 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v8, 4);
LABEL_19:
      v9 = 0;
      goto LABEL_20;
    }
    if (!(_DWORD)v9)
      goto LABEL_19;
    memmove(*(void **)v6, __src, 4 * v9);
LABEL_20:
    if (v9 != v14)
      memcpy((void *)(*(_QWORD *)v6 + 4 * v9), (char *)__src + 4 * v9, 4 * v14 - 4 * v9);
LABEL_22:
    *(_DWORD *)(v6 + 8) = v8;
LABEL_23:
    v6 += 56;
    v7 -= 56;
  }
  while (v7);
  *(_QWORD *)(a1 + 8) = 0;
LABEL_29:
  if (__src != v15)
    free(__src);
}

_DWORD *sub_1C5B08908(_DWORD *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_DWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -1;
          v2 += 4;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4AB1258(result);
    }
  }
  return result;
}

_DWORD *sub_1C5B08958(_DWORD *result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        v2 = *(_QWORD *)result;
        v3 = *(_QWORD *)result + 24 * v1;
        do
        {
          *(_DWORD *)v2 = -1;
          *(_QWORD *)(v2 + 8) = -4096;
          v2 += 24;
        }
        while (v2 != v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C5B11D48(result);
    }
  }
  return result;
}

int32x2_t *llvm::GVNPass::ValueTable::erase(int32x2_t *this, llvm::Value *a2)
{
  __int32 v2;
  int32x2_t v3;
  __int32 v4;
  uint64_t v5;
  llvm::Value **v6;
  llvm::Value *v7;
  int v8;
  llvm::Value *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int32 v14;
  int32x2_t v15;
  __int32 v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;

  v2 = this[2].i32[0];
  if (v2)
  {
    v3 = *this;
    v4 = v2 - 1;
    LODWORD(v5) = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (llvm::Value **)(*(_QWORD *)this + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
    {
      v10 = v4 & ((a2 >> 4) ^ (a2 >> 9));
LABEL_8:
      v2 = *(_DWORD *)(*(_QWORD *)&v3 + 16 * v10 + 8);
    }
    else
    {
      v8 = 1;
      v9 = *v6;
      LODWORD(v10) = v4 & ((a2 >> 4) ^ (a2 >> 9));
      while (v9 != (llvm::Value *)-4096)
      {
        v11 = v10 + v8++;
        v10 = v11 & v4;
        v9 = *(llvm::Value **)(*(_QWORD *)&v3 + 16 * v10);
        if (v9 == a2)
          goto LABEL_8;
      }
      v2 = 0;
    }
    if (v7 == a2)
    {
LABEL_15:
      *v6 = (llvm::Value *)-8192;
      this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v12 = 1;
      while (v7 != (llvm::Value *)-4096)
      {
        v13 = v5 + v12++;
        v5 = v13 & v4;
        v7 = *(llvm::Value **)(*(_QWORD *)&v3 + 16 * v5);
        if (v7 == a2)
        {
          v6 = (llvm::Value **)(*(_QWORD *)&v3 + 16 * v5);
          goto LABEL_15;
        }
      }
    }
  }
  if (*((_BYTE *)a2 + 16) == 83)
  {
    v14 = this[15].i32[0];
    if (v14)
    {
      v15 = this[13];
      v16 = v14 - 1;
      LODWORD(v17) = (v14 - 1) & (37 * v2);
      v18 = (int *)(*(_QWORD *)&v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == v2)
      {
LABEL_19:
        *v18 = -2;
        this[14] = vadd_s32(this[14], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v20 = 1;
        while (v19 != -1)
        {
          v21 = v17 + v20++;
          v17 = v21 & v16;
          v19 = *(_DWORD *)(*(_QWORD *)&v15 + 16 * v17);
          if (v19 == v2)
          {
            v18 = (int *)(*(_QWORD *)&v15 + 16 * v17);
            goto LABEL_19;
          }
        }
      }
    }
  }
  return this;
}

uint64_t llvm::GVNPass::isPREEnabled(llvm::GVNPass *this)
{
  char *v1;

  if (*((_BYTE *)this + 1))
    v1 = (char *)this;
  else
    v1 = &byte_1ED81CA58;
  return *v1;
}

uint64_t llvm::GVNPass::isLoadPREEnabled(llvm::GVNPass *this)
{
  char *v1;

  v1 = (char *)this + 2;
  if (!*((_BYTE *)this + 3))
    v1 = &byte_1ED81CB18;
  return *v1;
}

uint64_t llvm::GVNPass::isLoadInLoopPREEnabled(llvm::GVNPass *this)
{
  char *v1;

  v1 = (char *)this + 4;
  if (!*((_BYTE *)this + 5))
    v1 = &byte_1ED81CBD8;
  return *v1;
}

uint64_t llvm::GVNPass::isLoadPRESplitBackedgeEnabled(llvm::GVNPass *this)
{
  char *v1;

  v1 = (char *)this + 6;
  if (!*((_BYTE *)this + 7))
    v1 = &byte_1ED81CC98;
  return *v1;
}

uint64_t llvm::GVNPass::isMemDepEnabled(llvm::GVNPass *this)
{
  char *v1;

  v1 = (char *)this + 8;
  if (!*((_BYTE *)this + 9))
    v1 = &byte_1ED835C90;
  return *v1;
}

_QWORD *llvm::GVNPass::run@<X0>(uint64_t a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t CachedResultImpl;
  uint64_t v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t ResultImpl;
  uint64_t v17;
  char v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;

  v21 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2) + 8;
  v20 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a2) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, (uint64_t)a2) + 8;
  v10 = (char *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 9))
    v10 = &byte_1ED835C90;
  if (*v10)
    v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::MemoryDependenceAnalysis::Key, (uint64_t)a2)
        + 8;
  else
    v11 = 0;
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a3, (uint64_t)&llvm::LoopAnalysis::Key, (uint64_t)a2);
  v13 = CachedResultImpl;
  if (CachedResultImpl)
    v14 = (int32x2_t *)(CachedResultImpl + 8);
  else
    v14 = 0;
  v15 = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key, (uint64_t)a2);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::OptimizationRemarkEmitterAnalysis::Key, (uint64_t)a2);
  if (v15)
    v17 = *(_QWORD *)(v15 + 8);
  else
    v17 = 0;
  v18 = llvm::GVNPass::runImpl(a1, a2, v21, v20, v8, v9, v11, v14, ResultImpl + 8, v17);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v18 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DDB144(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  result = sub_1C4DDB144(a4, (uint64_t)&llvm::TargetLibraryAnalysis::Key);
  if (v15)
    result = sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  if (v13)
    return sub_1C4DDB144(a4, (uint64_t)&llvm::LoopAnalysis::Key);
  return result;
}

uint64_t llvm::GVNPass::runImpl(uint64_t a1, llvm::Function *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int32x2_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  char *v20;
  char v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void **v27;
  void *v28[2];
  _QWORD v29[36];
  char v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  _BYTE v35[64];
  _QWORD v36[3];
  __int16 v37;
  uint64_t v38;
  char *v39[2];
  uint64_t v40;
  _BYTE *v41;
  void *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[64];
  void *v46;
  uint64_t v47;
  _BYTE v48[64];
  _QWORD **v49;
  _QWORD *v50[4];

  v50[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 296) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = a4;
  v25 = 0;
  v26 = 0;
  v23 = &unk_1E81384F8;
  v24 = 0;
  *(_QWORD *)(a1 + 280) = a6;
  *(_QWORD *)(a1 + 288) = a7;
  *(_QWORD *)(a1 + 96) = a9;
  *(_QWORD *)(a1 + 104) = &v23;
  *(_BYTE *)(a1 + 688) = 1;
  v12 = &v38;
  v38 = a10;
  v39[0] = (char *)&v40;
  v39[1] = (char *)0x1000000000;
  v41 = v45;
  v42 = v45;
  v43 = 8;
  v44 = 0;
  v46 = v48;
  v47 = 0x800000000;
  v50[1] = 0;
  v50[0] = 0;
  v49 = v50;
  if (!a10)
    v12 = 0;
  *(_QWORD *)(a1 + 112) = a8;
  *(_QWORD *)(a1 + 120) = v12;
  v28[0] = v29;
  v28[1] = (void *)0x1000000000;
  v29[32] = 0;
  v29[33] = 0;
  v29[34] = a4;
  v29[35] = 0;
  v30 = 0;
  v31 = v35;
  v32 = v35;
  v33 = 8;
  v34 = 0;
  v13 = (_QWORD *)((char *)a2 + 72);
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v14 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v14 == (_QWORD *)((char *)a2 + 72))
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = (_QWORD *)v14[1];
      if (v14)
        v18 = (uint64_t)(v14 - 3);
      else
        v18 = 0;
      v16 |= llvm::MergeBlockIntoPredecessor(v18, (llvm::BasicBlock *)v28, a8, *(llvm::LoopInfo **)(a1 + 120), *(_QWORD *)(a1 + 16), 0);
      v14 = v17;
    }
    while (v17 != v13);
  }
  do
  {
    v19 = v16;
    LOBYTE(v16) = 1;
  }
  while ((llvm::GVNPass::iterateOnFunction((llvm::GVNPass *)a1, a2) & 1) != 0);
  if (*(_BYTE *)(a1 + 1))
    v20 = (char *)a1;
  else
    v20 = &byte_1ED81CA58;
  if (*v20)
  {
    llvm::GVNPass::assignValNumForDeadCode((_QWORD *)a1);
    do
    {
      v21 = v19;
      v19 = 1;
    }
    while ((llvm::GVNPass::performPRE((llvm::GVNPass *)a1, a2) & 1) != 0);
  }
  else
  {
    v21 = v19;
  }
  llvm::GVNPass::cleanupGlobalSets((llvm::GVNPass *)a1);
  sub_1C4DFC0E4((_DWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  if (a10 && llvm::VerifyMemorySSA)
    llvm::MemorySSA::verifyMemorySSA(a10, 0);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v28);
  v27 = (void **)v36;
  sub_1C50B10F0(&v27);
  if (v32 != v31)
    free(v32);
  if (v28[0] != v29)
    free(v28[0]);
  sub_1C61247C0((uint64_t)&v49, v50[0]);
  if (v46 != v48)
    free(v46);
  if (v42 != v41)
    free(v42);
  sub_1C4EE41F8(v39);
  v23 = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](v24, 8);
  return v21 & 1;
}

llvm::raw_ostream *llvm::GVNPass::dump(llvm *a1, unsigned int **a2)
{
  llvm::raw_ostream *v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  unsigned int *v12;
  unsigned int v13;
  llvm::raw_ostream *result;
  _WORD *v15;

  v3 = (llvm::raw_ostream *)llvm::errs(a1);
  v4 = (_WORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 1uLL)
  {
    *v4 = 2683;
    *((_QWORD *)v3 + 4) += 2;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, "{\n", 2uLL);
  }
  v5 = *((unsigned int *)a2 + 4);
  v6 = (uint64_t)&(*a2)[4 * v5];
  if (*((_DWORD *)a2 + 2))
  {
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      v8 = *a2;
      while (*v8 >= 0xFFFFFFFE)
      {
        v8 += 4;
        v7 -= 16;
        if (!v7)
          goto LABEL_8;
      }
    }
    else
    {
      v8 = *a2;
    }
  }
  else
  {
LABEL_8:
    v8 = &(*a2)[4 * v5];
  }
  v9 = (uint64_t)&(*a2)[4 * v5];
  while (v8 != (unsigned int *)v9)
  {
    v10 = (llvm::raw_ostream *)llvm::errs(v3);
    sub_1C5E21910(v10, *v8, 0, 0, 0);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (*((_BYTE **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, "\n", 1uLL);
    }
    else
    {
      *v11 = 10;
      ++*((_QWORD *)v10 + 4);
    }
    v3 = llvm::Value::dump(*((llvm::Value **)v8 + 1));
    v12 = v8 + 4;
    while (v12 != (unsigned int *)v6)
    {
      v13 = *v12;
      v12 += 4;
      if (v13 <= 0xFFFFFFFD)
      {
        v8 = v12 - 4;
        goto LABEL_18;
      }
    }
    v8 = (unsigned int *)v6;
LABEL_18:
    ;
  }
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v15 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v15 <= 1uLL)
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  *v15 = 2685;
  *((_QWORD *)result + 4) += 2;
  return result;
}

llvm::Value *sub_1C5B0925C(uint64_t a1, _QWORD *a2, uint64_t a3, llvm::Type *a4, uint64_t a5, const llvm::DataLayout *a6)
{
  llvm::Instruction *v8;
  int v9;
  llvm::Instruction *v10;
  llvm::LoadInst *v11;
  llvm::UndefValue *LoadValueForLoad;
  llvm::Instruction *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  __int16 v21;

  v8 = (llvm::Instruction *)(a3 + 272);
  v9 = *(_DWORD *)(a1 + 8);
  if (v9 == 1)
  {
    v10 = *(llvm::Instruction **)a1;
    v11 = (llvm::LoadInst *)*(unsigned int *)(a1 + 12);
    if (**(_QWORD ***)a1 != a2 || (_DWORD)v11 != 0)
    {
      LoadValueForLoad = llvm::VNCoercion::getLoadValueForLoad(*(llvm::VNCoercion **)a1, v11, a2, a4, v8, a6);
      llvm::MemoryDependenceResults::removeInstruction(*(llvm::MemoryDependenceResults **)(a5 + 16), v10);
      return LoadValueForLoad;
    }
  }
  else if (v9)
  {
    if (v9 == 2)
      return llvm::VNCoercion::getMemInstValueForLoad(*(_QWORD *)a1, *(_DWORD *)(a1 + 12), a2, (uint64_t)a4, v8);
    v15 = *(llvm::Instruction **)a1;
    v17 = (uint64_t *)sub_1C5B093A4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 64) + 8), (uint64_t)a2, *(llvm::Instruction **)a1, *(llvm::DominatorTree **)(a5 + 24));
    v18 = sub_1C5B093A4(*(_QWORD *)(*((_QWORD *)v15 - 4) + 8), (uint64_t)a2, v15, *(llvm::DominatorTree **)(a5 + 24));
    v19 = *((_QWORD *)v15 - 12);
    v21 = 257;
    return sub_1C4FC8748(v19, v17, v18, (uint64_t)v20, (uint64_t)v15, 0);
  }
  else
  {
    v10 = *(llvm::Instruction **)a1;
    if (**(_QWORD ***)a1 != a2)
      return llvm::VNCoercion::getStoreValueForLoad(*(llvm::VNCoercion **)a1, (llvm::Value *)*(unsigned int *)(a1 + 12), (uint64_t)a2, a4, v8, a6);
  }
  return v10;
}

uint64_t sub_1C5B093A4(uint64_t a1, uint64_t a2, llvm::Instruction *a3, llvm::DominatorTree *this)
{
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v7 = a1;
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      if (*(_BYTE *)(v8 + 16) == 60
        && *(_QWORD *)v8 == a2
        && *(_QWORD *)(v8 + 40) == *((_QWORD *)a3 + 5)
        && llvm::DominatorTree::dominates(this, *(const llvm::Value **)(v7 + 24), a3))
      {
        break;
      }
    }
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      return 0;
  }
  return v8;
}

double llvm::GVNPass::AnalyzeLoadAvailability(uint64_t a1, uint64_t *a2, char a3, llvm::Instruction *a4, _OWORD *a5)
{
  double result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a3 & 7) - 1 < 2)
    __asm { BR              X10 }
  sub_1C5B09D20((uint64_t)&v7, a2[5], (uint64_t)(a2 + 3), a4, *a2, *(llvm::DominatorTree **)(a1 + 24), *(_QWORD *)(a1 + 280));
  if ((_BYTE)v8)
  {
    result = *(double *)&v7;
    *a5 = v7;
  }
  return result;
}

uint64_t sub_1C5B09D20(uint64_t result, uint64_t a2, uint64_t a3, llvm::Instruction *a4, uint64_t a5, llvm::DominatorTree *this, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  _OWORD v36[2];
  __int128 v37[3];
  char v38;
  __int128 v39[3];
  char v40;

  v7 = result;
  if (a4
    && *((_BYTE *)a4 + 16) == 85
    && *((_QWORD *)a4 + 5) == a2
    && ((v13 = sub_1C5B093A4(*(_QWORD *)(*((_QWORD *)a4 - 8) + 8), a5, a4, this),
         result = sub_1C5B093A4(*(_QWORD *)(*((_QWORD *)a4 - 4) + 8), a5, a4, this),
         v13)
      ? (v14 = result == 0)
      : (v14 = 1),
        !v14))
  {
    v15 = (uint64_t *)result;
    v16 = *(_QWORD *)(v13 + 40);
    v17 = *(__int16 *)(v16 + 18);
    if ((v17 & 0x80000000) == 0)
    {
      v30 = *(_QWORD *)(v16 + 48);
      if (v30 != v16 + 40)
      {
        v31 = 0;
        do
        {
          v32 = v30 - 24;
          if (!v30)
            v32 = 0;
          *(_DWORD *)(v32 + 56) = v31++;
          v30 = *(_QWORD *)(v30 + 8);
        }
        while (v30 != v16 + 40);
      }
      *(_WORD *)(v16 + 18) = v17 | 0x8000;
    }
    if (*(_DWORD *)(v13 + 56) >= *(_DWORD *)(result + 56))
      v18 = result;
    else
      v18 = v13;
    v19 = *(_QWORD *)(v13 - 32);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v16 + 56) + 40) + 272, *(_QWORD *)v13);
    if (v21 == 1)
      v22 = -2;
    else
      v22 = (unint64_t)(v20 + 7) >> 3;
    llvm::Instruction::getAAMetadata((uint64_t ***)v13, v36);
    *(_QWORD *)&v35 = v19;
    *((_QWORD *)&v35 + 1) = v22;
    v23 = *(v15 - 4);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v15[5] + 56) + 40) + 272, *v15);
    if (v25 == 1)
      v26 = -2;
    else
      v26 = (unint64_t)(v24 + 7) >> 3;
    result = (uint64_t)llvm::Instruction::getAAMetadata((uint64_t ***)v15, v34);
    *(_QWORD *)&v33 = v23;
    *((_QWORD *)&v33 + 1) = v26;
    v27 = v18 + 24;
    if (v18 + 24 == a3)
    {
LABEL_28:
      *(_QWORD *)v7 = a4;
      *(_QWORD *)(v7 + 8) = 4;
      v29 = 1;
    }
    else
    {
      while (1)
      {
        v28 = v27 ? v27 - 24 : 0;
        v39[0] = v35;
        v39[1] = v36[0];
        v39[2] = v36[1];
        v40 = 1;
        result = sub_1C4D90C64(a7, v28, v39);
        if ((result & 2) != 0)
          break;
        v37[0] = v33;
        v37[1] = v34[0];
        v37[2] = v34[1];
        v38 = 1;
        result = sub_1C4D90C64(a7, v28, v37);
        if ((result & 2) != 0)
          break;
        v27 = *(_QWORD *)(v27 + 8);
        if (v27 == a3)
          goto LABEL_28;
      }
      v29 = 0;
      *(_BYTE *)v7 = 0;
    }
    *(_BYTE *)(v7 + 16) = v29;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 16) = 0;
  }
  return result;
}

void llvm::GVNPass::AnalyzeLoadAvailability(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Instruction *v17;
  int v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[24];
  _BYTE v25[24];

  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = (uint64_t *)(a1 + 48);
    v13 = 24 * v5;
    while (1)
    {
      v14 = (uint64_t *)(*(_QWORD *)a3 + v11);
      v15 = *v14;
      v16 = v14[1];
      *(_QWORD *)v25 = *v14;
      *(_QWORD *)v24 = 0;
      if (sub_1C4E36498(v12, v25, v24))
        break;
      v17 = *(llvm::Instruction **)(*(_QWORD *)a3 + v11 + 16);
      if ((unint64_t)(v16 & 7) - 1 < 2)
      {
        *(_DWORD *)&v24[12] = 0;
        llvm::GVNPass::AnalyzeLoadAvailability(a1, a2, v16, v17, v24);
        if (!v18)
          goto LABEL_6;
        *(_QWORD *)v25 = v15;
        *(_OWORD *)&v25[8] = *(_OWORD *)v24;
        goto LABEL_12;
      }
      sub_1C5B09D20((uint64_t)v25, v15, v15 + 40, v17, *a2, *(llvm::DominatorTree **)(a1 + 24), *(_QWORD *)(a1 + 280));
      if (!v25[16])
      {
LABEL_6:
        v19 = *(unsigned int *)(a5 + 8);
        if (v19 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v19 + 1, 8);
          v19 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v19) = v15;
        ++*(_DWORD *)(a5 + 8);
        goto LABEL_9;
      }
      *(_QWORD *)v24 = v15;
      *(_OWORD *)&v24[8] = *(_OWORD *)v25;
      v20 = v24;
LABEL_13:
      v21 = sub_1C4DC1E54(a4, (unint64_t)v20);
      v22 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
      v23 = *(_OWORD *)v21;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
      *(_OWORD *)v22 = v23;
      ++*(_DWORD *)(a4 + 8);
LABEL_9:
      v11 += 24;
      if (v13 == v11)
        return;
    }
    *(_QWORD *)v25 = v15;
    *(_OWORD *)&v25[8] = xmmword_1C8668E60;
LABEL_12:
    v20 = v25;
    goto LABEL_13;
  }
}

void llvm::GVNPass::eliminatePartiallyRedundantLoad(uint64_t a1, uint64_t ***a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t (**v7)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  llvm::Value *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  llvm::MDNode **v21;
  llvm::MDNode *v22;
  llvm::MDNode *v23;
  llvm::MDNode *v24;
  uint64_t (**v25)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v26;
  llvm::Value *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t ***v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  llvm::BasicBlock *v45;
  char *DefinedAccess;
  llvm::MemorySSAUpdater *v47;
  llvm::MDNode *v48;
  llvm::MDNode *v49;
  llvm::MDNode *v50;
  llvm::Value *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t ****v57;
  uint64_t ***v58;
  uint64_t ****v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  llvm::MDNode **v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t ****v71;
  uint64_t ***v72;
  uint64_t ****v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  uint64_t v77;
  llvm::MDNode **v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t ****v85;
  uint64_t ***v86;
  uint64_t ****v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  llvm::MDNode **v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  _QWORD *v99;
  _QWORD ***v100;
  _QWORD *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  uint64_t v105;
  llvm::MDNode **v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __int128 v110;
  llvm::MDNode *v111;
  uint64_t *v112;
  int v113;
  uint64_t **v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t **v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t ****v122;
  uint64_t (**v123)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t ****v124;
  uint64_t (**v125)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t ****v126;
  uint64_t (**v127)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  _QWORD *v128;
  uint64_t (**v129)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v130;
  uint64_t (**v131)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v132;
  int v133;
  uint64_t v134;
  llvm::Value *v135;
  unsigned int v136;
  unsigned __int8 *v137;
  unsigned __int8 **v138;
  unsigned __int8 *v139;
  int v140;
  llvm::OptimizationRemarkEmitter *v141;
  uint64_t v142;
  const char *v143;
  uint64_t **v144;
  char *v145;
  unint64_t v146;
  void **v147;
  char *v148;
  unint64_t v149;
  void **v150;
  uint64_t v151;
  unsigned int v153;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  uint64_t (**v157)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v158;
  uint64_t v159;
  void *v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t (**v163)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  llvm::MDNode *v164;
  const char *v165;
  llvm::MDNode *v166;
  __int16 v167;
  const char *v168;
  const char *v169;
  uint64_t v170;
  char v171;
  char v172;
  void *v173;
  uint64_t v174;
  _BYTE v175[260];
  int v176;
  uint64_t **v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a4 + 24);
  v151 = *(_QWORD *)(a4 + 32);
  if (v5 != v151)
  {
    v6 = (a2 >> 4) ^ (a2 >> 9);
    v153 = v6;
    while (1)
    {
      v7 = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))v5;
      v8 = *(_QWORD *)(v5 + 8);
      v9 = operator new(0x60uLL);
      v10 = v9;
      v11 = (llvm::Value *)(v9 + 8);
      v9[13] = v9[13] & 0x38000000 | 1;
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = v9 + 8;
      v12 = *a2;
      if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
        break;
      v22 = 0;
      v23 = (llvm::MDNode *)&byte_1C871356D;
LABEL_12:
      v167 = 773;
      v163 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v23;
      v164 = v22;
      v165 = ".pre";
      v25 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v7[5];
      if (v25 == v7 + 5)
      {
        v26 = 0;
      }
      else
      {
        if (v25)
          v26 = (uint64_t)(v25 - 3);
        else
          v26 = 0;
        if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB)
          v26 = 0;
      }
      v27 = (llvm::Value *)v8;
      llvm::LoadInst::LoadInst((uint64_t)(v9 + 8), (uint64_t)v12, v8, (uint64_t)&v163, *((_WORD *)a2 + 9) & 1, ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 0x3F, (*((_WORD *)a2 + 9) >> 7) & 7, *((_BYTE *)a2 + 60), v26);
      v28 = (unsigned __int8 *)a2[6];
      v156 = v28;
      if (v28)
        llvm::MetadataTracking::track((uint64_t)&v156, v28, 2);
      v30 = (unsigned __int8 **)(v10 + 20);
      v29 = (unsigned __int8 *)*((_QWORD *)v10 + 10);
      if (v29)
        llvm::MetadataTracking::untrack((uint64_t)(v10 + 20), v29);
      v31 = v156;
      *v30 = v156;
      if (v31)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v156, v31, (uint64_t)(v10 + 20));
        v156 = 0;
      }
      v32 = *(uint64_t **)(a1 + 120);
      if (v32)
      {
        v33 = (uint64_t *)*v32;
        v34 = *(_DWORD *)(*v32 + 40);
        if (!v34)
          goto LABEL_33;
        v35 = v33[3];
        v36 = v34 - 1;
        v37 = (v34 - 1) & v153;
        v38 = *(uint64_t ****)(v35 + 16 * v37);
        if (v38 == a2)
        {
LABEL_32:
          v41 = *(_QWORD *)(v35 + 16 * v37 + 8);
        }
        else
        {
          v39 = 1;
          while (v38 != (uint64_t ***)-4096)
          {
            v40 = v37 + v39++;
            v37 = v40 & v36;
            v38 = *(uint64_t ****)(v35 + 16 * v37);
            if (v38 == a2)
              goto LABEL_32;
          }
LABEL_33:
          v41 = 0;
        }
        v42 = *(unsigned __int8 *)(v41 + 16);
        if (v42 != 26)
        {
          if (v42 == 25)
            v43 = v41;
          else
            v43 = 0;
          if (v43)
            v44 = (uint64_t *)(v43 - 32);
          else
            v44 = (uint64_t *)(v41 - 64);
          v41 = *v44;
        }
        v45 = (llvm::BasicBlock *)*((_QWORD *)v10 + 9);
        DefinedAccess = llvm::MemorySSA::createDefinedAccess(v33, (uint64_t)v11, v41, 0);
        llvm::MemorySSA::insertIntoListsForBlock(*v32, (uint64_t)DefinedAccess, v45, 2);
        v47 = *(llvm::MemorySSAUpdater **)(a1 + 120);
        if (DefinedAccess && DefinedAccess[16] == 26)
          llvm::MemorySSAUpdater::insertDef(v47, (llvm::MemoryDef *)DefinedAccess, 1);
        else
          llvm::MemorySSAUpdater::insertUse(v47, (llvm::BasicBlock **)DefinedAccess, 1);
      }
      llvm::Instruction::getAAMetadata(a2, &v163);
      v48 = v164;
      v50 = (llvm::MDNode *)v165;
      v49 = v166;
      if (v163 || v164 || v165 || v166)
      {
        if (v163 || *v30 || (*((_BYTE *)v10 + 55) & 0x20) != 0)
          llvm::Value::setMetadata(v11, 1, (llvm::MDNode *)v163);
        if (v48 || *v30 || (*((_BYTE *)v10 + 55) & 0x20) != 0)
          llvm::Value::setMetadata(v11, 5, v48);
        if (v50 || *v30 || (*((_BYTE *)v10 + 55) & 0x20) != 0)
          llvm::Value::setMetadata(v11, 7, v50);
        if (v49 || *v30 || (*((_BYTE *)v10 + 55) & 0x20) != 0)
          llvm::Value::setMetadata(v11, 8, v49);
      }
      v51 = v27;
      v6 = v153;
      if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
        goto LABEL_82;
      v52 = ***a2;
      v157 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))a2;
      v53 = *(_DWORD *)(v52 + 2496);
      if (v53)
      {
        v54 = *(_QWORD *)(v52 + 2480);
        v55 = v53 - 1;
        v56 = v55 & v153;
        v57 = (uint64_t ****)(v54 + 40 * (v55 & v153));
        v58 = *v57;
        if (*v57 == a2)
          goto LABEL_75;
        v59 = 0;
        v60 = 1;
        while (v58 != (uint64_t ***)-4096)
        {
          if (v59)
            v61 = 0;
          else
            v61 = v58 == (uint64_t ***)-8192;
          if (v61)
            v59 = v57;
          v62 = v56 + v60++;
          v56 = v62 & v55;
          v57 = (uint64_t ****)(v54 + 40 * v56);
          v58 = *v57;
          if (*v57 == a2)
            goto LABEL_75;
        }
        if (v59)
          v122 = v59;
        else
          v122 = v57;
      }
      else
      {
        v122 = 0;
      }
      v57 = (uint64_t ****)sub_1C541AB24(v52 + 2480, (uint64_t)&v157, (uint64_t *)&v157, v122);
      v123 = v157;
      v57[4] = 0;
      v57[3] = 0;
      *v57 = (uint64_t ***)v123;
      v57[1] = (uint64_t ***)(v57 + 3);
      v57[2] = (uint64_t ***)0x100000000;
LABEL_75:
      v63 = *((unsigned int *)v57 + 4);
      if ((_DWORD)v63)
      {
        v64 = (llvm::MDNode **)(v57[1] + 1);
        v65 = 16 * v63;
        while (*((_DWORD *)v64 - 2) != 6)
        {
          v64 += 2;
          v65 -= 16;
          if (!v65)
            goto LABEL_82;
        }
        if (*v64)
          llvm::Value::setMetadata(v11, 6, *v64);
      }
LABEL_82:
      if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
        goto LABEL_100;
      v66 = ***a2;
      v157 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))a2;
      v67 = *(_DWORD *)(v66 + 2496);
      if (v67)
      {
        v68 = *(_QWORD *)(v66 + 2480);
        v69 = v67 - 1;
        v70 = v69 & v153;
        v71 = (uint64_t ****)(v68 + 40 * (v69 & v153));
        v72 = *v71;
        if (*v71 == a2)
          goto LABEL_93;
        v73 = 0;
        v74 = 1;
        while (v72 != (uint64_t ***)-4096)
        {
          if (v73)
            v75 = 0;
          else
            v75 = v72 == (uint64_t ***)-8192;
          if (v75)
            v73 = v71;
          v76 = v70 + v74++;
          v70 = v76 & v69;
          v71 = (uint64_t ****)(v68 + 40 * v70);
          v72 = *v71;
          if (*v71 == a2)
            goto LABEL_93;
        }
        if (v73)
          v124 = v73;
        else
          v124 = v71;
      }
      else
      {
        v124 = 0;
      }
      v71 = (uint64_t ****)sub_1C541AB24(v66 + 2480, (uint64_t)&v157, (uint64_t *)&v157, v124);
      v125 = v157;
      v71[4] = 0;
      v71[3] = 0;
      *v71 = (uint64_t ***)v125;
      v71[1] = (uint64_t ***)(v71 + 3);
      v71[2] = (uint64_t ***)0x100000000;
LABEL_93:
      v77 = *((unsigned int *)v71 + 4);
      if ((_DWORD)v77)
      {
        v78 = (llvm::MDNode **)(v71[1] + 1);
        v79 = 16 * v77;
        while (*((_DWORD *)v78 - 2) != 16)
        {
          v78 += 2;
          v79 -= 16;
          if (!v79)
            goto LABEL_100;
        }
        if (*v78)
          llvm::Value::setMetadata(v11, 16, *v78);
      }
LABEL_100:
      if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
        goto LABEL_118;
      v80 = ***a2;
      v157 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))a2;
      v81 = *(_DWORD *)(v80 + 2496);
      if (v81)
      {
        v82 = *(_QWORD *)(v80 + 2480);
        v83 = v81 - 1;
        v84 = v83 & v153;
        v85 = (uint64_t ****)(v82 + 40 * (v83 & v153));
        v86 = *v85;
        if (*v85 == a2)
          goto LABEL_111;
        v87 = 0;
        v88 = 1;
        while (v86 != (uint64_t ***)-4096)
        {
          if (v87)
            v89 = 0;
          else
            v89 = v86 == (uint64_t ***)-8192;
          if (v89)
            v87 = v85;
          v90 = v84 + v88++;
          v84 = v90 & v83;
          v85 = (uint64_t ****)(v82 + 40 * v84);
          v86 = *v85;
          if (*v85 == a2)
            goto LABEL_111;
        }
        if (v87)
          v126 = v87;
        else
          v126 = v85;
      }
      else
      {
        v126 = 0;
      }
      v85 = (uint64_t ****)sub_1C541AB24(v80 + 2480, (uint64_t)&v157, (uint64_t *)&v157, v126);
      v127 = v157;
      v85[4] = 0;
      v85[3] = 0;
      *v85 = (uint64_t ***)v127;
      v85[1] = (uint64_t ***)(v85 + 3);
      v85[2] = (uint64_t ***)0x100000000;
LABEL_111:
      v91 = *((unsigned int *)v85 + 4);
      if ((_DWORD)v91)
      {
        v92 = (llvm::MDNode **)(v85[1] + 1);
        v93 = 16 * v91;
        while (*((_DWORD *)v92 - 2) != 4)
        {
          v92 += 2;
          v93 -= 16;
          if (!v93)
            goto LABEL_118;
        }
        if (*v92)
          llvm::Value::setMetadata(v11, 4, *v92);
      }
LABEL_118:
      if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
      {
        v94 = ***a2;
        v157 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))a2;
        v95 = *(_DWORD *)(v94 + 2496);
        if (v95)
        {
          v96 = *(_QWORD *)(v94 + 2480);
          v97 = v95 - 1;
          v98 = v97 & v153;
          v99 = (_QWORD *)(v96 + 40 * (v97 & v153));
          v100 = (_QWORD ***)*v99;
          if ((uint64_t ***)*v99 != a2)
          {
            v101 = 0;
            v102 = 1;
            while (v100 != (_QWORD ***)-4096)
            {
              if (v101)
                v103 = 0;
              else
                v103 = v100 == (_QWORD ***)-8192;
              if (v103)
                v101 = v99;
              v104 = v98 + v102++;
              v98 = v104 & v97;
              v99 = (_QWORD *)(v96 + 40 * v98);
              v100 = (_QWORD ***)*v99;
              if ((uint64_t ***)*v99 == a2)
                goto LABEL_129;
            }
            if (v101)
              v128 = v101;
            else
              v128 = v99;
LABEL_162:
            v99 = sub_1C541AB24(v94 + 2480, (uint64_t)&v157, (uint64_t *)&v157, v128);
            v129 = v157;
            v99[4] = 0;
            v99[3] = 0;
            *v99 = v129;
            v99[1] = v99 + 3;
            v99[2] = 0x100000000;
          }
LABEL_129:
          v105 = *((unsigned int *)v99 + 4);
          if ((_DWORD)v105)
          {
            v106 = (llvm::MDNode **)(v99[1] + 8);
            v107 = 16 * v105;
            while (*((_DWORD *)v106 - 2) != 25)
            {
              v106 += 2;
              v107 -= 16;
              if (!v107)
                goto LABEL_133;
            }
            v111 = *v106;
            if (*v106)
            {
              v112 = *(uint64_t **)(a1 + 112);
              if (v112)
              {
                v113 = *((_DWORD *)v112 + 4);
                if (!v113)
                  goto LABEL_171;
                v114 = a2[5];
                v115 = *v112;
                v116 = v113 - 1;
                v117 = ((v114 >> 4) ^ (v114 >> 9)) & v116;
                v118 = *(uint64_t ***)(v115 + 16 * v117);
                if (v114 == v118)
                {
LABEL_142:
                  v121 = *(_QWORD *)(v115 + 16 * v117 + 8);
                }
                else
                {
                  v119 = 1;
                  while (v118 != (uint64_t **)-4096)
                  {
                    v120 = v117 + v119++;
                    v117 = v120 & v116;
                    v118 = *(uint64_t ***)(v115 + 16 * v117);
                    if (v114 == v118)
                      goto LABEL_142;
                  }
                  v121 = 0;
                }
                v130 = v116 & ((v7 >> 4) ^ (v7 >> 9));
                v131 = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v115 + 16 * v130);
                if (v7 == v131)
                {
LABEL_168:
                  v134 = *(_QWORD *)(v115 + 16 * v130 + 8);
                }
                else
                {
                  v132 = 1;
                  while (v131 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096)
                  {
                    v133 = v130 + v132++;
                    v130 = v133 & v116;
                    v131 = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v115 + 16 * v130);
                    if (v7 == v131)
                      goto LABEL_168;
                  }
                  v134 = 0;
                }
                if (v121 == v134)
LABEL_171:
                  llvm::Value::setMetadata(v11, 25, v111);
              }
            }
          }
          goto LABEL_133;
        }
        v128 = 0;
        goto LABEL_162;
      }
LABEL_133:
      v157 = v7;
      v158 = (uint64_t)v11;
      v159 = 0;
      v108 = sub_1C4DC1E54(a3, (unint64_t)&v157);
      v109 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
      v110 = *(_OWORD *)v108;
      *(_QWORD *)(v109 + 16) = *(_QWORD *)(v108 + 16);
      *(_OWORD *)v109 = v110;
      ++*(_DWORD *)(a3 + 8);
      llvm::MemoryDependenceResults::invalidateCachedPointerInfo(*(llvm::PhiValues ***)(a1 + 16), v51);
      v5 += 16;
      if (v5 == v151)
        goto LABEL_176;
    }
    v13 = **v12;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & v6;
      v17 = (uint64_t ****)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == a2)
      {
LABEL_11:
        v21 = (llvm::MDNode **)v17[1];
        v24 = *v21;
        v23 = (llvm::MDNode *)(v21 + 2);
        v22 = v24;
        goto LABEL_12;
      }
      v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(uint64_t ****)(v14 + 16 * v16);
        if (v18 == a2)
        {
          v17 = (uint64_t ****)(v14 + 16 * v16);
          goto LABEL_11;
        }
      }
    }
    v17 = (uint64_t ****)(v14 + 16 * v15);
    goto LABEL_11;
  }
LABEL_176:
  v135 = sub_1C5B0ACB4(a2, (uint64_t **)a3, a1);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v135, (llvm::Value *)1);
  v136 = *((unsigned __int8 *)v135 + 16);
  if (v136 == 83)
  {
    llvm::Value::takeName(v135, (llvm::Value *)a2);
    v136 = *((unsigned __int8 *)v135 + 16);
  }
  if (v136 >= 0x1C)
  {
    v137 = (unsigned __int8 *)a2[6];
    v155 = v137;
    if (v137)
      llvm::MetadataTracking::track((uint64_t)&v155, v137, 2);
    v138 = (unsigned __int8 **)((char *)v135 + 48);
    if (&v155 == (unsigned __int8 **)((char *)v135 + 48))
    {
      if (v155)
        llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
    }
    else
    {
      if (*v138)
        llvm::MetadataTracking::untrack((uint64_t)v135 + 48, *v138);
      v139 = v155;
      *v138 = v155;
      if (v139)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v155, v139, (uint64_t)v135 + 48);
        v155 = 0;
      }
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)v135 + 8) & 0xFE) == 0x12)
    v140 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v135 + 16) + 8);
  else
    v140 = *(_DWORD *)(*(_QWORD *)v135 + 8);
  if (v140 == 15)
    llvm::MemoryDependenceResults::invalidateCachedPointerInfo(*(llvm::PhiValues ***)(a1 + 16), v135);
  sub_1C5B0B008((int32x2_t *)a1, (llvm::Value *)a2);
  v141 = *(llvm::OptimizationRemarkEmitter **)(a1 + 96);
  v142 = ****(_QWORD ****)v141;
  if (*(_QWORD *)(v142 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v142 + 72) + 48))(*(_QWORD *)(v142 + 72)))
  {
    v143 = (const char *)a2[5][7];
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v166, (const llvm::DebugLoc *)(a2 + 6));
    v144 = a2[5];
    LODWORD(v164) = 9;
    BYTE4(v164) = 2;
    v165 = v143;
    v168 = "gvn";
    v169 = "LoadPRE";
    v170 = 7;
    v171 = 0;
    v172 = 0;
    v173 = v175;
    v174 = 0x400000000;
    v175[256] = 0;
    v176 = -1;
    v177 = v144;
    v163 = &off_1E814E500;
    v157 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))"load eliminated by PRE";
    v158 = 22;
    sub_1C53B17B4((uint64_t)&v173, (const void **)&v157);
    sub_1C61998EC((uint64_t)&v157, (uint64_t)&v163);
    v157 = &off_1E814E500;
    v163 = &off_1E814E790;
    v145 = (char *)v173;
    if ((_DWORD)v174)
    {
      v146 = (unint64_t)v174 << 6;
      do
      {
        v147 = (void **)&v145[v146];
        if (v145[v146 - 17] < 0)
          operator delete(*(v147 - 5));
        if (*((char *)v147 - 41) < 0)
          operator delete(*(v147 - 8));
        v146 -= 64;
      }
      while (v146);
      v145 = (char *)v173;
    }
    if (v145 != v175)
      free(v145);
    llvm::OptimizationRemarkEmitter::emit(v141, (llvm::DiagnosticInfoOptimizationBase *)&v157);
    v157 = &off_1E814E790;
    v148 = (char *)v160;
    if (v161)
    {
      v149 = (unint64_t)v161 << 6;
      do
      {
        v150 = (void **)&v148[v149];
        if (v148[v149 - 17] < 0)
          operator delete(*(v150 - 5));
        if (*((char *)v150 - 41) < 0)
          operator delete(*(v150 - 8));
        v149 -= 64;
      }
      while (v149);
      v148 = (char *)v160;
    }
    if (v148 != (char *)&v162)
      free(v148);
  }
}

llvm::Value *sub_1C5B0ACB4(uint64_t ***a1, uint64_t **a2, uint64_t a3)
{
  const llvm::DataLayout *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Type *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t ***v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  size_t v22;
  size_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  llvm::BasicBlock *v28;
  const llvm::DataLayout *v29;
  uint64_t ****v30;
  llvm::BasicBlock *v31;
  llvm::BasicBlock *v32;
  uint64_t v33;
  llvm::Type *v34;
  llvm::Value *v35;
  int v36;
  int v37;
  unsigned int v38;
  llvm::BasicBlock **v39;
  llvm::BasicBlock *v40;
  llvm::BasicBlock **v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  llvm::BasicBlock **v45;
  llvm::UndefValue *ValueInMiddleOfBlock;
  _OWORD v48[2];
  uint64_t v49;
  void **v50;
  llvm::BasicBlock *v51;
  void *v52[2];
  _QWORD v53[9];

  v53[8] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 2) == 1
    && llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(a3 + 24), **a2, (uint64_t)a1[5]))
  {
    v7 = **a2;
    v8 = *(_QWORD *)(v7 + 40);
    if (v8 == v7 + 40)
    {
      v10 = 0;
    }
    else
    {
      if (v8)
        v9 = (unsigned __int8 *)(v8 - 24);
      else
        v9 = 0;
      if (v9[16] - 29 >= 0xB)
        v10 = 0;
      else
        v10 = (llvm::Type *)v9;
    }
    return sub_1C5B0925C((uint64_t)(*a2 + 1), *a1, a1[5][7][5], v10, a3, v6);
  }
  v52[0] = v53;
  v52[1] = (void *)0x800000000;
  memset(v48, 0, sizeof(v48));
  v49 = 0;
  v50 = v52;
  v11 = *a1;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v12 = **v11;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v16 = (uint64_t *)(v13 + 16 * v15);
      v17 = (uint64_t ***)*v16;
      if ((uint64_t ***)*v16 == a1)
      {
LABEL_18:
        v20 = (_QWORD *)v16[1];
        v23 = *v20;
        v21 = (char *)(v20 + 2);
        v22 = v23;
        goto LABEL_19;
      }
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == a1)
        {
          v16 = (uint64_t *)(v13 + 16 * v15);
          goto LABEL_18;
        }
      }
    }
    v16 = (uint64_t *)(v13 + 16 * v14);
    goto LABEL_18;
  }
  v22 = 0;
  v21 = &byte_1C871356D;
LABEL_19:
  llvm::SSAUpdater::Initialize((uint64_t)v48, (uint64_t)v11, v21, v22);
  v24 = *((_DWORD *)a2 + 2);
  if (v24)
  {
    v25 = *a2;
    v26 = (uint64_t)&(*a2)[3 * v24];
    while (1)
    {
      v27 = *((_DWORD *)v25 + 4);
      if (v27 == 3)
        goto LABEL_50;
      v28 = (llvm::BasicBlock *)*v25;
      if (llvm::SSAUpdater::HasValueForBlock((uint64_t **)v48, (llvm::BasicBlock *)*v25))
        goto LABEL_50;
      v30 = (uint64_t ****)(v25 + 1);
      v31 = (llvm::BasicBlock *)a1[5];
      if (v28 == v31 && v27 <= 1 && *v30 == a1)
        goto LABEL_50;
      v32 = (llvm::BasicBlock *)*((_QWORD *)v28 + 5);
      if (v32 == (llvm::BasicBlock *)((char *)v28 + 40))
      {
        v34 = 0;
      }
      else
      {
        v33 = v32 ? (uint64_t)v32 - 24 : 0;
        v34 = *(unsigned __int8 *)(v33 + 16) - 29 >= 0xB ? 0 : (llvm::Type *)v33;
      }
      v35 = sub_1C5B0925C((uint64_t)v30, *a1, *(_QWORD *)(*((_QWORD *)v31 + 7) + 40), v34, a3, v29);
      v51 = v28;
      v36 = *(_DWORD *)(*(_QWORD *)&v48[0] + 16);
      if (!v36)
        break;
      v37 = v36 - 1;
      v38 = (v36 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      v39 = (llvm::BasicBlock **)(**(_QWORD **)&v48[0] + 16 * v38);
      v40 = *v39;
      if (*v39 != v28)
      {
        v41 = 0;
        v42 = 1;
        while (v40 != (llvm::BasicBlock *)-4096)
        {
          if (v41)
            v43 = 0;
          else
            v43 = v40 == (llvm::BasicBlock *)-8192;
          if (v43)
            v41 = v39;
          v44 = v38 + v42++;
          v38 = v44 & v37;
          v39 = (llvm::BasicBlock **)(**(_QWORD **)&v48[0] + 16 * (v44 & v37));
          v40 = *v39;
          if (*v39 == v28)
            goto LABEL_49;
        }
        if (v41)
          v45 = v41;
        else
          v45 = v39;
        goto LABEL_48;
      }
LABEL_49:
      v39[1] = v35;
LABEL_50:
      v25 += 3;
      if (v25 == (uint64_t *)v26)
        goto LABEL_53;
    }
    v45 = 0;
LABEL_48:
    v39 = (llvm::BasicBlock **)sub_1C4ECCA58(*(uint64_t *)&v48[0], (uint64_t)&v51, (uint64_t *)&v51, v45);
    *v39 = v51;
    v39[1] = 0;
    goto LABEL_49;
  }
LABEL_53:
  ValueInMiddleOfBlock = llvm::SSAUpdater::GetValueInMiddleOfBlock((llvm::UndefValue **)v48, a1[5]);
  llvm::SSAUpdater::~SSAUpdater((void **)v48);
  if (v52[0] != v53)
    free(v52[0]);
  return ValueInMiddleOfBlock;
}

void *sub_1C5B0B008(int32x2_t *a1, llvm::Value *a2)
{
  void *result;
  uint64_t v5;

  result = llvm::GVNPass::ValueTable::erase(a1 + 16, a2);
  v5 = a1[74].u32[0];
  if (v5 >= a1[74].i32[1])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[73], (uint64_t)&a1[75], v5 + 1, 8);
    LODWORD(v5) = a1[74].i32[0];
  }
  *(_QWORD *)(*(_QWORD *)&a1[73] + 8 * v5) = a2;
  ++a1[74].i32[0];
  return result;
}

uint64_t llvm::GVNPass::PerformLoadPRE(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  int isPreceededBySpecialInstruction;
  uint64_t SinglePredecessor;
  llvm::BasicBlock *v15;
  char *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  _QWORD *v99;
  int v100;
  uint64_t i;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  char *v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  char *v111;
  char *v112;
  _QWORD *j;
  _QWORD *v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  llvm::BasicBlock **v119;
  uint64_t v120;
  llvm::BasicBlock *v121;
  uint64_t v122;
  llvm::BasicBlock **v123;
  uint64_t v124;
  char v125;
  llvm::BasicBlock *v126;
  uint64_t ***v127;
  llvm::BasicBlock *v128;
  uint64_t v129;
  llvm::BasicBlock *v130;
  uint64_t v131;
  uint64_t ***v132;
  unsigned __int8 ***v133;
  uint64_t v134;
  unsigned __int8 **v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  llvm::Instruction *v140;
  llvm::Instruction *v141;
  int v142;
  llvm::BasicBlock **v143;
  uint64_t v144;
  _QWORD v145[2];
  int v146;
  _QWORD v147[2];
  int v148;
  void *__p;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  int v155;
  _BYTE v156[32];
  uint64_t v157;
  uint64_t ***v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  _QWORD v164[4];
  void *v165;
  uint64_t v166;
  _BYTE v167[32];
  void *v168;
  uint64_t v169;
  _QWORD v170[34];

  v170[32] = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)a4;
  v9 = *(unsigned int *)(a4 + 8);
  v152 = v156;
  v153 = v156;
  v154 = 4;
  v155 = 0;
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    do
    {
      v11 = *v8++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v152, v11);
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  isPreceededBySpecialInstruction = llvm::InstructionPrecedenceTracking::isPreceededBySpecialInstruction(*(int32x2_t **)(a1 + 104), (const llvm::BasicBlock **)a2);
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v12);
  if (SinglePredecessor)
  {
    do
    {
      if ((llvm::BasicBlock *)SinglePredecessor == v12)
        goto LABEL_26;
      v15 = (llvm::BasicBlock *)SinglePredecessor;
      v16 = (char *)sub_1C477672C((uint64_t)&v152, SinglePredecessor);
      v17 = v153 == v152 ? (uint64_t *)((char *)&v154 + 4) : &v154;
      if (v16 != &v153[8 * *(unsigned int *)v17])
        goto LABEL_26;
      v18 = (_QWORD *)*((_QWORD *)v15 + 5);
      if (v18 == (_QWORD *)((char *)v15 + 40))
      {
        v19 = 0;
      }
      else
      {
        if (v18)
          v19 = v18 - 3;
        else
          v19 = 0;
        if (*((unsigned __int8 *)v19 + 16) - 29 >= 0xB)
          v19 = 0;
      }
      v20 = *((unsigned __int8 *)v19 + 16);
      if (v20 != 30)
        __asm { BR              X10 }
      if ((*((_DWORD *)v19 + 5) & 0x7FFFFFF) == 3)
      {
LABEL_26:
        v21 = 0;
        goto LABEL_261;
      }
      isPreceededBySpecialInstruction = (isPreceededBySpecialInstruction & 1) != 0
                                     || llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(*(int32x2_t **)(a1 + 104), v15) != 0;
      SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v15);
    }
    while (SinglePredecessor);
  }
  else
  {
    v15 = v12;
  }
  v147[0] = 0;
  v147[1] = 0;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  __p = 0;
  v145[0] = 0;
  v145[1] = 0;
  v146 = 0;
  v22 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v22)
  {
    v23 = *(uint64_t **)a3;
    v24 = 24 * v22;
    do
    {
      *((_BYTE *)sub_1C5B11DE8((uint64_t)v145, v23) + 8) = 1;
      v23 += 3;
      v24 -= 24;
    }
    while (v24);
  }
  v25 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v25)
  {
    v26 = *(void ***)a4;
    v27 = 8 * v25;
    do
    {
      v28 = *v26++;
      v168 = v28;
      *((_BYTE *)sub_1C5B11DE8((uint64_t)v145, (uint64_t *)&v168) + 8) = 0;
      v27 -= 8;
    }
    while (v27);
  }
  v165 = v167;
  v166 = 0x400000000;
  v29 = *((_QWORD *)v15 + 1);
  if (!v29)
  {
LABEL_44:
    v34 = 0;
    goto LABEL_197;
  }
  while (1)
  {
    v30 = *(_QWORD *)(v29 + 24);
    v31 = *(unsigned __int8 *)(v30 + 16);
    v32 = v30 && v31 >= 0x1C;
    if (v32 && v31 - 29 < 0xB)
      break;
    v29 = *(_QWORD *)(v29 + 8);
    if (!v29)
      goto LABEL_44;
  }
  v139 = a3;
  v142 = isPreceededBySpecialInstruction;
  v140 = a2;
LABEL_45:
  v144 = *(_QWORD *)(v30 + 40);
  v35 = v144;
  v37 = (_QWORD *)(v144 + 40);
  v36 = *(_QWORD *)(v144 + 40);
  if (v36)
    v38 = v36 - 24;
  else
    v38 = 0;
  if (*(unsigned __int8 *)(v38 + 16) - 29 >= 0xB)
    v38 = 0;
  v39 = *(unsigned __int8 *)(v38 + 16) - 38;
  v52 = v39 > 0x38;
  v40 = (1 << v39) & 0x100060000000001;
  if (!v52 && v40 != 0)
  {
LABEL_255:
    v21 = 0;
    goto LABEL_256;
  }
  v42 = 0;
  v168 = v170;
  HIDWORD(v169) = 32;
  v170[0] = v144;
  v43 = 1;
  v44 = v145[0];
  while (1)
  {
    v45 = *((_QWORD *)v168 + v43 - 1);
    LODWORD(v169) = v43 - 1;
    v157 = v45;
    v158 = 0;
    result = sub_1C4A5C500(v44, v146, v45, &v158);
    if (!(_DWORD)result)
      break;
    v44 = v145[0];
    if (!*((_BYTE *)v158 + 8))
      goto LABEL_83;
LABEL_80:
    v43 = v169;
    if (!(_DWORD)v169)
    {
      v57 = 1;
      a2 = v140;
      goto LABEL_145;
    }
  }
  result = (uint64_t)sub_1C5B111C0((uint64_t)v145, &v157, v158);
  *(_QWORD *)result = v45;
  *(_BYTE *)(result + 8) = 2;
  v44 = v145[0];
  if (++v42 <= dword_1ED81CE18)
  {
    v47 = *(_QWORD *)(v45 + 8);
    v48 = v47;
    if (v47)
    {
      while (1)
      {
        v49 = *(_QWORD *)(v48 + 24);
        v50 = *(unsigned __int8 *)(v49 + 16);
        v51 = v49 && v50 >= 0x1C;
        v52 = !v51 || v50 - 29 > 0xA;
        if (!v52)
          break;
        v48 = *(_QWORD *)(v48 + 8);
        if (!v48)
          goto LABEL_82;
      }
      do
      {
        v53 = *(_QWORD *)(v47 + 24);
        v54 = *(unsigned __int8 *)(v53 + 16);
        if (v53)
          v55 = v54 >= 0x1C;
        else
          v55 = 0;
        if (v55 && v54 - 29 < 0xB)
          break;
        v47 = *(_QWORD *)(v47 + 8);
      }
      while (v47);
      sub_1C4DBBCC0((unsigned int *)&v168, v47, 0);
      goto LABEL_80;
    }
  }
LABEL_82:
  *(_BYTE *)(result + 8) = 0;
LABEL_83:
  LODWORD(v169) = 0;
  v58 = *(_QWORD *)(v45 + 40);
  if (v58 == v45 + 40)
  {
LABEL_93:
    v59 = 0;
    v64 = 0;
    a2 = v140;
  }
  else
  {
    v59 = v58 - 24;
    if (v58)
      v60 = v58 - 24;
    else
      v60 = 0;
    v61 = *(unsigned __int8 *)(v60 + 16);
    v62 = v61 - 29;
    if (v61 != 30)
    {
      v63 = 0;
      a2 = v140;
      switch(v62)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_92;
        case 1:
LABEL_264:
          __break(1u);
          break;
        case 2:
          v63 = (*(_DWORD *)(v60 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_92;
        case 3:
        case 9:
          v63 = (*(_DWORD *)(v60 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_92;
        case 4:
          v63 = 2;
          goto LABEL_92;
        case 7:
          v63 = *(_WORD *)(v60 + 18) & 1;
          goto LABEL_92;
        case 8:
          v63 = 1;
          goto LABEL_92;
        case 10:
          v63 = *(_DWORD *)(v60 + 80) + 1;
          goto LABEL_92;
        default:
          goto LABEL_93;
      }
      return result;
    }
    if ((*(_DWORD *)(v60 + 20) & 0x7FFFFFF) == 3)
      v63 = 2;
    else
      v63 = 1;
    a2 = v140;
LABEL_92:
    v64 = v63;
  }
  if ((int)v64 <= (unint64_t)HIDWORD(v169))
  {
    v65 = 0;
    v66 = 0;
    if (!(_DWORD)v64)
      goto LABEL_105;
  }
  else
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)v170, (int)v64, 8);
    v65 = v169;
    v66 = v169;
    if (!(_DWORD)v64)
      goto LABEL_105;
  }
  v67 = 0;
  v68 = 0;
  v69 = (char *)v168 + 8 * v65;
  v70 = *(unsigned __int8 *)(v59 + 16);
  v71 = v59 - 64;
  do
  {
    if (v70 != 30)
      __asm { BR              X1 }
    result = *(_QWORD *)(v59 - 32 - 32 * v68);
    *v69++ = result;
    ++v68;
    v67 += 2;
    v71 += 32;
  }
  while (2 * v64 != v67);
LABEL_105:
  LODWORD(v72) = v66 + v64;
  LODWORD(v169) = v72;
  if (!(_DWORD)v72)
  {
    v57 = 0;
    goto LABEL_145;
  }
  v73 = v146;
  v74 = v146 - 1;
  while (2)
  {
    v75 = *((_QWORD *)v168 + v72 - 1);
    v72 = (v72 - 1);
    LODWORD(v169) = v72;
    if (v73)
    {
      v76 = ((v75 >> 4) ^ (v75 >> 9)) & v74;
      v77 = *(_QWORD *)(v44 + 16 * v76);
      if (v75 == v77)
      {
LABEL_110:
        if ((_DWORD)v76 != v73)
        {
          v78 = v44 + 16 * v76;
          v80 = *(unsigned __int8 *)(v78 + 8);
          v79 = (_BYTE *)(v78 + 8);
          if (v80 == 2)
          {
            *v79 = 0;
            v81 = *(_QWORD *)(v75 + 40);
            if (v81 == v75 + 40)
            {
LABEL_121:
              v82 = 0;
              v87 = 0;
            }
            else
            {
              v82 = v81 - 24;
              if (v81)
                v83 = v81 - 24;
              else
                v83 = 0;
              v84 = *(unsigned __int8 *)(v83 + 16);
              v85 = v84 - 29;
              if (v84 != 30)
              {
                v86 = 0;
                switch(v85)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_120;
                  case 1:
                    goto LABEL_264;
                  case 2:
                    v86 = (*(_DWORD *)(v83 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_120;
                  case 3:
                  case 9:
                    v86 = (*(_DWORD *)(v83 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_120;
                  case 4:
                    v86 = 2;
                    goto LABEL_120;
                  case 7:
                    v86 = *(_WORD *)(v83 + 18) & 1;
                    goto LABEL_120;
                  case 8:
                    v86 = 1;
                    goto LABEL_120;
                  case 10:
                    v86 = *(_DWORD *)(v83 + 80) + 1;
                    goto LABEL_120;
                  default:
                    goto LABEL_121;
                }
              }
              if ((*(_DWORD *)(v83 + 20) & 0x7FFFFFF) == 3)
                v86 = 2;
              else
                v86 = 1;
LABEL_120:
              v87 = v86;
            }
            v88 = (int)v87 + (unint64_t)v72;
            if (v88 <= HIDWORD(v169))
            {
              if (!(_DWORD)v87)
                goto LABEL_137;
            }
            else
            {
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)v170, v88, 8);
              v72 = v169;
              if (!(_DWORD)v87)
                goto LABEL_137;
            }
            v89 = 0;
            v90 = 0;
            v91 = (char *)v168 + 8 * v72;
            v92 = *(unsigned __int8 *)(v82 + 16);
            v93 = v82 - 64;
            do
            {
              if (v92 != 30)
                __asm { BR              X1 }
              result = *(_QWORD *)(v82 - 32 - 32 * v90);
              *v91++ = result;
              ++v90;
              v89 += 2;
              v93 += 32;
            }
            while (2 * v87 != v89);
LABEL_137:
            LODWORD(v72) = v72 + v87;
            LODWORD(v169) = v72;
            isPreceededBySpecialInstruction = v142;
          }
        }
      }
      else
      {
        v94 = 1;
        while (v77 != -4096)
        {
          v95 = v76 + v94++;
          v76 = v95 & v74;
          v77 = *(_QWORD *)(v44 + 16 * v76);
          if (v75 == v77)
            goto LABEL_110;
        }
      }
    }
    if ((_DWORD)v72)
      continue;
    break;
  }
  v57 = 0;
  a2 = v140;
LABEL_145:
  a3 = v139;
  if (v168 != v170)
    free(v168);
  if ((v57 & 1) == 0)
  {
    v96 = (_QWORD *)*v37;
    if ((_QWORD *)*v37 == v37)
    {
      v97 = 0;
    }
    else
    {
      v97 = v96 - 3;
      if (!v96)
        v97 = 0;
      if (*((unsigned __int8 *)v97 + 16) - 29 >= 0xB)
        v97 = 0;
    }
    v98 = *((unsigned __int8 *)v97 + 16);
    if (v98 != 30)
      __asm { BR              X11 }
    if ((*((_DWORD *)v97 + 5) & 0x7FFFFFF) != 3)
    {
      *(_QWORD *)sub_1C5B0BF2C((uint64_t)v147, &v144) = 0;
      goto LABEL_182;
    }
    if (v96)
      v99 = v96 - 3;
    else
      v99 = 0;
    if (*((unsigned __int8 *)v99 + 16) - 29 >= 0xB)
      v99 = 0;
    v100 = *((unsigned __int8 *)v99 + 16);
    if (v100 != 32 && v100 != 39)
    {
      for (i = *((_QWORD *)v15 + 6); ; i = *(_QWORD *)(i + 8))
      {
        v102 = i - 24;
        if (!i)
          v102 = 0;
        if (*(_BYTE *)(v102 + 16) != 83)
          break;
      }
      v103 = *(unsigned __int8 *)(i - 8) - 38;
      v52 = v103 > 0x38;
      v104 = (1 << v103) & 0x100060000000001;
      if (v52 || v104 == 0)
      {
        v106 = (char *)(a1 + 6);
        if (!*(_BYTE *)(a1 + 7))
          v106 = &byte_1ED81CC98;
        if (*v106
          || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 24), (uint64_t)v15, v35))
        {
          v107 = v166;
          if (v166 >= (unint64_t)HIDWORD(v166))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, (uint64_t)v167, v166 + 1, 8);
            v107 = v166;
          }
          *((_QWORD *)v165 + v107) = v35;
          LODWORD(v166) = v166 + 1;
          goto LABEL_182;
        }
      }
    }
    goto LABEL_255;
  }
LABEL_182:
  while (1)
  {
    v29 = *(_QWORD *)(v29 + 8);
    if (!v29)
      break;
    v30 = *(_QWORD *)(v29 + 24);
    v108 = *(unsigned __int8 *)(v30 + 16);
    if (v30)
      v109 = v108 >= 0x1C;
    else
      v109 = 0;
    if (v109 && v108 - 29 < 0xB)
      goto LABEL_45;
  }
  v34 = v166;
LABEL_197:
  v111 = (char *)__p;
  v112 = v150;
  if (v34 + ((unint64_t)(v150 - (_BYTE *)__p) >> 4) != 1)
    goto LABEL_255;
  if (isPreceededBySpecialInstruction)
  {
    if (!v34)
      goto LABEL_220;
    for (j = (_QWORD *)*((_QWORD *)v15 + 6); j != (_QWORD *)((char *)v15 + 40); j = (_QWORD *)j[1])
    {
      v115 = j - 3;
      if (j)
        v114 = j - 3;
      else
        v114 = 0;
      if (*((_BYTE *)v114 + 16) != 83)
        goto LABEL_208;
    }
    v115 = 0;
LABEL_208:
    if (!llvm::isSafeToSpeculativelyExecute((uint64_t)a2, v115, *(unsigned __int8 **)(a1 + 24), 0))
      goto LABEL_255;
    v111 = (char *)__p;
    v112 = v150;
LABEL_220:
    while (v111 != v112)
    {
      v116 = *(_QWORD *)(*(_QWORD *)v111 + 40);
      if (v116 == *(_QWORD *)v111 + 40)
      {
        v118 = 0;
      }
      else
      {
        if (v116)
          v117 = v116 - 24;
        else
          v117 = 0;
        if (*(unsigned __int8 *)(v117 + 16) - 29 >= 0xB)
          v118 = 0;
        else
          v118 = (unint64_t *)v117;
      }
      if ((llvm::isSafeToSpeculativelyExecute((uint64_t)a2, v118, *(unsigned __int8 **)(a1 + 24), 0) & 1) == 0)
        goto LABEL_255;
      v111 += 16;
    }
  }
  if ((_DWORD)v166)
  {
    v119 = (llvm::BasicBlock **)v165;
    v120 = 8 * v166;
    do
    {
      v121 = *v119++;
      v168 = 0;
      v168 = (void *)llvm::GVNPass::splitCriticalEdges((llvm::GVNPass *)a1, v121, v15);
      *(_QWORD *)sub_1C5B0BF2C((uint64_t)v147, (uint64_t *)&v168) = 0;
      v120 -= 8;
    }
    while (v120);
  }
  v122 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v168 = v170;
  v169 = 0x800000000;
  v123 = (llvm::BasicBlock **)__p;
  v143 = (llvm::BasicBlock **)v150;
  if (__p != v150)
  {
    v141 = a2;
    v124 = v122 + 272;
    v125 = 1;
    while (2)
    {
      v126 = *v123;
      v127 = (uint64_t ***)*((_QWORD *)v141 - 4);
      v128 = (llvm::BasicBlock *)*((_QWORD *)v141 + 5);
      while (v128 != v15)
      {
        v129 = *(_QWORD *)(a1 + 40);
        v158 = v127;
        v159 = v124;
        v160 = 0;
        v161 = v129;
        v162 = v164;
        v163 = 0x400000000;
        if (v127 && *((unsigned __int8 *)v127 + 16) >= 0x1Cu)
        {
          v164[0] = v127;
          LODWORD(v163) = 1;
        }
        v130 = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v128);
        v127 = llvm::PHITransAddr::PHITranslateWithInsertion(&v158, v128, v130, *(const llvm::DominatorTree **)(a1 + 24), (uint64_t)&v168);
        if (v127)
          v128 = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v128);
        else
          v125 = 0;
        if (v162 != v164)
          free(v162);
        if (!v127)
          goto LABEL_251;
      }
      if (!v127)
        goto LABEL_251;
      v131 = *(_QWORD *)(a1 + 40);
      v158 = v127;
      v159 = v124;
      v160 = 0;
      v161 = v131;
      v162 = v164;
      v163 = 0x400000000;
      if (*((unsigned __int8 *)v127 + 16) >= 0x1Cu)
      {
        v164[0] = v127;
        LODWORD(v163) = 1;
      }
      v132 = llvm::PHITransAddr::PHITranslateWithInsertion(&v158, v15, v126, *(const llvm::DominatorTree **)(a1 + 24), (uint64_t)&v168);
      if (v162 != v164)
        free(v162);
      if (!v132)
        goto LABEL_251;
      v123[1] = (llvm::BasicBlock *)v132;
      v123 += 2;
      if (v123 != v143)
        continue;
      break;
    }
    if ((v125 & 1) == 0)
    {
LABEL_251:
      while ((_DWORD)v169)
      {
        v136 = *((_QWORD *)v168 + v169 - 1);
        LODWORD(v169) = v169 - 1;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v136 + 40) + 40, (uint64_t ***)v136);
        v137 = *(_QWORD *)(v136 + 24);
        v138 = *(_QWORD **)(v136 + 32);
        *v138 = v137;
        *(_QWORD *)(v137 + 8) = v138;
        *(_QWORD *)(v136 + 24) = 0;
        *(_QWORD *)(v136 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v136);
      }
      v21 = (_DWORD)v166 != 0;
      goto LABEL_253;
    }
    a2 = v141;
    if ((_DWORD)v169)
    {
      v133 = (unsigned __int8 ***)v168;
      v134 = 8 * v169;
      do
      {
        v135 = *v133++;
        llvm::Instruction::dropLocation(v135);
        llvm::GVNPass::ValueTable::lookupOrAdd((llvm::GVNPass::ValueTable *)(a1 + 128), (llvm::Value *)v135);
        v134 -= 8;
      }
      while (v134);
    }
  }
  llvm::GVNPass::eliminatePartiallyRedundantLoad(a1, (uint64_t ***)a2, a3, (uint64_t)v147);
  v21 = 1;
LABEL_253:
  if (v168 != v170)
    free(v168);
LABEL_256:
  if (v165 != v167)
    free(v165);
  MEMORY[0x1CAA32FB4](v145[0], 8);
  if (__p)
  {
    v150 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v147[0], 8);
LABEL_261:
  if (v153 != v152)
    free(v153);
  return v21;
}

uint64_t sub_1C5B0BF2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;

  v4 = *a2;
  v31 = *a2;
  v32 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_3:
      v11 = *(_DWORD *)(v6 + 16 * v8 + 8);
      v12 = *(_QWORD *)(a1 + 24);
      return v12 + 16 * v11 + 8;
    }
    v14 = 0;
    v15 = 1;
    while (v10 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v10 == -8192;
      if (v16)
        v14 = v9;
      v17 = v8 + v15++;
      v8 = v17 & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_3;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v9;
  }
  else
  {
    v18 = 0;
  }
  v19 = sub_1C4DE3FA0(a1, (uint64_t)&v31, &v31, v18);
  *v19 = v31;
  *((_DWORD *)v19 + 2) = v32;
  v20 = *a2;
  v22 = *(uint64_t **)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v22 < v21)
  {
    *v22 = v20;
    v22[1] = 0;
    v30 = v22 + 2;
  }
  else
  {
    v23 = *(char **)(a1 + 24);
    v24 = ((char *)v22 - v23) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      abort();
    v26 = v21 - (_QWORD)v23;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 60)
        sub_1C4764EE4();
      v28 = (char *)operator new(16 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = (uint64_t *)&v28[16 * v24];
    *v29 = v20;
    v29[1] = 0;
    v30 = v29 + 2;
    if (v22 != (uint64_t *)v23)
    {
      do
      {
        *((_OWORD *)v29 - 1) = *((_OWORD *)v22 - 1);
        v29 -= 2;
        v22 -= 2;
      }
      while (v22 != (uint64_t *)v23);
      v22 = *(uint64_t **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 32) = v30;
    *(_QWORD *)(a1 + 40) = &v28[16 * v27];
    if (v22)
      operator delete(v22);
  }
  *(_QWORD *)(a1 + 32) = v30;
  v12 = *(_QWORD *)(a1 + 24);
  v11 = (((unint64_t)v30 - v12) >> 4) - 1;
  *((_DWORD *)v19 + 2) = v11;
  return v12 + 16 * v11 + 8;
}

uint64_t llvm::GVNPass::processNonLocalLoad(llvm::GVNPass *this, llvm::LoadInst *a2)
{
  uint64_t v4;
  uint64_t PRE;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  BOOL v11;
  char *v12;
  char *v13;
  char *v14;
  llvm::Value *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BOOL4 v30;
  unsigned __int8 *v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[512];
  void *v36;
  uint64_t v37;
  _BYTE v38[1536];
  void *v39;
  uint64_t v40;
  _QWORD v41[193];

  v41[192] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 112);
  if (v4 && (*(_BYTE *)(v4 + 18) & 0xC) != 0)
    return 0;
  v39 = v41;
  v40 = 0x4000000000;
  llvm::MemoryDependenceResults::getNonLocalPointerDependency(*((_QWORD *)this + 2), (uint64_t)a2, (uint64_t)&v39);
  if (dword_1ED81CD58 >= v40 && ((_DWORD)v40 != 1 || (*((_QWORD *)v39 + 1) & 7uLL) - 1 <= 1))
  {
    PRE = 0;
    v6 = *((_QWORD *)a2 - 4);
    if (v6 && *(_BYTE *)(v6 + 16) == 62)
    {
      v7 = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
      if (v6 - 32 * v7 + 32 == v6)
      {
        v8 = 0;
      }
      else
      {
        v8 = 0;
        v9 = 32 - 32 * v7;
        do
        {
          v10 = *(unsigned __int8 **)(v6 + v9);
          if (v10)
            v11 = v10[16] >= 0x1Cu;
          else
            v11 = 0;
          if (v11)
            v8 = v8 & 1 | llvm::GVNPass::performScalarPRE(this, (llvm::Instruction *)v10);
          v9 += 32;
        }
        while (v9);
      }
      PRE = v8 & 1;
    }
    v36 = v38;
    v37 = 0x4000000000;
    v33 = v35;
    v34 = 0x4000000000;
    llvm::GVNPass::AnalyzeLoadAvailability((uint64_t)this, (uint64_t *)a2, (uint64_t)&v39, (uint64_t)&v36, (uint64_t)&v33);
    if (!(_DWORD)v37)
      goto LABEL_64;
    if ((_DWORD)v34)
    {
      if (*((_BYTE *)this + 1))
        v12 = (char *)this;
      else
        v12 = &byte_1ED81CA58;
      if (!*v12)
        goto LABEL_64;
      v13 = (char *)this + 2;
      if (!*((_BYTE *)this + 3))
        v13 = &byte_1ED81CB18;
      if (!*v13)
        goto LABEL_64;
      v14 = (char *)this + 4;
      if (!*((_BYTE *)this + 5))
        v14 = &byte_1ED81CBD8;
      if (!*v14)
      {
        v21 = (uint64_t *)*((_QWORD *)this + 14);
        if (v21)
        {
          v22 = *((_DWORD *)v21 + 4);
          if (v22)
          {
            v23 = *((_QWORD *)a2 + 5);
            v24 = *v21;
            v25 = v22 - 1;
            v26 = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
            v27 = *(_QWORD *)(v24 + 16 * v26);
            if (v23 == v27)
            {
LABEL_59:
              v30 = *(_QWORD *)(v24 + 16 * v26 + 8) != 0;
              goto LABEL_61;
            }
            v28 = 1;
            while (v27 != -4096)
            {
              v29 = v26 + v28++;
              v26 = v29 & v25;
              v27 = *(_QWORD *)(v24 + 16 * v26);
              if (v23 == v27)
                goto LABEL_59;
            }
          }
          v30 = 0;
LABEL_61:
          if (((v30 | PRE) & 1) != 0)
          {
            PRE = !v30 | PRE;
            goto LABEL_64;
          }
LABEL_63:
          PRE = llvm::GVNPass::PerformLoadPRE((uint64_t)this, a2, (uint64_t)&v36, (uint64_t)&v33);
          goto LABEL_64;
        }
      }
      if ((PRE & 1) == 0)
        goto LABEL_63;
    }
    else
    {
      v15 = sub_1C5B0ACB4((uint64_t ***)a2, (uint64_t **)&v36, (uint64_t)this);
      llvm::Value::doRAUW(a2, v15, (llvm::Value *)1);
      v16 = *((unsigned __int8 *)v15 + 16);
      if (v16 == 83)
      {
        llvm::Value::takeName(v15, a2);
        v16 = *((unsigned __int8 *)v15 + 16);
      }
      if (v16 >= 0x1C)
      {
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
        if (v17)
        {
          if (*((_QWORD *)a2 + 5) == *((_QWORD *)v15 + 5))
          {
            v32 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
            llvm::MetadataTracking::track((uint64_t)&v32, v17, 2);
            v18 = (unsigned __int8 **)((char *)v15 + 48);
            if (&v32 == (unsigned __int8 **)((char *)v15 + 48))
            {
              if (v32)
                llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
            }
            else
            {
              if (*v18)
                llvm::MetadataTracking::untrack((uint64_t)v15 + 48, *v18);
              v19 = v32;
              *v18 = v32;
              if (v19)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v32, v19, (uint64_t)v15 + 48);
                v32 = 0;
              }
            }
          }
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)v15 + 8) & 0xFE) == 0x12)
        v20 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v15 + 16) + 8);
      else
        v20 = *(_DWORD *)(*(_QWORD *)v15 + 8);
      if (v20 == 15)
        llvm::MemoryDependenceResults::invalidateCachedPointerInfo(*((llvm::PhiValues ***)this + 2), v15);
      sub_1C5B0B008((int32x2_t *)this, a2);
      sub_1C5B0D064((uint64_t)a2, v15, *((llvm::OptimizationRemarkEmitter **)this + 12));
    }
    PRE = 1;
LABEL_64:
    if (v33 != v35)
      free(v33);
    if (v36 != v38)
      free(v36);
    goto LABEL_68;
  }
  PRE = 0;
LABEL_68:
  if (v39 != v41)
    free(v39);
  return PRE;
}

uint64_t llvm::GVNPass::performScalarPRE(llvm::GVNPass *this, llvm::Instruction *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Instruction *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  const llvm::BasicBlock *v29;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  llvm::Instruction *Leader;
  llvm::Instruction *v40;
  uint64_t v41;
  llvm::Instruction **v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  const llvm::Instruction *SuccessorNumber;
  _QWORD *v55;
  unsigned __int8 *v56;
  llvm *v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Instruction *v64;
  int v65;
  int v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  llvm::Value *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  llvm::Value *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::PHINode *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 **v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  llvm::PhiValues **v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  llvm::MemoryDependenceResults *v98;
  int32x2_t **v99;
  __int32 v100;
  int32x2_t v101;
  __int32 v102;
  uint64_t v103;
  llvm::Instruction *v104;
  int v105;
  int v106;
  llvm::MemoryAccess *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  llvm::Instruction *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  llvm::ValueSymbolTable *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  int v129;
  unsigned int v130;
  unsigned int v131;
  llvm::BasicBlock *v132;
  unsigned int v133;
  llvm::Value *v134;
  unsigned __int8 *v135;
  uint64_t v136[4];
  __int16 v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  _QWORD v141[18];

  v141[16] = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)a2 + 16);
  if ((v2 - 29) < 0xB)
    return 0;
  v3 = 0;
  if (v2 != 59 && v2 != 83)
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
      return 0;
    v7 = *((unsigned __int8 *)a2 + 16) - 33;
    if (v7 <= 0x37)
    {
      if (((1 << (*((_BYTE *)a2 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v19 = *((_QWORD *)a2 + 8);
        if (!v19 || (*(_BYTE *)(v19 + 20) & 4) == 0 && (*(_BYTE *)(v19 + 17) & 0x10) == 0)
        {
          LODWORD(v139) = 7;
          if (sub_1C53E4BBC((uint64_t)a2, (__int32 *)&v139, 1uLL))
          {
            v120 = *((_QWORD *)a2 - 4);
            if (!v120
              || *(_BYTE *)(v120 + 16)
              || *(_QWORD *)(v120 + 24) != *((_QWORD *)a2 + 9)
              || *(_DWORD *)(v120 + 36) != 7)
            {
              return 0;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
          {
            return 0;
          }
        }
      }
      else if (((1 << (*((_BYTE *)a2 + 16) - 33)) & 0x808001C8000010) != 0
             || v7 == 28 && (*((_WORD *)a2 + 9) & 0x301) != 0)
      {
        return 0;
      }
    }
    v8 = *((unsigned __int8 *)a2 + 16) - 33;
    if (v8 <= 0x37)
    {
      if (((1 << (*((_BYTE *)a2 + 16) - 33)) & 0x808001D0000010) != 0)
        return 0;
      if (((1 << (*((_BYTE *)a2 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v20 = *((_QWORD *)a2 + 8);
        if (!v20 || (*(_BYTE *)(v20 + 17) & 0x30) == 0)
        {
          v21 = *((_DWORD *)a2 + 5);
          if (v21 < 0)
          {
            v121 = (char *)a2 - 32 * (v21 & 0x7FFFFFF);
            v124 = *((_QWORD *)v121 - 1);
            v122 = v121 - 8;
            v123 = v124;
            if (v124)
            {
              v125 = -v123;
              do
              {
                v126 = *(_DWORD *)(*(_QWORD *)&v122[v125] + 8);
                v49 = v126 > 7;
                v127 = (1 << v126) & 0x83;
                if (v49 || v127 == 0)
                  return 0;
                v125 += 16;
              }
              while (v125);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
          {
            return 0;
          }
        }
      }
      else if (v8 == 27 && (*((_WORD *)a2 + 9) & 0x301) != 0)
      {
        return 0;
      }
    }
    if ((llvm::Instruction::mayThrow(a2) & 1) == 0
      && llvm::Instruction::willReturn(a2)
      && !sub_1C4D99D08((uint64_t)a2))
    {
      v3 = 0;
      v9 = *((unsigned __int8 *)a2 + 16);
      if (v9 == 62 || (v9 - 81) < 2)
        return v3;
      v10 = v9 - 33;
      if (v10 <= 0x33 && ((1 << v10) & 0x8000000000041) != 0)
      {
        if (*(_BYTE *)(*((_QWORD *)a2 - 4) + 16) == 24)
          return 0;
        v11 = *((_QWORD *)a2 + 8);
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 12) & 0x40) != 0)
            return 0;
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 6) & 1) != 0)
          return 0;
      }
      v12 = *((_QWORD *)this + 16);
      v13 = *((unsigned int *)this + 36);
      if ((_DWORD)v13)
      {
        LODWORD(v14) = (v13 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v15 = v12 + 16 * v14;
        v16 = *(llvm::Instruction **)v15;
        if (*(llvm::Instruction **)v15 == a2)
        {
LABEL_50:
          v22 = *(_DWORD *)(v15 + 8);
          v23 = *((_QWORD *)a2 + 5);
          if (*((_BYTE *)this + 688))
            llvm::GVNPass::assignBlockRPONumber(this, *(llvm::Function **)(v23 + 56));
          v139 = v141;
          v140 = 0x800000000;
          v24 = *(_QWORD *)(v23 + 8);
          if (!v24)
            goto LABEL_101;
          while (1)
          {
            v25 = *(_QWORD *)(v24 + 24);
            v26 = *(unsigned __int8 *)(v25 + 16);
            v27 = v25 && v26 >= 0x1C;
            if (v27 && v26 - 29 < 0xB)
              break;
            v24 = *(_QWORD *)(v24 + 8);
            if (!v24)
              goto LABEL_101;
          }
          v29 = *(const llvm::BasicBlock **)(v25 + 40);
          if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 3), (uint64_t)v29))
          {
LABEL_101:
            v3 = 0;
            goto LABEL_102;
          }
          v130 = a2 >> 4;
          v131 = v22;
          v132 = 0;
          v133 = 0;
          v31 = 0;
LABEL_65:
          v136[0] = (uint64_t)v29;
          v32 = *(_DWORD *)(sub_1C4F762F0((uint64_t)this + 664, v136) + 8);
          v138 = v23;
          if (v32 >= *(_DWORD *)(sub_1C4F762F0((uint64_t)this + 664, &v138) + 8))
          {
            v33 = *((_DWORD *)a2 + 5);
            if ((v33 & 0x40000000) != 0)
            {
              v35 = (char *)*((_QWORD *)a2 - 1);
              v34 = v33 & 0x7FFFFFF;
            }
            else
            {
              v34 = v33 & 0x7FFFFFF;
              v35 = (char *)a2 - 32 * v34;
            }
            if (v34)
            {
              v36 = 32 * v34;
              do
              {
                v37 = *(_QWORD *)v35 && *(unsigned __int8 *)(*(_QWORD *)v35 + 16) >= 0x1Cu;
                if (v37 && *(_QWORD *)(*(_QWORD *)v35 + 40) == v23)
                  goto LABEL_101;
                v35 += 32;
                v36 -= 32;
              }
              while (v36);
            }
          }
          v38 = llvm::GVNPass::ValueTable::phiTranslate((llvm::GVNPass *)((char *)this + 128), v29, (const llvm::BasicBlock *)v23, v22, this);
          Leader = (llvm::Instruction *)llvm::GVNPass::findLeader(this, v29, v38);
          if (Leader)
          {
            v40 = Leader;
            if (Leader != a2)
            {
              v41 = v140;
              if (v140 >= (unint64_t)HIDWORD(v140))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, (uint64_t)v141, v140 + 1, 16);
                v41 = v140;
              }
              v42 = (llvm::Instruction **)((char *)v139 + 16 * v41);
              *v42 = v40;
              v42[1] = v29;
              v43 = v140 + 1;
              LODWORD(v140) = v140 + 1;
              ++v31;
              goto LABEL_86;
            }
            goto LABEL_101;
          }
          v44 = v140;
          if (v140 >= (unint64_t)HIDWORD(v140))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, (uint64_t)v141, v140 + 1, 16);
            v44 = v140;
          }
          v45 = (char *)v139 + 16 * v44;
          *v45 = 0;
          v45[1] = v29;
          v43 = v140 + 1;
          LODWORD(v140) = v140 + 1;
          ++v133;
          v132 = v29;
LABEL_86:
          while (1)
          {
            v24 = *(_QWORD *)(v24 + 8);
            if (!v24)
              break;
            v46 = *(_QWORD *)(v24 + 24);
            v47 = *(unsigned __int8 *)(v46 + 16);
            if (v46)
              v48 = v47 >= 0x1C;
            else
              v48 = 0;
            v49 = !v48 || v47 - 29 > 0xA;
            if (!v49)
            {
              v29 = *(const llvm::BasicBlock **)(v46 + 40);
              v3 = 0;
              if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 3), (uint64_t)v29))
              {
                goto LABEL_65;
              }
              goto LABEL_102;
            }
          }
          v3 = 0;
          if (v133 > 1 || !v31)
            goto LABEL_102;
          if (v133)
          {
            if ((llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0) & 1) == 0
              && (llvm::InstructionPrecedenceTracking::isPreceededBySpecialInstruction(*((int32x2_t **)this + 13), (const llvm::BasicBlock **)a2) & 1) != 0)
            {
              goto LABEL_101;
            }
            v3 = 0;
            v51 = (_QWORD *)((char *)v132 + 40);
            v50 = *((_QWORD *)v132 + 5);
            if (v50)
              v52 = v50 - 24;
            else
              v52 = 0;
            if (*(unsigned __int8 *)(v52 + 16) - 29 >= 0xB)
              v52 = 0;
            v53 = *(unsigned __int8 *)(v52 + 16);
            if (v53 == 32 || v53 == 39)
            {
LABEL_102:
              if (v139 != v141)
                free(v139);
              return v3;
            }
            SuccessorNumber = (const llvm::Instruction *)llvm::GetSuccessorNumber((uint64_t)v132, v23);
            v55 = (_QWORD *)*((_QWORD *)v132 + 5);
            if (v55 == v51)
            {
              v57 = 0;
            }
            else
            {
              if (v55)
                v56 = (unsigned __int8 *)(v55 - 3);
              else
                v56 = 0;
              if (v56[16] - 29 >= 0xB)
                v57 = 0;
              else
                v57 = (llvm *)v56;
            }
            if (llvm::isCriticalEdge(v57, SuccessorNumber, 0))
            {
              v110 = (_QWORD *)*v51;
              if ((_QWORD *)*v51 == v51)
              {
                v112 = 0;
              }
              else
              {
                if (v110)
                  v111 = v110 - 3;
                else
                  v111 = 0;
                if (*((unsigned __int8 *)v111 + 16) - 29 >= 0xB)
                  v112 = 0;
                else
                  v112 = v111;
              }
              v114 = *((unsigned int *)this + 176);
              if (v114 >= *((_DWORD *)this + 177))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 696, (uint64_t)this + 712, v114 + 1, 16);
                LODWORD(v114) = *((_DWORD *)this + 176);
              }
              v3 = 0;
              v115 = (_QWORD *)(*((_QWORD *)this + 87) + 16 * v114);
              *v115 = v112;
              v115[1] = SuccessorNumber;
              ++*((_DWORD *)this + 176);
              goto LABEL_102;
            }
            llvm::Instruction::clone(a2);
            v134 = v113;
            if (!llvm::GVNPass::performScalarPREInsertion((llvm::InstructionPrecedenceTracking **)this, v113, v132, (llvm::BasicBlock *)v23))
            {
              llvm::Value::deleteValue(v134);
              goto LABEL_101;
            }
            v129 = v140;
          }
          else
          {
            v129 = v43;
            v134 = 0;
          }
          v58 = *(uint64_t ***)a2;
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v69 = 0;
            v68 = &byte_1C871356D;
LABEL_128:
            v137 = 773;
            v136[0] = (uint64_t)v68;
            v136[1] = v69;
            v136[2] = (uint64_t)".pre-phi";
            v71 = *(uint64_t **)(v23 + 48);
            v72 = operator new(0x48uLL);
            v73 = v72;
            v72[1] = v58;
            v74 = (llvm::Value *)(v72 + 1);
            *v72 = 0;
            v72[2] = 0;
            v72[3] = 0x4000000000000053;
            *((_OWORD *)v72 + 2) = 0u;
            v75 = (char *)(v72 + 4);
            *((_OWORD *)v72 + 3) = 0u;
            *((_DWORD *)v72 + 16) = 0;
            v76 = v72;
            if (v71)
            {
              v116 = v71[2];
              v72[6] = v116;
              *(_WORD *)(v116 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v72 + 31) & 0x10) != 0)
              {
                v118 = *(_QWORD *)(v116 + 56);
                if (v118)
                {
                  v119 = *(llvm::ValueSymbolTable **)(v118 + 104);
                  if (v119)
                    llvm::ValueSymbolTable::reinsertValue(v119, v74);
                }
              }
              v117 = *v71;
              v73 = v76;
              v76[4] = *v71;
              v76[5] = v71;
              *(_QWORD *)(v117 + 8) = v75;
              *v71 = (uint64_t)v75;
            }
            *((_DWORD *)v73 + 17) = v129;
            llvm::Value::setName((uint64_t ***)v74, (uint64_t)v136);
            v77 = *((unsigned int *)v73 + 17);
            v78 = operator new(40 * v77);
            *v73 = v78;
            if ((_DWORD)v77)
            {
              v80 = &v78[4 * v77];
              do
              {
                *v78 = 0;
                v78[1] = 0;
                v78[2] = 0;
                v78[3] = v74;
                v78 += 4;
              }
              while (v78 != v80);
            }
            if ((_DWORD)v140)
            {
              v81 = 0;
              v82 = 16 * v140;
              do
              {
                v83 = *(_QWORD *)((char *)v139 + v81);
                if (v83)
                {
                  llvm::patchReplacementInstruction(a2, *(llvm::Instruction **)((char *)v139 + v81), v79);
                  v84 = *(_QWORD *)((char *)v139 + v81 + 8);
                  v85 = v74;
                  v86 = v83;
                }
                else
                {
                  v85 = v74;
                  v84 = (uint64_t)v132;
                  v86 = (uint64_t)v134;
                }
                sub_1C477667C(v85, v86, v84);
                v81 += 16;
              }
              while (v82 != v81);
            }
            llvm::GVNPass::ValueTable::add((llvm::GVNPass *)((char *)this + 128), v74, v131);
            llvm::GVNPass::ValueTable::eraseTranslateCacheEntry((uint64_t)this + 128, v131, (const llvm::BasicBlock *)v23);
            sub_1C5B0EF1C((uint64_t)this, v131, (uint64_t)v74, v23);
            v87 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
            v135 = v87;
            if (v87)
              llvm::MetadataTracking::track((uint64_t)&v135, v87, 2);
            v90 = (unsigned __int8 *)v76[7];
            v89 = (unsigned __int8 **)(v76 + 7);
            v88 = v90;
            if (v90)
              llvm::MetadataTracking::untrack((uint64_t)v89, v88);
            v91 = v135;
            *v89 = v135;
            if (v91)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v135, v91, (uint64_t)v89);
              v135 = 0;
            }
            llvm::Value::doRAUW(a2, v74, (llvm::Value *)1);
            v92 = (llvm::PhiValues **)*((_QWORD *)this + 2);
            if (v92)
            {
              v93 = (*(_DWORD *)(*(_QWORD *)v74 + 8) & 0xFE) == 0x12
                  ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v74 + 16) + 8)
                  : *(_DWORD *)(*(_QWORD *)v74 + 8);
              if (v93 == 15)
                llvm::MemoryDependenceResults::invalidateCachedPointerInfo(v92, v74);
            }
            llvm::GVNPass::ValueTable::erase((int32x2_t *)this + 16, a2);
            LODWORD(v136[0]) = v131;
            v94 = sub_1C5B113A4((uint64_t)this + 312, v136);
            v95 = 0;
            v96 = v94 + 8;
            while (*(llvm::Instruction **)v96 != a2 || *(_QWORD *)(v96 + 8) != v23)
            {
              v95 = v96;
              v96 = *(_QWORD *)(v96 + 16);
              if (!v96)
                goto LABEL_159;
            }
            v97 = *(_QWORD *)(v96 + 16);
            if (v95)
            {
              *(_QWORD *)(v95 + 16) = v97;
            }
            else if (v97)
            {
              *(_OWORD *)v96 = *(_OWORD *)v97;
              *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
            }
            else
            {
              *(_QWORD *)v96 = 0;
              *(_QWORD *)(v96 + 8) = 0;
            }
LABEL_159:
            v98 = (llvm::MemoryDependenceResults *)*((_QWORD *)this + 2);
            if (v98)
              llvm::MemoryDependenceResults::removeInstruction(v98, a2);
            v99 = (int32x2_t **)*((_QWORD *)this + 15);
            if (v99)
            {
              v100 = (*v99)[5].i32[0];
              if (v100)
              {
                v101 = (*v99)[3];
                v102 = v100 - 1;
                v103 = (v100 - 1) & (v130 ^ (a2 >> 9));
                v104 = *(llvm::Instruction **)(*(_QWORD *)&v101 + 16 * v103);
                if (v104 == a2)
                {
LABEL_167:
                  v107 = *(llvm::MemoryAccess **)(*(_QWORD *)&v101 + 16 * v103 + 8);
                  if (v107)
                    llvm::MemorySSAUpdater::removeMemoryAccess(v99, v107, 0);
                }
                else
                {
                  v105 = 1;
                  while (v104 != (llvm::Instruction *)-4096)
                  {
                    v106 = v103 + v105++;
                    v103 = v106 & v102;
                    v104 = *(llvm::Instruction **)(*(_QWORD *)&v101 + 16 * v103);
                    if (v104 == a2)
                      goto LABEL_167;
                  }
                }
              }
            }
            llvm::InstructionPrecedenceTracking::removeInstruction(*((int32x2_t **)this + 13), a2);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
            v108 = *((_QWORD *)a2 + 3);
            v109 = (_QWORD *)*((_QWORD *)a2 + 4);
            *v109 = v108;
            *(_QWORD *)(v108 + 8) = v109;
            *((_QWORD *)a2 + 3) = 0;
            *((_QWORD *)a2 + 4) = 0;
            llvm::Value::deleteValue(a2);
            v3 = 1;
            goto LABEL_102;
          }
          v59 = **v58;
          v60 = *(_QWORD *)(v59 + 152);
          v61 = *(unsigned int *)(v59 + 168);
          if ((_DWORD)v61)
          {
            LODWORD(v62) = (v61 - 1) & (v130 ^ (a2 >> 9));
            v63 = v60 + 16 * v62;
            v64 = *(llvm::Instruction **)v63;
            if (*(llvm::Instruction **)v63 == a2)
            {
LABEL_127:
              v67 = *(_QWORD **)(v63 + 8);
              v70 = *v67;
              v68 = (char *)(v67 + 2);
              v69 = v70;
              goto LABEL_128;
            }
            v65 = 1;
            while (v64 != (llvm::Instruction *)-4096)
            {
              v66 = v62 + v65++;
              v62 = v66 & (v61 - 1);
              v64 = *(llvm::Instruction **)(v60 + 16 * v62);
              if (v64 == a2)
              {
                v63 = v60 + 16 * v62;
                goto LABEL_127;
              }
            }
          }
          v63 = v60 + 16 * v61;
          goto LABEL_127;
        }
        v17 = 1;
        while (v16 != (llvm::Instruction *)-4096)
        {
          v18 = v14 + v17++;
          v14 = v18 & (v13 - 1);
          v16 = *(llvm::Instruction **)(v12 + 16 * v14);
          if (v16 == a2)
          {
            v15 = v12 + 16 * v14;
            goto LABEL_50;
          }
        }
      }
      v15 = v12 + 16 * v13;
      goto LABEL_50;
    }
    return 0;
  }
  return v3;
}

void sub_1C5B0D064(uint64_t a1, _BYTE *a2, llvm::OptimizationRemarkEmitter *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  void **v16;
  void *v17[2];
  char v18;
  void *__p;
  char v20;
  void *v21[2];
  char v22;
  void *v23;
  char v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t (**v30)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v31;
  char v32;
  uint64_t v33;
  _QWORD v34[5];
  char v35;
  char v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[260];
  int v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = ****(_QWORD ****)a3;
  if (*(_QWORD *)(v6 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 48))(*(_QWORD *)(v6 + 72)))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v34, (const llvm::DebugLoc *)(a1 + 48));
    v8 = *(_QWORD *)(a1 + 40);
    v31 = 9;
    v32 = 2;
    v33 = v7;
    v34[2] = "gvn";
    v34[3] = "LoadElim";
    v34[4] = 8;
    v35 = 0;
    v36 = 0;
    v37 = v39;
    v38 = 0x400000000;
    v39[256] = 0;
    v40 = -1;
    v41 = v8;
    v30 = &off_1E814E500;
    v25 = "load of type ";
    v26 = 13;
    sub_1C53B17B4((uint64_t)&v37, (const void **)&v25);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v21, "Type", 4uLL, *(llvm::Type **)a1);
    v9 = sub_1C47E3888((uint64_t)&v30, (uint64_t)v21);
    v25 = " eliminated";
    v26 = 11;
    sub_1C53B17B4(v9 + 80, (const void **)&v25);
    *(_DWORD *)(v9 + 356) = *(_DWORD *)(v9 + 88);
    v25 = " in favor of ";
    v26 = 13;
    sub_1C53B17B4(v9 + 80, (const void **)&v25);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v17, "InfavorOfValue", 0xEuLL, a2);
    v10 = sub_1C47E3888(v9, (uint64_t)v17);
    sub_1C61998EC((uint64_t)&v25, v10);
    v25 = (const char *)&off_1E814E500;
    if (v20 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17[0]);
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21[0]);
    v30 = &off_1E814E790;
    v11 = (char *)v37;
    if ((_DWORD)v38)
    {
      v12 = (unint64_t)v38 << 6;
      do
      {
        v13 = (void **)&v11[v12];
        if (v11[v12 - 17] < 0)
          operator delete(*(v13 - 5));
        if (*((char *)v13 - 41) < 0)
          operator delete(*(v13 - 8));
        v12 -= 64;
      }
      while (v12);
      v11 = (char *)v37;
    }
    if (v11 != v39)
      free(v11);
    llvm::OptimizationRemarkEmitter::emit(a3, (llvm::DiagnosticInfoOptimizationBase *)&v25);
    v25 = (const char *)&off_1E814E790;
    v14 = (char *)v27;
    if (v28)
    {
      v15 = (unint64_t)v28 << 6;
      do
      {
        v16 = (void **)&v14[v15];
        if (v14[v15 - 17] < 0)
          operator delete(*(v16 - 5));
        if (*((char *)v16 - 41) < 0)
          operator delete(*(v16 - 8));
        v15 -= 64;
      }
      while (v15);
      v14 = (char *)v27;
    }
    if (v14 != (char *)&v29)
      free(v14);
  }
}

uint64_t llvm::GVNPass::processAssumeIntrinsic(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  unsigned __int8 *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  llvm::APInt *v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  llvm::Type *v28;
  llvm::Value *v29;
  llvm::Constant *v30;
  llvm::Type *v31;
  llvm::Value **NullValue;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  llvm::BasicBlock *v52;
  char *MemoryAccessBefore;
  uint64_t v55;
  const llvm::APInt *v56;
  uint64_t *v57;
  uint64_t v58;
  llvm::ValueHandleBase *v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  llvm::ConstantInt *v73;
  unsigned int v74;
  char v75;
  llvm::ConstantInt *v76;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t *v80;
  uint64_t v81;

  v4 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v79 = v4;
  v5 = v4[16];
  if (v4)
    v6 = v5 == 16;
  else
    v6 = 0;
  if (v6)
  {
    v23 = (llvm::APInt *)(v4 + 24);
    v24 = *((_DWORD *)v4 + 8);
    if (v24 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v23) != v24)
        goto LABEL_52;
    }
    else if (*(_QWORD *)v23)
    {
      goto LABEL_52;
    }
    v25 = ***(_QWORD ***)v4;
    v26 = (char *)operator new(0x80uLL);
    *((_DWORD *)v26 + 21) = *((_DWORD *)v26 + 21) & 0x38000000 | 2;
    v27 = (uint64_t)(v26 + 64);
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = 0;
    *((_QWORD *)v26 + 3) = v26 + 64;
    *((_QWORD *)v26 + 4) = 0;
    *((_QWORD *)v26 + 5) = 0;
    *((_QWORD *)v26 + 6) = 0;
    *((_QWORD *)v26 + 7) = v26 + 64;
    v29 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)(v25 + 1912), v28);
    v30 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(v25 + 1912), 0);
    NullValue = llvm::Constant::getNullValue(v30, v31);
    llvm::StoreInst::StoreInst((llvm::StoreInst *)(v26 + 64), v29, (llvm::Value *)NullValue, 0, (llvm::Instruction *)a2);
    v33 = *(uint64_t ***)(a1 + 120);
    if (v33)
    {
      v34 = *v33;
      v35 = (*v33)[6];
      v36 = *((unsigned int *)*v33 + 16);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD *)(a2 + 40);
        LODWORD(v38) = ((v37 >> 4) ^ (v37 >> 9)) & (v36 - 1);
        v39 = (uint64_t *)(v35 + 16 * v38);
        v40 = *v39;
        if (v37 == *v39)
          goto LABEL_32;
        v41 = 1;
        while (v40 != -4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v36 - 1);
          v40 = *(_QWORD *)(v35 + 16 * v38);
          if (v37 == v40)
          {
            v39 = (uint64_t *)(v35 + 16 * v38);
            goto LABEL_32;
          }
        }
      }
      v39 = (uint64_t *)(v35 + 16 * v36);
LABEL_32:
      if (v39 != (uint64_t *)(v35 + 16 * v36))
      {
        v43 = v39[1];
        if (v43)
        {
          for (i = *(_QWORD *)(v43 + 8); i != v43; i = *(_QWORD *)(i + 8))
          {
            if (i)
              v45 = i - 32;
            else
              v45 = 0;
            if (i && *(unsigned __int8 *)(v45 + 16) - 27 >= 0xFFFFFFFE)
            {
              v46 = *(_QWORD *)(v45 + 72);
              v47 = *(_QWORD *)(v46 + 40);
              v48 = *(__int16 *)(v47 + 18);
              if ((v48 & 0x80000000) == 0)
              {
                v49 = *(_QWORD *)(v47 + 48);
                if (v49 != v47 + 40)
                {
                  v50 = 0;
                  do
                  {
                    v51 = v49 - 24;
                    if (!v49)
                      v51 = 0;
                    *(_DWORD *)(v51 + 56) = v50++;
                    v49 = *(_QWORD *)(v49 + 8);
                  }
                  while (v49 != v47 + 40);
                }
                *(_WORD *)(v47 + 18) = v48 | 0x8000;
              }
              if (*(_DWORD *)(v46 + 56) >= *((_DWORD *)v26 + 30))
              {
                MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore(v33, v27, v34[12], i - 32);
                goto LABEL_51;
              }
            }
          }
        }
      }
      v52 = (llvm::BasicBlock *)*((_QWORD *)v26 + 13);
      MemoryAccessBefore = llvm::MemorySSA::createDefinedAccess(v34, v27, v34[12], 0);
      llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*v33, (uint64_t)MemoryAccessBefore, v52, 2);
LABEL_51:
      llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 120), (llvm::MemoryDef *)MemoryAccessBefore, 0);
    }
LABEL_52:
    if (llvm::isAssumeWithEmptyBundle(a2))
      sub_1C5B0B008((int32x2_t *)a1, (llvm::Value *)a2);
    goto LABEL_54;
  }
  if (v5 < 0x15)
  {
LABEL_54:
    LOBYTE(v18) = 0;
    return v18 & 1;
  }
  v7 = **(uint64_t ***)v4;
  v8 = *v7;
  v9 = *(llvm::Value **)(*v7 + 1560);
  if (!v9)
  {
    v73 = *(llvm::ConstantInt **)(v8 + 1888);
    v74 = *(_DWORD *)(v8 + 1896);
    LODWORD(v81) = v74 >> 8;
    if (v74 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v80, 1, 0);
    }
    else
    {
      if (v74 <= 0xFF)
        v75 = 0;
      else
        v75 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v74);
      v80 = (uint64_t *)(v75 & 1);
    }
    v9 = llvm::ConstantInt::get(v73, (llvm::LLVMContext *)&v80, a3);
    if (v81 >= 0x41 && v80)
      MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
    *(_QWORD *)(v8 + 1560) = v9;
  }
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(v10 + 40);
  if (v11 == v10 + 40)
    goto LABEL_91;
  if (v11)
    v12 = v11 - 24;
  else
    v12 = 0;
  v13 = *(unsigned __int8 *)(v12 + 16);
  v14 = v13 - 29;
  if (v13 != 30)
  {
    v15 = 2;
    LOBYTE(v18) = 0;
    switch(v14)
    {
      case 0:
      case 5:
      case 6:
        goto LABEL_57;
      case 1:
        __break(1u);
        goto LABEL_111;
      case 2:
        v15 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
      case 9:
LABEL_111:
        v15 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
        break;
      case 4:
        goto LABEL_15;
      case 7:
        v15 = *(_WORD *)(v12 + 18) & 1;
        break;
      case 8:
        v15 = 1;
        goto LABEL_15;
      case 10:
        v15 = *(_DWORD *)(v12 + 80) + 1;
        break;
      default:
        goto LABEL_91;
    }
    if (v15)
      goto LABEL_15;
LABEL_91:
    LOBYTE(v18) = 0;
    goto LABEL_57;
  }
  if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3)
    v15 = 2;
  else
    v15 = 1;
LABEL_15:
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = v12 - 64;
  v20 = v15;
  do
  {
    v21 = *(unsigned __int8 *)(v12 + 16);
    if (v21 != 30)
      __asm { BR              X9 }
    v22 = *(_QWORD *)(v12 - 32 - 32 * v17);
    v80 = *(uint64_t **)(a2 + 40);
    v81 = v22;
    v18 |= llvm::GVNPass::propagateEquality((llvm::GVNPass *)a1, (llvm::Value *)v4, v9, (llvm::BasicBlock **)&v80, 0);
    ++v17;
    v16 += 2;
    v19 += 32;
  }
  while (v20 != v17);
LABEL_57:
  v55 = a1 + 432;
  *(_QWORD *)sub_1C5B0E110(a1 + 432, (uint64_t *)&v79) = v9;
  v78 = 0;
  v80 = &v78;
  if ((sub_1C4D9EC28(&v80, 30, (uint64_t)v4) & 1) != 0)
  {
    v57 = **(uint64_t ***)v4;
    v58 = *v57;
    v59 = *(llvm::ValueHandleBase **)(*v57 + 1568);
    if (!v59)
    {
      v76 = *(llvm::ConstantInt **)(v58 + 1888);
      LODWORD(v81) = *(_DWORD *)(v58 + 1896) >> 8;
      if (v81 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v80, 0, 0);
      else
        v80 = 0;
      v59 = llvm::ConstantInt::get(v76, (llvm::LLVMContext *)&v80, v56);
      if (v81 >= 0x41 && v80)
        MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
      *(_QWORD *)(v58 + 1568) = v59;
    }
    *(_QWORD *)sub_1C5B0E110(v55, &v78) = v59;
  }
  v60 = v4[16];
  if (v60 < 0x1C || v60 - 83 < 0xFFFFFFFE || !sub_1C5B0E1E4((uint64_t)v4))
    return v18 & 1;
  v61 = (uint64_t *)*((_QWORD *)v4 - 8);
  v80 = v61;
  v62 = *((_QWORD *)v4 - 4);
  v63 = *((unsigned __int8 *)v61 + 16);
  if (v63 > 0x14)
  {
    v64 = v61;
    v61 = (uint64_t *)*((_QWORD *)v4 - 4);
  }
  else
  {
    v63 = *(unsigned __int8 *)(v62 + 16);
    if (v63 < 0x15)
    {
      v64 = v61;
      v61 = (uint64_t *)*((_QWORD *)v4 - 4);
      goto LABEL_81;
    }
    v80 = (uint64_t *)*((_QWORD *)v4 - 4);
    v64 = (uint64_t *)v62;
  }
  if (v63 > 0x1B)
  {
    v65 = v64;
    v64 = v61;
    goto LABEL_72;
  }
  v66 = *((unsigned __int8 *)v61 + 16);
  if (v66 >= 0x1C)
  {
    v80 = v61;
    v65 = v61;
    v61 = v64;
LABEL_72:
    v67 = *((unsigned __int8 *)v64 + 16);
    v64 = v65;
    if (v67 < 0x1C)
      goto LABEL_81;
    goto LABEL_76;
  }
  if (v63 != 21 || v66 != 21)
    goto LABEL_81;
LABEL_76:
  v68 = llvm::GVNPass::ValueTable::lookupOrAdd((llvm::GVNPass::ValueTable *)(a1 + 128), (llvm::Value *)v64);
  v69 = llvm::GVNPass::ValueTable::lookupOrAdd((llvm::GVNPass::ValueTable *)(a1 + 128), (llvm::Value *)v61);
  v70 = v80;
  if (v68 >= v69)
    v64 = v80;
  else
    v64 = v61;
  v80 = v64;
  if (v68 < v69)
    v61 = v70;
LABEL_81:
  if (*((unsigned __int8 *)v64 + 16) > 0x14u || *((unsigned __int8 *)v61 + 16) >= 0x15u)
  {
    v71 = v64[1];
    if (v71)
    {
      while (1)
      {
        v72 = *(_QWORD *)(v71 + 24);
        if (*(unsigned __int8 *)(v72 + 16) >= 0x1Cu && *(_QWORD *)(v72 + 40) == *(_QWORD *)(a2 + 40))
          break;
        v71 = *(_QWORD *)(v71 + 8);
        if (!v71)
          return v18 & 1;
      }
      *(_QWORD *)sub_1C5B0E110(v55, (uint64_t *)&v80) = v61;
    }
  }
  return v18 & 1;
}

uint64_t llvm::GVNPass::propagateEquality(llvm::GVNPass *this, llvm::Value *a2, llvm::Value *a3, llvm::BasicBlock **a4, int a5)
{
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const llvm::BasicBlock *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::DominatorTree *v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::PhiValues **v26;
  unsigned int v27;
  llvm::APInt *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  llvm::Value **v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t Leader;
  const llvm::BasicBlock *v52;
  llvm::Value *v53;
  llvm::DominatorTree *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::PhiValues **v61;
  int v63;
  uint64_t SinglePredecessor;
  llvm::GVNPass::ValueTable *v66;
  _QWORD *v68[2];
  _QWORD *v69[2];
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[10];

  v74[8] = *MEMORY[0x1E0C80C00];
  v72 = v74;
  v74[0] = a2;
  v74[1] = a3;
  v73 = 0x400000001;
  v6 = 0;
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(a4[1]);
  v66 = (llvm::GVNPass *)((char *)this + 128);
  v7 = 1;
  do
  {
    v8 = (char *)v72 + 16 * v7;
    v10 = *((_QWORD *)v8 - 2);
    v9 = *((_QWORD *)v8 - 1);
    LODWORD(v73) = --v7;
    if (v10 == v9)
      continue;
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v11 > 0x14)
    {
      if (v11 != 21 || *(unsigned __int8 *)(v9 + 16) < 0x15u)
      {
        v12 = v10;
        v10 = v9;
        v9 = v12;
      }
LABEL_9:
      v14 = llvm::GVNPass::ValueTable::lookupOrAdd(v66, (llvm::Value *)v9);
      v15 = *(unsigned __int8 *)(v9 + 16);
      if (v15 == 21)
      {
        if (*(_BYTE *)(v10 + 16) != 21)
          goto LABEL_20;
      }
      else if (v15 < 0x1C || *(unsigned __int8 *)(v10 + 16) < 0x1Cu)
      {
        goto LABEL_20;
      }
      v16 = llvm::GVNPass::ValueTable::lookupOrAdd(v66, (llvm::Value *)v10);
      if (v14 < v16)
        v17 = v9;
      else
        v17 = v10;
      if (v14 < v16)
      {
        v9 = v10;
        v14 = v16;
      }
      v10 = v17;
LABEL_20:
      if (SinglePredecessor && *(unsigned __int8 *)(v10 + 16) <= 0x1Bu)
        sub_1C5B0EF1C((uint64_t)this, v14, v10, (uint64_t)a4[1]);
      v18 = *(_QWORD *)(v9 + 8);
      if (v18)
      {
        if (!*(_QWORD *)(v18 + 8))
          goto LABEL_44;
        v19 = (llvm::DominatorTree *)*((_QWORD *)this + 3);
        if (a5)
        {
          v20 = 0;
          v21 = (uint64_t *)(v10 + 8);
          do
          {
            v22 = (uint64_t *)(v18 + 8);
            v23 = *(_QWORD *)(v18 + 8);
            if (llvm::DominatorTree::dominates(v19, (const llvm::BasicBlockEdge *)a4, (const llvm::Use *)v18))
            {
              if (*(_QWORD *)v18)
              {
                **(_QWORD **)(v18 + 16) = *(_QWORD *)(v18 + 8);
                v24 = *(_QWORD *)(v18 + 8);
                if (v24)
                  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v18 + 16);
              }
              *(_QWORD *)v18 = v10;
              if (v10)
              {
                v25 = *v21;
                *v22 = *v21;
                if (v25)
                  *(_QWORD *)(v25 + 16) = v22;
                *(_QWORD *)(v18 + 16) = v21;
                *v21 = v18;
              }
              ++v20;
            }
            v18 = v23;
          }
          while (v23);
          goto LABEL_42;
        }
      }
      else
      {
        if ((a5 & 1) != 0)
        {
          v20 = 0;
          goto LABEL_42;
        }
        v19 = (llvm::DominatorTree *)*((_QWORD *)this + 3);
      }
      v20 = llvm::replaceDominatedUsesWith((llvm *)v9, (llvm::Value *)v10, v19, *a4, v13);
LABEL_42:
      v6 |= v20 != 0;
      v26 = (llvm::PhiValues **)*((_QWORD *)this + 2);
      if (v26)
        llvm::MemoryDependenceResults::invalidateCachedPointerInfo(v26, (llvm::Value *)v9);
LABEL_44:
      if (*(_DWORD *)(*(_QWORD *)v10 + 8) != 269 || *(_BYTE *)(v10 + 16) != 16)
        goto LABEL_107;
      v27 = *(_DWORD *)(v10 + 32);
      if (v27)
      {
        v28 = (llvm::APInt *)(v10 + 24);
        if (v27 > 0x40)
        {
          v30 = llvm::APInt::countTrailingOnesSlowCase(v28);
          v70 = 0;
          v71 = 0;
          if (v30 != v27)
          {
LABEL_54:
            v68[0] = &v71;
            v68[1] = &v70;
            if (sub_1C4849098(v68, v9))
            {
LABEL_55:
              v33 = v71;
              v34 = v73;
              if (v73 >= (unint64_t)HIDWORD(v73))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v73 + 1, 16);
                v34 = v73;
              }
              v35 = (char *)v72 + 16 * v34;
              *v35 = v33;
              v35[1] = v10;
              v36 = (v73 + 1);
              LODWORD(v73) = v36;
              v37 = v70;
              if (v36 >= HIDWORD(v73))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v36 + 1, 16);
                LODWORD(v36) = v73;
              }
              v38 = (char *)v72 + 16 * v36;
              *v38 = v37;
              v38[1] = v10;
              LODWORD(v73) = v73 + 1;
              goto LABEL_107;
            }
            v32 = 0;
            v31 = 1;
LABEL_61:
            v39 = *(unsigned __int8 *)(v9 + 16);
            if (v39 < 0x1C || v39 - 83 < 0xFFFFFFFE)
              goto LABEL_107;
            v40 = *(_QWORD *)(v9 - 64);
            v41 = *(_QWORD *)(v9 - 32);
            if (v32)
            {
              if ((sub_1C5B0E1E4(v9) & 1) == 0)
              {
LABEL_84:
                v47 = dword_1C8668DB4[*(_WORD *)(v9 + 18) & 0x3F];
                v48 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, v31, 0);
                v49 = *((_DWORD *)this + 76);
                v50 = llvm::GVNPass::ValueTable::lookupOrAddCmp(v66, *(unsigned __int8 *)(v9 + 16) - 28, v47, (llvm::Value *)v40, (llvm::Value *)v41);
                if (v50 < v49)
                {
                  Leader = llvm::GVNPass::findLeader(this, a4[1], v50);
                  if (Leader)
                  {
                    v53 = (llvm::Value *)Leader;
                    if (*(unsigned __int8 *)(Leader + 16) >= 0x1Cu)
                    {
                      v54 = (llvm::DominatorTree *)*((_QWORD *)this + 3);
                      if (a5)
                      {
                        v55 = *(_QWORD *)(Leader + 8);
                        if (v55)
                        {
                          v63 = 0;
                          v56 = (uint64_t *)(v48 + 1);
                          do
                          {
                            v57 = (uint64_t *)(v55 + 8);
                            v58 = *(_QWORD *)(v55 + 8);
                            if (llvm::DominatorTree::dominates(v54, (const llvm::BasicBlockEdge *)a4, (const llvm::Use *)v55))
                            {
                              if (*(_QWORD *)v55)
                              {
                                **(_QWORD **)(v55 + 16) = *(_QWORD *)(v55 + 8);
                                v59 = *(_QWORD *)(v55 + 8);
                                if (v59)
                                  *(_QWORD *)(v59 + 16) = *(_QWORD *)(v55 + 16);
                              }
                              *(_QWORD *)v55 = v48;
                              if (v48)
                              {
                                v60 = *v56;
                                *v57 = *v56;
                                if (v60)
                                  *(_QWORD *)(v60 + 16) = v57;
                                *(_QWORD *)(v55 + 16) = v56;
                                *v56 = v55;
                              }
                              ++v63;
                            }
                            v55 = v58;
                          }
                          while (v58);
                        }
                        else
                        {
                          v63 = 0;
                        }
                      }
                      else
                      {
                        v63 = llvm::replaceDominatedUsesWith((llvm *)Leader, (llvm::Value *)v48, v54, *a4, v52);
                      }
                      v6 |= v63 != 0;
                      v61 = (llvm::PhiValues **)*((_QWORD *)this + 2);
                      if (v61)
                        llvm::MemoryDependenceResults::invalidateCachedPointerInfo(v61, v53);
                    }
                  }
                }
                if (SinglePredecessor)
                  sub_1C5B0EF1C((uint64_t)this, v50, (uint64_t)v48, (uint64_t)a4[1]);
                goto LABEL_107;
              }
            }
            else
            {
              v42 = *(_WORD *)(v9 + 18) & 0x3F;
              if (v42 != 33)
              {
                if (v42 == 6)
                {
                  if ((*(_BYTE *)(v9 + 17) & 4) == 0)
                    goto LABEL_84;
                }
                else if (v42 != 14)
                {
                  goto LABEL_84;
                }
                if (*(_BYTE *)(v40 + 16) != 17
                  || (*(_UNKNOWN **)(v40 + 32) == &unk_1C866F1C0 ? (v43 = *(_QWORD *)(v40 + 40)) : (v43 = v40 + 24),
                      (*(_BYTE *)(v43 + 28) & 7) == 3))
                {
                  if (*(_BYTE *)(v41 + 16) != 17)
                    goto LABEL_84;
                  v44 = *(_UNKNOWN **)(v41 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v41 + 40) : v41 + 24;
                  if ((*(_BYTE *)(v44 + 28) & 7) == 3)
                    goto LABEL_84;
                }
              }
            }
            v45 = v73;
            if (v73 >= (unint64_t)HIDWORD(v73))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v73 + 1, 16);
              v45 = v73;
            }
            v46 = (char *)v72 + 16 * v45;
            *v46 = v40;
            v46[1] = v41;
            LODWORD(v73) = v73 + 1;
            goto LABEL_84;
          }
        }
        else
        {
          v29 = *(_QWORD *)v28;
          v70 = 0;
          v71 = 0;
          if (v29 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v27)
            goto LABEL_54;
        }
      }
      else
      {
        v70 = 0;
        v71 = 0;
      }
      v69[0] = &v71;
      v69[1] = &v70;
      if ((sub_1C4848F80(v69, v9) & 1) != 0)
        goto LABEL_55;
      v31 = 0;
      v32 = 1;
      goto LABEL_61;
    }
    if (*(unsigned __int8 *)(v9 + 16) >= 0x15u)
      goto LABEL_9;
LABEL_107:
    v7 = v73;
  }
  while (v7);
  if (v72 != v74)
    free(v72);
  return v6 & 1;
}

uint64_t sub_1C5B0E110(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v10;
  int v11;
  _QWORD *v12;

  v10 = *a2;
  v11 = 0;
  v12 = 0;
  if ((sub_1C5B11E50(a1, &v10, &v12) & 1) != 0)
  {
    v8 = *((_DWORD *)v12 + 2);
  }
  else
  {
    v4 = sub_1C5B11EF8((_DWORD *)a1, (uint64_t)&v10, &v10, v12);
    *v4 = v10;
    *((_DWORD *)v4 + 2) = v11;
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6);
    *v7 = v5;
    v7[1] = 0;
    v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v8 + 1;
    *((_DWORD *)v4 + 2) = v8;
  }
  return *(_QWORD *)(a1 + 72) + 16 * v8 + 8;
}

uint64_t sub_1C5B0E1E4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v1 != 1)
  {
    if (v1 == 32)
      return 1;
    if (v1 != 9 || (*(_BYTE *)(a1 + 17) & 4) == 0)
      return 0;
  }
  v2 = *(_QWORD *)(a1 - 64);
  v3 = *(_QWORD *)(a1 - 32);
  if (*(_BYTE *)(v2 + 16) != 17
    || (*(_UNKNOWN **)(v2 + 32) == &unk_1C866F1C0 ? (v4 = *(_QWORD *)(v2 + 40)) : (v4 = v2 + 24),
        (*(_BYTE *)(v4 + 28) & 7) == 3))
  {
    if (*(_BYTE *)(v3 + 16) != 17)
      return 0;
    v5 = *(_UNKNOWN **)(v3 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v3 + 40) : v3 + 24;
    if ((*(_BYTE *)(v5 + 28) & 7) == 3)
      return 0;
  }
  return 1;
}

uint64_t llvm::GVNPass::processLoad(llvm::GVNPass *this, llvm::LoadInst *a2)
{
  llvm::MemoryDependenceResults *v3;
  uint64_t Dependency;
  llvm::Instruction *v7;
  uint64_t v8;
  const llvm::DataLayout *v9;
  uint64_t v10;
  llvm::Instruction *v11;
  llvm::Value *v12;
  int32x2_t **v13;
  llvm::PhiValues **v14;
  int v15;
  __int128 v16;

  v3 = (llvm::MemoryDependenceResults *)*((_QWORD *)this + 2);
  if (v3 && (*((_WORD *)a2 + 9) & 0x301) == 0)
  {
    if (!*((_QWORD *)a2 + 1))
    {
      sub_1C5B0B008((int32x2_t *)this, a2);
      return 1;
    }
    Dependency = llvm::MemoryDependenceResults::getDependency(v3, a2);
    if ((Dependency & 0xE000000000000007) == 0x2000000000000003)
      return llvm::GVNPass::processNonLocalLoad(this, a2);
    v7 = (llvm::Instruction *)*((_QWORD *)a2 - 4);
    if ((unint64_t)(Dependency & 7) - 1 < 2 || *((_BYTE *)v7 + 16) == 85)
    {
      HIDWORD(v16) = 0;
      llvm::GVNPass::AnalyzeLoadAvailability((uint64_t)this, (uint64_t *)a2, Dependency, v7, &v16);
      v8 = v10;
      if ((_DWORD)v10)
      {
        v11 = sub_1C5B0925C((uint64_t)&v16, *(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40), a2, (uint64_t)this, v9);
        llvm::patchReplacementInstruction(a2, v11, v12);
        llvm::Value::doRAUW(a2, v11, (llvm::Value *)1);
        sub_1C5B0B008((int32x2_t *)this, a2);
        v13 = (int32x2_t **)*((_QWORD *)this + 15);
        if (v13)
          sub_1C5B0E434(v13, (uint64_t)a2);
        sub_1C5B0D064((uint64_t)a2, v11, *((llvm::OptimizationRemarkEmitter **)this + 12));
        v14 = (llvm::PhiValues **)*((_QWORD *)this + 2);
        if (v14)
        {
          if ((*(_DWORD *)(*(_QWORD *)v11 + 8) & 0xFE) == 0x12)
            v15 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v11 + 16) + 8);
          else
            v15 = *(_DWORD *)(*(_QWORD *)v11 + 8);
          if (v15 == 15)
            llvm::MemoryDependenceResults::invalidateCachedPointerInfo(v14, v11);
        }
      }
      return v8;
    }
  }
  return 0;
}

void sub_1C5B0E434(int32x2_t **a1, uint64_t a2)
{
  __int32 v2;
  int32x2_t v3;
  __int32 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  llvm::MemoryAccess *v9;

  v2 = (*a1)[5].i32[0];
  if (v2)
  {
    v3 = (*a1)[3];
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      v9 = *(llvm::MemoryAccess **)(*(_QWORD *)&v3 + 16 * v5 + 8);
      if (v9)
        llvm::MemorySSAUpdater::removeMemoryAccess(a1, v9, 0);
    }
    else
    {
      v7 = 1;
      while (v6 != -4096)
      {
        v8 = v5 + v7++;
        v5 = v8 & v4;
        v6 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v5);
        if (v6 == a2)
          goto LABEL_6;
      }
    }
  }
}

BOOL llvm::GVNPass::ValueTable::areAllValsInBB(llvm::GVNPass::ValueTable *this, int a2, const llvm::BasicBlock *a3, llvm::GVNPass *a4)
{
  uint64_t v5;
  const llvm::BasicBlock *v6;
  int v8;

  v8 = a2;
  v5 = sub_1C5B113A4((uint64_t)a4 + 312, &v8) + 8;
  do
  {
    v6 = *(const llvm::BasicBlock **)(v5 + 8);
    if (v6 != a3)
      break;
    v5 = *(_QWORD *)(v5 + 16);
  }
  while (v5);
  return v6 == a3;
}

uint64_t llvm::GVNPass::ValueTable::phiTranslate(llvm::GVNPass::ValueTable *this, const llvm::BasicBlock *a2, const llvm::BasicBlock *a3, uint64_t a4, llvm::GVNPass *a5)
{
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v11 = (char *)this + 128;
  v10 = *((_QWORD *)this + 16);
  v18 = 0;
  if (sub_1C5B128E8(v10, *((_DWORD *)v11 + 4), a4, (uint64_t)a2, &v18))
    v12 = v18 == *(_QWORD *)v11 + 24 * *((unsigned int *)v11 + 4);
  else
    v12 = 1;
  if (!v12)
    return *(unsigned int *)(v18 + 16);
  v13 = llvm::GVNPass::ValueTable::phiTranslateImpl(this, a2, a3, a4, a5);
  v18 = 0;
  if ((sub_1C5B128E8(*((_QWORD *)this + 16), *((_DWORD *)this + 36), a4, (uint64_t)a2, &v18) & 1) != 0)
    return v13;
  v15 = *((_DWORD *)this + 34);
  v16 = *((_DWORD *)this + 36);
  if (4 * v15 + 4 >= 3 * v16)
  {
    v16 *= 2;
  }
  else if (v16 + ~v15 - *((_DWORD *)this + 35) > v16 >> 3)
  {
    goto LABEL_10;
  }
  sub_1C5B129D4((uint64_t)v11, v16);
  v18 = 0;
  sub_1C5B128E8(*((_QWORD *)this + 16), *((_DWORD *)this + 36), a4, (uint64_t)a2, &v18);
LABEL_10:
  v17 = v18;
  ++*((_DWORD *)this + 34);
  if (*(_DWORD *)v17 != -1 || *(_QWORD *)(v17 + 8) != -4096)
    --*((_DWORD *)this + 35);
  *(_DWORD *)v17 = a4;
  *(_QWORD *)(v17 + 8) = a2;
  *(_DWORD *)(v17 + 16) = v13;
  return v13;
}

uint64_t llvm::GVNPass::ValueTable::phiTranslateImpl(llvm::GVNPass::ValueTable *this, const llvm::BasicBlock *a2, const llvm::BasicBlock *a3, uint64_t a4, llvm::GVNPass *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const llvm::BasicBlock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  int v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  unsigned int v43;
  const llvm::BasicBlock *v44;
  int v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[4];

  v49[3] = *MEMORY[0x1E0C80C00];
  v45 = a4;
  v10 = *(_QWORD *)(sub_1C514D9B4((uint64_t)this + 104, &v45) + 8);
  if (!v10)
  {
    LODWORD(v46) = a4;
    v25 = sub_1C5B113A4((uint64_t)a5 + 312, &v46) + 8;
    do
    {
      if (*(const llvm::BasicBlock **)(v25 + 8) != a3)
        return a4;
      v25 = *(_QWORD *)(v25 + 16);
    }
    while (v25);
    v26 = *((_QWORD *)this + 10);
    if (a4 >= (unint64_t)((*((_QWORD *)this + 11) - v26) >> 2))
      return a4;
    v27 = *(_DWORD *)(v26 + 4 * a4);
    if (!v27)
      return a4;
    v28 = *((_QWORD *)this + 7) + 48 * v27;
    v46 = *(_OWORD *)v28;
    v47 = v49;
    v48 = 0x400000000;
    v29 = *(unsigned int *)(v28 + 24);
    v30 = v28 + 16;
    if ((_DWORD)v29)
      v31 = &v47 == (void **)v30;
    else
      v31 = 1;
    if (v31)
    {
LABEL_49:
      if (BYTE4(v46))
      {
        v39 = v47;
        v40 = *(_DWORD *)v47;
        v41 = *((_DWORD *)v47 + 1);
        if (*(_DWORD *)v47 > v41)
        {
          *(_DWORD *)v47 = v41;
          v39[1] = v40;
          if ((v46 >> 8) - 53 <= 1)
            __asm { BR              X12 }
        }
      }
      v24 = *(unsigned int *)(sub_1C5B12130((uint64_t)this + 24, (uint64_t)&v46) + 48);
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 != (_DWORD)a4 && (_DWORD)v46 == 56)
        {
          if (llvm::GVNPass::ValueTable::areCallValsEqual(this, a4, v43, v44, a3, a5))
            v24 = v24;
          else
            v24 = a4;
        }
      }
      else
      {
        v24 = a4;
      }
      if (v47 != v49)
        free(v47);
      return v24;
    }
    if (v29 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v29, 4);
      v33 = *(unsigned int *)(v30 + 8);
      if (!(_DWORD)v33)
      {
LABEL_32:
        v34 = 0;
        LODWORD(v48) = v29;
        do
        {
          if (v34 < 2 || (_DWORD)v46 != 65)
          {
            v35 = v34 > 1 && (_DWORD)v46 == 63;
            v36 = v35;
            v37 = (_DWORD)v46 != 64 || v34 == 0;
            if (v37 && !v36)
            {
              v38 = llvm::GVNPass::ValueTable::phiTranslate(this, a2, a3, *((_DWORD *)v47 + v34), a5);
              *((_DWORD *)v47 + v34) = v38;
              v29 = v48;
            }
          }
          ++v34;
        }
        while (v34 < v29);
        goto LABEL_49;
      }
      v32 = v47;
    }
    else
    {
      v32 = v49;
      v33 = *(unsigned int *)(v28 + 24);
    }
    memcpy(v32, *(const void **)v30, 4 * v33);
    goto LABEL_32;
  }
  v11 = *(_DWORD *)(v10 + 20);
  v12 = v11 & 0x7FFFFFF;
  if ((v11 & 0x7FFFFFF) != 0)
  {
    v13 = 0;
    while (1)
    {
      if (*(const llvm::BasicBlock **)(v10 + 40) != a3)
        goto LABEL_18;
      if ((v11 & 0x40000000) != 0)
      {
        v15 = *(_QWORD *)(v10 - 8);
        v14 = *(const llvm::BasicBlock **)(v15 + 32 * *(unsigned int *)(v10 + 60) + 8 * v13);
      }
      else
      {
        v14 = *(const llvm::BasicBlock **)(v10 - 32 * v12 + 32 * *(unsigned int *)(v10 + 60) + 8 * v13);
        v15 = v10 - 32 * v12;
      }
      if (v14 != a2)
        goto LABEL_18;
      v16 = *(_QWORD *)this;
      v17 = *((unsigned int *)this + 4);
      if (!(_DWORD)v17)
        goto LABEL_15;
      v18 = *(_QWORD *)(v15 + 32 * v13);
      LODWORD(v19) = ((v18 >> 4) ^ (v18 >> 9)) & (v17 - 1);
      v20 = (uint64_t *)(v16 + 16 * v19);
      v21 = *v20;
      if (v18 != *v20)
        break;
LABEL_16:
      if (v20 != (uint64_t *)(v16 + 16 * v17))
      {
        v24 = *((unsigned int *)v20 + 2);
        if ((_DWORD)v24)
          return v24;
      }
LABEL_18:
      if (++v13 == v12)
        return a4;
    }
    v22 = 1;
    while (v21 != -4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v17 - 1);
      v21 = *(_QWORD *)(v16 + 16 * v19);
      if (v18 == v21)
      {
        v20 = (uint64_t *)(v16 + 16 * v19);
        goto LABEL_16;
      }
    }
LABEL_15:
    v20 = (uint64_t *)(v16 + 16 * v17);
    goto LABEL_16;
  }
  return a4;
}

uint64_t llvm::GVNPass::ValueTable::eraseTranslateCacheEntry(uint64_t this, int a2, const llvm::BasicBlock *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  BOOL v13;
  _DWORD *v15;

  v3 = *((_QWORD *)a3 + 1);
  if (v3)
  {
    v5 = this;
    while (1)
    {
      v6 = *(_QWORD *)(v3 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      v8 = v6 && v7 >= 0x1C;
      if (v8 && v7 - 29 < 0xB)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        return this;
    }
LABEL_13:
    v10 = *(_QWORD *)(v6 + 40);
    v15 = 0;
    this = sub_1C5B128E8(*(_QWORD *)(v5 + 128), *(_DWORD *)(v5 + 144), a2, v10, &v15);
    if ((_DWORD)this)
    {
      v11 = v15;
      *v15 = -2;
      *((_QWORD *)v11 + 1) = -8192;
      *(int32x2_t *)(v5 + 136) = vadd_s32(*(int32x2_t *)(v5 + 136), (int32x2_t)0x1FFFFFFFFLL);
    }
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        break;
      v6 = *(_QWORD *)(v3 + 24);
      v12 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v13 = v12 >= 0x1C;
      else
        v13 = 0;
      if (v13 && v12 - 29 < 0xB)
        goto LABEL_13;
    }
  }
  return this;
}

uint64_t llvm::GVNPass::findLeader(llvm::GVNPass *this, const llvm::BasicBlock *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  int v9;

  v9 = a3;
  v5 = (_QWORD *)sub_1C5B113A4((uint64_t)this + 312, &v9);
  v6 = v5[1];
  if (v6)
  {
    v7 = (uint64_t *)v5[3];
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 3), v5[2], (uint64_t)a2))
    {
      if (*(unsigned __int8 *)(v6 + 16) < 0x15u)
        return v6;
    }
    else
    {
      v6 = 0;
    }
    for (; v7; v7 = (uint64_t *)v7[2])
    {
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 3), v7[1], (uint64_t)a2))
      {
        if (*(unsigned __int8 *)(*v7 + 16) < 0x15u)
          return *v7;
        if (!v6)
          v6 = *v7;
      }
    }
  }
  return v6;
}

void llvm::GVNPass::assignBlockRPONumber(llvm::GVNPass *this, llvm::Function *a2)
{
  char *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  llvm::Function *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = (char *)this + 664;
  sub_1C5B0EC98((_DWORD *)this + 166);
  v9 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_1C5643D14(&v10, (uint64_t)&v9);
  v6 = v10;
  v5 = v11;
  if (v11 != v10)
  {
    v7 = 1;
    do
    {
      v8 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      v9 = (llvm::Function *)v8;
      *(_DWORD *)(sub_1C4F762F0((uint64_t)v4, (uint64_t *)&v9) + 8) = v7++;
    }
    while (v5 != v6);
    v5 = v10;
  }
  *((_BYTE *)this + 688) = 0;
  if (v5)
  {
    v11 = v5;
    operator delete(v5);
  }
}

_DWORD *sub_1C5B0EC98(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v6 = 1 << (33 - __clz(v2 - 1));
      if (v6 <= 64)
        v7 = 64;
      else
        v7 = v6;
LABEL_13:
      if (v7 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v8 = 16 * v3;
        v9 = *(_QWORD **)result;
        do
        {
          *v9 = -4096;
          v9 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
        if (v7)
        {
          v10 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
          v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          v1[4] = v11;
          result = operator new(16 * v11, (std::align_val_t)8uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v12 = v1[4];
          if ((_DWORD)v12)
          {
            v13 = 16 * v12;
            do
            {
              *(_QWORD *)result = -4096;
              result += 4;
              v13 -= 16;
            }
            while (v13);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v7 = 0;
      goto LABEL_13;
    }
  }
  if (v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t llvm::GVNPass::replaceOperandsForInBlockEquality(llvm::GVNPass *this, llvm::Instruction *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int *v9;
  unsigned int *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  unsigned int *v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;

  v2 = *((_DWORD *)a2 + 5);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (int *)((char *)this + 432);
    v10 = (unsigned int *)((char *)this + 512);
    v11 = (char *)this + 440;
    do
    {
      if ((v2 & 0x40000000) != 0)
        v12 = (char *)*((_QWORD *)a2 - 1);
      else
        v12 = (char *)a2 - 32 * v3;
      v13 = *(_QWORD *)&v12[v6];
      v24 = 0;
      v25 = v13;
      if (sub_1C5B11E50((uint64_t)v9, &v25, &v24))
      {
        v17 = v24;
        v14 = *v9;
      }
      else
      {
        v14 = *v9;
        if ((*v9 & 1) != 0)
        {
          v15 = v11;
          v16 = 4;
        }
        else
        {
          v15 = (char *)*((_QWORD *)this + 55);
          v16 = *((unsigned int *)this + 112);
        }
        v17 = &v15[16 * v16];
      }
      if ((v14 & 1) != 0)
      {
        v18 = v11;
        v19 = 4;
      }
      else
      {
        v18 = (char *)*((_QWORD *)this + 55);
        v19 = *((unsigned int *)this + 112);
      }
      v20 = &v18[16 * v19] == v17;
      v21 = (unsigned int *)(v17 + 8);
      if (v20)
        v21 = v10;
      v22 = *v21;
      if ((_DWORD)v22 != *v10)
      {
        sub_1C54E614C((uint64_t)a2, v7, *(_QWORD *)(*((_QWORD *)this + 63) + 16 * v22 + 8));
        v8 = 1;
      }
      ++v7;
      v2 = *((_DWORD *)a2 + 5);
      v3 = v2 & 0x7FFFFFF;
      v6 += 32;
    }
    while (v7 < v3);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

_QWORD *sub_1C5B0EF1C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  _QWORD *v8;
  int v9;

  v9 = a2;
  result = (_QWORD *)sub_1C5B113A4(a1 + 312, &v9);
  v8 = result;
  if (result[1])
  {
    result = (_QWORD *)sub_1C484358C(a1 + 336, 24, 3);
    *result = a3;
    result[1] = a4;
    result[2] = v8[3];
    v8[3] = result;
  }
  else
  {
    result[1] = a3;
    result[2] = a4;
  }
  return result;
}

uint64_t llvm::GVNPass::processInstruction(llvm::GVNPass *this, llvm::Instruction *a2)
{
  llvm::Type *v4;
  llvm::DSOLocalEquivalent **v5;
  llvm::Value *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  llvm::UndefValue *v18;
  llvm::PhiValues **v19;
  int v20;
  _BOOL4 v21;
  const llvm::APInt *v22;
  char v23;
  int v24;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  llvm::GVNPass *v29;
  unsigned int v30;
  llvm::Value **v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t ***v36;
  uint64_t ***v37;
  llvm::BasicBlock *v38;
  uint64_t *v39;
  uint64_t v40;
  llvm::Value *v41;
  const llvm::APInt *v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::Value *v46;
  llvm::BasicBlock *v47;
  uint64_t i;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  char *v53;
  int v54;
  llvm::BasicBlock *v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  llvm::BasicBlock *v64;
  int v65;
  char *v66;
  llvm::Instruction *Leader;
  llvm::Value *v68;
  llvm::Value *v69;
  llvm::PhiValues **v70;
  int v71;
  llvm::ConstantInt *v72;
  llvm::ConstantInt *v73;
  unsigned int v74;
  char v75;
  llvm::BasicBlock *v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  _QWORD v84[32];

  v84[31] = *MEMORY[0x1E0C80C00];
  if (sub_1C4D99D08((uint64_t)a2))
    goto LABEL_2;
  v7 = *((_QWORD *)this + 5);
  v76 = (llvm::BasicBlock *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272);
  v77 = vextq_s8(*(int8x16_t *)((char *)this + 24), *(int8x16_t *)((char *)this + 24), 8uLL);
  v78 = v7;
  v79 = 0;
  v80 = 257;
  v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 - 1);
    v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    v9 = v8 & 0x7FFFFFF;
    v10 = (uint64_t *)((char *)a2 - 32 * v9);
  }
  v82 = v84;
  v83 = 0x800000000;
  if (v9 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v9, 8);
    v11 = v83;
    v13 = v82;
    v12 = v83;
  }
  else
  {
    v11 = 0;
    if (!v9)
    {
      v17 = v84;
      goto LABEL_12;
    }
    v12 = 0;
    v13 = v84;
  }
  v14 = 32 * v9;
  v15 = &v13[v12];
  do
  {
    v16 = *v10;
    v10 += 4;
    *v15++ = v16;
    v14 -= 32;
  }
  while (v14);
  v17 = v82;
LABEL_12:
  LODWORD(v83) = v11 + v9;
  v18 = llvm::SimplifyInstructionWithOperands(a2, (uint64_t)v17, (v11 + v9), (uint64_t)&v76, v4, v5);
  if (v82 == v84)
  {
    if (!v18)
      goto LABEL_28;
  }
  else
  {
    free(v82);
    if (!v18)
      goto LABEL_28;
  }
  if (*((_QWORD *)a2 + 1))
  {
    llvm::InstructionPrecedenceTracking::removeUsersOf(*((int32x2_t **)this + 13), a2);
    llvm::Value::doRAUW(a2, v18, (llvm::Value *)1);
    if (*((_QWORD *)a2 + 1)
      || !llvm::wouldInstructionBeTriviallyDead((uint64_t)a2, *((uint64_t **)this + 4)))
    {
LABEL_20:
      v19 = (llvm::PhiValues **)*((_QWORD *)this + 2);
      if (v19)
      {
        if ((*(_DWORD *)(*(_QWORD *)v18 + 8) & 0xFE) == 0x12)
          v20 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v18 + 16) + 8);
        else
          v20 = *(_DWORD *)(*(_QWORD *)v18 + 8);
        if (v20 == 15)
          llvm::MemoryDependenceResults::invalidateCachedPointerInfo(v19, v18);
      }
      goto LABEL_35;
    }
LABEL_19:
    sub_1C5B0B008((int32x2_t *)this, a2);
    goto LABEL_20;
  }
  if ((llvm::wouldInstructionBeTriviallyDead((uint64_t)a2, *((uint64_t **)this + 4)) & 1) != 0)
    goto LABEL_19;
LABEL_28:
  v21 = sub_1C4D9F8B4((uint64_t)a2);
  if (a2 && v21)
  {
    v23 = llvm::GVNPass::processAssumeIntrinsic((uint64_t)this, (uint64_t)a2, v22);
LABEL_31:
    LOBYTE(v6) = v23;
    return v6 & 1;
  }
  v24 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v24 == 60)
  {
    if ((llvm::GVNPass::processLoad(this, a2) & 1) != 0)
    {
LABEL_35:
      LOBYTE(v6) = 1;
      return v6 & 1;
    }
    v27 = llvm::GVNPass::ValueTable::lookupOrAdd((llvm::GVNPass *)((char *)this + 128), a2);
    v28 = *((_QWORD *)a2 + 5);
    v29 = this;
    goto LABEL_43;
  }
  if (a2 && v24 == 30)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 3)
    {
      v26 = (unsigned __int8 *)*((_QWORD *)a2 - 12);
      if (v26[16] <= 0x14u)
      {
        v23 = llvm::GVNPass::processFoldableCondBr(this, a2);
        goto LABEL_31;
      }
      v36 = (uint64_t ***)*((_QWORD *)a2 - 4);
      v37 = (uint64_t ***)*((_QWORD *)a2 - 8);
      if (v36 != v37)
      {
        v38 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
        v39 = **v36;
        v40 = *v39;
        v41 = *(llvm::Value **)(*v39 + 1560);
        if (!v41)
        {
          v73 = *(llvm::ConstantInt **)(v40 + 1888);
          v74 = *(_DWORD *)(v40 + 1896);
          LODWORD(v83) = v74 >> 8;
          if (v74 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v82, 1, 0);
          }
          else
          {
            if (v74 <= 0xFF)
              v75 = 0;
            else
              v75 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v74);
            v82 = (void *)(v75 & 1);
          }
          v41 = llvm::ConstantInt::get(v73, (llvm::LLVMContext *)&v82, v22);
          if (v83 >= 0x41 && v82)
            MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
          *(_QWORD *)(v40 + 1560) = v41;
        }
        v76 = v38;
        v77.i64[0] = (uint64_t)v36;
        v43 = llvm::GVNPass::propagateEquality(this, (llvm::Value *)v26, v41, &v76, 1);
        v44 = **v37;
        v45 = *v44;
        v6 = *(llvm::Value **)(*v44 + 1568);
        if (!v6)
        {
          v72 = *(llvm::ConstantInt **)(v45 + 1888);
          LODWORD(v83) = *(_DWORD *)(v45 + 1896) >> 8;
          if (v83 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v82, 0, 0);
          else
            v82 = 0;
          v6 = llvm::ConstantInt::get(v72, (llvm::LLVMContext *)&v82, v42);
          if (v83 >= 0x41 && v82)
            MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
          *(_QWORD *)(v45 + 1568) = v6;
        }
        v82 = v38;
        v83 = (uint64_t)v37;
        LOBYTE(v6) = v43 | llvm::GVNPass::propagateEquality(this, (llvm::Value *)v26, v6, (llvm::BasicBlock **)&v82, 1);
        return v6 & 1;
      }
    }
LABEL_2:
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  if (!a2 || v24 != 31)
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
      goto LABEL_2;
    v32 = *((_DWORD *)this + 76);
    v33 = llvm::GVNPass::ValueTable::lookupOrAdd((llvm::GVNPass *)((char *)this + 128), a2);
    v34 = v33;
    v35 = *((unsigned __int8 *)a2 + 16);
    if ((v35 - 29) >= 0xB && v35 != 83 && v35 != 59)
    {
      v28 = *((_QWORD *)a2 + 5);
      if (v33 >= v32)
        goto LABEL_53;
      Leader = (llvm::Instruction *)llvm::GVNPass::findLeader(this, *((const llvm::BasicBlock **)a2 + 5), v33);
      if (Leader)
      {
        v69 = Leader;
        if (Leader != a2)
        {
          llvm::patchReplacementInstruction(a2, Leader, v68);
          llvm::Value::doRAUW(a2, v69, (llvm::Value *)1);
          v70 = (llvm::PhiValues **)*((_QWORD *)this + 2);
          if (v70)
          {
            v71 = (*(_DWORD *)(*(_QWORD *)v69 + 8) & 0xFE) == 0x12
                ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v69 + 16) + 8)
                : *(_DWORD *)(*(_QWORD *)v69 + 8);
            if (v71 == 15)
              llvm::MemoryDependenceResults::invalidateCachedPointerInfo(v70, v69);
          }
          sub_1C5B0B008((int32x2_t *)this, a2);
          goto LABEL_35;
        }
        goto LABEL_2;
      }
    }
    v28 = *((_QWORD *)a2 + 5);
LABEL_53:
    v29 = this;
    v27 = v34;
LABEL_43:
    sub_1C5B0EF1C((uint64_t)v29, v27, (uint64_t)a2, v28);
    goto LABEL_2;
  }
  v30 = *((_DWORD *)a2 + 5);
  if ((v30 & 0x40000000) != 0)
    v31 = (llvm::Value **)*((_QWORD *)a2 - 1);
  else
    v31 = (llvm::Value **)((char *)a2 - 32 * (v30 & 0x7FFFFFF));
  v46 = *v31;
  v47 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v82 = (void *)1;
  for (i = 8; i != 264; i += 16)
    *(void **)((char *)&v82 + i) = (void *)-4096;
  v49 = (v30 >> 1) & 0x3FFFFFF;
  if (!v49)
  {
    v58 = 0xFFFFFFFFLL;
    goto LABEL_75;
  }
  v50 = 0;
  v51 = (unint64_t)v49 << 6;
  do
  {
    v52 = *((_DWORD *)a2 + 5);
    if ((v52 & 0x40000000) != 0)
      v53 = (char *)*((_QWORD *)a2 - 1);
    else
      v53 = (char *)a2 - 32 * (v52 & 0x7FFFFFF);
    v81 = *(_QWORD *)&v53[v50 + 32];
    v76 = 0;
    v54 = sub_1C5B12B3C((uint64_t)&v82, &v81, &v76);
    v55 = v76;
    if (v54)
    {
      v56 = *((_DWORD *)v76 + 2);
    }
    else
    {
      v55 = (llvm::BasicBlock *)sub_1C5B12BE4(&v82, (uint64_t)&v81, &v81, v76);
      v56 = 0;
      *(_QWORD *)v55 = v81;
      *((_DWORD *)v55 + 2) = 0;
    }
    *((_DWORD *)v55 + 2) = v56 + 1;
    v50 += 64;
  }
  while (v51 != v50);
  v57 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
  v58 = (v57 - 1);
  if (v57 != 1)
  {
LABEL_75:
    LODWORD(v6) = 0;
    v59 = 2;
    v60 = 4294967294;
    do
    {
      v61 = *((_DWORD *)a2 + 5);
      if ((v61 & 0x40000000) != 0)
        v62 = (char *)*((_QWORD *)a2 - 1);
      else
        v62 = (char *)a2 - 32 * (v61 & 0x7FFFFFF);
      v63 = (v59 + 1);
      if (!v60)
        v63 = 1;
      v64 = *(llvm::BasicBlock **)&v62[32 * v63];
      v76 = v64;
      v81 = 0;
      if ((sub_1C5B12EEC((uint64_t)&v82, &v76, &v81) & 1) != 0 && *(_DWORD *)(v81 + 8) == 1)
      {
        v76 = v47;
        v77.i64[0] = (uint64_t)v64;
        v65 = *((_DWORD *)a2 + 5);
        if ((v65 & 0x40000000) != 0)
          v66 = (char *)*((_QWORD *)a2 - 1);
        else
          v66 = (char *)a2 - 32 * (v65 & 0x7FFFFFF);
        LODWORD(v6) = v6 | llvm::GVNPass::propagateEquality(this, v46, *(llvm::Value **)&v66[32 * (v59 & 0xFFFFFFFE)], &v76, 1);
      }
      v59 += 2;
      --v60;
      --v58;
    }
    while (v58);
    goto LABEL_88;
  }
  LOBYTE(v6) = 0;
LABEL_88:
  if ((v82 & 1) == 0)
    MEMORY[0x1CAA32FB4](v83, 8);
  return v6 & 1;
}

uint64_t llvm::GVNPass::processFoldableCondBr(llvm::GVNPass *this, llvm::BranchInst *a2)
{
  llvm::BasicBlock **v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  llvm::BasicBlock *v8;
  uint64_t v9;
  llvm::BasicBlock *v10;

  if (!a2)
    return 0;
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 1)
    return 0;
  v3 = (llvm::BasicBlock **)((char *)a2 - 32);
  if (*((_QWORD *)a2 - 4) == *((_QWORD *)a2 - 8))
    return 0;
  result = 0;
  v6 = *((_QWORD *)a2 - 12);
  if (v6 && *(_BYTE *)(v6 + 16) == 16)
  {
    v7 = (_QWORD *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = (_QWORD *)*v7;
    if (*v7)
      v3 = (llvm::BasicBlock **)((char *)a2 - 64);
    v8 = *v3;
    v9 = 0;
    v10 = v8;
    if ((sub_1C4E36498((uint64_t *)this + 6, &v10, &v9) & 1) != 0)
      return 0;
    if (!llvm::BasicBlock::getSinglePredecessor(v8))
      v8 = (llvm::BasicBlock *)llvm::GVNPass::splitCriticalEdges(this, *((llvm::BasicBlock **)a2 + 5), v8);
    llvm::GVNPass::addDeadBlock(this, v8);
    return 1;
  }
  return result;
}

uint64_t llvm::GVNPass::iterateOnFunction(llvm::GVNPass *this, llvm::Function *a2)
{
  char *v4;
  char *v5;
  int v6;
  llvm::BasicBlock *v7;
  llvm::Function *v9;
  void *__p;
  char *v11;
  uint64_t v12;

  llvm::GVNPass::cleanupGlobalSets(this);
  v9 = a2;
  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_1C5643D14((char **)&__p, (uint64_t)&v9);
  v5 = (char *)__p;
  v4 = v11;
  if (v11 == __p)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = (llvm::BasicBlock *)*((_QWORD *)v4 - 1);
      v4 -= 8;
      v6 |= llvm::GVNPass::processBlock(this, v7);
    }
    while (v4 != v5);
    v4 = (char *)__p;
  }
  if (v4)
  {
    v11 = v4;
    operator delete(v4);
  }
  return v6 & 1;
}

_QWORD *llvm::GVNPass::assignValNumForDeadCode(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  llvm::Value *v7;
  int v8;

  v1 = (uint64_t *)this[9];
  v2 = (uint64_t *)this[10];
  if (v1 != v2)
  {
    v3 = (uint64_t)this;
    do
    {
      v4 = *v1;
      v5 = *v1 + 40;
      for (i = *(_QWORD *)(*v1 + 48); i != v5; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v7 = (llvm::Value *)(i - 24);
        else
          v7 = 0;
        v8 = llvm::GVNPass::ValueTable::lookupOrAdd((llvm::GVNPass::ValueTable *)(v3 + 128), v7);
        this = sub_1C5B0EF1C(v3, v8, (uint64_t)v7, v4);
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t llvm::GVNPass::performPRE(llvm::GVNPass *this, llvm::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  const void *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  const void *v12;
  void *v13;
  unsigned int v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  llvm::Instruction *v35;
  unsigned int v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE v40[64];
  char *v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  _BYTE v49[64];
  void *__p;
  char *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  void *v58;
  _BYTE *v59;
  void *v60;
  void *v61;
  unsigned int v62;
  unsigned int v63;
  void *v64;
  _BYTE *v65;

  v4 = *((_QWORD *)a2 + 10);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  v44 = (_BYTE *)v5;
  sub_1C586DB8C((uint64_t *)&v44, (uint64_t)&v53);
  v6 = v49;
  v44 = v49;
  v7 = v54;
  if (v54 == v53)
  {
    v45 = v49;
    v8 = v54;
  }
  else
  {
    v37 = v55;
    v6 = malloc_type_malloc(8 * v55, 0x4065EBACuLL);
    if (!v6)
    {
      if (v37)
        goto LABEL_81;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_81;
    }
    v45 = v6;
    v8 = v53;
    v7 = v54;
  }
  v9 = v56;
  v46 = v55;
  if (v7 == v8)
    v10 = v56;
  else
    v10 = v55;
  if (v10)
  {
    memmove(v6, v7, 8 * v10);
    v9 = v56;
  }
  v47 = v9;
  v48 = v57;
  v51 = 0;
  v52 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v58, v59, (v59 - (_BYTE *)v58) >> 5);
  v11 = v40;
  v12 = v61;
  if (v61 != v60)
  {
    v38 = v62;
    v11 = malloc_type_malloc(8 * v62, 0x4065EBACuLL);
    if (v11 || !v38 && (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v39 = v11;
      v13 = v60;
      v12 = v61;
      goto LABEL_13;
    }
LABEL_81:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v39 = v40;
  v13 = v61;
LABEL_13:
  if (v12 == v13)
    v14 = v63;
  else
    v14 = v62;
  if (v14)
    memmove(v11, v12, 8 * v14);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  sub_1C4E19D7C(&v41, v64, v65, (v65 - (_BYTE *)v64) >> 5);
  v15 = 0;
  while (1)
  {
    if (v51 - (_BYTE *)__p != v42 - v41)
      goto LABEL_33;
    if (__p == v51)
      break;
    v16 = v41 + 16;
    v17 = (char *)__p + 16;
    while (1)
    {
      v18 = v17 - 16;
      if (*((_QWORD *)v17 - 2) != *((_QWORD *)v16 - 2))
        break;
      v19 = v16[8];
      if (v17[8])
        v20 = v19 == 0;
      else
        v20 = 1;
      if (v20)
      {
        if ((v17[8] == 0) == (v19 != 0))
          break;
      }
      else if (*(_DWORD *)v17 != *(_DWORD *)v16)
      {
        break;
      }
      v16 += 32;
      v17 += 32;
      if (v18 + 32 == v51)
        goto LABEL_55;
    }
LABEL_33:
    v21 = *((_QWORD *)v51 - 4);
    v22 = *((_QWORD *)a2 + 10);
    if (v22)
      v23 = v22 - 24;
    else
      v23 = 0;
    if (v21 != v23)
    {
      v24 = *(_QWORD *)(v21 + 48);
      v25 = v24 - 24;
      if (!v24)
        v25 = 0;
      v26 = *(unsigned __int8 *)(v25 + 16);
      v27 = *(_QWORD *)(v21 + 48);
      if (v26 == 83)
      {
        v27 = *(_QWORD *)(v21 + 48);
        do
        {
          v27 = *(_QWORD *)(v27 + 8);
          v28 = v27 - 24;
          if (!v27)
            v28 = 0;
        }
        while (*(_BYTE *)(v28 + 16) == 83);
      }
      v29 = *(unsigned __int8 *)(v27 - 8) - 38;
      v30 = v29 > 0x38;
      v31 = (1 << v29) & 0x100060000000001;
      if (v30 || v31 == 0)
      {
        v33 = v21 + 40;
        do
        {
          v34 = *(_QWORD *)(v24 + 8);
          if (v24)
            v35 = (llvm::Instruction *)(v24 - 24);
          else
            v35 = 0;
          v15 |= llvm::GVNPass::performScalarPRE(this, v35);
          v24 = v34;
        }
        while (v34 != v33);
      }
    }
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v44);
  }
LABEL_55:
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39 != v40)
    free(v39);
  if (__p)
  {
    v51 = (char *)__p;
    operator delete(__p);
  }
  if (v45 != v44)
    free(v45);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v61 != v60)
    free(v61);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v54 != v53)
    free(v54);
  return (llvm::GVNPass::splitCriticalEdges(this) | v15) & 1;
}

unsigned int *llvm::GVNPass::cleanupGlobalSets(llvm::GVNPass *this)
{
  _QWORD *v2;
  int v3;
  unsigned int *result;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  llvm::GVNPass::ValueTable::clear((llvm::GVNPass *)((char *)this + 128));
  v2 = (_QWORD *)((char *)this + 312);
  v3 = *((_DWORD *)this + 80);
  if (v3)
  {
    v5 = *((_DWORD *)this + 82);
    if (v5 <= 4 * v3 || v5 < 0x41)
    {
LABEL_20:
      if (v5)
      {
        v15 = (_DWORD *)*v2;
        v16 = 32 * v5;
        do
        {
          *v15 = -1;
          v15 += 8;
          v16 -= 32;
        }
        while (v16);
      }
      *((_QWORD *)this + 40) = 0;
      goto LABEL_3;
    }
    v6 = 1 << (33 - __clz(v3 - 1));
    if (v6 <= 64)
      v7 = 64;
    else
      v7 = v6;
  }
  else
  {
    if (!*((_DWORD *)this + 81))
      goto LABEL_3;
    v5 = *((_DWORD *)this + 82);
    if (v5 <= 0x40)
      goto LABEL_20;
    v7 = 0;
  }
  if (v7 == v5)
  {
    *((_QWORD *)this + 40) = 0;
    v8 = 32 * v5;
    v9 = (_DWORD *)*((_QWORD *)this + 39);
    do
    {
      *v9 = -1;
      v9 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v2, 8);
    if (v7)
    {
      v10 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      *((_DWORD *)this + 82) = v11;
      v12 = operator new(32 * v11, (std::align_val_t)8uLL);
      *((_QWORD *)this + 39) = v12;
      *((_QWORD *)this + 40) = 0;
      v13 = *((unsigned int *)this + 82);
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          *v12 = -1;
          v12 += 8;
          v14 -= 32;
        }
        while (v14);
      }
    }
    else
    {
      *v2 = 0;
      *((_QWORD *)this + 40) = 0;
      *((_DWORD *)this + 82) = 0;
    }
  }
LABEL_3:
  sub_1C5B0EC98((_DWORD *)this + 166);
  sub_1C4926A50((uint64_t)this + 336);
  result = sub_1C4A5A548((unsigned int *)(*((_QWORD *)this + 13) + 8));
  *((_BYTE *)this + 688) = 1;
  return result;
}

uint64_t llvm::GVNPass::processBlock(llvm::GVNPass *this, llvm::BasicBlock *a2)
{
  llvm::BasicBlock *v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  llvm::Instruction *v9;
  llvm::DominatorTree *v10;
  int v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  llvm **v15;
  uint64_t v16;
  llvm *v17;
  llvm::MemoryDependenceResults *v18;
  int32x2_t **v19;
  uint64_t v20;
  _QWORD *v21;
  llvm::Instruction *v22;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = a2;
  if ((sub_1C4E36498((uint64_t *)this + 6, &v27, &v26) & 1) != 0)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    sub_1C5B12F9C((_QWORD *)this + 54);
    *((_DWORD *)this + 128) = 0;
    v5 = llvm::EliminateDuplicatePHINodes((llvm **)a2, v4);
    v8 = (_QWORD *)*((_QWORD *)a2 + 6);
    v6 = (_QWORD *)((char *)a2 + 48);
    v7 = v8;
    if (v8 != v6 - 1)
    {
      do
      {
        if (*((_DWORD *)this + 128))
        {
          if (v7)
            v22 = (llvm::Instruction *)(v7 - 3);
          else
            v22 = 0;
          v5 |= llvm::GVNPass::replaceOperandsForInBlockEquality(this, v22);
        }
        if (v7)
          v9 = (llvm::Instruction *)(v7 - 3);
        else
          v9 = 0;
        v11 = llvm::GVNPass::processInstruction(this, v9);
        v12 = *((unsigned int *)this + 148);
        if ((_DWORD)v12)
        {
          v14 = v7;
          v25 = (_QWORD *)*v6;
          if (v7 != (_QWORD *)*v6)
            v14 = (_QWORD *)*v7;
          v24 = v14;
          v15 = (llvm **)*((_QWORD *)this + 73);
          v16 = 8 * v12;
          do
          {
            v17 = *v15;
            llvm::salvageKnowledge(*v15, *((char ***)this + 5), 0, v10);
            v27 = v29;
            v28 = 0x100000000;
            llvm::findDbgUsers((uint64_t)&v27, (uint64_t)v17);
            llvm::salvageDebugInfoForDbgValues(v17, (uint64_t *)v27, v28);
            if (v27 != v29)
              free(v27);
            v18 = (llvm::MemoryDependenceResults *)*((_QWORD *)this + 2);
            if (v18)
              llvm::MemoryDependenceResults::removeInstruction(v18, v17);
            v19 = (int32x2_t **)*((_QWORD *)this + 15);
            if (v19)
              sub_1C5B0E434(v19, (uint64_t)v17);
            llvm::InstructionPrecedenceTracking::removeInstruction(*((int32x2_t **)this + 13), v17);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v17 + 5) + 40, (uint64_t ***)v17);
            v20 = *((_QWORD *)v17 + 3);
            v21 = (_QWORD *)*((_QWORD *)v17 + 4);
            *v21 = v20;
            *(_QWORD *)(v20 + 8) = v21;
            *((_QWORD *)v17 + 3) = 0;
            *((_QWORD *)v17 + 4) = 0;
            llvm::Value::deleteValue(v17);
            ++v15;
            v16 -= 8;
          }
          while (v16);
          *((_DWORD *)this + 148) = 0;
          v13 = (_QWORD **)(v24 + 1);
          if (v7 == v25)
            v13 = (_QWORD **)v6;
        }
        else
        {
          v13 = (_QWORD **)(v7 + 1);
        }
        v5 |= v11;
        v7 = *v13;
      }
      while (*v13 != v6 - 1);
    }
  }
  return v5 & 1;
}

uint64_t llvm::GVNPass::performScalarPREInsertion(llvm::InstructionPrecedenceTracking **this, llvm::Instruction *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::InstructionPrecedenceTracking *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  uint64_t result;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  llvm::BasicBlock *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Instruction *v46;
  int v47;
  int v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  unsigned int v56;
  uint64_t v57;
  llvm::ValueSymbolTable *v58;
  unsigned __int8 *v59;
  _QWORD v60[4];
  __int16 v61;

  v7 = *((_DWORD *)a2 + 5);
  v8 = v7 & 0x7FFFFFF;
  if ((v7 & 0x7FFFFFF) == 0)
  {
LABEL_30:
    v35 = (llvm::BasicBlock *)*((_QWORD *)a3 + 5);
    if (v35 == (llvm::BasicBlock *)((char *)a3 + 40))
    {
      v37 = 0;
    }
    else
    {
      if (v35)
        v36 = (char *)v35 - 24;
      else
        v36 = 0;
      if (v36[16] - 29 >= 0xB)
        v37 = 0;
      else
        v37 = v36;
    }
    v38 = *((_QWORD *)v37 + 5);
    *((_QWORD *)a2 + 5) = v38;
    *(_WORD *)(v38 + 18) &= ~0x8000u;
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      v57 = *(_QWORD *)(v38 + 56);
      if (v57)
      {
        v58 = *(llvm::ValueSymbolTable **)(v57 + 104);
        if (v58)
          llvm::ValueSymbolTable::reinsertValue(v58, a2);
      }
    }
    v40 = *((_QWORD *)v37 + 3);
    v39 = v37 + 24;
    *((_QWORD *)a2 + 3) = v40;
    *((_QWORD *)a2 + 4) = v39;
    *(_QWORD *)(v40 + 8) = (char *)a2 + 24;
    *v39 = (char *)a2 + 24;
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v51 = 0;
      v50 = &byte_1C871356D;
      goto LABEL_48;
    }
    v41 = ***(_QWORD ***)a2;
    v42 = *(_QWORD *)(v41 + 152);
    v43 = *(unsigned int *)(v41 + 168);
    if ((_DWORD)v43)
    {
      LODWORD(v44) = (v43 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v45 = v42 + 16 * v44;
      v46 = *(llvm::Instruction **)v45;
      if (*(llvm::Instruction **)v45 == a2)
      {
LABEL_47:
        v49 = *(_QWORD **)(v45 + 8);
        v52 = *v49;
        v50 = (char *)(v49 + 2);
        v51 = v52;
LABEL_48:
        v61 = 773;
        v60[0] = v50;
        v60[1] = v51;
        v60[2] = ".pre";
        llvm::Value::setName((uint64_t ***)a2, (uint64_t)v60);
        v54 = (unsigned __int8 **)((char *)a2 + 48);
        v53 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
        v59 = v53;
        if (v53)
          llvm::MetadataTracking::track((uint64_t)&v59, v53, 2);
        if (&v59 == v54)
        {
          if (v59)
            llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
        }
        else
        {
          if (*v54)
            llvm::MetadataTracking::untrack((uint64_t)a2 + 48, *v54);
          v55 = v59;
          *v54 = v59;
          if (v55)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v59, v55, (uint64_t)a2 + 48);
            v59 = 0;
          }
        }
        llvm::InstructionPrecedenceTracking::insertInstructionTo(this[13], a2, a3);
        v56 = llvm::GVNPass::ValueTable::lookupOrAdd((llvm::GVNPass::ValueTable *)(this + 16), a2);
        llvm::GVNPass::ValueTable::add((llvm::GVNPass::ValueTable *)(this + 16), a2, v56);
        sub_1C5B0EF1C((uint64_t)this, v56, (uint64_t)a2, (uint64_t)a3);
        return 1;
      }
      v47 = 1;
      while (v46 != (llvm::Instruction *)-4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v43 - 1);
        v46 = *(llvm::Instruction **)(v42 + 16 * v44);
        if (v46 == a2)
        {
          v45 = v42 + 16 * v44;
          goto LABEL_47;
        }
      }
    }
    v45 = v42 + 16 * v43;
    goto LABEL_47;
  }
  v10 = 0;
  while (1)
  {
    v11 = *((_DWORD *)a2 + 5);
    v12 = (v11 & 0x40000000) != 0
        ? (llvm::Instruction *)*((_QWORD *)a2 - 1)
        : (llvm::Instruction *)((char *)a2 - 32 * (v11 & 0x7FFFFFF));
    v13 = *((_QWORD *)v12 + 4 * v10);
    if (*(unsigned __int8 *)(v13 + 16) >= 0x16u)
      break;
LABEL_26:
    if (++v10 == v8)
      goto LABEL_30;
  }
  v14 = *((unsigned int *)this + 36);
  if (!(_DWORD)v14)
    return 0;
  v15 = this[16];
  v16 = v14 - 1;
  LODWORD(v17) = (v14 - 1) & ((v13 >> 4) ^ (v13 >> 9));
  v18 = (char *)v15 + 16 * v17;
  v19 = *(_QWORD *)v18;
  if (v13 == *(_QWORD *)v18)
  {
LABEL_17:
    v26 = llvm::GVNPass::ValueTable::phiTranslate((llvm::GVNPass::ValueTable *)(this + 16), a3, a4, *((unsigned int *)v18 + 2), (llvm::GVNPass *)this);
    result = llvm::GVNPass::findLeader((llvm::GVNPass *)this, a3, v26);
    if (!result)
      return result;
    v28 = *((_DWORD *)a2 + 5);
    if ((v28 & 0x40000000) != 0)
      v29 = (char *)*((_QWORD *)a2 - 1);
    else
      v29 = (char *)a2 - 32 * (v28 & 0x7FFFFFF);
    v30 = &v29[32 * v10];
    if (*(_QWORD *)v30)
    {
      **((_QWORD **)v30 + 2) = *((_QWORD *)v30 + 1);
      v31 = *((_QWORD *)v30 + 1);
      if (v31)
        *(_QWORD *)(v31 + 16) = *((_QWORD *)v30 + 2);
    }
    *(_QWORD *)v30 = result;
    v34 = *(_QWORD *)(result + 8);
    v32 = (char **)(result + 8);
    v33 = v34;
    *((_QWORD *)v30 + 1) = v34;
    if (v34)
      *(_QWORD *)(v33 + 16) = v30 + 8;
    *(_QWORD *)&v29[32 * v10 + 16] = v32;
    *v32 = v30;
    goto LABEL_26;
  }
  v20 = 1;
  v21 = *(_QWORD *)v18;
  v22 = v16 & ((v13 >> 4) ^ (v13 >> 9));
  while (v21 != -4096)
  {
    v23 = v22 + v20++;
    v22 = v23 & v16;
    v21 = *((_QWORD *)v15 + 2 * v22);
    if (v13 == v21)
    {
      v24 = 1;
      while (v19 != -4096)
      {
        v25 = v17 + v24++;
        v17 = v25 & v16;
        v19 = *((_QWORD *)v15 + 2 * v17);
        if (v13 == v19)
        {
          v18 = (char *)v15 + 16 * v17;
          goto LABEL_17;
        }
      }
      v18 = (char *)v15 + 16 * v14;
      goto LABEL_17;
    }
  }
  return 0;
}

uint64_t llvm::GVNPass::splitCriticalEdges(llvm::GVNPass *this)
{
  unsigned int v1;
  uint64_t result;
  char v4;
  uint64_t v5;
  llvm::Instruction *v6;
  unsigned int v7;
  llvm::MemoryDependenceResults *v8;
  _WORD v9[20];
  _QWORD v10[2];
  __int128 v11;
  int v12;
  char v13;

  v1 = *((_DWORD *)this + 176);
  if (!v1)
    return 0;
  v4 = 0;
  do
  {
    v5 = *((_QWORD *)this + 87) + 16 * v1;
    v6 = *(llvm::Instruction **)(v5 - 16);
    v7 = *(_DWORD *)(v5 - 8);
    *((_DWORD *)this + 176) = v1 - 1;
    v10[0] = *((_QWORD *)this + 3);
    v10[1] = 0;
    v11 = *((_OWORD *)this + 7);
    v12 = 0;
    v13 = 1;
    v9[16] = 257;
    v4 |= llvm::SplitCriticalEdge(v6, v7, (uint64_t)v10, (llvm::Twine *)v9) != 0;
    v1 = *((_DWORD *)this + 176);
  }
  while (v1);
  if ((v4 & 1) == 0)
    return 0;
  v8 = (llvm::MemoryDependenceResults *)*((_QWORD *)this + 2);
  if (v8)
    llvm::MemoryDependenceResults::invalidateCachedPredecessors(v8);
  result = 1;
  *((_BYTE *)this + 688) = 1;
  return result;
}

uint64_t sub_1C5B10470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 == a1 + 40)
  {
    v5 = 0;
  }
  else
  {
    if (v3)
      v4 = (unsigned __int8 *)(v3 - 24);
    else
      v4 = 0;
    if (v4[16] - 29 >= 0xB)
      v5 = 0;
    else
      v5 = v4;
  }
  v6 = 0;
  v7 = v5[16];
  v8 = 1;
  do
  {
    if (v7 != 30)
      __asm { BR              X15 }
    v9 = *(_QWORD *)&v5[-32 * v6++ - 32];
    v8 += 2;
  }
  while (v9 != a2);
  v12 = 257;
  return llvm::SplitCriticalEdge((llvm::Instruction *)v5, v6 - 1, a3, (llvm::Twine *)v11);
}

void sub_1C5B1053C()
{
  JUMPOUT(0x1C5B10528);
}

void sub_1C5B10550()
{
  JUMPOUT(0x1C5B104D0);
}

void sub_1C5B10568(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    JUMPOUT(0x1C5B104D4);
  JUMPOUT(0x1C5B104D0);
}

void sub_1C5B10578()
{
  JUMPOUT(0x1C5B104D0);
}

uint64_t llvm::GVNPass::verifyRemoved(uint64_t this, const llvm::Instruction *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 312);
  v3 = *(unsigned int *)(this + 328);
  v4 = (_DWORD *)(v2 + 32 * v3);
  if (*(_DWORD *)(this + 320))
  {
    if ((_DWORD)v3)
    {
      v5 = 32 * v3;
      v6 = *(_DWORD **)(this + 312);
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 8;
        v5 -= 32;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_DWORD **)(this + 312);
    }
  }
  else
  {
LABEL_6:
    v6 = (_DWORD *)(v2 + 32 * v3);
  }
  v7 = (_DWORD *)(v2 + 32 * v3);
  while (v6 != v7)
  {
    do
    {
      v8 = v6 + 8;
      v6 = v4;
      if (v8 == v4)
        break;
      v6 = v8;
    }
    while (*v8 > 0xFFFFFFFD);
  }
  return this;
}

void llvm::GVNPass::addDeadBlock(llvm::GVNPass *this, llvm::BasicBlock *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;
  void *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  llvm::BasicBlock *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v39;
  int v40;
  _OWORD *v41;
  int v42;
  unsigned int v43;
  llvm::BasicBlock **v44;
  llvm::BasicBlock *v45;
  llvm::BasicBlock **v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  llvm::BasicBlock **v53;
  _QWORD *v54;
  void **v55;
  void **v56;
  llvm::BasicBlock *v57;
  uint64_t i;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  llvm::BasicBlock **v63;
  llvm::BasicBlock **v64;
  llvm::BasicBlock *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  llvm::BasicBlock **v70;
  llvm::BasicBlock *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  uint64_t v77;
  llvm::Type *v78;
  uint64_t j;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  llvm::PhiValues **v83;
  unsigned int v84;
  BOOL v85;
  char *v88;
  void **v89;
  llvm::BasicBlock *v90;
  uint64_t v91;
  _QWORD v92[2];
  char v93;
  void *v94;
  uint64_t v95;
  _BYTE v96[64];
  uint64_t v97;
  _OWORD v98[2];
  void *v99;
  uint64_t v100;
  _BYTE v101[32];
  _QWORD *v102;
  unsigned int v103;
  unsigned int v104;
  _QWORD v105[6];

  v2 = (uint64_t *)this;
  v105[4] = *MEMORY[0x1E0C80C00];
  v102 = v105;
  v104 = 4;
  v97 = 1;
  v98[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v98[1] = v98[0];
  v99 = v101;
  v100 = 0x400000000;
  v105[0] = a2;
  v3 = (uint64_t *)((char *)this + 48);
  v4 = 1;
  do
  {
    v5 = (void *)v102[v4 - 1];
    v103 = v4 - 1;
    v94 = v5;
    v92[0] = 0;
    if ((sub_1C4E36498(v3, &v94, v92) & 1) == 0)
    {
      v94 = v96;
      v95 = 0x800000000;
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants(v2[3], (uint64_t)v5, (uint64_t)&v94);
      v6 = (char *)v94;
      if ((_DWORD)v95)
      {
        v7 = (char *)v94 + 8 * v95;
        do
        {
          sub_1C6187FB8(v3, v6, (uint64_t)v92);
          if (v93)
          {
            v9 = (_QWORD *)v2[10];
            v8 = v2[11];
            if ((unint64_t)v9 >= v8)
            {
              v11 = (_QWORD *)v2[9];
              v12 = v9 - v11;
              v13 = v12 + 1;
              if ((unint64_t)(v12 + 1) >> 61)
                abort();
              v14 = v8 - (_QWORD)v11;
              if (v14 >> 2 > v13)
                v13 = v14 >> 2;
              if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                v15 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v15 = v13;
              if (v15)
              {
                if (v15 >> 61)
                  sub_1C4764EE4();
                v16 = (char *)operator new(8 * v15);
              }
              else
              {
                v16 = 0;
              }
              v17 = &v16[8 * v12];
              *(_QWORD *)v17 = *(_QWORD *)v6;
              v10 = v17 + 8;
              if (v9 == v11)
              {
                v2 = (uint64_t *)this;
              }
              else
              {
                do
                {
                  v18 = *--v9;
                  *((_QWORD *)v17 - 1) = v18;
                  v17 -= 8;
                }
                while (v9 != v11);
                v2 = (uint64_t *)this;
                v9 = (_QWORD *)*((_QWORD *)this + 9);
              }
              v2[9] = (uint64_t)v17;
              v2[10] = (uint64_t)v10;
              v2[11] = (uint64_t)&v16[8 * v15];
              if (v9)
                operator delete(v9);
            }
            else
            {
              *v9 = *(_QWORD *)v6;
              v10 = v9 + 1;
            }
            v2[10] = (uint64_t)v10;
          }
          v6 += 8;
        }
        while (v6 != v7);
        v6 = (char *)v94;
        v88 = (char *)v94 + 8 * v95;
        if ((_DWORD)v95)
        {
          while (1)
          {
            v19 = *(_QWORD *)(*(_QWORD *)v6 + 40);
            if (v19 != *(_QWORD *)v6 + 40)
              break;
LABEL_89:
            v6 += 8;
            if (v6 == v88)
            {
              v6 = (char *)v94;
              goto LABEL_98;
            }
          }
          if (v19)
            v20 = v19 - 24;
          else
            v20 = 0;
          v21 = *(unsigned __int8 *)(v20 + 16);
          v22 = v21 - 29;
          if (v21 != 30)
          {
            v23 = 2;
            switch(v22)
            {
              case 1:
LABEL_189:
                __break(1u);
                return;
              case 2:
                v23 = (*(_DWORD *)(v20 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_92;
              case 3:
              case 9:
                v23 = (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_92;
              case 4:
                goto LABEL_35;
              case 7:
                v23 = *(_WORD *)(v20 + 18) & 1;
                goto LABEL_92;
              case 8:
                v23 = 1;
                goto LABEL_35;
              case 10:
                v23 = *(_DWORD *)(v20 + 80) + 1;
LABEL_92:
                if (!v23)
                  goto LABEL_89;
                goto LABEL_35;
              default:
                goto LABEL_89;
            }
          }
          if ((*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 3)
            v23 = 2;
          else
            v23 = 1;
LABEL_35:
          v24 = 0;
          v25 = v23;
          while (2)
          {
            v90 = 0;
            v26 = *(unsigned __int8 *)(v20 + 16);
            if (v26 != 30)
              __asm { BR              X9 }
            v90 = *(llvm::BasicBlock **)(v20 - 32 - 32 * v24);
            v91 = 0;
            v92[0] = v90;
            if ((sub_1C4E36498(v3, v92, &v91) & 1) != 0)
              goto LABEL_76;
            v27 = v90;
            v28 = *((_QWORD *)v90 + 1);
            if (!v28)
              goto LABEL_72;
            while (1)
            {
              v29 = *(_QWORD *)(v28 + 24);
              v30 = *(unsigned __int8 *)(v29 + 16);
              v31 = v29 && v30 >= 0x1C;
              if (v31 && v30 - 29 <= 0xA)
                break;
              v28 = *(_QWORD *)(v28 + 8);
              if (!v28)
                goto LABEL_72;
            }
            v33 = *(_QWORD *)(v29 + 40);
            v91 = 0;
            v92[0] = v33;
            if (sub_1C4E36498(v3, v92, &v91))
            {
              while (1)
              {
                v28 = *(_QWORD *)(v28 + 8);
                if (!v28)
                  break;
                v35 = *(_QWORD *)(v28 + 24);
                v36 = *(unsigned __int8 *)(v35 + 16);
                if (v35)
                  v37 = v36 >= 0x1C;
                else
                  v37 = 0;
                if (v37 && v36 - 29 <= 0xA)
                {
                  v39 = *(_QWORD *)(v35 + 40);
                  v91 = 0;
                  v92[0] = v39;
                  if ((sub_1C4E36498(v3, v92, &v91) & 1) == 0)
                    goto LABEL_59;
                }
              }
              v27 = v90;
LABEL_72:
              v50 = v103;
              if (v103 >= (unint64_t)v104)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, (uint64_t)v105, v103 + 1, 8);
                v50 = v103;
              }
              v51 = v102;
              v52 = (uint64_t *)&v103;
LABEL_75:
              v51[v50] = v27;
              ++*(_DWORD *)v52;
LABEL_76:
              if (++v24 == v25)
                goto LABEL_89;
              continue;
            }
            break;
          }
LABEL_59:
          if ((v97 & 1) != 0)
          {
            v40 = 4;
            v41 = v98;
            goto LABEL_61;
          }
          v40 = DWORD2(v98[0]);
          if (DWORD2(v98[0]))
          {
            v41 = *(_OWORD **)&v98[0];
LABEL_61:
            v42 = v40 - 1;
            v43 = ((v90 >> 4) ^ (v90 >> 9)) & v42;
            v44 = (llvm::BasicBlock **)v41 + v43;
            v45 = *v44;
            if (v90 == *v44)
              goto LABEL_76;
            v46 = 0;
            v47 = 1;
            while (v45 != (llvm::BasicBlock *)-4096)
            {
              if (v46)
                v48 = 0;
              else
                v48 = v45 == (llvm::BasicBlock *)-8192;
              if (v48)
                v46 = v44;
              v49 = v43 + v47++;
              v43 = v49 & v42;
              v44 = (llvm::BasicBlock **)v41 + v43;
              v45 = *v44;
              if (v90 == *v44)
                goto LABEL_76;
            }
            if (v46)
              v53 = v46;
            else
              v53 = v44;
          }
          else
          {
            v53 = 0;
          }
          v54 = sub_1C5648ADC((uint64_t)&v97, (uint64_t)&v90, &v90, v53);
          *v54 = v90;
          v27 = v90;
          v50 = v100;
          if (v100 >= (unint64_t)HIDWORD(v100))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, (uint64_t)v101, v100 + 1, 8);
            v50 = v100;
          }
          v51 = v99;
          v52 = &v100;
          goto LABEL_75;
        }
      }
LABEL_98:
      if (v6 != v96)
        free(v6);
      v2 = (uint64_t *)this;
    }
    v4 = v103;
  }
  while (v103);
  v55 = (void **)v99;
  if ((_DWORD)v100)
  {
    v56 = (void **)((char *)v99 + 8 * v100);
    v89 = v56;
    do
    {
      v57 = (llvm::BasicBlock *)*v55;
      v94 = *v55;
      v92[0] = 0;
      if ((sub_1C4E36498(v3, &v94, v92) & 1) == 0)
      {
        for (i = *((_QWORD *)v57 + 1); i; i = *(_QWORD *)(i + 8))
        {
          v59 = *(_QWORD *)(i + 24);
          v60 = *(unsigned __int8 *)(v59 + 16);
          if (v59)
            v61 = v60 >= 0x1C;
          else
            v61 = 0;
          if (v61 && v60 - 29 < 0xB)
            break;
        }
        v94 = v96;
        v95 = 0x400000000;
        sub_1C4DBBCC0((unsigned int *)&v94, i, 0);
        if ((_DWORD)v95)
        {
          v63 = (llvm::BasicBlock **)v94;
          v64 = (llvm::BasicBlock **)((char *)v94 + 8 * v95);
          do
          {
            v90 = 0;
            v90 = *v63;
            v91 = 0;
            v92[0] = v90;
            if (sub_1C4E36498(v3, v92, &v91))
            {
              v65 = (llvm::BasicBlock *)*((_QWORD *)v90 + 5);
              if (v65 != (llvm::BasicBlock *)((char *)v90 + 40))
              {
                if (v65)
                  v66 = (uint64_t)v65 - 24;
                else
                  v66 = 0;
                v67 = *(unsigned __int8 *)(v66 + 16);
                if (v67 == 30)
                {
                  if ((*(_DWORD *)(v66 + 20) & 0x7FFFFFF) == 3)
                    v68 = 2;
                  else
                    v68 = 1;
LABEL_126:
                  v69 = 0;
                  v70 = (llvm::BasicBlock **)(v66 - 32);
                  while (1)
                  {
                    if (v67 != 30)
                      __asm { BR              X16 }
                    if (*v70 == v57)
                      break;
                    ++v69;
                    v70 -= 4;
                    if (v68 == v69)
                      goto LABEL_133;
                  }
                  if (llvm::isCriticalEdge(v66, (uint64_t)v57, 0))
                  {
                    v71 = (llvm::BasicBlock *)llvm::GVNPass::splitCriticalEdges(this, v90, v57);
                    if (v71)
                    {
                      v90 = v71;
                      sub_1C5ACED14((uint64_t)v3, &v90);
                    }
                  }
                  goto LABEL_133;
                }
                v68 = 2;
                switch(*(_BYTE *)(v66 + 16))
                {
                  case 0x1E:
                    goto LABEL_189;
                  case 0x1F:
                    v68 = (*(_DWORD *)(v66 + 20) >> 1) & 0x3FFFFFF;
                    break;
                  case 0x20:
                  case 0x26:
                    v68 = (*(_DWORD *)(v66 + 20) & 0x7FFFFFF) - 1;
                    break;
                  case 0x21:
                    goto LABEL_126;
                  case 0x24:
                    v68 = *(_WORD *)(v66 + 18) & 1;
                    break;
                  case 0x25:
                    v68 = 1;
                    goto LABEL_126;
                  case 0x27:
                    v68 = *(_DWORD *)(v66 + 80) + 1;
                    break;
                  default:
                    goto LABEL_133;
                }
                if (v68)
                  goto LABEL_126;
              }
            }
LABEL_133:
            ++v63;
          }
          while (v63 != v64);
        }
        v72 = *((_QWORD *)v57 + 1);
        if (v72)
        {
          while (1)
          {
            v73 = *(_QWORD *)(v72 + 24);
            v74 = *(unsigned __int8 *)(v73 + 16);
            v75 = v73 && v74 >= 0x1C;
            if (v75 && v74 - 29 <= 0xA)
              break;
            v72 = *(_QWORD *)(v72 + 8);
            if (!v72)
              goto LABEL_155;
          }
LABEL_159:
          v77 = *(_QWORD *)(v73 + 40);
          v91 = 0;
          v92[0] = v77;
          if (sub_1C4E36498(v3, v92, &v91)
            && *((llvm::BasicBlock **)v57 + 5) != (llvm::BasicBlock *)((char *)v57 + 40))
          {
            for (j = *((_QWORD *)v57 + 6); ; j = *(_QWORD *)(v80 + 32))
            {
              v80 = j - 24;
              v81 = j ? j - 24 : 0;
              if (!j || *(_BYTE *)(v81 + 16) != 83)
                break;
              v82 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v80, v78);
              sub_1C5276870(v80, v77, (uint64_t)v82);
              v83 = (llvm::PhiValues **)*((_QWORD *)this + 2);
              if (v83)
                llvm::MemoryDependenceResults::invalidateCachedPointerInfo(v83, (llvm::Value *)v80);
            }
          }
          v56 = v89;
          while (1)
          {
            v72 = *(_QWORD *)(v72 + 8);
            if (!v72)
              break;
            v73 = *(_QWORD *)(v72 + 24);
            v84 = *(unsigned __int8 *)(v73 + 16);
            if (v73)
              v85 = v84 >= 0x1C;
            else
              v85 = 0;
            if (v85 && v84 - 29 < 0xB)
              goto LABEL_159;
          }
        }
LABEL_155:
        if (v94 != v96)
          free(v94);
      }
      ++v55;
    }
    while (v55 != v56);
    v55 = (void **)v99;
  }
  if (v55 != (void **)v101)
    free(v55);
  if ((v97 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v98[0], 8);
  if (v102 != v105)
    free(v102);
}

uint64_t sub_1C5B11044(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  uint64_t v6;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeMemoryDependenceWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v4);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v5);
  v6 = operator new();
  *(_QWORD *)v6 = "Global Value Numbering";
  *(_QWORD *)(v6 + 8) = 22;
  *(_QWORD *)(v6 + 16) = "gvn";
  *(_QWORD *)(v6 + 24) = 3;
  *(_QWORD *)(v6 + 32) = &unk_1ED81C9C8;
  *(_WORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 42) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = sub_1C6313F00;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v6, 1);
  return v6;
}

BOOL sub_1C5B11108(llvm::Value *a1, llvm::Instruction *a2, uint64_t a3, llvm::DominatorTree *this)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v8 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)a1 + 5) == v8)
    return llvm::DominatorTree::dominates(this, a1, a2);
  v11 = &v15;
  v12 = &v15;
  v13 = 1;
  v14 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v11, v8);
  v9 = llvm::isPotentiallyReachable((uint64_t)a1, a3, (uint64_t)&v11, (uint64_t)this, 0) ^ 1;
  if (v12 != v11)
    free(v12);
  return v9;
}

_QWORD *sub_1C5B111C0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5B11274(a1, v6);
  v8 = 0;
  sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5B11274(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *((_BYTE *)v15 + 8) = *(_BYTE *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C5B113A4(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 32 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 32 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C5B115B0((uint64_t *)a1, 2 * v4);
    v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = (37 * *a2) & v14;
      result = *(_QWORD *)a1 + 32 * v15;
      v16 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v18 = 1;
      while (v16 != -1)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -2;
        if (v19)
          v17 = result;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        result = *(_QWORD *)a1 + 32 * v15;
        v16 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
LABEL_45:
      if (v17)
        result = v17;
      goto LABEL_15;
    }
LABEL_44:
    result = 0;
    goto LABEL_15;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C5B115B0((uint64_t *)a1, v4);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a2) & v22;
      result = *(_QWORD *)a1 + 32 * v23;
      v24 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v25 = 1;
      while (v24 != -1)
      {
        if (v17)
          v26 = 0;
        else
          v26 = v24 == -2;
        if (v26)
          v17 = result;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        result = *(_QWORD *)a1 + 32 * v23;
        v24 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)result != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_DWORD *sub_1C5B115B0(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v14 = *((_DWORD *)a1 + 4);
          if (v14)
          {
            v15 = v14 - 1;
            v16 = (v14 - 1) & (37 * v13);
            v17 = *a1 + 32 * v16;
            v18 = *(_DWORD *)v17;
            if (v13 != *(_DWORD *)v17)
            {
              v19 = 0;
              v20 = 1;
              while (v18 != -1)
              {
                if (v19)
                  v21 = 0;
                else
                  v21 = v18 == -2;
                if (v21)
                  v19 = v17;
                v22 = v16 + v20++;
                v16 = v22 & v15;
                v17 = *a1 + 32 * v16;
                v18 = *(_DWORD *)v17;
                if (v13 == *(_DWORD *)v17)
                  goto LABEL_23;
              }
              if (v19)
                v17 = v19;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_23:
          *(_DWORD *)v17 = v13;
          v23 = *(_OWORD *)(v12 + 2);
          *(_QWORD *)(v17 + 24) = *((_QWORD *)v12 + 3);
          *(_OWORD *)(v17 + 8) = v23;
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 8;
      }
      while (v12 != &v4[8 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 32 * v24;
    do
    {
      *result = -1;
      result += 8;
      v25 -= 32;
    }
    while (v25);
  }
  return result;
}

void sub_1C5B1173C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  LODWORD(v12) = -1;
  BYTE4(v12) = 0;
  v1 = v15;
  *((_QWORD *)&v12 + 1) = 0;
  v13 = v15;
  v2 = 0x400000000;
  v14 = 0x400000000;
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v4 = &v13;
    v5 = 56 * v3;
    v6 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      *((_OWORD *)v6 - 1) = v12;
      *v6 = v6 + 2;
      v6[1] = v2;
      if ((_DWORD)v14)
      {
        v10 = v4;
        v11 = v6;
        v8 = v5;
        v9 = v1;
        v7 = v2;
        sub_1C4EA3168((uint64_t)v6, (uint64_t)v4);
        v5 = v8;
        v1 = v9;
        v2 = v7;
        v4 = v10;
        v6 = v11;
      }
      v6 += 7;
      v5 -= 56;
    }
    while (v5);
    if (v13 != v1)
      free(v13);
  }
}

_DWORD *sub_1C5B11828(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 24 * v5;
      do
      {
        *(_OWORD *)result = xmmword_1C8650FB0;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1C5B118C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = *(_QWORD *)a1 + 32;
    do
    {
      v4 = *(void **)(v3 - 16);
      if ((void *)v3 != v4)
        free(v4);
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

BOOL sub_1C5B119AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_DWORD *)a1 > 0xFFFFFFFD)
    return 1;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && (v3 = *(unsigned int *)(a1 + 24), (_DWORD)v3 == *(_DWORD *)(a2 + 24)))
  {
    return memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), 4 * v3) == 0;
  }
  else
  {
    return 0;
  }
}

void sub_1C5B11A1C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      do
      {
        v7 = (char *)*((_QWORD *)v6 - 2);
        if (v6 != v7)
          free(v7);
        v8 = v6 - 32;
        v6 -= 48;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C5B11A9C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  sub_1C5B118C4(a1);
  result = MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  v5 = *((unsigned int *)a2 + 4);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    result = (uint64_t)operator new(56 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = a2[1];
    if (*(_DWORD *)(a1 + 16))
    {
      v6 = result;
      v7 = 0;
      for (i = 48; ; i += 56)
      {
        v9 = v6 + i;
        v10 = *a2;
        v11 = *a2 + i;
        *(_OWORD *)(v9 - 48) = *(_OWORD *)(v11 - 48);
        v12 = (void *)(v6 + i - 16);
        *(_QWORD *)(v6 + i - 32) = v12;
        *(_QWORD *)(v9 - 24) = 0x400000000;
        v13 = *(_DWORD *)(v11 - 24);
        if (v13 && v6 != v10)
          break;
LABEL_12:
        v6 = *(_QWORD *)a1;
        v16 = *(_QWORD *)a1 + i - 48;
        v23 = -1;
        v24 = 0;
        v25 = 0;
        v26 = v28;
        v27 = 0x400000000;
        result = sub_1C5B119AC(v16, (uint64_t)&v23);
        if (!(_DWORD)result)
        {
          v17 = -2;
          v18 = 0;
          v19 = 0;
          v20 = &v22;
          v21 = 0x400000000;
          result = sub_1C5B119AC(v16, (uint64_t)&v17);
          if ((result & 1) == 0)
            *(_DWORD *)(v6 + i) = *(_DWORD *)(*a2 + i);
        }
        if (++v7 >= (unint64_t)*(unsigned int *)(a1 + 16))
          return result;
      }
      if (v13 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + i - 32, v6 + i - 16, *(unsigned int *)(v11 - 24), 4);
        v15 = *(unsigned int *)(v11 - 24);
        if (!(_DWORD)v15)
          goto LABEL_11;
        v12 = *(void **)(v6 + i - 32);
      }
      else
      {
        v15 = *(unsigned int *)(v11 - 24);
      }
      memcpy(v12, *(const void **)(v11 - 32), 4 * v15);
LABEL_11:
      *(_DWORD *)(v9 - 24) = v13;
      goto LABEL_12;
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

char *sub_1C5B11C78(char **a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;

  result = (char *)MEMORY[0x1CAA32FB4](*a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *((_DWORD *)a1 + 4) = v5;
  if ((_DWORD)v5)
  {
    result = (char *)operator new(24 * v5, (std::align_val_t)8uLL);
    *a1 = result;
    a1[1] = *(char **)(a2 + 8);
    if (*((_DWORD *)a1 + 4))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        *(_OWORD *)&result[v6] = *(_OWORD *)(*(_QWORD *)a2 + v6);
        result = *a1;
        v8 = &(*a1)[v6];
        v9 = *(_DWORD *)v8;
        v10 = *((_QWORD *)v8 + 1);
        if ((v9 != -1 || v10 != -4096) && (v9 != -2 || v10 != -8192))
          *(_DWORD *)&result[v6 + 16] = *(_DWORD *)(*(_QWORD *)a2 + v6 + 16);
        ++v7;
        v6 += 24;
      }
      while (v7 < *((unsigned int *)a1 + 4));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

_DWORD *sub_1C5B11D48(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 24 * v2;
      do
      {
        *v6 = xmmword_1C8650FB0;
        v6 = (_OWORD *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C5B11828(v1, v5);
  }
  return result;
}

_QWORD *sub_1C5B11DE8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5B111C0(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_1C5B11E50(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_9;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5B11EF8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5B11FB8((uint64_t)a1, v7);
  v9 = 0;
  sub_1C5B11E50((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5B11FB8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6314A30(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6314A30(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5B12130(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[4];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v4 = sub_1C5B12314(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, v13);
  v5 = v13[0];
  if ((v4 & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (4 * v6 + 4 >= 3 * v7)
    {
      v7 *= 2;
    }
    else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
      goto LABEL_4;
    }
    sub_1C5B125F0(a1, v7);
    v13[0] = 0;
    sub_1C5B12314(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, v13);
    v5 = v13[0];
LABEL_4:
    ++*(_DWORD *)(a1 + 8);
    LODWORD(v13[0]) = -1;
    BYTE4(v13[0]) = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v14;
    v13[3] = 0x400000000;
    if (!sub_1C5B119AC(v5, (uint64_t)v13))
      --*(_DWORD *)(a1 + 12);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    if (v5 == a2)
      goto LABEL_14;
    v8 = (void **)(v5 + 16);
    v9 = *(unsigned int *)(a2 + 24);
    v10 = *(unsigned int *)(v5 + 24);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*v8, *(const void **)(a2 + 16), 4 * v9);
      goto LABEL_13;
    }
    if (*(_DWORD *)(v5 + 28) < v9)
    {
      *(_DWORD *)(v5 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 16, v5 + 32, v9, 4);
    }
    else if ((_DWORD)v10)
    {
      memmove(*v8, *(const void **)(a2 + 16), 4 * v10);
LABEL_11:
      v11 = *(unsigned int *)(a2 + 24);
      if (v10 != v11)
        memcpy((char *)*v8 + 4 * v10, (const void *)(*(_QWORD *)(a2 + 16) + 4 * v10), 4 * v11 - 4 * v10);
LABEL_13:
      *(_DWORD *)(v5 + 24) = v9;
LABEL_14:
      *(_DWORD *)(v5 + 48) = 0;
      return v5;
    }
    v10 = 0;
    goto LABEL_11;
  }
  return v5;
}

uint64_t sub_1C5B12314(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[16];
  int v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _OWORD v35[4];
  char v36[48];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v29 = -1;
    v30 = 0;
    v31 = 0;
    v32 = v34;
    v33 = 0x400000000;
    v23 = -2;
    v24 = 0;
    v25 = 0;
    v26 = v28;
    v8 = (uint64_t *)(a3 + 8);
    v9 = *(_QWORD **)(a3 + 16);
    v10 = (uint64_t)v9 + 4 * *(unsigned int *)(a3 + 24);
    v27 = 0x400000000;
    v22 = sub_1C4F5AB38(v9, v10);
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    memset(v35, 0, sizeof(v35));
    v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v19 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v19;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v38 = qword_1ED7EAC80;
    LODWORD(v35[0]) = *(_DWORD *)a3;
    v12 = a2 - 1;
    v13 = (a2 - 1) & sub_1C5B12578((char *)v35, 0, (_OWORD *)((char *)v35 + 4), v36, v8, (uint64_t *)&v22);
    v14 = a1 + 56 * v13;
    if (sub_1C5B119AC(a3, v14))
    {
      v15 = 1;
    }
    else
    {
      v21 = 0;
      v20 = 1;
      v15 = 1;
      while (!sub_1C5B119AC(v14, (uint64_t)&v29))
      {
        v17 = sub_1C5B119AC(v14, (uint64_t)&v23);
        v18 = v21;
        if (v17 && v21 == 0)
          v18 = v14;
        v21 = v18;
        v13 = (v13 + v20) & v12;
        v14 = a1 + 56 * v13;
        ++v20;
        if (sub_1C5B119AC(a3, v14))
          goto LABEL_5;
      }
      v15 = 0;
      if (v21)
        v14 = v21;
    }
LABEL_5:
    *a4 = v14;
    if (v26 != v28)
      free(v26);
    if (v32 != v34)
      free(v32);
  }
  else
  {
    v15 = 0;
    *a4 = 0;
  }
  return v15;
}

unint64_t sub_1C5B12578(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C50FDB34(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C4E37644(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

void sub_1C5B125F0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  int v23;
  char v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[16];
  int v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(56 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C5B1173C(a1);
    v29 = -1;
    v30 = 0;
    v31 = 0;
    v32 = v34;
    v33 = 0x400000000;
    v23 = -2;
    v24 = 0;
    v25 = 0;
    v26 = v28;
    v27 = 0x400000000;
    if (!(_DWORD)v3)
      goto LABEL_33;
    v9 = (unsigned int *)(v4 + 24);
    v10 = 56 * v3;
    v11 = v4;
    while (1)
    {
      v12 = v9 - 6;
      if (sub_1C5B119AC((uint64_t)(v9 - 6), (uint64_t)&v29) || sub_1C5B119AC((uint64_t)(v9 - 6), (uint64_t)&v23))
        goto LABEL_20;
      v22 = 0;
      sub_1C5B12314(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)(v9 - 6), (uint64_t *)&v22);
      v13 = v22;
      *(_OWORD *)v22 = *(_OWORD *)v12;
      if (v12 != v13)
        break;
LABEL_19:
      v13[12] = v9[6];
      ++*(_DWORD *)(a1 + 8);
LABEL_20:
      v20 = (unsigned int *)*((_QWORD *)v9 - 1);
      if (v9 + 2 != v20)
        free(v20);
      v11 += 56;
      v9 += 14;
      v10 -= 56;
      if (!v10)
      {
        if (v26 != v28)
          free(v26);
LABEL_33:
        if (v32 != v34)
          free(v32);
        JUMPOUT(0x1CAA32FB4);
      }
    }
    v14 = (unsigned int *)*((_QWORD *)v9 - 1);
    if (v9 + 2 != v14)
    {
      v21 = (unsigned int *)*((_QWORD *)v13 + 2);
      if (v21 != v13 + 8)
      {
        free(v21);
        v14 = (unsigned int *)*((_QWORD *)v9 - 1);
      }
      *((_QWORD *)v13 + 2) = v14;
      v19 = (_DWORD *)(v11 + 24);
      *((_QWORD *)v13 + 3) = *(_QWORD *)v9;
      *((_QWORD *)v9 - 1) = v9 + 2;
      v9[1] = 0;
      goto LABEL_18;
    }
    v15 = (void **)(v13 + 4);
    v16 = *v9;
    v17 = v13[6];
    if (v17 >= v16)
    {
      if ((_DWORD)v16)
        memmove(*v15, v14, 4 * v16);
      goto LABEL_17;
    }
    if (v13[7] < v16)
    {
      v13[6] = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v13 + 4), (uint64_t)(v13 + 8), v16, 4);
    }
    else if ((_DWORD)v17)
    {
      memmove(*v15, v14, 4 * v17);
LABEL_15:
      v18 = *v9;
      if (v17 != v18)
        memcpy((char *)*v15 + 4 * v17, (const void *)(*((_QWORD *)v9 - 1) + 4 * v17), 4 * v18 - 4 * v17);
LABEL_17:
      v13[6] = v16;
      v19 = v9;
LABEL_18:
      *v19 = 0;
      goto LABEL_19;
    }
    v17 = 0;
    goto LABEL_15;
  }
  sub_1C5B1173C(a1);
}

uint64_t sub_1C5B128E8(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int *v10;
  int v11;
  uint64_t v12;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v18;
  uint64_t result;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (int *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = *((_QWORD *)v10 + 1);
    if (*v10 == a3 && v12 == a4)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -1 || v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16 && v11 == -2)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (int *)(a1 + 24 * (v18 & v8));
        v11 = *v10;
        v12 = *((_QWORD *)v10 + 1);
        if (*v10 == a3 && v12 == a4)
          goto LABEL_22;
      }
      result = 0;
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a5 = v10;
  return result;
}

_OWORD *sub_1C5B129D4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_1C8650FB0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4 + 8;
      do
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = *(_QWORD *)v13;
        if ((v14 != -1 || v15 != -4096) && (v14 != -2 || v15 != -8192))
        {
          v19 = 0;
          sub_1C5B128E8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v19);
          v16 = v19;
          *v19 = *(_DWORD *)(v13 - 8);
          *((_QWORD *)v16 + 1) = *(_QWORD *)v13;
          v16[4] = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 24 * v17;
    do
    {
      *result = xmmword_1C8650FB0;
      result = (_OWORD *)((char *)result + 24);
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C5B12B3C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5B12BE4(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5B12CA4((uint64_t)a1, v7);
  v9 = 0;
  sub_1C5B12B3C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5B12CA4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5B12E28(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5B12E28(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5B12E28(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5B12B3C((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C5B12EEC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5B12F9C(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 9;
      goto LABEL_8;
    }
    v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_10:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[2 * v2];
      do
      {
LABEL_8:
        *v3 = -4096;
        v3 += 2;
      }
      while (v3 != v4);
      v5 = *(_DWORD *)result & 1;
      goto LABEL_10;
    }
    return sub_1C5B13018(result);
  }
  return result;
}

_QWORD *sub_1C5B13018(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 9;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_1C627BA90(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C627BA90(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[2 * v5];
  do
  {
LABEL_10:
    *v6 = -4096;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

uint64_t sub_1C5B130DC()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;
  int v5;

  LOBYTE(v5) = 1;
  v1.n128_u64[0] = (unint64_t)&v5;
  LODWORD(v4) = 1;
  sub_1C6314414((char **)&v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81C9D8, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C63144E8((char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED81CA98, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C6314598((char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED81CB58, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C6314648((char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED81CC18, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C63146F8((char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED835C10, &dword_1C475E000);
  v5 = 1;
  v2 = 1;
  v3 = 100;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Max number of dependences to attempt Load PRE (default = 100)";
  v1.n128_u64[1] = 61;
  sub_1C63147A8(&v5, &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81CCD8, &dword_1C475E000);
  v5 = 1;
  v2 = 1;
  v3 = 600;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Max number of blocks we're willing to speculate on (and recurse into) when deducing"
                                     " if a value is fully available or not in GVN (default = 600)";
  v1.n128_u64[1] = 143;
  sub_1C63148EC(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81CD98, &dword_1C475E000);
}

uint64_t llvm::GVNHoist::run(llvm::GVNHoist *this, llvm::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  const void *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  const void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char i;
  unint64_t v29;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  _BYTE v39[64];
  char *v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  _BYTE v48[64];
  void *__p;
  char *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  void *v57;
  _BYTE *v58;
  void *v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  void *v64;
  _BYTE *v65;

  *((_DWORD *)this + 144) = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 21) = *((_QWORD *)this + 23);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)this + 200);
  v4 = *((_QWORD *)a2 + 10);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  v43 = (_BYTE *)v5;
  sub_1C586DB8C((uint64_t *)&v43, (uint64_t)&v52);
  v6 = v48;
  v43 = v48;
  v7 = v53;
  if (v53 == v52)
  {
    v44 = v48;
    v8 = v53;
  }
  else
  {
    v31 = v54;
    v6 = malloc_type_malloc(8 * v54, 0x4065EBACuLL);
    if (!v6)
    {
      if (v31)
        goto LABEL_71;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_71;
    }
    v44 = v6;
    v8 = v52;
    v7 = v53;
  }
  v9 = v55;
  v45 = v54;
  if (v7 == v8)
    v10 = v55;
  else
    v10 = v54;
  if (v10)
  {
    memmove(v6, v7, 8 * v10);
    v9 = v55;
  }
  v46 = v9;
  v47 = v56;
  v50 = 0;
  v51 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v57, v58, (v58 - (_BYTE *)v57) >> 5);
  v11 = v39;
  v34 = v39;
  v12 = v60;
  if (v60 != v59)
  {
    v32 = v61;
    v11 = malloc_type_malloc(8 * v61, 0x4065EBACuLL);
    if (v11 || !v32 && (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v35 = v11;
      v13 = v59;
      v12 = v60;
      goto LABEL_13;
    }
LABEL_71:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v35 = v39;
  v13 = v60;
LABEL_13:
  v14 = v62;
  v36 = v61;
  if (v12 == v13)
    v15 = v62;
  else
    v15 = v61;
  if (v15)
  {
    memmove(v11, v12, 8 * v15);
    v14 = v62;
  }
  v37 = v14;
  v38 = v63;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  sub_1C4E19D7C(&v40, v64, v65, (v65 - (_BYTE *)v64) >> 5);
  v16 = 0;
  while (1)
  {
    if (v50 - (_BYTE *)__p != v41 - v40)
      goto LABEL_33;
    if (__p == v50)
      break;
    v17 = v40 + 16;
    v18 = (char *)__p + 16;
    while (1)
    {
      v19 = v18 - 16;
      if (*((_QWORD *)v18 - 2) != *((_QWORD *)v17 - 2))
        break;
      v20 = v17[8];
      if (v18[8])
        v21 = v20 == 0;
      else
        v21 = 1;
      if (v21)
      {
        if ((v18[8] == 0) == (v20 != 0))
          break;
      }
      else if (*(_DWORD *)v18 != *(_DWORD *)v17)
      {
        break;
      }
      v17 += 32;
      v18 += 32;
      if (v19 + 32 == v50)
        goto LABEL_39;
    }
LABEL_33:
    ++v16;
    v33 = *((_QWORD *)v50 - 4);
    v22 = v33;
    *((_DWORD *)sub_1C504CE94((uint64_t)this + 232, &v33) + 2) = v16;
    v23 = v22 + 40;
    v24 = *(_QWORD *)(v22 + 48);
    if (v24 != v23)
    {
      v25 = 1;
      do
      {
        v26 = v24 - 24;
        if (!v24)
          v26 = 0;
        v33 = v26;
        *((_DWORD *)sub_1C504CE94((uint64_t)this + 232, &v33) + 2) = v25;
        v24 = *(_QWORD *)(v24 + 8);
        ++v25;
      }
      while (v24 != v23);
    }
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v43);
  }
LABEL_39:
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v35 != v34)
    free(v35);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v44 != v43)
    free(v44);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v60 != v59)
    free(v60);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v53 != v52)
    free(v53);
  v27 = 0;
  for (i = 0; dword_1ED81D120 == -1 || ++v27 < dword_1ED81D120; i = 1)
  {
    v29 = llvm::GVNHoist::hoistExpressions(this, a2);
    if (!((_DWORD)v29 + HIDWORD(v29)))
      break;
    if (HIDWORD(v29))
      llvm::GVNPass::ValueTable::clear(this);
  }
  return i & 1;
}

unint64_t llvm::GVNHoist::hoistExpressions(llvm::GVNHoist *this, llvm::Function *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  llvm::Function *Function;
  llvm::Value *PersonalityFn;
  const llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  unint64_t v45;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  _BYTE v55[64];
  char *v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _BYTE v64[64];
  void *__p;
  char *v66;
  uint64_t v67;
  _QWORD v68[2];
  int v69;
  _QWORD v70[2];
  int v71;
  _QWORD v72[2];
  int v73;
  _QWORD v74[2];
  int v75;
  _QWORD v76[2];
  int v77;
  _QWORD v78[2];
  int v79;
  char v80[31];
  char *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  void *v86;
  _BYTE *v87;
  void *v88;
  void *__src;
  unsigned int v90;
  unsigned int v91;
  int v92;
  void *v93;
  _BYTE *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v78[0] = 0;
  v78[1] = 0;
  v79 = 0;
  v76[0] = 0;
  v76[1] = 0;
  v77 = 0;
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  v68[0] = 0;
  v68[1] = 0;
  v69 = 0;
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  v72[0] = 0;
  v72[1] = 0;
  v73 = 0;
  v3 = *((_QWORD *)a2 + 10);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v59 = (_BYTE *)v4;
  sub_1C586DB8C((uint64_t *)&v59, (uint64_t)&v81);
  v5 = v64;
  v59 = v64;
  v6 = (char *)v82;
  if ((char *)v82 == v81)
  {
    v60 = v64;
    v7 = (char *)v82;
  }
  else
  {
    v47 = v83;
    v5 = malloc_type_malloc(8 * v83, 0x4065EBACuLL);
    if (!v5)
    {
      if (v47)
        goto LABEL_127;
      v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v5)
        goto LABEL_127;
    }
    v60 = v5;
    v7 = v81;
    v6 = (char *)v82;
  }
  v8 = v84;
  v61 = v83;
  if (v6 == v7)
    v9 = v84;
  else
    v9 = v83;
  if (v9)
  {
    memmove(v5, v6, 8 * v9);
    v8 = v84;
  }
  v62 = v8;
  v63 = v85;
  v66 = 0;
  v67 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v86, v87, (v87 - (_BYTE *)v86) >> 5);
  v10 = v55;
  v50 = v55;
  v11 = __src;
  if (__src != v88)
  {
    v48 = v90;
    v10 = malloc_type_malloc(8 * v90, 0x4065EBACuLL);
    if (v10 || !v48 && (v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v51 = v10;
      v12 = v88;
      v11 = __src;
      goto LABEL_13;
    }
LABEL_127:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v51 = v55;
  v12 = __src;
LABEL_13:
  v13 = v91;
  v52 = v90;
  if (v11 == v12)
    v14 = v91;
  else
    v14 = v90;
  if (v14)
  {
    memmove(v10, v11, 8 * v14);
    v13 = v91;
  }
  v53 = v13;
  v54 = v92;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  sub_1C4E19D7C(&v56, v93, v94, (v94 - (_BYTE *)v93) >> 5);
  while (v66 - (_BYTE *)__p != v57 - v56)
  {
LABEL_33:
    v49 = 0;
    v49 = *((_QWORD *)v66 - 4);
    v20 = v49 + 40;
    v21 = *(_QWORD *)(v49 + 48);
    if (v21 == v49 + 40)
      goto LABEL_100;
    v22 = 0;
    while (1)
    {
      if (v21)
        v23 = (unsigned __int8 *)(v21 - 24);
      else
        v23 = 0;
      v24 = v23[16];
      if (v24 == 29 || v24 == 35)
      {
LABEL_99:
        sub_1C614F72C((uint64_t)this + 280, &v49, (uint64_t)v80);
        goto LABEL_100;
      }
      if (v24 == 80)
      {
        Function = (llvm::Function *)llvm::Instruction::getFunction((llvm::Instruction *)v23);
        PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(Function);
        if (llvm::classifyEHPersonality(PersonalityFn, v35) != 10)
          goto LABEL_99;
      }
      else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v23) & 1) != 0
             || (llvm::Instruction::willReturn((llvm::Instruction *)v23) & 1) == 0)
      {
        goto LABEL_99;
      }
      if (dword_1ED81D060 != -1)
      {
        if (v22 >= dword_1ED81D060)
          goto LABEL_100;
        ++v22;
      }
      v25 = v23[16];
      if ((v25 - 29) < 0xB)
        goto LABEL_100;
      if (v21 && v25 == 60)
      {
        sub_1C6315460((uint64_t)v76, (llvm::Instruction *)v23, this);
        goto LABEL_72;
      }
      if (v21 && v25 == 61)
      {
        sub_1C6315518((uint64_t)v74, (llvm::Instruction *)v23, this);
        goto LABEL_72;
      }
      if (v25 == 84)
        v26 = (uint64_t)v23;
      else
        v26 = 0;
      if (!v21 || v25 != 84)
      {
        if (v25 != 62 || *((_BYTE *)this + 580))
          sub_1C63156B8((uint64_t)v78, (llvm::Value *)v23, this);
        goto LABEL_72;
      }
      v27 = *(_QWORD *)(v26 - 32);
      if (!v27
        || *(_BYTE *)(v27 + 16)
        || *(_QWORD *)(v27 + 24) != *(_QWORD *)(v26 + 72)
        || (*(_BYTE *)(v27 + 33) & 0x20) == 0)
      {
        break;
      }
      v32 = *(_DWORD *)(*((_QWORD *)v23 - 4) + 36);
      if ((v32 > 0x3A || ((1 << v32) & 0x780000000000080) == 0) && v32 != 272)
        break;
LABEL_72:
      v21 = *(_QWORD *)(v21 + 8);
      if (v21 == v20)
        goto LABEL_100;
    }
    v28 = *(unsigned __int8 *)(v26 + 16) - 33;
    if (v28 > 0x37)
      goto LABEL_64;
    if (((1 << (*(_BYTE *)(v26 + 16) - 33)) & 0x808001D0000010) != 0)
      goto LABEL_100;
    if (((1 << (*(_BYTE *)(v26 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v28 == 27 && (*(_WORD *)(v26 + 18) & 0x301) != 0)
        goto LABEL_100;
LABEL_64:
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v26) & 1) != 0)
        goto LABEL_100;
      if (!llvm::Instruction::willReturn((llvm::Instruction *)v26))
        goto LABEL_100;
      v29 = *(_QWORD *)(v26 + 64);
      if (v29)
      {
        if ((*(_BYTE *)(v29 + 12) & 0x40) != 0)
          goto LABEL_100;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v26, 6) & 1) != 0)
        goto LABEL_100;
      sub_1C63155E4((uint64_t)v68, (llvm::Value *)v26, this);
      goto LABEL_72;
    }
    v30 = *(_QWORD *)(v26 + 64);
    if (v30 && (*(_BYTE *)(v30 + 17) & 0x30) != 0)
      goto LABEL_64;
    v31 = *(_DWORD *)(v26 + 20);
    if ((v31 & 0x80000000) == 0
      || (v36 = v26 - 32 * (v31 & 0x7FFFFFF), v39 = *(_QWORD *)(v36 - 8), v37 = v36 - 8, (v38 = v39) == 0))
    {
LABEL_80:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v26, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v26, 44))
      {
        goto LABEL_100;
      }
      goto LABEL_64;
    }
    v40 = -v38;
    while (1)
    {
      v41 = *(_DWORD *)(*(_QWORD *)(v37 + v40) + 8);
      v42 = v41 > 7;
      v43 = (1 << v41) & 0x83;
      if (v42 || v43 == 0)
        break;
      v40 += 16;
      if (!v40)
        goto LABEL_80;
    }
LABEL_100:
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v59);
  }
  if (__p != v66)
  {
    v15 = v56 + 16;
    v16 = (char *)__p + 16;
    do
    {
      v17 = v16 - 16;
      if (*((_QWORD *)v16 - 2) != *((_QWORD *)v15 - 2))
        goto LABEL_33;
      v18 = v15[8];
      if (v16[8])
        v19 = v18 == 0;
      else
        v19 = 1;
      if (v19)
      {
        if ((v16[8] == 0) == (v18 != 0))
          goto LABEL_33;
      }
      else if (*(_DWORD *)v16 != *(_DWORD *)v15)
      {
        goto LABEL_33;
      }
      v15 += 32;
      v16 += 32;
    }
    while (v17 + 32 != v66);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v51 != v50)
    free(v51);
  if (__p)
  {
    v66 = (char *)__p;
    operator delete(__p);
  }
  if (v60 != v59)
    free(v60);
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (__src != v88)
    free(__src);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if ((char *)v82 != v81)
    free((void *)v82);
  v81 = (char *)&v83;
  v82 = 0x400000000;
  sub_1C5B152B0((uint64_t *)this, (unsigned int *)v78, (uint64_t)&v81, 1);
  sub_1C5B152B0((uint64_t *)this, (unsigned int *)v76, (uint64_t)&v81, 2);
  sub_1C5B152B0((uint64_t *)this, (unsigned int *)v74, (uint64_t)&v81, 3);
  sub_1C5B152B0((uint64_t *)this, (unsigned int *)v68, (uint64_t)&v81, 1);
  sub_1C5B152B0((uint64_t *)this, (unsigned int *)v70, (uint64_t)&v81, 2);
  sub_1C5B152B0((uint64_t *)this, (unsigned int *)v72, (uint64_t)&v81, 3);
  v45 = llvm::GVNHoist::hoist((llvm::MemoryDependenceResults **)this, (uint64_t *)&v81);
  sub_1C627C47C(&v81);
  sub_1C6316140(v68);
  sub_1C631619C((uint64_t)v74);
  MEMORY[0x1CAA32FB4](v74[0], 8);
  sub_1C631619C((uint64_t)v76);
  MEMORY[0x1CAA32FB4](v76[0], 8);
  sub_1C631619C((uint64_t)v78);
  MEMORY[0x1CAA32FB4](v78[0], 8);
  return v45;
}

uint64_t llvm::GVNHoist::rank(llvm::GVNHoist *this, const llvm::Value *a2)
{
  unsigned int v2;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  const llvm::Value *v8;
  int v9;
  int v10;
  int v11;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 == 5)
    return 2;
  if (v2 - 11 < 2)
    return 1;
  if (v2 < 0x15)
    return 0;
  if (v2 == 21)
    return (*((_DWORD *)a2 + 8) + 3);
  v4 = *((_DWORD *)this + 62);
  if (v4)
  {
    v5 = *((_QWORD *)this + 29);
    v6 = v4 - 1;
    v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = *(const llvm::Value **)(v5 + 16 * v7);
    if (v8 == a2)
    {
LABEL_14:
      v11 = *(_DWORD *)(v5 + 16 * v7 + 8);
      if (v11)
        return (v11 + *((_DWORD *)this + 144) + 4);
    }
    else
    {
      v9 = 1;
      while (v8 != (const llvm::Value *)-4096)
      {
        v10 = v7 + v9++;
        v7 = v10 & v6;
        v8 = *(const llvm::Value **)(v5 + 16 * v7);
        if (v8 == a2)
          goto LABEL_14;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::GVNHoist::hasMemoryUse(llvm::GVNHoist *this, const llvm::Instruction *a2, llvm::MemoryDef *a3, const llvm::BasicBlock *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const llvm::BasicBlock *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  const llvm::BasicBlock *v18;
  const llvm::BasicBlock *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v7 = *((_QWORD *)this + 27);
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(unsigned int *)(v7 + 64);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    v11 = v8 + 16 * v10;
    v12 = *(const llvm::BasicBlock **)v11;
    if (*(const llvm::BasicBlock **)v11 == a4)
      goto LABEL_8;
    v13 = 1;
    while (v12 != (const llvm::BasicBlock *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(const llvm::BasicBlock **)(v8 + 16 * v10);
      if (v12 == a4)
      {
        v11 = v8 + 16 * v10;
        goto LABEL_8;
      }
    }
  }
  v11 = v8 + 16 * v9;
LABEL_8:
  if (v11 == v8 + 16 * v9)
    return 0;
  v15 = *(_QWORD *)(v11 + 8);
  if (!v15)
    return 0;
  v16 = *(_QWORD *)(v15 + 8);
  if (v16 == v15)
    return 0;
  v17 = 0;
  v25 = *((_QWORD *)a3 + 9);
  v18 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v19 = *(const llvm::BasicBlock **)(v25 + 40);
  while (1)
  {
    v20 = v16 - 32;
    if (!v16)
      v20 = 0;
    v21 = *(unsigned __int8 *)(v20 + 16);
    if (v21 == 25)
      v22 = v20;
    else
      v22 = 0;
    if (!v16 || v21 != 25)
      goto LABEL_22;
    v23 = *(_QWORD *)(v22 + 72);
    if (v19 == a4 && sub_1C6314C1C((uint64_t)this, v25, *(_QWORD *)(v22 + 72)))
      return 0;
    if (!((v18 != a4) | v17 & 1))
    {
      if (sub_1C6314C1C((uint64_t)this, v23, (uint64_t)a2))
      {
        v17 = 0;
        goto LABEL_22;
      }
      v17 = 1;
    }
    if ((llvm::MemorySSAUtil::defClobbersUseOrDef((uint64_t)a3, v22, *((llvm::AAResults **)this + 25)) & 1) != 0)
      return 1;
LABEL_22:
    v16 = *(_QWORD *)(v16 + 8);
    if (v16 == v15)
      return 0;
  }
}

uint64_t llvm::GVNHoist::hasEHOrLoadsOnPath(llvm::GVNHoist *this, const llvm::Instruction *a2, llvm::MemoryDef *a3, int *a4)
{
  const llvm::BasicBlock **v8;
  const llvm::BasicBlock **v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v15;
  const llvm::BasicBlock **v16;
  void *v18;
  void *v19;
  void *v20;
  _BYTE *v21;
  void *v22;
  void *v23;
  void *__p;
  char *v25;

  v8 = (const llvm::BasicBlock **)*((_QWORD *)a2 + 5);
  v9 = (const llvm::BasicBlock **)*((_QWORD *)a3 + 8);
  sub_1C6314D18((uint64_t)&v22, (uint64_t)v9);
  sub_1C6314D9C((const void **)&v18);
  while (1)
  {
    while (1)
    {
      if (v25 - (_BYTE *)__p == v21 - (_BYTE *)v20)
      {
        if (__p == v25)
        {
LABEL_23:
          if (v20)
          {
            v21 = v20;
            operator delete(v20);
          }
          if (v19 != v18)
            free(v19);
          if (__p)
          {
            v25 = (char *)__p;
            operator delete(__p);
          }
          if (v23 != v22)
            free(v23);
          return 0;
        }
        v10 = (char *)v20 + 8;
        v11 = (char *)__p + 8;
        while (1)
        {
          v12 = v11 - 8;
          if (*((_QWORD *)v11 - 1) != *((_QWORD *)v10 - 1))
            break;
          v13 = v10[8];
          if (v11[8])
            v14 = v13 == 0;
          else
            v14 = 1;
          if (v14)
          {
            if ((v11[8] == 0) == (v13 != 0))
              break;
          }
          else if (*(_QWORD *)v11 != *(_QWORD *)v10)
          {
            break;
          }
          v10 += 24;
          v11 += 24;
          if (v12 + 24 == v25)
            goto LABEL_23;
        }
      }
      v15 = v25 - 24;
      v16 = (const llvm::BasicBlock **)*((_QWORD *)v25 - 3);
      if (v16 != v8)
        break;
      v25 -= 24;
      if (__p != v15)
        goto LABEL_18;
    }
    if (llvm::GVNHoist::hasEHhelper(this, v16, v9, a4)
      || (llvm::GVNHoist::hasMemoryUse(this, a2, a3, (const llvm::BasicBlock *)v16) & 1) != 0)
    {
      break;
    }
    if (*a4 != -1)
      --*a4;
LABEL_18:
    sub_1C56EEDD8((llvm::SmallPtrSetImplBase *)&v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v19 != v18)
    free(v19);
  if (__p)
  {
    v25 = (char *)__p;
    operator delete(__p);
  }
  if (v23 != v22)
    free(v23);
  return 1;
}

uint64_t llvm::GVNHoist::hasEHOnPath(llvm::GVNHoist *this, const llvm::BasicBlock *a2, const llvm::BasicBlock **a3, int *a4)
{
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  int v11;
  BOOL v12;
  const llvm::BasicBlock *v13;
  char *v14;
  uint64_t v15;
  void *v17;
  void *v18;
  char *v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  void *__p;
  char *v24;

  sub_1C6314D18((uint64_t)&v21, (uint64_t)a3);
  sub_1C6314D9C((const void **)&v17);
  while (1)
  {
    while (1)
    {
      v8 = v19;
      if (v24 - (_BYTE *)__p == v20 - v19)
      {
        if (__p == v24)
        {
LABEL_22:
          v15 = 0;
          if (!v19)
            goto LABEL_24;
          goto LABEL_23;
        }
        v9 = 0;
        while (1)
        {
          v10 = (char *)__p + v9;
          if (*(_QWORD *)((char *)__p + v9) != *(_QWORD *)&v19[v9])
            break;
          v11 = v19[v9 + 16];
          if (v10[16])
            v12 = v11 == 0;
          else
            v12 = 1;
          if (v12)
          {
            if ((v10[16] == 0) == (v11 != 0))
              break;
          }
          else if (*(_QWORD *)((char *)__p + v9 + 8) != *(_QWORD *)&v19[v9 + 8])
          {
            break;
          }
          v9 += 24;
          if (v10 + 24 == v24)
            goto LABEL_22;
        }
      }
      v14 = v24 - 24;
      v13 = (const llvm::BasicBlock *)*((_QWORD *)v24 - 3);
      if (v13 != a2)
        break;
      v24 -= 24;
      if (__p != v14)
        goto LABEL_18;
    }
    if (llvm::GVNHoist::hasEHhelper(this, (const llvm::BasicBlock **)v13, a3, a4))
      break;
    if (*a4 != -1)
      --*a4;
LABEL_18:
    sub_1C56EEDD8((llvm::SmallPtrSetImplBase *)&v21);
  }
  v15 = 1;
  v8 = v19;
  if (v19)
  {
LABEL_23:
    v20 = v8;
    operator delete(v8);
  }
LABEL_24:
  if (v18 != v17)
    free(v18);
  if (__p)
  {
    v24 = (char *)__p;
    operator delete(__p);
  }
  if (v22 != v21)
    free(v22);
  return v15;
}

BOOL llvm::GVNHoist::safeToHoistLdSt(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  const llvm::BasicBlock *v11;
  const llvm::BasicBlock **v12;
  const llvm::BasicBlock *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;

  if (a2 == (uint64_t *)a3)
    return 1;
  v11 = (const llvm::BasicBlock *)a2[5];
  v12 = *(const llvm::BasicBlock ***)(a3 + 40);
  v13 = *(const llvm::BasicBlock **)(a4 + 64);
  if (*(_BYTE *)(a4 + 16) == 25)
    v14 = a4;
  else
    v14 = 0;
  if (v14)
    v15 = (uint64_t *)(v14 - 32);
  else
    v15 = (uint64_t *)(a4 - 64);
  v16 = *v15;
  v17 = *(_QWORD *)(*v15 + 64);
  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(a1[23], a2[5], v17))
    return 0;
  if (v11 != (const llvm::BasicBlock *)v17
    || *(_QWORD *)(a1[27] + 96) == v16
    || *(unsigned __int8 *)(v16 + 16) - 27 < 0xFFFFFFFE
    || (result = sub_1C6314C1C((uint64_t)a1, *(_QWORD *)(v16 + 72), (uint64_t)a2)))
  {
    if (a5 == 3)
    {
      if ((llvm::GVNHoist::hasEHOrLoadsOnPath((llvm::GVNHoist *)a1, (const llvm::Instruction *)a2, (llvm::MemoryDef *)a4, a6) & 1) == 0)goto LABEL_18;
    }
    else if ((llvm::GVNHoist::hasEHOnPath((llvm::GVNHoist *)a1, v11, v12, a6) & 1) == 0)
    {
LABEL_18:
      if (v13 == v11)
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(a1[23], v17, (uint64_t)v11);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::GVNHoist::valueAnticipable(int a1, uint64_t a2, uint64_t a3, llvm::Instruction *this)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = a2;
  v7 = *((unsigned __int8 *)this + 16);
  if (v7 != 30)
    __asm { BR              X11 }
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 3)
    v8 = 2;
  else
    v8 = 1;
  if (v8 > ((unint64_t)(a3 - a2) >> 5))
    return 0;
  if (a2 == a3)
    return 1;
  do
  {
    v10 = *(_QWORD *)(v6 + 16);
    v11 = *((unsigned __int8 *)this + 16);
    if (v11 != 30)
      __asm { BR              X9 }
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 3)
      v12 = 2;
    else
      v12 = 1;
    v13 = 0;
    while (llvm::Instruction::getSuccessor(this, v13) != v10)
    {
      if (v12 == ++v13)
        return 0;
    }
    v6 += 32;
    result = 1;
  }
  while (v6 != a3);
  return result;
}

void sub_1C5B145AC()
{
  JUMPOUT(0x1C5B1448CLL);
}

void sub_1C5B145BC()
{
  JUMPOUT(0x1C5B1448CLL);
}

void sub_1C5B145CC()
{
  JUMPOUT(0x1C5B1448CLL);
}

void sub_1C5B145D8()
{
  JUMPOUT(0x1C5B1448CLL);
}

void sub_1C5B145E0()
{
  JUMPOUT(0x1C5B1448CLL);
}

uint64_t llvm::GVNHoist::fillRenameStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = sub_1C61A4EFC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), a2, &v14);
  if ((_DWORD)result)
    v7 = v14 == *(_QWORD *)a3 + 72 * *(unsigned int *)(a3 + 16);
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(unsigned int *)(v14 + 16);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(v14 + 8);
      v10 = 24 * v8;
      do
      {
        result = sub_1C631681C(a4, v9 + v10 - 24);
        v11 = result;
        v12 = *(_QWORD *)(v9 + v10 - 8);
        v13 = *(unsigned int *)(result + 24);
        if (v13 >= *(unsigned int *)(result + 28))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result + 16, result + 32, v13 + 1, 8);
          v13 = *(unsigned int *)(v11 + 24);
        }
        *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8 * v13) = v12;
        ++*(_DWORD *)(v11 + 24);
        v10 -= 24;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t llvm::GVNHoist::fillChiArgs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v28;
  BOOL v29;
  uint64_t v31;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v8 = result;
    while (1)
    {
      v9 = *(_QWORD *)(v4 + 24);
      v10 = *(unsigned __int8 *)(v9 + 16);
      v11 = v9 && v10 >= 0x1C;
      if (v11 && v10 - 29 < 0xB)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        return result;
    }
LABEL_13:
    v13 = *(_QWORD *)(v9 + 40);
    v31 = 0;
    result = sub_1C61DE1A0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v13, &v31);
    v14 = v31;
    if ((_DWORD)result)
      v15 = v31 == *(_QWORD *)a3 + 88 * *(unsigned int *)(a3 + 16);
    else
      v15 = 1;
    if (!v15)
    {
      v16 = *(unsigned int *)(v31 + 16);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(v31 + 8);
        v18 = v17 + 32 * v16;
        do
        {
          if (*(_QWORD *)(v17 + 16))
          {
            v17 += 32;
          }
          else
          {
            v31 = 0;
            result = sub_1C63168A0(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), *(_DWORD *)v17, *(_QWORD *)(v17 + 8), &v31);
            v19 = v31;
            if ((_DWORD)result)
              v20 = v31 == *(_QWORD *)a4 + 48 * *(unsigned int *)(a4 + 16);
            else
              v20 = 1;
            if (!v20)
            {
              v21 = *(unsigned int *)(v31 + 24);
              if ((_DWORD)v21)
              {
                result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v8 + 184), v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 16) + 8 * v21 - 8) + 40));
                if ((_DWORD)result)
                {
                  *(_QWORD *)(v17 + 16) = a2;
                  v22 = *(unsigned int *)(v19 + 24);
                  v23 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * v22 - 8);
                  *(_DWORD *)(v19 + 24) = v22 - 1;
                  *(_QWORD *)(v17 + 24) = v23;
                }
              }
            }
            v24 = *(_QWORD *)(v14 + 8) + 32 * *(unsigned int *)(v14 + 16);
            if (v17 != v24)
            {
              v25 = *(_DWORD *)v17;
              v26 = *(_QWORD *)(v17 + 8);
              do
              {
                if (*(_DWORD *)v17 != v25 || *(_QWORD *)(v17 + 8) != v26)
                  goto LABEL_21;
                v17 += 32;
              }
              while (v17 != v24);
              v17 = *(_QWORD *)(v14 + 8) + 32 * *(unsigned int *)(v14 + 16);
            }
          }
LABEL_21:
          ;
        }
        while (v17 != v18);
      }
    }
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        break;
      v9 = *(_QWORD *)(v4 + 24);
      v28 = *(unsigned __int8 *)(v9 + 16);
      if (v9)
        v29 = v28 >= 0x1C;
      else
        v29 = 0;
      if (v29 && v28 - 29 < 0xB)
        goto LABEL_13;
    }
  }
  return result;
}

void llvm::GVNHoist::findHoistableCandidates(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __n128 a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const std::nothrow_t *v10;
  llvm::BasicBlock *v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  __n128 *v15;
  BOOL v16;
  __n128 *v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  llvm::Instruction *v45;
  llvm::BasicBlock *v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[32];
  void *v50;
  uint64_t v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)a2 + 88 * v5;
  if (*(_DWORD *)(a2 + 8))
  {
    if (v5)
    {
      v7 = 88 * v5;
      v8 = *(_QWORD *)a2;
      while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 88;
        v7 -= 88;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(_QWORD *)a2;
    }
  }
  else
  {
LABEL_6:
    v8 = *(_QWORD *)a2 + 88 * v5;
  }
  v42 = *(_QWORD *)a2 + 88 * v5;
  if (v8 != v42)
  {
    v9 = v52;
    v10 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    do
    {
      v11 = *(llvm::BasicBlock **)v8;
      v12 = *(__n128 **)(v8 + 8);
      v13 = *(unsigned int *)(v8 + 16);
      if ((_DWORD)v13)
      {
        v14 = *(unsigned int *)(v8 + 16);
        while (1)
        {
          v15 = (__n128 *)operator new(32 * v14, v10);
          if (v15)
            break;
          v16 = v14 > 1;
          v14 >>= 1;
          if (!v16)
            goto LABEL_14;
        }
        v17 = v15;
        sub_1C5B1742C(v12, &v12[2 * v13], v13, v15, v14, a5);
        operator delete(v17);
      }
      else
      {
LABEL_14:
        a5 = sub_1C5B1742C(v12, &v12[2 * v13], v13, 0, 0, a5);
      }
      v18 = (_QWORD *)*((_QWORD *)v11 + 5);
      if (v18 == (_QWORD *)((char *)v11 + 40))
      {
        v45 = 0;
      }
      else
      {
        if (v18)
          v19 = (unsigned __int8 *)(v18 - 3);
        else
          v19 = 0;
        if (v19[16] - 29 >= 0xB)
          v19 = 0;
        v45 = (llvm::Instruction *)v19;
      }
      v20 = *(unsigned int *)(v8 + 16);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = *(_QWORD *)(v8 + 8);
        v23 = v22 + 32 * v20;
        v24 = 32 * v20;
        while (*(_DWORD *)(v22 + v21) == *(_DWORD *)v22 && *(_QWORD *)(v22 + v21 + 8) == *(_QWORD *)(v22 + 8))
        {
          v21 += 32;
          if (v24 == v21)
            goto LABEL_32;
        }
        v23 = v22 + v21;
LABEL_32:
        while (v22 != v23)
        {
          v26 = (_OWORD *)v22;
          v22 = v23;
          v27 = v9;
          v50 = v9;
          v51 = 0x200000000;
          v28 = llvm::GVNHoist::checkSafety(a1, v26, (_OWORD *)v23, v11, a3, (uint64_t)&v50);
          if (llvm::GVNHoist::valueAnticipable(v28, (uint64_t)v50, (uint64_t)v50 + 32 * v51, v45))
          {
            v46 = v11;
            v47 = v49;
            v48 = 0x400000000;
            sub_1C6314F84(a4, (unint64_t)&v46);
            if (v47 != v49)
              free(v47);
            if ((_DWORD)v51)
            {
              v31 = *(_QWORD *)a4 + 56 * *(unsigned int *)(a4 + 8);
              v32 = v31 - 48;
              v33 = v31 - 32;
              v34 = *(_DWORD *)(v31 - 40);
              v35 = 32 * v51;
              v36 = (uint64_t *)((char *)v50 + 24);
              do
              {
                v37 = *v36;
                if (v34 >= *(_DWORD *)(v31 - 36))
                {
                  v39 = v33;
                  v40 = v32;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v32, v33, v34 + 1, 8);
                  v33 = v39;
                  v32 = v40;
                  v34 = *(_DWORD *)(v31 - 40);
                }
                *(_QWORD *)(*(_QWORD *)(v31 - 48) + 8 * v34) = v37;
                v34 = *(_DWORD *)(v31 - 40) + 1;
                *(_DWORD *)(v31 - 40) = v34;
                v36 += 4;
                v35 -= 32;
              }
              while (v35);
            }
          }
          v29 = *(_QWORD *)(v8 + 8) + 32 * *(unsigned int *)(v8 + 16);
          v23 = v22;
          v9 = v27;
          if (v22 != v29)
          {
            v23 = v22;
            while (*(_DWORD *)v23 == *(_DWORD *)v22 && *(_QWORD *)(v23 + 8) == *(_QWORD *)(v22 + 8))
            {
              v23 += 32;
              if (v23 == v29)
              {
                v23 = *(_QWORD *)(v8 + 8) + 32 * *(unsigned int *)(v8 + 16);
                break;
              }
            }
          }
          if (v50 != v27)
            free(v50);
        }
      }
      v38 = (_QWORD *)(v8 + 88);
      v8 = v6;
      if (v38 != (_QWORD *)v6)
      {
        while ((*v38 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v38 += 11;
          if (v38 == (_QWORD *)v6)
          {
            v8 = v6;
            goto LABEL_58;
          }
        }
        v8 = (uint64_t)v38;
      }
LABEL_58:
      ;
    }
    while (v8 != v42);
  }
}

BOOL llvm::GVNHoist::allOperandsAvailable(llvm::GVNHoist *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BOOL8 result;

  v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0)
  {
    v7 = (char *)*((_QWORD *)a2 - 1);
    v6 = v5 & 0x7FFFFFF;
    if (!v6)
      return 1;
  }
  else
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (char *)a2 - 32 * v6;
    if (!v6)
      return 1;
  }
  v8 = 32 * v6;
  while (1)
  {
    if (*(_QWORD *)v7 && *(unsigned __int8 *)(*(_QWORD *)v7 + 16) >= 0x1Cu)
    {
      result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 23), *(_QWORD *)(*(_QWORD *)v7 + 40), (uint64_t)a3);
      if (!result)
        break;
    }
    v7 += 32;
    v8 -= 32;
    if (!v8)
      return 1;
  }
  return result;
}

uint64_t llvm::GVNHoist::allGepOperandsAvailable(llvm::GVNHoist *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t result;

  v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) == 0)
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (char *)a2 - 32 * v6;
    if (!v6)
      return 1;
LABEL_5:
    v8 = 32 * v6;
    while (1)
    {
      v9 = *(_QWORD *)v7;
      if (*(_QWORD *)v7)
        v10 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16) >= 0x1Cu;
      else
        v10 = 0;
      if (v10
        && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 23), *(_QWORD *)(v9 + 40), (uint64_t)a3))
      {
        if (*(_BYTE *)(v9 + 16) != 62)
          return 0;
        result = llvm::GVNHoist::allGepOperandsAvailable(this, (const llvm::Instruction *)v9, a3);
        if (!(_DWORD)result)
          return result;
      }
      v7 += 32;
      v8 -= 32;
      if (!v8)
        return 1;
    }
  }
  v7 = (char *)*((_QWORD *)a2 - 1);
  v6 = v5 & 0x7FFFFFF;
  if (v6)
    goto LABEL_5;
  return 1;
}

void llvm::GVNHoist::makeGepsAvailable(uint64_t a1, llvm::User *a2, uint64_t a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::ValueSymbolTable *v30;

  llvm::Instruction::clone(a5);
  v11 = v10;
  v12 = *((_DWORD *)a5 + 5) & 0x7FFFFFF;
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 32 * v12;
    do
    {
      v15 = *((_DWORD *)a5 + 5);
      if ((v15 & 0x40000000) != 0)
        v16 = (_DWORD *)*((_QWORD *)a5 - 1);
      else
        v16 = (_DWORD *)((char *)a5 - 32 * (v15 & 0x7FFFFFF));
      v17 = *(_QWORD *)&v16[v13 / 4];
      if (v17)
        v18 = *(unsigned __int8 *)(v17 + 16) >= 0x1Cu;
      else
        v18 = 0;
      if (v18
        && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 184), *(_QWORD *)(v17 + 40), a3)
        && *(_BYTE *)(v17 + 16) == 62)
      {
        llvm::GVNHoist::makeGepsAvailable(a1, v11, a3, a4, v17);
      }
      v13 += 32;
    }
    while (v14 != v13);
  }
  v19 = *(_QWORD *)(a3 + 40);
  if (v19 == a3 + 40)
  {
    v21 = 0;
  }
  else
  {
    if (v19)
      v20 = v19 - 24;
    else
      v20 = 0;
    if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB)
      v21 = 0;
    else
      v21 = v20;
  }
  v22 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v11 + 40) = v22;
  *(_WORD *)(v22 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v11 + 23) & 0x10) != 0)
  {
    v29 = *(_QWORD *)(v22 + 56);
    if (v29)
    {
      v30 = *(llvm::ValueSymbolTable **)(v29 + 104);
      if (v30)
        llvm::ValueSymbolTable::reinsertValue(v30, (llvm::Value *)v11);
    }
  }
  v24 = *(_QWORD *)(v21 + 24);
  v23 = (_QWORD *)(v21 + 24);
  *(_QWORD *)(v11 + 32) = v23;
  *(_QWORD *)(v11 + 24) = v24;
  *(_QWORD *)(v24 + 8) = v11 + 24;
  *v23 = v11 + 24;
  llvm::Instruction::dropUnknownNonDebugMetadata((_QWORD **)v11, 0, 0);
  v25 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v25)
  {
    v26 = *(uint64_t **)a4;
    v27 = 8 * v25;
    do
    {
      v28 = *v26++;
      llvm::Instruction::andIRFlags(v11, *(_QWORD *)(v28 - 32));
      v27 -= 8;
    }
    while (v27);
  }
  llvm::User::replaceUsesOfWith(a2, a5, (llvm::Value *)v11);
}

void llvm::GVNHoist::updateAlignment(llvm::GVNHoist *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *((unsigned __int8 *)a3 + 16);
  if (a3 && v3 == 60 || a3 && v3 == 61)
  {
    v4 = *((unsigned __int16 *)a3 + 9);
    v5 = __clz(1 << (v4 >> 1)) ^ 0x3F;
    v6 = __clz(1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1)) ^ 0x3F;
    if (v6 < v5)
      LOWORD(v5) = v6;
    v7 = v4 & 0xFF81 | (2 * v5);
LABEL_8:
    *((_WORD *)a3 + 9) = v7;
    return;
  }
  if (a3 && v3 == 59)
  {
    v8 = *((_WORD *)a3 + 9);
    v9 = __clz(1 << v8) ^ 0x3F;
    v10 = __clz(1 << *((_WORD *)a2 + 9)) ^ 0x3F;
    if (v9 > v10)
      LOWORD(v10) = v9;
    v7 = v8 & 0xFFC0 | v10;
    goto LABEL_8;
  }
}

void llvm::GVNHoist::raMPHIuw(uint64_t a1, llvm::Value *a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  llvm::Value **v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];

  v4 = (unint64_t *)v25;
  v21 = (unint64_t *)v25;
  v22 = (unint64_t *)v25;
  v23 = 4;
  v24 = 0;
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    LODWORD(v6) = 0;
    v7 = 4;
    v8 = (unint64_t *)v25;
    do
    {
      v9 = *(_QWORD *)(v5 + 24);
      if (v9)
        v10 = *(_BYTE *)(v9 + 16) == 27;
      else
        v10 = 0;
      if (v10)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v21, v9);
        v4 = v21;
        v8 = v22;
        v7 = v23;
        LODWORD(v6) = HIDWORD(v23);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  else
  {
    LODWORD(v6) = 0;
    v7 = 4;
    v8 = (unint64_t *)v25;
  }
  if (v8 == v4)
    v6 = v6;
  else
    v6 = v7;
  v11 = v8;
  if ((_DWORD)v6)
  {
    v12 = 0;
    while (v8[v12] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v6 == ++v12)
        goto LABEL_36;
    }
    v11 = &v8[v12];
  }
  v13 = &v8[v6];
  if (v11 != v13)
  {
    v14 = (_DWORD *)*v11;
LABEL_23:
    v15 = v14[5];
    if ((v15 & 0x40000000) != 0)
    {
      v17 = (llvm::Value **)*((_QWORD *)v14 - 1);
      v16 = v15 & 0x7FFFFFF;
      if (!v16)
      {
LABEL_30:
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v14, a2, (llvm::Value *)1);
        llvm::MemorySSAUpdater::removeMemoryAccess(*(int32x2_t ***)(a1 + 224), (llvm::MemoryAccess *)v14, 0);
LABEL_31:
        v19 = v11 + 1;
        while (v19 != v13)
        {
          v20 = *v19++;
          v14 = (_DWORD *)v20;
          if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v11 = v19 - 1;
            goto LABEL_23;
          }
        }
        v4 = v21;
        v8 = v22;
        goto LABEL_36;
      }
    }
    else
    {
      v16 = v15 & 0x7FFFFFF;
      v17 = (llvm::Value **)&v14[-8 * v16];
      if (!v16)
        goto LABEL_30;
    }
    v18 = 32 * v16;
    while (*v17 == a2)
    {
      v17 += 4;
      v18 -= 32;
      if (!v18)
        goto LABEL_30;
    }
    goto LABEL_31;
  }
LABEL_36:
  if (v8 != v4)
    free(v8);
}

uint64_t llvm::GVNHoist::makeGepOperandsAvailable(llvm::GVNHoist *this, unsigned __int8 *a2, llvm::BasicBlock *a3, uint64_t a4)
{
  int v8;
  const llvm::Instruction *v9;
  const llvm::Instruction *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v8 = a2[16];
  if (a2 && v8 == 60)
  {
    v9 = (const llvm::Instruction *)*((_QWORD *)a2 - 4);
    if (*((_BYTE *)v9 + 16) == 62)
    {
      v10 = 0;
      goto LABEL_14;
    }
    return 0;
  }
  result = 0;
  if (!a2 || v8 != 61)
    return result;
  v10 = 0;
  v9 = (const llvm::Instruction *)*((_QWORD *)a2 - 4);
  v12 = *((unsigned __int8 *)v9 + 16);
  v13 = *((_QWORD *)a2 - 8);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 16);
    if (v14 >= 0x1C)
    {
      if (v14 == 62)
      {
        v10 = (const llvm::Instruction *)*((_QWORD *)a2 - 8);
        if ((llvm::GVNHoist::allGepOperandsAvailable(this, v10, a3) & 1) == 0)
          return 0;
      }
      else
      {
        result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 23), *(_QWORD *)(v13 + 40), (uint64_t)a3);
        v10 = (const llvm::Instruction *)v13;
        if (!(_DWORD)result)
          return result;
      }
    }
  }
  if (v12 != 62)
    return 0;
LABEL_14:
  result = llvm::GVNHoist::allGepOperandsAvailable(this, v9, a3);
  if ((_DWORD)result)
  {
    llvm::GVNHoist::makeGepsAvailable((uint64_t)this, (llvm::User *)a2, (uint64_t)a3, a4, v9);
    if (v10)
    {
      if (*((_BYTE *)v10 + 16) == 62)
        llvm::GVNHoist::makeGepsAvailable((uint64_t)this, (llvm::User *)a2, (uint64_t)a3, a4, v10);
    }
    return 1;
  }
  return result;
}

void sub_1C5B152B0(uint64_t *a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 *v32;
  uint64_t v33;
  char *v34;
  const llvm::BasicBlock **v35;
  int v36;
  unint64_t i;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  BOOL v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  __n128 *v53;
  __n128 *v54;
  __n128 v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  int v62;
  _BYTE *v63;
  const void *v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  _BYTE *v68;
  void *v69;
  void *v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unsigned int v88;
  unsigned int v89;
  _QWORD v93[2];
  unsigned int v94;
  _QWORD v95[2];
  unsigned int v96;
  uint64_t v97[2];
  char v98;
  _QWORD *v99;
  uint64_t v100[2];
  unsigned int v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[64];
  char *v106;
  char *v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  int v112;
  _BYTE v113[64];
  void *__p;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[16];
  void *v121;
  void *v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  void *v126;
  _BYTE *v127;
  void *v128;
  void *__src;
  unsigned int v130;
  unsigned int v131;
  int v132;
  void *v133;
  _BYTE *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = a2[4];
  v6 = *(_QWORD *)a2 + (v5 << 6);
  if (a2[2])
  {
    if ((_DWORD)v5)
    {
      v7 = v5 << 6;
      v8 = *(_QWORD *)a2;
      while (1)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if ((*(_DWORD *)v8 != -1 || v9 != -1) && (*(_DWORD *)v8 != -2 || v9 != -2))
          break;
        v8 += 64;
        v7 -= 64;
        if (!v7)
          goto LABEL_14;
      }
    }
    else
    {
      v8 = *(_QWORD *)a2;
    }
  }
  else
  {
LABEL_14:
    v8 = *(_QWORD *)a2 + (v5 << 6);
  }
  v12 = *(_QWORD *)a2 + ((unint64_t)v5 << 6);
  if (v8 == v12)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      if (v14 >= v15)
      {
        v16 = (v14 - v13) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          abort();
        if ((v15 - v13) >> 3 > v17)
          v17 = (v15 - v13) >> 3;
        if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          if (v18 >> 60)
            sub_1C4764EE4();
          v19 = (char *)operator new(16 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[16 * v16];
        *(_OWORD *)v20 = *(_OWORD *)v8;
        if (v14 == v13)
        {
          v22 = &v19[16 * v16];
        }
        else
        {
          v21 = &v19[16 * v16];
          do
          {
            v22 = v21 - 16;
            *((_OWORD *)v21 - 1) = *((_OWORD *)v14 - 1);
            v14 -= 16;
            v21 -= 16;
          }
          while (v14 != v13);
        }
        v15 = &v19[16 * v18];
        v14 = v20 + 16;
        if (v13)
          operator delete(v13);
        v13 = v22;
      }
      else
      {
        *(_OWORD *)v14 = *(_OWORD *)v8;
        v14 += 16;
      }
      v23 = v8 + 64;
      v8 = v6;
      if (v23 != v6)
      {
        v8 = v23;
        while (1)
        {
          v24 = *(_QWORD *)(v8 + 8);
          if ((*(_DWORD *)v8 != -1 || v24 != -1) && (*(_DWORD *)v8 != -2 || v24 != -2))
            break;
          v8 += 64;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
    }
    while (v8 != v12);
  }
  v27 = 126 - 2 * __clz((v14 - v13) >> 4);
  v28 = a2;
  v121 = a1;
  v122 = a2;
  if (v14 == v13)
    v29 = 0;
  else
    v29 = v27;
  sub_1C5B15F5C((uint64_t)v13, (unint64_t)v14, (uint64_t)&v121, v29, 1);
  v118 = v120;
  v30.n128_u64[0] = 0x200000000;
  v119 = 0x200000000;
  v31 = a1[24];
  v97[0] = v31;
  v97[1] = 0;
  v98 = 0;
  v95[0] = 0;
  v95[1] = 0;
  v96 = 0;
  v93[0] = 0;
  v93[1] = 0;
  v94 = 0;
  if (v14 != v13)
  {
    v32 = (__n128 *)v13;
    do
    {
      v30.n128_f64[0] = sub_1C6315B04(&v121, *(_QWORD *)v28, v28[4], v32->n128_u32[0], v32->n128_i64[1]);
      if (v122 >= 2)
      {
        v109 = v113;
        v110 = v113;
        v111 = 2;
        v112 = 0;
        v33 = 8 * v122;
        v34 = (char *)v121;
        do
        {
          v35 = *(const llvm::BasicBlock ***)(*(_QWORD *)v34 + 40);
          if (!llvm::GVNHoist::hasEH((llvm::GVNHoist *)a1, v35))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v109, (uint64_t)v35);
          v34 += 8;
          v33 -= 8;
        }
        while (v33);
        v99 = &v109;
        LODWORD(v119) = 0;
        sub_1C5AC7F60(v97, (uint64_t *)&v118);
        v36 = (int)v122;
        if ((_DWORD)v122)
        {
          for (i = 0; i < v122; ++i)
          {
            v100[0] = *(_QWORD *)(*((_QWORD *)v121 + i) + 40);
            v38 = sub_1C6315C94((uint64_t)v93, v100);
            v39 = (uint64_t)(v38 + 1);
            v40 = v38[1];
            v102 = *v32;
            v103 = *((_QWORD *)v121 + i);
            v41 = *((unsigned int *)v38 + 4);
            if (v41 >= *((_DWORD *)v38 + 5))
            {
              v45 = v41 + 1;
              v46 = v40 + 24 * v41 > (unint64_t)&v102;
              if (v40 <= (unint64_t)&v102 && v46)
              {
                v47 = (char *)&v102 - v40;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v39, (uint64_t)(v38 + 3), v45, 24);
                v40 = v38[1];
                v42 = &v47[v40];
                goto LABEL_68;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v39, (uint64_t)(v38 + 3), v45, 24);
              v40 = v38[1];
            }
            v42 = (char *)&v102;
LABEL_68:
            v43 = v40 + 24 * *((unsigned int *)v38 + 4);
            v44 = *(_OWORD *)v42;
            *(_QWORD *)(v43 + 16) = *((_QWORD *)v42 + 2);
            *(_OWORD *)v43 = v44;
            ++*((_DWORD *)v38 + 4);
            v36 = (int)v122;
          }
        }
        v30 = *v32;
        v102 = *v32;
        v103 = 0;
        v104 = 0;
        if ((_DWORD)v119)
        {
          v48 = (uint64_t *)v118;
          v49 = (uint64_t *)((char *)v118 + 8 * v119);
          do
          {
            v50 = *v48;
            v100[0] = *v48;
            if (v36)
            {
              v51 = 0;
              do
              {
                if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(a1[23], v50, *(_QWORD *)(*((_QWORD *)v121 + v51) + 40)))
                {
                  v52 = sub_1C6315EB0((uint64_t)v95, v100);
                  v53 = (__n128 *)sub_1C5B172F0((uint64_t)(v52 + 1), (unint64_t)&v102);
                  v54 = (__n128 *)(v52[1] + 32 * *((unsigned int *)v52 + 4));
                  v30 = *v53;
                  v55 = v53[1];
                  *v54 = *v53;
                  v54[1] = v55;
                  ++*((_DWORD *)v52 + 4);
                }
                ++v51;
                v36 = (int)v122;
              }
              while (v51 < v122);
            }
            ++v48;
          }
          while (v48 != v49);
        }
        if (v110 != v109)
          free(v110);
        v28 = a2;
      }
      if (v121 != &v123)
        free(v121);
      ++v32;
    }
    while (v32 != (__n128 *)v14);
    v31 = a1[24];
  }
  v56 = *(_QWORD **)(v31 + 48);
  v57 = *(unsigned int *)(v31 + 64);
  if (!(_DWORD)v57)
    goto LABEL_96;
  v58 = *v56;
  if (*v56)
  {
    LODWORD(v60) = 0;
    v61 = 1;
    while (v58 != -4096)
    {
      v62 = v60 + v61++;
      v60 = v62 & (v57 - 1);
      v58 = v56[2 * v60];
      if (!v58)
      {
        v59 = &v56[2 * v60];
        goto LABEL_97;
      }
    }
LABEL_96:
    v59 = &v56[2 * v57];
    goto LABEL_97;
  }
  v59 = v56;
LABEL_97:
  if (v59 == &v56[2 * v57])
    goto LABEL_147;
  v117 = v59[1];
  if (!v117)
    goto LABEL_147;
  sub_1C4EA1748(&v117, (uint64_t)&v121);
  v63 = v113;
  v109 = v113;
  v64 = v122;
  if (v122 == v121)
  {
    v110 = v113;
    v65 = v122;
  }
  else
  {
    v88 = v123;
    v63 = malloc_type_malloc(8 * v123, 0x4065EBACuLL);
    if (!v63)
    {
      if (v88)
        goto LABEL_175;
      v63 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v63)
        goto LABEL_175;
    }
    v110 = v63;
    v65 = v121;
    v64 = v122;
  }
  v66 = v124;
  LODWORD(v111) = v123;
  if (v64 == v65)
    v67 = v124;
  else
    v67 = v123;
  if (v67)
  {
    memmove(v63, v64, 8 * v67);
    v66 = v124;
  }
  HIDWORD(v111) = v66;
  v112 = v125;
  v115 = 0;
  v116 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v126, v127, 0xAAAAAAAAAAAAAAABLL * ((v127 - (_BYTE *)v126) >> 3));
  v68 = v105;
  v102.n128_u64[0] = (unint64_t)v105;
  v69 = __src;
  if (__src != v128)
  {
    v89 = v130;
    v68 = malloc_type_malloc(8 * v130, 0x4065EBACuLL);
    if (v68 || !v89 && (v68 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v102.n128_u64[1] = (unint64_t)v68;
      v70 = v128;
      v69 = __src;
      goto LABEL_108;
    }
LABEL_175:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v102.n128_u64[1] = (unint64_t)v105;
  v70 = __src;
LABEL_108:
  v71 = v131;
  LODWORD(v103) = v130;
  if (v69 == v70)
    v72 = v131;
  else
    v72 = v130;
  if (v72)
  {
    memmove(v68, v69, 8 * v72);
    v71 = v131;
  }
  HIDWORD(v103) = v71;
  LODWORD(v104) = v132;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_1C4D6CDA0(&v106, v133, v134, 0xAAAAAAAAAAAAAAABLL * ((v134 - (_BYTE *)v133) >> 3));
  while (1)
  {
    if (v115 - (_BYTE *)__p != v107 - v106)
      goto LABEL_128;
    if (__p == v115)
      break;
    v73 = v106 + 8;
    v74 = (char *)__p + 8;
    while (1)
    {
      v75 = v74 - 8;
      if (*((_QWORD *)v74 - 1) != *((_QWORD *)v73 - 1))
        break;
      v76 = v73[8];
      if (v74[8])
        v77 = v76 == 0;
      else
        v77 = 1;
      if (v77)
      {
        if ((v74[8] == 0) == (v76 != 0))
          break;
      }
      else if (*(_QWORD *)v74 != *(_QWORD *)v73)
      {
        break;
      }
      v73 += 24;
      v74 += 24;
      if (v75 + 24 == v115)
        goto LABEL_131;
    }
LABEL_128:
    v78 = **((_QWORD **)v115 - 3);
    if (v78)
    {
      v100[0] = 0;
      v100[1] = 0;
      v101 = 0;
      llvm::GVNHoist::fillRenameStack((uint64_t)v106, v78, (uint64_t)v93, (uint64_t)v100);
      llvm::GVNHoist::fillChiArgs((uint64_t)a1, v78, (uint64_t)v95, (uint64_t)v100);
      v79 = v100[0];
      sub_1C63160CC(v100[0], v101);
      MEMORY[0x1CAA32FB4](v79, 8);
    }
    sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)&v109);
  }
LABEL_131:
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (v102.n128_u64[1] != v102.n128_u64[0])
    free((void *)v102.n128_u64[1]);
  if (__p)
  {
    v115 = (char *)__p;
    operator delete(__p);
  }
  if (v110 != v109)
    free(v110);
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (__src != v128)
    free(__src);
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (v122 != v121)
    free(v122);
LABEL_147:
  llvm::GVNHoist::findHoistableCandidates((uint64_t)a1, (uint64_t)v95, a4, a3, v30);
  v80 = v93[0];
  if (v94)
  {
    v81 = 72 * v94;
    v82 = v93[0] + 24;
    do
    {
      if ((*(_QWORD *)(v82 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v83 = *(void **)(v82 - 16);
        if ((void *)v82 != v83)
          free(v83);
      }
      v82 += 72;
      v81 -= 72;
    }
    while (v81);
  }
  MEMORY[0x1CAA32FB4](v80, 8);
  v84 = v95[0];
  if (v96)
  {
    v85 = 88 * v96;
    v86 = v95[0] + 24;
    do
    {
      if ((*(_QWORD *)(v86 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v87 = *(void **)(v86 - 16);
        if ((void *)v86 != v87)
          free(v87);
      }
      v86 += 88;
      v85 -= 88;
    }
    while (v85);
  }
  MEMORY[0x1CAA32FB4](v84, 8);
  if (v118 != v120)
    free(v118);
  if (v13)
    operator delete(v13);
}

void llvm::GVNHoistPass::run(llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ResultImpl;
  char v11;
  _QWORD v12[74];

  v12[73] = *MEMORY[0x1E0C80C00];
  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::PostDominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, (uint64_t)a1) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::MemoryDependenceAnalysis::Key, (uint64_t)a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::MemorySSAAnalysis::Key, (uint64_t)a1);
  sub_1C6316214((uint64_t)v12, v6, v7, v8, v9, *(llvm::MemorySSA **)(ResultImpl + 8));
  v11 = llvm::GVNHoist::run((llvm::GVNHoist *)v12, a1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v11 & 1) != 0)
  {
    sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  sub_1C631630C((llvm::GVNPass::ValueTable *)v12);
}

uint64_t sub_1C5B15D70(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeMemoryDependenceWrapperPassPass(a1, a2);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Early GVN Hoisting of Expressions";
  *(_QWORD *)(v5 + 8) = 33;
  *(_QWORD *)(v5 + 16) = "gvn-hoist";
  *(_QWORD *)(v5 + 24) = 9;
  *(_QWORD *)(v5 + 32) = &llvm::GVNHoistLegacyPass::ID;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = llvm::callDefaultCtor<llvm::GVNHoistLegacyPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

_OWORD *sub_1C5B15E24(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63159F8(a1, v4, v4 + (v3 << 6));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    do
    {
      *result = xmmword_1C8668EC0;
      result += 4;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5B15EE0(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4 && ((*(unsigned __int8 *)(v4 + a2 / 8 + 12) >> (a2 & 7)) & 1) != 0)
    return 1;
  if (sub_1C4DA911C(a1, a2))
    return 0;
  return llvm::CallBase::hasFnAttrOnCalledFunction(a1, a2);
}

uint64_t sub_1C5B15F5C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  __int128 v81;

  v9 = result;
LABEL_2:
  v10 = a2 - 16;
  v76 = a2 - 48;
  v78 = a2 - 32;
  v11 = v9;
  v80 = a2;
  while (2)
  {
    v9 = v11;
    v12 = a2 - v11;
    v13 = (uint64_t)(a2 - v11) >> 4;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C6315B98(a3, *(_DWORD *)(a2 - 16), *(_QWORD *)(a2 - 8), v11);
        if ((_DWORD)result)
        {
          v74 = *(_DWORD *)v11;
          *(_DWORD *)v11 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v74;
          v75 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v75;
        }
        return result;
      case 3:
        return sub_1C5B16808(v11, v11 + 16, v10, a3);
      case 4:
        return sub_1C5B16B2C(v11, v11 + 16, v11 + 32, v10, a3);
      case 5:
        return sub_1C5B16C1C(v11, v11 + 16, v11 + 32, v11 + 48, v10, a3);
      default:
        if (v12 <= 383)
        {
          v36 = v11 + 16;
          v38 = v11 == a2 || v36 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v38)
            {
              v39 = 0;
              v40 = v11;
              do
              {
                v41 = v40;
                v40 = v36;
                result = sub_1C6315B98(a3, *(_DWORD *)(v41 + 16), *(_QWORD *)(v36 + 8), v41);
                if ((_DWORD)result)
                {
                  v42 = *(_DWORD *)v40;
                  v43 = *(_QWORD *)(v40 + 8);
                  v44 = v39;
                  while (1)
                  {
                    v45 = v11 + v44;
                    *(_DWORD *)(v45 + 16) = *(_DWORD *)(v11 + v44);
                    *(_QWORD *)(v45 + 24) = *(_QWORD *)(v11 + v44 + 8);
                    if (!v44)
                      break;
                    v44 -= 16;
                    result = sub_1C6315B98(a3, v42, v43, v44 + v11);
                    if ((result & 1) == 0)
                    {
                      v46 = v11 + v44 + 16;
                      goto LABEL_72;
                    }
                  }
                  v46 = v11;
LABEL_72:
                  *(_DWORD *)v46 = v42;
                  *(_QWORD *)(v46 + 8) = v43;
                }
                v36 = v40 + 16;
                v39 += 16;
              }
              while (v40 + 16 != a2);
            }
          }
          else if (!v38)
          {
            v69 = v11 - 16;
            do
            {
              v70 = v9;
              v9 = v36;
              result = sub_1C6315B98(a3, *(_DWORD *)(v70 + 16), *(_QWORD *)(v36 + 8), v70);
              if ((_DWORD)result)
              {
                v71 = *(_DWORD *)v9;
                v72 = *(_QWORD *)(v9 + 8);
                v73 = v69;
                do
                {
                  *(_DWORD *)(v73 + 32) = *(_DWORD *)(v73 + 16);
                  *(_QWORD *)(v73 + 40) = *(_QWORD *)(v73 + 24);
                  result = sub_1C6315B98(a3, v71, v72, v73);
                  v73 -= 16;
                }
                while ((result & 1) != 0);
                *(_DWORD *)(v73 + 32) = v71;
                *(_QWORD *)(v73 + 40) = v72;
              }
              v36 = v9 + 16;
              v69 += 16;
            }
            while (v9 + 16 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v47 = (unint64_t)(v13 - 2) >> 1;
            v48 = v47;
            do
            {
              v49 = v48;
              if (v47 >= v48)
              {
                v50 = (2 * v48) | 1;
                v51 = v9 + 16 * v50;
                if (2 * v48 + 2 < v13 && sub_1C6315B98(a3, *(_DWORD *)v51, *(_QWORD *)(v51 + 8), v51 + 16))
                {
                  v51 += 16;
                  v50 = 2 * v49 + 2;
                }
                v52 = v9 + 16 * v49;
                result = sub_1C6315B98(a3, *(_DWORD *)v51, *(_QWORD *)(v51 + 8), v52);
                a2 = v80;
                if ((result & 1) == 0)
                {
                  v81 = *(_OWORD *)v52;
                  do
                  {
                    v53 = v51;
                    *(_DWORD *)v52 = *(_DWORD *)v51;
                    *(_QWORD *)(v52 + 8) = *(_QWORD *)(v51 + 8);
                    if (v47 < v50)
                      break;
                    v54 = (2 * v50) | 1;
                    v51 = v9 + 16 * v54;
                    v55 = 2 * v50 + 2;
                    if (v55 < v13 && sub_1C6315B98(a3, *(_DWORD *)v51, *(_QWORD *)(v51 + 8), v51 + 16))
                    {
                      v51 += 16;
                      v54 = v55;
                    }
                    result = sub_1C6315B98(a3, *(_DWORD *)v51, *(_QWORD *)(v51 + 8), (uint64_t)&v81);
                    v52 = v53;
                    v50 = v54;
                  }
                  while (!(_DWORD)result);
                  *(_DWORD *)v53 = v81;
                  *(_QWORD *)(v53 + 8) = *((_QWORD *)&v81 + 1);
                  a2 = v80;
                }
              }
              v48 = v49 - 1;
            }
            while (v49);
            do
            {
              v56 = a2;
              v57 = 0;
              v79 = *(_DWORD *)v9;
              v77 = *(_QWORD *)(v9 + 8);
              v58 = v13 - 2;
              if (v13 < 2)
                v58 = v13 - 1;
              v59 = v58 >> 1;
              v60 = v9;
              do
              {
                v61 = v60 + 16 * v57 + 16;
                v62 = (2 * v57) | 1;
                v63 = 2 * v57 + 2;
                if (v63 < v13)
                {
                  result = sub_1C6315B98(a3, *(_DWORD *)v61, *(_QWORD *)(v60 + 16 * v57 + 24), v60 + 16 * v57 + 32);
                  if ((_DWORD)result)
                  {
                    v61 += 16;
                    v62 = v63;
                  }
                }
                *(_DWORD *)v60 = *(_DWORD *)v61;
                *(_QWORD *)(v60 + 8) = *(_QWORD *)(v61 + 8);
                v60 = v61;
                v57 = v62;
              }
              while (v62 <= v59);
              if (v61 == v56 - 16)
              {
                *(_DWORD *)v61 = v79;
                *(_QWORD *)(v61 + 8) = v77;
              }
              else
              {
                *(_DWORD *)v61 = *(_DWORD *)(v56 - 16);
                *(_QWORD *)(v61 + 8) = *(_QWORD *)(v56 - 8);
                *(_DWORD *)(v56 - 16) = v79;
                *(_QWORD *)(v56 - 8) = v77;
                v64 = v61 - v9 + 16;
                if (v64 >= 17)
                {
                  v65 = (((unint64_t)v64 >> 4) - 2) >> 1;
                  v66 = v9 + 16 * v65;
                  result = sub_1C6315B98(a3, *(_DWORD *)v66, *(_QWORD *)(v66 + 8), v61);
                  if ((_DWORD)result)
                  {
                    v81 = *(_OWORD *)v61;
                    do
                    {
                      v67 = v66;
                      *(_DWORD *)v61 = *(_DWORD *)v66;
                      *(_QWORD *)(v61 + 8) = *(_QWORD *)(v66 + 8);
                      if (!v65)
                        break;
                      v65 = (v65 - 1) >> 1;
                      v66 = v9 + 16 * v65;
                      result = sub_1C6315B98(a3, *(_DWORD *)v66, *(_QWORD *)(v66 + 8), (uint64_t)&v81);
                      v61 = v67;
                    }
                    while ((result & 1) != 0);
                    *(_DWORD *)v67 = v81;
                    *(_QWORD *)(v67 + 8) = *((_QWORD *)&v81 + 1);
                  }
                }
              }
              a2 = v56 - 16;
            }
            while (v13-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = v11 + 16 * ((unint64_t)v13 >> 1);
        if ((unint64_t)v12 < 0x801)
        {
          sub_1C5B16808(v9 + 16 * ((unint64_t)v13 >> 1), v9, v10, a3);
        }
        else
        {
          sub_1C5B16808(v9, v9 + 16 * ((unint64_t)v13 >> 1), v10, a3);
          sub_1C5B16808(v9 + 16, v15 - 16, v78, a3);
          sub_1C5B16808(v9 + 32, v9 + 16 + 16 * v14, v76, a3);
          sub_1C5B16808(v15 - 16, v9 + 16 * ((unint64_t)v13 >> 1), v9 + 16 + 16 * v14, a3);
          v16 = *(_DWORD *)v9;
          *(_DWORD *)v9 = *(_DWORD *)v15;
          *(_DWORD *)v15 = v16;
          v17 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = v17;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C6315B98(a3, *(_DWORD *)(v9 - 16), *(_QWORD *)(v9 - 8), v9))
        {
          v30 = *(_DWORD *)v9;
          v31 = *(_QWORD *)(v9 + 8);
          result = sub_1C6315B98(a3, *(_DWORD *)v9, v31, v10);
          if ((result & 1) != 0)
          {
            v11 = v9;
            do
            {
              v11 += 16;
              result = sub_1C6315B98(a3, v30, v31, v11);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v35 = v9 + 16;
            do
            {
              v11 = v35;
              if (v35 >= a2)
                break;
              result = sub_1C6315B98(a3, v30, v31, v35);
              v35 = v11 + 16;
            }
            while (!(_DWORD)result);
          }
          v32 = a2;
          if (v11 < a2)
          {
            v32 = a2;
            do
            {
              v32 -= 16;
              result = sub_1C6315B98(a3, v30, v31, v32);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v32)
          {
            v33 = *(_DWORD *)v11;
            *(_DWORD *)v11 = *(_DWORD *)v32;
            *(_DWORD *)v32 = v33;
            v34 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = *(_QWORD *)(v32 + 8);
            *(_QWORD *)(v32 + 8) = v34;
            do
              v11 += 16;
            while (!sub_1C6315B98(a3, v30, v31, v11));
            do
            {
              v32 -= 16;
              result = sub_1C6315B98(a3, v30, v31, v32);
            }
            while ((result & 1) != 0);
          }
          if (v11 - 16 != v9)
          {
            *(_DWORD *)v9 = *(_DWORD *)(v11 - 16);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v11 - 8);
          }
          a5 = 0;
          *(_DWORD *)(v11 - 16) = v30;
          *(_QWORD *)(v11 - 8) = v31;
          continue;
        }
        v18 = 0;
        v81 = *(_OWORD *)v9;
        do
        {
          v19 = sub_1C6315B98(a3, *(_DWORD *)(v9 + v18 + 16), *(_QWORD *)(v9 + v18 + 24), (uint64_t)&v81);
          v18 += 16;
        }
        while (v19);
        v20 = v9 + v18;
        v21 = v80;
        if (v18 == 16)
        {
          v21 = v80;
          do
          {
            if (v20 >= v21)
              break;
            v29 = *(_DWORD *)(v21 - 16);
            v21 -= 16;
          }
          while (!sub_1C6315B98(a3, v29, *(_QWORD *)(v21 + 8), (uint64_t)&v81));
        }
        else
        {
          do
          {
            v22 = *(_DWORD *)(v21 - 16);
            v21 -= 16;
          }
          while (!sub_1C6315B98(a3, v22, *(_QWORD *)(v21 + 8), (uint64_t)&v81));
        }
        v11 = v9 + v18;
        if (v20 >= v21)
        {
          a2 = v80;
        }
        else
        {
          v23 = v21;
          a2 = v80;
          do
          {
            v24 = *(_DWORD *)v11;
            *(_DWORD *)v11 = *(_DWORD *)v23;
            *(_DWORD *)v23 = v24;
            v25 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = *(_QWORD *)(v23 + 8);
            *(_QWORD *)(v23 + 8) = v25;
            do
            {
              v26 = *(_DWORD *)(v11 + 16);
              v11 += 16;
            }
            while (sub_1C6315B98(a3, v26, *(_QWORD *)(v11 + 8), (uint64_t)&v81));
            do
            {
              v27 = *(_DWORD *)(v23 - 16);
              v23 -= 16;
            }
            while (!sub_1C6315B98(a3, v27, *(_QWORD *)(v23 + 8), (uint64_t)&v81));
          }
          while (v11 < v23);
        }
        if (v11 - 16 != v9)
        {
          *(_DWORD *)v9 = *(_DWORD *)(v11 - 16);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v11 - 8);
        }
        *(_DWORD *)(v11 - 16) = v81;
        *(_QWORD *)(v11 - 8) = *((_QWORD *)&v81 + 1);
        if (v20 < v21)
        {
LABEL_27:
          result = sub_1C5B15F5C(v9, v11 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v28 = sub_1C5B16950(v9, v11 - 16, a3);
        result = sub_1C5B16950(v11, a2, a3);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_27;
        }
        a2 = v11 - 16;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5B16808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  BOOL v9;
  _BOOL8 result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  v8 = (uint64_t *)(a2 + 8);
  v9 = sub_1C6315B98(a4, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), a1);
  result = sub_1C6315B98(a4, *(_DWORD *)a3, *(_QWORD *)(a3 + 8), a2);
  if (v9)
  {
    v11 = *(_DWORD *)a1;
    if (result)
    {
      *(_DWORD *)a1 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v11;
      v12 = (uint64_t *)(a1 + 8);
LABEL_4:
      v8 = (uint64_t *)(a3 + 8);
LABEL_5:
      v13 = *v12;
      *v12 = *v8;
      *v8 = v13;
      return result;
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v11;
    v14 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v14;
    result = sub_1C6315B98(a4, *(_DWORD *)a3, *(_QWORD *)(a3 + 8), a2);
    if (result)
    {
      v15 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v15;
      v12 = (uint64_t *)(a2 + 8);
      goto LABEL_4;
    }
  }
  else if (result)
  {
    v16 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v16;
    v17 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v17;
    result = sub_1C6315B98(a4, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), a1);
    if (result)
    {
      v18 = *(_DWORD *)a1;
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v12 = (uint64_t *)(a1 + 8);
      *(_DWORD *)a2 = v18;
      goto LABEL_5;
    }
  }
  return result;
}

BOOL sub_1C5B16950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C6315B98(a3, *(_DWORD *)(a2 - 16), *(_QWORD *)(a2 - 8), a1))
      {
        v17 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v17;
        v18 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v18;
      }
      return 1;
    case 3:
      sub_1C5B16808(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_1C5B16B2C(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_1C5B16C1C(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v8 = a1 + 32;
      sub_1C5B16808(a1, a1 + 16, a1 + 32, a3);
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C6315B98(a3, *(_DWORD *)v9, *(_QWORD *)(v9 + 8), v8))
    {
      v12 = *(_DWORD *)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        v15 = a1 + v14;
        *(_DWORD *)(v15 + 48) = *(_DWORD *)(a1 + v14 + 32);
        *(_QWORD *)(v15 + 56) = *(_QWORD *)(a1 + v14 + 40);
        if (v14 == -32)
          break;
        v14 -= 16;
        if (!sub_1C6315B98(a3, v12, v13, v15 + 16))
        {
          v16 = a1 + v14 + 48;
          goto LABEL_11;
        }
      }
      v16 = a1;
LABEL_11:
      *(_DWORD *)v16 = v12;
      *(_QWORD *)(v16 + 8) = v13;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = v9;
    v10 += 16;
    result = 1;
    v9 += 16;
    if (v9 == a2)
      return result;
  }
}

BOOL sub_1C5B16B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  sub_1C5B16808(a1, a2, a3, a5);
  result = sub_1C6315B98(a5, *(_DWORD *)a4, *(_QWORD *)(a4 + 8), a3);
  if (result)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    result = sub_1C6315B98(a5, *(_DWORD *)a3, *(_QWORD *)(a3 + 8), a2);
    if (result)
    {
      v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      result = sub_1C6315B98(a5, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), a1);
      if (result)
      {
        v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

BOOL sub_1C5B16C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  sub_1C5B16B2C(a1, a2, a3, a4, a6);
  result = sub_1C6315B98(a6, *(_DWORD *)a5, *(_QWORD *)(a5 + 8), a4);
  if (result)
  {
    v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    v14 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v14;
    result = sub_1C6315B98(a6, *(_DWORD *)a4, *(_QWORD *)(a4 + 8), a3);
    if (result)
    {
      v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v16;
      result = sub_1C6315B98(a6, *(_DWORD *)a3, *(_QWORD *)(a3 + 8), a2);
      if (result)
      {
        v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        v18 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v18;
        result = sub_1C6315B98(a6, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), a1);
        if (result)
        {
          v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          v20 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5B16D48(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6315DBC(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5B16E0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v7 = a2 + 1;
      v8 = *((unsigned int *)a2 + 2);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = v4 + 24 * v8;
          v12 = *(_QWORD **)a1;
          do
          {
            *(_DWORD *)v12 = *(_DWORD *)v4;
            v13 = *(_QWORD *)(v4 + 16);
            v12[1] = *(_QWORD *)(v4 + 8);
            v12[2] = v13;
            v4 += 24;
            v12 += 3;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v14 = v4 + 24 * v9;
            v15 = *(_QWORD **)a1;
            do
            {
              *(_DWORD *)v15 = *(_DWORD *)v4;
              v16 = *(_QWORD *)(v4 + 16);
              v15[1] = *(_QWORD *)(v4 + 8);
              v15[2] = v16;
              v4 += 24;
              v15 += 3;
            }
            while (v4 != v14);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*a2 + 24 * v9), *a2 + 24 * v10 - (*a2 + 24 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

_QWORD *sub_1C5B16F6C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6315FD8(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5B17030(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = v4 + 32 * v8;
        v11 = *(_QWORD **)a1;
        do
        {
          *(_DWORD *)v11 = *(_DWORD *)v4;
          v11[1] = *(_QWORD *)(v4 + 8);
          *((_OWORD *)v11 + 1) = *(_OWORD *)(v4 + 16);
          v4 += 32;
          v11 += 4;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v12 = v4 + 32 * v9;
        v13 = *(_QWORD **)a1;
        do
        {
          *(_DWORD *)v13 = *(_DWORD *)v4;
          v13[1] = *(_QWORD *)(v4 + 8);
          *((_OWORD *)v13 + 1) = *(_OWORD *)(v4 + 16);
          v4 += 32;
          v13 += 4;
        }
        while (v4 != v12);
LABEL_18:
        v14 = *v7;
        if (v9 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v9), (const void *)(*a2 + 32 * v9), *a2 + 32 * v14 - (*a2 + 32 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 32);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

uint64_t sub_1C5B17188(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_1C61247C0(a1 + 584, *(_QWORD **)(a1 + 592));
  v2 = *(void **)(a1 + 504);
  if (v2 != (void *)(a1 + 520))
    free(v2);
  v3 = *(void **)(a1 + 416);
  if (v3 != *(void **)(a1 + 408))
    free(v3);
  sub_1C4EE41F8((char **)(a1 + 8));
  return a1;
}

__n128 sub_1C5B171E8(_WORD *a1, int **a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81CE60, "gvn-max-hoisted", 0xFuLL);
  word_1ED81CE6A = (32 * (*a1 & 3)) | word_1ED81CE6A & 0xFF9F;
  v6 = *a2;
  dword_1ED81CEE0 = **a2;
  byte_1ED81CEF4 = 1;
  dword_1ED81CEF0 = *v6;
  result = *a3;
  xmmword_1ED81CE80 = (__int128)*a3;
  return result;
}

__n128 sub_1C5B1726C(_WORD *a1, int **a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81D0A0, "gvn-hoist-max-chain-length", 0x1AuLL);
  word_1ED81D0AA = (32 * (*a1 & 3)) | word_1ED81D0AA & 0xFF9F;
  v6 = *a2;
  dword_1ED81D120 = **a2;
  byte_1ED81D134 = 1;
  dword_1ED81D130 = *v6;
  result = *a3;
  xmmword_1ED81D0C0 = (__int128)*a3;
  return result;
}

unint64_t sub_1C5B172F0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 32 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 32);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 32);
    }
  }
  return v2;
}

_OWORD *sub_1C5B17364(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6316A54(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    do
    {
      *result = xmmword_1C8668EC0;
      result += 3;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C5B1742C(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  unsigned __int32 v8;
  unsigned __int32 v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  __n128 *v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unsigned __int32 v22;
  unint64_t v23;
  __n128 *v24;
  uint64_t v25;
  unsigned __int32 v26;
  unint64_t v27;
  __n128 *v28;
  __n128 v29;
  __n128 *v30;
  __n128 *v31;
  __n128 *v32;
  __n128 *v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __n128 *v39;
  __n128 *v40;
  uint64_t v41;
  __n128 *v42;
  __n128 *v43;
  __n128 v44;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v8 = a2[-2].n128_u32[0];
    v9 = a1->n128_u32[0];
    if (v8 >= a1->n128_u32[0])
    {
      if (v9 < v8)
        return result;
      v11 = a2[-2].n128_u64[1];
      v10 = a1->n128_u64[1];
      if (v11 >= v10)
        return result;
    }
    else
    {
      v10 = a1->n128_u64[1];
      v11 = a2[-2].n128_u64[1];
    }
    result = a1[1];
    a1->n128_u32[0] = v8;
    a1->n128_u64[1] = v11;
    a1[1] = a2[-1];
    a2[-2].n128_u32[0] = v9;
    a2[-2].n128_u64[1] = v10;
    a2[-1] = result;
    return result;
  }
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2)
      return result;
    v18 = a1 + 2;
    if (&a1[2] == a2)
      return result;
    v19 = 0;
    v20 = a1;
    while (1)
    {
      v21 = v20;
      v20 = v18;
      v22 = v21[2].n128_u32[0];
      if (v22 >= v21->n128_u32[0])
      {
        if (v21->n128_u32[0] < v22)
          goto LABEL_29;
        v23 = v21[2].n128_u64[1];
        if (v23 >= v21->n128_u64[1])
          goto LABEL_29;
      }
      else
      {
        v23 = v21[2].n128_u64[1];
      }
      v44 = v21[3];
      v21[2].n128_u32[0] = v21->n128_u32[0];
      v20->n128_u64[1] = v21->n128_u64[1];
      v24 = v21 + 1;
      v20[1] = v21[1];
      if (v21 == a1)
        goto LABEL_27;
      v25 = v19;
      while (1)
      {
        v26 = *(unsigned __int32 *)((char *)a1[-2].n128_u32 + v25);
        if (v22 >= v26)
          break;
        v27 = *(_QWORD *)((char *)&a1[-1] + v25 - 8);
LABEL_25:
        v24 = v21 - 1;
        v21 -= 2;
        v28 = (__n128 *)((char *)a1 + v25);
        v28->n128_u32[0] = v26;
        v28->n128_u64[1] = v27;
        v28[1] = *(__n128 *)((char *)a1 + v25 - 16);
        v25 -= 32;
        if (!v25)
        {
          v24 = a1 + 1;
LABEL_27:
          v21 = a1;
          goto LABEL_28;
        }
      }
      if (v26 < v22)
        goto LABEL_28;
      v27 = *(_QWORD *)((char *)&a1[-1] + v25 - 8);
      if (v23 < v27)
        goto LABEL_25;
      v24 = (__n128 *)((char *)a1 + v25 + 16);
      v21 = (__n128 *)((char *)a1 + v25);
LABEL_28:
      v21->n128_u32[0] = v22;
      v21->n128_u64[1] = v23;
      result = v44;
      *v24 = v44;
LABEL_29:
      v18 = v20 + 2;
      v19 += 32;
      if (&v20[2] == a2)
        return result;
    }
  }
  v14 = a4;
  v15 = a3 >> 1;
  v16 = &a1[2 * (a3 >> 1)];
  v17 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    sub_1C5B1742C(a1, v16, v17, a4, a5);
    sub_1C5B1742C(&a1[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v14, a5);
    result.n128_u64[0] = sub_1C5B17A2C(a1, &a1[2 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v14, a5).n128_u64[0];
    return result;
  }
  v29 = sub_1C5B1778C(a1, v16, v17, a4, result);
  v30 = &v14[2 * v15];
  result.n128_u64[0] = sub_1C5B1778C(&a1[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v30, v29).n128_u64[0];
  v31 = &v14[2 * a3];
  v32 = a1 + 1;
  v33 = v30;
  while (v33 != v31)
  {
    v34 = v33->n128_u32[0];
    v35 = v14->n128_u32[0];
    if (v33->n128_u32[0] >= v14->n128_u32[0])
    {
      if (v35 < v34)
      {
        v37 = v14->n128_u64[1];
LABEL_40:
        v32[-1].n128_u32[0] = v35;
        v32[-1].n128_u64[1] = v37;
        result = v14[1];
        *v32 = result;
        v14 += 2;
        goto LABEL_41;
      }
      v36 = v33->n128_u64[1];
      v37 = v14->n128_u64[1];
      if (v36 >= v37)
        goto LABEL_40;
    }
    else
    {
      v36 = v33->n128_u64[1];
    }
    v32[-1].n128_u32[0] = v34;
    v32[-1].n128_u64[1] = v36;
    result = v33[1];
    *v32 = result;
    v33 += 2;
LABEL_41:
    v32 += 2;
    if (v14 == v30)
    {
      if (v33 != v31)
      {
        v38 = 0;
        do
        {
          v39 = &v33[v38];
          v40 = &v32[v38];
          v40[-1].n128_u32[0] = v33[v38].n128_u32[0];
          v40[-1].n128_u64[1] = v33[v38].n128_u64[1];
          result = v33[v38 + 1];
          *v40 = result;
          v38 += 2;
        }
        while (&v39[2] != v31);
      }
      return result;
    }
  }
  if (v14 != v30)
  {
    v41 = 0;
    do
    {
      v42 = &v32[v41];
      v43 = &v14[v41];
      v42[-1].n128_u32[0] = v14[v41].n128_u32[0];
      v42[-1].n128_u64[1] = v14[v41].n128_u64[1];
      result = v14[v41 + 1];
      *v42 = result;
      v41 += 2;
    }
    while (&v43[2] != v30);
  }
  return result;
}

__n128 sub_1C5B1778C(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 v9;
  __n128 *v10;
  unsigned int v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 *v15;
  uint64_t v16;
  __n128 *v17;
  unsigned int *v18;
  __n128 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __n128 v23;
  __n128 *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  __n128 *v28;
  __n128 v29;
  __n128 v30;
  __n128 *v31;
  __n128 *v32;
  __n128 v33;
  unint64_t v34;
  int *v35;
  __n128 v36;
  unint64_t v37;
  int *v38;
  __n128 v39;

  if (!a3)
    return result;
  v5 = a4;
  v8 = a1;
  if (a3 == 2)
  {
    v10 = a2 - 2;
    v11 = a2[-2].n128_u32[0];
    if (v11 < a1->n128_u32[0] || a1->n128_u32[0] >= v11 && a2[-2].n128_u64[1] < a1->n128_u64[1])
    {
      v12 = a2[-1];
      *a4 = *v10;
      a4[1] = v12;
      result = *a1;
      v13 = a1[1];
    }
    else
    {
      v30 = a1[1];
      *a4 = *a1;
      a4[1] = v30;
      result = *v10;
      v13 = a2[-1];
    }
    a4[2] = result;
    a4[3] = v13;
    return result;
  }
  if (a3 == 1)
  {
    result = *a1;
    v9 = a1[1];
    *a4 = *a1;
    a4[1] = v9;
    return result;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (a1 == a2)
      return result;
    result = *a1;
    v14 = a1[1];
    *a4 = *a1;
    a4[1] = v14;
    v15 = a1 + 2;
    if (&a1[2] == a2)
      return result;
    v16 = 0;
    v17 = a4;
    v18 = (unsigned int *)a4;
    while (1)
    {
      v19 = v15;
      v21 = *v18;
      v18 += 8;
      v20 = v21;
      v22 = v8[2].n128_u32[0];
      if (v22 >= v21 && (v20 < v22 || v8[2].n128_u64[1] >= v17->n128_u64[1]))
      {
        result = *v19;
        v29 = v19[1];
        *(__n128 *)v18 = *v19;
        *((__n128 *)v18 + 1) = v29;
        goto LABEL_25;
      }
      v23 = v17[1];
      *(__n128 *)v18 = *v17;
      *((__n128 *)v18 + 1) = v23;
      v24 = a4;
      if (v17 == a4)
        goto LABEL_24;
      v25 = v16;
      while (1)
      {
        v26 = *(unsigned __int32 *)((char *)a4[-2].n128_u32 + v25);
        if (v19->n128_u32[0] >= v26)
          break;
        v27 = *(_QWORD *)((char *)&a4[-1] + v25 - 8);
LABEL_18:
        v17 -= 2;
        v28 = (__n128 *)((char *)a4 + v25);
        v28->n128_u32[0] = v26;
        v28->n128_u64[1] = v27;
        v28[1] = *(__n128 *)((char *)a4 + v25 - 16);
        v25 -= 32;
        if (!v25)
        {
          v24 = a4;
          goto LABEL_24;
        }
      }
      if (v26 >= v19->n128_u32[0])
        break;
      v24 = v17;
LABEL_24:
      v24->n128_u32[0] = v19->n128_u32[0];
      v24->n128_u64[1] = v8[2].n128_u64[1];
      result = v8[3];
      v24[1] = result;
LABEL_25:
      v15 = v19 + 2;
      v16 += 32;
      v17 = (__n128 *)v18;
      v8 = v19;
      if (&v19[2] == a2)
        return result;
    }
    v24 = (__n128 *)((char *)a4 + v25);
    v27 = *(_QWORD *)((char *)&a4[-1] + v25 - 8);
    if (v8[2].n128_u64[1] >= v27)
      goto LABEL_24;
    goto LABEL_18;
  }
  v31 = &a1[2 * (a3 >> 1)];
  sub_1C5B1742C(a1, v31, a3 >> 1, a4, a3 >> 1);
  sub_1C5B1742C(&v8[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[2 * (a3 >> 1)], a3 - (a3 >> 1));
  v32 = &v8[2 * (a3 >> 1)];
  while (v32 != a2)
  {
    if (v32->n128_u32[0] >= v8->n128_u32[0]
      && (v8->n128_u32[0] < v32->n128_u32[0] || v32->n128_u64[1] >= v8->n128_u64[1]))
    {
      result = *v8;
      v33 = v8[1];
      v8 += 2;
    }
    else
    {
      result = *v32;
      v33 = v32[1];
      v32 += 2;
    }
    *v5 = result;
    v5[1] = v33;
    v5 += 2;
    if (v8 == v31)
    {
      if (v32 != a2)
      {
        v34 = 0;
        do
        {
          v35 = (int *)&v5[v34];
          result = v32[v34];
          v36 = (__int128)v32[v34 + 1];
          *(__n128 *)v35 = result;
          *((_OWORD *)v35 + 1) = v36;
          v34 += 2;
        }
        while (&v32[v34] != a2);
      }
      return result;
    }
  }
  if (v8 != v31)
  {
    v37 = 0;
    do
    {
      v38 = (int *)&v5[v37];
      result = v8[v37];
      v39 = v8[v37 + 1];
      *(__n128 *)v38 = result;
      *((__n128 *)v38 + 1) = v39;
      v37 += 2;
    }
    while (&v8[v37] != v31);
  }
  return result;
}

__n128 sub_1C5B17A2C(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, uint64_t a7)
{
  uint64_t v9;
  unsigned __int32 v10;
  uint64_t v11;
  unsigned __int32 v12;
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  unsigned __int32 v20;
  unint64_t v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int32 v26;
  unint64_t v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  unsigned __int32 v31;
  unint64_t v32;
  __n128 *v33;
  __n128 *v34;
  unsigned __int32 v35;
  unint64_t v36;
  uint64_t v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  __n128 result;
  uint64_t v42;
  __n128 *v43;
  __n128 v44;
  __n128 *v45;
  unsigned __int32 v46;
  unsigned __int32 v47;
  unint64_t v48;
  __n128 *v49;
  uint64_t v50;
  __n128 *v51;
  __n128 v52;
  __n128 *v53;
  uint64_t v54;
  unsigned __int32 v55;
  unsigned __int32 v56;
  unint64_t v57;
  unint64_t v58;
  __n128 *v59;
  unint64_t v60;
  uint64_t v61;
  __n128 *v62;
  uint64_t v63;
  __n128 *v64;
  __n128 *v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;

  if (!a5)
    return result;
  do
  {
    if (a4 <= a7 || a5 <= a7)
    {
      if (a4 > a5)
      {
        if (a2 == a3)
          return result;
        v42 = 0;
        do
        {
          v43 = &a6[v42];
          result = a2[v42];
          v44 = a2[v42 + 1];
          *v43 = result;
          v43[1] = v44;
          v42 += 2;
        }
        while (&a2[v42] != a3);
        if (!(v42 * 16))
          return result;
        v45 = &a6[v42];
        while (1)
        {
          if (a2 == a1)
          {
            if (v45 != a6)
            {
              v61 = 0;
              do
              {
                v62 = &a3[v61];
                v62[-2].n128_u32[0] = v45[v61 - 2].n128_u32[0];
                v62[-2].n128_u64[1] = *((_QWORD *)&v45[v61 - 1] - 1);
                result = v45[v61 - 1];
                v62[-1] = result;
                v61 -= 2;
              }
              while (&v45[v61] != a6);
            }
            return result;
          }
          v46 = a2[-2].n128_u32[0];
          v47 = v45[-2].n128_u32[0];
          if (v47 >= v46)
          {
            if (v46 < v47 || (v48 = a2[-2].n128_u64[1], v45[-2].n128_u64[1] >= v48))
            {
              v46 = v45[-2].n128_u32[0];
              v48 = v45[-2].n128_u64[1];
              v49 = v45;
              v45 -= 2;
              goto LABEL_69;
            }
          }
          else
          {
            v48 = a2[-2].n128_u64[1];
          }
          v49 = a2;
          a2 -= 2;
LABEL_69:
          a3[-2].n128_u32[0] = v46;
          a3 -= 2;
          a3->n128_u64[1] = v48;
          result = v49[-1];
          a3[1] = result;
          if (v45 == a6)
            return result;
        }
      }
      if (a1 == a2)
        return result;
      v50 = 0;
      do
      {
        v51 = &a6[v50];
        result = a1[v50];
        v52 = a1[v50 + 1];
        *v51 = result;
        v51[1] = v52;
        v50 += 2;
      }
      while (&a1[v50] != a2);
      if (!(v50 * 16))
        return result;
      v53 = &a6[v50];
      v54 = (uint64_t)&a6[v50 - 2];
      while (1)
      {
        if (a2 == a3)
        {
          if (v53 != a6)
          {
            v63 = 0;
            do
            {
              v64 = &a1[v63];
              v65 = &a6[v63];
              v64->n128_u32[0] = a6[v63].n128_u32[0];
              v64->n128_u64[1] = a6[v63].n128_u64[1];
              result = a6[v63 + 1];
              v64[1] = result;
              v63 += 2;
            }
            while ((__n128 *)v54 != v65);
          }
          return result;
        }
        v55 = a2->n128_u32[0];
        v56 = a6->n128_u32[0];
        if (a2->n128_u32[0] >= a6->n128_u32[0])
        {
          if (v56 < v55)
          {
            v58 = a6->n128_u64[1];
LABEL_83:
            a1->n128_u32[0] = v56;
            a1->n128_u64[1] = v58;
            result = a6[1];
            a1[1] = result;
            a6 += 2;
            goto LABEL_84;
          }
          v57 = a2->n128_u64[1];
          v58 = a6->n128_u64[1];
          if (v57 >= v58)
            goto LABEL_83;
        }
        else
        {
          v57 = a2->n128_u64[1];
        }
        a1->n128_u32[0] = v55;
        a1->n128_u64[1] = v57;
        result = a2[1];
        a1[1] = result;
        a2 += 2;
LABEL_84:
        a1 += 2;
        if (v53 == a6)
          return result;
      }
    }
    if (!a4)
      return result;
    v9 = 0;
    v10 = a2->n128_u32[0];
    v11 = -a4;
    while (1)
    {
      v12 = a1[v9].n128_u32[0];
      if (v10 < v12 || v12 >= v10 && a2->n128_u64[1] < a1[v9].n128_u64[1])
        break;
      v9 += 2;
      if (__CFADD__(v11++, 1))
        return result;
    }
    v14 = &a1[v9];
    if (-v11 >= a5)
    {
      if (v11 == -1)
      {
        v59 = &a1[v9];
        v60 = a1[v9].n128_u64[1];
        v68 = v59[1];
        v59->n128_u32[0] = a2->n128_u32[0];
        v59->n128_u64[1] = a2->n128_u64[1];
        v59[1] = a2[1];
        a2->n128_u32[0] = v12;
        a2->n128_u64[1] = v60;
        result = v68;
        a2[1] = v68;
        return result;
      }
      if (v11 <= 0)
        v24 = -v11;
      else
        v24 = 1 - v11;
      v23 = v24 >> 1;
      v18 = &a1[2 * (v24 >> 1) + v9];
      v17 = a3;
      if (a3 != a2)
      {
        v25 = ((char *)a3 - (char *)a2) >> 5;
        v26 = v18->n128_u32[0];
        v17 = a2;
        do
        {
          v27 = v25 >> 1;
          v28 = &v17[2 * (v25 >> 1)];
          if (v28->n128_u32[0] < v26 || v26 >= v28->n128_u32[0] && v28->n128_u64[1] < v18->n128_u64[1])
          {
            v17 = v28 + 2;
            v27 = v25 + ~v27;
          }
          v25 = v27;
        }
        while (v27);
      }
      v16 = ((char *)v17 - (char *)a2) >> 5;
    }
    else
    {
      if (a5 >= 0)
        v15 = a5;
      else
        v15 = a5 + 1;
      v16 = v15 >> 1;
      v17 = &a2[2 * (v15 >> 1)];
      v18 = a2;
      if (v14 != a2)
      {
        v19 = ((char *)a2 - (char *)a1 - v9 * 16) >> 5;
        v20 = v17->n128_u32[0];
        v18 = &a1[v9];
        do
        {
          v21 = v19 >> 1;
          v22 = &v18[2 * (v19 >> 1)];
          if (v20 >= v22->n128_u32[0] && (v22->n128_u32[0] < v20 || v17->n128_u64[1] >= v22->n128_u64[1]))
          {
            v18 = v22 + 2;
            v21 = v19 + ~v21;
          }
          v19 = v21;
        }
        while (v21);
      }
      v23 = ((char *)v18 - (char *)a1 - v9 * 16) >> 5;
    }
    v29 = v17;
    if (v18 != a2)
    {
      v29 = v18;
      if (a2 != v17)
      {
        v30 = v18 + 2;
        v29 = a2;
        while (1)
        {
          v31 = v30[-2].n128_u32[0];
          v32 = v30[-2].n128_u64[1];
          v66 = v30[-1];
          v30[-2].n128_u32[0] = a2->n128_u32[0];
          v30[-2].n128_u64[1] = a2->n128_u64[1];
          v30[-1] = a2[1];
          a2->n128_u32[0] = v31;
          a2->n128_u64[1] = v32;
          a2[1] = v66;
          a2 += 2;
          if (a2 == v17)
            break;
          if (v30 == v29)
            v29 = a2;
          v30 += 2;
        }
        if (v30 != v29)
        {
          v33 = v30;
          v34 = v29;
          do
          {
            while (1)
            {
              v35 = v33->n128_u32[0];
              v36 = v33->n128_u64[1];
              v67 = v33[1];
              v33->n128_u32[0] = v29->n128_u32[0];
              v33->n128_u64[1] = v29->n128_u64[1];
              v33[1] = v29[1];
              v29->n128_u32[0] = v35;
              v29->n128_u64[1] = v36;
              v29[1] = v67;
              v33 += 2;
              v29 += 2;
              if (v29 == v17)
                break;
              if (v33 == v34)
                v34 = v29;
            }
            v29 = v34;
          }
          while (v33 != v34);
          v29 = v30;
        }
      }
    }
    a4 = -v23 - v11;
    v37 = a5 - v16;
    if (v23 + v16 >= a5 - (v23 + v16) - v11)
    {
      v40 = a6;
      sub_1C5B17A2C(v29, v17, a3, a4, a5 - v16, a6, a7);
      v17 = v18;
      v37 = v16;
      a4 = v23;
      a3 = v29;
    }
    else
    {
      v38 = v14;
      v39 = a3;
      v40 = a6;
      sub_1C5B17A2C(v38, v18, v29, v23, v16, a6, a7);
      a3 = v39;
      v14 = v29;
    }
    a5 = v37;
    a1 = v14;
    a2 = v17;
    a6 = v40;
  }
  while (v37);
  return result;
}

unint64_t sub_1C5B17F7C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C6316B64(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C6316B64(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C5B17FE4()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = -1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Max number of instructions to hoist (default unlimited = -1)";
  v1.n128_u64[1] = 60;
  sub_1C63166E4(&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED81CE60, &dword_1C475E000);
  v4 = 1;
  v2 = 4;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Max number of basic blocks on the path between hoisting locations (default = 4, unlimited = -1)";
  v1.n128_u64[1] = 95;
  sub_1C6199E68((llvm::cl::Option *)&unk_1ED81CF20, "gvn-hoist-max-bbs", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED81CF20, &dword_1C475E000);
  v4 = 1;
  v2 = 100;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Hoist instructions from the beginning of the BB up to the maximum specified depth ("
                                     "default = 100, unlimited = -1)";
  v1.n128_u64[1] = 113;
  sub_1C6199E68((llvm::cl::Option *)&unk_1ED81CFE0, "gvn-hoist-max-depth", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED81CFE0, &dword_1C475E000);
  v4 = 1;
  v2 = 10;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Maximum length of dependent chains to hoist (default = 10, unlimited = -1)";
  v1.n128_u64[1] = 74;
  sub_1C6316780(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED81D0A0, &dword_1C475E000);
}

BOOL sub_1C5B18154(uint64_t a1, void *a2)
{
  char *v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  int v34;
  _OWORD *v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  void **v48;
  void **v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int32 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  unint64_t v89;
  __int128 *v90;
  unint64_t v91;
  __int128 *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned int v123;
  uint64_t v124;
  BOOL v125;
  int v126;
  char *v127;
  char *v128;
  int64x2_t v129;
  uint64_t v130;
  int v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  int v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  int v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  int v156;
  char *v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  unsigned __int8 v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  char *v172;
  uint64_t *v173;
  char *v174;
  unsigned __int8 *v175;
  int v176;
  uint64_t v177;
  const llvm::Instruction *v178;
  const llvm::Instruction *v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  _QWORD *v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  char *v194;
  uint64_t v195;
  _QWORD **v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unsigned int v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  uint64_t *v207;
  _BYTE *v208;
  uint64_t v209;
  int v210;
  char *v211;
  __int128 v212;
  uint64_t v213;
  int v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  unsigned int v226;
  char *v227;
  char *v228;
  __int128 v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  __int128 v236;
  char *v237;
  unsigned int v238;
  BOOL v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  int v244;
  __int128 *v245;
  __int128 v246;
  unsigned int v247;
  int v248;
  uint64_t v249;
  char *v250;
  llvm::Instruction **v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  llvm::Instruction *v259;
  int v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  int v264;
  int v265;
  char *v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  llvm::Value *v275;
  uint64_t **v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  int v284;
  _QWORD *v285;
  void *v286;
  char *v287;
  void *v288;
  uint64_t *v289;
  _QWORD *v290;
  _QWORD *v291;
  char *v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  llvm::ValueSymbolTable *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  int v310;
  _DWORD *v311;
  _DWORD *v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  _DWORD *v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  llvm::Instruction *v324;
  llvm::Instruction **v325;
  uint64_t v326;
  llvm::Instruction *v327;
  llvm::ValueAsMetadata **v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  _QWORD *v337;
  llvm::UndefValue **v338;
  llvm::UndefValue *v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  int v343;
  uint64_t ****v344;
  uint64_t v345;
  uint64_t ***v346;
  uint64_t **v347;
  uint64_t **v348;
  char *v349;
  uint64_t v350;
  char *v351;
  char *v353;
  int v354;
  unsigned int v355;
  int64x2_t v356;
  char *v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  void *__p;
  char *v364;
  uint64_t v365;
  char *v366;
  char *v367;
  uint64_t v368;
  int v369;
  _BYTE v370[32];
  char *v371;
  int32x2_t v372;
  unsigned int v373;
  int64x2_t v374;
  uint64_t v375;
  int32x2_t v376;
  unsigned int v377;
  int v378;
  _DWORD *v379;
  uint64_t v380;
  unsigned int v381;
  void *v382[2];
  int v383;
  void *v384;
  uint64_t v385;
  _BYTE v386[32];
  char v387;
  void *v388;
  uint64_t v389;
  _BYTE v390[288];
  void **v391;
  uint64_t v392;
  uint64_t v393;
  _OWORD v394[2];
  void *v395;
  uint64_t v396;
  _BYTE v397[32];
  void *v398;
  uint64_t v399;
  _BYTE v400[32];
  char v401;
  void *__base;
  uint64_t v403;
  _BYTE v404[32];
  void *v405[2];
  __int128 v406;
  __int128 v407;
  void *v408;
  uint64_t v409;
  _BYTE v410[32];
  void *v411[2];
  int v412;
  void *v413;
  int v414[2];
  uint64_t v415;
  void *__dst;
  uint64_t v417;
  _BYTE v418[40];
  uint64_t *v419;
  uint64_t v420;
  _QWORD v421[7];

  v421[4] = *MEMORY[0x1E0C80C00];
  v388 = a2;
  v364 = 0;
  v365 = 0;
  __p = 0;
  sub_1C5643D14((char **)&__p, (uint64_t)&v388);
  v4 = (char *)__p;
  v3 = v364;
  if (v364 != __p)
  {
    v5 = 0;
    v356 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v360 = a1;
    v361 = (char *)__p;
    while (1)
    {
      v7 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      v6 = v7;
      __base = v404;
      v403 = 0x400000000;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        goto LABEL_41;
      v362 = v6;
      while (1)
      {
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = v9 && v10 >= 0x1C;
        v12 = !v11 || v10 - 29 > 0xA;
        if (!v12)
          break;
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          goto LABEL_41;
      }
      v13 = *(_QWORD *)(v9 + 40);
      v14 = *(_QWORD *)(v13 + 40);
      if (v14)
        v15 = v14 - 24;
      else
        v15 = 0;
      if (*(unsigned __int8 *)(v15 + 16) - 29 >= 0xB)
        v15 = 0;
      if ((*(_BYTE *)(v15 + 16) & 0xFE) != 0x1E)
        goto LABEL_41;
      LODWORD(v16) = 0;
LABEL_22:
      if (v16 >= HIDWORD(v403))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v404, v16 + 1, 8);
        LODWORD(v16) = v403;
      }
      *((_QWORD *)__base + v16) = v13;
      v16 = (v403 + 1);
      LODWORD(v403) = v403 + 1;
      while (1)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          break;
        v17 = *(_QWORD *)(v8 + 24);
        v18 = *(unsigned __int8 *)(v17 + 16);
        if (v17)
          v19 = v18 >= 0x1C;
        else
          v19 = 0;
        if (v19 && v18 - 29 <= 0xA)
        {
          v21 = 0;
          v13 = *(_QWORD *)(v17 + 40);
          v22 = *(_QWORD *)(v13 + 40);
          if (v22)
            v23 = v22 - 24;
          else
            v23 = 0;
          if (*(unsigned __int8 *)(v23 + 16) - 29 >= 0xB)
            v23 = 0;
          if ((*(_BYTE *)(v23 + 16) & 0xFE) != 0x1E)
            goto LABEL_42;
          goto LABEL_22;
        }
      }
      if (v16 < 2)
      {
LABEL_41:
        v21 = 0;
        goto LABEL_42;
      }
      qsort(__base, v16, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4776710);
      LODWORD(v24) = v403;
      v25 = (void **)__base;
      v358 = v403;
      if ((_DWORD)v403)
      {
        v26 = (char *)__base;
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)v26 + 40);
          if (v27 == *(_QWORD *)v26 + 40)
          {
            v28 = 0;
          }
          else
          {
            if (v27)
              v28 = v27 - 24;
            else
              v28 = 0;
            if (*(unsigned __int8 *)(v28 + 16) - 29 >= 0xB)
              v28 = 0;
          }
          v29 = *(unsigned __int8 *)(v28 + 16);
          if (v29 != 30)
            __asm { BR              X12 }
          if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFF) == 3)
          {
            v30 = (char *)&v25[v24];
            if (v30 != v26 + 8)
            {
              memmove(v26, v26 + 8, v30 - (v26 + 8));
              LODWORD(v24) = v403;
              v25 = (void **)__base;
            }
            LODWORD(v24) = v24 - 1;
            LODWORD(v403) = v24;
          }
          else
          {
            v26 += 8;
          }
        }
        while (v26 != (char *)&v25[v24]);
        v24 = v24;
      }
      else
      {
        v24 = 0;
      }
      v391 = v25;
      v392 = v24;
      v393 = 1;
      v394[0] = v356;
      v394[1] = v356;
      v395 = v397;
      v396 = 0x400000000;
      v398 = v400;
      v399 = 0x400000000;
      v401 = 0;
      sub_1C628250C(&v393);
      LODWORD(v396) = 0;
      if (!v392)
      {
        LODWORD(v399) = 0;
        goto LABEL_116;
      }
      v31 = v391;
      v32 = &v391[v392];
      do
      {
        v388 = 0;
        v33 = *v31;
        v388 = *v31;
        if ((v393 & 1) != 0)
        {
          v34 = 4;
          v35 = v394;
        }
        else
        {
          v34 = DWORD2(v394[0]);
          if (!DWORD2(v394[0]))
          {
            v44 = 0;
            goto LABEL_83;
          }
          v35 = *(_OWORD **)&v394[0];
        }
        v36 = v34 - 1;
        v37 = v36 & ((v33 >> 4) ^ (v33 >> 9));
        v38 = (_QWORD *)v35 + v37;
        v39 = (void *)*v38;
        if (v33 == (void *)*v38)
          goto LABEL_86;
        v40 = 0;
        v41 = 1;
        while (v39 != (void *)-4096)
        {
          if (v40)
            v42 = 0;
          else
            v42 = v39 == (void *)-8192;
          if (v42)
            v40 = v38;
          v43 = v37 + v41++;
          v37 = v43 & v36;
          v38 = (_QWORD *)v35 + v37;
          v39 = (void *)*v38;
          if (v33 == (void *)*v38)
            goto LABEL_86;
        }
        if (v40)
          v44 = v40;
        else
          v44 = v38;
LABEL_83:
        v45 = sub_1C5648ADC((uint64_t)&v393, (uint64_t)&v388, &v388, v44);
        *v45 = v388;
        v46 = v388;
        v47 = v396;
        if (v396 >= (unint64_t)HIDWORD(v396))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v395, (uint64_t)v397, v396 + 1, 8);
          v47 = v396;
        }
        *((_QWORD *)v395 + v47) = v46;
        LODWORD(v396) = v396 + 1;
LABEL_86:
        ++v31;
      }
      while (v31 != v32);
      v48 = v391;
      LODWORD(v399) = 0;
      if (!v392)
        goto LABEL_116;
      v49 = &v391[v392];
      do
      {
        v388 = 0;
        v388 = *v48;
        v50 = (char *)v388 + 40;
        v51 = -1;
        v52 = (char *)v388 + 40;
        do
        {
          v52 = (char *)*((_QWORD *)v52 + 1);
          ++v51;
        }
        while (v52 != v50);
        if (v51 <= 1)
        {
          sub_1C6316E88((uint64_t)&v393, &v388);
        }
        else
        {
          v53 = *(_QWORD *)v50;
          if (v53)
            v54 = v53 - 24;
          else
            v54 = 0;
          if (*(unsigned __int8 *)(v54 + 16) - 29 >= 0xB)
            v55 = 0;
          else
            v55 = v54;
          if (*(_QWORD *)(*(_QWORD *)(v55 + 40) + 48) == v55 + 24)
          {
            v57 = 0;
          }
          else
          {
            v56 = *(_QWORD *)(v55 + 24);
            if (v56)
              v57 = v56 - 24;
            else
              v57 = 0;
          }
          v58 = v399;
          if (v399 >= (unint64_t)HIDWORD(v399))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v398, (uint64_t)v400, v399 + 1, 8);
            v58 = v399;
          }
          *((_QWORD *)v398 + v58) = v57;
          LODWORD(v399) = v399 + 1;
        }
        ++v48;
      }
      while (v48 != v49);
      if (!(_DWORD)v399)
LABEL_116:
        v401 = 1;
      v357 = v3;
      v388 = v390;
      v389 = 0x400000000;
      v371 = 0;
      v372 = 0;
      v373 = 0;
      v366 = v370;
      v367 = v370;
      v368 = 4;
      v369 = 0;
      if (*(_QWORD *)(v362 + 40) == v362 + 40)
      {
        v59 = 0;
      }
      else
      {
        v59 = 0;
        v60 = *(_QWORD *)(v362 + 48);
        v61 = v60 - 24;
        if (v60)
          v62 = v60 - 24;
        else
          v62 = 0;
        if (v60 && *(_BYTE *)(v62 + 16) == 83)
        {
          while (1)
          {
            v411[0] = &v412;
            v411[1] = (void *)0x400000000;
            __dst = v418;
            v417 = 0x400000000;
            v63 = &v406;
            v405[0] = &v406;
            v405[1] = (void *)0x400000000;
            v64 = *(_DWORD *)(v61 + 20);
            v65 = v64 & 0x7FFFFFF;
            if ((v64 & 0x7FFFFFF) == 0)
              break;
            v66 = 0;
            v67 = 0;
            LODWORD(v68) = 0;
            v69 = 8 * v65;
            do
            {
              v70 = *(_DWORD *)(v61 + 20);
              if ((v70 & 0x40000000) != 0)
                v71 = *(_QWORD *)(v61 - 8);
              else
                v71 = v61 - 32 * (v70 & 0x7FFFFFF);
              v72 = *(_QWORD *)(v71 + 32 * *(unsigned int *)(v61 + 60) + v67);
              v73 = *(_QWORD *)(v71 + v66);
              if (v68 >= HIDWORD(v405[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v405, (uint64_t)&v406, v68 + 1, 16);
                LODWORD(v68) = v405[1];
              }
              v74 = (char *)v405[0] + 16 * v68;
              *v74 = v72;
              v74[1] = v73;
              v68 = ++LODWORD(v405[1]);
              v67 += 8;
              v66 += 32;
            }
            while (v69 != v67);
            v63 = (__int128 *)v405[0];
            v75 = (unint64_t *)((char *)v405[0] + 16 * v68);
            if (!(_DWORD)v68)
              goto LABEL_134;
            v76 = 126 - 2 * __clz(v68);
LABEL_135:
            sub_1C544D27C((uint64_t)v63, v75, (uint64_t)v382, v76, 1);
            v77 = (char *)v405[0];
            v78 = (char *)v405[0] + 16 * LODWORD(v405[1]);
            if (LODWORD(v405[1]))
            {
              do
              {
                v79 = *(_QWORD *)v77;
                v80 = v417;
                if (v417 >= (unint64_t)HIDWORD(v417))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v418, v417 + 1, 8);
                  v80 = v417;
                }
                *((_QWORD *)__dst + v80) = v79;
                LODWORD(v417) = v417 + 1;
                v81 = *((_QWORD *)v77 + 1);
                v82 = LODWORD(v411[1]);
                if (LODWORD(v411[1]) >= (unint64_t)HIDWORD(v411[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v411, (uint64_t)&v412, LODWORD(v411[1]) + 1, 8);
                  v82 = LODWORD(v411[1]);
                }
                *((_QWORD *)v411[0] + v82) = v81;
                ++LODWORD(v411[1]);
                v77 += 16;
              }
              while (v77 != v78);
              v77 = (char *)v405[0];
            }
            if (v77 != (char *)&v406)
              free(v77);
            sub_1C5B1AB94((uint64_t)v405, (uint64_t)&v371, (uint64_t)v411);
            if (LODWORD(v411[1]))
            {
              v83 = (uint64_t *)v411[0];
              v84 = 8 * LODWORD(v411[1]);
              do
              {
                v85 = *v83++;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v366, v85);
                v84 -= 8;
              }
              while (v84);
            }
            if (__dst != v418)
              free(__dst);
            if (v411[0] != &v412)
              free(v411[0]);
            v86 = *(_QWORD *)(v61 + 32);
            v61 = v86 - 24;
            if (v86)
              v87 = v86 - 24;
            else
              v87 = 0;
            if (!v86 || *(_BYTE *)(v87 + 16) != 83)
            {
              v59 = v372.i32[0];
              goto LABEL_157;
            }
          }
          v75 = (unint64_t *)&v406;
LABEL_134:
          v76 = 0;
          goto LABEL_135;
        }
      }
LABEL_157:
      if (!v401)
      {
        v355 = 0;
        v354 = 0;
        while (1)
        {
          v93 = (uint64_t *)v398;
          v94 = v399;
          v379 = 0;
          v380 = 0;
          v381 = 0;
          if (!(_DWORD)v399)
            break;
          v95 = 8 * v399;
          v96 = (uint64_t *)v398;
          do
          {
            v97 = *v96;
            LODWORD(v411[0]) = 0;
            LODWORD(v411[0]) = sub_1C5B1B998(a1, v97);
            if (LODWORD(v411[0]) == -1)
              goto LABEL_188;
            v98 = sub_1C476BFEC((uint64_t)&v379, v411);
            ++v98[1];
            ++v96;
            v95 -= 8;
          }
          while (v95);
          v378 = 0;
          v99 = v379;
          v100 = v381;
          if (!(_DWORD)v380)
            goto LABEL_175;
          v101 = &v379[2 * v381];
          if (v381)
          {
            v102 = 0;
            while (v379[v102] >= 0xFFFFFFFE)
            {
              v102 += 2;
              if (2 * v381 == v102)
              {
                v103 = &v379[2 * v381];
                goto LABEL_176;
              }
            }
            v103 = &v379[v102];
          }
          else
          {
            v103 = v379;
          }
LABEL_176:
          v104 = &v99[2 * v100];
          if (v103 != v104)
          {
            v105 = v103;
            while (1)
            {
              v106 = v105 + 2;
              while (1)
              {
                v107 = v106;
                if (v106 == v101)
                  break;
                v106 += 2;
                if (*v107 <= 0xFFFFFFFD)
                {
                  v105 = v107;
                  goto LABEL_183;
                }
              }
              v105 = v101;
LABEL_183:
              if (v105 == v104)
                break;
              if (v103[1] < v107[1])
                v103 = v105;
            }
          }
          v378 = *v103;
          if (sub_1C476BFEC((uint64_t)&v379, &v378)[1] == 1)
          {
LABEL_188:
            LOBYTE(v382[0]) = 0;
            v387 = 0;
            goto LABEL_406;
          }
          v108 = v396;
          v109 = &v93[v94];
          v419 = v421;
          v420 = 0x400000000;
          if (!(_DWORD)v94)
          {
            v110 = 0;
            v111 = v421;
            goto LABEL_216;
          }
          do
          {
            v112 = *v93;
            v113 = *(_QWORD *)a1;
            v114 = *(unsigned int *)(a1 + 16);
            if ((_DWORD)v114)
            {
              LODWORD(v115) = ((v112 >> 4) ^ (v112 >> 9)) & (v114 - 1);
              v116 = (uint64_t *)(v113 + 16 * v115);
              v117 = *v116;
              if (v112 == *v116)
                goto LABEL_199;
              v118 = 1;
              while (v117 != -4096)
              {
                v119 = v115 + v118++;
                v115 = v119 & (v114 - 1);
                v117 = *(_QWORD *)(v113 + 16 * v115);
                if (v112 == v117)
                {
                  v116 = (uint64_t *)(v113 + 16 * v115);
                  goto LABEL_199;
                }
              }
            }
            v116 = (uint64_t *)(v113 + 16 * v114);
LABEL_199:
            if (*((_DWORD *)v116 + 2) == v378)
            {
              v120 = v420;
              if (v420 >= (unint64_t)HIDWORD(v420))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v419, (uint64_t)v421, v420 + 1, 8);
                v120 = v420;
              }
              v419[v120] = v112;
              LODWORD(v420) = v420 + 1;
            }
            else
            {
              v411[0] = *(void **)(v112 + 40);
              sub_1C6316E88((uint64_t)&v393, v411);
            }
            ++v93;
          }
          while (v93 != v109);
          v111 = v419;
          v110 = v420;
          if (!(_DWORD)v420)
          {
            v110 = 0;
LABEL_216:
            v126 = v396;
            if ((_DWORD)v396 != v108)
            {
              v375 = 0;
              v376 = 0;
              v377 = 0;
              v127 = v371;
              v128 = &v371[96 * v373];
              if (v372.i32[0])
              {
                v411[0] = v371;
                v411[1] = &v371[96 * v373];
                sub_1C5B1B188((uint64_t *)v411);
                v129 = *(int64x2_t *)v411;
              }
              else
              {
                v129 = vdupq_n_s64((unint64_t)v128);
              }
              v374 = v129;
              v130 = v129.i64[0];
              if (v128 == (char *)v129.i64[0])
              {
                v141 = 0;
              }
              else
              {
                do
                {
                  v411[0] = &v412;
                  v411[1] = (void *)0x400000000;
                  if (*(_DWORD *)(v130 + 8))
                    sub_1C49EEBE4((uint64_t)v411, v130);
                  __dst = v418;
                  v417 = 0x400000000;
                  if (*(_DWORD *)(v130 + 56))
                  {
                    sub_1C49EEBE4((uint64_t)&__dst, v130 + 48);
                    v131 = v417;
                    if ((_DWORD)v417)
                    {
                      v132 = (char *)__dst;
                      v133 = (char *)v411[0];
                      v134 = (char *)__dst + 8 * v417;
                      v135 = (char *)__dst;
                      do
                      {
                        if ((_DWORD)v396)
                        {
                          v136 = 8 * v396;
                          v137 = (char *)v395;
                          while (*(_QWORD *)v137 != *(_QWORD *)v135)
                          {
                            v137 += 8;
                            v136 -= 8;
                            if (!v136)
                            {
                              v137 = (char *)v395 + 8 * v396;
                              break;
                            }
                          }
                        }
                        else
                        {
                          v137 = (char *)v395;
                        }
                        v138 = v135 + 8;
                        if (v396 == (v137 - (_BYTE *)v395) >> 3)
                        {
                          if (v134 != v138)
                          {
                            memmove(v135, v138, v134 - v138);
                            v131 = v417;
                          }
                          LODWORD(v417) = --v131;
                          v139 = (int)v411[1];
                          v140 = (char *)v411[0] + 8 * LODWORD(v411[1]);
                          if (v140 != v133 + 8)
                          {
                            memmove(v133, v133 + 8, v140 - (v133 + 8));
                            v139 = (int)v411[1];
                            v131 = v417;
                          }
                          LODWORD(v411[1]) = v139 - 1;
                          v132 = (char *)__dst;
                        }
                        else
                        {
                          v133 += 8;
                          v135 += 8;
                        }
                        v134 = &v132[8 * v131];
                      }
                      while (v135 != v134);
                    }
                  }
                  sub_1C5B1AB94((uint64_t)v405, (uint64_t)&v375, (uint64_t)v411);
                  if (__dst != v418)
                    free(__dst);
                  if (v411[0] != &v412)
                    free(v411[0]);
                  v374.i64[0] += 96;
                  sub_1C5B1B188(v374.i64);
                  v130 = v374.i64[0];
                }
                while ((char *)v374.i64[0] != v128);
                v127 = v371;
                v141 = v377;
              }
              sub_1C5B1C4D0((uint64_t *)&v371);
              MEMORY[0x1CAA32FB4](v127, 8);
              v373 = v141;
              if (v141)
              {
                v142 = 0;
                v371 = (char *)operator new(96 * v141, (std::align_val_t)8uLL);
                v372 = v376;
                v143 = 48;
                do
                {
                  v144 = &v371[v143];
                  v145 = &v371[v143];
                  *((_QWORD *)v145 - 6) = &v371[v143 - 32];
                  v146 = (uint64_t)(v145 - 48);
                  v147 = v375;
                  v148 = v375 + v143;
                  *(_QWORD *)(v146 + 8) = 0x400000000;
                  if (*(_DWORD *)(v148 - 40))
                    sub_1C49EEBE4(v146, v148 - 48);
                  *(_QWORD *)v144 = v144 + 16;
                  *((_QWORD *)v144 + 1) = 0x400000000;
                  if (*(_DWORD *)(v148 + 8))
                    sub_1C49EEBE4((uint64_t)v144, v147 + v143);
                  v149 = atomic_load((unsigned __int8 *)&qword_1ED81D170);
                  a1 = v360;
                  if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D170))
                  {
                    qword_1ED81D190 = 0;
                    qword_1ED81D180 = (uint64_t)&qword_1ED81D190;
                    qword_1ED81D1B0 = (uint64_t)&unk_1ED81D1C0;
                    qword_1ED81D1B8 = 0x400000000;
                    qword_1ED81D188 = 0x400000001;
                    __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D180, &dword_1C475E000);
                    __cxa_guard_release(&qword_1ED81D170);
                  }
                  v411[0] = &v412;
                  v411[1] = (void *)0x400000000;
                  if ((_DWORD)qword_1ED81D188)
                    sub_1C49EEBE4((uint64_t)v411, (uint64_t)&qword_1ED81D180);
                  __dst = v418;
                  v417 = 0x400000000;
                  if ((_DWORD)qword_1ED81D1B8)
                    sub_1C49EEBE4((uint64_t)&__dst, (uint64_t)&qword_1ED81D1B0);
                  if (!sub_1C5B1B114(v146, (uint64_t)v411))
                  {
                    v150 = atomic_load((unsigned __int8 *)&qword_1ED81D178);
                    if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D178))
                    {
                      qword_1ED81D1F0 = 1;
                      qword_1ED81D1E0 = (uint64_t)&qword_1ED81D1F0;
                      qword_1ED81D210 = (uint64_t)algn_1ED81D220;
                      qword_1ED81D218 = 0x400000000;
                      qword_1ED81D1E8 = 0x400000001;
                      __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D1E0, &dword_1C475E000);
                      __cxa_guard_release(&qword_1ED81D178);
                    }
                    v405[0] = &v406;
                    v405[1] = (void *)0x400000000;
                    if ((_DWORD)qword_1ED81D1E8)
                      sub_1C49EEBE4((uint64_t)v405, (uint64_t)&qword_1ED81D1E0);
                    v408 = v410;
                    v409 = 0x400000000;
                    if ((_DWORD)qword_1ED81D218)
                    {
                      sub_1C49EEBE4((uint64_t)&v408, (uint64_t)&qword_1ED81D210);
                      if (v408 != v410)
                        free(v408);
                    }
                    if (v405[0] != &v406)
                      free(v405[0]);
                  }
                  if (__dst != v418)
                    free(__dst);
                  if (v411[0] != &v412)
                    free(v411[0]);
                  ++v142;
                  v143 += 96;
                }
                while (v142 < v373);
              }
              else
              {
                v371 = 0;
                v372 = 0;
              }
              v151 = v399;
              if ((_DWORD)v399)
              {
                v152 = (char *)v398;
                v153 = (char *)v398;
                do
                {
                  if ((_DWORD)v396)
                  {
                    v154 = 8 * v396;
                    v155 = (char *)v395;
                    while (*(_QWORD *)v155 != *(_QWORD *)(*(_QWORD *)v153 + 40))
                    {
                      v155 += 8;
                      v154 -= 8;
                      if (!v154)
                      {
                        v155 = (char *)v395 + 8 * v396;
                        break;
                      }
                    }
                  }
                  else
                  {
                    v155 = (char *)v395;
                  }
                  if (v396 == (v155 - (_BYTE *)v395) >> 3)
                  {
                    v411[0] = *(void **)(*(_QWORD *)v153 + 40);
                    sub_1C6316E88((uint64_t)&v393, v411);
                    v152 = (char *)v398;
                    v156 = v399;
                    v157 = (char *)v398 + 8 * v399;
                    if (v157 != v153 + 8)
                    {
                      memmove(v153, v153 + 8, v157 - (v153 + 8));
                      v156 = v399;
                      v152 = (char *)v398;
                    }
                    v151 = v156 - 1;
                    LODWORD(v399) = v151;
                  }
                  else
                  {
                    v153 += 8;
                  }
                }
                while (v153 != &v152[8 * v151]);
              }
              sub_1C5B1C4D0(&v375);
              MEMORY[0x1CAA32FB4](v375, 8);
              v111 = v419;
              v110 = v420;
            }
            v405[0] = &v406;
            v405[1] = (void *)0x400000000;
            v408 = v410;
            v409 = 0x400000000;
            if (v110)
            {
              v158 = 0;
              v159 = 8 * v110;
              do
              {
                v160 = *v111;
                if (v158 >= HIDWORD(v405[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v405, (uint64_t)&v406, v158 + 1, 8);
                  v158 = v405[1];
                }
                *((_QWORD *)v405[0] + v158) = v160;
                v158 = ++LODWORD(v405[1]);
                ++v111;
                v159 -= 8;
              }
              while (v159);
            }
            sub_1C5B1C760((uint64_t *)v395, (uint64_t *)v395 + v396, (uint64_t)&v408);
            v411[0] = 0;
            if (sub_1C5B1ADE4((uint64_t)v371, v373, (uint64_t)v405, (uint64_t *)v411))
            {
              v161 = v411[0];
              v162 = atomic_load((unsigned __int8 *)&qword_1ED81D178);
              if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D178))
              {
                qword_1ED81D1F0 = 1;
                qword_1ED81D1E0 = (uint64_t)&qword_1ED81D1F0;
                qword_1ED81D210 = (uint64_t)algn_1ED81D220;
                qword_1ED81D218 = 0x400000000;
                qword_1ED81D1E8 = 0x400000001;
                __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D1E0, &dword_1C475E000);
                __cxa_guard_release(&qword_1ED81D178);
              }
              v411[0] = &v412;
              v411[1] = (void *)0x400000000;
              if ((_DWORD)qword_1ED81D1E8)
                sub_1C49EEBE4((uint64_t)v411, (uint64_t)&qword_1ED81D1E0);
              __dst = v418;
              v417 = 0x400000000;
              if ((_DWORD)qword_1ED81D218)
                sub_1C49EEBE4((uint64_t)&__dst, (uint64_t)&qword_1ED81D210);
              sub_1C49EEBE4((uint64_t)v161, (uint64_t)v411);
              sub_1C49EEBE4((uint64_t)v161 + 48, (uint64_t)&__dst);
              if (__dst != v418)
                free(__dst);
              if (v411[0] != &v412)
                free(v411[0]);
              v372 = vadd_s32(v372, (int32x2_t)0x1FFFFFFFFLL);
            }
            else if (v126 == v108)
            {
              goto LABEL_323;
            }
            if (v367 != v366)
            {
              if (v368 >= 0x21 && 4 * (HIDWORD(v368) - v369) < v368)
              {
                free(v367);
                v225 = 1 << (33 - __clz(HIDWORD(v368) - v369 - 1));
                v12 = (HIDWORD(v368) - v369) > 0x10;
                v369 = 0;
                if (v12)
                  v226 = v225;
                else
                  v226 = 32;
                v368 = v226;
                v227 = (char *)malloc_type_malloc(8 * v226, 0x4065EBACuLL);
                if (!v227)
                  llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                v367 = v227;
                memset(v227, 255, 8 * v368);
                goto LABEL_315;
              }
              memset(v367, 255, 8 * v368);
            }
            v369 = 0;
            HIDWORD(v368) = 0;
LABEL_315:
            v163 = &v371[96 * v373];
            if (v372.i32[0])
            {
              v411[0] = v371;
              v411[1] = &v371[96 * v373];
              sub_1C5B1B188((uint64_t *)v411);
              v164 = (char *)v411[0];
              v165 = (char *)v411[1];
            }
            else
            {
              v164 = &v371[96 * v373];
              v165 = v164;
            }
            v411[1] = v165;
            if (v163 != v164)
            {
              do
              {
                v166 = *((unsigned int *)v164 + 2);
                if ((_DWORD)v166)
                {
                  v167 = *(uint64_t **)v164;
                  v168 = 8 * v166;
                  do
                  {
                    v169 = *v167++;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v366, v169);
                    v168 -= 8;
                  }
                  while (v168);
                }
                v411[0] = v164 + 96;
                sub_1C5B1B188((uint64_t *)v411);
                v164 = (char *)v411[0];
              }
              while (v411[0] != v163);
            }
LABEL_323:
            if (LODWORD(v405[1]))
            {
              v170 = (uint64_t *)v405[0];
              v171 = 8 * LODWORD(v405[1]);
              while (1)
              {
                v172 = (char *)sub_1C477672C((uint64_t)&v366, *v170);
                v173 = v367 == v366 ? (uint64_t *)((char *)&v368 + 4) : &v368;
                if (v172 != &v367[8 * *(unsigned int *)v173])
                  break;
                ++v170;
                v171 -= 8;
                if (!v171)
                  goto LABEL_330;
              }
LABEL_387:
              LOBYTE(v382[0]) = 0;
              v387 = 0;
              goto LABEL_399;
            }
LABEL_330:
            v174 = (char *)v419;
            v175 = (unsigned __int8 *)*v419;
            v176 = *(_DWORD *)(*v419 + 20);
            if ((_DWORD)v420)
            {
              v177 = 8 * v420;
              while (((*(_DWORD *)(*(_QWORD *)v174 + 20) ^ v176) & 0x7FFFFFF) == 0)
              {
                v174 += 8;
                v177 -= 8;
                if (!v177)
                  goto LABEL_334;
              }
              goto LABEL_387;
            }
LABEL_334:
            v178 = (const llvm::Instruction *)(v176 & 0x7FFFFFF);
            if ((v176 & 0x7FFFFFF) != 0)
            {
              v179 = 0;
              v180 = ((_DWORD)v178 - 1);
              while (1)
              {
                v181 = (char *)v419;
                v182 = v420;
                v411[0] = &v412;
                v411[1] = (void *)0x400000000;
                __dst = v418;
                v417 = 0x400000000;
                sub_1C5B1C760((uint64_t *)v395, (uint64_t *)v395 + v396, (uint64_t)&__dst);
                if ((_DWORD)v182)
                {
                  v183 = 8 * v182;
                  do
                  {
                    v184 = *(_QWORD *)v181;
                    v185 = *(_DWORD *)(*(_QWORD *)v181 + 20);
                    if ((v185 & 0x40000000) != 0)
                      v186 = *(_QWORD *)(v184 - 8);
                    else
                      v186 = v184 - 32 * (v185 & 0x7FFFFFF);
                    v187 = *(_QWORD *)(v186 + 32 * (_QWORD)v179);
                    v188 = LODWORD(v411[1]);
                    if (LODWORD(v411[1]) >= (unint64_t)HIDWORD(v411[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v411, (uint64_t)&v412, LODWORD(v411[1]) + 1, 8);
                      v188 = LODWORD(v411[1]);
                    }
                    *((_QWORD *)v411[0] + v188) = v187;
                    v189 = ++LODWORD(v411[1]);
                    v181 += 8;
                    v183 -= 8;
                  }
                  while (v183);
                }
                else
                {
                  v189 = v411[1];
                }
                if (!v189)
                {
LABEL_350:
                  v192 = 20;
                  goto LABEL_356;
                }
                v190 = v411[0];
                v191 = 8 * v189;
                while (*(_QWORD *)v411[0] == *v190)
                {
                  ++v190;
                  v191 -= 8;
                  if (!v191)
                    goto LABEL_350;
                }
                if ((llvm::canReplaceOperandWithVariable((llvm *)v175, v179) & 1) == 0)
                  break;
                v193 = v373;
                if ((sub_1C5B1ADE4((uint64_t)v371, v373, (uint64_t)v411, &v375) & 1) != 0)
                {
                  v192 = 20;
                  goto LABEL_356;
                }
                v194 = (char *)v411[0];
                if (LODWORD(v411[1]))
                {
                  v195 = 8 * LODWORD(v411[1]);
                  v196 = (_QWORD **)v411[0];
                  while (**v196 == **(_QWORD **)v411[0])
                  {
                    ++v196;
                    v195 -= 8;
                    if (!v195)
                      goto LABEL_368;
                  }
LABEL_385:
                  LOBYTE(v382[0]) = 0;
LABEL_355:
                  v387 = 0;
                  v192 = 1;
                  goto LABEL_356;
                }
LABEL_368:
                v197 = v175[16];
                if (v197 == 84)
                {
                  if (v179 == (const llvm::Instruction *)v180 && LODWORD(v411[1]))
                    goto LABEL_375;
                }
                else if (LODWORD(v411[1]) && v179 == (const llvm::Instruction *)v180 && v197 == 33)
                {
LABEL_375:
                  v198 = 8 * LODWORD(v411[1]);
                  while (*(unsigned __int8 *)(*(_QWORD *)v194 + 16) > 0x14u)
                  {
                    v194 += 8;
                    v198 -= 8;
                    if (!v198)
                      goto LABEL_378;
                  }
                  goto LABEL_385;
                }
LABEL_378:
                if (v372.i32[0])
                {
                  v199 = (4 * v372.i32[0] / 3u + 1) | ((unint64_t)(4 * v372.i32[0] / 3u + 1) >> 1);
                  v200 = v199 | (v199 >> 2) | ((v199 | (v199 >> 2)) >> 4);
                  v201 = ((v200 | (v200 >> 8)) >> 16) | v200 | (v200 >> 8);
                  if (v193 <= v201)
                    sub_1C5B1B400((void **)&v371, v201 + 1);
                }
                sub_1C5B1AB94((uint64_t)&v375, (uint64_t)&v371, (uint64_t)v411);
                if (LODWORD(v411[1]))
                {
                  v202 = (uint64_t *)v411[0];
                  v203 = 8 * LODWORD(v411[1]);
                  do
                  {
                    v204 = *v202++;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v366, v204);
                    v192 = 0;
                    v203 -= 8;
                  }
                  while (v203);
                }
                else
                {
                  v192 = 0;
                }
LABEL_356:
                if (__dst != v418)
                  free(__dst);
                if (v411[0] != &v412)
                  free(v411[0]);
                if (v192 != 20 && v192)
                {
                  a1 = v360;
                  goto LABEL_399;
                }
                v179 = (const llvm::Instruction *)((char *)v179 + 1);
                if (v179 == v178)
                {
                  v175 = (unsigned __int8 *)*v419;
                  goto LABEL_388;
                }
              }
              LOBYTE(v382[0]) = 0;
              goto LABEL_355;
            }
LABEL_388:
            v205 = v355 + sub_1C5B1BF98((uint64_t)v175);
            v412 = -1;
            v413 = &v415;
            *(_QWORD *)v414 = 0x400000000;
            HIDWORD(v411[0]) = v354 + 1;
            LODWORD(v411[0]) = v396;
            v411[1] = (void *)__PAIR64__(v205, v372.u32[0]);
            sub_1C4ECC4B8((unsigned int *)&v413, (uint64_t)&v415, v395, (_BYTE *)v395 + 8 * v396);
            *(_OWORD *)v382 = *(_OWORD *)v411;
            v383 = v412;
            v384 = v386;
            v385 = 0x400000000;
            v206 = v414[0];
            v207 = (uint64_t *)v413;
            v355 = v205;
            ++v354;
            if (!v414[0])
            {
              a1 = v360;
              goto LABEL_396;
            }
            if (v413 != &v415)
            {
              v384 = v413;
              v385 = *(_QWORD *)v414;
              v413 = &v415;
              v414[1] = 0;
              v207 = &v415;
              a1 = v360;
              goto LABEL_394;
            }
            a1 = v360;
            if (v414[0] >= 5u)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v384, (uint64_t)v386, v414[0], 8);
              v209 = v414[0];
              v207 = (uint64_t *)v413;
              if (!v414[0])
              {
                a1 = v360;
                goto LABEL_393;
              }
              v208 = v384;
              a1 = v360;
            }
            else
            {
              v208 = v386;
              v207 = &v415;
              v209 = v414[0];
            }
            memcpy(v208, v207, 8 * v209);
            v207 = (uint64_t *)v413;
LABEL_393:
            LODWORD(v385) = v206;
LABEL_394:
            v414[0] = 0;
LABEL_396:
            v387 = 1;
            if (v207 != &v415)
              free(v207);
LABEL_399:
            if (v408 != v410)
              free(v408);
            if (v405[0] != &v406)
              free(v405[0]);
            v111 = v419;
            goto LABEL_404;
          }
          v121 = 0;
          while (1)
          {
            v122 = (unsigned __int8 *)v419[v121];
            v123 = v122[16] - 38;
            v12 = v123 > 0x38;
            v124 = (1 << v123) & 0x100260000200001;
            v125 = v12 || v124 == 0;
            if (!v125 || *(_BYTE *)(*(_QWORD *)v122 + 8) == 12)
              break;
            if (v420 == ++v121)
              goto LABEL_216;
          }
          LOBYTE(v382[0]) = 0;
          v387 = 0;
LABEL_404:
          if (v111 != v421)
            free(v111);
LABEL_406:
          MEMORY[0x1CAA32FB4](v379, 4);
          if (!v387)
            goto LABEL_158;
          if (LODWORD(v382[0]) >= v403)
            v210 = 0;
          else
            v210 = -2;
          v383 = HIDWORD(v382[0]) * (LODWORD(v382[0]) - 1) - (LODWORD(v382[1]) - v59) * (LODWORD(v382[1]) - v59) + v210;
          if (v389 < HIDWORD(v389))
          {
            v211 = (char *)v388 + 72 * v389;
            v212 = *(_OWORD *)v382;
            *((_DWORD *)v211 + 4) = v383;
            *(_OWORD *)v211 = v212;
            *((_QWORD *)v211 + 4) = 0x400000000;
            *((_QWORD *)v211 + 3) = v211 + 40;
            v213 = (uint64_t)(v211 + 24);
            if ((_DWORD)v385)
              sub_1C49EEBE4(v213, (uint64_t)&v384);
            v214 = v389 + 1;
            goto LABEL_414;
          }
          v411[0] = 0;
          v353 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v388, 0, 72, (unint64_t *)v411);
          v228 = &v353[72 * v389];
          v229 = *(_OWORD *)v382;
          *((_DWORD *)v228 + 4) = v383;
          *(_OWORD *)v228 = v229;
          *((_QWORD *)v228 + 4) = 0x400000000;
          *((_QWORD *)v228 + 3) = v228 + 40;
          v230 = (uint64_t)(v228 + 24);
          if ((_DWORD)v385)
            sub_1C49EEBE4(v230, (uint64_t)&v384);
          v231 = (char *)v388;
          if ((_DWORD)v389)
          {
            v232 = 0;
            v233 = 72 * v389;
            while (2)
            {
              v234 = &v353[v232];
              v235 = &v231[v232];
              v236 = *(_OWORD *)&v231[v232];
              *((_DWORD *)v234 + 4) = *(_DWORD *)&v231[v232 + 16];
              *(_OWORD *)v234 = v236;
              v237 = &v353[v232 + 40];
              *((_QWORD *)v234 + 3) = v234 + 40;
              *((_QWORD *)v234 + 4) = 0x400000000;
              v238 = *(_DWORD *)&v231[v232 + 32];
              if (v238)
                v239 = v235 == v234;
              else
                v239 = 1;
              if (v239)
                goto LABEL_471;
              v240 = (char *)*((_QWORD *)v235 + 3);
              if (v235 + 40 == v240)
              {
                if (v238 < 5)
                {
                  v241 = *(unsigned int *)&v231[v232 + 32];
                  goto LABEL_468;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v234 + 24), (uint64_t)(v234 + 40), *(unsigned int *)&v231[v232 + 32], 8);
                v241 = *((unsigned int *)v235 + 8);
                if ((_DWORD)v241)
                {
                  v240 = (char *)*((_QWORD *)v235 + 3);
                  v237 = (char *)*((_QWORD *)v234 + 3);
LABEL_468:
                  memcpy(v237, v240, 8 * v241);
                }
                *((_DWORD *)v234 + 8) = v238;
              }
              else
              {
                *((_QWORD *)v234 + 3) = v240;
                *((_DWORD *)v234 + 8) = v238;
                *((_DWORD *)v234 + 9) = *(_DWORD *)&v231[v232 + 36];
                *((_QWORD *)v235 + 3) = v235 + 40;
                *(_DWORD *)&v231[v232 + 36] = 0;
              }
              *((_DWORD *)v235 + 8) = 0;
LABEL_471:
              v232 += 72;
              if (v233 == v232)
              {
                v231 = (char *)v388;
                if ((_DWORD)v389)
                {
                  v242 = 72 * v389;
                  do
                  {
                    v243 = *(char **)&v231[v242 - 48];
                    if (&v231[v242 - 32] != v243)
                      free(v243);
                    v242 -= 72;
                  }
                  while (v242);
                  v231 = (char *)v388;
                }
                break;
              }
              continue;
            }
          }
          v244 = (int)v411[0];
          if (v231 != v390)
            free(v231);
          v388 = v353;
          v214 = v389 + 1;
          HIDWORD(v389) = v244;
LABEL_414:
          LODWORD(v389) = v214;
          if (!v401)
          {
            v411[0] = &v412;
            v411[1] = (void *)0x400000000;
            if (!(_DWORD)v399)
              goto LABEL_439;
            v215 = (char *)v398;
            v216 = 8 * v399;
            do
            {
              v217 = *(_QWORD *)v215;
              v218 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v215 + 40) + 48);
              v219 = v218 - 24;
              if (!v218)
                v219 = 0;
              if (v217 == v219)
              {
                v405[0] = *(void **)(*(_QWORD *)v215 + 40);
                sub_1C6316E88((uint64_t)&v393, v405);
              }
              else
              {
                if (v218 == v217 + 24)
                {
                  v221 = 0;
                }
                else
                {
                  v220 = *(_QWORD *)(v217 + 24);
                  if (v220)
                    v221 = v220 - 24;
                  else
                    v221 = 0;
                }
                v222 = LODWORD(v411[1]);
                if (LODWORD(v411[1]) >= (unint64_t)HIDWORD(v411[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v411, (uint64_t)&v412, LODWORD(v411[1]) + 1, 8);
                  v222 = LODWORD(v411[1]);
                }
                *((_QWORD *)v411[0] + v222) = v221;
                ++LODWORD(v411[1]);
              }
              v215 += 8;
              v216 -= 8;
            }
            while (v216);
            v223 = (int)v411[1];
            if (LODWORD(v411[1]))
            {
              v224 = v399;
              if (v399 >= LODWORD(v411[1]))
              {
                memmove(v398, v411[0], 8 * LODWORD(v411[1]));
              }
              else
              {
                if (HIDWORD(v399) < LODWORD(v411[1]))
                {
                  LODWORD(v399) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v398, (uint64_t)v400, LODWORD(v411[1]), 8);
LABEL_435:
                  v224 = 0;
                }
                else
                {
                  if (!(_DWORD)v399)
                    goto LABEL_435;
                  memmove(v398, v411[0], 8 * v399);
                }
                if (v224 != LODWORD(v411[1]))
                  memcpy((char *)v398 + 8 * v224, (char *)v411[0] + 8 * v224, 8 * LODWORD(v411[1]) - 8 * v224);
              }
              LODWORD(v399) = v223;
            }
            else
            {
LABEL_439:
              v401 = 1;
            }
            if (v411[0] != &v412)
              free(v411[0]);
          }
          if (v387 && v384 != v386)
            free(v384);
          if (v401)
            goto LABEL_158;
        }
        v100 = 0;
        v99 = 0;
        v378 = 0;
LABEL_175:
        v103 = &v99[2 * v100];
        v101 = v103;
        goto LABEL_176;
      }
LABEL_158:
      v88 = (__int128 *)v388;
      v89 = v389;
      v90 = (__int128 *)((char *)v388 + 72 * v389);
      if ((_DWORD)v389)
      {
        v91 = v389;
        while (1)
        {
          v92 = (__int128 *)operator new(72 * v91, MEMORY[0x1E0DE4E10]);
          if (v92)
            break;
          v12 = v91 > 1;
          v91 >>= 1;
          if (!v12)
            goto LABEL_162;
        }
        v245 = v92;
        sub_1C5B1C7F8(v88, v90, v89, v92, v91);
        operator delete(v245);
      }
      else
      {
LABEL_162:
        sub_1C5B1C7F8(v88, v90, v89, 0, 0);
      }
      a1 = v360;
      v3 = v357;
      v4 = v361;
      if ((_DWORD)v389 && *((int *)v388 + 4) >= 1)
      {
        v246 = *(_OWORD *)v388;
        v412 = *((_DWORD *)v388 + 4);
        *(_OWORD *)v411 = v246;
        v413 = &v415;
        *(_QWORD *)v414 = 0x400000000;
        if (*((_DWORD *)v388 + 8))
        {
          sub_1C49EEBE4((uint64_t)&v413, (uint64_t)v388 + 24);
          v247 = v414[0];
        }
        else
        {
          v247 = 0;
        }
        if (v247 >= v358
          || (v362 = sub_1C5EBE3AC((uint64_t **)v362, (uint64_t *)v413, v247, ".gvnsink.split", 0, 0, 0, 0, 0)) != 0)
        {
          if (HIDWORD(v411[0]))
          {
            v248 = 0;
            v249 = v362 + 40;
            while (1)
            {
              v359 = v248;
              v250 = (char *)v413;
              v251 = (llvm::Instruction **)&v383;
              v382[0] = &v383;
              v382[1] = (void *)0x400000000;
              if (v414[0])
              {
                v252 = 0;
                v253 = 8 * v414[0];
                do
                {
                  v254 = *(_QWORD *)(*(_QWORD *)v250 + 40);
                  if (v254)
                    v255 = v254 - 24;
                  else
                    v255 = 0;
                  if (*(unsigned __int8 *)(v255 + 16) - 29 >= 0xB)
                    v256 = 0;
                  else
                    v256 = v255;
                  if (*(_QWORD *)(*(_QWORD *)(v256 + 40) + 48) == v256 + 24)
                  {
                    v258 = 0;
                  }
                  else
                  {
                    v257 = *(_QWORD *)(v256 + 24);
                    if (v257)
                      v258 = v257 - 24;
                    else
                      v258 = 0;
                  }
                  if (v252 >= HIDWORD(v382[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v382, (uint64_t)&v383, v252 + 1, 8);
                    v252 = v382[1];
                  }
                  *((_QWORD *)v382[0] + v252) = v258;
                  v252 = ++LODWORD(v382[1]);
                  v250 += 8;
                  v253 -= 8;
                }
                while (v253);
                v251 = (llvm::Instruction **)v382[0];
              }
              v259 = *v251;
              v419 = v421;
              v420 = 0x400000000;
              v260 = *((_DWORD *)v259 + 5);
              v261 = v260 & 0x7FFFFFF;
              if ((v260 & 0x7FFFFFF) != 0)
                break;
LABEL_580:
              v319 = v249;
              if (*(_QWORD *)(v362 + 48) != v249)
              {
                v319 = *(_QWORD *)(v362 + 48);
                while (1)
                {
                  v320 = v319 - 24;
                  if (!v319)
                    v320 = 0;
                  if (*(_BYTE *)(v320 + 16) != 83)
                    break;
                  v319 = *(_QWORD *)(v319 + 8);
                  if (v319 == v249)
                  {
                    v319 = v249;
                    goto LABEL_592;
                  }
                }
                v321 = *(unsigned __int8 *)(v319 - 8) - 38;
                v12 = v321 > 0x38;
                v322 = (1 << v321) & 0x100060000000001;
                if (!v12 && v322 != 0)
                  v319 = *(_QWORD *)(v319 + 8);
              }
LABEL_592:
              if (v319)
                v324 = (llvm::Instruction *)(v319 - 24);
              else
                v324 = 0;
              llvm::Instruction::moveBefore(v259, v324);
              if (LODWORD(v382[1]))
              {
                v325 = (llvm::Instruction **)v382[0];
                v326 = 8 * LODWORD(v382[1]);
                do
                {
                  v327 = *v325;
                  if (*v325 != v259)
                  {
                    *(_OWORD *)v405 = xmmword_1C8674C34;
                    v406 = unk_1C8674C44;
                    v407 = xmmword_1C8674C54;
                    llvm::combineMetadata((uint64_t)v259, v327, (unsigned int *)v405, 12, 1);
                    llvm::Instruction::andIRFlags((uint64_t)v259, (uint64_t)v327);
                  }
                  ++v325;
                  v326 -= 8;
                }
                while (v326);
                if (LODWORD(v382[1]))
                {
                  v328 = (llvm::ValueAsMetadata **)v382[0];
                  v329 = 8 * LODWORD(v382[1]);
                  do
                  {
                    if (*v328 != v259)
                      llvm::Value::doRAUW(*v328, v259, (llvm::Value *)1);
                    ++v328;
                    v329 -= 8;
                  }
                  while (v329);
                }
              }
              v330 = *(_QWORD *)(v362 + 48);
              v331 = v330 - 24;
              if (v330)
                v332 = v330 - 24;
              else
                v332 = 0;
              if (v330 && *(_BYTE *)(v332 + 16) == 83)
              {
                do
                {
                  v333 = *(_DWORD *)(v331 + 20);
                  if ((v333 & 0x40000000) != 0)
                  {
                    v335 = *(_QWORD **)(v331 - 8);
                    v334 = v333 & 0x7FFFFFF;
                  }
                  else
                  {
                    v334 = v333 & 0x7FFFFFF;
                    v335 = (_QWORD *)(v331 - 32 * v334);
                  }
                  v330 = *(_QWORD *)(v330 + 8);
                  if (v334)
                  {
                    v336 = 32 * v334;
                    while (1)
                    {
                      v337 = (_QWORD *)(v331 - 32 * v334);
                      if ((v333 & 0x40000000) != 0)
                        v337 = *(_QWORD **)(v331 - 8);
                      if (*v337 != *v335)
                        break;
                      v335 += 4;
                      v336 -= 32;
                      if (!v336)
                        goto LABEL_619;
                    }
                  }
                  else
                  {
LABEL_619:
                    if ((v333 & 0x40000000) != 0)
                      v338 = *(llvm::UndefValue ***)(v331 - 8);
                    else
                      v338 = (llvm::UndefValue **)(v331 - 32 * v334);
                    v339 = *v338;
                    if (*v338 == (llvm::UndefValue *)v331)
                      v339 = llvm::UndefValue::get(*(llvm::UndefValue **)v331, v339);
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v331, v339, (llvm::Value *)1);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v331 + 40) + 40, (uint64_t ***)v331);
                    v340 = *(_QWORD *)(v331 + 24);
                    v341 = *(_QWORD **)(v331 + 32);
                    *v341 = v340;
                    *(_QWORD *)(v340 + 8) = v341;
                    *(_QWORD *)(v331 + 24) = 0;
                    *(_QWORD *)(v331 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v331);
                  }
                  v342 = v330 - 24;
                  if (!v330)
                    v342 = 0;
                  v343 = *(unsigned __int8 *)(v342 + 16);
                  if (v343 == 83)
                    v331 = v342;
                  else
                    v331 = 0;
                }
                while (v330 && v343 == 83);
              }
              if (LODWORD(v382[1]))
              {
                v344 = (uint64_t ****)v382[0];
                v345 = 8 * LODWORD(v382[1]);
                do
                {
                  v346 = *v344;
                  if (*v344 != (uint64_t ***)v259)
                  {
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v346[5] + 5), *v344);
                    v347 = v346[3];
                    v348 = v346[4];
                    *v348 = (uint64_t *)v347;
                    v347[1] = (uint64_t *)v348;
                    v346[3] = 0;
                    v346[4] = 0;
                    llvm::Value::deleteValue((llvm::Value *)v346);
                  }
                  ++v344;
                  v345 -= 8;
                }
                while (v345);
              }
              if (v419 != v421)
                free(v419);
              a1 = v360;
              if (v382[0] != &v383)
                free(v382[0]);
              v248 = v359 + 1;
              v21 = HIDWORD(v411[0]);
              if ((v359 + 1) >= HIDWORD(v411[0]))
                goto LABEL_644;
            }
            v262 = 0;
            v263 = 0;
            while (1)
            {
              v264 = (int)v382[1];
              v265 = *((_DWORD *)v259 + 5);
              if (LODWORD(v382[1]))
                break;
              if ((v265 & 0x40000000) != 0)
                goto LABEL_533;
LABEL_535:
              v274 = (_DWORD *)((char *)v259 - 32 * (v265 & 0x7FFFFFF));
LABEL_536:
              v275 = *(llvm::Value **)&v274[8 * v263];
LABEL_557:
              if (v262 >= HIDWORD(v420))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v419, (uint64_t)v421, v262 + 1, 8);
                v262 = v420;
              }
              v419[v262] = (uint64_t)v275;
              v262 = v420 + 1;
              LODWORD(v420) = v420 + 1;
              if (++v263 == v261)
              {
                v305 = *((_DWORD *)v259 + 5);
                v306 = v305 & 0x7FFFFFF;
                v3 = v357;
                v249 = v362 + 40;
                if ((v305 & 0x7FFFFFF) != 0)
                {
                  v307 = 0;
                  v308 = 0;
                  v309 = 8 * v306;
                  do
                  {
                    v310 = *((_DWORD *)v259 + 5);
                    if ((v310 & 0x40000000) != 0)
                      v311 = (_DWORD *)*((_QWORD *)v259 - 1);
                    else
                      v311 = (_DWORD *)((char *)v259 - 32 * (v310 & 0x7FFFFFF));
                    v312 = &v311[v307];
                    v313 = v419[v308 / 8];
                    if (*(_QWORD *)&v311[v307])
                    {
                      **((_QWORD **)v312 + 2) = *((_QWORD *)v312 + 1);
                      v314 = *((_QWORD *)v312 + 1);
                      if (v314)
                        *(_QWORD *)(v314 + 16) = *((_QWORD *)v312 + 2);
                    }
                    *(_QWORD *)v312 = v313;
                    if (v313)
                    {
                      v317 = *(_QWORD *)(v313 + 8);
                      v315 = (_QWORD *)(v313 + 8);
                      v316 = v317;
                      v318 = &v311[v307];
                      *((_QWORD *)v318 + 1) = v317;
                      if (v317)
                        *(_QWORD *)(v316 + 16) = v318 + 2;
                      *((_QWORD *)v318 + 2) = v315;
                      *v315 = v312;
                    }
                    v308 += 8;
                    v307 += 8;
                  }
                  while (v309 != v308);
                }
                goto LABEL_580;
              }
            }
            v266 = (char *)v382[0];
            v267 = v265 & 0x40000000;
            v268 = 8 * LODWORD(v382[1]);
            while (1)
            {
              v269 = *(_QWORD *)v266;
              v270 = *(_DWORD *)(*(_QWORD *)v266 + 20);
              v271 = (v270 & 0x40000000) != 0 ? *(_QWORD *)(v269 - 8) : v269 - 32 * (v270 & 0x7FFFFFF);
              v272 = *(_QWORD *)(v271 + 32 * v263);
              v273 = v267
                   ? *(_QWORD *)(*((_QWORD *)v259 - 1) + 32 * v263)
                   : *((_QWORD *)v259 + 4 * v263 + -4 * (v265 & 0x7FFFFFF));
              if (v272 != v273)
                break;
              v266 += 8;
              v268 -= 8;
              if (!v268)
              {
                if (!v267)
                  goto LABEL_535;
LABEL_533:
                v274 = (_DWORD *)*((_QWORD *)v259 - 1);
                goto LABEL_536;
              }
            }
            v276 = *(uint64_t ***)v273;
            if ((*(_BYTE *)(v273 + 23) & 0x10) != 0)
            {
              v277 = **v276;
              v278 = *(_QWORD *)(v277 + 152);
              v279 = *(unsigned int *)(v277 + 168);
              if (!(_DWORD)v279)
                goto LABEL_544;
              LODWORD(v280) = (v279 - 1) & ((v273 >> 4) ^ (v273 >> 9));
              v281 = (uint64_t *)(v278 + 16 * v280);
              v282 = *v281;
              if (*v281 != v273)
              {
                v283 = 1;
                while (v282 != -4096)
                {
                  v284 = v280 + v283++;
                  v280 = v284 & (v279 - 1);
                  v282 = *(_QWORD *)(v278 + 16 * v280);
                  if (v282 == v273)
                  {
                    v281 = (uint64_t *)(v278 + 16 * v280);
                    goto LABEL_545;
                  }
                }
LABEL_544:
                v281 = (uint64_t *)(v278 + 16 * v279);
              }
LABEL_545:
              v285 = (_QWORD *)v281[1];
              v288 = (void *)*v285;
              v287 = (char *)(v285 + 2);
              v286 = v288;
            }
            else
            {
              v286 = 0;
              v287 = &byte_1C871356D;
            }
            LOWORD(v407) = 773;
            v405[0] = v287;
            v405[1] = v286;
            *(_QWORD *)&v406 = ".sink";
            v289 = *(uint64_t **)(v362 + 48);
            v290 = operator new(0x48uLL);
            v291 = v290;
            v290[1] = v276;
            v275 = (llvm::Value *)(v290 + 1);
            *v290 = 0;
            v290[2] = 0;
            v290[3] = 0x4000000000000053;
            *((_OWORD *)v290 + 2) = 0u;
            v292 = (char *)(v290 + 4);
            *((_OWORD *)v290 + 3) = 0u;
            *((_DWORD *)v290 + 16) = 0;
            if (v289)
            {
              v301 = v289[2];
              v290[6] = v301;
              *(_WORD *)(v301 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v290 + 31) & 0x10) != 0)
              {
                v303 = *(_QWORD *)(v301 + 56);
                if (v303)
                {
                  v304 = *(llvm::ValueSymbolTable **)(v303 + 104);
                  if (v304)
                    llvm::ValueSymbolTable::reinsertValue(v304, v275);
                }
              }
              v302 = *v289;
              v291[4] = *v289;
              v291[5] = v289;
              *(_QWORD *)(v302 + 8) = v292;
              *v289 = (uint64_t)v292;
            }
            *((_DWORD *)v291 + 17) = v264;
            llvm::Value::setName((uint64_t ***)v275, (uint64_t)v405);
            v293 = *((unsigned int *)v291 + 17);
            v294 = operator new(40 * v293);
            *v291 = v294;
            if ((_DWORD)v293)
            {
              v295 = &v294[4 * v293];
              do
              {
                *v294 = 0;
                v294[1] = 0;
                v294[2] = 0;
                v294[3] = v275;
                v294 += 4;
              }
              while (v294 != v295);
            }
            v4 = v361;
            if (LODWORD(v382[1]))
            {
              v296 = (char *)v382[0];
              v297 = 8 * LODWORD(v382[1]);
              do
              {
                v298 = *(_QWORD *)v296;
                v299 = *(_DWORD *)(*(_QWORD *)v296 + 20);
                if ((v299 & 0x40000000) != 0)
                  v300 = *(_QWORD *)(v298 - 8);
                else
                  v300 = v298 - 32 * (v299 & 0x7FFFFFF);
                sub_1C477667C(v275, *(_QWORD *)(v300 + 32 * v263), *(_QWORD *)(v298 + 40));
                v296 += 8;
                v297 -= 8;
              }
              while (v297);
            }
            v262 = v420;
            goto LABEL_557;
          }
        }
        v21 = 0;
LABEL_644:
        if (v413 != &v415)
          free(v413);
      }
      else
      {
        v21 = 0;
      }
      if (v367 != v366)
        free(v367);
      sub_1C5B1C4D0((uint64_t *)&v371);
      MEMORY[0x1CAA32FB4](v371, 8);
      v349 = (char *)v388;
      if ((_DWORD)v389)
      {
        v350 = 72 * v389;
        do
        {
          v351 = *(char **)&v349[v350 - 48];
          if (&v349[v350 - 32] != v351)
            free(v351);
          v350 -= 72;
        }
        while (v350);
        v349 = (char *)v388;
      }
      if (v349 != v390)
        free(v349);
      if (v398 != v400)
        free(v398);
      if (v395 != v397)
        free(v395);
      if ((v393 & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v394[0], 8);
LABEL_42:
      if (__base != v404)
        free(__base);
      v5 += v21;
      if (v3 == v4)
      {
        v3 = (char *)__p;
        if (__p)
          goto LABEL_664;
        return v5 != 0;
      }
    }
  }
  v5 = 0;
  if (v364)
  {
LABEL_664:
    v364 = v3;
    operator delete(v3);
  }
  return v5 != 0;
}

_QWORD *sub_1C5B1A76C(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)a1[21];
  if (v2 != a1 + 23)
    free(v2);
  sub_1C4926AE8((uint64_t)(a1 + 9));
  MEMORY[0x1CAA32FB4](a1[6], 8);
  MEMORY[0x1CAA32FB4](a1[3], 8);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t sub_1C5B1A7CC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Early GVN sinking of Expressions";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "gvn-sink";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1ED81D160;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5B1ED8C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5B1A868(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81D160;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194BD8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81D168);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B1A7CC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81D168, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B1A930(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C5648A2C((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

void sub_1C5B1A980(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE v11[32];
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v2 = atomic_load((unsigned __int8 *)&qword_1ED81D170);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D170))
  {
    qword_1ED81D190 = 0;
    qword_1ED81D180 = (uint64_t)&qword_1ED81D190;
    qword_1ED81D1B0 = (uint64_t)&unk_1ED81D1C0;
    qword_1ED81D1B8 = 0x400000000;
    qword_1ED81D188 = 0x400000001;
    __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D180, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED81D170);
  }
  v9 = v11;
  v10 = 0x400000000;
  if ((_DWORD)qword_1ED81D188)
    sub_1C49EEBE4((uint64_t)&v9, (uint64_t)&qword_1ED81D180);
  v12 = v14;
  v13 = 0x400000000;
  if ((_DWORD)qword_1ED81D1B8)
    sub_1C49EEBE4((uint64_t)&v12, (uint64_t)&qword_1ED81D1B0);
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *a1;
    v6 = 96 * v3;
    do
    {
      v7 = (_QWORD *)(v5 + v4);
      *v7 = v5 + v4 + 16;
      v7[1] = 0x400000000;
      if ((_DWORD)v10)
        sub_1C49EEBE4(v5 + v4, (uint64_t)&v9);
      v7[6] = v7 + 8;
      v8 = (uint64_t)(v7 + 6);
      *(_QWORD *)(v8 + 8) = 0x400000000;
      if ((_DWORD)v13)
        sub_1C49EEBE4(v8, (uint64_t)&v12);
      v4 += 96;
    }
    while (v6 != v4);
  }
  if (v12 != v14)
    free(v12);
  if (v9 != v11)
    free(v9);
}

uint64_t sub_1C5B1AB4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_1C5B1AB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void *v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned __int8 v11;
  uint64_t v12;
  void *v13[2];
  _BYTE v14[32];
  void *v15[2];
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  result = sub_1C5B1ADE4(*(_QWORD *)a2, *(unsigned int *)(a2 + 16), a3, (uint64_t *)v13);
  v7 = v13[0];
  if ((result & 1) != 0)
  {
    v8 = 0;
    goto LABEL_17;
  }
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a2 + 12) > v10 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5B1B400((void **)a2, v10);
  v13[0] = 0;
  sub_1C5B1ADE4(*(_QWORD *)a2, *(unsigned int *)(a2 + 16), a3, (uint64_t *)v13);
  v7 = v13[0];
LABEL_5:
  ++*(_DWORD *)(a2 + 8);
  v11 = atomic_load((unsigned __int8 *)&qword_1ED81D170);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D170))
  {
    qword_1ED81D190 = 0;
    qword_1ED81D180 = (uint64_t)&qword_1ED81D190;
    qword_1ED81D1B0 = (uint64_t)&unk_1ED81D1C0;
    qword_1ED81D1B8 = 0x400000000;
    qword_1ED81D188 = 0x400000001;
    __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D180, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED81D170);
  }
  v13[0] = v14;
  v13[1] = (void *)0x400000000;
  if ((_DWORD)qword_1ED81D188)
    sub_1C49EEBE4((uint64_t)v13, (uint64_t)&qword_1ED81D180);
  v15[0] = v16;
  v15[1] = (void *)0x400000000;
  if ((_DWORD)qword_1ED81D1B8)
    sub_1C49EEBE4((uint64_t)v15, (uint64_t)&qword_1ED81D1B0);
  if (!sub_1C5B1B114((uint64_t)v7, (uint64_t)v13))
    --*(_DWORD *)(a2 + 12);
  if (v15[0] != v16)
    free(v15[0]);
  if (v13[0] != v14)
    free(v13[0]);
  sub_1C49EEBE4((uint64_t)v7, a3);
  result = sub_1C49EEBE4((uint64_t)v7 + 48, a3 + 48);
  v8 = 1;
LABEL_17:
  v12 = *(_QWORD *)a2 + 96 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C5B1ADE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  void *v18[2];
  _BYTE v19[32];
  void *v20[2];
  _BYTE v21[32];
  void *v22[2];
  _BYTE v23[32];
  void *v24[2];
  _QWORD v25[6];

  v5 = a2;
  v25[4] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v9 = atomic_load((unsigned __int8 *)&qword_1ED81D170);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D170))
    {
      qword_1ED81D190 = 0;
      qword_1ED81D180 = (uint64_t)&qword_1ED81D190;
      qword_1ED81D1B0 = (uint64_t)&unk_1ED81D1C0;
      qword_1ED81D1B8 = 0x400000000;
      qword_1ED81D188 = 0x400000001;
      __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D180, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED81D170);
    }
    v22[0] = v23;
    v22[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D188)
      sub_1C49EEBE4((uint64_t)v22, (uint64_t)&qword_1ED81D180);
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D1B8)
      sub_1C49EEBE4((uint64_t)v24, (uint64_t)&qword_1ED81D1B0);
    v10 = atomic_load((unsigned __int8 *)&qword_1ED81D178);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D178))
    {
      qword_1ED81D1F0 = 1;
      qword_1ED81D1E0 = (uint64_t)&qword_1ED81D1F0;
      qword_1ED81D210 = (uint64_t)algn_1ED81D220;
      qword_1ED81D218 = 0x400000000;
      qword_1ED81D1E8 = 0x400000001;
      __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D1E0, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED81D178);
    }
    v18[0] = v19;
    v18[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D1E8)
      sub_1C49EEBE4((uint64_t)v18, (uint64_t)&qword_1ED81D1E0);
    v20[0] = v21;
    v20[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D218)
      sub_1C49EEBE4((uint64_t)v20, (uint64_t)&qword_1ED81D210);
    v11 = v5 - 1;
    v12 = v11 & sub_1C6193EA0(*(_QWORD **)a3, *(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8));
    v13 = a1 + 96 * v12;
    if (sub_1C5B1B114(a3, v13))
    {
      v5 = 1;
    }
    else
    {
      v17 = v12;
      v14 = 0;
      v15 = v11;
      v16 = 1;
      v5 = 1;
      while (!sub_1C5B1B114(v13, (uint64_t)v22))
      {
        if (sub_1C5B1B114(v13, (uint64_t)v18) && v14 == 0)
          v14 = v13;
        v17 = (v17 + v16) & v15;
        v13 = a1 + 96 * v17;
        ++v16;
        if (sub_1C5B1B114(a3, v13))
          goto LABEL_16;
      }
      v5 = 0;
      if (v14)
        v13 = v14;
    }
LABEL_16:
    *a4 = v13;
    if (v20[0] != v21)
      free(v20[0]);
    if (v18[0] != v19)
      free(v18[0]);
    if (v24[0] != v25)
      free(v24[0]);
    if (v22[0] != v23)
      free(v22[0]);
  }
  else
  {
    *a4 = 0;
  }
  return v5;
}

BOOL sub_1C5B1B114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == *(_DWORD *)(a2 + 8)
    && !memcmp(*(const void **)a1, *(const void **)a2, 8 * v2)
    && (v5 = *(unsigned int *)(a1 + 56), (_DWORD)v5 == *(_DWORD *)(a2 + 56)))
  {
    return memcmp(*(const void **)(a1 + 48), *(const void **)(a2 + 48), 8 * v5) == 0;
  }
  else
  {
    return 0;
  }
}

void sub_1C5B1B188(uint64_t *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6[2];
  _BYTE v7[32];
  void *v8[2];
  _BYTE v9[32];
  void *v10[2];
  _BYTE v11[32];
  void *v12[2];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1ED81D170);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D170))
  {
    qword_1ED81D190 = 0;
    qword_1ED81D180 = (uint64_t)&qword_1ED81D190;
    qword_1ED81D1B0 = (uint64_t)&unk_1ED81D1C0;
    qword_1ED81D1B8 = 0x400000000;
    qword_1ED81D188 = 0x400000001;
    __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D180, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED81D170);
  }
  v10[0] = v11;
  v10[1] = (void *)0x400000000;
  if ((_DWORD)qword_1ED81D188)
    sub_1C49EEBE4((uint64_t)v10, (uint64_t)&qword_1ED81D180);
  v12[0] = v13;
  v12[1] = (void *)0x400000000;
  if ((_DWORD)qword_1ED81D1B8)
    sub_1C49EEBE4((uint64_t)v12, (uint64_t)&qword_1ED81D1B0);
  v3 = atomic_load((unsigned __int8 *)&qword_1ED81D178);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D178))
  {
    qword_1ED81D1F0 = 1;
    qword_1ED81D1E0 = (uint64_t)&qword_1ED81D1F0;
    qword_1ED81D210 = (uint64_t)algn_1ED81D220;
    qword_1ED81D218 = 0x400000000;
    qword_1ED81D1E8 = 0x400000001;
    __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D1E0, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED81D178);
  }
  v6[0] = v7;
  v6[1] = (void *)0x400000000;
  if ((_DWORD)qword_1ED81D1E8)
    sub_1C49EEBE4((uint64_t)v6, (uint64_t)&qword_1ED81D1E0);
  v8[0] = v9;
  v8[1] = (void *)0x400000000;
  if ((_DWORD)qword_1ED81D218)
    sub_1C49EEBE4((uint64_t)v8, (uint64_t)&qword_1ED81D210);
  v4 = *a1;
  v5 = a1[1];
  while (v4 != v5 && (sub_1C5B1B114(v4, (uint64_t)v10) || sub_1C5B1B114(v4, (uint64_t)v6)))
  {
    v4 += 96;
    *a1 = v4;
  }
  if (v8[0] != v9)
    free(v8[0]);
  if (v6[0] != v7)
    free(v6[0]);
  if (v12[0] != v13)
    free(v12[0]);
  if (v10[0] != v11)
    free(v10[0]);
}

void sub_1C5B1B400(void **a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  void **v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  char *v35;
  void **v36;
  uint64_t v37;
  void *v38[2];
  _BYTE v39[32];
  void *v40[2];
  _BYTE v41[32];
  void *v42[2];
  _BYTE v43[32];
  void *v44[2];
  _QWORD v45[6];

  v2 = (uint64_t *)a1;
  v45[4] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)a1 + 4);
  v4 = (char *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  *a1 = operator new(96 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C5B1A980(v2);
    v9 = atomic_load((unsigned __int8 *)&qword_1ED81D170);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D170))
    {
      qword_1ED81D190 = 0;
      qword_1ED81D180 = (uint64_t)&qword_1ED81D190;
      qword_1ED81D1B0 = (uint64_t)&unk_1ED81D1C0;
      qword_1ED81D1B8 = 0x400000000;
      qword_1ED81D188 = 0x400000001;
      __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D180, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED81D170);
    }
    v42[0] = v43;
    v42[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D188)
      sub_1C49EEBE4((uint64_t)v42, (uint64_t)&qword_1ED81D180);
    v44[0] = v45;
    v44[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D1B8)
      sub_1C49EEBE4((uint64_t)v44, (uint64_t)&qword_1ED81D1B0);
    v10 = atomic_load((unsigned __int8 *)&qword_1ED81D178);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D178))
    {
      qword_1ED81D1F0 = 1;
      qword_1ED81D1E0 = (uint64_t)&qword_1ED81D1F0;
      qword_1ED81D210 = (uint64_t)algn_1ED81D220;
      qword_1ED81D218 = 0x400000000;
      qword_1ED81D1E8 = 0x400000001;
      __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D1E0, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED81D178);
    }
    v38[0] = v39;
    v38[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D1E8)
      sub_1C49EEBE4((uint64_t)v38, (uint64_t)&qword_1ED81D1E0);
    v40[0] = v41;
    v40[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D218)
      sub_1C49EEBE4((uint64_t)v40, (uint64_t)&qword_1ED81D210);
    if ((_DWORD)v3)
    {
      v11 = 0;
      v12 = 96 * v3;
      v13 = v4;
      v36 = (void **)v2;
      while (1)
      {
        v14 = &v4[v11];
        if (sub_1C5B1B114((uint64_t)&v4[v11], (uint64_t)v42) || sub_1C5B1B114((uint64_t)&v4[v11], (uint64_t)v38))
          goto LABEL_38;
        v37 = 0;
        sub_1C5B1ADE4(*v2, *((unsigned int *)v2 + 4), (uint64_t)&v4[v11], &v37);
        v15 = v37;
        if (v14 != (char *)v37)
          break;
LABEL_37:
        ++*((_DWORD *)v2 + 2);
LABEL_38:
        v32 = (char *)*((_QWORD *)v14 + 6);
        if (v14 + 64 != v32)
          free(v32);
        v33 = *(char **)&v4[v11];
        if (&v4[v11 + 16] != v33)
          free(v33);
        v13 += 96;
        v11 += 96;
        if (v12 == v11)
          goto LABEL_58;
      }
      v16 = &v4[v11];
      v18 = (uint64_t)&v4[v11 + 16];
      v17 = *(const void **)&v4[v11];
      if ((const void *)v18 != v17)
      {
        if (*(_QWORD *)v37 != v37 + 16)
        {
          free(*(void **)v37);
          v17 = *(const void **)v14;
        }
        *(_QWORD *)v15 = v17;
        v20 = v13 + 8;
        v35 = &v4[v11];
        *(_QWORD *)(v15 + 8) = *(_QWORD *)&v4[v11 + 8];
        *(_QWORD *)v35 = v18;
        *((_DWORD *)v35 + 3) = 0;
LABEL_28:
        *v20 = 0;
        v24 = &v4[v11];
        v25 = *(const void **)&v4[v11 + 48];
        v26 = (uint64_t)&v4[v11 + 64];
        if ((const void *)v26 != v25)
        {
          v34 = *(void **)(v15 + 48);
          if (v34 != (void *)(v15 + 64))
          {
            free(v34);
            v25 = (const void *)*((_QWORD *)v24 + 6);
          }
          *(_QWORD *)(v15 + 48) = v25;
          v29 = v13 + 56;
          *(_QWORD *)(v15 + 56) = *(_QWORD *)&v4[v11 + 56];
          *((_QWORD *)v24 + 6) = v26;
          *(_DWORD *)&v4[v11 + 60] = 0;
          goto LABEL_36;
        }
        v27 = (void **)(v15 + 48);
        v29 = v24 + 56;
        v28 = *((unsigned int *)v24 + 14);
        v30 = *(unsigned int *)(v15 + 56);
        if (v30 >= v28)
        {
          if ((_DWORD)v28)
            memmove(*v27, v25, 8 * v28);
          goto LABEL_35;
        }
        if (*(_DWORD *)(v15 + 60) < v28)
        {
          *(_DWORD *)(v15 + 56) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 48, v15 + 64, v28, 8);
          v27 = (void **)(v15 + 48);
        }
        else if ((_DWORD)v30)
        {
          memmove(*v27, v25, 8 * v30);
          v27 = (void **)(v15 + 48);
LABEL_33:
          v31 = *v29;
          if (v30 != v31)
            memcpy((char *)*v27 + 8 * v30, (const void *)(*((_QWORD *)v24 + 6) + 8 * v30), 8 * v31 - 8 * v30);
LABEL_35:
          *(_DWORD *)(v15 + 56) = v28;
LABEL_36:
          *v29 = 0;
          v2 = (uint64_t *)v36;
          goto LABEL_37;
        }
        v30 = 0;
        goto LABEL_33;
      }
      v21 = *((_DWORD *)v16 + 2);
      v20 = v16 + 8;
      v19 = v21;
      v22 = *(unsigned int *)(v37 + 8);
      if (v22 >= v21)
      {
        if ((_DWORD)v19)
          memmove(*(void **)v37, v17, 8 * v19);
        goto LABEL_27;
      }
      if (*(_DWORD *)(v37 + 12) < v19)
      {
        *(_DWORD *)(v37 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v15 + 16, v19, 8);
      }
      else if ((_DWORD)v22)
      {
        memmove(*(void **)v37, v17, 8 * v22);
LABEL_25:
        v23 = *v20;
        if (v22 != v23)
          memcpy((void *)(*(_QWORD *)v15 + 8 * v22), (const void *)(*(_QWORD *)v14 + 8 * v22), *(_QWORD *)v14 + 8 * v23 - (*(_QWORD *)v14 + 8 * v22));
LABEL_27:
        *(_DWORD *)(v15 + 8) = v19;
        goto LABEL_28;
      }
      v22 = 0;
      goto LABEL_25;
    }
LABEL_58:
    if (v40[0] != v41)
      free(v40[0]);
    if (v38[0] != v39)
      free(v38[0]);
    if (v44[0] != v45)
      free(v44[0]);
    if (v42[0] != v43)
      free(v42[0]);
    MEMORY[0x1CAA32FB4](v4, 8);
  }
  else
  {
    sub_1C5B1A980(v2);
  }
}

uint64_t sub_1C5B1B998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t *v56;
  int v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t *v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t *v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;

  v82 = a2;
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 16);
  v6 = a2 >> 4;
  if ((_DWORD)v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = (uint64_t *)(v4 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(_QWORD *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v4 + 16 * v5);
LABEL_8:
  if (v8 == (uint64_t *)(v4 + 16 * v5))
  {
    v13 = *(unsigned __int8 *)(a2 + 16);
    if (v13 <= 0x1B)
    {
      v25 = *(_DWORD *)(a1 + 248);
      if ((_DWORD)v5)
      {
        v26 = v5 - 1;
        v27 = v26 & (v6 ^ (a2 >> 9));
        v28 = (_QWORD *)(v4 + 16 * v27);
        v29 = *v28;
        if (*v28 != a2)
        {
          v30 = 0;
          v31 = 1;
          while (v29 != -4096)
          {
            if (v30)
              v32 = 0;
            else
              v32 = v29 == -8192;
            if (v32)
              v30 = v28;
            v33 = v27 + v31++;
            v27 = v33 & v26;
            v28 = (_QWORD *)(v4 + 16 * v27);
            v29 = *v28;
            if (*v28 == a2)
              goto LABEL_55;
          }
          goto LABEL_51;
        }
LABEL_55:
        *((_DWORD *)v28 + 2) = v25;
        v12 = *(unsigned int *)(a1 + 248);
        *(_DWORD *)(a1 + 248) = v12 + 1;
        return v12;
      }
    }
    else
    {
      v14 = v13 - 33;
      if (v14 <= 0x3C)
      {
        if (((1 << v14) & 0x171B3FFE23FFFF81) != 0)
        {
          v15 = sub_1C5B1C0C8(a1, a2);
          goto LABEL_14;
        }
        if ((v14 == 27 || v14 == 28) && (*(_WORD *)(a2 + 18) & 0x380) == 0)
        {
          v15 = sub_1C5B1C0C8(a1, a2);
          *(_BYTE *)(v15 + 52) = *(_BYTE *)(a2 + 18) & 1;
LABEL_14:
          v85 = v15;
          v12 = *((unsigned int *)sub_1C6144C70(a1 + 24, (uint64_t *)&v85) + 2);
          if ((_DWORD)v12)
            goto LABEL_15;
          v85 = 0;
          v84 = *(_DWORD *)(v15 + 12);
          v83 = *(_QWORD *)(v15 + 40);
          v43 = sub_1C631728C(&v84, &v83, (int *)(v15 + 48), (char *)(v15 + 52), v15 + 56);
          v85 = v43;
          v44 = *(unsigned int *)(v15 + 36);
          if ((_DWORD)v44)
          {
            v45 = *(uint64_t **)(v15 + 24);
            v46 = 8 * v44;
            do
            {
              v47 = *v45++;
              LODWORD(v83) = sub_1C5B1B998(a1, v47);
              v43 = sub_1C4ED4620((uint64_t *)&v85, (int *)&v83);
              v85 = v43;
              v46 -= 8;
            }
            while (v46);
          }
          v48 = v43;
          v49 = (uint64_t *)(a1 + 48);
          v50 = *(_QWORD *)(a1 + 48);
          v51 = *(unsigned int *)(a1 + 64);
          if ((_DWORD)v51)
          {
            v52 = ((_DWORD)v51 - 1) & (37 * v48);
            v53 = *(_QWORD *)(v50 + 16 * v52);
            if (v53 == v48)
            {
              if ((_DWORD)v51 == (_DWORD)v52)
              {
                v12 = *(unsigned int *)(a1 + 248);
                *(_DWORD *)(a1 + 248) = v12 + 1;
                goto LABEL_87;
              }
              goto LABEL_78;
            }
            v54 = 1;
            while (v53 != -1)
            {
              v55 = v52 + v54++;
              v52 = v55 & (v51 - 1);
              v53 = *(_QWORD *)(v50 + 16 * v52);
              if (v53 == v48)
                goto LABEL_77;
            }
          }
          v52 = *(unsigned int *)(a1 + 64);
LABEL_77:
          if (v52 == v51)
          {
            v12 = *(unsigned int *)(a1 + 248);
            *(_DWORD *)(a1 + 248) = v12 + 1;
            if (!(_DWORD)v51)
            {
              v81 = v48;
              v56 = 0;
              goto LABEL_81;
            }
LABEL_87:
            v59 = v51 - 1;
            v60 = (v51 - 1) & (37 * v48);
            v56 = (unint64_t *)(v50 + 16 * v60);
            v61 = *v56;
            if (v48 == *v56)
            {
LABEL_88:
              *((_DWORD *)v56 + 2) = v12;
              v85 = v15;
              *((_DWORD *)sub_1C6144C70(a1 + 24, (uint64_t *)&v85) + 2) = v12;
LABEL_15:
              v16 = *(_DWORD *)(a1 + 16);
              if (v16)
              {
                v17 = v16 - 1;
                v18 = ((v82 >> 4) ^ (v82 >> 9)) & v17;
                v19 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
                v20 = *v19;
                if (v82 == *v19)
                {
LABEL_60:
                  *((_DWORD *)v19 + 2) = v12;
                  return v12;
                }
                v21 = 0;
                v22 = 1;
                while (v20 != -4096)
                {
                  if (v21)
                    v23 = 0;
                  else
                    v23 = v20 == -8192;
                  if (v23)
                    v21 = v19;
                  v24 = v18 + v22++;
                  v18 = v24 & v17;
                  v19 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
                  v20 = *v19;
                  if (v82 == *v19)
                    goto LABEL_60;
                }
                if (v21)
                  v41 = v21;
                else
                  v41 = v19;
              }
              else
              {
                v41 = 0;
              }
              v19 = sub_1C4E38190(a1, (uint64_t)&v82, &v82, v41);
              *v19 = v82;
              *((_DWORD *)v19 + 2) = 0;
              goto LABEL_60;
            }
            v81 = v48;
            v62 = 0;
            v63 = 1;
            while (v61 != -1)
            {
              if (v62)
                v64 = 0;
              else
                v64 = v61 == -2;
              if (v64)
                v62 = v56;
              v65 = v60 + v63++;
              v60 = v65 & v59;
              v56 = (unint64_t *)(v50 + 16 * (v65 & v59));
              v61 = *v56;
              if (v81 == *v56)
                goto LABEL_88;
            }
            if (v62)
              v56 = v62;
LABEL_81:
            v57 = *(_DWORD *)(a1 + 56);
            if (4 * v57 + 4 >= (3 * v51))
            {
              sub_1C58EF750(v49, 2 * v51);
              v66 = *(_QWORD *)(a1 + 48);
              v67 = *(_DWORD *)(a1 + 64) - 1;
              v68 = v67 & (37 * v81);
              v56 = (unint64_t *)(v66 + 16 * v68);
              v69 = *v56;
              if (v81 == *v56)
                goto LABEL_112;
              v70 = 0;
              v71 = 1;
              while (v69 != -1)
              {
                if (v70)
                  v72 = 0;
                else
                  v72 = v69 == -2;
                if (v72)
                  v70 = v56;
                v73 = v68 + v71++;
                v68 = v73 & v67;
                v56 = (unint64_t *)(v66 + 16 * (v73 & v67));
                v69 = *v56;
                if (v81 == *v56)
                  goto LABEL_112;
              }
            }
            else
            {
              if ((int)v51 + ~v57 - *(_DWORD *)(a1 + 60) > v51 >> 3)
              {
LABEL_83:
                v58 = *v56;
LABEL_84:
                ++*(_DWORD *)(a1 + 56);
                if (v58 != -1)
                  --*(_DWORD *)(a1 + 60);
                *v56 = v81;
                *((_DWORD *)v56 + 2) = 0;
                goto LABEL_88;
              }
              sub_1C58EF750(v49, v51);
              v74 = *(_QWORD *)(a1 + 48);
              v75 = *(_DWORD *)(a1 + 64) - 1;
              v76 = v75 & (37 * v81);
              v56 = (unint64_t *)(v74 + 16 * v76);
              v77 = *v56;
              if (v81 == *v56)
              {
LABEL_112:
                v58 = v81;
                goto LABEL_84;
              }
              v70 = 0;
              v78 = 1;
              while (v77 != -1)
              {
                if (v70)
                  v79 = 0;
                else
                  v79 = v77 == -2;
                if (v79)
                  v70 = v56;
                v80 = v76 + v78++;
                v76 = v80 & v75;
                v56 = (unint64_t *)(v74 + 16 * (v80 & v75));
                v77 = *v56;
                if (v81 == *v56)
                  goto LABEL_112;
              }
            }
            if (v70)
              v56 = v70;
            goto LABEL_83;
          }
LABEL_78:
          v12 = *(unsigned int *)(v50 + 16 * v52 + 8);
          goto LABEL_15;
        }
      }
      v25 = *(_DWORD *)(a1 + 248);
      if ((_DWORD)v5)
      {
        v34 = v5 - 1;
        v35 = v34 & (v6 ^ (a2 >> 9));
        v28 = (_QWORD *)(v4 + 16 * v35);
        v36 = *v28;
        if (*v28 != a2)
        {
          v30 = 0;
          v37 = 1;
          while (v36 != -4096)
          {
            if (v30)
              v38 = 0;
            else
              v38 = v36 == -8192;
            if (v38)
              v30 = v28;
            v39 = v35 + v37++;
            v35 = v39 & v34;
            v28 = (_QWORD *)(v4 + 16 * v35);
            v36 = *v28;
            if (*v28 == a2)
              goto LABEL_55;
          }
LABEL_51:
          if (v30)
            v40 = v30;
          else
            v40 = v28;
          goto LABEL_54;
        }
        goto LABEL_55;
      }
    }
    v40 = 0;
LABEL_54:
    v28 = sub_1C4E38190(a1, (uint64_t)&v82, &v82, v40);
    *v28 = v82;
    *((_DWORD *)v28 + 2) = 0;
    goto LABEL_55;
  }
  return *((unsigned int *)v8 + 2);
}

uint64_t sub_1C5B1BF98(uint64_t a1)
{
  int v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if ((v1 - 60) < 2)
    return 1;
  if (v1 == 33)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4 && (*(_BYTE *)(v4 + 17) & 0x10) != 0)
      return 0;
    v8 = 7;
    if (sub_1C53E4BBC(a1, &v8, 1uLL))
    {
      v6 = *(_QWORD *)(a1 - 32);
      if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *(_QWORD *)(a1 + 72) || *(_DWORD *)(v6 + 36) != 7)
        return 1;
    }
    if (!llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
      return 1;
    v1 = *(unsigned __int8 *)(a1 + 16);
  }
  if (v1 != 84)
    return 0;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 17) & 0x10) != 0)
      return 0;
  }
  v9 = 7;
  if (sub_1C53E4BBC(a1, &v9, 1uLL))
  {
    v7 = *(_QWORD *)(a1 - 32);
    if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a1 + 72) || *(_DWORD *)(v7 + 36) != 7)
      return 1;
  }
  return llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) ^ 1;
}

unint64_t sub_1C5B1C0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int8 v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v44;
  int v45;

  v4 = a1 + 72;
  v5 = sub_1C484358C(a1 + 72, 72, 3);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = 0;
    do
    {
      ++v7;
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(v5 + 8) = 0xFFFFFFFD00000006;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = v7;
  *(_DWORD *)(v5 + 36) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)v5 = &off_1E8194B98;
  *(_DWORD *)(v5 + 48) = -1;
  *(_BYTE *)(v5 + 52) = 0;
  v8 = 64 - __clz(v7 - 1);
  if (v7)
    v9 = v8;
  else
    v9 = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 24) = sub_1C6317048((uint64_t *)(a1 + 168), v9, v4);
  v10 = *(unsigned __int8 *)(a2 + 16);
  *(_DWORD *)(v5 + 12) = v10 - 28;
  *(_QWORD *)(v5 + 40) = *(_QWORD *)a2;
  if (v10 == 91)
  {
    v11 = *(int **)(a2 + 64);
    v12 = *(unsigned int *)(a2 + 72);
    v13 = 4 * v12;
    v14 = sub_1C484358C(v4, 4 * v12, 2);
    if ((_DWORD)v12)
    {
      v15 = (_DWORD *)v14;
      do
      {
        v16 = *v11++;
        *v15++ = v16;
        v13 -= 4;
      }
      while (v13);
    }
    *(_QWORD *)(v5 + 56) = v14;
    *(_QWORD *)(v5 + 64) = v12;
  }
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_DWORD *)(v5 + 36);
  if (v17)
  {
    do
    {
      *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18++) = *(_QWORD *)(v17 + 24);
      v17 = *(_QWORD *)(v17 + 8);
    }
    while (v17);
    *(_DWORD *)(v5 + 36) = v18;
  }
  if (v18 >= 2)
    qsort(*(void **)(v5 + 24), v18, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C6317084);
  if (sub_1C5B1BF98(a2))
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = *(_QWORD *)(a2 + 40) + 40;
    if (v19 != v20)
    {
      while (1)
      {
        if (v19)
          v21 = v19 - 24;
        else
          v21 = 0;
        if (*(unsigned __int8 *)(v21 + 16) - 29 < 0xB)
          goto LABEL_58;
        if (!sub_1C5B1BF98(v21))
          goto LABEL_40;
        v22 = *(unsigned __int8 *)(v21 + 16);
        if (v22 == 60)
          goto LABEL_40;
        if (!v19 || v22 != 84)
          goto LABEL_33;
        v23 = *(_QWORD *)(v21 + 64);
        if (!v23 || (*(_BYTE *)(v23 + 17) & 0x30) == 0)
        {
          v24 = *(_DWORD *)(v21 + 20);
          if (v24 < 0)
          {
            v36 = v21 - 32 * (v24 & 0x7FFFFFF);
            v39 = *(_QWORD *)(v36 - 8);
            v37 = v36 - 8;
            v38 = v39;
            if (v39)
            {
              v40 = -v38;
              do
              {
                v41 = *(_DWORD *)(*(_QWORD *)(v37 + v40) + 8);
                v33 = v41 > 7;
                v42 = (1 << v41) & 0x83;
                if (v33 || v42 == 0)
                  goto LABEL_64;
                v40 += 16;
              }
              while (v40);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v21, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44) & 1) == 0)
          {
            break;
          }
        }
LABEL_40:
        v19 = *(_QWORD *)(v19 + 8);
        if (v19 == v20)
          goto LABEL_58;
      }
      v22 = *(unsigned __int8 *)(v21 + 16);
LABEL_33:
      if (!v19 || v22 != 33)
        goto LABEL_64;
      v25 = *(_QWORD *)(v21 + 64);
      if (!v25 || (*(_BYTE *)(v25 + 17) & 0x30) == 0)
      {
        v26 = *(_DWORD *)(v21 + 20);
        if (v26 < 0)
        {
          v27 = v21 - 32 * (v26 & 0x7FFFFFF);
          v30 = *(_QWORD *)(v27 - 8);
          v28 = v27 - 8;
          v29 = v30;
          if (v30)
          {
            v31 = -v29;
            while (1)
            {
              v32 = *(_DWORD *)(*(_QWORD *)(v28 + v31) + 8);
              v33 = v32 > 7;
              v34 = (1 << v32) & 0x83;
              if (v33 || v34 == 0)
                break;
              v31 += 16;
              if (!v31)
                goto LABEL_38;
            }
LABEL_64:
            v44 = sub_1C5B1B998(a1, v21);
            goto LABEL_59;
          }
        }
LABEL_38:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v21, 45) & 1) == 0
          && (llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44) & 1) == 0)
        {
          goto LABEL_64;
        }
      }
      goto LABEL_40;
    }
LABEL_58:
    v44 = 0;
LABEL_59:
    *(_DWORD *)(v5 + 48) = v44;
  }
  v45 = *(unsigned __int8 *)(a2 + 16);
  if ((v45 - 83) >= 0xFFFFFFFE)
    *(_DWORD *)(v5 + 12) = (*(_WORD *)(a2 + 18) & 0x3F | (v45 << 8)) - 7168;
  return v5;
}

void sub_1C5B1C3F0()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5B1C404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
    && (v2 = *(unsigned int *)(a1 + 36), (_DWORD)v2 == *(_DWORD *)(a2 + 36)))
  {
    return memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), 8 * v2) == 0;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_1C5B1C464(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;

  v5 = *(unsigned int *)(a1 + 12);
  v2 = (uint64_t *)(a1 + 40);
  v4 = sub_1C6193EA0(*(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 36));
  v5 = sub_1C63171D8((uint64_t *)&v5, v2, (uint64_t *)&v4);
  return sub_1C63170A0((uint64_t *)&v5, (int *)(a1 + 48), (char *)(a1 + 52), a1 + 56);
}

void sub_1C5B1C4D0(uint64_t *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  void *v10[2];
  _BYTE v11[32];
  void *v12[2];
  _BYTE v13[32];
  void *v14[2];
  _BYTE v15[32];
  void *v16[2];
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a1 + 4))
  {
    v2 = atomic_load((unsigned __int8 *)&qword_1ED81D170);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D170))
    {
      qword_1ED81D190 = 0;
      qword_1ED81D180 = (uint64_t)&qword_1ED81D190;
      qword_1ED81D1B0 = (uint64_t)&unk_1ED81D1C0;
      qword_1ED81D1B8 = 0x400000000;
      qword_1ED81D188 = 0x400000001;
      __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D180, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED81D170);
    }
    v14[0] = v15;
    v14[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D188)
      sub_1C49EEBE4((uint64_t)v14, (uint64_t)&qword_1ED81D180);
    v16[0] = v17;
    v16[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D1B8)
      sub_1C49EEBE4((uint64_t)v16, (uint64_t)&qword_1ED81D1B0);
    v3 = atomic_load((unsigned __int8 *)&qword_1ED81D178);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81D178))
    {
      qword_1ED81D1F0 = 1;
      qword_1ED81D1E0 = (uint64_t)&qword_1ED81D1F0;
      qword_1ED81D210 = (uint64_t)algn_1ED81D220;
      qword_1ED81D218 = 0x400000000;
      qword_1ED81D1E8 = 0x400000001;
      __cxa_atexit((void (*)(void *))sub_1C5B1AB4C, &qword_1ED81D1E0, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED81D178);
    }
    v10[0] = v11;
    v10[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D1E8)
      sub_1C49EEBE4((uint64_t)v10, (uint64_t)&qword_1ED81D1E0);
    v12[0] = v13;
    v12[1] = (void *)0x400000000;
    if ((_DWORD)qword_1ED81D218)
      sub_1C49EEBE4((uint64_t)v12, (uint64_t)&qword_1ED81D210);
    v4 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      v6 = 96 * v4;
      v7 = (_QWORD *)(v5 + 64);
      do
      {
        v8 = (_QWORD *)*(v7 - 2);
        if (v7 != v8)
          free(v8);
        v9 = (char *)*(v7 - 8);
        if (v7 - 6 != (_QWORD *)v9)
          free(v9);
        v7 += 12;
        v6 -= 96;
      }
      while (v6);
    }
    if (v12[0] != v13)
      free(v12[0]);
    if (v10[0] != v11)
      free(v10[0]);
    if (v16[0] != v17)
      free(v16[0]);
    if (v14[0] != v15)
      free(v14[0]);
  }
}

uint64_t *sub_1C5B1C760(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (result != a2)
  {
    v5 = result;
    v6 = a3 + 16;
    v7 = *(_DWORD *)(a3 + 8);
    do
    {
      v8 = *v5;
      if (v7 >= *(_DWORD *)(a3 + 12))
      {
        result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v7 + 1, 8);
        v7 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = v8;
      v7 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v7;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1C5B1C7F8(__int128 *a1, __int128 *a2, unint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unsigned int v17;
  __int128 *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  char *v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __int128 *v33;
  _QWORD *v34;
  void **v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 *v41;
  void **v42;
  __int128 v43;
  const void *v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  char *v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  void **v62;
  char *v63;
  unint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  const void *v74;
  unint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  __int128 *v86;
  uint64_t v87;
  char *__src;
  __int128 v89;
  int v90;
  void *v91;
  unint64_t v92;
  _QWORD v93[5];

  v93[4] = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return;
  v6 = a1;
  if (a3 == 2)
  {
    if (*((_DWORD *)a2 - 14) > *((_DWORD *)a1 + 4))
      sub_1C5B1D21C(a1, (__int128 *)((char *)a2 - 72));
    return;
  }
  if ((uint64_t)a3 > 0)
  {
    v10 = a3 >> 1;
    v11 = (__int128 *)((char *)a1 + 72 * (a3 >> 1));
    v12 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1C5B1C7F8(a1, v11, v12, a4, a5);
      sub_1C5B1C7F8((char *)v6 + 72 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
      sub_1C5B1E0D8(v6, (__int128 *)((char *)v6 + 72 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      return;
    }
    sub_1C5B1D550(a1, v11, v12, (uint64_t)a4);
    v38 = (uint64_t)a4 + 72 * v10;
    sub_1C5B1D550((__int128 *)((char *)v6 + 72 * (a3 >> 1)), a2, a3 - (a3 >> 1), v38);
    v85 = a3;
    v86 = a4;
    v39 = (char *)a4 + 72 * a3;
    v40 = v38;
    v41 = a4;
    __src = v39;
    while (1)
    {
      if ((char *)v40 == v39)
      {
        if (v41 == (__int128 *)v38)
          goto LABEL_152;
        v57 = 0;
        v58 = v41;
        v87 = v38;
        while (2)
        {
          v59 = (uint64_t)v6 + v57;
          v60 = (char *)v41 + v57;
          v61 = *(__int128 *)((char *)v41 + v57);
          *(_DWORD *)(v59 + 16) = *(_DWORD *)((char *)v41 + v57 + 16);
          *(_OWORD *)v59 = v61;
          if (v6 != v41)
          {
            v62 = (void **)(v59 + 24);
            v63 = (char *)*((_QWORD *)v60 + 3);
            if (v60 + 40 == v63)
            {
              v65 = (_DWORD *)((char *)v41 + v57 + 32);
              v64 = *v65;
              v66 = (uint64_t)v6 + v57;
              v67 = *(unsigned int *)((char *)v6 + v57 + 32);
              if (v67 >= v64)
              {
                if ((_DWORD)v64)
                  memmove(*v62, v63, 8 * v64);
              }
              else
              {
                if (*(_DWORD *)(v66 + 36) < v64)
                {
                  *(_DWORD *)(v66 + 32) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v62, (uint64_t)v6 + v57 + 40, v64, 8);
LABEL_117:
                  v67 = 0;
                }
                else
                {
                  if (!(_DWORD)v67)
                    goto LABEL_117;
                  memmove(*v62, v63, 8 * v67);
                }
                v68 = *v65;
                if (v67 != v68)
                  memcpy((char *)*v62 + 8 * v67, (const void *)(*((_QWORD *)v60 + 3) + 8 * v67), 8 * v68 - 8 * v67);
              }
              *(_DWORD *)(v66 + 32) = v64;
            }
            else
            {
              if ((char *)v6 + v57 + 40 != *v62)
              {
                free(*v62);
                v63 = (char *)*((_QWORD *)v60 + 3);
              }
              *v62 = v63;
              v65 = v58 + 2;
              *(_QWORD *)((char *)v6 + v57 + 32) = *(_QWORD *)((char *)v41 + v57 + 32);
              *((_QWORD *)v60 + 3) = v60 + 40;
              *(_DWORD *)((char *)v41 + v57 + 36) = 0;
            }
            *v65 = 0;
            v38 = v87;
          }
          v58 = (__int128 *)((char *)v58 + 72);
          v57 += 72;
          if ((__int128 *)((char *)v41 + v57) == (__int128 *)v38)
            goto LABEL_152;
          continue;
        }
      }
      v42 = (void **)v6 + 3;
      if (*(_DWORD *)(v40 + 16) <= *((_DWORD *)v41 + 4))
      {
        v49 = *v41;
        *((_DWORD *)v6 + 4) = *((_DWORD *)v41 + 4);
        *v6 = v49;
        if (v6 != v41)
        {
          v50 = (char *)*((_QWORD *)v41 + 3);
          if (v50 == (char *)v41 + 40)
          {
            v51 = v41 + 2;
            v52 = *((unsigned int *)v41 + 8);
            v53 = *((unsigned int *)v6 + 8);
            if (v53 >= v52)
            {
              if ((_DWORD)v52)
                memmove(*v42, v50, 8 * v52);
              *((_DWORD *)v6 + 8) = v52;
              v39 = __src;
            }
            else
            {
              if (*((_DWORD *)v6 + 9) < v52)
              {
                *((_DWORD *)v6 + 8) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6 + 24, (uint64_t)v6 + 40, v52, 8);
LABEL_86:
                v53 = 0;
              }
              else
              {
                if (!(_DWORD)v53)
                  goto LABEL_86;
                memmove(*v42, v50, 8 * v53);
              }
              v54 = *v51;
              if (v53 != v54)
                memcpy((char *)*v42 + 8 * v53, (const void *)(*((_QWORD *)v41 + 3) + 8 * v53), 8 * v54 - 8 * v53);
              *((_DWORD *)v6 + 8) = v52;
            }
          }
          else
          {
            v56 = (char *)*((_QWORD *)v6 + 3);
            if ((char *)v6 + 40 != v56)
            {
              free(v56);
              v50 = (char *)*((_QWORD *)v41 + 3);
            }
            *((_QWORD *)v6 + 3) = v50;
            v51 = v41 + 2;
            *((_QWORD *)v6 + 4) = *((_QWORD *)v41 + 4);
            *((_QWORD *)v41 + 3) = (char *)v41 + 40;
            *((_DWORD *)v41 + 9) = 0;
          }
          *v51 = 0;
        }
        v41 = (__int128 *)((char *)v41 + 72);
        goto LABEL_92;
      }
      v43 = *(_OWORD *)v40;
      *((_DWORD *)v6 + 4) = *(_DWORD *)(v40 + 16);
      *v6 = v43;
      if (v6 != (__int128 *)v40)
        break;
LABEL_80:
      v40 += 72;
LABEL_92:
      v6 = (__int128 *)((char *)v6 + 72);
      if (v41 == (__int128 *)v38)
      {
        if ((char *)v40 != v39)
        {
          v69 = 0;
          v70 = v40;
          while (1)
          {
            v71 = v40 + v69;
            v72 = (uint64_t)v6 + v69;
            v73 = *(_OWORD *)(v40 + v69);
            *(_DWORD *)(v72 + 16) = *(_DWORD *)(v40 + v69 + 16);
            *(_OWORD *)v72 = v73;
            if (v6 != (__int128 *)v40)
              break;
LABEL_143:
            v70 += 72;
            v69 += 72;
            if ((char *)(v40 + v69) == v39)
              goto LABEL_152;
          }
          v74 = *(const void **)(v71 + 24);
          if ((const void *)(v71 + 40) == v74)
          {
            v76 = (_DWORD *)(v40 + v69 + 32);
            v75 = *v76;
            v77 = (uint64_t)v6 + v69;
            v78 = *(unsigned int *)((char *)v6 + v69 + 32);
            if (v78 >= v75)
            {
              if ((_DWORD)v75)
                memmove(*(void **)(v72 + 24), v74, 8 * v75);
            }
            else
            {
              v79 = (_QWORD *)(v72 + 24);
              if (*(_DWORD *)(v77 + 36) < v75)
              {
                *(_DWORD *)(v77 + 32) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v72 + 24, (uint64_t)v6 + v69 + 40, v75, 8);
                v79 = (_QWORD *)(v72 + 24);
LABEL_138:
                v78 = 0;
              }
              else
              {
                if (!(_DWORD)v78)
                  goto LABEL_138;
                memmove(*(void **)(v72 + 24), v74, 8 * v78);
                v79 = (_QWORD *)(v72 + 24);
              }
              v80 = *v76;
              if (v78 != v80)
                memcpy((void *)(*v79 + 8 * v78), (const void *)(*(_QWORD *)(v71 + 24) + 8 * v78), 8 * v80 - 8 * v78);
            }
            *(_DWORD *)(v77 + 32) = v75;
          }
          else
          {
            v81 = *(char **)(v72 + 24);
            if ((char *)v6 + v69 + 40 != v81)
            {
              free(v81);
              v74 = *(const void **)(v71 + 24);
            }
            *(_QWORD *)(v72 + 24) = v74;
            v76 = (_DWORD *)(v70 + 32);
            *(_QWORD *)((char *)v6 + v69 + 32) = *(_QWORD *)(v40 + v69 + 32);
            *(_QWORD *)(v71 + 24) = v71 + 40;
            *(_DWORD *)(v40 + v69 + 36) = 0;
          }
          *v76 = 0;
          v39 = __src;
          goto LABEL_143;
        }
LABEL_152:
        if (v86)
        {
          v82 = v85;
          v83 = (_QWORD *)v86 + 5;
          do
          {
            v84 = (_QWORD *)*(v83 - 2);
            if (v83 != v84)
              free(v84);
            v83 += 9;
            --v82;
          }
          while (v82);
        }
        return;
      }
    }
    v44 = *(const void **)(v40 + 24);
    if (v44 != (const void *)(v40 + 40))
    {
      v55 = (char *)*((_QWORD *)v6 + 3);
      if ((char *)v6 + 40 != v55)
      {
        free(v55);
        v44 = *(const void **)(v40 + 24);
      }
      *((_QWORD *)v6 + 3) = v44;
      v45 = (_DWORD *)(v40 + 32);
      *((_QWORD *)v6 + 4) = *(_QWORD *)(v40 + 32);
      *(_QWORD *)(v40 + 24) = v40 + 40;
      *(_DWORD *)(v40 + 36) = 0;
      goto LABEL_79;
    }
    v45 = (_DWORD *)(v40 + 32);
    v46 = *(unsigned int *)(v40 + 32);
    v47 = *((unsigned int *)v6 + 8);
    if (v47 >= v46)
    {
      if ((_DWORD)v46)
        memmove(*v42, v44, 8 * v46);
      *((_DWORD *)v6 + 8) = v46;
      v39 = __src;
      goto LABEL_79;
    }
    if (*((_DWORD *)v6 + 9) < v46)
    {
      *((_DWORD *)v6 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6 + 24, (uint64_t)v6 + 40, v46, 8);
    }
    else if ((_DWORD)v47)
    {
      memmove(*v42, v44, 8 * v47);
      goto LABEL_76;
    }
    v47 = 0;
LABEL_76:
    v48 = *v45;
    if (v47 != v48)
      memcpy((char *)*v42 + 8 * v47, (const void *)(*(_QWORD *)(v40 + 24) + 8 * v47), 8 * v48 - 8 * v47);
    *((_DWORD *)v6 + 8) = v46;
LABEL_79:
    *v45 = 0;
    goto LABEL_80;
  }
  if (a1 == a2)
    return;
  v13 = (__int128 *)((char *)a1 + 72);
  if ((__int128 *)((char *)a1 + 72) == a2)
    return;
  v14 = 0;
  v15 = a1;
  do
  {
    v16 = v13;
    if (*((_DWORD *)v15 + 22) <= *((_DWORD *)v15 + 4))
      goto LABEL_53;
    v89 = *v13;
    v90 = *((_DWORD *)v13 + 4);
    v91 = v93;
    v92 = 0x400000000;
    v17 = *((_DWORD *)v15 + 26);
    if (!v17 || &v91 == (void **)(v15 + 6))
      goto LABEL_21;
    v18 = (__int128 *)*((_QWORD *)v15 + 12);
    if (v18 != v15 + 7)
    {
      v91 = (void *)*((_QWORD *)v15 + 12);
      v92 = __PAIR64__(*((_DWORD *)v15 + 27), v17);
      *((_QWORD *)v15 + 12) = v15 + 7;
      *((_DWORD *)v15 + 27) = 0;
      goto LABEL_20;
    }
    if (v17 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)v93, *((unsigned int *)v15 + 26), 8);
      v20 = *((unsigned int *)v15 + 26);
      if (!(_DWORD)v20)
        goto LABEL_19;
      v18 = (__int128 *)*((_QWORD *)v15 + 12);
      v19 = v91;
    }
    else
    {
      v19 = v93;
      v20 = *((unsigned int *)v15 + 26);
    }
    memcpy(v19, v18, 8 * v20);
LABEL_19:
    LODWORD(v92) = v17;
LABEL_20:
    *((_DWORD *)v15 + 26) = 0;
LABEL_21:
    v21 = v14;
    while (1)
    {
      v22 = v21;
      v23 = (uint64_t)v6 + v21;
      *(_OWORD *)(v23 + 72) = *(__int128 *)((char *)v6 + v21);
      *(_DWORD *)(v23 + 88) = *(_DWORD *)((char *)v6 + v21 + 16);
      v24 = (void **)((char *)v6 + v21 + 96);
      v25 = *(char **)((char *)v6 + v21 + 24);
      if ((char *)v6 + v21 + 40 == v25)
      {
        v26 = (_DWORD *)(v23 + 32);
        v27 = *(unsigned int *)(v23 + 32);
        v28 = *(unsigned int *)(v23 + 104);
        if (v28 >= v27)
        {
          if ((_DWORD)v27)
            memmove(*v24, v25, 8 * v27);
          goto LABEL_29;
        }
        v29 = (uint64_t)v6 + v21;
        if (*(_DWORD *)((char *)v6 + v22 + 108) < v27)
        {
          *(_DWORD *)(v23 + 104) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v24, v29 + 112, v27, 8);
        }
        else if ((_DWORD)v28)
        {
          memmove(*v24, v25, 8 * v28);
LABEL_27:
          v30 = *v26;
          if (v28 != v30)
            memcpy((void *)(*(_QWORD *)(v23 + 96) + 8 * v28), (const void *)(*(_QWORD *)(v23 + 24) + 8 * v28), 8 * v30 - 8 * v28);
LABEL_29:
          *(_DWORD *)(v23 + 104) = v27;
          goto LABEL_30;
        }
        v28 = 0;
        goto LABEL_27;
      }
      v31 = *v24;
      if ((void *)(v23 + 112) != v31)
      {
        free(v31);
        v25 = *(char **)(v23 + 24);
      }
      v32 = (uint64_t)v6 + v22;
      *(_QWORD *)(v23 + 96) = v25;
      v26 = v15 + 2;
      *(_QWORD *)(v32 + 104) = *(_QWORD *)((char *)v6 + v22 + 32);
      *(_QWORD *)(v23 + 24) = v23 + 40;
      *(_DWORD *)(v32 + 36) = 0;
LABEL_30:
      *v26 = 0;
      if (!v22)
        break;
      v15 = (__int128 *)((char *)v15 - 72);
      v21 = v22 - 72;
      if (v90 <= *(_DWORD *)((char *)v6 + v22 - 56))
      {
        v33 = (__int128 *)((char *)v6 + v22);
        goto LABEL_41;
      }
    }
    v33 = v6;
LABEL_41:
    *v33 = v89;
    *((_DWORD *)v33 + 4) = v90;
    v34 = v91;
    if (v33 != &v89)
    {
      v35 = (void **)((char *)v6 + v22 + 24);
      if (v91 == v93)
      {
        v36 = v92;
        v37 = *((unsigned int *)v33 + 8);
        if (v37 >= v92)
        {
          if ((_DWORD)v92)
            memmove(*v35, v93, 8 * v92);
          *((_DWORD *)v33 + 8) = v36;
        }
        else
        {
          if (*((_DWORD *)v33 + 9) < v92)
          {
            *((_DWORD *)v33 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6 + v22 + 24, (uint64_t)v33 + 40, v36, 8);
LABEL_46:
            v37 = 0;
          }
          else
          {
            if (!(_DWORD)v37)
              goto LABEL_46;
            memmove(*v35, v93, 8 * v37);
          }
          if (v37 != v92)
            memcpy((char *)*v35 + 8 * v37, (char *)v91 + 8 * v37, 8 * v92 - 8 * v37);
          *((_DWORD *)v33 + 8) = v36;
        }
      }
      else
      {
        if (*v35 != (char *)v33 + 40)
        {
          free(*v35);
          v34 = v91;
        }
        *v35 = v34;
        *((_QWORD *)v33 + 4) = v92;
        v91 = v93;
        HIDWORD(v92) = 0;
      }
      LODWORD(v92) = 0;
      v34 = v91;
    }
    if (v34 != v93)
      free(v34);
LABEL_53:
    v13 = (__int128 *)((char *)v16 + 72);
    v14 += 72;
    v15 = v16;
  }
  while ((__int128 *)((char *)v16 + 72) != a2);
}

void sub_1C5B1D21C(__int128 *a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  void **v9;
  char *v10;
  void **v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  int v20;
  void *v21;
  unint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  v19 = *a1;
  v20 = *((_DWORD *)a1 + 4);
  v21 = v23;
  v22 = 0x400000000;
  v4 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v4 && &v19 != a1)
  {
    v5 = (char *)*((_QWORD *)a1 + 3);
    if (v5 != (char *)a1 + 40)
    {
      v21 = (void *)*((_QWORD *)a1 + 3);
      v22 = __PAIR64__(*((_DWORD *)a1 + 9), v4);
      *((_QWORD *)a1 + 3) = (char *)a1 + 40;
      *((_DWORD *)a1 + 9) = 0;
      goto LABEL_8;
    }
    if (v4 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v4, 8);
      v7 = *((unsigned int *)a1 + 8);
      if (!(_DWORD)v7)
        goto LABEL_7;
      v5 = (char *)*((_QWORD *)a1 + 3);
      v6 = v21;
    }
    else
    {
      v6 = v23;
      v7 = v4;
    }
    memcpy(v6, v5, 8 * v7);
LABEL_7:
    LODWORD(v22) = v4;
LABEL_8:
    LODWORD(v4) = 0;
    *((_DWORD *)a1 + 8) = 0;
  }
  v8 = *a2;
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *a1 = v8;
  v9 = (void **)a2 + 3;
  if (a1 == a2)
    goto LABEL_19;
  v10 = (char *)*((_QWORD *)a2 + 3);
  if (v10 != (char *)a2 + 40)
  {
    v18 = (char *)*((_QWORD *)a1 + 3);
    if (v18 != (char *)a1 + 40)
    {
      free(v18);
      v10 = (char *)*v9;
    }
    *((_QWORD *)a1 + 3) = v10;
    v13 = a2 + 2;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 3) = (char *)a2 + 40;
    *((_DWORD *)a2 + 9) = 0;
    goto LABEL_18;
  }
  v11 = (void **)a1 + 3;
  v13 = a2 + 2;
  v12 = *((unsigned int *)a2 + 8);
  if (v4 >= v12)
  {
    if ((_DWORD)v12)
      memmove(*v11, v10, 8 * v12);
    goto LABEL_17;
  }
  if (*((_DWORD *)a1 + 9) < v12)
  {
    *((_DWORD *)a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1 + 24, (uint64_t)a1 + 40, v12, 8);
    v11 = (void **)a1 + 3;
    goto LABEL_14;
  }
  if (!(_DWORD)v4)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v4 = v4;
  memmove(*v11, v10, 8 * v4);
  v11 = (void **)a1 + 3;
LABEL_15:
  v14 = *v13;
  if (v4 != v14)
    memcpy((char *)*v11 + 8 * v4, (char *)*v9 + 8 * v4, (_BYTE *)*v9 + 8 * v14 - ((_BYTE *)*v9 + 8 * v4));
LABEL_17:
  *((_DWORD *)a1 + 8) = v12;
LABEL_18:
  *v13 = 0;
LABEL_19:
  *a2 = v19;
  *((_DWORD *)a2 + 4) = v20;
  v15 = v21;
  if (&v19 == a2)
    goto LABEL_29;
  if (v21 != v23)
  {
    if (*((__int128 **)a2 + 3) != (__int128 *)((char *)a2 + 40))
    {
      free(*((void **)a2 + 3));
      v15 = v21;
    }
    *((_QWORD *)a2 + 3) = v15;
    *((_QWORD *)a2 + 4) = v22;
    v21 = v23;
    HIDWORD(v22) = 0;
    goto LABEL_28;
  }
  v16 = v22;
  v17 = *((unsigned int *)a2 + 8);
  if (v17 >= v22)
  {
    if ((_DWORD)v22)
      memmove(*v9, v23, 8 * v22);
    goto LABEL_27;
  }
  if (*((_DWORD *)a2 + 9) < v22)
  {
    *((_DWORD *)a2 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2 + 24, (uint64_t)a2 + 40, v16, 8);
    goto LABEL_24;
  }
  if (!(_DWORD)v17)
  {
LABEL_24:
    v17 = 0;
    goto LABEL_25;
  }
  memmove(*v9, v23, 8 * v17);
LABEL_25:
  if (v17 != v22)
    memcpy((char *)*v9 + 8 * v17, (char *)v21 + 8 * v17, 8 * v22 - 8 * v17);
LABEL_27:
  *((_DWORD *)a2 + 8) = v16;
LABEL_28:
  LODWORD(v22) = 0;
  v15 = v21;
LABEL_29:
  if (v15 != v23)
    free(v15);
}

void sub_1C5B1D550(__int128 *a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v7;
  __int128 v8;
  void *v9;
  void **v10;
  unsigned int v11;
  _DWORD *v12;
  __int128 *v13;
  const void *v14;
  uint64_t v15;
  __int128 *v16;
  void **v17;
  void *v18;
  __int128 v19;
  unsigned int v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  void *v26;
  void **v27;
  unsigned int v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  void *v32;
  void **v33;
  unsigned int v34;
  __int128 *v35;
  const void *v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  void *v42;
  unsigned int v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  const void *v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  __int128 v57;
  unsigned int v58;
  __int128 *v59;
  uint64_t v60;
  unsigned int *v61;
  __int128 v62;
  __int128 **v63;
  __int128 *v64;
  const void *v65;
  void **v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  int v73;
  int v74;
  __int128 v75;
  unsigned int v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  void *v81;
  void **v82;
  unsigned int v83;
  __int128 *v84;
  uint64_t v85;
  __int128 *v86;
  __int128 *v87;
  uint64_t v88;
  void *v89;
  __int128 v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  unsigned int v95;
  char *v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  void *v104;
  void **v105;
  unsigned int v106;
  BOOL v107;
  void *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  void *v115;
  unsigned int v116;
  BOOL v117;
  const void *v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  __int128 *v127;
  uint64_t v128;
  uint64_t v129;

  if (!a3)
    return;
  v4 = a4;
  v7 = a1;
  if (a3 == 2)
  {
    v16 = (__int128 *)((char *)a2 - 72);
    v17 = (void **)(a4 + 24);
    v18 = (void *)(a4 + 40);
    if (*((_DWORD *)a2 - 14) > *((_DWORD *)a1 + 4))
    {
      v19 = *v16;
      *(_DWORD *)(a4 + 16) = *((_DWORD *)a2 - 14);
      *(_OWORD *)a4 = v19;
      *(_QWORD *)(a4 + 24) = v18;
      *(_QWORD *)(a4 + 32) = 0x400000000;
      v20 = *((_DWORD *)a2 - 10);
      if (!v20 || v17 == (void **)(a2 - 3))
      {
LABEL_20:
        v24 = *v7;
        v25 = *((_DWORD *)v7 + 4);
        v26 = (void *)(v4 + 112);
        *(_QWORD *)(v4 + 96) = v4 + 112;
        v27 = (void **)(v4 + 96);
        *(_DWORD *)(v4 + 88) = v25;
        *(_OWORD *)(v4 + 72) = v24;
        *(_QWORD *)(v4 + 104) = 0x400000000;
        v12 = v7 + 2;
        v28 = *((_DWORD *)v7 + 8);
        if (!v28 || v27 == (void **)((char *)v7 + 24))
          return;
        v29 = (__int128 *)*((_QWORD *)v7 + 3);
        v14 = (char *)v7 + 40;
        if (v29 != (__int128 *)((char *)v7 + 40))
        {
          *(_QWORD *)(v4 + 96) = v29;
          v123 = *((_DWORD *)v7 + 9);
          *(_DWORD *)(v4 + 104) = v28;
          *(_DWORD *)(v4 + 108) = v123;
          goto LABEL_183;
        }
        if (v28 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 96, v4 + 112, *((unsigned int *)v7 + 8), 8);
          v30 = *v12;
          if (!(_DWORD)v30)
            goto LABEL_26;
          v14 = (const void *)*((_QWORD *)v7 + 3);
          v26 = *v27;
        }
        else
        {
          v30 = *((unsigned int *)v7 + 8);
        }
        memcpy(v26, v14, 8 * v30);
LABEL_26:
        *(_DWORD *)(v4 + 104) = v28;
        goto LABEL_115;
      }
      v21 = (__int128 *)*((_QWORD *)a2 - 6);
      v22 = a2 - 2;
      if (v21 != a2 - 2)
      {
        *(_QWORD *)(a4 + 24) = v21;
        v122 = *((_DWORD *)a2 - 9);
        *(_DWORD *)(a4 + 32) = v20;
        *(_DWORD *)(a4 + 36) = v122;
        *((_QWORD *)a2 - 6) = v22;
        *((_DWORD *)a2 - 9) = 0;
        goto LABEL_19;
      }
      if (v20 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 24, a4 + 40, *((unsigned int *)a2 - 10), 8);
        v23 = *((unsigned int *)a2 - 10);
        if (!(_DWORD)v23)
          goto LABEL_18;
        v22 = (__int128 *)*((_QWORD *)a2 - 6);
        v18 = *v17;
      }
      else
      {
        v23 = *((unsigned int *)a2 - 10);
      }
      memcpy(v18, v22, 8 * v23);
LABEL_18:
      *(_DWORD *)(v4 + 32) = v20;
LABEL_19:
      *((_DWORD *)a2 - 10) = 0;
      goto LABEL_20;
    }
    v75 = *a1;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
    *(_OWORD *)a4 = v75;
    *(_QWORD *)(a4 + 24) = v18;
    *(_QWORD *)(a4 + 32) = 0x400000000;
    v76 = *((_DWORD *)a1 + 8);
    if (!v76 || (__int128 *)a4 == a1)
    {
LABEL_108:
      v79 = *v16;
      v80 = *((_DWORD *)a2 - 14);
      v81 = (void *)(v4 + 112);
      *(_QWORD *)(v4 + 96) = v4 + 112;
      v82 = (void **)(v4 + 96);
      *(_DWORD *)(v4 + 88) = v80;
      *(_OWORD *)(v4 + 72) = v79;
      *(_QWORD *)(v4 + 104) = 0x400000000;
      v12 = (_DWORD *)a2 - 10;
      v83 = *((_DWORD *)a2 - 10);
      if (!v83 || v82 == (void **)(a2 - 3))
        return;
      v84 = (__int128 *)*((_QWORD *)a2 - 6);
      if (v84 != a2 - 2)
      {
        *(_QWORD *)(v4 + 96) = v84;
        v125 = *((_DWORD *)a2 - 9);
        *(_DWORD *)(v4 + 104) = v83;
        *(_DWORD *)(v4 + 108) = v125;
        *((_QWORD *)a2 - 6) = a2 - 2;
        *((_DWORD *)a2 - 9) = 0;
        goto LABEL_115;
      }
      if (v83 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 96, v4 + 112, *((unsigned int *)a2 - 10), 8);
        v85 = *v12;
        if (!(_DWORD)v85)
          goto LABEL_114;
        v84 = (__int128 *)*((_QWORD *)a2 - 6);
        v81 = *v82;
      }
      else
      {
        v85 = *((unsigned int *)a2 - 10);
      }
      memcpy(v81, v84, 8 * v85);
LABEL_114:
      *(_DWORD *)(v4 + 104) = v83;
      goto LABEL_115;
    }
    v77 = (char *)*((_QWORD *)a1 + 3);
    if (v77 != (char *)a1 + 40)
    {
      *(_QWORD *)(a4 + 24) = v77;
      v124 = *((_DWORD *)a1 + 9);
      *(_DWORD *)(a4 + 32) = v76;
      *(_DWORD *)(a4 + 36) = v124;
      *((_QWORD *)a1 + 3) = (char *)a1 + 40;
      *((_DWORD *)a1 + 9) = 0;
      goto LABEL_107;
    }
    if (v76 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 24, a4 + 40, *((unsigned int *)a1 + 8), 8);
      v78 = *((unsigned int *)v7 + 8);
      if (!(_DWORD)v78)
        goto LABEL_106;
      v77 = (char *)*((_QWORD *)v7 + 3);
      v18 = *v17;
    }
    else
    {
      v78 = *((unsigned int *)a1 + 8);
    }
    memcpy(v18, v77, 8 * v78);
LABEL_106:
    *(_DWORD *)(v4 + 32) = v76;
LABEL_107:
    *((_DWORD *)v7 + 8) = 0;
    goto LABEL_108;
  }
  if (a3 != 1)
  {
    if ((uint64_t)a3 <= 8)
    {
      if (a1 == a2)
        return;
      v31 = *a1;
      *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
      *(_OWORD *)a4 = v31;
      v32 = (void *)(a4 + 40);
      *(_QWORD *)(a4 + 24) = a4 + 40;
      v33 = (void **)(a4 + 24);
      *(_QWORD *)(a4 + 32) = 0x400000000;
      v34 = *((_DWORD *)a1 + 8);
      if (!v34 || (__int128 *)a4 == a1)
        goto LABEL_37;
      v35 = (__int128 *)*((_QWORD *)a1 + 3);
      v36 = (char *)a1 + 40;
      if (v35 != (__int128 *)((char *)a1 + 40))
      {
        *(_QWORD *)(a4 + 24) = v35;
        v126 = *((_DWORD *)a1 + 9);
        *(_DWORD *)(a4 + 32) = v34;
        *(_DWORD *)(a4 + 36) = v126;
        *((_QWORD *)a1 + 3) = v36;
        *((_DWORD *)a1 + 9) = 0;
        goto LABEL_36;
      }
      if (v34 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 24, a4 + 40, *((unsigned int *)a1 + 8), 8);
        v37 = *((unsigned int *)v7 + 8);
        if (!(_DWORD)v37)
          goto LABEL_35;
        v36 = (const void *)*((_QWORD *)v7 + 3);
        v32 = *v33;
      }
      else
      {
        v37 = *((unsigned int *)a1 + 8);
      }
      memcpy(v32, v36, 8 * v37);
LABEL_35:
      *(_DWORD *)(v4 + 32) = v34;
LABEL_36:
      *((_DWORD *)v7 + 8) = 0;
LABEL_37:
      v38 = (__int128 *)((char *)v7 + 72);
      if ((__int128 *)((char *)v7 + 72) == a2)
        return;
      v129 = 0;
      v39 = v4;
      v127 = a2;
      while (1)
      {
        v40 = v7;
        v7 = v38;
        v41 = (_OWORD *)(v39 + 72);
        v42 = (void *)(v39 + 112);
        v128 = v39 + 72;
        if (*((_DWORD *)v40 + 22) <= *(_DWORD *)(v39 + 16))
        {
          v57 = *v7;
          *(_DWORD *)(v39 + 88) = *((_DWORD *)v7 + 4);
          *v41 = v57;
          *(_QWORD *)(v39 + 96) = v42;
          *(_QWORD *)(v39 + 104) = 0x400000000;
          v58 = *((_DWORD *)v40 + 26);
          if (!v58 || (__int128 *)v39 == v40)
            goto LABEL_85;
          v59 = (__int128 *)*((_QWORD *)v40 + 12);
          if (v59 == v40 + 7)
          {
            if (v58 < 5)
            {
              v60 = *((unsigned int *)v40 + 26);
              goto LABEL_72;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod(v39 + 96, v39 + 112, *((unsigned int *)v40 + 26), 8);
            v60 = *((unsigned int *)v40 + 26);
            if ((_DWORD)v60)
            {
              v59 = (__int128 *)*((_QWORD *)v40 + 12);
              v42 = *(void **)(v39 + 96);
LABEL_72:
              memcpy(v42, v59, 8 * v60);
            }
            *(_DWORD *)(v39 + 104) = v58;
          }
          else
          {
            *(_QWORD *)(v39 + 96) = v59;
            v74 = *((_DWORD *)v40 + 27);
            *(_DWORD *)(v39 + 104) = v58;
            *(_DWORD *)(v39 + 108) = v74;
            *((_QWORD *)v40 + 12) = v40 + 7;
            *((_DWORD *)v40 + 27) = 0;
          }
          v61 = (unsigned int *)v40 + 26;
          goto LABEL_84;
        }
        *v41 = *(_OWORD *)v39;
        *(_DWORD *)(v39 + 88) = *(_DWORD *)(v39 + 16);
        *(_QWORD *)(v39 + 96) = v42;
        *(_QWORD *)(v39 + 104) = 0x400000000;
        v43 = *(_DWORD *)(v39 + 32);
        if (v43)
          break;
LABEL_47:
        v46 = v4;
        if (v39 != v4)
        {
          v47 = v129;
          while (1)
          {
            v46 = v4 + v47;
            if (*((_DWORD *)v40 + 22) <= *(_DWORD *)(v4 + v47 - 56))
              goto LABEL_75;
            *(_OWORD *)v46 = *(_OWORD *)(v46 - 72);
            *(_DWORD *)(v46 + 16) = *(_DWORD *)(v46 - 56);
            v48 = (void **)(v46 + 24);
            v49 = *(const void **)(v46 - 48);
            if ((const void *)(v46 - 32) != v49)
            {
              v55 = *v48;
              v56 = v4 + v47;
              if ((void *)(v4 + v47 + 40) != v55)
              {
                free(v55);
                v49 = *(const void **)(v46 - 48);
              }
              *(_QWORD *)(v46 + 24) = v49;
              v52 = (_DWORD *)(v39 - 40);
              *(_QWORD *)(v56 + 32) = *(_QWORD *)(v56 - 40);
              *(_QWORD *)(v46 - 48) = v46 - 32;
              *(_DWORD *)(v56 - 36) = 0;
              goto LABEL_58;
            }
            v50 = v4 + v47;
            v52 = (_DWORD *)(v4 + v47 - 40);
            v51 = *v52;
            v53 = *(unsigned int *)(v4 + v47 + 32);
            if (v53 >= v51)
            {
              if ((_DWORD)v51)
                memmove(*v48, v49, 8 * v51);
              goto LABEL_57;
            }
            if (*(_DWORD *)(v50 + 36) < v51)
              break;
            if (!(_DWORD)v53)
              goto LABEL_54;
            memmove(*v48, v49, 8 * v53);
LABEL_55:
            v54 = *v52;
            if (v53 != v54)
              memcpy((void *)(*(_QWORD *)(v46 + 24) + 8 * v53), (const void *)(*(_QWORD *)(v46 - 48) + 8 * v53), 8 * v54 - 8 * v53);
LABEL_57:
            *(_DWORD *)(v50 + 32) = v51;
LABEL_58:
            v39 -= 72;
            *v52 = 0;
            v47 -= 72;
            if (!v47)
            {
              v46 = v4;
              goto LABEL_75;
            }
          }
          *(_DWORD *)(v50 + 32) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v48, v4 + v47 + 40, v51, 8);
LABEL_54:
          v53 = 0;
          goto LABEL_55;
        }
LABEL_75:
        v62 = *v7;
        *(_DWORD *)(v46 + 16) = *((_DWORD *)v7 + 4);
        *(_OWORD *)v46 = v62;
        if ((__int128 *)v46 != (__int128 *)((char *)v40 + 72))
        {
          v63 = (__int128 **)(v40 + 6);
          v64 = (__int128 *)*((_QWORD *)v40 + 12);
          v65 = v40 + 7;
          if (v64 == v40 + 7)
          {
            v66 = (void **)(v46 + 24);
            v68 = *((_DWORD *)v40 + 26);
            v61 = (unsigned int *)v40 + 26;
            v67 = v68;
            v69 = *(unsigned int *)(v46 + 32);
            if (v69 >= v68)
            {
              if ((_DWORD)v67)
                memmove(*v66, v65, 8 * v67);
            }
            else
            {
              if (*(_DWORD *)(v46 + 36) < v67)
              {
                *(_DWORD *)(v46 + 32) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v46 + 24, v46 + 40, v67, 8);
LABEL_80:
                v69 = 0;
              }
              else
              {
                if (!(_DWORD)v69)
                  goto LABEL_80;
                memmove(*v66, v65, 8 * v69);
              }
              v70 = *v61;
              if (v69 != v70)
                memcpy((char *)*v66 + 8 * v69, (char *)*v63 + 8 * v69, (char *)*v63 + 8 * v70 - ((char *)*v63 + 8 * v69));
            }
            *(_DWORD *)(v46 + 32) = v67;
          }
          else
          {
            v71 = *(void **)(v46 + 24);
            if (v71 != (void *)(v46 + 40))
            {
              free(v71);
              v65 = v40 + 7;
              v64 = *v63;
            }
            *(_QWORD *)(v46 + 24) = v64;
            v72 = *((_QWORD *)v40 + 13);
            v61 = (unsigned int *)v40 + 26;
            *(_QWORD *)(v46 + 32) = v72;
            *((_QWORD *)v61 - 1) = v65;
            v61[1] = 0;
          }
LABEL_84:
          *v61 = 0;
        }
LABEL_85:
        v38 = (__int128 *)((char *)v7 + 72);
        v39 = v128;
        v129 += 72;
        if ((__int128 *)((char *)v7 + 72) == v127)
          return;
      }
      v44 = *(const void **)(v39 + 24);
      if (v44 != (const void *)(v39 + 40))
      {
        *(_QWORD *)(v39 + 96) = v44;
        v73 = *(_DWORD *)(v39 + 36);
        *(_DWORD *)(v39 + 104) = v43;
        *(_DWORD *)(v39 + 108) = v73;
        *(_QWORD *)(v39 + 24) = v39 + 40;
        *(_DWORD *)(v39 + 36) = 0;
        goto LABEL_46;
      }
      if (v43 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v39 + 96, v39 + 112, *(unsigned int *)(v39 + 32), 8);
        v45 = *(unsigned int *)(v39 + 32);
        if (!(_DWORD)v45)
          goto LABEL_45;
        v44 = *(const void **)(v39 + 24);
        v42 = *(void **)(v39 + 96);
      }
      else
      {
        v45 = *(unsigned int *)(v39 + 32);
      }
      memcpy(v42, v44, 8 * v45);
LABEL_45:
      *(_DWORD *)(v39 + 104) = v43;
LABEL_46:
      *(_DWORD *)(v39 + 32) = 0;
      goto LABEL_47;
    }
    v86 = (__int128 *)((char *)a1 + 72 * (a3 >> 1));
    sub_1C5B1C7F8(a1, v86, a3 >> 1, a4, a3 >> 1);
    sub_1C5B1C7F8((char *)v7 + 72 * (a3 >> 1), a2, a3 - (a3 >> 1), v4 + 72 * (a3 >> 1), a3 - (a3 >> 1));
    v87 = (__int128 *)((char *)v7 + 72 * (a3 >> 1));
    while (1)
    {
      if (v87 == a2)
      {
        if (v7 == v86)
          return;
        v100 = 0;
        while (2)
        {
          v101 = v4 + v100;
          v102 = (uint64_t)v7 + v100;
          v103 = *(__int128 *)((char *)v7 + v100);
          *(_DWORD *)(v101 + 16) = *(_DWORD *)((char *)v7 + v100 + 16);
          *(_OWORD *)v101 = v103;
          v104 = (void *)(v4 + v100 + 40);
          *(_QWORD *)(v4 + v100 + 24) = v104;
          v105 = (void **)(v4 + v100 + 24);
          *(_QWORD *)(v101 + 32) = 0x400000000;
          v106 = *(_DWORD *)((char *)v7 + v100 + 32);
          if (v106)
            v107 = v101 == v102;
          else
            v107 = 1;
          if (!v107)
          {
            v108 = *(void **)(v102 + 24);
            if ((void *)(v102 + 40) == v108)
            {
              if (v106 < 5)
              {
                v109 = *(unsigned int *)((char *)v7 + v100 + 32);
                goto LABEL_155;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + v100 + 24, v4 + v100 + 40, *(unsigned int *)((char *)v7 + v100 + 32), 8);
              v109 = *(unsigned int *)(v102 + 32);
              if ((_DWORD)v109)
              {
                v108 = *(void **)(v102 + 24);
                v104 = *v105;
LABEL_155:
                memcpy(v104, v108, 8 * v109);
              }
              *(_DWORD *)(v101 + 32) = v106;
            }
            else
            {
              *v105 = v108;
              v110 = *(_DWORD *)((char *)v7 + v100 + 36);
              *(_DWORD *)(v101 + 32) = v106;
              *(_DWORD *)(v101 + 36) = v110;
              *(_QWORD *)(v102 + 24) = v102 + 40;
              *(_DWORD *)((char *)v7 + v100 + 36) = 0;
            }
            *(_DWORD *)(v102 + 32) = 0;
          }
          v100 += 72;
          if ((__int128 *)((char *)v7 + v100) == v86)
            return;
          continue;
        }
      }
      v88 = v4 + 24;
      v89 = (void *)(v4 + 40);
      if (*((_DWORD *)v87 + 4) <= *((_DWORD *)v7 + 4))
      {
        v94 = *v7;
        *(_DWORD *)(v4 + 16) = *((_DWORD *)v7 + 4);
        *(_OWORD *)v4 = v94;
        *(_QWORD *)(v4 + 24) = v89;
        *(_QWORD *)(v4 + 32) = 0x400000000;
        v95 = *((_DWORD *)v7 + 8);
        if (v95 && (__int128 *)v4 != v7)
        {
          v96 = (char *)*((_QWORD *)v7 + 3);
          if (v96 == (char *)v7 + 40)
          {
            if (v95 < 5)
            {
              v97 = *((unsigned int *)v7 + 8);
              goto LABEL_134;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod(v88, v4 + 40, *((unsigned int *)v7 + 8), 8);
            v97 = *((unsigned int *)v7 + 8);
            if ((_DWORD)v97)
            {
              v96 = (char *)*((_QWORD *)v7 + 3);
              v89 = *(void **)(v4 + 24);
LABEL_134:
              memcpy(v89, v96, 8 * v97);
            }
            *(_DWORD *)(v4 + 32) = v95;
          }
          else
          {
            *(_QWORD *)(v4 + 24) = v96;
            v99 = *((_DWORD *)v7 + 9);
            *(_DWORD *)(v4 + 32) = v95;
            *(_DWORD *)(v4 + 36) = v99;
            *((_QWORD *)v7 + 3) = (char *)v7 + 40;
            *((_DWORD *)v7 + 9) = 0;
          }
          *((_DWORD *)v7 + 8) = 0;
        }
        v7 = (__int128 *)((char *)v7 + 72);
        goto LABEL_138;
      }
      v90 = *v87;
      *(_DWORD *)(v4 + 16) = *((_DWORD *)v87 + 4);
      *(_OWORD *)v4 = v90;
      *(_QWORD *)(v4 + 24) = v89;
      *(_QWORD *)(v4 + 32) = 0x400000000;
      v91 = *((_DWORD *)v87 + 8);
      if (v91)
      {
        if ((__int128 *)v4 != v87)
          break;
      }
LABEL_128:
      v87 = (__int128 *)((char *)v87 + 72);
LABEL_138:
      v4 += 72;
      if (v7 == v86)
      {
        if (v87 == a2)
          return;
        v111 = 0;
        while (2)
        {
          v112 = (uint64_t)v87 + v111;
          v113 = v4 + v111;
          v114 = *(__int128 *)((char *)v87 + v111);
          *(_DWORD *)(v113 + 16) = *(_DWORD *)((char *)v87 + v111 + 16);
          *(_OWORD *)v113 = v114;
          v115 = (void *)(v4 + v111 + 40);
          *(_QWORD *)(v4 + v111 + 24) = v115;
          *(_QWORD *)(v113 + 32) = 0x400000000;
          v116 = *(_DWORD *)((char *)v87 + v111 + 32);
          if (v116)
            v117 = v113 == v112;
          else
            v117 = 1;
          if (!v117)
          {
            v118 = *(const void **)(v112 + 24);
            if ((const void *)(v112 + 40) == v118)
            {
              if (v116 < 5)
              {
                v119 = *(unsigned int *)((char *)v87 + v111 + 32);
                goto LABEL_172;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + v111 + 24, v4 + v111 + 40, *(unsigned int *)((char *)v87 + v111 + 32), 8);
              v119 = *(unsigned int *)(v112 + 32);
              if ((_DWORD)v119)
              {
                v118 = *(const void **)(v112 + 24);
                v115 = *(void **)(v113 + 24);
LABEL_172:
                memcpy(v115, v118, 8 * v119);
              }
              *(_DWORD *)(v113 + 32) = v116;
            }
            else
            {
              *(_QWORD *)(v113 + 24) = v118;
              v120 = *(_DWORD *)((char *)v87 + v111 + 36);
              *(_DWORD *)(v113 + 32) = v116;
              *(_DWORD *)(v113 + 36) = v120;
              *(_QWORD *)(v112 + 24) = v112 + 40;
              *(_DWORD *)((char *)v87 + v111 + 36) = 0;
            }
            *(_DWORD *)(v112 + 32) = 0;
          }
          v111 += 72;
          if ((__int128 *)((char *)v87 + v111) == a2)
            return;
          continue;
        }
      }
    }
    v92 = (char *)*((_QWORD *)v87 + 3);
    if (v92 != (char *)v87 + 40)
    {
      *(_QWORD *)(v4 + 24) = v92;
      v98 = *((_DWORD *)v87 + 9);
      *(_DWORD *)(v4 + 32) = v91;
      *(_DWORD *)(v4 + 36) = v98;
      *((_QWORD *)v87 + 3) = (char *)v87 + 40;
      *((_DWORD *)v87 + 9) = 0;
      goto LABEL_127;
    }
    if (v91 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v88, v4 + 40, *((unsigned int *)v87 + 8), 8);
      v93 = *((unsigned int *)v87 + 8);
      if (!(_DWORD)v93)
        goto LABEL_126;
      v92 = (char *)*((_QWORD *)v87 + 3);
      v89 = *(void **)(v4 + 24);
    }
    else
    {
      v93 = *((unsigned int *)v87 + 8);
    }
    memcpy(v89, v92, 8 * v93);
LABEL_126:
    *(_DWORD *)(v4 + 32) = v91;
LABEL_127:
    *((_DWORD *)v87 + 8) = 0;
    goto LABEL_128;
  }
  v8 = *a1;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
  *(_OWORD *)a4 = v8;
  v9 = (void *)(a4 + 40);
  *(_QWORD *)(a4 + 24) = a4 + 40;
  v10 = (void **)(a4 + 24);
  *(_QWORD *)(a4 + 32) = 0x400000000;
  v12 = a1 + 2;
  v11 = *((_DWORD *)a1 + 8);
  if (v11 && (__int128 *)a4 != a1)
  {
    v13 = (__int128 *)*((_QWORD *)a1 + 3);
    v14 = (char *)a1 + 40;
    if (v13 == (__int128 *)((char *)a1 + 40))
    {
      if (v11 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 24, a4 + 40, *((unsigned int *)a1 + 8), 8);
        v15 = *v12;
        if (!(_DWORD)v15)
          goto LABEL_10;
        v14 = (const void *)*((_QWORD *)v7 + 3);
        v9 = *v10;
      }
      else
      {
        v15 = *((unsigned int *)a1 + 8);
      }
      memcpy(v9, v14, 8 * v15);
LABEL_10:
      *(_DWORD *)(v4 + 32) = v11;
LABEL_115:
      *v12 = 0;
      return;
    }
    *(_QWORD *)(a4 + 24) = v13;
    v121 = *((_DWORD *)a1 + 9);
    *(_DWORD *)(a4 + 32) = v11;
    *(_DWORD *)(a4 + 36) = v121;
LABEL_183:
    *((_QWORD *)v7 + 3) = v14;
    *((_DWORD *)v7 + 9) = 0;
    goto LABEL_115;
  }
}

void sub_1C5B1E0D8(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  int v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *i;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  char *v46;
  unsigned int v47;
  BOOL v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  unsigned int v58;
  BOOL v59;
  const void *v60;
  __int128 *v61;
  uint64_t v62;
  int v63;
  __int128 *v64;
  __int128 *v65;
  void **v66;
  __int128 *v67;
  __int128 v68;
  __int128 *v69;
  __int128 *v70;
  unint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 *v77;
  __int128 *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  _DWORD *v83;
  uint64_t v84;
  __int128 *v85;
  _DWORD *v86;
  uint64_t v87;
  __int128 *v88;
  __int128 *v89;
  void **v90;
  __int128 v91;
  char *v92;
  unint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  char *v99;
  unint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  __int128 *v107;
  __int128 *v108;
  __int128 *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t v113;
  char *v114;
  __int128 v115;
  void **v116;
  void *v117;
  unint64_t v118;
  _DWORD *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  __int128 *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  void **v129;
  void *v130;
  unint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void **v136;
  void **v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void **v143;
  __int128 *v144;
  __int128 *v145;
  uint64_t v146;

  if (!a5)
    return;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return;
    v11 = 0;
    v12 = -a4;
    while (1)
    {
      v13 = (__int128 *)((char *)a1 + v11);
      if (*((_DWORD *)a2 + 4) > *(_DWORD *)((char *)a1 + v11 + 16))
        break;
      v11 += 72;
      if (__CFADD__(v12++, 1))
        return;
    }
    v15 = -v12;
    if (-v12 >= v7)
    {
      if (v12 == -1)
      {
        sub_1C5B1D21C((__int128 *)((char *)a1 + v11), a2);
        return;
      }
      if (v12 > 0)
        v15 = 1 - v12;
      v25 = v15 >> 1;
      v24 = a3;
      if (a3 != a2)
      {
        v26 = 0x8E38E38E38E38E39 * (((char *)a3 - (char *)a2) >> 3);
        v24 = a2;
        do
        {
          v27 = v26 >> 1;
          v28 = (char *)v24 + 72 * (v26 >> 1);
          v29 = *((_DWORD *)v28 + 4);
          v30 = (__int128 *)(v28 + 72);
          v26 += ~(v26 >> 1);
          if (v29 > *(_DWORD *)((char *)a1 + 72 * v25 + v11 + 16))
            v24 = v30;
          else
            v26 = v27;
        }
        while (v26);
      }
      v18 = (__int128 *)((char *)a1 + 72 * v25 + v11);
      v17 = 0x8E38E38E38E38E39 * (((char *)v24 - (char *)a2) >> 3);
    }
    else
    {
      if (v7 >= 0)
        v16 = v7;
      else
        v16 = v7 + 1;
      v17 = v16 >> 1;
      v18 = a2;
      if (v13 != a2)
      {
        v19 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1 - v11) >> 3);
        v18 = (__int128 *)((char *)a1 + v11);
        do
        {
          v20 = v19 >> 1;
          v21 = (char *)v18 + 72 * (v19 >> 1);
          v22 = *((_DWORD *)v21 + 4);
          v23 = (__int128 *)(v21 + 72);
          v19 += ~(v19 >> 1);
          if (*((_DWORD *)a2 + 18 * v17 + 4) > v22)
            v19 = v20;
          else
            v18 = v23;
        }
        while (v19);
      }
      v24 = (__int128 *)((char *)a2 + 72 * v17);
      v25 = 0x8E38E38E38E38E39 * (((char *)v18 - (char *)a1 - v11) >> 3);
    }
    v31 = v24;
    if (v18 != a2)
    {
      v31 = v18;
      if (a2 != v24)
      {
        v140 = v25;
        v141 = v17;
        v142 = a7;
        v144 = a3;
        sub_1C5B1D21C(v18, a2);
        v31 = (__int128 *)((char *)v18 + 72);
        for (i = (__int128 *)((char *)a2 + 72); i != v24; i = (__int128 *)((char *)i + 72))
        {
          if (v31 == a2)
            a2 = i;
          sub_1C5B1D21C(v31, i);
          v31 = (__int128 *)((char *)v31 + 72);
        }
        if (v31 == a2)
        {
          v31 = a2;
        }
        else
        {
          v33 = v31;
          v34 = a2;
          do
          {
            while (1)
            {
              sub_1C5B1D21C(v33, a2);
              v33 = (__int128 *)((char *)v33 + 72);
              a2 = (__int128 *)((char *)a2 + 72);
              if (a2 == v24)
                break;
              if (v33 == v34)
                v34 = a2;
            }
            a2 = v34;
          }
          while (v33 != v34);
        }
        a7 = v142;
        a3 = v144;
        v25 = v140;
        v17 = v141;
      }
    }
    a4 = -(v25 + v12);
    v35 = v7 - v17;
    if (v25 + v17 >= v7 - (v25 + v17) - v12)
    {
      v38 = v25;
      v39 = -(v25 + v12);
      v40 = v17;
      v37 = a7;
      sub_1C5B1E0D8(v31, v24, a3, v39, v35, a6);
      v24 = v18;
      v35 = v40;
      a4 = v38;
      a3 = v31;
    }
    else
    {
      v36 = a3;
      v37 = a7;
      sub_1C5B1E0D8(v13, v18, v31, v25, v17, a6);
      a3 = v36;
      v13 = v31;
    }
    v7 = v35;
    a2 = v24;
    a1 = v13;
    a7 = v37;
    if (!v35)
      return;
  }
  if (a4 <= v7)
  {
    if (a1 == a2)
      return;
    v53 = 0;
    v42 = 0;
    while (1)
    {
      v54 = (uint64_t)a6 + v53;
      v55 = (uint64_t)a1 + v53;
      v56 = *(__int128 *)((char *)a1 + v53);
      *(_DWORD *)(v54 + 16) = *(_DWORD *)((char *)a1 + v53 + 16);
      *(_OWORD *)v54 = v56;
      v57 = (char *)a6 + v53 + 40;
      *(_QWORD *)(v54 + 24) = v54 + 40;
      *(_QWORD *)(v54 + 32) = 0x400000000;
      v58 = *(_DWORD *)((char *)a1 + v53 + 32);
      if (v58)
        v59 = v55 == v54;
      else
        v59 = 1;
      if (v59)
        goto LABEL_84;
      v60 = *(const void **)(v55 + 24);
      if ((const void *)(v55 + 40) != v60)
      {
        *(_QWORD *)(v54 + 24) = v60;
        v63 = *(_DWORD *)((char *)a1 + v53 + 36);
        *(_DWORD *)(v54 + 32) = v58;
        *(_DWORD *)(v54 + 36) = v63;
        *(_QWORD *)(v55 + 24) = v55 + 40;
        *(_DWORD *)((char *)a1 + v53 + 36) = 0;
        goto LABEL_83;
      }
      v61 = a3;
      if (v58 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v54 + 24, v54 + 40, *(unsigned int *)((char *)a1 + v53 + 32), 8);
        v62 = *(unsigned int *)(v55 + 32);
        if (!(_DWORD)v62)
          goto LABEL_82;
        v60 = *(const void **)(v55 + 24);
        v57 = *(char **)(v54 + 24);
      }
      else
      {
        v62 = *(unsigned int *)((char *)a1 + v53 + 32);
      }
      memcpy(v57, v60, 8 * v62);
LABEL_82:
      *(_DWORD *)(v54 + 32) = v58;
      a3 = v61;
LABEL_83:
      *(_DWORD *)(v55 + 32) = 0;
LABEL_84:
      ++v42;
      v53 += 72;
      if ((__int128 *)((char *)a1 + v53) == a2)
      {
        if (!v53)
          goto LABEL_217;
        v88 = a6;
        v89 = (__int128 *)((char *)a6 + v53);
        v146 = (uint64_t)a6 + v53 - 72;
        while (2)
        {
          if (a2 == a3)
          {
            if (v89 == v88)
              goto LABEL_217;
            v124 = 0;
            v125 = v88;
            while (2)
            {
              v126 = (uint64_t)a1 + v124;
              v127 = (uint64_t)v88 + v124;
              v128 = *(__int128 *)((char *)v88 + v124);
              *(_DWORD *)(v126 + 16) = *(_DWORD *)((char *)v88 + v124 + 16);
              *(_OWORD *)v126 = v128;
              if (a1 != v88)
              {
                v129 = (void **)(v126 + 24);
                v130 = *(void **)(v127 + 24);
                if ((void *)(v127 + 40) == v130)
                {
                  v132 = (_DWORD *)((char *)v88 + v124 + 32);
                  v131 = *v132;
                  v133 = (uint64_t)a1 + v124;
                  v134 = *(unsigned int *)((char *)a1 + v124 + 32);
                  if (v134 >= v131)
                  {
                    if ((_DWORD)v131)
                      memmove(*v129, v130, 8 * v131);
                  }
                  else
                  {
                    if (*(_DWORD *)(v133 + 36) < v131)
                    {
                      *(_DWORD *)(v133 + 32) = 0;
                      v137 = (void **)(v126 + 24);
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v129, (uint64_t)a1 + v124 + 40, v131, 8);
                      v129 = v137;
LABEL_203:
                      v134 = 0;
                    }
                    else
                    {
                      if (!(_DWORD)v134)
                        goto LABEL_203;
                      v143 = (void **)(v126 + 24);
                      memmove(*v129, v130, 8 * v134);
                      v129 = v143;
                    }
                    v135 = *v132;
                    if (v134 != v135)
                      memcpy((char *)*v129 + 8 * v134, (const void *)(*(_QWORD *)(v127 + 24) + 8 * v134), 8 * v135 - 8 * v134);
                  }
                  *(_DWORD *)(v133 + 32) = v131;
                }
                else
                {
                  if ((char *)a1 + v124 + 40 != *v129)
                  {
                    v136 = (void **)(v126 + 24);
                    free(*v129);
                    v129 = v136;
                    v130 = *(void **)(v127 + 24);
                  }
                  *v129 = v130;
                  v132 = v125 + 2;
                  *(_QWORD *)((char *)a1 + v124 + 32) = *(_QWORD *)((char *)v88 + v124 + 32);
                  *(_QWORD *)(v127 + 24) = v127 + 40;
                  *(_DWORD *)((char *)v88 + v124 + 36) = 0;
                }
                *v132 = 0;
              }
              v125 = (__int128 *)((char *)v125 + 72);
              v124 += 72;
              if ((__int128 *)v146 == (__int128 *)((char *)v88 + v124 - 72))
                goto LABEL_217;
              continue;
            }
          }
          v90 = (void **)a1 + 3;
          if (*((_DWORD *)a2 + 4) > *((_DWORD *)v88 + 4))
          {
            v91 = *a2;
            *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
            *a1 = v91;
            if (a1 != a2)
            {
              v92 = (char *)*((_QWORD *)a2 + 3);
              if (v92 == (char *)a2 + 40)
              {
                v94 = a2 + 2;
                v93 = *((unsigned int *)a2 + 8);
                v95 = *((unsigned int *)a1 + 8);
                if (v95 >= v93)
                {
                  v109 = a3;
                  if ((_DWORD)v93)
                    memmove(*v90, v92, 8 * v93);
                  *((_DWORD *)a1 + 8) = v93;
                  a3 = v109;
                }
                else
                {
                  v96 = a3;
                  if (*((_DWORD *)a1 + 9) < v93)
                  {
                    *((_DWORD *)a1 + 8) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1 + 24, (uint64_t)a1 + 40, v93, 8);
LABEL_139:
                    v95 = 0;
                  }
                  else
                  {
                    if (!(_DWORD)v95)
                      goto LABEL_139;
                    memmove(*v90, v92, 8 * v95);
                  }
                  v97 = *v94;
                  if (v95 != v97)
                    memcpy((char *)*v90 + 8 * v95, (const void *)(*((_QWORD *)a2 + 3) + 8 * v95), 8 * v97 - 8 * v95);
                  *((_DWORD *)a1 + 8) = v93;
                  a3 = v96;
                }
              }
              else
              {
                v105 = (char *)*((_QWORD *)a1 + 3);
                if ((char *)a1 + 40 != v105)
                {
                  v107 = a3;
                  free(v105);
                  a3 = v107;
                  v92 = (char *)*((_QWORD *)a2 + 3);
                }
                *((_QWORD *)a1 + 3) = v92;
                v94 = a2 + 2;
                *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
                *((_QWORD *)a2 + 3) = (char *)a2 + 40;
                *((_DWORD *)a2 + 9) = 0;
              }
              *v94 = 0;
            }
            a2 = (__int128 *)((char *)a2 + 72);
LABEL_156:
            a1 = (__int128 *)((char *)a1 + 72);
            if (v89 == v88)
              goto LABEL_217;
            continue;
          }
          break;
        }
        v98 = *v88;
        *((_DWORD *)a1 + 4) = *((_DWORD *)v88 + 4);
        *a1 = v98;
        if (a1 != v88)
        {
          v99 = (char *)*((_QWORD *)v88 + 3);
          if (v99 == (char *)v88 + 40)
          {
            v101 = v88 + 2;
            v100 = *((unsigned int *)v88 + 8);
            v102 = *((unsigned int *)a1 + 8);
            if (v102 >= v100)
            {
              v110 = a3;
              if ((_DWORD)v100)
                memmove(*v90, v99, 8 * v100);
              *((_DWORD *)a1 + 8) = v100;
              a3 = v110;
            }
            else
            {
              v103 = a3;
              if (*((_DWORD *)a1 + 9) < v100)
              {
                *((_DWORD *)a1 + 8) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1 + 24, (uint64_t)a1 + 40, v100, 8);
LABEL_150:
                v102 = 0;
              }
              else
              {
                if (!(_DWORD)v102)
                  goto LABEL_150;
                memmove(*v90, v99, 8 * v102);
              }
              v104 = *v101;
              if (v102 != v104)
                memcpy((char *)*v90 + 8 * v102, (const void *)(*((_QWORD *)v88 + 3) + 8 * v102), 8 * v104 - 8 * v102);
              *((_DWORD *)a1 + 8) = v100;
              a3 = v103;
            }
          }
          else
          {
            v106 = (char *)*((_QWORD *)a1 + 3);
            if ((char *)a1 + 40 != v106)
            {
              v108 = a3;
              free(v106);
              a3 = v108;
              v99 = (char *)*((_QWORD *)v88 + 3);
            }
            *((_QWORD *)a1 + 3) = v99;
            v101 = v88 + 2;
            *((_QWORD *)a1 + 4) = *((_QWORD *)v88 + 4);
            *((_QWORD *)v88 + 3) = (char *)v88 + 40;
            *((_DWORD *)v88 + 9) = 0;
          }
          *v101 = 0;
        }
        v88 = (__int128 *)((char *)v88 + 72);
        goto LABEL_156;
      }
    }
  }
  if (a2 == a3)
    return;
  v41 = 0;
  v42 = 0;
  do
  {
    v43 = (uint64_t)a6 + v41;
    v44 = (char *)a2 + v41;
    v45 = *(__int128 *)((char *)a2 + v41);
    *(_DWORD *)(v43 + 16) = *(_DWORD *)((char *)a2 + v41 + 16);
    *(_OWORD *)v43 = v45;
    v46 = (char *)a6 + v41 + 40;
    *(_QWORD *)(v43 + 24) = v43 + 40;
    *(_QWORD *)(v43 + 32) = 0x400000000;
    v47 = *(_DWORD *)((char *)a2 + v41 + 32);
    if (v47)
      v48 = v44 == (char *)v43;
    else
      v48 = 1;
    if (!v48)
    {
      v49 = (char *)*((_QWORD *)v44 + 3);
      if (v44 + 40 != v49)
      {
        *(_QWORD *)(v43 + 24) = v49;
        v52 = *(_DWORD *)((char *)a2 + v41 + 36);
        *(_DWORD *)(v43 + 32) = v47;
        *(_DWORD *)(v43 + 36) = v52;
        *((_QWORD *)v44 + 3) = v44 + 40;
        *(_DWORD *)((char *)a2 + v41 + 36) = 0;
        goto LABEL_66;
      }
      v50 = a3;
      if (v47 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v43 + 24, v43 + 40, *(unsigned int *)((char *)a2 + v41 + 32), 8);
        v51 = *((unsigned int *)v44 + 8);
        if (!(_DWORD)v51)
          goto LABEL_65;
        v49 = (char *)*((_QWORD *)v44 + 3);
        v46 = *(char **)(v43 + 24);
      }
      else
      {
        v51 = *(unsigned int *)((char *)a2 + v41 + 32);
      }
      memcpy(v46, v49, 8 * v51);
LABEL_65:
      *(_DWORD *)(v43 + 32) = v47;
      a3 = v50;
LABEL_66:
      *((_DWORD *)v44 + 8) = 0;
    }
    ++v42;
    v41 += 72;
  }
  while ((__int128 *)((char *)a2 + v41) != a3);
  if (v41)
  {
    v64 = (__int128 *)((char *)a6 + v41);
    while (1)
    {
      v145 = a3;
      if (a2 == a1)
        break;
      v65 = (__int128 *)((char *)a3 - 72);
      v66 = (void **)(a3 - 3);
      if (*((_DWORD *)v64 - 14) > *((_DWORD *)a2 - 14))
      {
        v67 = (__int128 *)((char *)a2 - 72);
        v68 = *(__int128 *)((char *)a2 - 72);
        *((_DWORD *)a3 - 14) = *((_DWORD *)a2 - 14);
        *v65 = v68;
        if (a3 == a2)
          goto LABEL_113;
        v69 = (__int128 *)*((_QWORD *)a2 - 6);
        v70 = a2 - 2;
        if (v69 != a2 - 2)
        {
          v82 = (__int128 *)*((_QWORD *)a3 - 6);
          if (a3 - 2 != v82)
          {
            free(v82);
            a3 = v145;
            v69 = (__int128 *)*((_QWORD *)a2 - 6);
          }
          *((_QWORD *)a3 - 6) = v69;
          v84 = *((_QWORD *)a2 - 5);
          v83 = (_DWORD *)a2 - 10;
          *((_QWORD *)a3 - 5) = v84;
          *((_QWORD *)v83 - 1) = v70;
          v83[1] = 0;
          v72 = v83;
          goto LABEL_112;
        }
        v72 = (_DWORD *)a2 - 10;
        v71 = *((unsigned int *)a2 - 10);
        v73 = *((unsigned int *)a3 - 10);
        if (v73 >= v71)
        {
          if ((_DWORD)v71)
            memmove(*v66, v69, 8 * v71);
        }
        else
        {
          if (*((_DWORD *)a3 - 9) < v71)
          {
            *((_DWORD *)a3 - 10) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a3 - 3), (uint64_t)(a3 - 2), v71, 8);
LABEL_98:
            v73 = 0;
          }
          else
          {
            if (!(_DWORD)v73)
              goto LABEL_98;
            memmove(*v66, v69, 8 * v73);
          }
          v74 = *v72;
          if (v73 != v74)
            memcpy((char *)*v66 + 8 * v73, (const void *)(*((_QWORD *)a2 - 6) + 8 * v73), 8 * v74 - 8 * v73);
        }
        *((_DWORD *)v145 - 10) = v71;
        goto LABEL_112;
      }
      v75 = (__int128 *)((char *)v64 - 72);
      v76 = *(__int128 *)((char *)v64 - 72);
      *((_DWORD *)a3 - 14) = *((_DWORD *)v64 - 14);
      *v65 = v76;
      if (a3 != v64)
      {
        v77 = (__int128 *)*((_QWORD *)v64 - 6);
        v78 = v64 - 2;
        if (v77 == v64 - 2)
        {
          v72 = (_DWORD *)v64 - 10;
          v79 = *((unsigned int *)v64 - 10);
          v80 = *((unsigned int *)a3 - 10);
          if (v80 >= v79)
          {
            if ((_DWORD)v79)
              memmove(*v66, v77, 8 * v79);
          }
          else
          {
            if (*((_DWORD *)a3 - 9) < v79)
            {
              *((_DWORD *)a3 - 10) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a3 - 3), (uint64_t)(a3 - 2), v79, 8);
LABEL_107:
              v80 = 0;
            }
            else
            {
              if (!(_DWORD)v80)
                goto LABEL_107;
              memmove(*v66, v77, 8 * v80);
            }
            v81 = *v72;
            if (v80 != v81)
              memcpy((char *)*v66 + 8 * v80, (const void *)(*((_QWORD *)v64 - 6) + 8 * v80), 8 * v81 - 8 * v80);
          }
          *((_DWORD *)v145 - 10) = v79;
        }
        else
        {
          v85 = (__int128 *)*((_QWORD *)a3 - 6);
          if (a3 - 2 != v85)
          {
            free(v85);
            a3 = v145;
            v77 = (__int128 *)*((_QWORD *)v64 - 6);
          }
          *((_QWORD *)a3 - 6) = v77;
          v87 = *((_QWORD *)v64 - 5);
          v86 = (_DWORD *)v64 - 10;
          *((_QWORD *)a3 - 5) = v87;
          *((_QWORD *)v86 - 1) = v78;
          v86[1] = 0;
          v72 = v86;
        }
        v67 = a2;
        v64 = v75;
LABEL_112:
        *v72 = 0;
LABEL_113:
        a2 = v67;
        v75 = v64;
      }
      v64 = v75;
      a3 = v65;
      if (v75 == a6)
        goto LABEL_217;
    }
    if (v64 != a6)
    {
      v111 = 0;
      v112 = v64;
      while (1)
      {
        v113 = (uint64_t)v64 + v111;
        v114 = (char *)a3 + v111;
        v115 = *(__int128 *)((char *)v64 + v111 - 72);
        *((_DWORD *)v114 - 14) = *(_DWORD *)((char *)v64 + v111 - 56);
        *(_OWORD *)(v114 - 72) = v115;
        if (a3 != v64)
          break;
LABEL_187:
        v112 = (__int128 *)((char *)v112 - 72);
        v111 -= 72;
        if ((__int128 *)((char *)v64 + v111) == a6)
          goto LABEL_217;
      }
      v116 = (void **)(v114 - 48);
      v117 = *(void **)(v113 - 48);
      if ((void *)(v113 - 32) == v117)
      {
        v119 = (_DWORD *)((char *)v64 + v111 - 40);
        v118 = *v119;
        v120 = (char *)a3 + v111;
        v121 = *(unsigned int *)((char *)a3 + v111 - 40);
        if (v121 >= v118)
        {
          if ((_DWORD)v118)
            memmove(*v116, v117, 8 * v118);
        }
        else
        {
          if (*((_DWORD *)v120 - 9) < v118)
          {
            *((_DWORD *)v120 - 10) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v116, (uint64_t)a3 + v111 - 32, v118, 8);
LABEL_182:
            v121 = 0;
          }
          else
          {
            if (!(_DWORD)v121)
              goto LABEL_182;
            memmove(*v116, v117, 8 * v121);
          }
          v122 = *v119;
          if (v121 != v122)
            memcpy((char *)*v116 + 8 * v121, (const void *)(*(_QWORD *)(v113 - 48) + 8 * v121), 8 * v122 - 8 * v121);
        }
        *((_DWORD *)v120 - 10) = v118;
        a3 = v145;
      }
      else
      {
        v123 = (char *)a3 + v111;
        if ((char *)a3 + v111 - 32 != *v116)
        {
          free(*v116);
          a3 = v145;
          v117 = *(void **)(v113 - 48);
        }
        *v116 = v117;
        v119 = (_DWORD *)v112 - 10;
        *((_QWORD *)v123 - 5) = *(_QWORD *)((char *)v64 + v111 - 40);
        *(_QWORD *)(v113 - 48) = v113 - 32;
        *(_DWORD *)((char *)v64 + v111 - 36) = 0;
      }
      *v119 = 0;
      goto LABEL_187;
    }
  }
LABEL_217:
  if (a6 && v42)
  {
    v138 = (_QWORD *)a6 + 5;
    do
    {
      v139 = (_QWORD *)*(v138 - 2);
      if (v138 != v139)
        free(v139);
      v138 += 9;
      --v42;
    }
    while (v42);
  }
}

uint64_t sub_1C5B1ED8C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B1A868(v0);
}

void sub_1C5B1EDB8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B1EDDC(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

BOOL sub_1C5B1EDF0(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  _BOOL8 v3;
  _QWORD v5[2];
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v13[4];
  _QWORD v14[6];
  _QWORD v15[2];
  void *v16;
  uint64_t v17;
  _DWORD v18[18];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5[0] = 0;
  v5[1] = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v13[2] = v14;
  v13[3] = 0x400000000;
  v14[4] = v15;
  v14[5] = 0;
  v15[0] = 0;
  v15[1] = 1;
  v16 = v18;
  v17 = 0x800000000;
  v18[16] = 1;
  v3 = sub_1C5B18154((uint64_t)v5, a2);
  if (v16 != v18)
    free(v16);
  sub_1C4926AE8((uint64_t)v13);
  MEMORY[0x1CAA32FB4](v10, 8);
  MEMORY[0x1CAA32FB4](v7, 8);
  MEMORY[0x1CAA32FB4](v5[0], 8);
  return v3;
}

llvm::raw_ostream *sub_1C5B1EF08(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return sub_1C5B1EF30((uint64_t *)a1, v2);
}

llvm::raw_ostream *sub_1C5B1EF30(uint64_t *a1, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  llvm::raw_ostream *result;
  _BYTE *v15;

  v2 = this;
  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x14uLL)
  {
    qmemcpy(v4, "InductiveRangeCheck:\n", 21);
    v5 = *((_QWORD *)this + 4) + 21;
    *((_QWORD *)this + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(this, "InductiveRangeCheck:\n", 0x15uLL);
    v5 = *((_QWORD *)v2 + 4);
  }
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v5) > 8)
  {
    *(_BYTE *)(v5 + 8) = 32;
    *(_QWORD *)v5 = *(_QWORD *)"  Begin: ";
    *((_QWORD *)v2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v2, "  Begin: ", 9uLL);
  }
  llvm::SCEV::print(*a1);
  v6 = (_QWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v6 > 7uLL)
  {
    *v6 = 0x203A706574532020;
    *((_QWORD *)v2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v2, "  Step: ", 8uLL);
  }
  llvm::SCEV::print(a1[1]);
  v7 = (_DWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 540697710;
    *v7 = 1850023968;
    *((_QWORD *)v2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v2, "  End: ", 7uLL);
  }
  llvm::SCEV::print(a1[2]);
  v8 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v8 > 0xCuLL)
  {
    qmemcpy(v8, "\n  CheckUse: ", 13);
    *((_QWORD *)v2 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\n  CheckUse: ", 0xDuLL);
  }
  llvm::Value::print(*(llvm::Value **)(a1[3] + 24), v2, 0);
  v9 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v9) > 9)
  {
    *(_WORD *)(v9 + 8) = 8250;
    *(_QWORD *)v9 = *(_QWORD *)" Operand: ";
    *((_QWORD *)v2 + 4) += 10;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, " Operand: ", 0xAuLL);
  }
  v10 = a1[3];
  v11 = *(_QWORD *)(v10 + 24);
  v12 = *(_DWORD *)(v11 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(_QWORD *)(v11 - 8);
  else
    v13 = v11 - 32 * (v12 & 0x7FFFFFF);
  result = sub_1C5E21910(v2, ((unint64_t)(v10 - v13) >> 5), 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v15)
    return llvm::raw_ostream::write(v2, "\n", 1uLL);
  *v15 = 10;
  ++*((_QWORD *)v2 + 4);
  return result;
}

uint64_t sub_1C5B1F1CC(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeBranchProbabilityInfoWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Inductive range check elimination";
  *(_QWORD *)(v4 + 8) = 33;
  *(_QWORD *)(v4 + 16) = "irce";
  *(_QWORD *)(v4 + 24) = 4;
  *(_QWORD *)(v4 + 32) = &unk_1ED81D240;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5B22FEC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

void llvm::IRCEPass::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int32x2_t *v5;
  llvm::Loop *v6;
  uint64_t v7;
  uint64_t ResultImpl;
  unint64_t **v9;
  llvm **v10;
  llvm **v11;
  int v12;
  int v13;
  llvm *v14;
  llvm::ScalarEvolution *v15;
  char v16;
  uint64_t i;
  uint64_t j;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[16];
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE v34[16];
  uint64_t *v35;
  _QWORD v36[6];
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[16];
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[6];

  v49[4] = *MEMORY[0x1E0C80C00];
  v5 = (int32x2_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, a1)
                   + 8);
  v6 = (llvm::Loop *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BranchProbabilityAnalysis::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1);
  v9 = (unint64_t **)(ResultImpl + 8);
  v38[0] = a1;
  v38[1] = a2;
  v36[0] = v5;
  v36[1] = v7;
  v36[2] = v6;
  v36[3] = ResultImpl + 8;
  v36[4] = sub_1C5B25FC4;
  v36[5] = v38;
  v37 = 1;
  v10 = *(llvm ***)(ResultImpl + 32);
  v11 = *(llvm ***)(ResultImpl + 40);
  if (v10 == v11)
  {
    v16 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v13 |= llvm::simplifyLoop(*v10, v6, v9, v5, 0, 0, 0);
      v14 = *v10++;
      v12 |= llvm::formLCSSARecursively(v14, v6, (const llvm::DominatorTree *)v9, (const llvm::LoopInfo *)v5, v15);
    }
    while (v10 != v11);
    v16 = v13 | v12;
    if ((v13 & (byte_1ED81D510 == 0)) != 0)
    {
      v39 = (uint64_t)v43;
      v40 = v43;
      v41 = 2;
      v42 = 0;
      v44 = &v48;
      v45 = &v48;
      v46 = 2;
      LODWORD(v47) = 0;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v39, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
      sub_1C4DD7214((uint64_t)&v39, (uint64_t)&llvm::BlockFrequencyAnalysis::Key);
      llvm::AnalysisManager<llvm::Function>::invalidate(a2, a1, (uint64_t)&v39);
      if (v45 != v44)
        free(v45);
      if (v40 != (_BYTE *)v39)
        free(v40);
    }
  }
  v39 = 1;
  for (i = 8; i != 72; i += 16)
    *(uint64_t *)((char *)&v39 + i) = -4096;
  v47 = v49;
  v48 = 0x400000000;
  sub_1C5F3D7BC((uint64_t)v9, (char *)&v39);
  v35 = &v39;
  for (j = v48; (_DWORD)v48; j = v48)
  {
    v19 = (char *)v47 + 8 * j;
    v20 = (unsigned int *)*((_QWORD *)v19 - 1);
    sub_1C5B25FEC(&v39, (_QWORD *)v19 - 1);
    v21 = v48 - 1;
    do
    {
      v22 = v21;
      if (!v21)
        break;
    }
    while (!*((_QWORD *)v47 + --v21));
    LODWORD(v48) = v22;
    if (sub_1C5B1F634((uint64_t)v36, v20, (llvm::Value *)sub_1C5B260EC, (uint64_t)&v35))
    {
      if (!byte_1ED81D510)
      {
        v25 = v29;
        v26 = v29;
        v27 = 2;
        v28 = 0;
        v30 = v34;
        v31 = v34;
        v32 = 2;
        v33 = 0;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
        sub_1C4DD7214((uint64_t)&v25, (uint64_t)&llvm::BlockFrequencyAnalysis::Key);
        llvm::AnalysisManager<llvm::Function>::invalidate(a2, a1, (uint64_t)&v25);
        if (v31 != v30)
          free(v31);
        if (v26 != v25)
          free(v26);
      }
      v16 = 1;
    }
  }
  if ((v16 & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a3);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v47 != v49)
    free(v47);
  if ((v39 & 1) == 0)
    MEMORY[0x1CAA32FB4](v40, 8);
}

uint64_t sub_1C5B1F634(uint64_t a1, unsigned int *a2, llvm::Value *a3, uint64_t a4)
{
  _QWORD *LoopPredecessor;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t LoopLatch;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  BOOL v38;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  void *v41;
  void *v42;
  llvm::raw_ostream *v43;
  void *v44;
  uint64_t *v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  __int16 v49;
  llvm::Type **v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  llvm::Type **v55;
  int v56;
  unsigned int v57;
  uint64_t SCEVIter;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unsigned int v70;
  unsigned int v71;
  llvm::SCEV **v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t NegativeSCEV;
  llvm::ScalarEvolution *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  llvm::Value *v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int *v87;
  llvm *v88;
  unsigned int v89;
  int v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  int v94;
  BOOL v95;
  int v96;
  llvm::ScalarEvolution *v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  unsigned __int8 *v101;
  llvm::Instruction *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  llvm::Type *v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  llvm::ScalarEvolution *v114;
  uint64_t *v115;
  unint64_t BlockFreq;
  _QWORD *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  llvm::Value *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  llvm::ScalarEvolution *v130;
  _QWORD ***v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int EdgeProbability;
  unsigned int v135;
  int v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  llvm::Instruction **AddExpr;
  llvm::SCEV *v142;
  llvm::SCEV *v143;
  size_t __n;
  llvm::Value *v145;
  uint64_t v146;
  int v147;
  llvm::Type *v148;
  uint64_t v149;
  llvm *v150;
  llvm::SCEV *v151;
  llvm::Type *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  llvm::SCEV *v156;
  unsigned int v157;
  llvm *v158;
  llvm::Type *v159;
  llvm::Type *v160;
  llvm::APInt *v161;
  llvm::APInt *v162;
  BOOL v163;
  llvm::Value *v164;
  uint64_t v165;
  _QWORD v166[3];
  __int128 v167;
  llvm::Value *v168;
  uint64_t v169;
  llvm *v170;
  uint64_t ExitCount;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  const char *v175;
  llvm::Value *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  llvm::Type *v181;
  llvm::Value *v182;
  llvm::Value *v183;
  llvm::Value *v184;
  BOOL v185;
  BOOL v186;
  int v187;
  __int16 v188;
  __int128 v189;
  char v190;
  int v191;
  __int16 v192;
  int v193;
  __int16 v194;
  void *v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  _BYTE v199[128];
  void *v200;
  uint64_t v201;
  _BYTE v202[512];
  void *v203;
  void *v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD v207[95];

  v207[92] = *MEMORY[0x1E0C80C00];
  if (dword_1ED81D2D0 > (unint64_t)((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3))
  {
    LoopPredecessor = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
    if (LoopPredecessor)
    {
      v10 = LoopPredecessor + 5;
      v9 = (_QWORD *)LoopPredecessor[5];
      if (v9 != LoopPredecessor + 5)
      {
        if (v9)
          v11 = v9 - 3;
        else
          v11 = 0;
        if (*((_BYTE *)v11 + 16) != 30)
        {
          switch(*((_BYTE *)v11 + 16))
          {
            case 0x1E:
LABEL_320:
              __break(1u);
              goto LABEL_321;
            case 0x1F:
              v13 = (*((_DWORD *)v11 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_12;
            case 0x20:
LABEL_321:
              v13 = (*((_DWORD *)v11 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_12;
            case 0x27:
              v13 = *((_DWORD *)v11 + 20) + 1;
LABEL_12:
              if (v13 == 1)
                goto LABEL_13;
              return 0;
            default:
              return 0;
          }
        }
        if ((*((_DWORD *)v11 + 5) & 0x7FFFFFF) != 3)
        {
LABEL_13:
          v200 = v202;
          v201 = 0x1000000000;
          v14 = *((_QWORD *)a2 + 4);
          v15 = *((_QWORD *)a2 + 5) - v14;
          if (!v15)
            goto LABEL_76;
          v164 = a3;
          v165 = a4;
          v16 = 8 * (v15 >> 3);
          do
          {
            v17 = *(_QWORD *)(*(_QWORD *)v14 + 40);
            if (v17 != *(_QWORD *)v14 + 40)
            {
              v18 = v17 ? v17 - 24 : 0;
              v19 = *(unsigned __int8 *)(v18 + 16) - 40;
              a4 = v19 >= 0xFFFFFFF5 ? v18 : 0;
              if (v17)
              {
                if (*(_BYTE *)(a4 + 16) == 30 && v19 >= 0xFFFFFFF5 && (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) != 1)
                {
                  v21 = *(_QWORD *)a1;
                  v22 = *(_QWORD *)(a1 + 8);
                  v23 = *(_QWORD **)(a4 + 40);
                  LoopPredecessor = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
                  if (v23 != LoopPredecessor)
                  {
                    if (!v22
                      || byte_1ED81D510
                      || (LoopPredecessor = (_QWORD *)llvm::BranchProbabilityInfo::getEdgeProbability(v22, *(_QWORD *)(a4 + 40), 0), LoopPredecessor >> 27 >= 0xF))
                    {
                      v203 = v207;
                      v204 = v207;
                      v205 = 8;
                      LODWORD(v206) = 0;
                      v24 = *(_DWORD *)(a4 + 20);
                      v25 = (v24 & 0x40000000) != 0 ? *(uint64_t **)(a4 - 8) : (uint64_t *)(a4 - 32 * (v24 & 0x7FFFFFF));
                      sub_1C5B23308((const llvm::Loop *)a2, v21, v25, (uint64_t)&v200, (llvm::SmallPtrSetImplBase *)&v203);
                      LoopPredecessor = v204;
                      if (v204 != v203)
                        free(v204);
                    }
                  }
                }
              }
            }
            v14 += 8;
            v16 -= 8;
          }
          while (v16);
          if (!(_DWORD)v201)
            goto LABEL_76;
          if (byte_1ED81D450)
          {
            v39 = (llvm::raw_ostream *)llvm::errs((llvm *)LoopPredecessor);
            v40 = v39;
            v41 = (void *)*((_QWORD *)v39 + 4);
            if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 0x15uLL)
            {
              qmemcpy(v41, "irce: looking at loop ", 22);
              *((_QWORD *)v39 + 4) += 22;
            }
            else
            {
              llvm::raw_ostream::write(v39, "irce: looking at loop ", 0x16uLL);
            }
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::print((llvm::Loop *)a2, v40, 0, 1, 0);
            v42 = (void *)*((_QWORD *)v40 + 4);
            if (*((_QWORD *)v40 + 3) - (_QWORD)v42 > 0xEuLL)
            {
              qmemcpy(v42, "irce: loop has ", 15);
              *((_QWORD *)v40 + 4) += 15;
              v43 = v40;
            }
            else
            {
              v43 = llvm::raw_ostream::write(v40, "irce: loop has ", 0xFuLL);
            }
            sub_1C5E21910(v43, v201, 0, 0, 0);
            v44 = (void *)*((_QWORD *)v43 + 4);
            if (*((_QWORD *)v43 + 3) - (_QWORD)v44 > 0x19uLL)
            {
              qmemcpy(v44, " inductive range checks: \n", 26);
              *((_QWORD *)v43 + 4) += 26;
            }
            else
            {
              llvm::raw_ostream::write(v43, " inductive range checks: \n", 0x1AuLL);
            }
            if ((_DWORD)v201)
            {
              v45 = (uint64_t *)v200;
              a4 = 32 * v201;
              do
              {
                sub_1C5B1EF30(v45, v40);
                v45 += 4;
                a4 -= 32;
              }
              while (a4);
            }
          }
          v26 = *(_QWORD *)a1;
          if (!llvm::Loop::isLoopSimplifyForm((llvm::Loop *)a2))
            goto LABEL_76;
          LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
          v29 = (_QWORD *)(LoopLatch + 40);
          v28 = *(_QWORD *)(LoopLatch + 40);
          if (v28 == LoopLatch + 40)
          {
            v31 = 0;
          }
          else
          {
            v30 = v28 ? v28 - 24 : 0;
            v31 = *(unsigned __int8 *)(v30 + 16) - 29 >= 0xB ? 0 : v30;
          }
          if ((*(_QWORD *)(v31 + 48) || (*(_BYTE *)(v31 + 23) & 0x20) != 0)
            && llvm::Instruction::getMetadataImpl((uint64_t ***)v31, "irce.loop.clone", 0xFuLL))
          {
            goto LABEL_76;
          }
          if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)a2, LoopLatch))
            goto LABEL_76;
          a3 = (llvm::Value *)**((_QWORD **)a2 + 4);
          LoopPredecessor = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
          if (!LoopPredecessor)
            goto LABEL_76;
          v32 = LoopPredecessor;
          v33 = (_QWORD *)LoopPredecessor[5];
          if (v33 == LoopPredecessor + 5)
            goto LABEL_76;
          if (v33)
            v11 = v33 - 3;
          else
            v11 = 0;
          if (*((_BYTE *)v11 + 16) == 30)
          {
            if ((*((_DWORD *)v11 + 5) & 0x7FFFFFF) == 3)
              goto LABEL_76;
          }
          else
          {
            switch(*((_BYTE *)v11 + 16))
            {
              case 0x1E:
                goto LABEL_320;
              case 0x1F:
                v46 = (*((_DWORD *)v11 + 5) >> 1) & 0x3FFFFFF;
                break;
              case 0x20:
                v46 = (*((_DWORD *)v11 + 5) & 0x7FFFFFF) - 1;
                break;
              case 0x27:
                v46 = *((_DWORD *)v11 + 20) + 1;
                break;
              default:
                goto LABEL_76;
            }
            if (v46 != 1)
              goto LABEL_76;
          }
          v34 = (_QWORD *)*v29;
          if ((_QWORD *)*v29 == v29)
            goto LABEL_76;
          v35 = v34 ? (uint64_t)(v34 - 3) : 0;
          v36 = *(unsigned __int8 *)(v35 + 16) - 40;
          v37 = v36 >= 0xFFFFFFF5 ? v35 : 0;
          if (!v34
            || (*(_BYTE *)(v37 + 16) == 30 ? (v38 = v36 >= 0xFFFFFFF5) : (v38 = 0),
                !v38
             || (*(_DWORD *)(v37 + 20) & 0x7FFFFFF) == 1
             || (v47 = *(_QWORD *)(v37 - 32) == (_QWORD)a3, (v48 = *(_QWORD *)(v37 - 96)) == 0)
             || *(_BYTE *)(v48 + 16) != 81
             || *(_BYTE *)(**(_QWORD **)(v48 - 64) + 8) != 13
             || (v153 = v37 - 32,
                 v155 = LoopPredecessor + 5,
                 v158 = *(llvm **)(v37 - 32),
                 v161 = *(llvm::APInt **)(v37 - 96),
                 *(_WORD *)(llvm::ScalarEvolution::getExitCount((llvm::ScalarEvolution *)v26, (const llvm::Loop *)a2, LoopLatch, 0)+ 24) == 15)))
          {
LABEL_76:
            if (v200 != v202)
              free(v200);
            return 0;
          }
          v149 = (uint64_t)v32;
          v147 = v47;
          v146 = v37;
          v49 = *((_WORD *)v161 + 9);
          v50 = (llvm::Type **)*((_QWORD *)v161 - 8);
          v51 = *(_QWORD *)(v26 + 104);
          v52 = *(_DWORD *)(v26 + 120);
          if (v52)
          {
            v53 = ((v50 >> 4) ^ (v50 >> 9)) & (v52 - 1);
            v54 = v51 + 48 * v53;
            v55 = *(llvm::Type ***)(v54 + 24);
            if (v55 == v50)
            {
LABEL_106:
              if (v54 == v51 + 48 * v52 || (SCEVIter = *(_QWORD *)(v54 + 40)) == 0)
              {
                SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v26, *((_QWORD *)v161 - 8));
                v51 = *(_QWORD *)(v26 + 104);
                v52 = *(_DWORD *)(v26 + 120);
              }
              v148 = *v50;
              v59 = *((_QWORD *)v161 - 4);
              v159 = (llvm::Type *)v59;
              if (v52)
              {
                v60 = ((v59 >> 4) ^ (v59 >> 9)) & (v52 - 1);
                v61 = v51 + 48 * v60;
                v62 = *(_QWORD *)(v61 + 24);
                if (v62 == v59)
                {
LABEL_116:
                  v156 = (llvm::SCEV *)(v49 & 0x3F);
                  if (v61 == v51 + 48 * v52 || (v65 = *(_QWORD *)(v61 + 40)) == 0)
                    v65 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v26, v59);
                  if (*(_WORD *)(SCEVIter + 24) != 7)
                  {
                    if (*(_WORD *)(v65 + 24) == 7)
                      __asm { BR              X9 }
                    goto LABEL_76;
                  }
                  v150 = (llvm *)v65;
                  v152 = v159;
                  v66 = SCEVIter;
                  v160 = (llvm::Type *)v50;
                  if (*(_QWORD *)(SCEVIter + 40) != 2)
                    goto LABEL_76;
                  v67 = *(_QWORD *)(SCEVIter + 32);
                  v68 = *(_QWORD *)(v67 + 8);
                  if (*(_WORD *)(v68 + 24))
                    goto LABEL_76;
                  v145 = *(llvm::Value **)(v68 + 32);
                  if ((*((_WORD *)v161 + 9) & 0x3E) == 0x20 && (*(_WORD *)(SCEVIter + 28) & 4) == 0)
                    __asm { BR              X11 }
                  v69 = (_QWORD *)((char *)v145 + 24);
                  v70 = *((_DWORD *)v145 + 8);
                  v71 = v70 - 1;
                  v162 = (llvm::Value *)((char *)v145 + 24);
                  if (v70 >= 0x41)
                    v69 = (_QWORD *)(*(_QWORD *)v162 + 8 * (v71 >> 6));
                  __n = *v69 & (1 << v71);
                  v72 = *(llvm::SCEV ***)(SCEVIter + 32);
                  v73 = *(_QWORD *)(v66 + 40);
                  v142 = *v72;
                  if (v73 == 2)
                  {
                    v74 = (unint64_t)v72[1];
                  }
                  else
                  {
                    v203 = &v205;
                    v204 = (void *)0x300000000;
                    v139 = 8 * v73 - 8;
                    if ((unint64_t)v139 >= 0x19)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v203, (uint64_t)&v205, v139 >> 3, 8);
                      v140 = v204;
                    }
                    else
                    {
                      v140 = 0;
                    }
                    if (v73 != 1)
                    {
                      memcpy((char *)v203 + 8 * v140, v72 + 1, 8 * v73 - 8);
                      v140 = v204;
                    }
                    LODWORD(v204) = v140 + ((unint64_t)v139 >> 3);
                    v74 = sub_1C618AB20((uint64_t *)v26, (uint64_t)&v203, *(uint64_t ***)(v66 + 48));
                    if (v203 != &v205)
                      free(v203);
                  }
                  NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(v26, v74);
                  v203 = &v205;
                  v205 = (uint64_t)v142;
                  v206 = NegativeSCEV;
                  v204 = (void *)0x200000002;
                  AddExpr = (llvm::Instruction **)llvm::ScalarEvolution::getAddExpr(v26, (uint64_t)&v203, 0, 0);
                  if (v203 != &v205)
                    free(v203);
                  v77 = *(_QWORD *)(v26 + 104);
                  v78 = *(_DWORD *)(v26 + 120);
                  if (v78)
                  {
                    v79 = (v78 - 1) & ((v145 >> 4) ^ (v145 >> 9));
                    v80 = v77 + 48 * v79;
                    v81 = *(llvm::Value **)(v80 + 24);
                    if (v81 == v145)
                    {
LABEL_141:
                      if (v80 == v77 + 48 * v78 || (v84 = *(_QWORD *)(v80 + 40)) == 0)
                        v84 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v26, (unint64_t)v145);
                      v143 = 0;
                      if (v152 && *((unsigned __int8 *)v152 + 16) >= 0x1Cu)
                      {
                        v85 = sub_1C477672C((uint64_t)(a2 + 14), *((_QWORD *)v152 + 5));
                        v86 = *((_QWORD *)a2 + 8);
                        if (v86 == *((_QWORD *)a2 + 7))
                          v87 = a2 + 19;
                        else
                          v87 = a2 + 18;
                        v91 = v85 == (_QWORD *)(v86 + 8 * *v87);
                        v88 = v150;
                        if (v91)
                          v88 = 0;
                        v143 = v88;
                      }
                      v89 = *((_DWORD *)v145 + 8);
                      if (__n)
                      {
                        if (v89)
                        {
                          if (v89 > 0x40)
                          {
                            if (llvm::APInt::countTrailingOnesSlowCase(v162) != v89)
                              goto LABEL_167;
                          }
                          else if (*(_QWORD *)v162 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v89)
                          {
                            goto LABEL_167;
                          }
                        }
                        if ((_DWORD)v156 == 33 && v158 == a3)
                        {
                          v90 = 38;
                        }
                        else
                        {
                          if ((_DWORD)v156 != 32 || v158 == a3)
                            goto LABEL_167;
                          if ((*(_WORD *)(v66 + 28) & 2) != 0
                            && llvm::cannotBeMaxInLoop(v150, (const llvm::BasicBlock ***)a2, (llvm::ConstantInt ****)v26, 0))
                          {
                            __asm { BR              X11 }
                          }
                          if (llvm::cannotBeMaxInLoop(v150, (const llvm::BasicBlock ***)a2, (llvm::ConstantInt ****)v26, (llvm::ScalarEvolution *)1))
                            __asm { BR              X11 }
                          v90 = 32;
                        }
                        LODWORD(v156) = v90;
LABEL_167:
                        v91 = (_DWORD)v156 == 34 || (_DWORD)v156 == 38;
                        if (!v91 || v158 != a3)
                        {
                          v92 = (_DWORD)v156 == 36 || (_DWORD)v156 == 40;
                          if (!v92 || v158 == a3)
                            goto LABEL_76;
                        }
                        v93 = (_DWORD)v156 == 40;
                        if ((_DWORD)v156 == 38)
                          v93 = 1;
                        v163 = v93;
                        if ((_DWORD)v156 != 38
                          && (_DWORD)v156 != 40
                          && (!byte_1ED81D690
                           || v156 > 0x28
                           || ((1 << (char)v156) & 0x15400000000) == 0))
                        {
                          goto LABEL_76;
                        }
                        if (!llvm::ScalarEvolution::isAvailableAtLoopEntry((llvm::ScalarEvolution *)v26, v150, (const llvm::BasicBlock ***)a2))goto LABEL_76;
                        if (((_DWORD)v156 - 38) >= 4)
                          v94 = 34;
                        else
                          v94 = 38;
                        v157 = v94;
                        if (v158 != a3)
                          __asm { BR              X11 }
LABEL_215:
                        if ((llvm::ScalarEvolution::isLoopEntryGuardedByCond(v26, (uint64_t)a2, v157, (uint64_t)AddExpr, (uint64_t)v150) & 1) != 0)
                        {
                          if (v158 == a3)
                            v99 = -1;
                          else
                            v99 = 0;
                          v154 = *(_QWORD *)(v153 + 32 * v99);
                          a4 = v149;
                          sub_1C50D02DC((uint64_t)&v203, (uint64_t ***)v26, *(_QWORD *)(*(_QWORD *)(v149 + 56) + 40) + 272, (uint64_t)"irce", 1);
                          v100 = *(_QWORD **)(v149 + 40);
                          if (v100 == v155)
                          {
                            v102 = 0;
                          }
                          else
                          {
                            if (v100)
                              v101 = (unsigned __int8 *)(v100 - 3);
                            else
                              v101 = 0;
                            if (v101[16] - 29 >= 0xB)
                              v102 = 0;
                            else
                              v102 = (llvm::Instruction *)v101;
                          }
                          if (v143)
                            __asm { BR              X11 }
                          v103 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)&v203, AddExpr, v148, v102);
                          v166[0] = "indvar.start";
                          WORD4(v167) = 259;
                          v151 = (llvm::SCEV *)v103;
                          llvm::Value::setName((uint64_t ***)v103, (uint64_t)v166);
                          sub_1C50D05E0((uint64_t)&v203);
                          v191 = v193;
                          v192 = v194;
                          if (byte_1ED81D510)
                            goto LABEL_245;
                          if (*(_BYTE *)(a1 + 48))
                          {
                            v115 = (uint64_t *)(*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
                            BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v115, (uint64_t)a3);
                            LoopPredecessor = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
                            if (!LoopPredecessor)
                              goto LABEL_263;
                            v117 = (_QWORD *)LoopPredecessor[5];
                            if (v117 == LoopPredecessor + 5)
                              goto LABEL_263;
                            if (v117)
                              v11 = v117 - 3;
                            else
                              v11 = 0;
                            if (*((_BYTE *)v11 + 16) != 30)
                            {
                              v118 = 0;
                              switch(*((_BYTE *)v11 + 16))
                              {
                                case 0x1D:
                                case 0x21:
                                case 0x22:
                                case 0x23:
                                case 0x24:
                                case 0x25:
                                case 0x26:
                                  goto LABEL_312;
                                case 0x1E:
                                  goto LABEL_320;
                                case 0x1F:
                                  v137 = (*((_DWORD *)v11 + 5) >> 1) & 0x3FFFFFF;
                                  goto LABEL_310;
                                case 0x20:
                                  v137 = (*((_DWORD *)v11 + 5) & 0x7FFFFFF) - 1;
                                  goto LABEL_310;
                                case 0x27:
                                  v137 = *((_DWORD *)v11 + 20) + 1;
LABEL_310:
                                  if (v137 == 1)
                                    goto LABEL_311;
                                  goto LABEL_263;
                                default:
                                  goto LABEL_263;
                              }
                            }
                            if ((*((_DWORD *)v11 + 5) & 0x7FFFFFF) == 3)
LABEL_263:
                              v118 = 0;
                            else
LABEL_311:
                              v118 = (uint64_t)LoopPredecessor;
LABEL_312:
                            v138 = llvm::BlockFrequencyInfo::getBlockFreq(v115, v118);
                            if (v138 && BlockFreq && BlockFreq / v138 < dword_1ED81D5D0)
                              goto LABEL_76;
LABEL_245:
                            v104 = *(_QWORD *)a1;
                            v105 = *(_QWORD *)(*(_QWORD *)a1 + 104);
                            v106 = *(_DWORD *)(*(_QWORD *)a1 + 120);
                            if (v106)
                            {
                              v107 = v106 - 1;
                              v108 = (v106 - 1) & ((v160 >> 4) ^ (v160 >> 9));
                              v109 = v105 + 48 * v108;
                              v110 = *(llvm::Type **)(v109 + 24);
                              if (v110 == v160)
                              {
LABEL_252:
                                if (v109 == v105 + 48 * v106 || (v113 = *(_QWORD *)(v109 + 40)) == 0)
                                {
                                  v113 = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)a1, (unint64_t)v160);
                                  v114 = *(llvm::ScalarEvolution **)a1;
                                  v105 = *(_QWORD *)(*(_QWORD *)a1 + 104);
                                  v106 = *(_DWORD *)(*(_QWORD *)a1 + 120);
                                }
                                else
                                {
                                  v114 = *(llvm::ScalarEvolution **)a1;
                                }
                                if (v106)
                                {
                                  v119 = (v106 - 1) & ((v145 >> 4) ^ (v145 >> 9));
                                  v120 = v105 + 48 * v119;
                                  v121 = *(llvm::Value **)(v120 + 24);
                                  if (v121 == v145)
                                    goto LABEL_272;
                                  v122 = 1;
                                  while (v121 != (llvm::Value *)-4096)
                                  {
                                    v123 = v119 + v122++;
                                    v119 = v123 & (v106 - 1);
                                    v120 = v105 + 48 * v119;
                                    v121 = *(llvm::Value **)(v120 + 24);
                                    if (v121 == v145)
                                      goto LABEL_272;
                                  }
                                }
                                v120 = v105 + 48 * v106;
LABEL_272:
                                if (v120 == v105 + 48 * v106 || (v124 = *(_QWORD *)(v120 + 40)) == 0)
                                  v124 = llvm::ScalarEvolution::createSCEVIter(v114, (unint64_t)v145);
                                llvm::ScalarEvolution::getMinusSCEV(v104, v113, v124);
                                v126 = v125;
                                LOBYTE(v189) = 0;
                                v190 = 0;
                                v127 = (_QWORD *)*v10;
                                if ((_QWORD *)*v10 == v10)
                                {
                                  v129 = 0;
                                }
                                else
                                {
                                  if (v127)
                                    v128 = (uint64_t)(v127 - 3);
                                  else
                                    v128 = 0;
                                  if (*(unsigned __int8 *)(v128 + 16) - 29 >= 0xB)
                                    v129 = 0;
                                  else
                                    v129 = v128;
                                }
                                v197 = v199;
                                v198 = 0x400000000;
                                sub_1C4773D54((uint64_t)&v195, v129, 0, 0, 0);
                                if ((_DWORD)v201)
                                  __asm { BR              X10 }
                                if (v190)
                                {
                                  v130 = *(llvm::ScalarEvolution **)a1;
                                  v131 = (_QWORD ***)*((_QWORD *)a2 + 4);
                                  v166[0] = (*v131)[7];
                                  v166[1] = ***v131;
                                  v166[2] = v130;
                                  v167 = *(_OWORD *)(a1 + 16);
                                  v168 = v164;
                                  v169 = v165;
                                  v172 = 0;
                                  v173 = 0;
                                  v170 = (llvm *)a2;
                                  ExitCount = 0;
                                  v174 = v189;
                                  v175 = "main";
                                  v176 = a3;
                                  v177 = LoopLatch;
                                  v178 = v146;
                                  v179 = v154;
                                  v180 = v147;
                                  v181 = v160;
                                  v182 = v151;
                                  v183 = v145;
                                  v184 = v152;
                                  v185 = __n == 0;
                                  v186 = v163;
                                  v188 = v192;
                                  v187 = v191;
                                  ExitCount = llvm::ScalarEvolution::getExitCount(v130, (const llvm::Loop *)a2, LoopLatch, 0);
                                  LoopPredecessor = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v170);
                                  if (!LoopPredecessor)
                                    goto LABEL_293;
                                  v132 = (_QWORD *)LoopPredecessor[5];
                                  if (v132 == LoopPredecessor + 5)
                                    goto LABEL_293;
                                  if (v132)
                                    v11 = v132 - 3;
                                  else
                                    v11 = 0;
                                  if (*((_BYTE *)v11 + 16) != 30)
                                  {
                                    a4 = 0;
                                    switch(*((_BYTE *)v11 + 16))
                                    {
                                      case 0x1D:
                                      case 0x21:
                                      case 0x22:
                                      case 0x23:
                                      case 0x24:
                                      case 0x25:
                                      case 0x26:
                                        goto LABEL_304;
                                      case 0x1E:
                                        goto LABEL_320;
                                      case 0x1F:
                                        v136 = (*((_DWORD *)v11 + 5) >> 1) & 0x3FFFFFF;
                                        goto LABEL_302;
                                      case 0x20:
                                        v136 = (*((_DWORD *)v11 + 5) & 0x7FFFFFF) - 1;
                                        goto LABEL_302;
                                      case 0x27:
                                        v136 = *((_DWORD *)v11 + 20) + 1;
LABEL_302:
                                        if (v136 == 1)
                                          goto LABEL_303;
                                        goto LABEL_293;
                                      default:
                                        goto LABEL_293;
                                    }
                                  }
                                  if ((*((_DWORD *)v11 + 5) & 0x7FFFFFF) == 3)
LABEL_293:
                                    a4 = 0;
                                  else
LABEL_303:
                                    a4 = (uint64_t)LoopPredecessor;
LABEL_304:
                                  v172 = a4;
                                  v173 = a4;
                                  __asm { BR              X11 }
                                }
                                if (v195 != &v196)
                                  free(v195);
                                if (v197 != v199)
                                  free(v197);
                                goto LABEL_76;
                              }
                              v111 = 1;
                              while (v110 != (llvm::Type *)-4096)
                              {
                                v112 = v108 + v111++;
                                v108 = v112 & v107;
                                v109 = v105 + 48 * (v112 & v107);
                                v110 = *(llvm::Type **)(v109 + 24);
                                if (v110 == v160)
                                  goto LABEL_252;
                              }
                            }
                            v109 = v105 + 48 * v106;
                            goto LABEL_252;
                          }
                          v133 = *(_QWORD *)(a1 + 8);
                          if (!v133)
                            goto LABEL_245;
                          EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v133, LoopLatch, v147);
                          v135 = dword_1ED81D5D0 == 0x80000000
                               ? 1
                               : ((dword_1ED81D5D0 >> 1) | 0x80000000) / dword_1ED81D5D0;
                          if (EdgeProbability <= v135)
                            goto LABEL_245;
                        }
                        goto LABEL_76;
                      }
                      if (v89 > 0x40)
                      {
                        if (llvm::APInt::countLeadingZerosSlowCase(v162) != v89 - 1)
                          goto LABEL_197;
                      }
                      else if (*(_QWORD *)v162 != 1)
                      {
                        goto LABEL_197;
                      }
                      if ((_DWORD)v156 == 33 && v158 == a3)
                      {
                        if (llvm::isKnownNonNegativeInLoop((llvm *)AddExpr, (const llvm::BasicBlock ***)a2, (const llvm::Loop *)v26, v76)&& (llvm::isKnownNonNegativeInLoop(v150, (const llvm::BasicBlock ***)a2, (const llvm::Loop *)v26, v97) & 1) != 0)
                        {
                          v98 = 36;
                        }
                        else
                        {
                          v98 = 40;
                        }
                      }
                      else
                      {
                        if ((_DWORD)v156 != 32 || v158 == a3)
                          goto LABEL_197;
                        if ((*(_WORD *)(v66 + 28) & 2) != 0
                          && llvm::cannotBeMinInLoop(v150, (const llvm::BasicBlock ***)a2, (llvm::ConstantInt ****)v26, 0))
                        {
                          __asm { BR              X11 }
                        }
                        if (llvm::cannotBeMinInLoop(v150, (const llvm::BasicBlock ***)a2, (llvm::ConstantInt ****)v26, (llvm::ScalarEvolution *)1))
                          __asm { BR              X11 }
                        v98 = 32;
                      }
                      LODWORD(v156) = v98;
LABEL_197:
                      v95 = (_DWORD)v156 == 36 || (_DWORD)v156 == 40;
                      if ((!v95 || v158 != a3) && ((v156 & 0xFFFFFFFB) != 0x22 || v158 == a3))
                        goto LABEL_76;
                      v163 = ((_DWORD)v156 - 38) < 4;
                      if (((_DWORD)v156 - 38) >= 4 && !byte_1ED81D690)
                        goto LABEL_76;
                      if (v156 > 0x28
                        || ((1 << (char)v156) & 0x15400000000) == 0
                        || !llvm::ScalarEvolution::isAvailableAtLoopEntry((llvm::ScalarEvolution *)v26, v150, (const llvm::BasicBlock ***)a2))
                      {
                        goto LABEL_76;
                      }
                      if (((_DWORD)v156 - 38) >= 4)
                        v96 = 36;
                      else
                        v96 = 40;
                      v157 = v96;
                      if (v158 != a3)
                        __asm { BR              X11 }
                      goto LABEL_215;
                    }
                    v82 = 1;
                    while (v81 != (llvm::Value *)-4096)
                    {
                      v83 = v79 + v82++;
                      v79 = v83 & (v78 - 1);
                      v80 = v77 + 48 * v79;
                      v81 = *(llvm::Value **)(v80 + 24);
                      if (v81 == v145)
                        goto LABEL_141;
                    }
                  }
                  v80 = v77 + 48 * v78;
                  goto LABEL_141;
                }
                v63 = 1;
                while (v62 != -4096)
                {
                  v64 = v60 + v63++;
                  v60 = v64 & (v52 - 1);
                  v61 = v51 + 48 * v60;
                  v62 = *(_QWORD *)(v61 + 24);
                  if (v62 == v59)
                    goto LABEL_116;
                }
              }
              v61 = v51 + 48 * v52;
              goto LABEL_116;
            }
            v56 = 1;
            while (v55 != (llvm::Type **)-4096)
            {
              v57 = v53 + v56++;
              v53 = v57 & (v52 - 1);
              v54 = v51 + 48 * v53;
              v55 = *(llvm::Type ***)(v54 + 24);
              if (v55 == v50)
                goto LABEL_106;
            }
          }
          v54 = v51 + 48 * v52;
          goto LABEL_106;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C5B22F24(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81D240;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194C78;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81D248);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B1F1CC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81D248, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B22FEC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B22F24(v0);
}

uint64_t ****sub_1C5B23014@<X0>(uint64_t ****result@<X0>, uint64_t a2@<X1>, const llvm::SCEV **a3@<X2>, _BYTE *a4@<X8>)
{
  const llvm::SCEV *v6;
  const llvm::SCEV *v7;
  char v9;

  v6 = *a3;
  v7 = a3[1];
  if (v6 == v7
    || (result = (uint64_t ****)llvm::ScalarEvolution::isKnownPredicate(result, 0x27u, v6, v7), (_DWORD)result))
  {
    v9 = 0;
    *a4 = 0;
  }
  else
  {
    if (*(_BYTE *)(a2 + 16))
      __asm { BR              X11 }
    *(_OWORD *)a4 = *(_OWORD *)a3;
    v9 = 1;
  }
  a4[16] = v9;
  return result;
}

void sub_1C5B2317C()
{
  JUMPOUT(0x1C5B230B8);
}

void sub_1C5B23184()
{
  JUMPOUT(0x1C5B23108);
}

uint64_t ****sub_1C5B2318C@<X0>(uint64_t ****result@<X0>, uint64_t a2@<X1>, const llvm::SCEV **a3@<X2>, _BYTE *a4@<X8>)
{
  const llvm::SCEV *v6;
  const llvm::SCEV *v7;
  char v9;

  v6 = *a3;
  v7 = a3[1];
  if (v6 == v7
    || (result = (uint64_t ****)llvm::ScalarEvolution::isKnownPredicate(result, 0x23u, v6, v7), (_DWORD)result))
  {
    v9 = 0;
    *a4 = 0;
  }
  else
  {
    if (*(_BYTE *)(a2 + 16))
      __asm { BR              X11 }
    *(_OWORD *)a4 = *(_OWORD *)a3;
    v9 = 1;
  }
  a4[16] = v9;
  return result;
}

void sub_1C5B232F8()
{
  JUMPOUT(0x1C5B23230);
}

void sub_1C5B23300()
{
  JUMPOUT(0x1C5B23280);
}

double sub_1C5B23308(const llvm::Loop *a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::SmallPtrSetImplBase *a5)
{
  uint64_t v10;
  double result;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  llvm::APInt *v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  const llvm::SCEV *SCEVIter;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  uint64_t v41;
  int v42;
  int64_t v43;
  unint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  size_t v69;
  unsigned int v70;
  _QWORD v71[4];
  void *v72;
  uint64_t v73;
  _QWORD v74[4];

  v74[3] = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  sub_1C4774094(a5, *a3);
  if (!v12)
    return result;
  if (sub_1C5088268((uint64_t)&v72, (unsigned __int8 *)v10))
  {
    v13 = *(_DWORD *)(v10 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(_QWORD *)(v10 - 8);
    else
      v14 = v10 - 32 * (v13 & 0x7FFFFFF);
    sub_1C5B23308(a1, a2, v14, a4, a5);
    v27 = *(_DWORD *)(v10 + 20);
    if ((v27 & 0x40000000) != 0)
      v28 = *(_QWORD *)(v10 - 8);
    else
      v28 = v10 - 32 * (v27 & 0x7FFFFFF);
    sub_1C5B23308(a1, a2, v28 + 32, a4, a5);
    return result;
  }
  if (!v10 || *(_BYTE *)(v10 + 16) != 81)
    return result;
  v15 = (*(_WORD *)(v10 + 18) & 0x3F) - 34;
  v16 = *(_QWORD *)(v10 - 64);
  v17 = *(_QWORD *)(v10 - 32);
  v18 = v16;
  v19 = v16;
  switch(v15)
  {
    case 0:
      goto LABEL_9;
    case 2:
      v18 = v17;
      v17 = v16;
LABEL_9:
      v20 = *(_QWORD *)(a2 + 104);
      v21 = *(_DWORD *)(a2 + 120);
      if (!v21)
        goto LABEL_43;
      v22 = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v23 = v20 + 48 * v22;
      v24 = *(_QWORD *)(v23 + 24);
      if (v24 == v18)
        goto LABEL_44;
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v23 = v20 + 48 * v22;
        v24 = *(_QWORD *)(v23 + 24);
        if (v24 == v18)
          goto LABEL_44;
      }
LABEL_43:
      v23 = v20 + 48 * v21;
      goto LABEL_44;
    case 4:
      goto LABEL_33;
    case 5:
      goto LABEL_22;
    case 6:
      v18 = v17;
      v17 = v16;
LABEL_33:
      if (v17)
        v32 = *(_BYTE *)(v17 + 16) == 16;
      else
        v32 = 0;
      if (!v32)
        goto LABEL_37;
      v38 = *(unsigned int *)(v17 + 32);
      LODWORD(v73) = v38;
      if (v38 > 0x40)
      {
        v40 = ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8;
        v72 = (void *)operator new[]();
        memcpy(v72, *(const void **)(v17 + 24), v40);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v72);
      }
      else
      {
        if ((_DWORD)v38)
          v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
        else
          v39 = 0;
        v72 = (void *)(v39 & ~*(_QWORD *)(v17 + 24));
      }
      llvm::APInt::operator++((uint64_t)&v72);
      v41 = v73;
      LODWORD(v73) = 0;
      if (v41 >= 0x41)
      {
        v42 = 0;
        v43 = (unint64_t)(v41 + 63) >> 6;
        do
        {
          if (v43-- < 1)
            break;
          v45 = *((_QWORD *)v72 + v43);
          v42 += __clz(v45);
        }
        while (!v45);
        v46 = 0;
        v47 = v41 | 0xFFFFFFC0;
        if ((v41 & 0x3F) == 0)
          v47 = 0;
        if ((v41 - v42 - v47) <= 0x40)
          v46 = *(_QWORD *)v72 == 1;
        if (v72)
        {
          MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
          if (v73 >= 0x41)
          {
            if (v72)
              MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
          }
        }
        if (v46)
          goto LABEL_70;
      }
      else if (v72 == (void *)1)
      {
LABEL_70:
        v17 = v18;
        v18 = 0;
        goto LABEL_71;
      }
LABEL_37:
      v20 = *(_QWORD *)(a2 + 104);
      v21 = *(_DWORD *)(a2 + 120);
      if (!v21)
        goto LABEL_43;
      v33 = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v23 = v20 + 48 * v33;
      v34 = *(_QWORD *)(v23 + 24);
      if (v34 != v18)
      {
        v35 = 1;
        do
        {
          if (v34 == -4096)
            goto LABEL_43;
          v36 = v33 + v35++;
          v33 = v36 & (v21 - 1);
          v23 = v20 + 48 * v33;
          v34 = *(_QWORD *)(v23 + 24);
        }
        while (v34 != v18);
      }
LABEL_44:
      if (v23 == v20 + 48 * v21 || (SCEVIter = *(const llvm::SCEV **)(v23 + 40)) == 0)
        SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v18);
      if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a2, SCEVIter, a1) != 1)
        return result;
LABEL_71:
      v48 = *(_QWORD *)(a2 + 104);
      v49 = *(_DWORD *)(a2 + 120);
      if (!v49)
        goto LABEL_77;
      v50 = (v49 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v51 = v48 + 48 * v50;
      v52 = *(_QWORD *)(v51 + 24);
      if (v52 != v17)
      {
        v53 = 1;
        while (v52 != -4096)
        {
          v54 = v50 + v53++;
          v50 = v54 & (v49 - 1);
          v51 = v48 + 48 * v50;
          v52 = *(_QWORD *)(v51 + 24);
          if (v52 == v17)
            goto LABEL_78;
        }
LABEL_77:
        v51 = v48 + 48 * v49;
      }
LABEL_78:
      if (v51 == v48 + 48 * v49 || (v55 = *(_QWORD *)(v51 + 40)) == 0)
        v55 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v17);
      if (v55)
        v56 = *(unsigned __int16 *)(v55 + 24) == 7;
      else
        v56 = 0;
      if (!v56 || *(const llvm::Loop **)(v55 + 48) != a1 || *(_QWORD *)(v55 + 40) != 2)
        return result;
      if (!v18)
        __asm { BR              X11 }
      v57 = *(_QWORD *)(a2 + 104);
      v58 = *(_DWORD *)(a2 + 120);
      if (!v58)
        goto LABEL_95;
      v59 = (v58 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v60 = v57 + 48 * v59;
      v61 = *(_QWORD *)(v60 + 24);
      if (v61 != v18)
      {
        v62 = 1;
        while (v61 != -4096)
        {
          v63 = v59 + v62++;
          v59 = v63 & (v58 - 1);
          v60 = v57 + 48 * v59;
          v61 = *(_QWORD *)(v60 + 24);
          if (v61 == v18)
            goto LABEL_96;
        }
LABEL_95:
        v60 = v57 + 48 * v58;
      }
LABEL_96:
      if (v60 == v57 + 48 * v58 || (v64 = *(_QWORD *)(v60 + 40)) == 0)
        v64 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v18);
      v71[2] = v64;
      v66 = *(_QWORD **)(v55 + 32);
      v65 = *(_QWORD *)(v55 + 40);
      v71[0] = *v66;
      if (v65 == 2)
      {
        v67 = v66[1];
      }
      else
      {
        v72 = v74;
        v73 = 0x300000000;
        v68 = v65;
        v69 = 8 * v65 - 8;
        if (v69 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, (uint64_t)v69 >> 3, 8);
          v70 = v73;
        }
        else
        {
          v70 = 0;
        }
        if (v68 != 1)
        {
          memcpy((char *)v72 + 8 * v70, v66 + 1, v69);
          v70 = v73;
        }
        LODWORD(v73) = v70 + (v69 >> 3);
        v67 = sub_1C618AB20((uint64_t *)a2, (uint64_t)&v72, *(uint64_t ***)(v55 + 48));
        if (v72 != v74)
          free(v72);
      }
      v71[1] = v67;
      v71[3] = a3;
      *(_QWORD *)&result = sub_1C47E9C18(a4, (unint64_t)v71).n128_u64[0];
      return result;
    case 7:
      v19 = v17;
      v17 = v16;
LABEL_22:
      if (v17)
        v29 = *(_BYTE *)(v17 + 16) == 16;
      else
        v29 = 0;
      if (!v29)
        return result;
      v30 = (llvm::APInt *)(v17 + 24);
      v31 = *(_DWORD *)(v17 + 32);
      if (v31 < 0x41)
        goto LABEL_30;
      if (v31 - llvm::APInt::countLeadingZerosSlowCase(v30) > 0x40)
        return result;
      v30 = *(llvm::APInt **)v30;
LABEL_30:
      if (*(_QWORD *)v30)
        return result;
      v18 = 0;
      v17 = v19;
      goto LABEL_71;
    default:
      return result;
  }
}

void sub_1C5B23A28(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t ****v6;
  uint64_t ****v7;
  uint64_t v8;
  uint64_t ***v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t ***v29;
  int32x2_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t ***v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  int32x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t LoopLatch;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *Impl;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t *v117;
  __int16 v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t i;
  uint64_t ***v124;
  uint64_t v125;
  llvm::LLVMContext *v126;
  llvm::LLVMContext *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int j;
  uint64_t Successor;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t k;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t ****v154;
  uint64_t v155;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  unint64_t *v160;
  uint64_t ***v161;
  uint64_t v162;

  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(uint64_t *****)(v5 + 32);
  v6 = *(uint64_t *****)(v5 + 40);
  if (v6 != v7)
  {
    v8 = a2 + 24;
    do
    {
      v9 = *v7;
      if (*(_BYTE *)a3)
      {
        v160 = a3;
        v10 = 3;
      }
      else
      {
        v10 = 1;
      }
      v158 = ".";
      LOBYTE(v162) = 3;
      BYTE1(v162) = v10;
      v11 = llvm::CloneBasicBlock(v9, v8, (uint64_t)&v158, *(_QWORD *)a1, 0, 0);
      v13 = *(uint64_t **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        v154 = v7;
        v17 = a3;
        v18 = *(uint64_t **)a2;
        v19 = ((uint64_t)v13 - *(_QWORD *)a2) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          abort();
        v15 = v11;
        v21 = v8;
        v22 = v12 - (_QWORD)v18;
        if (v22 >> 2 > v20)
          v20 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v20;
        if (v23)
        {
          if (v23 >> 61)
            sub_1C4764EE4();
          v24 = (char *)operator new(8 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = (uint64_t *)&v24[8 * v19];
        *v25 = v15;
        v16 = v25 + 1;
        if (v13 != v18)
        {
          do
          {
            v26 = *--v13;
            *--v25 = v26;
          }
          while (v13 != v18);
          v13 = *(uint64_t **)a2;
        }
        *(_QWORD *)a2 = v25;
        *(_QWORD *)(a2 + 8) = v16;
        *(_QWORD *)(a2 + 16) = &v24[8 * v23];
        if (v13)
          operator delete(v13);
        v14 = v17;
        v8 = v21;
        v7 = v154;
      }
      else
      {
        v14 = a3;
        v15 = v11;
        *v13 = v11;
        v16 = v13 + 1;
      }
      *(_QWORD *)(a2 + 8) = v16;
      v159 = 2;
      v160 = 0;
      v161 = v9;
      if (v9 != (uint64_t ***)-8192 && v9 != (uint64_t ***)-4096 && v9)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v159);
      v158 = (const char *)&unk_1E814DA10;
      v162 = v8;
      v27 = sub_1C52E2ED8(v8, &v158);
      a3 = v14;
      if (v161 != (uint64_t ***)-8192 && v161 != (uint64_t ***)-4096 && v161)
      {
        v28 = v159 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v159 & 0xFFFFFFFFFFFFFFF8) = v160;
        if (v160)
        {
          *v160 = *v160 & 7 | v28;
        }
        else
        {
          v29 = v161;
          v30 = (int32x2_t *)***v161;
          v31 = (unint64_t)v30[303];
          if (v31 <= v28)
          {
            v32 = v30[305].u32[0];
            if (v31 + 16 * v32 > v28)
            {
              v33 = v32 - 1;
              LODWORD(v34) = v33 & ((v161 >> 4) ^ (v161 >> 9));
              v35 = (uint64_t ****)(v31 + 16 * v34);
              v36 = *v35;
              if (v161 == *v35)
              {
LABEL_39:
                *v35 = (uint64_t ***)-8192;
                v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
                v29 = v161;
              }
              else
              {
                v37 = 1;
                while (v36 != (uint64_t ***)-4096)
                {
                  v38 = v34 + v37++;
                  v34 = v38 & v33;
                  v36 = *(uint64_t ****)(v31 + 16 * v34);
                  if (v161 == v36)
                  {
                    v35 = (uint64_t ****)(v31 + 16 * v34);
                    goto LABEL_39;
                  }
                }
              }
              *((_BYTE *)v29 + 17) &= ~1u;
            }
          }
        }
      }
      v39 = v27[7];
      if (v39 != v15)
      {
        if (v39 && v39 != -8192 && v39 != -4096)
        {
          v40 = v27[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v40 = v27[6];
          v41 = (unint64_t *)v27[6];
          if (v41)
          {
            *v41 = *v41 & 7 | v40;
          }
          else
          {
            v42 = v27[7];
            v43 = ***(int32x2_t ****)v42;
            v44 = (unint64_t)v43[303];
            if (v44 <= v40)
            {
              v45 = v43[305].u32[0];
              if (v44 + 16 * v45 > v40)
              {
                v46 = v45 - 1;
                LODWORD(v47) = v46 & ((v42 >> 4) ^ (v42 >> 9));
                v48 = (uint64_t *)(v44 + 16 * v47);
                v49 = *v48;
                if (v42 == *v48)
                {
LABEL_60:
                  *v48 = -8192;
                  v43[304] = vadd_s32(v43[304], (int32x2_t)0x1FFFFFFFFLL);
                  v42 = v27[7];
                }
                else
                {
                  v50 = 1;
                  while (v49 != -4096)
                  {
                    v51 = v47 + v50++;
                    v47 = v51 & v46;
                    v49 = *(_QWORD *)(v44 + 16 * v47);
                    if (v42 == v49)
                    {
                      v48 = (uint64_t *)(v44 + 16 * v47);
                      goto LABEL_60;
                    }
                  }
                }
                *(_BYTE *)(v42 + 17) &= ~1u;
              }
            }
          }
        }
        v27[7] = v15;
        if (v15 != -8192 && v15 != -4096 && v15)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v27 + 5));
      }
      ++v7;
    }
    while (v7 != v6);
    v5 = *(_QWORD *)(a1 + 56);
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v5);
  v54 = a2 + 24;
  v53 = *(_QWORD *)(a2 + 24);
  v55 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v55)
  {
    v56 = ((LoopLatch >> 4) ^ (LoopLatch >> 9)) & ((_DWORD)v55 - 1);
    v57 = v53 + (v56 << 6);
    v58 = *(_QWORD *)(v57 + 24);
    if (LoopLatch == v58)
    {
LABEL_68:
      if (v57 != v53 + (v55 << 6))
        LoopLatch = *(_QWORD *)(v57 + 56);
    }
    else
    {
      v59 = 1;
      while (v58 != -4096)
      {
        v60 = v56 + v59++;
        v56 = v60 & (v55 - 1);
        v57 = v53 + (v56 << 6);
        v58 = *(_QWORD *)(v57 + 24);
        if (LoopLatch == v58)
          goto LABEL_68;
      }
    }
  }
  v61 = *(_QWORD *)(LoopLatch + 40);
  if (v61 == LoopLatch + 40)
  {
    v63 = 0;
  }
  else
  {
    if (v61)
      v62 = v61 - 24;
    else
      v62 = 0;
    if (*(unsigned __int8 *)(v62 + 16) - 29 >= 0xB)
      v63 = 0;
    else
      v63 = v62;
  }
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), 0, 0, 0, 1);
  llvm::Instruction::setMetadata(v63, "irce.loop.clone", 0xFuLL, Impl);
  v65 = *(_QWORD *)(a1 + 112);
  v66 = *(_QWORD *)(a2 + 24);
  v67 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v67)
    goto LABEL_85;
  v68 = ((v65 >> 4) ^ (v65 >> 9)) & ((_DWORD)v67 - 1);
  v69 = v66 + (v68 << 6);
  v70 = *(_QWORD *)(v69 + 24);
  if (v65 != v70)
  {
    v71 = 1;
    while (v70 != -4096)
    {
      v72 = v68 + v71++;
      v68 = v72 & (v67 - 1);
      v69 = v66 + (v68 << 6);
      v70 = *(_QWORD *)(v69 + 24);
      if (v65 == v70)
        goto LABEL_83;
    }
LABEL_85:
    v69 = v66 + (v67 << 6);
    goto LABEL_86;
  }
LABEL_83:
  if (v69 != v66 + (v67 << 6))
  {
    v65 = *(_QWORD *)(v69 + 56);
    v69 = v66 + (v67 << 6);
  }
LABEL_86:
  v73 = *(_QWORD *)(a1 + 120);
  if (!(_DWORD)v67)
  {
    v80 = *(_QWORD *)(a1 + 128);
    v86 = *(_QWORD *)(a1 + 136);
    v104 = *(_DWORD *)(a1 + 144);
    v92 = *(_QWORD *)(a1 + 152);
    v98 = *(_QWORD *)(a1 + 160);
    v117 = (uint64_t *)(a1 + 176);
    v105 = *(_QWORD *)(a1 + 168);
LABEL_129:
    v111 = *v117;
    goto LABEL_130;
  }
  v74 = v67 - 1;
  v75 = ((v73 >> 4) ^ (v73 >> 9)) & ((_DWORD)v67 - 1);
  v76 = v66 + (v75 << 6);
  v77 = *(_QWORD *)(v76 + 24);
  if (v73 == v77)
  {
LABEL_91:
    if (v76 != v69)
      v73 = *(_QWORD *)(v76 + 56);
  }
  else
  {
    v78 = 1;
    while (v77 != -4096)
    {
      v79 = v75 + v78++;
      v75 = v79 & v74;
      v76 = v66 + (v75 << 6);
      v77 = *(_QWORD *)(v76 + 24);
      if (v73 == v77)
        goto LABEL_91;
    }
  }
  v80 = *(_QWORD *)(a1 + 128);
  v81 = ((v80 >> 4) ^ (v80 >> 9)) & v74;
  v82 = v66 + (v81 << 6);
  v83 = *(_QWORD *)(v82 + 24);
  if (v80 == v83)
  {
LABEL_97:
    if (v82 != v69)
      v80 = *(_QWORD *)(v82 + 56);
  }
  else
  {
    v84 = 1;
    while (v83 != -4096)
    {
      v85 = v81 + v84++;
      v81 = v85 & v74;
      v82 = v66 + (v81 << 6);
      v83 = *(_QWORD *)(v82 + 24);
      if (v80 == v83)
        goto LABEL_97;
    }
  }
  v86 = *(_QWORD *)(a1 + 136);
  v87 = ((v86 >> 4) ^ (v86 >> 9)) & v74;
  v88 = v66 + (v87 << 6);
  v89 = *(_QWORD *)(v88 + 24);
  if (v86 == v89)
  {
LABEL_103:
    if (v88 != v69)
      v86 = *(_QWORD *)(v88 + 56);
  }
  else
  {
    v90 = 1;
    while (v89 != -4096)
    {
      v91 = v87 + v90++;
      v87 = v91 & v74;
      v88 = v66 + (v87 << 6);
      v89 = *(_QWORD *)(v88 + 24);
      if (v86 == v89)
        goto LABEL_103;
    }
  }
  v92 = *(_QWORD *)(a1 + 152);
  v93 = ((v92 >> 4) ^ (v92 >> 9)) & v74;
  v94 = v66 + (v93 << 6);
  v95 = *(_QWORD *)(v94 + 24);
  if (v92 == v95)
  {
LABEL_109:
    if (v94 != v69)
      v92 = *(_QWORD *)(v94 + 56);
  }
  else
  {
    v96 = 1;
    while (v95 != -4096)
    {
      v97 = v93 + v96++;
      v93 = v97 & v74;
      v94 = v66 + (v93 << 6);
      v95 = *(_QWORD *)(v94 + 24);
      if (v92 == v95)
        goto LABEL_109;
    }
  }
  v98 = *(_QWORD *)(a1 + 160);
  v99 = ((v98 >> 4) ^ (v98 >> 9)) & v74;
  v100 = v66 + (v99 << 6);
  v101 = *(_QWORD *)(v100 + 24);
  if (v98 == v101)
  {
LABEL_115:
    if (v100 != v69)
      v98 = *(_QWORD *)(v100 + 56);
  }
  else
  {
    v102 = 1;
    while (v101 != -4096)
    {
      v103 = v99 + v102++;
      v99 = v103 & v74;
      v100 = v66 + (v99 << 6);
      v101 = *(_QWORD *)(v100 + 24);
      if (v98 == v101)
        goto LABEL_115;
    }
  }
  v104 = *(_DWORD *)(a1 + 144);
  v105 = *(_QWORD *)(a1 + 168);
  v106 = ((v105 >> 4) ^ (v105 >> 9)) & v74;
  v107 = v66 + (v106 << 6);
  v108 = *(_QWORD *)(v107 + 24);
  if (v105 == v108)
  {
LABEL_121:
    if (v107 != v69)
      v105 = *(_QWORD *)(v107 + 56);
  }
  else
  {
    v109 = 1;
    while (v108 != -4096)
    {
      v110 = v106 + v109++;
      v106 = v110 & v74;
      v107 = v66 + (v106 << 6);
      v108 = *(_QWORD *)(v107 + 24);
      if (v105 == v108)
        goto LABEL_121;
    }
  }
  v111 = *(_QWORD *)(a1 + 176);
  v112 = ((v111 >> 4) ^ (v111 >> 9)) & v74;
  v113 = v66 + (v112 << 6);
  v114 = *(_QWORD *)(v113 + 24);
  if (v111 == v114)
  {
LABEL_127:
    if (v113 == v69)
      goto LABEL_130;
    v117 = (uint64_t *)(v113 + 56);
    goto LABEL_129;
  }
  v115 = 1;
  while (v114 != -4096)
  {
    v116 = v112 + v115++;
    v112 = v116 & v74;
    v113 = v66 + (v112 << 6);
    v114 = *(_QWORD *)(v113 + 24);
    if (v111 == v114)
      goto LABEL_127;
  }
LABEL_130:
  v118 = *(_WORD *)(a1 + 184);
  *(_QWORD *)(a2 + 104) = v73;
  *(_QWORD *)(a2 + 112) = v80;
  *(_QWORD *)(a2 + 120) = v86;
  *(_DWORD *)(a2 + 128) = v104;
  *(_QWORD *)(a2 + 136) = v92;
  *(_QWORD *)(a2 + 144) = v98;
  *(_QWORD *)(a2 + 152) = v105;
  *(_QWORD *)(a2 + 160) = v111;
  *(_WORD *)(a2 + 168) = v118;
  v119 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  *(_QWORD *)(a2 + 88) = a3;
  *(_QWORD *)(a2 + 96) = v65;
  if ((v119 & 0x7FFFFFFF8) != 0)
  {
    v120 = 0;
    v153 = (v119 >> 3);
    do
    {
      v121 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v120);
      v155 = v120;
      v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 32) + 8 * v120);
      for (i = *(_QWORD *)(v121 + 48); i != v121 + 40; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v124 = (uint64_t ***)(i - 24);
        else
          v124 = 0;
        v125 = operator new();
        *(_DWORD *)v125 = 3;
        *(_QWORD *)(v125 + 8) = 0;
        *(_DWORD *)(v125 + 16) = 0;
        *(_QWORD *)(v125 + 40) = v54;
        *(_QWORD *)(v125 + 24) = v125 + 40;
        *(_QWORD *)(v125 + 48) = 0;
        *(_QWORD *)(v125 + 32) = 0x200000001;
        *(_QWORD *)(v125 + 72) = v125 + 88;
        *(_QWORD *)(v125 + 80) = 0x400000000;
        *(_QWORD *)(v125 + 184) = v125 + 200;
        *(_QWORD *)(v125 + 192) = 0x100000000;
        *(_QWORD *)(v125 + 216) = v125 + 232;
        *(_QWORD *)(v125 + 224) = 0x1000000000;
        v157 = v125;
        v158 = (const char *)v125;
        sub_1C5FD706C(v125, v124);
        sub_1C5FD3718((uint64_t *)&v158, v126);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v157, v127);
      }
      v128 = *(_QWORD *)(v122 + 40);
      if (v128 != v122 + 40)
      {
        if (v128)
          v129 = v128 - 24;
        else
          v129 = 0;
        if (*(_BYTE *)(v129 + 16) != 30)
        {
          v130 = 2;
          switch(*(_BYTE *)(v129 + 16))
          {
            case 0x1E:
              __break(1u);
              return;
            case 0x1F:
              v130 = (*(_DWORD *)(v129 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_182;
            case 0x20:
            case 0x26:
              v130 = (*(_DWORD *)(v129 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_182;
            case 0x21:
              goto LABEL_146;
            case 0x24:
              v130 = *(_WORD *)(v129 + 18) & 1;
              goto LABEL_182;
            case 0x25:
              v130 = 1;
              goto LABEL_146;
            case 0x27:
              v130 = *(_DWORD *)(v129 + 80) + 1;
LABEL_182:
              if (!v130)
                goto LABEL_179;
              goto LABEL_146;
            default:
              goto LABEL_179;
          }
        }
        if ((*(_DWORD *)(v129 + 20) & 0x7FFFFFF) == 3)
          v130 = 2;
        else
          v130 = 1;
LABEL_146:
        for (j = 0; j != v130; ++j)
        {
          Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v129, j);
          v133 = *(_QWORD *)(a1 + 56);
          v134 = sub_1C477672C(v133 + 56, Successor);
          v135 = *(_QWORD *)(v133 + 64);
          if (v135 == *(_QWORD *)(v133 + 56))
            v136 = 76;
          else
            v136 = 72;
          if (v134 == (_QWORD *)(v135 + 8 * *(unsigned int *)(v133 + v136))
            && *(_QWORD *)(Successor + 40) != Successor + 40)
          {
            for (k = *(_QWORD *)(Successor + 48); ; k = *(_QWORD *)(v138 + 32))
            {
              v138 = k - 24;
              v139 = k ? k - 24 : 0;
              if (!k || *(_BYTE *)(v139 + 16) != 83)
                break;
              v140 = *(_DWORD *)(k - 4);
              v141 = v140 & 0x7FFFFFF;
              if ((v140 & 0x7FFFFFF) != 0)
              {
                v142 = 0;
                while (1)
                {
                  v143 = v138 - 32 * v141;
                  if ((v140 & 0x40000000) != 0)
                    v143 = *(_QWORD *)(v138 - 8);
                  if (*(_QWORD *)(v143 + 32 * *(unsigned int *)(v138 + 60) + 8 * v142) == v122)
                    break;
                  if (v141 == ++v142)
                    goto LABEL_166;
                }
              }
              else
              {
LABEL_166:
                LODWORD(v142) = -1;
              }
              if ((v140 & 0x40000000) != 0)
                v144 = *(_QWORD *)(v138 - 8);
              else
                v144 = v138 - 32 * v141;
              v145 = *(_QWORD *)(v144 + 32 * v142);
              v146 = *(unsigned int *)(a2 + 40);
              if ((_DWORD)v146)
              {
                v147 = *(_QWORD *)(a2 + 24);
                v148 = ((v145 >> 4) ^ (v145 >> 9)) & ((_DWORD)v146 - 1);
                v149 = v147 + (v148 << 6);
                v150 = *(_QWORD *)(v149 + 24);
                if (v145 == v150)
                {
LABEL_174:
                  if (v149 != v147 + (v146 << 6))
                    v145 = *(_QWORD *)(v149 + 56);
                }
                else
                {
                  v151 = 1;
                  while (v150 != -4096)
                  {
                    v152 = v148 + v151++;
                    v148 = v152 & (v146 - 1);
                    v149 = v147 + (v148 << 6);
                    v150 = *(_QWORD *)(v149 + 24);
                    if (v145 == v150)
                      goto LABEL_174;
                  }
                }
              }
              sub_1C477667C((llvm::PHINode *)v138, v145, v121);
            }
          }
        }
      }
LABEL_179:
      v54 = a2 + 24;
      v120 = v155 + 1;
    }
    while (v155 + 1 != v153);
  }
}

uint64_t sub_1C5B24554(uint64_t a1, _QWORD *a2, uint64_t a3, llvm::BasicBlock *a4, _BYTE *a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  _DWORD *v18;
  _BYTE *v20;
  char v21;
  char v22;

  v9 = 1;
  v22 = 1;
  if (*a5)
  {
    v20 = a5;
    v9 = 3;
  }
  v21 = v9;
  v10 = *(_QWORD *)(a3 + 8);
  v11 = operator new();
  *(_QWORD *)v11 = *a2 + 1600;
  *(_QWORD *)(v11 + 8) = 0;
  v12 = *(_DWORD *)(v11 + 20) & 0xC0000000;
  *(_QWORD *)(v11 + 24) = 0;
  v13 = v11 + 24;
  *(_DWORD *)(v11 + 16) = 22;
  *(_DWORD *)(v11 + 20) = v12;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 40;
  *(_QWORD *)(v11 + 48) = v11 + 40;
  *(_QWORD *)(v11 + 56) = 0;
  if (a1)
  {
    v14 = a1 + 72;
    if (v10)
      v15 = (uint64_t *)(v10 + 24);
    else
      v15 = (uint64_t *)(a1 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v14, (_QWORD *)v11);
    v16 = *v15;
    *(_QWORD *)(v11 + 24) = *v15;
    *(_QWORD *)(v11 + 32) = v15;
    *(_QWORD *)(v16 + 8) = v13;
    *v15 = v13;
  }
  llvm::Value::setName((uint64_t ***)v11, (uint64_t)&v20);
  v17 = *(llvm::BasicBlock **)(a3 + 8);
  v18 = operator new(0x60uLL);
  v18[13] = v18[13] & 0x38000000 | 1;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = v18 + 8;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v18 + 8), v17, (llvm::BasicBlock *)v11);
  llvm::BasicBlock::replacePhiUsesWith(*(_QWORD *)(a3 + 8), a4, (llvm::BasicBlock *)v11);
  return v11;
}

void sub_1C5B24684(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  const char *v36;
  __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v7 = a3[2];
  v8 = *(_QWORD *)(v7 + 56);
  v9 = *(_QWORD *)(v7 + 32);
  v10 = v9 == v8 + 72 || v9 == 0;
  v11 = v10;
  if (v10)
    v12 = 0;
  else
    v12 = v9 - 24;
  v13 = (_QWORD *)a2[1];
  if (*(_BYTE *)*a3)
  {
    v35[0] = *a3;
    v36 = ".exit.selector";
    v14 = 771;
  }
  else
  {
    v35[0] = ".exit.selector";
    v14 = 259;
  }
  v37 = v14;
  v15 = *a2;
  v16 = operator new();
  *(_QWORD *)v16 = *v13 + 1600;
  *(_QWORD *)(v16 + 8) = 0;
  v17 = *(_DWORD *)(v16 + 20) & 0xC0000000;
  *(_QWORD *)(v16 + 24) = 0;
  v18 = v16 + 24;
  *(_DWORD *)(v16 + 16) = 22;
  *(_DWORD *)(v16 + 20) = v17;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = v16 + 40;
  *(_QWORD *)(v16 + 48) = v16 + 40;
  *(_QWORD *)(v16 + 56) = 0;
  if (v15)
  {
    v19 = v15 + 72;
    if (v11)
      v20 = (uint64_t *)(v15 + 72);
    else
      v20 = (uint64_t *)(v12 + 24);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v19, (_QWORD *)v16);
    v21 = *v20;
    *(_QWORD *)(v16 + 24) = *v20;
    *(_QWORD *)(v16 + 32) = v20;
    *(_QWORD *)(v21 + 8) = v18;
    *v20 = v18;
  }
  llvm::Value::setName((uint64_t ***)v16, (uint64_t)v35);
  *(_QWORD *)(a1 + 8) = v16;
  v22 = (_QWORD *)a2[1];
  if (*(_BYTE *)*a3)
  {
    v35[0] = *a3;
    v36 = ".pseudo.exit";
    v23 = 771;
  }
  else
  {
    v35[0] = ".pseudo.exit";
    v23 = 259;
  }
  v37 = v23;
  v24 = *a2;
  v25 = operator new();
  *(_QWORD *)v25 = *v22 + 1600;
  *(_QWORD *)(v25 + 8) = 0;
  v26 = *(_DWORD *)(v25 + 20) & 0xC0000000;
  *(_QWORD *)(v25 + 24) = 0;
  v27 = v25 + 24;
  *(_DWORD *)(v25 + 16) = 22;
  *(_DWORD *)(v25 + 20) = v26;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = v25 + 40;
  *(_QWORD *)(v25 + 48) = v25 + 40;
  *(_QWORD *)(v25 + 56) = 0;
  if (v24)
  {
    v28 = v24 + 72;
    if (v11)
      v29 = (uint64_t *)(v24 + 72);
    else
      v29 = (uint64_t *)(v12 + 24);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v28, (_QWORD *)v25);
    v30 = *v29;
    *(_QWORD *)(v25 + 24) = *v29;
    *(_QWORD *)(v25 + 32) = v29;
    *(_QWORD *)(v30 + 8) = v27;
    *v29 = v27;
  }
  llvm::Value::setName((uint64_t ***)v25, (uint64_t)v35);
  *(_QWORD *)a1 = v25;
  v31 = *(_QWORD *)(a4 + 40);
  if (v31 == a4 + 40)
  {
    v33 = 0;
  }
  else
  {
    if (v31)
      v32 = v31 - 24;
    else
      v32 = 0;
    if (*(unsigned __int8 *)(v32 + 16) - 29 >= 0xB)
      v33 = 0;
    else
      v33 = v32;
  }
  sub_1C4773D54((uint64_t)v35, v33, 0, 0, 0);
  __asm { BR              X11 }
}

void sub_1C5B24900()
{
  JUMPOUT(0x1C5B248E8);
}

void sub_1C5B24908()
{
  JUMPOUT(0x1C5B248E8);
}

void sub_1C5B24910(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, llvm::BasicBlock *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18, uint64_t a19, void *a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 **v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  llvm::Value *v77;
  llvm::BasicBlock *v78;
  llvm::BasicBlock *v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  llvm::Value *v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  unsigned __int8 **v87;
  int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  _QWORD *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 **v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  unsigned __int8 *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 **v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  unsigned __int8 *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  llvm::Value *v133;
  llvm::BasicBlock *v134;
  llvm::BasicBlock *v135;
  _DWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  llvm::Value *v139;
  _QWORD *v140;
  char *v141;
  char *v142;
  unsigned __int8 **v143;
  int v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  _QWORD *v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  _QWORD *v167;
  llvm::Value *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  llvm::Value **v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  llvm::Value **v194;
  llvm::Value *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  llvm::ValueSymbolTable *v199;
  uint64_t **v200;
  uint64_t ***v201;
  llvm::PHINode *v202;
  uint64_t **v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t **v207;
  uint64_t **v208;
  uint64_t v209;
  uint64_t v210;
  llvm::BasicBlock *v211;
  int v212;
  unsigned __int8 *v213;
  uint64_t v214;
  unsigned __int8 *v215[2];
  const char *v216;
  uint64_t v217;
  __int16 v218;
  unsigned __int8 *v219;
  char *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;

  v57 = **(_QWORD **)(v50 + 32);
  if (v51)
    v58 = 40;
  else
    v58 = 36;
  if (v51)
    v59 = 38;
  else
    v59 = 34;
  if (v54)
    v60 = v58;
  else
    v60 = v59;
  v61 = *(unsigned __int8 **)(v214 + 56);
  v212 = v51;
  v210 = v57;
  if (*(_QWORD *)v61 == v57)
    goto LABEL_24;
  if ((v61[23] & 0x10) == 0)
  {
    v71 = 0;
    v72 = &byte_1C871356D;
    goto LABEL_20;
  }
  v62 = ***(_QWORD ***)v61;
  v63 = *(_QWORD *)(v62 + 152);
  v64 = *(unsigned int *)(v62 + 168);
  if (!(_DWORD)v64)
    goto LABEL_18;
  LODWORD(v65) = (v64 - 1) & ((v61 >> 4) ^ (v61 >> 9));
  v66 = (unsigned __int8 **)(v63 + 16 * v65);
  v67 = *v66;
  if (*v66 != v61)
  {
    v68 = 1;
    while (v67 != (unsigned __int8 *)-4096)
    {
      v69 = v65 + v68++;
      v65 = v69 & (v64 - 1);
      v67 = *(unsigned __int8 **)(v63 + 16 * v65);
      if (v67 == v61)
      {
        v66 = (unsigned __int8 **)(v63 + 16 * v65);
        goto LABEL_19;
      }
    }
LABEL_18:
    v66 = (unsigned __int8 **)(v63 + 16 * v64);
  }
LABEL_19:
  v70 = v66[1];
  v73 = *(_QWORD *)v70;
  v72 = (char *)(v70 + 16);
  v71 = v73;
LABEL_20:
  v218 = 1283;
  v215[0] = "wide.";
  v216 = v72;
  v217 = v71;
  if (v51)
    v74 = 40;
  else
    v74 = 39;
  v61 = sub_1C4773E38((uint64_t *)&v220, v74, v61, v57, (uint64_t)v215);
LABEL_24:
  v218 = 257;
  v75 = v60;
  v209 = (uint64_t)v61;
  v76 = v56;
  v77 = (llvm::Value *)sub_1C4774B48((uint64_t)&v220, v60, (uint64_t)v61, v56, (uint64_t)v215);
  v78 = *(llvm::BasicBlock **)(v214 + 8);
  v79 = *(llvm::BasicBlock **)v52;
  v80 = operator new(0xA0uLL);
  v81 = v80;
  v82 = 0;
  v83 = (llvm::Value *)(v80 + 24);
  v80[29] = v80[29] & 0x38000000 | 3;
  do
  {
    v84 = &v80[v82];
    *v84 = 0;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v83;
    v82 += 8;
  }
  while (v82 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v80 + 24), v78, v79, v77, 0);
  v218 = 257;
  (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v225 + 16))(v225, v83, v215, v223, v224);
  if (v221)
  {
    v85 = v220;
    v86 = &v220[16 * v221];
    v87 = (unsigned __int8 **)(v81 + 36);
    do
    {
      v88 = *(_DWORD *)v85;
      v89 = (unsigned __int8 *)*((_QWORD *)v85 + 1);
      if (v89)
      {
        if (!v88)
        {
          v219 = (unsigned __int8 *)*((_QWORD *)v85 + 1);
          llvm::MetadataTracking::track((uint64_t)&v219, v89, 2);
          v90 = *v87;
          if (!*v87)
          {
LABEL_39:
            v91 = v219;
            *v87 = v219;
            if (v91)
              llvm::MetadataTracking::retrack((uint64_t)&v219, v91, (uint64_t)(v81 + 36));
            goto LABEL_36;
          }
LABEL_33:
          llvm::MetadataTracking::untrack((uint64_t)(v81 + 36), v90);
          goto LABEL_39;
        }
      }
      else
      {
        v90 = *v87;
        if (!*v87 && (*((_BYTE *)v81 + 119) & 0x20) == 0)
          goto LABEL_36;
        if (!v88)
        {
          v219 = 0;
          if (!v90)
            goto LABEL_39;
          goto LABEL_33;
        }
      }
      llvm::Value::setMetadata(v83, *(_DWORD *)v85, (llvm::MDNode *)v89);
LABEL_36:
      v85 += 16;
    }
    while (v85 != v86);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v55 + 40) + 40, (uint64_t ***)v55);
  v92 = *(_QWORD *)(v55 + 24);
  v93 = *(_QWORD **)(v55 + 32);
  *v93 = v92;
  *(_QWORD *)(v92 + 8) = v93;
  *(_QWORD *)(v55 + 24) = 0;
  *(_QWORD *)(v55 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v55);
  sub_1C53E1B14(*(_QWORD *)(v214 + 24), *(_DWORD *)(v214 + 40), *(_QWORD *)(v52 + 8));
  v94 = 0;
  v95 = *(_QWORD *)(v214 + 24);
  v223 = *(_QWORD *)(v95 + 40);
  v224 = v95 + 24;
  v96 = *(unsigned __int8 **)(v95 + 48);
  v215[0] = v96;
  if (v96)
  {
    llvm::MetadataTracking::track((uint64_t)v215, v96, 2);
    v94 = v215[0];
  }
  sub_1C4774EF4((uint64_t)&v220, 0, (uint64_t)v94);
  if (v215[0])
    llvm::MetadataTracking::untrack((uint64_t)v215, v215[0]);
  v97 = *(unsigned __int8 **)(v214 + 48);
  if (*(_QWORD *)v97 != v210)
  {
    if ((v97[23] & 0x10) == 0)
    {
      v107 = 0;
      v108 = &byte_1C871356D;
      goto LABEL_55;
    }
    v98 = ***(_QWORD ***)v97;
    v99 = *(_QWORD *)(v98 + 152);
    v100 = *(unsigned int *)(v98 + 168);
    if ((_DWORD)v100)
    {
      LODWORD(v101) = (v100 - 1) & ((v97 >> 4) ^ (v97 >> 9));
      v102 = (unsigned __int8 **)(v99 + 16 * v101);
      v103 = *v102;
      if (*v102 == v97)
      {
LABEL_54:
        v106 = v102[1];
        v109 = *(_QWORD *)v106;
        v108 = (char *)(v106 + 16);
        v107 = v109;
LABEL_55:
        v218 = 1283;
        v215[0] = "wide.";
        v216 = v108;
        v217 = v107;
        if (v212)
          v110 = 40;
        else
          v110 = 39;
        v97 = sub_1C4773E38((uint64_t *)&v220, v110, v97, v210, (uint64_t)v215);
        goto LABEL_59;
      }
      v104 = 1;
      while (v103 != (unsigned __int8 *)-4096)
      {
        v105 = v101 + v104++;
        v101 = v105 & (v100 - 1);
        v103 = *(unsigned __int8 **)(v99 + 16 * v101);
        if (v103 == v97)
        {
          v102 = (unsigned __int8 **)(v99 + 16 * v101);
          goto LABEL_54;
        }
      }
    }
    v102 = (unsigned __int8 **)(v99 + 16 * v100);
    goto LABEL_54;
  }
LABEL_59:
  v218 = 257;
  v111 = sub_1C4774B48((uint64_t)&v220, v75, (uint64_t)v97, v76, (uint64_t)v215);
  if (*(_DWORD *)(v214 + 40) != 1)
  {
    v218 = 257;
    v111 = sub_1C506EAA0((uint64_t)&v220, v111, (uint64_t)v215);
  }
  v112 = *(_QWORD *)(v214 + 24);
  v113 = (uint64_t *)(v112 - 96);
  if (*(_QWORD *)(v112 - 96))
  {
    **(_QWORD **)(v112 - 80) = *(_QWORD *)(v112 - 88);
    v114 = *(_QWORD *)(v112 - 88);
    if (v114)
      *(_QWORD *)(v114 + 16) = *(_QWORD *)(v112 - 80);
  }
  *v113 = v111;
  if (v111)
  {
    v117 = *(_QWORD *)(v111 + 8);
    v115 = (uint64_t **)(v111 + 8);
    v116 = v117;
    *(_QWORD *)(v112 - 88) = v117;
    if (v117)
      *(_QWORD *)(v116 + 16) = v112 - 88;
    *(_QWORD *)(v112 - 80) = v115;
    *v115 = v113;
  }
  v118 = *(_QWORD *)(v52 + 8) + 40;
  v223 = *(_QWORD *)(v52 + 8);
  v224 = v118;
  v119 = *(unsigned __int8 **)(v214 + 72);
  if (*(_QWORD *)v119 != v210)
  {
    if ((v119[23] & 0x10) == 0)
    {
      v129 = 0;
      v130 = &byte_1C871356D;
      goto LABEL_78;
    }
    v120 = ***(_QWORD ***)v119;
    v121 = *(_QWORD *)(v120 + 152);
    v122 = *(unsigned int *)(v120 + 168);
    if ((_DWORD)v122)
    {
      LODWORD(v123) = (v122 - 1) & ((v119 >> 4) ^ (v119 >> 9));
      v124 = (unsigned __int8 **)(v121 + 16 * v123);
      v125 = *v124;
      if (*v124 == v119)
      {
LABEL_77:
        v128 = v124[1];
        v131 = *(_QWORD *)v128;
        v130 = (char *)(v128 + 16);
        v129 = v131;
LABEL_78:
        v218 = 1283;
        v215[0] = "wide.";
        v216 = v130;
        v217 = v129;
        if (v212)
          v132 = 40;
        else
          v132 = 39;
        v119 = sub_1C4773E38((uint64_t *)&v220, v132, v119, v210, (uint64_t)v215);
        goto LABEL_82;
      }
      v126 = 1;
      while (v125 != (unsigned __int8 *)-4096)
      {
        v127 = v123 + v126++;
        v123 = v127 & (v122 - 1);
        v125 = *(unsigned __int8 **)(v121 + 16 * v123);
        if (v125 == v119)
        {
          v124 = (unsigned __int8 **)(v121 + 16 * v123);
          goto LABEL_77;
        }
      }
    }
    v124 = (unsigned __int8 **)(v121 + 16 * v122);
    goto LABEL_77;
  }
LABEL_82:
  v218 = 257;
  v213 = v97;
  v133 = (llvm::Value *)sub_1C4774B48((uint64_t)&v220, v75, (uint64_t)v97, (uint64_t)v119, (uint64_t)v215);
  v134 = *(llvm::BasicBlock **)v52;
  v135 = *(llvm::BasicBlock **)(v214 + 32);
  v136 = operator new(0xA0uLL);
  v137 = v136;
  v138 = 0;
  v139 = (llvm::Value *)(v136 + 24);
  v136[29] = v136[29] & 0x38000000 | 3;
  do
  {
    v140 = &v136[v138];
    *v140 = 0;
    v140[1] = 0;
    v140[2] = 0;
    v140[3] = v139;
    v138 += 8;
  }
  while (v138 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v136 + 24), v134, v135, v133, 0);
  v218 = 257;
  (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v225 + 16))(v225, v139, v215, v223, v224);
  if (v221)
  {
    v141 = v220;
    v142 = &v220[16 * v221];
    v143 = (unsigned __int8 **)(v137 + 36);
    do
    {
      v144 = *(_DWORD *)v141;
      v145 = (unsigned __int8 *)*((_QWORD *)v141 + 1);
      if (v145)
      {
        if (!v144)
        {
          v219 = (unsigned __int8 *)*((_QWORD *)v141 + 1);
          llvm::MetadataTracking::track((uint64_t)&v219, v145, 2);
          v146 = *v143;
          if (!*v143)
          {
LABEL_97:
            v147 = v219;
            *v143 = v219;
            if (v147)
              llvm::MetadataTracking::retrack((uint64_t)&v219, v147, (uint64_t)(v137 + 36));
            goto LABEL_94;
          }
LABEL_91:
          llvm::MetadataTracking::untrack((uint64_t)(v137 + 36), v146);
          goto LABEL_97;
        }
      }
      else
      {
        v146 = *v143;
        if (!*v143 && (*((_BYTE *)v137 + 119) & 0x20) == 0)
          goto LABEL_94;
        if (!v144)
        {
          v219 = 0;
          if (!v146)
            goto LABEL_97;
          goto LABEL_91;
        }
      }
      llvm::Value::setMetadata(v139, *(_DWORD *)v141, (llvm::MDNode *)v145);
LABEL_94:
      v141 += 16;
    }
    while (v141 != v142);
  }
  v148 = (char *)operator new(0x60uLL);
  *((_DWORD *)v148 + 13) = *((_DWORD *)v148 + 13) & 0x38000000 | 1;
  *(_QWORD *)v148 = 0;
  *((_QWORD *)v148 + 1) = 0;
  *((_QWORD *)v148 + 2) = 0;
  *((_QWORD *)v148 + 3) = v148 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v148 + 32), v211, v134);
  v149 = v214;
  if (*(_QWORD *)(*(_QWORD *)(v214 + 8) + 40) != *(_QWORD *)(v214 + 8) + 40)
  {
    v150 = *(_QWORD *)(*(_QWORD *)(v214 + 8) + 48);
    v151 = v150 - 24;
    v152 = v150 ? v150 - 24 : 0;
    if (v150 && *(_BYTE *)(v152 + 16) == 83)
    {
      v153 = (uint64_t *)(v148 + 56);
      while (1)
      {
        v154 = *(uint64_t ***)v151;
        if ((*(_BYTE *)(v151 + 23) & 0x10) != 0)
          break;
        v164 = 0;
        v165 = (unsigned __int8 *)&byte_1C871356D;
LABEL_115:
        v218 = 773;
        v215[0] = v165;
        v215[1] = v164;
        v216 = ".copy";
        v167 = operator new(0x48uLL);
        v167[1] = v154;
        v168 = (llvm::Value *)(v167 + 1);
        *v167 = 0;
        v167[2] = 0;
        v167[3] = 0x4000000000000053;
        *((_OWORD *)v167 + 2) = 0u;
        v169 = (char *)(v167 + 4);
        *((_OWORD *)v167 + 3) = 0u;
        *((_DWORD *)v167 + 16) = 0;
        v170 = *((_QWORD *)v148 + 9);
        v167[6] = v170;
        *(_WORD *)(v170 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v167 + 31) & 0x10) != 0)
        {
          v198 = *(_QWORD *)(v170 + 56);
          if (v198)
          {
            v199 = *(llvm::ValueSymbolTable **)(v198 + 104);
            if (v199)
              llvm::ValueSymbolTable::reinsertValue(v199, v168);
          }
        }
        v171 = *v153;
        v167[4] = *v153;
        v167[5] = v153;
        *(_QWORD *)(v171 + 8) = v169;
        *v153 = (uint64_t)v169;
        *((_DWORD *)v167 + 17) = 2;
        llvm::Value::setName((uint64_t ***)v168, (uint64_t)v215);
        v172 = *((unsigned int *)v167 + 17);
        v173 = operator new(40 * v172);
        *v167 = v173;
        if ((_DWORD)v172)
        {
          v174 = &v173[4 * v172];
          do
          {
            *v173 = 0;
            v173[1] = 0;
            v173[2] = 0;
            v173[3] = v168;
            v173 += 4;
          }
          while (v173 != v174);
        }
        v175 = *(_DWORD *)(v151 + 20);
        v176 = v175 & 0x7FFFFFF;
        if ((v175 & 0x7FFFFFF) != 0)
        {
          v177 = 0;
          while (1)
          {
            v178 = v151 - 32 * v176;
            if ((v175 & 0x40000000) != 0)
              v178 = *(_QWORD *)(v151 - 8);
            if (*(_QWORD *)(v178 + 32 * *(unsigned int *)(v151 + 60) + 8 * v177) == v53)
              break;
            if (v176 == ++v177)
              goto LABEL_125;
          }
        }
        else
        {
LABEL_125:
          LODWORD(v177) = -1;
        }
        if ((v175 & 0x40000000) != 0)
          v179 = *(_QWORD *)(v151 - 8);
        else
          v179 = v151 - 32 * v176;
        sub_1C477667C(v168, *(_QWORD *)(v179 + 32 * v177), v53);
        v180 = *(_DWORD *)(v151 + 20);
        v181 = v180 & 0x7FFFFFF;
        if ((v180 & 0x7FFFFFF) != 0)
        {
          v182 = 0;
          while (1)
          {
            v183 = v151 - 32 * v181;
            if ((v180 & 0x40000000) != 0)
              v183 = *(_QWORD *)(v151 - 8);
            if (*(_QWORD *)(v183 + 32 * *(unsigned int *)(v151 + 60) + 8 * v182) == *(_QWORD *)(v149 + 16))
              break;
            if (v181 == ++v182)
              goto LABEL_134;
          }
        }
        else
        {
LABEL_134:
          LODWORD(v182) = -1;
        }
        if ((v180 & 0x40000000) != 0)
          v184 = *(_QWORD *)(v151 - 8);
        else
          v184 = v151 - 32 * v181;
        sub_1C477667C(v168, *(_QWORD *)(v184 + 32 * v182), *(_QWORD *)(v52 + 8));
        v186 = *(llvm::Value ***)(v52 + 24);
        v185 = *(_QWORD *)(v52 + 32);
        if ((unint64_t)v186 >= v185)
        {
          v188 = *(_QWORD **)(v52 + 16);
          v189 = v186 - (llvm::Value **)v188;
          v190 = v189 + 1;
          if ((unint64_t)(v189 + 1) >> 61)
            abort();
          v191 = v185 - (_QWORD)v188;
          if (v191 >> 2 > v190)
            v190 = v191 >> 2;
          if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
            v192 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v192 = v190;
          if (v192)
          {
            if (v192 >> 61)
              sub_1C4764EE4();
            v193 = (char *)operator new(8 * v192);
          }
          else
          {
            v193 = 0;
          }
          v194 = (llvm::Value **)&v193[8 * v189];
          *v194 = v168;
          v187 = v194 + 1;
          if (v186 != v188)
          {
            do
            {
              v195 = *--v186;
              *--v194 = v195;
            }
            while (v186 != v188);
            v186 = *(llvm::Value ***)(v52 + 16);
          }
          *(_QWORD *)(v52 + 16) = v194;
          *(_QWORD *)(v52 + 32) = &v193[8 * v192];
          if (v186)
            operator delete(v186);
          v149 = v214;
        }
        else
        {
          *v186 = v168;
          v187 = v186 + 1;
        }
        *(_QWORD *)(v52 + 24) = v187;
        v196 = *(_QWORD *)(v151 + 32);
        v151 = v196 - 24;
        if (v196)
          v197 = v196 - 24;
        else
          v197 = 0;
        if (!v196 || *(_BYTE *)(v197 + 16) != 83)
          goto LABEL_167;
      }
      v155 = **v154;
      v156 = *(_QWORD *)(v155 + 152);
      v157 = *(unsigned int *)(v155 + 168);
      if ((_DWORD)v157)
      {
        LODWORD(v158) = (v157 - 1) & ((v151 >> 4) ^ (v151 >> 9));
        v159 = (uint64_t *)(v156 + 16 * v158);
        v160 = *v159;
        if (*v159 == v151)
        {
LABEL_114:
          v163 = (_QWORD *)v159[1];
          v166 = (unsigned __int8 *)*v163;
          v165 = (unsigned __int8 *)(v163 + 2);
          v164 = v166;
          goto LABEL_115;
        }
        v161 = 1;
        while (v160 != -4096)
        {
          v162 = v158 + v161++;
          v158 = v162 & (v157 - 1);
          v160 = *(_QWORD *)(v156 + 16 * v158);
          if (v160 == v151)
          {
            v159 = (uint64_t *)(v156 + 16 * v158);
            goto LABEL_114;
          }
        }
      }
      v159 = (uint64_t *)(v156 + 16 * v157);
      goto LABEL_114;
    }
  }
LABEL_167:
  v200 = *(uint64_t ***)v213;
  v215[0] = "indvar.end";
  v218 = 259;
  v201 = (uint64_t ***)operator new(0x48uLL);
  v201[1] = v200;
  v202 = (llvm::PHINode *)(v201 + 1);
  *v201 = 0;
  v201[2] = 0;
  v201[3] = (uint64_t **)0x4000000000000053;
  v201[7] = 0;
  v201[8] = (uint64_t **)0x200000000;
  v204 = *((_QWORD *)v148 + 7);
  v203 = (uint64_t **)(v148 + 56);
  v205 = v203[2];
  v201[6] = (uint64_t **)v205;
  *((_WORD *)v205 + 9) &= ~0x8000u;
  v201[5] = v203;
  v201[4] = (uint64_t **)v204;
  *(_QWORD *)(v204 + 8) = v201 + 4;
  *v203 = (uint64_t *)(v201 + 4);
  llvm::Value::setName(v201 + 1, (uint64_t)v215);
  v206 = *((unsigned int *)v201 + 17);
  v207 = (uint64_t **)operator new(40 * v206);
  *v201 = v207;
  if ((_DWORD)v206)
  {
    v208 = &v207[4 * v206];
    do
    {
      *v207 = 0;
      v207[1] = 0;
      v207[2] = 0;
      v207[3] = (uint64_t *)v202;
      v207 += 4;
    }
    while (v207 != v208);
  }
  *(_QWORD *)(v52 + 40) = v202;
  sub_1C477667C(v202, v209, v53);
  sub_1C477667C(*(llvm::PHINode **)(v52 + 40), (uint64_t)v213, *(_QWORD *)(v52 + 8));
  llvm::BasicBlock::replacePhiUsesWith(*(_QWORD *)(v149 + 32), *(llvm::BasicBlock **)(v149 + 16), *(llvm::BasicBlock **)(v52 + 8));
  if (v220 != (char *)&v222)
    free(v220);
}

uint64_t sub_1C5B254E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = result;
  if (*(_QWORD *)(*(_QWORD *)(result + 8) + 40) != *(_QWORD *)(result + 8) + 40)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(result + 8) + 48);
    v6 = v5 - 24;
    v7 = v5 ? v5 - 24 : 0;
    if (v5 && *(_BYTE *)(v7 + 16) == 83)
    {
      v9 = 0;
      do
      {
        result = sub_1C5276870(v6, a2, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v9));
        v10 = *(_QWORD *)(v6 + 32);
        v6 = v10 - 24;
        if (v10)
          v11 = v10 - 24;
        else
          v11 = 0;
        if (!v10)
          break;
        ++v9;
      }
      while (*(_BYTE *)(v11 + 16) == 83);
    }
  }
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 40);
  return result;
}

_QWORD *sub_1C5B25594(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int32x2_t *****v35;
  int32x2_t *****v36;
  int32x2_t ****v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int32x2_t ****v43;
  int v44;
  int v45;
  _QWORD *v46;
  _QWORD *v48;
  unint64_t v49;
  int32x2_t ****v50;
  int32x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int32x2_t *****v56;
  int32x2_t ****v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  void *v64;
  uint64_t v65;
  unint64_t *v66;
  int32x2_t ****v67;
  uint64_t v68;

  v10 = sub_1C484358C(*(_QWORD *)(a1 + 32) + 48, 152, 3);
  v11 = (_QWORD *)v10;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)(v10 + 56) = v10 + 88;
  *(_QWORD *)(v10 + 64) = v10 + 88;
  *(_DWORD *)(v10 + 72) = 8;
  if (a3)
  {
    *(_QWORD *)v10 = a3;
    v13 = (unint64_t *)a3[2];
    v12 = a3[3];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v10;
      v14 = v13 + 1;
LABEL_30:
      a3[2] = v14;
      goto LABEL_38;
    }
    v19 = (_QWORD *)a3[1];
    v20 = v13 - v19;
    v21 = v20 + 1;
    if (!((unint64_t)(v20 + 1) >> 61))
    {
      v22 = v12 - (_QWORD)v19;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (!v23)
      {
        v24 = 0;
        goto LABEL_25;
      }
      if (!(v23 >> 61))
      {
        v24 = (char *)operator new(8 * v23);
LABEL_25:
        v31 = &v24[8 * v20];
        *(_QWORD *)v31 = v11;
        v14 = v31 + 8;
        if (v13 != v19)
        {
          do
          {
            v32 = *--v13;
            *((_QWORD *)v31 - 1) = v32;
            v31 -= 8;
          }
          while (v13 != v19);
          v13 = (unint64_t *)a3[1];
        }
        a3[1] = v31;
        a3[2] = v14;
        a3[3] = &v24[8 * v23];
        if (v13)
          operator delete(v13);
        goto LABEL_30;
      }
LABEL_74:
      sub_1C4764EE4();
    }
LABEL_73:
    abort();
  }
  v15 = *(_QWORD **)(a1 + 32);
  v17 = (unint64_t *)v15[4];
  v16 = v15[5];
  if ((unint64_t)v17 >= v16)
  {
    v25 = (_QWORD *)v15[3];
    v26 = v17 - v25;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_73;
    v28 = v16 - (_QWORD)v25;
    if (v28 >> 2 > v27)
      v27 = v28 >> 2;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 61)
        goto LABEL_74;
      v30 = (char *)operator new(8 * v29);
    }
    else
    {
      v30 = 0;
    }
    v33 = &v30[8 * v26];
    *(_QWORD *)v33 = v11;
    v18 = v33 + 8;
    if (v17 != v25)
    {
      do
      {
        v34 = *--v17;
        *((_QWORD *)v33 - 1) = v34;
        v33 -= 8;
      }
      while (v17 != v25);
      v17 = (unint64_t *)v15[3];
    }
    v15[3] = v33;
    v15[4] = v18;
    v15[5] = &v30[8 * v29];
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v17 = v10;
    v18 = v17 + 1;
  }
  v15[4] = v18;
LABEL_38:
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 48), v11, a5);
  v35 = (int32x2_t *****)a2[4];
  v36 = (int32x2_t *****)a2[5];
  if (v36 != v35)
  {
    while (1)
    {
      v37 = *v35;
      v38 = *(uint64_t **)(a1 + 32);
      v39 = *((_DWORD *)v38 + 4);
      if (!v39)
        goto LABEL_45;
      v40 = *v38;
      v41 = v39 - 1;
      v42 = ((v37 >> 4) ^ (v37 >> 9)) & (v39 - 1);
      v43 = *(int32x2_t *****)(v40 + 16 * v42);
      if (v37 != v43)
        break;
LABEL_44:
      v46 = *(_QWORD **)(v40 + 16 * v42 + 8);
LABEL_46:
      if (v46 == a2)
      {
        v65 = 2;
        v66 = 0;
        v67 = v37;
        if (v37 != (int32x2_t ****)-8192 && v37 != (int32x2_t ****)-4096 && v37 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v65);
        v64 = &unk_1E814DA10;
        v68 = a4;
        v48 = sub_1C52E2ED8(a4, &v64);
        if (v67 != (int32x2_t ****)-8192 && v67 != (int32x2_t ****)-4096 && v67)
        {
          v49 = v65 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8) = v66;
          if (v66)
          {
            *v66 = *v66 & 7 | v49;
          }
          else
          {
            v50 = v67;
            v51 = ***v67;
            v52 = (unint64_t)v51[303];
            if (v52 <= v49)
            {
              v53 = v51[305].u32[0];
              if (v52 + 16 * v53 > v49)
              {
                v54 = v53 - 1;
                LODWORD(v55) = v54 & ((v67 >> 4) ^ (v67 >> 9));
                v56 = (int32x2_t *****)(v52 + 16 * v55);
                v57 = *v56;
                if (v67 == *v56)
                {
LABEL_64:
                  *v56 = (int32x2_t ****)-8192;
                  v51[304] = vadd_s32(v51[304], (int32x2_t)0x1FFFFFFFFLL);
                  v50 = v67;
                }
                else
                {
                  v58 = 1;
                  while (v57 != (int32x2_t ****)-4096)
                  {
                    v59 = v55 + v58++;
                    v55 = v59 & v54;
                    v57 = *(int32x2_t *****)(v52 + 16 * v55);
                    if (v67 == v57)
                    {
                      v56 = (int32x2_t *****)(v52 + 16 * v55);
                      goto LABEL_64;
                    }
                  }
                }
                *((_BYTE *)v50 + 17) &= ~1u;
              }
            }
          }
        }
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v11, v48[7], *(_QWORD *)(a1 + 32));
      }
      if (++v35 == v36)
        goto LABEL_69;
    }
    v44 = 1;
    while (v43 != (int32x2_t ****)-4096)
    {
      v45 = v42 + v44++;
      v42 = v45 & v41;
      v43 = *(int32x2_t *****)(v40 + 16 * v42);
      if (v37 == v43)
        goto LABEL_44;
    }
LABEL_45:
    v46 = 0;
    goto LABEL_46;
  }
LABEL_69:
  v61 = (uint64_t *)a2[1];
  v60 = (uint64_t *)a2[2];
  while (v61 != v60)
  {
    v62 = *v61++;
    sub_1C5B25594(a1, v62, v11, a4, 1);
  }
  return v11;
}

void sub_1C5B259B8(const llvm::LoopInfo **a1, llvm *a2, uint64_t a3, uint64_t a4, llvm::ScalarEvolution *a5)
{
  uint64_t *v7;
  uint64_t Impl;
  const llvm::APInt *v9;
  uint64_t v10;
  llvm::ConstantInt *v11;
  llvm::Value *v12;
  llvm::ValueHandleBase *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MDNode *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::formLCSSARecursively(a2, a1[3], a1[4], a1[2], a5);
  llvm::simplifyLoop(a2, a1[3], (unint64_t **)a1[4], (int32x2_t *)a1[2], 0, 0, (llvm::MemorySSAUpdater *)1);
  v7 = (uint64_t *)****((_QWORD ****)a2 + 4);
  Impl = llvm::MDTuple::getImpl(v7, 0, 0, 0, 1);
  v19 = llvm::MDString::get(v7, "llvm.loop.unroll.disable", 0x18uLL);
  v10 = llvm::MDTuple::getImpl(v7, &v19, 1, 0, 1);
  v11 = *(llvm::ConstantInt **)(*v7 + 1888);
  LODWORD(v20) = *(_DWORD *)(*v7 + 1896) >> 8;
  if (v20 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, 0, 0);
  else
    v19 = 0;
  v13 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v19, v9);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  v14 = llvm::ValueAsMetadata::get(v13, v12);
  v19 = llvm::MDString::get(v7, "llvm.loop.vectorize.enable", 0x1AuLL);
  v20 = v14;
  v15 = llvm::MDTuple::getImpl(v7, &v19, 2, 0, 1);
  v19 = llvm::MDString::get(v7, "llvm.loop.licm_versioning.disable", 0x21uLL);
  v16 = llvm::MDTuple::getImpl(v7, &v19, 1, 0, 1);
  v19 = llvm::MDString::get(v7, "llvm.loop.distribute.enable", 0x1BuLL);
  v20 = v14;
  v17 = llvm::MDTuple::getImpl(v7, &v19, 2, 0, 1);
  v19 = (_QWORD *)Impl;
  v20 = (_QWORD *)v10;
  v21 = v15;
  v22 = v16;
  v23 = v17;
  v18 = (llvm::MDNode *)llvm::MDTuple::getImpl(v7, &v19, 5, 0, 1);
  llvm::MDNode::replaceOperandWith(v18, 0, v18);
  llvm::Loop::setLoopID(a2, v18);
}

void sub_1C5B25C08(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B25C2C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1C5B25CD8(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  int v3;
  char **v4;
  char *v5;
  int32x2_t *v6;
  void **v7;
  void *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  llvm::Loop *v16;
  uint64_t v17;
  unint64_t **v18;
  llvm **v19;
  llvm **v20;
  int v21;
  llvm *v22;
  llvm::ScalarEvolution *v23;
  uint64_t i;
  uint64_t j;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v32;
  _QWORD v33[4];
  char v34;
  char v35;
  _QWORD v36[9];
  void *v37;
  uint64_t v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v4 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v5 = *v4;
      v4 += 2;
    }
    while (v5 != llvm::ScalarEvolutionWrapperPass::ID);
    v6 = *(int32x2_t **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
    v7 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v8 = *v7;
      v7 += 2;
    }
    while (v8 != &llvm::BranchProbabilityInfoWrapperPass::ID);
    v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID);
    v10 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v11 = *v10;
      v10 += 2;
    }
    while (v11 != llvm::DominatorTreeWrapperPass::ID);
    v12 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::DominatorTreeWrapperPass::ID);
    v13 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v14 = *v13;
      v13 += 2;
    }
    while (v14 != llvm::LoopInfoWrapperPass::ID);
    v15 = v9 + 32;
    v16 = (llvm::Loop *)(v12 + 32);
    v17 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::LoopInfoWrapperPass::ID);
    v18 = (unint64_t **)(v17 + 32);
    v33[0] = v6;
    v33[1] = v15;
    v33[2] = v16;
    v33[3] = v17 + 32;
    v34 = 0;
    v35 = 0;
    v19 = *(llvm ***)(v17 + 56);
    v20 = *(llvm ***)(v17 + 64);
    if (v19 == v20)
    {
      v3 = 0;
    }
    else
    {
      v3 = 0;
      do
      {
        v21 = llvm::simplifyLoop(*v19, v16, v18, v6, 0, 0, 0);
        v22 = *v19++;
        v3 |= v21 | llvm::formLCSSARecursively(v22, v16, (const llvm::DominatorTree *)v18, (const llvm::LoopInfo *)v6, v23);
      }
      while (v19 != v20);
    }
    v36[0] = 1;
    for (i = 1; i != 9; i += 2)
      v36[i] = -4096;
    v37 = v39;
    v38 = 0x400000000;
    sub_1C5F3D7BC((uint64_t)v18, (char *)v36);
    v32 = v36;
    for (j = v38; (_DWORD)v38; j = v38)
    {
      v26 = (char *)v37 + 8 * j;
      v27 = (unsigned int *)*((_QWORD *)v26 - 1);
      sub_1C5B25FEC(v36, (_QWORD *)v26 - 1);
      v28 = v38 - 1;
      do
      {
        v29 = v28;
        if (!v28)
          break;
      }
      while (!*((_QWORD *)v37 + --v28));
      LODWORD(v38) = v29;
      v3 |= sub_1C5B1F634((uint64_t)v33, v27, (llvm::Value *)sub_1C5B25F88, (uint64_t)&v32);
    }
    if (v37 != v39)
      free(v37);
    if ((v36[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v36[1], 8);
  }
  return v3 & 1;
}

void sub_1C5B25F88(char **a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v7[6];

  if ((a3 & 1) == 0)
  {
    v7[4] = v3;
    v7[5] = v4;
    v5 = *a1;
    v6 = *(_QWORD *)(a2 + 8);
    v7[0] = *(_QWORD *)(a2 + 16);
    v7[1] = v7[0];
    v7[2] = v6;
    v7[3] = v6;
    sub_1C63B07A8((uint64_t)v7, v5);
  }
}

uint64_t sub_1C5B25FC4(uint64_t *a1)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(a1[1], &llvm::BlockFrequencyAnalysis::Key, *a1) + 8;
}

uint64_t sub_1C5B25FEC(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C5B2603C((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C5B2603C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void sub_1C5B260EC(char **a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v7[6];

  if ((a3 & 1) == 0)
  {
    v7[4] = v3;
    v7[5] = v4;
    v5 = *a1;
    v6 = *(_QWORD *)(a2 + 8);
    v7[0] = *(_QWORD *)(a2 + 16);
    v7[1] = v7[0];
    v7[2] = v6;
    v7[3] = v6;
    sub_1C63B07A8((uint64_t)v7, v5);
  }
}

uint64_t sub_1C5B26128()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  LODWORD(v3) = 1;
  v4 = 64;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C6186240((uint64_t)&unk_1ED81D250, "irce-loop-size-cutoff", &v3, (int **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81D250, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 0;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C63174BC(&v3, (char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81D310, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 0;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C617ACEC((uint64_t)&unk_1ED81D3D0, "irce-print-range-checks", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81D3D0, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 0;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C6317590(&v3, (char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81D490, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4 = 10;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C6317664(&v3, (int **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81D550, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 1;
  v1.n128_u64[0] = (unint64_t)&v4;
  sub_1C6317734(&v3, (char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81D610, &dword_1C475E000);
  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"If set to true, IRCE may eliminate wide range checks in loops with narrow latch condition.";
  v1.n128_u64[1] = 90;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81D6D0, "irce-allow-narrow-latch", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81D6D0, &dword_1C475E000);
}

char **llvm::IndVarSimplifyPass::run@<X0>(_BYTE *a1@<X0>, llvm::Loop *a2@<X1>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  char v12;
  char **result;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17[6];
  uint64_t v18;
  char *v19[52];

  v19[51] = *(char **)MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 4) + 56) + 40) + 272;
  v10 = a3 + 2;
  v9 = a3[2];
  v8 = v10[1];
  if (*a1)
    v11 = byte_1ED835D50 == 0;
  else
    v11 = 1;
  v12 = !v11;
  sub_1C5B26480((uint64_t)v17, v8, a3[4], v9, v7, a3[5], a3[6], a3[9], v12);
  if ((sub_1C5B2659C(v17, a2) & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a4);
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
    if (a3[9])
      sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  result = sub_1C50880D4(v19);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    sub_1C61247C0(v14 + 584, *(_QWORD **)(v14 + 592));
    v15 = *(void **)(v14 + 504);
    if (v15 != (void *)(v14 + 520))
      free(v15);
    v16 = *(void **)(v14 + 416);
    if (v16 != *(void **)(v14 + 408))
      free(v16);
    sub_1C4EE41F8((char **)(v14 + 8));
    return (char **)MEMORY[0x1CAA32FC0](v14, 0x10E0C40B8556DDDLL);
  }
  return result;
}

uint64_t sub_1C5B26480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 0x1000000000;
  *(_BYTE *)(a1 + 456) = a9;
  if (a8)
  {
    v11 = operator new();
    *(_QWORD *)v11 = a8;
    *(_QWORD *)(v11 + 8) = v11 + 24;
    *(_QWORD *)(v11 + 16) = 0x1000000000;
    *(_QWORD *)(v11 + 408) = v11 + 440;
    *(_QWORD *)(v11 + 416) = v11 + 440;
    *(_QWORD *)(v11 + 424) = 8;
    *(_DWORD *)(v11 + 432) = 0;
    *(_QWORD *)(v11 + 504) = v11 + 520;
    *(_QWORD *)(v11 + 512) = 0x800000000;
    *(_QWORD *)(v11 + 600) = 0;
    *(_QWORD *)(v11 + 592) = 0;
    *(_QWORD *)(v11 + 584) = v11 + 592;
    v12 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    if (v12)
    {
      sub_1C61247C0(v12 + 584, *(_QWORD **)(v12 + 592));
      v13 = *(void **)(v12 + 504);
      if (v13 != (void *)(v12 + 520))
        free(v13);
      v14 = *(void **)(v12 + 416);
      if (v14 != *(void **)(v12 + 408))
        free(v14);
      sub_1C4EE41F8((char **)(v12 + 8));
      MEMORY[0x1CAA32FC0](v12, 0x10E0C40B8556DDDLL);
    }
  }
  return a1;
}

uint64_t sub_1C5B2659C(uint64_t **a1, llvm::Loop *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  llvm::Instruction *v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  llvm::Instruction **v25;
  llvm::Instruction *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  llvm::UndefValue *v34;
  int v35;
  llvm::UndefValue *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BOOL8 v41;
  int v42;
  llvm::UndefValue *v43;
  _BOOL8 v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  llvm::UndefValue **v51;
  unsigned int v52;
  BOOL v54;
  uint64_t v56;
  int v57;
  BOOL v58;
  llvm::UndefValue *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::UndefValue **v88;
  llvm::UndefValue *v89;
  int v90;
  int v91;
  llvm::UndefValue *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  const llvm::APInt *v100;
  _QWORD *v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  _QWORD *v105;
  const llvm::APInt *v106;
  llvm::ConstantInt *v107;
  unsigned int v108;
  unint64_t v109;
  llvm::ValueHandleBase *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  llvm::UndefValue ***v115;
  llvm::UndefValue **v116;
  int v117;
  int v118;
  llvm::UndefValue **v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  llvm::Value *v123;
  int v124;
  _QWORD *v125;
  _DWORD *v126;
  const llvm::APInt *v127;
  llvm::Value *v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  llvm::SCEV **v135;
  llvm::SCEV *v136;
  int v137;
  int v138;
  llvm::SCEV *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  int32x2_t **v145;
  llvm::Type *v146;
  void (**v147)(void);
  llvm::UndefValue *v148;
  uint64_t *v149;
  int32x2_t **v150;
  void (**v151)(void);
  _DWORD *v152;
  llvm::Value *v153;
  llvm::Value ***v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  unsigned int v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v163;
  uint64_t ***v164;
  uint64_t *v165;
  int32x2_t **v166;
  void (**v167)(void);
  unint64_t v168;
  _QWORD ***v169;
  int32x2_t *v170;
  unint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  void **v175;
  _QWORD ***v176;
  int v177;
  int v178;
  uint64_t v179;
  llvm::ValueSymbolTable *v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  llvm::DSOLocalEquivalent **v184;
  char v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  llvm::Value *v193;
  uint64_t v194;
  llvm::DominatorTree *v195;
  int v196;
  char *v197;
  char ***v198;
  char *v199;
  __int128 v200;
  unsigned int v201;
  char v202;
  llvm::Value *v203;
  llvm::Value *v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  unsigned int *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  const char *v221;
  unsigned int v222;
  unsigned int v223;
  const char *v224;
  unsigned int v225;
  unsigned int v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t *v234;
  int v235;
  unsigned int v236;
  const llvm::SCEV *SCEVIter;
  const llvm::SCEV *v238;
  uint64_t RangeRef;
  uint64_t v240;
  unsigned int v241;
  __int16 v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  _BOOL4 isLoopInvariant;
  _BOOL4 v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  llvm::Value *v262;
  int v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  unsigned int v268;
  unsigned int v269;
  const char *v270;
  unsigned int v271;
  unsigned int v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t *v280;
  int v281;
  unsigned int v282;
  const llvm::SCEV *v283;
  const llvm::SCEV *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t LoopPredecessor;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  int32x2_t *v301;
  unint64_t v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  void **v306;
  void *v307;
  int v308;
  int v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  BOOL v324;
  uint64_t v325;
  llvm::Instruction **v326;
  uint64_t v327;
  uint64_t *j;
  uint64_t v329;
  int v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  int v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  BOOL v341;
  uint64_t LoopLatch;
  unint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t *v346;
  uint64_t *v347;
  unsigned __int16 *ExitCount;
  uint64_t v349;
  uint64_t v350;
  llvm::Value *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  llvm::Loop *v368;
  const llvm::Loop *v369;
  llvm::ScalarEvolution *v370;
  const llvm::Loop **BackedgeTakenInfo;
  llvm *Exact;
  unint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  int v386;
  llvm::Loop *v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  BOOL v392;
  uint64_t v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  llvm *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t k;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  int v417;
  uint64_t v419;
  uint64_t v420;
  llvm::Instruction **v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t v425;
  int v426;
  llvm::Instruction **v427;
  uint64_t *v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  int v439;
  llvm::Loop *v440;
  uint64_t v441;
  uint64_t v442;
  _BOOL4 v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned __int16 *v451;
  unsigned __int16 *v452;
  uint64_t v453;
  unsigned int *v454;
  uint64_t *v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unsigned int v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  unsigned int v468;
  uint64_t v469;
  BOOL v470;
  llvm::SCEV *v471;
  BOOL v472;
  uint64_t v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unsigned int v481;
  unint64_t v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  uint64_t v491;
  uint64_t v492;
  llvm::Instruction *v493;
  unint64_t v494;
  unsigned int v495;
  _QWORD *v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t *v499;
  uint64_t v500;
  int32x2_t *v501;
  unint64_t v502;
  uint64_t v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  int v508;
  int v509;
  unsigned __int8 *v510;
  unsigned int v512;
  uint64_t *v513;
  int32x2_t **v514;
  void (*v515)(void);
  unint64_t v516;
  llvm::Instruction *v517;
  int32x2_t *v518;
  unint64_t v519;
  uint64_t v520;
  unsigned int v521;
  uint64_t v522;
  llvm::Instruction **v523;
  llvm::Instruction *v524;
  int v525;
  int v526;
  uint64_t ExitBlock;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t m;
  uint64_t v534;
  unsigned int v535;
  uint64_t v536;
  _QWORD *v538;
  _QWORD *v539;
  char v540;
  char *v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  unsigned int v547;
  uint64_t v548;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t *v553;
  int v554;
  uint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  int v567;
  uint64_t v569;
  int v570;
  llvm::Instruction **v571;
  char v572;
  llvm::Instruction **v573;
  uint64_t n;
  uint64_t v575;
  int v576;
  uint64_t v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  BOOL v584;
  uint64_t v585;
  unsigned int v586;
  BOOL v587;
  int v588;
  uint64_t *v589;
  int v590;
  uint64_t v591;
  char v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  int v599;
  uint64_t v600;
  int v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  int v609;
  void *v610;
  uint64_t v611;
  uint64_t v612;
  void *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  int v617;
  int v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t *v624;
  uint64_t v625;
  uint64_t v626;
  llvm::Instruction **v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unsigned __int8 *v631;
  llvm::Type *WiderType;
  uint64_t v633;
  _QWORD *v634;
  const llvm::APInt *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  llvm::ConstantInt *v640;
  _QWORD *v641;
  uint64_t v642;
  uint64_t v643;
  __int16 v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t **v648;
  uint64_t v649;
  llvm::ConstantInt *v650;
  unsigned int v651;
  char v652;
  llvm::Instruction **v653;
  char *v654;
  uint64_t v655;
  llvm::Value *v656;
  llvm::ConstantInt *v657;
  llvm::Value *v658;
  llvm::PHINode *v659;
  unint64_t v660;
  unint64_t v661;
  _BOOL4 v662;
  llvm::ConstantInt *v663;
  llvm::ConstantInt *v664;
  llvm::ConstantInt *v665;
  llvm::ConstantInt *v666;
  llvm::ConstantInt *v667;
  unsigned int v668;
  __int16 v669;
  llvm::SCEV *v670;
  uint64_t v671;
  uint64_t v672;
  llvm::Instruction **v673;
  uint64_t *v674;
  uint64_t v675;
  char v676;
  char *v677;
  int v678;
  int v679;
  uint64_t v680;
  unint64_t *v681;
  _QWORD ***v682;
  unsigned int v683;
  uint64_t v684;
  uint64_t v685;
  llvm::Value *BackedgeTakenCount;
  _QWORD v687[3];
  _QWORD *v688;
  char *v689;
  uint64_t v690;
  _BYTE v691[432];
  _QWORD v692[40];
  void *v693;
  uint64_t *v694;
  uint64_t *v695;
  void **v696;
  llvm::Value *v697;
  char **v698;
  uint64_t v699;
  char v700;
  void *v701;
  uint64_t v702;
  llvm::Instruction *v703;
  void **v704;
  __int16 v705;
  void *__src;
  void *v707;
  uint64_t v708;
  void **v709;
  _WORD v710[16];
  uint64_t *v711;
  uint64_t v712;

  v712 = *MEMORY[0x1E0C80C00];
  if (!llvm::Loop::isLoopSimplifyForm(this))
  {
    v181 = 0;
    return v181 & 1;
  }
  v4 = **((_QWORD **)this + 4);
  v689 = v691;
  v690 = 0x800000000;
  if (*(_QWORD *)(v4 + 40) == v4 + 40)
    goto LABEL_258;
  LODWORD(v5) = 0;
  v6 = *(_QWORD *)(v4 + 48);
  v7 = (llvm::Instruction *)(v6 - 24);
  if (v6)
    v8 = v6 - 24;
  else
    v8 = 0;
  if (v6 && *(_BYTE *)(v8 + 16) == 83)
  {
    do
    {
      v701 = (void *)6;
      v702 = 0;
      v703 = v7;
      if (v7 != (llvm::Instruction *)-8192 && v7 != (llvm::Instruction *)-4096 && v7)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v701);
      v9 = (_QWORD *)sub_1C5087E70((unsigned int *)&v689, (unint64_t)&v701, 1);
      v10 = v690;
      v11 = &v689[24 * v690];
      *(_QWORD *)v11 = 6;
      *((_QWORD *)v11 + 1) = 0;
      v12 = (unint64_t)(v11 + 8);
      v13 = v9[2];
      *((_QWORD *)v11 + 2) = v13;
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
      {
        v15 = *v9 & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v11 + 1) = *(_QWORD *)v15;
        *(_QWORD *)v15 = v11;
        *(_QWORD *)v11 = v15 | 6;
        v16 = (uint64_t *)*((_QWORD *)v11 + 1);
        if (v16)
          *v16 = *v16 & 7 | v12;
      }
      v17 = (v10 + 1);
      LODWORD(v690) = v10 + 1;
      if (v703 != (llvm::Instruction *)-8192 && v703 != (llvm::Instruction *)-4096 && v703)
      {
        v18 = (unint64_t)v701 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v701 & 0xFFFFFFFFFFFFFFF8) = v702;
        if (v702)
        {
          *(_QWORD *)v702 = *(_QWORD *)v702 & 7 | v18;
        }
        else
        {
          v19 = v703;
          v20 = ***(int32x2_t ****)v703;
          v21 = (unint64_t)v20[303];
          if (v21 <= v18)
          {
            v22 = v20[305].u32[0];
            if (v21 + 16 * v22 > v18)
            {
              v23 = v22 - 1;
              LODWORD(v24) = v23 & ((v703 >> 4) ^ (v703 >> 9));
              v25 = (llvm::Instruction **)(v21 + 16 * v24);
              v26 = *v25;
              if (v703 != *v25)
              {
                v27 = 1;
                do
                {
                  if (v26 == (llvm::Instruction *)-4096)
                    goto LABEL_31;
                  v28 = v24 + v27++;
                  v24 = v28 & v23;
                  v26 = *(llvm::Instruction **)(v21 + 16 * v24);
                }
                while (v703 != v26);
                v25 = (llvm::Instruction **)(v21 + 16 * v24);
              }
              *v25 = (llvm::Instruction *)-8192;
              v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
              v19 = v703;
LABEL_31:
              *((_BYTE *)v19 + 17) &= ~1u;
            }
          }
        }
      }
      v29 = *((_QWORD *)v7 + 4);
      v7 = (llvm::Instruction *)(v29 - 24);
      if (v29)
        v30 = v29 - 24;
      else
        v30 = 0;
    }
    while (v29 && *(_BYTE *)(v30 + 16) == 83);
    if (!(_DWORD)v17)
      goto LABEL_258;
    v31 = 0;
    v32 = 0;
    v33 = (char *)this + 56;
    v677 = (char *)this + 56;
    while (1)
    {
      v34 = *(llvm::UndefValue **)&v689[24 * v31 + 16];
      if (!v34 || *((_BYTE *)v34 + 16) != 83)
        goto LABEL_84;
      v35 = *((_DWORD *)v34 + 5);
      v36 = (v35 & 0x40000000) != 0
          ? (llvm::UndefValue *)*((_QWORD *)v34 - 1)
          : (llvm::UndefValue *)((char *)v34 - 32 * (v35 & 0x7FFFFFF));
      v37 = sub_1C477672C((uint64_t)v33, *((_QWORD *)v36 + 4 * *((unsigned int *)v34 + 15)));
      v38 = *((_QWORD *)this + 8);
      v39 = v38 == *((_QWORD *)this + 7) ? 76 : 72;
      v40 = (_QWORD *)(v38 + 8 * *(unsigned int *)((char *)this + v39));
      v41 = v37 == v40;
      v42 = *((_DWORD *)v34 + 5);
      v43 = (v42 & 0x40000000) != 0
          ? (llvm::UndefValue *)*((_QWORD *)v34 - 1)
          : (llvm::UndefValue *)((char *)v34 - 32 * (v42 & 0x7FFFFFF));
      v44 = v37 != v40;
      v45 = *((_QWORD *)v43 + 4 * v44);
      v46 = *(unsigned __int8 *)(v45 + 16);
      BackedgeTakenCount = 0;
      v47 = v45 && v46 == 17;
      if (v47 && sub_1C5B2C0CC(v45 + 24, &BackedgeTakenCount))
        break;
      LOBYTE(v50) = 0;
LABEL_83:
      v32 |= v50;
LABEL_84:
      if (++v31 == v17)
      {
        if ((v32 & 1) != 0)
        {
          llvm::ScalarEvolution::forgetLoop((int32x2_t *)a1[1], this);
          LODWORD(v5) = 1;
          goto LABEL_259;
        }
LABEL_258:
        LODWORD(v5) = 0;
        goto LABEL_259;
      }
    }
    v48 = *((_DWORD *)v34 + 5);
    if ((v48 & 0x40000000) != 0)
      v49 = (_QWORD *)*((_QWORD *)v34 - 1);
    else
      v49 = (_QWORD *)((char *)v34 - 32 * (v48 & 0x7FFFFFF));
    v51 = (llvm::UndefValue **)v49[4 * v41];
    v52 = *((unsigned __int8 *)v51 + 16);
    v54 = v52 == 42 && v51 != 0 && v52 >= 0x1C;
    if (v54 && v52 - 59 >= 0xFFFFFFEE)
    {
      v56 = (uint64_t)*(v51 - 4);
      v57 = *(unsigned __int8 *)(v56 + 16);
      v685 = 0;
      v58 = v56 && v57 == 17;
      if (v58 && *(v51 - 8) == v34 && sub_1C5B2C0CC(v56 + 24, &v685))
      {
        v59 = v51[1];
        v50 = *((_QWORD *)v59 + 1);
        if (!v50)
        {
LABEL_82:
          v33 = (char *)this + 56;
          goto LABEL_83;
        }
        if (!*(_QWORD *)(v50 + 8))
        {
          v60 = *((_QWORD *)v59 + 3);
          v61 = *(_BYTE *)(v60 + 16) != 82 || v60 == 0;
          if (!v61 || (v60 = *(_QWORD *)(v50 + 24), *(_BYTE *)(v60 + 16) == 82))
          {
            v50 = *(_QWORD *)(v60 + 8);
            if (!v50)
              goto LABEL_82;
            if (!*(_QWORD *)(v50 + 8))
            {
              v62 = *(_QWORD *)(v50 + 24);
              if (*(_BYTE *)(v62 + 16) == 30)
              {
                v670 = (llvm::SCEV *)v60;
                v672 = *(_QWORD *)(v50 + 24);
                v63 = sub_1C477672C((uint64_t)v677, *(_QWORD *)(v62 + 40));
                v64 = *((_QWORD *)this + 8);
                v65 = 72;
                if (v64 == *((_QWORD *)this + 7))
                  v65 = 76;
                if (v63 != (_QWORD *)(v64 + 8 * *(unsigned int *)((char *)this + v65)))
                {
                  v66 = sub_1C477672C((uint64_t)v677, *(_QWORD *)(v672 - 32));
                  v67 = *((_QWORD *)this + 8);
                  v68 = 72;
                  if (v67 == *((_QWORD *)this + 7))
                    v68 = 76;
                  if (v66 == (_QWORD *)(v67 + 8 * *(unsigned int *)((char *)this + v68)))
                    goto LABEL_1190;
                  v69 = sub_1C477672C((uint64_t)v677, *(_QWORD *)(v672 - 64));
                  v70 = *((_QWORD *)this + 8);
                  v71 = 72;
                  if (v70 == *((_QWORD *)this + 7))
                    v71 = 76;
                  if (v69 == (_QWORD *)(v70 + 8 * *(unsigned int *)((char *)this + v71)))
                  {
LABEL_1190:
                    v72 = *((_QWORD *)v670 - 4);
                    v73 = *(unsigned __int8 *)(v72 + 16);
                    v684 = 0;
                    v74 = v72 && v73 == 17;
                    if (v74 && sub_1C5B2C0CC(v72 + 24, &v684))
                    {
                      LODWORD(v50) = 0;
                      v669 = 32;
                      v75 = 1;
                      v76 = 0;
                      v77 = 0;
                      v78 = 0;
                      v79 = 0;
                      switch(*((_WORD *)v670 + 9) & 0x3F)
                      {
                        case 1:
                        case 9:
                          goto LABEL_116;
                        case 2:
                        case 0xA:
                          LODWORD(v50) = 0;
                          v76 = 0;
                          v75 = 0;
                          v77 = 0;
                          v78 = 0;
                          v669 = 38;
                          v79 = 1;
                          goto LABEL_116;
                        case 3:
                        case 0xB:
                          v76 = 0;
                          v75 = 0;
                          v77 = 0;
                          v78 = 0;
                          v79 = 0;
                          v669 = 39;
                          LODWORD(v50) = 1;
                          goto LABEL_116;
                        case 4:
                        case 0xC:
                          LODWORD(v50) = 0;
                          v75 = 0;
                          v77 = 0;
                          v78 = 0;
                          v79 = 0;
                          v669 = 40;
                          v76 = 1;
                          goto LABEL_116;
                        case 5:
                        case 0xD:
                          LODWORD(v50) = 0;
                          v76 = 0;
                          v75 = 0;
                          v77 = 0;
                          v79 = 0;
                          v669 = 41;
                          v78 = 1;
                          goto LABEL_116;
                        case 6:
                        case 0xE:
                          LODWORD(v50) = 0;
                          v76 = 0;
                          v75 = 0;
                          v78 = 0;
                          v79 = 0;
                          v669 = 33;
                          v77 = 1;
LABEL_116:
                          v80 = v50;
                          v663 = BackedgeTakenCount;
                          if (BackedgeTakenCount != (llvm::Value *)(int)BackedgeTakenCount)
                            break;
                          v661 = v685;
                          if (v685 != (int)v685)
                            break;
                          LOBYTE(v50) = 0;
                          if (!v685)
                            goto LABEL_82;
                          v660 = v684;
                          if ((unint64_t)(v684 - 0x80000000) < 0xFFFFFFFF00000000)
                            goto LABEL_82;
                          if (v685 < 1)
                          {
                            if ((uint64_t)BackedgeTakenCount > v684)
                            {
                              v83 = (_DWORD)BackedgeTakenCount - v684;
                              if ((v80 | v76) != 1 || (v54 = __CFADD__(v83, 1), ++v83, !v54))
                              {
                                v84 = v83 + v83 / -(int)v685 * v685;
                                if ((v75 | v77) == 1)
                                {
                                  LOBYTE(v50) = 0;
                                  if (v84)
                                    goto LABEL_82;
                                }
                                if (!v84 || (int)v684 + (int)v685 <= v684)
                                  goto LABEL_136;
                              }
                            }
                          }
                          else if ((uint64_t)BackedgeTakenCount < v684)
                          {
                            v81 = v684 - (_DWORD)BackedgeTakenCount;
                            if ((v78 | v79) != 1 || (v54 = __CFADD__(v81, 1), ++v81, !v54))
                            {
                              v82 = v81 % v685;
                              if (((v75 | v77) != 1 || !v82) && (!v82 || (int)v684 + (int)v685 >= v684))
                              {
LABEL_136:
                                v658 = ***(llvm::Value ****)v34;
                                if ((*((_BYTE *)v34 + 23) & 0x10) != 0)
                                {
                                  v85 = *((_QWORD *)v658 + 19);
                                  v86 = *((unsigned int *)v658 + 42);
                                  if ((_DWORD)v86)
                                  {
                                    LODWORD(v87) = (v86 - 1) & ((v34 >> 4) ^ (v34 >> 9));
                                    v88 = (llvm::UndefValue **)(v85 + 16 * v87);
                                    v89 = *v88;
                                    if (*v88 != v34)
                                    {
                                      v90 = 1;
                                      do
                                      {
                                        if (v89 == (llvm::UndefValue *)-4096)
                                          goto LABEL_143;
                                        v91 = v87 + v90++;
                                        v87 = v91 & (v86 - 1);
                                        v89 = *(llvm::UndefValue **)(v85 + 16 * v87);
                                      }
                                      while (v89 != v34);
                                      v88 = (llvm::UndefValue **)(v85 + 16 * v87);
                                    }
                                  }
                                  else
                                  {
LABEL_143:
                                    v88 = (llvm::UndefValue **)(v85 + 16 * v86);
                                  }
                                  v92 = v88[1];
                                  v95 = *(_QWORD *)v92;
                                  v94 = (char *)v92 + 16;
                                  v93 = v95;
                                }
                                else
                                {
                                  v93 = 0;
                                  v94 = &byte_1C871356D;
                                }
                                v705 = 773;
                                v701 = v94;
                                v702 = v93;
                                v703 = (llvm::Instruction *)".int";
                                v96 = operator new(0x48uLL);
                                v96[1] = (char *)v658 + 1960;
                                v659 = (llvm::PHINode *)(v96 + 1);
                                *v96 = 0;
                                v96[2] = 0;
                                v96[3] = 0x4000000000000053;
                                *((_OWORD *)v96 + 2) = 0u;
                                v654 = (char *)(v96 + 4);
                                v656 = (llvm::Value *)v96;
                                *((_OWORD *)v96 + 3) = 0u;
                                *((_DWORD *)v96 + 16) = 0;
                                v97 = *((_QWORD *)v34 + 5);
                                v96[6] = v97;
                                *(_WORD *)(v97 + 18) &= ~0x8000u;
                                if ((*((_BYTE *)v96 + 31) & 0x10) != 0)
                                {
                                  v179 = *(_QWORD *)(v97 + 56);
                                  if (v179)
                                  {
                                    v180 = *(llvm::ValueSymbolTable **)(v179 + 104);
                                    if (v180)
                                      llvm::ValueSymbolTable::reinsertValue(v180, v659);
                                  }
                                }
                                v98 = *((_QWORD *)v34 + 3);
                                *((_QWORD *)v656 + 4) = v98;
                                *((_QWORD *)v656 + 5) = (char *)v34 + 24;
                                *(_QWORD *)(v98 + 8) = v654;
                                *((_QWORD *)v34 + 3) = v654;
                                *((_DWORD *)v656 + 17) = 2;
                                llvm::Value::setName((uint64_t ***)v659, (uint64_t)&v701);
                                v655 = *((unsigned int *)v656 + 17);
                                v99 = operator new(40 * v655);
                                *(_QWORD *)v656 = v99;
                                if ((_DWORD)v655)
                                {
                                  v101 = &v99[4 * v655];
                                  do
                                  {
                                    *v99 = 0;
                                    v99[1] = 0;
                                    v99[2] = 0;
                                    v99[3] = v659;
                                    v99 += 4;
                                  }
                                  while (v99 != v101);
                                }
                                v657 = (llvm::ConstantInt *)*((_QWORD *)v658 + 245);
                                v102 = *((_DWORD *)v658 + 492);
                                LODWORD(v702) = v102 >> 8;
                                if (v102 >> 8 > 0x40)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v701, (uint64_t)v663, 0);
                                }
                                else
                                {
                                  if (v102 <= 0xFF)
                                    v103 = 0;
                                  else
                                    v103 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v102);
                                  v701 = (void *)(v103 & (unint64_t)v663);
                                }
                                v664 = llvm::ConstantInt::get(v657, (llvm::LLVMContext *)&v701, v100);
                                if (v702 >= 0x41 && v701)
                                  MEMORY[0x1CAA32F9C](v701, 0x1000C8000313F17);
                                v104 = *((_DWORD *)v34 + 5);
                                if ((v104 & 0x40000000) != 0)
                                  v105 = (_QWORD *)*((_QWORD *)v34 - 1);
                                else
                                  v105 = (_QWORD *)((char *)v34 - 32 * (v104 & 0x7FFFFFF));
                                sub_1C477667C(v659, (uint64_t)v664, v105[4 * *((unsigned int *)v34 + 15) + v44]);
                                v107 = (llvm::ConstantInt *)*((_QWORD *)v658 + 245);
                                v108 = *((_DWORD *)v658 + 492);
                                LODWORD(v702) = v108 >> 8;
                                if (v108 >> 8 > 0x40)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v701, v661, 0);
                                }
                                else
                                {
                                  if (v108 <= 0xFF)
                                    v109 = 0;
                                  else
                                    v109 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v108);
                                  v701 = (void *)(v109 & v661);
                                }
                                v110 = llvm::ConstantInt::get(v107, (llvm::LLVMContext *)&v701, v106);
                                if (v702 >= 0x41 && v701)
                                  MEMORY[0x1CAA32F9C](v701, 0x1000C8000313F17);
                                if ((*((_BYTE *)v51 + 23) & 0x10) != 0)
                                {
                                  v111 = **(_QWORD **)*v51;
                                  v112 = *(_QWORD *)(v111 + 152);
                                  v113 = *(unsigned int *)(v111 + 168);
                                  if ((_DWORD)v113)
                                  {
                                    LODWORD(v114) = (v113 - 1) & ((v51 >> 4) ^ (v51 >> 9));
                                    v115 = (llvm::UndefValue ***)(v112 + 16 * v114);
                                    v116 = *v115;
                                    if (*v115 != v51)
                                    {
                                      v117 = 1;
                                      do
                                      {
                                        if (v116 == (llvm::UndefValue **)-4096)
                                          goto LABEL_170;
                                        v118 = v114 + v117++;
                                        v114 = v118 & (v113 - 1);
                                        v116 = *(llvm::UndefValue ***)(v112 + 16 * v114);
                                      }
                                      while (v116 != v51);
                                      v115 = (llvm::UndefValue ***)(v112 + 16 * v114);
                                    }
                                  }
                                  else
                                  {
LABEL_170:
                                    v115 = (llvm::UndefValue ***)(v112 + 16 * v113);
                                  }
                                  v119 = v115[1];
                                  v122 = (uint64_t)*v119;
                                  v121 = (char *)(v119 + 2);
                                  v120 = v122;
                                }
                                else
                                {
                                  v120 = 0;
                                  v121 = &byte_1C871356D;
                                }
                                v705 = 773;
                                v701 = v121;
                                v702 = v120;
                                v703 = (llvm::Instruction *)".int";
                                v123 = llvm::BinaryOperator::Create(13, v659, (uint64_t)v110, (uint64_t)&v701, (uint64_t)v51);
                                v124 = *((_DWORD *)v34 + 5);
                                if ((v124 & 0x40000000) != 0)
                                  v125 = (_QWORD *)*((_QWORD *)v34 - 1);
                                else
                                  v125 = (_QWORD *)((char *)v34 - 32 * (v124 & 0x7FFFFFF));
                                sub_1C477667C(v659, (uint64_t)v123, v125[4 * *((unsigned int *)v34 + 15) + v41]);
                                v126 = operator new(0x80uLL);
                                v128 = (llvm::Value *)(v126 + 16);
                                v126[21] = v126[21] & 0x38000000 | 2;
                                *(_QWORD *)v126 = 0;
                                *((_QWORD *)v126 + 1) = 0;
                                *((_QWORD *)v126 + 2) = 0;
                                *((_QWORD *)v126 + 3) = v126 + 16;
                                *((_QWORD *)v126 + 4) = 0;
                                *((_QWORD *)v126 + 5) = 0;
                                *((_QWORD *)v126 + 6) = 0;
                                *((_QWORD *)v126 + 7) = v126 + 16;
                                v665 = (llvm::ConstantInt *)*((_QWORD *)v658 + 245);
                                v129 = *((_DWORD *)v658 + 492);
                                LODWORD(v702) = v129 >> 8;
                                if (v129 >> 8 > 0x40)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v701, v660, 0);
                                }
                                else
                                {
                                  if (v129 <= 0xFF)
                                    v130 = 0;
                                  else
                                    v130 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v129);
                                  v701 = (void *)(v130 & v660);
                                }
                                v666 = llvm::ConstantInt::get(v665, (llvm::LLVMContext *)&v701, v127);
                                if (v702 >= 0x41 && v701)
                                  MEMORY[0x1CAA32F9C](v701, 0x1000C8000313F17);
                                if ((*((_BYTE *)v670 + 23) & 0x10) != 0)
                                {
                                  v131 = ***(_QWORD ***)v670;
                                  v132 = *(_QWORD *)(v131 + 152);
                                  v133 = *(unsigned int *)(v131 + 168);
                                  if ((_DWORD)v133)
                                  {
                                    LODWORD(v134) = (v133 - 1) & ((v670 >> 4) ^ (v670 >> 9));
                                    v135 = (llvm::SCEV **)(v132 + 16 * v134);
                                    v136 = *v135;
                                    if (*v135 != v670)
                                    {
                                      v137 = 1;
                                      do
                                      {
                                        if (v136 == (llvm::SCEV *)-4096)
                                          goto LABEL_187;
                                        v138 = v134 + v137++;
                                        v134 = v138 & (v133 - 1);
                                        v136 = *(llvm::SCEV **)(v132 + 16 * v134);
                                      }
                                      while (v136 != v670);
                                      v135 = (llvm::SCEV **)(v132 + 16 * v134);
                                    }
                                  }
                                  else
                                  {
LABEL_187:
                                    v135 = (llvm::SCEV **)(v132 + 16 * v133);
                                  }
                                  v139 = v135[1];
                                  v142 = *(_QWORD *)v139;
                                  v141 = (char *)v139 + 16;
                                  v140 = v142;
                                }
                                else
                                {
                                  v140 = 0;
                                  v141 = &byte_1C871356D;
                                }
                                v705 = 261;
                                v701 = v141;
                                v702 = v140;
                                sub_1C4774CC4(*(_DWORD **)v123);
                                llvm::CmpInst::CmpInst((uint64_t)v128, v143, 53, v669, (uint64_t)v123, (uint64_t)v666, (uint64_t)&v701, v672, 0);
                                v680 = 6;
                                v681 = 0;
                                v682 = (_QWORD ***)v34;
                                if (v34 != (llvm::UndefValue *)-8192 && v34 != (llvm::UndefValue *)-4096)
                                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v680);
                                llvm::Value::takeName(v128, v670);
                                llvm::Value::doRAUW(v670, v128, (llvm::Value *)1);
                                v144 = a1[4];
                                v145 = (int32x2_t **)a1[6];
                                v709 = 0;
                                llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v670, v144, v145, &__src);
                                if (v709 == &__src)
                                {
                                  v147 = (void (**)(void))((char *)__src + 32);
LABEL_196:
                                  (*v147)();
                                }
                                else if (v709)
                                {
                                  v147 = (void (**)(void))((char *)*v709 + 40);
                                  goto LABEL_196;
                                }
                                v148 = llvm::UndefValue::get(*v51, v146);
                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v51, v148, (llvm::Value *)1);
                                v149 = a1[4];
                                v150 = (int32x2_t **)a1[6];
                                v696 = 0;
                                llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v51, v149, v150, &v693);
                                if (v696 == &v693)
                                {
                                  v151 = (void (**)(void))((char *)v693 + 32);
LABEL_201:
                                  (*v151)();
                                }
                                else if (v696)
                                {
                                  v151 = (void (**)(void))((char *)*v696 + 40);
                                  goto LABEL_201;
                                }
                                if (v682)
                                {
                                  v152 = operator new(0x60uLL);
                                  v153 = (llvm::Value *)(v152 + 8);
                                  v152[13] = v152[13] & 0x38000000 | 1;
                                  *(_QWORD *)v152 = 0;
                                  *((_QWORD *)v152 + 1) = 0;
                                  *((_QWORD *)v152 + 2) = 0;
                                  *((_QWORD *)v152 + 3) = v152 + 8;
                                  v154 = *(llvm::Value ****)v34;
                                  v701 = "indvar.conv";
                                  v705 = 259;
                                  v155 = *((_QWORD *)v34 + 5);
                                  v156 = v155 + 40;
                                  for (i = *(_QWORD *)(v155 + 48); ; i = *(_QWORD *)(i + 8))
                                  {
                                    if (i == v156)
                                      goto LABEL_214;
                                    v158 = i - 24;
                                    if (!i)
                                      v158 = 0;
                                    if (*(_BYTE *)(v158 + 16) != 83)
                                      break;
                                  }
                                  v159 = *(unsigned __int8 *)(i - 8) - 38;
                                  v160 = v159 > 0x38;
                                  v161 = (1 << v159) & 0x100060000000001;
                                  if (v160 || v161 == 0)
                                    v156 = i;
                                  else
                                    v156 = *(_QWORD *)(i + 8);
LABEL_214:
                                  if (v156)
                                    v163 = v156 - 24;
                                  else
                                    v163 = 0;
                                  v164 = (uint64_t ***)sub_1C4FCD80C((uint64_t)(v152 + 8), (uint64_t)v154, 44, (uint64_t)v659, v163);
                                  llvm::Value::setName(v164, (uint64_t)&v701);
                                  llvm::Value::doRAUW(v34, v153, (llvm::Value *)1);
                                  v165 = a1[4];
                                  v166 = (int32x2_t **)a1[6];
                                  v704 = 0;
                                  llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v34, v165, v166, &v701);
                                  if (v704 == &v701)
                                  {
                                    v167 = (void (**)(void))((char *)v701 + 32);
LABEL_221:
                                    (*v167)();
                                  }
                                  else if (v704)
                                  {
                                    v167 = (void (**)(void))((char *)*v704 + 40);
                                    goto LABEL_221;
                                  }
                                }
                                if (v682 != (_QWORD ***)-8192 && v682 != (_QWORD ***)-4096 && v682)
                                {
                                  v168 = v680 & 0xFFFFFFFFFFFFFFF8;
                                  *(_QWORD *)(v680 & 0xFFFFFFFFFFFFFFF8) = v681;
                                  if (v681)
                                  {
                                    *v681 = *v681 & 7 | v168;
                                  }
                                  else
                                  {
                                    v169 = v682;
                                    v170 = (int32x2_t *)***v682;
                                    v171 = (unint64_t)v170[303];
                                    if (v171 <= v168)
                                    {
                                      v172 = v170[305].u32[0];
                                      if (v171 + 16 * v172 > v168)
                                      {
                                        v173 = v172 - 1;
                                        LODWORD(v174) = v173 & ((v682 >> 4) ^ (v682 >> 9));
                                        v175 = (void **)(v171 + 16 * v174);
                                        v176 = (_QWORD ***)*v175;
                                        if (v682 != *v175)
                                        {
                                          v177 = 1;
                                          do
                                          {
                                            if (v176 == (_QWORD ***)-4096)
                                              goto LABEL_234;
                                            v178 = v174 + v177++;
                                            v174 = v178 & v173;
                                            v176 = *(_QWORD ****)(v171 + 16 * v174);
                                          }
                                          while (v682 != v176);
                                          v175 = (void **)(v171 + 16 * v174);
                                        }
                                        *v175 = (void *)-8192;
                                        v170[304] = vadd_s32(v170[304], (int32x2_t)0x1FFFFFFFFLL);
                                        v169 = v682;
LABEL_234:
                                        *((_BYTE *)v169 + 17) &= ~1u;
                                      }
                                    }
                                  }
                                }
                                LOBYTE(v50) = 1;
                                goto LABEL_82;
                              }
                            }
                          }
                          break;
                        default:
                          goto LABEL_82;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    LOBYTE(v50) = 0;
    goto LABEL_82;
  }
LABEL_259:
  sub_1C52768FC(&v689);
  sub_1C50D02DC((uint64_t)&v689, (uint64_t ***)a1[1], (uint64_t)a1[3], (uint64_t)"indvars", 1);
  v691[424] = 0;
  v182 = (uint64_t)*a1;
  v671 = (uint64_t)&v703;
  v701 = &v703;
  v702 = 0x800000000;
  v183 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 4) + 56) + 40) + 112), "llvm.experimental.guard", 0x17uLL);
  v185 = 0;
  if (v183)
  {
    if (*(_BYTE *)(v183 + 16))
LABEL_1179:
      v185 = 0;
    else
      v185 = *(_QWORD *)(v183 + 8) != 0;
  }
  __src = &v708;
  v707 = (void *)0x800000000;
  if (*(_QWORD *)(**((_QWORD **)this + 4) + 40) != **((_QWORD **)this + 4) + 40)
  {
    v186 = 0;
    v187 = *(_QWORD *)(**((_QWORD **)this + 4) + 48);
    v188 = v187 - 24;
    if (v187)
      v189 = v187 - 24;
    else
      v189 = 0;
    if (!v187 || *(_BYTE *)(v189 + 16) != 83)
      goto LABEL_295;
    v190 = 0;
    do
    {
      if (v190 >= HIDWORD(v707))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v708, v190 + 1, 8);
        v190 = v707;
      }
      *((_QWORD *)__src + v190) = v188;
      v190 = (_DWORD)v707 + 1;
      LODWORD(v707) = (_DWORD)v707 + 1;
      v191 = *(_QWORD *)(v188 + 32);
      v188 = v191 - 24;
      if (v191)
        v192 = v191 - 24;
      else
        v192 = 0;
    }
    while (v191 && *(_BYTE *)(v192 + 16) == 83);
    if (v190)
    {
      v186 = 0;
      while (1)
      {
        v193 = (llvm::Value *)*((_QWORD *)__src + v190 - 1);
        LODWORD(v707) = v190 - 1;
        v194 = (uint64_t)a1[5];
        v195 = (llvm::DominatorTree *)a1[2];
        v695 = a1[1];
        v696 = (void **)v194;
        v699 = 0;
        v700 = 0;
        v693 = &off_1E8194E10;
        v694 = (uint64_t *)v195;
        v697 = v193;
        v698 = (char **)v193;
        v196 = llvm::simplifyUsersOfIV(v193, (uint64_t)v695, v195, (uint64_t *)v182, v194, (unsigned int *)a1 + 14, (llvm::SCEVExpander *)&v689, (uint64_t)&v693);
        if (v699)
        {
          v197 = (char *)v701;
          v198 = &v698;
          if (v702 >= HIDWORD(v702))
          {
            v206 = v702 + 1;
            if (v701 <= &v698 && (char *)v701 + 24 * v702 > (char *)&v698)
            {
              v667 = (llvm::ConstantInt *)((char *)&v698 - (_BYTE *)v701);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v701, v671, v206, 24);
              v197 = (char *)v701;
              v198 = (char ***)((char *)v667 + (_QWORD)v701);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v701, v671, v206, 24);
              v197 = (char *)v701;
              v198 = &v698;
            }
          }
          v199 = &v197[24 * v702];
          v200 = *(_OWORD *)v198;
          *((_QWORD *)v199 + 2) = v198[2];
          *(_OWORD *)v199 = v200;
          LODWORD(v702) = v702 + 1;
        }
        v186 |= v196;
        v190 = v707;
        if (!(_DWORD)v707)
        {
          if (!*((_BYTE *)a1 + 456))
            break;
          v201 = v702;
          if (!(_DWORD)v702)
            break;
          v202 = v186 & 1;
          do
          {
            LODWORD(v693) = 0;
            LODWORD(v680) = 0;
            v203 = llvm::createWideIV((__int128 *)((char *)v701 + 24 * v201 - 24), v182, (llvm::ScalarEvolution *)a1[1], (llvm::SCEVExpander *)&v689, (llvm::DominatorTree *)a1[2], (unsigned int *)a1 + 14, &v693, &v680, v185, byte_1ED81D8E0);
            if (v203)
            {
              v204 = v203;
              v205 = v707;
              if (v707 >= (unint64_t)HIDWORD(v707))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v708, v707 + 1, 8);
                v205 = v707;
              }
              *((_QWORD *)__src + v205) = v204;
              LODWORD(v707) = (_DWORD)v707 + 1;
              v202 = 1;
            }
            v201 = v702 - 1;
            LODWORD(v702) = v702 - 1;
          }
          while ((_DWORD)v702);
          v190 = v707;
          v186 = v202 & 1;
          if (!(_DWORD)v707)
            break;
        }
      }
      goto LABEL_295;
    }
  }
  v186 = 0;
LABEL_295:
  if (__src != &v708)
    free(__src);
  if (v701 != (void *)v671)
    free(v701);
  v207 = v5 | v186;
  if (dword_1ED81DB20)
    v207 |= llvm::rewriteLoopExitValues(this, (uint64_t)*a1, a1[4], (int32x2_t *)a1[1], (uint64_t)a1[5], (uint64_t)&v689, (uint64_t)a1[2], dword_1ED81DB20, (unsigned int *)a1 + 14) != 0;
  LODWORD(v671) = v207;
  v208 = (unsigned int *)(a1 + 7);
  llvm::SCEVExpander::replaceCongruentIVs((uint64_t *)&v689, this, (uint64_t)a1[2], (unsigned int *)a1 + 14, (llvm::Type *)a1[5], v184);
  v5 = (uint64_t)&v703;
  v701 = &v703;
  v702 = 0x1000000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(this, (uint64_t)&v701);
  v182 = (uint64_t)v701;
  if (!(_DWORD)v702)
  {
    v678 = 0;
    goto LABEL_502;
  }
  v678 = 0;
  v209 = (char *)v701 + 8 * v702;
  do
  {
    v210 = *(_QWORD *)v182;
    v211 = *(_QWORD *)(*(_QWORD *)v182 + 40);
    if (v211 != *(_QWORD *)v182 + 40)
    {
      v212 = v211 - 24;
      if (!v211)
        v212 = 0;
      v213 = *(unsigned __int8 *)(v212 + 16) - 40;
      if (v213 < 0xFFFFFFF5)
        v212 = 0;
      if (v211)
      {
        if (*(_BYTE *)(v212 + 16) == 30 && v213 >= 0xFFFFFFF5)
        {
          v215 = *(_QWORD *)(v212 - 96);
          if (v215)
          {
            if (*(_BYTE *)(v215 + 16) == 81)
            {
              v216 = *(_QWORD *)(v215 + 8);
              if (v216)
              {
                if (!*(_QWORD *)(v216 + 8))
                {
                  v217 = *(_QWORD *)(v215 - 64);
                  v218 = *(_QWORD *)(v215 - 32);
                  if (llvm::Loop::isLoopInvariant((uint64_t)this, v218))
                  {
                    v219 = (uint64_t *)v218;
                    v218 = v217;
                  }
                  else
                  {
                    v219 = (uint64_t *)v217;
                    if (!llvm::Loop::isLoopInvariant((uint64_t)this, v217))
                      goto LABEL_318;
                  }
                  v680 = 0;
                  __src = &v680;
                  if (sub_1C4B0378C((_QWORD **)&__src, v218))
                  {
                    if ((*(_WORD *)(v215 + 18) & 0x3Eu) - 38 < 4)
                    {
                      v220 = *(_QWORD *)(*(_QWORD *)(v210 + 56) + 40) + 272;
                      sub_1C4768AD0(v220, *(_QWORD *)v680);
                      v223 = v222;
                      if ((_DWORD)v221 == 1)
                      sub_1C4768AD0(v220, *v219);
                      v226 = v225;
                      if ((_DWORD)v224 == 1)
                      LODWORD(v707) = v223;
                      if (v223 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
                        LODWORD(v709) = (_DWORD)v707;
                        if (v707 > 0x40)
                        {
                          v708 = operator new[]();
                          memcpy((void *)v708, __src, (((unint64_t)v709 + 63) >> 3) & 0x3FFFFFF8);
                          goto LABEL_334;
                        }
                      }
                      else
                      {
                        v227 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v223);
                        if (!v223)
                          v227 = 0;
                        __src = v227;
                        LODWORD(v709) = v223;
                      }
                      v708 = (uint64_t)__src;
LABEL_334:
                      llvm::ConstantRange::zeroExtend((llvm::ConstantRange *)&__src, v226, (uint64_t)&v693);
                      if (v707 >= 0x41 && __src)
                        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                      __src = v693;
                      LODWORD(v707) = (_DWORD)v694;
                      LODWORD(v694) = 0;
                      if (v709 >= 0x41 && v708)
                      {
                        MEMORY[0x1CAA32F9C](v708, 0x1000C8000313F17);
                        v708 = (uint64_t)v695;
                        LODWORD(v709) = (_DWORD)v696;
                        LODWORD(v696) = 0;
                        if (v694 >= 0x41 && v693)
                          MEMORY[0x1CAA32F9C](v693, 0x1000C8000313F17);
                      }
                      else
                      {
                        v708 = (uint64_t)v695;
                        LODWORD(v709) = (_DWORD)v696;
                      }
                      v228 = (uint64_t)a1[1];
                      v229 = *(_QWORD *)(v228 + 104);
                      v230 = *(_DWORD *)(v228 + 120);
                      if (v230)
                      {
                        v231 = v230 - 1;
                        v232 = (v230 - 1) & ((v219 >> 4) ^ (v219 >> 9));
                        v233 = v229 + 48 * v232;
                        v234 = *(uint64_t **)(v233 + 24);
                        if (v234 == v219)
                          goto LABEL_344;
                        v235 = 1;
                        while (v234 != (uint64_t *)-4096)
                        {
                          v236 = v232 + v235++;
                          v232 = v236 & v231;
                          v233 = v229 + 48 * (v236 & v231);
                          v234 = *(uint64_t **)(v233 + 24);
                          if (v234 == v219)
                            goto LABEL_344;
                        }
                      }
                      v233 = v229 + 48 * v230;
LABEL_344:
                      if (v233 == v229 + 48 * v230 || (SCEVIter = *(const llvm::SCEV **)(v233 + 40)) == 0)
                        SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1[1], (unint64_t)v219);
                      v238 = llvm::ScalarEvolution::applyLoopGuards((llvm::AssumptionCache **)v228, SCEVIter, this);
                      RangeRef = llvm::ScalarEvolution::getRangeRef(v228, (uint64_t)v238, 0, 0);
                      v240 = RangeRef;
                      LODWORD(v694) = *(_DWORD *)(RangeRef + 8);
                      if (v694 > 0x40)
                      {
                        v693 = (void *)operator new[]();
                        memcpy(v693, *(const void **)v240, (((unint64_t)v694 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        v693 = *(void **)RangeRef;
                      }
                      v241 = *(_DWORD *)(v240 + 24);
                      LODWORD(v696) = v241;
                      if (v241 > 0x40)
                      {
                        v695 = (uint64_t *)operator new[]();
                        v241 = v696;
                        memcpy(v695, *(const void **)(v240 + 16), (((unint64_t)v696 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        v695 = *(uint64_t **)(v240 + 16);
                      }
                      if (llvm::ConstantRange::contains((llvm::ConstantRange *)&__src, (const llvm::ConstantRange *)&v693))
                      {
                        v242 = *(_WORD *)(v215 + 18);
                        if ((v242 & 0x3Fu) - 32 >= 6)
                          __asm { BR              X10 }
                        *(_WORD *)(v215 + 18) = v242;
                        v678 = 1;
                      }
                      if (v241 >= 0x41 && v695)
                        MEMORY[0x1CAA32F9C](v695, 0x1000C8000313F17);
                      if (v694 >= 0x41 && v693)
                        MEMORY[0x1CAA32F9C](v693, 0x1000C8000313F17);
                      if (v709 >= 0x41 && v708)
                        MEMORY[0x1CAA32F9C](v708, 0x1000C8000313F17);
                      if (v707 >= 0x41 && __src)
                        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_318:
    v182 += 8;
  }
  while ((char *)v182 != v209);
  v182 = (uint64_t)v701;
  if (!(_DWORD)v702)
    goto LABEL_500;
  v243 = (char *)v701 + 8 * v702;
  while (2)
  {
    v244 = *(_QWORD *)v182;
    v245 = *(_QWORD *)(*(_QWORD *)v182 + 40);
    if (v245 != *(_QWORD *)v182 + 40)
    {
      v246 = v245 - 24;
      if (!v245)
        v246 = 0;
      v247 = *(unsigned __int8 *)(v246 + 16) - 40;
      if (v247 < 0xFFFFFFF5)
        v246 = 0;
      if (v245)
      {
        if (*(_BYTE *)(v246 + 16) == 30 && v247 >= 0xFFFFFFF5)
        {
          v249 = *(_QWORD *)(v246 - 96);
          if (v249)
          {
            if (*(_BYTE *)(v249 + 16) == 81)
            {
              v250 = *(_QWORD *)(v249 + 8);
              if (v250)
              {
                if (!*(_QWORD *)(v250 + 8) && (*(_WORD *)(v249 + 18) & 0x3Eu) - 34 <= 3)
                {
                  v251 = *(_QWORD *)(v249 - 64);
                  v252 = *(uint64_t **)(v249 - 32);
                  isLoopInvariant = llvm::Loop::isLoopInvariant((uint64_t)this, v251);
                  if (isLoopInvariant != llvm::Loop::isLoopInvariant((uint64_t)this, (uint64_t)v252))
                  {
                    v254 = llvm::Loop::isLoopInvariant((uint64_t)this, v251);
                    v668 = v254;
                    if (v254)
                      v255 = (uint64_t *)v251;
                    else
                      v255 = v252;
                    if (!v254)
                      v252 = (uint64_t *)v251;
                    BackedgeTakenCount = 0;
                    __src = &BackedgeTakenCount;
                    if (sub_1C4B0378C((_QWORD **)&__src, (uint64_t)v252))
                    {
                      v256 = v252[1];
                      if (v256)
                      {
                        if (!*(_QWORD *)(v256 + 8))
                          goto LABEL_415;
                      }
                      v257 = a1[1];
                      v258 = v257[13];
                      v259 = *((_DWORD *)v257 + 30);
                      if (!v259)
                        goto LABEL_410;
                      v260 = ((BackedgeTakenCount >> 4) ^ (BackedgeTakenCount >> 9)) & (v259 - 1);
                      v261 = v258 + 48 * v260;
                      v262 = *(llvm::Value **)(v261 + 24);
                      if (v262 != BackedgeTakenCount)
                      {
                        v263 = 1;
                        while (v262 != (llvm::Value *)-4096)
                        {
                          v264 = v260 + v263++;
                          v260 = v264 & (v259 - 1);
                          v261 = v258 + 48 * v260;
                          v262 = *(llvm::Value **)(v261 + 24);
                          if (v262 == BackedgeTakenCount)
                            goto LABEL_411;
                        }
LABEL_410:
                        v261 = v258 + 48 * v259;
                      }
LABEL_411:
                      if (v261 == v258 + 48 * v259 || (v265 = *(_QWORD *)(v261 + 40)) == 0)
                        v265 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v257, (unint64_t)BackedgeTakenCount);
                      if (*(_WORD *)(v265 + 24) == 7)
                      {
LABEL_415:
                        v266 = *(_QWORD *)(*(_QWORD *)(v244 + 56) + 40) + 272;
                        sub_1C4768AD0(v266, *(_QWORD *)BackedgeTakenCount);
                        v269 = v268;
                        if ((_DWORD)v267 == 1)
                        sub_1C4768AD0(v266, *v255);
                        v272 = v271;
                        if ((_DWORD)v270 == 1)
                        LODWORD(v694) = v269;
                        if (v269 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v693, -1, 1);
                          LODWORD(v696) = (_DWORD)v694;
                          if (v694 <= 0x40)
                            goto LABEL_423;
                          v695 = (uint64_t *)operator new[]();
                          memcpy(v695, v693, (((unint64_t)v696 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else
                        {
                          if (v269)
                            v273 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v269);
                          else
                            v273 = 0;
                          v693 = v273;
                          LODWORD(v696) = v269;
LABEL_423:
                          v695 = (uint64_t *)v693;
                        }
                        LODWORD(v5) = 48;
                        llvm::ConstantRange::zeroExtend((llvm::ConstantRange *)&v693, v272, (uint64_t)&__src);
                        if (v694 >= 0x41 && v693)
                          MEMORY[0x1CAA32F9C](v693, 0x1000C8000313F17);
                        v693 = __src;
                        LODWORD(v694) = (_DWORD)v707;
                        LODWORD(v707) = 0;
                        if (v696 >= 0x41 && v695)
                        {
                          MEMORY[0x1CAA32F9C](v695, 0x1000C8000313F17);
                          v695 = (uint64_t *)v708;
                          LODWORD(v696) = (_DWORD)v709;
                          LODWORD(v709) = 0;
                          if (v707 >= 0x41 && __src)
                            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                        }
                        else
                        {
                          v695 = (uint64_t *)v708;
                          LODWORD(v696) = (_DWORD)v709;
                        }
                        v274 = (uint64_t)a1[1];
                        v275 = *(_QWORD *)(v274 + 104);
                        v276 = *(_DWORD *)(v274 + 120);
                        if (v276)
                        {
                          v277 = v276 - 1;
                          v278 = (v276 - 1) & ((v255 >> 4) ^ (v255 >> 9));
                          v279 = v275 + 48 * v278;
                          v280 = *(uint64_t **)(v279 + 24);
                          if (v280 != v255)
                          {
                            v281 = 1;
                            while (v280 != (uint64_t *)-4096)
                            {
                              v282 = v278 + v281++;
                              v278 = v282 & v277;
                              v279 = v275 + 48 * (v282 & v277);
                              v280 = *(uint64_t **)(v279 + 24);
                              if (v280 == v255)
                                goto LABEL_434;
                            }
                            goto LABEL_433;
                          }
                        }
                        else
                        {
LABEL_433:
                          v279 = v275 + 48 * v276;
                        }
LABEL_434:
                        if (v279 == v275 + 48 * v276 || (v283 = *(const llvm::SCEV **)(v279 + 40)) == 0)
                          v283 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1[1], (unint64_t)v255);
                        v284 = llvm::ScalarEvolution::applyLoopGuards((llvm::AssumptionCache **)v274, v283, this);
                        v285 = llvm::ScalarEvolution::getRangeRef(v274, (uint64_t)v284, 0, 0);
                        v286 = v285;
                        LODWORD(v681) = *(_DWORD *)(v285 + 8);
                        if (v681 > 0x40)
                        {
                          v680 = operator new[]();
                          memcpy((void *)v680, *(const void **)v286, (((unint64_t)v681 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else
                        {
                          v680 = *(_QWORD *)v285;
                        }
                        v683 = *(_DWORD *)(v286 + 24);
                        if (v683 > 0x40)
                        {
                          v682 = (_QWORD ***)operator new[]();
                          memcpy(v682, *(const void **)(v286 + 16), (((unint64_t)v683 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else
                        {
                          v682 = *(_QWORD ****)(v286 + 16);
                        }
                        if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v693, (const llvm::ConstantRange *)&v680))
                        {
                          v710[0] = 257;
                          LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
                          if (LoopPredecessor)
                          {
                            v288 = *(_QWORD *)(LoopPredecessor + 40);
                            if (v288 != LoopPredecessor + 40)
                            {
                              v289 = v288 ? v288 - 24 : 0;
                              if (*(_BYTE *)(v289 + 16) != 30)
                              {
                                switch(*(_BYTE *)(v289 + 16))
                                {
                                  case 0x1E:
LABEL_1178:
                                    __break(1u);
                                    goto LABEL_1179;
                                  default:
                                    break;
                                }
                              }
                            }
                          }
                          llvm::CastInst::Create(38);
                          v291 = v290;
                          sub_1C6317AD8(v249, v668, (uint64_t)BackedgeTakenCount);
                          sub_1C6317AD8(v249, v668 ^ 1, v291);
                          if (!v252[1])
                          {
                            __src = (void *)6;
                            v707 = 0;
                            v708 = (uint64_t)v252;
                            if (v252 != (uint64_t *)-8192 && v252 != (uint64_t *)-4096 && v252)
                              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
                            v292 = (_QWORD *)sub_1C5087E70((unsigned int *)a1 + 14, (unint64_t)&__src, 1);
                            v293 = *((_DWORD *)a1 + 16);
                            v294 = (unint64_t *)&a1[7][3 * v293];
                            *v294 = 6;
                            v294[1] = 0;
                            v295 = (unint64_t)(v294 + 1);
                            v296 = v292[2];
                            v294[2] = v296;
                            if (v296 != -8192 && v296 != -4096)
                            {
                              if (v296)
                              {
                                v297 = *v292 & 0xFFFFFFFFFFFFFFF8;
                                v294[1] = *(_QWORD *)v297;
                                *(_QWORD *)v297 = v294;
                                *v294 = v297 | 6;
                                v298 = (uint64_t *)v294[1];
                                if (v298)
                                  *v298 = *v298 & 7 | v295;
                              }
                            }
                            *((_DWORD *)a1 + 16) = v293 + 1;
                            if (v708 != -8192 && v708 != -4096 && v708)
                            {
                              v299 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
                              *(_QWORD *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v707;
                              if (v707)
                              {
                                *(_QWORD *)v707 = *(_QWORD *)v707 & 7 | v299;
                              }
                              else
                              {
                                v300 = v708;
                                v301 = ***(int32x2_t ****)v708;
                                v302 = (unint64_t)v301[303];
                                if (v302 <= v299)
                                {
                                  v303 = v301[305].u32[0];
                                  if (v302 + 16 * v303 > v299)
                                  {
                                    v304 = v303 - 1;
                                    LODWORD(v305) = v304 & ((v708 >> 4) ^ (v708 >> 9));
                                    v306 = (void **)(v302 + 16 * v305);
                                    v307 = *v306;
                                    if ((void *)v708 == *v306)
                                    {
LABEL_478:
                                      *v306 = (void *)-8192;
                                      v301[304] = vadd_s32(v301[304], (int32x2_t)0x1FFFFFFFFLL);
                                      v300 = v708;
                                    }
                                    else
                                    {
                                      v308 = 1;
                                      while (v307 != (void *)-4096)
                                      {
                                        v309 = v305 + v308++;
                                        v305 = v309 & v304;
                                        v307 = *(void **)(v302 + 16 * v305);
                                        if ((void *)v708 == v307)
                                        {
                                          v306 = (void **)(v302 + 16 * v305);
                                          goto LABEL_478;
                                        }
                                      }
                                    }
                                    *(_BYTE *)(v300 + 17) &= ~1u;
                                  }
                                }
                              }
                            }
                          }
                          v678 = 1;
                        }
                        if (v683 >= 0x41 && v682)
                          MEMORY[0x1CAA32F9C](v682, 0x1000C8000313F17);
                        if (v681 >= 0x41 && v680)
                          MEMORY[0x1CAA32F9C](v680, 0x1000C8000313F17);
                        if (v696 >= 0x41 && v695)
                          MEMORY[0x1CAA32F9C](v695, 0x1000C8000313F17);
                        if (v694 >= 0x41 && v693)
                          MEMORY[0x1CAA32F9C](v693, 0x1000C8000313F17);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v182 += 8;
    if ((char *)v182 != v243)
      continue;
    break;
  }
  v182 = (uint64_t)v701;
LABEL_500:
  v5 = (uint64_t)&v703;
LABEL_502:
  if ((llvm::Instruction **)v182 != &v703)
    free((void *)v182);
  v680 = (uint64_t)this;
  v701 = &v703;
  v702 = 0x1000000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(this, (uint64_t)&v701);
  v310 = (uint64_t *)v701;
  if ((_DWORD)v702)
  {
    v311 = (uint64_t *)((char *)v701 + 8 * v702);
    while (1)
    {
      v312 = *v310;
      v313 = *((_DWORD *)*a1 + 4);
      if (v313)
      {
        v314 = **a1;
        v315 = v313 - 1;
        v316 = ((v312 >> 4) ^ (v312 >> 9)) & (v313 - 1);
        v317 = *(_QWORD *)(v314 + 16 * v316);
        if (v312 == v317)
        {
LABEL_511:
          v320 = *(void **)(v314 + 16 * v316 + 8);
          goto LABEL_513;
        }
        v318 = 1;
        while (v317 != -4096)
        {
          v319 = v316 + v318++;
          v316 = v319 & v315;
          v317 = *(_QWORD *)(v314 + 16 * v316);
          if (v312 == v317)
            goto LABEL_511;
        }
      }
      v320 = 0;
LABEL_513:
      if (v320 != (void *)v680)
        goto LABEL_532;
      v321 = *(_QWORD *)(v312 + 40);
      if (v321 == v312 + 40)
        goto LABEL_532;
      v322 = v321 - 24;
      if (!v321)
        v322 = 0;
      v323 = *(unsigned __int8 *)(v322 + 16) - 40;
      if (v323 < 0xFFFFFFF5)
        v322 = 0;
      if (!v321
        || (*(_BYTE *)(v322 + 16) == 30 ? (v324 = v323 >= 0xFFFFFFF5) : (v324 = 0),
            !v324
         || *(unsigned __int8 *)(*(_QWORD *)(v322 - 96) + 16) < 0x15u
         || (v5 = (uint64_t)a1[2],
             v325 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v320),
             !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v5, v312, v325))))
      {
LABEL_532:
        for (j = v310 + 1; ; ++j)
        {
          if (j == v311)
            goto LABEL_529;
          v329 = *j;
          v330 = *((_DWORD *)*a1 + 4);
          if (!v330)
            goto LABEL_540;
          v331 = **a1;
          v332 = v330 - 1;
          v333 = ((v329 >> 4) ^ (v329 >> 9)) & (v330 - 1);
          v334 = *(_QWORD *)(v331 + 16 * v333);
          if (v329 != v334)
            break;
LABEL_539:
          v337 = *(void **)(v331 + 16 * v333 + 8);
LABEL_541:
          if (v337 == (void *)v680)
          {
            v338 = *(_QWORD *)(v329 + 40);
            if (v338 != v329 + 40)
            {
              v339 = v338 - 24;
              if (!v338)
                v339 = 0;
              v340 = *(unsigned __int8 *)(v339 + 16) - 40;
              if (v340 < 0xFFFFFFF5)
                v339 = 0;
              if (v338)
              {
                v341 = *(_BYTE *)(v339 + 16) == 30 && v340 >= 0xFFFFFFF5;
                if (v341 && *(unsigned __int8 *)(*(_QWORD *)(v339 - 96) + 16) >= 0x15u)
                {
                  v5 = (uint64_t)a1[2];
                  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v337);
                  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v5, v329, LoopLatch))
                    *v310++ = *j;
                }
              }
            }
          }
        }
        v335 = 1;
        while (v334 != -4096)
        {
          v336 = v333 + v335++;
          v333 = v336 & v332;
          v334 = *(_QWORD *)(v331 + 16 * v333);
          if (v329 == v334)
            goto LABEL_539;
        }
LABEL_540:
        v337 = 0;
        goto LABEL_541;
      }
      if (++v310 == v311)
      {
        v310 = v311;
        break;
      }
    }
  }
LABEL_529:
  v326 = (llvm::Instruction **)v701;
  LODWORD(v702) = (unint64_t)((char *)v310 - (_BYTE *)v701) >> 3;
  if ((_DWORD)v702
    && (BackedgeTakenCount = 0,
        BackedgeTakenCount = (llvm::Value *)llvm::ScalarEvolution::getBackedgeTakenCount((llvm::ScalarEvolution *)a1[1], (const llvm::Loop *)v680, 2), v326 = (llvm::Instruction **)v701, *((_WORD *)BackedgeTakenCount + 12) != 15))
  {
    __src = a1;
    v343 = 126 - 2 * __clz(v702);
    if ((_DWORD)v702)
      v344 = v343;
    else
      v344 = 0;
    sub_1C5B2CD0C((uint64_t *)v701, (uint64_t *)v701 + v702, (uint64_t)&__src, v344, 1);
    __src = v710;
    v707 = v710;
    v708 = 8;
    LODWORD(v709) = 0;
    if ((_DWORD)v702)
    {
      v327 = 0;
      v345 = 0;
      v346 = (uint64_t *)v701;
      v347 = (uint64_t *)((char *)v701 + 8 * v702);
      do
      {
        v685 = 0;
        v685 = *v346;
        ExitCount = (unsigned __int16 *)llvm::ScalarEvolution::getExitCount((llvm::ScalarEvolution *)a1[1], (const llvm::Loop *)v680, v685, 0);
        LODWORD(v5) = ExitCount[12];
        if ((_DWORD)v5 == 15)
        {
          v349 = *(_QWORD *)(v685 + 40);
          if (v349 == v685 + 40)
          {
            v350 = 0;
          }
          else
          {
            if (v349)
              v350 = v349 - 24;
            else
              v350 = 0;
            if (*(unsigned __int8 *)(v350 + 16) - 29 >= 0xB)
              v350 = 0;
          }
          v684 = v350;
          v693 = &v680;
          v694 = &v684;
          v695 = &v685;
          v696 = (void **)&BackedgeTakenCount;
          v697 = (llvm::Value *)a1;
          v698 = &v689;
          if ((sub_1C5B2C44C((uint64_t)&v693, 0) & 1) != 0
            || (v356 = sub_1C5B2C44C((uint64_t)&v693, 1u), v355 = v356 | v327, (v356 & 1) == 0)
            && ((v345 ^ 1) & 1) == 0
            && ((sub_1C5B2C44C((uint64_t)&v693, 0) & 1) != 0
             || (v357 = sub_1C5B2C44C((uint64_t)&v693, 1u), v355 = v327, v357)))
          {
            v355 = 1;
          }
          v327 = v355;
        }
        else
        {
          v351 = BackedgeTakenCount;
          v345 |= BackedgeTakenCount == (llvm::Value *)ExitCount;
          if (!llvm::SCEV::isZero((llvm::SCEV *)ExitCount))
            __asm { BR              X9 }
          sub_1C5B2CBE4(v680, v685, 1u, (unsigned int *)a1 + 14);
          v182 = v680;
          v352 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v680);
          if (!v352)
            goto LABEL_578;
          v353 = *(_QWORD *)(v352 + 40);
          if (v353 == v352 + 40)
            goto LABEL_578;
          if (v353)
            v354 = v353 - 24;
          else
            v354 = 0;
          if (*(_BYTE *)(v354 + 16) != 30)
          {
            v5 = 0;
            switch(*(_BYTE *)(v354 + 16))
            {
              case 0x1D:
              case 0x21:
              case 0x22:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
                goto LABEL_594;
              case 0x1E:
                goto LABEL_1178;
              case 0x1F:
                v358 = (*(_DWORD *)(v354 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_592;
              case 0x20:
                v358 = (*(_DWORD *)(v354 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_592;
              case 0x27:
                v358 = *(_DWORD *)(v354 + 80) + 1;
LABEL_592:
                if (v358 == 1)
                  goto LABEL_593;
                goto LABEL_578;
              default:
                goto LABEL_578;
            }
          }
          if ((*(_DWORD *)(v354 + 20) & 0x7FFFFFF) == 3)
LABEL_578:
            v5 = 0;
          else
LABEL_593:
            v5 = v352;
LABEL_594:
          if (*(_QWORD *)(**(_QWORD **)(v182 + 32) + 40) == **(_QWORD **)(v182 + 32) + 40)
          {
            v327 = 1;
          }
          else
          {
            v359 = *(_QWORD *)(**(_QWORD **)(v182 + 32) + 48);
            v360 = v359 - 24;
            if (v359)
              v361 = v359 - 24;
            else
              v361 = 0;
            v327 = 1;
            if (v359)
            {
              do
              {
                if (*(_BYTE *)(v361 + 16) != 83)
                  break;
                v362 = *(_DWORD *)(v360 + 20);
                v363 = v362 & 0x7FFFFFF;
                if ((v362 & 0x7FFFFFF) != 0)
                {
                  v364 = 0;
                  while (1)
                  {
                    v365 = v360 - 32 * v363;
                    if ((v362 & 0x40000000) != 0)
                      v365 = *(_QWORD *)(v360 - 8);
                    if (*(_QWORD *)(v365 + 32 * *(unsigned int *)(v360 + 60) + 8 * v364) == v5)
                      break;
                    if (v363 == ++v364)
                      goto LABEL_606;
                  }
                }
                else
                {
LABEL_606:
                  LODWORD(v364) = -1;
                }
                v366 = (v362 & 0x40000000) != 0 ? *(_QWORD *)(v360 - 8) : v360 - 32 * v363;
                v327 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v360, *(llvm::Value **)(v366 + 32 * v364), (llvm::Value *)1);
                v693 = (void *)v360;
                sub_1C6317B3C((unsigned int *)a1 + 14, (uint64_t *)&v693);
                v367 = *(_QWORD *)(v360 + 32);
                v360 = v367 - 24;
                v361 = v367 ? v367 - 24 : 0;
              }
              while (v367);
            }
          }
        }
        ++v346;
      }
      while (v346 != v347);
      if (v707 != __src)
        free(v707);
    }
    else
    {
      LOBYTE(v327) = 0;
    }
    v326 = (llvm::Instruction **)v701;
  }
  else
  {
    LOBYTE(v327) = 0;
  }
  v679 = v671 | v678;
  if (v326 != &v703)
    free(v326);
  if ((v327 & 1) != 0)
  {
    v368 = this;
    do
    {
      v369 = v368;
      v368 = *(llvm::Loop **)v368;
    }
    while (v368);
    llvm::ScalarEvolution::forgetLoop((int32x2_t *)a1[1], v369);
    v679 = 1;
  }
  v701 = &v703;
  v702 = 0x1000000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(this, (uint64_t)&v701);
  if (!byte_1ED81DA60)
    goto LABEL_676;
  v370 = (llvm::ScalarEvolution *)a1[1];
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v370, this);
  Exact = (llvm *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)this, (uint64_t)v370, 0);
  if (*((_WORD *)Exact + 12) == 15)
    goto LABEL_676;
  v5 = (uint64_t)Exact;
  if (!llvm::isSafeToExpand(Exact, (const llvm::SCEV *)a1[1], (llvm::ScalarEvolution *)1))
    goto LABEL_676;
  __src = a1;
  v373 = 126 - 2 * __clz(v702);
  if ((_DWORD)v702)
    v374 = v373;
  else
    v374 = 0;
  sub_1C5B2DB94((int8x16_t *)v701, (int8x16_t *)((char *)v701 + 8 * v702), (uint64_t *)&__src, v374, 1);
  v375 = v702;
  if (v702 >= 2)
  {
    v376 = 0;
    while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a1[2], *((_QWORD *)v701 + v376), *((_QWORD *)v701 + v376 + 1)))
    {
      v375 = v702;
      v377 = v376 + 2;
      ++v376;
      if (v377 >= v702)
        goto LABEL_639;
    }
LABEL_676:
    v182 = 0;
    goto LABEL_677;
  }
LABEL_639:
  v673 = (llvm::Instruction **)v5;
  if (v375)
  {
    v5 = 0;
    v378 = v375;
    do
    {
      v379 = *((_QWORD *)v701 + v5);
      v380 = *((_DWORD *)*a1 + 4);
      if (v380)
      {
        v381 = **a1;
        v382 = v380 - 1;
        v383 = ((v379 >> 4) ^ (v379 >> 9)) & (v380 - 1);
        v384 = *(_QWORD *)(v381 + 16 * v383);
        if (v379 == v384)
        {
LABEL_646:
          v387 = *(llvm::Loop **)(v381 + 16 * v383 + 8);
          goto LABEL_648;
        }
        v385 = 1;
        while (v384 != -4096)
        {
          v386 = v383 + v385++;
          v383 = v386 & v382;
          v384 = *(_QWORD *)(v381 + 16 * v383);
          if (v379 == v384)
            goto LABEL_646;
        }
      }
      v387 = 0;
LABEL_648:
      if (v387 != this)
        goto LABEL_692;
      v388 = *(_QWORD *)(v379 + 40);
      if (v388 == v379 + 40)
        goto LABEL_692;
      v389 = v388 ? v388 - 24 : 0;
      v390 = *(unsigned __int8 *)(v389 + 16) - 40;
      v391 = v390 >= 0xFFFFFFF5 ? v389 : 0;
      if (!v388)
        goto LABEL_692;
      v392 = *(_BYTE *)(v391 + 16) == 30 && v390 >= 0xFFFFFFF5;
      if (!v392 || *(unsigned __int8 *)(*(_QWORD *)(v391 - 96) + 16) < 0x15u)
        goto LABEL_692;
      v394 = *(_QWORD *)(v391 - 32);
      v393 = v391 - 32;
      v395 = sub_1C477672C((uint64_t)this + 56, v394);
      v396 = *((_QWORD *)this + 8);
      v397 = v396 == *((_QWORD *)this + 7) ? 76 : 72;
      v398 = v395 == (_QWORD *)(v396 + 8 * *(unsigned int *)((char *)this + v397)) ? 0 : -1;
      if ((v399 = *(_QWORD *)(v393 + 32 * v398), *(_QWORD *)(v399 + 40) != v399 + 40)
        && (v400 = *(_QWORD *)(v399 + 48)) != 0
        && *(_BYTE *)(v400 - 8) == 83
        || (v401 = (llvm *)llvm::ScalarEvolution::getExitCount((llvm::ScalarEvolution *)a1[1], this, v379, 0),
            *((_WORD *)v401 + 12) == 15)
        || !llvm::isSafeToExpand(v401, (const llvm::SCEV *)a1[1], (llvm::ScalarEvolution *)1))
      {
LABEL_692:
        sub_1C4DFC134((uint64_t)&v701, v5);
        break;
      }
      ++v5;
    }
    while (v5 != v378);
  }
  if ((_DWORD)v702)
  {
    v182 = *((_QWORD *)this + 4);
    v405 = *((_QWORD *)this + 5);
    if (v405 != v182)
    {
      while (2)
      {
        v406 = *(_QWORD *)v182 + 40;
        for (k = *(_QWORD *)(*(_QWORD *)v182 + 48); k != v406; k = *(_QWORD *)(k + 8))
        {
          if (k)
            v5 = k - 24;
          else
            v5 = 0;
          v408 = *(unsigned __int8 *)(v5 + 16) - 33;
          if (v408 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v5 + 16) - 33)) & 0x808001D0000010) != 0)
              goto LABEL_732;
            if (((1 << (*(_BYTE *)(v5 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v409 = *(_QWORD *)(v5 + 64);
              if (!v409 || (*(_BYTE *)(v409 + 17) & 0x30) == 0)
              {
                v410 = *(_DWORD *)(v5 + 20);
                if (v410 < 0)
                {
                  v411 = v5 - 32 * (v410 & 0x7FFFFFF);
                  v414 = *(_QWORD *)(v411 - 8);
                  v412 = v411 - 8;
                  v413 = v414;
                  if (v414)
                  {
                    v415 = -v413;
                    do
                    {
                      v416 = *(_DWORD *)(*(_QWORD *)(v412 + v415) + 8);
                      v160 = v416 > 7;
                      v417 = (1 << v416) & 0x83;
                      if (v160 || v417 == 0)
                        goto LABEL_732;
                      v415 += 16;
                    }
                    while (v415);
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v5, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v5, 44))
                {
                  goto LABEL_732;
                }
              }
            }
            else if (v408 == 27 && (*(_WORD *)(v5 + 18) & 0x301) != 0)
            {
              goto LABEL_732;
            }
          }
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v5) & 1) != 0
            || (llvm::Instruction::willReturn((llvm::Instruction *)v5) & 1) == 0)
          {
            goto LABEL_732;
          }
        }
        v182 += 8;
        if (v182 != v405)
          continue;
        break;
      }
    }
    v419 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
    if (v419)
    {
      v420 = *(_QWORD *)(v419 + 40);
      v421 = v673;
      if (v420 == v419 + 40)
        goto LABEL_731;
      if (v420)
        v422 = v420 - 24;
      else
        v422 = 0;
      v423 = *(unsigned __int8 *)(v422 + 16);
      v424 = v423 - 29;
      if (v423 != 30)
      {
        v425 = 0;
        switch(v424)
        {
          case 0:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            goto LABEL_1088;
          case 1:
            goto LABEL_1178;
          case 2:
            v609 = (*(_DWORD *)(v422 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_1086;
          case 3:
            v609 = (*(_DWORD *)(v422 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_1086;
          case 10:
            v609 = *(_DWORD *)(v422 + 80) + 1;
LABEL_1086:
            if (v609 == 1)
              goto LABEL_1087;
            goto LABEL_731;
          default:
            goto LABEL_731;
        }
      }
      if ((*(_DWORD *)(v422 + 20) & 0x7FFFFFF) == 3)
LABEL_731:
        v425 = 0;
      else
LABEL_1087:
        v425 = v419;
    }
    else
    {
      v425 = 0;
      v421 = v673;
    }
LABEL_1088:
    v610 = 0;
    v611 = *(_QWORD *)(v425 + 40);
    if (v611)
      v612 = v611 - 24;
    else
      v612 = 0;
    if (*(unsigned __int8 *)(v612 + 16) - 29 >= 0xB)
      v612 = 0;
    v692[6] = *(_QWORD *)(v612 + 40);
    v692[7] = v612 + 24;
    v5 = (uint64_t)v692;
    v613 = *(void **)(v612 + 48);
    __src = v613;
    if (v613)
    {
      llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v613, 2);
      v610 = __src;
    }
    sub_1C4774EF4((uint64_t)v692, 0, (uint64_t)v610);
    if (__src)
      llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
    v614 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
    if (!v614)
      goto LABEL_1104;
    v615 = *(_QWORD *)(v614 + 40);
    if (v615 == v614 + 40)
      goto LABEL_1104;
    if (v615)
      v616 = v615 - 24;
    else
      v616 = 0;
    v617 = *(unsigned __int8 *)(v616 + 16);
    v618 = v617 - 29;
    if (v617 != 30)
    {
      v619 = 0;
      switch(v618)
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_1109;
        case 1:
          goto LABEL_1178;
        case 2:
          v620 = (*(_DWORD *)(v616 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_1107;
        case 3:
          v620 = (*(_DWORD *)(v616 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_1107;
        case 10:
          v620 = *(_DWORD *)(v616 + 80) + 1;
LABEL_1107:
          if (v620 == 1)
            goto LABEL_1108;
          goto LABEL_1104;
        default:
          goto LABEL_1104;
      }
    }
    if ((*(_DWORD *)(v616 + 20) & 0x7FFFFFF) == 3)
LABEL_1104:
      v619 = 0;
    else
LABEL_1108:
      v619 = v614;
LABEL_1109:
    v621 = *(_QWORD *)(v619 + 40);
    if (v621 == v619 + 40)
    {
      v623 = 0;
    }
    else
    {
      if (v621)
        v622 = v621 - 24;
      else
        v622 = 0;
      if (*(unsigned __int8 *)(v622 + 16) - 29 >= 0xB)
        v623 = 0;
      else
        v623 = v622;
    }
    sub_1C4773D54((uint64_t)&__src, v623, 0, 0, 0);
    v662 = v702 != 0;
    if ((_DWORD)v702)
    {
      v5 = 0;
      v624 = (uint64_t *)v701;
      v671 = (uint64_t)this + 56;
      v625 = 8 * v702;
      do
      {
        v626 = *v624;
        v627 = (llvm::Instruction **)llvm::ScalarEvolution::getExitCount((llvm::ScalarEvolution *)a1[1], this, *v624, 0);
        v628 = *(_QWORD *)(v626 + 40);
        if (v628 == v626 + 40)
        {
          v630 = 0;
        }
        else
        {
          if (v628)
            v629 = v628 - 24;
          else
            v629 = 0;
          if (*(unsigned __int8 *)(v629 + 16) - 29 >= 0xB)
            v630 = 0;
          else
            v630 = v629;
        }
        if (v627 == v421)
        {
          v634 = sub_1C477672C(v671, *(_QWORD *)(v630 - 32));
          v636 = *((_QWORD *)this + 8);
          v637 = 72;
          if (v636 == *((_QWORD *)this + 7))
            v637 = 76;
          v638 = *v711;
          if (v634 == (_QWORD *)(v636 + 8 * *(unsigned int *)((char *)this + v637)))
          {
            v639 = *(_QWORD *)(v638 + 1560);
            if (!v639)
            {
              v650 = *(llvm::ConstantInt **)(v638 + 1888);
              v651 = *(_DWORD *)(v638 + 1896);
              LODWORD(v694) = v651 >> 8;
              if (v651 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v693, 1, 0);
              }
              else
              {
                if (v651 <= 0xFF)
                  v652 = 0;
                else
                  v652 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v651);
                v693 = (void *)(v652 & 1);
              }
              v639 = (uint64_t)llvm::ConstantInt::get(v650, (llvm::LLVMContext *)&v693, v635);
              if (v694 >= 0x41 && v693)
                MEMORY[0x1CAA32F9C](v693, 0x1000C8000313F17);
              *(_QWORD *)(v638 + 1560) = v639;
            }
          }
          else
          {
            v639 = *(_QWORD *)(v638 + 1568);
            if (!v639)
            {
              v640 = *(llvm::ConstantInt **)(v638 + 1888);
              LODWORD(v694) = *(_DWORD *)(v638 + 1896) >> 8;
              if (v694 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v693, 0, 0);
              else
                v693 = 0;
              v639 = (uint64_t)llvm::ConstantInt::get(v640, (llvm::LLVMContext *)&v693, v635);
              if (v694 >= 0x41 && v693)
                MEMORY[0x1CAA32F9C](v693, 0x1000C8000313F17);
              *(_QWORD *)(v638 + 1568) = v639;
            }
          }
        }
        else
        {
          v631 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)&v689, v627, 0);
          if (!v5)
            v5 = (uint64_t)llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)&v689, v421, 0);
          if (*(_QWORD *)v631 == *(_QWORD *)v5)
          {
            v633 = v5;
          }
          else
          {
            WiderType = llvm::ScalarEvolution::getWiderType((llvm::ScalarEvolution *)a1[1], *(llvm::Type **)v631, *(llvm::Type **)v5);
            LOWORD(v697) = 257;
            v631 = sub_1C4773E38((uint64_t *)&__src, 39, v631, (uint64_t)WiderType, (uint64_t)&v693);
            LOWORD(v697) = 257;
            v633 = v5;
            v5 = (uint64_t)sub_1C4773E38((uint64_t *)&__src, 39, (unsigned __int8 *)v5, (uint64_t)WiderType, (uint64_t)&v693);
          }
          v641 = sub_1C477672C(v671, *(_QWORD *)(v630 - 32));
          v642 = *((_QWORD *)this + 8);
          v643 = 72;
          if (v642 == *((_QWORD *)this + 7))
            v643 = 76;
          if (v641 == (_QWORD *)(v642 + 8 * *(unsigned int *)((char *)this + v643)))
            v644 = 32;
          else
            v644 = 33;
          LOWORD(v697) = 257;
          v639 = sub_1C4774B48((uint64_t)&__src, v644, (uint64_t)v631, v5, (uint64_t)&v693);
          v5 = v633;
          v208 = (unsigned int *)(a1 + 7);
        }
        v693 = 0;
        v645 = (uint64_t *)(v630 - 96);
        v693 = *(void **)(v630 - 96);
        v421 = v673;
        if (*(_QWORD *)(v630 - 96))
        {
          **(_QWORD **)(v630 - 80) = *(_QWORD *)(v630 - 88);
          v646 = *(_QWORD *)(v630 - 88);
          if (v646)
            *(_QWORD *)(v646 + 16) = *(_QWORD *)(v630 - 80);
        }
        *v645 = v639;
        if (v639)
        {
          v649 = *(_QWORD *)(v639 + 8);
          v648 = (uint64_t **)(v639 + 8);
          v647 = v649;
          *(_QWORD *)(v630 - 88) = v649;
          if (v649)
            *(_QWORD *)(v647 + 16) = v630 - 88;
          *(_QWORD *)(v630 - 80) = v648;
          *v648 = v645;
        }
        if (!*((_QWORD *)v693 + 1))
          sub_1C5B2DB10(v208, (uint64_t *)&v693);
        ++v624;
        v625 -= 8;
      }
      while (v625);
    }
    if (__src != &v708)
      free(__src);
    v182 = v662;
  }
  else
  {
LABEL_732:
    v182 = 0;
  }
LABEL_677:
  if (v701 != &v703)
    free(v701);
  if ((_DWORD)v182)
  {
    llvm::ScalarEvolution::forgetLoop((int32x2_t *)a1[1], this);
    v679 = 1;
  }
  if (!byte_1ED81D9A0)
  {
    v402 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
    if (!v402)
      goto LABEL_689;
    v403 = *(_QWORD *)(v402 + 40);
    if (v403 == v402 + 40)
      goto LABEL_689;
    if (v403)
      v404 = v403 - 24;
    else
      v404 = 0;
    if (*(_BYTE *)(v404 + 16) != 30)
    {
      LODWORD(v5) = 0;
      switch(*(_BYTE *)(v404 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_737;
        case 0x1E:
          goto LABEL_1178;
        case 0x1F:
          v426 = (*(_DWORD *)(v404 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_735;
        case 0x20:
          v426 = (*(_DWORD *)(v404 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_735;
        case 0x27:
          v426 = *(_DWORD *)(v404 + 80) + 1;
LABEL_735:
          if (v426 == 1)
            goto LABEL_736;
          goto LABEL_689;
        default:
          goto LABEL_689;
      }
    }
    if ((*(_DWORD *)(v404 + 20) & 0x7FFFFFF) == 3)
LABEL_689:
      LODWORD(v5) = 0;
    else
LABEL_736:
      LODWORD(v5) = v402;
LABEL_737:
    v427 = &v703;
    v701 = &v703;
    v702 = 0x1000000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(this, (uint64_t)&v701);
    v428 = (uint64_t *)v701;
    if ((_DWORD)v702)
    {
      v429 = (uint64_t *)((char *)v701 + 8 * v702);
      while (1)
      {
        v430 = *v428;
        v431 = *(_QWORD *)(*v428 + 40);
        v432 = v431 ? v431 - 24 : 0;
        v5 = *(unsigned __int8 *)(v432 + 16) - 29 >= 0xB ? 0 : v432;
        if (*(_BYTE *)(v5 + 16) == 30)
          break;
LABEL_845:
        if (++v428 == v429)
        {
          v428 = (uint64_t *)v701;
          goto LABEL_847;
        }
      }
      v433 = *((_DWORD *)*a1 + 4);
      if (v433)
      {
        v434 = **a1;
        v435 = v433 - 1;
        v436 = (v433 - 1) & ((v430 >> 4) ^ (v430 >> 9));
        v437 = *(_QWORD *)(v434 + 16 * v436);
        if (v430 == v437)
        {
LABEL_751:
          v440 = *(llvm::Loop **)(v434 + 16 * v436 + 8);
          goto LABEL_753;
        }
        v438 = 1;
        while (v437 != -4096)
        {
          v439 = v436 + v438++;
          v436 = v439 & v435;
          v437 = *(_QWORD *)(v434 + 16 * v436);
          if (v430 == v437)
            goto LABEL_751;
        }
      }
      v440 = 0;
LABEL_753:
      if (v440 == this && !llvm::Loop::isLoopInvariant((uint64_t)this, *(_QWORD *)(v5 - 96)))
      {
        v441 = *(_QWORD *)(v5 - 96);
        if (!v441)
          goto LABEL_773;
        if (*(_BYTE *)(v441 + 16) != 81)
          goto LABEL_773;
        if ((*(_WORD *)(v441 + 18) & 0x3E) != 0x20)
          goto LABEL_773;
        v5 = *(_QWORD *)(v441 - 64);
        v442 = *(_QWORD *)(v441 - 32);
        if (!llvm::Loop::isLoopInvariant((uint64_t)this, v442))
        {
          v443 = llvm::Loop::isLoopInvariant((uint64_t)this, v5);
          v5 = v442;
          if (!v443)
            goto LABEL_773;
        }
        if (!v5 || *(_BYTE *)(v5 + 16) != 83)
        {
          v5 = sub_1C5B32304(v5, (uint64_t)this);
          if (!v5)
            goto LABEL_773;
        }
        v444 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
        v445 = *(_DWORD *)(v5 + 20);
        v446 = v445 & 0x7FFFFFF;
        if ((v445 & 0x7FFFFFF) == 0)
          goto LABEL_773;
        v447 = 0;
        v448 = v5 - 32 * v446;
        v449 = 32 * *(unsigned int *)(v5 + 60);
        v450 = 32 * v446;
        while (1)
        {
          if ((v445 & 0x40000000) == 0)
          {
            if (*(_QWORD *)(v448 + v449) == v444)
              goto LABEL_772;
            goto LABEL_769;
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + v449) == v444)
            break;
LABEL_769:
          v447 += 32;
          v449 += 8;
          if (v450 == v447)
            goto LABEL_773;
        }
        v448 = *(_QWORD *)(v5 - 8);
LABEL_772:
        if (v5 != sub_1C5B32304(*(_QWORD *)(v448 + v447), (uint64_t)this))
        {
LABEL_773:
          v451 = (unsigned __int16 *)llvm::ScalarEvolution::getExitCount((llvm::ScalarEvolution *)a1[1], this, v430, 0);
          LODWORD(v5) = v451[12];
          v452 = v451;
          if (!llvm::SCEV::isZero((llvm::SCEV *)v451))
          {
            v453 = (uint64_t)v452;
            v454 = (unsigned int *)a1[1];
            v671 = v453;
            while (2)
            {
              switch((int)v5)
              {
                case 0:
                  v456 = *(uint64_t **)(v453 + 32);
                  goto LABEL_782;
                case 1:
                case 2:
                case 3:
                case 13:
                  v456 = (uint64_t *)(v453 + 40);
                  goto LABEL_782;
                case 4:
                  v456 = (uint64_t *)(v453 + 48);
                  goto LABEL_782;
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                  v455 = *(uint64_t **)(v453 + 32);
                  goto LABEL_777;
                case 6:
                  v455 = (uint64_t *)(v453 + 40);
LABEL_777:
                  v453 = *v455;
                  LODWORD(v5) = *(unsigned __int16 *)(v453 + 24);
                  continue;
                case 14:
                  v456 = *(uint64_t **)(v453 - 8);
LABEL_782:
                  v457 = *v456;
                  v458 = *(_QWORD *)(*(_QWORD *)v454 + 40) + 272;
                  v674 = v429;
                  if (*(_BYTE *)(*v456 + 8) == 15)
                  {
                    llvm::DataLayout::getIndexTypeSizeInBits(v458, v457);
                  }
                  else
                  {
                    sub_1C4768AD0(v458, v457);
                    if ((_DWORD)v459 == 1)
                  }
                  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
                  v460 = *(_QWORD *)(**((_QWORD **)this + 4) + 48);
                  v5 = v460 - 24;
                  if (v460)
                    v461 = v460 - 24;
                  else
                    v461 = 0;
                  if (*(_BYTE *)(v461 + 16) == 83)
                  {
                    while (1)
                    {
                      if ((*(_DWORD *)(*(_QWORD *)(v460 - 24) + 8) & 0xFD) != 0xD)
                        goto LABEL_837;
                      v462 = *((_QWORD *)v454 + 13);
                      v463 = v454[30];
                      if (v463)
                      {
                        v464 = (v463 - 1) & ((v5 >> 4) ^ (v5 >> 9));
                        v465 = v462 + 48 * v464;
                        v466 = *(_QWORD *)(v465 + 24);
                        if (v466 == v5)
                          goto LABEL_797;
                        v467 = 1;
                        while (v466 != -4096)
                        {
                          v468 = v464 + v467++;
                          v464 = v468 & (v463 - 1);
                          v465 = v462 + 48 * v464;
                          v466 = *(_QWORD *)(v465 + 24);
                          if (v466 == v5)
                            goto LABEL_797;
                        }
                      }
                      v465 = v462 + 48 * v463;
LABEL_797:
                      if (v465 == v462 + 48 * v463 || (v469 = *(_QWORD *)(v465 + 40)) == 0)
                        v469 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v454, v5);
                      if (v469)
                        v470 = *(unsigned __int16 *)(v469 + 24) == 7;
                      else
                        v470 = 0;
                      if (!v470 || *(llvm::Loop **)(v469 + 48) != this || *(_QWORD *)(v469 + 40) != 2)
                        goto LABEL_837;
                      v471 = *(llvm::SCEV **)(*(_QWORD *)(v469 + 32) + 8);
                      v472 = v471 && *((_WORD *)v471 + 12) == 0;
                      if (!v472 || !llvm::SCEV::isOne(v471))
                        goto LABEL_837;
                      v473 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
                      v474 = *(_DWORD *)(v5 + 20);
                      v475 = v474 & 0x7FFFFFF;
                      if ((v474 & 0x7FFFFFF) != 0)
                      {
                        v476 = 0;
                        while (1)
                        {
                          v477 = v5 - 32 * v475;
                          if ((v474 & 0x40000000) != 0)
                            v477 = *(_QWORD *)(v5 - 8);
                          if (*(_QWORD *)(v477 + 32 * *(unsigned int *)(v5 + 60) + 8 * v476) == v473)
                            break;
                          if (v475 == ++v476)
                            goto LABEL_819;
                        }
                      }
                      else
                      {
LABEL_819:
                        LODWORD(v476) = -1;
                      }
                      v653 = v427;
                      if ((v474 & 0x40000000) != 0)
                        v478 = *(_QWORD *)(v5 - 8);
                      else
                        v478 = v5 - 32 * v475;
                      v479 = *(_QWORD *)(v478 + 32 * v476);
                      if (sub_1C5B32304(v479, (uint64_t)this) == v5)
                      {
                        v480 = *((_QWORD *)v454 + 13);
                        v481 = v454[30];
                        v482 = v479;
                        v427 = v653;
                        if (!v481)
                          goto LABEL_831;
                        v483 = (v481 - 1) & ((v482 >> 4) ^ (v482 >> 9));
                        v484 = v480 + 48 * v483;
                        v485 = *(_QWORD *)(v484 + 24);
                        if (v485 != v482)
                        {
                          v486 = 1;
                          while (v485 != -4096)
                          {
                            v487 = v483 + v486++;
                            v483 = v487 & (v481 - 1);
                            v484 = v480 + 48 * v483;
                            v485 = *(_QWORD *)(v484 + 24);
                            if (v485 == v482)
                              goto LABEL_832;
                          }
LABEL_831:
                          v484 = v480 + 48 * v481;
                        }
LABEL_832:
                        if (v484 == v480 + 48 * v481 || (v488 = *(_QWORD *)(v484 + 40)) == 0)
                          v488 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v454, v482);
                        if (*(_WORD *)(v488 + 24) == 7)
                          __asm { BR              X10 }
                        goto LABEL_837;
                      }
                      v427 = v653;
LABEL_837:
                      v460 = *(_QWORD *)(v460 + 8);
                      v5 = v460 - 24;
                      if (v460)
                        v489 = v460 - 24;
                      else
                        v489 = 0;
                      if (*(_BYTE *)(v489 + 16) != 83)
                      {
                        v429 = v674;
                        goto LABEL_845;
                      }
                    }
                  }
                  v429 = v674;
                  break;
                default:
                  goto LABEL_845;
              }
              break;
            }
          }
        }
      }
      goto LABEL_845;
    }
LABEL_847:
    if (v428 != (uint64_t *)v427)
      free(v428);
  }
  sub_1C5B2BF30((uint64_t)&v689);
  v490 = *((_DWORD *)a1 + 16);
  if (v490)
  {
    v5 = (uint64_t)&v702;
    do
    {
      v491 = *(_QWORD *)v208;
      v492 = *(_QWORD *)v208 + 24 * v490;
      v701 = (void *)6;
      v702 = 0;
      v493 = *(llvm::Instruction **)(v492 - 8);
      v703 = v493;
      if (v493 && v493 != (llvm::Instruction *)-8192 && v493 != (llvm::Instruction *)-4096)
      {
        v494 = *(_QWORD *)(v492 - 24) & 0xFFFFFFFFFFFFFFF8;
        v702 = *(_QWORD *)v494;
        *(_QWORD *)v494 = &v701;
        v701 = (void *)(v494 | 6);
        if (v702)
          *(_QWORD *)v702 = *(_QWORD *)v702 & 7 | (unint64_t)&v702;
        v491 = *(_QWORD *)v208;
      }
      v495 = v490 - 1;
      *((_DWORD *)a1 + 16) = v495;
      v496 = (_QWORD *)(v491 + 24 * v495);
      v497 = v496[2];
      if (v497 && v497 != -8192 && v497 != -4096)
      {
        v498 = *v496 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v498 = v496[1];
        v499 = (unint64_t *)v496[1];
        if (v499)
        {
          *v499 = *v499 & 7 | v498;
        }
        else
        {
          v500 = v496[2];
          v501 = ***(int32x2_t ****)v500;
          v502 = (unint64_t)v501[303];
          if (v502 <= v498)
          {
            v503 = v501[305].u32[0];
            if (v502 + 16 * v503 > v498)
            {
              v504 = v503 - 1;
              LODWORD(v505) = v504 & ((v500 >> 4) ^ (v500 >> 9));
              v506 = (uint64_t *)(v502 + 16 * v505);
              v507 = *v506;
              if (v500 == *v506)
              {
LABEL_868:
                *v506 = -8192;
                v501[304] = vadd_s32(v501[304], (int32x2_t)0x1FFFFFFFFLL);
                v500 = v496[2];
              }
              else
              {
                v508 = 1;
                while (v507 != -4096)
                {
                  v509 = v505 + v508++;
                  v505 = v509 & v504;
                  v507 = *(_QWORD *)(v502 + 16 * v505);
                  if (v500 == v507)
                  {
                    v506 = (uint64_t *)(v502 + 16 * v505);
                    goto LABEL_868;
                  }
                }
              }
              *(_BYTE *)(v500 + 17) &= ~1u;
            }
          }
        }
      }
      v510 = (unsigned __int8 *)v703;
      if (v703 != (llvm::Instruction *)-8192 && v703 != (llvm::Instruction *)-4096 && v703 != 0)
      {
        v516 = (unint64_t)v701 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v701 & 0xFFFFFFFFFFFFFFF8) = v702;
        if (v702)
        {
          *(_QWORD *)v702 = *(_QWORD *)v702 & 7 | v516;
        }
        else
        {
          v517 = v703;
          v518 = ***(int32x2_t ****)v703;
          v519 = (unint64_t)v518[303];
          if (v519 <= v516)
          {
            v520 = v518[305].u32[0];
            if (v519 + 16 * v520 > v516)
            {
              v521 = v520 - 1;
              LODWORD(v522) = v521 & ((v703 >> 4) ^ (v703 >> 9));
              v523 = (llvm::Instruction **)(v519 + 16 * v522);
              v524 = *v523;
              if (v703 == *v523)
              {
LABEL_892:
                *v523 = (llvm::Instruction *)-8192;
                v518[304] = vadd_s32(v518[304], (int32x2_t)0x1FFFFFFFFLL);
                v517 = v703;
              }
              else
              {
                v525 = 1;
                while (v524 != (llvm::Instruction *)-4096)
                {
                  v526 = v522 + v525++;
                  v522 = v526 & v521;
                  v524 = *(llvm::Instruction **)(v519 + 16 * v522);
                  if (v703 == v524)
                  {
                    v523 = (llvm::Instruction **)(v519 + 16 * v522);
                    goto LABEL_892;
                  }
                }
              }
              *((_BYTE *)v517 + 17) &= ~1u;
            }
          }
        }
      }
      if (!v510)
        goto LABEL_897;
      v512 = v510[16];
      if (v512 == 83)
      {
        v679 |= llvm::RecursivelyDeleteDeadPHINode((llvm::Instruction *)v510, a1[4], (int32x2_t **)a1[6]);
      }
      else if (v512 >= 0x1C)
      {
        v513 = a1[4];
        v514 = (int32x2_t **)a1[6];
        v688 = 0;
        v679 |= llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v510, v513, v514, v687);
        if (v688 == v687)
        {
          v515 = *(void (**)(void))(v687[0] + 32);
          goto LABEL_896;
        }
        if (v688)
        {
          v515 = *(void (**)(void))(*v688 + 40);
LABEL_896:
          v515();
        }
      }
LABEL_897:
      v490 = *((_DWORD *)a1 + 16);
    }
    while (v490);
  }
  ExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(this);
  if (!ExitBlock)
    goto LABEL_1009;
  v528 = ExitBlock;
  v529 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
  if (!v529)
    goto LABEL_1009;
  v182 = v529;
  v530 = *(_QWORD *)(v529 + 40);
  if (v530 == v529 + 40)
    goto LABEL_1009;
  v531 = v530 - 24;
  if (!v530)
    v531 = 0;
  if (*(_BYTE *)(v531 + 16) != 30)
  {
    v540 = 0;
    switch(*(_BYTE *)(v531 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_1010;
      case 0x1E:
        goto LABEL_1178;
      case 0x1F:
        v570 = (*(_DWORD *)(v531 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_1008;
      case 0x20:
        v570 = (*(_DWORD *)(v531 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_1008;
      case 0x27:
        v570 = *(_DWORD *)(v531 + 80) + 1;
LABEL_1008:
        if (v570 != 1)
          goto LABEL_1009;
        goto LABEL_905;
      default:
        goto LABEL_1009;
    }
  }
  if ((*(_DWORD *)(v531 + 20) & 0x7FFFFFF) == 3)
  {
LABEL_1009:
    v540 = 0;
    goto LABEL_1010;
  }
LABEL_905:
  v532 = (uint64_t *)(v528 + 40);
  for (m = *(_QWORD *)(v528 + 48); (uint64_t *)m != v532; m = *(_QWORD *)(m + 8))
  {
    v534 = m - 24;
    if (!m)
      v534 = 0;
    if (*(_BYTE *)(v534 + 16) != 83)
    {
      v535 = *(unsigned __int8 *)(m - 8) - 38;
      v160 = v535 > 0x38;
      v536 = (1 << v535) & 0x100060000000001;
      if (v160 || v536 == 0)
        v532 = (uint64_t *)m;
      else
        v532 = *(uint64_t **)(m + 8);
      break;
    }
  }
  v538 = (_QWORD *)(v531 + 24);
  if (v530)
    v539 = v538;
  else
    v539 = 0;
  if (v539 == *(_QWORD **)(v529 + 48))
    goto LABEL_1009;
  v540 = 0;
  v541 = (char *)this + 56;
  while (1)
  {
    v539 = (_QWORD *)*v539;
    v542 = v539 ? (uint64_t)(v539 - 3) : 0;
    v543 = *(unsigned __int8 *)(v542 + 16);
    if (v543 > 0x3E)
      break;
    if (*(unsigned __int8 *)(v542 + 16) <= 0x3Cu)
    {
      if (*(unsigned __int8 *)(v542 + 16) > 0x3Bu)
      {
        if ((*(_WORD *)(v542 + 18) & 0x301) != 0)
          goto LABEL_954;
        goto LABEL_943;
      }
      if (v543 != 33)
      {
        if (v543 == 37)
          goto LABEL_954;
        if (v543 != 39)
          goto LABEL_943;
      }
LABEL_926:
      v544 = *(_QWORD *)(v542 + 64);
      if (v544 && (*(_BYTE *)(v544 + 17) & 0x30) != 0)
        goto LABEL_943;
      v545 = *(_DWORD *)(v542 + 20);
      if (v545 < 0)
      {
        v561 = v542 - 32 * (v545 & 0x7FFFFFF);
        v564 = *(_QWORD *)(v561 - 8);
        v562 = v561 - 8;
        v563 = v564;
        if (v564)
        {
          v565 = -v563;
          do
          {
            v566 = *(_DWORD *)(*(_QWORD *)(v562 + v565) + 8);
            v160 = v566 > 7;
            v567 = (1 << v566) & 0x83;
            if (v160 || v567 == 0)
              goto LABEL_954;
            v565 += 16;
          }
          while (v565);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v542, 45) & 1) != 0
        || llvm::CallBase::hasFnAttrOnCalledFunction(v542, 44))
      {
        goto LABEL_943;
      }
LABEL_954:
      if (v539 == *(_QWORD **)(v182 + 48))
        goto LABEL_1010;
    }
    else
    {
      if (v543 == 61)
        goto LABEL_954;
LABEL_943:
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v542) & 1) != 0
        || !llvm::Instruction::willReturn((llvm::Instruction *)v542))
      {
        goto LABEL_954;
      }
      v546 = *(unsigned __int8 *)(v542 + 16) - 33;
      if (v546 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v542 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v550 = *(_QWORD *)(v542 + 64);
          if (!v550 || (*(_BYTE *)(v550 + 20) & 4) == 0 && (*(_BYTE *)(v550 + 17) & 0x10) == 0)
          {
            LODWORD(v701) = 7;
            if (sub_1C53E4BBC(v542, (__int32 *)&v701, 1uLL))
            {
              v569 = *(_QWORD *)(v542 - 32);
              if (!v569
                || *(_BYTE *)(v569 + 16)
                || *(_QWORD *)(v569 + 24) != *(_QWORD *)(v542 + 72)
                || *(_DWORD *)(v569 + 36) != 7)
              {
                goto LABEL_954;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v542, 66) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v542, 44) & 1) == 0)
            {
              goto LABEL_954;
            }
          }
        }
        else if (((1 << (*(_BYTE *)(v542 + 16) - 33)) & 0x808001C8000010) != 0
               || v546 == 28 && (*(_WORD *)(v542 + 18) & 0x301) != 0)
        {
          goto LABEL_954;
        }
      }
      if (sub_1C4D99D08(v542))
        goto LABEL_954;
      v547 = *(unsigned __int8 *)(v542 + 16) - 38;
      v160 = v547 > 0x38;
      v548 = (1 << v547) & 0x100060000200001;
      if (!v160 && v548 != 0)
        goto LABEL_954;
      v675 = (uint64_t)v541;
      v551 = *(_QWORD *)(v542 + 8);
      if (v551)
      {
        while (1)
        {
          v552 = *(_QWORD *)(v551 + 24);
          v553 = (uint64_t *)(v552 + 40);
          if (v552 && *(_BYTE *)(v552 + 16) == 83)
          {
            v554 = *(_DWORD *)(v552 + 20);
            if ((v554 & 0x40000000) != 0)
              v555 = *(_QWORD *)(v552 - 8);
            else
              v555 = v552 - 32 * (v554 & 0x7FFFFFF);
            v553 = (uint64_t *)(v555
                             + 32 * *(unsigned int *)(v552 + 60)
                             + 8 * ((unint64_t)(v551 - v555) >> 5));
          }
          if (*v553 == v182)
            break;
          v556 = sub_1C477672C(v675, *v553);
          v557 = *((_QWORD *)this + 8);
          v558 = 72;
          if (v557 == *((_QWORD *)this + 7))
            v558 = 76;
          if (v556 != (_QWORD *)(v557 + 8 * *(unsigned int *)((char *)this + v558)))
            break;
          v551 = *(_QWORD *)(v551 + 8);
          if (!v551)
            goto LABEL_978;
        }
      }
      else
      {
LABEL_978:
        if (v539 == *(_QWORD **)(v182 + 48))
        {
          llvm::Instruction::moveBefore((_QWORD *)v542, v528, v532);
LABEL_1177:
          v540 = 1;
          goto LABEL_1010;
        }
        do
        {
          v539 = (_QWORD *)*v539;
          if (v539)
            v559 = (uint64_t)(v539 - 3);
          else
            v559 = 0;
        }
        while ((sub_1C4D99D08(v559) || sub_1C509DDB0(v559)) && v539 != *(_QWORD **)(v182 + 48));
        if (sub_1C4D99D08(v559) || sub_1C509DDB0(v559))
        {
          v560 = *(_QWORD **)(v182 + 48);
          llvm::Instruction::moveBefore((_QWORD *)v542, v528, v532);
          if (v539 == v560)
            goto LABEL_1177;
        }
        else
        {
          llvm::Instruction::moveBefore((_QWORD *)v542, v528, v532);
        }
        v532 = (uint64_t *)(v542 + 24);
        v540 = 1;
      }
      v541 = (char *)v675;
      if (v539 == *(_QWORD **)(v182 + 48))
        goto LABEL_1010;
    }
  }
  switch(*(_BYTE *)(v542 + 16))
  {
    case 'P':
    case 'X':
      goto LABEL_954;
    case 'Q':
    case 'R':
    case 'U':
    case 'V':
    case 'W':
      goto LABEL_943;
    case 'S':
      break;
    case 'T':
      goto LABEL_926;
    default:
      if (v543 - 63 < 3)
        goto LABEL_954;
      goto LABEL_943;
  }
LABEL_1010:
  v701 = &v703;
  v702 = 0x800000000;
  sub_1C4EAEA40(this, (uint64_t)&v701);
  v571 = (llvm::Instruction **)v701;
  if ((_DWORD)v702)
  {
    v671 = (uint64_t)&v703;
    v676 = v540;
    v572 = 0;
    v573 = (llvm::Instruction **)((char *)v701 + 8 * v702);
    do
    {
      if (*((llvm::Instruction **)*v571 + 5) != (llvm::Instruction *)((char *)*v571 + 40))
      {
        for (n = *((_QWORD *)*v571 + 6); ; n = *(_QWORD *)(v182 + 32))
        {
          v182 = n - 24;
          v575 = n ? n - 24 : 0;
          if (!n || *(_BYTE *)(v575 + 16) != 83)
            break;
          v576 = *(_DWORD *)(n - 4);
          v577 = v576 & 0x7FFFFFF;
          if ((v576 & 0x7FFFFFF) != 0)
          {
            v5 = 0;
            do
            {
              v578 = *(_DWORD *)(v182 + 20);
              if ((v578 & 0x40000000) != 0)
                v579 = *(_QWORD *)(v182 - 8);
              else
                v579 = v182 - 32 * (v578 & 0x7FFFFFF);
              v580 = *(_QWORD *)(v579 + 32 * *(unsigned int *)(v182 + 60) + 8 * v5);
              if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this))
              {
                v581 = (uint64_t)a1[2];
                v582 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
                if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v581, v580, v582))
                {
                  v583 = *(_QWORD *)(v580 + 40);
                  if (v583 != v580 + 40)
                  {
                    v584 = v583 == 0;
                    if (v583)
                      v585 = v583 - 24;
                    else
                      v585 = 0;
                    v586 = *(unsigned __int8 *)(v585 + 16) - 40;
                    v587 = __CFADD__(v586, 11);
                    if (v586 < 0xFFFFFFF5)
                      v585 = 0;
                    v588 = *(unsigned __int8 *)(v585 + 16);
                    if (!v587)
                      v584 = 1;
                    if (v588 != 30 || v584)
                    {
                      v592 = v588 != 31 || v584;
                      if ((v592 & 1) != 0)
                        goto LABEL_1069;
                      v593 = *(_DWORD *)(v585 + 20);
                      v589 = (v593 & 0x40000000) != 0
                           ? *(uint64_t **)(v585 - 8)
                           : (uint64_t *)(v585 - 32 * (v593 & 0x7FFFFFF));
                    }
                    else
                    {
                      v589 = (uint64_t *)(v585 - 96);
                    }
                    if (llvm::Loop::isLoopInvariant((uint64_t)this, *v589))
                    {
                      v590 = *(_DWORD *)(v182 + 20);
                      v591 = (v590 & 0x40000000) != 0 ? *(_QWORD *)(v182 - 8) : v182 - 32 * (v590 & 0x7FFFFFF);
                      v594 = *(_QWORD *)(v591 + 32 * v5);
                      if (v594)
                      {
                        if (*(_BYTE *)(v594 + 16) == 83 && *(_QWORD *)(v594 + 40) == **((_QWORD **)this + 4))
                        {
                          v595 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
                          if (!v595)
                            goto LABEL_1056;
                          v596 = *(_QWORD *)(v595 + 40);
                          if (v596 == v595 + 40)
                            goto LABEL_1056;
                          v597 = v596 - 24;
                          if (!v596)
                            v597 = 0;
                          v598 = *(unsigned __int8 *)(v597 + 16);
                          v599 = v598 - 29;
                          if (v598 != 30)
                          {
                            v600 = 0;
                            switch(v599)
                            {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 9:
                                goto LABEL_1062;
                              case 1:
                                goto LABEL_1178;
                              case 2:
                                v601 = (*(_DWORD *)(v597 + 20) >> 1) & 0x3FFFFFF;
                                goto LABEL_1060;
                              case 3:
                                v601 = (*(_DWORD *)(v597 + 20) & 0x7FFFFFF) - 1;
                                goto LABEL_1060;
                              case 10:
                                v601 = *(_DWORD *)(v597 + 80) + 1;
LABEL_1060:
                                if (v601 == 1)
                                  goto LABEL_1061;
                                goto LABEL_1056;
                              default:
                                goto LABEL_1056;
                            }
                          }
                          if ((*(_DWORD *)(v597 + 20) & 0x7FFFFFF) == 3)
LABEL_1056:
                            v600 = 0;
                          else
LABEL_1061:
                            v600 = v595;
LABEL_1062:
                          v602 = *(_DWORD *)(v594 + 20);
                          v603 = v602 & 0x7FFFFFF;
                          if ((v602 & 0x7FFFFFF) != 0)
                          {
                            v604 = 0;
                            v605 = v594 - 32 * v603;
                            v606 = 32 * *(unsigned int *)(v594 + 60);
                            v607 = 32 * v603;
                            do
                            {
                              if ((v602 & 0x40000000) != 0)
                              {
                                if (*(_QWORD *)(*(_QWORD *)(v594 - 8) + v606) == v600)
                                {
                                  v605 = *(_QWORD *)(v594 - 8);
LABEL_1072:
                                  sub_1C6125834(v182, v5, *(_QWORD *)(v605 + v604));
                                  llvm::ScalarEvolution::forgetValue((int32x2_t *)a1[1], (llvm::Value *)v182);
                                  v572 = 1;
                                  break;
                                }
                              }
                              else if (*(_QWORD *)(v605 + v606) == v600)
                              {
                                goto LABEL_1072;
                              }
                              v604 += 32;
                              v606 += 8;
                            }
                            while (v607 != v604);
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_1069:
              ++v5;
            }
            while (v5 != v577);
          }
        }
      }
      ++v571;
    }
    while (v571 != v573);
    v571 = (llvm::Instruction **)v701;
    v540 = v676;
  }
  else
  {
    v572 = 0;
  }
  if (v571 != &v703)
    free(v571);
  v181 = v679 | v572 | v540 | llvm::DeleteDeadPHIs(**((_QWORD **)this + 4), a1[4], (int32x2_t **)a1[6]);
  sub_1C50D05E0((uint64_t)&v689);
  return v181 & 1;
}

uint64_t sub_1C5B2BBDC(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLoopPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Induction Variable Simplification";
  *(_QWORD *)(v3 + 8) = 33;
  *(_QWORD *)(v3 + 16) = "indvars";
  *(_QWORD *)(v3 + 24) = 7;
  *(_QWORD *)(v3 + 32) = &unk_1ED81D790;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5B32BB8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5B2BC70(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81D790;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8194E40;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81D798);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B2BBDC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81D798, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *sub_1C5B2BD38(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8194D18;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E8194D80;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C5B2BDB8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5B2BDCC(llvm::ScalarEvolution **a1, uint64_t a2, llvm::Loop *a3, unsigned int a4, uint64_t a5, llvm::Instruction *a6)
{
  int v7;
  _BOOL8 v11;
  __int128 v12;
  unsigned int v14[7];
  unsigned int v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[64];
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  v23 = a2;
  if (!a5)
    return 1;
  v7 = a5;
  v24 = v26;
  v25 = 0x800000000;
  v18 = v22;
  v19 = v22;
  v20 = 8;
  v21 = 0;
  v16 = 0;
  v17 = 0;
  v14[0] = -1;
  v15 = -1;
  sub_1C5B328EC((uint64_t)&v24, v14, &v15, &v23);
  do
  {
    v11 = (_DWORD)v25 != 0;
    if (!(_DWORD)v25)
      break;
    v12 = *((_OWORD *)v24 + v25 - 1);
    LODWORD(v25) = v25 - 1;
    *(_OWORD *)v14 = v12;
  }
  while (!llvm::SCEVExpander::isHighCostExpansionHelper(a1, (uint64_t)v14, a3, a6, (uint64_t)&v16, a4, v7, (llvm::SmallPtrSetImplBase *)&v18, (uint64_t)&v24));
  if (v19 != v18)
    free(v19);
  if (v24 != v26)
    free(v24);
  return v11;
}

_DWORD *sub_1C5B2BF30(uint64_t a1)
{
  void *v2;
  _DWORD *result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  sub_1C5B329AC((_DWORD *)(a1 + 32));
  sub_1C4DFC0E4((_DWORD *)(a1 + 56));
  sub_1C4DFC0E4((_DWORD *)(a1 + 80));
  v2 = *(void **)(a1 + 112);
  if (v2 == *(void **)(a1 + 104))
    goto LABEL_2;
  v21 = *(unsigned int *)(a1 + 120);
  if (v21 < 0x21 || 4 * (*(_DWORD *)(a1 + 124) - *(_DWORD *)(a1 + 128)) >= v21)
  {
    memset(v2, 255, 8 * v21);
LABEL_2:
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 104));
LABEL_3:
  result = sub_1C4A067C4((_DWORD *)(a1 + 416));
  v4 = *(_DWORD *)(a1 + 272);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 264);
    v6 = v5 + 24 * v4;
    do
    {
      v7 = *(_QWORD *)(v6 - 8);
      if (v7 != -8192 && v7 != -4096 && v7 != 0)
      {
        v9 = *(_QWORD *)(v6 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v9 = *(_QWORD *)(v6 - 16);
        v10 = *(unint64_t **)(v6 - 16);
        if (v10)
        {
          *v10 = *v10 & 7 | v9;
        }
        else
        {
          v11 = *(_QWORD *)(v6 - 8);
          v12 = ***(int32x2_t ****)v11;
          v13 = (unint64_t)v12[303];
          if (v13 <= v9)
          {
            v14 = v12[305].u32[0];
            if (v13 + 16 * v14 > v9)
            {
              v15 = v14 - 1;
              LODWORD(v16) = v15 & ((v11 >> 4) ^ (v11 >> 9));
              v17 = (uint64_t *)(v13 + 16 * v16);
              v18 = *v17;
              if (v11 == *v17)
              {
LABEL_29:
                *v17 = -8192;
                v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
                v11 = *(_QWORD *)(v6 - 8);
              }
              else
              {
                v19 = 1;
                while (v18 != -4096)
                {
                  v20 = v16 + v19++;
                  v16 = v20 & v15;
                  v18 = *(_QWORD *)(v13 + 16 * v16);
                  if (v11 == v18)
                  {
                    v17 = (uint64_t *)(v13 + 16 * v16);
                    goto LABEL_29;
                  }
                }
              }
              *(_BYTE *)(v11 + 17) &= ~1u;
            }
          }
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
  }
  *(_DWORD *)(a1 + 272) = 0;
  return result;
}

uint64_t sub_1C5B2C0CC(uint64_t a1, _QWORD *a2)
{
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v6 = 0;
  v5 = 0;
  if (sub_1C47A8BBC(a1, (llvm::APInt *)&v5, 1, 64, 1, 0, &v6))
    v3 = 1;
  else
    v3 = v6 == 0;
  result = !v3;
  if (!v3)
    *a2 = v5;
  return result;
}

_DWORD *sub_1C5B2C130(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(40 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 40 * v5;
      v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)result = v7;
        result += 10;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1C5B2C1D0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5B2C1E4(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  uint64_t v6;
  _QWORD *v7;
  llvm::Type *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t IndexTypeSizeInBits;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;
  unint64_t v34;
  llvm::Type *v35;

  v2 = a2[16];
  v3 = v2 == 68;
  if ((v2 - 67) <= 1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(llvm::Type **)a2;
    v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
    v10 = *(_QWORD *)(*(_QWORD *)v6 + 40) + 272;
    v11 = *(_QWORD *)a2;
    if (v9 == 15)
    {
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v10, v11);
    }
    else
    {
      sub_1C4768AD0(v10, v11);
      IndexTypeSizeInBits = v13;
      if ((_DWORD)v12 == 1)
    }
    v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
    v16 = *(_QWORD *)(v15 + 304);
    v17 = *(char **)(v15 + 312);
    v18 = &v17[v16];
    if (IndexTypeSizeInBits <= 0xFF)
    {
      v19 = (char *)memchr(*(void **)(v15 + 304), (char)IndexTypeSizeInBits, *(_QWORD *)(v15 + 312));
      if (v19)
        v18 = v19;
    }
    if (&v18[-v16] != v17)
    {
      v20 = **(_QWORD **)(a1 + 40);
      v21 = *(_QWORD *)(*(_QWORD *)v6 + 40) + 272;
      if (*(_BYTE *)(v20 + 8) == 15)
      {
        v24 = llvm::DataLayout::getIndexTypeSizeInBits(v21, v20);
      }
      else
      {
        sub_1C4768AD0(v21, v20);
        v24 = v23;
        if ((_DWORD)v22 == 1)
      }
      if (v24 < IndexTypeSizeInBits)
      {
        if (!v7)
          goto LABEL_17;
        v25 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::Type *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v7 + 824))(*v7, 13, v8, 0, 0, 0, 0, 0, 0, 0, 0);
        v27 = v26;
        v29 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v7 + 824))(*v7, 13, **((_QWORD **)a2 - 4), 0, 0, 0, 0, 0, 0, 0, 0) < v25;
        if (v28 != v27)
          v29 = v28 < v27;
        if (!v29)
        {
LABEL_17:
          v30 = *(_QWORD *)(a1 + 48);
          if (!v30)
            goto LABEL_22;
          v31 = *(_QWORD *)(*(_QWORD *)v6 + 40) + 272;
          if (*(_BYTE *)(v30 + 8) == 15)
          {
            v34 = llvm::DataLayout::getIndexTypeSizeInBits(v31, v30);
          }
          else
          {
            sub_1C4768AD0(v31, v30);
            v34 = v33;
            if ((_DWORD)v32 == 1)
          }
          if (IndexTypeSizeInBits <= v34)
          {
            *(_BYTE *)(a1 + 56) |= v3;
          }
          else
          {
LABEL_22:
            if (*((_BYTE *)v8 + 8) != 13)
            {
              llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v6 + 40) + 272), v8);
              v8 = v35;
            }
            *(_QWORD *)(a1 + 48) = v8;
            *(_BYTE *)(a1 + 56) = v3;
          }
        }
      }
    }
  }
}

uint64_t sub_1C5B2C44C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v7;
  const llvm::Loop *v9;
  uint64_t v10;
  llvm::ScalarEvolution *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  const llvm::SCEV *SCEVAtScope;
  const llvm::SCEV *v18;
  uint64_t v19;

  v2 = **(_QWORD **)(a1 + 8);
  if (!v2 || (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) != 3)
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(v2 - 96);
  if (!v4 || *(_BYTE *)(v4 + 16) != 81)
    return (uint64_t)v3;
  v5 = *(llvm::Value **)(v4 - 64);
  if (!v5)
    return 0;
  v3 = *(llvm::Value **)(v4 - 32);
  if (v3)
  {
    if (*(_QWORD *)(v2 - 32))
    {
      v7 = *(_QWORD *)(v2 - 64);
      if (v7)
      {
        v9 = **(const llvm::Loop ***)a1;
        v19 = **(_QWORD **)(a1 + 16);
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(llvm::ScalarEvolution **)(v10 + 8);
        v12 = *(_WORD *)(v4 + 18) & 0x3FLL;
        v13 = sub_1C477672C((uint64_t)v9 + 56, v7);
        v14 = *((_QWORD *)v9 + 8);
        v15 = 72;
        if (v14 == *((_QWORD *)v9 + 7))
          v15 = 76;
        if (v13 != (_QWORD *)(v14 + 8 * *(unsigned int *)((char *)v9 + v15)))
          v12 = dword_1C86694B4[v12];
        v16 = (unsigned int *)(v10 + 56);
        if (a2)
          v12 = dword_1C86694B4[(__int16)v12];
        SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(v11, v5, v9);
        v18 = llvm::ScalarEvolution::getSCEVAtScope(v11, v3, v9);
        if (llvm::ScalarEvolution::isKnownPredicateAt((uint64_t ****)v11, v12, SCEVAtScope, v18, v2))
        {
          sub_1C5B2CBE4((uint64_t)v9, v19, a2, v16);
          return 1;
        }
        if ((a2 & 1) == 0)
          __asm { BR              X11 }
      }
    }
    return 0;
  }
  return (uint64_t)v3;
}

void sub_1C5B2CB44()
{
  JUMPOUT(0x1C5B2C9C4);
}

void sub_1C5B2CBA8()
{
  JUMPOUT(0x1C5B2C9C4);
}

void sub_1C5B2CBB4(uint64_t a1@<X8>)
{
  if ((*(_WORD *)(a1 + 18) & 1) != 0)
    JUMPOUT(0x1C5B2CBD8);
  JUMPOUT(0x1C5B2C9C8);
}

uint64_t sub_1C5B2CBE4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value **v14;

  v7 = *(_QWORD *)(a2 + 40);
  if (v7 == a2 + 40)
  {
    v9 = 0;
  }
  else
  {
    if (v7)
      v8 = v7 - 24;
    else
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      v9 = 0;
    else
      v9 = v8;
  }
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 != 30)
    __asm { BR              X10 }
  v11 = sub_1C477672C(a1 + 56, *(_QWORD *)(v9 - 32));
  v12 = *(_QWORD *)(a1 + 64);
  v13 = 72;
  if (v12 == *(_QWORD *)(a1 + 56))
    v13 = 76;
  v14 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v9 - 96), (v11 != (_QWORD *)(v12 + 8 * *(unsigned int *)(a1 + v13))) ^ a3, 0);
  return sub_1C5B2DA98(v9, (uint64_t)v14, a4);
}

void sub_1C5B2CCBC()
{
  JUMPOUT(0x1C5B2CC40);
}

uint64_t *sub_1C5B2CD0C(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char *v22;
  uint64_t *j;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  int64_t v91;
  uint64_t v92;

  v8 = result;
LABEL_2:
  v9 = a2 - 1;
  v87 = a2 - 3;
  v88 = a2 - 2;
  i = v8;
  v89 = a2;
  while (2)
  {
    v8 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = a2 - i;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v38 = *(a2 - 1);
        if (v38 != *v8)
        {
          result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v38, *v8);
          if ((_DWORD)result)
          {
            v39 = *v8;
            *v8 = *(a2 - 1);
            *(a2 - 1) = v39;
          }
        }
        return result;
      case 3:
        return sub_1C5B2D6E8(v8, v8 + 1, v9, a3);
      case 4:
        return sub_1C5B2D9C4(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return sub_1C5B2D5E0(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v8 == a2)
              return result;
            v53 = (unint64_t)(v12 - 2) >> 1;
            v91 = v53;
            while (1)
            {
              v54 = v53;
              if (v91 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = &v8[v55];
                if (2 * v53 + 2 < v12)
                {
                  v57 = v56[1];
                  if (*v56 != v57)
                  {
                    result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v56, v57);
                    if ((_DWORD)result)
                    {
                      ++v56;
                      v55 = 2 * v54 + 2;
                    }
                  }
                }
                v58 = *v56;
                v59 = v8[v54];
                if (*v56 == v59)
                {
                  v60 = *v56;
                  goto LABEL_109;
                }
                result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v58, v59);
                if ((result & 1) == 0)
                {
                  v60 = v8[v54];
                  v58 = *v56;
LABEL_109:
                  v8[v54] = v58;
                  if (v91 >= v55)
                  {
                    do
                    {
                      v62 = 2 * v55;
                      v55 = (2 * v55) | 1;
                      v61 = &v8[v55];
                      v63 = v62 + 2;
                      if (v62 + 2 < v12)
                      {
                        v64 = v61[1];
                        if (*v61 != v64)
                        {
                          result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v61, v64);
                          if ((_DWORD)result)
                          {
                            ++v61;
                            v55 = v63;
                          }
                        }
                      }
                      v65 = v60;
                      if (*v61 != v60)
                      {
                        result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v61, v60);
                        if ((result & 1) != 0)
                          goto LABEL_110;
                        v65 = *v61;
                      }
                      *v56 = v65;
                      v56 = v61;
                    }
                    while (v91 >= v55);
                  }
                  else
                  {
LABEL_110:
                    v61 = v56;
                  }
                  *v61 = v60;
                }
              }
              v53 = v54 - 1;
              if (!v54)
              {
                v66 = v89;
                do
                {
                  v67 = 0;
                  v92 = *v8;
                  v68 = v8;
                  do
                  {
                    v69 = v68;
                    v68 += v67 + 1;
                    v70 = 2 * v67;
                    v67 = (2 * v67) | 1;
                    v71 = v70 + 2;
                    if (v70 + 2 < v12)
                    {
                      v72 = v68[1];
                      if (*v68 != v72)
                      {
                        result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v68, v72);
                        if ((_DWORD)result)
                        {
                          ++v68;
                          v67 = v71;
                        }
                      }
                    }
                    *v69 = *v68;
                  }
                  while (v67 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                  v73 = v66 - 1;
                  if (v68 == v73)
                  {
                    v74 = v73;
                    *v68 = v92;
                  }
                  else
                  {
                    *v68 = *v73;
                    v74 = v73;
                    *v73 = v92;
                    v75 = (char *)v68 - (char *)v8 + 8;
                    if (v75 >= 9)
                    {
                      v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                      v77 = &v8[v76];
                      if (*v77 != *v68)
                      {
                        result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v77, *v68);
                        if ((_DWORD)result)
                        {
                          v78 = *v68;
                          do
                          {
                            v79 = v77;
                            *v68 = *v77;
                            if (!v76)
                              break;
                            v76 = (v76 - 1) >> 1;
                            v77 = &v8[v76];
                            if (*v77 == v78)
                              break;
                            result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v77, v78);
                            v68 = v79;
                          }
                          while ((result & 1) != 0);
                          *v79 = v78;
                        }
                      }
                    }
                  }
                  v80 = v12-- <= 2;
                  v66 = v74;
                }
                while (!v80);
                return result;
              }
            }
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v8[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 < 0x401)
          {
            result = sub_1C5B2D6E8(v14, v8, v9, a3);
          }
          else
          {
            sub_1C5B2D6E8(v8, v14, v9, a3);
            sub_1C5B2D6E8(v8 + 1, v14 - 1, v88, a3);
            sub_1C5B2D6E8(v8 + 2, &v8[v13 + 1], v87, a3);
            result = sub_1C5B2D6E8(v14 - 1, v14, &v8[v13 + 1], a3);
            v15 = *v8;
            *v8 = *v14;
            *v14 = v15;
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v16 = *(v8 - 1);
            if (v16 != *v8)
            {
              result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *(v8 - 1), *v8);
              if ((result & 1) != 0)
                goto LABEL_12;
              v16 = *v8;
            }
            if (v16 == *v9
              || (result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v16, *v9), !(_DWORD)result))
            {
              for (i = v8 + 1; i < a2; ++i)
              {
                if (v16 != *i)
                {
                  result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v16, *i);
                  if ((_DWORD)result)
                    break;
                }
              }
            }
            else
            {
              for (i = v8 + 1; ; ++i)
              {
                if (v16 != *i)
                {
                  result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v16, *i);
                  if ((result & 1) != 0)
                    break;
                }
              }
            }
            v33 = a2;
            if (i < a2)
            {
              v34 = v9;
              do
              {
                v33 = v34;
                if (v16 == *v34)
                  break;
                result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v16, *v34);
                v34 = v33 - 1;
              }
              while ((result & 1) != 0);
            }
            while (i < v33)
            {
              v35 = *i;
              *i++ = *v33;
              *v33 = v35;
              while (1)
              {
                if (v16 != *i)
                {
                  result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v16, *i);
                  if ((result & 1) != 0)
                    break;
                }
                ++i;
              }
              v36 = v33 - 1;
              do
              {
                v33 = v36;
                if (v16 == *v36)
                  break;
                result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v16, *v36);
                v36 = v33 - 1;
              }
              while ((result & 1) != 0);
            }
            v37 = i - 1;
            if (i - 1 != v8)
              *v8 = *v37;
            a5 = 0;
            *v37 = v16;
            continue;
          }
LABEL_12:
          v17 = *v8;
          v18 = 8;
          do
          {
            v19 = v18;
            v20 = *(uint64_t *)((char *)v8 + v18);
            if (v20 == v17)
              break;
            v21 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v20, v17);
            v18 = v19 + 8;
          }
          while (v21);
          v22 = (char *)v8 + v19;
          j = v9;
          if (v19 == 8)
          {
            j = v89;
            if (v22 < (char *)v89)
            {
              for (j = v9; ; --j)
              {
                if (*j == v17)
                {
                  if (v22 >= (char *)j)
                    break;
                }
                else
                {
                  v24 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *j, v17);
                  if (v22 >= (char *)j || v24)
                    break;
                }
              }
            }
          }
          else
          {
            while (*j == v17
                 || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *j, v17))--j;
          }
          i = (uint64_t *)((char *)v8 + v19);
          if (v22 < (char *)j)
          {
            v25 = j;
            do
            {
              v26 = *i;
              *i = *v25;
              *v25 = v26;
              v27 = i + 1;
              do
              {
                i = v27;
                if (*v27 == v17)
                  break;
                v28 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v27, v17);
                v27 = i + 1;
              }
              while (v28);
              do
              {
                do
                {
                  v30 = *--v25;
                  v29 = v30;
                }
                while (v30 == v17);
              }
              while (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v29, v17));
            }
            while (i < v25);
          }
          v31 = i - 1;
          if (i - 1 != v8)
            *v8 = *v31;
          *v31 = v17;
          a2 = v89;
          if (v22 < (char *)j)
          {
LABEL_40:
            result = (uint64_t *)sub_1C5B2CD0C(v8, i - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          v32 = sub_1C5B2D800(v8, i - 1, a3);
          result = (uint64_t *)sub_1C5B2D800(i, v89, a3);
          if (!(_DWORD)result)
          {
            if (v32)
              continue;
            goto LABEL_40;
          }
          a2 = i - 1;
          if (v32)
            return result;
          goto LABEL_2;
        }
        v40 = v8 + 1;
        v42 = v8 == a2 || v40 == a2;
        if ((a5 & 1) != 0)
        {
          if (v42)
            return result;
          v43 = 0;
          v44 = v8;
          while (1)
          {
            v46 = *v44;
            v45 = v44[1];
            v44 = v40;
            if (v45 != v46)
            {
              result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v45, v46);
              if ((_DWORD)result)
              {
                v47 = *v44;
                v48 = v43;
                while (1)
                {
                  v49 = v48;
                  v50 = (uint64_t *)((char *)v8 + v48);
                  v50[1] = *v50;
                  if (!v49)
                    break;
                  v51 = *(v50 - 1);
                  if (v47 != v51)
                  {
                    result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v47, v51);
                    v48 = v49 - 8;
                    if ((result & 1) != 0)
                      continue;
                  }
                  v52 = (uint64_t *)((char *)v8 + v49);
                  goto LABEL_95;
                }
                v52 = v8;
LABEL_95:
                a2 = v89;
                *v52 = v47;
              }
            }
            v40 = v44 + 1;
            v43 += 8;
            if (v44 + 1 == a2)
              return result;
          }
        }
        if (!v42)
        {
          do
          {
            v81 = v8;
            v8 = v40;
            v82 = v81[1];
            if (v82 != *v81)
            {
              result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v82, *v81);
              if ((_DWORD)result)
              {
                v83 = *v8;
                do
                {
                  v84 = v81;
                  v81[1] = *v81;
                  v86 = *--v81;
                  v85 = v86;
                  if (v83 == v86)
                    break;
                  result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v83, v85);
                }
                while ((result & 1) != 0);
                *v84 = v83;
              }
            }
            v40 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *sub_1C5B2D5E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_1C5B2D9C4(a1, a2, a3, a4, a6);
  if (*a5 != *a4)
  {
    result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a6 + 16), *a5, *a4);
    if ((_DWORD)result)
    {
      v13 = *a4;
      *a4 = *a5;
      *a5 = v13;
      if (*a4 != *a3)
      {
        result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a6 + 16), *a4, *a3);
        if ((_DWORD)result)
        {
          v14 = *a3;
          *a3 = *a4;
          *a4 = v14;
          if (*a3 != *a2)
          {
            result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a6 + 16), *a3, *a2);
            if ((_DWORD)result)
            {
              v15 = *a2;
              *a2 = *a3;
              *a3 = v15;
              if (*a2 != *a1)
              {
                result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a6 + 16), *a2, *a1);
                if ((_DWORD)result)
                {
                  v16 = *a1;
                  *a1 = *a2;
                  *a2 = v16;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C5B2D6E8(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2;
  v7 = result;
  v8 = *a2;
  if (*a2 == *result
    || (result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a4 + 16), *a2, *result), v8 = *v6, (result & 1) == 0))
  {
    if (*a3 != v8)
    {
      result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a4 + 16), *a3, v8);
      if ((_DWORD)result)
      {
        v9 = *v6;
        *v6 = *a3;
        *a3 = v9;
        if (*v6 != *v7)
        {
          result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a4 + 16), *v6, *v7);
          if ((result & 1) != 0)
            goto LABEL_14;
        }
      }
    }
  }
  else
  {
    if (*a3 != v8)
    {
      result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a4 + 16), *a3, *v6);
      if ((result & 1) != 0)
      {
        v6 = a3;
LABEL_14:
        v11 = *v7;
        *v7 = *v6;
        *v6 = v11;
        return result;
      }
      v8 = *v6;
    }
    v10 = *v7;
    *v7 = v8;
    *v6 = v10;
    if (*a3 != v10)
    {
      result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a4 + 16), *a3, v10);
      v7 = v6;
      v6 = a3;
      if ((_DWORD)result)
        goto LABEL_14;
    }
  }
  return result;
}

BOOL sub_1C5B2D800(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      if (v8 != *a1)
      {
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v8, *a1))
        {
          v9 = *a1;
          *a1 = *(a2 - 1);
          *(a2 - 1) = v9;
        }
        return 1;
      }
      return result;
    case 3:
      sub_1C5B2D6E8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5B2D9C4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5B2D5E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C5B2D6E8(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 16;
      break;
  }
  while (1)
  {
    if (*v11 != *v10
      && llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), *v11, *v10))
    {
      v14 = *v11;
      v15 = v13;
      while (1)
      {
        v16 = v15;
        v17 = (uint64_t *)((char *)a1 + v15);
        v17[1] = *v17;
        if (!v16)
          break;
        v18 = *(v17 - 1);
        if (v14 != v18)
        {
          v19 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a3 + 16), v14, v18);
          v15 = v16 - 8;
          if (v19)
            continue;
        }
        v20 = (uint64_t *)((char *)a1 + v16);
        goto LABEL_15;
      }
      v20 = a1;
LABEL_15:
      *v20 = v14;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *sub_1C5B2D9C4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_1C5B2D6E8(a1, a2, a3, a5);
  if (*a4 != *a3)
  {
    result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a5 + 16), *a4, *a3);
    if ((_DWORD)result)
    {
      v11 = *a3;
      *a3 = *a4;
      *a4 = v11;
      if (*a3 != *a2)
      {
        result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a5 + 16), *a3, *a2);
        if ((_DWORD)result)
        {
          v12 = *a2;
          *a2 = *a3;
          *a3 = v12;
          if (*a2 != *a1)
          {
            result = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)a5 + 16), *a2, *a1);
            if ((_DWORD)result)
            {
              v13 = *a1;
              *a1 = *a2;
              *a2 = v13;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5B2DA98(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)(result - 96);
  v3 = *(_QWORD *)(result - 96);
  v9 = v3;
  if (v3)
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v5 = *(_QWORD *)(result - 88);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(result - 80);
  }
  *v4 = a2;
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v6 = (_QWORD *)(a2 + 8);
    v7 = v8;
    *(_QWORD *)(result - 88) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v6;
    *v6 = v4;
  }
  if (!*(_QWORD *)(v3 + 8))
    return sub_1C5B2DB10(a3, &v9);
  return result;
}

uint64_t sub_1C5B2DB10(unsigned int *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  llvm::ValueHandleBase *v5;
  uint64_t v6;
  unsigned int v8;

  v3 = a1[2];
  if (v3 >= a1[3])
    return sub_1C578EDF4(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = (llvm::ValueHandleBase *)(*(_QWORD *)a1 + 24 * v3);
  v6 = *a2;
  *(_QWORD *)v5 = 6;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    llvm::ValueHandleBase::AddToUseList(v5);
    v3 = a1[2];
    v4 = *(_QWORD *)a1;
  }
  v8 = v3 + 1;
  a1[2] = v8;
  return v4 + 24 * v8 - 24;
}

int8x16_t *sub_1C5B2DB94(int8x16_t *result, int8x16_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD *v26;
  char *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  char *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  int v43;
  uint64_t ***v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  int8x16_t *v57;
  size_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  _QWORD *v68;
  char *v69;
  size_t v70;
  size_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t ***v74;
  int8x16_t *v75;
  unsigned int v76;
  int8x16_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  int v88;
  _QWORD *v89;
  char *v90;
  size_t v91;
  size_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t ****v97;
  uint64_t ***v98;
  int v99;
  int v100;
  uint64_t ***v101;
  char *v102;
  size_t v103;
  size_t v104;
  size_t v105;
  int v106;
  int8x16_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  int v117;
  _QWORD *v118;
  char *v119;
  size_t v120;
  size_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t ****v126;
  uint64_t ***v127;
  int v128;
  int v129;
  uint64_t ***v130;
  char *v131;
  size_t v132;
  size_t v133;
  size_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  int8x16_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  int v151;
  _QWORD *v152;
  char *v153;
  size_t v154;
  size_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t ****v160;
  uint64_t ***v161;
  int v162;
  int v163;
  uint64_t ***v164;
  char *v165;
  size_t v166;
  size_t v167;
  size_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  int v180;
  _QWORD *v181;
  char *v182;
  size_t v183;
  size_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t ****v189;
  uint64_t ***v190;
  int v191;
  int v192;
  uint64_t ***v193;
  char *v194;
  size_t v195;
  size_t v196;
  size_t v197;
  int v198;
  uint64_t v199;
  uint64_t *v200;
  BOOL v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  int v209;
  int v210;
  _QWORD *v211;
  char *v212;
  size_t v213;
  size_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t ****v219;
  uint64_t ***v220;
  int v221;
  int v222;
  uint64_t ***v223;
  char *v224;
  size_t v225;
  size_t v226;
  size_t v227;
  int v228;
  BOOL v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t ****v235;
  uint64_t ***v236;
  int v237;
  int v238;
  int8x16_t *v239;
  size_t v240;
  size_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  int v248;
  int v249;
  _QWORD *v250;
  char *v251;
  size_t v252;
  size_t v253;
  size_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t ****v261;
  uint64_t ***v262;
  int v263;
  int v264;
  int8x16_t *v265;
  size_t v266;
  size_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  int v274;
  int v275;
  _QWORD *v276;
  char *v277;
  size_t v278;
  size_t v279;
  size_t v280;
  int8x16_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t ****v289;
  uint64_t ***v290;
  int v291;
  int v292;
  int8x16_t *v293;
  size_t v294;
  size_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  int v302;
  int v303;
  _QWORD *v304;
  char *v305;
  size_t v306;
  size_t v307;
  size_t v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t ****v321;
  uint64_t ***v322;
  int v323;
  int v324;
  int8x16_t *v325;
  size_t v326;
  size_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  int v334;
  int v335;
  _QWORD *v336;
  char *v337;
  size_t v338;
  size_t v339;
  size_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t ****v345;
  uint64_t ***v346;
  int v347;
  int v348;
  uint64_t ***v349;
  char *v350;
  size_t v351;
  size_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  int v359;
  int v360;
  _QWORD *v361;
  char *v362;
  size_t v363;
  size_t v364;
  size_t v365;
  int v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *i64;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int8x16_t *v391;
  BOOL v392;
  char v393;
  int8x16_t *v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  int8x16_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  int v411;
  int v412;
  int8x16_t *v413;
  size_t v414;
  size_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  int v422;
  int v423;
  _QWORD *v424;
  char *v425;
  size_t v426;
  size_t v427;
  size_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  int v435;
  int v436;
  int8x16_t *v437;
  size_t v438;
  size_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  int v446;
  int v447;
  _QWORD *v448;
  char *v449;
  size_t v450;
  size_t v451;
  size_t v452;
  int64_t v453;
  int64_t v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  int v468;
  int v469;
  _QWORD *v470;
  char *v471;
  size_t v472;
  size_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  uint64_t v479;
  int v480;
  int v481;
  _QWORD *v482;
  char *v483;
  size_t v484;
  size_t v485;
  size_t v486;
  int v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  int v497;
  int v498;
  int8x16_t *v499;
  size_t v500;
  size_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  int v508;
  int v509;
  _QWORD *v510;
  char *v511;
  size_t v512;
  size_t v513;
  size_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t *v525;
  uint64_t v526;
  int v527;
  int v528;
  _QWORD *v529;
  char *v530;
  size_t v531;
  size_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  int v539;
  int v540;
  _QWORD *v541;
  char *v542;
  size_t v543;
  size_t v544;
  size_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t *v553;
  uint64_t v554;
  int v555;
  int v556;
  int8x16_t *v557;
  size_t v558;
  size_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  int v566;
  int v567;
  _QWORD *v568;
  char *v569;
  size_t v570;
  size_t v571;
  size_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t *v577;
  uint64_t v578;
  int v579;
  int v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t v591;
  int v592;
  int v593;
  int8x16_t *v594;
  size_t v595;
  size_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  int v603;
  int v604;
  _QWORD *v605;
  char *v606;
  size_t v607;
  size_t v608;
  size_t v609;
  uint64_t *v610;
  int8x16_t *v611;
  size_t v612;
  size_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t *v618;
  uint64_t v619;
  int v620;
  int v621;
  _QWORD *v622;
  char *v623;
  size_t v624;
  size_t v625;
  size_t v626;
  uint64_t *v627;
  uint64_t v628;
  int64_t v629;
  uint64_t *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  int v642;
  int v643;
  int8x16_t *v644;
  size_t v645;
  size_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  int v653;
  int v654;
  _QWORD *v655;
  char *v656;
  size_t v657;
  size_t v658;
  size_t v659;
  uint64_t *v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  BOOL v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t *v672;
  uint64_t v673;
  int v674;
  int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  int v682;
  int v683;
  uint64_t *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unsigned int v689;
  uint64_t *v690;
  uint64_t *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t *v699;
  uint64_t v700;
  int v701;
  int v702;
  int8x16_t *v703;
  size_t v704;
  size_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t *v710;
  uint64_t v711;
  int v712;
  int v713;
  _QWORD *v714;
  char *v715;
  size_t v716;
  size_t v717;
  size_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t *v723;
  uint64_t v724;
  int v725;
  int v726;
  int8x16_t *v727;
  size_t v728;
  size_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t *v734;
  uint64_t v735;
  int v736;
  int v737;
  _QWORD *v738;
  char *v739;
  size_t v740;
  size_t v741;
  size_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t *v747;
  uint64_t v748;
  int v749;
  int v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  int v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t *v763;
  uint64_t v764;
  int v765;
  int v766;
  int8x16_t *v767;
  size_t v768;
  size_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t *v774;
  uint64_t v775;
  int v776;
  int v777;
  int8x16_t *v778;
  size_t v779;
  size_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t *v785;
  uint64_t v786;
  int v787;
  int v788;
  _QWORD *v789;
  char *v790;
  size_t v791;
  size_t v792;
  size_t v793;
  _QWORD *v794;
  char *v795;
  size_t v796;
  size_t v797;
  size_t v798;
  int8x16_t *v799;
  size_t v800;
  size_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t *v806;
  uint64_t v807;
  int v808;
  int v809;
  _QWORD *v810;
  char *v811;
  size_t v812;
  size_t v813;
  size_t v814;
  int8x16_t *v815;
  size_t v816;
  size_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t *v822;
  uint64_t v823;
  int v824;
  int v825;
  _QWORD *v826;
  char *v827;
  size_t v828;
  size_t v829;
  size_t v830;
  int8x16_t *v831;
  size_t v832;
  size_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t *v838;
  uint64_t v839;
  int v840;
  int v841;
  _QWORD *v842;
  char *v843;
  size_t v844;
  size_t v845;
  size_t v846;
  int64_t v848;
  int64_t v850;
  uint64_t v851;
  int8x16_t *v853;
  uint64_t *v854;
  uint64_t *v855;
  uint64_t v856;

  v6 = result;
LABEL_2:
  v7 = a2;
  v854 = &a2[-1].i64[1];
  v8 = v6;
  while (2)
  {
    v9 = v8;
    v10 = (char *)v7 - (char *)v8;
    v11 = ((char *)v7 - (char *)v8) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v369 = a2[-1].i64[1];
        v370 = v8->i64[0];
        v371 = *a3;
        result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v369, v8->i64[0]);
        if ((result & 1) != 0)
          goto LABEL_419;
        result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v371 + 16), v370, v369);
        if ((result & 1) != 0)
          return result;
        if ((*(_BYTE *)(v369 + 23) & 0x10) != 0)
        {
          v668 = ***(_QWORD ***)v369;
          v669 = *(_QWORD *)(v668 + 152);
          v670 = *(unsigned int *)(v668 + 168);
          if ((_DWORD)v670)
          {
            LODWORD(v671) = (v670 - 1) & ((v369 >> 4) ^ (v369 >> 9));
            v672 = (uint64_t *)(v669 + 16 * v671);
            v673 = *v672;
            if (*v672 != v369)
            {
              v674 = 1;
              do
              {
                if (v673 == -4096)
                  goto LABEL_855;
                v675 = v671 + v674++;
                v671 = v675 & (v670 - 1);
                v673 = *(_QWORD *)(v669 + 16 * v671);
              }
              while (v673 != v369);
              v672 = (uint64_t *)(v669 + 16 * v671);
            }
          }
          else
          {
LABEL_855:
            v672 = (uint64_t *)(v669 + 16 * v670);
          }
          v767 = (int8x16_t *)v672[1];
          v769 = v767->i64[0];
          result = v767 + 1;
          v768 = v769;
          goto LABEL_857;
        }
        v768 = 0;
        result = (int8x16_t *)&byte_1C871356D;
LABEL_857:
        if ((*(_BYTE *)(v370 + 23) & 0x10) != 0)
        {
          v770 = ***(_QWORD ***)v370;
          v771 = *(_QWORD *)(v770 + 152);
          v772 = *(unsigned int *)(v770 + 168);
          if ((_DWORD)v772)
          {
            LODWORD(v773) = (v772 - 1) & ((v370 >> 4) ^ (v370 >> 9));
            v774 = (uint64_t *)(v771 + 16 * v773);
            v775 = *v774;
            if (*v774 != v370)
            {
              v776 = 1;
              do
              {
                if (v775 == -4096)
                  goto LABEL_873;
                v777 = v773 + v776++;
                v773 = v777 & (v772 - 1);
                v775 = *(_QWORD *)(v771 + 16 * v773);
              }
              while (v775 != v370);
              v774 = (uint64_t *)(v771 + 16 * v773);
            }
          }
          else
          {
LABEL_873:
            v774 = (uint64_t *)(v771 + 16 * v772);
          }
          v789 = (_QWORD *)v774[1];
          v792 = *v789;
          v790 = (char *)(v789 + 2);
          v791 = v792;
          goto LABEL_875;
        }
        v791 = 0;
        v790 = &byte_1C871356D;
LABEL_875:
        if (v791 >= v768)
          v793 = v768;
        else
          v793 = v791;
        if (v793 && (result = (int8x16_t *)memcmp(result, v790, v793), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v768 >= v791)
        {
          return result;
        }
LABEL_419:
        v372 = v8->i64[0];
        v8->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v372;
        return result;
      case 3:
        return (int8x16_t *)sub_1C5B30A94(v8->i64, &v8->i64[1], v854, a3);
      case 4:
        return (int8x16_t *)sub_1C5B31E2C(v8->i64, &v8->i64[1], v8[1].i64, v854, a3);
      case 5:
        v373 = &v8->i64[1];
        i64 = v8[1].i64;
        v375 = &v8[1].i64[1];
        sub_1C5B31E2C(v8->i64, &v8->i64[1], v8[1].i64, &v8[1].i64[1], a3);
        v376 = a2[-1].i64[1];
        v377 = v9[1].i64[1];
        v378 = *a3;
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v376, v377))
          goto LABEL_423;
        result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v378 + 16), v377, v376);
        if ((result & 1) != 0)
          return result;
        if ((*(_BYTE *)(v376 + 23) & 0x10) != 0)
        {
          v676 = ***(_QWORD ***)v376;
          v677 = *(_QWORD *)(v676 + 152);
          v678 = *(unsigned int *)(v676 + 168);
          if ((_DWORD)v678)
          {
            LODWORD(v679) = (v678 - 1) & ((v376 >> 4) ^ (v376 >> 9));
            v680 = (uint64_t *)(v677 + 16 * v679);
            v681 = *v680;
            if (*v680 != v376)
            {
              v682 = 1;
              do
              {
                if (v681 == -4096)
                  goto LABEL_864;
                v683 = v679 + v682++;
                v679 = v683 & (v678 - 1);
                v681 = *(_QWORD *)(v677 + 16 * v679);
              }
              while (v681 != v376);
              v680 = (uint64_t *)(v677 + 16 * v679);
            }
          }
          else
          {
LABEL_864:
            v680 = (uint64_t *)(v677 + 16 * v678);
          }
          v778 = (int8x16_t *)v680[1];
          v780 = v778->i64[0];
          result = v778 + 1;
          v779 = v780;
          goto LABEL_866;
        }
        v779 = 0;
        result = (int8x16_t *)&byte_1C871356D;
LABEL_866:
        if ((*(_BYTE *)(v377 + 23) & 0x10) != 0)
        {
          v781 = ***(_QWORD ***)v377;
          v782 = *(_QWORD *)(v781 + 152);
          v783 = *(unsigned int *)(v781 + 168);
          if ((_DWORD)v783)
          {
            LODWORD(v784) = (v783 - 1) & ((v377 >> 4) ^ (v377 >> 9));
            v785 = (uint64_t *)(v782 + 16 * v784);
            v786 = *v785;
            if (*v785 != v377)
            {
              v787 = 1;
              do
              {
                if (v786 == -4096)
                  goto LABEL_884;
                v788 = v784 + v787++;
                v784 = v788 & (v783 - 1);
                v786 = *(_QWORD *)(v782 + 16 * v784);
              }
              while (v786 != v377);
              v785 = (uint64_t *)(v782 + 16 * v784);
            }
          }
          else
          {
LABEL_884:
            v785 = (uint64_t *)(v782 + 16 * v783);
          }
          v794 = (_QWORD *)v785[1];
          v797 = *v794;
          v795 = (char *)(v794 + 2);
          v796 = v797;
          goto LABEL_886;
        }
        v796 = 0;
        v795 = &byte_1C871356D;
LABEL_886:
        if (v796 >= v779)
          v798 = v779;
        else
          v798 = v796;
        if (v798 && (result = (int8x16_t *)memcmp(result, v795, v798), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v779 >= v796)
        {
          return result;
        }
LABEL_423:
        v379 = *v375;
        *v375 = a2[-1].i64[1];
        a2[-1].i64[1] = v379;
        v380 = *v375;
        v381 = *i64;
        v382 = *a3;
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v375, *i64))
          goto LABEL_424;
        result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v382 + 16), v381, v380);
        if ((result & 1) != 0)
          return result;
        if ((*(_BYTE *)(v380 + 23) & 0x10) != 0)
        {
          v743 = ***(_QWORD ***)v380;
          v744 = *(_QWORD *)(v743 + 152);
          v745 = *(unsigned int *)(v743 + 168);
          if ((_DWORD)v745)
          {
            LODWORD(v746) = (v745 - 1) & ((v380 >> 4) ^ (v380 >> 9));
            v747 = (uint64_t *)(v744 + 16 * v746);
            v748 = *v747;
            if (*v747 == v380)
            {
LABEL_896:
              v799 = (int8x16_t *)v747[1];
              v801 = v799->i64[0];
              result = v799 + 1;
              v800 = v801;
              goto LABEL_897;
            }
            v749 = 1;
            while (v748 != -4096)
            {
              v750 = v746 + v749++;
              v746 = v750 & (v745 - 1);
              v748 = *(_QWORD *)(v744 + 16 * v746);
              if (v748 == v380)
              {
                v747 = (uint64_t *)(v744 + 16 * v746);
                goto LABEL_896;
              }
            }
          }
          v747 = (uint64_t *)(v744 + 16 * v745);
          goto LABEL_896;
        }
        v800 = 0;
        result = (int8x16_t *)&byte_1C871356D;
LABEL_897:
        if ((*(_BYTE *)(v381 + 23) & 0x10) == 0)
        {
          v812 = 0;
          v811 = &byte_1C871356D;
LABEL_906:
          if (v812 >= v800)
            v814 = v800;
          else
            v814 = v812;
          if (v814 && (result = (int8x16_t *)memcmp(result, v811, v814), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v800 >= v812)
          {
            return result;
          }
LABEL_424:
          v383 = *i64;
          v384 = *v375;
          *i64 = *v375;
          *v375 = v383;
          v385 = *v373;
          v386 = *a3;
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v384, *v373))
            goto LABEL_425;
          result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v386 + 16), v385, v384);
          if ((result & 1) != 0)
            return result;
          if ((*(_BYTE *)(v384 + 23) & 0x10) == 0)
          {
            v816 = 0;
            result = (int8x16_t *)&byte_1C871356D;
LABEL_917:
            if ((*(_BYTE *)(v385 + 23) & 0x10) == 0)
            {
              v828 = 0;
              v827 = &byte_1C871356D;
LABEL_926:
              if (v828 >= v816)
                v830 = v816;
              else
                v830 = v828;
              if (v830 && (result = (int8x16_t *)memcmp(result, v827, v830), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  return result;
              }
              else if (v816 >= v828)
              {
                return result;
              }
LABEL_425:
              v387 = v9->i64[1];
              v388 = v9[1].i64[0];
              v389 = v9->i64[0];
              v9->i64[1] = v388;
              v9[1].i64[0] = v387;
              v390 = *a3;
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v390 + 16), v388, v389);
              if ((result & 1) != 0)
                goto LABEL_426;
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v390 + 16), v389, v388);
              if ((result & 1) != 0)
                return result;
              if ((*(_BYTE *)(v388 + 23) & 0x10) == 0)
              {
                v832 = 0;
                result = (int8x16_t *)&byte_1C871356D;
LABEL_937:
                if ((*(_BYTE *)(v389 + 23) & 0x10) == 0)
                {
                  v844 = 0;
                  v843 = &byte_1C871356D;
LABEL_946:
                  if (v844 >= v832)
                    v846 = v832;
                  else
                    v846 = v844;
                  if (v846 && (result = (int8x16_t *)memcmp(result, v843, v846), (_DWORD)result))
                  {
                    if ((result & 0x80000000) == 0)
                      return result;
                  }
                  else if (v832 >= v844)
                  {
                    return result;
                  }
LABEL_426:
                  *v9 = vextq_s8(*v9, *v9, 8uLL);
                  return result;
                }
                v834 = ***(_QWORD ***)v389;
                v835 = *(_QWORD *)(v834 + 152);
                v836 = *(unsigned int *)(v834 + 168);
                if ((_DWORD)v836)
                {
                  LODWORD(v837) = (v836 - 1) & ((v389 >> 4) ^ (v389 >> 9));
                  v838 = (uint64_t *)(v835 + 16 * v837);
                  v839 = *v838;
                  if (*v838 == v389)
                  {
LABEL_945:
                    v842 = (_QWORD *)v838[1];
                    v845 = *v842;
                    v843 = (char *)(v842 + 2);
                    v844 = v845;
                    goto LABEL_946;
                  }
                  v840 = 1;
                  while (v839 != -4096)
                  {
                    v841 = v837 + v840++;
                    v837 = v841 & (v836 - 1);
                    v839 = *(_QWORD *)(v835 + 16 * v837);
                    if (v839 == v389)
                    {
                      v838 = (uint64_t *)(v835 + 16 * v837);
                      goto LABEL_945;
                    }
                  }
                }
                v838 = (uint64_t *)(v835 + 16 * v836);
                goto LABEL_945;
              }
              v759 = ***(_QWORD ***)v388;
              v760 = *(_QWORD *)(v759 + 152);
              v761 = *(unsigned int *)(v759 + 168);
              if ((_DWORD)v761)
              {
                LODWORD(v762) = (v761 - 1) & ((v388 >> 4) ^ (v388 >> 9));
                v763 = (uint64_t *)(v760 + 16 * v762);
                v764 = *v763;
                if (*v763 == v388)
                {
LABEL_936:
                  v831 = (int8x16_t *)v763[1];
                  v833 = v831->i64[0];
                  result = v831 + 1;
                  v832 = v833;
                  goto LABEL_937;
                }
                v765 = 1;
                while (v764 != -4096)
                {
                  v766 = v762 + v765++;
                  v762 = v766 & (v761 - 1);
                  v764 = *(_QWORD *)(v760 + 16 * v762);
                  if (v764 == v388)
                  {
                    v763 = (uint64_t *)(v760 + 16 * v762);
                    goto LABEL_936;
                  }
                }
              }
              v763 = (uint64_t *)(v760 + 16 * v761);
              goto LABEL_936;
            }
            v818 = ***(_QWORD ***)v385;
            v819 = *(_QWORD *)(v818 + 152);
            v820 = *(unsigned int *)(v818 + 168);
            if ((_DWORD)v820)
            {
              LODWORD(v821) = (v820 - 1) & ((v385 >> 4) ^ (v385 >> 9));
              v822 = (uint64_t *)(v819 + 16 * v821);
              v823 = *v822;
              if (*v822 == v385)
              {
LABEL_925:
                v826 = (_QWORD *)v822[1];
                v829 = *v826;
                v827 = (char *)(v826 + 2);
                v828 = v829;
                goto LABEL_926;
              }
              v824 = 1;
              while (v823 != -4096)
              {
                v825 = v821 + v824++;
                v821 = v825 & (v820 - 1);
                v823 = *(_QWORD *)(v819 + 16 * v821);
                if (v823 == v385)
                {
                  v822 = (uint64_t *)(v819 + 16 * v821);
                  goto LABEL_925;
                }
              }
            }
            v822 = (uint64_t *)(v819 + 16 * v820);
            goto LABEL_925;
          }
          v751 = ***(_QWORD ***)v384;
          v752 = *(_QWORD *)(v751 + 152);
          v753 = *(unsigned int *)(v751 + 168);
          if ((_DWORD)v753)
          {
            LODWORD(v754) = (v753 - 1) & ((v384 >> 4) ^ (v384 >> 9));
            v755 = (uint64_t *)(v752 + 16 * v754);
            v756 = *v755;
            if (*v755 == v384)
            {
LABEL_916:
              v815 = (int8x16_t *)v755[1];
              v817 = v815->i64[0];
              result = v815 + 1;
              v816 = v817;
              goto LABEL_917;
            }
            v757 = 1;
            while (v756 != -4096)
            {
              v758 = v754 + v757++;
              v754 = v758 & (v753 - 1);
              v756 = *(_QWORD *)(v752 + 16 * v754);
              if (v756 == v384)
              {
                v755 = (uint64_t *)(v752 + 16 * v754);
                goto LABEL_916;
              }
            }
          }
          v755 = (uint64_t *)(v752 + 16 * v753);
          goto LABEL_916;
        }
        v802 = ***(_QWORD ***)v381;
        v803 = *(_QWORD *)(v802 + 152);
        v804 = *(unsigned int *)(v802 + 168);
        if (!(_DWORD)v804)
          goto LABEL_904;
        LODWORD(v805) = (v804 - 1) & ((v381 >> 4) ^ (v381 >> 9));
        v806 = (uint64_t *)(v803 + 16 * v805);
        v807 = *v806;
        if (*v806 != v381)
        {
          v808 = 1;
          while (v807 != -4096)
          {
            v809 = v805 + v808++;
            v805 = v809 & (v804 - 1);
            v807 = *(_QWORD *)(v803 + 16 * v805);
            if (v807 == v381)
            {
              v806 = (uint64_t *)(v803 + 16 * v805);
              goto LABEL_905;
            }
          }
LABEL_904:
          v806 = (uint64_t *)(v803 + 16 * v804);
        }
LABEL_905:
        v810 = (_QWORD *)v806[1];
        v813 = *v810;
        v811 = (char *)(v810 + 2);
        v812 = v813;
        goto LABEL_906;
      default:
        v853 = v8;
        if (v10 <= 191)
        {
          v391 = (int8x16_t *)&v8->u64[1];
          v392 = v8 == v7 || v391 == v7;
          v393 = v392;
          if ((a5 & 1) != 0)
          {
            if ((v393 & 1) != 0)
              return result;
            v394 = v8;
            while (1)
            {
              v395 = (uint64_t *)v394;
              v394 = v391;
              v396 = *v395;
              v397 = v395[1];
              v398 = *a3;
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v397, *v395);
              if ((result & 1) == 0)
              {
                result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v398 + 16), v396, v397);
                if ((result & 1) != 0)
                  goto LABEL_481;
                if ((*(_BYTE *)(v397 + 23) & 0x10) != 0)
                {
                  v429 = ***(_QWORD ***)v397;
                  v430 = *(_QWORD *)(v429 + 152);
                  v431 = *(unsigned int *)(v429 + 168);
                  if ((_DWORD)v431)
                  {
                    LODWORD(v432) = (v431 - 1) & ((v397 >> 4) ^ (v397 >> 9));
                    v433 = (uint64_t *)(v430 + 16 * v432);
                    v434 = *v433;
                    if (*v433 != v397)
                    {
                      v435 = 1;
                      do
                      {
                        if (v434 == -4096)
                          goto LABEL_483;
                        v436 = v432 + v435++;
                        v432 = v436 & (v431 - 1);
                        v434 = *(_QWORD *)(v430 + 16 * v432);
                      }
                      while (v434 != v397);
                      v433 = (uint64_t *)(v430 + 16 * v432);
                    }
                  }
                  else
                  {
LABEL_483:
                    v433 = (uint64_t *)(v430 + 16 * v431);
                  }
                  v437 = (int8x16_t *)v433[1];
                  v439 = v437->i64[0];
                  result = v437 + 1;
                  v438 = v439;
                }
                else
                {
                  v438 = 0;
                  result = (int8x16_t *)&byte_1C871356D;
                }
                if ((*(_BYTE *)(v396 + 23) & 0x10) != 0)
                {
                  v440 = ***(_QWORD ***)v396;
                  v441 = *(_QWORD *)(v440 + 152);
                  v442 = *(unsigned int *)(v440 + 168);
                  if ((_DWORD)v442)
                  {
                    LODWORD(v443) = (v442 - 1) & ((v396 >> 4) ^ (v396 >> 9));
                    v444 = (uint64_t *)(v441 + 16 * v443);
                    v445 = *v444;
                    if (*v444 != v396)
                    {
                      v446 = 1;
                      do
                      {
                        if (v445 == -4096)
                          goto LABEL_492;
                        v447 = v443 + v446++;
                        v443 = v447 & (v442 - 1);
                        v445 = *(_QWORD *)(v441 + 16 * v443);
                      }
                      while (v445 != v396);
                      v444 = (uint64_t *)(v441 + 16 * v443);
                    }
                  }
                  else
                  {
LABEL_492:
                    v444 = (uint64_t *)(v441 + 16 * v442);
                  }
                  v448 = (_QWORD *)v444[1];
                  v451 = *v448;
                  v449 = (char *)(v448 + 2);
                  v450 = v451;
                }
                else
                {
                  v450 = 0;
                  v449 = &byte_1C871356D;
                }
                if (v450 >= v438)
                  v452 = v438;
                else
                  v452 = v450;
                if (v452 && (result = (int8x16_t *)memcmp(result, v449, v452), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_481;
                }
                else if (v438 >= v450)
                {
                  goto LABEL_481;
                }
              }
              v399 = v395[1];
              v395[1] = *v395;
              v400 = (uint64_t *)v9;
              if (v395 == (uint64_t *)v9)
                goto LABEL_480;
              v401 = (int8x16_t *)v395;
              while (1)
              {
                v403 = v401[-1].i64[1];
                v401 = (int8x16_t *)((char *)v401 - 8);
                v402 = v403;
                v404 = *a3;
                result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v399, v403);
                if ((result & 1) == 0)
                {
                  result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v404 + 16), v402, v399);
                  if ((result & 1) != 0)
                    break;
                  if ((*(_BYTE *)(v399 + 23) & 0x10) != 0)
                  {
                    v405 = ***(_QWORD ***)v399;
                    v406 = *(_QWORD *)(v405 + 152);
                    v407 = *(unsigned int *)(v405 + 168);
                    if ((_DWORD)v407)
                    {
                      LODWORD(v408) = (v407 - 1) & ((v399 >> 4) ^ (v399 >> 9));
                      v409 = (uint64_t *)(v406 + 16 * v408);
                      v410 = *v409;
                      if (*v409 != v399)
                      {
                        v411 = 1;
                        do
                        {
                          if (v410 == -4096)
                            goto LABEL_448;
                          v412 = v408 + v411++;
                          v408 = v412 & (v407 - 1);
                          v410 = *(_QWORD *)(v406 + 16 * v408);
                        }
                        while (v410 != v399);
                        v409 = (uint64_t *)(v406 + 16 * v408);
                      }
                    }
                    else
                    {
LABEL_448:
                      v409 = (uint64_t *)(v406 + 16 * v407);
                    }
                    v413 = (int8x16_t *)v409[1];
                    v415 = v413->i64[0];
                    result = v413 + 1;
                    v414 = v415;
                  }
                  else
                  {
                    v414 = 0;
                    result = (int8x16_t *)&byte_1C871356D;
                  }
                  if ((*(_BYTE *)(v402 + 23) & 0x10) != 0)
                  {
                    v416 = ***(_QWORD ***)v402;
                    v417 = *(_QWORD *)(v416 + 152);
                    v418 = *(unsigned int *)(v416 + 168);
                    if ((_DWORD)v418)
                    {
                      LODWORD(v419) = (v418 - 1) & ((v402 >> 4) ^ (v402 >> 9));
                      v420 = (uint64_t *)(v417 + 16 * v419);
                      v421 = *v420;
                      if (*v420 != v402)
                      {
                        v422 = 1;
                        do
                        {
                          if (v421 == -4096)
                            goto LABEL_457;
                          v423 = v419 + v422++;
                          v419 = v423 & (v418 - 1);
                          v421 = *(_QWORD *)(v417 + 16 * v419);
                        }
                        while (v421 != v402);
                        v420 = (uint64_t *)(v417 + 16 * v419);
                      }
                    }
                    else
                    {
LABEL_457:
                      v420 = (uint64_t *)(v417 + 16 * v418);
                    }
                    v424 = (_QWORD *)v420[1];
                    v427 = *v424;
                    v425 = (char *)(v424 + 2);
                    v426 = v427;
                  }
                  else
                  {
                    v426 = 0;
                    v425 = &byte_1C871356D;
                  }
                  if (v426 >= v414)
                    v428 = v414;
                  else
                    v428 = v426;
                  if (v428)
                  {
                    result = (int8x16_t *)memcmp(result, v425, v428);
                    if ((_DWORD)result)
                    {
                      if ((result & 0x80000000) == 0)
                        break;
                      goto LABEL_467;
                    }
                  }
                  if (v414 >= v426)
                    break;
                }
LABEL_467:
                *v395 = *(v395 - 1);
                v395 = (uint64_t *)v401;
                v9 = v853;
                if (v401 == v853)
                {
                  v400 = (uint64_t *)v853;
                  goto LABEL_480;
                }
              }
              v400 = v395;
              v9 = v853;
LABEL_480:
              *v400 = v399;
LABEL_481:
              v391 = (int8x16_t *)&v394->u64[1];
              if (&v394->u64[1] == (unint64_t *)a2)
                return result;
            }
          }
          if ((v393 & 1) != 0)
            return result;
          while (1)
          {
            v684 = (uint64_t *)v9;
            v9 = v391;
            v685 = *v684;
            v686 = v684[1];
            v687 = *a3;
            if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v686, *v684))
            {
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v687 + 16), v685, v686);
              if ((result & 1) != 0)
                goto LABEL_827;
              if ((*(_BYTE *)(v686 + 23) & 0x10) != 0)
              {
                v719 = ***(_QWORD ***)v686;
                v720 = *(_QWORD *)(v719 + 152);
                v721 = *(unsigned int *)(v719 + 168);
                if ((_DWORD)v721)
                {
                  LODWORD(v722) = (v721 - 1) & ((v686 >> 4) ^ (v686 >> 9));
                  v723 = (uint64_t *)(v720 + 16 * v722);
                  v724 = *v723;
                  if (*v723 != v686)
                  {
                    v725 = 1;
                    do
                    {
                      if (v724 == -4096)
                        goto LABEL_808;
                      v726 = v722 + v725++;
                      v722 = v726 & (v721 - 1);
                      v724 = *(_QWORD *)(v720 + 16 * v722);
                    }
                    while (v724 != v686);
                    v723 = (uint64_t *)(v720 + 16 * v722);
                  }
                }
                else
                {
LABEL_808:
                  v723 = (uint64_t *)(v720 + 16 * v721);
                }
                v727 = (int8x16_t *)v723[1];
                v729 = v727->i64[0];
                result = v727 + 1;
                v728 = v729;
              }
              else
              {
                v728 = 0;
                result = (int8x16_t *)&byte_1C871356D;
              }
              if ((*(_BYTE *)(v685 + 23) & 0x10) != 0)
              {
                v730 = ***(_QWORD ***)v685;
                v731 = *(_QWORD *)(v730 + 152);
                v732 = *(unsigned int *)(v730 + 168);
                if ((_DWORD)v732)
                {
                  LODWORD(v733) = (v732 - 1) & ((v685 >> 4) ^ (v685 >> 9));
                  v734 = (uint64_t *)(v731 + 16 * v733);
                  v735 = *v734;
                  if (*v734 != v685)
                  {
                    v736 = 1;
                    do
                    {
                      if (v735 == -4096)
                        goto LABEL_817;
                      v737 = v733 + v736++;
                      v733 = v737 & (v732 - 1);
                      v735 = *(_QWORD *)(v731 + 16 * v733);
                    }
                    while (v735 != v685);
                    v734 = (uint64_t *)(v731 + 16 * v733);
                  }
                }
                else
                {
LABEL_817:
                  v734 = (uint64_t *)(v731 + 16 * v732);
                }
                v738 = (_QWORD *)v734[1];
                v741 = *v738;
                v739 = (char *)(v738 + 2);
                v740 = v741;
              }
              else
              {
                v740 = 0;
                v739 = &byte_1C871356D;
              }
              if (v740 >= v728)
                v742 = v728;
              else
                v742 = v740;
              if (v742 && (result = (int8x16_t *)memcmp(result, v739, v742), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_827;
              }
              else if (v728 >= v740)
              {
                goto LABEL_827;
              }
            }
            v688 = v9->i64[0];
            v689 = (v9->i64[0] >> 4) ^ (v9->i64[0] >> 9);
            v690 = (uint64_t *)v9;
            while (1)
            {
              do
              {
                v691 = v690;
                v690 = v684;
                *v691 = *v684;
                v693 = *--v684;
                v692 = v693;
                v694 = *a3;
              }
              while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v688, v693));
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v694 + 16), v692, v688);
              if ((result & 1) != 0)
                break;
              if ((*(_BYTE *)(v688 + 23) & 0x10) != 0)
              {
                v695 = ***(_QWORD ***)v688;
                v696 = *(_QWORD *)(v695 + 152);
                v697 = *(unsigned int *)(v695 + 168);
                if ((_DWORD)v697)
                {
                  LODWORD(v698) = (v697 - 1) & v689;
                  v699 = (uint64_t *)(v696 + 16 * v698);
                  v700 = *v699;
                  if (*v699 != v688)
                  {
                    v701 = 1;
                    do
                    {
                      if (v700 == -4096)
                        goto LABEL_777;
                      v702 = v698 + v701++;
                      v698 = v702 & (v697 - 1);
                      v700 = *(_QWORD *)(v696 + 16 * v698);
                    }
                    while (v700 != v688);
                    v699 = (uint64_t *)(v696 + 16 * v698);
                  }
                }
                else
                {
LABEL_777:
                  v699 = (uint64_t *)(v696 + 16 * v697);
                }
                v703 = (int8x16_t *)v699[1];
                v705 = v703->i64[0];
                result = v703 + 1;
                v704 = v705;
              }
              else
              {
                v704 = 0;
                result = (int8x16_t *)&byte_1C871356D;
              }
              if ((*(_BYTE *)(v692 + 23) & 0x10) != 0)
              {
                v706 = ***(_QWORD ***)v692;
                v707 = *(_QWORD *)(v706 + 152);
                v708 = *(unsigned int *)(v706 + 168);
                if ((_DWORD)v708)
                {
                  LODWORD(v709) = (v708 - 1) & ((v692 >> 4) ^ (v692 >> 9));
                  v710 = (uint64_t *)(v707 + 16 * v709);
                  v711 = *v710;
                  if (*v710 != v692)
                  {
                    v712 = 1;
                    do
                    {
                      if (v711 == -4096)
                        goto LABEL_786;
                      v713 = v709 + v712++;
                      v709 = v713 & (v708 - 1);
                      v711 = *(_QWORD *)(v707 + 16 * v709);
                    }
                    while (v711 != v692);
                    v710 = (uint64_t *)(v707 + 16 * v709);
                  }
                }
                else
                {
LABEL_786:
                  v710 = (uint64_t *)(v707 + 16 * v708);
                }
                v714 = (_QWORD *)v710[1];
                v717 = *v714;
                v715 = (char *)(v714 + 2);
                v716 = v717;
              }
              else
              {
                v716 = 0;
                v715 = &byte_1C871356D;
              }
              if (v716 >= v704)
                v718 = v704;
              else
                v718 = v716;
              if (v718 && (result = (int8x16_t *)memcmp(result, v715, v718), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  break;
              }
              else if (v704 >= v716)
              {
                break;
              }
            }
            *v690 = v688;
LABEL_827:
            v391 = (int8x16_t *)&v9->u64[1];
            if (&v9->u64[1] == (unint64_t *)a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v8 == v7)
            return result;
          v453 = (unint64_t)(v11 - 2) >> 1;
          v850 = v453;
          while (1)
          {
            v454 = v453;
            if (v850 < v453)
              goto LABEL_635;
            v848 = v453;
            v455 = (2 * v453) | 1;
            v456 = &v9->i64[v455];
            v457 = 2 * v453 + 2;
            v458 = v11;
            if (v457 >= v11)
              goto LABEL_538;
            v459 = *v456;
            v460 = v456[1];
            v461 = *a3;
            if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v456, v460))
            {
              if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v461 + 16), v460, v459))
              {
                goto LABEL_538;
              }
              if ((*(_BYTE *)(v459 + 23) & 0x10) != 0)
              {
                v462 = ***(_QWORD ***)v459;
                v463 = *(_QWORD *)(v462 + 152);
                v464 = *(unsigned int *)(v462 + 168);
                if ((_DWORD)v464)
                {
                  LODWORD(v465) = (v464 - 1) & ((v459 >> 4) ^ (v459 >> 9));
                  v466 = (uint64_t *)(v463 + 16 * v465);
                  v467 = *v466;
                  if (*v466 != v459)
                  {
                    v468 = 1;
                    do
                    {
                      if (v467 == -4096)
                        goto LABEL_519;
                      v469 = v465 + v468++;
                      v465 = v469 & (v464 - 1);
                      v467 = *(_QWORD *)(v463 + 16 * v465);
                    }
                    while (v467 != v459);
                    v466 = (uint64_t *)(v463 + 16 * v465);
                  }
                }
                else
                {
LABEL_519:
                  v466 = (uint64_t *)(v463 + 16 * v464);
                }
                v470 = (_QWORD *)v466[1];
                v473 = *v470;
                v471 = (char *)(v470 + 2);
                v472 = v473;
              }
              else
              {
                v472 = 0;
                v471 = &byte_1C871356D;
              }
              if ((*(_BYTE *)(v460 + 23) & 0x10) != 0)
              {
                v474 = ***(_QWORD ***)v460;
                v475 = *(_QWORD *)(v474 + 152);
                v476 = *(unsigned int *)(v474 + 168);
                if ((_DWORD)v476)
                {
                  LODWORD(v477) = (v476 - 1) & ((v460 >> 4) ^ (v460 >> 9));
                  v478 = (uint64_t *)(v475 + 16 * v477);
                  v479 = *v478;
                  if (*v478 != v460)
                  {
                    v480 = 1;
                    do
                    {
                      if (v479 == -4096)
                        goto LABEL_528;
                      v481 = v477 + v480++;
                      v477 = v481 & (v476 - 1);
                      v479 = *(_QWORD *)(v475 + 16 * v477);
                    }
                    while (v479 != v460);
                    v478 = (uint64_t *)(v475 + 16 * v477);
                  }
                }
                else
                {
LABEL_528:
                  v478 = (uint64_t *)(v475 + 16 * v476);
                }
                v482 = (_QWORD *)v478[1];
                v485 = *v482;
                v483 = (char *)(v482 + 2);
                v484 = v485;
              }
              else
              {
                v484 = 0;
                v483 = &byte_1C871356D;
              }
              if (v484 >= v472)
                v486 = v472;
              else
                v486 = v484;
              if (v486 && (v487 = memcmp(v471, v483, v486)) != 0)
              {
                if ((v487 & 0x80000000) == 0)
                  goto LABEL_538;
              }
              else if (v472 >= v484)
              {
                goto LABEL_538;
              }
            }
            ++v456;
            v455 = v457;
LABEL_538:
            v488 = *v456;
            v454 = v848;
            v489 = v9->i64[v848];
            v490 = *a3;
            result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v456, v489);
            v11 = v458;
            if ((result & 1) != 0)
              goto LABEL_635;
            result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v490 + 16), v489, v488);
            v11 = v458;
            if ((result & 1) == 0)
            {
              if ((*(_BYTE *)(v488 + 23) & 0x10) != 0)
              {
                v491 = ***(_QWORD ***)v488;
                v492 = *(_QWORD *)(v491 + 152);
                v493 = *(unsigned int *)(v491 + 168);
                if ((_DWORD)v493)
                {
                  LODWORD(v494) = (v493 - 1) & ((v488 >> 4) ^ (v488 >> 9));
                  v495 = (uint64_t *)(v492 + 16 * v494);
                  v496 = *v495;
                  if (*v495 != v488)
                  {
                    v497 = 1;
                    do
                    {
                      if (v496 == -4096)
                        goto LABEL_547;
                      v498 = v494 + v497++;
                      v494 = v498 & (v493 - 1);
                      v496 = *(_QWORD *)(v492 + 16 * v494);
                    }
                    while (v496 != v488);
                    v495 = (uint64_t *)(v492 + 16 * v494);
                  }
                }
                else
                {
LABEL_547:
                  v495 = (uint64_t *)(v492 + 16 * v493);
                }
                v499 = (int8x16_t *)v495[1];
                v501 = v499->i64[0];
                result = v499 + 1;
                v500 = v501;
                v11 = v458;
              }
              else
              {
                v500 = 0;
                result = (int8x16_t *)&byte_1C871356D;
              }
              if ((*(_BYTE *)(v489 + 23) & 0x10) != 0)
              {
                v502 = ***(_QWORD ***)v489;
                v503 = *(_QWORD *)(v502 + 152);
                v504 = *(unsigned int *)(v502 + 168);
                if ((_DWORD)v504)
                {
                  LODWORD(v505) = (v504 - 1) & ((v489 >> 4) ^ (v489 >> 9));
                  v506 = (uint64_t *)(v503 + 16 * v505);
                  v507 = *v506;
                  if (*v506 != v489)
                  {
                    v508 = 1;
                    do
                    {
                      if (v507 == -4096)
                        goto LABEL_556;
                      v509 = v505 + v508++;
                      v505 = v509 & (v504 - 1);
                      v507 = *(_QWORD *)(v503 + 16 * v505);
                    }
                    while (v507 != v489);
                    v506 = (uint64_t *)(v503 + 16 * v505);
                  }
                }
                else
                {
LABEL_556:
                  v506 = (uint64_t *)(v503 + 16 * v504);
                }
                v510 = (_QWORD *)v506[1];
                v513 = *v510;
                v511 = (char *)(v510 + 2);
                v512 = v513;
                v11 = v458;
              }
              else
              {
                v512 = 0;
                v511 = &byte_1C871356D;
              }
              if (v512 >= v500)
                v514 = v500;
              else
                v514 = v512;
              if (v514 && (result = (int8x16_t *)memcmp(result, v511, v514), v11 = v458, (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                  goto LABEL_635;
              }
              else if (v500 < v512)
              {
                goto LABEL_635;
              }
            }
            v515 = v9->i64[v848];
            v9->i64[v848] = *v456;
            if (v850 < v455)
              goto LABEL_634;
            while (1)
            {
              v855 = v456;
              v516 = 2 * v455;
              v455 = (2 * v455) | 1;
              v456 = &v9->i64[v455];
              v517 = v516 + 2;
              if (v516 + 2 < v11)
              {
                v518 = *v456;
                v519 = v456[1];
                v520 = *a3;
                if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v456, v519))
                {
                  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v520 + 16), v519, v518))
                  {
                    goto LABEL_597;
                  }
                  if ((*(_BYTE *)(v518 + 23) & 0x10) != 0)
                  {
                    v521 = ***(_QWORD ***)v518;
                    v522 = *(_QWORD *)(v521 + 152);
                    v523 = *(unsigned int *)(v521 + 168);
                    if ((_DWORD)v523)
                    {
                      LODWORD(v524) = (v523 - 1) & ((v518 >> 4) ^ (v518 >> 9));
                      v525 = (uint64_t *)(v522 + 16 * v524);
                      v526 = *v525;
                      if (*v525 != v518)
                      {
                        v527 = 1;
                        do
                        {
                          if (v526 == -4096)
                            goto LABEL_578;
                          v528 = v524 + v527++;
                          v524 = v528 & (v523 - 1);
                          v526 = *(_QWORD *)(v522 + 16 * v524);
                        }
                        while (v526 != v518);
                        v525 = (uint64_t *)(v522 + 16 * v524);
                      }
                    }
                    else
                    {
LABEL_578:
                      v525 = (uint64_t *)(v522 + 16 * v523);
                    }
                    v529 = (_QWORD *)v525[1];
                    v532 = *v529;
                    v530 = (char *)(v529 + 2);
                    v531 = v532;
                  }
                  else
                  {
                    v531 = 0;
                    v530 = &byte_1C871356D;
                  }
                  if ((*(_BYTE *)(v519 + 23) & 0x10) != 0)
                  {
                    v533 = ***(_QWORD ***)v519;
                    v534 = *(_QWORD *)(v533 + 152);
                    v535 = *(unsigned int *)(v533 + 168);
                    if ((_DWORD)v535)
                    {
                      LODWORD(v536) = (v535 - 1) & ((v519 >> 4) ^ (v519 >> 9));
                      v537 = (uint64_t *)(v534 + 16 * v536);
                      v538 = *v537;
                      if (*v537 != v519)
                      {
                        v539 = 1;
                        do
                        {
                          if (v538 == -4096)
                            goto LABEL_587;
                          v540 = v536 + v539++;
                          v536 = v540 & (v535 - 1);
                          v538 = *(_QWORD *)(v534 + 16 * v536);
                        }
                        while (v538 != v519);
                        v537 = (uint64_t *)(v534 + 16 * v536);
                      }
                    }
                    else
                    {
LABEL_587:
                      v537 = (uint64_t *)(v534 + 16 * v535);
                    }
                    v541 = (_QWORD *)v537[1];
                    v544 = *v541;
                    v542 = (char *)(v541 + 2);
                    v543 = v544;
                  }
                  else
                  {
                    v543 = 0;
                    v542 = &byte_1C871356D;
                  }
                  if (v543 >= v531)
                    v545 = v531;
                  else
                    v545 = v543;
                  if (v545 && (v546 = memcmp(v530, v542, v545)) != 0)
                  {
                    if ((v546 & 0x80000000) == 0)
                      goto LABEL_597;
                  }
                  else if (v531 >= v543)
                  {
                    goto LABEL_597;
                  }
                }
                ++v456;
                v455 = v517;
              }
LABEL_597:
              v547 = *v456;
              v548 = *a3;
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v456, v515);
              v454 = v848;
              if ((result & 1) != 0)
              {
                v9 = v853;
                v456 = v855;
                goto LABEL_633;
              }
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v548 + 16), v515, v547);
              v9 = v853;
              if ((result & 1) == 0)
              {
                if ((*(_BYTE *)(v547 + 23) & 0x10) != 0)
                {
                  v549 = ***(_QWORD ***)v547;
                  v550 = *(_QWORD *)(v549 + 152);
                  v551 = *(unsigned int *)(v549 + 168);
                  if ((_DWORD)v551)
                  {
                    LODWORD(v552) = (v551 - 1) & ((v547 >> 4) ^ (v547 >> 9));
                    v553 = (uint64_t *)(v550 + 16 * v552);
                    v554 = *v553;
                    if (*v553 != v547)
                    {
                      v555 = 1;
                      do
                      {
                        if (v554 == -4096)
                          goto LABEL_606;
                        v556 = v552 + v555++;
                        v552 = v556 & (v551 - 1);
                        v554 = *(_QWORD *)(v550 + 16 * v552);
                      }
                      while (v554 != v547);
                      v553 = (uint64_t *)(v550 + 16 * v552);
                    }
                  }
                  else
                  {
LABEL_606:
                    v553 = (uint64_t *)(v550 + 16 * v551);
                  }
                  v557 = (int8x16_t *)v553[1];
                  v559 = v557->i64[0];
                  result = v557 + 1;
                  v558 = v559;
                }
                else
                {
                  v558 = 0;
                  result = (int8x16_t *)&byte_1C871356D;
                }
                if ((*(_BYTE *)(v515 + 23) & 0x10) != 0)
                {
                  v560 = ***(_QWORD ***)v515;
                  v561 = *(_QWORD *)(v560 + 152);
                  v562 = *(unsigned int *)(v560 + 168);
                  if ((_DWORD)v562)
                  {
                    LODWORD(v563) = (v562 - 1) & ((v515 >> 4) ^ (v515 >> 9));
                    v564 = (uint64_t *)(v561 + 16 * v563);
                    v565 = *v564;
                    if (*v564 != v515)
                    {
                      v566 = 1;
                      do
                      {
                        if (v565 == -4096)
                          goto LABEL_615;
                        v567 = v563 + v566++;
                        v563 = v567 & (v562 - 1);
                        v565 = *(_QWORD *)(v561 + 16 * v563);
                      }
                      while (v565 != v515);
                      v564 = (uint64_t *)(v561 + 16 * v563);
                    }
                  }
                  else
                  {
LABEL_615:
                    v564 = (uint64_t *)(v561 + 16 * v562);
                  }
                  v568 = (_QWORD *)v564[1];
                  v571 = *v568;
                  v569 = (char *)(v568 + 2);
                  v570 = v571;
                }
                else
                {
                  v570 = 0;
                  v569 = &byte_1C871356D;
                }
                if (v570 >= v558)
                  v572 = v558;
                else
                  v572 = v570;
                if (v572)
                {
                  result = (int8x16_t *)memcmp(result, v569, v572);
                  if ((_DWORD)result)
                  {
                    if ((result & 0x80000000) != 0)
                      break;
                    goto LABEL_625;
                  }
                }
                if (v558 < v570)
                  break;
              }
LABEL_625:
              *v855 = *v456;
              v11 = v458;
              if (v850 < v455)
                goto LABEL_634;
            }
            v456 = v855;
LABEL_633:
            v11 = v458;
LABEL_634:
            *v456 = v515;
LABEL_635:
            v453 = v454 - 1;
            if (!v454)
            {
LABEL_703:
              v627 = (uint64_t *)v9;
              v628 = 0;
              v851 = *v627;
              v629 = (unint64_t)(v11 - 2) >> 1;
              v856 = v11;
              while (1)
              {
                v630 = v627;
                v627 += v628 + 1;
                v631 = 2 * v628;
                v628 = (2 * v628) | 1;
                v632 = v631 + 2;
                if (v631 + 2 < v11)
                {
                  v633 = *v627;
                  v634 = v627[1];
                  v635 = *a3;
                  result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v627, v634);
                  v11 = v856;
                  if ((result & 1) == 0)
                  {
                    result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v635 + 16), v634, v633);
                    if ((result & 1) != 0)
                    {
                      v11 = v856;
                      goto LABEL_735;
                    }
                    if ((*(_BYTE *)(v633 + 23) & 0x10) != 0)
                    {
                      v636 = ***(_QWORD ***)v633;
                      v637 = *(_QWORD *)(v636 + 152);
                      v638 = *(unsigned int *)(v636 + 168);
                      if ((_DWORD)v638)
                      {
                        LODWORD(v639) = (v638 - 1) & ((v633 >> 4) ^ (v633 >> 9));
                        v640 = (uint64_t *)(v637 + 16 * v639);
                        v641 = *v640;
                        if (*v640 != v633)
                        {
                          v642 = 1;
                          do
                          {
                            if (v641 == -4096)
                              goto LABEL_716;
                            v643 = v639 + v642++;
                            v639 = v643 & (v638 - 1);
                            v641 = *(_QWORD *)(v637 + 16 * v639);
                          }
                          while (v641 != v633);
                          v640 = (uint64_t *)(v637 + 16 * v639);
                        }
                      }
                      else
                      {
LABEL_716:
                        v640 = (uint64_t *)(v637 + 16 * v638);
                      }
                      v644 = (int8x16_t *)v640[1];
                      v646 = v644->i64[0];
                      result = v644 + 1;
                      v645 = v646;
                    }
                    else
                    {
                      v645 = 0;
                      result = (int8x16_t *)&byte_1C871356D;
                    }
                    if ((*(_BYTE *)(v634 + 23) & 0x10) != 0)
                    {
                      v647 = ***(_QWORD ***)v634;
                      v648 = *(_QWORD *)(v647 + 152);
                      v649 = *(unsigned int *)(v647 + 168);
                      if ((_DWORD)v649)
                      {
                        LODWORD(v650) = (v649 - 1) & ((v634 >> 4) ^ (v634 >> 9));
                        v651 = (uint64_t *)(v648 + 16 * v650);
                        v652 = *v651;
                        if (*v651 != v634)
                        {
                          v653 = 1;
                          do
                          {
                            if (v652 == -4096)
                              goto LABEL_725;
                            v654 = v650 + v653++;
                            v650 = v654 & (v649 - 1);
                            v652 = *(_QWORD *)(v648 + 16 * v650);
                          }
                          while (v652 != v634);
                          v651 = (uint64_t *)(v648 + 16 * v650);
                        }
                      }
                      else
                      {
LABEL_725:
                        v651 = (uint64_t *)(v648 + 16 * v649);
                      }
                      v655 = (_QWORD *)v651[1];
                      v658 = *v655;
                      v656 = (char *)(v655 + 2);
                      v657 = v658;
                    }
                    else
                    {
                      v657 = 0;
                      v656 = &byte_1C871356D;
                    }
                    if (v657 >= v645)
                      v659 = v645;
                    else
                      v659 = v657;
                    if (v659 && (result = (int8x16_t *)memcmp(result, v656, v659), (_DWORD)result))
                    {
                      v11 = v856;
                      if ((result & 0x80000000) == 0)
                        goto LABEL_735;
                    }
                    else
                    {
                      v11 = v856;
                      if (v645 >= v657)
                        goto LABEL_735;
                    }
                  }
                  ++v627;
                  v628 = v632;
                }
LABEL_735:
                *v630 = *v627;
                if (v628 > v629)
                {
                  v660 = &a2[-1].i64[1];
                  v392 = v627 == (uint64_t *)&a2[-1].u64[1];
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v392)
                  {
                    *v627 = v851;
                  }
                  else
                  {
                    *v627 = *v660;
                    *v660 = v851;
                    v661 = (char *)v627 - (char *)v853 + 8;
                    if (v661 >= 9)
                    {
                      v662 = ((unint64_t)v661 >> 3) - 2;
                      v582 = v662 >> 1;
                      v610 = &v853->i64[v662 >> 1];
                      v663 = *v610;
                      v664 = *v627;
                      v665 = *a3;
                      result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v610, *v627);
                      if ((result & 1) != 0)
                        goto LABEL_742;
                      result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v665 + 16), v664, v663);
                      v11 = v856;
                      if ((result & 1) == 0)
                      {
                        if ((*(_BYTE *)(v663 + 23) & 0x10) != 0)
                        {
                          v573 = ***(_QWORD ***)v663;
                          v574 = *(_QWORD *)(v573 + 152);
                          v575 = *(unsigned int *)(v573 + 168);
                          if ((_DWORD)v575)
                          {
                            LODWORD(v576) = (v575 - 1) & ((v663 >> 4) ^ (v663 >> 9));
                            v577 = (uint64_t *)(v574 + 16 * v576);
                            v578 = *v577;
                            if (*v577 != v663)
                            {
                              v579 = 1;
                              do
                              {
                                if (v578 == -4096)
                                  goto LABEL_681;
                                v580 = v576 + v579++;
                                v576 = v580 & (v575 - 1);
                                v578 = *(_QWORD *)(v574 + 16 * v576);
                              }
                              while (v578 != v663);
                              v577 = (uint64_t *)(v574 + 16 * v576);
                            }
                          }
                          else
                          {
LABEL_681:
                            v577 = (uint64_t *)(v574 + 16 * v575);
                          }
                          v611 = (int8x16_t *)v577[1];
                          v613 = v611->i64[0];
                          result = v611 + 1;
                          v612 = v613;
                        }
                        else
                        {
                          v612 = 0;
                          result = (int8x16_t *)&byte_1C871356D;
                        }
                        if ((*(_BYTE *)(v664 + 23) & 0x10) != 0)
                        {
                          v614 = ***(_QWORD ***)v664;
                          v615 = *(_QWORD *)(v614 + 152);
                          v616 = *(unsigned int *)(v614 + 168);
                          if ((_DWORD)v616)
                          {
                            LODWORD(v617) = (v616 - 1) & ((v664 >> 4) ^ (v664 >> 9));
                            v618 = (uint64_t *)(v615 + 16 * v617);
                            v619 = *v618;
                            if (*v618 != v664)
                            {
                              v620 = 1;
                              do
                              {
                                if (v619 == -4096)
                                  goto LABEL_690;
                                v621 = v617 + v620++;
                                v617 = v621 & (v616 - 1);
                                v619 = *(_QWORD *)(v615 + 16 * v617);
                              }
                              while (v619 != v664);
                              v618 = (uint64_t *)(v615 + 16 * v617);
                            }
                          }
                          else
                          {
LABEL_690:
                            v618 = (uint64_t *)(v615 + 16 * v616);
                          }
                          v622 = (_QWORD *)v618[1];
                          v625 = *v622;
                          v623 = (char *)(v622 + 2);
                          v624 = v625;
                        }
                        else
                        {
                          v624 = 0;
                          v623 = &byte_1C871356D;
                        }
                        if (v624 >= v612)
                          v626 = v612;
                        else
                          v626 = v624;
                        if (v626 && (result = (int8x16_t *)memcmp(result, v623, v626), (_DWORD)result))
                        {
                          v11 = v856;
                          if ((result & 0x80000000) != 0)
                          {
LABEL_742:
                            v666 = *v627;
                            *v627 = *v610;
                            if (v662 >= 2)
                            {
                              do
                              {
                                v581 = v582 - 1;
                                v582 = (v582 - 1) >> 1;
                                v583 = &v853->i64[v582];
                                v584 = *v583;
                                v585 = *a3;
                                result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v583, v666);
                                if ((result & 1) == 0)
                                {
                                  result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v585 + 16), v666, v584);
                                  if ((result & 1) != 0)
                                    goto LABEL_743;
                                  if ((*(_BYTE *)(v584 + 23) & 0x10) != 0)
                                  {
                                    v586 = ***(_QWORD ***)v584;
                                    v587 = *(_QWORD *)(v586 + 152);
                                    v588 = *(unsigned int *)(v586 + 168);
                                    if ((_DWORD)v588)
                                    {
                                      LODWORD(v589) = (v588 - 1) & ((v584 >> 4) ^ (v584 >> 9));
                                      v590 = (uint64_t *)(v587 + 16 * v589);
                                      v591 = *v590;
                                      if (*v590 != v584)
                                      {
                                        v592 = 1;
                                        do
                                        {
                                          if (v591 == -4096)
                                            goto LABEL_658;
                                          v593 = v589 + v592++;
                                          v589 = v593 & (v588 - 1);
                                          v591 = *(_QWORD *)(v587 + 16 * v589);
                                        }
                                        while (v591 != v584);
                                        v590 = (uint64_t *)(v587 + 16 * v589);
                                      }
                                    }
                                    else
                                    {
LABEL_658:
                                      v590 = (uint64_t *)(v587 + 16 * v588);
                                    }
                                    v594 = (int8x16_t *)v590[1];
                                    v596 = v594->i64[0];
                                    result = v594 + 1;
                                    v595 = v596;
                                  }
                                  else
                                  {
                                    v595 = 0;
                                    result = (int8x16_t *)&byte_1C871356D;
                                  }
                                  if ((*(_BYTE *)(v666 + 23) & 0x10) != 0)
                                  {
                                    v597 = ***(_QWORD ***)v666;
                                    v598 = *(_QWORD *)(v597 + 152);
                                    v599 = *(unsigned int *)(v597 + 168);
                                    if ((_DWORD)v599)
                                    {
                                      LODWORD(v600) = (v599 - 1) & ((v666 >> 4) ^ (v666 >> 9));
                                      v601 = (uint64_t *)(v598 + 16 * v600);
                                      v602 = *v601;
                                      if (*v601 != v666)
                                      {
                                        v603 = 1;
                                        do
                                        {
                                          if (v602 == -4096)
                                            goto LABEL_667;
                                          v604 = v600 + v603++;
                                          v600 = v604 & (v599 - 1);
                                          v602 = *(_QWORD *)(v598 + 16 * v600);
                                        }
                                        while (v602 != v666);
                                        v601 = (uint64_t *)(v598 + 16 * v600);
                                      }
                                    }
                                    else
                                    {
LABEL_667:
                                      v601 = (uint64_t *)(v598 + 16 * v599);
                                    }
                                    v605 = (_QWORD *)v601[1];
                                    v608 = *v605;
                                    v606 = (char *)(v605 + 2);
                                    v607 = v608;
                                  }
                                  else
                                  {
                                    v607 = 0;
                                    v606 = &byte_1C871356D;
                                  }
                                  if (v607 >= v595)
                                    v609 = v595;
                                  else
                                    v609 = v607;
                                  if (v609 && (result = (int8x16_t *)memcmp(result, v606, v609), (_DWORD)result))
                                  {
                                    if ((result & 0x80000000) == 0)
                                      goto LABEL_743;
                                  }
                                  else if (v595 >= v607)
                                  {
                                    goto LABEL_743;
                                  }
                                }
                                *v610 = *v583;
                                v610 = &v853->i64[v582];
                              }
                              while (v581 > 1);
                            }
                            else
                            {
LABEL_743:
                              v583 = v610;
                            }
                            *v583 = v666;
                            v11 = v856;
                          }
                        }
                        else
                        {
                          v11 = v856;
                          if (v612 < v624)
                            goto LABEL_742;
                        }
                      }
                    }
                  }
                  v667 = v11-- <= 2;
                  v9 = v853;
                  if (v667)
                    return result;
                  goto LABEL_703;
                }
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8->i64[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          sub_1C5B30A94(&v8->i64[(unint64_t)v11 >> 1], v8->i64, v854, a3);
        }
        else
        {
          sub_1C5B30A94(v8->i64, &v8->i64[(unint64_t)v11 >> 1], v854, a3);
          sub_1C5B30A94(&v8->i64[1], v13 - 1, a2[-1].i64, a3);
          sub_1C5B30A94(v8[1].i64, &v8->i64[v12 + 1], &a2[-2].i64[1], a3);
          sub_1C5B30A94(v13 - 1, v13, &v8->i64[v12 + 1], a3);
          v14 = v8->i64[0];
          v8->i64[0] = *v13;
          *v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v15 = v8[-1].i64[1];
          v16 = v8->i64[0];
          v17 = *a3;
          if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v9[-1].i64[1], v9->i64[0]))
          {
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v17 + 16), v16, v15))
              goto LABEL_36;
            if ((*(_BYTE *)(v15 + 23) & 0x10) != 0)
            {
              v18 = ***(_QWORD ***)v15;
              v19 = *(_QWORD *)(v18 + 152);
              v20 = *(unsigned int *)(v18 + 168);
              if (!(_DWORD)v20)
                goto LABEL_19;
              LODWORD(v21) = (v20 - 1) & ((v15 >> 4) ^ (v15 >> 9));
              v22 = (uint64_t *)(v19 + 16 * v21);
              v23 = *v22;
              if (*v22 != v15)
              {
                v24 = 1;
                while (v23 != -4096)
                {
                  v25 = v21 + v24++;
                  v21 = v25 & (v20 - 1);
                  v23 = *(_QWORD *)(v19 + 16 * v21);
                  if (v23 == v15)
                  {
                    v22 = (uint64_t *)(v19 + 16 * v21);
                    goto LABEL_20;
                  }
                }
LABEL_19:
                v22 = (uint64_t *)(v19 + 16 * v20);
              }
LABEL_20:
              v26 = (_QWORD *)v22[1];
              v29 = *v26;
              v27 = (char *)(v26 + 2);
              v28 = v29;
              goto LABEL_21;
            }
            v28 = 0;
            v27 = &byte_1C871356D;
LABEL_21:
            if ((*(_BYTE *)(v16 + 23) & 0x10) != 0)
            {
              v30 = ***(_QWORD ***)v16;
              v31 = *(_QWORD *)(v30 + 152);
              v32 = *(unsigned int *)(v30 + 168);
              if ((_DWORD)v32)
              {
                LODWORD(v33) = (v32 - 1) & ((v16 >> 4) ^ (v16 >> 9));
                v34 = (uint64_t *)(v31 + 16 * v33);
                v35 = *v34;
                if (*v34 == v16)
                {
LABEL_29:
                  v38 = (_QWORD *)v34[1];
                  v41 = *v38;
                  v39 = (char *)(v38 + 2);
                  v40 = v41;
                  goto LABEL_30;
                }
                v36 = 1;
                while (v35 != -4096)
                {
                  v37 = v33 + v36++;
                  v33 = v37 & (v32 - 1);
                  v35 = *(_QWORD *)(v31 + 16 * v33);
                  if (v35 == v16)
                  {
                    v34 = (uint64_t *)(v31 + 16 * v33);
                    goto LABEL_29;
                  }
                }
              }
              v34 = (uint64_t *)(v31 + 16 * v32);
              goto LABEL_29;
            }
            v40 = 0;
            v39 = &byte_1C871356D;
LABEL_30:
            if (v40 >= v28)
              v42 = v28;
            else
              v42 = v40;
            if (v42 && (v43 = memcmp(v27, v39, v42)) != 0)
            {
              if (v43 < 0)
                goto LABEL_70;
            }
            else if (v28 < v40)
            {
              goto LABEL_70;
            }
LABEL_36:
            v44 = (uint64_t ***)v9->i64[0];
            v45 = *v854;
            v46 = *a3;
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v9->i64[0], *v854))
            {
              goto LABEL_37;
            }
            result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v46 + 16), v45, (uint64_t)v44);
            if ((_DWORD)result)
              goto LABEL_278;
            if ((*((_BYTE *)v44 + 23) & 0x10) != 0)
            {
              v231 = ***v44;
              v232 = *(_QWORD *)(v231 + 152);
              v233 = *(unsigned int *)(v231 + 168);
              if (!(_DWORD)v233)
                goto LABEL_259;
              LODWORD(v234) = (v233 - 1) & ((v44 >> 4) ^ (v44 >> 9));
              v235 = (uint64_t ****)(v232 + 16 * v234);
              v236 = *v235;
              if (*v235 != v44)
              {
                v237 = 1;
                while (v236 != (uint64_t ***)-4096)
                {
                  v238 = v234 + v237++;
                  v234 = v238 & (v233 - 1);
                  v236 = *(uint64_t ****)(v232 + 16 * v234);
                  if (v236 == v44)
                  {
                    v235 = (uint64_t ****)(v232 + 16 * v234);
                    goto LABEL_260;
                  }
                }
LABEL_259:
                v235 = (uint64_t ****)(v232 + 16 * v233);
              }
LABEL_260:
              v239 = (int8x16_t *)v235[1];
              v241 = v239->i64[0];
              result = v239 + 1;
              v240 = v241;
              goto LABEL_261;
            }
            v240 = 0;
            result = (int8x16_t *)&byte_1C871356D;
LABEL_261:
            if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
            {
              v242 = ***(_QWORD ***)v45;
              v243 = *(_QWORD *)(v242 + 152);
              v244 = *(unsigned int *)(v242 + 168);
              if ((_DWORD)v244)
              {
                LODWORD(v245) = (v244 - 1) & ((v45 >> 4) ^ (v45 >> 9));
                v246 = (uint64_t *)(v243 + 16 * v245);
                v247 = *v246;
                if (*v246 == v45)
                {
LABEL_269:
                  v250 = (_QWORD *)v246[1];
                  v253 = *v250;
                  v251 = (char *)(v250 + 2);
                  v252 = v253;
                  goto LABEL_270;
                }
                v248 = 1;
                while (v247 != -4096)
                {
                  v249 = v245 + v248++;
                  v245 = v249 & (v244 - 1);
                  v247 = *(_QWORD *)(v243 + 16 * v245);
                  if (v247 == v45)
                  {
                    v246 = (uint64_t *)(v243 + 16 * v245);
                    goto LABEL_269;
                  }
                }
              }
              v246 = (uint64_t *)(v243 + 16 * v244);
              goto LABEL_269;
            }
            v252 = 0;
            v251 = &byte_1C871356D;
LABEL_270:
            if (v252 >= v240)
              v254 = v240;
            else
              v254 = v252;
            if (v254 && (result = (int8x16_t *)memcmp(result, v251, v254), (_DWORD)result))
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_37;
            }
            else if (v240 < v252)
            {
LABEL_37:
              v8 = (int8x16_t *)&v9->u64[1];
              v47 = v9->i64[1];
              v48 = (uint64_t *)(*a3 + 16);
              result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v48, (uint64_t)v44, v47);
              if ((result & 1) == 0)
              {
                while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v48, v47, (uint64_t)v44))
                {
LABEL_65:
                  v73 = v8->i64[1];
                  v8 = (int8x16_t *)((char *)v8 + 8);
                  v47 = v73;
                  v48 = (uint64_t *)(*a3 + 16);
                  result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v48, (uint64_t)v44, v73);
                  if ((result & 1) != 0)
                    goto LABEL_311;
                }
                if ((*((_BYTE *)v44 + 23) & 0x10) == 0)
                {
                  v58 = 0;
                  result = (int8x16_t *)&byte_1C871356D;
LABEL_48:
                  if ((*(_BYTE *)(v47 + 23) & 0x10) == 0)
                  {
                    v70 = 0;
                    v69 = &byte_1C871356D;
LABEL_57:
                    if (v70 >= v58)
                      v72 = v58;
                    else
                      v72 = v70;
                    if (v72 && (result = (int8x16_t *)memcmp(result, v69, v72), (_DWORD)result))
                    {
                      if ((result & 0x80000000) != 0)
                        goto LABEL_311;
                    }
                    else if (v58 < v70)
                    {
                      goto LABEL_311;
                    }
                    goto LABEL_65;
                  }
                  v60 = ***(_QWORD ***)v47;
                  v61 = *(_QWORD *)(v60 + 152);
                  v62 = *(unsigned int *)(v60 + 168);
                  if ((_DWORD)v62)
                  {
                    LODWORD(v63) = (v62 - 1) & ((v47 >> 4) ^ (v47 >> 9));
                    v64 = (uint64_t *)(v61 + 16 * v63);
                    v65 = *v64;
                    if (*v64 == v47)
                    {
LABEL_56:
                      v68 = (_QWORD *)v64[1];
                      v71 = *v68;
                      v69 = (char *)(v68 + 2);
                      v70 = v71;
                      goto LABEL_57;
                    }
                    v66 = 1;
                    while (v65 != -4096)
                    {
                      v67 = v63 + v66++;
                      v63 = v67 & (v62 - 1);
                      v65 = *(_QWORD *)(v61 + 16 * v63);
                      if (v65 == v47)
                      {
                        v64 = (uint64_t *)(v61 + 16 * v63);
                        goto LABEL_56;
                      }
                    }
                  }
                  v64 = (uint64_t *)(v61 + 16 * v62);
                  goto LABEL_56;
                }
                v49 = ***v44;
                v50 = *(_QWORD *)(v49 + 152);
                v51 = *(unsigned int *)(v49 + 168);
                if ((_DWORD)v51)
                {
                  LODWORD(v52) = (v51 - 1) & ((v44 >> 4) ^ (v44 >> 9));
                  v53 = (uint64_t ****)(v50 + 16 * v52);
                  v54 = *v53;
                  if (*v53 == v44)
                  {
LABEL_47:
                    v57 = (int8x16_t *)v53[1];
                    v59 = v57->i64[0];
                    result = v57 + 1;
                    v58 = v59;
                    goto LABEL_48;
                  }
                  v55 = 1;
                  while (v54 != (uint64_t ***)-4096)
                  {
                    v56 = v52 + v55++;
                    v52 = v56 & (v51 - 1);
                    v54 = *(uint64_t ****)(v50 + 16 * v52);
                    if (v54 == v44)
                    {
                      v53 = (uint64_t ****)(v50 + 16 * v52);
                      goto LABEL_47;
                    }
                  }
                }
                v53 = (uint64_t ****)(v50 + 16 * v51);
                goto LABEL_47;
              }
              goto LABEL_311;
            }
LABEL_278:
            v8 = (int8x16_t *)&v9->u64[1];
            if (&v9->u64[1] < (unint64_t *)a2)
            {
              while (1)
              {
                v255 = v8->i64[0];
                v256 = *a3;
                result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), (uint64_t)v44, v8->i64[0]);
                if ((result & 1) != 0)
                  goto LABEL_311;
                result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v256 + 16), v255, (uint64_t)v44);
                if ((result & 1) == 0)
                  break;
LABEL_307:
                v8 = (int8x16_t *)((char *)v8 + 8);
                if (v8 >= a2)
                  goto LABEL_311;
              }
              if ((*((_BYTE *)v44 + 23) & 0x10) == 0)
              {
                v266 = 0;
                result = (int8x16_t *)&byte_1C871356D;
LABEL_290:
                if ((*(_BYTE *)(v255 + 23) & 0x10) == 0)
                {
                  v278 = 0;
                  v277 = &byte_1C871356D;
LABEL_299:
                  if (v278 >= v266)
                    v280 = v266;
                  else
                    v280 = v278;
                  if (v280 && (result = (int8x16_t *)memcmp(result, v277, v280), (_DWORD)result))
                  {
                    if ((result & 0x80000000) != 0)
                      goto LABEL_311;
                  }
                  else if (v266 < v278)
                  {
                    goto LABEL_311;
                  }
                  goto LABEL_307;
                }
                v268 = ***(_QWORD ***)v255;
                v269 = *(_QWORD *)(v268 + 152);
                v270 = *(unsigned int *)(v268 + 168);
                if ((_DWORD)v270)
                {
                  LODWORD(v271) = (v270 - 1) & ((v255 >> 4) ^ (v255 >> 9));
                  v272 = (uint64_t *)(v269 + 16 * v271);
                  v273 = *v272;
                  if (*v272 == v255)
                  {
LABEL_298:
                    v276 = (_QWORD *)v272[1];
                    v279 = *v276;
                    v277 = (char *)(v276 + 2);
                    v278 = v279;
                    goto LABEL_299;
                  }
                  v274 = 1;
                  while (v273 != -4096)
                  {
                    v275 = v271 + v274++;
                    v271 = v275 & (v270 - 1);
                    v273 = *(_QWORD *)(v269 + 16 * v271);
                    if (v273 == v255)
                    {
                      v272 = (uint64_t *)(v269 + 16 * v271);
                      goto LABEL_298;
                    }
                  }
                }
                v272 = (uint64_t *)(v269 + 16 * v270);
                goto LABEL_298;
              }
              v257 = ***v44;
              v258 = *(_QWORD *)(v257 + 152);
              v259 = *(unsigned int *)(v257 + 168);
              if ((_DWORD)v259)
              {
                LODWORD(v260) = (v259 - 1) & ((v44 >> 4) ^ (v44 >> 9));
                v261 = (uint64_t ****)(v258 + 16 * v260);
                v262 = *v261;
                if (*v261 == v44)
                {
LABEL_289:
                  v265 = (int8x16_t *)v261[1];
                  v267 = v265->i64[0];
                  result = v265 + 1;
                  v266 = v267;
                  goto LABEL_290;
                }
                v263 = 1;
                while (v262 != (uint64_t ***)-4096)
                {
                  v264 = v260 + v263++;
                  v260 = v264 & (v259 - 1);
                  v262 = *(uint64_t ****)(v258 + 16 * v260);
                  if (v262 == v44)
                  {
                    v261 = (uint64_t ****)(v258 + 16 * v260);
                    goto LABEL_289;
                  }
                }
              }
              v261 = (uint64_t ****)(v258 + 16 * v259);
              goto LABEL_289;
            }
LABEL_311:
            v281 = a2;
            if (v8 < a2)
            {
              v281 = a2;
              while (1)
              {
                do
                {
                  v283 = v281[-1].i64[1];
                  v281 = (int8x16_t *)((char *)v281 - 8);
                  v282 = v283;
                  v284 = *a3;
                }
                while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), (uint64_t)v44, v283));
                result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v284 + 16), v282, (uint64_t)v44);
                if ((result & 1) != 0)
                  goto LABEL_344;
                if ((*((_BYTE *)v44 + 23) & 0x10) != 0)
                  break;
                v294 = 0;
                result = (int8x16_t *)&byte_1C871356D;
LABEL_324:
                if ((*(_BYTE *)(v282 + 23) & 0x10) == 0)
                {
                  v306 = 0;
                  v305 = &byte_1C871356D;
                  goto LABEL_333;
                }
                v296 = ***(_QWORD ***)v282;
                v297 = *(_QWORD *)(v296 + 152);
                v298 = *(unsigned int *)(v296 + 168);
                if (!(_DWORD)v298)
                  goto LABEL_331;
                LODWORD(v299) = (v298 - 1) & ((v282 >> 4) ^ (v282 >> 9));
                v300 = (uint64_t *)(v297 + 16 * v299);
                v301 = *v300;
                if (*v300 != v282)
                {
                  v302 = 1;
                  while (v301 != -4096)
                  {
                    v303 = v299 + v302++;
                    v299 = v303 & (v298 - 1);
                    v301 = *(_QWORD *)(v297 + 16 * v299);
                    if (v301 == v282)
                    {
                      v300 = (uint64_t *)(v297 + 16 * v299);
                      goto LABEL_332;
                    }
                  }
LABEL_331:
                  v300 = (uint64_t *)(v297 + 16 * v298);
                }
LABEL_332:
                v304 = (_QWORD *)v300[1];
                v307 = *v304;
                v305 = (char *)(v304 + 2);
                v306 = v307;
LABEL_333:
                if (v306 >= v294)
                  v308 = v294;
                else
                  v308 = v306;
                if (v308 && (result = (int8x16_t *)memcmp(result, v305, v308), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_344;
                }
                else if (v294 >= v306)
                {
                  goto LABEL_344;
                }
              }
              v285 = ***v44;
              v286 = *(_QWORD *)(v285 + 152);
              v287 = *(unsigned int *)(v285 + 168);
              if ((_DWORD)v287)
              {
                LODWORD(v288) = (v287 - 1) & ((v44 >> 4) ^ (v44 >> 9));
                v289 = (uint64_t ****)(v286 + 16 * v288);
                v290 = *v289;
                if (*v289 == v44)
                {
LABEL_323:
                  v293 = (int8x16_t *)v289[1];
                  v295 = v293->i64[0];
                  result = v293 + 1;
                  v294 = v295;
                  goto LABEL_324;
                }
                v291 = 1;
                while (v290 != (uint64_t ***)-4096)
                {
                  v292 = v288 + v291++;
                  v288 = v292 & (v287 - 1);
                  v290 = *(uint64_t ****)(v286 + 16 * v288);
                  if (v290 == v44)
                  {
                    v289 = (uint64_t ****)(v286 + 16 * v288);
                    goto LABEL_323;
                  }
                }
              }
              v289 = (uint64_t ****)(v286 + 16 * v287);
              goto LABEL_323;
            }
LABEL_344:
            if (v8 >= v281)
              goto LABEL_410;
            v309 = (v44 >> 4) ^ (v44 >> 9);
            do
            {
              v310 = v8->i64[0];
              v8->i64[0] = v281->i64[0];
              v281->i64[0] = v310;
              v312 = v8->i64[1];
              v8 = (int8x16_t *)((char *)v8 + 8);
              v311 = v312;
              v313 = (uint64_t *)(*a3 + 16);
              if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v313, (uint64_t)v44, v312))
                goto LABEL_347;
              do
              {
                if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v313, v311, (uint64_t)v44))
                  goto LABEL_405;
                if ((*((_BYTE *)v44 + 23) & 0x10) != 0)
                {
                  v341 = ***v44;
                  v342 = *(_QWORD *)(v341 + 152);
                  v343 = *(unsigned int *)(v341 + 168);
                  if (!(_DWORD)v343)
                    goto LABEL_386;
                  LODWORD(v344) = (v343 - 1) & v309;
                  v345 = (uint64_t ****)(v342 + 16 * v344);
                  v346 = *v345;
                  if (*v345 != v44)
                  {
                    v347 = 1;
                    while (v346 != (uint64_t ***)-4096)
                    {
                      v348 = v344 + v347++;
                      v344 = v348 & (v343 - 1);
                      v346 = *(uint64_t ****)(v342 + 16 * v344);
                      if (v346 == v44)
                      {
                        v345 = (uint64_t ****)(v342 + 16 * v344);
                        goto LABEL_387;
                      }
                    }
LABEL_386:
                    v345 = (uint64_t ****)(v342 + 16 * v343);
                  }
LABEL_387:
                  v349 = v345[1];
                  v352 = (size_t)*v349;
                  v350 = (char *)(v349 + 2);
                  v351 = v352;
                  goto LABEL_388;
                }
                v351 = 0;
                v350 = &byte_1C871356D;
LABEL_388:
                if ((*(_BYTE *)(v311 + 23) & 0x10) != 0)
                {
                  v353 = ***(_QWORD ***)v311;
                  v354 = *(_QWORD *)(v353 + 152);
                  v355 = *(unsigned int *)(v353 + 168);
                  if ((_DWORD)v355)
                  {
                    LODWORD(v356) = (v355 - 1) & ((v311 >> 4) ^ (v311 >> 9));
                    v357 = (uint64_t *)(v354 + 16 * v356);
                    v358 = *v357;
                    if (*v357 == v311)
                    {
LABEL_396:
                      v361 = (_QWORD *)v357[1];
                      v364 = *v361;
                      v362 = (char *)(v361 + 2);
                      v363 = v364;
                      goto LABEL_397;
                    }
                    v359 = 1;
                    while (v358 != -4096)
                    {
                      v360 = v356 + v359++;
                      v356 = v360 & (v355 - 1);
                      v358 = *(_QWORD *)(v354 + 16 * v356);
                      if (v358 == v311)
                      {
                        v357 = (uint64_t *)(v354 + 16 * v356);
                        goto LABEL_396;
                      }
                    }
                  }
                  v357 = (uint64_t *)(v354 + 16 * v355);
                  goto LABEL_396;
                }
                v363 = 0;
                v362 = &byte_1C871356D;
LABEL_397:
                if (v363 >= v351)
                  v365 = v351;
                else
                  v365 = v363;
                if (v365 && (v366 = memcmp(v350, v362, v365)) != 0)
                {
                  if (v366 < 0)
                    goto LABEL_347;
                }
                else if (v351 < v363)
                {
                  goto LABEL_347;
                }
LABEL_405:
                v367 = v8->i64[1];
                v8 = (int8x16_t *)((char *)v8 + 8);
                v311 = v367;
                v313 = (uint64_t *)(*a3 + 16);
              }
              while (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v313, (uint64_t)v44, v367));
              while (1)
              {
                do
                {
LABEL_347:
                  v315 = v281[-1].i64[1];
                  v281 = (int8x16_t *)((char *)v281 - 8);
                  v314 = v315;
                  v316 = *a3;
                }
                while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), (uint64_t)v44, v315));
                result = (int8x16_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v316 + 16), v314, (uint64_t)v44);
                if ((result & 1) != 0)
                  break;
                if ((*((_BYTE *)v44 + 23) & 0x10) != 0)
                {
                  v317 = ***v44;
                  v318 = *(_QWORD *)(v317 + 152);
                  v319 = *(unsigned int *)(v317 + 168);
                  if (!(_DWORD)v319)
                    goto LABEL_356;
                  LODWORD(v320) = (v319 - 1) & v309;
                  v321 = (uint64_t ****)(v318 + 16 * v320);
                  v322 = *v321;
                  if (*v321 != v44)
                  {
                    v323 = 1;
                    while (v322 != (uint64_t ***)-4096)
                    {
                      v324 = v320 + v323++;
                      v320 = v324 & (v319 - 1);
                      v322 = *(uint64_t ****)(v318 + 16 * v320);
                      if (v322 == v44)
                      {
                        v321 = (uint64_t ****)(v318 + 16 * v320);
                        goto LABEL_357;
                      }
                    }
LABEL_356:
                    v321 = (uint64_t ****)(v318 + 16 * v319);
                  }
LABEL_357:
                  v325 = (int8x16_t *)v321[1];
                  v327 = v325->i64[0];
                  result = v325 + 1;
                  v326 = v327;
                  goto LABEL_358;
                }
                v326 = 0;
                result = (int8x16_t *)&byte_1C871356D;
LABEL_358:
                if ((*(_BYTE *)(v314 + 23) & 0x10) == 0)
                {
                  v338 = 0;
                  v337 = &byte_1C871356D;
                  goto LABEL_367;
                }
                v328 = ***(_QWORD ***)v314;
                v329 = *(_QWORD *)(v328 + 152);
                v330 = *(unsigned int *)(v328 + 168);
                if (!(_DWORD)v330)
                  goto LABEL_365;
                LODWORD(v331) = (v330 - 1) & ((v314 >> 4) ^ (v314 >> 9));
                v332 = (uint64_t *)(v329 + 16 * v331);
                v333 = *v332;
                if (*v332 != v314)
                {
                  v334 = 1;
                  while (v333 != -4096)
                  {
                    v335 = v331 + v334++;
                    v331 = v335 & (v330 - 1);
                    v333 = *(_QWORD *)(v329 + 16 * v331);
                    if (v333 == v314)
                    {
                      v332 = (uint64_t *)(v329 + 16 * v331);
                      goto LABEL_366;
                    }
                  }
LABEL_365:
                  v332 = (uint64_t *)(v329 + 16 * v330);
                }
LABEL_366:
                v336 = (_QWORD *)v332[1];
                v339 = *v336;
                v337 = (char *)(v336 + 2);
                v338 = v339;
LABEL_367:
                if (v338 >= v326)
                  v340 = v326;
                else
                  v340 = v338;
                if (v340 && (result = (int8x16_t *)memcmp(result, v337, v340), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    break;
                }
                else if (v326 >= v338)
                {
                  break;
                }
              }
            }
            while (v8 < v281);
LABEL_410:
            v368 = &v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)v853)
              v853->i64[0] = *v368;
            a5 = 0;
            *v368 = (uint64_t)v44;
            v7 = a2;
            continue;
          }
        }
LABEL_70:
        v74 = (uint64_t ***)v9->i64[0];
        v75 = v9;
        v76 = (v9->i64[0] >> 4) ^ (v9->i64[0] >> 9);
        while (1)
        {
          do
          {
            v77 = v75;
            v79 = v75->i64[1];
            v75 = (int8x16_t *)((char *)v75 + 8);
            v78 = v79;
            v80 = *a3;
          }
          while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v79, (uint64_t)v74));
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v80 + 16), (uint64_t)v74, v78))
          {
            break;
          }
          if ((*(_BYTE *)(v78 + 23) & 0x10) != 0)
          {
            v81 = ***(_QWORD ***)v78;
            v82 = *(_QWORD *)(v81 + 152);
            v83 = *(unsigned int *)(v81 + 168);
            if (!(_DWORD)v83)
              goto LABEL_80;
            LODWORD(v84) = (v83 - 1) & ((v78 >> 4) ^ (v78 >> 9));
            v85 = (uint64_t *)(v82 + 16 * v84);
            v86 = *v85;
            if (*v85 != v78)
            {
              v87 = 1;
              while (v86 != -4096)
              {
                v88 = v84 + v87++;
                v84 = v88 & (v83 - 1);
                v86 = *(_QWORD *)(v82 + 16 * v84);
                if (v86 == v78)
                {
                  v85 = (uint64_t *)(v82 + 16 * v84);
                  goto LABEL_81;
                }
              }
LABEL_80:
              v85 = (uint64_t *)(v82 + 16 * v83);
            }
LABEL_81:
            v89 = (_QWORD *)v85[1];
            v92 = *v89;
            v90 = (char *)(v89 + 2);
            v91 = v92;
            goto LABEL_82;
          }
          v91 = 0;
          v90 = &byte_1C871356D;
LABEL_82:
          if ((*((_BYTE *)v74 + 23) & 0x10) == 0)
          {
            v103 = 0;
            v102 = &byte_1C871356D;
            goto LABEL_91;
          }
          v93 = ***v74;
          v94 = *(_QWORD *)(v93 + 152);
          v95 = *(unsigned int *)(v93 + 168);
          if (!(_DWORD)v95)
            goto LABEL_89;
          LODWORD(v96) = (v95 - 1) & v76;
          v97 = (uint64_t ****)(v94 + 16 * v96);
          v98 = *v97;
          if (*v97 != v74)
          {
            v99 = 1;
            while (v98 != (uint64_t ***)-4096)
            {
              v100 = v96 + v99++;
              v96 = v100 & (v95 - 1);
              v98 = *(uint64_t ****)(v94 + 16 * v96);
              if (v98 == v74)
              {
                v97 = (uint64_t ****)(v94 + 16 * v96);
                goto LABEL_90;
              }
            }
LABEL_89:
            v97 = (uint64_t ****)(v94 + 16 * v95);
          }
LABEL_90:
          v101 = v97[1];
          v104 = (size_t)*v101;
          v102 = (char *)(v101 + 2);
          v103 = v104;
LABEL_91:
          if (v103 >= v91)
            v105 = v91;
          else
            v105 = v103;
          if (v105 && (v106 = memcmp(v90, v102, v105)) != 0)
          {
            if ((v106 & 0x80000000) == 0)
              break;
          }
          else if (v91 >= v103)
          {
            break;
          }
        }
        if (v77 == v853)
        {
          v107 = a2;
          if (v75 >= a2)
            goto LABEL_138;
          v107 = (int8x16_t *)((char *)a2 - 8);
          v137 = *v854;
          v138 = (uint64_t *)(*a3 + 16);
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v138, *v854, (uint64_t)v74))
            goto LABEL_138;
          v107 = (int8x16_t *)((char *)a2 - 8);
          while (1)
          {
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v138, (uint64_t)v74, v137))
            {
              if (v75 >= v107)
                goto LABEL_138;
              goto LABEL_245;
            }
            if ((*(_BYTE *)(v137 + 23) & 0x10) != 0)
              break;
            v213 = 0;
            v212 = &byte_1C871356D;
LABEL_226:
            if ((*((_BYTE *)v74 + 23) & 0x10) != 0)
            {
              v215 = ***v74;
              v216 = *(_QWORD *)(v215 + 152);
              v217 = *(unsigned int *)(v215 + 168);
              if (!(_DWORD)v217)
                goto LABEL_233;
              LODWORD(v218) = (v217 - 1) & v76;
              v219 = (uint64_t ****)(v216 + 16 * v218);
              v220 = *v219;
              if (*v219 != v74)
              {
                v221 = 1;
                while (v220 != (uint64_t ***)-4096)
                {
                  v222 = v218 + v221++;
                  v218 = v222 & (v217 - 1);
                  v220 = *(uint64_t ****)(v216 + 16 * v218);
                  if (v220 == v74)
                  {
                    v219 = (uint64_t ****)(v216 + 16 * v218);
                    goto LABEL_234;
                  }
                }
LABEL_233:
                v219 = (uint64_t ****)(v216 + 16 * v217);
              }
LABEL_234:
              v223 = v219[1];
              v226 = (size_t)*v223;
              v224 = (char *)(v223 + 2);
              v225 = v226;
              goto LABEL_235;
            }
            v225 = 0;
            v224 = &byte_1C871356D;
LABEL_235:
            if (v225 >= v213)
              v227 = v213;
            else
              v227 = v225;
            if (v227 && (v228 = memcmp(v212, v224, v227)) != 0)
            {
              v229 = v228 >= 0;
            }
            else
            {
              if (v213 < v225)
                goto LABEL_138;
              v229 = 1;
            }
            if (v75 >= v107 || !v229)
              goto LABEL_138;
LABEL_245:
            v230 = v107[-1].i64[1];
            v107 = (int8x16_t *)((char *)v107 - 8);
            v137 = v230;
            v138 = (uint64_t *)(*a3 + 16);
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v138, v230, (uint64_t)v74))
              goto LABEL_138;
          }
          v203 = ***(_QWORD ***)v137;
          v204 = *(_QWORD *)(v203 + 152);
          v205 = *(unsigned int *)(v203 + 168);
          if ((_DWORD)v205)
          {
            LODWORD(v206) = (v205 - 1) & ((v137 >> 4) ^ (v137 >> 9));
            v207 = (uint64_t *)(v204 + 16 * v206);
            v208 = *v207;
            if (*v207 == v137)
            {
LABEL_225:
              v211 = (_QWORD *)v207[1];
              v214 = *v211;
              v212 = (char *)(v211 + 2);
              v213 = v214;
              goto LABEL_226;
            }
            v209 = 1;
            while (v208 != -4096)
            {
              v210 = v206 + v209++;
              v206 = v210 & (v205 - 1);
              v208 = *(_QWORD *)(v204 + 16 * v206);
              if (v208 == v137)
              {
                v207 = (uint64_t *)(v204 + 16 * v206);
                goto LABEL_225;
              }
            }
          }
          v207 = (uint64_t *)(v204 + 16 * v205);
          goto LABEL_225;
        }
        v107 = (int8x16_t *)((char *)a2 - 8);
        v108 = *v854;
        v109 = (uint64_t *)(*a3 + 16);
        if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v109, *v854, (uint64_t)v74))
        {
          v107 = (int8x16_t *)((char *)a2 - 8);
          while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v109, (uint64_t)v74, v108))
          {
LABEL_132:
            v136 = v107[-1].i64[1];
            v107 = (int8x16_t *)((char *)v107 - 8);
            v108 = v136;
            v109 = (uint64_t *)(*a3 + 16);
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v109, v136, (uint64_t)v74))
              goto LABEL_138;
          }
          if ((*(_BYTE *)(v108 + 23) & 0x10) != 0)
          {
            v110 = ***(_QWORD ***)v108;
            v111 = *(_QWORD *)(v110 + 152);
            v112 = *(unsigned int *)(v110 + 168);
            if (!(_DWORD)v112)
              goto LABEL_113;
            LODWORD(v113) = (v112 - 1) & ((v108 >> 4) ^ (v108 >> 9));
            v114 = (uint64_t *)(v111 + 16 * v113);
            v115 = *v114;
            if (*v114 != v108)
            {
              v116 = 1;
              while (v115 != -4096)
              {
                v117 = v113 + v116++;
                v113 = v117 & (v112 - 1);
                v115 = *(_QWORD *)(v111 + 16 * v113);
                if (v115 == v108)
                {
                  v114 = (uint64_t *)(v111 + 16 * v113);
                  goto LABEL_114;
                }
              }
LABEL_113:
              v114 = (uint64_t *)(v111 + 16 * v112);
            }
LABEL_114:
            v118 = (_QWORD *)v114[1];
            v121 = *v118;
            v119 = (char *)(v118 + 2);
            v120 = v121;
          }
          else
          {
            v120 = 0;
            v119 = &byte_1C871356D;
          }
          if ((*((_BYTE *)v74 + 23) & 0x10) != 0)
          {
            v122 = ***v74;
            v123 = *(_QWORD *)(v122 + 152);
            v124 = *(unsigned int *)(v122 + 168);
            if (!(_DWORD)v124)
              goto LABEL_122;
            LODWORD(v125) = (v124 - 1) & v76;
            v126 = (uint64_t ****)(v123 + 16 * v125);
            v127 = *v126;
            if (*v126 != v74)
            {
              v128 = 1;
              while (v127 != (uint64_t ***)-4096)
              {
                v129 = v125 + v128++;
                v125 = v129 & (v124 - 1);
                v127 = *(uint64_t ****)(v123 + 16 * v125);
                if (v127 == v74)
                {
                  v126 = (uint64_t ****)(v123 + 16 * v125);
                  goto LABEL_123;
                }
              }
LABEL_122:
              v126 = (uint64_t ****)(v123 + 16 * v124);
            }
LABEL_123:
            v130 = v126[1];
            v133 = (size_t)*v130;
            v131 = (char *)(v130 + 2);
            v132 = v133;
          }
          else
          {
            v132 = 0;
            v131 = &byte_1C871356D;
          }
          if (v132 >= v120)
            v134 = v120;
          else
            v134 = v132;
          if (v134 && (v135 = memcmp(v119, v131, v134)) != 0)
          {
            if (v135 < 0)
              goto LABEL_138;
          }
          else if (v120 < v132)
          {
            goto LABEL_138;
          }
          goto LABEL_132;
        }
LABEL_138:
        v8 = v75;
        if (v75 >= v107)
          goto LABEL_206;
        v139 = v107;
        while (2)
        {
          v140 = v8->i64[0];
          v8->i64[0] = v139->i64[0];
          v139->i64[0] = v140;
          do
          {
LABEL_141:
            v142 = v8->i64[1];
            v8 = (int8x16_t *)((char *)v8 + 8);
            v141 = v142;
            v143 = *a3;
          }
          while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v142, (uint64_t)v74));
          if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v143 + 16), (uint64_t)v74, v141))
          {
            if ((*(_BYTE *)(v141 + 23) & 0x10) != 0)
            {
              v144 = ***(_QWORD ***)v141;
              v145 = *(_QWORD *)(v144 + 152);
              v146 = *(unsigned int *)(v144 + 168);
              if (!(_DWORD)v146)
                goto LABEL_150;
              LODWORD(v147) = (v146 - 1) & ((v141 >> 4) ^ (v141 >> 9));
              v148 = (uint64_t *)(v145 + 16 * v147);
              v149 = *v148;
              if (*v148 != v141)
              {
                v150 = 1;
                while (v149 != -4096)
                {
                  v151 = v147 + v150++;
                  v147 = v151 & (v146 - 1);
                  v149 = *(_QWORD *)(v145 + 16 * v147);
                  if (v149 == v141)
                  {
                    v148 = (uint64_t *)(v145 + 16 * v147);
                    goto LABEL_151;
                  }
                }
LABEL_150:
                v148 = (uint64_t *)(v145 + 16 * v146);
              }
LABEL_151:
              v152 = (_QWORD *)v148[1];
              v155 = *v152;
              v153 = (char *)(v152 + 2);
              v154 = v155;
            }
            else
            {
              v154 = 0;
              v153 = &byte_1C871356D;
            }
            if ((*((_BYTE *)v74 + 23) & 0x10) != 0)
            {
              v156 = ***v74;
              v157 = *(_QWORD *)(v156 + 152);
              v158 = *(unsigned int *)(v156 + 168);
              if (!(_DWORD)v158)
                goto LABEL_159;
              LODWORD(v159) = (v158 - 1) & v76;
              v160 = (uint64_t ****)(v157 + 16 * v159);
              v161 = *v160;
              if (*v160 != v74)
              {
                v162 = 1;
                while (v161 != (uint64_t ***)-4096)
                {
                  v163 = v159 + v162++;
                  v159 = v163 & (v158 - 1);
                  v161 = *(uint64_t ****)(v157 + 16 * v159);
                  if (v161 == v74)
                  {
                    v160 = (uint64_t ****)(v157 + 16 * v159);
                    goto LABEL_160;
                  }
                }
LABEL_159:
                v160 = (uint64_t ****)(v157 + 16 * v158);
              }
LABEL_160:
              v164 = v160[1];
              v167 = (size_t)*v164;
              v165 = (char *)(v164 + 2);
              v166 = v167;
            }
            else
            {
              v166 = 0;
              v165 = &byte_1C871356D;
            }
            if (v166 >= v154)
              v168 = v154;
            else
              v168 = v166;
            if (v168 && (v169 = memcmp(v153, v165, v168)) != 0)
            {
              if ((v169 & 0x80000000) == 0)
                goto LABEL_172;
            }
            else if (v154 >= v166)
            {
              goto LABEL_172;
            }
            goto LABEL_141;
          }
LABEL_172:
          v171 = v139[-1].i64[1];
          v139 = (int8x16_t *)((char *)v139 - 8);
          v170 = v171;
          v172 = (uint64_t *)(*a3 + 16);
          if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v172, v171, (uint64_t)v74))
          {
            while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v172, (uint64_t)v74, v170))
            {
LABEL_202:
              v199 = v139[-1].i64[1];
              v139 = (int8x16_t *)((char *)v139 - 8);
              v170 = v199;
              v172 = (uint64_t *)(*a3 + 16);
              if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*v172, v199, (uint64_t)v74))
                goto LABEL_173;
            }
            if ((*(_BYTE *)(v170 + 23) & 0x10) != 0)
            {
              v173 = ***(_QWORD ***)v170;
              v174 = *(_QWORD *)(v173 + 152);
              v175 = *(unsigned int *)(v173 + 168);
              if (!(_DWORD)v175)
                goto LABEL_183;
              LODWORD(v176) = (v175 - 1) & ((v170 >> 4) ^ (v170 >> 9));
              v177 = (uint64_t *)(v174 + 16 * v176);
              v178 = *v177;
              if (*v177 != v170)
              {
                v179 = 1;
                while (v178 != -4096)
                {
                  v180 = v176 + v179++;
                  v176 = v180 & (v175 - 1);
                  v178 = *(_QWORD *)(v174 + 16 * v176);
                  if (v178 == v170)
                  {
                    v177 = (uint64_t *)(v174 + 16 * v176);
                    goto LABEL_184;
                  }
                }
LABEL_183:
                v177 = (uint64_t *)(v174 + 16 * v175);
              }
LABEL_184:
              v181 = (_QWORD *)v177[1];
              v184 = *v181;
              v182 = (char *)(v181 + 2);
              v183 = v184;
            }
            else
            {
              v183 = 0;
              v182 = &byte_1C871356D;
            }
            if ((*((_BYTE *)v74 + 23) & 0x10) != 0)
            {
              v185 = ***v74;
              v186 = *(_QWORD *)(v185 + 152);
              v187 = *(unsigned int *)(v185 + 168);
              if (!(_DWORD)v187)
                goto LABEL_192;
              LODWORD(v188) = (v187 - 1) & v76;
              v189 = (uint64_t ****)(v186 + 16 * v188);
              v190 = *v189;
              if (*v189 != v74)
              {
                v191 = 1;
                while (v190 != (uint64_t ***)-4096)
                {
                  v192 = v188 + v191++;
                  v188 = v192 & (v187 - 1);
                  v190 = *(uint64_t ****)(v186 + 16 * v188);
                  if (v190 == v74)
                  {
                    v189 = (uint64_t ****)(v186 + 16 * v188);
                    goto LABEL_193;
                  }
                }
LABEL_192:
                v189 = (uint64_t ****)(v186 + 16 * v187);
              }
LABEL_193:
              v193 = v189[1];
              v196 = (size_t)*v193;
              v194 = (char *)(v193 + 2);
              v195 = v196;
            }
            else
            {
              v195 = 0;
              v194 = &byte_1C871356D;
            }
            if (v195 >= v183)
              v197 = v183;
            else
              v197 = v195;
            if (v197 && (v198 = memcmp(v182, v194, v197)) != 0)
            {
              if (v198 < 0)
                goto LABEL_173;
            }
            else if (v183 < v195)
            {
              goto LABEL_173;
            }
            goto LABEL_202;
          }
LABEL_173:
          if (v8 < v139)
            continue;
          break;
        }
LABEL_206:
        v200 = &v8[-1].i64[1];
        v6 = v853;
        if (&v8[-1].u64[1] != (unint64_t *)v853)
          v853->i64[0] = *v200;
        *v200 = (uint64_t)v74;
        v201 = v75 >= v107;
        v7 = a2;
        if (!v201)
        {
LABEL_212:
          result = (int8x16_t *)sub_1C5B2DB94(v853, &v8[-1].u64[1], a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v202 = sub_1C5B3124C(v853, (int8x16_t *)((char *)v8 - 8), a3);
        result = (int8x16_t *)sub_1C5B3124C(v8, a2, a3);
        if (!(_DWORD)result)
        {
          if (v202)
            continue;
          goto LABEL_212;
        }
        a2 = (int8x16_t *)((char *)v8 - 8);
        if (!v202)
          goto LABEL_2;
        return result;
    }
  }
}

char *sub_1C5B30A94(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  _QWORD *v31;
  char *v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  _QWORD *v43;
  char *v44;
  size_t v45;
  size_t v46;
  size_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  _QWORD *v72;
  size_t v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  int v82;
  _QWORD *v83;
  char *v84;
  size_t v85;
  size_t v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  int v99;
  _QWORD *v100;
  size_t v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  int v110;
  _QWORD *v111;
  char *v112;
  size_t v113;
  size_t v114;
  size_t v115;
  _QWORD *v116;
  size_t v117;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  int v126;
  _QWORD *v127;
  size_t v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  int v136;
  int v137;
  _QWORD *v138;
  char *v139;
  size_t v140;
  size_t v141;
  size_t v142;
  _QWORD *v143;
  char *v144;
  size_t v145;
  size_t v146;
  size_t v147;

  v6 = a2;
  v7 = a1;
  v8 = *a2;
  v9 = *a1;
  v10 = *a4;
  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a4 + 16), *a2, *a1))
  {
LABEL_2:
    v11 = *a3;
    v12 = *v6;
    v13 = *a4;
    result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a4 + 16), *a3, *v6);
    if ((result & 1) != 0)
      goto LABEL_77;
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v13 + 16), v12, v11))
      goto LABEL_75;
    if ((*(_BYTE *)(v11 + 23) & 0x10) == 0)
    {
      v73 = 0;
      result = &byte_1C871356D;
LABEL_58:
      if ((*(_BYTE *)(v12 + 23) & 0x10) == 0)
      {
        v85 = 0;
        v84 = &byte_1C871356D;
        goto LABEL_67;
      }
      v75 = ***(_QWORD ***)v12;
      v76 = *(_QWORD *)(v75 + 152);
      v77 = *(unsigned int *)(v75 + 168);
      if ((_DWORD)v77)
      {
        LODWORD(v78) = (v77 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        v79 = (uint64_t *)(v76 + 16 * v78);
        v80 = *v79;
        if (*v79 == v12)
        {
LABEL_66:
          v83 = (_QWORD *)v79[1];
          v86 = *v83;
          v84 = (char *)(v83 + 2);
          v85 = v86;
LABEL_67:
          if (v85 >= v73)
            v87 = v73;
          else
            v87 = v85;
          if (v87)
          {
            result = (char *)memcmp(result, v84, v87);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_77;
LABEL_75:
              v88 = *v7;
              *v7 = *v6;
              *v6 = v88;
              v89 = *a3;
              v90 = *a4;
              result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v90 + 16), *a3, v88);
              if ((result & 1) != 0)
              {
                v7 = v6;
                goto LABEL_77;
              }
              result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v90 + 16), v88, v89);
              if ((result & 1) != 0)
                return result;
              if ((*(_BYTE *)(v89 + 23) & 0x10) == 0)
              {
                v128 = 0;
                result = &byte_1C871356D;
LABEL_119:
                if ((*(_BYTE *)(v88 + 23) & 0x10) == 0)
                {
                  v145 = 0;
                  v144 = &byte_1C871356D;
                  goto LABEL_137;
                }
                v130 = ***(_QWORD ***)v88;
                v131 = *(_QWORD *)(v130 + 152);
                v132 = *(unsigned int *)(v130 + 168);
                if ((_DWORD)v132)
                {
                  LODWORD(v133) = (v132 - 1) & ((v88 >> 4) ^ (v88 >> 9));
                  v134 = (uint64_t *)(v131 + 16 * v133);
                  v135 = *v134;
                  if (*v134 == v88)
                  {
LABEL_136:
                    v143 = (_QWORD *)v134[1];
                    v146 = *v143;
                    v144 = (char *)(v143 + 2);
                    v145 = v146;
LABEL_137:
                    if (v145 >= v128)
                      v147 = v128;
                    else
                      v147 = v145;
                    if (v147)
                    {
                      result = (char *)memcmp(result, v144, v147);
                      if ((_DWORD)result)
                      {
                        v7 = v6;
                        v6 = a3;
                        goto LABEL_143;
                      }
                    }
                    v7 = v6;
                    v6 = a3;
                    if (v128 < v145)
                      goto LABEL_78;
                    return result;
                  }
                  v136 = 1;
                  while (v135 != -4096)
                  {
                    v137 = v133 + v136++;
                    v133 = v137 & (v132 - 1);
                    v135 = *(_QWORD *)(v131 + 16 * v133);
                    if (v135 == v88)
                    {
                      v134 = (uint64_t *)(v131 + 16 * v133);
                      goto LABEL_136;
                    }
                  }
                }
                v134 = (uint64_t *)(v131 + 16 * v132);
                goto LABEL_136;
              }
              v92 = ***(_QWORD ***)v89;
              v93 = *(_QWORD *)(v92 + 152);
              v94 = *(unsigned int *)(v92 + 168);
              if ((_DWORD)v94)
              {
                LODWORD(v95) = (v94 - 1) & ((v89 >> 4) ^ (v89 >> 9));
                v96 = (uint64_t *)(v93 + 16 * v95);
                v97 = *v96;
                if (*v96 == v89)
                {
LABEL_118:
                  v127 = (_QWORD *)v96[1];
                  v129 = *v127;
                  result = (char *)(v127 + 2);
                  v128 = v129;
                  goto LABEL_119;
                }
                v98 = 1;
                while (v97 != -4096)
                {
                  v99 = v95 + v98++;
                  v95 = v99 & (v94 - 1);
                  v97 = *(_QWORD *)(v93 + 16 * v95);
                  if (v97 == v89)
                  {
                    v96 = (uint64_t *)(v93 + 16 * v95);
                    goto LABEL_118;
                  }
                }
              }
              v96 = (uint64_t *)(v93 + 16 * v94);
              goto LABEL_118;
            }
          }
          if (v73 >= v85)
            goto LABEL_75;
LABEL_77:
          v6 = a3;
          goto LABEL_78;
        }
        v81 = 1;
        while (v80 != -4096)
        {
          v82 = v78 + v81++;
          v78 = v82 & (v77 - 1);
          v80 = *(_QWORD *)(v76 + 16 * v78);
          if (v80 == v12)
          {
            v79 = (uint64_t *)(v76 + 16 * v78);
            goto LABEL_66;
          }
        }
      }
      v79 = (uint64_t *)(v76 + 16 * v77);
      goto LABEL_66;
    }
    v15 = ***(_QWORD ***)v11;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v19 = (uint64_t *)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == v11)
      {
LABEL_57:
        v72 = (_QWORD *)v19[1];
        v74 = *v72;
        result = (char *)(v72 + 2);
        v73 = v74;
        goto LABEL_58;
      }
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(_QWORD *)(v16 + 16 * v18);
        if (v20 == v11)
        {
          v19 = (uint64_t *)(v16 + 16 * v18);
          goto LABEL_57;
        }
      }
    }
    v19 = (uint64_t *)(v16 + 16 * v17);
    goto LABEL_57;
  }
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v10 + 16), v9, v8))
  {
    if ((*(_BYTE *)(v8 + 23) & 0x10) == 0)
    {
      v33 = 0;
      v32 = &byte_1C871356D;
LABEL_21:
      if ((*(_BYTE *)(v9 + 23) & 0x10) == 0)
      {
        v45 = 0;
        v44 = &byte_1C871356D;
LABEL_30:
        if (v45 >= v33)
          v47 = v33;
        else
          v47 = v45;
        if (v47 && (v48 = memcmp(v32, v44, v47)) != 0)
        {
          if (v48 < 0)
            goto LABEL_2;
        }
        else if (v33 < v45)
        {
          goto LABEL_2;
        }
        goto LABEL_38;
      }
      v35 = ***(_QWORD ***)v9;
      v36 = *(_QWORD *)(v35 + 152);
      v37 = *(unsigned int *)(v35 + 168);
      if ((_DWORD)v37)
      {
        LODWORD(v38) = (v37 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        v39 = (uint64_t *)(v36 + 16 * v38);
        v40 = *v39;
        if (*v39 == v9)
        {
LABEL_29:
          v43 = (_QWORD *)v39[1];
          v46 = *v43;
          v44 = (char *)(v43 + 2);
          v45 = v46;
          goto LABEL_30;
        }
        v41 = 1;
        while (v40 != -4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v37 - 1);
          v40 = *(_QWORD *)(v36 + 16 * v38);
          if (v40 == v9)
          {
            v39 = (uint64_t *)(v36 + 16 * v38);
            goto LABEL_29;
          }
        }
      }
      v39 = (uint64_t *)(v36 + 16 * v37);
      goto LABEL_29;
    }
    v23 = ***(_QWORD ***)v8;
    v24 = *(_QWORD *)(v23 + 152);
    v25 = *(unsigned int *)(v23 + 168);
    if ((_DWORD)v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v27 = (uint64_t *)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 == v8)
      {
LABEL_20:
        v31 = (_QWORD *)v27[1];
        v34 = *v31;
        v32 = (char *)(v31 + 2);
        v33 = v34;
        goto LABEL_21;
      }
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(_QWORD *)(v24 + 16 * v26);
        if (v28 == v8)
        {
          v27 = (uint64_t *)(v24 + 16 * v26);
          goto LABEL_20;
        }
      }
    }
    v27 = (uint64_t *)(v24 + 16 * v25);
    goto LABEL_20;
  }
LABEL_38:
  v49 = *a3;
  v50 = *v6;
  v51 = *a4;
  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a4 + 16), *a3, *v6))
    goto LABEL_39;
  result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v51 + 16), v50, v49);
  if ((result & 1) != 0)
    return result;
  if ((*(_BYTE *)(v49 + 23) & 0x10) != 0)
  {
    v64 = ***(_QWORD ***)v49;
    v65 = *(_QWORD *)(v64 + 152);
    v66 = *(unsigned int *)(v64 + 168);
    if ((_DWORD)v66)
    {
      LODWORD(v67) = (v66 - 1) & ((v49 >> 4) ^ (v49 >> 9));
      v68 = (uint64_t *)(v65 + 16 * v67);
      v69 = *v68;
      if (*v68 == v49)
      {
LABEL_89:
        v100 = (_QWORD *)v68[1];
        v102 = *v100;
        result = (char *)(v100 + 2);
        v101 = v102;
        goto LABEL_90;
      }
      v70 = 1;
      while (v69 != -4096)
      {
        v71 = v67 + v70++;
        v67 = v71 & (v66 - 1);
        v69 = *(_QWORD *)(v65 + 16 * v67);
        if (v69 == v49)
        {
          v68 = (uint64_t *)(v65 + 16 * v67);
          goto LABEL_89;
        }
      }
    }
    v68 = (uint64_t *)(v65 + 16 * v66);
    goto LABEL_89;
  }
  v101 = 0;
  result = &byte_1C871356D;
LABEL_90:
  if ((*(_BYTE *)(v50 + 23) & 0x10) != 0)
  {
    v103 = ***(_QWORD ***)v50;
    v104 = *(_QWORD *)(v103 + 152);
    v105 = *(unsigned int *)(v103 + 168);
    if ((_DWORD)v105)
    {
      LODWORD(v106) = (v105 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      v107 = (uint64_t *)(v104 + 16 * v106);
      v108 = *v107;
      if (*v107 == v50)
      {
LABEL_98:
        v111 = (_QWORD *)v107[1];
        v114 = *v111;
        v112 = (char *)(v111 + 2);
        v113 = v114;
        goto LABEL_99;
      }
      v109 = 1;
      while (v108 != -4096)
      {
        v110 = v106 + v109++;
        v106 = v110 & (v105 - 1);
        v108 = *(_QWORD *)(v104 + 16 * v106);
        if (v108 == v50)
        {
          v107 = (uint64_t *)(v104 + 16 * v106);
          goto LABEL_98;
        }
      }
    }
    v107 = (uint64_t *)(v104 + 16 * v105);
    goto LABEL_98;
  }
  v113 = 0;
  v112 = &byte_1C871356D;
LABEL_99:
  if (v113 >= v101)
    v115 = v101;
  else
    v115 = v113;
  if (v115 && (result = (char *)memcmp(result, v112, v115), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v101 >= v113)
  {
    return result;
  }
LABEL_39:
  v52 = *v6;
  *v6 = *a3;
  *a3 = v52;
  v53 = *v6;
  v54 = *v7;
  v55 = *a4;
  result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v55 + 16), *v6, *v7);
  if ((result & 1) != 0)
  {
LABEL_78:
    v91 = *v7;
    *v7 = *v6;
    *v6 = v91;
    return result;
  }
  result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v55 + 16), v54, v53);
  if ((result & 1) != 0)
    return result;
  if ((*(_BYTE *)(v53 + 23) & 0x10) != 0)
  {
    v56 = ***(_QWORD ***)v53;
    v57 = *(_QWORD *)(v56 + 152);
    v58 = *(unsigned int *)(v56 + 168);
    if ((_DWORD)v58)
    {
      LODWORD(v59) = (v58 - 1) & ((v53 >> 4) ^ (v53 >> 9));
      v60 = (uint64_t *)(v57 + 16 * v59);
      v61 = *v60;
      if (*v60 == v53)
      {
LABEL_109:
        v116 = (_QWORD *)v60[1];
        v118 = *v116;
        result = (char *)(v116 + 2);
        v117 = v118;
        goto LABEL_110;
      }
      v62 = 1;
      while (v61 != -4096)
      {
        v63 = v59 + v62++;
        v59 = v63 & (v58 - 1);
        v61 = *(_QWORD *)(v57 + 16 * v59);
        if (v61 == v53)
        {
          v60 = (uint64_t *)(v57 + 16 * v59);
          goto LABEL_109;
        }
      }
    }
    v60 = (uint64_t *)(v57 + 16 * v58);
    goto LABEL_109;
  }
  v117 = 0;
  result = &byte_1C871356D;
LABEL_110:
  if ((*(_BYTE *)(v54 + 23) & 0x10) == 0)
  {
    v140 = 0;
    v139 = &byte_1C871356D;
    goto LABEL_128;
  }
  v119 = ***(_QWORD ***)v54;
  v120 = *(_QWORD *)(v119 + 152);
  v121 = *(unsigned int *)(v119 + 168);
  if (!(_DWORD)v121)
    goto LABEL_126;
  LODWORD(v122) = (v121 - 1) & ((v54 >> 4) ^ (v54 >> 9));
  v123 = (uint64_t *)(v120 + 16 * v122);
  v124 = *v123;
  if (*v123 != v54)
  {
    v125 = 1;
    while (v124 != -4096)
    {
      v126 = v122 + v125++;
      v122 = v126 & (v121 - 1);
      v124 = *(_QWORD *)(v120 + 16 * v122);
      if (v124 == v54)
      {
        v123 = (uint64_t *)(v120 + 16 * v122);
        goto LABEL_127;
      }
    }
LABEL_126:
    v123 = (uint64_t *)(v120 + 16 * v121);
  }
LABEL_127:
  v138 = (_QWORD *)v123[1];
  v141 = *v138;
  v139 = (char *)(v138 + 2);
  v140 = v141;
LABEL_128:
  if (v140 >= v117)
    v142 = v117;
  else
    v142 = v140;
  if (v142)
  {
    result = (char *)memcmp(result, v139, v142);
    if ((_DWORD)result)
    {
LABEL_143:
      if ((result & 0x80000000) != 0)
        goto LABEL_78;
      return result;
    }
  }
  if (v117 < v140)
    goto LABEL_78;
  return result;
}

BOOL sub_1C5B3124C(int8x16_t *a1, int8x16_t *a2, uint64_t *a3)
{
  int8x16_t *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int8x16_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  _QWORD *v32;
  char *v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;
  char *v45;
  size_t v46;
  size_t v47;
  size_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  _QWORD *v58;
  char *v59;
  size_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  _QWORD *v70;
  char *v71;
  size_t v72;
  size_t v73;
  size_t v74;
  int v75;
  uint64_t *i64;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  int v132;
  _QWORD *v133;
  char *v134;
  size_t v135;
  size_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  int v143;
  int v144;
  _QWORD *v145;
  char *v146;
  size_t v147;
  size_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  int v155;
  int v156;
  _QWORD *v157;
  char *v158;
  size_t v159;
  size_t v160;
  size_t v161;
  int v162;
  _QWORD *v163;
  char *v164;
  size_t v165;
  size_t v166;
  size_t v167;
  int v168;
  _QWORD *v169;
  char *v170;
  size_t v171;
  size_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  int v180;
  _QWORD *v181;
  char *v182;
  size_t v183;
  size_t v184;
  size_t v185;
  int v186;
  _QWORD *v187;
  char *v188;
  size_t v189;
  size_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  int v197;
  int v198;
  _QWORD *v199;
  char *v200;
  size_t v201;
  size_t v202;
  size_t v203;
  int v204;
  _QWORD *v205;
  char *v206;
  size_t v207;
  size_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int v215;
  int v216;
  _QWORD *v217;
  char *v218;
  size_t v219;
  size_t v220;
  size_t v221;
  int v222;
  int8x16_t *v223;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2[-1].i64[1];
      v9 = a1->i64[0];
      v10 = *a3;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v8, a1->i64[0]))
        goto LABEL_3;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v10 + 16), v9, v8))
        return 1;
      if ((*(_BYTE *)(v8 + 23) & 0x10) != 0)
      {
        v93 = ***(_QWORD ***)v8;
        v94 = *(_QWORD *)(v93 + 152);
        v95 = *(unsigned int *)(v93 + 168);
        if ((_DWORD)v95)
        {
          LODWORD(v96) = (v95 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          v97 = (uint64_t *)(v94 + 16 * v96);
          v98 = *v97;
          if (*v97 != v8)
          {
            v99 = 1;
            do
            {
              if (v98 == -4096)
                goto LABEL_124;
              v100 = v96 + v99++;
              v96 = v100 & (v95 - 1);
              v98 = *(_QWORD *)(v94 + 16 * v96);
            }
            while (v98 != v8);
            v97 = (uint64_t *)(v94 + 16 * v96);
          }
        }
        else
        {
LABEL_124:
          v97 = (uint64_t *)(v94 + 16 * v95);
        }
        v133 = (_QWORD *)v97[1];
        v136 = *v133;
        v134 = (char *)(v133 + 2);
        v135 = v136;
        goto LABEL_126;
      }
      v135 = 0;
      v134 = &byte_1C871356D;
LABEL_126:
      if ((*(_BYTE *)(v9 + 23) & 0x10) != 0)
      {
        v137 = ***(_QWORD ***)v9;
        v138 = *(_QWORD *)(v137 + 152);
        v139 = *(unsigned int *)(v137 + 168);
        if ((_DWORD)v139)
        {
          LODWORD(v140) = (v139 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          v141 = (uint64_t *)(v138 + 16 * v140);
          v142 = *v141;
          if (*v141 != v9)
          {
            v143 = 1;
            do
            {
              if (v142 == -4096)
                goto LABEL_142;
              v144 = v140 + v143++;
              v140 = v144 & (v139 - 1);
              v142 = *(_QWORD *)(v138 + 16 * v140);
            }
            while (v142 != v9);
            v141 = (uint64_t *)(v138 + 16 * v140);
          }
        }
        else
        {
LABEL_142:
          v141 = (uint64_t *)(v138 + 16 * v139);
        }
        v157 = (_QWORD *)v141[1];
        v160 = *v157;
        v158 = (char *)(v157 + 2);
        v159 = v160;
        goto LABEL_144;
      }
      v159 = 0;
      v158 = &byte_1C871356D;
LABEL_144:
      if (v159 >= v135)
        v161 = v135;
      else
        v161 = v159;
      if (v161)
      {
        v162 = memcmp(v134, v158, v161);
        if (v162)
        {
          if ((v162 & 0x80000000) == 0)
            return 1;
LABEL_3:
          v11 = a1->i64[0];
          a1->i64[0] = v4[-1].i64[1];
          v4[-1].i64[1] = v11;
          return 1;
        }
      }
      if (v135 < v159)
        goto LABEL_3;
      return 1;
    case 3:
      sub_1C5B30A94(a1->i64, &a1->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      sub_1C5B31E2C(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      i64 = a1[1].i64;
      v77 = &a1[1].i64[1];
      sub_1C5B31E2C(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
      v78 = v4[-1].i64[1];
      v79 = a1[1].i64[1];
      v80 = *a3;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v78, v79))
        goto LABEL_79;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v80 + 16), v79, v78))
        return 1;
      if ((*(_BYTE *)(v78 + 23) & 0x10) != 0)
      {
        v101 = ***(_QWORD ***)v78;
        v102 = *(_QWORD *)(v101 + 152);
        v103 = *(unsigned int *)(v101 + 168);
        if ((_DWORD)v103)
        {
          LODWORD(v104) = (v103 - 1) & ((v78 >> 4) ^ (v78 >> 9));
          v105 = (uint64_t *)(v102 + 16 * v104);
          v106 = *v105;
          if (*v105 != v78)
          {
            v107 = 1;
            do
            {
              if (v106 == -4096)
                goto LABEL_133;
              v108 = v104 + v107++;
              v104 = v108 & (v103 - 1);
              v106 = *(_QWORD *)(v102 + 16 * v104);
            }
            while (v106 != v78);
            v105 = (uint64_t *)(v102 + 16 * v104);
          }
        }
        else
        {
LABEL_133:
          v105 = (uint64_t *)(v102 + 16 * v103);
        }
        v145 = (_QWORD *)v105[1];
        v148 = *v145;
        v146 = (char *)(v145 + 2);
        v147 = v148;
        goto LABEL_135;
      }
      v147 = 0;
      v146 = &byte_1C871356D;
LABEL_135:
      if ((*(_BYTE *)(v79 + 23) & 0x10) != 0)
      {
        v149 = ***(_QWORD ***)v79;
        v150 = *(_QWORD *)(v149 + 152);
        v151 = *(unsigned int *)(v149 + 168);
        if ((_DWORD)v151)
        {
          LODWORD(v152) = (v151 - 1) & ((v79 >> 4) ^ (v79 >> 9));
          v153 = (uint64_t *)(v150 + 16 * v152);
          v154 = *v153;
          if (*v153 != v79)
          {
            v155 = 1;
            do
            {
              if (v154 == -4096)
                goto LABEL_153;
              v156 = v152 + v155++;
              v152 = v156 & (v151 - 1);
              v154 = *(_QWORD *)(v150 + 16 * v152);
            }
            while (v154 != v79);
            v153 = (uint64_t *)(v150 + 16 * v152);
          }
        }
        else
        {
LABEL_153:
          v153 = (uint64_t *)(v150 + 16 * v151);
        }
        v163 = (_QWORD *)v153[1];
        v166 = *v163;
        v164 = (char *)(v163 + 2);
        v165 = v166;
        goto LABEL_155;
      }
      v165 = 0;
      v164 = &byte_1C871356D;
LABEL_155:
      if (v165 >= v147)
        v167 = v147;
      else
        v167 = v165;
      if (v167 && (v168 = memcmp(v146, v164, v167)) != 0)
      {
        if ((v168 & 0x80000000) == 0)
          return 1;
      }
      else if (v147 >= v165)
      {
        return 1;
      }
LABEL_79:
      v81 = *v77;
      *v77 = v4[-1].i64[1];
      v4[-1].i64[1] = v81;
      v82 = *v77;
      v83 = *i64;
      v84 = *a3;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v77, *i64))
        goto LABEL_80;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v84 + 16), v83, v82))
        return 1;
      if ((*(_BYTE *)(v82 + 23) & 0x10) != 0)
      {
        v109 = ***(_QWORD ***)v82;
        v110 = *(_QWORD *)(v109 + 152);
        v111 = *(unsigned int *)(v109 + 168);
        if ((_DWORD)v111)
        {
          LODWORD(v112) = (v111 - 1) & ((v82 >> 4) ^ (v82 >> 9));
          v113 = (uint64_t *)(v110 + 16 * v112);
          v114 = *v113;
          if (*v113 == v82)
          {
LABEL_165:
            v169 = (_QWORD *)v113[1];
            v172 = *v169;
            v170 = (char *)(v169 + 2);
            v171 = v172;
            goto LABEL_166;
          }
          v115 = 1;
          while (v114 != -4096)
          {
            v116 = v112 + v115++;
            v112 = v116 & (v111 - 1);
            v114 = *(_QWORD *)(v110 + 16 * v112);
            if (v114 == v82)
            {
              v113 = (uint64_t *)(v110 + 16 * v112);
              goto LABEL_165;
            }
          }
        }
        v113 = (uint64_t *)(v110 + 16 * v111);
        goto LABEL_165;
      }
      v171 = 0;
      v170 = &byte_1C871356D;
LABEL_166:
      if ((*(_BYTE *)(v83 + 23) & 0x10) != 0)
      {
        v173 = ***(_QWORD ***)v83;
        v174 = *(_QWORD *)(v173 + 152);
        v175 = *(unsigned int *)(v173 + 168);
        if ((_DWORD)v175)
        {
          LODWORD(v176) = (v175 - 1) & ((v83 >> 4) ^ (v83 >> 9));
          v177 = (uint64_t *)(v174 + 16 * v176);
          v178 = *v177;
          if (*v177 == v83)
          {
LABEL_174:
            v181 = (_QWORD *)v177[1];
            v184 = *v181;
            v182 = (char *)(v181 + 2);
            v183 = v184;
            goto LABEL_175;
          }
          v179 = 1;
          while (v178 != -4096)
          {
            v180 = v176 + v179++;
            v176 = v180 & (v175 - 1);
            v178 = *(_QWORD *)(v174 + 16 * v176);
            if (v178 == v83)
            {
              v177 = (uint64_t *)(v174 + 16 * v176);
              goto LABEL_174;
            }
          }
        }
        v177 = (uint64_t *)(v174 + 16 * v175);
        goto LABEL_174;
      }
      v183 = 0;
      v182 = &byte_1C871356D;
LABEL_175:
      if (v183 >= v171)
        v185 = v171;
      else
        v185 = v183;
      if (v185 && (v186 = memcmp(v170, v182, v185)) != 0)
      {
        if ((v186 & 0x80000000) == 0)
          return 1;
      }
      else if (v171 >= v183)
      {
        return 1;
      }
LABEL_80:
      v85 = *i64;
      v86 = *v77;
      *i64 = *v77;
      *v77 = v85;
      v87 = a1->i64[1];
      v88 = *a3;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v86, v87))
        goto LABEL_81;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v88 + 16), v87, v86))
        return 1;
      if ((*(_BYTE *)(v86 + 23) & 0x10) != 0)
      {
        v117 = ***(_QWORD ***)v86;
        v118 = *(_QWORD *)(v117 + 152);
        v119 = *(unsigned int *)(v117 + 168);
        if ((_DWORD)v119)
        {
          LODWORD(v120) = (v119 - 1) & ((v86 >> 4) ^ (v86 >> 9));
          v121 = (uint64_t *)(v118 + 16 * v120);
          v122 = *v121;
          if (*v121 == v86)
          {
LABEL_185:
            v187 = (_QWORD *)v121[1];
            v190 = *v187;
            v188 = (char *)(v187 + 2);
            v189 = v190;
            goto LABEL_186;
          }
          v123 = 1;
          while (v122 != -4096)
          {
            v124 = v120 + v123++;
            v120 = v124 & (v119 - 1);
            v122 = *(_QWORD *)(v118 + 16 * v120);
            if (v122 == v86)
            {
              v121 = (uint64_t *)(v118 + 16 * v120);
              goto LABEL_185;
            }
          }
        }
        v121 = (uint64_t *)(v118 + 16 * v119);
        goto LABEL_185;
      }
      v189 = 0;
      v188 = &byte_1C871356D;
LABEL_186:
      if ((*(_BYTE *)(v87 + 23) & 0x10) != 0)
      {
        v191 = ***(_QWORD ***)v87;
        v192 = *(_QWORD *)(v191 + 152);
        v193 = *(unsigned int *)(v191 + 168);
        if ((_DWORD)v193)
        {
          LODWORD(v194) = (v193 - 1) & ((v87 >> 4) ^ (v87 >> 9));
          v195 = (uint64_t *)(v192 + 16 * v194);
          v196 = *v195;
          if (*v195 == v87)
          {
LABEL_194:
            v199 = (_QWORD *)v195[1];
            v202 = *v199;
            v200 = (char *)(v199 + 2);
            v201 = v202;
            goto LABEL_195;
          }
          v197 = 1;
          while (v196 != -4096)
          {
            v198 = v194 + v197++;
            v194 = v198 & (v193 - 1);
            v196 = *(_QWORD *)(v192 + 16 * v194);
            if (v196 == v87)
            {
              v195 = (uint64_t *)(v192 + 16 * v194);
              goto LABEL_194;
            }
          }
        }
        v195 = (uint64_t *)(v192 + 16 * v193);
        goto LABEL_194;
      }
      v201 = 0;
      v200 = &byte_1C871356D;
LABEL_195:
      if (v201 >= v189)
        v203 = v189;
      else
        v203 = v201;
      if (v203)
      {
        v204 = memcmp(v188, v200, v203);
        if (v204)
        {
          if ((v204 & 0x80000000) == 0)
            return 1;
LABEL_81:
          v89 = a1->i64[1];
          v90 = a1[1].i64[0];
          v91 = a1->i64[0];
          a1->i64[1] = v90;
          a1[1].i64[0] = v89;
          v92 = *a3;
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v92 + 16), v90, v91))
            goto LABEL_82;
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v92 + 16), v91, v90))
            return 1;
          if ((*(_BYTE *)(v90 + 23) & 0x10) == 0)
          {
            v207 = 0;
            v206 = &byte_1C871356D;
LABEL_206:
            if ((*(_BYTE *)(v91 + 23) & 0x10) == 0)
            {
              v219 = 0;
              v218 = &byte_1C871356D;
LABEL_215:
              if (v219 >= v207)
                v221 = v207;
              else
                v221 = v219;
              if (v221 && (v222 = memcmp(v206, v218, v221)) != 0)
              {
                if ((v222 & 0x80000000) == 0)
                  return 1;
              }
              else if (v207 >= v219)
              {
                return 1;
              }
LABEL_82:
              *a1 = vextq_s8(*a1, *a1, 8uLL);
              return 1;
            }
            v209 = ***(_QWORD ***)v91;
            v210 = *(_QWORD *)(v209 + 152);
            v211 = *(unsigned int *)(v209 + 168);
            if ((_DWORD)v211)
            {
              LODWORD(v212) = (v211 - 1) & ((v91 >> 4) ^ (v91 >> 9));
              v213 = (uint64_t *)(v210 + 16 * v212);
              v214 = *v213;
              if (*v213 == v91)
              {
LABEL_214:
                v217 = (_QWORD *)v213[1];
                v220 = *v217;
                v218 = (char *)(v217 + 2);
                v219 = v220;
                goto LABEL_215;
              }
              v215 = 1;
              while (v214 != -4096)
              {
                v216 = v212 + v215++;
                v212 = v216 & (v211 - 1);
                v214 = *(_QWORD *)(v210 + 16 * v212);
                if (v214 == v91)
                {
                  v213 = (uint64_t *)(v210 + 16 * v212);
                  goto LABEL_214;
                }
              }
            }
            v213 = (uint64_t *)(v210 + 16 * v211);
            goto LABEL_214;
          }
          v125 = ***(_QWORD ***)v90;
          v126 = *(_QWORD *)(v125 + 152);
          v127 = *(unsigned int *)(v125 + 168);
          if ((_DWORD)v127)
          {
            LODWORD(v128) = (v127 - 1) & ((v90 >> 4) ^ (v90 >> 9));
            v129 = (uint64_t *)(v126 + 16 * v128);
            v130 = *v129;
            if (*v129 == v90)
            {
LABEL_205:
              v205 = (_QWORD *)v129[1];
              v208 = *v205;
              v206 = (char *)(v205 + 2);
              v207 = v208;
              goto LABEL_206;
            }
            v131 = 1;
            while (v130 != -4096)
            {
              v132 = v128 + v131++;
              v128 = v132 & (v127 - 1);
              v130 = *(_QWORD *)(v126 + 16 * v128);
              if (v130 == v90)
              {
                v129 = (uint64_t *)(v126 + 16 * v128);
                goto LABEL_205;
              }
            }
          }
          v129 = (uint64_t *)(v126 + 16 * v127);
          goto LABEL_205;
        }
      }
      if (v189 < v201)
        goto LABEL_81;
      return 1;
    default:
      v12 = a1[1].i64;
      sub_1C5B30A94(a1->i64, &a1->i64[1], a1[1].i64, a3);
      v13 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)v4)
        return 1;
      v14 = 0;
      v223 = v4;
      while (2)
      {
        v15 = *v13;
        v16 = *v12;
        v17 = *a3;
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), *v13, *v12))
          goto LABEL_7;
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v17 + 16), v16, v15))
          goto LABEL_52;
        if ((*(_BYTE *)(v15 + 23) & 0x10) != 0)
        {
          v50 = ***(_QWORD ***)v15;
          v51 = *(_QWORD *)(v50 + 152);
          v52 = *(unsigned int *)(v50 + 168);
          if ((_DWORD)v52)
          {
            LODWORD(v53) = (v52 - 1) & ((v15 >> 4) ^ (v15 >> 9));
            v54 = (uint64_t *)(v51 + 16 * v53);
            v55 = *v54;
            if (*v54 != v15)
            {
              v56 = 1;
              do
              {
                if (v55 == -4096)
                  goto LABEL_54;
                v57 = v53 + v56++;
                v53 = v57 & (v52 - 1);
                v55 = *(_QWORD *)(v51 + 16 * v53);
              }
              while (v55 != v15);
              v54 = (uint64_t *)(v51 + 16 * v53);
            }
          }
          else
          {
LABEL_54:
            v54 = (uint64_t *)(v51 + 16 * v52);
          }
          v58 = (_QWORD *)v54[1];
          v61 = *v58;
          v59 = (char *)(v58 + 2);
          v60 = v61;
          goto LABEL_56;
        }
        v60 = 0;
        v59 = &byte_1C871356D;
LABEL_56:
        if ((*(_BYTE *)(v16 + 23) & 0x10) != 0)
        {
          v62 = ***(_QWORD ***)v16;
          v63 = *(_QWORD *)(v62 + 152);
          v64 = *(unsigned int *)(v62 + 168);
          if ((_DWORD)v64)
          {
            LODWORD(v65) = (v64 - 1) & ((v16 >> 4) ^ (v16 >> 9));
            v66 = (uint64_t *)(v63 + 16 * v65);
            v67 = *v66;
            if (*v66 != v16)
            {
              v68 = 1;
              do
              {
                if (v67 == -4096)
                  goto LABEL_63;
                v69 = v65 + v68++;
                v65 = v69 & (v64 - 1);
                v67 = *(_QWORD *)(v63 + 16 * v65);
              }
              while (v67 != v16);
              v66 = (uint64_t *)(v63 + 16 * v65);
            }
          }
          else
          {
LABEL_63:
            v66 = (uint64_t *)(v63 + 16 * v64);
          }
          v70 = (_QWORD *)v66[1];
          v73 = *v70;
          v71 = (char *)(v70 + 2);
          v72 = v73;
          goto LABEL_65;
        }
        v72 = 0;
        v71 = &byte_1C871356D;
LABEL_65:
        if (v72 >= v60)
          v74 = v60;
        else
          v74 = v72;
        if (v74 && (v75 = memcmp(v59, v71, v74)) != 0)
        {
          if ((v75 & 0x80000000) == 0)
            goto LABEL_52;
        }
        else if (v60 >= v72)
        {
          goto LABEL_52;
        }
LABEL_7:
        v18 = *v13;
        *v13 = *v12;
        v19 = (uint64_t *)a1;
        if (v12 == (uint64_t *)a1)
          goto LABEL_51;
        v20 = (int8x16_t *)v12;
        while (2)
        {
          v22 = v20[-1].i64[1];
          v20 = (int8x16_t *)((char *)v20 - 8);
          v21 = v22;
          v23 = *a3;
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a3 + 16), v18, v22))
            goto LABEL_37;
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v23 + 16), v21, v18))
            break;
          if ((*(_BYTE *)(v18 + 23) & 0x10) != 0)
          {
            v24 = ***(_QWORD ***)v18;
            v25 = *(_QWORD *)(v24 + 152);
            v26 = *(unsigned int *)(v24 + 168);
            if ((_DWORD)v26)
            {
              LODWORD(v27) = (v26 - 1) & ((v18 >> 4) ^ (v18 >> 9));
              v28 = (uint64_t *)(v25 + 16 * v27);
              v29 = *v28;
              if (*v28 == v18)
              {
LABEL_19:
                v32 = (_QWORD *)v28[1];
                v35 = *v32;
                v33 = (char *)(v32 + 2);
                v34 = v35;
                goto LABEL_20;
              }
              v30 = 1;
              while (v29 != -4096)
              {
                v31 = v27 + v30++;
                v27 = v31 & (v26 - 1);
                v29 = *(_QWORD *)(v25 + 16 * v27);
                if (v29 == v18)
                {
                  v28 = (uint64_t *)(v25 + 16 * v27);
                  goto LABEL_19;
                }
              }
            }
            v28 = (uint64_t *)(v25 + 16 * v26);
            goto LABEL_19;
          }
          v34 = 0;
          v33 = &byte_1C871356D;
LABEL_20:
          if ((*(_BYTE *)(v21 + 23) & 0x10) != 0)
          {
            v36 = ***(_QWORD ***)v21;
            v37 = *(_QWORD *)(v36 + 152);
            v38 = *(unsigned int *)(v36 + 168);
            if ((_DWORD)v38)
            {
              LODWORD(v39) = (v38 - 1) & ((v21 >> 4) ^ (v21 >> 9));
              v40 = (uint64_t *)(v37 + 16 * v39);
              v41 = *v40;
              if (*v40 == v21)
              {
LABEL_28:
                v44 = (_QWORD *)v40[1];
                v47 = *v44;
                v45 = (char *)(v44 + 2);
                v46 = v47;
                goto LABEL_29;
              }
              v42 = 1;
              while (v41 != -4096)
              {
                v43 = v39 + v42++;
                v39 = v43 & (v38 - 1);
                v41 = *(_QWORD *)(v37 + 16 * v39);
                if (v41 == v21)
                {
                  v40 = (uint64_t *)(v37 + 16 * v39);
                  goto LABEL_28;
                }
              }
            }
            v40 = (uint64_t *)(v37 + 16 * v38);
            goto LABEL_28;
          }
          v46 = 0;
          v45 = &byte_1C871356D;
LABEL_29:
          if (v46 >= v34)
            v48 = v34;
          else
            v48 = v46;
          if (v48)
          {
            v49 = memcmp(v33, v45, v48);
            if (v49)
            {
              if ((v49 & 0x80000000) == 0)
                break;
              goto LABEL_37;
            }
          }
          if (v34 < v46)
          {
LABEL_37:
            *v12 = *(v12 - 1);
            v12 = (uint64_t *)v20;
            if (v20 == a1)
            {
              v19 = (uint64_t *)a1;
              goto LABEL_50;
            }
            continue;
          }
          break;
        }
        v19 = v12;
LABEL_50:
        v4 = v223;
LABEL_51:
        *v19 = v18;
        if (++v14 != 8)
        {
LABEL_52:
          v12 = v13++;
          if (v13 == (uint64_t *)v4)
            return 1;
          continue;
        }
        return v13 + 1 == (uint64_t *)v4;
      }
  }
}

char *sub_1C5B31E2C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  _QWORD *v47;
  size_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  _QWORD *v58;
  char *v59;
  size_t v60;
  size_t v61;
  size_t v62;
  _QWORD *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  _QWORD *v74;
  char *v75;
  size_t v76;
  size_t v77;
  size_t v78;
  _QWORD *v79;
  size_t v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  int v89;
  _QWORD *v90;
  char *v91;
  size_t v92;
  size_t v93;
  size_t v94;

  sub_1C5B30A94(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *a5;
  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a5 + 16), *a4, *a3))
    goto LABEL_2;
  result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v12 + 16), v11, v10);
  if ((result & 1) != 0)
    return result;
  if ((*(_BYTE *)(v10 + 23) & 0x10) != 0)
  {
    v23 = ***(_QWORD ***)v10;
    v24 = *(_QWORD *)(v23 + 152);
    v25 = *(unsigned int *)(v23 + 168);
    if ((_DWORD)v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v27 = (uint64_t *)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 == v10)
      {
LABEL_30:
        v47 = (_QWORD *)v27[1];
        v49 = *v47;
        result = (char *)(v47 + 2);
        v48 = v49;
        goto LABEL_31;
      }
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(_QWORD *)(v24 + 16 * v26);
        if (v28 == v10)
        {
          v27 = (uint64_t *)(v24 + 16 * v26);
          goto LABEL_30;
        }
      }
    }
    v27 = (uint64_t *)(v24 + 16 * v25);
    goto LABEL_30;
  }
  v48 = 0;
  result = &byte_1C871356D;
LABEL_31:
  if ((*(_BYTE *)(v11 + 23) & 0x10) != 0)
  {
    v50 = ***(_QWORD ***)v11;
    v51 = *(_QWORD *)(v50 + 152);
    v52 = *(unsigned int *)(v50 + 168);
    if ((_DWORD)v52)
    {
      LODWORD(v53) = (v52 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v54 = (uint64_t *)(v51 + 16 * v53);
      v55 = *v54;
      if (*v54 == v11)
      {
LABEL_39:
        v58 = (_QWORD *)v54[1];
        v61 = *v58;
        v59 = (char *)(v58 + 2);
        v60 = v61;
        goto LABEL_40;
      }
      v56 = 1;
      while (v55 != -4096)
      {
        v57 = v53 + v56++;
        v53 = v57 & (v52 - 1);
        v55 = *(_QWORD *)(v51 + 16 * v53);
        if (v55 == v11)
        {
          v54 = (uint64_t *)(v51 + 16 * v53);
          goto LABEL_39;
        }
      }
    }
    v54 = (uint64_t *)(v51 + 16 * v52);
    goto LABEL_39;
  }
  v60 = 0;
  v59 = &byte_1C871356D;
LABEL_40:
  if (v60 >= v48)
    v62 = v48;
  else
    v62 = v60;
  if (v62 && (result = (char *)memcmp(result, v59, v62), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v48 >= v60)
  {
    return result;
  }
LABEL_2:
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v14 = *a3;
  v15 = *a2;
  v16 = *a5;
  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*a5 + 16), *a3, *a2))
    goto LABEL_3;
  result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v16 + 16), v15, v14);
  if ((result & 1) != 0)
    return result;
  if ((*(_BYTE *)(v14 + 23) & 0x10) != 0)
  {
    v31 = ***(_QWORD ***)v14;
    v32 = *(_QWORD *)(v31 + 152);
    v33 = *(unsigned int *)(v31 + 168);
    if ((_DWORD)v33)
    {
      LODWORD(v34) = (v33 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v35 = (uint64_t *)(v32 + 16 * v34);
      v36 = *v35;
      if (*v35 == v14)
      {
LABEL_50:
        v63 = (_QWORD *)v35[1];
        v65 = *v63;
        result = (char *)(v63 + 2);
        v64 = v65;
        goto LABEL_51;
      }
      v37 = 1;
      while (v36 != -4096)
      {
        v38 = v34 + v37++;
        v34 = v38 & (v33 - 1);
        v36 = *(_QWORD *)(v32 + 16 * v34);
        if (v36 == v14)
        {
          v35 = (uint64_t *)(v32 + 16 * v34);
          goto LABEL_50;
        }
      }
    }
    v35 = (uint64_t *)(v32 + 16 * v33);
    goto LABEL_50;
  }
  v64 = 0;
  result = &byte_1C871356D;
LABEL_51:
  if ((*(_BYTE *)(v15 + 23) & 0x10) != 0)
  {
    v66 = ***(_QWORD ***)v15;
    v67 = *(_QWORD *)(v66 + 152);
    v68 = *(unsigned int *)(v66 + 168);
    if ((_DWORD)v68)
    {
      LODWORD(v69) = (v68 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      v70 = (uint64_t *)(v67 + 16 * v69);
      v71 = *v70;
      if (*v70 == v15)
      {
LABEL_59:
        v74 = (_QWORD *)v70[1];
        v77 = *v74;
        v75 = (char *)(v74 + 2);
        v76 = v77;
        goto LABEL_60;
      }
      v72 = 1;
      while (v71 != -4096)
      {
        v73 = v69 + v72++;
        v69 = v73 & (v68 - 1);
        v71 = *(_QWORD *)(v67 + 16 * v69);
        if (v71 == v15)
        {
          v70 = (uint64_t *)(v67 + 16 * v69);
          goto LABEL_59;
        }
      }
    }
    v70 = (uint64_t *)(v67 + 16 * v68);
    goto LABEL_59;
  }
  v76 = 0;
  v75 = &byte_1C871356D;
LABEL_60:
  if (v76 >= v64)
    v78 = v64;
  else
    v78 = v76;
  if (v78 && (result = (char *)memcmp(result, v75, v78), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v64 >= v76)
  {
    return result;
  }
LABEL_3:
  v17 = *a2;
  *a2 = *a3;
  *a3 = v17;
  v18 = *a2;
  v19 = *a1;
  v20 = *a5;
  result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v20 + 16), *a2, *a1);
  if ((result & 1) != 0)
  {
LABEL_4:
    v22 = *a1;
    *a1 = *a2;
    *a2 = v22;
    return result;
  }
  result = (char *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v20 + 16), v19, v18);
  if ((result & 1) == 0)
  {
    if ((*(_BYTE *)(v18 + 23) & 0x10) == 0)
    {
      v80 = 0;
      result = &byte_1C871356D;
LABEL_71:
      if ((*(_BYTE *)(v19 + 23) & 0x10) == 0)
      {
        v92 = 0;
        v91 = &byte_1C871356D;
LABEL_80:
        if (v92 >= v80)
          v94 = v80;
        else
          v94 = v92;
        if (v94 && (result = (char *)memcmp(result, v91, v94), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            goto LABEL_4;
        }
        else if (v80 < v92)
        {
          goto LABEL_4;
        }
        return result;
      }
      v82 = ***(_QWORD ***)v19;
      v83 = *(_QWORD *)(v82 + 152);
      v84 = *(unsigned int *)(v82 + 168);
      if ((_DWORD)v84)
      {
        LODWORD(v85) = (v84 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        v86 = (uint64_t *)(v83 + 16 * v85);
        v87 = *v86;
        if (*v86 == v19)
        {
LABEL_79:
          v90 = (_QWORD *)v86[1];
          v93 = *v90;
          v91 = (char *)(v90 + 2);
          v92 = v93;
          goto LABEL_80;
        }
        v88 = 1;
        while (v87 != -4096)
        {
          v89 = v85 + v88++;
          v85 = v89 & (v84 - 1);
          v87 = *(_QWORD *)(v83 + 16 * v85);
          if (v87 == v19)
          {
            v86 = (uint64_t *)(v83 + 16 * v85);
            goto LABEL_79;
          }
        }
      }
      v86 = (uint64_t *)(v83 + 16 * v84);
      goto LABEL_79;
    }
    v39 = ***(_QWORD ***)v18;
    v40 = *(_QWORD *)(v39 + 152);
    v41 = *(unsigned int *)(v39 + 168);
    if ((_DWORD)v41)
    {
      LODWORD(v42) = (v41 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v43 = (uint64_t *)(v40 + 16 * v42);
      v44 = *v43;
      if (*v43 == v18)
      {
LABEL_70:
        v79 = (_QWORD *)v43[1];
        v81 = *v79;
        result = (char *)(v79 + 2);
        v80 = v81;
        goto LABEL_71;
      }
      v45 = 1;
      while (v44 != -4096)
      {
        v46 = v42 + v45++;
        v42 = v46 & (v41 - 1);
        v44 = *(_QWORD *)(v40 + 16 * v42);
        if (v44 == v18)
        {
          v43 = (uint64_t *)(v40 + 16 * v42);
          goto LABEL_70;
        }
      }
    }
    v43 = (uint64_t *)(v40 + 16 * v41);
    goto LABEL_70;
  }
  return result;
}

uint64_t sub_1C5B32304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = 0;
  if (a1)
  {
    v3 = *(unsigned __int8 *)(a1 + 16);
    if (v3 >= 0x1C)
    {
      if (v3 != 41 && v3 != 43 && (v3 != 62 || (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 2))
        return 0;
      v4 = *(_DWORD *)(a1 + 20);
      if ((v4 & 0x40000000) != 0)
        v5 = *(uint64_t **)(a1 - 8);
      else
        v5 = (uint64_t *)(a1 - 32 * (v4 & 0x7FFFFFF));
      v2 = *v5;
      if (*v5 && *(_BYTE *)(v2 + 16) == 83 && *(_QWORD *)(v2 + 40) == **(_QWORD **)(a2 + 32))
      {
        if ((v4 & 0x40000000) != 0)
          v8 = *(_QWORD *)(a1 - 8);
        else
          v8 = a1 - 32 * (v4 & 0x7FFFFFF);
        if (!llvm::Loop::isLoopInvariant(a2, *(_QWORD *)(v8 + 32)))
          return 0;
      }
      else
      {
        if (v3 == 62)
          return 0;
        v6 = (v4 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v4 & 0x7FFFFFF);
        v2 = *(_QWORD *)(v6 + 32);
        if (!v2 || *(_BYTE *)(v2 + 16) != 83 || *(_QWORD *)(v2 + 40) != **(_QWORD **)(a2 + 32))
          return 0;
        v7 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v4 & 0x7FFFFFF));
        if (!llvm::Loop::isLoopInvariant(a2, *v7))
          return 0;
      }
    }
  }
  return v2;
}

uint64_t sub_1C5B3243C(uint64_t a1, const llvm::Instruction *a2, llvm::DominatorTree *a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[128];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v19 = v23;
  v20 = v23;
  v21 = 16;
  v22 = 0;
  v24 = v27;
  v26 = 16;
  v27[0] = a1;
  v6 = 1;
  while (1)
  {
    v7 = *((_QWORD *)v24 + v6 - 1);
    v25 = v6 - 1;
    if (llvm::mustTriggerUB(v7, &v19, 0) && llvm::DominatorTree::dominates(a3, (const llvm::Value *)v7, a2))
      break;
    if (v7 != a1)
    {
      v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0)
      {
        v10 = *(uint64_t **)(v7 - 8);
        v9 = v8 & 0x7FFFFFF;
        if (!v9)
          goto LABEL_24;
      }
      else
      {
        v9 = v8 & 0x7FFFFFF;
        v10 = (uint64_t *)(v7 - 32 * v9);
        if (!v9)
          goto LABEL_24;
      }
      v11 = 32 * v9;
      while (1)
      {
        v12 = (char *)sub_1C477672C((uint64_t)&v19, *v10);
        v13 = v20 == v19 ? (uint64_t *)((char *)&v21 + 4) : &v21;
        if (v12 != &v20[8 * *(unsigned int *)v13] && llvm::propagatesPoison((uint64_t)v10))
          break;
        v10 += 4;
        v11 -= 32;
        if (!v11)
          goto LABEL_24;
      }
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, v7);
    if (v14)
    {
      v15 = *(_QWORD *)(v7 + 8);
      if (v15)
      {
        v6 = v25;
        do
        {
          v16 = *(_QWORD *)(v15 + 24);
          if (v6 >= v26)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v27, v6 + 1, 8);
            v6 = v25;
          }
          *((_QWORD *)v24 + v6) = v16;
          v6 = ++v25;
          v15 = *(_QWORD *)(v15 + 8);
        }
        while (v15);
        goto LABEL_25;
      }
    }
LABEL_24:
    v6 = v25;
LABEL_25:
    if (!v6)
    {
      v17 = 0;
      goto LABEL_28;
    }
  }
  v17 = 1;
LABEL_28:
  if (v24 != v27)
    free(v24);
  if (v20 != v19)
    free(v20);
  return v17;
}

uint64_t sub_1C5B3264C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = *(_DWORD *)(a1 + 20);
  v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = a1 - 32 * v4;
      if ((v3 & 0x40000000) != 0)
        v6 = *(_QWORD *)(a1 - 8);
      if (*(_QWORD *)(v6 + 32 * *(unsigned int *)(a1 + 60) + 8 * v5) == a2)
        break;
      if (v4 == ++v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    LODWORD(v5) = -1;
  }
  if ((v3 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a1 - 8);
  else
    v7 = a1 - 32 * v4;
  v8 = *(_QWORD *)(v7 + 32 * v5);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10 != a3 && v10 != v8)
        return 0;
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    v12 = *(_QWORD *)(v8 + 8);
    if (v12)
    {
      do
      {
        v13 = *(_QWORD *)(v12 + 24);
        v14 = v13 == a3 || v13 == a1;
        v15 = v14;
        if (!v14)
          break;
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12);
    }
    else
    {
      return 1;
    }
  }
  return v15;
}

uint64_t sub_1C5B32710(uint64_t a1, llvm::SmallPtrSetImplBase *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int32 v19;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0x14)
    return v3 - 13 < 0xFFFFFFFE;
  result = 0;
  if (a3 <= 5 && v3 >= 0x1C)
  {
    v8 = v3 - 33;
    if (v8 > 0x37)
      goto LABEL_10;
    if (((1 << v8) & 0x8000000000041) == 0)
    {
      if (((1 << v8) & 0x808001C8000010) != 0 || v8 == 28 && (*(_WORD *)(a1 + 18) & 0x301) != 0)
        return 0;
      goto LABEL_10;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if (v17 && ((*(_BYTE *)(v17 + 20) & 4) != 0 || (*(_BYTE *)(v17 + 17) & 0x10) != 0))
      goto LABEL_10;
    v19 = 7;
    if (sub_1C53E4BBC(a1, &v19, 1uLL))
    {
      v18 = *(_QWORD *)(a1 - 32);
      if (!v18 || *(_BYTE *)(v18 + 16) || *(_QWORD *)(v18 + 24) != *(_QWORD *)(a1 + 72) || *(_DWORD *)(v18 + 36) != 7)
        return 0;
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 66) & 1) != 0
      || (result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44), (_DWORD)result))
    {
LABEL_10:
      result = 0;
      v9 = *(unsigned __int8 *)(a1 + 16);
      if (v9 == 33 || v9 == 84)
        return result;
      v10 = *(_DWORD *)(a1 + 20);
      if ((v10 & 0x40000000) != 0)
      {
        v12 = *(uint64_t **)(a1 - 8);
        v11 = v10 & 0x7FFFFFF;
        if (v11)
        {
LABEL_14:
          v13 = a3 + 1;
          v14 = 32 * v11;
          do
          {
            v15 = *v12;
            sub_1C4774094(a2, *v12);
            if (v16)
            {
              result = sub_1C5B32710(v15, a2, v13);
              if (!(_DWORD)result)
                break;
            }
            v12 += 4;
            result = 1;
            v14 -= 32;
          }
          while (v14);
          return result;
        }
      }
      else
      {
        v11 = v10 & 0x7FFFFFF;
        v12 = (uint64_t *)(a1 - 32 * v11);
        if (v11)
          goto LABEL_14;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C5B328EC(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_1C5B3292C(a1, a2, a3, a4);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  v7 = *a3;
  v8 = *a4;
  *(_DWORD *)v6 = *a2;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = v8;
  v9 = v4 + 1;
  *(_DWORD *)(a1 + 8) = v9;
  return v5 + 16 * v9 - 16;
}

uint64_t sub_1C5B3292C(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  v9 = (uint64_t *)(*(_QWORD *)a1 + 16 * v8);
  *v9 = v5 | (v6 << 32);
  v9[1] = v7;
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 16 * v9 - 16;
}

_DWORD *sub_1C5B329AC(_DWORD *a1)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  if (*((_QWORD *)a1 + 1))
  {
    v1 = a1[4];
    if (v1 > 4 * a1[2] && v1 >= 0x41)
    {
      return sub_1C5B32B14(a1);
    }
    else
    {
      if (v1)
      {
        v2 = *(_QWORD **)a1;
        v3 = *(_QWORD *)a1 + 40 * v1;
        do
        {
          v4 = v2[1];
          if (*v2 != -4096 || v4 != -4096)
          {
            if (*v2 != -8192 || v4 != -8192)
            {
              v5 = v2[4];
              if (v5 != -8192 && v5 != -4096 && v5 != 0)
              {
                v7 = v2[2] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v7 = v2[3];
                v8 = (unint64_t *)v2[3];
                if (v8)
                {
                  *v8 = *v8 & 7 | v7;
                }
                else
                {
                  v9 = v2[4];
                  v10 = ***(int32x2_t ****)v9;
                  v11 = (unint64_t)v10[303];
                  if (v11 <= v7)
                  {
                    v12 = v10[305].u32[0];
                    if (v11 + 16 * v12 > v7)
                    {
                      v13 = v12 - 1;
                      LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                      v15 = (uint64_t *)(v11 + 16 * v14);
                      v16 = *v15;
                      if (v9 == *v15)
                      {
LABEL_25:
                        *v15 = -8192;
                        v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                        v9 = v2[4];
                      }
                      else
                      {
                        v17 = 1;
                        while (v16 != -4096)
                        {
                          v18 = v14 + v17++;
                          v14 = v18 & v13;
                          v16 = *(_QWORD *)(v11 + 16 * v14);
                          if (v9 == v16)
                          {
                            v15 = (uint64_t *)(v11 + 16 * v14);
                            goto LABEL_25;
                          }
                        }
                      }
                      *(_BYTE *)(v9 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
            *v2 = -4096;
            v2[1] = -4096;
          }
          v2 += 5;
        }
        while (v2 != (_QWORD *)v3);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
  }
  return a1;
}

_DWORD *sub_1C5B32B14(_DWORD *a1)
{
  int v2;
  _DWORD *result;
  int v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t v8;

  v2 = a1[2];
  result = (_DWORD *)sub_1C50D0778((uint64_t)a1);
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v5)
    {
      v6 = *(int64x2_t **)a1;
      v7 = 40 * v5;
      v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v6 = v8;
        v6 = (int64x2_t *)((char *)v6 + 40);
        v7 -= 40;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    return sub_1C5B2C130(a1, v5);
  }
  return result;
}

uint64_t sub_1C5B32BB8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B2BC70(v0);
}

void sub_1C5B32BE4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B32C08(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage *v3;

  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(this, v3);
}

uint64_t sub_1C5B32C44(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t AnalysisPass;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  void **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v39;
  void **v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43[2];
  int v44;
  uint64_t v45[2];
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  void *__src;
  unsigned int v52;
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LoopInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LoopInfoWrapperPass::ID);
  v10 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::ScalarEvolutionWrapperPass::ID);
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::DominatorTreeWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::DominatorTreeWrapperPass::ID);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), llvm::TargetLibraryInfoWrapperPass::ID, 1);
  if (!AnalysisPass
    || (v17 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::TargetLibraryInfoWrapperPass::ID)) == 0)
  {
    v19 = 0;
    goto LABEL_29;
  }
  v3 = (_QWORD *)v17;
  v18 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 56);
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v2 = (uint64_t)&v50;
  llvm::TargetLibraryAnalysis::run(v17 + 32, v18, (uint64_t)&v50);
  v3[30] = v50;
  v19 = (uint64_t **)(v3 + 30);
  if (!*((_BYTE *)v3 + 320))
  {
    v2 = v15;
    v39 = v3 + 33;
    v3[31] = v3 + 33;
    v40 = (void **)(v3 + 31);
    v3[32] = 0x600000000;
    v41 = v52;
    if (!v52 || v40 == &__src)
      goto LABEL_57;
    if (v52 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 31), (uint64_t)(v3 + 33), v52, 8);
      v42 = v52;
      if (!v52)
      {
LABEL_56:
        *((_DWORD *)v3 + 64) = v41;
LABEL_57:
        *((_DWORD *)v3 + 78) = v58;
        *((_BYTE *)v3 + 320) = 1;
        goto LABEL_26;
      }
      v39 = *v40;
    }
    else
    {
      v42 = v52;
    }
    memcpy(v39, __src, 8 * v42);
    goto LABEL_56;
  }
  if (v19 != &v50)
  {
    v20 = (void **)(v3 + 31);
    v21 = v52;
    v2 = *((unsigned int *)v3 + 64);
    if (v2 >= v52)
    {
      if (v52)
        memmove(*v20, __src, 8 * v52);
      goto LABEL_24;
    }
    if (*((_DWORD *)v3 + 65) < v52)
    {
      *((_DWORD *)v3 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 31), (uint64_t)(v3 + 33), v21, 8);
    }
    else if ((_DWORD)v2)
    {
      memmove(*v20, __src, 8 * v2);
      goto LABEL_22;
    }
    v2 = 0;
LABEL_22:
    if (v2 != v52)
      memcpy((char *)*v20 + 8 * v2, (char *)__src + 8 * v2, 8 * v52 - 8 * v2);
LABEL_24:
    *((_DWORD *)v3 + 64) = v21;
  }
  *((_DWORD *)v3 + 78) = v58;
LABEL_26:
  if (__src != v53)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v45);
  sub_1C4D8B52C(v43);
LABEL_29:
  v22 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), llvm::TargetTransformInfoWrapperPass::ID, 1);
  if (!v22
    || (v23 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v22 + 96))(v22, llvm::TargetTransformInfoWrapperPass::ID)) == 0)
  {
    v2 = 0;
    goto LABEL_37;
  }
  v24 = v23;
  v50 = 0;
  __src = 0;
  v52 = 0;
  v53[0] = 0;
  v53[1] = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v25 = *(_QWORD *)(v23 + 56);
  if (!v25)
  {
    sub_1C485C2F0();
LABEL_59:
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_35;
  }
  v3 = v53;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v25 + 48))(v43);
  v2 = v24 + 64;
  v26 = v43[0];
  if (*(_BYTE *)(v24 + 72))
  {
    v43[0] = 0;
    v27 = *(_QWORD *)v2;
    *(_QWORD *)v2 = v26;
    if (!v27)
      goto LABEL_35;
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v43[0];
    v43[0] = 0;
    if (!v28)
      goto LABEL_35;
    goto LABEL_59;
  }
  *(_QWORD *)(v24 + 64) = v43[0];
  *(_BYTE *)(v24 + 72) = 1;
LABEL_35:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C((uint64_t *)&v50);
LABEL_37:
  v29 = v9 + 32;
  v30 = v15 + 32;
  v31 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 4) + 56) + 40) + 272;
  v32 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (v32
    && (v33 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v32 + 96))(v32, &llvm::MemorySSAWrapperPass::ID)) != 0)
  {
    v34 = *(_QWORD *)(v33 + 32);
  }
  else
  {
    v34 = 0;
  }
  sub_1C5B26480((uint64_t)&v50, v29, v12, v30, v31, (uint64_t)v19, v2, v34, byte_1ED835D50);
  v6 = sub_1C5B2659C(&v50, a2);
  sub_1C50880D4(&v56);
  v35 = v55;
  v55 = 0;
  if (v35)
  {
    sub_1C61247C0(v35 + 584, *(_QWORD **)(v35 + 592));
    v36 = *(void **)(v35 + 504);
    if (v36 != (void *)(v35 + 520))
      free(v36);
    v37 = *(void **)(v35 + 416);
    if (v37 != *(void **)(v35 + 408))
      free(v37);
    sub_1C4EE41F8((char **)(v35 + 8));
    MEMORY[0x1CAA32FC0](v35, 0x10E0C40B8556DDDLL);
  }
  return v6;
}

void sub_1C5B331B0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C6317D5C(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C5B331F4(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED81DB50 >= HIDWORD(qword_1ED81DB50))
  {
    v3 = qword_1ED81DB50 + 1;
    if (qword_1ED81DB48 <= a1 && qword_1ED81DB48 + 48 * (unint64_t)qword_1ED81DB50 > a1)
    {
      v5 = a1 - qword_1ED81DB48;
      sub_1C6317E10(v3);
      return qword_1ED81DB48 + v5;
    }
    else
    {
      sub_1C6317E10(v3);
    }
  }
  return a1;
}

uint64_t sub_1C5B33268()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Verify the ScalarEvolution result after running indvars. Has no effect in release b"
                                     "uilds. (Note: this adds additional SCEV queries potentially changing the analysis result)";
  v5.n128_u64[1] = 172;
  sub_1C61B2D38((uint64_t)&unk_1ED81D7A0, "verify-indvars", &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81D7A0, &dword_1C475E000);
  v4 = 1;
  v2 = 1;
  v3 = &v2;
  *(_QWORD *)&v1 = "Choose the strategy to replace exit value in IndVarSimplify";
  *((_QWORD *)&v1 + 1) = 59;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "never";
  v6[1] = 5;
  v7 = 0;
  v8 = "never replace exit value";
  v9 = 24;
  v10 = "cheap";
  v11 = 5;
  v12 = 1;
  v13 = "only replace exit value when the cost is cheap";
  v14 = 46;
  v15 = "noharduse";
  v16 = 9;
  v17 = 2;
  v18 = "only replace exit values when loop def likely dead";
  v19 = 50;
  v20 = "always";
  v21 = 6;
  v22 = 3;
  v23 = "always replace exit value whenever possible";
  v24 = 43;
  v5.n128_u64[1] = 0x400000004;
  sub_1C6317BB4(&v4, &v3, &v1, (uint64_t)&v5);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C6317808, &qword_1ED81DAA0, &dword_1C475E000);
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Use post increment control-dependent ranges in IndVarSimplify";
  v5.n128_u64[1] = 61;
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED81D860, "indvars-post-increment-ranges", &v3, &v5, (_BYTE **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81D860, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Disable Linear Function Test Replace optimization";
  v5.n128_u64[1] = 49;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81D920, "disable-lftr", &v3, (_BYTE **)&v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81D920, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Predicate conditions in read only loops";
  v5.n128_u64[1] = 39;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81D9E0, "indvars-predicate-loops", &v3, (_BYTE **)&v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81D9E0, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Allow widening of indvars to eliminate s/zext";
  v5.n128_u64[1] = 45;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED835CD0, "indvars-widen-indvars", &v3, (_BYTE **)&v1, &v5);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED835CD0, &dword_1C475E000);
}

uint64_t sub_1C5B33568(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Infer address spaces";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "infer-address-spaces";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5760;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5B36AAC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createInferAddressSpacesPass(llvm *this)
{
  int v1;
  uint64_t result;

  v1 = (int)this;
  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F5760;
  *(_QWORD *)result = &off_1E8194F38;
  *(_DWORD *)(result + 24) = 2;
  *(_DWORD *)(result + 28) = v1;
  return result;
}

_DWORD *llvm::InferAddressSpacesPass::InferAddressSpacesPass(_DWORD *this)
{
  *this = -1;
  return this;
}

{
  *this = -1;
  return this;
}

_DWORD *llvm::InferAddressSpacesPass::InferAddressSpacesPass(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

llvm::Type *sub_1C5B33670(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _BOOL8 v5;
  llvm::Type *result;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _BYTE **v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t *v41;
  _QWORD ***v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD ***v47;
  int32x2_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD ***v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t *v58;
  void *v59;
  unsigned int v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  const llvm::Instruction *v84;
  const llvm::DominatorTree *v85;
  uint64_t v86;
  llvm::AssumptionCache *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm **v93;
  llvm *v94;
  int v95;
  int v96;
  int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unsigned int v111;
  int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  uint64_t *v122;
  uint64_t *v123;
  BOOL v124;
  _BOOL4 v126;
  int v127;
  int v128;
  BOOL v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  void *v137;
  unsigned int v138;
  void *v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  void *v143;
  int v144;
  int v145;
  unint64_t *v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD ****v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  llvm::Type *v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  llvm::Value *v161;
  llvm::PointerType *v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  llvm::Value **v167;
  uint64_t v168;
  llvm::Type *v169;
  llvm::PointerType *v170;
  unint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  int v174;
  uint64_t v175;
  unsigned __int8 **v176;
  _DWORD *v177;
  llvm::Value *v178;
  unsigned int v179;
  uint64_t v180;
  llvm::Type *v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  int v185;
  uint64_t *v186;
  _DWORD *v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t *v199;
  uint64_t v200;
  llvm::Value *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  llvm::Value *v209;
  llvm::Value *v210;
  uint64_t v211;
  int v212;
  llvm::Type **v213;
  uint64_t v214;
  llvm::Type *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t **v218;
  uint64_t v219;
  uint64_t ***v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  llvm::Value **v228;
  int v229;
  int v230;
  unsigned int v231;
  char *v232;
  llvm::Value *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  int32x2_t ****v240;
  int32x2_t *v241;
  unint64_t v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  int32x2_t *****v246;
  int32x2_t ****v247;
  int v248;
  int v249;
  llvm::Value *v250;
  unint64_t v251;
  unint64_t *v252;
  uint64_t v253;
  int32x2_t *v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  unsigned __int8 **v264;
  uint64_t v265;
  llvm::ValueSymbolTable *v266;
  llvm::UndefValue *v267;
  char *v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  _QWORD ***v283;
  unint64_t v285;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  int v293;
  int v294;
  unint64_t v295;
  _QWORD ***v296;
  int32x2_t *v297;
  unint64_t v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD ***v303;
  int v304;
  int v305;
  _QWORD ***v306;
  unint64_t v308;
  int v309;
  _QWORD ***v310;
  uint64_t v311;
  _QWORD ***v312;
  _QWORD **v313;
  _QWORD *v314;
  _QWORD **v315;
  _QWORD **v316;
  _QWORD ***v317;
  unint64_t v318;
  _QWORD ***v319;
  int32x2_t *v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  _QWORD *v325;
  _QWORD ***v326;
  int v327;
  int v328;
  llvm::Value *v329;
  uint64_t v330;
  _QWORD *v331;
  llvm::Value *v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v338;
  llvm::Value *AddrSpaceCast;
  llvm::Value *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int v345;
  int v346;
  uint64_t v347;
  unsigned int v348;
  char v349;
  unint64_t v350;
  char v351;
  llvm::Value *v352;
  int v353;
  _QWORD **v354;
  llvm::APInt *v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  int v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t Declaration;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  _QWORD ***v366;
  _QWORD *v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t **v370;
  uint64_t v371;
  _QWORD ***v372;
  BOOL v373;
  char v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  int v378;
  llvm::MDNode *v379;
  llvm::MDNode *v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  int v384;
  unsigned int v385;
  _QWORD *v386;
  _QWORD ***v387;
  _QWORD *v388;
  int v389;
  BOOL v390;
  unsigned int v391;
  uint64_t v392;
  llvm::MDNode **v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  unsigned int v400;
  _QWORD *v401;
  _QWORD ***v402;
  _QWORD *v403;
  int v404;
  BOOL v405;
  unsigned int v406;
  uint64_t v407;
  llvm::MDNode **v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  _QWORD *v415;
  _QWORD ***v416;
  _QWORD *v417;
  int v418;
  BOOL v419;
  unsigned int v420;
  uint64_t v421;
  llvm::MDNode **v422;
  uint64_t v423;
  llvm::MDNode *v424;
  int v425;
  uint64_t v426;
  _QWORD ***v427;
  uint64_t v428;
  uint64_t *v429;
  __int16 ParamAlignment;
  unint64_t v431;
  unint64_t v432;
  __int16 v433;
  int v434;
  uint64_t v435;
  llvm::Value *v436;
  llvm::Value *v437;
  llvm::MDNode *v438;
  llvm::MDNode *v439;
  llvm::MDNode *v440;
  llvm::MDNode *v441;
  __int16 v442;
  __int16 v443;
  _QWORD **v444;
  _QWORD *v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  int v449;
  unsigned int v450;
  _QWORD *v451;
  uint64_t v452;
  _QWORD *v453;
  int v454;
  BOOL v455;
  unsigned int v456;
  uint64_t v457;
  llvm::MDNode **v458;
  uint64_t v459;
  llvm::MDNode *v460;
  __int16 v461;
  __int16 v462;
  llvm::AttributeList *v463;
  llvm::AttributeList *v464;
  llvm::Value *v465;
  __int16 v466;
  __int16 v467;
  _QWORD *v468;
  uint64_t v469;
  llvm::Value *v470;
  unsigned int v472;
  uint64_t v473;
  int v474;
  uint64_t v475;
  unint64_t v476;
  _BOOL8 v477;
  _QWORD ***v478;
  unsigned __int8 **v479;
  unsigned __int8 *v480;
  uint64_t v481;
  _QWORD *v482;
  unsigned __int8 *v483;
  int v484;
  int v485;
  uint64_t v486;
  int32x2_t ****v487;
  unint64_t v489;
  int v491;
  unsigned int v492;
  _QWORD ***v493;
  _QWORD *v494;
  _QWORD *v495;
  uint64_t v496;
  unsigned __int8 ***v497;
  int32x2_t ***v498;
  int32x2_t ***v499;
  _QWORD ***v500;
  int32x2_t **v501;
  uint64_t v502;
  uint64_t *v503;
  _QWORD **v504;
  uint64_t **v505;
  uint64_t v506;
  llvm::Constant ***v507;
  unsigned int v508;
  uint64_t **v509;
  int v510;
  unsigned int v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  BOOL v517;
  uint64_t v518;
  uint64_t k;
  uint64_t v520;
  uint64_t v521;
  char *v522;
  llvm::Constant ***v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t v528;
  unint64_t v529;
  int32x2_t ****v530;
  int32x2_t *v531;
  unint64_t v532;
  uint64_t v533;
  unsigned int v534;
  uint64_t v535;
  int32x2_t *****v536;
  int32x2_t ****v537;
  int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  _QWORD *v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  uint64_t v548;
  int v549;
  unsigned int v550;
  _QWORD *v551;
  uint64_t v552;
  _QWORD *v553;
  int v554;
  BOOL v555;
  unsigned int v556;
  uint64_t v557;
  llvm::MDNode **v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  _QWORD **v564;
  uint64_t v565;
  uint64_t v566;
  _QWORD *v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  int32x2_t ****v571;
  int32x2_t *v572;
  unint64_t v573;
  uint64_t v574;
  unsigned int v575;
  uint64_t v576;
  int32x2_t *****v577;
  int32x2_t ****v578;
  int v579;
  int v580;
  uint64_t *v581;
  uint64_t v582;
  uint64_t v583;
  void (**v584)(void);
  _QWORD *v585;
  _QWORD *v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t *v590;
  uint64_t v591;
  int32x2_t *v592;
  unint64_t v593;
  uint64_t v594;
  unsigned int v595;
  uint64_t v596;
  uint64_t *v597;
  uint64_t v598;
  int v599;
  int v600;
  unint64_t v602;
  unint64_t *v603;
  uint64_t v604;
  int32x2_t *v605;
  unint64_t v606;
  uint64_t v607;
  unsigned int v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  int v612;
  int v613;
  llvm::MDNode *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  _QWORD ****v618;
  llvm::Value *v619;
  uint64_t v620;
  llvm::Value *v621;
  llvm::Value *v622;
  _QWORD v623[2];
  int v624;
  _QWORD v625[2];
  unsigned int v626;
  uint64_t j;
  unint64_t *v628;
  unint64_t v629;
  _QWORD *v630;
  uint64_t v631;
  unsigned int v632;
  uint64_t v633[3];
  char v634;
  uint64_t v635[4];
  __int16 v636;
  char v637;
  void *v638;
  uint64_t v639;
  _QWORD ***v640;
  int32x2_t ****v641;
  uint64_t *v642;
  void *p_j;
  uint64_t v644;
  int v645;
  _QWORD *v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int32x2_t ****v651;
  void **v652;
  __int16 v653;
  uint64_t v654;

  v3 = a1;
  v654 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 40) + 272;
  if (byte_1ED81DD78)
  {
    *(_DWORD *)(a1 + 32) = 0;
  }
  else if (*(_DWORD *)(a1 + 32) == -1)
  {
    v4 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 120))(**(_QWORD **)(a1 + 16));
    *(_DWORD *)(v3 + 32) = v4;
    if (v4 == -1)
      return 0;
  }
  p_j = &v645;
  v644 = 0x400000000;
  v7 = a2 + 72;
  v649 = 0;
  v650 = 0;
  LODWORD(v651) = 0;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v7)
    {
      j = 0;
      v628 = 0;
      v629 = 0;
      goto LABEL_130;
    }
    v9 = i - 24;
    if (!i)
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 != v9 + 40)
      break;
  }
  while (1)
  {
    v11 = v10 - 24;
    if (v10)
      v12 = v10 - 24;
    else
      v12 = 0;
    v13 = *(unsigned __int8 *)(v12 + 16);
    if (v13 == 62)
      v14 = (_DWORD *)v12;
    else
      v14 = 0;
    if (v10 && v13 == 62)
    {
      if ((*(_DWORD *)(*(_QWORD *)v14 + 8) & 0xFE) == 0x12)
        goto LABEL_31;
      v15 = (_BYTE **)&v14[-8 * (v14[5] & 0x7FFFFFF)];
LABEL_24:
      v16 = *v15;
LABEL_30:
      sub_1C5B36FFC(v3, v16, (uint64_t)&p_j, (uint64_t)&v649);
      goto LABEL_31;
    }
    if (v10 && v13 == 60 || v10 && v13 == 61)
      goto LABEL_29;
    if (v10 && v13 == 65)
    {
      v16 = *(_BYTE **)(v12 - 64);
      goto LABEL_30;
    }
    if (v10 && v13 == 64)
    {
      v16 = *(_BYTE **)(v12 - 96);
      goto LABEL_30;
    }
    v19 = sub_1C4DE85D0(v12);
    if (v10 && v19)
    {
      sub_1C5B36FFC(v3, *(_BYTE **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)), (uint64_t)&p_j, (uint64_t)&v649);
      v20 = *(_DWORD *)(*(_QWORD *)(v12 - 32) + 36) - 194;
      if (v20 <= 3 && v20 != 1)
      {
        v16 = *(_BYTE **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
        goto LABEL_30;
      }
    }
    else
    {
      v22 = *(unsigned __int8 *)(v12 + 16);
      if (v22 == 84)
      {
        v23 = *(_QWORD *)(v12 - 32);
        if (v23
          && !*(_BYTE *)(v23 + 16)
          && *(_QWORD *)(v23 + 24) == *(_QWORD *)(v12 + 72)
          && (*(_BYTE *)(v23 + 33) & 0x20) != 0)
        {
          if ((*(_DWORD *)(*(_QWORD *)(v10 - 56) + 36) | 0x10) == 0xFC)
          {
            v15 = (_BYTE **)(v11 - 32 * (*(_DWORD *)(v10 - 4) & 0x7FFFFFF));
            goto LABEL_24;
          }
          v638 = &v640;
          v639 = 0x200000000;
          v28 = (*(uint64_t (**)(_QWORD, void **))(***(_QWORD ***)(v3 + 16) + 128))(**(_QWORD **)(v3 + 16), &v638);
          v29 = (unsigned int *)v638;
          if (v28 && (_DWORD)v639)
          {
            v30 = 4 * v639;
            do
            {
              v31 = *v29++;
              sub_1C5B36FFC(v3, *(_BYTE **)(v11 - 32 * (*(_DWORD *)(v10 - 4) & 0x7FFFFFF) + 32 * v31), (uint64_t)&p_j, (uint64_t)&v649);
              v30 -= 4;
            }
            while (v30);
            v29 = (unsigned int *)v638;
          }
          if (v29 != (unsigned int *)&v640)
            free(v29);
        }
      }
      else if (v10 && v22 == 81)
      {
        v24 = *(_BYTE **)(v12 - 64);
        if (*(_BYTE *)(*(_QWORD *)v24 + 8) == 15)
        {
          sub_1C5B36FFC(v3, v24, (uint64_t)&p_j, (uint64_t)&v649);
LABEL_29:
          v16 = *(_BYTE **)(v12 - 32);
          goto LABEL_30;
        }
      }
      else
      {
        v25 = v22 == 78 ? v12 : 0;
        if (v10 && v22 == 78)
        {
          if ((*(_DWORD *)(*(_QWORD *)v25 + 8) & 0xFE) != 0x12)
          {
            v16 = *(_BYTE **)(v25 - 32);
            goto LABEL_30;
          }
        }
        else
        {
          if (v22 != 76)
            v12 = 0;
          if (v10 && v22 == 76 && sub_1C5B36D5C(v12, *(_QWORD *)(v3 + 24), *(_QWORD **)(v3 + 16)))
          {
            v26 = *(_QWORD *)(v12 - 32);
            v27 = *(_DWORD *)(v26 + 20);
            if ((v27 & 0x40000000) != 0)
              v15 = *(_BYTE ***)(v26 - 8);
            else
              v15 = (_BYTE **)(v26 - 32 * (v27 & 0x7FFFFFF));
            goto LABEL_24;
          }
        }
      }
    }
LABEL_31:
    v10 = *(_QWORD *)(v10 + 8);
    v17 = i - 24;
    if (!i)
      v17 = 0;
    if (v10 == v17 + 40)
      break;
LABEL_38:
    if (i == v7)
      goto LABEL_86;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v7)
      break;
    v18 = i - 24;
    if (!i)
      v18 = 0;
    v10 = *(_QWORD *)(v18 + 48);
    if (v10 != v18 + 40)
      goto LABEL_38;
  }
LABEL_86:
  v32 = v644;
  v628 = 0;
  v629 = 0;
  for (j = 0; v32; LODWORD(v644) = v32)
  {
    while (1)
    {
      v33 = (char *)p_j + 8 * v32;
      v34 = *((_QWORD *)v33 - 1);
      v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if ((v34 & 4) != 0)
        break;
      *((_QWORD *)v33 - 1) = v34 | 4;
      if ((*(unsigned int (**)(_QWORD, unint64_t))(***(_QWORD ***)(v3 + 16) + 152))(**(_QWORD **)(v3 + 16), v34 & 0xFFFFFFFFFFFFFFF8) == -1)
      {
        sub_1C5B36EE0(&v638, v35);
        v36 = v638;
        if ((_DWORD)v639)
        {
          v37 = 8 * v639;
          do
          {
            v38 = (_BYTE *)*v36++;
            sub_1C5B36FFC(v3, v38, (uint64_t)&p_j, (uint64_t)&v649);
            v37 -= 8;
          }
          while (v37);
          v36 = v638;
        }
        if (v36 != &v640)
          free(v36);
      }
      v32 = v644;
      if (!(_DWORD)v644)
        goto LABEL_130;
    }
    v39 = *(_DWORD *)(*(_QWORD *)v35 + 8);
    if ((v39 & 0xFE) == 0x12)
      v39 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v35 + 16) + 8);
    if (*(_DWORD *)(v3 + 32) == v39 >> 8)
    {
      v638 = (void *)6;
      v639 = 0;
      v640 = (_QWORD ***)(v34 & 0xFFFFFFFFFFFFFFF8);
      if (v35 != -8192 && v35 != -4096 && v35 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v638);
      v41 = v628;
      if ((unint64_t)v628 >= v629)
      {
        v45 = (unint64_t *)sub_1C571CA4C(&j, &v638);
      }
      else
      {
        *v628 = 6;
        v41[1] = 0;
        v42 = v640;
        v41[2] = (unint64_t)v640;
        if (v42 != (_QWORD ***)-8192 && v42 != (_QWORD ***)-4096)
        {
          if (v42)
          {
            v43 = (unint64_t)v638 & 0xFFFFFFFFFFFFFFF8;
            v41[1] = *(_QWORD *)((unint64_t)v638 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)v43 = v41;
            *v41 = v43 | 6;
            v44 = (unint64_t *)v41[1];
            if (v44)
              *v44 = *v44 & 7 | (unint64_t)(v41 + 1);
          }
        }
        v45 = v41 + 3;
      }
      v628 = v45;
      if (v640 != (_QWORD ***)-8192 && v640 != (_QWORD ***)-4096 && v640)
      {
        v46 = (unint64_t)v638 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v638 & 0xFFFFFFFFFFFFFFF8) = v639;
        if (v639)
        {
          *(_QWORD *)v639 = *(_QWORD *)v639 & 7 | v46;
        }
        else
        {
          v47 = v640;
          v48 = (int32x2_t *)***v640;
          v49 = (unint64_t)v48[303];
          if (v49 <= v46)
          {
            v50 = v48[305].u32[0];
            if (v49 + 16 * v50 > v46)
            {
              v51 = v50 - 1;
              LODWORD(v52) = v51 & ((v640 >> 4) ^ (v640 >> 9));
              v53 = (_QWORD *)(v49 + 16 * v52);
              v54 = (_QWORD ***)*v53;
              if (v640 == (_QWORD ***)*v53)
              {
LABEL_125:
                *v53 = -8192;
                v48[304] = vadd_s32(v48[304], (int32x2_t)0x1FFFFFFFFLL);
                v47 = v640;
              }
              else
              {
                v55 = 1;
                while (v54 != (_QWORD ***)-4096)
                {
                  v56 = v52 + v55++;
                  v52 = v56 & v51;
                  v54 = *(_QWORD ****)(v49 + 16 * v52);
                  if (v640 == v54)
                  {
                    v53 = (_QWORD *)(v49 + 16 * v52);
                    goto LABEL_125;
                  }
                }
              }
              *((_BYTE *)v47 + 17) &= ~1u;
            }
          }
        }
      }
      v32 = v644;
    }
    --v32;
  }
LABEL_130:
  MEMORY[0x1CAA32FB4](v649, 8);
  if (p_j != &v645)
    free(p_j);
  v625[0] = 0;
  v625[1] = 0;
  v626 = 0;
  v623[0] = 0;
  v623[1] = 0;
  v624 = 0;
  v57 = j;
  v58 = v628;
  p_j = 0;
  v644 = 0;
  v645 = 0;
  v647 = 0;
  v648 = 0;
  v646 = 0;
  sub_1C6318108((uint64_t)&p_j, j, (uint64_t)v628);
  if (v58 != (unint64_t *)v57)
  {
    while (2)
    {
      v59 = *(void **)(v57 + 16);
      v638 = v59;
      if (v626)
      {
        v60 = ((v59 >> 4) ^ (v59 >> 9)) & (v626 - 1);
        v61 = (_QWORD *)(v625[0] + 16 * v60);
        v62 = (void *)*v61;
        if (v59 != (void *)*v61)
        {
          v63 = 0;
          v64 = 1;
          while (v62 != (void *)-4096)
          {
            if (v63)
              v65 = 0;
            else
              v65 = v62 == (void *)-8192;
            if (v65)
              v63 = v61;
            v66 = v60 + v64++;
            v60 = v66 & (v626 - 1);
            v61 = (_QWORD *)(v625[0] + 16 * v60);
            v62 = (void *)*v61;
            if (v59 == (void *)*v61)
              goto LABEL_148;
          }
          if (v63)
            v67 = v63;
          else
            v67 = v61;
LABEL_147:
          v61 = sub_1C504A120((uint64_t)v625, (uint64_t)&v638, (uint64_t *)&v638, v67);
          *v61 = v638;
          *((_DWORD *)v61 + 2) = 0;
        }
LABEL_148:
        *((_DWORD *)v61 + 2) = -1;
        v57 += 24;
        if ((unint64_t *)v57 == v58)
          goto LABEL_151;
        continue;
      }
      break;
    }
    v67 = 0;
    goto LABEL_147;
  }
LABEL_151:
  v68 = v646;
  v69 = v647;
  v620 = v3;
  if (v646 == v647)
    goto LABEL_307;
  while (2)
  {
    v70 = *(v69 - 1);
    sub_1C52CDB34((uint64_t)&p_j);
    v71 = *(unsigned __int8 *)(v70 + 16);
    v517 = v71 >= 0x1C;
    v72 = v71 - 28;
    if (!v517)
      v72 = *(unsigned __int16 *)(v70 + 18);
    if (v72 == 57)
    {
      v73 = *(_DWORD *)(v70 + 20);
      if ((v73 & 0x40000000) != 0)
        v74 = *(_QWORD *)(v70 - 8);
      else
        v74 = v70 - 32 * (v73 & 0x7FFFFFF);
      v107 = *(unsigned __int8 **)(v74 + 32);
      v108 = v625[0];
      if (v626)
      {
        v109 = ((v107 >> 4) ^ (v107 >> 9)) & (v626 - 1);
        v110 = *(unsigned __int8 **)(v625[0] + 16 * v109);
        if (v107 == v110)
        {
LABEL_212:
          v108 = v625[0] + 16 * v626;
          if ((_DWORD)v109 == v626)
            goto LABEL_213;
          v112 = *(_DWORD *)(v625[0] + 16 * v109 + 8);
LABEL_217:
          v113 = *(unsigned __int8 **)(v74 + 64);
          if (v626)
          {
            LODWORD(v114) = ((v113 >> 4) ^ (v113 >> 9)) & (v626 - 1);
            v115 = v625[0] + 16 * v114;
            v116 = *(unsigned __int8 **)v115;
            if (v113 == *(unsigned __int8 **)v115)
            {
LABEL_219:
              if (v115 != v108)
              {
                v75 = *(_DWORD *)(v115 + 8);
                goto LABEL_237;
              }
            }
            else
            {
              v119 = 1;
              while (v116 != (unsigned __int8 *)-4096)
              {
                v120 = v114 + v119++;
                v114 = v120 & (v626 - 1);
                v116 = *(unsigned __int8 **)(v625[0] + 16 * v114);
                if (v113 == v116)
                {
                  v115 = v625[0] + 16 * v114;
                  goto LABEL_219;
                }
              }
            }
          }
          v121 = *(_DWORD *)(*(_QWORD *)v113 + 8);
          if ((v121 & 0xFE) == 0x12)
            v121 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v113 + 16) + 8);
          v75 = v121 >> 8;
LABEL_237:
          if (v107[16] >= 0x15u)
            v122 = 0;
          else
            v122 = (uint64_t *)v107;
          if (v113[16] >= 0x15u)
            v123 = 0;
          else
            v123 = (uint64_t *)v113;
          if (v123)
            v124 = v112 == -1;
          else
            v124 = 0;
          if (!v124 && (!v122 || v75 != -1))
          {
            if (!v122 || (sub_1C5B372A8(v3, v122, v75) & 1) == 0)
            {
              if (v123 && (sub_1C5B372A8(v3, v123, v112) & 1) != 0)
              {
                v75 = v112;
              }
              else
              {
                v126 = v112 == -1;
                v127 = *(_DWORD *)(v3 + 32);
                if (v112 == -1)
                  v128 = v75;
                else
                  v128 = v112;
                v129 = v127 == v112 || v127 == v75;
                v130 = v129;
                if (v129)
                  v126 = 1;
                if (v75 == -1)
                  v126 = 1;
                if (v130)
                  v128 = *(_DWORD *)(v3 + 32);
                if (v112 == v75)
                  v127 = v112;
                if (v126)
                  v75 = v128;
                else
                  v75 = v127;
              }
            }
            goto LABEL_277;
          }
          goto LABEL_304;
        }
        v117 = 1;
        while (v110 != (unsigned __int8 *)-4096)
        {
          v118 = v109 + v117++;
          v109 = v118 & (v626 - 1);
          v110 = *(unsigned __int8 **)(v625[0] + 16 * v109);
          if (v107 == v110)
            goto LABEL_212;
        }
        v108 = v625[0] + 16 * v626;
      }
LABEL_213:
      v111 = *(_DWORD *)(*(_QWORD *)v107 + 8);
      if ((v111 & 0xFE) == 0x12)
        v111 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v107 + 16) + 8);
      v112 = v111 >> 8;
      goto LABEL_217;
    }
    v75 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v3 + 16) + 152))(**(_QWORD **)(v3 + 16), v70);
    if (v75 != -1)
      goto LABEL_277;
    sub_1C5B36EE0(&v638, v70);
    v76 = (uint64_t *)v638;
    if (!(_DWORD)v639)
    {
      v75 = -1;
      goto LABEL_224;
    }
    v77 = (uint64_t *)((char *)v638 + 8 * v639);
    v75 = -1;
    while (2)
    {
      v78 = *v76;
      if (!v626)
      {
LABEL_163:
        v81 = *(_DWORD *)(*(_QWORD *)v78 + 8);
        if ((v81 & 0xFE) == 0x12)
          v81 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v78 + 16) + 8);
        v82 = v81 >> 8;
        if (v81 >> 8 != *(_DWORD *)(v3 + 32))
          goto LABEL_183;
        v83 = *(unsigned __int8 *)(v70 + 16);
        v84 = v83 >= 0x1C ? (const llvm::Instruction *)v70 : 0;
        if (v83 < 0x1C)
          goto LABEL_183;
        v86 = llvm::Value::stripInBoundsOffsets(*v76, (void (*)(uint64_t, uint64_t))nullsub_615, (uint64_t)&v649);
        v87 = *(llvm::AssumptionCache **)v3;
        if (!*(_BYTE *)(*(_QWORD *)v3 + 184))
          llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)v3);
        v88 = *((_QWORD *)v87 + 20);
        v89 = *((_DWORD *)v87 + 44);
        if (v89)
        {
          v99 = v89 - 1;
          v100 = (v89 - 1) & ((v86 >> 4) ^ (v86 >> 9));
          v90 = v88 + 88 * v100;
          v101 = *(_QWORD *)(v90 + 24);
          if (v101 == v86)
            goto LABEL_174;
          v102 = 1;
          while (v101 != -4096)
          {
            v103 = v100 + v102++;
            v100 = v103 & v99;
            v90 = v88 + 88 * (v103 & v99);
            v101 = *(_QWORD *)(v90 + 24);
            if (v101 == v86)
              goto LABEL_174;
          }
        }
        v90 = v88 + 88 * v89;
LABEL_174:
        if (v90 != v88 + 88 * v89)
        {
          v91 = *(unsigned int *)(v90 + 48);
          if ((_DWORD)v91)
          {
            v92 = 32 * v91;
            v93 = (llvm **)(*(_QWORD *)(v90 + 40) + 16);
            while (1)
            {
              v94 = *v93;
              if (*v93)
              {
                if (llvm::isValidAssumeForContext(*v93, v84, *(const llvm::Instruction **)(v620 + 8), v85)&& (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v620 + 16) + 160))(**(_QWORD **)(v620 + 16), *((_QWORD *)v94 - 4 * (*((_DWORD *)v94 + 5) & 0x7FFFFFF))))
                {
                  break;
                }
              }
              v93 += 4;
              v92 -= 32;
              if (!v92)
              {
                v3 = v620;
                goto LABEL_183;
              }
            }
            v106 = v95;
            v3 = v620;
            if (v95 != -1)
            {
              v649 = v70;
              v650 = v78;
              *((_DWORD *)sub_1C63181A0((uint64_t)v623, &v649) + 4) = v95;
              v82 = v106;
            }
          }
        }
        goto LABEL_183;
      }
      v79 = ((v78 >> 4) ^ (v78 >> 9)) & (v626 - 1);
      v80 = *(_QWORD *)(v625[0] + 16 * v79);
      if (v78 != v80)
      {
        v104 = 1;
        while (v80 != -4096)
        {
          v105 = v79 + v104++;
          v79 = v105 & (v626 - 1);
          v80 = *(_QWORD *)(v625[0] + 16 * v79);
          if (v78 == v80)
            goto LABEL_162;
        }
        goto LABEL_163;
      }
LABEL_162:
      if ((_DWORD)v79 == v626)
        goto LABEL_163;
      v82 = *(_DWORD *)(v625[0] + 16 * v79 + 8);
LABEL_183:
      v96 = *(_DWORD *)(v3 + 32);
      if (v96 != v75 && v96 != v82)
      {
        if (v75 == v82)
          v98 = v75;
        else
          v98 = *(_DWORD *)(v3 + 32);
        if (v82 == -1)
          v98 = v75;
        if (v75 == -1)
          v75 = v82;
        else
          v75 = v98;
        if (v75 == v96)
          goto LABEL_223;
        if (++v76 == v77)
          goto LABEL_223;
        continue;
      }
      break;
    }
    v75 = *(_DWORD *)(v3 + 32);
LABEL_223:
    v76 = (uint64_t *)v638;
LABEL_224:
    if (v76 != (uint64_t *)&v640)
      free(v76);
LABEL_277:
    if (!v626)
      goto LABEL_284;
    v131 = (v626 - 1) & ((v70 >> 4) ^ (v70 >> 9));
    v132 = *(_QWORD *)(v625[0] + 16 * v131);
    if (v70 != v132)
    {
      v134 = 1;
      while (v132 != -4096)
      {
        v135 = v131 + v134++;
        v131 = v135 & (v626 - 1);
        v132 = *(_QWORD *)(v625[0] + 16 * v131);
        if (v70 == v132)
          goto LABEL_279;
      }
LABEL_284:
      v133 = 0;
      goto LABEL_285;
    }
LABEL_279:
    v133 = *(_DWORD *)(v625[0] + 16 * v131 + 8);
LABEL_285:
    if (v133 != v75)
    {
      v638 = (void *)v70;
      *((_DWORD *)sub_1C504CE94((uint64_t)v625, (uint64_t *)&v638) + 2) = v75;
      v136 = *(_QWORD *)(v70 + 8);
      if (v136)
      {
        while (2)
        {
          v137 = *(void **)(v136 + 24);
          v638 = v137;
          if (v645)
          {
            v138 = ((v137 >> 4) ^ (v137 >> 9)) & (v645 - 1);
            v139 = (void *)*((_QWORD *)p_j + v138);
            if (v137 == v139)
              goto LABEL_289;
            v140 = 1;
            while (v139 != (void *)-4096)
            {
              v141 = v138 + v140++;
              v138 = v141 & (v645 - 1);
              v139 = (void *)*((_QWORD *)p_j + v138);
              if (v137 == v139)
                goto LABEL_289;
            }
          }
          if (v626)
          {
            v142 = (v626 - 1) & ((v137 >> 4) ^ (v137 >> 9));
            v143 = *(void **)(v625[0] + 16 * v142);
            if (v137 == v143)
            {
LABEL_297:
              if ((_DWORD)v142 != v626 && *(_DWORD *)(v625[0] + 16 * v142 + 8) != *(_DWORD *)(v3 + 32))
                sub_1C4D954B8(&p_j, &v638);
            }
            else
            {
              v144 = 1;
              while (v143 != (void *)-4096)
              {
                v145 = v142 + v144++;
                v142 = v145 & (v626 - 1);
                v143 = *(void **)(v625[0] + 16 * v142);
                if (v137 == v143)
                  goto LABEL_297;
              }
            }
          }
LABEL_289:
          v136 = *(_QWORD *)(v136 + 8);
          if (!v136)
            break;
          continue;
        }
      }
    }
LABEL_304:
    v68 = v646;
    v69 = v647;
    if (v646 != v647)
      continue;
    break;
  }
LABEL_307:
  if (v68)
  {
    v647 = v68;
    operator delete(v68);
  }
  MEMORY[0x1CAA32FB4](p_j, 8);
  v147 = j;
  v146 = v628;
  v632 = 128;
  v148 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v630 = v148;
  v631 = 0;
  if (v632)
  {
    v149 = (unint64_t)v632 << 6;
    v150 = v148 + 16;
    do
    {
      *v150 = 0;
      v150[1] = -4096;
      *(v150 - 2) = &unk_1E814DA10;
      *(v150 - 1) = 2;
      v150[2] = 0;
      v150 += 8;
      v149 -= 64;
    }
    while (v149);
  }
  LOBYTE(v633[0]) = 0;
  v634 = 0;
  p_j = &v645;
  v644 = 0x2000000000;
  if (v146 == (unint64_t *)v147)
  {
    v5 = 0;
    goto LABEL_941;
  }
  v151 = v147 + 8 * (((uint64_t)v146 - v147) >> 3);
  v152 = &v640;
  v615 = v147;
  v617 = v151;
  while (2)
  {
    v153 = *(_QWORD *)(v147 + 16);
    if (!v626)
    {
LABEL_322:
      v156 = 0;
      goto LABEL_323;
    }
    v154 = ((v153 >> 4) ^ (v153 >> 9)) & (v626 - 1);
    v155 = *(_QWORD *)(v625[0] + 16 * v154);
    if (v153 != v155)
    {
      v157 = 1;
      while (v155 != -4096)
      {
        v158 = v154 + v157++;
        v154 = v158 & (v626 - 1);
        v155 = *(_QWORD *)(v625[0] + 16 * v154);
        if (v153 == v155)
          goto LABEL_316;
      }
      goto LABEL_322;
    }
LABEL_316:
    v156 = (llvm::Type *)*(unsigned int *)(v625[0] + 16 * v154 + 8);
    if ((_DWORD)v156 == -1)
      goto LABEL_444;
LABEL_323:
    v159 = *(_QWORD *)v153;
    v160 = *(_DWORD *)(*(_QWORD *)v153 + 8);
    if ((v160 & 0xFE) == 0x12)
      v160 = *(_DWORD *)(**(_QWORD **)(v159 + 16) + 8);
    if ((_DWORD)v156 == v160 >> 8)
      goto LABEL_444;
    if (*(unsigned __int8 *)(v153 + 16) >= 0x1Cu)
    {
      v162 = *(llvm::PointerType **)(v159 + 24);
      if (v162)
        v163 = llvm::PointerType::get(v162, v156);
      else
        v163 = llvm::PointerType::get(*(llvm::PointerType **)v159, v156);
      v164 = v163;
      v165 = *(unsigned __int8 *)(v153 + 16);
      if (v165 == 84)
      {
        v168 = *(_QWORD *)(v153 - 32);
        if (v168
          && !*(_BYTE *)(v168 + 16)
          && *(_QWORD *)(v168 + 24) == *(_QWORD *)(v153 + 72)
          && (*(_BYTE *)(v168 + 33) & 0x20) != 0)
        {
          v263 = *(_DWORD *)(v153 + 20);
          if ((v263 & 0x40000000) != 0)
            v264 = *(unsigned __int8 ***)(v153 - 8);
          else
            v264 = (unsigned __int8 **)(v153 - 32 * (v263 & 0x7FFFFFF));
          v267 = sub_1C5B37B1C(v264, v156, (uint64_t *)&v630, (uint64_t)v623, (uint64_t)&p_j);
          v161 = (llvm::Value *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, llvm::UndefValue *))(***(_QWORD ***)(v3 + 16) + 168))(**(_QWORD **)(v3 + 16), v153, *(_QWORD *)(v153 - 32 * (*(_DWORD *)(v153 + 20) & 0x7FFFFFF)), v267);
          if (!v161)
            goto LABEL_444;
LABEL_416:
          if (*((unsigned __int8 *)v161 + 16) >= 0x1Cu && !*((_QWORD *)v161 + 5))
          {
            v236 = *(_QWORD *)(v153 + 40);
            *((_QWORD *)v161 + 5) = v236;
            *(_WORD *)(v236 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v161 + 23) & 0x10) != 0)
            {
              v265 = *(_QWORD *)(v236 + 56);
              if (v265)
              {
                v266 = *(llvm::ValueSymbolTable **)(v265 + 104);
                if (v266)
                  llvm::ValueSymbolTable::reinsertValue(v266, v161);
              }
            }
            v237 = *(_QWORD *)(v153 + 24);
            *((_QWORD *)v161 + 4) = v153 + 24;
            *((_QWORD *)v161 + 3) = v237;
            *(_QWORD *)(v237 + 8) = (char *)v161 + 24;
            *(_QWORD *)(v153 + 24) = (char *)v161 + 24;
            llvm::Value::takeName(v161, (llvm::Value *)v153);
          }
          goto LABEL_420;
        }
      }
      else if (v165 == 78)
      {
        v166 = *(_DWORD *)(v153 + 20);
        if ((v166 & 0x40000000) != 0)
          v167 = *(llvm::Value ***)(v153 - 8);
        else
          v167 = (llvm::Value **)(v153 - 32 * (v166 & 0x7FFFFFF));
        v161 = *v167;
        if (*(_QWORD *)*v167 != v163)
        {
          v177 = operator new(0x60uLL);
          v177[13] = v177[13] & 0x38000000 | 1;
          v178 = (llvm::Value *)(v177 + 8);
          *(_QWORD *)v177 = 0;
          *((_QWORD *)v177 + 1) = 0;
          *((_QWORD *)v177 + 2) = 0;
          *((_QWORD *)v177 + 3) = v177 + 8;
          LOWORD(v642) = 257;
          llvm::BitCastInst::BitCastInst((uint64_t)(v177 + 8), (uint64_t)v161, v164, (uint64_t)&v638, 0);
          v161 = v178;
        }
        goto LABEL_416;
      }
      result = (llvm::Type *)(*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v3 + 16) + 152))(**(_QWORD **)(v3 + 16), v153);
      if ((_DWORD)result != -1)
      {
        v169 = result;
        v170 = *(llvm::PointerType **)(*(_QWORD *)v153 + 24);
        if (v170)
          v171 = llvm::PointerType::get(v170, v169);
        else
          v171 = llvm::PointerType::get(**(llvm::PointerType ***)v153, v169);
        v172 = v171;
        v173 = operator new(0x60uLL);
        v173[13] = v173[13] & 0x38000000 | 1;
        v161 = (llvm::Value *)(v173 + 8);
        *(_QWORD *)v173 = 0;
        *((_QWORD *)v173 + 1) = 0;
        *((_QWORD *)v173 + 2) = 0;
        *((_QWORD *)v173 + 3) = v173 + 8;
        LOWORD(v642) = 257;
        llvm::AddrSpaceCastInst::AddrSpaceCastInst((uint64_t)(v173 + 8), v153, v172, (uint64_t)&v638, 0);
        sub_1C53DF664((_QWORD *)(*(_QWORD *)(v153 + 40) + 40), v153 + 24, (uint64_t)v161);
        goto LABEL_416;
      }
      v638 = v152;
      v639 = 0x400000000;
      v174 = *(_DWORD *)(v153 + 20);
      if ((v174 & 0x40000000) != 0)
      {
        v176 = *(unsigned __int8 ***)(v153 - 8);
        v175 = v174 & 0x7FFFFFF;
        if ((*(_DWORD *)(v153 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_359;
      }
      else
      {
        v175 = v174 & 0x7FFFFFF;
        v176 = (unsigned __int8 **)(v153 - 32 * v175);
        if ((v174 & 0x7FFFFFF) == 0)
          goto LABEL_359;
      }
      v179 = 0;
      v180 = 32 * v175;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)*v176 + 8) == 15)
        {
          result = sub_1C5B37B1C(v176, v156, (uint64_t *)&v630, (uint64_t)v623, (uint64_t)&p_j);
          v181 = result;
          v182 = v639;
          if (v639 >= (unint64_t)HIDWORD(v639))
          {
            result = (llvm::Type *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v638, (uint64_t)v152, v639 + 1, 8);
            v182 = v639;
          }
          *((_QWORD *)v638 + v182) = v181;
        }
        else
        {
          if (v179 >= HIDWORD(v639))
          {
            result = (llvm::Type *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v638, (uint64_t)v152, v179 + 1, 8);
            v179 = v639;
          }
          *((_QWORD *)v638 + v179) = 0;
        }
        v179 = v639 + 1;
        LODWORD(v639) = v639 + 1;
        v176 += 4;
        v180 -= 32;
      }
      while (v180);
LABEL_359:
      switch(*(_BYTE *)(v153 + 16))
      {
        case 'L':
          v183 = *(_DWORD *)(v153 + 20);
          v3 = v620;
          if ((v183 & 0x40000000) != 0)
            v184 = *(uint64_t **)(v153 - 8);
          else
            v184 = (uint64_t *)(v153 - 32 * (v183 & 0x7FFFFFF));
          v226 = *v184;
          v227 = *(_DWORD *)(v226 + 20);
          if ((v227 & 0x40000000) != 0)
            v228 = *(llvm::Value ***)(v226 - 8);
          else
            v228 = (llvm::Value **)(v226 - 32 * (v227 & 0x7FFFFFF));
          v161 = *v228;
          if (*(_QWORD *)*v228 != v164)
          {
            v653 = 257;
            v229 = *(_DWORD *)(*(_QWORD *)v161 + 8);
            if ((v229 & 0xFE) == 0x12)
              v229 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v161 + 16) + 8);
            v230 = *(_DWORD *)(v164 + 8);
            if ((v230 & 0xFE) == 0x12)
              v230 = *(_DWORD *)(**(_QWORD **)(v164 + 16) + 8);
            v231 = v230 ^ v229;
            v232 = (char *)operator new(0x60uLL);
            *((_QWORD *)v232 + 4) = v164;
            v233 = (llvm::Value *)(v232 + 32);
            *((_QWORD *)v232 + 1) = 0;
            *(_QWORD *)v232 = 0;
            *((_QWORD *)v232 + 2) = 0;
            *((_QWORD *)v232 + 3) = v232 + 32;
            *((_QWORD *)v232 + 5) = 0;
            if (v231 >= 0x100)
              v234 = 78;
            else
              v234 = 77;
            *((_QWORD *)v232 + 6) = v234 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
            *(_OWORD *)(v232 + 56) = 0u;
            *(_OWORD *)(v232 + 72) = 0u;
            *((_DWORD *)v232 + 22) = 0;
            *(_QWORD *)v232 = v161;
            v235 = *((_QWORD *)v161 + 1);
            *((_QWORD *)v232 + 1) = v235;
            v151 = v617;
            if (v235)
              *(_QWORD *)(v235 + 16) = v232 + 8;
            *((_QWORD *)v232 + 2) = (char *)v161 + 8;
            *((_QWORD *)v161 + 1) = v232;
            llvm::Value::setName((uint64_t ***)v232 + 4, (uint64_t)&v649);
            v161 = v233;
          }
          goto LABEL_413;
        case 'M':
          v187 = operator new(0x60uLL);
          v161 = (llvm::Value *)(v187 + 8);
          v187[13] = v187[13] & 0x38000000 | 1;
          *(_QWORD *)v187 = 0;
          *((_QWORD *)v187 + 1) = 0;
          *((_QWORD *)v187 + 2) = 0;
          *((_QWORD *)v187 + 3) = v187 + 8;
          v188 = *(_QWORD *)v638;
          v653 = 257;
          llvm::BitCastInst::BitCastInst((uint64_t)(v187 + 8), v188, v164, (uint64_t)&v649, 0);
          v3 = v620;
          goto LABEL_413;
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'T':
          __break(1u);
          return result;
        case 'S':
          v189 = *(_DWORD *)(v153 + 20) & 0x7FFFFFF;
          v653 = 257;
          v190 = operator new(0x48uLL);
          v190[1] = v164;
          v161 = (llvm::Value *)(v190 + 1);
          *v190 = 0;
          v190[2] = 0;
          v190[3] = 0x4000000000000053;
          *((_OWORD *)v190 + 2) = 0u;
          *((_OWORD *)v190 + 3) = 0u;
          *((_DWORD *)v190 + 16) = 0;
          *((_DWORD *)v190 + 17) = v189;
          llvm::Value::setName((uint64_t ***)v190 + 1, (uint64_t)&v649);
          v191 = *((unsigned int *)v190 + 17);
          v192 = operator new(40 * v191);
          *v190 = v192;
          v3 = v620;
          if ((_DWORD)v191)
          {
            v193 = &v192[4 * v191];
            do
            {
              *v192 = 0;
              v192[1] = 0;
              v192[2] = 0;
              v192[3] = v161;
              v192 += 4;
            }
            while (v192 != v193);
          }
          v194 = *(_DWORD *)(v153 + 20);
          v195 = v194 & 0x7FFFFFF;
          if ((v194 & 0x7FFFFFF) != 0)
          {
            v196 = 0;
            v151 = v617;
            do
            {
              if ((v194 & 0x40000000) != 0)
                v197 = *(_QWORD *)(v153 - 8);
              else
                v197 = v153 - 32 * v195;
              sub_1C477667C(v161, *((_QWORD *)v638 + v196), *(_QWORD *)(v197 + 32 * *(unsigned int *)(v153 + 60) + 8 * v196));
              ++v196;
              v194 = *(_DWORD *)(v153 + 20);
              v195 = v194 & 0x7FFFFFF;
            }
            while (v196 < v195);
          }
          else
          {
            v151 = v617;
          }
          goto LABEL_413;
        case 'U':
          v185 = *(_DWORD *)(v153 + 20);
          v3 = v620;
          if ((v185 & 0x40000000) != 0)
            v186 = *(uint64_t **)(v153 - 8);
          else
            v186 = (uint64_t *)(v153 - 32 * (v185 & 0x7FFFFFF));
          v223 = *v186;
          v224 = (uint64_t *)*((_QWORD *)v638 + 1);
          v225 = *((_QWORD *)v638 + 2);
          v653 = 257;
          v161 = sub_1C4FC8748(v223, v224, v225, (uint64_t)&v649, 0, v153);
          goto LABEL_413;
        default:
          TypeAtIndex = *(llvm::GetElementPtrInst **)(v153 + 64);
          v199 = *(uint64_t **)v638;
          v200 = *(_DWORD *)(v153 + 20) & 0x7FFFFFF;
          v201 = (llvm::Value *)&v651;
          v649 = (uint64_t)&v651;
          v650 = 0x400000000;
          v202 = -(-32 * v200 + 32);
          if ((unint64_t)v202 >= 0x81)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v649, (uint64_t)&v651, v202 >> 5, 8);
            v203 = v650;
            v201 = (llvm::Value *)v649;
            v204 = v650;
          }
          else
          {
            v203 = 0;
            v204 = 0;
          }
          v618 = v152;
          if (v153 - 32 * v200 + 32 != v153)
          {
            v205 = (_QWORD *)((char *)v201 + 8 * v203);
            v206 = 32 - 32 * v200;
            do
            {
              *v205++ = *(_QWORD *)(v153 + v206);
              v206 += 32;
            }
            while (v206);
            v201 = (llvm::Value *)v649;
          }
          v207 = v204 + ((unint64_t)v202 >> 5);
          LODWORD(v650) = v207;
          v208 = (v207 + 1);
          v636 = 257;
          v209 = (llvm::Value *)operator new(32 * v208 + 80);
          v161 = (llvm::Value *)((char *)v209 + 32 * v208);
          *((_DWORD *)v161 + 5) = *((_DWORD *)v161 + 5) & 0x38000000 | v208 & 0x7FFFFFF;
          if ((_DWORD)v207 != -1)
          {
            do
            {
              *(_QWORD *)v209 = 0;
              *((_QWORD *)v209 + 1) = 0;
              *((_QWORD *)v209 + 2) = 0;
              *((_QWORD *)v209 + 3) = v161;
              v209 = (llvm::Value *)((char *)v209 + 32);
            }
            while (v209 != v161);
          }
          sub_1C4774650(TypeAtIndex, v199, v201, v207);
          *(_QWORD *)v161 = v211;
          *((_QWORD *)v161 + 1) = 0;
          v212 = *((_DWORD *)v161 + 5) & 0xC0000000 | v208 & 0x7FFFFFF;
          *((_DWORD *)v161 + 4) = 62;
          *((_DWORD *)v161 + 5) = v212;
          *(_OWORD *)((char *)v161 + 24) = 0u;
          *(_OWORD *)((char *)v161 + 40) = 0u;
          *((_DWORD *)v161 + 14) = 0;
          *((_QWORD *)v161 + 8) = TypeAtIndex;
          if ((_DWORD)v207)
          {
            v213 = (llvm::Type **)((char *)v201 + 8);
            v214 = 8 * v207 - 8;
            do
            {
              if (!v214)
                break;
              v215 = *v213++;
              TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v215, v210);
              v214 -= 8;
            }
            while (TypeAtIndex);
            v212 = *((_DWORD *)v161 + 5);
          }
          v151 = v617;
          v152 = v618;
          *((_QWORD *)v161 + 9) = TypeAtIndex;
          v216 = v212 & 0x7FFFFFF;
          v217 = -v216;
          v218 = (uint64_t **)((char *)v161 - 32 * v216);
          if (*v218)
          {
            v268 = (char *)v161 + 32 * v217;
            v270 = (_QWORD *)*((_QWORD *)v268 + 2);
            v269 = v268 + 16;
            *v270 = *(v269 - 1);
            v271 = *(v269 - 1);
            if (v271)
              *(_QWORD *)(v271 + 16) = *v269;
          }
          *v218 = v199;
          if (v199)
          {
            v221 = v199[1];
            v220 = (uint64_t ***)(v199 + 1);
            v219 = v221;
            v222 = (char *)v161 + 32 * v217;
            *((_QWORD *)v222 + 1) = v221;
            if (v221)
              *(_QWORD *)(v219 + 16) = v222 + 8;
            *((_QWORD *)v222 + 2) = v220;
            *v220 = v218;
          }
          sub_1C5382FD4((uint64_t)&v637, (uint64_t *)v201, (uint64_t *)v201 + v207, (uint64_t)v161 - 32 * (*((_DWORD *)v161 + 5) & 0x7FFFFFF) + 32);
          llvm::Value::setName((uint64_t ***)v161, (uint64_t)v635);
          if ((int32x2_t *****)v649 != &v651)
            free((void *)v649);
          *((_BYTE *)v161 + 17) = *((_BYTE *)v161 + 17) & 0xFD | *(_BYTE *)(v153 + 17) & 2;
          v3 = v620;
LABEL_413:
          if (v638 != v152)
            free(v638);
          if (v161)
            goto LABEL_416;
          goto LABEL_444;
      }
    }
    v161 = sub_1C5B37380(*(llvm::ConstantExpr **)(v147 + 16), v156, (uint64_t *)&v630);
    if (!v161)
      goto LABEL_444;
LABEL_420:
    v639 = 2;
    v640 = 0;
    v641 = (int32x2_t ****)v153;
    if (v153 != -8192 && v153 != -4096 && v153)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v639);
    v638 = &unk_1E814DA10;
    v642 = (uint64_t *)&v630;
    v238 = sub_1C52E2ED8((uint64_t)&v630, &v638);
    if (v641 != (int32x2_t ****)-8192 && v641 != (int32x2_t ****)-4096 && v641)
    {
      v239 = v639 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v639 & 0xFFFFFFFFFFFFFFF8) = v640;
      if (v640)
      {
        *v640 = (_QWORD **)((unint64_t)*v640 & 7 | v239);
      }
      else
      {
        v240 = v641;
        v241 = ***v641;
        v242 = (unint64_t)v241[303];
        if (v242 <= v239)
        {
          v243 = v241[305].u32[0];
          if (v242 + 16 * v243 > v239)
          {
            v244 = v243 - 1;
            LODWORD(v245) = v244 & ((v641 >> 4) ^ (v641 >> 9));
            v246 = (int32x2_t *****)(v242 + 16 * v245);
            v247 = *v246;
            if (v641 == *v246)
            {
LABEL_435:
              *v246 = (int32x2_t ****)-8192;
              v241[304] = vadd_s32(v241[304], (int32x2_t)0x1FFFFFFFFLL);
              v240 = v641;
            }
            else
            {
              v248 = 1;
              while (v247 != (int32x2_t ****)-4096)
              {
                v249 = v245 + v248++;
                v245 = v249 & v244;
                v247 = *(int32x2_t *****)(v242 + 16 * v245);
                if (v641 == v247)
                {
                  v246 = (int32x2_t *****)(v242 + 16 * v245);
                  goto LABEL_435;
                }
              }
            }
            *((_BYTE *)v240 + 17) &= ~1u;
          }
        }
      }
    }
    v250 = (llvm::Value *)v238[7];
    if (v250 != v161)
    {
      if (v250 && v250 != (llvm::Value *)-8192 && v250 != (llvm::Value *)-4096)
      {
        v251 = v238[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v251 = v238[6];
        v252 = (unint64_t *)v238[6];
        if (v252)
        {
          *v252 = *v252 & 7 | v251;
        }
        else
        {
          v253 = v238[7];
          v254 = ***(int32x2_t ****)v253;
          v255 = (unint64_t)v254[303];
          if (v255 <= v251)
          {
            v256 = v254[305].u32[0];
            if (v255 + 16 * v256 > v251)
            {
              v257 = v256 - 1;
              LODWORD(v258) = v257 & ((v253 >> 4) ^ (v253 >> 9));
              v259 = (uint64_t *)(v255 + 16 * v258);
              v260 = *v259;
              if (v253 == *v259)
              {
LABEL_456:
                *v259 = -8192;
                v254[304] = vadd_s32(v254[304], (int32x2_t)0x1FFFFFFFFLL);
                v253 = v238[7];
              }
              else
              {
                v261 = 1;
                while (v260 != -4096)
                {
                  v262 = v258 + v261++;
                  v258 = v262 & v257;
                  v260 = *(_QWORD *)(v255 + 16 * v258);
                  if (v253 == v260)
                  {
                    v259 = (uint64_t *)(v255 + 16 * v258);
                    goto LABEL_456;
                  }
                }
              }
              *(_BYTE *)(v253 + 17) &= ~1u;
            }
          }
        }
      }
      v238[7] = v161;
      if (v161 != (llvm::Value *)-8192 && v161 != (llvm::Value *)-4096 && v161)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v238 + 5));
    }
LABEL_444:
    v147 += 24;
    if (v147 != v151)
      continue;
    break;
  }
  v272 = (char *)p_j;
  v5 = (_DWORD)v631 != 0;
  if (!(_DWORD)v631)
    goto LABEL_938;
  v273 = v615;
  if ((_DWORD)v644)
  {
    v274 = (char *)p_j + 8 * v644;
    do
    {
      v275 = *(_QWORD **)v272;
      if (v632)
      {
        v276 = v275[3];
        v277 = (v632 - 1) & ((v276 >> 4) ^ (v276 >> 9));
        v278 = &v630[8 * v277];
        v279 = v278[3];
        if (v276 == v279)
          goto LABEL_483;
        v280 = 1;
        while (v279 != -4096)
        {
          v281 = v277 + v280++;
          v277 = v281 & (v632 - 1);
          v278 = &v630[8 * v277];
          v279 = v278[3];
          if (v276 == v279)
            goto LABEL_483;
        }
      }
      v278 = &v630[8 * (unint64_t)v632];
LABEL_483:
      v638 = (void *)6;
      if (v278 == &v630[8 * (unint64_t)v632])
      {
        v282 = 0;
        v283 = 0;
        v639 = 0;
        v640 = 0;
      }
      else
      {
        v282 = 0;
        v283 = (_QWORD ***)v278[7];
        v639 = 0;
        v640 = v283;
        if (v283 != (_QWORD ***)-8192 && v283 != (_QWORD ***)-4096 && v283 != 0)
        {
          v285 = v278[5] & 0xFFFFFFFFFFFFFFF8;
          v639 = *(_QWORD *)v285;
          *(_QWORD *)v285 = &v638;
          v638 = (void *)(v285 | 6);
          v282 = v639;
          if (v639)
            *(_QWORD *)v639 = *(_QWORD *)v639 & 7 | (unint64_t)&v639;
          v283 = v640;
        }
      }
      if (v283 != (_QWORD ***)-8192 && v283 != (_QWORD ***)-4096 && v283 != 0)
      {
        v295 = (unint64_t)v638 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v638 & 0xFFFFFFFFFFFFFFF8) = v282;
        if (v639)
        {
          *(_QWORD *)v639 = *(_QWORD *)v639 & 7 | v295;
        }
        else
        {
          v296 = v640;
          v297 = (int32x2_t *)***v640;
          v298 = (unint64_t)v297[303];
          if (v298 <= v295)
          {
            v299 = v297[305].u32[0];
            if (v298 + 16 * v299 > v295)
            {
              v300 = v299 - 1;
              LODWORD(v301) = v300 & ((v640 >> 4) ^ (v640 >> 9));
              v302 = (_QWORD *)(v298 + 16 * v301);
              v303 = (_QWORD ***)*v302;
              if (v640 == (_QWORD ***)*v302)
              {
LABEL_516:
                *v302 = -8192;
                v297[304] = vadd_s32(v297[304], (int32x2_t)0x1FFFFFFFFLL);
                v296 = v640;
              }
              else
              {
                v304 = 1;
                while (v303 != (_QWORD ***)-4096)
                {
                  v305 = v301 + v304++;
                  v301 = v305 & v300;
                  v303 = *(_QWORD ****)(v298 + 16 * v301);
                  if (v640 == v303)
                  {
                    v302 = (_QWORD *)(v298 + 16 * v301);
                    goto LABEL_516;
                  }
                }
              }
              *((_BYTE *)v296 + 17) &= ~1u;
            }
          }
        }
      }
      if (!v283)
        goto LABEL_554;
      v287 = v275[3];
      v288 = *(_DWORD *)(v287 + 20);
      if ((v288 & 0x40000000) != 0)
        v289 = *(_QWORD *)(v287 - 8);
      else
        v289 = v287 - 32 * (v288 & 0x7FFFFFF);
      if (v632)
      {
        v290 = ((*v275 >> 4) ^ (*v275 >> 9)) & (v632 - 1);
        v291 = &v630[8 * v290];
        v292 = v291[3];
        if (*v275 == v292)
          goto LABEL_519;
        v293 = 1;
        while (v292 != -4096)
        {
          v294 = v290 + v293++;
          v290 = v294 & (v632 - 1);
          v291 = &v630[8 * v290];
          v292 = v291[3];
          if (*v275 == v292)
            goto LABEL_519;
        }
      }
      v291 = &v630[8 * (unint64_t)v632];
LABEL_519:
      v638 = (void *)6;
      if (v291 == &v630[8 * (unint64_t)v632])
      {
        v306 = 0;
        v639 = 0;
        v640 = 0;
      }
      else
      {
        v306 = (_QWORD ***)v291[7];
        v639 = 0;
        v640 = v306;
        if (v306 != (_QWORD ***)-8192 && v306 != (_QWORD ***)-4096 && v306 != 0)
        {
          v308 = v291[5] & 0xFFFFFFFFFFFFFFF8;
          v639 = *(_QWORD *)v308;
          *(_QWORD *)v308 = &v638;
          v638 = (void *)(v308 | 6);
          if (v639)
            *(_QWORD *)v639 = *(_QWORD *)v639 & 7 | (unint64_t)&v639;
          v306 = v640;
        }
      }
      v309 = *((_DWORD *)v283 + 5);
      if ((v309 & 0x40000000) != 0)
        v310 = (_QWORD ***)*(v283 - 1);
      else
        v310 = &v283[-4 * (v309 & 0x7FFFFFF)];
      v311 = (((unint64_t)v275 - v289) >> 5);
      v312 = &v310[4 * v311];
      if (*v312)
      {
        *v312[2] = v312[1];
        v313 = v312[1];
        if (v313)
          v313[2] = v312[2];
      }
      *v312 = v306;
      if (v306)
      {
        v316 = v306[1];
        v314 = v306 + 1;
        v315 = v316;
        v317 = &v310[4 * v311];
        v317[1] = v316;
        if (v316)
          v315[2] = v317 + 1;
        v317[2] = (_QWORD **)v314;
        *v314 = v312;
      }
      if (v640 != (_QWORD ***)-8192 && v640 != (_QWORD ***)-4096 && v640)
      {
        v318 = (unint64_t)v638 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v638 & 0xFFFFFFFFFFFFFFF8) = v639;
        if (v639)
        {
          *(_QWORD *)v639 = *(_QWORD *)v639 & 7 | v318;
        }
        else
        {
          v319 = v640;
          v320 = (int32x2_t *)***v640;
          v321 = (unint64_t)v320[303];
          if (v321 <= v318)
          {
            v322 = v320[305].u32[0];
            if (v321 + 16 * v322 > v318)
            {
              v323 = v322 - 1;
              LODWORD(v324) = v323 & ((v640 >> 4) ^ (v640 >> 9));
              v325 = (_QWORD *)(v321 + 16 * v324);
              v326 = (_QWORD ***)*v325;
              if (v640 == (_QWORD ***)*v325)
              {
LABEL_549:
                *v325 = -8192;
                v320[304] = vadd_s32(v320[304], (int32x2_t)0x1FFFFFFFFLL);
                v319 = v640;
              }
              else
              {
                v327 = 1;
                while (v326 != (_QWORD ***)-4096)
                {
                  v328 = v324 + v327++;
                  v324 = v328 & v323;
                  v326 = *(_QWORD ****)(v321 + 16 * v324);
                  if (v640 == v326)
                  {
                    v325 = (_QWORD *)(v321 + 16 * v324);
                    goto LABEL_549;
                  }
                }
              }
              *((_BYTE *)v319 + 17) &= ~1u;
            }
          }
        }
      }
LABEL_554:
      v272 += 8;
    }
    while (v272 != v274);
  }
  v638 = &v640;
  v639 = 0x1000000000;
LABEL_558:
  v329 = *(llvm::Value **)(v273 + 16);
  if (v632)
  {
    v330 = (v632 - 1) & ((v329 >> 4) ^ (v329 >> 9));
    v331 = &v630[8 * v330];
    v332 = (llvm::Value *)v331[3];
    if (v329 != v332)
    {
      v333 = 1;
      while (v332 != (llvm::Value *)-4096)
      {
        v334 = v330 + v333++;
        v330 = v334 & (v632 - 1);
        v331 = &v630[8 * v330];
        v332 = (llvm::Value *)v331[3];
        if (v329 == v332)
          goto LABEL_565;
      }
      goto LABEL_564;
    }
  }
  else
  {
LABEL_564:
    v331 = &v630[8 * (unint64_t)v632];
  }
LABEL_565:
  v649 = 6;
  if (v331 == &v630[8 * (unint64_t)v632])
  {
    v335 = 0;
    v336 = 0;
    v650 = 0;
    v651 = 0;
  }
  else
  {
    v335 = 0;
    v336 = v331[7];
    v650 = 0;
    v651 = (int32x2_t ****)v336;
    if (v336 != -8192 && v336 != -4096 && v336 != 0)
    {
      v338 = v331[5] & 0xFFFFFFFFFFFFFFF8;
      v650 = *(_QWORD *)v338;
      *(_QWORD *)v338 = &v649;
      v649 = v338 | 6;
      v335 = v650;
      if (v650)
        *(_QWORD *)v650 = *(_QWORD *)v650 & 7 | (unint64_t)&v650;
      v336 = (uint64_t)v651;
    }
  }
  if (v336 != -8192 && v336 != -4096 && v336 != 0)
  {
    v570 = v649 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v649 & 0xFFFFFFFFFFFFFFF8) = v335;
    if (v650)
    {
      *(_QWORD *)v650 = *(_QWORD *)v650 & 7 | v570;
    }
    else
    {
      v571 = v651;
      v572 = ***v651;
      v573 = (unint64_t)v572[303];
      if (v573 <= v570)
      {
        v574 = v572[305].u32[0];
        if (v573 + 16 * v574 > v570)
        {
          v575 = v574 - 1;
          LODWORD(v576) = v575 & ((v651 >> 4) ^ (v651 >> 9));
          v577 = (int32x2_t *****)(v573 + 16 * v576);
          v578 = *v577;
          if (v651 == *v577)
          {
LABEL_923:
            *v577 = (int32x2_t ****)-8192;
            v572[304] = vadd_s32(v572[304], (int32x2_t)0x1FFFFFFFFLL);
            v571 = v651;
          }
          else
          {
            v579 = 1;
            while (v578 != (int32x2_t ****)-4096)
            {
              v580 = v576 + v579++;
              v576 = v580 & v575;
              v578 = *(int32x2_t *****)(v573 + 16 * v576);
              if (v651 == v578)
              {
                v577 = (int32x2_t *****)(v573 + 16 * v576);
                goto LABEL_923;
              }
            }
          }
          *((_BYTE *)v571 + 17) &= ~1u;
        }
      }
    }
  }
  if (!v336)
    goto LABEL_913;
  if (v329)
  {
    if (*((unsigned __int8 *)v329 + 16) <= 0x14u)
    {
      AddrSpaceCast = (llvm::Value *)llvm::ConstantExpr::getAddrSpaceCast((llvm::ConstantExpr *)v336, *(llvm::Constant ****)v329, 0);
      if (v329 != AddrSpaceCast)
      {
        v341 = AddrSpaceCast;
        llvm::Value::doRAUW(v329, AddrSpaceCast, (llvm::Value *)1);
        v329 = v341;
      }
    }
  }
  v342 = *((_QWORD *)v329 + 1);
  if (!v342)
  {
LABEL_909:
    if (*((unsigned __int8 *)v329 + 16) >= 0x1Cu)
    {
      v569 = v639;
      if (v639 >= (unint64_t)HIDWORD(v639))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v638, (uint64_t)&v640, v639 + 1, 8);
        v569 = v639;
      }
      *((_QWORD *)v638 + v569) = v329;
      LODWORD(v639) = v639 + 1;
    }
    goto LABEL_913;
  }
  v616 = v273;
  v619 = v329;
  while (2)
  {
    v343 = v342;
    v344 = *(_QWORD *)(v342 + 24);
    do
      v342 = *(_QWORD *)(v342 + 8);
    while (v342 && *(_QWORD *)(v342 + 24) == v344);
    v345 = *(_DWORD *)(*(_QWORD *)v329 + 8);
    if ((v345 & 0xFE) == 0x12)
      v345 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v329 + 16) + 8);
    v346 = *(_DWORD *)(v344 + 20);
    if ((v346 & 0x40000000) != 0)
      v347 = *(_QWORD *)(v344 - 8);
    else
      v347 = v344 - 32 * (v346 & 0x7FFFFFF);
    v348 = *(unsigned __int8 *)(v344 + 16);
    if (v348 >= 0x1C)
    {
      v349 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(***(_QWORD ***)(v3 + 16) + 424))(**(_QWORD **)(v3 + 16), v344, v345 >> 8);
      v348 = *(unsigned __int8 *)(v344 + 16);
    }
    else
    {
      v349 = 0;
    }
    v350 = (unint64_t)(v343 - v347) >> 5;
    switch(v348)
    {
      case '<':
      case '@':
      case 'A':
        if ((_DWORD)v350)
          v351 = 1;
        else
          v351 = v349;
        if ((v351 & 1) == 0)
          goto LABEL_630;
        if (!(_DWORD)v350)
          goto LABEL_631;
        goto LABEL_604;
      case '=':
        v373 = (_DWORD)v350 == 1;
        if ((_DWORD)v350 == 1)
          v374 = v349;
        else
          v374 = 1;
        if ((v374 & 1) != 0)
        {
          if (v373)
            goto LABEL_631;
LABEL_604:
          v352 = *(llvm::Value **)(v343 + 24);
          if (v352 == (llvm::Value *)v336)
            goto LABEL_859;
          v353 = sub_1C4DE85D0(*(_QWORD *)(v343 + 24));
          if (v352 && v353)
          {
            v354 = (_QWORD **)((_QWORD *)v352 - 4 * (*((_DWORD *)v352 + 5) & 0x7FFFFFF))[12];
            v355 = (llvm::APInt *)(v354 + 3);
            v356 = *((_DWORD *)v354 + 8);
            if (v356 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v355) == v356)
              {
LABEL_641:
                sub_1C4773D54((uint64_t)&v649, (uint64_t)v352, 0, 0, 0);
                v378 = *((_DWORD *)v352 + 5);
                if (*((_QWORD *)v352 + 6))
                {
                  if ((v378 & 0x20000000) == 0)
                  {
LABEL_661:
                    v380 = 0;
                    goto LABEL_662;
                  }
LABEL_646:
                  v381 = ***(_QWORD ***)v352;
                  v635[0] = (uint64_t)v352;
                  v382 = *(_DWORD *)(v381 + 2496);
                  if (!v382)
                  {
                    v468 = 0;
                    goto LABEL_749;
                  }
                  v383 = *(_QWORD *)(v381 + 2480);
                  v384 = v382 - 1;
                  v385 = v384 & ((v352 >> 4) ^ (v352 >> 9));
                  v386 = (_QWORD *)(v383 + 40 * v385);
                  v387 = (_QWORD ***)*v386;
                  if ((llvm::Value *)*v386 != v352)
                  {
                    v388 = 0;
                    v389 = 1;
                    while (v387 != (_QWORD ***)-4096)
                    {
                      if (v388)
                        v390 = 0;
                      else
                        v390 = v387 == (_QWORD ***)-8192;
                      if (v390)
                        v388 = v386;
                      v391 = v385 + v389++;
                      v385 = v391 & v384;
                      v386 = (_QWORD *)(v383 + 40 * v385);
                      v387 = (_QWORD ***)*v386;
                      if ((llvm::Value *)*v386 == v352)
                        goto LABEL_656;
                    }
                    if (v388)
                      v468 = v388;
                    else
                      v468 = v386;
LABEL_749:
                    v386 = sub_1C541AB24(v381 + 2480, (uint64_t)v635, v635, v468);
                    v469 = v635[0];
                    v386[4] = 0;
                    v386[3] = 0;
                    *v386 = v469;
                    v386[1] = v386 + 3;
                    v386[2] = 0x100000000;
                  }
LABEL_656:
                  v392 = *((unsigned int *)v386 + 4);
                  if (!(_DWORD)v392)
                    goto LABEL_661;
                  v393 = (llvm::MDNode **)(v386[1] + 8);
                  v394 = 16 * v392;
                  while (*((_DWORD *)v393 - 2) != 1)
                  {
                    v380 = 0;
                    v393 += 2;
                    v394 -= 16;
                    if (!v394)
                      goto LABEL_662;
                  }
                  v380 = *v393;
LABEL_662:
                  v395 = *((_DWORD *)v352 + 5);
                  if (!*((_QWORD *)v352 + 6))
                  {
                    if ((v395 & 0x20000000) != 0)
                      goto LABEL_667;
                    v379 = 0;
                    goto LABEL_698;
                  }
                  if ((v395 & 0x20000000) != 0)
                  {
LABEL_667:
                    v396 = ***(_QWORD ***)v352;
                    v635[0] = (uint64_t)v352;
                    v397 = *(_DWORD *)(v396 + 2496);
                    if (!v397)
                    {
                      v542 = 0;
                      goto LABEL_866;
                    }
                    v398 = *(_QWORD *)(v396 + 2480);
                    v399 = v397 - 1;
                    v400 = v399 & ((v352 >> 4) ^ (v352 >> 9));
                    v401 = (_QWORD *)(v398 + 40 * v400);
                    v402 = (_QWORD ***)*v401;
                    if ((llvm::Value *)*v401 != v352)
                    {
                      v403 = 0;
                      v404 = 1;
                      while (v402 != (_QWORD ***)-4096)
                      {
                        if (v403)
                          v405 = 0;
                        else
                          v405 = v402 == (_QWORD ***)-8192;
                        if (v405)
                          v403 = v401;
                        v406 = v400 + v404++;
                        v400 = v406 & v399;
                        v401 = (_QWORD *)(v398 + 40 * v400);
                        v402 = (_QWORD ***)*v401;
                        if ((llvm::Value *)*v401 == v352)
                          goto LABEL_677;
                      }
                      if (v403)
                        v542 = v403;
                      else
                        v542 = v401;
LABEL_866:
                      v401 = sub_1C541AB24(v396 + 2480, (uint64_t)v635, v635, v542);
                      v543 = v635[0];
                      v401[4] = 0;
                      v401[3] = 0;
                      *v401 = v543;
                      v401[1] = v401 + 3;
                      v401[2] = 0x100000000;
                    }
LABEL_677:
                    v407 = *((unsigned int *)v401 + 4);
                    if ((_DWORD)v407)
                    {
                      v408 = (llvm::MDNode **)(v401[1] + 8);
                      v409 = 16 * v407;
                      while (*((_DWORD *)v408 - 2) != 7)
                      {
                        v379 = 0;
                        v408 += 2;
                        v409 -= 16;
                        if (!v409)
                          goto LABEL_683;
                      }
                      v379 = *v408;
LABEL_683:
                      if ((*((_BYTE *)v352 + 23) & 0x20) != 0)
                      {
                        v410 = ***(_QWORD ***)v352;
                        v635[0] = (uint64_t)v352;
                        v411 = *(_DWORD *)(v410 + 2496);
                        if (!v411)
                        {
                          v544 = 0;
                          goto LABEL_870;
                        }
                        v412 = *(_QWORD *)(v410 + 2480);
                        v413 = v411 - 1;
                        v414 = v413 & ((v352 >> 4) ^ (v352 >> 9));
                        v415 = (_QWORD *)(v412 + 40 * v414);
                        v416 = (_QWORD ***)*v415;
                        if ((llvm::Value *)*v415 != v352)
                        {
                          v417 = 0;
                          v418 = 1;
                          while (v416 != (_QWORD ***)-4096)
                          {
                            if (v417)
                              v419 = 0;
                            else
                              v419 = v416 == (_QWORD ***)-8192;
                            if (v419)
                              v417 = v415;
                            v420 = v414 + v418++;
                            v414 = v420 & v413;
                            v415 = (_QWORD *)(v412 + 40 * v414);
                            v416 = (_QWORD ***)*v415;
                            if ((llvm::Value *)*v415 == v352)
                              goto LABEL_694;
                          }
                          if (v417)
                            v544 = v417;
                          else
                            v544 = v415;
LABEL_870:
                          v415 = sub_1C541AB24(v410 + 2480, (uint64_t)v635, v635, v544);
                          v545 = v635[0];
                          v415[4] = 0;
                          v415[3] = 0;
                          *v415 = v545;
                          v415[1] = v415 + 3;
                          v415[2] = 0x100000000;
                        }
LABEL_694:
                        v421 = *((unsigned int *)v415 + 4);
                        if ((_DWORD)v421)
                        {
                          v422 = (llvm::MDNode **)(v415[1] + 8);
                          v423 = 16 * v421;
                          while (*((_DWORD *)v422 - 2) != 8)
                          {
                            v422 += 2;
                            v423 -= 16;
                            if (!v423)
                              goto LABEL_698;
                          }
                          v424 = *v422;
LABEL_699:
                          v425 = *(_DWORD *)(*((_QWORD *)v352 - 4) + 36);
                          v426 = (uint64_t)v352;
                          if ((v425 - 196) >= 2 && v425 != 194)
                          {
                            if (v425 == 199)
                            {
                              v427 = (_QWORD ***)((char *)v352 - 32 * (*((_DWORD *)v352 + 5) & 0x7FFFFFF));
                              v428 = (uint64_t)v427[4];
                              v429 = (uint64_t *)v427[8];
                              ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::Value *)((char *)v352 + 64), 0);
                              v431 = (1 << ParamAlignment);
                              if ((ParamAlignment & 0xFF00) == 0)
                                v431 = 0;
                              v432 = __clz(__rbit64(v431)) | 0x100;
                              if (v431)
                                v433 = v432;
                              else
                                v433 = 0;
                              llvm::IRBuilderBase::CreateMemSet((uint64_t)&v649, (llvm::Value *)v336, v428, v429, v433, 0, v380, v379, v424);
LABEL_719:
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v352 + 5) + 40, (uint64_t ***)v352);
                              v444 = (_QWORD **)*((_QWORD *)v352 + 3);
                              v445 = (_QWORD *)*((_QWORD *)v352 + 4);
                              *v445 = v444;
                              v444[1] = v445;
                              *((_QWORD *)v352 + 3) = 0;
                              *((_QWORD *)v352 + 4) = 0;
                              llvm::Value::deleteValue(v352);
                              v3 = v620;
                              if ((int32x2_t *****)v649 != &v651)
                              {
                                free((void *)v649);
                                if (!v342)
                                  goto LABEL_908;
                                continue;
                              }
                              goto LABEL_859;
                            }
                            v426 = 0;
                            v425 = *(_DWORD *)(MEMORY[0xFFFFFFFFFFFFFFE0] + 36);
                          }
                          v434 = *(_DWORD *)(v426 + 20);
                          v435 = v426 - 32 * (v434 & 0x7FFFFFF);
                          v436 = *(llvm::Value **)v435;
                          if (*(llvm::Value **)(v435 + 32) == v329)
                            v437 = (llvm::Value *)v336;
                          else
                            v437 = *(llvm::Value **)(v435 + 32);
                          if (v436 == v329)
                            v436 = (llvm::Value *)v336;
                          v621 = v436;
                          v622 = v437;
                          if (v425 == 194)
                          {
                            if ((v434 & 0x20000000) == 0)
                            {
                              v438 = v379;
                              v439 = v424;
                              goto LABEL_717;
                            }
                            v446 = ***(_QWORD ***)v426;
                            v635[0] = v426;
                            v447 = *(_DWORD *)(v446 + 2496);
                            if (v447)
                            {
                              v448 = *(_QWORD *)(v446 + 2480);
                              v449 = v447 - 1;
                              v450 = v449 & ((v426 >> 4) ^ (v426 >> 9));
                              v451 = (_QWORD *)(v448 + 40 * v450);
                              v452 = *v451;
                              if (*v451 != v426)
                              {
                                v453 = 0;
                                v454 = 1;
                                while (v452 != -4096)
                                {
                                  if (v453)
                                    v455 = 0;
                                  else
                                    v455 = v452 == -8192;
                                  if (v455)
                                    v453 = v451;
                                  v456 = v450 + v454++;
                                  v450 = v456 & v449;
                                  v451 = (_QWORD *)(v448 + 40 * v450);
                                  v452 = *v451;
                                  if (*v451 == v426)
                                    goto LABEL_732;
                                }
                                if (v453)
                                  v560 = v453;
                                else
                                  v560 = v451;
LABEL_891:
                                v451 = sub_1C541AB24(v446 + 2480, (uint64_t)v635, v635, v560);
                                v561 = v635[0];
                                v451[4] = 0;
                                v451[3] = 0;
                                *v451 = v561;
                                v451[1] = v451 + 3;
                                v451[2] = 0x100000000;
                              }
LABEL_732:
                              v438 = v379;
                              v439 = v424;
                              v457 = *((unsigned int *)v451 + 4);
                              if ((_DWORD)v457)
                              {
                                v440 = v380;
                                v458 = (llvm::MDNode **)(v451[1] + 8);
                                v459 = 16 * v457;
                                while (*((_DWORD *)v458 - 2) != 5)
                                {
                                  v441 = 0;
                                  v458 += 2;
                                  v459 -= 16;
                                  if (!v459)
                                    goto LABEL_718;
                                }
                                v441 = *v458;
                              }
                              else
                              {
LABEL_717:
                                v440 = v380;
                                v441 = 0;
                              }
LABEL_718:
                              v442 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v426 + 64), 0);
                              v443 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v426 + 64), 1);
                              llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v649, 194, v621, v442, v622, v443, *(uint64_t **)(v426 - 32 * (*(_DWORD *)(v426 + 20) & 0x7FFFFFF) + 64), 0, v440, v441, v438, v439);
                              v329 = v619;
                              goto LABEL_719;
                            }
                            v560 = 0;
                            goto LABEL_891;
                          }
                          v614 = v380;
                          if (v425 != 196)
                          {
                            v463 = (llvm::AttributeList *)(v426 + 64);
                            v464 = (llvm::AttributeList *)(v426 + 64);
                            v465 = v436;
                            v466 = llvm::AttributeList::getParamAlignment(v464, 0);
                            v467 = llvm::AttributeList::getParamAlignment(v463, 1);
                            llvm::IRBuilderBase::CreateMemMove((uint64_t)&v649, v465, v466, v622, v467, *(uint64_t **)(v435 + 64), 0, v614, v379, v424);
                            goto LABEL_719;
                          }
                          if ((v434 & 0x20000000) == 0)
                          {
LABEL_740:
                            v460 = 0;
                            goto LABEL_741;
                          }
                          v546 = ***(_QWORD ***)v426;
                          v635[0] = v426;
                          v547 = *(_DWORD *)(v546 + 2496);
                          if (v547)
                          {
                            v548 = *(_QWORD *)(v546 + 2480);
                            v549 = v547 - 1;
                            v550 = v549 & ((v426 >> 4) ^ (v426 >> 9));
                            v551 = (_QWORD *)(v548 + 40 * v550);
                            v552 = *v551;
                            if (*v551 != v426)
                            {
                              v553 = 0;
                              v554 = 1;
                              while (v552 != -4096)
                              {
                                if (v553)
                                  v555 = 0;
                                else
                                  v555 = v552 == -8192;
                                if (v555)
                                  v553 = v551;
                                v556 = v550 + v554++;
                                v550 = v556 & v549;
                                v551 = (_QWORD *)(v548 + 40 * v550);
                                v552 = *v551;
                                if (*v551 == v426)
                                  goto LABEL_881;
                              }
                              if (v553)
                                v567 = v553;
                              else
                                v567 = v551;
LABEL_902:
                              v551 = sub_1C541AB24(v546 + 2480, (uint64_t)v635, v635, v567);
                              v568 = v635[0];
                              v551[4] = 0;
                              v551[3] = 0;
                              *v551 = v568;
                              v551[1] = v551 + 3;
                              v551[2] = 0x100000000;
                            }
LABEL_881:
                            v557 = *((unsigned int *)v551 + 4);
                            if (!(_DWORD)v557)
                              goto LABEL_740;
                            v558 = (llvm::MDNode **)(v551[1] + 8);
                            v559 = 16 * v557;
                            while (*((_DWORD *)v558 - 2) != 5)
                            {
                              v460 = 0;
                              v558 += 2;
                              v559 -= 16;
                              if (!v559)
                                goto LABEL_741;
                            }
                            v460 = *v558;
LABEL_741:
                            v461 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v426 + 64), 0);
                            v462 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v426 + 64), 1);
                            llvm::IRBuilderBase::CreateMemCpyInline((uint64_t)&v649, v621, v461, v622, v462, *(uint64_t **)(v426 - 32 * (*(_DWORD *)(v426 + 20) & 0x7FFFFFF) + 64), 0, v380, v460, v379, v424);
                            goto LABEL_719;
                          }
                          v567 = 0;
                          goto LABEL_902;
                        }
                      }
LABEL_698:
                      v424 = 0;
                      goto LABEL_699;
                    }
                  }
                  v379 = 0;
                  goto LABEL_683;
                }
                if ((v378 & 0x20000000) != 0)
                  goto LABEL_646;
                v379 = 0;
                v380 = 0;
                goto LABEL_698;
              }
            }
            else if (!*(_QWORD *)v355)
            {
              goto LABEL_641;
            }
          }
          v357 = *((unsigned __int8 *)v352 + 16);
          if (v357 == 84)
          {
            v358 = *((_QWORD *)v352 - 4);
            if (!v358)
              goto LABEL_805;
            if (*(_BYTE *)(v358 + 16))
              goto LABEL_805;
            if (*(_QWORD *)(v358 + 24) != *((_QWORD *)v352 + 9))
              goto LABEL_805;
            if ((*(_BYTE *)(v358 + 33) & 0x20) == 0)
              goto LABEL_805;
            v359 = *(_DWORD *)(v358 + 36);
            if (v359 == 252)
              goto LABEL_805;
            if (v359 == 236)
            {
              v360 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v352 + 5) + 56) + 40);
              v361 = *(_QWORD *)v336;
              v649 = *(_QWORD *)v352;
              v650 = v361;
              Declaration = llvm::Intrinsic::getDeclaration(v360, 236, &v649, 2);
              v363 = *((_DWORD *)v352 + 5) & 0x7FFFFFF;
              v364 = -v363;
              v365 = (uint64_t *)((char *)v352 - 32 * v363);
              if (*v365)
              {
                v366 = (_QWORD ***)((char *)v352 + 32 * v364);
                v368 = v366[2];
                v367 = v366 + 2;
                *v368 = *(v367 - 1);
                v369 = *(v367 - 1);
                if (v369)
                  *(_QWORD *)(v369 + 16) = *v367;
              }
              *v365 = v336;
              v370 = (uint64_t **)(v336 + 8);
              v371 = *(_QWORD *)(v336 + 8);
              v372 = (_QWORD ***)((char *)v352 + 32 * v364);
              v372[1] = (_QWORD **)v371;
              if (v371)
                *(_QWORD *)(v371 + 16) = v372 + 1;
              v372[2] = v370;
              *v370 = v365;
              sub_1C500A72C((uint64_t)v352, Declaration);
              if (!v342)
                goto LABEL_908;
              continue;
            }
            v470 = (llvm::Value *)(*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Value *, uint64_t))(***(_QWORD ***)(v3 + 16) + 168))(**(_QWORD **)(v3 + 16), v352, v329, v336);
            if (v470 != v352 && v470 != 0)
            {
              llvm::Value::doRAUW(v352, v470, (llvm::Value *)1);
              if (!v342)
                goto LABEL_908;
              continue;
            }
            if (v470)
              goto LABEL_859;
            v357 = *((unsigned __int8 *)v352 + 16);
          }
          if (v357 < 0x1C)
            goto LABEL_859;
          if (v357 == 81)
          {
            v472 = *(_DWORD *)(*(_QWORD *)v336 + 8);
            if ((v472 & 0xFE) == 0x12)
              v472 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v336 + 16) + 8);
            v473 = *(_QWORD *)(v343 + 24);
            v474 = *(_DWORD *)(v473 + 20);
            if ((v474 & 0x40000000) != 0)
              v475 = *(_QWORD *)(v473 - 8);
            else
              v475 = v473 - 32 * (v474 & 0x7FFFFFF);
            v476 = v343 - v475;
            v477 = ((v343 - v475) & 0x1FFFFFFFE0) == 0;
            v478 = (_QWORD ***)((char *)v352 - 64);
            v479 = (unsigned __int8 **)((char *)v352 + 32 * v477 - 64);
            v480 = *v479;
            if (!v632)
              goto LABEL_769;
            v481 = (v632 - 1) & ((v480 >> 4) ^ (v480 >> 9));
            v482 = &v630[8 * v481];
            v483 = (unsigned __int8 *)v482[3];
            if (v480 != v483)
            {
              v484 = 1;
              while (v483 != (unsigned __int8 *)-4096)
              {
                v485 = v481 + v484++;
                v481 = v485 & (v632 - 1);
                v482 = &v630[8 * v481];
                v483 = (unsigned __int8 *)v482[3];
                if (v480 == v483)
                  goto LABEL_770;
              }
LABEL_769:
              v482 = &v630[8 * (unint64_t)v632];
            }
LABEL_770:
            v649 = 6;
            if (v482 == &v630[8 * (unint64_t)v632])
            {
              v486 = 0;
              v487 = 0;
              v650 = 0;
              v651 = 0;
            }
            else
            {
              v486 = 0;
              v487 = (int32x2_t ****)v482[7];
              v650 = 0;
              v651 = v487;
              if (v487 != (int32x2_t ****)-8192 && v487 != (int32x2_t ****)-4096 && v487 != 0)
              {
                v489 = v482[5] & 0xFFFFFFFFFFFFFFF8;
                v650 = *(_QWORD *)v489;
                *(_QWORD *)v489 = &v649;
                v649 = v489 | 6;
                v486 = v650;
                if (v650)
                  *(_QWORD *)v650 = *(_QWORD *)v650 & 7 | (unint64_t)&v650;
                v487 = v651;
              }
            }
            if (v487 != (int32x2_t ****)-8192 && v487 != (int32x2_t ****)-4096 && v487 != 0)
            {
              v529 = v649 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v649 & 0xFFFFFFFFFFFFFFF8) = v486;
              if (v650)
              {
                *(_QWORD *)v650 = *(_QWORD *)v650 & 7 | v529;
              }
              else
              {
                v530 = v651;
                v531 = ***v651;
                v532 = (unint64_t)v531[303];
                if (v532 <= v529)
                {
                  v533 = v531[305].u32[0];
                  if (v532 + 16 * v533 > v529)
                  {
                    v534 = v533 - 1;
                    LODWORD(v535) = v534 & ((v651 >> 4) ^ (v651 >> 9));
                    v536 = (int32x2_t *****)(v532 + 16 * v535);
                    v537 = *v536;
                    if (v651 == *v536)
                    {
LABEL_854:
                      *v536 = (int32x2_t ****)-8192;
                      v531[304] = vadd_s32(v531[304], (int32x2_t)0x1FFFFFFFFLL);
                      v530 = v651;
                    }
                    else
                    {
                      v538 = 1;
                      while (v537 != (int32x2_t ****)-4096)
                      {
                        v539 = v535 + v538++;
                        v535 = v539 & v534;
                        v537 = *(int32x2_t *****)(v532 + 16 * v535);
                        if (v651 == v537)
                        {
                          v536 = (int32x2_t *****)(v532 + 16 * v535);
                          goto LABEL_854;
                        }
                      }
                    }
                    *((_BYTE *)v530 + 17) &= ~1u;
                  }
                }
              }
            }
            v491 = v472 >> 8;
            if (v487)
            {
              v492 = *((_DWORD *)*v487 + 2);
              if ((v492 & 0xFE) == 0x12)
                v492 = (*(*v487)[2])[1].u32[0];
              if (v491 == v492 >> 8)
              {
                if (*v479)
                {
                  v493 = &v478[4 * v477];
                  v495 = v493[2];
                  v494 = v493 + 2;
                  *v495 = *(v494 - 1);
                  v496 = *(v494 - 1);
                  if (v496)
                    *(_QWORD *)(v496 + 16) = *v494;
                }
                *v479 = (unsigned __int8 *)v487;
                v499 = v487[1];
                v497 = (unsigned __int8 ***)(v487 + 1);
                v498 = v499;
                v500 = &v478[4 * v477];
                v500[1] = v499;
                v501 = (int32x2_t **)(v500 + 1);
                if (v499)
                  v498[2] = v501;
                v478[4 * v477 + 2] = v497;
                *v497 = v479;
                v502 = (v476 >> 5);
                v503 = (uint64_t *)&v478[4 * v502];
                if (*v503)
                {
                  *(_QWORD *)v503[2] = v503[1];
                  v504 = (_QWORD **)v503[1];
                  if (v504)
                    v504[2] = (_QWORD *)v503[2];
                }
                *v503 = v336;
                v505 = (uint64_t **)(v336 + 8);
                v506 = *(_QWORD *)(v336 + 8);
                v503[1] = v506;
                if (v506)
                  *(_QWORD *)(v506 + 16) = v503 + 1;
                v478[4 * v502 + 2] = v505;
                *v505 = v503;
                if (!v342)
                  goto LABEL_908;
                continue;
              }
            }
            if (v480 && v480[16] <= 0x14u && sub_1C5B372A8(v3, (uint64_t *)v480, v491))
            {
              v562 = (v476 >> 5);
              v563 = (uint64_t *)&v478[4 * v562];
              if (*v563)
              {
                *(_QWORD *)v563[2] = v563[1];
                v564 = (_QWORD **)v563[1];
                if (v564)
                  v564[2] = (_QWORD *)v563[2];
              }
              *v563 = v336;
              v565 = *(_QWORD *)(v336 + 8);
              v563[1] = v565;
              if (v565)
                *(_QWORD *)(v565 + 16) = v563 + 1;
              v478[4 * v562 + 2] = (_QWORD **)(v336 + 8);
              *(_QWORD *)(v336 + 8) = v563;
              v566 = llvm::ConstantExpr::getAddrSpaceCast((llvm::ConstantExpr *)v480, *(llvm::Constant ****)v336, 0);
              sub_1C6317AD8((uint64_t)v352, v477, v566);
LABEL_824:
              if (!v342)
                goto LABEL_908;
              continue;
            }
          }
LABEL_805:
          if (*((_BYTE *)v352 + 16) == 78)
          {
            v507 = *(llvm::Constant ****)v336;
            v508 = *(_DWORD *)(*(_QWORD *)v336 + 8);
            if ((v508 & 0xFE) == 0x12)
              v508 = *((_DWORD *)*v507[2] + 2);
            v509 = *(uint64_t ***)v352;
            v510 = *(_DWORD *)(*(_QWORD *)v352 + 8);
            if ((v510 & 0xFE) == 0x12)
              v510 = *(_DWORD *)(*v509[2] + 8);
            if ((v510 ^ v508) <= 0xFF)
            {
              if (v509[3] != (uint64_t *)v507[3])
              {
                v653 = 257;
                llvm::CastInst::Create(49);
                v336 = v540;
              }
              llvm::Value::doRAUW(v352, (llvm::Value *)v336, (llvm::Value *)1);
              v541 = v639;
              if (v639 >= (unint64_t)HIDWORD(v639))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v638, (uint64_t)&v640, v639 + 1, 8);
                v541 = v639;
              }
              *((_QWORD *)v638 + v541) = v352;
              LODWORD(v639) = v639 + 1;
              goto LABEL_859;
            }
          }
          v511 = *((unsigned __int8 *)v329 + 16);
          if (v511 >= 0x1C)
          {
            if (v511 == 78 && *(llvm::Value **)v343 == v329)
              goto LABEL_824;
            if (v336)
              v517 = *(unsigned __int8 *)(v336 + 16) >= 0x1Cu;
            else
              v517 = 0;
            if (v517)
              v518 = v336;
            else
              v518 = (uint64_t)v329;
            for (k = *(_QWORD *)(v518 + 32); ; k = *(_QWORD *)(k + 8))
            {
              v520 = k - 24;
              v521 = k ? k - 24 : 0;
              if (*(_BYTE *)(v521 + 16) != 83)
                break;
            }
            v522 = (char *)operator new(0x60uLL);
            *((_DWORD *)v522 + 13) = *((_DWORD *)v522 + 13) & 0x38000000 | 1;
            *(_QWORD *)v522 = 0;
            *((_QWORD *)v522 + 1) = 0;
            *((_QWORD *)v522 + 2) = 0;
            *((_QWORD *)v522 + 3) = v522 + 32;
            v523 = *(llvm::Constant ****)v329;
            v653 = 257;
            v524 = llvm::AddrSpaceCastInst::AddrSpaceCastInst((uint64_t)(v522 + 32), v336, (uint64_t)v523, (uint64_t)&v649, v520);
            if (*(_QWORD *)v343)
            {
              **(_QWORD **)(v343 + 16) = *(_QWORD *)(v343 + 8);
              v525 = *(_QWORD *)(v343 + 8);
              if (v525)
                *(_QWORD *)(v525 + 16) = *(_QWORD *)(v343 + 16);
            }
            *(_QWORD *)v343 = v524;
            v528 = *((_QWORD *)v522 + 5);
            v527 = v522 + 40;
            v526 = v528;
            *(_QWORD *)(v343 + 8) = v528;
            if (v528)
              *(_QWORD *)(v526 + 16) = v343 + 8;
            *(_QWORD *)(v343 + 16) = v527;
            *v527 = v343;
            if (!v342)
              goto LABEL_908;
          }
          else
          {
            v512 = llvm::ConstantExpr::getAddrSpaceCast((llvm::ConstantExpr *)v336, *(llvm::Constant ****)v329, 0);
            if (*(_QWORD *)v343)
            {
              **(_QWORD **)(v343 + 16) = *(_QWORD *)(v343 + 8);
              v513 = *(_QWORD *)(v343 + 8);
              if (v513)
                *(_QWORD *)(v513 + 16) = *(_QWORD *)(v343 + 16);
            }
            *(_QWORD *)v343 = v512;
            if (!v512)
              goto LABEL_859;
            v516 = *(_QWORD *)(v512 + 8);
            v514 = (_QWORD *)(v512 + 8);
            v515 = v516;
            *(_QWORD *)(v343 + 8) = v516;
            if (v516)
              *(_QWORD *)(v515 + 16) = v343 + 8;
            *(_QWORD *)(v343 + 16) = v514;
            *v514 = v343;
            if (!v342)
              goto LABEL_908;
          }
          continue;
        }
LABEL_630:
        if ((*(_WORD *)(v344 + 18) & 1) != 0)
          goto LABEL_604;
LABEL_631:
        if (*(_QWORD *)v343)
        {
          **(_QWORD **)(v343 + 16) = *(_QWORD *)(v343 + 8);
          v375 = *(_QWORD *)(v343 + 8);
          if (v375)
            *(_QWORD *)(v375 + 16) = *(_QWORD *)(v343 + 16);
        }
        *(_QWORD *)v343 = v336;
        if (!v336)
        {
LABEL_859:
          if (!v342)
            goto LABEL_908;
          continue;
        }
        v376 = (_QWORD *)(v336 + 8);
        v377 = *(_QWORD *)(v336 + 8);
        *(_QWORD *)(v343 + 8) = v377;
        if (v377)
          *(_QWORD *)(v377 + 16) = v343 + 8;
        *(_QWORD *)(v343 + 16) = v376;
        *v376 = v343;
        if (v342)
          continue;
LABEL_908:
        v273 = v616;
        if (!*((_QWORD *)v329 + 1))
          goto LABEL_909;
LABEL_913:
        v273 += 24;
        if (v273 != v617)
          goto LABEL_558;
        v581 = (uint64_t *)v638;
        if (!(_DWORD)v639)
          goto LABEL_935;
        v582 = 8 * v639;
        while (2)
        {
          v583 = *v581;
          v652 = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructions(v583, 0, 0, &v649);
          if (v652 == (void **)&v649)
          {
            v584 = (void (**)(void))(v649 + 32);
LABEL_932:
            (*v584)();
          }
          else if (v652)
          {
            v584 = (void (**)(void))((char *)*v652 + 40);
            goto LABEL_932;
          }
          ++v581;
          v582 -= 8;
          if (v582)
            continue;
          break;
        }
        v581 = (uint64_t *)v638;
LABEL_935:
        v5 = 1;
        if (v581 != (uint64_t *)&v640)
          free(v581);
        v272 = (char *)p_j;
LABEL_938:
        if (v272 != (char *)&v645)
          free(v272);
LABEL_941:
        if (v634)
        {
          sub_1C4E43068((uint64_t)v633);
          MEMORY[0x1CAA32FB4](v633[0], 8);
          v634 = 0;
        }
        v585 = v630;
        if (v632)
        {
          v586 = &v630[8 * (unint64_t)v632];
          do
          {
            v587 = v585[3];
            if ((v587 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v588 = v585[7];
              if (v588)
              {
                if (v588 != -8192 && v588 != -4096)
                {
                  v589 = v585[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v589 = v585[6];
                  v590 = (unint64_t *)v585[6];
                  if (v590)
                  {
                    *v590 = *v590 & 7 | v589;
                  }
                  else
                  {
                    v591 = v585[7];
                    v592 = ***(int32x2_t ****)v591;
                    v593 = (unint64_t)v592[303];
                    if (v593 <= v589)
                    {
                      v594 = v592[305].u32[0];
                      if (v593 + 16 * v594 > v589)
                      {
                        v595 = v594 - 1;
                        LODWORD(v596) = v595 & ((v591 >> 4) ^ (v591 >> 9));
                        v597 = (uint64_t *)(v593 + 16 * v596);
                        v598 = *v597;
                        if (v591 == *v597)
                        {
LABEL_957:
                          *v597 = -8192;
                          v592[304] = vadd_s32(v592[304], (int32x2_t)0x1FFFFFFFFLL);
                          v591 = v585[7];
                        }
                        else
                        {
                          v599 = 1;
                          while (v598 != -4096)
                          {
                            v600 = v596 + v599++;
                            v596 = v600 & v595;
                            v598 = *(_QWORD *)(v593 + 16 * v596);
                            if (v591 == v598)
                            {
                              v597 = (uint64_t *)(v593 + 16 * v596);
                              goto LABEL_957;
                            }
                          }
                        }
                        *(_BYTE *)(v591 + 17) &= ~1u;
                      }
                    }
                  }
                  v587 = v585[3];
                }
              }
            }
            if (v587 != -4096 && v587 != -8192 && v587 != 0)
            {
              v602 = v585[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v602 = v585[2];
              v603 = (unint64_t *)v585[2];
              if (v603)
              {
                *v603 = *v603 & 7 | v602;
              }
              else
              {
                v604 = v585[3];
                v605 = ***(int32x2_t ****)v604;
                v606 = (unint64_t)v605[303];
                if (v606 <= v602)
                {
                  v607 = v605[305].u32[0];
                  if (v606 + 16 * v607 > v602)
                  {
                    v608 = v607 - 1;
                    LODWORD(v609) = v608 & ((v604 >> 4) ^ (v604 >> 9));
                    v610 = (uint64_t *)(v606 + 16 * v609);
                    v611 = *v610;
                    if (v604 == *v610)
                    {
LABEL_976:
                      *v610 = -8192;
                      v605[304] = vadd_s32(v605[304], (int32x2_t)0x1FFFFFFFFLL);
                      v604 = v585[3];
                    }
                    else
                    {
                      v612 = 1;
                      while (v611 != -4096)
                      {
                        v613 = v609 + v612++;
                        v609 = v613 & v608;
                        v611 = *(_QWORD *)(v606 + 16 * v609);
                        if (v604 == v611)
                        {
                          v610 = (uint64_t *)(v606 + 16 * v609);
                          goto LABEL_976;
                        }
                      }
                    }
                    *(_BYTE *)(v604 + 17) &= ~1u;
                  }
                }
              }
            }
            v585 += 8;
          }
          while (v585 != v586);
          v585 = v630;
        }
        MEMORY[0x1CAA32FB4](v585, 8);
        MEMORY[0x1CAA32FB4](v623[0], 8);
        MEMORY[0x1CAA32FB4](v625[0], 8);
        p_j = &j;
        sub_1C4D99900((void ***)&p_j);
        return (llvm::Type *)v5;
      default:
        goto LABEL_604;
    }
  }
}

double sub_1C5B36AAC()
{
  _QWORD *v0;
  double result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  v0[2] = &unk_1EF8F5760;
  *v0 = &off_1E8194F38;
  result = NAN;
  v0[3] = 0xFFFFFFFF00000002;
  return result;
}

void sub_1C5B36AFC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B36B20(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AssumptionCacheTracker::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
}

llvm::Type *sub_1C5B36B7C(uint64_t a1, const llvm::Function *a2)
{
  _QWORD *v2;
  uint64_t v6;
  uint64_t AnalysisPass;
  uint64_t *v8;
  char **v9;
  char *v10;
  llvm::AssumptionCacheTracker *v11;
  uint64_t AssumptionCache;
  char **v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v6 + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
    v6 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(char ***)v6;
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::AssumptionCacheTracker::ID);
  v11 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v11, a2);
  v13 = **(char ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::TargetTransformInfoWrapperPass::ID);
  if (v8)
    v15 = v8 + 4;
  else
    v15 = 0;
  v16 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v23 = 0;
  v24 = 0;
  LODWORD(v25) = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v17 = *(_QWORD *)(v16 + 56);
  if (!v17)
  {
    sub_1C485C2F0();
LABEL_21:
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    goto LABEL_17;
  }
  v8 = &v26;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v17 + 48))(&v22, v17, a2);
  v2 = (_QWORD *)(v16 + 64);
  v18 = v22;
  if (*(_BYTE *)(v16 + 72))
  {
    v22 = 0;
    v19 = *v2;
    *v2 = v18;
    if (!v19)
      goto LABEL_17;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v22;
    v22 = 0;
    if (!v20)
      goto LABEL_17;
    goto LABEL_21;
  }
  *(_QWORD *)(v16 + 64) = v22;
  *(_BYTE *)(v16 + 72) = 1;
LABEL_17:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v8);
  sub_1C4D8B52C(&v23);
  v21 = *(_DWORD *)(a1 + 28);
  v23 = AssumptionCache;
  v24 = v15;
  v25 = v2;
  v26 = 0;
  LODWORD(v27) = v21;
  return sub_1C5B33670((uint64_t)&v23, (uint64_t)a2);
}

uint64_t sub_1C5B36D5C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t **v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;

  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(uint64_t **)(a1 - 8);
  else
    v6 = (uint64_t *)(a1 - 32 * (v5 & 0x7FFFFFF));
  v7 = *v6;
  v8 = *(unsigned __int8 *)(*v6 + 16);
  v9 = v8 - 28;
  v11 = v8 < 0x1C && v8 != 5;
  if (!v7 || v11)
    return 0;
  if (v8 <= 0x1B)
    v9 = *(unsigned __int16 *)(v7 + 18);
  if (v9 != 47)
    return 0;
  v12 = *(unsigned __int8 *)(a1 + 16);
  v13 = v12 > 0x1B ? v12 - 28 : *(unsigned __int16 *)(a1 + 18);
  llvm::CastInst::isNoopCast(v13);
  if (!v14)
    return 0;
  v15 = *(unsigned __int8 *)(v7 + 16);
  v16 = v15 > 0x1B ? v15 - 28 : *(unsigned __int16 *)(v7 + 18);
  llvm::CastInst::isNoopCast(v16);
  if (!v17)
    return 0;
  v18 = *(_DWORD *)(v7 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(uint64_t ***)(v7 - 8);
  else
    v19 = (uint64_t **)(v7 - 32 * (v18 & 0x7FFFFFF));
  v21 = **v19;
  v22 = *(_DWORD *)(v21 + 8);
  if ((v22 & 0xFE) == 0x12)
    v22 = *(_DWORD *)(**(_QWORD **)(v21 + 16) + 8);
  v23 = v22 >> 8;
  v24 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v24 & 0xFE) == 0x12)
    v24 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a3 + 136))(*a3, v23, v24 >> 8);
}

_QWORD *sub_1C5B36EE0(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(unsigned __int8 *)(a2 + 16);
  v3 = v2 >= 0x1C;
  v4 = v2 - 28;
  if (!v3)
    v4 = *(unsigned __int16 *)(a2 + 18);
  switch(v4)
  {
    case '0':
      v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0)
        v8 = *(uint64_t **)(a2 - 8);
      else
        v8 = (uint64_t *)(a2 - 32 * (v7 & 0x7FFFFFF));
      v15 = *v8;
      v16 = *(_DWORD *)(v15 + 20);
      if ((v16 & 0x40000000) != 0)
        v6 = *(_QWORD **)(v15 - 8);
      else
        v6 = (_QWORD *)(v15 - 32 * (v16 & 0x7FFFFFF));
      goto LABEL_14;
    case '3':
    case '4':
    case '5':
    case '6':
      __break(1u);
      return result;
    case '7':
      v11 = *(_DWORD *)(a2 + 20);
      if ((v11 & 0x40000000) != 0)
      {
        v13 = *(char **)(a2 - 8);
        v12 = v11 & 0x7FFFFFF;
      }
      else
      {
        v12 = v11 & 0x7FFFFFF;
        v13 = (char *)(a2 - 32 * v12);
      }
      *result = result + 2;
      result[1] = 0x200000000;
      return (_QWORD *)sub_1C509DA3C((uint64_t)result, v13, &v13[32 * v12]);
    case '8':
      v5 = *(_DWORD *)(a2 + 20);
      goto LABEL_13;
    case '9':
      v9 = *(_DWORD *)(a2 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(_QWORD *)(a2 - 8);
      else
        v10 = a2 - 32 * (v9 & 0x7FFFFFF);
      v17 = *(_QWORD *)(v10 + 32);
      v18 = *(_QWORD *)(v10 + 64);
      result[2] = v17;
      *result = result + 2;
      result[3] = v18;
      v14 = 0x200000002;
      goto LABEL_15;
    default:
      v5 = *(_DWORD *)(a2 + 20);
      if ((v5 & 0x40000000) != 0)
        v6 = *(_QWORD **)(a2 - 8);
      else
LABEL_13:
        v6 = (_QWORD *)(a2 - 32 * (v5 & 0x7FFFFFF));
LABEL_14:
      result[2] = *v6;
      *result = result + 2;
      v14 = 0x200000001;
LABEL_15:
      result[1] = v14;
      return result;
  }
}

uint64_t sub_1C5B36FFC(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned __int8 v20[16];
  char v21;

  v7 = result;
  v19 = (uint64_t)a2;
  if (a2 && a2[16] == 5)
  {
    result = sub_1C5B371C8((uint64_t)a2, *(_QWORD *)(result + 24), *(_QWORD **)(result + 16));
    if ((_DWORD)result)
    {
      v18 = a2;
      result = sub_1C62AB7E4(a4, &v18, (uint64_t)v20);
      if (v21)
        return sub_1C6318058(a3, (uint64_t)a2, 0);
    }
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    if ((v8 & 0xFE) == 0x12)
      v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
    if (*(_DWORD *)(result + 32) == v8 >> 8)
    {
      result = sub_1C5B371C8((uint64_t)a2, *(_QWORD *)(result + 24), *(_QWORD **)(result + 16));
      if ((_DWORD)result)
      {
        result = sub_1C4D95920(a4, &v19, (uint64_t)v20);
        if (v21)
        {
          v20[0] = 0;
          v9 = *(unsigned int *)(a3 + 8);
          if (v9 >= *(_DWORD *)(a3 + 12))
          {
            result = sub_1C4F5CB48(a3, &v19, v20);
            v10 = v19;
          }
          else
          {
            v10 = v19;
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v19 & 0xFFFFFFFFFFFFFFFBLL;
            *(_DWORD *)(a3 + 8) = v9 + 1;
          }
          v11 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
          if ((_DWORD)v11)
          {
            v12 = 0;
            v13 = 32 * v11;
            do
            {
              v14 = *(_DWORD *)(v10 + 20);
              if ((v14 & 0x40000000) != 0)
                v15 = *(_QWORD *)(v10 - 8);
              else
                v15 = v10 - 32 * (v14 & 0x7FFFFFF);
              v16 = *(_QWORD *)(v15 + v12);
              if (v16)
                v17 = *(_BYTE *)(v16 + 16) == 5;
              else
                v17 = 0;
              if (v17)
              {
                result = sub_1C5B371C8(v16, *(_QWORD *)(v7 + 24), *(_QWORD **)(v7 + 16));
                if ((_DWORD)result)
                {
                  v18 = (_BYTE *)v16;
                  result = sub_1C62AB7E4(a4, &v18, (uint64_t)v20);
                  if (v21)
                    result = sub_1C6318058(a3, v16, 0);
                }
              }
              v12 += 32;
            }
            while (v13 != v12);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5B371C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v3;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0x1B && v3 != 5)
    return 0;
  v6 = v3 - 28;
  if (v3 < 0x1C)
    v6 = *(unsigned __int16 *)(a1 + 18);
  result = 1;
  switch(v6)
  {
    case '0':
      return sub_1C5B36D5C(a1, a2, a3);
    case '1':
    case '2':
    case '7':
      return result;
    case '3':
    case '4':
    case '5':
    case '6':
      goto LABEL_11;
    case '8':
      if (v3 != 84)
        return 0;
      v8 = *(_QWORD *)(a1 - 32);
      if (!v8
        || *(_BYTE *)(v8 + 16)
        || *(_QWORD *)(v8 + 24) != *(_QWORD *)(a1 + 72)
        || (*(_BYTE *)(v8 + 33) & 0x20) == 0)
      {
        return 0;
      }
      v9 = *(_DWORD *)(v8 + 36) == 252;
      goto LABEL_20;
    case '9':
      v9 = *(_BYTE *)(*(_QWORD *)a1 + 8) == 15;
LABEL_20:
      result = v9;
      break;
    default:
      if (v6 != 34)
LABEL_11:
        result = (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 152))(*a3, a1) != -1;
      break;
  }
  return result;
}

uint64_t sub_1C5B372A8(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v10;
  int v11;
  uint64_t *v12;

  while (1)
  {
    v3 = *a2;
    v4 = *(_DWORD *)(*a2 + 8);
    v5 = v4;
    if ((v4 & 0xFE) == 0x12)
      v5 = *(_DWORD *)(**(_QWORD **)(v3 + 16) + 8);
    v6 = v5 >> 8;
    if (v5 >> 8 == a3)
      return 1;
    v7 = *((unsigned __int8 *)a2 + 16);
    if (v7 - 11 < 2)
      return 1;
    v8 = *(_DWORD *)(a1 + 32);
    if (v6 != v8 && v8 != a3)
      return 0;
    if (v7 == 19)
      return 1;
    if (v7 <= 0x1B && v7 != 5)
      return 0;
    v10 = v7 > 0x1B ? v7 - 28 : *((unsigned __int16 *)a2 + 9);
    if (v10 != 50)
      break;
    v11 = *((_DWORD *)a2 + 5);
    if ((v11 & 0x40000000) != 0)
      v12 = (uint64_t *)*(a2 - 1);
    else
      v12 = &a2[-4 * (v11 & 0x7FFFFFF)];
    a2 = (uint64_t *)*v12;
  }
  if (v10 == 48)
  {
    if ((v4 & 0xFE) == 0x12)
      v4 = *(_DWORD *)(**(_QWORD **)(v3 + 16) + 8);
    if (v8 == v4 >> 8)
      return 1;
  }
  return 0;
}

llvm::Constant *sub_1C5B37380(llvm::ConstantExpr *a1, llvm::Type *a2, uint64_t *a3)
{
  int v4;
  llvm::PointerType **v6;
  llvm::PointerType *v7;
  unint64_t v8;
  uint64_t v9;
  llvm::PointerType ****v10;
  llvm::PointerType ***v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  llvm::ConstantExpr **v22;
  llvm::ConstantExpr *v23;
  llvm::ConstantExpr *v24;
  unsigned int v25;
  int v26;
  llvm::ConstantExpr *v27;
  llvm::PoisonValue **AddrSpaceCast;
  llvm::PoisonValue **v29;
  llvm::Type *v30;
  llvm::Constant *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t *v42;
  int32x2_t ****v43;
  unint64_t v45;
  unsigned int v48;
  unint64_t v49;
  int32x2_t ****v50;
  int32x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int32x2_t *****v56;
  int32x2_t ****v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  llvm::GetElementPtrInst *v64;
  _QWORD *v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v70;
  int32x2_t *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  _DWORD v80[3];
  unint64_t *v81;
  int32x2_t ****v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[5];

  v4 = (int)a2;
  v85[4] = *MEMORY[0x1E0C80C00];
  v6 = *(llvm::PointerType ***)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 15)
  {
    v7 = v6[3];
    if (v7)
      v8 = llvm::PointerType::get(v7, a2);
    else
      v8 = llvm::PointerType::get(*v6, a2);
    v6 = (llvm::PointerType **)v8;
  }
  switch(*((_WORD *)a1 + 9))
  {
    case '0':
      v9 = *((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
      v10 = (llvm::PointerType ****)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
      goto LABEL_8;
    case '1':
      v13 = *a3;
      v14 = *((unsigned int *)a3 + 4);
      if (!(_DWORD)v14)
        goto LABEL_89;
      v15 = *((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
      v16 = ((v15 >> 4) ^ (v15 >> 9)) & ((_DWORD)v14 - 1);
      v17 = (_QWORD *)(v13 + (v16 << 6));
      v18 = v17[3];
      if (v15 == v18)
        goto LABEL_90;
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v14 - 1);
        v17 = (_QWORD *)(v13 + (v16 << 6));
        v18 = v17[3];
        if (v15 == v18)
          goto LABEL_90;
      }
LABEL_89:
      v17 = (_QWORD *)(v13 + (v14 << 6));
LABEL_90:
      v83 = (void *)6;
      if (v17 == (_QWORD *)(v13 + (v14 << 6)))
      {
        v65 = 0;
        v67 = 0;
        v11 = 0;
        v84 = 0;
        v85[0] = 0;
      }
      else
      {
        v65 = 0;
        v11 = (llvm::PointerType ***)v17[7];
        v84 = 0;
        v85[0] = v11;
        if (v11 == (llvm::PointerType ***)-8192
          || (v11 != (llvm::PointerType ***)-4096 ? (v66 = v11 == 0) : (v66 = 1), v66))
        {
          v67 = 0;
        }
        else
        {
          v67 = v17[5] & 0xFFFFFFFFFFFFFFF8;
          v84 = *(_QWORD *)v67;
          v65 = (_QWORD *)v84;
          *(_QWORD *)v67 = &v83;
          v83 = (void *)(v67 | 6);
          if (v65)
            *v65 = *v65 & 7 | (unint64_t)&v84;
        }
      }
      if (v11 != (llvm::PointerType ***)-8192 && v11 != (llvm::PointerType ***)-4096 && v11 != 0)
      {
        *(_QWORD *)v67 = v65;
        if (v84)
        {
          *(_QWORD *)v84 = *(_QWORD *)v84 & 7 | v67;
        }
        else
        {
          v70 = v85[0];
          v71 = ***(int32x2_t ****)v85[0];
          v72 = (unint64_t)v71[303];
          if (v72 <= v67)
          {
            v73 = v71[305].u32[0];
            if (v72 + 16 * v73 > v67)
            {
              v74 = v73 - 1;
              LODWORD(v75) = v74 & ((LODWORD(v85[0]) >> 4) ^ (LODWORD(v85[0]) >> 9));
              v76 = (uint64_t *)(v72 + 16 * v75);
              v77 = *v76;
              if (v85[0] == *v76)
              {
LABEL_119:
                *v76 = -8192;
                v71[304] = vadd_s32(v71[304], (int32x2_t)0x1FFFFFFFFLL);
                v70 = v85[0];
              }
              else
              {
                v78 = 1;
                while (v77 != -4096)
                {
                  v79 = v75 + v78++;
                  v75 = v79 & v74;
                  v77 = *(_QWORD *)(v72 + 16 * v75);
                  if (v85[0] == v77)
                  {
                    v76 = (uint64_t *)(v72 + 16 * v75);
                    goto LABEL_119;
                  }
                }
              }
              *(_BYTE *)(v70 + 17) &= ~1u;
            }
          }
        }
      }
      if (!v11)
        return (llvm::Constant *)llvm::ConstantExpr::getAddrSpaceCast(a1, (llvm::Constant ***)v6, 0);
      if (*v11 == v6)
        return (llvm::Constant *)v11;
      return sub_1C537D3B8((llvm *)0x31, (uint64_t)v11, (llvm::Constant *)v6, 0);
    case '2':
      v10 = (llvm::PointerType ****)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
LABEL_8:
      v11 = *v10;
      if (**v10 == v6)
        return (llvm::Constant *)v11;
      return sub_1C537D3B8((llvm *)0x31, (uint64_t)v11, (llvm::Constant *)v6, 0);
    case '9':
      v21 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
      v22 = (llvm::ConstantExpr **)((char *)a1 - 32 * v21);
      v23 = v22[4];
      v24 = v22[8];
      v25 = *(_DWORD *)(*(_QWORD *)v23 + 8);
      if ((v25 & 0xFE) == 0x12)
        v25 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v23 + 16) + 8);
      v26 = *(_DWORD *)(*(_QWORD *)v24 + 8);
      if ((v26 & 0xFE) == 0x12)
        v26 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v24 + 16) + 8);
      if ((v26 ^ v25) > 0xFF)
        goto LABEL_23;
      v27 = *v22;
      AddrSpaceCast = (llvm::PoisonValue **)llvm::ConstantExpr::getAddrSpaceCast(v23, (llvm::Constant ***)v6, 0);
      v29 = (llvm::PoisonValue **)llvm::ConstantExpr::getAddrSpaceCast(v24, (llvm::Constant ***)v6, 0);
      return llvm::ConstantExpr::getSelect(v27, AddrSpaceCast, v29, 0, v30);
    default:
      v21 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
LABEL_23:
      v83 = v85;
      v84 = 0x400000000;
      if (!v21)
        return 0;
      v80[0] = v4;
      LODWORD(v31) = 0;
      v32 = 0;
      v33 = 0;
      break;
  }
  do
  {
    v34 = *((_QWORD *)a1 + 4 * v32 + -4 * v21);
    v35 = *a3;
    v36 = *((unsigned int *)a3 + 4);
    if ((_DWORD)v36)
    {
      v37 = ((_DWORD)v36 - 1) & ((v34 >> 4) ^ (v34 >> 9));
      v38 = (_QWORD *)(v35 + (v37 << 6));
      v39 = v38[3];
      if (v34 == v39)
        goto LABEL_32;
      v40 = 1;
      while (v39 != -4096)
      {
        v41 = v37 + v40++;
        v37 = v41 & (v36 - 1);
        v38 = (_QWORD *)(v35 + (v37 << 6));
        v39 = v38[3];
        if (v34 == v39)
          goto LABEL_32;
      }
    }
    v38 = (_QWORD *)(v35 + (v36 << 6));
LABEL_32:
    *(_QWORD *)&v80[1] = 6;
    if (v38 == (_QWORD *)(v35 + (v36 << 6)))
    {
      v42 = 0;
      v43 = 0;
      v81 = 0;
      v82 = 0;
    }
    else
    {
      v42 = 0;
      v43 = (int32x2_t ****)v38[7];
      v81 = 0;
      v82 = v43;
      if (v43 != (int32x2_t ****)-8192 && v43 != (int32x2_t ****)-4096 && v43 != 0)
      {
        v45 = v38[5] & 0xFFFFFFFFFFFFFFF8;
        v81 = *(unint64_t **)v45;
        *(_QWORD *)v45 = &v80[1];
        *(_QWORD *)&v80[1] = v45 | 6;
        v42 = v81;
        if (v81)
          *v81 = *v81 & 7 | (unint64_t)&v81;
        v43 = v82;
      }
    }
    if (v43 != (int32x2_t ****)-8192 && v43 != (int32x2_t ****)-4096 && v43 != 0)
    {
      v49 = *(_QWORD *)&v80[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(*(_QWORD *)&v80[1] & 0xFFFFFFFFFFFFFFF8) = v42;
      if (v81)
      {
        *v81 = *v81 & 7 | v49;
      }
      else
      {
        v50 = v82;
        v51 = ***v82;
        v52 = (unint64_t)v51[303];
        if (v52 <= v49)
        {
          v53 = v51[305].u32[0];
          if (v52 + 16 * v53 > v49)
          {
            v54 = v53 - 1;
            LODWORD(v55) = v54 & ((v82 >> 4) ^ (v82 >> 9));
            v56 = (int32x2_t *****)(v52 + 16 * v55);
            v57 = *v56;
            if (v82 == *v56)
            {
LABEL_65:
              *v56 = (int32x2_t ****)-8192;
              v51[304] = vadd_s32(v51[304], (int32x2_t)0x1FFFFFFFFLL);
              v50 = v82;
            }
            else
            {
              v58 = 1;
              while (v57 != (int32x2_t ****)-4096)
              {
                v59 = v55 + v58++;
                v55 = v59 & v54;
                v57 = *(int32x2_t *****)(v52 + 16 * v55);
                if (v82 == v57)
                {
                  v56 = (int32x2_t *****)(v52 + 16 * v55);
                  goto LABEL_65;
                }
              }
            }
            *((_BYTE *)v50 + 17) &= ~1u;
          }
        }
      }
    }
    if (v43)
    {
      if (v31 < HIDWORD(v84))
      {
LABEL_50:
        *((_QWORD *)v83 + v31) = v43;
        v33 = 1;
        goto LABEL_73;
      }
      v61 = v31 + 1;
LABEL_77:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v61, 8);
      LODWORD(v31) = v84;
      goto LABEL_50;
    }
    if (*(_BYTE *)(v34 + 16) != 5 || v34 == 0)
    {
      v48 = HIDWORD(v84);
    }
    else
    {
      v60 = sub_1C5B37380(v34, v80[0], a3);
      LODWORD(v31) = v84;
      v48 = HIDWORD(v84);
      if (v60)
      {
        v43 = (int32x2_t ****)v60;
        if (v84 < HIDWORD(v84))
          goto LABEL_50;
        v61 = v84 + 1;
        goto LABEL_77;
      }
    }
    if (v31 >= v48)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v31 + 1, 8);
      LODWORD(v31) = v84;
    }
    *((_QWORD *)v83 + v31) = v34;
LABEL_73:
    v31 = (llvm::Constant *)(v84 + 1);
    LODWORD(v84) = v84 + 1;
    ++v32;
    v21 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  }
  while (v32 < v21);
  v62 = v83;
  if ((v33 & 1) != 0)
  {
    if (*((_WORD *)a1 + 9) == 34)
    {
      v63 = 24;
      if (*((_BYTE *)a1 + 16) == 62)
        v63 = 64;
      v64 = *(llvm::GetElementPtrInst **)((char *)a1 + v63);
    }
    else
    {
      v64 = 0;
    }
    v11 = (llvm::PointerType ***)llvm::ConstantExpr::getWithOperands((uint64_t)a1, (uint64_t)v83, v31, (llvm::Constant *)v6, 0, v64);
    v62 = v83;
  }
  else
  {
    v11 = 0;
  }
  if (v62 != v85)
    free(v62);
  return (llvm::Constant *)v11;
}

llvm::UndefValue *sub_1C5B37B1C(unsigned __int8 **a1, llvm::Type *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  llvm::PointerType **v10;
  llvm::PointerType *v11;
  llvm::Constant ***v12;
  llvm::UndefValue *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unint64_t *v22;
  llvm::Value *v23;
  BOOL v24;
  unint64_t v25;
  int32x2_t ****v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int32x2_t *****v33;
  int32x2_t ****v34;
  int v35;
  int v36;
  uint64_t v37;
  llvm::Type *v38;
  BOOL v39;
  uint64_t v40;
  llvm::Type *v41;
  llvm::PointerType *v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  llvm::ValueSymbolTable *v51;
  uint64_t v52;
  unint64_t *v53;
  int32x2_t ****v54;
  __int16 v55;

  v9 = *a1;
  v10 = *(llvm::PointerType ***)*a1;
  v11 = v10[3];
  if (v11)
    v12 = (llvm::Constant ***)llvm::PointerType::get(v11, a2);
  else
    v12 = (llvm::Constant ***)llvm::PointerType::get(*v10, a2);
  v13 = (llvm::UndefValue *)v12;
  if (v9[16] <= 0x14u)
    return (llvm::UndefValue *)llvm::ConstantExpr::getAddrSpaceCast((llvm::ConstantExpr *)v9, v12, 0);
  v14 = *a3;
  v15 = *((unsigned int *)a3 + 4);
  if (!(_DWORD)v15)
    goto LABEL_11;
  v16 = ((_DWORD)v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
  v17 = (_QWORD *)(v14 + (v16 << 6));
  v18 = (unsigned __int8 *)v17[3];
  if (v9 != v18)
  {
    v19 = 1;
    while (v18 != (unsigned __int8 *)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v17 = (_QWORD *)(v14 + (v16 << 6));
      v18 = (unsigned __int8 *)v17[3];
      if (v9 == v18)
        goto LABEL_12;
    }
LABEL_11:
    v17 = (_QWORD *)(v14 + (v15 << 6));
  }
LABEL_12:
  v52 = 6;
  if (v17 == (_QWORD *)(v14 + (v15 << 6)))
  {
    v22 = 0;
    v25 = 0;
    v23 = 0;
    v53 = 0;
    v54 = 0;
  }
  else
  {
    v22 = 0;
    v23 = (llvm::Value *)v17[7];
    v53 = 0;
    v54 = (int32x2_t ****)v23;
    if (v23 == (llvm::Value *)-8192 || (v23 != (llvm::Value *)-4096 ? (v24 = v23 == 0) : (v24 = 1), v24))
    {
      v25 = 0;
    }
    else
    {
      v25 = v17[5] & 0xFFFFFFFFFFFFFFF8;
      v53 = *(unint64_t **)v25;
      v22 = v53;
      *(_QWORD *)v25 = &v52;
      v52 = v25 | 6;
      if (v22)
        *v22 = *v22 & 7 | (unint64_t)&v53;
    }
  }
  if (v23 != (llvm::Value *)-8192 && v23 != (llvm::Value *)-4096 && v23 != 0)
  {
    *(_QWORD *)v25 = v22;
    if (v53)
    {
      *v53 = *v53 & 7 | v25;
    }
    else
    {
      v27 = v54;
      v28 = ***v54;
      v29 = (unint64_t)v28[303];
      if (v29 <= v25)
      {
        v30 = v28[305].u32[0];
        if (v29 + 16 * v30 > v25)
        {
          v31 = v30 - 1;
          LODWORD(v32) = v31 & ((v54 >> 4) ^ (v54 >> 9));
          v33 = (int32x2_t *****)(v29 + 16 * v32);
          v34 = *v33;
          if (v54 == *v33)
          {
LABEL_37:
            *v33 = (int32x2_t ****)-8192;
            v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
            v27 = v54;
          }
          else
          {
            v35 = 1;
            while (v34 != (int32x2_t ****)-4096)
            {
              v36 = v32 + v35++;
              v32 = v36 & v31;
              v34 = *(int32x2_t *****)(v29 + 16 * v32);
              if (v54 == v34)
              {
                v33 = (int32x2_t *****)(v29 + 16 * v32);
                goto LABEL_37;
              }
            }
          }
          *((_BYTE *)v27 + 17) &= ~1u;
        }
      }
    }
  }
  if (!v23)
  {
    v37 = (uint64_t)a1[3];
    v52 = 0;
    if (sub_1C6200DDC(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v37, (uint64_t)v9, &v52))
      v39 = v52 == *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 16);
    else
      v39 = 1;
    if (v39)
    {
      v40 = *(unsigned int *)(a5 + 8);
      if (v40 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v40 + 1, 8);
        LODWORD(v40) = *(_DWORD *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v40) = a1;
      ++*(_DWORD *)(a5 + 8);
      return llvm::UndefValue::get(v13, v38);
    }
    else
    {
      v41 = (llvm::Type *)*(unsigned int *)(v52 + 16);
      v42 = *(llvm::PointerType **)(*(_QWORD *)v9 + 24);
      if (v42)
        v43 = llvm::PointerType::get(v42, v41);
      else
        v43 = llvm::PointerType::get(**(llvm::PointerType ***)v9, v41);
      v44 = v43;
      v45 = operator new(0x60uLL);
      v45[13] = v45[13] & 0x38000000 | 1;
      v23 = (llvm::Value *)(v45 + 8);
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = 0;
      *((_QWORD *)v45 + 2) = 0;
      *((_QWORD *)v45 + 3) = v45 + 8;
      v55 = 257;
      llvm::AddrSpaceCastInst::AddrSpaceCastInst((uint64_t)(v45 + 8), (uint64_t)v9, v44, (uint64_t)&v52, 0);
      v46 = *(_QWORD *)(v37 + 40);
      *((_QWORD *)v45 + 9) = v46;
      *(_WORD *)(v46 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v45 + 55) & 0x10) != 0)
      {
        v50 = *(_QWORD *)(v46 + 56);
        if (v50)
        {
          v51 = *(llvm::ValueSymbolTable **)(v50 + 104);
          if (v51)
            llvm::ValueSymbolTable::reinsertValue(v51, v23);
        }
      }
      v48 = *(_QWORD *)(v37 + 24);
      v47 = (_QWORD *)(v37 + 24);
      *((_QWORD *)v45 + 7) = v48;
      *((_QWORD *)v45 + 8) = v47;
      v49 = (char *)(v45 + 14);
      *(_QWORD *)(v48 + 8) = v49;
      *v47 = v49;
    }
  }
  return v23;
}

uint64_t sub_1C5B37ECC()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 2;
  v1.n128_u64[0] = (unint64_t)"The default address space is assumed as the flat address space. This is mainly for test purpose.";
  v1.n128_u64[1] = 96;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81DCF8, "assume-default-is-flat-addrspace", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81DCF8, &dword_1C475E000);
}

uint64_t sub_1C5B37F4C(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Remove redundant instructions";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "instsimplify";
  *(_QWORD *)(v3 + 24) = 12;
  *(_QWORD *)(v3 + 32) = &unk_1ED81DDC0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5B388B4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5B37FF8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81DDC0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194FD8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81DDC8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B37F4C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81DDC8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::InstSimplifyPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[5];
  __int16 v12;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OptimizationRemarkEmitterAnalysis::Key, a1);
  v11[0] = *(_QWORD *)(a1 + 40) + 272;
  v11[1] = v7;
  v11[2] = v6;
  v11[3] = v8;
  v11[4] = 0;
  v12 = 257;
  v9 = sub_1C5B381DC(a1, (uint64_t)v11);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v9 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5B381DC(uint64_t a1, uint64_t a2)
{
  char v2;
  llvm::SmallPtrSetImplBase *v3;
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  llvm::SmallPtrSetImplBase *v6;
  uint64_t i;
  uint64_t v8;
  llvm::Type *v9;
  llvm::DSOLocalEquivalent **v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  llvm::UndefValue *v27;
  uint64_t k;
  _QWORD *v29;
  int v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  _QWORD *v48;
  int v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t *v60;
  void (**v61)(void);
  void *v62;
  uint64_t v63;
  unsigned int v65;
  int v66;
  unsigned int v67;
  void *v68;
  uint64_t v71;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[64];
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  _BYTE v82[64];
  _QWORD v83[3];
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD v90[10];

  v2 = 0;
  v90[8] = *MEMORY[0x1E0C80C00];
  v3 = (llvm::SmallPtrSetImplBase *)&v78;
  v78 = v82;
  v79 = v82;
  v80 = 8;
  v81 = 0;
  v4 = (llvm::SmallPtrSetImplBase *)&v73;
  v73 = v77;
  v74 = v77;
  v75 = 8;
  v76 = 0;
  v5 = a1 + 72;
  v71 = a1 + 72;
  do
  {
    v6 = v4;
    for (i = *(_QWORD *)(a1 + 80); i != v5; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v8 = i - 24;
      else
        v8 = 0;
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a2 + 16), v8))
        continue;
      v85 = (char *)&v87;
      v86 = 0x800000000;
      v11 = v8 + 40;
      for (j = *(_QWORD *)(v8 + 48); j != v11; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v13 = j - 24;
        else
          v13 = 0;
        if (*((_DWORD *)v3 + 5) != *((_DWORD *)v3 + 6))
        {
          v14 = sub_1C477672C((uint64_t)v3, v13);
          v15 = *((_QWORD *)v3 + 1);
          v16 = 16;
          if (v15 == *(_QWORD *)v3)
            v16 = 20;
          if (v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)((char *)v3 + v16)))
            continue;
        }
        if (!*(_QWORD *)(v13 + 8))
        {
          if (llvm::wouldInstructionBeTriviallyDead(v13, 0))
          {
            v88 = 6;
            v89 = 0;
            v90[0] = v13;
            if (v13 != -8192 && v13 != -4096 && v13)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v88);
            v29 = (_QWORD *)sub_1C5087E70((unsigned int *)&v85, (unint64_t)&v88, 1);
            v30 = v86;
            v31 = &v85[24 * v86];
            *(_QWORD *)v31 = 6;
            *((_QWORD *)v31 + 1) = 0;
            v32 = (unint64_t)(v31 + 8);
            v33 = v29[2];
            *((_QWORD *)v31 + 2) = v33;
            if (v33 != -8192 && v33 != -4096)
            {
              if (v33)
              {
                v34 = *v29 & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)v31 + 1) = *(_QWORD *)v34;
                *(_QWORD *)v34 = v31;
                *(_QWORD *)v31 = v34 | 6;
                v35 = (uint64_t *)*((_QWORD *)v31 + 1);
                if (v35)
                  *v35 = *v35 & 7 | v32;
              }
            }
            LODWORD(v86) = v30 + 1;
            if (v90[0] == -8192 || v90[0] == -4096 || !v90[0])
              goto LABEL_84;
            v36 = v88 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v88 & 0xFFFFFFFFFFFFFFF8) = v89;
            v37 = (_QWORD *)v89;
            if (!v89)
            {
              v38 = v90[0];
              v39 = ***(int32x2_t ****)v90[0];
              v40 = (unint64_t)v39[303];
              if (v40 <= v36)
              {
                v41 = v39[305].u32[0];
                if (v40 + 16 * v41 > v36)
                {
                  v42 = v41 - 1;
                  LODWORD(v43) = v42 & ((LODWORD(v90[0]) >> 4) ^ (LODWORD(v90[0]) >> 9));
                  v44 = (uint64_t *)(v40 + 16 * v43);
                  v45 = *v44;
                  if (v90[0] == *v44)
                    goto LABEL_76;
                  v46 = 1;
                  while (v45 != -4096)
                  {
                    v47 = v43 + v46++;
                    v43 = v47 & v42;
                    v45 = *(_QWORD *)(v40 + 16 * v43);
                    if (v90[0] == v45)
                    {
LABEL_75:
                      v44 = (uint64_t *)(v40 + 16 * v43);
                      goto LABEL_76;
                    }
                  }
LABEL_77:
                  *(_BYTE *)(v38 + 17) &= ~1u;
                }
              }
LABEL_84:
              v2 = 1;
              continue;
            }
LABEL_83:
            *v37 = *v37 & 7 | v36;
            goto LABEL_84;
          }
          if (!*(_QWORD *)(v13 + 8))
            continue;
        }
        v17 = *(_DWORD *)(v13 + 20);
        if ((v17 & 0x40000000) != 0)
        {
          v19 = *(uint64_t **)(v13 - 8);
          v18 = v17 & 0x7FFFFFF;
        }
        else
        {
          v18 = v17 & 0x7FFFFFF;
          v19 = (uint64_t *)(v13 - 32 * v18);
        }
        v88 = (unint64_t)v90;
        v89 = 0x800000000;
        if (v18 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, (uint64_t)v90, v18, 8);
          v20 = v89;
          v22 = (_QWORD *)v88;
          v21 = v89;
LABEL_23:
          v23 = 32 * v18;
          v24 = &v22[v21];
          do
          {
            v25 = *v19;
            v19 += 4;
            *v24++ = v25;
            v23 -= 32;
          }
          while (v23);
          v26 = (_QWORD *)v88;
          goto LABEL_27;
        }
        v20 = 0;
        if (v18)
        {
          v21 = 0;
          v22 = v90;
          goto LABEL_23;
        }
        v26 = v90;
LABEL_27:
        LODWORD(v89) = v20 + v18;
        v27 = llvm::SimplifyInstructionWithOperands((llvm *)v13, (uint64_t)v26, (v20 + v18), a2, v9, v10);
        if ((_QWORD *)v88 == v90)
        {
          if (!v27)
            continue;
        }
        else
        {
          free((void *)v88);
          if (!v27)
            continue;
        }
        for (k = *(_QWORD *)(v13 + 8); k; k = *(_QWORD *)(k + 8))
          sub_1C4774094(v6, *(_QWORD *)(k + 24));
        v2 = 1;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, v27, (llvm::Value *)1);
        if (!*(_QWORD *)(v13 + 8) && (llvm::wouldInstructionBeTriviallyDead(v13, 0) & 1) != 0)
        {
          v88 = 6;
          v89 = 0;
          v90[0] = v13;
          if (v13 != -8192 && v13 != -4096 && v13)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v88);
          v48 = (_QWORD *)sub_1C5087E70((unsigned int *)&v85, (unint64_t)&v88, 1);
          v49 = v86;
          v50 = &v85[24 * v86];
          *(_QWORD *)v50 = 6;
          *((_QWORD *)v50 + 1) = 0;
          v51 = (unint64_t)(v50 + 8);
          v52 = v48[2];
          *((_QWORD *)v50 + 2) = v52;
          if (v52 != -8192 && v52 != -4096)
          {
            if (v52)
            {
              v53 = *v48 & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)v50 + 1) = *(_QWORD *)v53;
              *(_QWORD *)v53 = v50;
              *(_QWORD *)v50 = v53 | 6;
              v54 = (uint64_t *)*((_QWORD *)v50 + 1);
              if (v54)
                *v54 = *v54 & 7 | v51;
            }
          }
          LODWORD(v86) = v49 + 1;
          if (v90[0] == -8192 || v90[0] == -4096 || !v90[0])
            goto LABEL_84;
          v36 = v88 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v88 & 0xFFFFFFFFFFFFFFF8) = v89;
          v37 = (_QWORD *)v89;
          if (!v89)
          {
            v38 = v90[0];
            v39 = ***(int32x2_t ****)v90[0];
            v40 = (unint64_t)v39[303];
            if (v40 <= v36)
            {
              v55 = v39[305].u32[0];
              if (v40 + 16 * v55 > v36)
              {
                v56 = v55 - 1;
                LODWORD(v43) = v56 & ((LODWORD(v90[0]) >> 4) ^ (LODWORD(v90[0]) >> 9));
                v44 = (uint64_t *)(v40 + 16 * v43);
                v57 = *v44;
                if (v90[0] != *v44)
                {
                  v58 = 1;
                  while (v57 != -4096)
                  {
                    v59 = v43 + v58++;
                    v43 = v59 & v56;
                    v57 = *(_QWORD *)(v40 + 16 * v43);
                    if (v90[0] == v57)
                      goto LABEL_75;
                  }
                  goto LABEL_77;
                }
LABEL_76:
                *v44 = -8192;
                v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                v38 = v90[0];
                goto LABEL_77;
              }
            }
            goto LABEL_84;
          }
          goto LABEL_83;
        }
      }
      v60 = *(uint64_t **)(a2 + 8);
      v84 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v85, v60, 0, (uint64_t)v83);
      if (v84 == v83)
      {
        v61 = (void (**)(void))(v83[0] + 32);
        v5 = v71;
LABEL_89:
        (*v61)();
      }
      else
      {
        v5 = v71;
        if (v84)
        {
          v61 = (void (**)(void))(*v84 + 40);
          goto LABEL_89;
        }
      }
      sub_1C52768FC(&v85);
    }
    v62 = (void *)*((_QWORD *)v3 + 1);
    if (v62 == *(void **)v3)
      goto LABEL_93;
    v63 = *((unsigned int *)v3 + 4);
    if (v63 < 0x21 || 4 * (*((_DWORD *)v3 + 5) - *((_DWORD *)v3 + 6)) >= v63)
    {
      memset(v62, 255, 8 * v63);
LABEL_93:
      *((_DWORD *)v3 + 5) = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    else
    {
      free(v62);
      v65 = *((_DWORD *)v3 + 5) - *((_DWORD *)v3 + 6);
      v66 = 1 << (33 - __clz(v65 - 1));
      *((_DWORD *)v3 + 5) = 0;
      *((_DWORD *)v3 + 6) = 0;
      if (v65 <= 0x10)
        v67 = 32;
      else
        v67 = v66;
      *((_DWORD *)v3 + 4) = v67;
      v68 = malloc_type_malloc(8 * v67, 0x4065EBACuLL);
      if (!v68)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *((_QWORD *)v3 + 1) = v68;
      memset(v68, 255, 8 * *((unsigned int *)v3 + 4));
    }
    v4 = v3;
    v3 = v6;
  }
  while (*((_DWORD *)v6 + 5) != *((_DWORD *)v6 + 6));
  if (v74 != v73)
    free(v74);
  if (v79 != v78)
    free(v79);
  return v2 & 1;
}

uint64_t sub_1C5B388B4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B37FF8(v0);
}

void sub_1C5B388E0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B38904(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
}

uint64_t sub_1C5B38974(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  void **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  char *v17;
  llvm::AssumptionCacheTracker *v18;
  uint64_t AssumptionCache;
  void **v20;
  void *v21;
  void *v22;
  void **v23;
  int v24;
  uint64_t v25;
  uint64_t v26[2];
  int v27;
  uint64_t v28[2];
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *__src;
  uint64_t v35;
  _QWORD v36[2];
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::TargetLibraryInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  llvm::TargetLibraryAnalysis::run(v10 + 32, (uint64_t)a2, (uint64_t)&v33);
  *(_QWORD *)(v10 + 240) = v33;
  v11 = (uint64_t *)(v10 + 240);
  if (!*(_BYTE *)(v10 + 320))
  {
    v22 = (void *)(v10 + 264);
    *(_QWORD *)(v10 + 248) = v10 + 264;
    v23 = (void **)(v10 + 248);
    *(_QWORD *)(v10 + 256) = 0x600000000;
    v24 = v35;
    if (!(_DWORD)v35 || v23 == &__src)
      goto LABEL_37;
    if (v35 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10 + 248, v10 + 264, v35, 8);
      v25 = v35;
      if (!(_DWORD)v35)
      {
LABEL_36:
        *(_DWORD *)(v10 + 256) = v24;
LABEL_37:
        *(_DWORD *)(v10 + 312) = v38;
        *(_BYTE *)(v10 + 320) = 1;
        goto LABEL_21;
      }
      v22 = *v23;
    }
    else
    {
      v25 = v35;
    }
    memcpy(v22, __src, 8 * v25);
    goto LABEL_36;
  }
  if (v11 != &v33)
  {
    v12 = (void **)(v10 + 248);
    v13 = v35;
    v14 = *(unsigned int *)(v10 + 256);
    if (v14 >= v35)
    {
      if ((_DWORD)v35)
        memmove(*v12, __src, 8 * v35);
      goto LABEL_19;
    }
    if (*(_DWORD *)(v10 + 260) < v35)
    {
      *(_DWORD *)(v10 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10 + 248, v10 + 264, v13, 8);
    }
    else if ((_DWORD)v14)
    {
      memmove(*v12, __src, 8 * v14);
      goto LABEL_17;
    }
    v14 = 0;
LABEL_17:
    if (v14 != v35)
      memcpy((char *)*v12 + 8 * v14, (char *)__src + 8 * v14, 8 * v35 - 8 * v14);
LABEL_19:
    *(_DWORD *)(v10 + 256) = v13;
  }
  *(_DWORD *)(v10 + 312) = v38;
LABEL_21:
  v15 = v7 + 32;
  if (__src != v36)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v28);
  sub_1C4D8B52C(v26);
  v16 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::AssumptionCacheTracker::ID);
  v18 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v18, a2);
  v20 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v21 = *v20;
    v20 += 2;
  }
  while (v21 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  (*(void (**)(_QWORD, void *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v33 = *((_QWORD *)a2 + 5) + 272;
  __src = v11;
  v35 = v15;
  v36[0] = AssumptionCache;
  v36[1] = 0;
  v37 = 257;
  return sub_1C5B381DC((uint64_t)a2, (uint64_t)&v33);
}

uint64_t sub_1C5B38CB8(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLazyValueInfoWrapperPassPass(a1, v2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Jump Threading";
  *(_QWORD *)(v4 + 8) = 14;
  *(_QWORD *)(v4 + 16) = "jump-threading";
  *(_QWORD *)(v4 + 24) = 14;
  *(_QWORD *)(v4 + 32) = &unk_1ED81DDD0;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5B433DC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5B38D60(uint64_t a1, char a2, int a3)
{
  int v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81DDD0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8195078;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x1000000000;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  if (byte_1ED835ED0)
    a2 = 1;
  *(_BYTE *)(a1 + 272) = a2;
  v5 = dword_1ED835E10;
  if (a3 != -1)
    v5 = a3;
  *(_DWORD *)(a1 + 268) = v5;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED81DDD8);
  if (v7 != -1)
  {
    v11[0] = sub_1C5B38CB8;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED81DDD8, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::JumpThreadingPass::JumpThreadingPass(uint64_t this, char a2, int a3)
{
  int v4;

  *(_WORD *)(this + 56) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 64) = this + 80;
  *(_QWORD *)(this + 72) = 0x1000000000;
  *(_QWORD *)(this + 224) = 0;
  *(_QWORD *)(this + 216) = 0;
  *(_QWORD *)(this + 208) = this + 216;
  if (byte_1ED835ED0)
    a2 = 1;
  *(_BYTE *)(this + 240) = a2;
  v4 = dword_1ED835E10;
  if (a3 != -1)
    v4 = a3;
  *(_DWORD *)(this + 236) = v4;
  return this;
}

{
  int v4;

  *(_WORD *)(this + 56) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 64) = this + 80;
  *(_QWORD *)(this + 72) = 0x1000000000;
  *(_QWORD *)(this + 224) = 0;
  *(_QWORD *)(this + 216) = 0;
  *(_QWORD *)(this + 208) = this + 216;
  if (byte_1ED835ED0)
    a2 = 1;
  *(_BYTE *)(this + 240) = a2;
  v4 = dword_1ED835E10;
  if (a3 != -1)
    v4 = a3;
  *(_DWORD *)(this + 236) = v4;
  return this;
}

void llvm::JumpThreadingPass::run(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  llvm::LazyValueInfo *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  char v15;
  llvm *v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  llvm *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  size_t *v31;
  const void *v32;
  size_t v33;
  size_t v34;
  _BYTE *v35;
  llvm *DomTree;
  llvm *v37;
  llvm *v38;
  uint64_t **v39;
  void *v40[2];
  uint64_t v41;
  uint64_t v42[2];
  int v43;
  uint64_t v44;
  uint64_t ***v45;
  char v46;
  int v47;
  void **v48[2];
  int v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD v55[6];
  _QWORD v56[2];
  void *v57[2];
  _QWORD v58[36];
  char v59;
  _BYTE *v60;
  void *v61;
  uint64_t v62;
  int v63;
  _BYTE v64[64];
  _QWORD v65[3];
  __int16 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, (uint64_t)a2) + 8);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 88))(*v8))
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    return;
  }
  v9 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a2)+ 8);
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2) + 8;
  v11 = (llvm::LazyValueInfo *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LazyValueAnalysis::Key, (uint64_t)a2)+ 8);
  v57[0] = v58;
  v12 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, (uint64_t)a2) + 8;
  v57[1] = (void *)0x1000000000;
  v58[33] = 0;
  v58[32] = 0;
  v58[34] = v10;
  v58[35] = 0;
  v59 = 1;
  v60 = v64;
  v61 = v64;
  v62 = 8;
  v63 = 0;
  memset(v65, 0, sizeof(v65));
  v66 = 0;
  llvm::Function::getEntryCount(a2, 0, (uint64_t)v48);
  if ((_BYTE)v49)
  {
    v40[0] = &v41;
    v40[1] = (void *)0x100000000;
    v47 = 0;
    v42[0] = 0;
    v42[1] = 0;
    v43 = 0;
    v46 = 0;
    v44 = 0;
    v45 = a2;
    sub_1C53BA620((uint64_t)v40, 0);
    v48[0] = 0;
    v48[1] = 0;
    v49 = 0;
    v50 = 0u;
    v51 = 0u;
    v52 = 0;
    v53 = v55;
    v54 = 0x400000000;
    v55[4] = v56;
    v55[5] = 0;
    v56[0] = 0;
    v56[1] = 1;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)v48, (uint64_t)v40);
    sub_1C4DC4E38(v42);
    if (v40[0] != &v41)
      free(v40[0]);
    v13 = operator new();
    sub_1C4EEA178(v13, (const llvm::Function *)a2, (uint64_t)v48, v9, 0, 0);
    v14 = (uint64_t **)operator new();
    *v14 = 0;
    llvm::BlockFrequencyInfo::calculate(v14, (llvm::Value *)a2);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v48);
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  llvm::Function::getEntryCount(a2, 0, (uint64_t)v48);
  v38 = (llvm *)v13;
  v39 = v14;
  v15 = llvm::JumpThreadingPass::runImpl(a1, (llvm::Function *)a2, (uint64_t)v9, (uint64_t)v8, (uint64_t)v11, v12, (uint64_t)v57, v49, (uint64_t *)&v39, (uint64_t *)&v38);
  v16 = v38;
  v38 = 0;
  if (v16)
  {
    v17 = sub_1C4DC0BBC((uint64_t)v16);
    v16 = (llvm *)MEMORY[0x1CAA32FC0](v17, 0x1060C40D526B124);
  }
  v18 = v39;
  v39 = 0;
  if (v18)
  {
    v19 = *v18;
    *v18 = 0;
    if (v19)
      (*(void (**)(uint64_t *))(*v19 + 8))(v19);
    v16 = (llvm *)MEMORY[0x1CAA32FC0](v18, 0x20C4093837F09);
  }
  if (byte_1ED81DF20)
  {
    v20 = llvm::dbgs(v16);
    v21 = v20;
    v22 = *((_QWORD *)v20 + 4);
    if ((unint64_t)(*((_QWORD *)v20 + 3) - v22) > 0x11)
    {
      *(_WORD *)(v22 + 16) = 10016;
      *(_OWORD *)v22 = *(_OWORD *)"LVI for function '";
      *((_QWORD *)v20 + 4) += 18;
    }
    else
    {
      v21 = llvm::raw_ostream::write(v20, "LVI for function '", 0x12uLL);
    }
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v35 = (_BYTE *)*((_QWORD *)v21 + 4);
LABEL_37:
      if (*((_QWORD *)v21 + 3) - (_QWORD)v35 > 2uLL)
      {
        v35[2] = 10;
        *(_WORD *)v35 = 14887;
        *((_QWORD *)v21 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v21, "':\n", 3uLL);
      }
      DomTree = (llvm *)llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)v57);
      v37 = llvm::dbgs(DomTree);
      llvm::LazyValueInfo::printLVI(v11, (llvm::Function *)a2, DomTree, v37);
      goto LABEL_15;
    }
    v23 = ***a2;
    v24 = *(_QWORD *)(v23 + 152);
    v25 = *(unsigned int *)(v23 + 168);
    if ((_DWORD)v25)
    {
      LODWORD(v26) = (v25 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v27 = (uint64_t ****)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 == a2)
        goto LABEL_33;
      v29 = 1;
      while (v28 != (uint64_t ***)-4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(uint64_t ****)(v24 + 16 * v26);
        if (v28 == a2)
        {
          v27 = (uint64_t ****)(v24 + 16 * v26);
          goto LABEL_33;
        }
      }
    }
    v27 = (uint64_t ****)(v24 + 16 * v25);
LABEL_33:
    v31 = (size_t *)v27[1];
    v34 = *v31;
    v32 = v31 + 2;
    v33 = v34;
    v35 = (_BYTE *)*((_QWORD *)v21 + 4);
    if (v34 <= *((_QWORD *)v21 + 3) - (_QWORD)v35)
    {
      if (v33)
      {
        memcpy(v35, v32, v33);
        v35 = (_BYTE *)(*((_QWORD *)v21 + 4) + v33);
        *((_QWORD *)v21 + 4) = v35;
      }
    }
    else
    {
      v21 = llvm::raw_ostream::write(v21, (const char *)v32, v33);
      v35 = (_BYTE *)*((_QWORD *)v21 + 4);
    }
    goto LABEL_37;
  }
LABEL_15:
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v15 & 1) != 0)
  {
    sub_1C4DDB144(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a4, (uint64_t)&llvm::LazyValueAnalysis::Key);
  }
  else
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v57);
  v48[0] = (void **)v65;
  sub_1C50B10F0(v48);
  if (v61 != v60)
    free(v61);
  if (v57[0] != v58)
    free(v57[0]);
}

uint64_t llvm::JumpThreadingPass::runImpl(uint64_t a1, llvm::Function *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t DomTree;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  llvm::BasicBlock *v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  llvm::BasicBlock *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int v50;
  llvm *v52;
  llvm::DomTreeUpdater *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  llvm::BasicBlock **v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  llvm **v63;
  uint64_t v64;
  llvm::BasicBlock *v65;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  _BYTE v72[136];

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  v13 = *(uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = 0;
  if (v13)
  {
    v14 = *v13;
    *v13 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    MEMORY[0x1CAA32FC0](v13, 0x20C4093837F09);
  }
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v15)
  {
    v16 = sub_1C4DC0BBC(v15);
    MEMORY[0x1CAA32FC0](v16, 0x1060C40D526B124);
  }
  *(_BYTE *)(a1 + 56) = a8;
  v17 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)a2 + 5) + 112), "llvm.experimental.guard", 0x17uLL);
  v18 = v17 && !*(_BYTE *)(v17 + 16) && *(_QWORD *)(v17 + 8) != 0;
  *(_BYTE *)(a1 + 57) = v18;
  if (*(_BYTE *)(a1 + 56))
  {
    v19 = *a10;
    *a10 = 0;
    v20 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v19;
    if (v20)
    {
      v21 = sub_1C4DC0BBC(v20);
      MEMORY[0x1CAA32FC0](v21, 0x1060C40D526B124);
    }
    v22 = *a9;
    *a9 = 0;
    v23 = *(uint64_t **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v22;
    if (v23)
    {
      v24 = *v23;
      *v23 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      MEMORY[0x1CAA32FC0](v23, 0x20C4093837F09);
    }
  }
  if (word_1ED835D98)
  {
    v26 = dword_1ED835E10;
  }
  else
  {
    v25 = *((_QWORD *)a2 + 14);
    if (v25 && *(char *)(v25 + 13) < 0)
      v26 = 3;
    else
      v26 = *(_DWORD *)(a1 + 236);
  }
  *(_DWORD *)(a1 + 232) = v26;
  v68 = v72;
  v69 = v72;
  v70 = 16;
  v71 = 0;
  DomTree = llvm::DomTreeUpdater::getDomTree(*(llvm::DomTreeUpdater **)(a1 + 32));
  v28 = (_QWORD *)((char *)a2 + 72);
  v29 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v29 != (_QWORD *)((char *)a2 + 72))
  {
    v30 = DomTree;
    do
    {
      if (v29)
        v31 = (uint64_t)(v29 - 3);
      else
        v31 = 0;
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v30, v31))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v68, v31);
      v29 = (_QWORD *)v29[1];
    }
    while (v29 != v28);
  }
  if (!byte_1ED81DFE0)
    llvm::JumpThreadingPass::findLoopHeaders((llvm::JumpThreadingPass *)a1, a2);
  v67 = (_QWORD *)(a1 + 216);
  v32 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v32 == v28)
  {
    v33 = 0;
    goto LABEL_107;
  }
  v33 = 0;
  do
  {
    v34 = 0;
    do
    {
      if (v32)
        v35 = (llvm::BasicBlock *)(v32 - 3);
      else
        v35 = 0;
      v36 = (char *)sub_1C477672C((uint64_t)&v68, (uint64_t)v35);
      if (v69 == v68)
        v37 = (uint64_t *)((char *)&v70 + 4);
      else
        v37 = &v70;
      if (v36 == &v69[8 * *(unsigned int *)v37])
      {
        v38 = v34;
        do
        {
          v34 = v38;
          v39 = llvm::JumpThreadingPass::processBlock((llvm::DomTreeUpdater **)a1, v35);
          v38 = 1;
        }
        while ((v39 & 1) != 0);
        if ((v34 & 1) != 0)
          llvm::RemoveRedundantDbgInstrs(v35, v40);
        v41 = v32 == 0;
        v42 = *((_QWORD *)a2 + 10);
        if (v42)
          v41 = v42 - 24 == (_QWORD)v35;
        if (!v41 && !llvm::DomTreeUpdater::isBBPendingDeletion(*(llvm::DomTreeUpdater **)(a1 + 32), v35))
        {
          v43 = *((_QWORD *)v35 + 1);
          if (!v43)
          {
LABEL_63:
            sub_1C5B3A920(a1 + 64, (unint64_t)v35);
            llvm::LazyValueInfo::eraseBlock(*(llvm::LazyValueInfo **)(a1 + 16), v35);
            llvm::DeleteDeadBlock(v35, *(llvm::BasicBlock **)(a1 + 32), 0);
LABEL_64:
            v34 = 1;
            goto LABEL_50;
          }
          while (1)
          {
            v44 = *(_QWORD *)(v43 + 24);
            v45 = *(unsigned __int8 *)(v44 + 16);
            v46 = v44 && v45 >= 0x1C;
            if (v46 && v45 - 29 < 0xB)
              break;
            v43 = *(_QWORD *)(v43 + 8);
            if (!v43)
              goto LABEL_63;
          }
          v48 = (_QWORD *)*((_QWORD *)v35 + 5);
          if (v48 != (_QWORD *)((char *)v35 + 40))
          {
            v49 = v48 - 3;
            if (!v48)
              v49 = 0;
            v50 = *((unsigned __int8 *)v49 + 16) - 40;
            if (v50 < 0xFFFFFFF5)
              v49 = 0;
            if (v48)
            {
              if (*((_BYTE *)v49 + 16) == 30 && v50 >= 0xFFFFFFF5 && (*((_DWORD *)v49 + 5) & 0x7FFFFFF) == 1)
              {
                v52 = (llvm *)*(v49 - 4);
                if (llvm::BasicBlock::getFirstNonPHIOrDbg(v35, 1)[16] - 29 <= 0xA)
                {
                  v54 = *(_QWORD *)(a1 + 224);
                  if (v54)
                  {
                    v55 = (_QWORD *)*v67;
                    if (*v67)
                    {
                      do
                      {
                        v56 = v55[4];
                        if ((unint64_t)v35 >= v56)
                        {
                          if (v56 >= (unint64_t)v35)
                            goto LABEL_50;
                          ++v55;
                        }
                        v55 = (_QWORD *)*v55;
                      }
                      while (v55);
                      goto LABEL_91;
                    }
                  }
                  else
                  {
                    v57 = *(unsigned int *)(a1 + 72);
                    if ((_DWORD)v57)
                    {
                      v58 = *(llvm::BasicBlock ***)(a1 + 64);
                      v59 = 8 * v57;
                      while (*v58 != v35)
                      {
                        ++v58;
                        v59 -= 8;
                        if (!v59)
                          goto LABEL_91;
                      }
                      if (v59)
                        goto LABEL_50;
LABEL_91:
                      if (v54)
                      {
                        v60 = (_QWORD *)(a1 + 216);
                        while (1)
                        {
                          v60 = (_QWORD *)*v60;
                          if (!v60)
                            break;
                          v61 = v60[4];
                          if ((unint64_t)v52 >= v61)
                          {
                            if (v61 >= (unint64_t)v52)
                              goto LABEL_50;
                            ++v60;
                          }
                        }
                      }
                      else
                      {
                        v62 = *(unsigned int *)(a1 + 72);
                        if ((_DWORD)v62)
                        {
                          v63 = *(llvm ***)(a1 + 64);
                          v64 = 8 * v62;
                          while (*v63 != v52)
                          {
                            ++v63;
                            v64 -= 8;
                            if (!v64)
                              goto LABEL_103;
                          }
                          if (v64)
                            goto LABEL_50;
                        }
                      }
                    }
                  }
LABEL_103:
                  if (llvm::TryToSimplifyUncondBranchFromEmptyBlock(v35, *(llvm::BasicBlock **)(a1 + 32), v53))
                  {
                    llvm::RemoveRedundantDbgInstrs(v52, v65);
                    llvm::LazyValueInfo::eraseBlock(*(llvm::LazyValueInfo **)(a1 + 16), v35);
                    goto LABEL_64;
                  }
                }
              }
            }
          }
        }
      }
LABEL_50:
      v32 = (_QWORD *)v32[1];
    }
    while (v32 != v28);
    if ((v34 & 1) == 0)
      break;
    v32 = (_QWORD *)*((_QWORD *)a2 + 10);
    v33 = 1;
  }
  while (v32 != v28);
LABEL_107:
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C47655E8(a1 + 208, *(_QWORD **)(a1 + 216));
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = v67;
  if (v69 != v68)
    free(v69);
  return v33 & 1;
}

uint64_t llvm::JumpThreadingPass::processBlock(llvm::DomTreeUpdater **this, llvm::BasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  llvm::BasicBlock *v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  _QWORD *v13;
  BOOL v14;
  unsigned __int8 *v15;
  unsigned int v16;
  BOOL v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  llvm::Value *v21;
  char v22;
  char v23;
  int v24;
  llvm::Value **v25;
  int v26;
  llvm::Value **v27;
  BOOL v28;
  llvm::UndefValue *v29;
  llvm::UndefValue *v30;
  int v31;
  unsigned int v32;
  llvm::Value *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int i;
  unint64_t Successor;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  llvm::Value *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned int v75;
  llvm::SwitchInst *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  llvm::Instruction *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  char *v88;
  uint64_t v89;
  BOOL v90;
  llvm::APInt *v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  llvm::BasicBlock *v100;
  _QWORD *v101;
  _QWORD *v102;
  llvm::BasicBlock *v103;
  _QWORD *v104;
  _QWORD *v105;
  unsigned int v106;
  BOOL v107;
  uint64_t SinglePredecessor;
  llvm::BasicBlock *v109;
  _QWORD *v110;
  unint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  llvm::BasicBlock *v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v120;
  llvm::MDNode *v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t *v127;
  llvm::Constant *v128;
  int PredicateAt;
  int v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unsigned __int8 **v147;
  unsigned __int8 *v148;
  llvm::DomTreeUpdater **v149;
  unsigned __int8 *v150;
  uint64_t v151;
  _QWORD *v152;
  llvm::Type *v153;
  const llvm::APInt *v154;
  uint64_t **v155;
  llvm::Value **True;
  llvm::Value *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  int v163;
  int v164;
  llvm::Value *v165;
  uint64_t v166;
  uint64_t v168;
  llvm::DomTreeUpdater *v169;
  uint64_t v170;
  llvm::ValueSymbolTable *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  llvm::ValueSymbolTable *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  llvm::DomTreeUpdater **v181;
  llvm::Value *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  void *__p;
  unint64_t v191;
  unint64_t v192;
  int v193;
  _QWORD v194[18];

  v194[16] = *MEMORY[0x1E0C80C00];
  if (llvm::DomTreeUpdater::isBBPendingDeletion(this[4], a2))
    return 0;
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 24);
      v6 = *(unsigned __int8 *)(v5 + 16);
      v7 = v5 && v6 >= 0x1C;
      if (v7 && v6 - 29 < 0xB)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 80);
    if (v9)
      v10 = (llvm::BasicBlock *)(v9 - 24);
    else
      v10 = 0;
    if (v10 != a2)
      return 0;
  }
  if ((llvm::JumpThreadingPass::maybeMergeBasicBlockIntoOnlyPred((llvm::JumpThreadingPass *)this, a2) & 1) != 0
    || (llvm::JumpThreadingPass::tryToUnfoldSelectInCurrBB((llvm::JumpThreadingPass *)this, a2) & 1) != 0
    || *((_BYTE *)this + 57) && (llvm::JumpThreadingPass::processGuards((llvm::JumpThreadingPass *)this, a2) & 1) != 0)
  {
    return 1;
  }
  v13 = (_QWORD *)((char *)a2 + 40);
  v12 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v12 == (llvm::BasicBlock *)((char *)a2 + 40))
    return 0;
  v14 = v12 == 0;
  if (v12)
    v15 = (unsigned __int8 *)v12 - 24;
  else
    v15 = 0;
  v16 = v15[16] - 40;
  v17 = __CFADD__(v16, 11);
  if (v16 >= 0xFFFFFFF5)
    v18 = v15;
  else
    v18 = 0;
  v19 = v18[16];
  if (!v17)
    v14 = 1;
  if (v19 == 30 && !v14)
  {
    if ((*((_DWORD *)v18 + 5) & 0x7FFFFFF) != 1)
    {
      v20 = 0;
      v21 = (llvm::Value *)*((_QWORD *)v18 - 12);
      goto LABEL_49;
    }
    return 0;
  }
  v22 = v19 != 31 || v14;
  if ((v22 & 1) != 0)
  {
    v23 = v19 != 32 || v14;
    if ((v23 & 1) != 0)
      return 0;
    v24 = *((_DWORD *)v18 + 5);
    if ((v24 & 0x7FFFFFF) == 1)
      return 0;
    if ((v24 & 0x40000000) != 0)
      v25 = (llvm::Value **)*((_QWORD *)v18 - 1);
    else
      v25 = (llvm::Value **)&v18[-32 * (v24 & 0x7FFFFFF)];
    v21 = llvm::Value::stripPointerCasts(*v25);
    v20 = 1;
  }
  else
  {
    v26 = *((_DWORD *)v18 + 5);
    if ((v26 & 0x40000000) != 0)
      v27 = (llvm::Value **)*((_QWORD *)v18 - 1);
    else
      v27 = (llvm::Value **)&v18[-32 * (v26 & 0x7FFFFFF)];
    v20 = 0;
    v21 = *v27;
  }
LABEL_49:
  if (v21)
    v28 = *((unsigned __int8 *)v21 + 16) >= 0x1Cu;
  else
    v28 = 0;
  if (v28
    && (v29 = llvm::ConstantFoldInstruction((uint64_t)v21, (llvm::Type *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 40) + 272), (llvm::DSOLocalEquivalent **)*this)) != 0)
  {
    v30 = v29;
    v31 = 1;
    llvm::Value::doRAUW(v21, v29, (llvm::Value *)1);
    if (!*((_QWORD *)v21 + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)v21, (uint64_t *)*this))
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v21 + 5) + 40, (uint64_t ***)v21);
      v125 = *((_QWORD *)v21 + 3);
      v126 = (_QWORD *)*((_QWORD *)v21 + 4);
      *v126 = v125;
      *(_QWORD *)(v125 + 8) = v126;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = 0;
      llvm::Value::deleteValue(v21);
    }
    v21 = v30;
  }
  else
  {
    v31 = 0;
  }
  v32 = *((unsigned __int8 *)v21 + 16);
  if (v32 == 95)
    v33 = v21;
  else
    v33 = 0;
  if (v32 - 11 < 2
    || v33
    && *(unsigned __int8 *)(*((_QWORD *)v33 - 4) + 16) - 11 <= 1
    && (v38 = *((_QWORD *)v33 + 1)) != 0
    && !*(_QWORD *)(v38 + 8))
  {
    v181 = this;
    v182 = v33;
    v34 = sub_1C5B3CD70((uint64_t)a2);
    __p = 0;
    v191 = 0;
    v192 = 0;
    v35 = (_QWORD *)*((_QWORD *)a2 + 5);
    if (v35 == v13)
    {
      v37 = 0;
    }
    else
    {
      if (v35)
        v36 = v35 - 3;
      else
        v36 = 0;
      if (*((unsigned __int8 *)v36 + 16) - 29 >= 0xB)
        v37 = 0;
      else
        v37 = v36;
    }
    v40 = *((unsigned __int8 *)v37 + 16);
    if (v40 != 30)
      __asm { BR              X11 }
    if ((*((_DWORD *)v37 + 5) & 0x7FFFFFF) == 3)
      v41 = 2;
    else
      v41 = 1;
    sub_1C501881C((uint64_t)&__p, v41);
    v42 = *((unsigned __int8 *)v37 + 16);
    if (v42 != 30)
      __asm { BR              X10 }
    if ((*((_DWORD *)v37 + 5) & 0x7FFFFFF) == 3)
      v43 = 2;
    else
      v43 = 1;
    for (i = 0; i != v43; ++i)
    {
      if (i != (_DWORD)v34)
      {
        Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v37, i);
        llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)Successor, a2, 1);
        v46 = Successor | 4;
        v47 = (_QWORD *)v191;
        if (v191 >= v192)
        {
          v49 = __p;
          v50 = (uint64_t)(v191 - (_QWORD)__p) >> 4;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 60)
            abort();
          v52 = v34;
          v53 = v37;
          v54 = v192 - (_QWORD)__p;
          if ((uint64_t)(v192 - (_QWORD)__p) >> 3 > v51)
            v51 = v54 >> 3;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
            v55 = 0xFFFFFFFFFFFFFFFLL;
          else
            v55 = v51;
          if (v55)
          {
            if (v55 >> 60)
              sub_1C4764EE4();
            v56 = (char *)operator new(16 * v55);
          }
          else
          {
            v56 = 0;
          }
          v57 = &v56[16 * v50];
          *(_QWORD *)v57 = a2;
          *((_QWORD *)v57 + 1) = v46;
          v58 = v57;
          if (v47 != v49)
          {
            do
            {
              *((_OWORD *)v58 - 1) = *((_OWORD *)v47 - 1);
              v58 -= 16;
              v47 -= 2;
            }
            while (v47 != v49);
            v47 = __p;
          }
          v48 = v57 + 16;
          __p = v58;
          v191 = (unint64_t)(v57 + 16);
          v192 = (unint64_t)&v56[16 * v55];
          if (v47)
            operator delete(v47);
          v37 = v53;
          v34 = v52;
        }
        else
        {
          *(_QWORD *)v191 = a2;
          v47[1] = v46;
          v48 = v47 + 2;
        }
        v191 = (unint64_t)v48;
      }
    }
    v59 = llvm::Instruction::getSuccessor((llvm::Instruction *)v37, v34);
    v60 = (char *)operator new(0x60uLL);
    v61 = v60;
    *((_DWORD *)v60 + 13) = *((_DWORD *)v60 + 13) & 0x38000000 | 1;
    *((_QWORD *)v60 + 1) = 0;
    *((_QWORD *)v60 + 2) = 0;
    *(_QWORD *)v60 = 0;
    *((_QWORD *)v60 + 4) = ***(_QWORD ***)v59 + 1576;
    v62 = (llvm::Value *)(v60 + 32);
    *((_QWORD *)v60 + 3) = v60 + 32;
    *((_QWORD *)v60 + 5) = 0;
    v60[48] = 30;
    v60[49] = 0;
    *((_WORD *)v60 + 25) = 0;
    *((_DWORD *)v60 + 13) = 1;
    *(_OWORD *)(v60 + 56) = 0u;
    v63 = v60 + 56;
    *(_OWORD *)(v60 + 72) = 0u;
    *((_DWORD *)v60 + 22) = 0;
    if (v37)
    {
      v158 = v37[5];
      v159 = v37 + 3;
      *((_QWORD *)v60 + 9) = v158;
      *(_WORD *)(v158 + 18) &= ~0x8000u;
      if ((v60[55] & 0x10) != 0
        && (v175 = *(_QWORD *)(v158 + 56)) != 0
        && (v176 = *(llvm::ValueSymbolTable **)(v175 + 104)) != 0)
      {
        llvm::ValueSymbolTable::reinsertValue(v176, v62);
        v177 = *(_QWORD *)v61;
        v178 = *v159;
        *((_QWORD *)v61 + 7) = *v159;
        *((_QWORD *)v61 + 8) = v159;
        *(_QWORD *)(v178 + 8) = v63;
        *v159 = (uint64_t)v63;
        if (v177)
        {
          **((_QWORD **)v61 + 2) = *((_QWORD *)v61 + 1);
          v179 = *((_QWORD *)v61 + 1);
          if (v179)
            *(_QWORD *)(v179 + 16) = *((_QWORD *)v61 + 2);
        }
      }
      else
      {
        v160 = *v159;
        *((_QWORD *)v61 + 7) = *v159;
        *((_QWORD *)v61 + 8) = v159;
        *(_QWORD *)(v160 + 8) = v63;
        *v159 = (uint64_t)v63;
      }
    }
    *(_QWORD *)v61 = v59;
    v66 = *(_QWORD *)(v59 + 8);
    v65 = (_QWORD *)(v59 + 8);
    v64 = v66;
    *((_QWORD *)v61 + 1) = v66;
    if (v66)
      *(_QWORD *)(v64 + 16) = v61 + 8;
    *((_QWORD *)v61 + 2) = v65;
    *v65 = v61;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v37[5] + 40, (uint64_t ***)v37);
    v67 = v37[3];
    v68 = (_QWORD *)v37[4];
    *v68 = v67;
    *(_QWORD *)(v67 + 8) = v68;
    v37[3] = 0;
    v37[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v37);
    llvm::DomTreeUpdater::applyUpdatesPermissive(v181[4], (uint64_t *)__p, (uint64_t)(v191 - (_QWORD)__p) >> 4);
    if (v182)
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v182 + 5) + 40, (uint64_t ***)v182);
      v69 = *((_QWORD *)v182 + 3);
      v70 = (_QWORD *)*((_QWORD *)v182 + 4);
      *v70 = v69;
      *(_QWORD *)(v69 + 8) = v70;
      *((_QWORD *)v182 + 3) = 0;
      *((_QWORD *)v182 + 4) = 0;
      llvm::Value::deleteValue(v182);
    }
    if (__p)
    {
      v191 = (unint64_t)__p;
      operator delete(__p);
    }
    return 1;
  }
  if ((_DWORD)v20)
  {
    if (*((_BYTE *)llvm::Value::stripPointerCasts(v21) + 16) != 4)
    {
      v32 = *((unsigned __int8 *)v21 + 16);
      goto LABEL_80;
    }
  }
  else if (v32 != 16)
  {
LABEL_80:
    if (v32 <= 0x1B)
      return v31 | llvm::JumpThreadingPass::processThreadableEdges((uint64_t)this, (llvm::ConstantInt ***)v21, a2, v20, (llvm::Instruction *)v15);
    v72 = v32 - 83;
    v73 = (_QWORD *)*v13;
    if (v72 >= 0xFFFFFFFE)
    {
      if (v73 == v13)
      {
        v124 = 0;
      }
      else
      {
        v124 = v73 - 3;
        if (!v73)
          v124 = 0;
        if (*((unsigned __int8 *)v124 + 16) - 29 >= 0xB)
          v124 = 0;
      }
      v127 = *((_BYTE *)v124 + 16) == 30 ? v124 : 0;
      v128 = *(unsigned __int8 *)(*((_QWORD *)v21 - 4) + 16) >= 0x15u ? 0 : (llvm::Constant *)*((_QWORD *)v21 - 4);
      if (v127 && v128)
      {
        PredicateAt = llvm::LazyValueInfo::getPredicateAt(this[2], *((_WORD *)v21 + 9) & 0x3F, *((llvm::Value **)v21 - 8), v128, (llvm::Instruction *)v127, 0);
        if (PredicateAt != -1)
        {
          v130 = PredicateAt;
          v131 = v127 - 4;
          if (PredicateAt == 1)
            v132 = -1;
          else
            v132 = 0;
          v133 = 4 * v132;
          v134 = v131[v133];
          if (PredicateAt == 1)
            v135 = 0;
          else
            v135 = -1;
          llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v131[v133], a2, 1);
          v136 = v131[4 * v135];
          v137 = (char *)operator new(0x60uLL);
          *((_DWORD *)v137 + 13) = *((_DWORD *)v137 + 13) & 0x38000000 | 1;
          *((_QWORD *)v137 + 1) = 0;
          *((_QWORD *)v137 + 2) = 0;
          *(_QWORD *)v137 = 0;
          *((_QWORD *)v137 + 4) = ***(_QWORD ***)v136 + 1576;
          *((_QWORD *)v137 + 3) = v137 + 32;
          *((_QWORD *)v137 + 5) = 0;
          v137[48] = 30;
          v137[49] = 0;
          *((_WORD *)v137 + 25) = 0;
          *((_DWORD *)v137 + 13) = 1;
          *(_OWORD *)(v137 + 56) = 0u;
          v138 = v137 + 56;
          *(_OWORD *)(v137 + 72) = 0u;
          *((_DWORD *)v137 + 22) = 0;
          v139 = v127[5];
          v140 = v127 + 3;
          *((_QWORD *)v137 + 9) = v139;
          *(_WORD *)(v139 + 18) &= ~0x8000u;
          if ((v137[55] & 0x10) != 0
            && (v170 = *(_QWORD *)(v139 + 56)) != 0
            && (v171 = *(llvm::ValueSymbolTable **)(v170 + 104)) != 0)
          {
            llvm::ValueSymbolTable::reinsertValue(v171, (llvm::Value *)(v137 + 32));
            v172 = *(_QWORD *)v137;
            v173 = *v140;
            *((_QWORD *)v137 + 7) = *v140;
            *((_QWORD *)v137 + 8) = v140;
            *(_QWORD *)(v173 + 8) = v138;
            *v140 = (uint64_t)v138;
            if (v172)
            {
              **((_QWORD **)v137 + 2) = *((_QWORD *)v137 + 1);
              v174 = *((_QWORD *)v137 + 1);
              if (v174)
                *(_QWORD *)(v174 + 16) = *((_QWORD *)v137 + 2);
            }
          }
          else
          {
            v141 = *v140;
            *((_QWORD *)v137 + 7) = *v140;
            *((_QWORD *)v137 + 8) = v140;
            *(_QWORD *)(v141 + 8) = v138;
            *v140 = (uint64_t)v138;
          }
          *(_QWORD *)v137 = v136;
          v144 = *(_QWORD *)(v136 + 8);
          v143 = (_QWORD *)(v136 + 8);
          v142 = v144;
          *((_QWORD *)v137 + 1) = v144;
          if (v144)
            *(_QWORD *)(v142 + 16) = v137 + 8;
          *((_QWORD *)v137 + 2) = v143;
          *v143 = v137;
          v145 = (unsigned __int8 *)v127[6];
          v184 = v145;
          if (v145)
            llvm::MetadataTracking::track((uint64_t)&v184, v145, 2);
          v148 = (unsigned __int8 *)*((_QWORD *)v137 + 10);
          v147 = (unsigned __int8 **)(v137 + 80);
          v146 = v148;
          v149 = this;
          if (v148)
            llvm::MetadataTracking::untrack((uint64_t)v147, v146);
          v150 = v184;
          *v147 = v184;
          if (v150)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v184, v150, (uint64_t)v147);
            v184 = 0;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v127[5] + 40, (uint64_t ***)v127);
          v151 = v127[3];
          v152 = (_QWORD *)v127[4];
          *v152 = v151;
          *(_QWORD *)(v151 + 8) = v152;
          *v140 = 0;
          v127[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v127);
          if (*((_QWORD *)v21 + 1))
          {
            if (*((llvm::BasicBlock **)v21 + 5) == a2)
            {
              v155 = *(uint64_t ***)v21;
              if (v130 == 1)
                True = llvm::ConstantInt::getTrue(v155, v153, v154);
              else
                True = llvm::ConstantInt::getFalse(v155, v153, v154);
              sub_1C5B3DCAC((uint64_t)v21, (llvm::Instruction *)True, v157);
              v149 = this;
            }
          }
          else
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v21 + 5) + 40, (uint64_t ***)v21);
            v161 = *((_QWORD *)v21 + 3);
            v162 = (_QWORD *)*((_QWORD *)v21 + 4);
            *v162 = v161;
            *(_QWORD *)(v161 + 8) = v162;
            *((_QWORD *)v21 + 3) = 0;
            *((_QWORD *)v21 + 4) = 0;
            llvm::Value::deleteValue(v21);
          }
          v169 = v149[4];
          __p = a2;
          v191 = v134 | 4;
          v11 = 1;
          llvm::DomTreeUpdater::applyUpdatesPermissive(v169, (uint64_t *)&__p, 1);
          if (*((_BYTE *)v149 + 56))
          {
            v39 = (uint64_t)v149[6];
            goto LABEL_79;
          }
          return v11;
        }
        if ((llvm::JumpThreadingPass::tryToUnfoldSelect(this, v21, a2) & 1) != 0)
          return 1;
        v73 = (_QWORD *)*v13;
      }
    }
    if (v73 != v13)
    {
      v74 = v73 ? (uint64_t)(v73 - 3) : 0;
      v75 = *(unsigned __int8 *)(v74 + 16) - 40;
      v76 = v75 >= 0xFFFFFFF5 ? (llvm::SwitchInst *)v74 : 0;
      if (v73
        && *((_BYTE *)v76 + 16) == 31
        && v75 >= 0xFFFFFFF5
        && (llvm::JumpThreadingPass::tryToUnfoldSelect((llvm::JumpThreadingPass *)this, v76, a2) & 1) != 0)
      {
        return 1;
      }
    }
    v77 = *((unsigned __int8 *)v21 + 16);
    v78 = v77;
    v79 = (unsigned __int8 *)v21;
    if (v77 == 95)
    {
      v79 = (unsigned __int8 *)*((_QWORD *)v21 - 4);
      v78 = v79[16];
    }
    if (v78 >= 0x1C && v78 - 83 >= 0xFFFFFFFE && *(unsigned __int8 *)(*((_QWORD *)v79 - 4) + 16) <= 0x14u)
    {
      v79 = (unsigned __int8 *)*((_QWORD *)v79 - 8);
      v78 = v79[16];
    }
    if (v78 == 60)
    {
      if ((llvm::JumpThreadingPass::simplifyPartiallyRedundantLoad((llvm::JumpThreadingPass *)this, (llvm::LoadInst *)v79) & 1) != 0)return 1;
      v77 = *((unsigned __int8 *)v21 + 16);
    }
    if (v77 == 83 && *((llvm::BasicBlock **)v21 + 5) == a2)
    {
      v80 = *v13 - 24;
      if (!*v13)
        v80 = 0;
      v81 = *(unsigned __int8 *)(v80 + 16);
      v82 = (v81 - 29) >= 0xB ? 0 : v80;
      if (*(_BYTE *)(v82 + 16) == 30)
      {
        v83 = v81 - 40;
        v84 = v83 >= 0xFFFFFFF5 ? (llvm::Instruction *)v80 : 0;
        if (v83 >= 0xFFFFFFF5 && *v13 && *((_BYTE *)v84 + 16) == 30)
        {
          v188 = 0;
          v189 = 0;
          if (llvm::Instruction::extractProfMetadata(v84, &v189, &v188))
          {
            if (v189 + v188)
            {
              v85 = *((_DWORD *)v21 + 5) & 0x7FFFFFF;
              if ((_DWORD)v85)
              {
                v86 = 0;
                v180 = *((_DWORD *)v21 + 5) & 0x7FFFFFF;
                do
                {
                  v87 = *((_DWORD *)v21 + 5);
                  if ((v87 & 0x40000000) != 0)
                    v88 = (char *)*((_QWORD *)v21 - 1);
                  else
                    v88 = (char *)v21 - 32 * (v87 & 0x7FFFFFF);
                  v89 = *(_QWORD *)&v88[32 * v86];
                  if (v89)
                    v90 = *(_BYTE *)(v89 + 16) == 16;
                  else
                    v90 = 0;
                  if (!v90 || *(_DWORD *)(*(_QWORD *)v89 + 8) != 269)
                    goto LABEL_221;
                  v183 = v86;
                  v91 = (llvm::APInt *)(v89 + 24);
                  v92 = *(_DWORD *)(v89 + 32);
                  if (v92 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase(v91) != v92 - 1)
                    {
LABEL_172:
                      v93 = v188;
                      v94 = v189 + v188;
                      v95 = (v189 + v188) >> 32;
                      if (v95)
                      {
                        LOBYTE(v95) = 0;
                        v96 = v189 + v188;
                        do
                        {
                          v94 = v96 >> 1;
                          LOBYTE(v95) = v95 + 1;
                          v97 = v96 >> 33;
                          v96 >>= 1;
                        }
                        while (v97);
                      }
                      goto LABEL_178;
                    }
                  }
                  else if (*(_QWORD *)v91 != 1)
                  {
                    goto LABEL_172;
                  }
                  v93 = v189;
                  v94 = v188 + v189;
                  v95 = (v188 + v189) >> 32;
                  if (v95)
                  {
                    LOBYTE(v95) = 0;
                    v122 = v188 + v189;
                    do
                    {
                      v94 = v122 >> 1;
                      LOBYTE(v95) = v95 + 1;
                      v123 = v122 >> 33;
                      v122 >>= 1;
                    }
                    while (v123);
                  }
LABEL_178:
                  v98 = v93 >> v95;
                  if (v94 != 0x80000000)
                    v98 = (((unint64_t)(v93 >> v95) << 31) | (v94 >> 1)) / v94;
                  if ((v87 & 0x40000000) != 0)
                    v99 = (char *)*((_QWORD *)v21 - 1);
                  else
                    v99 = (char *)v21 - 32 * (v87 & 0x7FFFFFF);
                  v100 = *(llvm::BasicBlock **)&v99[32 * *((unsigned int *)v21 + 15) + 8 * v183];
                  v101 = v194;
                  __p = v194;
                  v191 = (unint64_t)v194;
                  v192 = 16;
                  v193 = 0;
                  v102 = v194;
                  v103 = a2;
                  while (1)
                  {
                    v104 = (_QWORD *)*((_QWORD *)v100 + 5);
                    if (v104 != (_QWORD *)((char *)v100 + 40))
                    {
                      v105 = v104 - 3;
                      if (!v104)
                        v105 = 0;
                      v106 = *((unsigned __int8 *)v105 + 16) - 40;
                      if (v106 < 0xFFFFFFF5)
                        v105 = 0;
                      if (v104)
                      {
                        v107 = *((_BYTE *)v105 + 16) == 30 && v106 >= 0xFFFFFFF5;
                        if (v107 && (*((_DWORD *)v105 + 5) & 0x7FFFFFF) == 3)
                          break;
                      }
                    }
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&__p, (uint64_t)v100);
                    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v100);
                    if (!SinglePredecessor)
                    {
                      v103 = 0;
                      v100 = 0;
                      v102 = __p;
                      v101 = (_QWORD *)v191;
                      break;
                    }
                    v109 = (llvm::BasicBlock *)SinglePredecessor;
                    v110 = sub_1C477672C((uint64_t)&__p, SinglePredecessor);
                    v102 = __p;
                    v101 = (_QWORD *)v191;
                    v111 = (unint64_t *)((char *)&v192 + 4);
                    if ((void *)v191 != __p)
                      v111 = &v192;
                    v103 = v100;
                    v100 = v109;
                    if (v110 != (_QWORD *)(v191 + 8 * *(unsigned int *)v111))
                    {
                      v103 = 0;
                      v100 = 0;
                      break;
                    }
                  }
                  if (v101 != v102)
                    free(v101);
                  if (!v100)
                    break;
                  v112 = (_QWORD *)*((_QWORD *)v100 + 5);
                  if (v112 == (_QWORD *)((char *)v100 + 40))
                    break;
                  v113 = v112 ? (uint64_t)(v112 - 3) : 0;
                  v114 = *(unsigned __int8 *)(v113 + 16) - 40;
                  v115 = v114 >= 0xFFFFFFF5 ? v113 : 0;
                  if (!v112)
                    break;
                  if (*(_BYTE *)(v115 + 16) != 30 || v114 < 0xFFFFFFF5)
                    break;
                  v186 = 0;
                  v187 = 0;
                  if ((llvm::Instruction::extractProfMetadata((llvm::Instruction *)v115, &v187, &v186) & 1) == 0
                    && !(v98 >> 30))
                  {
                    __p = &v192;
                    v117 = *(llvm::BasicBlock **)(v115 - 32);
                    v118 = 0x80000000 - v98;
                    v119 = v117 == v103;
                    if (v117 == v103)
                      v120 = v98;
                    else
                      v120 = 0x80000000 - v98;
                    if (!v119)
                      v118 = v98;
                    v192 = __PAIR64__(v118, v120);
                    v191 = 0x200000002;
                    v185 = ***(uint64_t ****)(v115 + 40);
                    v121 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v185, (uint64_t)&v192, 2);
                    if (v121 || *(_QWORD *)(v115 + 48) || (*(_BYTE *)(v115 + 23) & 0x20) != 0)
                      llvm::Value::setMetadata((llvm::Value *)v115, 2, v121);
                    if (__p != &v192)
                      free(__p);
                  }
                  v85 = v180;
                  v86 = v183;
LABEL_221:
                  ++v86;
                }
                while (v86 != v85);
              }
            }
          }
          v13 = (_QWORD *)((char *)a2 + 40);
        }
      }
    }
    if ((llvm::JumpThreadingPass::processThreadableEdges((uint64_t)this, (llvm::ConstantInt ***)v21, a2, v20, (llvm::Instruction *)v15) & 1) != 0)return 1;
    v163 = *((unsigned __int8 *)v21 + 16);
    v164 = v163;
    v165 = v21;
    if (v163 == 95)
    {
      v165 = (llvm::Value *)*((_QWORD *)v21 - 4);
      v164 = *((unsigned __int8 *)v165 + 16);
    }
    if (v164 != 83 || *((llvm::BasicBlock **)v165 + 5) != a2)
      goto LABEL_304;
    if (*v13)
      v166 = *v13 - 24;
    else
      v166 = 0;
    if (*(unsigned __int8 *)(v166 + 16) - 29 >= 0xB)
      v166 = 0;
    if (*(_BYTE *)(v166 + 16) == 30)
      return llvm::JumpThreadingPass::processBranchOnPHI((llvm::JumpThreadingPass *)this, v165);
    if (v163 != 58 || *((llvm::BasicBlock **)v21 + 5) != a2)
      return llvm::JumpThreadingPass::processImpliedCondition((llvm::JumpThreadingPass *)this, a2);
LABEL_304:
    v168 = *v13 ? *v13 - 24 : 0;
    if (*(unsigned __int8 *)(v168 + 16) - 29 >= 0xB)
      v168 = 0;
    if (*(_BYTE *)(v168 + 16) == 30)
      return llvm::JumpThreadingPass::processBranchOnXOR((llvm::JumpThreadingPass *)this, v21);
    else
      return llvm::JumpThreadingPass::processImpliedCondition((llvm::JumpThreadingPass *)this, a2);
  }
  v11 = 1;
  llvm::ConstantFoldTerminator((uint64_t)a2, 1, 0, (uint64_t)this[4]);
  if (*((_BYTE *)this + 56))
  {
    v39 = (uint64_t)this[6];
LABEL_79:
    llvm::BranchProbabilityInfo::eraseBlock(v39, a2);
    return 1;
  }
  return v11;
}

void sub_1C5B3A8B8()
{
  JUMPOUT(0x1C5B39CC0);
}

void sub_1C5B3A8C8()
{
  JUMPOUT(0x1C5B39CC0);
}

void sub_1C5B3A8D0()
{
  JUMPOUT(0x1C5B39CC0);
}

void sub_1C5B3A8DC()
{
  JUMPOUT(0x1C5B39CC0);
}

void sub_1C5B3A8E4()
{
  JUMPOUT(0x1C5B39CC0);
}

void sub_1C5B3A8F0()
{
  JUMPOUT(0x1C5B3A48CLL);
}

void sub_1C5B3A900()
{
  JUMPOUT(0x1C5B3A48CLL);
}

void sub_1C5B3A90C()
{
  JUMPOUT(0x1C5B39CECLL);
}

void sub_1C5B3A914()
{
  JUMPOUT(0x1C5B3A48CLL);
}

BOOL sub_1C5B3A920(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  size_t v5;
  uint64_t *v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 160))
    return sub_1C6318F00(a1 + 144, a2) != 0;
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(uint64_t **)a1;
  v5 = 8 * v3 - 8;
  v6 = *(uint64_t **)a1;
  while (1)
  {
    v7 = *v6++;
    if (v7 == a2)
      break;
    v5 -= 8;
    v4 = v6;
    if (v5 == -8)
      return 0;
  }
  if (v5)
    memmove(v4, v4 + 1, v5);
  *(_DWORD *)(a1 + 8) = v3 - 1;
  return 1;
}

uint64_t **sub_1C5B3A9AC(uint64_t **result, unint64_t *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v3 = result;
  if (result[20])
  {
    v4 = result + 18;
    v5 = *a2;
    return (uint64_t **)sub_1C4EE51A0(v4, v5, v5);
  }
  v6 = *result;
  v7 = *((unsigned int *)result + 2);
  v8 = *a2;
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    v10 = *result;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return result;
LABEL_10:
    if (v7 > 0xF)
    {
      do
      {
        v11 = (*v3)[v7 - 1];
        sub_1C4EE51A0(v3 + 18, v11, v11);
        LODWORD(v7) = *((_DWORD *)v3 + 2) - 1;
        *((_DWORD *)v3 + 2) = v7;
      }
      while ((_DWORD)v7);
      v5 = *a2;
      v4 = v3 + 18;
      return (uint64_t **)sub_1C4EE51A0(v4, v5, v5);
    }
  }
  if (v7 >= *((_DWORD *)result + 3))
  {
    result = (uint64_t **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v7 + 1, 8);
    v6 = *v3;
    v7 = *((unsigned int *)v3 + 2);
  }
  v6[v7] = v8;
  ++*((_DWORD *)v3 + 2);
  return result;
}

BOOL llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(uint64_t a1, llvm::Value *a2, llvm::BasicBlock *a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::Instruction *a7)
{
  llvm::Value *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  BOOL v27;
  _BOOL8 v28;
  unsigned __int8 *ConstantOnEdge;
  uint64_t v30;
  int v31;
  llvm::Value *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  unsigned __int8 *v42;
  int v43;
  llvm::Value *v44;
  char *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  llvm::Value *v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ****v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ****v58;
  uint64_t ***v59;
  uint64_t v60;
  uint64_t ****v61;
  uint64_t v62;
  const char *v63;
  unint64_t PrimitiveSizeInBits;
  _BOOL4 v65;
  const llvm::APInt *v66;
  uint64_t v67;
  llvm::ValueHandleBase *v68;
  llvm::ConstantInt *v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  llvm::Value *v75;
  uint64_t ****v76;
  unint64_t v77;
  llvm::Constant *v78;
  llvm::Constant *v79;
  llvm::BasicBlock *v80;
  uint64_t v81;
  uint64_t *v82;
  llvm::Constant *v83;
  unsigned __int8 v84;
  llvm::ValueHandleBase *v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  _QWORD **v90;
  uint64_t v91;
  int v93;
  char *v94;
  llvm::Constant *v95;
  uint64_t v96;
  uint64_t *v97;
  llvm::Constant *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned __int8 *v102;
  _QWORD *v103;
  uint64_t *v104;
  llvm::BasicBlock *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::Instruction *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  unsigned __int8 *v122;
  char *v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  unsigned int v126;
  int v127;
  BOOL v129;
  int PredicateOnEdge;
  const llvm::APInt *v131;
  uint64_t v132;
  llvm::ConstantInt *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  llvm::Value *v138;
  _BOOL4 v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  BOOL v144;
  int v145;
  llvm::APInt *v146;
  unsigned int v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  llvm::APInt *v151;
  unsigned int v152;
  unsigned __int8 *Constant;
  llvm::Value *v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  unsigned int v160;
  BOOL v161;
  _QWORD *v163;
  llvm::Constant *v164;
  uint64_t v165;
  llvm::Constant ***v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  BOOL v170;
  llvm::Value **v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  BOOL v179;
  int v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t ***v185;
  uint64_t FCmp;
  unsigned int v187;
  int v188;
  llvm::ConstantInt *v190;
  llvm::Instruction *v191;
  uint64_t v192;
  void *v193;
  size_t v194;
  void *v195;
  llvm::Type *v196;
  const llvm::APInt *v197;
  llvm::Type *v198;
  const llvm::APInt *v199;
  _BOOL4 v200;
  unsigned int v201;
  BOOL v202;
  llvm::Value **True;
  llvm::Instruction *v205;
  unsigned __int8 *v206;
  uint64_t v207;
  llvm::ConstantInt **v208;
  llvm::ConstantInt *v209;
  llvm::Value *v210;
  llvm::Instruction *v211;
  unsigned int v212;
  uint64_t v213;
  llvm::BasicBlock *v214;
  llvm::Value *v215;
  void *__src;
  llvm::Constant *v217;
  uint64_t v218;
  unsigned int v219;
  _BYTE v220[32];
  void *v221;
  uint64_t p_src;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  llvm::BasicBlock *v227;
  __int128 v228;
  __int128 v229;
  __int16 v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v215 = a2;
  sub_1C4D95920(a6, &v215, (uint64_t)&v227);
  if (!BYTE8(v228))
    return 0;
  v13 = v215;
  if (!v215)
    goto LABEL_28;
  v14 = *((unsigned __int8 *)v215 + 16);
  if (v14 - 13 > 0xFFFFFFFD)
    goto LABEL_8;
  if ((_DWORD)a5 == 1)
  {
    v13 = llvm::Value::stripPointerCasts(v215);
    if (*((_BYTE *)v13 + 16) == 4)
      goto LABEL_8;
    v13 = v215;
    v14 = *((unsigned __int8 *)v215 + 16);
  }
  else if (v14 == 16)
  {
LABEL_8:
    while (1)
    {
      a3 = (llvm::BasicBlock *)*((_QWORD *)a3 + 1);
      if (!a3)
        goto LABEL_38;
      v15 = *((_QWORD *)a3 + 3);
      v16 = *(unsigned __int8 *)(v15 + 16);
      if (v15)
        v17 = v16 >= 0x1C;
      else
        v17 = 0;
      v18 = !v17 || v16 - 29 > 0xA;
      if (!v18)
      {
LABEL_16:
        v227 = *(llvm::BasicBlock **)(v15 + 40);
        sub_1C61B1608(a4, (uint64_t)v13, (uint64_t *)&v227);
        while (1)
        {
          a3 = (llvm::BasicBlock *)*((_QWORD *)a3 + 1);
          if (!a3)
            goto LABEL_38;
          v15 = *((_QWORD *)a3 + 3);
          v19 = *(unsigned __int8 *)(v15 + 16);
          if (v15)
            v20 = v19 >= 0x1C;
          else
            v20 = 0;
          if (v20 && v19 - 29 < 0xB)
            goto LABEL_16;
        }
      }
    }
  }
  if (v14 < 0x1C || *((llvm::BasicBlock **)v13 + 5) != a3)
  {
LABEL_28:
    v22 = *((_QWORD *)a3 + 1);
    if (v22)
    {
      while (1)
      {
        v23 = *(_QWORD *)(v22 + 24);
        v24 = *(unsigned __int8 *)(v23 + 16);
        v25 = v23 && v24 >= 0x1C;
        if (v25 && v24 - 29 < 0xB)
          break;
        v22 = *(_QWORD *)(v22 + 8);
        if (!v22)
          goto LABEL_38;
      }
LABEL_42:
      v227 = *(llvm::BasicBlock **)(v23 + 40);
      ConstantOnEdge = (unsigned __int8 *)llvm::LazyValueInfo::getConstantOnEdge(*(llvm::LazyValueInfo **)(a1 + 16), (llvm::ConstantInt ***)v13, v227, a3, a7);
      if (!ConstantOnEdge)
        goto LABEL_49;
      v30 = (uint64_t)ConstantOnEdge;
      v31 = ConstantOnEdge[16];
      if ((v31 - 13) <= 0xFFFFFFFD)
      {
        if ((_DWORD)a5 == 1)
        {
          v32 = llvm::Value::stripPointerCasts((llvm::Value *)ConstantOnEdge);
          if (*((_BYTE *)v32 + 16) != 4)
            goto LABEL_49;
          v30 = (uint64_t)v32;
        }
        else if (v31 != 16)
        {
          goto LABEL_49;
        }
      }
      sub_1C61B1608(a4, v30, (uint64_t *)&v227);
LABEL_49:
      while (1)
      {
        v22 = *(_QWORD *)(v22 + 8);
        if (!v22)
          break;
        v23 = *(_QWORD *)(v22 + 24);
        v33 = *(unsigned __int8 *)(v23 + 16);
        if (v23)
          v34 = v33 >= 0x1C;
        else
          v34 = 0;
        if (v34 && v33 - 29 <= 0xA)
        {
          v13 = v215;
          goto LABEL_42;
        }
      }
    }
    goto LABEL_38;
  }
  if (v14 == 83)
  {
    v36 = *((_DWORD *)v13 + 5) & 0x7FFFFFF;
    if ((_DWORD)v36)
    {
      v37 = 0;
      v38 = 0;
      v39 = 32 * v36;
      do
      {
        v40 = *((_DWORD *)v13 + 5);
        if ((v40 & 0x40000000) != 0)
          v41 = (char *)*((_QWORD *)v13 - 1);
        else
          v41 = (char *)v13 - 32 * (v40 & 0x7FFFFFF);
        v42 = *(unsigned __int8 **)&v41[v38];
        if (v42)
        {
          v43 = v42[16];
          if ((v43 - 13) > 0xFFFFFFFD)
            goto LABEL_81;
          if ((_DWORD)a5 == 1)
          {
            v44 = llvm::Value::stripPointerCasts((llvm::Value *)v42);
            v40 = *((_DWORD *)v13 + 5);
            if (*((_BYTE *)v44 + 16) == 4)
            {
              v42 = (unsigned __int8 *)v44;
LABEL_81:
              if ((v40 & 0x40000000) != 0)
                v52 = (char *)*((_QWORD *)v13 - 1);
              else
                v52 = (char *)v13 - 32 * (v40 & 0x7FFFFFF);
              v227 = *(llvm::BasicBlock **)&v52[32 * *((unsigned int *)v13 + 15) + v37];
              v53 = a4;
              v47 = (uint64_t)v42;
              goto LABEL_87;
            }
          }
          else if (v43 == 16)
          {
            goto LABEL_81;
          }
        }
        if ((v40 & 0x40000000) != 0)
          v45 = (char *)*((_QWORD *)v13 - 1);
        else
          v45 = (char *)v13 - 32 * (v40 & 0x7FFFFFF);
        v46 = (unsigned __int8 *)llvm::LazyValueInfo::getConstantOnEdge(*(llvm::LazyValueInfo **)(a1 + 16), (llvm::ConstantInt ***)v42, *(llvm::BasicBlock **)&v45[32 * *((unsigned int *)v13 + 15) + v37], a3, a7);
        if (!v46)
          goto LABEL_88;
        v47 = (uint64_t)v46;
        v48 = v46[16];
        if ((v48 - 13) > 0xFFFFFFFD)
          goto LABEL_79;
        if ((_DWORD)a5 == 1)
        {
          v49 = llvm::Value::stripPointerCasts((llvm::Value *)v46);
          if (*((_BYTE *)v49 + 16) == 4)
          {
            v47 = (uint64_t)v49;
LABEL_79:
            v50 = *((_DWORD *)v13 + 5);
            if ((v50 & 0x40000000) != 0)
              v51 = (char *)*((_QWORD *)v13 - 1);
            else
              v51 = (char *)v13 - 32 * (v50 & 0x7FFFFFF);
            v227 = *(llvm::BasicBlock **)&v51[32 * *((unsigned int *)v13 + 15) + v37];
            v53 = a4;
LABEL_87:
            sub_1C61B1608(v53, v47, (uint64_t *)&v227);
          }
        }
        else if (v48 == 16)
        {
          goto LABEL_79;
        }
LABEL_88:
        v38 += 32;
        v37 += 8;
      }
      while (v39 != v38);
    }
LABEL_38:
    v27 = *(_DWORD *)(a4 + 8) == 0;
    return !v27;
  }
  if (v14 - 79 >= 0xFFFFFFF3)
  {
    llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, *((_QWORD *)v13 - 4), a3, a4, a5, a6, a7);
    v60 = *(unsigned int *)(a4 + 8);
    if (!(_DWORD)v60)
      return 0;
    v61 = *(uint64_t *****)a4;
    v62 = 16 * v60;
    v28 = 1;
    do
    {
      *v61 = (uint64_t ***)llvm::ConstantExpr::getCast(*((unsigned __int8 *)v13 + 16) - 28);
      v61 += 2;
      v62 -= 16;
    }
    while (v62);
    return v28;
  }
  if (v14 == 95)
  {
    llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, *((_QWORD *)v13 - 4), a3, a4, a5, a6, a7);
    v54 = *(unsigned int *)(a4 + 8);
    if (!(_DWORD)v54)
    {
      v28 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      return v28;
    }
    v55 = *(uint64_t *****)a4;
    v56 = *(_QWORD *)a4 + 16 * v54;
    v57 = 16 * v54 - 16;
    v58 = *(uint64_t *****)a4;
    while (1)
    {
      v59 = *v58;
      v58 += 2;
      if ((sub_1C4F8BE80(v59, 0, 0, 0, 0, 0) & 1) == 0)
        break;
      v57 -= 16;
      v55 = v58;
      if (v57 == -16)
      {
        v55 = (uint64_t ****)v56;
        goto LABEL_131;
      }
    }
    if (v57)
    {
      v76 = v55 + 2;
      do
      {
        if (sub_1C4F8BE80(*v76, 0, 0, 0, 0, 0))
        {
          *v55 = *v76;
          v55[1] = v76[1];
          v55 += 2;
        }
        v76 += 2;
        v57 -= 16;
      }
      while (v57);
    }
LABEL_131:
    v77 = ((unint64_t)v55 - *(_QWORD *)a4) >> 4;
    *(_DWORD *)(a4 + 8) = v77;
    v27 = (_DWORD)v77 == 0;
    return !v27;
  }
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v13);
  if ((_DWORD)v63 == 1)
  if (PrimitiveSizeInBits != 1)
  {
    v72 = *((unsigned __int8 *)v13 + 16);
    if ((v72 - 59) < 0xFFFFFFEE)
    {
      if ((v72 - 83) < 0xFFFFFFFE)
        goto LABEL_118;
      if ((_DWORD)a5)
        return 0;
      goto LABEL_185;
    }
    if ((_DWORD)a5)
      return 0;
    v78 = (llvm::Constant *)*((_QWORD *)v13 - 4);
    if (!v78 || *((_BYTE *)v78 + 16) != 16)
      goto LABEL_38;
    v227 = (llvm::BasicBlock *)((char *)&v228 + 8);
    *(_QWORD *)&v228 = 0x800000000;
    llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, *((_QWORD *)v13 - 8), a3, &v227, 0, a6, a7);
    v80 = v227;
    if (!(_DWORD)v228)
    {
LABEL_163:
      if (v80 != (llvm::BasicBlock *)((char *)&v228 + 8))
        free(v80);
      goto LABEL_38;
    }
    v81 = 16 * v228;
    v82 = (uint64_t *)((char *)v227 + 8);
    while (1)
    {
      v83 = (llvm::Constant *)*(v82 - 1);
      v84 = *((_BYTE *)v13 + 16) - 28;
      v85 = llvm::ConstantFoldBinaryInstruction((llvm *)(*((unsigned __int8 *)v13 + 16) - 28), v83, v78, v79);
      if (v85)
        break;
      v90 = *(_QWORD ***)v83;
      if (*(_QWORD *)v83)
      {
        __src = v83;
        v217 = v78;
        v91 = **v90 + 1512;
        LODWORD(v221) = v84;
        p_src = (uint64_t)&__src;
        v223 = 2;
        v224 = 0u;
        v225 = 0u;
        v226 = 0;
        v86 = sub_1C537D4FC(v91, (uint64_t)v90, (unsigned __int8 *)&v221);
        if (v86)
          goto LABEL_139;
      }
LABEL_144:
      v82 += 2;
      v81 -= 16;
      if (!v81)
      {
        v80 = v227;
        goto LABEL_163;
      }
    }
    v86 = (uint64_t)v85;
LABEL_139:
    v87 = *(unsigned __int8 *)(v86 + 16);
    v18 = v87 > 0x10;
    v88 = (1 << v87) & 0x11800;
    if (!v18 && v88 != 0)
      sub_1C61B1608(a4, v86, v82);
    goto LABEL_144;
  }
  if ((_DWORD)a5)
    return 0;
  v213 = 0;
  v214 = 0;
  v227 = (llvm::BasicBlock *)&v214;
  *(_QWORD *)&v228 = &v213;
  if ((sub_1C4FA4278((_QWORD **)&v227, (uint64_t *)v13) & 1) != 0
    || (v221 = &v214, p_src = (uint64_t)&v213, (sub_1C4FA438C((_QWORD **)&v221, (uint64_t *)v13) & 1) != 0))
  {
    v227 = (llvm::BasicBlock *)((char *)&v228 + 8);
    *(_QWORD *)&v228 = 0x800000000;
    v221 = &v223;
    p_src = 0x800000000;
    llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, v214, a3, &v227, 0, a6, a7);
    llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, v213, a3, &v221, 0, a6, a7);
    v28 = 0;
    if (v228 | p_src)
    {
      v65 = sub_1C57BE7B8((uint64_t)&__src, (unsigned __int8 *)v13);
      v67 = ***(_QWORD ***)v13;
      if (v65)
      {
        v68 = *(llvm::ValueHandleBase **)(v67 + 1560);
        if (!v68)
        {
          v69 = *(llvm::ConstantInt **)(v67 + 1888);
          v70 = *(_DWORD *)(v67 + 1896);
          LODWORD(v217) = v70 >> 8;
          if (v70 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
          }
          else
          {
            if (v70 <= 0xFF)
              LOBYTE(v71) = 0;
            else
              v71 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v70);
            __src = (void *)(v71 & 1);
          }
          v68 = llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&__src, v66);
          if (v217 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          *(_QWORD *)(v67 + 1560) = v68;
        }
      }
      else
      {
        v68 = *(llvm::ValueHandleBase **)(v67 + 1568);
        if (!v68)
        {
          v190 = *(llvm::ConstantInt **)(v67 + 1888);
          LODWORD(v217) = *(_DWORD *)(v67 + 1896) >> 8;
          if (v217 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          else
            __src = 0;
          v68 = llvm::ConstantInt::get(v190, (llvm::LLVMContext *)&__src, v66);
          if (v217 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          *(_QWORD *)(v67 + 1568) = v68;
        }
      }
      v95 = (llvm::Constant *)v220;
      __src = v220;
      v217 = (llvm::Constant *)v220;
      v218 = 4;
      v219 = 0;
      if ((_DWORD)v228)
      {
        v96 = 16 * v228;
        v97 = (uint64_t *)((char *)v227 + 8);
        v98 = (llvm::Constant *)v220;
        do
        {
          v99 = (unsigned __int8 *)*(v97 - 1);
          if (v99 == (unsigned __int8 *)v68 || v99[16] - 11 <= 1)
          {
            sub_1C61B1608(a4, (uint64_t)v68, v97);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&__src, *v97);
            v95 = (llvm::Constant *)__src;
            v98 = v217;
          }
          v97 += 2;
          v96 -= 16;
        }
        while (v96);
      }
      else
      {
        v98 = (llvm::Constant *)v220;
      }
      if ((_DWORD)p_src)
      {
        v100 = 16 * p_src;
        v101 = (uint64_t *)((char *)v221 + 8);
        do
        {
          v102 = (unsigned __int8 *)*(v101 - 1);
          if (v102 == (unsigned __int8 *)v68 || v102[16] - 11 <= 1)
          {
            v103 = sub_1C477672C((uint64_t)&__src, *v101);
            v104 = v217 == __src ? (uint64_t *)((char *)&v218 + 4) : &v218;
            if (v103 == (_QWORD *)((char *)v217 + 8 * *(unsigned int *)v104))
              sub_1C61B1608(a4, (uint64_t)v68, v101);
          }
          v101 += 2;
          v100 -= 16;
        }
        while (v100);
        v95 = (llvm::Constant *)__src;
        v98 = v217;
      }
      v28 = *(_DWORD *)(a4 + 8) != 0;
      if (v98 != v95)
        free(v98);
    }
    if (v221 != &v223)
      free(v221);
    v105 = v227;
    goto LABEL_182;
  }
  v72 = *((unsigned __int8 *)v13 + 16);
  if (v72 == 58)
  {
    v93 = *((_DWORD *)v13 + 5);
    if ((v93 & 0x40000000) != 0)
      v94 = (char *)*((_QWORD *)v13 - 1);
    else
      v94 = (char *)v13 - 32 * (v93 & 0x7FFFFFF);
    v150 = *((_QWORD *)v94 + 4);
    if (*(_BYTE *)(v150 + 16) == 16)
    {
      v151 = (llvm::APInt *)(v150 + 24);
      v152 = *(_DWORD *)(v150 + 32);
      if (v152 <= 0x40)
      {
        if (*(_QWORD *)v151 != 1)
          goto LABEL_285;
LABEL_310:
        if ((v93 & 0x40000000) != 0)
          v163 = (_QWORD *)*((_QWORD *)v13 - 1);
        else
          v163 = (_QWORD *)((char *)v13 - 32 * (v93 & 0x7FFFFFF));
        llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, *v163, a3, a4, 0, a6, a7);
        v165 = *(unsigned int *)(a4 + 8);
        if ((_DWORD)v165)
        {
          v166 = *(llvm::Constant ****)a4;
          v167 = 16 * v165;
          v28 = 1;
          do
          {
            *v166 = (llvm::Constant **)llvm::ConstantExpr::getNot(*v166, v164);
            v166 += 2;
            v167 -= 16;
          }
          while (v167);
          return v28;
        }
        return 0;
      }
      if (llvm::APInt::countLeadingZerosSlowCase(v151) == v152 - 1)
        goto LABEL_310;
    }
LABEL_285:
    Constant = (unsigned __int8 *)llvm::LazyValueInfo::getConstant(*(llvm::LazyValueInfo **)(a1 + 16), v215, a7);
    if (Constant)
    {
      v154 = (llvm::Value *)Constant;
      v155 = Constant[16];
      if ((v155 - 13) > 0xFFFFFFFD)
        goto LABEL_291;
      if ((_DWORD)a5 == 1)
      {
        v154 = llvm::Value::stripPointerCasts((llvm::Value *)Constant);
        if (*((_BYTE *)v154 + 16) == 4)
          goto LABEL_291;
      }
      else if (v155 == 16)
      {
LABEL_291:
        while (1)
        {
          a3 = (llvm::BasicBlock *)*((_QWORD *)a3 + 1);
          if (!a3)
            break;
          v156 = *((_QWORD *)a3 + 3);
          v157 = *(unsigned __int8 *)(v156 + 16);
          if (v156)
            v158 = v157 >= 0x1C;
          else
            v158 = 0;
          if (v158 && v157 - 29 <= 0xA)
          {
LABEL_299:
            v227 = *(llvm::BasicBlock **)(v156 + 40);
            sub_1C61B1608(a4, (uint64_t)v154, (uint64_t *)&v227);
            while (1)
            {
              a3 = (llvm::BasicBlock *)*((_QWORD *)a3 + 1);
              if (!a3)
                goto LABEL_38;
              v156 = *((_QWORD *)a3 + 3);
              v160 = *(unsigned __int8 *)(v156 + 16);
              if (v156)
                v161 = v160 >= 0x1C;
              else
                v161 = 0;
              if (v161 && v160 - 29 < 0xB)
                goto LABEL_299;
            }
          }
        }
      }
    }
    goto LABEL_38;
  }
  if ((v72 - 83) < 0xFFFFFFFE)
    goto LABEL_118;
LABEL_185:
  v106 = *((_QWORD *)v13 - 8);
  v206 = (unsigned __int8 *)*((_QWORD *)v13 - 4);
  v212 = *((_WORD *)v13 + 9) & 0x3F;
  v107 = *(unsigned __int8 *)(v106 + 16);
  v210 = (llvm::Value *)v106;
  if (v106 && v107 == 83 || (v106 = *((_QWORD *)v13 - 4), v108 = v206[16], v108 == 83))
  {
    if (*(llvm::BasicBlock **)(v106 + 40) != a3)
    {
      v108 = v206[16];
      goto LABEL_190;
    }
    v114 = *(_DWORD *)(v106 + 20) & 0x7FFFFFF;
    if (!(_DWORD)v114)
      goto LABEL_38;
    v115 = 0;
    v116 = 0;
    v209 = (llvm::ConstantInt *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 40) + 272);
    if (a7)
      v117 = a7;
    else
      v117 = v13;
    v205 = v117;
    v207 = 8 * v114;
    while (1)
    {
      v118 = *(_DWORD *)(v106 + 20);
      if ((v118 & 0x40000000) != 0)
      {
        v123 = *(char **)(v106 - 8);
        v121 = *(void **)&v123[32 * *(unsigned int *)(v106 + 60) + v116];
        v221 = v121;
        if ((llvm::Value *)v106 != v210)
        {
          v122 = (unsigned __int8 *)llvm::Value::DoPHITranslation((uint64_t)v210, a3, (const llvm::BasicBlock *)v121);
          v120 = *(_QWORD *)(v106 - 8);
          goto LABEL_215;
        }
      }
      else
      {
        v119 = v118 & 0x7FFFFFF;
        v120 = v106 - 32 * v119;
        v121 = *(void **)(v120 + 32 * *(unsigned int *)(v106 + 60) + v116);
        v221 = v121;
        if ((llvm::Value *)v106 != v210)
        {
          v122 = (unsigned __int8 *)llvm::Value::DoPHITranslation((uint64_t)v210, a3, (const llvm::BasicBlock *)v121);
LABEL_215:
          v124 = *(unsigned __int8 **)(v120 + v115);
          goto LABEL_218;
        }
        v123 = (char *)v210 - 32 * v119;
      }
      v122 = *(unsigned __int8 **)&v123[v115];
      v124 = (unsigned __int8 *)llvm::Value::DoPHITranslation((uint64_t)v206, a3, (const llvm::BasicBlock *)v121);
LABEL_218:
      v227 = v209;
      v228 = 0u;
      v229 = 0u;
      v230 = 257;
      v125 = (unsigned __int8 *)sub_1C4E6D894(v212, v122, v124, (uint64_t)&v227, 3);
      if (v125)
        goto LABEL_219;
      if (v124[16] <= 0x14u)
      {
        v129 = v122 && v122[16] >= 0x1Cu;
        if (!v129 || *((llvm::BasicBlock **)v122 + 5) != a3)
        {
          PredicateOnEdge = llvm::LazyValueInfo::getPredicateOnEdge(*(llvm::LazyValueInfo **)(a1 + 16), v212, (llvm::Value *)v122, (llvm::Constant *)v124, (llvm::BasicBlock *)v121, a3, v205);
          if (PredicateOnEdge != -1)
          {
            v132 = ***(_QWORD ***)v122;
            v133 = *(llvm::ConstantInt **)(v132 + 1888);
            v134 = *(unsigned int *)(v132 + 1896);
            LODWORD(v228) = v134 >> 8;
            if (v134 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v227, PredicateOnEdge, 0);
            }
            else
            {
              if (v134 <= 0xFF)
                v135 = 0;
              else
                v135 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v134);
              v227 = (llvm::BasicBlock *)(v135 & PredicateOnEdge);
            }
            v125 = (unsigned __int8 *)llvm::ConstantInt::get(v133, (llvm::LLVMContext *)&v227, v131);
            if (v228 >= 0x41 && v227)
              MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
            if (v125)
            {
LABEL_219:
              v126 = v125[16];
              v18 = v126 > 0x10;
              v127 = (1 << v126) & 0x11800;
              if (!v18 && v127 != 0)
                sub_1C61B1608(a4, (uint64_t)v125, (uint64_t *)&v221);
            }
          }
        }
      }
      v116 += 8;
      v115 += 32;
      if (v207 == v116)
        goto LABEL_38;
    }
  }
LABEL_190:
  if (v108 <= 0x14)
  {
    v208 = *(llvm::ConstantInt ***)v13;
    if ((*(_DWORD *)(*(_QWORD *)v13 + 8) & 0xFE) != 0x12)
    {
      if (v107 < 0x1C || *((llvm::BasicBlock **)v210 + 5) != a3)
      {
        v109 = *((_QWORD *)a3 + 1);
        if (v109)
        {
          while (1)
          {
            v110 = *(_QWORD *)(v109 + 24);
            v111 = *(unsigned __int8 *)(v110 + 16);
            v112 = v110 && v111 >= 0x1C;
            if (v112 && v111 - 29 < 0xB)
              break;
            v109 = *(_QWORD *)(v109 + 8);
            if (!v109)
              goto LABEL_38;
          }
          if (a7)
            v13 = a7;
LABEL_319:
          v227 = *(llvm::BasicBlock **)(v110 + 40);
          v168 = llvm::LazyValueInfo::getPredicateOnEdge(*(llvm::LazyValueInfo **)(a1 + 16), v212, v210, (llvm::Constant *)v206, v227, a3, v13);
          if (v168 != -1)
          {
            v172 = llvm::ConstantInt::get((llvm::ConstantInt *)v208, v168, 0);
            sub_1C61B1608(a4, (uint64_t)v172, (uint64_t *)&v227);
          }
          while (1)
          {
            v109 = *(_QWORD *)(v109 + 8);
            if (!v109)
              break;
            v110 = *(_QWORD *)(v109 + 24);
            v169 = *(unsigned __int8 *)(v110 + 16);
            if (v110)
              v170 = v169 >= 0x1C;
            else
              v170 = 0;
            if (v170 && v169 - 29 < 0xB)
              goto LABEL_319;
          }
        }
        goto LABEL_38;
      }
      if (v107 != 41
        || v108 != 16
        || (v173 = *((_QWORD *)v210 - 8)) == 0
        || (v174 = *((_QWORD *)v210 - 4)) == 0
        || (v175 = *((_QWORD *)v210 - 4), *(_BYTE *)(v174 + 16) != 16)
        || *(unsigned __int8 *)(v173 + 16) >= 0x1Cu && *(llvm::BasicBlock **)(v173 + 40) == a3)
      {
        v227 = (llvm::BasicBlock *)((char *)&v228 + 8);
        *(_QWORD *)&v228 = 0x800000000;
        v181 = *((_DWORD *)v13 + 5);
        if ((v181 & 0x40000000) != 0)
          v182 = (_QWORD *)*((_QWORD *)v13 - 1);
        else
          v182 = (_QWORD *)((char *)v13 - 32 * (v181 & 0x7FFFFFF));
        llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, *v182, a3, &v227, 0, a6, a7);
        v105 = v227;
        if ((_DWORD)v228)
        {
          v183 = 16 * v228;
          v184 = (uint64_t *)((char *)v227 + 8);
          do
          {
            v185 = (uint64_t ***)*(v184 - 1);
            if (v212 <= 0xF)
              FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)v212, v185, (llvm::Constant *)v206, 0);
            else
              FCmp = (uint64_t)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v212, (unsigned __int8 *)v185, (llvm::Constant *)v206, 0);
            if (FCmp)
            {
              v187 = *(unsigned __int8 *)(FCmp + 16);
              v18 = v187 > 0x10;
              v188 = (1 << v187) & 0x11800;
              if (!v18 && v188 != 0)
                sub_1C61B1608(a4, FCmp, v184);
            }
            v184 += 2;
            v183 -= 16;
          }
          while (v183);
          v105 = v227;
        }
        v28 = *(_DWORD *)(a4 + 8) != 0;
LABEL_182:
        if (v105 == (llvm::BasicBlock *)((char *)&v228 + 8))
          return v28;
LABEL_183:
        free(v105);
        return v28;
      }
      v176 = *((_QWORD *)a3 + 1);
      if (!v176)
        goto LABEL_38;
      while (1)
      {
        v177 = *(_QWORD *)(v176 + 24);
        v178 = *(unsigned __int8 *)(v177 + 16);
        v179 = v177 && v178 >= 0x1C;
        if (v179 && v178 - 29 < 0xB)
          break;
        v176 = *(_QWORD *)(v176 + 8);
        if (!v176)
          goto LABEL_38;
      }
      v191 = v210;
      if (a7)
        v191 = a7;
      v211 = v191;
LABEL_372:
      v214 = *(llvm::BasicBlock **)(v177 + 40);
      llvm::LazyValueInfo::getConstantRangeOnEdge(*(llvm::LazyValueInfo **)(a1 + 16), (llvm::Value *)v173, v214, a3, v211, (uint64_t)&v227);
      v192 = *(unsigned int *)(v175 + 32);
      if (v192 > 0x40)
      {
        v194 = ((unint64_t)(v192 + 63) >> 3) & 0x3FFFFFF8;
        v195 = (void *)operator new[]();
        memcpy(v195, *(const void **)(v175 + 24), v194);
        LODWORD(v217) = v192;
        __src = v195;
        LODWORD(p_src) = v192;
        v193 = (void *)operator new[]();
        memcpy(v193, __src, v194);
      }
      else
      {
        v193 = *(void **)(v175 + 24);
        LODWORD(v217) = *(_DWORD *)(v175 + 32);
        __src = v193;
        LODWORD(p_src) = v192;
      }
      v221 = v193;
      llvm::APInt::operator+=((uint64_t)&v221, 1uLL);
      v219 = p_src;
      v218 = (uint64_t)v221;
      llvm::ConstantRange::add((llvm::ConstantRange *)&v227, (const llvm::ConstantRange *)&__src, (uint64_t)&v221);
      if (v228 >= 0x41 && v227)
        MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
      v227 = (llvm::BasicBlock *)v221;
      LODWORD(v228) = p_src;
      LODWORD(p_src) = 0;
      if (v229 >= 0x41 && *((_QWORD *)&v228 + 1))
      {
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v228 + 1), 0x1000C8000313F17);
        *((_QWORD *)&v228 + 1) = v223;
        LODWORD(v229) = v224;
        LODWORD(v224) = 0;
        if (p_src >= 0x41 && v221)
          MEMORY[0x1CAA32F9C](v221, 0x1000C8000313F17);
      }
      else
      {
        *((_QWORD *)&v228 + 1) = v223;
        LODWORD(v229) = v224;
        LODWORD(v224) = 0;
      }
      if (v219 >= 0x41 && v218)
        MEMORY[0x1CAA32F9C](v218, 0x1000C8000313F17);
      if (v217 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      llvm::ConstantRange::makeExactICmpRegion(&v221, v212, v206 + 24);
      if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v221, (const llvm::ConstantRange *)&v227))
      {
        True = llvm::ConstantInt::getTrue((uint64_t **)v208, v196, v197);
      }
      else
      {
        llvm::ConstantRange::inverse((llvm::ConstantRange *)&v221, (uint64_t)&__src);
        v200 = llvm::ConstantRange::contains((llvm::ConstantRange *)&__src, (const llvm::ConstantRange *)&v227);
        if (v219 >= 0x41 && v218)
          MEMORY[0x1CAA32F9C](v218, 0x1000C8000313F17);
        if (v217 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (!v200)
        {
LABEL_384:
          if (v224 >= 0x41 && v223)
            MEMORY[0x1CAA32F9C](v223, 0x1000C8000313F17);
          if (p_src >= 0x41 && v221)
            MEMORY[0x1CAA32F9C](v221, 0x1000C8000313F17);
          if (v229 >= 0x41 && *((_QWORD *)&v228 + 1))
            MEMORY[0x1CAA32F9C](*((_QWORD *)&v228 + 1), 0x1000C8000313F17);
          if (v228 >= 0x41 && v227)
            MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
          while (1)
          {
            v176 = *(_QWORD *)(v176 + 8);
            if (!v176)
              goto LABEL_38;
            v177 = *(_QWORD *)(v176 + 24);
            v201 = *(unsigned __int8 *)(v177 + 16);
            if (v177)
              v202 = v201 >= 0x1C;
            else
              v202 = 0;
            if (v202 && v201 - 29 < 0xB)
              goto LABEL_372;
          }
        }
        True = llvm::ConstantInt::getFalse((uint64_t **)v208, v198, v199);
      }
      sub_1C61B1608(a4, (uint64_t)True, (uint64_t *)&v214);
      goto LABEL_384;
    }
  }
LABEL_118:
  if (v72 != 85)
    goto LABEL_285;
  v73 = *((_QWORD *)v13 - 8);
  if (v73)
  {
    v74 = *(unsigned __int8 *)(v73 + 16);
    if ((v74 - 13) <= 0xFFFFFFFD)
    {
      if ((_DWORD)a5 == 1)
      {
        v75 = llvm::Value::stripPointerCasts(*((llvm::Value **)v13 - 8));
        if (*((_BYTE *)v75 + 16) == 4)
          v73 = (uint64_t)v75;
        else
          v73 = 0;
      }
      else if (v74 != 16)
      {
        v73 = 0;
      }
    }
  }
  v136 = *((_QWORD *)v13 - 4);
  if (!v136)
  {
LABEL_255:
    v227 = (llvm::BasicBlock *)((char *)&v228 + 8);
    *(_QWORD *)&v228 = 0x800000000;
    v139 = v73 != 0;
    if (!(v73 | v136))
      goto LABEL_285;
    goto LABEL_256;
  }
  v137 = *(unsigned __int8 *)(v136 + 16);
  if ((v137 - 13) < 0xFFFFFFFE)
  {
    if ((_DWORD)a5 == 1)
    {
      v138 = llvm::Value::stripPointerCasts(*((llvm::Value **)v13 - 4));
      if (*((_BYTE *)v138 + 16) == 4)
        v136 = (uint64_t)v138;
      else
        v136 = 0;
    }
    else if (v137 != 16)
    {
      v136 = 0;
    }
    goto LABEL_255;
  }
  v227 = (llvm::BasicBlock *)((char *)&v228 + 8);
  *(_QWORD *)&v228 = 0x800000000;
  v139 = v73 != 0;
LABEL_256:
  v140 = llvm::JumpThreadingPass::computeValueKnownInPredecessorsImpl(a1, *((_QWORD *)v13 - 12), a3, &v227, 0, a6, a7);
  v105 = v227;
  if (!v140)
  {
    if (v227 != (llvm::BasicBlock *)((char *)&v228 + 8))
      free(v227);
    goto LABEL_285;
  }
  if ((_DWORD)v228)
  {
    v141 = 16 * v228;
    v142 = (uint64_t *)((char *)v227 + 8);
    do
    {
      v143 = *(v142 - 1);
      if (v143)
        v144 = *(_BYTE *)(v143 + 16) == 16;
      else
        v144 = 0;
      v145 = v139;
      if (v144)
      {
        v146 = (llvm::APInt *)(v143 + 24);
        v147 = *(_DWORD *)(v143 + 32);
        if (v147 > 0x40)
          v148 = llvm::APInt::countLeadingZerosSlowCase(v146) == v147 - 1;
        else
          v148 = *(_QWORD *)v146 == 1;
        v145 = v148;
      }
      if (v145)
        v149 = v73;
      else
        v149 = v136;
      if (v149)
        sub_1C61B1608(a4, v149, v142);
      v142 += 2;
      v141 -= 16;
    }
    while (v141);
    v105 = v227;
  }
  v28 = *(_DWORD *)(a4 + 8) != 0;
  if (v105 != (llvm::BasicBlock *)((char *)&v228 + 8))
    goto LABEL_183;
  return v28;
}

uint64_t llvm::JumpThreadingPass::maybeMergeBasicBlockIntoOnlyPred(llvm::JumpThreadingPass *this, llvm::BasicBlock *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = llvm::BasicBlock::getSinglePredecessor(a2);
  if (result)
  {
    v3 = result;
    result = 0;
    v4 = *(_QWORD *)(v3 + 40);
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    if ((v6 - 33) >= 6)
      __asm { BR              X11 }
  }
  return result;
}

void sub_1C5B3C0E0(llvm::BasicBlock *a1@<X2>, uint64_t a2@<X8>, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  int v7;
  llvm::DomTreeUpdater *v8;
  const llvm::BasicBlock *v9;
  llvm::BlockAddress *v10;

  if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
    v7 = 2;
  else
    v7 = 1;
  if (v6 != (llvm::BasicBlock *)v4 && v7 == 1)
  {
    if ((*(_WORD *)(v4 + 18) & 0x7FFF) == 0
      || (v10 = llvm::BlockAddress::get(*(llvm::BlockAddress **)(v4 + 56), (llvm::Function *)v4, a1),
          llvm::Constant::removeDeadConstantUsers((uint64_t)v10),
          !*((_QWORD *)v10 + 1)))
    {
      if (sub_1C5B3A920(v5 + 64, (unint64_t)v6))
      {
        a4 = v4;
        sub_1C5B3A9AC((uint64_t **)(v5 + 64), &a4);
      }
      llvm::LazyValueInfo::eraseBlock(*(llvm::LazyValueInfo **)(v5 + 16), v6);
      llvm::MergeBasicBlockIntoOnlyPred(v4, *(llvm::BasicBlock **)(v5 + 32), v8);
      if ((llvm::isGuaranteedToTransferExecutionToSuccessor((llvm *)v4, v9) & 1) == 0)
        llvm::LazyValueInfo::eraseBlock(*(llvm::LazyValueInfo **)(v5 + 16), (llvm::BasicBlock *)v4);
    }
  }
  JUMPOUT(0x1C5B3C0B0);
}

void sub_1C5B3C1A0()
{
  JUMPOUT(0x1C5B3C0F4);
}

void sub_1C5B3C1B4()
{
  JUMPOUT(0x1C5B3C0F4);
}

uint64_t llvm::JumpThreadingPass::tryToUnfoldSelectInCurrBB(llvm::JumpThreadingPass *this, llvm::BasicBlock *a2)
{
  uint64_t v4;
  _QWORD *i;
  unint64_t v6;
  uint64_t v7;
  llvm::BasicBlock **v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  BOOL v27;
  int v28;
  uint64_t ***v29;
  uint64_t DomTree;
  _DWORD *v31;
  uint64_t ***v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  llvm::Value *v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  unsigned int j;
  uint64_t Successor;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  llvm::ValueSymbolTable *v105;
  llvm::JumpThreadingPass *v106;
  uint64_t v107;
  void *__p;
  char *v109;
  char *v110;
  __int16 v111;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 112);
  if (v4 && (*(_BYTE *)(v4 + 18) & 0x20) != 0)
    return 0;
  if (*((_QWORD *)this + 28))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 27); i; i = (_QWORD *)*i)
    {
      v6 = i[4];
      if (v6 <= (unint64_t)a2)
      {
        if (v6 >= (unint64_t)a2)
          return 0;
        ++i;
      }
    }
    goto LABEL_17;
  }
  v7 = *((unsigned int *)this + 18);
  if ((_DWORD)v7)
  {
    v8 = (llvm::BasicBlock **)*((_QWORD *)this + 8);
    v9 = 8 * v7;
    while (*v8 != a2)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    if (v9)
      return 0;
  }
LABEL_17:
  result = 0;
  v11 = *((_QWORD *)a2 + 6);
  v12 = v11 - 24;
  if (v11)
    v13 = v11 - 24;
  else
    v13 = 0;
  if (!v11 || *(_BYTE *)(v13 + 16) != 83)
    return result;
  while (1)
  {
    v14 = *(_DWORD *)(v12 + 20);
    if ((v14 & 0x40000000) != 0)
      break;
    v15 = v14 & 0x7FFFFFF;
    v16 = v12 - 32 * v15;
    if (v15)
      goto LABEL_26;
LABEL_61:
    result = 0;
    v11 = *(_QWORD *)(v11 + 8);
    v12 = v11 - 24;
    if (!v11)
      v12 = 0;
    v28 = *(unsigned __int8 *)(v12 + 16);
    if (v28 != 83)
      v12 = 0;
    if (!v11 || v28 != 83)
      return result;
  }
  v16 = *(_QWORD *)(v12 - 8);
  v15 = v14 & 0x7FFFFFF;
  if (!v15)
    goto LABEL_61;
LABEL_26:
  v17 = 32 * v15;
  while (*(_BYTE *)(*(_QWORD *)v16 + 16) != 16)
  {
    v16 += 32;
    v17 -= 32;
    if (!v17)
      goto LABEL_61;
  }
  v18 = *(uint64_t **)(v12 + 8);
  if (!v18)
    goto LABEL_61;
  while (1)
  {
    v19 = v18[3];
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (!v19 || v20 != 81)
      break;
    if (*(llvm::BasicBlock **)(v19 + 40) == a2)
    {
      v21 = *(uint64_t **)(v19 + 8);
      if (v21)
      {
        if (!v21[1])
        {
          v22 = *(_DWORD *)(v19 + 20);
          v23 = (v22 & 0x40000000) != 0 ? *(_QWORD *)(v19 - 8) : v19 - 32 * (v22 & 0x7FFFFFF);
          if (*(_BYTE *)(*(_QWORD *)(v19 + 32 * (1 - (((unint64_t)v18 - v23) >> 5)) - 64) + 16) == 16)
          {
            v19 = v21[3];
            if (v19)
            {
              if (*(_BYTE *)(v19 + 16) == 85 && *(llvm::BasicBlock **)(v19 + 40) == a2)
              {
                v24 = *v21;
                goto LABEL_47;
              }
            }
          }
        }
      }
    }
LABEL_58:
    v18 = (uint64_t *)v18[1];
    if (!v18)
      goto LABEL_61;
  }
  if (!v19 || v20 != 85 || *(llvm::BasicBlock **)(v19 + 40) != a2)
    goto LABEL_58;
  v24 = *v18;
LABEL_47:
  v25 = *(_QWORD *)(v19 - 96);
  if (sub_1C5B43D80((unsigned __int8 *)v19))
    LOBYTE(v26) = 0;
  else
    v26 = !sub_1C5B43DF4((unsigned __int8 *)v19);
  if (v25)
    v27 = v25 == v24;
  else
    v27 = 0;
  if (!v27)
    goto LABEL_58;
  if (*(_DWORD *)(*(_QWORD *)v24 + 8) != 269)
    LOBYTE(v26) = 0;
  if (!v26)
    goto LABEL_58;
  v29 = *(uint64_t ****)(v19 - 96);
  if (*((_BYTE *)this + 240))
  {
    DomTree = llvm::DomTreeUpdater::getDomTree(*((llvm::DomTreeUpdater **)this + 4));
    if ((sub_1C4F8BE80(v29, 0, v19, DomTree, 0, 0) & 1) == 0)
    {
      v31 = operator new(0x60uLL);
      v31[13] = v31[13] & 0x38000000 | 1;
      v32 = (uint64_t ***)(v31 + 8);
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      *((_QWORD *)v31 + 3) = v31 + 8;
      __p = "cond.fr";
      v111 = 259;
      llvm::FreezeInst::FreezeInst((uint64_t)(v31 + 8), v29, (uint64_t)&__p, v19);
      v29 = v32;
    }
  }
  v33 = sub_1C5EBFBC0((llvm::Value *)v29, (uint64_t *)v19, 0, 0, 0, 0, 0, 0);
  v107 = *(_QWORD *)(v19 + 40);
  v34 = *((_QWORD *)v33 + 5);
  v35 = *(_QWORD *)v19;
  v111 = 257;
  v36 = operator new(0x48uLL);
  v36[1] = v35;
  v37 = (llvm::Value *)(v36 + 1);
  *v36 = 0;
  v36[2] = 0;
  v36[3] = 0x4000000000000053;
  *((_OWORD *)v36 + 2) = 0u;
  v38 = (char *)(v36 + 4);
  *((_OWORD *)v36 + 3) = 0u;
  *((_DWORD *)v36 + 16) = 0;
  v39 = *(_QWORD *)(v19 + 40);
  v40 = (uint64_t *)(v19 + 24);
  v36[6] = v39;
  *(_WORD *)(v39 + 18) &= ~0x8000u;
  if ((*((_BYTE *)v36 + 31) & 0x10) != 0)
  {
    v104 = *(_QWORD *)(v39 + 56);
    if (v104)
    {
      v105 = *(llvm::ValueSymbolTable **)(v104 + 104);
      if (v105)
        llvm::ValueSymbolTable::reinsertValue(v105, v37);
    }
  }
  v41 = *v40;
  v36[4] = *v40;
  v36[5] = v40;
  *(_QWORD *)(v41 + 8) = v38;
  *v40 = (uint64_t)v38;
  *((_DWORD *)v36 + 17) = 2;
  llvm::Value::setName((uint64_t ***)v37, (uint64_t)&__p);
  v42 = *((unsigned int *)v36 + 17);
  v43 = operator new(40 * v42);
  *v36 = v43;
  if ((_DWORD)v42)
  {
    v44 = &v43[4 * v42];
    do
    {
      *v43 = 0;
      v43[1] = 0;
      v43[2] = 0;
      v43[3] = v37;
      v43 += 4;
    }
    while (v43 != v44);
  }
  sub_1C477667C(v37, *(_QWORD *)(v19 - 64), *((_QWORD *)v33 + 5));
  sub_1C477667C(v37, *(_QWORD *)(v19 - 32), (uint64_t)a2);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v19, v37, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v19 + 40) + 40, (uint64_t ***)v19);
  v45 = *(_QWORD *)(v19 + 24);
  v46 = *(_QWORD **)(v19 + 32);
  *v46 = v45;
  *(_QWORD *)(v45 + 8) = v46;
  *v40 = 0;
  *(_QWORD *)(v19 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v19);
  v48 = (_QWORD *)(v107 + 40);
  v47 = *(_QWORD *)(v107 + 40);
  __p = 0;
  v109 = 0;
  v110 = 0;
  if (v47 == v107 + 40)
  {
    v50 = 0;
  }
  else
  {
    if (v47)
      v49 = v47 - 24;
    else
      v49 = 0;
    if (*(unsigned __int8 *)(v49 + 16) - 29 >= 0xB)
      v50 = 0;
    else
      v50 = v49;
  }
  v51 = *(unsigned __int8 *)(v50 + 16);
  if (v51 != 30)
    __asm { BR              X12 }
  if ((*(_DWORD *)(v50 + 20) & 0x7FFFFFF) == 3)
    v52 = 2;
  else
    v52 = 1;
  sub_1C501881C((uint64_t)&__p, (2 * v52 + 3));
  v53 = v107 & 0xFFFFFFFFFFFFFFFBLL;
  v54 = v109;
  if (v109 < v110)
  {
    *(_QWORD *)v109 = a2;
    v54[1] = v53;
    v55 = (char *)(v54 + 2);
    goto LABEL_104;
  }
  v56 = __p;
  v57 = (v109 - (_BYTE *)__p) >> 4;
  v58 = v57 + 1;
  if ((unint64_t)(v57 + 1) >> 60)
    goto LABEL_197;
  v59 = v110 - (_BYTE *)__p;
  if ((v110 - (_BYTE *)__p) >> 3 > v58)
    v58 = v59 >> 3;
  if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
    v60 = 0xFFFFFFFFFFFFFFFLL;
  else
    v60 = v58;
  if (!v60)
  {
    v61 = 0;
    goto LABEL_99;
  }
  if (v60 >> 60)
    goto LABEL_198;
  v61 = (char *)operator new(16 * v60);
LABEL_99:
  v62 = &v61[16 * v57];
  *(_QWORD *)v62 = a2;
  *((_QWORD *)v62 + 1) = v53;
  v55 = v62 + 16;
  if (v54 != v56)
  {
    do
    {
      *((_OWORD *)v62 - 1) = *((_OWORD *)v54 - 1);
      v62 -= 16;
      v54 -= 2;
    }
    while (v54 != v56);
    v54 = __p;
  }
  __p = v62;
  v109 = v55;
  v110 = &v61[16 * v60];
  if (v54)
    operator delete(v54);
LABEL_104:
  v109 = v55;
  v63 = v34 & 0xFFFFFFFFFFFFFFFBLL;
  v106 = this;
  if (v55 < v110)
  {
    *(_QWORD *)v55 = a2;
    *((_QWORD *)v55 + 1) = v63;
    v64 = v55 + 16;
    goto LABEL_122;
  }
  v65 = (char *)__p;
  v66 = (v55 - (_BYTE *)__p) >> 4;
  v67 = v66 + 1;
  if ((unint64_t)(v66 + 1) >> 60)
LABEL_197:
    abort();
  v68 = v110 - (_BYTE *)__p;
  if ((v110 - (_BYTE *)__p) >> 3 > v67)
    v67 = v68 >> 3;
  if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
    v69 = 0xFFFFFFFFFFFFFFFLL;
  else
    v69 = v67;
  if (v69)
  {
    if (!(v69 >> 60))
    {
      v70 = (char *)operator new(16 * v69);
      goto LABEL_116;
    }
LABEL_198:
    sub_1C4764EE4();
  }
  v70 = 0;
LABEL_116:
  v71 = &v70[16 * v66];
  *(_QWORD *)v71 = a2;
  *((_QWORD *)v71 + 1) = v63;
  v64 = v71 + 16;
  if (v55 == v65)
  {
    __p = &v70[16 * v66];
    v109 = v71 + 16;
    v110 = &v70[16 * v69];
LABEL_121:
    operator delete(v55);
    goto LABEL_122;
  }
  do
  {
    *((_OWORD *)v71 - 1) = *((_OWORD *)v55 - 1);
    v71 -= 16;
    v55 -= 16;
  }
  while (v55 != v65);
  v55 = (char *)__p;
  __p = v71;
  v109 = v64;
  v110 = &v70[16 * v69];
  if (v55)
    goto LABEL_121;
LABEL_122:
  v109 = v64;
  if (v64 < v110)
  {
    *(_QWORD *)v64 = v34;
    *((_QWORD *)v64 + 1) = v53;
    v72 = v64 + 16;
    goto LABEL_140;
  }
  v73 = (char *)__p;
  v74 = (v64 - (_BYTE *)__p) >> 4;
  v75 = v74 + 1;
  if ((unint64_t)(v74 + 1) >> 60)
    goto LABEL_197;
  v76 = v110 - (_BYTE *)__p;
  if ((v110 - (_BYTE *)__p) >> 3 > v75)
    v75 = v76 >> 3;
  if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
    v77 = 0xFFFFFFFFFFFFFFFLL;
  else
    v77 = v75;
  if (v77)
  {
    if (v77 >> 60)
      goto LABEL_198;
    v78 = (char *)operator new(16 * v77);
  }
  else
  {
    v78 = 0;
  }
  v79 = &v78[16 * v74];
  *(_QWORD *)v79 = v34;
  *((_QWORD *)v79 + 1) = v53;
  v72 = v79 + 16;
  if (v64 == v73)
  {
    __p = &v78[16 * v74];
    v109 = v79 + 16;
    v110 = &v78[16 * v77];
LABEL_139:
    operator delete(v64);
    goto LABEL_140;
  }
  do
  {
    *((_OWORD *)v79 - 1) = *((_OWORD *)v64 - 1);
    v79 -= 16;
    v64 -= 16;
  }
  while (v64 != v73);
  v64 = (char *)__p;
  __p = v79;
  v109 = v72;
  v110 = &v78[16 * v77];
  if (v64)
    goto LABEL_139;
LABEL_140:
  v109 = v72;
  v80 = (_QWORD *)*v48;
  if ((_QWORD *)*v48 != v48)
  {
    if (v80)
      v81 = v80 - 3;
    else
      v81 = 0;
    if (*((_BYTE *)v81 + 16) != 30)
    {
      v82 = 2;
      switch(*((_BYTE *)v81 + 16))
      {
        case 0x1E:
          __break(1u);
          JUMPOUT(0x1C5B3CB60);
        case 0x1F:
          v82 = (*((_DWORD *)v81 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_192;
        case 0x20:
        case 0x26:
          v82 = (*((_DWORD *)v81 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_192;
        case 0x21:
          goto LABEL_148;
        case 0x24:
          v82 = *((_WORD *)v81 + 9) & 1;
          goto LABEL_192;
        case 0x25:
          v82 = 1;
          goto LABEL_148;
        case 0x27:
          v82 = *((_DWORD *)v81 + 20) + 1;
LABEL_192:
          if (!v82)
            goto LABEL_185;
          goto LABEL_148;
        default:
          goto LABEL_185;
      }
    }
    if ((*((_DWORD *)v81 + 5) & 0x7FFFFFF) == 3)
      v82 = 2;
    else
      v82 = 1;
LABEL_148:
    for (j = 0; v82 != j; ++j)
    {
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v81, j);
      v85 = Successor | 4;
      v86 = v109;
      if (v109 >= v110)
      {
        v88 = __p;
        v89 = (v109 - (_BYTE *)__p) >> 4;
        v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 60)
          goto LABEL_197;
        v91 = v110 - (_BYTE *)__p;
        if ((v110 - (_BYTE *)__p) >> 3 > v90)
          v90 = v91 >> 3;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
          v92 = 0xFFFFFFFFFFFFFFFLL;
        else
          v92 = v90;
        if (v92)
        {
          if (v92 >> 60)
            goto LABEL_198;
          v93 = (char *)operator new(16 * v92);
        }
        else
        {
          v93 = 0;
        }
        v94 = &v93[16 * v89];
        *(_QWORD *)v94 = a2;
        *((_QWORD *)v94 + 1) = v85;
        v95 = v94;
        if (v86 != v88)
        {
          do
          {
            *((_OWORD *)v95 - 1) = *((_OWORD *)v86 - 1);
            v95 -= 16;
            v86 -= 2;
          }
          while (v86 != v88);
          v86 = __p;
        }
        v87 = v94 + 16;
        __p = v95;
        v109 = v94 + 16;
        v110 = &v93[16 * v92];
        if (v86)
          operator delete(v86);
      }
      else
      {
        *(_QWORD *)v109 = a2;
        v86[1] = v85;
        v87 = (char *)(v86 + 2);
      }
      v96 = Successor & 0xFFFFFFFFFFFFFFFBLL;
      v109 = v87;
      if (v87 >= v110)
      {
        v97 = (char *)__p;
        v98 = (v87 - (_BYTE *)__p) >> 4;
        v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 60)
          goto LABEL_197;
        v100 = v110 - (_BYTE *)__p;
        if ((v110 - (_BYTE *)__p) >> 3 > v99)
          v99 = v100 >> 3;
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
          v101 = 0xFFFFFFFFFFFFFFFLL;
        else
          v101 = v99;
        if (v101)
        {
          if (v101 >> 60)
            goto LABEL_198;
          v102 = (char *)operator new(16 * v101);
        }
        else
        {
          v102 = 0;
        }
        v103 = &v102[16 * v98];
        *(_QWORD *)v103 = v107;
        *((_QWORD *)v103 + 1) = v96;
        v72 = v103 + 16;
        if (v87 == v97)
        {
          __p = &v102[16 * v98];
          v109 = v103 + 16;
          v110 = &v102[16 * v101];
        }
        else
        {
          do
          {
            *((_OWORD *)v103 - 1) = *((_OWORD *)v87 - 1);
            v103 -= 16;
            v87 -= 16;
          }
          while (v87 != v97);
          v87 = (char *)__p;
          __p = v103;
          v109 = v72;
          v110 = &v102[16 * v101];
          if (!v87)
            goto LABEL_184;
        }
        operator delete(v87);
      }
      else
      {
        *(_QWORD *)v87 = v107;
        *((_QWORD *)v87 + 1) = v96;
        v72 = v87 + 16;
      }
LABEL_184:
      v109 = v72;
    }
  }
LABEL_185:
  llvm::DomTreeUpdater::applyUpdatesPermissive(*((_QWORD **)v106 + 4), (uint64_t *)__p, (v72 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v109 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

uint64_t llvm::JumpThreadingPass::processGuards(llvm::JumpThreadingPass *this, llvm::BasicBlock *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  llvm::BasicBlock *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  llvm::BasicBlock *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 24);
      v6 = *(unsigned __int8 *)(v5 + 16);
      v7 = v5 && v6 >= 0x1C;
      if (v7 && v6 - 29 <= 0xA)
        break;
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return 0;
    }
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        break;
      v9 = *(_QWORD *)(v2 + 24);
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v9)
        v11 = v10 >= 0x1C;
      else
        v11 = 0;
      if (v11 && v10 - 29 <= 0xA)
      {
        v13 = *(llvm::BasicBlock **)(v5 + 40);
        while (1)
        {
          v2 = *(_QWORD *)(v2 + 8);
          if (!v2)
            break;
          v14 = *(_QWORD *)(v2 + 24);
          v15 = *(unsigned __int8 *)(v14 + 16);
          if (v14)
            v16 = v15 >= 0x1C;
          else
            v16 = 0;
          if (v16 && v15 - 29 < 0xB)
            return 0;
        }
        v18 = *(llvm::BasicBlock **)(v9 + 40);
        if (v13 == v18)
          return 0;
        result = llvm::BasicBlock::getSinglePredecessor(v13);
        if (!result)
          return result;
        v20 = result;
        if (result != llvm::BasicBlock::getSinglePredecessor(v18))
          return 0;
        v21 = *(_QWORD *)(v20 + 40);
        if (v21 == v20 + 40)
          return 0;
        result = 0;
        if (v21)
          v22 = v21 - 24;
        else
          v22 = 0;
        v23 = *(unsigned __int8 *)(v22 + 16) - 40;
        if (v23 >= 0xFFFFFFF5)
          v24 = v22;
        else
          v24 = 0;
        if (v21)
        {
          if (*(_BYTE *)(v24 + 16) == 30 && v23 >= 0xFFFFFFF5)
          {
            v26 = (_QWORD *)*((_QWORD *)a2 + 6);
            if (v26 == (_QWORD *)((char *)a2 + 40))
              return 0;
            while (1)
            {
              v27 = v26 ? (uint64_t)(v26 - 3) : 0;
              if (v26)
              {
                if (*(_BYTE *)(v27 + 16) == 84)
                {
                  v28 = *(_QWORD *)(v27 - 32);
                  if (v28)
                  {
                    if (!*(_BYTE *)(v28 + 16)
                      && *(_QWORD *)(v28 + 24) == *(_QWORD *)(v27 + 72)
                      && *(_DWORD *)(v28 + 36) == 125
                      && llvm::JumpThreadingPass::threadGuard((uint64_t)this, a2, v27, v24))
                    {
                      break;
                    }
                  }
                }
              }
              result = 0;
              v26 = (_QWORD *)v26[1];
              if (v26 == (_QWORD *)((char *)a2 + 40))
                return result;
            }
            return 1;
          }
        }
        return result;
      }
    }
  }
  return 0;
}

uint64_t sub_1C5B3CD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 == a1 + 40)
  {
    v3 = 0;
  }
  else
  {
    if (v1)
      v2 = v1 - 24;
    else
      v2 = 0;
    if (*(unsigned __int8 *)(v2 + 16) - 29 >= 0xB)
      v3 = 0;
    else
      v3 = v2;
  }
  v4 = *(_QWORD *)(llvm::Instruction::getSuccessor((llvm::Instruction *)v3, 0) + 8);
  if (v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 24);
      v6 = *(unsigned __int8 *)(v5 + 16);
      v7 = v5 && v6 >= 0x1C;
      if (v7 && v6 - 29 <= 0xA)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        goto LABEL_19;
    }
    v22 = 0;
LABEL_51:
    ++v22;
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        break;
      v23 = *(_QWORD *)(v4 + 24);
      v24 = *(unsigned __int8 *)(v23 + 16);
      if (v23)
        v25 = v24 >= 0x1C;
      else
        v25 = 0;
      if (v25 && v24 - 29 < 0xB)
        goto LABEL_51;
    }
  }
  else
  {
LABEL_19:
    v22 = 0;
  }
  v9 = *(unsigned __int8 *)(v3 + 16);
  if (v9 != 30)
    __asm { BR              X10 }
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) != 3)
    return 0;
  v10 = 1;
  LODWORD(v11) = 0;
  do
  {
    v12 = *(_QWORD *)(llvm::Instruction::getSuccessor((llvm::Instruction *)v3, v10) + 8);
    if (v12)
    {
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 24);
        v14 = *(unsigned __int8 *)(v13 + 16);
        v15 = v13 && v14 >= 0x1C;
        if (v15 && v14 - 29 <= 0xA)
          break;
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          goto LABEL_33;
      }
      v17 = 0;
LABEL_41:
      ++v17;
      while (1)
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          break;
        v18 = *(_QWORD *)(v12 + 24);
        v19 = *(unsigned __int8 *)(v18 + 16);
        if (v18)
          v20 = v19 >= 0x1C;
        else
          v20 = 0;
        if (v20 && v19 - 29 < 0xB)
          goto LABEL_41;
      }
    }
    else
    {
LABEL_33:
      v17 = 0;
    }
    if (v17 >= v22)
      v11 = v11;
    else
      v11 = v10;
    if (v17 < v22)
      v22 = v17;
    ++v10;
  }
  while (v10 != 2);
  return v11;
}

void sub_1C5B3CF24()
{
  JUMPOUT(0x1C5B3CEFCLL);
}

void sub_1C5B3CF34()
{
  JUMPOUT(0x1C5B3CEFCLL);
}

void sub_1C5B3CF40()
{
  JUMPOUT(0x1C5B3CEFCLL);
}

uint64_t llvm::JumpThreadingPass::processThreadableEdges(uint64_t a1, llvm::ConstantInt ***a2, llvm::BasicBlock *a3, uint64_t a4, llvm::Instruction *a5)
{
  _QWORD *i;
  unint64_t v9;
  uint64_t v10;
  llvm::BasicBlock **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  llvm::Instruction *v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  llvm::APInt *v29;
  unsigned int v30;
  BOOL v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int k;
  uint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  llvm::Instruction *v53;
  _BYTE *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  _QWORD *v65;
  _QWORD *v66;
  int v67;
  int v68;
  unsigned int v69;
  llvm::BasicBlock *v70;
  llvm::BasicBlock *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  llvm::BasicBlock **v81;
  llvm::BasicBlock **v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  llvm::Value *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  llvm::Value *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  int v103;
  unsigned int j;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t *v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  llvm::ValueSymbolTable *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  int v128;
  int v130;
  _QWORD *v131;
  llvm::Instruction *v132;
  int v133;
  _QWORD *v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  int v138;
  _BYTE v139[128];
  uint64_t Successor;
  void *__p;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  unsigned int v148[2];
  _BYTE v149[256];
  void **v150;
  uint64_t v151;
  _QWORD v152[18];

  v152[16] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 224))
  {
    for (i = *(_QWORD **)(a1 + 216); i; i = (_QWORD *)*i)
    {
      v9 = i[4];
      if (v9 <= (unint64_t)a3)
      {
        if (v9 >= (unint64_t)a3)
          return 0;
        ++i;
      }
    }
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v10)
    {
      v11 = *(llvm::BasicBlock ***)(a1 + 64);
      v12 = 8 * v10;
      while (*v11 != a3)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_16;
      }
      if (v12)
        return 0;
    }
  }
LABEL_16:
  v150 = (void **)v152;
  v151 = 0x800000000;
  if (!sub_1C6318460(a1, (llvm::Value *)a2, a3, (uint64_t)&v150, a4, a5))
  {
    v13 = llvm::JumpThreadingPass::maybethreadThroughTwoBasicBlocks((llvm::JumpThreadingPass *)a1, a3, a2);
    goto LABEL_150;
  }
  v135 = v139;
  v136 = v139;
  v137 = 16;
  v138 = 0;
  v147 = v149;
  *(_QWORD *)v148 = 0x1000000000;
  if (!(_DWORD)v151)
  {
    v13 = 0;
    goto LABEL_146;
  }
  v132 = (llvm::Instruction *)a2;
  v15 = 0;
  v16 = 0;
  v17 = (_QWORD *)((char *)a3 + 40);
  v18 = 16 * v151;
  v19 = v150 + 1;
  v134 = (_QWORD *)((char *)a3 + 40);
  do
  {
    __p = *v19;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v135, (uint64_t)__p);
    if (!v20)
      goto LABEL_76;
    v21 = 0;
    v22 = (uint64_t)*(v19 - 1);
    Successor = 0;
    if (*(unsigned __int8 *)(v22 + 16) - 11 >= 2)
    {
      v23 = (_QWORD *)*v17;
      if ((_QWORD *)*v17 == v17)
        goto LABEL_44;
      if (v23)
        v24 = (uint64_t)(v23 - 3);
      else
        v24 = 0;
      v25 = *(unsigned __int8 *)(v24 + 16) - 40;
      if (v25 >= 0xFFFFFFF5)
        v26 = v24;
      else
        v26 = 0;
      v27 = *(unsigned __int8 *)(v26 + 16);
      if (v23)
      {
        if (v27 == 30 && v25 >= 0xFFFFFFF5)
        {
          v29 = (llvm::APInt *)(v22 + 24);
          v30 = *(_DWORD *)(v22 + 32);
          if (v30 > 0x40)
            v31 = llvm::APInt::countLeadingZerosSlowCase(v29) == v30;
          else
            v31 = *(_QWORD *)v29 == 0;
          v36 = v31;
          v17 = (_QWORD *)((char *)a3 + 40);
          v21 = *(_QWORD *)(v26 + 32 * (v36 << 63 >> 63) - 32);
          goto LABEL_55;
        }
      }
      if (v23 && (v27 == 31 ? (v32 = v25 >= 0xFFFFFFF5) : (v32 = 0), v32))
      {
        sub_1C4E5D490(v26, v22);
        v34 = *(_DWORD *)(v26 + 20);
        if ((v34 & 0x40000000) != 0)
          v35 = *(_QWORD *)(v26 - 8);
        else
          v35 = v26 - 32 * (v34 & 0x7FFFFFF);
        if (v33 == 4294967294)
          v37 = 1;
        else
          v37 = (2 * v33 + 3);
        v21 = *(_QWORD *)(v35 + 32 * v37);
      }
      else
      {
LABEL_44:
        v21 = *(_QWORD *)(v22 - 32);
      }
LABEL_55:
      Successor = v21;
    }
    if (v15 == v21)
      v38 = v15;
    else
      v38 = -1;
    if ((llvm::Instruction *)v22 == v16)
      v39 = (uint64_t)v16;
    else
      v39 = -1;
    if (v148[0])
      v16 = (llvm::Instruction *)v39;
    else
      v16 = (llvm::Instruction *)v22;
    if (v148[0])
      v15 = v38;
    else
      v15 = v21;
    v40 = *((_QWORD *)__p + 5);
    if (v40)
      v41 = v40 - 24;
    else
      v41 = 0;
    if (*(unsigned __int8 *)(v41 + 16) - 29 >= 0xB)
      v41 = 0;
    v42 = *(unsigned __int8 *)(v41 + 16);
    if (v42 != 32 && v42 != 39)
      sub_1C6211B60((uint64_t)&v147, (uint64_t *)&__p, &Successor);
LABEL_76:
    v19 += 2;
    v18 -= 16;
  }
  while (v18);
  if (!v148[0])
    goto LABEL_138;
  if (v15 == -1)
  {
    v54 = v147;
    v55 = (char *)v147 + 16 * v148[0];
    v56 = (char *)v147 + 16;
    while (!sub_1C5B43F70(a1 + 64, *((_QWORD *)v56 - 1)))
    {
      v31 = v56 == v55;
      v56 += 16;
      if (v31)
        goto LABEL_137;
    }
    v60 = v56 - 16;
    while (v56 != v55)
    {
      if (!sub_1C5B43F70(a1 + 64, *((_QWORD *)v56 + 1)))
      {
        *(_QWORD *)v60 = *(_QWORD *)v56;
        *((_QWORD *)v60 + 1) = *((_QWORD *)v56 + 1);
        v60 += 16;
      }
      v56 += 16;
    }
    v55 = v60;
LABEL_137:
    v148[0] = (unint64_t)(v55 - v54) >> 4;
    if (v148[0])
    {
      __p = 0;
      v142 = 0;
      LODWORD(v143) = 0;
      v145 = 0;
      v146 = 0;
      v144 = 0;
      Successor = 0;
      *(_DWORD *)sub_1C6318C24((uint64_t)&__p, &Successor) = 0;
      v101 = (_QWORD *)*v134;
      if ((_QWORD *)*v134 != v134)
      {
        if (v101)
          v102 = v101 - 3;
        else
          v102 = 0;
        if (*((_BYTE *)v102 + 16) != 30)
        {
          v103 = 2;
          switch(*((_BYTE *)v102 + 16))
          {
            case 0x1E:
LABEL_270:
              __break(1u);
              JUMPOUT(0x1C5B3DBC4);
            case 0x1F:
              v103 = (*((_DWORD *)v102 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_254;
            case 0x20:
            case 0x26:
              v103 = (*((_DWORD *)v102 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_254;
            case 0x21:
              goto LABEL_223;
            case 0x24:
              v103 = *((_WORD *)v102 + 9) & 1;
              goto LABEL_254;
            case 0x25:
              v103 = 1;
              goto LABEL_223;
            case 0x27:
              v103 = *((_DWORD *)v102 + 20) + 1;
LABEL_254:
              if (!v103)
                goto LABEL_225;
              goto LABEL_223;
            default:
              goto LABEL_225;
          }
        }
        if ((*((_DWORD *)v102 + 5) & 0x7FFFFFF) == 3)
          v103 = 2;
        else
          v103 = 1;
LABEL_223:
        for (j = 0; j != v103; ++j)
        {
          Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v102, j);
          *(_DWORD *)sub_1C6318C24((uint64_t)&__p, &Successor) = 0;
        }
      }
LABEL_225:
      if (v148[0])
      {
        v108 = 16 * v148[0];
        v109 = (uint64_t *)((char *)v147 + 8);
        do
        {
          if (*v109)
          {
            v110 = (_DWORD *)sub_1C6318C24((uint64_t)&__p, v109);
            ++*v110;
          }
          v109 += 2;
          v108 -= 16;
        }
        while (v108);
      }
      v105 = v144;
      v106 = v144 + 16;
      if (v144 != v145 && v106 != v145)
      {
        do
        {
          if (*(_DWORD *)(v105 + 8) < *(_DWORD *)(v106 + 8))
            v105 = v106;
          v106 += 16;
        }
        while (v106 != v145);
      }
      v15 = *(_QWORD *)v105;
      sub_1C6176BF8(&__p);
      v61 = v148[0];
      v17 = (_QWORD *)((char *)a3 + 40);
      goto LABEL_140;
    }
LABEL_138:
    v13 = 0;
    goto LABEL_146;
  }
  if (!v15)
  {
    __p = &v143;
    v142 = 0x1000000000;
    v43 = (char *)v147;
    v44 = (char *)v147 + 16 * v148[0];
    do
    {
LABEL_83:
      if (*((_QWORD *)v43 + 1) == v15)
      {
        v45 = *(_QWORD *)v43;
        v46 = *(_QWORD *)(*(_QWORD *)v43 + 40);
        if (v46 != *(_QWORD *)v43 + 40)
        {
          if (v46)
            v47 = v46 - 24;
          else
            v47 = 0;
          if (*(_BYTE *)(v47 + 16) != 30)
          {
            v48 = 2;
            switch(*(_BYTE *)(v47 + 16))
            {
              case 0x1E:
                goto LABEL_270;
              case 0x1F:
                v48 = (*(_DWORD *)(v47 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_103;
              case 0x20:
              case 0x26:
                v48 = (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_103;
              case 0x21:
                goto LABEL_94;
              case 0x24:
                v48 = *(_WORD *)(v47 + 18) & 1;
                goto LABEL_103;
              case 0x25:
                v48 = 1;
                goto LABEL_94;
              case 0x27:
                v48 = *(_DWORD *)(v47 + 80) + 1;
LABEL_103:
                if (!v48)
                  goto LABEL_84;
                goto LABEL_94;
              default:
                goto LABEL_84;
            }
          }
          if ((*(_DWORD *)(v47 + 20) & 0x7FFFFFF) == 3)
            v48 = 2;
          else
            v48 = 1;
LABEL_94:
          for (k = 0; k != v48; ++k)
          {
            if ((llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v47, k) == a3)
            {
              v50 = v142;
              if (v142 >= (unint64_t)HIDWORD(v142))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&v143, v142 + 1, 8);
                v50 = v142;
              }
              *((_QWORD *)__p + v50) = v45;
              LODWORD(v142) = v142 + 1;
            }
          }
        }
      }
LABEL_84:
      v43 += 16;
    }
    while (v43 != v44);
    v17 = (_QWORD *)((char *)a3 + 40);
    goto LABEL_110;
  }
  if (!llvm::BasicBlock::hasNPredecessors(a3, v148[0]))
  {
    v61 = v148[0];
LABEL_140:
    __p = &v143;
    v142 = 0x1000000000;
    if (v61)
    {
      v43 = (char *)v147;
      v44 = (char *)v147 + 16 * v61;
      goto LABEL_83;
    }
LABEL_110:
    if (!v15)
    {
      v51 = (_QWORD *)*v17;
      if ((_QWORD *)*v17 == v17)
      {
        v53 = 0;
      }
      else
      {
        if (v51)
          v52 = (unsigned __int8 *)(v51 - 3);
        else
          v52 = 0;
        if (v52[16] - 29 >= 0xB)
          v53 = 0;
        else
          v53 = (llvm::Instruction *)v52;
      }
      v62 = sub_1C5B3CD70((uint64_t)a3);
      v15 = llvm::Instruction::getSuccessor(v53, v62);
    }
    v13 = llvm::JumpThreadingPass::tryThreadEdge(a1, a3, (uint64_t **)&__p, v15);
    if (__p != &v143)
      free(__p);
    goto LABEL_146;
  }
  __p = 0;
  v142 = 0;
  v143 = 0;
  v57 = (_QWORD *)*v17;
  if ((_QWORD *)*v17 == v17)
  {
    v59 = 0;
  }
  else
  {
    if (v57)
      v58 = v57 - 3;
    else
      v58 = 0;
    if (*((unsigned __int8 *)v58 + 16) - 29 >= 0xB)
      v59 = 0;
    else
      v59 = v58;
  }
  v63 = *((unsigned __int8 *)v59 + 16);
  if (v63 != 30)
    __asm { BR              X12 }
  if ((*((_DWORD *)v59 + 5) & 0x7FFFFFF) == 3)
    v64 = 2;
  else
    v64 = 1;
  sub_1C501881C((uint64_t)&__p, (v64 - 1));
  v65 = (_QWORD *)*v17;
  if ((_QWORD *)*v17 == v17)
    goto LABEL_199;
  if (v65)
    v66 = v65 - 3;
  else
    v66 = 0;
  if (*((_BYTE *)v66 + 16) != 30)
  {
    v67 = 2;
    switch(*((_BYTE *)v66 + 16))
    {
      case 0x1E:
        goto LABEL_270;
      case 0x1F:
        v67 = (*((_DWORD *)v66 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_237;
      case 0x20:
      case 0x26:
        v67 = (*((_DWORD *)v66 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_237;
      case 0x21:
        goto LABEL_165;
      case 0x24:
        v67 = *((_WORD *)v66 + 9) & 1;
        goto LABEL_237;
      case 0x25:
        v67 = 1;
        goto LABEL_165;
      case 0x27:
        v67 = *((_DWORD *)v66 + 20) + 1;
LABEL_237:
        if (!v67)
          goto LABEL_192;
        goto LABEL_165;
      default:
        goto LABEL_192;
    }
  }
  v67 = (*((_DWORD *)v66 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_165:
  v68 = 0;
  v69 = 0;
  v131 = v66;
  v130 = v67;
  do
  {
    v70 = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v66, v69);
    v71 = v70;
    if (v70 != (llvm::BasicBlock *)v15 || (v68 & 1) != 0)
    {
      v133 = v68;
      llvm::BasicBlock::removePredecessor(v70, a3, 1);
      v72 = (unint64_t)v71 | 4;
      v73 = (_QWORD *)v142;
      if (v142 >= (unint64_t)v143)
      {
        v75 = __p;
        v76 = (uint64_t)(v142 - (_QWORD)__p) >> 4;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 60)
          abort();
        v78 = v143 - (_BYTE *)__p;
        if ((v143 - (_BYTE *)__p) >> 3 > v77)
          v77 = v78 >> 3;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
          v79 = 0xFFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          if (v79 >> 60)
            sub_1C4764EE4();
          v80 = (char *)operator new(16 * v79);
        }
        else
        {
          v80 = 0;
        }
        v81 = (llvm::BasicBlock **)&v80[16 * v76];
        *v81 = a3;
        v81[1] = (llvm::BasicBlock *)v72;
        v82 = v81;
        if (v73 == v75)
        {
          v68 = v133;
        }
        else
        {
          v68 = v133;
          do
          {
            *((_OWORD *)v82 - 1) = *((_OWORD *)v73 - 1);
            v82 -= 2;
            v73 -= 2;
          }
          while (v73 != v75);
          v73 = __p;
        }
        v74 = v81 + 2;
        __p = v82;
        v142 = (unint64_t)(v81 + 2);
        v143 = &v80[16 * v79];
        v66 = v131;
        if (v73)
          operator delete(v73);
        v67 = v130;
      }
      else
      {
        *(_QWORD *)v142 = a3;
        v73[1] = v72;
        v74 = v73 + 2;
        v68 = v133;
      }
      v142 = (unint64_t)v74;
      v17 = (_QWORD *)((char *)a3 + 40);
    }
    else
    {
      v68 = 1;
    }
    ++v69;
  }
  while (v67 != v69);
  v65 = (_QWORD *)*v17;
LABEL_192:
  if (v65 == v17)
  {
LABEL_199:
    v85 = 0;
  }
  else
  {
    v83 = v65 - 3;
    if (v65)
      v84 = v65 - 3;
    else
      v84 = 0;
    if (*((unsigned __int8 *)v84 + 16) - 29 >= 0xB)
      v85 = 0;
    else
      v85 = v83;
  }
  v86 = (char *)operator new(0x60uLL);
  v87 = v86;
  *((_DWORD *)v86 + 13) = *((_DWORD *)v86 + 13) & 0x38000000 | 1;
  *((_QWORD *)v86 + 1) = 0;
  *((_QWORD *)v86 + 2) = 0;
  *(_QWORD *)v86 = 0;
  *((_QWORD *)v86 + 4) = ***(_QWORD ***)v15 + 1576;
  v88 = (llvm::Value *)(v86 + 32);
  *((_QWORD *)v86 + 3) = v86 + 32;
  *((_QWORD *)v86 + 5) = 0;
  v86[48] = 30;
  v86[49] = 0;
  *((_WORD *)v86 + 25) = 0;
  *((_DWORD *)v86 + 13) = 1;
  *(_OWORD *)(v86 + 56) = 0u;
  v89 = v86 + 56;
  *(_OWORD *)(v86 + 72) = 0u;
  *((_DWORD *)v86 + 22) = 0;
  if (v85)
  {
    v111 = v85[5];
    v112 = v85 + 3;
    *((_QWORD *)v86 + 9) = v111;
    *(_WORD *)(v111 + 18) &= ~0x8000u;
    if ((v86[55] & 0x10) != 0
      && (v116 = *(_QWORD *)(v111 + 56)) != 0
      && (v117 = *(llvm::ValueSymbolTable **)(v116 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v117, v88);
      v118 = *(_QWORD *)v87;
      v119 = *v112;
      *((_QWORD *)v87 + 7) = *v112;
      *((_QWORD *)v87 + 8) = v112;
      *(_QWORD *)(v119 + 8) = v89;
      *v112 = (uint64_t)v89;
      if (v118)
      {
        **((_QWORD **)v87 + 2) = *((_QWORD *)v87 + 1);
        v120 = *((_QWORD *)v87 + 1);
        if (v120)
          *(_QWORD *)(v120 + 16) = *((_QWORD *)v87 + 2);
      }
    }
    else
    {
      v113 = *v112;
      *((_QWORD *)v87 + 7) = *v112;
      *((_QWORD *)v87 + 8) = v112;
      *(_QWORD *)(v113 + 8) = v89;
      *v112 = (uint64_t)v89;
    }
  }
  *(_QWORD *)v87 = v15;
  v92 = *(_QWORD *)(v15 + 8);
  v91 = (_QWORD *)(v15 + 8);
  v90 = v92;
  *((_QWORD *)v87 + 1) = v92;
  if (v92)
    *(_QWORD *)(v90 + 16) = v87 + 8;
  *((_QWORD *)v87 + 2) = v91;
  *v91 = v87;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v85[5] + 40, (uint64_t ***)v85);
  v93 = v85[3];
  v94 = (_QWORD *)v85[4];
  *v94 = v93;
  *(_QWORD *)(v93 + 8) = v94;
  v85[3] = 0;
  v85[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v85);
  llvm::DomTreeUpdater::applyUpdatesPermissive(*(_QWORD **)(a1 + 32), (uint64_t *)__p, (uint64_t)(v142 - (_QWORD)__p) >> 4);
  if (*(_BYTE *)(a1 + 56))
    llvm::BranchProbabilityInfo::eraseBlock(*(_QWORD *)(a1 + 48), a3);
  v96 = (uint64_t)v132;
  if (v132)
  {
    v97 = *((unsigned __int8 *)v132 + 16);
    if (v97 >= 0x1C)
    {
      if (!*((_QWORD *)v132 + 1))
      {
        v98 = v97 - 33;
        if (v98 > 0x37)
          goto LABEL_212;
        if (((1 << v98) & 0x808001D0000010) == 0)
        {
          if (((1 << v98) & 0x8000000000041) != 0)
          {
            v114 = *((_QWORD *)v132 + 8);
            if (v114 && (*(_BYTE *)(v114 + 17) & 0x30) != 0)
              goto LABEL_212;
            v115 = *((_DWORD *)v132 + 5);
            if ((v115 & 0x80000000) == 0
              || (v121 = (char *)v132 - 32 * (v115 & 0x7FFFFFF),
                  v124 = *((_QWORD *)v121 - 1),
                  v122 = v121 - 8,
                  (v123 = v124) == 0))
            {
LABEL_249:
              v96 = (uint64_t)v132;
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v132, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v132, 44))
              {
                goto LABEL_257;
              }
              goto LABEL_212;
            }
            v125 = -v123;
            v96 = (uint64_t)v132;
            while (1)
            {
              v126 = *(_DWORD *)(*(_QWORD *)&v122[v125] + 8);
              v127 = v126 > 7;
              v128 = (1 << v126) & 0x83;
              if (v127 || v128 == 0)
                break;
              v125 += 16;
              if (!v125)
                goto LABEL_249;
            }
          }
          else
          {
            if (v98 == 27 && (*((_WORD *)v132 + 9) & 0x301) != 0)
              goto LABEL_257;
LABEL_212:
            if ((llvm::Instruction::mayThrow((llvm::Instruction *)v96) & 1) == 0
              && llvm::Instruction::willReturn((llvm::Instruction *)v96))
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v96 + 40) + 40, (uint64_t ***)v96);
              v99 = *(_QWORD *)(v96 + 24);
              v100 = *(_QWORD **)(v96 + 32);
              *v100 = v99;
              *(_QWORD *)(v99 + 8) = v100;
              *(_QWORD *)(v96 + 24) = 0;
              *(_QWORD *)(v96 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v96);
              goto LABEL_260;
            }
          }
        }
      }
LABEL_257:
      if ((unint64_t)v16 + 1 >= 2 && *(llvm::BasicBlock **)(v96 + 40) == a3)
        sub_1C5B3DCAC(v96, v16, v95);
    }
  }
LABEL_260:
  if (__p)
  {
    v142 = (unint64_t)__p;
    operator delete(__p);
  }
  v13 = 1;
LABEL_146:
  if (v147 != v149)
    free(v147);
  if (v136 != v135)
    free(v136);
LABEL_150:
  if (v150 != v152)
    free(v150);
  return v13;
}

void sub_1C5B3DCAC(uint64_t a1, llvm::Instruction *a2, llvm::Value *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  llvm::Value *PersonalityFn;
  const llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;

  v5 = *(_QWORD *)(a1 + 40);
  llvm::replaceNonLocalUsesWith((llvm *)a1, a2, a3);
  v8 = *(_QWORD **)(v5 + 40);
  v6 = (_QWORD *)(v5 + 40);
  for (i = v8; i != v6; i = (_QWORD *)*i)
  {
    v9 = i ? (uint64_t)(i - 3) : 0;
    if (v9 == a1)
      break;
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 29 || v10 == 35)
      break;
    if (v10 == 80)
    {
      PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v9 + 40) + 56));
      if (llvm::classifyEHPersonality(PersonalityFn, v12) != 10)
        break;
    }
    else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v9) & 1) != 0
           || !llvm::Instruction::willReturn((llvm::Instruction *)v9))
    {
      break;
    }
    llvm::User::replaceUsesOfWith((llvm::User *)v9, (llvm::Value *)a1, a2);
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v13 = *(unsigned __int8 *)(a1 + 16) - 33;
    if (v13 > 0x37)
      goto LABEL_19;
    if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x808001D0000010) != 0)
      return;
    if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v13 == 27 && (*(_WORD *)(a1 + 18) & 0x301) != 0)
        return;
      goto LABEL_19;
    }
    v16 = *(_QWORD *)(a1 + 64);
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 17) & 0x30) != 0)
      {
LABEL_19:
        if ((llvm::Instruction::mayThrow((llvm::Instruction *)a1) & 1) == 0)
        {
          if (llvm::Instruction::willReturn((llvm::Instruction *)a1))
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
            v14 = *(_QWORD *)(a1 + 24);
            v15 = *(_QWORD **)(a1 + 32);
            *v15 = v14;
            *(_QWORD *)(v14 + 8) = v15;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)a1);
          }
        }
        return;
      }
    }
    v17 = *(_DWORD *)(a1 + 20);
    if ((v17 & 0x80000000) == 0
      || (v18 = a1 - 32 * (v17 & 0x7FFFFFF), v21 = *(_QWORD *)(v18 - 8), v19 = v18 - 8, (v20 = v21) == 0))
    {
LABEL_25:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
      {
        return;
      }
      goto LABEL_19;
    }
    v22 = -v20;
    while (1)
    {
      v23 = *(_DWORD *)(*(_QWORD *)(v19 + v22) + 8);
      v24 = v23 > 7;
      v25 = (1 << v23) & 0x83;
      if (v24 || v25 == 0)
        break;
      v22 += 16;
      if (!v22)
        goto LABEL_25;
    }
  }
}

uint64_t llvm::JumpThreadingPass::tryToUnfoldSelect(llvm::LazyValueInfo **this, llvm::CmpInst *a2, llvm::BasicBlock *a3)
{
  llvm::BasicBlock *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Constant *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::BasicBlock *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int PredicateOnEdge;

  v6 = (llvm::BasicBlock *)*((_QWORD *)a3 + 5);
  if (v6 == (llvm::BasicBlock *)((char *)a3 + 40))
  {
    v7 = 0;
  }
  else
  {
    if (v6)
      v7 = (char *)v6 - 24;
    else
      v7 = 0;
    if (v7[16] - 29 >= 0xB)
      v7 = 0;
  }
  result = 0;
  if (*(_BYTE *)(*((_QWORD *)a2 - 8) + 16) == 83)
    v9 = *((_QWORD *)a2 - 8);
  else
    v9 = 0;
  if (v7 && v7[16] == 30)
  {
    v10 = (*((_DWORD *)v7 + 5) & 0x7FFFFFF) != 3 || v9 == 0;
    if (!v10
      && *(llvm::BasicBlock **)(v9 + 40) == a3
      && (v11 = *(_DWORD *)(v9 + 20), v12 = v11 & 0x7FFFFFF, (v11 & 0x7FFFFFF) != 0))
    {
      v13 = 0;
      v14 = 0;
      v15 = (llvm::Constant *)*((_QWORD *)a2 - 4);
      while (1)
      {
        v16 = *(_DWORD *)(v9 + 20);
        v17 = (v16 & 0x40000000) != 0 ? *(_QWORD *)(v9 - 8) : v9 - 32 * (v16 & 0x7FFFFFF);
        v18 = *(_QWORD *)(v17 + v13);
        if (v18)
        {
          if (*(_BYTE *)(v18 + 16) == 85)
          {
            v19 = *(llvm::BasicBlock **)(v17 + 32 * *(unsigned int *)(v9 + 60) + 8 * v14);
            if (*(llvm::BasicBlock **)(v18 + 40) == v19)
            {
              v20 = *(_QWORD *)(v18 + 8);
              if (v20)
              {
                if (!*(_QWORD *)(v20 + 8))
                {
                  v21 = (_QWORD *)*((_QWORD *)v19 + 5);
                  if (v21 != (_QWORD *)((char *)v19 + 40))
                  {
                    v22 = v21 - 3;
                    if (!v21)
                      v22 = 0;
                    v23 = *((unsigned __int8 *)v22 + 16) - 40;
                    if (v23 < 0xFFFFFFF5)
                      v22 = 0;
                    if (v21)
                    {
                      v24 = *((_BYTE *)v22 + 16) == 30 && v23 >= 0xFFFFFFF5;
                      if (v24 && (*((_DWORD *)v22 + 5) & 0x7FFFFFF) == 1)
                      {
                        PredicateOnEdge = llvm::LazyValueInfo::getPredicateOnEdge(this[2], *((_WORD *)a2 + 9) & 0x3F, *(llvm::Value **)(v18 - 64), v15, v19, a3, a2);
                        v25 = llvm::LazyValueInfo::getPredicateOnEdge(this[2], *((_WORD *)a2 + 9) & 0x3F, *(llvm::Value **)(v18 - 32), v15, v19, a3, a2);
                        if ((PredicateOnEdge & v25) != 0xFFFFFFFF && PredicateOnEdge != v25)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v14;
        v13 += 32;
        if (v12 == v14)
          return 0;
      }
      llvm::JumpThreadingPass::unfoldSelectInstr((llvm::JumpThreadingPass *)this, v19, (unint64_t)a3, (llvm::SelectInst *)v18, (llvm::PHINode *)v9, v14);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::JumpThreadingPass::tryToUnfoldSelect(llvm::JumpThreadingPass *this, llvm::SwitchInst *a2, llvm::BasicBlock *a3)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::BasicBlock *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  BOOL v19;

  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x40000000) != 0)
    v4 = (uint64_t *)*((_QWORD *)a2 - 1);
  else
    v4 = (uint64_t *)((char *)a2 - 32 * (v3 & 0x7FFFFFF));
  v5 = 0;
  v6 = *v4;
  if (*v4 && *(_BYTE *)(v6 + 16) == 83)
  {
    if (*(llvm::BasicBlock **)(v6 + 40) == a3
      && (v8 = *(_DWORD *)(v6 + 20), v9 = v8 & 0x7FFFFFF, (v8 & 0x7FFFFFF) != 0))
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v6 - 32 * v9;
        if ((v8 & 0x40000000) != 0)
          v12 = *(_QWORD *)(v6 - 8);
        v13 = *(_QWORD *)(v12 + v10);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 16) == 85)
          {
            v14 = *(llvm::BasicBlock **)(v12 + 32 * *(unsigned int *)(v6 + 60) + 8 * v11);
            if (*(llvm::BasicBlock **)(v13 + 40) == v14)
            {
              v15 = *(_QWORD *)(v13 + 8);
              if (v15)
              {
                if (!*(_QWORD *)(v15 + 8))
                {
                  v16 = (_QWORD *)*((_QWORD *)v14 + 5);
                  if (v16 != (_QWORD *)((char *)v14 + 40))
                  {
                    v17 = v16 - 3;
                    if (!v16)
                      v17 = 0;
                    v18 = *((unsigned __int8 *)v17 + 16) - 40;
                    if (v18 < 0xFFFFFFF5)
                      v17 = 0;
                    if (v16)
                    {
                      v19 = *((_BYTE *)v17 + 16) == 30 && v18 >= 0xFFFFFFF5;
                      if (v19 && (*((_DWORD *)v17 + 5) & 0x7FFFFFF) == 1)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        ++v11;
        v10 += 32;
        if (v9 == v11)
          return 0;
      }
      llvm::JumpThreadingPass::unfoldSelectInstr(this, v14, (unint64_t)a3, (llvm::SelectInst *)v13, (llvm::PHINode *)v6, v11);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t llvm::JumpThreadingPass::simplifyPartiallyRedundantLoad(llvm::JumpThreadingPass *this, llvm::LoadInst *a2)
{
  llvm::BasicBlock *v4;
  uint64_t i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v12;
  llvm::UndefValue *AvailableLoadedValue;
  llvm::Type *v15;
  llvm::Instruction *v16;
  llvm::LoadInst *BitOrPointerCast;
  llvm::Value *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v26;
  char v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  char v35;
  llvm::UndefValue *AvailablePtrLoadStore;
  llvm::UndefValue *v37;
  uint64_t **v38;
  int v39;
  uint64_t SinglePredecessor;
  int v41;
  char v42;
  llvm::UndefValue *v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t j;
  uint64_t v52;
  int v53;
  llvm::Value *PersonalityFn;
  const llvm::Value *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  char *v65;
  llvm::Value *v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::LoadInst *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  unsigned __int8 **v98;
  unsigned __int8 *v99;
  llvm::MDNode *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  char v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  uint64_t *v114;
  _QWORD *v115;
  _QWORD *v116;
  llvm::Value *v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  llvm::Instruction *v122;
  unsigned __int8 *v123;
  _QWORD *v124;
  unsigned __int8 *v125;
  unsigned __int8 **v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  unint64_t v141;
  llvm::CastInst *v142;
  llvm::Value *v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v147;
  const llvm::Twine *v148;
  unsigned __int8 *v149;
  uint64_t ***v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  llvm::ValueSymbolTable *v154;
  const llvm::BasicBlock *v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  unsigned int v158;
  _BYTE *v159;
  _BYTE *v160;
  uint64_t v161;
  int v162;
  _BYTE v163[64];
  llvm::MDNode *v164[2];
  int64x2_t v165;
  char v166;
  uint64_t *v167;
  __int128 v168;
  __int128 v169;
  int64x2_t v170[4];
  void *v171;
  int v172[2];
  _BYTE v173[64];
  void *v174;
  uint64_t v175;
  _BYTE v176[64];
  __int128 __base;
  __int128 v178;
  __int128 v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)a2 + 9) & 0x301) != 0)
    return 0;
  v4 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (llvm::BasicBlock::getSinglePredecessor(v4))
    return 0;
  for (i = *((_QWORD *)v4 + 6); ; i = *(_QWORD *)(i + 8))
  {
    v6 = i - 24;
    if (!i)
      v6 = 0;
    if (*(_BYTE *)(v6 + 16) != 83)
      break;
  }
  v7 = *(unsigned __int8 *)(i - 8) - 38;
  if (v7 < 0x39 && ((0x100060000000001uLL >> v7) & 1) != 0)
    return 0;
  v8 = *((_QWORD *)a2 - 4);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8 && v9 >= 0x1C && v9 != 83 && *(_QWORD *)(v8 + 40) == (_QWORD)v4)
    return 0;
  v167 = (uint64_t *)((char *)a2 + 24);
  v166 = 0;
  AvailableLoadedValue = llvm::FindAvailableLoadedValue(a2, (uint64_t)v4, &v167, dword_1ED82E000, *((_QWORD *)this + 3), &v166, 0);
  if (AvailableLoadedValue)
  {
    BitOrPointerCast = AvailableLoadedValue;
    if (v166)
    {
      __base = xmmword_1C8674C34;
      v178 = unk_1C8674C44;
      v179 = xmmword_1C8674C54;
      llvm::combineMetadata((uint64_t)AvailableLoadedValue, a2, (unsigned int *)&__base, 12, 0);
    }
    if (BitOrPointerCast == a2)
      BitOrPointerCast = llvm::UndefValue::get(*(llvm::UndefValue **)a2, v15);
    v18 = *(llvm::Value **)a2;
    if (*(_QWORD *)BitOrPointerCast != *(_QWORD *)a2)
    {
      LOWORD(v179) = 257;
      BitOrPointerCast = (llvm::LoadInst *)llvm::CastInst::CreateBitOrPointerCast(BitOrPointerCast, v18, (llvm::Type *)&__base, a2, v16);
    }
    v12 = 1;
    llvm::Value::doRAUW(a2, BitOrPointerCast, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
    v19 = *((_QWORD *)a2 + 3);
    v20 = (_QWORD *)*((_QWORD *)a2 + 4);
    *v20 = v19;
    *(_QWORD *)(v19 + 8) = v20;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    llvm::Value::deleteValue(a2);
    return v12;
  }
  if (v167 != *((uint64_t **)v4 + 6))
    return 0;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v164);
  v159 = v163;
  v160 = v163;
  v161 = 8;
  v162 = 0;
  *(_QWORD *)&__base = &v178;
  *((_QWORD *)&__base + 1) = 0x800000000;
  v174 = v176;
  v175 = 0x800000000;
  v21 = *((_QWORD *)v4 + 1);
  if (!v21)
    goto LABEL_100;
  while (1)
  {
    v22 = *(_QWORD *)(v21 + 24);
    v23 = *(unsigned __int8 *)(v22 + 16);
    v24 = v22 && v23 >= 0x1C;
    if (v24 && v23 - 29 < 0xB)
      break;
    v21 = *(_QWORD *)(v21 + 8);
    if (!v21)
      goto LABEL_100;
  }
  v155 = 0;
LABEL_42:
  v26 = *(uint64_t **)(v22 + 40);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v159, (uint64_t)v26);
  if (!v27)
    goto LABEL_61;
  v167 = v26 + 5;
  v158 = 0;
  v28 = *(llvm::Type **)a2;
  v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272;
  v30 = llvm::Value::DoPHITranslation(v8, v4, (const llvm::BasicBlock *)v26);
  sub_1C4768AD0(v29, (uint64_t)v28);
  v32 = (unint64_t)(v31 + 7) >> 3;
  if (v33 == 1)
    v32 = -2;
  *(_QWORD *)&v168 = v30;
  *((_QWORD *)&v168 + 1) = v32;
  v169 = *(_OWORD *)v164;
  v170[0] = v165;
  v34 = *((unsigned __int8 *)a2 + 16);
  if (v34 == 60 || v34 == 61)
    v35 = (*((_WORD *)a2 + 9) & 0x380) != 0;
  else
    v35 = (v34 - 63) <= 2;
  AvailablePtrLoadStore = llvm::findAvailablePtrLoadStore((uint64_t)&v168, v28, v35, (uint64_t)v26, &v167, dword_1ED82E000, *((_QWORD *)this + 3), &v166, &v158);
  v37 = AvailablePtrLoadStore;
  v171 = AvailablePtrLoadStore;
  if (!v26 || AvailablePtrLoadStore)
  {
    if (!AvailablePtrLoadStore)
    {
LABEL_60:
      v155 = (const llvm::BasicBlock *)v26;
      goto LABEL_61;
    }
  }
  else
  {
    v38 = (uint64_t **)v26;
    do
    {
      if (v167 != v38[6])
        goto LABEL_60;
      v39 = dword_1ED82E000 - v158;
      if (dword_1ED82E000 <= v158)
        goto LABEL_60;
      SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v38);
      if (!SinglePredecessor)
        goto LABEL_60;
      v38 = (uint64_t **)SinglePredecessor;
      v167 = (uint64_t *)(SinglePredecessor + 40);
      v41 = *((unsigned __int8 *)a2 + 16);
      if (v41 == 60 || v41 == 61)
        v42 = (*((_WORD *)a2 + 9) & 0x380) != 0;
      else
        v42 = (v41 - 63) <= 2;
      v43 = llvm::findAvailablePtrLoadStore((uint64_t)&v168, v28, v42, SinglePredecessor, &v167, v39, *((_QWORD *)this + 3), &v166, &v158);
    }
    while (!v43);
    v37 = v43;
    v171 = v43;
  }
  if (v166)
  {
    v47 = v175;
    if (v175 >= (unint64_t)HIDWORD(v175))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v174, (uint64_t)v176, v175 + 1, 8);
      v47 = v175;
    }
    *((_QWORD *)v174 + v47) = v37;
    LODWORD(v175) = v175 + 1;
  }
  sub_1C61B1608((uint64_t)&__base, (uint64_t)v26, (uint64_t *)&v171);
LABEL_61:
  while (1)
  {
    v21 = *(_QWORD *)(v21 + 8);
    if (!v21)
      break;
    v22 = *(_QWORD *)(v21 + 24);
    v44 = *(unsigned __int8 *)(v22 + 16);
    if (v22)
      v45 = v44 >= 0x1C;
    else
      v45 = 0;
    if (v45 && v44 - 29 < 0xB)
      goto LABEL_42;
  }
  if (DWORD2(__base))
  {
    if (DWORD2(__base) != HIDWORD(v161) - v162
      && (llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0) & 1) == 0)
    {
      for (j = *((_QWORD *)v4 + 6); ; j = *(_QWORD *)(j + 8))
      {
        v52 = j ? j - 24 : 0;
        if ((llvm::LoadInst *)v52 == a2)
          break;
        v12 = 0;
        v53 = *(unsigned __int8 *)(v52 + 16);
        if (v53 == 29 || v53 == 35)
          goto LABEL_101;
        if (v53 == 80)
        {
          PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v52 + 40)
                                                                                             + 56));
          if (llvm::classifyEHPersonality(PersonalityFn, v55) != 10)
            goto LABEL_100;
        }
        else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v52) & 1) != 0
               || (llvm::Instruction::willReturn((llvm::Instruction *)v52) & 1) == 0)
        {
          goto LABEL_100;
        }
      }
    }
    v48 = (HIDWORD(v161) - v162);
    if (DWORD2(__base) + 1 == v48)
    {
      v49 = (_QWORD *)*((_QWORD *)v155 + 5);
      if (v49 == (_QWORD *)((char *)v155 + 40))
      {
        v50 = 0;
      }
      else
      {
        if (v49)
          v50 = v49 - 3;
        else
          v50 = 0;
        if (*((unsigned __int8 *)v50 + 16) - 29 >= 0xB)
          v50 = 0;
      }
      v56 = *((unsigned __int8 *)v50 + 16);
      if (v56 != 30)
        __asm { BR              X13 }
      if ((*((_DWORD *)v50 + 5) & 0x7FFFFFF) != 3)
        goto LABEL_129;
    }
    if (DWORD2(__base) == (_DWORD)v48)
    {
LABEL_189:
      if (DWORD2(__base) >= 2)
        qsort((void *)__base, DWORD2(__base), 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C6318F74);
      v101 = *((_QWORD *)v4 + 1);
      if (v101)
      {
        while (1)
        {
          v102 = *(_QWORD *)(v101 + 24);
          v103 = *(unsigned __int8 *)(v102 + 16);
          v104 = v102 && v103 >= 0x1C;
          if (v104 && v103 - 29 < 0xB)
            break;
          v101 = *(_QWORD *)(v101 + 8);
          if (!v101)
            goto LABEL_201;
        }
        v107 = 0;
        v108 = *(_QWORD *)a2;
        v109 = v101;
LABEL_202:
        ++v107;
        while (1)
        {
          v109 = *(_QWORD *)(v109 + 8);
          if (!v109)
            break;
          v110 = *(_QWORD *)(v109 + 24);
          v111 = *(unsigned __int8 *)(v110 + 16);
          if (v110)
            v112 = v111 >= 0x1C;
          else
            v112 = 0;
          if (v112 && v111 - 29 < 0xB)
            goto LABEL_202;
        }
        v106 = 0;
      }
      else
      {
LABEL_201:
        v101 = 0;
        v107 = 0;
        v108 = *(_QWORD *)a2;
        v106 = 1;
      }
      v170[0].i16[0] = 257;
      v114 = (uint64_t *)*((_QWORD *)v4 + 6);
      v115 = operator new(0x48uLL);
      v116 = v115;
      v115[1] = v108;
      v117 = (llvm::Value *)(v115 + 1);
      *v115 = 0;
      v115[2] = 0;
      v115[3] = 0x4000000000000053;
      *((_OWORD *)v115 + 2) = 0u;
      v118 = (char *)(v115 + 4);
      *((_OWORD *)v115 + 3) = 0u;
      *((_DWORD *)v115 + 16) = 0;
      if (v114)
      {
        v151 = v114[2];
        v115[6] = v151;
        *(_WORD *)(v151 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v115 + 31) & 0x10) != 0)
        {
          v153 = *(_QWORD *)(v151 + 56);
          if (v153)
          {
            v154 = *(llvm::ValueSymbolTable **)(v153 + 104);
            if (v154)
              llvm::ValueSymbolTable::reinsertValue(v154, v117);
          }
        }
        v152 = *v114;
        v116[4] = *v114;
        v116[5] = v114;
        *(_QWORD *)(v152 + 8) = v118;
        *v114 = (uint64_t)v118;
      }
      *((_DWORD *)v116 + 17) = v107;
      llvm::Value::setName((uint64_t ***)v117, (uint64_t)&v168);
      v119 = *((unsigned int *)v116 + 17);
      v120 = operator new(40 * v119);
      *v116 = v120;
      if ((_DWORD)v119)
      {
        v121 = &v120[4 * v119];
        do
        {
          *v120 = 0;
          v120[1] = 0;
          v120[2] = 0;
          v120[3] = v117;
          v120 += 4;
        }
        while (v120 != v121);
      }
      llvm::Value::takeName(v117, a2);
      v123 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
      v156 = v123;
      v124 = (_QWORD *)((char *)a2 + 24);
      if (v123)
        llvm::MetadataTracking::track((uint64_t)&v156, v123, 2);
      v127 = (unsigned __int8 *)v116[7];
      v126 = (unsigned __int8 **)(v116 + 7);
      v125 = v127;
      if (v127)
        llvm::MetadataTracking::untrack((uint64_t)v126, v125);
      v128 = v156;
      *v126 = v156;
      if (v128)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v156, v128, (uint64_t)v126);
        v156 = 0;
      }
      if ((v106 & 1) == 0)
      {
        v134 = *(_QWORD *)(v101 + 24);
LABEL_229:
        v135 = *(_QWORD *)(v134 + 40);
        v136 = (uint64_t *)__base;
        v137 = DWORD2(__base);
        while (v137)
        {
          v138 = v137 >> 1;
          v139 = &v136[2 * (v137 >> 1)];
          v141 = *v139;
          v140 = v139 + 2;
          v137 += ~(v137 >> 1);
          if (v141 < v135)
            v136 = v140;
          else
            v137 = v138;
        }
        v142 = (llvm::CastInst *)v136[1];
        v143 = *(llvm::Value **)a2;
        if (*(_QWORD *)v142 != *(_QWORD *)a2)
        {
          v170[0].i16[0] = 257;
          v147 = *(_QWORD *)(v135 + 40);
          if (v147 == v135 + 40)
          {
            v148 = 0;
          }
          else
          {
            v149 = (unsigned __int8 *)(v147 - 24);
            if (!v147)
              v149 = 0;
            if (v149[16] - 29 >= 0xB)
              v148 = 0;
            else
              v148 = (const llvm::Twine *)v149;
          }
          v150 = llvm::CastInst::CreateBitOrPointerCast(v142, v143, (llvm::Type *)&v168, v148, v122);
          v136[1] = (uint64_t)v150;
          v142 = (llvm::CastInst *)v150;
          v124 = (_QWORD *)((char *)a2 + 24);
        }
        sub_1C477667C(v117, (uint64_t)v142, *v136);
        while (1)
        {
          v101 = *(_QWORD *)(v101 + 8);
          if (!v101)
            break;
          v134 = *(_QWORD *)(v101 + 24);
          v144 = *(unsigned __int8 *)(v134 + 16);
          if (v134)
            v145 = v144 >= 0x1C;
          else
            v145 = 0;
          if (v145 && v144 - 29 < 0xB)
            goto LABEL_229;
        }
      }
      if ((_DWORD)v175)
      {
        v129 = (uint64_t *)v174;
        v130 = 8 * v175;
        do
        {
          v131 = *v129++;
          v168 = xmmword_1C8674C34;
          v169 = unk_1C8674C44;
          v170[0] = (int64x2_t)xmmword_1C8674C54;
          llvm::combineMetadata(v131, a2, (unsigned int *)&v168, 12, 1);
          v130 -= 8;
        }
        while (v130);
      }
      v12 = 1;
      llvm::Value::doRAUW(a2, v117, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
      v132 = *((_QWORD *)a2 + 3);
      v133 = (_QWORD *)*((_QWORD *)a2 + 4);
      *v133 = v132;
      *(_QWORD *)(v132 + 8) = v133;
      *v124 = 0;
      v124[1] = 0;
      llvm::Value::deleteValue(a2);
      goto LABEL_101;
    }
    v171 = v173;
    *(_QWORD *)v172 = 0x800000000;
    *(_QWORD *)&v168 = v170;
    *((_QWORD *)&v168 + 1) = v170;
    *(_QWORD *)&v169 = 8;
    DWORD2(v169) = 0;
    if (DWORD2(__base))
    {
      v57 = (uint64_t *)__base;
      v58 = 16 * DWORD2(__base);
      do
      {
        v59 = *v57;
        v57 += 2;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v168, v59);
        v58 -= 16;
      }
      while (v58);
    }
    v60 = *((_QWORD *)v4 + 1);
    if (!v60)
    {
LABEL_124:
      v155 = (const llvm::BasicBlock *)llvm::JumpThreadingPass::splitBlockPreds((uint64_t)this, (uint64_t)v4, (uint64_t *)v171, v172[0], "thread-pre-split");
      if (*((_QWORD *)&v168 + 1) != (_QWORD)v168)
        free(*((void **)&v168 + 1));
      if (v171 != v173)
        free(v171);
      if (!v155)
        goto LABEL_189;
LABEL_129:
      v65 = (char *)operator new(0x60uLL);
      v66 = (llvm::Value *)(v65 + 32);
      *((_DWORD *)v65 + 13) = *((_DWORD *)v65 + 13) & 0x38000000 | 1;
      *(_QWORD *)v65 = 0;
      *((_QWORD *)v65 + 1) = 0;
      *((_QWORD *)v65 + 2) = 0;
      *((_QWORD *)v65 + 3) = v65 + 32;
      v67 = *(uint64_t ***)a2;
      v68 = llvm::Value::DoPHITranslation(v8, v4, v155);
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v89 = 0;
        v88 = &byte_1C871356D;
LABEL_161:
        v170[0].i16[0] = 773;
        *(_QWORD *)&v168 = v88;
        *((_QWORD *)&v168 + 1) = v89;
        *(_QWORD *)&v169 = ".pr";
        v91 = *((unsigned __int16 *)a2 + 9);
        v92 = (v91 >> 1) & 0x3F;
        v93 = (v91 >> 7) & 7;
        v94 = (_QWORD *)*((_QWORD *)v155 + 5);
        if (v94 == (_QWORD *)((char *)v155 + 40))
        {
          v95 = 0;
        }
        else
        {
          if (v94)
            v95 = (uint64_t)(v94 - 3);
          else
            v95 = 0;
          if (*(unsigned __int8 *)(v95 + 16) - 29 >= 0xB)
            v95 = 0;
        }
        llvm::LoadInst::LoadInst((uint64_t)v66, (uint64_t)v67, v68, (uint64_t)&v168, 0, v92, v93, *((_BYTE *)a2 + 60), v95);
        *(_QWORD *)&v168 = v65 + 32;
        v96 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
        v157 = v96;
        if (v96)
          llvm::MetadataTracking::track((uint64_t)&v157, v96, 2);
        v98 = (unsigned __int8 **)(v65 + 80);
        v97 = (unsigned __int8 *)*((_QWORD *)v65 + 10);
        if (v97)
          llvm::MetadataTracking::untrack((uint64_t)(v65 + 80), v97);
        v99 = v157;
        *v98 = v157;
        if (v99)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v157, v99, (uint64_t)(v65 + 80));
          v157 = 0;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)v164), (int32x4_t)vceqzq_s64(v165))))) & 1) == 0)goto LABEL_188;
        if (v164[0] || *v98 || (v65[55] & 0x20) != 0)
        {
          llvm::Value::setMetadata(v66, 1, v164[0]);
          v100 = v164[1];
          if (v164[1])
          {
LABEL_179:
            llvm::Value::setMetadata(v66, 5, v100);
LABEL_180:
            if (v165.i64[0] || *v98 || (v65[55] & 0x20) != 0)
              llvm::Value::setMetadata(v66, 7, (llvm::MDNode *)v165.i64[0]);
            if (v165.i64[1] || *v98 || (v65[55] & 0x20) != 0)
              llvm::Value::setMetadata(v66, 8, (llvm::MDNode *)v165.i64[1]);
LABEL_188:
            sub_1C61B1608((uint64_t)&__base, (uint64_t)v155, (uint64_t *)&v168);
            goto LABEL_189;
          }
        }
        else
        {
          v100 = v164[1];
          if (v164[1])
            goto LABEL_179;
        }
        if (!*v98 && (v65[55] & 0x20) == 0)
          goto LABEL_180;
        goto LABEL_179;
      }
      v69 = **v67;
      v70 = *(_QWORD *)(v69 + 152);
      v71 = *(unsigned int *)(v69 + 168);
      if ((_DWORD)v71)
      {
        LODWORD(v72) = (v71 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v73 = v70 + 16 * v72;
        v74 = *(llvm::LoadInst **)v73;
        if (*(llvm::LoadInst **)v73 == a2)
        {
LABEL_160:
          v87 = *(_QWORD **)(v73 + 8);
          v90 = *v87;
          v88 = (char *)(v87 + 2);
          v89 = v90;
          goto LABEL_161;
        }
        v75 = 1;
        while (v74 != (llvm::LoadInst *)-4096)
        {
          v76 = v72 + v75++;
          v72 = v76 & (v71 - 1);
          v74 = *(llvm::LoadInst **)(v70 + 16 * v72);
          if (v74 == a2)
          {
            v73 = v70 + 16 * v72;
            goto LABEL_160;
          }
        }
      }
      v73 = v70 + 16 * v71;
      goto LABEL_160;
    }
    while (1)
    {
      v61 = *(_QWORD *)(v60 + 24);
      v62 = *(unsigned __int8 *)(v61 + 16);
      v63 = v61 && v62 >= 0x1C;
      if (v63 && v62 - 29 <= 0xA)
        break;
      v60 = *(_QWORD *)(v60 + 8);
      if (!v60)
        goto LABEL_124;
    }
LABEL_136:
    v77 = *(_QWORD *)(v61 + 40);
    v78 = *(_QWORD *)(v77 + 40);
    if (v78)
      v79 = v78 - 24;
    else
      v79 = 0;
    if (*(unsigned __int8 *)(v79 + 16) - 29 >= 0xB)
      v79 = 0;
    v80 = *(unsigned __int8 *)(v79 + 16);
    if (v80 != 32 && v80 != 39)
    {
      v81 = sub_1C477672C((uint64_t)&v168, v77);
      if (*((_QWORD *)&v168 + 1) == (_QWORD)v168)
        v82 = (unsigned int *)&v169 + 1;
      else
        v82 = (unsigned int *)&v169;
      if (v81 == (_QWORD *)(*((_QWORD *)&v168 + 1) + 8 * *v82))
      {
        v83 = v172[0];
        if (v172[0] >= (unint64_t)v172[1])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v171, (uint64_t)v173, v172[0] + 1, 8);
          v83 = v172[0];
        }
        *((_QWORD *)v171 + v83) = v77;
        ++v172[0];
      }
      while (1)
      {
        v60 = *(_QWORD *)(v60 + 8);
        if (!v60)
          goto LABEL_124;
        v61 = *(_QWORD *)(v60 + 24);
        v84 = *(unsigned __int8 *)(v61 + 16);
        if (v61)
          v85 = v84 >= 0x1C;
        else
          v85 = 0;
        if (v85 && v84 - 29 < 0xB)
          goto LABEL_136;
      }
    }
    if (*((_QWORD *)&v168 + 1) != (_QWORD)v168)
      free(*((void **)&v168 + 1));
    if (v171 != v173)
      free(v171);
    v12 = 0;
  }
  else
  {
LABEL_100:
    v12 = 0;
  }
LABEL_101:
  if (v174 != v176)
    free(v174);
  if ((__int128 *)__base != &v178)
    free((void *)__base);
  if (v160 != v159)
    free(v160);
  return v12;
}

void sub_1C5B3EFE8()
{
  JUMPOUT(0x1C5B3EF10);
}

void sub_1C5B3EFF8()
{
  JUMPOUT(0x1C5B3EF10);
}

void sub_1C5B3F004()
{
  JUMPOUT(0x1C5B3EF10);
}

uint64_t llvm::JumpThreadingPass::processBranchOnPHI(llvm::JumpThreadingPass *this, llvm::PHINode *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  llvm::PHINode *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  void *v17[2];
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 5);
  v17[0] = v18;
  v17[1] = (void *)0x100000000;
  sub_1C4DFC134((uint64_t)v17, 1uLL);
  v5 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    while (1)
    {
      v8 = *((_DWORD *)a2 + 5);
      v9 = (v8 & 0x40000000) != 0
         ? (llvm::PHINode *)*((_QWORD *)a2 - 1)
         : (llvm::PHINode *)((char *)a2 - 32 * (v8 & 0x7FFFFFF));
      v10 = *(_QWORD *)((char *)v9 + 32 * *((unsigned int *)a2 + 15) + v6);
      v11 = *(_QWORD *)(v10 + 40);
      if (v11 != v10 + 40)
      {
        v12 = v11 - 24;
        if (!v11)
          v12 = 0;
        v13 = *(unsigned __int8 *)(v12 + 16) - 40;
        if (v13 < 0xFFFFFFF5)
          v12 = 0;
        if (v11)
        {
          if (*(_BYTE *)(v12 + 16) == 30 && v13 >= 0xFFFFFFF5 && (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 1)
          {
            *(_QWORD *)v17[0] = v10;
            if ((llvm::JumpThreadingPass::duplicateCondBranchOnPHIIntoPred((uint64_t)this, v4, (uint64_t **)v17) & 1) != 0)
              break;
          }
        }
      }
      v6 += 8;
      if (v7 == v6)
        goto LABEL_20;
    }
    v15 = 1;
  }
  else
  {
LABEL_20:
    v15 = 0;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v15;
}

uint64_t llvm::JumpThreadingPass::processBranchOnXOR(llvm::JumpThreadingPass *this, llvm::BinaryOperator *a2)
{
  llvm::Value *v3;
  char *v4;
  llvm::BasicBlock *v5;
  _QWORD **v6;
  _QWORD **v7;
  _QWORD **v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Type *v13;
  const llvm::APInt *v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::APInt *v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  llvm::ValueHandleBase *v26;
  llvm::ConstantInt *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  llvm::ConstantInt *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD **v41;
  llvm::APInt *v42;
  unsigned int v43;
  _BOOL8 v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char **v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  llvm::UndefValue *v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[64];
  void *v64;
  uint64_t v65;
  _QWORD v66[18];

  v66[16] = *MEMORY[0x1E0C80C00];
  v4 = (char *)a2 - 64;
  v3 = (llvm::Value *)*((_QWORD *)a2 - 8);
  if (*((_BYTE *)v3 + 16) == 16 || *(_BYTE *)(*((_QWORD *)a2 - 4) + 16) == 16)
    return 0;
  v5 = (llvm::BasicBlock *)*((_QWORD *)v4 + 13);
  v6 = (_QWORD **)*((_QWORD *)v5 + 6);
  v7 = v6 - 3;
  if (!v6)
    v7 = 0;
  if (*((_BYTE *)v7 + 16) != 83)
    return 0;
  do
  {
    v6 = (_QWORD **)v6[1];
    v9 = v6 - 3;
    if (!v6)
      v9 = 0;
  }
  while (*((_BYTE *)v9 + 16) == 83);
  v10 = *((unsigned __int8 *)v6 - 8) - 38;
  if (v10 < 0x39 && ((0x100060000000001uLL >> v10) & 1) != 0)
    return 0;
  v64 = v66;
  v65 = 0x800000000;
  v15 = sub_1C6318460((uint64_t)this, v3, v5, (uint64_t)&v64, 0, a2);
  if (v15 || (v11 = 0, sub_1C6318460((uint64_t)this, *((llvm::Value **)a2 - 4), v5, (uint64_t)&v64, 0, a2)))
  {
    if ((_DWORD)v65)
    {
      v16 = 0;
      v17 = 0;
      v18 = (char *)v64;
      v19 = 16 * v65;
      do
      {
        v20 = *(_QWORD *)v18;
        if (*(unsigned __int8 *)(*(_QWORD *)v18 + 16) - 11 >= 2)
        {
          v21 = (llvm::APInt *)(v20 + 24);
          v22 = *(_DWORD *)(v20 + 32);
          if (v22 > 0x40)
            v23 = llvm::APInt::countLeadingZerosSlowCase(v21) == v22;
          else
            v23 = *(_QWORD *)v21 == 0;
          v24 = v23;
          v17 += v24;
          v16 += v24 ^ 1;
        }
        v18 += 16;
        v19 -= 16;
      }
      while (v19);
      if (v16 > v17)
      {
        v25 = ***(_QWORD ***)v5;
        v26 = *(llvm::ValueHandleBase **)(v25 + 1560);
        if (!v26)
        {
          v27 = *(llvm::ConstantInt **)(v25 + 1888);
          v28 = ***(_QWORD ***)v5;
          v29 = *(unsigned int *)(v25 + 1896);
          LODWORD(v62) = v29 >> 8;
          if (v29 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v61, 1, 0);
          }
          else
          {
            if (v29 <= 0xFF)
              v30 = 0;
            else
              v30 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v29);
            v61 = (void *)(v30 & 1);
          }
          v26 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v61, v14);
          if (v62 >= 0x41 && v61)
            MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
          *(_QWORD *)(v28 + 1560) = v26;
        }
        goto LABEL_42;
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    if (v17 | v16)
    {
      v31 = **(uint64_t ***)v5;
      v32 = *v31;
      v26 = *(llvm::ValueHandleBase **)(*v31 + 1568);
      if (!v26)
      {
        v33 = *(llvm::ConstantInt **)(v32 + 1888);
        LODWORD(v62) = *(_DWORD *)(v32 + 1896) >> 8;
        if (v62 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v61, 0, 0);
        else
          v61 = 0;
        v26 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v61, v14);
        if (v62 >= 0x41 && v61)
          MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        *(_QWORD *)(v32 + 1568) = v26;
      }
    }
    else
    {
      v26 = 0;
    }
LABEL_42:
    v61 = v63;
    v62 = 0x800000000;
    if ((_DWORD)v65)
    {
      v34 = 0;
      v35 = 16 * v65;
      v36 = (uint64_t *)((char *)v64 + 8);
      do
      {
        v37 = (unsigned __int8 *)*(v36 - 1);
        if (v37 == (unsigned __int8 *)v26 || v37[16] - 11 <= 1)
        {
          v38 = *v36;
          if (v34 >= HIDWORD(v62))
          {
            v39 = v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v34 + 1, 8);
            v35 = v39;
            v34 = v62;
          }
          *((_QWORD *)v61 + v34) = v38;
          v34 = v62 + 1;
          LODWORD(v62) = v62 + 1;
        }
        v36 += 2;
        v35 -= 16;
      }
      while (v35);
    }
    else
    {
      v34 = 0;
    }
    v40 = (_QWORD **)*((_QWORD *)v5 + 6);
    if (v40)
      v41 = v40 - 3;
    else
      v41 = 0;
    if (v34 != (*((_DWORD *)v41 + 5) & 0x7FFFFFF))
    {
      if (v34)
      {
        v52 = v34;
        v53 = (char *)v61;
        v54 = 8 * v52;
        while (1)
        {
          v55 = *(_QWORD *)(*(_QWORD *)v53 + 40);
          if (v55)
            v56 = v55 - 24;
          else
            v56 = 0;
          if (*(unsigned __int8 *)(v56 + 16) - 29 >= 0xB)
            v56 = 0;
          v57 = *(unsigned __int8 *)(v56 + 16);
          if (v57 == 32 || v57 == 39)
            break;
          v53 += 8;
          v54 -= 8;
          if (!v54)
            goto LABEL_75;
        }
        v11 = 0;
      }
      else
      {
LABEL_75:
        v11 = llvm::JumpThreadingPass::duplicateCondBranchOnPHIIntoPred((uint64_t)this, (unint64_t)v5, (uint64_t **)&v61);
      }
      goto LABEL_81;
    }
    if (v26)
    {
      v42 = (llvm::ValueHandleBase *)((char *)v26 + 24);
      v43 = *((_DWORD *)v26 + 8);
      if (v43 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v42) != v43)
        {
LABEL_59:
          v44 = !v15;
          v45 = &v4[32 * v44];
          v46 = v45;
          if (*(_QWORD *)v45)
          {
            **((_QWORD **)v45 + 2) = *((_QWORD *)v45 + 1);
            v47 = *((_QWORD *)v45 + 1);
            if (v47)
              *(_QWORD *)(v47 + 16) = *((_QWORD *)v45 + 2);
          }
          *(_QWORD *)v45 = v26;
          v50 = *((_QWORD *)v26 + 1);
          v49 = (char **)((char *)v26 + 8);
          v48 = v50;
          *((_QWORD *)v45 + 1) = v50;
          v51 = v45 + 8;
          if (v50)
            *(_QWORD *)(v48 + 16) = v51;
          *(_QWORD *)&v4[32 * v44 + 16] = v49;
          *v49 = v46;
          v11 = 1;
          goto LABEL_81;
        }
      }
      else if (*(_QWORD *)v42)
      {
        goto LABEL_59;
      }
      v58 = *(llvm::UndefValue **)&v4[32 * v15];
    }
    else
    {
      v58 = llvm::UndefValue::get(*(llvm::UndefValue **)a2, v13);
    }
    v11 = 1;
    llvm::Value::doRAUW(a2, v58, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
    v59 = *((_QWORD *)a2 + 3);
    v60 = (_QWORD *)*((_QWORD *)a2 + 4);
    *v60 = v59;
    *(_QWORD *)(v59 + 8) = v60;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    llvm::Value::deleteValue(a2);
LABEL_81:
    if (v61 != v63)
      free(v61);
  }
  if (v64 != v66)
    free(v64);
  return v11;
}

uint64_t llvm::JumpThreadingPass::processImpliedCondition(llvm::JumpThreadingPass *this, llvm::BasicBlock *a2)
{
  llvm::BasicBlock *v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  char *v6;
  const llvm::Value *v10;
  uint64_t SinglePredecessor;
  llvm::BasicBlock *v12;
  const llvm::Value *v13;
  int v14;
  llvm::BasicBlock *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  llvm::BasicBlock *v20;
  unsigned __int16 isImpliedCondition;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::BasicBlock *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::ValueSymbolTable *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50[3];

  v50[2] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v2 == (llvm::BasicBlock *)((char *)a2 + 40))
    return 0;
  v3 = 0;
  if (v2)
    v4 = (char *)v2 - 24;
  else
    v4 = 0;
  v5 = v4[16] - 40;
  if (v5 >= 0xFFFFFFF5)
    v6 = v4;
  else
    v6 = 0;
  if (v2)
  {
    if (v6[16] == 30 && v5 >= 0xFFFFFFF5)
    {
      if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
      {
        v10 = (const llvm::Value *)*((_QWORD *)v6 - 12);
        SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(a2);
        if (SinglePredecessor)
        {
          v12 = (llvm::BasicBlock *)SinglePredecessor;
          v13 = (const llvm::Value *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 40) + 272);
          v14 = -1;
          v15 = a2;
          while (++v14 < dword_1ED81DE60)
          {
            v16 = (_QWORD *)*((_QWORD *)v12 + 5);
            if (v16 == (_QWORD *)((char *)v12 + 40))
              break;
            v3 = 0;
            v17 = v16 - 3;
            if (!v16)
              v17 = 0;
            v18 = *((unsigned __int8 *)v17 + 16) - 40;
            if (v18 < 0xFFFFFFF5)
              v17 = 0;
            if (!v16)
              return v3;
            if (*((_BYTE *)v17 + 16) != 30 || v18 < 0xFFFFFFF5)
              return v3;
            if ((*((_DWORD *)v17 + 5) & 0x7FFFFFF) != 3)
              return 0;
            v20 = (llvm::BasicBlock *)*(v17 - 4);
            if (v20 != v15 && (llvm::BasicBlock *)*(v17 - 8) != v15)
              return 0;
            isImpliedCondition = llvm::isImpliedCondition((llvm *)*(v17 - 12), v10, v13, (const llvm::DataLayout *)(v20 == v15), 0);
            if (isImpliedCondition >= 0x100u)
            {
              v24 = v6 - 32;
              if ((_BYTE)isImpliedCondition)
                v25 = 0;
              else
                v25 = -1;
              v26 = *(_QWORD *)&v24[32 * v25];
              v27 = *(llvm::BasicBlock **)&v24[-32 * isImpliedCondition];
              llvm::BasicBlock::removePredecessor(v27, a2, 0);
              v28 = (char *)operator new(0x60uLL);
              *((_DWORD *)v28 + 13) = *((_DWORD *)v28 + 13) & 0x38000000 | 1;
              *((_QWORD *)v28 + 1) = 0;
              *((_QWORD *)v28 + 2) = 0;
              *(_QWORD *)v28 = 0;
              *((_QWORD *)v28 + 4) = ***(_QWORD ***)v26 + 1576;
              *((_QWORD *)v28 + 3) = v28 + 32;
              *((_QWORD *)v28 + 5) = 0;
              v28[48] = 30;
              v28[49] = 0;
              *((_WORD *)v28 + 25) = 0;
              *((_DWORD *)v28 + 13) = 1;
              *(_OWORD *)(v28 + 56) = 0u;
              v29 = v28 + 56;
              *(_OWORD *)(v28 + 72) = 0u;
              *((_DWORD *)v28 + 22) = 0;
              v30 = *((_QWORD *)v6 + 5);
              v31 = (uint64_t *)(v6 + 24);
              *((_QWORD *)v28 + 9) = v30;
              *(_WORD *)(v30 + 18) &= ~0x8000u;
              if ((v28[55] & 0x10) != 0
                && (v44 = *(_QWORD *)(v30 + 56)) != 0
                && (v45 = *(llvm::ValueSymbolTable **)(v44 + 104)) != 0)
              {
                llvm::ValueSymbolTable::reinsertValue(v45, (llvm::Value *)(v28 + 32));
                v46 = *(_QWORD *)v28;
                v47 = *v31;
                *((_QWORD *)v28 + 7) = *v31;
                *((_QWORD *)v28 + 8) = v31;
                *(_QWORD *)(v47 + 8) = v29;
                *v31 = (uint64_t)v29;
                if (v46)
                {
                  **((_QWORD **)v28 + 2) = *((_QWORD *)v28 + 1);
                  v48 = *((_QWORD *)v28 + 1);
                  if (v48)
                    *(_QWORD *)(v48 + 16) = *((_QWORD *)v28 + 2);
                }
              }
              else
              {
                v32 = *v31;
                *((_QWORD *)v28 + 7) = *v31;
                *((_QWORD *)v28 + 8) = v31;
                *(_QWORD *)(v32 + 8) = v29;
                *v31 = (uint64_t)v29;
              }
              *(_QWORD *)v28 = v26;
              v35 = *(_QWORD *)(v26 + 8);
              v34 = (_QWORD *)(v26 + 8);
              v33 = v35;
              *((_QWORD *)v28 + 1) = v35;
              if (v35)
                *(_QWORD *)(v33 + 16) = v28 + 8;
              *((_QWORD *)v28 + 2) = v34;
              *v34 = v28;
              v36 = (unsigned __int8 *)*((_QWORD *)v6 + 6);
              v49 = v36;
              if (v36)
                llvm::MetadataTracking::track((uint64_t)&v49, v36, 2);
              v39 = (unsigned __int8 *)*((_QWORD *)v28 + 10);
              v38 = (unsigned __int8 **)(v28 + 80);
              v37 = v39;
              if (v39)
                llvm::MetadataTracking::untrack((uint64_t)v38, v37);
              v40 = v49;
              *v38 = v49;
              if (v40)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v49, v40, (uint64_t)v38);
                v49 = 0;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v6 + 5) + 40, (uint64_t ***)v6);
              v41 = *((_QWORD *)v6 + 3);
              v42 = (_QWORD *)*((_QWORD *)v6 + 4);
              *v42 = v41;
              *(_QWORD *)(v41 + 8) = v42;
              *v31 = 0;
              *((_QWORD *)v6 + 4) = 0;
              llvm::Value::deleteValue((llvm::Value *)v6);
              v43 = (_QWORD *)*((_QWORD *)this + 4);
              v50[0] = (uint64_t)a2;
              v50[1] = (unint64_t)v27 | 4;
              v3 = 1;
              llvm::DomTreeUpdater::applyUpdatesPermissive(v43, v50, 1);
              if (*((_BYTE *)this + 56))
              {
                llvm::BranchProbabilityInfo::eraseBlock(*((_QWORD *)this + 6), a2);
                return 1;
              }
              return v3;
            }
            v22 = llvm::BasicBlock::getSinglePredecessor(v12);
            v3 = 0;
            v15 = v12;
            v12 = (llvm::BasicBlock *)v22;
            if (!v22)
              return v3;
          }
        }
      }
      return 0;
    }
  }
  return v3;
}

uint64_t llvm::JumpThreadingPass::splitBlockPreds(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *__s)
{
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t BlockFreq;
  std::string::size_type v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  std::string::size_type v21;
  std::string *p_dst;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  char *v29;
  void **v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v75;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  std::string __dst;
  void *__p[2];
  char *v83;
  _QWORD v84[2];
  int v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x1E0C80C00];
  v86 = v88;
  v87 = 0x200000000;
  v84[0] = 0;
  v84[1] = 0;
  v85 = 0;
  if (*(_BYTE *)(a1 + 56))
    v10 = a4 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = 8 * a4;
    v12 = a3;
    do
    {
      v13 = *v12++;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(a1 + 40), v13);
      LODWORD(__p[0]) = llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(a1 + 48), v13, a2);
      v15 = llvm::BranchProbability::scale((llvm::BranchProbability *)__p, BlockFreq);
      __dst.__r_.__value_.__r.__words[0] = v13;
      __dst.__r_.__value_.__l.__size_ = v15;
      sub_1C62C4BF8((uint64_t)__p, (uint64_t)v84, &__dst, (uint64_t *)&__dst.__r_.__value_.__l.__size_);
      v11 -= 8;
    }
    while (v11);
  }
  v16 = (uint64_t *)(a2 + 48);
  do
  {
    v17 = *v16;
    v18 = v17 - 24;
    if (!v17)
      v18 = 0;
    v19 = *(unsigned __int8 *)(v18 + 16);
    v16 = (uint64_t *)(v17 + 8);
  }
  while (v19 == 83);
  if (v19 == 94)
  {
    v20 = strlen(__s);
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
LABEL_127:
      abort();
    v21 = v20;
    if (v20 >= 0x17)
    {
      v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v26 = v20 | 7;
      v27 = v26 + 1;
      p_dst = (std::string *)operator new(v26 + 1);
      __dst.__r_.__value_.__l.__size_ = v21;
      __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
      p_dst = &__dst;
      if (!v20)
        goto LABEL_23;
    }
    memcpy(p_dst, __s, v21);
LABEL_23:
    p_dst->__r_.__value_.__s.__data_[v21] = 0;
    v28 = std::string::append(&__dst, ".split-lp");
    v29 = (char *)v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v83 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83) >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    sub_1C5EBEB94((uint64_t **)a2, a3, a4, __s, v30, (uint64_t)&v86, 0, 0, 0, 0, 0);
    if (SHIBYTE(v83) < 0)
      operator delete(__p[0]);
    v25 = v87;
    goto LABEL_31;
  }
  v23 = sub_1C5EBE3AC((uint64_t **)a2, a3, a4, __s, 0, 0, 0, 0, 0);
  v24 = v87;
  if (v87 >= HIDWORD(v87))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v87 + 1, 8);
    v24 = v87;
  }
  v86[v24] = v23;
  v25 = v87 + 1;
  LODWORD(v87) = v87 + 1;
LABEL_31:
  __p[0] = 0;
  __p[1] = 0;
  v83 = 0;
  sub_1C501881C((uint64_t)__p, 2 * a4 + v25);
  if ((_DWORD)v87)
  {
    v31 = v86;
    v79 = &v86[v87];
    v80 = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v77 = a2 | 4;
    while (1)
    {
      v32 = *v31;
      v33 = __p[1];
      if (__p[1] >= v83)
      {
        v35 = __p[0];
        v36 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          goto LABEL_127;
        v38 = v83 - (char *)__p[0];
        if ((v83 - (char *)__p[0]) >> 3 > v37)
          v37 = v38 >> 3;
        v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v37;
        if (v39)
        {
          if (v39 >> 60)
            goto LABEL_128;
          v40 = (char *)operator new(16 * v39);
        }
        else
        {
          v40 = 0;
        }
        v41 = (uint64_t *)&v40[16 * v36];
        *v41 = v32;
        v41[1] = v80;
        v42 = v41;
        if (v33 != v35)
        {
          do
          {
            *((_OWORD *)v42 - 1) = *((_OWORD *)v33 - 1);
            v42 -= 2;
            v33 -= 2;
          }
          while (v33 != v35);
          v33 = __p[0];
        }
        v43 = &v40[16 * v39];
        v34 = (char *)(v41 + 2);
        __p[0] = v42;
        __p[1] = v41 + 2;
        v83 = v43;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)__p[1] = v32;
        v33[1] = v80;
        v34 = (char *)(v33 + 2);
      }
      __p[1] = v34;
      v44 = *(_QWORD *)(v32 + 8);
      if (v44)
        break;
LABEL_60:
      v49 = 0;
LABEL_61:
      if (*(_BYTE *)(a1 + 56))
        sub_1C4DAD074(**(_QWORD **)(a1 + 40), v32, v49);
      if (++v31 == v79)
        goto LABEL_122;
    }
    while (1)
    {
      v45 = *(_QWORD *)(v44 + 24);
      v46 = *(unsigned __int8 *)(v45 + 16);
      v47 = v45 && v46 >= 0x1C;
      if (v47 && v46 - 29 < 0xB)
        break;
      v44 = *(_QWORD *)(v44 + 8);
      if (!v44)
        goto LABEL_60;
    }
    v49 = 0;
    v78 = v32 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_65:
    v50 = *(_QWORD *)(v45 + 40);
    if (v34 < v83)
    {
      *(_QWORD *)v34 = v50;
      *((_QWORD *)v34 + 1) = v77;
      v51 = v34 + 16;
      goto LABEL_83;
    }
    v52 = (char *)__p[0];
    v53 = (v34 - (char *)__p[0]) >> 4;
    v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 60)
      goto LABEL_127;
    v55 = v83 - (char *)__p[0];
    if ((v83 - (char *)__p[0]) >> 3 > v54)
      v54 = v55 >> 3;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
      v56 = 0xFFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 >> 60)
        goto LABEL_128;
      v57 = (char *)operator new(16 * v56);
    }
    else
    {
      v57 = 0;
    }
    v58 = &v57[16 * v53];
    *(_QWORD *)v58 = v50;
    *((_QWORD *)v58 + 1) = v77;
    v51 = v58 + 16;
    if (v34 == v52)
    {
      __p[0] = v58;
      __p[1] = v58 + 16;
      v83 = &v57[16 * v56];
    }
    else
    {
      do
      {
        *((_OWORD *)v58 - 1) = *((_OWORD *)v34 - 1);
        v58 -= 16;
        v34 -= 16;
      }
      while (v34 != v52);
      v34 = (char *)__p[0];
      __p[0] = v58;
      __p[1] = v51;
      v83 = &v57[16 * v56];
      if (!v34)
      {
LABEL_83:
        __p[1] = v51;
        if (v51 < v83)
        {
          *(_QWORD *)v51 = v50;
          *((_QWORD *)v51 + 1) = v78;
          v34 = v51 + 16;
          goto LABEL_101;
        }
        v59 = (char *)__p[0];
        v60 = (v51 - (char *)__p[0]) >> 4;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 60)
          goto LABEL_127;
        v62 = v83 - (char *)__p[0];
        if ((v83 - (char *)__p[0]) >> 3 > v61)
          v61 = v62 >> 3;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
          v63 = 0xFFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          if (v63 >> 60)
LABEL_128:
            sub_1C4764EE4();
          v64 = (char *)operator new(16 * v63);
        }
        else
        {
          v64 = 0;
        }
        v65 = &v64[16 * v60];
        *(_QWORD *)v65 = v50;
        *((_QWORD *)v65 + 1) = v78;
        v34 = v65 + 16;
        if (v51 == v59)
        {
          __p[0] = v65;
          __p[1] = v65 + 16;
          v83 = &v64[16 * v63];
        }
        else
        {
          do
          {
            *((_OWORD *)v65 - 1) = *((_OWORD *)v51 - 1);
            v65 -= 16;
            v51 -= 16;
          }
          while (v51 != v59);
          v51 = (char *)__p[0];
          __p[0] = v65;
          __p[1] = v34;
          v83 = &v64[16 * v63];
          if (!v51)
          {
LABEL_101:
            __p[1] = v34;
            if (!*(_BYTE *)(a1 + 56))
              goto LABEL_113;
            if (v85)
            {
              v66 = (v85 - 1) & ((v50 >> 4) ^ (v50 >> 9));
              v67 = *(_QWORD *)(v84[0] + 16 * v66);
              if (v50 == v67)
              {
LABEL_104:
                v68 = *(_QWORD *)(v84[0] + 16 * v66 + 8);
LABEL_110:
                v47 = __CFADD__(v68, v49);
                v71 = v68 + v49;
                if (v47)
                  v49 = -1;
                else
                  v49 = v71;
LABEL_113:
                while (1)
                {
                  v44 = *(_QWORD *)(v44 + 8);
                  if (!v44)
                    goto LABEL_61;
                  v45 = *(_QWORD *)(v44 + 24);
                  v72 = *(unsigned __int8 *)(v45 + 16);
                  if (v45)
                    v73 = v72 >= 0x1C;
                  else
                    v73 = 0;
                  if (v73 && v72 - 29 < 0xB)
                    goto LABEL_65;
                }
              }
              v69 = 1;
              while (v67 != -4096)
              {
                v70 = v66 + v69++;
                v66 = v70 & (v85 - 1);
                v67 = *(_QWORD *)(v84[0] + 16 * v66);
                if (v50 == v67)
                  goto LABEL_104;
              }
            }
            v68 = 0;
            goto LABEL_110;
          }
        }
        operator delete(v51);
        goto LABEL_101;
      }
    }
    operator delete(v34);
    goto LABEL_83;
  }
LABEL_122:
  llvm::DomTreeUpdater::applyUpdatesPermissive(*(_QWORD **)(a1 + 32), (uint64_t *)__p[0], ((char *)__p[1] - (char *)__p[0]) >> 4);
  v75 = *v86;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  MEMORY[0x1CAA32FB4](v84[0], 8);
  if (v86 != v88)
    free(v86);
  return v75;
}

llvm::UndefValue *llvm::JumpThreadingPass::evaluateOnPredecessorEdge(llvm::LazyValueInfo **this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::ConstantInt ***a4)
{
  llvm::BasicBlock *SinglePredecessor;
  unsigned int v9;
  llvm::UndefValue *result;
  llvm::BasicBlock *v11;
  uint64_t ***v13;
  llvm::Constant *v14;
  llvm::ConstantExpr *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ConstantInt ***v19;
  llvm::ConstantInt ***v20;
  llvm::ConstantInt **v21;

  SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(a2);
  v9 = *((unsigned __int8 *)a4 + 16);
  if (a4 && v9 < 0x15)
    return (llvm::UndefValue *)a4;
  if (v9 < 0x1C)
    return (llvm::UndefValue *)llvm::LazyValueInfo::getConstantOnEdge(this[2], a4, a3, SinglePredecessor, 0);
  v11 = (llvm::BasicBlock *)a4[5];
  if (v11 != a2 && v11 != SinglePredecessor)
    return (llvm::UndefValue *)llvm::LazyValueInfo::getConstantOnEdge(this[2], a4, a3, SinglePredecessor, 0);
  if (v9 == 83)
  {
    if (v11 == SinglePredecessor)
    {
      v16 = *((_DWORD *)a4 + 5);
      v17 = v16 & 0x7FFFFFF;
      if ((v16 & 0x7FFFFFF) != 0)
      {
        v18 = 0;
        while (1)
        {
          v19 = &a4[-4 * v17];
          if ((v16 & 0x40000000) != 0)
            v19 = (llvm::ConstantInt ***)*(a4 - 1);
          if ((&v19[4 * *((unsigned int *)a4 + 15)])[v18] == (llvm::ConstantInt **)a3)
            break;
          if (v17 == ++v18)
            goto LABEL_27;
        }
      }
      else
      {
LABEL_27:
        LODWORD(v18) = -1;
      }
      if ((v16 & 0x40000000) != 0)
        v20 = (llvm::ConstantInt ***)*(a4 - 1);
      else
        v20 = &a4[-4 * v17];
      v21 = v20[4 * v18];
      if (*((unsigned __int8 *)v21 + 16) >= 0x15u)
        return 0;
      else
        return (llvm::UndefValue *)v21;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (v9 - 81 <= 1 && v11 == a2)
    {
      v13 = (uint64_t ***)llvm::JumpThreadingPass::evaluateOnPredecessorEdge((llvm::JumpThreadingPass *)this, a2, a3, (llvm::Value *)*(a4 - 8));
      v14 = (llvm::Constant *)llvm::JumpThreadingPass::evaluateOnPredecessorEdge((llvm::JumpThreadingPass *)this, a2, a3, (llvm::Value *)*(a4 - 4));
      result = 0;
      if (v13)
      {
        if (v14)
        {
          v15 = (llvm::ConstantExpr *)(*((_WORD *)a4 + 9) & 0x3F);
          if (v15 <= 0xF)
            return (llvm::UndefValue *)llvm::ConstantExpr::getFCmp(v15, v13, v14, 0);
          else
            return llvm::ConstantExpr::getICmp(v15, (unsigned __int8 *)v13, v14, 0);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::JumpThreadingPass::maybethreadThroughTwoBasicBlocks(llvm::JumpThreadingPass *this, llvm::BasicBlock *a2, llvm::ConstantInt ***a3)
{
  llvm::BasicBlock *v3;
  _QWORD *v4;
  uint64_t result;
  char *v7;
  unsigned int v8;
  char *v9;
  llvm::BasicBlock *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::Instruction *v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  unsigned int v21;
  _QWORD *i;
  unint64_t v23;
  uint64_t v24;
  llvm::BasicBlock **v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t ***v35;
  llvm::BasicBlock *v36;
  llvm::UndefValue *v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  uint64_t ***v46;
  uint64_t v47;
  llvm::BasicBlock *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  llvm::BasicBlock **v53;
  uint64_t v54;
  _QWORD *k;
  unint64_t v56;
  uint64_t v57;
  llvm::BasicBlock **v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t ***v69;
  int v70;
  uint64_t ***v71;
  int v72;

  v4 = (_QWORD *)((char *)a2 + 40);
  v3 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v3 == (llvm::BasicBlock *)((char *)a2 + 40))
    return 0;
  result = 0;
  if (v3)
    v7 = (char *)v3 - 24;
  else
    v7 = 0;
  v8 = v7[16] - 40;
  if (v8 >= 0xFFFFFFF5)
    v9 = v7;
  else
    v9 = 0;
  if (!v3)
    return result;
  if (v9[16] != 30 || v8 < 0xFFFFFFF5)
    return result;
  result = llvm::BasicBlock::getSinglePredecessor(a2);
  if (!result)
    return result;
  v13 = (llvm::BasicBlock *)result;
  v15 = (_QWORD *)(result + 40);
  v14 = *(_QWORD *)(result + 40);
  if (v14 == result + 40)
    return 0;
  result = 0;
  v16 = (llvm::Instruction *)(v14 - 24);
  if (v14)
    v17 = v14 - 24;
  else
    v17 = 0;
  v18 = *(unsigned __int8 *)(v17 + 16) - 40;
  if (v18 < 0xFFFFFFF5)
    v17 = 0;
  if (v14)
  {
    if (*(_BYTE *)(v17 + 16) == 30 && v18 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 1 || llvm::BasicBlock::getSinglePredecessor(v13))
        return 0;
      if (*(_BYTE *)(v14 - 8) == 30)
      {
        if ((*(_DWORD *)(v14 - 4) & 0x7FFFFFF) == 3)
          v20 = 2;
        else
          v20 = 1;
        goto LABEL_35;
      }
      v20 = 2;
      switch(*(_BYTE *)(v14 - 8))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_148;
        case 0x1F:
          v20 = (*(_DWORD *)(v14 - 4) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
LABEL_148:
          v20 = (*(_DWORD *)(v14 - 4) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          goto LABEL_35;
        case 0x24:
          v20 = *(_WORD *)(v14 - 6) & 1;
          break;
        case 0x25:
          v20 = 1;
          goto LABEL_35;
        case 0x27:
          v20 = *(_DWORD *)(v14 + 56) + 1;
          break;
        default:
          goto LABEL_38;
      }
      if (v20)
      {
LABEL_35:
        v21 = 0;
        while ((llvm::BasicBlock *)llvm::Instruction::getSuccessor(v16, v21) != v13)
        {
          if (v20 == ++v21)
            goto LABEL_38;
        }
        return 0;
      }
LABEL_38:
      if (*((_QWORD *)this + 28))
      {
        for (i = (_QWORD *)*((_QWORD *)this + 27); i; i = (_QWORD *)*i)
        {
          v23 = i[4];
          if ((unint64_t)v13 >= v23)
          {
            if (v23 >= (unint64_t)v13)
              return 0;
            ++i;
          }
        }
      }
      else
      {
        v24 = *((unsigned int *)this + 18);
        if ((_DWORD)v24)
        {
          v25 = (llvm::BasicBlock **)*((_QWORD *)this + 8);
          v26 = 8 * v24;
          while (*v25 != v13)
          {
            ++v25;
            v26 -= 8;
            if (!v26)
              goto LABEL_55;
          }
          if (v26)
            return 0;
        }
      }
LABEL_55:
      for (j = *((_QWORD *)v13 + 6); ; j = *(_QWORD *)(j + 8))
      {
        v28 = j - 24;
        if (!j)
          v28 = 0;
        if (*(_BYTE *)(v28 + 16) != 83)
          break;
      }
      v29 = *(unsigned __int8 *)(j - 8) - 38;
      if (v29 >= 0x39 || ((0x100060000000001uLL >> v29) & 1) == 0)
      {
        v30 = *((_QWORD *)v13 + 1);
        if (v30)
        {
          while (1)
          {
            v31 = *(_QWORD *)(v30 + 24);
            v32 = *(unsigned __int8 *)(v31 + 16);
            v33 = v31 && v32 >= 0x1C;
            if (v33 && v32 - 29 <= 0xA)
              break;
            result = 0;
            v30 = *(_QWORD *)(v30 + 8);
            if (!v30)
              return result;
          }
          v35 = 0;
          v71 = 0;
          v70 = 0;
          v72 = 0;
LABEL_73:
          v36 = *(llvm::BasicBlock **)(v31 + 40);
          v37 = llvm::JumpThreadingPass::evaluateOnPredecessorEdge((llvm::LazyValueInfo **)this, a2, v36, a3);
          if (!v37 || *((_BYTE *)v37 + 16) != 16)
            goto LABEL_86;
          v69 = v35;
          v38 = *((_DWORD *)v37 + 8);
          if (v38 > 0x40)
          {
            v41 = llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)v37 + 24));
            if (v41 != v38)
            {
              v40 = v41 == v38 - 1;
LABEL_81:
              v42 = v40;
              v70 += v42;
              v35 = v69;
              if (v42)
                v35 = (uint64_t ***)v36;
LABEL_86:
              while (1)
              {
                v30 = *(_QWORD *)(v30 + 8);
                if (!v30)
                  break;
                v31 = *(_QWORD *)(v30 + 24);
                v43 = *(unsigned __int8 *)(v31 + 16);
                if (v31)
                  v44 = v43 >= 0x1C;
                else
                  v44 = 0;
                if (v44 && v43 - 29 < 0xB)
                  goto LABEL_73;
              }
              v46 = v71;
              if (v72 != 1)
              {
                v46 = v35;
                if (v70 != 1)
                  return 0;
              }
              v47 = v46 == v71 ? -1 : 0;
              v48 = *(llvm::BasicBlock **)&v9[32 * v47 - 32];
              if (v48 == a2)
                return 0;
              v49 = *((_QWORD *)this + 28);
              if (v49)
              {
                v50 = (_QWORD *)*((_QWORD *)this + 27);
                if (!v50)
                  goto LABEL_127;
                do
                {
                  v51 = v50[4];
                  if (v51 <= (unint64_t)a2)
                  {
                    if (v51 >= (unint64_t)a2)
                      return 0;
                    ++v50;
                  }
                  v50 = (_QWORD *)*v50;
                }
                while (v50);
              }
              else
              {
                v52 = *((unsigned int *)this + 18);
                if (!(_DWORD)v52)
                  goto LABEL_127;
                v53 = (llvm::BasicBlock **)*((_QWORD *)this + 8);
                v54 = 8 * v52;
                while (*v53 != a2)
                {
                  ++v53;
                  v54 -= 8;
                  if (!v54)
                    goto LABEL_114;
                }
                if (v54)
                  return 0;
              }
LABEL_114:
              if (v49)
              {
                for (k = (_QWORD *)*((_QWORD *)this + 27); k; k = (_QWORD *)*k)
                {
                  v56 = k[4];
                  if ((unint64_t)v48 >= v56)
                  {
                    if (v56 >= (unint64_t)v48)
                      return 0;
                    ++k;
                  }
                }
              }
              else
              {
                v57 = *((unsigned int *)this + 18);
                if ((_DWORD)v57)
                {
                  v58 = (llvm::BasicBlock **)*((_QWORD *)this + 8);
                  v59 = 8 * v57;
                  while (*v58 != v48)
                  {
                    ++v58;
                    v59 -= 8;
                    if (!v59)
                      goto LABEL_127;
                  }
                  if (v59)
                    return 0;
                }
              }
LABEL_127:
              v60 = (_QWORD *)*v4;
              if ((_QWORD *)*v4 == v4)
              {
                v62 = 0;
              }
              else
              {
                if (v60)
                  v61 = (uint64_t)(v60 - 3);
                else
                  v61 = 0;
                if (*(unsigned __int8 *)(v61 + 16) - 29 >= 0xB)
                  v62 = 0;
                else
                  v62 = v61;
              }
              v63 = sub_1C5B41BB8(*((_QWORD **)this + 1), a2, v62, *((_DWORD *)this + 58));
              v64 = (_QWORD *)*v15;
              if ((_QWORD *)*v15 == v15)
              {
                v66 = 0;
              }
              else
              {
                if (v64)
                  v65 = (uint64_t)(v64 - 3);
                else
                  v65 = 0;
                if (*(unsigned __int8 *)(v65 + 16) - 29 >= 0xB)
                  v66 = 0;
                else
                  v66 = v65;
              }
              v67 = sub_1C5B41BB8(*((_QWORD **)this + 1), v13, v66, *((_DWORD *)this + 58));
              result = 0;
              v68 = *((_DWORD *)this + 58);
              if (v63 <= v68 && v67 <= v68 && v67 + v63 <= v68)
              {
                llvm::JumpThreadingPass::threadThroughTwoBasicBlocks(this, v46, (uint64_t)v13, a2, v48);
                return 1;
              }
              return result;
            }
          }
          else
          {
            v39 = *((_QWORD *)v37 + 3);
            if (v39)
            {
              v40 = v39 == 1;
              goto LABEL_81;
            }
          }
          ++v72;
          v71 = (uint64_t ***)v36;
          v35 = v69;
          goto LABEL_86;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t llvm::JumpThreadingPass::tryThreadEdge(uint64_t a1, _QWORD *a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *i;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if ((_QWORD *)a4 == a2)
    return 0;
  v8 = *(_QWORD *)(a1 + 224);
  if (v8)
  {
    v9 = *(_QWORD **)(a1 + 216);
    if (!v9)
      goto LABEL_29;
    do
    {
      v10 = v9[4];
      if (v10 <= (unint64_t)a2)
      {
        if (v10 >= (unint64_t)a2)
          return 0;
        ++v9;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 72);
    if (!(_DWORD)v12)
      goto LABEL_29;
    v13 = *(_QWORD **)(a1 + 64);
    v14 = 8 * v12;
    while ((_QWORD *)*v13 != a2)
    {
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_16;
    }
    if (v14)
      return 0;
  }
LABEL_16:
  if (v8)
  {
    for (i = *(_QWORD **)(a1 + 216); i; i = (_QWORD *)*i)
    {
      v16 = i[4];
      if (v16 <= a4)
      {
        if (v16 >= a4)
          return 0;
        ++i;
      }
    }
  }
  else
  {
    v17 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD **)(a1 + 64);
      v19 = 8 * v17;
      while (*v18 != a4)
      {
        ++v18;
        v19 -= 8;
        if (!v19)
          goto LABEL_29;
      }
      if (v19)
        return 0;
    }
  }
LABEL_29:
  v20 = *(_QWORD **)(a1 + 8);
  v21 = (_QWORD *)a2[5];
  if (v21 == a2 + 5)
  {
    v23 = 0;
  }
  else
  {
    if (v21)
      v22 = (uint64_t)(v21 - 3);
    else
      v22 = 0;
    if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB)
      v23 = 0;
    else
      v23 = v22;
  }
  if (sub_1C5B41BB8(v20, a2, v23, *(_DWORD *)(a1 + 232)) > *(_DWORD *)(a1 + 232))
    return 0;
  llvm::JumpThreadingPass::threadEdge(a1, (uint64_t)a2, a3, a4);
  return 1;
}

uint64_t llvm::JumpThreadingPass::duplicateCondBranchOnPHIIntoPred(uint64_t a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  _QWORD *i;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  const llvm::Twine *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  _QWORD *v28;
  _DWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  llvm::Instruction *v39;
  uint64_t v40;
  llvm::Type *v41;
  llvm::DSOLocalEquivalent **v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _BYTE *v72;
  llvm::UndefValue *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Instruction **v81;
  llvm::Instruction *v82;
  int v83;
  int v84;
  llvm::Instruction *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  llvm::ValueSymbolTable *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  int v113;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[5];
  __int16 v131;
  uint64_t v132[2];
  int v133;
  void *v134;
  uint64_t v135;
  _BYTE v136[16];
  __int16 v137;
  uint64_t v138;

  v5 = a1;
  v138 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 224))
  {
    for (i = *(_QWORD **)(a1 + 216); i; i = (_QWORD *)*i)
    {
      v7 = i[4];
      if (v7 <= a2)
      {
        if (v7 >= a2)
          return 0;
        ++i;
      }
    }
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)(a1 + 64);
      v10 = 8 * v8;
      while (*v9 != a2)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      if (v10)
        return 0;
    }
  }
LABEL_14:
  v11 = *(_QWORD **)(a1 + 8);
  v13 = (_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  if (v12 == a2 + 40)
  {
    v15 = 0;
  }
  else
  {
    if (v12)
      v14 = v12 - 24;
    else
      v14 = 0;
    if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB)
      v15 = 0;
    else
      v15 = v14;
  }
  if (sub_1C5B41BB8(v11, (_QWORD *)a2, v15, *(_DWORD *)(v5 + 232)) > *(_DWORD *)(v5 + 232))
    return 0;
  v17 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v17 == 1)
    v18 = **a3;
  else
    v18 = llvm::JumpThreadingPass::splitBlockPreds(v5, a2, *a3, v17, ".thr_comm");
  v19 = (uint64_t *)operator new(0x10uLL);
  v21 = v19;
  *v19 = v18;
  v19[1] = a2 | 4;
  v22 = *(_QWORD *)(v18 + 40);
  if (v22 == v18 + 40)
    goto LABEL_195;
  v23 = v22 - 24;
  if (v22)
    v24 = v22 - 24;
  else
    v24 = 0;
  v25 = *(unsigned __int8 *)(v24 + 16) - 40;
  if (v25 < 0xFFFFFFF5)
    v24 = 0;
  if (v22
    && (*(_BYTE *)(v24 + 16) == 30 ? (v26 = v25 >= 0xFFFFFFF5) : (v26 = 0),
        v26 && (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 1))
  {
    v27 = v19 + 2;
  }
  else
  {
LABEL_195:
    v137 = 257;
    v121 = llvm::SplitEdge((llvm *)v18, (llvm::BasicBlock *)a2, 0, 0, 0, (llvm::MemorySSAUpdater *)&v134, v20);
    v122 = operator new(0x20uLL);
    v122[2] = v18;
    v122[3] = v121 & 0xFFFFFFFFFFFFFFFBLL;
    *(_OWORD *)v122 = *(_OWORD *)v21;
    operator delete(v21);
    v21 = (uint64_t *)operator new(0x40uLL);
    v27 = v21 + 8;
    v21[4] = v121;
    v21[5] = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v123 = *((_OWORD *)v122 + 1);
    *(_OWORD *)v21 = *(_OWORD *)v122;
    *((_OWORD *)v21 + 1) = v123;
    operator delete(v122);
    v21[6] = v18;
    v21[7] = a2 | 4;
    v124 = *(_QWORD *)(v121 + 40);
    if (v124 == v121 + 40)
    {
      v23 = 0;
    }
    else
    {
      if (v124)
        v125 = v124 - 24;
      else
        v125 = 0;
      if (*(unsigned __int8 *)(v125 + 16) - 29 >= 0xB)
        v23 = 0;
      else
        v23 = v125;
    }
    v18 = v121;
  }
  v133 = 0;
  v132[0] = 0;
  v132[1] = 0;
  v28 = *(_QWORD **)(a2 + 48);
  v29 = v28 - 3;
  if (v28)
    v30 = v28 - 3;
  else
    v30 = 0;
  v129 = v18;
  if (v28 && *((_BYTE *)v30 + 16) == 83)
  {
    while (1)
    {
      v31 = v29[5];
      v32 = v31 & 0x7FFFFFF;
      if ((v31 & 0x7FFFFFF) != 0)
      {
        v33 = 0;
        while (1)
        {
          v34 = &v29[-8 * v32];
          if ((v31 & 0x40000000) != 0)
            v34 = (_DWORD *)*((_QWORD *)v29 - 1);
          if (*(_QWORD *)&v34[8 * v29[15] + 2 * v33] == v18)
            break;
          if (v32 == ++v33)
            goto LABEL_52;
        }
      }
      else
      {
LABEL_52:
        LODWORD(v33) = -1;
      }
      v35 = (v31 & 0x40000000) != 0 ? (_DWORD *)*((_QWORD *)v29 - 1) : &v29[-8 * v32];
      v36 = *(_QWORD *)&v35[8 * v33];
      v134 = v29;
      sub_1C5667838(v132, &v134)[1] = v36;
      v28 = (_QWORD *)v28[1];
      v29 = v28 - 3;
      v37 = v28 ? (uint64_t)(v28 - 3) : 0;
      if (!v28)
        break;
      v18 = v129;
      if (*(_BYTE *)(v37 + 16) != 83)
        goto LABEL_63;
    }
    v18 = v129;
  }
LABEL_63:
  v127 = v23;
  if (v28 != v13)
  {
    v126 = (uint64_t *)(v23 + 24);
    v38 = v27;
    v128 = v5;
    while (1)
    {
      if (v28)
        v39 = (llvm::Instruction *)(v28 - 3);
      else
        v39 = 0;
      llvm::Instruction::clone(v39);
      v43 = v40;
      v44 = *(_DWORD *)(v40 + 20);
      v45 = v44 & 0x7FFFFFF;
      if ((v44 & 0x7FFFFFF) != 0)
      {
        v46 = 0;
        do
        {
          v47 = *(_DWORD *)(v40 + 20);
          if ((v47 & 0x40000000) != 0)
            v48 = *(_QWORD *)(v40 - 8);
          else
            v48 = v40 - 32 * (v47 & 0x7FFFFFF);
          v49 = *(_QWORD *)(v48 + 32 * v46);
          if (v49)
            v50 = *(unsigned __int8 *)(v49 + 16) >= 0x1Cu;
          else
            v50 = 0;
          if (v50 && v133)
          {
            v51 = (v133 - 1) & ((v49 >> 4) ^ (v49 >> 9));
            v52 = *(_QWORD *)(v132[0] + 16 * v51);
            if (v49 == v52)
            {
LABEL_80:
              if ((_DWORD)v51 != v133)
              {
                if ((v47 & 0x40000000) != 0)
                  v53 = *(_QWORD *)(v40 - 8);
                else
                  v53 = v40 - 32 * (v47 & 0x7FFFFFF);
                v54 = *(_QWORD *)(v132[0] + 16 * v51 + 8);
                v55 = v53 + 32 * v46;
                if (*(_QWORD *)v55)
                {
                  **(_QWORD **)(v55 + 16) = *(_QWORD *)(v55 + 8);
                  v56 = *(_QWORD *)(v55 + 8);
                  if (v56)
                    *(_QWORD *)(v56 + 16) = *(_QWORD *)(v55 + 16);
                }
                *(_QWORD *)v55 = v54;
                if (v54)
                {
                  v59 = *(_QWORD *)(v54 + 8);
                  v57 = (uint64_t *)(v54 + 8);
                  v58 = v59;
                  v60 = v53 + 32 * v46;
                  *(_QWORD *)(v60 + 8) = v59;
                  if (v59)
                    *(_QWORD *)(v58 + 16) = v60 + 8;
                  *(_QWORD *)(v60 + 16) = v57;
                  *v57 = v55;
                }
              }
            }
            else
            {
              v61 = 1;
              while (v52 != -4096)
              {
                v62 = v51 + v61++;
                v51 = v62 & (v133 - 1);
                v52 = *(_QWORD *)(v132[0] + 16 * v51);
                if (v49 == v52)
                  goto LABEL_80;
              }
            }
          }
          ++v46;
        }
        while (v46 != v45);
        v44 = *(_DWORD *)(v40 + 20);
      }
      v63 = *(_QWORD *)v5;
      v130[0] = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 40) + 272;
      v130[1] = v63;
      v130[2] = 0;
      v130[3] = 0;
      v130[4] = v40;
      v131 = 257;
      if ((v44 & 0x40000000) != 0)
      {
        v65 = *(uint64_t **)(v40 - 8);
        v64 = v44 & 0x7FFFFFF;
      }
      else
      {
        v64 = v44 & 0x7FFFFFF;
        v65 = (uint64_t *)(v40 - 32 * v64);
      }
      v134 = v136;
      v135 = 0x800000000;
      if (v64 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v64, 8);
        v66 = v135;
        v68 = v134;
        v67 = v135;
      }
      else
      {
        v66 = 0;
        if (!v64)
        {
          v72 = v136;
          goto LABEL_106;
        }
        v67 = 0;
        v68 = v136;
      }
      v69 = 32 * v64;
      v70 = &v68[8 * v67];
      do
      {
        v71 = *v65;
        v65 += 4;
        *v70++ = v71;
        v69 -= 32;
      }
      while (v69);
      v72 = v134;
LABEL_106:
      LODWORD(v135) = v66 + v64;
      v73 = llvm::SimplifyInstructionWithOperands((llvm *)v43, (uint64_t)v72, (v66 + v64), (uint64_t)v130, v41, v42);
      if (v134 == v136)
      {
        if (!v73)
          goto LABEL_108;
      }
      else
      {
        free(v134);
        if (!v73)
        {
LABEL_108:
          v134 = v39;
          sub_1C5667838(v132, &v134)[1] = v43;
          goto LABEL_123;
        }
      }
      v134 = v39;
      sub_1C5667838(v132, &v134)[1] = v73;
      v74 = *(unsigned __int8 *)(v43 + 16) - 33;
      if (v74 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v43 + 16) - 33)) & 0x808001D0000010) != 0)
          goto LABEL_124;
        if (((1 << (*(_BYTE *)(v43 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v75 = *(_QWORD *)(v43 + 64);
          if (!v75 || (*(_BYTE *)(v75 + 17) & 0x30) == 0)
          {
            v76 = *(_DWORD *)(v43 + 20);
            if (v76 < 0)
            {
              v106 = v43 - 32 * (v76 & 0x7FFFFFF);
              v109 = *(_QWORD *)(v106 - 8);
              v107 = v106 - 8;
              v108 = v109;
              if (v109)
              {
                v110 = -v108;
                do
                {
                  v111 = *(_DWORD *)(*(_QWORD *)(v107 + v110) + 8);
                  v112 = v111 > 7;
                  v113 = (1 << v111) & 0x83;
                  if (v112 || v113 == 0)
                    goto LABEL_123;
                  v110 += 16;
                }
                while (v110);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v43, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v43, 44))
            {
              goto LABEL_123;
            }
          }
        }
        else if (v74 == 27 && (*(_WORD *)(v43 + 18) & 0x301) != 0)
        {
LABEL_124:
          if ((*((_BYTE *)v39 + 23) & 0x10) != 0)
          {
            v77 = ***(_QWORD ***)v39;
            v78 = *(_QWORD *)(v77 + 152);
            v79 = *(unsigned int *)(v77 + 168);
            if (!(_DWORD)v79)
              goto LABEL_131;
            LODWORD(v80) = (v79 - 1) & ((v39 >> 4) ^ (v39 >> 9));
            v81 = (llvm::Instruction **)(v78 + 16 * v80);
            v82 = *v81;
            if (*v81 != v39)
            {
              v83 = 1;
              while (v82 != (llvm::Instruction *)-4096)
              {
                v84 = v80 + v83++;
                v80 = v84 & (v79 - 1);
                v82 = *(llvm::Instruction **)(v78 + 16 * v80);
                if (v82 == v39)
                {
                  v81 = (llvm::Instruction **)(v78 + 16 * v80);
                  goto LABEL_132;
                }
              }
LABEL_131:
              v81 = (llvm::Instruction **)(v78 + 16 * v79);
            }
LABEL_132:
            v85 = v81[1];
            v88 = *(_QWORD *)v85;
            v87 = (char *)v85 + 16;
            v86 = v88;
          }
          else
          {
            v86 = 0;
            v87 = &byte_1C871356D;
          }
          v137 = 261;
          v134 = v87;
          v135 = v86;
          llvm::Value::setName((uint64_t ***)v43, (uint64_t)&v134);
          *(_QWORD *)(v43 + 40) = v18;
          *(_WORD *)(v18 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v43 + 23) & 0x10) != 0)
          {
            v104 = *(_QWORD *)(v18 + 56);
            if (v104)
            {
              v105 = *(llvm::ValueSymbolTable **)(v104 + 104);
              if (v105)
                llvm::ValueSymbolTable::reinsertValue(v105, (llvm::Value *)v43);
            }
          }
          v89 = *v126;
          *(_QWORD *)(v43 + 24) = *v126;
          *(_QWORD *)(v43 + 32) = v126;
          *(_QWORD *)(v89 + 8) = v43 + 24;
          *v126 = v43 + 24;
          LODWORD(v89) = *(_DWORD *)(v43 + 20);
          v90 = v89 & 0x7FFFFFF;
          if ((v89 & 0x7FFFFFF) != 0)
          {
            v91 = 0;
            v92 = v38;
            do
            {
              v93 = *(_DWORD *)(v43 + 20);
              if ((v93 & 0x40000000) != 0)
                v94 = *(_QWORD *)(v43 - 8);
              else
                v94 = v43 - 32 * (v93 & 0x7FFFFFF);
              v95 = *(_QWORD *)(v94 + 32 * v91);
              if (v95)
                v96 = *(_BYTE *)(v95 + 16) == 22;
              else
                v96 = 0;
              if (v96)
              {
                v97 = v95 & 0xFFFFFFFFFFFFFFFBLL;
                if (v92 >= v27)
                {
                  v98 = ((char *)v92 - (char *)v21) >> 4;
                  v99 = v98 + 1;
                  if ((unint64_t)(v98 + 1) >> 60)
                    abort();
                  if (v27 - v21 > v99)
                    v99 = v27 - v21;
                  if ((unint64_t)((char *)v27 - (char *)v21) >= 0x7FFFFFFFFFFFFFF0)
                    v100 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v100 = v99;
                  if (v100)
                  {
                    if (v100 >> 60)
                      sub_1C4764EE4();
                    v101 = (char *)operator new(16 * v100);
                  }
                  else
                  {
                    v101 = 0;
                  }
                  v102 = (uint64_t *)&v101[16 * v98];
                  v18 = v129;
                  *v102 = v129;
                  v102[1] = v97;
                  if (v92 == v21)
                  {
                    v21 = v102;
                  }
                  else
                  {
                    v103 = v102;
                    do
                    {
                      *((_OWORD *)v103 - 1) = *((_OWORD *)v92 - 1);
                      v103 -= 2;
                      v92 -= 2;
                    }
                    while (v92 != v21);
                    v92 = v21;
                    v21 = v103;
                  }
                  v27 = (uint64_t *)&v101[16 * v100];
                  v38 = v102 + 2;
                  if (v92)
                    operator delete(v92);
                }
                else
                {
                  *v92 = v18;
                  v92[1] = v97;
                  v38 = v92 + 2;
                }
              }
              else
              {
                v38 = v92;
              }
              ++v91;
              v92 = v38;
            }
            while (v91 != v90);
          }
          goto LABEL_164;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v43) & 1) == 0
        && llvm::Instruction::willReturn((llvm::Instruction *)v43))
      {
        llvm::Value::deleteValue((llvm::Value *)v43);
        goto LABEL_164;
      }
LABEL_123:
      if (v43)
        goto LABEL_124;
LABEL_164:
      v28 = (_QWORD *)v28[1];
      v13 = (_QWORD *)(a2 + 40);
      v5 = v128;
      if (v28 == (_QWORD *)(a2 + 40))
        goto LABEL_182;
    }
  }
  v38 = v27;
LABEL_182:
  v115 = (_QWORD *)*v13;
  if ((_QWORD *)*v13 == v13)
  {
    v117 = 0;
  }
  else
  {
    if (v115)
      v116 = v115 - 3;
    else
      v116 = 0;
    if (*((unsigned __int8 *)v116 + 16) - 29 >= 0xB)
      v117 = 0;
    else
      v117 = v116;
  }
  sub_1C5B41F28(*(v117 - 4), a2, v18, (uint64_t)v132);
  v118 = sub_1C5B41F28(*(v117 - 8), a2, v18, (uint64_t)v132);
  llvm::JumpThreadingPass::updateSSA(v118, a2, v18, v132);
  llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)a2, (llvm::BasicBlock *)v18, 1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v127 + 40) + 40, (uint64_t ***)v127);
  v119 = *(_QWORD *)(v127 + 24);
  v120 = *(_QWORD **)(v127 + 32);
  *v120 = v119;
  *(_QWORD *)(v119 + 8) = v120;
  *(_QWORD *)(v127 + 24) = 0;
  *(_QWORD *)(v127 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v127);
  if (*(_BYTE *)(v5 + 56))
    llvm::BranchProbabilityInfo::copyEdgeProbabilities(*(llvm::BranchProbabilityInfo **)(v5 + 48), (llvm::BasicBlock *)a2, (llvm::BasicBlock *)v18);
  llvm::DomTreeUpdater::applyUpdatesPermissive(*(_QWORD **)(v5 + 32), v21, ((char *)v38 - (char *)v21) >> 4);
  MEMORY[0x1CAA32FB4](v132[0], 8);
  if (v21)
    operator delete(v21);
  return 1;
}

void llvm::JumpThreadingPass::updateSSA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  char *v28;
  size_t v29;
  size_t v30;
  int v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  _QWORD *v51;
  llvm::Use *v52;
  uint64_t v53;
  _OWORD v54[3];
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[18];

  v58[16] = *MEMORY[0x1E0C80C00];
  memset(v54, 0, sizeof(v54));
  v56 = v58;
  v57 = 0x1000000000;
  v4 = a2 + 40;
  v5 = *(_QWORD *)(a2 + 48);
  if (v5 == a2 + 40)
    goto LABEL_70;
  v9 = (a2 >> 4) ^ (a2 >> 9);
  v10 = (a3 >> 4) ^ (a3 >> 9);
  do
  {
    if (v5)
      v11 = v5 - 24;
    else
      v11 = 0;
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = 0;
      do
      {
        v14 = *(_QWORD *)(v12 + 24);
        if (v14 && *(_BYTE *)(v14 + 16) == 83)
        {
          v15 = *(_DWORD *)(v14 + 20);
          if ((v15 & 0x40000000) != 0)
            v16 = *(_QWORD *)(v14 - 8);
          else
            v16 = v14 - 32 * (v15 & 0x7FFFFFF);
          v17 = *(_QWORD *)(v16
                          + 32 * *(unsigned int *)(v14 + 60)
                          + 8 * ((unint64_t)(v12 - v16) >> 5));
        }
        else
        {
          v17 = *(_QWORD *)(v14 + 40);
        }
        if (v17 != a2)
        {
          if (v13 >= HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v13 + 1, 8);
            v13 = v57;
          }
          *((_QWORD *)v56 + v13) = v12;
          v13 = v57 + 1;
          LODWORD(v57) = v57 + 1;
        }
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12);
      if (v13)
      {
        v18 = *(uint64_t ***)v11;
        if ((*(_BYTE *)(v11 + 23) & 0x10) == 0)
        {
          v29 = 0;
          v28 = &byte_1C871356D;
LABEL_32:
          llvm::SSAUpdater::Initialize((uint64_t)v54, (uint64_t)v18, v28, v29);
          v55 = a2;
          v31 = *(_DWORD *)(*(_QWORD *)&v54[0] + 16);
          if (v31)
          {
            v32 = v31 - 1;
            v33 = (v31 - 1) & v9;
            v34 = (_QWORD *)(**(_QWORD **)&v54[0] + 16 * v33);
            v35 = *v34;
            if (*v34 == a2)
              goto LABEL_47;
            v36 = 0;
            v37 = 1;
            while (v35 != -4096)
            {
              if (v36)
                v38 = 0;
              else
                v38 = v35 == -8192;
              if (v38)
                v36 = v34;
              v39 = v33 + v37++;
              v33 = v39 & v32;
              v34 = (_QWORD *)(**(_QWORD **)&v54[0] + 16 * (v39 & v32));
              v35 = *v34;
              if (*v34 == a2)
                goto LABEL_47;
            }
            if (v36)
              v40 = v36;
            else
              v40 = v34;
          }
          else
          {
            v40 = 0;
          }
          v34 = sub_1C4ECCA58(*(uint64_t *)&v54[0], (uint64_t)&v55, &v55, v40);
          *v34 = v55;
          v34[1] = 0;
LABEL_47:
          v34[1] = v11;
          v53 = v11;
          v41 = sub_1C5667838(a4, &v53)[1];
          v55 = a3;
          v42 = *(_DWORD *)(*(_QWORD *)&v54[0] + 16);
          if (v42)
          {
            v43 = v42 - 1;
            v44 = (v42 - 1) & v10;
            v45 = (_QWORD *)(**(_QWORD **)&v54[0] + 16 * v44);
            v46 = *v45;
            if (*v45 == a3)
              goto LABEL_62;
            v47 = 0;
            v48 = 1;
            while (v46 != -4096)
            {
              if (v47)
                v49 = 0;
              else
                v49 = v46 == -8192;
              if (v49)
                v47 = v45;
              v50 = v44 + v48++;
              v44 = v50 & v43;
              v45 = (_QWORD *)(**(_QWORD **)&v54[0] + 16 * (v50 & v43));
              v46 = *v45;
              if (*v45 == a3)
                goto LABEL_62;
            }
            if (v47)
              v51 = v47;
            else
              v51 = v45;
          }
          else
          {
            v51 = 0;
          }
          v45 = sub_1C4ECCA58(*(uint64_t *)&v54[0], (uint64_t)&v55, &v55, v51);
          *v45 = v55;
          v45[1] = 0;
LABEL_62:
          v45[1] = v41;
          while ((_DWORD)v57)
          {
            v52 = (llvm::Use *)*((_QWORD *)v56 + v57 - 1);
            LODWORD(v57) = v57 - 1;
            llvm::SSAUpdater::RewriteUse((llvm::SSAUpdater *)v54, v52);
          }
          goto LABEL_21;
        }
        v19 = **v18;
        v20 = *(_QWORD *)(v19 + 152);
        v21 = *(unsigned int *)(v19 + 168);
        if ((_DWORD)v21)
        {
          LODWORD(v22) = (v21 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          v23 = (uint64_t *)(v20 + 16 * v22);
          v24 = *v23;
          if (*v23 == v11)
          {
LABEL_31:
            v27 = (_QWORD *)v23[1];
            v30 = *v27;
            v28 = (char *)(v27 + 2);
            v29 = v30;
            goto LABEL_32;
          }
          v25 = 1;
          while (v24 != -4096)
          {
            v26 = v22 + v25++;
            v22 = v26 & (v21 - 1);
            v24 = *(_QWORD *)(v20 + 16 * v22);
            if (v24 == v11)
            {
              v23 = (uint64_t *)(v20 + 16 * v22);
              goto LABEL_31;
            }
          }
        }
        v23 = (uint64_t *)(v20 + 16 * v21);
        goto LABEL_31;
      }
    }
LABEL_21:
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v4);
  if (v56 != v58)
    free(v56);
LABEL_70:
  llvm::SSAUpdater::~SSAUpdater((void **)v54);
}

void llvm::JumpThreadingPass::cloneInstructions(_QWORD *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t ***a4@<X4>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  char *v10;
  _QWORD *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t **v34;
  llvm::Instruction *v35;
  uint64_t ***v36;
  uint64_t ***v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Instruction **v42;
  llvm::Instruction *v43;
  int v44;
  int v45;
  llvm::Instruction *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t ***v55;
  uint64_t **v56;
  BOOL v57;
  int v58;
  uint64_t ***v59;
  uint64_t v60;
  uint64_t ***v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t ***v66;
  uint64_t v67;
  llvm::ValueSymbolTable *v68;
  _QWORD v69[4];
  __int16 v70;
  _QWORD v71[2];
  int v72;
  uint64_t **v73;
  void *v74;
  int v75[2];
  _WORD v76[24];
  uint64_t v77;

  v8 = a1;
  v77 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  v10 = (char *)(a1 - 3);
  if (a1)
    v11 = a1 - 3;
  else
    v11 = 0;
  if (a1 && *((_BYTE *)v11 + 16) == 83)
  {
    while (1)
    {
      v12 = *(uint64_t ***)v10;
      if ((v10[23] & 0x10) == 0)
      {
        v22 = 0;
        v23 = &byte_1C871356D;
        goto LABEL_15;
      }
      v13 = **v12;
      v14 = *(_QWORD *)(v13 + 152);
      v15 = *(unsigned int *)(v13 + 168);
      if (!(_DWORD)v15)
        goto LABEL_13;
      LODWORD(v16) = (v15 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v17 = (void **)(v14 + 16 * v16);
      v18 = (char *)*v17;
      if (*v17 != v10)
        break;
LABEL_14:
      v21 = v17[1];
      v24 = *v21;
      v23 = (char *)(v21 + 2);
      v22 = v24;
LABEL_15:
      v76[8] = 261;
      v74 = v23;
      *(_QWORD *)v75 = v22;
      v25 = sub_1C50B1024((uint64_t)v12, 1, (uint64_t)&v74, a3);
      v26 = v25;
      v27 = *((_DWORD *)v10 + 5);
      v28 = v27 & 0x7FFFFFF;
      if ((v27 & 0x7FFFFFF) != 0)
      {
        v29 = 0;
        while (1)
        {
          v30 = &v10[-32 * v28];
          if ((v27 & 0x40000000) != 0)
            v30 = (char *)*((_QWORD *)v10 - 1);
          if (*(uint64_t ****)&v30[32 * *((unsigned int *)v10 + 15) + 8 * v29] == a4)
            break;
          if (v28 == ++v29)
            goto LABEL_21;
        }
      }
      else
      {
LABEL_21:
        LODWORD(v29) = -1;
      }
      if ((v27 & 0x40000000) != 0)
        v31 = (char *)*((_QWORD *)v10 - 1);
      else
        v31 = &v10[-32 * v28];
      sub_1C477667C((llvm::PHINode *)v25, *(_QWORD *)&v31[32 * v29], (uint64_t)a4);
      v74 = v10;
      sub_1C5667838((uint64_t *)a5, &v74)[1] = v26;
      v8 = (_QWORD *)v8[1];
      v10 = (char *)(v8 - 3);
      if (v8)
        v32 = v8 - 3;
      else
        v32 = 0;
      if (!v8 || *((_BYTE *)v32 + 16) != 83)
        goto LABEL_32;
    }
    v19 = 1;
    while (v18 != (char *)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(char **)(v14 + 16 * v16);
      if (v18 == v10)
      {
        v17 = (void **)(v14 + 16 * v16);
        goto LABEL_14;
      }
    }
LABEL_13:
    v17 = (void **)(v14 + 16 * v15);
    goto LABEL_14;
  }
LABEL_32:
  v74 = v76;
  *(_QWORD *)v75 = 0x600000000;
  v71[0] = 0;
  v71[1] = 0;
  v72 = 0;
  v33 = **a4;
  llvm::identifyNoAliasScopesToClone(v8, a2, (uint64_t)&v74);
  llvm::cloneNoAliasScopes((uint64_t *)v74, v75[0], (uint64_t)v71, "thread", 6uLL, v33);
  if (v8 != a2)
  {
    v34 = (uint64_t **)(a3 + 40);
    while (1)
    {
      v35 = v8 ? (llvm::Instruction *)(v8 - 3) : 0;
      llvm::Instruction::clone(v35);
      v37 = v36;
      if ((*((_BYTE *)v35 + 23) & 0x10) != 0)
        break;
      v47 = 0;
      v48 = &byte_1C871356D;
LABEL_46:
      v70 = 261;
      v69[0] = v48;
      v69[1] = v47;
      llvm::Value::setName(v36, (uint64_t)v69);
      v37[5] = (uint64_t **)a3;
      *(_WORD *)(a3 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v37 + 23) & 0x10) != 0)
      {
        v67 = *(_QWORD *)(a3 + 56);
        if (v67)
        {
          v68 = *(llvm::ValueSymbolTable **)(v67 + 104);
          if (v68)
            llvm::ValueSymbolTable::reinsertValue(v68, (llvm::Value *)v37);
        }
      }
      v50 = *v34;
      v37[4] = v34;
      v37[3] = (uint64_t **)v50;
      v50[1] = (uint64_t)(v37 + 3);
      *v34 = (uint64_t *)(v37 + 3);
      v69[0] = v35;
      sub_1C5667838((uint64_t *)a5, v69)[1] = v37;
      llvm::adaptNoAliasScopes(v37, (uint64_t)v71, (uint64_t)v33);
      v51 = *((_DWORD *)v37 + 5) & 0x7FFFFFF;
      if ((_DWORD)v51)
      {
        v52 = 0;
        v53 = 32 * v51;
        do
        {
          v54 = *((_DWORD *)v37 + 5);
          if ((v54 & 0x40000000) != 0)
            v55 = (uint64_t ***)*(v37 - 1);
          else
            v55 = &v37[-4 * (v54 & 0x7FFFFFF)];
          v56 = v55[v52 / 8];
          if (v56)
            v57 = *((unsigned __int8 *)v56 + 16) >= 0x1Cu;
          else
            v57 = 0;
          if (v57)
          {
            v73 = v56;
            v69[0] = 0;
            if (sub_1C5667944((uint64_t *)a5, &v73, v69))
            {
              if (v69[0] != *(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16))
              {
                v58 = *((_DWORD *)v37 + 5);
                if ((v58 & 0x40000000) != 0)
                  v59 = (uint64_t ***)*(v37 - 1);
                else
                  v59 = &v37[-4 * (v58 & 0x7FFFFFF)];
                v60 = *(_QWORD *)(v69[0] + 8);
                v61 = &v59[v52 / 8];
                if (v59[v52 / 8])
                {
                  *v61[2] = (uint64_t *)v61[1];
                  v62 = v61[1];
                  if (v62)
                    v62[2] = (uint64_t *)v61[2];
                }
                *v61 = (uint64_t **)v60;
                if (v60)
                {
                  v65 = *(uint64_t ***)(v60 + 8);
                  v63 = (uint64_t **)(v60 + 8);
                  v64 = v65;
                  v66 = &v59[v52 / 8];
                  v66[1] = v65;
                  if (v65)
                    v64[2] = (uint64_t *)(v66 + 1);
                  v66[2] = v63;
                  *v63 = (uint64_t *)v61;
                }
              }
            }
          }
          v52 += 32;
        }
        while (v53 != v52);
      }
      v8 = (_QWORD *)v8[1];
      if (v8 == a2)
        goto LABEL_77;
    }
    v38 = ***(_QWORD ***)v35;
    v39 = *(_QWORD *)(v38 + 152);
    v40 = *(unsigned int *)(v38 + 168);
    if ((_DWORD)v40)
    {
      LODWORD(v41) = (v40 - 1) & ((v35 >> 4) ^ (v35 >> 9));
      v42 = (llvm::Instruction **)(v39 + 16 * v41);
      v43 = *v42;
      if (*v42 == v35)
      {
LABEL_45:
        v46 = v42[1];
        v49 = *(_QWORD *)v46;
        v48 = (char *)v46 + 16;
        v47 = v49;
        goto LABEL_46;
      }
      v44 = 1;
      while (v43 != (llvm::Instruction *)-4096)
      {
        v45 = v41 + v44++;
        v41 = v45 & (v40 - 1);
        v43 = *(llvm::Instruction **)(v39 + 16 * v41);
        if (v43 == v35)
        {
          v42 = (llvm::Instruction **)(v39 + 16 * v41);
          goto LABEL_45;
        }
      }
    }
    v42 = (llvm::Instruction **)(v39 + 16 * v40);
    goto LABEL_45;
  }
LABEL_77:
  MEMORY[0x1CAA32FB4](v71[0], 8);
  if (v74 != v76)
    free(v74);
}

uint64_t sub_1C5B41BB8(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  _QWORD *v9;
  _BOOL4 v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  llvm::Instruction *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  _BOOL4 v42;
  llvm::Instruction *v43;
  uint64_t v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v48;
  void *v50;
  uint64_t v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v6 = a2 + 5;
  for (i = (_QWORD *)a2[6]; i != v6; i = (_QWORD *)i[1])
  {
    v8 = i - 3;
    if (i)
      v9 = i - 3;
    else
      v9 = 0;
    if (*((_BYTE *)v9 + 16) != 83)
      goto LABEL_9;
  }
  v8 = 0;
LABEL_9:
  v10 = v8 == 0;
  if (v8)
    v11 = v8 + 3;
  else
    v11 = 0;
  v12 = (_QWORD *)*v6;
  if ((_QWORD *)*v6 == v6)
  {
    v13 = 0;
  }
  else
  {
    v13 = v12 - 3;
    if (!v12)
      v13 = 0;
    if (*((unsigned __int8 *)v13 + 16) - 29 >= 0xB)
      v13 = 0;
  }
  if (v13 == (_QWORD *)a3)
  {
    v15 = *(unsigned __int8 *)(a3 + 16);
    if (v15 == 31)
      v14 = 6;
    else
      v14 = 0;
    if (v15 == 32)
      v14 = 8;
  }
  else
  {
    v14 = 0;
  }
  if (v8)
    v16 = (llvm::Instruction *)(v11 - 3);
  else
    v16 = 0;
  v48 = v14;
  if (v16 != (llvm::Instruction *)a3)
  {
    v17 = 0;
    v18 = v14 + a4;
    while (1)
    {
      if (v17 > v18)
        return v17;
      if (*(_BYTE *)(*(_QWORD *)v16 + 8) == 12
        && (llvm::Instruction::isUsedOutsideOfBlock(v16, (const llvm::BasicBlock *)a2) & 1) != 0)
      {
        return 0xFFFFFFFFLL;
      }
      v19 = *((unsigned __int8 *)v16 + 16);
      v20 = v19 == 84;
      v21 = v19 != 84;
      v22 = v20 ? (uint64_t)v16 : 0;
      if (!v10 && !v21)
      {
        v23 = *(_QWORD *)(v22 + 64);
        if (v23)
        {
          if ((*(_BYTE *)(v23 + 15) & 1) != 0)
            return 0xFFFFFFFFLL;
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 24) & 1) != 0)
          return 0xFFFFFFFFLL;
        v24 = *(_QWORD *)(v22 + 64);
        if (v24)
        {
          if ((*(_BYTE *)(v24 + 12) & 0x40) != 0)
            return 0xFFFFFFFFLL;
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 6) & 1) != 0)
          return 0xFFFFFFFFLL;
      }
      v25 = *((_DWORD *)v16 + 5);
      if ((v25 & 0x40000000) != 0)
      {
        v27 = (uint64_t *)*((_QWORD *)v16 - 1);
        v26 = v25 & 0x7FFFFFF;
      }
      else
      {
        v26 = v25 & 0x7FFFFFF;
        v27 = (uint64_t *)((char *)v16 - 32 * v26);
      }
      v50 = v52;
      v51 = 0x400000000;
      if (v26 >= 5)
        break;
      v28 = 0;
      if (v26)
      {
        v29 = 0;
        v30 = v52;
        goto LABEL_49;
      }
      v34 = v52;
LABEL_53:
      LODWORD(v51) = v28 + v26;
      v35 = (*(uint64_t (**)(_QWORD, llvm::Instruction *, _QWORD *))(*(_QWORD *)*a1 + 72))(*a1, v16, v34);
      v37 = v36;
      if (v50 != v52)
        free(v50);
      v38 = v35 < 0;
      if (v37)
        v38 = v37 < 0;
      if (v38)
        goto LABEL_62;
      v39 = v37 < 1;
      if (!v37)
        v39 = v35 < 1;
      if (!v39)
      {
LABEL_62:
        v40 = (v17 + 1);
        v41 = *((unsigned __int8 *)v16 + 16);
        v42 = v41 != 84;
        if (v41 == 84)
          v43 = v16;
        else
          v43 = 0;
        if (!v10 && !v42)
        {
          v44 = *((_QWORD *)v43 - 4);
          if (v44
            && !*(_BYTE *)(v44 + 16)
            && *(_QWORD *)(v44 + 24) == *((_QWORD *)v43 + 9)
            && (*(_BYTE *)(v44 + 33) & 0x20) != 0)
          {
            if ((*(_DWORD *)(*(_QWORD *)v43 + 8) & 0xFE) == 0x12)
              v40 = v40;
            else
              v40 = (v17 + 2);
          }
          else
          {
            v40 = (v17 + 4);
          }
        }
      }
      else
      {
        v40 = v17;
      }
      v11 = (_QWORD *)v11[1];
      v10 = v11 == 0;
      if (v11)
        v16 = (llvm::Instruction *)(v11 - 3);
      else
        v16 = 0;
      v17 = v40;
      if (v16 == (llvm::Instruction *)a3)
        goto LABEL_82;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v26, 8);
    v28 = v51;
    v30 = v50;
    v29 = v51;
LABEL_49:
    v31 = 32 * v26;
    v32 = &v30[v29];
    do
    {
      v33 = *v27;
      v27 += 4;
      *v32++ = v33;
      v31 -= 32;
    }
    while (v31);
    v34 = v50;
    goto LABEL_53;
  }
  LODWORD(v40) = 0;
LABEL_82:
  v45 = v40 >= v48;
  v46 = v40 - v48;
  if (v45)
    return v46;
  else
    return 0;
}

uint64_t sub_1C5B41F28(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_QWORD *)(result + 40) != result + 40)
  {
    v4 = *(_QWORD *)(result + 48);
    v5 = v4 - 24;
    v6 = v4 ? v4 - 24 : 0;
    if (v4 && *(_BYTE *)(v6 + 16) == 83)
    {
      do
      {
        v10 = *(_DWORD *)(v5 + 20);
        v11 = v10 & 0x7FFFFFF;
        if ((v10 & 0x7FFFFFF) != 0)
        {
          v12 = 0;
          while (1)
          {
            v13 = v5 - 32 * v11;
            if ((v10 & 0x40000000) != 0)
              v13 = *(_QWORD *)(v5 - 8);
            if (*(_QWORD *)(v13 + 32 * *(unsigned int *)(v5 + 60) + 8 * v12) == a2)
              break;
            if (v11 == ++v12)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          LODWORD(v12) = -1;
        }
        if ((v10 & 0x40000000) != 0)
          v14 = *(_QWORD *)(v5 - 8);
        else
          v14 = v5 - 32 * v11;
        v15 = *(_QWORD *)(v14 + 32 * v12);
        if (v15)
          v16 = *(unsigned __int8 *)(v15 + 16) >= 0x1Cu;
        else
          v16 = 0;
        if (v16)
        {
          v19 = *(_QWORD *)(v14 + 32 * v12);
          v20 = 0;
          if (sub_1C5667944((uint64_t *)a4, &v19, &v20))
          {
            if (v20 != *(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16))
              v15 = *(_QWORD *)(v20 + 8);
          }
        }
        result = sub_1C477667C((llvm::PHINode *)v5, v15, a3);
        v17 = *(_QWORD *)(v5 + 32);
        v5 = v17 - 24;
        if (v17)
          v18 = v17 - 24;
        else
          v18 = 0;
      }
      while (v17 && *(_BYTE *)(v18 + 16) == 83);
    }
  }
  return result;
}

void llvm::JumpThreadingPass::updateBlockFreqAndEdgeWeight(llvm::JumpThreadingPass *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, llvm::BasicBlock *a5)
{
  unint64_t BlockFreq;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  llvm::BasicBlock *Successor;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  llvm::JumpThreadingPass *v42;
  uint64_t v43;
  _BYTE *v44;
  int *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::MDNode *v51;
  uint64_t *v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[16];
  void *v56;
  uint64_t v57;
  _BYTE v58[16];
  void *v59;
  uint64_t v60;
  _QWORD v61[5];

  v61[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 56))
  {
    BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*((uint64_t **)this + 5), (uint64_t)a3);
    v10 = llvm::BlockFrequencyInfo::getBlockFreq(*((uint64_t **)this + 5), (uint64_t)a4);
    LODWORD(v59) = llvm::BranchProbabilityInfo::getEdgeProbability(*((_QWORD *)this + 6), (uint64_t)a3, (uint64_t)a5);
    v11 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v59, BlockFreq);
    if (BlockFreq >= v10)
      v12 = BlockFreq - v10;
    else
      v12 = 0;
    sub_1C4DAD074(**((_QWORD **)this + 5), (uint64_t)a3, v12);
    v59 = v61;
    v60 = 0x400000000;
    v13 = *((_QWORD *)a3 + 5);
    if (v13)
      v14 = v13 - 24;
    else
      v14 = 0;
    v15 = *(unsigned __int8 *)(v14 + 16);
    if (v15 != 30)
      __asm { BR              X10 }
    if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 3)
      v16 = 2;
    else
      v16 = 1;
    v17 = 0;
    if (v11 >= v10)
      v18 = v11 - v10;
    else
      v18 = 0;
    do
    {
      Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v14, v17);
      v20 = v18;
      if (Successor != a5)
      {
        LODWORD(v56) = llvm::BranchProbabilityInfo::getEdgeProbability(*((_QWORD *)this + 6), (uint64_t)a3, (uint64_t)Successor);
        v20 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v56, BlockFreq);
      }
      v21 = v60;
      if (v60 >= (unint64_t)HIDWORD(v60))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 8);
        v21 = v60;
      }
      *((_QWORD *)v59 + v21) = v20;
      v22 = (v60 + 1);
      LODWORD(v60) = v60 + 1;
      ++v17;
    }
    while (v16 != v17);
    v23 = (char *)v59;
    v24 = (unint64_t *)v59;
    if (v22 >= 2)
    {
      v26 = (char *)v59 + 8;
      v25 = *(_QWORD *)v59;
      v27 = 8 * v22 - 8;
      v24 = (unint64_t *)v59;
      v28 = (char *)v59 + 8;
      do
      {
        v30 = *(_QWORD *)v28;
        v28 += 8;
        v29 = v30;
        v31 = v25 >= v30;
        if (v25 <= v30)
          v25 = v29;
        if (!v31)
          v24 = (unint64_t *)v26;
        v26 = v28;
        v27 -= 8;
      }
      while (v27);
    }
    v32 = *v24;
    v56 = v58;
    v57 = 0x400000000;
    if (v32)
    {
      if ((_DWORD)v22)
      {
        LODWORD(v33) = 0;
        v34 = (char *)v59 + 8 * v22;
        do
        {
          v35 = 0;
          if (HIDWORD(v32))
          {
            v38 = v32;
            do
            {
              v36 = v38 >> 1;
              ++v35;
              v39 = v38 >> 33;
              v38 >>= 1;
            }
            while (v39);
          }
          else
          {
            v36 = v32;
          }
          v37 = *(_QWORD *)v23 >> v35;
          if (v36 != 0x80000000)
            v37 = (((unint64_t)(*(_QWORD *)v23 >> v35) << 31) | (v36 >> 1)) / v36;
          if (v33 >= HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v33 + 1, 4);
            LODWORD(v33) = v57;
          }
          *((_DWORD *)v56 + v33) = v37;
          v33 = (v57 + 1);
          LODWORD(v57) = v57 + 1;
          v23 += 8;
        }
        while (v23 != v34);
        v40 = (unsigned int *)v56;
      }
      else
      {
        v33 = 0;
        v40 = (unsigned int *)v58;
      }
      sub_1C50D6C6C(v40, &v40[v33]);
    }
    else
    {
      if ((_DWORD)v22 == 0x80000000)
        v41 = 1;
      else
        v41 = ((v22 >> 1) | 0x80000000) / v22;
      sub_1C4893E04((char *)&v56, v22, v41);
    }
    v42 = (llvm::JumpThreadingPass *)llvm::BranchProbabilityInfo::setEdgeProbability(*((_QWORD *)this + 6), a3, (uint64_t *)&v56);
    if (v57 >= 2 && llvm::JumpThreadingPass::doesBlockHaveProfileData(v42, a3))
    {
      v53 = v55;
      v54 = 0x400000000;
      if ((_DWORD)v57)
      {
        LODWORD(v43) = 0;
        v45 = (int *)v56;
        v46 = 4 * v57;
        do
        {
          v47 = *v45;
          if (v43 >= HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v43 + 1, 4);
            LODWORD(v43) = v54;
          }
          *((_DWORD *)v53 + v43) = v47;
          v43 = (v54 + 1);
          LODWORD(v54) = v54 + 1;
          ++v45;
          v46 -= 4;
        }
        while (v46);
        v44 = v53;
      }
      else
      {
        v43 = 0;
        v44 = v55;
      }
      v48 = *((_QWORD *)a3 + 5);
      if (v48)
        v49 = v48 - 24;
      else
        v49 = 0;
      if (*(unsigned __int8 *)(v49 + 16) - 29 >= 0xB)
        v50 = 0;
      else
        v50 = v49;
      v52 = ***(uint64_t ****)(v50 + 40);
      v51 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v52, (uint64_t)v44, v43);
      if (v51 || *(_QWORD *)(v50 + 48) || (*(_BYTE *)(v50 + 23) & 0x20) != 0)
        llvm::Value::setMetadata((llvm::Value *)v50, 2, v51);
      if (v53 != v55)
        free(v53);
    }
    if (v56 != v58)
      free(v56);
    if (v59 != v61)
      free(v59);
  }
}

void sub_1C5B424E8()
{
  JUMPOUT(0x1C5B42164);
}

void sub_1C5B424FC()
{
  JUMPOUT(0x1C5B42164);
}

void sub_1C5B42508()
{
  JUMPOUT(0x1C5B42164);
}

void sub_1C5B42510()
{
  JUMPOUT(0x1C5B42164);
}

llvm::PHINode *llvm::JumpThreadingPass::unfoldSelectInstr(llvm::JumpThreadingPass *this, llvm::BasicBlock *a2, unint64_t a3, llvm::SelectInst *a4, llvm::PHINode *a5, unsigned int a6)
{
  llvm::BasicBlock *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  llvm::Value *v25;
  _DWORD *v26;
  uint64_t v27;
  llvm::BranchInst *v28;
  _QWORD *v29;
  llvm::Instruction *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  llvm::PHINode *result;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  llvm::PHINode *v42;
  int v43;
  uint64_t v44;
  llvm::ValueSymbolTable *v45;
  uint64_t v47[4];
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v11 == (llvm::BasicBlock *)((char *)a2 + 40))
  {
    v12 = 0;
  }
  else
  {
    if (v11)
      v13 = (char *)v11 - 24;
    else
      v13 = 0;
    if (v13[16] - 29 >= 0xB)
      v12 = 0;
    else
      v12 = v13;
  }
  v14 = **(_QWORD ***)a3;
  v47[0] = (uint64_t)"select.unfold";
  v48 = 259;
  v15 = *(_QWORD *)(a3 + 56);
  v16 = operator new();
  *(_QWORD *)v16 = *v14 + 1600;
  *(_QWORD *)(v16 + 8) = 0;
  v17 = *(_DWORD *)(v16 + 20) & 0xC0000000;
  *(_QWORD *)(v16 + 24) = 0;
  v18 = v16 + 24;
  *(_DWORD *)(v16 + 16) = 22;
  *(_DWORD *)(v16 + 20) = v17;
  v19 = (char **)(v16 + 40);
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = v16 + 40;
  *(_QWORD *)(v16 + 48) = v16 + 40;
  *(_QWORD *)(v16 + 56) = 0;
  if (v15)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v15 + 72, (_QWORD *)v16);
    v20 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(v16 + 24) = v20;
    *(_QWORD *)(v16 + 32) = a3 + 24;
    *(_QWORD *)(v20 + 8) = v18;
    *(_QWORD *)(a3 + 24) = v18;
  }
  llvm::Value::setName((uint64_t ***)v16, (uint64_t)v47);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v12 + 5) + 40, (uint64_t ***)v12);
  v21 = *((_QWORD *)v12 + 3);
  v22 = (_QWORD *)*((_QWORD *)v12 + 4);
  v23 = v12 + 24;
  *v22 = v21;
  *(_QWORD *)(v21 + 8) = v22;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = v16;
  *(_WORD *)(v16 + 18) &= ~0x8000u;
  if ((v12[23] & 0x10) != 0)
  {
    v44 = *(_QWORD *)(v16 + 56);
    if (v44)
    {
      v45 = *(llvm::ValueSymbolTable **)(v44 + 104);
      if (v45)
        llvm::ValueSymbolTable::reinsertValue(v45, (llvm::Value *)v12);
    }
  }
  v24 = *v19;
  *((_QWORD *)v12 + 3) = *v19;
  *((_QWORD *)v12 + 4) = v19;
  *((_QWORD *)v24 + 1) = v23;
  *v19 = v23;
  v25 = (llvm::Value *)*((_QWORD *)a4 - 12);
  v26 = operator new(0xA0uLL);
  v27 = 0;
  v28 = (llvm::BranchInst *)(v26 + 24);
  v26[29] = v26[29] & 0x38000000 | 3;
  do
  {
    v29 = &v26[v27];
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v28;
    v27 += 8;
  }
  while (v27 != 24);
  v30 = llvm::BranchInst::BranchInst(v28, (llvm::BasicBlock *)v16, (llvm::BasicBlock *)a3, v25, a2);
  llvm::Instruction::applyMergedLocation(v30, *((const llvm::DILocation **)v12 + 6), *((const llvm::DILocation **)a4 + 6));
  sub_1C6125834((uint64_t)a5, a6, *((_QWORD *)a4 - 4));
  sub_1C477667C(a5, *((_QWORD *)a4 - 8), v16);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a4 + 5) + 40, (uint64_t ***)a4);
  v31 = *((_QWORD *)a4 + 3);
  v32 = (_QWORD *)*((_QWORD *)a4 + 4);
  *v32 = v31;
  *(_QWORD *)(v31 + 8) = v32;
  *((_QWORD *)a4 + 3) = 0;
  *((_QWORD *)a4 + 4) = 0;
  llvm::Value::deleteValue(a4);
  v33 = (_QWORD *)*((_QWORD *)this + 4);
  v47[0] = v16;
  v47[1] = a3 & 0xFFFFFFFFFFFFFFFBLL;
  v47[2] = (uint64_t)a2;
  v47[3] = v16 & 0xFFFFFFFFFFFFFFFBLL;
  llvm::DomTreeUpdater::applyUpdatesPermissive(v33, v47, 2);
  v34 = *(_QWORD *)(a3 + 48);
  result = (llvm::PHINode *)(v34 - 24);
  if (v34)
    v36 = v34 - 24;
  else
    v36 = 0;
  if (v34 && *(_BYTE *)(v36 + 16) == 83)
  {
    do
    {
      if (result != a5)
      {
        v37 = *((_DWORD *)result + 5);
        v38 = v37 & 0x7FFFFFF;
        if ((v37 & 0x7FFFFFF) != 0)
        {
          v39 = 0;
          while (1)
          {
            v40 = (_DWORD *)((char *)result - 32 * v38);
            if ((v37 & 0x40000000) != 0)
              v40 = (_DWORD *)*((_QWORD *)result - 1);
            if (*(llvm::BasicBlock **)&v40[8 * *((unsigned int *)result + 15) + 2 * v39] == a2)
              break;
            if (v38 == ++v39)
              goto LABEL_26;
          }
        }
        else
        {
LABEL_26:
          LODWORD(v39) = -1;
        }
        if ((v37 & 0x40000000) != 0)
          v41 = (_DWORD *)*((_QWORD *)result - 1);
        else
          v41 = (_DWORD *)((char *)result - 32 * v38);
        sub_1C477667C(result, *(_QWORD *)&v41[8 * v39], v16);
      }
      v34 = *(_QWORD *)(v34 + 8);
      v42 = (llvm::PHINode *)(v34 - 24);
      if (!v34)
        v42 = 0;
      v43 = *((unsigned __int8 *)v42 + 16);
      if (v43 == 83)
        result = v42;
      else
        result = 0;
    }
    while (v34 && v43 == 83);
  }
  return result;
}

BOOL llvm::JumpThreadingPass::threadGuard(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  const llvm::Value *v7;
  llvm *v8;
  llvm *v9;
  llvm *v10;
  const llvm::Value *v11;
  unsigned __int16 isImpliedCondition;
  BOOL v13;
  int v14;
  unsigned __int16 v15;
  _BOOL8 v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t ***v26;
  unsigned int v27;
  uint64_t v28;
  const llvm::Twine *v29;
  __n128 v30;
  unsigned int v31;
  llvm *v32;
  uint64_t v33;
  const llvm::Twine *v34;
  _QWORD *v35;
  uint64_t ***v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t *v45;
  _QWORD *v46;
  int32x2_t ****v47;
  int32x2_t ****v48;
  int32x2_t ***v49;
  _QWORD *v50;
  llvm::PHINode *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  int32x2_t ****v58;
  int32x2_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int32x2_t *****v64;
  int32x2_t ****v65;
  int v66;
  int v67;
  _QWORD *v68;
  unint64_t v69;
  int32x2_t ****v70;
  int32x2_t *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int32x2_t *****v76;
  int32x2_t ****v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int32x2_t ***v82;
  int32x2_t ***v83;
  uint64_t v84;
  llvm::ValueSymbolTable *v85;
  _QWORD *v86;
  unint64_t v87;
  int32x2_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  int32x2_t *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  int32x2_t *v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  int v115;
  _QWORD *v116;
  unint64_t v117;
  int32x2_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  int32x2_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  int v132;
  unint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  int32x2_t *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v147;
  uint64_t v148;
  _QWORD v149[2];
  unsigned int v150;
  uint64_t v151[3];
  char v152;
  _QWORD v153[2];
  unsigned int v154;
  uint64_t v155[3];
  char v156;
  void *v157;
  uint64_t v158;
  unint64_t *v159;
  int32x2_t ****v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD v164[6];

  v164[4] = *MEMORY[0x1E0C80C00];
  v7 = *(const llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  v8 = *(llvm **)(a4 - 96);
  v9 = *(llvm **)(a4 - 32);
  v10 = *(llvm **)(a4 - 64);
  v11 = (const llvm::Value *)(*(_QWORD *)(a2[7] + 40) + 272);
  isImpliedCondition = llvm::isImpliedCondition(v8, v7, v11, (const llvm::DataLayout *)1, 0);
  if ((_BYTE)isImpliedCondition)
    v13 = isImpliedCondition >= 0x100u;
  else
    v13 = 0;
  v14 = !v13;
  if (v14 != 1
    || ((v15 = llvm::isImpliedCondition(v8, v7, v11, 0, 0), v16 = 0, v15 >= 0x100u)
      ? (v17 = v15 == 0)
      : (v17 = 1),
        !v17))
  {
    v154 = 128;
    v18 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    v19 = 0;
    v153[0] = v18;
    v153[1] = 0;
    do
    {
      v20 = &v18[v19];
      *((_QWORD *)v20 + 2) = 0;
      *((_QWORD *)v20 + 3) = -4096;
      *(_QWORD *)v20 = &unk_1E814DA10;
      *((_QWORD *)v20 + 1) = 2;
      v19 += 64;
      *((_QWORD *)v20 + 4) = 0;
    }
    while (v19 != 0x2000);
    LOBYTE(v155[0]) = 0;
    v156 = 0;
    v150 = 128;
    v21 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    v22 = 0;
    v149[0] = v21;
    v149[1] = 0;
    do
    {
      v23 = &v21[v22];
      *((_QWORD *)v23 + 2) = 0;
      *((_QWORD *)v23 + 3) = -4096;
      *(_QWORD *)v23 = &unk_1E814DA10;
      *((_QWORD *)v23 + 1) = 2;
      v22 += 64;
      *((_QWORD *)v23 + 4) = 0;
    }
    while (v22 != 0x2000);
    LOBYTE(v151[0]) = 0;
    v152 = 0;
    v24 = *(_QWORD *)(a3 + 32);
    if (v24)
      v25 = v24 == *(_QWORD *)(a3 + 40) + 40;
    else
      v25 = 1;
    if (v25)
      v26 = 0;
    else
      v26 = (uint64_t ***)(v24 - 24);
    v27 = sub_1C5B41BB8(*(_QWORD **)(a1 + 8), a2, (uint64_t)v26, *(_DWORD *)(a1 + 232));
    v31 = *(_DWORD *)(a1 + 232);
    v16 = v27 <= v31;
    if (v27 <= v31)
    {
      if (v14)
        v32 = v9;
      else
        v32 = v10;
      if (v14)
        v9 = v10;
      v148 = llvm::DuplicateInstructionsInSplitBetween((unint64_t)a2, v32, v26, (uint64_t)v149, *(_QWORD *)(a1 + 32), v28, v29);
      v147 = llvm::DuplicateInstructionsInSplitBetween((unint64_t)a2, v9, (uint64_t ***)a3, (uint64_t)v153, *(_QWORD *)(a1 + 32), v33, v34);
      v162 = v164;
      v30.n128_u64[0] = 0x400000000;
      v163 = 0x400000000;
      v35 = (_QWORD *)a2[6];
      if (v35)
        v36 = (uint64_t ***)(v35 - 3);
      else
        v36 = 0;
      if (v36 == v26)
      {
        v37 = 0;
      }
      else
      {
        v37 = 0;
        do
        {
          if (*((_BYTE *)v36 + 16) != 83)
          {
            if (v37 >= HIDWORD(v163))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, (uint64_t)v164, v37 + 1, 8);
              v37 = v163;
            }
            v162[v37] = v36;
            v37 = v163 + 1;
            LODWORD(v163) = v163 + 1;
          }
          v35 = (_QWORD *)v35[1];
          if (v35)
            v36 = (uint64_t ***)(v35 - 3);
          else
            v36 = 0;
        }
        while (v36 != v26);
        v35 = (_QWORD *)a2[6];
      }
      if (v35 != a2 + 5)
      {
        while (1)
        {
          v38 = v35 - 3;
          if (!v35)
            v38 = 0;
          if (*((_BYTE *)v38 + 16) != 83)
            break;
          v35 = (_QWORD *)v35[1];
          if (v35 == a2 + 5)
          {
            v35 = a2 + 5;
            goto LABEL_54;
          }
        }
        v39 = *((unsigned __int8 *)v35 - 8) - 38;
        v40 = v39 > 0x38;
        v41 = (1 << v39) & 0x100060000000001;
        if (!v40 && v41 != 0)
          v35 = (_QWORD *)v35[1];
      }
LABEL_54:
      v43 = v162;
      if (v37)
      {
        if (v35)
          v44 = v35 - 3;
        else
          v44 = 0;
        v45 = v44 + 3;
        v46 = &v162[v37];
        do
        {
          v48 = (int32x2_t ****)*--v46;
          v47 = v48;
          if (v48[1])
          {
            v49 = *v47;
            LOWORD(v161) = 257;
            v50 = operator new(0x48uLL);
            v50[1] = v49;
            v51 = (llvm::PHINode *)(v50 + 1);
            *v50 = 0;
            v50[2] = 0;
            v50[3] = 0x4000000000000053;
            *((_OWORD *)v50 + 2) = 0u;
            v52 = (char *)(v50 + 4);
            *((_OWORD *)v50 + 3) = 0u;
            v50[8] = 0x200000000;
            llvm::Value::setName((uint64_t ***)v50 + 1, (uint64_t)&v157);
            v53 = *((unsigned int *)v50 + 17);
            v54 = operator new(40 * v53);
            *v50 = v54;
            if ((_DWORD)v53)
            {
              v55 = &v54[4 * v53];
              do
              {
                *v54 = 0;
                v54[1] = 0;
                v54[2] = 0;
                v54[3] = v51;
                v54 += 4;
              }
              while (v54 != v55);
            }
            v158 = 2;
            v159 = 0;
            v160 = v47;
            if (v47 != (int32x2_t ****)-8192 && v47 != (int32x2_t ****)-4096 && v47)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v158);
            v157 = &unk_1E814DA10;
            v161 = v153;
            v56 = sub_1C52E2ED8((uint64_t)v153, &v157);
            if (v160 != (int32x2_t ****)-8192 && v160 != (int32x2_t ****)-4096 && v160)
            {
              v57 = v158 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v158 & 0xFFFFFFFFFFFFFFF8) = v159;
              if (v159)
              {
                *v159 = *v159 & 7 | v57;
              }
              else
              {
                v58 = v160;
                v59 = ***v160;
                v60 = (unint64_t)v59[303];
                if (v60 <= v57)
                {
                  v61 = v59[305].u32[0];
                  if (v60 + 16 * v61 > v57)
                  {
                    v62 = v61 - 1;
                    LODWORD(v63) = v62 & ((v160 >> 4) ^ (v160 >> 9));
                    v64 = (int32x2_t *****)(v60 + 16 * v63);
                    v65 = *v64;
                    if (v160 == *v64)
                    {
LABEL_78:
                      *v64 = (int32x2_t ****)-8192;
                      v59[304] = vadd_s32(v59[304], (int32x2_t)0x1FFFFFFFFLL);
                      v58 = v160;
                    }
                    else
                    {
                      v66 = 1;
                      while (v65 != (int32x2_t ****)-4096)
                      {
                        v67 = v63 + v66++;
                        v63 = v67 & v62;
                        v65 = *(int32x2_t *****)(v60 + 16 * v63);
                        if (v160 == v65)
                        {
                          v64 = (int32x2_t *****)(v60 + 16 * v63);
                          goto LABEL_78;
                        }
                      }
                    }
                    *((_BYTE *)v58 + 17) &= ~1u;
                  }
                }
              }
            }
            sub_1C477667C(v51, v56[7], v147);
            v158 = 2;
            v159 = 0;
            v160 = v47;
            if (v47 != (int32x2_t ****)-8192 && v47 != (int32x2_t ****)-4096 && v47)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v158);
            v157 = &unk_1E814DA10;
            v161 = v149;
            v68 = sub_1C52E2ED8((uint64_t)v149, &v157);
            if (v160 != (int32x2_t ****)-8192 && v160 != (int32x2_t ****)-4096 && v160)
            {
              v69 = v158 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v158 & 0xFFFFFFFFFFFFFFF8) = v159;
              if (v159)
              {
                *v159 = *v159 & 7 | v69;
              }
              else
              {
                v70 = v160;
                v71 = ***v160;
                v72 = (unint64_t)v71[303];
                if (v72 <= v69)
                {
                  v73 = v71[305].u32[0];
                  if (v72 + 16 * v73 > v69)
                  {
                    v74 = v73 - 1;
                    LODWORD(v75) = v74 & ((v160 >> 4) ^ (v160 >> 9));
                    v76 = (int32x2_t *****)(v72 + 16 * v75);
                    v77 = *v76;
                    if (v160 == *v76)
                    {
LABEL_96:
                      *v76 = (int32x2_t ****)-8192;
                      v71[304] = vadd_s32(v71[304], (int32x2_t)0x1FFFFFFFFLL);
                      v70 = v160;
                    }
                    else
                    {
                      v78 = 1;
                      while (v77 != (int32x2_t ****)-4096)
                      {
                        v79 = v75 + v78++;
                        v75 = v79 & v74;
                        v77 = *(int32x2_t *****)(v72 + 16 * v75);
                        if (v160 == v77)
                        {
                          v76 = (int32x2_t *****)(v72 + 16 * v75);
                          goto LABEL_96;
                        }
                      }
                    }
                    *((_BYTE *)v70 + 17) &= ~1u;
                  }
                }
              }
            }
            sub_1C477667C(v51, v68[7], v148);
            v80 = v44[5];
            v50[6] = v80;
            *(_WORD *)(v80 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v50 + 31) & 0x10) != 0)
            {
              v84 = *(_QWORD *)(v80 + 56);
              if (v84)
              {
                v85 = *(llvm::ValueSymbolTable **)(v84 + 104);
                if (v85)
                  llvm::ValueSymbolTable::reinsertValue(v85, v51);
              }
            }
            v81 = *v45;
            v50[4] = *v45;
            v50[5] = v45;
            *(_QWORD *)(v81 + 8) = v52;
            *v45 = (uint64_t)v52;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v47, v51, (llvm::Value *)1);
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v47[5] + 5), (uint64_t ***)v47);
          v82 = v47[3];
          v83 = v47[4];
          *v83 = (int32x2_t **)v82;
          v82[1] = (int32x2_t **)v83;
          v47[3] = 0;
          v47[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v47);
        }
        while (v46 != v43);
        v43 = v162;
      }
      v16 = 1;
      if (v43 != v164)
        free(v43);
      if (v152)
      {
        sub_1C4E43068((uint64_t)v151);
        MEMORY[0x1CAA32FB4](v151[0], 8);
        v152 = 0;
      }
    }
    v86 = (_QWORD *)v149[0];
    if (v150)
    {
      v87 = v149[0] + ((unint64_t)v150 << 6);
      v88 = (int32x2_t *)&unk_1C640E000;
      v30.n128_u64[0] = 0x1FFFFFFFFLL;
      do
      {
        v89 = v86[3];
        if ((v89 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v90 = v86[7];
          if (v90)
          {
            if (v90 != -8192 && v90 != -4096)
            {
              v91 = v86[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v91 = v86[6];
              v92 = (unint64_t *)v86[6];
              if (v92)
              {
                *v92 = *v92 & 7 | v91;
              }
              else
              {
                v93 = v86[7];
                v94 = ***(int32x2_t ****)v93;
                v95 = (unint64_t)v94[303];
                if (v95 <= v91)
                {
                  v96 = v94[305].u32[0];
                  if (v95 + 16 * v96 > v91)
                  {
                    v97 = v96 - 1;
                    LODWORD(v98) = v97 & ((v93 >> 4) ^ (v93 >> 9));
                    v99 = (uint64_t *)(v95 + 16 * v98);
                    v100 = *v99;
                    if (v93 == *v99)
                    {
LABEL_124:
                      *v99 = -8192;
                      v94[304] = vadd_s32(v94[304], (int32x2_t)0x1FFFFFFFFLL);
                      v93 = v86[7];
                    }
                    else
                    {
                      v101 = 1;
                      while (v100 != -4096)
                      {
                        v102 = v98 + v101++;
                        v98 = v102 & v97;
                        v100 = *(_QWORD *)(v95 + 16 * v98);
                        if (v93 == v100)
                        {
                          v99 = (uint64_t *)(v95 + 16 * v98);
                          goto LABEL_124;
                        }
                      }
                    }
                    *(_BYTE *)(v93 + 17) &= ~1u;
                  }
                }
              }
              v89 = v86[3];
            }
          }
        }
        if (v89 != -4096 && v89 != -8192 && v89 != 0)
        {
          v104 = v86[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v104 = v86[2];
          v105 = (unint64_t *)v86[2];
          if (v105)
          {
            *v105 = *v105 & 7 | v104;
          }
          else
          {
            v106 = v86[3];
            v107 = ***(int32x2_t ****)v106;
            v108 = (unint64_t)v107[303];
            if (v108 <= v104)
            {
              v109 = v107[305].u32[0];
              if (v108 + 16 * v109 > v104)
              {
                v110 = v109 - 1;
                LODWORD(v111) = v110 & ((v106 >> 4) ^ (v106 >> 9));
                v112 = (uint64_t *)(v108 + 16 * v111);
                v113 = *v112;
                if (v106 == *v112)
                {
LABEL_143:
                  *v112 = -8192;
                  v107[304] = vadd_s32(v107[304], (int32x2_t)0x1FFFFFFFFLL);
                  v106 = v86[3];
                }
                else
                {
                  v114 = 1;
                  while (v113 != -4096)
                  {
                    v115 = v111 + v114++;
                    v111 = v115 & v110;
                    v113 = *(_QWORD *)(v108 + 16 * v111);
                    if (v106 == v113)
                    {
                      v112 = (uint64_t *)(v108 + 16 * v111);
                      goto LABEL_143;
                    }
                  }
                }
                *(_BYTE *)(v106 + 17) &= ~1u;
              }
            }
          }
        }
        v86 += 8;
      }
      while (v86 != (_QWORD *)v87);
      v86 = (_QWORD *)v149[0];
    }
    else
    {
      v88 = (int32x2_t *)&unk_1C640E000;
    }
    MEMORY[0x1CAA32FB4](v86, 8, v30);
    if (v156)
    {
      sub_1C4E43068((uint64_t)v155);
      MEMORY[0x1CAA32FB4](v155[0], 8);
      v156 = 0;
    }
    v116 = (_QWORD *)v153[0];
    if (v154)
    {
      v117 = v153[0] + ((unint64_t)v154 << 6);
      v118 = v88[212];
      do
      {
        v119 = v116[3];
        if ((v119 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v120 = v116[7];
          if (v120)
          {
            if (v120 != -8192 && v120 != -4096)
            {
              v121 = v116[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v121 = v116[6];
              v122 = (unint64_t *)v116[6];
              if (v122)
              {
                *v122 = *v122 & 7 | v121;
              }
              else
              {
                v123 = v116[7];
                v124 = ***(int32x2_t ****)v123;
                v125 = (unint64_t)v124[303];
                if (v125 <= v121)
                {
                  v126 = v124[305].u32[0];
                  if (v125 + 16 * v126 > v121)
                  {
                    v127 = v126 - 1;
                    LODWORD(v128) = v127 & ((v123 >> 4) ^ (v123 >> 9));
                    v129 = (uint64_t *)(v125 + 16 * v128);
                    v130 = *v129;
                    if (v123 == *v129)
                    {
LABEL_162:
                      *v129 = -8192;
                      v124[304] = vadd_s32(v124[304], v118);
                      v123 = v116[7];
                    }
                    else
                    {
                      v131 = 1;
                      while (v130 != -4096)
                      {
                        v132 = v128 + v131++;
                        v128 = v132 & v127;
                        v130 = *(_QWORD *)(v125 + 16 * v128);
                        if (v123 == v130)
                        {
                          v129 = (uint64_t *)(v125 + 16 * v128);
                          goto LABEL_162;
                        }
                      }
                    }
                    *(_BYTE *)(v123 + 17) &= ~1u;
                  }
                }
              }
              v119 = v116[3];
            }
          }
        }
        if (v119 != -4096 && v119 != -8192 && v119 != 0)
        {
          v134 = v116[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v134 = v116[2];
          v135 = (unint64_t *)v116[2];
          if (v135)
          {
            *v135 = *v135 & 7 | v134;
          }
          else
          {
            v136 = v116[3];
            v137 = ***(int32x2_t ****)v136;
            v138 = (unint64_t)v137[303];
            if (v138 <= v134)
            {
              v139 = v137[305].u32[0];
              if (v138 + 16 * v139 > v134)
              {
                v140 = v139 - 1;
                LODWORD(v141) = v140 & ((v136 >> 4) ^ (v136 >> 9));
                v142 = (uint64_t *)(v138 + 16 * v141);
                v143 = *v142;
                if (v136 == *v142)
                {
LABEL_181:
                  *v142 = -8192;
                  v137[304] = vadd_s32(v137[304], v118);
                  v136 = v116[3];
                }
                else
                {
                  v144 = 1;
                  while (v143 != -4096)
                  {
                    v145 = v141 + v144++;
                    v141 = v145 & v140;
                    v143 = *(_QWORD *)(v138 + 16 * v141);
                    if (v136 == v143)
                    {
                      v142 = (uint64_t *)(v138 + 16 * v141);
                      goto LABEL_181;
                    }
                  }
                }
                *(_BYTE *)(v136 + 17) &= ~1u;
              }
            }
          }
        }
        v116 += 8;
      }
      while (v116 != (_QWORD *)v117);
      v116 = (_QWORD *)v153[0];
    }
    MEMORY[0x1CAA32FB4](v116, 8);
  }
  return v16;
}

uint64_t sub_1C5B433DC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B38D60(v0, 0, -1);
}

void sub_1C5B4340C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8195078;
  sub_1C62EA844((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C5B4343C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8195078;
  sub_1C62EA844((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B43480(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::LazyValueInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::LazyValueInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
}

uint64_t sub_1C5B43540(uint64_t a1)
{
  return sub_1C6318BA0(a1 + 32);
}

uint64_t sub_1C5B43548(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  void ***v2;
  uint64_t *v3;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  void **v17;
  void **v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  void **v24;
  void *v25;
  uint64_t v26;
  char **v27;
  char *v28;
  llvm::LazyValueInfo *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  llvm *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  llvm *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const llvm::Function **v46;
  const llvm::Function *v47;
  int v48;
  int v49;
  size_t *v50;
  const void *v51;
  size_t v52;
  size_t v53;
  _BYTE *v54;
  llvm *DomTree;
  llvm *v56;
  void *v57;
  void **v58;
  unsigned int v59;
  uint64_t v60;
  llvm *v61;
  uint64_t **v62;
  void *v63[2];
  uint64_t v64;
  uint64_t v65[2];
  int v66;
  uint64_t v67;
  const llvm::Function *v68;
  char v69;
  int v70;
  void **v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD v79[6];
  _QWORD v80[2];
  void *v81;
  void *__src;
  unsigned int v83;
  _QWORD v84[2];
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  _BYTE *v95;
  void *v96;
  uint64_t v97;
  int v98;
  _BYTE v99[64];
  _QWORD v100[3];
  __int16 v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v6 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::TargetTransformInfoWrapperPass::ID);
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v81 = 0;
  __src = 0;
  v83 = 0;
  v84[0] = 0;
  v84[1] = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v9 = *(_QWORD *)(v8 + 56);
  if (!v9)
  {
    sub_1C485C2F0();
LABEL_82:
    (*((void (**)(void **))*v12 + 1))(v12);
    goto LABEL_8;
  }
  v3 = v84;
  (*(void (**)(void ***__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v9 + 48))(&v71, v9, a2);
  v2 = (void ***)(v8 + 64);
  v10 = v71;
  if (!*(_BYTE *)(v8 + 72))
  {
    *(_QWORD *)(v8 + 64) = v71;
    *(_BYTE *)(v8 + 72) = 1;
    goto LABEL_8;
  }
  v71 = 0;
  v11 = *v2;
  *v2 = v10;
  if (v11)
  {
    (*((void (**)(void **))*v11 + 1))(v11);
    v12 = v71;
    v71 = 0;
    if (v12)
      goto LABEL_82;
  }
LABEL_8:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C((uint64_t *)&v81);
  if (((*((uint64_t (**)(void **))**v2 + 11))(*v2) & 1) != 0)
    return 0;
  v14 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != llvm::TargetLibraryInfoWrapperPass::ID);
  v16 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0uLL;
  LODWORD(v75) = 0;
  *((_QWORD *)&v75 + 1) = 0;
  v76 = 0;
  LODWORD(v77) = 0;
  llvm::TargetLibraryAnalysis::run(v16 + 32, (uint64_t)a2, (uint64_t)&v81);
  *(_QWORD *)(v16 + 240) = v81;
  v17 = (void **)(v16 + 240);
  if (*(_BYTE *)(v16 + 320))
  {
    if (v17 == &v81)
    {
LABEL_25:
      *(_DWORD *)(v16 + 312) = v89;
      goto LABEL_26;
    }
    v18 = (void **)(v16 + 248);
    v19 = v83;
    v20 = *(unsigned int *)(v16 + 256);
    if (v20 >= v83)
    {
      if (v83)
        memmove(*v18, __src, 8 * v83);
      goto LABEL_24;
    }
    if (*(_DWORD *)(v16 + 260) < v83)
    {
      *(_DWORD *)(v16 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 248, v16 + 264, v19, 8);
    }
    else if ((_DWORD)v20)
    {
      memmove(*v18, __src, 8 * v20);
      goto LABEL_22;
    }
    v20 = 0;
LABEL_22:
    if (v20 != v83)
      memcpy((char *)*v18 + 8 * v20, (char *)__src + 8 * v20, 8 * v83 - 8 * v20);
LABEL_24:
    *(_DWORD *)(v16 + 256) = v19;
    goto LABEL_25;
  }
  v57 = (void *)(v16 + 264);
  *(_QWORD *)(v16 + 248) = v16 + 264;
  v58 = (void **)(v16 + 248);
  *(_QWORD *)(v16 + 256) = 0x600000000;
  v59 = v83;
  if (v83 && v58 != &__src)
  {
    if (v83 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 248, v16 + 264, v83, 8);
      v60 = v83;
      if (!v83)
      {
LABEL_79:
        *(_DWORD *)(v16 + 256) = v59;
        goto LABEL_80;
      }
      v57 = *v58;
    }
    else
    {
      v60 = v83;
    }
    memcpy(v57, __src, 8 * v60);
    goto LABEL_79;
  }
LABEL_80:
  *(_DWORD *)(v16 + 312) = v89;
  *(_BYTE *)(v16 + 320) = 1;
LABEL_26:
  if (__src != v84)
    free(__src);
  MEMORY[0x1CAA32FB4](*((_QWORD *)&v75 + 1), 8);
  sub_1C4D8B440((uint64_t *)&v74);
  sub_1C4D8B52C((uint64_t *)&v71);
  v21 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != llvm::DominatorTreeWrapperPass::ID);
  v23 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), llvm::DominatorTreeWrapperPass::ID);
  v24 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v25 = *v24;
    v24 += 2;
  }
  while (v25 != &llvm::LazyValueInfoWrapperPass::ID);
  v26 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v24 - 1) + 96))(*(v24 - 1), &llvm::LazyValueInfoWrapperPass::ID);
  v27 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v28 = *v27;
    v27 += 2;
  }
  while (v28 != llvm::AAResultsWrapperPass::ID);
  v29 = (llvm::LazyValueInfo *)(v26 + 32);
  v30 = v23 + 32;
  v31 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v27 - 1) + 96))(*(v27 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v81 = &v83;
  __src = (void *)0x1000000000;
  v91 = 0;
  v90 = 0;
  v92 = v30;
  v93 = 0;
  v94 = 1;
  v95 = v99;
  v96 = v99;
  v97 = 8;
  v98 = 0;
  memset(v100, 0, sizeof(v100));
  v101 = 0;
  llvm::Function::getEntryCount((uint64_t ***)a2, 0, (uint64_t)&v71);
  if ((_BYTE)v73)
  {
    v63[0] = &v64;
    v63[1] = (void *)0x100000000;
    v70 = 0;
    v65[0] = 0;
    v65[1] = 0;
    v66 = 0;
    v69 = 0;
    v67 = 0;
    v68 = a2;
    sub_1C53BA620((uint64_t)v63, 0);
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0u;
    v75 = 0u;
    v76 = 0;
    v77 = v79;
    v78 = 0x400000000;
    v79[4] = v80;
    v79[5] = 0;
    v80[0] = 0;
    v80[1] = 1;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v71, (uint64_t)v63);
    sub_1C4DC4E38(v65);
    if (v63[0] != &v64)
      free(v63[0]);
    v32 = operator new();
    sub_1C4EEA178(v32, a2, (uint64_t)&v71, (uint64_t *)v17, 0, 0);
    v33 = (uint64_t **)operator new();
    *v33 = 0;
    llvm::BlockFrequencyInfo::calculate(v33, a2);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v71);
  }
  else
  {
    v33 = 0;
    v32 = 0;
  }
  llvm::Function::getEntryCount((uint64_t ***)a2, 0, (uint64_t)&v71);
  v61 = (llvm *)v32;
  v62 = v33;
  v13 = llvm::JumpThreadingPass::runImpl((uint64_t)a1 + 32, a2, (uint64_t)v17, (uint64_t)v2, (uint64_t)v29, v31, (uint64_t)&v81, v73, (uint64_t *)&v62, (uint64_t *)&v61);
  v34 = v61;
  v61 = 0;
  if (v34)
  {
    v35 = sub_1C4DC0BBC((uint64_t)v34);
    v34 = (llvm *)MEMORY[0x1CAA32FC0](v35, 0x1060C40D526B124);
  }
  v36 = v62;
  v62 = 0;
  if (v36)
  {
    v37 = *v36;
    *v36 = 0;
    if (v37)
      (*(void (**)(uint64_t *))(*v37 + 8))(v37);
    v34 = (llvm *)MEMORY[0x1CAA32FC0](v36, 0x20C4093837F09);
  }
  if (!byte_1ED81DF20)
    goto LABEL_46;
  v39 = llvm::dbgs(v34);
  v40 = v39;
  v41 = *((_QWORD *)v39 + 4);
  if ((unint64_t)(*((_QWORD *)v39 + 3) - v41) > 0x11)
  {
    *(_WORD *)(v41 + 16) = 10016;
    *(_OWORD *)v41 = *(_OWORD *)"LVI for function '";
    *((_QWORD *)v39 + 4) += 18;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v39, "LVI for function '", 0x12uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v42 = ***(_QWORD ***)a2;
    v43 = *(_QWORD *)(v42 + 152);
    v44 = *(unsigned int *)(v42 + 168);
    if ((_DWORD)v44)
    {
      LODWORD(v45) = (v44 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v46 = (const llvm::Function **)(v43 + 16 * v45);
      v47 = *v46;
      if (*v46 == a2)
        goto LABEL_61;
      v48 = 1;
      while (v47 != (const llvm::Function *)-4096)
      {
        v49 = v45 + v48++;
        v45 = v49 & (v44 - 1);
        v47 = *(const llvm::Function **)(v43 + 16 * v45);
        if (v47 == a2)
        {
          v46 = (const llvm::Function **)(v43 + 16 * v45);
          goto LABEL_61;
        }
      }
    }
    v46 = (const llvm::Function **)(v43 + 16 * v44);
LABEL_61:
    v50 = (size_t *)v46[1];
    v53 = *v50;
    v51 = v50 + 2;
    v52 = v53;
    v54 = (_BYTE *)*((_QWORD *)v40 + 4);
    if (v53 <= *((_QWORD *)v40 + 3) - (_QWORD)v54)
    {
      if (v52)
      {
        memcpy(v54, v51, v52);
        v54 = (_BYTE *)(*((_QWORD *)v40 + 4) + v52);
        *((_QWORD *)v40 + 4) = v54;
      }
    }
    else
    {
      v40 = llvm::raw_ostream::write(v40, (const char *)v51, v52);
      v54 = (_BYTE *)*((_QWORD *)v40 + 4);
    }
    goto LABEL_65;
  }
  v54 = (_BYTE *)*((_QWORD *)v40 + 4);
LABEL_65:
  if (*((_QWORD *)v40 + 3) - (_QWORD)v54 > 2uLL)
  {
    v54[2] = 10;
    *(_WORD *)v54 = 14887;
    *((_QWORD *)v40 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v40, "':\n", 3uLL);
  }
  DomTree = (llvm *)llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)&v81);
  v56 = llvm::dbgs(DomTree);
  llvm::LazyValueInfo::printLVI(v29, a2, DomTree, v56);
LABEL_46:
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v81);
  v71 = (void **)v100;
  sub_1C50B10F0(&v71);
  if (v96 != v95)
    free(v96);
  if (v81 != &v83)
    free(v81);
  return v13;
}

BOOL sub_1C5B43D80(unsigned __int8 *a1)
{
  int v1;
  int v2;
  unsigned __int8 *v3;
  _BOOL8 result;

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v1 & 0xFE) == 0x12)
    v1 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
  result = 0;
  if (v1 == 269)
  {
    v2 = a1[16];
    if (v2 == 56)
      return 1;
    if (v2 == 85)
    {
      v3 = (unsigned __int8 *)*((_QWORD *)a1 - 4);
      if (v3)
      {
        if (v3[16] <= 0x14u && (llvm::Constant::isNullValue((llvm::Constant *)v3) & 1) != 0)
          return 1;
      }
    }
  }
  return result;
}

BOOL sub_1C5B43DF4(unsigned __int8 *a1)
{
  int v1;
  int v2;
  unsigned __int8 *v3;
  _BOOL8 result;

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v1 & 0xFE) == 0x12)
    v1 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
  result = 0;
  if (v1 == 269)
  {
    v2 = a1[16];
    if (v2 == 57)
      return 1;
    if (v2 == 85)
    {
      v3 = (unsigned __int8 *)*((_QWORD *)a1 - 8);
      if (v3)
      {
        if (v3[16] <= 0x14u && llvm::Constant::isOneValue((llvm::Constant *)v3))
          return 1;
      }
    }
  }
  return result;
}

__n128 sub_1C5B43E68(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED835E50, "jump-threading-freeze-select-cond", 0x21uLL);
  result = *a1;
  xmmword_1ED835E70 = (__int128)*a1;
  v7 = *a2;
  byte_1ED835ED0 = **a2;
  byte_1ED835EE1 = 1;
  byte_1ED835EE0 = *v7;
  word_1ED835E5A = (32 * (*a3 & 3)) | word_1ED835E5A & 0xFF9F;
  return result;
}

__n128 sub_1C5B43EEC(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81DF60, "jump-threading-across-loop-headers", 0x22uLL);
  result = *a1;
  xmmword_1ED81DF80 = (__int128)*a1;
  v7 = *a2;
  byte_1ED81DFE0 = **a2;
  byte_1ED81DFF1 = 1;
  byte_1ED81DFF0 = *v7;
  word_1ED81DF6A = (32 * (*a3 & 3)) | word_1ED81DF6A & 0xFF9F;
  return result;
}

BOOL sub_1C5B43F70(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 160))
  {
    v4 = *(_QWORD **)(a1 + 152);
    v2 = (_QWORD *)(a1 + 152);
    v3 = v4;
    if (!v4)
      goto LABEL_13;
    v5 = v2;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 == v2 || v5[4] > a2)
LABEL_13:
      v5 = v2;
    v9 = v5 == v2;
  }
  else
  {
    v10 = *(_QWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(_QWORD *)a1 + 8 * v11;
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      while (*v10 != a2)
      {
        ++v10;
        v13 -= 8;
        if (!v13)
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      v10 = (_QWORD *)v12;
    }
    v9 = v10 == (_QWORD *)v12;
  }
  return !v9;
}

uint64_t sub_1C5B43FFC()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Max block size to duplicate for jump threading";
  v4.n128_u64[1] = 46;
  v3 = &v2;
  v1 = 1;
  v2 = 6;
  sub_1C61D8E94((uint64_t)&unk_1ED835D90, "jump-threading-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED835D90, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"The number of predecessors to search for a stronger condition to use to thread over"
                                     " a weaker condition";
  v4.n128_u64[1] = 102;
  v1 = 1;
  v2 = 3;
  v3 = &v2;
  sub_1C6318CDC((__int128 *)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81DDE0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Print the LazyValueInfo cache after JumpThreading";
  v4.n128_u64[1] = 49;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED81DEA0, "print-lvi-after-jump-threading", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81DEA0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Freeze the condition when unfolding select";
  v4.n128_u64[1] = 42;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6318DB8(&v4, (char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED835E50, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Allow JumpThreading to thread across loop headers, for testing";
  v4.n128_u64[1] = 62;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6318E5C(&v4, (char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81DF60, &dword_1C475E000);
}

_QWORD *llvm::LICMPass::run@<X0>(uint64_t *a1@<X0>, llvm::Loop *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v8;
  _QWORD *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[16];
  uint64_t *v15;

  if (!*(_QWORD *)(a3 + 72))
    llvm::report_fatal_error((llvm *)"LICM requires MemorySSA (loop-mssa)", (const char *)1);
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v14, *(const llvm::Function **)(**((_QWORD **)a2 + 4) + 56));
  v8 = *((_BYTE *)a1 + 8);
  v12 = *a1;
  v13 = v8;
  if ((sub_1C5B4430C((uint64_t)&v12, a2, *(llvm::Instruction **)a3, *(uint64_t **)(a3 + 24), *(_QWORD *)(a3 + 16), *(uint64_t **)(a3 + 56), *(uint64_t **)(a3 + 40), *(_QWORD **)(a3 + 48), *(int32x2_t **)(a3 + 32), *(llvm::MemorySSA **)(a3 + 72), (llvm::SinkAndHoistLICMFlags *)v14, 0) & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a4);
    sub_1C4DDB144(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a4, (uint64_t)&llvm::LoopAnalysis::Key);
    result = sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    v11 = *v10;
    *v10 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return (_QWORD *)MEMORY[0x1CAA32FC0](v10, 0x20C4093837F09);
  }
  return result;
}

uint64_t sub_1C5B4430C(uint64_t a1, llvm::Loop *a2, llvm::Instruction *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, _QWORD *a8, int32x2_t *a9, llvm::MemorySSA *a10, llvm::SinkAndHoistLICMFlags *a11, char a12)
{
  unsigned int OptionalBoolLoopAttribute;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t LoopPredecessor;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t hasDedicatedExits;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t *v43;
  int32x2_t *v44;
  llvm::DataLayout *v45;
  char v46;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t j;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  llvm::Loop *v68;
  uint64_t *v69;
  unsigned int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t *k;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  void *v79;
  void **v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  unsigned __int8 *v87;
  char *v88;
  uint64_t v89;
  llvm::ScalarEvolution *v90;
  char v91;
  char v92;
  llvm::Instruction *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int64x2_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t (**v101)(llvm::ICFLoopSafetyInfo *__hidden, const llvm::BasicBlock *);
  uint64_t v102[2];
  int v103;
  char v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _BYTE v113[20];
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  int v118;
  _BYTE v119[128];
  llvm::Loop *v120;
  llvm::Instruction *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  llvm::Instruction *v129;
  _QWORD v130[2];
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  _QWORD v135[4];
  _QWORD v136[6];
  _QWORD v137[2];
  void *v138;
  uint64_t v139;
  _BYTE v140[64];
  void *v141;
  uint64_t v142;
  _BYTE v143[64];
  void *v144;
  uint64_t v145;
  _BYTE v146[64];
  uint64_t *v147;
  char *v148[2];
  uint64_t v149;
  _BYTE *v150;
  void *v151;
  uint64_t v152;
  int v153;
  _BYTE v154[64];
  void *v155;
  uint64_t v156;
  _BYTE v157[64];
  _QWORD **v158;
  _QWORD *v159[2];
  uint64_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  void *v165;
  uint64_t v166;
  _BYTE v167[64];
  char *v168;
  uint64_t v169;
  _QWORD v170[10];

  v170[8] = *MEMORY[0x1E0C80C00];
  llvm::MemorySSA::ensureOptimizedUses(a10);
  OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(a2, "llvm.licm.disable", 0x11uLL);
  if (OptionalBoolLoopAttribute <= 0x100)
    LOBYTE(OptionalBoolLoopAttribute) = 0;
  if ((_BYTE)OptionalBoolLoopAttribute)
  {
    LOBYTE(v21) = 0;
    return v21 & 1;
  }
  v95 = a5;
  v96 = a1;
  v94 = a7;
  v22 = *((_QWORD *)a2 + 4);
  v23 = *((_QWORD *)a2 + 5);
  if (v23 != v22)
  {
    while (2)
    {
      for (i = *(_QWORD *)(*(_QWORD *)v22 + 48); i != *(_QWORD *)v22 + 40; i = *(_QWORD *)(i + 8))
      {
        v25 = i - 24;
        if (!i)
          v25 = 0;
        if (*(_BYTE *)(v25 + 16) == 84)
        {
          v26 = *(_QWORD *)(v25 - 32);
          if (v26)
          {
            if (!*(_BYTE *)(v26 + 16)
              && *(_QWORD *)(v26 + 24) == *(_QWORD *)(v25 + 72)
              && (*(_BYTE *)(v26 + 33) & 0x20) != 0
              && *(_DWORD *)(*(_QWORD *)(i - 56) + 36) == 48)
            {
              v27 = 1;
              goto LABEL_19;
            }
          }
        }
      }
      v22 += 8;
      if (v22 != v23)
        continue;
      break;
    }
  }
  v27 = 0;
LABEL_19:
  v147 = (uint64_t *)a10;
  v148[0] = (char *)&v149;
  v148[1] = (char *)0x1000000000;
  v150 = v154;
  v151 = v154;
  v152 = 8;
  v153 = 0;
  v155 = v157;
  v156 = 0x800000000;
  v159[1] = 0;
  v159[0] = 0;
  v158 = v159;
  llvm::SinkAndHoistLICMFlags::SinkAndHoistLICMFlags((uint64_t)v113, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 1, (uint64_t)a2, (uint64_t)a10);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!LoopPredecessor)
    goto LABEL_26;
  v29 = *(_QWORD *)(LoopPredecessor + 40);
  if (v29 == LoopPredecessor + 40)
    goto LABEL_26;
  if (v29)
    v30 = v29 - 24;
  else
    v30 = 0;
  if (*(_BYTE *)(v30 + 16) == 30)
  {
    if ((*(_DWORD *)(v30 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_26:
      v31 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    v31 = 0;
    switch(*(_BYTE *)(v30 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_32;
      case 0x1E:
        __break(1u);
        goto LABEL_158;
      case 0x1F:
        v32 = (*(_DWORD *)(v30 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_158:
        v32 = (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v32 = *(_DWORD *)(v30 + 80) + 1;
        break;
      default:
        goto LABEL_26;
    }
    if (v32 != 1)
      goto LABEL_26;
  }
  v31 = LoopPredecessor;
LABEL_32:
  v98 = v27;
  v102[1] = 0;
  v103 = 0;
  v101 = &off_1E8139EE0;
  v102[0] = 0;
  v104 = 0;
  v107 = 0;
  v108 = 0;
  v105 = &unk_1E81384F8;
  v106 = 0;
  v111 = 0;
  v112 = 0;
  v109 = &unk_1E8138520;
  v110 = 0;
  llvm::ICFLoopSafetyInfo::computeLoopSafetyInfo((int32x2_t *)&v101, a2);
  hasDedicatedExits = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(a2);
  v34 = 0;
  if (!(_DWORD)hasDedicatedExits)
    goto LABEL_47;
  if (!a12)
  {
    v35 = *(_QWORD *)(v95 + 24);
    v36 = *(unsigned int *)(v95 + 40);
    if ((_DWORD)v36)
    {
      v37 = **((_QWORD **)a2 + 4);
      LODWORD(v38) = ((v37 >> 4) ^ (v37 >> 9)) & (v36 - 1);
      v39 = (uint64_t *)(v35 + 16 * v38);
      v40 = *v39;
      if (v37 == *v39)
      {
LABEL_42:
        if (v39 == (uint64_t *)(v35 + 16 * v36))
          v43 = 0;
        else
          v43 = (uint64_t *)v39[1];
        hasDedicatedExits = llvm::sinkRegion(v43, a3, a4, (llvm::AAResults *)v95, a6, v94, a8, (uint64_t)a2, (int32x2_t **)&v147, (uint64_t)&v101, (uint64_t)v113, a11, 0);
        goto LABEL_46;
      }
      v41 = 1;
      while (v40 != -4096)
      {
        v42 = v38 + v41++;
        v38 = v42 & (v36 - 1);
        v40 = *(_QWORD *)(v35 + 16 * v38);
        if (v37 == v40)
        {
          v39 = (uint64_t *)(v35 + 16 * v38);
          goto LABEL_42;
        }
      }
    }
    v39 = (uint64_t *)(v35 + 16 * v36);
    goto LABEL_42;
  }
  hasDedicatedExits = llvm::sinkRegionForLoopNest(hasDedicatedExits, a3, a4, v95, a6, v94, a8, a2, (int32x2_t **)&v147, (uint64_t)&v101, (uint64_t)v113, a11);
LABEL_46:
  v34 = hasDedicatedExits;
LABEL_47:
  v113[16] = 0;
  if (!v31)
  {
    v44 = a9;
    LOBYTE(v21) = v34;
    goto LABEL_55;
  }
  v44 = a9;
  v45 = (llvm::DataLayout *)v94;
  v21 = v34 | llvm::hoistRegion(hasDedicatedExits, a3, (llvm::LoopInfo *)a4, (llvm::DominatorTree *)v95, a6, (llvm::DSOLocalEquivalent **)v94, (uint64_t)a2, (int32x2_t **)&v147, a9, (int32x2_t *)&v101, (uint64_t)v113, a11, a12, *(_BYTE *)(a1 + 8));
  if (!byte_1ED81E0B0 && llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(a2))
  {
    v46 = v98;
    if (v113[0])
      v46 = 1;
    if ((v46 & 1) == 0)
    {
      v91 = v21;
      v144 = v146;
      v145 = 0x800000000;
      sub_1C4EAEA40(a2, (uint64_t)&v144);
      v48 = v145;
      v49 = a1;
      if ((_DWORD)v145)
      {
        v50 = 0;
        v51 = v144;
        do
        {
          v52 = *(_QWORD *)(*(_QWORD *)((char *)v144 + v50) + 40);
          if (v52)
            v53 = v52 - 24;
          else
            v53 = 0;
          if (*(unsigned __int8 *)(v53 + 16) - 29 >= 0xB)
            v53 = 0;
          if (*(_BYTE *)(v53 + 16) == 38)
            goto LABEL_155;
          v50 += 8;
        }
        while (8 * v145 != v50);
      }
      v141 = v143;
      v142 = 0x800000000;
      v138 = v140;
      v139 = 0x800000000;
      if (v145 < 9)
      {
        v54 = 8;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v145, 8);
        v48 = v145;
        v54 = HIDWORD(v139);
      }
      if (v54 < v48)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v48, 8);
        v48 = v145;
      }
      v93 = a3;
      if (v48)
      {
        v55 = (char *)v144;
        v56 = (char *)v144 + 8 * v48;
        do
        {
          v57 = *(_QWORD *)v55 + 40;
          for (j = *(_QWORD *)(*(_QWORD *)v55 + 48); ; j = *(_QWORD *)(j + 8))
          {
            if (j == v57)
              goto LABEL_91;
            v59 = j - 24;
            if (!j)
              v59 = 0;
            if (*(_BYTE *)(v59 + 16) != 83)
              break;
          }
          v60 = *(unsigned __int8 *)(j - 8) - 38;
          v61 = v60 > 0x38;
          v62 = (1 << v60) & 0x100060000000001;
          if (v61 || v62 == 0)
            v57 = j;
          else
            v57 = *(_QWORD *)(j + 8);
LABEL_91:
          v64 = v142;
          if (v142 >= (unint64_t)HIDWORD(v142))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 8);
            v64 = v142;
          }
          v65 = v57 - 24;
          if (!v57)
            v65 = 0;
          *((_QWORD *)v141 + v64) = v65;
          LODWORD(v142) = v142 + 1;
          v66 = v139;
          if (v139 >= (unint64_t)HIDWORD(v139))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 8);
            v66 = v139;
          }
          a3 = v93;
          *((_QWORD *)v138 + v66) = 0;
          LODWORD(v139) = v139 + 1;
          v55 += 8;
        }
        while (v55 != v56);
      }
      v67 = 0;
      v130[1] = 0;
      v130[0] = 0;
      v131 = 0;
      v133 = 0;
      v132 = 0;
      v134 = 0;
      v135[1] = 0;
      v135[0] = 0;
      v135[2] = v136;
      v135[3] = 0x400000000;
      v137[0] = 0;
      v137[1] = 1;
      v97 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v136[4] = v137;
      v136[5] = 0;
      v68 = (llvm::Loop *)v95;
      while (1)
      {
        v92 = v67;
        v129 = a3;
        v121 = a3;
        v122 = (uint64_t)&v122;
        v123 = &v122;
        v127 = 0;
        v128 = 0;
        v124 = 0;
        v125 = 0;
        v126 = 0;
        v120 = a2;
        v115 = v119;
        v116 = v119;
        v117 = 16;
        v118 = 0;
        v160 = (uint64_t)&v120;
        v161.i64[0] = (uint64_t)&v115;
        v161.i64[1] = (uint64_t)&v121;
        sub_1C5B4BF58((uint64_t)a10, *((_QWORD **)a2 + 4), *((_QWORD **)a2 + 5), (uint64_t (*)(uint64_t, _QWORD))sub_1C5B4C068, (uint64_t)&v160);
        v168 = (char *)v170;
        v169 = 0x800000000;
        v69 = v123;
        if (v123 == &v122)
          goto LABEL_137;
        v70 = 0;
        do
        {
          if (!v69[4] && (v69[8] & 0x60000000) == 0x20000000)
          {
            if (v70 >= HIDWORD(v169))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)v170, v70 + 1, 8);
              v70 = v169;
            }
            *(_QWORD *)&v168[8 * v70] = v69;
            v70 = v169 + 1;
            LODWORD(v169) = v169 + 1;
          }
          v69 = (uint64_t *)v69[1];
        }
        while (v69 != &v122);
        if (!v70)
        {
LABEL_137:
          v99 = (char *)&v101;
          v100 = 0;
        }
        else
        {
          v160 = (uint64_t)&v115;
          v161.i64[0] = (uint64_t)&v168;
          v161.i64[1] = (uint64_t)&v129;
          sub_1C5B4BF58((uint64_t)a10, *((_QWORD **)a2 + 4), *((_QWORD **)a2 + 5), (uint64_t (*)(uint64_t, _QWORD))sub_1C5B4C0E8, (uint64_t)&v160);
          v99 = (char *)&v101;
          v100 = 0;
          if ((_DWORD)v169)
          {
            v71 = v168;
            v72 = &v168[8 * v169];
            while (2)
            {
              v73 = *(_QWORD *)v71;
              v160 = 1;
              v161 = v97;
              v162 = v97;
              v163 = v97;
              v164 = v97;
              v165 = v167;
              v166 = 0x800000000;
              for (k = *(uint64_t **)(v73 + 16); k; k = (uint64_t *)k[2])
              {
                v114 = *k;
                sub_1C56D2D50((uint64_t)&v160, &v114);
              }
              v75 = v99;
              if (v100 >= HIDWORD(v100))
              {
                v84 = v100 + 1;
                if (v99 <= (char *)&v160 && &v99[152 * v100] > (char *)&v160)
                {
                  v76 = a4;
                  v85 = (char *)&v160 - v99;
                  sub_1C5B4C1EC((uint64_t)&v99, v84);
                  v75 = v99;
                  v77 = (uint64_t *)&v99[v85];
                }
                else
                {
                  v76 = a4;
                  sub_1C5B4C1EC((uint64_t)&v99, v84);
                  v77 = &v160;
                  v75 = v99;
                }
              }
              else
              {
                v76 = a4;
                v77 = &v160;
              }
              v78 = &v75[152 * v100];
              *(_QWORD *)v78 = 1;
              *(int64x2_t *)(v78 + 8) = v97;
              *(int64x2_t *)(v78 + 24) = v97;
              *(int64x2_t *)(v78 + 40) = v97;
              *(int64x2_t *)(v78 + 56) = v97;
              sub_1C5B4C3DC((unsigned int *)v78, (unsigned int *)v77);
              v79 = v78 + 88;
              *((_QWORD *)v78 + 9) = v78 + 88;
              v80 = (void **)(v78 + 72);
              *((_QWORD *)v78 + 10) = 0x800000000;
              v81 = *((_DWORD *)v77 + 20);
              if (!v81 || v80 == (void **)(v77 + 9))
                goto LABEL_124;
              v82 = (uint64_t *)v77[9];
              if (v82 == v77 + 11)
              {
                if (v81 < 9)
                {
                  v83 = *((unsigned int *)v77 + 20);
                  goto LABEL_121;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v78 + 72), (uint64_t)(v78 + 88), *((unsigned int *)v77 + 20), 8);
                v83 = *((unsigned int *)v77 + 20);
                if ((_DWORD)v83)
                {
                  v82 = (uint64_t *)v77[9];
                  v79 = *v80;
LABEL_121:
                  memcpy(v79, v82, 8 * v83);
                }
                *((_DWORD *)v78 + 20) = v81;
              }
              else
              {
                *((_QWORD *)v78 + 9) = v82;
                *((_DWORD *)v78 + 20) = v81;
                *((_DWORD *)v78 + 21) = *((_DWORD *)v77 + 21);
                v77[9] = (uint64_t)(v77 + 11);
                *((_DWORD *)v77 + 21) = 0;
              }
              *((_DWORD *)v77 + 20) = 0;
LABEL_124:
              LODWORD(v100) = v100 + 1;
              if (v165 != v167)
                free(v165);
              a4 = v76;
              v45 = (llvm::DataLayout *)v94;
              v49 = v96;
              if ((v160 & 1) == 0)
                MEMORY[0x1CAA32FB4](v161.i64[0], 8);
              v71 += 8;
              v68 = (llvm::Loop *)v95;
              if (v71 == v72)
                break;
              continue;
            }
          }
        }
        if (v168 != (char *)v170)
          free(v168);
        if (v116 != v115)
          free(v116);
        sub_1C4D992E4((uint64_t)&v121);
        if (!(_DWORD)v100)
        {
          sub_1C5B4C4C8(&v99);
LABEL_148:
          v44 = a9;
          if ((v92 & 1) != 0)
            llvm::formLCSSARecursively(a2, v68, (const llvm::DominatorTree *)a4, (const llvm::LoopInfo *)a9, v90);
          sub_1C4926AE8((uint64_t)v135);
          MEMORY[0x1CAA32FB4](v132, 8);
          MEMORY[0x1CAA32FB4](v130[0], 8);
          if (v138 != v140)
            free(v138);
          LOBYTE(v21) = v91 | v92;
          if (v141 != v143)
            free(v141);
          v51 = v144;
LABEL_155:
          if (v51 != v146)
            free(v51);
          break;
        }
        v86 = 0;
        v87 = (unsigned __int8 *)v68;
        v88 = v99;
        v89 = 152 * v100;
        do
        {
          v86 |= llvm::promoteLoopAccessesToScalars((uint64_t)v88, (uint64_t)&v144, (uint64_t)&v141, (uint64_t)&v138, (uint64_t)v130, (uint64_t)a4, v87, v45, (uint64_t)a2, &v147, (int32x2_t *)&v101, a11, *(_BYTE *)(v49 + 8));
          v88 += 152;
          v89 -= 152;
        }
        while (v89);
        sub_1C5B4C4C8(&v99);
        v67 = 1;
        a3 = v93;
        v68 = (llvm::Loop *)v87;
        if ((v86 & 1) == 0)
          goto LABEL_148;
      }
    }
  }
LABEL_55:
  if (v44 && (v21 & 1) != 0)
    sub_1C4F3333C(&v44[86]);
  v101 = &off_1E8139EE0;
  v109 = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](v110, 8);
  v105 = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](v106, 8);
  v101 = (uint64_t (**)(llvm::ICFLoopSafetyInfo *__hidden, const llvm::BasicBlock *))&unk_1E813A258;
  sub_1C4EF1108(v102);
  sub_1C61247C0((uint64_t)&v158, v159[0]);
  if (v155 != v157)
    free(v155);
  if (v151 != v150)
    free(v151);
  sub_1C4EE41F8(v148);
  return v21 & 1;
}

_QWORD *llvm::LNICMPass::run@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v8;
  _QWORD *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[16];
  uint64_t *v15;

  if (!*(_QWORD *)(a3 + 72))
    llvm::report_fatal_error((llvm *)"LNICM requires MemorySSA (loop-mssa)", (const char *)1);
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v14, *(const llvm::Function **)(**(_QWORD **)(**(_QWORD **)(a2 + 8) + 32) + 56));
  v8 = *((_BYTE *)a1 + 8);
  v12 = *a1;
  v13 = v8;
  if ((sub_1C5B4430C((uint64_t)&v12, **(llvm::Loop ***)(a2 + 8), *(llvm::Instruction **)a3, *(uint64_t **)(a3 + 24), *(_QWORD *)(a3 + 16), *(uint64_t **)(a3 + 56), *(uint64_t **)(a3 + 40), *(_QWORD **)(a3 + 48), *(int32x2_t **)(a3 + 32), *(llvm::MemorySSA **)(a3 + 72), (llvm::SinkAndHoistLICMFlags *)v14, 1) & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a4);
    sub_1C4DDB144(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a4, (uint64_t)&llvm::LoopAnalysis::Key);
    result = sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    v11 = *v10;
    *v10 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return (_QWORD *)MEMORY[0x1CAA32FC0](v10, 0x20C4093837F09);
  }
  return result;
}

uint64_t sub_1C5B45148(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeLoopPassPass(a1, a2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  llvm::initializeLazyBFIPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Loop Invariant Code Motion";
  *(_QWORD *)(v5 + 8) = 26;
  *(_QWORD *)(v5 + 16) = "licm";
  *(_QWORD *)(v5 + 24) = 4;
  *(_QWORD *)(v5 + 32) = &unk_1ED81E020;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5B4B820;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5B451FC(uint64_t a1, int a2, int a3, char a4)
{
  unint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  _QWORD v10[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81E020;
  *(_QWORD *)a1 = &off_1E8195118;
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 36) = a4;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v8 = qword_1ED830BC0[0];
  v6 = atomic_load(&qword_1ED81E028);
  if (v6 != -1)
  {
    v10[0] = sub_1C5B45148;
    v10[1] = &v8;
    v9 = v10;
    std::__call_once(&qword_1ED81E028, &v9, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::SinkAndHoistLICMFlags::SinkAndHoistLICMFlags(llvm::SinkAndHoistLICMFlags *this, char a2, llvm::Loop *a3, llvm::MemorySSA *a4)
{
  return llvm::SinkAndHoistLICMFlags::SinkAndHoistLICMFlags((uint64_t)this, dword_1ED835F90, dword_1ED836050, a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::SinkAndHoistLICMFlags::SinkAndHoistLICMFlags(uint64_t result, int a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_BYTE *)(result + 16) = a4;
  if (a6)
  {
    v6 = *(_QWORD **)(a5 + 32);
    v7 = *(_QWORD **)(a5 + 40);
    if (v7 != v6)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a6 + 48);
      v10 = *(unsigned int *)(a6 + 64);
      v11 = v10 - 1;
      do
      {
        if ((_DWORD)v10)
        {
          LODWORD(v12) = ((*v6 >> 4) ^ (*v6 >> 9)) & v11;
          v13 = (uint64_t *)(v9 + 16 * v12);
          v14 = *v13;
          if (*v6 == *v13)
          {
LABEL_10:
            if (v13 != (uint64_t *)(v9 + 16 * v10))
            {
              v17 = v13[1];
              if (v17)
              {
                v18 = v13[1];
                while (1)
                {
                  v18 = *(_QWORD *)(v18 + 8);
                  if (v18 == v17)
                    break;
                  if (++v8 > a3)
                  {
                    *(_BYTE *)result = 1;
                    return result;
                  }
                }
              }
            }
          }
          else
          {
            v15 = 1;
            while (v14 != -4096)
            {
              v16 = v12 + v15++;
              v12 = v16 & v11;
              v14 = *(_QWORD *)(v9 + 16 * v12);
              if (*v6 == v14)
              {
                v13 = (uint64_t *)(v9 + 16 * v12);
                goto LABEL_10;
              }
            }
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t llvm::sinkRegion(uint64_t *a1, llvm::Instruction *a2, uint64_t *a3, llvm::AAResults *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, int32x2_t **a9, uint64_t a10, uint64_t a11, llvm::SinkAndHoistLICMFlags *a12, llvm::DominatorTree *a13)
{
  llvm::DominatorTree *v13;
  uint64_t *v16;
  char *v17;
  llvm::DominatorTree *v18;
  llvm::DominatorTree *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  llvm::DominatorTree *v28;
  _QWORD *v29;
  uint64_t ***v30;
  uint64_t v31;
  int v32;
  uint64_t ***v33;
  int v34;
  unint64_t v35;
  uint64_t *v36;
  __int32 v37;
  uint64_t v38;
  __int8 *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  __int32 v47;
  uint64_t v48;
  __int8 *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  llvm::DominatorTree *v54;
  __int32 v55;
  int32x2_t v56;
  __int32 v57;
  uint64_t v58;
  uint64_t ***v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  BOOL v65;
  BOOL v66;
  _BOOL4 v67;
  uint64_t v68;
  int v69;
  int v70;
  BOOL v71;
  uint64_t **v72;
  int v73;
  uint64_t **v74;
  uint64_t **v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  BOOL v95;
  _BOOL4 v96;
  int v97;
  llvm::BasicBlock *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  llvm::UndefValue **v102;
  char v103;
  llvm::UndefValue **v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  llvm::Type *v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t ****v117;
  llvm::UndefValue *v118;
  llvm::UndefValue *v119;
  llvm::UndefValue ***v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  uint64_t i;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  BOOL v139;
  BOOL v140;
  uint64_t v141;
  unsigned int v142;
  BOOL v143;
  llvm::BasicBlock *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  llvm::BasicBlock *v151;
  unsigned int v152;
  BOOL v153;
  uint64_t v155;
  uint64_t v156;
  int v157;
  __int32 v158;
  __int32 v159;
  uint64_t ***v160;
  int v161;
  int v162;
  llvm::MemoryAccess *v163;
  uint64_t **v164;
  uint64_t **v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t **v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  void **v172;
  char *v173;
  unint64_t v174;
  void **v175;
  uint64_t j;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int64x2_t *v189;
  unsigned int v190;
  llvm::Value *v191;
  __int32 v192;
  int32x2_t v193;
  __int32 v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  llvm::MemoryAccess *v199;
  uint64_t v200;
  _QWORD *v201;
  int v202;
  uint64_t ***v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t k;
  uint64_t v211;
  uint64_t v212;
  llvm::Value *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  char *v218;
  uint64_t v219;
  char *v220;
  void *v221;
  uint64_t *v222;
  uint64_t *m;
  uint64_t *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t ***v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t ****v238;
  uint64_t ***v239;
  int v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  int32x2_t *v244;
  __int32 v245;
  int32x2_t v246;
  __int32 v247;
  uint64_t v248;
  uint64_t ***v249;
  int v250;
  int v251;
  llvm::BasicBlock *v252;
  char *DefinedAccess;
  uint64_t v254;
  llvm::ValueSymbolTable *v255;
  int v256;
  uint64_t v257;
  uint64_t *v258;
  _QWORD *v259;
  uint64_t *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  int v268;
  int v269;
  _QWORD *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  int v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  llvm::Value *v279;
  int v280;
  char *v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  llvm::ValueSymbolTable *v295;
  unint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  unsigned int *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t ***v305;
  uint64_t ***v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  int v311;
  char v313;
  llvm::OptimizationRemarkEmitter *v315;
  _QWORD *v316;
  llvm::Value *v317;
  uint64_t ***v318;
  unsigned int v319;
  int v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  llvm::DominatorTree *v326;
  int64x2_t v327;
  uint64_t v328;
  uint64_t **v329;
  _QWORD *v330;
  int32x2_t *v331;
  int32x2_t *v332;
  uint64_t *v333;
  char *v334;
  char v335;
  uint64_t *v337;
  char *v339;
  uint64_t v340;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  int v347;
  _BYTE v348[64];
  uint64_t v349;
  uint64_t v350[3];
  uint64_t v351;
  void *v352;
  unsigned int v353;
  uint64_t v354;
  int64x2_t v355;
  _BYTE v356[8];
  void *__p;
  char v358;
  void *v359;
  int64x2_t v360;
  int64x2_t v361;
  int64x2_t v362;
  int64x2_t v363;
  void *v364;
  void *v365;
  uint64_t v366;
  _BYTE v367[260];
  int v368;
  uint64_t **v369;
  llvm::BasicBlock *v370;
  int64x2_t v371;
  int64x2_t v372;
  int64x2_t v373;
  int64x2_t v374;
  void *v375;
  void *v376;
  unsigned int v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  _QWORD v381[2];
  __int16 v382;
  uint64_t v383;

  v13 = (llvm::DominatorTree *)a8;
  v383 = *MEMORY[0x1E0C80C00];
  llvm::collectChildrenInLoop(a1, a8, (uint64_t)&v352);
  v16 = (uint64_t *)v352;
  if (v353)
  {
    v335 = 0;
    v17 = (char *)v352 + 8 * v353;
    v18 = a13;
    if (a13)
      v19 = a13;
    else
      v19 = v13;
    v343 = (uint64_t)v19 + 56;
    v342 = (uint64_t)v13 + 56;
    v332 = (int32x2_t *)(a10 + 40);
    v333 = (uint64_t *)(a10 + 8);
    v331 = (int32x2_t *)(a10 + 72);
    v327 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v326 = v13;
    v330 = a7;
    v334 = (char *)v352;
    v337 = a3;
    while (1)
    {
      v20 = **((_QWORD **)v17 - 1);
      v21 = *((_DWORD *)a3 + 4);
      v339 = v17 - 8;
      if (v21)
      {
        v22 = *a3;
        v23 = v21 - 1;
        v24 = ((v20 >> 4) ^ (v20 >> 9)) & (v21 - 1);
        v25 = *(_QWORD *)(*a3 + 16 * v24);
        if (v20 == v25)
        {
LABEL_11:
          v28 = *(llvm::DominatorTree **)(v22 + 16 * v24 + 8);
          goto LABEL_13;
        }
        v26 = 1;
        while (v25 != -4096)
        {
          v27 = v24 + v26++;
          v24 = v27 & v23;
          v25 = *(_QWORD *)(v22 + 16 * v24);
          if (v20 == v25)
            goto LABEL_11;
        }
      }
      v28 = 0;
LABEL_13:
      if (v28 == v13)
      {
        v29 = (_QWORD *)(v20 + 40);
        if (v20 + 40 != *(_QWORD *)(v20 + 48))
        {
          v340 = **((_QWORD **)v17 - 1);
          do
          {
            v29 = (_QWORD *)*v29;
            if (v29)
              v30 = (uint64_t ***)(v29 - 3);
            else
              v30 = 0;
            if (!v30[1] && llvm::wouldInstructionBeTriviallyDead((uint64_t)v30, a6))
            {
              llvm::salvageKnowledge((llvm *)v30, 0, 0, v54);
              v359 = &v360.u64[1];
              v360.i64[0] = 0x100000000;
              llvm::findDbgUsers((uint64_t)&v359, (uint64_t)v30);
              llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v30, (uint64_t *)v359, v360.u32[0]);
              if (v359 != &v360.u64[1])
                free(v359);
              v29 = (_QWORD *)v29[1];
              v55 = (*a9)[5].i32[0];
              if (!v55)
                goto LABEL_268;
              v56 = (*a9)[3];
              v57 = v55 - 1;
              v58 = (v55 - 1) & ((v30 >> 4) ^ (v30 >> 9));
              v59 = *(uint64_t ****)(*(_QWORD *)&v56 + 16 * v58);
              if (v59 != v30)
              {
                v60 = 1;
                while (v59 != (uint64_t ***)-4096)
                {
                  v61 = v58 + v60++;
                  v58 = v61 & v57;
                  v59 = *(uint64_t ****)(*(_QWORD *)&v56 + 16 * v58);
                  if (v59 == v30)
                    goto LABEL_266;
                }
                goto LABEL_268;
              }
LABEL_266:
              v163 = *(llvm::MemoryAccess **)(*(_QWORD *)&v56 + 16 * v58 + 8);
              if (v163)
                llvm::MemorySSAUpdater::removeMemoryAccess(a9, v163, 0);
LABEL_268:
              llvm::InstructionPrecedenceTracking::removeInstruction(v332, (const llvm::Instruction *)v30);
              llvm::InstructionPrecedenceTracking::removeInstruction(v331, (const llvm::Instruction *)v30);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v30[5] + 5), v30);
              v164 = v30[3];
              v165 = v30[4];
              *v165 = (uint64_t *)v164;
              v164[1] = (uint64_t *)v165;
              v30[3] = 0;
              v30[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v30);
              v335 = 1;
              continue;
            }
            v31 = *((unsigned __int8 *)v30 + 16) - 33;
            if (v31 <= 0x37)
            {
              if (((1 << (*((_BYTE *)v30 + 16) - 33)) & 0x808001D0000010) != 0)
                continue;
              if (((1 << (*((_BYTE *)v30 + 16) - 33)) & 0x8000000000041) != 0)
              {
                v72 = v30[8];
                if (!v72 || (*((_BYTE *)v72 + 17) & 0x30) == 0)
                {
                  v73 = *((_DWORD *)v30 + 5);
                  if (v73 < 0)
                  {
                    v305 = &v30[-4 * (v73 & 0x7FFFFFF)];
                    v308 = (uint64_t)*(v305 - 1);
                    v306 = v305 - 1;
                    v307 = v308;
                    if (v308)
                    {
                      v309 = -v307;
                      while (1)
                      {
                        v310 = (*(_DWORD **)((char *)v306 + v309))[2];
                        v140 = v310 > 7;
                        v311 = (1 << v310) & 0x83;
                        if (v140 || v311 == 0)
                          break;
                        v309 += 16;
                        v13 = v326;
                        a7 = v330;
                        v18 = a13;
                        v20 = v340;
                        if (!v309)
                          goto LABEL_80;
                      }
                      v13 = v326;
                      a7 = v330;
                      v18 = a13;
LABEL_140:
                      v20 = v340;
                      continue;
                    }
                  }
LABEL_80:
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v30, 45) & 1) == 0
                    && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v30, 44))
                  {
                    continue;
                  }
                }
              }
              else if (v31 == 27 && (*((_WORD *)v30 + 9) & 0x301) != 0)
              {
                continue;
              }
            }
            if ((llvm::Instruction::mayThrow((llvm::Instruction *)v30) & 1) != 0
              || !llvm::Instruction::willReturn((llvm::Instruction *)v30))
            {
              continue;
            }
            v32 = *((unsigned __int8 *)v30 + 16);
            if (v32 == 62)
              v33 = v30;
            else
              v33 = 0;
            if (v32 != 62)
            {
              v44 = *((_DWORD *)v30 + 5);
              if ((v44 & 0x40000000) != 0)
              {
                v46 = (uint64_t *)*(v30 - 1);
                v45 = v44 & 0x7FFFFFF;
              }
              else
              {
                v45 = v44 & 0x7FFFFFF;
                v46 = (uint64_t *)&v30[-4 * v45];
              }
              v359 = &v360.u64[1];
              v360.i64[0] = 0x400000000;
              if (v45 < 5)
              {
                v47 = 0;
                if (v45)
                {
                  v48 = 0;
                  v49 = &v360.i8[8];
LABEL_45:
                  v50 = 32 * v45;
                  v51 = &v49[8 * v48];
                  do
                  {
                    v52 = *v46;
                    v46 += 4;
                    *(_QWORD *)v51 = v52;
                    v51 += 8;
                    v50 -= 32;
                  }
                  while (v50);
                  v53 = (char *)v359;
                }
                else
                {
                  v53 = &v360.i8[8];
                }
                v360.i32[0] = v47 + v45;
                v68 = (*(uint64_t (**)(_QWORD, uint64_t ***, char *))(*(_QWORD *)*a7 + 72))(*a7, v30, v53);
                v70 = v69;
                if (v359 != &v360.u64[1])
                  free(v359);
                v71 = v68 < 0;
                if (v70)
                  v71 = v70 < 0;
                if (!v71)
                {
                  if (v70)
                    v67 = v70 < 1;
                  else
                    v67 = v68 < 1;
                  goto LABEL_92;
                }
LABEL_73:
                v67 = 0;
                goto LABEL_92;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v359, (uint64_t)&v360.i64[1], v45, 8);
              v47 = v360.i32[0];
              v49 = (__int8 *)v359;
              v48 = v360.u32[0];
              goto LABEL_45;
            }
            v34 = *((_DWORD *)v30 + 5);
            if ((v34 & 0x40000000) != 0)
            {
              v36 = (uint64_t *)*(v30 - 1);
              v35 = v34 & 0x7FFFFFF;
            }
            else
            {
              v35 = v34 & 0x7FFFFFF;
              v36 = (uint64_t *)&v30[-4 * v35];
            }
            v359 = &v360.u64[1];
            v360.i64[0] = 0x400000000;
            if (v35 >= 5)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v359, (uint64_t)&v360.i64[1], v35, 8);
              v37 = v360.i32[0];
              v39 = (__int8 *)v359;
              v38 = v360.u32[0];
            }
            else
            {
              v37 = 0;
              if (!v35)
              {
                v43 = &v360.i8[8];
                goto LABEL_58;
              }
              v38 = 0;
              v39 = &v360.i8[8];
            }
            v40 = 32 * v35;
            v41 = &v39[8 * v38];
            do
            {
              v42 = *v36;
              v36 += 4;
              *(_QWORD *)v41 = v42;
              v41 += 8;
              v40 -= 32;
            }
            while (v40);
            v43 = (char *)v359;
LABEL_58:
            v360.i32[0] = v37 + v35;
            v62 = (*(uint64_t (**)(_QWORD, uint64_t ***, char *))(*(_QWORD *)*a7 + 72))(*a7, v33, v43);
            v64 = v63;
            if (v359 != &v360.u64[1])
              free(v359);
            v65 = v62 < 0;
            if (v64)
              v65 = v64 < 0;
            if (!v65)
            {
              v66 = v62 > 0;
              if (v64)
                v66 = v64 > 0;
              if (!v66)
              {
                v74 = v33[1];
                v18 = a13;
                if (!v74)
                {
LABEL_91:
                  v67 = 1;
                  goto LABEL_92;
                }
                v75 = v33[5];
                while (1)
                {
                  v76 = v74[3];
                  v77 = sub_1C477672C(v343, v76[5]);
                  v78 = *((_QWORD *)v19 + 8);
                  v79 = 72;
                  if (v78 == *((_QWORD *)v19 + 7))
                    v79 = 76;
                  if (v77 != (_QWORD *)(v78 + 8 * *(unsigned int *)((char *)v19 + v79))
                    && (v75 != (uint64_t **)v76[5] || (v76[2] & 0xFE) != 0x3C))
                  {
                    goto LABEL_73;
                  }
                  v74 = (uint64_t **)v74[1];
                  if (!v74)
                    goto LABEL_91;
                }
              }
            }
            v67 = 0;
            v18 = a13;
LABEL_92:
            v80 = v30[1];
            if (v80)
            {
              v81 = 0;
              while (1)
              {
                v82 = v80[3];
                if (!v82 || *((_BYTE *)v82 + 16) != 83)
                  goto LABEL_118;
                v83 = *(_QWORD *)(v82[5] + 40);
                if (v83)
                  v84 = v83 - 24;
                else
                  v84 = 0;
                if (*(unsigned __int8 *)(v84 + 16) - 29 >= 0xB)
                  v84 = 0;
                if (*(_BYTE *)(v84 + 16) == 38)
                  goto LABEL_140;
                if (*((_BYTE *)v30 + 16) == 84 && *(_DWORD *)(a10 + 16) != 0)
                {
                  v359 = (void *)v82[5];
                  v370 = 0;
                  v97 = sub_1C61252B8(v333, &v359, &v370);
                  v98 = v370;
                  if (!v97)
                    v98 = (llvm::BasicBlock *)(*(_QWORD *)(a10 + 8) + 16 * *(unsigned int *)(a10 + 24));
                  v99 = *((_QWORD *)v98 + 1);
                  if (v99 < 8)
                    goto LABEL_140;
                  v100 = v99 & 0xFFFFFFFFFFFFFFF8;
                  if ((v99 & 4) != 0 && v100)
                  {
                    v101 = *(_DWORD *)(v100 + 8);
                    if (!v101)
                      goto LABEL_140;
LABEL_139:
                    if (v101 != 1)
                      goto LABEL_140;
                    goto LABEL_107;
                  }
                  if ((v99 & 4) != 0)
                  {
                    v101 = *(_DWORD *)(v100 + 8);
                    goto LABEL_139;
                  }
                }
LABEL_107:
                if (v18)
                {
                  while (*((_BYTE *)v82 + 16) == 83)
                  {
                    v86 = v82[1];
                    if (!v86)
                      break;
                    v87 = *(_QWORD *)(v86 + 8);
                    if (v87)
                    {
                      while (*(_QWORD *)(v87 + 24) == *(_QWORD *)(v86 + 24))
                      {
                        v86 = *(_QWORD *)(v86 + 8);
                        v87 = *(_QWORD *)(v87 + 8);
                        if (!v87)
                          goto LABEL_113;
                      }
                      break;
                    }
LABEL_113:
                    if ((*((_DWORD *)v82 + 5) & 0x7FFFFFF) != 1)
                      break;
                    v88 = sub_1C477672C(v343, v82[5]);
                    v89 = *((_QWORD *)v19 + 8);
                    v90 = 72;
                    if (v89 == *((_QWORD *)v19 + 7))
                      v90 = 76;
                    if (v88 == (_QWORD *)(v89 + 8 * *(unsigned int *)((char *)v19 + v90)))
                      break;
                    v82 = *(uint64_t **)(v82[1] + 24);
                  }
                }
LABEL_118:
                v91 = sub_1C477672C(v343, v82[5]);
                v92 = *((_QWORD *)v19 + 8);
                v93 = 72;
                if (v92 == *((_QWORD *)v19 + 7))
                  v93 = 76;
                v94 = (_QWORD *)(v92 + 8 * *(unsigned int *)((char *)v19 + v93));
                v95 = v91 == v94;
                v96 = v91 != v94 && v67;
                if (!v96 && !v95)
                  goto LABEL_140;
                if (v96)
                  v81 = 1;
                v80 = (uint64_t **)v80[1];
                if (!v80)
                  goto LABEL_142;
              }
            }
            v81 = 0;
LABEL_142:
            v20 = v340;
            if (!llvm::canSinkOrHoistInst((llvm *)v30, a2, a4, v13, (llvm::Loop *)a9, (llvm::MemorySSAUpdater *)1, a11, a12, v315))continue;
            v344 = v348;
            v345 = v348;
            v346 = 8;
            v347 = 0;
            v102 = (llvm::UndefValue **)v30[1];
            if (!v102)
            {
              v103 = 0;
              goto LABEL_253;
            }
            v103 = 0;
            do
            {
              v105 = v102 + 1;
              v104 = (llvm::UndefValue **)v102[1];
              v106 = (uint64_t)v102[3];
              v107 = (char *)sub_1C477672C((uint64_t)&v344, v106);
              if (v345 == v344)
                v108 = (uint64_t *)((char *)&v346 + 4);
              else
                v108 = &v346;
              if (v107 == &v345[8 * *(unsigned int *)v108])
              {
                v109 = sub_1C477672C(v342, *(_QWORD *)(v106 + 40));
                v110 = *((_QWORD *)v13 + 8);
                v111 = 72;
                if (v110 == *((_QWORD *)v13 + 7))
                  v111 = 76;
                if (v109 == (_QWORD *)(v110 + 8 * *(unsigned int *)((char *)v13 + v111)))
                {
                  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)a4, *(_QWORD *)(v106 + 40))&& ((v113 = *(_DWORD *)(v106 + 20), (v113 & 0x40000000) != 0)? (v114 = *(_QWORD *)(v106 - 8)): (v114 = v106 - 32 * (v113 & 0x7FFFFFF)), llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)a4, *(_QWORD *)(v114+ 32 * *(unsigned int *)(v106 + 60)+ 8 * (((unint64_t)v102 - v114) >> 5)))))
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v344, v106);
                    v115 = *(_DWORD *)(v106 + 20);
                    if ((v115 & 0x40000000) != 0)
                    {
                      v117 = *(uint64_t *****)(v106 - 8);
                      v116 = v115 & 0x7FFFFFF;
                      if (!v116)
                        goto LABEL_168;
                    }
                    else
                    {
                      v116 = v115 & 0x7FFFFFF;
                      v117 = (uint64_t ****)(v106 - 32 * v116);
                      if (!v116)
                        goto LABEL_168;
                    }
                    v123 = 32 * v116;
                    while (*v117 == v30)
                    {
                      v117 += 4;
                      v123 -= 32;
                      if (!v123)
                        goto LABEL_168;
                    }
                    v124 = *(_QWORD *)(v106 + 40);
                    v125 = (uint64_t *)(v124 + 48);
                    do
                    {
                      v126 = *v125;
                      v127 = v126 - 24;
                      if (!v126)
                        v127 = 0;
                      v128 = *(unsigned __int8 *)(v127 + 16);
                      v125 = (uint64_t *)(v126 + 8);
                    }
                    while (v128 == 83);
                    v129 = (v128 - 38) > 0x2A
                        || ((1 << (v128 - 38)) & 0x60000000001) == 0;
                    v20 = v340;
                    if (!v129)
                      goto LABEL_312;
                    if (*(_DWORD *)(a10 + 16))
                    {
                      for (i = *(_QWORD *)(v124 + 48); ; i = *(_QWORD *)(i + 8))
                      {
                        v131 = i - 24;
                        if (!i)
                          v131 = 0;
                        if (*(_BYTE *)(v131 + 16) != 83)
                          break;
                      }
                      v132 = *(unsigned __int8 *)(i - 8) - 38;
                      v140 = v132 > 0x38;
                      v133 = (1 << v132) & 0x100060000000001;
                      if (!v140 && v133 != 0)
                      {
LABEL_312:
                        a7 = v330;
                        goto LABEL_253;
                      }
                    }
                    v135 = *(_QWORD *)(v124 + 8);
                    v136 = v135;
                    if (v135)
                    {
                      while (1)
                      {
                        v137 = *(_QWORD *)(v136 + 24);
                        v138 = *(unsigned __int8 *)(v137 + 16);
                        v139 = v137 && v138 >= 0x1C;
                        v140 = !v139 || v138 - 29 > 0xA;
                        if (!v140)
                          break;
                        v136 = *(_QWORD *)(v136 + 8);
                        if (!v136)
                          goto LABEL_205;
                      }
LABEL_234:
                      v155 = *(_QWORD *)(*(_QWORD *)(v137 + 40) + 40);
                      if (v155)
                        v156 = v155 - 24;
                      else
                        v156 = 0;
                      if (*(unsigned __int8 *)(v156 + 16) - 29 >= 0xB)
                        v156 = 0;
                      v157 = *(unsigned __int8 *)(v156 + 16);
                      if (v157 == 32 || v157 == 39)
                        goto LABEL_312;
                      while (1)
                      {
                        v136 = *(_QWORD *)(v136 + 8);
                        if (!v136)
                          break;
                        v137 = *(_QWORD *)(v136 + 24);
                        v152 = *(unsigned __int8 *)(v137 + 16);
                        if (v137)
                          v153 = v152 >= 0x1C;
                        else
                          v153 = 0;
                        if (v153 && v152 - 29 < 0xB)
                          goto LABEL_234;
                      }
                      do
                      {
LABEL_205:
                        v141 = *(_QWORD *)(v135 + 24);
                        v142 = *(unsigned __int8 *)(v141 + 16);
                        if (v141)
                          v143 = v142 >= 0x1C;
                        else
                          v143 = 0;
                        if (v143 && v142 - 29 < 0xB)
                          break;
                        v135 = *(_QWORD *)(v135 + 8);
                      }
                      while (v135);
                    }
                    v359 = (void *)1;
                    v360 = v327;
                    v361 = v327;
                    v362 = v327;
                    v363 = v327;
                    v364 = &v366;
                    v365 = (void *)0x800000000;
                    sub_1C5B4C744(&v359, v135, 0);
                    while ((_DWORD)v365)
                    {
                      v370 = 0;
                      v145 = *(llvm::BasicBlock **)v364;
                      v370 = *(llvm::BasicBlock **)v364;
                      v146 = *(_DWORD *)(v106 + 20);
                      v147 = v146 & 0x7FFFFFF;
                      if ((v146 & 0x7FFFFFF) != 0)
                      {
                        v148 = v106 - 32 * v147;
                        v149 = 32 * *(unsigned int *)(v106 + 60);
                        while (1)
                        {
                          v150 = v148;
                          if ((v146 & 0x40000000) != 0)
                            v150 = *(_QWORD *)(v106 - 8);
                          if (*(llvm::BasicBlock **)(v150 + v149) == v145)
                            break;
                          v149 += 8;
                          if (!--v147)
                            goto LABEL_225;
                        }
                        v151 = (llvm::BasicBlock *)sub_1C5EBE3AC((uint64_t **)v124, (uint64_t *)&v370, 1, ".split.loop.exit", 0, (uint64_t)a4, (uint64_t)v337, (llvm::MemorySSAUpdater *)a9, 1);
                        if (*(_DWORD *)(a10 + 16))
                          llvm::LoopSafetyInfo::copyColors((llvm::LoopSafetyInfo *)a10, v151, v370);
                      }
LABEL_225:
                      sub_1C63193F4((uint64_t)&v359, &v370);
                    }
                    if (v364 != &v366)
                      free(v364);
                    if ((v359 & 1) == 0)
                      MEMORY[0x1CAA32FB4](v360.i64[0], 8);
                    v104 = (llvm::UndefValue **)v30[1];
                  }
                  else
                  {
                    v118 = llvm::UndefValue::get((llvm::UndefValue *)*v30, v112);
                    if (*v102)
                    {
                      *(_QWORD *)v102[2] = v102[1];
                      v119 = v102[1];
                      if (v119)
                        *((_QWORD *)v119 + 2) = v102[2];
                    }
                    *v102 = v118;
                    if (v118)
                    {
                      v122 = *((_QWORD *)v118 + 1);
                      v120 = (llvm::UndefValue ***)((char *)v118 + 8);
                      v121 = v122;
                      *v105 = v122;
                      if (v122)
                        *(_QWORD *)(v121 + 16) = v105;
                      v102[2] = (llvm::UndefValue *)v120;
                      *v120 = v102;
                    }
                    v103 = 1;
                  }
                }
              }
LABEL_168:
              v102 = v104;
            }
            while (v104);
            if (HIDWORD(v346) == v347)
            {
              a7 = v330;
              v20 = v340;
              goto LABEL_253;
            }
            v166 = ****(_QWORD ****)a12;
            if (*(_QWORD *)(v166 + 128)
              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v166 + 72) + 48))(*(_QWORD *)(v166 + 72)))
            {
              v167 = v30[5][7];
              llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v355, (const llvm::DebugLoc *)(v30 + 6));
              v168 = v30[5];
              v360.i32[0] = 9;
              v360.i8[4] = 2;
              v361 = v355;
              v360.i64[1] = (uint64_t)v167;
              v362.i64[0] = (uint64_t)"licm";
              v362.i64[1] = (uint64_t)"InstSunk";
              v363.i64[0] = 8;
              v363.i8[8] = 0;
              LOBYTE(v364) = 0;
              v365 = v367;
              v366 = 0x400000000;
              v367[256] = 0;
              v368 = -1;
              v369 = v168;
              v359 = &off_1E814E500;
              v355.i64[0] = (uint64_t)"sinking ";
              v355.i64[1] = 8;
              sub_1C53B17B4((uint64_t)&v365, (const void **)&v355);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v355, "Inst", 4uLL, v30);
              v169 = sub_1C47E3888((uint64_t)&v359, (uint64_t)&v355);
              sub_1C61998EC((uint64_t)&v370, v169);
              v370 = (llvm::BasicBlock *)&off_1E814E500;
              if (v358 < 0)
                operator delete(__p);
              if ((v356[7] & 0x80000000) != 0)
                operator delete((void *)v355.i64[0]);
              v359 = &off_1E814E790;
              v170 = (char *)v365;
              if ((_DWORD)v366)
              {
                v171 = (unint64_t)v366 << 6;
                do
                {
                  v172 = (void **)&v170[v171];
                  if (v170[v171 - 17] < 0)
                    operator delete(*(v172 - 5));
                  if (*((char *)v172 - 41) < 0)
                    operator delete(*(v172 - 8));
                  v171 -= 64;
                }
                while (v171);
                v170 = (char *)v365;
              }
              if (v170 != v367)
                free(v170);
              llvm::OptimizationRemarkEmitter::emit(a12, (llvm::DiagnosticInfoOptimizationBase *)&v370);
              v370 = (llvm::BasicBlock *)&off_1E814E790;
              v173 = (char *)v376;
              if (v377)
              {
                v174 = (unint64_t)v377 << 6;
                do
                {
                  v175 = (void **)&v173[v174];
                  if (v173[v174 - 17] < 0)
                    operator delete(*(v175 - 5));
                  if (*((char *)v175 - 41) < 0)
                    operator delete(*(v175 - 8));
                  v174 -= 64;
                }
                while (v174);
                v173 = (char *)v376;
              }
              if (v173 != (char *)&v378)
                free(v173);
            }
            v359 = (void *)1;
            for (j = 8; j != 520; j += 16)
              *(void **)((char *)&v359 + j) = (void *)-4096;
            v177 = (uint64_t)v30[1];
            v370 = (llvm::BasicBlock *)1;
            v371 = v327;
            v372 = v327;
            v373 = v327;
            v374 = v327;
            v375 = &v377;
            v376 = (void *)0x800000000;
            sub_1C631946C(&v370, v177);
            v355.i64[0] = (uint64_t)v356;
            v355.i64[1] = 0x800000000;
            a7 = v330;
            if ((_DWORD)v376)
            {
              v178 = (char *)v375;
              v179 = 8 * v376;
              do
              {
                v180 = *(_QWORD *)v178;
                v181 = sub_1C477672C(v342, *(_QWORD *)(*(_QWORD *)v178 + 40));
                v182 = *((_QWORD *)v13 + 8);
                v183 = 72;
                if (v182 == *((_QWORD *)v13 + 7))
                  v183 = 76;
                if (v181 == (_QWORD *)(v182 + 8 * *(unsigned int *)((char *)v13 + v183)))
                {
                  if (!sub_1C5B493B4((uint64_t)v30, *(_QWORD *)(v180 + 40), a12, a5))
                    goto LABEL_313;
                  v184 = v355.u32[2];
                  if (v355.u32[2] >= (unint64_t)v355.u32[3])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v355, (uint64_t)v356, v355.u32[2] + 1, 8);
                    v184 = v355.u32[2];
                  }
                  *(_QWORD *)(v355.i64[0] + 8 * v184) = v180;
                  ++v355.i32[2];
                }
                v178 += 8;
                v179 -= 8;
              }
              while (v179);
              v20 = v340;
              if (v355.i32[2])
              {
                v185 = (uint64_t *)v355.i64[0];
                v321 = v355.i64[0] + 8 * v355.u32[2];
                v319 = (v30 >> 4) ^ (v30 >> 9);
                v318 = v30 - 1;
                while (1)
                {
                  v322 = v185;
                  v186 = *v185;
                  v187 = *(_QWORD *)(*v185 + 40);
                  v349 = v187;
                  v188 = sub_1C63197F4((uint64_t)&v359, v187);
                  v189 = &v360;
                  if ((v359 & 1) == 0)
                    v189 = (int64x2_t *)v360.i64[0];
                  v190 = v360.u32[2];
                  if ((v359 & 1) != 0)
                    v190 = 32;
                  if (&v189[v190] == (int64x2_t *)v188)
                    break;
                  v191 = *(llvm::Value **)(v188 + 8);
LABEL_322:
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v186, v191, (llvm::Value *)1);
                  v192 = (*a9)[5].i32[0];
                  if (v192)
                  {
                    v193 = (*a9)[3];
                    v194 = v192 - 1;
                    v195 = (v192 - 1) & ((v186 >> 4) ^ (v186 >> 9));
                    v196 = *(_QWORD *)(*(_QWORD *)&v193 + 16 * v195);
                    if (v196 == v186)
                    {
LABEL_327:
                      v199 = *(llvm::MemoryAccess **)(*(_QWORD *)&v193 + 16 * v195 + 8);
                      if (v199)
                        llvm::MemorySSAUpdater::removeMemoryAccess(a9, v199, 0);
                    }
                    else
                    {
                      v197 = 1;
                      while (v196 != -4096)
                      {
                        v198 = v195 + v197++;
                        v195 = v198 & v194;
                        v196 = *(_QWORD *)(*(_QWORD *)&v193 + 16 * v195);
                        if (v196 == v186)
                          goto LABEL_327;
                      }
                    }
                  }
                  llvm::InstructionPrecedenceTracking::removeInstruction(v332, (const llvm::Instruction *)v186);
                  llvm::InstructionPrecedenceTracking::removeInstruction(v331, (const llvm::Instruction *)v186);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v186 + 40) + 40, (uint64_t ***)v186);
                  v200 = *(_QWORD *)(v186 + 24);
                  v201 = *(_QWORD **)(v186 + 32);
                  *v201 = v200;
                  *(_QWORD *)(v200 + 8) = v201;
                  *(_QWORD *)(v186 + 24) = 0;
                  *(_QWORD *)(v186 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v186);
                  v185 = v322 + 1;
                  v103 = 1;
                  a7 = v330;
                  if (v322 + 1 == (uint64_t *)v321)
                    goto LABEL_456;
                }
                v324 = v187;
                v202 = *((unsigned __int8 *)v30 + 16);
                if (v202 == 84)
                  v203 = v30;
                else
                  v203 = 0;
                if (v202 == 84)
                {
                  v379 = (char *)v381;
                  v380 = 0x100000000;
                  v204 = *((_DWORD *)v30 + 5);
                  if (v204 < 0)
                  {
                    v296 = (unint64_t)v318[-4 * (v204 & 0x7FFFFFF)];
                    if ((v296 & 0xFFFFFFFF0) != 0)
                    {
                      v297 = (v296 >> 4);
                      v298 = (char *)v30;
                      do
                      {
                        v299 = *((_DWORD *)v30 + 5) & 0x7FFFFFF;
                        v300 = (unsigned int *)(v298 - (char *)&v318[-4 * v299][4 * v299]);
                        v301 = *v300;
                        v302 = (uint64_t)&(&v203[4 * v301])[-4 * v299];
                        v303 = v300[1] - v301;
                        v304 = *((_QWORD *)v300 - 1);
                        v350[0] = v302;
                        v350[1] = v303;
                        v350[2] = v304;
                        if (*(_DWORD *)(v304 + 8) != 1)
                          sub_1C623D924((uint64_t)&v379, (uint64_t)v350);
                        v298 += 16;
                        --v297;
                        v13 = v326;
                      }
                      while (v297);
                    }
                  }
                  if (*(_DWORD *)(a10 + 16))
                  {
                    v350[0] = v324;
                    v351 = 0;
                    v205 = sub_1C61252B8(v333, v350, &v351);
                    v206 = v351;
                    if (!v205)
                      v206 = *(_QWORD *)(a10 + 8) + 16 * *(unsigned int *)(a10 + 24);
                    v207 = *(_QWORD *)(v206 + 8);
                    v208 = v207 & 0xFFFFFFFFFFFFFFF8;
                    if ((v207 & 4) != 0)
                      v208 = **(_QWORD **)v208;
                    v209 = v208 + 40;
                    for (k = *(_QWORD *)(v208 + 48); k != v209; k = *(_QWORD *)(k + 8))
                    {
                      v211 = k - 24;
                      if (k)
                        v212 = k - 24;
                      else
                        v212 = 0;
                      if (*(_BYTE *)(v212 + 16) != 83)
                        goto LABEL_350;
                    }
                    v211 = 0;
LABEL_350:
                    v350[0] = v211;
                    v215 = *(unsigned __int8 *)(v211 + 16) - 38;
                    v140 = v215 > 0x38;
                    v216 = (1 << v215) & 0x100060000000001;
                    if (!v140 && v216 != 0)
                      sub_1C58C6FD8((uint64_t)&v379, "funclet", v350);
                  }
                  v317 = (llvm::Value *)llvm::CallInst::Create(v203, (uint64_t)v379, v380, 0);
                  v218 = v379;
                  v214 = v324;
                  if ((_DWORD)v380)
                  {
                    v219 = 48 * v380;
                    do
                    {
                      v220 = &v218[v219];
                      v221 = *(void **)&v218[v219 - 24];
                      if (v221)
                      {
                        *((_QWORD *)v220 - 2) = v221;
                        operator delete(v221);
                      }
                      if (*(v220 - 25) < 0)
                        operator delete(*((void **)v220 - 6));
                      v219 -= 48;
                    }
                    while (v219);
                    v218 = v379;
                  }
                  if (v218 != (char *)v381)
                    free(v218);
                }
                else
                {
                  llvm::Instruction::clone((llvm::Instruction *)v30);
                  v317 = v213;
                  v214 = v187;
                }
                v222 = (uint64_t *)(v214 + 40);
                for (m = *(uint64_t **)(v214 + 48); m != v222; m = (uint64_t *)m[1])
                {
                  v224 = m - 3;
                  if (!m)
                    v224 = 0;
                  if (*((_BYTE *)v224 + 16) != 83)
                  {
                    v225 = *((unsigned __int8 *)m - 8) - 38;
                    v140 = v225 > 0x38;
                    v226 = (1 << v225) & 0x100060000000001;
                    if (v140 || v226 == 0)
                      v222 = m;
                    else
                      v222 = (uint64_t *)m[1];
                    break;
                  }
                }
                *((_QWORD *)v317 + 5) = v214;
                *(_WORD *)(v214 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v317 + 23) & 0x10) != 0)
                {
                  v254 = *(_QWORD *)(v214 + 56);
                  if (v254)
                  {
                    v255 = *(llvm::ValueSymbolTable **)(v254 + 104);
                    if (v255)
                      llvm::ValueSymbolTable::reinsertValue(v255, v317);
                  }
                }
                v228 = *v222;
                *((_QWORD *)v317 + 3) = *v222;
                *((_QWORD *)v317 + 4) = v222;
                *(_QWORD *)(v228 + 8) = (char *)v317 + 24;
                *v222 = (uint64_t)v317 + 24;
                if ((*((_BYTE *)v30 + 23) & 0x10) != 0)
                {
                  v229 = ***v30;
                  v230 = *(_QWORD *)(v229 + 152);
                  v231 = *(unsigned int *)(v229 + 168);
                  if (!(_DWORD)v231)
                    goto LABEL_386;
                  LODWORD(v232) = (v231 - 1) & v319;
                  v233 = v230 + 16 * v232;
                  v234 = *(uint64_t ****)v233;
                  if (*(uint64_t ****)v233 == v30)
                  {
                    if (**(_QWORD **)(v233 + 8))
                      goto LABEL_389;
                  }
                  else
                  {
                    v235 = 1;
                    while (v234 != (uint64_t ***)-4096)
                    {
                      v236 = v232 + v235++;
                      v232 = v236 & (v231 - 1);
                      v234 = *(uint64_t ****)(v230 + 16 * v232);
                      if (v234 == v30)
                        goto LABEL_387;
                    }
LABEL_386:
                    v232 = v231;
LABEL_387:
                    if (**(_QWORD **)(v230 + 16 * v232 + 8))
                    {
                      if (!(_DWORD)v231)
                        goto LABEL_394;
LABEL_389:
                      LODWORD(v237) = (v231 - 1) & v319;
                      v238 = (uint64_t ****)(v230 + 16 * v237);
                      v239 = *v238;
                      if (*v238 != v30)
                      {
                        v240 = 1;
                        while (v239 != (uint64_t ***)-4096)
                        {
                          v241 = v237 + v240++;
                          v237 = v241 & (v231 - 1);
                          v239 = *(uint64_t ****)(v230 + 16 * v237);
                          if (v239 == v30)
                          {
                            v238 = (uint64_t ****)(v230 + 16 * v237);
                            goto LABEL_395;
                          }
                        }
LABEL_394:
                        v238 = (uint64_t ****)(v230 + 16 * v231);
                      }
LABEL_395:
                      v242 = (uint64_t *)v238[1];
                      v243 = *v242;
                      v382 = 773;
                      v379 = (char *)(v242 + 2);
                      v380 = v243;
                      v381[0] = ".le";
                      llvm::Value::setName((uint64_t ***)v317, (uint64_t)&v379);
                    }
                  }
                }
                v244 = *a9;
                v245 = (*a9)[5].i32[0];
                if (v245)
                {
                  v246 = v244[3];
                  v247 = v245 - 1;
                  v248 = (v245 - 1) & v319;
                  v249 = *(uint64_t ****)(*(_QWORD *)&v246 + 16 * v248);
                  if (v30 == v249)
                  {
LABEL_401:
                    if (*(_QWORD *)(*(_QWORD *)&v246 + 16 * v248 + 8))
                    {
                      v252 = (llvm::BasicBlock *)*((_QWORD *)v317 + 5);
                      DefinedAccess = llvm::MemorySSA::createDefinedAccess((uint64_t *)v244, (uint64_t)v317, 0, 0);
                      llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*a9, (uint64_t)DefinedAccess, v252, 0);
                      if (DefinedAccess)
                      {
                        if (DefinedAccess[16] == 26)
                          llvm::MemorySSAUpdater::insertDef((llvm::MemorySSAUpdater *)a9, (llvm::MemoryDef *)DefinedAccess, 1);
                        else
                          llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)a9, (llvm::BasicBlock **)DefinedAccess, 1);
                      }
                    }
                  }
                  else
                  {
                    v250 = 1;
                    while (v249 != (uint64_t ***)-4096)
                    {
                      v251 = v248 + v250++;
                      v248 = v251 & v247;
                      v249 = *(uint64_t ****)(*(_QWORD *)&v246 + 16 * v248);
                      if (v30 == v249)
                        goto LABEL_401;
                    }
                  }
                }
                v256 = *((_DWORD *)v317 + 5);
                if ((v256 & 0x40000000) != 0)
                {
                  v258 = (uint64_t *)*((_QWORD *)v317 - 1);
                  v257 = v256 & 0x7FFFFFF;
                }
                else
                {
                  v257 = v256 & 0x7FFFFFF;
                  v258 = (uint64_t *)((char *)v317 - 32 * v257);
                }
                if (!v257)
                {
LABEL_414:
                  v259 = sub_1C63198FC(&v359, &v349);
                  v191 = v317;
                  v259[1] = v317;
                  v20 = v340;
                  goto LABEL_322;
                }
                v260 = &v258[4 * v257];
                v323 = v260;
                while (2)
                {
                  if (llvm::LoopInfo::wouldBeOutOfLoopUseRequiringLCSSA(v337, *v258, *(_QWORD *)(v186 + 40)))
                  {
                    v261 = (_QWORD *)*v258;
                    v328 = *(_QWORD *)*v258;
                    if ((*(_BYTE *)(*v258 + 23) & 0x10) != 0)
                    {
                      v262 = ***(_QWORD ***)*v258;
                      v263 = *(_QWORD *)(v262 + 152);
                      v264 = *(unsigned int *)(v262 + 168);
                      if (!(_DWORD)v264)
                        goto LABEL_424;
                      LODWORD(v265) = (v264 - 1) & ((v261 >> 4) ^ (v261 >> 9));
                      v266 = (_QWORD *)(v263 + 16 * v265);
                      v267 = (_QWORD *)*v266;
                      if ((_QWORD *)*v266 != v261)
                      {
                        v268 = 1;
                        while (v267 != (_QWORD *)-4096)
                        {
                          v269 = v265 + v268++;
                          v265 = v269 & (v264 - 1);
                          v267 = *(_QWORD **)(v263 + 16 * v265);
                          if (v267 == v261)
                          {
                            v266 = (_QWORD *)(v263 + 16 * v265);
                            goto LABEL_425;
                          }
                        }
LABEL_424:
                        v266 = (_QWORD *)(v263 + 16 * v264);
                      }
LABEL_425:
                      v270 = (_QWORD *)v266[1];
                      v273 = *v270;
                      v272 = (char *)(v270 + 2);
                      v271 = v273;
                    }
                    else
                    {
                      v271 = 0;
                      v272 = &byte_1C871356D;
                    }
                    v274 = *(_DWORD *)(v186 + 20);
                    v382 = 773;
                    v379 = v272;
                    v380 = v271;
                    v381[0] = ".lcssa";
                    v275 = *(_QWORD **)(v214 + 48);
                    v276 = operator new(0x48uLL);
                    v277 = v275;
                    v278 = v276;
                    v276[1] = v328;
                    v279 = (llvm::Value *)(v276 + 1);
                    *v276 = 0;
                    v276[2] = 0;
                    v329 = (uint64_t **)(v276 + 2);
                    v276[3] = 0x4000000000000053;
                    v280 = v274;
                    *((_OWORD *)v276 + 2) = 0u;
                    v281 = (char *)(v276 + 4);
                    *((_OWORD *)v276 + 3) = 0u;
                    *((_DWORD *)v276 + 16) = 0;
                    if (v277)
                    {
                      v320 = v280;
                      v292 = v277[2];
                      v276[6] = v292;
                      *(_WORD *)(v292 + 18) &= ~0x8000u;
                      if ((*((_BYTE *)v276 + 31) & 0x10) != 0)
                      {
                        v294 = *(_QWORD *)(v292 + 56);
                        if (v294)
                        {
                          v295 = *(llvm::ValueSymbolTable **)(v294 + 104);
                          if (v295)
                          {
                            v316 = v277;
                            llvm::ValueSymbolTable::reinsertValue(v295, v279);
                            v277 = v316;
                          }
                        }
                      }
                      v293 = *v277;
                      v278[4] = *v277;
                      v278[5] = v277;
                      *(_QWORD *)(v293 + 8) = v281;
                      *v277 = v281;
                      v280 = v320;
                    }
                    *((_DWORD *)v278 + 17) = v280 & 0x7FFFFFF;
                    llvm::Value::setName((uint64_t ***)v279, (uint64_t)&v379);
                    v282 = *((unsigned int *)v278 + 17);
                    v283 = operator new(40 * v282);
                    *v278 = v283;
                    if ((_DWORD)v282)
                    {
                      v284 = &v283[4 * v282];
                      do
                      {
                        *v283 = 0;
                        v283[1] = 0;
                        v283[2] = 0;
                        v283[3] = v279;
                        v283 += 4;
                      }
                      while (v283 != v284);
                    }
                    v285 = *(_DWORD *)(v186 + 20) & 0x7FFFFFF;
                    if ((_DWORD)v285)
                    {
                      v286 = 0;
                      v287 = 8 * v285;
                      do
                      {
                        v288 = *(_DWORD *)(v186 + 20);
                        if ((v288 & 0x40000000) != 0)
                          v289 = *(_QWORD *)(v186 - 8);
                        else
                          v289 = v186 - 32 * (v288 & 0x7FFFFFF);
                        sub_1C477667C(v279, (uint64_t)v261, *(_QWORD *)(v289 + 32 * *(unsigned int *)(v186 + 60) + v286));
                        v286 += 8;
                      }
                      while (v287 != v286);
                    }
                    if (*v258)
                    {
                      *(_QWORD *)v258[2] = v258[1];
                      v290 = v258[1];
                      if (v290)
                        *(_QWORD *)(v290 + 16) = v258[2];
                    }
                    *v258 = (uint64_t)v279;
                    v291 = (uint64_t)*v329;
                    v258[1] = (uint64_t)*v329;
                    v13 = v326;
                    v214 = v324;
                    if (v291)
                      *(_QWORD *)(v291 + 16) = v258 + 1;
                    v258[2] = (uint64_t)v329;
                    *v329 = v258;
                    v260 = v323;
                  }
                  v258 += 4;
                  if (v258 == v260)
                    goto LABEL_414;
                  continue;
                }
              }
            }
            else
            {
LABEL_313:
              v20 = v340;
            }
LABEL_456:
            if ((_BYTE *)v355.i64[0] != v356)
              free((void *)v355.i64[0]);
            if (v375 != &v377)
              free(v375);
            if ((v370 & 1) == 0)
              MEMORY[0x1CAA32FB4](v371.i64[0], 8);
            if ((v359 & 1) == 0)
              MEMORY[0x1CAA32FB4](v360.i64[0], 8);
LABEL_253:
            if (v345 != v344)
              free(v345);
            if ((v103 & 1) != 0)
            {
              if (!v81)
              {
                v29 = (_QWORD *)v29[1];
                v359 = &v360.u64[1];
                v360.i64[0] = 0x100000000;
                llvm::findDbgUsers((uint64_t)&v359, (uint64_t)v30);
                llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v30, (uint64_t *)v359, v360.u32[0]);
                v18 = a13;
                if (v359 != &v360.u64[1])
                  free(v359);
                v158 = (*a9)[5].i32[0];
                if (!v158)
                  goto LABEL_268;
                v56 = (*a9)[3];
                v159 = v158 - 1;
                v58 = (v158 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                v160 = *(uint64_t ****)(*(_QWORD *)&v56 + 16 * v58);
                if (v160 != v30)
                {
                  v161 = 1;
                  while (v160 != (uint64_t ***)-4096)
                  {
                    v162 = v58 + v161++;
                    v58 = v162 & v159;
                    v160 = *(uint64_t ****)(*(_QWORD *)&v56 + 16 * v58);
                    if (v160 == v30)
                      goto LABEL_266;
                  }
                  goto LABEL_268;
                }
                goto LABEL_266;
              }
              v335 = 1;
            }
            v18 = a13;
          }
          while (v29 != *(_QWORD **)(v20 + 48));
        }
      }
      v17 = v339;
      a3 = v337;
      if (v339 == v334)
      {
        v16 = (uint64_t *)v352;
        v313 = v335;
        goto LABEL_476;
      }
    }
  }
  v313 = 0;
LABEL_476:
  if (v16 != &v354)
    free(v16);
  return v313 & 1;
}

uint64_t llvm::canSinkOrHoistInst(llvm *this, llvm::Instruction *a2, llvm::AAResults *a3, llvm::DominatorTree *a4, llvm::Loop *a5, llvm::MemorySSAUpdater *a6, uint64_t a7, llvm::SinkAndHoistLICMFlags *a8, llvm::OptimizationRemarkEmitter *a9)
{
  unsigned int v14;
  uint64_t v16;
  llvm *v17;
  int v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  llvm **v26;
  llvm *v27;
  llvm **v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v57;
  BOOL v58;
  llvm *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  llvm *v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  llvm *v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  void **v93;
  char *v94;
  unint64_t v95;
  void **v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  llvm *v103;
  int v104;
  int v105;
  int v106;
  char *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  llvm *v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t i;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  _QWORD *SkipSelfWalker;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  llvm *v150;
  int v151;
  int v152;
  uint64_t v153;
  llvm **v154;
  uint64_t (**v155)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t (**v163)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  const void *v164[10];
  void *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t (**v168)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  const char *v172;
  uint64_t v173;
  char v174;
  char v175;
  void *v176;
  uint64_t v177;
  _BYTE v178[260];
  int v179;
  uint64_t v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v14 = *((unsigned __int8 *)this + 16);
  if (v14 - 60 > 0x18 || ((1 << (v14 - 60)) & 0x100000B) == 0)
  {
    if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v14), (int16x4_t)0x5F003E00550028)) & 1) == 0)
    {
      v57 = v14 - 66 >= 0xD && v14 - 41 >= 0x12;
      v58 = v57 && v14 - 81 >= 2;
      if (v58 && (v14 - 89) > 4u)
        return 0;
    }
    v16 = *(_QWORD *)a5;
LABEL_73:
    if (v14 == 84)
      v60 = this;
    else
      v60 = 0;
    switch(v14)
    {
      case 'T':
        if (sub_1C4D99D08((uint64_t)this))
          return 0;
        if ((llvm::Instruction::mayThrow(this) & 1) != 0)
          return 0;
        v61 = *((_QWORD *)this + 8);
        if (v61)
        {
          if ((*(_BYTE *)(v61 + 12) & 0x40) != 0)
            return 0;
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 6) & 1) != 0)
          return 0;
        v62 = *((_QWORD *)this - 4);
        if (v62)
        {
          if (!*(_BYTE *)(v62 + 16) && *(_QWORD *)(v62 + 24) == *((_QWORD *)this + 9))
          {
            v120 = *(_DWORD *)(v62 + 36);
            v71 = 1;
            if (v120 == 7 || v120 == 138)
              return v71;
          }
        }
        v64 = (_QWORD *)*((_QWORD *)a2 + 1);
        v63 = (_QWORD *)*((_QWORD *)a2 + 2);
        if (v64 == v63)
          return 0;
        v65 = 63;
        do
        {
          v65 &= (*(uint64_t (**)(_QWORD, llvm *))(*(_QWORD *)*v64 + 48))(*v64, this);
          if (v65 == 4)
            return 1;
          ++v64;
        }
        while (v64 != v63);
        if ((v65 & 2) != 0)
          return 0;
        if ((v65 & 0x30) != 0)
        {
          v66 = (_QWORD *)*((_QWORD *)a4 + 4);
          v67 = (_QWORD *)*((_QWORD *)a4 + 5);
          if (v67 != v66)
          {
            v68 = *(_QWORD *)(*(_QWORD *)a5 + 72);
            v69 = *(unsigned int *)(*(_QWORD *)a5 + 88);
            v70 = v69 - 1;
            v71 = 1;
            while (1)
            {
              if ((_DWORD)v69)
              {
                LODWORD(v72) = ((*v66 >> 4) ^ (*v66 >> 9)) & v70;
                v73 = (uint64_t *)(v68 + 16 * v72);
                v74 = *v73;
                if (*v66 == *v73)
                {
LABEL_99:
                  if (v73 != (uint64_t *)(v68 + 16 * v69) && v73[1])
                    return 0;
                }
                else
                {
                  v75 = 1;
                  while (v74 != -4096)
                  {
                    v76 = v72 + v75++;
                    v72 = v76 & v70;
                    v74 = *(_QWORD *)(v68 + 16 * v72);
                    if (*v66 == v74)
                    {
                      v73 = (uint64_t *)(v68 + 16 * v72);
                      goto LABEL_99;
                    }
                  }
                }
              }
              if (++v66 == v67)
                return v71;
            }
          }
          return 1;
        }
        v106 = *((_DWORD *)this + 5);
        v107 = (char *)this - 32 * (v106 & 0x7FFFFFF);
        v108 = *((unsigned __int8 *)this + 16);
        if (v108 == 84)
        {
          v109 = 0;
        }
        else if (v108 == 39)
        {
          v109 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          v109 = 2;
        }
        if (v106 < 0 && (v160 = *((_QWORD *)v107 - 1), (v160 & 0xFFFFFFFF0) != 0))
          v110 = (*((_DWORD *)v107 - 3) - *(_DWORD *)&v107[-v160]);
        else
          v110 = 0;
        v111 = (char *)this + -32 * v110 + -32 * v109 - 32;
        if (v107 == v111)
          return 1;
        v71 = 1;
        while (*(_BYTE *)(**(_QWORD **)v107 + 8) != 15)
        {
LABEL_173:
          v107 += 32;
          if (v107 == v111)
            return v71;
        }
        v112 = *(_DWORD *)(v16 + 40);
        if (v112)
        {
          v113 = *(_QWORD *)(v16 + 24);
          v114 = v112 - 1;
          v115 = (v112 - 1) & ((this >> 4) ^ (this >> 9));
          v116 = *(llvm **)(v113 + 16 * v115);
          if (v60 == v116)
          {
LABEL_170:
            v119 = *(_QWORD *)(v113 + 16 * v115 + 8);
            goto LABEL_172;
          }
          v117 = 1;
          while (v116 != (llvm *)-4096)
          {
            v118 = v115 + v117++;
            v115 = v118 & v114;
            v116 = *(llvm **)(v113 + 16 * v115);
            if (v60 == v116)
              goto LABEL_170;
          }
        }
        v119 = 0;
LABEL_172:
        if ((sub_1C5B4A584((llvm::MemorySSA *)v16, v119, a4, (uint64_t)this, a7) & 1) != 0)
          return 0;
        goto LABEL_173;
      case '?':
        return sub_1C5B4A6F4((uint64_t)this, *((_QWORD **)a4 + 4), *((_QWORD **)a4 + 5), v16);
      case '=':
        v78 = this;
        break;
      default:
        v78 = 0;
        break;
    }
    if (v14 != 61)
      return 1;
    if ((*((_WORD *)this + 9) & 0x301) != 0)
      return 0;
    v97 = (_QWORD *)*((_QWORD *)a4 + 4);
    v98 = (_QWORD *)*((_QWORD *)a4 + 5);
    if ((sub_1C5B4A6F4((uint64_t)this, v97, v98, v16) & 1) != 0)
      return 1;
    if (*(_BYTE *)a7 || *(_DWORD *)(a7 + 4) >= *(_DWORD *)(a7 + 8))
      return 0;
    v99 = *(_DWORD *)(v16 + 40);
    if (v99)
    {
      v100 = *(_QWORD *)(v16 + 24);
      v101 = v99 - 1;
      v102 = (v99 - 1) & ((this >> 4) ^ (this >> 9));
      v103 = *(llvm **)(v100 + 16 * v102);
      if (v103 == this)
      {
LABEL_152:
        v162 = *(_QWORD *)(v100 + 16 * v102 + 8);
        goto LABEL_179;
      }
      v104 = 1;
      while (v103 != (llvm *)-4096)
      {
        v105 = v102 + v104++;
        v102 = v105 & v101;
        v103 = *(llvm **)(v100 + 16 * v102);
        if (v78 == v103)
          goto LABEL_152;
      }
    }
    v162 = 0;
LABEL_179:
    if (v98 != v97)
    {
      v161 = v98;
      do
      {
        v121 = *(_QWORD *)(v16 + 48);
        v122 = *(unsigned int *)(v16 + 64);
        if ((_DWORD)v122)
        {
          LODWORD(v123) = ((*v97 >> 4) ^ (*v97 >> 9)) & (v122 - 1);
          v124 = (uint64_t *)(v121 + 16 * v123);
          v125 = *v124;
          if (*v97 == *v124)
            goto LABEL_188;
          v126 = 1;
          while (v125 != -4096)
          {
            v127 = v123 + v126++;
            v123 = v127 & (v122 - 1);
            v125 = *(_QWORD *)(v121 + 16 * v123);
            if (*v97 == v125)
            {
              v124 = (uint64_t *)(v121 + 16 * v123);
              goto LABEL_188;
            }
          }
        }
        v124 = (uint64_t *)(v121 + 16 * v122);
LABEL_188:
        if (v124 != (uint64_t *)(v121 + 16 * v122))
        {
          v128 = v124[1];
          if (v128)
          {
            for (i = *(_QWORD *)(v128 + 8); i != v128; i = *(_QWORD *)(i + 8))
            {
              v130 = i - 32;
              if (!i)
                v130 = 0;
              v131 = *(unsigned __int8 *)(v130 + 16);
              if (v131 == 25)
                v132 = v130;
              else
                v132 = 0;
              if (i && v131 == 25)
              {
                if (*(_BYTE *)(v132 + 16) == 25)
                  v133 = v132;
                else
                  v133 = 0;
                if (v133)
                  v134 = (uint64_t *)(v133 - 32);
                else
                  v134 = (uint64_t *)(v132 - 64);
                v135 = *v134;
                if (*(_QWORD *)(v16 + 96) != v135)
                {
                  v136 = sub_1C477672C((uint64_t)a4 + 56, *(_QWORD *)(v135 + 64));
                  v137 = *((_QWORD *)a4 + 8);
                  v138 = 72;
                  if (v137 == *((_QWORD *)a4 + 7))
                    v138 = 76;
                  if (v136 != (_QWORD *)(v137 + 8 * *(unsigned int *)((char *)a4 + v138)))
                    return 0;
                }
                if (!*(_BYTE *)(a7 + 16) && (llvm::MemorySSA::dominates(v16, v162, v132) & 1) == 0)
                  return 0;
              }
              else if (i && v131 == 26)
              {
                v139 = *(_QWORD *)(v130 + 72);
                v140 = *(unsigned __int8 *)(v139 + 16);
                if (v139)
                {
                  if (v140 == 60)
                    return 0;
                }
                if (v139 && v140 == 84)
                {
                  v163 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))*((_QWORD *)v78 - 4);
                  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v78 + 5) + 56) + 40) + 272, **((_QWORD **)v78 - 8));
                  v143 = v142 == 1 ? -2 : (unint64_t)(v141 + 7) >> 3;
                  llvm::Instruction::getAAMetadata((uint64_t ***)v78, &v170);
                  v168 = v163;
                  v169 = v143;
                  v98 = v161;
                  if ((llvm::AAResults::getModRefInfo((uint64_t)a2, v139, (uint64_t)&v168) & 3) != 0)
                    return 0;
                }
              }
            }
          }
        }
        ++v97;
      }
      while (v97 != v98);
    }
    SkipSelfWalker = llvm::MemorySSA::getSkipSelfWalker((llvm::MemorySSA *)v16);
    v145 = SkipSelfWalker[1];
    v146 = *(_DWORD *)(v145 + 40);
    if (v146)
    {
      v147 = *(_QWORD *)(v145 + 24);
      v148 = v146 - 1;
      v149 = (v146 - 1) & ((v78 >> 4) ^ (v78 >> 9));
      v150 = *(llvm **)(v147 + 16 * v149);
      if (v78 == v150)
      {
LABEL_229:
        v153 = *(_QWORD *)(v147 + 16 * v149 + 8);
        goto LABEL_235;
      }
      v151 = 1;
      while (v150 != (llvm *)-4096)
      {
        v152 = v149 + v151++;
        v149 = v152 & v148;
        v150 = *(llvm **)(v147 + 16 * v149);
        if (v78 == v150)
          goto LABEL_229;
      }
    }
    v153 = 0;
LABEL_235:
    v156 = (*(uint64_t (**)(_QWORD *, uint64_t))(*SkipSelfWalker + 16))(SkipSelfWalker, v153);
    ++*(_DWORD *)(a7 + 4);
    if (*(_QWORD *)(v16 + 96) != v156)
    {
      v157 = sub_1C477672C((uint64_t)a4 + 56, *(_QWORD *)(v156 + 64));
      v158 = *((_QWORD *)a4 + 8);
      v159 = 72;
      if (v158 == *((_QWORD *)a4 + 7))
        v159 = 76;
      return v157 == (_QWORD *)(v158 + 8 * *(unsigned int *)((char *)a4 + v159));
    }
    return 1;
  }
  v16 = *(_QWORD *)a5;
  if (v14 == 60)
    v17 = this;
  else
    v17 = 0;
  if (v14 != 60)
    goto LABEL_73;
  if ((*((_WORD *)this + 9) & 0x301) != 0)
    return 0;
  v19 = (int)a6;
  v168 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))*((_QWORD *)this - 4);
  v169 = -1;
  v170 = 0u;
  v171 = 0u;
  if ((llvm::AAResults::pointsToConstantMemory((uint64_t)a2, (uint64_t)&v168, 0) & 1) != 0)
    return 1;
  if ((*((_BYTE *)this + 23) & 0x20) != 0)
  {
    v21 = ***(_QWORD ***)this;
    v168 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))this;
    v22 = *(_DWORD *)(v21 + 2496);
    if (v22)
    {
      v23 = *(_QWORD *)(v21 + 2480);
      v24 = v22 - 1;
      v25 = v24 & ((this >> 4) ^ (this >> 9));
      v26 = (llvm **)(v23 + 40 * v25);
      v27 = *v26;
      if (*v26 == this)
      {
LABEL_22:
        v32 = *((unsigned int *)v26 + 4);
        if ((_DWORD)v32)
        {
          v33 = (_QWORD *)((char *)v26[1] + 8);
          v34 = 16 * v32;
          while (*((_DWORD *)v33 - 2) != 6)
          {
            v33 += 2;
            v34 -= 16;
            if (!v34)
              goto LABEL_26;
          }
          if (*v33)
            return 1;
        }
        goto LABEL_26;
      }
      v28 = 0;
      v29 = 1;
      while (v27 != (llvm *)-4096)
      {
        if (v28)
          v30 = 0;
        else
          v30 = v27 == (llvm *)-8192;
        if (v30)
          v28 = v26;
        v31 = v25 + v29++;
        v25 = v31 & v24;
        v26 = (llvm **)(v23 + 40 * v25);
        v27 = *v26;
        if (*v26 == this)
          goto LABEL_22;
      }
      if (v28)
        v154 = v28;
      else
        v154 = v26;
    }
    else
    {
      v154 = 0;
    }
    v26 = (llvm **)sub_1C541AB24(v21 + 2480, (uint64_t)&v168, (uint64_t *)&v168, v154);
    v155 = v168;
    v26[3] = 0;
    v26[4] = 0;
    *v26 = (llvm *)v155;
    v26[1] = (llvm *)(v26 + 3);
    v26[2] = (llvm *)0x100000000;
    goto LABEL_22;
  }
LABEL_26:
  v35 = *((unsigned __int8 *)this + 16);
  if (v35 == 60 || v35 == 61)
  {
    v36 = (*((_WORD *)this + 9) & 0x380) != 0;
  }
  else
  {
    if ((v35 - 63) >= 3)
    {
LABEL_32:
      v38 = *((_QWORD *)this - 4);
      sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272, *(_QWORD *)this);
      if (v40 == 1)
        goto LABEL_112;
      v41 = v39;
      v42 = **((_QWORD **)this - 4);
      v43 = *(_DWORD *)(v42 + 8);
      if ((v43 & 0xFE) == 0x12)
        v43 = *(_DWORD *)(**(_QWORD **)(v42 + 16) + 8);
      v44 = llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)this + 1912), (llvm::Type *)(v43 >> 8));
      if (*(_QWORD *)v38 != v44)
      {
        v45 = 1;
        while (v45 <= dword_1ED81E2F0 && *(_BYTE *)(v38 + 16) == 77)
        {
          v38 = *(_QWORD *)(v38 - 32);
          ++v45;
          if (*(_QWORD *)v38 == v44)
            goto LABEL_40;
        }
LABEL_112:
        v79 = *(_DWORD *)(v16 + 40);
        if (v79)
        {
          v80 = *(_QWORD *)(v16 + 24);
          v81 = v79 - 1;
          v82 = (v79 - 1) & ((v17 >> 4) ^ (v17 >> 9));
          v83 = *(llvm **)(v80 + 16 * v82);
          if (v17 == v83)
          {
LABEL_117:
            v86 = *(_QWORD *)(v80 + 16 * v82 + 8);
LABEL_119:
            v87 = sub_1C5B4A584((llvm::MemorySSA *)v16, v86, a4, (uint64_t)this, a7);
            v71 = v87 ^ 1u;
            if (a8)
            {
              if (v87)
              {
                if (llvm::Loop::isLoopInvariant((uint64_t)a4, *((_QWORD *)this - 4)))
                {
                  v88 = ****(_QWORD ****)a8;
                  if (*(_QWORD *)(v88 + 128)
                    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v88 + 72) + 48))(*(_QWORD *)(v88 + 72)))
                  {
                    v89 = *(_QWORD *)(*((_QWORD *)v17 + 5) + 56);
                    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v170 + 8, (llvm *)((char *)v17 + 48));
                    v90 = *((_QWORD *)v17 + 5);
                    LODWORD(v169) = 10;
                    BYTE4(v169) = 2;
                    *(_QWORD *)&v170 = v89;
                    *((_QWORD *)&v171 + 1) = "licm";
                    v172 = "LoadWithLoopInvariantAddressInvalidated";
                    v173 = 39;
                    v174 = 0;
                    v175 = 0;
                    v176 = v178;
                    v177 = 0x400000000;
                    v178[256] = 0;
                    v179 = -1;
                    v180 = v90;
                    v168 = &off_1E814E538;
                    v164[0] = "failed to move load with loop-invariant address because the loop may invalidate its value";
                    v164[1] = (const void *)89;
                    sub_1C53B17B4((uint64_t)&v176, v164);
                    sub_1C61998EC((uint64_t)v164, (uint64_t)&v168);
                    v164[0] = &off_1E814E538;
                    v168 = &off_1E814E790;
                    v91 = (char *)v176;
                    if ((_DWORD)v177)
                    {
                      v92 = (unint64_t)v177 << 6;
                      do
                      {
                        v93 = (void **)&v91[v92];
                        if (v91[v92 - 17] < 0)
                          operator delete(*(v93 - 5));
                        if (*((char *)v93 - 41) < 0)
                          operator delete(*(v93 - 8));
                        v92 -= 64;
                      }
                      while (v92);
                      v91 = (char *)v176;
                    }
                    if (v91 != v178)
                      free(v91);
                    llvm::OptimizationRemarkEmitter::emit(a8, (llvm::DiagnosticInfoOptimizationBase *)v164);
                    v164[0] = &off_1E814E790;
                    v94 = (char *)v165;
                    if (v166)
                    {
                      v95 = (unint64_t)v166 << 6;
                      do
                      {
                        v96 = (void **)&v94[v95];
                        if (v94[v95 - 17] < 0)
                          operator delete(*(v96 - 5));
                        if (*((char *)v96 - 41) < 0)
                          operator delete(*(v96 - 8));
                        v95 -= 64;
                      }
                      while (v95);
                      v94 = (char *)v165;
                    }
                    if (v94 != (char *)&v167)
                      free(v94);
                  }
                }
              }
            }
            return v71;
          }
          v84 = 1;
          while (v83 != (llvm *)-4096)
          {
            v85 = v82 + v84++;
            v82 = v85 & v81;
            v83 = *(llvm **)(v80 + 16 * v82);
            if (v17 == v83)
              goto LABEL_117;
          }
        }
        v86 = 0;
        goto LABEL_119;
      }
LABEL_40:
      if (*(unsigned __int8 *)(v38 + 16) < 0x15u)
        goto LABEL_112;
      v46 = *(_QWORD *)(v38 + 8);
      if (!v46)
        goto LABEL_112;
      v47 = 0;
      v48 = dword_1ED81E2F0;
      while (1)
      {
        if (++v47 > v48)
          goto LABEL_112;
        v49 = *(_QWORD *)(v46 + 24);
        if (*(_BYTE *)(v49 + 16) == 84)
        {
          v50 = *(_QWORD *)(v49 - 32);
          if (v50)
          {
            if (!*(_BYTE *)(v50 + 16)
              && *(_QWORD *)(v50 + 24) == *(_QWORD *)(v49 + 72)
              && (*(_BYTE *)(v50 + 33) & 0x20) != 0
              && *(_DWORD *)(v50 + 36) == 164
              && !*(_QWORD *)(v49 + 8))
            {
              v51 = *(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF));
              v52 = *(_DWORD *)(v51 + 32);
              v53 = v52 - 1;
              if (v52 > 0x40)
              {
                v56 = *(uint64_t **)(v51 + 24);
                if ((((unint64_t)v56[v53 >> 6] >> v53) & 1) != 0)
                  goto LABEL_51;
                v55 = *v56;
              }
              else
              {
                v54 = *(_QWORD *)(v51 + 24);
                if (((v54 >> v53) & 1) != 0)
                  goto LABEL_51;
                v55 = (uint64_t)(v54 << -(char)v52) >> -(char)v52;
              }
              if (v41 <= 8 * v55)
              {
                if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates((uint64_t)a3, *(_QWORD *)(v49 + 40), **((_QWORD **)a4 + 4)))
                {
                  return 1;
                }
                v48 = dword_1ED81E2F0;
              }
            }
          }
        }
LABEL_51:
        v46 = *(_QWORD *)(v46 + 8);
        if (!v46)
          goto LABEL_112;
      }
    }
    v36 = 1;
  }
  if (!v36 || v19 != 0)
    goto LABEL_32;
  return 0;
}

