uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::isSubRegion(unsigned __int8 *a1)
{
  return (*a1 >> 2) & 1;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::removeSubRegion(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(uint64_t **)(a1 + 40);
  v4 = *(uint64_t **)(a1 + 48);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        v5 = *(uint64_t **)(a1 + 48);
        break;
      }
    }
  }
  v6 = v5 + 1;
  if (v5 + 1 != v4)
  {
    do
    {
      v7 = v6 - 1;
      v8 = *v6;
      *v6++ = 0;
      sub_1C4EFBE80(v7, v8);
      ++v5;
    }
    while (v6 != v4);
    v4 = *(uint64_t **)(a1 + 48);
  }
  while (v4 != v5)
    sub_1C4EFBE80(--v4, 0);
  *(_QWORD *)(a1 + 48) = v5;
  return a2;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::transferChildrenTo(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = result;
  v3 = (uint64_t *)result[5];
  v4 = (uint64_t *)result[6];
  if (v3 != v4)
  {
    v6 = (uint64_t **)(a2 + 40);
    result = *(uint64_t **)(a2 + 48);
    do
    {
      *(_QWORD *)(*v3 + 8) = a2;
      if ((unint64_t)result >= *(_QWORD *)(a2 + 56))
      {
        result = sub_1C4EFBEFC(v6, v3);
      }
      else
      {
        v7 = *v3;
        *v3 = 0;
        *result++ = v7;
      }
      *(_QWORD *)(a2 + 48) = result;
      ++v3;
    }
    while (v3 != v4);
    v8 = (uint64_t *)v2[5];
    v3 = (uint64_t *)v2[6];
    if (v3 != v8)
    {
      do
        result = sub_1C4EFBE80(--v3, 0);
      while (v3 != v8);
      v3 = v8;
    }
  }
  v2[6] = (uint64_t)v3;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::block_begin@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C4EFC3CC(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

{
  return sub_1C4EFC5A8(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

double llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::block_end@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::element_begin@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C4EFA010(a2, a1);
}

{
  return sub_1C4EFA0F0(a2, a1);
}

uint64_t sub_1C4EFA010(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *SubRegionNode;

  v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(a2, v4);
  if (!SubRegionNode)
    SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode((uint64_t)a2, v4);
  return sub_1C61AEFB4(a1, (uint64_t)SubRegionNode);
}

double llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::element_end@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double result;

  v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(a1, v4))
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode((uint64_t)a1, v4);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a2 + 16) = 8;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return result;
}

{
  unint64_t v4;
  double result;

  v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(a1, v4))
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode((uint64_t)a1, v4);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a2 + 16) = 8;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return result;
}

uint64_t sub_1C4EFA0F0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *SubRegionNode;

  v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(a2, v4);
  if (!SubRegionNode)
    SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode((uint64_t)a2, v4);
  return sub_1C61AF054(a1, (uint64_t)SubRegionNode);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::RegionInfoBase(uint64_t result)
{
  *(_QWORD *)result = &unk_1E813A6C8;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

_DWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::wipe(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return sub_1C6125098((_DWORD *)(a1 + 40));
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v4 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v4;
  v5 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  sub_1C6125098((_DWORD *)(a2 + 40));
  return a1;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::verifyBBMap(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  const void *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  const void *v10;
  void *v11;
  unsigned int v12;
  char *v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE v24[64];
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  _BYTE v33[64];
  void *__p;
  char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  void *v42;
  _BYTE *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;

  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements(a2, &v37);
  v4 = v33;
  v28 = v33;
  v5 = v38;
  if (v38 == v37)
  {
    v29 = v33;
    v6 = v38;
  }
  else
  {
    v21 = v39;
    v4 = malloc_type_malloc(8 * v39, 0x4065EBACuLL);
    if (!v4)
    {
      if (v21)
        goto LABEL_66;
      v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v4)
        goto LABEL_66;
    }
    v29 = v4;
    v6 = v37;
    v5 = v38;
  }
  v7 = v40;
  v30 = v39;
  if (v5 == v6)
    v8 = v40;
  else
    v8 = v39;
  if (v8)
  {
    memmove(v4, v5, 8 * v8);
    v7 = v40;
  }
  v31 = v7;
  v32 = v41;
  v35 = 0;
  v36 = 0;
  __p = 0;
  sub_1C4EFB920(&__p, v42, v43, 0xCCCCCCCCCCCCCCCDLL * ((v43 - (_BYTE *)v42) >> 3));
  v9 = v24;
  v10 = v45;
  if (v45 != v44)
  {
    v22 = v46;
    v9 = malloc_type_malloc(8 * v46, 0x4065EBACuLL);
    if (v9 || !v22 && (v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v23 = v9;
      v11 = v44;
      v10 = v45;
      goto LABEL_10;
    }
LABEL_66:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v23 = v24;
  v11 = v45;
LABEL_10:
  if (v10 == v11)
    v12 = v47;
  else
    v12 = v46;
  if (v12)
    memmove(v9, v10, 8 * v12);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  sub_1C4EFB920(&v25, v48, v49, 0xCCCCCCCCCCCCCCCDLL * ((v49 - (_BYTE *)v48) >> 3));
  while (1)
  {
    v13 = (char *)__p;
    if (v35 - (_BYTE *)__p != v26 - v25)
      goto LABEL_33;
    if (__p == v35)
      break;
    v14 = v25;
    while (*(_QWORD *)v13 == *(_QWORD *)v14)
    {
      v15 = *((unsigned __int8 *)v14 + 32);
      if (v13[32])
        v16 = v15 == 0;
      else
        v16 = 1;
      if (v16)
      {
        if ((v13[32] == 0) == (v15 != 0))
          break;
      }
      else
      {
        v17 = *((_QWORD *)v13 + 1);
        if ((v17 & 6) != 0)
        {
          if (((v14[2] ^ v17) & 6) != 0)
            break;
        }
        else if (*((_DWORD *)v13 + 6) != v14[6])
        {
          break;
        }
      }
      v13 += 40;
      v14 += 10;
      if (v13 == v35)
        goto LABEL_40;
    }
LABEL_33:
    v18 = **((_QWORD **)v35 - 5);
    if ((v18 & 4) != 0)
    {
      llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::verifyBBMap(a1);
    }
    else
    {
      v50 = 0;
      v51 = v18 & 0xFFFFFFFFFFFFFFF8;
      v19 = sub_1C61252B8((uint64_t *)(a1 + 40), &v51, &v50);
      v20 = 0;
      if (v19)
        v20 = *(_QWORD **)(v50 + 8);
      if (v20 != a2)
        llvm::report_fatal_error((llvm *)"BB map does not match region nesting", (const char *)1);
    }
    sub_1C4EFB9D0((llvm::SmallPtrSetImplBase *)&v28);
  }
LABEL_40:
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v23 != v24)
    free(v23);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
  if (v29 != v28)
    free(v29);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v45 != v44)
    free(v45);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v38 != v37)
    free(v38);
}

{
  __ZNK4llvm14RegionInfoBaseINS_12RegionTraitsINS_8FunctionEEEE11verifyBBMapEPKNS_6RegionE(a1, a2);
}

BOOL llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::isCommonDomFrontier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  _BOOL8 result;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 1;
  while (1)
  {
    v8 = *(_QWORD *)(v4 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v8 && v9 >= 0x1C;
    if (v10 && v9 - 29 < 0xB)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      return 1;
  }
LABEL_20:
  v16 = *(_QWORD *)(v8 + 40);
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 8), a3, v16)
    || (result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 8), a4, v16)))
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        return 1;
      v8 = *(_QWORD *)(v4 + 24);
      v13 = *(unsigned __int8 *)(v8 + 16);
      if (v8)
        v14 = v13 >= 0x1C;
      else
        v14 = 0;
      if (v14 && v13 - 29 < 0xB)
        goto LABEL_20;
    }
  }
  return result;
}

{
  return __ZNK4llvm14RegionInfoBaseINS_12RegionTraitsINS_8FunctionEEEE19isCommonDomFrontierEPNS_10BasicBlockES6_S6_(a1, a2, a3, a4);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::isRegion(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t result;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  _QWORD *v45;
  _QWORD *v46;

  v6 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD **)(v6 + 8);
  v7 = (_QWORD *)(v6 + 8);
  v8 = v9;
  if (!v9)
    goto LABEL_12;
  v10 = v7;
  do
  {
    v11 = v8[4];
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = v8;
    else
      v13 = v8 + 1;
    if (v12)
      v10 = v8;
    v8 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == v7 || v10[4] > a2)
LABEL_12:
    v10 = v7;
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 8), a2, a3))
  {
    v42 = (_QWORD *)v10[5];
    if (v42 != v10 + 6)
    {
      do
      {
        v43 = v42[4];
        v44 = v43 == a3 || v43 == a2;
        result = v44;
        if (!v44)
          break;
        v45 = (_QWORD *)v42[1];
        if (v45)
        {
          do
          {
            v46 = v45;
            v45 = (_QWORD *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            v46 = (_QWORD *)v42[2];
            v26 = *v46 == (_QWORD)v42;
            v42 = v46;
          }
          while (!v26);
        }
        v42 = v46;
      }
      while (v46 != v10 + 6);
      return result;
    }
    return 1;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD **)(v14 + 8);
  v15 = (_QWORD *)(v14 + 8);
  v16 = v17;
  if (!v17)
    goto LABEL_25;
  v18 = v15;
  do
  {
    v19 = v16[4];
    v20 = v19 >= a3;
    if (v19 >= a3)
      v21 = v16;
    else
      v21 = v16 + 1;
    if (v20)
      v18 = v16;
    v16 = (_QWORD *)*v21;
  }
  while (*v21);
  if (v18 == v15 || v18[4] > a3)
LABEL_25:
    v18 = v15;
  v22 = (_QWORD *)v10[5];
  v23 = v10 + 6;
  if (v22 != v23)
  {
    v24 = v18 + 6;
    do
    {
      v25 = v22[4];
      v26 = v25 == a3 || v25 == a2;
      if (!v26)
      {
        v27 = (_QWORD *)*v24;
        if (!*v24)
          return 0;
        v28 = v18 + 6;
        do
        {
          v29 = v27[4];
          v30 = v29 >= v25;
          if (v29 >= v25)
            v31 = v27;
          else
            v31 = v27 + 1;
          if (v30)
            v28 = v27;
          v27 = (_QWORD *)*v31;
        }
        while (*v31);
        if (v28 == v24 || v25 < v28[4])
          return 0;
        result = llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::isCommonDomFrontier(a1, v25, a2, a3);
        if (!(_DWORD)result)
          return result;
      }
      v33 = (_QWORD *)v22[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v22[2];
          v26 = *v34 == (_QWORD)v22;
          v22 = v34;
        }
        while (!v26);
      }
      v22 = v34;
    }
    while (v34 != v23);
  }
  v35 = (_QWORD *)v18[5];
  v36 = v18 + 6;
  if (v35 == v18 + 6)
    return 1;
  do
  {
    v37 = v35[4];
    v38 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(a1 + 8), a2, v37);
    v39 = v37 != a3 && v38;
    if (v39)
      break;
    v40 = (_QWORD *)v35[1];
    if (v40)
    {
      do
      {
        v41 = v40;
        v40 = (_QWORD *)*v40;
      }
      while (v40);
    }
    else
    {
      do
      {
        v41 = (_QWORD *)v35[2];
        v26 = *v41 == (_QWORD)v35;
        v35 = v41;
      }
      while (!v26);
    }
    v35 = v41;
  }
  while (v41 != v36);
  return !v39;
}

{
  return __ZNK4llvm14RegionInfoBaseINS_12RegionTraitsINS_8FunctionEEEE8isRegionEPNS_10BasicBlockES6_(a1, a2, a3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getNextPostDom(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;

  v4 = a2;
  v16 = *a2;
  v17 = 0;
  if (sub_1C61252B8((uint64_t *)a3, &v16, &v17)
    && v17 != *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16))
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v6 + 48);
    v8 = *(unsigned int *)(v6 + 64);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(v17 + 8);
      LODWORD(v10) = ((v9 >> 4) ^ (v9 >> 9)) & (v8 - 1);
      v11 = (uint64_t *)(v7 + 16 * v10);
      v12 = *v11;
      if (v9 == *v11)
      {
LABEL_10:
        v4 = (_QWORD *)v11[1];
        return v4[1];
      }
      v13 = 1;
      while (v12 != -4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v8 - 1);
        v12 = *(_QWORD *)(v7 + 16 * v10);
        if (v9 == v12)
        {
          v11 = (uint64_t *)(v7 + 16 * v10);
          goto LABEL_10;
        }
      }
    }
    v11 = (uint64_t *)(v7 + 16 * v8);
    goto LABEL_10;
  }
  return v4[1];
}

{
  return __ZNK4llvm14RegionInfoBaseINS_12RegionTraitsINS_8FunctionEEEE14getNextPostDomEPNS_15DomTreeNodeBaseINS_10BasicBlockEEEPNS_8DenseMapIPS6_SA_NS_12DenseMapInfoISA_vEENS_6detail12DenseMapPairISA_SA_EEEE(a1, a2, a3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::findRegionsWithEntry(uint64_t result, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t **Region;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)(v6 + 48);
  v8 = *(unsigned int *)(v6 + 64);
  if (!(_DWORD)v8)
  {
LABEL_7:
    v10 = (uint64_t *)(v7 + 16 * v8);
    goto LABEL_8;
  }
  LODWORD(v9) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (uint64_t *)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(_QWORD *)(v7 + 16 * v9);
      if (v11 == a2)
      {
        v10 = (uint64_t *)(v7 + 16 * v9);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v10 != (uint64_t *)(v7 + 16 * v8))
  {
    v14 = (_QWORD *)v10[1];
    if (v14)
    {
      v15 = 0;
      v16 = a2;
      do
      {
        result = llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getNextPostDom((uint64_t)v5, v14, a3);
        if (!result)
          break;
        v14 = (_QWORD *)result;
        v17 = *(_QWORD *)result;
        if (!*(_QWORD *)result)
          break;
        if (llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::isRegion((uint64_t)v5, a2, v17))
        {
          Region = (uint64_t **)llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::createRegion(v5, a2, v17);
          v18 = Region;
          if (v15)
            llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::addSubRegion(Region, v15, 0);
          v16 = v17;
        }
        else
        {
          v18 = v15;
        }
        result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v5[1], a2, v17);
        v15 = v18;
      }
      while ((result & 1) != 0);
      if (v16 != a2)
        return (uint64_t)llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::insertShortCut((uint64_t)v5, a2, v16, a3);
    }
  }
  return result;
}

{
  return __ZN4llvm14RegionInfoBaseINS_12RegionTraitsINS_8FunctionEEEE20findRegionsWithEntryEPNS_10BasicBlockEPNS_8DenseMapIS6_S6_NS_12DenseMapInfoIS6_vEENS_6detail12DenseMapPairIS6_S6_EEEE(result, a2, a3);
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::scanForRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[17];

  v36[16] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 80);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 24);
  v9 = *(unsigned int *)(v7 + 40);
  if (!(_DWORD)v9)
  {
LABEL_10:
    v11 = (uint64_t *)(v8 + 16 * v9);
    goto LABEL_11;
  }
  LODWORD(v10) = ((v6 >> 4) ^ (v6 >> 9)) & (v9 - 1);
  v11 = (uint64_t *)(v8 + 16 * v10);
  v12 = *v11;
  if (v6 != *v11)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(_QWORD *)(v8 + 16 * v10);
      if (v6 == v12)
      {
        v11 = (uint64_t *)(v8 + 16 * v10);
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
LABEL_11:
  if (v11 == (uint64_t *)(v8 + 16 * v9))
    v15 = 0;
  else
    v15 = v11[1];
  sub_1C61AE614((uint64_t)&v29, v15);
  sub_1C61AF960((const void **)&v24, (llvm::SmallPtrSetImplBase *)&v29);
  sub_1C61AF960((const void **)&v19, (llvm::SmallPtrSetImplBase *)&v33);
  while (1)
  {
    if (v27 != v22)
      goto LABEL_25;
    if (!v27)
      break;
    v16 = v21;
    v17 = v26;
    while (*v17 == *v16 && v17[1] == v16[1])
    {
      v17 += 2;
      v16 += 2;
      if (v17 == (_QWORD *)((char *)v26 + 16 * v27))
        goto LABEL_27;
    }
LABEL_25:
    llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::findRegionsWithEntry(a1, **((_QWORD **)v26 + 2 * v27-- - 2), a3);
    if (v27)
      sub_1C4EB6F48(&v24);
  }
LABEL_27:
  if (v21 != &v23)
    free(v21);
  if (v20 != v19)
    free(v20);
  if (v26 != &v28)
    free(v26);
  if (v25 != v24)
    free(v25);
  if (v35 != v36)
    free(v35);
  if (v34 != v33)
    free(v34);
  if (v31 != &v32)
    free(v31);
  if (v30 != v29)
    free(v30);
}

{
  __ZN4llvm14RegionInfoBaseINS_12RegionTraitsINS_8FunctionEEEE14scanForRegionsERS2_PNS_8DenseMapIPNS_10BasicBlockES8_NS_12DenseMapInfoIS8_vEENS_6detail12DenseMapPairIS8_S8_EEEE(a1, a2, a3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getTopMostParent(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  do
  {
    result = a2;
    a2 = *(_QWORD *)(a2 + 8);
  }
  while (a2);
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::calculate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD v16[2];
  int v17;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::scanForRegions(a1, a2, (uint64_t)v16);
  v4 = *(_QWORD *)(a2 + 80);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(unsigned int *)(v6 + 40);
  if ((_DWORD)v8)
  {
    LODWORD(v9) = ((v5 >> 4) ^ (v5 >> 9)) & (v8 - 1);
    v10 = (uint64_t *)(v7 + 16 * v9);
    v11 = *v10;
    if (v5 == *v10)
      goto LABEL_11;
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(_QWORD *)(v7 + 16 * v9);
      if (v5 == v11)
      {
        v10 = (uint64_t *)(v7 + 16 * v9);
        goto LABEL_11;
      }
    }
  }
  v10 = (uint64_t *)(v7 + 16 * v8);
LABEL_11:
  if (v10 == (uint64_t *)(v7 + 16 * v8))
    v14 = 0;
  else
    v14 = v10[1];
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::buildRegionsTree(a1, v14, *(uint64_t ***)(a1 + 32));
  return MEMORY[0x1CAA32FB4](v16[0], 8);
}

{
  return __ZN4llvm14RegionInfoBaseINS_12RegionTraitsINS_8FunctionEEEE9calculateERS2_(a1, a2);
}

double llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  void *v4;
  _OWORD *v5;
  double result;

  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0xCuLL)
  {
    qmemcpy(v4, "Region tree:\n", 13);
    *((_QWORD *)this + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(this, "Region tree:\n", 0xDuLL);
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::print(*(_QWORD **)(a1 + 32), this, 1, 0, llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::printStyle);
  v5 = (_OWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0xFuLL)
  {
    result = *(double *)"End region tree\n";
    *v5 = *(_OWORD *)"End region tree\n";
    *((_QWORD *)this + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(this, "End region tree\n", 0x10uLL);
  }
  return result;
}

void llvm::Region::~Region(llvm::Region *this)
{
  _QWORD *v2;
  void **v3;

  v2 = (_QWORD *)((char *)this + 72);
  sub_1C61AF404((uint64_t)this + 64, *((_QWORD **)this + 9));
  *((_QWORD *)this + 8) = v2;
  *((_QWORD *)this + 10) = 0;
  *v2 = 0;
  v3 = (void **)((char *)this + 40);
  sub_1C4EFB84C(&v3);
}

{
  _QWORD *v2;
  void **v3;

  v2 = (_QWORD *)((char *)this + 72);
  sub_1C61AF404((uint64_t)this + 64, *((_QWORD **)this + 9));
  *((_QWORD *)this + 8) = v2;
  *((_QWORD *)this + 10) = 0;
  *v2 = 0;
  v3 = (void **)((char *)this + 40);
  sub_1C4EFB84C(&v3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::operator[](uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  v2 = sub_1C61252B8((uint64_t *)(a1 + 40), &v5, &v4);
  result = 0;
  if (v2)
    return *(_QWORD *)(v4 + 8);
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getMaxRegionExit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  _BOOL4 v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = 0;
  v5 = (uint64_t *)(a1 + 40);
  do
  {
    v29 = 0;
    v30 = a2;
    result = sub_1C61252B8(v5, &v30, &v29);
    v7 = 0;
    if ((_DWORD)result)
      v7 = *(_QWORD **)(v29 + 8);
    while (1)
    {
      v8 = v7;
      if (!v7)
        break;
      v7 = (_QWORD *)v7[1];
      if (!v7 || a2 != (*v7 & 0xFFFFFFFFFFFFFFF8))
      {
        if (a2 == (*v8 & 0xFFFFFFFFFFFFFFF8))
        {
          v12 = v8 + 4;
          goto LABEL_15;
        }
        break;
      }
    }
    v9 = *(_QWORD *)(a2 + 40);
    if (v9 == a2 + 40)
      return v4;
    if (v9)
      v10 = v9 - 24;
    else
      v10 = 0;
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v11 == 30)
    {
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
        return v4;
LABEL_14:
      v12 = (uint64_t *)(v10 - 32);
    }
    else
    {
      switch(*(_BYTE *)(v10 + 16))
      {
        case 0x1E:
          __break(1u);
          return result;
        case 0x1F:
          v26 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_45;
        case 0x20:
        case 0x26:
          v26 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_45;
        case 0x24:
          v26 = *(_WORD *)(v10 + 18) & 1;
          goto LABEL_45;
        case 0x25:
          goto LABEL_14;
        case 0x27:
          v26 = *(_DWORD *)(v10 + 80) + 1;
LABEL_45:
          if (v26 != 1)
            return v4;
          if (v11 != 31)
            __asm { BR              X10 }
          v27 = *(_DWORD *)(v10 + 20);
          if ((v27 & 0x40000000) != 0)
            v28 = *(_QWORD *)(v10 - 8);
          else
            v28 = v10 - 32 * (v27 & 0x7FFFFFF);
          v12 = (uint64_t *)(v28 + 32);
          break;
        default:
          return v4;
      }
    }
LABEL_15:
    v4 = *v12;
    v29 = 0;
    v30 = v4;
    v13 = sub_1C61252B8(v5, &v30, &v29);
    v14 = 0;
    if (v13)
      v14 = *(_QWORD **)(v29 + 8);
    do
    {
      v15 = v14;
      if (!v14)
        break;
      v14 = (_QWORD *)v14[1];
      if (!v14)
        break;
    }
    while (v4 == (*v14 & 0xFFFFFFFFFFFFFFF8));
    v16 = *(_QWORD *)(v4 + 8);
    if (v16)
    {
      while (1)
      {
        v17 = *(_QWORD *)(v16 + 24);
        v18 = *(unsigned __int8 *)(v17 + 16);
        v19 = v17 && v18 >= 0x1C;
        if (v19 && v18 - 29 <= 0xA)
          break;
        v16 = *(_QWORD *)(v16 + 8);
        if (!v16)
          goto LABEL_30;
      }
LABEL_40:
      v25 = *(_QWORD *)(v17 + 40);
      if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v8, v25)
        || llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v15, v25))
      {
        while (1)
        {
          v16 = *(_QWORD *)(v16 + 8);
          if (!v16)
            break;
          v17 = *(_QWORD *)(v16 + 24);
          v22 = *(unsigned __int8 *)(v17 + 16);
          if (v17)
            v23 = v22 >= 0x1C;
          else
            v23 = 0;
          if (v23 && v22 - 29 < 0xB)
            goto LABEL_40;
        }
      }
    }
LABEL_30:
    v21 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 8), v4, a2);
    a2 = v4;
  }
  while (!v21);
  return v4;
}

_QWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getCommonRegion(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = a3;
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a2, a3) & 1) != 0)
    return a2;
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v3, a2) & 1) == 0)
  {
    do
      v3 = (_QWORD *)v3[1];
    while (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v3, a2));
  }
  return v3;
}

_QWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getCommonRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)(a1 + 40);
  v9 = 0;
  v10 = a2;
  v5 = 0;
  if (sub_1C61252B8((uint64_t *)(a1 + 40), &v10, &v9))
    v5 = *(_QWORD **)(v9 + 8);
  v9 = 0;
  v10 = a3;
  v6 = sub_1C61252B8(v4, &v10, &v9);
  v7 = 0;
  if (v6)
    v7 = *(_QWORD **)(v9 + 8);
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v5, v7) & 1) != 0)
    return v5;
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v7, v5) & 1) == 0)
  {
    do
      v7 = (_QWORD *)v7[1];
    while (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v7, v5));
  }
  return v7;
}

_QWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getCommonRegion(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  _QWORD **v6;
  _QWORD *v7;

  v2 = *(_QWORD ***)a2;
  v3 = *(unsigned int *)(a2 + 8);
  v4 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v3 - 8);
  v5 = v3 - 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (!v5)
    return v4;
  v6 = &v2[v5];
  do
  {
    v7 = *v2;
    if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v4, *v2) & 1) != 0)
    {
      v7 = v4;
    }
    else if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v7, v4) & 1) == 0)
    {
      do
        v7 = (_QWORD *)v7[1];
      while (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v7, v4));
    }
    ++v2;
    v4 = v7;
  }
  while (v2 != v6);
  return v7;
}

{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8) - 8);
  v4 = (uint64_t *)(a1 + 40);
  v12 = 0;
  v13 = v3;
  v5 = 0;
  if (sub_1C61252B8((uint64_t *)(a1 + 40), &v13, &v12))
    v5 = *(_QWORD **)(v12 + 8);
  v6 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v6;
  if (!v6)
    return v5;
  v7 = *(uint64_t **)a2;
  v8 = *(_QWORD *)a2 + 8 * v6;
  do
  {
    v9 = *v7;
    v12 = 0;
    v13 = v9;
    v10 = 0;
    if (sub_1C61252B8(v4, &v13, &v12))
      v10 = *(_QWORD **)(v12 + 8);
    if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v5, v10) & 1) != 0)
    {
      v10 = v5;
    }
    else if ((llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v10, v5) & 1) == 0)
    {
      do
        v10 = (_QWORD *)v10[1];
      while (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v10, v5));
    }
    ++v7;
    v5 = v10;
  }
  while (v7 != (uint64_t *)v8);
  return v10;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getTopLevelRegion(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::clearNodeCache(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::clearNodeCache(v1);
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::verifyAnalysis(uint64_t a1)
{
  if (llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::VerifyRegionInfo)
  {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::verifyRegionNest(*(uint64_t **)(a1 + 32));
    llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::verifyBBMap(a1, *(_QWORD **)(a1 + 32));
  }
}

uint64_t llvm::RegionInfo::RegionInfo(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = &off_1E813A6F0;
  return this;
}

{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = &off_1E813A6F0;
  return this;
}

void llvm::RegionInfoPass::~RegionInfoPass(llvm::RegionInfoPass *this)
{
  *(_QWORD *)this = &off_1E813A718;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase((_QWORD *)this + 4);
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E813A718;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase((_QWORD *)this + 4);
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E813A718;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase((_QWORD *)this + 4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4EFB67C(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeDominanceFrontierWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Detect single entry single exit regions";
  *(_QWORD *)(v3 + 8) = 39;
  *(_QWORD *)(v3 + 16) = "regions";
  *(_QWORD *)(v3 + 24) = 7;
  *(_QWORD *)(v3 + 32) = &llvm::RegionInfoPass::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::RegionInfoPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

_QWORD *llvm::RegionInfoPrinterPass::RegionInfoPrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

char *sub_1C4EFB72C(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1C4764EE4();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      v13 = *(_OWORD *)(v2 - 40);
      v14 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_1C4EFB84C(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          sub_1C61AF404(v6 + 64, *(_QWORD **)(v6 + 72));
          *(_QWORD *)(v6 + 64) = v6 + 72;
          *(_QWORD *)(v6 + 80) = 0;
          *(_QWORD *)(v6 + 72) = 0;
          v8 = v6 + 40;
          sub_1C4EFB84C(&v8);
          MEMORY[0x1CAA32FC0](v6, 0x1020C406A19994FLL);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C4EFB920(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      abort();
    v6 = result;
    v7 = 5 * a4;
    result = operator new(40 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v9 = 40 * ((a3 - a2 - 40) / 0x28uLL) + 40;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1C4EFB9D0(llvm::SmallPtrSetImplBase *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *SubRegionNode;
  char v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = *((_QWORD *)a1 + 13);
  while (2)
  {
    v3 = *(_QWORD **)(v2 - 40);
    v4 = (_OWORD *)(v2 - 32);
    if (!*(_BYTE *)(v2 - 8))
    {
      sub_1C61AF5B4((unint64_t *)&v33, *(_QWORD *)(v2 - 40));
      if (*(_BYTE *)(v2 - 8))
        *(_BYTE *)(v2 - 8) = 0;
      v21 = v33;
      *(_QWORD *)(v2 - 16) = v34;
      *v4 = v21;
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      v5 = *v3 & 0xFFFFFFFFFFFFFFF8;
      v6 = *(_QWORD *)(v5 + 40);
      if (v6 == v5 + 40)
      {
LABEL_10:
        v10 = 0;
      }
      else
      {
        v7 = v6 - 24;
        if (!v6)
          v7 = 0;
        v8 = *(unsigned __int8 *)(v7 + 16);
        v9 = v8 - 29;
        if (v8 != 30)
        {
          v10 = 0;
          switch(v9)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_11;
            case 1:
              __break(1u);
              break;
            case 2:
              v10 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_11;
            case 3:
            case 9:
              v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_11;
            case 4:
              v10 = 2;
              goto LABEL_11;
            case 7:
              v10 = *(_WORD *)(v7 + 18) & 1;
              goto LABEL_11;
            case 8:
              v10 = 1;
              goto LABEL_11;
            case 10:
              v10 = *(_DWORD *)(v7 + 80) + 1;
              goto LABEL_11;
            default:
              goto LABEL_10;
          }
          return;
        }
        v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
LABEL_11:
      v11 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 & 6) == 0)
        break;
      if ((*(_QWORD *)v4 & 6) == (*v3 & 4))
        goto LABEL_29;
      sub_1C61AF6D8((unint64_t *)(v2 - 32));
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 32);
LABEL_17:
      v17 = *(_QWORD **)(v12 + 8);
      SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(v17, v13);
      if (!SubRegionNode)
        SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode((uint64_t)v17, v13);
      sub_1C4774094(a1, (uint64_t)SubRegionNode);
      if (v19)
      {
        v23 = (_BYTE *)*((_QWORD *)a1 + 13);
        v22 = *((_QWORD *)a1 + 14);
        if ((unint64_t)v23 >= v22)
        {
          v25 = (_BYTE *)*((_QWORD *)a1 + 12);
          v26 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v25) >> 3) + 1;
          if (v26 > 0x666666666666666)
            abort();
          v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v25) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x333333333333333)
            v28 = 0x666666666666666;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 > 0x666666666666666)
              sub_1C4764EE4();
            v29 = (char *)operator new(40 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * ((v23 - v25) >> 3)];
          *(_QWORD *)v30 = SubRegionNode;
          v30[8] = 0;
          v30[32] = 0;
          v24 = v30 + 40;
          if (v23 != v25)
          {
            do
            {
              v31 = *(_OWORD *)(v23 - 40);
              v32 = *(_OWORD *)(v23 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v23 - 1);
              *(_OWORD *)(v30 - 24) = v32;
              *(_OWORD *)(v30 - 40) = v31;
              v30 -= 40;
              v23 -= 40;
            }
            while (v23 != v25);
            v23 = (_BYTE *)*((_QWORD *)a1 + 12);
          }
          *((_QWORD *)a1 + 12) = v30;
          *((_QWORD *)a1 + 13) = v24;
          *((_QWORD *)a1 + 14) = &v29[40 * v28];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v23 = SubRegionNode;
          v23[8] = 0;
          v24 = v23 + 40;
          v23[32] = 0;
        }
        *((_QWORD *)a1 + 13) = v24;
        return;
      }
    }
    v14 = *(unsigned int *)(v2 - 16);
    if ((_DWORD)v14 != v10)
    {
      v15 = *(_QWORD *)(v2 - 24);
      sub_1C61AF6D8((unint64_t *)(v2 - 32));
      v16 = *(unsigned __int8 *)(v15 + 16);
      if (v16 != 30)
        __asm { BR              X9 }
      v13 = *(_QWORD *)(v15 - 32 * v14 - 32);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_17;
    }
LABEL_29:
    v20 = *((_QWORD *)a1 + 12);
    v2 = *((_QWORD *)a1 + 13) - 40;
    *((_QWORD *)a1 + 13) = v2;
    if (v20 != v2)
      continue;
    break;
  }
}

uint64_t **sub_1C4EFBDA0(uint64_t **a1, unint64_t *a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x30uLL);
    v11 = *a3;
    *((_QWORD *)a3 + 1) = 0;
    *((_OWORD *)v8 + 2) = v11;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v8;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t *sub_1C4EFBE80(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1C61AF404(v2 + 64, *(_QWORD **)(v2 + 72));
    *(_QWORD *)(v2 + 64) = v2 + 72;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    v3 = (void **)(v2 + 40);
    sub_1C4EFB84C(&v3);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t *sub_1C4EFBEFC(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t *)&v8[8 * v2];
  v10 = (uint64_t *)&v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *v9 = v11;
  v12 = v9 + 1;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *--v14;
      *v14 = 0;
      *--v9 = v15;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
      sub_1C4EFBE80(--v16, 0);
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_1C4EFBFFC(llvm::SmallPtrSetImplBase *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *SubRegionNode;
  char v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = *((_QWORD *)a1 + 13);
  while (2)
  {
    v3 = *(_QWORD **)(v2 - 40);
    v4 = (_OWORD *)(v2 - 32);
    if (!*(_BYTE *)(v2 - 8))
    {
      sub_1C61AF5B4((unint64_t *)&v33, *(_QWORD *)(v2 - 40));
      if (*(_BYTE *)(v2 - 8))
        *(_BYTE *)(v2 - 8) = 0;
      v21 = v33;
      *(_QWORD *)(v2 - 16) = v34;
      *v4 = v21;
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      v5 = *v3 & 0xFFFFFFFFFFFFFFF8;
      v6 = *(_QWORD *)(v5 + 40);
      if (v6 == v5 + 40)
      {
LABEL_10:
        v10 = 0;
      }
      else
      {
        v7 = v6 - 24;
        if (!v6)
          v7 = 0;
        v8 = *(unsigned __int8 *)(v7 + 16);
        v9 = v8 - 29;
        if (v8 != 30)
        {
          v10 = 0;
          switch(v9)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_11;
            case 1:
              __break(1u);
              break;
            case 2:
              v10 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_11;
            case 3:
            case 9:
              v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_11;
            case 4:
              v10 = 2;
              goto LABEL_11;
            case 7:
              v10 = *(_WORD *)(v7 + 18) & 1;
              goto LABEL_11;
            case 8:
              v10 = 1;
              goto LABEL_11;
            case 10:
              v10 = *(_DWORD *)(v7 + 80) + 1;
              goto LABEL_11;
            default:
              goto LABEL_10;
          }
          return;
        }
        v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
LABEL_11:
      v11 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 & 6) == 0)
        break;
      if ((*(_QWORD *)v4 & 6) == (*v3 & 4))
        goto LABEL_29;
      sub_1C61AF6D8((unint64_t *)(v2 - 32));
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 32);
LABEL_17:
      v17 = *(_QWORD **)(v12 + 8);
      SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(v17, v13);
      if (!SubRegionNode)
        SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode((uint64_t)v17, v13);
      sub_1C4774094(a1, (uint64_t)SubRegionNode);
      if (v19)
      {
        v23 = (_BYTE *)*((_QWORD *)a1 + 13);
        v22 = *((_QWORD *)a1 + 14);
        if ((unint64_t)v23 >= v22)
        {
          v25 = (_BYTE *)*((_QWORD *)a1 + 12);
          v26 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v25) >> 3) + 1;
          if (v26 > 0x666666666666666)
            abort();
          v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v25) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x333333333333333)
            v28 = 0x666666666666666;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 > 0x666666666666666)
              sub_1C4764EE4();
            v29 = (char *)operator new(40 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * ((v23 - v25) >> 3)];
          *(_QWORD *)v30 = SubRegionNode;
          v30[8] = 0;
          v30[32] = 0;
          v24 = v30 + 40;
          if (v23 != v25)
          {
            do
            {
              v31 = *(_OWORD *)(v23 - 40);
              v32 = *(_OWORD *)(v23 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v23 - 1);
              *(_OWORD *)(v30 - 24) = v32;
              *(_OWORD *)(v30 - 40) = v31;
              v30 -= 40;
              v23 -= 40;
            }
            while (v23 != v25);
            v23 = (_BYTE *)*((_QWORD *)a1 + 12);
          }
          *((_QWORD *)a1 + 12) = v30;
          *((_QWORD *)a1 + 13) = v24;
          *((_QWORD *)a1 + 14) = &v29[40 * v28];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v23 = SubRegionNode;
          v23[8] = 0;
          v24 = v23 + 40;
          v23[32] = 0;
        }
        *((_QWORD *)a1 + 13) = v24;
        return;
      }
    }
    v14 = *(unsigned int *)(v2 - 16);
    if ((_DWORD)v14 != v10)
    {
      v15 = *(_QWORD *)(v2 - 24);
      sub_1C61AF6D8((unint64_t *)(v2 - 32));
      v16 = *(unsigned __int8 *)(v15 + 16);
      if (v16 != 30)
        __asm { BR              X9 }
      v13 = *(_QWORD *)(v15 - 32 * v14 - 32);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_17;
    }
LABEL_29:
    v20 = *((_QWORD *)a1 + 12);
    v2 = *((_QWORD *)a1 + 13) - 40;
    *((_QWORD *)a1 + 13) = v2;
    if (v20 != v2)
      continue;
    break;
  }
}

uint64_t sub_1C4EFC3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  __int128 v15;
  void *v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  int v20;
  uint64_t *v21;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[64];
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;

  v23 = v27;
  v24 = v27;
  v25 = 8;
  v26 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v23, a2);
  v6 = v29;
  if (v29 < v30)
  {
    *v29 = a2;
    *((_BYTE *)v6 + 8) = 0;
    v14 = v6 + 4;
    *((_BYTE *)v6 + 24) = 0;
  }
  else
  {
    v7 = v28;
    v8 = ((char *)v29 - (char *)v28) >> 5;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59)
      abort();
    v10 = (char *)v30 - (char *)v28;
    if (((char *)v30 - (char *)v28) >> 4 > v9)
      v9 = v10 >> 4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 59)
        sub_1C4764EE4();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[32 * v8];
    *(_QWORD *)v13 = a2;
    v13[8] = 0;
    v13[24] = 0;
    v14 = (uint64_t *)(v13 + 32);
    if (v6 != v7)
    {
      do
      {
        v15 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v13 - 1) = v15;
        v13 -= 32;
        v6 -= 4;
      }
      while (v6 != v7);
      v6 = v28;
    }
    v28 = (uint64_t *)v13;
    v29 = v14;
    v30 = (uint64_t *)&v12[32 * v11];
    if (v6)
      operator delete(v6);
  }
  v29 = v14;
  v16 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v18 = v23;
  v17 = v24;
  if (v24 == v23)
  {
    *(_QWORD *)(a1 + 8) = v16;
    v19 = HIDWORD(v25);
    if (HIDWORD(v25))
      memmove(v16, v17, 8 * HIDWORD(v25));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v24;
    v24 = v18;
    v17 = v18;
    v19 = HIDWORD(v25);
  }
  v20 = v26;
  *(_DWORD *)(a1 + 16) = v25;
  *(_DWORD *)(a1 + 20) = v19;
  *(_DWORD *)(a1 + 24) = v20;
  v25 = 8;
  v26 = 0;
  v21 = v30;
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v21;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  if (v17 != v18)
    free(v17);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a3);
  return a1;
}

uint64_t sub_1C4EFC5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  sub_1C61AF79C((uint64_t)&v11, a2);
  v5 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v7 = v11;
  v6 = v12;
  if (v12 == v11)
  {
    *(_QWORD *)(a1 + 8) = v5;
    v8 = HIDWORD(v13);
    if (HIDWORD(v13))
      memmove(v5, v6, 8 * HIDWORD(v13));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v12;
    v12 = v7;
    v6 = v7;
    v8 = HIDWORD(v13);
  }
  v9 = v14;
  *(_DWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 24) = v9;
  v13 = 8;
  v14 = 0;
  *(_OWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  v15 = 0uLL;
  v16 = 0;
  if (v6 != v7)
    free(v6);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a3);
  return a1;
}

void sub_1C4EFC680(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C61AFC80(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C4EFC6C4(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED7F3110 >= HIDWORD(qword_1ED7F3110))
  {
    v3 = qword_1ED7F3110 + 1;
    if (qword_1ED7F3108 <= a1 && qword_1ED7F3108 + 48 * (unint64_t)qword_1ED7F3110 > a1)
    {
      v5 = a1 - qword_1ED7F3108;
      sub_1C61AFD34(v3);
      return qword_1ED7F3108 + v5;
    }
    else
    {
      sub_1C61AFD34(v3);
    }
  }
  return a1;
}

uint64_t sub_1C4EFC738()
{
  __int128 v1;
  int v2;
  llvm *v3;
  __int128 v4;
  _QWORD v5[2];
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v1 = &llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::VerifyRegionInfo;
  *(_QWORD *)&v4 = "Verify region info (time consuming)";
  *((_QWORD *)&v4 + 1) = 35;
  sub_1C61AF9B4((_BYTE **)&v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED7F2FA0, &dword_1C475E000);
  v2 = 1;
  *(_QWORD *)&v1 = "style of printing regions";
  *((_QWORD *)&v1 + 1) = 25;
  v3 = (llvm *)&llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::printStyle;
  *(_QWORD *)&v4 = v5;
  v5[0] = "none";
  v5[1] = 4;
  v6 = 0;
  v7 = "print no details";
  v8 = 16;
  v11 = 1;
  v12 = "print regions in detail with block_iterator";
  v13 = 43;
  v9 = "bb";
  v10 = 2;
  v14 = "rn";
  v15 = 2;
  v16 = 2;
  v17 = "print regions in detail with element_iterator";
  v18 = 45;
  *((_QWORD *)&v4 + 1) = 0x400000003;
  sub_1C61AFA74(&v3, &v2, &v1, (uint64_t)&v4);
  if ((_QWORD *)v4 != v5)
    free((void *)v4);
  return __cxa_atexit((void (*)(void *))sub_1C61AE868, &qword_1ED7F3060, &dword_1C475E000);
}

double llvm::RGPassManager::RGPassManager(llvm::RGPassManager *this)
{
  double result;

  *((_QWORD *)this + 2) = &llvm::RGPassManager::ID;
  *((_DWORD *)this + 6) = 2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x1000000000;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = (char *)this + 280;
  *((_QWORD *)this + 34) = 0x1000000000;
  *((_DWORD *)this + 102) = 0;
  result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_QWORD *)this = &off_1E813A8F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = &unk_1E813A9A8;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 2) = &llvm::RGPassManager::ID;
  *((_DWORD *)this + 6) = 2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x1000000000;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = (char *)this + 280;
  *((_QWORD *)this + 34) = 0x1000000000;
  *((_DWORD *)this + 102) = 0;
  result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_QWORD *)this = &off_1E813A8F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = &unk_1E813A9A8;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return result;
}

uint64_t llvm::RGPassManager::runOnFunction(llvm::RGPassManager *this, llvm::Function *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char **v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void ****v29;
  std::string *v30;
  size_t size;
  llvm::Pass *v32;
  llvm::Timer *PassTimer;
  __n128 v34;
  llvm::Timer *v35;
  llvm::Pass *v36;
  int v37;
  int v38;
  std::string *v39;
  size_t v40;
  llvm::Timer *v41;
  llvm::Timer *v42;
  char v43;
  std::string::size_type v44;
  int v45;
  std::string *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  std::string __p[3];
  _BYTE *v56;
  uint64_t v57;
  _BYTE v58[16];
  _BYTE *v59;
  uint64_t v60;
  _BYTE v61[16];
  char *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = (void **)**((_QWORD **)this + 1);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::RegionInfoPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::RegionInfoPass::ID)
     + 32;
  *((_QWORD *)this + 58) = v5;
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      v10 = (char *)this + 8 * v8++ + 32;
      *((_QWORD *)v10 + 20) = v9 + 208;
    }
    while (v6 != v7);
    v5 = *((_QWORD *)this + 58);
  }
  sub_1C4EFCEF4(*(_QWORD *)(v5 + 32), (uint64_t)this + 416);
  v11 = *((_QWORD *)this + 57);
  if (!v11)
  {
    LOBYTE(v18) = 0;
    return v18 & 1;
  }
  v12 = *((_QWORD *)this + 53);
  if (*((_QWORD *)this + 54) == v12
    || (v13 = *((_QWORD *)this + 56),
        v14 = (char **)(v12 + 8 * (v13 >> 9)),
        v15 = *v14,
        v16 = (uint64_t *)&(*v14)[8 * (v13 & 0x1FF)],
        v17 = *(_QWORD *)(v12 + (((v13 + v11) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v11) & 0x1FF),
        v16 == (uint64_t *)v17))
  {
    v18 = 0;
    goto LABEL_22;
  }
  v18 = 0;
  LODWORD(v19) = *((_DWORD *)this + 14);
  v20 = v19;
  do
  {
    if (v20)
    {
      v21 = 0;
      v22 = *v16;
      do
      {
        v23 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v21);
        v18 |= (*(uint64_t (**)(uint64_t, uint64_t, llvm::RGPassManager *))(*(_QWORD *)v23 + 144))(v23, v22, this);
        ++v21;
        v19 = *((unsigned int *)this + 14);
      }
      while (v21 < v19);
      v15 = *v14;
      v20 = *((_DWORD *)this + 14);
    }
    if ((char *)++v16 - v15 == 4096)
    {
      v24 = v14[1];
      ++v14;
      v15 = v24;
      v16 = (uint64_t *)v24;
    }
  }
  while (v16 != (uint64_t *)v17);
  v11 = *((_QWORD *)this + 57);
  if (v11)
  {
LABEL_22:
    v25 = v11 - 1;
    v26 = *((_QWORD *)this + 56) + v25;
    v27 = *((_QWORD *)this + 53);
    *((_QWORD *)this + 59) = *(_QWORD *)(*(_QWORD *)(v27 + ((v26 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v26 & 0x1FF));
    if (!*((_DWORD *)this + 14))
      goto LABEL_70;
    v28 = 0;
    while (1)
    {
      v29 = *(const void *****)(*((_QWORD *)this + 6) + 8 * v28);
      if (dword_1ED830898 >= 3)
      {
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNameStr(*((_QWORD **)this + 59), __p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = __p;
        else
          v30 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
        else
          size = __p[0].__r_.__value_.__l.__size_;
        llvm::PMDataManager::dumpPassInfo((llvm::RGPassManager *)((char *)this + 32), (uint64_t)v29, 0, 5, v30, size);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (dword_1ED830898 >= 4)
        {
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
          __p[0].__r_.__value_.__l.__size_ = 0x800000000;
          v56 = v58;
          v57 = 0x200000000;
          v59 = v61;
          v60 = 0x200000000;
          v62 = &v64;
          v63 = 0;
          v64 = 0;
          ((void (*)(const void ****, std::string *))(*v29)[10])(v29, __p);
          llvm::PMDataManager::dumpAnalysisUsage((llvm::RGPassManager *)((char *)this + 32), "Required", 8uLL, (unint64_t)v29, (uint64_t)__p);
          sub_1C5408458((uint64_t)__p);
        }
      }
      llvm::PMDataManager::initializeAnalysisImpl((llvm::PMTopLevelManager **)this + 4, v29);
      PassTimer = (llvm::Timer *)llvm::getPassTimer((llvm *)v29, v32);
      v35 = PassTimer;
      if (PassTimer)
        v34.n128_f64[0] = llvm::Timer::startTimer(PassTimer);
      v37 = ((uint64_t (*)(const void ****, _QWORD, llvm::RGPassManager *, __n128))(*v29)[17])(v29, *((_QWORD *)this + 59), this, v34);
      if (v35)
        llvm::Timer::stopTimer(v35);
      v38 = dword_1ED830898;
      if (dword_1ED830898 >= 3)
      {
        if (v37)
        {
          llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNameStr(*((_QWORD **)this + 59), __p);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = __p;
          else
            v39 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
          else
            v40 = __p[0].__r_.__value_.__l.__size_;
          llvm::PMDataManager::dumpPassInfo((llvm::RGPassManager *)((char *)this + 32), (uint64_t)v29, 1, 5, v39, v40);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v38 = dword_1ED830898;
        }
        if (v38 >= 4)
        {
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
          __p[0].__r_.__value_.__l.__size_ = 0x800000000;
          v56 = v58;
          v57 = 0x200000000;
          v59 = v61;
          v60 = 0x200000000;
          v62 = &v64;
          v63 = 0;
          v64 = 0;
          ((void (*)(const void ****, std::string *))(*v29)[10])(v29, __p);
          llvm::PMDataManager::dumpAnalysisUsage((llvm::RGPassManager *)((char *)this + 32), "Preserved", 9uLL, (unint64_t)v29, (uint64_t)&v59);
          sub_1C5408458((uint64_t)__p);
        }
      }
      v41 = (llvm::Timer *)llvm::getPassTimer((llvm *)v29, v36);
      if (!v41)
        break;
      v42 = v41;
      llvm::Timer::startTimer(v41);
      llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::verifyRegion(*((uint64_t **)this + 59));
      llvm::Timer::stopTimer(v42);
      if (v37)
        goto LABEL_56;
LABEL_57:
      llvm::PMDataManager::recordAvailableAnalysis((llvm::RGPassManager *)((char *)this + 32), (llvm::Pass *)v29);
      if (dword_1ED830898 <= 2)
      {
        v43 = 9;
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 9;
        strcpy((char *)__p, "<deleted>");
        v44 = 0x646574656C65643CLL;
      }
      else
      {
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNameStr(*((_QWORD **)this + 59), __p);
        v43 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        v44 = __p[0].__r_.__value_.__r.__words[0];
      }
      v45 = v43;
      if (v43 >= 0)
        v46 = __p;
      else
        v46 = (std::string *)v44;
      v47 = v43 & 0x7F;
      if (v45 >= 0)
        v48 = v47;
      else
        v48 = __p[0].__r_.__value_.__l.__size_;
      llvm::PMDataManager::removeDeadPasses((uint64_t)this + 32, (uint64_t)v29, v46, v48, 5);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v18 |= v37;
      if (++v28 >= (unint64_t)*((unsigned int *)this + 14))
      {
        v25 = *((_QWORD *)this + 57) - 1;
        v27 = *((_QWORD *)this + 53);
        v26 = v25 + *((_QWORD *)this + 56);
LABEL_70:
        v49 = *((_QWORD *)this + 54);
        *((_QWORD *)this + 57) = v25;
        if (v49 == v27)
          v50 = 0;
        else
          v50 = ((v49 - v27) << 6) - 1;
        if (v50 - v26 >= 0x400)
        {
          operator delete(*(void **)(v49 - 8));
          *((_QWORD *)this + 54) -= 8;
        }
        v51 = *(_QWORD *)(*((_QWORD *)this + 58) + 32);
        if (v51)
          llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::clearNodeCache(v51);
        v11 = *((_QWORD *)this + 57);
        if (!v11)
        {
          if (*((_DWORD *)this + 14))
            goto LABEL_79;
          return v18 & 1;
        }
        goto LABEL_22;
      }
    }
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::verifyRegion(*((uint64_t **)this + 59));
    if (!v37)
      goto LABEL_57;
LABEL_56:
    llvm::PMDataManager::removeNotPreservedAnalysis((llvm::RGPassManager *)((char *)this + 32), (llvm::Pass *)v29);
    goto LABEL_57;
  }
  if ((_DWORD)v19)
  {
LABEL_79:
    v52 = 0;
    do
    {
      v53 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v52);
      v18 |= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 152))(v53);
      ++v52;
    }
    while (v52 < *((unsigned int *)this + 14));
  }
  return v18 & 1;
}

void sub_1C4EFCEF4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *i;
  char *v50;
  __int128 v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 8);
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v33 = *(char **)(a2 + 24);
      v34 = (uint64_t)&v33[-*(_QWORD *)a2];
      if (v6 < v34)
      {
        if (v33 != v4)
        {
          *(_QWORD *)&v60 = operator new(0x1000uLL);
          sub_1C61351F0(a2, &v60);
          goto LABEL_25;
        }
        *(_QWORD *)&v60 = operator new(0x1000uLL);
        sub_1C6135314((void **)a2, &v60);
        v35 = *(_QWORD **)(a2 + 8);
        v36 = *(char **)(a2 + 16);
        v39 = *v35;
        v37 = (char *)(v35 + 1);
        v38 = v39;
        *(_QWORD *)(a2 + 8) = v37;
        if (v36 == *(char **)(a2 + 24))
        {
          v40 = *(char **)a2;
          if ((unint64_t)v37 <= *(_QWORD *)a2)
          {
            if (v36 == v40)
              v52 = 1;
            else
              v52 = (v36 - v40) >> 2;
            if (v52 >> 61)
              goto LABEL_60;
            v53 = (char *)operator new(8 * v52);
            v54 = &v53[8 * (v52 >> 2)];
            v55 = v36 - v37;
            v25 = v36 == v37;
            v36 = v54;
            if (!v25)
            {
              v36 = &v54[v55 & 0xFFFFFFFFFFFFFFF8];
              v56 = 8 * (v55 >> 3);
              v57 = &v53[8 * (v52 >> 2)];
              do
              {
                v58 = *(_QWORD *)v37;
                v37 += 8;
                *(_QWORD *)v57 = v58;
                v57 += 8;
                v56 -= 8;
              }
              while (v56);
            }
            *(_QWORD *)a2 = v53;
            *(_QWORD *)(a2 + 8) = v54;
            *(_QWORD *)(a2 + 16) = v36;
            *(_QWORD *)(a2 + 24) = &v53[8 * v52];
            if (v40)
            {
              operator delete(v40);
              v36 = *(char **)(a2 + 16);
            }
          }
          else
          {
            v41 = (uint64_t)&v37[-*(_QWORD *)a2] >> 3;
            if (v41 >= -1)
              v42 = v41 + 1;
            else
              v42 = v41 + 2;
            v43 = -(v42 >> 1);
            v44 = v42 >> 1;
            v45 = &v37[-8 * v44];
            v46 = v36 - v37;
            if (v46)
            {
              memmove(&v37[-8 * v44], v37, v46);
              v37 = *(char **)(a2 + 8);
            }
            v36 = &v45[v46];
            *(_QWORD *)(a2 + 8) = &v37[8 * v43];
            *(_QWORD *)(a2 + 16) = v36;
          }
        }
        *(_QWORD *)v36 = v38;
        goto LABEL_24;
      }
      v47 = v34 >> 2;
      if (v33 == *(char **)a2)
        v48 = 1;
      else
        v48 = v47;
      v62 = a2 + 24;
      if (!(v48 >> 61))
      {
        *(_QWORD *)&v60 = operator new(8 * v48);
        *((_QWORD *)&v60 + 1) = v60 + v6;
        *(_QWORD *)&v61 = v60 + v6;
        *((_QWORD *)&v61 + 1) = v60 + 8 * v48;
        v59 = operator new(0x1000uLL);
        sub_1C61351F0((uint64_t)&v60, &v59);
        for (i = *(_QWORD **)(a2 + 16); i != *(_QWORD **)(a2 + 8); sub_1C6135314((void **)&v60, i))
          --i;
        v50 = *(char **)a2;
        v51 = v61;
        *(_OWORD *)a2 = v60;
        *(_OWORD *)(a2 + 16) = v51;
        if (v50)
          operator delete(v50);
        goto LABEL_25;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      *(_QWORD *)(a2 + 8) = v11;
      if (v4 != *(char **)(a2 + 24))
      {
LABEL_23:
        *(_QWORD *)v4 = v12;
LABEL_24:
        *(_QWORD *)(a2 + 16) += 8;
LABEL_25:
        v5 = *(char **)(a2 + 8);
        v8 = *(_QWORD *)(a2 + 40);
        v10 = *(_QWORD *)(a2 + 32) + v8;
        goto LABEL_26;
      }
      v14 = *(char **)a2;
      if ((unint64_t)v11 > *(_QWORD *)a2)
      {
        v15 = (uint64_t)&v11[-*(_QWORD *)a2] >> 3;
        if (v15 >= -1)
          v16 = v15 + 1;
        else
          v16 = v15 + 2;
        v17 = -(v16 >> 1);
        v18 = v16 >> 1;
        v19 = &v11[-8 * v18];
        v20 = v4 - v11;
        if (v4 != v11)
        {
          memmove(&v11[-8 * v18], v11, v4 - v11);
          v4 = *(char **)(a2 + 8);
        }
        v21 = &v4[8 * v17];
        v4 = &v19[v20];
        *(_QWORD *)(a2 + 8) = v21;
        *(_QWORD *)(a2 + 16) = &v19[v20];
        goto LABEL_23;
      }
      if (v4 == v14)
        v22 = 1;
      else
        v22 = (v4 - v14) >> 2;
      if (!(v22 >> 61))
      {
        v23 = (char *)operator new(8 * v22);
        v24 = &v23[8 * (v22 >> 2)];
        v26 = v4 - v11;
        v25 = v4 == v11;
        v4 = v24;
        if (!v25)
        {
          v4 = &v24[v26 & 0xFFFFFFFFFFFFFFF8];
          v27 = 8 * (v26 >> 3);
          v28 = &v23[8 * (v22 >> 2)];
          do
          {
            v29 = *(_QWORD *)v11;
            v11 += 8;
            *(_QWORD *)v28 = v29;
            v28 += 8;
            v27 -= 8;
          }
          while (v27);
        }
        *(_QWORD *)a2 = v23;
        *(_QWORD *)(a2 + 8) = v24;
        *(_QWORD *)(a2 + 16) = v4;
        *(_QWORD *)(a2 + 24) = &v23[8 * v22];
        if (v14)
        {
          operator delete(v14);
          v4 = *(char **)(a2 + 16);
        }
        goto LABEL_23;
      }
    }
LABEL_60:
    sub_1C4764EE4();
  }
LABEL_26:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = a1;
  *(_QWORD *)(a2 + 40) = v8 + 1;
  v31 = *(uint64_t **)(a1 + 40);
  v30 = *(uint64_t **)(a1 + 48);
  while (v31 != v30)
  {
    v32 = *v31++;
    sub_1C4EFCEF4(v32, a2);
  }
}

uint64_t llvm::RegionPass::createPrinterPass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;

  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = &unk_1EF8EFBF9;
  *(_DWORD *)(v5 + 24) = 0;
  *(_QWORD *)v5 = off_1E813AA98;
  v6 = (_BYTE *)(v5 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C47EBC30(v6, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a3;
    *(_QWORD *)(v5 + 48) = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)(v5 + 56) = a2;
  return v5;
}

uint64_t llvm::RegionPass::skipRegion(uint64_t a1, _QWORD *a2)
{
  uint64_t ***v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t **v8;
  uint64_t v11;
  void *__p[2];
  char v13;

  v3 = *(uint64_t ****)((*a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v4 = ***v3;
  v5 = *(_QWORD *)(v4 + 2672);
  if (!v5)
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
    {
      v11 = ***v3;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
      v4 = v11;
    }
    v5 = llvm::OptBisector;
    *(_QWORD *)(v4 + 2672) = llvm::OptBisector;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
    goto LABEL_5;
  v13 = 6;
  strcpy((char *)__p, "region");
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 16))(v5, a1, __p, 6);
  v7 = v6;
  if ((v13 & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_5;
    return 1;
  }
  operator delete(__p[0]);
  if (!v7)
    return 1;
LABEL_5:
  v8 = v3[14];
  if (v8)
    return (*((unsigned __int8 *)v8 + 17) >> 3) & 1;
  else
    return 0;
}

void sub_1C4EFD408(void **this)
{
  *this = off_1E813AA98;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4EFD444(void **this)
{
  *this = off_1E813AA98;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4EFD494()
{
  return "Print Region IR";
}

void sub_1C4EFD4A4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4EFD4B0(uint64_t a1, _QWORD *a2)
{
  uint64_t ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  size_t v15;
  size_t v16;
  char v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  const void *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  BOOL v33;
  llvm::BasicBlock *v34;
  llvm::raw_ostream *v35;
  void *v36;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE v41[64];
  char *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  _BYTE v50[64];
  void *__p;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  void *v59;
  _BYTE *v60;
  void *v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  void *v65;
  _BYTE *v66;

  v4 = *(uint64_t ****)((*a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
  {
    v5 = ***v4;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v9 = (uint64_t ****)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == v4)
      {
LABEL_9:
        v13 = v9[1];
        v16 = (size_t)*v13;
        v14 = (char *)(v13 + 2);
        v15 = v16;
        goto LABEL_10;
      }
      v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == v4)
        {
          v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_9;
        }
      }
    }
    v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_9;
  }
  v15 = 0;
  v14 = &byte_1C871356D;
LABEL_10:
  if (!llvm::isFunctionInPrintList(v14, v15))
    return 0;
  v17 = *(_BYTE *)(a1 + 55);
  if (v17 >= 0)
    v18 = (const char *)(a1 + 32);
  else
    v18 = *(const char **)(a1 + 32);
  if (v17 >= 0)
    v19 = v17 & 0x7F;
  else
    v19 = *(_QWORD *)(a1 + 40);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 56), v18, v19);
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(a2, &v54);
  v20 = v50;
  v45 = v50;
  v21 = v55;
  if (v55 == v54)
  {
    v46 = v50;
    v22 = v55;
  }
  else
  {
    v38 = v56;
    v20 = malloc_type_malloc(8 * v56, 0x4065EBACuLL);
    if (!v20)
    {
      if (v38)
        goto LABEL_79;
      v20 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v20)
        goto LABEL_79;
    }
    v46 = v20;
    v22 = v54;
    v21 = v55;
  }
  v23 = v57;
  v47 = v56;
  if (v21 == v22)
    v24 = v57;
  else
    v24 = v56;
  if (v24)
  {
    memmove(v20, v21, 8 * v24);
    v23 = v57;
  }
  v48 = v23;
  v49 = v58;
  v52 = 0;
  v53 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v59, v60, (v60 - (_BYTE *)v59) >> 5);
  v25 = v41;
  v26 = v62;
  if (v62 != v61)
  {
    v39 = v63;
    v25 = malloc_type_malloc(8 * v63, 0x4065EBACuLL);
    if (v25 || !v39 && (v25 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v40 = v25;
      v27 = v61;
      v26 = v62;
      goto LABEL_26;
    }
LABEL_79:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v40 = v41;
  v27 = v62;
LABEL_26:
  if (v26 == v27)
    v28 = v64;
  else
    v28 = v63;
  if (v28)
    memmove(v25, v26, 8 * v28);
  v43 = 0;
  v44 = 0;
  v42 = 0;
  sub_1C4E19D7C(&v42, v65, v66, (v66 - (_BYTE *)v65) >> 5);
  while (1)
  {
    if (v52 - (_BYTE *)__p != v43 - v42)
      goto LABEL_46;
    if (__p == v52)
      break;
    v29 = v42 + 16;
    v30 = (char *)__p + 16;
    while (1)
    {
      v31 = v30 - 16;
      if (*((_QWORD *)v30 - 2) != *((_QWORD *)v29 - 2))
        break;
      v32 = v29[8];
      if (v30[8])
        v33 = v32 == 0;
      else
        v33 = 1;
      if (v33)
      {
        if ((v30[8] == 0) == (v32 != 0))
          break;
      }
      else if (*(_DWORD *)v30 != *(_DWORD *)v29)
      {
        break;
      }
      v29 += 32;
      v30 += 32;
      if (v31 + 32 == v52)
        goto LABEL_52;
    }
LABEL_46:
    v34 = (llvm::BasicBlock *)*((_QWORD *)v52 - 4);
    v35 = *(llvm::raw_ostream **)(a1 + 56);
    if (v34)
    {
      llvm::BasicBlock::print(v34, v35, 0, 0, 0);
    }
    else
    {
      v36 = (void *)*((_QWORD *)v35 + 4);
      if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0x14uLL)
      {
        qmemcpy(v36, "Printing <null> Block", 21);
        *((_QWORD *)v35 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 56), "Printing <null> Block", 0x15uLL);
      }
    }
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v45);
  }
LABEL_52:
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v40 != v41)
    free(v40);
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
  if (v46 != v45)
    free(v46);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v62 != v61)
    free(v62);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v55 != v54)
    free(v55);
  return 0;
}

void sub_1C4EFD8A4(llvm::SmallPtrSetImplBase *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  llvm::Instruction *v12;
  unsigned int v13;
  uint64_t Successor;
  char v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;

  v2 = *((_QWORD *)a1 + 13);
  while (2)
  {
    v3 = *(_QWORD *)(v2 - 32);
    if (!*(_BYTE *)(v2 - 8))
    {
      v4 = *(_QWORD *)(v3 + 40);
      if (v4 == v3 + 40)
      {
LABEL_47:
        v5 = 0;
      }
      else
      {
        if (v4)
          v5 = v4 - 24;
        else
          v5 = 0;
        if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
          v5 = 0;
      }
      *(_QWORD *)(v2 - 24) = v5;
      *(_QWORD *)(v2 - 16) = 0;
      *(_BYTE *)(v2 - 8) = 1;
    }
    v6 = (_QWORD *)(v3 + 40);
    while (1)
    {
      v7 = (_QWORD *)*v6;
      if ((_QWORD *)*v6 == v6)
      {
LABEL_45:
        LODWORD(v3) = 0;
      }
      else
      {
        v8 = v7 - 3;
        if (!v7)
          v8 = 0;
        v9 = *((unsigned __int8 *)v8 + 16);
        v10 = v9 - 29;
        if (v9 == 30)
        {
          LODWORD(v3) = (*((_DWORD *)v8 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
        }
        else
        {
          v3 = 0;
          switch(v10)
          {
            case 0:
            case 5:
            case 6:
              break;
            case 1:
              __break(1u);
              goto LABEL_47;
            case 2:
              LODWORD(v3) = (*((_DWORD *)v8 + 5) >> 1) & 0x3FFFFFF;
              break;
            case 3:
            case 9:
              LODWORD(v3) = (*((_DWORD *)v8 + 5) & 0x7FFFFFF) - 1;
              break;
            case 4:
              LODWORD(v3) = 2;
              break;
            case 7:
              LODWORD(v3) = *((_WORD *)v8 + 9) & 1;
              break;
            case 8:
              LODWORD(v3) = 1;
              break;
            case 10:
              LODWORD(v3) = *((_DWORD *)v8 + 20) + 1;
              break;
            default:
              goto LABEL_45;
          }
        }
      }
      v11 = *(_DWORD *)(v2 - 16);
      if (v11 == (_DWORD)v3)
        break;
      v12 = *(llvm::Instruction **)(v2 - 24);
      v13 = *(_DWORD *)(v2 - 16);
      *(_DWORD *)(v2 - 16) = v11 + 1;
      Successor = llvm::Instruction::getSuccessor(v12, v13);
      sub_1C4774094(a1, Successor);
      if (v15)
      {
        v18 = (_BYTE *)*((_QWORD *)a1 + 13);
        v17 = *((_QWORD *)a1 + 14);
        if ((unint64_t)v18 >= v17)
        {
          v20 = (_BYTE *)*((_QWORD *)a1 + 12);
          v21 = (v18 - v20) >> 5;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 59)
            abort();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 4 > v22)
            v22 = v23 >> 4;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
            v24 = 0x7FFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 59)
              sub_1C4764EE4();
            v25 = (char *)operator new(32 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[32 * v21];
          *(_QWORD *)v26 = Successor;
          v26[8] = 0;
          v26[24] = 0;
          v19 = v26 + 32;
          if (v18 != v20)
          {
            do
            {
              v27 = *((_OWORD *)v18 - 1);
              *((_OWORD *)v26 - 2) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v26 - 1) = v27;
              v26 -= 32;
              v18 -= 32;
            }
            while (v18 != v20);
            v18 = (_BYTE *)*((_QWORD *)a1 + 12);
          }
          *((_QWORD *)a1 + 12) = v26;
          *((_QWORD *)a1 + 13) = v19;
          *((_QWORD *)a1 + 14) = &v25[32 * v24];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v18 = Successor;
          v18[8] = 0;
          v19 = v18 + 32;
          v18[24] = 0;
        }
        *((_QWORD *)a1 + 13) = v19;
        return;
      }
    }
    v16 = *((_QWORD *)a1 + 12);
    v2 = *((_QWORD *)a1 + 13) - 32;
    *((_QWORD *)a1 + 13) = v2;
    if (v16 != v2)
      continue;
    break;
  }
}

void llvm::initializeRegionPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82EA70);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EFDB54;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82EA70, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EFDB54(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print regions of function to 'dot' file";
  *(_QWORD *)(v2 + 8) = 39;
  *(_QWORD *)(v2 + 16) = "dot-regions";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFC00;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EFE244;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeRegionOnlyPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82EA78);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EFDC48;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82EA78, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EFDC48(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print regions of function to 'dot' file (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 65;
  *(_QWORD *)(v2 + 16) = "dot-regions-only";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFC01;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EFE26C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeRegionViewerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82EA80);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EFDD3C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82EA80, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EFDD3C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View regions of function";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "view-regions";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFC02;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EFE294;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeRegionOnlyViewerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82EA88);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EFDE30;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82EA88, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EFDE30(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View regions of function (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 50;
  *(_QWORD *)(v2 + 16) = "view-regions-only";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFC03;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EFE2BC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4EFDEC4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFC00;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 6776178;
  *(_QWORD *)a1 = off_1E813AB48;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82EA70);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EFDB54;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82EA70, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4EFDFA0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFC01;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 6776178;
  *(_QWORD *)a1 = off_1E813AC98;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82EA78);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EFDC48;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82EA78, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4EFE07C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFC02;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 6776178;
  *(_QWORD *)a1 = off_1E813ADE8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82EA80);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EFDD3C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82EA80, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4EFE158(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFC03;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "regonly");
  *(_QWORD *)a1 = off_1E813AF38;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82EA88);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EFDE30;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82EA88, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4EFE244()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EFDEC4(v0);
}

uint64_t sub_1C4EFE26C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EFDFA0(v0);
}

uint64_t sub_1C4EFE294()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EFE07C(v0);
}

uint64_t sub_1C4EFE2BC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EFE158(v0);
}

void sub_1C4EFE2E4(void **this)
{
  *this = off_1E813ABF0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4EFE320(void **this)
{
  *this = off_1E813ABF0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4EFE370(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1C4EFE388(uint64_t a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  std::string *p_p;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  unint64_t *v56;
  size_t v57;
  const void *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  int64_t v68;
  llvm::raw_ostream *v69;
  void *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  std::string __p;
  __int16 v74;
  void *v75;
  std::string::size_type v76;
  int64_t v77;
  std::string v78;
  std::string v79;
  int v80[4];
  __int128 __dst;
  int64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::RegionInfoPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::RegionInfoPass::ID);
  if (!(*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, v6))
    return 0;
  v85 = v6 + 32;
  v8 = *(_BYTE *)(a1 + 55);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 40);
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    v15 = *(char **)(a1 + 32);
    v14 = (char *)(a1 + 32);
    v13 = v15;
    if (v14[23] >= 0)
      v16 = v14;
    else
      v16 = v13;
    memmove(p_p, v16, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 46;
  v17 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v82) = 0;
    p_dst = &__dst;
    goto LABEL_31;
  }
  v18 = ***a2;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & (v17 ^ (a2 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_23;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == a2)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_23;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_23:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_103;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v82 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v82) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_30:
    memmove(p_dst, v28, v27);
LABEL_31:
  *((_BYTE *)p_dst + v27) = 0;
  if (v82 >= 0)
    v33 = (const std::string::value_type *)&__dst;
  else
    v33 = (const std::string::value_type *)__dst;
  if (v82 >= 0)
    v34 = HIBYTE(v82) & 0x7F;
  else
    v34 = *((_QWORD *)&__dst + 1);
  v35 = std::string::append(&__p, v33, v34);
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v79, ".dot");
  v38 = v37->__r_.__value_.__r.__words[2];
  v83 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v84 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80[0] = 0;
  v39 = (llvm *)std::system_category();
  v40 = (llvm::raw_ostream *)llvm::errs(v39);
  v41 = *((_QWORD *)v40 + 4);
  if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 39;
    *(_QWORD *)v41 = *(_QWORD *)"Writing '";
    *((_QWORD *)v40 + 4) += 9;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v40, "Writing '", 9uLL);
  }
  if (v84 >= 0)
    v42 = (const char *)&v83;
  else
    v42 = (const char *)v83;
  if (v84 >= 0)
    v43 = HIBYTE(v84) & 0x7F;
  else
    v43 = *((_QWORD *)&v83 + 1);
  v44 = llvm::raw_ostream::write(v40, v42, v43);
  v45 = (_DWORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 3uLL)
  {
    *v45 = 774778407;
    *((_QWORD *)v44 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v44, "'...", 4uLL);
  }
  if (v84 >= 0)
    v46 = &v83;
  else
    v46 = (__int128 *)v83;
  if (v84 >= 0)
    v47 = HIBYTE(v84) & 0x7F;
  else
    v47 = *((_QWORD *)&v83 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v79, v46, v47, (uint64_t)v80, 3);
  strcpy((char *)&v78, "Region Graph for '");
  v78.__r_.__value_.__s.__data_[19] = 0;
  HIDWORD(v78.__r_.__value_.__r.__words[2]) = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v57 = 0;
    HIBYTE(v77) = 0;
    v60 = &v75;
    goto LABEL_75;
  }
  v48 = ***a2;
  v49 = *(_QWORD *)(v48 + 152);
  v50 = *(unsigned int *)(v48 + 168);
  if ((_DWORD)v50)
  {
    LODWORD(v51) = (v50 - 1) & (v17 ^ (a2 >> 9));
    v52 = (uint64_t ****)(v49 + 16 * v51);
    v53 = *v52;
    if (*v52 == a2)
      goto LABEL_67;
    v54 = 1;
    while (v53 != (uint64_t ***)-4096)
    {
      v55 = v51 + v54++;
      v51 = v55 & (v50 - 1);
      v53 = *(uint64_t ****)(v49 + 16 * v51);
      if (v53 == a2)
      {
        v52 = (uint64_t ****)(v49 + 16 * v51);
        goto LABEL_67;
      }
    }
  }
  v52 = (uint64_t ****)(v49 + 16 * v50);
LABEL_67:
  v56 = (unint64_t *)v52[1];
  v59 = *v56;
  v58 = v56 + 2;
  v57 = v59;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
LABEL_103:
    abort();
  if (v57 >= 0x17)
  {
    v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v61 = v57 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v76 = v57;
    v77 = v62 | 0x8000000000000000;
    v75 = v60;
  }
  else
  {
    HIBYTE(v77) = v57;
    v60 = &v75;
    if (!v57)
      goto LABEL_75;
  }
  memmove(v60, v58, v57);
LABEL_75:
  *((_BYTE *)v60 + v57) = 0;
  if (v77 >= 0)
    v63 = (const std::string::value_type *)&v75;
  else
    v63 = (const std::string::value_type *)v75;
  if (v77 >= 0)
    v64 = HIBYTE(v77) & 0x7F;
  else
    v64 = v76;
  v65 = std::string::append(&v78, v63, v64);
  v66 = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&__p, "' function");
  v68 = v67->__r_.__value_.__r.__words[2];
  __dst = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v82 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0)
    operator delete(v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v80[0])
  {
    v69 = (llvm::raw_ostream *)llvm::errs((llvm *)v67);
    v70 = (void *)*((_QWORD *)v69 + 4);
    if (*((_QWORD *)v69 + 3) - (_QWORD)v70 > 0x20uLL)
    {
      qmemcpy(v70, "  error opening file for writing!", 33);
      *((_QWORD *)v69 + 4) += 33;
    }
    else
    {
      v69 = llvm::raw_ostream::write(v69, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v74 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v69 = (llvm::raw_ostream *)sub_1C4EFEA34((uint64_t)&v79, (uint64_t)&v85, 0, (llvm::Twine *)&__p);
  }
  v71 = (llvm::raw_ostream *)llvm::errs(v69);
  v72 = (_BYTE *)*((_QWORD *)v71 + 4);
  if (*((_BYTE **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, "\n", 1uLL);
  }
  else
  {
    *v72 = 10;
    ++*((_QWORD *)v71 + 4);
  }
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v79);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)v83);
  return 0;
}

uint64_t sub_1C4EFE9A0()
{
  return 1;
}

void sub_1C4EFE9A8(void **this)
{
  *this = off_1E813ABF0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4EFE9E4(void **this)
{
  *this = off_1E813ABF0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4EFEA34(uint64_t a1, uint64_t a2, char a3, llvm::Twine *a4)
{
  void *__p[2];
  char v7;
  _QWORD v8[2];
  char v9;
  char v10;

  v8[0] = a1;
  v8[1] = a2;
  v10 = a3;
  v9 = 0;
  llvm::Twine::str(a4, __p);
  sub_1C61B035C((uint64_t)v8, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1C4EFEA90(llvm::raw_ostream **a1, uint64_t a2)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::string *p_p;
  size_t size;
  _DWORD *v14;
  char v15;
  int v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _QWORD *v19;
  std::string *v20;
  size_t v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  void *v24;
  llvm::raw_ostream *v25;
  _QWORD *v26;
  std::string *v27;
  size_t v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  std::string __p;
  void *v34[2];
  char v35;

  v35 = 12;
  strcpy((char *)v34, "Region Graph");
  v4 = *(_BYTE *)(a2 + 23);
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v6 = v7;
  v8 = *a1;
  v9 = *((_QWORD *)*a1 + 4);
  v10 = *((_QWORD *)*a1 + 3) - v9;
  if (v6)
  {
    if (v10 > 8)
    {
      *(_BYTE *)(v9 + 8) = 34;
      *(_QWORD *)v9 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v8 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
    }
    v11 = (char *)a2;
  }
  else
  {
    if (v10 > 8)
    {
      *(_BYTE *)(v9 + 8) = 34;
      *(_QWORD *)v9 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v8 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
    }
    v11 = (char *)v34;
  }
  llvm::DOT::EscapeString(v11, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v8, (const char *)p_p, size);
  v14 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v14 > 3uLL)
  {
    *v14 = 175841314;
    *((_QWORD *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\" {\n", 4uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = *(_BYTE *)(a2 + 23);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 < 0)
    v17 = *(_QWORD *)(a2 + 8);
  if (v17)
  {
    v18 = *a1;
    v19 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v19 > 7uLL)
    {
      *v19 = 0x223D6C6562616C09;
      *((_QWORD *)v18 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__p;
    else
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v21 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v18, (const char *)v20, v21);
    v22 = *((_QWORD *)v18 + 4);
    if ((unint64_t)(*((_QWORD *)v18 + 3) - v22) <= 2)
    {
      v23 = v18;
LABEL_46:
      llvm::raw_ostream::write(v23, "\";\n", 3uLL);
      goto LABEL_47;
    }
    *(_BYTE *)(v22 + 2) = 10;
    *(_WORD *)v22 = 15138;
    *((_QWORD *)v18 + 4) += 3;
    goto LABEL_47;
  }
  v24 = (void *)(v35 & 0x7F);
  if (v35 < 0)
    v24 = v34[1];
  if (v24)
  {
    v25 = *a1;
    v26 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v26 > 7uLL)
    {
      *v26 = 0x223D6C6562616C09;
      *((_QWORD *)v25 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)v34, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__p;
    else
      v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v28 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v25, (const char *)v27, v28);
    v29 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v29) <= 2)
    {
      v23 = v25;
      goto LABEL_46;
    }
    *(_BYTE *)(v29 + 2) = 10;
    *(_WORD *)v29 = 15138;
    *((_QWORD *)v25 + 4) += 3;
LABEL_47:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v30 = *a1;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(v30, (const char *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v31 = *a1;
  v32 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v32)
  {
    llvm::raw_ostream::write(v31, "\n", 1uLL);
  }
  else
  {
    *v32 = 10;
    ++*((_QWORD *)v31 + 4);
  }
  if (v35 < 0)
    operator delete(v34[0]);
}

void sub_1C4EFEE64(uint64_t *a1)
{
  _BYTE *v2;
  const void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  char *v11;
  const char *v12;
  void *i;
  char *v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  uint64_t *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  _QWORD *v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  size_t v27;
  size_t v28;
  const char *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  _WORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  const char *v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  llvm::raw_ostream *v47;
  void *v48;
  void *v49;
  _WORD *v50;
  llvm::raw_ostream *v51;
  std::string *v52;
  size_t v53;
  void *v54;
  std::string *v55;
  size_t size;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  int v64;
  BOOL v65;
  char v66;
  BOOL v67;
  llvm::raw_ostream *v68;
  _WORD *v69;
  unint64_t v70;
  const char *v71;
  size_t v72;
  llvm::raw_ostream *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  unsigned int v80;
  int v81;
  unint64_t Successor;
  char v83;
  BOOL v84;
  unint64_t v85;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  std::string::size_type v90;
  _BYTE *v91;
  _BYTE v92[64];
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  _BYTE v101[64];
  void *__p;
  char *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  void *v110;
  _BYTE *v111;
  void *v112;
  void *v113;
  unsigned int v114;
  unsigned int v115;
  void *v116;
  _BYTE *v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  std::string v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  int v127;
  void **v128;
  void *v129[2];
  uint64_t v130;
  void *v131[2];
  char v132;
  __int128 v133;
  uint64_t v134;

  sub_1C61B03B4(&v105, a1[1]);
  v2 = v101;
  v96 = v101;
  v3 = v106;
  if (v106 == v105)
  {
    v97 = v101;
    v4 = v106;
  }
  else
  {
    LODWORD(v11) = v107;
    v2 = malloc_type_malloc(8 * v107, 0x4065EBACuLL);
    if (!v2)
    {
LABEL_236:
      if ((_DWORD)v11)
        goto LABEL_241;
      v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_241;
    }
    v97 = v2;
    v4 = v105;
    v3 = v106;
  }
  v5 = v108;
  v98 = v107;
  if (v3 == v4)
    v6 = v108;
  else
    v6 = v107;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v108;
  }
  v99 = v5;
  v100 = v109;
  v103 = 0;
  v104 = 0;
  __p = 0;
  sub_1C4EFB920(&__p, v110, v111, 0xCCCCCCCCCCCCCCCDLL * ((v111 - (_BYTE *)v110) >> 3));
  v7 = v92;
  v8 = v113;
  if (v113 != v112)
  {
    v89 = v114;
    v7 = malloc_type_malloc(8 * v114, 0x4065EBACuLL);
    if (v7 || !v89 && (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v91 = v7;
      v9 = v112;
      v8 = v113;
      goto LABEL_10;
    }
LABEL_241:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v91 = v92;
  v9 = v113;
LABEL_10:
  if (v8 == v9)
    v10 = v115;
  else
    v10 = v114;
  if (v10)
    memmove(v7, v8, 8 * v10);
  v94 = 0;
  v95 = 0;
  v93 = 0;
  sub_1C4EFB920(&v93, v116, v117, 0xCCCCCCCCCCCCCCCDLL * ((v117 - (_BYTE *)v116) >> 3));
  v11 = (char *)a1 + 17;
  v12 = " [shape=";
  for (i = &unk_1E81A7208; ; i = (void *)v90)
  {
    v14 = (char *)__p;
    if (v103 - (_BYTE *)__p != v94 - v93)
      goto LABEL_34;
    if (__p == v103)
      break;
    v15 = v93;
    while (*(_QWORD *)v14 == *(_QWORD *)v15)
    {
      v16 = *((unsigned __int8 *)v15 + 32);
      if (v14[32])
        v17 = v16 == 0;
      else
        v17 = 1;
      if (v17)
      {
        if ((v14[32] == 0) == (v16 != 0))
          break;
      }
      else if (*((_DWORD *)v14 + 6) != v15[6] || *((_QWORD *)v14 + 1) != *((_QWORD *)v15 + 1))
      {
        break;
      }
      v14 += 40;
      v15 += 10;
      if (v14 == v103)
        goto LABEL_214;
    }
LABEL_34:
    v90 = (std::string::size_type)i;
    v19 = (uint64_t *)*((_QWORD *)v103 - 5);
    v132 = 0;
    LOBYTE(v131[0]) = 0;
    v20 = (llvm::raw_ostream *)*a1;
    v21 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v21) > 4)
    {
      *(_BYTE *)(v21 + 4) = 101;
      *(_DWORD *)v21 = 1685016073;
      *((_QWORD *)v20 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "\tNode", 5uLL);
    }
    llvm::write_hex(v20, (unint64_t)v19, 3, 0, 0);
    v22 = (_QWORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v22 > 7uLL)
    {
      *v22 = 0x3D65706168735B20;
      *((_QWORD *)v20 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v20, v12, 8uLL);
    }
    v23 = (llvm::raw_ostream *)*a1;
    v24 = *(_QWORD *)(*a1 + 32);
    v25 = *(_QWORD *)(*a1 + 24) - v24;
    if (*((_BYTE *)a1 + 16))
    {
      if (v25 <= 4)
      {
        v26 = "none,";
        v27 = 5;
        goto LABEL_43;
      }
      *(_BYTE *)(v24 + 4) = 44;
      *(_DWORD *)v24 = 1701736302;
      v87 = *((_QWORD *)v23 + 4) + 5;
    }
    else
    {
      if (v25 <= 6)
      {
        v26 = "record,";
        v27 = 7;
LABEL_43:
        llvm::raw_ostream::write(v23, v26, v27);
        goto LABEL_44;
      }
      *(_DWORD *)(v24 + 3) = 744780399;
      *(_DWORD *)v24 = 1868785010;
      v87 = *((_QWORD *)v23 + 4) + 7;
    }
    *((_QWORD *)v23 + 4) = v87;
LABEL_44:
    if (v132 >= 0)
      v28 = v132 & 0x7F;
    else
      v28 = (size_t)v131[1];
    if (v28)
    {
      if (v132 >= 0)
        v29 = (const char *)v131;
      else
        v29 = (const char *)v131[0];
      v30 = llvm::raw_ostream::write((llvm::raw_ostream *)*a1, v29, v28);
      v31 = (_BYTE *)*((_QWORD *)v30 + 4);
      if (*((_BYTE **)v30 + 3) == v31)
      {
        llvm::raw_ostream::write(v30, ",", 1uLL);
      }
      else
      {
        *v31 = 44;
        ++*((_QWORD *)v30 + 4);
      }
    }
    v32 = (llvm::raw_ostream *)*a1;
    v33 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v33) > 5)
    {
      *(_WORD *)(v33 + 4) = 15724;
      *(_DWORD *)v33 = 1700946284;
      *((_QWORD *)v32 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v32, "label=", 6uLL);
    }
    if (*((_BYTE *)a1 + 16))
    {
      sub_1C61B0534((uint64_t)&v122, v19);
      v36 = *v19 & 0xFFFFFFFFFFFFFFF8;
      v37 = *(_QWORD *)(v36 + 40);
      if (v37 == v36 + 40)
      {
LABEL_66:
        v39 = v11;
        v40 = 0;
      }
      else
      {
        if (v37)
          v38 = v37 - 24;
        else
          v38 = 0;
        if (*(_BYTE *)(v38 + 16) != 30)
        {
          v40 = 0;
          v39 = v11;
          switch(*(_BYTE *)(v38 + 16))
          {
            case 0x1D:
            case 0x22:
            case 0x23:
              goto LABEL_67;
            case 0x1E:
LABEL_235:
              __break(1u);
              goto LABEL_236;
            case 0x1F:
              v40 = (*(_DWORD *)(v38 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_67;
            case 0x20:
            case 0x26:
              v40 = (*(_DWORD *)(v38 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_67;
            case 0x21:
              v40 = 2;
              goto LABEL_67;
            case 0x24:
              v40 = *(_WORD *)(v38 + 18) & 1;
              goto LABEL_67;
            case 0x25:
              v40 = 1;
              goto LABEL_67;
            case 0x27:
              v40 = *(_DWORD *)(v38 + 80) + 1;
              goto LABEL_67;
            default:
              goto LABEL_66;
          }
        }
        v39 = v11;
        if ((*(_DWORD *)(v38 + 20) & 0x7FFFFFF) == 3)
          v40 = 2;
        else
          v40 = 1;
      }
LABEL_67:
      v41 = v12;
      if (LODWORD(v122.__r_.__value_.__r.__words[2]) == v40 && (uint64_t *)v122.__r_.__value_.__l.__data_ == v19)
      {
        v42 = 0;
        v43 = 0;
      }
      else
      {
        v44 = 0;
        do
        {
          sub_1C61B049C((uint64_t)&v122);
          v42 = v44 + 1;
          v45 = LODWORD(v122.__r_.__value_.__r.__words[2]) == v40 && v122.__r_.__value_.__r.__words[0] == (_QWORD)v19;
          v43 = !v45;
          if (v45)
            break;
          v17 = v44++ == 63;
        }
        while (!v17);
      }
      if (v42 <= 1)
        v46 = 1;
      else
        v46 = v42;
      v47 = (llvm::raw_ostream *)*a1;
      v48 = *(void **)(*a1 + 32);
      if (*(_QWORD *)(*a1 + 24) - (_QWORD)v48 > 0x30uLL)
      {
        qmemcpy(v48, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
        v49 = (void *)(*((_QWORD *)v47 + 4) + 49);
        *((_QWORD *)v47 + 4) = v49;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
        v49 = (void *)*((_QWORD *)v47 + 4);
      }
      if (*((_QWORD *)v47 + 3) - (_QWORD)v49 > 0x2EuLL)
      {
        qmemcpy(v49, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
        *((_QWORD *)v47 + 4) += 47;
      }
      else
      {
        llvm::raw_ostream::write(v47, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
      }
      sub_1C5E21910(v47, (v46 + v43), 0, 0, 0);
      v50 = (_WORD *)*((_QWORD *)v47 + 4);
      if (*((_QWORD *)v47 + 3) - (_QWORD)v50 > 1uLL)
      {
        *v50 = 15906;
        *((_QWORD *)v47 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v47, "\">", 2uLL);
      }
      v12 = v41;
      v11 = v39;
    }
    else
    {
      v34 = (llvm::raw_ostream *)*a1;
      v35 = *(_WORD **)(*a1 + 32);
      if (*(_QWORD *)(*a1 + 24) - (_QWORD)v35 > 1uLL)
      {
        *v35 = 31522;
        *((_QWORD *)v34 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v34, "\"{", 2uLL);
      }
    }
    v51 = (llvm::raw_ostream *)*a1;
    if (*((_BYTE *)a1 + 16))
    {
      sub_1C61B0618((uint64_t)&v122, v11, *v19);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v122;
      else
        v55 = (std::string *)v122.__r_.__value_.__r.__words[0];
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v122.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v122.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v51, (const char *)v55, size);
      v57 = *((_QWORD *)v51 + 4);
      if ((unint64_t)(*((_QWORD *)v51 + 3) - v57) > 4)
      {
        *(_BYTE *)(v57 + 4) = 62;
        *(_DWORD *)v57 = 1685335868;
        *((_QWORD *)v51 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v51, "</td>", 5uLL);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      {
        v54 = (void *)v122.__r_.__value_.__r.__words[0];
        goto LABEL_111;
      }
    }
    else
    {
      sub_1C61B0618((uint64_t)&v133, v11, *v19);
      llvm::DOT::EscapeString((char *)&v133, &v122);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v122;
      else
        v52 = (std::string *)v122.__r_.__value_.__r.__words[0];
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = *((_BYTE *)&v122.__r_.__value_.__s + 23) & 0x7F;
      else
        v53 = v122.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v51, (const char *)v52, v53);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      if (SHIBYTE(v134) < 0)
      {
        v54 = (void *)v133;
LABEL_111:
        operator delete(v54);
      }
    }
    v129[0] = 0;
    v129[1] = 0;
    v130 = 0;
    LODWORD(v122.__r_.__value_.__r.__words[1]) = 0;
    v125 = 0;
    v126 = 0;
    v122.__r_.__value_.__r.__words[0] = v90;
    v128 = v129;
    v127 = 0;
    v123 = 0;
    v124 = 0;
    v122.__r_.__value_.__r.__words[2] = 0;
    sub_1C61B0534((uint64_t)&v133, v19);
    v58 = 0;
    v59 = *v19 & 0xFFFFFFFFFFFFFFF8;
    v60 = *(_QWORD *)(v59 + 40);
    if (v60 != v59 + 40)
    {
      if (v60)
        v61 = v60 - 24;
      else
        v61 = 0;
      if (*(_BYTE *)(v61 + 16) != 30)
      {
        v58 = 0;
        switch(*(_BYTE *)(v61 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_121;
          case 0x1E:
            goto LABEL_235;
          case 0x1F:
            v58 = (*(_DWORD *)(v61 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_121;
          case 0x20:
          case 0x26:
            v58 = (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_121;
          case 0x21:
            v58 = 2;
            goto LABEL_121;
          case 0x24:
            v58 = *(_WORD *)(v61 + 18) & 1;
            goto LABEL_121;
          case 0x25:
            v58 = 1;
            goto LABEL_121;
          case 0x27:
            v58 = *(_DWORD *)(v61 + 80) + 1;
            goto LABEL_121;
          default:
            v58 = 0;
            goto LABEL_121;
        }
      }
      if ((*(_DWORD *)(v61 + 20) & 0x7FFFFFF) == 3)
        v58 = 2;
      else
        v58 = 1;
    }
LABEL_121:
    if (*((_BYTE *)a1 + 16))
    {
      v62 = (_QWORD *)v124;
      if ((unint64_t)(v123 - v124) > 8)
      {
        *(_BYTE *)(v124 + 8) = 62;
        *v62 = *(_QWORD *)"</tr><tr>";
        v124 += 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v122, "</tr><tr>", 9uLL);
      }
    }
    v63 = v11;
    v11 = (char *)v12;
    if ((_DWORD)v134 != v58 || (uint64_t *)v133 != v19)
    {
      v64 = 63;
      do
      {
        sub_1C61B049C((uint64_t)&v133);
        v65 = v64-- != 0;
        v66 = v65;
        v67 = (uint64_t *)v133 == v19 && (_DWORD)v134 == v58;
      }
      while (!v67 && (v66 & 1) != 0);
    }
    v68 = (llvm::raw_ostream *)*a1;
    v69 = *(_WORD **)(*a1 + 32);
    v70 = *(_QWORD *)(*a1 + 24) - (_QWORD)v69;
    if (*((_BYTE *)a1 + 16))
    {
      if (v70 <= 0xD)
      {
        v71 = "</tr></table>>";
        v72 = 14;
        goto LABEL_140;
      }
      qmemcpy(v69, "</tr></table>>", 14);
      v88 = *((_QWORD *)v68 + 4) + 14;
    }
    else
    {
      if (v70 <= 1)
      {
        v71 = "}\"";
        v72 = 2;
LABEL_140:
        llvm::raw_ostream::write(v68, v71, v72);
        goto LABEL_141;
      }
      *v69 = 8829;
      v88 = *((_QWORD *)v68 + 4) + 2;
    }
    *((_QWORD *)v68 + 4) = v88;
LABEL_141:
    v73 = (llvm::raw_ostream *)*a1;
    v74 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v74) > 2)
    {
      *(_BYTE *)(v74 + 2) = 10;
      *(_WORD *)v74 = 15197;
      *((_QWORD *)v73 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v73, "];\n", 3uLL);
    }
    sub_1C61B0534((uint64_t)&v133, v19);
    v75 = *v19 & 0xFFFFFFFFFFFFFFF8;
    v76 = *(_QWORD *)(v75 + 40);
    if (v76 == v75 + 40)
    {
LABEL_151:
      v78 = 0;
    }
    else
    {
      if (v76)
        v77 = v76 - 24;
      else
        v77 = 0;
      if (*(_BYTE *)(v77 + 16) != 30)
      {
        v78 = 0;
        switch(*(_BYTE *)(v77 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_152;
          case 0x1E:
            goto LABEL_235;
          case 0x1F:
            v78 = (*(_DWORD *)(v77 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_152;
          case 0x20:
          case 0x26:
            v78 = (*(_DWORD *)(v77 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_152;
          case 0x21:
            v78 = 2;
            goto LABEL_152;
          case 0x24:
            v78 = *(_WORD *)(v77 + 18) & 1;
            goto LABEL_152;
          case 0x25:
            v78 = 1;
            goto LABEL_152;
          case 0x27:
            v78 = *(_DWORD *)(v77 + 80) + 1;
            goto LABEL_152;
          default:
            goto LABEL_151;
        }
      }
      if ((*(_DWORD *)(v77 + 20) & 0x7FFFFFF) == 3)
        v78 = 2;
      else
        v78 = 1;
    }
LABEL_152:
    if ((_DWORD)v134 != v78 || (v79 = v19, v80 = v78, (uint64_t *)v133 != v19))
    {
      v81 = 63;
      v80 = v134;
      do
      {
        Successor = llvm::Instruction::getSuccessor(*((llvm::Instruction **)&v133 + 1), v80);
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode(*(_QWORD *)(v133 + 8), Successor);
        v120 = v133;
        v121 = v134;
        sub_1C4EFFB40((uint64_t)a1, v19, &v120);
        sub_1C61B049C((uint64_t)&v133);
        v80 = v134;
        v79 = (uint64_t *)v133;
        v65 = v81-- != 0;
        v83 = v65;
        v84 = (uint64_t *)v133 == v19 && (_DWORD)v134 == v78;
      }
      while (!v84 && (v83 & 1) != 0);
    }
    while (v80 != v78 || v79 != v19)
    {
      v85 = llvm::Instruction::getSuccessor(*((llvm::Instruction **)&v133 + 1), v80);
      llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode(*(_QWORD *)(v133 + 8), v85);
      v118 = v133;
      v119 = v134;
      sub_1C4EFFB40((uint64_t)a1, v19, &v118);
      sub_1C61B049C((uint64_t)&v133);
      v80 = v134;
      v79 = (uint64_t *)v133;
    }
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
    v12 = v11;
    if (v127 == 1 && v122.__r_.__value_.__r.__words[2])
      MEMORY[0x1CAA32F9C](v122.__r_.__value_.__r.__words[2], 0x1000C8077774924);
    v11 = v63;
    if (SHIBYTE(v130) < 0)
      operator delete(v129[0]);
    if (v132 < 0)
      operator delete(v131[0]);
    sub_1C61B079C((void **)&v96);
  }
LABEL_214:
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v91 != v92)
    free(v91);
  if (__p)
  {
    v103 = (char *)__p;
    operator delete(__p);
  }
  if (v97 != v96)
    free(v97);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v113 != v112)
    free(v113);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v106 != v105)
    free(v106);
}

void sub_1C4EFFB40(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  unint64_t Successor;
  uint64_t *BBNode;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  Successor = llvm::Instruction::getSuccessor(*((llvm::Instruction **)a3 + 1), *((_DWORD *)a3 + 4));
  BBNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode(*(_QWORD *)(*(_QWORD *)a3 + 8), Successor);
  if (BBNode)
  {
    v8 = (unint64_t)BBNode;
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 2);
    sub_1C61B06AC((uint64_t)__p, a2, (uint64_t)&v9, **(_QWORD **)(a1 + 8));
    sub_1C617C7A0((llvm::raw_ostream **)a1, (unint64_t)a2, v8, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
}

llvm::raw_ostream *sub_1C4EFFBE8(_QWORD *a1, llvm::raw_ostream **a2, int a3)
{
  llvm::raw_ostream *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  const void *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE *v27;
  const void *v28;
  void *v29;
  unsigned int v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t *BBNode;
  _WORD *v39;
  llvm::raw_ostream *result;
  _WORD *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE v48[64];
  char *v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  _BYTE v57[64];
  void *__p;
  char *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  void *v66;
  _BYTE *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  unsigned int v71;
  void *v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;

  v6 = *a2;
  v7 = 2 * a3;
  llvm::raw_ostream::indent(*a2, 2 * a3);
  v8 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v8) > 0x10)
  {
    *(_BYTE *)(v8 + 16) = 95;
    *(_OWORD *)v8 = *(_OWORD *)"subgraph cluster_";
    *((_QWORD *)v6 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v6, "subgraph cluster_", 0x11uLL);
  }
  llvm::write_hex(v6, (unint64_t)a1, 3, 0, 0);
  v9 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 10;
    *(_WORD *)v9 = 31520;
    *((_QWORD *)v6 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v6, " {\n", 3uLL);
  }
  v10 = (a3 + 1);
  llvm::raw_ostream::indent(v6, 2 * v10);
  v11 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v11) > 0xB)
  {
    *(_DWORD *)(v11 + 8) = 171647522;
    *(_QWORD *)v11 = *(_QWORD *)"label = \"\";\n";
    *((_QWORD *)v6 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v6, "label = \"\";\n", 0xCuLL);
  }
  if (!byte_1ED7F3338 || llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::isSimple(a1))
  {
    llvm::raw_ostream::indent(v6, 2 * v10);
    v12 = (_OWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v12 > 0xFuLL)
    {
      *v12 = *(_OWORD *)"style = filled;\n";
      *((_QWORD *)v6 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v6, "style = filled;\n", 0x10uLL);
    }
    llvm::raw_ostream::indent(v6, 2 * v10);
    v13 = (_QWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v13 > 7uLL)
    {
      *v13 = 0x203D20726F6C6F63;
      *((_QWORD *)v6 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v6, "color = ", 8uLL);
    }
    v14 = -1;
    v15 = -2;
    v16 = a1;
    do
    {
      v16 = (_QWORD *)v16[1];
      v14 += 2;
      v15 += 2;
    }
    while (v16);
  }
  else
  {
    llvm::raw_ostream::indent(v6, 2 * v10);
    v42 = (void *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v42 > 0xEuLL)
    {
      qmemcpy(v42, "style = solid;\n", 15);
      *((_QWORD *)v6 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v6, "style = solid;\n", 0xFuLL);
    }
    llvm::raw_ostream::indent(v6, 2 * v10);
    v43 = (_QWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v43 > 7uLL)
    {
      *v43 = 0x203D20726F6C6F63;
      *((_QWORD *)v6 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v6, "color = ", 8uLL);
    }
    v14 = 0;
    v15 = -2;
    v44 = a1;
    do
    {
      v44 = (_QWORD *)v44[1];
      v14 += 2;
      v15 += 2;
    }
    while (v44);
  }
  sub_1C5E21910(v6, v14 - 12 * (v15 / 0xC), 0, 0, 0);
  v17 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v17)
  {
    llvm::raw_ostream::write(v6, "\n", 1uLL);
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)v6 + 4);
  }
  v18 = (uint64_t *)a1[5];
  v19 = (uint64_t *)a1[6];
  while (v18 != v19)
  {
    v20 = *v18++;
    sub_1C4EFFBE8(v20, a2, v10);
  }
  v21 = a1[2];
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(a1, &v61);
  v22 = v57;
  v52 = v57;
  v23 = v62;
  if (v62 == v61)
  {
    v53 = v57;
    v24 = v62;
  }
  else
  {
    v45 = v63;
    v22 = malloc_type_malloc(8 * v63, 0x4065EBACuLL);
    if (!v22)
    {
      if (v45)
        goto LABEL_101;
      v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v22)
        goto LABEL_101;
    }
    v53 = v22;
    v24 = v61;
    v23 = v62;
  }
  v25 = v64;
  v54 = v63;
  if (v23 == v24)
    v26 = v64;
  else
    v26 = v63;
  if (v26)
  {
    memmove(v22, v23, 8 * v26);
    v25 = v64;
  }
  v55 = v25;
  v56 = v65;
  v59 = 0;
  v60 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v66, v67, (v67 - (_BYTE *)v66) >> 5);
  v27 = v48;
  v28 = v69;
  if (v69 != v68)
  {
    v46 = v70;
    v27 = malloc_type_malloc(8 * v70, 0x4065EBACuLL);
    if (v27 || !v46 && (v27 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v47 = v27;
      v29 = v68;
      v28 = v69;
      goto LABEL_28;
    }
LABEL_101:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v47 = v48;
  v29 = v69;
LABEL_28:
  if (v28 == v29)
    v30 = v71;
  else
    v30 = v70;
  if (v30)
    memmove(v27, v28, 8 * v30);
  v50 = 0;
  v51 = 0;
  v49 = 0;
  sub_1C4E19D7C(&v49, v72, v73, (v73 - (_BYTE *)v72) >> 5);
  while (1)
  {
    if (v59 - (_BYTE *)__p != v50 - v49)
      goto LABEL_48;
    if (__p == v59)
      break;
    v31 = v49 + 16;
    v32 = (char *)__p + 16;
    while (1)
    {
      v33 = v32 - 16;
      if (*((_QWORD *)v32 - 2) != *((_QWORD *)v31 - 2))
        break;
      v34 = v31[8];
      if (v32[8])
        v35 = v34 == 0;
      else
        v35 = 1;
      if (v35)
      {
        if ((v32[8] == 0) == (v34 != 0))
          break;
      }
      else if (*(_DWORD *)v32 != *(_DWORD *)v31)
      {
        break;
      }
      v31 += 32;
      v32 += 32;
      if (v33 + 32 == v59)
        goto LABEL_57;
    }
LABEL_48:
    v36 = *((_QWORD *)v59 - 4);
    v74 = 0;
    v75 = v36;
    if ((sub_1C61252B8((uint64_t *)(v21 + 40), &v75, &v74) & 1) != 0 && *(_QWORD **)(v74 + 8) == a1)
    {
      llvm::raw_ostream::indent(v6, 2 * v10);
      v37 = (_DWORD *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v37 > 3uLL)
      {
        *v37 = 1701080910;
        *((_QWORD *)v6 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v6, "Node", 4uLL);
      }
      BBNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode(*(_QWORD *)(v21 + 32), v36);
      llvm::write_hex(v6, (unint64_t)BBNode, 3, 0, 0);
      v39 = (_WORD *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v39 > 1uLL)
      {
        *v39 = 2619;
        *((_QWORD *)v6 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v6, ";\n", 2uLL);
      }
    }
    sub_1C61AF464((void **)&v52);
  }
LABEL_57:
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v47 != v48)
    free(v47);
  if (__p)
  {
    v59 = (char *)__p;
    operator delete(__p);
  }
  if (v53 != v52)
    free(v53);
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v69 != v68)
    free(v69);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v62 != v61)
    free(v62);
  result = llvm::raw_ostream::indent(v6, v7);
  v41 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v41 <= 1uLL)
    return llvm::raw_ostream::write(v6, "}\n", 2uLL);
  *v41 = 2685;
  *((_QWORD *)v6 + 4) += 2;
  return result;
}

void sub_1C4F00338(void **this)
{
  *this = off_1E813AD40;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4F00374(void **this)
{
  *this = off_1E813AD40;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4F003C4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1C4F003DC(uint64_t a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  std::string *p_p;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  unint64_t *v56;
  size_t v57;
  const void *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  int64_t v68;
  llvm::raw_ostream *v69;
  void *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  std::string __p;
  __int16 v74;
  void *v75;
  std::string::size_type v76;
  int64_t v77;
  std::string v78;
  std::string v79;
  int v80[4];
  __int128 __dst;
  int64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::RegionInfoPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::RegionInfoPass::ID);
  if (!(*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, v6))
    return 0;
  v85 = v6 + 32;
  v8 = *(_BYTE *)(a1 + 55);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 40);
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    v15 = *(char **)(a1 + 32);
    v14 = (char *)(a1 + 32);
    v13 = v15;
    if (v14[23] >= 0)
      v16 = v14;
    else
      v16 = v13;
    memmove(p_p, v16, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 46;
  v17 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v82) = 0;
    p_dst = &__dst;
    goto LABEL_31;
  }
  v18 = ***a2;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & (v17 ^ (a2 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_23;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == a2)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_23;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_23:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_103;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v82 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v82) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_30:
    memmove(p_dst, v28, v27);
LABEL_31:
  *((_BYTE *)p_dst + v27) = 0;
  if (v82 >= 0)
    v33 = (const std::string::value_type *)&__dst;
  else
    v33 = (const std::string::value_type *)__dst;
  if (v82 >= 0)
    v34 = HIBYTE(v82) & 0x7F;
  else
    v34 = *((_QWORD *)&__dst + 1);
  v35 = std::string::append(&__p, v33, v34);
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v79, ".dot");
  v38 = v37->__r_.__value_.__r.__words[2];
  v83 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v84 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80[0] = 0;
  v39 = (llvm *)std::system_category();
  v40 = (llvm::raw_ostream *)llvm::errs(v39);
  v41 = *((_QWORD *)v40 + 4);
  if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 39;
    *(_QWORD *)v41 = *(_QWORD *)"Writing '";
    *((_QWORD *)v40 + 4) += 9;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v40, "Writing '", 9uLL);
  }
  if (v84 >= 0)
    v42 = (const char *)&v83;
  else
    v42 = (const char *)v83;
  if (v84 >= 0)
    v43 = HIBYTE(v84) & 0x7F;
  else
    v43 = *((_QWORD *)&v83 + 1);
  v44 = llvm::raw_ostream::write(v40, v42, v43);
  v45 = (_DWORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 3uLL)
  {
    *v45 = 774778407;
    *((_QWORD *)v44 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v44, "'...", 4uLL);
  }
  if (v84 >= 0)
    v46 = &v83;
  else
    v46 = (__int128 *)v83;
  if (v84 >= 0)
    v47 = HIBYTE(v84) & 0x7F;
  else
    v47 = *((_QWORD *)&v83 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v79, v46, v47, (uint64_t)v80, 3);
  strcpy((char *)&v78, "Region Graph for '");
  v78.__r_.__value_.__s.__data_[19] = 0;
  HIDWORD(v78.__r_.__value_.__r.__words[2]) = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v57 = 0;
    HIBYTE(v77) = 0;
    v60 = &v75;
    goto LABEL_75;
  }
  v48 = ***a2;
  v49 = *(_QWORD *)(v48 + 152);
  v50 = *(unsigned int *)(v48 + 168);
  if ((_DWORD)v50)
  {
    LODWORD(v51) = (v50 - 1) & (v17 ^ (a2 >> 9));
    v52 = (uint64_t ****)(v49 + 16 * v51);
    v53 = *v52;
    if (*v52 == a2)
      goto LABEL_67;
    v54 = 1;
    while (v53 != (uint64_t ***)-4096)
    {
      v55 = v51 + v54++;
      v51 = v55 & (v50 - 1);
      v53 = *(uint64_t ****)(v49 + 16 * v51);
      if (v53 == a2)
      {
        v52 = (uint64_t ****)(v49 + 16 * v51);
        goto LABEL_67;
      }
    }
  }
  v52 = (uint64_t ****)(v49 + 16 * v50);
LABEL_67:
  v56 = (unint64_t *)v52[1];
  v59 = *v56;
  v58 = v56 + 2;
  v57 = v59;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
LABEL_103:
    abort();
  if (v57 >= 0x17)
  {
    v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v61 = v57 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v76 = v57;
    v77 = v62 | 0x8000000000000000;
    v75 = v60;
  }
  else
  {
    HIBYTE(v77) = v57;
    v60 = &v75;
    if (!v57)
      goto LABEL_75;
  }
  memmove(v60, v58, v57);
LABEL_75:
  *((_BYTE *)v60 + v57) = 0;
  if (v77 >= 0)
    v63 = (const std::string::value_type *)&v75;
  else
    v63 = (const std::string::value_type *)v75;
  if (v77 >= 0)
    v64 = HIBYTE(v77) & 0x7F;
  else
    v64 = v76;
  v65 = std::string::append(&v78, v63, v64);
  v66 = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&__p, "' function");
  v68 = v67->__r_.__value_.__r.__words[2];
  __dst = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v82 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0)
    operator delete(v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v80[0])
  {
    v69 = (llvm::raw_ostream *)llvm::errs((llvm *)v67);
    v70 = (void *)*((_QWORD *)v69 + 4);
    if (*((_QWORD *)v69 + 3) - (_QWORD)v70 > 0x20uLL)
    {
      qmemcpy(v70, "  error opening file for writing!", 33);
      *((_QWORD *)v69 + 4) += 33;
    }
    else
    {
      v69 = llvm::raw_ostream::write(v69, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v74 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v69 = (llvm::raw_ostream *)sub_1C4EFEA34((uint64_t)&v79, (uint64_t)&v85, 1, (llvm::Twine *)&__p);
  }
  v71 = (llvm::raw_ostream *)llvm::errs(v69);
  v72 = (_BYTE *)*((_QWORD *)v71 + 4);
  if (*((_BYTE **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, "\n", 1uLL);
  }
  else
  {
    *v72 = 10;
    ++*((_QWORD *)v71 + 4);
  }
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v79);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)v83);
  return 0;
}

uint64_t sub_1C4F009F4()
{
  return 1;
}

void sub_1C4F009FC(void **this)
{
  *this = off_1E813AD40;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4F00A38(void **this)
{
  *this = off_1E813AD40;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4F00A88(void **this)
{
  *this = off_1E813AE90;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4F00AC4(void **this)
{
  *this = off_1E813AE90;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4F00B14(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1C4F00B2C(_QWORD **a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  void **p_dst;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  void **__dst;
  std::string::size_type v34;
  int64_t v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v4 = (void **)*a1[1];
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::RegionInfoPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::RegionInfoPass::ID);
  if (!((unsigned int (*)(_QWORD **, uint64_t ***, uint64_t))(*a1)[18])(a1, a2, v6))
    return 0;
  v38 = v6 + 32;
  strcpy((char *)&v29, "Region Graph for '");
  v29.__r_.__value_.__s.__data_[19] = 0;
  HIDWORD(v29.__r_.__value_.__r.__words[2]) = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    HIBYTE(v35) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_20;
  }
  v7 = ***a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_11;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_12;
      }
    }
LABEL_11:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_12:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v16;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v16;
    p_dst = (void **)&__dst;
    if (!v16)
      goto LABEL_20;
  }
  memmove(p_dst, v17, v16);
LABEL_20:
  *((_BYTE *)p_dst + v16) = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35) & 0x7F;
  else
    v23 = v34;
  v24 = std::string::append(&v29, v22, v23);
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v31, "' function");
  v27 = v26->__r_.__value_.__r.__words[2];
  v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v32 = 260;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
  v30 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  sub_1C4F00E60((uint64_t)&v38, (llvm::Twine *)&v31, 0, (llvm::Twine *)&v29);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  return 0;
}

uint64_t sub_1C4F00DCC()
{
  return 1;
}

void sub_1C4F00DD4(void **this)
{
  *this = off_1E813AE90;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4F00E10(void **this)
{
  *this = off_1E813AE90;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4F00E60(uint64_t a1, llvm::Twine *a2, char a3, llvm::Twine *a4)
{
  llvm *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  _QWORD *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  char v17;
  size_t v18;
  __int128 *v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  void *v24[2];
  char v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v28 = 0;
  llvm::Twine::str(a2, v24);
  v23 = 260;
  v22[0] = v24;
  llvm::createGraphFilename((llvm::Twine *)v22, &v28, &v26);
  *(_OWORD *)__p = v26;
  v21 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  if (v25 < 0)
    operator delete(v24[0]);
  v7 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v22, v28, 1, 0, 0);
  if (v28 == -1)
  {
    v11 = (llvm::raw_ostream *)llvm::errs(v7);
    v12 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 0x13)
    {
      *(_DWORD *)(v12 + 16) = 656434540;
      *(_OWORD *)v12 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v11 + 4) += 20;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "error opening file '", 0x14uLL);
    }
    if (v21 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v21 >= 0)
      v14 = HIBYTE(v21) & 0x7F;
    else
      v14 = (size_t)__p[1];
    v15 = llvm::raw_ostream::write(v11, (const char *)v13, v14);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xEuLL)
    {
      qmemcpy(v16, "' for writing!\n", 15);
      *((_QWORD *)v15 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v15, "' for writing!\n", 0xFuLL);
    }
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
  }
  else
  {
    v8 = (llvm *)sub_1C4EFEA34((uint64_t)v22, a1, a3, a4);
    v9 = (llvm::raw_ostream *)llvm::errs(v8);
    v10 = (_QWORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 7uLL)
    {
      *v10 = 0xA202E656E6F6420;
      *((_QWORD *)v9 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v9, " done. \n", 8uLL);
    }
    v26 = *(_OWORD *)__p;
    v27 = v21;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v22);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v17 = HIBYTE(v27);
  if (v27 >= 0)
    v18 = HIBYTE(v27) & 0x7F;
  else
    v18 = *((_QWORD *)&v26 + 1);
  if (v18)
  {
    if (v27 >= 0)
      v19 = &v26;
    else
      v19 = (__int128 *)v26;
    llvm::DisplayGraph(v19, v18, 0, 0);
    v17 = HIBYTE(v27);
  }
  if (v17 < 0)
    operator delete((void *)v26);
}

void sub_1C4F010AC(void **this)
{
  *this = off_1E813AFE0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4F010E8(void **this)
{
  *this = off_1E813AFE0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4F01138(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1C4F01150(_QWORD **a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  void **p_dst;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  void **__dst;
  std::string::size_type v34;
  int64_t v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v4 = (void **)*a1[1];
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::RegionInfoPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::RegionInfoPass::ID);
  if (!((unsigned int (*)(_QWORD **, uint64_t ***, uint64_t))(*a1)[18])(a1, a2, v6))
    return 0;
  v38 = v6 + 32;
  strcpy((char *)&v29, "Region Graph for '");
  v29.__r_.__value_.__s.__data_[19] = 0;
  HIDWORD(v29.__r_.__value_.__r.__words[2]) = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    HIBYTE(v35) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_20;
  }
  v7 = ***a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_11;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_12;
      }
    }
LABEL_11:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_12:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v16;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v16;
    p_dst = (void **)&__dst;
    if (!v16)
      goto LABEL_20;
  }
  memmove(p_dst, v17, v16);
LABEL_20:
  *((_BYTE *)p_dst + v16) = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35) & 0x7F;
  else
    v23 = v34;
  v24 = std::string::append(&v29, v22, v23);
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v31, "' function");
  v27 = v26->__r_.__value_.__r.__words[2];
  v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v32 = 260;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
  v30 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  sub_1C4F00E60((uint64_t)&v38, (llvm::Twine *)&v31, 1, (llvm::Twine *)&v29);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  return 0;
}

uint64_t sub_1C4F013F0()
{
  return 1;
}

void sub_1C4F013F8(void **this)
{
  *this = off_1E813AFE0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4F01434(void **this)
{
  *this = off_1E813AFE0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4F01484(uint64_t a1, char *__s, __n128 *a3, _WORD *a4, _BYTE **a5)
{
  size_t v10;
  __n128 result;
  _BYTE *v12;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v12 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  return result;
}

uint64_t sub_1C4F01514()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Show only simple regions in the graphviz viewer";
  v4.n128_u64[1] = 47;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED7F32B8, "only-simple-regions", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F32B8, &dword_1C475E000);
}

uint64_t llvm::ReplayInlineAdvisor::ReplayInlineAdvisor(uint64_t a1, const llvm::Module *a2, uint64_t a3, uint64_t a4, uint64_t *a5, __int128 *a6, char a7)
{
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  llvm::StringMapImpl *v16;
  llvm::StringMapImpl *v17;
  uint64_t v18;
  const llvm::MemoryBuffer *v19;
  std::string *v20;
  std::string::size_type v21;
  __int128 v23;
  unint64_t v24;
  std::string::size_type v25;
  unint64_t v26;
  void *v27;
  size_t v28;
  char v29;
  void *v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  char v36;
  void *v37;
  char *v38;
  size_t v39;
  std::string::size_type v40;
  std::string::size_type size;
  std::string::size_type v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  _BYTE *v51;
  size_t v52;
  unsigned __int8 *v54;
  size_t v55;
  char v56;
  const llvm::MemoryBuffer *v57;
  char v58;
  char v59;
  const llvm::MemoryBuffer *v60;
  llvm::StringMapImpl *v61;
  unsigned __int8 *v62;
  void *__p[2];
  __int128 v64;
  __int16 v65;
  __int128 v66;
  uint64_t v67[2];
  std::string v68;
  size_t v69;
  __int128 v70;
  void *v71;
  __int128 v72;
  void *v73[4];
  uint64_t (**v74)(llvm::DiagnosticInfo *__hidden);
  uint64_t v75;
  uint64_t v76;
  void ***v77;
  uint64_t v78;
  __int128 v79;
  std::error_code v80;
  void **v81;
  uint64_t v82;
  void *v83;
  void **v84;
  uint64_t v85;
  std::error_code v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v12 = llvm::InlineAdvisor::InlineAdvisor((_QWORD *)a1, a2, a3);
  *v12 = &off_1E813B088;
  v13 = *a5;
  *a5 = 0;
  v12[4] = v13;
  *((_BYTE *)v12 + 40) = 0;
  v14 = *a6;
  v15 = a6[1];
  v12[15] = 0;
  v16 = (llvm::StringMapImpl *)(v12 + 15);
  *((_OWORD *)v12 + 4) = v15;
  *((_OWORD *)v12 + 3) = v14;
  *((_BYTE *)v12 + 80) = a7;
  v12[11] = 0;
  v17 = (llvm::StringMapImpl *)(v12 + 11);
  v12[12] = 0;
  v12[13] = 0x1000000000;
  v12[16] = 0;
  v12[17] = 0x800000000;
  LOWORD(v78) = 261;
  v18 = *((_QWORD *)a6 + 1);
  v74 = *(uint64_t (***)(llvm::DiagnosticInfo *__hidden))a6;
  v75 = v18;
  llvm::MemoryBuffer::getFileOrSTDIN((const char ***)&v74, 0, 1, (uint64_t)&v86);
  if ((v87 & 1) != 0)
  {
    v19 = *(const llvm::MemoryBuffer **)&v86.__val_;
    v80 = v86;
    if (v86.__val_)
    {
      std::error_code::message(&v68, &v80);
      v20 = std::string::insert(&v68, 0, "Could not open remarks file: ");
      v21 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      *(_QWORD *)&v64 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      LOWORD(v85) = 260;
      v81 = __p;
      LODWORD(v75) = 0;
      BYTE4(v75) = 0;
      v74 = &off_1E814E960;
      v76 = 0;
      v77 = &v81;
      v78 = 0;
      llvm::LLVMContext::diagnose(a4, (const llvm::DiagnosticInfo *)&v74);
      if (SBYTE7(v64) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      return a1;
    }
    v59 = v87;
  }
  else
  {
    v59 = v87;
    std::system_category();
    v19 = *(const llvm::MemoryBuffer **)&v86.__val_;
  }
  v60 = v19;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)&v74, v19, 1, 0);
  HIBYTE(v73[2]) = 16;
  strcpy((char *)v73, "' inlined into '");
  v71 = operator new(0x20uLL);
  v72 = xmmword_1C6613080;
  strcpy((char *)v71, "' will not be inlined into '");
  if ((_BYTE)v78)
  {
    v61 = v17;
    while (1)
    {
      v23 = v79;
      v70 = v79;
      v24 = llvm::StringRef::find((uint64_t *)&v70, " at callsite ", 0xDuLL, 0);
      if (v24 == -1)
      {
        v27 = 0;
        v28 = 0;
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v70;
      }
      else
      {
        if (*((_QWORD *)&v23 + 1) >= v24)
          v25 = v24;
        else
          v25 = *((_QWORD *)&v23 + 1);
        v26 = v24 + 13;
        if (*((_QWORD *)&v23 + 1) < v24 + 13)
          v26 = *((_QWORD *)&v23 + 1);
        v27 = (void *)(v23 + v26);
        v28 = *((_QWORD *)&v23 + 1) - v26;
        v68.__r_.__value_.__r.__words[0] = v23;
        v68.__r_.__value_.__l.__size_ = v25;
      }
      v68.__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
      v69 = v28;
      v29 = HIBYTE(v72);
      v30 = (void *)v72;
      if (v72 >= 0)
        v31 = (char *)&v71;
      else
        v31 = (char *)v71;
      if (v72 >= 0)
        v32 = HIBYTE(v72) & 0x7F;
      else
        v32 = v72;
      v33 = llvm::StringRef::find((uint64_t *)&v68, v31, v32, 0);
      v34 = v33;
      v35 = v73;
      if (v33 != -1)
        v35 = &v71;
      v36 = HIBYTE(v73[2]);
      if (v33 != -1)
        v36 = v29;
      v37 = v73[1];
      if (v33 != -1)
        v37 = v30;
      v38 = v36 >= 0 ? (char *)v35 : (char *)*v35;
      v39 = v36 >= 0 ? v36 & 0x7F : (size_t)v37;
      v40 = llvm::StringRef::find((uint64_t *)&v68, v38, v39, 0);
      if (v40 == -1)
      {
        v43 = 0;
        v44 = 0;
        v66 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
      }
      else
      {
        if (v68.__r_.__value_.__l.__size_ >= v40)
          size = v40;
        else
          size = v68.__r_.__value_.__l.__size_;
        v42 = v40 + v39;
        if (v68.__r_.__value_.__l.__size_ < v40 + v39)
          v42 = v68.__r_.__value_.__l.__size_;
        v43 = v68.__r_.__value_.__r.__words[0] + v42;
        v44 = v68.__r_.__value_.__l.__size_ - v42;
        *(_QWORD *)&v66 = v68.__r_.__value_.__r.__words[0];
        *((_QWORD *)&v66 + 1) = size;
      }
      v62 = (unsigned __int8 *)v43;
      v67[0] = v43;
      v67[1] = v44;
      v45 = llvm::StringRef::rfind((uint64_t *)&v66, ": '", 3uLL);
      if (v45 == -1)
      {
        v47 = 0;
        v48 = 0;
      }
      else
      {
        v46 = v45 + 3;
        if (*((_QWORD *)&v66 + 1) < (unint64_t)(v45 + 3))
          v46 = *((_QWORD *)&v66 + 1);
        v47 = (void **)(v66 + v46);
        v48 = *((_QWORD *)&v66 + 1) - v46;
      }
      v49 = llvm::StringRef::rfind(v67, "'", 1uLL);
      if (v44 >= v49)
        v50 = v49;
      else
        v50 = v44;
      if (v49 != -1)
        v44 = v50;
      if (!v28)
        break;
      v51 = memchr(v27, 59, v28);
      if (v51)
      {
        v52 = v28 >= v51 - (_BYTE *)v27 ? v51 - (_BYTE *)v27 : v28;
        if (v51 - (_BYTE *)v27 != -1)
          v28 = v52;
      }
      if (!v48)
        break;
      if (!v44 || v28 == 0)
        break;
      v81 = v47;
      v82 = v48;
      v83 = v27;
      v84 = (void **)v28;
      LOWORD(v85) = 1285;
      llvm::Twine::str((llvm::Twine *)&v81, __p);
      if ((SBYTE7(v64) & 0x80u) == 0)
        v54 = (unsigned __int8 *)__p;
      else
        v54 = (unsigned __int8 *)__p[0];
      if ((SBYTE7(v64) & 0x80u) == 0)
        v55 = BYTE7(v64) & 0x7F;
      else
        v55 = (size_t)__p[1];
      *(_BYTE *)(*sub_1C4F022D8(v61, v54, v55) + 8) = v34 == -1;
      if (!*((_DWORD *)a6 + 4))
        sub_1C4F024D8(v16, v62, v44);
      if (SBYTE7(v64) < 0)
        operator delete(__p[0]);
      llvm::line_iterator::advance((uint64_t)&v74);
      if (!(_BYTE)v78)
        goto LABEL_79;
    }
    v65 = 1283;
    __p[0] = "Invalid remark format: ";
    v64 = v23;
    LODWORD(v82) = 0;
    BYTE4(v82) = 0;
    v81 = (void **)&off_1E814E960;
    v83 = 0;
    v84 = __p;
    v85 = 0;
    llvm::LLVMContext::diagnose(a4, (const llvm::DiagnosticInfo *)&v81);
  }
  else
  {
LABEL_79:
    *(_BYTE *)(a1 + 40) = 1;
  }
  v56 = v59;
  v57 = v60;
  if (SHIBYTE(v72) < 0)
  {
    operator delete(v71);
    v57 = v60;
    v56 = v59;
  }
  if (SHIBYTE(v73[2]) < 0)
  {
    v58 = v56;
    operator delete(v73[0]);
    v57 = v60;
    v56 = v58;
  }
  if ((v56 & 1) == 0)
    (*(void (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v57 + 8))(v57);
  return a1;
}

uint64_t sub_1C4F01AC8@<X0>(const llvm::Module *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, __int128 *a5@<X4>, char *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v14 = operator new();
  v15 = *a4;
  *a4 = 0;
  v17 = v15;
  *a7 = llvm::ReplayInlineAdvisor::ReplayInlineAdvisor(v14, a1, a2, a3, &v17, a5, *a6);
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

void llvm::ReplayInlineAdvisor::getAdviceImpl(llvm::ReplayInlineAdvisor *this@<X0>, llvm::CallBase *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  uint64_t ***v23;
  char *v24;
  uint64_t **v25;
  uint64_t **v26;
  void **v27;
  size_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  void **v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t ***v40;
  size_t v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  int v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ResultImpl;
  uint64_t v63;
  _BYTE v66[32];
  char v67;
  _BYTE v68[32];
  char v69;
  __int128 v70;
  void **v71;
  int v72;
  uint64_t v73;
  int v74;
  char v75;
  void *__p[2];
  char v77;
  unsigned __int8 *v78;
  void *v79[2];
  char v80;
  __int128 v81;
  void **v82;
  int v83;
  uint64_t v84;
  int v85;
  char v86;
  char v87;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::OptimizationRemarkEmitterAnalysis::Key, *(_QWORD *)(*((_QWORD *)a2 + 5) + 56));
  if (*((_DWORD *)this + 16) == 1)
    goto LABEL_2;
  v14 = *(uint64_t ****)(*((_QWORD *)a2 + 5) + 56);
  if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
  {
    v15 = ***v14;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v19 = (uint64_t ****)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == v14)
        goto LABEL_45;
      v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == v14)
        {
          v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_45;
        }
      }
    }
    v19 = (uint64_t ****)(v16 + 16 * v17);
LABEL_45:
    v39 = *((_DWORD *)this + 32);
    if (v39)
    {
      v40 = v19[1];
      v43 = (size_t)*v40;
      v42 = (char *)(v40 + 2);
      v41 = v43;
      if (v43)
      {
        v44 = 0;
        v45 = 0;
        do
          v45 = 33 * v45 + v42[v44++];
        while (v41 != v44);
        v46 = 0;
      }
      else
      {
        v45 = 0;
        v46 = 1;
      }
      goto LABEL_50;
    }
LABEL_93:
    v61 = *((_QWORD *)this + 4);
    if (v61)
      (*(void (**)(uint64_t, llvm::CallBase *))(*(_QWORD *)v61 + 40))(v61, a2);
    else
      *a3 = 0;
    return;
  }
  v39 = *((_DWORD *)this + 32);
  if (!v39)
    goto LABEL_93;
  v41 = 0;
  v45 = 0;
  v46 = 1;
  v42 = &byte_1C871356D;
LABEL_50:
  v47 = v39 - 1;
  v48 = *((_QWORD *)this + 15);
  v49 = v48 + 8 * v39 + 8;
  v50 = 1;
  v51 = v45;
  while (1)
  {
    v52 = v51 & v47;
    v53 = *(_QWORD **)(v48 + 8 * v52);
    if (v53 != (_QWORD *)-8)
    {
      if (!v53)
        goto LABEL_93;
      if (*(_DWORD *)(v49 + 4 * v52) == v45
        && v41 == *v53
        && ((v46 & 1) != 0 || !memcmp(v42, (char *)v53 + *((unsigned int *)this + 35), v41)))
      {
        break;
      }
    }
    v51 = v50 + v52;
    ++v50;
  }
  if ((_DWORD)v52 == -1)
    goto LABEL_93;
LABEL_2:
  v4 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v78 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v78, v4, 2);
  llvm::formatCallSiteLocation((uint64_t *)&v78, (_DWORD *)this + 18, (uint64_t)v79);
  if (v78)
    llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
  v5 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v5 || *((_BYTE *)v5 + 16) || v5[3] != *((uint64_t ***)a2 + 9))
    v5 = 0;
  v63 = ResultImpl + 8;
  if ((*((_BYTE *)v5 + 23) & 0x10) == 0)
  {
    v25 = 0;
    v24 = &byte_1C871356D;
    goto LABEL_26;
  }
  v6 = ***v5;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_24;
  LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v10 = (uint64_t ****)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != v5)
  {
    v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(uint64_t ****)(v7 + 16 * v9);
      if (v11 == v5)
      {
        v10 = (uint64_t ****)(v7 + 16 * v9);
        goto LABEL_25;
      }
    }
LABEL_24:
    v10 = (uint64_t ****)(v7 + 16 * v8);
  }
LABEL_25:
  v23 = v10[1];
  v26 = *v23;
  v24 = (char *)(v23 + 2);
  v25 = v26;
LABEL_26:
  *(_QWORD *)&v81 = v24;
  *((_QWORD *)&v81 + 1) = v25;
  v82 = v79;
  LOWORD(v84) = 1029;
  llvm::Twine::str((llvm::Twine *)&v81, __p);
  if (v77 >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if (v77 >= 0)
    v28 = v77 & 0x7F;
  else
    v28 = (size_t)__p[1];
  v29 = *((unsigned int *)this + 24);
  if (!(_DWORD)v29)
    goto LABEL_70;
  v30 = 0;
  if (v28)
  {
    v31 = v28;
    v32 = v27;
    do
    {
      v33 = *(unsigned __int8 *)v32;
      v32 = (void **)((char *)v32 + 1);
      v30 = 33 * v30 + v33;
      --v31;
    }
    while (v31);
  }
  v34 = *((_QWORD *)this + 11);
  v35 = 1;
  v36 = v30;
  while (1)
  {
    v37 = v36 & (v29 - 1);
    v38 = *(_QWORD **)(v34 + 8 * v37);
    if (v38 != (_QWORD *)-8)
    {
      if (!v38)
        goto LABEL_70;
      if (*(_DWORD *)(v34 + 8 * v29 + 8 + 4 * v37) == v30
        && v28 == *v38
        && (!v28 || !memcmp(v27, (char *)v38 + *((unsigned int *)this + 27), v28)))
      {
        break;
      }
    }
    v36 = v35 + v37;
    ++v35;
  }
  if ((_DWORD)v37 == -1 || (int)v37 == v29)
  {
LABEL_70:
    v56 = *((_DWORD *)this + 17);
    if (v56 != 2)
    {
      if (v56 == 1)
      {
        v66[0] = 0;
        v67 = 0;
        sub_1C4E556F4((llvm::APInt *)"AlwaysInline Fallback", (llvm::APInt *)v66, (uint64_t)&v70);
        v57 = operator new();
        v58 = v57;
        v81 = v70;
        LOBYTE(v82) = 0;
        v86 = 0;
        if (v75)
        {
          v83 = v72;
          v82 = v71;
          v85 = v74;
          v84 = v73;
          v72 = 0;
          v74 = 0;
          v86 = 1;
        }
        v87 = 1;
        sub_1C4E614A0(v57, (uint64_t)this, a2, (uint64_t)&v81, v63, *((_BYTE *)this + 80));
        if (v87 && v86)
          sub_1C61996A0((uint64_t)&v82);
        *a3 = v58;
        if (v75)
        {
          sub_1C61996A0((uint64_t)&v71);
          v75 = 0;
        }
        if (v67)
        {
          sub_1C61996A0((uint64_t)v66);
          v67 = 0;
        }
      }
      else
      {
        v60 = *((_QWORD *)this + 4);
        if (v60)
          (*(void (**)(uint64_t, llvm::CallBase *))(*(_QWORD *)v60 + 40))(v60, a2);
        else
          *a3 = 0;
      }
      goto LABEL_88;
    }
    goto LABEL_81;
  }
  if (!*(_BYTE *)(*sub_1C4F022D8((llvm::ReplayInlineAdvisor *)((char *)this + 88), (unsigned __int8 *)v27, v28) + 8))
  {
LABEL_81:
    v59 = operator new();
    LOBYTE(v81) = 0;
    v87 = 0;
    sub_1C4E614A0(v59, (uint64_t)this, a2, (uint64_t)&v81, v63, *((_BYTE *)this + 80));
    if (v87 && v86)
      sub_1C61996A0((uint64_t)&v82);
    *a3 = v59;
    goto LABEL_88;
  }
  v68[0] = 0;
  v69 = 0;
  sub_1C4E556F4((llvm::APInt *)"previously inlined", (llvm::APInt *)v68, (uint64_t)&v70);
  v54 = operator new();
  v55 = v54;
  v81 = v70;
  LOBYTE(v82) = 0;
  v86 = 0;
  if (v75)
  {
    v83 = v72;
    v82 = v71;
    v85 = v74;
    v84 = v73;
    v72 = 0;
    v74 = 0;
    v86 = 1;
  }
  v87 = 1;
  sub_1C4E614A0(v54, (uint64_t)this, a2, (uint64_t)&v81, v63, *((_BYTE *)this + 80));
  if (v87 && v86)
    sub_1C61996A0((uint64_t)&v82);
  *a3 = v55;
  if (v75)
  {
    sub_1C61996A0((uint64_t)&v71);
    v75 = 0;
  }
  if (v69)
  {
    sub_1C61996A0((uint64_t)v68);
    v69 = 0;
  }
LABEL_88:
  if (v77 < 0)
    operator delete(__p[0]);
  if (v80 < 0)
    operator delete(v79[0]);
}

uint64_t sub_1C4F02264(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v6)
          v7 = v6 == -8;
        else
          v7 = 1;
        if (!v7)
          MEMORY[0x1CAA32FB4]();
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

_QWORD *sub_1C4F022D8(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  _QWORD *v20;
  char *v21;
  char *v22;
  char *v23;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v20 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v20)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v20[16] = 2;
    *(_QWORD *)a1 = v20;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_17:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17)
  {
    if (v17 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v21 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  v22 = v21;
  v23 = v21 + 16;
  if (__n)
    memcpy(v21 + 16, a2, __n);
  v23[__n] = 0;
  *(_QWORD *)v22 = __n;
  v22[8] = 0;
  *i = v22;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

_QWORD *sub_1C4F024D8(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_17:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17)
  {
    if (v17 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v20 = operator new(__n + 9, (std::align_val_t)8uLL);
  v21 = v20;
  v22 = (char *)(v20 + 1);
  if (__n)
    memcpy(v20 + 1, a2, __n);
  v22[__n] = 0;
  *v21 = __n;
  *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

void llvm::SCEV::print(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_1C4F02720(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm::Constant *a10, llvm::Type *a11, llvm::Type *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  llvm::raw_ostream *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v24 = *(_QWORD *)(v23 + 32);
  v25 = (_DWORD *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v25 > 6uLL)
  {
    *(_DWORD *)((char *)v25 + 3) = 543387253;
    *v25 = 1970435112;
    *((_QWORD *)v22 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v22, "(trunc ", 7uLL);
  }
  __asm { BR              X11 }
}

uint64_t llvm::SCEV::getType(llvm::SCEV *this)
{
  return ((uint64_t (*)(void))((char *)sub_1C4F0315C + 4 * byte_1C85F4E91[*((unsigned __int16 *)this + 12)]))();
}

uint64_t sub_1C4F0315C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 32);
}

void sub_1C4F03168()
{
  JUMPOUT(0x1C4F03160);
}

void sub_1C4F03170()
{
  JUMPOUT(0x1C4F03160);
}

void sub_1C4F03178()
{
  JUMPOUT(0x1C4F03148);
}

void sub_1C4F03184()
{
  JUMPOUT(0x1C4F03160);
}

void sub_1C4F0318C()
{
  JUMPOUT(0x1C4F0317CLL);
}

uint64_t llvm::SCEVUnknown::isSizeOf(llvm::SCEVUnknown *this, llvm::Type **a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v8;
  llvm::APInt *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 5;
  else
    v3 = 0;
  if (!v3 || *(_WORD *)(v2 + 18) != 47)
    return 0;
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  v5 = v4 && *(_BYTE *)(v4 + 16) == 5;
  if (!v5 || *(_WORD *)(v4 + 18) != 34)
    return 0;
  result = llvm::Constant::isNullValue(*(llvm::Constant **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)));
  if (!(_DWORD)result)
    return result;
  if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) != 2)
    return 0;
  v8 = *(_QWORD *)(v4 - 32);
  if (!v8 || *(_BYTE *)(v8 + 16) != 16)
    return 0;
  v10 = (llvm::APInt *)(v8 + 24);
  v11 = *(_DWORD *)(v8 + 32);
  if (v11 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v10) != v11 - 1)
      return 0;
  }
  else if (*(_QWORD *)v10 != 1)
  {
    return 0;
  }
  v12 = 24;
  if (*(_BYTE *)(v4 + 16) == 62)
    v12 = 64;
  *a2 = *(llvm::Type **)(v4 + v12);
  return 1;
}

uint64_t llvm::SCEVUnknown::isAlignOf(llvm::SCEVUnknown *this, llvm::Type **a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  llvm::APInt *v13;
  unsigned int v14;
  _QWORD *v15;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 5;
  else
    v3 = 0;
  if (!v3 || *(_WORD *)(v2 + 18) != 47)
    return 0;
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  v5 = v4 && *(_BYTE *)(v4 + 16) == 5;
  if (!v5 || *(_WORD *)(v4 + 18) != 34)
    return 0;
  result = llvm::Constant::isNullValue(*(llvm::Constant **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)));
  if (!(_DWORD)result)
    return result;
  v8 = 24;
  if (*(_BYTE *)(v4 + 16) == 62)
    v8 = 64;
  v9 = *(_QWORD *)(v4 + v8);
  v10 = v9 && (*(_DWORD *)(v9 + 8) & 0x2FF) == 16;
  if (!v10 || (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) != 3)
    return 0;
  result = llvm::Constant::isNullValue(*(llvm::Constant **)(v4 - 64));
  if (!(_DWORD)result)
    return result;
  v11 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 64);
  if (!v11 || *(_BYTE *)(v11 + 16) != 16)
    return 0;
  v13 = (llvm::APInt *)(v11 + 24);
  v14 = *(_DWORD *)(v11 + 32);
  if (v14 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v13) != v14 - 1)
      return 0;
  }
  else if (*(_QWORD *)v13 != 1)
  {
    return 0;
  }
  if (*(_DWORD *)(v9 + 12) == 2)
  {
    v15 = *(_QWORD **)(v9 + 16);
    if (*(_DWORD *)(*v15 + 8) == 269)
    {
      *a2 = (llvm::Type *)v15[1];
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::SCEVUnknown::isOffsetOf(llvm::SCEVUnknown *this, llvm::Type **a2, llvm::Constant **a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v10;
  llvm::Type *v11;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 5;
  else
    v4 = 0;
  if (!v4 || *(_WORD *)(v3 + 18) != 47)
    return 0;
  v5 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
  v6 = v5 && *(_BYTE *)(v5 + 16) == 5;
  if (!v6 || *(_WORD *)(v5 + 18) != 34 || (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 3)
    return 0;
  result = llvm::Constant::isNullValue(*(llvm::Constant **)(v5 - 96));
  if ((_DWORD)result)
  {
    result = llvm::Constant::isNullValue(*(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32));
    if ((_DWORD)result)
    {
      v10 = 24;
      if (*(_BYTE *)(v5 + 16) == 62)
        v10 = 64;
      v11 = *(llvm::Type **)(v5 + v10);
      if ((*((_DWORD *)v11 + 2) & 0xFE) == 0x10)
      {
        *a2 = v11;
        *a3 = *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 64);
        return 1;
      }
      return 0;
    }
  }
  return result;
}

BOOL llvm::SCEV::isZero(llvm::SCEV *this)
{
  _BOOL8 result;
  uint64_t v3;
  llvm::APInt *v4;
  unsigned int v5;

  result = 0;
  if (this && !*((_WORD *)this + 12))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (llvm::APInt *)(v3 + 24);
    v5 = *(_DWORD *)(v3 + 32);
    if (v5 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v4) == v5;
    else
      return *(_QWORD *)v4 == 0;
  }
  return result;
}

BOOL llvm::SCEV::isOne(llvm::SCEV *this)
{
  _BOOL8 result;
  uint64_t v3;
  llvm::APInt *v4;
  unsigned int v5;

  result = 0;
  if (this && !*((_WORD *)this + 12))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (llvm::APInt *)(v3 + 24);
    v5 = *(_DWORD *)(v3 + 32);
    if (v5 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v4) == v5 - 1;
    else
      return *(_QWORD *)v4 == 1;
  }
  return result;
}

BOOL llvm::SCEV::isAllOnesValue(llvm::SCEV *this)
{
  _BOOL8 result;
  uint64_t v3;
  unsigned int v4;
  llvm::APInt *v5;

  result = 0;
  if (this && !*((_WORD *)this + 12))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_DWORD *)(v3 + 32);
    if (v4)
    {
      v5 = (llvm::APInt *)(v3 + 24);
      if (v4 > 0x40)
        return llvm::APInt::countTrailingOnesSlowCase(v5) == v4;
      else
        return *(_QWORD *)v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::SCEV::isNonConstantNegative(llvm::SCEV *this)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;

  result = 0;
  if (this && *((_WORD *)this + 12) == 5)
  {
    v3 = **((_QWORD **)this + 4);
    if (v3)
      v4 = *(unsigned __int16 *)(v3 + 24) == 0;
    else
      v4 = 0;
    if (v4)
    {
      v5 = *(_QWORD *)(v3 + 32);
      v6 = (_QWORD *)(v5 + 24);
      v7 = *(_DWORD *)(v5 + 32);
      v8 = v7 - 1;
      if (v7 >= 0x41)
        v6 = (_QWORD *)(*v6 + 8 * (v8 >> 6));
      return (*v6 >> v8) & 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::SCEVCouldNotCompute::SCEVCouldNotCompute(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 15;
  *(_WORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 15;
  *(_WORD *)(this + 28) = 0;
  return this;
}

BOOL llvm::SCEVCouldNotCompute::classof(llvm::SCEVCouldNotCompute *this, const llvm::SCEV *a2)
{
  return *((unsigned __int16 *)this + 12) == 15;
}

unint64_t llvm::ScalarEvolution::getConstant(llvm::ScalarEvolution *this, llvm::ConstantInt *a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v17;
  llvm::ConstantInt *v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = a2;
  v4 = *((_QWORD *)this + 104)
     + 8 * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(&v17, (uint64_t)&v19));
  v5 = *(_QWORD *)v4;
  v20 = v22;
  v21 = 0x2000000000;
  if (v5)
    v6 = (v5 & 1) == 0;
  else
    v6 = 0;
  if (v6)
  {
    while (*(_QWORD *)(v5 + 16) != 3 || memcmp(&v17, *(const void **)(v5 + 8), 0xCuLL))
    {
      LODWORD(v21) = 0;
      v5 = *(_QWORD *)v5;
      if (v5)
        v7 = (v5 & 1) == 0;
      else
        v7 = 0;
      if (!v7)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    v5 = sub_1C484358C((uint64_t)this + 864, 40, 3);
    v8 = sub_1C484358C((uint64_t)this + 864, 12, 2);
    v9 = &v17;
    v10 = 12;
    v11 = (_DWORD *)v8;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      v10 -= 4;
    }
    while (v10);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 16) = 3;
    *(_DWORD *)(v5 + 24) = 0x10000;
    *(_WORD *)(v5 + 28) = 0;
    *(_QWORD *)(v5 + 32) = a2;
    v13 = *((_DWORD *)this + 211) + 1;
    v14 = *((_DWORD *)this + 210);
    if (v13 > 2 * v14)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v14, (uint64_t)off_1E813B300);
      v20 = v22;
      v21 = 0x2000000000;
      v4 = *((_QWORD *)this + 104)
         + 8
         * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v5 + 8), *(_QWORD *)(v5 + 8) + 4 * *(_QWORD *)(v5 + 16)));
      if (v20 != v22)
        free(v20);
      v13 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v13;
    v15 = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
      v15 = v4 | 1;
    *(_QWORD *)v5 = v15;
    *(_QWORD *)v4 = v5;
  }
  return v5;
}

unint64_t llvm::ScalarEvolution::getConstant(llvm::ConstantInt ****this, const llvm::APInt *a2, const llvm::APInt *a3)
{
  llvm::ValueHandleBase *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v18;
  llvm::ValueHandleBase *v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x1E0C80C00];
  v4 = llvm::ConstantInt::get(***this, a2, a3);
  v18 = 0;
  v19 = v4;
  v5 = (uint64_t)&this[104][(*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(&v18, (uint64_t)&v20)];
  v6 = *(_QWORD *)v5;
  v21 = v23;
  v22 = 0x2000000000;
  if (v6)
    v7 = (v6 & 1) == 0;
  else
    v7 = 0;
  if (v7)
  {
    while (*(_QWORD *)(v6 + 16) != 3 || memcmp(&v18, *(const void **)(v6 + 8), 0xCuLL))
    {
      LODWORD(v22) = 0;
      v6 = *(_QWORD *)v6;
      if (v6)
        v8 = (v6 & 1) == 0;
      else
        v8 = 0;
      if (!v8)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    v6 = sub_1C484358C((uint64_t)(this + 108), 40, 3);
    v9 = sub_1C484358C((uint64_t)(this + 108), 12, 2);
    v10 = &v18;
    v11 = 12;
    v12 = (_DWORD *)v9;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
      v11 -= 4;
    }
    while (v11);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(v6 + 16) = 3;
    *(_DWORD *)(v6 + 24) = 0x10000;
    *(_WORD *)(v6 + 28) = 0;
    *(_QWORD *)(v6 + 32) = v4;
    v14 = *((_DWORD *)this + 211) + 1;
    v15 = *((_DWORD *)this + 210);
    if (v14 > 2 * v15)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)(this + 104), 2 * v15, (uint64_t)off_1E813B300);
      v21 = v23;
      v22 = 0x2000000000;
      v5 = (uint64_t)&this[104][(*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v6 + 8), *(_QWORD *)(v6 + 8)+ 4 * *(_QWORD *)(v6 + 16))];
      if (v21 != v23)
        free(v21);
      v14 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v14;
    v16 = *(_QWORD *)v5;
    if (!*(_QWORD *)v5)
      v16 = v5 | 1;
    *(_QWORD *)v6 = v16;
    *(_QWORD *)v5 = v6;
  }
  return v6;
}

unint64_t llvm::ScalarEvolution::getConstant(llvm::ScalarEvolution *this, llvm::Type *a2, uint64_t a3, int a4)
{
  unsigned int v7;
  llvm::Type *v8;
  llvm::ConstantInt *v9;
  unint64_t v10;
  llvm::ValueHandleBase *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v25;
  llvm::ValueHandleBase *v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)a2 + 2);
  if (v7 != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), a2);
    a2 = v8;
    v7 = *((_DWORD *)v8 + 2);
  }
  v9 = *(llvm::ConstantInt **)a2;
  LODWORD(v29) = v7 >> 8;
  if (v7 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v28, a3, a4);
  }
  else
  {
    if (v7 <= 0xFF)
      v10 = 0;
    else
      v10 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v7);
    v28 = (void *)(v10 & a3);
  }
  v11 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v28, (const llvm::APInt *)a3);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  v25 = 0;
  v26 = v11;
  v12 = *((_QWORD *)this + 104)
      + 8 * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(&v25, (uint64_t)&v27));
  v13 = *(_QWORD *)v12;
  v28 = v30;
  v29 = 0x2000000000;
  if (v13)
    v14 = (v13 & 1) == 0;
  else
    v14 = 0;
  if (v14)
  {
    while (*(_QWORD *)(v13 + 16) != 3 || memcmp(&v25, *(const void **)(v13 + 8), 0xCuLL))
    {
      LODWORD(v29) = 0;
      v13 = *(_QWORD *)v13;
      if (v13)
        v15 = (v13 & 1) == 0;
      else
        v15 = 0;
      if (!v15)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    v13 = sub_1C484358C((uint64_t)this + 864, 40, 3);
    v16 = sub_1C484358C((uint64_t)this + 864, 12, 2);
    v17 = &v25;
    v18 = 12;
    v19 = (_DWORD *)v16;
    do
    {
      v20 = *v17++;
      *v19++ = v20;
      v18 -= 4;
    }
    while (v18);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = v16;
    *(_QWORD *)(v13 + 16) = 3;
    *(_DWORD *)(v13 + 24) = 0x10000;
    *(_WORD *)(v13 + 28) = 0;
    *(_QWORD *)(v13 + 32) = v11;
    v21 = *((_DWORD *)this + 211) + 1;
    v22 = *((_DWORD *)this + 210);
    if (v21 > 2 * v22)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v22, (uint64_t)off_1E813B300);
      v28 = v30;
      v29 = 0x2000000000;
      v12 = *((_QWORD *)this + 104)
          + 8
          * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v13 + 8), *(_QWORD *)(v13 + 8) + 4 * *(_QWORD *)(v13 + 16)));
      if (v28 != v30)
        free(v28);
      v21 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v21;
    v23 = *(_QWORD *)v12;
    if (!*(_QWORD *)v12)
      v23 = v12 | 1;
    *(_QWORD *)v13 = v23;
    *(_QWORD *)v12 = v13;
  }
  return v13;
}

double llvm::ScalarEvolution::getEffectiveSCEVType(llvm::ScalarEvolution *this, llvm::Type *a2)
{
  double result;

  if (*((_BYTE *)a2 + 8) != 13)
    return llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), a2);
  return result;
}

uint64_t llvm::SCEVCastExpr::SCEVCastExpr(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  __int16 v11;
  uint64_t v13;

  v13 = a5;
  v11 = sub_1C4F03F00((uint64_t)&v13, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  return a1;
}

{
  __int16 v11;
  uint64_t v13;

  v13 = a5;
  v11 = sub_1C4F03F00((uint64_t)&v13, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  return a1;
}

uint64_t sub_1C4F03F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  BOOL v18;

  v15 = 16;
  LOWORD(v2) = 1;
  v14 = 1;
  if (a2)
  {
    v4 = 8 * a2;
    v2 = 1;
    v5 = 16;
    do
    {
      v6 = (uint64_t *)*(unsigned __int16 *)(*(_QWORD *)a1 + 26);
      v11 = 16;
      v10 = v6;
      v18 = 0;
      llvm::APInt::uadd_ov((const void **)&v14, &v10, &v18, (uint64_t)&v16);
      if (v18)
      {
        v13 = v5;
        if (v5 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v12, -1, 1);
        }
        else
        {
          v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
          if (!v5)
            v9 = 0;
          v12 = (uint64_t *)v9;
        }
        if (v17 >= 0x41 && v16)
          MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      }
      else
      {
        v13 = v17;
        v12 = v16;
      }
      if (v5 >= 0x41 && v2)
        MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
      v2 = (uint64_t)v12;
      v14 = (uint64_t)v12;
      v5 = v13;
      v15 = v13;
      a1 += 8;
      v4 -= 8;
    }
    while (v4);
    if (v13 >= 0x41)
    {
      v7 = *v12;
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
      LOWORD(v2) = v7;
    }
  }
  return (unsigned __int16)v2;
}

uint64_t llvm::SCEVPtrToIntExpr::SCEVPtrToIntExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 13;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 13;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

uint64_t llvm::SCEVIntegralCastExpr::SCEVIntegralCastExpr(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  __int16 v11;
  uint64_t v13;

  v13 = a5;
  v11 = sub_1C4F03F00((uint64_t)&v13, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  return a1;
}

{
  __int16 v11;
  uint64_t v13;

  v13 = a5;
  v11 = sub_1C4F03F00((uint64_t)&v13, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  return a1;
}

uint64_t llvm::SCEVTruncateExpr::SCEVTruncateExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 1;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 1;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

uint64_t llvm::SCEVZeroExtendExpr::SCEVZeroExtendExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 2;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 2;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

uint64_t llvm::SCEVSignExtendExpr::SCEVSignExtendExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 3;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

{
  __int16 v9;
  uint64_t v11;

  v11 = a4;
  v9 = sub_1C4F03F00((uint64_t)&v11, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 3;
  *(_WORD *)(a1 + 26) = v9;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  return a1;
}

BOOL llvm::SCEVUnknown::deleted(llvm::SCEVUnknown *this)
{
  int32x2_t *v2;
  _BOOL8 result;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v2 = (int32x2_t *)*((_QWORD *)this + 8);
  v17 = (uint64_t)this + 32;
  llvm::ScalarEvolution::forgetMemoizedResults(v2, &v17, 1);
  result = llvm::FoldingSetBase::RemoveNode(*((_QWORD *)this + 8) + 832, (_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v5 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v5 = *((_QWORD *)this + 2);
      v6 = (unint64_t *)*((_QWORD *)this + 2);
      if (v6)
      {
        *v6 = *v6 & 7 | v5;
      }
      else
      {
        v7 = *((_QWORD *)this + 3);
        v8 = ***(int32x2_t ****)v7;
        v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            v13 = (uint64_t *)(v9 + 16 * v12);
            v14 = *v13;
            if (v7 == *v13)
            {
LABEL_11:
              *v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              v7 = *((_QWORD *)this + 3);
            }
            else
            {
              v15 = 1;
              while (v14 != -4096)
              {
                v16 = v12 + v15++;
                v12 = v16 & v11;
                v14 = *(_QWORD *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_11;
                }
              }
            }
            *(_BYTE *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

void llvm::ScalarEvolution::forgetMemoizedResults(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int32x2_t v29;
  unsigned __int32 v30;
  unsigned __int32 v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  const llvm::SCEV *v53;
  unint64_t *v54;
  unint64_t v55;
  int32x2_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[64];
  void *v75;
  uint64_t v76;
  _QWORD v77[9];

  v77[8] = *MEMORY[0x1E0C80C00];
  v4 = (unint64_t *)v74;
  v70 = v74;
  v71 = v74;
  v72 = 8;
  v73 = 0;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      v7 = *a2++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v70, v7);
      v6 -= 8;
    }
    while (v6);
    v4 = (unint64_t *)v70;
    v8 = (unint64_t *)v71;
    v10 = v72;
    v9 = HIDWORD(v72);
  }
  else
  {
    v9 = 0;
    v10 = 8;
    v8 = (unint64_t *)v74;
  }
  if (v8 == v4)
    v11 = v9;
  else
    v11 = v10;
  v12 = v8;
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v12 = v8;
    do
    {
      if (*v12 < 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_15;
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v75 = v77;
    HIDWORD(v76) = 8;
    goto LABEL_14;
  }
LABEL_15:
  v14 = &v8[v11];
  v75 = v77;
  v76 = 0x800000000;
  if (v12 == v14)
  {
LABEL_14:
    LODWORD(v76) = 0;
    goto LABEL_58;
  }
  v15 = 0;
  v16 = v12;
LABEL_17:
  v17 = v15 + 1;
  v18 = v16 + 1;
  while (v18 != v14)
  {
    v19 = *v18++;
    if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v16 = v18 - 1;
      ++v15;
      goto LABEL_17;
    }
  }
  if (v15 >= 8)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v15 + 1, 8);
    v20 = v76;
    v22 = v75;
    v21 = v76;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = v77;
  }
  v23 = &v22[v20];
  v24 = *v12;
LABEL_24:
  *v23 = v24;
  v25 = v12 + 1;
  while (v25 != v14)
  {
    v26 = *v25++;
    v24 = v26;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      ++v23;
      v12 = v25 - 1;
      goto LABEL_24;
    }
  }
  v27 = v21 + v17;
  LODWORD(v76) = v27;
  if (v27)
  {
    while (1)
    {
      v28 = *((_QWORD *)v75 + --v27);
      LODWORD(v76) = v27;
      v29 = a1[95];
      v30 = a1[97].u32[0];
      if (!v30)
        goto LABEL_35;
      v31 = v30 - 1;
      v32 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
      v33 = (uint64_t *)(*(_QWORD *)&v29 + 104 * v32);
      v34 = *v33;
      if (*v33 != v28)
        break;
LABEL_36:
      if ((uint64_t *)(*(_QWORD *)&v29 + 104 * v30) != v33)
      {
        v37 = v33[2];
        if (v37 == v33[1])
          v38 = 28;
        else
          v38 = 24;
        v39 = *(unsigned int *)((char *)v33 + v38);
        if ((_DWORD)v39)
        {
          v40 = 8 * v39;
          v41 = (uint64_t *)v33[2];
          while ((unint64_t)*v41 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v41;
            v40 -= 8;
            if (!v40)
              goto LABEL_57;
          }
        }
        else
        {
          v41 = (uint64_t *)v33[2];
        }
        v42 = (_QWORD *)(v37 + 8 * v39);
        if (v41 != v42)
        {
          v43 = *v41;
LABEL_48:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v70, v43);
          if (v44)
          {
            v45 = v76;
            if (v76 >= (unint64_t)HIDWORD(v76))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v76 + 1, 8);
              v45 = v76;
            }
            *((_QWORD *)v75 + v45) = v43;
            LODWORD(v76) = v76 + 1;
          }
          v46 = (unint64_t *)(v41 + 1);
          while (v46 != v42)
          {
            v47 = *v46++;
            v43 = v47;
            if (v47 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v41 = (uint64_t *)(v46 - 1);
              goto LABEL_48;
            }
          }
          v27 = v76;
        }
      }
LABEL_57:
      if (!v27)
        goto LABEL_58;
    }
    v35 = 1;
    while (v34 != -4096)
    {
      v36 = v32 + v35++;
      v32 = v36 & v31;
      v33 = (uint64_t *)(*(_QWORD *)&v29 + 104 * (v36 & v31));
      v34 = *v33;
      if (*v33 == v28)
        goto LABEL_36;
    }
LABEL_35:
    v33 = (uint64_t *)(*(_QWORD *)&v29 + 104 * v30);
    goto LABEL_36;
  }
LABEL_58:
  if (v71 == v70)
    v48 = (uint64_t *)((char *)&v72 + 4);
  else
    v48 = &v72;
  v49 = *(unsigned int *)v48;
  if ((_DWORD)v49)
  {
    v50 = 8 * v49;
    v51 = v71;
    while (*(_QWORD *)v51 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v51 += 8;
      v50 -= 8;
      if (!v50)
        goto LABEL_73;
    }
  }
  else
  {
    v51 = v71;
  }
  v52 = &v71[8 * v49];
  if (v51 != v52)
  {
    v53 = *(const llvm::SCEV **)v51;
LABEL_69:
    llvm::ScalarEvolution::forgetMemoizedResultsImpl(a1, v53);
    v54 = (unint64_t *)(v51 + 8);
    while (v54 != (unint64_t *)v52)
    {
      v55 = *v54++;
      v53 = (const llvm::SCEV *)v55;
      if (v55 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v51 = (char *)(v54 - 1);
        goto LABEL_69;
      }
    }
  }
LABEL_73:
  v56 = a1[123];
  v57 = a1[125].u32[0];
  v58 = (_QWORD *)(*(_QWORD *)&v56 + (v57 << 6));
  if (a1[124].i32[0])
  {
    if ((_DWORD)v57)
    {
      v59 = v57 << 6;
      v60 = (_QWORD *)a1[123];
      while (1)
      {
        v61 = v60[1];
        if ((*v60 != -4096 || v61 != -4096) && (*v60 != -8192 || v61 != -8192))
          break;
        v60 += 8;
        v59 -= 64;
        if (!v59)
          goto LABEL_81;
      }
    }
    else
    {
      v60 = (_QWORD *)a1[123];
    }
  }
  else
  {
LABEL_81:
    v60 = (_QWORD *)(*(_QWORD *)&v56 + (v57 << 6));
  }
  if (v60 != (_QWORD *)(*(_QWORD *)&v56 + ((unint64_t)v57 << 6)))
  {
    do
    {
      v62 = v60 + 8;
      if (*v60)
        v63 = *v60 + 32;
      else
        v63 = 0;
      v64 = (char *)sub_1C477672C((uint64_t)&v70, v63);
      if (v71 == v70)
        v65 = (uint64_t *)((char *)&v72 + 4);
      else
        v65 = &v72;
      v66 = v58;
      if (v64 == &v71[8 * *(unsigned int *)v65])
      {
        if (v62 != v58)
        {
          while (1)
          {
            v68 = v62[1];
            if ((*v62 != -4096 || v68 != -4096) && (*v62 != -8192 || v68 != -8192))
              break;
            v62 += 8;
            if (v62 == v58)
            {
              v66 = v58;
              goto LABEL_109;
            }
          }
          v66 = v62;
        }
      }
      else
      {
        if (v62 != v58)
        {
          while (1)
          {
            v67 = v62[1];
            if ((*v62 != -4096 || v67 != -4096) && (*v62 != -8192 || v67 != -8192))
              break;
            v62 += 8;
            if (v62 == v58)
            {
              v66 = v58;
              goto LABEL_106;
            }
          }
          v66 = v62;
        }
LABEL_106:
        v69 = (_QWORD *)v60[3];
        if (v69 != v60 + 5)
          free(v69);
        *v60 = -8192;
        v60[1] = -8192;
        a1[124] = vadd_s32(a1[124], (int32x2_t)0x1FFFFFFFFLL);
      }
LABEL_109:
      v60 = v66;
    }
    while (v66 != (_QWORD *)(*(_QWORD *)&a1[123] + ((unint64_t)a1[125].u32[0] << 6)));
  }
  if (v75 != v77)
    free(v75);
  if (v71 != v70)
    free(v71);
}

uint64_t ****llvm::SCEVUnknown::allUsesReplacedWith(llvm::SCEVUnknown *this, llvm::Value *a2)
{
  int32x2_t *v4;
  uint64_t ****result;
  llvm::Value *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v4 = (int32x2_t *)*((_QWORD *)this + 8);
  v19 = (uint64_t)this + 32;
  llvm::ScalarEvolution::forgetMemoizedResults(v4, &v19, 1);
  result = (uint64_t ****)llvm::FoldingSetBase::RemoveNode(*((_QWORD *)this + 8) + 832, (_QWORD *)this + 4);
  v6 = (llvm::Value *)*((_QWORD *)this + 3);
  if (v6 != a2)
  {
    if (v6 && v6 != (llvm::Value *)-8192 && v6 != (llvm::Value *)-4096)
    {
      v7 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v7 = *((_QWORD *)this + 2);
      v8 = (unint64_t *)*((_QWORD *)this + 2);
      if (v8)
      {
        *v8 = *v8 & 7 | v7;
      }
      else
      {
        v9 = *((_QWORD *)this + 3);
        v10 = ***(int32x2_t ****)v9;
        v11 = (unint64_t)v10[303];
        if (v11 <= v7)
        {
          v12 = v10[305].u32[0];
          if (v11 + 16 * v12 > v7)
          {
            v13 = v12 - 1;
            LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
            v15 = (uint64_t *)(v11 + 16 * v14);
            v16 = *v15;
            if (v9 == *v15)
            {
LABEL_18:
              *v15 = -8192;
              v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
              v9 = *((_QWORD *)this + 3);
            }
            else
            {
              v17 = 1;
              while (v16 != -4096)
              {
                v18 = v14 + v17++;
                v14 = v18 & v13;
                v16 = *(_QWORD *)(v11 + 16 * v14);
                if (v9 == v16)
                {
                  v15 = (uint64_t *)(v11 + 16 * v14);
                  goto LABEL_18;
                }
              }
            }
            *(_BYTE *)(v9 + 17) &= ~1u;
          }
        }
      }
    }
    *((_QWORD *)this + 3) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096)
    {
      if (a2)
        return llvm::ValueHandleBase::AddToUseList((llvm::SCEVUnknown *)((char *)this + 8));
    }
  }
  return result;
}

uint64_t llvm::SCEVAddRecExpr::evaluateAtIteration(llvm::SCEVAddRecExpr *this, const llvm::SCEV *a2, llvm::ScalarEvolution *a3)
{
  return llvm::SCEVAddRecExpr::evaluateAtIteration(*((_QWORD *)this + 4), *((_QWORD *)this + 5));
}

uint64_t llvm::SCEVAddRecExpr::evaluateAtIteration(uint64_t a1, int a2)
{
  if (a2 != 1)
    __asm { BR              X10 }
  return *(_QWORD *)a1;
}

void llvm::ScalarEvolution::getLosslessPtrToIntExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  __asm { BR              X11 }
}

void sub_1C4F05A78()
{
  JUMPOUT(0x1C4F05A64);
}

void sub_1C4F05A84()
{
  JUMPOUT(0x1C4F05A7CLL);
}

uint64_t sub_1C4F05A8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__s1, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  BOOL v68;
  unint64_t v70;
  _BYTE v71[12];
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;

  if (*(_BYTE *)(**(_QWORD **)(v60 + 32) + 8) != 15)
    return v62;
  *(_DWORD *)v71 = 13;
  *(_QWORD *)&v71[4] = v62;
  v63 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v70 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v70 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v70;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v64 = __ROR8__(*(_QWORD *)&v71[4] + 12, 12);
  v65 = 0x9DDFEA08EB382D69 * (*(_QWORD *)v71 ^ qword_1ED7EAC80 ^ v64);
  v66 = *(_QWORD *)(*(_QWORD *)(v61 + 832)
                  + 8
                  * ((*(_DWORD *)(v61 + 840) - 1) & ((-348639895
                                                    * ((((0x9DDFEA08EB382D69 * (v64 ^ (v65 >> 47) ^ v65)) >> 32) >> 15) ^ (-348639895 * (v64 ^ (v65 >> 47) ^ v65)))) ^ *(_DWORD *)&v71[4])));
  v72 = &v74;
  v73 = 0x2000000000;
  if (v66)
    v67 = (v66 & 1) == 0;
  else
    v67 = 0;
  if (!v67)
LABEL_14:
    __asm { BR              X11 }
  while (*(_QWORD *)(v66 + 16) != 3 || memcmp(v71, *(const void **)(v66 + 8), 0xCuLL))
  {
    LODWORD(v73) = 0;
    v66 = *(_QWORD *)v66;
    if (v66)
      v68 = (v66 & 1) == 0;
    else
      v68 = 0;
    if (!v68)
      goto LABEL_14;
  }
  return v66;
}

_QWORD *llvm::ScalarEvolution::registerUser(_QWORD *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v38;

  if (a4)
  {
    v4 = a3;
    v6 = result;
    v7 = &a3[a4];
    v8 = result + 95;
    while (1)
    {
      v9 = *v4;
      if (*(_WORD *)(*v4 + 24))
        break;
LABEL_24:
      if (++v4 == v7)
        return result;
    }
    v10 = *((_DWORD *)v6 + 194);
    v11 = v9 >> 4;
    if (v10)
    {
      v12 = v6[95];
      v13 = v10 - 1;
      v14 = (v10 - 1) & (v11 ^ (v9 >> 9));
      v15 = (uint64_t *)(v12 + 104 * v14);
      v16 = *v15;
      if (v9 == *v15)
      {
LABEL_23:
        result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v15 + 1), a2);
        goto LABEL_24;
      }
      v17 = 0;
      v18 = 1;
      while (v16 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -8192;
        if (v19)
          v17 = v15;
        v20 = v14 + v18++;
        v14 = v20 & v13;
        v15 = (uint64_t *)(v12 + 104 * (v20 & v13));
        v16 = *v15;
        if (v9 == *v15)
          goto LABEL_23;
      }
      if (v17)
        v15 = v17;
    }
    else
    {
      v15 = 0;
    }
    v21 = *((_DWORD *)v6 + 192);
    if (4 * v21 + 4 >= 3 * v10)
    {
      sub_1C4F5F4A4(v8, 2 * v10);
      v23 = v6[95];
      v24 = *((_DWORD *)v6 + 194) - 1;
      v25 = v24 & (v11 ^ (v9 >> 9));
      v15 = (uint64_t *)(v23 + 104 * v25);
      v26 = *v15;
      if (v9 == *v15)
      {
LABEL_35:
        v22 = v9;
        goto LABEL_20;
      }
      v27 = 0;
      v28 = 1;
      while (v26 != -4096)
      {
        if (v27)
          v29 = 0;
        else
          v29 = v26 == -8192;
        if (v29)
          v27 = v15;
        v30 = v25 + v28++;
        v25 = v30 & v24;
        v15 = (uint64_t *)(v23 + 104 * (v30 & v24));
        v26 = *v15;
        if (v9 == *v15)
          goto LABEL_35;
      }
    }
    else
    {
      if (v10 + ~v21 - *((_DWORD *)v6 + 193) > v10 >> 3)
        goto LABEL_19;
      sub_1C4F5F4A4(v8, v10);
      v31 = *((_DWORD *)v6 + 194);
      if (!v31)
      {
        v15 = 0;
        goto LABEL_19;
      }
      v32 = v6[95];
      v33 = v31 - 1;
      v34 = (v31 - 1) & (v11 ^ (v9 >> 9));
      v15 = (uint64_t *)(v32 + 104 * v34);
      v35 = *v15;
      if (*v15 == v9)
      {
LABEL_19:
        v22 = *v15;
LABEL_20:
        ++*((_DWORD *)v6 + 192);
        if (v22 != -4096)
          --*((_DWORD *)v6 + 193);
        *v15 = v9;
        v15[1] = (uint64_t)(v15 + 5);
        v15[2] = (uint64_t)(v15 + 5);
        v15[3] = 8;
        *((_DWORD *)v15 + 8) = 0;
        goto LABEL_23;
      }
      v27 = 0;
      v36 = 1;
      while (v35 != -4096)
      {
        if (v27)
          v37 = 0;
        else
          v37 = v35 == -8192;
        if (v37)
          v27 = v15;
        v38 = v34 + v36++;
        v34 = v38 & v33;
        v15 = (uint64_t *)(v32 + 104 * (v38 & v33));
        v35 = *v15;
        if (*v15 == v9)
          goto LABEL_19;
      }
    }
    if (v27)
      v15 = v27;
    goto LABEL_19;
  }
  return result;
}

void llvm::ScalarEvolution::getPtrToIntExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3)
{
  uint64_t v4;

  llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, a2);
  if (*(_WORD *)(v4 + 24) != 15)
    llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)this, v4);
}

void llvm::ScalarEvolution::getTruncateOrZeroExtend(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

unint64_t sub_1C4F06290()
{
  uint64_t v0;
  uint64_t v1;
  llvm::Type *v2;
  const llvm::SCEV *v3;
  llvm::ScalarEvolution *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t IndexTypeSizeInBits;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v5 = *(uint64_t **)(v0 + 32);
  v6 = *v5;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  v8 = *v5;
  if (*(_BYTE *)(*v5 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v7, v8);
  }
  else
  {
    sub_1C4768AD0(v7, v8);
    IndexTypeSizeInBits = v10;
    if ((_DWORD)v9 == 1)
  }
  v12 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  if (*((_BYTE *)v2 + 8) == 15)
  {
    v13 = llvm::DataLayout::getIndexTypeSizeInBits(v12, (uint64_t)v2);
  }
  else
  {
    sub_1C4768AD0(v12, (uint64_t)v2);
    if ((_DWORD)v14 == 1)
    {
      v24 = v13;
      v13 = v24;
    }
  }
  if (IndexTypeSizeInBits == v13)
    return (unint64_t)v3;
  v16 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  if (*(_BYTE *)(v6 + 8) == 15)
  {
    v19 = llvm::DataLayout::getIndexTypeSizeInBits(v16, v6);
  }
  else
  {
    sub_1C4768AD0(v16, v6);
    v19 = v18;
    if ((_DWORD)v17 == 1)
  }
  v20 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  if (*((_BYTE *)v2 + 8) == 15)
  {
    v23 = llvm::DataLayout::getIndexTypeSizeInBits(v20, (uint64_t)v2);
  }
  else
  {
    sub_1C4768AD0(v20, (uint64_t)v2);
    v23 = v22;
    if ((_DWORD)v21 == 1)
  }
  if (v19 <= v23)
    return llvm::ScalarEvolution::getZeroExtendExpr(v4, v3, v2, v1);
  else
    return llvm::ScalarEvolution::getTruncateExpr(v4, v3, v2, v1);
}

unint64_t llvm::ScalarEvolution::getTruncateExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3, unsigned int a4)
{
  llvm::Type *v4;
  llvm::Type *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t AddRecExpr;
  BOOL v14;
  BOOL v15;
  llvm::SCEV *v16;
  int v17;
  BOOL v18;
  unint64_t TruncateExpr;
  llvm::UndefValue *v20;
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;
  BOOL v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t AddExpr;
  _BOOL4 v57;
  BOOL v58;
  BOOL v59;
  uint64_t v60;
  const llvm::SCEV **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t MinTrailingZeros;
  uint64_t v66;
  const char *v67;
  unint64_t v68;
  unint64_t IndexTypeSizeInBits;
  unint64_t v70;
  int *v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  llvm::SCEV *v79;
  void *__s1;
  uint64_t v81;
  _BYTE v82[120];
  void *v83;
  uint64_t v84;
  _QWORD v85[16];
  llvm::SCEV *v86;
  uint64_t v87;
  _QWORD v88[18];

  v4 = a3;
  v88[16] = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*((_BYTE *)a3 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), a3);
    v4 = v7;
  }
  __s1 = v82;
  *(_DWORD *)v82 = 1;
  *(_QWORD *)&v82[4] = a2;
  *(_QWORD *)&v82[12] = v4;
  v81 = 0x2000000005;
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v76 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v76 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v76;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v9 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)v82 - *(_QWORD *)&v82[8], 43)
     - 0x3C5A37A36834CED9 * *(_QWORD *)&v82[4]
     + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)&v82[12]) ^ qword_1ED7EAC80, 30);
  v10 = qword_1ED7EAC80
      + __ROR8__(*(_QWORD *)&v82[8] ^ 0xC949D7C7509E6557, 20)
      - 0x4B6D499041670D8DLL * *(_QWORD *)v82
      - 0x9AE16A3B2F90404FLL * *(_QWORD *)&v82[12]
      + 20;
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v10)));
  v12 = *((_QWORD *)this + 104)
      + 8 * ((-348639895 * ((v11 >> 47) ^ v11)) & (*((_DWORD *)this + 210) - 1));
  AddRecExpr = *(_QWORD *)v12;
  v86 = (llvm::SCEV *)v88;
  v87 = 0x2000000000;
  if (AddRecExpr)
    v14 = (AddRecExpr & 1) == 0;
  else
    v14 = 0;
  if (v14)
  {
    while (*(_QWORD *)(AddRecExpr + 16) != v81
         || memcmp(__s1, *(const void **)(AddRecExpr + 8), 4 * v81))
    {
      LODWORD(v87) = 0;
      AddRecExpr = *(_QWORD *)AddRecExpr;
      if (AddRecExpr)
        v15 = (AddRecExpr & 1) == 0;
      else
        v15 = 0;
      if (!v15)
        goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_15:
  v16 = v79;
  v17 = *((unsigned __int16 *)v79 + 12);
  if (v79)
    v18 = v17 == 0;
  else
    v18 = 0;
  if (!v18)
  {
    if (v79 && v17 == 1)
    {
      TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(this, *((const llvm::SCEV **)v79 + 4), v4, a4 + 1);
LABEL_22:
      AddRecExpr = TruncateExpr;
      goto LABEL_45;
    }
    if (v79 && v17 == 3)
      __asm { BR              X11 }
    if (v17 == 2)
    {
      llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)this, *((_QWORD *)v79 + 4));
      goto LABEL_22;
    }
    if (dword_1ED7F3CF8 < a4)
    {
      AddRecExpr = sub_1C484358C((uint64_t)this + 864, 48, 3);
      v40 = sub_1C484358C((uint64_t)this + 864, 4 * v81, 2);
      v41 = (int *)__s1;
      v42 = 4 * v81;
      v43 = (_DWORD *)v40;
      do
      {
        v44 = *v41++;
        *v43++ = v44;
        v42 -= 4;
      }
      while (v42);
      goto LABEL_56;
    }
    if ((v17 & 0xFFFE) != 4)
    {
LABEL_96:
      if (v17 != 7)
      {
        MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros(this, v16);
        v66 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*((_BYTE *)v4 + 8) == 15)
        {
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v66, (uint64_t)v4);
        }
        else
        {
          sub_1C4768AD0(v66, (uint64_t)v4);
          IndexTypeSizeInBits = v68;
          if ((_DWORD)v67 == 1)
        }
        if (IndexTypeSizeInBits <= MinTrailingZeros)
        {
          TruncateExpr = llvm::ScalarEvolution::getConstant(this, v4, 0, 0);
          goto LABEL_22;
        }
        AddRecExpr = sub_1C484358C((uint64_t)this + 864, 48, 3);
        v70 = sub_1C484358C((uint64_t)this + 864, 4 * v81, 2);
        v40 = v70;
        if (!(_DWORD)v81)
        {
          v45 = 0;
          goto LABEL_57;
        }
        v71 = (int *)__s1;
        v72 = 4 * v81;
        v73 = (_DWORD *)v70;
        do
        {
          v74 = *v71++;
          *v73++ = v74;
          v72 -= 4;
        }
        while (v72);
LABEL_56:
        v45 = v81;
LABEL_57:
        v86 = v79;
        v46 = sub_1C4F03F00((uint64_t)&v86, 1);
        *(_QWORD *)AddRecExpr = 0;
        *(_QWORD *)(AddRecExpr + 8) = v40;
        *(_QWORD *)(AddRecExpr + 16) = v45;
        *(_WORD *)(AddRecExpr + 24) = 1;
        *(_WORD *)(AddRecExpr + 26) = v46;
        *(_WORD *)(AddRecExpr + 28) = 0;
        *(_QWORD *)(AddRecExpr + 32) = v86;
        *(_QWORD *)(AddRecExpr + 40) = v4;
        v47 = *((_DWORD *)this + 211) + 1;
        v48 = *((_DWORD *)this + 210);
        if (v47 > 2 * v48)
        {
          llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v48, (uint64_t)off_1E813B300);
          v86 = (llvm::SCEV *)v88;
          v87 = 0x2000000000;
          v12 = *((_QWORD *)this + 104)
              + 8
              * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(AddRecExpr + 8), *(_QWORD *)(AddRecExpr + 8)+ 4 * *(_QWORD *)(AddRecExpr + 16)));
          if (v86 != (llvm::SCEV *)v88)
            free(v86);
          v47 = *((_DWORD *)this + 211) + 1;
        }
        *((_DWORD *)this + 211) = v47;
        v49 = *(_QWORD *)v12;
        if (!*(_QWORD *)v12)
          v49 = v12 | 1;
        *(_QWORD *)AddRecExpr = v49;
        *(_QWORD *)v12 = AddRecExpr;
        llvm::ScalarEvolution::registerUser(this, AddRecExpr, (uint64_t *)&v79, 1);
        goto LABEL_45;
      }
      v86 = (llvm::SCEV *)v88;
      v87 = 0x400000000;
      v60 = *((_QWORD *)v16 + 5);
      if (v60)
      {
        v61 = (const llvm::SCEV **)*((_QWORD *)v16 + 4);
        v62 = 8 * v60;
        do
        {
          v63 = llvm::ScalarEvolution::getTruncateExpr(this, *v61, v4, a4 + 1);
          v64 = v87;
          if (v87 >= (unint64_t)HIDWORD(v87))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v87 + 1, 8);
            v64 = v87;
          }
          *((_QWORD *)v86 + v64) = v63;
          LODWORD(v87) = v87 + 1;
          ++v61;
          v62 -= 8;
        }
        while (v62);
      }
      AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, (uint64_t **)&v86, *((uint64_t ***)v16 + 6));
      v75 = (uint64_t *)v86;
      if (v86 != (llvm::SCEV *)v88)
      {
LABEL_112:
        free(v75);
        goto LABEL_45;
      }
      goto LABEL_45;
    }
    v83 = v85;
    v84 = 0x400000000;
    if (*((_DWORD *)v79 + 10))
    {
      v50 = 0;
      v51 = 0;
      v52 = 8 * *((unsigned int *)v79 + 10) - 8;
      do
      {
        v53 = llvm::ScalarEvolution::getTruncateExpr(this, *(const llvm::SCEV **)(*((_QWORD *)v16 + 4) + v50), v4, a4 + 1);
        if (*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + v50) + 24) - 1 >= 3
          && *(_WORD *)(v53 + 24) == 1)
        {
          ++v51;
        }
        v54 = v84;
        if (v84 >= (unint64_t)HIDWORD(v84))
        {
          v55 = v53;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 8);
          v53 = v55;
          v54 = v84;
        }
        *((_QWORD *)v83 + v54) = v53;
        LODWORD(v84) = v84 + 1;
        if (v52 == v50)
          break;
        v50 += 8;
      }
      while (v51 < 2);
      if (v51 > 1)
      {
        v12 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(__s1, (uint64_t)__s1 + 4 * v81));
        AddRecExpr = *(_QWORD *)v12;
        v86 = (llvm::SCEV *)v88;
        v87 = 0x2000000000;
        if (AddRecExpr)
          v58 = (AddRecExpr & 1) == 0;
        else
          v58 = 0;
        if (v58)
        {
          while (*(_QWORD *)(AddRecExpr + 16) != v81
               || memcmp(__s1, *(const void **)(AddRecExpr + 8), 4 * v81))
          {
            LODWORD(v87) = 0;
            AddRecExpr = *(_QWORD *)AddRecExpr;
            if (AddRecExpr)
              v59 = (AddRecExpr & 1) == 0;
            else
              v59 = 0;
            if (!v59)
            {
              AddRecExpr = 0;
              goto LABEL_91;
            }
          }
          v12 = 0;
        }
        else
        {
          AddRecExpr = 0;
        }
LABEL_91:
        v57 = AddRecExpr != 0;
        goto LABEL_92;
      }
      v17 = *((unsigned __int16 *)v79 + 12);
    }
    if (v17 == 4)
      AddExpr = llvm::ScalarEvolution::getAddExpr(this, &v83, 0, 0);
    else
      AddExpr = llvm::ScalarEvolution::getMulExpr(this, &v83, 0, 0);
    AddRecExpr = AddExpr;
    v57 = 1;
LABEL_92:
    if (v83 != v85)
      free(v83);
    if (v57)
      goto LABEL_45;
    v16 = v79;
    v17 = *((unsigned __int16 *)v79 + 12);
    goto LABEL_96;
  }
  v20 = sub_1C537D3B8((llvm *)0x26, *((_QWORD *)v79 + 4), v4, 0);
  v83 = v85;
  LODWORD(v85[0]) = 0;
  *(_QWORD *)((char *)v85 + 4) = v20;
  v84 = 0x2000000003;
  v21 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v77 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v77 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v77;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v22 = __ROR8__(*(_QWORD *)((char *)v85 + 4) + 12, 12);
  v23 = 0x9DDFEA08EB382D69 * (v85[0] ^ qword_1ED7EAC80 ^ v22);
  v24 = *((_QWORD *)this + 104)
      + 8
      * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                         * ((((0x9DDFEA08EB382D69 * (v22 ^ (v23 >> 47) ^ v23)) >> 32) >> 15) ^ (-348639895 * (v22 ^ (v23 >> 47) ^ v23)))) ^ HIDWORD(v85[0])));
  AddRecExpr = *(_QWORD *)v24;
  v86 = (llvm::SCEV *)v88;
  v87 = 0x2000000000;
  if (AddRecExpr)
    v25 = (AddRecExpr & 1) == 0;
  else
    v25 = 0;
  if (v25)
  {
    v26 = v84;
    v27 = v83;
    v28 = 4 * v84;
    while (*(_QWORD *)(AddRecExpr + 16) != v26 || memcmp(v27, *(const void **)(AddRecExpr + 8), v28))
    {
      LODWORD(v87) = 0;
      AddRecExpr = *(_QWORD *)AddRecExpr;
      if (AddRecExpr)
        v29 = (AddRecExpr & 1) == 0;
      else
        v29 = 0;
      if (!v29)
        goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    AddRecExpr = sub_1C484358C((uint64_t)this + 864, 40, 3);
    v30 = sub_1C484358C((uint64_t)this + 864, 4 * v84, 2);
    if ((_DWORD)v84)
    {
      v31 = (int *)v83;
      v32 = 4 * v84;
      v33 = (_DWORD *)v30;
      do
      {
        v34 = *v31++;
        *v33++ = v34;
        v32 -= 4;
      }
      while (v32);
      v35 = v84;
    }
    else
    {
      v35 = 0;
    }
    *(_QWORD *)AddRecExpr = 0;
    *(_QWORD *)(AddRecExpr + 8) = v30;
    *(_QWORD *)(AddRecExpr + 16) = v35;
    *(_DWORD *)(AddRecExpr + 24) = 0x10000;
    *(_WORD *)(AddRecExpr + 28) = 0;
    *(_QWORD *)(AddRecExpr + 32) = v20;
    v36 = *((_DWORD *)this + 211) + 1;
    v37 = *((_DWORD *)this + 210);
    if (v36 > 2 * v37)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v37, (uint64_t)off_1E813B300);
      v86 = (llvm::SCEV *)v88;
      v87 = 0x2000000000;
      v24 = *((_QWORD *)this + 104)
          + 8
          * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(AddRecExpr + 8), *(_QWORD *)(AddRecExpr + 8)+ 4 * *(_QWORD *)(AddRecExpr + 16)));
      if (v86 != (llvm::SCEV *)v88)
        free(v86);
      v36 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v36;
    v38 = *(_QWORD *)v24;
    if (!*(_QWORD *)v24)
      v38 = v24 | 1;
    *(_QWORD *)AddRecExpr = v38;
    *(_QWORD *)v24 = AddRecExpr;
    v27 = v83;
  }
  if (v27 != v85)
  {
    v75 = v27;
    goto LABEL_112;
  }
LABEL_45:
  if (__s1 != v82)
    free(__s1);
  return AddRecExpr;
}

void llvm::ScalarEvolution::getTruncateOrSignExtend(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1C4F070A4()
{
  uint64_t v0;
  unsigned int v1;
  llvm::Type *v2;
  const llvm::SCEV *v3;
  llvm::ScalarEvolution *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t IndexTypeSizeInBits;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v5 = *(uint64_t **)(v0 + 32);
  v6 = *v5;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  v8 = *v5;
  if (*(_BYTE *)(*v5 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v7, v8);
  }
  else
  {
    sub_1C4768AD0(v7, v8);
    IndexTypeSizeInBits = v10;
    if ((_DWORD)v9 == 1)
  }
  v12 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  if (*((_BYTE *)v2 + 8) == 15)
  {
    v13 = llvm::DataLayout::getIndexTypeSizeInBits(v12, (uint64_t)v2);
  }
  else
  {
    sub_1C4768AD0(v12, (uint64_t)v2);
    if ((_DWORD)v14 == 1)
    {
      v24 = v13;
      v13 = v24;
    }
  }
  if (IndexTypeSizeInBits == v13)
    return (uint64_t)v3;
  v16 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  if (*(_BYTE *)(v6 + 8) == 15)
  {
    v19 = llvm::DataLayout::getIndexTypeSizeInBits(v16, v6);
  }
  else
  {
    sub_1C4768AD0(v16, v6);
    v19 = v18;
    if ((_DWORD)v17 == 1)
  }
  v20 = *(_QWORD *)(*(_QWORD *)v4 + 40) + 272;
  if (*((_BYTE *)v2 + 8) == 15)
  {
    v23 = llvm::DataLayout::getIndexTypeSizeInBits(v20, (uint64_t)v2);
  }
  else
  {
    sub_1C4768AD0(v20, (uint64_t)v2);
    v23 = v22;
    if ((_DWORD)v21 == 1)
  }
  if (v19 <= v23)
    return llvm::ScalarEvolution::getSignExtendExpr(v4, v3, v2, v1);
  else
    return llvm::ScalarEvolution::getTruncateExpr(v4, v3, v2, v1);
}

uint64_t llvm::ScalarEvolution::getAddExpr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  const llvm::APInt *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  llvm::APInt *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  llvm::ValueHandleBase *v32;
  unsigned __int8 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  _QWORD *v40;
  size_t v41;
  BOOL v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t v71;
  size_t v72;
  BOOL v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  unsigned int v79;
  void *__s1;
  uint64_t v81;
  _QWORD v82[16];
  void *v83;
  uint64_t v84;
  _QWORD v85[18];

  v4 = a2;
  v85[16] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 8) == 1)
    return **(_QWORD **)v4;
  v8 = a1;
  sub_1C4F15698(a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  v10 = *(uint64_t **)v4;
  v11 = **(_QWORD **)v4;
  if (v11)
    v12 = *(unsigned __int16 *)(v11 + 24) == 0;
  else
    v12 = 0;
  v76 = v4;
  v77 = v8;
  if (!v12)
  {
    v13 = *(_DWORD *)(v4 + 8);
    goto LABEL_72;
  }
  v75 = a4;
  v14 = v10[1];
  if (v14)
    v15 = *(unsigned __int16 *)(v14 + 24) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v74 = v8 + 832;
    v19 = v8 + 864;
    do
    {
      v20 = *(_QWORD *)(v11 + 32);
      v21 = *(unsigned int *)(v20 + 32);
      if (v21 >= 0x41)
      {
        v23 = (void *)operator new[]();
        memcpy(v23, *(const void **)(v20 + 24), ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
        v24 = 0;
        v25 = *(uint64_t **)(*(_QWORD *)(v14 + 32) + 24);
        v26 = (unint64_t)(v21 + 63) >> 6;
        v27 = (unint64_t *)v23;
        v28 = v26;
        do
        {
          v29 = *v25++;
          v30 = v29 + *v27;
          v31 = v30 + 1 <= *v27;
          if (v24)
          {
            ++v30;
            v24 = v31;
          }
          else
          {
            v24 = v30 < *v27;
          }
          *v27++ = v30;
          --v28;
        }
        while (v28);
        *((_QWORD *)v23 + (v26 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
      }
      else
      {
        v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
        if (!(_DWORD)v21)
          v22 = 0;
        v23 = (void *)(v22 & (*(_QWORD *)(*(_QWORD *)(v14 + 32) + 24) + *(_QWORD *)(v20 + 24)));
      }
      v79 = v21;
      v78 = v23;
      v32 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)v77, (llvm::LLVMContext *)&v78, v9);
      __s1 = v82;
      LODWORD(v82[0]) = 0;
      *(_QWORD *)((char *)v82 + 4) = v32;
      v81 = 0x2000000003;
      v33 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v56 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v56 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v56;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v34 = __ROR8__(*(_QWORD *)((char *)v82 + 4) + 12, 12);
      v35 = 0x9DDFEA08EB382D69
          * (v34 ^ ((0x9DDFEA08EB382D69 * (v82[0] ^ qword_1ED7EAC80 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                      * (v82[0] ^ qword_1ED7EAC80 ^ v34)));
      v36 = *(_QWORD *)(v77 + 832)
          + 8 * ((*(_DWORD *)(v77 + 840) - 1) & ((-348639895 * ((v35 >> 47) ^ v35)) ^ HIDWORD(v82[0])));
      v37 = *(_QWORD *)v36;
      v83 = v85;
      v84 = 0x2000000000;
      if (v37 && (v37 & 1) == 0)
      {
        v39 = v81;
        v40 = __s1;
        v41 = 4 * v81;
        while (*(_QWORD *)(v37 + 16) != v39 || memcmp(v40, *(const void **)(v37 + 8), v41))
        {
          LODWORD(v84) = 0;
          v37 = *(_QWORD *)v37;
          if (v37)
            v42 = (v37 & 1) == 0;
          else
            v42 = 0;
          if (!v42)
            goto LABEL_39;
        }
        v4 = v76;
        v8 = v77;
      }
      else
      {
LABEL_39:
        v37 = sub_1C484358C(v19, 40, 3);
        v43 = sub_1C484358C(v19, 4 * v81, 2);
        if ((_DWORD)v81)
        {
          v44 = (int *)__s1;
          v45 = 4 * v81;
          v46 = (_DWORD *)v43;
          do
          {
            v47 = *v44++;
            *v46++ = v47;
            v45 -= 4;
          }
          while (v45);
          v48 = v81;
        }
        else
        {
          v48 = 0;
        }
        v8 = v77;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v37 + 8) = v43;
        *(_QWORD *)(v37 + 16) = v48;
        *(_DWORD *)(v37 + 24) = 0x10000;
        *(_WORD *)(v37 + 28) = 0;
        *(_QWORD *)(v37 + 32) = v32;
        v49 = *(_DWORD *)(v77 + 844) + 1;
        v50 = *(_DWORD *)(v77 + 840);
        if (v49 > 2 * v50)
        {
          llvm::FoldingSetBase::GrowBucketCount(v74, 2 * v50, (uint64_t)off_1E813B300);
          v83 = v85;
          v84 = 0x2000000000;
          v53 = sub_1C4F5AB38(*(_QWORD **)(v37 + 8), *(_QWORD *)(v37 + 8) + 4 * *(_QWORD *)(v37 + 16));
          v54 = *(_QWORD *)(v77 + 832);
          v55 = *(_DWORD *)(v77 + 840);
          v4 = v76;
          if (v83 != v85)
            free(v83);
          v36 = v54 + 8 * ((v55 - 1) & v53);
          v49 = *(_DWORD *)(v77 + 844) + 1;
          v8 = v77;
        }
        else
        {
          v4 = v76;
        }
        *(_DWORD *)(v8 + 844) = v49;
        v51 = *(_QWORD *)v36;
        if (!*(_QWORD *)v36)
          v51 = v36 | 1;
        *(_QWORD *)v37 = v51;
        *(_QWORD *)v36 = v37;
        v40 = __s1;
      }
      if (v40 != v82)
        free(v40);
      **(_QWORD **)v4 = v37;
      if (v79 >= 0x41 && v78)
        MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
      v52 = *(unsigned int *)(v4 + 8);
      if ((_DWORD)v52 == 2)
        return **(_QWORD **)v4;
      memmove((void *)(*(_QWORD *)v4 + 8), (const void *)(*(_QWORD *)v4 + 16), 8 * v52 - 16);
      --*(_DWORD *)(v4 + 8);
      v10 = *(uint64_t **)v4;
      v11 = **(_QWORD **)v4;
      v14 = *(_QWORD *)(*(_QWORD *)v4 + 8);
    }
    while (v14 && !*(_WORD *)(v14 + 24));
  }
  v16 = *(_QWORD *)(v11 + 32);
  v17 = (llvm::APInt *)(v16 + 24);
  v18 = *(_DWORD *)(v16 + 32);
  if (v18 > 0x40)
  {
    a3 = a3;
    a4 = v75;
    if (llvm::APInt::countLeadingZerosSlowCase(v17) != v18)
      goto LABEL_14;
  }
  else
  {
    a3 = a3;
    a4 = v75;
    if (*(_QWORD *)v17)
    {
LABEL_14:
      v13 = *(_DWORD *)(v4 + 8);
      goto LABEL_70;
    }
  }
  v57 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v57 != 1)
  {
    memmove(v10, v10 + 1, 8 * v57 - 8);
    LODWORD(v57) = *(_DWORD *)(v4 + 8);
    v10 = *(uint64_t **)v4;
  }
  v13 = v57 - 1;
  *(_DWORD *)(v4 + 8) = v13;
LABEL_70:
  if (v13 == 1)
    return *v10;
LABEL_72:
  v58 = v13;
  if (dword_1ED7F3B78 < a4)
  {
LABEL_73:
    v59 = sub_1C4F17BCC((llvm::ScalarEvolution *)v8, 4, v10, v13, a3);
    return llvm::ScalarEvolution::getOrCreateAddExpr(v8, v10, v58, v59);
  }
  if (v13)
  {
    v61 = 8 * v13;
    v62 = v61;
    v63 = v10;
    do
    {
      if (dword_1ED7F3E78 <= *(unsigned __int16 *)(*v63 + 26))
        goto LABEL_73;
      ++v63;
      v62 -= 8;
    }
    while (v62);
    v64 = a3;
    __s1 = v82;
    LODWORD(v82[0]) = 4;
    v81 = 0x2000000001;
    v65 = 1;
    do
    {
      v66 = *v10;
      if (v65 >= HIDWORD(v81))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v82, v65 + 1, 4);
        v65 = v81;
      }
      *((_DWORD *)__s1 + v65) = v66;
      v67 = (v81 + 1);
      LODWORD(v81) = v67;
      if (v67 >= HIDWORD(v81))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v82, v67 + 1, 4);
        LODWORD(v67) = v81;
      }
      *((_DWORD *)__s1 + v67) = HIDWORD(v66);
      v65 = v81 + 1;
      LODWORD(v81) = v81 + 1;
      ++v10;
      v61 -= 8;
    }
    while (v61);
    v68 = __s1;
    a3 = v64;
  }
  else
  {
    v68 = v82;
    __s1 = v82;
    LODWORD(v82[0]) = 4;
    v81 = 0x2000000001;
    v65 = 1;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v8 + 832)
                 + 8 * ((*(_DWORD *)(v8 + 840) - 1) & sub_1C4F5AB38(v68, (uint64_t)v68 + 4 * v65)));
  v83 = v85;
  v84 = 0x2000000000;
  v69 = __s1;
  if (v5)
    v70 = (v5 & 1) == 0;
  else
    v70 = 0;
  if (v70)
  {
    v71 = v81;
    v72 = 4 * v81;
    while (*(_QWORD *)(v5 + 16) != v71 || memcmp(v69, *(const void **)(v5 + 8), v72))
    {
      LODWORD(v84) = 0;
      v5 = *(_QWORD *)v5;
      if (v5)
        v73 = (v5 & 1) == 0;
      else
        v73 = 0;
      if (!v73)
        goto LABEL_99;
    }
  }
  else
  {
LABEL_99:
    v5 = 0;
  }
  if (v69 == v82)
  {
    if (v5)
      goto LABEL_102;
LABEL_105:
    __asm { BR              X12 }
  }
  free(v69);
  if (!v5)
    goto LABEL_105;
LABEL_102:
  if ((a3 & ~*(unsigned __int16 *)(v5 + 28)) != 0)
    *(_WORD *)(v5 + 28) |= sub_1C4F17BCC((llvm::ScalarEvolution *)v8, 4, *(uint64_t **)v4, *(unsigned int *)(v4 + 8), a3);
  return v5;
}

void sub_1C4F07A60()
{
  JUMPOUT(0x1C4F07A48);
}

void sub_1C4F07A68()
{
  JUMPOUT(0x1C4F07A48);
}

uint64_t sub_1C4F07A70(void *a1, int a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm::Type *a13, uint64_t *a14, uint64_t a15, _DWORD *a16, llvm::ScalarEvolution *a17, _QWORD *a18, uint64_t a19, char *a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,const llvm::SCEV *__src,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,llvm::SCEV *a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  int v48;
  llvm::ScalarEvolution *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  llvm::Type *v53;
  unint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unint64_t Constant;
  uint64_t v65;
  uint64_t MulExpr;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  BOOL v82;
  _DWORD *v83;
  uint64_t v84;
  BOOL v85;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  llvm::SCEV **v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  BOOL v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  unsigned int v104;
  unsigned int IndexTypeSizeInBits;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  const llvm::APInt *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  const llvm::SCEV *v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  unsigned int v133;
  void *v134;
  uint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  size_t v142;
  const llvm::SCEV *v143;
  unint64_t v144;
  unint64_t v145;
  const llvm::SCEV *v146;
  __int16 v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  _BOOL8 v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _BOOL4 v155;
  _BOOL4 v156;
  __int16 v157;
  unint64_t v158;
  unint64_t v159;
  char v160;
  uint64_t v161;
  unsigned int v162;
  const llvm::SCEV **p_src;
  unint64_t v164;
  uint64_t **v165;
  int v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  const void *v170;
  BOOL v171;
  BOOL v172;
  _QWORD *v173;
  int v174;
  int64_t v175;
  unint64_t v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  _QWORD *v183;
  int v184;
  BOOL v185;
  char v186;
  unint64_t v187;
  const void *v188;
  int v189;
  int v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  unsigned int v194;
  _QWORD **v195;
  unsigned int v196;
  _QWORD *v197;
  uint64_t AddExpr;
  unsigned int v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  char v206;
  llvm::ScalarEvolution *v207;
  const llvm::SCEV *v208;
  const llvm::SCEV *UDivExpr;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  unsigned int v215;
  int v216;
  const llvm::SCEV *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  int v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  unsigned int v238;
  _QWORD *v239;
  const llvm::BasicBlock ***v240;
  llvm::ScalarEvolution *v241;
  const llvm::SCEV *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  const void *v253;
  uint64_t v254;
  uint64_t *v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  unint64_t v259;
  const void *v260;
  uint64_t v261;
  uint64_t *v262;
  char v263;
  int v264;
  const llvm::Instruction *DefiningScopeBound;
  uint64_t v266;
  const llvm::Instruction *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t AddRecExpr;
  int v271;
  _QWORD *v272;
  int v273;
  _QWORD *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const void *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t *v299;
  _QWORD *v300;
  int v301;
  unint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unsigned int v313;
  char *v314;
  uint64_t v315;
  char *v316;
  _QWORD *v317;
  uint64_t v318;
  const llvm::SCEV *v319;
  _QWORD *v320;
  unsigned int v321;
  uint64_t v322;
  char *v323;
  char *v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  int v332;
  unint64_t v333;
  unsigned int v334;
  uint64_t v335;
  int64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  llvm::Type *v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int v350;
  unint64_t v351;

  LODWORD(a15) = v51;
  v53 = **(llvm::Type ***)(v47 + 32);
  LODWORD(v54) = *(_DWORD *)(v52 + 8);
  v347 = v53;
  if ((_DWORD)v54 == 1)
  {
    LODWORD(v54) = 1;
    goto LABEL_26;
  }
  v55 = 0;
  v56 = 0;
  v57 = (v48 + 1);
  v58 = &a45;
  v59 = *(_DWORD *)(v52 + 8);
LABEL_4:
  v60 = *(_QWORD *)(v46 + 8 * v56);
  do
  {
    if (v60 == *(_QWORD *)(v46 + 8 * (v56 + 1)))
    {
      if (v56 + 2 == v59)
      {
        v61 = 2;
      }
      else
      {
        v62 = 0;
        v61 = v59 - v56;
        while (*(_QWORD *)(v46 + 8 * (v56 + v62 + 2)) == v60)
        {
          ++v62;
          if (v56 - v59 + v62 == -2)
            goto LABEL_16;
        }
        v61 = v62 + 2;
      }
LABEL_16:
      v63 = v61;
      Constant = llvm::ScalarEvolution::getConstant(v49, v53, v61, 0);
      v65 = *(_QWORD *)(*(_QWORD *)a16 + 8 * v56);
      a43 = (llvm::SCEV *)v58;
      a45 = Constant;
      a46 = v65;
      a44 = 0x200000002;
      MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)v49, (uint64_t)&a43, 0, v57);
      a1 = a43;
      if (a43 != (llvm::SCEV *)v58)
        free(a43);
      v67 = a16[2];
      if ((_DWORD)v67 == (_DWORD)v63)
        goto LABEL_458;
      a14 = v58;
      v68 = v57;
      *(_QWORD *)(*(_QWORD *)a16 + 8 * v56) = MulExpr;
      v46 = *(_QWORD *)a16;
      v69 = *(_QWORD *)a16 + 8 * v56;
      v70 = v69 + 8;
      v71 = (const void *)(v69 + 8 * v63);
      v72 = *(_QWORD *)a16 + 8 * v67;
      v73 = v72 - (_QWORD)v71;
      if ((const void *)v72 != v71)
      {
        a1 = memmove((void *)(v69 + 8), v71, v72 - (_QWORD)v71);
        v46 = *(_QWORD *)a16;
      }
      v54 = (unint64_t)(v70 + v73 - v46) >> 3;
      a16[2] = v54;
      v74 = v59 - v63;
      v59 = v59 - v63 + 1;
      v55 = 1;
      v57 = v68;
      v53 = v347;
      v58 = a14;
      if (v56 == v74)
      {
LABEL_24:
        v75 = (uint64_t)v49;
        v76 = (uint64_t)a16;
        v77 = a15;
        v78 = v57;
        goto LABEL_25;
      }
      goto LABEL_4;
    }
    v60 = *(_QWORD *)(v46 + 8 * (v56 + 1));
    v81 = v56++ == v59 - 2;
  }
  while (!v81);
  if ((v55 & 1) != 0)
    goto LABEL_24;
LABEL_26:
  v79 = *(_QWORD *)(v46 + 8 * v50);
  v80 = *(unsigned __int16 *)(v79 + 24);
  if (v79)
    v81 = v80 == 1;
  else
    v81 = 0;
  if (v81)
    return ((uint64_t (*)(void *, llvm::Type *, const llvm::APInt *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, llvm::Type *, uint64_t *, uint64_t, _DWORD *, llvm::ScalarEvolution *, _QWORD *, uint64_t, char *, uint64_t *, uint64_t, uint64_t, uint64_t, const llvm::SCEV *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1C4F07CC8 + 4 * word_1C85F4F46[*(unsigned __int16 *)(*(_QWORD *)(v79 + 32) + 24)]))(a1, v53, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v347, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             __src,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38);
  if (v79)
    v82 = v80 == 5;
  else
    v82 = 0;
  v83 = a16;
  if (!v82
    || ((v84 = *(_QWORD *)(*(_QWORD *)(v79 + 32) + 8 * (*(_DWORD *)(v79 + 40) - 1))) != 0
      ? (v85 = *(unsigned __int16 *)(v84 + 24) == 1)
      : (v85 = 0),
        !v85))
  {
    if ((_DWORD)v54 != 2)
    {
      LODWORD(v95) = v54;
      goto LABEL_61;
    }
    v87 = *(uint64_t **)a16;
    v88 = **(_QWORD **)a16;
    if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a16 + 8) + 24) == 4)
      v89 = *(_QWORD *)(*(_QWORD *)a16 + 8);
    else
      v89 = 0;
    v90 = *(unsigned __int16 *)(v88 + 24);
    if (*(_WORD *)(v88 + 24))
      v91 = 0;
    else
      v91 = **(_QWORD **)a16;
    if (v89)
      v92 = v91 == 0;
    else
      v92 = 1;
    if (v92 || (v93 = **(_QWORD **)(v89 + 32), *(_WORD *)(v93 + 24)))
    {
LABEL_54:
      if (v90 == 5 && *(_QWORD *)(v88 + 40) == 2)
      {
        v94 = *(llvm::SCEV ***)(v88 + 32);
        if (llvm::SCEV::isAllOnesValue(*v94))
        {
          a43 = 0;
          __src = 0;
          if (!llvm::ScalarEvolution::matchURem(v49, v94[1], &a43, &__src)
            || a43 != *(llvm::SCEV **)(*(_QWORD *)v83 + 8))
          {
            LODWORD(v95) = v83[2];
            goto LABEL_61;
          }
          v207 = v49;
          v208 = __src;
          UDivExpr = llvm::ScalarEvolution::getUDivExpr(v207, a43, __src);
          sub_1C4E0AE60((uint64_t)v207, (uint64_t)v208, (uint64_t)UDivExpr, 0, 0);
LABEL_459:
          JUMPOUT(0x1C4F077ECLL);
        }
      }
      LODWORD(v95) = 2;
LABEL_64:
      v50 = v50;
      while (*(unsigned __int16 *)(v87[v50] + 24) <= 3u)
      {
        if ((_DWORD)v95 == (_DWORD)++v50)
          goto LABEL_381;
      }
      v96 = &v87[v50];
      v97 = *v96;
      if (*v96)
        v98 = *(unsigned __int16 *)(*v96 + 24) == 4;
      else
        v98 = 0;
      if (v98 && v95 <= dword_1ED7F3878)
      {
        v99 = (unint64_t *)(v97 + 40);
        v100 = *(_QWORD *)(v97 + 40);
        if (v100 > dword_1ED7F3878)
        {
          v83 = a16;
          goto LABEL_76;
        }
        v167 = v50;
        LOBYTE(v50) = a15 & 2;
        do
        {
          v168 = &v87[v95];
          if (v168 != v96 + 1)
          {
            memmove(v96, v96 + 1, (char *)v168 - (char *)(v96 + 1));
            LODWORD(v95) = a16[2];
            v100 = *v99;
          }
          v169 = (v95 - 1);
          a16[2] = v169;
          v170 = *(const void **)(v97 + 32);
          if (v100 + v169 > a16[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a16, (uint64_t)(a16 + 4), v100 + v169, 8);
            LODWORD(v169) = a16[2];
          }
          v87 = *(uint64_t **)a16;
          if (v100)
          {
            memcpy(&v87[v169], v170, 8 * v100);
            LODWORD(v169) = a16[2];
            v87 = *(uint64_t **)a16;
          }
          LODWORD(v95) = v169 + v100;
          a16[2] = v169 + v100;
          v50 = *(_WORD *)(v97 + 28) & v50 & 7;
          v96 = &v87[v167];
          v97 = *v96;
          if (*v96)
            v171 = *(unsigned __int16 *)(*v96 + 24) == 4;
          else
            v171 = 0;
          v172 = !v171 || v95 > dword_1ED7F3878;
          if (v172)
            break;
          v99 = (unint64_t *)(v97 + 40);
          v100 = *(_QWORD *)(v97 + 40);
        }
        while (v100 <= dword_1ED7F3878);
        v78 = HIDWORD(a15) + 1;
        v75 = (uint64_t)v49;
        v76 = (uint64_t)a16;
        v77 = v50;
LABEL_25:
        llvm::ScalarEvolution::getAddExpr(v75, v76, v77, v78);
        goto LABEL_459;
      }
LABEL_76:
      if (v95 <= v50)
        goto LABEL_278;
      v101 = *(_QWORD *)v83;
      v50 = v50;
      while (*(unsigned __int16 *)(*(_QWORD *)(v101 + 8 * v50) + 24) <= 4u)
      {
        if ((_DWORD)v95 == (_DWORD)++v50)
          goto LABEL_381;
      }
      if (*(_WORD *)(*(_QWORD *)(v101 + 8 * v50) + 24) != 5)
        goto LABEL_278;
      v102 = *(_QWORD *)(*(_QWORD *)v49 + 40) + 272;
      if (*((_BYTE *)v347 + 8) == 15)
      {
        IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v102, (uint64_t)v347);
      }
      else
      {
        sub_1C4768AD0(v102, (uint64_t)v347);
        IndexTypeSizeInBits = v104;
        if ((_DWORD)v103 == 1)
      }
      __src = 0;
      a26 = 0;
      LODWORD(a27) = 0;
      a43 = (llvm::SCEV *)&a45;
      a44 = 0x800000000;
      LODWORD(a19) = IndexTypeSizeInBits;
      if (IndexTypeSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&a18, 0, 0);
        v213 = *(uint64_t **)v83;
        v214 = v83[2];
        LODWORD(a22) = IndexTypeSizeInBits;
        llvm::APInt::initSlowCase((llvm::APInt *)&a21, 1, 0);
        v215 = a22;
        v216 = sub_1C4F15EB0((uint64_t)&__src, (uint64_t)&a43, &a18, v213, v214, &a21, (uint64_t)v49);
        if (v215 >= 0x41 && a21)
        {
          MEMORY[0x1CAA32F9C](a21, 0x1000C8000313F17);
          v49 = a17;
          if ((v216 & 1) != 0)
            goto LABEL_89;
        }
        else
        {
          v49 = a17;
          if (v216)
            goto LABEL_89;
        }
      }
      else
      {
        a18 = 0;
        v106 = *(uint64_t **)v83;
        v107 = v83[2];
        LODWORD(a22) = IndexTypeSizeInBits;
        if (IndexTypeSizeInBits)
          v108 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
        else
          LOBYTE(v108) = 0;
        a21 = (uint64_t *)(v108 & 1);
        if ((sub_1C4F15EB0((uint64_t)&__src, (uint64_t)&a43, &a18, v106, v107, &a21, (uint64_t)v49) & 1) != 0)
        {
LABEL_89:
          a22 = 0;
          a23 = 0;
          a21 = &a22;
          if ((_DWORD)a44)
          {
            v110 = (uint64_t *)a43;
            v111 = (uint64_t *)((char *)a43 + 8 * a44);
            while (1)
            {
              v112 = *v110;
              a20 = 0;
              v113 = __src;
              v114 = a27;
              v115 = sub_1C4F54554((uint64_t)__src, a27, v112, &a20)
                   ? (uint64_t)a20
                   : (uint64_t)v113 + 24 * v114;
              v116 = a22;
              v117 = &a22;
              v118 = &a22;
              if (a22)
                break;
LABEL_113:
              v132 = (uint64_t *)operator new(0x60uLL);
              v131 = v132;
              v133 = *(_DWORD *)(v115 + 16);
              *((_DWORD *)v132 + 10) = v133;
              if (v133 > 0x40)
              {
                v134 = (void *)operator new[]();
                v131[4] = (uint64_t)v134;
                memcpy(v134, *(const void **)(v115 + 8), (((unint64_t)*((unsigned int *)v131 + 10) + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v132[4] = *(_QWORD *)(v115 + 8);
              }
              v131[6] = (uint64_t)(v131 + 8);
              v131[7] = 0x400000000;
              *v131 = 0;
              v131[1] = 0;
              v131[2] = (uint64_t)v118;
              *v117 = (uint64_t)v131;
              v135 = v131;
              if (*a21)
              {
                a21 = (uint64_t *)*a21;
                v135 = (uint64_t *)*v117;
              }
              sub_1C4768E74((uint64_t *)a22, v135);
              ++a23;
LABEL_119:
              v136 = *((unsigned int *)v131 + 14);
              if (v136 >= *((unsigned int *)v131 + 15))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v131 + 6), (uint64_t)(v131 + 8), v136 + 1, 8);
                v136 = *((unsigned int *)v131 + 14);
              }
              *(_QWORD *)(v131[6] + 8 * v136) = v112;
              ++*((_DWORD *)v131 + 14);
              if (++v110 == v111)
                goto LABEL_171;
            }
            v119 = *(unsigned int *)(v115 + 16);
            while (1)
            {
              while (1)
              {
                v118 = (uint64_t *)v116;
                if (v119 <= 0x40)
                  break;
                v120 = *(_QWORD *)(v115 + 8);
                v121 = *(_QWORD *)(v116 + 32);
                v122 = ((unint64_t)(v119 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v122)
                    goto LABEL_104;
                  v123 = *(_QWORD *)(v120 + v122 - 8);
                  v124 = *(_QWORD *)(v121 + v122 - 8);
                  v122 -= 8;
                }
                while (v123 == v124);
                if (v123 <= v124)
                  goto LABEL_98;
LABEL_104:
                v125 = *((unsigned int *)v118 + 10);
                if (v125 <= 0x40)
                {
                  if (v121 >= v120)
                    goto LABEL_112;
                  goto LABEL_106;
                }
                v126 = v120 - 8;
                v127 = ((unint64_t)(v125 + 63) >> 3) & 0x3FFFFFF8;
                v128 = v121 - 8;
                do
                {
                  if (!v127)
                  {
                    v131 = v118;
                    v49 = a17;
                    goto LABEL_119;
                  }
                  v129 = *(_QWORD *)(v128 + v127);
                  v130 = *(_QWORD *)(v126 + v127);
                  v127 -= 8;
                }
                while (v129 == v130);
                v49 = a17;
                if (v129 > v130)
                {
LABEL_112:
                  v131 = v118;
                  goto LABEL_119;
                }
LABEL_106:
                v116 = v118[1];
                if (!v116)
                {
                  v117 = v118 + 1;
                  goto LABEL_113;
                }
              }
              v120 = *(_QWORD *)(v115 + 8);
              v121 = *(_QWORD *)(v116 + 32);
              if (v120 >= v121)
                goto LABEL_104;
LABEL_98:
              v116 = *v118;
              v117 = v118;
              if (!*v118)
                goto LABEL_113;
            }
          }
LABEL_171:
          v83 = a16;
          a16[2] = 0;
          v173 = a18;
          if (a19 >= 0x41)
          {
            v174 = 0;
            v175 = ((unint64_t)a19 + 63) >> 6;
            do
            {
              v172 = v175-- < 1;
              if (v172)
                break;
              v176 = a18[v175];
              v174 += __clz(v176);
            }
            while (!v176);
            v177 = a19 | 0xFFFFFFC0;
            if ((a19 & 0x3F) == 0)
              v177 = 0;
            if ((a19 - v174 - v177) > 0x40)
              goto LABEL_180;
            v173 = (_QWORD *)*a18;
          }
          if (!v173)
          {
            v180 = 0;
LABEL_223:
            v193 = a21;
            if (a21 != &a22)
            {
              v194 = HIDWORD(a15) + 1;
              do
              {
                v195 = (_QWORD **)(v193 + 4);
                v196 = *((_DWORD *)v193 + 10);
                if (v196 >= 0x41)
                {
                  v199 = v196 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v193 + 4));
                  v49 = a17;
                  if (v199 >= 0x41)
                    goto LABEL_231;
                  v197 = (_QWORD *)**v195;
                  if (v197 == (_QWORD *)1)
                  {
LABEL_227:
                    AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v49, (uint64_t)(v193 + 6), 0, v194);
LABEL_232:
                    v202 = AddExpr;
                    v203 = a16[2];
                    if (v203 >= a16[3])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a16, (uint64_t)(a16 + 4), v203 + 1, 8);
                      v203 = a16[2];
                    }
                    *(_QWORD *)(*(_QWORD *)a16 + 8 * v203) = v202;
                    v180 = a16[2] + 1;
                    a16[2] = v180;
                    goto LABEL_235;
                  }
                }
                else
                {
                  v197 = *v195;
                  v49 = a17;
                  if (*v195 == (_QWORD *)1)
                    goto LABEL_227;
                }
                if (v197)
                {
LABEL_231:
                  v200 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)v49, (const llvm::APInt *)(v193 + 4), v109);
                  v201 = llvm::ScalarEvolution::getAddExpr((uint64_t)v49, (uint64_t)(v193 + 6), 0, v194);
                  AddExpr = sub_1C4E0AE60((uint64_t)v49, v200, v201, 0, v194);
                  goto LABEL_232;
                }
LABEL_235:
                v204 = (uint64_t *)v193[1];
                if (v204)
                {
                  do
                  {
                    v205 = v204;
                    v204 = (uint64_t *)*v204;
                  }
                  while (v204);
                }
                else
                {
                  do
                  {
                    v205 = (uint64_t *)v193[2];
                    v81 = *v205 == (_QWORD)v193;
                    v193 = v205;
                  }
                  while (!v81);
                }
                v193 = v205;
              }
              while (v205 != &a22);
            }
            if (v180)
            {
              if (v180 != 1)
                llvm::ScalarEvolution::getAddExpr((uint64_t)v49, (uint64_t)a16, 0, HIDWORD(a15) + 1);
            }
            else
            {
              llvm::ScalarEvolution::getConstant(v49, v347, 0, 0);
            }
            sub_1C4F5B46C((_QWORD *)a22);
            v206 = 1;
            goto LABEL_262;
          }
LABEL_180:
          v178 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)v49, (const llvm::APInt *)&a18, v109);
          v179 = a16[2];
          if (v179 >= a16[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a16, (uint64_t)(a16 + 4), v179 + 1, 8);
            LODWORD(v179) = a16[2];
          }
          *(_QWORD *)(*(_QWORD *)a16 + 8 * v179) = v178;
          v180 = a16[2] + 1;
          a16[2] = v180;
          goto LABEL_223;
        }
      }
      v206 = 0;
      v83 = a16;
LABEL_262:
      if (a19 >= 0x41 && a18)
        MEMORY[0x1CAA32F9C](a18, 0x1000C8000313F17);
      if (a43 != (llvm::SCEV *)&a45)
        free(a43);
      v217 = __src;
      if ((_DWORD)a27)
      {
        v218 = 24 * a27;
        v219 = (char *)__src + 8;
        do
        {
          v220 = *((_QWORD *)v219 - 1);
          if (v220 != -4096 && v220 != -8192 && *((_DWORD *)v219 + 2) >= 0x41u && *(_QWORD *)v219)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v219, 0x1000C8000313F17);
          v219 += 24;
          v218 -= 24;
        }
        while (v218);
      }
      MEMORY[0x1CAA32FB4](v217, 8);
      if ((v206 & 1) != 0)
        goto LABEL_458;
      LODWORD(v95) = v83[2];
LABEL_278:
      if (v95 > v50)
      {
        v221 = *(_QWORD *)v83;
        while (1)
        {
          v222 = *(_QWORD *)(v221 + 8 * v50);
          if (*(_WORD *)(v222 + 24) != 5)
            break;
          v223 = *(_QWORD *)(v222 + 40);
          if ((_DWORD)v223)
          {
            v224 = 0;
            v349 = v50;
            v225 = *(_QWORD **)(v222 + 32);
            v226 = v50 + 1;
            while (1)
            {
              v227 = v225[v224];
              if (!*(_WORD *)(v227 + 24))
                goto LABEL_294;
              v228 = 0;
              v229 = 1;
              do
              {
                if (v227 == *(_QWORD *)(v221 + v228))
                {
                  if (v223 == 2)
                  {
                    v290 = v225[(_DWORD)v224 == 0];
                    v291 = HIDWORD(a15) + 1;
                    goto LABEL_400;
                  }
                  a43 = (llvm::SCEV *)&a45;
                  a44 = 0x400000000;
                  if (v224 >= 5)
                  {
                    v292 = v222;
                    v300 = v225;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v224, 8);
                    v225 = v300;
                    v293 = a44;
                    v294 = (uint64_t *)a43;
LABEL_393:
                    memcpy(&v294[v293], v225, 8 * v224);
                    v225 = *(_QWORD **)(v292 + 32);
                    v223 = *(_QWORD *)(v292 + 40);
                    v301 = a44;
                    v302 = HIDWORD(a44);
                  }
                  else
                  {
                    if ((_DWORD)v224)
                    {
                      v292 = v222;
                      v293 = 0;
                      v294 = &a45;
                      goto LABEL_393;
                    }
                    v301 = 0;
                    v302 = 4;
                  }
                  v303 = (v301 + v224);
                  LODWORD(a44) = v303;
                  v304 = (char *)&v225[v224 + 1];
                  v305 = (char *)&v225[v223];
                  v306 = v303 + ((v305 - v304) >> 3);
                  if (v306 > v302)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v306, 8);
                    LODWORD(v303) = a44;
                  }
                  if (v304 != v305)
                  {
                    memcpy((char *)a43 + 8 * v303, v304, v305 - v304);
                    LODWORD(v303) = a44;
                  }
                  LODWORD(a44) = v303 + ((unint64_t)(v305 - v304) >> 3);
                  v291 = HIDWORD(a15) + 1;
                  v290 = llvm::ScalarEvolution::getMulExpr((uint64_t)v49, (uint64_t)&a43, 0, HIDWORD(a15) + 1);
                  if (a43 != (llvm::SCEV *)&a45)
                    free(a43);
LABEL_400:
                  v307 = llvm::ScalarEvolution::getConstant(v49, v347, 1, 0);
                  __src = (const llvm::SCEV *)&a27;
                  a27 = v307;
                  a28 = v290;
                  a26 = 0x200000002;
                  v308 = llvm::ScalarEvolution::getAddExpr((uint64_t)v49, (uint64_t)&__src, 0, v291);
                  a43 = (llvm::SCEV *)&a45;
                  a45 = v308;
                  a46 = v227;
                  a44 = 0x200000002;
                  v309 = llvm::ScalarEvolution::getMulExpr((uint64_t)v49, (uint64_t)&a43, 0, v291);
                  if (a43 != (llvm::SCEV *)&a45)
                    free(a43);
                  v310 = a16[2];
                  if ((_DWORD)v310 != 2)
                  {
                    v311 = *(_QWORD **)a16;
                    if (v50 <= v229 - 1)
                    {
                      v316 = (char *)&v311[v310];
                      v317 = &v311[v50];
                      v312 = (uint64_t)a16;
                      if (v316 != (char *)(v317 + 1))
                      {
                        memmove(v317, v317 + 1, v316 - (char *)(v317 + 1));
                        LODWORD(v310) = a16[2];
                      }
                      a16[2] = v310 - 1;
                      LODWORD(v50) = v229 - 1;
                      if ((_DWORD)v310 != v229)
                      {
                        v314 = (char *)(*(_QWORD *)a16 + v228);
                        v315 = *(_QWORD *)a16 + 8 * (v310 - 1);
LABEL_412:
                        memmove(v314 - 8, v314, v315 - (_QWORD)v314);
                        LODWORD(v50) = *(_DWORD *)(v312 + 8);
                      }
                    }
                    else
                    {
                      v312 = (uint64_t)a16;
                      if (8 * v310 - 8 != v228)
                      {
                        memmove(&v311[v228 / 8], &v311[v228 / 8 + 1], 8 * v310 - v228 - 8);
                        LODWORD(v310) = a16[2];
                      }
                      v313 = v310 - 1;
                      a16[2] = v313;
                      if (v313 != (_DWORD)v50)
                      {
                        v314 = (char *)(*(_QWORD *)a16 + 8 * v50);
                        v315 = *(_QWORD *)a16 + 8 * v313;
                        goto LABEL_412;
                      }
                    }
                    v318 = (v50 - 1);
                    *(_DWORD *)(v312 + 8) = v318;
                    if (v318 >= *(_DWORD *)(v312 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v312, v312 + 16, v318 + 1, 8);
                      LODWORD(v318) = *(_DWORD *)(v312 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)v312 + 8 * v318) = v309;
                    ++*(_DWORD *)(v312 + 8);
                    llvm::ScalarEvolution::getAddExpr((uint64_t)v49, v312, 0, v291);
                  }
                  v319 = __src;
                  if (__src != (const llvm::SCEV *)&a27)
                    goto LABEL_451;
                  goto LABEL_458;
                }
                v228 += 8;
                ++v229;
              }
              while (8 * v95 != v228);
              v230 = (v50 + 1);
              if (v95 > v226)
              {
                while (1)
                {
                  v231 = *(_QWORD *)(v221 + 8 * v230);
                  if (*(_WORD *)(v231 + 24) != 5)
                    goto LABEL_294;
                  v232 = *(_QWORD *)(v231 + 40);
                  if ((_DWORD)v232)
                    break;
LABEL_293:
                  if ((_DWORD)v95 == (_DWORD)++v230)
                    goto LABEL_294;
                }
                v233 = 0;
                v234 = *(_QWORD **)(v231 + 32);
                v235 = 8;
                while (v234[v233] != v227)
                {
                  ++v233;
                  v235 += 8;
                  if (*(_QWORD *)(v231 + 40) == v233)
                    goto LABEL_293;
                }
                v351 = v230;
                if (v223 == 2)
                {
                  v295 = v225[(_DWORD)v224 == 0];
                  v296 = HIDWORD(a15);
                  goto LABEL_427;
                }
                a43 = (llvm::SCEV *)&a45;
                a44 = 0x400000000;
                v346 = v231;
                if (v224 >= 5)
                {
                  v298 = v222;
                  v320 = v225;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v224, 8);
                  v225 = v320;
                  v297 = a44;
                  v299 = (uint64_t *)a43;
LABEL_419:
                  memcpy(&v299[v297], v225, 8 * v224);
                  v225 = *(_QWORD **)(v298 + 32);
                  v223 = *(_QWORD *)(v298 + 40);
                  v297 = a44;
                  v321 = HIDWORD(a44);
                }
                else
                {
                  v297 = 0;
                  if ((_DWORD)v224)
                  {
                    v298 = v222;
                    v299 = &a45;
                    goto LABEL_419;
                  }
                  v321 = 4;
                }
                v322 = (v297 + v224);
                LODWORD(a44) = v322;
                v323 = (char *)&v225[v224 + 1];
                v324 = (char *)&v225[v223];
                v325 = v324 - v323;
                v326 = v322 + ((v324 - v323) >> 3);
                if (v326 > v321)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v326, 8);
                  LODWORD(v322) = a44;
                }
                if (v323 != v324)
                {
                  memcpy((char *)a43 + 8 * v322, v323, v324 - v323);
                  LODWORD(v322) = a44;
                }
                v231 = v346;
                LODWORD(a44) = v322 + (v325 >> 3);
                v296 = HIDWORD(a15);
                v295 = llvm::ScalarEvolution::getMulExpr((uint64_t)v49, (uint64_t)&a43, 0, HIDWORD(a15) + 1);
                if (a43 != (llvm::SCEV *)&a45)
                  free(a43);
                v234 = *(_QWORD **)(v346 + 32);
                v232 = *(_QWORD *)(v346 + 40);
LABEL_427:
                if (v232 == 2)
                {
                  v327 = v234[(_DWORD)v233 == 0];
                  v328 = v296 + 1;
                  v329 = (uint64_t)a16;
                  goto LABEL_440;
                }
                a43 = (llvm::SCEV *)&a45;
                a44 = 0x400000000;
                if (v233 >= 5)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v233, 8);
                  v330 = a44;
                  v331 = (uint64_t *)a43;
LABEL_433:
                  memcpy(&v331[v330], v234, v235 - 8);
                  v234 = *(_QWORD **)(v231 + 32);
                  v232 = *(_QWORD *)(v231 + 40);
                  v332 = a44;
                  v333 = HIDWORD(a44);
                }
                else
                {
                  if ((_DWORD)v233)
                  {
                    v330 = 0;
                    v331 = &a45;
                    goto LABEL_433;
                  }
                  v332 = 0;
                  v333 = 4;
                }
                v334 = v233 + v332;
                LODWORD(a44) = v334;
                v335 = 8 * v232;
                v336 = 8 * v232 - v235;
                v337 = (v336 >> 3) + v334;
                if (v337 > v333)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v337, 8);
                  v334 = a44;
                }
                if (v335 != v235)
                {
                  memcpy((char *)a43 + 8 * v334, &v234[v233 + 1], v336);
                  v334 = a44;
                }
                LODWORD(a44) = v334 + ((unint64_t)v336 >> 3);
                v328 = v296 + 1;
                v327 = llvm::ScalarEvolution::getMulExpr((uint64_t)v49, (uint64_t)&a43, 0, v296 + 1);
                v329 = (uint64_t)a16;
                if (a43 != (llvm::SCEV *)&a45)
                  free(a43);
LABEL_440:
                __src = (const llvm::SCEV *)&a27;
                a27 = v295;
                a28 = v327;
                a26 = 0x200000002;
                v338 = llvm::ScalarEvolution::getAddExpr((uint64_t)v49, (uint64_t)&__src, 0, v328);
                a43 = (llvm::SCEV *)&a45;
                a45 = v227;
                a46 = v338;
                a44 = 0x200000002;
                v339 = llvm::ScalarEvolution::getMulExpr((uint64_t)v49, (uint64_t)&a43, 0, v328);
                if (a43 != (llvm::SCEV *)&a45)
                  free(a43);
                v340 = *(unsigned int *)(v329 + 8);
                if ((_DWORD)v340 != 2)
                {
                  v341 = *(_QWORD *)v329 + 8 * v349;
                  v342 = *(_QWORD *)v329 + 8 * v340;
                  if (v342 != v341 + 8)
                  {
                    memmove((void *)v341, (const void *)(v341 + 8), v342 - (v341 + 8));
                    LODWORD(v340) = *(_DWORD *)(v329 + 8);
                  }
                  v343 = v340 - 1;
                  *(_DWORD *)(v329 + 8) = v343;
                  v344 = v351;
                  if (v343 != (_DWORD)v351)
                  {
                    memmove((void *)(*(_QWORD *)v329 + 8 * v351 - 8), (const void *)(*(_QWORD *)v329 + 8 * v351), *(_QWORD *)v329 + 8 * v343 - (*(_QWORD *)v329 + 8 * v351));
                    v344 = *(_DWORD *)(v329 + 8);
                  }
                  v345 = (v344 - 1);
                  *(_DWORD *)(v329 + 8) = v345;
                  if (v345 >= *(_DWORD *)(v329 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v329, v329 + 16, v345 + 1, 8);
                    LODWORD(v345) = *(_DWORD *)(v329 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v329 + 8 * v345) = v339;
                  ++*(_DWORD *)(v329 + 8);
                  llvm::ScalarEvolution::getAddExpr((uint64_t)v49, v329, 0, v328);
                }
                v319 = __src;
                if (__src != (const llvm::SCEV *)&a27)
LABEL_451:
                  free(v319);
LABEL_458:
                JUMPOUT(0x1C4F077F0);
              }
LABEL_294:
              if (++v224 == *(_QWORD *)(v222 + 40))
              {
                v83 = a16;
                goto LABEL_297;
              }
            }
          }
          v226 = v50 + 1;
LABEL_297:
          LODWORD(v50) = v226;
          if (v226 == (_DWORD)v95)
            goto LABEL_381;
        }
      }
      if (v95 > v50)
      {
        v236 = *(_QWORD *)v83 + 8 * v50;
        while (*(unsigned __int16 *)(*(_QWORD *)v236 + 24) <= 6u)
        {
          LODWORD(v50) = v50 + 1;
          v236 += 8;
          if ((_DWORD)v95 == (_DWORD)v50)
            goto LABEL_381;
        }
      }
      if (v95 <= v50)
      {
LABEL_381:
        sub_1C4F17BCC(a17, 4, *(uint64_t **)v83, v95, a15);
        JUMPOUT(0x1C4F077E8);
      }
      v350 = HIDWORD(a15) + 1;
      v50 = v50;
      while (1)
      {
        v237 = *(uint64_t **)v83;
        if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v83 + 8 * v50) + 24) != 7)
          goto LABEL_381;
        v238 = 0;
        a43 = (llvm::SCEV *)&a45;
        a44 = 0x800000000;
        v239 = (_QWORD *)v237[v50];
        v240 = (const llvm::BasicBlock ***)v239[6];
        v241 = a17;
        do
        {
          v242 = *(const llvm::SCEV **)(*(_QWORD *)v83 + 8 * v238);
          if (llvm::ScalarEvolution::getLoopDisposition(v241, v242, (const llvm::Loop *)v240) == 1
            && llvm::ScalarEvolution::getBlockDisposition(v241, v242, *v240[4]) == 2)
          {
            v243 = *(_QWORD *)(*(_QWORD *)v83 + 8 * v238);
            v244 = a44;
            if (a44 >= (unint64_t)HIDWORD(a44))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, a44 + 1, 8);
              v244 = a44;
            }
            *((_QWORD *)a43 + v244) = v243;
            LODWORD(a44) = a44 + 1;
            v245 = *(_QWORD *)v83 + 8 * v238;
            v246 = v83[2];
            v247 = *(_QWORD *)v83 + 8 * v246;
            if (v247 != v245 + 8)
            {
              memmove((void *)v245, (const void *)(v245 + 8), v247 - (v245 + 8));
              LODWORD(v246) = v83[2];
            }
            v241 = a17;
            v83[2] = v246 - 1;
            --v238;
            LODWORD(v95) = v95 - 1;
          }
          ++v238;
        }
        while (v238 != (_DWORD)v95);
        v248 = a44;
        if (!(_DWORD)a44)
        {
          v256 = v83[2];
          v257 = v50;
          do
          {
            if (v256 > ++v257)
            {
              v258 = *(_QWORD *)(*(_QWORD *)v83 + 8 * v257);
              if (*(_WORD *)(v258 + 24) == 7)
                continue;
            }
            v263 = 1;
            goto LABEL_374;
          }
          while (v240 != *(const llvm::BasicBlock ****)(v258 + 48));
          v260 = (const void *)v239[4];
          v259 = v239[5];
          __src = (const llvm::SCEV *)&a27;
          a26 = 0x400000000;
          if (v259 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&a27, v259, 8);
            v261 = a26;
            v262 = (uint64_t *)__src;
LABEL_350:
            memcpy(&v262[v261], v260, 8 * v259);
            v275 = a26;
            v256 = v83[2];
          }
          else
          {
            if (v259)
            {
              v261 = 0;
              v262 = &a27;
              goto LABEL_350;
            }
            v275 = 0;
          }
          LODWORD(a26) = v275 + v259;
          while (v256 != v257)
          {
            v276 = *(_QWORD *)(*(_QWORD *)v83 + 8 * v257);
            if (*(_WORD *)(v276 + 24) != 7)
              break;
            if (*(const llvm::BasicBlock ****)(v276 + 48) == v240)
            {
              v277 = *(unsigned int *)(v276 + 40);
              if (*(_DWORD *)(v276 + 40))
              {
                v278 = 0;
                while (1)
                {
                  v279 = a26;
                  if (v278 >= a26)
                    break;
                  v280 = *((_QWORD *)__src + v278);
                  v281 = *(_QWORD *)(*(_QWORD *)(v276 + 32) + 8 * v278);
                  a21 = &a23;
                  a23 = v280;
                  a24 = v281;
                  a22 = 0x200000002;
                  v282 = llvm::ScalarEvolution::getAddExpr((uint64_t)v241, (uint64_t)&a21, 0, v350);
                  *((_QWORD *)__src + v278) = v282;
                  if (a21 != &a23)
                    free(a21);
                  if (++v278 == v277)
                    goto LABEL_367;
                }
                v283 = *(_QWORD *)(v276 + 40);
                v284 = (const void *)(*(_QWORD *)(v276 + 32) + 8 * v278);
                v285 = 8 * v283 - 8 * v278;
                v286 = a26 + (v285 >> 3);
                if (v286 > HIDWORD(a26))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&a27, v286, 8);
                  v279 = a26;
                }
                if (v278 != v283)
                {
                  memcpy((char *)__src + 8 * v279, v284, 8 * v283 - 8 * v278);
                  v279 = a26;
                }
                v241 = a17;
                LODWORD(a26) = v279 + ((unint64_t)v285 >> 3);
              }
LABEL_367:
              v287 = *(_QWORD *)v83 + 8 * v257;
              v288 = v83[2];
              v289 = *(_QWORD *)v83 + 8 * v288;
              if (v289 != v287 + 8)
              {
                memmove((void *)v287, (const void *)(v287 + 8), v289 - (v287 + 8));
                LODWORD(v288) = v83[2];
              }
              v256 = v288 - 1;
              v83[2] = v256;
              --v257;
            }
            ++v257;
          }
          *(_QWORD *)(*(_QWORD *)v83 + 8 * v50) = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v241, (uint64_t **)&__src, (uint64_t **)v240);
          llvm::ScalarEvolution::getAddExpr((uint64_t)v241, (uint64_t)v83, 0, v350);
          if (__src != (const llvm::SCEV *)&a27)
            free(__src);
          v263 = 0;
          goto LABEL_374;
        }
        if (a44 >= (unint64_t)HIDWORD(a44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, a44 + 1, 8);
          v248 = a44;
        }
        *((_QWORD *)a43 + v248) = v239;
        LODWORD(a44) = a44 + 1;
        v249 = sub_1C4F17BCC(v241, 4, (uint64_t *)a43, a44, a15);
        v250 = (a44 - 1);
        LODWORD(a44) = v250;
        v251 = *(_QWORD *)v239[4];
        if (v250 >= HIDWORD(a44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v250 + 1, 8);
          LODWORD(v250) = a44;
        }
        *((_QWORD *)a43 + v250) = v251;
        LODWORD(a44) = a44 + 1;
        v253 = (const void *)v239[4];
        v252 = v239[5];
        __src = (const llvm::SCEV *)&a27;
        a26 = 0x400000000;
        if (v252 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&a27, v252, 8);
          v254 = a26;
          v255 = (uint64_t *)__src;
        }
        else
        {
          if (!v252)
          {
            v264 = 0;
            goto LABEL_334;
          }
          v254 = 0;
          v255 = &a27;
        }
        memcpy(&v255[v254], v253, 8 * v252);
        v264 = a26;
LABEL_334:
        LODWORD(a26) = v264 + v252;
        v83 = a16;
        if (v249)
        {
          DefiningScopeBound = llvm::ScalarEvolution::getDefiningScopeBound((llvm::DominatorTree **)v241, (uint64_t *)a43, a44, &a21);
          v266 = *((_QWORD *)*v240[4] + 6);
          if (v266)
            v267 = (const llvm::Instruction *)(v266 - 24);
          else
            v267 = 0;
          if (llvm::ScalarEvolution::isGuaranteedToTransferExecutionTo(v241, DefiningScopeBound, v267))
            v268 = v249;
          else
            v268 = 0;
        }
        else
        {
          v268 = 0;
        }
        v269 = llvm::ScalarEvolution::getAddExpr((uint64_t)v241, (uint64_t)&a43, v268, v350);
        *(_QWORD *)__src = v269;
        AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v241, (uint64_t **)&__src, (uint64_t **)v240);
        if (a16[2] != 1)
        {
          v271 = 0;
          v272 = *(_QWORD **)a16;
          do
          {
            v273 = v271;
            v274 = (_QWORD *)v272[v271++];
          }
          while (v274 != v239);
          v272[v273] = AddRecExpr;
          llvm::ScalarEvolution::getAddExpr((uint64_t)v241, (uint64_t)a16, 0, v350);
        }
        if (__src != (const llvm::SCEV *)&a27)
          free(__src);
        v263 = 0;
LABEL_374:
        if (a43 != (llvm::SCEV *)&a45)
          free(a43);
        if ((v263 & 1) == 0)
          goto LABEL_458;
        ++v50;
        v95 = v83[2];
        if (v50 >= v95)
          goto LABEL_381;
      }
    }
    v137 = *(_QWORD *)(v93 + 32);
    v138 = *(_DWORD *)(v137 + 32);
    LODWORD(a26) = v138;
    if (v138 > 0x40)
    {
      __src = (const llvm::SCEV *)operator new[]();
      v138 = a26;
      memcpy(__src, *(const void **)(v137 + 24), (((unint64_t)a26 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __src = *(const llvm::SCEV **)(v137 + 24);
    }
    v139 = *(_QWORD *)(v91 + 32);
    v140 = *(unsigned int *)(v139 + 32);
    v49 = a17;
    v348 = *(_DWORD *)(v139 + 32);
    if (v140 > 0x40)
    {
      v142 = ((unint64_t)(v140 + 63) >> 3) & 0x3FFFFFF8;
      v141 = (char *)operator new[]();
      memcpy(v141, *(const void **)(v139 + 24), v142);
      v138 = a26;
    }
    else
    {
      v141 = *(char **)(v139 + 24);
    }
    if (v138 >= 0x41)
    {
      v149 = v138 + 63;
      v146 = (const llvm::SCEV *)operator new[]();
      v143 = __src;
      memcpy(v146, __src, (v149 >> 3) & 0x3FFFFFF8);
      v150 = 0;
      v151 = 0;
      v152 = 8 * (v149 >> 6);
      do
      {
        v153 = *(_QWORD *)((char *)v146 + v150);
        v154 = *(_QWORD *)&v141[v150] + v153;
        v155 = v154 < v153;
        v156 = v154 + 1 <= v153;
        if (v151)
        {
          ++v154;
          v151 = v156;
        }
        else
        {
          v151 = v155;
        }
        *(_QWORD *)((char *)v146 + v150) = v154;
        v150 += 8;
      }
      while (v152 != v150);
      *((_QWORD *)v146 + (v149 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
      LODWORD(a22) = v138;
      a21 = (uint64_t *)v146;
      v157 = *(_WORD *)(v89 + 28);
      v148 = v157 & 4;
      if ((v157 & 2) == 0)
        goto LABEL_146;
      do
      {
        if (!v152)
          goto LABEL_145;
        v158 = *(_QWORD *)((char *)v146 + v152 - 8);
        v159 = *(_QWORD *)((char *)v143 + v152 - 8);
        v152 -= 8;
      }
      while (v158 == v159);
      if (v158 > v159)
        goto LABEL_146;
    }
    else
    {
      v143 = __src;
      v144 = (unint64_t)&v141[(_QWORD)__src];
      if (v138)
        v145 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
      else
        v145 = 0;
      v146 = (const llvm::SCEV *)(v145 & v144);
      LODWORD(a22) = v138;
      a21 = (uint64_t *)(v145 & v144);
      v147 = *(_WORD *)(v89 + 28);
      v148 = v147 & 4;
      if ((v147 & 2) == 0 || v146 > __src)
      {
LABEL_146:
        v161 = 0;
        v160 = 1;
        goto LABEL_147;
      }
    }
LABEL_145:
    v160 = 0;
    v161 = 2;
    if (!v148)
      goto LABEL_153;
LABEL_147:
    v162 = a26 - 1;
    p_src = &__src;
    if (a26 >= 0x41)
      p_src = (const llvm::SCEV **)((char *)v143 + 8 * (v162 >> 6));
    v164 = (unint64_t)*p_src >> v162;
    v165 = (uint64_t **)((char *)v146 + 8 * ((v138 - 1) >> 6));
    if (v138 < 0x41)
      v165 = &a21;
    if (((((unint64_t)*v165 >> (v138 - 1)) ^ v164) & 1) == 0)
    {
      v181 = v161;
      sub_1C4DA6CE8((const void **)&a21, (uint64_t)&a43);
      sub_1C4DA6CE8((const void **)&__src, (uint64_t)&a18);
      v182 = a44;
      if (a44 > 0x40)
      {
        v183 = a18;
        v210 = (((unint64_t)a44 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v210)
          {
            v184 = 0;
            goto LABEL_255;
          }
          v211 = *(_QWORD *)((char *)a43 + v210 - 8);
          v212 = *(_QWORD *)((char *)a18 + v210 - 8);
          v210 -= 8;
        }
        while (v211 == v212);
        if (v211 > v212)
          v184 = 1;
        else
          v184 = -1;
LABEL_255:
        v49 = a17;
      }
      else
      {
        v183 = a18;
        if (a43 < (llvm::SCEV *)a18)
          v184 = -1;
        else
          v184 = a43 > (llvm::SCEV *)a18;
      }
      v185 = a19 < 0x41 || v183 == 0;
      v83 = a16;
      if (!v185)
      {
        MEMORY[0x1CAA32F9C]();
        v182 = a44;
      }
      if (v182 >= 0x41 && a43)
        MEMORY[0x1CAA32F9C](a43, 0x1000C8000313F17);
      if (v184 > 0)
        v186 = v160;
      else
        v186 = 0;
      if (v184 <= 0)
        v161 = v181 | 4;
      else
        v161 = v181;
      if ((v186 & 1) != 0)
        goto LABEL_154;
    }
    else
    {
LABEL_153:
      v83 = a16;
      if ((v160 & 1) != 0)
      {
LABEL_154:
        v166 = 1;
        goto LABEL_210;
      }
    }
    v188 = *(const void **)(v89 + 32);
    v187 = *(_QWORD *)(v89 + 40);
    a43 = (llvm::SCEV *)&a45;
    a44 = 0x400000000;
    if (v187 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a43, (uint64_t)&a45, v187, 8);
      v189 = a44;
      v191 = (uint64_t *)a43;
    }
    else
    {
      v189 = 0;
      v190 = 0;
      v191 = &a45;
      if (!v187)
        goto LABEL_207;
    }
    memcpy(&v191[v189], v188, 8 * v187);
    v190 = a44;
LABEL_207:
    LODWORD(a44) = v190 + v187;
    v192 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)v49, (const llvm::APInt *)&a21, a3);
    *(_QWORD *)a43 = v192;
    llvm::ScalarEvolution::getAddExpr((uint64_t)v49, (uint64_t)&a43, v161, 0);
    if (a43 != (llvm::SCEV *)&a45)
      free(a43);
    v166 = 0;
LABEL_210:
    if (a22 >= 0x41 && a21)
      MEMORY[0x1CAA32F9C](a21, 0x1000C8000313F17);
    if (v348 >= 0x41 && v141)
      MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
    if (a26 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (!v166)
      goto LABEL_458;
    LODWORD(v95) = v83[2];
    if ((_DWORD)v95 == 2)
    {
      v87 = *(uint64_t **)v83;
      v88 = **(_QWORD **)v83;
      v90 = *(unsigned __int16 *)(v88 + 24);
      goto LABEL_54;
    }
LABEL_61:
    if (v95 > v50)
    {
      v87 = *(uint64_t **)v83;
      goto LABEL_64;
    }
    goto LABEL_76;
  }
  return ((uint64_t (*)(void *, llvm::Type *, const llvm::APInt *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, llvm::Type *, uint64_t *, uint64_t, _DWORD *, llvm::ScalarEvolution *, _QWORD *, uint64_t, char *, uint64_t *, uint64_t, uint64_t, uint64_t, const llvm::SCEV *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1C4F07C90 + 4 * word_1C85F4F64[*(unsigned __int16 *)(*(_QWORD *)(v84 + 32) + 24)]))(a1, v53, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v347, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           __src,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

uint64_t llvm::ScalarEvolution::getMulExpr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  llvm::APInt *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::APInt *v34;
  llvm::ValueHandleBase *v35;
  unsigned __int8 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  BOOL v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  llvm::SCEV *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  unsigned int v110;
  _QWORD *v111;
  const llvm::BasicBlock ***v112;
  _QWORD *v113;
  const llvm::SCEV *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *MulExpr;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  const void *v143;
  BOOL v144;
  unint64_t v146;
  unsigned int v147;
  uint64_t AddRecExpr;
  unsigned int *v149;
  unsigned int v150;
  llvm::ScalarEvolution *v151;
  uint64_t v152;
  unsigned int v153;
  void *v154;
  _QWORD *v155;
  void *__s1;
  uint64_t v157;
  _QWORD v158[16];
  void *p_s1;
  void *v160;
  uint64_t v161;
  _BYTE v162[64];
  _QWORD *v163;
  void *v164;
  uint64_t v165;
  int v166;
  _QWORD v167[10];

  v167[8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    v5 = *(uint64_t **)a2;
    return *v5;
  }
  v9 = a1;
  sub_1C4F15698(a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  v10 = *(uint64_t **)a2;
  v11 = **(_QWORD **)a2;
  if (v11)
    v12 = *(unsigned __int16 *)(v11 + 24) == 0;
  else
    v12 = 0;
  v151 = (llvm::ScalarEvolution *)v9;
  v149 = (unsigned int *)a2;
  if (!v12)
  {
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 8);
    goto LABEL_10;
  }
  v21 = v10[1];
  if (v21)
    v22 = *(unsigned __int16 *)(v21 + 24) == 0;
  else
    v22 = 0;
  if (v22)
  {
    v152 = v9 + 832;
    v33 = v9 + 864;
    while (1)
    {
      llvm::APInt::operator*(*(_QWORD *)(v11 + 32) + 24, (_QWORD *)(*(_QWORD *)(v21 + 32) + 24), (uint64_t)&v154);
      v35 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)v9, (llvm::LLVMContext *)&v154, v34);
      __s1 = v158;
      LODWORD(v158[0]) = 0;
      *(_QWORD *)((char *)v158 + 4) = v35;
      v157 = 0x2000000003;
      v36 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v60 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v60 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v60;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v37 = __ROR8__(*(_QWORD *)((char *)v158 + 4) + 12, 12);
      v38 = 0x9DDFEA08EB382D69
          * (v37 ^ ((0x9DDFEA08EB382D69 * (v158[0] ^ qword_1ED7EAC80 ^ v37)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                       * (v158[0] ^ qword_1ED7EAC80 ^ v37)));
      v39 = *(_QWORD *)(v9 + 832)
          + 8 * ((*(_DWORD *)(v9 + 840) - 1) & ((-348639895 * ((v38 >> 47) ^ v38)) ^ HIDWORD(v158[0])));
      v40 = *(_QWORD *)v39;
      p_s1 = &v161;
      v160 = (void *)0x2000000000;
      if (v40 && (v40 & 1) == 0)
      {
        v42 = v157;
        v43 = __s1;
        v44 = 4 * v157;
        while (*(_QWORD *)(v40 + 16) != v42 || memcmp(v43, *(const void **)(v40 + 8), v44))
        {
          LODWORD(v160) = 0;
          v40 = *(_QWORD *)v40;
          if (v40)
            v45 = (v40 & 1) == 0;
          else
            v45 = 0;
          if (!v45)
            goto LABEL_50;
        }
        v9 = (uint64_t)v151;
        v54 = v149;
      }
      else
      {
LABEL_50:
        v40 = sub_1C484358C(v33, 40, 3);
        v46 = sub_1C484358C(v33, 4 * v157, 2);
        if ((_DWORD)v157)
        {
          v47 = (int *)__s1;
          v48 = 4 * v157;
          v49 = (_DWORD *)v46;
          do
          {
            v50 = *v47++;
            *v49++ = v50;
            v48 -= 4;
          }
          while (v48);
          v51 = v157;
        }
        else
        {
          v51 = 0;
        }
        v9 = (uint64_t)v151;
        *(_QWORD *)v40 = 0;
        *(_QWORD *)(v40 + 8) = v46;
        *(_QWORD *)(v40 + 16) = v51;
        *(_DWORD *)(v40 + 24) = 0x10000;
        *(_WORD *)(v40 + 28) = 0;
        *(_QWORD *)(v40 + 32) = v35;
        v52 = *((_DWORD *)v151 + 211) + 1;
        v53 = *((_DWORD *)v151 + 210);
        if (v52 > 2 * v53)
        {
          llvm::FoldingSetBase::GrowBucketCount(v152, 2 * v53, (uint64_t)off_1E813B300);
          p_s1 = &v161;
          v160 = (void *)0x2000000000;
          v57 = sub_1C4F5AB38(*(_QWORD **)(v40 + 8), *(_QWORD *)(v40 + 8) + 4 * *(_QWORD *)(v40 + 16));
          v58 = *((_QWORD *)v151 + 104);
          v59 = *((_DWORD *)v151 + 210);
          v54 = v149;
          if (p_s1 != &v161)
            free(p_s1);
          v39 = v58 + 8 * ((v59 - 1) & v57);
          v52 = *((_DWORD *)v151 + 211) + 1;
          v9 = (uint64_t)v151;
        }
        else
        {
          v54 = v149;
        }
        *(_DWORD *)(v9 + 844) = v52;
        v55 = *(_QWORD *)v39;
        if (!*(_QWORD *)v39)
          v55 = v39 | 1;
        *(_QWORD *)v40 = v55;
        *(_QWORD *)v39 = v40;
        v43 = __s1;
      }
      if (v43 != v158)
        free(v43);
      **(_QWORD **)v54 = v40;
      if (v155 >= 0x41 && v154)
        MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
      v56 = v54[2];
      if ((_DWORD)v56 == 2)
        break;
      memmove((void *)(*(_QWORD *)v54 + 8), (const void *)(*(_QWORD *)v54 + 16), 8 * v56 - 16);
      --v54[2];
      v10 = *(uint64_t **)v54;
      v11 = *v10;
      v21 = v10[1];
      if (!v21 || *(_WORD *)(v21 + 24))
        goto LABEL_19;
    }
    v5 = *(uint64_t **)v54;
    return *v5;
  }
LABEL_19:
  AddRecExpr = v11;
  v23 = *(_QWORD *)(v11 + 32);
  v24 = (llvm::APInt *)(v23 + 24);
  v25 = *(_DWORD *)(v23 + 32);
  a3 = a3;
  if (v25 <= 0x40)
  {
    if (!*(_QWORD *)v24)
      return AddRecExpr;
    if (*(_QWORD *)v24 == 1)
      goto LABEL_22;
LABEL_79:
    v14 = v149[2];
    v13 = 1;
    goto LABEL_80;
  }
  v61 = llvm::APInt::countLeadingZerosSlowCase(v24);
  if (v61 == v25)
    return AddRecExpr;
  if (v61 != v25 - 1)
    goto LABEL_79;
LABEL_22:
  v26 = v149[2];
  if ((_DWORD)v26 != 1)
  {
    memmove(v10, v10 + 1, 8 * v26 - 8);
    LODWORD(v26) = v149[2];
    v10 = *(uint64_t **)v149;
  }
  v13 = 0;
  v14 = v26 - 1;
  v149[2] = v14;
LABEL_80:
  if (v14 == 1)
    return *v10;
LABEL_10:
  v15 = v14;
  if (dword_1ED7F3B78 < a4)
  {
LABEL_11:
    v16 = sub_1C4F17BCC((llvm::ScalarEvolution *)v9, 5, v10, v14, a3);
    v17 = v9;
    v18 = v10;
    return llvm::ScalarEvolution::getOrCreateMulExpr(v17, v18, v15, v16);
  }
  if (v14)
  {
    v27 = 8 * v14;
    v28 = v27;
    v29 = v10;
    while (dword_1ED7F3E78 > *(unsigned __int16 *)(*v29 + 26))
    {
      ++v29;
      v28 -= 8;
      if (!v28)
      {
        v153 = a4;
        __s1 = v158;
        LODWORD(v158[0]) = 5;
        v157 = 0x2000000001;
        v30 = 1;
        do
        {
          v31 = *v10;
          if (v30 >= HIDWORD(v157))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v158, v30 + 1, 4);
            v30 = v157;
          }
          *((_DWORD *)__s1 + v30) = v31;
          v32 = (v157 + 1);
          LODWORD(v157) = v32;
          if (v32 >= HIDWORD(v157))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v158, v32 + 1, 4);
            LODWORD(v32) = v157;
          }
          *((_DWORD *)__s1 + v32) = HIDWORD(v31);
          v30 = v157 + 1;
          LODWORD(v157) = v157 + 1;
          ++v10;
          v27 -= 8;
        }
        while (v27);
        v62 = __s1;
        goto LABEL_84;
      }
    }
    goto LABEL_11;
  }
  v153 = a4;
  v62 = v158;
  __s1 = v158;
  LODWORD(v158[0]) = 5;
  v157 = 0x2000000001;
  v30 = 1;
LABEL_84:
  v63 = *(_QWORD *)(*(_QWORD *)(v9 + 832)
                  + 8 * ((*(_DWORD *)(v9 + 840) - 1) & sub_1C4F5AB38(v62, (uint64_t)v62 + 4 * v30)));
  p_s1 = &v161;
  v160 = (void *)0x2000000000;
  v64 = __s1;
  if (v63)
    v65 = (v63 & 1) == 0;
  else
    v65 = 0;
  if (v65)
  {
    v66 = v157;
    v67 = 4 * v157;
    while (1)
    {
      v70 = v63;
      if (*(_QWORD *)(v63 + 16) == v66 && !memcmp(v64, *(const void **)(v63 + 8), v67))
        break;
      LODWORD(v160) = 0;
      v68 = *(_QWORD *)v70;
      if (v68)
        v69 = (v68 & 1) == 0;
      else
        v69 = 0;
      v63 = v68;
      if (!v69)
      {
        v70 = 0;
        break;
      }
    }
    v9 = (uint64_t)v151;
  }
  else
  {
    v70 = 0;
  }
  if (v64 == v158)
  {
    if (v70)
      goto LABEL_100;
  }
  else
  {
    free(v64);
    if (v70)
    {
LABEL_100:
      AddRecExpr = v70;
      if ((a3 & ~*(unsigned __int16 *)(v70 + 28)) != 0)
        *(_WORD *)(v70 + 28) |= sub_1C4F17BCC((llvm::ScalarEvolution *)v9, 5, *(uint64_t **)v149, v149[2], a3);
      return AddRecExpr;
    }
  }
  v71 = *(uint64_t **)v149;
  v72 = **(llvm::SCEV ***)v149;
  if (*((_WORD *)v72 + 12))
    v73 = 0;
  else
    v73 = **(_QWORD **)v149;
  if (v73)
    v74 = v149[2] == 2;
  else
    v74 = 0;
  if (!v74)
    goto LABEL_155;
  v75 = v71[1];
  if (v75)
    v76 = *(unsigned __int16 *)(v75 + 24) == 4;
  else
    v76 = 0;
  if (v76 && *(_QWORD *)(v75 + 40) == 2)
  {
    LOBYTE(__s1) = 0;
    p_s1 = &__s1;
    v160 = v162;
    v161 = 0x800000000;
    v163 = v167;
    v164 = v167;
    v165 = 8;
    v166 = 0;
    sub_1C4F547EC((uint64_t)&p_s1, v75);
    if ((_DWORD)v161 && !*(_BYTE *)p_s1)
    {
      v77 = *((_QWORD *)v160 + v161 - 1);
      LODWORD(v161) = v161 - 1;
      __asm { BR              X10 }
    }
    v78 = __s1;
    if (v164 != v163)
      free(v164);
    if (v160 != v162)
      free(v160);
    if (v78)
    {
      v79 = v153 + 1;
      v80 = sub_1C4E0AE60(v9, v73, **(_QWORD **)(v75 + 32), 0, v79);
      v81 = sub_1C4E0AE60(v9, v73, *(_QWORD *)(*(_QWORD *)(v75 + 32) + 8), 0, v79);
      return sub_1C4E0AF14(v9, v80, v81, 0, v79);
    }
    v71 = *(uint64_t **)v149;
    v72 = **(llvm::SCEV ***)v149;
  }
  if (!llvm::SCEV::isAllOnesValue(v72))
    goto LABEL_155;
  v82 = v71[1];
  v83 = *(unsigned __int16 *)(v82 + 24);
  if (v82)
    v84 = v83 == 4;
  else
    v84 = 0;
  if (!v84)
  {
    if (v82 && v83 == 7)
    {
      p_s1 = &v161;
      v160 = (void *)0x400000000;
      v85 = *(_QWORD *)(v82 + 40);
      if (v85)
      {
        v86 = *(_QWORD **)(v82 + 32);
        v87 = 8 * v85;
        do
        {
          v88 = sub_1C4E0AE60(v9, **(_QWORD **)v149, *v86, 0, v153 + 1);
          v89 = v160;
          if (v160 >= (unint64_t)HIDWORD(v160))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_s1, (uint64_t)&v161, v160 + 1, 8);
            v89 = v160;
          }
          *((_QWORD *)p_s1 + v89) = v88;
          LODWORD(v160) = (_DWORD)v160 + 1;
          ++v86;
          v87 -= 8;
        }
        while (v87);
      }
      AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v9, (uint64_t **)&p_s1, *(uint64_t ***)(v82 + 48));
      if (p_s1 != &v161)
        free(p_s1);
      return AddRecExpr;
    }
LABEL_155:
    LODWORD(v99) = v149[2];
    if (v99 <= v13)
    {
      v104 = a3;
    }
    else
    {
      v100 = *(uint64_t **)v149;
      v101 = v13;
      while (1)
      {
        v102 = v100[v101];
        v103 = *(unsigned __int16 *)(v102 + 24);
        if (v103 >= 5)
          break;
        ++v101;
        if ((_DWORD)v99 == ++v13)
          goto LABEL_213;
      }
      v104 = a3;
      if (v103 == 5 && v99 <= dword_1ED7F37B8)
      {
        v140 = &v100[v101];
        do
        {
          v141 = &v100[v99];
          if (v141 != v140 + 1)
          {
            memmove(v140, v140 + 1, (char *)v141 - (char *)(v140 + 1));
            LODWORD(v99) = v149[2];
          }
          v142 = (v99 - 1);
          v149[2] = v142;
          v143 = *(const void **)(v102 + 32);
          v99 = *(_QWORD *)(v102 + 40);
          if (v99 + v142 > v149[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v149, (uint64_t)(v149 + 4), v99 + v142, 8);
            LODWORD(v142) = v149[2];
          }
          v100 = *(uint64_t **)v149;
          if (v99)
          {
            memcpy(&v100[v142], v143, 8 * v99);
            LODWORD(v142) = v149[2];
            v100 = *(uint64_t **)v149;
          }
          LODWORD(v99) = v142 + v99;
          v149[2] = v99;
          v140 = &v100[v101];
          v102 = v100[v101];
          if (v102)
            v144 = *(unsigned __int16 *)(v102 + 24) == 5;
          else
            v144 = 0;
        }
        while (v144 && v99 <= dword_1ED7F37B8);
        return llvm::ScalarEvolution::getMulExpr(v9, v149, 0, v153 + 1);
      }
    }
    if (v99 <= v13)
    {
      a3 = v104;
      v106 = v153;
    }
    else
    {
      v105 = *(_QWORD *)v149 + 8 * v13;
      a3 = v104;
      v106 = v153;
      while (*(unsigned __int16 *)(*(_QWORD *)v105 + 24) <= 6u)
      {
        ++v13;
        v105 += 8;
        if ((_DWORD)v99 == v13)
          goto LABEL_213;
      }
    }
    if (v99 > v13)
    {
      v150 = v106 + 1;
      v107 = v13;
      do
      {
        v108 = *(uint64_t **)v149;
        if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v149 + 8 * v107) + 24) != 7)
          break;
        v109 = v107;
        v110 = 0;
        p_s1 = &v161;
        v160 = (void *)0x800000000;
        v146 = v109;
        v111 = (_QWORD *)v108[v109];
        v112 = (const llvm::BasicBlock ***)v111[6];
        do
        {
          v113 = v111;
          v114 = *(const llvm::SCEV **)(*(_QWORD *)v149 + 8 * v110);
          if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v9, v114, (const llvm::Loop *)v112) == 1&& llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)v9, v114, *v112[4]) == 2)
          {
            v115 = *(_QWORD *)(*(_QWORD *)v149 + 8 * v110);
            v116 = v160;
            if (v160 >= (unint64_t)HIDWORD(v160))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_s1, (uint64_t)&v161, v160 + 1, 8);
              v116 = v160;
            }
            *((_QWORD *)p_s1 + v116) = v115;
            LODWORD(v160) = (_DWORD)v160 + 1;
            v117 = *(_QWORD *)v149 + 8 * v110;
            v118 = v149[2];
            v119 = *(_QWORD *)v149 + 8 * v118;
            if (v119 != v117 + 8)
            {
              memmove((void *)v117, (const void *)(v117 + 8), v119 - (v117 + 8));
              LODWORD(v118) = v149[2];
            }
            v149[2] = v118 - 1;
            --v110;
            LODWORD(v99) = v99 - 1;
          }
          v111 = v113;
          ++v110;
        }
        while (v110 != (_DWORD)v99);
        if ((_DWORD)v160)
        {
          __s1 = v158;
          v157 = 0x400000000;
          v120 = v113[5];
          if (v120 >= 5)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v158, v120, 8);
          MulExpr = (void *)llvm::ScalarEvolution::getMulExpr(v9, &p_s1, 0, v150);
          if (*((_DWORD *)v113 + 10))
          {
            v122 = 0;
            v123 = 8 * *((unsigned int *)v113 + 10);
            do
            {
              v124 = sub_1C4E0AE60(v9, MulExpr, *(_QWORD *)(v111[4] + v122), 0, v150);
              v125 = v157;
              if (v157 >= (unint64_t)HIDWORD(v157))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v158, v157 + 1, 8);
                v125 = v157;
              }
              *((_QWORD *)__s1 + v125) = v124;
              LODWORD(v157) = v157 + 1;
              v122 += 8;
              v111 = v113;
            }
            while (v123 != v122);
          }
          v154 = MulExpr;
          v155 = v111;
          sub_1C4F17BCC((llvm::ScalarEvolution *)v9, 5, (uint64_t *)&v154, 2, a3);
          v126 = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v9, (uint64_t **)&__s1, (uint64_t **)v112);
          if (v149[2] == 1)
          {
            AddRecExpr = v126;
            v127 = v146;
          }
          else
          {
            v131 = 0;
            v132 = *(uint64_t **)v149;
            v127 = v146;
            do
            {
              v133 = v131;
              v134 = v132[v131++];
            }
            while ((_QWORD *)v134 != v111);
            v132[v133] = v126;
            AddRecExpr = llvm::ScalarEvolution::getMulExpr(v9, v149, 0, v150);
          }
          if (__s1 != v158)
            free(__s1);
          v130 = 1;
        }
        else
        {
          v127 = v146;
          v128 = v146 + 1;
          v129 = v149[2];
          if (v146 + 1 == v129)
          {
            v130 = 0;
          }
          else
          {
            do
            {
              v135 = *(_QWORD *)(*(_QWORD *)v149 + 8 * v128);
              if (*(_WORD *)(v135 + 24) != 7)
                break;
              if (*(const llvm::BasicBlock ****)(v135 + 48) == v112
                && v113[5] + *(_QWORD *)(v135 + 40) - 1 <= (unint64_t)dword_1ED7F3DB8)
              {
                v136 = 0;
                v137 = 0;
                __s1 = v113;
                v157 = v135;
                while (1)
                {
                  v138 = v136;
                  if (dword_1ED7F3E78 <= *((unsigned __int16 *)*(&__s1 + v137) + 13))
                    break;
                  v136 = 1;
                  v137 = 1;
                  if ((v138 & 1) != 0)
                    __asm { BR              X10 }
                }
              }
              ++v128;
            }
            while ((_DWORD)v129 != v128);
            v130 = 0;
          }
        }
        if (p_s1 != &v161)
          free(p_s1);
        if (v130)
          return AddRecExpr;
        v107 = v127 + 1;
        v99 = v149[2];
      }
      while (v107 < v99);
    }
LABEL_213:
    v139 = *(uint64_t **)v149;
    v15 = v99;
    v16 = sub_1C4F17BCC((llvm::ScalarEvolution *)v9, 5, *(uint64_t **)v149, v99, a3);
    v17 = v9;
    v18 = v139;
    return llvm::ScalarEvolution::getOrCreateMulExpr(v17, v18, v15, v16);
  }
  p_s1 = &v161;
  v160 = (void *)0x400000000;
  v90 = *(_QWORD *)(v82 + 40);
  if (v90)
  {
    v147 = a3;
    v91 = 0;
    v92 = *(_QWORD **)(v82 + 32);
    v93 = v153 + 1;
    v94 = 8 * v90;
    do
    {
      v95 = sub_1C4E0AE60(v9, **(_QWORD **)v149, *v92, 0, v93);
      v96 = *(unsigned __int16 *)(v95 + 24) != 5;
      v97 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_s1, (uint64_t)&v161, v160 + 1, 8);
        v97 = v160;
      }
      *((_QWORD *)p_s1 + v97) = v95;
      v91 |= v96;
      LODWORD(v160) = (_DWORD)v160 + 1;
      ++v92;
      v94 -= 8;
    }
    while (v94);
    if ((v91 & 1) != 0)
    {
      AddRecExpr = llvm::ScalarEvolution::getAddExpr(v9, (uint64_t)&p_s1, 0, v93);
      v98 = 1;
    }
    else
    {
      v98 = 0;
    }
    a3 = v147;
  }
  else
  {
    v98 = 0;
  }
  if (p_s1 != &v161)
    free(p_s1);
  if ((v98 & 1) == 0)
    goto LABEL_155;
  return AddRecExpr;
}

unint64_t llvm::ScalarEvolution::getAddRecExpr(uint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t **v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  llvm::APInt *v24;
  unsigned int v25;
  uint64_t **v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t AddRecExpr;
  const llvm::SCEV **v32;
  uint64_t v33;
  int v34;
  void *v36;
  uint64_t v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)a2 + 2);
  v4 = *a2;
  if ((_DWORD)v3 == 1)
    return *v4;
  v9 = v4[v3 - 1];
  if (v9)
    v10 = *(unsigned __int16 *)(v9 + 24) == 0;
  else
    v10 = 0;
  if (v10)
  {
    v22 = v3 - 1;
    while (1)
    {
      v23 = *(_QWORD *)(v9 + 32);
      v24 = (llvm::APInt *)(v23 + 24);
      v25 = *(_DWORD *)(v23 + 32);
      if (v25 >= 0x41)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v24) != v25)
          break;
      }
      else if (*(_QWORD *)v24)
      {
        break;
      }
      *((_DWORD *)a2 + 2) = v22;
      if (v22 == 1)
        return *v4;
      v9 = v4[v22 - 1];
      if (v9)
      {
        --v22;
        if (!*(_WORD *)(v9 + 24))
          continue;
      }
      break;
    }
  }
  v11 = sub_1C4F17BCC((llvm::ScalarEvolution *)a1);
  v12 = **a2;
  if (v12)
    v13 = *(unsigned __int16 *)(v12 + 24) == 7;
  else
    v13 = 0;
  if (!v13)
    return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v11);
  v5 = *(uint64_t ***)(v12 + 48);
  if (v5 == a3)
  {
LABEL_16:
    v15 = 0;
    v16 = a3;
    do
    {
      v16 = (uint64_t **)*v16;
      ++v15;
    }
    while (v16);
    v17 = *(_QWORD **)(v12 + 48);
    do
    {
      v17 = (_QWORD *)*v17;
      LODWORD(v16) = (_DWORD)v16 + 1;
    }
    while (v17);
    if (v15 >= v16)
      return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v11);
  }
  else
  {
    v14 = *(uint64_t ***)(v12 + 48);
    while (v14)
    {
      v14 = (uint64_t **)*v14;
      if (v14 == a3)
        goto LABEL_16;
    }
    v26 = a3;
    while (v26)
    {
      v26 = (uint64_t **)*v26;
      if (v26 == v5)
        return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v11);
    }
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1[4], *a3[4], *v5[4]))
      return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v11);
  }
  v19 = *(uint64_t **)(v12 + 32);
  v18 = *(_QWORD *)(v12 + 40);
  v36 = v38;
  v37 = 0x400000000;
  if (v18 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v18, 8);
    v20 = v37;
    v21 = v36;
    goto LABEL_38;
  }
  if (v18)
  {
    v20 = 0;
    v21 = v38;
LABEL_38:
    memcpy(&v21[v20], v19, 8 * v18);
    v27 = v37;
    v19 = *(uint64_t **)(v12 + 32);
    goto LABEL_39;
  }
  v27 = 0;
LABEL_39:
  LODWORD(v37) = v27 + v18;
  **a2 = *v19;
  v28 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v28)
  {
    v29 = *a2;
    v30 = 8 * v28;
    while (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)*v29, (const llvm::Loop *)a3) == 1)
    {
      ++v29;
      v30 -= 8;
      if (!v30)
        goto LABEL_43;
    }
  }
  else
  {
LABEL_43:
    AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a1, a2, a3, v11 & (*(_WORD *)(v12 + 28) & 6 | 1u));
    *(_QWORD *)v36 = AddRecExpr;
    if (!(_DWORD)v37)
    {
LABEL_47:
      v5 = (uint64_t **)llvm::ScalarEvolution::getAddRecExpr(a1, &v36, v5, *(_WORD *)(v12 + 28) & ((unsigned __int16)v11 | 1) & 7);
      v34 = 0;
      goto LABEL_49;
    }
    v32 = (const llvm::SCEV **)v36;
    v33 = 8 * v37;
    while (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, *v32, (const llvm::Loop *)v5) == 1)
    {
      ++v32;
      v33 -= 8;
      if (!v33)
        goto LABEL_47;
    }
  }
  **a2 = v12;
  v34 = 1;
LABEL_49:
  if (v36 != v38)
    free(v36);
  if (v34)
    return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v11);
  return (unint64_t)v5;
}

uint64_t llvm::ScalarEvolution::GetMinTrailingZeros(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const llvm::SCEV *v9;
  int v10;
  int v11;
  int MinTrailingZerosImpl;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  const llvm::SCEV *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t *v23;
  int v24;
  const llvm::SCEV *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  const llvm::SCEV *v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  const llvm::SCEV *v37;
  int v38;
  BOOL v39;
  unsigned int v40;

  v4 = *((_QWORD *)this + 65);
  v5 = *((unsigned int *)this + 134);
  v6 = a2 >> 4;
  if ((_DWORD)v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = v4 + 16 * v7;
    v9 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != (const llvm::SCEV *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(const llvm::SCEV **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = v4 + 16 * v7;
        goto LABEL_8;
      }
    }
  }
  v8 = v4 + 16 * v5;
LABEL_8:
  if (v8 != v4 + 16 * v5)
    return *(unsigned int *)(v8 + 8);
  MinTrailingZerosImpl = llvm::ScalarEvolution::GetMinTrailingZerosImpl(this, (const llvm::SCEV **)a2);
  v14 = *((_DWORD *)this + 134);
  if (v14)
  {
    v15 = *((_QWORD *)this + 65);
    v16 = v14 - 1;
    v17 = (v14 - 1) & (v6 ^ (a2 >> 9));
    v8 = v15 + 16 * v17;
    v18 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 == a2)
      return *(unsigned int *)(v8 + 8);
    v19 = 0;
    v20 = 1;
    while (v18 != (const llvm::SCEV *)-4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == (const llvm::SCEV *)-8192;
      if (v21)
        v19 = v8;
      v22 = v17 + v20++;
      v17 = v22 & v16;
      v8 = v15 + 16 * (v22 & v16);
      v18 = *(const llvm::SCEV **)v8;
      if (*(const llvm::SCEV **)v8 == a2)
        return *(unsigned int *)(v8 + 8);
    }
    if (v19)
      v8 = v19;
  }
  else
  {
    v8 = 0;
  }
  v23 = (uint64_t *)((char *)this + 520);
  v24 = *((_DWORD *)this + 132);
  if (4 * v24 + 4 >= 3 * v14)
  {
    sub_1C4DC1944(v23, 2 * v14);
    v26 = *((_QWORD *)this + 65);
    v27 = *((_DWORD *)this + 134) - 1;
    v28 = v27 & (v6 ^ (a2 >> 9));
    v8 = v26 + 16 * v28;
    v29 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 != a2)
    {
      v30 = 0;
      v31 = 1;
      while (v29 != (const llvm::SCEV *)-4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == (const llvm::SCEV *)-8192;
        if (v32)
          v30 = v8;
        v33 = v28 + v31++;
        v28 = v33 & v27;
        v8 = v26 + 16 * (v33 & v27);
        v29 = *(const llvm::SCEV **)v8;
        if (*(const llvm::SCEV **)v8 == a2)
          goto LABEL_38;
      }
      goto LABEL_50;
    }
LABEL_38:
    v25 = a2;
    goto LABEL_26;
  }
  if (v14 + ~v24 - *((_DWORD *)this + 133) <= v14 >> 3)
  {
    sub_1C4DC1944(v23, v14);
    v34 = *((_QWORD *)this + 65);
    v35 = *((_DWORD *)this + 134) - 1;
    v36 = v35 & (v6 ^ (a2 >> 9));
    v8 = v34 + 16 * v36;
    v37 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 != a2)
    {
      v30 = 0;
      v38 = 1;
      while (v37 != (const llvm::SCEV *)-4096)
      {
        if (v30)
          v39 = 0;
        else
          v39 = v37 == (const llvm::SCEV *)-8192;
        if (v39)
          v30 = v8;
        v40 = v36 + v38++;
        v36 = v40 & v35;
        v8 = v34 + 16 * (v40 & v35);
        v37 = *(const llvm::SCEV **)v8;
        if (*(const llvm::SCEV **)v8 == a2)
          goto LABEL_38;
      }
LABEL_50:
      if (v30)
        v8 = v30;
      goto LABEL_25;
    }
    goto LABEL_38;
  }
LABEL_25:
  v25 = *(const llvm::SCEV **)v8;
LABEL_26:
  ++*((_DWORD *)this + 132);
  if (v25 != (const llvm::SCEV *)-4096)
    --*((_DWORD *)this + 133);
  *(_QWORD *)v8 = a2;
  *(_DWORD *)(v8 + 8) = MinTrailingZerosImpl;
  return *(unsigned int *)(v8 + 8);
}

void llvm::ScalarEvolution::getTypeSizeInBits(llvm::ScalarEvolution *this, llvm::Type *a2)
{
  uint64_t v2;
  const char *v3;

  v2 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
  if (*((_BYTE *)a2 + 8) == 15)
  {
    llvm::DataLayout::getIndexTypeSizeInBits(v2, (uint64_t)a2);
  }
  else
  {
    sub_1C4768AD0(v2, (uint64_t)a2);
    if ((_DWORD)v3 == 1)
  }
}

unint64_t llvm::ScalarEvolution::getZeroExtendExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::UndefValue *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t IndexTypeSizeInBits;
  BOOL v14;
  _BYTE *v15;
  BOOL v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  llvm::SCEV *v44;
  int v45;
  const llvm::SCEV *v46;
  uint64_t RangeRef;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  const char *v54;
  unsigned int v55;
  unsigned int v56;
  _BOOL4 v57;
  unsigned int v58;
  const llvm::SCEV *ZeroExtendExpr;
  const llvm::SCEV *v60;
  const llvm::SCEV *UDivExpr;
  llvm::SCEV *v62;
  int v63;
  unsigned int v64;
  const llvm::SCEV *v65;
  const llvm::SCEV *v66;
  uint64_t v68;
  const llvm::APInt *v69;
  unsigned int v70;
  void *v71;
  int v72;
  int64_t v73;
  unint64_t v75;
  int v76;
  const llvm::SCEV *Constant;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const llvm::SCEV **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t AddExpr;
  unint64_t v86;
  const llvm::APInt *v87;
  unint64_t v88;
  const llvm::SCEV *v89;
  uint64_t v90;
  char v91;
  const llvm::SCEV **v92;
  const llvm::SCEV *v93;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  void *v98;
  size_t v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  int *v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  __int16 v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const llvm::SCEV **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int8x8_t *v118;
  uint64_t v119;
  uint8x8_t v120;
  int v121;
  unint64_t v122;
  int8x8_t *v123;
  int8x8_t v124;
  uint8x8_t v125;
  const llvm::SCEV *v126;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  int v131;
  int v132;
  llvm::APInt *v133;
  int v134;
  int v135;
  _QWORD *v136;
  llvm::Type *v137;
  uint64_t v138;
  const llvm::SCEV *TruncateExpr;
  uint64_t v140;
  _DWORD *v141;
  _DWORD *v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int v151;
  llvm::SCEV *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  void *v157;
  uint64_t v158;
  _BYTE v159[120];
  void *__s1;
  uint64_t v161;
  _BYTE v162[12];
  void *__src;
  uint64_t v164;
  void *v165;
  unsigned int v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    if (*((_BYTE *)a3 + 8) != 13)
    {
      llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), a3);
      a3 = v8;
    }
    if (a2 && !*((_WORD *)a2 + 12))
      break;
    if (!a2 || *((_WORD *)a2 + 12) != 2)
    {
      v152 = a2;
      v157 = v159;
      *(_DWORD *)v159 = 2;
      *(_QWORD *)&v159[4] = a2;
      *(_QWORD *)&v159[12] = a3;
      v158 = 0x2000000005;
      v27 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v145 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v145 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v145;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v28 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)v159 - *(_QWORD *)&v159[8], 43)
          - 0x3C5A37A36834CED9 * *(_QWORD *)&v159[4]
          + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)&v159[12]) ^ qword_1ED7EAC80, 30);
      v29 = qword_1ED7EAC80
          + __ROR8__(*(_QWORD *)&v159[8] ^ 0xC949D7C7509E6557, 20)
          - 0x4B6D499041670D8DLL * *(_QWORD *)v159
          - 0x9AE16A3B2F90404FLL * *(_QWORD *)&v159[12]
          + 20;
      v30 = 0x9DDFEA08EB382D69
          * (v29 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v29)));
      v31 = *((_QWORD *)this + 104)
          + 8 * ((-348639895 * ((v30 >> 47) ^ v30)) & (*((_DWORD *)this + 210) - 1));
      IndexTypeSizeInBits = *(_QWORD *)v31;
      __src = &v165;
      v164 = 0x2000000000;
      if (IndexTypeSizeInBits)
        v32 = (IndexTypeSizeInBits & 1) == 0;
      else
        v32 = 0;
      if (v32)
      {
        while (*(_QWORD *)(IndexTypeSizeInBits + 16) != v158
             || memcmp(v157, *(const void **)(IndexTypeSizeInBits + 8), 4 * v158))
        {
          LODWORD(v164) = 0;
          IndexTypeSizeInBits = *(_QWORD *)IndexTypeSizeInBits;
          if (IndexTypeSizeInBits)
            v33 = (IndexTypeSizeInBits & 1) == 0;
          else
            v33 = 0;
          if (!v33)
            goto LABEL_42;
        }
        goto LABEL_85;
      }
LABEL_42:
      if (dword_1ED7F3CF8 < a4)
      {
        IndexTypeSizeInBits = sub_1C484358C((uint64_t)this + 864, 48, 3);
        v34 = sub_1C484358C((uint64_t)this + 864, 4 * v158, 2);
        v35 = (int *)v157;
        v36 = 4 * v158;
        v37 = (_DWORD *)v34;
        do
        {
          v38 = *v35++;
          *v37++ = v38;
          v36 -= 4;
        }
        while (v36);
        v39 = v158;
        __src = v152;
        v40 = sub_1C4F03F00((uint64_t)&__src, 1);
        *(_QWORD *)IndexTypeSizeInBits = 0;
        *(_QWORD *)(IndexTypeSizeInBits + 8) = v34;
        *(_QWORD *)(IndexTypeSizeInBits + 16) = v39;
        *(_WORD *)(IndexTypeSizeInBits + 24) = 2;
        *(_WORD *)(IndexTypeSizeInBits + 26) = v40;
        *(_WORD *)(IndexTypeSizeInBits + 28) = 0;
        *(_QWORD *)(IndexTypeSizeInBits + 32) = __src;
        *(_QWORD *)(IndexTypeSizeInBits + 40) = a3;
        v41 = *((_DWORD *)this + 211) + 1;
        v42 = *((_DWORD *)this + 210);
        if (v41 > 2 * v42)
        {
          llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v42, (uint64_t)off_1E813B300);
          __src = &v165;
          v164 = 0x2000000000;
          v31 = *((_QWORD *)this + 104)
              + 8
              * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(IndexTypeSizeInBits + 8), *(_QWORD *)(IndexTypeSizeInBits + 8)+ 4 * *(_QWORD *)(IndexTypeSizeInBits + 16)));
          if (__src != &v165)
            free(__src);
          v41 = *((_DWORD *)this + 211) + 1;
        }
        *((_DWORD *)this + 211) = v41;
        v43 = *(_QWORD *)v31;
        if (!*(_QWORD *)v31)
          v43 = v31 | 1;
        *(_QWORD *)IndexTypeSizeInBits = v43;
        *(_QWORD *)v31 = IndexTypeSizeInBits;
        goto LABEL_49;
      }
      v44 = v152;
      v45 = *((unsigned __int16 *)v152 + 12);
      if (v152 && v45 == 1)
      {
        v46 = (const llvm::SCEV *)*((_QWORD *)v152 + 4);
        RangeRef = llvm::ScalarEvolution::getRangeRef(this, v46, 0, 0);
        v48 = RangeRef;
        LODWORD(v164) = *(_DWORD *)(RangeRef + 8);
        if (v164 > 0x40)
        {
          __src = (void *)operator new[]();
          memcpy(__src, *(const void **)v48, (((unint64_t)v164 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __src = *(void **)RangeRef;
        }
        v166 = *(_DWORD *)(v48 + 24);
        if (v166 > 0x40)
        {
          v165 = (void *)operator new[]();
          memcpy(v165, *(const void **)(v48 + 16), (((unint64_t)v166 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v165 = *(void **)(v48 + 16);
        }
        v49 = *((_QWORD *)v152 + 5);
        v50 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*(_BYTE *)(v49 + 8) == 15)
        {
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v50, v49);
        }
        else
        {
          sub_1C4768AD0(v50, v49);
          IndexTypeSizeInBits = v52;
          if ((_DWORD)v51 == 1)
        }
        v53 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*((_BYTE *)a3 + 8) == 15)
        {
          v56 = llvm::DataLayout::getIndexTypeSizeInBits(v53, (uint64_t)a3);
        }
        else
        {
          sub_1C4768AD0(v53, (uint64_t)a3);
          v56 = v55;
          if ((_DWORD)v54 == 1)
        }
        llvm::ConstantRange::truncate((llvm::ConstantRange *)&__src, IndexTypeSizeInBits, (uint64_t)&v153);
        llvm::ConstantRange::zeroExtend((llvm::ConstantRange *)&v153, v56, (uint64_t)&__s1);
        llvm::ConstantRange::zextOrTrunc((llvm::ConstantRange *)&__src, v56, &v148);
        v57 = llvm::ConstantRange::contains((llvm::ConstantRange *)&__s1, (const llvm::ConstantRange *)&v148);
        if (v151 >= 0x41 && v150)
          MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
        if (v149 >= 0x41 && v148)
          MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
        if (*(_DWORD *)&v162[8] >= 0x41u && *(_QWORD *)v162)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v162, 0x1000C8000313F17);
        if (v161 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        if (v156 >= 0x41 && v155)
          MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
        if (v154 >= 0x41 && v153)
          MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
        if (v57)
          IndexTypeSizeInBits = llvm::ScalarEvolution::getTruncateOrZeroExtend(this, v46, a3, a4);
        if (v166 >= 0x41 && v165)
          MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
        if (v164 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (!v57)
        {
          v44 = v152;
          v45 = *((unsigned __int16 *)v152 + 12);
          goto LABEL_74;
        }
LABEL_85:
        v26 = v157;
        if (v157 == v159)
          return IndexTypeSizeInBits;
LABEL_86:
        free(v26);
        return IndexTypeSizeInBits;
      }
LABEL_74:
      if (v45 == 7 && *((_QWORD *)v44 + 5) == 2)
        __asm { BR              X11 }
      __src = 0;
      __s1 = 0;
      if (llvm::ScalarEvolution::matchURem(this, v44, (const llvm::SCEV **)&__src, (const llvm::SCEV **)&__s1))
      {
        v58 = a4 + 1;
        ZeroExtendExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)__src, a3, v58);
        v60 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)__s1, a3, v58);
        llvm::ScalarEvolution::getURemExpr(this, ZeroExtendExpr, v60);
LABEL_84:
        IndexTypeSizeInBits = (unint64_t)UDivExpr;
        goto LABEL_85;
      }
      v62 = v152;
      v63 = *((unsigned __int16 *)v152 + 12);
      if (v152 && v63 == 6)
      {
        v64 = a4 + 1;
        v65 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, *((const llvm::SCEV **)v152 + 4), a3, v64);
        v66 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, *((const llvm::SCEV **)v62 + 5), a3, v64);
        UDivExpr = llvm::ScalarEvolution::getUDivExpr(this, v65, v66);
        goto LABEL_84;
      }
      if (!v152 || v63 != 4)
        goto LABEL_127;
      if ((*((_WORD *)v152 + 14) & 2) != 0)
      {
        __src = &v165;
        v164 = 0x400000000;
        v79 = *((_QWORD *)v152 + 5);
        v80 = (a4 + 1);
        if (v79)
        {
          v81 = (const llvm::SCEV **)*((_QWORD *)v152 + 4);
          v82 = 8 * v79;
          do
          {
            v83 = llvm::ScalarEvolution::getZeroExtendExpr(this, *v81, a3, v80);
            v84 = v164;
            if (v164 >= (unint64_t)HIDWORD(v164))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v165, v164 + 1, 8);
              v84 = v164;
            }
            *((_QWORD *)__src + v84) = v83;
            LODWORD(v164) = v164 + 1;
            ++v81;
            v82 -= 8;
          }
          while (v82);
        }
        AddExpr = llvm::ScalarEvolution::getAddExpr(this, &__src, 2, v80);
      }
      else
      {
        v68 = **((_QWORD **)v152 + 4);
        if (!v68 || *(_WORD *)(v68 + 24))
          goto LABEL_134;
        sub_1C4F13D9C((llvm::APInt *)&__src, this, *(_QWORD *)(v68 + 32), (uint64_t)v152);
        v70 = v164;
        v71 = __src;
        if (v164 < 0x41)
          goto LABEL_101;
        v72 = 0;
        v73 = ((unint64_t)v164 + 63) >> 6;
        do
        {
          if (v73-- < 1)
            break;
          v75 = *((_QWORD *)__src + v73);
          v72 += __clz(v75);
        }
        while (!v75);
        v76 = v164 | 0xFFFFFFC0;
        if ((v164 & 0x3F) == 0)
          v76 = 0;
        if ((v164 - v72 - v76) > 0x40)
          goto LABEL_102;
        v71 = *(void **)__src;
LABEL_101:
        if (v71)
        {
LABEL_102:
          Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&__src, v69);
          v78 = llvm::ScalarEvolution::getZeroExtendExpr(this, Constant, a3, a4);
          v147 = v164;
          if (v164 > 0x40)
          {
            v146 = (void *)operator new[]();
            memcpy(v146, __src, (((unint64_t)v147 + 63) >> 3) & 0x3FFFFFF8);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v146);
          }
          else
          {
            v86 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v164;
            if (!(_DWORD)v164)
              v86 = 0;
            v146 = (void *)(v86 & ~(unint64_t)__src);
          }
          llvm::APInt::operator++((uint64_t)&v146);
          LODWORD(v161) = v147;
          __s1 = v146;
          v147 = 0;
          v88 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&__s1, v87);
          v89 = (const llvm::SCEV *)sub_1C4E0AF14(this, v88, v62, 0, a4);
          if (v161 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          if (v147 >= 0x41 && v146)
            MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
          v90 = llvm::ScalarEvolution::getZeroExtendExpr(this, v89, a3, (int)a4 + 1);
          IndexTypeSizeInBits = sub_1C4E0AF14(this, v78, v90, 6, (a4 + 1));
          v91 = 1;
          v70 = v164;
        }
        else
        {
          v91 = 0;
        }
        if (v70 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if ((v91 & 1) != 0)
          goto LABEL_85;
        v62 = v152;
        v63 = *((unsigned __int16 *)v152 + 12);
LABEL_127:
        if (v63 != 5)
          goto LABEL_134;
        if ((*((_WORD *)v62 + 14) & 2) == 0)
        {
          if (*((_QWORD *)v62 + 5) != 2)
            goto LABEL_134;
          v92 = (const llvm::SCEV **)*((_QWORD *)v62 + 4);
          v93 = *v92;
          if (!*v92 || *((_WORD *)*v92 + 12) != 0)
            goto LABEL_134;
          v118 = (int8x8_t *)*((_QWORD *)v93 + 4);
          v119 = v118[4].u32[0];
          if (v119 > 0x40)
          {
            v121 = 0;
            v122 = (unint64_t)(v119 + 63) >> 6;
            v123 = (int8x8_t *)v118[3];
            do
            {
              v124 = *v123++;
              v125 = (uint8x8_t)vcnt_s8(v124);
              v125.i16[0] = vaddlv_u8(v125);
              v121 += v125.i32[0];
              --v122;
            }
            while (v122);
            if (v121 != 1)
              goto LABEL_134;
          }
          else
          {
            v120 = (uint8x8_t)vcnt_s8(v118[3]);
            v120.i16[0] = vaddlv_u8(v120);
            if (v120.u32[0] != 1)
              goto LABEL_134;
          }
          v126 = v92[1];
          if (!v126 || *((_WORD *)v126 + 12) != 1)
          {
LABEL_134:
            v95 = *((_QWORD *)this + 104)
                + 8
                * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(v157, (uint64_t)v157 + 4 * v158));
            IndexTypeSizeInBits = *(_QWORD *)v95;
            __src = &v165;
            v164 = 0x2000000000;
            if (IndexTypeSizeInBits)
              v96 = (IndexTypeSizeInBits & 1) == 0;
            else
              v96 = 0;
            if (v96)
            {
              v97 = v158;
              v98 = v157;
              v99 = 4 * v158;
              while (*(_QWORD *)(IndexTypeSizeInBits + 16) != v97
                   || memcmp(v98, *(const void **)(IndexTypeSizeInBits + 8), v99))
              {
                LODWORD(v164) = 0;
                IndexTypeSizeInBits = *(_QWORD *)IndexTypeSizeInBits;
                if (IndexTypeSizeInBits)
                  v100 = (IndexTypeSizeInBits & 1) == 0;
                else
                  v100 = 0;
                if (!v100)
                  goto LABEL_146;
              }
            }
            else
            {
LABEL_146:
              IndexTypeSizeInBits = sub_1C484358C((uint64_t)this + 864, 48, 3);
              v101 = sub_1C484358C((uint64_t)this + 864, 4 * v158, 2);
              v102 = v101;
              if ((_DWORD)v158)
              {
                v103 = (int *)v157;
                v104 = 4 * v158;
                v105 = (_DWORD *)v101;
                do
                {
                  v106 = *v103++;
                  *v105++ = v106;
                  v104 -= 4;
                }
                while (v104);
                v107 = v158;
              }
              else
              {
                v107 = 0;
              }
              __src = v152;
              v108 = sub_1C4F03F00((uint64_t)&__src, 1);
              *(_QWORD *)IndexTypeSizeInBits = 0;
              *(_QWORD *)(IndexTypeSizeInBits + 8) = v102;
              *(_QWORD *)(IndexTypeSizeInBits + 16) = v107;
              *(_WORD *)(IndexTypeSizeInBits + 24) = 2;
              *(_WORD *)(IndexTypeSizeInBits + 26) = v108;
              *(_WORD *)(IndexTypeSizeInBits + 28) = 0;
              *(_QWORD *)(IndexTypeSizeInBits + 32) = __src;
              *(_QWORD *)(IndexTypeSizeInBits + 40) = a3;
              v109 = *((_DWORD *)this + 211) + 1;
              v110 = *((_DWORD *)this + 210);
              if (v109 > 2 * v110)
              {
                llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v110, (uint64_t)off_1E813B300);
                __src = &v165;
                v164 = 0x2000000000;
                v95 = *((_QWORD *)this + 104)
                    + 8
                    * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(IndexTypeSizeInBits + 8), *(_QWORD *)(IndexTypeSizeInBits + 8)+ 4 * *(_QWORD *)(IndexTypeSizeInBits + 16)));
                if (__src != &v165)
                  free(__src);
                v109 = *((_DWORD *)this + 211) + 1;
              }
              *((_DWORD *)this + 211) = v109;
              v111 = *(_QWORD *)v95;
              if (!*(_QWORD *)v95)
                v111 = v95 | 1;
              *(_QWORD *)IndexTypeSizeInBits = v111;
              *(_QWORD *)v95 = IndexTypeSizeInBits;
LABEL_49:
              llvm::ScalarEvolution::registerUser(this, IndexTypeSizeInBits, (uint64_t *)&v152, 1);
            }
            goto LABEL_85;
          }
          v128 = *((_QWORD *)v126 + 5);
          v129 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
          if (*(_BYTE *)(v128 + 8) == 15)
          {
            v132 = llvm::DataLayout::getIndexTypeSizeInBits(v129, v128);
          }
          else
          {
            sub_1C4768AD0(v129, v128);
            v132 = v131;
            if ((_DWORD)v130 == 1)
            v118 = (int8x8_t *)*((_QWORD *)v93 + 4);
            LODWORD(v119) = v118[4].i32[0];
          }
          v133 = (llvm::APInt *)&v118[3];
          if (v119 > 0x40)
            v134 = llvm::APInt::countLeadingZerosSlowCase(v133);
          else
            v134 = v119 + __clz(*(_QWORD *)v133) - 64;
          v135 = v132 - v119 + v134 + 1;
          v136 = ***(_QWORD ****)this;
          LODWORD(__src) = v135;
          if (v135 <= 63)
          {
            if (v135 <= 31)
            {
              switch(v132 - (_DWORD)v119 + v134)
              {
                case 15:
                  v137 = (llvm::Type *)(*v136 + 1936);
                  goto LABEL_213;
                case 7:
                  v137 = (llvm::Type *)(*v136 + 1912);
                  goto LABEL_213;
                case 0:
                  v137 = (llvm::Type *)(*v136 + 1888);
                  goto LABEL_213;
              }
            }
            else if (v132 - (_DWORD)v119 + v134 == 31)
            {
              v137 = (llvm::Type *)(*v136 + 1960);
              goto LABEL_213;
            }
          }
          else
          {
            if (v132 - (_DWORD)v119 + v134 == 63)
            {
              v137 = (llvm::Type *)(*v136 + 1984);
LABEL_213:
              v138 = llvm::ScalarEvolution::getZeroExtendExpr(this, v93, a3, 0);
              TruncateExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, *((const llvm::SCEV **)v126 + 4), v137, 0);
              v140 = llvm::ScalarEvolution::getZeroExtendExpr(this, TruncateExpr, a3, 0);
              UDivExpr = (const llvm::SCEV *)sub_1C4E0AE60(this, v138, v140, 2, (a4 + 1));
              goto LABEL_84;
            }
            if (v132 - (_DWORD)v119 + v134 == 127)
            {
              v137 = (llvm::Type *)(*v136 + 2008);
              goto LABEL_213;
            }
          }
          v141 = sub_1C5270984(*v136 + 2168, &__src);
          v137 = (llvm::Type *)*((_QWORD *)v141 + 1);
          if (!v137)
          {
            v142 = v141;
            v137 = (llvm::Type *)sub_1C484358C(*v136 + 2040, 24, 3);
            v143 = (int)__src;
            *(_QWORD *)v137 = v136;
            *((_QWORD *)v137 + 2) = 0;
            *((_QWORD *)v137 + 1) = (v143 << 8) | 0xDu;
            *((_QWORD *)v142 + 1) = v137;
          }
          goto LABEL_213;
        }
        __src = &v165;
        v164 = 0x400000000;
        v112 = *((_QWORD *)v62 + 5);
        v113 = (a4 + 1);
        if (v112)
        {
          v114 = (const llvm::SCEV **)*((_QWORD *)v62 + 4);
          v115 = 8 * v112;
          do
          {
            v116 = llvm::ScalarEvolution::getZeroExtendExpr(this, *v114, a3, v113);
            v117 = v164;
            if (v164 >= (unint64_t)HIDWORD(v164))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v165, v164 + 1, 8);
              v117 = v164;
            }
            *((_QWORD *)__src + v117) = v116;
            LODWORD(v164) = v164 + 1;
            ++v114;
            v115 -= 8;
          }
          while (v115);
        }
        AddExpr = llvm::ScalarEvolution::getMulExpr(this, &__src, 2, v113);
      }
      IndexTypeSizeInBits = AddExpr;
      if (__src != &v165)
        free(__src);
      goto LABEL_85;
    }
    a2 = (const llvm::SCEV *)*((_QWORD *)a2 + 4);
    a4 = (a4 + 1);
  }
  v152 = a2;
  v9 = sub_1C537D3B8((llvm *)0x27, *((_QWORD *)a2 + 4), a3, 0);
  __s1 = v162;
  *(_DWORD *)v162 = 0;
  *(_QWORD *)&v162[4] = v9;
  v161 = 0x2000000003;
  v10 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v144 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v144 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v144;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v11 = __ROR8__(*(_QWORD *)&v162[4] + 12, 12);
  v12 = *((_QWORD *)this + 104)
      + 8
      * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                         * ((((0x9DDFEA08EB382D69
                                                           * (v11 ^ ((0x9DDFEA08EB382D69
                                                                    * (*(_QWORD *)v162 ^ qword_1ED7EAC80 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)v162 ^ qword_1ED7EAC80 ^ v11)))) >> 32) >> 15) ^ (-348639895 * (v11 ^ (((0x9DDFEA08EB382D69 * (*(_QWORD *)v162 ^ qword_1ED7EAC80 ^ v11)) >> 32) >> 15) ^ (-348639895 * (*(_DWORD *)v162 ^ qword_1ED7EAC80 ^ v11)))))) ^ *(_DWORD *)&v162[4]));
  IndexTypeSizeInBits = *(_QWORD *)v12;
  __src = &v165;
  v164 = 0x2000000000;
  if (IndexTypeSizeInBits)
    v14 = (IndexTypeSizeInBits & 1) == 0;
  else
    v14 = 0;
  if (v14)
  {
    v15 = __s1;
    while (*(_QWORD *)(IndexTypeSizeInBits + 16) != v161
         || memcmp(__s1, *(const void **)(IndexTypeSizeInBits + 8), 4 * v161))
    {
      LODWORD(v164) = 0;
      IndexTypeSizeInBits = *(_QWORD *)IndexTypeSizeInBits;
      if (IndexTypeSizeInBits)
        v16 = (IndexTypeSizeInBits & 1) == 0;
      else
        v16 = 0;
      if (!v16)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    IndexTypeSizeInBits = sub_1C484358C((uint64_t)this + 864, 40, 3);
    v17 = sub_1C484358C((uint64_t)this + 864, 4 * v161, 2);
    v18 = (int *)__s1;
    v19 = 4 * v161;
    v20 = (_DWORD *)v17;
    do
    {
      v21 = *v18++;
      *v20++ = v21;
      v19 -= 4;
    }
    while (v19);
    v22 = v161;
    *(_QWORD *)IndexTypeSizeInBits = 0;
    *(_QWORD *)(IndexTypeSizeInBits + 8) = v17;
    *(_QWORD *)(IndexTypeSizeInBits + 16) = v22;
    *(_DWORD *)(IndexTypeSizeInBits + 24) = 0x10000;
    *(_WORD *)(IndexTypeSizeInBits + 28) = 0;
    *(_QWORD *)(IndexTypeSizeInBits + 32) = v9;
    v23 = *((_DWORD *)this + 211) + 1;
    v24 = *((_DWORD *)this + 210);
    if (v23 > 2 * v24)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v24, (uint64_t)off_1E813B300);
      __src = &v165;
      v164 = 0x2000000000;
      v12 = *((_QWORD *)this + 104)
          + 8
          * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(IndexTypeSizeInBits + 8), *(_QWORD *)(IndexTypeSizeInBits + 8)+ 4 * *(_QWORD *)(IndexTypeSizeInBits + 16)));
      if (__src != &v165)
        free(__src);
      v23 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v23;
    v25 = *(_QWORD *)v12;
    if (!*(_QWORD *)v12)
      v25 = v12 | 1;
    *(_QWORD *)IndexTypeSizeInBits = v25;
    *(_QWORD *)v12 = IndexTypeSizeInBits;
    v15 = __s1;
  }
  if (v15 != v162)
  {
    v26 = v15;
    goto LABEL_86;
  }
  return IndexTypeSizeInBits;
}

uint64_t llvm::ScalarEvolution::proveNoWrapViaConstantRanges(llvm::ScalarEvolution *this, const llvm::SCEVAddRecExpr *a2)
{
  __int16 v4;
  uint64_t RangeRef;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  void *v37;
  unsigned int v38;
  void *v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a2 + 5) != 2)
    return 0;
  v4 = *((_WORD *)a2 + 14);
  if ((v4 & 4) != 0)
  {
    v13 = 0;
  }
  else
  {
    RangeRef = llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
    v6 = RangeRef;
    v7 = *(unsigned int *)(RangeRef + 8);
    v38 = v7;
    if (v7 > 0x40)
    {
      v25 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
      v37 = (void *)operator new[]();
      memcpy(v37, *(const void **)v6, v25);
    }
    else
    {
      v37 = *(void **)RangeRef;
    }
    v8 = *(unsigned int *)(v6 + 24);
    v40 = v8;
    if (v8 > 0x40)
    {
      v26 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
      v39 = (void *)operator new[]();
      memcpy(v39, *(const void **)(v6 + 16), v26);
    }
    else
    {
      v39 = *(void **)(v6 + 16);
    }
    v9 = *((_QWORD *)a2 + 5);
    if (v9 == 2)
    {
      v10 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    }
    else
    {
      v31 = *((_QWORD *)a2 + 4);
      v41 = &v43;
      v42 = 0x300000000;
      sub_1C618A450((unsigned int *)&v41, (_BYTE *)(v31 + 8), (_BYTE *)(v31 + 8 * v9));
      v10 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v41, *((uint64_t ***)a2 + 6));
      if (v41 != &v43)
        free(v41);
    }
    v11 = llvm::ScalarEvolution::getRangeRef(this, v10, 1, 0);
    v12 = v11;
    LODWORD(v42) = *(_DWORD *)(v11 + 8);
    if (v42 > 0x40)
    {
      v41 = (void *)operator new[]();
      memcpy(v41, *(const void **)v12, (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v41 = *(void **)v11;
    }
    v44 = *(_DWORD *)(v12 + 24);
    if (v44 > 0x40)
    {
      v43 = (void *)operator new[]();
      memcpy(v43, *(const void **)(v12 + 16), (((unint64_t)v44 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v43 = *(void **)(v12 + 16);
    }
    llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)&v41, 13, 2, (uint64_t)&v33);
    if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v33, (const llvm::ConstantRange *)&v37))
      v13 = 4;
    else
      v13 = 0;
    if (v36 >= 0x41 && v35)
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    if (v34 >= 0x41 && v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    if (v44 >= 0x41 && v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    if (v42 >= 0x41 && v41)
      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    if (v38 >= 0x41 && v37)
      MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    v4 = *((_WORD *)a2 + 14);
  }
  if ((v4 & 2) == 0)
  {
    v14 = llvm::ScalarEvolution::getRangeRef(this, a2, 0, 0);
    v15 = v14;
    v16 = *(unsigned int *)(v14 + 8);
    v38 = v16;
    if (v16 > 0x40)
    {
      v27 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      v37 = (void *)operator new[]();
      memcpy(v37, *(const void **)v15, v27);
    }
    else
    {
      v37 = *(void **)v14;
    }
    v17 = *(unsigned int *)(v15 + 24);
    v40 = v17;
    if (v17 > 0x40)
    {
      v28 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
      v39 = (void *)operator new[]();
      memcpy(v39, *(const void **)(v15 + 16), v28);
    }
    else
    {
      v39 = *(void **)(v15 + 16);
    }
    v18 = *((_QWORD *)a2 + 5);
    if (v18 == 2)
    {
      v19 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    }
    else
    {
      v32 = *((_QWORD *)a2 + 4);
      v41 = &v43;
      v42 = 0x300000000;
      sub_1C618A450((unsigned int *)&v41, (_BYTE *)(v32 + 8), (_BYTE *)(v32 + 8 * v18));
      v19 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v41, *((uint64_t ***)a2 + 6));
      if (v41 != &v43)
        free(v41);
    }
    v20 = llvm::ScalarEvolution::getRangeRef(this, v19, 0, 0);
    v21 = v20;
    v22 = *(unsigned int *)(v20 + 8);
    LODWORD(v42) = v22;
    if (v22 > 0x40)
    {
      v29 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
      v41 = (void *)operator new[]();
      memcpy(v41, *(const void **)v21, v29);
    }
    else
    {
      v41 = *(void **)v20;
    }
    v23 = *(unsigned int *)(v21 + 24);
    v44 = v23;
    if (v23 > 0x40)
    {
      v30 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
      v43 = (void *)operator new[]();
      memcpy(v43, *(const void **)(v21 + 16), v30);
    }
    else
    {
      v43 = *(void **)(v21 + 16);
    }
    llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)&v41, 13, 1, (uint64_t)&v33);
    if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v33, (const llvm::ConstantRange *)&v37))
      v13 = v13 | 2;
    else
      v13 = v13;
    if (v36 >= 0x41 && v35)
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    if (v34 >= 0x41 && v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    if (v44 >= 0x41 && v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    if (v42 >= 0x41 && v41)
      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    if (v38 >= 0x41 && v37)
      MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  }
  return v13;
}

int32x2_t llvm::ScalarEvolution::setNoWrapFlags(int32x2_t *a1, uint64_t a2, int a3)
{
  int v3;
  __int32 v6;
  unsigned int v7;
  int32x2_t v8;
  __int32 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int32x2_t result;
  __int32 v16;
  int32x2_t v17;
  __int32 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(unsigned __int16 *)(a2 + 28);
  if ((a3 & ~v3) != 0)
  {
    *(_WORD *)(a2 + 28) = v3 | ((a3 & 6) != 0) | (unsigned __int16)a3;
    v6 = a1[100].i32[0];
    v7 = a2 >> 4;
    if (v6)
    {
      v8 = a1[98];
      v9 = v6 - 1;
      v10 = v9 & (v7 ^ (a2 >> 9));
      v11 = *(_QWORD *)&v8 + 40 * v10;
      v12 = *(_QWORD *)v11;
      if (*(_QWORD *)v11 == a2)
      {
LABEL_8:
        if (*(_DWORD *)(v11 + 32) >= 0x41u)
        {
          v24 = *(_QWORD *)(v11 + 24);
          if (v24)
            MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
        }
        if (*(_DWORD *)(v11 + 16) >= 0x41u)
        {
          v25 = *(_QWORD *)(v11 + 8);
          if (v25)
            MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
        }
        *(_QWORD *)v11 = -8192;
        result = vadd_s32(a1[99], (int32x2_t)0x1FFFFFFFFLL);
        a1[99] = result;
      }
      else
      {
        v13 = 1;
        while (v12 != -4096)
        {
          v14 = v10 + v13++;
          v10 = v14 & v9;
          v11 = *(_QWORD *)&v8 + 40 * v10;
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11 == a2)
            goto LABEL_8;
        }
      }
    }
    v16 = a1[103].i32[0];
    if (v16)
    {
      v17 = a1[101];
      v18 = v16 - 1;
      v19 = v18 & (v7 ^ (a2 >> 9));
      v20 = *(_QWORD *)&v17 + 40 * v19;
      v21 = *(_QWORD *)v20;
      if (*(_QWORD *)v20 == a2)
      {
LABEL_16:
        if (*(_DWORD *)(v20 + 32) >= 0x41u)
        {
          v26 = *(_QWORD *)(v20 + 24);
          if (v26)
            MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
        }
        if (*(_DWORD *)(v20 + 16) >= 0x41u)
        {
          v27 = *(_QWORD *)(v20 + 8);
          if (v27)
            MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
        }
        *(_QWORD *)v20 = -8192;
        result = vadd_s32(a1[102], (int32x2_t)0x1FFFFFFFFLL);
        a1[102] = result;
      }
      else
      {
        v22 = 1;
        while (v21 != -4096)
        {
          v23 = v19 + v22++;
          v19 = v23 & v18;
          v20 = *(_QWORD *)&v17 + 40 * v19;
          v21 = *(_QWORD *)v20;
          if (*(_QWORD *)v20 == a2)
            goto LABEL_16;
        }
      }
    }
  }
  return result;
}

unint64_t llvm::ScalarEvolution::getAddRecExpr(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t AddRecExpr;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v14[0] = a2;
  v13 = 0x400000001;
  if (!a3 || *(_WORD *)(a3 + 24) != 7 || *(uint64_t ***)(a3 + 48) != a4)
  {
    v14[1] = a3;
    LODWORD(v13) = 2;
    goto LABEL_5;
  }
  v8 = *(const void **)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 40);
  if ((unint64_t)(v9 + 1) >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, (uint64_t)v14, v9 + 1, 8);
    v10 = v13;
    v11 = v12;
    goto LABEL_12;
  }
  v10 = 1;
  if (v9)
  {
    v11 = v14;
LABEL_12:
    memcpy(&v11[v10], v8, 8 * v9);
    LODWORD(v10) = v13;
  }
  LODWORD(v13) = v10 + v9;
LABEL_5:
  AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a1, (uint64_t **)&v12, a4);
  if (v12 != v14)
    free(v12);
  return AddRecExpr;
}

uint64_t sub_1C4F0E6D8(uint64_t a1, llvm::Type *a2, llvm::ScalarEvolution *this, unsigned int a4)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::SCEV *AddExpr;
  unint64_t AddRecExpr;
  unint64_t v22;
  uint64_t BackedgeTakenInfo;
  const llvm::SCEV *Exact;
  uint64_t v25;
  const llvm::SCEV *v26;
  uint64_t ZeroExtendExpr;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(uint64_t ***)(a1 + 48);
  v10 = *(uint64_t **)(a1 + 32);
  v11 = *v10;
  if (v9 == 2)
  {
    v12 = v10[1];
  }
  else
  {
    v38 = v40;
    v39 = 0x300000000;
    v31 = 8 * v9 - 8;
    if ((unint64_t)v31 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v31 >> 3, 8);
      v32 = v39;
    }
    else
    {
      v32 = 0;
    }
    if (v9 != 1)
    {
      memcpy((char *)v38 + 8 * v32, v10 + 1, 8 * v9 - 8);
      v32 = v39;
    }
    LODWORD(v39) = v32 + ((unint64_t)v31 >> 3);
    v12 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v38, *(uint64_t ***)(a1 + 48));
    if (v38 != v40)
      free(v38);
  }
  if (*(_WORD *)(v11 + 24) != 4 || v11 == 0)
    return llvm::ScalarEvolution::getZeroExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  v14 = v40;
  v38 = v40;
  v39 = 0x400000000;
  v15 = *(_QWORD *)(v11 + 40);
  if (v15)
  {
    v16 = 0;
    v17 = *(uint64_t **)(v11 + 32);
    v18 = 8 * v15;
    do
    {
      v19 = *v17;
      if (*v17 != v12)
      {
        if (v16 >= HIDWORD(v39))
        {
          v36 = v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v14, v16 + 1, 8);
          v14 = v36;
          v16 = v39;
        }
        *((_QWORD *)v38 + v16) = v19;
        v16 = v39 + 1;
        LODWORD(v39) = v39 + 1;
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
    v15 = *(_QWORD *)(v11 + 40);
  }
  else
  {
    v16 = 0;
  }
  if (v15 == v16)
  {
    AddExpr = 0;
  }
  else
  {
    v37 = v14;
    AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(this, &v38, *(_WORD *)(v11 + 28) & 2, 0);
    AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, (uint64_t)AddExpr, v12, v8);
    if (*(_WORD *)(AddRecExpr + 24) == 7)
      v22 = AddRecExpr;
    else
      v22 = 0;
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, (const llvm::Loop *)v8);
    Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact(BackedgeTakenInfo, (uint64_t)v8, (uint64_t)this, 0);
    if (!v22
      || (*(_WORD *)(v22 + 28) & 2) == 0
      || *((_WORD *)Exact + 12) == 15
      || (llvm::ScalarEvolution::isKnownPositive(this, Exact) & 1) == 0)
    {
      __asm { BR              X11 }
    }
    v14 = v37;
  }
  if (v38 != v14)
    free(v38);
  if (!AddExpr)
    return llvm::ScalarEvolution::getZeroExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  v25 = *(_QWORD *)(a1 + 40);
  if (v25 == 2)
  {
    v26 = *(const llvm::SCEV **)(*(_QWORD *)(a1 + 32) + 8);
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
    v38 = v40;
    v39 = 0x300000000;
    v34 = 8 * v25 - 8;
    if ((unint64_t)v34 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v34 >> 3, 8);
      v35 = v39;
    }
    else
    {
      v35 = 0;
    }
    if (v25 != 1)
    {
      memcpy((char *)v38 + 8 * v35, (const void *)(v33 + 8), 8 * v25 - 8);
      v35 = v39;
    }
    LODWORD(v39) = v35 + ((unint64_t)v34 >> 3);
    v26 = (const llvm::SCEV *)sub_1C618AB20((uint64_t *)this, (uint64_t)&v38, *(uint64_t ***)(a1 + 48));
    if (v38 != v40)
      free(v38);
  }
  ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, v26, a2, a4);
  v28 = llvm::ScalarEvolution::getZeroExtendExpr(this, AddExpr, a2, a4);
  v38 = v40;
  v40[0] = ZeroExtendExpr;
  v40[1] = v28;
  v39 = 0x200000002;
  v29 = llvm::ScalarEvolution::getAddExpr(this, &v38, 0, 0);
  if (v38 != v40)
    free(v38);
  return v29;
}

uint64_t llvm::ScalarEvolution::getSignExtendExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3, uint64_t a4)
{
  llvm::Type *v8;
  int v9;
  llvm::UndefValue *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AddExpr;
  BOOL v15;
  _BYTE *v16;
  BOOL v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  void *v27;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t *p_src;
  int v47;
  uint64_t v48;
  uint64_t RangeRef;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unsigned int v54;
  unsigned int IndexTypeSizeInBits;
  uint64_t v56;
  const char *v57;
  unint64_t v58;
  _BOOL4 v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  const llvm::APInt *v63;
  unsigned int v64;
  void *v65;
  int v66;
  int64_t v67;
  unint64_t v69;
  int v70;
  const llvm::SCEV *Constant;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const llvm::SCEV **v75;
  uint64_t v76;
  uint64_t SignExtendExpr;
  uint64_t v78;
  unint64_t v79;
  const llvm::APInt *v80;
  unint64_t v81;
  const llvm::SCEV *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  void *v88;
  size_t v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  int *v93;
  uint64_t v94;
  _DWORD *v95;
  int v96;
  uint64_t v97;
  llvm::SCEV *v98;
  __int16 v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  llvm::SCEV *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[120];
  void *__s1;
  uint64_t v120;
  _BYTE v121[12];
  void *__src;
  uint64_t v123;
  void *v124;
  unsigned int v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    if (*((_BYTE *)a3 + 8) != 13)
    {
      llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), a3);
      a3 = v8;
    }
    v9 = *((unsigned __int16 *)a2 + 12);
    if (a2)
    {
      if (!*((_WORD *)a2 + 12))
        break;
    }
    if (!a2 || v9 != 3)
    {
      v111 = a2;
      if (a2 && v9 == 2)
        return llvm::ScalarEvolution::getZeroExtendExpr(this, *((const llvm::SCEV **)a2 + 4), a3, (int)a4 + 1);
      v116 = v118;
      *(_DWORD *)v118 = 3;
      *(_QWORD *)&v118[4] = a2;
      *(_QWORD *)&v118[12] = a3;
      v117 = 0x2000000005;
      v29 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v104 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v104 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v104;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v30 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)v118 - *(_QWORD *)&v118[8], 43)
          - 0x3C5A37A36834CED9 * *(_QWORD *)&v118[4]
          + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)&v118[12]) ^ qword_1ED7EAC80, 30);
      v31 = qword_1ED7EAC80
          + __ROR8__(*(_QWORD *)&v118[8] ^ 0xC949D7C7509E6557, 20)
          - 0x4B6D499041670D8DLL * *(_QWORD *)v118
          - 0x9AE16A3B2F90404FLL * *(_QWORD *)&v118[12]
          + 20;
      v32 = 0x9DDFEA08EB382D69
          * (v31 ^ ((0x9DDFEA08EB382D69 * (v30 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ v31)));
      v33 = *((_QWORD *)this + 104)
          + 8 * ((-348639895 * ((v32 >> 47) ^ v32)) & (*((_DWORD *)this + 210) - 1));
      AddExpr = *(_QWORD *)v33;
      __src = &v124;
      v123 = 0x2000000000;
      if (AddExpr)
        v34 = (AddExpr & 1) == 0;
      else
        v34 = 0;
      if (v34)
      {
        while (*(_QWORD *)(AddExpr + 16) != v117
             || memcmp(v116, *(const void **)(AddExpr + 8), 4 * v117))
        {
          LODWORD(v123) = 0;
          AddExpr = *(_QWORD *)AddExpr;
          if (AddExpr)
            v35 = (AddExpr & 1) == 0;
          else
            v35 = 0;
          if (!v35)
            goto LABEL_45;
        }
        goto LABEL_126;
      }
LABEL_45:
      if (dword_1ED7F3CF8 < a4)
      {
        AddExpr = sub_1C484358C((uint64_t)this + 864, 48, 3);
        v36 = sub_1C484358C((uint64_t)this + 864, 4 * v117, 2);
        v37 = (int *)v116;
        v38 = 4 * v117;
        v39 = (_DWORD *)v36;
        do
        {
          v40 = *v37++;
          *v39++ = v40;
          v38 -= 4;
        }
        while (v38);
        v41 = v117;
        __src = a2;
        v42 = sub_1C4F03F00((uint64_t)&__src, 1);
        *(_QWORD *)AddExpr = 0;
        *(_QWORD *)(AddExpr + 8) = v36;
        *(_QWORD *)(AddExpr + 16) = v41;
        *(_WORD *)(AddExpr + 24) = 3;
        *(_WORD *)(AddExpr + 26) = v42;
        *(_WORD *)(AddExpr + 28) = 0;
        *(_QWORD *)(AddExpr + 32) = __src;
        *(_QWORD *)(AddExpr + 40) = a3;
        v43 = *((_DWORD *)this + 211) + 1;
        v44 = *((_DWORD *)this + 210);
        if (v43 > 2 * v44)
        {
          llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v44, (uint64_t)off_1E813B300);
          __src = &v124;
          v123 = 0x2000000000;
          v33 = *((_QWORD *)this + 104)
              + 8
              * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(AddExpr + 8), *(_QWORD *)(AddExpr + 8)+ 4 * *(_QWORD *)(AddExpr + 16)));
          if (__src != &v124)
            free(__src);
          v43 = *((_DWORD *)this + 211) + 1;
        }
        *((_DWORD *)this + 211) = v43;
        v45 = *(_QWORD *)v33;
        if (!*(_QWORD *)v33)
          v45 = v33 | 1;
        *(_QWORD *)AddExpr = v45;
        *(_QWORD *)v33 = AddExpr;
        p_src = (uint64_t *)&v111;
        goto LABEL_52;
      }
      v47 = *((unsigned __int16 *)a2 + 12);
      if (a2 && v47 == 1)
      {
        v48 = *((_QWORD *)a2 + 4);
        RangeRef = llvm::ScalarEvolution::getRangeRef(this, v48, 1, 0);
        v50 = RangeRef;
        LODWORD(v123) = *(_DWORD *)(RangeRef + 8);
        if (v123 > 0x40)
        {
          __src = (void *)operator new[]();
          memcpy(__src, *(const void **)v50, (((unint64_t)v123 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __src = *(void **)RangeRef;
        }
        v125 = *(_DWORD *)(v50 + 24);
        if (v125 > 0x40)
        {
          v124 = (void *)operator new[]();
          memcpy(v124, *(const void **)(v50 + 16), (((unint64_t)v125 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v124 = *(void **)(v50 + 16);
        }
        v51 = *((_QWORD *)a2 + 5);
        v52 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*(_BYTE *)(v51 + 8) == 15)
        {
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v52, v51);
        }
        else
        {
          sub_1C4768AD0(v52, v51);
          IndexTypeSizeInBits = v54;
          if ((_DWORD)v53 == 1)
        }
        v56 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*((_BYTE *)a3 + 8) == 15)
        {
          AddExpr = llvm::DataLayout::getIndexTypeSizeInBits(v56, (uint64_t)a3);
        }
        else
        {
          sub_1C4768AD0(v56, (uint64_t)a3);
          AddExpr = v58;
          if ((_DWORD)v57 == 1)
        }
        llvm::ConstantRange::truncate((llvm::ConstantRange *)&__src, IndexTypeSizeInBits, (uint64_t)&v112);
        llvm::ConstantRange::signExtend((llvm::ConstantRange *)&v112, AddExpr, (uint64_t)&__s1);
        llvm::ConstantRange::sextOrTrunc((llvm::ConstantRange *)&__src, AddExpr, (uint64_t)&v107);
        v59 = llvm::ConstantRange::contains((llvm::ConstantRange *)&__s1, (const llvm::ConstantRange *)&v107);
        if (v110 >= 0x41 && v109)
          MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
        if (v108 >= 0x41 && v107)
          MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
        if (*(_DWORD *)&v121[8] >= 0x41u && *(_QWORD *)v121)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v121, 0x1000C8000313F17);
        if (v120 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        if (v115 >= 0x41 && v114)
          MEMORY[0x1CAA32F9C](v114, 0x1000C8000313F17);
        if (v113 >= 0x41 && v112)
          MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
        if (v59)
        {
          llvm::ScalarEvolution::getTruncateOrSignExtend((uint64_t)this, v48);
          AddExpr = v60;
        }
        if (v125 >= 0x41 && v124)
          MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
        if (v123 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (!v59)
        {
          a2 = v111;
          v47 = *((unsigned __int16 *)v111 + 12);
          goto LABEL_77;
        }
LABEL_126:
        v27 = v116;
        if (v116 == v118)
          return AddExpr;
LABEL_127:
        free(v27);
        return AddExpr;
      }
LABEL_77:
      if (v47 == 4)
      {
        if ((*((_WORD *)a2 + 14) & 4) != 0)
        {
          __src = &v124;
          v123 = 0x400000000;
          v73 = *((_QWORD *)a2 + 5);
          v74 = (a4 + 1);
          if (v73)
          {
            v75 = (const llvm::SCEV **)*((_QWORD *)a2 + 4);
            v76 = 8 * v73;
            do
            {
              SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, *v75, a3, v74);
              v78 = v123;
              if (v123 >= (unint64_t)HIDWORD(v123))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v124, v123 + 1, 8);
                v78 = v123;
              }
              *((_QWORD *)__src + v78) = SignExtendExpr;
              LODWORD(v123) = v123 + 1;
              ++v75;
              v76 -= 8;
            }
            while (v76);
          }
          AddExpr = llvm::ScalarEvolution::getAddExpr(this, &__src, 4, v74);
          if (__src != &v124)
            free(__src);
          goto LABEL_126;
        }
        v61 = **((_QWORD **)a2 + 4);
        if (v61)
          v62 = *(unsigned __int16 *)(v61 + 24) == 0;
        else
          v62 = 0;
        if (!v62)
          goto LABEL_124;
        sub_1C4F13D9C((llvm::APInt *)&__src, this, *(_QWORD *)(v61 + 32), (uint64_t)a2);
        v64 = v123;
        v65 = __src;
        if (v123 < 0x41)
        {
LABEL_92:
          if (v65)
            goto LABEL_93;
          v84 = 0;
        }
        else
        {
          v66 = 0;
          v67 = ((unint64_t)v123 + 63) >> 6;
          do
          {
            if (v67-- < 1)
              break;
            v69 = *((_QWORD *)__src + v67);
            v66 += __clz(v69);
          }
          while (!v69);
          v70 = v123 | 0xFFFFFFC0;
          if ((v123 & 0x3F) == 0)
            v70 = 0;
          if ((v123 - v66 - v70) <= 0x40)
          {
            v65 = *(void **)__src;
            goto LABEL_92;
          }
LABEL_93:
          Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&__src, v63);
          v72 = llvm::ScalarEvolution::getSignExtendExpr(this, Constant, a3, a4);
          v106 = v123;
          if (v123 > 0x40)
          {
            v105 = (void *)operator new[]();
            memcpy(v105, __src, (((unint64_t)v106 + 63) >> 3) & 0x3FFFFFF8);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v105);
          }
          else
          {
            v79 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v123;
            if (!(_DWORD)v123)
              v79 = 0;
            v105 = (void *)(v79 & ~(unint64_t)__src);
          }
          llvm::APInt::operator++((uint64_t)&v105);
          LODWORD(v120) = v106;
          __s1 = v105;
          v106 = 0;
          v81 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&__s1, v80);
          v82 = (const llvm::SCEV *)sub_1C4E0AF14(this, v81, a2, 0, a4);
          if (v120 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          if (v106 >= 0x41 && v105)
            MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
          v83 = llvm::ScalarEvolution::getSignExtendExpr(this, v82, a3, (int)a4 + 1);
          AddExpr = sub_1C4E0AF14(this, v72, v83, 6, (a4 + 1));
          v84 = 1;
          v64 = v123;
        }
        if (v64 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if ((v84 & 1) != 0)
          goto LABEL_126;
        a2 = v111;
        v47 = *((unsigned __int16 *)v111 + 12);
      }
      if (v47 == 7 && *((_QWORD *)a2 + 5) == 2)
        __asm { BR              X11 }
LABEL_124:
      if (llvm::ScalarEvolution::isKnownNonNegative(this, a2))
      {
        AddExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, v111, a3, (int)a4 + 1);
      }
      else
      {
        v85 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(v116, (uint64_t)v116 + 4 * v117));
        AddExpr = *(_QWORD *)v85;
        __src = &v124;
        v123 = 0x2000000000;
        if (AddExpr)
          v86 = (AddExpr & 1) == 0;
        else
          v86 = 0;
        if (v86)
        {
          v87 = v117;
          v88 = v116;
          v89 = 4 * v117;
          while (*(_QWORD *)(AddExpr + 16) != v87 || memcmp(v88, *(const void **)(AddExpr + 8), v89))
          {
            LODWORD(v123) = 0;
            AddExpr = *(_QWORD *)AddExpr;
            if (AddExpr)
              v90 = (AddExpr & 1) == 0;
            else
              v90 = 0;
            if (!v90)
              goto LABEL_141;
          }
        }
        else
        {
LABEL_141:
          AddExpr = sub_1C484358C((uint64_t)this + 864, 48, 3);
          v91 = sub_1C484358C((uint64_t)this + 864, 4 * v117, 2);
          v92 = v91;
          if ((_DWORD)v117)
          {
            v93 = (int *)v116;
            v94 = 4 * v117;
            v95 = (_DWORD *)v91;
            do
            {
              v96 = *v93++;
              *v95++ = v96;
              v94 -= 4;
            }
            while (v94);
            v97 = v117;
          }
          else
          {
            v97 = 0;
          }
          v98 = v111;
          __src = v111;
          v99 = sub_1C4F03F00((uint64_t)&__src, 1);
          *(_QWORD *)AddExpr = 0;
          *(_QWORD *)(AddExpr + 8) = v92;
          *(_QWORD *)(AddExpr + 16) = v97;
          *(_WORD *)(AddExpr + 24) = 3;
          *(_WORD *)(AddExpr + 26) = v99;
          *(_WORD *)(AddExpr + 28) = 0;
          *(_QWORD *)(AddExpr + 32) = __src;
          *(_QWORD *)(AddExpr + 40) = a3;
          v100 = *((_DWORD *)this + 211) + 1;
          v101 = *((_DWORD *)this + 210);
          if (v100 > 2 * v101)
          {
            llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v101, (uint64_t)off_1E813B300);
            __src = &v124;
            v123 = 0x2000000000;
            v85 = *((_QWORD *)this + 104)
                + 8
                * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(AddExpr + 8), *(_QWORD *)(AddExpr + 8)+ 4 * *(_QWORD *)(AddExpr + 16)));
            if (__src != &v124)
              free(__src);
            v100 = *((_DWORD *)this + 211) + 1;
          }
          *((_DWORD *)this + 211) = v100;
          v102 = *(_QWORD *)v85;
          if (!*(_QWORD *)v85)
            v102 = v85 | 1;
          *(_QWORD *)AddExpr = v102;
          *(_QWORD *)v85 = AddExpr;
          __src = v98;
          p_src = (uint64_t *)&__src;
LABEL_52:
          llvm::ScalarEvolution::registerUser(this, AddExpr, p_src, 1);
        }
      }
      goto LABEL_126;
    }
    a2 = (const llvm::SCEV *)*((_QWORD *)a2 + 4);
    a4 = (a4 + 1);
  }
  v10 = sub_1C537D3B8((llvm *)0x28, *((_QWORD *)a2 + 4), a3, 0);
  __s1 = v121;
  *(_DWORD *)v121 = 0;
  *(_QWORD *)&v121[4] = v10;
  v120 = 0x2000000003;
  v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v103 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v103 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v103;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v12 = __ROR8__(*(_QWORD *)&v121[4] + 12, 12);
  v13 = *((_QWORD *)this + 104)
      + 8
      * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                         * ((((0x9DDFEA08EB382D69
                                                           * (v12 ^ ((0x9DDFEA08EB382D69
                                                                    * (*(_QWORD *)v121 ^ qword_1ED7EAC80 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)v121 ^ qword_1ED7EAC80 ^ v12)))) >> 32) >> 15) ^ (-348639895 * (v12 ^ (((0x9DDFEA08EB382D69 * (*(_QWORD *)v121 ^ qword_1ED7EAC80 ^ v12)) >> 32) >> 15) ^ (-348639895 * (*(_DWORD *)v121 ^ qword_1ED7EAC80 ^ v12)))))) ^ *(_DWORD *)&v121[4]));
  AddExpr = *(_QWORD *)v13;
  __src = &v124;
  v123 = 0x2000000000;
  if (AddExpr)
    v15 = (AddExpr & 1) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v16 = __s1;
    while (*(_QWORD *)(AddExpr + 16) != v120
         || memcmp(__s1, *(const void **)(AddExpr + 8), 4 * v120))
    {
      LODWORD(v123) = 0;
      AddExpr = *(_QWORD *)AddExpr;
      if (AddExpr)
        v17 = (AddExpr & 1) == 0;
      else
        v17 = 0;
      if (!v17)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    AddExpr = sub_1C484358C((uint64_t)this + 864, 40, 3);
    v18 = sub_1C484358C((uint64_t)this + 864, 4 * v120, 2);
    v19 = (int *)__s1;
    v20 = 4 * v120;
    v21 = (_DWORD *)v18;
    do
    {
      v22 = *v19++;
      *v21++ = v22;
      v20 -= 4;
    }
    while (v20);
    v23 = v120;
    *(_QWORD *)AddExpr = 0;
    *(_QWORD *)(AddExpr + 8) = v18;
    *(_QWORD *)(AddExpr + 16) = v23;
    *(_DWORD *)(AddExpr + 24) = 0x10000;
    *(_WORD *)(AddExpr + 28) = 0;
    *(_QWORD *)(AddExpr + 32) = v10;
    v24 = *((_DWORD *)this + 211) + 1;
    v25 = *((_DWORD *)this + 210);
    if (v24 > 2 * v25)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v25, (uint64_t)off_1E813B300);
      __src = &v124;
      v123 = 0x2000000000;
      v13 = *((_QWORD *)this + 104)
          + 8
          * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(AddExpr + 8), *(_QWORD *)(AddExpr + 8) + 4 * *(_QWORD *)(AddExpr + 16)));
      if (__src != &v124)
        free(__src);
      v24 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v24;
    v26 = *(_QWORD *)v13;
    if (!*(_QWORD *)v13)
      v26 = v13 | 1;
    *(_QWORD *)AddExpr = v26;
    *(_QWORD *)v13 = AddExpr;
    v16 = __s1;
  }
  if (v16 != v121)
  {
    v27 = v16;
    goto LABEL_127;
  }
  return AddExpr;
}

uint64_t llvm::ScalarEvolution::proveNoUnsignedWrapViaInduction(llvm::ScalarEvolution *this, const llvm::SCEVAddRecExpr *a2)
{
  __int16 v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[18];

  v15[16] = *MEMORY[0x1E0C80C00];
  v2 = *((_WORD *)a2 + 14);
  v3 = v2 & 7;
  if ((v2 & 2) == 0 && *((_QWORD *)a2 + 5) == 2)
  {
    sub_1C4774094((llvm::ScalarEvolution *)((char *)this + 1008), (uint64_t)a2);
    if (v6)
    {
      v7 = *((_QWORD *)a2 + 5);
      if (v7 == 2)
      {
        v8 = *((_QWORD *)a2 + 4);
      }
      else
      {
        v10 = *((_QWORD *)a2 + 4);
        v13 = v15;
        v14 = 0x300000000;
        v11 = 8 * v7 - 8;
        if ((unint64_t)v11 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v11 >> 3, 8);
          v12 = v14;
        }
        else
        {
          v12 = 0;
        }
        if (v7 != 1)
        {
          memcpy((char *)v13 + 8 * v12, (const void *)(v10 + 8), 8 * v7 - 8);
          v12 = v14;
        }
        LODWORD(v14) = v12 + ((unint64_t)v11 >> 3);
        sub_1C618AB20((uint64_t *)this, (uint64_t)&v13, *((uint64_t ***)a2 + 6));
        if (v13 != v15)
          free(v13);
        v8 = *((_QWORD *)a2 + 4);
      }
      __asm { BR              X11 }
    }
  }
  return v3;
}

unint64_t llvm::ScalarEvolution::isKnownNegative(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  llvm::ConstantRange *RangeRef;
  unsigned int v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v8;
  unsigned int v9;

  RangeRef = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
  llvm::ConstantRange::getSignedMax(RangeRef, (llvm::APInt *)&v8);
  v3 = v9 - 1;
  if (v9 >= 0x41)
    v4 = (unint64_t *)(v8 + 8 * (v3 >> 6));
  else
    v4 = (unint64_t *)&v8;
  v5 = *v4;
  if (v9 >= 0x41 && v8 != 0)
    MEMORY[0x1CAA32F9C]();
  return (v5 >> v3) & 1;
}

uint64_t llvm::ScalarEvolution::isLoopBackedgeGuardedByCond(uint64_t a1, uint64_t **a2, uint64_t a3, const llvm::APInt *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t LoopLatch;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t BackedgeTakenInfo;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const llvm::Value **v26;
  const llvm::Value *v27;
  _QWORD *v28;
  uint64_t v29;
  const llvm::Instruction *v30;
  _QWORD *i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  llvm::BasicBlock *v50;
  _QWORD *j;
  uint64_t v52;
  uint64_t SinglePredecessor;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  llvm::BasicBlock *v63;
  uint64_t *v64;
  uint64_t v65;

  if (a2 && (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a3, a4, a5) & 1) == 0)
  {
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
    if (!LoopLatch)
      return 0;
    v12 = LoopLatch;
    v14 = (_QWORD *)(LoopLatch + 40);
    v13 = *(_QWORD *)(LoopLatch + 40);
    if (v13 != LoopLatch + 40)
    {
      v15 = v13 - 24;
      if (!v13)
        v15 = 0;
      v16 = *(unsigned __int8 *)(v15 + 16) - 40;
      if (v16 < 0xFFFFFFF5)
        v15 = 0;
      if (v13)
      {
        v17 = *(_BYTE *)(v15 + 16) == 30 && v16 >= 0xFFFFFFF5;
        if (v17
          && (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 3
          && (llvm::ScalarEvolution::isImpliedCond(a1, a3, a4, a5, *(_QWORD *)(v15 - 96), (llvm::LLVMContext *)(*(_QWORD *)(v15 - 32) != *a2[4]), 0) & 1) != 0)
        {
          return 1;
        }
      }
    }
    if (*(_BYTE *)(a1 + 512))
      return 0;
    *(_BYTE *)(a1 + 512) = 1;
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)a1, (const llvm::Loop *)a2);
    v19 = *(_DWORD *)(BackedgeTakenInfo + 8);
    if (v19)
    {
      v20 = (_DWORD *)(*(_QWORD *)BackedgeTakenInfo + 48);
      v21 = 88 * v19;
      while (*((_QWORD *)v20 - 6) != v12 || *(v20 - 1) != *v20)
      {
        v20 += 22;
        v21 -= 88;
        if (!v21)
          goto LABEL_25;
      }
      v22 = v20 - 10;
    }
    else
    {
LABEL_25:
      v22 = (_QWORD *)(a1 + 48);
    }
    if (*v22 != *(_QWORD *)(a1 + 48))
      __asm { BR              X11 }
    v23 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(v23 + 184))
      llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 24));
    v24 = *(unsigned int *)(v23 + 24);
    if ((_DWORD)v24)
    {
      v25 = 32 * v24;
      v26 = (const llvm::Value **)(*(_QWORD *)(v23 + 16) + 16);
      do
      {
        v27 = *v26;
        if (*v26)
        {
          v28 = (_QWORD *)*v14;
          if ((_QWORD *)*v14 == v14)
          {
            v30 = 0;
          }
          else
          {
            v29 = v28 ? (uint64_t)(v28 - 3) : 0;
            v30 = *(unsigned __int8 *)(v29 + 16) - 29 >= 0xB ? 0 : (const llvm::Instruction *)v29;
          }
          if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 32), *v26, v30)
            && (llvm::ScalarEvolution::isImpliedCond(a1, a3, a4, a5, *((_QWORD *)v27 - 4 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF)), 0, 0) & 1) != 0)
          {
            goto LABEL_104;
          }
        }
        v26 += 4;
        v25 -= 32;
      }
      while (v25);
    }
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a1 + 32), *a2[4]))
      goto LABEL_103;
    if (*(_BYTE *)(a1 + 8))
    {
      for (i = *(_QWORD **)(v12 + 48); i != v14; i = (_QWORD *)i[1])
      {
        v64 = &v65;
        v65 = 0;
        v32 = i ? (uint64_t)(i - 3) : 0;
        LODWORD(v62) = 125;
        v63 = 0;
        if (sub_1C4F5E7F0((uint64_t)&v62, v32))
        {
          if ((llvm::ScalarEvolution::isImpliedCond(a1, a3, a4, a5, v65, 0, 0) & 1) != 0)
            goto LABEL_104;
        }
      }
    }
    v33 = *(_QWORD *)(a1 + 32);
    v34 = *(_QWORD *)(v33 + 24);
    v35 = *(unsigned int *)(v33 + 40);
    if ((_DWORD)v35)
    {
      LODWORD(v36) = (v35 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v37 = (uint64_t *)(v34 + 16 * v36);
      v38 = *v37;
      if (v12 == *v37)
        goto LABEL_61;
      v39 = 1;
      while (v38 != -4096)
      {
        v40 = v36 + v39++;
        v36 = v40 & (v35 - 1);
        v38 = *(_QWORD *)(v34 + 16 * v36);
        if (v12 == v38)
        {
          v37 = (uint64_t *)(v34 + 16 * v36);
          goto LABEL_61;
        }
      }
    }
    v37 = (uint64_t *)(v34 + 16 * v35);
LABEL_61:
    v41 = (uint64_t *)(v34 + 16 * v35);
    if (v37 == v41)
      v42 = 0;
    else
      v42 = v37[1];
    if ((_DWORD)v35)
    {
      v43 = *a2[4];
      v44 = v35 - 1;
      LODWORD(v35) = ((v43 >> 4) ^ (v43 >> 9)) & (v35 - 1);
      v45 = (uint64_t *)(v34 + 16 * v35);
      v46 = *v45;
      if (v43 == *v45)
      {
LABEL_70:
        if (v45 != v41)
        {
          v49 = v45[1];
          goto LABEL_73;
        }
      }
      else
      {
        v47 = 1;
        while (v46 != -4096)
        {
          v48 = v35 + v47++;
          v35 = v48 & v44;
          v46 = *(_QWORD *)(v34 + 16 * v35);
          if (v43 == v46)
          {
            v45 = (uint64_t *)(v34 + 16 * v35);
            goto LABEL_70;
          }
        }
      }
    }
    v49 = 0;
LABEL_73:
    if (v42 != v49)
    {
      v61 = v49;
      while (1)
      {
        v50 = *(llvm::BasicBlock **)v42;
        if (*(_BYTE *)(a1 + 8))
        {
          for (j = (_QWORD *)*((_QWORD *)v50 + 6); j != (_QWORD *)((char *)v50 + 40); j = (_QWORD *)j[1])
          {
            v64 = &v65;
            v65 = 0;
            if (j)
              v52 = (uint64_t)(j - 3);
            else
              v52 = 0;
            LODWORD(v62) = 125;
            v63 = 0;
            if (sub_1C4F5E7F0((uint64_t)&v62, v52)
              && (llvm::ScalarEvolution::isImpliedCond(a1, a3, a4, a5, v65, 0, 0) & 1) != 0)
            {
              goto LABEL_104;
            }
          }
        }
        SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v50);
        if (SinglePredecessor)
        {
          v54 = *(_QWORD *)(SinglePredecessor + 40);
          if (v54 != SinglePredecessor + 40)
          {
            v55 = v54 ? v54 - 24 : 0;
            v56 = *(unsigned __int8 *)(v55 + 16) - 40;
            v57 = v56 >= 0xFFFFFFF5 ? v55 : 0;
            if (v54)
            {
              if (*(_BYTE *)(v57 + 16) == 30 && v56 >= 0xFFFFFFF5 && (*(_DWORD *)(v57 + 20) & 0x7FFFFFF) == 3)
              {
                v59 = *(_QWORD *)(v57 - 96);
                v62 = SinglePredecessor;
                v63 = v50;
                if (llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)&v62))
                {
                  if (llvm::ScalarEvolution::isImpliedCond(a1, a3, a4, a5, v59, (llvm::LLVMContext *)(v50 != *(llvm::BasicBlock **)(v57 - 32)), 0))break;
                }
              }
            }
          }
        }
        v10 = 0;
        v42 = *(_QWORD *)(v42 + 8);
        if (v42 == v61)
          goto LABEL_105;
      }
LABEL_104:
      v10 = 1;
      goto LABEL_105;
    }
LABEL_103:
    v10 = 0;
LABEL_105:
    *(_BYTE *)(a1 + 512) = 0;
    return v10;
  }
  return 1;
}

void sub_1C4F118BC()
{
  JUMPOUT(0x1C4F114C8);
}

uint64_t llvm::ScalarEvolution::isKnownOnEveryIteration(llvm::ScalarEvolution *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  unint64_t PostIncExpr;

  v8 = *(_QWORD *)(a3 + 48);
  result = llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)a1, v8, a2, **(_QWORD **)(a3 + 32), a4);
  if ((_DWORD)result)
  {
    PostIncExpr = llvm::SCEVAddRecExpr::getPostIncExpr((llvm::SCEVAddRecExpr *)a3, a1);
    return llvm::ScalarEvolution::isLoopBackedgeGuardedByCond(a1, v8, a2, PostIncExpr, a4);
  }
  return result;
}

void sub_1C4F11950(llvm::APInt *a1, llvm::ScalarEvolution *this, uint64_t a3, llvm::SCEV *a4)
{
  unsigned int v6;
  unsigned int MinTrailingZeros;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;

  v6 = *(_DWORD *)(a3 + 8);
  MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros(this, a4);
  if (MinTrailingZeros)
  {
    if (MinTrailingZeros >= v6)
    {
      v8 = *(unsigned int *)(a3 + 8);
      *((_DWORD *)a1 + 2) = v8;
      if (v8 > 0x40)
      {
        v9 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
        v10 = (void *)operator new[]();
        *(_QWORD *)a1 = v10;
        memcpy(v10, *(const void **)a3, v9);
      }
      else
      {
        *(_QWORD *)a1 = *(_QWORD *)a3;
      }
    }
    else
    {
      llvm::APInt::trunc((llvm::APInt *)a3, MinTrailingZeros, (llvm::APInt *)&v11);
      llvm::APInt::zext((llvm::APInt *)&v11, v6, (uint64_t)a1);
      if (v12 >= 0x41)
      {
        if (v11)
          MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *((_DWORD *)a1 + 2) = v6;
    if (v6 > 0x40)
      llvm::APInt::initSlowCase(a1, 0, 0);
    else
      *(_QWORD *)a1 = 0;
  }
}

uint64_t llvm::ScalarEvolution::matchURem(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV **a3, const llvm::SCEV **a4)
{
  int v8;
  uint64_t v9;
  BOOL v10;
  const llvm::SCEV *v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  const llvm::SCEV *v16;
  uint64_t v17;
  _QWORD *v18;
  const llvm::SCEV *NegativeSCEV;
  const llvm::SCEV *v20;
  const llvm::SCEV *v21;
  const llvm::SCEV *v22;
  const llvm::SCEV *v23;
  const llvm::SCEV *v24;
  const llvm::SCEV *v25;
  const llvm::SCEV *v26;

  v8 = *((unsigned __int16 *)a2 + 12);
  if (a2 && v8 == 2)
  {
    v9 = *((_QWORD *)a2 + 4);
    if (v9)
      v10 = *(unsigned __int16 *)(v9 + 24) == 1;
    else
      v10 = 0;
    if (v10)
    {
      v11 = *(const llvm::SCEV **)(v9 + 32);
      *a3 = v11;
      __asm { BR              X11 }
    }
    return 0;
  }
  result = 0;
  if (a2 && v8 == 4)
  {
    if (*((_QWORD *)a2 + 5) != 2)
      return 0;
    v13 = (_QWORD *)*((_QWORD *)a2 + 4);
    v14 = *v13;
    if (!*v13 || *(_WORD *)(*v13 + 24) != 5)
      return 0;
    v16 = (const llvm::SCEV *)v13[1];
    v17 = *(_QWORD *)(v14 + 40);
    if (v17 != 2)
    {
      if (v17 != 3)
        return 0;
      v18 = *(_QWORD **)(v14 + 32);
      if (*(_WORD *)(*v18 + 24))
        return 0;
      NegativeSCEV = (const llvm::SCEV *)v18[1];
      llvm::ScalarEvolution::getURemExpr(this, v16, NegativeSCEV);
      if (v20 != a2)
      {
        NegativeSCEV = *(const llvm::SCEV **)(*(_QWORD *)(v14 + 32) + 16);
        llvm::ScalarEvolution::getURemExpr(this, v16, NegativeSCEV);
        if (v21 != a2)
          return 0;
      }
LABEL_28:
      *a3 = v16;
      *a4 = NegativeSCEV;
      return 1;
    }
    NegativeSCEV = *(const llvm::SCEV **)(*(_QWORD *)(v14 + 32) + 8);
    llvm::ScalarEvolution::getURemExpr(this, v16, NegativeSCEV);
    if (v22 == a2)
      goto LABEL_28;
    NegativeSCEV = **(const llvm::SCEV ***)(v14 + 32);
    llvm::ScalarEvolution::getURemExpr(this, v16, NegativeSCEV);
    if (v23 == a2)
      goto LABEL_28;
    NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8));
    llvm::ScalarEvolution::getURemExpr(this, v16, NegativeSCEV);
    if (v24 == a2)
      goto LABEL_28;
    NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, **(_QWORD **)(v14 + 32));
    llvm::ScalarEvolution::getURemExpr(this, v16, NegativeSCEV);
    v26 = v25;
    result = 0;
    if (v26 == a2)
      goto LABEL_28;
  }
  return result;
}

void llvm::ScalarEvolution::getURemExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  uint8x8_t v15;
  void *v16[2];
  _QWORD v17[12];

  v17[2] = *MEMORY[0x1E0C80C00];
  if (a3 && !*((_WORD *)a3 + 12))
  {
    v6 = (int8x8_t *)*((_QWORD *)a3 + 4);
    v7 = v6 + 3;
    v8 = v6[4].u32[0];
    if (v8 <= 0x40)
    {
      if (*v7 != 1)
      {
        v9 = (uint8x8_t)vcnt_s8(*v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] != 1)
          goto LABEL_6;
LABEL_14:
        __asm { BR              X12 }
      }
LABEL_10:
      __asm { BR              X10 }
    }
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v6[3]) == (_DWORD)v8 - 1)
      goto LABEL_10;
    v11 = 0;
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = (int8x8_t *)*v7;
    do
    {
      v14 = *v13++;
      v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      v11 += v15.i32[0];
      --v12;
    }
    while (v12);
    if (v11 == 1)
      goto LABEL_14;
  }
LABEL_6:
  v16[0] = v17;
  v17[0] = llvm::ScalarEvolution::getUDivExpr(this, a2, a3);
  v17[1] = a3;
  v16[1] = (void *)0x200000002;
  v10 = ((uint64_t (*)(llvm::ScalarEvolution *, void **, uint64_t, _QWORD))llvm::ScalarEvolution::getMulExpr)(this, v16, 2, 0);
  if (v16[0] != v17)
    free(v16[0]);
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, (uint64_t)a2, v10);
}

const llvm::SCEV *llvm::ScalarEvolution::getUDivExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  llvm::APInt *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  __int16 v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unint64_t v34;
  _BYTE v35[20];
  int v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[18];

  v39[16] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v35 = 6;
  *(_QWORD *)&v35[4] = a2;
  *(_QWORD *)&v35[12] = a3;
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v34 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v34 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v34;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v7 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)v35 - *(_QWORD *)&v35[8], 43)
     - 0x3C5A37A36834CED9 * *(_QWORD *)&v35[4]
     + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)&v35[12]) ^ qword_1ED7EAC80, 30);
  v8 = qword_1ED7EAC80
     + __ROR8__(*(_QWORD *)&v35[8] ^ 0xC949D7C7509E6557, 20)
     - 0x4B6D499041670D8DLL * *(_QWORD *)v35
     - 0x9AE16A3B2F90404FLL * *(_QWORD *)&v35[12]
     + 20;
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v8)));
  v10 = *(_QWORD *)(*((_QWORD *)this + 104)
                  + 8 * ((-348639895 * ((v9 >> 47) ^ v9)) & (*((_DWORD *)this + 210) - 1)));
  v37 = v39;
  v38 = 0x2000000000;
  if (v10)
    v11 = (v10 & 1) == 0;
  else
    v11 = 0;
  if (v11)
  {
    while (*(_QWORD *)(v10 + 16) != 5 || memcmp(v35, *(const void **)(v10 + 8), 0x14uLL))
    {
      LODWORD(v38) = 0;
      v10 = *(_QWORD *)v10;
      if (v10)
        v12 = (v10 & 1) == 0;
      else
        v12 = 0;
      if (!v12)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    v13 = *((unsigned __int16 *)a2 + 12);
    if (a2 && !*((_WORD *)a2 + 12))
    {
      v14 = *((_QWORD *)a2 + 4);
      v15 = (llvm::APInt *)(v14 + 24);
      v16 = *(_DWORD *)(v14 + 32);
      if (v16 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v15) == v16)
          return a2;
      }
      else if (!*(_QWORD *)v15)
      {
        return a2;
      }
    }
    if (a3 && !*((_WORD *)a3 + 12))
    {
      v17 = *((_QWORD *)a3 + 4);
      v18 = (_QWORD *)(v17 + 24);
      v19 = *(_DWORD *)(v17 + 32);
      if (v19 > 0x40)
      {
        v20 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v17 + 24));
        if (v20 == v19 - 1)
          return a2;
        if (v20 != v19)
          goto LABEL_28;
      }
      else if (*v18)
      {
        if (*v18 != 1)
LABEL_28:
          __asm { BR              X11 }
        return a2;
      }
    }
    v21 = *((_QWORD *)this + 104)
        + 8 * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(v35, (uint64_t)&v36));
    v10 = *(_QWORD *)v21;
    v37 = v39;
    v38 = 0x2000000000;
    if (v10)
      v22 = (v10 & 1) == 0;
    else
      v22 = 0;
    if (v22)
    {
      while (*(_QWORD *)(v10 + 16) != 5 || memcmp(v35, *(const void **)(v10 + 8), 0x14uLL))
      {
        LODWORD(v38) = 0;
        v10 = *(_QWORD *)v10;
        if (v10)
          v23 = (v10 & 1) == 0;
        else
          v23 = 0;
        if (!v23)
          goto LABEL_40;
      }
    }
    else
    {
LABEL_40:
      v10 = sub_1C484358C((uint64_t)this + 864, 48, 3);
      v24 = sub_1C484358C((uint64_t)this + 864, 20, 2);
      v25 = (int *)v35;
      v26 = 20;
      v27 = (_DWORD *)v24;
      do
      {
        v28 = *v25++;
        *v27++ = v28;
        v26 -= 4;
      }
      while (v26);
      v37 = a2;
      v38 = (uint64_t)a3;
      v29 = sub_1C4F03F00((uint64_t)&v37, 2);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = v24;
      *(_QWORD *)(v10 + 16) = 5;
      *(_WORD *)(v10 + 24) = 6;
      *(_WORD *)(v10 + 26) = v29;
      *(_WORD *)(v10 + 28) = 0;
      *(_QWORD *)(v10 + 32) = a2;
      *(_QWORD *)(v10 + 40) = a3;
      v30 = *((_DWORD *)this + 211) + 1;
      v31 = *((_DWORD *)this + 210);
      if (v30 > 2 * v31)
      {
        llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v31, (uint64_t)off_1E813B300);
        v37 = v39;
        v38 = 0x2000000000;
        v21 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v10 + 8), *(_QWORD *)(v10 + 8) + 4 * *(_QWORD *)(v10 + 16)));
        if (v37 != v39)
          free(v37);
        v30 = *((_DWORD *)this + 211) + 1;
      }
      *((_DWORD *)this + 211) = v30;
      v32 = *(_QWORD *)v21;
      if (!*(_QWORD *)v21)
        v32 = v21 | 1;
      *(_QWORD *)v10 = v32;
      *(_QWORD *)v21 = v10;
      v37 = a2;
      v38 = (uint64_t)a3;
      llvm::ScalarEvolution::registerUser(this, v10, (uint64_t *)&v37, 2);
    }
  }
  return (const llvm::SCEV *)v10;
}

void sub_1C4F13D9C(llvm::APInt *this, llvm::ScalarEvolution *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  BOOL v7;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int MinTrailingZeros;
  const void **v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;

  v6 = *(_DWORD *)(a3 + 32);
  v7 = v6 != 0;
  if ((*(_QWORD *)(a4 + 40) & 0xFFFFFFFELL) == 0 || v6 == 0)
  {
    v13 = *(_DWORD *)(a3 + 32);
  }
  else
  {
    v11 = *(_QWORD *)(a4 + 40);
    v12 = 1;
    v13 = *(_DWORD *)(a3 + 32);
    do
    {
      MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros(a2, *(const llvm::SCEV **)(*(_QWORD *)(a4 + 32) + 8 * v12));
      if (MinTrailingZeros < v13)
        v13 = MinTrailingZeros;
      ++v12;
      v7 = v13 != 0;
    }
    while (v12 < v11 && v13);
  }
  if (v7)
  {
    v15 = (const void **)(a3 + 24);
    if (v13 >= v6)
    {
      v16 = *(unsigned int *)(a3 + 32);
      *((_DWORD *)this + 2) = v16;
      if (v16 > 0x40)
      {
        v17 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
        v18 = (void *)operator new[]();
        *(_QWORD *)this = v18;
        memcpy(v18, *v15, v17);
      }
      else
      {
        *(_QWORD *)this = *v15;
      }
    }
    else
    {
      llvm::APInt::trunc((llvm::APInt *)(a3 + 24), v13, (llvm::APInt *)&v19);
      llvm::APInt::zext((llvm::APInt *)&v19, v6, (uint64_t)this);
      if (v20 >= 0x41)
      {
        if (v19)
          MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 2) = v6;
    if (v6 > 0x40)
      llvm::APInt::initSlowCase(this, 0, 0);
    else
      *(_QWORD *)this = 0;
  }
}

uint64_t sub_1C4F13F44(uint64_t a1, llvm::Type *a2, llvm::ScalarEvolution *this, unsigned int a4)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::SCEV *AddExpr;
  unint64_t AddRecExpr;
  unint64_t v22;
  uint64_t BackedgeTakenInfo;
  const llvm::SCEV *Exact;
  uint64_t v25;
  const llvm::SCEV *v26;
  uint64_t SignExtendExpr;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(uint64_t ***)(a1 + 48);
  v10 = *(uint64_t **)(a1 + 32);
  v11 = *v10;
  if (v9 == 2)
  {
    v12 = v10[1];
  }
  else
  {
    v38 = v40;
    v39 = 0x300000000;
    v31 = 8 * v9 - 8;
    if ((unint64_t)v31 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v31 >> 3, 8);
      v32 = v39;
    }
    else
    {
      v32 = 0;
    }
    if (v9 != 1)
    {
      memcpy((char *)v38 + 8 * v32, v10 + 1, 8 * v9 - 8);
      v32 = v39;
    }
    LODWORD(v39) = v32 + ((unint64_t)v31 >> 3);
    v12 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v38, *(uint64_t ***)(a1 + 48));
    if (v38 != v40)
      free(v38);
  }
  if (*(_WORD *)(v11 + 24) != 4 || v11 == 0)
    return llvm::ScalarEvolution::getSignExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  v14 = v40;
  v38 = v40;
  v39 = 0x400000000;
  v15 = *(_QWORD *)(v11 + 40);
  if (v15)
  {
    v16 = 0;
    v17 = *(uint64_t **)(v11 + 32);
    v18 = 8 * v15;
    do
    {
      v19 = *v17;
      if (*v17 != v12)
      {
        if (v16 >= HIDWORD(v39))
        {
          v36 = v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v14, v16 + 1, 8);
          v14 = v36;
          v16 = v39;
        }
        *((_QWORD *)v38 + v16) = v19;
        v16 = v39 + 1;
        LODWORD(v39) = v39 + 1;
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
    v15 = *(_QWORD *)(v11 + 40);
  }
  else
  {
    v16 = 0;
  }
  if (v15 == v16)
  {
    AddExpr = 0;
  }
  else
  {
    v37 = v14;
    AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(this, &v38, *(_WORD *)(v11 + 28) & 2, 0);
    AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, (uint64_t)AddExpr, v12, v8);
    if (*(_WORD *)(AddRecExpr + 24) == 7)
      v22 = AddRecExpr;
    else
      v22 = 0;
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, (const llvm::Loop *)v8);
    Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact(BackedgeTakenInfo, (uint64_t)v8, (uint64_t)this, 0);
    if (!v22
      || (*(_WORD *)(v22 + 28) & 4) == 0
      || *((_WORD *)Exact + 12) == 15
      || (llvm::ScalarEvolution::isKnownPositive(this, Exact) & 1) == 0)
    {
      __asm { BR              X11 }
    }
    v14 = v37;
  }
  if (v38 != v14)
    free(v38);
  if (!AddExpr)
    return llvm::ScalarEvolution::getSignExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  v25 = *(_QWORD *)(a1 + 40);
  if (v25 == 2)
  {
    v26 = *(const llvm::SCEV **)(*(_QWORD *)(a1 + 32) + 8);
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
    v38 = v40;
    v39 = 0x300000000;
    v34 = 8 * v25 - 8;
    if ((unint64_t)v34 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v34 >> 3, 8);
      v35 = v39;
    }
    else
    {
      v35 = 0;
    }
    if (v25 != 1)
    {
      memcpy((char *)v38 + 8 * v35, (const void *)(v33 + 8), 8 * v25 - 8);
      v35 = v39;
    }
    LODWORD(v39) = v35 + ((unint64_t)v34 >> 3);
    v26 = (const llvm::SCEV *)sub_1C618AB20((uint64_t *)this, (uint64_t)&v38, *(uint64_t ***)(a1 + 48));
    if (v38 != v40)
      free(v38);
  }
  SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, v26, a2, a4);
  v28 = llvm::ScalarEvolution::getSignExtendExpr(this, AddExpr, a2, a4);
  v38 = v40;
  v40[0] = SignExtendExpr;
  v40[1] = v28;
  v39 = 0x200000002;
  v29 = llvm::ScalarEvolution::getAddExpr(this, &v38, 0, 0);
  if (v38 != v40)
    free(v38);
  return v29;
}

uint64_t llvm::ScalarEvolution::proveNoSignedWrapViaInduction(llvm::ScalarEvolution *this, const llvm::SCEVAddRecExpr *a2)
{
  __int16 v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  unint64_t v8;
  const llvm::Loop *v9;
  uint64_t BackedgeTakenInfo;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v2 = *((_WORD *)a2 + 14);
  v3 = v2 & 7;
  if ((v2 & 4) != 0)
    return v3;
  if (*((_QWORD *)a2 + 5) != 2)
    return v3;
  sub_1C4774094((llvm::ScalarEvolution *)((char *)this + 1168), (uint64_t)a2);
  if (!v6)
    return v3;
  v7 = *((_QWORD *)a2 + 5);
  if (v7 == 2)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  }
  else
  {
    v20 = *((_QWORD *)a2 + 4);
    v23 = v25;
    v24 = 0x300000000;
    v21 = 8 * v7 - 8;
    if ((unint64_t)v21 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v21 >> 3, 8);
      v22 = v24;
    }
    else
    {
      v22 = 0;
    }
    if (v7 != 1)
    {
      memcpy((char *)v23 + 8 * v22, (const void *)(v20 + 8), 8 * v7 - 8);
      v22 = v24;
    }
    LODWORD(v24) = v22 + ((unint64_t)v21 >> 3);
    v8 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v23, *((uint64_t ***)a2 + 6));
    if (v23 != v25)
      free(v23);
  }
  v9 = (const llvm::Loop *)*((_QWORD *)a2 + 6);
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v9);
  v11 = *(_QWORD *)(BackedgeTakenInfo + 104);
  if (v11)
  {
    v12 = *(_DWORD *)(BackedgeTakenInfo + 8);
    if (!v12)
      goto LABEL_13;
    v13 = (_DWORD *)(*(_QWORD *)BackedgeTakenInfo + 48);
    v14 = 88 * v12;
    while (*(v13 - 1) == *v13)
    {
      v13 += 22;
      v14 -= 88;
      if (!v14)
        goto LABEL_13;
    }
  }
  v11 = *((_QWORD *)this + 6);
LABEL_13:
  if (*(_WORD *)(v11 + 24) != 15 || *((_BYTE *)this + 8))
    goto LABEL_18;
  v15 = *((_QWORD *)this + 3);
  if (!*(_BYTE *)(v15 + 184))
    llvm::AssumptionCache::scanFunction(*((llvm::AssumptionCache **)this + 3));
  if (*(_DWORD *)(v15 + 24))
  {
LABEL_18:
    LODWORD(v23) = 0;
    sub_1C4F1D324(v8);
    if (v16)
    {
      v17 = v16;
      v18 = v23;
      if ((llvm::ScalarEvolution::isLoopBackedgeGuardedByCond(this, v9, v23, a2, v16) & 1) != 0
        || llvm::ScalarEvolution::isKnownOnEveryIteration(this, v18, (uint64_t)a2, v17))
      {
        return v3 | 4;
      }
    }
  }
  return v3;
}

BOOL llvm::ScalarEvolution::isKnownNonNegative(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t RangeRef;
  unsigned int v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v8;
  unsigned int v9;

  RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, (uint64_t)a2, 1u, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v8);
  v3 = v9 - 1;
  if (v9 >= 0x41)
    v4 = (unint64_t *)(v8 + 8 * (v3 >> 6));
  else
    v4 = (unint64_t *)&v8;
  v5 = *v4;
  if (v9 >= 0x41 && v8 != 0)
    MEMORY[0x1CAA32F9C]();
  return ((v5 >> v3) & 1) == 0;
}

void llvm::ScalarEvolution::getCastExpr(llvm::ScalarEvolution *this, int a2, llvm::SCEV *a3, llvm::Type *a4)
{
  uint64_t v5;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      llvm::ScalarEvolution::getSignExtendExpr(this, a3, a4, 0);
    }
    else
    {
      llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, a3);
      if (*(_WORD *)(v5 + 24) != 15)
        llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)this, v5);
    }
  }
  else if (a2 == 1)
  {
    llvm::ScalarEvolution::getTruncateExpr(this, a3, a4, 0);
  }
  else
  {
    llvm::ScalarEvolution::getZeroExtendExpr(this, a3, a4, 0);
  }
}

unint64_t llvm::ScalarEvolution::getAnyExtendExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3)
{
  llvm::Type *v3;
  llvm::Type *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t ZeroExtendExpr;
  unint64_t SignExtendExpr;
  unint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  const llvm::SCEV **v19;
  uint64_t v20;
  uint64_t AnyExtendExpr;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v3 = a3;
  v25[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a3 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), a3);
    v3 = v6;
  }
  v7 = a2 == 0;
  if (a2 && !*((_WORD *)a2 + 12))
  {
    v8 = *((_QWORD *)a2 + 4);
    v9 = (_QWORD *)(v8 + 24);
    v10 = *(_DWORD *)(v8 + 32);
    v11 = v10 - 1;
    if (v10 >= 0x41)
      v9 = (_QWORD *)(*v9 + 8 * (v11 >> 6));
    if (((*v9 >> v11) & 1) != 0)
      return llvm::ScalarEvolution::getSignExtendExpr(this, a2, v3, 0);
    v7 = 0;
  }
  else if (a2 && *((_WORD *)a2 + 12) == 1)
  {
    __asm { BR              X10 }
  }
  ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, a2, v3, 0);
  SignExtendExpr = ZeroExtendExpr;
  if (*(_WORD *)(ZeroExtendExpr + 24) == 2)
  {
    v15 = ZeroExtendExpr;
    SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, a2, v3, 0);
    if (*(_WORD *)(SignExtendExpr + 24) == 3)
    {
      v16 = *((unsigned __int16 *)a2 + 12);
      v17 = v16 != 7 || v7;
      if ((v17 & 1) != 0)
      {
        if (v16 != 9)
          return v15;
      }
      else
      {
        v23 = v25;
        v24 = 0x400000000;
        v18 = *((_QWORD *)a2 + 5);
        if (v18)
        {
          v19 = (const llvm::SCEV **)*((_QWORD *)a2 + 4);
          v20 = 8 * v18;
          do
          {
            AnyExtendExpr = llvm::ScalarEvolution::getAnyExtendExpr(this, *v19, v3);
            v22 = v24;
            if (v24 >= (unint64_t)HIDWORD(v24))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v24 + 1, 8);
              v22 = v24;
            }
            *((_QWORD *)v23 + v22) = AnyExtendExpr;
            LODWORD(v24) = v24 + 1;
            ++v19;
            v20 -= 8;
          }
          while (v20);
        }
        SignExtendExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, (uint64_t **)&v23, *((uint64_t ***)a2 + 6));
        if (v23 != v25)
          free(v23);
      }
    }
  }
  return SignExtendExpr;
}

void llvm::ScalarEvolution::getTruncateOrNoop(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

unint64_t sub_1C4F14C70()
{
  uint64_t v0;
  llvm::Type *v1;
  const llvm::SCEV *v2;
  llvm::ScalarEvolution *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t IndexTypeSizeInBits;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;

  v4 = *(uint64_t **)(v0 + 32);
  v5 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 40) + 272;
  if (*(_BYTE *)(*v4 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, v5);
  }
  else
  {
    sub_1C4768AD0(v6, v5);
    IndexTypeSizeInBits = v8;
    if ((_DWORD)v7 == 1)
  }
  v10 = *(_QWORD *)(*(_QWORD *)v3 + 40) + 272;
  if (*((_BYTE *)v1 + 8) == 15)
  {
    v11 = llvm::DataLayout::getIndexTypeSizeInBits(v10, (uint64_t)v1);
  }
  else
  {
    sub_1C4768AD0(v10, (uint64_t)v1);
    if ((_DWORD)v12 == 1)
    {
      v14 = v11;
      v11 = v14;
    }
  }
  if (IndexTypeSizeInBits == v11)
    return (unint64_t)v2;
  else
    return llvm::ScalarEvolution::getTruncateExpr(v3, v2, v1, 0);
}

void llvm::ScalarEvolution::willNotOverflow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X11 }
}

BOOL sub_1C4F14E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD *, _QWORD);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  int v18;

  v6 = **(_QWORD **)(v0 + 32);
  v7 = *(_QWORD **)v6;
  v8 = (*(_DWORD *)(v6 + 8) >> 7) & 0x1FFFFFE;
  v18 = v8;
  if (v8 <= 63)
  {
    switch(v8)
    {
      case 32:
        v9 = (_QWORD *)(*v7 + 1960);
        goto LABEL_4;
      case 16:
        v9 = (_QWORD *)(*v7 + 1936);
        goto LABEL_4;
      case 8:
        v9 = (_QWORD *)(*v7 + 1912);
        goto LABEL_4;
    }
  }
  else
  {
    if (v8 == 64)
    {
      v9 = (_QWORD *)(*v7 + 1984);
      goto LABEL_4;
    }
    if (v8 == 128)
    {
      v9 = (_QWORD *)(*v7 + 2008);
      goto LABEL_4;
    }
  }
  v15 = sub_1C5270984(*v7 + 2168, &v18);
  v9 = (_QWORD *)*((_QWORD *)v15 + 1);
  if (!v9)
  {
    v16 = v15;
    v9 = (_QWORD *)sub_1C484358C(*v7 + 2040, 24, 3);
    v17 = v18;
    *v9 = v7;
    v9[2] = 0;
    v9[1] = (v17 << 8) | 0xDu;
    *((_QWORD *)v16 + 1) = v9;
  }
LABEL_4:
  v10 = v4(v1, v3, v2, 0, 0);
  v11 = v5(v1, v10, v9, 0);
  v12 = v5(v1, v3, v9, 0);
  v13 = v5(v1, v2, v9, 0);
  return v11 == v4(v1, v12, v13, 0, 0);
}

void llvm::ScalarEvolution::getMinusSCEV(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X11 }
  __asm { BR              X10 }
}

void sub_1C4F15084()
{
  JUMPOUT(0x1C4F15070);
}

void sub_1C4F15090()
{
  JUMPOUT(0x1C4F15088);
}

uint64_t sub_1C4F15098(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  uint64_t RangeRef;
  _BOOL4 v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t NegativeSCEV;
  uint64_t AddExpr;
  int v40;
  unint64_t *v41;
  _BOOL4 v42;
  unint64_t *v43;
  uint64_t v44;
  _QWORD v45[13];

  if (*(_BYTE *)(**(_QWORD **)(v24 + 32) + 8) == 15)
    __asm { BR              X11 }
  RangeRef = llvm::ScalarEvolution::getRangeRef(v25, v28, 1u, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v43);
  if (v44 >= 0x41)
  {
    v41 = v43;
    if (((v43[(v44 - 1) >> 6] >> (v44 - 1)) & 1) != 0)
    {
      v40 = v44 - 1;
      v42 = llvm::APInt::countTrailingZerosSlowCase(&v43) == v40;
    }
    else
    {
      v42 = 0;
    }
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    v31 = v42;
    if ((v29 & 4) != 0)
      goto LABEL_5;
LABEL_13:
    v36 = 0;
    goto LABEL_15;
  }
  v31 = v43 == (unint64_t *)(1 << (v44 - 1));
  if ((v29 & 4) == 0)
    goto LABEL_13;
LABEL_5:
  if (v31)
  {
    v32 = llvm::ScalarEvolution::getRangeRef(v25, v26, 1u, 0);
    llvm::ConstantRange::getSignedMin(v32, (llvm::APInt *)&v43);
    v33 = v44 - 1;
    if (v44 >= 0x41)
      v34 = &v43[v33 >> 6];
    else
      v34 = (unint64_t *)&v43;
    v35 = (1 << v33) & *v34;
    if (v44 >= 0x41 && v43)
      MEMORY[0x1CAA32F9C]();
    if (v35)
      goto LABEL_13;
  }
  v36 = 4;
LABEL_15:
  NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(v25, v28);
  v43 = v45;
  v45[0] = v26;
  v45[1] = NegativeSCEV;
  v44 = 0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr(v25, (uint64_t)&v43, v36, v27);
  if (v43 != v45)
    free(v43);
  return AddExpr;
}

unint64_t llvm::ScalarEvolution::getStrengthenedNoWrapFlagsFromBinOp(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t SCEVIter;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;

  v2 = *(_BYTE *)(a2 + 17) & 6;
  if (v2 == 6)
    goto LABEL_2;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 > 0x1B)
  {
    v7 = v6 - 28;
    if ((v7 & 0xFFFFFFFD) == 0xD)
      goto LABEL_8;
  }
  else
  {
    v7 = *(unsigned __int16 *)(a2 + 18);
    if ((v7 | 2) == 0xF)
      goto LABEL_8;
  }
  if (v7 != 17)
  {
LABEL_2:
    v3 = 0;
    return v2 | (unint64_t)(v3 << 32);
  }
LABEL_8:
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(unint64_t **)(a2 - 8);
  else
    v9 = (unint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
  v10 = *v9;
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_DWORD *)(a1 + 120);
  if (!v12)
  {
LABEL_17:
    v14 = v11 + 48 * v12;
    goto LABEL_18;
  }
  v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v12 - 1);
  v14 = v11 + 48 * v13;
  v15 = *(_QWORD *)(v14 + 24);
  if (v15 != v10)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v14 = v11 + 48 * v13;
      v15 = *(_QWORD *)(v14 + 24);
      if (v15 == v10)
        goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (v14 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v14 + 40)) == 0)
  {
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v10);
    v8 = *(_DWORD *)(a2 + 20);
    if ((v8 & 0x40000000) == 0)
      goto LABEL_21;
  }
  else if ((v8 & 0x40000000) == 0)
  {
LABEL_21:
    v19 = a2 - 32 * (v8 & 0x7FFFFFF);
    goto LABEL_24;
  }
  v19 = *(_QWORD *)(a2 - 8);
LABEL_24:
  v20 = *(_QWORD *)(v19 + 32);
  v21 = *(_QWORD *)(a1 + 104);
  v22 = *(_DWORD *)(a1 + 120);
  if (!v22)
  {
LABEL_30:
    v24 = v21 + 48 * v22;
    goto LABEL_31;
  }
  v23 = ((v20 >> 4) ^ (v20 >> 9)) & (v22 - 1);
  v24 = v21 + 48 * v23;
  v25 = *(_QWORD *)(v24 + 24);
  if (v25 != v20)
  {
    v26 = 1;
    while (v25 != -4096)
    {
      v27 = v23 + v26++;
      v23 = v27 & (v22 - 1);
      v24 = v21 + 48 * v23;
      v25 = *(_QWORD *)(v24 + 24);
      if (v25 == v20)
        goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_31:
  if (v24 == v21 + 48 * v22 || !*(_QWORD *)(v24 + 40))
    llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v20);
  if ((*(_BYTE *)(a2 + 17) & 2) != 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a2 + 17) & 4) != 0)
      return v2 | (unint64_t)(v3 << 32);
    goto LABEL_43;
  }
  v28 = *(unsigned __int8 *)(a2 + 16);
  if (v28 > 0x1B)
    v29 = v28 - 28;
  else
    v29 = *(unsigned __int16 *)(a2 + 18);
  llvm::ScalarEvolution::willNotOverflow(a1, v29, 0, SCEVIter);
  v3 = v30;
  if ((_DWORD)v30)
    v2 |= 2u;
  if ((*(_BYTE *)(a2 + 17) & 4) == 0)
  {
LABEL_43:
    v31 = *(unsigned __int8 *)(a2 + 16);
    if (v31 > 0x1B)
      v32 = v31 - 28;
    else
      v32 = *(unsigned __int16 *)(a2 + 18);
    llvm::ScalarEvolution::willNotOverflow(a1, v32, 1, SCEVIter);
    if (v33)
    {
      v2 |= 4u;
      v3 = 1;
    }
    else
    {
      v3 = v3;
    }
  }
  return v2 | (unint64_t)(v3 << 32);
}

uint64_t llvm::ScalarEvolution::getSCEV(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  llvm::Value *v6;
  int v7;
  unsigned int v8;

  v2 = *((_QWORD *)this + 13);
  v3 = *((_DWORD *)this + 30);
  if (!v3)
  {
LABEL_7:
    v5 = v2 + 48 * v3;
    goto LABEL_8;
  }
  v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v5 = v2 + 48 * v4;
  v6 = *(llvm::Value **)(v5 + 24);
  if (v6 != a2)
  {
    v7 = 1;
    while (v6 != (llvm::Value *)-4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v5 = v2 + 48 * v4;
      v6 = *(llvm::Value **)(v5 + 24);
      if (v6 == a2)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v5 == v2 + 48 * v3 || !*(_QWORD *)(v5 + 40))
    return llvm::ScalarEvolution::createSCEVIter(this, (unint64_t)a2);
  else
    return *(_QWORD *)(v5 + 40);
}

BOOL llvm::ScalarEvolution::isLoopInvariant(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  return llvm::ScalarEvolution::getLoopDisposition(this, a2, a3) == 1;
}

BOOL llvm::ScalarEvolution::properlyDominates(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::BasicBlock *a3)
{
  return llvm::ScalarEvolution::getBlockDisposition(this, a2, a3) == 2;
}

void sub_1C4F15698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int8x16_t *v5;
  unint64_t v6;
  BOOL v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  unint64_t *v10;
  BOOL v11;
  unint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int8x16_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD **v24;
  _QWORD *v25[3];
  _QWORD **v26;
  _QWORD *v27[3];
  uint64_t v28;
  uint64_t *v29;

  v28 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= 2)
  {
    v27[0] = 0;
    v27[1] = 0;
    v26 = v27;
    v25[0] = 0;
    v25[1] = 0;
    v23[3] = a3;
    v24 = v25;
    v23[0] = &v26;
    v23[1] = &v24;
    v23[2] = &v28;
    v5 = *(int8x16_t **)a1;
    if ((_DWORD)v3 == 2)
    {
      v6 = sub_1C4F52E98((uint64_t)&v26, (uint64_t)&v24, a2, v5->u64[1], v5->i64[0], a3, 0);
      if (HIDWORD(v6))
        v7 = (v6 & 0x80000000) == 0;
      else
        v7 = 1;
      if (!v7)
        *v5 = vextq_s8(*v5, *v5, 8uLL);
    }
    else
    {
      v29 = v23;
      if (v3 < 0x81)
      {
LABEL_12:
        sub_1C4F53A1C((unint64_t)v5, (unint64_t *)v5 + v3, &v29, v3, 0, 0);
      }
      else
      {
        v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        v9 = v3;
        while (1)
        {
          v10 = (unint64_t *)operator new(8 * v9, v8);
          if (v10)
            break;
          v11 = v9 > 1;
          v9 >>= 1;
          if (!v11)
            goto LABEL_12;
        }
        v12 = v10;
        sub_1C4F53A1C((unint64_t)v5, (unint64_t *)v5 + v3, &v29, v3, v10, v9);
        operator delete(v12);
      }
      v13 = *(_DWORD *)(a1 + 8);
      v14 = v13 - 2;
      if (v13 != 2)
      {
        v15 = 0;
        do
        {
          v16 = v15 + 1;
          v17 = v13;
          if (v15 + 1 != v13)
          {
            v18 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v15);
            v19 = *(unsigned __int16 *)(v18 + 24);
            do
            {
              v20 = *(int8x16_t **)a1;
              v21 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v16);
              if (*(unsigned __int16 *)(v21 + 24) != v19)
                break;
              if (v21 == v18)
              {
                v22 = v20->i64[++v15];
                v20->i64[v15] = v18;
                v20->i64[v16] = v22;
                if (v15 == v14)
                  goto LABEL_24;
              }
              ++v16;
            }
            while (v13 != v16);
            v17 = v15 + 1;
          }
          v15 = v17;
        }
        while (v17 != v14);
      }
    }
LABEL_24:
    sub_1C6143384(v25[0]);
    sub_1C6143384(v27[0]);
  }
}

uint64_t llvm::ScalarEvolution::getOrCreateAddExpr(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _DWORD *v18;
  size_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  void *__s1;
  uint64_t v37;
  _DWORD v38[32];
  void *v39;
  uint64_t v40;
  _QWORD v41[18];

  v41[16] = *MEMORY[0x1E0C80C00];
  v38[0] = 4;
  v37 = 0x2000000001;
  v7 = 8 * a3;
  __s1 = v38;
  if (a3)
  {
    v8 = 1;
    v9 = 8 * a3;
    v10 = a2;
    v11 = a2;
    do
    {
      v12 = *v11;
      if (v8 >= HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v38, v8 + 1, 4);
        v8 = v37;
      }
      *((_DWORD *)__s1 + v8) = v12;
      v13 = (v37 + 1);
      LODWORD(v37) = v13;
      if (v13 >= HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v38, v13 + 1, 4);
        LODWORD(v13) = v37;
      }
      *((_DWORD *)__s1 + v13) = HIDWORD(v12);
      v8 = v37 + 1;
      LODWORD(v37) = v37 + 1;
      ++v11;
      v9 -= 8;
    }
    while (v9);
    v14 = __s1;
  }
  else
  {
    v10 = a2;
    v8 = 1;
    v14 = v38;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 832)
                  + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(v14, (uint64_t)v14 + 4 * v8)));
  v39 = v41;
  v40 = 0x2000000000;
  if (v15)
    v16 = (v15 & 1) == 0;
  else
    v16 = 0;
  if (!v16)
  {
LABEL_21:
    v21 = sub_1C484358C(a1 + 864, v7, 3);
    v22 = v21;
    if (a3)
    {
      v23 = (_QWORD *)v21;
      v24 = v10;
      do
      {
        v25 = *v24++;
        *v23++ = v25;
        v7 -= 8;
      }
      while (v7);
    }
    v26 = sub_1C484358C(a1 + 864, 56, 3);
    v27 = sub_1C484358C(a1 + 864, 4 * v37, 2);
    v28 = v27;
    if ((_DWORD)v37)
    {
      v29 = (int *)__s1;
      v30 = 4 * v37;
      v31 = (_DWORD *)v27;
      do
      {
        v32 = *v29++;
        *v31++ = v32;
        v30 -= 4;
      }
      while (v30);
      v33 = v37;
    }
    else
    {
      v33 = 0;
    }
    v34 = sub_1C4F03F00(v22, a3);
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = v28;
    *(_QWORD *)(v26 + 16) = v33;
    *(_WORD *)(v26 + 24) = 4;
    *(_WORD *)(v26 + 26) = v34;
    *(_WORD *)(v26 + 28) = 0;
    *(_QWORD *)(v26 + 32) = v22;
    *(_QWORD *)(v26 + 40) = a3;
    if (a3)
      __asm { BR              X13 }
    __asm { BR              X11 }
  }
  v17 = v37;
  v18 = __s1;
  v19 = 4 * v37;
  while (*(_QWORD *)(v15 + 16) != v17 || memcmp(v18, *(const void **)(v15 + 8), v19))
  {
    LODWORD(v40) = 0;
    v15 = *(_QWORD *)v15;
    if (v15)
      v20 = (v15 & 1) == 0;
    else
      v20 = 0;
    if (!v20)
      goto LABEL_21;
  }
  *(_WORD *)(v15 + 28) |= a4;
  if (v18 != v38)
    free(v18);
  return v15;
}

uint64_t llvm::ScalarEvolution::findExistingSCEVInCache(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  BOOL v13;
  uint64_t v14;
  size_t v15;
  BOOL v16;
  void *__s1;
  uint64_t v19;
  _DWORD v20[32];
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x1E0C80C00];
  __s1 = v20;
  v20[0] = a2;
  v19 = 0x2000000001;
  if (a4)
  {
    v6 = 8 * a4;
    LODWORD(v7) = 1;
    do
    {
      v8 = *a3;
      if (v7 >= HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v20, v7 + 1, 4);
        LODWORD(v7) = v19;
      }
      *((_DWORD *)__s1 + v7) = v8;
      v9 = (v19 + 1);
      LODWORD(v19) = v9;
      if (v9 >= HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v20, v9 + 1, 4);
        LODWORD(v9) = v19;
      }
      *((_DWORD *)__s1 + v9) = HIDWORD(v8);
      v7 = (v19 + 1);
      LODWORD(v19) = v19 + 1;
      ++a3;
      v6 -= 8;
    }
    while (v6);
    v10 = __s1;
  }
  else
  {
    v7 = 1;
    v10 = v20;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 832)
                  + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(v10, (uint64_t)v10 + 4 * v7)));
  v21 = v23;
  v22 = 0x2000000000;
  v12 = __s1;
  if (v11)
    v13 = (v11 & 1) == 0;
  else
    v13 = 0;
  if (v13)
  {
    v14 = v19;
    v15 = 4 * v19;
    while (*(_QWORD *)(v11 + 16) != v14 || memcmp(v12, *(const void **)(v11 + 8), v15))
    {
      LODWORD(v22) = 0;
      v11 = *(_QWORD *)v11;
      if (v11)
        v16 = (v11 & 1) == 0;
      else
        v16 = 0;
      if (!v16)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    v11 = 0;
  }
  if (v12 != v20)
    free(v12);
  return v11;
}

uint64_t sub_1C4F15EB0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t *v8;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  llvm::APInt *v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t MulExpr;
  uint64_t *v64;
  void *v65;
  size_t v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BOOL4 v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t *v102;
  int v104;
  uint64_t v105[2];
  unsigned int v106;
  void *__src;
  unsigned int v108;
  void *v109;
  uint64_t v110;
  _DWORD v111[8];
  uint64_t v112;

  v8 = a4;
  v112 = *MEMORY[0x1E0C80C00];
  v12 = *a4;
  if (*a4)
    v13 = *(unsigned __int16 *)(*a4 + 24) == 0;
  else
    v13 = 0;
  if (v13)
  {
    v104 = 0;
    v14 = 0;
    while (1)
    {
      v17 = a6[2];
      if (v17 < 0x41 || v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a6) <= 0x40)
      {
        v18 = *(_QWORD **)a6;
        if (v17 < 0x41)
          v18 = a6;
        if (*v18 == 1)
        {
          v19 = a3[2];
          if (v19 < 0x41 || v19 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) <= 0x40)
          {
            v20 = *(_QWORD **)a3;
            if (v19 < 0x41)
              v20 = a3;
            if (!*v20)
            {
              v21 = *(_QWORD *)(v12 + 32);
              v25 = (llvm::APInt *)(v21 + 24);
              v26 = *(_DWORD *)(v21 + 32);
              if (v26 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v25) != v26)
                  goto LABEL_20;
              }
              else if (*(_QWORD *)v25)
              {
                goto LABEL_20;
              }
            }
          }
        }
      }
      v21 = *(_QWORD *)(v12 + 32);
      v104 = 1;
LABEL_20:
      llvm::APInt::operator*((uint64_t)a6, (_QWORD *)(v21 + 24), (uint64_t)&v109);
      v22 = a3[2];
      if (v22 >= 0x41)
      {
        v27 = 0;
        v28 = 0;
        v29 = *(_QWORD *)a3;
        v23 = (char *)v109;
        v30 = (unint64_t)(v22 + 63) >> 6;
        do
        {
          v31 = *(_QWORD *)(v29 + v27);
          v32 = *(_QWORD *)&v23[v27] + v31;
          v33 = v32 < v31;
          v34 = v32 + 1 <= v31;
          if (v28)
          {
            ++v32;
            v28 = v34;
          }
          else
          {
            v28 = v33;
          }
          *(_QWORD *)(v29 + v27) = v32;
          v27 += 8;
        }
        while (8 * v30 != v27);
        *(_QWORD *)(*(_QWORD *)a3 + 8 * (v30 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
      }
      else
      {
        v23 = (char *)v109;
        if ((_DWORD)v22)
          v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
        else
          v24 = 0;
        *(_QWORD *)a3 = v24 & ((unint64_t)v109 + *(_QWORD *)a3);
      }
      if (v110 >= 0x41 && v23)
        MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
      v15 = (v14 + 1);
      v14 = v15;
      v12 = v8[v15];
      if (!v12 || *(_WORD *)(v12 + 24))
        goto LABEL_6;
    }
  }
  v14 = 0;
  v104 = 0;
  v15 = 0;
LABEL_6:
  if (v15 != a5)
  {
    v100 = a2 + 16;
    v102 = v8;
    while (1)
    {
      v35 = v8[v15];
      if (v35)
        v36 = *(unsigned __int16 *)(v35 + 24) == 5;
      else
        v36 = 0;
      if (v36)
      {
        v37 = **(_QWORD **)(v35 + 32);
        if (!*(_WORD *)(v37 + 24))
        {
          llvm::APInt::operator*((uint64_t)a6, (_QWORD *)(*(_QWORD *)(v37 + 32) + 24), (uint64_t)&__src);
          v57 = *(_QWORD *)(v35 + 32);
          v58 = *(_QWORD *)(v35 + 40);
          if (v58 == 2)
          {
            v59 = *(_QWORD *)(v57 + 8);
            if (*(_WORD *)(v59 + 24) == 4)
            {
              v104 |= sub_1C4F15EB0(a1, a2, a3, *(_QWORD *)(v59 + 32), *(_QWORD *)(v59 + 40), &__src, a7);
              v60 = v108;
LABEL_118:
              if (v60 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              goto LABEL_77;
            }
          }
          v109 = v111;
          v110 = 0x400000000;
          v61 = 8 * v58 - 8;
          if ((unint64_t)v61 >= 0x21)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v61 >> 3, 8);
            v62 = v110;
          }
          else
          {
            v62 = 0;
          }
          if (v58 != 1)
          {
            memcpy((char *)v109 + 8 * v62, (const void *)(v57 + 8), 8 * v58 - 8);
            v62 = v110;
          }
          LODWORD(v110) = v62 + ((unint64_t)v61 >> 3);
          MulExpr = llvm::ScalarEvolution::getMulExpr(a7, (uint64_t)&v109, 0, 0);
          v105[0] = MulExpr;
          v60 = v108;
          v106 = v108;
          if (v108 > 0x40)
          {
            v66 = (((unint64_t)v108 + 63) >> 3) & 0x3FFFFFF8;
            v65 = (void *)operator new[]();
            v64 = (uint64_t *)__src;
            memcpy(v65, __src, v66);
          }
          else
          {
            v64 = (uint64_t *)__src;
            v65 = __src;
          }
          v105[1] = (uint64_t)v65;
          v67 = *(_DWORD *)(a1 + 16);
          if (v67)
          {
            v68 = *(_QWORD *)a1;
            v69 = v67 - 1;
            v70 = v69 & ((MulExpr >> 4) ^ (MulExpr >> 9));
            v71 = (uint64_t *)(*(_QWORD *)a1 + 24 * v70);
            v72 = *v71;
            if (MulExpr == *v71)
            {
LABEL_100:
              if (v60 >= 0x41 && v65)
              {
                v77 = *(_QWORD *)a1;
                MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
                v68 = v77;
              }
              v78 = v68 + 24 * v70;
              v79 = (unint64_t *)(v78 + 8);
              v80 = *(unsigned int *)(v78 + 16);
              if (v80 >= 0x41)
              {
                v93 = 0;
                v94 = (unint64_t *)*v79;
                v95 = (unint64_t)(v80 + 63) >> 6;
                v96 = v95;
                do
                {
                  v97 = *v64++;
                  v98 = v97 + *v94;
                  v99 = v98 + 1 <= *v94;
                  if (v93)
                  {
                    ++v98;
                    v93 = v99;
                  }
                  else
                  {
                    v93 = v98 < *v94;
                  }
                  *v94++ = v98;
                  --v96;
                }
                while (v96);
                *(_QWORD *)(*v79 + 8 * (v95 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
              }
              else
              {
                if ((_DWORD)v80)
                  v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
                else
                  v81 = 0;
                *v79 = v81 & ((unint64_t)v64 + *v79);
              }
              v104 = 1;
              v8 = v102;
            }
            else
            {
              v73 = 0;
              v74 = 1;
              while (v72 != -4096)
              {
                if (v73)
                  v75 = 0;
                else
                  v75 = v72 == -8192;
                if (v75)
                  v73 = v71;
                v76 = v70 + v74++;
                v70 = v76 & v69;
                v71 = (uint64_t *)(v68 + 24 * (v76 & v69));
                v72 = *v71;
                if (MulExpr == *v71)
                  goto LABEL_100;
              }
              if (v73)
                v82 = v73;
              else
                v82 = v71;
LABEL_113:
              v83 = sub_1C4F545F0(a1, v105, v82);
              *((_DWORD *)v83 + 4) = v60;
              *v83 = MulExpr;
              v83[1] = (uint64_t)v65;
              v84 = *(unsigned int *)(a2 + 8);
              if (v84 >= *(unsigned int *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v100, v84 + 1, 8);
                v84 = *(unsigned int *)(a2 + 8);
              }
              v8 = v102;
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v84) = MulExpr;
              ++*(_DWORD *)(a2 + 8);
            }
            if (v109 != v111)
              free(v109);
            goto LABEL_118;
          }
          v82 = 0;
          goto LABEL_113;
        }
      }
      v109 = (void *)v35;
      v38 = a6[2];
      v111[0] = v38;
      if (v38 > 0x40)
      {
        v39 = (void *)operator new[]();
        memcpy(v39, *(const void **)a6, ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v39 = *(void **)a6;
      }
      v110 = (uint64_t)v39;
      v40 = *(_DWORD *)(a1 + 16);
      if (!v40)
        break;
      v41 = *(_QWORD *)a1;
      v42 = v40 - 1;
      v43 = v42 & ((v35 >> 4) ^ (v35 >> 9));
      v44 = (uint64_t *)(*(_QWORD *)a1 + 24 * v43);
      v45 = *v44;
      if (v35 != *v44)
      {
        v46 = 0;
        v47 = 1;
        while (v45 != -4096)
        {
          if (v46)
            v48 = 0;
          else
            v48 = v45 == -8192;
          if (v48)
            v46 = v44;
          v49 = v43 + v47++;
          v43 = v49 & v42;
          v44 = (uint64_t *)(v41 + 24 * (v49 & v42));
          v45 = *v44;
          if (v35 == *v44)
            goto LABEL_62;
        }
        if (v46)
          v54 = v46;
        else
          v54 = v44;
        goto LABEL_74;
      }
LABEL_62:
      if (v38 >= 0x41 && v39)
        MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      v50 = v41 + 24 * v43;
      v51 = (unint64_t *)(v50 + 8);
      v52 = *(unsigned int *)(v50 + 16);
      v8 = v102;
      if (v52 >= 0x41)
      {
        v85 = 0;
        v86 = (unint64_t *)*v51;
        v87 = *(uint64_t **)a6;
        v88 = (unint64_t)(v52 + 63) >> 6;
        v89 = v88;
        do
        {
          v90 = *v87++;
          v91 = v90 + *v86;
          v92 = v91 + 1 <= *v86;
          if (v85)
          {
            ++v91;
            v85 = v92;
          }
          else
          {
            v85 = v91 < *v86;
          }
          *v86++ = v91;
          --v89;
        }
        while (v89);
        *(_QWORD *)(*v51 + 8 * (v88 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
        v104 = 1;
        v8 = v102;
      }
      else
      {
        if ((_DWORD)v52)
          v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
        else
          v53 = 0;
        *v51 = v53 & (*v51 + *(_QWORD *)a6);
        v104 = 1;
      }
LABEL_77:
      v15 = ++v14;
      if (v14 == a5)
        return v104 & 1;
    }
    v54 = 0;
LABEL_74:
    v55 = sub_1C4F545F0(a1, (uint64_t *)&v109, v54);
    *((_DWORD *)v55 + 4) = v38;
    *v55 = v35;
    v55[1] = (uint64_t)v39;
    v56 = *(unsigned int *)(a2 + 8);
    if (v56 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v100, v56 + 1, 8);
      v56 = *(unsigned int *)(a2 + 8);
    }
    v8 = v102;
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v56) = v35;
    ++*(_DWORD *)(a2 + 8);
    goto LABEL_77;
  }
  return v104 & 1;
}

const llvm::Value *llvm::ScalarEvolution::getDefiningScopeBound(llvm::DominatorTree **a1, uint64_t *a2, uint64_t a3)
{
  char v4;

  return llvm::ScalarEvolution::getDefiningScopeBound(a1, a2, a3, &v4);
}

BOOL llvm::ScalarEvolution::isGuaranteedToTransferExecutionTo(llvm::ScalarEvolution *this, const llvm::Instruction *a2, const llvm::Instruction *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t LoopPredecessor;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int isGuaranteedToTransferExecutionToSuccessor;
  int v24;

  v6 = *((_QWORD *)a3 + 5);
  if (*((_QWORD *)a2 + 5) == v6)
  {
    if ((llvm::isGuaranteedToTransferExecutionToSuccessor((uint64_t)a2 + 24, (uint64_t)a3 + 24, 32) & 1) != 0)
      return 1;
    v6 = *((_QWORD *)a3 + 5);
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = *((_DWORD *)v7 + 4);
  if (!v8)
    return 0;
  v9 = *v7;
  v10 = v8 - 1;
  v11 = ((v6 >> 4) ^ (v6 >> 9)) & (v8 - 1);
  v12 = *(_QWORD *)(v9 + 16 * v11);
  if (v6 != v12)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & v10;
      v12 = *(_QWORD *)(v9 + 16 * v11);
      if (v6 == v12)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v15 = *(_QWORD *)(v9 + 16 * v11 + 8);
  if (!v15 || **(_QWORD **)(v15 + 32) != v6)
    return 0;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v15);
  if (!LoopPredecessor)
    goto LABEL_15;
  v17 = *(_QWORD *)(LoopPredecessor + 40);
  if (v17 == LoopPredecessor + 40)
    goto LABEL_15;
  v18 = v17 - 24;
  if (!v17)
    v18 = 0;
  v19 = *(unsigned __int8 *)(v18 + 16);
  v20 = v19 - 29;
  if (v19 != 30)
  {
    v21 = 0;
    switch(v20)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_16;
      case 1:
        __break(1u);
        goto LABEL_30;
      case 2:
        v24 = (*(_DWORD *)(v18 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
LABEL_30:
        v24 = (*(_DWORD *)(v18 + 20) & 0x7FFFFFF) - 1;
        break;
      case 10:
        v24 = *(_DWORD *)(v18 + 80) + 1;
        break;
      default:
        goto LABEL_15;
    }
    if (v24 != 1)
      goto LABEL_15;
LABEL_28:
    v21 = LoopPredecessor;
    goto LABEL_16;
  }
  if ((*(_DWORD *)(v18 + 20) & 0x7FFFFFF) != 3)
    goto LABEL_28;
LABEL_15:
  v21 = 0;
LABEL_16:
  if (v21 != *((_QWORD *)a2 + 5))
    return 0;
  isGuaranteedToTransferExecutionToSuccessor = llvm::isGuaranteedToTransferExecutionToSuccessor((uint64_t)a2 + 24, v21 + 40, 32);
  return isGuaranteedToTransferExecutionToSuccessor
      && (llvm::isGuaranteedToTransferExecutionToSuccessor(*(_QWORD *)(*((_QWORD *)a3 + 5) + 48), (uint64_t)a3 + 24, 32) & 1) != 0;
}

unint64_t llvm::ScalarEvolution::getOrCreateAddRecExpr(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  void *v20;
  size_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  int v64;
  void *__s1;
  uint64_t v66;
  _DWORD v67[32];
  void *v68;
  uint64_t v69;
  _QWORD v70[18];

  v70[16] = *MEMORY[0x1E0C80C00];
  __s1 = v67;
  v67[0] = 7;
  v66 = 0x2000000001;
  v9 = 8 * a3;
  LODWORD(v10) = 1;
  if (a3)
  {
    v11 = 8 * a3;
    v12 = a2;
    do
    {
      v13 = *v12;
      if (v10 >= HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v67, v10 + 1, 4);
        LODWORD(v10) = v66;
      }
      *((_DWORD *)__s1 + v10) = v13;
      v14 = (v66 + 1);
      LODWORD(v66) = v14;
      if (v14 >= HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v67, v14 + 1, 4);
        LODWORD(v14) = v66;
      }
      *((_DWORD *)__s1 + v14) = HIDWORD(v13);
      v10 = (v66 + 1);
      LODWORD(v66) = v66 + 1;
      ++v12;
      v11 -= 8;
    }
    while (v11);
    if (v10 >= HIDWORD(v66))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v67, v10 + 1, 4);
      LODWORD(v10) = v66;
    }
  }
  v64 = a5;
  *((_DWORD *)__s1 + v10) = a4;
  v15 = (v66 + 1);
  LODWORD(v66) = v15;
  if (v15 >= HIDWORD(v66))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v67, v15 + 1, 4);
    LODWORD(v15) = v66;
  }
  *((_DWORD *)__s1 + v15) = HIDWORD(a4);
  LODWORD(v66) = v66 + 1;
  v16 = *(_QWORD *)(a1 + 832)
      + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(__s1, (uint64_t)__s1 + 4 * v66));
  v17 = *(_QWORD *)v16;
  v68 = v70;
  v69 = 0x2000000000;
  if (v17)
    v18 = (v17 & 1) == 0;
  else
    v18 = 0;
  if (!v18)
  {
LABEL_24:
    v23 = sub_1C484358C(a1 + 864, v9, 3);
    v24 = v23;
    if (a3)
    {
      v25 = (_QWORD *)v23;
      v26 = a2;
      do
      {
        v27 = *v26++;
        *v25++ = v27;
        v9 -= 8;
      }
      while (v9);
    }
    v17 = sub_1C484358C(a1 + 864, 56, 3);
    v28 = sub_1C484358C(a1 + 864, 4 * v66, 2);
    v29 = v28;
    if ((_DWORD)v66)
    {
      v30 = (int *)__s1;
      v31 = 4 * v66;
      v32 = (_DWORD *)v28;
      do
      {
        v33 = *v30++;
        *v32++ = v33;
        v31 -= 4;
      }
      while (v31);
      v34 = v66;
    }
    else
    {
      v34 = 0;
    }
    v35 = sub_1C4F03F00(v24, a3);
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = v29;
    *(_QWORD *)(v17 + 16) = v34;
    *(_WORD *)(v17 + 24) = 7;
    *(_WORD *)(v17 + 26) = v35;
    *(_WORD *)(v17 + 28) = 0;
    *(_QWORD *)(v17 + 32) = v24;
    *(_QWORD *)(v17 + 40) = a3;
    *(_QWORD *)(v17 + 48) = a4;
    v36 = *(_DWORD *)(a1 + 844) + 1;
    v37 = *(_DWORD *)(a1 + 840);
    if (v36 > 2 * v37)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v37, (uint64_t)off_1E813B300);
      v68 = v70;
      v69 = 0x2000000000;
      v16 = *(_QWORD *)(a1 + 832)
          + 8
          * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(v17 + 8), *(_QWORD *)(v17 + 8) + 4 * *(_QWORD *)(v17 + 16)));
      if (v68 != v70)
        free(v68);
      v36 = *(_DWORD *)(a1 + 844) + 1;
    }
    v38 = v64;
    *(_DWORD *)(a1 + 844) = v36;
    v39 = *(_QWORD *)v16;
    if (!*(_QWORD *)v16)
      v39 = v16 | 1;
    *(_QWORD *)v17 = v39;
    *(_QWORD *)v16 = v17;
    v40 = *(_DWORD *)(a1 + 976);
    v41 = a4 >> 4;
    if (v40)
    {
      v42 = *(_QWORD *)(a1 + 960);
      v43 = (v40 - 1) & (v41 ^ (a4 >> 9));
      v44 = (unsigned int *)(v42 + 56 * v43);
      v45 = *(_QWORD *)v44;
      if (*(_QWORD *)v44 == a4)
      {
LABEL_36:
        v46 = v44[4];
        if (v46 >= v44[5])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v44 + 2), (uint64_t)(v44 + 6), v46 + 1, 8);
          LODWORD(v46) = v44[4];
        }
        *(_QWORD *)(*((_QWORD *)v44 + 1) + 8 * v46) = v17;
        ++v44[4];
        llvm::ScalarEvolution::registerUser((_QWORD *)a1, v17, a2, a3);
        goto LABEL_40;
      }
      v48 = 0;
      v49 = 1;
      while (v45 != -4096)
      {
        if (v48)
          v50 = 0;
        else
          v50 = v45 == -8192;
        if (v50)
          v48 = v44;
        v51 = v43 + v49++;
        v43 = v51 & (v40 - 1);
        v44 = (unsigned int *)(v42 + 56 * v43);
        v45 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 == a4)
          goto LABEL_36;
      }
      if (v48)
        v44 = v48;
    }
    else
    {
      v44 = 0;
    }
    v52 = (uint64_t *)(a1 + 960);
    v53 = *(_DWORD *)(a1 + 968);
    if (4 * v53 + 4 >= 3 * v40)
    {
      sub_1C4F5B56C(v52, 2 * v40);
      v55 = *(_QWORD *)(a1 + 960);
      v56 = *(_DWORD *)(a1 + 976) - 1;
      v57 = v56 & (v41 ^ (a4 >> 9));
      v44 = (unsigned int *)(v55 + 56 * v57);
      v58 = *(_QWORD *)v44;
      if (*(_QWORD *)v44 == a4)
      {
LABEL_63:
        v54 = a4;
        goto LABEL_58;
      }
      v59 = 0;
      v60 = 1;
      while (v58 != -4096)
      {
        if (v59)
          v61 = 0;
        else
          v61 = v58 == -8192;
        if (v61)
          v59 = v44;
        v62 = v57 + v60++;
        v57 = v62 & v56;
        v44 = (unsigned int *)(v55 + 56 * v57);
        v58 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 == a4)
          goto LABEL_63;
      }
      if (v59)
        v44 = v59;
    }
    else if (v40 + ~v53 - *(_DWORD *)(a1 + 972) <= v40 >> 3)
    {
      sub_1C4F5B56C(v52, v40);
      v68 = 0;
      sub_1C4F5B4E8(*(_QWORD *)(a1 + 960), *(_DWORD *)(a1 + 976), a4, &v68);
      v44 = (unsigned int *)v68;
    }
    v54 = *(_QWORD *)v44;
LABEL_58:
    ++*(_DWORD *)(a1 + 968);
    if (v54 != -4096)
      --*(_DWORD *)(a1 + 972);
    *(_QWORD *)v44 = a4;
    *((_QWORD *)v44 + 1) = v44 + 6;
    *((_QWORD *)v44 + 2) = 0x400000000;
    goto LABEL_36;
  }
  v19 = v66;
  v20 = __s1;
  v21 = 4 * v66;
  while (*(_QWORD *)(v17 + 16) != v19 || memcmp(v20, *(const void **)(v17 + 8), v21))
  {
    LODWORD(v69) = 0;
    v17 = *(_QWORD *)v17;
    if (v17)
      v22 = (v17 & 1) == 0;
    else
      v22 = 0;
    if (!v22)
      goto LABEL_24;
  }
  v38 = v64;
LABEL_40:
  llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)a1, v17, v38);
  if (__s1 != v67)
    free(__s1);
  return v17;
}

unint64_t llvm::ScalarEvolution::getOrCreateMulExpr(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  _DWORD *v18;
  size_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  void *__s1;
  uint64_t v41;
  _DWORD v42[32];
  void *v43;
  uint64_t v44;
  _QWORD v45[18];

  v45[16] = *MEMORY[0x1E0C80C00];
  v42[0] = 5;
  v41 = 0x2000000001;
  v7 = 8 * a3;
  __s1 = v42;
  v8 = 1;
  if (a3)
  {
    v9 = 8 * a3;
    v10 = a2;
    do
    {
      v11 = *v10;
      if (v8 >= HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v42, v8 + 1, 4);
        LODWORD(v8) = v41;
      }
      *((_DWORD *)__s1 + v8) = v11;
      v12 = (v41 + 1);
      LODWORD(v41) = v12;
      if (v12 >= HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v42, v12 + 1, 4);
        LODWORD(v12) = v41;
      }
      *((_DWORD *)__s1 + v12) = HIDWORD(v11);
      v8 = (v41 + 1);
      LODWORD(v41) = v41 + 1;
      ++v10;
      v9 -= 8;
    }
    while (v9);
    v13 = __s1;
  }
  else
  {
    v13 = v42;
  }
  v14 = *(_QWORD *)(a1 + 832)
      + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(v13, (uint64_t)v13 + 4 * v8));
  v15 = *(_QWORD *)v14;
  v43 = v45;
  v44 = 0x2000000000;
  if (v15)
    v16 = (v15 & 1) == 0;
  else
    v16 = 0;
  if (v16)
  {
    v17 = v41;
    v18 = __s1;
    v19 = 4 * v41;
    while (*(_QWORD *)(v15 + 16) != v17 || memcmp(v18, *(const void **)(v15 + 8), v19))
    {
      LODWORD(v44) = 0;
      v15 = *(_QWORD *)v15;
      if (v15)
        v20 = (v15 & 1) == 0;
      else
        v20 = 0;
      if (!v20)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    v21 = sub_1C484358C(a1 + 864, v7, 3);
    v22 = v21;
    if (a3)
    {
      v23 = (_QWORD *)v21;
      v24 = a2;
      do
      {
        v25 = *v24++;
        *v23++ = v25;
        v7 -= 8;
      }
      while (v7);
    }
    v15 = sub_1C484358C(a1 + 864, 48, 3);
    v26 = sub_1C484358C(a1 + 864, 4 * v41, 2);
    v27 = v26;
    if ((_DWORD)v41)
    {
      v29 = a2;
      v28 = (int *)__s1;
      v30 = 4 * v41;
      v31 = (_DWORD *)v26;
      do
      {
        v32 = *v28++;
        *v31++ = v32;
        v30 -= 4;
      }
      while (v30);
      v33 = v41;
    }
    else
    {
      v33 = 0;
      v29 = a2;
    }
    v34 = sub_1C4F03F00(v22, a3);
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = v27;
    *(_QWORD *)(v15 + 16) = v33;
    *(_WORD *)(v15 + 24) = 5;
    *(_WORD *)(v15 + 26) = v34;
    *(_WORD *)(v15 + 28) = 0;
    *(_QWORD *)(v15 + 32) = v22;
    *(_QWORD *)(v15 + 40) = a3;
    v35 = *(_DWORD *)(a1 + 844) + 1;
    v36 = *(_DWORD *)(a1 + 840);
    if (v35 > 2 * v36)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v36, (uint64_t)off_1E813B300);
      v43 = v45;
      v44 = 0x2000000000;
      v14 = *(_QWORD *)(a1 + 832)
          + 8
          * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(v15 + 8), *(_QWORD *)(v15 + 8) + 4 * *(_QWORD *)(v15 + 16)));
      if (v43 != v45)
        free(v43);
      v35 = *(_DWORD *)(a1 + 844) + 1;
    }
    *(_DWORD *)(a1 + 844) = v35;
    v37 = *(_QWORD *)v14;
    if (!*(_QWORD *)v14)
      v37 = v14 | 1;
    *(_QWORD *)v15 = v37;
    *(_QWORD *)v14 = v15;
    llvm::ScalarEvolution::registerUser((_QWORD *)a1, v15, v29, a3);
    v18 = __s1;
  }
  *(_WORD *)(v15 + 28) |= a4;
  if (v18 != v42)
    free(v18);
  return v15;
}

const llvm::SCEV *llvm::ScalarEvolution::getUDivExactExpr(llvm::ScalarEvolution *this, uint64_t **a2, const llvm::SCEV *a3)
{
  unint64_t v3;
  const llvm::SCEV *MulExpr;
  uint64_t *v7;
  const llvm::SCEV *UDivExactExpr;
  BOOL v9;
  const llvm::SCEV *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int64_t v29;
  unint64_t v31;
  unsigned int v32;
  const llvm::APInt *v33;
  llvm::ValueHandleBase *v34;
  unsigned __int8 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  size_t v43;
  BOOL v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  const llvm::APInt *v55;
  llvm::ValueHandleBase *v56;
  unsigned __int8 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  _QWORD *v63;
  size_t v64;
  BOOL v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  BOOL v79;
  char v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  unsigned int v88;
  void *__s1;
  uint64_t v90;
  _QWORD v91[16];
  void *v92;
  uint64_t v93;
  _QWORD v94[18];

  v3 = (unint64_t)a3;
  MulExpr = (const llvm::SCEV *)a2;
  v94[16] = *MEMORY[0x1E0C80C00];
  if (!a2 || *((_WORD *)a2 + 12) != 5 || (*((_WORD *)a2 + 14) & 2) == 0)
    return llvm::ScalarEvolution::getUDivExpr(this, (const llvm::SCEV *)a2, a3);
  if (a3
    && !*((_WORD *)a3 + 12)
    && ((v7 = a2[4], (UDivExactExpr = (const llvm::SCEV *)*v7) != 0)
      ? (v9 = *(unsigned __int16 *)(*v7 + 24) == 0)
      : (v9 = 0),
        v9))
  {
    if (UDivExactExpr == a3)
    {
      v15 = a2[5];
      v92 = v94;
      v93 = 0x200000000;
      v16 = 8 * (_QWORD)v15 - 8;
      if ((unint64_t)v16 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v16 >> 3, 8);
        v17 = v93;
      }
      else
      {
        v17 = 0;
      }
      if (v15 != (uint64_t *)1)
      {
        memcpy((char *)v92 + 8 * v17, v7 + 1, 8 * (_QWORD)v15 - 8);
        v17 = v93;
      }
      v26 = v17 + ((unint64_t)v16 >> 3);
      goto LABEL_34;
    }
    gcd(*v7, (uint64_t)a3, (uint64_t)&v87);
    if (v88 > 0x40)
    {
      v28 = 0;
      v29 = ((unint64_t)v88 + 63) >> 6;
      do
      {
        if (v29-- < 1)
          break;
        v31 = *(_QWORD *)(v87 + 8 * v29);
        v28 += __clz(v31);
      }
      while (!v31);
      v32 = v88 | 0xFFFFFFC0;
      if ((v88 & 0x3F) == 0)
        v32 = 0;
      v27 = v28 + v32;
    }
    else
    {
      v27 = v88 + __clz(v87) - 64;
    }
    if (v88 - v27 < 2)
      goto LABEL_116;
    llvm::APInt::udiv((llvm::APInt *)(*((_QWORD *)UDivExactExpr + 4) + 24), (const llvm::APInt *)&v87, (llvm::APInt *)&v85);
    v34 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v85, v33);
    __s1 = v91;
    LODWORD(v91[0]) = 0;
    *(_QWORD *)((char *)v91 + 4) = v34;
    v90 = 0x2000000003;
    v84 = (char *)this + 832;
    v35 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v82 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v82 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v82;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v36 = __ROR8__(*(_QWORD *)((char *)v91 + 4) + 12, 12);
    v37 = 0x9DDFEA08EB382D69 * (v91[0] ^ qword_1ED7EAC80 ^ v36);
    v38 = *((_QWORD *)this + 104)
        + 8
        * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                           * ((((0x9DDFEA08EB382D69 * (v36 ^ (v37 >> 47) ^ v37)) >> 32) >> 15) ^ (-348639895 * (v36 ^ (v37 >> 47) ^ v37)))) ^ HIDWORD(v91[0])));
    v39 = *(_QWORD *)v38;
    v92 = v94;
    v93 = 0x2000000000;
    if (v39 && (v39 & 1) == 0)
    {
      v41 = v90;
      v42 = __s1;
      v43 = 4 * v90;
      while (*(_QWORD *)(v39 + 16) != v41 || memcmp(v42, *(const void **)(v39 + 8), v43))
      {
        LODWORD(v93) = 0;
        v39 = *(_QWORD *)v39;
        if (v39)
          v44 = (v39 & 1) == 0;
        else
          v44 = 0;
        if (!v44)
          goto LABEL_59;
      }
      v53 = &unk_1ED7EA000;
    }
    else
    {
LABEL_59:
      v39 = sub_1C484358C((uint64_t)this + 864, 40, 3);
      v45 = sub_1C484358C((uint64_t)this + 864, 4 * v90, 2);
      if ((_DWORD)v90)
      {
        v46 = (int *)__s1;
        v47 = 4 * v90;
        v48 = (_DWORD *)v45;
        do
        {
          v49 = *v46++;
          *v48++ = v49;
          v47 -= 4;
        }
        while (v47);
        v50 = v90;
      }
      else
      {
        v50 = 0;
      }
      *(_QWORD *)v39 = 0;
      *(_QWORD *)(v39 + 8) = v45;
      *(_QWORD *)(v39 + 16) = v50;
      *(_DWORD *)(v39 + 24) = 0x10000;
      *(_WORD *)(v39 + 28) = 0;
      *(_QWORD *)(v39 + 32) = v34;
      v51 = *((_DWORD *)this + 211) + 1;
      v52 = *((_DWORD *)this + 210);
      if (v51 > 2 * v52)
      {
        llvm::FoldingSetBase::GrowBucketCount((uint64_t)v84, 2 * v52, (uint64_t)off_1E813B300);
        v92 = v94;
        v93 = 0x2000000000;
        v38 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v39 + 8), *(_QWORD *)(v39 + 8) + 4 * *(_QWORD *)(v39 + 16)));
        if (v92 != v94)
          free(v92);
        v51 = *((_DWORD *)this + 211) + 1;
      }
      v53 = (_QWORD *)&unk_1ED7EA000;
      *((_DWORD *)this + 211) = v51;
      v54 = *(_QWORD *)v38;
      if (!*(_QWORD *)v38)
        v54 = v38 | 1;
      *(_QWORD *)v39 = v54;
      *(_QWORD *)v38 = v39;
      v42 = __s1;
    }
    if (v42 != v91)
      free(v42);
    if (v86 >= 0x41 && v85)
      MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
    llvm::APInt::udiv((llvm::APInt *)(*(_QWORD *)(v3 + 32) + 24), (const llvm::APInt *)&v87, (llvm::APInt *)&v85);
    v56 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v85, v55);
    __s1 = v91;
    LODWORD(v91[0]) = 0;
    *(_QWORD *)((char *)v91 + 4) = v56;
    v90 = 0x2000000003;
    v57 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v83 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v83 = 0xFF51AFD7ED558CCDLL;
      v53[400] = v83;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v58 = __ROR8__(*(_QWORD *)((char *)v91 + 4) + 12, 12);
    v59 = 0x9DDFEA08EB382D69 * (v91[0] ^ v53[400] ^ v58);
    v60 = *((_QWORD *)this + 104)
        + 8
        * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                           * ((((0x9DDFEA08EB382D69 * (v58 ^ (v59 >> 47) ^ v59)) >> 32) >> 15) ^ (-348639895 * (v58 ^ (v59 >> 47) ^ v59)))) ^ HIDWORD(v91[0])));
    v3 = *(_QWORD *)v60;
    v92 = v94;
    v93 = 0x2000000000;
    if (v3 && (v3 & 1) == 0)
    {
      v62 = v90;
      v63 = __s1;
      v64 = 4 * v90;
      while (*(_QWORD *)(v3 + 16) != v62 || memcmp(v63, *(const void **)(v3 + 8), v64))
      {
        LODWORD(v93) = 0;
        v3 = *(_QWORD *)v3;
        if (v3)
          v65 = (v3 & 1) == 0;
        else
          v65 = 0;
        if (!v65)
          goto LABEL_86;
      }
    }
    else
    {
LABEL_86:
      v3 = sub_1C484358C((uint64_t)this + 864, 40, 3);
      v66 = sub_1C484358C((uint64_t)this + 864, 4 * v90, 2);
      if ((_DWORD)v90)
      {
        v67 = (int *)__s1;
        v68 = 4 * v90;
        v69 = (_DWORD *)v66;
        do
        {
          v70 = *v67++;
          *v69++ = v70;
          v68 -= 4;
        }
        while (v68);
        v71 = v90;
      }
      else
      {
        v71 = 0;
      }
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = v66;
      *(_QWORD *)(v3 + 16) = v71;
      *(_DWORD *)(v3 + 24) = 0x10000;
      *(_WORD *)(v3 + 28) = 0;
      *(_QWORD *)(v3 + 32) = v56;
      v72 = *((_DWORD *)this + 211) + 1;
      v73 = *((_DWORD *)this + 210);
      if (v72 > 2 * v73)
      {
        llvm::FoldingSetBase::GrowBucketCount((uint64_t)v84, 2 * v73, (uint64_t)off_1E813B300);
        v92 = v94;
        v93 = 0x2000000000;
        v60 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v3 + 8), *(_QWORD *)(v3 + 8) + 4 * *(_QWORD *)(v3 + 16)));
        if (v92 != v94)
          free(v92);
        v72 = *((_DWORD *)this + 211) + 1;
      }
      *((_DWORD *)this + 211) = v72;
      v74 = *(_QWORD *)v60;
      if (!*(_QWORD *)v60)
        v74 = v60 | 1;
      *(_QWORD *)v3 = v74;
      *(_QWORD *)v60 = v3;
      v63 = __s1;
    }
    if (v63 != v91)
      free(v63);
    if (v86 >= 0x41 && v85)
      MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
    v92 = v94;
    v94[0] = v39;
    v93 = 0x200000001;
    UDivExactExpr = (const llvm::SCEV *)*((_QWORD *)MulExpr + 4);
    v75 = *((_QWORD *)MulExpr + 5);
    v76 = 8 * v75 - 8;
    v77 = (v76 >> 3) + 1;
    if (v77 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v77, 8);
      v78 = v93;
    }
    else
    {
      v78 = 1;
    }
    if (v75 != 1)
    {
      memcpy((char *)v92 + 8 * v78, (char *)UDivExactExpr + 8, 8 * v75 - 8);
      v78 = v93;
    }
    LODWORD(v93) = v78 + ((unint64_t)v76 >> 3);
    MulExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr(this, &v92, 0, 0);
    if (MulExpr)
      v79 = *((unsigned __int16 *)MulExpr + 12) == 5;
    else
      v79 = 0;
    v80 = !v79;
    if (!v79)
      UDivExactExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExactExpr(this, MulExpr, (const llvm::SCEV *)v3);
    if (v92 != v94)
      free(v92);
    if ((v80 & 1) != 0)
    {
      v10 = 0;
      v81 = 0;
    }
    else
    {
LABEL_116:
      v81 = 1;
      v10 = MulExpr;
    }
    if (v88 >= 0x41 && v87)
      MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
    if (!v81)
      return UDivExactExpr;
  }
  else
  {
    v10 = (const llvm::SCEV *)a2;
  }
  v11 = *((_QWORD *)v10 + 5);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (_QWORD *)*((_QWORD *)v10 + 4);
    v14 = 8;
    while (v13[v12] != v3)
    {
      ++v12;
      v14 += 8;
      if (*((_QWORD *)v10 + 5) == v12)
        return llvm::ScalarEvolution::getUDivExpr(this, MulExpr, (const llvm::SCEV *)v3);
    }
    v92 = v94;
    v93 = 0x200000000;
    if (v12 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v12, 8);
      v18 = v93;
      v19 = v92;
    }
    else
    {
      if (!(_DWORD)v12)
      {
        v20 = 0;
        v21 = 2;
        goto LABEL_25;
      }
      v18 = 0;
      v19 = v94;
    }
    memcpy(&v19[v18], v13, v14 - 8);
    v13 = (_QWORD *)*((_QWORD *)v10 + 4);
    v11 = *((_QWORD *)v10 + 5);
    v20 = v93;
    v21 = HIDWORD(v93);
LABEL_25:
    v22 = v12 + v20;
    LODWORD(v93) = v22;
    v23 = 8 * v11;
    v24 = 8 * v11 - v14;
    v25 = (v24 >> 3) + v22;
    if (v25 > v21)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v25, 8);
      v22 = v93;
    }
    if (v23 != v14)
    {
      memcpy((char *)v92 + 8 * v22, &v13[v12 + 1], v24);
      v22 = v93;
    }
    v26 = v22 + ((unint64_t)v24 >> 3);
LABEL_34:
    LODWORD(v93) = v26;
    UDivExactExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr(this, &v92, 0, 0);
    if (v92 != v94)
      free(v92);
    return UDivExactExpr;
  }
  return llvm::ScalarEvolution::getUDivExpr(this, MulExpr, (const llvm::SCEV *)v3);
}

uint64_t sub_1C4F17BCC(llvm::ScalarEvolution *this, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v10;
  uint64_t v11;
  const llvm::SCEV **v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  void *v20;
  uint64_t RangeRef;
  _BOOL4 v22;
  uint64_t v23;
  void *v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  llvm::APInt *v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v39;
  const void **v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  size_t v44;
  void *v45;
  unsigned int v46;
  _BOOL4 v47;
  void *__src;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;

  v5 = a5;
  v10 = a5 & 6;
  if (v10 == 4)
  {
    if (!a4)
    {
LABEL_6:
      v5 = v5 | 6;
      v13 = a4 == 2;
      goto LABEL_49;
    }
    v11 = 8 * a4;
    v12 = (const llvm::SCEV **)a3;
    while (llvm::ScalarEvolution::isKnownNonNegative(this, *v12))
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_6;
    }
    v10 = 4;
  }
  v13 = a4 == 2;
  if ((a2 & 0xFFFE) == 4 && v10 != 6 && a4 == 2)
  {
    if (*(_WORD *)(*a3 + 24))
    {
LABEL_48:
      v13 = 1;
      goto LABEL_49;
    }
    if (a2 == 4)
      v14 = 13;
    else
      v14 = 17;
    v15 = *(_QWORD *)(*a3 + 32);
    v16 = v5;
    if ((v5 & 4) == 0)
    {
      v17 = *(unsigned int *)(v15 + 32);
      if (v17 > 0x40)
      {
        v19 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
        v20 = (void *)operator new[]();
        memcpy(v20, *(const void **)(v15 + 24), v19);
        v49 = v17;
        __src = v20;
        v53 = v17;
        v18 = (void *)operator new[]();
        memcpy(v18, v20, v19);
      }
      else
      {
        v18 = *(void **)(v15 + 24);
        v49 = *(_DWORD *)(v15 + 32);
        __src = v18;
        v53 = v17;
      }
      v52 = v18;
      llvm::APInt::operator+=((uint64_t)&v52, 1uLL);
      v51 = v53;
      v50 = v52;
      llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)&__src, v14, 2, (uint64_t)&v52);
      if (v51 >= 0x41 && v50)
        MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
      if (v49 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, a3[1], 1u, 0);
      v49 = *(_DWORD *)(RangeRef + 8);
      if (v49 > 0x40)
      {
        v40 = (const void **)RangeRef;
        __src = (void *)operator new[]();
        memcpy(__src, *v40, (((unint64_t)v49 + 63) >> 3) & 0x3FFFFFF8);
        RangeRef = (uint64_t)v40;
      }
      else
      {
        __src = *(void **)RangeRef;
      }
      v51 = *(_DWORD *)(RangeRef + 24);
      if (v51 > 0x40)
      {
        v41 = RangeRef;
        v42 = (void *)operator new[]();
        v50 = v42;
        v43 = *(const void **)(v41 + 16);
        LODWORD(v41) = v51;
        memcpy(v42, v43, (((unint64_t)v51 + 63) >> 3) & 0x3FFFFFF8);
        v47 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v52, (const llvm::ConstantRange *)&__src);
        if (v41 >= 0x41)
          MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
        v22 = v47;
      }
      else
      {
        v50 = *(void **)(RangeRef + 16);
        v22 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v52, (const llvm::ConstantRange *)&__src);
      }
      if (v49 >= 0x41 && __src)
      {
        v39 = v22;
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v22 = v39;
      }
      if (v22)
        v16 = v5 | 4;
      else
        v16 = v5;
      if (v55 >= 0x41 && v54)
        MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
      if (v53 >= 0x41 && v52)
        MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    }
    if ((v5 & 2) == 0)
    {
      v23 = *(unsigned int *)(v15 + 32);
      if (v23 > 0x40)
      {
        v25 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
        v26 = (void *)operator new[]();
        memcpy(v26, *(const void **)(v15 + 24), v25);
        v49 = v23;
        __src = v26;
        v53 = v23;
        v24 = (void *)operator new[]();
        memcpy(v24, __src, v25);
      }
      else
      {
        v24 = *(void **)(v15 + 24);
        v49 = *(_DWORD *)(v15 + 32);
        __src = v24;
        v53 = v23;
      }
      v52 = v24;
      llvm::APInt::operator+=((uint64_t)&v52, 1uLL);
      v51 = v53;
      v50 = v52;
      llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)&__src, v14, 1, (uint64_t)&v52);
      if (v51 >= 0x41 && v50)
        MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
      if (v49 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v27 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, a3[1], 0, 0);
      v28 = v27;
      v29 = *(unsigned int *)(v27 + 8);
      v49 = v29;
      if (v29 > 0x40)
      {
        v44 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
        __src = (void *)operator new[]();
        memcpy(__src, *(const void **)v28, v44);
      }
      else
      {
        __src = *(void **)v27;
      }
      v51 = *(_DWORD *)(v28 + 24);
      if (v51 > 0x40)
      {
        v45 = (void *)operator new[]();
        v50 = v45;
        v46 = v51;
        memcpy(v45, *(const void **)(v28 + 16), (((unint64_t)v51 + 63) >> 3) & 0x3FFFFFF8);
        v30 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v52, (const llvm::ConstantRange *)&__src);
        if (v46 >= 0x41)
          MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
      }
      else
      {
        v50 = *(void **)(v28 + 16);
        v30 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v52, (const llvm::ConstantRange *)&__src);
      }
      if (v49 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v30)
        v5 = v16 | 2;
      else
        v5 = v16;
      if (v55 >= 0x41 && v54)
        MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
      if (v53 >= 0x41 && v52)
        MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
      goto LABEL_48;
    }
    v13 = 1;
    v5 = v16;
  }
LABEL_49:
  if (a2 == 7 && (v5 & 1) != 0 && (v5 & 2) == 0 && v13)
  {
    v31 = *a3;
    if (*a3 && !*(_WORD *)(v31 + 24))
    {
      v32 = *(_QWORD *)(v31 + 32);
      v33 = (llvm::APInt *)(v32 + 24);
      v34 = *(_DWORD *)(v32 + 32);
      if (v34 >= 0x41)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v33) != v34)
          return v5;
      }
      else if (*(_QWORD *)v33)
      {
        return v5;
      }
      if (llvm::ScalarEvolution::isKnownNonNegative(this, (const llvm::SCEV *)a3[1]))
        return v5 | 2;
      else
        return v5;
    }
  }
  else
  {
    if ((v5 & 2) != 0 || a2 != 5)
      v13 = 0;
    if (v13)
    {
      v36 = *a3;
      if (*a3 && *(_WORD *)(v36 + 24) == 6)
      {
        v37 = a3[1];
        if (*(_QWORD *)(v36 + 40) == v37)
          v5 = v5 | 2;
        else
          v5 = v5;
        if (!v37)
          return v5;
      }
      else
      {
        v37 = a3[1];
        if (!v37)
          return v5;
      }
      if (*(_WORD *)(v37 + 24) == 6)
      {
        if (*(_QWORD *)(v37 + 40) == v36)
          return v5 | 2;
        else
          return v5;
      }
    }
  }
  return v5;
}

void llvm::ScalarEvolution::getGEPExpr(uint64_t a1, uint64_t a2)
{
  int v2;
  llvm::Value **v3;
  llvm::Value *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  unsigned int v11;
  uint64_t SCEVIter;

  v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(llvm::Value ***)(a2 - 8);
  else
    v3 = (llvm::Value **)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_DWORD *)(a1 + 120);
  if (v6)
  {
    v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v6 - 1);
    v8 = v5 + 48 * v7;
    v9 = *(llvm::Value **)(v8 + 24);
    if (v9 == v4)
    {
LABEL_11:
      if (v8 == v5 + 48 * v6 || (SCEVIter = *(_QWORD *)(v8 + 40)) == 0)
        SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v4);
      __asm { BR              X11 }
    }
    v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v8 = v5 + 48 * v7;
      v9 = *(llvm::Value **)(v8 + 24);
      if (v9 == v4)
        goto LABEL_11;
    }
  }
  v8 = v5 + 48 * v6;
  goto LABEL_11;
}

void sub_1C4F18418()
{
  JUMPOUT(0x1C4F18404);
}

void sub_1C4F18424()
{
  JUMPOUT(0x1C4F1841CLL);
}

uint64_t sub_1C4F1842C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  llvm::ScalarEvolution *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Type **v46;
  llvm::Type *v47;
  llvm::Type *v48;
  _BOOL4 isSCEVExprNeverPoison;
  uint64_t v50;
  llvm::Type *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  llvm::UndefValue *AggregateElement;
  unsigned int *v59;
  uint64_t v60;
  llvm::StructLayout *StructLayout;
  unint64_t Constant;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int *v66;
  llvm::Type *v67;
  llvm::Type **v68;
  unint64_t SizeOfExpr;
  uint64_t v70;
  uint64_t MulExpr;
  uint64_t v72;
  uint64_t AddExpr;
  uint64_t v74;
  uint64_t RangeRef;
  unsigned int v76;
  char *v77;
  uint64_t v78;
  _BOOL4 v80;
  uint64_t v81;
  llvm::Type **v82;
  llvm::Type **v83;
  unsigned __int8 *v84;
  _QWORD *v85;
  uint64_t v86;
  _BYTE v87[32];
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;

  v46 = *(llvm::Type ***)(v41 + 32);
  v47 = *v46;
  if (*((_BYTE *)*v46 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v42 + 40) + 272), v47);
    v47 = v48;
  }
  if ((v43[17] & 2) != 0 && v43[16] >= 0x1Cu)
  {
    isSCEVExprNeverPoison = llvm::ScalarEvolution::isSCEVExprNeverPoison(v42, (const llvm::Instruction *)v43);
    if (isSCEVExprNeverPoison)
      v50 = 4;
    else
      v50 = 0;
  }
  else
  {
    isSCEVExprNeverPoison = 0;
    v50 = 0;
  }
  v51 = *(llvm::Type **)v43;
  v85 = v87;
  v86 = 0x400000000;
  v52 = *(unsigned int *)(v45 + 8);
  if ((_DWORD)v52)
  {
    v80 = isSCEVExprNeverPoison;
    v81 = v44;
    v53 = *(uint64_t **)v45;
    v83 = (llvm::Type **)(v43 + 64);
    v84 = v43;
    v82 = (llvm::Type **)(v43 + 24);
    v54 = 8 * v52;
    v55 = 1;
    while (1)
    {
      v56 = *v53;
      v57 = *((unsigned __int8 *)v51 + 8);
      if (!v51 || v57 != 16)
        break;
      AggregateElement = *(llvm::UndefValue **)(v56 + 32);
      v59 = (unsigned int *)((char *)AggregateElement + 24);
      if (*((_DWORD *)AggregateElement + 8) >= 0x41u)
        v59 = *(unsigned int **)v59;
      v60 = *v59;
      StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v42 + 40) + 272), v51);
      Constant = llvm::ScalarEvolution::getConstant(v42, v47, *((_QWORD *)StructLayout + v60 + 2), 0);
      v63 = v86;
      if (v86 >= (unint64_t)HIDWORD(v86))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v86 + 1, 8);
        v63 = v86;
      }
      v85[v63] = Constant;
      LODWORD(v86) = v86 + 1;
      if (*((_BYTE *)AggregateElement + 16) != 16)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v66 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v65 = (unsigned int *)((char *)AggregateElement + 24);
      v64 = v66;
      if (v65[2] < 0x41)
        v64 = v65;
      v67 = *(llvm::Type **)(*((_QWORD *)v51 + 2) + 8 * *v64);
LABEL_37:
      ++v53;
      v51 = v67;
      v54 -= 8;
      if (!v54)
      {
        if ((_DWORD)v86)
        {
          AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v42, (uint64_t)&v85, v50, 0);
          v74 = 0;
          if (v80)
          {
            RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)v42, AddExpr, 1u, 0);
            llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v88);
            v76 = v89 - 1;
            if (v89 >= 0x41)
              v77 = &v88[8 * (v76 >> 6)];
            else
              v77 = (char *)&v88;
            v78 = (1 << v76) & *(_QWORD *)v77;
            if (v89 >= 0x41 && v88)
              MEMORY[0x1CAA32F9C]();
            v74 = 2 * (v78 == 0);
          }
          v88 = (char *)&v90;
          v90 = v81;
          v91 = AddExpr;
          v89 = 0x200000002;
          v44 = llvm::ScalarEvolution::getAddExpr((uint64_t)v42, (uint64_t)&v88, v74, 0);
          if (v88 != (char *)&v90)
            free(v88);
        }
        else
        {
          v44 = v81;
        }
        goto LABEL_50;
      }
    }
    if ((v55 & 1) != 0)
    {
      v68 = v83;
      if (v84[16] != 62)
        v68 = v82;
    }
    else
    {
      if (!v51 || v57 != 17)
      {
        v67 = 0;
        if (!v51 || (v57 & 0xFE) != 0x12)
          goto LABEL_32;
      }
      v68 = (llvm::Type **)((char *)v51 + 24);
    }
    v67 = *v68;
LABEL_32:
    SizeOfExpr = llvm::ScalarEvolution::getSizeOfExpr(v42, v47, v67);
    llvm::ScalarEvolution::getTruncateOrSignExtend((uint64_t)v42, v56);
    v88 = (char *)&v90;
    v90 = v70;
    v91 = SizeOfExpr;
    v89 = 0x200000002;
    MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)v42, (uint64_t)&v88, v50, 0);
    if (v88 != (char *)&v90)
      free(v88);
    v72 = v86;
    if (v86 >= (unint64_t)HIDWORD(v86))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v86 + 1, 8);
      v72 = v86;
    }
    v55 = 0;
    v85[v72] = MulExpr;
    LODWORD(v86) = v86 + 1;
    goto LABEL_37;
  }
LABEL_50:
  if (v85 != (_QWORD *)v87)
    free(v85);
  return v44;
}

unint64_t llvm::ScalarEvolution::getOffsetOfExpr(llvm::ScalarEvolution *this, llvm::Type *a2, llvm::StructType *a3, unsigned int a4)
{
  uint64_t v6;

  v6 = *((_QWORD *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), a3)+ a4+ 2);
  return llvm::ScalarEvolution::getConstant(this, a2, v6, 0);
}

unint64_t llvm::ScalarEvolution::getSizeOfExpr(llvm::ScalarEvolution *this, llvm::Type *a2, llvm::Type *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  const char *v11;
  char v12;
  uint64_t v13;

  if (a3 && *((_BYTE *)a3 + 8) == 19)
    return llvm::ScalarEvolution::getSizeOfScalableVectorExpr(this, a2, a3);
  v6 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
  sub_1C4768AD0(v6, (uint64_t)a3);
  v8 = (unint64_t)(v7 + 7) >> 3;
  v10 = v9 == 1;
  llvm::DataLayout::getAlignment(v6, (uint64_t)a3);
  v13 = ((1 << v12) + v8 - 1) & -(1 << v12);
  if (v10)
  return llvm::ScalarEvolution::getConstant(this, a2, v13, 0);
}

uint64_t llvm::ScalarEvolution::getAbsExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  const llvm::SCEV *NegativeSCEV;

  NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, (uint64_t)a2);
  return llvm::ScalarEvolution::getSMaxExpr(this, a2, NegativeSCEV);
}

uint64_t llvm::ScalarEvolution::getSMaxExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  uint64_t MinMaxExpr;
  void *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v5[0] = v6;
  v6[0] = a2;
  v6[1] = a3;
  v5[1] = (void *)0x200000002;
  MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 9, (uint64_t **)v5);
  if (v5[0] != v6)
    free(v5[0]);
  return MinMaxExpr;
}

unint64_t llvm::ScalarEvolution::getNegativeSCEV(uint64_t a1, uint64_t a2)
{
  llvm::Constant *v3;
  llvm::ConstantFP *v4;
  unsigned int v5;
  llvm::Constant *Zero;
  llvm::Constant *v7;
  llvm::Constant *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  BOOL v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  _QWORD **v30;
  uint64_t v31;
  unint64_t v32;
  void *__s1;
  uint64_t v34;
  _BYTE v35[120];
  void *v36;
  uint64_t p_s1;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a2 || *(_WORD *)(a2 + 24))
    __asm { BR              X11 }
  v3 = *(llvm::Constant **)(a2 + 32);
  v4 = *(llvm::ConstantFP **)v3;
  if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**((_QWORD **)v4 + 2) + 8);
  else
    v5 = *(_DWORD *)(*(_QWORD *)v3 + 8);
  if (v5 <= 6)
    Zero = llvm::ConstantFP::getZero(v4, (llvm::Type *)1);
  else
    Zero = (llvm::Constant *)llvm::Constant::getNullValue(v4, (llvm::Type *)a2);
  v8 = Zero;
  v9 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v3, v7);
  if (!v9)
  {
    v30 = *(_QWORD ***)v8;
    if (*(_QWORD *)v8)
    {
      __s1 = v8;
      v34 = (uint64_t)v3;
      v31 = **v30 + 1512;
      LODWORD(v36) = 15;
      p_s1 = (uint64_t)&__s1;
      v38 = 2;
      v39 = 0u;
      v40 = 0u;
      v41 = 0;
      v9 = sub_1C537D4FC(v31, (uint64_t)v30, (unsigned __int8 *)&v36);
    }
    else
    {
      v9 = 0;
    }
  }
  __s1 = v35;
  *(_DWORD *)v35 = 0;
  *(_QWORD *)&v35[4] = v9;
  v34 = 0x2000000003;
  v10 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v32 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v32 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v32;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v11 = 0x9DDFEA08EB382D69 * (*(_QWORD *)v35 ^ qword_1ED7EAC80 ^ __ROR8__(*(_QWORD *)&v35[4] + 12, 12));
  v12 = __ROR8__(*(_QWORD *)&v35[4] + 12, 12) ^ (v11 >> 47);
  v13 = *(_QWORD *)(a1 + 832)
      + 8
      * ((*(_DWORD *)(a1 + 840) - 1) & ((-348639895
                                       * ((((0x9DDFEA08EB382D69 * (v12 ^ v11)) >> 32) >> 15) ^ (-348639895 * (v12 ^ v11)))) ^ *(_DWORD *)&v35[4]));
  v14 = *(_QWORD *)v13;
  v36 = &v38;
  p_s1 = 0x2000000000;
  if (v14)
    v15 = (v14 & 1) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v16 = v34;
    v17 = __s1;
    v18 = 4 * v34;
    while (*(_QWORD *)(v14 + 16) != v16 || memcmp(v17, *(const void **)(v14 + 8), v18))
    {
      LODWORD(p_s1) = 0;
      v14 = *(_QWORD *)v14;
      if (v14)
        v19 = (v14 & 1) == 0;
      else
        v19 = 0;
      if (!v19)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    v14 = sub_1C484358C(a1 + 864, 40, 3);
    v20 = sub_1C484358C(a1 + 864, 4 * v34, 2);
    if ((_DWORD)v34)
    {
      v21 = (int *)__s1;
      v22 = 4 * v34;
      v23 = (_DWORD *)v20;
      do
      {
        v24 = *v21++;
        *v23++ = v24;
        v22 -= 4;
      }
      while (v22);
      v25 = v34;
    }
    else
    {
      v25 = 0;
    }
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = v20;
    *(_QWORD *)(v14 + 16) = v25;
    *(_DWORD *)(v14 + 24) = 0x10000;
    *(_WORD *)(v14 + 28) = 0;
    *(_QWORD *)(v14 + 32) = v9;
    v26 = *(_DWORD *)(a1 + 844) + 1;
    v27 = *(_DWORD *)(a1 + 840);
    if (v26 > 2 * v27)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v27, (uint64_t)off_1E813B300);
      v36 = &v38;
      p_s1 = 0x2000000000;
      v13 = *(_QWORD *)(a1 + 832)
          + 8
          * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(v14 + 8), *(_QWORD *)(v14 + 8) + 4 * *(_QWORD *)(v14 + 16)));
      if (v36 != &v38)
        free(v36);
      v26 = *(_DWORD *)(a1 + 844) + 1;
    }
    *(_DWORD *)(a1 + 844) = v26;
    v28 = *(_QWORD *)v13;
    if (!*(_QWORD *)v13)
      v28 = v13 | 1;
    *(_QWORD *)v14 = v28;
    *(_QWORD *)v13 = v14;
    v17 = __s1;
  }
  if (v17 != v35)
    free(v17);
  return v14;
}

uint64_t llvm::ScalarEvolution::getMinMaxExpr(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t ExistingSCEVInCache;
  const llvm::APInt *v7;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  __int16 v22;
  uint64_t v23;
  llvm::APInt *v24;
  unsigned int v25;
  BOOL v26;
  llvm::ConstantInt *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  void *v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  llvm::ValueHandleBase *v44;
  unsigned __int8 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  BOOL v50;
  _BYTE *v51;
  BOOL v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  const void *v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int isKnownViaNonRecursiveReasoning;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _BOOL4 v121;
  int v122;
  _BOOL4 v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  _BYTE *v129;
  size_t v130;
  BOOL v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int *v141;
  uint64_t v142;
  _DWORD *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  __int16 v153;
  void *__s1;
  uint64_t v155;
  _BYTE v156[120];
  void *v157;
  uint64_t v158;
  _QWORD v159[18];

  v159[16] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a3 + 2) == 1)
    return **a3;
  sub_1C4F15698((uint64_t)a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  ExistingSCEVInCache = llvm::ScalarEvolution::findExistingSCEVInCache(a1, a2, *a3, *((unsigned int *)a3 + 2));
  if (ExistingSCEVInCache)
    return ExistingSCEVInCache;
  v9 = a2 & 0xFFFE;
  ExistingSCEVInCache = **a3;
  if (ExistingSCEVInCache)
    v10 = *(unsigned __int16 *)(ExistingSCEVInCache + 24) == 0;
  else
    v10 = 0;
  v153 = a2 & 0xFFFD;
  if (!v10)
  {
    v11 = 0;
    v12 = *((_DWORD *)a3 + 2);
    goto LABEL_10;
  }
  v20 = (*a3)[1];
  if (v20)
    v21 = *(unsigned __int16 *)(v20 + 24) == 0;
  else
    v21 = 0;
  if (v21)
  {
    v152 = a1 + 864;
    do
    {
      v27 = ***(llvm::ConstantInt ****)a1;
      v28 = *(_QWORD *)(ExistingSCEVInCache + 32);
      v29 = v28 + 24;
      v30 = *(_QWORD *)(v20 + 32);
      v31 = v30 + 24;
      switch((_DWORD)a2)
      {
        case 8:
          v38 = *(unsigned int *)(v28 + 32);
          if (v38 > 0x40)
          {
            v83 = ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8;
            while (v83)
            {
              v84 = *(_QWORD *)(*(_QWORD *)v29 - 8 + v83);
              v85 = *(_QWORD *)(*(_QWORD *)v31 - 8 + v83);
              v83 -= 8;
              v39 = v84 > v85;
              if (v84 != v85)
                goto LABEL_39;
            }
          }
          else
          {
            v39 = *(_QWORD *)v29 >= *(_QWORD *)v31 && *(_QWORD *)v29 > *(_QWORD *)v31;
LABEL_39:
            if (v39)
LABEL_41:
              v31 = v29;
          }
LABEL_42:
          LODWORD(v158) = *(_DWORD *)(v31 + 8);
          if (v158 > 0x40)
          {
            v41 = (void *)operator new[]();
            v157 = v41;
            v42 = *(const void **)v31;
LABEL_52:
            memcpy(v41, v42, (((unint64_t)v158 + 63) >> 3) & 0x3FFFFFF8);
            goto LABEL_53;
          }
          v40 = *(void **)v31;
          goto LABEL_50;
        case 0xB:
          v37 = *(unsigned int *)(v28 + 32);
          if (v37 > 0x40)
          {
            v64 = *(_QWORD *)(*(_QWORD *)v29 + 8 * ((v37 - 1) >> 6)) & (1 << (v37 - 1));
            v65 = *(_DWORD *)(v30 + 32);
            v66 = v65 - 1;
            v67 = *(_QWORD *)(v30 + 24);
            if (v65 >= 0x41)
              v68 = (_QWORD *)(v67 + 8 * (v66 >> 6));
            else
              v68 = (_QWORD *)v31;
            if ((v64 != 0) == ((*v68 >> v66) & 1))
            {
              v74 = v67 - 8;
              v75 = ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8;
              while (v75)
              {
                v76 = *(_QWORD *)(*(_QWORD *)v29 - 8 + v75);
                v77 = *(_QWORD *)(v74 + v75);
                v75 -= 8;
                v78 = v76 > v77;
                if (v76 != v77)
                {
LABEL_109:
                  if (v78)
                    goto LABEL_47;
                  goto LABEL_48;
                }
              }
            }
            else if (v64)
            {
              break;
            }
            goto LABEL_47;
          }
          if ((uint64_t)(*(_QWORD *)v29 << -(char)v37) >> -(char)v37 >= (uint64_t)(*(_QWORD *)v31 << -(char)v37) >> -(char)v37)
            goto LABEL_47;
          break;
        case 9:
          v32 = *(unsigned int *)(v28 + 32);
          if (v32 > 0x40)
          {
            v69 = *(_QWORD *)(*(_QWORD *)v29 + 8 * ((v32 - 1) >> 6)) & (1 << (v32 - 1));
            v70 = *(_DWORD *)(v30 + 32);
            v71 = v70 - 1;
            v72 = *(_QWORD *)(v30 + 24);
            if (v70 >= 0x41)
              v73 = (_QWORD *)(v72 + 8 * (v71 >> 6));
            else
              v73 = (_QWORD *)v31;
            if ((v69 != 0) == ((*v73 >> v71) & 1))
            {
              v79 = v72 - 8;
              v80 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
              while (v80)
              {
                v81 = *(_QWORD *)(*(_QWORD *)v29 - 8 + v80);
                v82 = *(_QWORD *)(v79 + v80);
                v80 -= 8;
                v39 = v81 > v82;
                if (v81 != v82)
                  goto LABEL_39;
              }
            }
            else if (!v69)
            {
              goto LABEL_41;
            }
          }
          else
          {
            v33 = -v32;
            v34 = (uint64_t)(*(_QWORD *)v29 << v33) >> v33;
            v35 = (uint64_t)(*(_QWORD *)v31 << v33) >> v33;
            if (v34 >= v35 && v34 > v35)
              goto LABEL_41;
          }
          goto LABEL_42;
        default:
          v43 = *(unsigned int *)(v28 + 32);
          if (v43 > 0x40)
          {
            v86 = ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8;
            while (v86)
            {
              v87 = *(_QWORD *)(*(_QWORD *)v29 - 8 + v86);
              v88 = *(_QWORD *)(*(_QWORD *)v31 - 8 + v86);
              v86 -= 8;
              v78 = v87 > v88;
              if (v87 != v88)
                goto LABEL_109;
            }
LABEL_47:
            v29 = v31;
            break;
          }
          if (*(_QWORD *)v29 >= *(_QWORD *)v31)
            goto LABEL_47;
          break;
      }
LABEL_48:
      LODWORD(v158) = *(_DWORD *)(v29 + 8);
      if (v158 > 0x40)
      {
        v41 = (void *)operator new[]();
        v157 = v41;
        v42 = *(const void **)v29;
        goto LABEL_52;
      }
      v40 = *(void **)v29;
LABEL_50:
      v157 = v40;
LABEL_53:
      v44 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v157, v7);
      if (v158 >= 0x41 && v157)
        MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
      __s1 = v156;
      *(_DWORD *)v156 = 0;
      *(_QWORD *)&v156[4] = v44;
      v155 = 0x2000000003;
      v45 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v92 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v92 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v92;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v46 = __ROR8__(*(_QWORD *)&v156[4] + 12, 12);
      v47 = 0x9DDFEA08EB382D69
          * (v46 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)v156 ^ qword_1ED7EAC80 ^ v46)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                               * (*(_QWORD *)v156 ^ qword_1ED7EAC80 ^ v46)));
      v48 = *(_QWORD *)(a1 + 832)
          + 8 * ((*(_DWORD *)(a1 + 840) - 1) & ((-348639895 * ((v47 >> 47) ^ v47)) ^ *(_DWORD *)&v156[4]));
      v49 = *(_QWORD *)v48;
      v157 = v159;
      v158 = 0x2000000000;
      if (v49)
        v50 = (v49 & 1) == 0;
      else
        v50 = 0;
      if (v50)
      {
        v51 = __s1;
        while (*(_QWORD *)(v49 + 16) != v155
             || memcmp(__s1, *(const void **)(v49 + 8), 4 * v155))
        {
          LODWORD(v158) = 0;
          v49 = *(_QWORD *)v49;
          if (v49)
            v52 = (v49 & 1) == 0;
          else
            v52 = 0;
          if (!v52)
            goto LABEL_69;
        }
      }
      else
      {
LABEL_69:
        v49 = sub_1C484358C(v152, 40, 3);
        v53 = sub_1C484358C(v152, 4 * v155, 2);
        v54 = (int *)__s1;
        v55 = 4 * v155;
        v56 = (_DWORD *)v53;
        do
        {
          v57 = *v54++;
          *v56++ = v57;
          v55 -= 4;
        }
        while (v55);
        v58 = v155;
        *(_QWORD *)v49 = 0;
        *(_QWORD *)(v49 + 8) = v53;
        *(_QWORD *)(v49 + 16) = v58;
        *(_DWORD *)(v49 + 24) = 0x10000;
        *(_WORD *)(v49 + 28) = 0;
        *(_QWORD *)(v49 + 32) = v44;
        v59 = *(_DWORD *)(a1 + 844) + 1;
        v60 = *(_DWORD *)(a1 + 840);
        if (v59 > 2 * v60)
        {
          llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v60, (uint64_t)off_1E813B300);
          v157 = v159;
          v158 = 0x2000000000;
          v89 = sub_1C4F5AB38(*(_QWORD **)(v49 + 8), *(_QWORD *)(v49 + 8) + 4 * *(_QWORD *)(v49 + 16));
          v90 = *(_QWORD *)(a1 + 832);
          v91 = *(_DWORD *)(a1 + 840);
          if (v157 != v159)
            free(v157);
          v48 = v90 + 8 * ((v91 - 1) & v89);
          v59 = *(_DWORD *)(a1 + 844) + 1;
        }
        *(_DWORD *)(a1 + 844) = v59;
        v61 = *(_QWORD *)v48;
        if (!*(_QWORD *)v48)
          v61 = v48 | 1;
        *(_QWORD *)v49 = v61;
        *(_QWORD *)v48 = v49;
        v51 = __s1;
      }
      if (v51 != v156)
        free(v51);
      **a3 = v49;
      v62 = *((unsigned int *)a3 + 2);
      if ((_DWORD)v62 == 2)
      {
        *((_DWORD *)a3 + 2) = 1;
        return **a3;
      }
      memmove(*a3 + 1, *a3 + 2, 8 * v62 - 16);
      v63 = *((_DWORD *)a3 + 2) - 1;
      *((_DWORD *)a3 + 2) = v63;
      if (v63 == 1)
        return **a3;
      ExistingSCEVInCache = **a3;
      v20 = (*a3)[1];
    }
    while (v20 && !*(_WORD *)(v20 + 24));
  }
  v22 = a2 & 0xFFFD;
  v23 = *(_QWORD *)(ExistingSCEVInCache + 32);
  v24 = (llvm::APInt *)(v23 + 24);
  v25 = *(_DWORD *)(v23 + 32);
  if ((a2 & 0xFFFD) != 9)
  {
    if (v25 > 0x40)
      v26 = llvm::APInt::countLeadingZerosSlowCase(v24) == v25;
    else
      v26 = *(_QWORD *)v24 == 0;
    goto LABEL_167;
  }
  if (v25 <= 0x40)
  {
    v26 = *(_QWORD *)v24 == 1 << (v25 - 1);
LABEL_167:
    v121 = v26;
    goto LABEL_170;
  }
  v151 = v25 - 1;
  v121 = ((*(_QWORD *)(*(_QWORD *)v24 + 8 * (v151 >> 6)) >> v151) & 1) != 0
      && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v24) == v151;
  v22 = a2 & 0xFFFD;
LABEL_170:
  v122 = sub_1C4F19BB4(v23, v22 == 9);
  if (v9 == 8)
    v123 = v121;
  else
    v123 = v122;
  if (v123)
  {
    v124 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v124 == 1)
    {
      v12 = 0;
    }
    else
    {
      memmove(*a3, *a3 + 1, 8 * v124 - 8);
      v12 = *((_DWORD *)a3 + 2) - 1;
    }
    v11 = 0;
    *((_DWORD *)a3 + 2) = v12;
  }
  else
  {
    if (v9 == 8)
      v125 = v122;
    else
      v125 = v121;
    if (v125)
      return ExistingSCEVInCache;
    v12 = *((_DWORD *)a3 + 2);
    v11 = 1;
  }
  if (v12 == 1)
    return **a3;
LABEL_10:
  v13 = a2 & 0xFFFE;
  v14 = v12;
  if (v12 > v11)
  {
    v15 = *a3;
    v16 = v11;
    v17 = -8 * v11;
    while (1)
    {
      v18 = v15[v16];
      v19 = *(unsigned __int16 *)(v18 + 24);
      if (v19 >= a2)
        break;
      ++v16;
      v17 -= 8;
      if (v14 == (_DWORD)v16)
        goto LABEL_131;
    }
    if (v19 == (_DWORD)a2)
    {
      v93 = &v15[v17 / 0xFFFFFFFFFFFFFFF8];
      v94 = -v17;
      do
      {
        v95 = &v15[v14];
        if (v95 != v93 + 1)
        {
          memmove(v93, v93 + 1, (char *)v95 - (char *)(v93 + 1));
          v14 = *((_DWORD *)a3 + 2);
        }
        v96 = v14 - 1;
        *((_DWORD *)a3 + 2) = v96;
        v97 = *(const void **)(v18 + 32);
        v98 = *(_QWORD *)(v18 + 40);
        if (v98 + v96 > (unint64_t)*((unsigned int *)a3 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 2), v98 + v96, 8);
          LODWORD(v96) = *((_DWORD *)a3 + 2);
        }
        v15 = *a3;
        if (v98)
        {
          memcpy(&v15[v96], v97, 8 * v98);
          LODWORD(v96) = *((_DWORD *)a3 + 2);
          v15 = *a3;
        }
        v14 = v96 + v98;
        *((_DWORD *)a3 + 2) = v14;
        v93 = (uint64_t *)((char *)v15 + v94);
        v18 = v15[v16];
      }
      while (*(unsigned __int16 *)(v18 + 24) == (_DWORD)a2);
      return llvm::ScalarEvolution::getMinMaxExpr(a1, a2, a3);
    }
  }
LABEL_131:
  if (v153 == 9)
    v99 = 39;
  else
    v99 = 35;
  if (v153 == 9)
    v100 = 41;
  else
    v100 = 37;
  if (v13 == 8)
    v101 = v99;
  else
    v101 = v100;
  if (v13 == 8)
    v102 = v100;
  else
    v102 = v99;
  v103 = v14 - 1;
  if (v14 == 1)
    return **a3;
  v104 = 0;
  do
  {
    v105 = *a3;
    v106 = (*a3)[v104];
    v107 = (v104 + 1);
    v108 = (*a3)[v107];
    if (v106 == v108
      || (isKnownViaNonRecursiveReasoning = llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning((uint64_t ****)a1, v101, v106, v108), v105 = *a3, isKnownViaNonRecursiveReasoning))
    {
      v110 = &v105[v104];
      v111 = v110 + 1;
      v112 = v110 + 2;
    }
    else
    {
      if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning((uint64_t ****)a1, v102, v105[v104], v105[v107]))
      {
        ++v104;
        continue;
      }
      v105 = *a3;
      v111 = &(*a3)[v104];
      v112 = v111 + 1;
    }
    v113 = &v105[*((unsigned int *)a3 + 2)];
    v114 = (char *)v113 - (char *)v112;
    if (v113 != v112)
    {
      memmove(v111, v112, (char *)v113 - (char *)v112);
      v105 = *a3;
    }
    *((_DWORD *)a3 + 2) = (unint64_t)((char *)v111 + v114 - (char *)v105) >> 3;
    --v103;
  }
  while (v104 != v103);
  v115 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v115 == 1)
    return **a3;
  __s1 = v156;
  *(_DWORD *)v156 = a2;
  v155 = 0x2000000001;
  if ((_DWORD)v115)
  {
    v116 = 0;
    v117 = 8 * v115;
    LODWORD(v115) = 1;
    do
    {
      v118 = (*a3)[v116 / 8];
      if (v115 >= HIDWORD(v155))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v156, v115 + 1, 4);
        LODWORD(v115) = v155;
      }
      *((_DWORD *)__s1 + v115) = v118;
      v119 = (v155 + 1);
      LODWORD(v155) = v119;
      if (v119 >= HIDWORD(v155))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v156, v119 + 1, 4);
        LODWORD(v119) = v155;
      }
      *((_DWORD *)__s1 + v119) = HIDWORD(v118);
      v115 = (v155 + 1);
      LODWORD(v155) = v155 + 1;
      v116 += 8;
    }
    while (v117 != v116);
    v120 = __s1;
  }
  else
  {
    v115 = 1;
    v120 = v156;
  }
  v126 = *(_QWORD *)(a1 + 832)
       + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(v120, (uint64_t)v120 + 4 * v115));
  ExistingSCEVInCache = *(_QWORD *)v126;
  v157 = v159;
  v158 = 0x2000000000;
  if (ExistingSCEVInCache)
    v127 = (ExistingSCEVInCache & 1) == 0;
  else
    v127 = 0;
  if (v127)
  {
    v128 = v155;
    v129 = __s1;
    v130 = 4 * v155;
    while (*(_QWORD *)(ExistingSCEVInCache + 16) != v128
         || memcmp(v129, *(const void **)(ExistingSCEVInCache + 8), v130))
    {
      LODWORD(v158) = 0;
      ExistingSCEVInCache = *(_QWORD *)ExistingSCEVInCache;
      if (ExistingSCEVInCache)
        v131 = (ExistingSCEVInCache & 1) == 0;
      else
        v131 = 0;
      if (!v131)
        goto LABEL_198;
    }
  }
  else
  {
LABEL_198:
    v132 = sub_1C484358C(a1 + 864, 8 * *((unsigned int *)a3 + 2), 3);
    v133 = v132;
    v134 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v134)
    {
      v135 = *a3;
      v136 = 8 * v134;
      v137 = (_QWORD *)v132;
      do
      {
        v138 = *v135++;
        *v137++ = v138;
        v136 -= 8;
      }
      while (v136);
    }
    ExistingSCEVInCache = sub_1C484358C(a1 + 864, 48, 3);
    v139 = sub_1C484358C(a1 + 864, 4 * v155, 2);
    v140 = v139;
    if ((_DWORD)v155)
    {
      v141 = (int *)__s1;
      v142 = 4 * v155;
      v143 = (_DWORD *)v139;
      do
      {
        v144 = *v141++;
        *v143++ = v144;
        v142 -= 4;
      }
      while (v142);
      v145 = v155;
    }
    else
    {
      v145 = 0;
    }
    v146 = *((unsigned int *)a3 + 2);
    v147 = sub_1C4F03F00(v133, v146);
    *(_QWORD *)ExistingSCEVInCache = 0;
    *(_QWORD *)(ExistingSCEVInCache + 8) = v140;
    *(_QWORD *)(ExistingSCEVInCache + 16) = v145;
    *(_WORD *)(ExistingSCEVInCache + 24) = a2;
    *(_WORD *)(ExistingSCEVInCache + 26) = v147;
    *(_QWORD *)(ExistingSCEVInCache + 32) = v133;
    *(_QWORD *)(ExistingSCEVInCache + 40) = v146;
    *(_WORD *)(ExistingSCEVInCache + 28) = 6;
    v148 = *(_DWORD *)(a1 + 844) + 1;
    v149 = *(_DWORD *)(a1 + 840);
    if (v148 > 2 * v149)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v149, (uint64_t)off_1E813B300);
      v157 = v159;
      v158 = 0x2000000000;
      v126 = *(_QWORD *)(a1 + 832)
           + 8
           * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(ExistingSCEVInCache + 8), *(_QWORD *)(ExistingSCEVInCache + 8)+ 4 * *(_QWORD *)(ExistingSCEVInCache + 16)));
      if (v157 != v159)
        free(v157);
      v148 = *(_DWORD *)(a1 + 844) + 1;
    }
    *(_DWORD *)(a1 + 844) = v148;
    v150 = *(_QWORD *)v126;
    if (!*(_QWORD *)v126)
      v150 = v126 | 1;
    *(_QWORD *)ExistingSCEVInCache = v150;
    *(_QWORD *)v126 = ExistingSCEVInCache;
    llvm::ScalarEvolution::registerUser((_QWORD *)a1, ExistingSCEVInCache, *a3, *((unsigned int *)a3 + 2));
    v129 = __s1;
  }
  if (v129 != v156)
    free(v129);
  return ExistingSCEVInCache;
}

uint64_t sub_1C4F19BB4(uint64_t a1, int a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (llvm::APInt *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32);
  if (a2)
  {
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
      v6 = ~(-1 << (v4 - 1));
      return v5 == v6;
    }
    --v4;
    if (((*(_QWORD *)(*(_QWORD *)v3 + 8 * (v4 >> 6)) >> v4) & 1) != 0)
      return 0;
  }
  else
  {
    if (!v4)
      return 1;
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
      return v5 == v6;
    }
  }
  return llvm::APInt::countTrailingOnesSlowCase(v3) == v4;
}

uint64_t llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(uint64_t ****a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;

  v8 = a2 - 35;
  v9 = a3;
  v10 = a4;
  v11 = a3;
  v12 = a4;
  switch(a2)
  {
    case '#':
      v11 = a4;
      v12 = a3;
      goto LABEL_3;
    case '%':
LABEL_3:
      if (*(_WORD *)(v11 + 24) == 2)
        v10 = v11;
      else
        v10 = 0;
      if (*(_WORD *)(v12 + 24) == 3)
        v9 = v12;
      else
        v9 = 0;
      goto LABEL_14;
    case '\'':
      v9 = a4;
      v10 = a3;
      goto LABEL_10;
    case ')':
LABEL_10:
      if (*(_WORD *)(v9 + 24) != 3)
        v9 = 0;
      if (*(_WORD *)(v10 + 24) != 2)
        v10 = 0;
LABEL_14:
      if (v9)
        v13 = v10 == 0;
      else
        v13 = 1;
      if (v13 || *(_QWORD *)(v9 + 32) != *(_QWORD *)(v10 + 32))
        goto LABEL_19;
      return 1;
    default:
LABEL_19:
      if ((llvm::ScalarEvolution::isKnownPredicateViaConstantRanges((uint64_t)a1, a2, a3, a4) & 1) != 0)
        return 1;
      v16 = a3;
      v17 = a4;
      v18 = a3;
      v19 = a4;
      switch(v8)
      {
        case 0u:
          v18 = a4;
          v19 = a3;
          goto LABEL_23;
        case 2u:
LABEL_23:
          if (!v18 || *(_WORD *)(v18 + 24) != 10)
            goto LABEL_40;
          v20 = *(_QWORD *)(v18 + 32);
          v21 = *(_QWORD *)(v18 + 40);
          if (v21)
          {
            v22 = 8 * v21;
            v23 = *(_QWORD **)(v18 + 32);
            do
            {
              if (*v23 == v19)
                goto LABEL_39;
              ++v23;
              v22 -= 8;
            }
            while (v22);
            v23 = (_QWORD *)(v20 + 8 * v21);
          }
          else
          {
            v23 = *(_QWORD **)(v18 + 32);
          }
LABEL_39:
          if (v21 != ((uint64_t)v23 - v20) >> 3)
            return 1;
LABEL_40:
          if (!v19 || *(_WORD *)(v19 + 24) != 8)
            goto LABEL_61;
          v28 = *(_QWORD *)(v19 + 32);
          v29 = *(_QWORD *)(v19 + 40);
          if (v29)
          {
            v30 = 8 * v29;
            v31 = *(_QWORD **)(v19 + 32);
            do
            {
              if (*v31 == v18)
                goto LABEL_57;
              ++v31;
              v30 -= 8;
            }
            while (v30);
            v31 = (_QWORD *)(v28 + 8 * v29);
          }
          else
          {
            v31 = *(_QWORD **)(v19 + 32);
          }
LABEL_57:
          v35 = (uint64_t)v31 - v28;
          goto LABEL_60;
        case 4u:
          v16 = a4;
          v17 = a3;
          goto LABEL_31;
        case 6u:
LABEL_31:
          if (!v16 || *(_WORD *)(v16 + 24) != 11)
            goto LABEL_49;
          v24 = *(_QWORD *)(v16 + 32);
          v25 = *(_QWORD *)(v16 + 40);
          if (v25)
          {
            v26 = 8 * v25;
            v27 = *(_QWORD **)(v16 + 32);
            do
            {
              if (*v27 == v17)
                goto LABEL_48;
              ++v27;
              v26 -= 8;
            }
            while (v26);
            v27 = (_QWORD *)(v24 + 8 * v25);
          }
          else
          {
            v27 = *(_QWORD **)(v16 + 32);
          }
LABEL_48:
          if (v25 != ((uint64_t)v27 - v24) >> 3)
            return 1;
LABEL_49:
          if (!v17 || *(_WORD *)(v17 + 24) != 9)
            goto LABEL_61;
          v32 = *(char **)(v17 + 32);
          v29 = *(_QWORD *)(v17 + 40);
          if (v29)
          {
            v33 = 8 * v29;
            v34 = v32;
            do
            {
              if (*(_QWORD *)v34 == v16)
                goto LABEL_59;
              v34 += 8;
              v33 -= 8;
            }
            while (v33);
            v34 = &v32[8 * v29];
          }
          else
          {
            v34 = v32;
          }
LABEL_59:
          v35 = v34 - v32;
LABEL_60:
          if (v29 != v35 >> 3)
            return 1;
LABEL_61:
          if ((a2 & 0xFFFFFFFE) != 0x20)
          {
            if (a3)
            {
              if (*(_WORD *)(a3 + 24) == 7)
              {
                if (a4)
                {
                  if (*(_WORD *)(a4 + 24) == 7
                    && *(_QWORD *)(a3 + 48) == *(_QWORD *)(a4 + 48)
                    && *(_QWORD *)(a3 + 40) == 2
                    && *(_QWORD *)(a4 + 40) == 2)
                  {
                    v36 = *(_QWORD *)(a3 + 32);
                    v37 = *(_QWORD *)(a4 + 32);
                    if (*(_QWORD *)(v36 + 8) == *(_QWORD *)(v37 + 8))
                    {
                      v38 = a2 - 38 >= 4 ? 2 : 4;
                      if (((unsigned __int16)v38 & *(_WORD *)(a3 + 28)) != 0
                        && ((unsigned __int16)v38 & *(_WORD *)(a4 + 28)) != 0
                        && (llvm::ScalarEvolution::isKnownPredicate(a1, a2, *(const llvm::SCEV **)v36, *(const llvm::SCEV **)v37) & 1) != 0)
                      {
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
          result = llvm::ScalarEvolution::isKnownPredicateViaNoOverflow((int)a1, a2, a3, a4, v14);
          break;
        default:
          goto LABEL_61;
      }
      return result;
  }
}

uint64_t llvm::ScalarEvolution::getSequentialMinMaxExpr(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t ExistingSCEVInCache;
  int v12;
  char v13;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _DWORD *v41;
  size_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int *v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *__s1;
  uint64_t v65;
  _DWORD v66[32];
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  _QWORD v73[18];

  v73[16] = *MEMORY[0x1E0C80C00];
  v4 = a3[2];
  if ((_DWORD)v4 == 1)
    return **(_QWORD **)a3;
  if ((_DWORD)v4 != 2)
  {
    v9 = *(uint64_t **)a3;
LABEL_9:
    ExistingSCEVInCache = llvm::ScalarEvolution::findExistingSCEVInCache(a1, a2, v9, v4);
    if (!ExistingSCEVInCache)
    {
      v67 = (void *)a1;
      LOWORD(v68) = a2;
      WORD1(v68) = 10;
      v69 = v73;
      v70 = v73;
      v71 = 16;
      v72 = 0;
      v12 = sub_1C4F1A634((uint64_t)&v67, *(uint64_t **)a3, a3[2], (uint64_t)a3);
      v13 = v12;
      if (v12)
        ExistingSCEVInCache = llvm::ScalarEvolution::getSequentialMinMaxExpr(a1, a2, a3);
      else
        ExistingSCEVInCache = 0;
      if (v70 != v69)
        free(v70);
      if ((v13 & 1) == 0)
      {
        v15 = a3[2];
        if (v15)
        {
          v16 = 0;
          LODWORD(v17) = 0;
          v18 = 0;
          v63 = (uint64_t)(a3 + 4);
LABEL_19:
          v19 = *(uint64_t **)a3;
          v17 = v17;
          do
          {
            v20 = v19[v16];
            if (*(unsigned __int16 *)(v20 + 24) == (_DWORD)a2)
            {
              v21 = &v19[v16];
              v22 = &v19[v15];
              if (v22 != v21 + 1)
              {
                memmove(v21, v21 + 1, (char *)v22 - (char *)(v21 + 1));
                v15 = a3[2];
                v19 = *(uint64_t **)a3;
              }
              v23 = v15 - 1;
              a3[2] = v23;
              v24 = *(char **)(v20 + 32);
              v25 = *(_QWORD *)(v20 + 40);
              if (v16 == v23)
              {
                if (v25 + v23 > a3[3])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v63, v25 + v23, 8);
                  LODWORD(v23) = a3[2];
                }
                if (v25)
                {
                  memcpy((void *)(*(_QWORD *)a3 + 8 * v23), v24, 8 * v25);
                  LODWORD(v23) = a3[2];
                }
                a3[2] = v23 + v25;
              }
              else
              {
                if (v25 + v23 > a3[3])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v63, v25 + v23, 8);
                  v19 = *(uint64_t **)a3;
                  v23 = a3[2];
                }
                v26 = &v19[v16];
                v27 = &v19[v23];
                v28 = v27 - v26;
                if (v28 >= v25)
                {
                  sub_1C6177054(a3, (char *)&v27[-v25], (char *)&v19[v23]);
                  if (&v27[-v25] != v26)
                    memmove(&v26[v25], v26, (char *)&v27[-v25] - (char *)v26);
                  if (v25)
                    memmove(v26, v24, 8 * v25);
                }
                else
                {
                  a3[2] = v23 + v25;
                  if (v16 == v23)
                  {
                    v29 = (uint64_t *)v24;
                  }
                  else
                  {
                    memcpy(&v19[(v23 + v25) - v28], &v19[v16], (char *)v27 - (char *)v26);
                    v29 = (uint64_t *)v24;
                    do
                    {
                      v30 = *v29++;
                      *v26++ = v30;
                      --v28;
                    }
                    while (v28);
                  }
                  v31 = &v24[8 * v25];
                  if (v29 != (uint64_t *)v31)
                    memcpy(v27, v29, v31 - (char *)v29);
                }
              }
              v15 = a3[2];
              v16 = v17;
              v18 = 1;
              if (v15 <= v17)
                return llvm::ScalarEvolution::getSequentialMinMaxExpr(a1, a2, a3);
              goto LABEL_19;
            }
            v16 = ++v17;
          }
          while (v17 < v15);
          if ((v18 & 1) != 0)
            return llvm::ScalarEvolution::getSequentialMinMaxExpr(a1, a2, a3);
          __s1 = v66;
          v66[0] = a2;
          v65 = 0x2000000001;
          if (v15)
          {
            v34 = 0;
            v35 = 8 * v15;
            LODWORD(v33) = 1;
            do
            {
              v36 = *(_QWORD *)(*(_QWORD *)a3 + v34);
              if (v33 >= HIDWORD(v65))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v66, v33 + 1, 4);
                LODWORD(v33) = v65;
              }
              *((_DWORD *)__s1 + v33) = v36;
              v37 = (v65 + 1);
              LODWORD(v65) = v37;
              if (v37 >= HIDWORD(v65))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v66, v37 + 1, 4);
                LODWORD(v37) = v65;
              }
              *((_DWORD *)__s1 + v37) = HIDWORD(v36);
              v33 = (v65 + 1);
              LODWORD(v65) = v65 + 1;
              v34 += 8;
            }
            while (v35 != v34);
            v32 = __s1;
          }
          else
          {
            v33 = 1;
            v32 = v66;
          }
        }
        else
        {
          v32 = v66;
          __s1 = v66;
          v66[0] = a2;
          v65 = 0x2000000001;
          v33 = 1;
        }
        v38 = *(_QWORD *)(a1 + 832)
            + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(v32, (uint64_t)v32 + 4 * v33));
        ExistingSCEVInCache = *(_QWORD *)v38;
        v67 = &v69;
        v68 = 0x2000000000;
        if (ExistingSCEVInCache)
          v39 = (ExistingSCEVInCache & 1) == 0;
        else
          v39 = 0;
        if (v39)
        {
          v40 = v65;
          v41 = __s1;
          v42 = 4 * v65;
          while (*(_QWORD *)(ExistingSCEVInCache + 16) != v40
               || memcmp(v41, *(const void **)(ExistingSCEVInCache + 8), v42))
          {
            LODWORD(v68) = 0;
            ExistingSCEVInCache = *(_QWORD *)ExistingSCEVInCache;
            if (ExistingSCEVInCache)
              v43 = (ExistingSCEVInCache & 1) == 0;
            else
              v43 = 0;
            if (!v43)
              goto LABEL_70;
          }
        }
        else
        {
LABEL_70:
          v44 = sub_1C484358C(a1 + 864, 8 * a3[2], 3);
          v45 = v44;
          v46 = a3[2];
          if ((_DWORD)v46)
          {
            v47 = *(uint64_t **)a3;
            v48 = 8 * v46;
            v49 = (_QWORD *)v44;
            do
            {
              v50 = *v47++;
              *v49++ = v50;
              v48 -= 8;
            }
            while (v48);
          }
          ExistingSCEVInCache = sub_1C484358C(a1 + 864, 48, 3);
          v51 = sub_1C484358C(a1 + 864, 4 * v65, 2);
          v52 = v51;
          if ((_DWORD)v65)
          {
            v53 = (int *)__s1;
            v54 = 4 * v65;
            v55 = (_DWORD *)v51;
            do
            {
              v56 = *v53++;
              *v55++ = v56;
              v54 -= 4;
            }
            while (v54);
            v57 = v65;
          }
          else
          {
            v57 = 0;
          }
          v58 = a3[2];
          v59 = sub_1C4F03F00(v45, v58);
          *(_QWORD *)ExistingSCEVInCache = 0;
          *(_QWORD *)(ExistingSCEVInCache + 8) = v52;
          *(_QWORD *)(ExistingSCEVInCache + 16) = v57;
          *(_WORD *)(ExistingSCEVInCache + 24) = a2;
          *(_WORD *)(ExistingSCEVInCache + 26) = v59;
          *(_QWORD *)(ExistingSCEVInCache + 32) = v45;
          *(_QWORD *)(ExistingSCEVInCache + 40) = v58;
          *(_WORD *)(ExistingSCEVInCache + 28) = 6;
          v60 = *(_DWORD *)(a1 + 844) + 1;
          v61 = *(_DWORD *)(a1 + 840);
          if (v60 > 2 * v61)
          {
            llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v61, (uint64_t)off_1E813B300);
            v67 = &v69;
            v68 = 0x2000000000;
            v38 = *(_QWORD *)(a1 + 832)
                + 8
                * ((*(_DWORD *)(a1 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(ExistingSCEVInCache + 8), *(_QWORD *)(ExistingSCEVInCache + 8)+ 4 * *(_QWORD *)(ExistingSCEVInCache + 16)));
            if (v67 != &v69)
              free(v67);
            v60 = *(_DWORD *)(a1 + 844) + 1;
          }
          *(_DWORD *)(a1 + 844) = v60;
          v62 = *(_QWORD *)v38;
          if (!*(_QWORD *)v38)
            v62 = v38 | 1;
          *(_QWORD *)ExistingSCEVInCache = v62;
          *(_QWORD *)v38 = ExistingSCEVInCache;
          llvm::ScalarEvolution::registerUser((_QWORD *)a1, ExistingSCEVInCache, *(uint64_t **)a3, a3[2]);
          v41 = __s1;
        }
        if (v41 != v66)
          free(v41);
      }
    }
    return ExistingSCEVInCache;
  }
  v7 = 0;
  v8 = 0;
  v9 = *(uint64_t **)a3;
  while (1)
  {
    v10 = v7;
    if (!*(_WORD *)(v9[v8] + 24))
      return llvm::ScalarEvolution::getMinMaxExpr(a1, 10, a3);
    v7 = 1;
    v8 = 1;
    if ((v10 & 1) != 0)
      goto LABEL_9;
  }
}

uint64_t sub_1C4F1A634(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v13[2];
  _QWORD v14[7];

  v14[6] = *MEMORY[0x1E0C80C00];
  v13[0] = v14;
  v13[1] = (void *)0x600000000;
  if (a3 < 7)
  {
    if (!a3)
    {
      v11 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (uint64_t)v14, a3, 8);
  }
  v8 = &a2[a3];
  do
  {
    v9 = *a2;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 16), *a2);
    if (v10)
      __asm { BR              X9 }
    ++a2;
  }
  while (a2 != v8);
  sub_1C4F54880(a4, (uint64_t)v13);
  v11 = 1;
LABEL_10:
  if (v13[0] != v14)
    free(v13[0]);
  return v11;
}

uint64_t llvm::ScalarEvolution::getUMaxExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  uint64_t MinMaxExpr;
  void *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v5[0] = v6;
  v6[0] = a2;
  v6[1] = a3;
  v5[1] = (void *)0x200000002;
  MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 8, (uint64_t **)v5);
  if (v5[0] != v6)
    free(v5[0]);
  return MinMaxExpr;
}

uint64_t llvm::ScalarEvolution::getSMinExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  uint64_t MinMaxExpr;
  void *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v5[0] = v6;
  v6[0] = a2;
  v6[1] = a3;
  v5[1] = (void *)0x200000002;
  MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 11, (uint64_t **)v5);
  if (v5[0] != v6)
    free(v5[0]);
  return MinMaxExpr;
}

uint64_t llvm::ScalarEvolution::getUMinExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3, int a4)
{
  uint64_t SequentialMinMaxExpr;
  uint64_t v5;
  void *v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v7[0] = v8;
  v8[0] = a2;
  v8[1] = a3;
  v7[1] = (void *)0x200000002;
  if (a4)
    SequentialMinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)this, 12, (unsigned int *)v7);
  else
    SequentialMinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 10, (uint64_t **)v7);
  v5 = SequentialMinMaxExpr;
  if (v7[0] != v8)
    free(v7[0]);
  return v5;
}

unint64_t llvm::ScalarEvolution::getUnknown(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v18;
  llvm::Value *v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x1E0C80C00];
  v18 = 14;
  v19 = a2;
  v4 = *((_QWORD *)this + 104)
     + 8 * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(&v18, (uint64_t)&v20));
  v5 = *(_QWORD *)v4;
  v21 = v23;
  v22 = 0x2000000000;
  if (v5)
    v6 = (v5 & 1) == 0;
  else
    v6 = 0;
  if (v6)
  {
    while (*(_QWORD *)(v5 + 16) != 3 || memcmp(&v18, *(const void **)(v5 + 8), 0xCuLL))
    {
      LODWORD(v22) = 0;
      v5 = *(_QWORD *)v5;
      if (v5)
        v7 = (v5 & 1) == 0;
      else
        v7 = 0;
      if (!v7)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    v8 = sub_1C484358C((uint64_t)this + 864, 80, 3);
    v9 = sub_1C484358C((uint64_t)this + 864, 12, 2);
    v10 = &v18;
    v11 = 12;
    v12 = (_DWORD *)v9;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
      v11 -= 4;
    }
    while (v11);
    sub_1C4F54AB0((_QWORD *)v8, v9, 3, (uint64_t)a2, (uint64_t)this, *((_QWORD *)this + 166));
    v5 = v8 + 32;
    *((_QWORD *)this + 166) = v8;
    v14 = *((_DWORD *)this + 211) + 1;
    v15 = *((_DWORD *)this + 210);
    if (v14 > 2 * v15)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v15, (uint64_t)off_1E813B300);
      v21 = v23;
      v22 = 0x2000000000;
      v4 = *((_QWORD *)this + 104)
         + 8
         * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v8 + 40), *(_QWORD *)(v8 + 40) + 4 * *(_QWORD *)(v8 + 48)));
      if (v21 != v23)
        free(v21);
      v14 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v14;
    v16 = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
      v16 = v4 | 1;
    *(_QWORD *)v5 = v16;
    *(_QWORD *)v4 = v5;
  }
  return v5;
}

unint64_t llvm::ScalarEvolution::getStoreSizeOfExpr(llvm::ScalarEvolution *this, llvm::Type *a2, llvm::Type *a3)
{
  uint64_t v5;
  const char *v6;
  unint64_t v7;
  unint64_t v9;

  if (a3 && *((_BYTE *)a3 + 8) == 19)
    return llvm::ScalarEvolution::getSizeOfScalableVectorExpr(this, a2, a3);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)this + 40) + 272, (uint64_t)a3);
  v7 = (unint64_t)(v5 + 7) >> 3;
  if ((_DWORD)v6 == 1)
  {
    v9 = (unint64_t)(v5 + 7) >> 3;
    v7 = v9;
  }
  return llvm::ScalarEvolution::getConstant(this, a2, v7, 0);
}

BOOL llvm::ScalarEvolution::isSCEVable(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 8) & 0xFD) == 13;
}

llvm::Type *llvm::ScalarEvolution::getWiderType(llvm::ScalarEvolution *this, llvm::Type *a2, llvm::Type *a3)
{
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  unint64_t IndexTypeSizeInBits;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  unint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
  if (*((_BYTE *)a2 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, (uint64_t)a2);
  }
  else
  {
    sub_1C4768AD0(v6, (uint64_t)a2);
    IndexTypeSizeInBits = v8;
    if ((_DWORD)v7 == 1)
  }
  v10 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
  if (*((_BYTE *)a3 + 8) == 15)
  {
    v13 = llvm::DataLayout::getIndexTypeSizeInBits(v10, (uint64_t)a3);
  }
  else
  {
    sub_1C4768AD0(v10, (uint64_t)a3);
    v13 = v12;
    if ((_DWORD)v11 == 1)
  }
  if (IndexTypeSizeInBits >= v13)
    return a2;
  else
    return a3;
}

const llvm::Value *llvm::ScalarEvolution::getDefiningScopeBound(llvm::DominatorTree **a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  llvm::ScalarEvolution *NonTrivialDefiningScopeBound;
  char v10;
  uint64_t v11;
  unsigned int v12;
  const llvm::Value *v13;
  const llvm::SCEV *v14;
  uint64_t *v15;
  const llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[128];
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x1E0C80C00];
  *a4 = 1;
  v25 = v29;
  v26 = v29;
  v27 = 16;
  v28 = 0;
  v33 = v35;
  v34 = 0x600000000;
  if (!a3)
    goto LABEL_38;
  v7 = 8 * a3;
  do
  {
    v8 = *a2;
    NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, *a2);
    if (v10)
    {
      if ((HIDWORD(v27) - v28) < 0x1F)
      {
        v11 = v34;
        if (v34 >= (unint64_t)HIDWORD(v34))
        {
          NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v34 + 1, 8);
          v11 = v34;
        }
        v33[v11] = v8;
        LODWORD(v34) = v34 + 1;
      }
      else
      {
        *a4 = 0;
      }
    }
    ++a2;
    v7 -= 8;
  }
  while (v7);
  v12 = v34;
  if (!(_DWORD)v34)
    goto LABEL_38;
  v13 = 0;
  do
  {
    v14 = (const llvm::SCEV *)v33[v12 - 1];
    LODWORD(v34) = v12 - 1;
    NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)llvm::ScalarEvolution::getNonTrivialDefiningScopeBound(NonTrivialDefiningScopeBound, v14);
    if (NonTrivialDefiningScopeBound)
    {
      v16 = NonTrivialDefiningScopeBound;
      if (v13)
      {
        NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)llvm::DominatorTree::dominates(a1[4], v13, NonTrivialDefiningScopeBound);
        if ((_DWORD)NonTrivialDefiningScopeBound)
          v13 = v16;
      }
      else
      {
        v13 = NonTrivialDefiningScopeBound;
      }
    }
    else
    {
      v30 = v32;
      v31 = 0x400000000;
      sub_1C4F2B088((uint64_t)v14, (uint64_t)&v30);
      v15 = (uint64_t *)v30;
      if ((_DWORD)v31)
      {
        v17 = 8 * v31;
        do
        {
          v18 = *v15;
          NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, *v15);
          if (v19)
          {
            if ((HIDWORD(v27) - v28) < 0x1F)
            {
              v20 = v34;
              if (v34 >= (unint64_t)HIDWORD(v34))
              {
                NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v34 + 1, 8);
                v20 = v34;
              }
              v33[v20] = v18;
              LODWORD(v34) = v34 + 1;
            }
            else
            {
              *a4 = 0;
            }
          }
          ++v15;
          v17 -= 8;
        }
        while (v17);
        v15 = (uint64_t *)v30;
      }
      if (v15 != (uint64_t *)v32)
        free(v15);
    }
    v12 = v34;
  }
  while ((_DWORD)v34);
  if (!v13)
  {
LABEL_38:
    v22 = *((_QWORD *)*a1 + 10);
    if (v22)
      v23 = v22 - 24;
    else
      v23 = 0;
    v24 = *(_QWORD *)(v23 + 48);
    if (v24)
      v13 = (const llvm::Value *)(v24 - 24);
    else
      v13 = 0;
  }
  if (v33 != v35)
    free(v33);
  if (v26 != v25)
    free(v26);
  return v13;
}

BOOL llvm::ScalarEvolution::checkValidity(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t v2;
  char v4;
  char *v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[64];
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = &v4;
  v6 = v8;
  v7 = 0x800000000;
  v9 = v13;
  v10 = v13;
  v11 = 8;
  v12 = 0;
  sub_1C4F5B7E0((uint64_t)&v5, (uint64_t)a2);
  if ((_DWORD)v7 && !*v5)
  {
    v2 = *((_QWORD *)v6 + v7 - 1);
    LODWORD(v7) = v7 - 1;
    __asm { BR              X10 }
  }
  if (v10 != v9)
    free(v10);
  if (v6 != v8)
    free(v6);
  return v4 == 0;
}

BOOL llvm::ScalarEvolution::containsAddRecurrence(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  const llvm::SCEV *v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  const llvm::SCEV **v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  const llvm::SCEV **v20;
  const llvm::SCEV *v21;
  const llvm::SCEV **v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  const llvm::SCEV *v27;
  const llvm::SCEV **v28;
  int v29;
  const llvm::SCEV *v30;
  BOOL v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned __int8 v35;
  const llvm::SCEV **v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  _QWORD v44[9];

  v44[8] = *MEMORY[0x1E0C80C00];
  v5 = (char *)this + 56;
  v4 = *((_QWORD *)this + 7);
  v6 = *((unsigned int *)this + 18);
  if (!(_DWORD)v6)
  {
LABEL_2:
    v7 = v4 + 16 * v6;
    goto LABEL_3;
  }
  LODWORD(v10) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = v4 + 16 * v10;
  v11 = *(const llvm::SCEV **)v7;
  if (*(const llvm::SCEV **)v7 != a2)
  {
    v12 = 1;
    while (v11 != (const llvm::SCEV *)-4096)
    {
      v13 = v10 + v12++;
      v10 = v13 & (v6 - 1);
      v11 = *(const llvm::SCEV **)(v4 + 16 * v10);
      if (v11 == a2)
      {
        v7 = v4 + 16 * v10;
        goto LABEL_3;
      }
    }
    goto LABEL_2;
  }
LABEL_3:
  if (v7 != v4 + 16 * v6)
  {
    v8 = *(unsigned __int8 *)(v7 + 8);
    return v8 != 0;
  }
  v35 = 0;
  v36 = (const llvm::SCEV **)&v35;
  v37 = v39;
  v38 = 0x800000000;
  v40 = v44;
  v41 = v44;
  v42 = 8;
  v43 = 0;
  sub_1C4F5B8F0((uint64_t)&v36, (uint64_t)a2);
  if ((_DWORD)v38 && !*(_BYTE *)v36)
  {
    v14 = *((_QWORD *)v37 + v38 - 1);
    LODWORD(v38) = v38 - 1;
    __asm { BR              X10 }
  }
  if (v41 != v40)
    free(v41);
  if (v37 != v39)
    free(v37);
  v8 = v35;
  v15 = *((_DWORD *)this + 18);
  if (v15)
  {
    v18 = *((_QWORD *)this + 7);
    v19 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v20 = (const llvm::SCEV **)(v18 + 16 * v19);
    v21 = *v20;
    if (*v20 == a2)
      return v8 != 0;
    v22 = 0;
    v23 = 1;
    while (v21 != (const llvm::SCEV *)-4096)
    {
      if (v22)
        v31 = 0;
      else
        v31 = v21 == (const llvm::SCEV *)-8192;
      if (v31)
        v22 = v20;
      v32 = v19 + v23++;
      v19 = v32 & (v15 - 1);
      v20 = (const llvm::SCEV **)(v18 + 16 * v19);
      v21 = *v20;
      if (*v20 == a2)
        return v8 != 0;
    }
    if (v22)
      v16 = v22;
    else
      v16 = v20;
  }
  else
  {
    v16 = 0;
  }
  v17 = *((_DWORD *)this + 16);
  if (4 * v17 + 4 >= 3 * v15)
  {
    sub_1C4F5B978((uint64_t)v5, 2 * v15);
    v24 = *((_QWORD *)this + 7);
    v25 = *((_DWORD *)this + 18) - 1;
    v26 = v25 & ((a2 >> 4) ^ (a2 >> 9));
    v16 = (const llvm::SCEV **)(v24 + 16 * v26);
    v27 = *v16;
    if (*v16 == a2)
    {
LABEL_51:
      v30 = a2;
      goto LABEL_35;
    }
    v28 = 0;
    v29 = 1;
    while (v27 != (const llvm::SCEV *)-4096)
    {
      if (v28)
        v33 = 0;
      else
        v33 = v27 == (const llvm::SCEV *)-8192;
      if (v33)
        v28 = v16;
      v34 = v26 + v29++;
      v26 = v34 & v25;
      v16 = (const llvm::SCEV **)(v24 + 16 * (v34 & v25));
      v27 = *v16;
      if (*v16 == a2)
        goto LABEL_51;
    }
    if (v28)
      v16 = v28;
  }
  else if (v15 + ~v17 - *((_DWORD *)this + 17) <= v15 >> 3)
  {
    sub_1C4F5B978((uint64_t)v5, v15);
    v36 = 0;
    sub_1C4F5B874(*((_QWORD *)this + 7), *((_DWORD *)this + 18), (uint64_t)a2, &v36);
    v16 = v36;
  }
  v30 = *v16;
LABEL_35:
  ++*((_DWORD *)this + 16);
  if (v30 != (const llvm::SCEV *)-4096)
    --*((_DWORD *)this + 17);
  *v16 = a2;
  *((_BYTE *)v16 + 8) = v8;
  return v8 != 0;
}

const llvm::SCEV *llvm::ScalarEvolution::getSCEVValues(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  const llvm::SCEV **v5;
  const llvm::SCEV *v6;
  int v7;
  unsigned int v8;

  v2 = *((_QWORD *)this + 10);
  v3 = *((_DWORD *)this + 24);
  if (v3)
  {
    v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (const llvm::SCEV **)(v2 + 96 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != (const llvm::SCEV *)-4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v5 = (const llvm::SCEV **)(v2 + 96 * v4);
      v6 = *v5;
      if (*v5 == a2)
        goto LABEL_8;
    }
  }
  v5 = (const llvm::SCEV **)(v2 + 96 * v3);
LABEL_8:
  if (v5 == (const llvm::SCEV **)(v2 + 96 * v3))
    return 0;
  else
    return v5[6];
}

int32x2_t llvm::ScalarEvolution::eraseValueFromMap(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  llvm::Value *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::Value **v18;
  llvm::Value *v19;
  int v20;
  int v21;
  int v22;
  llvm::Value **v23;
  uint64_t v24;
  llvm::Value **v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t result;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;

  v4 = *((_QWORD *)this + 13);
  v5 = *((_DWORD *)this + 30);
  v6 = a2 >> 4;
  if (v5)
  {
    v7 = (v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = (_QWORD *)(v4 + 48 * v7);
    v9 = (llvm::Value *)v8[3];
    if (v9 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v8 = (_QWORD *)(v4 + 48 * v7);
      v9 = (llvm::Value *)v8[3];
      if (v9 == a2)
        goto LABEL_8;
    }
  }
  v8 = (_QWORD *)(v4 + 48 * v5);
LABEL_8:
  if ((_QWORD *)(v4 + 48 * v5) == v8)
    return result;
  v12 = sub_1C4F1B848(*((_QWORD *)this + 10), *((_DWORD *)this + 24), v8[5]);
  v13 = v12;
  if ((v12[1] & 1) != 0)
  {
    v14 = v12 + 2;
    v15 = 4;
    goto LABEL_11;
  }
  v15 = *((_DWORD *)v12 + 6);
  if (v15)
  {
    v14 = (uint64_t *)v12[2];
LABEL_11:
    v16 = v15 - 1;
    LODWORD(v17) = (v15 - 1) & (v6 ^ (a2 >> 9));
    v18 = (llvm::Value **)&v14[v17];
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_16:
      *v18 = (llvm::Value *)-8192;
      v22 = *((_DWORD *)v12 + 3) + 1;
      *((_DWORD *)v12 + 2) -= 2;
      *((_DWORD *)v12 + 3) = v22;
      v23 = (llvm::Value **)v12[6];
      v24 = *((unsigned int *)v13 + 14);
      v25 = &v23[v24];
      if ((_DWORD)v24)
      {
        v26 = 8 * v24;
        while (*v23 != a2)
        {
          ++v23;
          v26 -= 8;
          if (!v26)
          {
            v23 = v25;
            break;
          }
        }
      }
      if (v25 != v23 + 1)
      {
        memmove(v23, v23 + 1, (char *)v25 - (char *)(v23 + 1));
        LODWORD(v24) = *((_DWORD *)v13 + 14);
      }
      *((_DWORD *)v13 + 14) = v24 - 1;
    }
    else
    {
      v20 = 1;
      while (v19 != (llvm::Value *)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & v16;
        v19 = (llvm::Value *)v14[v17];
        if (v19 == a2)
        {
          v18 = (llvm::Value **)&v14[v17];
          goto LABEL_16;
        }
      }
    }
  }
  v27 = v8[3];
  if (v27 != -8192)
  {
    if (v27 != -4096 && v27 != 0)
    {
      v30 = v8[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v30 = v8[2];
      v31 = (unint64_t *)v8[2];
      if (v31)
      {
        *v31 = *v31 & 7 | v30;
      }
      else
      {
        v32 = v8[3];
        v33 = ***(int32x2_t ****)v32;
        v34 = (unint64_t)v33[303];
        if (v34 <= v30)
        {
          v35 = v33[305].u32[0];
          if (v34 + 16 * v35 > v30)
          {
            v36 = v35 - 1;
            LODWORD(v37) = v36 & ((v32 >> 4) ^ (v32 >> 9));
            v38 = (uint64_t *)(v34 + 16 * v37);
            v39 = *v38;
            if (v32 == *v38)
            {
LABEL_41:
              *v38 = -8192;
              v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
              v32 = v8[3];
            }
            else
            {
              v40 = 1;
              while (v39 != -4096)
              {
                v41 = v37 + v40++;
                v37 = v41 & v36;
                v39 = *(_QWORD *)(v34 + 16 * v37);
                if (v32 == v39)
                {
                  v38 = (uint64_t *)(v34 + 16 * v37);
                  goto LABEL_41;
                }
              }
            }
            *(_BYTE *)(v32 + 17) &= ~1u;
          }
        }
      }
    }
    v8[3] = -8192;
  }
  v8[4] = 0;
  result = vadd_s32(*(int32x2_t *)((char *)this + 112), (int32x2_t)0x1FFFFFFFFLL);
  *((int32x2_t *)this + 14) = result;
  return result;
}

uint64_t *sub_1C4F1B848(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return (uint64_t *)(a1 + 96 * a2);
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = (uint64_t *)(a1 + 96 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = (uint64_t *)(a1 + 96 * (v8 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (uint64_t *)(a1 + 96 * a2);
  }
  return v5;
}

_QWORD *llvm::ScalarEvolution::insertValueToMap(_QWORD *this, llvm::Value *a2, const llvm::SCEV *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Value *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  llvm::Value *v16;
  _QWORD *v17;
  unint64_t v18;
  int32x2_t ****v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int32x2_t *****v25;
  int32x2_t ****v26;
  int v27;
  int v28;
  unint64_t v30;
  llvm::Value *v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  llvm::Value **v37;
  llvm::Value *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  _QWORD *v47;
  const llvm::SCEV *v48;
  _QWORD *v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  _QWORD *v53;
  int64x2_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  unsigned int v58;
  llvm::Value **v59;
  llvm::Value *v60;
  llvm::Value **v61;
  int v62;
  llvm::Value **v63;
  llvm::Value *v64;
  uint64_t v65;
  BOOL v66;
  unsigned int v67;
  _QWORD v68[4];
  uint64_t v69;
  unint64_t *v70;
  llvm::Value *v71;
  _QWORD *v72;
  uint64_t (**v73)(llvm::CallbackVH *__hidden);
  unint64_t v74;
  unint64_t *v75;
  int32x2_t ****v76;
  _QWORD *v77;
  const llvm::SCEV *v78;
  const llvm::SCEV *v79;
  llvm::Value *v80;

  v5 = this;
  v79 = a3;
  v80 = a2;
  v7 = (uint64_t)(this + 13);
  v6 = this[13];
  v8 = *((_DWORD *)this + 30);
  v9 = a2 >> 4;
  if (v8)
  {
    v10 = (v8 - 1) & (v9 ^ (a2 >> 9));
    v11 = v6 + 48 * v10;
    v12 = *(llvm::Value **)(v11 + 24);
    if (v12 == a2)
      goto LABEL_8;
    v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v8 - 1);
      v11 = v6 + 48 * v10;
      v12 = *(llvm::Value **)(v11 + 24);
      if (v12 == a2)
        goto LABEL_8;
    }
  }
  v11 = v6 + 48 * v8;
LABEL_8:
  if (v11 != v6 + 48 * v8)
    return this;
  v15 = 2;
  v69 = 2;
  v70 = 0;
  v71 = a2;
  if (a2 == (llvm::Value *)-8192 || a2 == (llvm::Value *)-4096)
  {
    v16 = a2;
  }
  else
  {
    v16 = a2;
    if (a2)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v69);
      v15 = v69;
      v16 = v71;
    }
  }
  v68[3] = off_1E813B0D0;
  v72 = v5;
  v74 = v15 & 6;
  v75 = 0;
  v76 = (int32x2_t ****)v16;
  v17 = v5;
  if (v16 != (llvm::Value *)-8192)
  {
    v17 = v5;
    if (v16 != (llvm::Value *)-4096)
    {
      v17 = v5;
      if (v16)
      {
        v75 = *(unint64_t **)(v15 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) = &v74;
        v74 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v75)
          *v75 = *v75 & 7 | (unint64_t)&v75;
        v17 = v72;
      }
    }
  }
  v73 = off_1E813B0D0;
  v77 = v17;
  v78 = a3;
  sub_1C4F5BB04(v7, &v73, &v78, (uint64_t)v68);
  if (v76 != (int32x2_t ****)-8192 && v76 != (int32x2_t ****)-4096 && v76)
  {
    v18 = v74 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF8) = v75;
    if (v75)
    {
      *v75 = *v75 & 7 | v18;
    }
    else
    {
      v19 = v76;
      v20 = ***v76;
      v21 = (unint64_t)v20[303];
      if (v21 <= v18)
      {
        v22 = v20[305].u32[0];
        if (v21 + 16 * v22 > v18)
        {
          v23 = v22 - 1;
          LODWORD(v24) = v23 & ((v76 >> 4) ^ (v76 >> 9));
          v25 = (int32x2_t *****)(v21 + 16 * v24);
          v26 = *v25;
          if (v76 == *v25)
          {
LABEL_30:
            *v25 = (int32x2_t ****)-8192;
            v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
            v19 = v76;
          }
          else
          {
            v27 = 1;
            while (v26 != (int32x2_t ****)-4096)
            {
              v28 = v24 + v27++;
              v24 = v28 & v23;
              v26 = *(int32x2_t *****)(v21 + 16 * v24);
              if (v76 == v26)
              {
                v25 = (int32x2_t *****)(v21 + 16 * v24);
                goto LABEL_30;
              }
            }
          }
          *((_BYTE *)v19 + 17) &= ~1u;
        }
      }
    }
  }
  if (v71 != (llvm::Value *)-8192 && v71 != (llvm::Value *)-4096 && v71 != 0)
  {
    v30 = v69 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF8) = v70;
    if (v70)
    {
      *v70 = *v70 & 7 | v30;
    }
    else
    {
      v31 = v71;
      v32 = ***(int32x2_t ****)v71;
      v33 = (unint64_t)v32[303];
      if (v33 <= v30)
      {
        v34 = v32[305].u32[0];
        if (v33 + 16 * v34 > v30)
        {
          v35 = v34 - 1;
          LODWORD(v36) = v35 & ((v71 >> 4) ^ (v71 >> 9));
          v37 = (llvm::Value **)(v33 + 16 * v36);
          v38 = *v37;
          if (v71 == *v37)
          {
LABEL_46:
            *v37 = (llvm::Value *)-8192;
            v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
            v31 = v71;
          }
          else
          {
            v39 = 1;
            while (v38 != (llvm::Value *)-4096)
            {
              v40 = v36 + v39++;
              v36 = v40 & v35;
              v38 = *(llvm::Value **)(v33 + 16 * v36);
              if (v71 == v38)
              {
                v37 = (llvm::Value **)(v33 + 16 * v36);
                goto LABEL_46;
              }
            }
          }
          *((_BYTE *)v31 + 17) &= ~1u;
        }
      }
    }
  }
  v43 = v5[10];
  v42 = (uint64_t)(v5 + 10);
  v41 = v43;
  v44 = *(_DWORD *)(v42 + 16);
  if (v44)
  {
    v45 = v44 - 1;
    v46 = v45 & ((a3 >> 4) ^ (a3 >> 9));
    v47 = (_QWORD *)(v41 + 96 * v46);
    v48 = (const llvm::SCEV *)*v47;
    if ((const llvm::SCEV *)*v47 == a3)
      goto LABEL_64;
    v49 = 0;
    v50 = 1;
    while (v48 != (const llvm::SCEV *)-4096)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v48 == (const llvm::SCEV *)-8192;
      if (v51)
        v49 = v47;
      v52 = v46 + v50++;
      v46 = v52 & v45;
      v47 = (_QWORD *)(v41 + 96 * v46);
      v48 = (const llvm::SCEV *)*v47;
      if ((const llvm::SCEV *)*v47 == a3)
        goto LABEL_64;
    }
    if (v49)
      v53 = v49;
    else
      v53 = v47;
  }
  else
  {
    v53 = 0;
  }
  v47 = sub_1C4F5C2DC(v42, (uint64_t)&v79, (uint64_t *)&v79, v53);
  *v47 = v79;
  *((_OWORD *)v47 + 3) = 0u;
  *((_OWORD *)v47 + 5) = 0u;
  *((_OWORD *)v47 + 4) = 0u;
  v47[1] = 1;
  v54 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *((int64x2_t *)v47 + 1) = v54;
  *((int64x2_t *)v47 + 2) = v54;
  v47[6] = v47 + 8;
  v47[7] = 0x400000000;
LABEL_64:
  this = v47 + 1;
  if ((v47[1] & 1) != 0)
  {
    v55 = v47 + 2;
    v56 = 4;
  }
  else
  {
    v56 = *((_DWORD *)v47 + 6);
    if (!v56)
    {
      v63 = 0;
      goto LABEL_72;
    }
    v55 = (_QWORD *)v47[2];
  }
  v57 = v56 - 1;
  v58 = v57 & (v9 ^ (a2 >> 9));
  v59 = (llvm::Value **)&v55[v58];
  v60 = *v59;
  if (*v59 == a2)
    return this;
  v61 = 0;
  v62 = 1;
  while (v60 != (llvm::Value *)-4096)
  {
    if (v61)
      v66 = 0;
    else
      v66 = v60 == (llvm::Value *)-8192;
    if (v66)
      v61 = v59;
    v67 = v58 + v62++;
    v58 = v67 & v57;
    v59 = (llvm::Value **)&v55[v58];
    v60 = *v59;
    if (*v59 == a2)
      return this;
  }
  if (v61)
    v63 = v61;
  else
    v63 = v59;
LABEL_72:
  this = sub_1C4E4473C((uint64_t)this, (uint64_t)&v80, &v80, v63);
  *this = v80;
  v64 = v80;
  v65 = *((unsigned int *)v47 + 14);
  if (v65 >= *((_DWORD *)v47 + 15))
  {
    this = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v47 + 6), (uint64_t)(v47 + 8), v65 + 1, 8);
    LODWORD(v65) = *((_DWORD *)v47 + 14);
  }
  *(_QWORD *)(v47[6] + 8 * v65) = v64;
  ++*((_DWORD *)v47 + 14);
  return this;
}

llvm::ScalarEvolution::SCEVCallbackVH *llvm::ScalarEvolution::SCEVCallbackVH::SCEVCallbackVH(llvm::ScalarEvolution::SCEVCallbackVH *this, llvm::Value *a2, llvm::ScalarEvolution *a3)
{
  llvm::ValueHandleBase *v5;

  *((_QWORD *)this + 1) = 2;
  *((_QWORD *)this + 2) = 0;
  v5 = (llvm::ScalarEvolution::SCEVCallbackVH *)((char *)this + 8);
  *((_QWORD *)v5 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v5);
  *(_QWORD *)this = off_1E813B0D0;
  *((_QWORD *)this + 4) = a3;
  return this;
}

{
  llvm::ValueHandleBase *v5;

  *((_QWORD *)this + 1) = 2;
  *((_QWORD *)this + 2) = 0;
  v5 = (llvm::ScalarEvolution::SCEVCallbackVH *)((char *)this + 8);
  *((_QWORD *)v5 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v5);
  *(_QWORD *)this = off_1E813B0D0;
  *((_QWORD *)this + 4) = a3;
  return this;
}

uint64_t llvm::ScalarEvolution::getExistingSCEV(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_DWORD *)(a1 + 120);
  if (v3)
  {
    v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = v2 + 48 * v4;
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v5 = v2 + 48 * v4;
      v6 = *(_QWORD *)(v5 + 24);
      if (v6 == a2)
        goto LABEL_8;
    }
  }
  v5 = v2 + 48 * v3;
LABEL_8:
  if (v5 == v2 + 48 * v3)
    return 0;
  else
    return *(_QWORD *)(v5 + 40);
}

uint64_t llvm::ScalarEvolution::createSCEVIter(llvm::ScalarEvolution *this, unint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Value *v12;
  int v13;
  unsigned int v14;
  const llvm::SCEV *SCEV;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  llvm::Value *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 v30;
  uint64_t v31;
  llvm::Value *v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[48];
  void *v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x1E0C80C00];
  v36 = v39;
  v38 = 6;
  v39[0] = a2 | 4;
  v39[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v4 = 2;
  do
  {
    while (1)
    {
      v5 = *((_QWORD *)v36 + --v4);
      v37 = v4;
      v6 = (llvm::Value *)(v5 & 0xFFFFFFFFFFFFFFF8);
      v32 = (llvm::Value *)(v5 & 0xFFFFFFFFFFFFFFF8);
      v7 = *((_QWORD *)this + 13);
      v8 = *((_DWORD *)this + 30);
      if (!v8)
        goto LABEL_8;
      v9 = v8 - 1;
      v10 = (v8 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v11 = v7 + 48 * v10;
      v12 = *(llvm::Value **)(v11 + 24);
      if (v12 != v6)
      {
        v13 = 1;
        while (v12 != (llvm::Value *)-4096)
        {
          v14 = v10 + v13++;
          v10 = v14 & v9;
          v11 = v7 + 48 * (v14 & v9);
          v12 = *(llvm::Value **)(v11 + 24);
          if (v12 == v6)
            goto LABEL_9;
        }
LABEL_8:
        v11 = v7 + 48 * v8;
      }
LABEL_9:
      if (v11 == v7 + 48 * v8 || !*(_QWORD *)(v11 + 40))
        break;
      if (!v4)
        goto LABEL_30;
    }
    v33 = v35;
    v34 = 0x600000000;
    if ((v5 & 4) != 0)
      SCEV = llvm::ScalarEvolution::createSCEV(this, v6);
    else
      SCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getOperandsToCreate(this, v6, (uint64_t)&v33);
    if (SCEV)
    {
      llvm::ScalarEvolution::insertValueToMap(this, v32, SCEV);
    }
    else
    {
      LOBYTE(v31) = 1;
      v16 = v37;
      if (v37 >= v38)
      {
        sub_1C4F5CB48((uint64_t)&v36, (uint64_t *)&v32, (unsigned __int8 *)&v31);
      }
      else
      {
        *((_QWORD *)v36 + v37) = (unint64_t)v32 | 4;
        v37 = v16 + 1;
      }
      if ((_DWORD)v34)
      {
        v17 = (uint64_t *)v33;
        v18 = 8 * v34;
        do
        {
          v31 = 0;
          v19 = *v17;
          v31 = *v17;
          v30 = 0;
          v20 = v37;
          if (v37 >= v38)
          {
            sub_1C4F5CB48((uint64_t)&v36, &v31, &v30);
          }
          else
          {
            *((_QWORD *)v36 + v37) = v19 & 0xFFFFFFFFFFFFFFFBLL;
            v37 = v20 + 1;
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
    }
    if (v33 != v35)
      free(v33);
    v4 = v37;
  }
  while (v37);
LABEL_30:
  v21 = *((_QWORD *)this + 13);
  v22 = *((_DWORD *)this + 30);
  if (!v22)
    goto LABEL_36;
  v23 = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v24 = v21 + 48 * v23;
  v25 = *(llvm::Value **)(v24 + 24);
  if (v25 != (llvm::Value *)a2)
  {
    v26 = 1;
    while (v25 != (llvm::Value *)-4096)
    {
      v27 = v23 + v26++;
      v23 = v27 & (v22 - 1);
      v24 = v21 + 48 * v23;
      v25 = *(llvm::Value **)(v24 + 24);
      if (v25 == (llvm::Value *)a2)
        goto LABEL_37;
    }
LABEL_36:
    v24 = v21 + 48 * v22;
  }
LABEL_37:
  if (v24 == v21 + 48 * v22)
    v28 = 0;
  else
    v28 = *(_QWORD *)(v24 + 40);
  if (v36 != v39)
    free(v36);
  return v28;
}

unint64_t llvm::ScalarEvolution::getNotSCEV(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  __int16 v4;
  uint64_t Not;
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t MinMaxExpr;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  _QWORD v34[16];
  void *v35;
  uint64_t v36;
  _QWORD v37[17];

  v37[16] = *MEMORY[0x1E0C80C00];
  v4 = *((_WORD *)a2 + 12);
  if (!a2 || *((_WORD *)a2 + 12))
  {
    if (!a2 || (v4 & 0xFFFC) != 8)
      goto LABEL_50;
    v35 = v37;
    v36 = 0x200000000;
    v21 = *((_QWORD *)a2 + 5);
    if (v21)
    {
      v22 = 0;
      v23 = (uint64_t *)*((_QWORD *)a2 + 4);
      v24 = 8 * v21;
      while (1)
      {
        v25 = *v23;
        if (!*v23 || *(_WORD *)(*v23 + 24) != 4)
          break;
        if (*(_QWORD *)(v25 + 40) != 2)
          break;
        v27 = *(_QWORD *)(v25 + 32);
        if (!llvm::SCEV::isAllOnesValue(*(llvm::SCEV **)v27))
          break;
        v28 = *(_QWORD *)(v27 + 8);
        if (!v28 || *(_WORD *)(v28 + 24) != 5)
          break;
        if (*(_QWORD *)(v28 + 40) != 2)
          break;
        v30 = *(_QWORD *)(v28 + 32);
        if (!llvm::SCEV::isAllOnesValue(*(llvm::SCEV **)v30))
          break;
        v31 = *(_QWORD *)(v30 + 8);
        if (!v31)
          break;
        if (v22 >= HIDWORD(v36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v22 + 1, 8);
          v22 = v36;
        }
        *((_QWORD *)v35 + v22) = v31;
        v22 = v36 + 1;
        LODWORD(v36) = v36 + 1;
        ++v23;
        v24 -= 8;
        if (!v24)
        {
          v4 = *((_WORD *)a2 + 12);
          goto LABEL_46;
        }
      }
      MinMaxExpr = 0;
    }
    else
    {
LABEL_46:
      MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(this, (unsigned __int16)(0x90008000B000AuLL >> (16 * (v4 - 8))), &v35);
    }
    if (v35 != v37)
      free(v35);
    if (!MinMaxExpr)
LABEL_50:
      __asm { BR              X11 }
  }
  else
  {
    Not = llvm::ConstantExpr::getNot(*((llvm::Constant ***)a2 + 4), a2);
    LODWORD(v34[0]) = 0;
    *(_QWORD *)((char *)v34 + 4) = Not;
    v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v33 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v33 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v33;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v7 = 0x9DDFEA08EB382D69 * (v34[0] ^ qword_1ED7EAC80 ^ __ROR8__(*(_QWORD *)((char *)v34 + 4) + 12, 12));
    v8 = __ROR8__(*(_QWORD *)((char *)v34 + 4) + 12, 12) ^ (v7 >> 47);
    v9 = *((_QWORD *)this + 104)
       + 8
       * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                          * ((((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 32) >> 15) ^ (-348639895 * (v8 ^ v7)))) ^ HIDWORD(v34[0])));
    MinMaxExpr = *(_QWORD *)v9;
    v35 = v37;
    v36 = 0x2000000000;
    if (MinMaxExpr)
      v11 = (MinMaxExpr & 1) == 0;
    else
      v11 = 0;
    if (v11)
    {
      while (*(_QWORD *)(MinMaxExpr + 16) != 3 || memcmp(v34, *(const void **)(MinMaxExpr + 8), 0xCuLL))
      {
        LODWORD(v36) = 0;
        MinMaxExpr = *(_QWORD *)MinMaxExpr;
        if (MinMaxExpr)
          v12 = (MinMaxExpr & 1) == 0;
        else
          v12 = 0;
        if (!v12)
          goto LABEL_15;
      }
    }
    else
    {
LABEL_15:
      MinMaxExpr = sub_1C484358C((uint64_t)this + 864, 40, 3);
      v13 = sub_1C484358C((uint64_t)this + 864, 12, 2);
      v14 = (int *)v34;
      v15 = 12;
      v16 = (_DWORD *)v13;
      do
      {
        v17 = *v14++;
        *v16++ = v17;
        v15 -= 4;
      }
      while (v15);
      *(_QWORD *)MinMaxExpr = 0;
      *(_QWORD *)(MinMaxExpr + 8) = v13;
      *(_QWORD *)(MinMaxExpr + 16) = 3;
      *(_DWORD *)(MinMaxExpr + 24) = 0x10000;
      *(_WORD *)(MinMaxExpr + 28) = 0;
      *(_QWORD *)(MinMaxExpr + 32) = Not;
      v18 = *((_DWORD *)this + 211) + 1;
      v19 = *((_DWORD *)this + 210);
      if (v18 > 2 * v19)
      {
        llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v19, (uint64_t)off_1E813B300);
        v35 = v37;
        v36 = 0x2000000000;
        v9 = *((_QWORD *)this + 104)
           + 8
           * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(MinMaxExpr + 8), *(_QWORD *)(MinMaxExpr + 8)+ 4 * *(_QWORD *)(MinMaxExpr + 16)));
        if (v35 != v37)
          free(v35);
        v18 = *((_DWORD *)this + 211) + 1;
      }
      *((_DWORD *)this + 211) = v18;
      v20 = *(_QWORD *)v9;
      if (!*(_QWORD *)v9)
        v20 = v9 | 1;
      *(_QWORD *)MinMaxExpr = v20;
      *(_QWORD *)v9 = MinMaxExpr;
    }
  }
  return MinMaxExpr;
}

unint64_t llvm::ScalarEvolution::removePointerBase(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  int v4;
  unint64_t v5;
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  _QWORD *v12;
  const llvm::SCEV *v13;
  uint64_t v14;
  unint64_t AddRecExpr;
  int v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)a2 + 12);
  if (!a2 || v4 != 7)
  {
    if (!a2 || v4 != 4)
      __asm { BR              X10 }
    v10 = (const void *)*((_QWORD *)a2 + 4);
    v9 = *((_QWORD *)a2 + 5);
    v19 = v21;
    v20 = 0x600000000;
    if (v9 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v9, 8);
      v11 = v20;
      v12 = v19;
    }
    else
    {
      if (!v9)
      {
        v17 = 0;
        v18 = v21;
LABEL_16:
        LODWORD(v20) = v17 + v9;
        __asm { BR              X13 }
      }
      v11 = 0;
      v12 = v21;
    }
    memcpy(&v12[v11], v10, 8 * v9);
    v17 = v20;
    v18 = v19;
    goto LABEL_16;
  }
  v6 = (const void *)*((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 5);
  v19 = v21;
  v20 = 0x600000000;
  if (v5 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v5, 8);
    v7 = v20;
    v8 = v19;
  }
  else
  {
    v7 = 0;
    v8 = v21;
  }
  memcpy(&v8[v7], v6, 8 * v5);
  v13 = *(const llvm::SCEV **)v19;
  LODWORD(v20) = v20 + v5;
  v14 = llvm::ScalarEvolution::removePointerBase(this, v13);
  *(_QWORD *)v19 = v14;
  AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, (uint64_t **)&v19, *((uint64_t ***)a2 + 6));
  if (v19 != v21)
    free(v19);
  return AddRecExpr;
}

uint64_t llvm::ScalarEvolution::getPointerBase(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  return ((uint64_t (*)(const llvm::SCEV *))((char *)sub_1C4F1C980
                                                     + 4 * byte_1C85F52D8[*((unsigned __int16 *)a2 + 12)]))(a2);
}

void sub_1C4F1C980()
{
  JUMPOUT(0x1C4F1C96CLL);
}

void sub_1C4F1C98C()
{
  JUMPOUT(0x1C4F1C984);
}

uint64_t sub_1C4F1C994(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(_BYTE *)(**(_QWORD **)(v1 + 32) + 8) == 15)
  {
    while (1)
    {
      while (1)
      {
        v2 = result;
        v3 = *(unsigned __int16 *)(result + 24);
        if (!result || v3 != 7)
          break;
        result = **(_QWORD **)(result + 32);
      }
      if (!result || v3 != 4)
        break;
      result = 0;
      if (*(_QWORD *)(v2 + 40))
        return ((uint64_t (*)(_QWORD))((char *)&loc_1C4F1CA20
                                               + 4
                                               * byte_1C85F52E7[*(unsigned __int16 *)(**(_QWORD **)(v2 + 32) + 24)]))(0);
    }
  }
  return result;
}

void sub_1C4F1CA78()
{
  JUMPOUT(0x1C4F1C9A8);
}

void llvm::ScalarEvolution::getNoopOrZeroExtend(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

unint64_t sub_1C4F1CAC0()
{
  uint64_t v0;
  llvm::Type *v1;
  const llvm::SCEV *v2;
  llvm::ScalarEvolution *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t IndexTypeSizeInBits;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;

  v4 = *(uint64_t **)(v0 + 32);
  v5 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 40) + 272;
  if (*(_BYTE *)(*v4 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, v5);
  }
  else
  {
    sub_1C4768AD0(v6, v5);
    IndexTypeSizeInBits = v8;
    if ((_DWORD)v7 == 1)
  }
  v10 = *(_QWORD *)(*(_QWORD *)v3 + 40) + 272;
  if (*((_BYTE *)v1 + 8) == 15)
  {
    v11 = llvm::DataLayout::getIndexTypeSizeInBits(v10, (uint64_t)v1);
  }
  else
  {
    sub_1C4768AD0(v10, (uint64_t)v1);
    if ((_DWORD)v12 == 1)
    {
      v14 = v11;
      v11 = v14;
    }
  }
  if (IndexTypeSizeInBits == v11)
    return (unint64_t)v2;
  else
    return llvm::ScalarEvolution::getZeroExtendExpr(v3, v2, v1, 0);
}

void llvm::ScalarEvolution::getNoopOrSignExtend(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1C4F1CC0C()
{
  uint64_t v0;
  llvm::Type *v1;
  const llvm::SCEV *v2;
  llvm::ScalarEvolution *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t IndexTypeSizeInBits;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;

  v4 = *(uint64_t **)(v0 + 32);
  v5 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 40) + 272;
  if (*(_BYTE *)(*v4 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, v5);
  }
  else
  {
    sub_1C4768AD0(v6, v5);
    IndexTypeSizeInBits = v8;
    if ((_DWORD)v7 == 1)
  }
  v10 = *(_QWORD *)(*(_QWORD *)v3 + 40) + 272;
  if (*((_BYTE *)v1 + 8) == 15)
  {
    v11 = llvm::DataLayout::getIndexTypeSizeInBits(v10, (uint64_t)v1);
  }
  else
  {
    sub_1C4768AD0(v10, (uint64_t)v1);
    if ((_DWORD)v12 == 1)
    {
      v14 = v11;
      v11 = v14;
    }
  }
  if (IndexTypeSizeInBits == v11)
    return (uint64_t)v2;
  else
    return llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v1, 0);
}

void llvm::ScalarEvolution::getUMaxFromMismatchedTypes(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  __asm { BR              X11 }
}

void sub_1C4F1CD68()
{
  JUMPOUT(0x1C4F1CD54);
}

void sub_1C4F1CD74()
{
  JUMPOUT(0x1C4F1CD6CLL);
}

void sub_1C4F1CD7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;

  v23 = *(uint64_t **)(v20 + 32);
  v24 = *v23;
  v25 = *(_QWORD *)(*(_QWORD *)v21 + 40) + 272;
  if (*(_BYTE *)(*v23 + 8) == 15)
  {
    llvm::DataLayout::getIndexTypeSizeInBits(v25, v24);
  }
  else
  {
    sub_1C4768AD0(v25, v24);
    if ((_DWORD)v26 == 1)
  }
  __asm { BR              X11 }
}

uint64_t llvm::ScalarEvolution::getUMinFromMismatchedTypes(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3, int a4)
{
  uint64_t UMinFromMismatchedTypes;
  void *v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v6[0] = v7;
  v7[0] = a2;
  v7[1] = a3;
  v6[1] = (void *)0x200000002;
  UMinFromMismatchedTypes = llvm::ScalarEvolution::getUMinFromMismatchedTypes((uint64_t)this, v6, a4);
  if (v6[0] != v7)
    free(v6[0]);
  return UMinFromMismatchedTypes;
}

uint64_t llvm::ScalarEvolution::getUMinFromMismatchedTypes(uint64_t a1, _DWORD *a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t SequentialMinMaxExpr;
  void *v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v3 = a2[2];
  if (v3 == 1)
    return **(_QWORD **)a2;
  if (v3)
    __asm { BR              X10 }
  v7[0] = v8;
  v7[1] = (void *)0x200000000;
  if (a3)
    SequentialMinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(a1, 12, (unsigned int *)v7);
  else
    SequentialMinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(a1, 10, (uint64_t **)v7);
  v4 = SequentialMinMaxExpr;
  if (v7[0] != v8)
    free(v7[0]);
  return v4;
}

void sub_1C4F1D324(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1C4F1D384()
{
  JUMPOUT(0x1C4F1D370);
}

void sub_1C4F1D390()
{
  JUMPOUT(0x1C4F1D388);
}

unint64_t sub_1C4F1D398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  unsigned int IndexTypeSizeInBits;
  uint64_t RangeRef;
  int v11;
  unsigned int v12;
  unint64_t *v13;
  llvm::ConstantRange *v14;
  unint64_t v15;
  const llvm::APInt *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _BYTE *v29;
  size_t v30;
  BOOL v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  llvm::ConstantRange *v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  const llvm::APInt *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  size_t v54;
  BOOL v55;
  int *v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BOOL4 v71;
  _BOOL4 v72;
  uint64_t v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BOOL4 v79;
  _BOOL4 v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v87;
  unsigned int v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE v91[120];
  char *v92;
  uint64_t v93;
  _BYTE v94[256];

  v4 = *(uint64_t **)(v0 + 32);
  v5 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 40) + 272;
  if (*(_BYTE *)(*v4 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, v5);
  }
  else
  {
    sub_1C4768AD0(v6, v5);
    IndexTypeSizeInBits = v8;
    if ((_DWORD)v7 == 1)
  }
  RangeRef = llvm::ScalarEvolution::getRangeRef(v1, v2, 1u, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v92);
  v11 = sub_1C49591DC((llvm::APInt *)&v92);
  if (v93 >= 0x41 && v92)
    MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
  if (!v11)
  {
    v37 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(v1, v2, 1u, 0);
    llvm::ConstantRange::getSignedMax(v37, (llvm::APInt *)&v92);
    v38 = v93 - 1;
    if (v93 >= 0x41)
      v39 = &v92[8 * (v38 >> 6)];
    else
      v39 = (char *)&v92;
    v40 = (1 << v38) & *(_QWORD *)v39;
    if (v93 >= 0x41 && v92)
      MEMORY[0x1CAA32F9C]();
    if (!v40)
      return 0;
    *v3 = 38;
    v86 = IndexTypeSizeInBits;
    if (IndexTypeSizeInBits > 0x40)
    {
      v42 = &v85;
      llvm::APInt::initSlowCase((llvm::APInt *)&v85, -1, 1);
      LODWORD(v41) = IndexTypeSizeInBits - 1;
      if (v86 >= 0x41)
        v42 = (unint64_t *)(v85 + 8 * (v41 >> 6));
      IndexTypeSizeInBits = v86;
    }
    else
    {
      if (IndexTypeSizeInBits)
        v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
      else
        v41 = 0;
      v85 = v41;
      LOBYTE(v41) = IndexTypeSizeInBits - 1;
      v42 = &v85;
    }
    *v42 &= ~(1 << v41);
    v43 = llvm::ScalarEvolution::getRangeRef(v1, v2, 1u, 0);
    llvm::ConstantRange::getSignedMin(v43, (llvm::APInt *)&v83);
    if (v84 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v83);
    }
    else
    {
      if (v84)
        v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
      else
        v44 = 0;
      v83 = v44 & ~v83;
    }
    llvm::APInt::operator++((uint64_t)&v83);
    v46 = v84;
    if (v84 >= 0x41)
    {
      v73 = 0;
      v74 = 0;
      v75 = v83;
      v18 = v85;
      v76 = ((unint64_t)v84 + 63) >> 6;
      do
      {
        v77 = *(_QWORD *)(v75 + v73);
        v78 = *(_QWORD *)(v18 + v73) + v77;
        v79 = v78 < v77;
        v80 = v78 + 1 <= v77;
        if (v74)
        {
          ++v78;
          v74 = v80;
        }
        else
        {
          v74 = v79;
        }
        *(_QWORD *)(v75 + v73) = v78;
        v73 += 8;
      }
      while (8 * v76 != v73);
      *(_QWORD *)(v83 + 8 * (v76 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
      v46 = v84;
      v48 = v83;
    }
    else
    {
      v18 = v85;
      if (v84)
        v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
      else
        v47 = 0;
      v48 = v47 & (v83 + v85);
      v83 = v48;
    }
    v88 = v46;
    v87 = v48;
    v84 = 0;
    v21 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)v1, (llvm::LLVMContext *)&v87, v45);
    v89 = v91;
    *(_DWORD *)v91 = 0;
    *(_QWORD *)&v91[4] = v21;
    v90 = 0x2000000003;
    v49 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v82 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v82 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v82;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v50 = __ROR8__(*(_QWORD *)&v91[4] + 12, 12);
    v51 = 0x9DDFEA08EB382D69 * (*(_QWORD *)v91 ^ qword_1ED7EAC80 ^ v50);
    v25 = *(_QWORD *)(v1 + 832)
        + 8
        * ((*(_DWORD *)(v1 + 840) - 1) & ((-348639895
                                         * ((((0x9DDFEA08EB382D69 * (v50 ^ (v51 >> 47) ^ v51)) >> 32) >> 15) ^ (-348639895 * (v50 ^ (v51 >> 47) ^ v51)))) ^ *(_DWORD *)&v91[4]));
    v26 = *(_QWORD *)v25;
    v92 = v94;
    v93 = 0x2000000000;
    if (v26)
      v52 = (v26 & 1) == 0;
    else
      v52 = 0;
    if (v52)
    {
      v53 = v90;
      v29 = v89;
      v54 = 4 * v90;
      while (*(_QWORD *)(v26 + 16) != v53 || memcmp(v29, *(const void **)(v26 + 8), v54))
      {
        LODWORD(v93) = 0;
        v26 = *(_QWORD *)v26;
        if (v26)
          v55 = (v26 & 1) == 0;
        else
          v55 = 0;
        if (!v55)
          goto LABEL_67;
      }
      goto LABEL_75;
    }
LABEL_67:
    v26 = sub_1C484358C(v1 + 864, 40, 3);
    v32 = sub_1C484358C(v1 + 864, 4 * v90, 2);
    if ((_DWORD)v90)
    {
      v56 = (int *)v89;
      v57 = 4 * v90;
      v58 = (_DWORD *)v32;
      do
      {
        v59 = *v56++;
        *v58++ = v59;
        v57 -= 4;
      }
      while (v57);
      goto LABEL_70;
    }
LABEL_88:
    v60 = 0;
    goto LABEL_71;
  }
  *v3 = 40;
  v86 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    v13 = &v85;
    llvm::APInt::initSlowCase((llvm::APInt *)&v85, 0, 0);
    v12 = IndexTypeSizeInBits - 1;
    if (v86 >= 0x41)
      v13 = (unint64_t *)(v85 + 8 * (v12 >> 6));
    IndexTypeSizeInBits = v86;
  }
  else
  {
    v85 = 0;
    LOBYTE(v12) = IndexTypeSizeInBits - 1;
    v13 = &v85;
  }
  *v13 |= 1 << v12;
  v14 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(v1, v2, 1u, 0);
  llvm::ConstantRange::getSignedMax(v14, (llvm::APInt *)&v83);
  if (v84 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v83);
  }
  else
  {
    if (v84)
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
    else
      v15 = 0;
    v83 = v15 & ~v83;
  }
  llvm::APInt::operator++((uint64_t)&v83);
  v17 = v84;
  if (v84 >= 0x41)
  {
    v65 = 0;
    v66 = 0;
    v67 = v83;
    v18 = v85;
    v68 = ((unint64_t)v84 + 63) >> 6;
    do
    {
      v69 = *(_QWORD *)(v67 + v65);
      v70 = *(_QWORD *)(v18 + v65) + v69;
      v71 = v70 < v69;
      v72 = v70 + 1 <= v69;
      if (v66)
      {
        ++v70;
        v66 = v72;
      }
      else
      {
        v66 = v71;
      }
      *(_QWORD *)(v67 + v65) = v70;
      v65 += 8;
    }
    while (8 * v68 != v65);
    *(_QWORD *)(v83 + 8 * (v68 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    v17 = v84;
    v20 = v83;
  }
  else
  {
    v18 = v85;
    if (v84)
      v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
    else
      v19 = 0;
    v20 = v19 & (v83 + v85);
    v83 = v20;
  }
  v88 = v17;
  v87 = v20;
  v84 = 0;
  v21 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)v1, (llvm::LLVMContext *)&v87, v16);
  v89 = v91;
  *(_DWORD *)v91 = 0;
  *(_QWORD *)&v91[4] = v21;
  v90 = 0x2000000003;
  v22 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v81 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v81 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v81;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v23 = 0x9DDFEA08EB382D69 * (*(_QWORD *)v91 ^ qword_1ED7EAC80 ^ __ROR8__(*(_QWORD *)&v91[4] + 12, 12));
  v24 = __ROR8__(*(_QWORD *)&v91[4] + 12, 12) ^ (v23 >> 47);
  v25 = *(_QWORD *)(v1 + 832)
      + 8
      * ((*(_DWORD *)(v1 + 840) - 1) & ((-348639895
                                       * ((((0x9DDFEA08EB382D69 * (v24 ^ v23)) >> 32) >> 15) ^ (-348639895 * (v24 ^ v23)))) ^ *(_DWORD *)&v91[4]));
  v26 = *(_QWORD *)v25;
  v92 = v94;
  v93 = 0x2000000000;
  if (v26)
    v27 = (v26 & 1) == 0;
  else
    v27 = 0;
  if (v27)
  {
    v28 = v90;
    v29 = v89;
    v30 = 4 * v90;
    while (*(_QWORD *)(v26 + 16) != v28 || memcmp(v29, *(const void **)(v26 + 8), v30))
    {
      LODWORD(v93) = 0;
      v26 = *(_QWORD *)v26;
      if (v26)
        v31 = (v26 & 1) == 0;
      else
        v31 = 0;
      if (!v31)
        goto LABEL_31;
    }
    goto LABEL_75;
  }
LABEL_31:
  v26 = sub_1C484358C(v1 + 864, 40, 3);
  v32 = sub_1C484358C(v1 + 864, 4 * v90, 2);
  if (!(_DWORD)v90)
    goto LABEL_88;
  v33 = (int *)v89;
  v34 = 4 * v90;
  v35 = (_DWORD *)v32;
  do
  {
    v36 = *v33++;
    *v35++ = v36;
    v34 -= 4;
  }
  while (v34);
LABEL_70:
  v60 = v90;
LABEL_71:
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = v32;
  *(_QWORD *)(v26 + 16) = v60;
  *(_DWORD *)(v26 + 24) = 0x10000;
  *(_WORD *)(v26 + 28) = 0;
  *(_QWORD *)(v26 + 32) = v21;
  v61 = *(_DWORD *)(v1 + 844) + 1;
  v62 = *(_DWORD *)(v1 + 840);
  if (v61 > 2 * v62)
  {
    llvm::FoldingSetBase::GrowBucketCount(v1 + 832, 2 * v62, (uint64_t)off_1E813B300);
    v92 = v94;
    v93 = 0x2000000000;
    v25 = *(_QWORD *)(v1 + 832)
        + 8
        * ((*(_DWORD *)(v1 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(v26 + 8), *(_QWORD *)(v26 + 8) + 4 * *(_QWORD *)(v26 + 16)));
    if (v92 != v94)
      free(v92);
    v61 = *(_DWORD *)(v1 + 844) + 1;
  }
  *(_DWORD *)(v1 + 844) = v61;
  v63 = *(_QWORD *)v25;
  if (!*(_QWORD *)v25)
    v63 = v25 | 1;
  *(_QWORD *)v26 = v63;
  *(_QWORD *)v25 = v26;
  v29 = v89;
LABEL_75:
  if (v29 != v91)
    free(v29);
  if (v88 >= 0x41 && v87)
    MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
  if (v84 >= 0x41 && v83)
    MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
  if (IndexTypeSizeInBits >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  return v26;
}

uint64_t llvm::ScalarEvolution::isKnownPositive(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t RangeRef;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  RangeRef = llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v5);
  result = sub_1C49591DC((llvm::APInt *)&v5);
  if (v6 >= 0x41)
  {
    if (v5)
    {
      v4 = result;
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
      return v4;
    }
  }
  return result;
}

void llvm::ScalarEvolution::createAddRecFromPHIWithCastsImpl(llvm::ScalarEvolution *this@<X0>, const llvm::SCEVUnknown *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  llvm::Value *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  llvm::Value *v23;
  int v24;
  unsigned int v25;
  uint64_t SCEVIter;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  llvm::ScalarEvolution *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::SCEV *AddExpr;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  llvm::Value *v47;
  int v48;
  unsigned int v49;
  const llvm::SCEV *v50;
  llvm::ScalarEvolution *v51;
  unint64_t TruncateExpr;
  unint64_t v53;
  unint64_t AddRecExpr;
  BOOL v55;
  unint64_t WrapPredicate;
  int v57;
  llvm::Value *v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[64];
  _QWORD *v65;
  uint64_t v66;
  _QWORD v67[5];

  v67[3] = *MEMORY[0x1E0C80C00];
  v65 = v67;
  v66 = 0x300000000;
  v3 = *((_QWORD *)a2 + 3);
  v4 = sub_1C4F1E710((_QWORD *)v3, **((_QWORD **)this + 5), *(_DWORD *)(*((_QWORD *)this + 5) + 16));
  v5 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
  if (!(_DWORD)v5)
    goto LABEL_52;
  v6 = v4;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v61 = 0;
  v10 = v4 + 56;
  v11 = 32 * v5;
  do
  {
    v12 = *(_DWORD *)(v3 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(_QWORD *)(v3 - 8);
    else
      v13 = v3 - 32 * (v12 & 0x7FFFFFF);
    v14 = *(llvm::Value **)(v13 + v8);
    v15 = sub_1C477672C(v10, *(_QWORD *)(v13 + 32 * *(unsigned int *)(v3 + 60) + v7));
    v16 = *(_QWORD *)(v6 + 64);
    if (v16 == *(_QWORD *)(v6 + 56))
      v17 = 76;
    else
      v17 = 72;
    if (v15 == (_QWORD *)(v16 + 8 * *(unsigned int *)(v6 + v17)))
    {
      if (v61)
      {
        if (v61 != v14)
          goto LABEL_52;
      }
      else
      {
        v61 = v14;
      }
    }
    else if (v9)
    {
      if (v9 != v14)
        goto LABEL_52;
    }
    else
    {
      v9 = v14;
    }
    v8 += 32;
    v7 += 8;
  }
  while (v11 != v8);
  if (!v9 || v61 == 0)
    goto LABEL_52;
  v19 = *((_QWORD *)this + 13);
  v20 = *((_DWORD *)this + 30);
  if (!v20)
    goto LABEL_29;
  v21 = (v20 - 1) & ((v9 >> 4) ^ (v9 >> 9));
  v22 = v19 + 48 * v21;
  v23 = *(llvm::Value **)(v22 + 24);
  if (v23 != v9)
  {
    v24 = 1;
    while (v23 != (llvm::Value *)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v22 = v19 + 48 * v21;
      v23 = *(llvm::Value **)(v22 + 24);
      if (v23 == v9)
        goto LABEL_30;
    }
LABEL_29:
    v22 = v19 + 48 * v20;
  }
LABEL_30:
  if (v22 == v19 + 48 * v20 || (SCEVIter = *(_QWORD *)(v22 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v9);
  if (SCEVIter)
    v27 = *(unsigned __int16 *)(SCEVIter + 24) == 4;
  else
    v27 = 0;
  if (!v27)
    goto LABEL_52;
  v28 = *(_QWORD *)(SCEVIter + 40);
  if ((_DWORD)v28)
  {
    v29 = 0;
    v30 = this;
    v31 = a2 ? (char *)a2 + 32 : 0;
    do
    {
      v32 = *(char **)(*(_QWORD *)(SCEVIter + 32) + 8 * v29);
      if (v31 != v32)
      {
        v33 = **((_QWORD **)a2 + 3);
        v34 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*(_BYTE *)(v33 + 8) == 15)
        {
          llvm::DataLayout::getIndexTypeSizeInBits(v34, v33);
        }
        else
        {
          sub_1C4768AD0(v34, v33);
          if ((_DWORD)v35 == 1)
        }
        __asm { BR              X10 }
      }
      ++v29;
    }
    while (v29 != *(_QWORD *)(SCEVIter + 40));
    v36 = *(_QWORD *)(SCEVIter + 40);
    v28 = *(_QWORD *)(SCEVIter + 40);
  }
  else
  {
    v36 = 0;
    v30 = this;
  }
  if (v28 == v36)
  {
LABEL_52:
    *a3 = 0;
    a3[48] = 0;
    goto LABEL_53;
  }
  v62 = v64;
  v63 = 0x800000000;
  if ((_DWORD)v28)
  {
    v37 = 0;
    v38 = 0;
    v39 = 8 * v28;
    do
    {
      if (8 * v36 != v37)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + v37);
        if (v38 >= HIDWORD(v63))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v38 + 1, 8);
          v38 = v63;
        }
        *((_QWORD *)v62 + v38) = v40;
        v38 = v63 + 1;
        LODWORD(v63) = v63 + 1;
      }
      v37 += 8;
    }
    while (v39 != v37);
  }
  AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(v30, &v62, 0, 0);
  if (llvm::ScalarEvolution::getLoopDisposition(v30, AddExpr, (const llvm::Loop *)v6) == 1)
  {
    v42 = *((_QWORD *)v30 + 13);
    v43 = *((_DWORD *)v30 + 30);
    if (v43)
    {
      v44 = v43 - 1;
      v45 = (v43 - 1) & ((v61 >> 4) ^ (v61 >> 9));
      v46 = v42 + 48 * v45;
      v47 = *(llvm::Value **)(v46 + 24);
      if (v47 == v61)
        goto LABEL_72;
      v48 = 1;
      while (v47 != (llvm::Value *)-4096)
      {
        v49 = v45 + v48++;
        v45 = v49 & v44;
        v46 = v42 + 48 * (v49 & v44);
        v47 = *(llvm::Value **)(v46 + 24);
        if (v47 == v61)
          goto LABEL_72;
      }
    }
    v46 = v42 + 48 * v43;
LABEL_72:
    if (v46 == v42 + 48 * v43 || (v50 = *(const llvm::SCEV **)(v46 + 40)) == 0)
      v50 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v30, v61);
    v51 = v30;
    TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(v30, v50, 0, 0);
    v53 = llvm::ScalarEvolution::getTruncateExpr(v51, AddExpr, 0, 0);
    AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v51, TruncateExpr, v53, (uint64_t **)v6);
    if (AddRecExpr)
      v55 = *(unsigned __int16 *)(AddRecExpr + 24) == 7;
    else
      v55 = 0;
    if (v55)
    {
      WrapPredicate = llvm::ScalarEvolution::getWrapPredicate((uint64_t)v51, AddRecExpr, 1);
      v57 = v66;
      if (v66 >= HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v66 + 1, 8);
        v57 = v66;
      }
      v65[v57] = WrapPredicate;
      LODWORD(v66) = v66 + 1;
      v51 = this;
    }
    llvm::ScalarEvolution::getTruncateExpr(v51, v50, 0, 0);
    __asm { BR              X11 }
  }
  *a3 = 0;
  a3[48] = 0;
  if (v62 != v64)
    free(v62);
LABEL_53:
  if (v65 != v67)
    free(v65);
}

uint64_t sub_1C4F1E710(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  if (*(_BYTE *)(*a1 + 8) != 13 || !a3)
    return 0;
  v3 = a1[5];
  v4 = ((v3 >> 4) ^ (v3 >> 9)) & (a3 - 1);
  v5 = *(_QWORD *)(a2 + 16 * v4);
  if (v3 != v5)
  {
    v6 = 1;
    while (v5 != -4096)
    {
      v7 = v4 + v6++;
      v4 = v7 & (a3 - 1);
      v5 = *(_QWORD *)(a2 + 16 * v4);
      if (v3 == v5)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v8 = *(_QWORD *)(a2 + 16 * v4 + 8);
  if (!v8)
    return 0;
  if (**(_QWORD **)(v8 + 32) == v3)
    return v8;
  else
    return 0;
}

void llvm::ScalarEvolution::createAddRecFromPHIWithCasts(llvm::ScalarEvolution *this@<X0>, const llvm::SCEVUnknown *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  const llvm::SCEVUnknown **v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  const llvm::SCEVUnknown *v13;
  char v14;
  uint64_t v15[2];
  char *v16;
  void *v17[2];
  _BYTE v18[24];
  void *v19;
  uint64_t v20;
  _BYTE v21[24];
  const llvm::SCEVUnknown **v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[24];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C4F1E710(*((_QWORD **)a2 + 3), **((_QWORD **)this + 5), *(_DWORD *)(*((_QWORD *)this + 5) + 16));
  if (!v6)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    return;
  }
  v7 = v6;
  v22 = 0;
  v8 = sub_1C4F5C768(*((_QWORD *)this + 123), *((_DWORD *)this + 250), (uint64_t)a2, v6, &v22);
  v9 = v22;
  if (v8)
    v10 = v22 == (const llvm::SCEVUnknown **)(*((_QWORD *)this + 123)
                                            + ((unint64_t)*((unsigned int *)this + 250) << 6));
  else
    v10 = 1;
  if (v10)
  {
    llvm::ScalarEvolution::createAddRecFromPHIWithCastsImpl(this, a2, &v22);
    if (v26)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 48) = 0;
      sub_1C61B2818(a3, (uint64_t)&v22);
    }
    else
    {
      v19 = v21;
      v20 = 0x300000000;
      v16 = (char *)a2 + 32;
      v17[0] = v18;
      v17[1] = (void *)0x300000000;
      v15[0] = (uint64_t)a2;
      v15[1] = v7;
      sub_1C4F5C664((uint64_t)this + 984, v15);
      *(_QWORD *)(v11 + 16) = v16;
      sub_1C4F54B2C(v11 + 24, (uint64_t)v17);
      if (v17[0] != v18)
        free(v17[0]);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 48) = 0;
      if (v19 != v21)
        free(v19);
    }
    if (v26)
    {
      v12 = v23;
      if (v23 != v25)
        goto LABEL_24;
    }
  }
  else
  {
    v13 = v22[2];
    v22 = (const llvm::SCEVUnknown **)v13;
    v23 = v25;
    v24 = 0x300000000;
    if (*((_DWORD *)v9 + 8))
    {
      sub_1C61B2738((uint64_t)&v23, (uint64_t)(v9 + 3));
      v13 = (const llvm::SCEVUnknown *)v22;
    }
    if (v13 == (const llvm::SCEVUnknown *)((char *)a2 + 32))
    {
      v14 = 0;
      *(_BYTE *)a3 = 0;
    }
    else
    {
      *(_QWORD *)a3 = v13;
      *(_QWORD *)(a3 + 8) = a3 + 24;
      *(_QWORD *)(a3 + 16) = 0x300000000;
      if ((_DWORD)v24)
        sub_1C4F54B2C(a3 + 8, (uint64_t)&v23);
      v14 = 1;
    }
    *(_BYTE *)(a3 + 48) = v14;
    v12 = v23;
    if (v23 != v25)
LABEL_24:
      free(v12);
  }
}

uint64_t sub_1C4F1E9CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t ComparePredicate;
  uint64_t v9;
  unint64_t v10;

  if (a2 == a3)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 104);
  ComparePredicate = llvm::ScalarEvolution::getComparePredicate(*(_QWORD *)(*a1 + 88), 32, a2, a3);
  if ((llvm::SCEVUnionPredicate::implies(v7, ComparePredicate) & 1) != 0)
    return 1;
  v9 = *(_QWORD *)(v6 + 104);
  v10 = llvm::ScalarEvolution::getComparePredicate(*(_QWORD *)(v6 + 88), 32, a3, a2);
  result = llvm::SCEVUnionPredicate::implies(v9, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::createSimpleAffineAddRec(llvm::ScalarEvolution *this, llvm::PHINode *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t **v17;
  BOOL v18;
  llvm::PHINode *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  llvm::Value *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  llvm::PHINode *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t SCEVIter;
  unsigned int v34;
  uint64_t v35;
  llvm::Value *v36;
  int v37;
  unsigned int v38;
  const llvm::SCEV *AddRecExpr;
  uint64_t v41;
  uint64_t AddExpr;
  int v43;
  llvm::PHINode *v44;
  llvm::Value *v45;
  char v46;
  void *v47[2];
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)*((_QWORD *)this + 5);
  v9 = *((_DWORD *)v8 + 4);
  if (v9)
  {
    v10 = *((_QWORD *)a2 + 5);
    v11 = *v8;
    v12 = v9 - 1;
    v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
    v14 = *(_QWORD *)(v11 + 16 * v13);
    if (v10 == v14)
    {
LABEL_6:
      v17 = *(uint64_t ***)(v11 + 16 * v13 + 8);
      goto LABEL_8;
    }
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v13 + v15++;
      v13 = v16 & v12;
      v14 = *(_QWORD *)(v11 + 16 * v13);
      if (v10 == v14)
        goto LABEL_6;
    }
  }
  v17 = 0;
LABEL_8:
  sub_1C4F1EE04((uint64_t)&v43, (uint64_t)a3, *((const llvm::APInt **)this + 4));
  if (v46)
    v18 = v43 == 13;
  else
    v18 = 0;
  if (!v18)
    return 0;
  if (v44 == a2 && llvm::Loop::isLoopInvariant((uint64_t)v17, (uint64_t)v45))
  {
    v19 = v45;
    v20 = *((_QWORD *)this + 13);
    v21 = *((_DWORD *)this + 30);
    if (v21)
    {
      v22 = ((v45 >> 4) ^ (v45 >> 9)) & (v21 - 1);
      v23 = v20 + 48 * v22;
      v24 = *(llvm::Value **)(v23 + 24);
      if (v24 == v45)
      {
LABEL_30:
        if (v23 == v20 + 48 * v21)
          goto LABEL_36;
        v32 = *(_QWORD *)(v23 + 40);
        if (!v32)
          goto LABEL_36;
        goto LABEL_38;
      }
      v25 = 1;
      while (v24 != (llvm::Value *)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v23 = v20 + 48 * v22;
        v24 = *(llvm::Value **)(v23 + 24);
        if (v24 == v45)
          goto LABEL_30;
      }
    }
    v23 = v20 + 48 * v21;
    goto LABEL_30;
  }
  if (v45 != a2 || !llvm::Loop::isLoopInvariant((uint64_t)v17, (uint64_t)v44))
    return 0;
  v19 = v44;
  v20 = *((_QWORD *)this + 13);
  v21 = *((_DWORD *)this + 30);
  if (!v21)
    goto LABEL_33;
  v27 = ((v44 >> 4) ^ (v44 >> 9)) & (v21 - 1);
  v28 = v20 + 48 * v27;
  v29 = *(llvm::PHINode **)(v28 + 24);
  if (v29 != v44)
  {
    v30 = 1;
    while (v29 != (llvm::PHINode *)-4096)
    {
      v31 = v27 + v30++;
      v27 = v31 & (v21 - 1);
      v28 = v20 + 48 * v27;
      v29 = *(llvm::PHINode **)(v28 + 24);
      if (v29 == v44)
        goto LABEL_34;
    }
LABEL_33:
    v28 = v20 + 48 * v21;
  }
LABEL_34:
  if (v28 == v20 + 48 * v21 || (v32 = *(_QWORD *)(v28 + 40)) == 0)
  {
LABEL_36:
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v19);
    if (SCEVIter)
    {
      v32 = SCEVIter;
      v20 = *((_QWORD *)this + 13);
      v21 = *((_DWORD *)this + 30);
      goto LABEL_38;
    }
    return 0;
  }
LABEL_38:
  if (v21)
  {
    v34 = (v21 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    v35 = v20 + 48 * v34;
    v36 = *(llvm::Value **)(v35 + 24);
    if (v36 == a4)
      goto LABEL_47;
    v37 = 1;
    while (v36 != (llvm::Value *)-4096)
    {
      v38 = v34 + v37++;
      v34 = v38 & (v21 - 1);
      v35 = v20 + 48 * v34;
      v36 = *(llvm::Value **)(v35 + 24);
      if (v36 == a4)
        goto LABEL_47;
    }
  }
  v35 = v20 + 48 * v21;
LABEL_47:
  if (v35 == v20 + 48 * v21 || (v41 = *(_QWORD *)(v35 + 40)) == 0)
    v41 = llvm::ScalarEvolution::createSCEVIter(this, a4);
  AddRecExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, v41, v32, v17);
  llvm::ScalarEvolution::insertValueToMap(this, a2, AddRecExpr);
  if (a3
    && *((unsigned __int8 *)a3 + 16) >= 0x1Cu
    && llvm::ScalarEvolution::isAddRecNeverPoison(this, a3, (const llvm::Loop *)v17))
  {
    v47[0] = v48;
    v48[0] = v41;
    v48[1] = v32;
    v47[1] = (void *)0x200000002;
    AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (uint64_t)v47, 0, 0);
    if (v47[0] != v48)
      free(v47[0]);
    llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, AddExpr, v32, v17);
  }
  return AddRecExpr;
}

uint64_t sub_1C4F1EE04(uint64_t result, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _BOOL4 v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD **v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  llvm::ConstantInt *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;

  v3 = result;
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = v4 - 28;
  v7 = v4 < 0x1C && v4 != 5;
  if (!a2 || v7)
    goto LABEL_72;
  if (v4 <= 0x1B)
    v5 = *(unsigned __int16 *)(a2 + 18);
  if (v5 > 25)
  {
    if (v5 <= 29)
    {
      if ((v5 - 27) >= 3)
      {
        if (v5 != 26)
          goto LABEL_65;
        v10 = *(_DWORD *)(a2 + 20);
        v11 = (v10 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v10 & 0x7FFFFFF);
        v18 = *(_QWORD *)(v11 + 32);
        if (v18)
        {
          if (*(_BYTE *)(v18 + 16) == 16)
          {
            v19 = *(unsigned int *)(*(_QWORD *)a2 + 8);
            v20 = v19 >> 8;
            v21 = (_QWORD **)(v18 + 24);
            v22 = *(_DWORD *)(v18 + 32);
            if (v22 >= 0x41)
            {
              if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v18 + 24)) >= 0x41)
                goto LABEL_84;
              v23 = (_QWORD *)**v21;
            }
            else
            {
              v23 = *v21;
            }
            if ((unint64_t)v23 < v20)
            {
              v27 = **(llvm::ConstantInt ***)v18;
              v47 = v19 >> 8;
              if (v19 >> 8 > 0x40)
              {
                v43 = (int)v23;
                llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
                LODWORD(v23) = v43;
                LODWORD(v20) = v47;
              }
              else
              {
                v46 = 0;
              }
              v28 = 1 << (char)v23;
              if (v20 > 0x40)
                *(_QWORD *)(v46 + 8 * (v23 >> 6)) |= v28;
              else
                v46 |= v28;
              result = (uint64_t)llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v46, a3);
              v29 = result;
              if (v47 >= 0x41)
              {
                result = v46;
                if (v46)
                  result = MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
              }
              v30 = *(_DWORD *)(a2 + 20);
              if ((v30 & 0x40000000) != 0)
                v31 = *(uint64_t **)(a2 - 8);
              else
                v31 = (uint64_t *)(a2 - 32 * (v30 & 0x7FFFFFF));
              v32 = *v31;
              *(_DWORD *)v3 = 19;
              *(_QWORD *)(v3 + 8) = v32;
              *(_QWORD *)(v3 + 16) = v29;
              goto LABEL_91;
            }
          }
        }
      }
LABEL_84:
      result = sub_1C4F54C64(v3, a2);
LABEL_85:
      v38 = 1;
      goto LABEL_86;
    }
    if (v5 != 30)
    {
      if (v5 == 64 && *(_DWORD *)(a2 + 72) == 1 && !**(_DWORD **)(a2 + 64))
      {
        v12 = *(_QWORD *)(a2 - 32);
        result = sub_1C4E8FD48(v12);
        if (v12 && (result & 1) != 0)
        {
          v13 = 13;
          v14 = *(_DWORD *)(*(_QWORD *)(v12 - 32) + 36) - 262;
          v15 = 0;
          if (((1 << (*(_BYTE *)(*(_QWORD *)(v12 - 32) + 36) - 6)) & 0xC000000003) == 0)
          {
            if (((1 << v14) & 0x6000000600000) != 0)
            {
              v15 = 0;
              v13 = 15;
            }
            else
            {
              v13 = 17;
              v15 = 1;
            }
          }
          if ((v15 & 1) == 0)
          {
            result = llvm::isOverflowIntrinsicNoWrap(v12, a3);
            if ((result & 1) != 0)
            {
              v39 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
              v40 = *v39;
              v41 = v39[4];
              *(_DWORD *)v3 = v13;
              *(_QWORD *)(v3 + 8) = v40;
              *(_QWORD *)(v3 + 16) = v41;
              *(_BYTE *)(v3 + 24) = (v14 < 0x17) & (0x610003u >> v14);
              *(_BYTE *)(v3 + 25) = !((v14 < 0x17) & (0x610003u >> v14));
LABEL_92:
              *(_QWORD *)(v3 + 32) = 0;
              goto LABEL_85;
            }
          }
          v42 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
          v35 = *v42;
          v36 = v42[4];
          *(_DWORD *)v3 = v13;
          goto LABEL_90;
        }
        v4 = *(unsigned __int8 *)(a2 + 16);
      }
      goto LABEL_65;
    }
    v16 = *(_DWORD *)(a2 + 20);
    if ((v16 & 0x40000000) != 0)
      v17 = *(_QWORD *)(a2 - 8);
    else
      v17 = a2 - 32 * (v16 & 0x7FFFFFF);
    v24 = *(_QWORD *)(v17 + 32);
    if (v24 && *(_BYTE *)(v24 + 16) == 16)
    {
      result = v24 + 24;
      v25 = *(_DWORD *)(v24 + 32);
      if (v25 > 0x40)
      {
        v44 = v25 - 1;
        if (((*(_QWORD *)(*(_QWORD *)result + 8 * ((v25 - 1) >> 6)) >> (v25 - 1)) & 1) != 0)
        {
          result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
          if ((_DWORD)result == v44)
          {
LABEL_47:
            if ((v16 & 0x40000000) == 0)
            {
              v26 = v16 & 0x7FFFFFF;
LABEL_83:
              v45 = (uint64_t *)(a2 - 32 * v26);
LABEL_88:
              v35 = *v45;
              v36 = v45[4];
              v37 = 13;
              goto LABEL_89;
            }
            goto LABEL_87;
          }
        }
      }
      else if (*(_QWORD *)result == 1 << (v25 - 1))
      {
        goto LABEL_47;
      }
    }
    if (*(_DWORD *)(*(_QWORD *)a2 + 8) != 269)
      goto LABEL_84;
    if ((v16 & 0x40000000) == 0)
    {
      v26 = v16 & 0x7FFFFFF;
      goto LABEL_83;
    }
LABEL_87:
    v45 = *(uint64_t **)(a2 - 8);
    goto LABEL_88;
  }
  if (v5 <= 18)
  {
    if (v5 != 13 && v5 != 15 && v5 != 17)
      goto LABEL_65;
    goto LABEL_84;
  }
  if (v5 == 19 || v5 == 22 || v5 == 25)
    goto LABEL_84;
LABEL_65:
  if (v4 == 84)
  {
    v33 = *(_QWORD *)(a2 - 32);
    if (v33)
    {
      if (!*(_BYTE *)(v33 + 16)
        && *(_QWORD *)(v33 + 24) == *(_QWORD *)(a2 + 72)
        && (*(_BYTE *)(v33 + 33) & 0x20) != 0
        && *(_DWORD *)(v33 + 36) == 179)
      {
        v34 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v35 = *v34;
        v36 = v34[4];
        v37 = 15;
LABEL_89:
        *(_DWORD *)v3 = v37;
LABEL_90:
        *(_QWORD *)(v3 + 8) = v35;
        *(_QWORD *)(v3 + 16) = v36;
LABEL_91:
        *(_WORD *)(v3 + 24) = 0;
        goto LABEL_92;
      }
    }
  }
LABEL_72:
  v38 = 0;
  *(_BYTE *)v3 = 0;
LABEL_86:
  *(_BYTE *)(v3 + 40) = v38;
  return result;
}

uint64_t llvm::ScalarEvolution::isAddRecNeverPoison(llvm::ScalarEvolution *this, const llvm::Instruction *a2, const llvm::Loop *a3)
{
  uint64_t v6;
  uint64_t ExitingBlock;
  uint64_t LoopLatch;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[128];
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x1E0C80C00];
  if (llvm::ScalarEvolution::isSCEVExprNeverPoison(this, a2))
    return 1;
  ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a3);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a3);
  v6 = 0;
  if (ExitingBlock && LoopLatch && ExitingBlock == LoopLatch)
  {
    v19 = v23;
    v20 = v23;
    v21 = 16;
    v22 = 0;
    v24 = v26;
    v25 = 0x800000000;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, (uint64_t)a2);
    v9 = v25;
    if (v25 >= HIDWORD(v25))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
      v9 = v25;
    }
    v24[v9] = a2;
    v10 = __CFADD__((_DWORD)v25, 1);
    v11 = v25 + 1;
    LODWORD(v25) = v25 + 1;
    if (!v10)
    {
      do
      {
        v12 = v24[--v11];
        LODWORD(v25) = v11;
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          while (1)
          {
            v14 = *(_QWORD *)(v13 + 24);
            if (llvm::propagatesPoison(v13))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, v14);
              if (v15)
              {
                v16 = v25;
                if (v25 >= (unint64_t)HIDWORD(v25))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
                  v16 = v25;
                }
                v24[v16] = v14;
                LODWORD(v25) = v25 + 1;
              }
            }
            else
            {
              v17 = *(_BYTE *)(v14 + 16) != 30 || v14 == 0;
              if (!v17 && *(_QWORD *)(v14 + 40) == ExitingBlock)
              {
                v6 = llvm::ScalarEvolution::getLoopProperties(this, a3) & 1;
LABEL_27:
                if (v24 != v26)
                  free(v24);
                if (v20 != v19)
                  free(v20);
                return v6;
              }
            }
            v13 = *(_QWORD *)(v13 + 8);
            if (!v13)
            {
              v11 = v25;
              break;
            }
          }
        }
      }
      while (v11);
    }
    v6 = 0;
    goto LABEL_27;
  }
  return v6;
}

const llvm::SCEV *llvm::ScalarEvolution::createAddRecFromPHI(int32x2_t *this, llvm::PHINode *a2)
{
  int32x2_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  const llvm::SCEV *SimpleAffineAddRec;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  llvm::Value *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  const llvm::SCEV *Unknown;
  int32x2_t v28;
  unsigned __int32 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t SCEVIter;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  const llvm::SCEV *v39;
  uint64_t v41;
  int32x2_t v42;
  unsigned __int32 v43;
  unsigned int v44;
  uint64_t v45;
  llvm::Value *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::ScalarEvolution *v53;
  uint64_t v54;
  uint64_t LoopLatch;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t AddExpr;
  llvm::Value *v65;
  char v66;
  int v67;
  int v68;
  llvm::PHINode **v69;
  int32x2_t v70;
  unsigned __int32 v71;
  unsigned int v72;
  uint64_t v73;
  llvm::PHINode *v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  const llvm::SCEV *v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  llvm::Value *v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  llvm::Value *v95;
  const llvm::SCEV *v96;
  int32x2_t *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v2 = this[5];
  v3 = *(_DWORD *)(*(_QWORD *)&v2 + 16);
  if (!v3)
    return 0;
  v5 = *((_QWORD *)a2 + 5);
  v6 = **(_QWORD **)&v2;
  v7 = v3 - 1;
  v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
  v9 = *(_QWORD *)(v6 + 16 * v8);
  if (v5 != v9)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(_QWORD *)(v6 + 16 * v8);
      if (v5 == v9)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v12 = *(_QWORD *)(v6 + 16 * v8 + 8);
  if (!v12)
    return 0;
  if (**(_QWORD **)(v12 + 32) != v5)
    return 0;
  v15 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  if (!(_DWORD)v15)
    return 0;
  v95 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 32 * v15;
  do
  {
    v20 = *((_DWORD *)a2 + 5);
    if ((v20 & 0x40000000) != 0)
      v21 = (char *)*((_QWORD *)a2 - 1);
    else
      v21 = (char *)a2 - 32 * (v20 & 0x7FFFFFF);
    v22 = *(llvm::Value **)&v21[v17];
    v23 = sub_1C477672C(v12 + 56, *(_QWORD *)&v21[32 * *((unsigned int *)a2 + 15) + v16]);
    v24 = *(_QWORD *)(v12 + 64);
    if (v24 == *(_QWORD *)(v12 + 56))
      v25 = 76;
    else
      v25 = 72;
    if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)(v12 + v25)))
    {
      if (v95)
      {
        if (v95 != v22)
          return 0;
      }
      else
      {
        v95 = v22;
      }
    }
    else if (v18)
    {
      if ((llvm::Value *)v18 != v22)
        return 0;
    }
    else
    {
      v18 = (uint64_t)v22;
    }
    v17 += 32;
    v16 += 8;
  }
  while (v19 != v17);
  if (!v18 || v95 == 0)
    return 0;
  SimpleAffineAddRec = llvm::ScalarEvolution::createSimpleAffineAddRec((llvm::ScalarEvolution *)this, a2, (llvm::Value *)v18, v95);
  if (SimpleAffineAddRec)
    return SimpleAffineAddRec;
  Unknown = (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
  v96 = Unknown;
  llvm::ScalarEvolution::insertValueToMap(this, a2, Unknown);
  v28 = this[13];
  v29 = this[15].u32[0];
  if (!v29)
    goto LABEL_39;
  v30 = (v29 - 1) & ((v18 >> 4) ^ (v18 >> 9));
  v31 = *(_QWORD *)&v28 + 48 * v30;
  v32 = *(_QWORD *)(v31 + 24);
  if (v32 != v18)
  {
    v33 = 1;
    while (v32 != -4096)
    {
      v34 = v30 + v33++;
      v30 = v34 & (v29 - 1);
      v31 = *(_QWORD *)&v28 + 48 * v30;
      v32 = *(_QWORD *)(v31 + 24);
      if (v32 == v18)
        goto LABEL_40;
    }
LABEL_39:
    v31 = *(_QWORD *)&v28 + 48 * v29;
  }
LABEL_40:
  if (v31 == *(_QWORD *)&v28 + 48 * v29 || (SCEVIter = *(_QWORD *)(v31 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, (llvm::Value *)v18);
  if (SCEVIter)
    v36 = *(unsigned __int16 *)(SCEVIter + 24) == 4;
  else
    v36 = 0;
  if (!v36)
  {
    v105 = 0;
    v106 = 0;
    v104 = this;
    v107 = 0;
    v108 = v12;
    v109 = 1;
    v37 = sub_1C4F557B4((uint64_t)&v104, SCEVIter);
    if (v109)
      SimpleAffineAddRec = (const llvm::SCEV *)v37;
    else
      SimpleAffineAddRec = (const llvm::SCEV *)this[6];
    MEMORY[0x1CAA32FB4](v105, 8);
    v38 = sub_1C4F1FD74((uint64_t)SimpleAffineAddRec, v12, (uint64_t)this, 0);
    v39 = (const llvm::SCEV *)this[6];
    if (SimpleAffineAddRec != v39 && v38 != (_QWORD)v39)
    {
      v41 = v38;
      v42 = this[13];
      v43 = this[15].u32[0];
      if (v43)
      {
        v44 = (v43 - 1) & ((v95 >> 4) ^ (v95 >> 9));
        v45 = *(_QWORD *)&v42 + 48 * v44;
        v46 = *(llvm::Value **)(v45 + 24);
        if (v46 == v95)
        {
LABEL_92:
          if (v45 == *(_QWORD *)&v42 + 48 * v43 || (v63 = *(_QWORD *)(v45 + 40)) == 0)
            v63 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v95);
          if (v41 == v63)
          {
            llvm::ScalarEvolution::forgetMemoizedResults(this, (uint64_t *)&v96, 1);
            llvm::ScalarEvolution::insertValueToMap(this, a2, SimpleAffineAddRec);
            return SimpleAffineAddRec;
          }
          goto LABEL_153;
        }
        v47 = 1;
        while (v46 != (llvm::Value *)-4096)
        {
          v48 = v44 + v47++;
          v44 = v48 & (v43 - 1);
          v45 = *(_QWORD *)&v42 + 48 * v44;
          v46 = *(llvm::Value **)(v45 + 24);
          if (v46 == v95)
            goto LABEL_92;
        }
      }
      v45 = *(_QWORD *)&v42 + 48 * v43;
      goto LABEL_92;
    }
LABEL_153:
    llvm::ScalarEvolution::eraseValueFromMap((llvm::ScalarEvolution *)this, a2);
    return 0;
  }
  v49 = *(_QWORD *)(SCEVIter + 40);
  v50 = v49;
  if ((_DWORD)v49)
  {
    v51 = 0;
    while (*(const llvm::SCEV **)(*(_QWORD *)(SCEVIter + 32) + 8 * v51) != Unknown)
    {
      if (v49 == ++v51)
      {
        v51 = *(_QWORD *)(SCEVIter + 40);
        break;
      }
    }
    if (v49 == v51)
      goto LABEL_153;
    v52 = 0;
    v104 = &v106;
    v105 = 0x800000000;
    v53 = (llvm::ScalarEvolution *)this;
    while (v51 == v52)
    {
LABEL_87:
      if (v50 == ++v52)
        goto LABEL_97;
    }
    v54 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8 * v52);
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v12);
    if (LoopLatch)
    {
      v56 = *(_QWORD *)(LoopLatch + 40);
      if (v56)
        v57 = v56 - 24;
      else
        v57 = 0;
      v58 = *(unsigned __int8 *)(v57 + 16) - 40;
      if (v58 < 0xFFFFFFF5)
        v57 = 0;
      if (!v56)
        goto LABEL_84;
      v59 = *(_BYTE *)(v57 + 16) == 30 && v58 >= 0xFFFFFFF5;
      if (!v59 || (*(_DWORD *)(v57 + 20) & 0x7FFFFFF) != 3)
        goto LABEL_84;
      v60 = *(_QWORD *)(v57 - 96);
      v61 = *(_QWORD *)(v57 - 32) == **(_QWORD **)(v12 + 32);
    }
    else
    {
      v61 = 0;
      v60 = 0;
    }
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v97 = this;
    v101 = v12;
    v102 = v60;
    v103 = v61;
    v54 = sub_1C4F54D24((uint64_t)&v97, v54);
    MEMORY[0x1CAA32FB4](v98, 8);
LABEL_84:
    v62 = v105;
    if (v105 >= (unint64_t)HIDWORD(v105))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)&v106, v105 + 1, 8);
      v62 = v105;
    }
    *((_QWORD *)v104 + v62) = v54;
    LODWORD(v105) = v105 + 1;
    goto LABEL_87;
  }
  if (!v49)
    goto LABEL_153;
  v104 = &v106;
  v105 = 0x800000000;
  v53 = (llvm::ScalarEvolution *)this;
LABEL_97:
  AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v53, (uint64_t)&v104, 0, 0);
  v65 = v95;
  if (llvm::ScalarEvolution::getLoopDisposition(v53, (const llvm::SCEV *)AddExpr, (const llvm::Loop *)v12) != 1&& (*(_WORD *)(AddExpr + 24) != 7 || *(_QWORD *)(AddExpr + 48) != v12))
  {
    SimpleAffineAddRec = 0;
    v66 = 1;
    goto LABEL_150;
  }
  sub_1C4F1EE04((uint64_t)&v97, v18, *((const llvm::APInt **)v53 + 4));
  if (!(_BYTE)v102)
  {
    v67 = *(unsigned __int8 *)(v18 + 16);
    if ((v67 == 62 || v67 == 5 && *(_WORD *)(v18 + 18) == 34) && (*(_BYTE *)(v18 + 17) & 2) != 0)
    {
      v68 = *(_DWORD *)(v18 + 20);
      if ((v68 & 0x40000000) != 0)
        v69 = *(llvm::PHINode ***)(v18 - 8);
      else
        v69 = (llvm::PHINode **)(v18 - 32 * (v68 & 0x7FFFFFF));
      if (*v69 != a2)
      {
        v53 = (llvm::ScalarEvolution *)this;
LABEL_134:
        v65 = v95;
        goto LABEL_135;
      }
      v70 = this[13];
      v71 = this[15].u32[0];
      if (v71)
      {
        v72 = (v71 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v73 = *(_QWORD *)&v70 + 48 * v72;
        v74 = *(llvm::PHINode **)(v73 + 24);
        if (v74 == a2)
        {
LABEL_120:
          if (v73 == *(_QWORD *)&v70 + 48 * v71 || (v77 = *(_QWORD *)(v73 + 40)) == 0)
          {
            v77 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, a2);
            v70 = this[13];
            v71 = this[15].u32[0];
          }
          if (v71)
          {
            v78 = (v71 - 1) & ((v18 >> 4) ^ (v18 >> 9));
            v79 = *(_QWORD *)&v70 + 48 * v78;
            v80 = *(_QWORD *)(v79 + 24);
            if (v80 == v18)
              goto LABEL_130;
            v81 = 1;
            while (v80 != -4096)
            {
              v82 = v78 + v81++;
              v78 = v82 & (v71 - 1);
              v79 = *(_QWORD *)&v70 + 48 * v78;
              v80 = *(_QWORD *)(v79 + 24);
              if (v80 == v18)
                goto LABEL_130;
            }
          }
          v79 = *(_QWORD *)&v70 + 48 * v71;
LABEL_130:
          if (v79 == *(_QWORD *)&v70 + 48 * v71 || (v83 = *(_QWORD *)(v79 + 40)) == 0)
            v83 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, (llvm::Value *)v18);
          v53 = (llvm::ScalarEvolution *)this;
          llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, v83, v77);
          llvm::ScalarEvolution::isKnownPositive((llvm::ScalarEvolution *)this, v84);
          goto LABEL_134;
        }
        v75 = 1;
        while (v74 != (llvm::PHINode *)-4096)
        {
          v76 = v72 + v75++;
          v72 = v76 & (v71 - 1);
          v73 = *(_QWORD *)&v70 + 48 * v72;
          v74 = *(llvm::PHINode **)(v73 + 24);
          if (v74 == a2)
            goto LABEL_120;
        }
      }
      v73 = *(_QWORD *)&v70 + 48 * v71;
      goto LABEL_120;
    }
  }
LABEL_135:
  v85 = *((_QWORD *)v53 + 13);
  v86 = *((_DWORD *)v53 + 30);
  if (v86)
  {
    v87 = (v86 - 1) & ((v65 >> 4) ^ (v65 >> 9));
    v88 = v85 + 48 * v87;
    v89 = *(llvm::Value **)(v88 + 24);
    if (v89 == v65)
      goto LABEL_142;
    v90 = 1;
    while (v89 != (llvm::Value *)-4096)
    {
      v91 = v87 + v90++;
      v87 = v91 & (v86 - 1);
      v88 = v85 + 48 * v87;
      v89 = *(llvm::Value **)(v88 + 24);
      if (v89 == v65)
        goto LABEL_142;
    }
  }
  v88 = v85 + 48 * v86;
LABEL_142:
  if (v88 == v85 + 48 * v86 || (v92 = *(_QWORD *)(v88 + 40)) == 0)
    v92 = llvm::ScalarEvolution::createSCEVIter(v53, v65);
  SimpleAffineAddRec = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v53, v92, AddExpr, (uint64_t **)v12);
  llvm::ScalarEvolution::forgetMemoizedResults((int32x2_t *)v53, (uint64_t *)&v96, 1);
  llvm::ScalarEvolution::insertValueToMap(v53, a2, SimpleAffineAddRec);
  if (*(unsigned __int8 *)(v18 + 16) >= 0x1Cu
    && llvm::ScalarEvolution::getLoopDisposition(v53, (const llvm::SCEV *)AddExpr, (const llvm::Loop *)v12) == 1&& llvm::ScalarEvolution::isAddRecNeverPoison(v53, (const llvm::Instruction *)v18, (const llvm::Loop *)v12))
  {
    v93 = sub_1C4E0AF14((uint64_t)v53, v92, AddExpr, 0, 0);
    llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v53, v93, AddExpr, (uint64_t **)v12);
  }
  v66 = 0;
LABEL_150:
  if (v104 != &v106)
    free(v104);
  if ((v66 & 1) != 0)
    goto LABEL_153;
  return SimpleAffineAddRec;
}

uint64_t sub_1C4F1FD74(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;

  v10 = 0;
  v11 = 0;
  v9 = a3;
  v12 = 0;
  v13 = a2;
  v14 = 0;
  v6 = sub_1C4F56068((uint64_t)&v9, a1);
  if ((_BYTE)v14 || (v7 = v6, HIBYTE(v14)) && (a4 & 1) == 0)
    v7 = *(_QWORD *)(a3 + 48);
  MEMORY[0x1CAA32FB4](v10, 8);
  return v7;
}

uint64_t llvm::ScalarEvolution::createNodeFromSelectLikePHI(llvm::ScalarEvolution *this, llvm::PHINode *a2)
{
  int v2;
  char *v5;
  char v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  llvm::Value **v48;
  llvm::Value **v49;
  BOOL v50;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  llvm::Value *v58;
  int v59;
  unsigned int v60;
  llvm::Value *v61;
  uint64_t SCEVIter;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  llvm::Value *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  _QWORD v74[2];
  _QWORD v75[2];

  v2 = *((_DWORD *)a2 + 5);
  if ((v2 & 0x7FFFFFF) != 2)
    return 0;
  if ((v2 & 0x40000000) != 0)
    v5 = (char *)*((_QWORD *)a2 - 1);
  else
    v5 = (char *)a2 - 64;
  v6 = 0;
  v7 = 0;
  v8 = &v5[32 * *((unsigned int *)a2 + 15)];
  do
  {
    v9 = v6;
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 4), *(_QWORD *)&v8[8 * v7]))return 0;
    v6 = 1;
    v7 = 1;
  }
  while ((v9 & 1) == 0);
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  v11 = *((_QWORD *)a2 + 5);
  v12 = *v10;
  v13 = *((_DWORD *)v10 + 4);
  v14 = v11 >> 4;
  if (v13)
  {
    v15 = (v14 ^ (v11 >> 9)) & (v13 - 1);
    v16 = *(_QWORD *)(v12 + 16 * v15);
    if (v11 == v16)
    {
LABEL_13:
      v19 = *(_QWORD *)(v12 + 16 * v15 + 8);
      goto LABEL_15;
    }
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v15 + v17++;
      v15 = v18 & (v13 - 1);
      v16 = *(_QWORD *)(v12 + 16 * v15);
      if (v11 == v16)
        goto LABEL_13;
    }
  }
  v19 = 0;
LABEL_15:
  v20 = *((_DWORD *)a2 + 5);
  v21 = v20 & 0x7FFFFFF;
  if ((v20 & 0x7FFFFFF) != 0)
  {
    v22 = 0;
    v23 = v13 - 1;
    while (1)
    {
      v24 = (char *)a2 - 32 * v21;
      if ((v20 & 0x40000000) != 0)
        v24 = (char *)*((_QWORD *)a2 - 1);
      if (!v13)
        goto LABEL_25;
      v25 = *(_QWORD *)&v24[32 * *((unsigned int *)a2 + 15) + 8 * v22];
      v26 = ((v25 >> 4) ^ (v25 >> 9)) & v23;
      v27 = *(_QWORD *)(v12 + 16 * v26);
      if (v25 != v27)
        break;
LABEL_24:
      v30 = *(_QWORD *)(v12 + 16 * v26 + 8);
LABEL_26:
      if (v30 != v19)
        return 0;
      if (++v22 == v21)
        goto LABEL_28;
    }
    v28 = 1;
    while (v27 != -4096)
    {
      v29 = v26 + v28++;
      v26 = v29 & v23;
      v27 = *(_QWORD *)(v12 + 16 * v26);
      if (v25 == v27)
        goto LABEL_24;
    }
LABEL_25:
    v30 = 0;
    goto LABEL_26;
  }
LABEL_28:
  v31 = *((_QWORD *)this + 4);
  v32 = *(_QWORD *)(v31 + 24);
  v33 = *(unsigned int *)(v31 + 40);
  if (!(_DWORD)v33)
    goto LABEL_34;
  LODWORD(v34) = (v33 - 1) & (v14 ^ (v11 >> 9));
  v35 = (uint64_t *)(v32 + 16 * v34);
  v36 = *v35;
  if (v11 != *v35)
  {
    v37 = 1;
    while (v36 != -4096)
    {
      v38 = v34 + v37++;
      v34 = v38 & (v33 - 1);
      v36 = *(_QWORD *)(v32 + 16 * v34);
      if (v11 == v36)
      {
        v35 = (uint64_t *)(v32 + 16 * v34);
        goto LABEL_35;
      }
    }
LABEL_34:
    v35 = (uint64_t *)(v32 + 16 * v33);
  }
LABEL_35:
  v39 = **(_QWORD **)(v35[1] + 8);
  v40 = *(_QWORD *)(v39 + 40);
  if (v40 == v39 + 40)
    return 0;
  v41 = v40 - 24;
  if (!v40)
    v41 = 0;
  v42 = *(unsigned __int8 *)(v41 + 16) - 40;
  if (v42 < 0xFFFFFFF5)
    v41 = 0;
  if (!v40)
    return 0;
  if (*(_BYTE *)(v41 + 16) != 30 || v42 < 0xFFFFFFF5)
    return 0;
  if ((*(_DWORD *)(v41 + 20) & 0x7FFFFFF) != 3)
    return 0;
  v44 = *(llvm::Value **)(v41 - 96);
  v45 = *(_QWORD *)(v41 - 32);
  v75[0] = *(_QWORD *)(v41 + 40);
  v75[1] = v45;
  v46 = *(_QWORD *)(v41 - 64);
  v74[0] = v75[0];
  v74[1] = v46;
  if (!llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)v75))
    return 0;
  v47 = *((_DWORD *)a2 + 5);
  if ((v47 & 0x40000000) != 0)
    v48 = (llvm::Value **)*((_QWORD *)a2 - 1);
  else
    v48 = (llvm::Value **)((char *)a2 - 32 * (v47 & 0x7FFFFFF));
  if (llvm::DominatorTree::dominates((llvm::DominatorTree *)v31, (const llvm::BasicBlockEdge *)v75, (const llvm::Use *)v48)&& llvm::DominatorTree::dominates((llvm::DominatorTree *)v31, (const llvm::BasicBlockEdge *)v74, (const llvm::Use *)(v48 + 4)))
  {
    v49 = v48;
    v48 += 4;
  }
  else
  {
    if (!llvm::DominatorTree::dominates((llvm::DominatorTree *)v31, (const llvm::BasicBlockEdge *)v75, (const llvm::Use *)(v48 + 4)))return 0;
    v50 = llvm::DominatorTree::dominates((llvm::DominatorTree *)v31, (const llvm::BasicBlockEdge *)v74, (const llvm::Use *)v48);
    v49 = v48 + 4;
    if (!v50)
      return 0;
  }
  v51 = *v49;
  v52 = *((_QWORD *)this + 4);
  v53 = *((_QWORD *)this + 13);
  v54 = *((_DWORD *)this + 30);
  if (!v54)
    goto LABEL_62;
  v55 = v54 - 1;
  v56 = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
  v57 = v53 + 48 * v56;
  v58 = *(llvm::Value **)(v57 + 24);
  if (v58 != v51)
  {
    v59 = 1;
    while (v58 != (llvm::Value *)-4096)
    {
      v60 = v56 + v59++;
      v56 = v60 & v55;
      v57 = v53 + 48 * (v60 & v55);
      v58 = *(llvm::Value **)(v57 + 24);
      if (v58 == v51)
        goto LABEL_63;
    }
LABEL_62:
    v57 = v53 + 48 * v54;
  }
LABEL_63:
  v61 = *v48;
  if (v57 == v53 + 48 * v54 || (SCEVIter = *(_QWORD *)(v57 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v51);
  if (!sub_1C4F20268(v19, v52, SCEVIter, *((_QWORD *)a2 + 5)))
    return 0;
  v63 = *((_QWORD *)this + 4);
  v64 = *((_QWORD *)this + 13);
  v65 = *((_DWORD *)this + 30);
  if (!v65)
    goto LABEL_73;
  v66 = v65 - 1;
  v67 = (v65 - 1) & ((v61 >> 4) ^ (v61 >> 9));
  v68 = v64 + 48 * v67;
  v69 = *(llvm::Value **)(v68 + 24);
  if (v69 != v61)
  {
    v70 = 1;
    while (v69 != (llvm::Value *)-4096)
    {
      v71 = v67 + v70++;
      v67 = v71 & v66;
      v68 = v64 + 48 * (v71 & v66);
      v69 = *(llvm::Value **)(v68 + 24);
      if (v69 == v61)
        goto LABEL_74;
    }
LABEL_73:
    v68 = v64 + 48 * v65;
  }
LABEL_74:
  if (v68 == v64 + 48 * v65 || (v72 = *(_QWORD *)(v68 + 40)) == 0)
    v72 = llvm::ScalarEvolution::createSCEVIter(this, v61);
  if (sub_1C4F20268(v19, v63, v72, *((_QWORD *)a2 + 5)))
    return llvm::ScalarEvolution::createNodeForSelectOrPHI(this, a2, v44, v51, v61);
  return 0;
}

BOOL sub_1C4F20268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[64];
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v7 = 256;
  v8 = a1;
  v9 = a4;
  v10 = a2;
  v11 = &v7;
  v12 = v14;
  v13 = 0x800000000;
  v15 = v19;
  v16 = v19;
  v17 = 8;
  v18 = 0;
  sub_1C4F56908((uint64_t)&v11, a3);
  if ((_DWORD)v13 && !*(_BYTE *)v11)
  {
    v4 = *((_QWORD *)v12 + v13 - 1);
    LODWORD(v13) = v13 - 1;
    __asm { BR              X10 }
  }
  v5 = HIBYTE(v7);
  if (v16 != v15)
    free(v16);
  if (v12 != v14)
    free(v12);
  return v5 != 0;
}

uint64_t llvm::ScalarEvolution::createNodeForSelectOrPHI(llvm::ScalarEvolution *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  int v10;
  llvm::APInt *v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  uint64_t result;
  llvm::Value *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  llvm::Value *v23;
  int v24;
  unsigned int v25;

  v10 = *((unsigned __int8 *)a3 + 16);
  if (a3 && v10 == 16)
  {
    v11 = (llvm::Value *)((char *)a3 + 24);
    v12 = *((_DWORD *)a3 + 8);
    if (v12 > 0x40)
      v13 = llvm::APInt::countLeadingZerosSlowCase(v11) == v12 - 1;
    else
      v13 = *(_QWORD *)v11 == 1;
    if (v13)
      v18 = a4;
    else
      v18 = a5;
    v19 = *((_QWORD *)this + 13);
    v20 = *((_DWORD *)this + 30);
    if (v20)
    {
      v21 = ((v18 >> 4) ^ (v18 >> 9)) & (v20 - 1);
      v22 = v19 + 48 * v21;
      v23 = *(llvm::Value **)(v22 + 24);
      if (v23 == v18)
      {
LABEL_30:
        if (v22 == v19 + 48 * v20)
          return llvm::ScalarEvolution::createSCEVIter(this, v18);
        result = *(_QWORD *)(v22 + 40);
        if (!result)
          return llvm::ScalarEvolution::createSCEVIter(this, v18);
        return result;
      }
      v24 = 1;
      while (v23 != (llvm::Value *)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v22 = v19 + 48 * v21;
        v23 = *(llvm::Value **)(v22 + 24);
        if (v23 == v18)
          goto LABEL_30;
      }
    }
    v22 = v19 + 48 * v20;
    goto LABEL_30;
  }
  if (!a3)
    return llvm::ScalarEvolution::createNodeForSelectOrPHIViaUMinSeq(this, a2, a3, a4, a5);
  v14 = v10 != 81 || a2 == 0;
  if (v14 || *((unsigned __int8 *)a2 + 16) < 0x1Cu)
    return llvm::ScalarEvolution::createNodeForSelectOrPHIViaUMinSeq(this, a2, a3, a4, a5);
  result = llvm::ScalarEvolution::createNodeForSelectOrPHIInstWithICmpInstCond(this, a2, (uint64_t)a3, a4, a5);
  if (*(_WORD *)(result + 24) == 14)
    return llvm::ScalarEvolution::createNodeForSelectOrPHIViaUMinSeq(this, a2, a3, a4, a5);
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::createNodeForPHI(llvm::ScalarEvolution *this, llvm::PHINode *a2)
{
  const llvm::SCEV *result;
  llvm::Type *v5;
  llvm::DSOLocalEquivalent **v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  llvm::UndefValue *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  llvm::UndefValue *v23;
  int v24;
  unsigned int v25;
  _QWORD v26[2];
  int8x16_t v27;
  uint64_t v28;
  __int16 v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[9];

  v32[8] = *MEMORY[0x1E0C80C00];
  result = llvm::ScalarEvolution::createAddRecFromPHI((int32x2_t *)this, a2);
  if (result)
    return result;
  result = (const llvm::SCEV *)llvm::ScalarEvolution::createNodeFromSelectLikePHI(this, a2);
  if (result)
    return result;
  v7 = *((_QWORD *)this + 2);
  v26[0] = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
  v26[1] = v7;
  v27 = vextq_s8(*(int8x16_t *)((char *)this + 24), *(int8x16_t *)((char *)this + 24), 8uLL);
  v28 = 0;
  v29 = 257;
  v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 - 1);
    v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    v9 = v8 & 0x7FFFFFF;
    v10 = (uint64_t *)((char *)a2 - 32 * v9);
  }
  v30 = v32;
  v31 = 0x800000000;
  if (v9 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v9, 8);
    v11 = v31;
    v13 = v30;
    v12 = v31;
  }
  else
  {
    v11 = 0;
    if (!v9)
    {
      v17 = v32;
      goto LABEL_12;
    }
    v12 = 0;
    v13 = v32;
  }
  v14 = 32 * v9;
  v15 = &v13[v12];
  do
  {
    v16 = *v10;
    v10 += 4;
    *v15++ = v16;
    v14 -= 32;
  }
  while (v14);
  v17 = v30;
LABEL_12:
  LODWORD(v31) = v11 + v9;
  v18 = llvm::SimplifyInstructionWithOperands(a2, (uint64_t)v17, (v11 + v9), (uint64_t)v26, v5, v6);
  if (v30 != v32)
    free(v30);
  if (!v18 || !sub_1C4F20780(*((uint64_t **)this + 5), (uint64_t)a2, (uint64_t)v18))
    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
  v19 = *((_QWORD *)this + 13);
  v20 = *((_DWORD *)this + 30);
  if (!v20)
    goto LABEL_26;
  v21 = (v20 - 1) & ((v18 >> 4) ^ (v18 >> 9));
  v22 = v19 + 48 * v21;
  v23 = *(llvm::UndefValue **)(v22 + 24);
  if (v23 != v18)
  {
    v24 = 1;
    while (v23 != (llvm::UndefValue *)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v22 = v19 + 48 * v21;
      v23 = *(llvm::UndefValue **)(v22 + 24);
      if (v23 == v18)
        goto LABEL_27;
    }
LABEL_26:
    v22 = v19 + 48 * v20;
  }
LABEL_27:
  if (v22 == v19 + 48 * v20)
    return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v18);
  result = *(const llvm::SCEV **)(v22 + 40);
  if (!result)
    return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v18);
  return result;
}

BOOL sub_1C4F20780(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;

  result = 1;
  if (a3)
  {
    if (*(unsigned __int8 *)(a3 + 16) >= 0x1Cu)
    {
      v5 = *(_QWORD *)(a3 + 40);
      v6 = *(_QWORD *)(a2 + 40);
      if (v5 != v6)
      {
        v7 = *((_DWORD *)a1 + 4);
        if (v7)
        {
          v8 = *a1;
          v9 = v7 - 1;
          LODWORD(v10) = v9 & ((v5 >> 4) ^ (v5 >> 9));
          v11 = (uint64_t *)(v8 + 16 * v10);
          v12 = *v11;
          if (v5 != *v11)
          {
            v13 = 1;
            while (v12 != -4096)
            {
              v14 = v10 + v13++;
              v10 = v14 & v9;
              v12 = *(_QWORD *)(v8 + 16 * v10);
              if (v5 == v12)
              {
                v15 = *(_QWORD **)(v8 + 16 * v10 + 8);
                if (v15)
                  goto LABEL_12;
                return 1;
              }
            }
            return 1;
          }
          v15 = (_QWORD *)v11[1];
          if (!v15)
            return result;
LABEL_12:
          v16 = v9 & ((v6 >> 4) ^ (v6 >> 9));
          v17 = *(_QWORD *)(v8 + 16 * v16);
          if (v6 == v17)
          {
LABEL_16:
            v20 = *(_QWORD **)(v8 + 16 * v16 + 8);
          }
          else
          {
            v18 = 1;
            while (v17 != -4096)
            {
              v19 = v16 + v18++;
              v16 = v19 & v9;
              v17 = *(_QWORD *)(v8 + 16 * v16);
              if (v6 == v17)
                goto LABEL_16;
            }
            v20 = 0;
          }
          if (v20 == v15)
            return 1;
          do
          {
            result = v20 != 0;
            if (!v20)
              break;
            v20 = (_QWORD *)*v20;
          }
          while (v20 != v15);
        }
      }
    }
  }
  return result;
}

uint64_t SCEVMinMaxExprContains(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  unsigned __int8 v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[64];
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = 10;
  v8 = 0;
  v9 = &v5;
  v10 = v12;
  v11 = 0x800000000;
  v13 = v17;
  v14 = v17;
  v15 = 8;
  v16 = 0;
  sub_1C4F5C90C((uint64_t)&v9, a1);
  if ((_DWORD)v11 && !*((_BYTE *)v9 + 12))
  {
    v4 = *((_QWORD *)v10 + v11 - 1);
    LODWORD(v11) = v11 - 1;
    __asm { BR              X10 }
  }
  if (v14 != v13)
    free(v14);
  if (v10 != v12)
    free(v10);
  return v8;
}

void sub_1C4F20A10(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1C4F5C90C((uint64_t)va, *(_QWORD *)(v2 + 32));
  JUMPOUT(0x1C4F209E8);
}

uint64_t llvm::ScalarEvolution::createNodeForSelectOrPHIInstWithICmpInstCond(llvm::ScalarEvolution *this, llvm::Value *a2, uint64_t a3, llvm::Value *a4, llvm::Value *a5)
{
  llvm::Value *v7;
  llvm::Value *v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  llvm::Value *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  llvm::Value *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  llvm::Value *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  unint64_t IndexTypeSizeInBits;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unint64_t v55;
  unint64_t v56;
  llvm::APInt *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  llvm::Value *v63;
  int v64;
  unsigned int v65;
  uint64_t SCEVIter;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  llvm::Value *v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  llvm::Value *v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm::APInt *v86;
  unsigned int v87;
  llvm::APInt *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  llvm::Value *v94;
  int v95;
  unsigned int v96;
  const llvm::SCEV *v97;
  uint64_t v98;
  _QWORD *v99;
  unsigned int v100;
  const llvm::SCEV *v101;
  uint64_t result;
  uint64_t v103;
  BOOL v104;
  int v105;
  uint64_t UMaxExpr;
  llvm::SCEV *v107;

  v7 = a5;
  v9 = *(llvm::Value **)(a3 - 64);
  v10 = *(_QWORD *)(a3 - 32);
  v11 = v9;
  v12 = a4;
  switch(*(_WORD *)(a3 + 18) & 0x3F)
  {
    case ' ':
      goto LABEL_52;
    case '!':
      v12 = a5;
      v7 = a4;
LABEL_52:
      v47 = *(_QWORD *)v9;
      v48 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
      if (*(_BYTE *)(*(_QWORD *)v9 + 8) == 15)
      {
        IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v48, v47);
      }
      else
      {
        sub_1C4768AD0(v48, v47);
        IndexTypeSizeInBits = v50;
        if ((_DWORD)v49 == 1)
      }
      v52 = *(_QWORD *)a2;
      v53 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
      {
        v56 = llvm::DataLayout::getIndexTypeSizeInBits(v53, v52);
      }
      else
      {
        sub_1C4768AD0(v53, v52);
        v56 = v55;
        if ((_DWORD)v54 == 1)
      }
      if (IndexTypeSizeInBits > v56 || *(_BYTE *)(v10 + 16) != 16)
        goto LABEL_97;
      v57 = (llvm::APInt *)(v10 + 24);
      v58 = *(_DWORD *)(v10 + 32);
      if (v58 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v57) != v58)
          goto LABEL_97;
      }
      else if (*(_QWORD *)v57)
      {
        goto LABEL_97;
      }
      v59 = *((_QWORD *)this + 13);
      v60 = *((_DWORD *)this + 30);
      if (!v60)
        goto LABEL_72;
      v61 = (v60 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v62 = v59 + 48 * v61;
      v63 = *(llvm::Value **)(v62 + 24);
      if (v63 != v9)
      {
        v64 = 1;
        while (v63 != (llvm::Value *)-4096)
        {
          v65 = v61 + v64++;
          v61 = v65 & (v60 - 1);
          v62 = v59 + 48 * v61;
          v63 = *(llvm::Value **)(v62 + 24);
          if (v63 == v9)
            goto LABEL_73;
        }
LABEL_72:
        v62 = v59 + 48 * v60;
      }
LABEL_73:
      if (v62 == v59 + 48 * v60 || (SCEVIter = *(_QWORD *)(v62 + 40)) == 0)
        SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v9);
      llvm::ScalarEvolution::getNoopOrZeroExtend((uint64_t)this, SCEVIter);
      v68 = v67;
      v69 = *((_QWORD *)this + 13);
      v70 = *((_DWORD *)this + 30);
      if (!v70)
        goto LABEL_82;
      v71 = (v70 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v72 = v69 + 48 * v71;
      v73 = *(llvm::Value **)(v72 + 24);
      if (v73 != v12)
      {
        v74 = 1;
        while (v73 != (llvm::Value *)-4096)
        {
          v75 = v71 + v74++;
          v71 = v75 & (v70 - 1);
          v72 = v69 + 48 * v71;
          v73 = *(llvm::Value **)(v72 + 24);
          if (v73 == v12)
            goto LABEL_83;
        }
LABEL_82:
        v72 = v69 + 48 * v70;
      }
LABEL_83:
      if (v72 == v69 + 48 * v70 || (v76 = *(_QWORD *)(v72 + 40)) == 0)
      {
        v76 = llvm::ScalarEvolution::createSCEVIter(this, v12);
        v69 = *((_QWORD *)this + 13);
        v70 = *((_DWORD *)this + 30);
      }
      if (!v70)
        goto LABEL_92;
      v77 = (v70 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v78 = v69 + 48 * v77;
      v79 = *(llvm::Value **)(v78 + 24);
      if (v79 != v7)
      {
        v80 = 1;
        while (v79 != (llvm::Value *)-4096)
        {
          v81 = v77 + v80++;
          v77 = v81 & (v70 - 1);
          v78 = v69 + 48 * v77;
          v79 = *(llvm::Value **)(v78 + 24);
          if (v79 == v7)
            goto LABEL_93;
        }
LABEL_92:
        v78 = v69 + 48 * v70;
      }
LABEL_93:
      if (v78 == v69 + 48 * v70 || (v82 = *(_QWORD *)(v78 + 40)) == 0)
        v82 = llvm::ScalarEvolution::createSCEVIter(this, v7);
      llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, v82, v68);
      v84 = v83;
      llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, v76, v83);
      if (*(_WORD *)(v85 + 24))
        goto LABEL_97;
      v97 = (const llvm::SCEV *)v85;
      v107 = (llvm::SCEV *)v68;
      v98 = *(_QWORD *)(v85 + 32);
      v99 = (_QWORD *)(v98 + 24);
      v100 = *(_DWORD *)(v98 + 32);
      if (v100 >= 0x41)
      {
        v105 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v98 + 24));
        v101 = v107;
        if (v100 - v105 > 0x40)
          goto LABEL_97;
        v99 = (_QWORD *)*v99;
      }
      else
      {
        v101 = v107;
      }
      if (*v99 <= 1uLL)
      {
        UMaxExpr = llvm::ScalarEvolution::getUMaxExpr(this, v101, v97);
        return sub_1C4E0AF14((uint64_t)this, UMaxExpr, v84, 0, 0);
      }
LABEL_97:
      if (*(_BYTE *)(v10 + 16) != 16)
        return llvm::ScalarEvolution::getUnknown(this, a2);
      v86 = (llvm::APInt *)(v10 + 24);
      v87 = *(_DWORD *)(v10 + 32);
      if (v87 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v86) != v87)
          return llvm::ScalarEvolution::getUnknown(this, a2);
      }
      else if (*(_QWORD *)v86)
      {
        return llvm::ScalarEvolution::getUnknown(this, a2);
      }
      if (*((_BYTE *)v12 + 16) == 16)
      {
        v88 = (llvm::Value *)((char *)v12 + 24);
        v89 = *((_DWORD *)v12 + 8);
        if (v89 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v88) == v89)
            goto LABEL_107;
        }
        else if (!*(_QWORD *)v88)
        {
LABEL_107:
          v90 = *((_QWORD *)this + 13);
          v91 = *((_DWORD *)this + 30);
          if (v91)
          {
            v92 = (v91 - 1) & ((v9 >> 4) ^ (v9 >> 9));
            v93 = v90 + 48 * v92;
            v94 = *(llvm::Value **)(v93 + 24);
            if (v94 == v9)
            {
LABEL_116:
              if (v93 == v90 + 48 * v91 || (v103 = *(_QWORD *)(v93 + 40)) == 0)
                v103 = llvm::ScalarEvolution::createSCEVIter(this, v9);
              while (1)
              {
                if (v103)
                  v104 = *(unsigned __int16 *)(v103 + 24) == 2;
                else
                  v104 = 0;
                if (!v104)
                  __asm { BR              X11 }
                v103 = *(_QWORD *)(v103 + 32);
              }
            }
            v95 = 1;
            while (v94 != (llvm::Value *)-4096)
            {
              v96 = v92 + v95++;
              v92 = v96 & (v91 - 1);
              v93 = v90 + 48 * v92;
              v94 = *(llvm::Value **)(v93 + 24);
              if (v94 == v9)
                goto LABEL_116;
            }
          }
          v93 = v90 + 48 * v91;
          goto LABEL_116;
        }
      }
      return llvm::ScalarEvolution::getUnknown(this, a2);
    case '"':
    case '#':
    case '&':
    case '\'':
      goto LABEL_3;
    case '$':
    case '%':
    case '(':
    case ')':
      v11 = *(llvm::Value **)(a3 - 32);
      v10 = *(_QWORD *)(a3 - 64);
LABEL_3:
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
      if (*(_BYTE *)(*(_QWORD *)v11 + 8) == 15)
      {
        v17 = llvm::DataLayout::getIndexTypeSizeInBits(v14, v13);
      }
      else
      {
        sub_1C4768AD0(v14, v13);
        v17 = v16;
        if ((_DWORD)v15 == 1)
      }
      v18 = *(_QWORD *)a2;
      v19 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
      {
        v22 = llvm::DataLayout::getIndexTypeSizeInBits(v19, v18);
      }
      else
      {
        sub_1C4768AD0(v19, v18);
        v22 = v21;
        if ((_DWORD)v20 == 1)
      }
      if (v17 > v22)
        return llvm::ScalarEvolution::getUnknown(this, a2);
      v23 = *((_QWORD *)this + 13);
      v24 = *((_DWORD *)this + 30);
      if (!v24)
        goto LABEL_16;
      v25 = v24 - 1;
      v26 = (v24 - 1) & ((a4 >> 4) ^ (a4 >> 9));
      v27 = v23 + 48 * v26;
      v28 = *(llvm::Value **)(v27 + 24);
      if (v28 == a4)
        goto LABEL_17;
      v29 = 1;
      while (v28 != (llvm::Value *)-4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & v25;
        v27 = v23 + 48 * (v30 & v25);
        v28 = *(llvm::Value **)(v27 + 24);
        if (v28 == a4)
          goto LABEL_17;
      }
LABEL_16:
      v27 = v23 + 48 * v24;
LABEL_17:
      if (v27 == v23 + 48 * v24 || (v31 = *(_QWORD *)(v27 + 40)) == 0)
      {
        v31 = llvm::ScalarEvolution::createSCEVIter(this, a4);
        v23 = *((_QWORD *)this + 13);
        v24 = *((_DWORD *)this + 30);
      }
      if (!v24)
        goto LABEL_26;
      v32 = (v24 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v33 = v23 + 48 * v32;
      v34 = *(llvm::Value **)(v33 + 24);
      if (v34 != v7)
      {
        v35 = 1;
        while (v34 != (llvm::Value *)-4096)
        {
          v36 = v32 + v35++;
          v32 = v36 & (v24 - 1);
          v33 = v23 + 48 * v32;
          v34 = *(llvm::Value **)(v33 + 24);
          if (v34 == v7)
            goto LABEL_27;
        }
LABEL_26:
        v33 = v23 + 48 * v24;
      }
LABEL_27:
      if (v33 == v23 + 48 * v24 || !*(_QWORD *)(v33 + 40))
      {
        llvm::ScalarEvolution::createSCEVIter(this, v7);
        v23 = *((_QWORD *)this + 13);
        v24 = *((_DWORD *)this + 30);
      }
      if (!v24)
        goto LABEL_36;
      v37 = (v24 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v38 = v23 + 48 * v37;
      v39 = *(llvm::Value **)(v38 + 24);
      if (v39 != v11)
      {
        v40 = 1;
        while (v39 != (llvm::Value *)-4096)
        {
          v41 = v37 + v40++;
          v37 = v41 & (v24 - 1);
          v38 = v23 + 48 * v37;
          v39 = *(llvm::Value **)(v38 + 24);
          if (v39 == v11)
            goto LABEL_37;
        }
LABEL_36:
        v38 = v23 + 48 * v24;
      }
LABEL_37:
      if (v38 == v23 + 48 * v24 || !*(_QWORD *)(v38 + 40))
      {
        llvm::ScalarEvolution::createSCEVIter(this, v11);
        v23 = *((_QWORD *)this + 13);
        v24 = *((_DWORD *)this + 30);
      }
      if (!v24)
        goto LABEL_46;
      v42 = (v24 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v43 = v23 + 48 * v42;
      v44 = *(_QWORD *)(v43 + 24);
      if (v44 != v10)
      {
        v45 = 1;
        while (v44 != -4096)
        {
          v46 = v42 + v45++;
          v42 = v46 & (v24 - 1);
          v43 = v23 + 48 * v42;
          v44 = *(_QWORD *)(v43 + 24);
          if (v44 == v10)
            goto LABEL_47;
        }
LABEL_46:
        v43 = v23 + 48 * v24;
      }
LABEL_47:
      if (v43 == v23 + 48 * v24 || !*(_QWORD *)(v43 + 40))
        llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)v10);
      __asm { BR              X11 }
      return result;
    default:
      return llvm::ScalarEvolution::getUnknown(this, a2);
  }
}

unint64_t llvm::ScalarEvolution::createNodeForSelectOrPHIViaUMinSeq(llvm::ScalarEvolution *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Value *v12;
  int v13;
  unsigned int v14;
  const llvm::SCEV *SCEVIter;
  unsigned int v17;
  uint64_t v18;
  llvm::Value *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  llvm::Value *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t SequentialMinMaxExpr;
  uint64_t AddExpr;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) != 269
    || *(_DWORD *)(*(_QWORD *)a3 + 8) != 269
    || *(_DWORD *)(*(_QWORD *)a4 + 8) != 269
    || *(_DWORD *)(*(_QWORD *)a5 + 8) != 269
    || *((_BYTE *)a4 + 16) != 16 && *((_BYTE *)a5 + 16) != 16)
  {
    return llvm::ScalarEvolution::getUnknown(this, a2);
  }
  v8 = *((_QWORD *)this + 13);
  v9 = *((_DWORD *)this + 30);
  if (!v9)
    goto LABEL_14;
  v10 = (v9 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v11 = v8 + 48 * v10;
  v12 = *(llvm::Value **)(v11 + 24);
  if (v12 != a3)
  {
    v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v11 = v8 + 48 * v10;
      v12 = *(llvm::Value **)(v11 + 24);
      if (v12 == a3)
        goto LABEL_15;
    }
LABEL_14:
    v11 = v8 + 48 * v9;
  }
LABEL_15:
  if (v11 == v8 + 48 * v9 || (SCEVIter = *(const llvm::SCEV **)(v11 + 40)) == 0)
  {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, a3);
    v8 = *((_QWORD *)this + 13);
    v9 = *((_DWORD *)this + 30);
  }
  if (!v9)
  {
LABEL_24:
    v18 = v8 + 48 * v9;
    goto LABEL_25;
  }
  v17 = (v9 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  v18 = v8 + 48 * v17;
  v19 = *(llvm::Value **)(v18 + 24);
  if (v19 != a4)
  {
    v20 = 1;
    while (v19 != (llvm::Value *)-4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v9 - 1);
      v18 = v8 + 48 * v17;
      v19 = *(llvm::Value **)(v18 + 24);
      if (v19 == a4)
        goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v18 == v8 + 48 * v9 || (v22 = *(_QWORD *)(v18 + 40)) == 0)
  {
    v22 = llvm::ScalarEvolution::createSCEVIter(this, a4);
    v8 = *((_QWORD *)this + 13);
    v9 = *((_DWORD *)this + 30);
  }
  if (v9)
  {
    v23 = (v9 - 1) & ((a5 >> 4) ^ (a5 >> 9));
    v24 = v8 + 48 * v23;
    v25 = *(llvm::Value **)(v24 + 24);
    if (v25 == a5)
      goto LABEL_35;
    v26 = 1;
    while (v25 != (llvm::Value *)-4096)
    {
      v27 = v23 + v26++;
      v23 = v27 & (v9 - 1);
      v24 = v8 + 48 * v23;
      v25 = *(llvm::Value **)(v24 + 24);
      if (v25 == a5)
        goto LABEL_35;
    }
  }
  v24 = v8 + 48 * v9;
LABEL_35:
  if (v24 == v8 + 48 * v9 || (v28 = *(_QWORD *)(v24 + 40)) == 0)
    v28 = llvm::ScalarEvolution::createSCEVIter(this, a5);
  if (*((_BYTE *)a4 + 16) == 16)
  {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV(this, SCEVIter);
    v29 = v28;
  }
  else
  {
    v29 = v22;
    v22 = v28;
  }
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, v29, v22);
  v33 = &v35;
  v35 = (uint64_t)SCEVIter;
  v36 = v30;
  v34 = 0x200000002;
  SequentialMinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)this, 12, (unsigned int *)&v33);
  if (v33 != &v35)
    free(v33);
  v33 = &v35;
  v35 = v22;
  v36 = SequentialMinMaxExpr;
  v34 = 0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (uint64_t)&v33, 0, 0);
  if (v33 != &v35)
    free(v33);
  return AddExpr;
}

unint64_t llvm::ScalarEvolution::createNodeForGEP(llvm::ScalarEvolution *this, llvm::GEPOperator *a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  llvm::Value **v12;
  llvm::Value **v13;
  llvm::Value *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  llvm::Value *v19;
  int v20;
  unsigned int v21;
  uint64_t SCEVIter;
  uint64_t v23;
  uint64_t v24;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_BYTE *)a2 + 16) != 62 || a2 == 0;
  v5 = 64;
  if (v4)
    v5 = 24;
  v6 = *(_QWORD *)((char *)a2 + v5);
  v7 = *(unsigned __int8 *)(v6 + 8);
  if (v7 - 16 >= 2)
  {
    if (v7 <= 0xF && ((1 << v7) & 0xAC7F) != 0)
      goto LABEL_8;
    if ((v7 & 0xFE) != 0x12 && v7 != 21)
      return llvm::ScalarEvolution::getUnknown(this, a2);
  }
  if ((llvm::Type::isSizedDerivedType(v6, 0) & 1) == 0)
    return llvm::ScalarEvolution::getUnknown(this, a2);
LABEL_8:
  v28 = v30;
  v29 = 0x400000000;
  v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    v10 = (char *)*((_QWORD *)a2 - 1);
    v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    v9 = v8 & 0x7FFFFFF;
    v10 = (char *)a2 - 32 * v9;
  }
  if (v9 != 1)
  {
    v11 = 0;
    v12 = (llvm::Value **)(v10 + 32);
    v13 = (llvm::Value **)&v10[32 * v9];
    do
    {
      v14 = *v12;
      v15 = *((_QWORD *)this + 13);
      v16 = *((_DWORD *)this + 30);
      if (v16)
      {
        v17 = ((v14 >> 4) ^ (v14 >> 9)) & (v16 - 1);
        v18 = v15 + 48 * v17;
        v19 = *(llvm::Value **)(v18 + 24);
        if (v19 == v14)
          goto LABEL_19;
        v20 = 1;
        while (v19 != (llvm::Value *)-4096)
        {
          v21 = v17 + v20++;
          v17 = v21 & (v16 - 1);
          v18 = v15 + 48 * v17;
          v19 = *(llvm::Value **)(v18 + 24);
          if (v19 == v14)
            goto LABEL_19;
        }
      }
      v18 = v15 + 48 * v16;
LABEL_19:
      if (v18 == v15 + 48 * v16 || (SCEVIter = *(_QWORD *)(v18 + 40)) == 0)
      {
        SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v14);
        v11 = v29;
      }
      if (v11 >= HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v11 + 1, 8);
        v11 = v29;
      }
      *((_QWORD *)v28 + v11) = SCEVIter;
      v11 = v29 + 1;
      LODWORD(v29) = v29 + 1;
      v12 += 4;
    }
    while (v12 != v13);
  }
  llvm::ScalarEvolution::getGEPExpr((uint64_t)this, (uint64_t)a2);
  v24 = v23;
  if (v28 != v30)
    free(v28);
  return v24;
}

uint64_t llvm::ScalarEvolution::GetMinTrailingZerosImpl(llvm::ScalarEvolution *this, const llvm::SCEV **a2)
{
  int v4;
  const llvm::SCEV *v5;
  unint64_t **v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int MinTrailingZeros;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  unsigned int IndexTypeSizeInBits;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48[5];
  char v49;

  v4 = *((unsigned __int16 *)a2 + 12);
  if (!a2 || *((_WORD *)a2 + 12))
  {
    if (a2 && v4 == 13)
    {
      return llvm::ScalarEvolution::GetMinTrailingZeros(this, a2[4]);
    }
    else if (a2 && v4 == 1)
    {
      MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros(this, a2[4]);
      v11 = (uint64_t)a2[5];
      v12 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
      if (*(_BYTE *)(v11 + 8) == 15)
      {
        IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v12, v11);
      }
      else
      {
        sub_1C4768AD0(v12, v11);
        IndexTypeSizeInBits = v14;
        if ((_DWORD)v13 == 1)
      }
      if (MinTrailingZeros >= IndexTypeSizeInBits)
        return IndexTypeSizeInBits;
      else
        return MinTrailingZeros;
    }
    else
    {
      if (a2 && v4 == 2)
      {
        v16 = (char *)(a2 + 4);
        llvm::ScalarEvolution::GetMinTrailingZeros(this, a2[4]);
        __asm { BR              X11 }
      }
      if (a2 && v4 == 3)
      {
        v17 = (char *)(a2 + 4);
        llvm::ScalarEvolution::GetMinTrailingZeros(this, a2[4]);
        __asm { BR              X11 }
      }
      if (a2 && v4 == 4)
      {
        v18 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *(const llvm::SCEV **)a2[4]);
        if ((_DWORD)v18)
        {
          v19 = *((_DWORD *)a2 + 10);
          if (v19 != 1)
          {
            v20 = 0;
            v21 = v19 - 2;
            do
            {
              v22 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *((const llvm::SCEV **)a2[4] + v20 + 1));
              if (v22 >= v18)
                v18 = v18;
              else
                v18 = v22;
              if ((_DWORD)v18)
                v23 = v21 == (_DWORD)v20;
              else
                v23 = 1;
              ++v20;
            }
            while (!v23);
          }
        }
      }
      else
      {
        if (a2 && v4 == 5)
        {
          llvm::ScalarEvolution::GetMinTrailingZeros(this, *(const llvm::SCEV **)a2[4]);
          __asm { BR              X11 }
        }
        if (a2 && v4 == 7)
        {
          v18 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *(const llvm::SCEV **)a2[4]);
          if ((_DWORD)v18)
          {
            v24 = *((_DWORD *)a2 + 10);
            if (v24 != 1)
            {
              v25 = 0;
              v26 = v24 - 2;
              do
              {
                v27 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *((const llvm::SCEV **)a2[4] + v25 + 1));
                if (v27 >= v18)
                  v18 = v18;
                else
                  v18 = v27;
                if ((_DWORD)v18)
                  v28 = v26 == (_DWORD)v25;
                else
                  v28 = 1;
                ++v25;
              }
              while (!v28);
            }
          }
        }
        else if (a2 && v4 == 9)
        {
          v18 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *(const llvm::SCEV **)a2[4]);
          if ((_DWORD)v18)
          {
            v29 = *((_DWORD *)a2 + 10);
            if (v29 != 1)
            {
              v30 = 0;
              v31 = v29 - 2;
              do
              {
                v32 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *((const llvm::SCEV **)a2[4] + v30 + 1));
                if (v32 >= v18)
                  v18 = v18;
                else
                  v18 = v32;
                if ((_DWORD)v18)
                  v33 = v31 == (_DWORD)v30;
                else
                  v33 = 1;
                ++v30;
              }
              while (!v33);
            }
          }
        }
        else if (a2 && v4 == 8)
        {
          v18 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *(const llvm::SCEV **)a2[4]);
          if ((_DWORD)v18)
          {
            v34 = *((_DWORD *)a2 + 10);
            if (v34 != 1)
            {
              v35 = 0;
              v36 = v34 - 2;
              do
              {
                v37 = llvm::ScalarEvolution::GetMinTrailingZeros(this, *((const llvm::SCEV **)a2[4] + v35 + 1));
                if (v37 >= v18)
                  v18 = v18;
                else
                  v18 = v37;
                if ((_DWORD)v18)
                  v38 = v36 == (_DWORD)v35;
                else
                  v38 = 1;
                ++v35;
              }
              while (!v38);
            }
          }
        }
        else
        {
          v18 = 0;
          if (a2 && v4 == 14)
          {
            v39 = (uint64_t)*(a2 - 1);
            v41 = *((_QWORD *)this + 3);
            v40 = *((_QWORD *)this + 4);
            if (!v39 || *(unsigned __int8 *)(v39 + 16) < 0x1Cu || (v42 = (uint64_t)*(a2 - 1), !*(_QWORD *)(v39 + 40)))
              v42 = 0;
            v48[0] = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
            v48[1] = v41;
            v48[2] = v42;
            v48[3] = v40;
            v48[4] = 0;
            v49 = 1;
            sub_1C4F83784(v39, 0, v48, &v44);
            v43 = v45;
            if (v45 > 0x40)
              v18 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v44);
            else
              v18 = __clz(__rbit64(~v44));
            if (v47 >= 0x41 && v46)
            {
              MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
              v43 = v45;
            }
            if (v43 >= 0x41 && v44)
              MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
          }
        }
      }
      return v18;
    }
  }
  else
  {
    v5 = a2[4];
    v6 = (unint64_t **)((char *)v5 + 24);
    v7 = *((_DWORD *)v5 + 8);
    if (v7 > 0x40)
    {
      return llvm::APInt::countTrailingZerosSlowCase(v6);
    }
    else
    {
      v8 = __clz(__rbit64((unint64_t)*v6));
      if (v7 >= v8)
        return v8;
      else
        return v7;
    }
  }
}

void llvm::ScalarEvolution::getRangeForUnknownRecurrence(llvm::ScalarEvolution *this@<X0>, const llvm::SCEVUnknown *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned int v9;
  unsigned int IndexTypeSizeInBits;
  const void *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  const llvm::Loop *v32;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::Loop *v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  void *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  void *v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  void *v77;
  unsigned int v78;
  unint64_t *v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  _QWORD *v84;
  int v85;
  int64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  void *v90;
  char *v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  void *v96;
  size_t v97;
  const void *v98;
  size_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  size_t v111;
  size_t v112;
  size_t v113;
  size_t v114;
  size_t v115;
  size_t v116;
  size_t v117;
  size_t v118;
  size_t v119;
  size_t v120;
  size_t v121;
  uint64_t v122;
  const void *v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  void *v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  void *v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  void *v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  void *v146;
  unsigned int v147;
  void *v148;
  unsigned int v149;
  BOOL v150;
  uint64_t *v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int v154;
  void *__src;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  char *v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const void *v166;
  unsigned int v167;
  void *v168;
  unsigned int v169;
  void *v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  const void *v174;
  uint64_t v175;
  uint64_t v176;
  char v177;

  v6 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
  v7 = **((_QWORD **)a2 + 3);
  if (*(_BYTE *)(v7 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, v7);
  }
  else
  {
    sub_1C4768AD0(v6, v7);
    IndexTypeSizeInBits = v9;
    if ((_DWORD)v8 == 1)
  }
  v167 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits <= 0x40)
  {
    v11 = (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits);
    if (!IndexTypeSizeInBits)
      v11 = 0;
    v166 = v11;
    v169 = IndexTypeSizeInBits;
    LODWORD(v12) = IndexTypeSizeInBits;
    goto LABEL_8;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v166, -1, 1);
  v12 = v167;
  v169 = v167;
  if (v167 <= 0x40)
  {
LABEL_8:
    v13 = v166;
    v14 = 1;
    v15 = (void *)v166;
    goto LABEL_9;
  }
  v15 = (void *)operator new[]();
  v13 = v166;
  memcpy(v15, v166, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
  v14 = 0;
LABEL_9:
  v168 = v15;
  v16 = *((_QWORD *)a2 + 3);
  if (!v16 || *(_BYTE *)(v16 + 16) != 83)
    goto LABEL_63;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
  if (v17)
  {
    while (1)
    {
      v18 = *(_QWORD *)(v17 + 24);
      v19 = *(unsigned __int8 *)(v18 + 16);
      v20 = v18 && v19 >= 0x1C;
      if (v20 && v19 - 29 < 0xB)
        break;
      v17 = *(_QWORD *)(v17 + 8);
      if (!v17)
        goto LABEL_21;
    }
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 4), *(_QWORD *)(v18 + 40)))goto LABEL_63;
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 8);
      if (!v17)
        break;
      v34 = *(_QWORD *)(v17 + 24);
      v35 = *(unsigned __int8 *)(v34 + 16);
      if (v34)
        v36 = v35 >= 0x1C;
      else
        v36 = 0;
      v37 = !v36 || v35 - 29 > 0xA;
      if (!v37
        && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 4), *(_QWORD *)(v34 + 40)))
      {
        goto LABEL_63;
      }
    }
  }
LABEL_21:
  v164 = 0;
  v165 = 0;
  v163 = 0;
  if ((llvm::matchSimpleRecurrence(v16, &v165, &v164, &v163) & 1) == 0)
  {
LABEL_63:
    *(_DWORD *)(a3 + 8) = v12;
    if (v14)
    {
      *(_QWORD *)a3 = v13;
      *(_DWORD *)(a3 + 24) = v12;
      *(_QWORD *)(a3 + 16) = v15;
      goto LABEL_65;
    }
    v95 = (void *)operator new[]();
    *(_QWORD *)a3 = v95;
    memcpy(v95, v13, (((unint64_t)*(unsigned int *)(a3 + 8) + 63) >> 3) & 0x3FFFFFF8);
    *(_DWORD *)(a3 + 24) = v12;
    v96 = (void *)operator new[]();
    *(_QWORD *)(a3 + 16) = v96;
    v97 = (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8;
    v98 = v15;
    goto LABEL_172;
  }
  v22 = (uint64_t *)*((_QWORD *)this + 5);
  v23 = *((_DWORD *)v22 + 4);
  v123 = v15;
  if (v23)
  {
    v24 = *(_QWORD *)(v16 + 40);
    v25 = *v22;
    v26 = v23 - 1;
    v27 = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
    v28 = *(_QWORD *)(v25 + 16 * v27);
    if (v24 == v28)
    {
LABEL_27:
      v31 = v14;
      v32 = *(const llvm::Loop **)(v25 + 16 * v27 + 8);
      goto LABEL_40;
    }
    v29 = 1;
    while (v28 != -4096)
    {
      v30 = v27 + v29++;
      v27 = v30 & v26;
      v28 = *(_QWORD *)(v25 + 16 * v27);
      if (v24 == v28)
        goto LABEL_27;
    }
  }
  v31 = v14;
  v32 = 0;
LABEL_40:
  v38 = v165;
  v39 = sub_1C477672C((uint64_t)v32 + 56, *(_QWORD *)(v165 + 40));
  v40 = *((_QWORD *)v32 + 8);
  v41 = 72;
  if (v40 == *((_QWORD *)v32 + 7))
    v41 = 76;
  if (v39 == (_QWORD *)(v40 + 8 * *(unsigned int *)((char *)v32 + v41))
    || *(unsigned __int8 *)(v38 + 16) - 53 >= 3
    || *(_QWORD *)(v38 - 64) != v16)
  {
    *(_DWORD *)(a3 + 8) = v12;
    if (v31)
    {
      *(_QWORD *)a3 = v13;
      *(_DWORD *)(a3 + 24) = v12;
      *(_QWORD *)(a3 + 16) = v123;
      goto LABEL_65;
    }
    v108 = (void *)operator new[]();
    *(_QWORD *)a3 = v108;
    memcpy(v108, v13, (((unint64_t)*(unsigned int *)(a3 + 8) + 63) >> 3) & 0x3FFFFFF8);
    *(_DWORD *)(a3 + 24) = v12;
    v96 = (void *)operator new[]();
    *(_QWORD *)(a3 + 16) = v96;
    v97 = (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8;
    v98 = v123;
LABEL_172:
    memcpy(v96, v98, v97);
    goto LABEL_65;
  }
  v122 = v38;
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v32);
  v43 = BackedgeTakenInfo[13];
  v14 = v31;
  v15 = (void *)v123;
  if (v43)
  {
    v44 = *((_DWORD *)BackedgeTakenInfo + 2);
    if (!v44)
      goto LABEL_55;
    v45 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
    v46 = 88 * v44;
    while (*(v45 - 1) == *v45)
    {
      v45 += 22;
      v46 -= 88;
      if (!v46)
        goto LABEL_55;
    }
  }
  v43 = (const llvm::Loop *)*((_QWORD *)this + 6);
LABEL_55:
  if (*((_WORD *)v43 + 12))
    v47 = 0;
  else
    v47 = (uint64_t)v43;
  v48 = sub_1C4F308CC(v47);
  if (v48)
    v49 = v48 >= IndexTypeSizeInBits;
  else
    v49 = 1;
  if (v49)
    goto LABEL_63;
  v50 = v48;
  v52 = *((_QWORD *)this + 3);
  v51 = *((_QWORD *)this + 4);
  if (!v164 || *(unsigned __int8 *)(v164 + 16) < 0x1Cu || (v53 = (const void *)v164, !*(_QWORD *)(v164 + 40)))
    v53 = 0;
  v172 = v6;
  v173 = v52;
  v174 = v53;
  v175 = v51;
  v176 = 0;
  v177 = 1;
  sub_1C4F83784(v164, 0, &v172, &v159);
  v55 = *((_QWORD *)this + 3);
  v54 = *((_QWORD *)this + 4);
  if (!v163 || *(unsigned __int8 *)(v163 + 16) < 0x1Cu || (v56 = (const void *)v163, !*(_QWORD *)(v163 + 40)))
    v56 = 0;
  v172 = v6;
  v173 = v55;
  v174 = v56;
  v175 = v54;
  v176 = 0;
  v177 = 1;
  sub_1C4F83784(v163, 0, &v172, &__src);
  v57 = v156;
  LODWORD(v173) = v156;
  if (v156 > 0x40)
  {
    v111 = (((unint64_t)v156 + 63) >> 3) & 0x3FFFFFF8;
    v172 = operator new[]();
    memcpy((void *)v172, __src, v111);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v172);
    v57 = v173;
    v59 = v172;
  }
  else
  {
    if (v156)
      v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v156;
    else
      v58 = 0;
    v59 = v58 & ~(unint64_t)__src;
  }
  v154 = v57;
  v153 = v59;
  v60 = v50 - 1;
  v152 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v151, v60, 0);
  else
    v151 = (uint64_t *)((0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits) & v60);
  v150 = 0;
  llvm::APInt::umul_ov((llvm::APInt *)&v153, &v151, &v150, (uint64_t)&v148);
  if (v150)
    goto LABEL_83;
  v61 = *(unsigned __int8 *)(v122 + 16);
  if (v61 != 53)
  {
    if (v61 == 54)
    {
      v62 = v149;
      LODWORD(v173) = v149;
      if (v149 > 0x40)
      {
        v112 = (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8;
        v172 = operator new[]();
        memcpy((void *)v172, v148, v112);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v172);
        v62 = v173;
        v64 = v172;
        v65 = v149;
        if (v149 > 0x40)
        {
          v113 = (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8;
          v66 = (void *)operator new[]();
          memcpy(v66, v148, v113);
          goto LABEL_92;
        }
      }
      else
      {
        if (v149)
          v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v149;
        else
          v63 = 0;
        v64 = v63 & ~(unint64_t)v148;
        v65 = v149;
      }
      v66 = v148;
LABEL_92:
      v145 = v62;
      v144 = v64;
      v147 = v65;
      v146 = v66;
      llvm::KnownBits::lshr((llvm::KnownBits *)&v159, (int8x8_t *)&v144, (llvm::KnownBits *)&v172);
      if (v147 >= 0x41 && v146)
        MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
      if (v145 >= 0x41 && v144)
        MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
      v131 = v175;
      if (v175 > 0x40)
      {
        v130 = (void *)operator new[]();
        memcpy(v130, v174, (((unint64_t)v131 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v130 = (void *)v174;
      }
      v80 = v160;
      v145 = v160;
      if (v160 > 0x40)
      {
        v118 = (((unint64_t)v160 + 63) >> 3) & 0x3FFFFFF8;
        v144 = operator new[]();
        memcpy((void *)v144, (const void *)v159, v118);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v144);
        v80 = v145;
        v82 = v144;
      }
      else
      {
        if (v160)
          v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v160;
        else
          v81 = 0;
        v82 = v81 & ~v159;
      }
      v127 = v80;
      v126 = v82;
      llvm::APInt::operator+=((uint64_t)&v126, 1uLL);
      v129 = v127;
      v128 = v126;
      v127 = 0;
      sub_1C4E8FBB0((uint64_t)&v130, &v128, (llvm::APInt *)a3);
      if (v129 >= 0x41 && v128)
        MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
      if (v127 >= 0x41 && v126)
        MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
      if (v131 < 0x41)
        goto LABEL_193;
      v83 = v130;
      if (!v130)
        goto LABEL_193;
      goto LABEL_192;
    }
    v73 = v149;
    v171 = v149;
    if (v149 > 0x40)
    {
      v116 = (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8;
      v170 = (void *)operator new[]();
      memcpy(v170, v148, v116);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v170);
      v73 = v171;
      v75 = (unint64_t)v170;
      v76 = v149;
      if (v149 > 0x40)
      {
        v117 = (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8;
        v77 = (void *)operator new[]();
        memcpy(v77, v148, v117);
LABEL_115:
        v145 = v73;
        v144 = v75;
        v147 = v76;
        v146 = v77;
        llvm::KnownBits::ashr((llvm::KnownBits *)&v159, (int8x8_t *)&v144, (unint64_t *)&v172);
        if (v147 >= 0x41 && v146)
          MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
        if (v145 >= 0x41 && v144)
          MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
        v78 = v160;
        v79 = (unint64_t *)(v159 + 8 * ((v160 - 1) >> 6));
        if (v160 < 0x41)
          v79 = &v159;
        if (((*v79 >> (v160 - 1)) & 1) != 0)
        {
          v143 = v175;
          if (v175 > 0x40)
          {
            v142 = (void *)operator new[]();
            memcpy(v142, v174, (((unint64_t)v143 + 63) >> 3) & 0x3FFFFFF8);
            v78 = v160;
          }
          else
          {
            v142 = (void *)v174;
          }
          v145 = v78;
          if (v78 > 0x40)
          {
            v119 = (((unint64_t)v78 + 63) >> 3) & 0x3FFFFFF8;
            v144 = operator new[]();
            memcpy((void *)v144, (const void *)v159, v119);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v144);
            v78 = v145;
            v94 = v144;
          }
          else
          {
            if (v78)
              v93 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v78;
            else
              v93 = 0;
            v94 = v93 & ~v159;
          }
          v139 = v78;
          v138 = v94;
          llvm::APInt::operator+=((uint64_t)&v138, 1uLL);
          v141 = v139;
          v140 = v138;
          v139 = 0;
          sub_1C4E8FBB0((uint64_t)&v142, &v140, (llvm::APInt *)a3);
          if (v141 >= 0x41 && v140)
            MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
          if (v139 >= 0x41 && v138)
            MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
          if (v143 < 0x41)
            goto LABEL_193;
          v83 = v142;
          if (!v142)
            goto LABEL_193;
          goto LABEL_192;
        }
        v91 = (char *)&v161;
        v92 = v162 - 1;
        if (v162 >= 0x41)
          v91 = &v161[8 * (v92 >> 6)];
        if (((*(_QWORD *)v91 >> v92) & 1) != 0)
        {
          v137 = v162;
          if (v162 > 0x40)
          {
            v136 = (void *)operator new[]();
            memcpy(v136, v161, (((unint64_t)v137 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v136 = v161;
          }
          v105 = v173;
          v145 = v173;
          if (v173 > 0x40)
          {
            v121 = (((unint64_t)v173 + 63) >> 3) & 0x3FFFFFF8;
            v144 = operator new[]();
            memcpy((void *)v144, (const void *)v172, v121);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v144);
            v105 = v145;
            v107 = v144;
          }
          else
          {
            if ((_DWORD)v173)
              v106 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
            else
              v106 = 0;
            v107 = v106 & ~v172;
          }
          v133 = v105;
          v132 = v107;
          llvm::APInt::operator+=((uint64_t)&v132, 1uLL);
          v135 = v133;
          v134 = v132;
          v133 = 0;
          sub_1C4E8FBB0((uint64_t)&v136, &v134, (llvm::APInt *)a3);
          if (v135 >= 0x41 && v134)
            MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
          if (v133 >= 0x41 && v132)
            MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
          if (v137 < 0x41)
            goto LABEL_193;
          v83 = v136;
          if (!v136)
            goto LABEL_193;
LABEL_192:
          MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
LABEL_193:
          if (v175 >= 0x41 && v174)
            MEMORY[0x1CAA32F9C](v174, 0x1000C8000313F17);
          if (v173 >= 0x41 && v172)
            MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
          goto LABEL_195;
        }
        goto LABEL_153;
      }
    }
    else
    {
      if (v149)
        v74 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v149;
      else
        v74 = 0;
      v75 = v74 & ~(unint64_t)v148;
      v76 = v149;
    }
    v77 = v148;
    goto LABEL_115;
  }
  v67 = v149;
  v171 = v149;
  if (v149 <= 0x40)
  {
    if (v149)
      v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v149;
    else
      v68 = 0;
    v69 = v68 & ~(unint64_t)v148;
    v70 = v149;
    goto LABEL_104;
  }
  v114 = (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8;
  v170 = (void *)operator new[]();
  memcpy(v170, v148, v114);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v170);
  v67 = v171;
  v69 = (unint64_t)v170;
  v70 = v149;
  if (v149 <= 0x40)
  {
LABEL_104:
    v71 = v148;
    goto LABEL_105;
  }
  v115 = (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8;
  v71 = (void *)operator new[]();
  memcpy(v71, v148, v115);
LABEL_105:
  v145 = v67;
  v144 = v69;
  v147 = v70;
  v146 = v71;
  llvm::KnownBits::shl((llvm::KnownBits *)&v159, (int8x8_t *)&v144, (llvm::KnownBits *)&v172);
  if (v147 >= 0x41 && v146)
    MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
  if (v145 >= 0x41 && v144)
    MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
  if (v160 > 0x40)
  {
    v72 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v159);
  }
  else if (v160)
  {
    v72 = __clz(~(v159 << -(char)v160));
  }
  else
  {
    v72 = 0;
  }
  if (v149 >= 0x41)
  {
    v85 = 0;
    v84 = v148;
    v86 = ((unint64_t)v149 + 63) >> 6;
    do
    {
      v37 = v86-- < 1;
      if (v37)
        break;
      v87 = *((_QWORD *)v148 + v86);
      v85 += __clz(v87);
    }
    while (!v87);
    v88 = v149 | 0xFFFFFFC0;
    if ((v149 & 0x3F) == 0)
      v88 = 0;
    if (v149 - v85 - v88 > 0x40)
      goto LABEL_153;
  }
  else
  {
    v84 = &v148;
  }
  if (*v84 < (unint64_t)v72)
  {
    v89 = v162;
    if (v162 > 0x40)
    {
      v99 = (((unint64_t)v162 + 63) >> 3) & 0x3FFFFFF8;
      v90 = (void *)operator new[]();
      memcpy(v90, v161, v99);
    }
    else
    {
      v90 = v161;
    }
    v100 = v173;
    v145 = v173;
    if (v173 > 0x40)
    {
      v120 = (((unint64_t)v173 + 63) >> 3) & 0x3FFFFFF8;
      v144 = operator new[]();
      memcpy((void *)v144, (const void *)v172, v120);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v144);
      v100 = v145;
      v102 = v144;
    }
    else
    {
      if ((_DWORD)v173)
        v101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
      else
        v101 = 0;
      v102 = v101 & ~v172;
    }
    v125 = v100;
    v124 = v102;
    llvm::APInt::operator+=((uint64_t)&v124, 1uLL);
    v103 = v125;
    v104 = v124;
    v125 = 0;
    *(_DWORD *)(a3 + 8) = v89;
    *(_QWORD *)a3 = v90;
    *(_DWORD *)(a3 + 24) = v103;
    *(_QWORD *)(a3 + 16) = v104;
    goto LABEL_193;
  }
LABEL_153:
  if (v175 >= 0x41 && v174)
    MEMORY[0x1CAA32F9C](v174, 0x1000C8000313F17);
  if (v173 >= 0x41 && v172)
    MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
LABEL_83:
  *(_DWORD *)(a3 + 8) = v12;
  if (v14)
  {
    *(_QWORD *)a3 = v13;
    *(_DWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 16) = v123;
  }
  else
  {
    v109 = (void *)operator new[]();
    *(_QWORD *)a3 = v109;
    memcpy(v109, v13, (((unint64_t)*(unsigned int *)(a3 + 8) + 63) >> 3) & 0x3FFFFFF8);
    *(_DWORD *)(a3 + 24) = v12;
    v110 = (void *)operator new[]();
    *(_QWORD *)(a3 + 16) = v110;
    memcpy(v110, v123, (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
LABEL_195:
  if (v149 >= 0x41 && v148)
    MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
  if (v152 >= 0x41 && v151)
    MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
  if (v154 >= 0x41 && v153)
    MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
  if (v158 >= 0x41 && v157)
    MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
  if (v156 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v162 >= 0x41 && v161)
    MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
  if (v160 >= 0x41 && v159)
    MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
  LODWORD(v12) = v169;
LABEL_65:
  if (v12 >= 0x41 && v168)
    MEMORY[0x1CAA32F9C](v168, 0x1000C8000313F17);
  if (v167 >= 0x41)
  {
    if (v166)
      MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
  }
}

uint64_t llvm::ScalarEvolution::getSmallConstantMaxTripCount(const llvm::Loop **this, const llvm::Loop *a2)
{
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::Loop *v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)this, a2);
  v4 = BackedgeTakenInfo[13];
  if (v4)
  {
    v5 = *((_DWORD *)BackedgeTakenInfo + 2);
    if (!v5)
      goto LABEL_8;
    v6 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
    v7 = 88 * v5;
    while (*(v6 - 1) == *v6)
    {
      v6 += 22;
      v7 -= 88;
      if (!v7)
        goto LABEL_8;
    }
  }
  v4 = this[6];
LABEL_8:
  if (*((_WORD *)v4 + 12))
    v8 = 0;
  else
    v8 = (uint64_t)v4;
  return sub_1C4F308CC(v8);
}

uint64_t llvm::ScalarEvolution::getRangeRefIter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  llvm::Value *v42;
  int v43;
  unsigned int v44;
  uint64_t SCEVIter;
  char v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t RangeRef;
  int v67;
  unsigned int v68;
  uint64_t v69;
  llvm::SmallPtrSetImplBase *v70;
  unsigned int v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[64];
  void *v78;
  uint64_t v79;
  _QWORD v80[8];

  v80[6] = *MEMORY[0x1E0C80C00];
  v78 = v80;
  v79 = 0x600000000;
  v73 = v77;
  v74 = v77;
  if (a3)
    v5 = 808;
  else
    v5 = 784;
  if (a3)
    v6 = a1 + 808;
  else
    v6 = a1 + 784;
  v75 = 8;
  v76 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v73, a2);
  v69 = a2;
  if (!v7
    || (v8 = *(_QWORD *)(a1 + v5), v9 = *(_DWORD *)(v6 + 16), (uint64_t *)(v8 + 40 * v9) != sub_1C4A9F4AC(v8, v9, a2))
    || (v67 = *(unsigned __int16 *)(a2 + 24), (v67 - 4) > 8)
    && (v67 != 14 || *(_BYTE *)(*(_QWORD *)(a2 - 8) + 16) != 83))
  {
    if (!(_DWORD)v79)
      goto LABEL_87;
LABEL_10:
    v10 = 0;
    v70 = (llvm::SmallPtrSetImplBase *)(a1 + 320);
    v11 = 1;
    while (1)
    {
      v12 = v10;
      v13 = *((_QWORD *)v78 + v10);
      v14 = *(unsigned __int16 *)(v13 + 24);
      v72 = v11;
      if (v14 <= 0xC)
      {
        if (((1 << v14) & 0x1FB0) != 0)
        {
          v15 = *(_QWORD *)(v13 + 40);
          if (v15)
          {
            v16 = *(uint64_t **)(v13 + 32);
            v17 = 8 * v15;
            do
            {
              v18 = *v16;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v73, *v16);
              if (v19)
              {
                v20 = *(_QWORD *)(a1 + v5);
                v21 = *(_DWORD *)(v6 + 16);
                if ((uint64_t *)(v20 + 40 * v21) == sub_1C4A9F4AC(v20, v21, v18))
                {
                  v22 = *(unsigned __int16 *)(v18 + 24);
                  if ((v22 - 4) <= 8 || v22 == 14 && *(_BYTE *)(*(_QWORD *)(v18 - 8) + 16) == 83)
                  {
                    v23 = v79;
                    if (v79 >= (unint64_t)HIDWORD(v79))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
                      v23 = v79;
                    }
                    *((_QWORD *)v78 + v23) = v18;
                    LODWORD(v79) = v79 + 1;
                  }
                }
              }
              ++v16;
              v17 -= 8;
            }
            while (v17);
          }
          goto LABEL_70;
        }
        if (v14 == 6)
        {
          v24 = *(_QWORD *)(v13 + 32);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v73, v24);
          if (v25)
          {
            v26 = *(_QWORD *)(a1 + v5);
            v27 = *(_DWORD *)(v6 + 16);
            if ((uint64_t *)(v26 + 40 * v27) == sub_1C4A9F4AC(v26, v27, v24))
            {
              v28 = *(unsigned __int16 *)(v24 + 24);
              if ((v28 - 4) <= 8 || v28 == 14 && *(_BYTE *)(*(_QWORD *)(v24 - 8) + 16) == 83)
              {
                v29 = v79;
                if (v79 >= (unint64_t)HIDWORD(v79))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
                  v29 = v79;
                }
                *((_QWORD *)v78 + v29) = v24;
                LODWORD(v79) = v79 + 1;
              }
            }
          }
          v51 = *(_QWORD *)(v13 + 40);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v73, v51);
          if (v52)
          {
            v53 = *(_QWORD *)(a1 + v5);
            v54 = *(_DWORD *)(v6 + 16);
            if ((uint64_t *)(v53 + 40 * v54) == sub_1C4A9F4AC(v53, v54, v51))
            {
              v55 = *(unsigned __int16 *)(v51 + 24);
              if ((v55 - 4) <= 8 || v55 == 14 && *(_BYTE *)(*(_QWORD *)(v51 - 8) + 16) == 83)
              {
                v56 = v79;
                if (v79 >= (unint64_t)HIDWORD(v79))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
                  v56 = v79;
                }
                *((_QWORD *)v78 + v56) = v51;
                LODWORD(v79) = v79 + 1;
              }
            }
          }
          goto LABEL_70;
        }
      }
      v30 = *(_QWORD *)(v13 - 8);
      if (v30)
      {
        if (*(_BYTE *)(v30 + 16) == 83)
        {
          sub_1C4774094(v70, *(_QWORD *)(v13 - 8));
          if (v31)
          {
            v32 = *(_DWORD *)(v30 + 20);
            if ((v32 & 0x40000000) == 0)
            {
              v33 = v32 & 0x7FFFFFF;
              v34 = v30 - 32 * v33;
              if (v33)
                break;
              goto LABEL_70;
            }
            v34 = *(_QWORD *)(v30 - 8);
            v33 = v32 & 0x7FFFFFF;
            if (v33)
              break;
          }
        }
      }
LABEL_70:
      v10 = v12 + 1;
      v11 = v72 + 1;
      if ((_DWORD)v79 == v12 + 1)
      {
        if (v12 != -1 && v12)
        {
          v57 = v78;
          v58 = v72 - 1;
          do
          {
            v59 = v57[v58];
            llvm::ScalarEvolution::getRangeRef(a1, v59, a3, 0);
            if (v59)
              v60 = *(unsigned __int16 *)(v59 + 24) == 14;
            else
              v60 = 0;
            if (v60)
            {
              v61 = *(_QWORD *)(v59 - 8);
              if (v61)
              {
                if (*(_BYTE *)(v61 + 16) == 83)
                {
                  v62 = sub_1C477672C((uint64_t)v70, v61);
                  v63 = *(_QWORD *)(a1 + 328);
                  v64 = v63 == *(_QWORD *)(a1 + 320) ? 340 : 336;
                  if (v62 != (_QWORD *)(v63 + 8 * *(unsigned int *)(a1 + v64)))
                  {
                    *v62 = -2;
                    ++*(_DWORD *)(a1 + 344);
                  }
                }
              }
            }
            --v58;
          }
          while (v58);
        }
        goto LABEL_87;
      }
    }
    v35 = v34 + 32 * v33;
    while (1)
    {
      v37 = *(llvm::Value **)(v35 - 32);
      v35 -= 32;
      v36 = v37;
      v38 = *(_QWORD *)(a1 + 104);
      v39 = *(_DWORD *)(a1 + 120);
      if (v39)
      {
        v40 = ((v36 >> 4) ^ (v36 >> 9)) & (v39 - 1);
        v41 = v38 + 48 * v40;
        v42 = *(llvm::Value **)(v41 + 24);
        if (v42 == v36)
          goto LABEL_47;
        v43 = 1;
        while (v42 != (llvm::Value *)-4096)
        {
          v44 = v40 + v43++;
          v40 = v44 & (v39 - 1);
          v41 = v38 + 48 * v40;
          v42 = *(llvm::Value **)(v41 + 24);
          if (v42 == v36)
            goto LABEL_47;
        }
      }
      v41 = v38 + 48 * v39;
LABEL_47:
      if (v41 == v38 + 48 * v39 || (SCEVIter = *(_QWORD *)(v41 + 40)) == 0)
        SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v36);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v73, SCEVIter);
      if (v46)
      {
        v47 = *(_QWORD *)(a1 + v5);
        v48 = *(_DWORD *)(v6 + 16);
        if ((uint64_t *)(v47 + 40 * v48) == sub_1C4A9F4AC(v47, v48, SCEVIter))
        {
          v49 = *(unsigned __int16 *)(SCEVIter + 24);
          if ((v49 - 4) <= 8 || v49 == 14 && *(_BYTE *)(*(_QWORD *)(SCEVIter - 8) + 16) == 83)
          {
            v50 = v79;
            if (v79 >= (unint64_t)HIDWORD(v79))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
              v50 = v79;
            }
            *((_QWORD *)v78 + v50) = SCEVIter;
            LODWORD(v79) = v79 + 1;
          }
        }
      }
      if (v35 == v34)
        goto LABEL_70;
    }
  }
  v68 = v79;
  if (v79 >= HIDWORD(v79))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
    v68 = v79;
  }
  *((_QWORD *)v78 + v68) = a2;
  LODWORD(v79) = v79 + 1;
  if ((_DWORD)v79)
    goto LABEL_10;
LABEL_87:
  RangeRef = llvm::ScalarEvolution::getRangeRef(a1, v69, a3, 0);
  if (v74 != v73)
    free(v74);
  if (v78 != v80)
    free(v78);
  return RangeRef;
}

uint64_t llvm::ScalarEvolution::getRangeRef(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  size_t v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 784;
  v9 = 808;
  if (a3)
    v8 = a1 + 808;
  else
    v9 = 784;
  v10 = *(_QWORD *)(a1 + v9);
  v11 = *(_DWORD *)(v8 + 16);
  v12 = sub_1C4A9F4AC(v10, v11, a2);
  if ((uint64_t *)(v10 + 40 * v11) != v12)
    return (uint64_t)(v12 + 1);
  if (a2 && !*(_WORD *)(a2 + 24))
  {
    v14 = *(_QWORD *)(a2 + 32);
    v15 = *(unsigned int *)(v14 + 32);
    if (v15 > 0x40)
    {
      v18 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
      v19 = (void *)operator new[]();
      memcpy(v19, *(const void **)(v14 + 24), v18);
      v21 = v15;
      v20 = v19;
      LODWORD(v25) = v15;
      v16 = (void *)operator new[]();
      memcpy(v16, v19, v18);
    }
    else
    {
      v16 = *(void **)(v14 + 24);
      v21 = v15;
      v20 = v16;
      LODWORD(v25) = v15;
    }
    v24 = v16;
    llvm::APInt::operator+=((uint64_t)&v24, 1uLL);
    v23 = v25;
    v22 = v24;
    v13 = sub_1C4F27F5C(a1, a2, a3, (uint64_t)&v20);
    if (v23 >= 0x41 && v22)
      MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    if (v21 >= 0x41)
    {
      if (v20)
        MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    }
    return (uint64_t)v13;
  }
  if (dword_1ED7F3F38 >= a4)
    __asm { BR              X11 }
  return llvm::ScalarEvolution::getRangeRefIter(a1, a2, a3);
}

void sub_1C4F26EDC()
{
  JUMPOUT(0x1C4F26860);
}

uint64_t *sub_1C4F27F5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _DWORD *v20;
  int v21;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;

  if (a3)
    v7 = 808;
  else
    v7 = 784;
  if (a3)
    v8 = a1 + 808;
  else
    v8 = a1 + 784;
  v9 = *(_DWORD *)(v8 + 16);
  v10 = a2 >> 4;
  if (v9)
  {
    v11 = *(_QWORD *)(a1 + v7);
    v12 = v9 - 1;
    v13 = (v9 - 1) & (v10 ^ (a2 >> 9));
    v14 = (uint64_t *)(v11 + 40 * v13);
    v15 = *v14;
    if (*v14 == a2)
    {
LABEL_17:
      if (*((_DWORD *)v14 + 4) >= 0x41u)
      {
        v41 = v14[1];
        if (v41)
        {
          v42 = v14;
          MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
          v14 = v42;
        }
      }
      v14[1] = *(_QWORD *)a4;
      *((_DWORD *)v14 + 4) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = 0;
      if (*((_DWORD *)v14 + 8) >= 0x41u)
      {
        v43 = v14[3];
        if (v43)
        {
          v44 = v14;
          MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
          v14 = v44;
        }
      }
      v14[3] = *(_QWORD *)(a4 + 16);
      v21 = *(_DWORD *)(a4 + 24);
      v20 = (_DWORD *)(a4 + 24);
      *((_DWORD *)v14 + 8) = v21;
      goto LABEL_20;
    }
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (uint64_t *)(v11 + 40 * (v19 & v12));
      v15 = *v14;
      if (*v14 == a2)
        goto LABEL_17;
    }
    if (v16)
      v14 = v16;
  }
  else
  {
    v14 = 0;
  }
  v23 = *(_DWORD *)(v8 + 8);
  if (4 * v23 + 4 >= 3 * v9)
  {
    sub_1C4F569F4((uint64_t *)v8, 2 * v9);
    v26 = *(_QWORD *)(a1 + v7);
    v27 = *(_DWORD *)(v8 + 16) - 1;
    v28 = v27 & (v10 ^ (a2 >> 9));
    v14 = (uint64_t *)(v26 + 40 * v28);
    v29 = *v14;
    if (*v14 != a2)
    {
      v30 = 0;
      v31 = 1;
      while (v29 != -4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == -8192;
        if (v32)
          v30 = v14;
        v33 = v28 + v31++;
        v28 = v33 & v27;
        v14 = (uint64_t *)(v26 + 40 * (v33 & v27));
        v29 = *v14;
        if (*v14 == a2)
          goto LABEL_38;
      }
      goto LABEL_50;
    }
LABEL_38:
    v24 = a2;
    goto LABEL_26;
  }
  if (v9 + ~v23 - *(_DWORD *)(v8 + 12) <= v9 >> 3)
  {
    sub_1C4F569F4((uint64_t *)v8, v9);
    v34 = *(_QWORD *)(a1 + v7);
    v35 = *(_DWORD *)(v8 + 16) - 1;
    v36 = v35 & (v10 ^ (a2 >> 9));
    v14 = (uint64_t *)(v34 + 40 * v36);
    v37 = *v14;
    if (*v14 != a2)
    {
      v30 = 0;
      v38 = 1;
      while (v37 != -4096)
      {
        if (v30)
          v39 = 0;
        else
          v39 = v37 == -8192;
        if (v39)
          v30 = v14;
        v40 = v36 + v38++;
        v36 = v40 & v35;
        v14 = (uint64_t *)(v34 + 40 * (v40 & v35));
        v37 = *v14;
        if (*v14 == a2)
          goto LABEL_38;
      }
LABEL_50:
      if (v30)
        v14 = v30;
      goto LABEL_25;
    }
    goto LABEL_38;
  }
LABEL_25:
  v24 = *v14;
LABEL_26:
  ++*(_DWORD *)(v8 + 8);
  if (v24 != -4096)
    --*(_DWORD *)(v8 + 12);
  *v14 = a2;
  *((_DWORD *)v14 + 4) = *(_DWORD *)(a4 + 8);
  v14[1] = *(_QWORD *)a4;
  *(_DWORD *)(a4 + 8) = 0;
  v25 = *(_DWORD *)(a4 + 24);
  v20 = (_DWORD *)(a4 + 24);
  *((_DWORD *)v14 + 8) = v25;
  v14[3] = *((_QWORD *)v20 - 1);
LABEL_20:
  *v20 = 0;
  return v14 + 1;
}

uint64_t llvm::ScalarEvolution::isKnownNonPositive(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  llvm::ConstantRange *RangeRef;
  int v3;
  int v5;
  uint64_t v6;
  unsigned int v7;

  RangeRef = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
  llvm::ConstantRange::getSignedMax(RangeRef, (llvm::APInt *)&v6);
  v3 = sub_1C49591DC((llvm::APInt *)&v6);
  if (v7 >= 0x41 && v6)
  {
    v5 = v3;
    MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
    v3 = v5;
  }
  return v3 ^ 1u;
}

void llvm::ScalarEvolution::getRangeForAffineAR(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4)
{
  __asm { BR              X11 }
}

void sub_1C4F282F4()
{
  JUMPOUT(0x1C4F282E0);
}

void sub_1C4F28300()
{
  JUMPOUT(0x1C4F282F8);
}

void *sub_1C4F28308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ConstantRange *RangeRef;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ConstantRange *v18;
  uint64_t v19;
  uint64_t v20;
  void *result;
  void *v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  void *v32;
  unsigned int v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  unsigned int v39;
  void *v40;
  unsigned int v41;
  void *v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;

  llvm::ScalarEvolution::getNoopOrZeroExtend(v7, a4);
  RangeRef = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(v7, v10, 0, 0);
  llvm::ConstantRange::getUnsignedMax(RangeRef, (llvm::APInt *)(v9 - 80));
  v12 = llvm::ScalarEvolution::getRangeRef(v7, v6, 1u, 0);
  v13 = v12;
  v14 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v9 - 104) = v14;
  if (v14 > 0x40)
  {
    v22 = (void *)operator new[]();
    *(_QWORD *)(v9 - 112) = v22;
    memcpy(v22, *(const void **)v13, (((unint64_t)*(unsigned int *)(v9 - 104) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(v9 - 112) = *(_QWORD *)v12;
  }
  v15 = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v9 - 88) = v15;
  if (v15 > 0x40)
  {
    v23 = (void *)operator new[]();
    *(_QWORD *)(v9 - 96) = v23;
    memcpy(v23, *(const void **)(v13 + 16), (((unint64_t)*(unsigned int *)(v9 - 88) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(v9 - 96) = *(_QWORD *)(v13 + 16);
  }
  v16 = llvm::ScalarEvolution::getRangeRef(v7, v8, 1u, 0);
  v17 = v16;
  v43 = *(_DWORD *)(v16 + 8);
  if (v43 > 0x40)
  {
    v42 = (void *)operator new[]();
    memcpy(v42, *(const void **)v17, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v42 = *(void **)v16;
  }
  v45 = *(_DWORD *)(v17 + 24);
  if (v45 > 0x40)
  {
    v44 = (void *)operator new[]();
    memcpy(v44, *(const void **)(v17 + 16), (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v44 = *(void **)(v17 + 16);
  }
  llvm::ConstantRange::getSignedMin((uint64_t)&v42, (llvm::APInt *)&v36);
  sub_1C4F29694((unint64_t *)&v38, (llvm::APInt *)&v36, (uint64_t *)(v9 - 112), (_DWORD *)(v9 - 80), v5, 1);
  if (v37 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)&v42, (llvm::APInt *)&v26);
  sub_1C4F29694((unint64_t *)&v28, (llvm::APInt *)&v26, (uint64_t *)(v9 - 112), (_DWORD *)(v9 - 80), v5, 1);
  llvm::ConstantRange::unionWith((uint64_t)&v38, (unsigned int *)&v28, 0, (uint64_t)&v32);
  if (v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  v38 = v32;
  v39 = v33;
  v33 = 0;
  if (v41 >= 0x41 && v40)
  {
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
    v40 = v34;
    v41 = v35;
    v35 = 0;
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  else
  {
    v40 = v34;
    v41 = v35;
    v35 = 0;
  }
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  v18 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(v7, v8, 0, 0);
  llvm::ConstantRange::getUnsignedMax(v18, (llvm::APInt *)&v24);
  v19 = llvm::ScalarEvolution::getRangeRef(v7, v6, 0, 0);
  v20 = v19;
  v29 = *(_DWORD *)(v19 + 8);
  if (v29 > 0x40)
  {
    v28 = (void *)operator new[]();
    memcpy(v28, *(const void **)v20, (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v28 = *(void **)v19;
  }
  v31 = *(_DWORD *)(v20 + 24);
  if (v31 > 0x40)
  {
    v30 = (void *)operator new[]();
    memcpy(v30, *(const void **)(v20 + 16), (((unint64_t)v31 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v30 = *(void **)(v20 + 16);
  }
  sub_1C4F29694((unint64_t *)&v32, (llvm::APInt *)&v24, (uint64_t *)&v28, (_DWORD *)(v9 - 80), v5, 0);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  result = (void *)llvm::ConstantRange::intersectWith((uint64_t)&v38, (llvm::ConstantRange *)&v32, 0, v4);
  if (v35 >= 0x41)
  {
    result = v34;
    if (v34)
      result = (void *)MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  }
  if (v33 >= 0x41)
  {
    result = v32;
    if (v32)
      result = (void *)MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  if (v41 >= 0x41)
  {
    result = v40;
    if (v40)
      result = (void *)MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  }
  if (v39 >= 0x41)
  {
    result = v38;
    if (v38)
      result = (void *)MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  }
  if (v45 >= 0x41)
  {
    result = v44;
    if (v44)
      result = (void *)MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  }
  if (v43 >= 0x41)
  {
    result = v42;
    if (v42)
      result = (void *)MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(v9 - 88) >= 0x41u)
  {
    result = *(void **)(v9 - 96);
    if (result)
      result = (void *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(v9 - 104) >= 0x41u)
  {
    result = *(void **)(v9 - 112);
    if (result)
      result = (void *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(v9 - 72) >= 0x41u)
  {
    result = *(void **)(v9 - 80);
    if (result)
      return (void *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ScalarEvolution::getRangeViaFactoring(llvm::ConstantInt ****this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::SCEV *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  const llvm::APInt *v15;
  llvm::ConstantInt *v16;
  const llvm::SCEV *Constant;
  const llvm::APInt *v18;
  llvm::ConstantInt *v19;
  const llvm::SCEV *v20;
  const llvm::APInt *v21;
  llvm::ConstantInt *v22;
  const llvm::SCEV *v23;
  const llvm::APInt *v24;
  llvm::ConstantInt *v25;
  const llvm::SCEV *v26;
  unsigned int v27[8];
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;

  sub_1C4F2A83C((uint64_t)&v32, a5, (uint64_t)a2);
  if (v32)
  {
    sub_1C4F2A83C((uint64_t)&v29, a5, (uint64_t)a3);
    if (v29 && v32 == v29)
    {
      v16 = llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v33, v15);
      Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v16);
      v19 = llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v30, v18);
      v20 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v19);
      v22 = llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v35, v21);
      v23 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v22);
      v25 = llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v31, v24);
      v26 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v25);
      llvm::ScalarEvolution::getRangeForAffineAR((llvm::ScalarEvolution *)this, Constant, v20, a4);
      llvm::ScalarEvolution::getRangeForAffineAR((llvm::ScalarEvolution *)this, v23, v26, a4);
      llvm::ConstantRange::unionWith((uint64_t)v28, v27, 0, a6);
      sub_1C4E8C6FC((uint64_t)v27);
      sub_1C4E8C6FC((uint64_t)v28);
    }
    else
    {
      llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a6, a5, 1);
    }
    sub_1C6176B88((uint64_t)&v29);
  }
  else
  {
    *(_DWORD *)(a6 + 8) = a5;
    if (a5 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a6, -1, 1);
      v12 = *(unsigned int *)(a6 + 8);
      *(_DWORD *)(a6 + 24) = v12;
      if (v12 > 0x40)
      {
        v13 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
        v14 = (void *)operator new[]();
        *(_QWORD *)(a6 + 16) = v14;
        memcpy(v14, *(const void **)a6, v13);
        goto LABEL_7;
      }
    }
    else
    {
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
      if (!a5)
        v11 = 0;
      *(_QWORD *)a6 = v11;
      *(_DWORD *)(a6 + 24) = a5;
    }
    *(_QWORD *)(a6 + 16) = *(_QWORD *)a6;
  }
LABEL_7:
  if (v36 >= 0x41 && v35)
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  if (v34 >= 0x41)
  {
    if (v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
  }
}

void llvm::ScalarEvolution::getRangeForAffineNoSelfWrappingAR(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 40);
  if (v10 == 2)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 32);
    v19 = v21;
    v20 = 0x300000000;
    v17 = 8 * v10 - 8;
    if ((unint64_t)v17 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v17 >> 3, 8);
      v18 = v20;
    }
    else
    {
      v18 = 0;
    }
    if (v10 != 1)
    {
      memcpy((char *)v19 + 8 * v18, (const void *)(v16 + 8), 8 * v10 - 8);
      v18 = v20;
    }
    LODWORD(v20) = v18 + ((unint64_t)v17 >> 3);
    v11 = sub_1C618AB20(a1, (uint64_t)&v19, *(uint64_t ***)(a2 + 48));
    if (v19 != v21)
      free(v19);
  }
  if (!*(_WORD *)(v11 + 24))
    __asm { BR              X11 }
  *(_DWORD *)(a5 + 8) = a4;
  if (a4 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a5, -1, 1);
    v13 = *(unsigned int *)(a5 + 8);
    *(_DWORD *)(a5 + 24) = v13;
    if (v13 > 0x40)
    {
      v14 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
      v15 = (void *)operator new[]();
      *(_QWORD *)(a5 + 16) = v15;
      memcpy(v15, *(const void **)a5, v14);
      return;
    }
  }
  else
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
    if (!a4)
      v12 = 0;
    *(_QWORD *)a5 = v12;
    *(_DWORD *)(a5 + 24) = a4;
  }
  *(_QWORD *)(a5 + 16) = *(_QWORD *)a5;
}

void sub_1C4F29694(unint64_t *a1, llvm::APInt *this, uint64_t *a3, _DWORD *a4, unsigned int a5, int a6)
{
  unsigned int v12;
  llvm::APInt *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  llvm::APInt *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  size_t v39;
  void *v40;
  const void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  size_t v46;
  void *v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  uint64_t v51;
  size_t v52;
  void *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BOOL4 v68;
  void *v69;
  uint64_t v70;
  unsigned int v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  void *v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unsigned int v81;

  v12 = *((_DWORD *)this + 2);
  v13 = this;
  if (v12 >= 0x41)
  {
    if (v12 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
      goto LABEL_5;
    v13 = *(llvm::APInt **)this;
  }
  if (!*(_QWORD *)v13)
  {
LABEL_19:
    v20 = *((unsigned int *)a3 + 2);
    *((_DWORD *)a1 + 2) = v20;
    if (v20 > 0x40)
    {
      v46 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
      v47 = (void *)operator new[]();
      *a1 = (unint64_t)v47;
      memcpy(v47, (const void *)*a3, v46);
    }
    else
    {
      *a1 = *a3;
    }
    v21 = *((unsigned int *)a3 + 6);
    *((_DWORD *)a1 + 6) = v21;
    if (v21 > 0x40)
    {
      v39 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
      v40 = (void *)operator new[]();
      a1[2] = (unint64_t)v40;
      v41 = (const void *)a3[2];
      goto LABEL_110;
    }
    v22 = a3[2];
    goto LABEL_39;
  }
LABEL_5:
  v14 = a4[2];
  if (v14 < 0x41 || v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4) <= 0x40)
  {
    v15 = *(_QWORD **)a4;
    if (v14 < 0x41)
      v15 = a4;
    if (!*v15)
      goto LABEL_19;
  }
  v16 = *((unsigned int *)a3 + 2);
  if (v16 > 0x40)
  {
    if (!memcmp((const void *)*a3, (const void *)a3[2], ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a3) == (_DWORD)v16)
    {
LABEL_75:
      *((_DWORD *)a1 + 2) = a5;
      if (a5 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)a1, -1, 1);
        v38 = *((unsigned int *)a1 + 2);
        *((_DWORD *)a1 + 6) = v38;
        if (v38 > 0x40)
        {
          v39 = ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8;
          v40 = (void *)operator new[]();
          a1[2] = (unint64_t)v40;
          v41 = (const void *)*a1;
LABEL_110:
          memcpy(v40, v41, v39);
          return;
        }
        goto LABEL_38;
      }
LABEL_35:
      v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
      if (!a5)
        v25 = 0;
      *a1 = v25;
      *((_DWORD *)a1 + 6) = a5;
LABEL_38:
      v22 = *a1;
LABEL_39:
      a1[2] = v22;
      return;
    }
  }
  else if (*a3 == a3[2] && (!(_DWORD)v16 || *a3 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v16))
  {
    goto LABEL_75;
  }
  if (a6)
  {
    v17 = v12 - 1;
    v18 = this;
    if (v12 >= 0x41)
      v18 = (llvm::APInt *)(*(_QWORD *)this + 8 * (v17 >> 6));
    v19 = (*(_QWORD *)v18 >> v17) & 1;
    sub_1C4DA6CE8((const void **)this, (uint64_t)&v80);
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
    *(_QWORD *)this = v80;
    *((_DWORD *)this + 2) = v81;
    LODWORD(v16) = *((_DWORD *)a3 + 2);
  }
  else
  {
    LODWORD(v19) = 0;
  }
  v79 = v16;
  if (v16 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v78, -1, 1);
  }
  else
  {
    v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    if (!(_DWORD)v16)
      v23 = 0;
    v78 = v23;
  }
  llvm::APInt::udiv((llvm::APInt *)&v78, this, (llvm::APInt *)&v80);
  if (v81 > 0x40)
  {
    v42 = (((unint64_t)v81 + 63) >> 3) & 0x3FFFFFF8;
    while (v42)
    {
      v43 = *(_QWORD *)(v80 + v42 - 8);
      v44 = *(_QWORD *)(*(_QWORD *)a4 - 8 + v42);
      v42 -= 8;
      if (v43 != v44)
      {
        v45 = v43 <= v44;
LABEL_107:
        MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
        v24 = v45;
        goto LABEL_30;
      }
    }
    v45 = 0;
    v24 = 0;
    if (v80)
      goto LABEL_107;
  }
  else
  {
    v24 = v80 < *(_QWORD *)a4;
  }
LABEL_30:
  if (v79 >= 0x41 && v78)
    MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
  if (v24)
  {
    *((_DWORD *)a1 + 2) = a5;
    if (a5 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a1, -1, 1);
      v48 = *((unsigned int *)a1 + 2);
      *((_DWORD *)a1 + 6) = v48;
      if (v48 > 0x40)
      {
        v49 = ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8;
        v50 = (void *)operator new[]();
        a1[2] = (unint64_t)v50;
        memcpy(v50, (const void *)*a1, v49);
        return;
      }
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  llvm::APInt::operator*((uint64_t)this, a4, (uint64_t)&v80);
  v26 = *((unsigned int *)a3 + 2);
  if (v26 > 0x40)
  {
    v27 = (void *)operator new[]();
    memcpy(v27, (const void *)*a3, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v27 = (void *)*a3;
  }
  v77 = *((_DWORD *)a3 + 6);
  if (v77 > 0x40)
  {
    v76 = (void *)operator new[]();
    memcpy(v76, (const void *)a3[2], (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v76 = (void *)a3[2];
  }
  llvm::APInt::operator-=((uint64_t)&v76, 1uLL);
  v28 = v77;
  v29 = (uint64_t *)v76;
  v77 = 0;
  v30 = v81;
  v69 = v76;
  if ((_DWORD)v19)
  {
    if (v81 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v80);
    }
    else
    {
      v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
      if (!v81)
        v31 = 0;
      v80 = v31 & ~v80;
    }
    llvm::APInt::operator++((uint64_t)&v80);
    v30 = v81;
    if (v81 >= 0x41)
    {
      v54 = 0;
      v55 = (unint64_t *)v80;
      v56 = ((unint64_t)v81 + 63) >> 6;
      v57 = (uint64_t *)v27;
      v58 = v56;
      do
      {
        v59 = *v57++;
        v60 = v59 + *v55;
        v61 = v60 + 1 <= *v55;
        if (v54)
        {
          ++v60;
          v54 = v61;
        }
        else
        {
          v54 = v60 < *v55;
        }
        *v55++ = v60;
        --v58;
      }
      while (v58);
      *(_QWORD *)(v80 + 8 * (v56 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
      v30 = v81;
    }
    else
    {
      if (v81)
        v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
      else
        v32 = 0;
      v80 = v32 & ((unint64_t)v27 + v80);
    }
    v33 = v30;
  }
  else
  {
    if (v81 >= 0x41)
    {
      v62 = 0;
      v63 = (unint64_t *)v80;
      v64 = ((unint64_t)v81 + 63) >> 6;
      v65 = v64;
      do
      {
        v66 = *v29++;
        v67 = v66 + *v63;
        v68 = v67 + 1 <= *v63;
        if (v62)
        {
          ++v67;
          v62 = v68;
        }
        else
        {
          v62 = v67 < *v63;
        }
        *v63++ = v67;
        --v65;
      }
      while (v65);
      *(_QWORD *)(v80 + 8 * (v64 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
      v30 = v81;
    }
    else
    {
      if (v81)
        v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
      else
        v34 = 0;
      v80 = v34 & ((unint64_t)v76 + v80);
    }
    v33 = v26;
  }
  v79 = v30;
  v35 = (void *)v80;
  v78 = v80;
  v81 = 0;
  if (!llvm::ConstantRange::contains((llvm::ConstantRange *)a3, (const llvm::APInt *)&v78))
  {
    if ((_DWORD)v19)
      v37 = v35;
    else
      v37 = v27;
    if ((_DWORD)v19)
    {
      v79 = 0;
      v75 = v28;
      v35 = v69;
      v28 = 0;
    }
    else
    {
      LODWORD(v26) = 0;
      v75 = v30;
      v79 = 0;
    }
    v74 = (uint64_t)v35;
    llvm::APInt::operator+=((uint64_t)&v74, 1uLL);
    v73 = v33;
    v72 = v37;
    v71 = v75;
    v70 = v74;
    v75 = 0;
    sub_1C4E8FBB0((uint64_t)&v72, &v70, (llvm::APInt *)a1);
    if (v71 >= 0x41 && v70)
      MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
    if (v73 >= 0x41 && v72)
      MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
    if (v75 >= 0x41 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    goto LABEL_88;
  }
  *((_DWORD *)a1 + 2) = a5;
  if (a5 <= 0x40)
  {
    if (a5)
      v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    else
      v36 = 0;
    *a1 = v36;
    *((_DWORD *)a1 + 6) = a5;
    goto LABEL_67;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)a1, -1, 1);
  v51 = *((unsigned int *)a1 + 2);
  *((_DWORD *)a1 + 6) = v51;
  if (v51 <= 0x40)
  {
LABEL_67:
    a1[2] = *a1;
    goto LABEL_88;
  }
  v52 = ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8;
  v53 = (void *)operator new[]();
  a1[2] = (unint64_t)v53;
  memcpy(v53, (const void *)*a1, v52);
LABEL_88:
  if (v79 >= 0x41 && v78)
    MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
  if (v28 >= 0x41 && v69)
    MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
  if (v26 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  if (v81 >= 0x41 && v80)
    MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
}

unint64_t llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t RangeRef;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::APInt *v38;
  int v39;
  int64_t v40;
  unint64_t v42;
  unsigned int v43;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  void *v55;
  unsigned int v56;
  void *v57;
  unsigned int v58;
  void *v59;
  unsigned int v60;
  void *v61;
  unsigned int v62;
  void *v63;
  unsigned int v64;
  void *v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;

  if (sub_1C4F40FE8(a3, a4))
  {
    if (a2 >= 0x2A)
      return 0;
    else
      return (0x2A90000AA00uLL >> a2) & 1;
  }
  if (a2 == 32)
    return 0;
  if (a2 == 33)
  {
    RangeRef = llvm::ScalarEvolution::getRangeRef(a1, a3, 1, 0);
    v10 = RangeRef;
    v11 = *(unsigned int *)(RangeRef + 8);
    v68 = v11;
    if (v11 > 0x40)
    {
      v45 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      v67 = (_QWORD *)operator new[]();
      memcpy(v67, *(const void **)v10, v45);
    }
    else
    {
      v67 = *(_QWORD **)RangeRef;
    }
    v12 = *(unsigned int *)(v10 + 24);
    v70 = v12;
    if (v12 > 0x40)
    {
      v46 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
      v69 = (void *)operator new[]();
      memcpy(v69, *(const void **)(v10 + 16), v46);
    }
    else
    {
      v69 = *(void **)(v10 + 16);
    }
    v13 = llvm::ScalarEvolution::getRangeRef(a1, a4, 1, 0);
    v14 = v13;
    v15 = *(unsigned int *)(v13 + 8);
    v64 = v15;
    if (v15 > 0x40)
    {
      v47 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
      v63 = (void *)operator new[]();
      memcpy(v63, *(const void **)v14, v47);
    }
    else
    {
      v63 = *(void **)v13;
    }
    v16 = *(unsigned int *)(v14 + 24);
    v66 = v16;
    if (v16 > 0x40)
    {
      v48 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      v65 = (void *)operator new[]();
      memcpy(v65, *(const void **)(v14 + 16), v48);
    }
    else
    {
      v65 = *(void **)(v14 + 16);
    }
    if ((llvm::ConstantRange::icmp((int)&v67, 33, (int)&v63) & 1) != 0)
    {
      v17 = 1;
    }
    else
    {
      v25 = llvm::ScalarEvolution::getRangeRef(a1, a3, 0, 0);
      v26 = v25;
      v60 = *(_DWORD *)(v25 + 8);
      if (v60 > 0x40)
      {
        v59 = (void *)operator new[]();
        memcpy(v59, *(const void **)v26, (((unint64_t)v60 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v59 = *(void **)v25;
      }
      v62 = *(_DWORD *)(v26 + 24);
      if (v62 > 0x40)
      {
        v61 = (void *)operator new[]();
        memcpy(v61, *(const void **)(v26 + 16), (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v61 = *(void **)(v26 + 16);
      }
      v27 = llvm::ScalarEvolution::getRangeRef(a1, a4, 0, 0);
      v28 = v27;
      v56 = *(_DWORD *)(v27 + 8);
      if (v56 > 0x40)
      {
        v55 = (void *)operator new[]();
        memcpy(v55, *(const void **)v28, (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v55 = *(void **)v27;
      }
      v58 = *(_DWORD *)(v28 + 24);
      if (v58 > 0x40)
      {
        v57 = (void *)operator new[]();
        memcpy(v57, *(const void **)(v28 + 16), (((unint64_t)v58 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v57 = *(void **)(v28 + 16);
      }
      v17 = llvm::ConstantRange::icmp((int)&v59, 33, (int)&v55);
      if (v58 >= 0x41 && v57)
        MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
      if (v56 >= 0x41 && v55)
        MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
      if (v62 >= 0x41 && v61)
        MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
      if (v60 >= 0x41 && v59)
        MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    }
    if (v66 >= 0x41 && v65)
      MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
    if (v64 >= 0x41 && v63)
      MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
    if (v70 >= 0x41 && v69)
      MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
    if (v68 >= 0x41 && v67)
      MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
    if ((v17 & 1) != 0)
      return 1;
    llvm::ScalarEvolution::getMinusSCEV(a1, a3, a4);
    v8 = 0;
    if (*(_WORD *)(v37 + 24) == 15)
      return v8;
    v38 = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(a1, v37, 0, 0);
    llvm::ConstantRange::getUnsignedMin(v38, (llvm::APInt *)&v67);
    if (v68 < 0x41)
      return v67 != 0;
    v39 = 0;
    v40 = ((unint64_t)v68 + 63) >> 6;
    do
    {
      if (v40-- < 1)
        break;
      v42 = v67[v40];
      v39 += __clz(v42);
    }
    while (!v42);
    v43 = v68 | 0xFFFFFFC0;
    if ((v68 & 0x3F) == 0)
      v43 = 0;
    if (v68 - v39 - v43 > 0x40)
    {
      v8 = 1;
      if (!v67)
        return v8;
    }
    else
    {
      v8 = *v67 != 0;
    }
LABEL_68:
    MEMORY[0x1CAA32F9C]();
    return v8;
  }
  if (a2 - 38 > 3)
  {
    v29 = llvm::ScalarEvolution::getRangeRef(a1, a3, 0, 0);
    v30 = v29;
    v31 = *(unsigned int *)(v29 + 8);
    v68 = v31;
    if (v31 > 0x40)
    {
      v53 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
      v67 = (_QWORD *)operator new[]();
      memcpy(v67, *(const void **)v30, v53);
    }
    else
    {
      v67 = *(_QWORD **)v29;
    }
    v32 = *(unsigned int *)(v30 + 24);
    v70 = v32;
    if (v32 > 0x40)
    {
      v54 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
      v69 = (void *)operator new[]();
      memcpy(v69, *(const void **)(v30 + 16), v54);
    }
    else
    {
      v69 = *(void **)(v30 + 16);
    }
    v22 = a1;
    v23 = a4;
    v24 = 0;
  }
  else
  {
    v18 = llvm::ScalarEvolution::getRangeRef(a1, a3, 1, 0);
    v19 = v18;
    v20 = *(unsigned int *)(v18 + 8);
    v68 = v20;
    if (v20 > 0x40)
    {
      v51 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
      v67 = (_QWORD *)operator new[]();
      memcpy(v67, *(const void **)v19, v51);
    }
    else
    {
      v67 = *(_QWORD **)v18;
    }
    v21 = *(unsigned int *)(v19 + 24);
    v70 = v21;
    if (v21 > 0x40)
    {
      v52 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
      v69 = (void *)operator new[]();
      memcpy(v69, *(const void **)(v19 + 16), v52);
    }
    else
    {
      v69 = *(void **)(v19 + 16);
    }
    v22 = a1;
    v23 = a4;
    v24 = 1;
  }
  v33 = llvm::ScalarEvolution::getRangeRef(v22, v23, v24, 0);
  v34 = v33;
  v35 = *(unsigned int *)(v33 + 8);
  v64 = v35;
  if (v35 > 0x40)
  {
    v49 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
    v63 = (void *)operator new[]();
    memcpy(v63, *(const void **)v34, v49);
  }
  else
  {
    v63 = *(void **)v33;
  }
  v36 = *(unsigned int *)(v34 + 24);
  v66 = v36;
  if (v36 > 0x40)
  {
    v50 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
    v65 = (void *)operator new[]();
    memcpy(v65, *(const void **)(v34 + 16), v50);
  }
  else
  {
    v65 = *(void **)(v34 + 16);
  }
  v8 = llvm::ConstantRange::icmp((int)&v67, a2, (int)&v63);
  if (v66 >= 0x41 && v65)
    MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
  if (v64 >= 0x41 && v63)
    MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
  if (v70 >= 0x41 && v69)
    MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
  if (v68 >= 0x41 && v67)
    goto LABEL_68;
  return v8;
}

uint64_t sub_1C4F2A83C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void **v6;
  void **v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  void *__dst;
  unsigned int v54;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (void **)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = (void **)(a1 + 24);
  *(_DWORD *)(a1 + 32) = 1;
  v54 = a2;
  if (a2 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
  else
    __dst = 0;
  v8 = *(unsigned __int16 *)(a3 + 24);
  if (a3 && v8 == 4)
  {
    if (*(_QWORD *)(a3 + 40) != 2)
      goto LABEL_35;
    v9 = *(_QWORD **)(a3 + 32);
    if (*(_WORD *)(*v9 + 24))
      goto LABEL_35;
    v10 = *(_QWORD *)(*v9 + 32);
    v11 = *(_DWORD *)(v10 + 32);
    if (v54 > 0x40 || v11 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, v11);
      if (v54 <= 0x40)
        __dst = *(void **)(v10 + 24);
      else
        memcpy(__dst, *(const void **)(v10 + 24), (((unint64_t)v54 + 63) >> 3) & 0x3FFFFFF8);
      v9 = *(_QWORD **)(a3 + 32);
    }
    else
    {
      __dst = *(void **)(v10 + 24);
      v54 = v11;
    }
    a3 = v9[1];
    v8 = *(unsigned __int16 *)(a3 + 24);
  }
  v12 = v8 - 4;
  if ((v8 - 4) >= 0xFFFFFFFD)
  {
    a3 = *(_QWORD *)(a3 + 32);
    v13 = *(unsigned __int16 *)(a3 + 24);
  }
  else
  {
    v13 = v8;
    v8 = 0;
  }
  v51 = 0;
  v52 = 0;
  if (v13 != 14)
    goto LABEL_34;
  v14 = *(_QWORD *)(a3 - 8);
  v48 = a1;
  v49[0] = &v52;
  v49[1] = 0;
  v50[0] = &v51;
  v50[1] = 0;
  if (*(_BYTE *)(v14 + 16) != 85)
    goto LABEL_34;
  v15 = *(_DWORD *)(v14 + 20);
  v16 = (v15 & 0x40000000) != 0 ? *(uint64_t **)(v14 - 8) : (uint64_t *)(v14 - 32 * (v15 & 0x7FFFFFF));
  v17 = *v16;
  if (v17
    && ((*(_QWORD *)a1 = v17, v18 = *(_DWORD *)(v14 + 20), (v18 & 0x40000000) != 0)
      ? (v19 = *(_QWORD *)(v14 - 8))
      : (v19 = v14 - 32 * (v18 & 0x7FFFFFF)),
        sub_1C4D89F84((uint64_t)v49, *(unsigned __int8 **)(v19 + 32))
     && ((v20 = *(_DWORD *)(v14 + 20), (v20 & 0x40000000) != 0)
       ? (v21 = *(_QWORD *)(v14 - 8))
       : (v21 = v14 - 32 * (v20 & 0x7FFFFFF)),
         (sub_1C4D89F84((uint64_t)v50, *(unsigned __int8 **)(v21 + 64)) & 1) != 0)))
  {
    v22 = v52;
    if (*(_DWORD *)(a1 + 16) > 0x40u || *(_DWORD *)(v52 + 8) > 0x40u)
    {
      if (v6 != (void **)v52)
      {
        llvm::APInt::reallocate((uint64_t)v6, *(_DWORD *)(v52 + 8));
        v31 = *(unsigned int *)(a1 + 16);
        if (v31 <= 0x40)
          *v6 = *(void **)v22;
        else
          memcpy(*v6, *(const void **)v22, ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v52;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v22 + 8);
    }
    v24 = v51;
    if (*(_DWORD *)(a1 + 32) > 0x40u || *(_DWORD *)(v51 + 8) > 0x40u)
    {
      if (v7 != (void **)v51)
      {
        llvm::APInt::reallocate((uint64_t)v7, *(_DWORD *)(v51 + 8));
        v32 = *(unsigned int *)(a1 + 32);
        if (v32 <= 0x40)
          *v7 = *(void **)v24;
        else
          memcpy(*v7, *(const void **)v24, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)v51;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v24 + 8);
    }
    if (v12 >= 0xFFFFFFFD)
    {
      if (v8 == 1)
      {
        llvm::APInt::trunc((llvm::APInt *)v6, a2, (llvm::APInt *)&v48);
        if (*(_DWORD *)(a1 + 16) >= 0x41u && *v6)
          MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
        *(_QWORD *)(a1 + 8) = v48;
        *(_DWORD *)(a1 + 16) = v49[0];
        llvm::APInt::trunc((llvm::APInt *)v7, a2, (llvm::APInt *)&v48);
      }
      else if (v8 == 2)
      {
        llvm::APInt::zext((llvm::APInt *)v6, a2, (uint64_t)&v48);
        if (*(_DWORD *)(a1 + 16) >= 0x41u && *v6)
          MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
        *(_QWORD *)(a1 + 8) = v48;
        *(_DWORD *)(a1 + 16) = v49[0];
        llvm::APInt::zext((llvm::APInt *)v7, a2, (uint64_t)&v48);
      }
      else
      {
        llvm::APInt::sext((llvm::APInt *)v6, a2, (llvm::APInt *)&v48);
        if (*(_DWORD *)(a1 + 16) >= 0x41u && *v6)
          MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
        *(_QWORD *)(a1 + 8) = v48;
        *(_DWORD *)(a1 + 16) = v49[0];
        llvm::APInt::sext((llvm::APInt *)v7, a2, (llvm::APInt *)&v48);
      }
      if (*(_DWORD *)(a1 + 32) >= 0x41u && *v7)
        MEMORY[0x1CAA32F9C](*v7, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 24) = v48;
      *(_DWORD *)(a1 + 32) = v49[0];
    }
    v25 = *(unsigned int *)(a1 + 16);
    if (v25 >= 0x41)
    {
      v33 = 0;
      v34 = 0;
      v35 = (char *)*v6;
      v26 = (uint64_t *)__dst;
      v36 = (unint64_t)(v25 + 63) >> 6;
      do
      {
        v37 = *(_QWORD *)&v35[v33 * 8];
        v38 = v26[v33] + v37;
        v39 = v38 < v37;
        v40 = v38 + 1 <= v37;
        if (v34)
        {
          ++v38;
          v34 = v40;
        }
        else
        {
          v34 = v39;
        }
        *(_QWORD *)&v35[v33 * 8] = v38;
        ++v33;
      }
      while (v36 != v33);
      *((_QWORD *)*v6 + (v36 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
    }
    else
    {
      v26 = (uint64_t *)__dst;
      if ((_DWORD)v25)
        v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
      else
        v27 = 0;
      *v6 = (void *)(v27 & ((unint64_t)__dst + (_QWORD)*v6));
    }
    v28 = *(unsigned int *)(a1 + 32);
    if (v28 >= 0x41)
    {
      v41 = 0;
      v42 = (unint64_t *)*v7;
      v43 = (unint64_t)(v28 + 63) >> 6;
      v44 = v43;
      do
      {
        v45 = *v26++;
        v46 = v45 + *v42;
        v47 = v46 + 1 <= *v42;
        if (v41)
        {
          ++v46;
          v41 = v47;
        }
        else
        {
          v41 = v46 < *v42;
        }
        *v42++ = v46;
        --v44;
      }
      while (v44);
      *((_QWORD *)*v7 + (v43 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
    }
    else
    {
      v29 = (unint64_t)v26 + (_QWORD)*v7;
      if ((_DWORD)v28)
        v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
      else
        v30 = 0;
      *v7 = (void *)(v30 & v29);
    }
  }
  else
  {
LABEL_34:
    *(_QWORD *)a1 = 0;
  }
LABEL_35:
  if (v54 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  return a1;
}

uint64_t llvm::ScalarEvolution::getNoWrapFlagsFromUB(llvm::ScalarEvolution *this, const llvm::Value *a2)
{
  unsigned int v2;

  if (*((_BYTE *)a2 + 16) == 5)
    return 0;
  v2 = *((_BYTE *)a2 + 17) & 6;
  if ((*((_BYTE *)a2 + 17) & 6) == 0)
    return 0;
  if (llvm::ScalarEvolution::isSCEVExprNeverPoison(this, a2))
    return v2;
  return 0;
}

BOOL llvm::ScalarEvolution::isSCEVExprNeverPoison(llvm::ScalarEvolution *this, const llvm::Instruction *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  char *v8;
  llvm::Value *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  llvm::Value *v14;
  int v15;
  unsigned int v16;
  uint64_t SCEVIter;
  uint64_t *v18;
  const llvm::Instruction *DefiningScopeBound;
  _BOOL8 isGuaranteedToTransferExecutionTo;
  char v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[7];

  v25[6] = *MEMORY[0x1E0C80C00];
  if (!sub_1C4F8CF08((uint64_t)a2, 1, 0))
    return 0;
  v23 = v25;
  v24 = 0x600000000;
  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (char *)*((_QWORD *)a2 - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (char *)a2 - 32 * v5;
  }
  v7 = 0;
  if (!v5)
  {
    v18 = v25;
    goto LABEL_22;
  }
  v8 = &v6[32 * v5];
  do
  {
    v9 = *(llvm::Value **)v6;
    if ((*(_DWORD *)(**(_QWORD **)v6 + 8) & 0xFD) != 0xD)
      goto LABEL_19;
    v10 = *((_QWORD *)this + 13);
    v11 = *((_DWORD *)this + 30);
    if (v11)
    {
      v12 = (v11 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v13 = v10 + 48 * v12;
      v14 = *(llvm::Value **)(v13 + 24);
      if (v14 == v9)
        goto LABEL_14;
      v15 = 1;
      while (v14 != (llvm::Value *)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v13 = v10 + 48 * v12;
        v14 = *(llvm::Value **)(v13 + 24);
        if (v14 == v9)
          goto LABEL_14;
      }
    }
    v13 = v10 + 48 * v11;
LABEL_14:
    if (v13 == v10 + 48 * v11 || (SCEVIter = *(_QWORD *)(v13 + 40)) == 0)
    {
      SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v9);
      v7 = v24;
    }
    if (v7 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v7 + 1, 8);
      v7 = v24;
    }
    *((_QWORD *)v23 + v7) = SCEVIter;
    v7 = v24 + 1;
    LODWORD(v24) = v24 + 1;
LABEL_19:
    v6 += 32;
  }
  while (v6 != v8);
  v18 = (uint64_t *)v23;
LABEL_22:
  DefiningScopeBound = llvm::ScalarEvolution::getDefiningScopeBound((llvm::DominatorTree **)this, v18, v7, &v22);
  isGuaranteedToTransferExecutionTo = llvm::ScalarEvolution::isGuaranteedToTransferExecutionTo(this, DefiningScopeBound, a2);
  if (v23 != v25)
    free(v23);
  return isGuaranteedToTransferExecutionTo;
}

uint64_t llvm::ScalarEvolution::getNonTrivialDefiningScopeBound(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((unsigned __int16 *)a2 + 12);
  if (a2 && v2 == 7)
  {
    v3 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a2 + 6) + 32) + 48);
    if (v3)
      return v3 - 24;
    else
      return 0;
  }
  else
  {
    if (!a2)
      return 0;
    if (v2 != 14)
      return 0;
    result = *((_QWORD *)a2 - 1);
    if (!result || *(unsigned __int8 *)(result + 16) <= 0x1Bu)
      return 0;
  }
  return result;
}

void sub_1C4F2B088(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[32];

  v18 = v22;
  v19 = v22;
  v20 = 4;
  v21 = 0;
  v2 = *(unsigned __int16 *)(a1 + 24);
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x1FB0) != 0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      if (v4)
      {
        v5 = *(uint64_t **)(a1 + 32);
        v6 = 8 * v4;
        do
        {
          v7 = *v5;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, *v5);
          if (v8)
          {
            v9 = *(unsigned int *)(a2 + 8);
            if (v9 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 8);
              v9 = *(unsigned int *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v7;
            ++*(_DWORD *)(a2 + 8);
          }
          ++v5;
          v6 -= 8;
        }
        while (v6);
      }
    }
    else if (((1 << v2) & 0x200E) != 0)
    {
      v10 = *(_QWORD *)(a1 + 32);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, v10);
      if (v11)
      {
        v12 = *(unsigned int *)(a2 + 8);
        if (v12 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v10;
        ++*(_DWORD *)(a2 + 8);
      }
    }
    else if (v2 == 6)
    {
      v13 = 0;
      v14 = a1 + 32;
      do
      {
        v15 = *(_QWORD *)(v14 + v13);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, v15);
        if (v16)
        {
          v17 = *(unsigned int *)(a2 + 8);
          if (v17 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 8);
            v17 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v15;
          ++*(_DWORD *)(a2 + 8);
        }
        v13 += 8;
      }
      while (v13 != 16);
    }
  }
  if (v19 != v18)
    free(v19);
}

uint64_t llvm::ScalarEvolution::getLoopProperties(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  llvm::ScalarEvolution *v3;
  uint64_t v4;
  const llvm::Value *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const llvm::Loop *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  llvm::Value **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  int v36;
  unsigned int v37;
  const llvm::Loop *v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  const llvm::Loop *v45;
  __int16 v46;
  uint64_t v48;
  int v49;
  unsigned int v50;
  const llvm::Loop *v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  const llvm::Loop *v57;
  llvm::ScalarEvolution *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  const llvm::Loop *v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  const llvm::Loop *v70;

  v3 = this;
  v4 = *((_QWORD *)this + 89);
  v5 = (const llvm::Value *)*((unsigned int *)this + 182);
  v6 = a2 >> 4;
  if (!(_DWORD)v5)
  {
LABEL_7:
    v8 = v4 + 16 * (_QWORD)v5;
    goto LABEL_8;
  }
  LODWORD(v7) = ((_DWORD)v5 - 1) & (v6 ^ (a2 >> 9));
  v8 = v4 + 16 * v7;
  v9 = *(const llvm::Loop **)v8;
  if (*(const llvm::Loop **)v8 != a2)
  {
    v10 = 1;
    while (v9 != (const llvm::Loop *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & ((_DWORD)v5 - 1);
      v9 = *(const llvm::Loop **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = v4 + 16 * v7;
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 != v4 + 16 * (_QWORD)v5)
    return *(unsigned __int16 *)(v8 + 8);
  v12 = *((_QWORD *)a2 + 4);
  v13 = *((_QWORD *)a2 + 5);
  if (v13 == v12)
  {
    LOBYTE(v15) = 1;
    LOWORD(v14) = 1;
    if (!(_DWORD)v5)
      goto LABEL_80;
LABEL_60:
    v36 = (_DWORD)v5 - 1;
    v37 = ((_DWORD)v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = v4 + 16 * v37;
    v38 = *(const llvm::Loop **)v8;
    if (*(const llvm::Loop **)v8 != a2)
    {
      v39 = 0;
      v40 = 1;
      while (v38 != (const llvm::Loop *)-4096)
      {
        if (v39)
          v41 = 0;
        else
          v41 = v38 == (const llvm::Loop *)-8192;
        if (v41)
          v39 = v8;
        v42 = v37 + v40++;
        v37 = v42 & v36;
        v8 = v4 + 16 * (v42 & v36);
        v38 = *(const llvm::Loop **)v8;
        if (*(const llvm::Loop **)v8 == a2)
          return *(unsigned __int16 *)(v8 + 8);
      }
      if (v39)
        v8 = v39;
      goto LABEL_72;
    }
    return *(unsigned __int16 *)(v8 + 8);
  }
  v68 = a2 >> 4;
  v70 = a2;
  v14 = 1;
  v15 = 1;
  do
  {
    v16 = *(_QWORD *)v12 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v12 + 48); ; i = *(_QWORD *)(i + 8))
    {
      v18 = v15;
      if (i == v16)
        break;
      v15 = 0;
      if (i)
        v19 = i - 24;
      else
        v19 = 0;
      v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 == 29 || v20 == 35)
        goto LABEL_22;
      if (v20 == 80)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 56);
        v22 = *(_DWORD *)(v21 + 20);
        if ((v22 & 0x40000000) != 0)
          v23 = *(llvm::Value ***)(v21 - 8);
        else
          v23 = (llvm::Value **)(v21 - 32 * (v22 & 0x7FFFFFF));
        if (llvm::classifyEHPersonality(*v23, v5) == 10)
        {
LABEL_21:
          v15 = v18;
LABEL_22:
          if (!i)
            goto LABEL_32;
          goto LABEL_29;
        }
      }
      else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v19) & 1) == 0
             && llvm::Instruction::willReturn((llvm::Instruction *)v19))
      {
        goto LABEL_21;
      }
      v15 = 0;
      if (!i)
        goto LABEL_32;
LABEL_29:
      if (*(_BYTE *)(v19 + 16) == 61)
      {
        if ((*(_WORD *)(v19 + 18) & 0x381) != 0)
          goto LABEL_33;
        goto LABEL_34;
      }
LABEL_32:
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v19) & 1) != 0)
        goto LABEL_33;
      v24 = *(unsigned __int8 *)(v19 + 16) - 33;
      if (v24 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v19 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v25 = *(_QWORD *)(v19 + 64);
          if (!v25 || (*(_BYTE *)(v25 + 17) & 0x30) == 0)
          {
            v26 = *(_DWORD *)(v19 + 20);
            if (v26 < 0)
            {
              v27 = v19 - 32 * (v26 & 0x7FFFFFF);
              v30 = *(_QWORD *)(v27 - 8);
              v28 = v27 - 8;
              v29 = v30;
              if (v30)
              {
                v31 = -v29;
                while (1)
                {
                  v32 = *(_DWORD *)(*(_QWORD *)(v28 + v31) + 8);
                  v33 = v32 > 7;
                  v34 = (1 << v32) & 0x83;
                  if (v33 || v34 == 0)
                    break;
                  v31 += 16;
                  if (!v31)
                    goto LABEL_44;
                }
LABEL_33:
                v14 = 0;
                goto LABEL_34;
              }
            }
LABEL_44:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v19, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v19, 44) & 1) == 0)
            {
              goto LABEL_33;
            }
          }
        }
        else if (v24 == 27)
        {
          if ((*(_WORD *)(v19 + 18) & 0x301) != 0)
            goto LABEL_33;
        }
        else if (((1 << (*(_BYTE *)(v19 + 16) - 33)) & 0x808001D0000010) != 0)
        {
          goto LABEL_33;
        }
      }
LABEL_34:
      if (!(v15 | v14))
      {
        v15 = 0;
        v14 = 0;
        break;
      }
    }
    v12 += 8;
  }
  while (v12 != v13);
  v3 = this;
  a2 = v70;
  v4 = *((_QWORD *)this + 89);
  LODWORD(v5) = *((_DWORD *)this + 182);
  v6 = v68;
  if ((_DWORD)v5)
    goto LABEL_60;
LABEL_80:
  v8 = 0;
LABEL_72:
  v43 = (uint64_t)v3 + 712;
  v44 = *((_DWORD *)v3 + 180);
  if (4 * v44 + 4 < (3 * (_DWORD)v5))
  {
    if ((int)v5 + ~v44 - *((_DWORD *)v3 + 181) <= v5 >> 3)
    {
      v56 = v6;
      v57 = a2;
      sub_1C4F5C9B4(v43, (int)v5);
      v58 = v3;
      v59 = *((_DWORD *)v3 + 182);
      if (v59)
      {
        v60 = *((_QWORD *)v3 + 89);
        v61 = v59 - 1;
        v62 = (v59 - 1) & (v56 ^ (a2 >> 9));
        v8 = v60 + 16 * v62;
        v63 = *(const llvm::Loop **)v8;
        if (*(const llvm::Loop **)v8 != a2)
        {
          v64 = 0;
          v65 = 1;
          while (v63 != (const llvm::Loop *)-4096)
          {
            if (v64)
              v66 = 0;
            else
              v66 = v63 == (const llvm::Loop *)-8192;
            if (v66)
              v64 = v8;
            v67 = v62 + v65++;
            v62 = v67 & v61;
            v8 = v60 + 16 * (v67 & v61);
            v63 = *(const llvm::Loop **)v8;
            a2 = v57;
            v3 = v58;
            if (*(const llvm::Loop **)v8 == v57)
              goto LABEL_74;
          }
          if (v64)
            v8 = v64;
        }
      }
      else
      {
        v8 = 0;
      }
      a2 = v57;
      v3 = v58;
    }
    goto LABEL_74;
  }
  sub_1C4F5C9B4(v43, 2 * (_DWORD)v5);
  v48 = *((_QWORD *)v3 + 89);
  v49 = *((_DWORD *)v3 + 182) - 1;
  v50 = v49 & (v6 ^ (a2 >> 9));
  v8 = v48 + 16 * v50;
  v51 = *(const llvm::Loop **)v8;
  if (*(const llvm::Loop **)v8 == a2)
  {
LABEL_90:
    v45 = a2;
  }
  else
  {
    v52 = 0;
    v53 = 1;
    while (v51 != (const llvm::Loop *)-4096)
    {
      if (v52)
        v54 = 0;
      else
        v54 = v51 == (const llvm::Loop *)-8192;
      if (v54)
        v52 = v8;
      v55 = v50 + v53++;
      v50 = v55 & v49;
      v8 = v48 + 16 * (v55 & v49);
      v51 = *(const llvm::Loop **)v8;
      if (*(const llvm::Loop **)v8 == a2)
        goto LABEL_90;
    }
    if (v52)
      v8 = v52;
LABEL_74:
    v45 = *(const llvm::Loop **)v8;
  }
  v46 = v15 | (unsigned __int16)((_WORD)v14 << 8);
  ++*((_DWORD *)v3 + 180);
  if (v45 != (const llvm::Loop *)-4096)
    --*((_DWORD *)v3 + 181);
  *(_QWORD *)v8 = a2;
  *(_WORD *)(v8 + 8) = v46;
  return *(unsigned __int16 *)(v8 + 8);
}

BOOL llvm::ScalarEvolution::loopIsFiniteByAssumption(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t v4;
  _BOOL8 result;

  v4 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 4) + 56) + 112);
  if (v4 && (*(_BYTE *)(v4 + 20) & 2) != 0)
    return 1;
  result = llvm::isMustProgress(a2, a2);
  if (result)
    return (llvm::ScalarEvolution::getLoopProperties(this, a2) >> 8) & 1;
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::createSCEV(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t SignExtendExpr;
  BOOL v10;
  llvm::Value **v11;
  BOOL v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  const llvm::DataLayout *v22;
  llvm::Type *v23;
  const llvm::APInt *v24;
  llvm::Instruction *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  llvm::Instruction *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  llvm::Value *v38;
  int v39;
  unsigned int v40;
  uint64_t SCEVIter;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  llvm::Value *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  llvm::Value *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t NegativeSCEV;
  unint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::ScalarEvolution *v60;
  llvm::Module *v61;
  llvm::Value *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  llvm::Value *v67;
  int v68;
  unsigned int v69;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  llvm::Instruction *v76;
  int v77;
  unsigned int v78;
  uint64_t MulExpr;
  uint64_t v80;
  _BOOL4 isSCEVExprNeverPoison;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  llvm::Value *v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  char v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  void *v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  llvm::Value *v102;
  unint64_t v103;
  unint64_t *v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  int v109;
  llvm::Value *v110;
  llvm::Type *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  unint64_t v115;
  unint64_t IndexTypeSizeInBits;
  llvm::APInt *v117;
  unsigned int v118;
  _QWORD *v119;
  _QWORD *v120;
  int v121;
  llvm::Type *v122;
  llvm::Value *v123;
  const void **v124;
  unsigned int v125;
  const void *v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  void *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  void *v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  const void **v145;
  llvm::Value *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Value *v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  void *v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  llvm::Value *v162;
  int v163;
  unsigned int v164;
  const llvm::SCEV *v165;
  llvm::ScalarEvolution *v166;
  const llvm::SCEV *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  llvm::Value *v172;
  int v173;
  unsigned int v174;
  const llvm::SCEV *v175;
  llvm::ScalarEvolution *v176;
  const llvm::SCEV *v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  void *v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  void *v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  llvm::Value *v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  llvm::ScalarEvolution *v200;
  uint64_t v201;
  const llvm::SCEV *v202;
  unsigned int MinTrailingZeros;
  unsigned int v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  void *v208;
  int v209;
  unsigned int v210;
  int v211;
  llvm::Value *v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  void *v217;
  int v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  llvm::Value *v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  void *v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  llvm::Value *v238;
  int v239;
  unsigned int v240;
  const llvm::SCEV *v241;
  llvm::ScalarEvolution *v242;
  const llvm::SCEV *v243;
  uint64_t v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  llvm::Value *v248;
  int v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  void *v255;
  int v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  llvm::Value *v261;
  int v262;
  unsigned int v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  llvm::ScalarEvolution *v268;
  uint64_t UMinExpr;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  uint64_t v274;
  void *v275;
  int v276;
  unsigned int v277;
  const llvm::SCEV *v278;
  llvm::ScalarEvolution *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t AddExpr;
  unsigned int v283;
  void *v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  llvm::Value *v290;
  llvm::Value *v291;
  const llvm::APInt *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  size_t v301;
  uint64_t v302;
  _BOOL4 v303;
  unint64_t v304;
  uint64_t v305;
  const llvm::APInt *v306;
  const llvm::SCEV *v307;
  uint64_t v308;
  unsigned int v309;
  unsigned int v310;
  uint64_t v311;
  void *v312;
  int v313;
  unsigned int v314;
  char v315;
  unsigned int v316;
  _QWORD *v317;
  llvm::ConstantInt *v318;
  unint64_t *v319;
  uint64_t v320;
  llvm::Value *v321;
  uint64_t v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  void *v326;
  int v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  llvm::Value *v332;
  int v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  llvm::Value *v340;
  int v341;
  unsigned int v342;
  uint64_t v343;
  BOOL v344;
  uint64_t v345;
  uint64_t v347;
  unint64_t **v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  uint64_t v352;
  int64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  unint64_t v359;
  int v360;
  uint64_t v361;
  BOOL v362;
  _DWORD *v363;
  unsigned int v364;
  unsigned int v365;
  BOOL v367;
  int v368;
  llvm::Value **v369;
  llvm::Value *v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  uint64_t v374;
  llvm::Value *v375;
  int v376;
  unsigned int v377;
  const llvm::SCEV *v378;
  char *v379;
  uint64_t v380;
  _QWORD **v381;
  unsigned int v382;
  _QWORD *v383;
  const llvm::SCEV *TruncateExpr;
  llvm::ScalarEvolution *v385;
  llvm::Type *v386;
  unsigned int v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  const llvm::APInt *v391;
  unint64_t Constant;
  const llvm::SCEV *v393;
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned int v399;
  unint64_t v400;
  unsigned int v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  const llvm::SCEV *v407;
  const llvm::APInt *v408;
  const llvm::SCEV *v409;
  const llvm::SCEV *UDivExpr;
  _QWORD *v411;
  llvm::Type *v412;
  const llvm::SCEV *v413;
  unint64_t ZeroExtendExpr;
  uint64_t v415;
  unsigned int v416;
  unsigned int v417;
  uint64_t v418;
  void *v419;
  int v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  llvm::Value *v425;
  int v426;
  unsigned int v427;
  const llvm::SCEV *v428;
  llvm::ScalarEvolution *v429;
  const llvm::SCEV *v430;
  unsigned int v431;
  int v432;
  int v433;
  llvm::Value **v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  llvm::Value *v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  uint64_t v443;
  llvm::Value *v444;
  int v445;
  unsigned int v446;
  int v447;
  llvm::Value **v448;
  int v449;
  llvm::Value **v450;
  int v451;
  llvm::Value **v452;
  int v453;
  uint64_t *v454;
  int v455;
  llvm::Value *v456;
  int v457;
  llvm::Value **v458;
  int v459;
  llvm::Value **v460;
  llvm::Value *v461;
  uint64_t v462;
  unsigned int v463;
  unsigned int v464;
  uint64_t v465;
  llvm::Value *v466;
  int v467;
  unsigned int v468;
  const llvm::SCEV *v469;
  llvm::Value *v470;
  uint64_t v471;
  unsigned int v472;
  unsigned int v473;
  uint64_t v474;
  llvm::Value *v475;
  int v476;
  unsigned int v477;
  const llvm::SCEV *v478;
  llvm::Type *v479;
  uint64_t v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  uint64_t v484;
  llvm::Value *v485;
  int v486;
  unsigned int v487;
  int v488;
  llvm::Value **v489;
  llvm::Value *v490;
  uint64_t v491;
  unsigned int v492;
  unsigned int v493;
  uint64_t v494;
  llvm::Value *v495;
  int v496;
  unsigned int v497;
  const llvm::SCEV *v498;
  uint64_t v499;
  unint64_t v500;
  llvm::Value *v501;
  uint64_t v502;
  unsigned int v503;
  unsigned int v504;
  uint64_t v505;
  llvm::Value *v506;
  int v507;
  unsigned int v508;
  const llvm::SCEV *v509;
  int v510;
  char *v511;
  llvm::Value *v512;
  uint64_t v513;
  unsigned int v514;
  unsigned int v515;
  uint64_t v516;
  llvm::Value *v517;
  int v518;
  unsigned int v519;
  const llvm::SCEV *v520;
  int v521;
  char *v522;
  const llvm::SCEV *v523;
  uint64_t v524;
  uint64_t v525;
  unsigned int v526;
  unsigned int v527;
  unsigned int v528;
  uint64_t v529;
  llvm::Value *v530;
  int v531;
  unsigned int v532;
  const llvm::SCEV *v533;
  llvm::Value *v534;
  uint64_t v535;
  unsigned int v536;
  unsigned int v537;
  uint64_t v538;
  llvm::Value *v539;
  int v540;
  unsigned int v541;
  uint64_t v542;
  unsigned int v543;
  llvm::Value *v544;
  int v545;
  unsigned int v546;
  llvm::Value *v547;
  uint64_t v548;
  unsigned int v549;
  unsigned int v550;
  uint64_t v551;
  llvm::Value *v552;
  int v553;
  unsigned int v554;
  const llvm::SCEV *v555;
  int v556;
  llvm::Value **v557;
  llvm::Value *v558;
  uint64_t v559;
  unsigned int v560;
  unsigned int v561;
  uint64_t v562;
  llvm::Value *v563;
  int v564;
  unsigned int v565;
  const llvm::SCEV *v566;
  int v567;
  llvm::Value **v568;
  llvm::Value *v569;
  uint64_t v570;
  unsigned int v571;
  unsigned int v572;
  uint64_t v573;
  llvm::Value *v574;
  int v575;
  unsigned int v576;
  uint64_t v577;
  char *v578;
  llvm::Value *v579;
  uint64_t v580;
  unsigned int v581;
  unsigned int v582;
  uint64_t v583;
  llvm::Value *v584;
  int v585;
  unsigned int v586;
  llvm::Value *v587;
  uint64_t v588;
  unsigned int v589;
  unsigned int v590;
  uint64_t v591;
  llvm::Value *v592;
  int v593;
  unsigned int v594;
  uint64_t v595;
  char *v596;
  llvm::Value *v597;
  uint64_t v598;
  unsigned int v599;
  unsigned int v600;
  uint64_t v601;
  llvm::Value *v602;
  int v603;
  unsigned int v604;
  uint64_t v605;
  llvm::Value *v606;
  uint64_t v607;
  unsigned int v608;
  unsigned int v609;
  uint64_t v610;
  llvm::Value *v611;
  int v612;
  unsigned int v613;
  unsigned int v614;
  llvm::Value *v615;
  int v616;
  unsigned int v617;
  uint64_t v618;
  llvm::Value *v619;
  uint64_t v620;
  unsigned int v621;
  unsigned int v622;
  uint64_t v623;
  llvm::Value *v624;
  int v625;
  unsigned int v626;
  uint64_t v627;
  llvm::Value *v628;
  uint64_t v629;
  unsigned int v630;
  unsigned int v631;
  uint64_t v632;
  llvm::Value *v633;
  int v634;
  unsigned int v635;
  uint64_t v636;
  llvm::Value *v637;
  uint64_t v638;
  unsigned int v639;
  unsigned int v640;
  uint64_t v641;
  llvm::Value *v642;
  int v643;
  unsigned int v644;
  uint64_t v645;
  llvm::Value *v646;
  uint64_t v647;
  unsigned int v648;
  unsigned int v649;
  uint64_t v650;
  llvm::Value *v651;
  int v652;
  unsigned int v653;
  uint64_t v654;
  llvm::Value *v655;
  uint64_t v656;
  unsigned int v657;
  unsigned int v658;
  uint64_t v659;
  llvm::Value *v660;
  int v661;
  unsigned int v662;
  const llvm::SCEV *v663;
  uint64_t v664;
  const llvm::SCEV *v665;
  llvm::Value *v666;
  unsigned int v667;
  uint64_t v668;
  llvm::Value *v669;
  int v670;
  unsigned int v671;
  const llvm::SCEV *v672;
  llvm::Value *v673;
  unsigned int v674;
  uint64_t v675;
  llvm::Value *v676;
  int v677;
  unsigned int v678;
  uint64_t v679;
  llvm::Value *v680;
  unsigned int v681;
  uint64_t v682;
  llvm::Value *v683;
  int v684;
  unsigned int v685;
  const llvm::SCEV *v686;
  const llvm::SCEV *NotSCEV;
  const llvm::SCEV *v688;
  llvm::Value *v689;
  unsigned int v690;
  uint64_t v691;
  llvm::Value *v692;
  int v693;
  unsigned int v694;
  const llvm::SCEV *v695;
  unint64_t v696;
  uint64_t v697;
  llvm::Value *v698;
  unsigned int v699;
  uint64_t v700;
  llvm::Value *v701;
  int v702;
  unsigned int v703;
  const llvm::SCEV *v704;
  llvm::Value *v705;
  unsigned int v706;
  uint64_t v707;
  llvm::Value *v708;
  int v709;
  unsigned int v710;
  const llvm::SCEV *v711;
  _DWORD *v712;
  _DWORD *v713;
  int v714;
  _DWORD *v715;
  _DWORD *v716;
  int v717;
  unint64_t v718;
  unsigned int v719;
  llvm::Value *v720;
  int v721;
  unsigned int v722;
  unint64_t v723;
  uint64_t v724;
  unsigned int v725;
  uint64_t v726;
  unsigned int v727;
  void *v728;
  unsigned int v729;
  void *v730;
  int v731;
  uint64_t v732;
  unsigned int v733;
  void *__src[2];
  __int128 v735;
  __int128 v736;
  void *__s1[2];
  llvm::Value *v738[2];
  llvm::Instruction *v739[2];
  unint64_t v740;
  uint64_t v741;
  llvm::Value *v742;
  uint64_t v743;
  uint64_t v744;
  char v745;
  uint64_t v746;

  v746 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) != 0xD)
  {
LABEL_252:
    v60 = this;
    v59 = a2;
    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(v60, v59);
  }
  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 >= 0x1C)
  {
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 4), *((_QWORD *)a2 + 5)))
    {
      v59 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)a2, v23);
      v60 = this;
      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(v60, v59);
    }
    goto LABEL_28;
  }
  if (v4 == 1)
  {
    if ((*((_DWORD *)a2 + 8) & 0xFu) - 5 >= 4 && ((1 << (*((_DWORD *)a2 + 8) & 0xF)) & 0x614) != 0)
      goto LABEL_252;
    v61 = (llvm::Module *)*((_QWORD *)a2 + 5);
    if (v61)
    {
      if (llvm::Module::getSemanticInterposition(v61) && (*((_BYTE *)a2 + 33) & 0x40) == 0)
        goto LABEL_252;
    }
    v62 = (llvm::Value *)*((_QWORD *)a2 - 4);
    v63 = *((_QWORD *)this + 13);
    v64 = *((_DWORD *)this + 30);
    if (v64)
    {
      v65 = ((v62 >> 4) ^ (v62 >> 9)) & (v64 - 1);
      v66 = v63 + 48 * v65;
      v67 = *(llvm::Value **)(v66 + 24);
      if (v67 == v62)
      {
LABEL_91:
        if (v66 == v63 + 48 * v64)
          return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v62);
        SignExtendExpr = *(_QWORD *)(v66 + 40);
        if (!SignExtendExpr)
          return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v62);
        return (const llvm::SCEV *)SignExtendExpr;
      }
      v68 = 1;
      while (v67 != (llvm::Value *)-4096)
      {
        v69 = v65 + v68++;
        v65 = v69 & (v64 - 1);
        v66 = v63 + 48 * v65;
        v67 = *(llvm::Value **)(v66 + 24);
        if (v67 == v62)
          goto LABEL_91;
      }
    }
    v66 = v63 + 48 * v64;
    goto LABEL_91;
  }
  if (v4 != 5)
  {
    if (v4 == 16)
    {
      __s1[0] = v738;
      LODWORD(v738[0]) = 0;
      *(llvm::Value **)((char *)v738 + 4) = a2;
      __s1[1] = (void *)0x2000000003;
      v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v723 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v723 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v723;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v6 = __ROR8__(*(char **)((char *)v738 + 4) + 12, 12);
      v7 = 0x9DDFEA08EB382D69 * ((unint64_t)v738[0] ^ qword_1ED7EAC80 ^ v6);
      v8 = *((_QWORD *)this + 104)
         + 8
         * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                            * ((((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 32) >> 15) ^ (-348639895 * (v6 ^ (v7 >> 47) ^ v7)))) ^ HIDWORD(v738[0])));
      SignExtendExpr = *(_QWORD *)v8;
      v740 = (unint64_t)&v742;
      v741 = 0x2000000000;
      if (SignExtendExpr)
        v10 = (SignExtendExpr & 1) == 0;
      else
        v10 = 0;
      if (v10)
      {
        v11 = (llvm::Value **)__s1[0];
        while (*(_QWORD *)(SignExtendExpr + 16) != LODWORD(__s1[1])
             || memcmp(__s1[0], *(const void **)(SignExtendExpr + 8), 4 * LODWORD(__s1[1])))
        {
          LODWORD(v741) = 0;
          SignExtendExpr = *(_QWORD *)SignExtendExpr;
          if (SignExtendExpr)
            v12 = (SignExtendExpr & 1) == 0;
          else
            v12 = 0;
          if (!v12)
            goto LABEL_19;
        }
      }
      else
      {
LABEL_19:
        SignExtendExpr = sub_1C484358C((uint64_t)this + 864, 40, 3);
        v13 = sub_1C484358C((uint64_t)this + 864, 4 * LODWORD(__s1[1]), 2);
        v14 = (int *)__s1[0];
        v15 = 4 * LODWORD(__s1[1]);
        v16 = (_DWORD *)v13;
        do
        {
          v17 = *v14++;
          *v16++ = v17;
          v15 -= 4;
        }
        while (v15);
        v18 = LODWORD(__s1[1]);
        *(_QWORD *)SignExtendExpr = 0;
        *(_QWORD *)(SignExtendExpr + 8) = v13;
        *(_QWORD *)(SignExtendExpr + 16) = v18;
        *(_DWORD *)(SignExtendExpr + 24) = 0x10000;
        *(_WORD *)(SignExtendExpr + 28) = 0;
        *(_QWORD *)(SignExtendExpr + 32) = a2;
        v19 = *((_DWORD *)this + 211) + 1;
        v20 = *((_DWORD *)this + 210);
        if (v19 > 2 * v20)
        {
          llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v20, (uint64_t)off_1E813B300);
          v740 = (unint64_t)&v742;
          v741 = 0x2000000000;
          v8 = *((_QWORD *)this + 104)
             + 8
             * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(SignExtendExpr + 8), *(_QWORD *)(SignExtendExpr + 8)+ 4 * *(_QWORD *)(SignExtendExpr + 16)));
          if ((llvm::Value **)v740 != &v742)
            free((void *)v740);
          v19 = *((_DWORD *)this + 211) + 1;
        }
        *((_DWORD *)this + 211) = v19;
        v21 = *(_QWORD *)v8;
        if (!*(_QWORD *)v8)
          v21 = v8 | 1;
        *(_QWORD *)SignExtendExpr = v21;
        *(_QWORD *)v8 = SignExtendExpr;
        v11 = (llvm::Value **)__s1[0];
      }
      if (v11 == v738)
        return (const llvm::SCEV *)SignExtendExpr;
      v22 = (const llvm::DataLayout *)v11;
      goto LABEL_409;
    }
    goto LABEL_252;
  }
LABEL_28:
  sub_1C4F1EE04((uint64_t)__s1, (uint64_t)a2, *((const llvm::APInt **)this + 4));
  if (!LOBYTE(v739[1]))
    goto LABEL_656;
  switch(LODWORD(__s1[0]))
  {
    case 0xD:
      v740 = (unint64_t)&v742;
      v741 = 0x400000000;
      while (2)
      {
        v25 = v739[0];
        if (!v739[0])
          goto LABEL_52;
        v26 = *((_QWORD *)this + 13);
        v27 = *((_DWORD *)this + 30);
        if (!v27)
          goto LABEL_38;
        v28 = (v27 - 1) & ((LODWORD(v739[0]) >> 4) ^ (LODWORD(v739[0]) >> 9));
        v29 = v26 + 48 * v28;
        v30 = *(llvm::Instruction **)(v29 + 24);
        if (v30 == v739[0])
          goto LABEL_39;
        v31 = 1;
        while (v30 != (llvm::Instruction *)-4096)
        {
          v32 = v28 + v31++;
          v28 = v32 & (v27 - 1);
          v29 = v26 + 48 * v28;
          v30 = *(llvm::Instruction **)(v29 + 24);
          if (v30 == v739[0])
            goto LABEL_39;
        }
LABEL_38:
        v29 = v26 + 48 * v27;
LABEL_39:
        v33 = v26 + 48 * v27;
        if (v29 != v33)
        {
          v34 = *(_QWORD *)(v29 + 40);
          if (v34)
            goto LABEL_258;
        }
        if (!v27)
          goto LABEL_48;
        v35 = v27 - 1;
        v36 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & v35;
        v37 = v26 + 48 * v36;
        v38 = *(llvm::Value **)(v37 + 24);
        if (v38 != v738[0])
        {
          v39 = 1;
          while (v38 != (llvm::Value *)-4096)
          {
            v40 = v36 + v39++;
            v36 = v40 & v35;
            v37 = v26 + 48 * v36;
            v38 = *(llvm::Value **)(v37 + 24);
            if (v38 == v738[0])
              goto LABEL_46;
          }
          goto LABEL_48;
        }
LABEL_46:
        if (v37 == v33 || (SCEVIter = *(_QWORD *)(v37 + 40)) == 0)
        {
LABEL_48:
          SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
          v25 = v739[0];
        }
        if (*((_BYTE *)v25 + 16) != 5)
        {
          v42 = *((_BYTE *)v25 + 17) & 6;
          if ((*((_BYTE *)v25 + 17) & 6) != 0 && llvm::ScalarEvolution::isSCEVExprNeverPoison(this, v25))
          {
            v251 = *((_QWORD *)this + 13);
            v252 = *((_DWORD *)this + 30);
            if (v252)
            {
              v253 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v252 - 1);
              v254 = v251 + 48 * v253;
              v255 = *(void **)(v254 + 24);
              if (v255 == __s1[1])
                goto LABEL_390;
              v256 = 1;
              while (v255 != (void *)-4096)
              {
                v257 = v253 + v256++;
                v253 = v257 & (v252 - 1);
                v254 = v251 + 48 * v253;
                v255 = *(void **)(v254 + 24);
                if (v255 == __s1[1])
                  goto LABEL_390;
              }
            }
            v254 = v251 + 48 * v252;
LABEL_390:
            if (v254 == v251 + 48 * v252 || (v280 = *(_QWORD *)(v254 + 40)) == 0)
              v280 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
            if (LODWORD(__s1[0]) == 15)
            {
              llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, v280, SCEVIter);
              AddExpr = v281;
            }
            else
            {
              __src[0] = &v735;
              *(_QWORD *)&v735 = v280;
              *((_QWORD *)&v735 + 1) = SCEVIter;
              __src[1] = (void *)0x200000002;
              AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (uint64_t)__src, v42, 0);
              if (__src[0] != &v735)
                free(__src[0]);
            }
            v287 = v741;
            if (v741 >= HIDWORD(v741))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v741 + 1, 8);
              v287 = v741;
            }
            *(_QWORD *)(v740 + 8 * v287) = AddExpr;
            goto LABEL_407;
          }
        }
LABEL_52:
        v43 = *((_QWORD *)this + 13);
        v44 = *((_DWORD *)this + 30);
        if (LODWORD(__s1[0]) == 15)
        {
          if (v44)
          {
            v45 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v44 - 1);
            v46 = v43 + 48 * v45;
            v47 = *(llvm::Value **)(v46 + 24);
            if (v47 == v738[0])
              goto LABEL_66;
            v48 = 1;
            while (v47 != (llvm::Value *)-4096)
            {
              v49 = v45 + v48++;
              v45 = v49 & (v44 - 1);
              v46 = v43 + 48 * v45;
              v47 = *(llvm::Value **)(v46 + 24);
              if (v47 == v738[0])
                goto LABEL_66;
            }
          }
          v46 = v43 + 48 * v44;
LABEL_66:
          if (v46 == v43 + 48 * v44 || (v55 = *(_QWORD *)(v46 + 40)) == 0)
            v55 = llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
          NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, v55);
          goto LABEL_74;
        }
        if (!v44)
          goto LABEL_70;
        v50 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v44 - 1);
        v51 = v43 + 48 * v50;
        v52 = *(llvm::Value **)(v51 + 24);
        if (v52 != v738[0])
        {
          v53 = 1;
          while (v52 != (llvm::Value *)-4096)
          {
            v54 = v50 + v53++;
            v50 = v54 & (v44 - 1);
            v51 = v43 + 48 * v50;
            v52 = *(llvm::Value **)(v51 + 24);
            if (v52 == v738[0])
              goto LABEL_71;
          }
LABEL_70:
          v51 = v43 + 48 * v44;
        }
LABEL_71:
        if (v51 == v43 + 48 * v44 || (v57 = *(_QWORD *)(v51 + 40)) == 0)
        {
          NegativeSCEV = llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
LABEL_74:
          v57 = NegativeSCEV;
        }
        v58 = v741;
        if (v741 >= (unint64_t)HIDWORD(v741))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v741 + 1, 8);
          v58 = v741;
        }
        *(_QWORD *)(v740 + 8 * v58) = v57;
        LODWORD(v741) = v741 + 1;
        sub_1C4F1EE04((uint64_t)__src, (uint64_t)__s1[1], *((const llvm::APInt **)this + 4));
        if (BYTE8(v736) && (LODWORD(__src[0]) | 2) == 0xF)
        {
          *(_OWORD *)__s1 = *(_OWORD *)__src;
          *(_OWORD *)v738 = v735;
          *(_OWORD *)v739 = v736;
          continue;
        }
        break;
      }
      v178 = *((_QWORD *)this + 13);
      v179 = *((_DWORD *)this + 30);
      if (!v179)
      {
LABEL_254:
        v181 = v178 + 48 * v179;
        goto LABEL_255;
      }
      v180 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v179 - 1);
      v181 = v178 + 48 * v180;
      v182 = *(void **)(v181 + 24);
      if (v182 != __s1[1])
      {
        v183 = 1;
        while (v182 != (void *)-4096)
        {
          v184 = v180 + v183++;
          v180 = v184 & (v179 - 1);
          v181 = v178 + 48 * v180;
          v182 = *(void **)(v181 + 24);
          if (v182 == __s1[1])
            goto LABEL_255;
        }
        goto LABEL_254;
      }
LABEL_255:
      if (v181 == v178 + 48 * v179 || (v34 = *(_QWORD *)(v181 + 40)) == 0)
        v34 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
LABEL_258:
      v185 = v741;
      if (v741 >= HIDWORD(v741))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v741 + 1, 8);
        v185 = v741;
      }
      *(_QWORD *)(v740 + 8 * v185) = v34;
LABEL_407:
      LODWORD(v741) = v741 + 1;
      v266 = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (uint64_t)&v740, 0, 0);
LABEL_408:
      SignExtendExpr = v266;
      v22 = (const llvm::DataLayout *)v740;
      if ((llvm::Value **)v740 != &v742)
LABEL_409:
        free(v22);
      return (const llvm::SCEV *)SignExtendExpr;
    case 0xF:
      if (v739[0] && *((_BYTE *)v739[0] + 16) != 5 && (*((_BYTE *)v739[0] + 17) & 6) != 0)
        llvm::ScalarEvolution::isSCEVExprNeverPoison(this, v739[0]);
      v186 = *((_QWORD *)this + 13);
      v187 = *((_DWORD *)this + 30);
      if (!v187)
        goto LABEL_267;
      v188 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v187 - 1);
      v189 = v186 + 48 * v188;
      v190 = *(void **)(v189 + 24);
      if (v190 == __s1[1])
        goto LABEL_268;
      v191 = 1;
      while (v190 != (void *)-4096)
      {
        v192 = v188 + v191++;
        v188 = v192 & (v187 - 1);
        v189 = v186 + 48 * v188;
        v190 = *(void **)(v189 + 24);
        if (v190 == __s1[1])
          goto LABEL_268;
      }
LABEL_267:
      v189 = v186 + 48 * v187;
LABEL_268:
      if (v189 == v186 + 48 * v187 || (v193 = *(_QWORD *)(v189 + 40)) == 0)
      {
        v193 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
        v186 = *((_QWORD *)this + 13);
        v187 = *((_DWORD *)this + 30);
      }
      if (!v187)
        goto LABEL_277;
      v194 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v187 - 1);
      v195 = v186 + 48 * v194;
      v196 = *(llvm::Value **)(v195 + 24);
      if (v196 != v738[0])
      {
        v197 = 1;
        while (v196 != (llvm::Value *)-4096)
        {
          v198 = v194 + v197++;
          v194 = v198 & (v187 - 1);
          v195 = v186 + 48 * v194;
          v196 = *(llvm::Value **)(v195 + 24);
          if (v196 == v738[0])
            goto LABEL_278;
        }
LABEL_277:
        v195 = v186 + 48 * v187;
      }
LABEL_278:
      if (v195 == v186 + 48 * v187 || (v199 = *(_QWORD *)(v195 + 40)) == 0)
        v199 = llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
      v200 = this;
      v201 = v193;
      goto LABEL_798;
    case 0x11:
      v740 = (unint64_t)&v742;
      v741 = 0x400000000;
      while (2)
      {
        v71 = *((_QWORD *)this + 13);
        v72 = *((_DWORD *)this + 30);
        if (!v739[0])
          goto LABEL_108;
        if (!v72)
          goto LABEL_102;
        v73 = v72 - 1;
        v74 = ((LODWORD(v739[0]) >> 4) ^ (LODWORD(v739[0]) >> 9)) & (v72 - 1);
        v75 = v71 + 48 * v74;
        v76 = *(llvm::Instruction **)(v75 + 24);
        if (v76 != v739[0])
        {
          v77 = 1;
          while (v76 != (llvm::Instruction *)-4096)
          {
            v78 = v74 + v77++;
            v74 = v78 & v73;
            v75 = v71 + 48 * (v78 & v73);
            v76 = *(llvm::Instruction **)(v75 + 24);
            if (v76 == v739[0])
              goto LABEL_103;
          }
LABEL_102:
          v75 = v71 + 48 * v72;
        }
LABEL_103:
        if (v75 != v71 + 48 * v72)
        {
          MulExpr = *(_QWORD *)(v75 + 40);
          if (MulExpr)
            goto LABEL_363;
        }
        if (*((_BYTE *)v739[0] + 16) == 5
          || (v80 = *((_BYTE *)v739[0] + 17) & 6, (*((_BYTE *)v739[0] + 17) & 6) == 0)
          || (isSCEVExprNeverPoison = llvm::ScalarEvolution::isSCEVExprNeverPoison(this, v739[0]),
              v71 = *((_QWORD *)this + 13),
              v72 = *((_DWORD *)this + 30),
              !isSCEVExprNeverPoison))
        {
LABEL_108:
          v82 = v71 + 48 * v72;
          if (v72)
          {
            v83 = v72 - 1;
            v84 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & v83;
            v85 = v71 + 48 * v84;
            v86 = *(llvm::Value **)(v85 + 24);
            if (v86 == v738[0])
            {
LABEL_115:
              if (v85 == v82 || (v89 = *(_QWORD *)(v85 + 40)) == 0)
                v89 = llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
              v90 = v741;
              if (v741 >= (unint64_t)HIDWORD(v741))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v741 + 1, 8);
                v90 = v741;
              }
              *(_QWORD *)(v740 + 8 * v90) = v89;
              LODWORD(v741) = v741 + 1;
              sub_1C4F1EE04((uint64_t)__src, (uint64_t)__s1[1], *((const llvm::APInt **)this + 4));
              if (BYTE8(v736))
                v91 = LODWORD(__src[0]) == 17;
              else
                v91 = 0;
              v92 = v91;
              if (v91)
              {
                *(_OWORD *)__s1 = *(_OWORD *)__src;
                *(_OWORD *)v738 = v735;
                *(_OWORD *)v739 = v736;
                if ((v92 & 1) == 0)
                  goto LABEL_366;
                continue;
              }
              v93 = *((_QWORD *)this + 13);
              v94 = *((_DWORD *)this + 30);
              if (v94)
              {
                v95 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v94 - 1);
                v96 = v93 + 48 * v95;
                v97 = *(void **)(v96 + 24);
                if (v97 == __s1[1])
                {
LABEL_137:
                  if (v96 == v93 + 48 * v94 || (v100 = *(_QWORD *)(v96 + 40)) == 0)
                    v100 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
                  v101 = v741;
                  if (v741 >= (unint64_t)HIDWORD(v741))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v741 + 1, 8);
                    v101 = v741;
                  }
                  *(_QWORD *)(v740 + 8 * v101) = v100;
                  LODWORD(v741) = v741 + 1;
                  if ((v92 & 1) == 0)
                    goto LABEL_366;
                  continue;
                }
                v98 = 1;
                while (v97 != (void *)-4096)
                {
                  v99 = v95 + v98++;
                  v95 = v99 & (v94 - 1);
                  v96 = v93 + 48 * v95;
                  v97 = *(void **)(v96 + 24);
                  if (v97 == __s1[1])
                    goto LABEL_137;
                }
              }
              v96 = v93 + 48 * v94;
              goto LABEL_137;
            }
            v87 = 1;
            while (v86 != (llvm::Value *)-4096)
            {
              v88 = v84 + v87++;
              v84 = v88 & v83;
              v85 = v71 + 48 * v84;
              v86 = *(llvm::Value **)(v85 + 24);
              if (v86 == v738[0])
                goto LABEL_115;
            }
          }
          v85 = v82;
          goto LABEL_115;
        }
        break;
      }
      if (!v72)
        goto LABEL_347;
      v206 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v72 - 1);
      v207 = v71 + 48 * v206;
      v208 = *(void **)(v207 + 24);
      if (v208 != __s1[1])
      {
        v209 = 1;
        while (v208 != (void *)-4096)
        {
          v210 = v206 + v209++;
          v206 = v210 & (v72 - 1);
          v207 = v71 + 48 * v206;
          v208 = *(void **)(v207 + 24);
          if (v208 == __s1[1])
            goto LABEL_348;
        }
LABEL_347:
        v207 = v71 + 48 * v72;
      }
LABEL_348:
      if (v207 == v71 + 48 * v72 || (v258 = *(_QWORD *)(v207 + 40)) == 0)
      {
        v258 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
        v71 = *((_QWORD *)this + 13);
        v72 = *((_DWORD *)this + 30);
      }
      if (!v72)
        goto LABEL_357;
      v259 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v72 - 1);
      v260 = v71 + 48 * v259;
      v261 = *(llvm::Value **)(v260 + 24);
      if (v261 != v738[0])
      {
        v262 = 1;
        while (v261 != (llvm::Value *)-4096)
        {
          v263 = v259 + v262++;
          v259 = v263 & (v72 - 1);
          v260 = v71 + 48 * v259;
          v261 = *(llvm::Value **)(v260 + 24);
          if (v261 == v738[0])
            goto LABEL_358;
        }
LABEL_357:
        v260 = v71 + 48 * v72;
      }
LABEL_358:
      if (v260 == v71 + 48 * v72 || (v264 = *(_QWORD *)(v260 + 40)) == 0)
        v264 = llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
      __src[0] = &v735;
      *(_QWORD *)&v735 = v258;
      *((_QWORD *)&v735 + 1) = v264;
      __src[1] = (void *)0x200000002;
      MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)this, (uint64_t)__src, v80, 0);
      if (__src[0] != &v735)
        free(__src[0]);
LABEL_363:
      v265 = v741;
      if (v741 >= HIDWORD(v741))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v741 + 1, 8);
        v265 = v741;
      }
      *(_QWORD *)(v740 + 8 * v265) = MulExpr;
      LODWORD(v741) = v741 + 1;
LABEL_366:
      v266 = llvm::ScalarEvolution::getMulExpr((uint64_t)this, (uint64_t)&v740, 0, 0);
      goto LABEL_408;
    case 0x13:
      v130 = *((_QWORD *)this + 13);
      v131 = *((_DWORD *)this + 30);
      if (!v131)
        goto LABEL_213;
      v132 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v131 - 1);
      v133 = v130 + 48 * v132;
      v134 = *(void **)(v133 + 24);
      if (v134 == __s1[1])
        goto LABEL_214;
      v135 = 1;
      while (v134 != (void *)-4096)
      {
        v136 = v132 + v135++;
        v132 = v136 & (v131 - 1);
        v133 = v130 + 48 * v132;
        v134 = *(void **)(v133 + 24);
        if (v134 == __s1[1])
          goto LABEL_214;
      }
LABEL_213:
      v133 = v130 + 48 * v131;
LABEL_214:
      if (v133 == v130 + 48 * v131 || (v159 = *(_QWORD *)(v133 + 40)) == 0)
      {
        v159 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
        v130 = *((_QWORD *)this + 13);
        v131 = *((_DWORD *)this + 30);
      }
      if (!v131)
        goto LABEL_223;
      v160 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v131 - 1);
      v161 = v130 + 48 * v160;
      v162 = *(llvm::Value **)(v161 + 24);
      if (v162 != v738[0])
      {
        v163 = 1;
        while (v162 != (llvm::Value *)-4096)
        {
          v164 = v160 + v163++;
          v160 = v164 & (v131 - 1);
          v161 = v130 + 48 * v160;
          v162 = *(llvm::Value **)(v161 + 24);
          if (v162 == v738[0])
            goto LABEL_224;
        }
LABEL_223:
        v161 = v130 + 48 * v131;
      }
LABEL_224:
      if (v161 == v130 + 48 * v131 || (v165 = *(const llvm::SCEV **)(v161 + 40)) == 0)
        v165 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
      v166 = this;
      v167 = (const llvm::SCEV *)v159;
      return llvm::ScalarEvolution::getUDivExpr(v166, v167, v165);
    case 0x16:
      v137 = *((_QWORD *)this + 13);
      v138 = *((_DWORD *)this + 30);
      if (!v138)
        goto LABEL_229;
      v139 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v138 - 1);
      v140 = v137 + 48 * v139;
      v141 = *(void **)(v140 + 24);
      if (v141 == __s1[1])
        goto LABEL_230;
      v142 = 1;
      while (v141 != (void *)-4096)
      {
        v143 = v139 + v142++;
        v139 = v143 & (v138 - 1);
        v140 = v137 + 48 * v139;
        v141 = *(void **)(v140 + 24);
        if (v141 == __s1[1])
          goto LABEL_230;
      }
LABEL_229:
      v140 = v137 + 48 * v138;
LABEL_230:
      if (v140 == v137 + 48 * v138 || (v169 = *(_QWORD *)(v140 + 40)) == 0)
      {
        v169 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
        v137 = *((_QWORD *)this + 13);
        v138 = *((_DWORD *)this + 30);
      }
      if (!v138)
        goto LABEL_239;
      v170 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v138 - 1);
      v171 = v137 + 48 * v170;
      v172 = *(llvm::Value **)(v171 + 24);
      if (v172 != v738[0])
      {
        v173 = 1;
        while (v172 != (llvm::Value *)-4096)
        {
          v174 = v170 + v173++;
          v170 = v174 & (v138 - 1);
          v171 = v137 + 48 * v170;
          v172 = *(llvm::Value **)(v171 + 24);
          if (v172 == v738[0])
            goto LABEL_240;
        }
LABEL_239:
        v171 = v137 + 48 * v138;
      }
LABEL_240:
      if (v171 == v137 + 48 * v138 || (v175 = *(const llvm::SCEV **)(v171 + 40)) == 0)
        v175 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
      v176 = this;
      v177 = (const llvm::SCEV *)v169;
      goto LABEL_244;
    case 0x19:
      v102 = v738[0];
      if (!v738[0] || *((_BYTE *)v738[0] + 16) != 16)
        goto LABEL_656;
      v103 = *(unsigned int *)(*(_QWORD *)v738[0] + 8);
      v104 = (unint64_t *)((char *)v738[0] + 24);
      v105 = *((_DWORD *)v738[0] + 8);
      v106 = (unint64_t *)((char *)v738[0] + 24);
      if (v105 < 0x41)
        goto LABEL_149;
      if (v105 - llvm::APInt::countLeadingZerosSlowCase((llvm::Value *)((char *)v738[0] + 24)) > 0x40)
        goto LABEL_656;
      v106 = (unint64_t *)*v104;
LABEL_149:
      v107 = v103 >> 8;
      if (*v106 >= v103 >> 8)
        goto LABEL_656;
      if (!v739[0])
      {
        v288 = 0;
        goto LABEL_467;
      }
      if (*((_BYTE *)v739[0] + 16) == 5)
      {
        LOBYTE(v108) = 0;
        goto LABEL_153;
      }
      v108 = *((_BYTE *)v739[0] + 17) & 6;
      if ((*((_BYTE *)v739[0] + 17) & 6) == 0)
        goto LABEL_153;
      if (llvm::ScalarEvolution::isSCEVExprNeverPoison(this, v739[0]))
        v297 = v108;
      else
        v297 = 0;
      if (v297 < 4)
      {
        v109 = 0;
        LOBYTE(v108) = v297;
LABEL_466:
        v288 = v108 & 2 | v109;
        v105 = *((_DWORD *)v102 + 8);
LABEL_467:
        if (v105 >= 0x41)
          v104 = (unint64_t *)*v104;
        v318 = ***(llvm::ConstantInt ****)this;
        v319 = (unint64_t *)*v104;
        LODWORD(v741) = v103 >> 8;
        if (v103 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v740, 0, 0);
          LODWORD(v107) = v741;
        }
        else
        {
          v740 = 0;
        }
        v320 = 1 << (char)v319;
        if (v107 > 0x40)
          *(_QWORD *)(v740 + 8 * (v319 >> 6)) |= v320;
        else
          v740 |= v320;
        v321 = llvm::ConstantInt::get(v318, (llvm::LLVMContext *)&v740, v24);
        if (v741 >= 0x41 && v740)
          MEMORY[0x1CAA32F9C](v740, 0x1000C8000313F17);
        v322 = *((_QWORD *)this + 13);
        v323 = *((_DWORD *)this + 30);
        if (v323)
        {
          v324 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v323 - 1);
          v325 = v322 + 48 * v324;
          v326 = *(void **)(v325 + 24);
          if (v326 == __s1[1])
          {
LABEL_484:
            if (v325 == v322 + 48 * v323 || (v329 = *(_QWORD *)(v325 + 40)) == 0)
            {
              v329 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
              v322 = *((_QWORD *)this + 13);
              v323 = *((_DWORD *)this + 30);
            }
            if (v323)
            {
              v330 = (v323 - 1) & ((v321 >> 4) ^ (v321 >> 9));
              v331 = v322 + 48 * v330;
              v332 = *(llvm::Value **)(v331 + 24);
              if (v332 == v321)
                goto LABEL_494;
              v333 = 1;
              while (v332 != (llvm::Value *)-4096)
              {
                v334 = v330 + v333++;
                v330 = v334 & (v323 - 1);
                v331 = v322 + 48 * v330;
                v332 = *(llvm::Value **)(v331 + 24);
                if (v332 == v321)
                  goto LABEL_494;
              }
            }
            v331 = v322 + 48 * v323;
LABEL_494:
            if (v331 == v322 + 48 * v323 || (v335 = *(_QWORD *)(v331 + 40)) == 0)
              v335 = llvm::ScalarEvolution::createSCEVIter(this, v321);
            return (const llvm::SCEV *)sub_1C4E0AE60((uint64_t)this, v329, v335, v288, 0);
          }
          v327 = 1;
          while (v326 != (void *)-4096)
          {
            v328 = v324 + v327++;
            v324 = v328 & (v323 - 1);
            v325 = v322 + 48 * v324;
            v326 = *(void **)(v325 + 24);
            if (v326 == __s1[1])
              goto LABEL_484;
          }
        }
        v325 = v322 + 48 * v323;
        goto LABEL_484;
      }
      if ((v297 & 2) != 0)
        goto LABEL_465;
      v316 = *((_DWORD *)v102 + 8);
      v317 = (_QWORD *)((char *)v102 + 24);
      if (v316 < 0x41)
        goto LABEL_464;
      if (v316 - llvm::APInt::countLeadingZerosSlowCase((llvm::Value *)((char *)v102 + 24)) <= 0x40)
      {
        v317 = (_QWORD *)*v104;
LABEL_464:
        if (*v317 < (unint64_t)(v107 - 1))
        {
LABEL_465:
          v109 = 4;
          goto LABEL_466;
        }
      }
LABEL_153:
      v109 = 0;
      goto LABEL_466;
    case 0x1B:
      v110 = v738[0];
      if (!v738[0] || *((_BYTE *)v738[0] + 16) != 16)
        goto LABEL_656;
      v111 = *(llvm::Type **)__s1[1];
      v112 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
      v113 = *(_QWORD *)__s1[1];
      if (*(_BYTE *)(*(_QWORD *)__s1[1] + 8) == 15)
      {
        IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v112, v113);
      }
      else
      {
        sub_1C4768AD0(v112, v113);
        IndexTypeSizeInBits = v115;
        if ((_DWORD)v114 == 1)
      }
      v117 = (llvm::Value *)((char *)v110 + 24);
      v118 = *((_DWORD *)v110 + 8);
      if (v118 >= 0x41)
      {
        v211 = llvm::APInt::countLeadingZerosSlowCase(v117);
        if (v118 - v211 >= 0x41)
          goto LABEL_656;
        v119 = **(_QWORD ***)v117;
        if ((unint64_t)v119 >= IndexTypeSizeInBits)
          goto LABEL_656;
        if (v118 != v211)
          goto LABEL_166;
      }
      else
      {
        v119 = *(_QWORD **)v117;
        if (*(_QWORD *)v117 >= IndexTypeSizeInBits)
          goto LABEL_656;
        if (v119)
        {
LABEL_166:
          v120 = ***(_QWORD ****)this;
          v121 = IndexTypeSizeInBits - (_DWORD)v119;
          LODWORD(v740) = IndexTypeSizeInBits - (_DWORD)v119;
          if ((int)IndexTypeSizeInBits - (int)v119 <= 63)
          {
            if (v121 <= 31)
            {
              switch(v121)
              {
                case 16:
                  v122 = (llvm::Type *)(*v120 + 1936);
                  goto LABEL_546;
                case 8:
                  v122 = (llvm::Type *)(*v120 + 1912);
                  goto LABEL_546;
                case 1:
                  v122 = (llvm::Type *)(*v120 + 1888);
                  goto LABEL_546;
              }
            }
            else if (v121 == 32)
            {
              v122 = (llvm::Type *)(*v120 + 1960);
              goto LABEL_546;
            }
          }
          else
          {
            if (v121 == 64)
            {
              v122 = (llvm::Type *)(*v120 + 1984);
              goto LABEL_546;
            }
            if (v121 == 128)
            {
              v122 = (llvm::Type *)(*v120 + 2008);
              goto LABEL_546;
            }
          }
          v712 = sub_1C5270984(*v120 + 2168, &v740);
          v122 = (llvm::Type *)*((_QWORD *)v712 + 1);
          if (!v122)
          {
            v713 = v712;
            v122 = (llvm::Type *)sub_1C484358C(*v120 + 2040, 24, 3);
            v714 = v740;
            *(_QWORD *)v122 = v120;
            *((_QWORD *)v122 + 2) = 0;
            *((_QWORD *)v122 + 1) = (v714 << 8) | 0xDu;
            *((_QWORD *)v713 + 1) = v122;
          }
LABEL_546:
          v363 = __s1[1];
          v364 = *((unsigned __int8 *)__s1[1] + 16);
          v365 = v364 - 28;
          v367 = v364 < 0x1C && v364 != 5;
          if (!__s1[1] || v367)
            goto LABEL_656;
          if (v364 <= 0x1B)
            v365 = *((unsigned __int16 *)__s1[1] + 9);
          if (v365 != 25)
            goto LABEL_656;
          v368 = *((_DWORD *)__s1[1] + 5);
          if ((v368 & 0x40000000) != 0)
            v369 = (llvm::Value **)*((_QWORD *)__s1[1] - 1);
          else
            v369 = (llvm::Value **)((char *)__s1[1] - 32 * (v368 & 0x7FFFFFF));
          v370 = *v369;
          v371 = *((_QWORD *)this + 13);
          v372 = *((_DWORD *)this + 30);
          if (v372)
          {
            v373 = ((v370 >> 4) ^ (v370 >> 9)) & (v372 - 1);
            v374 = v371 + 48 * v373;
            v375 = *(llvm::Value **)(v374 + 24);
            if (v375 == v370)
            {
LABEL_567:
              if (v374 == v371 + 48 * v372 || (v378 = *(const llvm::SCEV **)(v374 + 40)) == 0)
              {
                v378 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v370);
                v368 = v363[5];
              }
              if ((v368 & 0x40000000) != 0)
                v379 = (char *)*((_QWORD *)v363 - 1);
              else
                v379 = (char *)&v363[-8 * (v368 & 0x7FFFFFF)];
              v380 = *((_QWORD *)v379 + 4);
              if ((llvm::Value *)v380 == v738[0])
              {
                TruncateExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, v378, v122, 0);
                v385 = this;
                v386 = v111;
                return (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(v385, TruncateExpr, v386, 0);
              }
              if (v380 && *(_BYTE *)(v380 + 16) == 16)
              {
                v381 = (_QWORD **)(v380 + 24);
                v382 = *(_DWORD *)(v380 + 32);
                if (v382 >= 0x41)
                {
                  if (v382 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v380 + 24)) >= 0x41)
                    goto LABEL_656;
                  v383 = (_QWORD *)**v381;
                }
                else
                {
                  v383 = *v381;
                }
                if ((unint64_t)v383 < IndexTypeSizeInBits)
                {
                  v387 = (_DWORD)v383 - (_DWORD)v119;
                  if (v383 > v119)
                  {
                    LODWORD(v741) = v121;
                    if (v121 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v740, 0, 0);
                      v389 = 1 << v387;
                      if (v741 > 0x40)
                      {
                        *(_QWORD *)(v740 + 8 * (v387 >> 6)) |= v389;
                        goto LABEL_587;
                      }
                      v388 = v740;
                    }
                    else
                    {
                      v388 = 0;
                      v389 = 1 << v387;
                    }
                    v740 = v389 | v388;
LABEL_587:
                    v390 = llvm::ScalarEvolution::getTruncateExpr(this, v378, v122, 0);
                    Constant = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&v740, v391);
                    v393 = (const llvm::SCEV *)sub_1C4E0AE60((uint64_t)this, v390, Constant, 0, 0);
                    SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, v393, v111, 0);
                    if (v741 >= 0x41 && v740)
                      MEMORY[0x1CAA32F9C](v740, 0x1000C8000313F17);
                    return (const llvm::SCEV *)SignExtendExpr;
                  }
                }
              }
LABEL_656:
              v431 = *((unsigned __int8 *)a2 + 16);
              if (v431 > 0x1B)
                v432 = v431 - 28;
              else
                v432 = *((unsigned __int16 *)a2 + 9);
              if (v432 > 33)
              {
                switch(v432)
                {
                  case '"':
                    return (const llvm::SCEV *)llvm::ScalarEvolution::createNodeForGEP(this, a2);
                  case '&':
                    v449 = *((_DWORD *)a2 + 5);
                    if ((v449 & 0x40000000) != 0)
                      v450 = (llvm::Value **)*((_QWORD *)a2 - 1);
                    else
                      v450 = (llvm::Value **)((char *)a2 - 32 * (v449 & 0x7FFFFFF));
                    v470 = *v450;
                    v471 = *((_QWORD *)this + 13);
                    v472 = *((_DWORD *)this + 30);
                    if (!v472)
                      goto LABEL_722;
                    v473 = ((v470 >> 4) ^ (v470 >> 9)) & (v472 - 1);
                    v474 = v471 + 48 * v473;
                    v475 = *(llvm::Value **)(v474 + 24);
                    if (v475 == v470)
                      goto LABEL_723;
                    v476 = 1;
                    while (v475 != (llvm::Value *)-4096)
                    {
                      v477 = v473 + v476++;
                      v473 = v477 & (v472 - 1);
                      v474 = v471 + 48 * v473;
                      v475 = *(llvm::Value **)(v474 + 24);
                      if (v475 == v470)
                        goto LABEL_723;
                    }
LABEL_722:
                    v474 = v471 + 48 * v472;
LABEL_723:
                    if (v474 == v471 + 48 * v472 || (v478 = *(const llvm::SCEV **)(v474 + 40)) == 0)
                      v478 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v470);
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, v478, *(llvm::Type **)a2, 0);
                  case '\'':
                    v447 = *((_DWORD *)a2 + 5);
                    if ((v447 & 0x40000000) != 0)
                      v448 = (llvm::Value **)*((_QWORD *)a2 - 1);
                    else
                      v448 = (llvm::Value **)((char *)a2 - 32 * (v447 & 0x7FFFFFF));
                    v461 = *v448;
                    v462 = *((_QWORD *)this + 13);
                    v463 = *((_DWORD *)this + 30);
                    if (!v463)
                      goto LABEL_710;
                    v464 = ((v461 >> 4) ^ (v461 >> 9)) & (v463 - 1);
                    v465 = v462 + 48 * v464;
                    v466 = *(llvm::Value **)(v465 + 24);
                    if (v466 == v461)
                      goto LABEL_711;
                    v467 = 1;
                    while (v466 != (llvm::Value *)-4096)
                    {
                      v468 = v464 + v467++;
                      v464 = v468 & (v463 - 1);
                      v465 = v462 + 48 * v464;
                      v466 = *(llvm::Value **)(v465 + 24);
                      if (v466 == v461)
                        goto LABEL_711;
                    }
LABEL_710:
                    v465 = v462 + 48 * v463;
LABEL_711:
                    if (v465 == v462 + 48 * v463 || (v469 = *(const llvm::SCEV **)(v465 + 40)) == 0)
                      v469 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v461);
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, v469, *(llvm::Type **)a2, 0);
                  case '(':
                    v453 = *((_DWORD *)a2 + 5);
                    if ((v453 & 0x40000000) != 0)
                      v454 = (uint64_t *)*((_QWORD *)a2 - 1);
                    else
                      v454 = (uint64_t *)((char *)a2 - 32 * (v453 & 0x7FFFFFF));
                    sub_1C4F1EE04((uint64_t)&v740, *v454, *((const llvm::APInt **)this + 4));
                    if (v745 && (_DWORD)v740 == 15 && (_BYTE)v743)
                    {
                      v479 = *(llvm::Type **)a2;
                      v480 = *((_QWORD *)this + 13);
                      v481 = *((_DWORD *)this + 30);
                      if (v481)
                      {
                        v482 = v481 - 1;
                        v483 = ((v741 >> 4) ^ (v741 >> 9)) & (v481 - 1);
                        v484 = v480 + 48 * v483;
                        v485 = *(llvm::Value **)(v484 + 24);
                        if (v485 == (llvm::Value *)v741)
                        {
LABEL_784:
                          if (v484 == v480 + 48 * v481 || (v523 = *(const llvm::SCEV **)(v484 + 40)) == 0)
                            v523 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)v741);
                          v524 = llvm::ScalarEvolution::getSignExtendExpr(this, v523, v479, 0);
                          v525 = *((_QWORD *)this + 13);
                          v526 = *((_DWORD *)this + 30);
                          if (v526)
                          {
                            v527 = v526 - 1;
                            v528 = ((v742 >> 4) ^ (v742 >> 9)) & (v526 - 1);
                            v529 = v525 + 48 * v528;
                            v530 = *(llvm::Value **)(v529 + 24);
                            if (v530 == v742)
                              goto LABEL_794;
                            v531 = 1;
                            while (v530 != (llvm::Value *)-4096)
                            {
                              v532 = v528 + v531++;
                              v528 = v532 & v527;
                              v529 = v525 + 48 * (v532 & v527);
                              v530 = *(llvm::Value **)(v529 + 24);
                              if (v530 == v742)
                                goto LABEL_794;
                            }
                          }
                          v529 = v525 + 48 * v526;
LABEL_794:
                          if (v529 == v525 + 48 * v526 || (v533 = *(const llvm::SCEV **)(v529 + 40)) == 0)
                            v533 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v742);
                          v199 = llvm::ScalarEvolution::getSignExtendExpr(this, v533, v479, 0);
                          v200 = this;
                          v201 = v524;
                          goto LABEL_798;
                        }
                        v486 = 1;
                        while (v485 != (llvm::Value *)-4096)
                        {
                          v487 = v483 + v486++;
                          v483 = v487 & v482;
                          v484 = v480 + 48 * (v487 & v482);
                          v485 = *(llvm::Value **)(v484 + 24);
                          if (v485 == (llvm::Value *)v741)
                            goto LABEL_784;
                        }
                      }
                      v484 = v480 + 48 * v481;
                      goto LABEL_784;
                    }
                    v488 = *((_DWORD *)a2 + 5);
                    if ((v488 & 0x40000000) != 0)
                      v489 = (llvm::Value **)*((_QWORD *)a2 - 1);
                    else
                      v489 = (llvm::Value **)((char *)a2 - 32 * (v488 & 0x7FFFFFF));
                    v534 = *v489;
                    v535 = *((_QWORD *)this + 13);
                    v536 = *((_DWORD *)this + 30);
                    if (!v536)
                      goto LABEL_806;
                    v537 = ((v534 >> 4) ^ (v534 >> 9)) & (v536 - 1);
                    v538 = v535 + 48 * v537;
                    v539 = *(llvm::Value **)(v538 + 24);
                    if (v539 != v534)
                    {
                      v540 = 1;
                      while (v539 != (llvm::Value *)-4096)
                      {
                        v541 = v537 + v540++;
                        v537 = v541 & (v536 - 1);
                        v538 = v535 + 48 * v537;
                        v539 = *(llvm::Value **)(v538 + 24);
                        if (v539 == v534)
                          goto LABEL_807;
                      }
LABEL_806:
                      v538 = v535 + 48 * v536;
                    }
LABEL_807:
                    if (v538 == v535 + 48 * v536 || (v542 = *(_QWORD *)(v538 + 40)) == 0)
                      v542 = llvm::ScalarEvolution::createSCEVIter(this, v534);
                    v386 = *(llvm::Type **)a2;
                    v385 = this;
                    TruncateExpr = (const llvm::SCEV *)v542;
                    break;
                  case '/':
                    v457 = *((_DWORD *)a2 + 5);
                    if ((v457 & 0x40000000) != 0)
                      v458 = (llvm::Value **)*((_QWORD *)a2 - 1);
                    else
                      v458 = (llvm::Value **)((char *)a2 - 32 * (v457 & 0x7FFFFFF));
                    v490 = *v458;
                    v491 = *((_QWORD *)this + 13);
                    v492 = *((_DWORD *)this + 30);
                    if (!v492)
                      goto LABEL_748;
                    v493 = ((v490 >> 4) ^ (v490 >> 9)) & (v492 - 1);
                    v494 = v491 + 48 * v493;
                    v495 = *(llvm::Value **)(v494 + 24);
                    if (v495 == v490)
                      goto LABEL_749;
                    v496 = 1;
                    while (v495 != (llvm::Value *)-4096)
                    {
                      v497 = v493 + v496++;
                      v493 = v497 & (v492 - 1);
                      v494 = v491 + 48 * v493;
                      v495 = *(llvm::Value **)(v494 + 24);
                      if (v495 == v490)
                        goto LABEL_749;
                    }
LABEL_748:
                    v494 = v491 + 48 * v492;
LABEL_749:
                    if (v494 == v491 + 48 * v492 || (v498 = *(const llvm::SCEV **)(v494 + 40)) == 0)
                      v498 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v490);
                    llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, v498);
                    if (*(_WORD *)(v499 + 24) == 15)
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                    llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)this, v499);
                    SignExtendExpr = v500;
                    if (*(_WORD *)(v500 + 24) == 15)
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                    return (const llvm::SCEV *)SignExtendExpr;
                  case '1':
                    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) != 0xD)
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                    v455 = *((_DWORD *)a2 + 5);
                    v456 = (v455 & 0x40000000) != 0
                         ? (llvm::Value *)*((_QWORD *)a2 - 1)
                         : (llvm::Value *)((char *)a2 - 32 * (v455 & 0x7FFFFFF));
                    v212 = *(llvm::Value **)v456;
                    if ((*(_DWORD *)(**(_QWORD **)v456 + 8) & 0xFD) != 0xD)
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                    v213 = *((_QWORD *)this + 13);
                    v214 = *((_DWORD *)this + 30);
                    if (!v214)
                      goto LABEL_1086;
                    v543 = ((v212 >> 4) ^ (v212 >> 9)) & (v214 - 1);
                    v216 = v213 + 48 * v543;
                    v544 = *(llvm::Value **)(v216 + 24);
                    if (v544 == v212)
                      goto LABEL_1087;
                    v545 = 1;
                    while (v544 != (llvm::Value *)-4096)
                    {
                      v546 = v543 + v545++;
                      v543 = v546 & (v214 - 1);
                      v216 = v213 + 48 * v543;
                      v544 = *(llvm::Value **)(v216 + 24);
                      if (v544 == v212)
                        goto LABEL_1087;
                    }
                    goto LABEL_1086;
                  case '7':
                    return llvm::ScalarEvolution::createNodeForPHI(this, a2);
                  case '8':
                    goto LABEL_667;
                  case '9':
                    v451 = *((_DWORD *)a2 + 5);
                    if ((v451 & 0x40000000) != 0)
                      v452 = (llvm::Value **)*((_QWORD *)a2 - 1);
                    else
                      v452 = (llvm::Value **)((char *)a2 - 32 * (v451 & 0x7FFFFFF));
                    return (const llvm::SCEV *)llvm::ScalarEvolution::createNodeForSelectOrPHI(this, a2, *v452, v452[4], v452[8]);
                  default:
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                }
                return (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(v385, TruncateExpr, v386, 0);
              }
              if (v432 != 5)
              {
                if (v432 != 20)
                {
                  if (v432 != 23)
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                  v433 = *((_DWORD *)a2 + 5);
                  if ((v433 & 0x40000000) != 0)
                    v434 = (llvm::Value **)*((_QWORD *)a2 - 1);
                  else
                    v434 = (llvm::Value **)((char *)a2 - 32 * (v433 & 0x7FFFFFF));
                  v501 = *v434;
                  v502 = *((_QWORD *)this + 13);
                  v503 = *((_DWORD *)this + 30);
                  if (v503)
                  {
                    v504 = ((v501 >> 4) ^ (v501 >> 9)) & (v503 - 1);
                    v505 = v502 + 48 * v504;
                    v506 = *(llvm::Value **)(v505 + 24);
                    if (v506 == v501)
                    {
LABEL_763:
                      if (v505 == v502 + 48 * v503 || (v509 = *(const llvm::SCEV **)(v505 + 40)) == 0)
                        v509 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v501);
                      if (!llvm::ScalarEvolution::isKnownNonNegative(this, v509))
                        return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                      v510 = *((_DWORD *)a2 + 5);
                      if ((v510 & 0x40000000) != 0)
                        v511 = (char *)*((_QWORD *)a2 - 1);
                      else
                        v511 = (char *)a2 - 32 * (v510 & 0x7FFFFFF);
                      v547 = (llvm::Value *)*((_QWORD *)v511 + 4);
                      v548 = *((_QWORD *)this + 13);
                      v549 = *((_DWORD *)this + 30);
                      if (v549)
                      {
                        v550 = ((v547 >> 4) ^ (v547 >> 9)) & (v549 - 1);
                        v551 = v548 + 48 * v550;
                        v552 = *(llvm::Value **)(v551 + 24);
                        if (v552 == v547)
                        {
LABEL_828:
                          if (v551 == v548 + 48 * v549 || (v555 = *(const llvm::SCEV **)(v551 + 40)) == 0)
                            v555 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v547);
                          if (llvm::ScalarEvolution::isKnownNonNegative(this, v555))
                          {
                            v556 = *((_DWORD *)a2 + 5);
                            if ((v556 & 0x40000000) != 0)
                              v557 = (llvm::Value **)*((_QWORD *)a2 - 1);
                            else
                              v557 = (llvm::Value **)((char *)a2 - 32 * (v556 & 0x7FFFFFF));
                            v569 = *v557;
                            v570 = *((_QWORD *)this + 13);
                            v571 = *((_DWORD *)this + 30);
                            if (v571)
                            {
                              v572 = ((v569 >> 4) ^ (v569 >> 9)) & (v571 - 1);
                              v573 = v570 + 48 * v572;
                              v574 = *(llvm::Value **)(v573 + 24);
                              if (v574 == v569)
                              {
LABEL_856:
                                if (v573 == v570 + 48 * v571 || (v577 = *(_QWORD *)(v573 + 40)) == 0)
                                {
                                  v577 = llvm::ScalarEvolution::createSCEVIter(this, v569);
                                  v556 = *((_DWORD *)a2 + 5);
                                }
                                if ((v556 & 0x40000000) != 0)
                                  v578 = (char *)*((_QWORD *)a2 - 1);
                                else
                                  v578 = (char *)a2 - 32 * (v556 & 0x7FFFFFF);
                                v579 = (llvm::Value *)*((_QWORD *)v578 + 4);
                                v580 = *((_QWORD *)this + 13);
                                v581 = *((_DWORD *)this + 30);
                                if (v581)
                                {
                                  v582 = ((v579 >> 4) ^ (v579 >> 9)) & (v581 - 1);
                                  v583 = v580 + 48 * v582;
                                  v584 = *(llvm::Value **)(v583 + 24);
                                  if (v584 == v579)
                                  {
LABEL_869:
                                    if (v583 == v580 + 48 * v581 || (v175 = *(const llvm::SCEV **)(v583 + 40)) == 0)
                                      v175 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v579);
                                    v176 = this;
                                    v177 = (const llvm::SCEV *)v577;
LABEL_244:
                                    llvm::ScalarEvolution::getURemExpr(v176, v177, v175);
                                    return (const llvm::SCEV *)v168;
                                  }
                                  v585 = 1;
                                  while (v584 != (llvm::Value *)-4096)
                                  {
                                    v586 = v582 + v585++;
                                    v582 = v586 & (v581 - 1);
                                    v583 = v580 + 48 * v582;
                                    v584 = *(llvm::Value **)(v583 + 24);
                                    if (v584 == v579)
                                      goto LABEL_869;
                                  }
                                }
                                v583 = v580 + 48 * v581;
                                goto LABEL_869;
                              }
                              v575 = 1;
                              while (v574 != (llvm::Value *)-4096)
                              {
                                v576 = v572 + v575++;
                                v572 = v576 & (v571 - 1);
                                v573 = v570 + 48 * v572;
                                v574 = *(llvm::Value **)(v573 + 24);
                                if (v574 == v569)
                                  goto LABEL_856;
                              }
                            }
                            v573 = v570 + 48 * v571;
                            goto LABEL_856;
                          }
                          return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                        }
                        v553 = 1;
                        while (v552 != (llvm::Value *)-4096)
                        {
                          v554 = v550 + v553++;
                          v550 = v554 & (v549 - 1);
                          v551 = v548 + 48 * v550;
                          v552 = *(llvm::Value **)(v551 + 24);
                          if (v552 == v547)
                            goto LABEL_828;
                        }
                      }
                      v551 = v548 + 48 * v549;
                      goto LABEL_828;
                    }
                    v507 = 1;
                    while (v506 != (llvm::Value *)-4096)
                    {
                      v508 = v504 + v507++;
                      v504 = v508 & (v503 - 1);
                      v505 = v502 + 48 * v504;
                      v506 = *(llvm::Value **)(v505 + 24);
                      if (v506 == v501)
                        goto LABEL_763;
                    }
                  }
                  v505 = v502 + 48 * v503;
                  goto LABEL_763;
                }
                v459 = *((_DWORD *)a2 + 5);
                if ((v459 & 0x40000000) != 0)
                  v460 = (llvm::Value **)*((_QWORD *)a2 - 1);
                else
                  v460 = (llvm::Value **)((char *)a2 - 32 * (v459 & 0x7FFFFFF));
                v512 = *v460;
                v513 = *((_QWORD *)this + 13);
                v514 = *((_DWORD *)this + 30);
                if (v514)
                {
                  v515 = ((v512 >> 4) ^ (v512 >> 9)) & (v514 - 1);
                  v516 = v513 + 48 * v515;
                  v517 = *(llvm::Value **)(v516 + 24);
                  if (v517 == v512)
                  {
LABEL_777:
                    if (v516 == v513 + 48 * v514 || (v520 = *(const llvm::SCEV **)(v516 + 40)) == 0)
                      v520 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v512);
                    if (!llvm::ScalarEvolution::isKnownNonNegative(this, v520))
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                    v521 = *((_DWORD *)a2 + 5);
                    if ((v521 & 0x40000000) != 0)
                      v522 = (char *)*((_QWORD *)a2 - 1);
                    else
                      v522 = (char *)a2 - 32 * (v521 & 0x7FFFFFF);
                    v558 = (llvm::Value *)*((_QWORD *)v522 + 4);
                    v559 = *((_QWORD *)this + 13);
                    v560 = *((_DWORD *)this + 30);
                    if (v560)
                    {
                      v561 = ((v558 >> 4) ^ (v558 >> 9)) & (v560 - 1);
                      v562 = v559 + 48 * v561;
                      v563 = *(llvm::Value **)(v562 + 24);
                      if (v563 == v558)
                      {
LABEL_842:
                        if (v562 == v559 + 48 * v560 || (v566 = *(const llvm::SCEV **)(v562 + 40)) == 0)
                          v566 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v558);
                        if (!llvm::ScalarEvolution::isKnownNonNegative(this, v566))
                          return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                        v567 = *((_DWORD *)a2 + 5);
                        if ((v567 & 0x40000000) != 0)
                          v568 = (llvm::Value **)*((_QWORD *)a2 - 1);
                        else
                          v568 = (llvm::Value **)((char *)a2 - 32 * (v567 & 0x7FFFFFF));
                        v587 = *v568;
                        v588 = *((_QWORD *)this + 13);
                        v589 = *((_DWORD *)this + 30);
                        if (v589)
                        {
                          v590 = ((v587 >> 4) ^ (v587 >> 9)) & (v589 - 1);
                          v591 = v588 + 48 * v590;
                          v592 = *(llvm::Value **)(v591 + 24);
                          if (v592 == v587)
                          {
LABEL_881:
                            if (v591 == v588 + 48 * v589 || (v595 = *(_QWORD *)(v591 + 40)) == 0)
                            {
                              v595 = llvm::ScalarEvolution::createSCEVIter(this, v587);
                              v567 = *((_DWORD *)a2 + 5);
                            }
                            if ((v567 & 0x40000000) != 0)
                              v596 = (char *)*((_QWORD *)a2 - 1);
                            else
                              v596 = (char *)a2 - 32 * (v567 & 0x7FFFFFF);
                            v597 = (llvm::Value *)*((_QWORD *)v596 + 4);
                            v598 = *((_QWORD *)this + 13);
                            v599 = *((_DWORD *)this + 30);
                            if (v599)
                            {
                              v600 = ((v597 >> 4) ^ (v597 >> 9)) & (v599 - 1);
                              v601 = v598 + 48 * v600;
                              v602 = *(llvm::Value **)(v601 + 24);
                              if (v602 == v597)
                              {
LABEL_894:
                                if (v601 == v598 + 48 * v599 || (v165 = *(const llvm::SCEV **)(v601 + 40)) == 0)
                                  v165 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v597);
                                v166 = this;
                                v167 = (const llvm::SCEV *)v595;
                                return llvm::ScalarEvolution::getUDivExpr(v166, v167, v165);
                              }
                              v603 = 1;
                              while (v602 != (llvm::Value *)-4096)
                              {
                                v604 = v600 + v603++;
                                v600 = v604 & (v599 - 1);
                                v601 = v598 + 48 * v600;
                                v602 = *(llvm::Value **)(v601 + 24);
                                if (v602 == v597)
                                  goto LABEL_894;
                              }
                            }
                            v601 = v598 + 48 * v599;
                            goto LABEL_894;
                          }
                          v593 = 1;
                          while (v592 != (llvm::Value *)-4096)
                          {
                            v594 = v590 + v593++;
                            v590 = v594 & (v589 - 1);
                            v591 = v588 + 48 * v590;
                            v592 = *(llvm::Value **)(v591 + 24);
                            if (v592 == v587)
                              goto LABEL_881;
                          }
                        }
                        v591 = v588 + 48 * v589;
                        goto LABEL_881;
                      }
                      v564 = 1;
                      while (v563 != (llvm::Value *)-4096)
                      {
                        v565 = v561 + v564++;
                        v561 = v565 & (v560 - 1);
                        v562 = v559 + 48 * v561;
                        v563 = *(llvm::Value **)(v562 + 24);
                        if (v563 == v558)
                          goto LABEL_842;
                      }
                    }
                    v562 = v559 + 48 * v560;
                    goto LABEL_842;
                  }
                  v518 = 1;
                  while (v517 != (llvm::Value *)-4096)
                  {
                    v519 = v515 + v518++;
                    v515 = v519 & (v514 - 1);
                    v516 = v513 + 48 * v515;
                    v517 = *(llvm::Value **)(v516 + 24);
                    if (v517 == v512)
                      goto LABEL_777;
                  }
                }
                v516 = v513 + 48 * v514;
                goto LABEL_777;
              }
LABEL_667:
              LODWORD(__s1[0]) = 0;
              if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)a2 + 8, 46, (int *)__s1)
                || (v435 = *((_QWORD *)a2 - 4)) != 0
                && !*(_BYTE *)(v435 + 16)
                && *(_QWORD *)(v435 + 24) == *((_QWORD *)a2 + 9)
                && (v740 = *(_QWORD *)(v435 + 112),
                    llvm::AttributeList::hasAttrSomewhere((uint64_t *)&v740, 46, (int *)__s1)))
              {
                v212 = (llvm::Value *)*((_QWORD *)a2
                                      + 4 * (LODWORD(__s1[0]) - 1)
                                      + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
                if (v212)
                {
                  v213 = *((_QWORD *)this + 13);
                  v214 = *((_DWORD *)this + 30);
                  if (v214)
                  {
                    v719 = (v214 - 1) & ((v212 >> 4) ^ (v212 >> 9));
                    v216 = v213 + 48 * v719;
                    v720 = *(llvm::Value **)(v216 + 24);
                    if (v720 == v212)
                      goto LABEL_1087;
                    v721 = 1;
                    while (v720 != (llvm::Value *)-4096)
                    {
                      v722 = v719 + v721++;
                      v719 = v722 & (v214 - 1);
                      v216 = v213 + 48 * v719;
                      v720 = *(llvm::Value **)(v216 + 24);
                      if (v720 == v212)
                        goto LABEL_1087;
                    }
                  }
LABEL_1086:
                  v216 = v213 + 48 * v214;
LABEL_1087:
                  if (v216 != v213 + 48 * v214)
                  {
                    SignExtendExpr = *(_QWORD *)(v216 + 40);
                    if (SignExtendExpr)
                      return (const llvm::SCEV *)SignExtendExpr;
                  }
                  v279 = this;
                  return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v279, v212);
                }
              }
              if (v431 != 84)
                return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
              v436 = *((_QWORD *)a2 - 4);
              if (!v436
                || *(_BYTE *)(v436 + 16)
                || *(_QWORD *)(v436 + 24) != *((_QWORD *)a2 + 9)
                || (*(_BYTE *)(v436 + 33) & 0x20) == 0)
              {
                return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
              }
              v437 = *(_DWORD *)(v436 + 36);
              if (v437 <= 299)
              {
                if (v437 <= 274)
                {
                  if (v437 != 1)
                  {
                    if (v437 != 274)
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                    v438 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                    v439 = (llvm::Value *)*((_QWORD *)a2 - 4 * v438);
                    v440 = *((_QWORD *)this + 13);
                    v441 = *((_DWORD *)this + 30);
                    if (v441)
                    {
                      v442 = ((v439 >> 4) ^ (v439 >> 9)) & (v441 - 1);
                      v443 = v440 + 48 * v442;
                      v444 = *(llvm::Value **)(v443 + 24);
                      if (v444 == v439)
                      {
LABEL_1002:
                        if (v443 == v440 + 48 * v441 || (v663 = *(const llvm::SCEV **)(v443 + 40)) == 0)
                        {
                          v663 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v439);
                          v440 = *((_QWORD *)this + 13);
                          v441 = *((_DWORD *)this + 30);
                          v438 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                        }
                        v689 = (llvm::Value *)((_QWORD *)a2 - 4 * v438)[4];
                        if (v441)
                        {
                          v690 = ((v689 >> 4) ^ (v689 >> 9)) & (v441 - 1);
                          v691 = v440 + 48 * v690;
                          v692 = *(llvm::Value **)(v691 + 24);
                          if (v692 == v689)
                            goto LABEL_1012;
                          v693 = 1;
                          while (v692 != (llvm::Value *)-4096)
                          {
                            v694 = v690 + v693++;
                            v690 = v694 & (v441 - 1);
                            v691 = v440 + 48 * v690;
                            v692 = *(llvm::Value **)(v691 + 24);
                            if (v692 == v689)
                              goto LABEL_1012;
                          }
                        }
                        v691 = v440 + 48 * v441;
LABEL_1012:
                        if (v691 != v440 + 48 * v441)
                        {
                          v695 = *(const llvm::SCEV **)(v691 + 40);
                          if (v695)
                            return (const llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(this, v663, v695);
                        }
                        v696 = llvm::ScalarEvolution::createSCEVIter(this, v689);
LABEL_1049:
                        v695 = (const llvm::SCEV *)v696;
                        return (const llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(this, v663, v695);
                      }
                      v445 = 1;
                      while (v444 != (llvm::Value *)-4096)
                      {
                        v446 = v442 + v445++;
                        v442 = v446 & (v441 - 1);
                        v443 = v440 + 48 * v442;
                        v444 = *(llvm::Value **)(v443 + 24);
                        if (v444 == v439)
                          goto LABEL_1002;
                      }
                    }
                    v443 = v440 + 48 * v441;
                    goto LABEL_1002;
                  }
                  v627 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                  v628 = (llvm::Value *)*((_QWORD *)a2 - 4 * v627);
                  v629 = *((_QWORD *)this + 13);
                  v630 = *((_DWORD *)this + 30);
                  if (v630)
                  {
                    v631 = ((v628 >> 4) ^ (v628 >> 9)) & (v630 - 1);
                    v632 = v629 + 48 * v631;
                    v633 = *(llvm::Value **)(v632 + 24);
                    if (v633 == v628)
                      goto LABEL_951;
                    v634 = 1;
                    while (v633 != (llvm::Value *)-4096)
                    {
                      v635 = v631 + v634++;
                      v631 = v635 & (v630 - 1);
                      v632 = v629 + 48 * v631;
                      v633 = *(llvm::Value **)(v632 + 24);
                      if (v633 == v628)
                        goto LABEL_951;
                    }
                  }
                  v632 = v629 + 48 * v630;
LABEL_951:
                  if (v632 == v629 + 48 * v630 || (v663 = *(const llvm::SCEV **)(v632 + 40)) == 0)
                  {
                    v663 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v628);
                    v627 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                  }
                  v664 = ((_QWORD *)a2 - 4 * v627)[4];
                  if (*(_DWORD *)(v664 + 32) > 0x40u)
                    llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v664 + 24));
                  v696 = llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, (uint64_t)v663);
                  goto LABEL_1049;
                }
                if (v437 != 275)
                {
                  if (v437 != 289)
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                  v212 = (llvm::Value *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
                  v213 = *((_QWORD *)this + 13);
                  v214 = *((_DWORD *)this + 30);
                  if (v214)
                  {
                    v614 = ((v212 >> 4) ^ (v212 >> 9)) & (v214 - 1);
                    v216 = v213 + 48 * v614;
                    v615 = *(llvm::Value **)(v216 + 24);
                    if (v615 == v212)
                      goto LABEL_1087;
                    v616 = 1;
                    while (v615 != (llvm::Value *)-4096)
                    {
                      v617 = v614 + v616++;
                      v614 = v617 & (v214 - 1);
                      v216 = v213 + 48 * v614;
                      v615 = *(llvm::Value **)(v216 + 24);
                      if (v615 == v212)
                        goto LABEL_1087;
                    }
                  }
                  goto LABEL_1086;
                }
                v645 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                v646 = (llvm::Value *)*((_QWORD *)a2 - 4 * v645);
                v647 = *((_QWORD *)this + 13);
                v648 = *((_DWORD *)this + 30);
                if (v648)
                {
                  v649 = ((v646 >> 4) ^ (v646 >> 9)) & (v648 - 1);
                  v650 = v647 + 48 * v649;
                  v651 = *(llvm::Value **)(v650 + 24);
                  if (v651 == v646)
                  {
LABEL_967:
                    if (v650 == v647 + 48 * v648 || (v672 = *(const llvm::SCEV **)(v650 + 40)) == 0)
                    {
                      v672 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v646);
                      v647 = *((_QWORD *)this + 13);
                      v648 = *((_DWORD *)this + 30);
                      v645 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                    }
                    v673 = (llvm::Value *)((_QWORD *)a2 - 4 * v645)[4];
                    if (v648)
                    {
                      v674 = ((v673 >> 4) ^ (v673 >> 9)) & (v648 - 1);
                      v675 = v647 + 48 * v674;
                      v676 = *(llvm::Value **)(v675 + 24);
                      if (v676 == v673)
                        goto LABEL_992;
                      v677 = 1;
                      while (v676 != (llvm::Value *)-4096)
                      {
                        v678 = v674 + v677++;
                        v674 = v678 & (v648 - 1);
                        v675 = v647 + 48 * v674;
                        v676 = *(llvm::Value **)(v675 + 24);
                        if (v676 == v673)
                          goto LABEL_992;
                      }
                    }
                    v675 = v647 + 48 * v648;
LABEL_992:
                    if (v675 == v647 + 48 * v648 || (v688 = *(const llvm::SCEV **)(v675 + 40)) == 0)
                      v688 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v673);
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr(this, v672, v688);
                  }
                  v652 = 1;
                  while (v651 != (llvm::Value *)-4096)
                  {
                    v653 = v649 + v652++;
                    v649 = v653 & (v648 - 1);
                    v650 = v647 + 48 * v649;
                    v651 = *(llvm::Value **)(v650 + 24);
                    if (v651 == v646)
                      goto LABEL_967;
                  }
                }
                v650 = v647 + 48 * v648;
                goto LABEL_967;
              }
              if (v437 <= 305)
              {
                if (v437 != 300)
                {
                  if (v437 != 305)
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                  v605 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                  v606 = (llvm::Value *)*((_QWORD *)a2 - 4 * v605);
                  v607 = *((_QWORD *)this + 13);
                  v608 = *((_DWORD *)this + 30);
                  if (v608)
                  {
                    v609 = ((v606 >> 4) ^ (v606 >> 9)) & (v608 - 1);
                    v610 = v607 + 48 * v609;
                    v611 = *(llvm::Value **)(v610 + 24);
                    if (v611 == v606)
                    {
LABEL_1016:
                      if (v610 == v607 + 48 * v608 || (v697 = *(_QWORD *)(v610 + 40)) == 0)
                      {
                        v697 = llvm::ScalarEvolution::createSCEVIter(this, v606);
                        v607 = *((_QWORD *)this + 13);
                        v608 = *((_DWORD *)this + 30);
                        v605 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                      }
                      v698 = (llvm::Value *)((_QWORD *)a2 - 4 * v605)[4];
                      if (v608)
                      {
                        v699 = ((v698 >> 4) ^ (v698 >> 9)) & (v608 - 1);
                        v700 = v607 + 48 * v699;
                        v701 = *(llvm::Value **)(v700 + 24);
                        if (v701 == v698)
                          goto LABEL_1036;
                        v702 = 1;
                        while (v701 != (llvm::Value *)-4096)
                        {
                          v703 = v699 + v702++;
                          v699 = v703 & (v608 - 1);
                          v700 = v607 + 48 * v699;
                          v701 = *(llvm::Value **)(v700 + 24);
                          if (v701 == v698)
                            goto LABEL_1036;
                        }
                      }
                      v700 = v607 + 48 * v608;
LABEL_1036:
                      if (v700 == v607 + 48 * v608 || (v241 = *(const llvm::SCEV **)(v700 + 40)) == 0)
                        v241 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v698);
                      v242 = this;
                      v243 = (const llvm::SCEV *)v697;
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUMaxExpr(v242, v243, v241);
                    }
                    v612 = 1;
                    while (v611 != (llvm::Value *)-4096)
                    {
                      v613 = v609 + v612++;
                      v609 = v613 & (v608 - 1);
                      v610 = v607 + 48 * v609;
                      v611 = *(llvm::Value **)(v610 + 24);
                      if (v611 == v606)
                        goto LABEL_1016;
                    }
                  }
                  v610 = v607 + 48 * v608;
                  goto LABEL_1016;
                }
                v636 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                v637 = (llvm::Value *)*((_QWORD *)a2 - 4 * v636);
                v638 = *((_QWORD *)this + 13);
                v639 = *((_DWORD *)this + 30);
                if (v639)
                {
                  v640 = ((v637 >> 4) ^ (v637 >> 9)) & (v639 - 1);
                  v641 = v638 + 48 * v640;
                  v642 = *(llvm::Value **)(v641 + 24);
                  if (v642 == v637)
                  {
LABEL_957:
                    if (v641 == v638 + 48 * v639 || (v665 = *(const llvm::SCEV **)(v641 + 40)) == 0)
                    {
                      v665 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v637);
                      v638 = *((_QWORD *)this + 13);
                      v639 = *((_DWORD *)this + 30);
                      v636 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                    }
                    v666 = (llvm::Value *)((_QWORD *)a2 - 4 * v636)[4];
                    if (v639)
                    {
                      v667 = ((v666 >> 4) ^ (v666 >> 9)) & (v639 - 1);
                      v668 = v638 + 48 * v667;
                      v669 = *(llvm::Value **)(v668 + 24);
                      if (v669 == v666)
                        goto LABEL_987;
                      v670 = 1;
                      while (v669 != (llvm::Value *)-4096)
                      {
                        v671 = v667 + v670++;
                        v667 = v671 & (v639 - 1);
                        v668 = v638 + 48 * v667;
                        v669 = *(llvm::Value **)(v668 + 24);
                        if (v669 == v666)
                          goto LABEL_987;
                      }
                    }
                    v668 = v638 + 48 * v639;
LABEL_987:
                    if (v668 == v638 + 48 * v639 || (v686 = *(const llvm::SCEV **)(v668 + 40)) == 0)
                      v686 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v666);
                    NotSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV(this, v686);
                    UMinExpr = llvm::ScalarEvolution::getUMinExpr(this, v665, NotSCEV, 0);
                    v268 = this;
                    v267 = (uint64_t)v686;
                    v270 = 2;
                    return (const llvm::SCEV *)sub_1C4E0AF14((uint64_t)v268, UMinExpr, v267, v270, 0);
                  }
                  v643 = 1;
                  while (v642 != (llvm::Value *)-4096)
                  {
                    v644 = v640 + v643++;
                    v640 = v644 & (v639 - 1);
                    v641 = v638 + 48 * v640;
                    v642 = *(llvm::Value **)(v641 + 24);
                    if (v642 == v637)
                      goto LABEL_957;
                  }
                }
                v641 = v638 + 48 * v639;
                goto LABEL_957;
              }
              if (v437 != 306)
              {
                if (v437 != 311)
                  return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
                v618 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                v619 = (llvm::Value *)*((_QWORD *)a2 - 4 * v618);
                v620 = *((_QWORD *)this + 13);
                v621 = *((_DWORD *)this + 30);
                if (v621)
                {
                  v622 = ((v619 >> 4) ^ (v619 >> 9)) & (v621 - 1);
                  v623 = v620 + 48 * v622;
                  v624 = *(llvm::Value **)(v623 + 24);
                  if (v624 == v619)
                  {
LABEL_1026:
                    if (v623 == v620 + 48 * v621 || (v704 = *(const llvm::SCEV **)(v623 + 40)) == 0)
                    {
                      v704 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v619);
                      v620 = *((_QWORD *)this + 13);
                      v621 = *((_DWORD *)this + 30);
                      v618 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                    }
                    v705 = (llvm::Value *)((_QWORD *)a2 - 4 * v618)[4];
                    if (v621)
                    {
                      v706 = ((v705 >> 4) ^ (v705 >> 9)) & (v621 - 1);
                      v707 = v620 + 48 * v706;
                      v708 = *(llvm::Value **)(v707 + 24);
                      if (v708 == v705)
                      {
LABEL_1041:
                        if (v707 == v620 + 48 * v621 || (v711 = *(const llvm::SCEV **)(v707 + 40)) == 0)
                          v711 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v705);
                        v199 = llvm::ScalarEvolution::getUMinExpr(this, v704, v711, 0);
                        v200 = this;
                        v201 = (uint64_t)v704;
LABEL_798:
                        llvm::ScalarEvolution::getMinusSCEV((uint64_t)v200, v201, v199);
                        return (const llvm::SCEV *)v168;
                      }
                      v709 = 1;
                      while (v708 != (llvm::Value *)-4096)
                      {
                        v710 = v706 + v709++;
                        v706 = v710 & (v621 - 1);
                        v707 = v620 + 48 * v706;
                        v708 = *(llvm::Value **)(v707 + 24);
                        if (v708 == v705)
                          goto LABEL_1041;
                      }
                    }
                    v707 = v620 + 48 * v621;
                    goto LABEL_1041;
                  }
                  v625 = 1;
                  while (v624 != (llvm::Value *)-4096)
                  {
                    v626 = v622 + v625++;
                    v622 = v626 & (v621 - 1);
                    v623 = v620 + 48 * v622;
                    v624 = *(llvm::Value **)(v623 + 24);
                    if (v624 == v619)
                      goto LABEL_1026;
                  }
                }
                v623 = v620 + 48 * v621;
                goto LABEL_1026;
              }
              v654 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
              v655 = (llvm::Value *)*((_QWORD *)a2 - 4 * v654);
              v656 = *((_QWORD *)this + 13);
              v657 = *((_DWORD *)this + 30);
              if (v657)
              {
                v658 = ((v655 >> 4) ^ (v655 >> 9)) & (v657 - 1);
                v659 = v656 + 48 * v658;
                v660 = *(llvm::Value **)(v659 + 24);
                if (v660 == v655)
                {
LABEL_977:
                  if (v659 == v656 + 48 * v657 || (v679 = *(_QWORD *)(v659 + 40)) == 0)
                  {
                    v679 = llvm::ScalarEvolution::createSCEVIter(this, v655);
                    v656 = *((_QWORD *)this + 13);
                    v657 = *((_DWORD *)this + 30);
                    v654 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                  }
                  v680 = (llvm::Value *)((_QWORD *)a2 - 4 * v654)[4];
                  if (v657)
                  {
                    v681 = ((v680 >> 4) ^ (v680 >> 9)) & (v657 - 1);
                    v682 = v656 + 48 * v681;
                    v683 = *(llvm::Value **)(v682 + 24);
                    if (v683 == v680)
                      goto LABEL_997;
                    v684 = 1;
                    while (v683 != (llvm::Value *)-4096)
                    {
                      v685 = v681 + v684++;
                      v681 = v685 & (v657 - 1);
                      v682 = v656 + 48 * v681;
                      v683 = *(llvm::Value **)(v682 + 24);
                      if (v683 == v680)
                        goto LABEL_997;
                    }
                  }
                  v682 = v656 + 48 * v657;
LABEL_997:
                  if (v682 == v656 + 48 * v657 || (v428 = *(const llvm::SCEV **)(v682 + 40)) == 0)
                    v428 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v680);
                  v429 = this;
                  v430 = (const llvm::SCEV *)v679;
                  return (const llvm::SCEV *)llvm::ScalarEvolution::getUMinExpr(v429, v430, v428, 0);
                }
                v661 = 1;
                while (v660 != (llvm::Value *)-4096)
                {
                  v662 = v658 + v661++;
                  v658 = v662 & (v657 - 1);
                  v659 = v656 + 48 * v658;
                  v660 = *(llvm::Value **)(v659 + 24);
                  if (v660 == v655)
                    goto LABEL_977;
                }
              }
              v659 = v656 + 48 * v657;
              goto LABEL_977;
            }
            v376 = 1;
            while (v375 != (llvm::Value *)-4096)
            {
              v377 = v373 + v376++;
              v373 = v377 & (v372 - 1);
              v374 = v371 + 48 * v373;
              v375 = *(llvm::Value **)(v374 + 24);
              if (v375 == v370)
                goto LABEL_567;
            }
          }
          v374 = v371 + 48 * v372;
          goto LABEL_567;
        }
      }
      v212 = (llvm::Value *)__s1[1];
      v213 = *((_QWORD *)this + 13);
      v214 = *((_DWORD *)this + 30);
      if (v214)
      {
        v215 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v214 - 1);
        v216 = v213 + 48 * v215;
        v217 = *(void **)(v216 + 24);
        if (v217 == __s1[1])
          goto LABEL_1087;
        v218 = 1;
        while (v217 != (void *)-4096)
        {
          v219 = v215 + v218++;
          v215 = v219 & (v214 - 1);
          v216 = v213 + 48 * v215;
          v217 = *(void **)(v216 + 24);
          if (v217 == __s1[1])
            goto LABEL_1087;
        }
      }
      goto LABEL_1086;
    case 0x1C:
      v123 = v738[0];
      if (!v738[0] || *((_BYTE *)v738[0] + 16) != 16)
        goto LABEL_631;
      v124 = (const void **)((char *)v738[0] + 24);
      v125 = *((_DWORD *)v738[0] + 8);
      if (v125 > 0x40)
      {
        v220 = llvm::APInt::countLeadingZerosSlowCase((llvm::Value *)((char *)v738[0] + 24));
        if (v220 != v125)
        {
          v127 = v220;
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::Value *)((char *)v123 + 24)) != v125)
          {
            v129 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v123 + 3);
            LODWORD(__src[1]) = v125;
            llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
            DWORD2(v735) = v125;
            llvm::APInt::initSlowCase((llvm::APInt *)&v735, 0, 0);
            goto LABEL_412;
          }
LABEL_396:
          v212 = (llvm::Value *)__s1[1];
          v213 = *((_QWORD *)this + 13);
          v214 = *((_DWORD *)this + 30);
          if (v214)
          {
            v283 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v214 - 1);
            v216 = v213 + 48 * v283;
            v284 = *(void **)(v216 + 24);
            if (v284 == __s1[1])
              goto LABEL_1087;
            v285 = 1;
            while (v284 != (void *)-4096)
            {
              v286 = v283 + v285++;
              v283 = v286 & (v214 - 1);
              v216 = v213 + 48 * v283;
              v284 = *(void **)(v216 + 24);
              if (v284 == __s1[1])
                goto LABEL_1087;
            }
          }
          goto LABEL_1086;
        }
      }
      else
      {
        v126 = *v124;
        if (*v124)
        {
          if (v125 && v126 != (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v125))
          {
            v127 = v125 + __clz((unint64_t)v126) - 64;
            v128 = __clz(__rbit64((unint64_t)v126));
            LODWORD(__src[1]) = *((_DWORD *)v738[0] + 8);
            __src[0] = 0;
            if (v125 >= v128)
              v129 = v128;
            else
              v129 = v125;
            DWORD2(v735) = v125;
            *(_QWORD *)&v735 = 0;
LABEL_412:
            v290 = (llvm::Value *)*((_QWORD *)this + 3);
            v289 = *((_QWORD *)this + 4);
            if (!__s1[1]
              || *((unsigned __int8 *)__s1[1] + 16) < 0x1Cu
              || (v291 = (llvm::Value *)__s1[1], !*((_QWORD *)__s1[1] + 5)))
            {
              v291 = 0;
            }
            v740 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
            v741 = (uint64_t)v290;
            v742 = v291;
            v743 = v289;
            v744 = 0;
            v745 = 1;
            sub_1C4F82B7C((uint64_t)__s1[1], (int8x8_t *)__src, 0, (const llvm::DataLayout **)&v740);
            SignExtendExpr = v125 - v127 - v129;
            LODWORD(v741) = v125;
            if (v125 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v740, 0, 0);
            else
              v740 = 0;
            sub_1C4912E54(&v740, 0, SignExtendExpr);
            v733 = v741;
            if (v741 > 0x40)
            {
              v732 = operator new[]();
              memcpy((void *)v732, (const void *)v740, (((unint64_t)v733 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v732 = v740;
            }
            sub_1C4888094((uint64_t)&v732, v129);
            if (v741 >= 0x41 && v740)
              MEMORY[0x1CAA32F9C](v740, 0x1000C8000313F17);
            if (!(v127 | v129))
              goto LABEL_459;
            v293 = *((unsigned int *)v123 + 8);
            v731 = v293;
            if (v293 > 0x40)
            {
              v730 = (void *)operator new[]();
              memcpy(v730, *v124, ((unint64_t)(v293 + 63) >> 3) & 0x3FFFFFF8);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v730);
              LODWORD(v293) = v731;
              v296 = (unint64_t)v730;
            }
            else
            {
              v294 = ~(unint64_t)*v124;
              if ((_DWORD)v293)
                v295 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v293;
              else
                v295 = 0;
              v296 = v295 & v294;
              v730 = (void *)(v295 & v294);
            }
            v731 = 0;
            v729 = __src[1];
            if (LODWORD(__src[1]) > 0x40)
            {
              v301 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
              v728 = (void *)operator new[]();
              memcpy(v728, __src[0], v301);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v728);
              v302 = v729;
              v300 = (unint64_t)v728;
              v729 = 0;
              if (v302 >= 0x41)
              {
                v352 = 0;
                v353 = (unint64_t)(v302 + 63) >> 6;
                v354 = 8 * v353;
                do
                {
                  *(_QWORD *)(v300 + v352) &= *(_QWORD *)(v296 + v352);
                  v352 += 8;
                }
                while (v354 != v352);
                v355 = 0;
                v356 = v732;
                do
                {
                  *(_QWORD *)(v300 + v355) &= *(_QWORD *)(v356 + v355);
                  v355 += 8;
                }
                while (v354 != v355);
                v357 = 0;
                do
                {
                  if (v353-- < 1)
                    break;
                  v359 = *(_QWORD *)(v300 + 8 * v353);
                  v357 += __clz(v359);
                }
                while (!v359);
                v360 = v302 | 0xFFFFFFC0;
                if ((v302 & 0x3F) == 0)
                  v360 = 0;
                v303 = v357 + v360 == v302;
                if (v300)
                  MEMORY[0x1CAA32F9C](v300, 0x1000C8000313F17);
LABEL_443:
                if (v293 >= 0x41 && v296)
                  MEMORY[0x1CAA32F9C](v296, 0x1000C8000313F17);
                if (v303)
                {
                  LODWORD(v741) = v125;
                  if (v125 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v740, 0, 0);
                    v305 = 1 << v129;
                    if (v741 > 0x40)
                    {
                      *(_QWORD *)(v740 + 8 * (v129 >> 6)) |= v305;
                      goto LABEL_450;
                    }
                    v304 = v740;
                  }
                  else
                  {
                    v304 = 0;
                    v305 = 1 << v129;
                  }
                  v740 = v305 | v304;
LABEL_450:
                  v307 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&v740, v292);
                  if (v741 >= 0x41 && v740)
                    MEMORY[0x1CAA32F9C](v740, 0x1000C8000313F17);
                  v308 = *((_QWORD *)this + 13);
                  v309 = *((_DWORD *)this + 30);
                  if (v309)
                  {
                    v310 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v309 - 1);
                    v311 = v308 + 48 * v310;
                    v312 = *(void **)(v311 + 24);
                    if (v312 == __s1[1])
                    {
LABEL_506:
                      if (v311 == v308 + 48 * v309 || (v343 = *(_QWORD *)(v311 + 40)) == 0)
                        v343 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
                      if (v343)
                        v344 = *(unsigned __int16 *)(v343 + 24) == 5;
                      else
                        v344 = 0;
                      if (!v344)
                        goto LABEL_615;
                      v345 = **(_QWORD **)(v343 + 32);
                      if (!v345 || *(_WORD *)(v345 + 24) != 0)
                        goto LABEL_615;
                      v347 = *(_QWORD *)(v345 + 32);
                      v348 = (unint64_t **)(v347 + 24);
                      v349 = *(_DWORD *)(v347 + 32);
                      if (v349 > 0x40)
                      {
                        v351 = llvm::APInt::countTrailingZerosSlowCase(v348);
                      }
                      else
                      {
                        v350 = __clz(__rbit64((unint64_t)*v348));
                        if (v349 >= v350)
                          v351 = v350;
                        else
                          v351 = v349;
                      }
                      if (v129 >= v351)
                        v394 = v351;
                      else
                        v394 = v129;
                      v395 = v129 - v394;
                      v727 = v125;
                      if (v125 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v726, 0, 0);
                        v397 = 1 << v395;
                        if (v727 > 0x40)
                        {
                          *(_QWORD *)(v726 + 8 * (v395 >> 6)) |= v397;
LABEL_597:
                          v740 = (unint64_t)&v742;
                          v741 = 0x400000000;
                          v398 = *(_QWORD *)(v345 + 32);
                          v399 = *(_DWORD *)(v398 + 32);
                          v725 = v399;
                          if (v399 > 0x40)
                          {
                            v724 = operator new[]();
                            v718 = v725 + 63;
                            memcpy((void *)v724, *(const void **)(v398 + 24), (v718 >> 3) & 0x3FFFFFF8);
                            llvm::APInt::tcShiftRight((llvm::APInt *)v724, (unint64_t *)(v718 >> 6), v394);
                          }
                          else if (v399 == v394)
                          {
                            v724 = 0;
                          }
                          else
                          {
                            v724 = *(_QWORD *)(v398 + 24) >> v394;
                          }
                          v400 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&v724, v306);
                          v401 = v741;
                          if (v741 >= HIDWORD(v741))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v741 + 1, 8);
                            v401 = v741;
                          }
                          *(_QWORD *)(v740 + 8 * v401) = v400;
                          v402 = v741 + 1;
                          LODWORD(v741) = v741 + 1;
                          if (v725 >= 0x41 && v724)
                          {
                            MEMORY[0x1CAA32F9C](v724, 0x1000C8000313F17);
                            v402 = v741;
                          }
                          v403 = *(_QWORD *)(v343 + 32);
                          v404 = *(_QWORD *)(v343 + 40);
                          v405 = 8 * v404 - 8;
                          v406 = (v405 >> 3) + v402;
                          if (v406 > HIDWORD(v741))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)&v742, v406, 8);
                            v402 = v741;
                          }
                          if (v404 != 1)
                          {
                            memcpy((void *)(v740 + 8 * v402), (const void *)(v403 + 8), 8 * v404 - 8);
                            v402 = v741;
                          }
                          LODWORD(v741) = v402 + ((unint64_t)v405 >> 3);
                          v407 = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr((uint64_t)this, (uint64_t)&v740, *(_WORD *)(v343 + 28) & 7, 0);
                          v409 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&v726, v408);
                          UDivExpr = llvm::ScalarEvolution::getUDivExpr(this, v407, v409);
                          if ((llvm::Value **)v740 != &v742)
                            free((void *)v740);
                          if (v727 >= 0x41 && v726)
                            MEMORY[0x1CAA32F9C](v726, 0x1000C8000313F17);
                          if (UDivExpr)
                          {
LABEL_616:
                            v411 = ***(_QWORD ****)this;
                            LODWORD(v740) = SignExtendExpr;
                            if ((int)SignExtendExpr <= 63)
                            {
                              if ((int)SignExtendExpr <= 31)
                              {
                                switch((_DWORD)SignExtendExpr)
                                {
                                  case 0x10:
                                    v412 = (llvm::Type *)(*v411 + 1936);
                                    goto LABEL_624;
                                  case 8:
                                    v412 = (llvm::Type *)(*v411 + 1912);
                                    goto LABEL_624;
                                  case 1:
                                    v412 = (llvm::Type *)(*v411 + 1888);
                                    goto LABEL_624;
                                }
                              }
                              else if ((_DWORD)SignExtendExpr == 32)
                              {
                                v412 = (llvm::Type *)(*v411 + 1960);
                                goto LABEL_624;
                              }
                            }
                            else
                            {
                              if ((_DWORD)SignExtendExpr == 64)
                              {
                                v412 = (llvm::Type *)(*v411 + 1984);
LABEL_624:
                                v413 = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, UDivExpr, v412, 0);
                                ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, v413, *(llvm::Type **)__s1[1], 0);
                                SignExtendExpr = sub_1C4E0AE60((uint64_t)this, ZeroExtendExpr, (uint64_t)v307, 0, 0);
                                v315 = 1;
                                goto LABEL_625;
                              }
                              if ((_DWORD)SignExtendExpr == 128)
                              {
                                v412 = (llvm::Type *)(*v411 + 2008);
                                goto LABEL_624;
                              }
                            }
                            v715 = sub_1C5270984(*v411 + 2168, &v740);
                            v412 = (llvm::Type *)*((_QWORD *)v715 + 1);
                            if (!v412)
                            {
                              v716 = v715;
                              v412 = (llvm::Type *)sub_1C484358C(*v411 + 2040, 24, 3);
                              v717 = v740;
                              *(_QWORD *)v412 = v411;
                              *((_QWORD *)v412 + 2) = 0;
                              *((_QWORD *)v412 + 1) = (v717 << 8) | 0xDu;
                              *((_QWORD *)v716 + 1) = v412;
                            }
                            goto LABEL_624;
                          }
LABEL_615:
                          UDivExpr = llvm::ScalarEvolution::getUDivExpr(this, (const llvm::SCEV *)v343, v307);
                          goto LABEL_616;
                        }
                        v396 = v726;
                      }
                      else
                      {
                        v396 = 0;
                        v397 = 1 << v395;
                      }
                      v726 = v397 | v396;
                      goto LABEL_597;
                    }
                    v313 = 1;
                    while (v312 != (void *)-4096)
                    {
                      v314 = v310 + v313++;
                      v310 = v314 & (v309 - 1);
                      v311 = v308 + 48 * v310;
                      v312 = *(void **)(v311 + 24);
                      if (v312 == __s1[1])
                        goto LABEL_506;
                    }
                  }
                  v311 = v308 + 48 * v309;
                  goto LABEL_506;
                }
LABEL_459:
                v315 = 0;
LABEL_625:
                if (v733 >= 0x41 && v732)
                  MEMORY[0x1CAA32F9C](v732, 0x1000C8000313F17);
                if (DWORD2(v735) >= 0x41 && (_QWORD)v735)
                  MEMORY[0x1CAA32F9C](v735, 0x1000C8000313F17);
                if (LODWORD(__src[1]) >= 0x41 && __src[0])
                  MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                if ((v315 & 1) != 0)
                  return (const llvm::SCEV *)SignExtendExpr;
LABEL_631:
                if (*(_DWORD *)(*(_QWORD *)__s1[1] + 8) != 269)
                  goto LABEL_656;
                v415 = *((_QWORD *)this + 13);
                v416 = *((_DWORD *)this + 30);
                if (v416)
                {
                  v417 = (v416 - 1) & ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9));
                  v418 = v415 + 48 * v417;
                  v419 = *(void **)(v418 + 24);
                  if (v419 == __s1[1])
                  {
LABEL_639:
                    if (v418 == v415 + 48 * v416 || (v422 = *(_QWORD *)(v418 + 40)) == 0)
                    {
                      v422 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
                      v415 = *((_QWORD *)this + 13);
                      v416 = *((_DWORD *)this + 30);
                    }
                    if (v416)
                    {
                      v423 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v416 - 1);
                      v424 = v415 + 48 * v423;
                      v425 = *(llvm::Value **)(v424 + 24);
                      if (v425 == v738[0])
                        goto LABEL_649;
                      v426 = 1;
                      while (v425 != (llvm::Value *)-4096)
                      {
                        v427 = v423 + v426++;
                        v423 = v427 & (v416 - 1);
                        v424 = v415 + 48 * v423;
                        v425 = *(llvm::Value **)(v424 + 24);
                        if (v425 == v738[0])
                          goto LABEL_649;
                      }
                    }
                    v424 = v415 + 48 * v416;
LABEL_649:
                    if (v424 == v415 + 48 * v416 || (v428 = *(const llvm::SCEV **)(v424 + 40)) == 0)
                      v428 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
                    v429 = this;
                    v430 = (const llvm::SCEV *)v422;
                    return (const llvm::SCEV *)llvm::ScalarEvolution::getUMinExpr(v429, v430, v428, 0);
                  }
                  v420 = 1;
                  while (v419 != (void *)-4096)
                  {
                    v421 = v417 + v420++;
                    v417 = v421 & (v416 - 1);
                    v418 = v415 + 48 * v417;
                    v419 = *(void **)(v418 + 24);
                    if (v419 == __s1[1])
                      goto LABEL_639;
                  }
                }
                v418 = v415 + 48 * v416;
                goto LABEL_639;
              }
            }
            else
            {
              v298 = ~(uint64_t)__src[0];
              if (LODWORD(__src[1]))
                v299 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
              else
                v299 = 0;
              v300 = v299 & v298;
              v728 = (void *)(v299 & v298);
              v729 = 0;
            }
            v303 = (v300 & v732 & v296) == 0;
            goto LABEL_443;
          }
          goto LABEL_396;
        }
      }
      v221 = *((_QWORD *)this + 13);
      v222 = *((_DWORD *)this + 30);
      if (!v222)
        goto LABEL_385;
      v223 = (v222 - 1) & ((v123 >> 4) ^ (v123 >> 9));
      v224 = v221 + 48 * v223;
      v225 = *(llvm::Value **)(v224 + 24);
      if (v225 != v123)
      {
        v226 = 1;
        while (v225 != (llvm::Value *)-4096)
        {
          v227 = v223 + v226++;
          v223 = v227 & (v222 - 1);
          v224 = v221 + 48 * v223;
          v225 = *(llvm::Value **)(v224 + 24);
          if (v225 == v123)
            goto LABEL_386;
        }
LABEL_385:
        v224 = v221 + 48 * v222;
      }
LABEL_386:
      if (v224 != v221 + 48 * v222)
      {
        SignExtendExpr = *(_QWORD *)(v224 + 40);
        if (SignExtendExpr)
          return (const llvm::SCEV *)SignExtendExpr;
      }
      v279 = this;
      v212 = v123;
      return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v279, v212);
    case 0x1D:
      v150 = v738[0];
      if (!v738[0] || *((_BYTE *)v738[0] + 16) != 16)
        goto LABEL_312;
      v151 = *((_QWORD *)this + 13);
      v152 = *((_DWORD *)this + 30);
      if (!v152)
        goto LABEL_282;
      v153 = v152 - 1;
      v154 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v152 - 1);
      v155 = v151 + 48 * v154;
      v156 = *(void **)(v155 + 24);
      if (v156 == __s1[1])
        goto LABEL_283;
      v157 = 1;
      while (v156 != (void *)-4096)
      {
        v158 = v154 + v157++;
        v154 = v158 & v153;
        v155 = v151 + 48 * (v158 & v153);
        v156 = *(void **)(v155 + 24);
        if (v156 == __s1[1])
          goto LABEL_283;
      }
LABEL_282:
      v155 = v151 + 48 * v152;
LABEL_283:
      if (v155 == v151 + 48 * v152 || (v202 = *(const llvm::SCEV **)(v155 + 40)) == 0)
        v202 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
      MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros(this, v202);
      v204 = *((_DWORD *)v150 + 8);
      if (v204 > 0x40)
        v205 = llvm::APInt::countLeadingZerosSlowCase((llvm::Value *)((char *)v150 + 24));
      else
        v205 = v204 + __clz(*((_QWORD *)v150 + 3)) - 64;
      if (MinTrailingZeros < v204 - v205)
      {
LABEL_312:
        if (*(_DWORD *)(*(_QWORD *)__s1[1] + 8) != 269)
          goto LABEL_656;
        v228 = *((_QWORD *)this + 13);
        v229 = *((_DWORD *)this + 30);
        if (v229)
        {
          v230 = (v229 - 1) & ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9));
          v231 = v228 + 48 * v230;
          v232 = *(void **)(v231 + 24);
          if (v232 == __s1[1])
          {
LABEL_320:
            if (v231 == v228 + 48 * v229 || (v235 = *(_QWORD *)(v231 + 40)) == 0)
            {
              v235 = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
              v228 = *((_QWORD *)this + 13);
              v229 = *((_DWORD *)this + 30);
            }
            if (v229)
            {
              v236 = ((LODWORD(v738[0]) >> 4) ^ (LODWORD(v738[0]) >> 9)) & (v229 - 1);
              v237 = v228 + 48 * v236;
              v238 = *(llvm::Value **)(v237 + 24);
              if (v238 == v738[0])
                goto LABEL_330;
              v239 = 1;
              while (v238 != (llvm::Value *)-4096)
              {
                v240 = v236 + v239++;
                v236 = v240 & (v229 - 1);
                v237 = v228 + 48 * v236;
                v238 = *(llvm::Value **)(v237 + 24);
                if (v238 == v738[0])
                  goto LABEL_330;
              }
            }
            v237 = v228 + 48 * v229;
LABEL_330:
            if (v237 == v228 + 48 * v229 || (v241 = *(const llvm::SCEV **)(v237 + 40)) == 0)
              v241 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v738[0]);
            v242 = this;
            v243 = (const llvm::SCEV *)v235;
            return (const llvm::SCEV *)llvm::ScalarEvolution::getUMaxExpr(v242, v243, v241);
          }
          v233 = 1;
          while (v232 != (void *)-4096)
          {
            v234 = v230 + v233++;
            v230 = v234 & (v229 - 1);
            v231 = v228 + 48 * v230;
            v232 = *(void **)(v231 + 24);
            if (v232 == __s1[1])
              goto LABEL_320;
          }
        }
        v231 = v228 + 48 * v229;
        goto LABEL_320;
      }
      v244 = *((_QWORD *)this + 13);
      v245 = *((_DWORD *)this + 30);
      if (!v245)
        goto LABEL_367;
      v246 = (v245 - 1) & ((v150 >> 4) ^ (v150 >> 9));
      v247 = v244 + 48 * v246;
      v248 = *(llvm::Value **)(v247 + 24);
      if (v248 != v150)
      {
        v249 = 1;
        while (v248 != (llvm::Value *)-4096)
        {
          v250 = v246 + v249++;
          v246 = v250 & (v245 - 1);
          v247 = v244 + 48 * v246;
          v248 = *(llvm::Value **)(v247 + 24);
          if (v248 == v150)
            goto LABEL_368;
        }
LABEL_367:
        v247 = v244 + 48 * v245;
      }
LABEL_368:
      if (v247 == v244 + 48 * v245 || (v267 = *(_QWORD *)(v247 + 40)) == 0)
        v267 = llvm::ScalarEvolution::createSCEVIter(this, v150);
      v268 = this;
      UMinExpr = (uint64_t)v202;
      v270 = 6;
      return (const llvm::SCEV *)sub_1C4E0AF14((uint64_t)v268, UMinExpr, v267, v270, 0);
    case 0x1E:
      if (!v738[0] || *((_BYTE *)v738[0] + 16) != 16)
        goto LABEL_656;
      v144 = *((_DWORD *)v738[0] + 8);
      if (!v144)
        goto LABEL_374;
      v145 = (const void **)((char *)v738[0] + 24);
      if (v144 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::Value *)((char *)v738[0] + 24)) != v144)
          goto LABEL_196;
      }
      else if (*v145 != (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v144))
      {
LABEL_196:
        v146 = (llvm::Value *)__s1[1];
        if (!__s1[1])
          goto LABEL_656;
        v147 = *((unsigned __int8 *)__s1[1] + 16);
        if (v147 < 0x1C)
          goto LABEL_656;
        if (v147 - 59 < 0xFFFFFFEE)
          goto LABEL_656;
        if (v147 != 56)
          goto LABEL_656;
        v148 = *((_QWORD *)__s1[1] - 4);
        if (!v148 || *(_BYTE *)(v148 + 16) != 16)
          goto LABEL_656;
        v149 = *(unsigned int *)(v148 + 32);
        if (v149 > 0x40)
        {
          if (memcmp(*(const void **)(v148 + 24), *v145, ((unint64_t)(v149 + 63) >> 3) & 0x3FFFFFF8))
            goto LABEL_656;
        }
        else if (*(const void **)(v148 + 24) != *v145)
        {
          goto LABEL_656;
        }
        v336 = *((_QWORD *)this + 13);
        v337 = *((_DWORD *)this + 30);
        if (v337)
        {
          v338 = (v337 - 1) & ((v146 >> 4) ^ (v146 >> 9));
          v339 = v336 + 48 * v338;
          v340 = *(llvm::Value **)(v339 + 24);
          if (v340 == v146)
            goto LABEL_535;
          v341 = 1;
          while (v340 != (llvm::Value *)-4096)
          {
            v342 = v338 + v341++;
            v338 = v342 & (v337 - 1);
            v339 = v336 + 48 * v338;
            v340 = *(llvm::Value **)(v339 + 24);
            if (v340 == v146)
              goto LABEL_535;
          }
        }
        v339 = v336 + 48 * v337;
LABEL_535:
        if (v339 == v336 + 48 * v337 || (v361 = *(_QWORD *)(v339 + 40)) == 0)
          v361 = llvm::ScalarEvolution::createSCEVIter(this, v146);
        if (v361)
          v362 = *(unsigned __int16 *)(v361 + 24) == 2;
        else
          v362 = 0;
        if (v362)
          __asm { BR              X11 }
        goto LABEL_656;
      }
LABEL_374:
      v271 = *((_QWORD *)this + 13);
      v272 = *((_DWORD *)this + 30);
      if (!v272)
        goto LABEL_380;
      v273 = ((LODWORD(__s1[1]) >> 4) ^ (LODWORD(__s1[1]) >> 9)) & (v272 - 1);
      v274 = v271 + 48 * v273;
      v275 = *(void **)(v274 + 24);
      if (v275 != __s1[1])
      {
        v276 = 1;
        while (v275 != (void *)-4096)
        {
          v277 = v273 + v276++;
          v273 = v277 & (v272 - 1);
          v274 = v271 + 48 * v273;
          v275 = *(void **)(v274 + 24);
          if (v275 == __s1[1])
            goto LABEL_381;
        }
LABEL_380:
        v274 = v271 + 48 * v272;
      }
LABEL_381:
      if (v274 == v271 + 48 * v272 || (v278 = *(const llvm::SCEV **)(v274 + 40)) == 0)
        v278 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)__s1[1]);
      return (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV(this, v278);
    default:
      goto LABEL_656;
  }
}

unint64_t llvm::ScalarEvolution::getOperandsToCreate(llvm::ScalarEvolution *this, llvm::Value *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  __int128 *v10;
  BOOL v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  llvm::Type *v21;
  int v22;
  llvm::Value *v23;
  llvm::ScalarEvolution *v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t *v28;
  llvm::Module *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  llvm::Value *v71;
  int v72;
  llvm::Value *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::APInt *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  unint64_t v87;
  unint64_t IndexTypeSizeInBits;
  llvm::PoisonValue *v89;
  uint64_t v90;
  const char *v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *__s1[2];
  __int128 v103;
  __int128 v104;
  void *v105[2];
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) != 0xD)
    goto LABEL_126;
  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 >= 0x1C)
  {
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 4), *((_QWORD *)a2 + 5)))
    {
      v23 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)a2, v21);
      v24 = this;
      return llvm::ScalarEvolution::getUnknown(v24, v23);
    }
    goto LABEL_27;
  }
  if (v6 == 1)
  {
    if ((*((_DWORD *)a2 + 8) & 0xFu) - 5 < 4 || ((1 << (*((_DWORD *)a2 + 8) & 0xF)) & 0x614) == 0)
    {
      v29 = (llvm::Module *)*((_QWORD *)a2 + 5);
      if (!v29 || !llvm::Module::getSemanticInterposition(v29) || (*((_BYTE *)a2 + 33) & 0x40) != 0)
      {
        v30 = *((_QWORD *)a2 - 4);
        goto LABEL_108;
      }
    }
LABEL_126:
    v24 = this;
    v23 = a2;
    return llvm::ScalarEvolution::getUnknown(v24, v23);
  }
  if (v6 != 5)
  {
    if (v6 == 16)
    {
      __s1[0] = &v103;
      LODWORD(v103) = 0;
      *(_QWORD *)((char *)&v103 + 4) = a2;
      __s1[1] = (void *)0x2000000003;
      v7 = *((_QWORD *)this + 104)
         + 8 * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(&v103, (uint64_t)&v103 + 12));
      v8 = *(_QWORD *)v7;
      v105[0] = &v106;
      v105[1] = (void *)0x2000000000;
      if (v8)
        v9 = (v8 & 1) == 0;
      else
        v9 = 0;
      if (v9)
      {
        v10 = (__int128 *)__s1[0];
        while (*(_QWORD *)(v8 + 16) != LODWORD(__s1[1])
             || memcmp(__s1[0], *(const void **)(v8 + 8), 4 * LODWORD(__s1[1])))
        {
          LODWORD(v105[1]) = 0;
          v8 = *(_QWORD *)v8;
          if (v8)
            v11 = (v8 & 1) == 0;
          else
            v11 = 0;
          if (!v11)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        v8 = sub_1C484358C((uint64_t)this + 864, 40, 3);
        v12 = sub_1C484358C((uint64_t)this + 864, 4 * LODWORD(__s1[1]), 2);
        v13 = (int *)__s1[0];
        v14 = 4 * LODWORD(__s1[1]);
        v15 = (_DWORD *)v12;
        do
        {
          v16 = *v13++;
          *v15++ = v16;
          v14 -= 4;
        }
        while (v14);
        v17 = LODWORD(__s1[1]);
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = v12;
        *(_QWORD *)(v8 + 16) = v17;
        *(_DWORD *)(v8 + 24) = 0x10000;
        *(_WORD *)(v8 + 28) = 0;
        *(_QWORD *)(v8 + 32) = a2;
        v18 = *((_DWORD *)this + 211) + 1;
        v19 = *((_DWORD *)this + 210);
        if (v18 > 2 * v19)
        {
          llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v19, (uint64_t)off_1E813B300);
          v105[0] = &v106;
          v105[1] = (void *)0x2000000000;
          v7 = *((_QWORD *)this + 104)
             + 8
             * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v8 + 8), *(_QWORD *)(v8 + 8) + 4 * *(_QWORD *)(v8 + 16)));
          if (v105[0] != &v106)
            free(v105[0]);
          v18 = *((_DWORD *)this + 211) + 1;
        }
        *((_DWORD *)this + 211) = v18;
        v20 = *(_QWORD *)v7;
        if (!*(_QWORD *)v7)
          v20 = v7 | 1;
        *(_QWORD *)v8 = v20;
        *(_QWORD *)v7 = v8;
        v10 = (__int128 *)__s1[0];
      }
      if (v10 != &v103)
        free(v10);
      return v8;
    }
    goto LABEL_126;
  }
LABEL_27:
  sub_1C4F1EE04((uint64_t)v105, (uint64_t)a2, *((const llvm::APInt **)this + 4));
  if (BYTE8(v107))
  {
    if (LODWORD(v105[0]) > 0x1E)
      goto LABEL_47;
    v22 = *(unsigned __int8 *)(v106 + 16);
    if (((1 << SLOBYTE(v105[0])) & 0x4A000000) != 0)
    {
      if (v22 != 16)
        return 0;
      goto LABEL_47;
    }
    if (((1 << SLOBYTE(v105[0])) & 0x22000) == 0)
    {
      if (((1 << SLOBYTE(v105[0])) & 0x30000000) != 0 && v22 != 16 && *(_DWORD *)(*(_QWORD *)v105[1] + 8) == 269)
        return 0;
LABEL_47:
      v31 = v105[1];
      v32 = *(unsigned int *)(a3 + 8);
      if (v32 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v32 + 1, 8);
        LODWORD(v32) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v32) = v31;
      v33 = *(_DWORD *)(a3 + 12);
      v34 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v34;
      v35 = v106;
      if (v34 >= v33)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v34 + 1, 8);
        LODWORD(v34) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v34) = v35;
      goto LABEL_84;
    }
    while (1)
    {
      v36 = v107;
      if ((_QWORD)v107)
        v37 = (_QWORD)v107 == (_QWORD)a2;
      else
        v37 = 1;
      if (v37)
        goto LABEL_65;
      v38 = *((_QWORD *)this + 13);
      v39 = *((_DWORD *)this + 30);
      if (!v39)
        goto LABEL_62;
      v40 = (v39 - 1) & ((v107 >> 4) ^ (v107 >> 9));
      v41 = v38 + 48 * v40;
      v42 = *(_QWORD *)(v41 + 24);
      if (v42 != (_QWORD)v107)
        break;
LABEL_63:
      if (v41 != v38 + 48 * v39 && *(_QWORD *)(v41 + 40))
      {
        v74 = *(unsigned int *)(a3 + 8);
        if (v74 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v74 + 1, 8);
          LODWORD(v74) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v74) = v36;
LABEL_84:
        ++*(_DWORD *)(a3 + 8);
        return 0;
      }
LABEL_65:
      v45 = v106;
      v46 = *(unsigned int *)(a3 + 8);
      if (v46 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v46 + 1, 8);
        v46 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v46) = v45;
      ++*(_DWORD *)(a3 + 8);
      sub_1C4F1EE04((uint64_t)__s1, (uint64_t)v105[1], *((const llvm::APInt **)this + 4));
      if (!BYTE8(v104))
        goto LABEL_81;
      v47 = *((unsigned __int8 *)a2 + 16);
      v48 = v47 - 28;
      v49 = v47 - 28;
      if (v47 <= 0x1B)
        v49 = *((unsigned __int16 *)a2 + 9);
      if (v49 == 13 && (LODWORD(__s1[0]) | 2) != 0xF)
        goto LABEL_81;
      if (v47 <= 0x1B)
        v48 = *((unsigned __int16 *)a2 + 9);
      if (v48 == 17 && LODWORD(__s1[0]) != 17
        || (_QWORD)v104
        && BYTE8(v103) | BYTE9(v103)
        && *(unsigned __int8 *)(v104 + 16) >= 0x1Cu
        && sub_1C4F8CF08(v104, 1, 0))
      {
LABEL_81:
        v50 = v105[1];
        v51 = *(_DWORD *)(a3 + 8);
        if (v51 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v51 + 1, 8);
          v51 = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v51) = v50;
        goto LABEL_84;
      }
      *(_OWORD *)v105 = *(_OWORD *)__s1;
      v106 = v103;
      v107 = v104;
    }
    v43 = 1;
    while (v42 != -4096)
    {
      v44 = v40 + v43++;
      v40 = v44 & (v39 - 1);
      v41 = v38 + 48 * v40;
      v42 = *(_QWORD *)(v41 + 24);
      if (v42 == (_QWORD)v107)
        goto LABEL_63;
    }
LABEL_62:
    v41 = v38 + 48 * v39;
    goto LABEL_63;
  }
  v25 = *((unsigned __int8 *)a2 + 16);
  v26 = v25 - 28;
  if (v25 < 0x1C)
    v26 = *((unsigned __int16 *)a2 + 9);
  v8 = 0;
  if (v26 <= 33)
  {
    if (v26 != 5)
    {
      if (v26 != 20 && v26 != 23)
        return v8;
      v52 = *((_DWORD *)a2 + 5);
      if ((v52 & 0x40000000) != 0)
        v53 = (uint64_t *)*((_QWORD *)a2 - 1);
      else
        v53 = (uint64_t *)((char *)a2 - 32 * (v52 & 0x7FFFFFF));
      v63 = *v53;
      v64 = *(unsigned int *)(a3 + 8);
      if (v64 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v64 + 1, 8);
        LODWORD(v64) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v64) = v63;
      v61 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v61;
      v65 = *((_DWORD *)a2 + 5);
      if ((v65 & 0x40000000) != 0)
        v66 = (char *)*((_QWORD *)a2 - 1);
      else
        v66 = (char *)a2 - 32 * (v65 & 0x7FFFFFF);
      v30 = *((_QWORD *)v66 + 4);
      goto LABEL_109;
    }
LABEL_91:
    LODWORD(__s1[0]) = 0;
    if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)a2 + 8, 46, (int *)__s1)
      || (v54 = *((_QWORD *)a2 - 4)) != 0
      && !*(_BYTE *)(v54 + 16)
      && *(_QWORD *)(v54 + 24) == *((_QWORD *)a2 + 9)
      && (v105[0] = *(void **)(v54 + 112), llvm::AttributeList::hasAttrSomewhere((uint64_t *)v105, 46, (int *)__s1)))
    {
      v100 = *((_QWORD *)a2 + 4 * (LODWORD(__s1[0]) - 1) + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      if (v100)
      {
        v101 = *(unsigned int *)(a3 + 8);
        if (v101 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v101 + 1, 8);
          LODWORD(v101) = *(_DWORD *)(a3 + 8);
        }
        v8 = 0;
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v101) = v100;
        goto LABEL_113;
      }
    }
    if (v25 != 84)
      return 0;
    v55 = *((_QWORD *)a2 - 4);
    if (!v55
      || *(_BYTE *)(v55 + 16)
      || *(_QWORD *)(v55 + 24) != *((_QWORD *)a2 + 9)
      || (*(_BYTE *)(v55 + 33) & 0x20) == 0)
    {
      return 0;
    }
    v56 = *(_DWORD *)(v55 + 36);
    v57 = (v56 - 274);
    if (v57 > 0x25)
      goto LABEL_175;
    if (((1 << (v56 - 18)) & 0x2184000003) != 0)
    {
      v58 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      v59 = *(unsigned int *)(a3 + 8);
      if (v59 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v59 + 1, 8);
        LODWORD(v59) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v59) = v58;
      v60 = *(_DWORD *)(a3 + 12);
      v61 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v61;
      v30 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
      goto LABEL_110;
    }
    if (v57 != 15)
    {
LABEL_175:
      if (v56 != 1)
        return 0;
    }
    v27 = *((_DWORD *)a2 + 5);
LABEL_41:
    v28 = (uint64_t *)((char *)a2 - 32 * (v27 & 0x7FFFFFF));
LABEL_107:
    v30 = *v28;
LABEL_108:
    v61 = *(unsigned int *)(a3 + 8);
LABEL_109:
    v60 = *(_DWORD *)(a3 + 12);
LABEL_110:
    if (v61 >= v60)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v61 + 1, 8);
      LODWORD(v61) = *(_DWORD *)(a3 + 8);
    }
    v8 = 0;
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v61) = v30;
LABEL_113:
    ++*(_DWORD *)(a3 + 8);
    return v8;
  }
  switch(v26)
  {
    case '&':
    case '\'':
    case '(':
    case '/':
      v27 = *((_DWORD *)a2 + 5);
      if ((v27 & 0x40000000) == 0)
        goto LABEL_41;
      v28 = (uint64_t *)*((_QWORD *)a2 - 1);
      goto LABEL_107;
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      return v8;
    case '0':
      return llvm::ScalarEvolution::getUnknown(this, a2);
    case '1':
      if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) != 0xD)
        return llvm::ScalarEvolution::getUnknown(this, a2);
      v70 = *((_DWORD *)a2 + 5);
      v71 = (v70 & 0x40000000) != 0
          ? (llvm::Value *)*((_QWORD *)a2 - 1)
          : (llvm::Value *)((char *)a2 - 32 * (v70 & 0x7FFFFFF));
      v78 = *(_QWORD *)v71;
      if ((*(_DWORD *)(**(_QWORD **)v71 + 8) & 0xFD) != 0xD)
        return llvm::ScalarEvolution::getUnknown(this, a2);
      v79 = *(unsigned int *)(a3 + 8);
      if (v79 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v79 + 1, 8);
        LODWORD(v79) = *(_DWORD *)(a3 + 8);
      }
      v8 = 0;
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v79) = v78;
      goto LABEL_113;
    case '8':
      goto LABEL_91;
    case '9':
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 269)
        goto LABEL_163;
      v72 = *((_DWORD *)a2 + 5);
      v73 = (v72 & 0x40000000) != 0
          ? (llvm::Value *)*((_QWORD *)a2 - 1)
          : (llvm::Value *)((char *)a2 - 32 * (v72 & 0x7FFFFFF));
      v80 = *(_QWORD *)v73;
      if (*(_BYTE *)(v80 + 16) != 81)
        goto LABEL_163;
      if ((*(_WORD *)(v80 + 18) & 0x3E) == 0x20)
      {
        v81 = *(_QWORD *)(v80 - 32);
        if (*(_BYTE *)(v81 + 16) != 16)
          return llvm::ScalarEvolution::getUnknown(this, a2);
        v82 = (llvm::APInt *)(v81 + 24);
        v83 = *(_DWORD *)(v81 + 32);
        if (v83 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v82) != v83)
            return llvm::ScalarEvolution::getUnknown(this, a2);
        }
        else if (*(_QWORD *)v82)
        {
          return llvm::ScalarEvolution::getUnknown(this, a2);
        }
      }
      else
      {
        v84 = **(_QWORD **)(v80 - 64);
        v85 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*(_BYTE *)(v84 + 8) == 15)
        {
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v85, v84);
        }
        else
        {
          sub_1C4768AD0(v85, v84);
          IndexTypeSizeInBits = v87;
          if ((_DWORD)v86 == 1)
        }
        v89 = *(llvm::PoisonValue **)a2;
        v90 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
        if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
        {
          v93 = llvm::DataLayout::getIndexTypeSizeInBits(v90, (uint64_t)v89);
        }
        else
        {
          sub_1C4768AD0(v90, (uint64_t)v89);
          v93 = v92;
          if ((_DWORD)v91 == 1)
        }
        if (IndexTypeSizeInBits > v93)
          return llvm::ScalarEvolution::getUnknown(this, a2);
      }
LABEL_163:
      v94 = *((_DWORD *)a2 + 5);
      if ((v94 & 0x40000000) != 0)
      {
        v96 = (uint64_t *)*((_QWORD *)a2 - 1);
        v95 = v94 & 0x7FFFFFF;
      }
      else
      {
        v95 = v94 & 0x7FFFFFF;
        v96 = (uint64_t *)((char *)a2 - 32 * v95);
      }
      if (!v95)
        return 0;
      v97 = *(_DWORD *)(a3 + 8);
      v98 = 32 * v95;
      do
      {
        v99 = *v96;
        if (v97 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v97 + 1, 8);
          v97 = *(_DWORD *)(a3 + 8);
        }
        v8 = 0;
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v97) = v99;
        v97 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v97;
        v96 += 4;
        v98 -= 32;
      }
      while (v98);
      return v8;
    default:
      if (v26 != 34)
        return v8;
      v67 = *((_DWORD *)a2 + 5);
      if ((v67 & 0x40000000) != 0)
      {
        v69 = (uint64_t *)*((_QWORD *)a2 - 1);
        v68 = v67 & 0x7FFFFFF;
      }
      else
      {
        v68 = v67 & 0x7FFFFFF;
        v69 = (uint64_t *)((char *)a2 - 32 * v68);
      }
      if (!v68)
        return 0;
      v75 = *(_DWORD *)(a3 + 8);
      v76 = 32 * v68;
      do
      {
        v77 = *v69;
        if (v75 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v75 + 1, 8);
          v75 = *(_DWORD *)(a3 + 8);
        }
        v8 = 0;
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v75) = v77;
        v75 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v75;
        v69 += 4;
        v76 -= 32;
      }
      while (v76);
      return v8;
  }
}

BOOL sub_1C4F30574(llvm::APInt *a1, int a2)
{
  int v5;

  if (*((_DWORD *)a1 + 2) > 0x40u)
  {
    v5 = *((_DWORD *)a1 + 2);
    if (llvm::APInt::countTrailingOnesSlowCase(a1) != a2)
      return 0;
    return llvm::APInt::countLeadingZerosSlowCase(a1) + a2 == v5;
  }
  else
  {
    return *(_QWORD *)a1 == 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  }
}

uint64_t llvm::ScalarEvolution::getTripCountFromExitCount(llvm::ScalarEvolution *this, const llvm::SCEV *a2, char a3)
{
  llvm::ScalarEvolution *v3;
  int v4;
  const llvm::SCEV *v5;
  const llvm::SCEV *v6;
  llvm::Type **v7;
  llvm::Type *v8;
  _QWORD *v9;
  int PrimitiveSizeInBits;
  llvm::Type *v11;
  const llvm::SCEV *v12;
  unint64_t Constant;
  const llvm::SCEV **v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;

  v3 = this;
  v4 = *((unsigned __int16 *)a2 + 12);
  v5 = a2;
  v6 = a2;
  while (2)
  {
    switch(v4)
    {
      case 0:
        v7 = (llvm::Type **)*((_QWORD *)v6 + 4);
        goto LABEL_4;
      case 1:
      case 2:
      case 3:
      case 13:
        v7 = (llvm::Type **)((char *)v6 + 40);
        goto LABEL_4;
      case 4:
        v7 = (llvm::Type **)((char *)v6 + 48);
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        v15 = (const llvm::SCEV **)*((_QWORD *)v6 + 4);
        goto LABEL_18;
      case 6:
        v15 = (const llvm::SCEV **)((char *)v6 + 40);
LABEL_18:
        v6 = *v15;
        v4 = *((unsigned __int16 *)v6 + 12);
        continue;
      case 14:
        v7 = (llvm::Type **)*((_QWORD *)v6 - 1);
LABEL_4:
        v8 = *v7;
        if ((a3 & 1) == 0)
          goto LABEL_11;
        v9 = *(_QWORD **)v8;
        if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12)
          v8 = (llvm::Type *)**((_QWORD **)v8 + 2);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v8);
        v19 = PrimitiveSizeInBits + 1;
        if (PrimitiveSizeInBits <= 62)
        {
          if (PrimitiveSizeInBits <= 30)
          {
            switch(PrimitiveSizeInBits)
            {
              case 15:
                v11 = (llvm::Type *)(*v9 + 1936);
                goto LABEL_10;
              case 7:
                v11 = (llvm::Type *)(*v9 + 1912);
                goto LABEL_10;
              case 0:
                v11 = (llvm::Type *)(*v9 + 1888);
                goto LABEL_10;
            }
          }
          else if (PrimitiveSizeInBits == 31)
          {
            v11 = (llvm::Type *)(*v9 + 1960);
            goto LABEL_10;
          }
        }
        else
        {
          if (PrimitiveSizeInBits == 63)
          {
            v11 = (llvm::Type *)(*v9 + 1984);
            goto LABEL_10;
          }
          if (PrimitiveSizeInBits == 127)
          {
            v11 = (llvm::Type *)(*v9 + 2008);
            goto LABEL_10;
          }
        }
        v16 = sub_1C5270984(*v9 + 2168, &v19);
        v11 = (llvm::Type *)*((_QWORD *)v16 + 1);
        if (!v11)
        {
          v17 = v16;
          v11 = (llvm::Type *)sub_1C484358C(*v9 + 2040, 24, 3);
          v18 = v19;
          *(_QWORD *)v11 = v9;
          *((_QWORD *)v11 + 2) = 0;
          *((_QWORD *)v11 + 1) = (v18 << 8) | 0xDu;
          *((_QWORD *)v17 + 1) = v11;
        }
LABEL_10:
        llvm::ScalarEvolution::getNoopOrZeroExtend((uint64_t)v3, (uint64_t)v5);
        v5 = v12;
        this = v3;
        v8 = v11;
LABEL_11:
        Constant = llvm::ScalarEvolution::getConstant(this, v8, 1, 0);
        return sub_1C4E0AF14((uint64_t)v3, (uint64_t)v5, Constant, 0, 0);
      default:
        return *((_QWORD *)this + 6);
    }
  }
}

uint64_t llvm::ScalarEvolution::getBackedgeTakenCount(llvm::ScalarEvolution *a1, const llvm::Loop *a2, int a3)
{
  const llvm::Loop **v5;
  uint64_t result;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::Loop **v11;

  if (a3 == 2)
  {
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2);
    result = (uint64_t)BackedgeTakenInfo[15];
    if (!result)
    {
      result = llvm::ScalarEvolution::computeSymbolicMaxBackedgeTakenCount(a1, a2);
      BackedgeTakenInfo[15] = (const llvm::Loop *)result;
    }
  }
  else if (a3 == 1)
  {
    v5 = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2);
    result = (uint64_t)v5[13];
    if (result)
    {
      v7 = *((_DWORD *)v5 + 2);
      if (!v7)
        return result;
      v8 = (_DWORD *)((char *)*v5 + 48);
      v9 = 88 * v7;
      while (*(v8 - 1) == *v8)
      {
        v8 += 22;
        v9 -= 88;
        if (!v9)
          return result;
      }
    }
    return *((_QWORD *)a1 + 6);
  }
  else
  {
    v11 = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2);
    return llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)v11, (uint64_t)a2, (uint64_t)a1, 0);
  }
  return result;
}

uint64_t sub_1C4F308CC(uint64_t result)
{
  uint64_t v1;
  _QWORD **v2;
  unsigned int v3;
  _QWORD *v4;

  if (result)
  {
    v1 = *(_QWORD *)(result + 32);
    v2 = (_QWORD **)(v1 + 24);
    v3 = *(_DWORD *)(v1 + 32);
    if (v3 > 0x40)
    {
      if (v3 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v1 + 24)) <= 0x20)
      {
        v4 = (_QWORD *)**v2;
        return ((_DWORD)v4 + 1);
      }
    }
    else
    {
      v4 = *v2;
      if (!((unint64_t)*v2 >> 32))
        return ((_DWORD)v4 + 1);
    }
    return 0;
  }
  return result;
}

uint64_t llvm::ScalarEvolution::getSmallConstantTripCount(llvm::ScalarEvolution *this, const llvm::Loop *a2, const llvm::BasicBlock *a3)
{
  const llvm::Loop **BackedgeTakenInfo;
  unsigned int v6;
  const llvm::BasicBlock **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  v6 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (v6)
  {
    v7 = (const llvm::BasicBlock **)((char *)*BackedgeTakenInfo + 48);
    v8 = 88 * v6;
    while (*(v7 - 6) != a3 || *((_DWORD *)v7 - 1) != *(_DWORD *)v7)
    {
      v7 += 11;
      v8 -= 88;
      if (!v8)
        goto LABEL_11;
    }
    v9 = (uint64_t *)(v7 - 5);
  }
  else
  {
LABEL_11:
    v9 = (uint64_t *)((char *)this + 48);
  }
  v10 = *v9;
  if (*(_WORD *)(v10 + 24))
    v11 = 0;
  else
    v11 = v10;
  return sub_1C4F308CC(v11);
}

uint64_t llvm::ScalarEvolution::getExitCount(llvm::ScalarEvolution *a1, const llvm::Loop *a2, uint64_t a3, int a4)
{
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::Loop *v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v14;
  uint64_t v15;

  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2);
  v8 = *BackedgeTakenInfo;
  v9 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (a4 != 1)
  {
    if (v9)
    {
      v10 = (_DWORD *)((char *)v8 + 48);
      v11 = 88 * v9;
      while (*((_QWORD *)v10 - 6) != a3 || *(v10 - 1) != *v10)
      {
        v10 += 22;
        v11 -= 88;
        if (!v11)
          goto LABEL_9;
      }
      v12 = v10 - 10;
      return *(_QWORD *)v12;
    }
LABEL_9:
    v12 = (_DWORD *)((char *)a1 + 48);
    return *(_QWORD *)v12;
  }
  if (!v9)
    goto LABEL_9;
  v14 = (_DWORD *)((char *)v8 + 48);
  v15 = 88 * v9;
  while (*((_QWORD *)v14 - 6) != a3 || *(v14 - 1) != *v14)
  {
    v14 += 22;
    v15 -= 88;
    if (!v15)
      goto LABEL_9;
  }
  v12 = v14 - 8;
  return *(_QWORD *)v12;
}

uint64_t llvm::ScalarEvolution::getConstantMaxTripCountFromArray(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t LoopLatch;
  uint64_t UMinFromMismatchedTypes;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned __int8 *v12;
  unint64_t v13;
  llvm::ScalarEvolution *ElementSize;
  llvm::ScalarEvolution *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  llvm::ScalarEvolution *v23;
  BOOL v24;
  uint64_t PointerBase;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  llvm::APInt *v32;
  unsigned int v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  llvm::APInt *v39;
  _QWORD **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::APInt *v48;
  unsigned int v49;
  llvm::Type *v50;
  const char *v51;
  uint64_t v52;
  const llvm::SCEV *Constant;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  llvm::APInt *v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  llvm::APInt *v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  const llvm::Loop *v75;
  uint64_t v76;
  uint64_t *v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[48];
  void *v81;
  uint64_t v82;
  _QWORD v83[5];

  v83[3] = *MEMORY[0x1E0C80C00];
  if (!llvm::Loop::isLoopSimplifyForm(a2))
    return *((_QWORD *)this + 6);
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    return *((_QWORD *)this + 6);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a2) != LoopLatch)
    return *((_QWORD *)this + 6);
  v7 = *(_QWORD *)(*(_QWORD *)this + 40);
  v79 = 0x600000000;
  v8 = (uint64_t *)*((_QWORD *)a2 + 4);
  v77 = (uint64_t *)*((_QWORD *)a2 + 5);
  v78 = v80;
  if (v77 == v8)
    goto LABEL_118;
  v75 = a2;
  v73 = v7 + 272;
  v74 = (char *)a2 + 56;
  v76 = LoopLatch;
  do
  {
    v9 = *v8;
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 4), *v8, LoopLatch))
    {
      v10 = v9 + 40;
      for (i = *(_QWORD *)(v9 + 48); i != v10; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v12 = (unsigned __int8 *)(i - 24);
        else
          v12 = 0;
        if (!i)
          continue;
        if (v12[16] - 62 < 0xFFFFFFFE)
          continue;
        v13 = *((_QWORD *)v12 - 4);
        if (!v13)
          continue;
        ElementSize = (llvm::ScalarEvolution *)llvm::ScalarEvolution::getElementSize(this, (llvm::Instruction *)v12);
        if (!ElementSize)
          continue;
        v15 = ElementSize;
        if (*((_WORD *)ElementSize + 12))
          continue;
        v16 = *((_QWORD *)this + 13);
        v17 = *((_DWORD *)this + 30);
        if (v17)
        {
          v18 = (v17 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          v19 = v16 + 48 * v18;
          v20 = *(_QWORD *)(v19 + 24);
          if (v20 == v13)
            goto LABEL_26;
          v21 = 1;
          while (v20 != -4096)
          {
            v22 = v18 + v21++;
            v18 = v22 & (v17 - 1);
            v19 = v16 + 48 * v18;
            v20 = *(_QWORD *)(v19 + 24);
            if (v20 == v13)
              goto LABEL_26;
          }
        }
        v19 = v16 + 48 * v17;
LABEL_26:
        if (v19 == v16 + 48 * v17 || (v23 = *(llvm::ScalarEvolution **)(v19 + 40)) == 0)
        {
          ElementSize = (llvm::ScalarEvolution *)llvm::ScalarEvolution::createSCEVIter(this, v13);
          v23 = ElementSize;
        }
        if (v23)
          v24 = *((unsigned __int16 *)v23 + 12) == 7;
        else
          v24 = 0;
        if (!v24)
          continue;
        PointerBase = llvm::ScalarEvolution::getPointerBase(ElementSize, v23);
        v26 = PointerBase - 32;
        if (!PointerBase)
          v26 = 0;
        v27 = *(_WORD *)(PointerBase + 24) == 14 ? v26 : 0;
        v28 = *((_QWORD *)v23 + 5);
        if (v28 == 2)
        {
          v29 = *(_QWORD *)(*((_QWORD *)v23 + 4) + 8);
        }
        else
        {
          v72 = *((_QWORD *)v23 + 4);
          v81 = v83;
          v82 = 0x300000000;
          v70 = 8 * v28 - 8;
          if ((unint64_t)v70 >= 0x19)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v70 >> 3, 8);
            v71 = v82;
          }
          else
          {
            v71 = 0;
          }
          if (v28 != 1)
          {
            memcpy((char *)v81 + 8 * v71, (const void *)(v72 + 8), 8 * v28 - 8);
            v71 = v82;
          }
          LODWORD(v82) = v71 + ((unint64_t)v70 >> 3);
          v29 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v81, *((uint64_t ***)v23 + 6));
          if (v81 != v83)
            free(v81);
        }
        if (*(_WORD *)(v29 + 24))
          v29 = 0;
        v30 = !v27 || v29 == 0;
        if (v30 || **((_QWORD **)v23 + 4) != v27 + 32)
          continue;
        v31 = *(_QWORD *)(v29 + 32);
        v32 = (llvm::APInt *)(v31 + 24);
        v33 = *(_DWORD *)(v31 + 32);
        if (v33 > 0x40)
        {
          if (v33 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v31 + 24)) > 0x20)
            continue;
          v34 = *(_QWORD *)v32;
          v35 = **(_QWORD ***)v32;
        }
        else
        {
          v34 = *(_QWORD *)v32;
          if (HIDWORD(*(_QWORD *)v32))
            continue;
          v35 = *(_QWORD **)v32;
        }
        v36 = *((_QWORD *)v15 + 4);
        v37 = (_QWORD *)(v36 + 24);
        if (*(_DWORD *)(v36 + 32) >= 0x41u)
          v37 = (_QWORD *)*v37;
        if (v35 != (_QWORD *)*v37)
          continue;
        if (*(_WORD *)(v29 + 24))
        {
          v38 = v33 - 1;
          if (v33 >= 0x41)
            goto LABEL_65;
        }
        else
        {
          if (v33 >= 0x41)
          {
            v39 = v32;
            v40 = (_QWORD **)v34;
            if (llvm::APInt::countLeadingZerosSlowCase(v39) == v33)
              continue;
            v34 = (unint64_t)v40;
            v38 = v33 - 1;
LABEL_65:
            v34 = *(_QWORD *)(v34 + 8 * (v38 >> 6));
            goto LABEL_66;
          }
          if (!v34)
            continue;
          LOBYTE(v38) = v33 - 1;
        }
LABEL_66:
        if (((v34 >> v38) & 1) == 0)
        {
          v41 = *(_QWORD *)(v27 + 24);
          if (v41)
          {
            if (*(_BYTE *)(v41 + 16) == 59)
            {
              v42 = sub_1C477672C((uint64_t)v74, *(_QWORD *)(v41 + 40));
              v43 = *((_QWORD *)v75 + 8);
              v44 = 72;
              if (v43 == *((_QWORD *)v75 + 7))
                v44 = 76;
              if (v42 == (_QWORD *)(v43 + 8 * *(unsigned int *)((char *)v75 + v44)))
              {
                if (*(_BYTE *)(*(_QWORD *)(v41 + 64) + 8) == 17)
                  v45 = *(_QWORD *)(v41 + 64);
                else
                  v45 = 0;
                v46 = *(_QWORD *)(v41 - 32);
                if (*(_BYTE *)(v46 + 16) != 16)
                  v46 = 0;
                if (v45 && v46 != 0)
                {
                  v48 = (llvm::APInt *)(v46 + 24);
                  v49 = *(_DWORD *)(v46 + 32);
                  if (v49 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase(v48) != v49 - 1)
                      continue;
                  }
                  else if (*(_QWORD *)v48 != 1)
                  {
                    continue;
                  }
                  v50 = **(llvm::Type ***)(v29 + 32);
                  v52 = sub_1C4E3D148(v73, v45);
                  if ((_DWORD)v51 == 1)
                  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v50, v52, 0);
                  llvm::ScalarEvolution::getUDivCeilSCEV(this, Constant, (const llvm::SCEV *)v29);
                  if (v54)
                    v55 = *(unsigned __int16 *)(v54 + 24) == 0;
                  else
                    v55 = 0;
                  if (v55)
                  {
                    v56 = v54;
                    v57 = *(_QWORD *)(v54 + 32);
                    v58 = (llvm::APInt *)(v57 + 24);
                    v59 = *(_DWORD *)(v57 + 32);
                    v60 = v59 > 0x40
                        ? llvm::APInt::countLeadingZerosSlowCase(v58)
                        : v59 + __clz(*(_QWORD *)v58) - 64;
                    if (v59 - v60 <= 0x20)
                    {
                      v61 = llvm::ScalarEvolution::getConstant(this, *(llvm::Type **)v57, 1, 0);
                      v62 = sub_1C4E0AF14((uint64_t)this, v56, v61, 0, 0);
                      if (v62 && *(_WORD *)(v62 + 24) == 0)
                      {
                        v64 = v62;
                        v65 = *(_QWORD *)(v62 + 32);
                        v66 = (llvm::APInt *)(v65 + 24);
                        v67 = *(_DWORD *)(v65 + 32);
                        v68 = v67 > 0x40
                            ? llvm::APInt::countLeadingZerosSlowCase(v66)
                            : v67 + __clz(*(_QWORD *)v66) - 64;
                        if (v67 - v68 <= 0x20)
                        {
                          v69 = v79;
                          if (v79 >= (unint64_t)HIDWORD(v79))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
                            v69 = v79;
                          }
                          *((_QWORD *)v78 + v69) = v64;
                          LODWORD(v79) = v79 + 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v8;
    LoopLatch = v76;
  }
  while (v8 != v77);
  if (!(_DWORD)v79)
  {
LABEL_118:
    UMinFromMismatchedTypes = *((_QWORD *)this + 6);
    goto LABEL_119;
  }
  UMinFromMismatchedTypes = llvm::ScalarEvolution::getUMinFromMismatchedTypes((uint64_t)this, &v78, 0);
LABEL_119:
  if (v78 != v80)
    free(v78);
  return UMinFromMismatchedTypes;
}

unint64_t llvm::ScalarEvolution::getElementSize(llvm::ScalarEvolution *this, llvm::Instruction *a2)
{
  int v3;
  llvm::Type *v4;
  llvm::Type *v5;
  llvm::Type *v6;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 61)
  {
    a2 = (llvm::Instruction *)*((_QWORD *)a2 - 8);
  }
  else if (!a2 || v3 != 60)
  {
    return 0;
  }
  v4 = *(llvm::Type **)a2;
  v5 = (llvm::Type *)llvm::PointerType::get(*(llvm::PointerType **)a2, 0);
  if (*((_BYTE *)v5 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), v5);
    v5 = v6;
  }
  return llvm::ScalarEvolution::getSizeOfExpr(this, v5, v4);
}

void llvm::ScalarEvolution::getUDivCeilSCEV(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  __asm { BR              X11 }
}

void sub_1C4F3116C()
{
  JUMPOUT(0x1C4F31158);
}

void sub_1C4F31178()
{
  JUMPOUT(0x1C4F31170);
}

uint64_t sub_1C4F31180(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  llvm::ScalarEvolution *v21;
  const llvm::SCEV *v22;
  const llvm::SCEV *v23;
  const llvm::SCEV *Constant;
  uint64_t UMinExpr;
  const llvm::SCEV *v26;
  uint64_t AddExpr;
  void *v29[2];
  _QWORD v30[9];

  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v21, **(llvm::Type ***)(v20 + 32), 1, 0);
  UMinExpr = llvm::ScalarEvolution::getUMinExpr(v21, v23, Constant, 0);
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)v21, (uint64_t)v23, UMinExpr);
  v29[0] = v30;
  v30[0] = UMinExpr;
  v30[1] = llvm::ScalarEvolution::getUDivExpr(v21, v26, v22);
  v29[1] = (void *)0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v21, (uint64_t)v29, 0, 0);
  if (v29[0] != v30)
    free(v29[0]);
  return AddExpr;
}

uint64_t llvm::ScalarEvolution::getSmallConstantTripMultiple(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  const llvm::BasicBlock **v4;
  uint64_t v5;
  const llvm::BasicBlock **v6;
  char v7;
  unsigned int SmallConstantTripMultiple;
  unint64_t v9;
  unint64_t v10;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a2, (uint64_t)&v12);
  v4 = (const llvm::BasicBlock **)v12;
  if ((_DWORD)v13)
  {
    LODWORD(v5) = 0;
    v6 = (const llvm::BasicBlock **)((char *)v12 + 8 * v13);
    v7 = 1;
    do
    {
      SmallConstantTripMultiple = llvm::ScalarEvolution::getSmallConstantTripMultiple(this, a2, *v4);
      if ((v7 & 1) != 0)
        v9 = SmallConstantTripMultiple;
      else
        v9 = v5;
      if (SmallConstantTripMultiple)
      {
        v10 = SmallConstantTripMultiple;
        do
        {
          v5 = v10;
          v10 = v9 % v10;
          v9 = v5;
        }
        while (v10);
      }
      else
      {
        v5 = v9;
      }
      v7 = 0;
      ++v4;
    }
    while (v4 != v6);
    v4 = (const llvm::BasicBlock **)v12;
  }
  else
  {
    v5 = 1;
  }
  if (v4 != v14)
    free(v4);
  return v5;
}

unint64_t llvm::ScalarEvolution::getSmallConstantTripMultiple(llvm::ScalarEvolution *this, const llvm::Loop *a2, const llvm::BasicBlock *a3)
{
  const llvm::Loop **BackedgeTakenInfo;
  unsigned int v7;
  const llvm::BasicBlock **v8;
  uint64_t v9;
  const llvm::SCEV **v10;

  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  v7 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (v7)
  {
    v8 = (const llvm::BasicBlock **)((char *)*BackedgeTakenInfo + 48);
    v9 = 88 * v7;
    while (*(v8 - 6) != a3 || *((_DWORD *)v8 - 1) != *(_DWORD *)v8)
    {
      v8 += 11;
      v9 -= 88;
      if (!v9)
        goto LABEL_8;
    }
    v10 = v8 - 5;
  }
  else
  {
LABEL_8:
    v10 = (const llvm::SCEV **)((char *)this + 48);
  }
  return llvm::ScalarEvolution::getSmallConstantTripMultiple((const llvm::SCEV **)this, a2, *v10);
}

unint64_t llvm::ScalarEvolution::getSmallConstantTripMultiple(const llvm::SCEV **this, const llvm::Loop *a2, const llvm::SCEV *a3)
{
  uint64_t TripCountFromExitCount;
  uint64_t v6;
  unint64_t *v7;
  unsigned int v8;
  unint64_t result;
  unsigned int v10;
  const llvm::SCEV *v11;
  unsigned int MinTrailingZeros;
  char v13;
  int v14;
  unsigned int v15;

  if (this[6] == a3)
    return 1;
  TripCountFromExitCount = llvm::ScalarEvolution::getTripCountFromExitCount((llvm::ScalarEvolution *)this, a3, 1);
  if (!TripCountFromExitCount || *(_WORD *)(TripCountFromExitCount + 24))
  {
    v11 = llvm::ScalarEvolution::applyLoopGuards(this, (const llvm::SCEV *)TripCountFromExitCount, a2);
    MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, v11);
    if (MinTrailingZeros >= 0x1F)
      v13 = 31;
    else
      v13 = MinTrailingZeros;
    return (1 << v13);
  }
  else
  {
    v6 = *(_QWORD *)(TripCountFromExitCount + 32);
    if (!v6)
      return 1;
    v7 = (unint64_t *)(v6 + 24);
    v8 = *(_DWORD *)(v6 + 32);
    if (v8 > 0x40)
    {
      v14 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 24));
      result = 1;
      v15 = v8 - v14;
      if (v15 && v15 <= 0x20)
        return *(_QWORD *)*v7;
    }
    else
    {
      result = *v7;
      v10 = __clz(*v7);
      if (v10 < 0x20 || v8 == v8 + v10 - 64)
        return 1;
    }
  }
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::applyLoopGuards(llvm::AssumptionCache **this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  uint64_t LoopPredecessor;
  const llvm::BasicBlock *PredecessorWithUniqueSuccessorForBB;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  _BOOL8 v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::AssumptionCache *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  llvm::Value *v31;
  int v32;
  unsigned int v33;
  uint64_t SCEVIter;
  llvm::Value *v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  llvm::Value *v40;
  int v41;
  unsigned int v42;
  llvm::SCEV *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::AssumptionCache *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const llvm::Instruction *v52;
  uint64_t v53;
  llvm::Value *v54;
  llvm::AssumptionCache *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  llvm::Value *v60;
  int v61;
  unsigned int v62;
  __int16 v63;
  uint64_t v64;
  llvm::Value *v65;
  char *v66;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  llvm::Value *v70;
  int v71;
  unsigned int v72;
  llvm::SCEV *v73;
  _QWORD **v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD **v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  int v91;
  const llvm::SCEV *v92;
  const llvm::Loop *v94;
  char *v96;
  _QWORD *v97[2];
  _QWORD *v98[2];
  uint64_t v99;
  uint64_t v100;
  llvm::AssumptionCache **v101;
  llvm::AssumptionCache **v102;
  uint64_t v103;
  int v104;
  _QWORD v105[8];
  uint64_t v106;
  int32x2_t v107;
  int v108;
  _QWORD v109[2];
  void *v110;
  uint64_t v111;
  _QWORD v112[8];
  char *v113;
  uint64_t v114;
  _BYTE v115[48];
  char *v116;
  uint64_t v117;
  _QWORD v118[8];

  v118[6] = *MEMORY[0x1E0C80C00];
  v116 = (char *)v118;
  v117 = 0x600000000;
  v109[0] = this;
  v109[1] = &v116;
  v113 = v115;
  v114 = 0x300000000;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a3);
  if (LoopPredecessor)
  {
    PredecessorWithUniqueSuccessorForBB = (const llvm::BasicBlock *)LoopPredecessor;
    v7 = **((_QWORD **)a3 + 4);
    do
    {
      v8 = (_QWORD *)*((_QWORD *)PredecessorWithUniqueSuccessorForBB + 5);
      if (v8 != (_QWORD *)((char *)PredecessorWithUniqueSuccessorForBB + 40))
      {
        v9 = v8 - 3;
        if (!v8)
          v9 = 0;
        v10 = *((unsigned __int8 *)v9 + 16) - 40;
        if (v10 < 0xFFFFFFF5)
          v9 = 0;
        if (v8)
        {
          v11 = *((_BYTE *)v9 + 16) == 30 && v10 >= 0xFFFFFFF5;
          if (v11 && (*((_DWORD *)v9 + 5) & 0x7FFFFFF) != 1)
          {
            v12 = *(v9 - 12);
            v13 = *(v9 - 4);
            v14 = v114;
            if (v114 >= HIDWORD(v114))
            {
              v16 = v13 == v7;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, v114 + 1, 16);
              v17 = &v113[16 * v114];
              *(_QWORD *)v17 = v12;
              *((_QWORD *)v17 + 1) = v16;
              v14 = v114;
            }
            else
            {
              v15 = &v113[16 * v114];
              *(_QWORD *)v15 = v12;
              v15[8] = v13 == v7;
            }
            LODWORD(v114) = v14 + 1;
          }
        }
      }
      PredecessorWithUniqueSuccessorForBB = (const llvm::BasicBlock *)llvm::ScalarEvolution::getPredecessorWithUniqueSuccessorForBB((llvm::ScalarEvolution *)this, PredecessorWithUniqueSuccessorForBB);
    }
    while (PredecessorWithUniqueSuccessorForBB);
  }
  v94 = a3;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  if ((_DWORD)v114)
  {
    v18 = &v113[16 * v114];
    v96 = v113;
    do
    {
      v19 = *(v18 - 8);
      v110 = v112;
      HIDWORD(v111) = 8;
      v20 = *((_QWORD *)v18 - 2);
      v18 -= 16;
      v101 = (llvm::AssumptionCache **)v105;
      v102 = (llvm::AssumptionCache **)v105;
      v103 = 8;
      v104 = 0;
      v112[0] = v20;
      v21 = 1;
      do
      {
        v22 = *((_QWORD *)v110 + v21 - 1);
        LODWORD(v111) = v21 - 1;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v101, v22);
        if (!v23)
          goto LABEL_59;
        if (v22 && *(_BYTE *)(v22 + 16) == 81)
        {
          v24 = *(_WORD *)(v22 + 18) & 0x3FLL;
          if (!v19)
            v24 = dword_1C85F60D0[v24];
          v25 = *(llvm::Value **)(v22 - 64);
          v26 = this[13];
          v27 = *((_DWORD *)this + 30);
          if (!v27)
            goto LABEL_38;
          v28 = v27 - 1;
          v29 = ((v25 >> 4) ^ (v25 >> 9)) & (v27 - 1);
          v30 = (char *)v26 + 48 * v29;
          v31 = (llvm::Value *)*((_QWORD *)v30 + 3);
          if (v31 != v25)
          {
            v32 = 1;
            while (v31 != (llvm::Value *)-4096)
            {
              v33 = v29 + v32++;
              v29 = v33 & v28;
              v30 = (char *)v26 + 48 * (v33 & v28);
              v31 = (llvm::Value *)*((_QWORD *)v30 + 3);
              if (v31 == v25)
                goto LABEL_39;
            }
LABEL_38:
            v30 = (char *)v26 + 48 * v27;
          }
LABEL_39:
          if (v30 == (char *)v26 + 48 * v27 || (SCEVIter = *((_QWORD *)v30 + 5)) == 0)
          {
            SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v25);
            v26 = this[13];
            v27 = *((_DWORD *)this + 30);
          }
          v35 = *(llvm::Value **)(v22 - 32);
          v36 = (char *)v26 + 48 * v27;
          if (v27)
          {
            v37 = v27 - 1;
            v38 = ((v35 >> 4) ^ (v35 >> 9)) & v37;
            v39 = (char *)v26 + 48 * v38;
            v40 = (llvm::Value *)*((_QWORD *)v39 + 3);
            if (v40 != v35)
            {
              v41 = 1;
              while (v40 != (llvm::Value *)-4096)
              {
                v42 = v38 + v41++;
                v38 = v42 & v37;
                v39 = (char *)v26 + 48 * v38;
                v40 = (llvm::Value *)*((_QWORD *)v39 + 3);
                if (v40 == v35)
                  goto LABEL_49;
              }
              goto LABEL_48;
            }
          }
          else
          {
LABEL_48:
            v39 = v36;
          }
LABEL_49:
          if (v39 == v36 || (v43 = (llvm::SCEV *)*((_QWORD *)v39 + 5)) == 0)
            v43 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v35);
          sub_1C4F50788((uint64_t)v109, v24, SCEVIter, v43, (uint64_t)&v106);
          goto LABEL_59;
        }
        v99 = 0;
        v100 = 0;
        if (v19)
        {
          v98[0] = &v100;
          v98[1] = &v99;
          if ((sub_1C4848F80(v98, v22) & 1) == 0)
            goto LABEL_59;
        }
        else
        {
          v97[0] = &v100;
          v97[1] = &v99;
          if (!sub_1C4849098(v97, v22))
            goto LABEL_59;
        }
        v44 = v100;
        v45 = v111;
        if (v111 >= (unint64_t)HIDWORD(v111))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v111 + 1, 8);
          v45 = v111;
        }
        *((_QWORD *)v110 + v45) = v44;
        v46 = (v111 + 1);
        LODWORD(v111) = v46;
        v47 = v99;
        if (v46 >= HIDWORD(v111))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v46 + 1, 8);
          LODWORD(v46) = v111;
        }
        *((_QWORD *)v110 + v46) = v47;
        LODWORD(v111) = v111 + 1;
LABEL_59:
        v21 = v111;
      }
      while ((_DWORD)v111);
      if (v102 != v101)
        free(v102);
      if (v110 != v112)
        free(v110);
    }
    while (v18 != v96);
  }
  v48 = this[3];
  if (!*((_BYTE *)v48 + 184))
    llvm::AssumptionCache::scanFunction(this[3]);
  v49 = *((unsigned int *)v48 + 6);
  if ((_DWORD)v49)
  {
    v50 = *((_QWORD *)v48 + 2);
    v51 = v50 + 32 * v49;
    while (1)
    {
      v52 = *(const llvm::Instruction **)(v50 + 16);
      if (v52)
      {
        v53 = *((_QWORD *)v52 - 4 * (*((_DWORD *)v52 + 5) & 0x7FFFFFF));
        if (v53)
        {
          if (*(_BYTE *)(v53 + 16) == 81
            && llvm::DominatorTree::dominates(this[4], v52, **((const llvm::BasicBlock ***)v94 + 4)))
          {
            break;
          }
        }
      }
LABEL_94:
      v50 += 32;
      if (v50 == v51)
        goto LABEL_95;
    }
    v54 = *(llvm::Value **)(v53 - 64);
    v55 = this[13];
    v56 = *((_DWORD *)this + 30);
    if (v56)
    {
      v57 = v56 - 1;
      v58 = ((v54 >> 4) ^ (v54 >> 9)) & (v56 - 1);
      v59 = (char *)v55 + 48 * v58;
      v60 = (llvm::Value *)*((_QWORD *)v59 + 3);
      if (v60 == v54)
      {
LABEL_80:
        v63 = *(_WORD *)(v53 + 18);
        if (v59 == (char *)v55 + 48 * v56 || (v64 = *((_QWORD *)v59 + 5)) == 0)
        {
          v64 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v54);
          v55 = this[13];
          v56 = *((_DWORD *)this + 30);
        }
        v65 = *(llvm::Value **)(v53 - 32);
        v66 = (char *)v55 + 48 * v56;
        if (v56)
        {
          v67 = v56 - 1;
          v68 = ((v65 >> 4) ^ (v65 >> 9)) & v67;
          v69 = (char *)v55 + 48 * v68;
          v70 = (llvm::Value *)*((_QWORD *)v69 + 3);
          if (v70 == v65)
            goto LABEL_90;
          v71 = 1;
          while (v70 != (llvm::Value *)-4096)
          {
            v72 = v68 + v71++;
            v68 = v72 & v67;
            v69 = (char *)v55 + 48 * v68;
            v70 = (llvm::Value *)*((_QWORD *)v69 + 3);
            if (v70 == v65)
              goto LABEL_90;
          }
        }
        v69 = v66;
LABEL_90:
        if (v69 == v66 || (v73 = (llvm::SCEV *)*((_QWORD *)v69 + 5)) == 0)
          v73 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v65);
        sub_1C4F50788((uint64_t)v109, v63 & 0x3F, v64, v73, (uint64_t)&v106);
        goto LABEL_94;
      }
      v61 = 1;
      while (v60 != (llvm::Value *)-4096)
      {
        v62 = v58 + v61++;
        v58 = v62 & v57;
        v59 = (char *)v55 + 48 * (v62 & v57);
        v60 = (llvm::Value *)*((_QWORD *)v59 + 3);
        if (v60 == v54)
          goto LABEL_80;
      }
    }
    v59 = (char *)v55 + 48 * v56;
    goto LABEL_80;
  }
LABEL_95:
  if (v107.i32[0])
  {
    if (v117 >= 2)
    {
      v74 = (_QWORD **)v116;
      v75 = &v116[8 * v117];
      while (1)
      {
        v98[0] = *v74;
        v76 = sub_1C4F5A9A0((uint64_t)&v106, (uint64_t *)v98)[1];
        if (v108)
        {
          LODWORD(v77) = ((LODWORD(v98[0]) >> 4) ^ (LODWORD(v98[0]) >> 9)) & (v108 - 1);
          v78 = (_QWORD **)(v106 + 16 * v77);
          v79 = *v78;
          if (v98[0] == *v78)
          {
LABEL_100:
            *v78 = (_QWORD *)-8192;
            v107 = vadd_s32(v107, (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v90 = 1;
            while (v79 != (_QWORD *)-4096)
            {
              v91 = v77 + v90++;
              v77 = v91 & (v108 - 1);
              v79 = *(_QWORD **)(v106 + 16 * v77);
              if (v98[0] == v79)
              {
                v78 = (_QWORD **)(v106 + 16 * v77);
                goto LABEL_100;
              }
            }
          }
        }
        v102 = 0;
        v103 = 0;
        v104 = 0;
        v101 = this;
        v105[0] = &v106;
        v80 = sub_1C4F5185C((uint64_t)&v101, v76);
        v110 = v98[0];
        v111 = v80;
        if (!v108)
          break;
        v81 = (v108 - 1) & ((LODWORD(v98[0]) >> 4) ^ (LODWORD(v98[0]) >> 9));
        v82 = (_QWORD *)(v106 + 16 * v81);
        v83 = (_QWORD *)*v82;
        if (v98[0] != (_QWORD *)*v82)
        {
          v84 = 0;
          v85 = 1;
          while (v83 != (_QWORD *)-4096)
          {
            if (v84)
              v86 = 0;
            else
              v86 = v83 == (_QWORD *)-8192;
            if (v86)
              v84 = v82;
            v87 = v81 + v85++;
            v81 = v87 & (v108 - 1);
            v82 = (_QWORD *)(v106 + 16 * v81);
            v83 = (_QWORD *)*v82;
            if (v98[0] == (_QWORD *)*v82)
              goto LABEL_117;
          }
          if (v84)
            v88 = v84;
          else
            v88 = v82;
          goto LABEL_116;
        }
LABEL_117:
        MEMORY[0x1CAA32FB4](v102, 8);
        if (++v74 == (_QWORD **)v75)
          goto LABEL_123;
      }
      v88 = 0;
LABEL_116:
      v89 = sub_1C4F52BE0((uint64_t)&v106, (uint64_t)&v110, (uint64_t *)&v110, v88);
      *v89 = v110;
      v89[1] = v111;
      goto LABEL_117;
    }
LABEL_123:
    v102 = 0;
    v103 = 0;
    v101 = this;
    v104 = 0;
    v105[0] = &v106;
    v92 = (const llvm::SCEV *)sub_1C4F5185C((uint64_t)&v101, (uint64_t)a2);
    MEMORY[0x1CAA32FB4](v102, 8);
  }
  else
  {
    v92 = a2;
  }
  MEMORY[0x1CAA32FB4](v106, 8);
  if (v113 != v115)
    free(v113);
  if (v116 != (char *)v118)
    free(v116);
  return v92;
}

const llvm::Loop **llvm::ScalarEvolution::getBackedgeTakenInfo(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  const llvm::Loop **v8;
  const llvm::Loop *v9;
  int v10;
  const llvm::Loop **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v42;
  void *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[88];
  _BYTE v48[24];
  char v49;
  void *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[80];
  _BYTE v54[33];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v45 = v47;
  v46 = 0x100000000;
  *(_QWORD *)v48 = 0;
  v48[8] = 0;
  *(_QWORD *)&v48[16] = 0;
  v49 = 0;
  v50 = a2;
  v51 = v53;
  v52 = 0x100000000;
  *(_OWORD *)&v54[8] = *(_OWORD *)v48;
  *(_OWORD *)&v54[17] = *(unint64_t *)&v48[9];
  v4 = *((_DWORD *)this + 140);
  if (v4)
  {
    v5 = *((_QWORD *)this + 68);
    v6 = v4 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (const llvm::Loop **)(v5 + 144 * v7);
    v9 = *v8;
    if (*v8 == a2)
    {
      v10 = 1;
      goto LABEL_21;
    }
    v11 = 0;
    v12 = 1;
    v10 = 1;
    while (v9 != (const llvm::Loop *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v9 == (const llvm::Loop *)-8192;
      if (v13)
        v11 = v8;
      v14 = v7 + v12++;
      v7 = v14 & v6;
      v8 = (const llvm::Loop **)(v5 + 144 * v7);
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_21;
    }
    if (v11)
      v15 = (uint64_t)v11;
    else
      v15 = (uint64_t)v8;
  }
  else
  {
    v15 = 0;
  }
  v8 = (const llvm::Loop **)sub_1C4F5CBC4((uint64_t)this + 544, v15, (uint64_t *)&v50, (uint64_t)&v51);
  v16 = (char *)v51;
  if ((_DWORD)v52)
  {
    v18 = 88 * v52;
    do
    {
      v19 = *(void **)&v16[v18 - 56];
      if (v19 != *(void **)&v16[v18 - 64])
      {
        v44 = v16;
        free(v19);
        v16 = v44;
      }
      v18 -= 88;
    }
    while (v18);
    v16 = (char *)v51;
  }
  if (v16 != v53)
    free(v16);
  v10 = 0;
LABEL_21:
  if (v45 == v47)
  {
    if (v10)
      return v8 + 1;
  }
  else
  {
    free(v45);
    if (v10)
      return v8 + 1;
  }
  llvm::ScalarEvolution::computeBackedgeTakenCount(this, a2, 0, (uint64_t)&v50);
  if ((_DWORD)v51 || *(_WORD *)(*(_QWORD *)v54 + 24) != 15)
  {
    v45 = v47;
    v46 = 0x800000000;
    v20 = *((_QWORD *)this + 120);
    v21 = *((_DWORD *)this + 244);
    v22 = sub_1C4F32F2C(v20, v21, (uint64_t)a2);
    if ((uint64_t *)(v20 + 56 * v21) == v22)
    {
      v24 = 0;
      v23 = (uint64_t *)v47;
    }
    else
    {
      sub_1C4F33D14((unsigned int *)&v45, (uint64_t)v47, (char *)v22[1], (char *)(v22[1] + 8 * *((unsigned int *)v22 + 4)));
      v23 = (uint64_t *)v45;
      v24 = v46;
    }
    llvm::ScalarEvolution::forgetMemoizedResults((int32x2_t *)this, v23, v24);
    if (*(_QWORD *)(**((_QWORD **)a2 + 4) + 40) != **((_QWORD **)a2 + 4) + 40)
    {
      v25 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 48);
      v26 = v25 - 24;
      v27 = v25 ? v25 - 24 : 0;
      if (v25 && *(_BYTE *)(v27 + 16) == 83)
      {
        v28 = *((_DWORD *)this + 158);
        v29 = v28 - 1;
        do
        {
          if (v28)
          {
            v32 = *((_QWORD *)this + 77);
            LODWORD(v33) = ((v26 >> 4) ^ (v26 >> 9)) & v29;
            v34 = (uint64_t *)(v32 + 16 * v33);
            v35 = *v34;
            if (v26 == *v34)
            {
LABEL_54:
              *v34 = -8192;
              *((int32x2_t *)this + 78) = vadd_s32(*(int32x2_t *)((char *)this + 624), (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v36 = 1;
              while (v35 != -4096)
              {
                v37 = v33 + v36++;
                v33 = v37 & v29;
                v35 = *(_QWORD *)(v32 + 16 * v33);
                if (v26 == v35)
                {
                  v34 = (uint64_t *)(v32 + 16 * v33);
                  goto LABEL_54;
                }
              }
            }
          }
          v30 = *(_QWORD *)(v26 + 32);
          v26 = v30 - 24;
          if (v30)
            v31 = v30 - 24;
          else
            v31 = 0;
        }
        while (v30 && *(_BYTE *)(v31 + 16) == 83);
      }
    }
    if (v45 != v47)
      free(v45);
  }
  v38 = sub_1C4F32EC8(*((_QWORD *)this + 68), *((_DWORD *)this + 140), (uint64_t)a2);
  v17 = v38 + 1;
  sub_1C4F56BDC((uint64_t)(v38 + 1), (__int128 **)&v50);
  v39 = *(_OWORD *)v54;
  *(_OWORD *)((char *)v38 + 121) = *(_OWORD *)&v54[9];
  *((_OWORD *)v38 + 7) = v39;
  v40 = (uint64_t *)v50;
  if ((_DWORD)v51)
  {
    v42 = 11 * v51;
    do
    {
      v43 = (void *)v40[v42 - 7];
      if (v43 != (void *)v40[v42 - 8])
        free(v43);
      v42 -= 11;
    }
    while (v42 * 8);
    v40 = (uint64_t *)v50;
  }
  if (v40 != &v52)
    free(v40);
  return (const llvm::Loop **)v17;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getExact(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = a1[2];
  if (v3)
  {
    v4 = (_DWORD *)(*(_QWORD *)a1 + 48);
    v5 = 88 * v3;
    while (*((_QWORD *)v4 - 6) != a2 || *(v4 - 1) != *v4)
    {
      v4 += 22;
      v5 -= 88;
      if (!v5)
        goto LABEL_6;
    }
    v6 = v4 - 10;
  }
  else
  {
LABEL_6:
    v6 = (_DWORD *)(a3 + 48);
  }
  return *(_QWORD *)v6;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getConstantMax(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = a1[2];
  if (v3)
  {
    v4 = (_DWORD *)(*(_QWORD *)a1 + 48);
    v5 = 88 * v3;
    while (*((_QWORD *)v4 - 6) != a2 || *(v4 - 1) != *v4)
    {
      v4 += 22;
      v5 -= 88;
      if (!v5)
        goto LABEL_6;
    }
    v6 = v4 - 8;
  }
  else
  {
LABEL_6:
    v6 = (_DWORD *)(a3 + 48);
  }
  return *(_QWORD *)v6;
}

const llvm::Loop **llvm::ScalarEvolution::getPredicatedBackedgeTakenInfo(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  const llvm::Loop **BackedgeTakenInfo;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  const llvm::Loop **v9;
  const llvm::Loop *v10;
  int v11;
  const llvm::Loop **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v24;
  void *v25;
  char *v26;
  _BYTE v27[24];
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[80];
  _BYTE v33[33];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  if (*((_BYTE *)BackedgeTakenInfo + 112))
    return BackedgeTakenInfo;
  *(_QWORD *)v27 = 0;
  v27[8] = 0;
  *(_QWORD *)&v27[16] = 0;
  v28 = 0;
  v29 = a2;
  v30 = v32;
  v31 = 0x100000000;
  *(_OWORD *)&v33[8] = *(_OWORD *)v27;
  *(_OWORD *)&v33[17] = *(unint64_t *)&v27[9];
  v5 = *((_DWORD *)this + 146);
  if (!v5)
  {
    v16 = 0;
LABEL_18:
    v9 = (const llvm::Loop **)sub_1C4F5CBC4((uint64_t)this + 568, v16, (uint64_t *)&v29, (uint64_t)&v30);
    v17 = (char *)v30;
    if ((_DWORD)v31)
    {
      v18 = 88 * v31;
      do
      {
        v19 = *(void **)&v17[v18 - 56];
        if (v19 != *(void **)&v17[v18 - 64])
        {
          v26 = v17;
          free(v19);
          v17 = v26;
        }
        v18 -= 88;
      }
      while (v18);
      v17 = (char *)v30;
    }
    if (v17 != v32)
      free(v17);
    v11 = 0;
    goto LABEL_22;
  }
  v6 = *((_QWORD *)this + 71);
  v7 = v5 - 1;
  v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (const llvm::Loop **)(v6 + 144 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v12 = 0;
    v13 = 1;
    v11 = 1;
    while (v10 != (const llvm::Loop *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v10 == (const llvm::Loop *)-8192;
      if (v14)
        v12 = v9;
      v15 = v8 + v13++;
      v8 = v15 & v7;
      v9 = (const llvm::Loop **)(v6 + 144 * v8);
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_22;
    }
    if (v12)
      v16 = (uint64_t)v12;
    else
      v16 = (uint64_t)v9;
    goto LABEL_18;
  }
  v11 = 1;
LABEL_22:
  if (v11)
    return v9 + 1;
  llvm::ScalarEvolution::computeBackedgeTakenCount(this, a2, 1, (uint64_t)&v29);
  v20 = sub_1C4F32EC8(*((_QWORD *)this + 71), *((_DWORD *)this + 146), (uint64_t)a2);
  BackedgeTakenInfo = (const llvm::Loop **)(v20 + 1);
  sub_1C4F56BDC((uint64_t)(v20 + 1), (__int128 **)&v29);
  v21 = *(_OWORD *)v33;
  *(_OWORD *)((char *)v20 + 121) = *(_OWORD *)&v33[9];
  *((_OWORD *)v20 + 7) = v21;
  v22 = (uint64_t *)v29;
  if ((_DWORD)v30)
  {
    v24 = 11 * v30;
    do
    {
      v25 = (void *)v22[v24 - 7];
      if (v25 != (void *)v22[v24 - 8])
        free(v25);
      v24 -= 11;
    }
    while (v24 * 8);
    v22 = (uint64_t *)v29;
  }
  if (v22 != &v31)
    free(v22);
  return BackedgeTakenInfo;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getExact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t UMinFromMismatchedTypes;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 112) || !*(_DWORD *)(a1 + 8) || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a2))
    return *(_QWORD *)(a3 + 48);
  v27 = v29;
  v28 = 0x200000000;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD **)a1;
    v9 = *(_QWORD *)a1 + 88 * v7;
    v10 = a4 + 16;
    do
    {
      v11 = v8[1];
      v12 = v28;
      if (v28 >= (unint64_t)HIDWORD(v28))
      {
        v23 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
        v10 = v23;
        v12 = v28;
      }
      *((_QWORD *)v27 + v12) = v11;
      LODWORD(v28) = v28 + 1;
      if (a4)
      {
        v13 = v8[4];
        if (v13 == v8[3])
          v14 = 44;
        else
          v14 = 40;
        v15 = *(unsigned int *)((char *)v8 + v14);
        if ((_DWORD)v15)
        {
          v16 = 8 * v15;
          v17 = (unint64_t *)v8[4];
          while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v17;
            v16 -= 8;
            if (!v16)
              goto LABEL_26;
          }
        }
        else
        {
          v17 = (unint64_t *)v8[4];
        }
        v18 = (unint64_t *)(v13 + 8 * v15);
        if (v17 != v18)
        {
          v19 = *(_DWORD *)(a4 + 8);
          v20 = *v17;
LABEL_20:
          if (v19 >= *(_DWORD *)(a4 + 12))
          {
            v26 = v10;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v10, v19 + 1, 8);
            v10 = v26;
            v19 = *(_DWORD *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v19) = v20;
          v19 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v19;
          v21 = v17 + 1;
          while (v21 != v18)
          {
            v22 = *v21++;
            v20 = v22;
            if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v17 = v21 - 1;
              goto LABEL_20;
            }
          }
        }
      }
LABEL_26:
      v8 += 11;
    }
    while (v8 != (_QWORD *)v9);
  }
  UMinFromMismatchedTypes = llvm::ScalarEvolution::getUMinFromMismatchedTypes(a3, &v27, 0);
  if (v27 != v29)
    free(v27);
  return UMinFromMismatchedTypes;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getConstantMax(llvm::ScalarEvolution::BackedgeTakenInfo *this, llvm::ScalarEvolution *a2)
{
  uint64_t result;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;

  result = *((_QWORD *)this + 13);
  if (!result)
    return *((_QWORD *)a2 + 6);
  v4 = *((_DWORD *)this + 2);
  if (v4)
  {
    v5 = (_DWORD *)(*(_QWORD *)this + 48);
    v6 = 88 * v4;
    while (*(v5 - 1) == *v5)
    {
      v5 += 22;
      v6 -= 88;
      if (!v6)
        return result;
    }
    return *((_QWORD *)a2 + 6);
  }
  return result;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getSymbolicMax(llvm::ScalarEvolution::BackedgeTakenInfo *this, const llvm::Loop *a2, llvm::ScalarEvolution *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    result = llvm::ScalarEvolution::computeSymbolicMaxBackedgeTakenCount(a3, a2);
    *((_QWORD *)this + 15) = result;
  }
  return result;
}

BOOL llvm::ScalarEvolution::isBackedgeTakenCountMaxOrZero(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  const llvm::Loop **BackedgeTakenInfo;
  _BOOL8 result;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  BOOL v8;

  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  if (!*((_BYTE *)BackedgeTakenInfo + 128))
    return 0;
  v4 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (!v4)
    return 1;
  v5 = 88 * v4 - 88;
  v6 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
  do
  {
    v7 = *(v6 - 1);
    result = v7 == *v6;
    v8 = v7 != *v6 || v5 == 0;
    v5 -= 88;
    v6 += 22;
  }
  while (!v8);
  return result;
}

BOOL llvm::ScalarEvolution::BackedgeTakenInfo::isConstantMaxOrZero(llvm::ScalarEvolution::BackedgeTakenInfo *this, llvm::ScalarEvolution *a2)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  _BOOL8 result;
  BOOL v7;

  if (!*((_BYTE *)this + 128))
    return 0;
  v2 = *((_DWORD *)this + 2);
  if (!v2)
    return 1;
  v3 = 88 * v2 - 88;
  v4 = (_DWORD *)(*(_QWORD *)this + 48);
  do
  {
    v5 = *(v4 - 1);
    result = v5 == *v4;
    v7 = v5 != *v4 || v3 == 0;
    v3 -= 88;
    v4 += 22;
  }
  while (!v7);
  return result;
}

void llvm::ScalarEvolution::computeBackedgeTakenCount(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t LoopLatch;
  uint64_t v8;
  uint64_t v9;
  const llvm::SCEV *v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v19;
  const llvm::SCEV *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::APInt *v27;
  unsigned int v28;
  BOOL v29;
  _BOOL4 v30;
  _BOOL4 v31;
  llvm::SCEV *v32;
  llvm::BasicBlock **v33;
  void *v34;
  __int128 v35;
  char v36;
  _QWORD *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  const llvm::SCEV *v42;
  unsigned int v43;
  BOOL v44;
  char v45;
  char *v46;
  char v47;
  const llvm::SCEV *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  BOOL v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  llvm::SCEV *UMinFromMismatchedTypes;
  uint64_t v92;
  llvm::SCEV *v93[2];
  char v94;
  void *v95;
  void *__src;
  unsigned int v97;
  unsigned int v98;
  int v99;
  llvm::BasicBlock *v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[384];
  char *v104;
  uint64_t v105;
  _BYTE v106[64];
  void *v107[2];
  _QWORD v108[4];

  v5 = (uint64_t)a2;
  v108[2] = *MEMORY[0x1E0C80C00];
  v104 = v106;
  v105 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a2, (uint64_t)&v104);
  v101 = v103;
  v102 = 0x400000000;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v5);
  if (!(_DWORD)v105)
  {
    v44 = 0;
    LOBYTE(v11) = 1;
LABEL_68:
    v10 = (const llvm::SCEV *)*((_QWORD *)this + 6);
    goto LABEL_70;
  }
  v8 = LoopLatch;
  v9 = 0;
  v10 = 0;
  v86 = 0;
  v87 = v108;
  v88 = v5 + 56;
  UMinFromMismatchedTypes = 0;
  v92 = 8 * v105;
  v11 = 1;
  v90 = a3;
  v89 = LoopLatch;
  do
  {
    v12 = *(llvm::BasicBlock **)&v104[v9];
    v100 = v12;
    v13 = (_QWORD *)*((_QWORD *)v12 + 5);
    if (v13 == (_QWORD *)((char *)v12 + 40))
      goto LABEL_28;
    v14 = v13 - 3;
    if (!v13)
      v14 = 0;
    v15 = *((unsigned __int8 *)v14 + 16) - 40;
    if (v15 < 0xFFFFFFF5)
      v14 = 0;
    if (!v13)
      goto LABEL_28;
    if (*((_BYTE *)v14 + 16) != 30 || v15 < 0xFFFFFFF5)
      goto LABEL_28;
    v17 = *(v14 - 12);
    if (!v17 || *(_BYTE *)(v17 + 16) != 16)
      goto LABEL_28;
    v19 = v11;
    v20 = v10;
    v21 = sub_1C477672C(v88, *(v14 - 4));
    v22 = v5;
    v23 = *(_QWORD *)(v5 + 64);
    v24 = 72;
    if (v23 == *(_QWORD *)(v22 + 56))
      v24 = 76;
    v25 = v22;
    v26 = *(unsigned int *)(v22 + v24);
    v27 = (llvm::APInt *)(v17 + 24);
    v28 = *(_DWORD *)(v17 + 32);
    v29 = v28 > 0x40 ? llvm::APInt::countLeadingZerosSlowCase(v27) == v28 : *(_QWORD *)v27 == 0;
    v30 = v29;
    v31 = v21 != (_QWORD *)(v23 + 8 * v26);
    v10 = v20;
    v11 = v19;
    a3 = v90;
    v5 = v25;
    v8 = v89;
    if (((v31 ^ v30) & 1) == 0)
    {
LABEL_28:
      llvm::ScalarEvolution::computeExitLimit(this, (const llvm::Loop *)v5, v12, a3, (uint64_t *)v93);
      v32 = v93[0];
      if (v93[0] == *((llvm::SCEV **)this + 6))
      {
        v11 = 0;
      }
      else
      {
        if (v102 >= HIDWORD(v102))
        {
          sub_1C61B3210((uint64_t)&v101, &v100, (uint64_t)v93);
        }
        else
        {
          v33 = (llvm::BasicBlock **)((char *)v101 + 96 * v102);
          *v33 = v12;
          v34 = v33 + 8;
          v35 = *(_OWORD *)v93;
          v36 = v94;
          v33[4] = (llvm::BasicBlock *)(v33 + 8);
          v37 = v33 + 4;
          *((_BYTE *)v37 - 8) = v36;
          *(_OWORD *)(v37 - 3) = v35;
          v38 = __src;
          if (__src == v95)
          {
            v37[1] = v34;
          }
          else
          {
            v43 = v97;
            v34 = malloc_type_malloc(8 * v97, 0x4065EBACuLL);
            if (!v34 && (v43 || (v34 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            v37[1] = v34;
            v38 = v95;
          }
          *((_DWORD *)v37 + 4) = v97;
          v39 = v98;
          if (__src == v38)
            v40 = v98;
          else
            v40 = v97;
          if (v40)
          {
            memmove(v34, __src, 8 * v40);
            v39 = v98;
          }
          *((_DWORD *)v37 + 5) = v39;
          *((_DWORD *)v37 + 6) = v99;
          LODWORD(v102) = v102 + 1;
        }
        v32 = (llvm::SCEV *)*((_QWORD *)this + 6);
      }
      if (v93[1] != v32 && v8 != 0)
      {
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 4), (uint64_t)v100, v8))
        {
          if (UMinFromMismatchedTypes)
          {
            v107[0] = v87;
            v108[0] = UMinFromMismatchedTypes;
            v108[1] = v93[1];
            v107[1] = (void *)0x200000002;
            UMinFromMismatchedTypes = (llvm::SCEV *)llvm::ScalarEvolution::getUMinFromMismatchedTypes((uint64_t)this, v107, 0);
            if (v107[0] != v87)
              free(v107[0]);
          }
          else
          {
            v86 = v94 != 0;
            UMinFromMismatchedTypes = v93[1];
          }
LABEL_55:
          if (__src != v95)
            free(__src);
          goto LABEL_57;
        }
        v32 = (llvm::SCEV *)*((_QWORD *)this + 6);
      }
      if (v10 != v32)
      {
        if (!v10 || v93[1] == v32)
        {
          v10 = v93[1];
        }
        else
        {
          llvm::ScalarEvolution::getUMaxFromMismatchedTypes(this, v10, v93[1]);
          v10 = v42;
        }
      }
      goto LABEL_55;
    }
LABEL_57:
    v9 += 8;
  }
  while (v92 != v9);
  if (UMinFromMismatchedTypes)
  {
    v10 = UMinFromMismatchedTypes;
    v44 = v86;
    goto LABEL_70;
  }
  v44 = v86;
  if (!v10)
    goto LABEL_68;
LABEL_70:
  v45 = v44 && (_DWORD)v105 == 1;
  v46 = (char *)v101;
  if ((_DWORD)v102)
  {
    v47 = v11;
    v48 = v10;
    v49 = (char *)v101 + 96 * v102;
    v50 = 4;
    if (!a3)
      v50 = 0;
    v51 = v5 & 0xFFFFFFFFFFFFFFFBLL | v50;
    while (1)
    {
      v52 = *((_QWORD *)v46 + 1);
      if (*(_WORD *)(v52 + 24))
        break;
LABEL_120:
      v46 += 96;
      if (v46 == v49)
      {
        v46 = (char *)v101;
        v81 = v102;
        v10 = v48;
        LOBYTE(v11) = v47;
        goto LABEL_124;
      }
    }
    v53 = *((_DWORD *)this + 152);
    if (!v53)
    {
      v57 = 0;
      goto LABEL_90;
    }
    v54 = *((_QWORD *)this + 74);
    v55 = v53 - 1;
    v56 = (v53 - 1) & ((v52 >> 4) ^ (v52 >> 9));
    v57 = (uint64_t *)(v54 + 72 * v56);
    v58 = *v57;
    if (v52 != *v57)
    {
      v59 = 0;
      v60 = 1;
      while (v58 != -4096)
      {
        if (v59)
          v61 = 0;
        else
          v61 = v58 == -8192;
        if (v61)
          v59 = v57;
        v62 = v56 + v60++;
        v56 = v62 & v55;
        v57 = (uint64_t *)(v54 + 72 * (v62 & v55));
        v58 = *v57;
        if (v52 == *v57)
          goto LABEL_119;
      }
      if (v59)
        v57 = v59;
LABEL_90:
      v63 = *((_DWORD *)this + 150);
      if (4 * v63 + 4 < 3 * v53)
      {
        if (v53 + ~v63 - *((_DWORD *)this + 151) <= v53 >> 3)
        {
          sub_1C4F5DC78((uint64_t)this + 592, v53);
          v73 = *((_DWORD *)this + 152);
          v52 = *((_QWORD *)v46 + 1);
          if (v73)
          {
            v74 = *((_QWORD *)this + 74);
            v75 = v73 - 1;
            v76 = ((v52 >> 4) ^ (v52 >> 9)) & (v73 - 1);
            v57 = (uint64_t *)(v74 + 72 * v76);
            v77 = *v57;
            if (*v57 != v52)
            {
              v68 = 0;
              v78 = 1;
              while (v77 != -4096)
              {
                if (v68)
                  v79 = 0;
                else
                  v79 = v77 == -8192;
                if (v79)
                  v68 = v57;
                v80 = v76 + v78++;
                v76 = v80 & v75;
                v57 = (uint64_t *)(v74 + 72 * (v80 & v75));
                v77 = *v57;
                if (*v57 == v52)
                  goto LABEL_115;
              }
LABEL_113:
              if (v68)
                v57 = v68;
            }
          }
          else
          {
            v57 = 0;
          }
        }
LABEL_115:
        v72 = *v57;
      }
      else
      {
        sub_1C4F5DC78((uint64_t)this + 592, 2 * v53);
        v64 = *((_QWORD *)this + 74);
        v52 = *((_QWORD *)v46 + 1);
        v65 = *((_DWORD *)this + 152) - 1;
        v66 = ((v52 >> 4) ^ (v52 >> 9)) & v65;
        v57 = (uint64_t *)(v64 + 72 * v66);
        v67 = *v57;
        if (v52 != *v57)
        {
          v68 = 0;
          v69 = 1;
          while (v67 != -4096)
          {
            if (v68)
              v70 = 0;
            else
              v70 = v67 == -8192;
            if (v70)
              v68 = v57;
            v71 = v66 + v69++;
            v66 = v71 & v65;
            v57 = (uint64_t *)(v64 + 72 * (v71 & v65));
            v67 = *v57;
            if (v52 == *v57)
              goto LABEL_100;
          }
          goto LABEL_113;
        }
LABEL_100:
        v72 = *((_QWORD *)v46 + 1);
      }
      ++*((_DWORD *)this + 150);
      if (v72 != -4096)
        --*((_DWORD *)this + 151);
      *v57 = v52;
      v57[1] = (uint64_t)(v57 + 5);
      v57[2] = (uint64_t)(v57 + 5);
      v57[3] = 4;
      *((_DWORD *)v57 + 8) = 0;
    }
LABEL_119:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v57 + 1), v51);
    goto LABEL_120;
  }
  v81 = 0;
LABEL_124:
  llvm::ScalarEvolution::BackedgeTakenInfo::BackedgeTakenInfo(a4, (uint64_t)v46, v81, v11 & 1, (uint64_t)v10, v45);
  v82 = (char *)v101;
  if ((_DWORD)v102)
  {
    v83 = 96 * v102;
    do
    {
      v84 = *(void **)&v82[v83 - 56];
      if (v84 != *(void **)&v82[v83 - 64])
        free(v84);
      v83 -= 96;
    }
    while (v83);
    v82 = (char *)v101;
  }
  if (v82 != v103)
    free(v82);
  if (v104 != v106)
    free(v104);
}

uint64_t *sub_1C4F32EC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return (uint64_t *)(a1 + 144 * a2);
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = (uint64_t *)(a1 + 144 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = (uint64_t *)(a1 + 144 * (v8 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (uint64_t *)(a1 + 144 * a2);
  }
  return v5;
}

uint64_t *sub_1C4F32F2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return (uint64_t *)(a1 + 56 * a2);
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = (uint64_t *)(a1 + 56 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = (uint64_t *)(a1 + 56 * (v8 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (uint64_t *)(a1 + 56 * a2);
  }
  return v5;
}

void sub_1C4F32F90(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 || *(_DWORD *)(a1 + 12))
  {
    v2 = *(_DWORD *)(a1 + 16);
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_1C4F5D100(a1);
    }
    else
    {
      if (v2)
      {
        v3 = *(_QWORD *)a1;
        v4 = *(_QWORD *)a1 + 144 * v2;
        do
        {
          if (*(_QWORD *)v3 != -4096)
          {
            if (*(_QWORD *)v3 != -8192)
            {
              v5 = *(char **)(v3 + 8);
              v6 = *(_DWORD *)(v3 + 16);
              if (v6)
              {
                v7 = 88 * v6;
                do
                {
                  v8 = *(void **)&v5[v7 - 56];
                  if (v8 != *(void **)&v5[v7 - 64])
                  {
                    v16 = a1;
                    v9 = v5;
                    v12 = v3;
                    v14 = v4;
                    v10 = v7;
                    free(v8);
                    v7 = v10;
                    v3 = v12;
                    v4 = v14;
                    a1 = v16;
                    v5 = v9;
                  }
                  v7 -= 88;
                }
                while (v7);
                v5 = *(char **)(v3 + 8);
              }
              if (v5 != (char *)(v3 + 24))
              {
                v15 = a1;
                v11 = v3;
                v13 = v4;
                free(v5);
                v4 = v13;
                a1 = v15;
                v3 = v11;
              }
            }
            *(_QWORD *)v3 = -4096;
          }
          v3 += 144;
        }
        while (v3 != v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
}

uint64_t sub_1C4F330BC(uint64_t result)
{
  _QWORD *v1;
  int v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = (_QWORD *)result;
  v2 = *(_DWORD *)(result + 8);
  if (v2 || *(_DWORD *)(result + 12))
  {
    v3 = *(_DWORD *)(result + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      result = sub_1C4F5D430(result);
      v17 = 1 << (33 - __clz(v2 - 1));
      if (v17 <= 64)
        v17 = 64;
      if (v2)
        v18 = v17;
      else
        v18 = 0;
      if ((_DWORD)v18 == *((_DWORD *)v1 + 4))
      {
        v1[1] = 0;
        if ((_DWORD)v18)
        {
          v19 = 48 * v18;
          v20 = (_QWORD *)(*v1 + 16);
          do
          {
            *v20 = 0;
            v20[1] = -4096;
            *(v20 - 2) = off_1E813B0D0;
            *(v20 - 1) = 2;
            v20[2] = 0;
            v20 += 6;
            v19 -= 48;
          }
          while (v19);
        }
      }
      else
      {
        result = MEMORY[0x1CAA32FB4](*v1, 8);
        if ((_DWORD)v18)
        {
          v21 = (4 * (int)v18 / 3u + 1) | ((unint64_t)(4 * (int)v18 / 3u + 1) >> 1);
          v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
          LODWORD(v22) = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
          *((_DWORD *)v1 + 4) = v22;
          result = (uint64_t)operator new(48 * v22, (std::align_val_t)8uLL);
          *v1 = result;
          v1[1] = 0;
          v23 = *((unsigned int *)v1 + 4);
          if ((_DWORD)v23)
          {
            v24 = 48 * v23;
            v25 = (_QWORD *)(result + 16);
            do
            {
              *v25 = 0;
              v25[1] = -4096;
              *(v25 - 2) = off_1E813B0D0;
              *(v25 - 1) = 2;
              v25[2] = 0;
              v25 += 6;
              v24 -= 48;
            }
            while (v24);
          }
        }
        else
        {
          *v1 = 0;
          v1[1] = 0;
          *((_DWORD *)v1 + 4) = 0;
        }
      }
    }
    else
    {
      if (v3)
      {
        v4 = *(_QWORD **)result;
        v5 = *(_QWORD *)result + 48 * v3;
        do
        {
          v6 = v4[3];
          if (v6 != -4096)
          {
            if (v6 && v6 != -8192)
            {
              v7 = v4[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v7 = v4[2];
              v8 = (unint64_t *)v4[2];
              if (v8)
              {
                *v8 = *v8 & 7 | v7;
              }
              else
              {
                v9 = v4[3];
                v10 = ***(int32x2_t ****)v9;
                v11 = (unint64_t)v10[303];
                if (v11 <= v7)
                {
                  v12 = v10[305].u32[0];
                  if (v11 + 16 * v12 > v7)
                  {
                    v13 = v12 - 1;
                    LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                    result = v11 + 16 * v14;
                    v15 = *(_QWORD **)result;
                    if (v9 == *(_QWORD *)result)
                    {
LABEL_19:
                      *(_QWORD *)result = -8192;
                      v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                      v9 = v4[3];
                    }
                    else
                    {
                      result = 1;
                      while (v15 != (_QWORD *)-4096)
                      {
                        v16 = v14 + result;
                        result = (result + 1);
                        v14 = v16 & v13;
                        v15 = *(_QWORD **)(v11 + 16 * v14);
                        if ((_QWORD *)v9 == v15)
                        {
                          result = v11 + 16 * v14;
                          goto LABEL_19;
                        }
                      }
                    }
                    *(_BYTE *)(v9 + 17) &= ~1u;
                  }
                }
              }
            }
            v4[3] = -4096;
          }
          v4[4] = 0;
          v4 += 6;
        }
        while (v4 != (_QWORD *)v5);
      }
      v1[1] = 0;
    }
  }
  return result;
}

void sub_1C4F3333C(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if ((_DWORD)v3)
      {
        v4 = 40 * v3;
        v5 = *(_QWORD *)a1 + 24;
        do
        {
          v6 = *(_QWORD *)(v5 - 24);
          if (v6 != -4096)
          {
            if (v6 != -8192)
            {
              v7 = *(void **)(v5 - 16);
              if ((void *)v5 != v7)
                free(v7);
            }
            *(_QWORD *)(v5 - 24) = -4096;
          }
          v5 += 40;
          v4 -= 40;
        }
        while (v4);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      sub_1C4F5D6A0(a1);
    }
  }
}

void sub_1C4F333F4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C4F5DA54(a1);
      v8 = 1 << (33 - __clz(v2 - 1));
      if (v8 <= 64)
        v8 = 64;
      if (v2)
        v9 = v8;
      else
        v9 = 0;
      if ((_DWORD)v9 == *(_DWORD *)(a1 + 16))
      {
        *(_QWORD *)(a1 + 8) = 0;
        if ((_DWORD)v9)
        {
          v10 = *(_QWORD **)a1;
          v11 = 96 * v9;
          do
          {
            *v10 = -4096;
            v10 += 12;
            v11 -= 96;
          }
          while (v11);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
        if ((_DWORD)v9)
        {
          v12 = (4 * (int)v9 / 3u + 1) | ((unint64_t)(4 * (int)v9 / 3u + 1) >> 1);
          v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
          LODWORD(v13) = (((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8)) + 1;
          *(_DWORD *)(a1 + 16) = v13;
          v14 = operator new(96 * v13, (std::align_val_t)8uLL);
          *(_QWORD *)a1 = v14;
          *(_QWORD *)(a1 + 8) = 0;
          v15 = *(unsigned int *)(a1 + 16);
          if ((_DWORD)v15)
          {
            v16 = 96 * v15;
            do
            {
              *v14 = -4096;
              v14 += 12;
              v16 -= 96;
            }
            while (v16);
          }
        }
        else
        {
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 16) = 0;
        }
      }
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = 96 * v3;
        v5 = *(_QWORD *)a1 + 64;
        do
        {
          v6 = *(_QWORD *)(v5 - 64);
          if (v6 != -4096)
          {
            if (v6 != -8192)
            {
              v7 = *(void **)(v5 - 16);
              if ((void *)v5 != v7)
                free(v7);
              if ((*(_BYTE *)(v5 - 56) & 1) == 0)
                MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 - 48), 8);
            }
            *(_QWORD *)(v5 - 64) = -4096;
          }
          v5 += 96;
          v4 -= 96;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
}

void llvm::ScalarEvolution::forgetLoop(int32x2_t *this, const llvm::Loop *a2)
{
  unsigned int v3;
  uint64_t v4;
  __int32 v5;
  int32x2_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  unsigned __int32 v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int32 v35;
  int32x2_t v36;
  __int32 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  __int32 v43;
  int32x2_t v44;
  __int32 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[128];
  void *v63;
  uint64_t v64;
  _BYTE v65[128];
  void *v66;
  uint64_t v67;
  _BYTE v68[256];
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[18];

  v71[16] = *MEMORY[0x1E0C80C00];
  v69 = v71;
  v70 = 0x1000000000;
  v71[0] = a2;
  v66 = v68;
  v67 = 0x2000000000;
  v58 = v62;
  v59 = v62;
  v60 = 16;
  v61 = 0;
  v63 = v65;
  v3 = 1;
  v64 = 0x1000000000;
  do
  {
    v4 = v69[v3 - 1];
    LODWORD(v70) = v3 - 1;
    llvm::ScalarEvolution::forgetBackedgeTakenCounts((llvm::ScalarEvolution *)this, v4, 0);
    llvm::ScalarEvolution::forgetBackedgeTakenCounts((llvm::ScalarEvolution *)this, v4, 1);
    v5 = this[124].i32[0];
    v6 = this[123];
    v7 = this[125].u32[0];
    v8 = (_QWORD *)(*(_QWORD *)&v6 + (v7 << 6));
    if (v5)
    {
      if (this[125].i32[0])
      {
        v9 = v7 << 6;
        v10 = (_QWORD *)this[123];
        while (1)
        {
          v11 = v10[1];
          if ((*v10 != -4096 || v11 != -4096) && (*v10 != -8192 || v11 != -8192))
            break;
          v10 += 8;
          v9 -= 64;
          if (!v9)
            goto LABEL_10;
        }
      }
      else
      {
        v10 = (_QWORD *)this[123];
      }
    }
    else
    {
LABEL_10:
      v10 = (_QWORD *)(*(_QWORD *)&v6 + (v7 << 6));
    }
    if (v10 != (_QWORD *)(*(_QWORD *)&v6 + (v7 << 6)))
    {
      do
      {
        v12 = v10 + 8;
        if (v10[1] == v4)
        {
          v14 = v8;
          if (v12 != v8)
          {
            while (1)
            {
              v15 = v12[1];
              if ((*v12 != -4096 || v15 != -4096) && (*v12 != -8192 || v15 != -8192))
                break;
              v12 += 8;
              if (v12 == v8)
              {
                v14 = v8;
                goto LABEL_30;
              }
            }
            v14 = v12;
          }
LABEL_30:
          v16 = (_QWORD *)v10[3];
          if (v16 != v10 + 5)
          {
            free(v16);
            v5 = this[124].i32[0];
            v6 = this[123];
            v7 = this[125].u32[0];
          }
          *v10 = -8192;
          v10[1] = -8192;
          this[124].i32[0] = --v5;
          ++this[124].i32[1];
        }
        else
        {
          while (1)
          {
            if (v12 == v8)
            {
              v14 = v8;
              goto LABEL_33;
            }
            v13 = v12[1];
            if ((*v12 != -4096 || v13 != -4096) && (*v12 != -8192 || v13 != -8192))
              break;
            v12 += 8;
          }
          v14 = v12;
        }
LABEL_33:
        v10 = v14;
      }
      while (v14 != (_QWORD *)(*(_QWORD *)&v6 + (v7 << 6)));
    }
    v17 = (uint64_t)this[120];
    v18 = this[122].u32[0];
    v19 = sub_1C4F32F2C(v17, v18, v4);
    if ((uint64_t *)(v17 + 56 * v18) != v19)
      sub_1C4F33D14((unsigned int *)&v63, (uint64_t)v63 + 8 * v64, (char *)v19[1], (char *)(v19[1] + 8 * *((unsigned int *)v19 + 4)));
    if (*(_QWORD *)(**(_QWORD **)(v4 + 32) + 40) != **(_QWORD **)(v4 + 32) + 40)
    {
      for (i = *(_QWORD *)(**(_QWORD **)(v4 + 32) + 48); ; i = *(_QWORD *)(v21 + 32))
      {
        v21 = i - 24;
        v22 = i ? i - 24 : 0;
        if (!i || *(_BYTE *)(v22 + 16) != 83)
          break;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v58, i - 24);
        if (v23)
        {
          v24 = v67;
          if (v67 >= (unint64_t)HIDWORD(v67))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v67 + 1, 8);
            v24 = v67;
          }
          *((_QWORD *)v66 + v24) = v21;
          LODWORD(v67) = v67 + 1;
        }
      }
    }
    while ((_DWORD)v67)
    {
      v25 = *((_QWORD *)v66 + v67 - 1);
      LODWORD(v67) = v67 - 1;
      v26 = this[13];
      v27 = this[15].u32[0];
      if (!v27)
        goto LABEL_54;
      v28 = ((v25 >> 4) ^ (v25 >> 9)) & (v27 - 1);
      v29 = *(_QWORD *)&v26 + 48 * v28;
      v30 = *(_QWORD *)(v29 + 24);
      if (v25 != v30)
      {
        v31 = 1;
        while (v30 != -4096)
        {
          v32 = v28 + v31++;
          v28 = v32 & (v27 - 1);
          v29 = *(_QWORD *)&v26 + 48 * v28;
          v30 = *(_QWORD *)(v29 + 24);
          if (v25 == v30)
            goto LABEL_55;
        }
LABEL_54:
        v29 = *(_QWORD *)&v26 + 48 * v27;
      }
LABEL_55:
      if (v29 != *(_QWORD *)&v26 + 48 * v27)
      {
        llvm::ScalarEvolution::eraseValueFromMap((llvm::ScalarEvolution *)this, *(llvm::Value **)(v29 + 24));
        v33 = *(_QWORD *)(v29 + 40);
        v34 = v64;
        if (v64 >= (unint64_t)HIDWORD(v64))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
          v34 = v64;
        }
        *((_QWORD *)v63 + v34) = v33;
        LODWORD(v64) = v64 + 1;
        if (*(_BYTE *)(v25 + 16) == 83)
        {
          if (v25)
          {
            v35 = this[79].i32[0];
            if (v35)
            {
              v36 = this[77];
              v37 = v35 - 1;
              LODWORD(v38) = (v35 - 1) & ((v25 >> 4) ^ (v25 >> 9));
              v39 = (uint64_t *)(*(_QWORD *)&v36 + 16 * v38);
              v40 = *v39;
              if (v25 == *v39)
              {
LABEL_67:
                *v39 = -8192;
                this[78] = vadd_s32(this[78], (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                v41 = 1;
                while (v40 != -4096)
                {
                  v42 = v38 + v41++;
                  v38 = v42 & v37;
                  v40 = *(_QWORD *)(*(_QWORD *)&v36 + 16 * v38);
                  if (v25 == v40)
                  {
                    v39 = (uint64_t *)(*(_QWORD *)&v36 + 16 * v38);
                    goto LABEL_67;
                  }
                }
              }
            }
          }
        }
      }
      sub_1C4F33E90(*(void **)(v25 + 8), (uint64_t)&v66, (llvm::SmallPtrSetImplBase *)&v58);
    }
    v43 = this[91].i32[0];
    if (v43)
    {
      v44 = this[89];
      v45 = v43 - 1;
      LODWORD(v46) = (v43 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v47 = (uint64_t *)(*(_QWORD *)&v44 + 16 * v46);
      v48 = *v47;
      if (v4 == *v47)
      {
LABEL_75:
        *v47 = -8192;
        this[90] = vadd_s32(this[90], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v49 = 1;
        while (v48 != -4096)
        {
          v50 = v46 + v49++;
          v46 = v50 & v45;
          v48 = *(_QWORD *)(*(_QWORD *)&v44 + 16 * v46);
          if (v4 == v48)
          {
            v47 = (uint64_t *)(*(_QWORD *)&v44 + 16 * v46);
            goto LABEL_75;
          }
        }
      }
    }
    v51 = *(char **)(v4 + 8);
    v52 = *(char **)(v4 + 16);
    v53 = v52 - v51;
    v54 = v70;
    v55 = v70 + ((v52 - v51) >> 3);
    if (v55 > HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v55, 8);
      v54 = v70;
    }
    if (v51 != v52)
    {
      v56 = &v69[v54];
      do
      {
        v57 = *(_QWORD *)v51;
        v51 += 8;
        *v56++ = v57;
      }
      while (v51 != v52);
    }
    v3 = v54 + (v53 >> 3);
    LODWORD(v70) = v3;
  }
  while (v3);
  llvm::ScalarEvolution::forgetMemoizedResults(this, (uint64_t *)v63, v64);
  if (v63 != v65)
    free(v63);
  if (v59 != v58)
    free(v59);
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
}

int32x2_t llvm::ScalarEvolution::forgetBackedgeTakenCounts(llvm::ScalarEvolution *this, uint64_t a2, int a3)
{
  uint64_t v6;
  int32x2_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  int32x2_t result;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;

  v6 = 544;
  if (a3)
  {
    v6 = 568;
    v7 = (int32x2_t *)((char *)this + 568);
  }
  else
  {
    v7 = (int32x2_t *)((char *)this + 544);
  }
  v8 = *(_QWORD *)((char *)this + v6);
  v9 = v7[2].u32[0];
  v10 = sub_1C4F32EC8(v8, v9, a2);
  if ((uint64_t *)(v8 + 144 * v9) != v10)
  {
    v12 = v10;
    v13 = (uint64_t *)v10[1];
    v14 = *((_DWORD *)v12 + 4);
    if (v14)
    {
      v15 = 4;
      if (!a3)
        v15 = 0;
      v16 = a2 & 0xFFFFFFFFFFFFFFFBLL | v15;
      v17 = 88 * v14;
      v18 = v13 + 1;
      do
      {
        if (*(_WORD *)(*v18 + 24))
        {
          v19 = sub_1C4F4C0E0(*((_QWORD *)this + 74), *((_DWORD *)this + 152), *v18);
          v20 = sub_1C477672C((uint64_t)(v19 + 1), v16);
          v21 = v19[2];
          v22 = v21 == v19[1] ? 28 : 24;
          if (v20 != (_QWORD *)(v21 + 8 * *(unsigned int *)((char *)v19 + v22)))
          {
            *v20 = -2;
            ++*((_DWORD *)v19 + 8);
          }
        }
        v18 += 11;
        v17 -= 88;
      }
      while (v17);
      v13 = (uint64_t *)v12[1];
      v23 = *((_DWORD *)v12 + 4);
      if (v23)
      {
        v24 = 11 * v23;
        do
        {
          if (v13[v24 - 7] != v13[v24 - 8])
          {
            v25 = v13;
            free((void *)v13[v24 - 7]);
            v13 = v25;
          }
          v24 -= 11;
        }
        while (v24 * 8);
        v13 = (uint64_t *)v12[1];
      }
    }
    if (v13 != v12 + 3)
      free(v13);
    *v12 = -8192;
    result = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v7[1] = result;
  }
  return result;
}

unsigned int *sub_1C4F33D14(unsigned int *result, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a3;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  v9 = result[3];
  v10 = a4 - a3;
  v11 = v8 + ((a4 - a3) >> 3);
  if (*(_QWORD *)result + 8 * v8 == a2)
  {
    if (v11 > v9)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11, 8);
      v8 = v6[2];
      v7 = *(_QWORD *)v6;
    }
    if (v5 != a4)
    {
      v20 = (_QWORD *)(v7 + 8 * v8);
      do
      {
        v21 = *(_QWORD *)v5;
        v5 += 8;
        *v20++ = v21;
      }
      while (v5 != a4);
    }
    v6[2] = v8 + ((unint64_t)v10 >> 3);
  }
  else
  {
    v12 = (a2 - v7) >> 3;
    v13 = v10 >> 3;
    if (v11 > v9)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11, 8);
      v7 = *(_QWORD *)v6;
      v8 = v6[2];
    }
    v14 = (char *)(v7 + 8 * v12);
    v15 = (char *)(v7 + 8 * v8);
    v16 = (v15 - v14) >> 3;
    if (v16 >= v13)
    {
      result = sub_1C6177054(v6, &v15[-8 * v13], (char *)(v7 + 8 * v8));
      if (&v15[-8 * v13] != v14)
        result = (unsigned int *)memmove(&v14[8 * v13], v14, &v15[-8 * v13] - v14);
      while (v5 != a4)
      {
        v22 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v14 = v22;
        v14 += 8;
      }
    }
    else
    {
      v17 = v8 + ((unint64_t)v10 >> 3);
      v6[2] = v17;
      if (v12 != v8)
      {
        result = (unsigned int *)memcpy((void *)(v7 + 8 * v17 - 8 * v16), (const void *)(v7 + 8 * v12), v15 - v14);
        do
        {
          v18 = *(_QWORD *)v5;
          v5 += 8;
          *(_QWORD *)v14 = v18;
          v14 += 8;
          --v16;
        }
        while (v16);
      }
      while (v5 != a4)
      {
        v19 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v15 = v19;
        v15 += 8;
      }
    }
  }
  return result;
}

void *sub_1C4F33E90(void *result, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;

  if (result)
  {
    v5 = (uint64_t)result;
    v6 = a2 + 16;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      result = sub_1C4774094(this, v7);
      if (v8)
      {
        v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(unsigned int *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v9 + 1, 8);
          v9 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v7;
        ++*(_DWORD *)(a2 + 8);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  return result;
}

void llvm::ScalarEvolution::forgetTopmostLoop(int32x2_t *this, const llvm::Loop **a2)
{
  const llvm::Loop *v2;

  do
  {
    v2 = (const llvm::Loop *)a2;
    a2 = (const llvm::Loop **)*a2;
  }
  while (a2);
  llvm::ScalarEvolution::forgetLoop(this, v2);
}

void llvm::ScalarEvolution::forgetValue(int32x2_t *this, llvm::Value *a2)
{
  unsigned int v3;
  uint64_t v4;
  int32x2_t v5;
  unsigned __int32 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  int32x2_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[64];
  void *v27;
  uint64_t v28;
  _BYTE v29[64];
  void *v30;
  uint64_t v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    v30 = v32;
    v22 = v26;
    v23 = v26;
    v24 = 8;
    v25 = 0;
    v27 = v29;
    v28 = 0x800000000;
    v32[0] = a2;
    v31 = 0x1000000001;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, (uint64_t)a2);
    v3 = v31;
    while ((_DWORD)v31)
    {
      v4 = *((_QWORD *)v30 + v3 - 1);
      LODWORD(v31) = v3 - 1;
      v5 = this[13];
      v6 = this[15].u32[0];
      if (v6)
      {
        v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v6 - 1);
        v8 = *(_QWORD *)&v5 + 48 * v7;
        v9 = *(_QWORD *)(v8 + 24);
        if (v4 == v9)
          goto LABEL_11;
        v10 = 1;
        while (v9 != -4096)
        {
          v11 = v7 + v10++;
          v7 = v11 & (v6 - 1);
          v8 = *(_QWORD *)&v5 + 48 * v7;
          v9 = *(_QWORD *)(v8 + 24);
          if (v4 == v9)
            goto LABEL_11;
        }
      }
      v8 = *(_QWORD *)&v5 + 48 * v6;
LABEL_11:
      if (v8 != *(_QWORD *)&v5 + 48 * v6)
      {
        llvm::ScalarEvolution::eraseValueFromMap((llvm::ScalarEvolution *)this, *(llvm::Value **)(v8 + 24));
        v12 = *(_QWORD *)(v8 + 40);
        v13 = v28;
        if (v28 >= (unint64_t)HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
          v13 = v28;
        }
        *((_QWORD *)v27 + v13) = v12;
        LODWORD(v28) = v28 + 1;
        if (*(_BYTE *)(v4 + 16) == 83)
        {
          if (v4)
          {
            v14 = this[79].i32[0];
            if (v14)
            {
              v15 = this[77];
              v16 = v14 - 1;
              LODWORD(v17) = (v14 - 1) & ((v4 >> 4) ^ (v4 >> 9));
              v18 = (uint64_t *)(*(_QWORD *)&v15 + 16 * v17);
              v19 = *v18;
              if (v4 == *v18)
              {
LABEL_24:
                *v18 = -8192;
                this[78] = vadd_s32(this[78], (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                v20 = 1;
                while (v19 != -4096)
                {
                  v21 = v17 + v20++;
                  v17 = v21 & v16;
                  v19 = *(_QWORD *)(*(_QWORD *)&v15 + 16 * v17);
                  if (v4 == v19)
                  {
                    v18 = (uint64_t *)(*(_QWORD *)&v15 + 16 * v17);
                    goto LABEL_24;
                  }
                }
              }
            }
          }
        }
      }
      sub_1C4F33E90(*(void **)(v4 + 8), (uint64_t)&v30, (llvm::SmallPtrSetImplBase *)&v22);
      v3 = v31;
    }
    llvm::ScalarEvolution::forgetMemoizedResults(this, (uint64_t *)v27, v28);
    if (v27 != v29)
      free(v27);
    if (v23 != v22)
      free(v23);
    if (v30 != v32)
      free(v30);
  }
}

void llvm::ScalarEvolution::forgetLoopDispositions(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  sub_1C4F3333C((_DWORD *)this + 172);
}

uint64_t llvm::ScalarEvolution::computeSymbolicMaxBackedgeTakenCount(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  const llvm::Loop **BackedgeTakenInfo;
  unsigned int v8;
  uint64_t *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const llvm::Loop **v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t UMinFromMismatchedTypes;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x1000000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a2, (uint64_t)&v25);
  v22 = v24;
  v23 = 0x400000000;
  if (!(_DWORD)v26)
    goto LABEL_24;
  v4 = (uint64_t *)v25;
  v5 = (char *)v25 + 8 * v26;
  do
  {
    v6 = *v4;
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
    v8 = *((_DWORD *)BackedgeTakenInfo + 2);
    v9 = (uint64_t *)((char *)this + 48);
    if (v8)
    {
      v10 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
      v11 = 88 * v8;
      do
      {
        if (*((_QWORD *)v10 - 6) == v6 && *(v10 - 1) == *v10)
        {
          v9 = (uint64_t *)(v10 - 10);
          goto LABEL_8;
        }
        v10 += 22;
        v11 -= 88;
      }
      while (v11);
      v9 = (uint64_t *)((char *)this + 48);
    }
LABEL_8:
    v12 = *v9;
    if (*(_WORD *)(v12 + 24) != 15)
      goto LABEL_9;
    v14 = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
    v15 = *((_DWORD *)v14 + 2);
    v16 = (uint64_t *)((char *)this + 48);
    if (v15)
    {
      v19 = (_DWORD *)((char *)*v14 + 48);
      v20 = 88 * v15;
      while (*((_QWORD *)v19 - 6) != v6 || *(v19 - 1) != *v19)
      {
        v19 += 22;
        v20 -= 88;
        if (!v20)
        {
          v16 = (uint64_t *)((char *)this + 48);
          goto LABEL_15;
        }
      }
      v16 = (uint64_t *)(v19 - 8);
    }
LABEL_15:
    v12 = *v16;
    if (*(_WORD *)(v12 + 24) != 15)
    {
LABEL_9:
      v13 = v23;
      if (v23 >= (unint64_t)HIDWORD(v23))
      {
        v21 = v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
        v12 = v21;
        v13 = v23;
      }
      *((_QWORD *)v22 + v13) = v12;
      LODWORD(v23) = v23 + 1;
    }
    ++v4;
  }
  while (v4 != (uint64_t *)v5);
  if ((_DWORD)v23)
    UMinFromMismatchedTypes = llvm::ScalarEvolution::getUMinFromMismatchedTypes((uint64_t)this, &v22, 0);
  else
LABEL_24:
    UMinFromMismatchedTypes = *((_QWORD *)this + 6);
  if (v22 != v24)
    free(v22);
  if (v25 != v27)
    free(v25);
  return UMinFromMismatchedTypes;
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(llvm::ScalarEvolution::ExitLimit *this, const llvm::SCEV *a2)
{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a2, 0, 0, 0);
}

{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a2, 0, 0, 0);
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  llvm::SmallPtrSetImplBase *v9;
  uint64_t v11;
  llvm::APInt *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  *(_BYTE *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a1 + 56;
  v9 = (llvm::SmallPtrSetImplBase *)(a1 + 24);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 32) = a1 + 56;
  *(_QWORD *)(a1 + 40) = 4;
  *(_DWORD *)(a1 + 48) = 0;
  if (a3 && !*(_WORD *)(a3 + 24))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v12 = (llvm::APInt *)(v11 + 24);
    v13 = *(_DWORD *)(v11 + 32);
    if (v13 >= 0x41)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v12) != v13)
        goto LABEL_8;
    }
    else if (*(_QWORD *)v12)
    {
      goto LABEL_8;
    }
    *(_QWORD *)a1 = a3;
  }
LABEL_8:
  if (a6)
  {
    v14 = a5 + 8 * a6;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)a5 + 8);
      if (v15 == **(_QWORD **)a5)
        v16 = 20;
      else
        v16 = 16;
      v17 = *(unsigned int *)(*(_QWORD *)a5 + v16);
      if ((_DWORD)v17)
      {
        v18 = 8 * v17;
        v19 = *(uint64_t **)(*(_QWORD *)a5 + 8);
        while ((unint64_t)*v19 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v19;
          v18 -= 8;
          if (!v18)
            goto LABEL_25;
        }
      }
      else
      {
        v19 = *(uint64_t **)(*(_QWORD *)a5 + 8);
      }
      v20 = (_QWORD *)(v15 + 8 * v17);
      if (v19 != v20)
      {
        v21 = *v19;
LABEL_21:
        sub_1C4774094(v9, v21);
        v22 = (unint64_t *)(v19 + 1);
        while (v22 != v20)
        {
          v23 = *v22++;
          v21 = v23;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v19 = (uint64_t *)(v22 - 1);
            goto LABEL_21;
          }
        }
      }
LABEL_25:
      a5 += 8;
    }
    while (a5 != v14);
  }
  return a1;
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = a5;
  return llvm::ScalarEvolution::ExitLimit::ExitLimit(a1, a2, a3, a4, (uint64_t)v6, 1);
}

{
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = a5;
  return llvm::ScalarEvolution::ExitLimit::ExitLimit(a1, a2, a3, a4, (uint64_t)v6, 1);
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(llvm::ScalarEvolution::ExitLimit *this, const llvm::SCEV *a2, const llvm::SCEV *a3, char a4)
{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, 0, 0);
}

{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, 0, 0);
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::BackedgeTakenInfo(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, char a6)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  const void *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  char *v32;
  _QWORD v33[3];
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  int v37;
  int v38;
  _BYTE v39[32];

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  *(_QWORD *)(a1 + 104) = a5;
  *(_BYTE *)(a1 + 112) = a4;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = a6;
  if (a3 >= 2)
  {
    sub_1C4F56EF4(a1, a3);
  }
  else if (!a3)
  {
    return a1;
  }
  v10 = (_DWORD *)(a2 + 56);
  v11 = 96 * a3;
  do
  {
    v12 = *((_QWORD *)v10 - 6);
    v33[0] = *((_QWORD *)v10 - 7);
    v33[1] = v12;
    v33[2] = v12;
    v34 = v39;
    v13 = (const void *)*((_QWORD *)v10 - 2);
    if (v13 == *((const void **)v10 - 3))
    {
      v35 = v39;
      v14 = v39;
      v15 = v13;
    }
    else
    {
      v29 = *(v10 - 2);
      v14 = malloc_type_malloc(8 * v29, 0x4065EBACuLL);
      if (!v14 && ((_DWORD)v29 || (v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v35 = v14;
      v15 = (const void *)*((_QWORD *)v10 - 3);
      v13 = (const void *)*((_QWORD *)v10 - 2);
    }
    v16 = *(v10 - 2);
    v36 = v16;
    v17 = *(v10 - 1);
    if (v13 == v15)
      v18 = *(v10 - 1);
    else
      v18 = v16;
    if (v18)
    {
      memmove(v14, v13, 8 * v18);
      v17 = *(v10 - 1);
    }
    v37 = v17;
    v38 = *v10;
    v19 = *(unsigned int *)(a1 + 8);
    v20 = *(_QWORD *)a1;
    v21 = (char *)v33;
    if (v19 >= *(_DWORD *)(a1 + 12))
    {
      v30 = v19 + 1;
      v31 = v20 + 88 * v19 > (unint64_t)v33;
      if (v20 <= (unint64_t)v33 && v31)
      {
        v32 = (char *)v33 - v20;
        sub_1C4F56EF4(a1, v30);
        v20 = *(_QWORD *)a1;
        v21 = &v32[*(_QWORD *)a1];
      }
      else
      {
        sub_1C4F56EF4(a1, v30);
        v20 = *(_QWORD *)a1;
        v21 = (char *)v33;
      }
    }
    v22 = v20 + 88 * *(unsigned int *)(a1 + 8);
    v23 = *(_OWORD *)v21;
    *(_QWORD *)(v22 + 16) = *((_QWORD *)v21 + 2);
    *(_OWORD *)v22 = v23;
    v24 = (void *)(v22 + 56);
    *(_QWORD *)(v22 + 24) = v22 + 56;
    v25 = v22 + 24;
    v27 = *((_QWORD *)v21 + 3);
    v26 = *((_QWORD *)v21 + 4);
    if (v26 == v27)
    {
      *(_QWORD *)(v25 + 8) = v24;
      v28 = *((unsigned int *)v21 + 11);
      if ((_DWORD)v28)
        memmove(v24, *((const void **)v21 + 4), 8 * v28);
    }
    else
    {
      *(_QWORD *)(v25 + 8) = v26;
      *((_QWORD *)v21 + 4) = v27;
    }
    *(_QWORD *)(v25 + 16) = *((_QWORD *)v21 + 5);
    *(_DWORD *)(v25 + 24) = *((_DWORD *)v21 + 12);
    *((_QWORD *)v21 + 5) = 4;
    *((_DWORD *)v21 + 12) = 0;
    ++*(_DWORD *)(a1 + 8);
    if (v35 != v34)
      free(v35);
    v10 += 24;
    v11 -= 96;
  }
  while (v11);
  return a1;
}

void llvm::ScalarEvolution::computeExitLimit(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, llvm::BasicBlock *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t LoopLatch;
  uint64_t ExitingBlock;
  _DWORD *v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ConstantInt **v23;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  llvm::BasicBlock *v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  llvm::BasicBlock *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::SwitchInst *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[50];
  BOOL v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
  if (!LoopLatch)
    goto LABEL_23;
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 4), (uint64_t)a3, LoopLatch))
    goto LABEL_23;
  ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a2);
  v12 = (_DWORD *)*((_QWORD *)a3 + 5);
  if (v12 == (_DWORD *)((char *)a3 + 40))
    goto LABEL_23;
  v13 = ExitingBlock;
  v14 = v12 == 0;
  if (v12)
    v15 = (unsigned __int8 *)(v12 - 6);
  else
    v15 = 0;
  v16 = v15[16] - 40;
  if (v16 >= 0xFFFFFFF5)
    v17 = v15;
  else
    v17 = 0;
  v18 = v17[16];
  if (v16 < 0xFFFFFFF5)
    v14 = 1;
  if (v18 == 30 && !v14)
  {
    v19 = sub_1C477672C((uint64_t)a2 + 56, *((_QWORD *)v17 - 4));
    v20 = *((_QWORD *)a2 + 8);
    v21 = 72;
    if (v20 == *((_QWORD *)a2 + 7))
      v21 = 76;
    v22 = *(unsigned int *)((char *)a2 + v21);
    v23 = (llvm::ConstantInt **)*((_QWORD *)v17 - 12);
    v44[0] = 1;
    for (i = 1; i != 49; i += 12)
      v44[i] = -4;
    v44[49] = a2;
    v45 = v19 == (_QWORD *)(v20 + 8 * v22);
    v46 = a4;
    llvm::ScalarEvolution::computeExitLimitFromCondCached(a5, this, (llvm::ScalarEvolution::ExitLimitCache *)v44, a2, v23, v45, v13 != 0, a4);
    sub_1C4F56FF4((int *)v44);
    return;
  }
  if (v18 != 31 || v14)
  {
LABEL_23:
    v26 = *((_QWORD *)this + 6);
    v27 = (uint64_t)a5;
    goto LABEL_24;
  }
  v28 = *((unsigned __int8 *)v12 - 8);
  v29 = v28 - 29;
  v42 = ExitingBlock;
  v43 = (uint64_t)a5;
  v41 = (llvm::SwitchInst *)v17;
  if (v28 != 30)
  {
    v30 = 2;
    v37 = 0;
    switch(v29)
    {
      case 0:
      case 5:
      case 6:
        break;
      case 1:
        __break(1u);
        goto LABEL_46;
      case 2:
        v30 = (*(v12 - 1) >> 1) & 0x3FFFFFF;
        goto LABEL_43;
      case 3:
      case 9:
LABEL_46:
        v30 = (*(v12 - 1) & 0x7FFFFFF) - 1;
        goto LABEL_43;
      case 4:
        goto LABEL_29;
      case 7:
        v30 = *((_WORD *)v12 - 3) & 1;
        goto LABEL_43;
      case 8:
        v30 = 1;
        goto LABEL_29;
      case 10:
        v30 = v12[14] + 1;
LABEL_43:
        if (!v30)
          goto LABEL_44;
        goto LABEL_29;
      default:
LABEL_44:
        v37 = 0;
        break;
    }
LABEL_41:
    llvm::ScalarEvolution::computeExitLimitFromSingleExitSwitch(this, a2, v41, v37, v42 != 0, v43);
    return;
  }
  if ((*(v12 - 1) & 0x7FFFFFF) == 3)
    v30 = 2;
  else
    v30 = 1;
LABEL_29:
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v12 - 22;
  v35 = v30;
  while (1)
  {
    v36 = *((unsigned __int8 *)v12 - 8);
    if (v36 != 30)
      __asm { BR              X9 }
    v37 = *(llvm::BasicBlock **)&v12[-8 * v32 - 14];
    v38 = sub_1C477672C((uint64_t)a2 + 56, (uint64_t)v37);
    v39 = *((_QWORD *)a2 + 8);
    v40 = 72;
    if (v39 == *((_QWORD *)a2 + 7))
      v40 = 76;
    if (v38 == (_QWORD *)(v39 + 8 * *(unsigned int *)((char *)a2 + v40)))
      break;
    v37 = v33;
LABEL_36:
    ++v32;
    v31 += 2;
    v34 += 8;
    v33 = v37;
    if (v35 == v32)
      goto LABEL_41;
  }
  if (!v33)
    goto LABEL_36;
  v26 = *((_QWORD *)this + 6);
  v27 = v43;
LABEL_24:
  llvm::ScalarEvolution::ExitLimit::ExitLimit(v27, v26, v26, 0, 0, 0);
}

int *llvm::ScalarEvolution::computeExitLimitFromCond@<X0>(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, llvm::ConstantInt **a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t i;
  _QWORD v9[50];
  char v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9[0] = 1;
  for (i = 1; i != 49; i += 12)
    v9[i] = -4;
  v9[49] = a2;
  v10 = a4;
  v11 = a6;
  llvm::ScalarEvolution::computeExitLimitFromCondCached(a7, this, (llvm::ScalarEvolution::ExitLimitCache *)v9, a2, a3, a4, a5, a6);
  return sub_1C4F56FF4((int *)v9);
}

void llvm::ScalarEvolution::computeExitLimitFromSingleExitSwitch(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, llvm::SwitchInst *a3@<X2>, llvm::BasicBlock *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  llvm::BasicBlock **v13;
  llvm::Value *v14;
  const llvm::SCEV *ExistingSCEV;
  const llvm::SCEV *SCEVAtScope;
  llvm::ConstantInt *v17;
  unint64_t Constant;
  const llvm::SCEV *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  __int128 v25;
  char v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;

  v12 = *((_DWORD *)a3 + 5);
  if ((v12 & 0x40000000) != 0)
    v13 = (llvm::BasicBlock **)*((_QWORD *)a3 - 1);
  else
    v13 = (llvm::BasicBlock **)((char *)a3 - 32 * (v12 & 0x7FFFFFF));
  if (v13[4] == a4)
  {
    llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, *((_QWORD *)this + 6), *((_QWORD *)this + 6), 0, 0, 0);
  }
  else
  {
    v14 = *v13;
    ExistingSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getExistingSCEV((uint64_t)this, (uint64_t)*v13);
    if (!ExistingSCEV)
      ExistingSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v14);
    SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(this, ExistingSCEV, a2);
    v17 = (llvm::ConstantInt *)sub_1C4F3EF30((uint64_t)a3, (uint64_t)a4);
    Constant = llvm::ScalarEvolution::getConstant(this, v17);
    llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, (uint64_t)SCEVAtScope, Constant);
    llvm::ScalarEvolution::howFarToZero(this, v19, (const llvm::Loop **)a2, a5, 0, (uint64_t)&v25);
    if (*(_WORD *)(v25 + 24) == 15 && *(_WORD *)(*((_QWORD *)&v25 + 1) + 24) == 15)
    {
      llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, *((_QWORD *)this + 6), *((_QWORD *)this + 6), 0, 0, 0);
      v21 = v27;
      v20 = v28;
    }
    else
    {
      *(_OWORD *)a6 = v25;
      *(_BYTE *)(a6 + 16) = v26;
      v22 = (void *)(a6 + 56);
      *(_QWORD *)(a6 + 24) = a6 + 56;
      v21 = v27;
      v20 = v28;
      if (v28 == v27)
      {
        *(_QWORD *)(a6 + 32) = v22;
        v23 = HIDWORD(v29);
        if (HIDWORD(v29))
          memmove(v22, v20, 8 * HIDWORD(v29));
      }
      else
      {
        *(_QWORD *)(a6 + 32) = v28;
        v28 = v21;
        v20 = v21;
        v23 = HIDWORD(v29);
      }
      v24 = v30;
      *(_DWORD *)(a6 + 40) = v29;
      *(_DWORD *)(a6 + 44) = v23;
      *(_DWORD *)(a6 + 48) = v24;
      v29 = 4;
      v30 = 0;
    }
    if (v20 != v21)
      free(v20);
  }
}

void llvm::ScalarEvolution::computeExitLimitFromCondCached(uint64_t *__return_ptr a1@<X8>, llvm::ScalarEvolution *this@<X0>, llvm::ScalarEvolution::ExitLimitCache *a3@<X1>, const llvm::Loop *a4@<X2>, llvm::ConstantInt **a5@<X3>, unsigned int a6@<W4>, int a7@<W5>, int a8@<W6>)
{
  uint64_t *v16;
  const void *v17;
  const void *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  const llvm::Loop *v23;
  unsigned int v24;
  __int128 v25;
  char v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  char v32;

  llvm::ScalarEvolution::ExitLimitCache::find(a3, (unint64_t)a5, a7, (uint64_t)&v25);
  if (v32)
  {
    *(_OWORD *)a1 = v25;
    *((_BYTE *)a1 + 16) = v26;
    v16 = a1 + 7;
    a1[3] = (uint64_t)(a1 + 7);
    v17 = v28;
    if (v28 == v27)
    {
      a1[4] = (uint64_t)v16;
      v18 = v17;
    }
    else
    {
      v24 = v29;
      v16 = (uint64_t *)malloc_type_malloc(8 * v29, 0x4065EBACuLL);
      if (!v16 && (v24 || (v16 = (uint64_t *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      a1[4] = (uint64_t)v16;
      v18 = v27;
      v17 = v28;
    }
    v20 = v29;
    v19 = v30;
    *((_DWORD *)a1 + 10) = v29;
    if (v17 == v18)
      v21 = v19;
    else
      v21 = v20;
    if (v21)
    {
      memmove(v16, v17, 8 * v21);
      v19 = v30;
    }
    v22 = v31;
    *((_DWORD *)a1 + 11) = v19;
    *((_DWORD *)a1 + 12) = v22;
    if (v32)
    {
      if (v28 != v27)
        free(v28);
    }
  }
  else
  {
    llvm::ScalarEvolution::computeExitLimitFromCondImpl(this, a3, a4, a5, a6, a7, a8, (uint64_t)a1);
    llvm::ScalarEvolution::ExitLimitCache::insert(a3, v23, (unint64_t)a5, 0, a7, 0, (const llvm::ScalarEvolution::ExitLimit *)a1);
  }
}

uint64_t llvm::ScalarEvolution::ExitLimitCache::find@<X0>(llvm::ScalarEvolution::ExitLimitCache *this@<X0>, unint64_t a2@<X2>, int a3@<W4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  char *v9;
  int v10;
  unsigned int v11;
  char *v12;
  char *v13;
  unsigned int v14;
  char v15;
  __int128 v16;
  char *v17;

  v7 = 4;
  if (!a3)
    v7 = 0;
  v17 = 0;
  result = sub_1C4F5DEC8((uint64_t)this, v7 | a2 & 0xFFFFFFFFFFFFFFFBLL, &v17);
  v9 = (char *)this + 8;
  v10 = *(_DWORD *)this;
  if ((result & 1) != 0)
  {
    v13 = v17;
  }
  else
  {
    if ((v10 & 1) != 0)
    {
      v11 = 4;
      v12 = (char *)this + 8;
    }
    else
    {
      v12 = (char *)*((_QWORD *)this + 1);
      v11 = *((_DWORD *)this + 4);
    }
    v13 = &v12[96 * v11];
  }
  if ((v10 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v9 = (char *)*((_QWORD *)this + 1);
    v14 = *((_DWORD *)this + 4);
  }
  if (&v9[96 * v14] == v13)
  {
    v15 = 0;
    *(_BYTE *)a4 = 0;
  }
  else
  {
    v16 = *(_OWORD *)(v13 + 8);
    *(_BYTE *)(a4 + 16) = v13[24];
    *(_OWORD *)a4 = v16;
    result = (uint64_t)llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(a4 + 24), (const void **)(a4 + 56), (const llvm::SmallPtrSetImplBase *)(v13 + 32));
    v15 = 1;
  }
  *(_BYTE *)(a4 + 88) = v15;
  return result;
}

void llvm::ScalarEvolution::ExitLimitCache::insert(llvm::ScalarEvolution::ExitLimitCache *this, const llvm::Loop *a2, unint64_t a3, BOOL a4, int a5, BOOL a6, const llvm::ScalarEvolution::ExitLimit *a7)
{
  uint64_t v9;
  _BYTE *v10;
  const void *v11;
  const void *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  char v24;
  _BYTE *__src;
  int v26;
  unsigned int v27;
  int v28;
  _BYTE v29[32];
  uint64_t v30;

  v9 = 4;
  if (!a5)
    v9 = 0;
  v22 = v9 | a3 & 0xFFFFFFFFFFFFFFFBLL;
  v23 = *(_OWORD *)a7;
  v24 = *((_BYTE *)a7 + 16);
  v10 = v29;
  v11 = (const void *)*((_QWORD *)a7 + 4);
  if (v11 == *((const void **)a7 + 3))
  {
    __src = v29;
    v12 = (const void *)*((_QWORD *)a7 + 4);
  }
  else
  {
    v21 = *((unsigned int *)a7 + 10);
    v10 = malloc_type_malloc(8 * v21, 0x4065EBACuLL);
    if (!v10 && ((_DWORD)v21 || (v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    __src = v10;
    v12 = (const void *)*((_QWORD *)a7 + 3);
    v11 = (const void *)*((_QWORD *)a7 + 4);
  }
  v13 = *((_DWORD *)a7 + 11);
  v26 = *((_DWORD *)a7 + 10);
  if (v11 == v12)
    v14 = *((_DWORD *)a7 + 11);
  else
    v14 = *((_DWORD *)a7 + 10);
  if (v14)
  {
    memmove(v10, v11, 8 * v14);
    v13 = *((_DWORD *)a7 + 11);
  }
  v27 = v13;
  v28 = *((_DWORD *)a7 + 12);
  v30 = 0;
  v15 = v22;
  if (!sub_1C4F5DEC8((uint64_t)this, v22, &v30))
  {
    v16 = *(_DWORD *)this >> 1;
    if ((*(_DWORD *)this & 1) != 0)
      v17 = 4;
    else
      v17 = *((_DWORD *)this + 4);
    if (4 * v16 + 4 >= 3 * v17)
    {
      v17 *= 2;
    }
    else if (v17 + ~v16 - *((_DWORD *)this + 1) > v17 >> 3)
    {
LABEL_15:
      v18 = v30;
      *(_DWORD *)this += 2;
      if (*(_QWORD *)v18 != -4)
        --*((_DWORD *)this + 1);
      *(_QWORD *)v18 = v15;
      *(_BYTE *)(v18 + 24) = v24;
      *(_OWORD *)(v18 + 8) = v23;
      v19 = (void *)(v18 + 64);
      *(_QWORD *)(v18 + 32) = v18 + 64;
      if (__src == v29)
      {
        *(_QWORD *)(v18 + 40) = v19;
        v20 = v27;
        if (v27)
          memmove(v19, __src, 8 * v27);
      }
      else
      {
        *(_QWORD *)(v18 + 40) = __src;
        __src = v29;
        v20 = v27;
      }
      *(_DWORD *)(v18 + 48) = v26;
      *(_DWORD *)(v18 + 52) = v20;
      *(_DWORD *)(v18 + 56) = v28;
      goto LABEL_21;
    }
    sub_1C4F5DF70((uint64_t)this, v17);
    v30 = 0;
    v15 = v22;
    sub_1C4F5DEC8((uint64_t)this, v22, &v30);
    goto LABEL_15;
  }
LABEL_21:
  if (__src != v29)
    free(__src);
}

void llvm::ScalarEvolution::computeExitLimitFromCondImpl(llvm::ScalarEvolution *this@<X0>, llvm::ScalarEvolution::ExitLimitCache *a2@<X1>, const llvm::Loop *a3@<X2>, llvm::ConstantInt **a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  void *v15;
  const void *v16;
  const void *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  void *v22;
  int v23;
  const void *v24;
  const void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  unint64_t Constant;
  void *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  int v41;
  const llvm::APInt *v42;
  llvm::Value *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  llvm::Value *v48;
  int v49;
  unsigned int v50;
  uint64_t SCEVIter;
  _QWORD *v52;
  int v53;
  int64_t v54;
  unint64_t v55;
  unsigned int v56;
  llvm::ValueHandleBase *v57;
  unsigned __int8 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  _QWORD *v64;
  BOOL v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  llvm::ValueHandleBase *v75;
  unsigned __int8 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  _QWORD *v82;
  BOOL v83;
  unint64_t v84;
  int *v85;
  uint64_t v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  llvm::ValueHandleBase *v96;
  llvm::ValueHandleBase *v97;
  uint64_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t __n;
  unsigned int v102;
  const llvm::SCEV *v103;
  _QWORD *v104;
  unsigned int v105;
  void *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  void *__s1;
  uint64_t v115;
  _QWORD v116[16];
  __int128 v117;
  char v118;
  const void *v119;
  const void *v120;
  uint64_t v121;
  int v122;
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  llvm::ScalarEvolution::computeExitLimitFromCondFromBinOp(this, a2, a3, a4, a5, a6, a7, (uint64_t)&v117);
  if (v123)
  {
    *(_OWORD *)a8 = v117;
    *(_BYTE *)(a8 + 16) = v118;
    v15 = (void *)(a8 + 56);
    *(_QWORD *)(a8 + 24) = a8 + 56;
    v16 = v120;
    if (v120 == v119)
    {
      *(_QWORD *)(a8 + 32) = v15;
      v17 = v16;
    }
    else
    {
      v35 = v121;
      v15 = malloc_type_malloc(8 * v121, 0x4065EBACuLL);
      if (!v15 && (v35 || (v15 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(a8 + 32) = v15;
      v17 = v119;
      v16 = v120;
    }
    v19 = v121;
    v18 = HIDWORD(v121);
    *(_DWORD *)(a8 + 40) = v121;
    if (v16 == v17)
      v20 = v18;
    else
      v20 = v19;
    if (v20)
    {
      memmove(v15, v16, 8 * v20);
      v18 = HIDWORD(v121);
    }
    v21 = v122;
    *(_DWORD *)(a8 + 44) = v18;
    *(_DWORD *)(a8 + 48) = v21;
    if (!v123)
      return;
    v22 = (void *)v120;
    if (v120 == v119)
      return;
LABEL_36:
    free(v22);
    return;
  }
  v23 = *((unsigned __int8 *)a4 + 16);
  if (!a4 || v23 != 81)
  {
    if (a4 && v23 == 16)
    {
      v26 = a4 + 3;
      if (*((_DWORD *)a4 + 8) >= 0x41u)
        v26 = (_QWORD *)*v26;
      if ((*v26 != 0) != a5)
      {
        v27 = *((_QWORD *)this + 6);
LABEL_39:
        llvm::ScalarEvolution::ExitLimit::ExitLimit(a8, v27, v27, 0, 0, 0);
        return;
      }
      Constant = llvm::ScalarEvolution::getConstant(this, *a4, 0, 0);
LABEL_38:
      v27 = Constant;
      goto LABEL_39;
    }
    v113 = 0;
    if (v23 != 92
      || *((_DWORD *)a4 + 18) != 1
      || *(_DWORD *)a4[8] != 1
      || (v28 = (uint64_t)*(a4 - 4), v29 = sub_1C4E8FD48(v28), !v28)
      || !v29
      || (v30 = *(unsigned __int8 **)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) + 32),
          *(_QWORD *)&v117 = &v113,
          *((_QWORD *)&v117 + 1) = 0,
          !sub_1C4D89F84((uint64_t)&v117, v30)))
    {
LABEL_29:
      Constant = llvm::ScalarEvolution::computeExitCountExhaustively(this, a3, (llvm::Value *)a4, a5);
      goto LABEL_38;
    }
    v36 = 13;
    v37 = *(_DWORD *)(*(_QWORD *)(v28 - 32) + 36) - 262;
    if (((1 << (*(_BYTE *)(*(_QWORD *)(v28 - 32) + 36) - 6)) & 0xC000000003) == 0)
    {
      if (((1 << v37) & 0x6000000600000) != 0)
        v36 = 15;
      else
        v36 = 17;
    }
    v38 = v37 > 0x16;
    v39 = (1 << v37) & 0x610003;
    if (v38 || v39 == 0)
      v41 = 1;
    else
      v41 = 2;
    llvm::ConstantRange::makeExactNoWrapRegion(v36, v113, v41, (uint64_t)&v109);
    v108 = 0;
    v107 = 1;
    v106 = 0;
    v105 = 1;
    v104 = 0;
    llvm::ConstantRange::getEquivalentICmp((uint64_t)&v109, (int *)&v108, &v106, (uint64_t *)&v104);
    if ((a5 & 1) == 0)
      v108 = dword_1C85F60D0[v108];
    v43 = *(llvm::Value **)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF));
    v44 = *((_QWORD *)this + 13);
    v45 = *((_DWORD *)this + 30);
    if (v45)
    {
      v46 = ((v43 >> 4) ^ (v43 >> 9)) & (v45 - 1);
      v47 = v44 + 48 * v46;
      v48 = *(llvm::Value **)(v47 + 24);
      if (v48 == v43)
      {
LABEL_62:
        if (v47 == v44 + 48 * v45 || (SCEVIter = *(_QWORD *)(v47 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v43);
        v52 = v104;
        v103 = (const llvm::SCEV *)SCEVIter;
        if (v105 >= 0x41)
        {
          v53 = 0;
          v54 = ((unint64_t)v105 + 63) >> 6;
          do
          {
            v38 = v54-- < 1;
            if (v38)
              break;
            v55 = v104[v54];
            v53 += __clz(v55);
          }
          while (!v55);
          v56 = v105 | 0xFFFFFFC0;
          if ((v105 & 0x3F) == 0)
            v56 = 0;
          if (v105 - v53 - v56 > 0x40)
            goto LABEL_74;
          v52 = (_QWORD *)*v104;
        }
        if (!v52)
        {
LABEL_98:
          v102 = v108;
          v75 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v106, v42);
          __s1 = v116;
          LODWORD(v116[0]) = 0;
          *(_QWORD *)((char *)v116 + 4) = v75;
          v96 = v75;
          v115 = 0x2000000003;
          v76 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v94 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v94 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v94;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v77 = __ROR8__(*(_QWORD *)((char *)v116 + 4) + 12, 12);
          v78 = 0x9DDFEA08EB382D69
              * (v77 ^ ((0x9DDFEA08EB382D69 * (v116[0] ^ qword_1ED7EAC80 ^ v77)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v116[0] ^ qword_1ED7EAC80 ^ v77)));
          v98 = *((_QWORD *)this + 104)
              + 8
              * ((*((_DWORD *)this + 210) - 1) & ((-348639895 * ((v78 >> 47) ^ v78)) ^ HIDWORD(v116[0])));
          v79 = *(_QWORD *)v98;
          *(_QWORD *)&v117 = &v118;
          *((_QWORD *)&v117 + 1) = 0x2000000000;
          if (v79)
            v80 = (v79 & 1) == 0;
          else
            v80 = 0;
          if (v80)
          {
            v81 = v115;
            v82 = __s1;
            v100 = 4 * v115;
            while (*(_QWORD *)(v79 + 16) != v81 || memcmp(v82, *(const void **)(v79 + 8), v100))
            {
              DWORD2(v117) = 0;
              v79 = *(_QWORD *)v79;
              if (v79)
                v83 = (v79 & 1) == 0;
              else
                v83 = 0;
              if (!v83)
                goto LABEL_111;
            }
          }
          else
          {
LABEL_111:
            v79 = sub_1C484358C((uint64_t)this + 864, 40, 3);
            v84 = sub_1C484358C((uint64_t)this + 864, 4 * v115, 2);
            if ((_DWORD)v115)
            {
              v85 = (int *)__s1;
              v86 = 4 * v115;
              v87 = (_DWORD *)v84;
              do
              {
                v88 = *v85++;
                *v87++ = v88;
                v86 -= 4;
              }
              while (v86);
              v89 = v115;
            }
            else
            {
              v89 = 0;
            }
            *(_QWORD *)v79 = 0;
            *(_QWORD *)(v79 + 8) = v84;
            *(_QWORD *)(v79 + 16) = v89;
            *(_DWORD *)(v79 + 24) = 0x10000;
            *(_WORD *)(v79 + 28) = 0;
            *(_QWORD *)(v79 + 32) = v96;
            v90 = *((_DWORD *)this + 211) + 1;
            v91 = *((_DWORD *)this + 210);
            if (v90 > 2 * v91)
            {
              llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v91, (uint64_t)off_1E813B300);
              *(_QWORD *)&v117 = &v118;
              *((_QWORD *)&v117 + 1) = 0x2000000000;
              v98 = *((_QWORD *)this + 104)
                  + 8
                  * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v79 + 8), *(_QWORD *)(v79 + 8) + 4 * *(_QWORD *)(v79 + 16)));
              if ((char *)v117 != &v118)
                free((void *)v117);
              v90 = *((_DWORD *)this + 211) + 1;
            }
            *((_DWORD *)this + 211) = v90;
            v92 = *(_QWORD *)v98;
            if (!*(_QWORD *)v98)
              v92 = v98 | 1;
            *(_QWORD *)v79 = v92;
            *(_QWORD *)v98 = v79;
            v82 = __s1;
          }
          if (v82 != v116)
            free(v82);
          llvm::ScalarEvolution::computeExitLimitFromICmp((uint64_t *)this, a3, v102, v103, (const llvm::SCEV *)v79, a6, a7, (_QWORD *)a8);
          if (*(_WORD *)(*(_QWORD *)a8 + 24) != 15 || *(_WORD *)(*(_QWORD *)(a8 + 8) + 24) != 15)
          {
            if (v105 >= 0x41 && v104)
              MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
            if (v107 >= 0x41 && v106)
              MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
            if (v112 >= 0x41 && v111)
              MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
            if (v110 >= 0x41 && v109)
              MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
            return;
          }
          v93 = *(void **)(a8 + 32);
          if (v93 != *(void **)(a8 + 24))
            free(v93);
          if (v105 >= 0x41 && v104)
            MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
          if (v107 >= 0x41 && v106)
            MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
          if (v112 >= 0x41 && v111)
            MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
          if (v110 >= 0x41 && v109)
            MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
          goto LABEL_29;
        }
LABEL_74:
        v57 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v104, v42);
        __s1 = v116;
        LODWORD(v116[0]) = 0;
        *(_QWORD *)((char *)v116 + 4) = v57;
        v97 = v57;
        v115 = 0x2000000003;
        v58 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v95 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v95 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v95;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v59 = __ROR8__(*(_QWORD *)((char *)v116 + 4) + 12, 12);
        v60 = 0x9DDFEA08EB382D69
            * (v59 ^ ((0x9DDFEA08EB382D69 * (v116[0] ^ qword_1ED7EAC80 ^ v59)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v116[0] ^ qword_1ED7EAC80 ^ v59)));
        v99 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & ((-348639895 * ((v60 >> 47) ^ v60)) ^ HIDWORD(v116[0])));
        v61 = *(_QWORD *)v99;
        *(_QWORD *)&v117 = &v118;
        *((_QWORD *)&v117 + 1) = 0x2000000000;
        if (v61)
          v62 = (v61 & 1) == 0;
        else
          v62 = 0;
        if (v62)
        {
          v63 = v115;
          v64 = __s1;
          __n = 4 * v115;
          while (*(_QWORD *)(v61 + 16) != v63 || memcmp(v64, *(const void **)(v61 + 8), __n))
          {
            DWORD2(v117) = 0;
            v61 = *(_QWORD *)v61;
            if (v61)
              v65 = (v61 & 1) == 0;
            else
              v65 = 0;
            if (!v65)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          v61 = sub_1C484358C((uint64_t)this + 864, 40, 3);
          v66 = sub_1C484358C((uint64_t)this + 864, 4 * v115, 2);
          if ((_DWORD)v115)
          {
            v67 = (int *)__s1;
            v68 = 4 * v115;
            v69 = (_DWORD *)v66;
            do
            {
              v70 = *v67++;
              *v69++ = v70;
              v68 -= 4;
            }
            while (v68);
            v71 = v115;
          }
          else
          {
            v71 = 0;
          }
          *(_QWORD *)v61 = 0;
          *(_QWORD *)(v61 + 8) = v66;
          *(_QWORD *)(v61 + 16) = v71;
          *(_DWORD *)(v61 + 24) = 0x10000;
          *(_WORD *)(v61 + 28) = 0;
          *(_QWORD *)(v61 + 32) = v97;
          v72 = *((_DWORD *)this + 211) + 1;
          v73 = *((_DWORD *)this + 210);
          if (v72 > 2 * v73)
          {
            llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v73, (uint64_t)off_1E813B300);
            *(_QWORD *)&v117 = &v118;
            *((_QWORD *)&v117 + 1) = 0x2000000000;
            v99 = *((_QWORD *)this + 104)
                + 8
                * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v61 + 8), *(_QWORD *)(v61 + 8) + 4 * *(_QWORD *)(v61 + 16)));
            if ((char *)v117 != &v118)
              free((void *)v117);
            v72 = *((_DWORD *)this + 211) + 1;
          }
          *((_DWORD *)this + 211) = v72;
          v74 = *(_QWORD *)v99;
          if (!*(_QWORD *)v99)
            v74 = v99 | 1;
          *(_QWORD *)v61 = v74;
          *(_QWORD *)v99 = v61;
          v64 = __s1;
        }
        if (v64 != v116)
          free(v64);
        v103 = (const llvm::SCEV *)sub_1C4E0AF14(this, v103, v61, 0, 0);
        goto LABEL_98;
      }
      v49 = 1;
      while (v48 != (llvm::Value *)-4096)
      {
        v50 = v46 + v49++;
        v46 = v50 & (v45 - 1);
        v47 = v44 + 48 * v46;
        v48 = *(llvm::Value **)(v47 + 24);
        if (v48 == v43)
          goto LABEL_62;
      }
    }
    v47 = v44 + 48 * v45;
    goto LABEL_62;
  }
  llvm::ScalarEvolution::computeExitLimitFromICmp(this, a3, a4, a5, a6, 0, (uint64_t)&v117);
  if (*(_WORD *)(v117 + 24) == 15 && (a7 & 1) != 0)
  {
    llvm::ScalarEvolution::computeExitLimitFromICmp(this, a3, a4, a5, a6, 1, a8);
    v25 = v119;
    v24 = v120;
  }
  else
  {
    *(_OWORD *)a8 = v117;
    *(_BYTE *)(a8 + 16) = v118;
    v32 = (void *)(a8 + 56);
    *(_QWORD *)(a8 + 24) = a8 + 56;
    v25 = v119;
    v24 = v120;
    if (v120 == v119)
    {
      *(_QWORD *)(a8 + 32) = v32;
      v33 = HIDWORD(v121);
      if (HIDWORD(v121))
        memmove(v32, v24, 8 * HIDWORD(v121));
    }
    else
    {
      *(_QWORD *)(a8 + 32) = v120;
      v120 = v25;
      v24 = v25;
      v33 = HIDWORD(v121);
    }
    v34 = v122;
    *(_DWORD *)(a8 + 40) = v121;
    *(_DWORD *)(a8 + 44) = v33;
    *(_DWORD *)(a8 + 48) = v34;
    v121 = 4;
    v122 = 0;
  }
  if (v24 != v25)
  {
    v22 = (void *)v24;
    goto LABEL_36;
  }
}

void llvm::ScalarEvolution::computeExitLimitFromCondFromBinOp(llvm::ScalarEvolution *this@<X0>, llvm::ScalarEvolution::ExitLimitCache *a2@<X1>, const llvm::Loop *a3@<X2>, llvm::ConstantInt **a4@<X3>, _BOOL4 a5@<W4>, char a6@<W5>, BOOL a7@<W6>, uint64_t a8@<X8>)
{
  unsigned int v15;
  int v16;
  char v17;
  uint64_t *v18;
  llvm::Value **v19;
  llvm::Value **v20;
  llvm::Value *v21;
  void *v22;
  const void *v23;
  const void *v24;
  uint64_t *v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t UMinFromMismatchedTypes;
  unsigned int v36;
  _BOOL4 v38;
  llvm::ConstantRange *RangeRef;
  const llvm::APInt *v40;
  llvm::ValueHandleBase *v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  _QWORD *v48;
  size_t v49;
  BOOL v50;
  llvm::ScalarEvolution *v51;
  unint64_t v52;
  int *v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  int v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  _BYTE v79[48];
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  _BYTE v84[48];
  llvm::Value *v85;
  llvm::Value *v86;
  void *__s1;
  uint64_t v88;
  _QWORD v89[16];
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v85 = 0;
  v86 = 0;
  *(_QWORD *)&v90 = &v86;
  *((_QWORD *)&v90 + 1) = &v85;
  v15 = sub_1C4848F80((_QWORD **)&v90, (uint64_t)a4);
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v90 = &v86;
    *((_QWORD *)&v90 + 1) = &v85;
    if ((sub_1C4849098((_QWORD **)&v90, (uint64_t)a4) & 1) == 0)
    {
      *(_BYTE *)a8 = 0;
      *(_BYTE *)(a8 + 88) = 0;
      return;
    }
  }
  v71 = a8;
  v16 = v15 ^ a5;
  v17 = a6 & ~(v15 ^ a5);
  llvm::ScalarEvolution::computeExitLimitFromCondCached(&v80, this, a2, a3, v86, a5, v17, a7);
  v18 = &v75;
  llvm::ScalarEvolution::computeExitLimitFromCondCached(&v75, this, a2, a3, v85, a5, v17, a7);
  v19 = llvm::ConstantInt::get(*a4, v15, 0);
  v20 = v19;
  v21 = v85;
  if (*((_BYTE *)v85 + 16) != 16)
  {
    v21 = v86;
    if (*((_BYTE *)v86 + 16) != 16)
    {
      v34 = *((_QWORD *)this + 6);
      if (v16)
      {
        if (v80 == v34)
        {
          UMinFromMismatchedTypes = *((_QWORD *)this + 6);
        }
        else
        {
          UMinFromMismatchedTypes = *((_QWORD *)this + 6);
          if (v75 != v34)
          {
            v36 = *((unsigned __int8 *)a4 + 16);
            v38 = v36 < 0x1C || v36 - 59 < 0xFFFFFFEE;
            *(_QWORD *)&v90 = &v91;
            v91 = v80;
            v92 = v75;
            *((_QWORD *)&v90 + 1) = 0x200000002;
            UMinFromMismatchedTypes = llvm::ScalarEvolution::getUMinFromMismatchedTypes((uint64_t)this, &v90, v38);
            if ((uint64_t *)v90 != &v91)
              free((void *)v90);
            v34 = *((_QWORD *)this + 6);
          }
        }
        if (v81 == v34)
        {
          v34 = v76;
        }
        else if (v76 == v34)
        {
          v34 = v81;
        }
        else
        {
          *(_QWORD *)&v90 = &v91;
          v91 = v81;
          v92 = v76;
          *((_QWORD *)&v90 + 1) = 0x200000002;
          v34 = llvm::ScalarEvolution::getUMinFromMismatchedTypes((uint64_t)this, &v90, 0);
          if ((uint64_t *)v90 != &v91)
            free((void *)v90);
        }
      }
      else if (v80 == v75)
      {
        UMinFromMismatchedTypes = v80;
      }
      else
      {
        UMinFromMismatchedTypes = *((_QWORD *)this + 6);
      }
      if (*(_WORD *)(v34 + 24) == 15 && *(_WORD *)(UMinFromMismatchedTypes + 24) != 15)
      {
        RangeRef = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, UMinFromMismatchedTypes, 0, 0);
        llvm::ConstantRange::getUnsignedMax(RangeRef, (llvm::APInt *)&v73);
        v41 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v73, v40);
        __s1 = v89;
        LODWORD(v89[0]) = 0;
        *(_QWORD *)((char *)v89 + 4) = v41;
        v88 = 0x2000000003;
        v42 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v70 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v70 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v70;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v43 = 0x9DDFEA08EB382D69 * (v89[0] ^ qword_1ED7EAC80 ^ __ROR8__(*(_QWORD *)((char *)v89 + 4) + 12, 12));
        v44 = __ROR8__(*(_QWORD *)((char *)v89 + 4) + 12, 12) ^ (v43 >> 47);
        v45 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                               * ((((0x9DDFEA08EB382D69 * (v44 ^ v43)) >> 32) >> 15) ^ (-348639895 * (v44 ^ v43)))) ^ HIDWORD(v89[0])));
        v34 = *(_QWORD *)v45;
        *(_QWORD *)&v90 = &v91;
        *((_QWORD *)&v90 + 1) = 0x2000000000;
        if (v34)
          v46 = (v34 & 1) == 0;
        else
          v46 = 0;
        if (v46)
        {
          v47 = v88;
          v48 = __s1;
          v49 = 4 * v88;
          while (*(_QWORD *)(v34 + 16) != v47 || memcmp(v48, *(const void **)(v34 + 8), v49))
          {
            DWORD2(v90) = 0;
            v34 = *(_QWORD *)v34;
            if (v34)
              v50 = (v34 & 1) == 0;
            else
              v50 = 0;
            if (!v50)
              goto LABEL_72;
          }
        }
        else
        {
LABEL_72:
          v51 = this;
          v34 = sub_1C484358C((uint64_t)this + 864, 40, 3);
          v52 = sub_1C484358C((uint64_t)this + 864, 4 * v88, 2);
          if ((_DWORD)v88)
          {
            v53 = (int *)__s1;
            v54 = 4 * v88;
            v55 = (_DWORD *)v52;
            do
            {
              v56 = *v53++;
              *v55++ = v56;
              v54 -= 4;
            }
            while (v54);
            v57 = v88;
          }
          else
          {
            v57 = 0;
          }
          *(_QWORD *)v34 = 0;
          *(_QWORD *)(v34 + 8) = v52;
          *(_QWORD *)(v34 + 16) = v57;
          *(_DWORD *)(v34 + 24) = 0x10000;
          *(_WORD *)(v34 + 28) = 0;
          *(_QWORD *)(v34 + 32) = v41;
          v58 = *((_DWORD *)this + 211) + 1;
          v59 = *((_DWORD *)this + 210);
          if (v58 > 2 * v59)
          {
            llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v59, (uint64_t)off_1E813B300);
            *(_QWORD *)&v90 = &v91;
            *((_QWORD *)&v90 + 1) = 0x2000000000;
            v45 = *((_QWORD *)this + 104)
                + 8
                * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v34 + 8), *(_QWORD *)(v34 + 8) + 4 * *(_QWORD *)(v34 + 16)));
            if ((uint64_t *)v90 != &v91)
              free((void *)v90);
            v51 = this;
            v58 = *((_DWORD *)this + 211) + 1;
          }
          *((_DWORD *)v51 + 211) = v58;
          v60 = *(_QWORD *)v45;
          if (!*(_QWORD *)v45)
            v60 = v45 | 1;
          *(_QWORD *)v34 = v60;
          *(_QWORD *)v45 = v34;
          v48 = __s1;
          a8 = v71;
        }
        if (v48 != v89)
          free(v48);
        if (v74 >= 0x41 && v73)
          MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
      }
      __s1 = &v82;
      v88 = (uint64_t)&v77;
      llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)&v90, UMinFromMismatchedTypes, v34, 0, (uint64_t)&__s1, 2);
      *(_OWORD *)a8 = v90;
      *(_BYTE *)(a8 + 16) = v91;
      v61 = (void *)(a8 + 56);
      *(_QWORD *)(a8 + 24) = a8 + 56;
      v63 = (void *)v92;
      v62 = v93;
      if (v93 == (void *)v92)
      {
        *(_QWORD *)(a8 + 32) = v61;
        v64 = HIDWORD(v94);
        if (HIDWORD(v94))
          memmove(v61, v62, 8 * HIDWORD(v94));
      }
      else
      {
        *(_QWORD *)(a8 + 32) = v93;
        v93 = v63;
        v62 = v63;
        v64 = HIDWORD(v94);
      }
      v65 = v95;
      *(_DWORD *)(a8 + 40) = v94;
      *(_DWORD *)(a8 + 44) = v64;
      *(_DWORD *)(a8 + 48) = v65;
      v94 = 4;
      v95 = 0;
      *(_BYTE *)(a8 + 88) = 1;
      if (v62 != v63)
        free(v62);
      goto LABEL_29;
    }
    if (v86 == (llvm::Value *)v19)
      v28 = &v75;
    else
      v28 = &v80;
    *(_OWORD *)a8 = *(_OWORD *)v28;
    *(_BYTE *)(a8 + 16) = *((_BYTE *)v28 + 16);
    v22 = (void *)(a8 + 56);
    *(_QWORD *)(a8 + 24) = a8 + 56;
    v23 = (const void *)v28[4];
    if (v23 == (const void *)v28[3])
    {
      *(_QWORD *)(a8 + 32) = v22;
      v24 = v23;
    }
    else
    {
      v68 = v84;
      if (v21 == (llvm::Value *)v20)
        v68 = v79;
      v69 = *(unsigned int *)v68;
      v22 = malloc_type_malloc(8 * v69, 0x4065EBACuLL);
      if (!v22)
      {
        if ((_DWORD)v69)
          goto LABEL_112;
        v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v22)
          goto LABEL_112;
      }
      *(_QWORD *)(a8 + 32) = v22;
      v24 = (const void *)v28[3];
      v23 = (const void *)v28[4];
    }
    v25 = &v75;
    v26 = v79;
    v27 = &v80;
    goto LABEL_16;
  }
  if (v85 == (llvm::Value *)v19)
    v18 = &v80;
  *(_OWORD *)a8 = *(_OWORD *)v18;
  *(_BYTE *)(a8 + 16) = *((_BYTE *)v18 + 16);
  v22 = (void *)(a8 + 56);
  *(_QWORD *)(a8 + 24) = a8 + 56;
  v23 = (const void *)v18[4];
  if (v23 != (const void *)v18[3])
  {
    v66 = v84;
    if (v21 != (llvm::Value *)v20)
      v66 = v79;
    v67 = *(unsigned int *)v66;
    v22 = malloc_type_malloc(8 * v67, 0x4065EBACuLL);
    if (v22 || !(_DWORD)v67 && (v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *(_QWORD *)(a8 + 32) = v22;
      v24 = (const void *)v18[3];
      v23 = (const void *)v18[4];
      goto LABEL_8;
    }
LABEL_112:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *(_QWORD *)(a8 + 32) = v22;
  v24 = v23;
LABEL_8:
  v25 = &v80;
  v26 = v84;
  v27 = &v75;
LABEL_16:
  if (v21 != (llvm::Value *)v20)
    v26 = v27 + 5;
  v29 = *(_DWORD *)v26;
  *(_DWORD *)(a8 + 40) = *(_DWORD *)v26;
  if (v21 == (llvm::Value *)v20)
    v30 = v25;
  else
    v30 = v27;
  v31 = *((_DWORD *)v30 + 11);
  if (v23 == v24)
    v32 = *((_DWORD *)v30 + 11);
  else
    v32 = v29;
  if (v32)
  {
    memmove(v22, v23, 8 * v32);
    v31 = *((_DWORD *)v30 + 11);
  }
  *(_DWORD *)(a8 + 44) = v31;
  v33 = v25 + 6;
  if (v21 != (llvm::Value *)v20)
    v33 = v27 + 6;
  *(_DWORD *)(a8 + 48) = *v33;
  *(_BYTE *)(a8 + 88) = 1;
LABEL_29:
  if (v78 != v77)
    free(v78);
  if (v83 != v82)
    free(v83);
}

void llvm::ScalarEvolution::computeExitLimitFromICmp(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, _WORD *a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  llvm::Value *v20;
  int v21;
  unsigned int v22;
  const llvm::SCEV *SCEVIter;
  llvm::Value *v24;
  unsigned int v25;
  uint64_t v26;
  llvm::Value *v27;
  int v28;
  unsigned int v29;
  const llvm::SCEV *v30;
  void *v31;
  const void *v32;
  void *v33;
  int v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  char v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;

  v14 = a3[9] & 0x3FLL;
  if (a4)
    v14 = dword_1C85F60D0[v14];
  v15 = (llvm::Value *)*((_QWORD *)a3 - 8);
  v16 = *((_QWORD *)this + 13);
  v17 = *((_DWORD *)this + 30);
  if (!v17)
  {
LABEL_9:
    v19 = v16 + 48 * v17;
    goto LABEL_10;
  }
  v18 = ((v15 >> 4) ^ (v15 >> 9)) & (v17 - 1);
  v19 = v16 + 48 * v18;
  v20 = *(llvm::Value **)(v19 + 24);
  if (v20 != v15)
  {
    v21 = 1;
    while (v20 != (llvm::Value *)-4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v19 = v16 + 48 * v18;
      v20 = *(llvm::Value **)(v19 + 24);
      if (v20 == v15)
        goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_10:
  if (v19 == v16 + 48 * v17 || (SCEVIter = *(const llvm::SCEV **)(v19 + 40)) == 0)
  {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v15);
    v16 = *((_QWORD *)this + 13);
    v17 = *((_DWORD *)this + 30);
  }
  v24 = (llvm::Value *)*((_QWORD *)a3 - 4);
  if (!v17)
  {
LABEL_19:
    v26 = v16 + 48 * v17;
    goto LABEL_20;
  }
  v25 = ((v24 >> 4) ^ (v24 >> 9)) & (v17 - 1);
  v26 = v16 + 48 * v25;
  v27 = *(llvm::Value **)(v26 + 24);
  if (v27 != v24)
  {
    v28 = 1;
    while (v27 != (llvm::Value *)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v17 - 1);
      v26 = v16 + 48 * v25;
      v27 = *(llvm::Value **)(v26 + 24);
      if (v27 == v24)
        goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_20:
  if (v26 == v16 + 48 * v17 || (v30 = *(const llvm::SCEV **)(v26 + 40)) == 0)
    v30 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v24);
  llvm::ScalarEvolution::computeExitLimitFromICmp((uint64_t *)this, a2, v14, SCEVIter, v30, a5, a6, &v37);
  if (*(_WORD *)(v37 + 24) == 15 && *(_WORD *)(*((_QWORD *)&v37 + 1) + 24) == 15)
  {
    v36 = llvm::ScalarEvolution::computeExitCountExhaustively(this, a2, (llvm::Value *)a3, a4);
    if (*(_WORD *)(v36 + 24) == 15)
      llvm::ScalarEvolution::computeShiftCompareExitLimit((uint64_t *)this, *((_QWORD *)a3 - 8), *((_QWORD *)a3 - 4), (uint64_t)a2, v14, a7);
    else
      llvm::ScalarEvolution::ExitLimit::ExitLimit(a7, v36, v36, 0, 0, 0);
  }
  else
  {
    *(_OWORD *)a7 = v37;
    *(_BYTE *)(a7 + 16) = v38;
    v31 = (void *)(a7 + 56);
    *(_QWORD *)(a7 + 24) = a7 + 56;
    v33 = v39;
    v32 = v40;
    if (v40 == v39)
    {
      *(_QWORD *)(a7 + 32) = v31;
      v34 = HIDWORD(v41);
      if (HIDWORD(v41))
        memmove(v31, v32, 8 * HIDWORD(v41));
    }
    else
    {
      *(_QWORD *)(a7 + 32) = v40;
      v40 = v33;
      v34 = HIDWORD(v41);
    }
    v35 = v42;
    *(_DWORD *)(a7 + 40) = v41;
    *(_DWORD *)(a7 + 44) = v34;
    *(_DWORD *)(a7 + 48) = v35;
    v41 = 4;
    v42 = 0;
  }
  if (v40 != v39)
    free(v40);
}

void llvm::ScalarEvolution::computeExitLimitFromICmp(uint64_t *a1@<X0>, const llvm::Loop *a2@<X1>, unsigned int a3@<W2>, const llvm::SCEV *a4@<X3>, const llvm::SCEV *a5@<X4>, int a6@<W5>, int a7@<W6>, _QWORD *a8@<X8>)
{
  const llvm::SCEV *SCEVAtScope;
  llvm::SCEV *v16;
  _BOOL4 v17;
  uint64_t v18;
  llvm::SCEVAddRecExpr *v19;
  uint64_t NumIterationsInRange;
  const llvm::SCEV *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  int8x8_t *v27;
  uint64_t v28;
  uint8x8_t v29;
  int v30;
  unint64_t v31;
  int8x8_t *v32;
  int8x8_t v33;
  uint8x8_t v34;
  _OWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unsigned int v40;
  llvm::SCEV *v41;
  const llvm::SCEV **v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  _OWORD v46[3];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v43 = a3;
  SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a1, a4, a2);
  v42 = (const llvm::SCEV **)SCEVAtScope;
  v16 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a1, a5, a2);
  v41 = v16;
  if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, SCEVAtScope, a2) == 1
    && llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, v16, a2) != 1)
  {
    v41 = SCEVAtScope;
    v42 = (const llvm::SCEV **)v16;
    v43 = dword_1C85F6178[a3];
  }
  v17 = a6
     && (llvm::ScalarEvolution::getLoopProperties((llvm::ScalarEvolution *)a1, a2) & 1) != 0
     && llvm::ScalarEvolution::loopIsFiniteByAssumption((llvm::ScalarEvolution *)a1, a2);
  if (byte_1ED7F4238)
    v18 = v17;
  else
    v18 = 0;
  llvm::ScalarEvolution::SimplifyICmpOperands((uint64_t ****)a1, (int *)&v43, (const llvm::SCEV **)&v42, (uint64_t *)&v41, 0, v18);
  if (!v41
    || *((_WORD *)v41 + 12)
    || (v19 = (llvm::SCEVAddRecExpr *)v42) == 0
    || *((_WORD *)v42 + 12) != 7
    || v42[6] != a2)
  {
LABEL_19:
    if (!v17 || llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, v41, a2) != 1)
      goto LABEL_32;
    v21 = (const llvm::SCEV *)v42;
    v22 = *((unsigned __int16 *)v42 + 12);
    if (v42 && v22 == 2)
    {
      v21 = v42[4];
      v22 = *((unsigned __int16 *)v21 + 12);
    }
    if (v22 != 7)
      goto LABEL_32;
    v23 = *((_QWORD *)v21 + 5);
    if (v23 == 2)
    {
      v24 = *(_QWORD *)(*((_QWORD *)v21 + 4) + 8);
    }
    else
    {
      v37 = *((_QWORD *)v21 + 4);
      v44 = v46;
      v45 = 0x300000000;
      v38 = v23;
      v39 = 8 * v23 - 8;
      if (v39 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, (uint64_t)v39 >> 3, 8);
        v40 = v45;
      }
      else
      {
        v40 = 0;
      }
      if (v38 != 1)
      {
        memcpy((char *)v44 + 8 * v40, (const void *)(v37 + 8), v39);
        v40 = v45;
      }
      LODWORD(v45) = v40 + (v39 >> 3);
      v24 = sub_1C618AB20(a1, (uint64_t)&v44, *((uint64_t ***)v21 + 6));
      if (v44 != v46)
        free(v44);
    }
    v25 = *(_WORD *)(v24 + 24) ? 0 : v24;
    if ((*((_WORD *)v21 + 14) & 1) != 0 || *((const llvm::Loop **)v21 + 6) != a2 || *((_QWORD *)v21 + 5) != 2 || !v25)
      goto LABEL_32;
    v27 = *(int8x8_t **)(v25 + 32);
    v28 = v27[4].u32[0];
    if (v28 > 0x40)
    {
      v30 = 0;
      v31 = (unint64_t)(v28 + 63) >> 6;
      v32 = (int8x8_t *)v27[3];
      do
      {
        v33 = *v32++;
        v34 = (uint8x8_t)vcnt_s8(v33);
        v34.i16[0] = vaddlv_u8(v34);
        v30 += v34.i32[0];
        --v31;
      }
      while (v31);
      if (v30 == 1)
      {
LABEL_55:
        v35 = (_OWORD *)*((_QWORD *)v21 + 4);
        v44 = v46;
        v45 = 0x600000000;
        v46[0] = *v35;
        LODWORD(v45) = 2;
        v36 = sub_1C4F17BCC((llvm::ScalarEvolution *)a1);
        llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)a1, (uint64_t)v21, v36);
        if (v44 != v46)
          free(v44);
      }
    }
    else
    {
      v29 = (uint8x8_t)vcnt_s8(v27[3]);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] == 1)
        goto LABEL_55;
    }
LABEL_32:
    switch(v43)
    {
      case ' ':
        __asm { BR              X11 }
        return;
      case '!':
        __asm { BR              X11 }
        return;
      case '"':
      case '&':
        llvm::ScalarEvolution::howManyGreaterThans((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v42, v41, a2, v43 == 38, a6, a7, (uint64_t)a8);
        goto LABEL_41;
      case '$':
      case '(':
        llvm::ScalarEvolution::howManyLessThans((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v42, v41, a2, v43 == 40, a6, a7, (uint64_t)a8);
LABEL_41:
        if (*(_WORD *)(*a8 + 24) != 15 || *(_WORD *)(a8[1] + 24) != 15)
          return;
        v26 = (void *)a8[4];
        if (v26 != (void *)a8[3])
          free(v26);
LABEL_45:
        llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)a8, a1[6], a1[6], 0, 0, 0);
        break;
      default:
        goto LABEL_45;
    }
    return;
  }
  llvm::ConstantRange::makeExactICmpRegion(&v44, v43, *((_QWORD *)v41 + 4) + 24);
  NumIterationsInRange = llvm::SCEVAddRecExpr::getNumIterationsInRange(v19, (const llvm::ConstantRange *)&v44, (llvm::ScalarEvolution *)a1);
  if (*(_WORD *)(NumIterationsInRange + 24) == 15)
  {
    if (DWORD2(v46[0]) >= 0x41 && *(_QWORD *)&v46[0])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v46[0], 0x1000C8000313F17);
    if (v45 >= 0x41 && v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    goto LABEL_19;
  }
  llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)a8, NumIterationsInRange, NumIterationsInRange, 0, 0, 0);
  if (DWORD2(v46[0]) >= 0x41 && *(_QWORD *)&v46[0])
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v46[0], 0x1000C8000313F17);
  if (v45 >= 0x41 && v44)
    MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
}

unint64_t llvm::ScalarEvolution::computeExitCountExhaustively(llvm::ScalarEvolution *this, const llvm::Loop *a2, llvm::Value *a3, unsigned int a4)
{
  llvm::Value *v8;
  uint64_t v9;
  uint64_t LoopLatch;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  llvm::Value *v19;
  unsigned int v20;
  llvm *v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t Constant;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  llvm::DataLayout *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  _DWORD v61[16];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return *((_QWORD *)this + 6);
  if (*((unsigned __int8 *)a3 + 16) < 0x1Cu)
    return *((_QWORD *)this + 6);
  if (!sub_1C4F5709C((uint64_t)a3, (uint64_t)a2))
    return *((_QWORD *)this + 6);
  v8 = a3;
  if (*((_BYTE *)a3 + 16) != 83)
  {
    v59 = 0;
    v60 = 0;
    v61[0] = 0;
    v8 = (llvm::Value *)sub_1C4F573D0((uint64_t)a3, (uint64_t)a2, (uint64_t)&v59, 0);
    MEMORY[0x1CAA32FB4](v59, 8);
    if (!v8)
      return *((_QWORD *)this + 6);
  }
  if ((*((_DWORD *)v8 + 5) & 0x7FFFFFF) != 2)
    return *((_QWORD *)this + 6);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v9 = **((_QWORD **)a2 + 4);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
  if (*(_QWORD *)(v9 + 40) != v9 + 40)
  {
    v11 = *(_QWORD *)(v9 + 48);
    v12 = v11 - 24;
    v13 = v11 ? v11 - 24 : 0;
    if (v11 && *(_BYTE *)(v13 + 16) == 83)
    {
      v14 = LoopLatch;
      do
      {
        v15 = sub_1C4F3F59C(v12, v14);
        if (v15)
        {
          v59 = (uint64_t *)v12;
          sub_1C4F5E39C((uint64_t)&v56, (uint64_t *)&v59)[1] = v15;
        }
        v16 = *(_QWORD *)(v12 + 32);
        v12 = v16 - 24;
        if (v16)
          v17 = v16 - 24;
        else
          v17 = 0;
      }
      while (v16 && *(_BYTE *)(v17 + 16) == 83);
      if (v58)
      {
        v18 = (v58 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        v19 = (llvm::Value *)v56[2 * v18];
        if (v8 == v19)
        {
LABEL_23:
          v49 = dword_1ED7F33F8;
          if (dword_1ED7F33F8)
          {
            v20 = 0;
            v51 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272);
            v48 = a4;
            do
            {
              v21 = sub_1C4F3F638((uint64_t)a3, (uint64_t)a2, (uint64_t)&v56, v51, *((llvm::DSOLocalEquivalent ***)this + 2));
              if (!v21 || *((_BYTE *)v21 + 16) != 16)
                break;
              v22 = (_QWORD *)((char *)v21 + 24);
              v23 = *((_DWORD *)v21 + 8);
              if (v23 >= 0x41)
              {
                if (v23 - llvm::APInt::countLeadingZerosSlowCase((llvm *)((char *)v21 + 24)) > 0x40)
                  goto LABEL_31;
                v22 = (_QWORD *)*v22;
              }
              if (*v22 == v48)
              {
                Constant = llvm::ScalarEvolution::getConstant(this, (llvm::Type *)(****(_QWORD ****)this + 1960), v20, 0);
                goto LABEL_74;
              }
LABEL_31:
              v53 = 0;
              v54 = 0;
              v55 = 0;
              v59 = (uint64_t *)v61;
              v60 = 0x800000000;
              v24 = v56;
              v25 = &v56[2 * v58];
              v50 = v20;
              if ((_DWORD)v57)
              {
                if (v58)
                {
                  v26 = 16 * v58;
                  v27 = v56;
                  while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v27 += 2;
                    v26 -= 16;
                    if (!v26)
                      goto LABEL_36;
                  }
                }
                else
                {
                  v27 = v56;
                }
              }
              else
              {
LABEL_36:
                v27 = &v56[2 * v58];
              }
              v28 = &v56[2 * v58];
              if (v27 == v28)
              {
                v43 = 0;
                v41 = 0;
                v42 = 0;
                v32 = (uint64_t *)v61;
              }
              else
              {
                v29 = 0;
                do
                {
                  v30 = *v27;
                  if (*v27 && *(_BYTE *)(v30 + 16) == 83 && *(_QWORD *)(v30 + 40) == v9)
                  {
                    if (v29 >= HIDWORD(v60))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v29 + 1, 8);
                      v29 = v60;
                    }
                    v59[v29] = v30;
                    v29 = v60 + 1;
                    LODWORD(v60) = v60 + 1;
                  }
                  v31 = v27 + 2;
                  v27 = v25;
                  if (v31 != v25)
                  {
                    v27 = v31;
                    while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      v27 += 2;
                      if (v27 == v25)
                      {
                        v27 = v25;
                        break;
                      }
                    }
                  }
                }
                while (v27 != v28);
                v32 = v59;
                if (v29)
                {
                  v33 = &v59[v29];
                  do
                  {
                    v34 = *v32;
                    v52 = *v32;
                    v35 = sub_1C4F5E39C((uint64_t)&v53, &v52);
                    if (!v35[1])
                    {
                      v36 = *(_DWORD *)(v34 + 20);
                      v37 = v36 & 0x7FFFFFF;
                      if ((v36 & 0x7FFFFFF) != 0)
                      {
                        v38 = 0;
                        while (1)
                        {
                          v39 = v34 - 32 * v37;
                          if ((v36 & 0x40000000) != 0)
                            v39 = *(_QWORD *)(v34 - 8);
                          if (*(_QWORD *)(v39 + 32 * *(unsigned int *)(v34 + 60) + 8 * v38) == v14)
                            break;
                          if (v37 == ++v38)
                            goto LABEL_61;
                        }
                      }
                      else
                      {
LABEL_61:
                        LODWORD(v38) = -1;
                      }
                      if ((v36 & 0x40000000) != 0)
                        v40 = *(_QWORD *)(v34 - 8);
                      else
                        v40 = v34 - 32 * v37;
                      v35[1] = sub_1C4F3F638(*(_QWORD *)(v40 + 32 * v38), (uint64_t)a2, (uint64_t)&v56, v51, *((llvm::DSOLocalEquivalent ***)this + 2));
                    }
                    ++v32;
                  }
                  while (v32 != v33);
                  v32 = v59;
                  v24 = v56;
                  v41 = v53;
                  v42 = v54;
                  v43 = v55;
                }
                else
                {
                  v43 = 0;
                  v41 = 0;
                  v42 = 0;
                }
              }
              v56 = v41;
              v57 = v42;
              v58 = v43;
              if (v32 != (uint64_t *)v61)
                free(v32);
              MEMORY[0x1CAA32FB4](v24, 8);
              v20 = v50 + 1;
            }
            while (v50 + 1 != v49);
          }
        }
        else
        {
          v46 = 1;
          while (v19 != (llvm::Value *)-4096)
          {
            v47 = v18 + v46++;
            v18 = v47 & (v58 - 1);
            v19 = (llvm::Value *)v56[2 * v18];
            if (v8 == v19)
              goto LABEL_23;
          }
        }
      }
    }
  }
  Constant = *((_QWORD *)this + 6);
LABEL_74:
  MEMORY[0x1CAA32FB4](v56, 8);
  return Constant;
}

uint64_t llvm::ScalarEvolution::computeShiftCompareExitLimit@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t LoopLatch;
  uint64_t v13;
  uint64_t LoopPredecessor;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v40;
  int v41;
  uint64_t *v42;
  BOOL v43;
  const llvm::APInt *v44;
  int v45;
  llvm::DataLayout *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::ConstantInt *v58;
  llvm::ValueHandleBase *v59;
  uint64_t *v60;
  uint64_t *v61;
  BOOL v62;
  const llvm::APInt *v63;
  llvm::ConstantInt **v64;
  uint64_t *v65;
  llvm::ConstantInt *v66;
  uint64_t *v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  llvm::UndefValue *v72;
  llvm::ConstantInt **v73;
  uint64_t v74;
  const char *v75;
  unsigned int v76;
  unsigned int IndexTypeSizeInBits;
  llvm::ConstantInt **v78;
  llvm::ConstantInt **v79;
  unint64_t Constant;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;

  if (!a3)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  if (*(_BYTE *)(a3 + 16) != 16)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a4);
  if (!LoopLatch)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  v13 = LoopLatch;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a4);
  if (!LoopPredecessor)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  v15 = LoopPredecessor;
  v16 = 0;
  v17 = *(unsigned __int8 *)(a2 + 16);
  if (v17 > 0x35)
  {
    if (v17 != 55)
    {
      if (v17 != 54)
        goto LABEL_18;
      v18 = *(_QWORD *)(a2 - 64);
      if (!v18)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v19 = *(_QWORD *)(a2 - 32);
      if (!v19)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
LABEL_16:
      if (*(_BYTE *)(v19 + 16) != 16)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v20 = 26;
      goto LABEL_29;
    }
    v18 = *(_QWORD *)(a2 - 64);
    if (!v18)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
    v19 = *(_QWORD *)(a2 - 32);
    if (!v19)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
LABEL_27:
    if (*(_BYTE *)(v19 + 16) != 16)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
    v20 = 27;
    goto LABEL_29;
  }
  if (v17 != 5)
  {
    if (v17 == 53)
    {
      v18 = *(_QWORD *)(a2 - 64);
      if (!v18)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v19 = *(_QWORD *)(a2 - 32);
      if (!v19 || *(_BYTE *)(v19 + 16) != 16)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      goto LABEL_11;
    }
LABEL_18:
    v21 = 0;
    goto LABEL_33;
  }
  v22 = *(unsigned __int16 *)(a2 + 18);
  if (v22 != 25)
  {
    if (v22 != 27)
    {
      if (v22 != 26)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v23 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v18 = *v23;
      if (!*v23)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v19 = v23[4];
      if (!v19)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      goto LABEL_16;
    }
    v37 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v18 = *v37;
    if (!*v37)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
    v19 = v37[4];
    if (!v19)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
    goto LABEL_27;
  }
  v38 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v18 = *v38;
  if (!*v38)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  v19 = v38[4];
  if (!v19 || *(_BYTE *)(v19 + 16) != 16)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
LABEL_11:
  v20 = 25;
LABEL_29:
  v16 = sub_1C49591DC((llvm::APInt *)(v19 + 24));
  if (v16)
  {
    a2 = v18;
    v21 = v20;
  }
  else
  {
    v21 = 0;
  }
  v17 = *(unsigned __int8 *)(a2 + 16);
LABEL_33:
  if (v17 != 83 || *(_QWORD *)(a2 + 40) != **(_QWORD **)(a4 + 32))
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  v25 = *(_DWORD *)(a2 + 20);
  v26 = v25 & 0x7FFFFFF;
  if ((v25 & 0x7FFFFFF) != 0)
  {
    v27 = 0;
    while (1)
    {
      v28 = a2 - 32 * v26;
      if ((v25 & 0x40000000) != 0)
        v28 = *(_QWORD *)(a2 - 8);
      if (*(_QWORD *)(v28 + 32 * *(unsigned int *)(a2 + 60) + 8 * v27) == v13)
        break;
      if (v26 == ++v27)
        goto LABEL_42;
    }
  }
  else
  {
LABEL_42:
    LODWORD(v27) = -1;
  }
  if ((v25 & 0x40000000) != 0)
    v29 = *(_QWORD *)(a2 - 8);
  else
    v29 = a2 - 32 * v26;
  v30 = *(_QWORD *)(v29 + 32 * v27);
  v31 = *(unsigned __int8 *)(v30 + 16);
  if (v31 > 0x35)
  {
    if (v31 != 55)
    {
      if (v31 != 54)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v32 = *(_QWORD *)(v30 - 64);
      if (!v32)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v33 = *(_QWORD *)(v30 - 32);
LABEL_69:
      if (v33)
        v40 = *(_BYTE *)(v33 + 16) == 16;
      else
        v40 = 0;
      if (!v40)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v35 = v16;
      v85 = 0;
      v36 = 26;
      goto LABEL_88;
    }
    v32 = *(_QWORD *)(v30 - 64);
    if (!v32)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
    v33 = *(_QWORD *)(v30 - 32);
LABEL_82:
    if (v33)
      v43 = *(_BYTE *)(v33 + 16) == 16;
    else
      v43 = 0;
    if (!v43)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
    v35 = v16;
    v36 = 27;
    v85 = 1;
    goto LABEL_88;
  }
  if (v31 == 5)
  {
    v41 = *(unsigned __int16 *)(v30 + 18);
    if (v41 == 25)
    {
      v61 = (uint64_t *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
      v32 = *v61;
      if (!*v61)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v33 = v61[4];
      goto LABEL_50;
    }
    if (v41 != 27)
    {
      if (v41 != 26)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v42 = (uint64_t *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
      v32 = *v42;
      if (!*v42)
        return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v33 = v42[4];
      goto LABEL_69;
    }
    v60 = (uint64_t *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
    v32 = *v60;
    if (!*v60)
      return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
    v33 = v60[4];
    goto LABEL_82;
  }
  if (v31 != 53)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  v32 = *(_QWORD *)(v30 - 64);
  if (!v32)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  v33 = *(_QWORD *)(v30 - 32);
LABEL_50:
  if (v33)
    v34 = *(_BYTE *)(v33 + 16) == 16;
  else
    v34 = 0;
  if (!v34)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  v35 = v16;
  v85 = 0;
  v36 = 25;
LABEL_88:
  v45 = sub_1C49591DC((llvm::APInt *)(v33 + 24)) ^ 1;
  if (v32 != a2)
    v45 = 1;
  if ((v45 & 1) != 0 || ((v35 ^ 1) & 1) != 0)
  {
    if (!v45)
      goto LABEL_95;
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
  }
  if (v21 != v36)
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
LABEL_95:
  v46 = (llvm::DataLayout *)(*(_QWORD *)(*a1 + 40) + 272);
  if (!v85)
  {
    v58 = **(llvm::ConstantInt ***)a3;
    LODWORD(v91) = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
    if (v91 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v90, 0, 0);
    else
      v90 = 0;
    v59 = llvm::ConstantInt::get(v58, (llvm::LLVMContext *)&v90, v44);
    if (v91 >= 0x41 && v90)
      MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
    goto LABEL_148;
  }
  v47 = *(_DWORD *)(a2 + 20);
  v48 = v47 & 0x7FFFFFF;
  if ((v47 & 0x7FFFFFF) != 0)
  {
    v49 = 0;
    while (1)
    {
      v50 = a2 - 32 * v48;
      if ((v47 & 0x40000000) != 0)
        v50 = *(_QWORD *)(a2 - 8);
      if (*(_QWORD *)(v50 + 32 * *(unsigned int *)(a2 + 60) + 8 * v49) == v15)
        break;
      if (v48 == ++v49)
        goto LABEL_102;
    }
  }
  else
  {
LABEL_102:
    LODWORD(v49) = -1;
  }
  if ((v47 & 0x40000000) != 0)
    v51 = *(_QWORD *)(a2 - 8);
  else
    v51 = a2 - 32 * v48;
  v52 = *(_QWORD *)(v51 + 32 * v49);
  v53 = a1[3];
  v54 = *(_QWORD *)(v15 + 40);
  if (v54 == v15 + 40
    || ((v55 = v54 - 24, v54) ? (v56 = v54 - 24) : (v56 = 0), *(unsigned __int8 *)(v56 + 16) - 29 >= 0xB))
  {
    v57 = a1[4];
  }
  else
  {
    v57 = a1[4];
    if (*(_QWORD *)(v56 + 40))
      goto LABEL_130;
  }
  if (v52)
    v62 = *(unsigned __int8 *)(v52 + 16) >= 0x1Cu;
  else
    v62 = 0;
  if (v62 && *(_QWORD *)(v52 + 40))
    v55 = v52;
  else
    v55 = 0;
LABEL_130:
  v90 = *(_QWORD *)(*a1 + 40) + 272;
  v91 = v53;
  v92 = v55;
  v93 = v57;
  v94 = 0;
  v95 = 1;
  sub_1C4F83784(v52, 0, (uint64_t *)&v90, &v86);
  v64 = *(llvm::ConstantInt ***)a3;
  if (v87 >= 0x41)
    v65 = (uint64_t *)(v86 + 8 * ((v87 - 1) >> 6));
  else
    v65 = &v86;
  if ((((unint64_t)*v65 >> (v87 - 1)) & 1) != 0)
  {
    v66 = *v64;
    LODWORD(v91) = *((_DWORD *)v64 + 2) >> 8;
    if (v91 <= 0x40)
    {
      v90 = 0;
      goto LABEL_143;
    }
    v83 = 0;
    v84 = 0;
  }
  else
  {
    v67 = &v88;
    v68 = v89 - 1;
    if (v89 >= 0x41)
      v67 = (uint64_t *)(v88 + 8 * (v68 >> 6));
    if ((((unint64_t)*v67 >> v68) & 1) == 0)
    {
      result = llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, a1[6], a1[6], 0, 0, 0);
      v59 = 0;
      v71 = 0;
      goto LABEL_145;
    }
    v66 = *v64;
    v69 = *((_DWORD *)v64 + 2);
    LODWORD(v91) = v69 >> 8;
    if (v69 >> 8 <= 0x40)
    {
      if (v69 <= 0xFF)
        v70 = 0;
      else
        v70 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v69);
      v90 = v70;
      goto LABEL_143;
    }
    v83 = -1;
    v84 = 1;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v90, v83, v84);
LABEL_143:
  result = (uint64_t)llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&v90, v63);
  v59 = (llvm::ValueHandleBase *)result;
  if (v91 >= 0x41)
  {
    result = v90;
    if (v90)
      result = MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
  }
  v71 = 1;
LABEL_145:
  if (v89 >= 0x41)
  {
    result = v88;
    if (v88)
      result = MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
  }
  if (v87 >= 0x41)
  {
    result = v86;
    if (v86)
      result = MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  }
  if ((v71 & 1) != 0)
  {
LABEL_148:
    v72 = llvm::ConstantFoldCompareInstOperands(a5, (uint64_t)v59, a3, v46, a1[2]);
    if (llvm::Constant::isZeroValue(v72))
    {
      v73 = *(llvm::ConstantInt ***)a3;
      v74 = *(_QWORD *)(*a1 + 40) + 272;
      if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 15)
      {
        IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v74, (uint64_t)v73);
      }
      else
      {
        sub_1C4768AD0(v74, (uint64_t)v73);
        IndexTypeSizeInBits = v76;
        if ((_DWORD)v75 == 1)
      }
      v78 = *(llvm::ConstantInt ***)a3;
      if (*(_BYTE *)(*(_QWORD *)a3 + 8) != 13)
      {
        llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*a1 + 40) + 272), (llvm::Type *)v78);
        v78 = v79;
      }
      Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, (llvm::Type *)v78, IndexTypeSizeInBits, 0);
      v81 = a1[6];
      v82 = a6;
    }
    else
    {
      v81 = a1[6];
      v82 = a6;
      Constant = v81;
    }
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(v82, v81, Constant, 0, 0, 0);
  }
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::getSCEVAtScope(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  char *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  const llvm::SCEV **v12;
  const llvm::SCEV *v13;
  const llvm::SCEV **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  const llvm::SCEV **v18;
  const llvm::SCEV *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  const llvm::SCEV **v29;
  const llvm::SCEV *v30;
  const llvm::SCEV **v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  const llvm::SCEV **v35;
  const llvm::SCEV *v36;
  uint64_t v37;
  const llvm::Loop *v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  const llvm::SCEV *v54;

  v54 = a2;
  v6 = (char *)this + 640;
  v7 = *((_DWORD *)this + 164);
  v8 = a2 >> 4;
  if (v7)
  {
    v9 = *((_QWORD *)this + 80);
    v10 = v7 - 1;
    v11 = v10 & (v8 ^ (a2 >> 9));
    v12 = (const llvm::SCEV **)(v9 + 56 * v11);
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_16;
    v14 = 0;
    v15 = 1;
    while (v13 != (const llvm::SCEV *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (const llvm::SCEV *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (const llvm::SCEV **)(v9 + 56 * v11);
      v13 = *v12;
      if (*v12 == a2)
        goto LABEL_16;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
  }
  else
  {
    v18 = 0;
  }
  v12 = (const llvm::SCEV **)sub_1C4F5E400((uint64_t)this + 640, (uint64_t *)&v54, v18);
  *v12 = a2;
  v12[1] = (const llvm::SCEV *)(v12 + 3);
  v12[2] = (const llvm::SCEV *)0x200000000;
LABEL_16:
  v19 = v12[1];
  v20 = *((unsigned int *)v12 + 4);
  if (!(_DWORD)v20)
  {
LABEL_20:
    if (v20 >= *((_DWORD *)v12 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v12 + 1), (uint64_t)(v12 + 3), v20 + 1, 16);
      v20 = (uint64_t)v12[1] + 16 * *((unsigned int *)v12 + 4);
      *(_QWORD *)v20 = a3;
      *(_QWORD *)(v20 + 8) = 0;
      LODWORD(v20) = *((_DWORD *)v12 + 4);
    }
    else
    {
      *((_QWORD *)v19 + 2 * v20) = a3;
      *((_QWORD *)v19 + 2 * v20 + 1) = 0;
    }
    *((_DWORD *)v12 + 4) = v20 + 1;
    llvm::ScalarEvolution::computeSCEVAtScope(this, (const llvm::SCEV **)a2, a3);
    v24 = v23;
    v53 = v23;
    v25 = *((_DWORD *)this + 164);
    if (v25)
    {
      v26 = *((_QWORD *)this + 80);
      v27 = v25 - 1;
      v28 = v27 & (v8 ^ (a2 >> 9));
      v29 = (const llvm::SCEV **)(v26 + 56 * v28);
      v30 = *v29;
      if (*v29 == a2)
      {
LABEL_37:
        v36 = v29[1];
        v37 = 16 * *((unsigned int *)v29 + 4);
        do
        {
          if (!v37)
            return (const llvm::SCEV *)v24;
          v38 = *(const llvm::Loop **)((char *)v36 + v37 - 16);
          v37 -= 16;
        }
        while (v38 != a3);
        *(_QWORD *)((char *)v36 + v37 + 8) = v24;
        if (!*(_WORD *)(v24 + 24))
          return (const llvm::SCEV *)v24;
        v39 = *((_DWORD *)this + 170);
        if (v39)
        {
          v40 = *((_QWORD *)this + 83);
          v41 = v39 - 1;
          v42 = v41 & ((v24 >> 4) ^ (v24 >> 9));
          v43 = (_QWORD *)(v40 + 56 * v42);
          v44 = *v43;
          if (v24 == *v43)
          {
LABEL_59:
            v50 = *((unsigned int *)v43 + 4);
            if (v50 >= *((_DWORD *)v43 + 5))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v43 + 1), (uint64_t)(v43 + 3), v50 + 1, 16);
              LODWORD(v50) = *((_DWORD *)v43 + 4);
            }
            v51 = (_QWORD *)(v43[1] + 16 * v50);
            *v51 = a3;
            v51[1] = a2;
            ++*((_DWORD *)v43 + 4);
            return (const llvm::SCEV *)v24;
          }
          v45 = 0;
          v46 = 1;
          while (v44 != -4096)
          {
            if (v45)
              v47 = 0;
            else
              v47 = v44 == -8192;
            if (v47)
              v45 = v43;
            v48 = v42 + v46++;
            v42 = v48 & v41;
            v43 = (_QWORD *)(v40 + 56 * v42);
            v44 = *v43;
            if (v24 == *v43)
              goto LABEL_59;
          }
          if (v45)
            v49 = v45;
          else
            v49 = v43;
        }
        else
        {
          v49 = 0;
        }
        v43 = sub_1C4F5E400((uint64_t)this + 664, &v53, v49);
        *v43 = v24;
        v43[1] = v43 + 3;
        v43[2] = 0x200000000;
        goto LABEL_59;
      }
      v31 = 0;
      v32 = 1;
      while (v30 != (const llvm::SCEV *)-4096)
      {
        if (v31)
          v33 = 0;
        else
          v33 = v30 == (const llvm::SCEV *)-8192;
        if (v33)
          v31 = v29;
        v34 = v28 + v32++;
        v28 = v34 & v27;
        v29 = (const llvm::SCEV **)(v26 + 56 * v28);
        v30 = *v29;
        if (*v29 == a2)
          goto LABEL_37;
      }
      if (v31)
        v35 = v31;
      else
        v35 = v29;
    }
    else
    {
      v35 = 0;
    }
    v29 = (const llvm::SCEV **)sub_1C4F5E400((uint64_t)v6, (uint64_t *)&v54, v35);
    *v29 = a2;
    v29[1] = (const llvm::SCEV *)(v29 + 3);
    v29[2] = (const llvm::SCEV *)0x200000000;
    goto LABEL_37;
  }
  v21 = (uint64_t)v19 + 8;
  v22 = 16 * v20;
  while (*(const llvm::Loop **)(v21 - 8) != a3)
  {
    v21 += 16;
    v22 -= 16;
    if (!v22)
      goto LABEL_20;
  }
  if (*(_QWORD *)v21)
    return *(const llvm::SCEV **)v21;
  else
    return a2;
}

uint64_t llvm::ScalarEvolution::SimplifyICmpOperands(uint64_t ****a1, int *a2, const llvm::SCEV **a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  uint64_t result;
  int *v11;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  llvm::UndefValue *ICmp;
  const llvm::APInt *v18;
  int isNullValue;
  uint64_t *v20;
  uint64_t v21;
  llvm::ValueHandleBase *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  _BYTE *v29;
  BOOL v30;
  unint64_t v31;
  int *v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  const llvm::BasicBlock ***v41;
  int BlockDisposition;
  const llvm::SCEV *v43;
  uint64_t v44;
  const void **v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  const llvm::APInt *v49;
  unsigned int v50;
  const llvm::APInt *v51;
  char v52;
  unsigned __int8 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v58;
  _BYTE *v59;
  BOOL v60;
  unint64_t v61;
  int *v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  llvm::ValueHandleBase *v72;
  unsigned __int8 v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  int v80;
  BOOL v81;
  unint64_t v82;
  int *v83;
  uint64_t v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  const llvm::SCEV *v92;
  uint64_t *v93;
  uint64_t v94;
  int *v95;
  int v96;
  const llvm::APInt *v97;
  void *v98;
  const llvm::APInt *v99;
  const llvm::APInt *v100;
  const llvm::APInt *v101;
  llvm::ConstantInt *v102;
  _QWORD *v103;
  int v104;
  uint64_t v105;
  BOOL v106;
  unint64_t v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  const llvm::APInt *v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t v114;
  llvm::ValueHandleBase *v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  BOOL v120;
  uint64_t v121;
  _BYTE *v122;
  size_t v123;
  BOOL v124;
  unint64_t v125;
  int *v126;
  uint64_t v127;
  _DWORD *v128;
  int *v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  llvm::APInt *RangeRef;
  int v136;
  uint64_t v137;
  llvm::ConstantRange *v138;
  llvm::ConstantRange *v139;
  uint64_t v140;
  llvm::ConstantRange *v141;
  int v142;
  int v143;
  int64_t v144;
  unint64_t v145;
  int v146;
  int v147;
  llvm::ConstantRange *v148;
  int v149;
  int v150;
  llvm::APInt *v151;
  int v152;
  int v153;
  int64_t v154;
  unint64_t v155;
  int v156;
  int v157;
  int v158;
  llvm::ConstantInt *v159;
  llvm::ConstantInt *v160;
  uint64_t v161;
  int v162;
  void *v163;
  uint64_t v164;
  int v165;
  void *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  void *v173;
  uint64_t v174;
  int v175;
  void *v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unint64_t *v181;
  llvm::ValueHandleBase *v182;
  uint64_t __n;
  unint64_t v184;
  uint64_t v185;
  unsigned int v186;
  char v187;
  int *v188;
  int *v189;
  void *v190;
  unsigned int v191;
  void *v192;
  unsigned int v193;
  void *v194;
  unsigned int v195;
  void *v196;
  unsigned int v197;
  void *v198;
  unsigned int v199;
  void *__s2;
  unsigned int v201;
  _QWORD v202[4];
  void *__s1;
  uint64_t v204;
  _BYTE v205[120];
  void *v206;
  uint64_t v207;
  _QWORD v208[18];

  v208[16] = *MEMORY[0x1E0C80C00];
  v202[0] = a3;
  v202[1] = a4;
  v202[2] = a1;
  v202[3] = a2;
  if (a5 > 2)
    return 0;
  v11 = a2;
  v13 = (uint64_t)*a3;
  if (*a3)
    v14 = *((unsigned __int16 *)*a3 + 12) == 0;
  else
    v14 = 0;
  v15 = v14;
  v187 = v15;
  v16 = *a4;
  if (!v14)
  {
    v13 = *a4;
    if (!v16)
      goto LABEL_45;
    goto LABEL_40;
  }
  if (v16 && !*(_WORD *)(v16 + 24))
  {
    ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)*(unsigned __int16 *)a2, *(unsigned __int8 **)(v13 + 32), *(llvm::Constant **)(v16 + 32), 0);
    isNullValue = llvm::Constant::isNullValue(ICmp);
    v20 = ***a1;
    v21 = *v20;
    v22 = *(llvm::ValueHandleBase **)(*v20 + 1568);
    if (!v22)
    {
      v102 = *(llvm::ConstantInt **)(v21 + 1888);
      LODWORD(v207) = *(_DWORD *)(v21 + 1896) >> 8;
      if (v207 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v206, 0, 0);
      else
        v206 = 0;
      v22 = llvm::ConstantInt::get(v102, (llvm::LLVMContext *)&v206, v18);
      if (v207 >= 0x41 && v206)
        MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
      *(_QWORD *)(v21 + 1568) = v22;
    }
    v188 = v11;
    v185 = (uint64_t)(a1 + 104);
    if (isNullValue)
    {
      __s1 = v205;
      *(_DWORD *)v205 = 0;
      *(_QWORD *)&v205[4] = v22;
      v204 = 0x2000000003;
      v23 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v168 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v168 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v168;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v24 = __ROR8__(*(_QWORD *)&v205[4] + 12, 12);
      v25 = 0x9DDFEA08EB382D69
          * (v24 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v24)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                               * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v24)));
      v26 = (uint64_t)&a1[104][(*((_DWORD *)a1 + 210) - 1) & ((-348639895 * ((v25 >> 47) ^ v25)) ^ *(_DWORD *)&v205[4])];
      v27 = *(_QWORD *)v26;
      v206 = v208;
      v207 = 0x2000000000;
      if (v27)
        v28 = (v27 & 1) == 0;
      else
        v28 = 0;
      if (v28)
      {
        v29 = __s1;
        while (*(_QWORD *)(v27 + 16) != v204
             || memcmp(__s1, *(const void **)(v27 + 8), 4 * v204))
        {
          LODWORD(v207) = 0;
          v27 = *(_QWORD *)v27;
          if (v27)
            v30 = (v27 & 1) == 0;
          else
            v30 = 0;
          if (!v30)
            goto LABEL_28;
        }
      }
      else
      {
LABEL_28:
        v27 = sub_1C484358C((uint64_t)(a1 + 108), 40, 3);
        v31 = sub_1C484358C((uint64_t)(a1 + 108), 4 * v204, 2);
        v32 = (int *)__s1;
        v33 = 4 * v204;
        v34 = (_DWORD *)v31;
        do
        {
          v35 = *v32++;
          *v34++ = v35;
          v33 -= 4;
        }
        while (v33);
        v36 = v204;
        *(_QWORD *)v27 = 0;
        *(_QWORD *)(v27 + 8) = v31;
        *(_QWORD *)(v27 + 16) = v36;
        *(_DWORD *)(v27 + 24) = 0x10000;
        *(_WORD *)(v27 + 28) = 0;
        *(_QWORD *)(v27 + 32) = v22;
        v37 = *((_DWORD *)a1 + 211) + 1;
        v38 = *((_DWORD *)a1 + 210);
        if (v37 > 2 * v38)
        {
          llvm::FoldingSetBase::GrowBucketCount(v185, 2 * v38, (uint64_t)off_1E813B300);
          v206 = v208;
          v207 = 0x2000000000;
          v26 = (uint64_t)&a1[104][(*((_DWORD *)a1 + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v27 + 8), *(_QWORD *)(v27 + 8)+ 4 * *(_QWORD *)(v27 + 16))];
          if (v206 != v208)
            free(v206);
          v37 = *((_DWORD *)a1 + 211) + 1;
        }
        *((_DWORD *)a1 + 211) = v37;
        v39 = *(_QWORD *)v26;
        if (!*(_QWORD *)v26)
          v39 = v26 | 1;
        *(_QWORD *)v27 = v39;
        *(_QWORD *)v26 = v27;
        v29 = __s1;
      }
      if (v29 != v205)
        free(v29);
      *a4 = v27;
      *a3 = (const llvm::SCEV *)v27;
      v40 = 33;
    }
    else
    {
      __s1 = v205;
      *(_DWORD *)v205 = 0;
      *(_QWORD *)&v205[4] = v22;
      v204 = 0x2000000003;
      v53 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v169 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v169 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v169;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v54 = __ROR8__(*(_QWORD *)&v205[4] + 12, 12);
      v55 = 0x9DDFEA08EB382D69
          * (v54 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                               * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v54)));
      v56 = (uint64_t)&a1[104][(*((_DWORD *)a1 + 210) - 1) & ((-348639895 * ((v55 >> 47) ^ v55)) ^ *(_DWORD *)&v205[4])];
      v57 = *(_QWORD *)v56;
      v206 = v208;
      v207 = 0x2000000000;
      if (v57)
        v58 = (v57 & 1) == 0;
      else
        v58 = 0;
      if (v58)
      {
        v59 = __s1;
        while (*(_QWORD *)(v57 + 16) != v204
             || memcmp(__s1, *(const void **)(v57 + 8), 4 * v204))
        {
          LODWORD(v207) = 0;
          v57 = *(_QWORD *)v57;
          if (v57)
            v60 = (v57 & 1) == 0;
          else
            v60 = 0;
          if (!v60)
            goto LABEL_71;
        }
      }
      else
      {
LABEL_71:
        v57 = sub_1C484358C((uint64_t)(a1 + 108), 40, 3);
        v61 = sub_1C484358C((uint64_t)(a1 + 108), 4 * v204, 2);
        v62 = (int *)__s1;
        v63 = 4 * v204;
        v64 = (_DWORD *)v61;
        do
        {
          v65 = *v62++;
          *v64++ = v65;
          v63 -= 4;
        }
        while (v63);
        v66 = v204;
        *(_QWORD *)v57 = 0;
        *(_QWORD *)(v57 + 8) = v61;
        *(_QWORD *)(v57 + 16) = v66;
        *(_DWORD *)(v57 + 24) = 0x10000;
        *(_WORD *)(v57 + 28) = 0;
        *(_QWORD *)(v57 + 32) = v22;
        v67 = *((_DWORD *)a1 + 211) + 1;
        v68 = *((_DWORD *)a1 + 210);
        if (v67 > 2 * v68)
        {
          llvm::FoldingSetBase::GrowBucketCount(v185, 2 * v68, (uint64_t)off_1E813B300);
          v206 = v208;
          v207 = 0x2000000000;
          v56 = (uint64_t)&a1[104][(*((_DWORD *)a1 + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v57 + 8), *(_QWORD *)(v57 + 8)+ 4 * *(_QWORD *)(v57 + 16))];
          if (v206 != v208)
            free(v206);
          v67 = *((_DWORD *)a1 + 211) + 1;
        }
        *((_DWORD *)a1 + 211) = v67;
        v69 = *(_QWORD *)v56;
        if (!*(_QWORD *)v56)
          v69 = v56 | 1;
        *(_QWORD *)v57 = v69;
        *(_QWORD *)v56 = v57;
        v59 = __s1;
      }
      if (v59 != v205)
        free(v59);
      *a4 = v57;
      *a3 = (const llvm::SCEV *)v57;
      v40 = 32;
    }
    *v188 = v40;
    return 1;
  }
  *a3 = (const llvm::SCEV *)v16;
  *a4 = v13;
  *a2 = dword_1C85F6178[*a2];
  if (v13)
  {
LABEL_40:
    if (*(_WORD *)(v13 + 24) == 7)
    {
      v41 = *(const llvm::BasicBlock ****)(v13 + 48);
      if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, *a3, (const llvm::Loop *)v41) == 1)
      {
        BlockDisposition = llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, *a3, *v41[4]);
        v13 = *a4;
        if (BlockDisposition == 2)
        {
          v43 = *a3;
          *a3 = (const llvm::SCEV *)v13;
          *a4 = (uint64_t)v43;
          *v11 = dword_1C85F6178[*v11];
          v187 = 1;
          v13 = (uint64_t)v43;
        }
      }
      else
      {
        v13 = *a4;
      }
    }
  }
LABEL_45:
  if (!v13 || *(_WORD *)(v13 + 24))
    goto LABEL_181;
  v44 = *(_QWORD *)(v13 + 32);
  v45 = (const void **)(v44 + 24);
  v46 = *v11;
  if ((v46 & 0xFFFFFFFE) != 0x20)
  {
    v186 = a6;
    llvm::ConstantRange::makeExactICmpRegion(&v198, v46, v44 + 24);
    v50 = v199;
    if (v199 > 0x40)
    {
      v103 = v198;
      v184 = v199 + 63;
      if (memcmp(v198, __s2, (v184 >> 3) & 0x3FFFFFF8))
        goto LABEL_55;
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v198) == v50)
      {
LABEL_84:
        v70 = ***a1;
        v71 = *v70;
        v72 = *(llvm::ValueHandleBase **)(*v70 + 1568);
        if (!v72)
        {
          v160 = *(llvm::ConstantInt **)(v71 + 1888);
          LODWORD(v207) = *(_DWORD *)(v71 + 1896) >> 8;
          if (v207 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v206, 0, 0);
          else
            v206 = 0;
          v72 = llvm::ConstantInt::get(v160, (llvm::LLVMContext *)&v206, v49);
          if (v207 >= 0x41 && v206)
            MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
          *(_QWORD *)(v71 + 1568) = v72;
        }
        __s1 = v205;
        *(_DWORD *)v205 = 0;
        *(_QWORD *)&v205[4] = v72;
        v182 = v72;
        v204 = 0x2000000003;
        v73 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v170 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v170 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v170;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v74 = __ROR8__(*(_QWORD *)&v205[4] + 12, 12);
        v181 = (unint64_t *)&a1[104][(*((_DWORD *)a1 + 210) - 1) & ((-348639895
                                                                          * ((((0x9DDFEA08EB382D69
                                                                                            * (v74 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v74)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v74)))) >> 32) >> 15) ^ (-348639895 * (v74 ^ (((0x9DDFEA08EB382D69 * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v74)) >> 32) >> 15) ^ (-348639895 * (*(_DWORD *)v205 ^ qword_1ED7EAC80 ^ v74)))))) ^ *(_DWORD *)&v205[4])];
        v75 = *v181;
        v206 = v208;
        v207 = 0x2000000000;
        if (v75)
          v76 = (v75 & 1) == 0;
        else
          v76 = 0;
        if (v76)
        {
          v77 = v204;
          v78 = __s1;
          __n = 4 * v204;
          while (1)
          {
            if (*(_QWORD *)(v75 + 16) == v77)
            {
              v79 = v78;
              v80 = memcmp(v78, *(const void **)(v75 + 8), __n);
              v78 = v79;
              if (!v80)
                break;
            }
            LODWORD(v207) = 0;
            v75 = *(_QWORD *)v75;
            if (v75)
              v81 = (v75 & 1) == 0;
            else
              v81 = 0;
            if (!v81)
              goto LABEL_98;
          }
        }
        else
        {
LABEL_98:
          v75 = sub_1C484358C((uint64_t)(a1 + 108), 40, 3);
          v82 = sub_1C484358C((uint64_t)(a1 + 108), 4 * v204, 2);
          if ((_DWORD)v204)
          {
            v83 = (int *)__s1;
            v84 = 4 * v204;
            v85 = (_DWORD *)v82;
            do
            {
              v86 = *v83++;
              *v85++ = v86;
              v84 -= 4;
            }
            while (v84);
            v87 = v204;
          }
          else
          {
            v87 = 0;
          }
          *(_QWORD *)v75 = 0;
          *(_QWORD *)(v75 + 8) = v82;
          *(_QWORD *)(v75 + 16) = v87;
          *(_DWORD *)(v75 + 24) = 0x10000;
          *(_WORD *)(v75 + 28) = 0;
          *(_QWORD *)(v75 + 32) = v182;
          v88 = *((_DWORD *)a1 + 211) + 1;
          v89 = *((_DWORD *)a1 + 210);
          if (v88 > 2 * v89)
          {
            llvm::FoldingSetBase::GrowBucketCount((uint64_t)(a1 + 104), 2 * v89, (uint64_t)off_1E813B300);
            v206 = v208;
            v207 = 0x2000000000;
            v90 = (uint64_t)&a1[104][(*((_DWORD *)a1 + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v75 + 8), *(_QWORD *)(v75 + 8)+ 4 * *(_QWORD *)(v75 + 16))];
            if (v206 != v208)
              free(v206);
            v88 = *((_DWORD *)a1 + 211) + 1;
          }
          else
          {
            v90 = (uint64_t)v181;
          }
          *((_DWORD *)a1 + 211) = v88;
          v91 = *(_QWORD *)v90;
          if (!*(_QWORD *)v90)
            v91 = v90 | 1;
          *(_QWORD *)v75 = v91;
          *(_QWORD *)v90 = v75;
          v78 = __s1;
        }
        v95 = v11;
        if (v78 != v205)
          free(v78);
        v96 = 0;
        v52 = 0;
        *a4 = v75;
        *a3 = (const llvm::SCEV *)v75;
        *v95 = 32;
        goto LABEL_175;
      }
      v104 = 0;
      v105 = v184 >> 6;
      do
      {
        v106 = v105-- < 1;
        if (v106)
          break;
        v107 = v103[v105];
        v104 += __clz(v107);
      }
      while (!v107);
      v108 = v50 | 0xFFFFFFC0;
      if ((v50 & 0x3F) == 0)
        v108 = 0;
      if (v104 + v108 != v50)
      {
LABEL_55:
        LODWORD(v207) = 1;
        v206 = 0;
        LODWORD(__s1) = 0;
        if (llvm::ConstantRange::getEquivalentICmp((uint64_t)&v198, (int *)&__s1, &v206))
        {
          a6 = v186;
          if ((__s1 & 0xFFFFFFFE) == 0x20)
          {
            *v11 = (int)__s1;
            *a4 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&v206, v51);
            v187 = 1;
            v52 = 1;
          }
          else
          {
            v52 = 0;
          }
        }
        else
        {
          v52 = 0;
          a6 = v186;
        }
        v95 = v11;
        if (v207 >= 0x41 && v206)
          MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
        v96 = 1;
        goto LABEL_176;
      }
    }
    else
    {
      if (v198 == __s2 && (!v199 || v198 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v199)))
        goto LABEL_84;
      if ((unint64_t)__s2 | (unint64_t)v198)
        goto LABEL_55;
    }
    v95 = v11;
    sub_1C4F40CF0((uint64_t)v202, v48, v49);
    v96 = 0;
    v52 = 0;
LABEL_175:
    a6 = v186;
LABEL_176:
    if (v201 >= 0x41 && __s2)
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
    if (v199 >= 0x41 && v198)
      MEMORY[0x1CAA32F9C](v198, 0x1000C8000313F17);
    if (!v96)
      return 1;
    if ((v52 & 1) != 0)
    {
      v11 = v95;
      goto LABEL_181;
    }
    v11 = v95;
    LODWORD(v46) = *v95;
  }
  switch((int)v46)
  {
    case ' ':
    case '!':
      v47 = *(_DWORD *)(v44 + 32);
      if (v47 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v44 + 24)) != v47)
          break;
      }
      else if (*v45)
      {
        break;
      }
      v92 = *a3;
      if (*a3)
      {
        if (*((_WORD *)v92 + 12) == 4)
        {
          v93 = (uint64_t *)*((_QWORD *)v92 + 4);
          v94 = *v93;
          if (*v93)
          {
            if (*(_WORD *)(v94 + 24) == 5
              && *((_QWORD *)v92 + 5) == 2
              && *(_QWORD *)(v94 + 40) == 2
              && llvm::SCEV::isAllOnesValue(**(llvm::SCEV ***)(v94 + 32)))
            {
              *a4 = v93[1];
              *a3 = *(const llvm::SCEV **)(*(_QWORD *)(v94 + 32) + 8);
              goto LABEL_157;
            }
          }
        }
      }
      break;
    case '#':
      *v11 = 34;
      v197 = *(_DWORD *)(v44 + 32);
      if (v197 > 0x40)
      {
        v196 = (void *)operator new[]();
        memcpy(v196, *v45, (((unint64_t)v197 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v196 = (void *)*v45;
      }
      llvm::APInt::operator-=((uint64_t)&v196, 1uLL);
      LODWORD(v207) = v197;
      v206 = v196;
      v197 = 0;
      *a4 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&v206, v97);
      if (v207 >= 0x41 && v206)
        MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
      if (v197 >= 0x41)
      {
        v98 = v196;
        if (v196)
          goto LABEL_156;
      }
      goto LABEL_157;
    case '%':
      *v11 = 36;
      v195 = *(_DWORD *)(v44 + 32);
      if (v195 > 0x40)
      {
        v194 = (void *)operator new[]();
        memcpy(v194, *v45, (((unint64_t)v195 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v194 = (void *)*v45;
      }
      llvm::APInt::operator+=((uint64_t)&v194, 1uLL);
      LODWORD(v207) = v195;
      v206 = v194;
      v195 = 0;
      *a4 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&v206, v100);
      if (v207 >= 0x41 && v206)
        MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
      if (v195 < 0x41)
        goto LABEL_157;
      v98 = v194;
      if (!v194)
        goto LABEL_157;
      goto LABEL_156;
    case '\'':
      *v11 = 38;
      v193 = *(_DWORD *)(v44 + 32);
      if (v193 > 0x40)
      {
        v192 = (void *)operator new[]();
        memcpy(v192, *v45, (((unint64_t)v193 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v192 = (void *)*v45;
      }
      llvm::APInt::operator-=((uint64_t)&v192, 1uLL);
      LODWORD(v207) = v193;
      v206 = v192;
      v193 = 0;
      *a4 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&v206, v101);
      if (v207 >= 0x41 && v206)
        MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
      if (v193 >= 0x41)
      {
        v98 = v192;
        if (v192)
          goto LABEL_156;
      }
      goto LABEL_157;
    case ')':
      *v11 = 40;
      v191 = *(_DWORD *)(v44 + 32);
      if (v191 > 0x40)
      {
        v190 = (void *)operator new[]();
        memcpy(v190, *v45, (((unint64_t)v191 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v190 = (void *)*v45;
      }
      llvm::APInt::operator+=((uint64_t)&v190, 1uLL);
      LODWORD(v207) = v191;
      v206 = v190;
      v191 = 0;
      *a4 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&v206, v99);
      if (v207 >= 0x41 && v206)
        MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
      if (v191 < 0x41)
        goto LABEL_157;
      v98 = v190;
      if (!v190)
        goto LABEL_157;
LABEL_156:
      MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
LABEL_157:
      v187 = 1;
      break;
    default:
      break;
  }
LABEL_181:
  v109 = sub_1C4F40FE8((uint64_t)*a3, *a4);
  v112 = *v11;
  if (v109)
  {
    if (v112 <= 0x29)
    {
      if (((1 << v112) & 0x2A90000AA00) != 0)
      {
        v113 = ***a1;
        v114 = *v113;
        v115 = *(llvm::ValueHandleBase **)(*v113 + 1568);
        if (!v115)
        {
          v159 = *(llvm::ConstantInt **)(v114 + 1888);
          LODWORD(v207) = *(_DWORD *)(v114 + 1896) >> 8;
          if (v207 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v206, 0, 0);
          else
            v206 = 0;
          v115 = llvm::ConstantInt::get(v159, (llvm::LLVMContext *)&v206, v111);
          if (v207 >= 0x41 && v206)
            MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
          *(_QWORD *)(v114 + 1568) = v115;
        }
        v189 = v11;
        __s1 = v205;
        *(_DWORD *)v205 = 0;
        *(_QWORD *)&v205[4] = v115;
        v204 = 0x2000000003;
        v116 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v167 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v167 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v167;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v117 = __ROR8__(*(_QWORD *)&v205[4] + 12, 12);
        v118 = (uint64_t)&a1[104][(*((_DWORD *)a1 + 210) - 1) & ((-348639895
                                                               * ((((0x9DDFEA08EB382D69
                                                                                 * (v117 ^ ((0x9DDFEA08EB382D69
                                                                                           * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v117)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v117)))) >> 32) >> 15) ^ (-348639895 * (v117 ^ (((0x9DDFEA08EB382D69 * (*(_QWORD *)v205 ^ qword_1ED7EAC80 ^ v117)) >> 32) >> 15) ^ (-348639895 * (*(_DWORD *)v205 ^ qword_1ED7EAC80 ^ v117)))))) ^ *(_DWORD *)&v205[4])];
        v119 = *(_QWORD *)v118;
        v206 = v208;
        v207 = 0x2000000000;
        if (v119)
          v120 = (v119 & 1) == 0;
        else
          v120 = 0;
        if (v120)
        {
          v121 = v204;
          v122 = __s1;
          v123 = 4 * v204;
          while (*(_QWORD *)(v119 + 16) != v121 || memcmp(v122, *(const void **)(v119 + 8), v123))
          {
            LODWORD(v207) = 0;
            v119 = *(_QWORD *)v119;
            if (v119)
              v124 = (v119 & 1) == 0;
            else
              v124 = 0;
            if (!v124)
              goto LABEL_198;
          }
          v129 = v189;
        }
        else
        {
LABEL_198:
          v119 = sub_1C484358C((uint64_t)(a1 + 108), 40, 3);
          v125 = sub_1C484358C((uint64_t)(a1 + 108), 4 * v204, 2);
          if ((_DWORD)v204)
          {
            v126 = (int *)__s1;
            v127 = 4 * v204;
            v128 = (_DWORD *)v125;
            v129 = v189;
            do
            {
              v130 = *v126++;
              *v128++ = v130;
              v127 -= 4;
            }
            while (v127);
            v131 = v204;
          }
          else
          {
            v131 = 0;
            v129 = v189;
          }
          *(_QWORD *)v119 = 0;
          *(_QWORD *)(v119 + 8) = v125;
          *(_QWORD *)(v119 + 16) = v131;
          *(_DWORD *)(v119 + 24) = 0x10000;
          *(_WORD *)(v119 + 28) = 0;
          *(_QWORD *)(v119 + 32) = v115;
          v132 = *((_DWORD *)a1 + 211) + 1;
          v133 = *((_DWORD *)a1 + 210);
          if (v132 > 2 * v133)
          {
            llvm::FoldingSetBase::GrowBucketCount((uint64_t)(a1 + 104), 2 * v133, (uint64_t)off_1E813B300);
            v206 = v208;
            v207 = 0x2000000000;
            v118 = (uint64_t)&a1[104][(*((_DWORD *)a1 + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v119 + 8), *(_QWORD *)(v119 + 8)+ 4 * *(_QWORD *)(v119 + 16))];
            if (v206 != v208)
              free(v206);
            v132 = *((_DWORD *)a1 + 211) + 1;
            v129 = v189;
          }
          *((_DWORD *)a1 + 211) = v132;
          v134 = *(_QWORD *)v118;
          if (!*(_QWORD *)v118)
            v134 = v118 | 1;
          *(_QWORD *)v119 = v134;
          *(_QWORD *)v118 = v119;
          v122 = __s1;
        }
        if (v122 != v205)
          free(v122);
        *a4 = v119;
        *a3 = (const llvm::SCEV *)v119;
        *v129 = 32;
        return 1;
      }
      if (((1 << v112) & 0x15600000055) != 0)
      {
        sub_1C4F40CF0((uint64_t)v202, v110, v111);
        return 1;
      }
    }
    goto LABEL_268;
  }
  switch(v112)
  {
    case '#':
      if ((a6 & 1) != 0)
        goto LABEL_210;
      RangeRef = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(a1, *a4, 0, 0);
      llvm::ConstantRange::getUnsignedMin(RangeRef, (llvm::APInt *)&v206);
      v136 = v207;
      if (v207 > 0x40)
      {
        v143 = 0;
        v144 = ((unint64_t)v207 + 63) >> 6;
        do
        {
          v106 = v144-- < 1;
          if (v106)
            break;
          v145 = *((_QWORD *)v206 + v144);
          v143 += __clz(v145);
        }
        while (!v145);
        v146 = v207 | 0xFFFFFFC0;
        if ((v207 & 0x3F) == 0)
          v146 = 0;
        v147 = v143 + v146;
        if (v206)
          MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
        if (v147 != v136)
LABEL_210:
          __asm { BR              X11 }
      }
      else if (v206)
      {
        goto LABEL_210;
      }
      v148 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(a1, *a3, 0, 0);
      llvm::ConstantRange::getUnsignedMax(v148, (llvm::APInt *)&v206);
      v149 = v207;
      if ((_DWORD)v207)
      {
        if (v207 > 0x40)
        {
          v158 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v206);
          if (v206)
            MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
          if (v158 == v149)
            goto LABEL_268;
        }
        else if (v206 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v207))
        {
          goto LABEL_268;
        }
        __asm { BR              X11 }
      }
LABEL_268:
      if ((v187 & 1) == 0)
        return 0;
      return llvm::ScalarEvolution::SimplifyICmpOperands(a1, v11, a3, a4, a5 + 1, a6);
    case '%':
      if ((a6 & 1) != 0)
        goto LABEL_225;
      v141 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(a1, *a4, 0, 0);
      llvm::ConstantRange::getUnsignedMax(v141, (llvm::APInt *)&v206);
      v142 = v207;
      if (!(_DWORD)v207)
        goto LABEL_253;
      if (v207 > 0x40)
      {
        v150 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v206);
        if (v206)
          MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
        if (v150 == v142)
        {
LABEL_253:
          v151 = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(a1, *a3, 0, 0);
          llvm::ConstantRange::getUnsignedMin(v151, (llvm::APInt *)&v206);
          v152 = v207;
          if (v207 > 0x40)
          {
            v153 = 0;
            v154 = ((unint64_t)v207 + 63) >> 6;
            do
            {
              v106 = v154-- < 1;
              if (v106)
                break;
              v155 = *((_QWORD *)v206 + v154);
              v153 += __clz(v155);
            }
            while (!v155);
            v156 = v207 | 0xFFFFFFC0;
            if ((v207 & 0x3F) == 0)
              v156 = 0;
            v157 = v153 + v156;
            if (v206)
              MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
            if (v157 == v152)
              goto LABEL_268;
          }
          else if (!v206)
          {
            goto LABEL_268;
          }
          __asm { BR              X11 }
        }
      }
      else if (v206 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v207))
      {
        goto LABEL_253;
      }
LABEL_225:
      __asm { BR              X11 }
      return result;
    case '\'':
      if ((a6 & 1) != 0)
        goto LABEL_297;
      v137 = llvm::ScalarEvolution::getRangeRef(a1, *a4, 1, 0);
      llvm::ConstantRange::getSignedMin(v137, (llvm::APInt *)&v206);
      if (v207 >= 0x41)
      {
        v161 = a6;
        v162 = v207 - 1;
        v163 = v206;
        if (((*((_QWORD *)v206 + ((v207 - 1) >> 6)) >> (v207 - 1)) & 1) != 0)
        {
          v179 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v206);
          MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
          v14 = v179 == v162;
          a6 = v161;
          if (v14)
          {
LABEL_221:
            v138 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(a1, *a3, 1, 0);
            llvm::ConstantRange::getSignedMax(v138, (llvm::APInt *)&v206);
            if (v207 >= 0x41)
            {
              v174 = a6;
              v175 = v207 - 1;
              v176 = v206;
              if (((*((_QWORD *)v206 + ((v207 - 1) >> 6)) >> (v207 - 1)) & 1) != 0)
              {
                MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
              }
              else
              {
                v178 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v206);
                MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
                v14 = v178 == v175;
                a6 = v174;
                if (v14)
                  goto LABEL_268;
              }
            }
            else if (v206 == (void *)~(-1 << (v207 - 1)))
            {
              goto LABEL_268;
            }
            __asm { BR              X11 }
          }
        }
        else
        {
          MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
        }
      }
      else if (v206 == (void *)(1 << (v207 - 1)))
      {
        goto LABEL_221;
      }
LABEL_297:
      __asm { BR              X11 }
      return result;
    case ')':
      if ((a6 & 1) != 0)
        goto LABEL_330;
      v139 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(a1, *a4, 1, 0);
      llvm::ConstantRange::getSignedMax(v139, (llvm::APInt *)&v206);
      if (v207 >= 0x41)
      {
        v171 = a6;
        v172 = v207 - 1;
        v173 = v206;
        if (((*((_QWORD *)v206 + ((v207 - 1) >> 6)) >> (v207 - 1)) & 1) != 0)
        {
          MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
        }
        else
        {
          v177 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v206);
          MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
          v14 = v177 == v172;
          a6 = v171;
          if (v14)
          {
LABEL_229:
            v140 = llvm::ScalarEvolution::getRangeRef(a1, *a3, 1, 0);
            llvm::ConstantRange::getSignedMin(v140, (llvm::APInt *)&v206);
            if (v207 >= 0x41)
            {
              v164 = a6;
              v165 = v207 - 1;
              v166 = v206;
              if (((*((_QWORD *)v206 + ((v207 - 1) >> 6)) >> (v207 - 1)) & 1) != 0)
              {
                v180 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v206);
                MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
                v14 = v180 == v165;
                a6 = v164;
                if (v14)
                  goto LABEL_268;
              }
              else
              {
                MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
              }
            }
            else if (v206 == (void *)(1 << (v207 - 1)))
            {
              goto LABEL_268;
            }
            __asm { BR              X11 }
          }
        }
      }
      else if (v206 == (void *)~(-1 << (v207 - 1)))
      {
        goto LABEL_229;
      }
LABEL_330:
      __asm { BR              X11 }
      return result;
    default:
      goto LABEL_268;
  }
}

#error "1C4F3A200: switch analysis failed: switch information is incomplete or incorrect (funcsize=178)"

void llvm::ScalarEvolution::howFarToZero(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::Loop **a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  uint64_t v12;
  llvm::APInt *v13;
  unsigned int v14;
  const llvm::SCEV *v15;
  BOOL v16;
  uint64_t v17;
  const llvm::SCEV *v18;
  const llvm::SCEV *v19;
  uint64_t v20;
  BOOL v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::SCEV *SCEVAtScope;
  const llvm::SCEV *v26;
  BOOL v27;
  const llvm::SCEV *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  llvm::SCEV *v37;
  const llvm::SCEV *v38;
  llvm::ConstantRange *RangeRef;
  llvm::ConstantRange *v40;
  unsigned int v41;
  void *v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  const llvm::SCEV *UDivExactExpr;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  const llvm::APInt *v53;
  unint64_t v54;
  uint64_t v55;
  llvm::ValueHandleBase *v56;
  unsigned __int8 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  size_t v64;
  const llvm::APInt *v65;
  BOOL v66;
  unint64_t v67;
  int *v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  llvm::ValueHandleBase *v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  _QWORD *v83;
  size_t v84;
  BOOL v85;
  unint64_t v86;
  int *v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t **MulExpr;
  const llvm::SCEV *v96;
  llvm::ConstantRange *v97;
  llvm::ConstantRange *v98;
  const llvm::APInt *v99;
  void **v100;
  unint64_t v101;
  const llvm::SCEV *UDivExpr;
  unint64_t Constant;
  const llvm::SCEV *v104;
  llvm::ConstantRange *v105;
  llvm::ConstantRange *v106;
  const llvm::APInt *v107;
  void **p_s1;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  llvm::SCEV *NegativeSCEV;
  llvm::SCEV *v123;
  uint64_t v124;
  unsigned int v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  int v129;
  _BYTE v130[32];
  _QWORD *v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  void *__src;
  unsigned int v136;
  void *__s1;
  uint64_t v138;
  _QWORD v139[16];
  unint64_t v140;
  uint64_t v141;
  _QWORD v142[18];

  v142[16] = *MEMORY[0x1E0C80C00];
  v126 = v130;
  v127 = v130;
  v128 = 4;
  v129 = 0;
  v11 = *((unsigned __int16 *)a2 + 12);
  if (a2 && !*((_WORD *)a2 + 12))
  {
    v12 = *((_QWORD *)a2 + 4);
    v13 = (llvm::APInt *)(v12 + 24);
    v14 = *(_DWORD *)(v12 + 32);
    if (v14 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v13) == v14)
      {
LABEL_15:
        v17 = a6;
        v18 = a2;
        v19 = a2;
LABEL_28:
        v22 = 0;
        v23 = 0;
        goto LABEL_29;
      }
    }
    else if (!*(_QWORD *)v13)
    {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
  if (a2)
  {
    v15 = a2;
    if ((v11 - 4) >= 0xFFFFFFFE)
    {
      v15 = a2;
      do
      {
        v15 = (const llvm::SCEV *)*((_QWORD *)v15 + 4);
        v11 = *((unsigned __int16 *)v15 + 12);
        if (v15)
          v16 = (v11 - 4) > 0xFFFFFFFD;
        else
          v16 = 0;
      }
      while (v16);
    }
  }
  else
  {
    v15 = 0;
  }
  if (v11 == 7)
    v20 = (uint64_t)v15;
  else
    v20 = 0;
  if (v20)
    v21 = 1;
  else
    v21 = a5 == 0;
  if (!v21)
    v20 = llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (llvm::SmallPtrSetImplBase *)&v126);
  if (!v20 || *(const llvm::Loop ***)(v20 + 48) != a3)
    goto LABEL_27;
  v24 = *(_QWORD *)(v20 + 40);
  if (v24 != 2)
  {
    if (v24 == 3)
      __asm { BR              X11 }
    goto LABEL_27;
  }
  SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(this, **(const llvm::SCEV ***)(v20 + 32), *a3);
  v26 = llvm::ScalarEvolution::getSCEVAtScope(this, *(const llvm::SCEV **)(*(_QWORD *)(v20 + 32) + 8), *a3);
  if (v26)
    v27 = *((unsigned __int16 *)v26 + 12) == 0;
  else
    v27 = 0;
  if (!v27)
  {
LABEL_27:
    v18 = (const llvm::SCEV *)*((_QWORD *)this + 6);
    v17 = a6;
    v19 = v18;
    goto LABEL_28;
  }
  v28 = v26;
  v29 = *((_QWORD *)v26 + 4);
  v30 = (uint64_t *)(v29 + 24);
  v31 = *(_DWORD *)(v29 + 32);
  if (v31 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v29 + 24)) == v31)
      goto LABEL_27;
    v33 = v31 - 1;
    v32 = *(_QWORD *)(*v30 + 8 * ((v31 - 1) >> 6));
  }
  else
  {
    v32 = *v30;
    if (!*v30)
      goto LABEL_27;
    v33 = v31 - 1;
  }
  v121 = (1 << v33) & v32;
  if (v121)
  {
    NegativeSCEV = SCEVAtScope;
  }
  else
  {
    NegativeSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, (uint64_t)SCEVAtScope);
    v29 = *((_QWORD *)v28 + 4);
    v31 = *(_DWORD *)(v29 + 32);
  }
  if (v31 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v29 + 24)) != v31 - 1
      && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v29 + 24)) != v31)
    {
      goto LABEL_72;
    }
LABEL_59:
    v37 = NegativeSCEV;
    v38 = llvm::ScalarEvolution::applyLoopGuards((llvm::AssumptionCache **)this, NegativeSCEV, (const llvm::Loop *)a3);
    RangeRef = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, v38, 0, 0);
    llvm::ConstantRange::getUnsignedMax(RangeRef, (llvm::APInt *)&__s1);
    v40 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, NegativeSCEV, 0, 0);
    llvm::ConstantRange::getUnsignedMax(v40, (llvm::APInt *)&v140);
    v41 = v138;
    if (v138 > 0x40)
    {
      v109 = (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8;
      v37 = NegativeSCEV;
      do
      {
        if (!v109)
          goto LABEL_177;
        v110 = *(_QWORD *)((char *)__s1 + v109 - 8);
        v111 = *(_QWORD *)(v140 - 8 + v109);
        v109 -= 8;
      }
      while (v110 == v111);
      v37 = NegativeSCEV;
      if (v110 <= v111)
        goto LABEL_67;
    }
    else
    {
      v42 = __s1;
      v43 = v141;
      if ((unint64_t)__s1 >= v140)
        v41 = v141;
      if (v41 < 0x41)
      {
        if ((unint64_t)__s1 >= v140)
          v42 = (void *)v140;
        __s1 = v42;
        LODWORD(v138) = v41;
LABEL_68:
        if (v43 >= 0x41 && v140)
          MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
        __asm { BR              X11 }
      }
      if ((unint64_t)__s1 < v140)
      {
LABEL_67:
        v43 = v141;
        goto LABEL_68;
      }
    }
LABEL_177:
    llvm::APInt::reallocate((uint64_t)&__s1, v141);
    if (v138 <= 0x40)
      __s1 = (void *)v140;
    else
      memcpy(__s1, (const void *)v140, (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8);
    goto LABEL_67;
  }
  v34 = *(_QWORD *)(v29 + 24);
  if (v31)
    v35 = v34 == 1;
  else
    v35 = 1;
  if (v35 || v34 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v31)
    goto LABEL_59;
LABEL_72:
  if (!a4 || (*(_WORD *)(v20 + 28) & 1) == 0)
    goto LABEL_76;
  if ((llvm::ScalarEvolution::getLoopProperties(this, *(const llvm::Loop **)(v20 + 48)) & 1) != 0)
  {
    if (v121)
      v28 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, (uint64_t)v28);
    UDivExpr = llvm::ScalarEvolution::getUDivExpr(this, NegativeSCEV, v28);
    Constant = (unint64_t)UDivExpr;
    if (UDivExpr == *((const llvm::SCEV **)this + 6))
      goto LABEL_202;
    v104 = llvm::ScalarEvolution::applyLoopGuards((llvm::AssumptionCache **)this, UDivExpr, (const llvm::Loop *)a3);
    v105 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, v104, 0, 0);
    llvm::ConstantRange::getUnsignedMax(v105, (llvm::APInt *)&v140);
    v106 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, UDivExpr, 0, 0);
    llvm::ConstantRange::getUnsignedMax(v106, (llvm::APInt *)&__s1);
    if (v141 > 0x40)
    {
      v115 = (((unint64_t)v141 + 63) >> 3) & 0x3FFFFFF8;
      while (v115)
      {
        v116 = *(_QWORD *)(v140 - 8 + v115);
        v117 = *(_QWORD *)((char *)__s1 + v115 - 8);
        v115 -= 8;
        if (v116 != v117)
        {
          if (v116 <= v117)
            goto LABEL_168;
          break;
        }
      }
    }
    else if (v140 < (unint64_t)__s1)
    {
LABEL_168:
      p_s1 = (void **)&v140;
      goto LABEL_196;
    }
    p_s1 = &__s1;
LABEL_196:
    Constant = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)p_s1, v107);
    if (v138 >= 0x41 && __s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
    if (v141 >= 0x41 && v140)
      MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
LABEL_202:
    v140 = (unint64_t)&v126;
    v22 = (void **)&v140;
    v17 = a6;
    v18 = UDivExpr;
    v19 = (const llvm::SCEV *)Constant;
    goto LABEL_162;
  }
  v29 = *((_QWORD *)v28 + 4);
LABEL_76:
  v44 = (unint64_t *)(v29 + 24);
  v45 = llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, (uint64_t)SCEVAtScope);
  v46 = *(_DWORD *)(v29 + 32);
  if (v46 > 0x40)
  {
    v48 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v29 + 24));
  }
  else
  {
    v47 = __clz(__rbit64(*v44));
    if (v46 >= v47)
      v48 = v47;
    else
      v48 = *(_DWORD *)(v29 + 32);
  }
  if (llvm::ScalarEvolution::GetMinTrailingZeros(this, (const llvm::SCEV *)v45) >= v48)
  {
    v123 = (llvm::SCEV *)v45;
    LODWORD(v45) = *(_DWORD *)(v29 + 32);
    LODWORD(v141) = v45;
    if (v45 > 0x40)
    {
      v50 = operator new[]();
      v140 = v50;
      v45 = v141;
      memcpy((void *)v50, (const void *)*v44, (((unint64_t)v141 + 63) >> 3) & 0x3FFFFFF8);
      if (v45 > 0x40)
      {
        llvm::APInt::tcShiftRight((llvm::APInt *)v50, (unint64_t *)((v45 + 63) >> 6), v48);
        goto LABEL_87;
      }
    }
    else
    {
      v50 = *v44;
    }
    if ((_DWORD)v45 == v48)
      v140 = 0;
    else
      v140 = v50 >> v48;
LABEL_87:
    llvm::APInt::zext((llvm::APInt *)&v140, v46 + 1, (uint64_t)&v133);
    if (v141 >= 0x41 && v140)
      MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
    v132 = v46 + 1;
    if (v46 + 1 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v131, 0, 0);
      v52 = 1 << (v46 - v48);
      if (v132 > 0x40)
      {
        v131[(v46 - v48) >> 6] |= v52;
        goto LABEL_93;
      }
      v51 = (unint64_t)v131;
    }
    else
    {
      v51 = 0;
      v52 = 1 << (v46 - v48);
    }
    v131 = (_QWORD *)(v52 | v51);
LABEL_93:
    llvm::APInt::multiplicativeInverse((llvm::APInt *)&v133, (const void **)&v131, (llvm::APInt *)&v140);
    llvm::APInt::trunc((llvm::APInt *)&v140, v46, (llvm::APInt *)&v124);
    if (v141 >= 0x41 && v140)
      MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
    v136 = v46;
    if (v46 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      v55 = 1 << v48;
      if (v136 > 0x40)
      {
        *((_QWORD *)__src + (v48 >> 6)) |= v55;
        goto LABEL_99;
      }
      v54 = (unint64_t)__src;
    }
    else
    {
      v54 = 0;
      v55 = 1 << v48;
    }
    __src = (void *)(v55 | v54);
LABEL_99:
    v56 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v53);
    __s1 = v139;
    LODWORD(v139[0]) = 0;
    *(_QWORD *)((char *)v139 + 4) = v56;
    v138 = 0x2000000003;
    v120 = (char *)this + 832;
    v57 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v118 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v118 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v118;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v58 = __ROR8__(*(_QWORD *)((char *)v139 + 4) + 12, 12);
    v59 = 0x9DDFEA08EB382D69
        * (v58 ^ ((0x9DDFEA08EB382D69 * (v139[0] ^ qword_1ED7EAC80 ^ v58)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                     * (v139[0] ^ qword_1ED7EAC80 ^ v58)));
    v60 = *((_QWORD *)this + 104)
        + 8 * ((*((_DWORD *)this + 210) - 1) & ((-348639895 * ((v59 >> 47) ^ v59)) ^ HIDWORD(v139[0])));
    v61 = *(_QWORD *)v60;
    v140 = (unint64_t)v142;
    v141 = 0x2000000000;
    if (!v61 || (v61 & 1) != 0)
    {
LABEL_109:
      v61 = sub_1C484358C((uint64_t)this + 864, 40, 3);
      v67 = sub_1C484358C((uint64_t)this + 864, 4 * v138, 2);
      if ((_DWORD)v138)
      {
        v68 = (int *)__s1;
        v69 = 4 * v138;
        v70 = (_DWORD *)v67;
        do
        {
          v71 = *v68++;
          *v70++ = v71;
          v69 -= 4;
        }
        while (v69);
        v72 = v138;
      }
      else
      {
        v72 = 0;
      }
      *(_QWORD *)v61 = 0;
      *(_QWORD *)(v61 + 8) = v67;
      *(_QWORD *)(v61 + 16) = v72;
      *(_DWORD *)(v61 + 24) = 0x10000;
      *(_WORD *)(v61 + 28) = 0;
      *(_QWORD *)(v61 + 32) = v56;
      v73 = *((_DWORD *)this + 211) + 1;
      v74 = *((_DWORD *)this + 210);
      if (v73 > 2 * v74)
      {
        llvm::FoldingSetBase::GrowBucketCount((uint64_t)v120, 2 * v74, (uint64_t)off_1E813B300);
        v140 = (unint64_t)v142;
        v141 = 0x2000000000;
        v60 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v61 + 8), *(_QWORD *)(v61 + 8) + 4 * *(_QWORD *)(v61 + 16)));
        if ((_QWORD *)v140 != v142)
          free((void *)v140);
        v73 = *((_DWORD *)this + 211) + 1;
      }
      *((_DWORD *)this + 211) = v73;
      v75 = *(_QWORD *)v60;
      if (!*(_QWORD *)v60)
        v75 = v60 | 1;
      *(_QWORD *)v61 = v75;
      *(_QWORD *)v60 = v61;
      v63 = __s1;
    }
    else
    {
      v62 = v138;
      v63 = __s1;
      v64 = 4 * v138;
      while (*(_QWORD *)(v61 + 16) != v62 || memcmp(v63, *(const void **)(v61 + 8), v64))
      {
        LODWORD(v141) = 0;
        v61 = *(_QWORD *)v61;
        if (v61)
          v66 = (v61 & 1) == 0;
        else
          v66 = 0;
        if (!v66)
          goto LABEL_109;
      }
    }
    if (v63 != v139)
      free(v63);
    if (v136 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    v76 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v124, v65);
    __s1 = v139;
    LODWORD(v139[0]) = 0;
    *(_QWORD *)((char *)v139 + 4) = v76;
    v138 = 0x2000000003;
    v77 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v119 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v119 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v119;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v78 = __ROR8__(*(_QWORD *)((char *)v139 + 4) + 12, 12);
    v79 = *((_QWORD *)this + 104)
        + 8
        * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                           * ((((0x9DDFEA08EB382D69
                                                             * (v78 ^ ((0x9DDFEA08EB382D69
                                                                      * (v139[0] ^ qword_1ED7EAC80 ^ v78)) >> 47) ^ (0x9DDFEA08EB382D69 * (v139[0] ^ qword_1ED7EAC80 ^ v78)))) >> 32) >> 15) ^ (-348639895 * (v78 ^ (((0x9DDFEA08EB382D69 * (v139[0] ^ qword_1ED7EAC80 ^ v78)) >> 32) >> 15) ^ (-348639895 * (LODWORD(v139[0]) ^ qword_1ED7EAC80 ^ v78)))))) ^ HIDWORD(v139[0])));
    v80 = *(_QWORD *)v79;
    v140 = (unint64_t)v142;
    v141 = 0x2000000000;
    if (v80)
      v81 = (v80 & 1) == 0;
    else
      v81 = 0;
    if (v81)
    {
      v82 = v138;
      v83 = __s1;
      v84 = 4 * v138;
      while (*(_QWORD *)(v80 + 16) != v82 || memcmp(v83, *(const void **)(v80 + 8), v84))
      {
        LODWORD(v141) = 0;
        v80 = *(_QWORD *)v80;
        if (v80)
          v85 = (v80 & 1) == 0;
        else
          v85 = 0;
        if (!v85)
          goto LABEL_135;
      }
    }
    else
    {
LABEL_135:
      v80 = sub_1C484358C((uint64_t)this + 864, 40, 3);
      v86 = sub_1C484358C((uint64_t)this + 864, 4 * v138, 2);
      if ((_DWORD)v138)
      {
        v87 = (int *)__s1;
        v88 = 4 * v138;
        v89 = (_DWORD *)v86;
        do
        {
          v90 = *v87++;
          *v89++ = v90;
          v88 -= 4;
        }
        while (v88);
        v91 = v138;
      }
      else
      {
        v91 = 0;
      }
      *(_QWORD *)v80 = 0;
      *(_QWORD *)(v80 + 8) = v86;
      *(_QWORD *)(v80 + 16) = v91;
      *(_DWORD *)(v80 + 24) = 0x10000;
      *(_WORD *)(v80 + 28) = 0;
      *(_QWORD *)(v80 + 32) = v76;
      v92 = *((_DWORD *)this + 211) + 1;
      v93 = *((_DWORD *)this + 210);
      if (v92 > 2 * v93)
      {
        llvm::FoldingSetBase::GrowBucketCount((uint64_t)v120, 2 * v93, (uint64_t)off_1E813B300);
        v140 = (unint64_t)v142;
        v141 = 0x2000000000;
        v79 = *((_QWORD *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v80 + 8), *(_QWORD *)(v80 + 8) + 4 * *(_QWORD *)(v80 + 16)));
        if ((_QWORD *)v140 != v142)
          free((void *)v140);
        v92 = *((_DWORD *)this + 211) + 1;
      }
      *((_DWORD *)this + 211) = v92;
      v94 = *(_QWORD *)v79;
      if (!*(_QWORD *)v79)
        v94 = v79 | 1;
      *(_QWORD *)v80 = v94;
      *(_QWORD *)v79 = v80;
      v83 = __s1;
    }
    if (v83 != v139)
      free(v83);
    v140 = (unint64_t)v142;
    v142[0] = v123;
    v142[1] = v80;
    v141 = 0x200000002;
    MulExpr = (uint64_t **)llvm::ScalarEvolution::getMulExpr(this, &v140, 0, 0);
    if ((_QWORD *)v140 != v142)
      free((void *)v140);
    UDivExactExpr = llvm::ScalarEvolution::getUDivExactExpr(this, MulExpr, (const llvm::SCEV *)v61);
    if (v125 >= 0x41 && v124)
      MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
    if (v132 >= 0x41 && v131)
      MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
    if (v134 >= 0x41 && v133)
      MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
    if (UDivExactExpr == *((const llvm::SCEV **)this + 6))
      goto LABEL_160;
    v96 = llvm::ScalarEvolution::applyLoopGuards((llvm::AssumptionCache **)this, UDivExactExpr, (const llvm::Loop *)a3);
    v97 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, v96, 0, 0);
    llvm::ConstantRange::getUnsignedMax(v97, (llvm::APInt *)&v140);
    v98 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, UDivExactExpr, 0, 0);
    llvm::ConstantRange::getUnsignedMax(v98, (llvm::APInt *)&__s1);
    if (v141 > 0x40)
    {
      v112 = (((unint64_t)v141 + 63) >> 3) & 0x3FFFFFF8;
      while (v112)
      {
        v113 = *(_QWORD *)(v140 - 8 + v112);
        v114 = *(_QWORD *)((char *)__s1 + v112 - 8);
        v112 -= 8;
        if (v113 != v114)
        {
          if (v113 <= v114)
            goto LABEL_159;
          break;
        }
      }
    }
    else if (v140 < (unint64_t)__s1)
    {
LABEL_159:
      v100 = (void **)&v140;
      goto LABEL_185;
    }
    v100 = &__s1;
LABEL_185:
    v101 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)v100, v99);
    if (v138 >= 0x41 && __s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
    if (v141 >= 0x41 && v140)
      MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
    goto LABEL_161;
  }
  UDivExactExpr = (const llvm::SCEV *)*((_QWORD *)this + 6);
LABEL_160:
  v101 = (unint64_t)UDivExactExpr;
LABEL_161:
  v140 = (unint64_t)&v126;
  v22 = (void **)&v140;
  v17 = a6;
  v18 = UDivExactExpr;
  v19 = (const llvm::SCEV *)v101;
LABEL_162:
  v23 = 1;
LABEL_29:
  llvm::ScalarEvolution::ExitLimit::ExitLimit(v17, (uint64_t)v18, (uint64_t)v19, 0, (uint64_t)v22, v23);
  if (v127 != v126)
    free(v127);
}

uint64_t llvm::ScalarEvolution::howFarToNonZero@<X0>(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  llvm::APInt *v7;
  unsigned int v8;
  unint64_t Constant;

  if (!a2 || *((_WORD *)a2 + 12))
    goto LABEL_7;
  v6 = *((_QWORD *)a2 + 4);
  v7 = (llvm::APInt *)(v6 + 24);
  v8 = *(_DWORD *)(v6 + 32);
  if (v8 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v7) != v8)
      goto LABEL_5;
LABEL_7:
    Constant = *((_QWORD *)this + 6);
    return llvm::ScalarEvolution::ExitLimit::ExitLimit(a3, Constant, Constant, 0, 0, 0);
  }
  if (!*(_QWORD *)v7)
    goto LABEL_7;
LABEL_5:
  Constant = llvm::ScalarEvolution::getConstant(this, *(llvm::Type **)v6, 0, 0);
  return llvm::ScalarEvolution::ExitLimit::ExitLimit(a3, Constant, Constant, 0, 0, 0);
}

void llvm::ScalarEvolution::howManyLessThans(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::Loop *a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v15;
  int v16;
  const llvm::SCEV *v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  llvm::APInt *RangeRef;
  int v24;
  uint64_t v25;
  __int16 v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  const llvm::SCEV *v33;
  uint64_t v34;
  llvm::APInt *v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int8x8_t *v42;
  uint64_t v43;
  uint8x8_t v44;
  int v45;
  int64_t v46;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  int8x8_t *v53;
  int8x8_t v54;
  uint8x8_t v55;
  uint64_t v57;
  llvm::Type *v58;
  uint64_t v59;
  unint64_t ZeroExtendExpr;
  unint64_t AddRecExpr;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  llvm::SCEV *v70;
  int v71;
  unsigned int v72;
  llvm::SCEV *v73;
  llvm::SCEV *v74;
  llvm::SCEV *v75;
  BOOL v76[4];
  BOOL v77[4];
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  _BYTE v82[32];
  uint64_t *v83;
  uint64_t v84;
  _QWORD v85[5];

  v85[3] = *MEMORY[0x1E0C80C00];
  v78 = v82;
  v79 = v82;
  v80 = 4;
  v81 = 0;
  v15 = *((unsigned __int16 *)a2 + 12);
  if (a2)
  {
    v16 = 0;
    v17 = a2;
    if (v15 == 7)
      goto LABEL_22;
  }
  if (v15 != 2)
    goto LABEL_15;
  v17 = 0;
  v18 = *((_QWORD *)a2 + 4);
  if (!v18 || *(_WORD *)(v18 + 24) != 7)
    goto LABEL_16;
  if (*(const llvm::Loop **)(v18 + 48) != a4 || *(_QWORD *)(v18 + 40) != 2)
  {
LABEL_15:
    v17 = 0;
    goto LABEL_16;
  }
  *(_DWORD *)v76 = a5;
  v19 = *(_WORD *)(v18 + 28);
  v20 = v19 & 7;
  if ((v19 & 2) == 0 && llvm::ScalarEvolution::getLoopDisposition(this, a3, a4) == 1)
  {
    v71 = v20;
    v21 = *(_QWORD *)(v18 + 40);
    if (v21 == 2)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8);
    }
    else
    {
      v70 = *(llvm::SCEV **)(v18 + 32);
      v83 = v85;
      v84 = 0x300000000;
      v67 = 8 * v21 - 8;
      if ((unint64_t)v67 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v67 >> 3, 8);
        v68 = v84;
      }
      else
      {
        v68 = 0;
      }
      if (v21 != 1)
      {
        memcpy(&v83[v68], (char *)v70 + 8, 8 * v21 - 8);
        v68 = v84;
      }
      LODWORD(v84) = v68 + ((unint64_t)v67 >> 3);
      v22 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v83, *(uint64_t ***)(v18 + 48));
      if (v83 != v85)
        free(v83);
    }
    RangeRef = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(this, v22, 0, 0);
    llvm::ConstantRange::getUnsignedMin(RangeRef, (llvm::APInt *)&v83);
    if (v84 >= 0x41)
    {
      v45 = 0;
      v46 = ((unint64_t)v84 + 63) >> 6;
      do
      {
        if (v46-- < 1)
          break;
        v48 = v83[v46];
        v45 += __clz(v48);
      }
      while (!v48);
      v49 = v84 | 0xFFFFFFC0;
      if ((v84 & 0x3F) == 0)
        v49 = 0;
      v20 = v71;
      if ((v84 - v45 - v49) >= 0x41)
      {
        if (v83)
          MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
      }
      else
      {
        v50 = *v83;
        MEMORY[0x1CAA32F9C]();
        if (!v50)
          goto LABEL_89;
      }
    }
    else
    {
      v20 = v71;
      if (!v83)
        goto LABEL_89;
    }
    __asm { BR              X11 }
  }
LABEL_89:
  llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, v18, v20);
  if ((*(_WORD *)(v18 + 28) & 2) != 0)
  {
    v57 = *(_QWORD *)(v18 + 40);
    if (v57 == 2)
    {
      v73 = *(llvm::SCEV **)(*(_QWORD *)(v18 + 32) + 8);
    }
    else
    {
      v74 = *(llvm::SCEV **)(v18 + 32);
      v83 = v85;
      v84 = 0x300000000;
      v62 = 8 * v57 - 8;
      if ((unint64_t)v62 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v62 >> 3, 8);
        v63 = v84;
      }
      else
      {
        v63 = 0;
      }
      if (v57 != 1)
      {
        memcpy(&v83[v63], (char *)v74 + 8, 8 * v57 - 8);
        v63 = v84;
      }
      LODWORD(v84) = v63 + ((unint64_t)v62 >> 3);
      v69 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v83, *(uint64_t ***)(v18 + 48));
      if (v83 != v85)
        free(v83);
      v73 = (llvm::SCEV *)v69;
    }
    v58 = (llvm::Type *)*((_QWORD *)a2 + 5);
    v59 = sub_1C4F0E6D8(v18, v58, this, 0);
    ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, v73, v58, 0);
    AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, v59, ZeroExtendExpr, (uint64_t **)a4);
    if (*(_WORD *)(AddRecExpr + 24) == 7)
      v17 = (const llvm::SCEV *)AddRecExpr;
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  a5 = *(_DWORD *)v76;
LABEL_16:
  if (v17)
    v16 = 0;
  else
    v16 = a7;
  if (v16 == 1)
  {
    v24 = a5;
    v25 = llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates((uint64_t)this, (uint64_t)a2, (uint64_t)a4, (llvm::SmallPtrSetImplBase *)&v78);
    a5 = v24;
    v17 = (const llvm::SCEV *)v25;
  }
  if (!v17)
    goto LABEL_83;
LABEL_22:
  if (*((const llvm::Loop **)v17 + 6) != a4 || *((_QWORD *)v17 + 5) != 2)
    goto LABEL_83;
  v75 = a3;
  if (a6)
  {
    if (a5)
      v26 = 4;
    else
      v26 = 2;
    v27 = (unsigned __int16)(v26 & *((_WORD *)v17 + 14)) != 0;
  }
  else
  {
    v27 = 0;
  }
  *(_DWORD *)v77 = a5;
  if (a5)
    v28 = 40;
  else
    v28 = 36;
  v72 = v28;
  v29 = *(_QWORD *)(*((_QWORD *)v17 + 4) + 8);
  v30 = llvm::ScalarEvolution::getRangeRef(this, v29, 1, 0);
  llvm::ConstantRange::getSignedMin(v30, (llvm::APInt *)&v83);
  v31 = sub_1C49591DC((llvm::APInt *)&v83);
  if (v84 >= 0x41 && v83)
    MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
  if ((v31 & 1) == 0)
  {
    if (((v16 | !v27) & 1) != 0
      || !llvm::ScalarEvolution::loopIsFiniteByAssumption(this, a4)
      || (llvm::ScalarEvolution::getLoopProperties(this, a4) & 1) == 0
      || *(_DWORD *)v77 && llvm::ScalarEvolution::isKnownNonPositive(this, (const llvm::SCEV *)v29))
    {
      goto LABEL_83;
    }
    if ((llvm::ScalarEvolution::isKnownNonZero(this, (const llvm::SCEV *)v29) & 1) == 0)
    {
      if (llvm::ScalarEvolution::getLoopDisposition(this, v75, a4) != 1)
        goto LABEL_83;
      llvm::ScalarEvolution::getMinusSCEV((uint64_t)this, **((_QWORD **)v17 + 4), v29);
      if ((llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v72, v38, (uint64_t)v75) & 1) == 0)
        __asm { BR              X11 }
    }
LABEL_97:
    __asm { BR              X11 }
  }
  v32 = 0;
  v33 = (const llvm::SCEV *)v29;
  if (v29 && !*(_WORD *)(v29 + 24))
  {
    v34 = *(_QWORD *)(v29 + 32);
    v35 = (llvm::APInt *)(v34 + 24);
    v36 = *(_DWORD *)(v34 + 32);
    if (v36 > 0x40)
      v37 = llvm::APInt::countLeadingZerosSlowCase(v35) == v36 - 1;
    else
      v37 = *(_QWORD *)v35 == 1;
    v32 = v37;
    v33 = (const llvm::SCEV *)v29;
  }
  if (((v32 | v27) & 1) != 0)
    goto LABEL_97;
  llvm::ScalarEvolution::canIVOverflowOnLT(this, v75, v33);
  if (!v39)
    goto LABEL_97;
  if (llvm::ScalarEvolution::getLoopDisposition(this, v75, a4) == 1)
  {
    v40 = *((_QWORD *)v17 + 5);
    if (v40 == 2)
    {
      v41 = *(_QWORD *)(*((_QWORD *)v17 + 4) + 8);
    }
    else
    {
      v64 = *((_QWORD *)v17 + 4);
      v83 = v85;
      v84 = 0x300000000;
      v65 = 8 * v40 - 8;
      if ((unint64_t)v65 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v65 >> 3, 8);
        v66 = v84;
      }
      else
      {
        v66 = 0;
      }
      if (v40 != 1)
      {
        memcpy(&v83[v66], (const void *)(v64 + 8), 8 * v40 - 8);
        v66 = v84;
      }
      LODWORD(v84) = v66 + ((unint64_t)v65 >> 3);
      v41 = sub_1C618AB20((uint64_t *)this, (uint64_t)&v83, *((uint64_t ***)v17 + 6));
      if (v83 != v85)
        free(v83);
    }
    if (v41 && !*(_WORD *)(v41 + 24))
    {
      v42 = *(int8x8_t **)(v41 + 32);
      v43 = v42[4].u32[0];
      if (v43 > 0x40)
      {
        v51 = 0;
        v52 = (unint64_t)(v43 + 63) >> 6;
        v53 = (int8x8_t *)v42[3];
        do
        {
          v54 = *v53++;
          v55 = (uint8x8_t)vcnt_s8(v54);
          v55.i16[0] = vaddlv_u8(v55);
          v51 += v55.i32[0];
          --v52;
        }
        while (v52);
        if (v51 != 1 || a6 == 0)
          goto LABEL_83;
      }
      else
      {
        v44 = (uint8x8_t)vcnt_s8(v42[3]);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] != 1 || (a6 & 1) == 0)
          goto LABEL_83;
      }
      if ((llvm::ScalarEvolution::getLoopProperties(this, a4) & 1) != 0
        && llvm::ScalarEvolution::loopIsFiniteByAssumption(this, a4))
      {
        goto LABEL_97;
      }
    }
  }
LABEL_83:
  llvm::ScalarEvolution::ExitLimit::ExitLimit(a8, *((_QWORD *)this + 6), *((_QWORD *)this + 6), 0, 0, 0);
  if (v79 != v78)
    free(v79);
}

void llvm::ScalarEvolution::howManyGreaterThans(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::Loop *a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  const llvm::SCEV *v16;
  BOOL v17;
  __int16 v18;
  _BOOL4 v19;
  int v20;
  unint64_t NegativeSCEV;
  uint64_t RangeRef;
  char v23;
  _BOOL4 v25;
  uint64_t v26;
  llvm::APInt *v27;
  unsigned int v28;
  BOOL v29;
  const llvm::SCEV *v30;
  uint64_t AddExpr;
  uint64_t v32;
  unsigned int v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[32];
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x1E0C80C00];
  v34 = v38;
  v35 = v38;
  v36 = 4;
  v37 = 0;
  if (llvm::ScalarEvolution::getLoopDisposition(this, a3, a4) == 1)
  {
    if (*((_WORD *)a2 + 12) == 7)
      v16 = a2;
    else
      v16 = 0;
    if (v16)
      v17 = 1;
    else
      v17 = a7 == 0;
    if (!v17)
      v16 = (const llvm::SCEV *)llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates((uint64_t)this, (uint64_t)a2, (uint64_t)a4, (llvm::SmallPtrSetImplBase *)&v34);
    if (v16 && *((const llvm::Loop **)v16 + 6) == a4 && *((_QWORD *)v16 + 5) == 2)
    {
      if (a6)
      {
        if (a5)
          v18 = 4;
        else
          v18 = 2;
        v19 = (unsigned __int16)(v18 & *((_WORD *)v16 + 14)) != 0;
      }
      else
      {
        v19 = 0;
      }
      if (a5)
        v20 = 38;
      else
        v20 = 34;
      v33 = v20;
      NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this, *(_QWORD *)(*((_QWORD *)v16 + 4) + 8));
      RangeRef = llvm::ScalarEvolution::getRangeRef(this, NegativeSCEV, 1, 0);
      llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v39);
      v23 = sub_1C49591DC((llvm::APInt *)&v39);
      if (v40 >= 0x41 && v39)
        MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      if ((v23 & 1) != 0)
      {
        if (NegativeSCEV && *(_WORD *)(NegativeSCEV + 24) == 0)
        {
          v26 = *(_QWORD *)(NegativeSCEV + 32);
          v27 = (llvm::APInt *)(v26 + 24);
          v28 = *(_DWORD *)(v26 + 32);
          v29 = v28 > 0x40
              ? llvm::APInt::countLeadingZerosSlowCase(v27) == v28 - 1
              : *(_QWORD *)v27 == 1;
          v25 = v29;
        }
        else
        {
          v25 = 0;
        }
        if (v25 || v19 || !llvm::ScalarEvolution::canIVOverflowOnGT(this, a3, (const llvm::SCEV *)NegativeSCEV, a5))
        {
          v30 = (const llvm::SCEV *)**((_QWORD **)v16 + 4);
          v39 = v41;
          v41[0] = v30;
          v41[1] = NegativeSCEV;
          v40 = 0x200000002;
          AddExpr = llvm::ScalarEvolution::getAddExpr(this, &v39, 0, 0);
          if (v39 != v41)
            free(v39);
          if ((llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v33, AddExpr, (uint64_t)a3) & 1) == 0)
          {
            v32 = a5 ? 39 : 35;
            if ((llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v32, (uint64_t)v30, (uint64_t)a3) & 1) == 0)
            {
              if (a5)
                llvm::ScalarEvolution::getSMinExpr(this, a3, v30);
              else
                llvm::ScalarEvolution::getUMinExpr(this, a3, v30, 0);
            }
          }
          __asm { BR              X11 }
        }
      }
    }
  }
  llvm::ScalarEvolution::ExitLimit::ExitLimit(a8, *((_QWORD *)this + 6), *((_QWORD *)this + 6), 0, 0, 0);
  if (v35 != v34)
    free(v35);
}

const llvm::SCEV *llvm::ScalarEvolution::getSCEVAtScope(llvm::ScalarEvolution *this, llvm::Value *a2, const llvm::Loop *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  unsigned int v11;
  const llvm::SCEV *SCEVIter;

  v5 = *((_QWORD *)this + 13);
  v6 = *((_DWORD *)this + 30);
  if (!v6)
  {
LABEL_7:
    v8 = v5 + 48 * v6;
    goto LABEL_8;
  }
  v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = v5 + 48 * v7;
  v9 = *(llvm::Value **)(v8 + 24);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v8 = v5 + 48 * v7;
      v9 = *(llvm::Value **)(v8 + 24);
      if (v9 == a2)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 == v5 + 48 * v6 || (SCEVIter = *(const llvm::SCEV **)(v8 + 40)) == 0)
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, (unint64_t)a2);
  return llvm::ScalarEvolution::getSCEVAtScope(this, SCEVIter, a3);
}

uint64_t sub_1C4F3EF30(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(a1 - 8);
  else
    v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  if (*(_QWORD *)(v3 + 32) == a2)
    return 0;
  v4 = (v2 >> 1) & 0x3FFFFFF;
  v5 = (v4 - 1);
  if (v4 == 1)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 2 * v5;
  do
  {
    v9 = a1 - 32 * (v2 & 0x7FFFFFF);
    if ((v2 & 0x40000000) != 0)
      v9 = *(_QWORD *)(a1 - 8);
    v10 = (v6 + 3);
    if (v6 == 0x1FFFFFFFCLL)
      v10 = 1;
    if (*(_QWORD *)(v9 + 32 * v10) == a2)
    {
      if (v7)
        return 0;
      v11 = a1 - 32 * (v2 & 0x7FFFFFF);
      if ((v2 & 0x40000000) != 0)
        v11 = *(_QWORD *)(a1 - 8);
      v7 = *(_QWORD *)(v11 + 32 * (((_DWORD)v6 + 2) & 0xFFFFFFFE));
    }
    v6 += 2;
  }
  while (v8 != v6);
  return v7;
}

const llvm::APInt *llvm::ScalarEvolution::getConstantEvolutionLoopExitValue(llvm::ScalarEvolution *this, llvm::PHINode *a2, const llvm::APInt *a3, const llvm::Loop *a4)
{
  BOOL v8;
  unint64_t v10;
  unsigned int v11;
  const llvm::APInt *v12;
  uint64_t v13;
  uint64_t LoopLatch;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  llvm::PHINode *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  const llvm::APInt *v29;
  int v30;
  llvm *v31;
  llvm *v32;
  llvm *v33;
  char v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::PHINode *v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  llvm *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  llvm::DataLayout *v64;
  llvm::PHINode *v65;
  uint64_t *v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  llvm::PHINode *v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[18];

  v75[16] = *MEMORY[0x1E0C80C00];
  v72 = a2;
  v73 = 0;
  if (sub_1C4F5D06C(*((_QWORD *)this + 77), *((_DWORD *)this + 158), (uint64_t)a2, &v73))
    v8 = v73 == (void *)(*((_QWORD *)this + 77) + 16 * *((unsigned int *)this + 158));
  else
    v8 = 1;
  if (!v8)
    return (const llvm::APInt *)*((_QWORD *)v73 + 1);
  v10 = dword_1ED7F33F8;
  v11 = *((_DWORD *)a3 + 2);
  if (v11 >= 0x41 && v11 - llvm::APInt::countLeadingZerosSlowCase(a3) > 0x40)
    goto LABEL_12;
  v12 = *(const llvm::APInt **)a3;
  if (v11 < 0x41)
    v12 = a3;
  if (*(_QWORD *)v12 > v10)
  {
LABEL_12:
    a3 = 0;
    sub_1C61B3380((uint64_t)this + 616, (uint64_t *)&v72)[1] = 0;
    return a3;
  }
  v61 = sub_1C61B3380((uint64_t)this + 616, (uint64_t *)&v72);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v13 = **((_QWORD **)a4 + 4);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a4);
  if (!LoopLatch)
    goto LABEL_95;
  if (*(_QWORD *)(v13 + 40) == v13 + 40)
    goto LABEL_100;
  v15 = *(_QWORD *)(v13 + 48);
  v16 = (_QWORD *)(v15 - 24);
  v17 = v15 ? v15 - 24 : 0;
  if (!v15 || *(_BYTE *)(v17 + 16) != 83)
    goto LABEL_100;
  v18 = LoopLatch;
  v62 = v13;
  do
  {
    v19 = sub_1C4F3F59C((uint64_t)v16, v18);
    if (v19)
    {
      v73 = v16;
      sub_1C4F5E39C((uint64_t)&v69, (uint64_t *)&v73)[1] = v19;
    }
    v20 = v16[4];
    v16 = (_QWORD *)(v20 - 24);
    if (v20)
      v21 = v20 - 24;
    else
      v21 = 0;
  }
  while (v20 && *(_BYTE *)(v21 + 16) == 83);
  if (!v71)
    goto LABEL_100;
  v22 = (v71 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v23 = (llvm::PHINode *)v69[2 * v22];
  if (v23 != a2)
  {
    v57 = 1;
    while (v23 != (llvm::PHINode *)-4096)
    {
      v58 = v22 + v57++;
      v22 = v58 & (v71 - 1);
      v23 = (llvm::PHINode *)v69[2 * v22];
      if (v23 == a2)
        goto LABEL_30;
    }
LABEL_100:
    a3 = 0;
    v61[1] = 0;
    goto LABEL_101;
  }
LABEL_30:
  v24 = *((_DWORD *)a2 + 5);
  v25 = v24 & 0x7FFFFFF;
  if ((v24 & 0x7FFFFFF) != 0)
  {
    v26 = 0;
    while (1)
    {
      v27 = (char *)a2 - 32 * v25;
      if ((v24 & 0x40000000) != 0)
        v27 = (char *)*((_QWORD *)a2 - 1);
      if (*(_QWORD *)&v27[32 * *((unsigned int *)a2 + 15) + 8 * v26] == v18)
        break;
      if (v25 == ++v26)
        goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    LODWORD(v26) = -1;
  }
  if ((v24 & 0x40000000) != 0)
    v28 = (char *)*((_QWORD *)a2 - 1);
  else
    v28 = (char *)a2 - 32 * v25;
  if (*((_DWORD *)a3 + 2) >= 0x41u)
    v29 = *(const llvm::APInt **)a3;
  else
    v29 = a3;
  v59 = *(_DWORD *)v29;
  if (!*(_DWORD *)v29)
  {
LABEL_93:
    v73 = a2;
    a3 = (const llvm::APInt *)sub_1C4F5E39C((uint64_t)&v69, (uint64_t *)&v73)[1];
    v61[1] = a3;
    goto LABEL_101;
  }
  v30 = 0;
  v60 = *(_QWORD *)&v28[32 * v26];
  v64 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272);
  while (1)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v31 = sub_1C4F3F638(v60, (uint64_t)a4, (uint64_t)&v69, v64, *((llvm::DSOLocalEquivalent ***)this + 2));
    if (!v31)
      break;
    v32 = v31;
    v63 = v30;
    v73 = a2;
    sub_1C4F5E39C((uint64_t)&v66, (uint64_t *)&v73)[1] = v31;
    v73 = a2;
    v33 = (llvm *)sub_1C4F5E39C((uint64_t)&v69, (uint64_t *)&v73)[1];
    v34 = v32 == v33;
    v73 = v75;
    v74 = 0x800000000;
    v35 = v69;
    v36 = v70;
    v37 = &v69[2 * v71];
    if ((_DWORD)v70)
    {
      if (v71)
      {
        v38 = 16 * v71;
        v39 = v69;
        while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v39 += 2;
          v38 -= 16;
          if (!v38)
            goto LABEL_50;
        }
      }
      else
      {
        v39 = v69;
      }
    }
    else
    {
LABEL_50:
      v39 = &v69[2 * v71];
    }
    v40 = &v69[2 * v71];
    v41 = v62;
    if (v39 == v40)
    {
      if (v32 != v33)
        goto LABEL_87;
    }
    else
    {
      do
      {
        if (*(_BYTE *)(*v39 + 16) == 83)
          v42 = (llvm::PHINode *)*v39;
        else
          v42 = 0;
        if (v42)
          v43 = v42 == a2;
        else
          v43 = 1;
        if (!v43 && *((_QWORD *)v42 + 5) == v41)
        {
          sub_1C61B1608((uint64_t)&v73, (uint64_t)v42, v39 + 1);
          v41 = v62;
        }
        v44 = v39 + 2;
        v39 = v37;
        if (v44 != v37)
        {
          v39 = v44;
          while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v39 += 2;
            if (v39 == v37)
            {
              v39 = v37;
              break;
            }
          }
        }
      }
      while (v39 != v40);
      if ((_DWORD)v74)
      {
        v45 = (uint64_t *)v73;
        v46 = (uint64_t *)((char *)v73 + 16 * v74);
        do
        {
          v47 = *v45;
          v65 = (llvm::PHINode *)*v45;
          v48 = sub_1C4F5E39C((uint64_t)&v66, (uint64_t *)&v65);
          v49 = (llvm *)v48[1];
          if (!v49)
          {
            v50 = *(_DWORD *)(v47 + 20);
            v51 = v50 & 0x7FFFFFF;
            if ((v50 & 0x7FFFFFF) != 0)
            {
              v52 = 0;
              while (1)
              {
                v53 = v47 - 32 * v51;
                if ((v50 & 0x40000000) != 0)
                  v53 = *(_QWORD *)(v47 - 8);
                if (*(_QWORD *)(v53 + 32 * *(unsigned int *)(v47 + 60) + 8 * v52) == v18)
                  break;
                if (v51 == ++v52)
                  goto LABEL_77;
              }
            }
            else
            {
LABEL_77:
              LODWORD(v52) = -1;
            }
            if ((v50 & 0x40000000) != 0)
              v54 = *(_QWORD *)(v47 - 8);
            else
              v54 = v47 - 32 * v51;
            v49 = sub_1C4F3F638(*(_QWORD *)(v54 + 32 * v52), (uint64_t)a4, (uint64_t)&v69, v64, *((llvm::DSOLocalEquivalent ***)this + 2));
            v48[1] = v49;
          }
          v34 &= v49 == (llvm *)v45[1];
          v45 += 2;
        }
        while (v45 != v46);
      }
      if ((v34 & 1) == 0)
      {
        v35 = v69;
        v36 = v70;
LABEL_87:
        v69 = v66;
        v66 = v35;
        v55 = HIDWORD(v70);
        v70 = v67;
        v67 = __PAIR64__(v55, v36);
        v71 = v68;
        v56 = 1;
        goto LABEL_89;
      }
    }
    v65 = a2;
    v56 = 0;
    a3 = (const llvm::APInt *)sub_1C4F5E39C((uint64_t)&v69, (uint64_t *)&v65)[1];
    v61[1] = a3;
LABEL_89:
    if (v73 != v75)
      free(v73);
    MEMORY[0x1CAA32FB4](v66, 8);
    if ((v56 & 1) == 0)
      goto LABEL_101;
    v30 = v63 + 1;
    if (v63 + 1 == v59)
      goto LABEL_93;
  }
  MEMORY[0x1CAA32FB4](0, 8);
LABEL_95:
  a3 = 0;
LABEL_101:
  MEMORY[0x1CAA32FB4](v69, 8);
  return a3;
}

uint64_t sub_1C4F3F59C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 8 * v3;
    v8 = a1 - 32 * v3;
    while (1)
    {
      if ((v2 & 0x40000000) != 0)
      {
        v10 = *(_QWORD *)(a1 - 8);
        v9 = *(_QWORD *)(v10 + 32 * *(unsigned int *)(a1 + 60) + v5);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 32 * *(unsigned int *)(a1 + 60) + v5);
        v10 = v8;
      }
      if (v9 == a2)
        goto LABEL_14;
      v11 = *(_QWORD *)(v10 + v4);
      if (v11)
        v12 = *(unsigned __int8 *)(v11 + 16) > 0x14u;
      else
        v12 = 1;
      if (v12)
        return 0;
      if (v6 == v11)
      {
LABEL_14:
        v11 = v6;
      }
      else if (v6)
      {
        return 0;
      }
      v5 += 8;
      v4 += 32;
      v6 = v11;
      if (v7 == v5)
        return v11;
    }
  }
  return 0;
}

llvm *sub_1C4F3F638(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DataLayout *a4, llvm::DSOLocalEquivalent **a5)
{
  unsigned int v10;
  llvm *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  const llvm::DataLayout *v19;
  int v20;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  llvm *v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;

  v10 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v10 < 0x15)
    return (llvm *)a1;
  if (v10 < 0x1C)
    return 0;
  v12 = *(_DWORD *)(a3 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)a3;
    v14 = v12 - 1;
    v15 = (v12 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v15);
    if (v16 == a1)
    {
LABEL_10:
      v11 = *(llvm **)(v13 + 16 * v15 + 8);
      if (v11)
        return v11;
    }
    else
    {
      v17 = 1;
      while (v16 != -4096)
      {
        v18 = v15 + v17++;
        v15 = v18 & v14;
        v16 = *(_QWORD *)(v13 + 16 * v15);
        if (v16 == a1)
          goto LABEL_10;
      }
    }
  }
  if (!sub_1C4F5709C(a1, a2))
    return 0;
  v20 = *(unsigned __int8 *)(a1 + 16);
  if (v20 == 83)
    return 0;
  v22 = *(_DWORD *)(a1 + 20);
  v23 = v22 & 0x7FFFFFF;
  if ((v22 & 0x7FFFFFF) != 0)
  {
    v24 = (char *)operator new(8 * v23);
    bzero(v24, 8 * v23);
    v25 = 0;
    v40 = &v24[8 * v23];
    v41 = (uint64_t *)v24;
    v26 = 32 * v23;
    v27 = (uint64_t *)v24;
    while (1)
    {
      v28 = *(_DWORD *)(a1 + 20);
      if ((v28 & 0x40000000) != 0)
        v29 = *(_QWORD *)(a1 - 8);
      else
        v29 = a1 - 32 * (v28 & 0x7FFFFFF);
      v30 = *(_QWORD *)(v29 + v25);
      if (*(unsigned __int8 *)(v30 + 16) <= 0x1Bu)
        v31 = 0;
      else
        v31 = v30;
      v42 = v31;
      if (v31)
      {
        v32 = sub_1C4F3F638(v31, a2, a3, a4, a5);
        v43 = 0;
        v33 = sub_1C4F57124(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v31, &v43);
        v34 = v43;
        if ((v33 & 1) == 0)
        {
          v34 = sub_1C4F571B8(a3, &v42, v43);
          *v34 = v31;
          v34[1] = 0;
        }
        v34[1] = v32;
        if (!v32)
          goto LABEL_43;
        *v27 = v32;
      }
      else
      {
        if ((v28 & 0x40000000) != 0)
          v35 = *(_QWORD *)(a1 - 8);
        else
          v35 = a1 - 32 * (v28 & 0x7FFFFFF);
        v36 = *(_QWORD *)(v35 + v25);
        if (*(unsigned __int8 *)(v36 + 16) >= 0x15u)
          v36 = 0;
        *v27 = v36;
        if (!v36)
        {
LABEL_43:
          v11 = 0;
          v38 = v41;
          goto LABEL_45;
        }
      }
      v25 += 32;
      ++v27;
      if (v26 == v25)
      {
        v20 = *(unsigned __int8 *)(a1 + 16);
        v37 = v40;
        v38 = v41;
        goto LABEL_37;
      }
    }
  }
  v38 = 0;
  v37 = 0;
LABEL_37:
  if ((v20 - 83) >= 0xFFFFFFFE)
  {
    v39 = llvm::ConstantFoldCompareInstOperands(*(_WORD *)(a1 + 18) & 0x3F, *v38, v38[1], a4, (uint64_t)a5);
    goto LABEL_42;
  }
  if (v20 == 60 && (*(_WORD *)(a1 + 18) & 1) == 0)
  {
    v39 = (llvm *)llvm::ConstantFoldLoadFromConstPtr((llvm *)*v38, *(llvm::Constant **)a1, a4, v19);
LABEL_42:
    v11 = v39;
    goto LABEL_45;
  }
  v11 = sub_1C4DECDA4((int **)a1, (llvm *)(v20 - 28), (llvm::Type **)v38, (v37 - (char *)v38) >> 3, (__int32 **)a4, a5);
  if (v38)
LABEL_45:
    operator delete(v38);
  return v11;
}

void llvm::ScalarEvolution::computeSCEVAtScope(llvm::ScalarEvolution *this, const llvm::SCEV **a2, const llvm::Loop *a3)
{
  const llvm::SCEV **AddRecExpr;
  const llvm::Loop *v4;
  const llvm::SCEV *v6;
  size_t v7;
  unint64_t v8;
  const llvm::SCEV *v9;
  uint64_t v10;
  llvm::SCEV *SCEVAtScope;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const llvm::SCEV *v15;
  const llvm::SCEV *v16;
  const llvm::SCEV *v17;
  size_t v18;
  unint64_t v19;
  const llvm::SCEV *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Exact;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  llvm::APInt *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t BackedgeTakenInfo;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  llvm::Value *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  llvm::Value *v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  int v98;
  llvm::Value **v99;
  llvm::Value *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  llvm::Value *v105;
  int v106;
  unsigned int v107;
  const llvm::SCEV *SCEVIter;
  int v109;
  uint64_t v110;
  llvm::Value **v111;
  uint64_t v112;
  char v113;
  llvm::Value **v114;
  uint64_t *v115;
  BOOL v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t *v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  const llvm::SCEV *v125;
  uint64_t v126;
  BOOL v127;
  llvm::CastInst *v128;
  uint64_t Cast;
  int CastOpcode;
  int v131;
  llvm::Value *v132;
  llvm::UndefValue *v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  llvm::Value *v138;
  int v139;
  unsigned int v140;
  const llvm::APInt *ConstantEvolutionLoopExitValue;
  llvm::Value *v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  const llvm::APInt *v147;
  int v148;
  unsigned int v149;
  llvm::ScalarEvolution *v150;
  llvm *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  _QWORD v155[9];

  AddRecExpr = a2;
  v155[8] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  switch(*((_WORD *)a2 + 12))
  {
    case 1:
    case 2:
    case 3:
    case 0xD:
      SCEVAtScope = (llvm::SCEV *)llvm::ScalarEvolution::getSCEVAtScope(this, a2[4], a3);
      if (SCEVAtScope != AddRecExpr[4])
        llvm::ScalarEvolution::getCastExpr(this, *((unsigned __int16 *)AddRecExpr + 12), SCEVAtScope, AddRecExpr[5]);
      return;
    case 4:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      v6 = a2[5];
      if (!(_DWORD)v6)
        return;
      v7 = 0;
      v8 = 0;
      v9 = a2[4];
      while (1)
      {
        v10 = llvm::ScalarEvolution::getSCEVAtScope(this, *((const llvm::SCEV **)v9 + v8), v4);
        v9 = AddRecExpr[4];
        if (v10 != *((_QWORD *)v9 + v8))
          break;
        ++v8;
        v7 += 8;
        if (v6 == v8)
          return;
      }
      v12 = v10;
      v153 = v155;
      v154 = 0x800000000;
      if (v8 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v8, 8);
        v13 = v154;
        v14 = v153;
      }
      else
      {
        if (!(_DWORD)v8)
        {
          v44 = 0;
          v45 = 8;
LABEL_43:
          v46 = v8 + v44;
          LODWORD(v154) = v46;
          if (v46 >= v45)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v46 + 1, 8);
            v46 = v154;
          }
          *((_QWORD *)v153 + v46) = v12;
          LODWORD(v154) = v154 + 1;
          if ((_DWORD)v6 - 1 != (_DWORD)v8)
          {
            v48 = v8 + 1;
            do
            {
              v49 = llvm::ScalarEvolution::getSCEVAtScope(this, *((const llvm::SCEV **)AddRecExpr[4] + v48), v4);
              v50 = v154;
              if (v154 >= (unint64_t)HIDWORD(v154))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v154 + 1, 8);
                v50 = v154;
              }
              *((_QWORD *)v153 + v50) = v49;
              LODWORD(v154) = v154 + 1;
              ++v48;
            }
            while ((_DWORD)v6 != v48);
          }
          v47 = *((unsigned __int16 *)AddRecExpr + 12);
          if ((_DWORD)v47 == 5)
          {
            llvm::ScalarEvolution::getMulExpr(this, &v153, *((_WORD *)AddRecExpr + 14) & 7, 0);
          }
          else if ((_DWORD)v47 == 4)
          {
            llvm::ScalarEvolution::getAddExpr(this, &v153, *((_WORD *)AddRecExpr + 14) & 7, 0);
          }
          else if ((v47 & 0xFFFC) == 8)
          {
            llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, v47, (uint64_t **)&v153);
          }
          else
          {
            llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)this, 12, (unsigned int *)&v153);
          }
          if (v153 != v155)
            free(v153);
          return;
        }
        v13 = 0;
        v14 = v155;
      }
      memcpy(&v14[v13], v9, v7);
      v44 = v154;
      v45 = HIDWORD(v154);
      goto LABEL_43;
    case 6:
      v15 = (const llvm::SCEV *)llvm::ScalarEvolution::getSCEVAtScope(this, a2[4], a3);
      v16 = (const llvm::SCEV *)llvm::ScalarEvolution::getSCEVAtScope(this, AddRecExpr[5], v4);
      if (__PAIR128__((unint64_t)v16, (unint64_t)v15) != *((_OWORD *)AddRecExpr + 2))
        llvm::ScalarEvolution::getUDivExpr(this, v15, v16);
      return;
    case 7:
      v17 = a2[5];
      if (!(_DWORD)v17)
        goto LABEL_77;
      v18 = 0;
      v19 = 0;
      v20 = a2[4];
      while (1)
      {
        v21 = llvm::ScalarEvolution::getSCEVAtScope(this, *((const llvm::SCEV **)v20 + v19), v4);
        v20 = AddRecExpr[4];
        if (v21 != *((_QWORD *)v20 + v19))
          break;
        ++v19;
        v18 += 8;
        if (v17 == v19)
          goto LABEL_77;
      }
      v51 = v21;
      v153 = v155;
      v154 = 0x800000000;
      if (v19 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v19, 8);
        v52 = v154;
        v53 = v153;
      }
      else
      {
        if (!(_DWORD)v19)
        {
          v54 = 0;
          v55 = 8;
LABEL_65:
          v56 = v19 + v54;
          LODWORD(v154) = v56;
          if (v56 >= v55)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v56 + 1, 8);
            v56 = v154;
          }
          *((_QWORD *)v153 + v56) = v51;
          LODWORD(v154) = v154 + 1;
          if ((_DWORD)v17 - 1 != (_DWORD)v19)
          {
            v60 = v19 + 1;
            do
            {
              v61 = llvm::ScalarEvolution::getSCEVAtScope(this, *((const llvm::SCEV **)AddRecExpr[4] + v60), v4);
              v62 = v154;
              if (v154 >= (unint64_t)HIDWORD(v154))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v154 + 1, 8);
                v62 = v154;
              }
              *((_QWORD *)v153 + v62) = v61;
              LODWORD(v154) = v154 + 1;
              ++v60;
            }
            while ((_DWORD)v17 != v60);
          }
          AddRecExpr = (const llvm::SCEV **)llvm::ScalarEvolution::getAddRecExpr((uint64_t *)this, (uint64_t **)&v153, (uint64_t **)AddRecExpr[6]);
          if (AddRecExpr)
            v57 = *((unsigned __int16 *)AddRecExpr + 12) == 7;
          else
            v57 = 0;
          v58 = !v57;
          if (v153 != v155)
            free(v153);
          if ((v58 & 1) == 0)
          {
LABEL_77:
            v59 = (uint64_t)AddRecExpr[6];
            if ((const llvm::Loop *)v59 != v4)
            {
              while (v4)
              {
                v4 = *(const llvm::Loop **)v4;
                if (v4 == (const llvm::Loop *)v59)
                  return;
              }
              BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, AddRecExpr[6]);
              if (llvm::ScalarEvolution::BackedgeTakenInfo::getExact(BackedgeTakenInfo, v59, (uint64_t)this, 0) != *((_QWORD *)this + 6))
                llvm::SCEVAddRecExpr::evaluateAtIteration((uint64_t)AddRecExpr[4], (int)AddRecExpr[5]);
            }
          }
          return;
        }
        v52 = 0;
        v53 = v155;
      }
      memcpy(&v53[v52], v20, v18);
      v54 = v154;
      v55 = HIDWORD(v154);
      goto LABEL_65;
    case 0xE:
      v22 = (uint64_t)*(a2 - 1);
      v23 = *(unsigned __int8 *)(v22 + 16);
      if (v22)
        v24 = v23 >= 0x1C;
      else
        v24 = 0;
      if (!v24)
        return;
      if (v23 != 83)
        goto LABEL_151;
      v25 = (uint64_t *)*((_QWORD *)this + 5);
      v26 = *((_DWORD *)v25 + 4);
      if (!v26)
        goto LABEL_136;
      v27 = *(_QWORD *)(v22 + 40);
      v28 = *v25;
      v29 = v26 - 1;
      v30 = ((v27 >> 4) ^ (v27 >> 9)) & (v26 - 1);
      v31 = *(_QWORD *)(v28 + 16 * v30);
      if (v27 == v31)
        goto LABEL_30;
      v32 = 1;
      break;
    default:
      return;
  }
  do
  {
    if (v31 == -4096)
      goto LABEL_136;
    v33 = v30 + v32++;
    v30 = v33 & v29;
    v31 = *(_QWORD *)(v28 + 16 * v30);
  }
  while (v27 != v31);
LABEL_30:
  v34 = *(_QWORD *)(v28 + 16 * v30 + 8);
  if (!v34 || *(const llvm::Loop **)v34 != a3 || v27 != **(_QWORD **)(v34 + 32))
    goto LABEL_136;
  v35 = llvm::ScalarEvolution::getBackedgeTakenInfo(this, (const llvm::Loop *)v34);
  Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact(v35, v34, (uint64_t)this, 0);
  v37 = Exact;
  v38 = *(unsigned __int16 *)(Exact + 24);
  if (Exact)
    v39 = v38 == 0;
  else
    v39 = 0;
  if (v39)
  {
    v40 = v22;
    v152 = Exact;
    v41 = *(_QWORD *)(Exact + 32);
    v42 = (llvm::APInt *)(v41 + 24);
    v43 = *(_DWORD *)(v41 + 32);
    if (v43 >= 0x41)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v42) != v43)
        goto LABEL_116;
    }
    else if (*(_QWORD *)v42)
    {
      goto LABEL_116;
    }
    v64 = *(_DWORD *)(v40 + 20);
    v65 = v64 & 0x7FFFFFF;
    if ((v64 & 0x7FFFFFF) != 0)
    {
      v66 = 0;
      v67 = 0;
      v68 = 0;
      do
      {
        if ((v64 & 0x40000000) != 0)
          v69 = *(_QWORD *)(v40 - 8);
        else
          v69 = v40 - 32 * v65;
        v70 = sub_1C477672C(v34 + 56, *(_QWORD *)(v69 + 32 * *(unsigned int *)(v40 + 60) + 8 * v67));
        v71 = *(_QWORD *)(v34 + 64);
        v72 = 72;
        if (v71 == *(_QWORD *)(v34 + 56))
          v72 = 76;
        if (v70 == (_QWORD *)(v71 + 8 * *(unsigned int *)(v34 + v72)))
        {
          v64 = *(_DWORD *)(v40 + 20);
          if (v68)
          {
            if ((v64 & 0x40000000) != 0)
              v73 = *(_QWORD *)(v40 - 8);
            else
              v73 = v40 - 32 * (v64 & 0x7FFFFFF);
            if (v68 != *(llvm::Value **)(v73 + v66))
              goto LABEL_116;
          }
          else
          {
            if ((v64 & 0x40000000) != 0)
              v74 = *(_QWORD *)(v40 - 8);
            else
              v74 = v40 - 32 * (v64 & 0x7FFFFFF);
            v68 = *(llvm::Value **)(v74 + v66);
          }
        }
        else
        {
          v64 = *(_DWORD *)(v40 + 20);
        }
        ++v67;
        v65 = v64 & 0x7FFFFFF;
        v66 += 32;
      }
      while (v67 < v65);
      if (v68)
      {
        v75 = *((_QWORD *)this + 13);
        v76 = *((_DWORD *)this + 30);
        if (v76)
        {
          v77 = (v76 - 1) & ((v68 >> 4) ^ (v68 >> 9));
          v78 = v75 + 48 * v77;
          v79 = *(llvm::Value **)(v78 + 24);
          if (v79 == v68)
            goto LABEL_219;
          v80 = 1;
          while (v79 != (llvm::Value *)-4096)
          {
            v81 = v77 + v80++;
            v77 = v81 & (v76 - 1);
            v78 = v75 + 48 * v77;
            v79 = *(llvm::Value **)(v78 + 24);
            if (v79 == v68)
              goto LABEL_219;
          }
        }
        v78 = v75 + 48 * v76;
LABEL_219:
        if (v78 != v75 + 48 * v76 && *(_QWORD *)(v78 + 40))
          return;
        v150 = this;
        v142 = v68;
LABEL_226:
        llvm::ScalarEvolution::createSCEVIter(v150, v142);
        return;
      }
    }
LABEL_116:
    v37 = v152;
    v38 = *(unsigned __int16 *)(v152 + 24);
    v22 = v40;
  }
  if (v38 != 15)
  {
    if (llvm::ScalarEvolution::isKnownPositive(this, (const llvm::SCEV *)v37))
    {
      v82 = *(_DWORD *)(v22 + 20);
      if ((v82 & 0x7FFFFFF) == 2)
      {
        if ((v82 & 0x40000000) != 0)
          v83 = *(_QWORD *)(v22 - 8);
        else
          v83 = v22 - 64;
        v84 = sub_1C477672C(v34 + 56, *(_QWORD *)(v83 + 32 * *(unsigned int *)(v22 + 60)));
        v85 = *(_QWORD *)(v34 + 64);
        v86 = 72;
        if (v85 == *(_QWORD *)(v34 + 56))
          v86 = 76;
        v87 = (_QWORD *)(v85 + 8 * *(unsigned int *)(v34 + v86));
        v88 = *(_DWORD *)(v22 + 20);
        v89 = (v88 & 0x40000000) != 0 ? *(_QWORD *)(v22 - 8) : v22 - 32 * (v88 & 0x7FFFFFF);
        v90 = *(_QWORD *)(v89 + 32 * (v84 == v87));
        if (llvm::Loop::isLoopInvariant(v34, v90))
        {
          v91 = *((_QWORD *)this + 13);
          v92 = *((_DWORD *)this + 30);
          if (v92)
          {
            v93 = (v92 - 1) & ((v90 >> 4) ^ (v90 >> 9));
            v94 = v91 + 48 * v93;
            v95 = *(_QWORD *)(v94 + 24);
            if (v95 == v90)
              goto LABEL_223;
            v96 = 1;
            while (v95 != -4096)
            {
              v97 = v93 + v96++;
              v93 = v97 & (v92 - 1);
              v94 = v91 + 48 * v93;
              v95 = *(_QWORD *)(v94 + 24);
              if (v95 == v90)
                goto LABEL_223;
            }
          }
          v94 = v91 + 48 * v92;
LABEL_223:
          if (v94 != v91 + 48 * v92 && *(_QWORD *)(v94 + 40))
            return;
          v150 = this;
          v142 = (llvm::Value *)v90;
          goto LABEL_226;
        }
      }
    }
  }
  if (!*(_WORD *)(v37 + 24))
  {
    ConstantEvolutionLoopExitValue = llvm::ScalarEvolution::getConstantEvolutionLoopExitValue(this, (llvm::PHINode *)v22, (const llvm::APInt *)(*(_QWORD *)(v37 + 32) + 24), (const llvm::Loop *)v34);
    if (ConstantEvolutionLoopExitValue)
    {
      v142 = ConstantEvolutionLoopExitValue;
      v143 = *((_QWORD *)this + 13);
      v144 = *((_DWORD *)this + 30);
      if (v144)
      {
        v145 = (v144 - 1) & ((ConstantEvolutionLoopExitValue >> 4) ^ (ConstantEvolutionLoopExitValue >> 9));
        v146 = v143 + 48 * v145;
        v147 = *(const llvm::APInt **)(v146 + 24);
        if (v147 == ConstantEvolutionLoopExitValue)
          goto LABEL_215;
        v148 = 1;
        while (v147 != (const llvm::APInt *)-4096)
        {
          v149 = v145 + v148++;
          v145 = v149 & (v144 - 1);
          v146 = v143 + 48 * v145;
          v147 = *(const llvm::APInt **)(v146 + 24);
          if (v147 == ConstantEvolutionLoopExitValue)
            goto LABEL_215;
        }
      }
      v146 = v143 + 48 * v144;
LABEL_215:
      if (v146 != v143 + 48 * v144 && *(_QWORD *)(v146 + 40))
        return;
      v150 = this;
      goto LABEL_226;
    }
  }
LABEL_136:
  v98 = *(_DWORD *)(v22 + 20);
  if ((v98 & 0x7FFFFFF) == 1)
  {
    if ((v98 & 0x40000000) != 0)
      v99 = *(llvm::Value ***)(v22 - 8);
    else
      v99 = (llvm::Value **)(v22 - 32);
    v100 = *v99;
    v101 = *((_QWORD *)this + 13);
    v102 = *((_DWORD *)this + 30);
    if (v102)
    {
      v103 = ((v100 >> 4) ^ (v100 >> 9)) & (v102 - 1);
      v104 = v101 + 48 * v103;
      v105 = *(llvm::Value **)(v104 + 24);
      if (v105 == v100)
      {
LABEL_147:
        if (v104 == v101 + 48 * v102 || (SCEVIter = *(const llvm::SCEV **)(v104 + 40)) == 0)
          SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v100);
        if (!*(_WORD *)(llvm::ScalarEvolution::getSCEVAtScope(this, SCEVIter, v4) + 24))
          return;
        goto LABEL_151;
      }
      v106 = 1;
      while (v105 != (llvm::Value *)-4096)
      {
        v107 = v103 + v106++;
        v103 = v107 & (v102 - 1);
        v104 = v101 + 48 * v103;
        v105 = *(llvm::Value **)(v104 + 24);
        if (v105 == v100)
          goto LABEL_147;
      }
    }
    v104 = v101 + 48 * v102;
    goto LABEL_147;
  }
LABEL_151:
  if (!sub_1C4F40698(v22, (uint64_t)a2, a3))
    return;
  v153 = v155;
  v154 = 0x400000000;
  v109 = *(_DWORD *)(v22 + 20);
  if ((v109 & 0x40000000) != 0)
  {
    v111 = *(llvm::Value ***)(v22 - 8);
    v110 = v109 & 0x7FFFFFF;
  }
  else
  {
    v110 = v109 & 0x7FFFFFF;
    v111 = (llvm::Value **)(v22 - 32 * v110);
  }
  if (!v110)
    goto LABEL_188;
  v151 = (llvm *)v22;
  LODWORD(v112) = 0;
  v113 = 0;
  v114 = &v111[4 * v110];
  do
  {
    v115 = (uint64_t *)*v111;
    if (*v111)
      v116 = *((unsigned __int8 *)*v111 + 16) > 0x14u;
    else
      v116 = 1;
    if (!v116)
    {
      v124 = HIDWORD(v154);
      goto LABEL_177;
    }
    if ((*(_DWORD *)(*v115 + 8) & 0xFD) != 0xD)
      goto LABEL_188;
    v117 = *((_QWORD *)this + 13);
    v118 = *((_DWORD *)this + 30);
    if (v118)
    {
      v119 = (v118 - 1) & ((v115 >> 4) ^ (v115 >> 9));
      v120 = v117 + 48 * v119;
      v121 = *(uint64_t **)(v120 + 24);
      if (v121 == v115)
        goto LABEL_170;
      v122 = 1;
      while (v121 != (uint64_t *)-4096)
      {
        v123 = v119 + v122++;
        v119 = v123 & (v118 - 1);
        v120 = v117 + 48 * v119;
        v121 = *(uint64_t **)(v120 + 24);
        if (v121 == v115)
          goto LABEL_170;
      }
    }
    v120 = v117 + 48 * v118;
LABEL_170:
    if (v120 == v117 + 48 * v118 || (v125 = *(const llvm::SCEV **)(v120 + 40)) == 0)
      v125 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, *v111);
    v126 = llvm::ScalarEvolution::getSCEVAtScope(this, v125, v4);
    v127 = v125 != (const llvm::SCEV *)v126;
    sub_1C4F4070C(v126);
    if (!v128)
      goto LABEL_188;
    Cast = (uint64_t)v128;
    if (*(_QWORD *)v128 != *v115)
    {
      CastOpcode = llvm::CastInst::getCastOpcode(v128, 0, *v115, 0);
      Cast = llvm::ConstantExpr::getCast(CastOpcode);
    }
    v113 |= v127;
    LODWORD(v112) = v154;
    v124 = HIDWORD(v154);
    v115 = (uint64_t *)Cast;
LABEL_177:
    if (v112 >= v124)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v112 + 1, 8);
      LODWORD(v112) = v154;
    }
    *((_QWORD *)v153 + v112) = v115;
    v112 = (v154 + 1);
    LODWORD(v154) = v154 + 1;
    v111 += 4;
  }
  while (v111 != v114);
  if ((v113 & 1) == 0)
    goto LABEL_188;
  v131 = *((unsigned __int8 *)v151 + 16);
  if ((v131 - 83) >= 0xFFFFFFFE)
  {
    v133 = llvm::ConstantFoldCompareInstOperands(*((_WORD *)v151 + 9) & 0x3F, *(_QWORD *)v153, *((_QWORD *)v153 + 1), (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), *((_QWORD *)this + 2));
  }
  else
  {
    if (v131 == 60)
    {
      if ((*((_WORD *)v151 + 9) & 1) == 0)
      {
        v132 = (llvm::Value *)llvm::ConstantFoldLoadFromConstPtr(*(llvm **)v153, *(llvm::Constant **)v151, (llvm::Type *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), (const llvm::DataLayout *)v112);
        goto LABEL_194;
      }
      goto LABEL_188;
    }
    v133 = sub_1C4DECDA4((int **)v151, (llvm *)(v131 - 28), (llvm::Type **)v153, v112, (__int32 **)(*(_QWORD *)(*(_QWORD *)this + 40) + 272), *((llvm::DSOLocalEquivalent ***)this + 2));
  }
  v132 = v133;
LABEL_194:
  if (v132)
  {
    v134 = *((_QWORD *)this + 13);
    v135 = *((_DWORD *)this + 30);
    if (!v135)
      goto LABEL_202;
    v136 = (v135 - 1) & ((v132 >> 4) ^ (v132 >> 9));
    v137 = v134 + 48 * v136;
    v138 = *(llvm::Value **)(v137 + 24);
    if (v138 != v132)
    {
      v139 = 1;
      while (v138 != (llvm::Value *)-4096)
      {
        v140 = v136 + v139++;
        v136 = v140 & (v135 - 1);
        v137 = v134 + 48 * v136;
        v138 = *(llvm::Value **)(v137 + 24);
        if (v138 == v132)
          goto LABEL_203;
      }
LABEL_202:
      v137 = v134 + 48 * v135;
    }
LABEL_203:
    if (v137 == v134 + 48 * v135 || !*(_QWORD *)(v137 + 40))
      llvm::ScalarEvolution::createSCEVIter(this, v132);
  }
LABEL_188:
  if (v153 != v155)
    free(v153);
}

uint64_t sub_1C4F40698(uint64_t a1, uint64_t a2, const llvm::Function *a3)
{
  int v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = 1;
  if (v3 == 92 || (v3 & 0xFFFFFFFD) == 0x3C)
    return v4;
  v5 = v3 != 85 && (v3 - 41) >= 0x12;
  v6 = v5 && (v3 - 81) >= 2;
  if (!v6 || (v3 - 66) < 0xD)
    return v4;
  if (v3 != 84)
    return 0;
  v8 = *(_QWORD *)(a1 - 32);
  if (!v8 || *(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 24) != *(_QWORD *)(a1 + 72))
    return 0;
  return llvm::canConstantFoldCallTo((llvm *)a1, (const llvm::CallBase *)v8, a3);
}

void sub_1C4F4070C(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C4F40748()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

const llvm::SCEV *llvm::ScalarEvolution::stripInjectiveFunctions(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  const llvm::SCEV *result;
  BOOL v3;

  result = a2;
  if (a2 && *((unsigned __int16 *)a2 + 12) - 4 >= 0xFFFFFFFE)
  {
    do
    {
      result = (const llvm::SCEV *)*((_QWORD *)result + 4);
      if (result)
        v3 = *((unsigned __int16 *)result + 12) - 4 > 0xFFFFFFFD;
      else
        v3 = 0;
    }
    while (v3);
  }
  return result;
}

uint64_t llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v17 = v21;
  v18 = v21;
  v19 = 4;
  v20 = 0;
  v23 = 0;
  v24 = 0;
  v22 = a1;
  v25 = 0;
  v26 = &v17;
  v27 = 0;
  v28 = a3;
  v5 = sub_1C4F59DF8((uint64_t)&v22, a2);
  MEMORY[0x1CAA32FB4](v23, 8);
  if (*(_WORD *)(v5 + 24) != 7)
    v5 = 0;
  v7 = v17;
  v6 = v18;
  if (v5)
  {
    v8 = (uint64_t *)((char *)&v19 + 4);
    if (v18 != v17)
      v8 = &v19;
    v9 = *(unsigned int *)v8;
    v10 = (uint64_t *)v18;
    if ((_DWORD)v9)
    {
      v11 = 0;
      while (*(_QWORD *)&v18[v11] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v11 += 8;
        if (8 * v9 == v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)&v18[v11];
    }
    v12 = &v18[8 * v9];
    if (v10 != v12)
    {
      v13 = *v10;
LABEL_14:
      sub_1C4774094(a4, v13);
      v14 = (unint64_t *)(v10 + 1);
      while (v14 != v12)
      {
        v15 = *v14++;
        v13 = v15;
        if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v10 = (uint64_t *)(v14 - 1);
          goto LABEL_14;
        }
      }
      v7 = v17;
      v6 = v18;
    }
  }
LABEL_19:
  if (v6 != v7)
    free(v6);
  return v5;
}

uint64_t llvm::ScalarEvolution::isLoopEntryGuardedByCond(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
    return 0;
  if ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a3, a4, a5) & 1) != 0)
    return 1;
  return llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond(a1, **(llvm::BasicBlock ***)(a2 + 32), a3, a4, a5);
}

uint64_t llvm::ScalarEvolution::getPredecessorWithUniqueSuccessorForBB(llvm::ScalarEvolution *this, const llvm::BasicBlock *a2)
{
  uint64_t result;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const llvm::BasicBlock *v10;
  int v11;
  int v12;
  uint64_t v13;

  result = llvm::BasicBlock::getSinglePredecessor(a2);
  if (!result)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 5);
    v6 = *((_DWORD *)v5 + 4);
    if (!v6)
      return 0;
    v7 = *v5;
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = *(const llvm::BasicBlock **)(v7 + 16 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10 != (const llvm::BasicBlock *)-4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(const llvm::BasicBlock **)(v7 + 16 * v9);
        if (v10 == a2)
          goto LABEL_7;
      }
      return 0;
    }
LABEL_7:
    v13 = v7 + 16 * v9;
    if (*(_QWORD *)(v13 + 8))
      return llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(v13 + 8));
    else
      return 0;
  }
  return result;
}

void sub_1C4F40CF0(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t ****v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::ValueHandleBase *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  int v21;
  llvm::ValueHandleBase *v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t *****)(a1 + 16);
  v5 = ***v4;
  v6 = *v5;
  v7 = *(llvm::ValueHandleBase **)(*v5 + 1568);
  if (!v7)
  {
    v20 = *(llvm::ConstantInt **)(v6 + 1888);
    LODWORD(v25) = *(_DWORD *)(v6 + 1896) >> 8;
    if (v25 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v24, 0, 0);
    else
      v24 = 0;
    v7 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v24, a3);
    if (v25 >= 0x41 && v24)
      MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    *(_QWORD *)(v6 + 1568) = v7;
  }
  v21 = 0;
  v22 = v7;
  v8 = (uint64_t)&v4[104][(*((_DWORD *)v4 + 210) - 1) & sub_1C4F5AB38(&v21, (uint64_t)&v23)];
  v9 = *(_QWORD *)v8;
  v24 = v26;
  v25 = 0x2000000000;
  if (v9)
    v10 = (v9 & 1) == 0;
  else
    v10 = 0;
  if (v10)
  {
    while (*(_QWORD *)(v9 + 16) != 3 || memcmp(&v21, *(const void **)(v9 + 8), 0xCuLL))
    {
      LODWORD(v25) = 0;
      v9 = *(_QWORD *)v9;
      if (v9)
        v11 = (v9 & 1) == 0;
      else
        v11 = 0;
      if (!v11)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    v9 = sub_1C484358C((uint64_t)(v4 + 108), 40, 3);
    v12 = sub_1C484358C((uint64_t)(v4 + 108), 12, 2);
    v13 = &v21;
    v14 = 12;
    v15 = (_DWORD *)v12;
    do
    {
      v16 = *v13++;
      *v15++ = v16;
      v14 -= 4;
    }
    while (v14);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = v12;
    *(_QWORD *)(v9 + 16) = 3;
    *(_DWORD *)(v9 + 24) = 0x10000;
    *(_WORD *)(v9 + 28) = 0;
    *(_QWORD *)(v9 + 32) = v7;
    v17 = *((_DWORD *)v4 + 211) + 1;
    v18 = *((_DWORD *)v4 + 210);
    if (v17 > 2 * v18)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)(v4 + 104), 2 * v18, (uint64_t)off_1E813B300);
      v24 = v26;
      v25 = 0x2000000000;
      v8 = (uint64_t)&v4[104][(*((_DWORD *)v4 + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v9 + 8), *(_QWORD *)(v9 + 8)+ 4 * *(_QWORD *)(v9 + 16))];
      if (v24 != v26)
        free(v24);
      v17 = *((_DWORD *)v4 + 211) + 1;
    }
    *((_DWORD *)v4 + 211) = v17;
    v19 = *(_QWORD *)v8;
    if (!*(_QWORD *)v8)
      v19 = v8 | 1;
    *(_QWORD *)v9 = v19;
    *(_QWORD *)v8 = v9;
  }
  **(_QWORD **)(a1 + 8) = v9;
  **(_QWORD **)a1 = v9;
  **(_DWORD **)(a1 + 24) = 33;
}

uint64_t sub_1C4F40FE8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (*(_WORD *)(a1 + 24) == 14)
    {
      if (!a2)
        return 0;
      if (*(_WORD *)(a2 + 24) != 14)
        return 0;
      v4 = *(unsigned __int8 **)(a1 - 8);
      if (!v4)
        return 0;
      if (v4[16] < 0x1Cu)
        return 0;
      v5 = *(_QWORD *)(a2 - 8);
      if (!v5)
        return 0;
      if (*(unsigned __int8 *)(v5 + 16) < 0x1Cu)
        return 0;
      if (!llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v4, *(const llvm::Instruction **)(a2 - 8)))return 0;
      if ((*(unsigned __int8 *)(v5 + 17) ^ v4[17]) > 1)
        return 0;
      v6 = v4[16];
      result = 1;
      if (v6 != 62 && (v6 - 41) >= 0x12)
        return 0;
    }
  }
  return result;
}

uint64_t llvm::ScalarEvolution::isKnownNonZero(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  llvm::APInt *RangeRef;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;

  RangeRef = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(this, a2, 0, 0);
  llvm::ConstantRange::getUnsignedMin(RangeRef, (llvm::APInt *)&v7);
  if (v8 < 0x41)
    return v7 != 0;
  v5 = v8;
  if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v7) > 0x40)
  {
    v3 = 1;
    if (!v7)
      return v3;
  }
  else
  {
    LODWORD(v3) = *v7 != 0;
  }
  v6 = v3;
  MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  return v6;
}

uint64_t llvm::ScalarEvolution::SplitIntoInitAndPostInc(llvm::ScalarEvolution *this, const llvm::Loop *a2, const llvm::SCEV *a3)
{
  uint64_t v6;
  llvm::ScalarEvolution *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const llvm::Loop *v12;
  __int16 v13;

  v6 = sub_1C4F1FD74((uint64_t)a3, (uint64_t)a2, (uint64_t)this, 1);
  if (v6 != *((_QWORD *)this + 6))
  {
    v9 = 0;
    v10 = 0;
    v8 = this;
    v11 = 0;
    v12 = a2;
    v13 = 0;
    sub_1C4F58264((uint64_t)&v8, (uint64_t)a3);
    MEMORY[0x1CAA32FB4](v9, 8);
  }
  return v6;
}

uint64_t llvm::ScalarEvolution::isKnownViaInduction(uint64_t *a1, uint64_t a2, const llvm::SCEV *a3, const llvm::SCEV *a4)
{
  uint64_t v8;
  uint64_t isLoopEntryGuardedByCond;
  const llvm::Loop **v11;
  uint64_t v12;
  const llvm::Loop **v13;
  uint64_t v14;
  const llvm::Loop **v15;
  unint64_t *v16;
  const llvm::Loop *v17;
  uint64_t v18;
  const llvm::APInt *v19;
  const llvm::SCEV *v20;
  const llvm::APInt *v21;
  uint64_t v22;
  uint64_t v23;
  const llvm::SCEV *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  const llvm::Loop **v29;
  const llvm::Loop **v30;
  uint64_t v31;
  int v32;
  _BYTE v33[64];

  v29 = (const llvm::Loop **)v33;
  v30 = (const llvm::Loop **)v33;
  v31 = 8;
  v32 = 0;
  llvm::ScalarEvolution::getUsedLoops((uint64_t)a1, (uint64_t)a3, (uint64_t)&v29);
  llvm::ScalarEvolution::getUsedLoops(v8, (uint64_t)a4, (uint64_t)&v29);
  isLoopEntryGuardedByCond = 0;
  if (HIDWORD(v31) != v32)
  {
    v11 = v30;
    if (v30 == v29)
      v12 = HIDWORD(v31);
    else
      v12 = v31;
    v13 = &v30[v12];
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      while ((unint64_t)*v11 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v11;
        v14 -= 8;
        if (!v14)
          goto LABEL_16;
      }
    }
    if (v11 != v13)
    {
      v15 = v11;
LABEL_13:
      v16 = (unint64_t *)(v15 + 1);
      while (v16 != (unint64_t *)v13)
      {
        v27 = *v16++;
        v26 = v27;
        if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v28 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(a1[4], **((_QWORD **)*v11 + 4), **(_QWORD **)(v26 + 32));
          v15 = (const llvm::Loop **)(v16 - 1);
          if (v28)
            v11 = (const llvm::Loop **)(v16 - 1);
          goto LABEL_13;
        }
      }
      v13 = v11;
    }
LABEL_16:
    v17 = *v13;
    v18 = llvm::ScalarEvolution::SplitIntoInitAndPostInc((llvm::ScalarEvolution *)a1, *v13, a3);
    if (a1[6] != v18
      && (v20 = (const llvm::SCEV *)v18,
          v21 = v19,
          v22 = llvm::ScalarEvolution::SplitIntoInitAndPostInc((llvm::ScalarEvolution *)a1, v17, a4),
          a1[6] != v22)
      && (v24 = (const llvm::SCEV *)v22,
          v25 = v23,
          llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, v20, v17) == 1)
      && llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, v20, **((const llvm::BasicBlock ***)v17 + 4)) == 2&& llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, v24, v17) == 1&& llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, v24, **((const llvm::BasicBlock ***)v17 + 4)) == 2&& llvm::ScalarEvolution::isLoopBackedgeGuardedByCond((uint64_t)a1, (uint64_t **)v17, a2, v21, v25))
    {
      isLoopEntryGuardedByCond = llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)a1, (uint64_t)v17, a2, (uint64_t)v20, (uint64_t)v24);
    }
    else
    {
      isLoopEntryGuardedByCond = 0;
    }
  }
  if (v30 != v29)
    free(v30);
  return isLoopEntryGuardedByCond;
}

void llvm::ScalarEvolution::getUsedLoops(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[64];
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = &v4;
  v6 = v8;
  v7 = 0x800000000;
  v9 = v13;
  v10 = v13;
  v11 = 8;
  v12 = 0;
  sub_1C4F5F2C0((uint64_t)&v5, a2);
  if ((_DWORD)v7)
  {
    v3 = *((_QWORD *)v6 + v7 - 1);
    LODWORD(v7) = v7 - 1;
    __asm { BR              X10 }
  }
  if (v10 != v9)
    free(v10);
  if (v6 != v8)
    free(v6);
}

uint64_t llvm::ScalarEvolution::isKnownPredicate(uint64_t ****a1, unsigned int a2, const llvm::SCEV *a3, const llvm::SCEV *a4)
{
  const llvm::SCEV *v6;
  const llvm::SCEV *v7;
  unsigned int v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  llvm::ScalarEvolution::SimplifyICmpOperands(a1, (int *)&v8, &v7, (uint64_t *)&v6, 0, 0);
  if ((llvm::ScalarEvolution::isKnownViaInduction((uint64_t *)a1, v8, v7, v6) & 1) != 0
    || (llvm::ScalarEvolution::isKnownPredicateViaSplitting((uint64_t)a1, v8, (uint64_t)v7, (uint64_t)v6) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, v8, v7, v6);
  }
}

uint64_t llvm::ScalarEvolution::isKnownPredicateViaSplitting(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t RangeRef;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != 36)
    return 0;
  v15 = v4;
  v16 = v5;
  if (*(_BYTE *)(a1 + 513))
    return 0;
  *(_BYTE *)(a1 + 513) = 1;
  RangeRef = llvm::ScalarEvolution::getRangeRef(a1, a4, 1, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v13);
  v10 = v14 - 1;
  if (v14 >= 0x41)
    v11 = (uint64_t *)(v13 + 8 * (v10 >> 6));
  else
    v11 = &v13;
  v12 = (1 << v10) & *v11;
  if (v14 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C]();
  if (!v12)
    __asm { BR              X11 }
  result = 0;
  *(_BYTE *)(a1 + 513) = 0;
  return result;
}

void sub_1C4F4175C()
{
  JUMPOUT(0x1C4F416F8);
}

uint64_t llvm::ScalarEvolution::evaluatePredicate(uint64_t ****a1, unsigned int a2, const llvm::SCEV *a3, const llvm::SCEV *a4)
{
  int v8;
  int isKnownPredicate;

  if ((llvm::ScalarEvolution::isKnownPredicate(a1, a2, a3, a4) & 1) != 0)
  {
    v8 = 1;
    isKnownPredicate = 1;
  }
  else
  {
    isKnownPredicate = llvm::ScalarEvolution::isKnownPredicate(a1, dword_1C85F60D0[a2], a3, a4);
    v8 = 0;
  }
  return v8 | (isKnownPredicate << 8);
}

uint64_t llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond(uint64_t a1, llvm::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  llvm::BasicBlock *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t LoopPredecessor;
  const llvm::BasicBlock *PredecessorWithUniqueSuccessorForBB;
  llvm::BasicBlock *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t (***v29)();
  unsigned __int8 v30;
  uint64_t (**v31)();
  unsigned __int8 v32;
  int v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t (***v44)();
  unsigned __int8 v45;
  uint64_t (**v46)();
  unsigned __int8 v47;
  char v48;
  int v49;
  llvm::BasicBlock *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const llvm::Instruction **v54;
  const llvm::Instruction *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (***v59)();
  uint64_t (***v60)();
  unsigned __int8 v61;
  uint64_t (**v62)();
  unsigned __int8 v63;
  char v64;
  int v65;
  _QWORD *v69;
  int isKnownViaNonRecursiveReasoning;
  int v71;
  unsigned __int8 v72;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  const llvm::BasicBlock *v78;
  _QWORD v79[3];
  uint64_t v80;
  BOOL v81;

  v76 = a5;
  v77 = a4;
  HIDWORD(v8) = a3;
  LODWORD(v8) = a3 - 2;
  v7 = v8 >> 1;
  if (v7 > 0x13 || ((0xF0033u >> v7) & 1) == 0 || (v9 = dword_1C85F6050[v7], (_DWORD)v9 == (_DWORD)a3))
  {
    v72 = 0;
    v10 = 0;
    v75 = 1;
    LODWORD(v9) = a3;
LABEL_5:
    v11 = a2;
    goto LABEL_6;
  }
  v69 = operator new(0x20uLL);
  *v69 = &off_1E813B328;
  v69[1] = a1;
  v69[2] = &v77;
  v69[3] = &v76;
  isKnownViaNonRecursiveReasoning = llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, v9, a4, a5);
  LODWORD(v79[0]) = 33;
  v10 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v69 + 48))(v69, v79);
  (*(void (**)(_QWORD *))(*v69 + 40))(v69);
  v75 = 0;
  v72 = isKnownViaNonRecursiveReasoning;
  if (!isKnownViaNonRecursiveReasoning)
    goto LABEL_5;
  v11 = a2;
  if ((v10 & 1) != 0)
    return 1;
LABEL_6:
  v12 = *(uint64_t **)(a1 + 40);
  v13 = *((_DWORD *)v12 + 4);
  if (v13)
  {
    v14 = *v12;
    v15 = v13 - 1;
    v16 = (v13 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    v17 = *(llvm::BasicBlock **)(v14 + 16 * v16);
    if (v17 == v11)
    {
LABEL_11:
      v20 = *(_QWORD *)(v14 + 16 * v16 + 8);
      if (v20 && **(llvm::BasicBlock ***)(v20 + 32) == v11)
      {
        LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v20);
        goto LABEL_14;
      }
    }
    else
    {
      v18 = 1;
      while (v17 != (llvm::BasicBlock *)-4096)
      {
        v19 = v16 + v18++;
        v16 = v19 & v15;
        v17 = *(llvm::BasicBlock **)(v14 + 16 * v16);
        if (v17 == v11)
          goto LABEL_11;
      }
    }
  }
  LoopPredecessor = llvm::BasicBlock::getSinglePredecessor(v11);
LABEL_14:
  PredecessorWithUniqueSuccessorForBB = (const llvm::BasicBlock *)LoopPredecessor;
  v71 = v9;
  LOBYTE(v74) = v10;
  if (!LoopPredecessor)
  {
LABEL_62:
    v51 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(v51 + 184))
      llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 24));
    v52 = *(unsigned int *)(v51 + 24);
    if ((_DWORD)v52)
    {
      v53 = 32 * v52;
      v54 = (const llvm::Instruction **)(*(_QWORD *)(v51 + 16) + 16);
      do
      {
        v55 = *v54;
        if (*v54 && llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 32), *v54, v11))
        {
          v56 = *((_QWORD *)v55 - 4 * (*((_DWORD *)v55 + 5) & 0x7FFFFFF));
          v79[0] = v56;
          v81 = 0;
          v57 = *((_QWORD *)v11 + 6);
          if (v57)
            v58 = v57 - 24;
          else
            v58 = 0;
          v80 = v58;
          if ((llvm::ScalarEvolution::isImpliedCond(a1, a3, v77, v76, v56, 0, v58) & 1) != 0)
            return 1;
          if ((v75 & 1) == 0)
          {
            v59 = (uint64_t (***)())operator new(0x38uLL);
            v60 = v59;
            *v59 = &off_1E813B2C8;
            v59[1] = (uint64_t (**)())a1;
            v59[2] = (uint64_t (**)())&v77;
            v59[3] = (uint64_t (**)())&v76;
            v59[4] = (uint64_t (**)())v79;
            v59[5] = (uint64_t (**)())&v81;
            v59[6] = (uint64_t (**)())&v80;
            if (v72)
            {
              v61 = 1;
              v62 = &off_1E813B2C8;
            }
            else
            {
              LODWORD(v78) = v71;
              v63 = sub_1C4F58CEC((uint64_t)v59, (unsigned int *)&v78);
              v62 = *v60;
              v72 = v63;
              v61 = v63;
            }
            if ((_BYTE)v74)
            {
              v64 = 0;
              LOBYTE(v74) = 1;
            }
            else
            {
              LODWORD(v78) = 33;
              LOBYTE(v74) = ((uint64_t (*)(uint64_t (***)(), const llvm::BasicBlock **))v62[6])(v60, &v78);
              v64 = v74 ^ 1;
              v62 = *v60;
              v61 = v72;
            }
            v65 = v61;
            ((void (*)(uint64_t (***)()))v62[5])(v60);
            if (v65)
            {
              v11 = a2;
              if ((v64 & 1) == 0)
                return 1;
            }
            else
            {
              v11 = a2;
            }
          }
        }
        v54 += 4;
        v53 -= 32;
      }
      while (v53);
    }
    return 0;
  }
  v23 = v11;
  while (1)
  {
    v78 = PredecessorWithUniqueSuccessorForBB;
    if (*(_BYTE *)(a1 + 8))
    {
      v24 = (_QWORD *)*((_QWORD *)PredecessorWithUniqueSuccessorForBB + 6);
      if (v24 != (_QWORD *)((char *)PredecessorWithUniqueSuccessorForBB + 40))
        break;
    }
LABEL_25:
    if ((v75 & 1) == 0)
    {
      v28 = (uint64_t (***)())operator new(0x28uLL);
      v29 = v28;
      *v28 = &off_1E813B280;
      v28[1] = (uint64_t (**)())a1;
      v28[2] = (uint64_t (**)())&v78;
      v28[3] = (uint64_t (**)())&v77;
      v28[4] = (uint64_t (**)())&v76;
      if (v72)
      {
        v30 = 1;
        v31 = &off_1E813B280;
      }
      else
      {
        LODWORD(v79[0]) = v71;
        v32 = sub_1C4F58B88((uint64_t)v28, (unsigned int *)v79);
        v31 = *v29;
        v72 = v32;
        v30 = v32;
      }
      if ((_BYTE)v74)
      {
        v33 = 0;
        LOBYTE(v74) = 1;
      }
      else
      {
        LODWORD(v79[0]) = 33;
        v74 = ((uint64_t (*)(uint64_t (***)(), _QWORD *))v31[6])(v29, v79);
        v33 = v74 ^ 1;
        v31 = *v29;
        v30 = v72;
      }
      v34 = v30;
      ((void (*)(uint64_t (***)()))v31[5])(v29);
      if (v34)
      {
        if (!v33)
          return 1;
      }
    }
    v35 = (_QWORD *)*((_QWORD *)PredecessorWithUniqueSuccessorForBB + 5);
    if (v35 == (_QWORD *)((char *)PredecessorWithUniqueSuccessorForBB + 40))
      goto LABEL_60;
    v36 = v35 - 3;
    if (!v35)
      v36 = 0;
    v37 = *((unsigned __int8 *)v36 + 16) - 40;
    if (v37 < 0xFFFFFFF5)
      v36 = 0;
    if (!v35)
      goto LABEL_60;
    v38 = *((_BYTE *)v36 + 16) == 30 && v37 >= 0xFFFFFFF5;
    v11 = a2;
    if (v38 && (*((_DWORD *)v36 + 5) & 0x7FFFFFF) != 1)
    {
      v39 = *(v36 - 12);
      v40 = *(v36 - 4) != (_QWORD)v23;
      v79[0] = v39;
      v81 = v40;
      v41 = *((_QWORD *)a2 + 6);
      if (v41)
        v42 = v41 - 24;
      else
        v42 = 0;
      v80 = v42;
      if ((llvm::ScalarEvolution::isImpliedCond(a1, a3, v77, v76, v39, v40, v42) & 1) != 0)
        return 1;
      if ((v75 & 1) == 0)
      {
        v43 = (uint64_t (***)())operator new(0x38uLL);
        v44 = v43;
        *v43 = &off_1E813B2C8;
        v43[1] = (uint64_t (**)())a1;
        v43[2] = (uint64_t (**)())&v77;
        v43[3] = (uint64_t (**)())&v76;
        v43[4] = (uint64_t (**)())v79;
        v43[5] = (uint64_t (**)())&v81;
        v43[6] = (uint64_t (**)())&v80;
        if (v72)
        {
          v45 = 1;
          v46 = &off_1E813B2C8;
        }
        else
        {
          LODWORD(v78) = v71;
          v47 = sub_1C4F58CEC((uint64_t)v43, (unsigned int *)&v78);
          v46 = *v44;
          v72 = v47;
          v45 = v47;
        }
        if ((_BYTE)v74)
        {
          v48 = 0;
          LOBYTE(v74) = 1;
        }
        else
        {
          LODWORD(v78) = 33;
          LOBYTE(v74) = ((uint64_t (*)(uint64_t (***)(), const llvm::BasicBlock **))v46[6])(v44, &v78);
          v48 = v74 ^ 1;
          v46 = *v44;
          v45 = v72;
        }
        v49 = v45;
        ((void (*)(uint64_t (***)()))v46[5])(v44);
        if (v49)
        {
          v11 = a2;
          if ((v48 & 1) == 0)
            return 1;
          goto LABEL_61;
        }
LABEL_60:
        v11 = a2;
      }
    }
LABEL_61:
    PredecessorWithUniqueSuccessorForBB = (const llvm::BasicBlock *)llvm::ScalarEvolution::getPredecessorWithUniqueSuccessorForBB((llvm::ScalarEvolution *)a1, PredecessorWithUniqueSuccessorForBB);
    v23 = v50;
    if (!PredecessorWithUniqueSuccessorForBB)
      goto LABEL_62;
  }
  v26 = v76;
  v25 = v77;
  while (1)
  {
    v79[2] = &v80;
    v80 = 0;
    v27 = v24 ? (uint64_t)(v24 - 3) : 0;
    LODWORD(v79[0]) = 125;
    v79[1] = 0;
    if (sub_1C4F5E7F0((uint64_t)v79, v27))
    {
      if ((llvm::ScalarEvolution::isImpliedCond(a1, a3, v25, v26, v80, 0, 0) & 1) != 0)
        return 1;
    }
    v24 = (_QWORD *)v24[1];
    if (v24 == (_QWORD *)((char *)PredecessorWithUniqueSuccessorForBB + 40))
      goto LABEL_25;
  }
}

uint64_t llvm::ScalarEvolution::evaluatePredicateAt(uint64_t ****a1, uint64_t a2, const llvm::SCEV *a3, const llvm::SCEV *a4, uint64_t a5)
{
  unsigned __int16 v10;
  int isBasicBlockEntryGuardedByCond;

  v10 = llvm::ScalarEvolution::evaluatePredicate(a1, a2, a3, a4);
  if (v10 >= 0x100u)
    goto LABEL_6;
  if ((llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond((uint64_t)a1, *(llvm::BasicBlock **)(a5 + 40), a2, (uint64_t)a3, (uint64_t)a4) & 1) != 0)
  {
    LOBYTE(v10) = 1;
LABEL_6:
    isBasicBlockEntryGuardedByCond = 1;
    return v10 | (isBasicBlockEntryGuardedByCond << 8);
  }
  isBasicBlockEntryGuardedByCond = llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond((uint64_t)a1, *(llvm::BasicBlock **)(a5 + 40), dword_1C85F60D0[(int)a2], (uint64_t)a3, (uint64_t)a4);
  LOBYTE(v10) = 0;
  return v10 | (isBasicBlockEntryGuardedByCond << 8);
}

unint64_t llvm::SCEVAddRecExpr::getPostIncExpr(llvm::SCEVAddRecExpr *this, llvm::ScalarEvolution *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t AddExpr;
  uint64_t v10;
  uint64_t v11;
  unint64_t AddRecExpr;
  void *v14;
  uint64_t v15;
  _BYTE v16[24];
  void *v17[2];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x300000000;
  v4 = *((_QWORD *)this + 5);
  LODWORD(v5) = v4 - 1;
  if ((_DWORD)v4 == 1)
  {
    v11 = **((_QWORD **)this + 4);
  }
  else
  {
    v6 = 0;
    v7 = 8 * (v4 - 1);
    do
    {
      v8 = *(_OWORD *)(*((_QWORD *)this + 4) + v6);
      v17[0] = &v18;
      v18 = v8;
      v17[1] = (void *)0x200000002;
      AddExpr = llvm::ScalarEvolution::getAddExpr(a2, v17, 0, 0);
      if (v17[0] != &v18)
        free(v17[0]);
      v10 = v15;
      if (v15 >= (unint64_t)HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
        v10 = v15;
      }
      *((_QWORD *)v14 + v10) = AddExpr;
      v5 = (v15 + 1);
      LODWORD(v15) = v15 + 1;
      v6 += 8;
    }
    while (v7 != v6);
    v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * (*((_DWORD *)this + 10) - 1));
    if (v5 >= HIDWORD(v15))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v5 + 1, 8);
      LODWORD(v5) = v15;
    }
  }
  *((_QWORD *)v14 + v5) = v11;
  LODWORD(v15) = v15 + 1;
  AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)a2, (uint64_t **)&v14, *((uint64_t ***)this + 6));
  if (v14 != v16)
    free(v14);
  return AddRecExpr;
}

uint64_t llvm::ScalarEvolution::getMonotonicPredicateTypeImpl(uint64_t *a1, uint64_t a2, int a3)
{
  unsigned int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BOOL4 v8;
  const llvm::SCEV *v11;
  int isKnownNonPositive;

  if ((a3 & 0xFFFFFFFE) == 0x20)
  {
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v3 = a3 & 0xFFFFFFFA;
    v4 = *(_WORD *)(a2 + 28);
    if ((a3 - 34) > 3)
    {
      if ((v4 & 4) != 0)
      {
        v11 = (const llvm::SCEV *)sub_1C4E0C3BC(a2, a1);
        if (llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a1, v11))
        {
          v8 = v3 != 34;
          v6 = 0x100000000;
        }
        else
        {
          isKnownNonPositive = llvm::ScalarEvolution::isKnownNonPositive((llvm::ScalarEvolution *)a1, v11);
          v6 = 0x100000000;
          if (!isKnownNonPositive)
            v6 = 0;
          if (v3 == 34)
            v8 = isKnownNonPositive;
          else
            v8 = 0;
        }
      }
      else
      {
        v6 = 0;
        v8 = 0;
      }
    }
    else
    {
      v5 = v4 & 2;
      v7 = (_DWORD)v5 == 0;
      v6 = v5 << 31;
      v7 = v7 || v3 == 34;
      v8 = !v7;
    }
  }
  return v6 | v8;
}

unint64_t llvm::ScalarEvolution::getLoopInvariantPredicate@<X0>(llvm::ScalarEvolution *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const llvm::SCEV *a4@<X3>, const llvm::Loop *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t result;
  unint64_t v13;
  uint64_t v14;

  result = llvm::ScalarEvolution::getLoopDisposition(a1, a4, a5);
  if ((_DWORD)result == 1)
  {
    if (a3 && *(_WORD *)(a3 + 24) == 7 && *(const llvm::Loop **)(a3 + 48) == a5)
    {
      result = llvm::ScalarEvolution::getMonotonicPredicateTypeImpl((uint64_t *)a1, a3, a2);
      v13 = HIDWORD(result);
      if (!HIDWORD(result))
        goto LABEL_8;
      v14 = a2;
      if ((_DWORD)result)
        v14 = dword_1C85F60D0[(int)a2];
      result = llvm::ScalarEvolution::isLoopBackedgeGuardedByCond((uint64_t)a1, (uint64_t **)a5, v14, (const llvm::APInt *)a3, (uint64_t)a4);
      if ((result & 1) != 0)
      {
        v13 = **(_QWORD **)(a3 + 32);
        *(_DWORD *)a6 = a2;
        *(_QWORD *)(a6 + 8) = v13;
        *(_QWORD *)(a6 + 16) = a4;
        LOBYTE(v13) = 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    result = llvm::ScalarEvolution::getLoopDisposition(a1, (const llvm::SCEV *)a3, a5);
    if ((_DWORD)result == 1)
      __asm { BR              X10 }
  }
  LOBYTE(v13) = 0;
LABEL_8:
  *(_BYTE *)a6 = 0;
LABEL_9:
  *(_BYTE *)(a6 + 24) = v13;
  return result;
}

uint64_t llvm::ScalarEvolution::getLoopInvariantExitCondDuringFirstIterations@<X0>(llvm::ScalarEvolution *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, const llvm::SCEV *a4@<X3>, const llvm::Loop *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  result = llvm::ScalarEvolution::getLoopDisposition(a1, a4, a5);
  if ((_DWORD)result == 1)
  {
    v12 = a3;
    if (a3 && *(_WORD *)(a3 + 24) == 7 && *(const llvm::Loop **)(a3 + 48) == a5 && (a2 & 0xFFFFFFFE) != 0x20)
    {
      v13 = *(_QWORD *)(a3 + 40);
      if (v13 == 2)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
      }
      else
      {
        v17 = *(_QWORD *)(a3 + 32);
        v18 = (char *)v20;
        v19 = 0x300000000;
        v15 = 8 * v13 - 8;
        if ((unint64_t)v15 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v15 >> 3, 8);
          v16 = v19;
        }
        else
        {
          v16 = 0;
        }
        if (v13 != 1)
        {
          memcpy(&v18[8 * v16], (const void *)(v17 + 8), 8 * v13 - 8);
          v16 = v19;
        }
        LODWORD(v19) = v16 + ((unint64_t)v15 >> 3);
        v14 = sub_1C618AB20((uint64_t *)a1, (uint64_t)&v18, *(uint64_t ***)(v12 + 48));
        if (v18 != (char *)v20)
          free(v18);
      }
      __asm { BR              X11 }
    }
  }
  else
  {
    result = llvm::ScalarEvolution::getLoopDisposition(a1, (const llvm::SCEV *)a3, a5);
    if ((_DWORD)result == 1)
      __asm { BR              X10 }
  }
  *a6 = 0;
  a6[24] = 0;
  return result;
}

uint64_t llvm::ScalarEvolution::isKnownPredicateViaNoOverflow(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  void **v15;
  unsigned int v16;
  void **v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  unsigned int v33;
  void *v34;
  unsigned int v35;

  v35 = 1;
  v34 = 0;
  v33 = 1;
  v32 = 0;
  v5 = a2 - 34;
  v6 = a4;
  v7 = a3;
  v8 = a3;
  v9 = a3;
  v10 = a3;
  switch(v5)
  {
    case 0:
      v10 = a4;
      v6 = a3;
      goto LABEL_14;
    case 1:
      v9 = a4;
      v6 = a3;
      goto LABEL_2;
    case 2:
LABEL_14:
      if (!sub_1C4F42A94(a1, v6, v10, &v32, &v34, 2))
        goto LABEL_3;
      if (v35 <= 0x40)
      {
        if (v34 >= v32)
          goto LABEL_3;
        goto LABEL_17;
      }
      v24 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v24)
          goto LABEL_3;
        v25 = *(_QWORD *)((char *)v34 + v24 - 8);
        v26 = *(_QWORD *)((char *)v32 + v24 - 8);
        v24 -= 8;
        v12 = v25 > v26;
      }
      while (v25 == v26);
      goto LABEL_25;
    case 3:
LABEL_2:
      if (!sub_1C4F42A94(a1, v6, v9, &v32, &v34, 2))
        goto LABEL_3;
      if (v35 <= 0x40)
      {
        v12 = v34 > v32;
        goto LABEL_25;
      }
      v27 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      break;
    case 4:
      v8 = a4;
      v6 = a3;
      goto LABEL_19;
    case 5:
      v7 = a4;
      v6 = a3;
      goto LABEL_9;
    case 6:
LABEL_19:
      if (!sub_1C4F42A94(a1, v8, v6, &v34, &v32, 4))
        goto LABEL_3;
      if (v35 <= 0x40)
      {
        if ((uint64_t)((_QWORD)v34 << -(char)v35) >> -(char)v35 < (uint64_t)((_QWORD)v32 << -(char)v35) >> -(char)v35)
          goto LABEL_17;
        goto LABEL_3;
      }
      v13 = *((_QWORD *)v34 + ((v35 - 1) >> 6)) & (1 << (v35 - 1));
      v14 = v33 - 1;
      v15 = &v32;
      if (v33 >= 0x41)
        v15 = (void **)((char *)v32 + 8 * (v14 >> 6));
      if ((v13 != 0) != (((unint64_t)*v15 >> v14) & 1))
        goto LABEL_31;
      v21 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v21)
          goto LABEL_3;
        v22 = *(_QWORD *)((char *)v34 + v21 - 8);
        v23 = *(_QWORD *)((char *)v32 + v21 - 8);
        v21 -= 8;
        v12 = v22 > v23;
      }
      while (v22 == v23);
      goto LABEL_25;
    case 7:
LABEL_9:
      if (!sub_1C4F42A94(a1, v7, v6, &v34, &v32, 4))
        goto LABEL_3;
      if (v35 <= 0x40)
      {
        if ((uint64_t)((_QWORD)v34 << -(uint64_t)v35) >> -(uint64_t)v35 <= (uint64_t)((_QWORD)v32 << -(uint64_t)v35) >> -(uint64_t)v35)
          goto LABEL_17;
        goto LABEL_3;
      }
      v13 = *((_QWORD *)v34 + ((v35 - 1) >> 6)) & (1 << (v35 - 1));
      v16 = v33 - 1;
      v17 = &v32;
      if (v33 >= 0x41)
        v17 = (void **)((char *)v32 + 8 * (v16 >> 6));
      if ((v13 != 0) != (((unint64_t)*v17 >> v16) & 1))
      {
LABEL_31:
        if (!v13)
          goto LABEL_3;
        goto LABEL_17;
      }
      v18 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v18)
          goto LABEL_17;
        v19 = *(_QWORD *)((char *)v34 + v18 - 8);
        v20 = *(_QWORD *)((char *)v32 + v18 - 8);
        v18 -= 8;
        v12 = v19 > v20;
      }
      while (v19 == v20);
      goto LABEL_25;
    default:
      goto LABEL_3;
  }
  while (v27)
  {
    v28 = *(_QWORD *)((char *)v34 + v27 - 8);
    v29 = *(_QWORD *)((char *)v32 + v27 - 8);
    v27 -= 8;
    v12 = v28 > v29;
    if (v28 != v29)
    {
LABEL_25:
      if (v12)
      {
LABEL_3:
        result = 0;
        goto LABEL_4;
      }
      break;
    }
  }
LABEL_17:
  result = 1;
LABEL_4:
  if (v33 >= 0x41 && v32)
  {
    v30 = result;
    MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17, a3, a4, a5, v8, v9, v10);
    result = v30;
  }
  if (v35 >= 0x41)
  {
    if (v34)
    {
      v31 = result;
      MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17, a3, a4, a5, v8, v9, v10);
      return v31;
    }
  }
  return result;
}

uint64_t sub_1C4F42A94(int a1, uint64_t a2, uint64_t a3, void **this, void **a5, int a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  const void **v20;
  uint64_t v21;
  uint64_t v22;

  if (!a2 || *(_WORD *)(a2 + 24) != 4 || *(_QWORD *)(a2 + 40) != 2)
    __asm { BR              X11 }
  v8 = *(uint64_t **)(a2 + 32);
  v10 = *v8;
  v9 = v8[1];
  if (*(_WORD *)(v10 + 24))
    v11 = 0;
  else
    v11 = (*(_WORD *)(a2 + 28) & 7 & a6) == a6;
  if (!v11)
    return 0;
  if (!a3 || *(_WORD *)(a3 + 24) != 4 || *(_QWORD *)(a3 + 40) != 2)
    __asm { BR              X11 }
  v12 = *(uint64_t **)(a3 + 32);
  v13 = *v12;
  v14 = !*(_WORD *)(v13 + 24) && (*(_WORD *)(a3 + 28) & 7 & a6) == a6;
  if (!v14 || v12[1] != v9)
    return 0;
  v17 = *(_QWORD *)(v10 + 32);
  if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(v17 + 32) > 0x40u)
  {
    v18 = (const void **)(v17 + 24);
    if ((void **)(v17 + 24) != this)
    {
      llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(v17 + 32));
      v21 = *((unsigned int *)this + 2);
      if (v21 <= 0x40)
        *this = (void *)*v18;
      else
        memcpy(*this, *v18, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *this = *(void **)(v17 + 24);
    *((_DWORD *)this + 2) = *(_DWORD *)(v17 + 32);
  }
  v19 = *(_QWORD *)(v13 + 32);
  if (*((_DWORD *)a5 + 2) > 0x40u || *(_DWORD *)(v19 + 32) > 0x40u)
  {
    v20 = (const void **)(v19 + 24);
    if ((void **)(v19 + 24) != a5)
    {
      llvm::APInt::reallocate((uint64_t)a5, *(_DWORD *)(v19 + 32));
      v22 = *((unsigned int *)a5 + 2);
      if (v22 <= 0x40)
        *a5 = (void *)*v20;
      else
        memcpy(*a5, *v20, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *a5 = *(void **)(v19 + 24);
    *((_DWORD *)a5 + 2) = *(_DWORD *)(v19 + 32);
  }
  return 1;
}

uint64_t llvm::ScalarEvolution::isImpliedViaGuard(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::APInt *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v5 = a2 + 40;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6 == a2 + 40)
    return 0;
  while (1)
  {
    v15 = &v16;
    v16 = 0;
    v11 = v6 ? v6 - 24 : 0;
    v13 = 125;
    v14 = 0;
    if (sub_1C4F5E7F0((uint64_t)&v13, v11))
    {
      if ((llvm::ScalarEvolution::isImpliedCond(a1, a3, a4, a5, v16, 0, 0) & 1) != 0)
        break;
    }
    v6 = *(_QWORD *)(v6 + 8);
    if (v6 == v5)
      return 0;
  }
  return 1;
}

uint64_t llvm::ScalarEvolution::isImpliedCond(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, uint64_t a7)
{
  char v8;
  char v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  int isNullValue;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const llvm::APInt *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Value *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  llvm::Value *v48;
  int v49;
  unsigned int v50;
  llvm::Value *v51;
  unsigned int v52;
  uint64_t v53;
  llvm::Value *v54;
  int v55;
  unsigned int v56;
  uint64_t isImpliedCond;
  uint64_t v58;

  v8 = (char)a6;
  if (llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)a5, a6, a3) == (llvm::ValueHandleBase *)a5)
    return 1;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 128), a5);
  if (!v14)
    return 0;
  v15 = *(unsigned __int8 *)(a5 + 16);
  if (v15 < 0x1C)
    goto LABEL_53;
  v16 = *(_DWORD *)(*(_QWORD *)a5 + 8);
  if ((v16 & 0xFE) == 0x12)
    v16 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a5 + 16) + 8);
  if (v16 != 269)
    goto LABEL_25;
  if (v15 == 85)
  {
    v20 = 0;
    v21 = *(unsigned __int8 **)(a5 - 32);
    if (!v21)
      goto LABEL_26;
    if (v21[16] > 0x14u)
      goto LABEL_26;
    v22 = *(_QWORD *)(a5 - 96);
    v23 = *(_QWORD *)(a5 - 64);
    isNullValue = llvm::Constant::isNullValue((llvm::Constant *)v21);
    v20 = 0;
    if (!isNullValue || !v22)
      goto LABEL_26;
    goto LABEL_21;
  }
  if (v15 != 56
    || ((v17 = *(_DWORD *)(a5 + 20), (v17 & 0x40000000) != 0)
      ? (v18 = *(uint64_t **)(a5 - 8))
      : (v18 = (uint64_t *)(a5 - 32 * (v17 & 0x7FFFFFF))),
        (v22 = *v18) == 0))
  {
LABEL_25:
    v20 = 0;
    goto LABEL_26;
  }
  v23 = v18[4];
LABEL_21:
  v20 = v22;
  if (v23)
  {
    if ((v8 & 1) != 0)
    {
      if (*(_BYTE *)(a5 + 16) != 81)
        goto LABEL_53;
LABEL_59:
      v43 = *(llvm::Value **)(a5 - 64);
      v44 = *(_QWORD *)(a1 + 104);
      v45 = *(_DWORD *)(a1 + 120);
      if (v45)
      {
        v46 = ((v43 >> 4) ^ (v43 >> 9)) & (v45 - 1);
        v47 = v44 + 48 * v46;
        v48 = *(llvm::Value **)(v47 + 24);
        if (v48 == v43)
        {
LABEL_66:
          if (v47 == v44 + 48 * v45 || !*(_QWORD *)(v47 + 40))
          {
            llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v43);
            v44 = *(_QWORD *)(a1 + 104);
            v45 = *(_DWORD *)(a1 + 120);
          }
          v51 = *(llvm::Value **)(a5 - 32);
          if (v45)
          {
            v52 = ((v51 >> 4) ^ (v51 >> 9)) & (v45 - 1);
            v53 = v44 + 48 * v52;
            v54 = *(llvm::Value **)(v53 + 24);
            if (v54 == v51)
              goto LABEL_76;
            v55 = 1;
            while (v54 != (llvm::Value *)-4096)
            {
              v56 = v52 + v55++;
              v52 = v56 & (v45 - 1);
              v53 = v44 + 48 * v52;
              v54 = *(llvm::Value **)(v53 + 24);
              if (v54 == v51)
                goto LABEL_76;
            }
          }
          v53 = v44 + 48 * v45;
LABEL_76:
          if (v53 == v44 + 48 * v45 || !*(_QWORD *)(v53 + 40))
            llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v51);
          llvm::ScalarEvolution::isImpliedCond(a1, a2, (uint64_t)a3);
          goto LABEL_82;
        }
        v49 = 1;
        while (v48 != (llvm::Value *)-4096)
        {
          v50 = v46 + v49++;
          v46 = v50 & (v45 - 1);
          v47 = v44 + 48 * v46;
          v48 = *(llvm::Value **)(v47 + 24);
          if (v48 == v43)
            goto LABEL_66;
        }
      }
      v47 = v44 + 48 * v45;
      goto LABEL_66;
    }
    if ((llvm::ScalarEvolution::isImpliedCond(a1, a2, a3, a4, v22, 0, a7) & 1) != 0)
    {
      v19 = 1;
      goto LABEL_54;
    }
    v33 = a1;
    v34 = a2;
    v35 = a3;
    v36 = a4;
    v37 = v23;
    v38 = 0;
LABEL_81:
    isImpliedCond = llvm::ScalarEvolution::isImpliedCond(v33, v34, v35, v36, v37, v38, a7);
LABEL_82:
    v19 = isImpliedCond;
    goto LABEL_54;
  }
LABEL_26:
  v25 = *(unsigned __int8 *)(a5 + 16);
  if (v25 < 0x1C)
    goto LABEL_53;
  v26 = *(_DWORD *)(*(_QWORD *)a5 + 8);
  if ((v26 & 0xFE) == 0x12)
    v26 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a5 + 16) + 8);
  if (v26 != 269)
  {
LABEL_51:
    if (v25 == 81)
      goto LABEL_59;
LABEL_53:
    v19 = 0;
    goto LABEL_54;
  }
  if (v25 == 85)
  {
    v29 = 0;
    v30 = 0;
    v31 = *(unsigned __int8 **)(a5 - 64);
    if (v31)
    {
      v26 = v31[16];
      if (v26 <= 0x14)
      {
        v32 = v20;
        v30 = *(_QWORD *)(a5 - 96);
        v58 = *(_QWORD *)(a5 - 32);
        if (llvm::Constant::isOneValue((llvm::Constant *)v31))
        {
          if (v30)
          {
            v26 = v58 != 0;
            v29 = 1;
            v20 = v30;
            v30 = v58;
          }
          else
          {
            v20 = v32;
            v26 = 0;
            v29 = 1;
          }
        }
        else
        {
          v30 = 0;
          v29 = 0;
          v20 = v32;
        }
      }
    }
  }
  else
  {
    if (v25 == 57)
    {
      v27 = *(_DWORD *)(a5 + 20);
      if ((v27 & 0x40000000) != 0)
        v28 = *(uint64_t **)(a5 - 8);
      else
        v28 = (uint64_t *)(a5 - 32 * (v27 & 0x7FFFFFF));
      v19 = 0;
      v20 = *v28;
      if (!*v28)
        goto LABEL_54;
      v30 = v28[4];
      if (!v30)
        goto LABEL_54;
      goto LABEL_41;
    }
    v30 = 0;
    v29 = 0;
  }
  if ((v29 & v26) == 0)
  {
LABEL_50:
    v25 = *(unsigned __int8 *)(a5 + 16);
    goto LABEL_51;
  }
LABEL_41:
  if ((v8 & 1) == 0)
    goto LABEL_50;
  v19 = 1;
  if ((llvm::ScalarEvolution::isImpliedCond(a1, a2, a3, a4, v20, 1, a7) & 1) == 0)
  {
    v33 = a1;
    v34 = a2;
    v35 = a3;
    v36 = a4;
    v37 = v30;
    v38 = 1;
    goto LABEL_81;
  }
LABEL_54:
  v39 = sub_1C477672C(a1 + 128, a5);
  v40 = *(_QWORD *)(a1 + 136);
  v41 = 144;
  if (v40 == *(_QWORD *)(a1 + 128))
    v41 = 148;
  if (v39 != (_QWORD *)(v40 + 8 * *(unsigned int *)(a1 + v41)))
  {
    *v39 = -2;
    ++*(_DWORD *)(a1 + 152);
  }
  return v19;
}

void llvm::ScalarEvolution::isImpliedCond(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

void sub_1C4F43334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v3 = *(uint64_t **)(v0 + 32);
  v4 = *v3;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 40) + 272;
  if (*(_BYTE *)(*v3 + 8) == 15)
  {
    llvm::DataLayout::getIndexTypeSizeInBits(v5, v4);
  }
  else
  {
    sub_1C4768AD0(v5, v4);
    if ((_DWORD)v6 == 1)
  }
  __asm { BR              X11 }
}

void llvm::ScalarEvolution::isImpliedCondBalancedTypes(uint64_t ****a1, unsigned int a2, const llvm::SCEV *a3, llvm::SCEV *a4, unsigned int a5, const llvm::SCEV *a6, llvm::SCEV *a7, uint64_t a8)
{
  int v10;
  llvm::SCEV *v11;
  llvm::SCEV *v12;
  llvm::SCEV *v13;
  const llvm::SCEV *v14;
  llvm::SCEV *v16;
  uint64_t v17;
  llvm::SCEV *v18;
  uint64_t v19;
  llvm::ScalarEvolution *v20;
  uint64_t v21;
  llvm::SCEV *v22;
  llvm::SCEV *v23;
  uint64_t v24;
  const llvm::SCEV *v25;
  uint64_t RangeRef;
  unsigned int v27;
  void **p_s1;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  void **v32;
  uint64_t v33;
  llvm::ConstantRange *v34;
  unsigned int v35;
  void **v36;
  uint64_t v37;
  llvm::ConstantRange *v38;
  unsigned int v39;
  void **v40;
  uint64_t v41;
  unsigned int v42;
  llvm::SCEV *v43;
  llvm::SCEV *v44;
  uint64_t v45;
  unsigned int v46;
  void **v47;
  uint64_t v48;
  unsigned int v49;
  llvm::SCEV *v50;
  unsigned int v51;
  const llvm::SCEV *v52;
  uint64_t v53;
  llvm::APInt *v54;
  uint64_t v55;
  unsigned int v56;
  const llvm::APInt *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::SCEV *v60;
  llvm::SCEV *v61;
  const llvm::SCEV *Constant;
  char v63;
  const llvm::SCEV *v64;
  llvm::SCEV *v65;
  llvm::SCEV *v66;
  const llvm::SCEV *v67;
  const llvm::SCEV *v68;
  char v69;
  const llvm::SCEV *v70;
  char v71;
  int v72;
  char v73;
  void *v74;
  unsigned int v75;
  void *v76;
  unsigned int v77;
  llvm::SCEV *v78;
  const llvm::SCEV *v79;
  unsigned int v80;
  llvm::SCEV *v81;
  const llvm::SCEV *v82;
  unsigned int v83;
  void *__s1;
  unsigned int v85;

  v83 = a2;
  v81 = a4;
  v82 = a3;
  v80 = a5;
  v78 = a7;
  v79 = a6;
  if (llvm::ScalarEvolution::SimplifyICmpOperands(a1, (int *)&v83, &v82, (uint64_t *)&v81, 0, 0)
    && v82 == v81)
  {
    return;
  }
  v10 = llvm::ScalarEvolution::SimplifyICmpOperands(a1, (int *)&v80, &v79, (uint64_t *)&v78, 0, 0);
  v11 = v78;
  v12 = v79;
  if (v10)
  {
    if (v79 == v78)
      return;
  }
  v13 = v81;
  v14 = v82;
  if (v82 != v78 && v81 != v79)
    goto LABEL_12;
  if (*((_WORD *)v81 + 12))
  {
    v81 = v82;
    v82 = v13;
    v83 = dword_1C85F6178[v83];
    v16 = v13;
    v13 = v14;
    v14 = v16;
LABEL_12:
    v17 = v80;
    v18 = v78;
    goto LABEL_13;
  }
  v78 = v79;
  v79 = v11;
  v17 = dword_1C85F6178[v80];
  v80 = dword_1C85F6178[v80];
  v18 = v12;
  v12 = v11;
LABEL_13:
  LODWORD(v19) = v83;
  if ((_DWORD)v17 == v83)
  {
    v20 = (llvm::ScalarEvolution *)a1;
    v21 = v17;
    v22 = v14;
LABEL_15:
    v23 = v12;
LABEL_16:
    v24 = a8;
LABEL_17:
    llvm::ScalarEvolution::isImpliedCondOperands(v20, v21, v22, v13, v23, v18, v24);
    return;
  }
  if (dword_1C85F6178[(int)v17] == v83)
  {
    if (!*((_WORD *)v13 + 12) || *((_WORD *)v14 + 12) == 7)
    {
      v25 = v14;
      if (!*((_WORD *)v18 + 12) || (v25 = v14, *((_WORD *)v12 + 12) == 7))
        __asm { BR              X13 }
      v20 = (llvm::ScalarEvolution *)a1;
      v21 = v83;
      v22 = v14;
      v23 = v18;
      v18 = v12;
      goto LABEL_16;
    }
    v20 = (llvm::ScalarEvolution *)a1;
    v21 = v17;
    v22 = v13;
    v13 = v14;
    goto LABEL_15;
  }
  if ((v17 - 32) >= 0xA)
  {
    if (((1 << v17) & 0x4242) != 0)
      goto LABEL_86;
  }
  else if ((v17 & 0xFFFFFFFE) == 0x20)
  {
    goto LABEL_86;
  }
  while (2)
  {
    if (llvm::CmpInst::getFlippedSignednessPredicate(v17) == (_DWORD)v19)
    {
      RangeRef = llvm::ScalarEvolution::getRangeRef(a1, v12, 1, 0);
      llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&__s1);
      v27 = v85 - 1;
      if (v85 >= 0x41)
        p_s1 = (void **)((char *)__s1 + 8 * (v27 >> 6));
      else
        p_s1 = &__s1;
      v29 = (1 << v27) & (unint64_t)*p_s1;
      if (v85 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C]();
      if (!v29)
      {
        v30 = llvm::ScalarEvolution::getRangeRef(a1, v78, 1, 0);
        llvm::ConstantRange::getSignedMin(v30, (llvm::APInt *)&__s1);
        v31 = v85 - 1;
        if (v85 >= 0x41)
          v32 = (void **)((char *)__s1 + 8 * (v31 >> 6));
        else
          v32 = &__s1;
        v33 = (1 << v31) & (unint64_t)*v32;
        if (v85 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C]();
        if (!v33)
          goto LABEL_56;
      }
      v34 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(a1, v79, 1, 0);
      llvm::ConstantRange::getSignedMax(v34, (llvm::APInt *)&__s1);
      v35 = v85 - 1;
      if (v85 >= 0x41)
        v36 = (void **)((char *)__s1 + 8 * (v35 >> 6));
      else
        v36 = &__s1;
      v37 = (1 << v35) & (unint64_t)*v36;
      if (v85 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C]();
      if (v37)
      {
        v38 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(a1, v78, 1, 0);
        llvm::ConstantRange::getSignedMax(v38, (llvm::APInt *)&__s1);
        v39 = v85 - 1;
        if (v85 >= 0x41)
          v40 = (void **)((char *)__s1 + 8 * (v39 >> 6));
        else
          v40 = &__s1;
        v41 = (1 << v39) & (unint64_t)*v40;
        if (v85 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C]();
        if (v41)
        {
LABEL_56:
          v21 = v83;
          v13 = v81;
          v22 = v82;
          v18 = v78;
          v23 = v79;
          v20 = (llvm::ScalarEvolution *)a1;
          goto LABEL_16;
        }
      }
      v42 = v83;
      v19 = v80;
      v12 = v82;
      v17 = (uint64_t)v79;
      if ((v83 & 0xFFFFFFFA) == 0x22)
      {
        v42 = dword_1C85F60A0[v83 - 34];
        v43 = v81;
        v44 = v78;
        switch((int)v79)
        {
          case 0:
          case 1:
          case 6:
          case 7:
          case 8:
          case 9:
          case 14:
            goto LABEL_74;
          case 2:
            v19 = 4;
            goto LABEL_73;
          case 3:
            v19 = 5;
            goto LABEL_73;
          case 4:
            v19 = 2;
            goto LABEL_73;
          case 5:
            v19 = 3;
            goto LABEL_73;
          case 10:
            v19 = 12;
            goto LABEL_73;
          case 11:
            v19 = 13;
            goto LABEL_73;
          case 12:
            v19 = 10;
            goto LABEL_73;
          case 13:
            v19 = 11;
LABEL_73:
            v43 = v81;
            v44 = v78;
            goto LABEL_74;
          default:
            continue;
        }
      }
      v43 = v82;
      v12 = v81;
      v44 = v79;
      v17 = (uint64_t)v78;
LABEL_74:
      if (v42 - 38 > 3)
      {
        if (v42 - 34 <= 3 && llvm::ScalarEvolution::isKnownNegative((llvm::ScalarEvolution *)a1, v12))
        {
LABEL_85:
          v20 = (llvm::ScalarEvolution *)a1;
          v21 = v19;
          v22 = v43;
          v13 = v12;
          v23 = v44;
          v18 = (llvm::SCEV *)v17;
          v24 = 0;
          goto LABEL_17;
        }
      }
      else
      {
        v45 = llvm::ScalarEvolution::getRangeRef(a1, v12, 1, 0);
        llvm::ConstantRange::getSignedMin(v45, (llvm::APInt *)&__s1);
        v46 = v85 - 1;
        if (v85 >= 0x41)
          v47 = (void **)((char *)__s1 + 8 * (v46 >> 6));
        else
          v47 = &__s1;
        v48 = (1 << v46) & (unint64_t)*v47;
        if (v85 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C]();
        if (!v48)
          goto LABEL_85;
      }
    }
    break;
  }
LABEL_86:
  v49 = v80;
  if (v80 != 33)
  {
LABEL_120:
    v51 = v83;
    if (v49 == 32 && v83 <= 0x29 && ((1 << v83) & 0x2A90000AA00) != 0)
    {
      llvm::ScalarEvolution::isImpliedCondOperands((llvm::ScalarEvolution *)a1, v83, v82, v81, v79, v78, a8);
      if ((v73 & 1) != 0)
        return;
      v51 = v83;
    }
    goto LABEL_125;
  }
  v50 = v78;
  if (*((_WORD *)v79 + 12))
  {
    v51 = v83;
    v52 = v79;
    if (*((_WORD *)v78 + 12))
    {
LABEL_125:
      if (v51 == 33 && (v80 - 9 >= 0x21 || ((0x154800055uLL >> (v80 - 9)) & 1) == 0))
        llvm::ScalarEvolution::isImpliedCondOperands((llvm::ScalarEvolution *)a1, v80, v82, v81, v79, v78, a8);
      return;
    }
  }
  else
  {
    v51 = v83;
    v52 = v78;
    v50 = v79;
  }
  if (v51 - 38 > 3)
  {
    v54 = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(a1, v52, 0, 0);
    llvm::ConstantRange::getUnsignedMin(v54, (llvm::APInt *)&__s1);
  }
  else
  {
    v53 = llvm::ScalarEvolution::getRangeRef(a1, v52, 1, 0);
    llvm::ConstantRange::getSignedMin(v53, (llvm::APInt *)&__s1);
  }
  v55 = *((_QWORD *)v50 + 4);
  v56 = v85;
  if (v85 > 0x40)
  {
    if (!memcmp(__s1, *(const void **)(v55 + 24), (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8))
    {
      v75 = v56;
      v74 = (void *)operator new[]();
      memcpy(v74, __s1, (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8);
      goto LABEL_99;
    }
  }
  else if (__s1 == *(void **)(v55 + 24))
  {
    v75 = v85;
    v74 = __s1;
LABEL_99:
    llvm::APInt::operator+=((uint64_t)&v74, 1uLL);
    v77 = v75;
    v76 = v74;
    v75 = 0;
    v58 = v83;
    v59 = 39;
    switch(v83)
    {
      case '"':
      case '&':
        goto LABEL_102;
      case '#':
      case '\'':
        v61 = v81;
        v60 = v82;
        Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&v76, v57);
        llvm::ScalarEvolution::isImpliedCondOperands((llvm::ScalarEvolution *)a1, v58, v60, v61, v52, Constant, a8);
        if ((v63 & 1) != 0)
          goto LABEL_108;
        v58 = v83;
LABEL_102:
        v65 = v81;
        v64 = v82;
        goto LABEL_107;
      case '$':
      case '(':
        goto LABEL_106;
      case '%':
        v59 = 35;
        goto LABEL_104;
      case ')':
LABEL_104:
        v66 = v81;
        v67 = v82;
        v68 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&v76, v57);
        llvm::ScalarEvolution::isImpliedCondOperands((llvm::ScalarEvolution *)a1, v59, v66, v67, v52, v68, a8);
        if ((v69 & 1) != 0)
          goto LABEL_108;
        LODWORD(v58) = v83;
LABEL_106:
        v58 = dword_1C85F6178[(int)v58];
        v64 = v81;
        v65 = v82;
LABEL_107:
        v70 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a1, (const llvm::APInt *)&__s1, v57);
        llvm::ScalarEvolution::isImpliedCondOperands((llvm::ScalarEvolution *)a1, v58, v64, v65, v52, v70, a8);
        if ((v71 & 1) != 0)
LABEL_108:
          v72 = 0;
        else
LABEL_109:
          v72 = 1;
        if (v77 >= 0x41 && v76)
          MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
        if (v72)
          break;
        goto LABEL_115;
      default:
        goto LABEL_109;
    }
  }
  v72 = 1;
LABEL_115:
  if (v85 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v72)
  {
    v49 = v80;
    goto LABEL_120;
  }
}

void llvm::ScalarEvolution::isImpliedCondOperands(llvm::ScalarEvolution *a1, uint64_t a2, llvm::SCEV *a3, const llvm::SCEV *a4, llvm::SCEV *a5, const llvm::SCEV *a6, uint64_t a7)
{
  if ((llvm::ScalarEvolution::isImpliedCondOperandsViaRanges(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6) & 1) == 0
    && (llvm::ScalarEvolution::isImpliedCondOperandsViaNoOverflow(a1, a2, (const llvm::BasicBlock ****)a3, a4, a5, a6) & 1) == 0
    && (llvm::ScalarEvolution::isImpliedCondOperandsViaShift(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6) & 1) == 0
    && (llvm::ScalarEvolution::isImpliedCondOperandsViaAddRecStart(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7) & 1) == 0)
  {
    llvm::ScalarEvolution::isImpliedCondOperandsHelper((uint64_t)a1, a2);
  }
}

uint64_t llvm::ScalarEvolution::splitBinaryAdd(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int *a5)
{
  uint64_t result;

  result = 0;
  if (a2 && *(_WORD *)(a2 + 24) == 4)
  {
    if (*(_QWORD *)(a2 + 40) == 2)
    {
      *a3 = **(_QWORD **)(a2 + 32);
      *a4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      *a5 = *(_WORD *)(a2 + 28) & 7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::ScalarEvolution::computeConstantDifference(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const llvm::SCEV *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const llvm::SCEV *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  size_t v48;
  void *v49;
  void *v50;
  int v51;

  if (a2 == a3)
    __asm { BR              X10 }
  v5 = *((unsigned __int16 *)a3 + 12);
  if (v5 == 7)
  {
    if (*((_WORD *)a2 + 12) != 7)
      goto LABEL_27;
    if (*((_QWORD *)a3 + 6) != *((_QWORD *)a2 + 6))
      goto LABEL_36;
    if (*((_QWORD *)a3 + 5) != 2)
      goto LABEL_36;
    if (*((_QWORD *)a2 + 5) != 2)
      goto LABEL_36;
    v6 = (_QWORD *)*((_QWORD *)a3 + 4);
    v7 = *((_QWORD *)a2 + 4);
    if (v6[1] != *(_QWORD *)(v7 + 8))
      goto LABEL_36;
    a3 = (const llvm::SCEV *)*v6;
    a2 = *(const llvm::SCEV **)v7;
    v5 = *(unsigned __int16 *)(*v6 + 24);
  }
  if (v5 != 4)
  {
    if (!v5 && !*((_WORD *)a2 + 12))
    {
      v8 = *((_QWORD *)a2 + 4);
      v9 = *((_QWORD *)a3 + 4);
      v10 = *(unsigned int *)(v8 + 32);
      if (v10 < 0x41)
      {
        v11 = *(_QWORD *)(v8 + 24);
        v12 = *(_QWORD *)(v9 + 24);
LABEL_43:
        v25 = v11 - v12;
        v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
        if (!(_DWORD)v10)
          v26 = 0;
        v27 = (void *)(v26 & v25);
        goto LABEL_61;
      }
      v27 = (void *)operator new[]();
      memcpy(v27, *(const void **)(v8 + 24), ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
      v30 = 0;
      v31 = *(unint64_t **)(v9 + 24);
      v32 = (unint64_t)(v10 + 63) >> 6;
      v33 = (unint64_t *)v27;
      v34 = v32;
      do
      {
        v35 = *v31++;
        v36 = *v33 - v35;
        v37 = *v33 < v35;
        v38 = *v33 + ~v35;
        if (v30)
        {
          v30 = v38 >= *v33;
        }
        else
        {
          v38 = v36;
          v30 = v37;
        }
        *v33++ = v38;
        --v34;
      }
      while (v34);
      goto LABEL_60;
    }
    goto LABEL_27;
  }
  if (*((_QWORD *)a3 + 5) != 2)
  {
LABEL_27:
    v14 = 0;
    goto LABEL_28;
  }
  v13 = (uint64_t *)*((_QWORD *)a3 + 4);
  v15 = *v13;
  v14 = (const llvm::SCEV *)v13[1];
  if (v15)
    v16 = *(unsigned __int16 *)(v15 + 24) == 0;
  else
    v16 = 0;
  if (v16)
  {
    if (v14 == a2)
    {
      v17 = *(_QWORD *)(v15 + 32);
      v18 = *(unsigned int *)(v17 + 32);
      v51 = v18;
      if (v18 > 0x40)
      {
        v48 = ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8;
        v50 = (void *)operator new[]();
        memcpy(v50, *(const void **)(v17 + 24), v48);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v50);
      }
      else
      {
        if ((_DWORD)v18)
          v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
        else
          v19 = 0;
        v50 = (void *)(v19 & ~*(_QWORD *)(v17 + 24));
      }
      llvm::APInt::operator++((uint64_t)&v50);
      v49 = v50;
      *(_DWORD *)(a4 + 8) = v51;
      *(_QWORD *)a4 = v49;
      goto LABEL_37;
    }
    goto LABEL_29;
  }
LABEL_28:
  v15 = 0;
LABEL_29:
  if (!a2 || *((_WORD *)a2 + 12) != 4 || *((_QWORD *)a2 + 5) != 2)
    goto LABEL_36;
  v20 = (_QWORD *)*((_QWORD *)a2 + 4);
  v21 = *v20;
  if (!*v20 || *(_WORD *)(*v20 + 24) != 0)
    goto LABEL_36;
  v23 = (const llvm::SCEV *)v20[1];
  if (v23 == a3)
  {
    v28 = *(_QWORD *)(v21 + 32);
    v29 = *(unsigned int *)(v28 + 32);
    *(_DWORD *)(a4 + 8) = v29;
    if (v29 > 0x40)
    {
      v39 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
      v27 = (void *)operator new[]();
      memcpy(v27, *(const void **)(v28 + 24), v39);
    }
    else
    {
      v27 = *(void **)(v28 + 24);
    }
    goto LABEL_62;
  }
  if (!v15 || v14 != v23)
  {
LABEL_36:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  v24 = *(_QWORD *)(v21 + 32);
  v10 = *(unsigned int *)(v24 + 32);
  if (v10 < 0x41)
  {
    v11 = *(_QWORD *)(v24 + 24);
    v12 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 24);
    goto LABEL_43;
  }
  v27 = (void *)operator new[]();
  memcpy(v27, *(const void **)(v24 + 24), ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
  v40 = 0;
  v41 = *(unint64_t **)(*(_QWORD *)(v15 + 32) + 24);
  v32 = (unint64_t)(v10 + 63) >> 6;
  v42 = (unint64_t *)v27;
  v43 = v32;
  do
  {
    v44 = *v41++;
    v45 = *v42 - v44;
    v46 = *v42 < v44;
    v47 = *v42 + ~v44;
    if (v40)
    {
      v40 = v47 >= *v42;
    }
    else
    {
      v47 = v45;
      v40 = v46;
    }
    *v42++ = v47;
    --v43;
  }
  while (v43);
LABEL_60:
  *((_QWORD *)v27 + (v32 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
LABEL_61:
  *(_DWORD *)(a4 + 8) = v10;
LABEL_62:
  *(_QWORD *)a4 = v27;
LABEL_37:
  *(_BYTE *)(a4 + 16) = 1;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsViaAddRecStart(llvm::ScalarEvolution *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t LoopLatch;
  const llvm::BasicBlock ***v20;
  uint64_t v21;
  llvm::ScalarEvolution *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const llvm::BasicBlock ***v33;

  if (a7)
  {
    v13 = *(_QWORD *)(a7 + 40);
    if (a5 && *(_WORD *)(a5 + 24) == 7)
    {
      v14 = *(_QWORD *)(a5 + 48);
      v15 = sub_1C477672C(v14 + 56, *(_QWORD *)(a7 + 40));
      v16 = *(_QWORD *)(v14 + 64);
      v17 = 72;
      if (v16 == *(_QWORD *)(v14 + 56))
        v17 = 76;
      if (v15 != (_QWORD *)(v16 + 8 * *(unsigned int *)(v14 + v17)))
      {
        v18 = *((_QWORD *)a1 + 4);
        LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v14);
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v18, v13, LoopLatch))
        {
          v20 = *(const llvm::BasicBlock ****)(a5 + 48);
          if (llvm::ScalarEvolution::getLoopDisposition(a1, (const llvm::SCEV *)a6, (const llvm::Loop *)v20) == 1&& llvm::ScalarEvolution::getBlockDisposition(a1, (const llvm::SCEV *)a6, *v20[4]) == 2)
          {
            v21 = **(_QWORD **)(a5 + 32);
            v22 = a1;
            v23 = a2;
            v24 = a3;
            v25 = a4;
            v26 = a6;
            return llvm::ScalarEvolution::isImpliedCondOperands(v22, v23, v24, v25, v21, v26, 0);
          }
        }
      }
    }
    else if (a6 && *(_WORD *)(a6 + 24) == 7)
    {
      v27 = *(_QWORD *)(a6 + 48);
      v28 = sub_1C477672C(v27 + 56, *(_QWORD *)(a7 + 40));
      v29 = *(_QWORD *)(v27 + 64);
      v30 = 72;
      if (v29 == *(_QWORD *)(v27 + 56))
        v30 = 76;
      if (v28 != (_QWORD *)(v29 + 8 * *(unsigned int *)(v27 + v30)))
      {
        v31 = *((_QWORD *)a1 + 4);
        v32 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v27);
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v31, v13, v32))
        {
          v33 = *(const llvm::BasicBlock ****)(a6 + 48);
          if (llvm::ScalarEvolution::getLoopDisposition(a1, (const llvm::SCEV *)a5, (const llvm::Loop *)v33) == 1&& llvm::ScalarEvolution::getBlockDisposition(a1, (const llvm::SCEV *)a5, *v33[4]) == 2)
          {
            v26 = **(_QWORD **)(a6 + 32);
            v22 = a1;
            v23 = a2;
            v24 = a3;
            v25 = a4;
            v21 = a5;
            return llvm::ScalarEvolution::isImpliedCondOperands(v22, v23, v24, v25, v21, v26, 0);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsViaNoOverflow(llvm::ScalarEvolution *this, uint64_t a2, const llvm::BasicBlock ****a3, const llvm::SCEV *a4, llvm::SCEV *a5, const llvm::SCEV *a6)
{
  uint64_t isLoopEntryGuardedByCond;
  const llvm::BasicBlock ***v11;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  int v21;
  int64_t v22;
  unint64_t v24;
  int v25;
  size_t v26;
  unsigned int v27;
  const llvm::APInt *v28;
  unint64_t Constant;
  int v30;
  void *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  void *__s2;
  unsigned int v36;
  unsigned __int8 v37;
  void *__s1;
  unsigned int v39;
  unsigned __int8 v40;

  if ((_DWORD)a2 != 40 && (_DWORD)a2 != 36)
    return 0;
  isLoopEntryGuardedByCond = 0;
  if (a3)
  {
    if (*((_WORD *)a3 + 12) == 7)
    {
      isLoopEntryGuardedByCond = 0;
      if (a5)
      {
        if (*((_WORD *)a5 + 12) == 7)
        {
          v11 = (const llvm::BasicBlock ***)*((_QWORD *)a5 + 6);
          if (v11 != a3[6])
            return 0;
          llvm::ScalarEvolution::computeConstantDifference(this, (const llvm::SCEV *)a3, a5, (uint64_t)&__s1);
          llvm::ScalarEvolution::computeConstantDifference(this, a4, a6, (uint64_t)&__s2);
          isLoopEntryGuardedByCond = 0;
          v13 = v40;
          v14 = v37;
          if (!v40 || !v37)
          {
LABEL_38:
            if (!v14)
            {
LABEL_42:
              if (v13 && v39 >= 0x41 && __s1)
                MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
              return isLoopEntryGuardedByCond;
            }
LABEL_39:
            if (v36 >= 0x41 && __s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            goto LABEL_42;
          }
          v15 = v39;
          if (v39 > 0x40)
          {
            v30 = v37;
            v19 = __s1;
            v20 = __s2;
            if (!memcmp(__s1, __s2, (((unint64_t)v39 + 63) >> 3) & 0x3FFFFFF8))
            {
              v21 = 0;
              v22 = (unint64_t)(v15 + 63) >> 6;
              do
              {
                if (v22-- < 1)
                  break;
                v24 = v19[v22];
                v21 += __clz(v24);
              }
              while (!v24);
              v25 = v15 | 0xFFFFFFC0;
              if ((v15 & 0x3F) == 0)
                v25 = 0;
              v17 = v20;
              v16 = (unint64_t)v20;
              v14 = v30;
              if (v21 + v25 != (_DWORD)v15)
                goto LABEL_15;
              goto LABEL_28;
            }
          }
          else
          {
            v16 = (unint64_t)__s1;
            v17 = __s2;
            if (__s1 == __s2)
            {
              if (__s1)
              {
LABEL_15:
                if ((_DWORD)a2 != 36)
                  __asm { BR              X10 }
                v32 = v36;
                if (v36 > 0x40)
                {
                  v26 = (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8;
                  v31 = (void *)operator new[]();
                  memcpy(v31, v17, v26);
                  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v31);
                }
                else
                {
                  if (v36)
                    v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
                  else
                    v18 = 0;
                  v31 = (void *)(v18 & ~v16);
                }
                llvm::APInt::operator++((uint64_t)&v31);
                v27 = v32;
                v32 = 0;
                v33 = v31;
                v34 = v27;
                if (llvm::ScalarEvolution::getLoopDisposition(this, a6, (const llvm::Loop *)v11) == 1
                  && llvm::ScalarEvolution::getBlockDisposition(this, a6, *v11[4]) == 2)
                {
                  Constant = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&v33, v28);
                  isLoopEntryGuardedByCond = llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)v11, a2, (uint64_t)a6, Constant);
                  v27 = v34;
                }
                else
                {
                  isLoopEntryGuardedByCond = 0;
                }
                if (v27 >= 0x41 && v33)
                  MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
                goto LABEL_38;
              }
LABEL_28:
              isLoopEntryGuardedByCond = 1;
              goto LABEL_39;
            }
          }
          isLoopEntryGuardedByCond = 0;
          goto LABEL_39;
        }
      }
    }
  }
  return isLoopEntryGuardedByCond;
}

uint64_t llvm::ScalarEvolution::isImpliedViaMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::SCEV *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  llvm::SCEV *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  const llvm::BasicBlock *v38;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  llvm::Value *v50;
  int v51;
  unsigned int v52;
  const llvm::SCEV *SCEVIter;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  llvm::SCEV *v58;
  uint64_t LoopPredecessor;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Value *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  llvm::Value *v70;
  int v71;
  unsigned int v72;
  llvm::SCEV *v73;
  uint64_t v74;
  uint64_t LoopLatch;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Value *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  llvm::Value *v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  BOOL v92;
  llvm::SCEV *v94;
  unint64_t PostIncExpr;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::Value *v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  llvm::Value *v107;
  int v108;
  unsigned int v109;
  llvm::SCEV *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  llvm::Value *v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  llvm::Value *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  BOOL v126;
  llvm::SCEV *v128;
  unsigned int v129;
  unsigned int v130;

  v11 = a3;
  v14 = 0;
  if (a3)
  {
    if (*(_WORD *)(a3 + 24) == 14)
    {
      v14 = 0;
      v15 = *(_QWORD *)(a3 - 8);
      if (v15)
      {
        if (*(_BYTE *)(v15 + 16) == 83)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 416), *(_QWORD *)(a3 - 8));
          v14 = v15;
          if (!v16)
            return 0;
        }
      }
    }
  }
  v17 = *(unsigned __int16 *)(a4 + 24);
  if (!a4 || v17 != 14 || (v18 = *(_QWORD *)(a4 - 8)) == 0 || *(_BYTE *)(v18 + 16) != 83)
  {
    if (v14)
    {
      v21 = 0;
      v20 = *(_QWORD *)(v14 + 40);
LABEL_16:
      v22 = a5;
      a5 = (llvm::SCEV *)a6;
      v18 = v14;
      v11 = a4;
      if (!a4)
        goto LABEL_19;
LABEL_17:
      if (v17 != 7 || (v23 = *(_QWORD *)(v11 + 48), **(_QWORD **)(v23 + 32) != v20))
      {
LABEL_19:
        v24 = a7;
        v25 = *(_QWORD *)(v20 + 8);
        if (v25)
        {
          while (1)
          {
            v26 = *(_QWORD *)(v25 + 24);
            v27 = *(unsigned __int8 *)(v26 + 16);
            v28 = v26 && v27 >= 0x1C;
            if (v28 && v27 - 29 < 0xB)
              break;
            v25 = *(_QWORD *)(v25 + 8);
            if (!v25)
              goto LABEL_29;
          }
          v128 = v22;
          v38 = *(const llvm::BasicBlock **)(v26 + 40);
          if (!llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v11, v38))goto LABEL_139;
LABEL_45:
          v40 = *(_DWORD *)(v18 + 20);
          v41 = v40 & 0x7FFFFFF;
          if ((v40 & 0x7FFFFFF) != 0)
          {
            v42 = 0;
            while (1)
            {
              v43 = v18 - 32 * v41;
              if ((v40 & 0x40000000) != 0)
                v43 = *(_QWORD *)(v18 - 8);
              if (*(const llvm::BasicBlock **)(v43 + 32 * *(unsigned int *)(v18 + 60) + 8 * v42) == v38)
                break;
              if (v41 == ++v42)
                goto LABEL_51;
            }
          }
          else
          {
LABEL_51:
            LODWORD(v42) = -1;
          }
          if ((v40 & 0x40000000) != 0)
            v44 = *(_QWORD *)(v18 - 8);
          else
            v44 = v18 - 32 * v41;
          v45 = *(llvm::Value **)(v44 + 32 * v42);
          v46 = *(_QWORD *)(a1 + 104);
          v47 = *(_DWORD *)(a1 + 120);
          if (v47)
          {
            v48 = ((v45 >> 4) ^ (v45 >> 9)) & (v47 - 1);
            v49 = v46 + 48 * v48;
            v50 = *(llvm::Value **)(v49 + 24);
            if (v50 == v45)
            {
LABEL_61:
              if (v49 == v46 + 48 * v47 || (SCEVIter = *(const llvm::SCEV **)(v49 + 40)) == 0)
                SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v45);
              if (llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, SCEVIter, v38) == 2
                && ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a2, SCEVIter, v11) & 1) != 0
                 || (llvm::ScalarEvolution::isImpliedCondOperandsViaRanges((llvm::ScalarEvolution *)a1, a2, SCEVIter, v11, v128, (uint64_t)a5) & 1) != 0|| llvm::ScalarEvolution::isImpliedViaOperations(a1, a2, SCEVIter, v11, v128, a5, v24)))
              {
                while (1)
                {
                  v25 = *(_QWORD *)(v25 + 8);
                  if (!v25)
                    goto LABEL_29;
                  v54 = *(_QWORD *)(v25 + 24);
                  v55 = *(unsigned __int8 *)(v54 + 16);
                  if (v54)
                    v56 = v55 >= 0x1C;
                  else
                    v56 = 0;
                  if (v56 && v55 - 29 <= 0xA)
                  {
                    v38 = *(const llvm::BasicBlock **)(v54 + 40);
                    if (llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v11, v38))goto LABEL_45;
                    break;
                  }
                }
              }
LABEL_139:
              v30 = 0;
              v14 = v18;
              goto LABEL_31;
            }
            v51 = 1;
            while (v50 != (llvm::Value *)-4096)
            {
              v52 = v48 + v51++;
              v48 = v52 & (v47 - 1);
              v49 = v46 + 48 * v48;
              v50 = *(llvm::Value **)(v49 + 24);
              if (v50 == v45)
                goto LABEL_61;
            }
          }
          v49 = v46 + 48 * v47;
          goto LABEL_61;
        }
LABEL_29:
        v14 = v18;
LABEL_30:
        v30 = 1;
LABEL_31:
        v18 = v21;
        goto LABEL_32;
      }
      if ((*(_DWORD *)(v18 + 20) & 0x7FFFFFF) != 2)
      {
        v30 = 0;
        goto LABEL_33;
      }
      v58 = v22;
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(v11 + 48));
      v60 = *(_DWORD *)(v18 + 20);
      v61 = v60 & 0x7FFFFFF;
      if ((v60 & 0x7FFFFFF) != 0)
      {
        v62 = 0;
        while (1)
        {
          v63 = v18 - 32 * v61;
          if ((v60 & 0x40000000) != 0)
            v63 = *(_QWORD *)(v18 - 8);
          if (*(_QWORD *)(v63 + 32 * *(unsigned int *)(v18 + 60) + 8 * v62) == LoopPredecessor)
            break;
          if (v61 == ++v62)
            goto LABEL_86;
        }
      }
      else
      {
LABEL_86:
        LODWORD(v62) = -1;
      }
      if ((v60 & 0x40000000) != 0)
        v64 = *(_QWORD *)(v18 - 8);
      else
        v64 = v18 - 32 * v61;
      v65 = *(llvm::Value **)(v64 + 32 * v62);
      v66 = *(_QWORD *)(a1 + 104);
      v67 = *(_DWORD *)(a1 + 120);
      if (v67)
      {
        v68 = ((v65 >> 4) ^ (v65 >> 9)) & (v67 - 1);
        v69 = v66 + 48 * v68;
        v70 = *(llvm::Value **)(v69 + 24);
        if (v70 == v65)
        {
LABEL_100:
          v129 = a7;
          if (v69 == v66 + 48 * v67 || (v73 = *(llvm::SCEV **)(v69 + 40)) == 0)
            v73 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v65);
          v74 = **(_QWORD **)(v11 + 32);
          if ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a2, v73, v74) & 1) == 0
            && (llvm::ScalarEvolution::isImpliedCondOperandsViaRanges((llvm::ScalarEvolution *)a1, a2, v73, v74, v58, (uint64_t)a5) & 1) == 0&& !llvm::ScalarEvolution::isImpliedViaOperations(a1, a2, v73, v74, v58, a5, v129))
          {
            goto LABEL_139;
          }
          LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v23);
          v76 = *(_DWORD *)(v18 + 20);
          v77 = v76 & 0x7FFFFFF;
          if ((v76 & 0x7FFFFFF) != 0)
          {
            v78 = 0;
            while (1)
            {
              v79 = v18 - 32 * v77;
              if ((v76 & 0x40000000) != 0)
                v79 = *(_QWORD *)(v18 - 8);
              if (*(_QWORD *)(v79 + 32 * *(unsigned int *)(v18 + 60) + 8 * v78) == LoopLatch)
                break;
              if (v77 == ++v78)
                goto LABEL_112;
            }
          }
          else
          {
LABEL_112:
            LODWORD(v78) = -1;
          }
          if ((v76 & 0x40000000) != 0)
            v80 = *(_QWORD *)(v18 - 8);
          else
            v80 = v18 - 32 * v77;
          v81 = *(llvm::Value **)(v80 + 32 * v78);
          v82 = *(_QWORD *)(a1 + 104);
          v83 = *(_DWORD *)(a1 + 120);
          if (v83)
          {
            v84 = ((v81 >> 4) ^ (v81 >> 9)) & (v83 - 1);
            v85 = v82 + 48 * v84;
            v86 = *(llvm::Value **)(v85 + 24);
            if (v86 == v81)
            {
LABEL_133:
              if (v85 == v82 + 48 * v83 || (v94 = *(llvm::SCEV **)(v85 + 40)) == 0)
                v94 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v81);
              PostIncExpr = llvm::SCEVAddRecExpr::getPostIncExpr((llvm::SCEVAddRecExpr *)v11, (llvm::ScalarEvolution *)a1);
              if ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a2, v94, PostIncExpr) & 1) == 0
                && (llvm::ScalarEvolution::isImpliedCondOperandsViaRanges((llvm::ScalarEvolution *)a1, a2, v94, PostIncExpr, v58, (uint64_t)a5) & 1) == 0&& (llvm::ScalarEvolution::isImpliedViaOperations(a1, a2, v94, PostIncExpr, v58, a5, v129) & 1) == 0)
              {
                goto LABEL_139;
              }
              goto LABEL_29;
            }
            v87 = 1;
            while (v86 != (llvm::Value *)-4096)
            {
              v88 = v84 + v87++;
              v84 = v88 & (v83 - 1);
              v85 = v82 + 48 * v84;
              v86 = *(llvm::Value **)(v85 + 24);
              if (v86 == v81)
                goto LABEL_133;
            }
          }
          v85 = v82 + 48 * v83;
          goto LABEL_133;
        }
        v71 = 1;
        while (v70 != (llvm::Value *)-4096)
        {
          v72 = v68 + v71++;
          v68 = v72 & (v67 - 1);
          v69 = v66 + 48 * v68;
          v70 = *(llvm::Value **)(v69 + 24);
          if (v70 == v65)
            goto LABEL_100;
        }
      }
      v69 = v66 + 48 * v67;
      goto LABEL_100;
    }
    return 0;
  }
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 416), *(_QWORD *)(a4 - 8));
  if (!v19)
  {
    v18 = 0;
    goto LABEL_96;
  }
  if (!v14)
  {
    v21 = 0;
    a2 = dword_1C85F6178[(int)a2];
    v20 = *(_QWORD *)(v18 + 40);
    v17 = *(unsigned __int16 *)(v11 + 24);
    v22 = (llvm::SCEV *)a6;
    goto LABEL_17;
  }
  v20 = *(_QWORD *)(v14 + 40);
  if (*(_QWORD *)(v18 + 40) != v20)
  {
    v17 = *(unsigned __int16 *)(a4 + 24);
    v21 = v18;
    goto LABEL_16;
  }
  v130 = a7;
  v89 = *(_QWORD *)(v20 + 8);
  if (!v89)
  {
LABEL_131:
    v21 = v18;
    goto LABEL_30;
  }
  while (1)
  {
    v90 = *(_QWORD *)(v89 + 24);
    v91 = *(unsigned __int8 *)(v90 + 16);
    v92 = v90 && v91 >= 0x1C;
    if (v92 && v91 - 29 < 0xB)
      break;
    v89 = *(_QWORD *)(v89 + 8);
    if (!v89)
      goto LABEL_131;
  }
LABEL_140:
  v96 = *(_QWORD *)(v90 + 40);
  v97 = *(_DWORD *)(v14 + 20);
  v98 = v97 & 0x7FFFFFF;
  if ((v97 & 0x7FFFFFF) != 0)
  {
    v99 = 0;
    while (1)
    {
      v100 = v14 - 32 * v98;
      if ((v97 & 0x40000000) != 0)
        v100 = *(_QWORD *)(v14 - 8);
      if (*(_QWORD *)(v100 + 32 * *(unsigned int *)(v14 + 60) + 8 * v99) == v96)
        break;
      if (v98 == ++v99)
        goto LABEL_146;
    }
  }
  else
  {
LABEL_146:
    LODWORD(v99) = -1;
  }
  if ((v97 & 0x40000000) != 0)
    v101 = *(_QWORD *)(v14 - 8);
  else
    v101 = v14 - 32 * v98;
  v102 = *(llvm::Value **)(v101 + 32 * v99);
  v103 = *(_QWORD *)(a1 + 104);
  v104 = *(_DWORD *)(a1 + 120);
  if (!v104)
    goto LABEL_155;
  v105 = ((v102 >> 4) ^ (v102 >> 9)) & (v104 - 1);
  v106 = v103 + 48 * v105;
  v107 = *(llvm::Value **)(v106 + 24);
  if (v107 != v102)
  {
    v108 = 1;
    while (v107 != (llvm::Value *)-4096)
    {
      v109 = v105 + v108++;
      v105 = v109 & (v104 - 1);
      v106 = v103 + 48 * v105;
      v107 = *(llvm::Value **)(v106 + 24);
      if (v107 == v102)
        goto LABEL_156;
    }
LABEL_155:
    v106 = v103 + 48 * v104;
  }
LABEL_156:
  if (v106 == v103 + 48 * v104 || (v110 = *(llvm::SCEV **)(v106 + 40)) == 0)
    v110 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v102);
  v111 = *(_DWORD *)(v18 + 20);
  v112 = v111 & 0x7FFFFFF;
  if ((v111 & 0x7FFFFFF) != 0)
  {
    v113 = 0;
    while (1)
    {
      v114 = v18 - 32 * v112;
      if ((v111 & 0x40000000) != 0)
        v114 = *(_QWORD *)(v18 - 8);
      if (*(_QWORD *)(v114 + 32 * *(unsigned int *)(v18 + 60) + 8 * v113) == v96)
        break;
      if (v112 == ++v113)
        goto LABEL_165;
    }
  }
  else
  {
LABEL_165:
    LODWORD(v113) = -1;
  }
  if ((v111 & 0x40000000) != 0)
    v115 = *(_QWORD *)(v18 - 8);
  else
    v115 = v18 - 32 * v112;
  v116 = *(llvm::Value **)(v115 + 32 * v113);
  v117 = *(_QWORD *)(a1 + 104);
  v118 = *(_DWORD *)(a1 + 120);
  if (!v118)
    goto LABEL_174;
  v119 = ((v116 >> 4) ^ (v116 >> 9)) & (v118 - 1);
  v120 = v117 + 48 * v119;
  v121 = *(llvm::Value **)(v120 + 24);
  if (v121 != v116)
  {
    v122 = 1;
    while (v121 != (llvm::Value *)-4096)
    {
      v123 = v119 + v122++;
      v119 = v123 & (v118 - 1);
      v120 = v117 + 48 * v119;
      v121 = *(llvm::Value **)(v120 + 24);
      if (v121 == v116)
        goto LABEL_175;
    }
LABEL_174:
    v120 = v117 + 48 * v118;
  }
LABEL_175:
  if (v120 == v117 + 48 * v118 || (v124 = *(_QWORD *)(v120 + 40)) == 0)
    v124 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v116);
  if ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a2, v110, v124) & 1) != 0
    || (llvm::ScalarEvolution::isImpliedCondOperandsViaRanges((llvm::ScalarEvolution *)a1, a2, v110, v124, a5, a6) & 1) != 0
    || llvm::ScalarEvolution::isImpliedViaOperations(a1, a2, v110, v124, a5, a6, v130))
  {
    while (1)
    {
      v89 = *(_QWORD *)(v89 + 8);
      if (!v89)
        goto LABEL_131;
      v90 = *(_QWORD *)(v89 + 24);
      v125 = *(unsigned __int8 *)(v90 + 16);
      if (v90)
        v126 = v125 >= 0x1C;
      else
        v126 = 0;
      if (v126 && v125 - 29 < 0xB)
        goto LABEL_140;
    }
  }
LABEL_96:
  v30 = 0;
LABEL_32:
  v21 = v18;
  v18 = v14;
  if (v14)
  {
LABEL_33:
    v31 = sub_1C477672C(a1 + 416, v18);
    v32 = *(_QWORD *)(a1 + 424);
    v33 = 432;
    if (v32 == *(_QWORD *)(a1 + 416))
      v33 = 436;
    if (v31 != (_QWORD *)(v32 + 8 * *(unsigned int *)(a1 + v33)))
    {
      *v31 = -2;
      ++*(_DWORD *)(a1 + 440);
    }
  }
  if (v21)
  {
    v34 = sub_1C477672C(a1 + 416, v21);
    v35 = *(_QWORD *)(a1 + 424);
    v36 = 432;
    if (v35 == *(_QWORD *)(a1 + 416))
      v36 = 436;
    if (v34 != (_QWORD *)(v35 + 8 * *(unsigned int *)(a1 + v36)))
    {
      *v34 = -2;
      ++*(_DWORD *)(a1 + 440);
    }
  }
  return v30;
}

BOOL llvm::ScalarEvolution::dominates(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::BasicBlock *a3)
{
  return llvm::ScalarEvolution::getBlockDisposition(this, a2, a3) != 0;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsViaShift(llvm::ScalarEvolution *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  llvm::Value *v18;
  int v19;
  unsigned int v20;
  uint64_t SCEVIter;
  uint64_t RangeRef;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;

  if (a4 == a6)
    __asm { BR              X10 }
  if (a3 != a5)
    return 0;
  result = 0;
  if (a6 && *(_WORD *)(a6 + 24) == 14)
  {
    v10 = *(_QWORD *)(a6 - 8);
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v11 == 5)
    {
      if (*(_WORD *)(v10 + 18) != 26)
        return 0;
      v13 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
      v12 = *(llvm::Value **)v13;
      if (!*(_QWORD *)v13 || !*(_QWORD *)(v13 + 32))
        return 0;
    }
    else
    {
      if (v11 != 54)
        return 0;
      v12 = *(llvm::Value **)(v10 - 64);
      if (!v12 || !*(_QWORD *)(v10 - 32))
        return 0;
    }
    v14 = *((_QWORD *)this + 13);
    v15 = *((_DWORD *)this + 30);
    if (v15)
    {
      v16 = ((v12 >> 4) ^ (v12 >> 9)) & (v15 - 1);
      v17 = v14 + 48 * v16;
      v18 = *(llvm::Value **)(v17 + 24);
      if (v18 == v12)
      {
LABEL_22:
        if (v17 == v14 + 48 * v15 || (SCEVIter = *(_QWORD *)(v17 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v12);
        if ((a2 & 0xFFFFFFFE) == 0x28)
        {
          RangeRef = llvm::ScalarEvolution::getRangeRef(this, SCEVIter, 1, 0);
          llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v26);
          v23 = v27 - 1;
          if (v27 >= 0x41)
            v24 = (uint64_t *)(v26 + 8 * (v23 >> 6));
          else
            v24 = &v26;
          v25 = (1 << v23) & *v24;
          if (v27 >= 0x41)
          {
            if (v26)
              MEMORY[0x1CAA32F9C]();
          }
          if (!v25)
            return llvm::ScalarEvolution::isKnownPredicate(this, 41, SCEVIter, a4);
        }
        else if ((a2 & 0xFFFFFFFE) == 0x24)
        {
          return llvm::ScalarEvolution::isKnownPredicate(this, 37, SCEVIter, a4);
        }
        return 0;
      }
      v19 = 1;
      while (v18 != (llvm::Value *)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v17 = v14 + 48 * v16;
        v18 = *(llvm::Value **)(v17 + 24);
        if (v18 == v12)
          goto LABEL_22;
      }
    }
    v17 = v14 + 48 * v15;
    goto LABEL_22;
  }
  return result;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsViaRanges(llvm::ScalarEvolution *a1, uint64_t a2, llvm::SCEV *a3, uint64_t a4, llvm::SCEV *a5, uint64_t a6)
{
  uint64_t v9;
  unsigned int v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  void *v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  void *v22;
  size_t v23;
  unsigned int v24;
  unsigned int v25;
  const void *v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  const void *v38;
  unsigned int v39;
  char v40;
  void *v41;
  unsigned int v42;

  if (*(_WORD *)(a4 + 24))
    return 0;
  if (*(_WORD *)(a6 + 24))
    return 0;
  llvm::ScalarEvolution::computeConstantDifference(a1, a3, a5, (uint64_t)&v38);
  if (!v40)
    return 0;
  llvm::ConstantRange::makeExactICmpRegion(&v34, a2, *(_QWORD *)(a6 + 32) + 24);
  v11 = v39;
  if (v39 > 0x40)
  {
    v24 = v39;
    v17 = (((unint64_t)v39 + 63) >> 3) & 0x3FFFFFF8;
    v18 = (void *)operator new[]();
    v12 = v38;
    memcpy(v18, v38, v17);
    v27 = v24;
    v26 = v18;
    v31 = v24;
    v13 = (void *)operator new[]();
    v19 = v17;
    v11 = v24;
    memcpy(v13, v26, v19);
  }
  else
  {
    v12 = v38;
    v27 = v39;
    v26 = v38;
    v31 = v39;
    v13 = (void *)v38;
  }
  v30 = v13;
  llvm::APInt::operator+=((uint64_t)&v30, 1uLL);
  v29 = v31;
  v28 = v30;
  llvm::ConstantRange::add((llvm::ConstantRange *)&v34, (const llvm::ConstantRange *)&v26, (uint64_t)&v30);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  v14 = *(_QWORD *)(a4 + 32);
  v15 = *(unsigned int *)(v14 + 32);
  if (v15 > 0x40)
  {
    v25 = v11;
    v20 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
    v21 = *(_DWORD *)(v14 + 32);
    v22 = (void *)operator new[]();
    memcpy(v22, *(const void **)(v14 + 24), v20);
    v27 = v21;
    v26 = v22;
    v42 = v21;
    v16 = (void *)operator new[]();
    v23 = v20;
    v11 = v25;
    memcpy(v16, v22, v23);
  }
  else
  {
    v16 = *(void **)(v14 + 24);
    v27 = v15;
    v26 = v16;
    v42 = v15;
  }
  v41 = v16;
  llvm::APInt::operator+=((uint64_t)&v41, 1uLL);
  v29 = v42;
  v28 = v41;
  v9 = llvm::ConstantRange::icmp((int)&v30, a2, (int)&v26);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v37 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  if (v35 >= 0x41 && v34)
    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  if (v11 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  return v9;
}

void llvm::ScalarEvolution::isImpliedCondOperandsHelper(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C4F46770()
{
  llvm::SCEV *v0;
  llvm::SCEV *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(v5, 37, v3, v1)
    && (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(v5, 35, v2, v0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return llvm::ScalarEvolution::isImpliedViaOperations(v5, v4, v3, v2, v1, v0, 0);
  }
}

uint64_t llvm::ScalarEvolution::isImpliedViaOperations(uint64_t a1, int a2, uint64_t a3, uint64_t a4, llvm::SCEV *a5, llvm::SCEV *a6, unsigned int a7)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::SCEV *v12;
  uint64_t RangeRef;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  llvm::Value *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  llvm::Value *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;

  if (dword_1ED7F39F8 < a7)
    return 0;
  result = 0;
  v9 = (uint64_t)a5;
  v10 = a3;
  v11 = a4;
  v12 = a6;
  switch(a2)
  {
    case '"':
      v11 = a3;
      v12 = a5;
      v9 = (uint64_t)a6;
      goto LABEL_4;
    case '$':
LABEL_4:
      RangeRef = llvm::ScalarEvolution::getRangeRef(a1, v12, 1, 0);
      llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v43);
      v14 = v44 - 1;
      if (v44 >= 0x41)
        v15 = (uint64_t *)(v43 + 8 * (v14 >> 6));
      else
        v15 = &v43;
      v16 = (1 << v14) & *v15;
      if (v44 >= 0x41 && v43)
        MEMORY[0x1CAA32F9C]();
      if (!v16)
      {
        v17 = llvm::ScalarEvolution::getRangeRef(a1, v9, 1, 0);
        llvm::ConstantRange::getSignedMin(v17, (llvm::APInt *)&v43);
        v18 = v44 - 1;
        if (v44 >= 0x41)
          v19 = (uint64_t *)(v43 + 8 * (v18 >> 6));
        else
          v19 = &v43;
        v20 = (1 << v18) & *v19;
        if (v44 >= 0x41 && v43)
          MEMORY[0x1CAA32F9C]();
        if (!v20)
          __asm { BR              X11 }
      }
      return 0;
    case '&':
      v11 = a3;
      v12 = a5;
      v10 = a4;
      v9 = (uint64_t)a6;
      goto LABEL_20;
    case '(':
LABEL_20:
      v21 = v11;
      if (v11)
      {
        v21 = v11;
        if (*(_WORD *)(v11 + 24) == 3)
          v21 = *(_QWORD *)(v11 + 32);
      }
      v22 = *(unsigned __int16 *)(v21 + 24);
      if (v22 == 4 && v21)
      {
        v23 = *(_QWORD *)(v21 + 48);
        v24 = *(_QWORD *)(*(_QWORD *)a1 + 40) + 272;
        if (*(_BYTE *)(v23 + 8) == 15)
        {
          llvm::DataLayout::getIndexTypeSizeInBits(v24, v23);
        }
        else
        {
          sub_1C4768AD0(v24, v23);
          if ((_DWORD)v25 == 1)
        }
        __asm { BR              X11 }
      }
      if (v22 != 14 || !v21)
        return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v11, v10, v12, v9, a7 + 1);
      v26 = *(_QWORD *)(v21 - 8);
      v27 = *(unsigned __int8 *)(v26 + 16);
      if (v27 == 5)
      {
        if (*(_WORD *)(v26 + 18) != 20)
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v11, v10, v12, v9, a7 + 1);
        v30 = (uint64_t *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF));
        v28 = *v30;
        if (!*v30)
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v11, v10, v12, v9, a7 + 1);
        v29 = (llvm::Value *)v30[4];
        if (!v29)
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v11, v10, v12, v9, a7 + 1);
      }
      else
      {
        if (v27 != 48)
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v11, v10, v12, v9, a7 + 1);
        v28 = *(_QWORD *)(v26 - 64);
        if (!v28)
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v11, v10, v12, v9, a7 + 1);
        v29 = *(llvm::Value **)(v26 - 32);
        if (!v29)
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v11, v10, v12, v9, a7 + 1);
      }
      if (*((_BYTE *)v29 + 16) != 16)
        return 0;
      v31 = *(_QWORD *)(a1 + 104);
      v32 = *(_DWORD *)(a1 + 120);
      if (!v32)
        goto LABEL_48;
      v33 = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
      v34 = v31 + 48 * v33;
      v35 = *(llvm::Value **)(v34 + 24);
      if (v35 != v29)
      {
        v36 = 1;
        while (v35 != (llvm::Value *)-4096)
        {
          v37 = v33 + v36++;
          v33 = v37 & (v32 - 1);
          v34 = v31 + 48 * v33;
          v35 = *(llvm::Value **)(v34 + 24);
          if (v35 == v29)
            goto LABEL_49;
        }
LABEL_48:
        v34 = v31 + 48 * v32;
      }
LABEL_49:
      if (v34 == v31 + 48 * v32 || !*(_QWORD *)(v34 + 40))
      {
        llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v29);
        v31 = *(_QWORD *)(a1 + 104);
        v32 = *(_DWORD *)(a1 + 120);
      }
      if (!v32)
        goto LABEL_58;
      v38 = (v32 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      v39 = v31 + 48 * v38;
      v40 = *(_QWORD *)(v39 + 24);
      if (v40 != v28)
      {
        v41 = 1;
        while (v40 != -4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v32 - 1);
          v39 = v31 + 48 * v38;
          v40 = *(_QWORD *)(v39 + 24);
          if (v40 == v28)
            goto LABEL_59;
        }
LABEL_58:
        v39 = v31 + 48 * v32;
      }
LABEL_59:
      if (v39 == v31 + 48 * v32)
        return 0;
      result = *(_QWORD *)(v39 + 40);
      if (result)
        __asm { BR              X11 }
      return result;
    default:
      return result;
  }
  return result;
}

void llvm::ScalarEvolution::canIVOverflowOnLT(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  __asm { BR              X11 }
}

void sub_1C4F47244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v3 = *(uint64_t **)(v0 + 32);
  v4 = *v3;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 40) + 272;
  if (*(_BYTE *)(*v3 + 8) == 15)
  {
    llvm::DataLayout::getIndexTypeSizeInBits(v5, v4);
  }
  else
  {
    sub_1C4768AD0(v5, v4);
    if ((_DWORD)v6 == 1)
  }
  __asm { BR              X11 }
}

uint64_t llvm::ScalarEvolution::computeMaxBECountForLT(llvm::ConstantInt ****this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, unsigned int a5, int a6)
{
  unsigned int v11;
  uint64_t RangeRef;
  uint64_t v13;
  llvm::APInt *v14;
  llvm::APInt *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  llvm::ConstantRange *v31;
  const llvm::APInt *v32;
  unsigned int v33;
  const void **v34;
  llvm::ConstantRange *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  int v47;
  void **p_dst;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _BOOL4 v80;
  unint64_t v81;
  llvm::ValueHandleBase *v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  BOOL v87;
  uint64_t v88;
  _QWORD *v89;
  size_t v90;
  const llvm::APInt *v91;
  BOOL v92;
  unint64_t v93;
  int *v94;
  uint64_t v95;
  _DWORD *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  llvm::ValueHandleBase *v103;
  unsigned __int8 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  _QWORD *v111;
  size_t v112;
  BOOL v113;
  unint64_t v114;
  int *v115;
  uint64_t v116;
  _DWORD *v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BOOL4 v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  unsigned int v138;
  void *v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  void *__dst;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t *v150;
  unsigned int v151;
  void *__src;
  unsigned int v153;
  unint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v159;
  void *__s1;
  uint64_t v161;
  _QWORD v162[16];
  unint64_t *v163;
  uint64_t v164;
  _QWORD v165[18];

  v165[16] = *MEMORY[0x1E0C80C00];
  v11 = a5 - 1;
  if (a5 == 1 && a6)
    __asm { BR              X10 }
  if (a6)
  {
    RangeRef = llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
    llvm::ConstantRange::getSignedMin(RangeRef, (llvm::APInt *)&v158);
    v13 = llvm::ScalarEvolution::getRangeRef(this, a3, 1, 0);
    llvm::ConstantRange::getSignedMin(v13, (llvm::APInt *)&v156);
  }
  else
  {
    v14 = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(this, a2, 0, 0);
    llvm::ConstantRange::getUnsignedMin(v14, (llvm::APInt *)&v158);
    v15 = (llvm::APInt *)llvm::ScalarEvolution::getRangeRef(this, a3, 0, 0);
    llvm::ConstantRange::getUnsignedMin(v15, (llvm::APInt *)&v156);
  }
  v155 = a5;
  if (a5 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v154, 1, 0);
    v17 = v155;
  }
  else
  {
    v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    if (!a5)
      LOBYTE(v16) = 0;
    v154 = v16 & 1;
    v17 = a5;
  }
  if (a6)
  {
    if (v17 <= 0x40)
    {
      v18 = (uint64_t)(v154 << -(char)v17) >> -(char)v17;
      v19 = (uint64_t)(v156 << -(char)v17) >> -(char)v17;
      v56 = v18 < v19;
      v20 = v18 > v19;
      if (v56)
        v20 = -1;
      goto LABEL_19;
    }
    v36 = *(_QWORD *)(v154 + 8 * ((v17 - 1) >> 6)) & (1 << (v17 - 1));
    v37 = v157 - 1;
    v38 = &v156;
    if (v157 >= 0x41)
      v38 = (unint64_t *)(v156 + 8 * (v37 >> 6));
    if ((v36 != 0) != ((*v38 >> v37) & 1))
    {
      if (v36)
        v20 = -1;
      else
        v20 = 1;
      goto LABEL_19;
    }
    v53 = (((unint64_t)v17 + 63) >> 3) & 0x3FFFFFF8;
    while (v53)
    {
      v54 = *(_QWORD *)(v154 - 8 + v53);
      v55 = *(_QWORD *)(v156 - 8 + v53);
      v53 -= 8;
      v56 = v54 > v55;
      if (v54 != v55)
        goto LABEL_114;
    }
LABEL_117:
    v20 = 0;
    goto LABEL_19;
  }
  if (v17 > 0x40)
  {
    v63 = (((unint64_t)v17 + 63) >> 3) & 0x3FFFFFF8;
    while (v63)
    {
      v64 = *(_QWORD *)(v154 - 8 + v63);
      v65 = *(_QWORD *)(v156 - 8 + v63);
      v63 -= 8;
      v56 = v64 > v65;
      if (v64 != v65)
      {
LABEL_114:
        if (v56)
          v20 = 1;
        else
          v20 = -1;
        goto LABEL_19;
      }
    }
    goto LABEL_117;
  }
  v20 = v154 > v156;
  if (v154 < v156)
    v20 = -1;
LABEL_19:
  if (v20 <= 0)
    v21 = (const void **)&v156;
  else
    v21 = (const void **)&v154;
  if (v20 <= 0)
    v17 = v157;
  v153 = v17;
  if (v17 > 0x40)
  {
    __src = (void *)operator new[]();
    memcpy(__src, *v21, (((unint64_t)v153 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __src = (void *)*v21;
  }
  v151 = a5;
  if (a6)
  {
    if (a5 > 0x40)
    {
      v23 = (uint64_t *)&v150;
      llvm::APInt::initSlowCase((llvm::APInt *)&v150, -1, 1);
      if (v151 >= 0x41)
        v23 = &v150[v11 >> 6];
    }
    else
    {
      if (a5)
        v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
      else
        v22 = 0;
      v150 = (uint64_t *)v22;
      v23 = (uint64_t *)&v150;
    }
    *v23 &= ~(1 << v11);
  }
  else if (a5 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v150, -1, 1);
  }
  else
  {
    if (a5)
      v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    else
      v24 = 0;
    v150 = (uint64_t *)v24;
  }
  v148 = v153;
  if (v153 > 0x40)
  {
    v147 = operator new[]();
    memcpy((void *)v147, __src, (((unint64_t)v148 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v147 = (unint64_t)__src;
  }
  llvm::APInt::operator-=((uint64_t)&v147, 1uLL);
  v25 = v148;
  LODWORD(v164) = v148;
  v163 = (unint64_t *)v147;
  v148 = 0;
  if (v25 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v163);
  }
  else
  {
    if (v25)
      v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
    else
      v26 = 0;
    v163 = (unint64_t *)(v26 & ~v147);
  }
  llvm::APInt::operator++((uint64_t)&v163);
  v27 = v164;
  if (v164 >= 0x41)
  {
    v127 = 0;
    v128 = v163;
    v129 = v150;
    v130 = ((unint64_t)v164 + 63) >> 6;
    v131 = v130;
    do
    {
      v132 = *v129++;
      v133 = v132 + *v128;
      v134 = v133 + 1 <= *v128;
      if (v127)
      {
        ++v133;
        v127 = v134;
      }
      else
      {
        v127 = v133 < *v128;
      }
      *v128++ = v133;
      --v131;
    }
    while (v131);
    v163[(v130 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
    v27 = v164;
    v30 = (unint64_t)v163;
  }
  else
  {
    v28 = (unint64_t)v150 + (_QWORD)v163;
    if ((_DWORD)v164)
      v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v164;
    else
      v29 = 0;
    v30 = v29 & v28;
    v163 = (unint64_t *)(v29 & v28);
  }
  v149 = v30;
  LODWORD(v164) = 0;
  if (v148 >= 0x41 && v147)
    MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
  if (a6)
  {
    v31 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, a4, 1, 0);
    llvm::ConstantRange::getSignedMax(v31, (llvm::APInt *)&v143);
    v33 = v144;
    if (v144 > 0x40)
    {
      v39 = *(_QWORD *)(v143 + 8 * ((v144 - 1) >> 6)) & (1 << (v144 - 1));
      v40 = (unint64_t *)(v30 + 8 * ((v27 - 1) >> 6));
      if (v27 < 0x41)
        v40 = &v149;
      if ((v39 != 0) == ((*v40 >> (v27 - 1)) & 1))
      {
        v57 = (((unint64_t)v144 + 63) >> 3) & 0x3FFFFFF8;
        while (v57)
        {
          v58 = *(_QWORD *)(v143 - 8 + v57);
          v59 = *(_QWORD *)(v30 - 8 + v57);
          v57 -= 8;
          if (v58 != v59)
          {
            if (v58 <= v59)
              goto LABEL_54;
            break;
          }
        }
      }
      else if (v39)
      {
        goto LABEL_54;
      }
    }
    else if (v143 << -(char)v144 >> -(char)v144 < (uint64_t)(v30 << -(char)v144) >> -(char)v144)
    {
LABEL_54:
      v34 = (const void **)&v143;
      goto LABEL_69;
    }
  }
  else
  {
    v35 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(this, a4, 0, 0);
    llvm::ConstantRange::getUnsignedMax(v35, (llvm::APInt *)&v141);
    v33 = v142;
    if (v142 > 0x40)
    {
      v66 = (((unint64_t)v142 + 63) >> 3) & 0x3FFFFFF8;
      while (v66)
      {
        v67 = *(_QWORD *)(v141 - 8 + v66);
        v68 = *(_QWORD *)(v30 - 8 + v66);
        v66 -= 8;
        if (v67 != v68)
        {
          if (v67 <= v68)
            goto LABEL_57;
          break;
        }
      }
    }
    else if (v141 < v30)
    {
LABEL_57:
      v34 = (const void **)&v141;
      goto LABEL_69;
    }
  }
  v34 = (const void **)&v149;
  v33 = v27;
LABEL_69:
  v146 = v33;
  if (v33 > 0x40)
  {
    v41 = operator new[]();
    memcpy((void *)v41, *v34, (((unint64_t)v33 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v41 = (unint64_t)*v34;
  }
  __dst = (void *)v41;
  v138 = v27;
  if ((a6 & 1) != 0)
  {
    if (v144 >= 0x41 && v143)
      MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
    if (v33 <= 0x40)
    {
      v42 = (uint64_t)(v41 << -(char)v33) >> -(char)v33;
      v43 = v158;
      v44 = (uint64_t)(v158 << -(char)v33) >> -(char)v33;
      v56 = v42 <= v44;
      v45 = v42 < v44;
      v46 = !v56;
      goto LABEL_85;
    }
    v50 = *(_QWORD *)(v41 + 8 * ((v33 - 1) >> 6)) & (1 << (v33 - 1));
    v51 = v159;
    v52 = (unint64_t *)(v158 + 8 * ((v159 - 1) >> 6));
    if (v159 < 0x41)
      v52 = &v158;
    if ((v50 != 0) != ((*v52 >> (v159 - 1)) & 1))
    {
      if (!v50)
        goto LABEL_138;
      p_dst = (void **)&v158;
      goto LABEL_136;
    }
    v60 = (((unint64_t)v33 + 63) >> 3) & 0x3FFFFFF8;
    while (v60)
    {
      v61 = *(_QWORD *)(v41 - 8 + v60);
      v62 = *(_QWORD *)(v158 - 8 + v60);
      v60 -= 8;
      if (v61 != v62)
        goto LABEL_126;
    }
  }
  else
  {
    if (v142 >= 0x41 && v141)
      MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
    if (v33 <= 0x40)
    {
      v43 = v158;
      v45 = v41 < v158;
      v46 = v41 > v158;
LABEL_85:
      v47 = v46 & ~v45;
      if (v47)
        p_dst = &__dst;
      else
        p_dst = (void **)&v158;
      if ((v47 & 1) != 0)
        v49 = v33;
      else
        v49 = v159;
      if (v49 <= 0x40)
      {
        v41 = (unint64_t)*p_dst;
        __dst = *p_dst;
        v146 = v49;
        v33 = v49;
LABEL_132:
        v70 = v41 - v43;
        if (v33)
          v71 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
        else
          v71 = 0;
        v72 = (void *)(v71 & v70);
        goto LABEL_144;
      }
      goto LABEL_129;
    }
    v69 = (((unint64_t)v33 + 63) >> 3) & 0x3FFFFFF8;
    while (v69)
    {
      v61 = *(_QWORD *)(v41 - 8 + v69);
      v62 = *(_QWORD *)(v158 - 8 + v69);
      v69 -= 8;
      if (v61 != v62)
      {
LABEL_126:
        if (v61 <= v62)
          break;
        p_dst = &__dst;
        LOBYTE(v47) = 1;
        goto LABEL_129;
      }
    }
  }
  LOBYTE(v47) = 0;
  p_dst = (void **)&v158;
LABEL_129:
  if ((v47 & 1) != 0)
  {
    if (v33 <= 0x40)
    {
LABEL_131:
      v43 = v158;
      goto LABEL_132;
    }
    goto LABEL_138;
  }
  v51 = v159;
LABEL_136:
  llvm::APInt::reallocate((uint64_t)&__dst, v51);
  v33 = v146;
  if (v146 <= 0x40)
  {
    v41 = (unint64_t)*p_dst;
    __dst = *p_dst;
    goto LABEL_131;
  }
  v41 = (unint64_t)__dst;
  memcpy(__dst, *p_dst, (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8);
LABEL_138:
  v73 = v33 + 63;
  v72 = (void *)operator new[]();
  memcpy(v72, (const void *)v41, (v73 >> 3) & 0x3FFFFFF8);
  v74 = 0;
  v75 = (unint64_t *)v158;
  v76 = (unint64_t *)v72;
  v77 = v73 >> 6;
  do
  {
    v78 = *v75++;
    v79 = *v76 - v78;
    v80 = *v76 < v78;
    v81 = *v76 + ~v78;
    if (v74)
    {
      v74 = v81 >= *v76;
    }
    else
    {
      v81 = v79;
      v74 = v80;
    }
    *v76++ = v81;
    --v77;
  }
  while (v77);
  *((_QWORD *)v72 + (v73 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
LABEL_144:
  v140 = v33;
  v139 = v72;
  v82 = llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v139, v32);
  __s1 = v162;
  LODWORD(v162[0]) = 0;
  *(_QWORD *)((char *)v162 + 4) = v82;
  v161 = 0x2000000003;
  v137 = (char *)(this + 104);
  v83 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v135 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v135 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v135;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v84 = __ROR8__(*(_QWORD *)((char *)v162 + 4) + 12, 12);
  v85 = (uint64_t)&this[104][(*((_DWORD *)this + 210) - 1) & ((-348639895
                                                            * ((((0x9DDFEA08EB382D69
                                                                              * (v84 ^ ((0x9DDFEA08EB382D69
                                                                                       * (v162[0] ^ qword_1ED7EAC80 ^ v84)) >> 47) ^ (0x9DDFEA08EB382D69 * (v162[0] ^ qword_1ED7EAC80 ^ v84)))) >> 32) >> 15) ^ (-348639895 * (v84 ^ (((0x9DDFEA08EB382D69 * (v162[0] ^ qword_1ED7EAC80 ^ v84)) >> 32) >> 15) ^ (-348639895 * (LODWORD(v162[0]) ^ qword_1ED7EAC80 ^ v84)))))) ^ HIDWORD(v162[0]))];
  v86 = *(_QWORD *)v85;
  v163 = v165;
  v164 = 0x2000000000;
  if (v86)
    v87 = (v86 & 1) == 0;
  else
    v87 = 0;
  if (v87)
  {
    v88 = v161;
    v89 = __s1;
    v90 = 4 * v161;
    while (*(_QWORD *)(v86 + 16) != v88 || memcmp(v89, *(const void **)(v86 + 8), v90))
    {
      LODWORD(v164) = 0;
      v86 = *(_QWORD *)v86;
      if (v86)
        v92 = (v86 & 1) == 0;
      else
        v92 = 0;
      if (!v92)
        goto LABEL_157;
    }
    v101 = &unk_1ED7EA000;
  }
  else
  {
LABEL_157:
    v86 = sub_1C484358C((uint64_t)(this + 108), 40, 3);
    v93 = sub_1C484358C((uint64_t)(this + 108), 4 * v161, 2);
    if ((_DWORD)v161)
    {
      v94 = (int *)__s1;
      v95 = 4 * v161;
      v96 = (_DWORD *)v93;
      do
      {
        v97 = *v94++;
        *v96++ = v97;
        v95 -= 4;
      }
      while (v95);
      v98 = v161;
    }
    else
    {
      v98 = 0;
    }
    *(_QWORD *)v86 = 0;
    *(_QWORD *)(v86 + 8) = v93;
    *(_QWORD *)(v86 + 16) = v98;
    *(_DWORD *)(v86 + 24) = 0x10000;
    *(_WORD *)(v86 + 28) = 0;
    *(_QWORD *)(v86 + 32) = v82;
    v99 = *((_DWORD *)this + 211) + 1;
    v100 = *((_DWORD *)this + 210);
    if (v99 > 2 * v100)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)v137, 2 * v100, (uint64_t)off_1E813B300);
      v163 = v165;
      v164 = 0x2000000000;
      v85 = (uint64_t)&this[104][(*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v86 + 8), *(_QWORD *)(v86 + 8)+ 4 * *(_QWORD *)(v86 + 16))];
      if (v163 != v165)
        free(v163);
      v99 = *((_DWORD *)this + 211) + 1;
    }
    v101 = (_QWORD *)&unk_1ED7EA000;
    *((_DWORD *)this + 211) = v99;
    v102 = *(_QWORD *)v85;
    if (!*(_QWORD *)v85)
      v102 = v85 | 1;
    *(_QWORD *)v86 = v102;
    *(_QWORD *)v85 = v86;
    v89 = __s1;
  }
  if (v89 != v162)
    free(v89);
  v103 = llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&__src, v91);
  __s1 = v162;
  LODWORD(v162[0]) = 0;
  *(_QWORD *)((char *)v162 + 4) = v103;
  v161 = 0x2000000003;
  v104 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v136 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v136 = 0xFF51AFD7ED558CCDLL;
    v101[400] = v136;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v105 = __ROR8__(*(_QWORD *)((char *)v162 + 4) + 12, 12);
  v106 = 0x9DDFEA08EB382D69 * (v162[0] ^ v101[400] ^ v105);
  v107 = (uint64_t)&this[104][(*((_DWORD *)this + 210) - 1) & ((-348639895
                                                             * ((((0x9DDFEA08EB382D69
                                                                               * (v105 ^ (v106 >> 47) ^ v106)) >> 32) >> 15) ^ (-348639895 * (v105 ^ (v106 >> 47) ^ v106)))) ^ HIDWORD(v162[0]))];
  v108 = *(_QWORD *)v107;
  v163 = v165;
  v164 = 0x2000000000;
  if (v108)
    v109 = (v108 & 1) == 0;
  else
    v109 = 0;
  if (v109)
  {
    v110 = v161;
    v111 = __s1;
    v112 = 4 * v161;
    while (*(_QWORD *)(v108 + 16) != v110 || memcmp(v111, *(const void **)(v108 + 8), v112))
    {
      LODWORD(v164) = 0;
      v108 = *(_QWORD *)v108;
      if (v108)
        v113 = (v108 & 1) == 0;
      else
        v113 = 0;
      if (!v113)
        goto LABEL_181;
    }
    v118 = v138;
  }
  else
  {
LABEL_181:
    v108 = sub_1C484358C((uint64_t)(this + 108), 40, 3);
    v114 = sub_1C484358C((uint64_t)(this + 108), 4 * v161, 2);
    if ((_DWORD)v161)
    {
      v115 = (int *)__s1;
      v116 = 4 * v161;
      v117 = (_DWORD *)v114;
      v118 = v138;
      do
      {
        v119 = *v115++;
        *v117++ = v119;
        v116 -= 4;
      }
      while (v116);
      v120 = v161;
    }
    else
    {
      v120 = 0;
      v118 = v138;
    }
    *(_QWORD *)v108 = 0;
    *(_QWORD *)(v108 + 8) = v114;
    *(_QWORD *)(v108 + 16) = v120;
    *(_DWORD *)(v108 + 24) = 0x10000;
    *(_WORD *)(v108 + 28) = 0;
    *(_QWORD *)(v108 + 32) = v103;
    v121 = *((_DWORD *)this + 211) + 1;
    v122 = *((_DWORD *)this + 210);
    if (v121 > 2 * v122)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)v137, 2 * v122, (uint64_t)off_1E813B300);
      v163 = v165;
      v164 = 0x2000000000;
      v107 = (uint64_t)&this[104][(*((_DWORD *)this + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v108 + 8), *(_QWORD *)(v108 + 8)+ 4 * *(_QWORD *)(v108 + 16))];
      if (v163 != v165)
        free(v163);
      v121 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v121;
    v123 = *(_QWORD *)v107;
    if (!*(_QWORD *)v107)
      v123 = v107 | 1;
    *(_QWORD *)v108 = v123;
    *(_QWORD *)v107 = v108;
    v111 = __s1;
  }
  if (v111 != v162)
    free(v111);
  llvm::ScalarEvolution::getUDivCeilSCEV((llvm::ScalarEvolution *)this, (const llvm::SCEV *)v86, (const llvm::SCEV *)v108);
  v125 = v124;
  if (v140 >= 0x41 && v139)
    MEMORY[0x1CAA32F9C](v139, 0x1000C8000313F17);
  if (v146 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  if (v118 >= 0x41 && v149)
    MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
  if (v151 >= 0x41 && v150)
    MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
  if (v153 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v155 >= 0x41 && v154)
    MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
  if (v157 >= 0x41 && v156)
    MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
  if (v159 >= 0x41 && v158)
    MEMORY[0x1CAA32F9C](v158, 0x1000C8000313F17);
  return v125;
}

int32x2_t llvm::ScalarEvolution::SCEVCallbackVH::deleted(llvm::ScalarEvolution::SCEVCallbackVH *this)
{
  llvm::Value *v1;
  int32x2_t *v3;
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  llvm::Value **v8;
  llvm::Value *v9;
  int v10;
  int v11;

  v1 = (llvm::Value *)*((_QWORD *)this + 3);
  if (v1)
  {
    if (*((_BYTE *)v1 + 16) == 83)
    {
      v3 = (int32x2_t *)*((_QWORD *)this + 4);
      v4 = v3[79].i32[0];
      if (v4)
      {
        v5 = v3[77];
        v6 = v4 - 1;
        LODWORD(v7) = (v4 - 1) & ((v1 >> 4) ^ (v1 >> 9));
        v8 = (llvm::Value **)(*(_QWORD *)&v5 + 16 * v7);
        v9 = *v8;
        if (v1 == *v8)
        {
LABEL_10:
          *v8 = (llvm::Value *)-8192;
          v3[78] = vadd_s32(v3[78], (int32x2_t)0x1FFFFFFFFLL);
          v1 = (llvm::Value *)*((_QWORD *)this + 3);
        }
        else
        {
          v10 = 1;
          while (v9 != (llvm::Value *)-4096)
          {
            v11 = v7 + v10++;
            v7 = v11 & v6;
            v9 = *(llvm::Value **)(*(_QWORD *)&v5 + 16 * v7);
            if (v1 == v9)
            {
              v8 = (llvm::Value **)(*(_QWORD *)&v5 + 16 * v7);
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  return llvm::ScalarEvolution::eraseValueFromMap(*((llvm::ScalarEvolution **)this + 4), v1);
}

void llvm::ScalarEvolution::SCEVCallbackVH::allUsesReplacedWith(llvm::ScalarEvolution::SCEVCallbackVH *this, llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int32x2_t *v14;
  __int32 v15;
  int32x2_t v16;
  __int32 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int32x2_t *v23;
  __int32 v24;
  int32x2_t v25;
  __int32 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  _BYTE v36[64];
  void *v37;
  uint64_t v38;
  _QWORD v39[17];

  v39[16] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(v3 + 8);
  v37 = v39;
  v38 = 0x1000000000;
  if (v4)
  {
    v5 = 0;
    v6 = v4;
    do
    {
      ++v5;
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
    if (v5 - 1 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v5, 8);
      v7 = v38;
      v9 = v37;
      v8 = v38;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = v39;
    }
    v10 = &v9[v7];
    do
    {
      *v10++ = *(_QWORD *)(v4 + 24);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v11 = v8 + v5;
  }
  else
  {
    v11 = 0;
  }
  LODWORD(v38) = v11;
  v32 = v36;
  v33 = v36;
  v34 = 8;
  v35 = 0;
  while (v11)
  {
    v12 = *((_QWORD *)v37 + --v11);
    LODWORD(v38) = v11;
    if (v12 != v3)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v32, v12);
      if (v13)
      {
        v14 = (int32x2_t *)*((_QWORD *)this + 4);
        if (v12)
        {
          if (*(_BYTE *)(v12 + 16) == 83)
          {
            v15 = v14[79].i32[0];
            if (v15)
            {
              v16 = v14[77];
              v17 = v15 - 1;
              LODWORD(v18) = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
              v19 = (uint64_t *)(*(_QWORD *)&v16 + 16 * v18);
              v20 = *v19;
              if (v12 == *v19)
              {
LABEL_24:
                *v19 = -8192;
                v14[78] = vadd_s32(v14[78], (int32x2_t)0x1FFFFFFFFLL);
                v14 = (int32x2_t *)*((_QWORD *)this + 4);
              }
              else
              {
                v21 = 1;
                while (v20 != -4096)
                {
                  v22 = v18 + v21++;
                  v18 = v22 & v17;
                  v20 = *(_QWORD *)(*(_QWORD *)&v16 + 16 * v18);
                  if (v12 == v20)
                  {
                    v19 = (uint64_t *)(*(_QWORD *)&v16 + 16 * v18);
                    goto LABEL_24;
                  }
                }
              }
            }
          }
        }
        llvm::ScalarEvolution::eraseValueFromMap((llvm::ScalarEvolution *)v14, (llvm::Value *)v12);
        sub_1C4F5E908((unsigned int *)&v37, (uint64_t)v37 + 8 * v38, *(_QWORD *)(v12 + 8), 0);
      }
      v11 = v38;
    }
  }
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 83)
    {
      v23 = (int32x2_t *)*((_QWORD *)this + 4);
      v24 = v23[79].i32[0];
      if (v24)
      {
        v25 = v23[77];
        v26 = v24 - 1;
        LODWORD(v27) = (v24 - 1) & ((v3 >> 4) ^ (v3 >> 9));
        v28 = (uint64_t *)(*(_QWORD *)&v25 + 16 * v27);
        v29 = *v28;
        if (v3 == *v28)
        {
LABEL_39:
          *v28 = -8192;
          v23[78] = vadd_s32(v23[78], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v30 = 1;
          while (v29 != -4096)
          {
            v31 = v27 + v30++;
            v27 = v31 & v26;
            v29 = *(_QWORD *)(*(_QWORD *)&v25 + 16 * v27);
            if (v3 == v29)
            {
              v28 = (uint64_t *)(*(_QWORD *)&v25 + 16 * v27);
              goto LABEL_39;
            }
          }
        }
      }
    }
  }
  llvm::ScalarEvolution::eraseValueFromMap(*((llvm::ScalarEvolution **)this + 4), (llvm::Value *)v3);
  if (v33 != v32)
    free(v33);
  if (v37 != v39)
    free(v37);
}

uint64_t llvm::ScalarEvolution::ScalarEvolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  v8 = operator new();
  *(_QWORD *)v8 = 0;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_DWORD *)(v8 + 24) = 15;
  *(_WORD *)(v8 + 28) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 160;
  *(_QWORD *)(a1 + 136) = a1 + 160;
  *(_QWORD *)(a1 + 144) = 8;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 256;
  *(_QWORD *)(a1 + 232) = a1 + 256;
  *(_QWORD *)(a1 + 240) = 8;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 352;
  *(_QWORD *)(a1 + 328) = a1 + 352;
  *(_QWORD *)(a1 + 336) = 8;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 448;
  *(_QWORD *)(a1 + 424) = a1 + 448;
  *(_QWORD *)(a1 + 432) = 8;
  *(_DWORD *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 656) = 128;
  v9 = operator new(0x1C00uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 640) = v9;
  *(_QWORD *)(a1 + 648) = 0;
  v10 = *(unsigned int *)(a1 + 656);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *v9 = -4096;
      v9 += 7;
      v11 -= 56;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 704) = 128;
  v12 = operator new(0x1400uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 688) = v12;
  *(_QWORD *)(a1 + 696) = 0;
  v13 = *(unsigned int *)(a1 + 704);
  if ((_DWORD)v13)
  {
    v14 = 40 * v13;
    do
    {
      *v12 = -4096;
      v12 += 5;
      v14 -= 40;
    }
    while (v14);
  }
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_DWORD *)(a1 + 752) = 128;
  v15 = operator new(0x1400uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 736) = v15;
  *(_QWORD *)(a1 + 744) = 0;
  v16 = *(unsigned int *)(a1 + 752);
  if ((_DWORD)v16)
  {
    v17 = 40 * v16;
    do
    {
      *v15 = -4096;
      v15 += 5;
      v17 -= 40;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_DWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 840) = 64;
  v18 = malloc_type_calloc(0x41uLL, 8uLL, 0x6D9A4F0CuLL);
  if (!v18
    || (v18[64] = -1,
        *(_QWORD *)(a1 + 832) = v18,
        *(_DWORD *)(a1 + 844) = 0,
        *(_DWORD *)(a1 + 856) = 64,
        (v19 = malloc_type_calloc(0x41uLL, 8uLL, 0x6D9A4F0CuLL)) == 0))
  {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v19[64] = -1;
  *(_QWORD *)(a1 + 848) = v19;
  *(_OWORD *)(a1 + 860) = 0u;
  *(_DWORD *)(a1 + 876) = 0;
  *(_QWORD *)(a1 + 880) = a1 + 896;
  *(_QWORD *)(a1 + 888) = 0x400000000;
  *(_QWORD *)(a1 + 928) = a1 + 944;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_QWORD *)(a1 + 952) = 1;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1008) = a1 + 1040;
  *(_QWORD *)(a1 + 1016) = a1 + 1040;
  *(_QWORD *)(a1 + 1024) = 16;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1168) = a1 + 1200;
  *(_QWORD *)(a1 + 1176) = a1 + 1200;
  *(_QWORD *)(a1 + 1184) = 16;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  v20 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a2 + 40) + 112), "llvm.experimental.guard", 0x17uLL);
  v21 = 0;
  if (v20)
  {
    if (*(_BYTE *)(v20 + 16))
      v21 = 0;
    else
      v21 = *(_QWORD *)(v20 + 8) != 0;
  }
  *(_BYTE *)(a1 + 8) = v21;
  return a1;
}

uint64_t llvm::ScalarEvolution::ScalarEvolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = v4;
  v5 = (void *)(a1 + 160);
  *(_QWORD *)(a1 + 128) = v5;
  v7 = *(_QWORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 136);
  if (v6 == v7)
  {
    *(_QWORD *)(a1 + 136) = v5;
    v8 = *(unsigned int *)(a2 + 148);
    if ((_DWORD)v8)
      memmove(v5, *(const void **)(a2 + 136), 8 * v8);
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v6;
    *(_QWORD *)(a2 + 136) = v7;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 144) = 8;
  *(_DWORD *)(a2 + 152) = 0;
  v9 = (void *)(a1 + 256);
  *(_QWORD *)(a1 + 224) = a1 + 256;
  v11 = *(_QWORD *)(a2 + 224);
  v10 = *(_QWORD *)(a2 + 232);
  if (v10 == v11)
  {
    *(_QWORD *)(a1 + 232) = v9;
    v12 = *(unsigned int *)(a2 + 244);
    if ((_DWORD)v12)
      memmove(v9, *(const void **)(a2 + 232), 8 * v12);
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v10;
    *(_QWORD *)(a2 + 232) = v11;
  }
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 240) = 8;
  *(_DWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 352;
  *(_QWORD *)(a1 + 328) = a1 + 352;
  *(_QWORD *)(a1 + 336) = 8;
  *(_DWORD *)(a1 + 344) = 0;
  v13 = (void *)(a1 + 448);
  *(_QWORD *)(a1 + 416) = a1 + 448;
  v15 = *(_QWORD *)(a2 + 416);
  v14 = *(_QWORD *)(a2 + 424);
  if (v14 == v15)
  {
    *(_QWORD *)(a1 + 424) = v13;
    v16 = *(unsigned int *)(a2 + 436);
    if ((_DWORD)v16)
      memmove(v13, *(const void **)(a2 + 424), 8 * v16);
  }
  else
  {
    *(_QWORD *)(a1 + 424) = v14;
    *(_QWORD *)(a2 + 424) = v15;
  }
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 432) = 8;
  *(_DWORD *)(a2 + 440) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  *(_DWORD *)(a2 + 528) = 0;
  v17 = *(_DWORD *)(a1 + 532);
  *(_DWORD *)(a1 + 532) = *(_DWORD *)(a2 + 532);
  *(_DWORD *)(a2 + 532) = v17;
  v18 = *(_DWORD *)(a1 + 536);
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  *(_DWORD *)(a2 + 536) = v18;
  *(_DWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
  *(_DWORD *)(a2 + 552) = 0;
  v19 = *(_DWORD *)(a1 + 556);
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a2 + 556);
  *(_DWORD *)(a2 + 556) = v19;
  v20 = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a2 + 560);
  *(_DWORD *)(a2 + 560) = v20;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_DWORD *)(a2 + 576) = 0;
  v21 = *(_DWORD *)(a1 + 580);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(_DWORD *)(a2 + 580) = v21;
  v22 = *(_DWORD *)(a1 + 584);
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_DWORD *)(a2 + 584) = v22;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 592) = 0;
  *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 600);
  *(_DWORD *)(a2 + 600) = 0;
  v23 = *(_DWORD *)(a1 + 604);
  *(_DWORD *)(a1 + 604) = *(_DWORD *)(a2 + 604);
  *(_DWORD *)(a2 + 604) = v23;
  v24 = *(_DWORD *)(a1 + 608);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(_DWORD *)(a2 + 608) = v24;
  *(_DWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a2 + 616) = 0;
  *(_DWORD *)(a1 + 624) = *(_DWORD *)(a2 + 624);
  *(_DWORD *)(a2 + 624) = 0;
  v25 = *(_DWORD *)(a1 + 628);
  *(_DWORD *)(a1 + 628) = *(_DWORD *)(a2 + 628);
  *(_DWORD *)(a2 + 628) = v25;
  v26 = *(_DWORD *)(a1 + 632);
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  *(_DWORD *)(a2 + 632) = v26;
  *(_DWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a2 + 640) = 0;
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a2 + 648);
  *(_DWORD *)(a2 + 648) = 0;
  v27 = *(_DWORD *)(a1 + 652);
  *(_DWORD *)(a1 + 652) = *(_DWORD *)(a2 + 652);
  *(_DWORD *)(a2 + 652) = v27;
  v28 = *(_DWORD *)(a1 + 656);
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a2 + 656);
  *(_DWORD *)(a2 + 656) = v28;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a2 + 664) = 0;
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 672);
  *(_DWORD *)(a2 + 672) = 0;
  v29 = *(_DWORD *)(a1 + 676);
  *(_DWORD *)(a1 + 676) = *(_DWORD *)(a2 + 676);
  *(_DWORD *)(a2 + 676) = v29;
  v30 = *(_DWORD *)(a1 + 680);
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  *(_DWORD *)(a2 + 680) = v30;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a2 + 688) = 0;
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  *(_DWORD *)(a2 + 696) = 0;
  v31 = *(_DWORD *)(a1 + 700);
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(a2 + 700);
  *(_DWORD *)(a2 + 700) = v31;
  v32 = *(_DWORD *)(a1 + 704);
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a2 + 704);
  *(_DWORD *)(a2 + 704) = v32;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a2 + 712) = 0;
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  *(_DWORD *)(a2 + 720) = 0;
  v33 = *(_DWORD *)(a1 + 724);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
  *(_DWORD *)(a2 + 724) = v33;
  v34 = *(_DWORD *)(a1 + 728);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a2 + 728) = v34;
  *(_DWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a2 + 736) = 0;
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a2 + 744);
  *(_DWORD *)(a2 + 744) = 0;
  v35 = *(_DWORD *)(a1 + 748);
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
  *(_DWORD *)(a2 + 748) = v35;
  v36 = *(_DWORD *)(a1 + 752);
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
  *(_DWORD *)(a2 + 752) = v36;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 760) = 0;
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
  *(_DWORD *)(a2 + 768) = 0;
  v37 = *(_DWORD *)(a1 + 772);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
  *(_DWORD *)(a2 + 772) = v37;
  v38 = *(_DWORD *)(a1 + 776);
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  *(_DWORD *)(a2 + 776) = v38;
  *(_DWORD *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a2 + 784) = 0;
  *(_DWORD *)(a1 + 792) = *(_DWORD *)(a2 + 792);
  *(_DWORD *)(a2 + 792) = 0;
  v39 = *(_DWORD *)(a1 + 796);
  *(_DWORD *)(a1 + 796) = *(_DWORD *)(a2 + 796);
  *(_DWORD *)(a2 + 796) = v39;
  v40 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
  *(_DWORD *)(a2 + 800) = v40;
  *(_DWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a2 + 808) = 0;
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a2 + 816);
  *(_DWORD *)(a2 + 816) = 0;
  v41 = *(_DWORD *)(a1 + 820);
  *(_DWORD *)(a1 + 820) = *(_DWORD *)(a2 + 820);
  *(_DWORD *)(a2 + 820) = v41;
  v42 = *(_DWORD *)(a1 + 824);
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  *(_DWORD *)(a2 + 824) = v42;
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_OWORD *)(a2 + 832) = 0u;
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  *(_OWORD *)(a2 + 848) = 0u;
  sub_1C4E854AC(a1 + 864, a2 + 864);
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a2 + 960) = 0;
  *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 968);
  *(_DWORD *)(a2 + 968) = 0;
  v43 = *(_DWORD *)(a1 + 972);
  *(_DWORD *)(a1 + 972) = *(_DWORD *)(a2 + 972);
  *(_DWORD *)(a2 + 972) = v43;
  v44 = *(_DWORD *)(a1 + 976);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(_DWORD *)(a2 + 976) = v44;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a2 + 984) = 0;
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a2 + 992);
  *(_DWORD *)(a2 + 992) = 0;
  v45 = *(_DWORD *)(a1 + 996);
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a2 + 996);
  *(_DWORD *)(a2 + 996) = v45;
  v46 = *(_DWORD *)(a1 + 1000);
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
  *(_DWORD *)(a2 + 1000) = v46;
  *(_QWORD *)(a1 + 1008) = a1 + 1040;
  *(_QWORD *)(a1 + 1016) = a1 + 1040;
  *(_QWORD *)(a1 + 1024) = 16;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1168) = a1 + 1200;
  *(_QWORD *)(a1 + 1176) = a1 + 1200;
  *(_QWORD *)(a1 + 1184) = 16;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a2 + 1328) = 0;
  return a1;
}

void llvm::ScalarEvolution::~ScalarEvolution(llvm::ScalarEvolution *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;

  v2 = (_QWORD *)*((_QWORD *)this + 166);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)v2[9];
    v4 = v3[3];
    if (v4 && v4 != -8192 && v4 != -4096)
    {
      v5 = v3[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v5 = v3[2];
      v6 = (unint64_t *)v3[2];
      if (v6)
      {
        *v6 = *v6 & 7 | v5;
      }
      else
      {
        v7 = v3[3];
        v8 = ***(int32x2_t ****)v7;
        v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            v13 = (uint64_t *)(v9 + 16 * v12);
            v14 = *v13;
            if (v7 == *v13)
            {
LABEL_13:
              *v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              v7 = v3[3];
            }
            else
            {
              v15 = 1;
              while (v14 != -4096)
              {
                v16 = v12 + v15++;
                v12 = v16 & v11;
                v14 = *(_QWORD *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_13;
                }
              }
            }
            *(_BYTE *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
  }
  *((_QWORD *)this + 166) = 0;
  sub_1C4F333F4((uint64_t)this + 80);
  sub_1C4F330BC((uint64_t)this + 104);
  sub_1C4A5A548((unsigned int *)this + 14);
  v17 = (uint64_t *)((char *)this + 544);
  if (*((_QWORD *)this + 69))
  {
    v49 = *((_DWORD *)this + 140);
    if (v49 > 4 * *((_DWORD *)this + 138) && v49 >= 0x41)
    {
      sub_1C4F5D100((uint64_t)this + 544);
    }
    else
    {
      if (v49)
      {
        v50 = *v17;
        v51 = *v17 + 144 * v49;
        do
        {
          if (*(_QWORD *)v50 != -4096)
          {
            if (*(_QWORD *)v50 != -8192)
            {
              v52 = *(char **)(v50 + 8);
              v53 = *(_DWORD *)(v50 + 16);
              if (v53)
              {
                v59 = 88 * v53;
                do
                {
                  v60 = *(void **)&v52[v59 - 56];
                  if (v60 != *(void **)&v52[v59 - 64])
                  {
                    v68 = v50;
                    free(v60);
                    v50 = v68;
                  }
                  v59 -= 88;
                }
                while (v59);
                v52 = *(char **)(v50 + 8);
              }
              if (v52 != (char *)(v50 + 24))
              {
                v63 = v52;
                v64 = v50;
                free(v63);
                v50 = v64;
              }
            }
            *(_QWORD *)v50 = -4096;
          }
          v50 += 144;
        }
        while (v50 != v51);
      }
      *((_QWORD *)this + 69) = 0;
    }
  }
  v18 = (uint64_t *)((char *)this + 568);
  v19 = *((_DWORD *)this + 144);
  if (v19 || *((_DWORD *)this + 145))
  {
    v54 = *((_DWORD *)this + 146);
    if (v54 > 4 * v19 && v54 >= 0x41)
    {
      sub_1C4F5D100((uint64_t)this + 568);
    }
    else
    {
      if (v54)
      {
        v55 = *v18;
        v56 = *v18 + 144 * v54;
        do
        {
          if (*(_QWORD *)v55 != -4096)
          {
            if (*(_QWORD *)v55 != -8192)
            {
              v57 = *(char **)(v55 + 8);
              v58 = *(_DWORD *)(v55 + 16);
              if (v58)
              {
                v61 = 88 * v58;
                do
                {
                  v62 = *(void **)&v57[v61 - 56];
                  if (v62 != *(void **)&v57[v61 - 64])
                  {
                    v67 = v56;
                    v69 = v57;
                    free(v62);
                    v56 = v67;
                    v57 = v69;
                  }
                  v61 -= 88;
                }
                while (v61);
                v57 = *(char **)(v55 + 8);
              }
              if (v57 != (char *)(v55 + 24))
              {
                v65 = v55;
                v66 = v56;
                free(v57);
                v56 = v66;
                v55 = v65;
              }
            }
            *(_QWORD *)v55 = -4096;
          }
          v55 += 144;
        }
        while (v55 != v56);
      }
      *((_QWORD *)this + 72) = 0;
    }
  }
  v20 = (void *)*((_QWORD *)this + 147);
  if (v20 != *((void **)this + 146))
    free(v20);
  v21 = (void *)*((_QWORD *)this + 127);
  if (v21 != *((void **)this + 126))
    free(v21);
  sub_1C4F5DBEC((uint64_t)this + 984);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 123), 8);
  v22 = *((unsigned int *)this + 244);
  v23 = *((_QWORD *)this + 120);
  if ((_DWORD)v22)
  {
    v45 = (_QWORD *)(v23 + 24);
    v46 = 56 * v22;
    do
    {
      v47 = *(v45 - 3);
      if (v47 != -4096 && v47 != -8192)
      {
        v48 = (_QWORD *)*(v45 - 2);
        if (v45 != v48)
          free(v48);
      }
      v45 += 7;
      v46 -= 56;
    }
    while (v46);
    v23 = *((_QWORD *)this + 120);
  }
  MEMORY[0x1CAA32FB4](v23, 8);
  sub_1C4926AE8((uint64_t)this + 864);
  free(*((void **)this + 106));
  free(*((void **)this + 104));
  sub_1C4F5EBC4((uint64_t *)this + 101);
  sub_1C4F5EBC4((uint64_t *)this + 98);
  v24 = *((_DWORD *)this + 194);
  v25 = *((_QWORD *)this + 95);
  if (v24)
  {
    v43 = (void **)(v25 + 16);
    v44 = 104 * v24;
    do
    {
      if (((unint64_t)*(v43 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v43 != *(v43 - 1))
        free(*v43);
      v43 += 13;
      v44 -= 104;
    }
    while (v44);
    v25 = *((_QWORD *)this + 95);
  }
  MEMORY[0x1CAA32FB4](v25, 8);
  sub_1C4F5D740((uint64_t)this + 736);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 92), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 89), 8);
  sub_1C4F5D740((uint64_t)this + 688);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 86), 8);
  v26 = *((unsigned int *)this + 170);
  v27 = *((_QWORD *)this + 83);
  if ((_DWORD)v26)
  {
    v28 = 56 * v26;
    v29 = (_QWORD *)(v27 + 24);
    do
    {
      v30 = *(v29 - 3);
      if (v30 != -4096 && v30 != -8192)
      {
        v31 = (_QWORD *)*(v29 - 2);
        if (v29 != v31)
          free(v31);
      }
      v29 += 7;
      v28 -= 56;
    }
    while (v28);
    v27 = *((_QWORD *)this + 83);
  }
  MEMORY[0x1CAA32FB4](v27, 8);
  v32 = *((unsigned int *)this + 164);
  v33 = *((_QWORD *)this + 80);
  if ((_DWORD)v32)
  {
    v34 = 56 * v32;
    v35 = (_QWORD *)(v33 + 24);
    do
    {
      v36 = *(v35 - 3);
      if (v36 != -4096 && v36 != -8192)
      {
        v37 = (_QWORD *)*(v35 - 2);
        if (v35 != v37)
          free(v37);
      }
      v35 += 7;
      v34 -= 56;
    }
    while (v34);
    v33 = *((_QWORD *)this + 80);
  }
  MEMORY[0x1CAA32FB4](v33, 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 77), 8);
  sub_1C4F5D3C0((unsigned int *)this + 148);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 74), 8);
  sub_1C4F5EAF0((uint64_t *)this + 71);
  sub_1C4F5EAF0((uint64_t *)this + 68);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 65), 8);
  v38 = (void *)*((_QWORD *)this + 53);
  if (v38 != *((void **)this + 52))
    free(v38);
  v39 = (void *)*((_QWORD *)this + 41);
  if (v39 != *((void **)this + 40))
    free(v39);
  v40 = (void *)*((_QWORD *)this + 29);
  if (v40 != *((void **)this + 28))
    free(v40);
  v41 = (void *)*((_QWORD *)this + 17);
  if (v41 != *((void **)this + 16))
    free(v41);
  sub_1C4F5D430((uint64_t)this + 104);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 13), 8);
  sub_1C4F5DA54((uint64_t)this + 80);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 10), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 7), 8);
  v42 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v42)
    MEMORY[0x1CAA32FC0](v42, 0x10D0C40EABAF3F2);
}

void llvm::ScalarEvolution::print(llvm::Value **this, llvm::raw_ostream *a2)
{
  void *v4;
  _BYTE *v5;
  llvm::Value *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  llvm::Value *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  const llvm::SCEV *SCEVIter;
  llvm::Value *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  const llvm::Loop *v36;
  const llvm::SCEV *SCEVAtScope;
  uint64_t v38;
  _DWORD *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t RangeRef;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const llvm::SCEV *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  llvm::Value ***v58;
  _WORD *v59;
  unint64_t v60;
  llvm::raw_ostream *v61;
  const char *v62;
  size_t v63;
  _WORD *v64;
  unsigned int LoopDisposition;
  size_t v66;
  char *v67;
  void *v68;
  uint64_t v69;
  const void *v70;
  _BYTE *v71;
  void *v72;
  int v73;
  unsigned int v74;
  _BYTE *v75;
  const void *v76;
  void *v77;
  unsigned int v78;
  char *v79;
  char *v80;
  char *v81;
  int v82;
  BOOL v83;
  llvm::Value ***v84;
  _WORD *v85;
  _WORD *v86;
  unsigned int v87;
  size_t v88;
  char *v89;
  void *v90;
  _WORD *v91;
  int v92;
  unsigned int v93;
  _BYTE *v94;
  _BYTE v95[64];
  char *v96;
  char *v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  int v101;
  int v102;
  unsigned int v103;
  _BYTE v104[64];
  void *__p;
  char *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  unsigned int v111;
  void *v112;
  _BYTE *v113;
  void *v114;
  void *v115;
  unsigned int v116;
  unsigned int v117;
  void *v118;
  _BYTE *v119;

  if (!byte_1ED7F3FF8)
    goto LABEL_2;
  v10 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 0x1CuLL)
  {
    qmemcpy(v10, "Classifying expressions for: ", 29);
    *((_QWORD *)a2 + 4) += 29;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Classifying expressions for: ", 0x1DuLL);
  }
  llvm::Value::printAsOperand(*this, a2, 0, 0);
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v11)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v11 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  v12 = (uint64_t)*this + 72;
  for (i = *((_QWORD *)*this + 10); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v12)
      goto LABEL_2;
    v14 = i - 24;
    if (!i)
      v14 = 0;
    v15 = *(_QWORD *)(v14 + 48);
    if (v15 != v14 + 40)
      break;
  }
  while (1)
  {
    if (v15)
      v16 = v15 - 24;
    else
      v16 = 0;
    if ((*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFD) == 0xD && *(unsigned __int8 *)(v16 + 16) - 81 >= 2)
    {
      llvm::Value::print((llvm::Value *)v16, a2, 0);
      v17 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v17 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v17 + 1;
        *v17 = 10;
      }
      v18 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v18 > 6uLL)
      {
        *(_DWORD *)((char *)v18 + 3) = 538983981;
        *v18 = 757932064;
        *((_QWORD *)a2 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  -->  ", 7uLL);
      }
      v19 = this[13];
      v20 = *((_DWORD *)this + 30);
      if (v20)
      {
        v21 = (v20 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        v22 = (char *)v19 + 48 * v21;
        v23 = *((_QWORD *)v22 + 3);
        if (v23 == v16)
        {
LABEL_37:
          if (v22 == (char *)v19 + 48 * v20 || (SCEVIter = (const llvm::SCEV *)*((_QWORD *)v22 + 5)) == 0)
            SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v16);
          llvm::SCEV::print((uint64_t)SCEVIter);
          if (*((_WORD *)SCEVIter + 12) != 15)
          {
            v43 = (_DWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v43 > 3uLL)
            {
              *v43 = 540693792;
              *((_QWORD *)a2 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(a2, " U: ", 4uLL);
            }
            RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, (uint64_t)SCEVIter, 0, 0);
            v45 = RangeRef;
            LODWORD(v109) = *(_DWORD *)(RangeRef + 8);
            if (v109 > 0x40)
            {
              v108 = (void *)operator new[]();
              memcpy(v108, *(const void **)v45, (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v108 = *(void **)RangeRef;
            }
            v111 = *(_DWORD *)(v45 + 24);
            if (v111 > 0x40)
            {
              v110 = (void *)operator new[]();
              memcpy(v110, *(const void **)(v45 + 16), (((unint64_t)v111 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v110 = *(void **)(v45 + 16);
            }
            llvm::ConstantRange::print((llvm::ConstantRange *)&v108, a2);
            if (v111 >= 0x41 && v110)
              MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
            if (v109 >= 0x41 && v108)
              MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
            v46 = (_DWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v46 > 3uLL)
            {
              *v46 = 540693280;
              *((_QWORD *)a2 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(a2, " S: ", 4uLL);
            }
            v47 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, (uint64_t)SCEVIter, 1u, 0);
            v48 = v47;
            LODWORD(v109) = *(_DWORD *)(v47 + 8);
            if (v109 > 0x40)
            {
              v108 = (void *)operator new[]();
              memcpy(v108, *(const void **)v48, (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v108 = *(void **)v47;
            }
            v111 = *(_DWORD *)(v48 + 24);
            if (v111 > 0x40)
            {
              v110 = (void *)operator new[]();
              memcpy(v110, *(const void **)(v48 + 16), (((unint64_t)v111 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v110 = *(void **)(v48 + 16);
            }
            llvm::ConstantRange::print((llvm::ConstantRange *)&v108, a2);
            if (v111 >= 0x41 && v110)
              MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
            if (v109 >= 0x41 && v108)
              MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
          }
          v27 = this[5];
          v28 = *((_DWORD *)v27 + 4);
          if (v28)
          {
            v29 = *(_QWORD *)(v16 + 40);
            v30 = *(_QWORD *)v27;
            v31 = v28 - 1;
            v32 = ((v29 >> 4) ^ (v29 >> 9)) & (v28 - 1);
            v33 = *(_QWORD *)(v30 + 16 * v32);
            if (v29 == v33)
            {
LABEL_46:
              v36 = *(const llvm::Loop **)(v30 + 16 * v32 + 8);
              goto LABEL_48;
            }
            v34 = 1;
            while (v33 != -4096)
            {
              v35 = v32 + v34++;
              v32 = v35 & v31;
              v33 = *(_QWORD *)(v30 + 16 * v32);
              if (v29 == v33)
                goto LABEL_46;
            }
          }
          v36 = 0;
LABEL_48:
          SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)this, SCEVIter, v36);
          if (SCEVAtScope != SCEVIter)
          {
            v38 = (uint64_t)SCEVAtScope;
            v39 = (_DWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v39 > 6uLL)
            {
              *(_DWORD *)((char *)v39 + 3) = 538983981;
              *v39 = 757932064;
              *((_QWORD *)a2 + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(a2, "  -->  ", 7uLL);
            }
            llvm::SCEV::print(v38);
            if (*(_WORD *)(v38 + 24) != 15)
            {
              v50 = (_DWORD *)*((_QWORD *)a2 + 4);
              if (*((_QWORD *)a2 + 3) - (_QWORD)v50 > 3uLL)
              {
                *v50 = 540693792;
                *((_QWORD *)a2 + 4) += 4;
              }
              else
              {
                llvm::raw_ostream::write(a2, " U: ", 4uLL);
              }
              v51 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v38, 0, 0);
              v52 = v51;
              LODWORD(v109) = *(_DWORD *)(v51 + 8);
              if (v109 > 0x40)
              {
                v108 = (void *)operator new[]();
                memcpy(v108, *(const void **)v52, (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v108 = *(void **)v51;
              }
              v111 = *(_DWORD *)(v52 + 24);
              if (v111 > 0x40)
              {
                v110 = (void *)operator new[]();
                memcpy(v110, *(const void **)(v52 + 16), (((unint64_t)v111 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v110 = *(void **)(v52 + 16);
              }
              llvm::ConstantRange::print((llvm::ConstantRange *)&v108, a2);
              if (v111 >= 0x41 && v110)
                MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
              if (v109 >= 0x41 && v108)
                MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
              v53 = (_DWORD *)*((_QWORD *)a2 + 4);
              if (*((_QWORD *)a2 + 3) - (_QWORD)v53 > 3uLL)
              {
                *v53 = 540693280;
                *((_QWORD *)a2 + 4) += 4;
              }
              else
              {
                llvm::raw_ostream::write(a2, " S: ", 4uLL);
              }
              v54 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v38, 1u, 0);
              v55 = v54;
              LODWORD(v109) = *(_DWORD *)(v54 + 8);
              if (v109 > 0x40)
              {
                v108 = (void *)operator new[]();
                memcpy(v108, *(const void **)v55, (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v108 = *(void **)v54;
              }
              v111 = *(_DWORD *)(v55 + 24);
              if (v111 > 0x40)
              {
                v110 = (void *)operator new[]();
                memcpy(v110, *(const void **)(v55 + 16), (((unint64_t)v111 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v110 = *(void **)(v55 + 16);
              }
              llvm::ConstantRange::print((llvm::ConstantRange *)&v108, a2);
              if (v111 >= 0x41 && v110)
                MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
              if (v109 >= 0x41 && v108)
                MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
            }
          }
          v40 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (!v36)
          {
LABEL_53:
            if (*((_BYTE **)a2 + 3) == v40)
            {
              llvm::raw_ostream::write(a2, "\n", 1uLL);
            }
            else
            {
              *v40 = 10;
              ++*((_QWORD *)a2 + 4);
            }
            goto LABEL_55;
          }
          if (*((_QWORD *)a2 + 3) - (_QWORD)v40 > 8uLL)
          {
            v40[8] = 32;
            *(_QWORD *)v40 = *(_QWORD *)"\t\tExits: ";
            *((_QWORD *)a2 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(a2, "\t\tExits: ", 9uLL);
          }
          v49 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)this, SCEVIter, *(const llvm::Loop **)v36);
          if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)this, v49, v36) == 1)
          {
            llvm::SCEV::print((uint64_t)v49);
          }
          else
          {
            v56 = *((_QWORD *)a2 + 4);
            if ((unint64_t)(*((_QWORD *)a2 + 3) - v56) > 0xA)
            {
              *(_DWORD *)(v56 + 7) = 1044278903;
              *(_QWORD *)v56 = *(_QWORD *)"<<Unknown>>";
              *((_QWORD *)a2 + 4) += 11;
            }
            else
            {
              llvm::raw_ostream::write(a2, "<<Unknown>>", 0xBuLL);
            }
          }
          v57 = 1;
          v58 = (llvm::Value ***)v36;
          while (1)
          {
            v59 = (_WORD *)*((_QWORD *)a2 + 4);
            v60 = *((_QWORD *)a2 + 3) - (_QWORD)v59;
            if ((v57 & 1) != 0)
            {
              if (v60 > 0x15)
              {
                qmemcpy(v59, "\t\tLoopDispositions: { ", 22);
                v69 = *((_QWORD *)a2 + 4) + 22;
LABEL_123:
                *((_QWORD *)a2 + 4) = v69;
                goto LABEL_113;
              }
              v61 = a2;
              v62 = "\t\tLoopDispositions: { ";
              v63 = 22;
            }
            else
            {
              if (v60 > 1)
              {
                *v59 = 8236;
                v69 = *((_QWORD *)a2 + 4) + 2;
                goto LABEL_123;
              }
              v61 = a2;
              v62 = ", ";
              v63 = 2;
            }
            llvm::raw_ostream::write(v61, v62, v63);
LABEL_113:
            llvm::Value::printAsOperand(*v58[4], a2, 0, 0);
            v64 = (_WORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v64 > 1uLL)
            {
              *v64 = 8250;
              *((_QWORD *)a2 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a2, ": ", 2uLL);
            }
            LoopDisposition = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)this, SCEVIter, (const llvm::Loop *)v58);
            v66 = qword_1C85F60B8[LoopDisposition];
            v67 = off_1E813B3A0[LoopDisposition];
            v68 = (void *)*((_QWORD *)a2 + 4);
            if (v66 <= *((_QWORD *)a2 + 3) - (_QWORD)v68)
            {
              memcpy(v68, v67, v66);
              *((_QWORD *)a2 + 4) += v66;
            }
            else
            {
              llvm::raw_ostream::write(a2, v67, v66);
            }
            v57 = 0;
            v58 = (llvm::Value ***)*v58;
            if (!v58)
            {
              sub_1C61B1B68(&v108, (uint64_t)v36);
              v99 = v104;
              v70 = v109;
              if (v109 == v108)
              {
                v71 = v104;
                v100 = v104;
                v72 = v109;
                goto LABEL_126;
              }
              v92 = (int)v110;
              v71 = malloc_type_malloc(8 * v110, 0x4065EBACuLL);
              if (!v71 && (v92 || (v71 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_221:
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              v100 = v71;
              v72 = v108;
              v70 = v109;
LABEL_126:
              v73 = HIDWORD(v110);
              v101 = (int)v110;
              if (v70 == v72)
                v74 = HIDWORD(v110);
              else
                v74 = v110;
              if (v74)
              {
                memmove(v71, v70, 8 * v74);
                v73 = HIDWORD(v110);
              }
              v102 = v73;
              v103 = v111;
              v106 = 0;
              v107 = 0;
              __p = 0;
              sub_1C4D6CDA0(&__p, v112, v113, 0xAAAAAAAAAAAAAAABLL * ((v113 - (_BYTE *)v112) >> 3));
              v75 = v95;
              v76 = v115;
              if (v115 == v114)
              {
                v94 = v95;
                v77 = v115;
              }
              else
              {
                v93 = v116;
                v75 = malloc_type_malloc(8 * v116, 0x4065EBACuLL);
                if (!v75)
                {
                  if (v93)
                    goto LABEL_221;
                  v75 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                  if (!v75)
                    goto LABEL_221;
                }
                v94 = v75;
                v77 = v114;
                v76 = v115;
              }
              if (v76 == v77)
                v78 = v117;
              else
                v78 = v116;
              if (v78)
                memmove(v75, v76, 8 * v78);
              v97 = 0;
              v98 = 0;
              v96 = 0;
              sub_1C4D6CDA0(&v96, v118, v119, 0xAAAAAAAAAAAAAAABLL * ((v119 - (_BYTE *)v118) >> 3));
              while (1)
              {
                if (v106 - (_BYTE *)__p == v97 - v96)
                {
                  if (__p == v106)
                  {
LABEL_164:
                    if (v96)
                    {
                      v97 = v96;
                      operator delete(v96);
                    }
                    if (v94 != v95)
                      free(v94);
                    if (__p)
                    {
                      v106 = (char *)__p;
                      operator delete(__p);
                    }
                    if (v100 != v99)
                      free(v100);
                    if (v118)
                    {
                      v119 = v118;
                      operator delete(v118);
                    }
                    if (v115 != v114)
                      free(v115);
                    if (v112)
                    {
                      v113 = v112;
                      operator delete(v112);
                    }
                    if (v109 != v108)
                      free(v109);
                    v91 = (_WORD *)*((_QWORD *)a2 + 4);
                    if (*((_QWORD *)a2 + 3) - (_QWORD)v91 > 1uLL)
                    {
                      *v91 = 32032;
                      v40 = (_BYTE *)(*((_QWORD *)a2 + 4) + 2);
                      *((_QWORD *)a2 + 4) = v40;
                    }
                    else
                    {
                      llvm::raw_ostream::write(a2, " }", 2uLL);
                      v40 = (_BYTE *)*((_QWORD *)a2 + 4);
                    }
                    goto LABEL_53;
                  }
                  v79 = v96 + 8;
                  v80 = (char *)__p + 8;
                  while (1)
                  {
                    v81 = v80 - 8;
                    if (*((_QWORD *)v80 - 1) != *((_QWORD *)v79 - 1))
                      break;
                    v82 = v79[8];
                    if (v80[8])
                      v83 = v82 == 0;
                    else
                      v83 = 1;
                    if (v83)
                    {
                      if ((v80[8] == 0) == (v82 != 0))
                        break;
                    }
                    else if (*(_QWORD *)v80 != *(_QWORD *)v79)
                    {
                      break;
                    }
                    v79 += 24;
                    v80 += 24;
                    if (v81 + 24 == v106)
                      goto LABEL_164;
                  }
                }
                v84 = (llvm::Value ***)*((_QWORD *)v106 - 3);
                if (v84 != (llvm::Value ***)v36)
                {
                  v85 = (_WORD *)*((_QWORD *)a2 + 4);
                  if (*((_QWORD *)a2 + 3) - (_QWORD)v85 > 1uLL)
                  {
                    *v85 = 8236;
                    *((_QWORD *)a2 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(a2, ", ", 2uLL);
                  }
                  llvm::Value::printAsOperand(*v84[4], a2, 0, 0);
                  v86 = (_WORD *)*((_QWORD *)a2 + 4);
                  if (*((_QWORD *)a2 + 3) - (_QWORD)v86 > 1uLL)
                  {
                    *v86 = 8250;
                    *((_QWORD *)a2 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(a2, ": ", 2uLL);
                  }
                  v87 = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)this, SCEVIter, (const llvm::Loop *)v84);
                  v88 = qword_1C85F60B8[v87];
                  v89 = off_1E813B3A0[v87];
                  v90 = (void *)*((_QWORD *)a2 + 4);
                  if (v88 <= *((_QWORD *)a2 + 3) - (_QWORD)v90)
                  {
                    memcpy(v90, v89, v88);
                    *((_QWORD *)a2 + 4) += v88;
                  }
                  else
                  {
                    llvm::raw_ostream::write(a2, v89, v88);
                  }
                }
                sub_1C61B3544((char *)&v99);
              }
            }
          }
        }
        v24 = 1;
        while (v23 != -4096)
        {
          v25 = v21 + v24++;
          v21 = v25 & (v20 - 1);
          v22 = (char *)v19 + 48 * v21;
          v23 = *((_QWORD *)v22 + 3);
          if (v23 == v16)
            goto LABEL_37;
        }
      }
      v22 = (char *)v19 + 48 * v20;
      goto LABEL_37;
    }
LABEL_55:
    v15 = *(_QWORD *)(v15 + 8);
    v41 = i - 24;
    if (!i)
      v41 = 0;
    if (v15 == v41 + 40)
      break;
LABEL_62:
    if (i == v12)
      goto LABEL_2;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v12)
      break;
    v42 = i - 24;
    if (!i)
      v42 = 0;
    v15 = *(_QWORD *)(v42 + 48);
    if (v15 != v42 + 40)
      goto LABEL_62;
  }
LABEL_2:
  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x26uLL)
  {
    qmemcpy(v4, "Determining loop execution counts for: ", 39);
    *((_QWORD *)a2 + 4) += 39;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Determining loop execution counts for: ", 0x27uLL);
  }
  llvm::Value::printAsOperand(*this, a2, 0, 0);
  v5 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v5)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v5 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  v6 = this[5];
  v7 = (uint64_t *)*((_QWORD *)v6 + 3);
  v8 = (uint64_t *)*((_QWORD *)v6 + 4);
  while (v7 != v8)
  {
    v9 = *v7++;
    sub_1C4F4AE24(a2, (llvm::ScalarEvolution *)this, v9);
  }
}

uint64_t llvm::ScalarEvolution::getLoopDisposition(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  char *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  const llvm::SCEV **v12;
  const llvm::SCEV *v13;
  const llvm::SCEV **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  const llvm::SCEV **v18;
  uint64_t v19;
  uint64_t v20;
  const llvm::SCEV *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  const llvm::SCEV **v28;
  const llvm::SCEV *v29;
  const llvm::SCEV **v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  const llvm::SCEV **v35;
  const llvm::SCEV *v36;
  uint64_t v37;
  uint64_t v38;
  const llvm::SCEV *v39;

  v39 = a2;
  v6 = (char *)this + 688;
  v7 = *((_DWORD *)this + 176);
  v8 = a2 >> 4;
  if (v7)
  {
    v9 = *((_QWORD *)this + 86);
    v10 = v7 - 1;
    v11 = v10 & (v8 ^ (a2 >> 9));
    v12 = (const llvm::SCEV **)(v9 + 40 * v11);
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_16;
    v14 = 0;
    v15 = 1;
    while (v13 != (const llvm::SCEV *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (const llvm::SCEV *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (const llvm::SCEV **)(v9 + 40 * v11);
      v13 = *v12;
      if (*v12 == a2)
        goto LABEL_16;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
  }
  else
  {
    v18 = 0;
  }
  v12 = (const llvm::SCEV **)sub_1C4F5EC88((uint64_t)this + 688, (uint64_t *)&v39, v18);
  *v12 = a2;
  v12[1] = (const llvm::SCEV *)(v12 + 3);
  v12[2] = (const llvm::SCEV *)0x200000000;
LABEL_16:
  v19 = *((unsigned int *)v12 + 4);
  if (!(_DWORD)v19)
  {
LABEL_20:
    if (v19 >= *((_DWORD *)v12 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v12 + 1), (uint64_t)(v12 + 3), v19 + 1, 8);
      *((_QWORD *)v12[1] + *((unsigned int *)v12 + 4)) = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF9;
      LODWORD(v19) = *((_DWORD *)v12 + 4);
    }
    else
    {
      *((_QWORD *)v12[1] + v19) = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF9;
    }
    *((_DWORD *)v12 + 4) = v19 + 1;
    llvm::ScalarEvolution::computeLoopDisposition((uint64_t)this, (uint64_t)a2);
    v23 = v22;
    v24 = *((_DWORD *)this + 176);
    if (v24)
    {
      v25 = *((_QWORD *)this + 86);
      v26 = v24 - 1;
      v27 = (v8 ^ (a2 >> 9)) & v26;
      v28 = (const llvm::SCEV **)(v25 + 40 * v27);
      v29 = *v28;
      if (*v28 == a2)
        goto LABEL_39;
      v30 = 0;
      v31 = 1;
      while (v29 != (const llvm::SCEV *)-4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == (const llvm::SCEV *)-8192;
        if (v32)
          v30 = v28;
        v33 = v27 + v31++;
        v27 = v33 & v26;
        v28 = (const llvm::SCEV **)(v25 + 40 * v27);
        v29 = *v28;
        if (*v28 == a2)
          goto LABEL_39;
      }
      if (v30)
        v35 = v30;
      else
        v35 = v28;
    }
    else
    {
      v35 = 0;
    }
    v28 = (const llvm::SCEV **)sub_1C4F5EC88((uint64_t)v6, (uint64_t *)&v39, v35);
    *v28 = a2;
    v28[1] = (const llvm::SCEV *)(v28 + 3);
    v28[2] = (const llvm::SCEV *)0x200000000;
LABEL_39:
    v36 = v28[1];
    v37 = 8 * *((unsigned int *)v28 + 4);
    while (v37)
    {
      v38 = *(_QWORD *)((char *)v36 + v37 - 8);
      v37 -= 8;
      if ((const llvm::Loop *)(v38 & 0xFFFFFFFFFFFFFFF8) == a3)
      {
        *(_QWORD *)((char *)v36 + v37) = v38 & 0xFFFFFFFFFFFFFFF9 | (2 * v23);
        return v23;
      }
    }
    return v23;
  }
  v20 = 8 * v19;
  v21 = v12[1];
  while ((const llvm::Loop *)(*(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8) != a3)
  {
    v21 = (const llvm::SCEV *)((char *)v21 + 8);
    v20 -= 8;
    if (!v20)
      goto LABEL_20;
  }
  return (*(_QWORD *)v21 >> 1) & 3;
}

void sub_1C4F4AE24(llvm::raw_ostream *a1, llvm::ScalarEvolution *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  const llvm::Loop **BackedgeTakenInfo;
  uint64_t Exact;
  char *v14;
  unint64_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  size_t v18;
  const llvm::Loop **v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t ****v22;
  uint64_t ****v23;
  uint64_t *v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  llvm::ScalarEvolution *v35;
  uint64_t v36;
  size_t *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  _WORD *v41;
  const llvm::Loop **v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t ****v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _WORD *v49;
  const llvm::Loop **v50;
  const llvm::Loop *v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  char *v56;
  unint64_t v57;
  const char *v58;
  llvm::raw_ostream *v59;
  size_t v60;
  const llvm::Loop **v61;
  uint64_t v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  const llvm::Loop **v66;
  unsigned int v67;
  _DWORD *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _WORD *v72;
  const llvm::Loop **PredicatedBackedgeTakenInfo;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  void *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  const llvm::Loop **v84;
  uint64_t v85;
  _WORD *v86;
  uint64_t v87;
  unsigned int SmallConstantTripMultiple;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[32];
  void *v95;
  uint64_t v96;
  _QWORD v97[9];

  v3 = a3;
  v97[8] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(a3 + 8);
  v7 = *(uint64_t **)(a3 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    sub_1C4F4AE24(a1, a2, v8);
  }
  v9 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v9) > 4)
  {
    *(_BYTE *)(v9 + 4) = 32;
    *(_DWORD *)v9 = 1886351180;
    *((_QWORD *)a1 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(a1, "Loop ", 5uLL);
  }
  llvm::Value::printAsOperand(**(llvm::Value ***)(v3 + 32), a1, 0, 0);
  v10 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8250;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, ": ", 2uLL);
  }
  v95 = v97;
  v96 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks((_QWORD *)v3, (uint64_t)&v95);
  if ((_DWORD)v96 != 1)
  {
    v11 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v11) > 0x10)
    {
      *(_BYTE *)(v11 + 16) = 32;
      *(_OWORD *)v11 = *(_OWORD *)"<multiple exits> ";
      *((_QWORD *)a1 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(a1, "<multiple exits> ", 0x11uLL);
    }
  }
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
  Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, v3, (uint64_t)a2, 0);
  v14 = (char *)*((_QWORD *)a1 + 4);
  v15 = *((_QWORD *)a1 + 3) - (_QWORD)v14;
  if (*(_WORD *)(Exact + 24) == 15)
  {
    if (v15 <= 0x23)
    {
      v16 = "Unpredictable backedge-taken count.\n";
      v17 = a1;
      v18 = 36;
LABEL_18:
      llvm::raw_ostream::write(v17, v16, v18);
      goto LABEL_19;
    }
    qmemcpy(v14, "Unpredictable backedge-taken count.\n", 36);
    v90 = *((_QWORD *)a1 + 4) + 36;
  }
  else
  {
    if (v15 > 0x17)
    {
      qmemcpy(v14, "backedge-taken count is ", 24);
      *((_QWORD *)a1 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(a1, "backedge-taken count is ", 0x18uLL);
    }
    v19 = llvm::ScalarEvolution::getBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
    v20 = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)v19, v3, (uint64_t)a2, 0);
    llvm::SCEV::print(v20);
    v21 = (_BYTE *)*((_QWORD *)a1 + 4);
    if (*((_BYTE **)a1 + 3) == v21)
    {
      v16 = "\n";
      v17 = a1;
      v18 = 1;
      goto LABEL_18;
    }
    *v21 = 10;
    v90 = *((_QWORD *)a1 + 4) + 1;
  }
  *((_QWORD *)a1 + 4) = v90;
LABEL_19:
  if (v96 >= 2)
  {
    v22 = (uint64_t ****)v95;
    v23 = (uint64_t ****)((char *)v95 + 8 * v96);
    v24 = (uint64_t *)((char *)a2 + 48);
    while (1)
    {
      v25 = *v22;
      v26 = *((_QWORD *)a1 + 4);
      if ((unint64_t)(*((_QWORD *)a1 + 3) - v26) > 0x10)
      {
        *(_BYTE *)(v26 + 16) = 32;
        *(_OWORD *)v26 = *(_OWORD *)"  exit count for ";
        *((_QWORD *)a1 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(a1, "  exit count for ", 0x11uLL);
      }
      if ((*((_BYTE *)v25 + 23) & 0x10) != 0)
        break;
      v41 = (_WORD *)*((_QWORD *)a1 + 4);
LABEL_36:
      if (*((_QWORD *)a1 + 3) - (_QWORD)v41 > 1uLL)
      {
        *v41 = 8250;
        *((_QWORD *)a1 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a1, ": ", 2uLL);
      }
      v42 = llvm::ScalarEvolution::getBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
      v43 = *((_DWORD *)v42 + 2);
      v44 = v24;
      if (v43)
      {
        v45 = (uint64_t ****)((char *)*v42 + 48);
        v46 = 88 * v43;
        while (*(v45 - 6) != v25 || *((_DWORD *)v45 - 1) != *(_DWORD *)v45)
        {
          v45 += 11;
          v46 -= 88;
          if (!v46)
          {
            v44 = v24;
            goto LABEL_45;
          }
        }
        v44 = (uint64_t *)(v45 - 5);
      }
LABEL_45:
      llvm::SCEV::print(*v44);
      v47 = (_BYTE *)*((_QWORD *)a1 + 4);
      if (*((_BYTE **)a1 + 3) == v47)
      {
        llvm::raw_ostream::write(a1, "\n", 1uLL);
      }
      else
      {
        *v47 = 10;
        ++*((_QWORD *)a1 + 4);
      }
      if (++v22 == v23)
        goto LABEL_53;
    }
    v27 = ***v25;
    v28 = *(_QWORD *)(v27 + 152);
    v29 = *(unsigned int *)(v27 + 168);
    if ((_DWORD)v29)
    {
      LODWORD(v30) = (v29 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      v31 = (uint64_t ****)(v28 + 16 * v30);
      v32 = *v31;
      if (*v31 == v25)
      {
LABEL_31:
        v35 = a2;
        v36 = v3;
        v37 = (size_t *)v31[1];
        v40 = *v37;
        v38 = v37 + 2;
        v39 = v40;
        v41 = (_WORD *)*((_QWORD *)a1 + 4);
        if (v40 <= *((_QWORD *)a1 + 3) - (_QWORD)v41)
        {
          if (v39)
          {
            memcpy(v41, v38, v39);
            v41 = (_WORD *)(*((_QWORD *)a1 + 4) + v39);
            *((_QWORD *)a1 + 4) = v41;
          }
        }
        else
        {
          llvm::raw_ostream::write(a1, (const char *)v38, v39);
          v41 = (_WORD *)*((_QWORD *)a1 + 4);
        }
        v3 = v36;
        a2 = v35;
        goto LABEL_36;
      }
      v33 = 1;
      while (v32 != (uint64_t ***)-4096)
      {
        v34 = v30 + v33++;
        v30 = v34 & (v29 - 1);
        v32 = *(uint64_t ****)(v28 + 16 * v30);
        if (v32 == v25)
        {
          v31 = (uint64_t ****)(v28 + 16 * v30);
          goto LABEL_31;
        }
      }
    }
    v31 = (uint64_t ****)(v28 + 16 * v29);
    goto LABEL_31;
  }
LABEL_53:
  v48 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v48) > 4)
  {
    *(_BYTE *)(v48 + 4) = 32;
    *(_DWORD *)v48 = 1886351180;
    *((_QWORD *)a1 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(a1, "Loop ", 5uLL);
  }
  llvm::Value::printAsOperand(**(llvm::Value ***)(v3 + 32), a1, 0, 0);
  v49 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v49 > 1uLL)
  {
    *v49 = 8250;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, ": ", 2uLL);
  }
  v50 = llvm::ScalarEvolution::getBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
  v51 = v50[13];
  if (!v51)
    goto LABEL_58;
  v52 = *((_DWORD *)v50 + 2);
  if (v52)
  {
    v53 = (_DWORD *)((char *)*v50 + 48);
    v54 = 88 * v52;
    while (*(v53 - 1) == *v53)
    {
      v53 += 22;
      v54 -= 88;
      if (!v54)
        goto LABEL_63;
    }
LABEL_58:
    v51 = (const llvm::Loop *)*((_QWORD *)a2 + 6);
  }
LABEL_63:
  v55 = *((unsigned __int16 *)v51 + 12);
  v56 = (char *)*((_QWORD *)a1 + 4);
  v57 = *((_QWORD *)a1 + 3) - (_QWORD)v56;
  if (v55 == 15)
  {
    if (v57 <= 0x27)
    {
      v58 = "Unpredictable max backedge-taken count. ";
      v59 = a1;
      v60 = 40;
LABEL_81:
      llvm::raw_ostream::write(v59, v58, v60);
      goto LABEL_82;
    }
    qmemcpy(v56, "Unpredictable max backedge-taken count. ", 40);
    v91 = *((_QWORD *)a1 + 4) + 40;
LABEL_133:
    *((_QWORD *)a1 + 4) = v91;
    goto LABEL_82;
  }
  if (v57 > 0x1B)
  {
    qmemcpy(v56, "max backedge-taken count is ", 28);
    *((_QWORD *)a1 + 4) += 28;
  }
  else
  {
    llvm::raw_ostream::write(a1, "max backedge-taken count is ", 0x1CuLL);
  }
  v61 = llvm::ScalarEvolution::getBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
  v62 = (uint64_t)v61[13];
  if (!v62)
    goto LABEL_69;
  v63 = *((_DWORD *)v61 + 2);
  if (v63)
  {
    v64 = (_DWORD *)((char *)*v61 + 48);
    v65 = 88 * v63;
    while (*(v64 - 1) == *v64)
    {
      v64 += 22;
      v65 -= 88;
      if (!v65)
        goto LABEL_74;
    }
LABEL_69:
    v62 = *((_QWORD *)a2 + 6);
  }
LABEL_74:
  llvm::SCEV::print(v62);
  v66 = llvm::ScalarEvolution::getBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
  if (!*((_BYTE *)v66 + 128))
    goto LABEL_82;
  v67 = *((_DWORD *)v66 + 2);
  if (!v67)
  {
LABEL_79:
    v70 = (void *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v70 <= 0x28uLL)
    {
      v58 = ", actual taken count either this or zero.";
      v59 = a1;
      v60 = 41;
      goto LABEL_81;
    }
    qmemcpy(v70, ", actual taken count either this or zero.", 41);
    v91 = *((_QWORD *)a1 + 4) + 41;
    goto LABEL_133;
  }
  v68 = (_DWORD *)((char *)*v66 + 48);
  v69 = 88 * v67;
  while (*(v68 - 1) == *v68)
  {
    v68 += 22;
    v69 -= 88;
    if (!v69)
      goto LABEL_79;
  }
LABEL_82:
  v71 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v71) > 5)
  {
    *(_WORD *)(v71 + 4) = 8304;
    *(_DWORD *)v71 = 1869564938;
    *((_QWORD *)a1 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a1, "\nLoop ", 6uLL);
  }
  llvm::Value::printAsOperand(**(llvm::Value ***)(v3 + 32), a1, 0, 0);
  v72 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v72 > 1uLL)
  {
    *v72 = 8250;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, ": ", 2uLL);
  }
  v92 = v94;
  v93 = 0x400000000;
  PredicatedBackedgeTakenInfo = llvm::ScalarEvolution::getPredicatedBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
  v74 = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)PredicatedBackedgeTakenInfo, v3, (uint64_t)a2, (uint64_t)&v92);
  v75 = (char *)*((_QWORD *)a1 + 4);
  v76 = *((_QWORD *)a1 + 3) - (_QWORD)v75;
  if (*(_WORD *)(v74 + 24) == 15)
  {
    if (v76 > 0x2E)
    {
      qmemcpy(v75, "Unpredictable predicated backedge-taken count. ", 47);
      *((_QWORD *)a1 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(a1, "Unpredictable predicated backedge-taken count. ", 0x2FuLL);
    }
  }
  else
  {
    v77 = v74;
    if (v76 > 0x22)
    {
      qmemcpy(v75, "Predicated backedge-taken count is ", 35);
      *((_QWORD *)a1 + 4) += 35;
    }
    else
    {
      llvm::raw_ostream::write(a1, "Predicated backedge-taken count is ", 0x23uLL);
    }
    llvm::SCEV::print(v77);
    v78 = (_BYTE *)*((_QWORD *)a1 + 4);
    if (*((_BYTE **)a1 + 3) == v78)
    {
      llvm::raw_ostream::write(a1, "\n", 1uLL);
      v79 = (void *)*((_QWORD *)a1 + 4);
    }
    else
    {
      *v78 = 10;
      v79 = (void *)(*((_QWORD *)a1 + 4) + 1);
      *((_QWORD *)a1 + 4) = v79;
    }
    if (*((_QWORD *)a1 + 3) - (_QWORD)v79 > 0xCuLL)
    {
      qmemcpy(v79, " Predicates:\n", 13);
      *((_QWORD *)a1 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a1, " Predicates:\n", 0xDuLL);
    }
    if ((_DWORD)v93)
    {
      v80 = (uint64_t *)v92;
      v81 = 8 * v93;
      do
      {
        v82 = *v80++;
        (*(void (**)(uint64_t, llvm::raw_ostream *, uint64_t))(*(_QWORD *)v82 + 24))(v82, a1, 4);
        v81 -= 8;
      }
      while (v81);
    }
  }
  v83 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v83)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *v83 = 10;
    ++*((_QWORD *)a1 + 4);
  }
  v84 = llvm::ScalarEvolution::getBackedgeTakenInfo(a2, (const llvm::Loop *)v3);
  if (*(_WORD *)(llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)v84, v3, (uint64_t)a2, 0) + 24) != 15)
  {
    v85 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v85) > 4)
    {
      *(_BYTE *)(v85 + 4) = 32;
      *(_DWORD *)v85 = 1886351180;
      *((_QWORD *)a1 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a1, "Loop ", 5uLL);
    }
    llvm::Value::printAsOperand(**(llvm::Value ***)(v3 + 32), a1, 0, 0);
    v86 = (_WORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v86 > 1uLL)
    {
      *v86 = 8250;
      v87 = *((_QWORD *)a1 + 4) + 2;
      *((_QWORD *)a1 + 4) = v87;
    }
    else
    {
      llvm::raw_ostream::write(a1, ": ", 2uLL);
      v87 = *((_QWORD *)a1 + 4);
    }
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v87) > 0x10)
    {
      *(_BYTE *)(v87 + 16) = 32;
      *(_OWORD *)v87 = *(_OWORD *)"Trip multiple is ";
      *((_QWORD *)a1 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(a1, "Trip multiple is ", 0x11uLL);
    }
    SmallConstantTripMultiple = llvm::ScalarEvolution::getSmallConstantTripMultiple(a2, (const llvm::Loop *)v3);
    sub_1C5E21910(a1, SmallConstantTripMultiple, 0, 0, 0);
    v89 = (_BYTE *)*((_QWORD *)a1 + 4);
    if (*((_BYTE **)a1 + 3) == v89)
    {
      llvm::raw_ostream::write(a1, "\n", 1uLL);
    }
    else
    {
      *v89 = 10;
      ++*((_QWORD *)a1 + 4);
    }
  }
  if (v92 != v94)
    free(v92);
  if (v95 != v97)
    free(v95);
}

void llvm::ScalarEvolution::computeLoopDisposition(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1C4F4B9C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const llvm::Loop *v16;
  llvm::ScalarEvolution *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  const llvm::SCEV **v21;
  uint64_t v22;
  int LoopDisposition;

  v19 = *(_QWORD *)(v18 + 40);
  if (v19)
  {
    v20 = 0;
    v21 = *(const llvm::SCEV ***)(v18 + 32);
    v22 = 8 * v19;
    do
    {
      LoopDisposition = llvm::ScalarEvolution::getLoopDisposition(v17, *v21, v16);
      if (!LoopDisposition)
        break;
      v20 |= LoopDisposition == 2;
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
}

BOOL llvm::ScalarEvolution::hasComputableLoopEvolution(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  return llvm::ScalarEvolution::getLoopDisposition(this, a2, a3) == 2;
}

uint64_t llvm::ScalarEvolution::getBlockDisposition(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::BasicBlock *a3)
{
  char *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  const llvm::SCEV *v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  const llvm::SCEV *v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const llvm::SCEV *v39;

  v39 = a2;
  v6 = (char *)this + 736;
  v7 = *((_DWORD *)this + 188);
  v8 = a2 >> 4;
  if (v7)
  {
    v9 = *((_QWORD *)this + 92);
    v10 = v7 - 1;
    v11 = v10 & (v8 ^ (a2 >> 9));
    v12 = (uint64_t *)(v9 + 40 * v11);
    v13 = (const llvm::SCEV *)*v12;
    if ((const llvm::SCEV *)*v12 == a2)
      goto LABEL_16;
    v14 = 0;
    v15 = 1;
    while (v13 != (const llvm::SCEV *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (const llvm::SCEV *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (uint64_t *)(v9 + 40 * v11);
      v13 = (const llvm::SCEV *)*v12;
      if ((const llvm::SCEV *)*v12 == a2)
        goto LABEL_16;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
  }
  else
  {
    v18 = 0;
  }
  v12 = sub_1C4F5F0FC((uint64_t)this + 736, (uint64_t *)&v39, v18);
  *v12 = (uint64_t)a2;
  v12[1] = (uint64_t)(v12 + 3);
  v12[2] = 0x200000000;
LABEL_16:
  v19 = *((unsigned int *)v12 + 4);
  if (!(_DWORD)v19)
  {
LABEL_20:
    if (v19 >= *((_DWORD *)v12 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v12 + 1), (uint64_t)(v12 + 3), v19 + 1, 8);
      *(_QWORD *)(v12[1] + 8 * *((unsigned int *)v12 + 4)) = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF9;
      LODWORD(v19) = *((_DWORD *)v12 + 4);
    }
    else
    {
      *(_QWORD *)(v12[1] + 8 * v19) = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF9;
    }
    *((_DWORD *)v12 + 4) = v19 + 1;
    llvm::ScalarEvolution::computeBlockDisposition((uint64_t)this, (uint64_t)a2);
    v23 = v22;
    v24 = *((_DWORD *)this + 188);
    if (v24)
    {
      v25 = *((_QWORD *)this + 92);
      v26 = v24 - 1;
      v27 = (v8 ^ (a2 >> 9)) & v26;
      v28 = (uint64_t *)(v25 + 40 * v27);
      v29 = (const llvm::SCEV *)*v28;
      if ((const llvm::SCEV *)*v28 == a2)
        goto LABEL_38;
      v30 = 0;
      v31 = 1;
      while (v29 != (const llvm::SCEV *)-4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == (const llvm::SCEV *)-8192;
        if (v32)
          v30 = v28;
        v33 = v27 + v31++;
        v27 = v33 & v26;
        v28 = (uint64_t *)(v25 + 40 * v27);
        v29 = (const llvm::SCEV *)*v28;
        if ((const llvm::SCEV *)*v28 == a2)
          goto LABEL_38;
      }
      if (v30)
        v34 = v30;
      else
        v34 = v28;
    }
    else
    {
      v34 = 0;
    }
    v28 = sub_1C4F5F0FC((uint64_t)v6, (uint64_t *)&v39, v34);
    *v28 = (uint64_t)a2;
    v28[1] = (uint64_t)(v28 + 3);
    v28[2] = 0x200000000;
LABEL_38:
    v35 = v28[1];
    v36 = 8 * *((unsigned int *)v28 + 4);
    while (v36)
    {
      v37 = *(_QWORD *)(v35 + v36 - 8);
      v36 -= 8;
      if ((const llvm::BasicBlock *)(v37 & 0xFFFFFFFFFFFFFFF8) == a3)
      {
        *(_QWORD *)(v35 + v36) = v37 & 0xFFFFFFFFFFFFFFF9 | (2 * v23);
        return v23;
      }
    }
    return v23;
  }
  v20 = 8 * v19;
  v21 = (_QWORD *)v12[1];
  while ((const llvm::BasicBlock *)(*v21 & 0xFFFFFFFFFFFFFFF8) != a3)
  {
    ++v21;
    v20 -= 8;
    if (!v20)
      goto LABEL_20;
  }
  return (*v21 >> 1) & 3;
}

void llvm::ScalarEvolution::computeBlockDisposition(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C4F4BE28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const llvm::BasicBlock *v16;
  llvm::ScalarEvolution *v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::SCEV **v20;
  uint64_t v21;
  char v22;
  int BlockDisposition;
  _BOOL4 v24;
  unsigned int v25;

  v19 = *(_QWORD *)(v18 + 40);
  if (v19)
  {
    v20 = *(const llvm::SCEV ***)(v18 + 32);
    v21 = 8 * v19;
    v22 = 1;
    do
    {
      BlockDisposition = llvm::ScalarEvolution::getBlockDisposition(v17, *v20, v16);
      v24 = BlockDisposition != 0;
      if (!BlockDisposition)
        break;
      v22 &= BlockDisposition != 1;
      ++v20;
      v21 -= 8;
    }
    while (v21);
    if ((v22 & 1) == 0)
    {
      v25 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    v24 = 1;
  }
  v25 = 2;
LABEL_9:
  if (v24)
    return v25;
  else
    return 0;
}

void sub_1C4F4BEC0()
{
  const llvm::BasicBlock *v0;
  llvm::ScalarEvolution *v1;
  uint64_t v2;
  const llvm::SCEV *v3;
  const llvm::SCEV *v4;

  v3 = *(const llvm::SCEV **)(v2 + 32);
  v4 = *(const llvm::SCEV **)(v2 + 40);
  if (llvm::ScalarEvolution::getBlockDisposition(v1, v3, v0))
    llvm::ScalarEvolution::getBlockDisposition(v1, v4, v0);
  JUMPOUT(0x1C4F4BEACLL);
}

uint64_t sub_1C4F4BF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v19 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(v17 + 32), **(_QWORD **)(*(_QWORD *)(v18 + 48) + 32), v16);
  if (!v19)
    JUMPOUT(0x1C4F4BEACLL);
  return sub_1C4F4BE28(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14, a15, a16);
}

void sub_1C4F4BF24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 8);
  if (v3)
    v4 = *(unsigned __int8 *)(v3 + 16) >= 0x1Cu;
  else
    v4 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 40);
    if (v5 != v0)
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(v1 + 32), v5, v0);
  }
  JUMPOUT(0x1C4F4BEACLL);
}

uint64_t llvm::ScalarEvolution::hasOperand(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  uint64_t v3;
  const llvm::SCEV *v5;
  unsigned __int8 v6;
  const llvm::SCEV **v7;
  unsigned __int8 *v8;
  void *v9;
  uint64_t v10;
  _BYTE v11[64];
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = 0;
  v7 = &v5;
  v8 = &v6;
  v9 = v11;
  v10 = 0x800000000;
  v12 = v16;
  v13 = v16;
  v14 = 8;
  v15 = 0;
  sub_1C4F5F234((uint64_t)&v8, (uint64_t)a2);
  if ((_DWORD)v10 && !*v8)
  {
    v3 = *((_QWORD *)v9 + v10 - 1);
    LODWORD(v10) = v10 - 1;
    __asm { BR              X10 }
  }
  if (v13 != v12)
    free(v13);
  if (v9 != v11)
    free(v9);
  return v6;
}

uint64_t *sub_1C4F4C0E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return (uint64_t *)(a1 + 72 * a2);
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = (uint64_t *)(a1 + 72 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = (uint64_t *)(a1 + 72 * (v8 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (uint64_t *)(a1 + 72 * a2);
  }
  return v5;
}

void llvm::ScalarEvolution::forgetMemoizedResultsImpl(int32x2_t *this, const llvm::SCEV *a2)
{
  __int32 v4;
  unsigned int v5;
  int32x2_t v6;
  __int32 v7;
  unsigned int v8;
  const llvm::SCEV **v9;
  const llvm::SCEV *v10;
  int v11;
  unsigned int v12;
  const llvm::SCEV **v13;
  __int32 v14;
  int32x2_t v15;
  __int32 v16;
  unsigned int v17;
  const llvm::SCEV **v18;
  const llvm::SCEV *v19;
  int v20;
  unsigned int v21;
  const llvm::SCEV **v22;
  __int32 v23;
  int32x2_t v24;
  __int32 v25;
  unsigned int v26;
  uint64_t v27;
  const llvm::SCEV *v28;
  int v29;
  unsigned int v30;
  __int32 v31;
  int32x2_t v32;
  __int32 v33;
  unsigned int v34;
  uint64_t v35;
  const llvm::SCEV *v36;
  int v37;
  unsigned int v38;
  __int32 v39;
  __int32 v40;
  int32x2_t v41;
  __int32 v42;
  uint64_t v43;
  const llvm::SCEV **v44;
  const llvm::SCEV *v45;
  int v46;
  int v47;
  _QWORD *v48;
  int32x2_t v49;
  uint64_t v50;
  _QWORD *v51;
  int32x2_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  int32x2_t v61;
  unsigned __int32 v62;
  unsigned __int32 v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  int32x2_t *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  int v82;
  int32x2_t v83;
  __int32 v84;
  uint64_t v85;
  const llvm::SCEV **v86;
  const llvm::SCEV *v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  __int32 v98;
  int32x2_t v99;
  __int32 v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  int v105;
  BOOL v106;
  unsigned int v107;
  _QWORD *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  __int32 v117;
  int32x2_t v118;
  __int32 v119;
  unsigned int v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t *v132;
  _BYTE *v133;
  const void *v134;
  const void *v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  unsigned int v152;
  _BYTE v153[32];

  v4 = this[88].i32[0];
  v5 = a2 >> 4;
  if (v4)
  {
    v6 = this[86];
    v7 = v4 - 1;
    v8 = v7 & (v5 ^ (a2 >> 9));
    v9 = (const llvm::SCEV **)(*(_QWORD *)&v6 + 40 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_6:
      v13 = (const llvm::SCEV **)v9[1];
      if (v13 != v9 + 3)
        free(v13);
      *v9 = (const llvm::SCEV *)-8192;
      this[87] = vadd_s32(this[87], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v11 = 1;
      while (v10 != (const llvm::SCEV *)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & v7;
        v9 = (const llvm::SCEV **)(*(_QWORD *)&v6 + 40 * v8);
        v10 = *v9;
        if (*v9 == a2)
          goto LABEL_6;
      }
    }
  }
  v14 = this[94].i32[0];
  if (v14)
  {
    v15 = this[92];
    v16 = v14 - 1;
    v17 = v16 & (v5 ^ (a2 >> 9));
    v18 = (const llvm::SCEV **)(*(_QWORD *)&v15 + 40 * v17);
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_14:
      v22 = (const llvm::SCEV **)v18[1];
      if (v22 != v18 + 3)
        free(v22);
      *v18 = (const llvm::SCEV *)-8192;
      this[93] = vadd_s32(this[93], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v20 = 1;
      while (v19 != (const llvm::SCEV *)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & v16;
        v18 = (const llvm::SCEV **)(*(_QWORD *)&v15 + 40 * v17);
        v19 = *v18;
        if (*v18 == a2)
          goto LABEL_14;
      }
    }
  }
  v23 = this[100].i32[0];
  if (v23)
  {
    v24 = this[98];
    v25 = v23 - 1;
    v26 = v25 & (v5 ^ (a2 >> 9));
    v27 = *(_QWORD *)&v24 + 40 * v26;
    v28 = *(const llvm::SCEV **)v27;
    if (*(const llvm::SCEV **)v27 == a2)
    {
LABEL_22:
      if (*(_DWORD *)(v27 + 32) >= 0x41u)
      {
        v147 = *(_QWORD *)(v27 + 24);
        if (v147)
          MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(v27 + 16) >= 0x41u)
      {
        v148 = *(_QWORD *)(v27 + 8);
        if (v148)
          MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
      }
      *(_QWORD *)v27 = -8192;
      this[99] = vadd_s32(this[99], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v29 = 1;
      while (v28 != (const llvm::SCEV *)-4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & v25;
        v27 = *(_QWORD *)&v24 + 40 * v26;
        v28 = *(const llvm::SCEV **)v27;
        if (*(const llvm::SCEV **)v27 == a2)
          goto LABEL_22;
      }
    }
  }
  v31 = this[103].i32[0];
  if (v31)
  {
    v32 = this[101];
    v33 = v31 - 1;
    v34 = v33 & (v5 ^ (a2 >> 9));
    v35 = *(_QWORD *)&v32 + 40 * v34;
    v36 = *(const llvm::SCEV **)v35;
    if (*(const llvm::SCEV **)v35 == a2)
    {
LABEL_30:
      if (*(_DWORD *)(v35 + 32) >= 0x41u)
      {
        v149 = *(_QWORD *)(v35 + 24);
        if (v149)
          MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(v35 + 16) >= 0x41u)
      {
        v150 = *(_QWORD *)(v35 + 8);
        if (v150)
          MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
      }
      *(_QWORD *)v35 = -8192;
      this[102] = vadd_s32(this[102], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v37 = 1;
      while (v36 != (const llvm::SCEV *)-4096)
      {
        v38 = v34 + v37++;
        v34 = v38 & v33;
        v35 = *(_QWORD *)&v32 + 40 * v34;
        v36 = *(const llvm::SCEV **)v35;
        if (*(const llvm::SCEV **)v35 == a2)
          goto LABEL_30;
      }
    }
  }
  v39 = this[9].i32[0];
  if (v39)
  {
    v83 = this[7];
    v84 = v39 - 1;
    LODWORD(v85) = (v39 - 1) & (v5 ^ (a2 >> 9));
    v86 = (const llvm::SCEV **)(*(_QWORD *)&v83 + 16 * v85);
    v87 = *v86;
    if (*v86 == a2)
    {
LABEL_88:
      *v86 = (const llvm::SCEV *)-8192;
      this[8] = vadd_s32(this[8], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v88 = 1;
      while (v87 != (const llvm::SCEV *)-4096)
      {
        v89 = v85 + v88++;
        v85 = v89 & v84;
        v87 = *(const llvm::SCEV **)(*(_QWORD *)&v83 + 16 * v85);
        if (v87 == a2)
        {
          v86 = (const llvm::SCEV **)(*(_QWORD *)&v83 + 16 * v85);
          goto LABEL_88;
        }
      }
    }
  }
  v40 = this[67].i32[0];
  if (v40)
  {
    v41 = this[65];
    v42 = v40 - 1;
    LODWORD(v43) = (v40 - 1) & (v5 ^ (a2 >> 9));
    v44 = (const llvm::SCEV **)(*(_QWORD *)&v41 + 16 * v43);
    v45 = *v44;
    if (*v44 == a2)
    {
LABEL_40:
      *v44 = (const llvm::SCEV *)-8192;
      this[66] = vadd_s32(this[66], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v46 = 1;
      while (v45 != (const llvm::SCEV *)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & v42;
        v45 = *(const llvm::SCEV **)(*(_QWORD *)&v41 + 16 * v43);
        if (v45 == a2)
        {
          v44 = (const llvm::SCEV **)(*(_QWORD *)&v41 + 16 * v43);
          goto LABEL_40;
        }
      }
    }
  }
  if (a2 && *((_WORD *)a2 + 12) == 7)
  {
    v48 = sub_1C477672C((uint64_t)&this[126], (uint64_t)a2);
    v49 = this[127];
    v50 = 256;
    if (*(_QWORD *)&v49 == *(_QWORD *)&this[126])
      v50 = 257;
    if (v48 != (_QWORD *)(*(_QWORD *)&v49 + 8 * this->u32[v50]))
    {
      *v48 = -2;
      ++this[129].i32[0];
    }
    v51 = sub_1C477672C((uint64_t)&this[146], (uint64_t)a2);
    v52 = this[147];
    v53 = 296;
    if (*(_QWORD *)&v52 == *(_QWORD *)&this[146])
      v53 = 297;
    if (v51 != (_QWORD *)(*(_QWORD *)&v52 + 8 * this->u32[v53]))
    {
      *v51 = -2;
      ++this[149].i32[0];
    }
  }
  v54 = (uint64_t)this[10];
  v55 = this[12].u32[0];
  v56 = sub_1C4F1B848(v54, v55, (uint64_t)a2);
  if ((uint64_t *)(v54 + 96 * v55) == v56)
    goto LABEL_94;
  v57 = v56;
  v58 = (uint64_t *)v56[6];
  v59 = *((unsigned int *)v57 + 14);
  if (!(_DWORD)v59)
    goto LABEL_89;
  v60 = &v58[v59];
  do
  {
    v61 = this[13];
    v62 = this[15].u32[0];
    if (v62)
    {
      v63 = v62 - 1;
      v64 = ((*v58 >> 4) ^ (*v58 >> 9)) & (v62 - 1);
      v65 = (_QWORD *)(*(_QWORD *)&v61 + 48 * v64);
      v66 = v65[3];
      if (*v58 == v66)
        goto LABEL_61;
      v67 = 1;
      while (v66 != -4096)
      {
        v68 = v64 + v67++;
        v64 = v68 & v63;
        v65 = (_QWORD *)(*(_QWORD *)&v61 + 48 * (v68 & v63));
        v66 = v65[3];
        if (*v58 == v66)
          goto LABEL_61;
      }
    }
    v65 = (_QWORD *)(*(_QWORD *)&v61 + 48 * v62);
LABEL_61:
    if ((_QWORD *)(*(_QWORD *)&v61 + 48 * v62) != v65)
    {
      v69 = v65[3];
      if (v69 != -8192)
      {
        if (v69 != -4096 && v69 != 0)
        {
          v71 = v65[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v71 = v65[2];
          v72 = (unint64_t *)v65[2];
          if (v72)
          {
            *v72 = *v72 & 7 | v71;
          }
          else
          {
            v73 = v65[3];
            v74 = ***(int32x2_t ****)v73;
            v75 = (unint64_t)v74[303];
            if (v75 <= v71)
            {
              v76 = v74[305].u32[0];
              if (v75 + 16 * v76 > v71)
              {
                v77 = v76 - 1;
                LODWORD(v78) = v77 & ((v73 >> 4) ^ (v73 >> 9));
                v79 = (uint64_t *)(v75 + 16 * v78);
                v80 = *v79;
                if (v73 == *v79)
                {
LABEL_80:
                  *v79 = -8192;
                  v74[304] = vadd_s32(v74[304], (int32x2_t)0x1FFFFFFFFLL);
                  v73 = v65[3];
                }
                else
                {
                  v81 = 1;
                  while (v80 != -4096)
                  {
                    v82 = v78 + v81++;
                    v78 = v82 & v77;
                    v80 = *(_QWORD *)(v75 + 16 * v78);
                    if (v73 == v80)
                    {
                      v79 = (uint64_t *)(v75 + 16 * v78);
                      goto LABEL_80;
                    }
                  }
                }
                *(_BYTE *)(v73 + 17) &= ~1u;
              }
            }
          }
        }
        v65[3] = -8192;
      }
      v65[4] = 0;
      this[14] = vadd_s32(this[14], (int32x2_t)0x1FFFFFFFFLL);
    }
    ++v58;
  }
  while (v58 != v60);
  v58 = (uint64_t *)v57[6];
LABEL_89:
  if (v58 != v57 + 8)
    free(v58);
  if ((v57[1] & 1) == 0)
    MEMORY[0x1CAA32FB4](v57[2], 8);
  *v57 = -8192;
  this[11] = vadd_s32(this[11], (int32x2_t)0x1FFFFFFFFLL);
LABEL_94:
  v90 = (uint64_t)this[80];
  v91 = this[82].u32[0];
  v92 = sub_1C4F4CB9C(v90, v91, (uint64_t)a2);
  if ((uint64_t *)(v90 + 56 * v91) == v92)
    goto LABEL_121;
  v93 = v92;
  v94 = (uint64_t *)v92[1];
  v95 = *((unsigned int *)v92 + 4);
  if (!(_DWORD)v95)
    goto LABEL_118;
  v96 = &v94[2 * v95];
  while (2)
  {
    v97 = v94[1];
    if (!v97 || *(_WORD *)(v97 + 24))
    {
      v98 = this[85].i32[0];
      if (!v98)
      {
        v108 = 0;
        goto LABEL_113;
      }
      v99 = this[83];
      v100 = v98 - 1;
      v101 = v100 & ((v97 >> 4) ^ (v97 >> 9));
      v102 = (_QWORD *)(*(_QWORD *)&v99 + 56 * v101);
      v103 = *v102;
      if (v97 != *v102)
      {
        v104 = 0;
        v105 = 1;
        while (v103 != -4096)
        {
          if (v104)
            v106 = 0;
          else
            v106 = v103 == -8192;
          if (v106)
            v104 = v102;
          v107 = v101 + v105++;
          v101 = v107 & v100;
          v102 = (_QWORD *)(*(_QWORD *)&v99 + 56 * v101);
          v103 = *v102;
          if (v97 == *v102)
            goto LABEL_114;
        }
        if (v104)
          v108 = v104;
        else
          v108 = v102;
LABEL_113:
        v102 = sub_1C4F5E400((uint64_t)&this[83], v94 + 1, v108);
        *v102 = v94[1];
        v102[1] = v102 + 3;
        v102[2] = 0x200000000;
      }
LABEL_114:
      sub_1C4F4CC00((uint64_t)(v102 + 1), *v94, (uint64_t)a2);
    }
    v94 += 2;
    if (v94 != v96)
      continue;
    break;
  }
  v94 = (uint64_t *)v93[1];
LABEL_118:
  if (v94 != v93 + 3)
    free(v94);
  *v93 = -8192;
  this[81] = vadd_s32(this[81], (int32x2_t)0x1FFFFFFFFLL);
LABEL_121:
  v109 = (uint64_t)this[83];
  v110 = this[85].u32[0];
  v111 = sub_1C4F4CB9C(v109, v110, (uint64_t)a2);
  if ((uint64_t *)(v109 + 56 * v110) == v111)
    goto LABEL_145;
  v112 = v111;
  v113 = (uint64_t *)v111[1];
  v114 = *((unsigned int *)v111 + 4);
  if (!(_DWORD)v114)
    goto LABEL_142;
  v115 = &v113[2 * v114];
  while (2)
  {
    v116 = v113 + 1;
    v117 = this[82].i32[0];
    if (!v117)
    {
      v127 = 0;
      goto LABEL_138;
    }
    v118 = this[80];
    v119 = v117 - 1;
    v120 = ((*v116 >> 4) ^ (*v116 >> 9)) & v119;
    v121 = (_QWORD *)(*(_QWORD *)&v118 + 56 * v120);
    v122 = *v121;
    if (*v116 != *v121)
    {
      v123 = 0;
      v124 = 1;
      while (v122 != -4096)
      {
        if (v123)
          v125 = 0;
        else
          v125 = v122 == -8192;
        if (v125)
          v123 = v121;
        v126 = v120 + v124++;
        v120 = v126 & v119;
        v121 = (_QWORD *)(*(_QWORD *)&v118 + 56 * v120);
        v122 = *v121;
        if (*v116 == *v121)
          goto LABEL_139;
      }
      if (v123)
        v127 = v123;
      else
        v127 = v121;
LABEL_138:
      v121 = sub_1C4F5E400((uint64_t)&this[80], v113 + 1, v127);
      *v121 = *v116;
      v121[1] = v121 + 3;
      v121[2] = 0x200000000;
    }
LABEL_139:
    v128 = *v113;
    v113 += 2;
    sub_1C4F4CC00((uint64_t)(v121 + 1), v128, (uint64_t)a2);
    if (v113 != v115)
      continue;
    break;
  }
  v113 = (uint64_t *)v112[1];
LABEL_142:
  if (v113 != v112 + 3)
    free(v113);
  *v112 = -8192;
  this[84] = vadd_s32(this[84], (int32x2_t)0x1FFFFFFFFLL);
LABEL_145:
  v129 = (uint64_t)this[74];
  v130 = this[76].u32[0];
  v131 = sub_1C4F4C0E0(v129, v130, (uint64_t)a2);
  if ((uint64_t *)(v129 + 72 * v130) != v131)
  {
    v132 = v131;
    v133 = v153;
    v134 = (const void *)v132[2];
    if (v134 == (const void *)v132[1])
    {
      v151 = v153;
      v135 = (const void *)v132[2];
    }
    else
    {
      v146 = *((unsigned int *)v132 + 6);
      v133 = malloc_type_malloc(8 * v146, 0x4065EBACuLL);
      if (!v133 && ((_DWORD)v146 || (v133 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v151 = v133;
      v135 = (const void *)v132[1];
      v134 = (const void *)v132[2];
    }
    v137 = *((_DWORD *)v132 + 6);
    LODWORD(v136) = *((_DWORD *)v132 + 7);
    v152 = v137;
    if (v134 == v135)
      v138 = *((_DWORD *)v132 + 7);
    else
      v138 = *((_DWORD *)v132 + 6);
    if (v138)
    {
      memmove(v133, v134, 8 * v138);
      LODWORD(v136) = *((_DWORD *)v132 + 7);
      v133 = v151;
      v137 = v152;
    }
    if (v133 == v153)
      v136 = v136;
    else
      v136 = v137;
    v139 = (unint64_t *)v133;
    if ((_DWORD)v136)
    {
      v140 = 8 * v136;
      v139 = (unint64_t *)v133;
      while (*v139 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v139;
        v140 -= 8;
        if (!v140)
          goto LABEL_167;
      }
    }
    v141 = (unint64_t *)&v133[8 * v136];
    if (v139 != v141)
    {
      v142 = *v139;
LABEL_163:
      llvm::ScalarEvolution::forgetBackedgeTakenCounts((llvm::ScalarEvolution *)this, v142 & 0xFFFFFFFFFFFFFFF8, (v142 >> 2) & 1);
      v143 = v139 + 1;
      while (v143 != v141)
      {
        v144 = *v143++;
        v142 = v144;
        if (v144 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v139 = v143 - 1;
          goto LABEL_163;
        }
      }
    }
LABEL_167:
    v145 = (void *)v132[2];
    if (v145 != (void *)v132[1])
      free(v145);
    *v132 = -8192;
    this[75] = vadd_s32(this[75], (int32x2_t)0x1FFFFFFFFLL);
    if (v151 != v153)
      free(v151);
  }
}

uint64_t *sub_1C4F4CB9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return (uint64_t *)(a1 + 56 * a2);
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = (uint64_t *)(a1 + 56 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = (uint64_t *)(a1 + 56 * (v8 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (uint64_t *)(a1 + 56 * a2);
  }
  return v5;
}

uint64_t sub_1C4F4CC00(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = *(char **)result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(char **)result;
    while (*(_QWORD *)v6 != a2 || *((_QWORD *)v6 + 1) != a3)
    {
      v6 += 16;
      v5 -= 16;
      if (!v5)
      {
        v6 = (char *)(*(_QWORD *)result + 16 * v4);
        break;
      }
    }
  }
  else
  {
    v6 = *(char **)result;
  }
  v8 = (v6 - v3) >> 4;
  if (v8 != v4 && v6 + 16 != (char *)(*(_QWORD *)result + 16 * v4))
  {
    v10 = 16 * v4 - 16 * v8 - 16;
    v11 = &v3[16 * v8 + 24];
    do
    {
      v12 = *((_QWORD *)v11 - 1);
      if (v12 != a2 || *(_QWORD *)v11 != a3)
      {
        *(_QWORD *)v6 = v12;
        *((_QWORD *)v6 + 1) = *(_QWORD *)v11;
        v6 += 16;
      }
      v11 += 16;
      v10 -= 16;
    }
    while (v10);
  }
  *(_DWORD *)(result + 8) = (unint64_t)(v6 - v3) >> 4;
  return result;
}

void llvm::ScalarEvolution::getReachableBlocks(uint64_t a1, llvm::SmallPtrSetImplBase *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  llvm::APInt *v20;
  unsigned int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t SCEVIter;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Instruction *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD v56[7];

  v56[6] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 80);
  v53 = v56;
  v55 = 6;
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  v56[0] = v6;
  v7 = 1;
  while (1)
  {
    while (1)
    {
      v8 = *((_QWORD *)v53 + v7 - 1);
      v54 = v7 - 1;
      sub_1C4774094(this, v8);
      if (v9)
        break;
LABEL_77:
      v7 = v54;
      if (!v54)
      {
LABEL_86:
        if (v53 != v56)
          free(v53);
        return;
      }
    }
    v12 = *(_QWORD **)(v8 + 40);
    v11 = (_QWORD *)(v8 + 40);
    v10 = v12;
    if (v12 == v11)
      goto LABEL_75;
    v13 = v10 - 3;
    if (!v10)
      v13 = 0;
    v14 = *((unsigned __int8 *)v13 + 16) - 40;
    if (v14 < 0xFFFFFFF5)
      v13 = 0;
    if (!v10)
      goto LABEL_66;
    if (*((_BYTE *)v13 + 16) != 30 || v14 < 0xFFFFFFF5)
      goto LABEL_66;
    if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) != 3)
      goto LABEL_66;
    v16 = *(v13 - 12);
    if (!v16)
      goto LABEL_66;
    v17 = *(v13 - 4);
    if (!v17)
      goto LABEL_66;
    v18 = *(v13 - 8);
    if (!v18)
      goto LABEL_66;
    v19 = *(unsigned __int8 *)(v16 + 16);
    if (v19 == 81)
      break;
    if (v19 != 16)
      goto LABEL_66;
    v20 = (llvm::APInt *)(v16 + 24);
    v21 = *(_DWORD *)(v16 + 32);
    if (v21 > 0x40)
      v22 = llvm::APInt::countLeadingZerosSlowCase(v20) == v21 - 1;
    else
      v22 = *(_QWORD *)v20 == 1;
    if (v22)
      v44 = v17;
    else
      v44 = v18;
    v45 = v54;
    if (v54 >= (unint64_t)v55)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v56, v54 + 1, 8);
      v45 = v54;
    }
    *((_QWORD *)v53 + v45) = v44;
LABEL_59:
    v7 = v54 + 1;
    v54 = v7;
    if (!v7)
      goto LABEL_86;
  }
  v23 = *(_QWORD *)(v16 - 64);
  v24 = *(_QWORD *)(a1 + 104);
  v25 = *(_DWORD *)(a1 + 120);
  if (!v25)
    goto LABEL_31;
  v26 = v25 - 1;
  v27 = ((v23 >> 4) ^ (v23 >> 9)) & (v25 - 1);
  v28 = v24 + 48 * v27;
  v29 = *(_QWORD *)(v28 + 24);
  if (v29 != v23)
  {
    v30 = 1;
    while (v29 != -4096)
    {
      v31 = v27 + v30++;
      v27 = v31 & v26;
      v28 = v24 + 48 * (v31 & v26);
      v29 = *(_QWORD *)(v28 + 24);
      if (v29 == v23)
        goto LABEL_32;
    }
LABEL_31:
    v28 = v24 + 48 * v25;
  }
LABEL_32:
  if (v28 == v24 + 48 * v25 || (SCEVIter = *(_QWORD *)(v28 + 40)) == 0)
  {
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v23);
    v24 = *(_QWORD *)(a1 + 104);
    v25 = *(_DWORD *)(a1 + 120);
  }
  v33 = *(_QWORD *)(v16 - 32);
  v34 = v24 + 48 * v25;
  if (v25)
  {
    v35 = v25 - 1;
    v36 = ((v33 >> 4) ^ (v33 >> 9)) & v35;
    v37 = v24 + 48 * v36;
    v38 = *(_QWORD *)(v37 + 24);
    if (v38 == v33)
      goto LABEL_42;
    v39 = 1;
    while (v38 != -4096)
    {
      v40 = v36 + v39++;
      v36 = v40 & v35;
      v37 = v24 + 48 * v36;
      v38 = *(_QWORD *)(v37 + 24);
      if (v38 == v33)
        goto LABEL_42;
    }
  }
  v37 = v34;
LABEL_42:
  if (v37 == v34 || (v41 = *(_QWORD *)(v37 + 40)) == 0)
    v41 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v33);
  if (llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(a1, *(_WORD *)(v16 + 18) & 0x3F, SCEVIter, v41))
  {
    v42 = v54;
    if (v54 >= (unint64_t)v55)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v56, v54 + 1, 8);
      v42 = v54;
    }
    *((_QWORD *)v53 + v42) = v17;
    goto LABEL_59;
  }
  if ((llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(a1, dword_1C85F60D0[*(_WORD *)(v16 + 18) & 0x3F], SCEVIter, v41) & 1) != 0)
  {
    v46 = v54;
    if (v54 >= (unint64_t)v55)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v56, v54 + 1, 8);
      v46 = v54;
    }
    *((_QWORD *)v53 + v46) = v18;
    goto LABEL_59;
  }
  v10 = (_QWORD *)*v11;
LABEL_66:
  if (v10 == v11)
  {
LABEL_75:
    v47 = 0;
    v48 = 0;
    v52 = 0;
LABEL_76:
    sub_1C4DFBE40((unsigned int *)&v53, (uint64_t)v53 + 8 * v54, v48, 0, v47, v52);
    goto LABEL_77;
  }
  v47 = (uint64_t)(v10 - 3);
  if (v10)
    v48 = (llvm::Instruction *)(v10 - 3);
  else
    v48 = 0;
  v49 = *((unsigned __int8 *)v48 + 16);
  v50 = v49 - 29;
  if (v49 == 30)
  {
    if ((*((_DWORD *)v48 + 5) & 0x7FFFFFF) == 3)
      v51 = 2;
    else
      v51 = 1;
LABEL_74:
    v52 = v51;
    goto LABEL_76;
  }
  v51 = 0;
  switch(v50)
  {
    case 0:
    case 5:
    case 6:
      goto LABEL_74;
    case 1:
      __break(1u);
      break;
    case 2:
      v51 = (*((_DWORD *)v48 + 5) >> 1) & 0x3FFFFFF;
      goto LABEL_74;
    case 3:
    case 9:
      v51 = (*((_DWORD *)v48 + 5) & 0x7FFFFFF) - 1;
      goto LABEL_74;
    case 4:
      v51 = 2;
      goto LABEL_74;
    case 7:
      v51 = *((_WORD *)v48 + 9) & 1;
      goto LABEL_74;
    case 8:
      v51 = 1;
      goto LABEL_74;
    case 10:
      v51 = *((_DWORD *)v48 + 20) + 1;
      goto LABEL_74;
    default:
      goto LABEL_75;
  }
}

void llvm::ScalarEvolution::verify(llvm::ScalarEvolution *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  llvm::ScalarEvolution *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  const llvm::SCEV *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  llvm::ScalarEvolution *SCEVIter;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  llvm *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  llvm::raw_ostream *v47;
  llvm::raw_ostream *v48;
  llvm::raw_ostream *v49;
  llvm::raw_ostream *v50;
  llvm::raw_ostream *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t Exact;
  uint64_t v68;
  const llvm::Loop **BackedgeTakenInfo;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  llvm::Value **v74;
  llvm::Value **v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  llvm::Value *v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t **v85;
  unint64_t **i;
  unint64_t *v87;
  llvm *v89;
  llvm::raw_ostream *v90;
  unint64_t **j;
  unint64_t *v92;
  llvm *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  llvm::ScalarEvolution *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  llvm::Loop *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  llvm::Loop **v127;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  llvm::Loop *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  llvm::Loop **v146;
  uint64_t v148;
  llvm *v149;
  llvm::raw_ostream *v150;
  llvm::raw_ostream *v151;
  llvm::raw_ostream *v152;
  llvm::raw_ostream *v153;
  llvm::raw_ostream *v154;
  llvm *v155;
  llvm::raw_ostream *v156;
  llvm::raw_ostream *v157;
  llvm::raw_ostream *v158;
  llvm *v159;
  llvm::raw_ostream *v160;
  llvm::raw_ostream *v161;
  llvm::raw_ostream *v162;
  llvm::raw_ostream *v163;
  llvm::raw_ostream *v164;
  llvm *v165;
  llvm::raw_ostream *v166;
  llvm *v167;
  llvm::raw_ostream *v168;
  llvm::raw_ostream *v169;
  llvm::raw_ostream *v170;
  llvm::raw_ostream *v171;
  llvm::raw_ostream *v172;
  llvm::raw_ostream *v173;
  llvm::raw_ostream *v174;
  char *v175;
  const llvm::SCEV *v176;
  uint64_t v177;
  llvm::SCEV *v178;
  unsigned int v179;
  llvm::ScalarEvolution *v180;
  unint64_t *v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t v184;
  int v185;
  _BYTE v186[256];
  char *v187;
  char *v188;
  uint64_t v189;
  int v190;
  _BYTE v191[128];
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  void *v196;
  uint64_t v197;
  _BYTE v198[32];
  void *v199;
  uint64_t v200;
  _BYTE v201[256];
  void *v202;
  uint64_t v203;
  _BYTE v204[64];
  _BYTE v205[48];
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  llvm::ScalarEvolution::ScalarEvolution((uint64_t)v205, *(_QWORD *)this, *((_QWORD *)this + 2), *((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 5));
  v2 = *((_QWORD *)this + 5);
  v3 = *(char **)(v2 + 24);
  v4 = *(char **)(v2 + 32);
  v202 = v204;
  v203 = 0x800000000;
  sub_1C499C3FC((unsigned int *)&v202, v3, v4);
  v194 = 0;
  v192 = v205;
  v193 = 0;
  v5 = this;
  v195 = 0;
  v187 = v191;
  v188 = v191;
  v189 = 16;
  v190 = 0;
  llvm::ScalarEvolution::getReachableBlocks((uint64_t)v205, (llvm::SmallPtrSetImplBase *)&v187, *(_QWORD *)this);
  v6 = v203;
  v180 = this;
  if ((_DWORD)v203)
  {
    while (1)
    {
      v57 = *((_QWORD *)v202 + v6 - 1);
      LODWORD(v203) = v6 - 1;
      sub_1C4F5F34C((unsigned int *)&v202, (uint64_t)v202 + 8 * v6 - 8, *(char **)(v57 + 8), *(char **)(v57 + 16));
      v58 = (char *)sub_1C477672C((uint64_t)&v187, **(_QWORD **)(v57 + 32));
      v59 = v188 == v187 ? (uint64_t *)((char *)&v189 + 4) : &v189;
      if (v58 != &v188[8 * *(unsigned int *)v59])
        break;
LABEL_78:
      v6 = v203;
      if (!(_DWORD)v203)
        goto LABEL_2;
    }
    v60 = *((_QWORD *)v5 + 68);
    v61 = *((_DWORD *)v5 + 140);
    if (v61)
    {
      v62 = (v61 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      v63 = (uint64_t *)(v60 + 144 * v62);
      v64 = *v63;
      if (*v63 == v57)
      {
LABEL_72:
        if ((uint64_t *)(v60 + 144 * v61) != v63)
        {
          Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)(v63 + 1), v57, (uint64_t)v5, 0);
          v68 = sub_1C4F4E220((uint64_t)&v192, Exact);
          BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)v205, (const llvm::Loop *)v57);
          v70 = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, v57, (uint64_t)v205, 0);
          v71 = v68 == v206 || v70 == v206;
          if (!v71)
            __asm { BR              X10 }
        }
        goto LABEL_78;
      }
      v65 = 1;
      while (v64 != -4096)
      {
        v66 = v62 + v65++;
        v62 = v66 & (v61 - 1);
        v63 = (uint64_t *)(v60 + 144 * v62);
        v64 = *v63;
        if (*v63 == v57)
          goto LABEL_72;
      }
    }
    v63 = (uint64_t *)(v60 + 144 * v61);
    goto LABEL_72;
  }
LABEL_2:
  v182 = v186;
  v183 = v186;
  v184 = 32;
  v185 = 0;
  v7 = *((_QWORD *)v5 + 5);
  v8 = *(char **)(v7 + 24);
  v9 = *(char **)(v7 + 32);
  v199 = v201;
  v200 = 0x2000000000;
LABEL_3:
  sub_1C499C3FC((unsigned int *)&v199, v8, v9);
  while ((_DWORD)v200)
  {
    v10 = *((_QWORD *)v199 + v200 - 1);
    LODWORD(v200) = v200 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v182, v10);
    if (v11)
    {
      v8 = *(char **)(v10 + 8);
      v9 = *(char **)(v10 + 16);
      goto LABEL_3;
    }
  }
  v12 = sub_1C617A604((uint64_t *)v5 + 13);
  v14 = *((_QWORD *)v5 + 13) + 48 * *((unsigned int *)v5 + 30);
  if (v14 != v12)
  {
    v15 = v12;
    v16 = v13;
    while (1)
    {
      v17 = *((_QWORD *)v5 + 10);
      v18 = *((_DWORD *)v5 + 24);
      if (!v18)
        goto LABEL_15;
      v19 = *(_QWORD *)(v15 + 40);
      v20 = ((v19 >> 4) ^ (v19 >> 9)) & (v18 - 1);
      v21 = (uint64_t *)(v17 + 96 * v20);
      v22 = *v21;
      if (*v21 != v19)
        break;
LABEL_16:
      if ((uint64_t *)(v17 + 96 * v18) == v21
        || ((v12 = sub_1C61B3628((uint64_t)(v21 + 1), *(_QWORD *)(v15 + 24)), (v21[1] & 1) != 0)
          ? (v25 = v21 + 2, v26 = 4)
          : (v25 = (uint64_t *)v21[2], v26 = *((unsigned int *)v21 + 6)),
            &v25[v26] == (uint64_t *)v12))
      {
        v165 = llvm::dbgs((llvm *)v12);
        v166 = sub_1C4816AD8(v165, "Value ");
        v174 = sub_1C61ABD88(v166, *(llvm::Value **)(v15 + 24));
        v175 = " is in ValueExprMap but not in ExprValueMap\n";
        goto LABEL_107;
      }
      v27 = *(_QWORD *)(v15 + 24);
      v5 = v180;
      if (v27 && *(unsigned __int8 *)(v27 + 16) >= 0x1Cu)
      {
        v12 = (uint64_t)sub_1C477672C((uint64_t)&v187, *(_QWORD *)(v27 + 40));
        v28 = v188 == v187 ? (uint64_t *)((char *)&v189 + 4) : &v189;
        if ((char *)v12 != &v188[8 * *(unsigned int *)v28])
        {
          v29 = (const llvm::SCEV *)sub_1C4F4E220((uint64_t)&v192, *(_QWORD *)(v15 + 40));
          if (!v208)
            goto LABEL_39;
          v30 = v208 - 1;
          v31 = (v208 - 1) & ((v27 >> 4) ^ (v27 >> 9));
          v32 = v207 + 48 * v31;
          v33 = *(_QWORD *)(v32 + 24);
          if (v33 != v27)
          {
            v34 = 1;
            while (v33 != -4096)
            {
              v35 = v31 + v34++;
              v31 = v35 & v30;
              v32 = v207 + 48 * (v35 & v30);
              v33 = *(_QWORD *)(v32 + 24);
              if (v33 == v27)
                goto LABEL_40;
            }
LABEL_39:
            v32 = v207 + 48 * v208;
          }
LABEL_40:
          if (v32 == v207 + 48 * v208 || (SCEVIter = *(llvm::ScalarEvolution **)(v32 + 40)) == 0)
            SCEVIter = (llvm::ScalarEvolution *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v205, v27);
          v178 = SCEVIter;
          v12 = llvm::ScalarEvolution::containsUndefs(SCEVIter, v29);
          if ((v12 & 1) != 0)
            goto LABEL_27;
          v12 = llvm::ScalarEvolution::containsUndefs((llvm::ScalarEvolution *)v12, v178);
          if ((v12 & 1) != 0)
            goto LABEL_27;
          v176 = v29;
          llvm::ScalarEvolution::getMinusSCEV((uint64_t)v205, (uint64_t)v29, (uint64_t)v178);
          v37 = v12;
          if (byte_1ED7F3578)
          {
            v38 = (uint64_t)v176;
            if (!v12)
              goto LABEL_27;
            if (*(_WORD *)(v12 + 24))
              goto LABEL_54;
          }
          else if (*(_WORD *)(v12 + 24))
          {
            goto LABEL_27;
          }
          v39 = *(_QWORD *)(v12 + 32);
          v12 = v39 + 24;
          v40 = *(_DWORD *)(v39 + 32);
          if (v40 >= 0x41)
          {
            v12 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v12);
            v71 = (_DWORD)v12 == v40;
            v5 = v180;
            v38 = (uint64_t)v176;
            if (v71)
              goto LABEL_27;
          }
          else
          {
            v5 = v180;
            v38 = (uint64_t)v176;
            if (!*(_QWORD *)v12)
              goto LABEL_27;
          }
LABEL_54:
          v41 = v38;
          v42 = llvm::dbgs((llvm *)v12);
          v43 = sub_1C4816AD8(v42, "SCEV for value ");
          v44 = sub_1C61ABD88(v43, (llvm::Value *)v27);
          v45 = sub_1C4816AD8(v44, " changed!\n");
          v46 = sub_1C4816AD8(v45, "Old: ");
          v47 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v46, v41);
          v48 = sub_1C4816AD8(v47, "\n");
          v49 = sub_1C4816AD8(v48, "New: ");
          v50 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v49, (uint64_t)v178);
          v51 = sub_1C4816AD8(v50, "\n");
          v173 = sub_1C4816AD8(v51, "Delta: ");
          v174 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v173, v37);
          v175 = "\n";
          goto LABEL_107;
        }
      }
LABEL_27:
      while (1)
      {
        v15 += 48;
        if (v15 == v16)
          break;
        if ((*(_QWORD *)(v15 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_31;
      }
      v15 = v16;
LABEL_31:
      if (v15 == v14)
        goto LABEL_55;
    }
    v23 = 1;
    while (v22 != -4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v18 - 1);
      v21 = (uint64_t *)(v17 + 96 * v20);
      v22 = *v21;
      if (*v21 == v19)
        goto LABEL_16;
    }
LABEL_15:
    v21 = (uint64_t *)(v17 + 96 * v18);
    goto LABEL_16;
  }
LABEL_55:
  v52 = *((_QWORD *)v5 + 10);
  v53 = *((unsigned int *)v5 + 24);
  v54 = v52 + 96 * v53;
  if (*((_DWORD *)v5 + 22))
  {
    if ((_DWORD)v53)
    {
      v55 = 96 * v53;
      v56 = *((_QWORD *)v5 + 10);
      while ((*(_QWORD *)v56 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v56 += 96;
        v55 -= 96;
        if (!v55)
          goto LABEL_60;
      }
    }
    else
    {
      v56 = *((_QWORD *)v5 + 10);
    }
  }
  else
  {
LABEL_60:
    v56 = v52 + 96 * v53;
  }
  v72 = v52 + 96 * v53;
  while (v56 != v72)
  {
    v73 = *(unsigned int *)(v56 + 56);
    if ((_DWORD)v73)
    {
      v74 = *(llvm::Value ***)(v56 + 48);
      v75 = &v74[v73];
      v76 = *((_QWORD *)v5 + 13);
      v77 = *((_DWORD *)v5 + 30);
      v78 = v77 - 1;
      while (1)
      {
        v79 = *v74;
        if (!v77)
          goto LABEL_106;
        v80 = ((v79 >> 4) ^ (v79 >> 9)) & v78;
        v81 = v76 + 48 * v80;
        v12 = *(_QWORD *)(v81 + 24);
        if (v79 != (llvm::Value *)v12)
          break;
LABEL_89:
        if (v81 == v76 + 48 * v77)
          goto LABEL_106;
        v12 = *(_QWORD *)v56;
        if (*(_QWORD *)(v81 + 40) != *(_QWORD *)v56)
        {
          v167 = llvm::dbgs((llvm *)v12);
          v168 = sub_1C4816AD8(v167, "Value ");
          v169 = sub_1C61ABD88(v168, v79);
          v170 = sub_1C4816AD8(v169, " mapped to ");
          v171 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v170, *(_QWORD *)(v81 + 40));
          v172 = sub_1C4816AD8(v171, " rather than ");
          v174 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v172, *(_QWORD *)v56);
          v175 = "\n";
          goto LABEL_107;
        }
        ++v74;
        v5 = v180;
        if (v74 == v75)
          goto LABEL_92;
      }
      v82 = 1;
      while (v12 != -4096)
      {
        v83 = v80 + v82++;
        v80 = v83 & v78;
        v81 = v76 + 48 * v80;
        v12 = *(_QWORD *)(v81 + 24);
        if (v79 == (llvm::Value *)v12)
          goto LABEL_89;
      }
LABEL_106:
      v89 = llvm::dbgs((llvm *)v12);
      v90 = sub_1C4816AD8(v89, "Value ");
      v174 = sub_1C61ABD88(v90, v79);
      v175 = " is in ExprValueMap but not in ValueExprMap\n";
      goto LABEL_107;
    }
LABEL_92:
    v84 = v56 + 96;
    v56 = v54;
    if (v84 != v54)
    {
      v56 = v84;
      while ((*(_QWORD *)v56 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v56 += 96;
        if (v56 == v54)
        {
          v56 = v54;
          break;
        }
      }
    }
  }
  v85 = (unint64_t **)*((_QWORD *)v5 + 104);
  for (i = v85; ; ++i)
  {
    v87 = *i;
    if (*i)
    {
      if (v87 == (unint64_t *)-1)
        break;
      if (v87 && ((unint64_t)*i & 1) == 0)
        break;
    }
  }
  v181 = *i;
  for (j = &v85[*((unsigned int *)v5 + 210)]; ; ++j)
  {
    v92 = *j;
    if (*j)
    {
      if (v92 == (unint64_t *)-1)
        break;
      if (v92 && ((unint64_t)*j & 1) == 0)
        break;
    }
  }
  if (v87 == v92)
    goto LABEL_136;
  do
  {
    v196 = v198;
    v197 = 0x400000000;
    sub_1C4F2B088((uint64_t)v87, (uint64_t)&v196);
    v95 = (uint64_t *)v196;
    v96 = (uint64_t *)((char *)v196 + 8 * v197);
    if (!(_DWORD)v197)
      goto LABEL_133;
    do
    {
      v97 = *v95;
      if (!*(_WORD *)(*v95 + 24))
        goto LABEL_131;
      v98 = *((_QWORD *)v180 + 95);
      v99 = *((_DWORD *)v180 + 194);
      if (!v99)
        goto LABEL_125;
      v100 = (v99 - 1) & ((v97 >> 4) ^ (v97 >> 9));
      v101 = (uint64_t *)(v98 + 104 * v100);
      v102 = *v101;
      if (*v101 != v97)
      {
        v103 = 1;
        while (v102 != -4096)
        {
          v104 = v100 + v103++;
          v100 = v104 & (v99 - 1);
          v101 = (uint64_t *)(v98 + 104 * v100);
          v102 = *v101;
          if (*v101 == v97)
            goto LABEL_126;
        }
LABEL_125:
        v101 = (uint64_t *)(v98 + 104 * v99);
      }
LABEL_126:
      if ((uint64_t *)(v98 + 104 * v99) == v101
        || ((v94 = (llvm *)sub_1C477672C((uint64_t)(v101 + 1), (uint64_t)v87), v105 = v101[2], v105 != v101[1])
          ? (v106 = 24)
          : (v106 = 28),
            v94 == (llvm *)(v105 + 8 * *(unsigned int *)((char *)v101 + v106))))
      {
        v155 = llvm::dbgs(v94);
        v156 = sub_1C4816AD8(v155, "Use of operand  ");
        v157 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v156, v97);
        v158 = sub_1C4816AD8(v157, " by user ");
        v174 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v158, (uint64_t)v87);
        v175 = " is not being tracked!\n";
        goto LABEL_107;
      }
LABEL_131:
      ++v95;
    }
    while (v95 != v96);
    v95 = (uint64_t *)v196;
LABEL_133:
    if (v95 != (uint64_t *)v198)
      free(v95);
    llvm::FoldingSetIteratorImpl::advance(&v181);
    v87 = v181;
  }
  while (v181 != v92);
LABEL_136:
  v107 = v180;
  v108 = *((_QWORD *)v180 + 80);
  v109 = *((unsigned int *)v180 + 164);
  v110 = (uint64_t *)(v108 + 56 * v109);
  v111 = *((_DWORD *)v180 + 164);
  v112 = (uint64_t)v110;
  if (*((_DWORD *)v180 + 162))
  {
    if ((_DWORD)v109)
    {
      v113 = 56 * v109;
      v112 = *((_QWORD *)v180 + 80);
      while ((*(_QWORD *)v112 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v112 += 56;
        v113 -= 56;
        if (!v113)
        {
          v111 = *((_DWORD *)v180 + 164);
          v112 = v108 + 56 * v109;
          goto LABEL_144;
        }
      }
      v111 = *((_DWORD *)v180 + 164);
    }
    else
    {
      v111 = 0;
      v112 = *((_QWORD *)v180 + 80);
    }
  }
LABEL_144:
  v177 = v108 + 56 * v111;
  v179 = *((_DWORD *)v180 + 164);
  v114 = *((_QWORD *)v180 + 80);
  while (v112 != v177)
  {
    v115 = *(unsigned int *)(v112 + 16);
    if ((_DWORD)v115)
    {
      v117 = *(_QWORD *)v112;
      v116 = *(_QWORD *)(v112 + 8);
      v118 = v116 + 16 * v115;
      do
      {
        v119 = *(_QWORD *)(v116 + 8);
        if (*(_WORD *)(v119 + 24))
        {
          v120 = *(llvm::Loop **)v116;
          v121 = *((_QWORD *)v180 + 83);
          v122 = *((_DWORD *)v180 + 170);
          v123 = sub_1C4F4CB9C(v121, v122, *(_QWORD *)(v116 + 8));
          if ((uint64_t *)(v121 + 56 * v122) == v123)
            goto LABEL_205;
          v124 = v123[1];
          v125 = *((unsigned int *)v123 + 4);
          if ((_DWORD)v125)
          {
            v126 = 16 * v125;
            v127 = (llvm::Loop **)v123[1];
            while (*v127 != v120 || v127[1] != (llvm::Loop *)v117)
            {
              v127 += 2;
              v126 -= 16;
              if (!v126)
              {
                v127 = (llvm::Loop **)(v124 + 16 * v125);
                break;
              }
            }
          }
          else
          {
            v127 = (llvm::Loop **)v123[1];
          }
          if (v125 == ((uint64_t)v127 - v124) >> 4)
          {
LABEL_205:
            v159 = llvm::dbgs((llvm *)v123);
            v160 = sub_1C4816AD8(v159, "Value: ");
            v161 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v160, v117);
            v162 = sub_1C4816AD8(v161, ", Loop: ");
            v163 = sub_1C61B1C18(v162, v120);
            v164 = sub_1C4816AD8(v163, ", ValueAtScope: ");
            v174 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v164, v119);
            v175 = " missing in ValuesAtScopesUsers\n";
            goto LABEL_107;
          }
        }
        v116 += 16;
      }
      while (v116 != v118);
    }
    v129 = (uint64_t *)(v112 + 56);
    v112 = (uint64_t)v110;
    v107 = v180;
    v108 = v114;
    if (v129 != v110)
    {
      v112 = (uint64_t)v129;
      while ((*(_QWORD *)v112 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v112 += 56;
        if ((uint64_t *)v112 == v110)
        {
          v112 = (uint64_t)v110;
          break;
        }
      }
    }
  }
  v130 = *((_QWORD *)v107 + 83);
  v131 = *((unsigned int *)v107 + 170);
  v132 = v130 + 56 * v131;
  if (*((_DWORD *)v107 + 168))
  {
    if ((_DWORD)v131)
    {
      v133 = 56 * v131;
      v134 = *((_QWORD *)v107 + 83);
      while ((*(_QWORD *)v134 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v134 += 56;
        v133 -= 56;
        if (!v133)
          goto LABEL_171;
      }
    }
    else
    {
      v134 = *((_QWORD *)v107 + 83);
    }
  }
  else
  {
LABEL_171:
    v134 = v130 + 56 * v131;
  }
  v135 = v130 + 56 * v131;
LABEL_174:
  while (v134 != v135)
  {
    v136 = *(unsigned int *)(v134 + 16);
    if ((_DWORD)v136)
    {
      v138 = *(_QWORD *)v134;
      v137 = *(_QWORD *)(v134 + 8);
      v139 = v137 + 16 * v136;
      while (1)
      {
        v140 = *(llvm::Loop **)v137;
        v141 = *(_QWORD *)(v137 + 8);
        v142 = sub_1C4F4CB9C(v108, v179, v141);
        if (v110 == v142)
          break;
        v143 = v142[1];
        v144 = *((unsigned int *)v142 + 4);
        if ((_DWORD)v144)
        {
          v145 = 16 * v144;
          v146 = (llvm::Loop **)v142[1];
          while (*v146 != v140 || v146[1] != (llvm::Loop *)v138)
          {
            v146 += 2;
            v145 -= 16;
            if (!v145)
            {
              v146 = (llvm::Loop **)(v143 + 16 * v144);
              break;
            }
          }
        }
        else
        {
          v146 = (llvm::Loop **)v142[1];
        }
        if (v144 == ((uint64_t)v146 - v143) >> 4)
          break;
        v137 += 16;
        v108 = v114;
        if (v137 == v139)
          goto LABEL_189;
      }
      v149 = llvm::dbgs((llvm *)v142);
      v150 = sub_1C4816AD8(v149, "Value: ");
      v151 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v150, v141);
      v152 = sub_1C4816AD8(v151, ", Loop: ");
      v153 = sub_1C61B1C18(v152, v140);
      v154 = sub_1C4816AD8(v153, ", ValueAtScope: ");
      v174 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v154, v138);
      v175 = " missing in ValuesAtScopes\n";
LABEL_107:
      sub_1C4816AD8(v174, v175);
      abort();
    }
LABEL_189:
    v148 = v134 + 56;
    v134 = v132;
    v107 = v180;
    if (v148 != v132)
    {
      v134 = v148;
      while ((*(_QWORD *)v134 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v134 += 56;
        if (v134 == v132)
        {
          v134 = v132;
          goto LABEL_174;
        }
      }
    }
  }
  sub_1C4F4ED4C(v107, 0);
  sub_1C4F4ED4C(v107, 1);
  if (v199 != v201)
    free(v199);
  if (v183 != v182)
    free(v183);
  if (v188 != v187)
    free(v188);
  MEMORY[0x1CAA32FB4](v193, 8);
  if (v202 != v204)
    free(v202);
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)v205);
}

uint64_t sub_1C4F4E220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

llvm *sub_1C4F4ED4C(llvm *result, int a2)
{
  llvm *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;

  v2 = result;
  v3 = (char *)result + 544;
  v4 = 544;
  if (a2)
  {
    v4 = 568;
    v3 = (char *)result + 568;
  }
  v5 = *(_QWORD *)((char *)result + v4);
  v6 = *((unsigned int *)v3 + 4);
  v7 = v5 + 144 * v6;
  if (*((_DWORD *)v3 + 2))
  {
    if ((_DWORD)v6)
    {
      v8 = 144 * v6;
      v9 = v5;
      while ((*(_QWORD *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 144;
        v8 -= 144;
        if (!v8)
          goto LABEL_8;
      }
    }
    else
    {
      v9 = v5;
    }
  }
  else
  {
LABEL_8:
    v9 = v5 + 144 * v6;
  }
  v30 = v5 + 144 * v6;
  if (v9 != v30)
  {
    if (a2)
      v10 = 4;
    else
      v10 = 0;
    while (1)
    {
      v11 = *(_DWORD *)(v9 + 16);
      if (v11)
        break;
LABEL_30:
      v24 = v9 + 144;
      v9 = v7;
      if (v24 != v7)
      {
        v9 = v24;
        while ((*(_QWORD *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 144;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v30)
        return result;
    }
    v12 = *(_QWORD *)(v9 + 8);
    v13 = v12 + 88 * v11;
    while (1)
    {
      v14 = *(_QWORD *)(v12 + 8);
      if (*(_WORD *)(v14 + 24))
        break;
LABEL_29:
      v12 += 88;
      if (v12 == v13)
        goto LABEL_30;
    }
    v15 = *((_QWORD *)v2 + 74);
    v16 = *((_DWORD *)v2 + 152);
    if (v16)
    {
      v17 = (v16 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v18 = (uint64_t *)(v15 + 72 * v17);
      v19 = *v18;
      if (*v18 == v14)
      {
LABEL_24:
        if ((uint64_t *)(v15 + 72 * v16) == v18
          || ((result = (llvm *)sub_1C477672C((uint64_t)(v18 + 1), *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFFBLL | v10),
               v22 = v18[2],
               v22 != v18[1])
            ? (v23 = 24)
            : (v23 = 28),
              result == (llvm *)(v22 + 8 * *(unsigned int *)((char *)v18 + v23))))
        {
          v25 = llvm::dbgs(result);
          v26 = sub_1C4816AD8(v25, "Value ");
          v27 = (llvm::raw_ostream *)sub_1C61B0AFC((uint64_t)v26, *(_QWORD *)(v12 + 8));
          v28 = sub_1C4816AD8(v27, " for loop ");
          v29 = sub_1C61B1C18(v28, *(llvm::Loop **)v9);
          sub_1C4816AD8(v29, " missing from BECountUsers\n");
          abort();
        }
        goto LABEL_29;
      }
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v18 = (uint64_t *)(v15 + 72 * v17);
        v19 = *v18;
        if (*v18 == v14)
          goto LABEL_24;
      }
    }
    v18 = (uint64_t *)(v15 + 72 * v16);
    goto LABEL_24;
  }
  return result;
}

uint64_t llvm::ScalarEvolution::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD v11[2];
  BOOL v12;

  v11[0] = a3;
  v11[1] = &llvm::ScalarEvolutionAnalysis::Key;
  v7 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
  v8 = *(_QWORD *)(a3 + 56);
  if (v8 == *(_QWORD *)(a3 + 48))
    v9 = (unsigned int *)(a3 + 68);
  else
    v9 = (unsigned int *)(a3 + 64);
  v12 = v7 != (_QWORD *)(v8 + 8 * *v9);
  if (!sub_1C4DAA35C((uint64_t)v11) && !sub_1C4DAA3F8((uint64_t)v11)
    || (sub_1C4DA944C(a4, (uint64_t)&llvm::AssumptionAnalysis::Key, a2, a3) & 1) != 0
    || (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_1C4DA944C(a4, (uint64_t)&llvm::LoopAnalysis::Key, a2, a3);
  }
}

uint64_t llvm::ScalarEvolutionAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8;
  return llvm::ScalarEvolution::ScalarEvolution(a3, a1, v6, v7, v8, v9);
}

uint64_t sub_1C4F4F0EC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Scalar Evolution Analysis";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "scalar-evolution";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &llvm::ScalarEvolutionWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::ScalarEvolutionWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::ScalarEvolutionWrapperPass::runOnFunction(llvm::ScalarEvolutionWrapperPass *this, llvm::Function *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  llvm::AssumptionCacheTracker *v14;
  uint64_t AssumptionCache;
  void **v16;
  void *v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ScalarEvolution *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  int v33;
  uint64_t v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *__src;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = (void **)**((_QWORD **)this + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  llvm::TargetLibraryAnalysis::run(v7 + 32, (uint64_t)a2, (uint64_t)&v39);
  *(_QWORD *)(v7 + 240) = v39;
  v8 = (uint64_t *)(v7 + 240);
  if (*(_BYTE *)(v7 + 320))
  {
    if (v8 == &v39)
    {
LABEL_12:
      *(_DWORD *)(v7 + 312) = v43;
      goto LABEL_13;
    }
    v9 = (void **)(v7 + 248);
    v10 = v41;
    v11 = *(unsigned int *)(v7 + 256);
    if (v11 >= v41)
    {
      if (v41)
        memmove(*v9, __src, 8 * v41);
      goto LABEL_11;
    }
    if (*(_DWORD *)(v7 + 260) < v41)
    {
      *(_DWORD *)(v7 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 248, v7 + 264, v10, 8);
    }
    else if ((_DWORD)v11)
    {
      memmove(*v9, __src, 8 * v11);
LABEL_9:
      if (v11 != v41)
        memcpy((char *)*v9 + 8 * v11, (char *)__src + 8 * v11, 8 * v41 - 8 * v11);
LABEL_11:
      *(_DWORD *)(v7 + 256) = v10;
      goto LABEL_12;
    }
    v11 = 0;
    goto LABEL_9;
  }
  *(_QWORD *)(v7 + 248) = v7 + 264;
  *(_QWORD *)(v7 + 256) = 0x600000000;
  if (v41)
    sub_1C49DA960(v7 + 248, (uint64_t)&__src);
  *(_DWORD *)(v7 + 312) = v43;
  *(_BYTE *)(v7 + 320) = 1;
LABEL_13:
  if (__src != &v42)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v34);
  sub_1C4D8B52C(v32);
  v12 = (void **)**((_QWORD **)this + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::AssumptionCacheTracker::ID);
  v14 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v14, a2);
  v16 = (void **)**((_QWORD **)this + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::DominatorTreeWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v19 = (void **)**((_QWORD **)this + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::LoopInfoWrapperPass::ID);
  v21 = v18 + 32;
  v22 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::LoopInfoWrapperPass::ID);
  llvm::ScalarEvolution::ScalarEvolution(v4, (uint64_t)a2, (uint64_t)v8, AssumptionCache, v21, v22 + 32);
  v23 = (llvm::ScalarEvolution *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v23)
  {
    llvm::ScalarEvolution::~ScalarEvolution(v23);
    MEMORY[0x1CAA32FC0](v25, 0x10F0C4084634EB3, v26, v27, v28, v29, v30, v31, v32[0]);
  }
  return 0;
}

llvm::ScalarEvolution *llvm::ScalarEvolutionWrapperPass::releaseMemory(llvm::ScalarEvolutionWrapperPass *this)
{
  llvm::ScalarEvolution *result;

  result = (llvm::ScalarEvolution *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    llvm::ScalarEvolution::~ScalarEvolution(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::SCEVComparePredicate::SCEVComparePredicate(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)result = &off_1E813B1C8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 1;
  *(_DWORD *)(result + 36) = a4;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  return result;
}

{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)result = &off_1E813B1C8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 1;
  *(_DWORD *)(result + 36) = a4;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  return result;
}

uint64_t llvm::SCEVWrapPredicate::SCEVWrapPredicate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = 2;
  *(_QWORD *)result = &off_1E813B1F8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = a4;
  *(_DWORD *)(result + 48) = a5;
  return result;
}

{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = 2;
  *(_QWORD *)result = &off_1E813B1F8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = a4;
  *(_DWORD *)(result + 48) = a5;
  return result;
}

uint64_t llvm::ScalarEvolution::rewriteUsingPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = 0;
  v8 = 0;
  v6 = a1;
  v9 = 0;
  v10 = 0;
  v11 = a4;
  v12 = a3;
  v4 = sub_1C4F59DF8((uint64_t)&v6, a2);
  MEMORY[0x1CAA32FB4](v7, 8);
  return v4;
}

uint64_t llvm::SCEVPredicate::SCEVPredicate(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)result = &off_1E813B198;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = a4;
  return result;
}

BOOL llvm::SCEVComparePredicate::implies(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  if (a2 && *(_DWORD *)(a2 + 32) == 1)
    return *(_DWORD *)(a1 + 36) == 32
        && *(_QWORD *)(a2 + 40) == *(_QWORD *)(a1 + 40)
        && *(_QWORD *)(a2 + 48) == *(_QWORD *)(a1 + 48);
  return v2;
}

BOOL llvm::SCEVWrapPredicate::implies(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a2 && *(_DWORD *)(a2 + 32) == 2)
    return *(_QWORD *)(a2 + 40) == *(_QWORD *)(a1 + 40)
        && (*(_DWORD *)(a2 + 48) | *(_DWORD *)(a1 + 48)) == *(_DWORD *)(a1 + 48);
  return result;
}

uint64_t llvm::SCEVWrapPredicate::getImpliedFlags(llvm::SCEVWrapPredicate *this, const llvm::SCEVAddRecExpr *a2, llvm::ScalarEvolution *a3)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  llvm::SCEVWrapPredicate *v17;
  unsigned int v18;
  void *v20;
  uint64_t v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  v4 = *((_WORD *)this + 14) & 7;
  result = 2 * ((v4 | 4) == v4);
  if ((v4 | 2) == v4)
  {
    v6 = *((_QWORD *)this + 5);
    if (v6 == 2)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    }
    else
    {
      v18 = result;
      v17 = this;
      v13 = *((_QWORD *)this + 4);
      v20 = v22;
      v21 = 0x300000000;
      v14 = v6;
      v15 = 8 * v6 - 8;
      if (v15 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, (uint64_t)v15 >> 3, 8);
        v16 = v21;
      }
      else
      {
        v16 = 0;
      }
      if (v14 != 1)
      {
        memcpy((char *)v20 + 8 * v16, (const void *)(v13 + 8), v15);
        v16 = v21;
      }
      LODWORD(v21) = v16 + (v15 >> 3);
      v7 = sub_1C618AB20((uint64_t *)a2, (uint64_t)&v20, *((uint64_t ***)v17 + 6));
      if (v20 != v22)
        free(v20);
      result = v18;
    }
    if (v7)
      v8 = *(unsigned __int16 *)(v7 + 24) == 0;
    else
      v8 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 32);
      v10 = (_QWORD *)(v9 + 24);
      v11 = *(_DWORD *)(v9 + 32);
      v12 = v11 - 1;
      if (v11 >= 0x41)
        v10 = (_QWORD *)(*v10 + 8 * (v12 >> 6));
      return result | (((*v10 >> v12) & 1) == 0);
    }
  }
  return result;
}

uint64_t llvm::SCEVUnionPredicate::SCEVUnionPredicate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E813B228;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x1000000000;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v6 = *a2++;
      llvm::SCEVUnionPredicate::add((_DWORD *)a1, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E813B228;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x1000000000;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v6 = *a2++;
      llvm::SCEVUnionPredicate::add((_DWORD *)a1, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

_DWORD *llvm::SCEVUnionPredicate::add(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  if (!a2 || *(_DWORD *)(a2 + 32))
  {
    v8 = result[12];
    if (v8 >= result[13])
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 10), (uint64_t)(result + 14), v8 + 1, 8);
      LODWORD(v8) = v3[12];
    }
    *(_QWORD *)(*((_QWORD *)v3 + 5) + 8 * v8) = a2;
    ++v3[12];
  }
  else
  {
    v4 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)(a2 + 40);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        result = (_DWORD *)llvm::SCEVUnionPredicate::add(v3, v7);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t llvm::SCEVUnionPredicate::implies(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2 || *(_DWORD *)(a2 + 32))
  {
    v10 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)(a1 + 40);
      v12 = 8 * v10 - 8;
      do
      {
        v13 = *v11++;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2);
        if ((result & 1) != 0)
          break;
        v14 = v12;
        v12 -= 8;
      }
      while (v14);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v4 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)(a2 + 40);
      v6 = 8 * v4 - 8;
      do
      {
        v7 = *v5++;
        result = llvm::SCEVUnionPredicate::implies(a1, v7);
        if ((_DWORD)result)
          v9 = v6 == 0;
        else
          v9 = 1;
        v6 -= 8;
      }
      while (!v9);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

llvm::PredicatedScalarEvolution *llvm::PredicatedScalarEvolution::PredicatedScalarEvolution(llvm::PredicatedScalarEvolution *this, llvm::ScalarEvolution *a2, llvm::Loop *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 128;
  v6 = (char *)operator new(0x1800uLL, (std::align_val_t)8uLL);
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = 0;
  v7 = *((unsigned int *)this + 10);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    v9 = v6 + 16;
    do
    {
      *v9 = 0;
      v9[1] = -4096;
      *(v9 - 2) = &off_1E813B388;
      *(v9 - 1) = 2;
      v9[2] = 0;
      v9 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 11) = a2;
  *((_QWORD *)this + 12) = a3;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  v10 = operator new();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = &off_1E813B228;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 40) = v10 + 56;
  *(_QWORD *)(v10 + 48) = 0x1000000000;
  v11 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v10;
  if (v11)
  {
    v13 = *(void **)(v11 + 40);
    if (v13 != (void *)(v11 + 56))
      free(v13);
    MEMORY[0x1CAA32FC0](v11, 0x10D1C407D0B9851);
  }
  return this;
}

uint64_t sub_1C4F4FBF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new();
  v5 = (_DWORD *)result;
  v6 = *(uint64_t **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_1E813B228;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = result + 56;
  *(_QWORD *)(result + 48) = 0x1000000000;
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    do
    {
      v9 = *v6++;
      result = (uint64_t)llvm::SCEVUnionPredicate::add(v5, v9);
      v8 -= 8;
    }
    while (v8);
  }
  *a2 = v5;
  return result;
}

uint64_t llvm::PredicatedScalarEvolution::getSCEV(int8x16_t *this, llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  llvm::Value *v8;
  int v9;
  unsigned int v10;
  uint64_t SCEVIter;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int8x16_t v23;

  v3 = this[5].i64[1];
  v4 = *(_QWORD *)(v3 + 104);
  v5 = *(_DWORD *)(v3 + 120);
  if (!v5)
  {
LABEL_7:
    v7 = v4 + 48 * v5;
    goto LABEL_8;
  }
  v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = v4 + 48 * v6;
  v8 = *(llvm::Value **)(v7 + 24);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8 != (llvm::Value *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v7 = v4 + 48 * v6;
      v8 = *(llvm::Value **)(v7 + 24);
      if (v8 == a2)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == v4 + 48 * v5 || (SCEVIter = *(_QWORD *)(v7 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v3, (unint64_t)a2);
  v17 = SCEVIter;
  v12 = sub_1C4F5F6CC(this->i64, &v17);
  v13 = v12;
  v14 = v12[2];
  if (!v14)
  {
    v14 = v17;
LABEL_15:
    v16 = this[5].i64[1];
    v22 = 0;
    v19 = 0;
    v20 = 0;
    v18 = v16;
    v21 = 0;
    v23 = vextq_s8(this[6], this[6], 8uLL);
    v14 = sub_1C4F59DF8((uint64_t)&v18, v14);
    MEMORY[0x1CAA32FB4](v19, 8);
    *((_DWORD *)v13 + 2) = this[7].i32[0];
    v13[2] = v14;
    return v14;
  }
  if (this[7].i32[0] != *((_DWORD *)v12 + 2))
  {
    v17 = v12[2];
    goto LABEL_15;
  }
  return v14;
}

uint64_t llvm::PredicatedScalarEvolution::getBackedgeTakenCount(int8x16_t *this)
{
  uint64_t result;
  llvm::ScalarEvolution *v3;
  const llvm::Loop *v4;
  const llvm::Loop **PredicatedBackedgeTakenInfo;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  result = this[7].i64[1];
  if (!result)
  {
    v9 = v11;
    v10 = 0x400000000;
    v3 = (llvm::ScalarEvolution *)this[5].i64[1];
    v4 = (const llvm::Loop *)this[6].i64[0];
    PredicatedBackedgeTakenInfo = llvm::ScalarEvolution::getPredicatedBackedgeTakenInfo(v3, v4);
    this[7].i64[1] = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)PredicatedBackedgeTakenInfo, (uint64_t)v4, (uint64_t)v3, (uint64_t)&v9);
    v6 = (uint64_t *)v9;
    if ((_DWORD)v10)
    {
      v7 = 8 * v10;
      do
      {
        v8 = *v6++;
        llvm::PredicatedScalarEvolution::addPredicate(this, v8);
        v7 -= 8;
      }
      while (v7);
      v6 = (uint64_t *)v9;
    }
    if (v6 != v11)
      free(v6);
    return this[7].i64[1];
  }
  return result;
}

int8x16_t *llvm::PredicatedScalarEvolution::updateGeneration(int8x16_t *this)
{
  __int32 v1;
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int8x16_t v16;

  v1 = this[7].i32[0];
  this[7].i32[0] = v1 + 1;
  if (v1 == -1)
  {
    v2 = this;
    v3 = this[1].u32[0];
    v4 = this->i64[0] + 24 * v3;
    if (this->i32[2])
    {
      if ((_DWORD)v3)
      {
        v5 = 24 * v3;
        v6 = this->i64[0];
        while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v6 += 24;
          v5 -= 24;
          if (!v5)
            goto LABEL_7;
        }
      }
      else
      {
        v6 = this->i64[0];
      }
    }
    else
    {
LABEL_7:
      v6 = this->i64[0] + 24 * v3;
    }
    v7 = this->i64[0] + 24 * v3;
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 16);
      v11 = v2[5].i64[1];
      v15 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v16 = vextq_s8(v2[6], v2[6], 8uLL);
      v9 = sub_1C4F59DF8((uint64_t)&v11, v8);
      this = (int8x16_t *)MEMORY[0x1CAA32FB4](v12, 8);
      *(_DWORD *)(v6 + 8) = v2[7].i32[0];
      *(_QWORD *)(v6 + 16) = v9;
      v10 = v6 + 24;
      v6 = v4;
      if (v10 != v4)
      {
        v6 = v10;
        while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v6 += 24;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
    }
  }
  return this;
}

BOOL llvm::PredicatedScalarEvolution::hasNoOverflow(uint64_t a1, llvm::Value *a2, int a3)
{
  llvm::SCEVWrapPredicate *SCEV;
  llvm::ScalarEvolution *v6;
  unsigned int v7;
  llvm::Value *v9;
  uint64_t v10;

  v9 = a2;
  SCEV = (llvm::SCEVWrapPredicate *)llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)a1, a2);
  v7 = a3 & ~llvm::SCEVWrapPredicate::getImpliedFlags(SCEV, *(const llvm::SCEVAddRecExpr **)(a1 + 88), v6);
  v10 = 0;
  if (sub_1C4F5FA28((uint64_t *)(a1 + 24), &v9, &v10)
    && v10 != *(_QWORD *)(a1 + 24) + 48 * *(unsigned int *)(a1 + 40))
  {
    v7 &= ~*(_DWORD *)(v10 + 40);
  }
  return v7 == 0;
}

uint64_t llvm::PredicatedScalarEvolution::getAsAddRec(int8x16_t *this, llvm::Value *a2)
{
  uint64_t SCEV;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  llvm::Value *v21;
  int v22;
  unsigned int v23;
  __int32 v24;
  uint64_t SCEVIter;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[32];

  SCEV = llvm::PredicatedScalarEvolution::getSCEV(this, a2);
  v28 = (uint64_t *)v32;
  v29 = (uint64_t *)v32;
  v30 = 4;
  v31 = 0;
  v5 = llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates(this[5].i64[1], SCEV, this[6].i64[0], (llvm::SmallPtrSetImplBase *)&v28);
  if (!v5)
    goto LABEL_2;
  v7 = (uint64_t *)((char *)&v30 + 4);
  if (v29 != v28)
    v7 = &v30;
  v8 = *(unsigned int *)v7;
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = v29;
    while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_19;
    }
  }
  else
  {
    v10 = v29;
  }
  v11 = (char *)&v29[v8];
  if (v10 != (uint64_t *)v11)
  {
    v12 = *v10;
LABEL_15:
    llvm::PredicatedScalarEvolution::addPredicate(this, v12);
    v13 = (unint64_t *)(v10 + 1);
    while (v13 != (unint64_t *)v11)
    {
      v14 = *v13++;
      v12 = v14;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = (uint64_t *)(v13 - 1);
        goto LABEL_15;
      }
    }
  }
LABEL_19:
  v15 = this[5].i64[1];
  v16 = *(_QWORD *)(v15 + 104);
  v17 = *(_DWORD *)(v15 + 120);
  if (v17)
  {
    v18 = v17 - 1;
    v19 = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v20 = v16 + 48 * v19;
    v21 = *(llvm::Value **)(v20 + 24);
    if (v21 == a2)
      goto LABEL_26;
    v22 = 1;
    while (v21 != (llvm::Value *)-4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & v18;
      v20 = v16 + 48 * (v23 & v18);
      v21 = *(llvm::Value **)(v20 + 24);
      if (v21 == a2)
        goto LABEL_26;
    }
  }
  v20 = v16 + 48 * v17;
LABEL_26:
  v24 = this[7].i32[0];
  if (v20 == v16 + 48 * v17 || (SCEVIter = *(_QWORD *)(v20 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v15, (unint64_t)a2);
  v27 = SCEVIter;
  v26 = sub_1C4F5F6CC(this->i64, &v27);
  *((_DWORD *)v26 + 2) = v24;
  v26[2] = v5;
LABEL_2:
  if (v29 != v28)
    free(v29);
  return v5;
}

llvm::PredicatedScalarEvolution *llvm::PredicatedScalarEvolution::PredicatedScalarEvolution(llvm::PredicatedScalarEvolution *this, const llvm::PredicatedScalarEvolution *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28[2];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  MEMORY[0x1CAA32FB4](0, 8);
  v4 = *((unsigned int *)a2 + 4);
  *((_DWORD *)this + 4) = v4;
  if ((_DWORD)v4)
  {
    *(_QWORD *)this = operator new(24 * v4, (std::align_val_t)8uLL);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    v5 = *((unsigned int *)this + 4);
    if ((_DWORD)v5)
    {
      v6 = 0;
      for (i = 0; i < v5; ++i)
      {
        *(_QWORD *)(*(_QWORD *)this + v6) = *(_QWORD *)(*(_QWORD *)a2 + v6);
        v8 = *(_QWORD *)(*(_QWORD *)this + v6);
        if (v8 != -4096 && v8 != -8192)
        {
          *(_OWORD *)(*(_QWORD *)this + v6 + 8) = *(_OWORD *)(*(_QWORD *)a2 + v6 + 8);
          v5 = *((unsigned int *)this + 4);
        }
        v6 += 24;
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  *((_DWORD *)this + 10) = 128;
  v9 = (char *)operator new(0x1800uLL, (std::align_val_t)8uLL);
  *((_QWORD *)this + 3) = v9;
  *((_QWORD *)this + 4) = 0;
  v10 = *((unsigned int *)this + 10);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = v9 + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &off_1E813B388;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  v13 = *((_QWORD *)a2 + 13);
  v14 = operator new();
  v15 = *(uint64_t **)(v13 + 40);
  v16 = *(unsigned int *)(v13 + 48);
  *(_DWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = &off_1E813B228;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 40) = v14 + 56;
  *(_QWORD *)(v14 + 48) = 0x1000000000;
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    do
    {
      v18 = *v15++;
      llvm::SCEVUnionPredicate::add((_DWORD *)v14, v18);
      v17 -= 8;
    }
    while (v17);
  }
  *((_QWORD *)this + 13) = v14;
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  if (*((_DWORD *)a2 + 8))
  {
    v20 = *((_QWORD *)a2 + 3);
    v21 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v21)
    {
      v22 = 48 * v21;
      for (j = *((_QWORD *)a2 + 3); (*(_QWORD *)(j + 24) | 0x1000) == 0xFFFFFFFFFFFFF000; j += 48)
      {
        v22 -= 48;
        if (!v22)
          return this;
      }
    }
    else
    {
      j = *((_QWORD *)a2 + 3);
    }
    v24 = v20 + 48 * v21;
    if (j != v24)
    {
      v25 = *(_QWORD *)(j + 24);
LABEL_26:
      v26 = *(unsigned int *)(j + 40);
      v28[0] = v25;
      v28[1] = v26;
      sub_1C61B24E0((uint64_t)this + 24, v28, (uint64_t)v27);
      while (1)
      {
        j += 48;
        if (j == v24)
          break;
        v25 = *(_QWORD *)(j + 24);
        if ((v25 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (j == v24)
            return this;
          goto LABEL_26;
        }
      }
    }
  }
  return this;
}

void llvm::PredicatedScalarEvolution::print(llvm::PredicatedScalarEvolution *this, llvm::raw_ostream *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  llvm::Value *v16;
  int v17;
  unsigned int v18;
  uint64_t SCEVIter;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _WORD *v24;
  _BYTE *v25;
  _DWORD *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_QWORD *)this + 12);
  v4 = *(_QWORD *)(v3 + 32);
  v28 = *(_QWORD *)(v3 + 40);
  if (v28 != v4)
  {
    v7 = a3 + 2;
    do
    {
      v29 = v4;
      v8 = *(_QWORD *)v4 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v4 + 48); i != v8; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v10 = (llvm::Value *)(i - 24);
        else
          v10 = 0;
        if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFD) != 0xD)
          continue;
        v11 = *((_QWORD *)this + 11);
        v12 = *(_QWORD *)(v11 + 104);
        v13 = *(_DWORD *)(v11 + 120);
        if (v13)
        {
          v14 = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
          v15 = v12 + 48 * v14;
          v16 = *(llvm::Value **)(v15 + 24);
          if (v16 == v10)
            goto LABEL_16;
          v17 = 1;
          while (v16 != (llvm::Value *)-4096)
          {
            v18 = v14 + v17++;
            v14 = v18 & (v13 - 1);
            v15 = v12 + 48 * v14;
            v16 = *(llvm::Value **)(v15 + 24);
            if (v16 == v10)
              goto LABEL_16;
          }
        }
        v15 = v12 + 48 * v13;
LABEL_16:
        if (v15 == v12 + 48 * v13 || (SCEVIter = *(_QWORD *)(v15 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v11, (unint64_t)v10);
        v31 = 0;
        v32 = SCEVIter;
        if (sub_1C4F5F734((uint64_t *)this, &v32, &v31))
        {
          v20 = v31;
          v21 = *(_QWORD *)this;
          v22 = *((_DWORD *)this + 4);
        }
        else
        {
          v21 = *(_QWORD *)this;
          v22 = *((_DWORD *)this + 4);
          v20 = *(_QWORD *)this + 24 * v22;
        }
        if (v21 + 24 * v22 != v20 && *(_QWORD *)(v20 + 16) != SCEVIter)
        {
          llvm::raw_ostream::indent(a2, a3);
          v23 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v23) > 4)
          {
            *(_BYTE *)(v23 + 4) = 93;
            *(_DWORD *)v23 = 1163087963;
            *((_QWORD *)a2 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(a2, "[PSE]", 5uLL);
          }
          llvm::Value::print(v10, a2, 0);
          v24 = (_WORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v24 > 1uLL)
          {
            *v24 = 2618;
            *((_QWORD *)a2 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a2, ":\n", 2uLL);
          }
          llvm::raw_ostream::indent(a2, v7);
          llvm::SCEV::print(SCEVIter);
          v25 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v25)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v25 = 10;
            ++*((_QWORD *)a2 + 4);
          }
          llvm::raw_ostream::indent(a2, v7);
          v26 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v26 > 3uLL)
          {
            *v26 = 540945709;
            *((_QWORD *)a2 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a2, "--> ", 4uLL);
          }
          llvm::SCEV::print(*(_QWORD *)(v20 + 16));
          v27 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v27)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v27 = 10;
            ++*((_QWORD *)a2 + 4);
          }
        }
      }
      v4 = v29 + 8;
    }
    while (v29 + 8 != v28);
  }
}

uint64_t sub_1C4F50788(uint64_t result, uint64_t a2, uint64_t a3, llvm::SCEV *a4, uint64_t a5)
{
  llvm::SCEV *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  llvm::SCEV *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::SCEV *v19;
  BOOL v20;
  llvm::SCEV *v22;
  const llvm::SCEV *v23;
  void *v24;
  const llvm::SCEV *UDivExpr;
  uint64_t MulExpr;
  int v27;
  uint64_t v28;
  llvm::SCEV *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  void *v34;
  unsigned int v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  const llvm::SCEV *v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  void *v44;
  int v45;
  int v46;
  const llvm::APInt *v47;
  llvm::ValueHandleBase *v48;
  unsigned __int8 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  size_t v57;
  BOOL v58;
  unint64_t v59;
  int *v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  const llvm::APInt *v68;
  llvm::ValueHandleBase *v69;
  unsigned __int8 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  _QWORD *v77;
  size_t v78;
  BOOL v79;
  unint64_t v80;
  int *v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  const llvm::SCEV *v89;
  uint64_t v90;
  const llvm::SCEV *UMinExpr;
  uint64_t UMaxExpr;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::SCEV **v101;
  llvm::SCEV *v102;
  int v103;
  int v104;
  llvm::SCEV **v105;
  llvm::SCEV **v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  int64_t v112;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  const llvm::SCEV *v117;
  uint64_t v118;
  uint64_t v119;
  llvm::SCEV *v120;
  uint64_t v121;
  unsigned int v122;
  void *__s1;
  unsigned int v124;
  void *__s2;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  void *__src;
  uint64_t v130;
  _QWORD v131[16];
  void *v132;
  uint64_t v133;
  const llvm::SCEV *v134;
  void *v135;
  uint64_t v136;

  v6 = (llvm::SCEV *)a3;
  v7 = a2;
  v8 = result;
  v136 = *MEMORY[0x1E0C80C00];
  v120 = (llvm::SCEV *)a3;
  v9 = *(_QWORD *)result;
  v10 = *(unsigned __int16 *)(a3 + 24);
  if (*(_WORD *)(a3 + 24))
  {
    v11 = (llvm::SCEV *)a3;
    v6 = a4;
  }
  else
  {
    v120 = a4;
    v7 = dword_1C85F6178[(int)a2];
    v10 = *((unsigned __int16 *)a4 + 12);
    v11 = a4;
  }
  if (v10 != 4 || *((_QWORD *)v11 + 5) != 2)
    goto LABEL_26;
  v12 = (uint64_t *)*((_QWORD *)v11 + 4);
  v14 = *v12;
  v13 = v12[1];
  v15 = *(_WORD *)(v14 + 24) ? 0 : v14;
  v16 = *(unsigned __int16 *)(v13 + 24);
  v17 = v13 ? v13 - 32 : 0;
  v18 = v16 == 14 ? v17 : 0;
  v19 = *((_WORD *)v6 + 12) ? 0 : v6;
  v20 = !v15 || v19 == 0;
  if (v20 || v18 == 0)
    goto LABEL_26;
  v118 = *(_QWORD *)(result + 8);
  llvm::ConstantRange::makeExactICmpRegion(&v132, v7, *((_QWORD *)v19 + 4) + 24);
  v30 = *(_QWORD *)(v15 + 32);
  v31 = *(unsigned int *)(v30 + 32);
  v119 = a5;
  if (v31 > 0x40)
  {
    v33 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
    v34 = (void *)operator new[]();
    memcpy(v34, *(const void **)(v30 + 24), v33);
    LODWORD(v130) = v31;
    __src = v34;
    v128 = v31;
    v32 = (void *)operator new[]();
    memcpy(v32, __src, v33);
  }
  else
  {
    v32 = *(void **)(v30 + 24);
    LODWORD(v130) = *(_DWORD *)(v30 + 32);
    __src = v32;
    v128 = v31;
  }
  v127 = (uint64_t)v32;
  llvm::APInt::operator+=((uint64_t)&v127, 1uLL);
  LODWORD(v131[1]) = v128;
  v131[0] = v127;
  llvm::ConstantRange::sub((llvm::ConstantRange *)&v132, (const llvm::ConstantRange *)&__src, (uint64_t)&__s1);
  if (LODWORD(v131[1]) >= 0x41 && v131[0])
    MEMORY[0x1CAA32F9C](v131[0], 0x1000C8000313F17);
  if (v130 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v135 >= 0x41 && v134)
    MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
  if (v133 >= 0x41 && v132)
    MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
  v35 = v124;
  if (v124 <= 0x40)
  {
    result = (uint64_t)__s1;
    v36 = __s2;
    v37 = __s2;
    if (__s1 > __s2)
      goto LABEL_141;
LABEL_55:
    if ((void *)result == v37 && (!v124 || v37 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v124)))
      goto LABEL_143;
    goto LABEL_56;
  }
  result = (uint64_t)__s1;
  v36 = __s2;
  v94 = (((unint64_t)v124 + 63) >> 3) & 0x3FFFFFF8;
  do
  {
    if (!v94)
    {
      v37 = __s2;
      goto LABEL_191;
    }
    v95 = *(_QWORD *)((char *)__s1 + v94 - 8);
    v96 = *(_QWORD *)((char *)__s2 + v94 - 8);
    v94 -= 8;
  }
  while (v95 == v96);
  v37 = __s2;
  if (v95 <= v96)
    goto LABEL_191;
LABEL_141:
  if (v126 > 0x40)
  {
    v111 = 0;
    v112 = ((unint64_t)v126 + 63) >> 6;
    do
    {
      if (v112-- < 1)
        break;
      v114 = v36[v112];
      v111 += __clz(v114);
    }
    while (!v114);
    v115 = v126 | 0xFFFFFFC0;
    if ((v126 & 0x3F) == 0)
      v115 = 0;
    if (v111 + v115 == v126)
      goto LABEL_191;
LABEL_143:
    if (v126 >= 0x41 && v36 != 0)
    {
      result = MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
      v35 = v124;
    }
    if (v35 >= 0x41)
    {
      result = (uint64_t)__s1;
      if (__s1)
        result = MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
    }
    a5 = v119;
LABEL_26:
    if (*((_WORD *)v6 + 12))
      v22 = 0;
    else
      v22 = v6;
    if ((_DWORD)v7 == 32)
    {
      if (v22)
      {
        result = llvm::Constant::isNullValue(*((llvm::Constant **)v22 + 4));
        if ((_DWORD)result)
        {
          __src = 0;
          __s1 = 0;
          result = llvm::ScalarEvolution::matchURem((llvm::ScalarEvolution *)v9, v11, (const llvm::SCEV **)&__src, (const llvm::SCEV **)&__s1);
          if ((_DWORD)result)
          {
            v23 = (const llvm::SCEV *)__src;
            if (__src)
            {
              if (*((_WORD *)__src + 12) == 14)
              {
                v24 = __s1;
                UDivExpr = llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)v9, (const llvm::SCEV *)__src, (const llvm::SCEV *)__s1);
                v132 = &v134;
                v134 = UDivExpr;
                v135 = v24;
                v133 = 0x200000002;
                MulExpr = llvm::ScalarEvolution::getMulExpr(v9, &v132, 0, 0);
                if (v132 != &v134)
                  free(v132);
                v132 = v23;
                result = (uint64_t)sub_1C4F5A9A0(a5, (uint64_t *)&v132);
                *(_QWORD *)(result + 8) = MulExpr;
LABEL_178:
                v107 = *(_QWORD *)(v8 + 8);
                v108 = *(unsigned int *)(v107 + 8);
                if (v108 >= *(_DWORD *)(v107 + 12))
                {
                  result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(v8 + 8), v107 + 16, v108 + 1, 8);
                  LODWORD(v108) = *(_DWORD *)(v107 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v107 + 8 * v108) = v23;
                ++*(_DWORD *)(v107 + 8);
                return result;
              }
            }
          }
        }
      }
    }
    if (!*((_WORD *)v11 + 12))
      return result;
    result = llvm::ScalarEvolution::containsAddRecurrence((llvm::ScalarEvolution *)v9, v6);
    if ((result & 1) != 0)
      return result;
    v27 = *((unsigned __int16 *)v11 + 12);
    if (v27 == 14)
    {
      v28 = (uint64_t)v6;
      v29 = v11;
    }
    else
    {
      if (*((_WORD *)v6 + 12) == 14)
      {
        v120 = v6;
        __asm { BR              X10 }
      }
      v28 = (uint64_t)v6;
      v29 = v11;
      if (v27 != 2)
        return result;
    }
    v98 = *(_QWORD *)a5;
    v99 = *(unsigned int *)(a5 + 16);
    if ((_DWORD)v99)
    {
      LODWORD(v100) = ((v29 >> 4) ^ (v29 >> 9)) & (v99 - 1);
      v101 = (llvm::SCEV **)(v98 + 16 * v100);
      v102 = *v101;
      if (v29 != *v101)
      {
        v103 = 1;
        do
        {
          if (v102 == (llvm::SCEV *)-4096)
            goto LABEL_159;
          v104 = v100 + v103++;
          v100 = v104 & (v99 - 1);
          v102 = *(llvm::SCEV **)(v98 + 16 * v100);
        }
        while (v29 != v102);
        v101 = (llvm::SCEV **)(v98 + 16 * v100);
      }
      v105 = (llvm::SCEV **)(v98 + 16 * v99);
    }
    else
    {
LABEL_159:
      v105 = (llvm::SCEV **)(v98 + 16 * v99);
      v101 = v105;
    }
    v106 = v101 + 1;
    if (v101 == v105)
      v106 = &v120;
    v23 = *v106;
    switch((int)v7)
    {
      case ' ':
        if (!*(_WORD *)(v28 + 24))
          goto LABEL_177;
        return result;
      case '!':
        if (!*(_WORD *)(v28 + 24))
        {
          result = llvm::Constant::isNullValue(*(llvm::Constant **)(v28 + 32));
          if ((_DWORD)result)
            __asm { BR              X10 }
        }
        return result;
      case '"':
        __asm { BR              X11 }
        return result;
      case '#':
        result = llvm::ScalarEvolution::getUMaxExpr((llvm::ScalarEvolution *)v9, *v106, (const llvm::SCEV *)v28);
        goto LABEL_176;
      case '$':
        __asm { BR              X11 }
        return result;
      case '%':
        result = llvm::ScalarEvolution::getUMinExpr((llvm::ScalarEvolution *)v9, *v106, (const llvm::SCEV *)v28, 0);
        goto LABEL_176;
      case '&':
        __asm { BR              X11 }
        return result;
      case '\'':
        result = llvm::ScalarEvolution::getSMaxExpr((llvm::ScalarEvolution *)v9, *v106, (const llvm::SCEV *)v28);
        goto LABEL_176;
      case '(':
        __asm { BR              X11 }
        return result;
      case ')':
        result = llvm::ScalarEvolution::getSMinExpr((llvm::ScalarEvolution *)v9, *v106, (const llvm::SCEV *)v28);
LABEL_176:
        v28 = result;
        if (!result)
          return result;
LABEL_177:
        result = (uint64_t)sub_1C4F5A9A0(a5, (uint64_t *)&v120);
        *(_QWORD *)(result + 8) = v28;
        if (v120 == v23)
          goto LABEL_178;
        return result;
      default:
        return result;
    }
  }
  if (v37)
    goto LABEL_143;
LABEL_191:
  if (v124 <= 0x40)
    goto LABEL_55;
  if (!memcmp((const void *)result, v36, (((unint64_t)v124 + 63) >> 3) & 0x3FFFFFF8))
  {
    result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
    if ((_DWORD)result == v35)
      goto LABEL_143;
  }
LABEL_56:
  v38 = (void *)(v18 + 32);
  v39 = *(unsigned int *)(v119 + 16);
  v40 = (const llvm::SCEV *)(v18 + 32);
  if ((_DWORD)v39)
  {
    v41 = *(_QWORD *)v119;
    LODWORD(v42) = (v39 - 1) & ((v38 >> 4) ^ (v38 >> 9));
    v43 = (void **)(*(_QWORD *)v119 + 16 * v42);
    v44 = *v43;
    if (v38 == *v43)
    {
LABEL_62:
      v40 = (const llvm::SCEV *)(v18 + 32);
      if (v43 != (void **)(v41 + 16 * v39))
        v40 = (const llvm::SCEV *)v43[1];
    }
    else
    {
      v45 = 1;
      while (v44 != (void *)-4096)
      {
        v46 = v42 + v45++;
        v42 = v46 & (v39 - 1);
        v44 = *(void **)(v41 + 16 * v42);
        if (v38 == v44)
        {
          v43 = (void **)(v41 + 16 * v42);
          goto LABEL_62;
        }
      }
      v40 = (const llvm::SCEV *)(v18 + 32);
    }
  }
  v117 = v40;
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&__s1, (llvm::APInt *)&v127);
  v48 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)v9, (llvm::LLVMContext *)&v127, v47);
  __src = v131;
  LODWORD(v131[0]) = 0;
  *(_QWORD *)((char *)v131 + 4) = v48;
  v130 = 0x2000000003;
  v116 = v9 + 832;
  v49 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v109 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v109 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v109;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v50 = __ROR8__(*(_QWORD *)((char *)v131 + 4) + 12, 12);
  v51 = 0x9DDFEA08EB382D69 * (v131[0] ^ qword_1ED7EAC80 ^ v50);
  v52 = *(_QWORD *)(v9 + 832)
      + 8
      * ((*(_DWORD *)(v9 + 840) - 1) & ((-348639895
                                       * ((((0x9DDFEA08EB382D69 * (v50 ^ (v51 >> 47) ^ v51)) >> 32) >> 15) ^ (-348639895 * (v50 ^ (v51 >> 47) ^ v51)))) ^ HIDWORD(v131[0])));
  v53 = *(_QWORD *)v52;
  v132 = &v134;
  v133 = 0x2000000000;
  if (v53)
    v54 = (v53 & 1) == 0;
  else
    v54 = 0;
  if (v54)
  {
    v55 = v130;
    v56 = __src;
    v57 = 4 * v130;
    while (*(_QWORD *)(v53 + 16) != v55 || memcmp(v56, *(const void **)(v53 + 8), v57))
    {
      LODWORD(v133) = 0;
      v53 = *(_QWORD *)v53;
      if (v53)
        v58 = (v53 & 1) == 0;
      else
        v58 = 0;
      if (!v58)
        goto LABEL_78;
    }
  }
  else
  {
LABEL_78:
    v53 = sub_1C484358C(v9 + 864, 40, 3);
    v59 = sub_1C484358C(v9 + 864, 4 * v130, 2);
    if ((_DWORD)v130)
    {
      v60 = (int *)__src;
      v61 = 4 * v130;
      v62 = (_DWORD *)v59;
      do
      {
        v63 = *v60++;
        *v62++ = v63;
        v61 -= 4;
      }
      while (v61);
      v64 = v130;
    }
    else
    {
      v64 = 0;
    }
    *(_QWORD *)v53 = 0;
    *(_QWORD *)(v53 + 8) = v59;
    *(_QWORD *)(v53 + 16) = v64;
    *(_DWORD *)(v53 + 24) = 0x10000;
    *(_WORD *)(v53 + 28) = 0;
    *(_QWORD *)(v53 + 32) = v48;
    v65 = *(_DWORD *)(v9 + 844) + 1;
    v66 = *(_DWORD *)(v9 + 840);
    if (v65 > 2 * v66)
    {
      llvm::FoldingSetBase::GrowBucketCount(v116, 2 * v66, (uint64_t)off_1E813B300);
      v132 = &v134;
      v133 = 0x2000000000;
      v52 = *(_QWORD *)(v9 + 832)
          + 8
          * ((*(_DWORD *)(v9 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(v53 + 8), *(_QWORD *)(v53 + 8) + 4 * *(_QWORD *)(v53 + 16)));
      if (v132 != &v134)
        free(v132);
      v65 = *(_DWORD *)(v9 + 844) + 1;
    }
    *(_DWORD *)(v9 + 844) = v65;
    v67 = *(_QWORD *)v52;
    if (!*(_QWORD *)v52)
      v67 = v52 | 1;
    *(_QWORD *)v53 = v67;
    *(_QWORD *)v52 = v53;
    v56 = __src;
  }
  if (v56 != v131)
    free(v56);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&__s1, (llvm::APInt *)&v121);
  v69 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)v9, (llvm::LLVMContext *)&v121, v68);
  __src = v131;
  LODWORD(v131[0]) = 0;
  *(_QWORD *)((char *)v131 + 4) = v69;
  v130 = 0x2000000003;
  v70 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v110 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v110 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v110;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v71 = __ROR8__(*(_QWORD *)((char *)v131 + 4) + 12, 12);
  v72 = 0x9DDFEA08EB382D69 * (v131[0] ^ qword_1ED7EAC80 ^ v71);
  v73 = *(_QWORD *)(v9 + 832)
      + 8
      * ((*(_DWORD *)(v9 + 840) - 1) & ((-348639895
                                       * ((((0x9DDFEA08EB382D69 * (v71 ^ (v72 >> 47) ^ v72)) >> 32) >> 15) ^ (-348639895 * (v71 ^ (v72 >> 47) ^ v72)))) ^ HIDWORD(v131[0])));
  v74 = *(_QWORD *)v73;
  v132 = &v134;
  v133 = 0x2000000000;
  if (v74)
    v75 = (v74 & 1) == 0;
  else
    v75 = 0;
  if (v75)
  {
    v76 = v130;
    v77 = __src;
    v78 = 4 * v130;
    while (*(_QWORD *)(v74 + 16) != v76 || memcmp(v77, *(const void **)(v74 + 8), v78))
    {
      LODWORD(v133) = 0;
      v74 = *(_QWORD *)v74;
      if (v74)
        v79 = (v74 & 1) == 0;
      else
        v79 = 0;
      if (!v79)
        goto LABEL_101;
    }
    v89 = v117;
    v88 = v118;
  }
  else
  {
LABEL_101:
    v74 = sub_1C484358C(v9 + 864, 40, 3);
    v80 = sub_1C484358C(v9 + 864, 4 * v130, 2);
    if ((_DWORD)v130)
    {
      v81 = (int *)__src;
      v82 = 4 * v130;
      v83 = (_DWORD *)v80;
      do
      {
        v84 = *v81++;
        *v83++ = v84;
        v82 -= 4;
      }
      while (v82);
      v85 = v130;
    }
    else
    {
      v85 = 0;
    }
    *(_QWORD *)v74 = 0;
    *(_QWORD *)(v74 + 8) = v80;
    *(_QWORD *)(v74 + 16) = v85;
    *(_DWORD *)(v74 + 24) = 0x10000;
    *(_WORD *)(v74 + 28) = 0;
    *(_QWORD *)(v74 + 32) = v69;
    v86 = *(_DWORD *)(v9 + 844) + 1;
    v87 = *(_DWORD *)(v9 + 840);
    if (v86 > 2 * v87)
    {
      llvm::FoldingSetBase::GrowBucketCount(v116, 2 * v87, (uint64_t)off_1E813B300);
      v132 = &v134;
      v133 = 0x2000000000;
      v73 = *(_QWORD *)(v9 + 832)
          + 8
          * ((*(_DWORD *)(v9 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(v74 + 8), *(_QWORD *)(v74 + 8) + 4 * *(_QWORD *)(v74 + 16)));
      if (v132 != &v134)
        free(v132);
      v86 = *(_DWORD *)(v9 + 844) + 1;
    }
    v89 = v117;
    v88 = v118;
    *(_DWORD *)(v9 + 844) = v86;
    v90 = *(_QWORD *)v73;
    if (!*(_QWORD *)v73)
      v90 = v73 | 1;
    *(_QWORD *)v74 = v90;
    *(_QWORD *)v73 = v74;
    v77 = __src;
  }
  if (v77 != v131)
    free(v77);
  UMinExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUMinExpr((llvm::ScalarEvolution *)v9, v89, (const llvm::SCEV *)v74, 0);
  UMaxExpr = llvm::ScalarEvolution::getUMaxExpr((llvm::ScalarEvolution *)v9, (const llvm::SCEV *)v53, UMinExpr);
  v132 = v38;
  result = (uint64_t)sub_1C4F5A9A0(v119, (uint64_t *)&v132);
  *(_QWORD *)(result + 8) = UMaxExpr;
  if (v122 >= 0x41)
  {
    result = v121;
    if (v121)
      result = MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
  }
  if (v128 >= 0x41)
  {
    result = v127;
    if (v127)
      result = MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
  }
  v93 = *(unsigned int *)(v88 + 8);
  if (v93 >= *(_DWORD *)(v88 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v88, v88 + 16, v93 + 1, 8);
    LODWORD(v93) = *(_DWORD *)(v88 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v88 + 8 * v93) = v38;
  ++*(_DWORD *)(v88 + 8);
  if (v126 >= 0x41)
  {
    result = (uint64_t)__s2;
    if (__s2)
      result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  }
  if (v124 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      return MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C4F5185C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

void sub_1C4F5213C()
{
  uint64_t v0;
  llvm::ScalarEvolution **v1;
  const llvm::SCEV *v2;
  llvm::ScalarEvolution *v3;
  uint64_t v4;

  v2 = (const llvm::SCEV *)sub_1C4F5185C((uint64_t)v1, *(_QWORD *)(v0 + 32));
  if (v2 != *(const llvm::SCEV **)(v0 + 32))
  {
    v3 = *v1;
    llvm::ScalarEvolution::getLosslessPtrToIntExpr(*v1, v2);
    if (*(_WORD *)(v4 + 24) != 15)
    {
      llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)v3, v4);
      JUMPOUT(0x1C4F51DD4);
    }
  }
  JUMPOUT(0x1C4F51EB0);
}

uint64_t sub_1C4F52194(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    v5 = a2;
    v7 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v2 + 1, 4);
    a2 = v5;
    result = v7;
    LODWORD(v2) = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v2) = a2;
  v3 = *(_DWORD *)(result + 12);
  v4 = (*(_DWORD *)(result + 8) + 1);
  *(_DWORD *)(result + 8) = v4;
  if (v4 >= v3)
  {
    v6 = HIDWORD(a2);
    v8 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v4 + 1, 4);
    HIDWORD(a2) = v6;
    result = v8;
    LODWORD(v4) = *(_DWORD *)(v8 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v4) = HIDWORD(a2);
  ++*(_DWORD *)(result + 8);
  return result;
}

void sub_1C4F52234(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1C4F52288()
{
  JUMPOUT(0x1C4F52274);
}

void sub_1C4F52294()
{
  JUMPOUT(0x1C4F5228CLL);
}

uint64_t sub_1C4F5229C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;

  if (*(_BYTE *)(**(_QWORD **)(v30 + 32) + 8) != 15)
    return v31;
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int *)(v32 + 24);
  if (!(_DWORD)v34)
    goto LABEL_8;
  LODWORD(v35) = (v34 - 1) & ((v31 >> 4) ^ (v31 >> 9));
  v36 = (uint64_t *)(v33 + 16 * v35);
  v37 = *v36;
  if (*v36 != v31)
  {
    v38 = 1;
    while (v37 != -4096)
    {
      v39 = v35 + v38++;
      v35 = v39 & (v34 - 1);
      v37 = *(_QWORD *)(v33 + 16 * v35);
      if (v37 == v31)
      {
        v36 = (uint64_t *)(v33 + 16 * v35);
        goto LABEL_9;
      }
    }
LABEL_8:
    v36 = (uint64_t *)(v33 + 16 * v34);
  }
LABEL_9:
  if (v36 == (uint64_t *)(v33 + 16 * v34))
    __asm { BR              X10 }
  return v36[1];
}

_QWORD *sub_1C4F52BE0(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4F52D0C(a1, 2 * v7);
    v8 = *a3;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a4;
    if (*a3 == *a4)
      goto LABEL_10;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v15 = 0;
      else
        v15 = v11 == -8192;
      if (v15)
        v12 = a4;
      v16 = v10 + v13++;
      v10 = v16 & v9;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a4;
      if (v8 == *a4)
        goto LABEL_10;
    }
    if (v12)
      a4 = v12;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C4F52D0C(a1, v7);
    v17 = 0;
    sub_1C4DA97DC((uint64_t *)a1, a3, &v17);
    a4 = v17;
  }
  v8 = *a4;
LABEL_10:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4F52D0C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F52DC4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F52DC4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v15 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_12;
          }
          if (v12)
            v10 = v12;
        }
LABEL_12:
        *v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

unint64_t sub_1C4F52E98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned int v27;

  if (a4 == a5)
    goto LABEL_31;
  v8 = *(unsigned __int16 *)(a4 + 24);
  v9 = *(unsigned __int16 *)(a5 + 24);
  v10 = v8 - v9;
  if ((_DWORD)v8 != v9)
  {
    v27 = v10 & 0xFFFFFF00;
    goto LABEL_34;
  }
  v13 = (_QWORD *)(a1 + 8);
  v12 = *(_QWORD **)(a1 + 8);
  if (v12)
  {
    v14 = (_QWORD *)(a1 + 8);
    do
    {
      v15 = v12[6];
      v16 = v15 >= a4;
      if (v15 >= a4)
        v17 = v12;
      else
        v17 = v12 + 1;
      if (v16)
        v14 = v12;
      v12 = (_QWORD *)*v17;
    }
    while (*v17);
    if (v14 != v13 && v14[6] <= a4)
    {
      v18 = sub_1C4F538BC((uint64_t)(v14 + 4));
      if (v18)
      {
        v19 = v18;
        v20 = (_QWORD *)*v13;
        if (!*v13)
          goto LABEL_26;
        v21 = v13;
        do
        {
          v22 = v20[6];
          v23 = v22 >= a5;
          if (v22 >= a5)
            v24 = v20;
          else
            v24 = v20 + 1;
          if (v23)
            v21 = v20;
          v20 = (_QWORD *)*v24;
        }
        while (*v24);
        if (v21 != v13 && v21[6] <= a5)
          v25 = sub_1C4F538BC((uint64_t)(v21 + 4));
        else
LABEL_26:
          v25 = 0;
        if (v25 == v19)
        {
LABEL_31:
          LOBYTE(v10) = 0;
          v27 = 0;
LABEL_34:
          v26 = 1;
          return v27 | v10 | ((unint64_t)v26 << 32);
        }
      }
    }
  }
  if (dword_1ED7F3938 >= a7)
    __asm { BR              X9 }
  v26 = 0;
  LOBYTE(v10) = 0;
  v27 = 0;
  return v27 | v10 | ((unint64_t)v26 << 32);
}

uint64_t sub_1C4F53318(uint64_t **a1, uint64_t *a2, uint64_t ***a3, uint64_t ***a4, unsigned int a5)
{
  uint64_t result;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  BOOL v15;
  uint64_t **v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t **v23;
  _BYTE *v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t **v35;
  int v36;
  int v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t **v49;
  int v50;
  int v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t **v60;
  int v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t **v64;
  _BYTE *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t ***v68;
  char *v69;
  size_t v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ****v76;
  uint64_t ***v77;
  int v78;
  int v79;
  uint64_t ***v80;
  char *v81;
  size_t v82;
  size_t v83;
  size_t v84;
  int v85;

  result = 0;
  if (a3 == a4 || dword_1ED7F3AB8 < a5)
    return result;
  v12 = a1 + 1;
  v11 = a1[1];
  if (v11)
  {
    v13 = a1 + 1;
    do
    {
      v14 = v11[6];
      v15 = v14 >= (unint64_t)a3;
      if (v14 >= (unint64_t)a3)
        v16 = (uint64_t **)v11;
      else
        v16 = (uint64_t **)(v11 + 1);
      if (v15)
        v13 = (uint64_t **)v11;
      v11 = *v16;
    }
    while (*v16);
    if (v13 != v12 && v13[6] <= (uint64_t *)a3)
    {
      v17 = sub_1C4F53904((_BYTE *)v13 + 32);
      if (v17)
      {
        v18 = v17;
        v19 = *v12;
        if (!*v12)
          goto LABEL_26;
        v20 = (uint64_t *)(a1 + 1);
        do
        {
          v21 = v19[6];
          v22 = v21 >= (unint64_t)a4;
          if (v21 >= (unint64_t)a4)
            v23 = (uint64_t **)v19;
          else
            v23 = (uint64_t **)(v19 + 1);
          if (v22)
            v20 = v19;
          v19 = *v23;
        }
        while (*v23);
        if (v20 != (uint64_t *)v12 && v20[6] <= (unint64_t)a4)
          v24 = sub_1C4F53904((_BYTE *)v20 + 32);
        else
LABEL_26:
          v24 = 0;
        if (v24 == v18)
          return 0;
      }
    }
  }
  v25 = *((unsigned __int8 *)*a3 + 8);
  v26 = *((unsigned __int8 *)*a4 + 8);
  if ((v25 == 15) != (v26 == 15))
    return (v25 == 15) - (v26 == 15);
  v27 = *((unsigned __int8 *)a3 + 16);
  v28 = *((unsigned __int8 *)a4 + 16);
  result = v27 - v28;
  if (v27 == v28)
  {
    if (v27 == 21)
      return (*((_DWORD *)a3 + 8) - *((_DWORD *)a4 + 8));
    if (v27 > 3)
    {
      if (v27 >= 0x1C)
      {
        v29 = a3[5];
        v30 = a4[5];
        if (v29 == v30)
          goto LABEL_66;
        v31 = *((_DWORD *)a2 + 4);
        if (!v31)
          goto LABEL_66;
        v32 = *a2;
        v33 = v31 - 1;
        v34 = v33 & ((v29 >> 4) ^ (v29 >> 9));
        v35 = *(uint64_t ***)(*a2 + 16 * v34);
        if (v29 == v35)
        {
LABEL_41:
          v38 = *(_QWORD **)(v32 + 16 * v34 + 8);
          if (v38)
          {
            v39 = 0;
            do
            {
              v38 = (_QWORD *)*v38;
              ++v39;
            }
            while (v38);
LABEL_56:
            v48 = v33 & ((v30 >> 4) ^ (v30 >> 9));
            v49 = *(uint64_t ***)(v32 + 16 * v48);
            if (v30 == v49)
            {
LABEL_60:
              v52 = *(_QWORD **)(v32 + 16 * v48 + 8);
              if (v52)
              {
                v53 = 0;
                do
                {
                  v52 = (_QWORD *)*v52;
                  ++v53;
                }
                while (v52);
LABEL_65:
                result = (v39 - v53);
                if (v39 != v53)
                  return result;
LABEL_66:
                v54 = *((_DWORD *)a3 + 5) & 0x7FFFFFF;
                v55 = *((_DWORD *)a4 + 5) & 0x7FFFFFF;
                result = (v54 - v55);
                if ((_DWORD)v54 != v55)
                  return result;
                if ((_DWORD)v54)
                {
                  v56 = 0;
                  v57 = a5 + 1;
                  v58 = 32 * v54;
                  while (1)
                  {
                    v59 = *((_DWORD *)a3 + 5);
                    v60 = (v59 & 0x40000000) != 0 ? *(a3 - 1) : (uint64_t **)&a3[-4 * (v59 & 0x7FFFFFF)];
                    v61 = *((_DWORD *)a4 + 5);
                    v62 = (v61 & 0x40000000) != 0 ? *(a4 - 1) : (uint64_t **)&a4[-4 * (v61 & 0x7FFFFFF)];
                    result = sub_1C4F53318(a1, a2, v60[v56 / 8], v62[v56 / 8], v57);
                    if ((_DWORD)result)
                      return result;
                    v56 += 32;
                    if (v58 == v56)
                      goto LABEL_77;
                  }
                }
                goto LABEL_77;
              }
            }
            else
            {
              v50 = 1;
              while (v49 != (uint64_t **)-4096)
              {
                v51 = v48 + v50++;
                v48 = v51 & v33;
                v49 = *(uint64_t ***)(v32 + 16 * v48);
                if (v30 == v49)
                  goto LABEL_60;
              }
            }
            v53 = 0;
            goto LABEL_65;
          }
        }
        else
        {
          v36 = 1;
          while (v35 != (uint64_t **)-4096)
          {
            v37 = v34 + v36++;
            v34 = v37 & v33;
            v35 = *(uint64_t ***)(v32 + 16 * v34);
            if (v29 == v35)
              goto LABEL_41;
          }
        }
        v39 = 0;
        goto LABEL_56;
      }
LABEL_77:
      v63 = sub_1C4F5394C(a1, (unint64_t)a3, (uint64_t *)a3);
      v64 = sub_1C4F5394C(a1, (unint64_t)a4, (uint64_t *)a4);
      if (v12 == v63)
        v65 = 0;
      else
        v65 = sub_1C4F53904((_BYTE *)v63 + 32);
      if (v12 == v64)
        v66 = 0;
      else
        v66 = (unint64_t)sub_1C4F53904((_BYTE *)v64 + 32);
      if (v65 != (_BYTE *)v66)
      {
        result = 0;
        *(_QWORD *)(*(_QWORD *)v65 + 8) = *(_QWORD *)(*(_QWORD *)v65 + 8) & 1 | v66;
        v67 = *(_QWORD *)(v66 + 8);
        *(_QWORD *)v65 = *(_QWORD *)v66;
        *(_QWORD *)v66 = v65;
        *(_QWORD *)(v66 + 8) = v67 & 0xFFFFFFFFFFFFFFFELL;
        return result;
      }
      return 0;
    }
    if (((_DWORD)a3[4] & 0xFu) - 9 > 0xFFFFFFFD || ((_DWORD)a4[4] & 0xFu) - 9 > 0xFFFFFFFD)
      goto LABEL_77;
    if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
    {
      v70 = 0;
      v69 = &byte_1C871356D;
LABEL_85:
      if ((*((_BYTE *)a4 + 23) & 0x10) == 0)
      {
        v82 = 0;
        v81 = &byte_1C871356D;
LABEL_94:
        if (v82 >= v70)
          v84 = v70;
        else
          v84 = v82;
        if (v84)
        {
          v85 = memcmp(v69, v81, v84);
          if (v85)
            return (v85 >> 31) | 1u;
        }
        if (v70 != v82)
        {
          if (v70 < v82)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return 0;
      }
      v72 = ***a4;
      v73 = *(_QWORD *)(v72 + 152);
      v74 = *(unsigned int *)(v72 + 168);
      if ((_DWORD)v74)
      {
        LODWORD(v75) = (v74 - 1) & ((a4 >> 4) ^ (a4 >> 9));
        v76 = (uint64_t ****)(v73 + 16 * v75);
        v77 = *v76;
        if (*v76 == a4)
        {
LABEL_93:
          v80 = v76[1];
          v83 = (size_t)*v80;
          v81 = (char *)(v80 + 2);
          v82 = v83;
          goto LABEL_94;
        }
        v78 = 1;
        while (v77 != (uint64_t ***)-4096)
        {
          v79 = v75 + v78++;
          v75 = v79 & (v74 - 1);
          v77 = *(uint64_t ****)(v73 + 16 * v75);
          if (v77 == a4)
          {
            v76 = (uint64_t ****)(v73 + 16 * v75);
            goto LABEL_93;
          }
        }
      }
      v76 = (uint64_t ****)(v73 + 16 * v74);
      goto LABEL_93;
    }
    v40 = ***a3;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == a3)
      {
LABEL_84:
        v68 = v44[1];
        v71 = (size_t)*v68;
        v69 = (char *)(v68 + 2);
        v70 = v71;
        goto LABEL_85;
      }
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == a3)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_84;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
    goto LABEL_84;
  }
  return result;
}

uint64_t sub_1C4F53810(uint64_t **a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = sub_1C4F5394C(a1, (unint64_t)a2, a2);
  v6 = sub_1C4F5394C(a1, *a3, (uint64_t *)*a3);
  v7 = a1 + 1;
  if (v7 == v5)
    v8 = 0;
  else
    v8 = sub_1C4F538BC((uint64_t)(v5 + 4));
  if (v7 == v6)
    result = 0;
  else
    result = sub_1C4F538BC((uint64_t)(v6 + 4));
  if (v8 != result)
  {
    *(_QWORD *)(*(_QWORD *)v8 + 8) = *(_QWORD *)(*(_QWORD *)v8 + 8) & 1 | result;
    v10 = *(_QWORD *)(result + 8);
    *(_QWORD *)v8 = *(_QWORD *)result;
    *(_QWORD *)result = v8;
    *(_QWORD *)(result + 8) = v10 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

uint64_t sub_1C4F538BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = a1;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v3 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)v1 + 8) & 1) == 0)
    {
      v3 = sub_1C4F538BC();
      *(_QWORD *)v1 = v3;
    }
    return v3;
  }
  return v1;
}

_BYTE *sub_1C4F53904(_BYTE *result)
{
  _QWORD *v1;

  if ((result[8] & 1) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)result + 8) & 1) != 0)
    {
      return *(_BYTE **)result;
    }
    else
    {
      v1 = result;
      result = (_BYTE *)sub_1C4F53904(*(_QWORD *)result);
      *v1 = result;
    }
  }
  return result;
}

uint64_t **sub_1C4F5394C(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[6];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    v7[4] = (uint64_t *)(v7 + 4);
    v7[5] = (uint64_t *)1;
    v7[6] = a3;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

unint64_t sub_1C4F53A1C(unint64_t result, unint64_t *a2, uint64_t **a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t *v30;
  BOOL v31;
  unsigned int v32;
  unint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  uint64_t v37;

  if (a4 >= 2)
  {
    v8 = (unint64_t *)result;
    if (a4 == 2)
    {
      result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], *(a2 - 1), *(_QWORD *)result, (*a3)[3], 0);
      if (HIDWORD(result))
        v9 = (result & 0x80000000) == 0;
      else
        v9 = 1;
      if (!v9)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v23 = a5;
      v24 = a4 >> 1;
      v25 = (unint64_t *)(result + 8 * (a4 >> 1));
      v26 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C4F53D0C(result, v25, a3, v26, a5);
        v27 = &v23[v24];
        result = sub_1C4F53D0C((unint64_t)&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v27);
        v28 = &v23[a4];
        v29 = v27;
        while (v29 != v28)
        {
          v30 = v29;
          result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], *v29, *v23, (*a3)[3], 0);
          if (HIDWORD(result))
            v31 = (result & 0x80000000) != 0;
          else
            v31 = 0;
          v32 = !v31;
          if (v32)
            v33 = v23;
          else
            v33 = v30;
          v23 += v32;
          v29 = &v30[v32 ^ 1];
          *v8++ = *v33;
          if (v23 == v27)
          {
            if (v29 != v28)
            {
              v34 = 0;
              v35 = HIDWORD(result) == 0;
              if (v35 <= ((result & 0x80000000) == 0))
                LOBYTE(v35) = (result & 0x80000000) == 0;
              v36 = &v30[((_BYTE)v35 + 1) & 1];
              do
              {
                v8[v34] = v36[v34];
                ++v34;
              }
              while (&v36[v34] != v28);
            }
            return result;
          }
        }
        if (v23 != v27)
        {
          v37 = 0;
          do
          {
            v8[v37] = v23[v37];
            ++v37;
          }
          while (&v23[v37] != v27);
        }
      }
      else
      {
        sub_1C4F53A1C(result, v25, a3, v26, a5, a6);
        sub_1C4F53A1C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23, a6);
        return sub_1C4F53FA8((unint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v23, a6);
      }
    }
    else if ((unint64_t *)result != a2)
    {
      v12 = (unint64_t *)(result + 8);
      if ((unint64_t *)(result + 8) != a2)
      {
        v13 = 0;
        v14 = (unint64_t *)result;
        do
        {
          v16 = *v14;
          v15 = v14[1];
          v14 = v12;
          result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], v15, v16, (*a3)[3], 0);
          if (HIDWORD(result))
            v17 = (result & 0x80000000) == 0;
          else
            v17 = 1;
          if (!v17)
          {
            v18 = *v14;
            v19 = v13;
            while (1)
            {
              *(unint64_t *)((char *)v8 + v19 + 8) = *(unint64_t *)((char *)v8 + v19);
              if (!v19)
                break;
              result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], v18, *(unint64_t *)((char *)v8 + v19 - 8), (*a3)[3], 0);
              v19 -= 8;
              if (HIDWORD(result))
                v20 = (result & 0x80000000) == 0;
              else
                v20 = 1;
              if (v20)
              {
                v21 = (unint64_t *)((char *)v8 + v19 + 8);
                goto LABEL_25;
              }
            }
            v21 = v8;
LABEL_25:
            *v21 = v18;
          }
          v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

unint64_t sub_1C4F53D0C(unint64_t result, unint64_t *a2, uint64_t **a3, unint64_t a4, unint64_t *a5)
{
  unint64_t *v5;
  unint64_t *v7;
  unint64_t *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;

  if (a4)
  {
    v5 = a5;
    v7 = (unint64_t *)result;
    if (a4 == 1)
    {
LABEL_10:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], *(a2 - 1), *(_QWORD *)result, (*a3)[3], 0);
      v11 = HIDWORD(result) != 0;
      v12 = (result & 0x80000000) != 0;
      v13 = !v11 || !v12;
      if (v11 && v12)
        v14 = v10;
      else
        v14 = v7;
      *v5++ = *v14;
      if (v13)
        v7 = v10;
      goto LABEL_10;
    }
    if ((uint64_t)a4 > 8)
    {
      v25 = (unint64_t *)(result + 8 * (a4 >> 1));
      sub_1C4F53A1C(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      result = sub_1C4F53A1C(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        v27 = v26;
        result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], *v26, *v7, (*a3)[3], 0);
        if (HIDWORD(result) != 0 && (result & 0x80000000) != 0)
          v28 = v27;
        else
          v28 = v7;
        v26 = &v27[(HIDWORD(result) != 0) & ((result & 0x80000000) != 0)];
        v7 += HIDWORD(result) == 0 || (result & 0x80000000) == 0;
        *v5++ = *v28;
        if (v7 == v25)
        {
          if (v26 != a2)
          {
            v29 = 0;
            v30 = HIDWORD(result) != 0;
            if (v30 >= ((result >> 31) & 1))
              v30 = (result >> 31) & 1;
            v31 = &v27[v30];
            do
            {
              v5[v29] = v31[v29];
              ++v29;
            }
            while (&v31[v29] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        v32 = 0;
        do
        {
          v5[v32] = v7[v32];
          ++v32;
        }
        while (&v7[v32] != v25);
      }
    }
    else if ((unint64_t *)result != a2)
    {
      v15 = (unint64_t *)(result + 8);
      *a5 = *(_QWORD *)result;
      if ((unint64_t *)(result + 8) != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v18 = v17;
          v19 = *v17++;
          result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], *v15, v19, (*a3)[3], 0);
          if (HIDWORD(result))
            v20 = (result & 0x80000000) == 0;
          else
            v20 = 1;
          v21 = v17;
          if (!v20)
          {
            v18[1] = *v18;
            v21 = v5;
            if (v18 != v5)
            {
              v22 = v16;
              while (1)
              {
                v21 = (unint64_t *)((char *)v5 + v22);
                result = sub_1C4F52E98(**a3, (*a3)[1], *(_QWORD *)(*a3)[2], *v15, *(unint64_t *)((char *)v5 + v22 - 8), (*a3)[3], 0);
                if (!HIDWORD(result) || (result & 0x80000000) == 0)
                  break;
                *v21 = *(v21 - 1);
                v22 -= 8;
                if (!v22)
                {
                  v21 = v5;
                  break;
                }
              }
            }
          }
          v24 = *v15++;
          *v21 = v24;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

unint64_t sub_1C4F53FA8(unint64_t result, unint64_t *a2, unint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  int64_t v43;
  unint64_t *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  _BOOL4 v66;
  _BOOL4 v67;
  BOOL v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t *v71;
  BOOL v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t **v80;
  unint64_t *v81;
  uint64_t v82;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (unint64_t *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = sub_1C4F52E98(**a4, (*a4)[1], *(_QWORD *)(*a4)[2], *a2, *v15, (*a4)[3], 0);
      if (HIDWORD(result) && (result & 0x80000000) != 0)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v81 = a3;
    v82 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v75 = *v15;
        *v15 = *a2;
        *a2 = v75;
        return result;
      }
      v78 = a8;
      v79 = a7;
      v80 = a4;
      if (a5 >= 0)
        v26 = a5;
      else
        v26 = a5 + 1;
      v27 = a3;
      v20 = v26 >> 1;
      v21 = &v15[v26 >> 1];
      v19 = v27;
      if (v27 != a2)
      {
        v28 = *a4;
        v29 = v27 - a2;
        v19 = a2;
        do
        {
          v30 = &v19[v29 >> 1];
          v32 = *v30;
          v31 = v30 + 1;
          v33 = sub_1C4F52E98(*v28, v28[1], *(_QWORD *)v28[2], v32, *v21, v28[3], 0);
          v34 = HIDWORD(v33) != 0;
          v35 = (v33 & 0x80000000) != 0;
          if (v34 && v35)
            v29 += ~(v29 >> 1);
          else
            v29 >>= 1;
          if (v34 && v35)
            v19 = v31;
        }
        while (v29);
      }
      v18 = v19 - a2;
      a7 = v79;
    }
    else
    {
      if (v10 >= 0)
        v17 = v10;
      else
        v17 = v10 + 1;
      v18 = v17 >> 1;
      v19 = &a2[v17 >> 1];
      v20 = a2 - v15;
      if (a2 == v15)
      {
        v15 = a2;
        v21 = a2;
        a2 += v17 >> 1;
        goto LABEL_54;
      }
      v77 = v17 >> 1;
      v78 = a8;
      v21 = v15;
      do
      {
        v22 = &v21[v20 >> 1];
        v24 = *v22;
        v23 = v22 + 1;
        v25 = sub_1C4F52E98(**a4, (*a4)[1], *(_QWORD *)(*a4)[2], *v19, v24, (*a4)[3], 0);
        if (HIDWORD(v25) != 0 && (v25 & 0x80000000) != 0)
        {
          v20 >>= 1;
        }
        else
        {
          v21 = v23;
          v20 += ~(v20 >> 1);
        }
      }
      while (v20);
      v80 = a4;
      v20 = v21 - v15;
      v18 = v77;
    }
    a8 = v78;
    v10 = v82;
    if (v21 == a2)
    {
      v21 = a2;
      a2 = v19;
    }
    else if (a2 == v19)
    {
      v19 = a2;
      a2 = v21;
    }
    else if (v21 + 1 == a2)
    {
      v42 = *v21;
      v43 = (char *)v19 - (char *)a2;
      v44 = a2;
      v45 = (char *)v19 - (char *)a2;
      v46 = v18;
      memmove(v21, v44, v45);
      v18 = v46;
      a2 = (unint64_t *)((char *)v21 + v43);
      *(unint64_t *)((char *)v21 + v43) = v42;
      v10 = v82;
    }
    else
    {
      if (a2 + 1 == v19)
      {
        v49 = *(v19 - 1);
        a2 = v21 + 1;
        if (v19 - 1 != v21)
        {
          v50 = v18;
          memmove(v21 + 1, v21, (char *)(v19 - 1) - (char *)v21);
          v18 = v50;
        }
        *v21 = v49;
        a4 = v80;
        v10 = v82;
        goto LABEL_54;
      }
      v36 = a2 - v21;
      if (v36 != v19 - a2)
      {
        v51 = v19 - a2;
        v52 = a2 - v21;
        do
        {
          v53 = v52;
          v52 = v51;
          v51 = v53 % v51;
        }
        while (v51);
        a4 = v80;
        if (v52)
        {
          v54 = &v21[v52];
          do
          {
            v56 = *--v54;
            v55 = v56;
            v57 = &v54[v36];
            v58 = v54;
            do
            {
              v59 = v58;
              v58 = v57;
              *v59 = *v57;
              v60 = __OFSUB__(v36, v19 - v57);
              v62 = v36 - (v19 - v57);
              v61 = (v62 < 0) ^ v60;
              v57 = &v21[v62];
              if (v61)
                v57 = &v58[v36];
            }
            while (v57 != v54);
            *v58 = v55;
          }
          while (v54 != v21);
        }
        a2 = &v21[v19 - a2];
        goto LABEL_54;
      }
      v37 = 0;
      do
      {
        v38 = v21[v37];
        v21[v37] = a2[v37];
        v39 = (uint64_t)&v21[v37 + 1];
        a2[v37] = v38;
        v40 = (uint64_t)&a2[++v37];
      }
      while ((unint64_t *)v39 != a2 && v40 != (_QWORD)v19);
    }
    a4 = v80;
LABEL_54:
    a5 -= v20;
    v10 -= v18;
    if ((uint64_t)(v18 + v20) >= v10 + a5)
    {
      v47 = a5;
      v48 = v18;
      result = sub_1C4F53FA8(a2, v19, v81, a4, v47, v10, a7, a8);
      v19 = v21;
      v10 = v48;
      a5 = v20;
      a3 = a2;
    }
    else
    {
      result = sub_1C4F53FA8(v15, v21, a2, a4, v20, v18, a7, a8);
      v15 = a2;
      a3 = v81;
    }
    a2 = v19;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v70 = 0;
      do
      {
        a7[v70] = v15[v70];
        ++v70;
      }
      while (&v15[v70] != a2);
      if (v70 * 8)
      {
        v71 = a7;
        while (a2 != a3)
        {
          result = sub_1C4F52E98(**a4, (*a4)[1], *(_QWORD *)(*a4)[2], *a2, *v71, (*a4)[3], 0);
          if (HIDWORD(result))
            v72 = (result & 0x80000000) != 0;
          else
            v72 = 0;
          v73 = !v72;
          if (v73)
            v74 = v71;
          else
            v74 = a2;
          v71 += v73;
          a2 += v73 ^ 1;
          *v15++ = *v74;
          if (&a7[v70] == v71)
            return result;
        }
        return (unint64_t)memmove(v15, v71, (char *)a7 - (char *)v71 + v70 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v63 = 0;
    do
    {
      a7[v63] = a2[v63];
      ++v63;
    }
    while (&a2[v63] != a3);
    if (v63 * 8)
    {
      v64 = &a7[v63];
      v65 = a3 - 1;
      while (a2 != v15)
      {
        result = sub_1C4F52E98(**a4, (*a4)[1], *(_QWORD *)(*a4)[2], *(v64 - 1), *(a2 - 1), (*a4)[3], 0);
        v66 = HIDWORD(result) != 0;
        v67 = (result & 0x80000000) != 0;
        v68 = !v66 || !v67;
        if (v66 && v67)
          v69 = a2;
        else
          v69 = v64;
        if (v68)
          --v64;
        else
          --a2;
        *v65-- = *(v69 - 1);
        if (v64 == a7)
          return result;
      }
      if (v64 != a7)
      {
        v76 = 0;
        do
        {
          v65[v76] = v64[v76 - 1];
          --v76;
        }
        while (&v64[v76] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1C4F54554(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

uint64_t *sub_1C4F545F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C4F54728(a1, v6);
      v16 = 0;
      sub_1C4F54554(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
  }
  else
  {
    sub_1C4F54728(a1, 2 * v6);
    v7 = *a2;
    v8 = *(_DWORD *)(a1 + 16) - 1;
    v9 = ((*a2 >> 4) ^ (*a2 >> 9)) & v8;
    a3 = (uint64_t *)(*(_QWORD *)a1 + 24 * v9);
    v10 = *a3;
    if (*a2 == *a3)
      goto LABEL_8;
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v14 = 0;
      else
        v14 = v10 == -8192;
      if (v14)
        v11 = a3;
      v15 = v9 + v12++;
      v9 = v15 & v8;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 24 * v9);
      v10 = *a3;
      if (v7 == *a3)
        goto LABEL_8;
    }
    if (v11)
      a3 = v11;
  }
  v7 = *a3;
LABEL_8:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4F54728(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B267C(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void *sub_1C4F547EC(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  __int16 v6;
  uint64_t v7;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    v6 = *(_WORD *)(a2 + 24);
    **(_BYTE **)a1 |= v6 == 0;
    if ((v6 & 0xFFFE) == 4)
    {
      v7 = *(unsigned int *)(a1 + 16);
      if (v7 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v7 + 1, 8);
        LODWORD(v7) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t sub_1C4F54880(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v10 = a2;
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)v10;
      }
      *(_QWORD *)a1 = v4;
      v12 = v10;
      v13 = *(_QWORD *)(v10 + 8);
      v7 = (_DWORD *)(v10 + 8);
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)v12 = v5;
      *(_DWORD *)(v12 + 12) = 0;
      goto LABEL_7;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 8 * v6);
LABEL_6:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_7:
      *v7 = 0;
      return a1;
    }
    v15 = (_QWORD *)a2;
    v16 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v8)
      {
        memmove(*(void **)a1, v4, 8 * v8);
LABEL_15:
        v14 = *v7;
        if (v16 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v16), (const void *)(*v15 + 8 * v16), *v15 + 8 * v14 - (*v15 + 8 * v16));
        goto LABEL_6;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6, 8);
    }
    v16 = 0;
    goto LABEL_15;
  }
  return a1;
}

uint64_t sub_1C4F549AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t SequentialMinMaxExpr;
  void *v8;
  uint64_t v9;
  _QWORD v10[7];

  v2 = a2;
  v10[6] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (*((unsigned __int16 *)a1 + 4) == (_DWORD)v4 || *((unsigned __int16 *)a1 + 5) == (_DWORD)v4)
  {
    v8 = v10;
    v9 = 0x600000000;
    if (sub_1C4F1A634(a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), &v8))
    {
      if ((_DWORD)v9)
      {
        v5 = *a1;
        if (*(_WORD *)(v2 + 24) == 12)
          SequentialMinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(v5, v4, &v8);
        else
          SequentialMinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(v5, v4, &v8);
        v2 = SequentialMinMaxExpr;
      }
      else
      {
        v2 = 0;
      }
    }
    if (v8 != v10)
      free(v8);
  }
  return v2;
}

_QWORD *sub_1C4F54AB0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;

  a1[1] = 2;
  v9 = a1 + 1;
  v9[3] = 0;
  v9[4] = a2;
  v9[5] = a3;
  *((_DWORD *)v9 + 12) = 65550;
  *((_WORD *)v9 + 26) = 0;
  v9[1] = 0;
  v9[2] = a4;
  if (a4 != -8192 && a4 != -4096 && a4)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v9);
  *a1 = off_1E813B258;
  a1[8] = a5;
  a1[9] = a6;
  return a1;
}

uint64_t sub_1C4F54B2C(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_7;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
LABEL_6:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_7:
      *v6 = 0;
      return a1;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v9 = v15;
      a2 = v17;
LABEL_12:
      v10 = *v6;
      if (v9 != v10)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
      goto LABEL_6;
    }
    v9 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C4F54C64(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  BOOL v11;
  int v12;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 > 0x1B)
    v3 = v2 - 28;
  else
    v3 = *(unsigned __int16 *)(a2 + 18);
  *(_DWORD *)result = v3;
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD **)(a2 - 8);
  else
    v5 = (_QWORD *)(a2 - 32 * (v4 & 0x7FFFFFF));
  *(_QWORD *)(result + 8) = *v5;
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a2 - 8);
  else
    v7 = a2 - 32 * (v6 & 0x7FFFFFF);
  *(_QWORD *)(result + 16) = *(_QWORD *)(v7 + 32);
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return result;
    v8 = *(unsigned __int16 *)(a2 + 18) - 13;
  }
  else
  {
    v8 = v2 - 41;
  }
  HIDWORD(v10) = v8;
  LODWORD(v10) = v8;
  v9 = v10 >> 1;
  v11 = v9 > 6;
  v12 = (1 << v9) & 0x47;
  if (!v11 && v12 != 0)
  {
    *(_BYTE *)(result + 24) = (*(_BYTE *)(a2 + 17) & 4) != 0;
    *(_BYTE *)(result + 25) = (*(_BYTE *)(a2 + 17) & 2) != 0;
  }
  return result;
}

uint64_t sub_1C4F54D24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

unint64_t sub_1C4F55764(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 40) == a2)
    return llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)a1, (llvm::Type *)(*****(_QWORD *****)a1 + 1888), *(unsigned __int8 *)(a1 + 48), 0);
  else
    return 0;
}

uint64_t sub_1C4F557B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

uint64_t sub_1C4F56068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

_QWORD *sub_1C4F56908(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  char v4;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v4)
    __asm { BR              X10 }
  return result;
}

void sub_1C4F56980()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(v1 + 8);
  if (v2)
  {
    v3 = *(_QWORD **)(v0 + 48);
    if (v3 == v2)
LABEL_7:
      JUMPOUT(0x1C4F56950);
    while (v2)
    {
      v2 = (_QWORD *)*v2;
      if (v2 == v3)
        goto LABEL_7;
    }
  }
  *(_WORD *)v1 = 1;
  JUMPOUT(0x1C4F56970);
}

_QWORD *sub_1C4F569F4(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = &v4[5 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          v17 = *a1 + 40 * v16;
          v18 = *(_QWORD *)v17;
          if (v14 != *(_QWORD *)v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = *a1 + 40 * (v22 & v15);
              v18 = *(_QWORD *)v17;
              if (v14 == *(_QWORD *)v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *(_QWORD *)v17 = v14;
          *(_DWORD *)(v17 + 16) = *((_DWORD *)v13 + 4);
          *(_QWORD *)(v17 + 8) = v13[1];
          *((_DWORD *)v13 + 4) = 0;
          *(_DWORD *)(v17 + 32) = *((_DWORD *)v13 + 8);
          *(_QWORD *)(v17 + 24) = v13[3];
          *((_DWORD *)v13 + 8) = 0;
          ++*((_DWORD *)a1 + 2);
          if (*((_DWORD *)v13 + 4) >= 0x41u)
          {
            v23 = v13[1];
            if (v23)
              MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
          }
        }
        v13 += 5;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 40 * v24;
    do
    {
      *result = -4096;
      result += 5;
      v25 -= 40;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1C4F56BDC(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 **v5;
  char *v6;
  unsigned int v7;
  _DWORD *v8;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  char *i;
  void *v39;
  unsigned int v40;
  __int128 *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;

  if ((__int128 **)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if (*a2 != (__int128 *)(a2 + 2))
    {
      v6 = *(char **)a1;
      v7 = *(_DWORD *)(a1 + 8);
      if (v7)
      {
        v44 = 88 * v7;
        do
        {
          v45 = *(void **)&v6[v44 - 56];
          if (v45 != *(void **)&v6[v44 - 64])
            free(v45);
          v44 -= 88;
        }
        while (v44);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *a2;
      v8 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (__int128 *)v5;
      *((_DWORD *)a2 + 3) = 0;
LABEL_7:
      *v8 = 0;
      return a1;
    }
    v8 = a2 + 1;
    v10 = *((unsigned int *)a2 + 2);
    v11 = *(unsigned int *)(a1 + 8);
    if (v11 >= v10)
    {
      v15 = *(char **)a1;
      if ((_DWORD)v10)
      {
        v16 = 88 * v10;
        do
        {
          v17 = *v4;
          *((_QWORD *)v15 + 2) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v15 = v17;
          if (v4 != (__int128 *)v15)
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v15 + 24), 4, (double *)v4 + 3);
          v4 = (__int128 *)((char *)v4 + 88);
          v15 += 88;
          v16 -= 88;
        }
        while (v16);
        LODWORD(v11) = *(_DWORD *)(a1 + 8);
        v18 = *(char **)a1;
      }
      else
      {
        v18 = *(char **)a1;
      }
      for (i = &v18[88 * v11]; i != v15; i -= 88)
      {
        v39 = (void *)*((_QWORD *)i - 7);
        if (v39 != *((void **)i - 8))
          free(v39);
      }
      *(_DWORD *)(a1 + 8) = v10;
      v40 = *((_DWORD *)a2 + 2);
      if (v40)
      {
        v41 = *a2;
        v42 = 88 * v40;
        do
        {
          v43 = *(void **)((char *)v41 + v42 - 56);
          if (v43 != *(void **)((char *)v41 + v42 - 64))
            free(v43);
          v42 -= 88;
        }
        while (v42);
      }
      goto LABEL_7;
    }
    if (*(_DWORD *)(a1 + 12) >= v10)
    {
      if ((_DWORD)v11)
      {
        v19 = *(char **)a1;
        v20 = 88 * v11;
        do
        {
          v21 = *v4;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v19 = v21;
          if (v4 != (__int128 *)v19)
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v19 + 24), 4, (double *)v4 + 3);
          v4 = (__int128 *)((char *)v4 + 88);
          v19 += 88;
          v20 -= 88;
        }
        while (v20);
        goto LABEL_30;
      }
    }
    else
    {
      if ((_DWORD)v11)
      {
        v12 = *(char **)a1;
        v13 = 88 * v11;
        do
        {
          v14 = *(void **)&v12[v13 - 56];
          if (v14 != *(void **)&v12[v13 - 64])
            free(v14);
          v13 -= 88;
        }
        while (v13);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C4F56EF4(a1, v10);
    }
    v11 = 0;
LABEL_30:
    v22 = *a2;
    v23 = *((unsigned int *)a2 + 2);
    if (v11 != v23)
    {
      v24 = *(char **)a1;
      v25 = 88 * v11;
      v26 = 88 * v23;
      do
      {
        v27 = (uint64_t)v22 + v25;
        v28 = &v24[v25];
        v29 = *(_QWORD *)((char *)v22 + v25 + 16);
        *(_OWORD *)v28 = *(__int128 *)((char *)v22 + v25);
        v30 = &v24[v25 + 56];
        *((_QWORD *)v28 + 2) = v29;
        *((_QWORD *)v28 + 3) = v30;
        v32 = *(_QWORD *)((char *)v22 + v25 + 24);
        v31 = *(_QWORD *)((char *)v22 + v25 + 32);
        if (v31 == v32)
        {
          *((_QWORD *)v28 + 4) = v30;
          v33 = *(unsigned int *)(v27 + 44);
          if ((_DWORD)v33)
            memmove(v30, *(const void **)(v27 + 32), 8 * v33);
        }
        else
        {
          *((_QWORD *)v28 + 4) = v31;
          *(_QWORD *)(v27 + 32) = v32;
        }
        v34 = (uint64_t)v22 + v25;
        v35 = &v24[v25];
        *((_QWORD *)v35 + 5) = *(_QWORD *)((char *)v22 + v25 + 40);
        *((_DWORD *)v35 + 12) = *(_DWORD *)((char *)v22 + v25 + 48);
        *(_QWORD *)(v34 + 40) = 4;
        *(_DWORD *)(v34 + 48) = 0;
        v24 += 88;
        v22 = (__int128 *)((char *)v22 + 88);
        v26 -= 88;
      }
      while (v25 != v26);
      v22 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v10;
    if (*v8)
    {
      v36 = 88 * *v8;
      do
      {
        v37 = *(void **)((char *)v22 + v36 - 56);
        if (v37 != *(void **)((char *)v22 + v36 - 64))
          free(v37);
        v36 -= 88;
      }
      while (v36);
    }
    goto LABEL_7;
  }
  return a1;
}

void sub_1C4F56EF4(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t *v4;
  unsigned int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  char *v16;
  unint64_t v17;

  v17 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 88, &v17);
  v4 = *(uint64_t **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v16 = v3;
    v7 = v3 + 56;
    v8 = 88 * v5;
    v9 = v4 + 3;
    do
    {
      v10 = *(_OWORD *)(v9 - 3);
      *(v7 - 5) = *(v9 - 1);
      *(_OWORD *)(v7 - 7) = v10;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v7 - 4), v7, 4, v9);
      v7 += 11;
      v9 += 11;
      v8 -= 88;
    }
    while (v8);
    v4 = *(uint64_t **)a1;
    v11 = *(_DWORD *)(a1 + 8);
    v3 = v16;
    if (v11)
    {
      v12 = *(uint64_t **)a1;
      v13 = 11 * v11;
      do
      {
        v14 = (void *)v12[v13 - 7];
        if (v14 != (void *)v12[v13 - 8])
          free(v14);
        v13 -= 11;
      }
      while (v13 * 8);
      v4 = *(uint64_t **)a1;
      v3 = v16;
    }
  }
  v6 = v17;
  if (v4 != (uint64_t *)(a1 + 16))
  {
    v15 = v3;
    free(v4);
    v3 = v15;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v6;
}

int *sub_1C4F56FF4(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  void **v11;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = a1 + 2;
    v4 = 4;
  }
  else
  {
    v4 = a1[4];
    if (!(_DWORD)v4)
      goto LABEL_13;
    v3 = (int *)*((_QWORD *)a1 + 1);
  }
  v5 = (void **)(v3 + 10);
  v6 = 96 * v4;
  do
  {
    v7 = (uint64_t)*(v5 - 5);
    v8 = v7 == -4 || v7 == -16;
    if (!v8 && *v5 != *(v5 - 1))
    {
      v10 = v6;
      v11 = v5;
      free(*v5);
      v6 = v10;
      v5 = v11;
    }
    v5 += 12;
    v6 -= 96;
  }
  while (v6);
  v2 = *a1;
LABEL_13:
  if ((v2 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
  return a1;
}

uint64_t sub_1C4F5709C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  const llvm::Function *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1C477672C(a2 + 56, *(_QWORD *)(a1 + 40));
  v7 = *(_QWORD *)(a2 + 64);
  v8 = 72;
  if (v7 == *(_QWORD *)(a2 + 56))
    v8 = 76;
  if (v4 == (_QWORD *)(v7 + 8 * *(unsigned int *)(a2 + v8)))
    return 0;
  if (*(_BYTE *)(a1 + 16) == 83)
    return **(_QWORD **)(a2 + 32) == *(_QWORD *)(a1 + 40);
  return sub_1C4F40698(a1, v5, v6);
}

uint64_t sub_1C4F57124(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C4F571B8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4F5726C(a1, v6);
  v8 = 0;
  sub_1C4F57124(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4F5726C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F57324(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F57324(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4F57124(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C4F573D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v27;

  if (dword_1ED7F3C38 < a4)
    return 0;
  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) == 0)
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (uint64_t *)(a1 - 32 * v7);
    if (!v7)
      return 0;
    goto LABEL_6;
  }
  v8 = *(uint64_t **)(a1 - 8);
  v7 = v6 & 0x7FFFFFF;
  if (v7)
  {
LABEL_6:
    v9 = 0;
    v10 = &v8[4 * v7];
    v11 = a4 + 1;
    while (1)
    {
      v12 = *v8;
      v13 = *(unsigned __int8 *)(*v8 + 16);
      if (v13 < 0x15)
      {
        v14 = v9;
        goto LABEL_25;
      }
      if (v13 < 0x1C || !sub_1C4F5709C(*v8, a2))
        return 0;
      if (*(_BYTE *)(v12 + 16) == 83)
      {
        v14 = v12;
        goto LABEL_23;
      }
      v15 = *(_DWORD *)(a3 + 16);
      if (v15)
      {
        v20 = *(_QWORD *)a3;
        v21 = v15 - 1;
        v22 = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        v23 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v22);
        if (v23 == v12)
        {
LABEL_31:
          v14 = *(_QWORD *)(v20 + 16 * v22 + 8);
          if (v14)
            goto LABEL_23;
        }
        else
        {
          v24 = 1;
          while (v23 != -4096)
          {
            v25 = v22 + v24++;
            v22 = v25 & v21;
            v23 = *(_QWORD *)(v20 + 16 * v22);
            if (v23 == v12)
              goto LABEL_31;
          }
        }
      }
      v14 = sub_1C4F573D0(v12, a2, a3, v11);
      v27 = 0;
      v16 = sub_1C4F575EC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v12, &v27);
      v17 = v27;
      if ((v16 & 1) == 0)
        break;
LABEL_22:
      v17[1] = v14;
      if (!v14)
        return v14;
LABEL_23:
      if (v9 && v9 != v14)
        return 0;
LABEL_25:
      v8 += 4;
      v9 = v14;
      if (v8 == v10)
        return v14;
    }
    v18 = *(_DWORD *)(a3 + 8);
    v19 = *(_DWORD *)(a3 + 16);
    if (4 * v18 + 4 < 3 * v19)
    {
      if (v19 + ~v18 - *(_DWORD *)(a3 + 12) > v19 >> 3)
        goto LABEL_19;
    }
    else
    {
      v19 *= 2;
    }
    sub_1C4F57680(a3, v19);
    v27 = 0;
    sub_1C4F575EC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v12, &v27);
    v17 = v27;
LABEL_19:
    ++*(_DWORD *)(a3 + 8);
    if (*v17 != -4096)
      --*(_DWORD *)(a3 + 12);
    *v17 = v12;
    v17[1] = 0;
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_1C4F575EC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C4F57680(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F57738(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F57738(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4F575EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_BYTE *sub_1C4F577E4(_BYTE *result, _QWORD *a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t *v42;
  unint64_t v43;
  char *v44;
  const void *v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  void *v53;
  int v54;
  unint64_t v55;
  size_t v56;
  const void *v57;
  _BYTE *v58;
  void *v59;
  int v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  void *v64;
  int v65;
  void *v66;
  int v67;
  void *v68;
  int v69;
  int v70;
  void *v71;
  unsigned int v72;
  uint64_t v73;
  void *__src;
  unsigned int v75;
  const void *v76;
  unsigned int v77;
  const void *v78;
  unsigned int v79;

  v2 = result;
  if (*(_WORD *)(*a2 + 24))
    v3 = 0;
  else
    v3 = *a2;
  if (*(_WORD *)(a2[1] + 24))
    v4 = 0;
  else
    v4 = a2[1];
  if (*(_WORD *)(a2[2] + 24))
    v5 = 0;
  else
    v5 = a2[2];
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6 || v5 == 0)
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 32);
    v9 = *(unsigned int *)(v8 + 32);
    v79 = v9;
    if (v9 > 0x40)
    {
      v11 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
      v10 = (void *)operator new[]();
      memcpy(v10, *(const void **)(v8 + 24), v11);
    }
    else
    {
      v10 = *(void **)(v8 + 24);
    }
    v78 = v10;
    v12 = *(_QWORD *)(v4 + 32);
    v13 = *(unsigned int *)(v12 + 32);
    v77 = v13;
    if (v13 > 0x40)
    {
      v15 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
      v14 = (void *)operator new[]();
      memcpy(v14, *(const void **)(v12 + 24), v15);
    }
    else
    {
      v14 = *(void **)(v12 + 24);
    }
    v76 = v14;
    v16 = *(_QWORD *)(v5 + 32);
    v17 = *(unsigned int *)(v16 + 32);
    v75 = v17;
    if (v17 > 0x40)
    {
      v19 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
      v18 = (void *)operator new[]();
      memcpy(v18, *(const void **)(v16 + 24), v19);
    }
    else
    {
      v18 = *(void **)(v16 + 24);
    }
    __src = v18;
    v60 = *(_DWORD *)(*(_QWORD *)(v3 + 32) + 32);
    v20 = v60 + 1;
    llvm::APInt::sext((llvm::APInt *)&__src, v60 + 1, (llvm::APInt *)&v62);
    if (v75 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    __src = v62;
    v75 = v63;
    llvm::APInt::sext((llvm::APInt *)&v76, v20, (llvm::APInt *)&v62);
    if (v77 >= 0x41 && v76)
      MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    v76 = v62;
    v77 = v63;
    llvm::APInt::sext((llvm::APInt *)&v78, v20, (llvm::APInt *)&v62);
    if (v79 >= 0x41 && v78)
      MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
    v78 = v62;
    v79 = v63;
    v61 = v75;
    if (v75 > 0x40)
    {
      v21 = (void *)operator new[]();
      memcpy(v21, __src, ((unint64_t)(v61 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v21 = __src;
    }
    v22 = v77;
    if (v77 > 0x40)
    {
      v26 = (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8;
      v27 = (void *)operator new[]();
      memcpy(v27, v76, v26);
      v28 = (unint64_t)(v22 + 63) >> 6;
      v25 = v27;
      llvm::APInt::tcMultiplyPart((llvm::APInt *)v27, (unint64_t *)v27, (const unint64_t *)2, 0, v28, v28, 0);
      v29 = 0;
      v30 = (v28 - 1);
      v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
      *((_QWORD *)v27 + v30) &= v31;
      v32 = (unint64_t *)v27;
      v33 = (unint64_t *)v21;
      do
      {
        v34 = *v33++;
        v35 = *v32 - v34;
        v36 = *v32 < v34;
        v37 = *v32 + ~v34;
        if (v29)
        {
          v29 = v37 >= *v32;
        }
        else
        {
          v37 = v35;
          v29 = v36;
        }
        *v32++ = v37;
        --v28;
      }
      while (v28);
      *((_QWORD *)v27 + v30) &= v31;
    }
    else
    {
      if (v77)
      {
        v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v77;
        v24 = v23 & (2 * (_QWORD)v76);
      }
      else
      {
        v24 = 0;
        v23 = 0;
      }
      v25 = (const void *)(v23 & (v24 - (_QWORD)v21));
    }
    v38 = (void *)v79;
    if (v79 > 0x40)
    {
      v43 = v79 + 63;
      v44 = (char *)operator new[]();
      v73 = (uint64_t)v44;
      memcpy(v44, v78, (v43 >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcMultiplyPart((llvm::APInt *)v44, (unint64_t *)v44, (const unint64_t *)2, 0, v43 >> 6, v43 >> 6, 0);
      v41 = v38;
      v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
      v42 = (uint64_t *)&v44[8 * (v43 >> 6) - 8];
      v39 = *v42;
    }
    else
    {
      v39 = 2 * (_QWORD)v78;
      v73 = 2 * (_QWORD)v78;
      v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
      v41 = (void *)v79;
      if (!v79)
        v40 = 0;
      v42 = &v73;
    }
    *v42 = v39 & v40;
    v45 = (const void *)v73;
    v72 = v60 + 1;
    if (v20 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v71, 2, 0);
    }
    else
    {
      if (v60 == -1)
        LOBYTE(v46) = 0;
      else
        v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v60;
      v71 = (void *)(v46 & 2);
    }
    v63 = v61;
    if (v61 > 0x40)
    {
      v47 = (void *)operator new[]();
      v62 = v47;
      memcpy(v47, v21, ((unint64_t)(v61 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v62 = v21;
      v47 = v21;
    }
    v65 = v22;
    if (v22 > 0x40)
    {
      v48 = (void *)operator new[]();
      v64 = v48;
      memcpy(v48, v25, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v64 = (void *)v25;
      v48 = (void *)v25;
    }
    v58 = v25;
    v59 = v21;
    if (v41 > 0x40)
    {
      v49 = (void *)operator new[]();
      v66 = v49;
      memcpy(v49, v45, (((unint64_t)v41 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v66 = (void *)v45;
      v49 = (void *)v45;
    }
    v50 = v22;
    v51 = v72;
    if (v72 > 0x40)
    {
      v57 = v45;
      v54 = (int)v41;
      v41 = v47;
      v55 = (((unint64_t)v72 + 63) >> 3) & 0x3FFFFFF8;
      v53 = (void *)operator new[]();
      v68 = v53;
      v52 = v71;
      v56 = v55;
      v47 = v41;
      LODWORD(v41) = v54;
      v45 = v57;
      memcpy(v53, v71, v56);
    }
    else
    {
      v52 = v71;
      v68 = v71;
      v53 = v71;
    }
    v70 = v60;
    *((_DWORD *)v2 + 2) = v61;
    *(_QWORD *)v2 = v47;
    *((_DWORD *)v2 + 6) = v50;
    *((_QWORD *)v2 + 2) = v48;
    v63 = 0;
    v65 = 0;
    *((_DWORD *)v2 + 10) = (_DWORD)v41;
    *((_QWORD *)v2 + 4) = v49;
    *((_DWORD *)v2 + 14) = v51;
    *((_QWORD *)v2 + 6) = v53;
    v67 = 0;
    v69 = 0;
    *((_DWORD *)v2 + 16) = v60;
    v2[72] = 1;
    sub_1C61B28A0((uint64_t)&v62);
    if (v51 >= 0x41 && v52)
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    if (v41 >= 0x41 && v45)
      MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
    result = v58;
    if (v50 >= 0x41 && v58)
      result = (_BYTE *)MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
    if (v61 >= 0x41 && v59)
      result = (_BYTE *)MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    if (v75 >= 0x41)
    {
      result = __src;
      if (__src)
        result = (_BYTE *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    }
    if (v77 >= 0x41)
    {
      result = v76;
      if (v76)
        result = (_BYTE *)MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    }
    if (v79 >= 0x41)
    {
      result = v78;
      if (v78)
        return (_BYTE *)MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *sub_1C4F57F6C(llvm::APInt *result, llvm::APInt *this, unsigned int a3)
{
  uint64_t v3;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;

  v3 = (uint64_t)result;
  if (*((_BYTE *)this + 16))
  {
    if (a3 < 2
      || (v6 = *((_DWORD *)this + 2), v6 <= a3)
      || (v6 > 0x40 ? (v7 = llvm::APInt::countLeadingZerosSlowCase(this)) : (v7 = v6 + __clz(*(_QWORD *)this) - 64),
          v6 - v7 > a3))
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 16) = 0;
      return (llvm::APInt *)sub_1C61B2960(v3, (uint64_t)this);
    }
    else
    {
      result = llvm::APInt::trunc(this, a3, (llvm::APInt *)&v8);
      *(_DWORD *)(v3 + 8) = v9;
      *(_QWORD *)v3 = v8;
      *(_BYTE *)(v3 + 16) = 1;
    }
  }
  else
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 16) = 0;
  }
  return result;
}

uint64_t *sub_1C4F58044(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *result;
  if (*(_DWORD *)(*result + 8) > 0x40u || *(_DWORD *)(a2 + 8) > 0x40u)
  {
    if (v4 != a2)
    {
      result = (uint64_t *)llvm::APInt::reallocate(*result, *(_DWORD *)(a2 + 8));
      v11 = *(unsigned int *)(v4 + 8);
      if (v11 <= 0x40)
        *(_QWORD *)v4 = *(_QWORD *)a2;
      else
        result = (uint64_t *)memcpy(*(void **)v4, *(const void **)a2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  }
  v5 = v3[1];
  if (*(_DWORD *)(v5 + 8) > 0x40u || *(_DWORD *)(a2 + 24) > 0x40u)
  {
    v6 = (const void **)(a2 + 16);
    if (v5 != a2 + 16)
    {
      result = (uint64_t *)llvm::APInt::reallocate(v3[1], *(_DWORD *)(a2 + 24));
      v12 = *(unsigned int *)(v5 + 8);
      if (v12 <= 0x40)
        *(_QWORD *)v5 = *v6;
      else
        result = (uint64_t *)memcpy(*(void **)v5, *v6, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 24);
  }
  v7 = v3[2];
  if (*(_DWORD *)(v7 + 8) > 0x40u || *(_DWORD *)(a2 + 40) > 0x40u)
  {
    v8 = (const void **)(a2 + 32);
    if (v7 != a2 + 32)
    {
      result = (uint64_t *)llvm::APInt::reallocate(v3[2], *(_DWORD *)(a2 + 40));
      v13 = *(unsigned int *)(v7 + 8);
      if (v13 <= 0x40)
        *(_QWORD *)v7 = *v8;
      else
        result = (uint64_t *)memcpy(*(void **)v7, *v8, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 40);
  }
  v9 = v3[3];
  if (*(_DWORD *)(v9 + 8) > 0x40u || *(_DWORD *)(a2 + 56) > 0x40u)
  {
    v10 = (const void **)(a2 + 48);
    if (v9 != a2 + 48)
    {
      result = (uint64_t *)llvm::APInt::reallocate(v3[3], *(_DWORD *)(a2 + 56));
      v14 = *(unsigned int *)(v9 + 8);
      if (v14 <= 0x40)
        *(_QWORD *)v9 = *v10;
      else
        result = (uint64_t *)memcpy(*(void **)v9, *v10, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 56);
  }
  *(_DWORD *)v3[4] = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t sub_1C4F58264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

void sub_1C4F58B0C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4F58B20(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E813B280;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C4F58B60(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E813B280;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4F58B88(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 8))
    return 0;
  v3 = **(_QWORD **)(a1 + 16);
  v4 = v3 + 40;
  v5 = *(_QWORD *)(v3 + 48);
  if (v5 == v3 + 40)
    return 0;
  v6 = *a2;
  v7 = **(_QWORD **)(a1 + 24);
  v8 = **(_QWORD **)(a1 + 32);
  while (1)
  {
    v13 = &v14;
    v14 = 0;
    v9 = v5 ? v5 - 24 : 0;
    v11 = 125;
    v12 = 0;
    if (sub_1C4F5E7F0((uint64_t)&v11, v9))
    {
      if ((llvm::ScalarEvolution::isImpliedCond(v2, v6, v7, v8, v14, 0, 0) & 1) != 0)
        break;
    }
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v4)
      return 0;
  }
  return 1;
}

void sub_1C4F58C60()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4F58C74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E813B2C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C4F58CBC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E813B2C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4F58CEC(uint64_t a1, unsigned int *a2)
{
  return llvm::ScalarEvolution::isImpliedCond(*(_QWORD *)(a1 + 8), *a2, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), **(_QWORD **)(a1 + 32), **(unsigned __int8 **)(a1 + 40), **(_QWORD **)(a1 + 48));
}

void sub_1C4F58D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const llvm::APInt *v12;
  const llvm::APInt *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  char v21;
  BOOL v22;
  int v23;
  char v24;
  _BOOL4 v25;
  int v26;
  llvm::APInt *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  void *__s1;
  unsigned int v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;
  void *v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  void *v54;
  unsigned int v55;
  void *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  char v60;
  void *v61;
  unsigned int v62;
  char v63;

  llvm::APInt::operator*(a3, *(_QWORD **)a2, (uint64_t)&v61);
  if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
  *(_QWORD *)a3 = v61;
  *(_DWORD *)(a3 + 8) = v62;
  LOBYTE(v61) = 0;
  v63 = 0;
  if (**(_DWORD **)(a2 + 8) >= 2u)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(unsigned int *)(v10 + 8);
    v57 = v11;
    if (v11 > 0x40)
    {
      v14 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      v56 = (void *)operator new[]();
      memcpy(v56, *(const void **)v10, v14);
    }
    else
    {
      v56 = *(void **)v10;
    }
    v15 = *(_QWORD *)(a2 + 24);
    v16 = *(unsigned int *)(v15 + 8);
    v55 = v16;
    if (v16 > 0x40)
    {
      v17 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      v54 = (void *)operator new[]();
      memcpy(v54, *(const void **)v15, v17);
    }
    else
    {
      v54 = *(void **)v15;
    }
    v18 = *(unsigned int *)(a3 + 8);
    v51 = v18;
    if (v18 > 0x40)
    {
      v20 = ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8;
      v50 = (void *)operator new[]();
      memcpy(v50, *(const void **)a3, v20);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v50);
    }
    else
    {
      if ((_DWORD)v18)
        v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
      else
        v19 = 0;
      v50 = (void *)(v19 & ~*(_QWORD *)a3);
    }
    llvm::APInt::operator++((uint64_t)&v50);
    v53 = v51;
    v52 = v50;
    v51 = 0;
    llvm::APIntOps::SolveQuadraticEquationWrap((llvm::APInt *)&v56, (llvm::APInt *)&v54, (unint64_t *)&v52, **(_DWORD **)(a2 + 8), (uint64_t)&v58);
    sub_1C6152988((uint64_t)&v61, (uint64_t)&v58);
    if (v60)
    {
      if (v59 >= 0x41 && v58)
        MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
      v60 = 0;
    }
    if (v53 >= 0x41 && v52)
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    if (v51 >= 0x41 && v50)
      MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
    if (v55 >= 0x41 && v54)
      MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
    if (v57 >= 0x41 && v56)
      MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
  }
  v6 = *(_QWORD *)(a2 + 16);
  v49 = *(_DWORD *)(v6 + 8);
  if (v49 > 0x40)
  {
    v48 = (void *)operator new[]();
    memcpy(v48, *(const void **)v6, (((unint64_t)v49 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v48 = *(void **)v6;
  }
  v7 = *(_QWORD *)(a2 + 24);
  v47 = *(_DWORD *)(v7 + 8);
  if (v47 > 0x40)
  {
    v46 = (void *)operator new[]();
    memcpy(v46, *(const void **)v7, (((unint64_t)v47 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v46 = *(void **)v7;
  }
  v8 = *(_DWORD *)(a3 + 8);
  v43 = v8;
  if (v8 <= 0x40)
  {
    if (v8)
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    else
      v9 = 0;
    v42 = (void *)(v9 & ~*(_QWORD *)a3);
  }
  else
  {
    v42 = (void *)operator new[]();
    memcpy(v42, *(const void **)a3, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v42);
  }
  llvm::APInt::operator++((uint64_t)&v42);
  v45 = v43;
  v44 = v42;
  v43 = 0;
  llvm::APIntOps::SolveQuadraticEquationWrap((llvm::APInt *)&v48, (llvm::APInt *)&v46, (unint64_t *)&v44, **(_DWORD **)(a2 + 8) + 1, (uint64_t)&v58);
  if (v45 >= 0x41 && v44)
    MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  if (v47 >= 0x41 && v46)
    MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
  if (v49 >= 0x41 && v48)
    MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
  v40 = *(_OWORD *)(a2 + 32);
  v41 = *(_QWORD *)(a2 + 48);
  if (v63 && v60)
  {
    LOBYTE(v34) = 0;
    v36 = 0;
    sub_1C61B29D0(&v34, (llvm::APInt *)&v61);
    LOBYTE(v31) = 0;
    v33 = 0;
    if (v60)
      sub_1C61B29D0(&v31, (llvm::APInt *)&v58);
    sub_1C4F594C4((uint64_t)&__s1, (llvm::APInt *)&v34, (uint64_t)&v31);
    if (v33)
    {
      if (v32 >= 0x41 && v31)
        MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
      v33 = 0;
    }
    if (v36)
    {
      if (v35 >= 0x41 && v34)
        MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
      v36 = 0;
    }
    if (sub_1C4F59744((llvm::ConstantInt *****)&v40, (unsigned int *)&__s1, v12))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      if (v39)
        sub_1C61B29D0((_DWORD *)a1, (llvm::APInt *)&__s1);
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      v21 = v63;
      if (v39 && v63)
      {
        if (v38 > 0x40)
          v22 = memcmp(__s1, v61, (((unint64_t)v38 + 63) >> 3) & 0x3FFFFFF8) == 0;
        else
          v22 = __s1 == v61;
        v23 = v22;
      }
      else
      {
        v23 = (v39 == 0) ^ (v63 != 0);
      }
      LOBYTE(v28) = 0;
      v30 = 0;
      v24 = v60;
      if (!v23)
        v24 = v21;
      if (v24)
      {
        if (v23)
          v27 = (llvm::APInt *)&v58;
        else
          v27 = (llvm::APInt *)&v61;
        sub_1C61B29D0(&v28, v27);
      }
      v25 = sub_1C4F59744((llvm::ConstantInt *****)&v40, (unsigned int *)&v28, v13);
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      v26 = v30;
      if (v25 && v30)
      {
        sub_1C61B29D0((_DWORD *)a1, (llvm::APInt *)&v28);
        v26 = v30;
      }
      *(_BYTE *)(a1 + 24) = 1;
      if (v26 && v29 >= 0x41 && v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    }
    if (v39 && v38 >= 0x41 && __s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  if (v60 && v59 >= 0x41 && v58)
    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
  if (v63 && v62 >= 0x41)
  {
    if (v61)
      MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
  }
}

uint64_t sub_1C4F594C4(uint64_t result, llvm::APInt *this, uint64_t a3)
{
  llvm::APInt *v3;
  uint64_t v4;
  llvm::APInt *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;

  v3 = (llvm::APInt *)a3;
  v4 = result;
  if (!*((_BYTE *)this + 16))
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      *(_BYTE *)result = 0;
      *(_BYTE *)(result + 16) = 0;
      return result;
    }
    goto LABEL_12;
  }
  v5 = this;
  if (!*(_BYTE *)(a3 + 16))
  {
    v3 = this;
LABEL_12:
    v9 = *((unsigned int *)v3 + 2);
    *(_DWORD *)(result + 8) = v9;
    if (v9 > 0x40)
    {
      v11 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
      v10 = (void *)operator new[]();
      result = (uint64_t)memcpy(v10, *(const void **)v3, v11);
    }
    else
    {
      v10 = *(void **)v3;
    }
    *(_QWORD *)v4 = v10;
    *(_BYTE *)(v4 + 16) = 1;
    return result;
  }
  v6 = *((_DWORD *)this + 2);
  v7 = *(_DWORD *)(a3 + 8);
  if (v6 <= v7)
    v8 = *(_DWORD *)(a3 + 8);
  else
    v8 = *((_DWORD *)this + 2);
  if (v6 >= v7)
    sub_1C5DD14E0((uint64_t)&v23, (uint64_t)this);
  else
    llvm::APInt::sext(this, v8, (llvm::APInt *)&v23);
  if (*((_DWORD *)v3 + 2) < v8)
    result = (uint64_t)llvm::APInt::sext(v3, v8, (llvm::APInt *)&v21);
  else
    result = sub_1C5DD14E0((uint64_t)&v21, (uint64_t)v3);
  if (v24 > 0x40)
  {
    v15 = *(_QWORD *)(v23 + 8 * ((v24 - 1) >> 6)) & (1 << (v24 - 1));
    v16 = v22 - 1;
    v17 = &v21;
    if (v22 >= 0x41)
      v17 = (uint64_t *)(v21 + 8 * (v16 >> 6));
    if ((v15 != 0) == (((unint64_t)*v17 >> v16) & 1))
    {
      v18 = (((unint64_t)v24 + 63) >> 3) & 0x3FFFFFF8;
      while (v18)
      {
        v19 = *(_QWORD *)(v23 - 8 + v18);
        v20 = *(_QWORD *)(v21 - 8 + v18);
        v18 -= 8;
        if (v19 != v20)
        {
          if (v19 <= v20)
            goto LABEL_22;
          goto LABEL_21;
        }
      }
    }
    else if (v15)
    {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v23 << -(uint64_t)v24 >> -(uint64_t)v24 >= v21 << -(uint64_t)v24 >> -(uint64_t)v24)
LABEL_21:
    v5 = v3;
LABEL_22:
  v12 = *((unsigned int *)v5 + 2);
  *(_DWORD *)(v4 + 8) = v12;
  if (v12 > 0x40)
  {
    v14 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    v13 = (void *)operator new[]();
    result = (uint64_t)memcpy(v13, *(const void **)v5, v14);
  }
  else
  {
    v13 = *(void **)v5;
  }
  *(_QWORD *)v4 = v13;
  *(_BYTE *)(v4 + 16) = 1;
  if (v22 >= 0x41)
  {
    result = v21;
    if (v21)
      result = MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  }
  if (v24 >= 0x41)
  {
    result = v23;
    if (v23)
      return MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  }
  return result;
}

BOOL sub_1C4F59744(llvm::ConstantInt *****a1, unsigned int *a2, const llvm::APInt *a3)
{
  llvm::ValueHandleBase *v4;
  llvm::ConstantInt ****v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ConstantInt *v27;
  uint64_t v28;
  size_t v29;
  const llvm::APInt *v30;
  llvm::ValueHandleBase *v31;
  llvm::ConstantInt ****v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v58;
  unsigned int v59;
  void *__s1;
  uint64_t v61;
  _QWORD v62[16];
  void *v63;
  uint64_t v64;
  _QWORD v65[18];

  v65[16] = *MEMORY[0x1E0C80C00];
  v4 = llvm::ConstantInt::get(****a1, (llvm::LLVMContext *)a2, a3);
  v5 = *a1;
  v6 = (uint64_t)*a1[1];
  __s1 = v62;
  LODWORD(v62[0]) = 0;
  *(_QWORD *)((char *)v62 + 4) = v4;
  v61 = 0x2000000003;
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v55 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v55 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v55;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v8 = __ROR8__(*(_QWORD *)((char *)v62 + 4) + 12, 12);
  v9 = 0x9DDFEA08EB382D69 * (v62[0] ^ qword_1ED7EAC80 ^ v8);
  v10 = (uint64_t)&v5[104][(*((_DWORD *)v5 + 210) - 1) & ((-348639895
                                                        * ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895 * (v8 ^ (v9 >> 47) ^ v9)))) ^ HIDWORD(v62[0]))];
  v11 = *(_QWORD *)v10;
  v63 = v65;
  v64 = 0x2000000000;
  if (v11)
    v12 = (v11 & 1) == 0;
  else
    v12 = 0;
  if (v12)
  {
    v13 = __s1;
    while (*(_QWORD *)(v11 + 16) != v61
         || memcmp(__s1, *(const void **)(v11 + 8), 4 * v61))
    {
      LODWORD(v64) = 0;
      v11 = *(_QWORD *)v11;
      if (v11)
        v14 = (v11 & 1) == 0;
      else
        v14 = 0;
      if (!v14)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    v15 = sub_1C484358C((uint64_t)(v5 + 108), 40, 3);
    v16 = sub_1C484358C((uint64_t)(v5 + 108), 4 * v61, 2);
    v17 = (int *)__s1;
    v18 = 4 * v61;
    v19 = (_DWORD *)v16;
    do
    {
      v20 = *v17++;
      *v19++ = v20;
      v18 -= 4;
    }
    while (v18);
    v21 = v61;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 16) = v21;
    *(_DWORD *)(v15 + 24) = 0x10000;
    *(_WORD *)(v15 + 28) = 0;
    *(_QWORD *)(v15 + 32) = v4;
    v22 = *((_DWORD *)v5 + 211) + 1;
    v23 = *((_DWORD *)v5 + 210);
    if (v22 > 2 * v23)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)(v5 + 104), 2 * v23, (uint64_t)off_1E813B300);
      v63 = v65;
      v64 = 0x2000000000;
      v10 = (uint64_t)&v5[104][(*((_DWORD *)v5 + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v15 + 8), *(_QWORD *)(v15 + 8)+ 4 * *(_QWORD *)(v15 + 16))];
      if (v63 != v65)
        free(v63);
      v22 = *((_DWORD *)v5 + 211) + 1;
    }
    *((_DWORD *)v5 + 211) = v22;
    v24 = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
      v24 = v10 | 1;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)v10 = v15;
    v13 = __s1;
  }
  if (v13 != v62)
    free(v13);
  v25 = llvm::SCEVAddRecExpr::evaluateAtIteration(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
  if (llvm::ConstantRange::contains((llvm::ConstantRange *)a1[2], (const llvm::APInt *)(*(_QWORD *)(v25 + 32) + 24)))
    return 0;
  v27 = ****a1;
  v28 = a2[2];
  v59 = v28;
  if (v28 > 0x40)
  {
    v29 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
    v58 = (void *)operator new[]();
    memcpy(v58, *(const void **)a2, v29);
  }
  else
  {
    v58 = *(void **)a2;
  }
  llvm::APInt::operator-=((uint64_t)&v58, 1uLL);
  LODWORD(v64) = v59;
  v63 = v58;
  v59 = 0;
  v31 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v63, v30);
  if (v64 >= 0x41 && v63)
    MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
  if (v59 >= 0x41 && v58)
    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
  v32 = *a1;
  v33 = (uint64_t)*a1[1];
  __s1 = v62;
  LODWORD(v62[0]) = 0;
  *(_QWORD *)((char *)v62 + 4) = v31;
  v61 = 0x2000000003;
  v34 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v56 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v56 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v56;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v35 = __ROR8__(*(_QWORD *)((char *)v62 + 4) + 12, 12);
  v36 = 0x9DDFEA08EB382D69 * (v62[0] ^ qword_1ED7EAC80 ^ v35);
  v37 = (uint64_t)&v32[104][(*((_DWORD *)v32 + 210) - 1) & ((-348639895
                                                          * ((((0x9DDFEA08EB382D69
                                                                            * (v35 ^ (v36 >> 47) ^ v36)) >> 32) >> 15) ^ (-348639895 * (v35 ^ (v36 >> 47) ^ v36)))) ^ HIDWORD(v62[0]))];
  v38 = *(_QWORD *)v37;
  v63 = v65;
  v64 = 0x2000000000;
  if (v38)
    v39 = (v38 & 1) == 0;
  else
    v39 = 0;
  if (v39)
  {
    v40 = v61;
    v41 = __s1;
    v42 = 4 * v61;
    while (*(_QWORD *)(v38 + 16) != v40 || memcmp(v41, *(const void **)(v38 + 8), v42))
    {
      LODWORD(v64) = 0;
      v38 = *(_QWORD *)v38;
      if (v38)
        v43 = (v38 & 1) == 0;
      else
        v43 = 0;
      if (!v43)
        goto LABEL_46;
    }
  }
  else
  {
LABEL_46:
    v44 = sub_1C484358C((uint64_t)(v32 + 108), 40, 3);
    v45 = sub_1C484358C((uint64_t)(v32 + 108), 4 * v61, 2);
    if ((_DWORD)v61)
    {
      v46 = (int *)__s1;
      v47 = 4 * v61;
      v48 = (_DWORD *)v45;
      do
      {
        v49 = *v46++;
        *v48++ = v49;
        v47 -= 4;
      }
      while (v47);
      v50 = v61;
    }
    else
    {
      v50 = 0;
    }
    *(_QWORD *)v44 = 0;
    *(_QWORD *)(v44 + 8) = v45;
    *(_QWORD *)(v44 + 16) = v50;
    *(_DWORD *)(v44 + 24) = 0x10000;
    *(_WORD *)(v44 + 28) = 0;
    *(_QWORD *)(v44 + 32) = v31;
    v51 = *((_DWORD *)v32 + 211) + 1;
    v52 = *((_DWORD *)v32 + 210);
    if (v51 > 2 * v52)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)(v32 + 104), 2 * v52, (uint64_t)off_1E813B300);
      v63 = v65;
      v64 = 0x2000000000;
      v37 = (uint64_t)&v32[104][(*((_DWORD *)v32 + 210) - 1) & sub_1C4F5AB38(*(_QWORD **)(v44 + 8), *(_QWORD *)(v44 + 8)+ 4 * *(_QWORD *)(v44 + 16))];
      if (v63 != v65)
        free(v63);
      v51 = *((_DWORD *)v32 + 211) + 1;
    }
    *((_DWORD *)v32 + 211) = v51;
    v53 = *(_QWORD *)v37;
    if (!*(_QWORD *)v37)
      v53 = v37 | 1;
    *(_QWORD *)v44 = v53;
    *(_QWORD *)v37 = v44;
    v41 = __s1;
  }
  if (v41 != v62)
    free(v41);
  v54 = llvm::SCEVAddRecExpr::evaluateAtIteration(*(_QWORD *)(v33 + 32), *(_QWORD *)(v33 + 40));
  return llvm::ConstantRange::contains((llvm::ConstantRange *)a1[2], (const llvm::APInt *)(*(_QWORD *)(v54 + 32) + 24));
}

uint64_t sub_1C4F59DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

uint64_t sub_1C4F5A964(uint64_t a1, uint64_t a2)
{
  llvm::SmallPtrSetImplBase *v3;
  uint64_t result;

  v3 = *(llvm::SmallPtrSetImplBase **)(a1 + 32);
  if (v3)
  {
    sub_1C4774094(v3, a2);
    return 1;
  }
  else
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

_QWORD *sub_1C4F5A9A0(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v10 = 0;
LABEL_8:
    v6 = sub_1C4F52BE0(a1, (uint64_t)a2, a2, v10);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v12 = 0;
      else
        v12 = v7 == -8192;
      if (v12)
        v8 = v6;
      v13 = v5 + v9++;
      v5 = v13 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v10 = v8;
    else
      v10 = v6;
    goto LABEL_8;
  }
  return v6;
}

__n128 sub_1C4F5AA58(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F4038, "scalar-evolution-use-expensive-range-sharpening", 0x2FuLL);
  word_1ED7F4042 = (32 * (*a1 & 3)) | word_1ED7F4042 & 0xFF9F;
  v6 = *a2;
  byte_1ED7F40B8 = **a2;
  byte_1ED7F40C9 = 1;
  byte_1ED7F40C8 = *v6;
  result = *a3;
  xmmword_1ED7F4058 = (__int128)*a3;
  return result;
}

BOOL sub_1C4F5AADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  return v3 == *(_DWORD *)(a3 + 8) && memcmp(*(const void **)a3, *(const void **)(a2 + 8), 4 * v3) == 0;
}

unint64_t sub_1C4F5AB1C(uint64_t a1, uint64_t a2)
{
  return sub_1C4F5AB38(*(_QWORD **)(a2 + 8), *(_QWORD *)(a2 + 8) + 4 * *(_QWORD *)(a2 + 16));
}

unint64_t sub_1C4F5AB38(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  _QWORD *v70;

  v2 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v4 = &unk_1ED7EA000;
  if ((v3 & 1) == 0)
  {
    v70 = a1;
    v66 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v4 = &unk_1ED7EA000;
    v67 = v66;
    v2 = a2;
    a1 = v70;
    if (v67)
    {
      v68 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v68 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v68;
      __cxa_guard_release(&qword_1ED7EAC88);
      v4 = (_QWORD *)&unk_1ED7EA000;
      v2 = a2;
      a1 = v70;
    }
  }
  v5 = v4[400];
  v6 = v2 - (_QWORD)a1;
  if ((unint64_t)(v2 - (_QWORD)a1) <= 0x40)
    return sub_1C49CE808(a1, v6, v5);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v9 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
  v10 = v5 ^ (v5 >> 47);
  v11 = v5 ^ (((0x9DDFEA08EB382D69 * (v10 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                          * (v10 ^ (0xB492B66FBE98F273
                                                                                                  * v5)));
  v12 = a1[1];
  v13 = a1[6];
  v14 = a1[7];
  v15 = v9 + v5 + v12;
  v16 = a1[5];
  v17 = v16 + v9 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v5 - 0x4B6D499041670D8DLL * v5, 42);
  v18 = v10 - 0x622015F714C7D297 * (v8 ^ (v8 >> 47));
  v19 = *a1 - 0x6D8ED9027DD26057 * v5;
  v20 = a1[2];
  v21 = a1[3];
  v22 = v19 + v12 + v20;
  v23 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v11) ^ ((0x9DDFEA08EB382D69 * v11) >> 47));
  v24 = __ROR8__(v18, 33);
  v25 = (0xB492B66FBE98F273 * __ROR8__(v15, 37)) ^ v23;
  v26 = __ROR8__(v22, 44) + v19 + __ROR8__(v25 + v10 + v19 + v21, 21);
  v27 = 0xB492B66FBE98F273 * v24;
  v28 = v22 + v21;
  v29 = v23 + a1[4] - 0x4B6D499041670D8DLL * v24;
  v30 = __ROR8__(v16 + v13 + v29, 44) + v29 + __ROR8__(v17 + v20 + v14 + v29, 21);
  v31 = v16 + v13 + v29 + v14;
  v32 = (v6 & 0xFFFFFFFFFFFFFFC0) - 64;
  if ((v6 & 0xFFFFFFFFFFFFFFC0) == 0x40)
  {
    v33 = v25;
  }
  else
  {
    v52 = a1 + 15;
    do
    {
      v53 = *(v52 - 6);
      v54 = __ROR8__(v17 + v27 + v28 + v53, 37);
      v56 = *(v52 - 2);
      v55 = *(v52 - 1);
      v17 = v56 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v26 + v17 + v55, 42);
      v57 = v31 + v25;
      v58 = *(v52 - 7) - 0x4B6D499041670D8DLL * v26;
      v59 = *(v52 - 4);
      v60 = *(v52 - 5);
      v61 = v58 + v53 + v60;
      v33 = (0xB492B66FBE98F273 * v54) ^ v30;
      v27 = 0xB492B66FBE98F273 * __ROR8__(v57, 33);
      v26 = __ROR8__(v61, 44) + v58 + __ROR8__(v33 + v31 + v58 + v59, 21);
      v28 = v61 + v59;
      v62 = v27 + v30 + *(v52 - 3);
      v63 = *v52;
      v52 += 8;
      v64 = __ROR8__(v17 + v60 + v62 + v63, 21);
      v65 = v56 + v55 + v62;
      v30 = __ROR8__(v65, 44) + v62 + v64;
      v31 = v65 + v63;
      v25 = v33;
      v32 -= 64;
    }
    while (v32);
  }
  if ((v6 & 0x3F) != 0)
  {
    v34 = *(_QWORD *)(v2 - 56);
    v35 = *(_QWORD *)(v2 - 16);
    v36 = *(_QWORD *)(v2 - 8);
    v37 = v33 + v31;
    v38 = (0xB492B66FBE98F273 * __ROR8__(v17 + v28 + v27 + v34, 37)) ^ v30;
    v40 = *(_QWORD *)(v2 - 32);
    v39 = *(_QWORD *)(v2 - 24);
    v17 = v39 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v35, 42);
    v41 = v38 + v31;
    v42 = *(_QWORD *)(v2 - 64) - 0x4B6D499041670D8DLL * v26;
    v45 = v2 - 48;
    v43 = *(_QWORD *)(v2 - 48);
    v44 = *(_QWORD *)(v45 + 8);
    v46 = v42 + v34 + v43;
    v27 = 0xB492B66FBE98F273 * __ROR8__(v37, 33);
    v26 = __ROR8__(v46, 44) + v42 + __ROR8__(v41 + v42 + v44, 21);
    v28 = v46 + v44;
    v47 = v27 + v30 + v40;
    v48 = v39 + v35 + v47;
    v30 = __ROR8__(v48, 44) + v47 + __ROR8__(v17 + v43 + v47 + v36, 21);
    v31 = v48 + v36;
    v33 = v38;
  }
  v49 = 0x9DDFEA08EB382D69
      * (v30 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v30)));
  v50 = v27 - 0x4B6D499041670D8DLL * (v6 ^ (v6 >> 47)) - 0x622015F714C7D297 * (v49 ^ (v49 >> 47));
  v51 = 0x9DDFEA08EB382D69
      * ((v33
        - 0x4B6D499041670D8DLL * (v17 ^ (v17 >> 47))
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) ^ ((0x9DDFEA08EB382D69 * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) >> 47))) ^ v50);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v50 ^ (v51 >> 47) ^ v51)) ^ ((0x9DDFEA08EB382D69 * (v50 ^ (v51 >> 47) ^ v51)) >> 47));
}

void sub_1C4F5AEF4(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1C4F5AF54()
{
  JUMPOUT(0x1C4F5AF40);
}

void sub_1C4F5AF60()
{
  JUMPOUT(0x1C4F5AF58);
}

unint64_t sub_1C4F5AF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  unsigned int IndexTypeSizeInBits;
  llvm::ConstantRange *RangeRef;
  unint64_t v11;
  const llvm::APInt *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  llvm::ValueHandleBase *v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE *v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BOOL4 v44;
  _BOOL4 v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE v55[120];
  _BYTE *v56;
  uint64_t v57;
  _BYTE v58[248];

  v4 = *(uint64_t **)(v0 + 32);
  v5 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 40) + 272;
  if (*(_BYTE *)(*v4 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, v5);
  }
  else
  {
    sub_1C4768AD0(v6, v5);
    IndexTypeSizeInBits = v8;
    if ((_DWORD)v7 == 1)
  }
  *v3 = 36;
  v50 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v49, 0, 0);
  else
    v49 = 0;
  RangeRef = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(v1, v2, 0, 0);
  llvm::ConstantRange::getUnsignedMax(RangeRef, (llvm::APInt *)&v47);
  if (v48 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v47);
  }
  else
  {
    if (v48)
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
    else
      v11 = 0;
    v47 = v11 & ~v47;
  }
  llvm::APInt::operator++((uint64_t)&v47);
  v13 = v48;
  if (v48 >= 0x41)
  {
    v38 = 0;
    v39 = 0;
    v40 = v47;
    v14 = v49;
    v41 = ((unint64_t)v48 + 63) >> 6;
    do
    {
      v42 = *(_QWORD *)(v40 + v38);
      v43 = *(_QWORD *)(v14 + v38) + v42;
      v44 = v43 < v42;
      v45 = v43 + 1 <= v42;
      if (v39)
      {
        ++v43;
        v39 = v45;
      }
      else
      {
        v39 = v44;
      }
      *(_QWORD *)(v40 + v38) = v43;
      v38 += 8;
    }
    while (8 * v41 != v38);
    *(_QWORD *)(v47 + 8 * (v41 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
    v13 = v48;
    v16 = v47;
  }
  else
  {
    v14 = v49;
    if (v48)
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
    else
      v15 = 0;
    v16 = v15 & (v47 + v49);
    v47 = v16;
  }
  v52 = v13;
  v51 = v16;
  v48 = 0;
  v17 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)v1, (llvm::LLVMContext *)&v51, v12);
  v53 = v55;
  *(_DWORD *)v55 = 0;
  *(_QWORD *)&v55[4] = v17;
  v54 = 0x2000000003;
  v18 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v46 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v46 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v46;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v19 = __ROR8__(*(_QWORD *)&v55[4] + 12, 12);
  v20 = 0x9DDFEA08EB382D69 * (*(_QWORD *)v55 ^ qword_1ED7EAC80 ^ v19);
  v21 = *(_QWORD *)(v1 + 832)
      + 8
      * ((*(_DWORD *)(v1 + 840) - 1) & ((-348639895
                                       * ((((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) >> 32) >> 15) ^ (-348639895 * (v19 ^ (v20 >> 47) ^ v20)))) ^ *(_DWORD *)&v55[4]));
  v22 = *(_QWORD *)v21;
  v56 = v58;
  v57 = 0x2000000000;
  if (v22)
    v23 = (v22 & 1) == 0;
  else
    v23 = 0;
  if (v23)
  {
    v24 = v54;
    v25 = v53;
    v26 = 4 * v54;
    while (*(_QWORD *)(v22 + 16) != v24 || memcmp(v25, *(const void **)(v22 + 8), v26))
    {
      LODWORD(v57) = 0;
      v22 = *(_QWORD *)v22;
      if (v22)
        v27 = (v22 & 1) == 0;
      else
        v27 = 0;
      if (!v27)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    v22 = sub_1C484358C(v1 + 864, 40, 3);
    v28 = sub_1C484358C(v1 + 864, 4 * v54, 2);
    if ((_DWORD)v54)
    {
      v29 = (int *)v53;
      v30 = 4 * v54;
      v31 = (_DWORD *)v28;
      do
      {
        v32 = *v29++;
        *v31++ = v32;
        v30 -= 4;
      }
      while (v30);
      v33 = v54;
    }
    else
    {
      v33 = 0;
    }
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = v28;
    *(_QWORD *)(v22 + 16) = v33;
    *(_DWORD *)(v22 + 24) = 0x10000;
    *(_WORD *)(v22 + 28) = 0;
    *(_QWORD *)(v22 + 32) = v17;
    v34 = *(_DWORD *)(v1 + 844) + 1;
    v35 = *(_DWORD *)(v1 + 840);
    if (v34 > 2 * v35)
    {
      llvm::FoldingSetBase::GrowBucketCount(v1 + 832, 2 * v35, (uint64_t)off_1E813B300);
      v56 = v58;
      v57 = 0x2000000000;
      v21 = *(_QWORD *)(v1 + 832)
          + 8
          * ((*(_DWORD *)(v1 + 840) - 1) & sub_1C4F5AB38(*(_QWORD **)(v22 + 8), *(_QWORD *)(v22 + 8) + 4 * *(_QWORD *)(v22 + 16)));
      if (v56 != v58)
        free(v56);
      v34 = *(_DWORD *)(v1 + 844) + 1;
    }
    *(_DWORD *)(v1 + 844) = v34;
    v36 = *(_QWORD *)v21;
    if (!*(_QWORD *)v21)
      v36 = v21 | 1;
    *(_QWORD *)v22 = v36;
    *(_QWORD *)v21 = v22;
    v25 = v53;
  }
  if (v25 != v55)
    free(v25);
  if (v52 >= 0x41 && v51)
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
  if (v48 >= 0x41 && v47)
    MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
  if (v50 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  return v22;
}

void sub_1C4F5B46C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;

  if (a1)
  {
    sub_1C4F5B46C(*a1);
    sub_1C4F5B46C(a1[1]);
    v2 = (char *)a1[6];
    if (v2 != (char *)(a1 + 8))
      free(v2);
    if (*((_DWORD *)a1 + 10) >= 0x41u)
    {
      v3 = a1[4];
      if (v3)
        MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
    }
    operator delete(a1);
  }
}

uint64_t sub_1C4F5B4E8(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 56 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 56 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4F5B56C(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  void *v23;
  unint64_t v24;
  uint64_t *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if (!v3)
LABEL_45:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[7 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_32:
      v13 += 7;
      if (v13 == v12)
        goto LABEL_45;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = *a1 + 56 * v16;
    v18 = *(_QWORD *)v17;
    if (v14 != *(_QWORD *)v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = *a1 + 56 * v16;
        v18 = *(_QWORD *)v17;
        if (v14 == *(_QWORD *)v17)
          goto LABEL_23;
      }
      if (v19)
        v17 = v19;
    }
LABEL_23:
    v23 = (void *)(v17 + 24);
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_QWORD *)v17 = v14;
    *(_QWORD *)(v17 + 16) = 0x400000000;
    v24 = *((unsigned int *)v13 + 4);
    v25 = (uint64_t *)v13[1];
    if ((uint64_t *)v17 == v13 || (_DWORD)v24 == 0)
    {
LABEL_30:
      ++*((_DWORD *)a1 + 2);
      if (v25 != v13 + 3)
        free(v25);
      goto LABEL_32;
    }
    if (v25 != v13 + 3)
    {
      *(_QWORD *)(v17 + 8) = v25;
      v27 = *((_DWORD *)v13 + 5);
      *(_DWORD *)(v17 + 16) = v24;
      *(_DWORD *)(v17 + 20) = v27;
      v13[1] = (uint64_t)(v13 + 3);
      *((_DWORD *)v13 + 5) = 0;
      v25 = v13 + 3;
LABEL_29:
      *((_DWORD *)v13 + 4) = 0;
      goto LABEL_30;
    }
    if (v24 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, v24, 8);
      v28 = *((unsigned int *)v13 + 4);
      if (!(_DWORD)v28)
        goto LABEL_37;
      v25 = (uint64_t *)v13[1];
      v23 = *(void **)(v17 + 8);
    }
    else
    {
      v28 = *((unsigned int *)v13 + 4);
    }
    memcpy(v23, v25, 8 * v28);
LABEL_37:
    *(_DWORD *)(v17 + 16) = v24;
    v25 = (uint64_t *)v13[1];
    goto LABEL_29;
  }
  a1[1] = 0;
  v29 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v29)
  {
    v30 = 56 * v29;
    do
    {
      *result = -4096;
      result += 7;
      v30 -= 56;
    }
    while (v30);
  }
  return result;
}

void *sub_1C4F5B7E0(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (a2 && *(_WORD *)(a2 + 24) == 14 && !*(_QWORD *)(a2 - 8))
    {
      **(_BYTE **)a1 = 1;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t sub_1C4F5B874(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v5 = a2 - 1;
    v6 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(result + 16 * v6);
    v7 = *v4;
    if (*v4 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v4;
        v11 = v6 + v9++;
        v6 = v11 & v5;
        v4 = (_QWORD *)(result + 16 * (v11 & v5));
        v7 = *v4;
        if (*v4 == a3)
          goto LABEL_3;
      }
      if (v8)
        v4 = v8;
    }
  }
  else
  {
    v4 = 0;
  }
LABEL_3:
  *a4 = v4;
  return result;
}

void *sub_1C4F5B8F0(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (*(_WORD *)(a2 + 24) == 7)
    {
      **(_BYTE **)a1 = 1;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

_QWORD *sub_1C4F5B978(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F5BA30(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F5BA30(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = *(_QWORD *)result + 16 * v9;
        v11 = *(_QWORD *)v10;
        if (v8 != *(_QWORD *)v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = *(_QWORD *)result + 16 * (v15 & v7);
            v11 = *(_QWORD *)v10;
            if (v8 == *(_QWORD *)v10)
              goto LABEL_12;
          }
          if (v12)
            v10 = v12;
        }
LABEL_12:
        *(_QWORD *)v10 = v8;
        *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + 8);
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

_QWORD *sub_1C4F5BB04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  int32x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;

  v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a1;
    v10 = a2[3];
    v11 = ((v10 >> 4) ^ (v10 >> 9)) & (v8 - 1);
    result = (_QWORD *)(*(_QWORD *)a1 + 48 * v11);
    v13 = result[3];
    if (v10 == v13)
    {
LABEL_11:
      v18 = 0;
      goto LABEL_29;
    }
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = result;
      v17 = v11 + v15++;
      v11 = v17 & (v8 - 1);
      result = (_QWORD *)(v9 + 48 * v11);
      v13 = result[3];
      if (v10 == v13)
        goto LABEL_11;
    }
    if (v14)
      v19 = (uint64_t)v14;
    else
      v19 = (uint64_t)result;
  }
  else
  {
    v19 = 0;
  }
  result = (_QWORD *)sub_1C4F5BD48(a1, (uint64_t)a2, (uint64_t)a2, v19);
  v20 = result[3];
  v21 = a2[3];
  if (v20 != v21)
  {
    v22 = v20 == -4096 || v20 == 0;
    if (!v22 && v20 != -8192)
    {
      v26 = result[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v26 = result[2];
      v27 = (unint64_t *)result[2];
      if (v27)
      {
        *v27 = *v27 & 7 | v26;
      }
      else
      {
        v28 = result[3];
        v29 = ***(int32x2_t ****)v28;
        v30 = (unint64_t)v29[303];
        if (v30 <= v26)
        {
          v31 = v29[305].u32[0];
          if (v30 + 16 * v31 > v26)
          {
            v32 = v31 - 1;
            LODWORD(v33) = v32 & ((v28 >> 4) ^ (v28 >> 9));
            v34 = (uint64_t *)(v30 + 16 * v33);
            v35 = *v34;
            if (v28 == *v34)
            {
LABEL_39:
              *v34 = -8192;
              v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
              v28 = result[3];
            }
            else
            {
              v36 = 1;
              while (v35 != -4096)
              {
                v37 = v33 + v36++;
                v33 = v37 & v32;
                v35 = *(_QWORD *)(v30 + 16 * v33);
                if (v28 == v35)
                {
                  v34 = (uint64_t *)(v30 + 16 * v33);
                  goto LABEL_39;
                }
              }
            }
            *(_BYTE *)(v28 + 17) &= ~1u;
          }
        }
      }
      v21 = a2[3];
    }
    result[3] = v21;
    if (v21 != -4096 && v21 != -8192 && v21 != 0)
    {
      v24 = a2[1];
      result[2] = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) = result + 1;
      result[1] = v24 & 0xFFFFFFFFFFFFFFF8 | result[1] & 7;
      v25 = (unint64_t *)result[2];
      if (v25)
        *v25 = *v25 & 7 | (unint64_t)(result + 2);
    }
  }
  result[4] = a2[4];
  result[5] = *a3;
  v9 = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 16);
  v18 = 1;
LABEL_29:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 48 * v8;
  *(_BYTE *)(a4 + 16) = v18;
  return result;
}

uint64_t sub_1C4F5BD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C4F5BED8(a1, v7);
    v18 = *(_DWORD *)(a1 + 16);
    if (v18)
    {
      v19 = *(_QWORD *)(a3 + 24);
      v20 = v18 - 1;
      v21 = ((v19 >> 4) ^ (v19 >> 9)) & v20;
      a4 = *(_QWORD *)a1 + 48 * v21;
      v22 = *(_QWORD *)(a4 + 24);
      if (v19 == v22)
        goto LABEL_3;
      v14 = 0;
      v23 = 1;
      while (v22 != -4096)
      {
        if (v14)
          v24 = 0;
        else
          v24 = v22 == -8192;
        if (v24)
          v14 = a4;
        v25 = v21 + v23++;
        v21 = v25 & v20;
        a4 = *(_QWORD *)a1 + 48 * v21;
        v22 = *(_QWORD *)(a4 + 24);
        if (v19 == v22)
          goto LABEL_3;
      }
      goto LABEL_28;
    }
LABEL_31:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C4F5BED8(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_31;
  v10 = *(_QWORD *)(a3 + 24);
  v11 = v9 - 1;
  v12 = ((v10 >> 4) ^ (v10 >> 9)) & v11;
  a4 = *(_QWORD *)a1 + 48 * v12;
  v13 = *(_QWORD *)(a4 + 24);
  if (v10 == v13)
    goto LABEL_3;
  v14 = 0;
  v15 = 1;
  while (v13 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == -8192;
    if (v16)
      v14 = a4;
    v17 = v12 + v15++;
    v12 = v17 & v11;
    a4 = *(_QWORD *)a1 + 48 * v12;
    v13 = *(_QWORD *)(a4 + 24);
    if (v10 == v13)
      goto LABEL_3;
  }
LABEL_28:
  if (v14)
    a4 = v14;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a4 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *sub_1C4F5BED8(uint64_t a1, int a2)
{
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F5BFB8(a1, v4, &v4[6 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = off_1E813B0D0;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F5BFB8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      *v5 = 0;
      v5[1] = -4096;
      *(v5 - 2) = off_1E813B0D0;
      *(v5 - 1) = 2;
      v5[2] = 0;
      v5 += 6;
      v4 -= 48;
    }
    while (v4);
  }
  for (; a2 != a3; a2 += 6)
  {
    v6 = a2[3];
    if ((v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = (_QWORD *)(*(_QWORD *)result + 48 * v8);
      v10 = v9[3];
      if (v6 != v10)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = (_QWORD *)(*(_QWORD *)result + 48 * (v14 & v7));
          v10 = v9[3];
          if (v6 == v10)
            goto LABEL_31;
        }
        if (v11)
          v9 = v11;
        v15 = v9[3];
        if (v15 != v6)
        {
          v16 = v15 == -4096 || v15 == 0;
          if (!v16 && v15 != -8192)
          {
            v33 = v9[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v33 = v9[2];
            v34 = (unint64_t *)v9[2];
            if (v34)
            {
              *v34 = *v34 & 7 | v33;
            }
            else
            {
              v35 = v9[3];
              v36 = ***(int32x2_t ****)v35;
              v37 = (unint64_t)v36[303];
              if (v37 <= v33)
              {
                v38 = v36[305].u32[0];
                if (v37 + 16 * v38 > v33)
                {
                  v39 = v38 - 1;
                  LODWORD(v40) = v39 & ((v35 >> 4) ^ (v35 >> 9));
                  v41 = (uint64_t *)(v37 + 16 * v40);
                  v42 = *v41;
                  if (v35 == *v41)
                  {
LABEL_60:
                    *v41 = -8192;
                    v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                    v35 = v9[3];
                  }
                  else
                  {
                    v43 = 1;
                    while (v42 != -4096)
                    {
                      v44 = v40 + v43++;
                      v40 = v44 & v39;
                      v42 = *(_QWORD *)(v37 + 16 * v40);
                      if (v35 == v42)
                      {
                        v41 = (uint64_t *)(v37 + 16 * v40);
                        goto LABEL_60;
                      }
                    }
                  }
                  *(_BYTE *)(v35 + 17) &= ~1u;
                }
              }
            }
            v6 = a2[3];
          }
          v9[3] = v6;
          if (v6 != -4096 && v6 != -8192 && v6 != 0)
          {
            v18 = a2[1];
            v9[2] = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = v9 + 1;
            v9[1] = v18 & 0xFFFFFFFFFFFFFFF8 | v9[1] & 7;
            v19 = (unint64_t *)v9[2];
            if (v19)
              *v19 = *v19 & 7 | (unint64_t)(v9 + 2);
          }
        }
      }
LABEL_31:
      v9[4] = a2[4];
      v9[5] = a2[5];
      ++*(_DWORD *)(result + 8);
      v6 = a2[3];
    }
    if (v6 != -8192 && v6 != -4096 && v6 != 0)
    {
      v21 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v21 = a2[2];
      v22 = (unint64_t *)a2[2];
      if (v22)
      {
        *v22 = *v22 & 7 | v21;
      }
      else
      {
        v23 = a2[3];
        v24 = ***(int32x2_t ****)v23;
        v25 = (unint64_t)v24[303];
        if (v25 <= v21)
        {
          v26 = v24[305].u32[0];
          if (v25 + 16 * v26 > v21)
          {
            v27 = v26 - 1;
            LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
            v29 = (uint64_t *)(v25 + 16 * v28);
            v30 = *v29;
            if (v23 == *v29)
            {
LABEL_48:
              *v29 = -8192;
              v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
              v23 = a2[3];
            }
            else
            {
              v31 = 1;
              while (v30 != -4096)
              {
                v32 = v28 + v31++;
                v28 = v32 & v27;
                v30 = *(_QWORD *)(v25 + 16 * v28);
                if (v23 == v30)
                {
                  v29 = (uint64_t *)(v25 + 16 * v28);
                  goto LABEL_48;
                }
              }
            }
            *(_BYTE *)(v23 + 17) &= ~1u;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C4F5C2DC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4F5C45C(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 96 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 96 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C4F5C45C(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 96 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -4096)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -8192;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 96 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4F5C45C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F5C520(a1, v4, &v4[12 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 96 * v10;
    do
    {
      *result = -4096;
      result += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

void sub_1C4F5C520(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t *v18;

  v4 = (unsigned int *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 96 * v6;
    do
    {
      *v7 = -4096;
      v7 += 12;
      v8 -= 96;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v10 = *(_DWORD *)(a1 + 16) - 1;
        v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
        v12 = *(_QWORD *)a1 + 96 * v11;
        v13 = *(_QWORD *)v12;
        if (v9 != *(_QWORD *)v12)
        {
          v14 = 0;
          v15 = 1;
          while (v13 != -4096)
          {
            if (v14)
              v16 = 0;
            else
              v16 = v13 == -8192;
            if (v16)
              v14 = v12;
            v17 = v11 + v15++;
            v11 = v17 & v10;
            v12 = *(_QWORD *)a1 + 96 * v11;
            v13 = *(_QWORD *)v12;
            if (v9 == *(_QWORD *)v12)
              goto LABEL_18;
          }
          if (v14)
            v12 = v14;
        }
LABEL_18:
        *(_QWORD *)v12 = v9;
        sub_1C4E44570((unsigned int *)(v12 + 8), v4 + 2);
        ++*(_DWORD *)(a1 + 8);
        v18 = (uint64_t *)*((_QWORD *)v4 + 6);
        if (v18 != (uint64_t *)(v4 + 16))
          free(v18);
        if ((v4[2] & 1) == 0)
          MEMORY[0x1CAA32FB4](*((_QWORD *)v4 + 2), 8);
      }
      v4 += 24;
    }
    while (v4 != (unsigned int *)a3);
  }
}

double sub_1C4F5C664(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;

  v9 = 0;
  v4 = sub_1C4F5C768(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
  {
    goto LABEL_4;
  }
  sub_1C4F5C850(a1, v8);
  v9 = 0;
  sub_1C4F5C768(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  v6 = v9;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096 || v6[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v6[1] = a2[1];
  v6[2] = 0;
  v6[3] = (uint64_t)(v6 + 5);
  *(_QWORD *)&result = 0x300000000;
  v6[4] = 0x300000000;
  return result;
}

uint64_t sub_1C4F5C768(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;
  BOOL v15;
  int v17;
  uint64_t v18;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = (_QWORD *)(a1 + (v8 << 6));
    v10 = *v9;
    v11 = v9[1];
    if (*v9 == a3 && v11 == a4)
    {
      v18 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v10 != -4096 || v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15 && v10 == -8192)
          v13 = v9;
        v17 = v8 + v14++;
        v8 = v17 & (a2 - 1);
        v9 = (_QWORD *)(a1 + (v8 << 6));
        v10 = *v9;
        v11 = v9[1];
        v18 = 1;
        if (*v9 == a3 && v11 == a4)
          goto LABEL_25;
      }
      v18 = 0;
      if (v13)
        v9 = v13;
    }
  }
  else
  {
    v9 = 0;
    v18 = 0;
  }
LABEL_25:
  *a5 = v9;
  return v18;
}

_OWORD *sub_1C4F5C850(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B3100(a1, v4, v4 + (v3 << 6));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result += 4;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

void *sub_1C4F5C90C(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    v6 = *(_QWORD **)a1;
    v7 = **(_QWORD **)a1 == a2;
    *(_BYTE *)(*(_QWORD *)a1 + 12) = v7;
    if (!v7)
    {
      v8 = *(unsigned __int16 *)(a2 + 24);
      if (*((unsigned __int16 *)v6 + 4) == v8 || v8 == 2 || *((unsigned __int16 *)v6 + 5) == v8)
      {
        v9 = *(unsigned int *)(a1 + 16);
        if (v9 >= *(_DWORD *)(a1 + 20))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v9 + 1, 8);
          LODWORD(v9) = *(_DWORD *)(a1 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) = a2;
        ++*(_DWORD *)(a1 + 16);
      }
    }
  }
  return result;
}

_QWORD *sub_1C4F5C9B4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F5CA6C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F5CA6C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_20;
        }
        if (v11)
          v9 = v11;
      }
LABEL_20:
      *(_QWORD *)v9 = v6;
      *(_WORD *)(v9 + 8) = *((_WORD *)a2 + 4);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C4F5CB48(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v4 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 != 0));
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 8 * v7 - 8;
}

uint64_t sub_1C4F5CBC4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 < 3 * v9)
  {
    if (v9 + ~v8 - *(_DWORD *)(a1 + 12) <= v9 >> 3)
    {
      sub_1C4F5CDDC(a1, v9);
      v21 = 0;
      sub_1C4F5CD58(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a3, &v21);
      a2 = v21;
    }
LABEL_4:
    v10 = *(_QWORD *)a2;
    goto LABEL_5;
  }
  sub_1C4F5CDDC(a1, 2 * v9);
  v10 = *a3;
  v13 = *(_DWORD *)(a1 + 16) - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a2 = *(_QWORD *)a1 + 144 * v14;
  v15 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = *(_QWORD *)a1 + 144 * (v19 & v13);
      v15 = *(_QWORD *)a2;
      if (v10 == *(_QWORD *)a2)
        goto LABEL_5;
    }
    if (v16)
      a2 = v16;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    v20 = a2;
    sub_1C4F56BDC(a2 + 8, (__int128 **)a4);
    a2 = v20;
  }
  v11 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a2 + 121) = *(_OWORD *)(a4 + 113);
  *(_OWORD *)(a2 + 112) = v11;
  return a2;
}

uint64_t sub_1C4F5CD58(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 144 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 144 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4F5CDDC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(144 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F5CEA0(a1, v4, &v4[18 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 144 * v10;
    do
    {
      *result = -4096;
      result += 18;
      v11 -= 144;
    }
    while (v11);
  }
  return result;
}

void sub_1C4F5CEA0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  char *v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 144 * v6;
    do
    {
      *v7 = -4096;
      v7 += 18;
      v8 -= 144;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = (__int128 *)*v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          v11 = v10 - 1;
          v12 = v11 & ((v9 >> 4) ^ (v9 >> 9));
          v13 = *(_QWORD *)a1 + 144 * v12;
          v14 = *(_QWORD *)v13;
          if (v9 != *(__int128 **)v13)
          {
            v18 = 0;
            v19 = 1;
            while (v14 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v14 == -8192;
              if (v20)
                v18 = v13;
              v21 = v12 + v19++;
              v12 = v21 & v11;
              v13 = *(_QWORD *)a1 + 144 * v12;
              v14 = *(_QWORD *)v13;
              if (v9 == *(__int128 **)v13)
                goto LABEL_10;
            }
            if (v18)
              v13 = v18;
          }
        }
        else
        {
          v13 = 0;
        }
LABEL_10:
        *(_QWORD *)v13 = v9;
        *(_QWORD *)(v13 + 8) = v13 + 24;
        *(_QWORD *)(v13 + 16) = 0x100000000;
        if (*((_DWORD *)v4 + 4))
          sub_1C4F56BDC(v13 + 8, (__int128 **)v4 + 1);
        v15 = *((_OWORD *)v4 + 7);
        *(_OWORD *)(v13 + 121) = *(_OWORD *)((char *)v4 + 121);
        *(_OWORD *)(v13 + 112) = v15;
        ++*(_DWORD *)(a1 + 8);
        v16 = (char *)v4[1];
        v17 = *((_DWORD *)v4 + 4);
        if (v17)
        {
          v22 = 88 * v17;
          do
          {
            v23 = *(void **)&v16[v22 - 56];
            if (v23 != *(void **)&v16[v22 - 64])
            {
              v24 = v16;
              free(v23);
              v16 = v24;
            }
            v22 -= 88;
          }
          while (v22);
          v16 = (char *)v4[1];
        }
        if (v16 != (char *)(v4 + 3))
          free(v16);
      }
      v4 += 18;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C4F5D06C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 16 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 16 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

void sub_1C4F5D100(uint64_t a1)
{
  unsigned int v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v4 = *(_QWORD **)a1;
    v5 = *(_QWORD *)a1 + 144 * v2;
    do
    {
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (char *)v4[1];
        v7 = *((_DWORD *)v4 + 4);
        if (v7)
        {
          v8 = 88 * v7;
          do
          {
            v9 = *(void **)&v6[v8 - 56];
            if (v9 != *(void **)&v6[v8 - 64])
            {
              v19 = v8;
              v20 = v6;
              free(v9);
              v8 = v19;
              v6 = v20;
            }
            v8 -= 88;
          }
          while (v8);
          v6 = (char *)v4[1];
        }
        if (v6 != (char *)(v4 + 3))
          free(v6);
      }
      v4 += 18;
    }
    while (v4 != (_QWORD *)v5);
  }
  v10 = 1 << (33 - __clz(v3 - 1));
  if (v10 <= 64)
    v10 = 64;
  if (v3)
    v11 = v10;
  else
    v11 = 0;
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD **)a1;
      v13 = 144 * v11;
      do
      {
        *v12 = -4096;
        v12 += 18;
        v13 -= 144;
      }
      while (v13);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v11)
    {
      v14 = (4 * (int)v11 / 3u + 1) | ((unint64_t)(4 * (int)v11 / 3u + 1) >> 1);
      v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
      LODWORD(v15) = (((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v15;
      v16 = operator new(144 * v15, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = 0;
      v17 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v17)
      {
        v18 = 144 * v17;
        do
        {
          *v16 = -4096;
          v16 += 18;
          v18 -= 144;
        }
        while (v18);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C4F5D2B4(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C4F5D3C0(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 72 * v4;
      do
      {
        *v5 = -4096;
        v5 += 9;
        v6 -= 72;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(72 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 72 * v10;
        do
        {
          *v9 = -4096;
          v9 += 9;
          v11 -= 72;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      a1[4] = 0;
    }
  }
}

void sub_1C4F5D3C0(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = (uint64_t)*(v3 - 2);
      if (v4 != -4096 && v4 != -8192 && *v3 != *(v3 - 1))
      {
        v5 = v3;
        v6 = v2;
        free(*v3);
        v3 = v5;
        v2 = v6;
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

uint64_t sub_1C4F5D430(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD **)result;
    v3 = *(_QWORD *)result + 48 * v1;
    do
    {
      v4 = v2[3];
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
      {
        v6 = v2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v6 = v2[2];
        v7 = (unint64_t *)v2[2];
        if (v7)
        {
          *v7 = *v7 & 7 | v6;
        }
        else
        {
          v8 = v2[3];
          v9 = ***(int32x2_t ****)v8;
          v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              v14 = (uint64_t *)(v10 + 16 * v13);
              v15 = *v14;
              if (v8 == *v14)
              {
LABEL_18:
                *v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                v8 = v2[3];
              }
              else
              {
                v16 = 1;
                while (v15 != -4096)
                {
                  v17 = v13 + v16++;
                  v13 = v17 & v12;
                  v15 = *(_QWORD *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_18;
                  }
                }
              }
              *(_BYTE *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 6;
    }
    while (v2 != (_QWORD *)v3);
  }
  return result;
}

void sub_1C4F5D540(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      v6 = *(_QWORD *)(v5 - 24);
      if (v6 != -4096 && v6 != -8192)
      {
        v7 = *(void **)(v5 - 16);
        if ((void *)v5 != v7)
          free(v7);
      }
      v5 += 56;
      v4 -= 56;
    }
    while (v4);
  }
  v8 = 1 << (33 - __clz(v3 - 1));
  if (v8 <= 64)
    v8 = 64;
  if (v3)
    v9 = v8;
  else
    v9 = 0;
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)a1;
      v11 = 56 * v9;
      do
      {
        *v10 = -4096;
        v10 += 7;
        v11 -= 56;
      }
      while (v11);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v9)
    {
      v12 = (4 * (int)v9 / 3u + 1) | ((unint64_t)(4 * (int)v9 / 3u + 1) >> 1);
      v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
      LODWORD(v13) = (((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v13;
      v14 = operator new(56 * v13, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = 0;
      v15 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v15)
      {
        v16 = 56 * v15;
        do
        {
          *v14 = -4096;
          v14 += 7;
          v16 -= 56;
        }
        while (v16);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C4F5D6A0(_DWORD *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1[2];
  sub_1C4F5D740((uint64_t)a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 40 * v4;
      do
      {
        *v5 = -4096;
        v5 += 5;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    sub_1C49D8F68(a1, v4);
  }
}

void sub_1C4F5D740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      v4 = *(_QWORD *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
          free(v5);
      }
      v3 += 40;
      v2 -= 40;
    }
    while (v2);
  }
}

void sub_1C4F5D7A8(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C4F5D740(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 40 * v4;
      do
      {
        *v5 = -4096;
        v5 += 5;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(40 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 40 * v10;
        do
        {
          *v9 = -4096;
          v9 += 5;
          v11 -= 40;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

unsigned int *sub_1C4F5D8B4(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = *(_QWORD *)result + 16;
    do
    {
      if ((*(_QWORD *)(v5 - 16) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_DWORD *)(v5 + 16) >= 0x41u)
        {
          result = *(unsigned int **)(v5 + 8);
          if (result)
            result = (unsigned int *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v5 >= 0x41u)
        {
          result = *(unsigned int **)(v5 - 8);
          if (result)
            result = (unsigned int *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        }
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  v6 = 1 << (33 - __clz(v3 - 1));
  if (v6 <= 64)
    v6 = 64;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if ((_DWORD)v7 == v1[4])
  {
    *((_QWORD *)v1 + 1) = 0;
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD **)v1;
      v9 = 40 * v7;
      do
      {
        *v8 = -4096;
        v8 += 5;
        v9 -= 40;
      }
      while (v9);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)v1, 8);
    if ((_DWORD)v7)
    {
      v10 = (4 * (int)v7 / 3u + 1) | ((unint64_t)(4 * (int)v7 / 3u + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      v1[4] = v11;
      result = (unsigned int *)operator new(40 * v11, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v12 = v1[4];
      if ((_DWORD)v12)
      {
        v13 = 40 * v12;
        do
        {
          *(_QWORD *)result = -4096;
          result += 10;
          v13 -= 40;
        }
        while (v13);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

void sub_1C4F5DA54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 96 * v1;
    v3 = *(_QWORD *)a1 + 64;
    do
    {
      v4 = *(_QWORD *)(v3 - 64);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
          free(v5);
        if ((*(_BYTE *)(v3 - 56) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v3 - 48), 8);
      }
      v3 += 96;
      v2 -= 96;
    }
    while (v2);
  }
}

void sub_1C4F5DAD4(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  int64x2_t *v5;
  unint64_t v6;
  int64x2_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C4F5DBEC(a1);
  if (v2)
  {
    v3 = 1 << (33 - __clz(v2 - 1));
    if (v3 <= 64)
      v4 = 64;
    else
      v4 = v3;
    if (v4 == *(_DWORD *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 8) = 0;
      v5 = *(int64x2_t **)a1;
      v6 = (unint64_t)v4 << 6;
      v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v5 = v7;
        v5 += 4;
        v6 -= 64;
      }
      while (v6);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v8 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v9;
      v10 = operator new((unint64_t)v9 << 6, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = 0;
      v11 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v11)
      {
        v12 = v11 << 6;
        v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *v10 = v13;
          v10 += 4;
          v12 -= 64;
        }
        while (v12);
      }
    }
  }
  else if (*(_DWORD *)(a1 + 16))
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1C4F5DBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)a1 + (v1 << 6);
    v3 = *(_QWORD *)a1 + 40;
    do
    {
      v6 = *(_QWORD *)(v3 - 40);
      v5 = *(_QWORD *)(v3 - 32);
      v4 = v3 - 40;
      if ((v6 != -4096 || v5 != -4096) && (v6 != -8192 || v5 != -8192))
      {
        v7 = *(void **)(v3 - 16);
        if ((void *)v3 != v7)
        {
          v10 = v2;
          v8 = v3;
          v9 = v3 - 40;
          free(v7);
          v3 = v8;
          v4 = v9;
          v2 = v10;
        }
      }
      v3 += 64;
    }
    while (v4 + 64 != v2);
  }
}

_QWORD *sub_1C4F5DC78(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F5DD3C(a1, v4, &v4[9 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1C4F5DD3C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 72 * v6;
    do
    {
      *v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          v11 = v10 - 1;
          v12 = v11 & ((v9 >> 4) ^ (v9 >> 9));
          v13 = *(_QWORD *)a1 + 72 * v12;
          v14 = *(_QWORD *)v13;
          if (v9 != *(_QWORD *)v13)
          {
            v15 = 0;
            v16 = 1;
            while (v14 != -4096)
            {
              if (v15)
                v21 = 0;
              else
                v21 = v14 == -8192;
              if (v21)
                v15 = v13;
              v22 = v12 + v16++;
              v12 = v22 & v11;
              v13 = *(_QWORD *)a1 + 72 * v12;
              v14 = *(_QWORD *)v13;
              if (v9 == *(_QWORD *)v13)
                goto LABEL_12;
            }
            if (v15)
              v13 = v15;
          }
        }
        else
        {
          v13 = 0;
        }
LABEL_12:
        v17 = (void *)(v13 + 40);
        *(_QWORD *)v13 = v9;
        *(_QWORD *)(v13 + 8) = v13 + 40;
        v18 = (void *)v4[1];
        v19 = (void *)v4[2];
        if (v19 == v18)
        {
          *(_QWORD *)(v13 + 16) = v17;
          v20 = *((unsigned int *)v4 + 7);
          v18 = (void *)v4[2];
          if ((_DWORD)v20)
          {
            memmove(v17, v18, 8 * v20);
            v19 = (void *)v4[1];
            v18 = (void *)v4[2];
          }
        }
        else
        {
          *(_QWORD *)(v13 + 16) = v19;
          v4[2] = (uint64_t)v18;
          v19 = v18;
        }
        *(_QWORD *)(v13 + 24) = v4[3];
        *(_DWORD *)(v13 + 32) = *((_DWORD *)v4 + 8);
        v4[3] = 4;
        *((_DWORD *)v4 + 8) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v18 != v19)
          free(v18);
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C4F5DEC8(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 9) ^ a2);
  v7 = (_QWORD *)(v3 + 96 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -16;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 96 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1C4F5DF70(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[384];
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4F5E1A0(a1, v7, v7 + 96 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if (v12 != -16 && v12 != -4)
    {
      *(_QWORD *)v10 = v12;
      v14 = *(_OWORD *)(v11 + 16);
      v10[24] = *(_BYTE *)(v11 + 32);
      *(_OWORD *)(v10 + 8) = v14;
      v15 = v10 + 64;
      *((_QWORD *)v10 + 4) = v10 + 64;
      v16 = *(void **)(v11 + 40);
      v17 = *(void **)(v11 + 48);
      if (v17 == v16)
      {
        *((_QWORD *)v10 + 5) = v15;
        v18 = *(unsigned int *)(a1 + v9 + 60);
        v16 = *(void **)(v11 + 48);
        if ((_DWORD)v18)
        {
          memmove(v15, v16, 8 * v18);
          v17 = *(void **)(v11 + 40);
          v16 = *(void **)(v11 + 48);
        }
      }
      else
      {
        *((_QWORD *)v10 + 5) = v17;
        *(_QWORD *)(v11 + 48) = v16;
        v17 = v16;
      }
      v19 = a1 + v9;
      *((_QWORD *)v10 + 6) = *(_QWORD *)(a1 + v9 + 56);
      *((_DWORD *)v10 + 14) = *(_DWORD *)(a1 + v9 + 64);
      *(_QWORD *)(v19 + 56) = 4;
      *(_DWORD *)(v19 + 64) = 0;
      v10 += 96;
      if (v16 != v17)
        free(v16);
    }
    v9 += 96;
  }
  while (v9 != 384);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C4F5E1A0(a1, (uint64_t)v20, (uint64_t)v10);
}

void sub_1C4F5E1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 392);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[12 * v7];
  }
  do
  {
    *v8 = -4;
    v8 += 12;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      if (*(_QWORD *)v4 != -16 && v10 != -4)
      {
        v19 = 0;
        sub_1C4F5DEC8(a1, v10, &v19);
        v12 = v19;
        *v19 = *(_QWORD *)v4;
        v13 = *(_OWORD *)(v4 + 8);
        *((_BYTE *)v12 + 24) = *(_BYTE *)(v4 + 24);
        *(_OWORD *)(v12 + 1) = v13;
        v14 = v12 + 8;
        v12[4] = v12 + 8;
        v16 = *(_QWORD *)(v4 + 32);
        v15 = *(_QWORD *)(v4 + 40);
        if (v15 == v16)
        {
          v12[5] = v14;
          v17 = *(unsigned int *)(v4 + 52);
          if ((_DWORD)v17)
            memmove(v14, *(const void **)(v4 + 40), 8 * v17);
        }
        else
        {
          v12[5] = v15;
          *(_QWORD *)(v4 + 40) = v16;
        }
        v12[6] = *(_QWORD *)(v4 + 48);
        *((_DWORD *)v12 + 14) = *(_DWORD *)(v4 + 56);
        *(_QWORD *)(v4 + 48) = 4;
        *(_DWORD *)(v4 + 56) = 0;
        *(_DWORD *)a1 += 2;
        v18 = *(void **)(v4 + 40);
        if (v18 != *(void **)(v4 + 32))
          free(v18);
      }
      v4 += 96;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_1C4F5E2E4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B3498(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4F5E39C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4F57124(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4F571B8(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4F5E400(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C4F5E580((uint64_t *)a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 56 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 56 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C4F5E580((uint64_t *)a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = ((*a2 >> 4) ^ (*a2 >> 9)) & v16;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 56 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -4096)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -8192;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 56 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_27:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4F5E580(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  uint64_t *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if (!v3)
LABEL_44:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[7 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_38:
      v13 += 7;
      if (v13 == v12)
        goto LABEL_44;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = *a1 + 56 * v16;
    v18 = *(_QWORD *)v17;
    if (v14 != *(_QWORD *)v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = *a1 + 56 * v16;
        v18 = *(_QWORD *)v17;
        if (v14 == *(_QWORD *)v17)
          goto LABEL_23;
      }
      if (v19)
        v17 = v19;
    }
LABEL_23:
    v23 = (void *)(v17 + 24);
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_QWORD *)v17 = v14;
    *(_QWORD *)(v17 + 16) = 0x200000000;
    v24 = *((_DWORD *)v13 + 4);
    v25 = (uint64_t *)v13[1];
    if ((uint64_t *)v17 == v13 || v24 == 0)
    {
LABEL_36:
      ++*((_DWORD *)a1 + 2);
      if (v25 != v13 + 3)
        free(v25);
      goto LABEL_38;
    }
    if (v25 != v13 + 3)
    {
      *(_QWORD *)(v17 + 8) = v25;
      v27 = *((_DWORD *)v13 + 5);
      *(_DWORD *)(v17 + 16) = v24;
      *(_DWORD *)(v17 + 20) = v27;
      v13[1] = (uint64_t)(v13 + 3);
      *((_DWORD *)v13 + 5) = 0;
      v25 = v13 + 3;
LABEL_35:
      *((_DWORD *)v13 + 4) = 0;
      goto LABEL_36;
    }
    if (v24 < 3)
    {
      v28 = *((unsigned int *)v13 + 4);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, *((unsigned int *)v13 + 4), 16);
      v28 = *((unsigned int *)v13 + 4);
      v25 = (uint64_t *)v13[1];
      if (!(_DWORD)v28)
      {
LABEL_34:
        *(_DWORD *)(v17 + 16) = v24;
        goto LABEL_35;
      }
      v23 = *(void **)(v17 + 8);
    }
    memcpy(v23, v25, 16 * v28);
    v25 = (uint64_t *)v13[1];
    goto LABEL_34;
  }
  a1[1] = 0;
  v29 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v29)
  {
    v30 = 56 * v29;
    do
    {
      *result = -4096;
      result += 7;
      v30 -= 56;
    }
    while (v30);
  }
  return result;
}

uint64_t sub_1C4F5E7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 84)
    {
      v2 = *(_QWORD *)(a2 - 32);
      if (v2)
      {
        if (!*(_BYTE *)(v2 + 16)
          && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72)
          && *(_DWORD *)(v2 + 36) == *(_DWORD *)a1)
        {
          v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
          if (v2)
          {
            **(_QWORD **)(a1 + 16) = v2;
            return 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v2;
}

void sub_1C4F5E870()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4F5E884(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E813B328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4F5E8C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E813B328;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4F5E8EC(uint64_t a1, unsigned int *a2)
{
  return llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(*(uint64_t *****)(a1 + 8), *a2, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24));
}

_BYTE *sub_1C4F5E908(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v20;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    if (a3 == a4)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v13 = a3;
      do
      {
        ++v12;
        v13 = *(_QWORD *)(v13 + 8);
      }
      while (v13 != a4);
    }
    if (v12 + v9 > (unint64_t)a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12 + v9, 8);
      v9 = a1[2];
      v7 = *(_QWORD *)a1;
    }
    if (v5 != a4)
    {
      v18 = (_QWORD *)(v7 + 8 * v9);
      do
      {
        *v18++ = *(_QWORD *)(v5 + 24);
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5 != a4);
      v7 = *(_QWORD *)a1;
    }
    a1[2] = v9 + v12;
    return (_BYTE *)(v7 + 8 * v8);
  }
  else
  {
    if (a3 == a4)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = a3;
      do
      {
        ++v10;
        v11 = *(_QWORD *)(v11 + 8);
      }
      while (v11 != a4);
    }
    if (v10 + v9 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v10 + v9, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v14 = (_BYTE *)(v7 + 8 * v8);
    v15 = (char *)(v7 + 8 * v9);
    v16 = (v15 - v14) >> 3;
    if (v16 >= v10)
    {
      sub_1C6177054(a1, &v15[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v15[-8 * v10] != v14)
        memmove(&v14[8 * v10], v14, &v15[-8 * v10] - v14);
      if (v5 != a4)
      {
        v20 = v14;
        do
        {
          *v20++ = *(_QWORD *)(v5 + 24);
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5 != a4);
      }
    }
    else
    {
      a1[2] = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v16), (const void *)(v7 + 8 * v8), v15 - v14);
        v17 = v14;
        do
        {
          *v17++ = *(_QWORD *)(v5 + 24);
          v5 = *(_QWORD *)(v5 + 8);
          --v16;
        }
        while (v16);
      }
      while (v5 != a4)
      {
        *(_QWORD *)v15 = *(_QWORD *)(v5 + 24);
        v15 += 8;
        v5 = *(_QWORD *)(v5 + 8);
      }
    }
  }
  return v14;
}

uint64_t *sub_1C4F5EAF0(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  char *v11;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *a1;
  if (v2)
  {
    v4 = v3 + 144 * v2;
    do
    {
      if ((*(_QWORD *)v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = *(char **)(v3 + 8);
        v6 = *(_DWORD *)(v3 + 16);
        if (v6)
        {
          v7 = 88 * v6;
          do
          {
            v8 = *(void **)&v5[v7 - 56];
            if (v8 != *(void **)&v5[v7 - 64])
            {
              v10 = v7;
              v11 = v5;
              free(v8);
              v7 = v10;
              v5 = v11;
            }
            v7 -= 88;
          }
          while (v7);
          v5 = *(char **)(v3 + 8);
        }
        if (v5 != (char *)(v3 + 24))
          free(v5);
      }
      v3 += 144;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t *sub_1C4F5EBC4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = v3 + 16;
    do
    {
      if ((*(_QWORD *)(v5 - 16) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_DWORD *)(v5 + 16) >= 0x41u)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
            MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v5 >= 0x41u)
        {
          v7 = *(_QWORD *)(v5 - 8);
          if (v7)
            MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
        }
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

_QWORD *sub_1C4F5EC88(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C4F5EE08((uint64_t *)a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 40 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 40 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C4F5EE08((uint64_t *)a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = ((*a2 >> 4) ^ (*a2 >> 9)) & v16;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 40 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -4096)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -8192;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 40 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_27:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4F5EE08(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  void *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (!v3)
LABEL_45:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[5 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_35:
      v13 += 5;
      if (v13 == v12)
        goto LABEL_45;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = *a1 + 40 * v16;
    v18 = *(_QWORD *)v17;
    if (v14 != *(_QWORD *)v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = *a1 + 40 * v16;
        v18 = *(_QWORD *)v17;
        if (v14 == *(_QWORD *)v17)
          goto LABEL_23;
      }
      if (v19)
        v17 = v19;
    }
LABEL_23:
    v23 = (void *)(v17 + 24);
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_QWORD *)v17 = v14;
    *(_QWORD *)(v17 + 16) = 0x200000000;
    v24 = *((unsigned int *)v13 + 4);
    v25 = (uint64_t *)v13[1];
    if ((uint64_t *)v17 == v13 || (_DWORD)v24 == 0)
    {
LABEL_33:
      ++*((_DWORD *)a1 + 2);
      if (v25 != v13 + 3)
        free(v25);
      goto LABEL_35;
    }
    if (v25 != v13 + 3)
    {
      *(_QWORD *)(v17 + 8) = v25;
      v28 = *((_DWORD *)v13 + 5);
      *(_DWORD *)(v17 + 16) = v24;
      *(_DWORD *)(v17 + 20) = v28;
      v13[1] = (uint64_t)(v13 + 3);
      *((_DWORD *)v13 + 5) = 0;
      v25 = v13 + 3;
      goto LABEL_32;
    }
    if (v24 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, v24, 8);
      v27 = *((unsigned int *)v13 + 4);
      if (!(_DWORD)v27)
        goto LABEL_31;
      v25 = (uint64_t *)v13[1];
      v23 = *(void **)(v17 + 8);
    }
    else
    {
      v27 = *((unsigned int *)v13 + 4);
    }
    memcpy(v23, v25, 8 * v27);
LABEL_31:
    *(_DWORD *)(v17 + 16) = v24;
    v25 = (uint64_t *)v13[1];
LABEL_32:
    *((_DWORD *)v13 + 4) = 0;
    goto LABEL_33;
  }
  a1[1] = 0;
  v29 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v29)
  {
    v30 = 40 * v29;
    do
    {
      *result = -4096;
      result += 5;
      v30 -= 40;
    }
    while (v30);
  }
  return result;
}

uint64_t sub_1C4F5F07C(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 40 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 40 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C4F5F0FC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C4F5EE08((uint64_t *)a1, v6);
      v16 = 0;
      sub_1C4F5F07C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C4F5EE08((uint64_t *)a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 40 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 40 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void *sub_1C4F5F234(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (**(_QWORD **)(*(_QWORD *)a1 + 8) == a2)
    {
      **(_BYTE **)a1 = 1;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

void *sub_1C4F5F2C0(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (a2 && *(_WORD *)(a2 + 24) == 7)
      result = sub_1C4774094(**(llvm::SmallPtrSetImplBase ***)a1, *(_QWORD *)(a2 + 48));
    v6 = *(unsigned int *)(a1 + 16);
    if (v6 >= *(_DWORD *)(a1 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
    ++*(_DWORD *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1C4F5F34C(unsigned int *a1, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_1C499C3FC(a1, a3, a4);
    return *(_QWORD *)a1 + 8 * v8;
  }
  else
  {
    v10 = a4 - a3;
    v11 = (a4 - a3) >> 3;
    if (v9 + v11 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v9 + v11, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (char *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      sub_1C6177054(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (a4 != v5)
        memmove(v12, v5, a4 - v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      a1[2] = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *(_QWORD *)v5;
          v5 += 8;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      while (v5 != a4)
      {
        v18 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v13 = v18;
        v13 += 8;
      }
    }
  }
  return (uint64_t)v12;
}

_QWORD *sub_1C4F5F4A4(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(104 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      v11 = 104 * v10;
      do
      {
        *result = -4096;
        result += 13;
        v11 -= 104;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = &v4[13 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *((_DWORD *)a1 + 4);
          if (v15)
          {
            v16 = v15 - 1;
            v17 = v16 & ((v14 >> 4) ^ (v14 >> 9));
            v18 = *a1 + 104 * v17;
            v19 = *(_QWORD *)v18;
            if (v14 != *(_QWORD *)v18)
            {
              v20 = 0;
              v21 = 1;
              while (v19 != -4096)
              {
                if (v20)
                  v22 = 0;
                else
                  v22 = v19 == -8192;
                if (v22)
                  v20 = v18;
                v23 = v17 + v21++;
                v17 = v23 & v16;
                v18 = *a1 + 104 * v17;
                v19 = *(_QWORD *)v18;
                if (v14 == *(_QWORD *)v18)
                  goto LABEL_24;
              }
              if (v20)
                v18 = v20;
            }
          }
          else
          {
            v18 = 0;
          }
LABEL_24:
          v24 = (void *)(v18 + 40);
          *(_QWORD *)v18 = v14;
          *(_QWORD *)(v18 + 8) = v18 + 40;
          v25 = (void *)v13[1];
          v26 = (void *)v13[2];
          if (v26 == v25)
          {
            *(_QWORD *)(v18 + 16) = v24;
            v27 = *((unsigned int *)v13 + 7);
            v25 = (void *)v13[2];
            if ((_DWORD)v27)
            {
              memmove(v24, v25, 8 * v27);
              v26 = (void *)v13[1];
              v25 = (void *)v13[2];
            }
          }
          else
          {
            *(_QWORD *)(v18 + 16) = v26;
            v13[2] = (uint64_t)v25;
            v26 = v25;
          }
          *(_QWORD *)(v18 + 24) = v13[3];
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v13 + 8);
          v13[3] = 8;
          *((_DWORD *)v13 + 8) = 0;
          ++*((_DWORD *)a1 + 2);
          if (v25 != v26)
            free(v25);
        }
        v13 += 13;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v28 = *((_DWORD *)a1 + 4);
  if (v28)
  {
    v29 = 104 * v28;
    do
    {
      *result = -4096;
      result += 13;
      v29 -= 104;
    }
    while (v29);
  }
  return result;
}

_QWORD *sub_1C4F5F6CC(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4F5F734(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4F5F7D4((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1C4F5F734(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 24 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4F5F7D4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C4F5F884(a1, v7);
    v9 = 0;
    sub_1C4F5F734((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4F5F884(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B3A50(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

char *sub_1C4F5F948(unint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B3C70(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &off_1E813B388;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F5FA28(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = *a1 + 48 * v6;
    v8 = *(_QWORD *)(v7 + 24);
    if (*a2 == v8)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = v4 + 48 * (v13 & v5);
        v8 = *(_QWORD *)(v7 + 24);
        if (*a2 == v8)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4F5FACC()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;
  int v5;

  v5 = 2;
  v4.n128_u64[0] = (unint64_t)"Maximum number of iterations SCEV will symbolically execute a constant derived loop";
  v4.n128_u64[1] = 83;
  v1 = 100;
  v2 = 1;
  v3 = &v1;
  sub_1C61B2AD8(&v5, &v2, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F3378, &dword_1C475E000);
  v5 = 1;
  v3 = (int *)&llvm::VerifySCEV;
  v4.n128_u64[0] = (unint64_t)"Verify ScalarEvolution's backedge taken counts (slow)";
  v4.n128_u64[1] = 53;
  sub_1C61B2C1C(&v5, (_BYTE **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED7F3438, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable stricter verification with -verify-scev is passed";
  v4.n128_u64[1] = 56;
  sub_1C61B2D38((uint64_t)&unk_1ED7F34F8, "verify-scev-strict", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F34F8, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Verify no dangling value in ScalarEvolution's ExprValueMap (slow)";
  v4.n128_u64[1] = 65;
  sub_1C61B2D38((uint64_t)&unk_1ED7F35B8, "verify-scev-maps", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F35B8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Verify IR correctness when making sensitive SCEV queries (slow)";
  v4.n128_u64[1] = 63;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7F3678, "scev-verify-ir", &v5, &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F3678, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Threshold for inlining multiplication operands into a SCEV";
  v4.n128_u64[1] = 58;
  v2 = 32;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F3738, "scev-mulops-inline-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F3738, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Threshold for inlining addition operands into a SCEV";
  v4.n128_u64[1] = 52;
  v2 = 500;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F37F8, "scev-addops-inline-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F37F8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive SCEV complexity comparisons";
  v4.n128_u64[1] = 54;
  v2 = 32;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F38B8, "scalar-evolution-max-scev-compare-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F38B8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive SCEV operations implication analysis";
  v4.n128_u64[1] = 63;
  v2 = 2;
  v3 = &v2;
  sub_1C61B2E04(&v5, (__int128 *)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F3978, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive value complexity comparisons";
  v4.n128_u64[1] = 55;
  v2 = 2;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F3A38, "scalar-evolution-max-value-compare-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F3A38, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive arithmetics";
  v4.n128_u64[1] = 38;
  v2 = 32;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F3AF8, "scalar-evolution-max-arith-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F3AF8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive constant evolving";
  v4.n128_u64[1] = 44;
  v2 = 32;
  v3 = &v2;
  sub_1C61B2EE0(&v5, (__int128 *)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F3BB8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive SExt/ZExt/Trunc";
  v4.n128_u64[1] = 42;
  v2 = 8;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F3C78, "scalar-evolution-max-cast-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F3C78, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Max coefficients in AddRec during evolving";
  v4.n128_u64[1] = 42;
  v2 = 8;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F3D38, "scalar-evolution-max-add-rec-size", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F3D38, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Size of the expression which is considered huge";
  v4.n128_u64[1] = 47;
  v2 = 4096;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F3DF8, "scalar-evolution-huge-expr-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F3DF8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Threshold for switching to iteratively computing SCEV ranges";
  v4.n128_u64[1] = 60;
  v2 = 32;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F3EB8, "scev-range-iter-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F3EB8, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"When printing analysis, include information on every instruction";
  v4.n128_u64[1] = 64;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F3F78, "scalar-evolution-classify-expressions", &v5, (_BYTE **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F3F78, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Use more powerful methods of sharpening expression ranges. May be costly in terms of compile time";
  v4.n128_u64[1] = 97;
  sub_1C61B2FBC(&v5, (char **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F4038, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum amount of nodes to process while searching SCEVUnknown Phi strongly connected components";
  v4.n128_u64[1] = 96;
  v2 = 8;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED7F40F8, "scalar-evolution-max-scc-analysis-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F40F8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Handle <= and >= in finite loops";
  v4.n128_u64[1] = 32;
  LOBYTE(v2) = 1;
  v3 = &v2;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7F41B8, "scalar-evolution-finite-loop", &v5, &v4, (_BYTE **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F41B8, &dword_1C475E000);
}

uint64_t llvm::SCEVAAResult::alias(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t SCEVIter;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  v3 = a2[1];
  if (v3 <= 0xFFFFFFFFFFFFFFFDLL && (v3 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    return 0;
  v6 = a3[1];
  if (v6 <= 0xFFFFFFFFFFFFFFFDLL && (v6 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *a2;
  v11 = *(_QWORD *)(v9 + 104);
  v12 = *(_DWORD *)(v9 + 120);
  if (!v12)
    goto LABEL_15;
  v13 = v12 - 1;
  v14 = ((v10 >> 4) ^ (v10 >> 9)) & (v12 - 1);
  v15 = v11 + 48 * v14;
  v16 = *(_QWORD *)(v15 + 24);
  if (v16 != v10)
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & v13;
      v15 = v11 + 48 * (v18 & v13);
      v16 = *(_QWORD *)(v15 + 24);
      if (v16 == v10)
        goto LABEL_16;
    }
LABEL_15:
    v15 = v11 + 48 * v12;
  }
LABEL_16:
  if (v15 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v15 + 40)) == 0)
  {
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v9, v10);
    v9 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v9 + 104);
    v12 = *(_DWORD *)(v9 + 120);
  }
  v20 = *a3;
  if (v12)
  {
    v21 = ((v20 >> 4) ^ (v20 >> 9)) & (v12 - 1);
    v22 = v11 + 48 * v21;
    v23 = *(_QWORD *)(v22 + 24);
    if (v23 == v20)
      goto LABEL_26;
    v24 = 1;
    while (v23 != -4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v12 - 1);
      v22 = v11 + 48 * v21;
      v23 = *(_QWORD *)(v22 + 24);
      if (v23 == v20)
        goto LABEL_26;
    }
  }
  v22 = v11 + 48 * v12;
LABEL_26:
  if (v22 == v11 + 48 * v12 || (v26 = *(_QWORD *)(v22 + 40)) == 0)
    v26 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v9, v20);
  if (SCEVIter != v26)
    __asm { BR              X11 }
  return 3;
}

uint64_t llvm::SCEVAAResult::GetBaseValue(llvm::SCEVAAResult *this, const llvm::SCEV *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  while (1)
  {
    v2 = *((unsigned __int16 *)a2 + 12);
    if (!a2 || v2 != 7)
      break;
    a2 = (const llvm::SCEV *)**((_QWORD **)a2 + 4);
  }
  if (a2 && v2 == 4)
  {
    v3 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * (*((_DWORD *)a2 + 10) - 1));
    return ((uint64_t (*)(llvm::SCEVAAResult *, uint64_t))((char *)&loc_1C4F60F14
                                                                  + 4 * byte_1C85F627D[*(unsigned __int16 *)(v3 + 24)]))(this, v3);
  }
  else
  {
    result = 0;
    if (a2)
    {
      if (v2 == 14)
        return *((_QWORD *)a2 - 1);
    }
  }
  return result;
}

uint64_t sub_1C4F60F78(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeScalarEvolutionWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "ScalarEvolution-based Alias Analysis";
  *(_QWORD *)(v3 + 8) = 36;
  *(_QWORD *)(v3 + 16) = "scev-aa";
  *(_QWORD *)(v3 + 24) = 7;
  *(_QWORD *)(v3 + 32) = &llvm::SCEVAAWrapperPass::ID;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::SCEVAAWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::SCEVAAWrapperPass::runOnFunction(llvm::SCEVAAWrapperPass *this, llvm::Function *a2)
{
  _QWORD *v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)operator new();
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::ScalarEvolutionWrapperPass::ID);
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  *v3 = 0;
  v3[1] = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (v7)
    MEMORY[0x1CAA32FC0](v7, 0x20C40A4A59CD2);
  return 0;
}

uint64_t llvm::SCEVDivision::divide(llvm::SCEVDivision *this, llvm::ScalarEvolution *a2, const llvm::SCEV ***a3, const llvm::SCEV *a4, const llvm::SCEV **a5, const llvm::SCEV **a6)
{
  const llvm::SCEV *v9;
  uint64_t result;
  const llvm::SCEV *v12;
  uint64_t v13;
  const llvm::SCEV *v14;
  const llvm::SCEV **v15;
  const llvm::SCEV **v16;
  const llvm::SCEV **v17;
  uint64_t v18;
  llvm::ScalarEvolution *v19;
  llvm::SCEV *v20;
  const llvm::SCEV *v21;
  llvm::ScalarEvolution *v22;
  _BYTE v23[16];
  uint64_t v24;
  const llvm::SCEV *v25;
  const llvm::SCEV *v26;
  uint64_t v27;

  v9 = a2;
  result = (uint64_t)llvm::SCEVDivision::SCEVDivision((llvm::SCEVDivision *)v23, this, a2, (const llvm::SCEV *)a3);
  if (v9 == (const llvm::SCEV *)a3)
  {
    v14 = v26;
    v13 = v27;
LABEL_5:
    *(_QWORD *)a4 = v13;
    *a5 = v14;
    return result;
  }
  result = llvm::SCEV::isZero(v9);
  if ((_DWORD)result)
  {
    v12 = v26;
    *(_QWORD *)a4 = v26;
LABEL_8:
    *a5 = v12;
    return result;
  }
  result = llvm::SCEV::isOne((llvm::SCEV *)a3);
  if ((_DWORD)result)
  {
    *(_QWORD *)a4 = v9;
    v12 = v26;
    goto LABEL_8;
  }
  if (!a3 || *((_WORD *)a3 + 12) != 5)
  {
    result = sub_1C61B3FCC((uint64_t)v23, (uint64_t)v9);
    v13 = v24;
    v14 = v25;
    goto LABEL_5;
  }
  v21 = 0;
  v22 = 0;
  *(_QWORD *)a4 = v9;
  v16 = a3[5];
  if (v16)
  {
    v17 = a3[4];
    v18 = 8 * (_QWORD)v16;
    v19 = v9;
    while (1)
    {
      llvm::SCEVDivision::divide(this, v19, *v17, (const llvm::SCEV *)&v22, &v21, v15);
      v20 = v21;
      v19 = v22;
      *(_QWORD *)a4 = v22;
      result = llvm::SCEV::isZero(v20);
      if ((result & 1) == 0)
        break;
      ++v17;
      v18 -= 8;
      if (!v18)
        goto LABEL_15;
    }
    *(_QWORD *)a4 = v26;
  }
  else
  {
LABEL_15:
    v9 = v26;
  }
  *a5 = v9;
  return result;
}

llvm::ConstantInt *****llvm::SCEVDivision::visitConstant(llvm::ConstantInt *****result, uint64_t a2, uint64_t a3, uint64_t a4, llvm::APInt *a5)
{
  llvm::ConstantInt ****v5;
  BOOL v6;
  llvm::ConstantInt *****v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  llvm::ConstantInt ***v11;
  uint64_t v12;
  llvm::ConstantInt **v13;
  const llvm::APInt *v14;
  const llvm::APInt *v15;
  llvm::ConstantInt *****v16;
  unsigned int v17;
  llvm::ConstantInt *****v18;
  unsigned int v19;
  llvm::ConstantInt *****v20;
  unsigned int v21;
  llvm::ConstantInt *****v22;
  unsigned int v23;

  v5 = result[1];
  if (v5)
    v6 = *((unsigned __int16 *)v5 + 12) == 0;
  else
    v6 = 0;
  if (!v6)
    return result;
  v7 = result;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(unsigned int *)(v8 + 32);
  v23 = v9;
  if (v9 > 0x40)
  {
    v10 = (void *)operator new[]();
    memcpy(v10, *(const void **)(v8 + 24), ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v10 = *(void **)(v8 + 24);
  }
  v22 = (llvm::ConstantInt *****)v10;
  v11 = v5[4];
  v12 = *((unsigned int *)v11 + 8);
  v21 = v12;
  if (v12 > 0x40)
  {
    v13 = (llvm::ConstantInt **)operator new[]();
    memcpy(v13, v11[3], ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v13 = v11[3];
  }
  v20 = (llvm::ConstantInt *****)v13;
  if (v9 <= v12)
  {
    if (v9 < v12)
    {
      llvm::APInt::sext((llvm::APInt *)&v22, v12, (llvm::APInt *)&v18);
      if (v23 >= 0x41 && v22)
        MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      v22 = v18;
      LODWORD(v9) = v19;
      v23 = v19;
    }
  }
  else
  {
    llvm::APInt::sext((llvm::APInt *)&v20, v9, (llvm::APInt *)&v18);
    if (v21 >= 0x41 && v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    v20 = v18;
    v21 = v19;
    LODWORD(v9) = v23;
  }
  v19 = v9;
  if (v9 <= 0x40)
  {
    v18 = 0;
    v17 = v9;
LABEL_24:
    v16 = 0;
    goto LABEL_25;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v18, 0, 0);
  v17 = v23;
  if (v23 <= 0x40)
    goto LABEL_24;
  llvm::APInt::initSlowCase((llvm::APInt *)&v16, 0, 0);
LABEL_25:
  llvm::APInt::sdivrem((llvm::APInt *)&v22, (const void **)&v20, (const llvm::APInt *)&v18, (llvm::APInt *)&v16, a5);
  v7[2] = (llvm::ConstantInt ****)llvm::ScalarEvolution::getConstant(*v7, (const llvm::APInt *)&v18, v14);
  result = (llvm::ConstantInt *****)llvm::ScalarEvolution::getConstant(*v7, (const llvm::APInt *)&v16, v15);
  v7[3] = (llvm::ConstantInt ****)result;
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (llvm::ConstantInt *****)MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (llvm::ConstantInt *****)MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = (llvm::ConstantInt *****)MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  }
  if (v23 >= 0x41)
  {
    result = v22;
    if (v22)
      return (llvm::ConstantInt *****)MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  }
  return result;
}

_QWORD *llvm::SCEVDivision::cannotDivide(_QWORD *this, const llvm::SCEV *a2)
{
  this[2] = this[4];
  this[3] = a2;
  return this;
}

uint64_t sub_1C4F614A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v4;
  unsigned int *v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[64];
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = &v4;
  v6 = v8;
  v7 = 0x800000000;
  v9 = v13;
  v10 = v13;
  v11 = 8;
  v12 = 0;
  sub_1C4F622A0((uint64_t)&v5, a1);
  if ((_DWORD)v7)
  {
    v1 = *((_QWORD *)v6 + v7 - 1);
    LODWORD(v7) = v7 - 1;
    __asm { BR              X10 }
  }
  v2 = v4;
  if (v10 != v9)
    free(v10);
  if (v6 != v8)
    free(v6);
  return v2;
}

_QWORD *sub_1C4F61600(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  char v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
    result = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
    v12 = *result;
    if (*a3 == *result)
    {
LABEL_17:
      v16 = 0;
      goto LABEL_9;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v17 = 0;
      else
        v17 = v12 == -8192;
      if (v17)
        v13 = result;
      v18 = v10 + v14++;
      v10 = v18 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_17;
    }
    if (v13)
      v15 = v13;
    else
      v15 = result;
  }
  else
  {
    v15 = 0;
  }
  result = sub_1C4F52BE0(a2, (uint64_t)a3, a3, v15);
  *result = *a3;
  result[1] = *a4;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v16 = 1;
LABEL_9:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

void sub_1C4F616EC(llvm::ScalarEvolution **a1, uint64_t a2)
{
  const llvm::SCEV *v4;

  v4 = (const llvm::SCEV *)sub_1C61B4734((uint64_t)a1, *(_QWORD *)(a2 + 32));
  if (v4 != *(const llvm::SCEV **)(a2 + 32))
    llvm::ScalarEvolution::getPtrToIntExpr(*a1, v4, *(llvm::Type **)(a2 + 40));
}

unint64_t sub_1C4F6173C(llvm::ScalarEvolution **a1, uint64_t a2)
{
  const llvm::SCEV *v4;

  v4 = (const llvm::SCEV *)sub_1C61B4734((uint64_t)a1, *(_QWORD *)(a2 + 32));
  if (v4 == *(const llvm::SCEV **)(a2 + 32))
    return a2;
  else
    return llvm::ScalarEvolution::getTruncateExpr(*a1, v4, *(llvm::Type **)(a2 + 40), 0);
}

unint64_t sub_1C4F61790(llvm::ScalarEvolution **a1, uint64_t a2)
{
  const llvm::SCEV *v4;

  v4 = (const llvm::SCEV *)sub_1C61B4734((uint64_t)a1, *(_QWORD *)(a2 + 32));
  if (v4 == *(const llvm::SCEV **)(a2 + 32))
    return a2;
  else
    return llvm::ScalarEvolution::getZeroExtendExpr(*a1, v4, *(llvm::Type **)(a2 + 40), 0);
}

uint64_t sub_1C4F617E4(llvm::ScalarEvolution **a1, uint64_t a2)
{
  const llvm::SCEV *v4;

  v4 = (const llvm::SCEV *)sub_1C61B4734((uint64_t)a1, *(_QWORD *)(a2 + 32));
  if (v4 == *(const llvm::SCEV **)(a2 + 32))
    return a2;
  else
    return llvm::ScalarEvolution::getSignExtendExpr(*a1, v4, *(llvm::Type **)(a2 + 40), 0);
}

uint64_t sub_1C4F61838(uint64_t *a1, uint64_t a2)
{
  uint64_t AddExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  AddExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      AddExpr = llvm::ScalarEvolution::getAddExpr(*a1, (uint64_t)&v13, 0, 0);
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return AddExpr;
}

uint64_t sub_1C4F61978(uint64_t *a1, uint64_t a2)
{
  uint64_t MulExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  MulExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      MulExpr = llvm::ScalarEvolution::getMulExpr(*a1, (uint64_t)&v13, 0, 0);
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return MulExpr;
}

const llvm::SCEV *sub_1C4F61AB8(llvm::ScalarEvolution **a1, uint64_t a2)
{
  const llvm::SCEV *v4;
  const llvm::SCEV *v5;

  v4 = (const llvm::SCEV *)sub_1C61B4734((uint64_t)a1, *(_QWORD *)(a2 + 32));
  v5 = (const llvm::SCEV *)sub_1C61B4734((uint64_t)a1, *(_QWORD *)(a2 + 40));
  if (v4 == *(const llvm::SCEV **)(a2 + 32) && v5 == *(const llvm::SCEV **)(a2 + 40))
    return (const llvm::SCEV *)a2;
  else
    return llvm::ScalarEvolution::getUDivExpr(*a1, v4, v5);
}

unint64_t sub_1C4F61B30(uint64_t **a1, unint64_t a2)
{
  unint64_t AddRecExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  AddRecExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(*a1, (uint64_t **)&v13, *(uint64_t ***)(AddRecExpr + 48));
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return AddRecExpr;
}

uint64_t sub_1C4F61C74(uint64_t *a1, uint64_t a2)
{
  uint64_t MinMaxExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  MinMaxExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(*a1, 9, (uint64_t **)&v13);
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return MinMaxExpr;
}

uint64_t sub_1C4F61DB0(uint64_t *a1, uint64_t a2)
{
  uint64_t MinMaxExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  MinMaxExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(*a1, 8, (uint64_t **)&v13);
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return MinMaxExpr;
}

uint64_t sub_1C4F61EEC(uint64_t *a1, uint64_t a2)
{
  uint64_t MinMaxExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  MinMaxExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(*a1, 11, (uint64_t **)&v13);
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return MinMaxExpr;
}

uint64_t sub_1C4F62028(uint64_t *a1, uint64_t a2)
{
  uint64_t MinMaxExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  MinMaxExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(*a1, 10, (uint64_t **)&v13);
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return MinMaxExpr;
}

uint64_t sub_1C4F62164(uint64_t *a1, uint64_t a2)
{
  uint64_t SequentialMinMaxExpr;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  SequentialMinMaxExpr = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_1C61B4734((uint64_t)a1, *v6);
      v10 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v10 = v14;
      }
      *((_QWORD *)v13 + v10) = v9;
      LODWORD(v14) = v14 + 1;
      v11 = v13;
      v5 |= v8 != *((_QWORD *)v13 + v14 - 1);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      SequentialMinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*a1, 12, (unsigned int *)&v13);
      v11 = v13;
    }
    if (v11 != v15)
      free(v11);
  }
  return SequentialMinMaxExpr;
}

void *sub_1C4F622A0(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    ++**(_DWORD **)a1;
    v6 = *(unsigned int *)(a1 + 16);
    if (v6 >= *(_DWORD *)(a1 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
    ++*(_DWORD *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1C4F6231C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

BOOL sub_1C4F62CB4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*a1;
  v3 = sub_1C477672C(*a1, *(_QWORD *)(a2 + 48));
  v4 = v2[1];
  v5 = 16;
  if (v4 == *v2)
    v5 = 20;
  return v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)((char *)v2 + v5));
}

BOOL sub_1C4F62D00(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*a1;
  v3 = sub_1C477672C(*a1, *(_QWORD *)(a2 + 48));
  v4 = v2[1];
  v5 = 16;
  if (v4 == *v2)
    v5 = 20;
  return v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)((char *)v2 + v5));
}

uint64_t llvm::StackLifetime::collectMarkers(llvm::StackLifetime *this)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  const void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  const void *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::AllocaInst *AllocaForValue;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  _QWORD *v41;
  _QWORD *v42;
  _BYTE *v43;
  const void *v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE *v48;
  const void *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  int *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned int v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  _BYTE v111[64];
  char *v112;
  char *v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  _BYTE v120[64];
  void *__p;
  char *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  void *v129;
  _BYTE *v130;
  void *v131;
  void *v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  void *v136;
  _BYTE *v137;
  _QWORD v138[2];
  unsigned int v139;
  _BYTE v140[12];
  char v141;
  uint64_t v142[2];

  v2 = *((_DWORD *)this + 152);
  v3 = *((unsigned int *)this + 310);
  if ((*((_DWORD *)this + 324) & 0x3F) != 0)
  {
    v99 = *((_QWORD *)this + 154) + 8 * v3;
    *(_QWORD *)(v99 - 8) &= ~(-1 << (*((_DWORD *)this + 324) & 0x3F));
  }
  v4 = v3;
  v5 = (_QWORD *)((char *)this + 1232);
  *((_DWORD *)this + 324) = v2;
  v6 = v2 + 63;
  if ((_DWORD)v3 != (v2 + 63) >> 6)
  {
    v7 = v6 >> 6;
    if (v3 > v7)
    {
      *((_DWORD *)this + 310) = v7;
      v4 = v6 >> 6;
    }
    else
    {
      v8 = v3;
      if (v7 > *((_DWORD *)this + 311))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1232, (uint64_t)this + 1248, v7, 8);
        v8 = *((unsigned int *)this + 310);
        v4 = *((_DWORD *)this + 310);
      }
      if (v7 != v3)
        bzero((void *)(*v5 + 8 * v8), 8 * (v7 - v3));
      v4 += v7 - v3;
      *((_DWORD *)this + 310) = v4;
      v2 = *((_DWORD *)this + 324);
    }
  }
  v9 = v2 & 0x3F;
  if (v9)
    *(_QWORD *)(*v5 + 8 * v4 - 8) &= ~(-1 << v9);
  v138[0] = 0;
  v138[1] = 0;
  v139 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)this + 40);
  sub_1C61B4BCC(&v124, *(_QWORD *)(*(_QWORD *)this + 80));
  v11 = v120;
  v115 = v120;
  v12 = v125;
  if (v125 == v124)
  {
    v116 = v120;
    v13 = v125;
  }
  else
  {
    v95 = v126;
    v11 = malloc_type_malloc(8 * v126, 0x4065EBACuLL);
    if (!v11)
    {
      if (v95)
        goto LABEL_198;
      v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v11)
        goto LABEL_198;
    }
    v116 = v11;
    v13 = v124;
    v12 = v125;
  }
  v14 = v127;
  v117 = v126;
  if (v12 == v13)
    v15 = v127;
  else
    v15 = v126;
  if (v15)
  {
    memmove(v11, v12, 8 * v15);
    v14 = v127;
  }
  v118 = v14;
  v119 = v128;
  v122 = 0;
  v123 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v129, v130, (v130 - (_BYTE *)v129) >> 5);
  v16 = v111;
  v106 = v111;
  v17 = v132;
  if (v132 == v131)
  {
    v107 = v111;
    v18 = v132;
  }
  else
  {
    v96 = v133;
    v16 = malloc_type_malloc(8 * v133, 0x4065EBACuLL);
    if (!v16)
    {
      if (v96)
        goto LABEL_198;
      v16 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v16)
        goto LABEL_198;
    }
    v107 = v16;
    v18 = v131;
    v17 = v132;
  }
  v19 = v134;
  v108 = v133;
  if (v17 == v18)
    v20 = v134;
  else
    v20 = v133;
  if (v20)
  {
    memmove(v16, v17, 8 * v20);
    v19 = v134;
  }
  v109 = v19;
  v110 = v135;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  sub_1C4E19D7C(&v112, v136, v137, (v137 - (_BYTE *)v136) >> 5);
  while (1)
  {
    if (v122 - (_BYTE *)__p != v113 - v112)
      goto LABEL_41;
    if (__p == v122)
      break;
    v21 = v112 + 16;
    v22 = (char *)__p + 16;
    while (1)
    {
      v23 = v22 - 16;
      if (*((_QWORD *)v22 - 2) != *((_QWORD *)v21 - 2))
        break;
      v24 = v21[8];
      if (v22[8])
        v25 = v24 == 0;
      else
        v25 = 1;
      if (v25)
      {
        if ((v22[8] == 0) == (v24 != 0))
          break;
      }
      else if (*(_DWORD *)v22 != *(_DWORD *)v21)
      {
        break;
      }
      v21 += 32;
      v22 += 32;
      if (v23 + 32 == v122)
        goto LABEL_73;
    }
LABEL_41:
    v105 = *((_QWORD *)v122 - 4);
    v26 = v105 + 40;
    for (i = *(_QWORD *)(v105 + 48); i != v26; i = *(_QWORD *)(i + 8))
    {
      v28 = i - 24;
      if (i)
        v29 = i - 24;
      else
        v29 = 0;
      v104 = 0;
      if (*(_BYTE *)(v29 + 16) == 84)
      {
        v30 = *(_QWORD *)(v29 - 32);
        if (v30)
        {
          if (!*(_BYTE *)(v30 + 16)
            && *(_QWORD *)(v30 + 24) == *(_QWORD *)(v29 + 72)
            && (*(_BYTE *)(v30 + 33) & 0x20) != 0)
          {
            v104 = i - 24;
            if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)(i - 24)))
            {
              AllocaForValue = (llvm::AllocaInst *)llvm::findAllocaForValue(*(llvm **)(v28 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) + 32), (llvm::Value *)1);
              if (!AllocaForValue)
                goto LABEL_65;
              v32 = (uint64_t)AllocaForValue;
              llvm::AllocaInst::getAllocationSizeInBits(AllocaForValue, (const llvm::DataLayout *)(v10 + 272), (uint64_t)v140);
              if (!v141)
                goto LABEL_65;
              if (*(_DWORD *)&v140[8] == 1)
              if ((v34 = *(_QWORD *)(v28 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF))) != 0
                && *(_BYTE *)(v34 + 16) == 16
                && ((v35 = *(_DWORD *)(v34 + 32), v35 > 0x40)
                  ? (v36 = **(_QWORD **)(v34 + 24))
                  : (v36 = (uint64_t)(*(_QWORD *)(v34 + 24) << -(char)v35) >> -(char)v35),
                    v36 != -1 ? (v37 = v36 == *(_QWORD *)v140 >> 3) : (v37 = 1),
                    v37))
              {
                v142[0] = v32;
                *(_QWORD *)v140 = 0;
                if (sub_1C61252B8((uint64_t *)this + 77, v142, v140)
                  && *(_QWORD *)v140 != *((_QWORD *)this + 77) + 16 * *((unsigned int *)this + 158))
                {
                  v38 = *(unsigned int *)(*(_QWORD *)v140 + 8);
                  v39 = *(_DWORD *)(*(_QWORD *)(i - 56) + 36);
                  v40 = v39 == 168;
                  if (v39 == 168)
                    *(_QWORD *)(*v5 + ((v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
                  v41 = sub_1C61B5730((uint64_t)v138, &v105);
                  v42 = sub_1C61B5A08((_DWORD *)v41 + 2, &v104);
                  *((_DWORD *)v42 + 2) = v38;
                  *((_BYTE *)v42 + 12) = v40;
                }
              }
              else
              {
LABEL_65:
                *((_BYTE *)this + 1328) = 1;
              }
            }
          }
        }
      }
    }
    sub_1C61AF464((void **)&v115);
  }
LABEL_73:
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v107 != v106)
    free(v107);
  if (__p)
  {
    v122 = (char *)__p;
    operator delete(__p);
  }
  if (v116 != v115)
    free(v116);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v132 != v131)
    free(v132);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v125 != v124)
    free(v125);
  sub_1C61B4BCC(&v124, *(_QWORD *)(*(_QWORD *)this + 80));
  v43 = v120;
  v115 = v120;
  v44 = v125;
  if (v125 == v124)
  {
    v116 = v120;
    v45 = v125;
    goto LABEL_91;
  }
  v97 = v126;
  v43 = malloc_type_malloc(8 * v126, 0x4065EBACuLL);
  if (!v43 && (v97 || (v43 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_198:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v116 = v43;
  v45 = v124;
  v44 = v125;
LABEL_91:
  v46 = v127;
  v117 = v126;
  if (v44 == v45)
    v47 = v127;
  else
    v47 = v126;
  if (v47)
  {
    memmove(v43, v44, 8 * v47);
    v46 = v127;
  }
  v118 = v46;
  v119 = v128;
  v122 = 0;
  v123 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v129, v130, (v130 - (_BYTE *)v129) >> 5);
  v48 = v111;
  v106 = v111;
  v49 = v132;
  if (v132 == v131)
  {
    v107 = v111;
    v50 = v132;
  }
  else
  {
    v98 = v133;
    v48 = malloc_type_malloc(8 * v133, 0x4065EBACuLL);
    if (!v48)
    {
      if (v98)
        goto LABEL_198;
      v48 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v48)
        goto LABEL_198;
    }
    v107 = v48;
    v50 = v131;
    v49 = v132;
  }
  v51 = v134;
  v108 = v133;
  if (v49 == v50)
    v52 = v134;
  else
    v52 = v133;
  if (v52)
  {
    memmove(v48, v49, 8 * v52);
    v51 = v134;
  }
  v109 = v51;
  v110 = v135;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  sub_1C4E19D7C(&v112, v136, v137, (v137 - (_BYTE *)v136) >> 5);
  v53 = (char *)this + 40;
  v54 = (char *)this + 56;
  while (2)
  {
    if (v122 - (_BYTE *)__p != v113 - v112)
    {
LABEL_118:
      v142[0] = 0;
      v142[0] = *((_QWORD *)v122 - 4);
      v60 = *((unsigned int *)this + 12);
      v61 = v60;
      if (v60 >= *((unsigned int *)this + 13))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v53, (uint64_t)v54, v60 + 1, 8);
        v61 = *((unsigned int *)this + 12);
      }
      v102 = (uint64_t)v54;
      v103 = (uint64_t)v53;
      *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v61) = 0;
      ++*((_DWORD *)this + 12);
      sub_1C61B4C88((uint64_t)v140, (uint64_t)this + 16, v142, (int *)this + 152);
      v62 = *(_QWORD *)v140;
      v63 = sub_1C61B5730((uint64_t)v138, v142);
      v65 = (uint64_t)(v63 + 1);
      v64 = *((_DWORD *)v63 + 2);
      if (v64 >= 2)
      {
        v66 = (_QWORD *)(v62 + 8);
        if ((v64 & 0xFFFFFFFE) == 2)
        {
          v67 = sub_1C61B4D30((int *)v63 + 2);
          v68 = *(_QWORD *)v67;
          v69 = sub_1C61B614C((uint64_t)this + 1304, v142);
          *(_DWORD *)v140 = *((_DWORD *)this + 12);
          *(_QWORD *)&v140[4] = *((_QWORD *)v67 + 1);
          sub_1C476CB98((_DWORD *)v69 + 2, *(uint64_t *)v140, *(int *)&v140[8]);
          v70 = *((unsigned int *)this + 12);
          if (v70 >= *((unsigned int *)this + 13))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v103, v102, v70 + 1, 8);
            v70 = *((unsigned int *)this + 12);
          }
          *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v70) = v68;
          ++*((_DWORD *)this + 12);
          v71 = v67[2];
          v72 = 1 << v71;
          v73 = v71 >> 6;
          if (*((_BYTE *)v67 + 12))
          {
            *(_QWORD *)(*(_QWORD *)(v62 + 80) + 8 * v73) &= ~v72;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v73) &= ~v72;
            v66 = (_QWORD *)(v62 + 80);
          }
          *(_QWORD *)(*v66 + 8 * v73) |= v72;
        }
        else
        {
          v74 = v142[0] + 40;
          v75 = *(_QWORD *)(v142[0] + 48);
          if (v75 != v142[0] + 40)
          {
            v76 = v63;
            v101 = v63 + 2;
            do
            {
              if (v75)
                v77 = v75 - 24;
              else
                v77 = 0;
              if (*(_BYTE *)(v77 + 16) == 84)
              {
                v78 = *(_QWORD *)(v77 - 32);
                if (v78)
                {
                  if (!*(_BYTE *)(v78 + 16)
                    && *(_QWORD *)(v78 + 24) == *(_QWORD *)(v77 + 72)
                    && (*(_BYTE *)(v78 + 33) & 0x20) != 0)
                  {
                    v79 = sub_1C61B4DA4(v65, v75 - 24);
                    v80 = v101;
                    if ((v76[1] & 1) == 0)
                      v80 = (_QWORD *)v76[2];
                    v81 = *((_DWORD *)v76 + 6);
                    if ((v76[1] & 1) != 0)
                      v81 = 4;
                    if (&v80[2 * v81] != (_QWORD *)v79)
                    {
                      v100 = v79;
                      v82 = sub_1C61B614C((uint64_t)this + 1304, v142);
                      *(_DWORD *)v140 = *((_DWORD *)this + 12);
                      *(_QWORD *)&v140[4] = *(_QWORD *)(v100 + 8);
                      sub_1C476CB98((_DWORD *)v82 + 2, *(uint64_t *)v140, *(int *)&v140[8]);
                      v83 = *((unsigned int *)this + 12);
                      if (v83 >= *((unsigned int *)this + 13))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v103, v102, v83 + 1, 8);
                        v83 = *((unsigned int *)this + 12);
                      }
                      *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v83) = v75 - 24;
                      ++*((_DWORD *)this + 12);
                      v84 = *(unsigned int *)(v100 + 8);
                      v85 = 1 << v84;
                      v86 = (_QWORD *)(v62 + 8);
                      if (*(_BYTE *)(v100 + 12))
                        v87 = (_QWORD *)(v62 + 80);
                      else
                        v87 = (_QWORD *)(v62 + 8);
                      if (!*(_BYTE *)(v100 + 12))
                        v86 = (_QWORD *)(v62 + 80);
                      v88 = (v84 >> 3) & 0x1FFFFFF8;
                      *(_QWORD *)(*v87 + v88) &= ~v85;
                      *(_QWORD *)(*v86 + v88) |= v85;
                    }
                  }
                }
              }
              v75 = *(_QWORD *)(v75 + 8);
            }
            while (v75 != v74);
          }
        }
      }
      v89 = *((_DWORD *)this + 12);
      v90 = sub_1C61B6040((uint64_t *)this + 71, v142);
      *((_DWORD *)v90 + 2) = v60;
      *((_DWORD *)v90 + 3) = v89;
      sub_1C61AF464((void **)&v115);
      v54 = (char *)v102;
      v53 = (char *)v103;
      continue;
    }
    break;
  }
  if (__p != v122)
  {
    v55 = v112 + 16;
    v56 = (char *)__p + 16;
    do
    {
      v57 = v56 - 16;
      if (*((_QWORD *)v56 - 2) != *((_QWORD *)v55 - 2))
        goto LABEL_118;
      v58 = v55[8];
      if (v56[8])
        v59 = v58 == 0;
      else
        v59 = 1;
      if (v59)
      {
        if ((v56[8] == 0) == (v58 != 0))
          goto LABEL_118;
      }
      else if (*(_DWORD *)v56 != *(_DWORD *)v55)
      {
        goto LABEL_118;
      }
      v55 += 32;
      v56 += 32;
    }
    while (v57 + 32 != v122);
  }
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v107 != v106)
    free(v107);
  if (__p)
  {
    v122 = (char *)__p;
    operator delete(__p);
  }
  if (v116 != v115)
    free(v116);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v132 != v131)
    free(v132);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v125 != v124)
    free(v125);
  v91 = v138[0];
  if (v139)
  {
    v92 = (_QWORD *)(v138[0] + 16);
    v93 = 80 * v139;
    do
    {
      if ((*(v92 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && (*(_BYTE *)(v92 - 1) & 1) == 0)
        MEMORY[0x1CAA32FB4](*v92, 8);
      v92 += 10;
      v93 -= 80;
    }
    while (v93);
  }
  return MEMORY[0x1CAA32FB4](v91, 8);
}

void llvm::StackLifetime::calculateLocalLiveness(llvm::StackLifetime *this)
{
  uint64_t *v2;
  char *v3;
  const void *v4;
  _BYTE *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  _BYTE *v10;
  void *v11;
  unsigned int v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  BOOL v52;
  int v53;
  char *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  const void **v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  _BYTE *v81;
  char *v82;
  char *v83;
  unsigned int v84;
  BOOL v85;
  unint64_t v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  char *v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  char *v118;
  unsigned int v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  llvm::StackLifetime *v129;
  unsigned int v130;
  llvm::StackLifetime *v131;
  unsigned int v132;
  int v133;
  int v134;
  const void **v135;
  int v136;
  const void **v137;
  uint64_t v138;
  llvm::StackLifetime *v139;
  llvm::StackLifetime *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE v145[64];
  char *v146;
  char *v147;
  uint64_t v148;
  _BYTE *v149;
  _BYTE *v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  _BYTE v154[64];
  void *__p;
  char *v156;
  uint64_t v157;
  void *v158;
  void *v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  void *v163;
  _BYTE *v164;
  void *v165;
  void *v166;
  unsigned int v167;
  unsigned int v168;
  void *v169;
  _BYTE *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v2 = &v177;
  v3 = (char *)&v173;
  do
  {
    sub_1C61B4BCC(&v158, *(_QWORD *)(*(_QWORD *)this + 80));
    v149 = v154;
    v4 = v159;
    if (v159 == v158)
    {
      v150 = v154;
      v5 = v154;
      v6 = v159;
    }
    else
    {
      v129 = this;
      v130 = v160;
      v5 = malloc_type_malloc(8 * v160, 0x4065EBACuLL);
      if (!v5 && (v130 || (v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_220:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v150 = v5;
      v6 = v158;
      v4 = v159;
      this = v129;
    }
    v7 = v161;
    v151 = v160;
    if (v4 == v6)
      v8 = v161;
    else
      v8 = v160;
    if (v8)
    {
      memmove(v5, v4, 8 * v8);
      v7 = v161;
    }
    v152 = v7;
    v153 = v162;
    v156 = 0;
    v157 = 0;
    __p = 0;
    sub_1C4E19D7C(&__p, v163, v164, (v164 - (_BYTE *)v163) >> 5);
    v9 = v166;
    if (v166 == v165)
    {
      v144 = v145;
      v10 = v145;
      v11 = v166;
    }
    else
    {
      v131 = this;
      v132 = v167;
      v10 = malloc_type_malloc(8 * v167, 0x4065EBACuLL);
      if (!v10)
      {
        if (v132)
          goto LABEL_220;
        v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v10)
          goto LABEL_220;
      }
      v144 = v10;
      v11 = v165;
      v9 = v166;
      this = v131;
    }
    if (v9 == v11)
      v12 = v168;
    else
      v12 = v167;
    if (v12)
      memmove(v10, v9, 8 * v12);
    v147 = 0;
    v148 = 0;
    v146 = 0;
    sub_1C4E19D7C(&v146, v169, v170, (v170 - (_BYTE *)v169) >> 5);
    v13 = 0;
    while (1)
    {
      if (v156 - (_BYTE *)__p != v147 - v146)
        goto LABEL_31;
      if (__p == v156)
        break;
      v14 = v146 + 16;
      v15 = (char *)__p + 16;
      while (1)
      {
        v16 = v15 - 16;
        if (*((_QWORD *)v15 - 2) != *((_QWORD *)v14 - 2))
          break;
        v17 = v14[8];
        if (v15[8])
          v18 = v17 == 0;
        else
          v18 = 1;
        if (v18)
        {
          if ((v15[8] == 0) == (v17 != 0))
            break;
        }
        else if (*(_DWORD *)v15 != *(_DWORD *)v14)
        {
          break;
        }
        v14 += 32;
        v15 += 32;
        if (v16 + 32 == v156)
          goto LABEL_193;
      }
LABEL_31:
      v142 = v13;
      v19 = *((_QWORD *)v156 - 4);
      v175 = 0;
      v20 = sub_1C61B5C98(*((_QWORD *)this + 2), *((_DWORD *)this + 8), v19, &v175);
      v21 = *((_QWORD *)this + 2);
      v22 = *((_DWORD *)this + 8);
      if (v20)
        v23 = v175;
      else
        v23 = (uint64_t *)(v21 + 296 * v22);
      v143 = (uint64_t)v2;
      v175 = v2;
      v176 = 0x600000000;
      v178 = 0;
      v24 = *(_QWORD *)(v19 + 8);
      if (!v24)
      {
LABEL_44:
        v29 = 0;
        v171 = v3;
        v172 = 0x600000000;
        goto LABEL_45;
      }
      while (1)
      {
        v25 = *(_QWORD *)(v24 + 24);
        v26 = *(unsigned __int8 *)(v25 + 16);
        v27 = v25 && v26 >= 0x1C;
        if (v27 && v26 - 29 <= 0xA)
          break;
        v24 = *(_QWORD *)(v24 + 8);
        if (!v24)
          goto LABEL_44;
      }
LABEL_66:
      v49 = *(_QWORD *)(v25 + 40);
      v171 = 0;
      v50 = sub_1C61B5C98(v21, v22, v49, &v171);
      v51 = v171;
      if (v50)
        v52 = v171 == (char *)(*((_QWORD *)this + 2) + 296 * *((unsigned int *)this + 8));
      else
        v52 = 1;
      if (v52)
        goto LABEL_113;
      v53 = *((_DWORD *)this + 2);
      if (v53 != 1)
      {
        if (!v53)
        {
          v54 = v3;
          v55 = *((_DWORD *)v171 + 72);
          if (v178 < v55)
          {
            v73 = v176;
            if ((v178 & 0x3F) != 0)
              v175[v176 - 1] &= ~(-1 << (v178 & 0x3F));
            v74 = v73;
            v178 = v55;
            v75 = v55 + 63;
            if ((_DWORD)v73 != (v55 + 63) >> 6)
            {
              v76 = v75 >> 6;
              if (v73 > v76)
              {
                LODWORD(v176) = v75 >> 6;
                v74 = v75 >> 6;
              }
              else
              {
                v77 = v73;
                if (v76 > HIDWORD(v176))
                {
                  v87 = v75 >> 6;
                  v138 = v73;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v143, v87, 8);
                  v76 = v87;
                  v73 = v138;
                  v77 = v176;
                  v74 = v176;
                }
                if (v76 != v73)
                {
                  v134 = v76;
                  v136 = v73;
                  bzero(&v175[v77], 8 * (v76 - v73));
                  LODWORD(v76) = v134;
                  LODWORD(v73) = v136;
                }
                v74 += v76 - v73;
                LODWORD(v176) = v74;
                LOBYTE(v55) = v178;
              }
            }
            v78 = v55 & 0x3F;
            if (v78)
              v175[v74 - 1] &= ~(-1 << v78);
          }
          v56 = *((unsigned int *)v51 + 58);
          v3 = v54;
          if ((_DWORD)v56)
          {
            v57 = (uint64_t *)*((_QWORD *)v51 + 28);
            v58 = v175;
            do
            {
              v59 = *v57++;
              *v58++ |= v59;
              --v56;
            }
            while (v56);
          }
        }
        goto LABEL_113;
      }
      if (!v178)
      {
        v60 = (const void **)(v171 + 224);
        if (&v175 != (uint64_t **)(v171 + 224))
        {
          v61 = v3;
          v62 = *((unsigned int *)v171 + 58);
          v63 = v176;
          if (v176 >= v62)
          {
            if ((_DWORD)v62)
            {
              v72 = *((_DWORD *)v171 + 58);
              memmove(v175, *v60, 8 * v62);
              goto LABEL_110;
            }
          }
          else
          {
            if (HIDWORD(v176) < v62)
            {
              LODWORD(v176) = 0;
              v79 = v62;
              v137 = (const void **)(v171 + 224);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v143, v62, 8);
              v60 = v137;
              LODWORD(v62) = v79;
            }
            else if ((_DWORD)v176)
            {
              v133 = *((_DWORD *)v171 + 58);
              v135 = (const void **)(v171 + 224);
              memmove(v175, *v60, 8 * v176);
              LODWORD(v62) = v133;
              v60 = v135;
              goto LABEL_108;
            }
            v63 = 0;
LABEL_108:
            v80 = *((unsigned int *)v51 + 58);
            if (v63 != v80)
            {
              v81 = *v60;
              v82 = &v81[8 * v63];
              v83 = (char *)&v175[v63];
              v72 = v62;
              memcpy(v83, v82, &v81[8 * v80] - v82);
LABEL_110:
              LODWORD(v62) = v72;
            }
          }
          LODWORD(v176) = v62;
          v3 = v61;
        }
        v178 = *((_DWORD *)v51 + 72);
        goto LABEL_113;
      }
      v64 = v176;
      v65 = *((_DWORD *)v171 + 58);
      if (v65 >= v176)
        v66 = v176;
      else
        v66 = v65;
      if ((_DWORD)v66)
      {
        v67 = (uint64_t *)*((_QWORD *)v171 + 28);
        v68 = v175;
        v69 = v66;
        do
        {
          v70 = *v67++;
          *v68++ &= v70;
          --v69;
        }
        while (v69);
      }
      if (v64 > v65)
      {
        v71 = v175;
        do
        {
          v71[v66] = 0;
          LODWORD(v66) = v66 + 1;
        }
        while (v64 != (_DWORD)v66);
      }
LABEL_113:
      while (1)
      {
        v24 = *(_QWORD *)(v24 + 8);
        if (!v24)
          break;
        v25 = *(_QWORD *)(v24 + 24);
        v84 = *(unsigned __int8 *)(v25 + 16);
        if (v25)
          v85 = v84 >= 0x1C;
        else
          v85 = 0;
        if (v85 && v84 - 29 <= 0xA)
        {
          v21 = *((_QWORD *)this + 2);
          v22 = *((_DWORD *)this + 8);
          goto LABEL_66;
        }
      }
      v29 = v176;
      v171 = v3;
      v172 = 0x600000000;
      if ((_DWORD)v176)
      {
        v118 = v3;
        v119 = v176;
        if (v176 < 7)
          goto LABEL_169;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v171, (uint64_t)v3, v176, 8);
        v119 = v176;
        if ((_DWORD)v176)
        {
          v118 = v171;
LABEL_169:
          memcpy(v118, v175, 8 * v119);
        }
        LODWORD(v172) = v29;
      }
LABEL_45:
      v30 = v178;
      v174 = v178;
      LODWORD(v31) = *((_DWORD *)v23 + 22);
      if (v31 >= v29)
        v31 = v29;
      else
        v31 = v31;
      if ((_DWORD)v31)
      {
        v32 = (uint64_t *)v23[10];
        v33 = v171;
        do
        {
          v34 = *v32++;
          *(_QWORD *)v33 &= ~v34;
          v33 += 8;
          --v31;
        }
        while (v31);
      }
      v35 = *((_DWORD *)v23 + 18);
      if (v30 < v35)
      {
        v141 = (uint64_t)v3;
        v123 = v29;
        v124 = v30 & 0x3F;
        if (v124)
          *(_QWORD *)&v171[8 * v29 - 8] &= ~(-1 << v124);
        v174 = v35;
        v125 = v35 + 63;
        if (v29 != (v35 + 63) >> 6)
        {
          v126 = v125 >> 6;
          if (v29 > v126)
          {
            LODWORD(v172) = v125 >> 6;
            v29 = v125 >> 6;
          }
          else
          {
            v127 = v29;
            if (v126 > HIDWORD(v172))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v171, v141, v125 >> 6, 8);
              v127 = v172;
              v29 = v172;
            }
            if (v126 != v123)
              bzero(&v171[8 * v127], 8 * (v126 - v123));
            v29 += v126 - v123;
            LODWORD(v172) = v29;
            LOBYTE(v35) = v174;
          }
        }
        v128 = v35 & 0x3F;
        v3 = (char *)v141;
        if (v128)
          *(_QWORD *)&v171[8 * v29 - 8] &= ~(-1 << v128);
      }
      v36 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v36)
      {
        v37 = (uint64_t *)v23[1];
        v38 = v171;
        do
        {
          v39 = *v37++;
          *(_QWORD *)v38 |= v39;
          v38 += 8;
          --v36;
        }
        while (v36);
      }
      v40 = (uint64_t **)(v23 + 19);
      v41 = *((unsigned int *)v23 + 40);
      if (v41 >= v176)
        v42 = v176;
      else
        v42 = v41;
      if ((_DWORD)v42)
      {
        v43 = v175;
        v44 = *v40;
        v45 = v42;
        while (1)
        {
          v47 = *v43++;
          v46 = v47;
          v48 = *v44++;
          if ((v46 & ~v48) != 0)
            break;
          if (!--v45)
            goto LABEL_62;
        }
      }
      else
      {
LABEL_62:
        if (v176 <= v41)
          goto LABEL_139;
        while (!v175[v42])
        {
          LODWORD(v42) = v42 + 1;
          if ((_DWORD)v176 == (_DWORD)v42)
            goto LABEL_139;
        }
      }
      v88 = v178;
      if (*((_DWORD *)v23 + 54) < v178)
      {
        v89 = v23[27] & 0x3F;
        if (v89)
          (*v40)[v41 - 1] &= ~(-1 << v89);
        *((_DWORD *)v23 + 54) = v88;
        v90 = v88 + 63;
        if ((_DWORD)v41 != (v88 + 63) >> 6)
        {
          v91 = v3;
          v139 = this;
          v92 = v90 >> 6;
          if (v41 > v92)
          {
            *((_DWORD *)v23 + 40) = v92;
            LODWORD(v41) = v90 >> 6;
          }
          else
          {
            v93 = v41;
            v94 = v41;
            if (v92 > *((_DWORD *)v23 + 41))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v23 + 19), (uint64_t)(v23 + 21), v92, 8);
              v93 = *((unsigned int *)v23 + 40);
              v94 = *((_DWORD *)v23 + 40);
            }
            if (v92 != v41)
              bzero(&(*v40)[v93], 8 * (v92 - v41));
            LODWORD(v41) = v94 + v92 - v41;
            *((_DWORD *)v23 + 40) = v41;
            v88 = *((_DWORD *)v23 + 54);
          }
          this = v139;
          v3 = v91;
        }
        v95 = v88 & 0x3F;
        if (v95)
          (*v40)[v41 - 1] &= ~(-1 << v95);
      }
      v96 = v176;
      if ((_DWORD)v176)
      {
        v97 = v175;
        v98 = *v40;
        do
        {
          v99 = *v97++;
          *v98++ |= v99;
          --v96;
        }
        while (v96);
      }
LABEL_139:
      v100 = v3;
      v101 = (uint64_t **)(v23 + 28);
      v102 = *((unsigned int *)v23 + 58);
      if (v102 >= v172)
        v103 = v172;
      else
        v103 = v102;
      v104 = v171;
      v2 = (uint64_t *)v143;
      if ((_DWORD)v103)
      {
        v105 = *v101;
        v106 = v103;
        v107 = (uint64_t *)v171;
        while (1)
        {
          v109 = *v107++;
          v108 = v109;
          v110 = *v105++;
          if ((v108 & ~v110) != 0)
            break;
          if (!--v106)
            goto LABEL_146;
        }
      }
      else
      {
LABEL_146:
        if (v172 <= v102)
        {
LABEL_149:
          v3 = v100;
          v13 = v142;
          goto LABEL_174;
        }
        while (!*(_QWORD *)&v171[8 * v103])
        {
          LODWORD(v103) = v103 + 1;
          if ((_DWORD)v172 == (_DWORD)v103)
            goto LABEL_149;
        }
      }
      v111 = v174;
      if (*((_DWORD *)v23 + 72) < v174)
      {
        v112 = v23[36] & 0x3F;
        if (v112)
          (*v101)[v102 - 1] &= ~(-1 << v112);
        *((_DWORD *)v23 + 72) = v111;
        v113 = v111 + 63;
        if ((_DWORD)v102 != (v111 + 63) >> 6)
        {
          v140 = this;
          v114 = v113 >> 6;
          if (v102 > v114)
          {
            *((_DWORD *)v23 + 58) = v114;
            LODWORD(v102) = v113 >> 6;
          }
          else
          {
            v115 = v102;
            v116 = v102;
            if (v114 > *((_DWORD *)v23 + 59))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v23 + 28), (uint64_t)(v23 + 30), v114, 8);
              v115 = *((unsigned int *)v23 + 58);
              v116 = *((_DWORD *)v23 + 58);
            }
            if (v114 != v102)
              bzero(&(*v101)[v115], 8 * (v114 - v102));
            LODWORD(v102) = v116 + v114 - v102;
            *((_DWORD *)v23 + 58) = v102;
            v111 = *((_DWORD *)v23 + 72);
          }
          this = v140;
          v2 = (uint64_t *)v143;
        }
        v117 = v111 & 0x3F;
        if (v117)
          (*v101)[v102 - 1] &= ~(-1 << v117);
      }
      v104 = v171;
      if ((_DWORD)v172)
      {
        v120 = 0;
        v121 = *v101;
        v122 = 8 * v172;
        v3 = v100;
        do
        {
          v121[v120 / 8] |= *(_QWORD *)&v104[v120];
          v120 += 8;
        }
        while (v122 != v120);
        v13 = 1;
      }
      else
      {
        v13 = 1;
        v3 = v100;
      }
LABEL_174:
      if (v104 != v3)
        free(v104);
      if (v175 != v2)
        free(v175);
      sub_1C61AF464((void **)&v149);
    }
LABEL_193:
    if (v146)
    {
      v147 = v146;
      operator delete(v146);
    }
    if (v144 != v145)
      free(v144);
    if (__p)
    {
      v156 = (char *)__p;
      operator delete(__p);
    }
    if (v150 != v149)
      free(v150);
    if (v169)
    {
      v170 = v169;
      operator delete(v169);
    }
    if (v166 != v165)
      free(v166);
    if (v163)
    {
      v164 = v163;
      operator delete(v163);
    }
    if (v159 != v158)
      free(v159);
  }
  while ((v13 & 1) != 0);
}

uint64_t llvm::StackLifetime::calculateLiveIntervals(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[32];
  void *v73;
  uint64_t v74;
  _BYTE v75[48];
  int v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[48];
  int v80;
  uint64_t v81;
  _QWORD v82[38];

  v1 = this;
  v82[36] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 16);
  v3 = *(_DWORD *)(this + 32);
  if (*(_DWORD *)(this + 24))
  {
    if (v3)
    {
      v4 = 296 * v3;
      v5 = *(_QWORD *)(this + 16);
      while ((*(_QWORD *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 296;
        v4 -= 296;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = *(_QWORD *)(this + 16);
    }
  }
  else
  {
LABEL_6:
    v5 = v2 + 296 * v3;
  }
  v67 = v2 + 296 * v3;
  if (v5 != v67)
  {
    v65 = (uint64_t *)(this + 568);
    v6 = v79;
    v64 = this + 1304;
    v66 = v2 + 296 * v3;
    while (1)
    {
      v81 = *(_QWORD *)v5;
      sub_1C61B5424((uint64_t)v82, (_DWORD *)(v5 + 8));
      v69 = v81;
      v7 = sub_1C61B6040(v65, &v69);
      v9 = *((_DWORD *)v7 + 2);
      v8 = *((_DWORD *)v7 + 3);
      v77 = v79;
      v78 = 0x600000000;
      v73 = v75;
      v74 = 0x600000000;
      v76 = 0;
      v10 = *(_DWORD *)(v1 + 608);
      v80 = v10;
      v11 = v10 + 63;
      if ((v10 + 63) < 0x40)
      {
        v14 = 0;
      }
      else
      {
        v12 = v11 >> 6;
        if (v11 >= 0x1C0)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v11 >> 6, 8);
          v6 = v77;
          v13 = v78;
          LOBYTE(v10) = v80;
          v68 = v78;
        }
        else
        {
          v13 = 0;
          v68 = 0;
        }
        bzero(&v6[8 * v13], 8 * v12);
        v14 = v68 + v12;
        LODWORD(v78) = v68 + v12;
      }
      if ((v10 & 0x3F) != 0)
        *(_QWORD *)&v6[8 * v14 - 8] &= ~(-1 << (v10 & 0x3F));
      v15 = *(_DWORD *)(v1 + 608);
      v16 = v74;
      if ((v76 & 0x3F) != 0)
        *((_QWORD *)v73 + v74 - 1) &= ~(-1 << (v76 & 0x3F));
      v17 = v16;
      v76 = v15;
      v18 = v15 + 63;
      if ((_DWORD)v16 != (v15 + 63) >> 6)
      {
        v19 = v18 >> 6;
        if (v16 > v19)
        {
          LODWORD(v74) = v18 >> 6;
          v17 = v18 >> 6;
        }
        else
        {
          v20 = v16;
          if (v19 > HIDWORD(v74))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, (uint64_t)v75, v19, 8);
            v20 = v74;
            v17 = v74;
          }
          if (v19 != v16)
            bzero((char *)v73 + 8 * v20, 8 * (v19 - v16));
          v17 += v19 - v16;
          LODWORD(v74) = v17;
          LOBYTE(v15) = v76;
        }
      }
      v21 = v15 & 0x3F;
      v6 = v79;
      if (v21)
        *((_QWORD *)v73 + v17 - 1) &= ~(-1 << v21);
      v70 = v72;
      v71 = 0x800000000;
      v22 = *(unsigned int *)(v1 + 608);
      if ((_DWORD)v22)
      {
        if (v22 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, *(unsigned int *)(v1 + 608), 4);
          v23 = v71;
        }
        else
        {
          v23 = 0;
        }
        if (v22 != v23)
          bzero((char *)v70 + 4 * v23, 4 * (v22 - v23));
        LODWORD(v71) = v22;
        v24 = *(unsigned int *)(v1 + 608);
        if ((_DWORD)v24)
        {
          v25 = 0;
          v26 = v82[18];
          v27 = v77;
          v28 = v70;
          do
          {
            v29 = v25 >> 6;
            if (((1 << v25) & *(_QWORD *)(v26 + 8 * v29)) != 0)
            {
              v27[v29] |= 1 << v25;
              v28[v25] = v9;
              v24 = *(unsigned int *)(v1 + 608);
            }
            ++v25;
          }
          while (v25 < v24);
        }
      }
      v30 = sub_1C61B614C(v64, &v69);
      v31 = *((_DWORD *)v30 + 4);
      v32 = v70;
      if (v31)
      {
        v33 = v30[1];
        v34 = v33 + 12 * v31;
        v35 = v77;
        v36 = v73;
        while (1)
        {
          v37 = *(_DWORD *)v33;
          v38 = *(unsigned int *)(v33 + 4);
          v39 = 1 << v38;
          v40 = v38 >> 6;
          v41 = v35[v38 >> 6];
          v42 = (1 << v38) & v41;
          if (*(_BYTE *)(v33 + 8))
          {
            if (!v42)
            {
              v35[v40] = v39 | v41;
              v36[v40] &= ~v39;
              v32[v38] = v37;
            }
            goto LABEL_49;
          }
          if (v42)
            break;
LABEL_48:
          v36[v40] |= v39;
LABEL_49:
          v33 += 12;
          if (v33 == v34)
          {
            v32 = v70;
            goto LABEL_57;
          }
        }
        v43 = v32[v38];
        if (v43 != v37)
        {
          v44 = (uint64_t *)(*(_QWORD *)(v1 + 640) + 72 * v38);
          v45 = v43 >> 6;
          if (v43 >> 6 == v37 >> 6)
          {
            v46 = (-1 << v43) + (1 << v37);
            v47 = (_QWORD *)(*v44 + 8 * v45);
          }
          else
          {
            v48 = *v44;
            *(_QWORD *)(v48 + 8 * v45) |= -1 << v43;
            v49 = (v43 + 63) & 0xFFFFFFC0;
            if (v49 + 64 <= v37)
            {
              do
              {
                *(_QWORD *)(v48 + 8 * (v49 >> 6)) = -1;
                v50 = v49 + 64;
                v51 = v49 + 128;
                v49 += 64;
              }
              while (v51 <= v37);
            }
            else
            {
              v50 = v49;
            }
            if (v50 >= v37)
              goto LABEL_47;
            v46 = ~(-1 << v37);
            v47 = (_QWORD *)(v48 + 8 * (v50 >> 6));
          }
          *v47 |= v46;
        }
LABEL_47:
        v35[v40] &= ~v39;
        goto LABEL_48;
      }
LABEL_57:
      v52 = *(unsigned int *)(v1 + 608);
      if ((_DWORD)v52)
        break;
LABEL_58:
      if (v32 != (_DWORD *)v72)
        free(v32);
      if (v73 != v75)
        free(v73);
      if (v77 != v79)
        free(v77);
      this = sub_1C61B54F8((uint64_t)v82);
      v53 = v5 + 296;
      v5 = v66;
      if (v53 != v66)
      {
        v5 = v53;
        while ((*(_QWORD *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v5 += 296;
          if (v5 == v66)
          {
            v5 = v66;
            break;
          }
        }
      }
      if (v5 == v67)
        return this;
    }
    v54 = 0;
    v55 = v77;
    while (1)
    {
      if (((v55[v54 >> 6] >> v54) & 1) != 0)
      {
        v56 = v32[v54];
        if (v56 != v8)
        {
          v57 = -1 << v56;
          v58 = *(_QWORD *)(*(_QWORD *)(v1 + 640) + 72 * v54);
          if (v56 >> 6 == v8 >> 6)
          {
            v59 = v57 + (1 << v8);
            v60 = v8 >> 6;
          }
          else
          {
            *(_QWORD *)(v58 + 8 * (v56 >> 6)) |= v57;
            v61 = (v56 + 63) & 0xFFFFFFC0;
            if (v61 + 64 <= v8)
            {
              do
              {
                *(_QWORD *)(v58 + 8 * (v61 >> 6)) = -1;
                v62 = v61 + 64;
                v63 = v61 + 128;
                v61 += 64;
              }
              while (v63 <= v8);
            }
            else
            {
              v62 = v61;
            }
            if (v62 >= v8)
              goto LABEL_77;
            v60 = v62 >> 6;
            v59 = ~(-1 << v8);
          }
          *(_QWORD *)(v58 + 8 * v60) |= v59;
        }
      }
LABEL_77:
      if (++v54 == v52)
        goto LABEL_58;
    }
  }
  return this;
}

llvm::raw_ostream *llvm::StackLifetime::dumpBlockLiveness(llvm::StackLifetime *this)
{
  llvm::raw_ostream *result;
  _OWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  llvm *v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  size_t *v27;
  const void *v28;
  size_t v29;
  size_t v30;
  _BYTE *v31;
  _WORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[38];

  v42[36] = *MEMORY[0x1E0C80C00];
  result = llvm::dbgs(this);
  v3 = (_OWORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v3 > 0xFuLL)
  {
    *v3 = *(_OWORD *)"Block liveness:\n";
    *((_QWORD *)result + 4) += 16;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "Block liveness:\n", 0x10uLL);
  }
  v4 = *((_QWORD *)this + 2);
  v5 = *((_DWORD *)this + 8);
  v6 = v4 + 296 * v5;
  if (*((_DWORD *)this + 6))
  {
    if (v5)
    {
      v7 = 296 * v5;
      v8 = *((_QWORD *)this + 2);
      while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 296;
        v7 -= 296;
        if (!v7)
          goto LABEL_8;
      }
    }
    else
    {
      v8 = *((_QWORD *)this + 2);
    }
  }
  else
  {
LABEL_8:
    v8 = v4 + 296 * v5;
  }
  v9 = v4 + 296 * v5;
  if (v8 != v9)
  {
    while (1)
    {
      v41 = *(_QWORD *)v8;
      sub_1C61B5424((uint64_t)v42, (_DWORD *)(v8 + 8));
      v10 = v41;
      v40 = 0;
      if (sub_1C61B5C98(*((_QWORD *)this + 2), *((_DWORD *)this + 8), v41, &v40))
        v11 = v40;
      else
        v11 = *((_QWORD *)this + 2) + 296 * *((unsigned int *)this + 8);
      v39 = 0;
      v40 = v10;
      v12 = (llvm *)sub_1C61252B8((uint64_t *)this + 71, &v40, &v39);
      if ((_DWORD)v12)
        v13 = v39;
      else
        v13 = *((_QWORD *)this + 71) + 16 * *((unsigned int *)this + 146);
      v15 = *(unsigned int *)(v13 + 8);
      v14 = *(unsigned int *)(v13 + 12);
      v16 = llvm::dbgs(v12);
      v17 = v16;
      v18 = *((_QWORD *)v16 + 4);
      if ((unint64_t)(*((_QWORD *)v16 + 3) - v18) > 5)
      {
        *(_WORD *)(v18 + 4) = 10272;
        *(_DWORD *)v18 = 1111629856;
        *((_QWORD *)v16 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v16, "  BB (", 6uLL);
      }
      if ((*(_BYTE *)(v10 + 23) & 0x10) == 0)
        goto LABEL_29;
      v19 = ***(_QWORD ***)v10;
      v20 = *(_QWORD *)(v19 + 152);
      v21 = *(unsigned int *)(v19 + 168);
      if (!(_DWORD)v21)
        goto LABEL_26;
      LODWORD(v22) = (v21 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v23 = (uint64_t *)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 != v10)
        break;
LABEL_27:
      v27 = (size_t *)v23[1];
      v30 = *v27;
      v28 = v27 + 2;
      v29 = v30;
      v31 = (_BYTE *)*((_QWORD *)v17 + 4);
      if (v30 <= *((_QWORD *)v17 + 3) - (_QWORD)v31)
      {
        if (v29)
        {
          memcpy(v31, v28, v29);
          v31 = (_BYTE *)(*((_QWORD *)v17 + 4) + v29);
          *((_QWORD *)v17 + 4) = v31;
        }
        goto LABEL_32;
      }
      llvm::raw_ostream::write(v17, (const char *)v28, v29);
LABEL_29:
      v31 = (_BYTE *)*((_QWORD *)v17 + 4);
LABEL_32:
      if (*((_QWORD *)v17 + 3) - (_QWORD)v31 > 2uLL)
      {
        v31[2] = 91;
        *(_WORD *)v31 = 8233;
        *((_QWORD *)v17 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v17, ") [", 3uLL);
      }
      sub_1C5E21910(v17, v15, 0, 0, 0);
      v32 = (_WORD *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v32 > 1uLL)
      {
        *v32 = 8236;
        *((_QWORD *)v17 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", ", 2uLL);
      }
      sub_1C5E21910(v17, v14, 0, 0, 0);
      v33 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v33) > 8)
      {
        *(_BYTE *)(v33 + 8) = 32;
        *(_QWORD *)v33 = *(_QWORD *)"): begin ";
        *((_QWORD *)v17 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v17, "): begin ", 9uLL);
      }
      sub_1C4F64FB4(v17, v11 + 8);
      v34 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v34) > 5)
      {
        *(_WORD *)(v34 + 4) = 8292;
        *(_DWORD *)v34 = 1852121132;
        *((_QWORD *)v17 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", end ", 6uLL);
      }
      sub_1C4F64FB4(v17, v11 + 80);
      v35 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v35) > 8)
      {
        *(_BYTE *)(v35 + 8) = 32;
        *(_QWORD *)v35 = *(_QWORD *)", livein ";
        *((_QWORD *)v17 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", livein ", 9uLL);
      }
      sub_1C4F64FB4(v17, v11 + 152);
      v36 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v36) > 9)
      {
        *(_WORD *)(v36 + 8) = 8308;
        *(_QWORD *)v36 = *(_QWORD *)", liveout ";
        *((_QWORD *)v17 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", liveout ", 0xAuLL);
      }
      sub_1C4F64FB4(v17, v11 + 224);
      v37 = (_BYTE *)*((_QWORD *)v17 + 4);
      if (*((_BYTE **)v17 + 3) == v37)
      {
        llvm::raw_ostream::write(v17, "\n", 1uLL);
      }
      else
      {
        *v37 = 10;
        ++*((_QWORD *)v17 + 4);
      }
      result = (llvm::raw_ostream *)sub_1C61B54F8((uint64_t)v42);
      v38 = v8 + 296;
      v8 = v6;
      if (v38 != v6)
      {
        v8 = v38;
        while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 296;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
      if (v8 == v9)
        return result;
    }
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v24 = *(_QWORD *)(v20 + 16 * v22);
      if (v24 == v10)
      {
        v23 = (uint64_t *)(v20 + 16 * v22);
        goto LABEL_27;
      }
    }
LABEL_26:
    v23 = (uint64_t *)(v20 + 16 * v21);
    goto LABEL_27;
  }
  return result;
}

llvm::raw_ostream *sub_1C4F64FB4(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  size_t v8;
  _WORD *v9;
  const char *v10;
  _BYTE *v11;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "{", 1uLL);
  }
  else
  {
    *v4 = 123;
    ++*((_QWORD *)this + 4);
  }
  v5 = sub_1C476B7EC(a2);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      if ((v7 & 1) != 0)
        v8 = 2;
      else
        v8 = 0;
      v9 = (_WORD *)*((_QWORD *)this + 4);
      if (v8 <= *((_QWORD *)this + 3) - (_QWORD)v9)
      {
        if ((v7 & 1) != 0)
        {
          *v9 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
      }
      else
      {
        if ((v7 & 1) != 0)
          v10 = ", ";
        else
          v10 = 0;
        llvm::raw_ostream::write(this, v10, v8);
      }
      sub_1C5E21910(this, v6, 0, 0, 0);
      v7 = 1;
      v6 = sub_1C476BA0C((_QWORD *)a2, v6 + 1, *(_DWORD *)(a2 + 64), 1u);
    }
    while ((v6 & 0x80000000) == 0);
  }
  v11 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v11)
  {
    llvm::raw_ostream::write(this, "}", 1uLL);
  }
  else
  {
    *v11 = 125;
    ++*((_QWORD *)this + 4);
  }
  return this;
}

_QWORD *llvm::StackLifetime::print(llvm::Function **this, llvm::raw_ostream *a2)
{
  _QWORD v3[2];

  v3[0] = &off_1E813B468;
  v3[1] = this;
  return llvm::Function::print(*this, a2, (llvm::AssemblyAnnotationWriter *)v3, 0, 0);
}

void llvm::StackLifetimePrinterPass::run(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _QWORD v16[2];
  llvm::Function *v17[2];
  uint64_t v18[3];
  void *v19;
  _QWORD v20[73];
  char *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[4];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x800000000;
  v6 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v6)
    {
      v10 = 0;
      v11 = v27;
      goto LABEL_26;
    }
    v8 = i - 24;
    if (!i)
      v8 = 0;
    v9 = *(_QWORD *)(v8 + 48);
    if (v9 != v8 + 40)
      break;
  }
  v10 = 0;
  while (1)
  {
    if (v9)
      v12 = v9 - 24;
    else
      v12 = 0;
    if (v9 && *(_BYTE *)(v12 + 16) == 59)
    {
      if (v10 >= HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v10 + 1, 8);
        v10 = v26;
      }
      v25[v10] = v12;
      v10 = v26 + 1;
      LODWORD(v26) = v26 + 1;
    }
    v9 = *(_QWORD *)(v9 + 8);
    v13 = i - 24;
    if (!i)
      v13 = 0;
    if (v9 == v13 + 40)
      break;
LABEL_24:
    if (i == v6)
      goto LABEL_25;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v6)
      break;
    v14 = i - 24;
    if (!i)
      v14 = 0;
    v9 = *(_QWORD *)(v14 + 48);
    if (v9 != v14 + 40)
      goto LABEL_24;
  }
LABEL_25:
  v11 = v25;
LABEL_26:
  llvm::StackLifetime::StackLifetime((llvm::StackLifetime *)v17, a2, v11, v10, *(_DWORD *)a1);
  llvm::StackLifetime::run((llvm::StackLifetime *)v17);
  v15 = *(llvm::raw_ostream **)(a1 + 8);
  v16[0] = &off_1E813B468;
  v16[1] = v17;
  llvm::Function::print(v17[0], v15, (llvm::AssemblyAnnotationWriter *)v16, 0, 0);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C61B5658((uint64_t)v24);
  MEMORY[0x1CAA32FB4](v24[0], 8);
  if (v22 != &v23)
    free(v22);
  sub_1C61B56BC(&v21);
  MEMORY[0x1CAA32FB4](v20[70], 8);
  MEMORY[0x1CAA32FB4](v20[64], 8);
  if (v19 != v20)
    free(v19);
  sub_1C4F65B54(v18);
  if (v25 != v27)
    free(v25);
}

void sub_1C4F653AC(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  unsigned int v3;
  const llvm::Instruction *v4;
  uint64_t v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const llvm::AllocaInst **v13;
  uint64_t v14;
  const llvm::AllocaInst **v15;
  uint64_t v16;
  const llvm::AllocaInst **v17;
  const llvm::AllocaInst **v18;
  const llvm::AllocaInst *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const llvm::AllocaInst **v24;
  const llvm::AllocaInst *v25;
  int v26;
  int v27;
  const llvm::AllocaInst *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char **v33;
  const llvm::AllocaInst **v34;
  void *v35;
  char *v36;
  int v37;
  uint64_t v38;
  std::string::size_type v39;
  char *v40;
  char *v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  size_t size;
  _WORD *v46;
  char *v47;
  char *v48;
  std::string v49;
  void *__base;
  size_t __nel;
  _QWORD v52[33];

  v52[32] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 >= 0x1C)
    v4 = (const llvm::Instruction *)a2;
  else
    v4 = 0;
  if (v3 < 0x1C)
    return;
  v7 = *(_QWORD *)(a1 + 8);
  __base = *(void **)(a2 + 40);
  v49.__r_.__value_.__r.__words[0] = 0;
  if (sub_1C61252B8((uint64_t *)(v7 + 568), &__base, &v49))
  {
    v8 = v49.__r_.__value_.__r.__words[0];
    v9 = *(_QWORD *)(v7 + 568);
    v10 = *(unsigned int *)(v7 + 584);
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 568);
    v10 = *(unsigned int *)(v7 + 584);
    v8 = v9 + 16 * v10;
  }
  if (v8 == v9 + 16 * v10)
    return;
  __base = v52;
  __nel = 0x1000000000;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(v11 + 624);
  v13 = *(const llvm::AllocaInst ***)(v11 + 616);
  v14 = *(unsigned int *)(v11 + 632);
  v15 = &v13[2 * v14];
  if (v12)
  {
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = v13;
      while (((unint64_t)*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 2;
        v16 -= 16;
        if (!v16)
          goto LABEL_15;
      }
    }
    else
    {
      v17 = v13;
    }
  }
  else
  {
LABEL_15:
    v17 = &v13[2 * v14];
  }
  v18 = &v13[2 * v14];
  if (v17 == v18)
    goto LABEL_41;
  do
  {
    if (!llvm::StackLifetime::isAliveAfter(*(llvm::StackLifetime **)(a1 + 8), *v17, v4))
      goto LABEL_31;
    v19 = *v17;
    if ((*((_BYTE *)*v17 + 23) & 0x10) == 0)
    {
      v30 = 0;
      v29 = &byte_1C871356D;
      goto LABEL_28;
    }
    v20 = ***(_QWORD ***)v19;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if (!(_DWORD)v22)
      goto LABEL_26;
    LODWORD(v23) = (v22 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    v24 = (const llvm::AllocaInst **)(v21 + 16 * v23);
    v25 = *v24;
    if (*v24 != v19)
    {
      v26 = 1;
      while (v25 != (const llvm::AllocaInst *)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(const llvm::AllocaInst **)(v21 + 16 * v23);
        if (v25 == v19)
        {
          v24 = (const llvm::AllocaInst **)(v21 + 16 * v23);
          goto LABEL_27;
        }
      }
LABEL_26:
      v24 = (const llvm::AllocaInst **)(v21 + 16 * v22);
    }
LABEL_27:
    v28 = v24[1];
    v31 = *(char **)v28;
    v29 = (char *)v28 + 16;
    v30 = v31;
LABEL_28:
    v32 = __nel;
    if (__nel >= (unint64_t)HIDWORD(__nel))
    {
      v47 = v29;
      v48 = v30;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v52, __nel + 1, 16);
      v29 = v47;
      v30 = v48;
      v32 = __nel;
    }
    v33 = (char **)((char *)__base + 16 * v32);
    *v33 = v29;
    v33[1] = v30;
    LODWORD(__nel) = __nel + 1;
LABEL_31:
    v34 = v17 + 2;
    v17 = v15;
    if (v34 != v15)
    {
      v17 = v34;
      while (((unint64_t)*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 2;
        if (v17 == v15)
        {
          v17 = v15;
          break;
        }
      }
    }
  }
  while (v17 != v18);
  if (__nel >= 2)
    qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C61B5604);
LABEL_41:
  v35 = (void *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v35 > 0xCuLL)
  {
    qmemcpy(v35, "\n  ; Alive: <", 13);
    *((_QWORD *)a3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a3, "\n  ; Alive: <", 0xDuLL);
  }
  v36 = (char *)__base;
  v37 = __nel;
  memset(&v49, 0, sizeof(v49));
  if ((_DWORD)__nel)
  {
    v38 = 0;
    v39 = __nel - 1;
    v40 = (char *)__base + 16 * __nel;
    do
    {
      v39 += *(_QWORD *)((char *)__base + v38 + 8);
      v38 += 16;
    }
    while (16 * __nel != v38);
    std::string::reserve(&v49, v39);
    std::string::append(&v49, *(const std::string::value_type **)v36, *((_QWORD *)v36 + 1));
    if (v37 != 1)
    {
      v41 = v36 + 16;
      do
      {
        std::string::append(&v49, " ", 1uLL);
        v42 = *(const std::string::value_type **)v41;
        v43 = *((_QWORD *)v41 + 1);
        v41 += 16;
        std::string::append(&v49, v42, v43);
      }
      while (v41 != v40);
    }
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v49;
  else
    v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v49.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a3, (const char *)v44, size);
  v46 = (_WORD *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v46 > 1uLL)
  {
    *v46 = 2622;
    *((_QWORD *)a3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a3, ">\n", 2uLL);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (__base != v52)
    free(__base);
}

void sub_1C4F65798(uint64_t a1, unsigned int a2, llvm::raw_ostream *this)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ****v21;
  uint64_t ***v22;
  int v23;
  int v24;
  uint64_t ***v25;
  char *v26;
  char *v27;
  char *v28;
  char **v29;
  unsigned int *v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  std::string::size_type v35;
  char *v36;
  char *v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  size_t size;
  _WORD *v42;
  std::string v43;
  void *__base;
  uint64_t v45;
  _QWORD v46[34];

  v46[32] = *MEMORY[0x1E0C80C00];
  __base = v46;
  v45 = 0x1000000000;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 624);
  v7 = *(unsigned int **)(v5 + 616);
  v8 = *(unsigned int *)(v5 + 632);
  v9 = &v7[4 * v8];
  if (v6)
  {
    if ((_DWORD)v8)
    {
      v10 = 16 * v8;
      v11 = v7;
      while ((*(_QWORD *)v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v11 += 4;
        v10 -= 16;
        if (!v10)
          goto LABEL_6;
      }
    }
    else
    {
      v11 = v7;
    }
  }
  else
  {
LABEL_6:
    v11 = &v7[4 * v8];
  }
  v12 = &v7[4 * v8];
  if (v11 == v12)
    goto LABEL_33;
  v13 = 0;
  v14 = 1 << a2;
  v15 = a2 >> 6;
  do
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 640) + 72 * v11[2]) + 8 * v15) & v14) == 0)
      goto LABEL_23;
    v16 = *(uint64_t ****)v11;
    if ((*(_BYTE *)(*(_QWORD *)v11 + 23) & 0x10) == 0)
    {
      v27 = 0;
      v26 = &byte_1C871356D;
      goto LABEL_20;
    }
    v17 = ***v16;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(unsigned int *)(v17 + 168);
    if (!(_DWORD)v19)
      goto LABEL_18;
    LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    v21 = (uint64_t ****)(v18 + 16 * v20);
    v22 = *v21;
    if (*v21 != v16)
    {
      v23 = 1;
      while (v22 != (uint64_t ***)-4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(uint64_t ****)(v18 + 16 * v20);
        if (v22 == v16)
        {
          v21 = (uint64_t ****)(v18 + 16 * v20);
          goto LABEL_19;
        }
      }
LABEL_18:
      v21 = (uint64_t ****)(v18 + 16 * v19);
    }
LABEL_19:
    v25 = v21[1];
    v28 = (char *)*v25;
    v26 = (char *)(v25 + 2);
    v27 = v28;
LABEL_20:
    if (v13 >= HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v46, v13 + 1, 16);
      v13 = v45;
    }
    v29 = (char **)((char *)__base + 16 * v13);
    *v29 = v26;
    v29[1] = v27;
    v13 = v45 + 1;
    LODWORD(v45) = v45 + 1;
LABEL_23:
    v30 = v11 + 4;
    v11 = v9;
    if (v30 != v9)
    {
      v11 = v30;
      while ((*(_QWORD *)v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v11 += 4;
        if (v11 == v9)
        {
          v11 = v9;
          break;
        }
      }
    }
  }
  while (v11 != v12);
  if (v13 >= 2)
    qsort(__base, v13, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C61B5604);
LABEL_33:
  v31 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v31) > 0xB)
  {
    *(_DWORD *)(v31 + 8) = 1008745061;
    *(_QWORD *)v31 = *(_QWORD *)"  ; Alive: <";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ; Alive: <", 0xCuLL);
  }
  v32 = (char *)__base;
  v33 = v45;
  memset(&v43, 0, sizeof(v43));
  if ((_DWORD)v45)
  {
    v34 = 0;
    v35 = v45 - 1;
    v36 = (char *)__base + 16 * v45;
    do
    {
      v35 += *(_QWORD *)((char *)__base + v34 + 8);
      v34 += 16;
    }
    while (16 * v45 != v34);
    std::string::reserve(&v43, v35);
    std::string::append(&v43, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
    if (v33 != 1)
    {
      v37 = v32 + 16;
      do
      {
        std::string::append(&v43, " ", 1uLL);
        v38 = *(const std::string::value_type **)v37;
        v39 = *((_QWORD *)v37 + 1);
        v37 += 16;
        std::string::append(&v43, v38, v39);
      }
      while (v37 != v36);
    }
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v43;
  else
    v40 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v43.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v43.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(this, (const char *)v40, size);
  v42 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v42 > 1uLL)
  {
    *v42 = 2622;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, ">\n", 2uLL);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (__base != v46)
    free(__base);
}

uint64_t *sub_1C4F65B54(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *a1;
  if (v2)
  {
    v4 = 296 * v2;
    v5 = v3 + 8;
    do
    {
      if ((*(_QWORD *)(v5 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C61B54F8(v5);
      v5 += 296;
      v4 -= 296;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

_QWORD *sub_1C4F65BC0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B5908((unsigned int *)a1, v4, v4 + 80 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 80 * v10;
    do
    {
      *result = -4096;
      result += 10;
      v11 -= 80;
    }
    while (v11);
  }
  return result;
}

unsigned int *sub_1C4F65C84(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  __int128 v17;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v9 = 0;
    while (1)
    {
      v10 = (int *)&result[v9];
      v11 = (int *)&a2[v9];
      v12 = *(_QWORD *)&result[v9 + 2];
      v13 = *(_QWORD *)&a2[v9 + 2];
      if (v12 == -4096 || v12 == -8192 || v13 == -4096 || v13 == -8192)
      {
        *((_QWORD *)v10 + 1) = v13;
        *((_QWORD *)v11 + 1) = v12;
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&a2[v9];
          v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&result[v9];
          v16 = (int *)&a2[v9];
LABEL_22:
          *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
        }
      }
      else
      {
        v14 = *(_QWORD *)&result[v9 + 4];
        *((_QWORD *)v10 + 1) = v13;
        *(_QWORD *)&result[v9 + 4] = *(_QWORD *)&a2[v9 + 4];
        *((_QWORD *)v11 + 1) = v12;
        *(_QWORD *)&a2[v9 + 4] = v14;
      }
      v9 += 4;
      if (v9 == 16)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v17 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = *(_QWORD *)&result[v7 + 2];
    *(_QWORD *)&v6[v7 + 2] = v8;
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *(_QWORD *)&v6[v7 + 4] = *(_QWORD *)&result[v7 + 4];
    v7 += 4;
  }
  while (v7 != 16);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v17;
  return result;
}

uint64_t sub_1C4F65E04(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61B5BD0(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61B5BD0(a1, v14, v9);
}

_QWORD *sub_1C4F65F7C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(296 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B5DE4(a1, v4, v4 + 296 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 296 * v10;
    do
    {
      *result = -4096;
      result += 37;
      v11 -= 296;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4F66044(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B6274(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F66108(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = v4 + 12 * v8;
        v11 = *(char **)a1;
        do
        {
          *(_DWORD *)v11 = *(_DWORD *)v4;
          *(_QWORD *)(v11 + 4) = *(_QWORD *)(v4 + 4);
          v4 += 12;
          v11 += 12;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v12 = v4 + 12 * v9;
        v13 = *(char **)a1;
        do
        {
          *(_DWORD *)v13 = *(_DWORD *)v4;
          *(_QWORD *)(v13 + 4) = *(_QWORD *)(v4 + 4);
          v4 += 12;
          v13 += 12;
        }
        while (v4 != v12);
LABEL_18:
        v14 = *v7;
        if (v9 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 12 * v9), (const void *)(*a2 + 12 * v9), *a2 + 12 * v14 - (*a2 + 12 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 12);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

unint64_t sub_1C4F66260(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 72 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C61B6410(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C61B6410(a1, v5);
    }
  }
  return a2;
}

char *sub_1C4F662C8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackLifetimePrinterPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *llvm::StackSafetyInfo::StackSafetyInfo(_QWORD *this)
{
  *this = 0;
  this[4] = 0;
  this[5] = 0;
  return this;
}

{
  *this = 0;
  this[4] = 0;
  this[5] = 0;
  return this;
}

_QWORD *llvm::StackSafetyInfo::StackSafetyInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;

  *a1 = a2;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      a1[4] = v4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      a1[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v4);
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = 0;
  return a1;
}

{
  _QWORD *v4;
  uint64_t v5;

  *a1 = a2;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      a1[4] = v4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      a1[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v4);
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = 0;
  return a1;
}

_QWORD *llvm::StackSafetyInfo::StackSafetyInfo(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = (_QWORD *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[4] + 24))(a2[4]);
    }
    else
    {
      a1[4] = v4;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v5 = a2[5];
  a2[5] = 0;
  a1[5] = v5;
  return a1;
}

{
  _QWORD *v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = (_QWORD *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[4] + 24))(a2[4]);
    }
    else
    {
      a1[4] = v4;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v5 = a2[5];
  a2[5] = 0;
  a1[5] = v5;
  return a1;
}

_QWORD *llvm::StackSafetyInfo::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a1 + 5;
  sub_1C48AAFD8(a1 + 1, (uint64_t)(a2 + 1));
  v5 = a2[5];
  a2[5] = 0;
  sub_1C4F66CC4(v4, v5);
  return a1;
}

void llvm::StackSafetyInfo::~StackSafetyInfo(llvm::StackSafetyInfo *this)
{
  llvm::StackSafetyInfo *v2;
  uint64_t v3;

  sub_1C4F66CC4((uint64_t *)this + 5, 0);
  v2 = (llvm::StackSafetyInfo *)*((_QWORD *)this + 4);
  if (v2 == (llvm::StackSafetyInfo *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (llvm::StackSafetyInfo *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

{
  llvm::StackSafetyInfo *v2;
  uint64_t v3;

  sub_1C4F66CC4((uint64_t *)this + 5, 0);
  v2 = (llvm::StackSafetyInfo *)*((_QWORD *)this + 4);
  if (v2 == (llvm::StackSafetyInfo *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (llvm::StackSafetyInfo *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

uint64_t *llvm::StackSafetyInfo::getInfo(llvm::StackSafetyInfo *this)
{
  uint64_t *result;
  uint64_t *v3;
  uint64_t v4;
  llvm::Function *v5;
  llvm::Function *v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  llvm::Function *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  llvm::Function *v24;
  const llvm::AllocaInst *v25;
  const llvm::AllocaInst *v26;
  const llvm::AllocaInst *i;
  const llvm::AllocaInst **v28;
  const llvm::AllocaInst **v29;
  const llvm::AllocaInst *v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t **v49;
  unsigned int v50;
  _DWORD *v51;
  _DWORD *v52;
  unsigned int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  void *v60;
  size_t v61;
  uint64_t *v62;
  uint64_t v63;
  llvm::Function *v64[3];
  unsigned int v65;
  void *__src;
  unsigned int v67;
  void *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  _BYTE v73[16];
  uint64_t v74[3];
  void *v75;
  _QWORD v76[73];
  char *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80[4];
  void *v81;
  uint64_t v82;
  _QWORD v83[66];

  v83[64] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)((char *)this + 40);
  result = (uint64_t *)*((_QWORD *)this + 5);
  if (result)
    return result;
  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    sub_1C485C2F0();
    return sub_1C4F66CC4(v62, v63);
  }
  v5 = *(llvm::Function **)this;
  v6 = (llvm::Function *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v7 = *((_QWORD *)v5 + 5);
  v64[0] = v5;
  v64[1] = (llvm::Function *)(v7 + 272);
  v64[2] = v6;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 504) + 4);
  v65 = v8;
  v67 = v8;
  if (v8 <= 0x40)
  {
    v9 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v8);
    if (!v8)
      v9 = 0;
    __src = v9;
    v69 = v8;
    goto LABEL_7;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v69 = v67;
  if (v67 <= 0x40)
  {
LABEL_7:
    v10 = __src;
    goto LABEL_8;
  }
  v61 = (((unint64_t)v67 + 63) >> 3) & 0x3FFFFFF8;
  v10 = (void *)operator new[]();
  memcpy(v10, __src, v61);
LABEL_8:
  v68 = v10;
  v11 = operator new();
  *(_QWORD *)(v11 + 8) = 0;
  v12 = (uint64_t **)(v11 + 8);
  *(_QWORD *)v11 = v11 + 8;
  *(_QWORD *)(v11 + 32) = 0;
  v13 = (uint64_t **)(v11 + 32);
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v11 + 32;
  *(_DWORD *)(v11 + 48) = 0;
  v81 = v83;
  v82 = 0x4000000000;
  v14 = v64[0];
  v15 = (char *)v64[0] + 72;
  v16 = (char *)*((_QWORD *)v64[0] + 10);
  if (v16 == (char *)v64[0] + 72)
  {
LABEL_13:
    v19 = 0;
    v20 = v83;
  }
  else
  {
    while (1)
    {
      v17 = v16 - 24;
      if (!v16)
        v17 = 0;
      v18 = (char *)*((_QWORD *)v17 + 6);
      if (v18 != v17 + 40)
        break;
      v16 = (char *)*((_QWORD *)v16 + 1);
      if (v16 == v15)
        goto LABEL_13;
    }
    v19 = 0;
    while (1)
    {
      if (v18)
        v21 = v18 - 24;
      else
        v21 = 0;
      if (v18 && v21[16] == 59)
      {
        if (v19 >= HIDWORD(v82))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v19 + 1, 8);
          v19 = v82;
        }
        *((_QWORD *)v81 + v19) = v21;
        v19 = v82 + 1;
        LODWORD(v82) = v82 + 1;
      }
      v18 = (char *)*((_QWORD *)v18 + 1);
      v22 = v16 - 24;
      if (!v16)
        v22 = 0;
      if (v18 == v22 + 40)
        break;
LABEL_30:
      if (v16 == v15)
        goto LABEL_31;
    }
    while (1)
    {
      v16 = (char *)*((_QWORD *)v16 + 1);
      if (v16 == v15)
        break;
      v23 = v16 - 24;
      if (!v16)
        v23 = 0;
      v18 = (char *)*((_QWORD *)v23 + 6);
      if (v18 != v23 + 40)
        goto LABEL_30;
    }
LABEL_31:
    v14 = v64[0];
    v20 = v81;
  }
  llvm::StackLifetime::StackLifetime((llvm::StackLifetime *)v73, (uint64_t)v14, v20, v19, 1);
  llvm::StackLifetime::run((llvm::StackLifetime *)v73);
  if ((_DWORD)v82)
  {
    v28 = (const llvm::AllocaInst **)v81;
    v29 = (const llvm::AllocaInst **)((char *)v81 + 8 * v82);
    do
    {
      v30 = *v28;
      v31 = operator new(0x78uLL);
      v32 = v31;
      v70 = v31;
      v71 = v11 + 8;
      v31[4] = v30;
      v33 = v65;
      *((_DWORD *)v31 + 12) = v65;
      if (v33 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)(v31 + 5), 0, 0);
        v43 = *((_DWORD *)v32 + 12);
        *((_DWORD *)v32 + 16) = v43;
        if (v43 > 0x40)
        {
          v44 = (void *)operator new[]();
          v32[7] = v44;
          memcpy(v44, (const void *)v32[5], (((unint64_t)*((unsigned int *)v32 + 16) + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_50;
        }
        v34 = v32[5];
      }
      else
      {
        v34 = 0;
        v31[5] = 0;
        *((_DWORD *)v31 + 16) = v33;
      }
      v32[7] = v34;
LABEL_50:
      v32[13] = 0;
      v35 = v32 + 13;
      *(v35 - 3) = 0;
      *(v35 - 4) = v35 - 3;
      v35[1] = 0;
      *(v35 - 2) = 0;
      *(v35 - 1) = v35;
      v72 = 1;
      v36 = v70;
      v37 = (uint64_t **)(v11 + 8);
      v38 = (uint64_t **)(v11 + 8);
      v39 = *v12;
      if (*v12)
      {
        v40 = v70[4];
        while (1)
        {
          while (1)
          {
            v38 = (uint64_t **)v39;
            v41 = v39[4];
            if (v40 >= v41)
              break;
            v39 = (uint64_t *)*v39;
            v37 = v38;
            if (!*v38)
              goto LABEL_58;
          }
          if (v41 >= v40)
            break;
          v39 = (uint64_t *)v39[1];
          if (!v39)
          {
            v37 = v38 + 1;
            goto LABEL_58;
          }
        }
      }
      else
      {
LABEL_58:
        *v70 = 0;
        v36[1] = 0;
        v36[2] = (uint64_t)v38;
        *v37 = v36;
        v42 = **(_QWORD **)v11;
        if (v42)
        {
          *(_QWORD *)v11 = v42;
          v36 = *v37;
        }
        sub_1C4768E74(*(uint64_t **)(v11 + 8), v36);
        ++*(_QWORD *)(v11 + 16);
        v38 = (uint64_t **)v70;
        v70 = 0;
      }
      sub_1C4F6BC2C((uint64_t *)&v70);
      sub_1C4F6AAD4((uint64_t)v64, v30, (uint64_t)(v38 + 5), (llvm::StackLifetime *)v73);
      ++v28;
    }
    while (v28 != v29);
  }
  v24 = v64[0];
  if ((*((_WORD *)v64[0] + 9) & 1) == 0)
  {
    v25 = (const llvm::AllocaInst *)*((_QWORD *)v64[0] + 11);
LABEL_35:
    v26 = v25;
    goto LABEL_36;
  }
  llvm::Function::BuildLazyArguments(v64[0]);
  v25 = (const llvm::AllocaInst *)*((_QWORD *)v24 + 11);
  if ((*((_WORD *)v24 + 9) & 1) == 0)
    goto LABEL_35;
  llvm::Function::BuildLazyArguments(v24);
  v26 = (const llvm::AllocaInst *)*((_QWORD *)v24 + 11);
LABEL_36:
  for (i = (const llvm::AllocaInst *)((char *)v26 + 40 * *((_QWORD *)v24 + 12));
        v25 != i;
        v25 = (const llvm::AllocaInst *)((char *)v25 + 40))
  {
    if (*(_BYTE *)(*(_QWORD *)v25 + 8) != 15)
      continue;
    v45 = *((_DWORD *)v25 + 8);
    v46 = *(_QWORD *)(*((_QWORD *)v25 + 3) + 112);
    if (v46)
    {
      if (v45 + 2 < *(_DWORD *)(v46 + 8))
      {
        v58 = *(_QWORD *)(v46 + 8 * (v45 + 2) + 40);
        if (v58)
        {
          if ((*(_BYTE *)(v58 + 20) & 0x20) != 0)
            continue;
        }
      }
    }
    v47 = *v13;
    v48 = (uint64_t **)(v11 + 32);
    v49 = (uint64_t **)(v11 + 32);
    if (*v13)
    {
      while (1)
      {
        while (1)
        {
          v49 = (uint64_t **)v47;
          v50 = *((_DWORD *)v47 + 8);
          if (v45 >= v50)
            break;
          v47 = *v49;
          v48 = v49;
          if (!*v49)
            goto LABEL_76;
        }
        if (v50 >= v45)
          goto LABEL_82;
        v47 = v49[1];
        if (!v47)
        {
          v48 = v49 + 1;
          break;
        }
      }
    }
LABEL_76:
    v51 = operator new(0x78uLL);
    v52 = v51;
    v70 = (uint64_t *)v51;
    v71 = v11 + 32;
    v51[8] = v45;
    v53 = v65;
    v51[12] = v65;
    if (v53 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)(v51 + 10), 0, 0);
      v59 = v52[12];
      v52[16] = v59;
      if (v59 > 0x40)
      {
        v60 = (void *)operator new[]();
        *((_QWORD *)v52 + 7) = v60;
        memcpy(v60, *((const void **)v52 + 5), (((unint64_t)v52[16] + 63) >> 3) & 0x3FFFFFF8);
        goto LABEL_79;
      }
      v54 = *((_QWORD *)v52 + 5);
    }
    else
    {
      v54 = 0;
      *((_QWORD *)v51 + 5) = 0;
      v51[16] = v53;
    }
    *((_QWORD *)v52 + 7) = v54;
LABEL_79:
    *((_QWORD *)v52 + 13) = 0;
    v55 = v52 + 26;
    *((_QWORD *)v55 - 3) = 0;
    *((_QWORD *)v55 - 4) = v55 - 6;
    *((_QWORD *)v55 + 1) = 0;
    *((_QWORD *)v55 - 2) = 0;
    *((_QWORD *)v55 - 1) = v55;
    v72 = 1;
    v56 = v70;
    *v70 = 0;
    v56[1] = 0;
    v56[2] = (uint64_t)v49;
    *v48 = v56;
    v57 = **(_QWORD **)(v11 + 24);
    if (v57)
    {
      *(_QWORD *)(v11 + 24) = v57;
      v56 = *v48;
    }
    sub_1C4768E74(*(uint64_t **)(v11 + 32), v56);
    ++*(_QWORD *)(v11 + 40);
    v49 = (uint64_t **)v70;
    v70 = 0;
    sub_1C4F6BC2C((uint64_t *)&v70);
LABEL_82:
    sub_1C4F6AAD4((uint64_t)v64, v25, (uint64_t)(v49 + 5), (llvm::StackLifetime *)v73);
  }
  sub_1C61B5658((uint64_t)v80);
  MEMORY[0x1CAA32FB4](v80[0], 8);
  if (v78 != &v79)
    free(v78);
  sub_1C61B56BC(&v77);
  MEMORY[0x1CAA32FB4](v76[70], 8);
  MEMORY[0x1CAA32FB4](v76[64], 8);
  if (v75 != v76)
    free(v75);
  sub_1C4F65B54(v74);
  if (v81 != v83)
    free(v81);
  sub_1C4F66CC4(v3, v11);
  if (v69 >= 0x41 && v68)
    MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
  if (v67 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return (uint64_t *)*v3;
}

uint64_t *sub_1C4F66CC4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1C4F6D620(*(_QWORD **)(v2 + 32));
    sub_1C4F6D620(*(_QWORD **)(v2 + 8));
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

double sub_1C4F66D18(_QWORD *a1, llvm::raw_ostream *this, const void *a3, size_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  const char *v12;
  size_t v13;
  void *v14;
  llvm::GlobalValue *Section;
  uint64_t v16;
  llvm::Module *v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  size_t *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void *v38;
  _DWORD *v39;
  _BYTE *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  double result;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t *v64;
  int v65;
  int v66;
  size_t *v67;
  const void *v68;
  size_t v69;
  size_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  _QWORD v84[2];
  _QWORD v85[3];

  v85[2] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v10) > 2)
  {
    *(_BYTE *)(v10 + 2) = 64;
    *(_WORD *)v10 = 8224;
    v11 = (void *)(*((_QWORD *)this + 4) + 3);
    *((_QWORD *)this + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(this, "  @", 3uLL);
    v11 = (void *)*((_QWORD *)this + 4);
  }
  if (a4 <= *((_QWORD *)this + 3) - (_QWORD)v11)
  {
    if (a4)
    {
      memcpy(v11, a3, a4);
      *((_QWORD *)this + 4) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a3, a4);
  }
  v12 = " dso_preemptable";
  if (a5 && (*(_BYTE *)(a5 + 33) & 0x40) != 0)
    v12 = "";
  v13 = strlen(v12);
  v14 = (void *)*((_QWORD *)this + 4);
  if (v13 <= *((_QWORD *)this + 3) - (_QWORD)v14)
  {
    if (v13)
    {
      memcpy(v14, v12, v13);
      *((_QWORD *)this + 4) += v13;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v12, v13);
  }
  if (a5
    && (*(_BYTE *)(a5 + 16) == 3
     && (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)a5), v16 == 12)
     && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
       ? (v76 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
       : (v76 = 0),
         v76)
     || (*(_DWORD *)(a5 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(a5 + 32) & 0xF)) & 0x614) != 0
     || (v17 = *(llvm::Module **)(a5 + 40)) != 0
     && llvm::Module::getSemanticInterposition(v17)
     && (*(_DWORD *)(a5 + 32) & 0x4000) == 0))
  {
    v18 = " interposable";
  }
  else
  {
    v18 = "";
  }
  v19 = strlen(v18);
  v20 = (_BYTE *)*((_QWORD *)this + 4);
  if (v19 <= *((_QWORD *)this + 3) - (_QWORD)v20)
  {
    if (v19)
    {
      memcpy(v20, v18, v19);
      v20 = (_BYTE *)(*((_QWORD *)this + 4) + v19);
      *((_QWORD *)this + 4) = v20;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v18, v19);
    v20 = (_BYTE *)*((_QWORD *)this + 4);
  }
  if (*((_BYTE **)this + 3) == v20)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    v21 = (void *)*((_QWORD *)this + 4);
  }
  else
  {
    *v20 = 10;
    v21 = (void *)(*((_QWORD *)this + 4) + 1);
    *((_QWORD *)this + 4) = v21;
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v21 > 0xEuLL)
  {
    qmemcpy(v21, "    args uses:\n", 15);
    *((_QWORD *)this + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(this, "    args uses:\n", 0xFuLL);
  }
  v22 = (_QWORD *)a1[3];
  if (v22 != a1 + 4)
  {
    while (1)
    {
      v23 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v23) > 5)
      {
        *(_WORD *)(v23 + 4) = 8224;
        *(_DWORD *)v23 = 538976288;
        *((_QWORD *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "      ", 6uLL);
      }
      if (a5)
        break;
      v81 = "arg{0}";
      *(_QWORD *)&v82 = 6;
      *((_QWORD *)&v82 + 1) = v85;
      v83 = 1;
      v84[0] = &unk_1E813B5F0;
      v84[1] = v22 + 4;
      v85[0] = v84;
      sub_1C639D338((uint64_t)&v81, this);
LABEL_43:
      v39 = (_DWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v39 > 3uLL)
      {
        *v39 = 540695899;
        *((_QWORD *)this + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(this, "[]: ", 4uLL);
      }
      sub_1C4F6EDF8(this, (llvm::ConstantRange *)(v22 + 5));
      v40 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v40)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *v40 = 10;
        ++*((_QWORD *)this + 4);
      }
      v41 = (_QWORD *)v22[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v22[2];
          v76 = *v42 == (_QWORD)v22;
          v22 = v42;
        }
        while (!v76);
      }
      v22 = v42;
      if (v42 == a1 + 4)
        goto LABEL_58;
    }
    v24 = *((_DWORD *)v22 + 8);
    if ((*(_WORD *)(a5 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)a5);
    v25 = *(_QWORD *)(a5 + 88) + 40 * v24;
    if ((*(_BYTE *)(v25 + 23) & 0x10) == 0)
      goto LABEL_43;
    v26 = ***(_QWORD ***)v25;
    v27 = *(_QWORD *)(v26 + 152);
    v28 = *(unsigned int *)(v26 + 168);
    if ((_DWORD)v28)
    {
      LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      v30 = (uint64_t *)(v27 + 16 * v29);
      v31 = *v30;
      if (*v30 == v25)
        goto LABEL_39;
      v32 = 1;
      while (v31 != -4096)
      {
        v33 = v29 + v32++;
        v29 = v33 & (v28 - 1);
        v31 = *(_QWORD *)(v27 + 16 * v29);
        if (v31 == v25)
        {
          v30 = (uint64_t *)(v27 + 16 * v29);
          goto LABEL_39;
        }
      }
    }
    v30 = (uint64_t *)(v27 + 16 * v28);
LABEL_39:
    v34 = (size_t *)v30[1];
    v37 = *v34;
    v35 = v34 + 2;
    v36 = v37;
    v38 = (void *)*((_QWORD *)this + 4);
    if (v37 <= *((_QWORD *)this + 3) - (_QWORD)v38)
    {
      if (v36)
      {
        memcpy(v38, v35, v36);
        *((_QWORD *)this + 4) += v36;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, (const char *)v35, v36);
    }
    goto LABEL_43;
  }
LABEL_58:
  v43 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v43) > 0x11)
  {
    *(_WORD *)(v43 + 16) = 2618;
    result = *(double *)"    allocas uses:\n";
    *(_OWORD *)v43 = *(_OWORD *)"    allocas uses:\n";
    *((_QWORD *)this + 4) += 18;
    if (!a5)
      return result;
  }
  else
  {
    llvm::raw_ostream::write(this, "    allocas uses:\n", 0x12uLL);
    if (!a5)
      return result;
  }
  v45 = a5 + 72;
  for (i = *(_QWORD *)(a5 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v45)
      return result;
    v47 = i - 24;
    if (!i)
      v47 = 0;
    v48 = *(_QWORD *)(v47 + 48);
    if (v48 != v47 + 40)
      break;
  }
  v49 = a1 + 1;
  result = 0.0;
  while (1)
  {
    v50 = v48 - 24;
    if (!v48)
      v50 = 0;
    v51 = *(unsigned __int8 *)(v50 + 16);
    if (v51 == 59)
      v52 = (uint64_t *)v50;
    else
      v52 = 0;
    if (v48 && v51 == 59)
    {
      v53 = (_QWORD *)*v49;
      if (!*v49)
        goto LABEL_85;
      v54 = v49;
      do
      {
        v55 = v53[4];
        v56 = v55 >= (unint64_t)v52;
        if (v55 >= (unint64_t)v52)
          v57 = v53;
        else
          v57 = v53 + 1;
        if (v56)
          v54 = v53;
        v53 = (_QWORD *)*v57;
      }
      while (*v57);
      if (v54 == v49 || (unint64_t)v52 < v54[4])
LABEL_85:
        v54 = v49;
      v58 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v58) > 5)
      {
        *(_WORD *)(v58 + 4) = 8224;
        *(_DWORD *)v58 = 538976288;
        *((_QWORD *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "      ", 6uLL);
      }
      if ((*((_BYTE *)v52 + 23) & 0x10) == 0)
        goto LABEL_98;
      v59 = **(_QWORD **)*v52;
      v60 = *(_QWORD *)(v59 + 152);
      v61 = *(unsigned int *)(v59 + 168);
      if ((_DWORD)v61)
      {
        LODWORD(v62) = (v61 - 1) & ((v52 >> 4) ^ (v52 >> 9));
        v63 = (uint64_t **)(v60 + 16 * v62);
        v64 = *v63;
        if (*v63 == v52)
        {
LABEL_96:
          v67 = (size_t *)v63[1];
          v70 = *v67;
          v68 = v67 + 2;
          v69 = v70;
          v71 = (_BYTE *)*((_QWORD *)this + 4);
          if (v70 <= *((_QWORD *)this + 3) - (_QWORD)v71)
          {
            if (v69)
            {
              memcpy(v71, v68, v69);
              v71 = (_BYTE *)(*((_QWORD *)this + 4) + v69);
              *((_QWORD *)this + 4) = v71;
            }
            goto LABEL_101;
          }
          llvm::raw_ostream::write(this, (const char *)v68, v69);
LABEL_98:
          v71 = (_BYTE *)*((_QWORD *)this + 4);
LABEL_101:
          if (*((_BYTE **)this + 3) == v71)
          {
            llvm::raw_ostream::write(this, "[", 1uLL);
          }
          else
          {
            *v71 = 91;
            ++*((_QWORD *)this + 4);
          }
          sub_1C4F68A28(&v77, v52);
          v81 = &v83;
          v82 = xmmword_1C64638D0;
          llvm::APInt::toString((uint64_t)&v79, &v81, 0xAu, 1, 0);
          llvm::raw_ostream::write(this, (const char *)v81, v82);
          if (v81 != &v83)
            free(v81);
          v72 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v72) > 2)
          {
            *(_BYTE *)(v72 + 2) = 32;
            *(_WORD *)v72 = 14941;
            *((_QWORD *)this + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(this, "]: ", 3uLL);
          }
          sub_1C4F6EDF8(this, (llvm::ConstantRange *)(v54 + 5));
          v73 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v73)
          {
            llvm::raw_ostream::write(this, "\n", 1uLL);
          }
          else
          {
            *v73 = 10;
            ++*((_QWORD *)this + 4);
          }
          if (v80 >= 0x41 && v79)
            MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
          if (v78 >= 0x41 && v77)
            MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
          goto LABEL_111;
        }
        v65 = 1;
        while (v64 != (uint64_t *)-4096)
        {
          v66 = v62 + v65++;
          v62 = v66 & (v61 - 1);
          v64 = *(uint64_t **)(v60 + 16 * v62);
          if (v64 == v52)
          {
            v63 = (uint64_t **)(v60 + 16 * v62);
            goto LABEL_96;
          }
        }
      }
      v63 = (uint64_t **)(v60 + 16 * v61);
      goto LABEL_96;
    }
LABEL_111:
    v48 = *(_QWORD *)(v48 + 8);
    v74 = i - 24;
    if (!i)
      v74 = 0;
    if (v48 == v74 + 40)
      break;
LABEL_118:
    if (i == v45)
      return result;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v45)
      return result;
    v75 = i - 24;
    if (!i)
      v75 = 0;
    v48 = *(_QWORD *)(v75 + 48);
    if (v48 != v75 + 40)
      goto LABEL_118;
  }
}

uint64_t llvm::StackSafetyGlobalInfo::getInfo(llvm::StackSafetyGlobalInfo *this)
{
  uint64_t ***v1;
  llvm::StackSafetyGlobalInfo *v2;
  uint64_t result;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::StackSafetyInfo *v9;
  uint64_t *Info;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD **v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  llvm::raw_ostream *v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t **v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t ***v56;
  uint64_t **v57;
  unint64_t v58;
  void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t **v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  uint64_t **v75;
  uint64_t **v76;
  unsigned int v77;
  uint64_t **v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t **v99;
  uint64_t ***v100;
  uint64_t **v101;
  uint64_t **v102;
  uint64_t ***v103;
  uint64_t i;
  unint64_t v105;
  uint64_t **v106;
  uint64_t ***v107;
  _QWORD *v108;
  uint64_t **v109;
  unint64_t v110;
  uint64_t ***v111;
  uint64_t *v112;
  uint64_t **v113;
  _QWORD *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t **v122;
  unint64_t v123;
  BOOL v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t **v129;
  uint64_t *v130;
  unsigned int v131;
  uint64_t **v132;
  unsigned int v133;
  BOOL v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t *v144;
  _QWORD *v145;
  uint64_t **v146;
  uint64_t ***v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  llvm::StackSafetyGlobalInfo *v152;
  uint64_t **v153;
  uint64_t ***v154;
  uint64_t **v155;
  uint64_t *v156;
  _QWORD *v157[2];
  uint64_t *v158;
  uint64_t *v159;
  _QWORD *v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t **v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t ***v168;
  uint64_t **v169;
  uint64_t v170;
  void *__src;
  unsigned int v172;
  void *v173;
  unsigned int v174;
  _QWORD v175[2];
  unsigned int v176;
  uint64_t v177;
  int32x2_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t **v183;
  uint64_t *v184;
  uint64_t v185;
  _QWORD *v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  _QWORD *v194;
  uint64_t *v195;
  int v196;
  uint64_t v197;

  v2 = this;
  v197 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 6);
  if (result)
    return result;
  v4 = &v159;
  v159 = 0;
  v160 = 0;
  v158 = (uint64_t *)&v159;
  v5 = *(_QWORD *)v2 + 24;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 32);
  if (v6 == v5)
  {
LABEL_33:
    v26 = (uint64_t **)operator new();
    v27 = v26;
    v28 = v158;
    v156 = v158;
    v157[0] = v159;
    v157[1] = v160;
    if (!v160)
    {
      v156 = (uint64_t *)v157;
      v26[2] = 0;
      v26[1] = 0;
      *v26 = (uint64_t *)(v26 + 1);
      goto LABEL_35;
    }
    v159[2] = (uint64_t)v157;
    v158 = (uint64_t *)&v159;
    v159 = 0;
    v160 = 0;
    v4 = (uint64_t **)*((_QWORD *)v2 + 5);
    v26[2] = 0;
    v26[1] = 0;
    v153 = v26;
    *v26 = (uint64_t *)(v26 + 1);
    v184 = 0;
    v185 = 0;
    v49 = &v184;
    v183 = &v184;
    if (v28 == (uint64_t *)v157)
      goto LABEL_130;
    while (1)
    {
      v50 = v184;
      v51 = &v184;
      if (v183 != &v184)
      {
        v52 = v184;
        v53 = &v184;
        if (v184)
        {
          do
          {
            v51 = (uint64_t **)v52;
            v52 = (uint64_t *)v52[1];
          }
          while (v52);
        }
        else
        {
          do
          {
            v51 = (uint64_t **)v53[2];
            v43 = *v51 == (uint64_t *)v53;
            v53 = v51;
          }
          while (v43);
        }
        v54 = v28[4];
        if ((unint64_t)v51[4] >= v54)
          break;
      }
      if (v184)
        v55 = v51;
      else
        v55 = &v184;
      if (v184)
        v56 = (uint64_t ***)v51;
      else
        v56 = &v183;
      if (v184)
        v57 = v51 + 1;
      else
        v57 = &v184;
      if (!v56[1])
        goto LABEL_97;
LABEL_100:
      v61 = (uint64_t *)v28[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (uint64_t *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (uint64_t *)v28[2];
          v43 = *v62 == (_QWORD)v28;
          v28 = v62;
        }
        while (!v43);
      }
      v28 = v62;
      if (v62 == (uint64_t *)v157)
      {
        v63 = (uint64_t *)v183;
        v49 = &v184;
        if (v183 != &v184)
        {
          do
          {
            v64 = (uint64_t *)v63[8];
            if (v64 != v63 + 9)
            {
              do
              {
                sub_1C4F6D6C0((uint64_t)(v64 + 5), (uint64_t)v4);
                v65 = *((unsigned int *)v64 + 12);
                if (v65 > 0x40)
                {
                  if (!memcmp((const void *)v64[5], (const void *)v64[7], ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8)&& llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v64 + 5)) == (_DWORD)v65)
                  {
LABEL_119:
                    sub_1C4F6BCD0((_QWORD *)v64[13]);
                    v64[12] = (uint64_t)(v64 + 13);
                    v64[13] = 0;
                    v64[14] = 0;
                  }
                }
                else
                {
                  v66 = v64[5];
                  if (v66 == v64[7] && (!(_DWORD)v65 || v66 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v65))
                    goto LABEL_119;
                }
                v67 = (uint64_t *)v64[1];
                if (v67)
                {
                  do
                  {
                    v68 = v67;
                    v67 = (uint64_t *)*v67;
                  }
                  while (v67);
                }
                else
                {
                  do
                  {
                    v68 = (uint64_t *)v64[2];
                    v43 = *v68 == (_QWORD)v64;
                    v64 = v68;
                  }
                  while (!v43);
                }
                v64 = v68;
              }
              while (v68 != v63 + 9);
            }
            v69 = (uint64_t *)v63[1];
            if (v69)
            {
              do
              {
                v70 = (uint64_t **)v69;
                v69 = (uint64_t *)*v69;
              }
              while (v69);
            }
            else
            {
              do
              {
                v70 = (uint64_t **)v63[2];
                v43 = *v70 == v63;
                v63 = (uint64_t *)v70;
              }
              while (!v43);
            }
            v63 = (uint64_t *)v70;
          }
          while (v70 != &v184);
          v49 = v183;
        }
LABEL_130:
        v71 = *(_DWORD *)(*(_QWORD *)(v49[4][5] + 504) + 4);
        v72 = v184;
        v165 = v49;
        v166 = v184;
        v167 = v185;
        if (!v185)
        {
          v165 = &v166;
          v1 = &v169;
          v169 = (uint64_t **)v184;
          v170 = 0;
          goto LABEL_133;
        }
        v184[2] = (uint64_t)&v166;
        v183 = &v184;
        v184 = 0;
        v185 = 0;
        v1 = &v169;
        v168 = (uint64_t ***)v49;
        v169 = (uint64_t **)v72;
        v170 = v167;
        if (v167)
        {
          v72[2] = (uint64_t)&v169;
          v165 = &v166;
          v166 = 0;
          v167 = 0;
        }
        else
        {
LABEL_133:
          v168 = &v169;
        }
        v172 = v71;
        v152 = v2;
        if (v71 > 0x40)
          goto LABEL_300;
        v74 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v71);
        if (!v71)
          v74 = 0;
        __src = v74;
        v174 = v71;
        goto LABEL_139;
      }
    }
    v57 = &v184;
    v55 = &v184;
    if (v184)
    {
      while (1)
      {
        while (1)
        {
          v55 = (uint64_t **)v50;
          v58 = v50[4];
          if (v54 >= v58)
            break;
          v50 = *v55;
          v57 = v55;
          if (!*v55)
            goto LABEL_97;
        }
        if (v58 >= v54)
          goto LABEL_100;
        v50 = v55[1];
        if (!v50)
        {
          v57 = v55 + 1;
          break;
        }
      }
    }
LABEL_97:
    v59 = operator new(0x60uLL);
    v190 = (uint64_t *)v59;
    v191 = (uint64_t)&v184;
    *((_QWORD *)v59 + 4) = v28[4];
    sub_1C4F68700((uint64_t **)v59 + 5, (uint64_t)(v28 + 5));
    LOBYTE(v192) = 1;
    v60 = v190;
    *v190 = 0;
    v60[1] = 0;
    v60[2] = (uint64_t)v55;
    *v57 = v60;
    if (*v183)
    {
      v183 = (uint64_t **)*v183;
      v60 = *v57;
    }
    sub_1C4768E74(v184, v60);
    ++v185;
    v190 = 0;
    sub_1C4F6E700((uint64_t)&v190);
    goto LABEL_100;
  }
  while (1)
  {
    v7 = v6 ? v6 - 56 : 0;
    if (!v6 || *(_BYTE *)(v7 + 16) != 3)
      break;
    if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0)
      goto LABEL_13;
LABEL_32:
    v6 = *(_QWORD *)(v6 + 8);
    if (v6 == v5)
      goto LABEL_33;
  }
  if (!*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 72) == v7 + 72 && (*(_BYTE *)(v7 + 34) & 0x80) == 0)
    goto LABEL_32;
LABEL_13:
  v8 = *((_QWORD *)v2 + 4);
  if (v8)
  {
    v9 = (llvm::StackSafetyInfo *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v7);
    Info = llvm::StackSafetyInfo::getInfo(v9);
    sub_1C4F68700(&v190, (uint64_t)Info);
    v11 = (uint64_t *)operator new(0x60uLL);
    v12 = v11;
    v168 = (uint64_t ***)v11;
    v169 = &v159;
    LOBYTE(v170) = 0;
    v13 = v190;
    v14 = v191;
    v11[4] = v7;
    v11[5] = (uint64_t)v13;
    v11[6] = v14;
    v15 = (char *)(v11 + 6);
    v16 = v192;
    v11[7] = (uint64_t)v192;
    if (v16)
    {
      *(_QWORD *)(v14 + 16) = v15;
      v190 = &v191;
      v191 = 0;
      v192 = 0;
    }
    else
    {
      v11[5] = (uint64_t)v15;
    }
    v18 = v193;
    v17 = v194;
    v11[9] = (uint64_t)v194;
    v19 = (char *)(v11 + 9);
    v11[8] = (uint64_t)v18;
    v20 = v195;
    v11[10] = (uint64_t)v195;
    if (v20)
    {
      v17[2] = v19;
      v193 = (uint64_t *)&v194;
      v194 = 0;
      v195 = 0;
    }
    else
    {
      v11[8] = (uint64_t)v19;
    }
    *((_DWORD *)v11 + 22) = v196;
    LOBYTE(v170) = 1;
    v21 = v159;
    v22 = &v159;
    v23 = &v159;
    if (v159)
    {
      v24 = v11[4];
      while (1)
      {
        while (1)
        {
          v23 = (uint64_t **)v21;
          v25 = v21[4];
          if (v24 >= v25)
            break;
          v21 = (uint64_t *)*v21;
          v22 = v23;
          if (!*v23)
            goto LABEL_28;
        }
        if (v25 >= v24)
          break;
        v21 = (uint64_t *)v21[1];
        if (!v21)
        {
          v22 = v23 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      *v11 = 0;
      v11[1] = 0;
      v11[2] = (uint64_t)v23;
      *v22 = v11;
      if (*v158)
      {
        v158 = (uint64_t *)*v158;
        v12 = *v22;
      }
      sub_1C4768E74(v159, v12);
      v160 = (_QWORD *)((char *)v160 + 1);
      v168 = 0;
    }
    sub_1C4F6E700((uint64_t)&v168);
    sub_1C4F6D620(v194);
    sub_1C4F6D620((_QWORD *)v191);
    goto LABEL_32;
  }
  sub_1C485C2F0();
LABEL_300:
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v174 = v172;
  if (v172 <= 0x40)
  {
LABEL_139:
    v173 = __src;
    goto LABEL_140;
  }
  v173 = (void *)operator new[]();
  memcpy(v173, __src, (((unint64_t)v174 + 63) >> 3) & 0x3FFFFFF8);
LABEL_140:
  v175[0] = 0;
  v175[1] = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v181 = 0;
  v182 = 0;
  v180 = 0;
  sub_1C4F6EDB0(v166);
  v190 = (uint64_t *)&v192;
  v191 = 0x1000000000;
  v75 = (uint64_t **)v168;
  v154 = v1;
  if (v168 != v1)
  {
    do
    {
      LODWORD(v191) = 0;
      v76 = (uint64_t **)v75[8];
      if (v76 == v75 + 9)
      {
        v84 = v190;
        v85 = v190;
      }
      else
      {
        v77 = 0;
        do
        {
          v78 = (uint64_t **)v76[12];
          if (v78 != v76 + 13)
          {
            do
            {
              v79 = (uint64_t)v78[4];
              if (v77 >= HIDWORD(v191))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, (uint64_t)&v192, v77 + 1, 8);
                v77 = v191;
              }
              v190[v77] = v79;
              v77 = v191 + 1;
              LODWORD(v191) = v191 + 1;
              v80 = v78[1];
              if (v80)
              {
                do
                {
                  v81 = (uint64_t **)v80;
                  v80 = (uint64_t *)*v80;
                }
                while (v80);
              }
              else
              {
                do
                {
                  v81 = (uint64_t **)v78[2];
                  v43 = *v81 == (uint64_t *)v78;
                  v78 = v81;
                }
                while (!v43);
              }
              v78 = v81;
            }
            while (v81 != v76 + 13);
          }
          v82 = v76[1];
          if (v82)
          {
            do
            {
              v83 = (uint64_t **)v82;
              v82 = (uint64_t *)*v82;
            }
            while (v82);
          }
          else
          {
            do
            {
              v83 = (uint64_t **)v76[2];
              v43 = *v83 == (uint64_t *)v76;
              v76 = v83;
            }
            while (!v43);
          }
          v76 = v83;
        }
        while (v83 != v75 + 9);
        v84 = v190;
        if (v77 >= 2)
        {
          qsort(v190, v77, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C61B732C);
          v77 = v191;
          v84 = v190;
        }
        v1 = v154;
        v85 = &v84[v77];
        v86 = v84;
        if (v77)
        {
          v87 = 0;
          v88 = 8 * v77 - 8;
          while (v88 != v87)
          {
            v90 = v84[v87 / 8];
            v89 = v84[v87 / 8 + 1];
            v87 += 8;
            if (v90 == v89)
            {
              v86 = &v84[v87 / 8 - 1];
              goto LABEL_165;
            }
          }
        }
        else
        {
LABEL_165:
          if (v86 != v85)
          {
            v91 = v86 + 2;
            if (v86 + 2 != v85)
            {
              v92 = *v86;
              do
              {
                v93 = v92;
                v92 = *v91;
                if (v93 != *v91)
                {
                  v86[1] = v92;
                  ++v86;
                }
                ++v91;
              }
              while (v91 != v85);
            }
            v85 = v86 + 1;
          }
        }
      }
      LODWORD(v191) = (unint64_t)((char *)v85 - (char *)v84) >> 3;
      if ((_DWORD)v191)
      {
        v94 = 8 * ((unint64_t)((char *)v85 - (char *)v84) >> 3);
        do
        {
          v95 = sub_1C61B7348((uint64_t)v175, v84);
          v96 = v95;
          v97 = v75[4];
          v98 = *((unsigned int *)v95 + 4);
          if (v98 >= *((unsigned int *)v95 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v95 + 1), (uint64_t)(v95 + 3), v98 + 1, 8);
            v98 = *((unsigned int *)v96 + 4);
          }
          *(_QWORD *)(v96[1] + 8 * v98) = v97;
          ++*((_DWORD *)v96 + 4);
          ++v84;
          v94 -= 8;
        }
        while (v94);
      }
      v99 = (uint64_t **)v75[1];
      if (v99)
      {
        do
        {
          v100 = (uint64_t ***)v99;
          v99 = (uint64_t **)*v99;
        }
        while (v99);
      }
      else
      {
        do
        {
          v100 = (uint64_t ***)v75[2];
          v43 = *v100 == v75;
          v75 = (uint64_t **)v100;
        }
        while (!v43);
      }
      v75 = (uint64_t **)v100;
    }
    while (v100 != v1);
    v101 = (uint64_t **)v168;
    if (v168 != v1)
    {
      do
      {
        sub_1C4F6E810((uint64_t)&v168, (uint64_t)v101[4], (uint64_t)(v101 + 5));
        v102 = (uint64_t **)v101[1];
        if (v102)
        {
          do
          {
            v103 = (uint64_t ***)v102;
            v102 = (uint64_t **)*v102;
          }
          while (v102);
        }
        else
        {
          do
          {
            v103 = (uint64_t ***)v101[2];
            v43 = *v103 == v101;
            v101 = (uint64_t **)v103;
          }
          while (!v43);
        }
        v101 = (uint64_t **)v103;
      }
      while (v103 != v1);
    }
  }
  for (i = v181; v180 != v181; i = v181)
  {
    v105 = *(_QWORD *)(i - 8);
    v186 = 0;
    if (sub_1C61B75F0(v177, v179, v105, &v186))
    {
      *v186 = -8192;
      v178 = vadd_s32(v178, (int32x2_t)0x1FFFFFFFFLL);
    }
    v106 = v169;
    v181 -= 8;
    if (!v169)
      goto LABEL_204;
    v107 = v1;
    do
    {
      v108 = v107;
      v109 = v106;
      v110 = (unint64_t)v106[4];
      if (v110 >= v105)
        v107 = (uint64_t ***)v106;
      else
        ++v106;
      v106 = (uint64_t **)*v106;
    }
    while (v106);
    if (v107 == v1)
      goto LABEL_204;
    if (v110 >= v105)
      v108 = v109;
    if (v108[4] > v105)
LABEL_204:
      v107 = v1;
    sub_1C4F6E810((uint64_t)&v168, v105, (uint64_t)(v107 + 5));
  }
  if (v190 != (uint64_t *)&v192)
    free(v190);
  v111 = v168;
  if (v168 != v1)
  {
    do
    {
      sub_1C4F68700(&v190, (uint64_t)(v111 + 5));
      v155 = sub_1C4F6DEEC(&v156, (unint64_t)v111[4]);
      v112 = v190;
      if (v190 != &v191)
      {
        v113 = v155 + 1;
        do
        {
          v114 = v112 + 5;
          sub_1C4F6D6C0((uint64_t)(v112 + 5), (uint64_t)v4);
          v115 = (uint64_t *)v112[12];
          if (v115 != v112 + 13)
          {
            do
            {
              sub_1C4F6DFF0((uint64_t)&v161, (uint64_t)&v168, v115[4], *((_DWORD *)v115 + 10), (llvm::ConstantRange *)(v115 + 6));
              sub_1C4F6C800((unsigned int *)&v186, (uint64_t)(v112 + 5), (unsigned int *)&v161);
              if (*((_DWORD *)v112 + 12) >= 0x41u && *v114)
                MEMORY[0x1CAA32F9C](*v114, 0x1000C8000313F17);
              v112[5] = (uint64_t)v186;
              *((_DWORD *)v112 + 12) = v187;
              v187 = 0;
              if (*((_DWORD *)v112 + 16) >= 0x41u && (v118 = v112[7]) != 0)
              {
                MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
                v119 = v187;
                v112[7] = v188;
                *((_DWORD *)v112 + 16) = v189;
                v189 = 0;
                if (v119 >= 0x41 && v186)
                  MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
              }
              else
              {
                v112[7] = v188;
                *((_DWORD *)v112 + 16) = v189;
              }
              if (v164 >= 0x41 && v163)
                MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
              if (v162 >= 0x41 && v161)
                MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
              v116 = (uint64_t *)v115[1];
              if (v116)
              {
                do
                {
                  v117 = v116;
                  v116 = (uint64_t *)*v116;
                }
                while (v116);
              }
              else
              {
                do
                {
                  v117 = (uint64_t *)v115[2];
                  v43 = *v117 == (_QWORD)v115;
                  v115 = v117;
                }
                while (!v43);
              }
              v115 = v117;
            }
            while (v117 != v112 + 13);
          }
          v120 = *v113;
          if (!*v113)
            goto LABEL_245;
          v121 = v112[4];
          v122 = v155 + 1;
          do
          {
            v123 = v120[4];
            v124 = v123 >= v121;
            if (v123 >= v121)
              v125 = (uint64_t **)v120;
            else
              v125 = (uint64_t **)(v120 + 1);
            if (v124)
              v122 = (uint64_t **)v120;
            v120 = *v125;
          }
          while (*v125);
          if (v122 == v113 || v121 < (unint64_t)v122[4])
LABEL_245:
            v122 = v155 + 1;
          sub_1C4F6E294((uint64_t **)v112 + 12, v122 + 12);
          v126 = (uint64_t *)v112[1];
          if (v126)
          {
            do
            {
              v127 = v126;
              v126 = (uint64_t *)*v126;
            }
            while (v126);
          }
          else
          {
            do
            {
              v127 = (uint64_t *)v112[2];
              v43 = *v127 == (_QWORD)v112;
              v112 = v127;
            }
            while (!v43);
          }
          v112 = v127;
        }
        while (v127 != &v191);
      }
      v128 = v193;
      if (v193 != (uint64_t *)&v194)
      {
        v129 = v155 + 4;
        do
        {
          v130 = *v129;
          if (!*v129)
            goto LABEL_265;
          v131 = *((_DWORD *)v128 + 8);
          v132 = v155 + 4;
          do
          {
            v133 = *((_DWORD *)v130 + 8);
            v134 = v133 >= v131;
            if (v133 >= v131)
              v135 = v130;
            else
              v135 = v130 + 1;
            if (v134)
              v132 = (uint64_t **)v130;
            v130 = (uint64_t *)*v135;
          }
          while (*v135);
          if (v132 == v129 || v131 < *((_DWORD *)v132 + 8))
LABEL_265:
            v132 = v155 + 4;
          sub_1C4F6E294((uint64_t **)v128 + 12, v132 + 12);
          v136 = (uint64_t *)v128[1];
          if (v136)
          {
            do
            {
              v137 = v136;
              v136 = (uint64_t *)*v136;
            }
            while (v136);
          }
          else
          {
            do
            {
              v137 = (uint64_t *)v128[2];
              v43 = *v137 == (_QWORD)v128;
              v128 = v137;
            }
            while (!v43);
          }
          v128 = v137;
        }
        while (v137 != (uint64_t *)&v194);
      }
      v138 = sub_1C4F6DEEC(v153, (unint64_t)v111[4]);
      v139 = (uint64_t *)(v138 + 1);
      sub_1C4F6D620(v138[1]);
      *v138 = v190;
      v140 = v191;
      v138[1] = (uint64_t *)v191;
      v141 = v192;
      v138[2] = v192;
      if (v141)
      {
        *(_QWORD *)(v140 + 16) = v139;
        v190 = &v191;
        v191 = 0;
        v192 = 0;
      }
      else
      {
        *v138 = v139;
      }
      v142 = (uint64_t *)(v138 + 4);
      sub_1C4F6D620(v138[4]);
      v138[3] = v193;
      v143 = v194;
      v138[4] = v194;
      v144 = v195;
      v138[5] = v195;
      if (v144)
      {
        v145 = 0;
        v143[2] = v142;
        v193 = (uint64_t *)&v194;
        v194 = 0;
        v195 = 0;
      }
      else
      {
        v138[3] = v142;
        v145 = v194;
      }
      *((_DWORD *)v138 + 12) = v196;
      sub_1C4F6D620(v145);
      sub_1C4F6D620((_QWORD *)v191);
      v146 = v111[1];
      if (v146)
      {
        do
        {
          v147 = (uint64_t ***)v146;
          v146 = (uint64_t **)*v146;
        }
        while (v146);
      }
      else
      {
        do
        {
          v147 = (uint64_t ***)v111[2];
          v43 = *v147 == (uint64_t **)v111;
          v111 = v147;
        }
        while (!v43);
      }
      v111 = v147;
    }
    while (v147 != v154);
  }
  sub_1C6176BF8(&v177);
  v148 = v175[0];
  if (v176)
  {
    v149 = 56 * v176;
    v150 = v175[0] + 24;
    v2 = v152;
    do
    {
      if ((*(_QWORD *)(v150 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v151 = *(void **)(v150 - 16);
        if ((void *)v150 != v151)
          free(v151);
      }
      v150 += 56;
      v149 -= 56;
    }
    while (v149);
    v148 = v175[0];
  }
  else
  {
    v2 = v152;
  }
  MEMORY[0x1CAA32FB4](v148, 8);
  v27 = v153;
  if (v174 >= 0x41 && v173)
    MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
  if (v172 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  sub_1C4F6EDB0(v169);
  sub_1C4F6EDB0(v184);
LABEL_35:
  v27[3] = (uint64_t *)(v27 + 7);
  v27[4] = (uint64_t *)(v27 + 7);
  v27[5] = (uint64_t *)8;
  *((_DWORD *)v27 + 12) = 0;
  v27[17] = 0;
  v27[16] = 0;
  v27[15] = (uint64_t *)(v27 + 16);
  v29 = *((_QWORD *)v2 + 6);
  *((_QWORD *)v2 + 6) = v27;
  if (v29)
  {
    v73 = sub_1C61B7C5C(v29);
    MEMORY[0x1CAA32FC0](v73, 0x10E0C40953490F3);
  }
  sub_1C4F6EDB0(v157[0]);
  v31 = (_QWORD *)*((_QWORD *)v2 + 6);
  v34 = (_QWORD *)*v31;
  v32 = v31 + 1;
  v33 = v34;
  if (v34 != v32)
  {
    do
    {
      v35 = (_QWORD *)v33[5];
      if (v35 != v33 + 6)
      {
        do
        {
          v36 = (uint64_t *)v35[4];
          sub_1C4F68A28(&v190, v36);
          v30 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v190, (const llvm::ConstantRange *)(v35 + 5));
          if ((_DWORD)v30)
            v30 = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)(*((_QWORD *)v2 + 6) + 24), (uint64_t)v36);
          v37 = (_QWORD *)v35[9];
          if (v37 != v35 + 10)
          {
            v38 = *((_QWORD *)v2 + 6);
            v39 = (_QWORD **)(v38 + 120);
            v40 = (_QWORD *)(v38 + 128);
            do
            {
              v30 = (uint64_t)sub_1C61B7C9C(v39, v40, v37[4], v37 + 4);
              v41 = (_QWORD *)v37[1];
              if (v41)
              {
                do
                {
                  v42 = v41;
                  v41 = (_QWORD *)*v41;
                }
                while (v41);
              }
              else
              {
                do
                {
                  v42 = (_QWORD *)v37[2];
                  v43 = *v42 == (_QWORD)v37;
                  v37 = v42;
                }
                while (!v43);
              }
              v37 = v42;
            }
            while (v42 != v35 + 10);
          }
          if (v193 >= 0x41)
          {
            v30 = (uint64_t)v192;
            if (v192)
              v30 = MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
          }
          if (v191 >= 0x41)
          {
            v30 = (uint64_t)v190;
            if (v190)
              v30 = MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
          }
          v44 = (_QWORD *)v35[1];
          if (v44)
          {
            do
            {
              v45 = v44;
              v44 = (_QWORD *)*v44;
            }
            while (v44);
          }
          else
          {
            do
            {
              v45 = (_QWORD *)v35[2];
              v43 = *v45 == (_QWORD)v35;
              v35 = v45;
            }
            while (!v43);
          }
          v35 = v45;
        }
        while (v45 != v33 + 6);
      }
      v46 = (_QWORD *)v33[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v33[2];
          v43 = *v47 == (_QWORD)v33;
          v33 = v47;
        }
        while (!v43);
      }
      v33 = v47;
    }
    while (v47 != v32);
  }
  if (byte_1ED7F43B8)
  {
    v48 = (llvm::raw_ostream *)llvm::errs((llvm *)v30);
    llvm::StackSafetyGlobalInfo::print(v2, v48);
  }
  sub_1C4F6EDB0(v159);
  return *((_QWORD *)v2 + 6);
}

uint64_t **sub_1C4F68700(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v36;
  uint64_t *v37;
  char v38;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    while (1)
    {
      v7 = a1[1];
      v8 = v4;
      if (*a1 != v4)
      {
        v9 = a1[1];
        v10 = v4;
        if (v7)
        {
          do
          {
            v8 = v9;
            v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = v6[4];
        if (v8[4] >= v12)
          break;
      }
      if (v7)
        v13 = (uint64_t **)v8;
      else
        v13 = (uint64_t **)v4;
      if (v7)
        v14 = (uint64_t **)(v8 + 1);
      else
        v14 = (uint64_t **)v4;
      if (!*v14)
        goto LABEL_23;
LABEL_26:
      v19 = (_QWORD *)v6[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v6[2];
          v11 = *v20 == (_QWORD)v6;
          v6 = v20;
        }
        while (!v11);
      }
      v6 = v20;
      if (v20 == v5)
        goto LABEL_32;
    }
    v14 = (uint64_t **)v4;
    v13 = (uint64_t **)v4;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v7;
          v15 = v7[4];
          if (v12 >= v15)
            break;
          v7 = *v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_23;
        }
        if (v15 >= v12)
          goto LABEL_26;
        v7 = v13[1];
        if (!v7)
        {
          v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_23:
    v16 = (uint64_t *)operator new(0x78uLL);
    v36 = v16;
    v37 = v4;
    v16[4] = v6[4];
    sub_1C4F6D280((uint64_t)(v16 + 5), (uint64_t)(v6 + 5));
    v38 = 1;
    v17 = v36;
    *v36 = 0;
    v17[1] = 0;
    v17[2] = (uint64_t)v13;
    *v14 = v17;
    v18 = (uint64_t *)**a1;
    if (v18)
    {
      *a1 = v18;
      v17 = *v14;
    }
    sub_1C4768E74(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v36 = 0;
    sub_1C4F6BC2C((uint64_t *)&v36);
    goto LABEL_26;
  }
LABEL_32:
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = (uint64_t *)(a1 + 4);
  v21 = *(_QWORD **)(a2 + 24);
  if (v21 != (_QWORD *)(a2 + 32))
  {
    while (1)
    {
      v22 = a1[4];
      v23 = a1 + 4;
      if (a1[3] != (uint64_t *)(a1 + 4))
      {
        v24 = a1[4];
        v25 = a1 + 4;
        if (v22)
        {
          do
          {
            v23 = (uint64_t **)v24;
            v24 = (uint64_t *)v24[1];
          }
          while (v24);
        }
        else
        {
          do
          {
            v23 = (uint64_t **)v25[2];
            v11 = *v23 == (uint64_t *)v25;
            v25 = v23;
          }
          while (v11);
        }
        v26 = *((_DWORD *)v21 + 8);
        if (*((_DWORD *)v23 + 8) >= v26)
          break;
      }
      if (v22)
        v27 = v23;
      else
        v27 = a1 + 4;
      if (v22)
        v28 = v23 + 1;
      else
        v28 = a1 + 4;
      if (!*v28)
        goto LABEL_54;
LABEL_57:
      v33 = (_QWORD *)v21[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v21[2];
          v11 = *v34 == (_QWORD)v21;
          v21 = v34;
        }
        while (!v11);
      }
      v21 = v34;
      if (v34 == (_QWORD *)(a2 + 32))
        goto LABEL_63;
    }
    v28 = a1 + 4;
    v27 = a1 + 4;
    if (v22)
    {
      while (1)
      {
        while (1)
        {
          v27 = (uint64_t **)v22;
          v29 = *((_DWORD *)v22 + 8);
          if (v26 >= v29)
            break;
          v22 = *v27;
          v28 = v27;
          if (!*v27)
            goto LABEL_54;
        }
        if (v29 >= v26)
          goto LABEL_57;
        v22 = v27[1];
        if (!v22)
        {
          v28 = v27 + 1;
          break;
        }
      }
    }
LABEL_54:
    v30 = (uint64_t *)operator new(0x78uLL);
    v36 = v30;
    v37 = (uint64_t *)(a1 + 4);
    *((_DWORD *)v30 + 8) = *((_DWORD *)v21 + 8);
    sub_1C4F6D280((uint64_t)(v30 + 5), (uint64_t)(v21 + 5));
    v38 = 1;
    v31 = v36;
    *v36 = 0;
    v31[1] = 0;
    v31[2] = (uint64_t)v27;
    *v28 = v31;
    v32 = (uint64_t *)*a1[3];
    if (v32)
    {
      a1[3] = v32;
      v31 = *v28;
    }
    sub_1C4768E74(a1[4], v31);
    a1[5] = (uint64_t *)((char *)a1[5] + 1);
    v36 = 0;
    sub_1C4F6BC2C((uint64_t *)&v36);
    goto LABEL_57;
  }
LABEL_63:
  *((_DWORD *)a1 + 12) = *(_DWORD *)(a2 + 48);
  return a1;
}

void sub_1C4F68A28(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL8 v9;
  char v10;
  uint64_t v11;
  unsigned int PointerTypeSizeInBits;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  void *v18;
  unsigned int v19;
  void *v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  void *__src;
  unsigned int v36;
  BOOL v37;
  void *v38;
  unsigned int v39;

  v4 = *(_QWORD *)(*(_QWORD *)(a2[5] + 56) + 40) + 272;
  v5 = a2[8];
  sub_1C4768AD0(v4, v5);
  v7 = (unint64_t)(v6 + 7) >> 3;
  v9 = v8 == 1;
  llvm::DataLayout::getAlignment(v4, v5);
  v11 = 1 << v10;
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(v4, *a2);
  v13 = PointerTypeSizeInBits;
  *((_DWORD *)a1 + 2) = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a1, 0, 0);
    v24 = *((unsigned int *)a1 + 2);
    *((_DWORD *)a1 + 6) = v24;
    if (v24 >= 0x41)
    {
      v30 = v11;
      v26 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
      v27 = (void *)operator new[]();
      a1[2] = v27;
      v28 = v26;
      v11 = v30;
      memcpy(v27, (const void *)*a1, v28);
      if (v9)
        return;
    }
    else
    {
      a1[2] = *a1;
      if (v9)
        return;
    }
    v39 = v13;
    llvm::APInt::initSlowCase((llvm::APInt *)&v38, (v11 + v7 - 1) & -v11, 1);
  }
  else
  {
    *a1 = 0;
    *((_DWORD *)a1 + 6) = PointerTypeSizeInBits;
    a1[2] = 0;
    if (v9)
      return;
    v39 = PointerTypeSizeInBits;
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PointerTypeSizeInBits;
    if (!PointerTypeSizeInBits)
      v14 = 0;
    v38 = (void *)((v11 + v7 - 1) & -v11 & v14);
  }
  if (!sub_1C49591DC((llvm::APInt *)&v38))
  {
LABEL_47:
    if (v39 < 0x41)
      return;
    v18 = v38;
    if (!v38)
      return;
LABEL_49:
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
    return;
  }
  if (!llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)a2))
    goto LABEL_39;
  v15 = *(a2 - 4);
  v16 = 1;
  if (v15)
  {
    if (*(_BYTE *)(v15 + 16) == 16)
    {
      v37 = 0;
      v36 = *(_DWORD *)(v15 + 32);
      if (v36 > 0x40)
      {
        __src = (void *)operator new[]();
        memcpy(__src, *(const void **)(v15 + 24), (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __src = *(void **)(v15 + 24);
      }
      if (sub_1C49591DC((llvm::APInt *)&__src))
      {
        if (v36 < v13)
        {
          llvm::APInt::sext((llvm::APInt *)&__src, v13, (llvm::APInt *)&v33);
        }
        else if (v36 > v13)
        {
          llvm::APInt::trunc((llvm::APInt *)&__src, v13, (llvm::APInt *)&v33);
        }
        else
        {
          v34 = v36;
          if (v36 > 0x40)
          {
            v33 = (void *)operator new[]();
            memcpy(v33, __src, (((unint64_t)v34 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v33 = __src;
          }
        }
        if (v36 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        __src = v33;
        v36 = v34;
        llvm::APInt::smul_ov((const void **)&v38, (const llvm::APInt *)&__src, &v37, (llvm::APInt *)&v33);
        if (v39 >= 0x41 && v38)
          MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
        v38 = v33;
        v39 = v34;
        v17 = v37;
        v16 = v37;
      }
      else
      {
        v17 = 1;
      }
      if (v36 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (!v17)
      {
LABEL_39:
        v32 = v13;
        if (v13 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v31, 0, 0);
        else
          v31 = 0;
        v19 = v39;
        if (v39 > 0x40)
        {
          v21 = (((unint64_t)v39 + 63) >> 3) & 0x3FFFFFF8;
          v20 = (void *)operator new[]();
          memcpy(v20, v38, v21);
        }
        else
        {
          v20 = v38;
        }
        v22 = v32;
        v23 = v31;
        v32 = 0;
        if (*((_DWORD *)a1 + 2) >= 0x41u && *a1)
          MEMORY[0x1CAA32F9C](*a1, 0x1000C8000313F17);
        *a1 = v23;
        *((_DWORD *)a1 + 2) = v22;
        if (*((_DWORD *)a1 + 6) >= 0x41u)
        {
          v29 = a1[2];
          if (v29)
            MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
        }
        a1[2] = v20;
        *((_DWORD *)a1 + 6) = v19;
        goto LABEL_47;
      }
    }
  }
  if (v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  if (!v16)
  {
    if (*((_DWORD *)a1 + 6) >= 0x41u)
    {
      v25 = a1[2];
      if (v25)
        MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    }
    if (*((_DWORD *)a1 + 2) >= 0x41u)
    {
      v18 = (void *)*a1;
      if (*a1)
        goto LABEL_49;
    }
  }
}

void llvm::StackSafetyGlobalInfo::print(llvm::StackSafetyGlobalInfo *this, llvm::raw_ostream *a2)
{
  _QWORD *Info;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  char *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;

  Info = (_QWORD *)llvm::StackSafetyGlobalInfo::getInfo(this);
  if (Info[2])
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*Info + 32) + 40);
    v5 = v4 + 24;
    v6 = *(_QWORD *)(v4 + 32);
    if (v6 != v4 + 24)
    {
      v7 = Info + 1;
      do
      {
        if (v6)
          v8 = v6 - 56;
        else
          v8 = 0;
        if (v6 && *(_BYTE *)(v8 + 16) == 3)
        {
          if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0)
            goto LABEL_14;
        }
        else if (*(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 72) != v8 + 72 || (*(_BYTE *)(v8 + 34) & 0x80) != 0)
        {
LABEL_14:
          v9 = (_QWORD *)*v7;
          if (!*v7)
            goto LABEL_25;
          v10 = v7;
          do
          {
            v11 = v9[4];
            v12 = v11 >= v8;
            if (v11 >= v8)
              v13 = v9;
            else
              v13 = v9 + 1;
            if (v12)
              v10 = v9;
            v9 = (_QWORD *)*v13;
          }
          while (*v13);
          if (v10 == v7 || v8 < v10[4])
LABEL_25:
            v10 = v7;
          if ((*(_BYTE *)(v8 + 23) & 0x10) != 0)
          {
            v14 = ***(_QWORD ***)v8;
            v15 = *(_QWORD *)(v14 + 152);
            v16 = *(unsigned int *)(v14 + 168);
            if (!(_DWORD)v16)
              goto LABEL_33;
            LODWORD(v17) = (v16 - 1) & ((v8 >> 4) ^ (v8 >> 9));
            v18 = (uint64_t *)(v15 + 16 * v17);
            v19 = *v18;
            if (*v18 != v8)
            {
              v20 = 1;
              while (v19 != -4096)
              {
                v21 = v17 + v20++;
                v17 = v21 & (v16 - 1);
                v19 = *(_QWORD *)(v15 + 16 * v17);
                if (v19 == v8)
                {
                  v18 = (uint64_t *)(v15 + 16 * v17);
                  goto LABEL_34;
                }
              }
LABEL_33:
              v18 = (uint64_t *)(v15 + 16 * v16);
            }
LABEL_34:
            v22 = (_QWORD *)v18[1];
            v25 = *v22;
            v23 = (char *)(v22 + 2);
            v24 = v25;
          }
          else
          {
            v24 = 0;
            v23 = &byte_1C871356D;
          }
          sub_1C4F66D18(v10 + 5, a2, v23, v24, v8);
          v26 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v26) > 0x11)
          {
            *(_WORD *)(v26 + 16) = 14963;
            *(_OWORD *)v26 = *(_OWORD *)"    safe accesses:";
            v27 = (_BYTE *)(*((_QWORD *)a2 + 4) + 18);
            *((_QWORD *)a2 + 4) = v27;
          }
          else
          {
            llvm::raw_ostream::write(a2, "    safe accesses:", 0x12uLL);
            v27 = (_BYTE *)*((_QWORD *)a2 + 4);
          }
          if (*((_BYTE **)a2 + 3) == v27)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v27 = 10;
            ++*((_QWORD *)a2 + 4);
          }
          v28 = v8 + 72;
          for (i = *(_QWORD *)(v8 + 80); i != v28; i = *(_QWORD *)(i + 8))
          {
            v30 = i - 24;
            if (!i)
              v30 = 0;
            v31 = *(_QWORD *)(v30 + 48);
            if (v31 != v30 + 40)
            {
              while (1)
              {
                if (v31)
                  v32 = (unsigned __int8 *)(v31 - 24);
                else
                  v32 = 0;
                v33 = v32[16];
                if (v33 == 84)
                  v34 = v32;
                else
                  v34 = 0;
                if ((v33 & 0xFE) == 0x3C
                  || (sub_1C4DE85D0((uint64_t)v32) & 1) != 0
                  || v31 && v33 == 84 && (v35 = *((_QWORD *)v34 + 8)) != 0 && (*(_BYTE *)(v35 + 32) & 0x20) != 0)
                {
                  if (llvm::StackSafetyGlobalInfo::stackAccessIsSafe(this, (const llvm::Instruction *)v32))
                  {
                    v36 = *((_QWORD *)a2 + 4);
                    if ((unint64_t)(*((_QWORD *)a2 + 3) - v36) > 4)
                    {
                      *(_BYTE *)(v36 + 4) = 32;
                      *(_DWORD *)v36 = 538976288;
                      *((_QWORD *)a2 + 4) += 5;
                    }
                    else
                    {
                      llvm::raw_ostream::write(a2, "     ", 5uLL);
                    }
                    llvm::Value::print((llvm::Value *)v32, a2, 0);
                    v37 = (_BYTE *)*((_QWORD *)a2 + 4);
                    if (*((_BYTE **)a2 + 3) == v37)
                    {
                      llvm::raw_ostream::write(a2, "\n", 1uLL);
                    }
                    else
                    {
                      *v37 = 10;
                      ++*((_QWORD *)a2 + 4);
                    }
                  }
                }
                v31 = *(_QWORD *)(v31 + 8);
                v38 = i - 24;
                if (!i)
                  v38 = 0;
                if (v31 == v38 + 40)
                  break;
LABEL_74:
                if (i == v28)
                  goto LABEL_75;
              }
              while (1)
              {
                i = *(_QWORD *)(i + 8);
                if (i == v28)
                  goto LABEL_75;
                v39 = i - 24;
                if (!i)
                  v39 = 0;
                v31 = *(_QWORD *)(v39 + 48);
                if (v31 != v39 + 40)
                  goto LABEL_74;
              }
            }
          }
LABEL_75:
          v40 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v40)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v40 = 10;
            ++*((_QWORD *)a2 + 4);
          }
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
}

void llvm::StackSafetyInfo::getParamAccesses(llvm::StackSafetyInfo *this@<X0>, llvm::ModuleSummaryIndex *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *Info;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::GlobalValue *v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  Info = llvm::StackSafetyInfo::getInfo(this);
  v6 = (uint64_t *)Info[3];
  v7 = Info + 4;
  if (v6 == Info + 4)
    return;
  do
  {
    v8 = *((unsigned int *)v6 + 12);
    if (v8 > 0x40)
    {
      if (!memcmp((const void *)v6[5], (const void *)v6[7], ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
        && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v6 + 5)) == (_DWORD)v8)
      {
        goto LABEL_30;
      }
    }
    else
    {
      v9 = v6[5];
      if (v9 == v6[7] && (!(_DWORD)v8 || v9 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v8))
        goto LABEL_30;
    }
    sub_1C61B6668(a3, *((_DWORD *)v6 + 8), (uint64_t)(v6 + 5));
    v10 = a3[1] - 24;
    sub_1C61B66C0(v10, v6[14]);
    v11 = (uint64_t *)v6[12];
    if (v11 == v6 + 13)
      goto LABEL_30;
    while (1)
    {
      v12 = *((unsigned int *)v11 + 14);
      if (v12 <= 0x40)
        break;
      if (!memcmp((const void *)v11[6], (const void *)v11[8], ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8)
        && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v11 + 6)) == (_DWORD)v12)
      {
        goto LABEL_22;
      }
LABEL_7:
      v14 = (llvm::GlobalValue *)v11[4];
      v15 = sub_1C4EE9DE0(v14);
      v16 = sub_1C4EEA81C((uint64_t)a2, v15);
      *((_QWORD *)v16 + 1) = v14;
      sub_1C61B67D4(v10, v11[5], (unint64_t)v16 & 0xFFFFFFFFFFFFFFF8 | *((unsigned __int8 *)a2 + 133), (uint64_t)(v11 + 6));
      v17 = (uint64_t *)v11[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v11[2];
          v19 = *v18 == (_QWORD)v11;
          v11 = v18;
        }
        while (!v19);
      }
      v11 = v18;
      if (v18 == v6 + 13)
        goto LABEL_30;
    }
    v13 = v11[6];
    if (v13 != v11[8])
      goto LABEL_7;
    v19 = !(_DWORD)v12 || v13 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    if (!v19)
      goto LABEL_7;
LABEL_22:
    v20 = a3[1];
    v32 = (void **)(v20 - 24);
    sub_1C4EEB714(&v32);
    if (*(_DWORD *)(v20 - 32) >= 0x41u)
    {
      v24 = *(_QWORD *)(v20 - 40);
      if (v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    }
    if (*(_DWORD *)(v20 - 48) >= 0x41u)
    {
      v25 = *(_QWORD *)(v20 - 56);
      if (v25)
        MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    }
    a3[1] = v20 - 64;
LABEL_30:
    v22 = (uint64_t *)v6[1];
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (uint64_t *)v6[2];
        v19 = *v23 == (_QWORD)v6;
        v6 = v23;
      }
      while (!v19);
    }
    v6 = v23;
  }
  while (v23 != v7);
  v27 = *a3;
  for (i = a3[1]; v27 != i; v27 += 64)
  {
    v28 = *(_QWORD *)(v27 + 40);
    v29 = *(_QWORD *)(v27 + 48);
    v30 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 4));
    if (v29 == v28)
      v31 = 0;
    else
      v31 = v30;
    sub_1C4F6F710(v28, v29, v31, 1);
  }
}

_QWORD *llvm::StackSafetyGlobalInfo::StackSafetyGlobalInfo(_QWORD *this)
{
  *this = 0;
  this[5] = 0;
  this[6] = 0;
  this[4] = 0;
  return this;
}

{
  *this = 0;
  this[5] = 0;
  this[6] = 0;
  this[4] = 0;
  return this;
}

_QWORD *llvm::StackSafetyGlobalInfo::StackSafetyGlobalInfo(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = (_QWORD *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[4] + 24))(a2[4]);
    }
    else
    {
      a1[4] = v4;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = a2[5];
  v5 = a2[6];
  a2[6] = 0;
  a1[6] = v5;
  return a1;
}

{
  _QWORD *v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = (_QWORD *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[4] + 24))(a2[4]);
    }
    else
    {
      a1[4] = v4;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = a2[5];
  v5 = a2[6];
  a2[6] = 0;
  a1[6] = v5;
  return a1;
}

void llvm::StackSafetyGlobalInfoWrapperPass::~StackSafetyGlobalInfoWrapperPass(llvm::StackSafetyGlobalInfoWrapperPass *this)
{
  *(_QWORD *)this = &off_1E813B550;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfoWrapperPass *)((char *)this + 32));
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E813B550;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfoWrapperPass *)((char *)this + 32));
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E813B550;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfoWrapperPass *)((char *)this + 32));
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::needsParamAccessSummary(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  if (byte_1ED7F4478)
    return 1;
  for (i = *(_QWORD *)(a1 + 32); i != a1 + 24; i = *(_QWORD *)(i + 8))
  {
    v3 = i - 56;
    if (!i)
      v3 = 0;
    v4 = *(_QWORD *)(v3 + 112);
    if (v4 && (*(_BYTE *)(v4 + 18) & 0x10) != 0)
      return 1;
  }
  return 0;
}

void llvm::generateParamAccessSummary(llvm *this, llvm::ModuleSummaryIndex *a2)
{
  char *v2;
  llvm *v3;
  llvm *v4;
  llvm *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  int **v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  const void **v15;
  uint64_t v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  void **v31;
  void **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t *v48;
  void *v49;
  void *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t **v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  unsigned int v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  void **v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t **v96;
  char *i;
  unint64_t v98;
  uint64_t *v99;
  uint64_t **v100;
  uint64_t **v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  llvm *v105;
  unint64_t v106;
  uint64_t *v107;
  const void **v108;
  const void **v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  BOOL v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t **v120;
  char *v121;
  __n128 v122;
  unint64_t v123;
  uint64_t **v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  char *v133;
  char *v134;
  uint64_t *v135;
  uint64_t *v136;
  void **v137;
  void **v138;
  int *v139;
  void **v140;
  int *v141;
  __n128 v142;
  uint64_t **v143;
  __n128 v144;
  uint64_t **v145;
  uint64_t **v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  _QWORD v156[2];
  unsigned int v157;
  uint64_t v158;
  int32x2_t v159;
  int v160;
  void *__p;
  char *v162;
  uint64_t v163;
  __n128 v164;
  uint64_t v165;
  uint64_t **v166;
  uint64_t *v167;
  uint64_t v168;
  __n128 *v169;
  __n128 v170;
  uint64_t **v171;
  uint64_t *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 136))
    return;
  v2 = *(char **)this;
  if (((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308) && v2 != (char *)this + 8)
  {
    v3 = *(llvm **)this;
    do
    {
      v4 = (llvm *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(llvm **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (llvm *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v9);
      }
      v3 = v5;
    }
    while (v5 != (llvm *)((char *)this + 8));
  }
  v167 = 0;
  v168 = 0;
  v166 = &v167;
  v133 = (char *)this + 8;
  if (v2 == (char *)this + 8)
  {
    v66 = 0;
    v147 = 0;
    v148 = 0;
    goto LABEL_122;
  }
  do
  {
    v134 = v2;
    v6 = (uint64_t *)*((_QWORD *)v2 + 7);
    v7 = (uint64_t *)*((_QWORD *)v2 + 8);
    v135 = v7;
    if (v6 == v7)
      goto LABEL_112;
    do
    {
      v8 = *v6;
      if (*v6)
        v9 = *(_DWORD *)(*v6 + 8) == 1;
      else
        v9 = 0;
      if (v9)
      {
        v10 = *(int ***)(v8 + 112);
        if (v10)
        {
          if (v10[1] != *v10)
          {
            v136 = v6;
            if ((~*(unsigned __int16 *)(v8 + 12) & 0x180) == 0)
            {
              v170 = 0uLL;
              v172 = 0;
              v173 = 0;
              v169 = &v170;
              v171 = &v172;
              v174 = 0;
              v11 = *v10;
              v139 = v10[1];
              if (v139 == *v10)
              {
                v12 = 0;
                v13 = 0;
                v14 = (void **)&v170;
                goto LABEL_91;
              }
              while (2)
              {
                v23 = operator new(0x78uLL);
                v24 = v23;
                v25 = *v11;
                v23[8] = *v11;
                v23[12] = 64;
                *((_QWORD *)v23 + 5) = 0;
                v23[16] = 64;
                *((_QWORD *)v23 + 7) = 0;
                *((_QWORD *)v23 + 10) = 0;
                *((_QWORD *)v23 + 9) = v23 + 20;
                *((_QWORD *)v23 + 13) = 0;
                *((_QWORD *)v23 + 14) = 0;
                *((_QWORD *)v23 + 11) = 0;
                *((_QWORD *)v23 + 12) = v23 + 26;
                v26 = &v172;
                v27 = &v172;
                v28 = v172;
                if (v172)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v26 = (uint64_t **)v28;
                      v29 = *((_DWORD *)v28 + 8);
                      if (v29 <= v25)
                        break;
                      v28 = (uint64_t *)*v28;
                      v27 = v26;
                      if (!*v26)
                        goto LABEL_52;
                    }
                    if (v29 >= v25)
                      break;
                    v28 = (uint64_t *)v28[1];
                    if (!v28)
                    {
                      v27 = v26 + 1;
                      goto LABEL_52;
                    }
                  }
                  sub_1C6143384(0);
                  if (*((_DWORD *)v24 + 16) >= 0x41u)
                  {
                    v19 = v24[7];
                    if (v19)
                      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
                  }
                  if (*((_DWORD *)v24 + 12) >= 0x41u)
                  {
                    v20 = v24[5];
                    if (v20)
                      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
                  }
                  operator delete(v24);
                }
                else
                {
LABEL_52:
                  *(_QWORD *)v23 = 0;
                  *((_QWORD *)v23 + 1) = 0;
                  *((_QWORD *)v23 + 2) = v26;
                  *v27 = (uint64_t *)v23;
                  v30 = (uint64_t *)v23;
                  if (*v171)
                  {
                    v171 = (uint64_t **)*v171;
                    v30 = *v27;
                  }
                  sub_1C4768E74(v172, v30);
                  ++v173;
                  v26 = (uint64_t **)v24;
                }
                v31 = (void **)(v26 + 5);
                if (*((_DWORD *)v26 + 12) > 0x40u || v11[4] > 0x40)
                {
                  v15 = (const void **)(v11 + 2);
                  if (v31 != (void **)(v11 + 2))
                  {
                    llvm::APInt::reallocate((uint64_t)(v26 + 5), v11[4]);
                    v16 = *((unsigned int *)v26 + 12);
                    if (v16 <= 0x40)
                      *v31 = (void *)*v15;
                    else
                      memcpy(*v31, *v15, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
                else
                {
                  v26[5] = (uint64_t *)*((_QWORD *)v11 + 1);
                  *((_DWORD *)v26 + 12) = v11[4];
                }
                v32 = (void **)(v26 + 7);
                if (*((_DWORD *)v26 + 16) > 0x40u || v11[8] > 0x40)
                {
                  v17 = (const void **)(v11 + 6);
                  if (v32 != (void **)(v11 + 6))
                  {
                    llvm::APInt::reallocate((uint64_t)(v26 + 7), v11[8]);
                    v18 = *((unsigned int *)v26 + 16);
                    if (v18 <= 0x40)
                      *v32 = (void *)*v17;
                    else
                      memcpy(*v32, *v17, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
                else
                {
                  v26[7] = (uint64_t *)*((_QWORD *)v11 + 3);
                  *((_DWORD *)v26 + 16) = v11[8];
                }
                v137 = (void **)(v26 + 7);
                v138 = (void **)(v26 + 5);
                v34 = (uint64_t *)*((_QWORD *)v11 + 5);
                v33 = (uint64_t *)*((_QWORD *)v11 + 6);
                v141 = v11;
                if (v34 != v33)
                {
                  v35 = (uint64_t *)(v26 + 13);
                  while (1)
                  {
                    v36 = sub_1C4F6A710(v34[1], *(void **)(v8 + 24), *(_QWORD *)(v8 + 32));
                    if (!v36)
                      break;
                    v37 = v36;
                    v38 = *v34;
                    v39 = (_QWORD *)*v35;
                    v40 = v26 + 13;
                    v41 = v26 + 13;
                    if (*v35)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v41 = v39;
                          v42 = v39[5];
                          if (v38 >= v42)
                            break;
LABEL_66:
                          v39 = (_QWORD *)*v41;
                          v40 = v41;
                          if (!*v41)
                            goto LABEL_73;
                        }
                        if (v42 >= v38)
                        {
                          v43 = v41[4];
                          if (v36 < v43)
                            goto LABEL_66;
                          if (v43 >= v36)
                            goto LABEL_80;
                        }
                        v39 = (_QWORD *)v41[1];
                        if (!v39)
                        {
                          v40 = v41 + 1;
                          break;
                        }
                      }
                    }
LABEL_73:
                    v44 = operator new(0x50uLL);
                    v45 = v44;
                    v44[4] = v37;
                    v44[5] = v38;
                    v46 = *((_DWORD *)v34 + 6);
                    *((_DWORD *)v44 + 14) = v46;
                    if (v46 > 0x40)
                    {
                      v49 = (void *)operator new[]();
                      v45[6] = v49;
                      memcpy(v49, (const void *)v34[2], (((unint64_t)*((unsigned int *)v45 + 14) + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v44[6] = v34[2];
                    }
                    v47 = *((_DWORD *)v34 + 10);
                    *((_DWORD *)v45 + 18) = v47;
                    if (v47 > 0x40)
                    {
                      v50 = (void *)operator new[]();
                      v45[8] = v50;
                      memcpy(v50, (const void *)v34[4], (((unint64_t)*((unsigned int *)v45 + 18) + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v45[8] = v34[4];
                    }
                    *v45 = 0;
                    v45[1] = 0;
                    v45[2] = v41;
                    *v40 = v45;
                    v48 = (uint64_t *)*v26[12];
                    if (v48)
                    {
                      v26[12] = v48;
                      v45 = (_QWORD *)*v40;
                    }
                    sub_1C4768E74(v26[13], v45);
                    v26[14] = (uint64_t *)((char *)v26[14] + 1);
LABEL_80:
                    v34 += 6;
                    if (v34 == v33)
                      goto LABEL_89;
                  }
                  if (*((_DWORD *)v26 + 12) > 0x40u)
                  {
                    llvm::APInt::reallocate((uint64_t)v138, 0x40u);
                    v21 = *((unsigned int *)v26 + 12);
                    if (v21 <= 0x40)
                      *v138 = (void *)-1;
                    else
                      memcpy(*v138, (const void *)0xFFFFFFFFFFFFFFFFLL, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v26[5] = (uint64_t *)-1;
                    *((_DWORD *)v26 + 12) = 64;
                  }
                  if (*((_DWORD *)v26 + 16) > 0x40u)
                  {
                    llvm::APInt::reallocate((uint64_t)v137, 0x40u);
                    v22 = *((unsigned int *)v26 + 16);
                    if (v22 <= 0x40)
                      *v137 = (void *)-1;
                    else
                      memcpy(*v137, (const void *)0xFFFFFFFFFFFFFFFFLL, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v26[7] = (uint64_t *)-1;
                    *((_DWORD *)v26 + 16) = 64;
                  }
                  sub_1C4F6BCD0(v26[13]);
                  v26[13] = 0;
                  v26[14] = 0;
                  v26[12] = v35;
                }
LABEL_89:
                v11 = v141 + 16;
                if (v141 + 16 != v139)
                  continue;
                break;
              }
              v14 = (void **)v169;
              v12 = v170.n128_i64[1];
              v13 = v170.n128_u64[0];
LABEL_91:
              v51 = (uint64_t *)operator new(0x60uLL);
              v52 = v51;
              v51[4] = v8;
              v51[5] = (uint64_t)v14;
              v51[6] = v13;
              v53 = v51 + 6;
              v51[7] = v12;
              if (v12)
              {
                *(_QWORD *)(v13 + 16) = v53;
                v169 = &v170;
                v170 = 0uLL;
              }
              else
              {
                v51[5] = (uint64_t)v53;
              }
              v55 = v171;
              v54 = v172;
              v52[9] = (uint64_t)v172;
              v56 = v52 + 9;
              v52[8] = (uint64_t)v55;
              v57 = v173;
              v52[10] = v173;
              if (v57)
              {
                v54[2] = (uint64_t)v56;
                v171 = &v172;
                v172 = 0;
                v173 = 0;
              }
              else
              {
                v52[8] = (uint64_t)v56;
              }
              *((_DWORD *)v52 + 22) = v174;
              v58 = v167;
              v59 = &v167;
              v60 = &v167;
              if (v167)
              {
                v61 = v52[4];
                while (1)
                {
                  while (1)
                  {
                    v59 = (uint64_t **)v58;
                    v62 = v58[4];
                    if (v61 >= v62)
                      break;
                    v58 = (uint64_t *)*v58;
                    v60 = v59;
                    if (!*v59)
                      goto LABEL_105;
                  }
                  if (v62 >= v61)
                    break;
                  v58 = (uint64_t *)v58[1];
                  if (!v58)
                  {
                    v60 = v59 + 1;
                    goto LABEL_105;
                  }
                }
                sub_1C4F6D620(v54);
                sub_1C4F6D620((_QWORD *)v52[6]);
                operator delete(v52);
              }
              else
              {
LABEL_105:
                *v52 = 0;
                v52[1] = 0;
                v52[2] = (uint64_t)v59;
                *v60 = v52;
                if (*v166)
                {
                  v166 = (uint64_t **)*v166;
                  v52 = *v60;
                }
                sub_1C4768E74(v167, v52);
                ++v168;
              }
              sub_1C4F6D620(v172);
              sub_1C4F6D620(v170.n128_u64[0]);
            }
            v164 = 0uLL;
            v165 = 0;
            sub_1C4F6A86C(v8, &v164);
            v169 = &v164;
            sub_1C4EEB7D8((void ***)&v169);
            v7 = v135;
            v6 = v136;
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
LABEL_112:
    v63 = v134;
    v64 = (char *)*((_QWORD *)v134 + 1);
    if (v64)
    {
      do
      {
        v65 = v64;
        v64 = *(char **)v64;
      }
      while (v64);
    }
    else
    {
      do
      {
        v65 = (char *)*((_QWORD *)v63 + 2);
        v9 = *(_QWORD *)v65 == (_QWORD)v63;
        v63 = v65;
      }
      while (!v9);
    }
    v2 = v65;
  }
  while (v65 != v133);
  v67 = v166;
  v66 = v167;
  v146 = v166;
  v147 = v167;
  v148 = v168;
  if (!v168)
  {
LABEL_122:
    v146 = &v147;
    v150 = v66;
    v151 = 0;
    goto LABEL_123;
  }
  v167[2] = (uint64_t)&v147;
  v166 = &v167;
  v167 = 0;
  v168 = 0;
  v149 = v67;
  v150 = v66;
  v151 = v148;
  if (!v148)
  {
LABEL_123:
    v149 = &v150;
    goto LABEL_124;
  }
  v66[2] = (uint64_t)&v150;
  v146 = &v147;
  v147 = 0;
  v148 = 0;
LABEL_124:
  v153 = 64;
  v152 = -1;
  v155 = 64;
  v154 = -1;
  v156[0] = 0;
  v156[1] = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v162 = 0;
  v163 = 0;
  __p = 0;
  sub_1C4F6EDB0(v147);
  v169 = (__n128 *)&v170.n128_i8[8];
  v170.n128_u64[0] = 0x1000000000;
  v68 = (uint64_t *)v149;
  if (v149 != &v150)
  {
    do
    {
      v170.n128_u32[0] = 0;
      v69 = (uint64_t *)v68[8];
      if (v69 == v68 + 9)
      {
        v77 = (uint64_t *)v169;
        v78 = (void **)v169;
      }
      else
      {
        v70 = 0;
        do
        {
          v71 = (uint64_t *)v69[12];
          if (v71 != v69 + 13)
          {
            do
            {
              v72 = v71[4];
              if (v70 >= v170.n128_u32[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, (uint64_t)&v170.n128_i64[1], v70 + 1, 8);
                v70 = v170.n128_u32[0];
              }
              v169->n128_u64[v70] = v72;
              v70 = ++v170.n128_u32[0];
              v73 = (uint64_t *)v71[1];
              if (v73)
              {
                do
                {
                  v74 = v73;
                  v73 = (uint64_t *)*v73;
                }
                while (v73);
              }
              else
              {
                do
                {
                  v74 = (uint64_t *)v71[2];
                  v9 = *v74 == (_QWORD)v71;
                  v71 = v74;
                }
                while (!v9);
              }
              v71 = v74;
            }
            while (v74 != v69 + 13);
          }
          v75 = (uint64_t *)v69[1];
          if (v75)
          {
            do
            {
              v76 = v75;
              v75 = (uint64_t *)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              v76 = (uint64_t *)v69[2];
              v9 = *v76 == (_QWORD)v69;
              v69 = v76;
            }
            while (!v9);
          }
          v69 = v76;
        }
        while (v76 != v68 + 9);
        v77 = (uint64_t *)v169;
        if (v70 >= 2)
        {
          qsort(v169, v70, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4F72B08);
          v70 = v170.n128_u32[0];
          v77 = (uint64_t *)v169;
        }
        v78 = (void **)&v77[v70];
        v79 = v77;
        if (v70)
        {
          v80 = 0;
          v81 = 8 * v70 - 8;
          while (v81 != v80)
          {
            v83 = v77[v80 / 8];
            v82 = v77[v80 / 8 + 1];
            v80 += 8;
            if (v83 == v82)
            {
              v79 = &v77[v80 / 8 - 1];
              goto LABEL_149;
            }
          }
        }
        else
        {
LABEL_149:
          if (v79 != (uint64_t *)v78)
          {
            v84 = (void **)(v79 + 2);
            if (v79 + 2 != (uint64_t *)v78)
            {
              v85 = *v79;
              do
              {
                v86 = (void *)v85;
                v85 = (uint64_t)*v84;
                if (v86 != *v84)
                {
                  v79[1] = v85;
                  ++v79;
                }
                ++v84;
              }
              while (v84 != v78);
            }
            v78 = (void **)(v79 + 1);
          }
        }
      }
      v170.n128_u32[0] = (unint64_t)((char *)v78 - (char *)v77) >> 3;
      if (v170.n128_u32[0])
      {
        v87 = 8 * ((unint64_t)((char *)v78 - (char *)v77) >> 3);
        do
        {
          sub_1C4F72B24((uint64_t)v156, v77);
          v89 = v88;
          v90 = v68[4];
          v91 = *(unsigned int *)(v88 + 16);
          if (v91 >= *(unsigned int *)(v88 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v88 + 8, v88 + 24, v91 + 1, 8);
            v91 = *(unsigned int *)(v89 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v91) = v90;
          ++*(_DWORD *)(v89 + 16);
          ++v77;
          v87 -= 8;
        }
        while (v87);
      }
      v92 = (uint64_t *)v68[1];
      if (v92)
      {
        do
        {
          v93 = (uint64_t **)v92;
          v92 = (uint64_t *)*v92;
        }
        while (v92);
      }
      else
      {
        do
        {
          v93 = (uint64_t **)v68[2];
          v9 = *v93 == v68;
          v68 = (uint64_t *)v93;
        }
        while (!v9);
      }
      v68 = (uint64_t *)v93;
    }
    while (v93 != &v150);
    v94 = (uint64_t *)v149;
    if (v149 != &v150)
    {
      do
      {
        sub_1C4F72EB4((uint64_t)&v149, v94[4], (uint64_t)(v94 + 5));
        v95 = (uint64_t *)v94[1];
        if (v95)
        {
          do
          {
            v96 = (uint64_t **)v95;
            v95 = (uint64_t *)*v95;
          }
          while (v95);
        }
        else
        {
          do
          {
            v96 = (uint64_t **)v94[2];
            v9 = *v96 == v94;
            v94 = (uint64_t *)v96;
          }
          while (!v9);
        }
        v94 = (uint64_t *)v96;
      }
      while (v96 != &v150);
    }
  }
  for (i = v162; __p != v162; i = v162)
  {
    v98 = *((_QWORD *)i - 1);
    v144.n128_u64[0] = 0;
    if (sub_1C4EBC5C8(v158, v160, v98, &v144))
    {
      *(_QWORD *)v144.n128_u64[0] = -8192;
      v159 = vadd_s32(v159, (int32x2_t)0x1FFFFFFFFLL);
    }
    v99 = v150;
    v162 -= 8;
    if (!v150)
      goto LABEL_188;
    v100 = &v150;
    do
    {
      v101 = v100;
      v102 = v99;
      v103 = v99[4];
      if (v103 >= v98)
        v100 = (uint64_t **)v99;
      else
        ++v99;
      v99 = (uint64_t *)*v99;
    }
    while (v99);
    if (v100 == &v150)
      goto LABEL_188;
    if (v103 >= v98)
      v101 = (uint64_t **)v102;
    if ((unint64_t)v101[4] > v98)
LABEL_188:
      v100 = &v150;
    sub_1C4F72EB4((uint64_t)&v149, v98, (uint64_t)(v100 + 5));
  }
  if (v169 != (__n128 *)&v170.n128_i8[8])
    free(v169);
  v104 = (uint64_t *)v149;
  v105 = this;
  if (v149 != &v150)
  {
    while (1)
    {
      v144 = 0uLL;
      v145 = 0;
      v106 = v104[10];
      if (v106)
      {
        if (v106 >> 58)
          abort();
        v172 = (uint64_t *)&v145;
        v121 = (char *)operator new(v106 << 6);
        sub_1C4F6F404((uint64_t)&v145, 0, 0, 0, 0, (uint64_t)v121, (uint64_t)v121);
        v122 = v144;
        v144.n128_u64[0] = v123;
        v144.n128_u64[1] = (unint64_t)v121;
        v170 = v122;
        v124 = v145;
        v145 = (uint64_t **)&v121[64 * v106];
        v171 = v124;
        v169 = (__n128 *)v122.n128_u64[0];
        sub_1C61B7D3C((uint64_t)&v169);
      }
      v107 = (uint64_t *)v104[8];
      if (v107 != v104 + 9)
        break;
LABEL_226:
      v118 = v104[4];
      v142 = v144;
      v143 = v145;
      v145 = 0;
      v144 = 0uLL;
      sub_1C4F6A86C(v118, &v142);
      v169 = &v142;
      sub_1C4EEB7D8((void ***)&v169);
      v169 = &v144;
      sub_1C4EEB7D8((void ***)&v169);
      v119 = (uint64_t *)v104[1];
      v105 = this;
      if (v119)
      {
        do
        {
          v120 = (uint64_t **)v119;
          v119 = (uint64_t *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (uint64_t **)v104[2];
          v9 = *v120 == v104;
          v104 = (uint64_t *)v120;
        }
        while (!v9);
      }
      v104 = (uint64_t *)v120;
      if (v120 == &v150)
        goto LABEL_235;
    }
    while (1)
    {
      v108 = (const void **)(v107 + 5);
      v109 = (const void **)(v107 + 7);
      v110 = *((unsigned int *)v107 + 12);
      if (v110 > 0x40)
      {
        if (memcmp(*v108, *v109, ((unint64_t)(v110 + 63) >> 3) & 0x3FFFFFF8)
          || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v107 + 5)) != (_DWORD)v110)
        {
          goto LABEL_197;
        }
      }
      else if (*v108 != *v109
             || ((_DWORD)v110 ? (v114 = *v108 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v110)) : (v114 = 1), !v114))
      {
LABEL_197:
        sub_1C61B72A0((uint64_t *)&v144);
        v111 = v144.n128_u64[1];
        *(_QWORD *)(v144.n128_u64[1] - 64) = *((unsigned int *)v107 + 8);
        if (*(_DWORD *)(v111 - 48) > 0x40u || *((_DWORD *)v107 + 12) > 0x40u)
        {
          if ((const void **)(v111 - 56) != v108)
          {
            v140 = (void **)(v111 - 56);
            llvm::APInt::reallocate(v111 - 56, *((_DWORD *)v107 + 12));
            v115 = *(unsigned int *)(v111 - 48);
            if (v115 <= 0x40)
              *v140 = (void *)*v108;
            else
              memcpy(*v140, *v108, ((unint64_t)(v115 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        else
        {
          *(_QWORD *)(v111 - 56) = v107[5];
          *(_DWORD *)(v111 - 48) = *((_DWORD *)v107 + 12);
        }
        if (*(_DWORD *)(v111 - 32) > 0x40u || *((_DWORD *)v107 + 16) > 0x40u)
        {
          v116 = (void **)(v111 - 40);
          if ((const void **)(v111 - 40) != v109)
          {
            llvm::APInt::reallocate(v111 - 40, *((_DWORD *)v107 + 16));
            v117 = *(unsigned int *)(v111 - 32);
            if (v117 <= 0x40)
              *v116 = (void *)*v109;
            else
              memcpy(*v116, *v109, ((unint64_t)(v117 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        else
        {
          *(_QWORD *)(v111 - 40) = v107[7];
          *(_DWORD *)(v111 - 32) = *((_DWORD *)v107 + 16);
        }
      }
      v112 = (uint64_t *)v107[1];
      if (v112)
      {
        do
        {
          v113 = v112;
          v112 = (uint64_t *)*v112;
        }
        while (v112);
      }
      else
      {
        do
        {
          v113 = (uint64_t *)v107[2];
          v9 = *v113 == (_QWORD)v107;
          v107 = v113;
        }
        while (!v9);
      }
      v107 = v113;
      if (v113 == v104 + 9)
        goto LABEL_226;
    }
  }
LABEL_235:
  if (byte_1ED836D79 & 1 | (byte_1EF8F7308 != 0))
  {
    v125 = *(char **)v105;
    if (*(char **)v105 != v133)
    {
      do
      {
        v126 = (char *)*((_QWORD *)v125 + 1);
        if (v126)
        {
          do
          {
            v127 = v126;
            v126 = *(char **)v126;
          }
          while (v126);
        }
        else
        {
          do
          {
            v127 = (char *)*((_QWORD *)v125 + 2);
            v9 = *(_QWORD *)v127 == (_QWORD)v125;
            v125 = v127;
          }
          while (!v9);
        }
        v125 = v127;
      }
      while (v127 != v133);
    }
  }
  if (__p)
  {
    v162 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v158, 8);
  v128 = v156[0];
  if (v157)
  {
    v129 = 56 * v157;
    v130 = v156[0] + 24;
    do
    {
      if ((*(_QWORD *)(v130 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v131 = *(void **)(v130 - 16);
        if ((void *)v130 != v131)
          free(v131);
      }
      v130 += 56;
      v129 -= 56;
    }
    while (v129);
    v128 = v156[0];
  }
  MEMORY[0x1CAA32FB4](v128, 8);
  if (v155 >= 0x41 && v154)
    MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
  if (v153 >= 0x41)
  {
    if (v152)
      MEMORY[0x1CAA32F9C](v152, 0x1000C8000313F17);
  }
  sub_1C4F6EDB0(v150);
  sub_1C4F6EDB0(v167);
}

uint64_t sub_1C4F6A710(unint64_t a1, void *__s2, size_t __n)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t result;
  int v19;
  uint64_t v20;

  if (a1 < 8)
    return 0;
  v4 = *(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v3 = *(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    v10 = 0;
    goto LABEL_29;
  }
  v8 = 0;
  v9 = 8 * (v5 >> 3);
  while (1)
  {
    v10 = *v4;
    v11 = *(_WORD *)(*v4 + 12);
    if ((v11 & 0x80) == 0)
      goto LABEL_14;
    v12 = *(_DWORD *)(v10 + 8);
    if (!v12)
    {
      v13 = *(_QWORD *)(v10 + 72);
      if (!v13)
        goto LABEL_14;
      v12 = *(_DWORD *)(v13 + 8);
    }
    if (v12 != 1)
      goto LABEL_14;
    v14 = v11 & 0xF;
    if (v14 - 7 <= 1)
      break;
    if (v14 && (v14 & 0xE) != 4)
    {
      v17 = v14 < 4 && v5 == 8;
      if (v17)
        v16 = *v4;
      else
        v16 = v8;
    }
    else
    {
      v16 = *v4;
      if (v8)
        return 0;
    }
LABEL_15:
    ++v4;
    v8 = v16;
    v10 = v16;
    v9 -= 8;
    if (!v9)
      goto LABEL_29;
  }
  if (*(_QWORD *)(v10 + 32) != __n)
  {
LABEL_14:
    v16 = v8;
    goto LABEL_15;
  }
  if (__n)
  {
    v15 = memcmp(*(const void **)(v10 + 24), __s2, __n);
    v16 = v8;
    if (v15)
      goto LABEL_15;
  }
LABEL_29:
  while (v10 && (~*(unsigned __int16 *)(v10 + 12) & 0x180) == 0)
  {
    v19 = *(_DWORD *)(v10 + 8);
    if (v19)
    {
      if (v19 == 1)
        return v10;
      else
        return 0;
    }
    result = 0;
    v20 = *(_QWORD *)(v10 + 72);
    if (v20)
    {
      v17 = v20 == v10;
      v10 = *(_QWORD *)(v10 + 72);
      if (!v17)
        continue;
    }
    return result;
  }
  return 0;
}

__n128 sub_1C4F6A86C(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  uint64_t v5;
  __n128 result;
  void **v7;
  void **v8;
  void **v9;

  v3 = *(_QWORD *)(a1 + 112);
  if (a2->n128_u64[0] == a2->n128_u64[1])
  {
    *(_QWORD *)(a1 + 112) = 0;
    if (!v3)
      return result;
    v9 = (void **)v3;
    sub_1C4EEB7D8(&v9);
    v8 = (void **)v3;
    goto LABEL_7;
  }
  if (v3)
  {
    sub_1C61A8184(*(void ***)(a1 + 112));
    result = *a2;
    *(__n128 *)v3 = *a2;
    *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    return result;
  }
  v5 = operator new();
  result = *a2;
  *(__n128 *)v5 = *a2;
  *(_QWORD *)(v5 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  v7 = *(void ***)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v5;
  if (v7)
  {
    v9 = v7;
    sub_1C4EEB7D8(&v9);
    v8 = v7;
LABEL_7:
    MEMORY[0x1CAA32FC0](v8, 0x20C40960023A9);
  }
  return result;
}

uint64_t sub_1C4F6A950(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeScalarEvolutionWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Stack Safety Local Analysis";
  *(_QWORD *)(v3 + 8) = 27;
  *(_QWORD *)(v3 + 16) = "stack-safety-local";
  *(_QWORD *)(v3 + 24) = 18;
  *(_QWORD *)(v3 + 32) = &llvm::StackSafetyInfoWrapperPass::ID;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::StackSafetyInfoWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C4F6A9E8(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v3;
  uint64_t v4;
  llvm *v6;
  _QWORD *v7;
  _QWORD v8[2];

  v6 = this;
  v3 = atomic_load(&qword_1ED82EAA0);
  if (v3 != -1)
  {
    v8[0] = sub_1C4F6A950;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED82EAA0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  llvm::initializeImmutableModuleSummaryIndexWrapperPassPass(this, a2);
  v4 = operator new();
  *(_QWORD *)v4 = "Stack Safety Analysis";
  *(_QWORD *)(v4 + 8) = 21;
  *(_QWORD *)(v4 + 16) = "stack-safety";
  *(_QWORD *)(v4 + 24) = 12;
  *(_QWORD *)(v4 + 32) = &llvm::StackSafetyGlobalInfoWrapperPass::ID;
  *(_WORD *)(v4 + 40) = 256;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = llvm::callDefaultCtor<llvm::StackSafetyGlobalInfoWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)this, (_QWORD *)v4, 1);
  return v4;
}

void sub_1C4F6AAD4(uint64_t a1, const llvm::AllocaInst *a2, uint64_t a3, llvm::StackLifetime *this)
{
  uint64_t v5;
  unint64_t v6;
  const llvm::AllocaInst *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v20;
  unsigned int v21;
  void *v22;
  int v23;
  _QWORD *v24;
  uint64_t **v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  _BOOL4 v54;
  char v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t SCEVIter;
  uint64_t v68;
  uint64_t RangeRef;
  uint64_t v70;
  unsigned int v71;
  char *v72;
  unsigned int v73;
  BOOL v74;
  const void **v75;
  unsigned int v76;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  _QWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _QWORD *v103;
  int v104;
  void *v105;
  void *v106;
  uint64_t v107;
  unsigned int v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  const llvm::AllocaInst *v116;
  unsigned int *v118;
  void *__src;
  unsigned int v120;
  void *v121;
  unsigned int v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  int v126;
  _BYTE v127[128];
  void *v128;
  unsigned int v129;
  void *v130;
  unsigned int v131;
  void *v132;
  unsigned int v133;
  const void *v134;
  unsigned int v135;
  void *v136;
  unsigned int v137;
  const void *v138;
  unsigned int v139;
  _QWORD *v140;
  unsigned int v141;
  unsigned int v142;
  _QWORD v143[10];

  v5 = a3;
  v6 = (unint64_t)a2;
  v143[8] = *MEMORY[0x1E0C80C00];
  v123 = v127;
  v124 = v127;
  v125 = 16;
  if (*((_BYTE *)a2 + 16) == 59)
    v8 = a2;
  else
    v8 = 0;
  v126 = 0;
  v140 = v143;
  v118 = (unsigned int *)(a1 + 32);
  v115 = a3 + 64;
  v142 = 8;
  v143[0] = a2;
  v9 = 1;
  v116 = v8;
  do
  {
    v10 = v140[--v9];
    v141 = v9;
    v11 = *(unint64_t **)(v10 + 8);
    if (!v11)
      continue;
    do
    {
      v12 = v11[3];
      if (!llvm::StackLifetime::isReachable(this, (const llvm::Instruction *)v12))
        goto LABEL_155;
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 > 0x3C)
      {
        if (v13 != 61)
        {
          if (v13 != 84)
          {
            if (v13 == 88)
              goto LABEL_155;
LABEL_16:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v123, v12);
            if (v16)
            {
              v17 = v141;
              if (v141 >= (unint64_t)v142)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, (uint64_t)v143, v141 + 1, 8);
                v17 = v141;
              }
              v140[v17] = v12;
              ++v141;
            }
            goto LABEL_155;
          }
          goto LABEL_20;
        }
        v23 = *(_DWORD *)(v12 + 20);
        if ((v23 & 0x40000000) != 0)
          v24 = *(_QWORD **)(v12 - 8);
        else
          v24 = (_QWORD *)(v12 - 32 * (v23 & 0x7FFFFFF));
        if (v10 == *v24)
          goto LABEL_99;
        if (v8)
        {
          if (!llvm::StackLifetime::isAliveAfter(this, v8, (const llvm::Instruction *)v12))
            goto LABEL_99;
          v23 = *(_DWORD *)(v12 + 20);
          if ((v23 & 0x40000000) != 0)
            goto LABEL_92;
LABEL_38:
          v25 = (uint64_t **)(v12 - 32 * (v23 & 0x7FFFFFF));
        }
        else
        {
          if ((v23 & 0x40000000) == 0)
            goto LABEL_38;
LABEL_92:
          v25 = *(uint64_t ***)(v12 - 8);
        }
        v14 = *(_QWORD *)(a1 + 8);
        v15 = **v25;
LABEL_94:
        sub_1C4768AD0(v14, v15);
        v52 = (unint64_t)(v51 + 7) >> 3;
        v54 = v53 == 1;
        sub_1C4F6BEF4((uint64_t)&v136, a1, *v11, v6, v52, v54);
        v55 = sub_1C4F6C224(a1, (uint64_t)v11, (uint64_t *)v8, v52, v54);
        goto LABEL_95;
      }
      if (v13 == 29)
        goto LABEL_99;
      if (v13 != 33)
      {
        if (v13 != 60)
          goto LABEL_16;
        if (v8 && (llvm::StackLifetime::isAliveAfter(this, v8, (const llvm::Instruction *)v12) & 1) == 0)
          goto LABEL_99;
        v14 = *(_QWORD *)(a1 + 8);
        v15 = *(_QWORD *)v12;
        goto LABEL_94;
      }
LABEL_20:
      if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v12))
        goto LABEL_155;
      if (v8 && (llvm::StackLifetime::isAliveAfter(this, v8, (const llvm::Instruction *)v12) & 1) == 0)
        goto LABEL_99;
      if (!sub_1C4DE85D0(v12))
      {
        LODWORD(v132) = 0;
        if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)(v12 + 64), 46, (int *)&v132))
          goto LABEL_206;
        v26 = *(_QWORD *)(v12 - 32);
        if (v26)
        {
          if (*(_BYTE *)(v26 + 16)
            || *(_QWORD *)(v26 + 24) != *(_QWORD *)(v12 + 72)
            || (v136 = *(void **)(v26 + 112), !llvm::AttributeList::hasAttrSomewhere((uint64_t *)&v136, 46, (int *)&v132)))
          {
            v26 = 0;
            goto LABEL_45;
          }
LABEL_206:
          v26 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * ((_DWORD)v132 - 1));
        }
LABEL_45:
        if (v26 == v10)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v123, v12);
          if (v27)
          {
            v28 = v141;
            if (v141 >= (unint64_t)v142)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, (uint64_t)v143, v141 + 1, 8);
              v28 = v141;
            }
            v140[v28] = v12;
            ++v141;
          }
        }
        v29 = *(_DWORD *)(v12 + 20);
        v30 = v12 - 32 * (v29 & 0x7FFFFFF);
        if (v30 > (unint64_t)v11)
          goto LABEL_99;
        v31 = *(unsigned __int8 *)(v12 + 16);
        if (v31 == 84)
        {
          v32 = 0;
          if ((v29 & 0x80000000) == 0)
            goto LABEL_53;
LABEL_213:
          v111 = *(_QWORD *)(v30 - 8);
          if ((v111 & 0xFFFFFFFF0) != 0)
            v33 = (*(_DWORD *)(v30 - 12) - *(_DWORD *)(v30 - v111));
          else
            v33 = 0;
          v8 = v116;
          v6 = (unint64_t)a2;
        }
        else
        {
          if (v31 == 39)
            v32 = (*(_DWORD *)(v12 + 80) + 1);
          else
            v32 = 2;
          v8 = v116;
          v6 = (unint64_t)a2;
          if (v29 < 0)
            goto LABEL_213;
LABEL_53:
          v33 = 0;
        }
        if (v12 - 32 * v32 - 32 * v33 - 32 <= (unint64_t)v11)
          goto LABEL_99;
        v114 = v5;
        v34 = (unint64_t)v11 - v30;
        v35 = ((unint64_t)v11 - v30) >> 5;
        if (!llvm::CallBase::paramHasAttr(v12, v35, 69))
        {
          v36 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v12 - 32));
          if (!v36 || (v37 = v36, *((unsigned __int8 *)v36 + 16) >= 4u))
          {
            v5 = v114;
LABEL_99:
            sub_1C4F6BD60(v5, v12, v118, 0);
            goto LABEL_155;
          }
          sub_1C4F6C388((uint64_t)&v136, a1, *v11, v6);
          v38 = (v34 >> 5);
          v39 = (uint64_t *)v115;
LABEL_59:
          while (1)
          {
            v40 = (uint64_t *)*v39;
            v41 = v39;
            if (!*v39)
              break;
            while (1)
            {
              v39 = v40;
              v42 = v40[5];
              if (v38 < v42)
                break;
              if (v42 >= v38)
              {
                v43 = v39[4];
                if ((unint64_t)v37 < v43)
                  goto LABEL_59;
                if (v43 >= (unint64_t)v37)
                {
                  v100 = v39 + 6;
                  llvm::ConstantRange::unionWith((uint64_t)(v39 + 6), (unsigned int *)&v136, 0, (uint64_t)&v132);
                  if (*((_DWORD *)v39 + 14) >= 0x41u && *v100)
                    MEMORY[0x1CAA32F9C](*v100, 0x1000C8000313F17);
                  v39[6] = (uint64_t)v132;
                  *((_DWORD *)v39 + 14) = v133;
                  v133 = 0;
                  v5 = v114;
                  v6 = (unint64_t)a2;
                  if (*((_DWORD *)v39 + 18) >= 0x41u && (v112 = v39[8]) != 0)
                  {
                    MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
                    v113 = v133;
                    v39[8] = (uint64_t)v134;
                    *((_DWORD *)v39 + 18) = v135;
                    v135 = 0;
                    if (v113 >= 0x41 && v132)
                      MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
                  }
                  else
                  {
                    v39[8] = (uint64_t)v134;
                    *((_DWORD *)v39 + 18) = v135;
                  }
                  goto LABEL_73;
                }
              }
              v40 = (uint64_t *)v39[1];
              if (!v40)
              {
                v41 = v39 + 1;
                goto LABEL_66;
              }
            }
          }
LABEL_66:
          v44 = operator new(0x50uLL);
          v45 = v44;
          v44[4] = v37;
          v44[5] = v38;
          v46 = v137;
          *((_DWORD *)v44 + 14) = v137;
          if (v46 > 0x40)
          {
            v109 = (void *)operator new[]();
            v45[6] = v109;
            memcpy(v109, v136, (((unint64_t)*((unsigned int *)v45 + 14) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v44[6] = v136;
          }
          v5 = v114;
          v47 = v139;
          *((_DWORD *)v45 + 18) = v139;
          if (v47 > 0x40)
          {
            v110 = (void *)operator new[]();
            v45[8] = v110;
            memcpy(v110, v138, (((unint64_t)*((unsigned int *)v45 + 18) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v45[8] = v138;
          }
          *v45 = 0;
          v45[1] = 0;
          v45[2] = v39;
          *v41 = v45;
          v48 = **(_QWORD **)(v114 + 56);
          if (v48)
          {
            *(_QWORD *)(v114 + 56) = v48;
            v45 = (_QWORD *)*v41;
          }
          sub_1C4768E74(*(uint64_t **)(v114 + 64), v45);
          ++*(_QWORD *)(v114 + 72);
          v6 = (unint64_t)a2;
LABEL_73:
          if (v139 >= 0x41 && v138)
            MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
          if (v137 < 0x41)
            goto LABEL_155;
          goto LABEL_97;
        }
        v95 = *(_QWORD *)(a1 + 8);
        v96 = sub_1C6199478(v12, v35);
        sub_1C4768AD0(v95, v96);
        v98 = (unint64_t)(v97 + 7) >> 3;
        LODWORD(v95) = v99 == 1;
        sub_1C4F6BEF4((uint64_t)&v136, a1, *v11, v6, v98, v95);
        v55 = sub_1C4F6C224(a1, (uint64_t)v11, (uint64_t *)v8, v98, v95);
        v5 = v114;
LABEL_95:
        sub_1C4F6BD60(v5, v12, (unsigned int *)&v136, v55);
        if (v139 >= 0x41 && v138)
          MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
        if (v137 < 0x41)
          goto LABEL_155;
LABEL_97:
        v56 = v136;
        if (v136)
          goto LABEL_185;
        goto LABEL_155;
      }
      v18 = *(_DWORD *)(*(_QWORD *)(v12 - 32) + 36) - 194;
      if (v18 <= 3 && v18 != 1)
      {
        v20 = (_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
        if (v20[4] != *v11 && *v20 != *v11)
        {
          v21 = *(_DWORD *)(a1 + 24);
          v120 = v21;
          if (v21 <= 0x40)
            goto LABEL_78;
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v122 = v120;
          if (v120 <= 0x40)
          {
            v22 = __src;
LABEL_112:
            v121 = v22;
            goto LABEL_132;
          }
          v105 = (void *)operator new[]();
          v121 = v105;
          v106 = __src;
          goto LABEL_194;
        }
LABEL_79:
        v49 = ****(_QWORD *****)(a1 + 16);
        v50 = *(_DWORD *)(a1 + 24);
        LODWORD(v136) = v50;
        if (v50 <= 63)
        {
          if (v50 > 31)
          {
            if (v50 == 32)
              goto LABEL_101;
            goto LABEL_180;
          }
          if (v50 != 16 && v50 != 8 && v50 != 1)
            goto LABEL_180;
        }
        else
        {
          if (v50 == 64 || v50 == 128)
            goto LABEL_101;
LABEL_180:
          v101 = sub_1C5270984(*v49 + 2168, &v136);
          if (!*((_QWORD *)v101 + 1))
          {
            v102 = v101;
            v103 = (_QWORD *)sub_1C484358C(*v49 + 2040, 24, 3);
            v104 = (int)v136;
            *v103 = v49;
            v103[2] = 0;
            v103[1] = (v104 << 8) | 0xDu;
            *((_QWORD *)v102 + 1) = v103;
          }
        }
LABEL_101:
        v57 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 64);
        if ((*(_DWORD *)(*(_QWORD *)v57 + 8) & 0xFD) != 0xD)
        {
          v120 = *(_DWORD *)(a1 + 40);
          v6 = (unint64_t)a2;
          if (v120 > 0x40)
          {
            __src = (void *)operator new[]();
            memcpy(__src, *(const void **)v118, (((unint64_t)v120 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __src = *(void **)v118;
          }
          v8 = v116;
          v122 = *(_DWORD *)(a1 + 56);
          if (v122 <= 0x40)
          {
            v22 = *(void **)(a1 + 48);
            goto LABEL_112;
          }
          v105 = (void *)operator new[]();
          v121 = v105;
          v106 = *(void **)(a1 + 48);
LABEL_194:
          memcpy(v105, v106, (((unint64_t)v122 + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_132;
        }
        v58 = *(_QWORD *)(a1 + 16);
        v59 = *(_QWORD *)(v58 + 104);
        v60 = *(_DWORD *)(v58 + 120);
        v6 = (unint64_t)a2;
        if (v60)
        {
          v61 = v60 - 1;
          v62 = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
          v63 = v59 + 48 * v62;
          v64 = *(_QWORD *)(v63 + 24);
          if (v64 != v57)
          {
            v65 = 1;
            while (v64 != -4096)
            {
              v66 = v62 + v65++;
              v62 = v66 & v61;
              v63 = v59 + 48 * (v66 & v61);
              v64 = *(_QWORD *)(v63 + 24);
              if (v64 == v57)
                goto LABEL_114;
            }
            goto LABEL_113;
          }
        }
        else
        {
LABEL_113:
          v63 = v59 + 48 * v60;
        }
LABEL_114:
        v8 = v116;
        if (v63 == v59 + 48 * v60 || (SCEVIter = *(_QWORD *)(v63 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 16), v57);
        llvm::ScalarEvolution::getTruncateOrZeroExtend(v58, SCEVIter);
        RangeRef = llvm::ScalarEvolution::getRangeRef(*(_QWORD *)(a1 + 16), v68, 1u, 0);
        v70 = RangeRef;
        v137 = *(_DWORD *)(RangeRef + 8);
        if (v137 > 0x40)
        {
          v136 = (void *)operator new[]();
          memcpy(v136, *(const void **)v70, (((unint64_t)v137 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v136 = *(void **)RangeRef;
        }
        v71 = *(_DWORD *)(v70 + 24);
        v139 = v71;
        if (v71 > 0x40)
        {
          v72 = (char *)operator new[]();
          v138 = v72;
          v107 = v5;
          v108 = v139;
          memcpy(v72, *(const void **)(v70 + 16), (((unint64_t)v139 + 63) >> 3) & 0x3FFFFFF8);
          v71 = v108;
          v5 = v107;
          v6 = (unint64_t)a2;
        }
        else
        {
          v72 = *(char **)(v70 + 16);
          v138 = v72;
        }
        v73 = v71 - 1;
        v74 = v71 >= 0x41;
        v75 = &v138;
        if (v74)
          v75 = (const void **)&v72[8 * (v73 >> 6)];
        if ((((unint64_t)*v75 >> v73) & 1) != 0 || sub_1C4F6CC8C((const void **)&v136))
        {
          v120 = *(_DWORD *)(a1 + 40);
          if (v120 > 0x40)
          {
            __src = (void *)operator new[]();
            memcpy(__src, *(const void **)v118, (((unint64_t)v120 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __src = *(void **)v118;
          }
          v122 = *(_DWORD *)(a1 + 56);
          if (v122 > 0x40)
          {
            v121 = (void *)operator new[]();
            memcpy(v121, *(const void **)(a1 + 48), (((unint64_t)v122 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v121 = *(void **)(a1 + 48);
          }
        }
        else
        {
          llvm::ConstantRange::sextOrTrunc((llvm::ConstantRange *)&v136, *(_DWORD *)(a1 + 24), (uint64_t)&v132);
          if (v137 >= 0x41 && v136)
            MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
          v136 = v132;
          v137 = v133;
          v133 = 0;
          if (v139 >= 0x41 && v138)
          {
            MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
            v138 = v134;
            v139 = v135;
            v135 = 0;
            if (v133 >= 0x41 && v132)
              MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
          }
          else
          {
            v138 = v134;
            v139 = v135;
          }
          v131 = *(_DWORD *)(a1 + 24);
          if (v131 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v130, 0, 0);
          else
            v130 = 0;
          v129 = v139;
          if (v139 > 0x40)
          {
            v128 = (void *)operator new[]();
            memcpy(v128, v138, (((unint64_t)v129 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v128 = (void *)v138;
          }
          llvm::APInt::operator-=((uint64_t)&v128, 1uLL);
          v94 = v129;
          v129 = 0;
          v133 = v131;
          v132 = v130;
          v131 = 0;
          v135 = v94;
          v134 = v128;
          sub_1C4F6C958((llvm::APInt *)&__src, a1, *v11, v6, (uint64_t)&v132);
          if (v135 >= 0x41 && v134)
            MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
          if (v133 >= 0x41 && v132)
            MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
        }
        if (v139 >= 0x41 && v138)
          MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
        if (v137 >= 0x41 && v136)
          MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
        goto LABEL_132;
      }
      if (*(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)) == *v11)
        goto LABEL_79;
      v21 = *(_DWORD *)(a1 + 24);
      v120 = v21;
      if (v21 <= 0x40)
      {
LABEL_78:
        v22 = 0;
        __src = 0;
        v122 = v21;
        goto LABEL_112;
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      v122 = v120;
      if (v120 <= 0x40)
      {
        v22 = __src;
        v8 = v116;
        v6 = (unint64_t)a2;
        goto LABEL_112;
      }
      v121 = (void *)operator new[]();
      memcpy(v121, __src, (((unint64_t)v122 + 63) >> 3) & 0x3FFFFFF8);
      v8 = v116;
      v6 = (unint64_t)a2;
LABEL_132:
      v76 = *(_DWORD *)(*(_QWORD *)(v12 - 32) + 36) - 194;
      if (v76 > 3 || v76 == 1)
      {
        v82 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
        v81 = *(_QWORD *)(v12 - 32 * v82);
        if (v81 != *v11)
        {
LABEL_140:
          v83 = 1;
          goto LABEL_153;
        }
        v79 = -v82;
      }
      else
      {
        v78 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
        v79 = -v78;
        v80 = (_QWORD *)(v12 - 32 * v78);
        v81 = v80[4];
        if (v81 != *v11)
        {
          if (*v80 != *v11)
            goto LABEL_140;
          v81 = *v11;
        }
      }
      v84 = *(_QWORD *)(v12 + 32 * v79 + 64);
      v85 = *(_QWORD *)(a1 + 16);
      v86 = *(_QWORD *)(v85 + 104);
      v87 = *(_DWORD *)(v85 + 120);
      if (v87)
      {
        v88 = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
        v89 = v86 + 48 * v88;
        v90 = *(_QWORD *)(v89 + 24);
        if (v90 == v84)
          goto LABEL_149;
        v91 = 1;
        while (v90 != -4096)
        {
          v92 = v88 + v91++;
          v88 = v92 & (v87 - 1);
          v89 = v86 + 48 * v88;
          v90 = *(_QWORD *)(v89 + 24);
          if (v90 == v84)
            goto LABEL_149;
        }
      }
      v89 = v86 + 48 * v87;
LABEL_149:
      if (v89 == v86 + 48 * v87 || (v93 = *(_QWORD *)(v89 + 40)) == 0)
      {
        v93 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v85, v84);
        v81 = *v11;
      }
      v83 = sub_1C4F6CE30(a1, v81, v11[3], (uint64_t *)v8, v93);
LABEL_153:
      sub_1C4F6BD60(v5, v12, (unsigned int *)&__src, v83);
      if (v122 >= 0x41 && v121)
        MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
      if (v120 >= 0x41)
      {
        v56 = __src;
        if (__src)
LABEL_185:
          MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
      }
LABEL_155:
      v11 = (unint64_t *)v11[1];
    }
    while (v11);
    v9 = v141;
  }
  while (v9);
  if (v140 != v143)
    free(v140);
  if (v124 != v123)
    free(v124);
}

uint64_t *sub_1C4F6BC2C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_1C4F6BCD0(*(_QWORD **)(v2 + 104));
      sub_1C6143384(*(_QWORD **)(v2 + 80));
      if (*(_DWORD *)(v2 + 64) >= 0x41u)
      {
        v5 = *(_QWORD *)(v2 + 56);
        if (v5)
          MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(v2 + 48) >= 0x41u)
      {
        v4 = *(_QWORD *)(v2 + 40);
        if (v4)
          MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1C4F6BCD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    sub_1C4F6BCD0(*a1);
    sub_1C4F6BCD0(a1[1]);
    if (*((_DWORD *)a1 + 18) >= 0x41u)
    {
      v2 = a1[8];
      if (v2)
        MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
    }
    if (*((_DWORD *)a1 + 14) >= 0x41u)
    {
      v3 = a1[6];
      if (v3)
        MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
    }
    operator delete(a1);
  }
}

void sub_1C4F6BD60(uint64_t a1, unint64_t a2, unsigned int *a3, char a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  if ((a4 & 1) == 0)
  {
    v8 = (uint64_t **)(a1 + 40);
    v7 = *(uint64_t **)(a1 + 40);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v10 = v7[4];
          if (v10 <= a2)
            break;
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_10;
        }
        if (v10 >= a2)
          break;
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_10;
        }
      }
    }
    else
    {
      v9 = (uint64_t **)(a1 + 40);
LABEL_10:
      v11 = (uint64_t *)operator new(0x28uLL);
      v11[4] = a2;
      *v11 = 0;
      v11[1] = 0;
      v11[2] = (uint64_t)v9;
      *v8 = v11;
      v12 = **(_QWORD **)(a1 + 32);
      if (v12)
      {
        *(_QWORD *)(a1 + 32) = v12;
        v13 = *v8;
      }
      else
      {
        v13 = v11;
      }
      sub_1C4768E74(*(uint64_t **)(a1 + 40), v13);
      ++*(_QWORD *)(a1 + 48);
    }
  }
  sub_1C4F6C800((unsigned int *)&v16, a1, a3);
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  *(_QWORD *)a1 = v16;
  *(_DWORD *)(a1 + 8) = v17;
  v17 = 0;
  if (*(_DWORD *)(a1 + 24) >= 0x41u && (v14 = *(_QWORD *)(a1 + 16)) != 0)
  {
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
    v15 = v17;
    *(_QWORD *)(a1 + 16) = v18;
    *(_DWORD *)(a1 + 24) = v19;
    v19 = 0;
    if (v15 >= 0x41)
    {
      if (v16)
        MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v18;
    *(_DWORD *)(a1 + 24) = v19;
  }
}

void sub_1C4F6BEF4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  size_t v21;
  size_t v22;
  void *v23;
  size_t v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;

  if (a6 == 1)
  {
    v8 = *(unsigned int *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = v8;
    if (v8 > 0x40)
    {
      v21 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
      v9 = (void *)operator new[]();
      memcpy(v9, *(const void **)(a2 + 32), v21);
    }
    else
    {
      v9 = *(void **)(a2 + 32);
    }
    *(_QWORD *)a1 = v9;
    v10 = *(unsigned int *)(a2 + 56);
    *(_DWORD *)(a1 + 24) = v10;
    if (v10 > 0x40)
    {
      v22 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
      v23 = (void *)operator new[]();
      *(_QWORD *)(a1 + 16) = v23;
      memcpy(v23, *(const void **)(a2 + 48), v22);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 48);
    }
  }
  else
  {
    v13 = *(_DWORD *)(a2 + 24);
    v34 = v13;
    if (v13 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v33, a5, 1);
      v13 = v34;
      v15 = v33;
    }
    else
    {
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
      if (!v13)
        v14 = 0;
      v15 = (char *)(v14 & a5);
      v33 = (char *)(v14 & a5);
    }
    v16 = &v15[8 * ((v13 - 1) >> 6)];
    if (v13 < 0x41)
      v16 = (char *)&v33;
    if (((*(_QWORD *)v16 >> (v13 - 1)) & 1) != 0)
    {
      v17 = *(unsigned int *)(a2 + 40);
      *(_DWORD *)(a1 + 8) = v17;
      if (v17 > 0x40)
      {
        v24 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
        v18 = (void *)operator new[]();
        memcpy(v18, *(const void **)(a2 + 32), v24);
      }
      else
      {
        v18 = *(void **)(a2 + 32);
      }
      *(_QWORD *)a1 = v18;
      v19 = *(unsigned int *)(a2 + 56);
      *(_DWORD *)(a1 + 24) = v19;
      if (v19 > 0x40)
      {
        v25 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
        v26 = (void *)operator new[]();
        *(_QWORD *)(a1 + 16) = v26;
        memcpy(v26, *(const void **)(a2 + 48), v25);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 48);
      }
    }
    else
    {
      v28 = *(_DWORD *)(a2 + 24);
      if (v28 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
      else
        v27 = 0;
      v20 = v15;
      if (v13 >= 0x41)
      {
        v20 = (void *)operator new[]();
        memcpy(v20, v15, (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8);
      }
      v30 = v28;
      v29 = v27;
      v32 = v13;
      v31 = v20;
      sub_1C4F6C958((llvm::APInt *)a1, a2, a3, a4, (uint64_t)&v29);
      if (v32 >= 0x41 && v31)
        MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
      if (v30 >= 0x41 && v29)
        MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    }
    if (v13 >= 0x41 && v15)
      MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
}

uint64_t sub_1C4F6C224(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  int v13;
  llvm::Type *v14;
  unint64_t Constant;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a5 == 1)
    return 0;
  v20 = v5;
  v21 = v6;
  v12 = ****(_QWORD *****)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 24);
  v19 = v13;
  if (v13 <= 63)
  {
    if (v13 <= 31)
    {
      switch(v13)
      {
        case 16:
          v14 = (llvm::Type *)(*v12 + 1936);
          goto LABEL_11;
        case 8:
          v14 = (llvm::Type *)(*v12 + 1912);
          goto LABEL_11;
        case 1:
          v14 = (llvm::Type *)(*v12 + 1888);
          goto LABEL_11;
      }
    }
    else if (v13 == 32)
    {
      v14 = (llvm::Type *)(*v12 + 1960);
      goto LABEL_11;
    }
LABEL_18:
    v16 = sub_1C5270984(*v12 + 2168, &v19);
    v14 = (llvm::Type *)*((_QWORD *)v16 + 1);
    if (!v14)
    {
      v17 = v16;
      v14 = (llvm::Type *)sub_1C484358C(*v12 + 2040, 24, 3);
      v18 = v19;
      *(_QWORD *)v14 = v12;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 1) = (v18 << 8) | 0xDu;
      *((_QWORD *)v17 + 1) = v14;
    }
    goto LABEL_11;
  }
  if (v13 != 64)
  {
    if (v13 == 128)
    {
      v14 = (llvm::Type *)(*v12 + 2008);
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  v14 = (llvm::Type *)(*v12 + 1984);
LABEL_11:
  Constant = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(a1 + 16), v14, a4, 0);
  return sub_1C4F6CE30(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 24), a3, Constant);
}

void sub_1C4F6C388(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t SCEVIter;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t RangeRef;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  size_t v42;
  void *v43;
  size_t v44;
  size_t v45;
  size_t v46;
  void *v47;
  size_t v48;
  void *v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;

  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFD) != 0xD || (*(_DWORD *)(*(_QWORD *)a4 + 8) & 0xFD) != 0xD)
  {
LABEL_24:
    v32 = *(unsigned int *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = v32;
    if (v32 > 0x40)
    {
      v40 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
      v41 = (void *)operator new[]();
      *(_QWORD *)a1 = v41;
      memcpy(v41, *(const void **)(a2 + 32), v40);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 32);
    }
    v33 = *(unsigned int *)(a2 + 56);
    *(_DWORD *)(a1 + 24) = v33;
    if (v33 > 0x40)
    {
      v42 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
      v43 = (void *)operator new[]();
      *(_QWORD *)(a1 + 16) = v43;
      memcpy(v43, *(const void **)(a2 + 48), v42);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 48);
    }
    return;
  }
  llvm::PointerType::get((llvm::PointerType *)(*****(_QWORD *****)(a2 + 16) + 1912), 0);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 + 104);
  v10 = *(_DWORD *)(v8 + 120);
  if (!v10)
    goto LABEL_9;
  v11 = v10 - 1;
  v12 = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v13 = v9 + 48 * v12;
  v14 = *(_QWORD *)(v13 + 24);
  if (v14 != a3)
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & v11;
      v13 = v9 + 48 * (v16 & v11);
      v14 = *(_QWORD *)(v13 + 24);
      if (v14 == a3)
        goto LABEL_10;
    }
LABEL_9:
    v13 = v9 + 48 * v10;
  }
LABEL_10:
  if (v13 == v9 + 48 * v10 || (SCEVIter = *(_QWORD *)(v13 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a2 + 16), a3);
  llvm::ScalarEvolution::getTruncateOrZeroExtend(v8, SCEVIter);
  v19 = v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(v20 + 104);
  v22 = *(_DWORD *)(v20 + 120);
  if (!v22)
  {
LABEL_19:
    v25 = v21 + 48 * v22;
    goto LABEL_20;
  }
  v23 = v22 - 1;
  v24 = (v22 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  v25 = v21 + 48 * v24;
  v26 = *(_QWORD *)(v25 + 24);
  if (v26 != a4)
  {
    v27 = 1;
    while (v26 != -4096)
    {
      v28 = v24 + v27++;
      v24 = v28 & v23;
      v25 = v21 + 48 * (v28 & v23);
      v26 = *(_QWORD *)(v25 + 24);
      if (v26 == a4)
        goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_20:
  if (v25 == v21 + 48 * v22 || (v29 = *(_QWORD *)(v25 + 40)) == 0)
    v29 = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a2 + 16), a4);
  llvm::ScalarEvolution::getTruncateOrZeroExtend(v20, v29);
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a2 + 16), v19, v30);
  if (*(_WORD *)(v31 + 24) == 15)
    goto LABEL_24;
  RangeRef = llvm::ScalarEvolution::getRangeRef(*(_QWORD *)(a2 + 16), v31, 1u, 0);
  v35 = RangeRef;
  v36 = *(unsigned int *)(RangeRef + 8);
  v51 = v36;
  if (v36 > 0x40)
  {
    v44 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
    v50 = (void *)operator new[]();
    memcpy(v50, *(const void **)v35, v44);
  }
  else
  {
    v50 = *(void **)RangeRef;
  }
  v37 = *(unsigned int *)(v35 + 24);
  v53 = v37;
  if (v37 > 0x40)
  {
    v45 = ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8;
    v52 = (void *)operator new[]();
    memcpy(v52, *(const void **)(v35 + 16), v45);
  }
  else
  {
    v52 = *(void **)(v35 + 16);
  }
  if (sub_1C4F6CC8C((const void **)&v50))
  {
    v38 = *(unsigned int *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = v38;
    if (v38 > 0x40)
    {
      v46 = ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8;
      v47 = (void *)operator new[]();
      *(_QWORD *)a1 = v47;
      memcpy(v47, *(const void **)(a2 + 32), v46);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 32);
    }
    v39 = *(unsigned int *)(a2 + 56);
    *(_DWORD *)(a1 + 24) = v39;
    if (v39 > 0x40)
    {
      v48 = ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8;
      v49 = (void *)operator new[]();
      *(_QWORD *)(a1 + 16) = v49;
      memcpy(v49, *(const void **)(a2 + 48), v48);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 48);
    }
  }
  else
  {
    llvm::ConstantRange::sextOrTrunc((llvm::ConstantRange *)&v50, *(_DWORD *)(a2 + 24), a1);
  }
  if (v53 >= 0x41 && v52)
    MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
  if (v51 >= 0x41 && v50)
    MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
}

void sub_1C4F6C800(unsigned int *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  void *__src;
  unsigned int v14;
  void *v15;

  llvm::ConstantRange::unionWith(a2, a3, 0, (uint64_t)a1);
  if (!llvm::ConstantRange::isSignWrappedSet((llvm::ConstantRange *)a1))
    return;
  v4 = a1[2];
  v14 = v4;
  if (v4 <= 0x40)
  {
    v5 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4);
    if (!v4)
      v5 = 0;
    __src = v5;
    v6 = v4;
    goto LABEL_6;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v6 = v14;
  if (v14 <= 0x40)
  {
LABEL_6:
    v7 = __src;
    v8 = __src;
    goto LABEL_7;
  }
  v12 = v14;
  v9 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
  v8 = (void *)operator new[]();
  v7 = __src;
  v10 = v9;
  v6 = v12;
  memcpy(v8, __src, v10);
LABEL_7:
  v15 = v8;
  if (a1[2] >= 0x41 && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  *(_QWORD *)a1 = v7;
  a1[2] = v6;
  if (a1[6] >= 0x41 && (v11 = *((_QWORD *)a1 + 2)) != 0)
  {
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
    *((_QWORD *)a1 + 2) = v8;
    a1[6] = v6;
  }
  else
  {
    *((_QWORD *)a1 + 2) = v8;
    a1[6] = v6;
  }
}

void sub_1C4F6C958(llvm::APInt *this, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  const void *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;

  v10 = *(unsigned int *)(a5 + 8);
  if (v10 >= 0x41)
  {
    if (memcmp(*(const void **)a5, *(const void **)(a5 + 16), ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a5) != (_DWORD)v10)
    {
LABEL_3:
      sub_1C4F6C388((uint64_t)&v26, a2, a3, a4);
      if (sub_1C4F6CC8C(&v26))
        goto LABEL_8;
      sub_1C4F6CD40((uint64_t)&v22, (llvm::ConstantRange *)&v26, (llvm::ConstantRange *)a5);
      if (v27 >= 0x41 && v26)
        MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
      v26 = v22;
      v27 = v23;
      v23 = 0;
      if (v29 >= 0x41 && v28)
      {
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
        v28 = v24;
        v29 = v25;
        v25 = 0;
        if (v23 >= 0x41 && v22)
          MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      }
      else
      {
        v28 = v24;
        v29 = v25;
      }
      if (sub_1C4F6CC8C(&v26))
      {
LABEL_8:
        v11 = *(unsigned int *)(a2 + 40);
        *((_DWORD *)this + 2) = v11;
        if (v11 > 0x40)
        {
          v16 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
          v12 = (void *)operator new[]();
          memcpy(v12, *(const void **)(a2 + 32), v16);
        }
        else
        {
          v12 = *(void **)(a2 + 32);
        }
        *(_QWORD *)this = v12;
        v13 = *(unsigned int *)(a2 + 56);
        *((_DWORD *)this + 6) = v13;
        if (v13 > 0x40)
        {
          v17 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
          v18 = (void *)operator new[]();
          *((_QWORD *)this + 2) = v18;
          memcpy(v18, *(const void **)(a2 + 48), v17);
        }
        else
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(a2 + 48);
        }
      }
      else
      {
        *((_DWORD *)this + 2) = v27;
        *(_QWORD *)this = v26;
        *((_DWORD *)this + 6) = v29;
        *((_QWORD *)this + 2) = v28;
        v27 = 0;
        v29 = 0;
      }
      if (v29 >= 0x41 && v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      if (v27 >= 0x41)
      {
        if (v26)
          MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
      }
      return;
    }
  }
  else if (*(_QWORD *)(a5 + 16) | *(_QWORD *)a5)
  {
    goto LABEL_3;
  }
  v14 = *(_DWORD *)(a2 + 24);
  *((_DWORD *)this + 2) = v14;
  if (v14 > 0x40)
  {
    llvm::APInt::initSlowCase(this, 0, 0);
    v19 = *((unsigned int *)this + 2);
    *((_DWORD *)this + 6) = v19;
    if (v19 > 0x40)
    {
      v20 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
      v21 = (void *)operator new[]();
      *((_QWORD *)this + 2) = v21;
      memcpy(v21, *(const void **)this, v20);
      return;
    }
    v15 = *(_QWORD *)this;
  }
  else
  {
    v15 = 0;
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 6) = v14;
  }
  *((_QWORD *)this + 2) = v15;
}

BOOL sub_1C4F6CC8C(const void **this)
{
  uint64_t v2;
  const void *v3;
  unint64_t v4;

  v2 = *((unsigned int *)this + 2);
  if (v2 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)
      && (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v2
       || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)this) == (_DWORD)v2))
    {
      return 1;
    }
    return (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)(this + 2)) > 0;
  }
  v3 = *this;
  v4 = (unint64_t)this[2];
  if (v4 | (unint64_t)*this
    && (v3 != (const void *)v4 || (_DWORD)v2 && v3 != (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2)))
  {
    return (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)(this + 2)) > 0;
  }
  return 1;
}

void sub_1C4F6CD40(uint64_t a1, llvm::ConstantRange *this, llvm::ConstantRange *a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;

  if (llvm::ConstantRange::signedAddMayOverflow((const void **)this, (const void **)a3) == 3)
  {
    llvm::ConstantRange::add(this, a3, a1);
    return;
  }
  v6 = *((_DWORD *)this + 2);
  *(_DWORD *)(a1 + 8) = v6;
  if (v6 <= 0x40)
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6)
      v7 = 0;
    *(_QWORD *)a1 = v7;
    *(_DWORD *)(a1 + 24) = v6;
    goto LABEL_7;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)a1, -1, 1);
  v8 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v8;
  if (v8 <= 0x40)
  {
LABEL_7:
    *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
    return;
  }
  v9 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
  v10 = (void *)operator new[]();
  *(_QWORD *)(a1 + 16) = v10;
  memcpy(v10, *(const void **)a1, v9);
}

uint64_t sub_1C4F6CE30(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _BOOL8 v6;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t SCEVIter;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  const llvm::SCEV *v33;
  const llvm::SCEV *v34;
  const llvm::APInt *v35;
  _QWORD *v36;
  int v37;
  unint64_t Constant;
  const llvm::SCEV *v39;
  const llvm::SCEV *v40;
  llvm::ConstantInt ****v41;
  const llvm::APInt *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const llvm::SCEV *v47;
  const llvm::SCEV *v48;
  unsigned int v49;
  unsigned int v50;
  _DWORD *v52;
  _DWORD *v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;

  if (!a4)
    return 1;
  if (*(_WORD *)(a5 + 24) == 15)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 + 104);
  v12 = *(_DWORD *)(v10 + 120);
  if (!v12)
    goto LABEL_11;
  v13 = v12 - 1;
  v14 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v15 = v11 + 48 * v14;
  v16 = *(_QWORD *)(v15 + 24);
  if (v16 != a2)
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & v13;
      v15 = v11 + 48 * (v18 & v13);
      v16 = *(_QWORD *)(v15 + 24);
      if (v16 == a2)
        goto LABEL_12;
    }
LABEL_11:
    v15 = v11 + 48 * v12;
  }
LABEL_12:
  if (v15 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v15 + 40)) == 0)
  {
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, a2);
    v10 = *(_QWORD *)(a1 + 16);
  }
  llvm::PointerType::get((llvm::PointerType *)(****(_QWORD ****)v10 + 1912), 0);
  llvm::ScalarEvolution::getTruncateOrZeroExtend(*(_QWORD *)(a1 + 16), SCEVIter);
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(v22 + 104);
  v24 = *(_DWORD *)(v22 + 120);
  if (!v24)
  {
LABEL_21:
    v27 = v23 + 48 * v24;
    goto LABEL_22;
  }
  v25 = v24 - 1;
  v26 = (v24 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  v27 = v23 + 48 * v26;
  v28 = *(uint64_t **)(v27 + 24);
  if (v28 != a4)
  {
    v29 = 1;
    while (v28 != (uint64_t *)-4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & v25;
      v27 = v23 + 48 * (v30 & v25);
      v28 = *(uint64_t **)(v27 + 24);
      if (v28 == a4)
        goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_22:
  if (v27 == v23 + 48 * v24 || (v31 = *(_QWORD *)(v27 + 40)) == 0)
  {
    v31 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v22, (unint64_t)a4);
    v22 = *(_QWORD *)(a1 + 16);
  }
  llvm::PointerType::get((llvm::PointerType *)(****(_QWORD ****)v22 + 1912), 0);
  llvm::ScalarEvolution::getTruncateOrZeroExtend(*(_QWORD *)(a1 + 16), v31);
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 16), v21, v32);
  v6 = 0;
  if (*((_WORD *)v33 + 12) != 15)
  {
    v34 = v33;
    sub_1C4F68A28(&v56, a4);
    v36 = ****(_QWORD *****)(a1 + 16);
    v37 = *(_DWORD *)(a1 + 24);
    v60 = v37;
    if (v37 <= 63)
    {
      if (v37 <= 31)
      {
        if (v37 == 16 || v37 == 8 || v37 == 1)
          goto LABEL_33;
      }
      else if (v37 == 32)
      {
LABEL_33:
        Constant = llvm::ScalarEvolution::getConstant(*(llvm::ConstantInt *****)(a1 + 16), (const llvm::APInt *)&v56, v35);
        llvm::ScalarEvolution::getTruncateOrZeroExtend(*(_QWORD *)(a1 + 16), Constant);
        v40 = v39;
        v41 = *(llvm::ConstantInt *****)(a1 + 16);
        v43 = llvm::ScalarEvolution::getConstant(v41, (const llvm::APInt *)&v58, v42);
        llvm::ScalarEvolution::getTruncateOrZeroExtend(*(_QWORD *)(a1 + 16), v43);
        v45 = v44;
        llvm::ScalarEvolution::getTruncateOrZeroExtend(*(_QWORD *)(a1 + 16), a5);
        llvm::ScalarEvolution::getMinusSCEV((uint64_t)v41, v45, v46);
        v48 = v47;
        v49 = (unsigned __int16)llvm::ScalarEvolution::evaluatePredicateAt(*(uint64_t *****)(a1 + 16), 39, v34, v40, a3);
        if (v49 <= 0x100)
          LOBYTE(v49) = 0;
        if ((_BYTE)v49)
        {
          v50 = (unsigned __int16)llvm::ScalarEvolution::evaluatePredicateAt(*(uint64_t *****)(a1 + 16), 41, v34, v48, a3);
          if (v50 <= 0x100)
            LOBYTE(v50) = 0;
          v6 = v50 != 0;
        }
        else
        {
          v6 = 0;
        }
        if (v59 >= 0x41 && v58)
          MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
        if (v57 >= 0x41 && v56)
          MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
        return v6;
      }
    }
    else if (v37 == 64 || v37 == 128)
    {
      goto LABEL_33;
    }
    v52 = sub_1C5270984(*v36 + 2168, &v60);
    if (!*((_QWORD *)v52 + 1))
    {
      v53 = v52;
      v54 = (_QWORD *)sub_1C484358C(*v36 + 2040, 24, 3);
      v55 = v60;
      *v54 = v36;
      v54[2] = 0;
      v54[1] = (v55 << 8) | 0xDu;
      *((_QWORD *)v53 + 1) = v54;
    }
    goto LABEL_33;
  }
  return v6;
}

uint64_t sub_1C4F6D280(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v34;
  void *v35;

  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 > 0x40)
  {
    v34 = (void *)operator new[]();
    *(_QWORD *)a1 = v34;
    memcpy(v34, *(const void **)a2, (((unint64_t)*(unsigned int *)(a1 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > 0x40)
  {
    v35 = (void *)operator new[]();
    *(_QWORD *)(a1 + 16) = v35;
    memcpy(v35, *(const void **)(a2 + 16), (((unint64_t)*(unsigned int *)(a1 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = *(_QWORD **)(a2 + 32);
  if (v6 != (_QWORD *)(a2 + 40))
  {
    do
    {
      sub_1C61B7C9C((_QWORD **)(a1 + 32), (_QWORD *)(a1 + 40), v6[4], v6 + 4);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (_QWORD *)(a2 + 40));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  v10 = *(_QWORD **)(a2 + 56);
  v11 = (_QWORD *)(a2 + 64);
  if (v10 == (_QWORD *)(a2 + 64))
    return a1;
  v12 = 0;
  v13 = a1 + 64;
  while (2)
  {
    v14 = v10 + 4;
    v15 = (_QWORD *)(a1 + 64);
    if (v13 == a1 + 64)
      goto LABEL_20;
    v16 = v12;
    v17 = (_QWORD *)(a1 + 64);
    if (v12)
    {
      do
      {
        v15 = v16;
        v16 = (_QWORD *)v16[1];
      }
      while (v16);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v17[2];
        v9 = *v15 == (_QWORD)v17;
        v17 = v15;
      }
      while (v9);
    }
    v18 = v10[5];
    if (*((_OWORD *)v15 + 2) < __PAIR128__(v18, *v14))
    {
LABEL_20:
      v19 = (_QWORD *)(a1 + 64);
      v20 = (_QWORD *)(a1 + 64);
      if (!v12)
        goto LABEL_34;
      v19 = v15 + 1;
      if (!v15[1])
      {
        v20 = v15;
        goto LABEL_34;
      }
      goto LABEL_41;
    }
    v19 = (_QWORD *)(a1 + 64);
    v20 = (_QWORD *)(a1 + 64);
    if (!v12)
      goto LABEL_34;
    v21 = *v14;
    do
    {
      while (1)
      {
        v20 = v12;
        v22 = v12[5];
        if (v18 >= v22)
          break;
LABEL_29:
        v12 = (_QWORD *)*v20;
        v19 = v20;
        if (!*v20)
          goto LABEL_34;
      }
      if (v22 >= v18)
      {
        v23 = v20[4];
        if (v21 < v23)
          goto LABEL_29;
        if (v23 >= v21)
          goto LABEL_41;
      }
      v12 = (_QWORD *)v20[1];
    }
    while (v12);
    v19 = v20 + 1;
LABEL_34:
    v24 = operator new(0x50uLL);
    v25 = v24;
    v24[2] = *(_OWORD *)v14;
    v26 = *((_DWORD *)v10 + 14);
    *((_DWORD *)v24 + 14) = v26;
    if (v26 > 0x40)
    {
      v31 = (void *)operator new[]();
      *((_QWORD *)v25 + 6) = v31;
      memcpy(v31, (const void *)v10[6], (((unint64_t)*((unsigned int *)v25 + 14) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *((_QWORD *)v24 + 6) = v10[6];
    }
    v27 = *((_DWORD *)v10 + 18);
    *((_DWORD *)v25 + 18) = v27;
    if (v27 > 0x40)
    {
      v32 = (void *)operator new[]();
      *((_QWORD *)v25 + 8) = v32;
      memcpy(v32, (const void *)v10[8], (((unint64_t)*((unsigned int *)v25 + 18) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *((_QWORD *)v25 + 8) = v10[8];
    }
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = v20;
    *v19 = v25;
    v28 = **(_QWORD **)(a1 + 56);
    if (v28)
    {
      *(_QWORD *)(a1 + 56) = v28;
      v25 = (_OWORD *)*v19;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 64), (uint64_t *)v25);
    ++*(_QWORD *)(a1 + 72);
LABEL_41:
    v29 = (_QWORD *)v10[1];
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (_QWORD *)v10[2];
        v9 = *v30 == (_QWORD)v10;
        v10 = v30;
      }
      while (!v9);
    }
    if (v30 != v11)
    {
      v13 = *(_QWORD *)(a1 + 56);
      v12 = *(_QWORD **)(a1 + 64);
      v10 = v30;
      continue;
    }
    return a1;
  }
}

void sub_1C4F6D620(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    sub_1C4F6D620(*a1);
    sub_1C4F6D620(a1[1]);
    sub_1C4F6BCD0((_QWORD *)a1[13]);
    sub_1C6143384((_QWORD *)a1[10]);
    if (*((_DWORD *)a1 + 16) >= 0x41u)
    {
      v2 = a1[7];
      if (v2)
        MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
    }
    if (*((_DWORD *)a1 + 12) >= 0x41u)
    {
      v3 = a1[5];
      if (v3)
        MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
    }
    operator delete(a1);
  }
}

void sub_1C4F6D6C0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  llvm::GlobalValue *Section;
  uint64_t v14;
  BOOL v15;
  int v16;
  llvm::Module *v17;
  _BOOL4 SemanticInterposition;
  uint64_t AliaseeObject;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void **v53;
  uint64_t v54;
  llvm::APInt *v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD **v60;
  _QWORD *v61;
  int v62;
  int64_t v63;
  unint64_t v65;
  int v66;
  void *v67;
  void *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  size_t v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  void *__s1;
  unsigned int v82;
  void *__s2;
  unsigned int v84;
  _QWORD **v85;
  _QWORD *v86[2];
  void *__src;
  unsigned int v88;
  void *v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  int v94;

  v4 = *(_DWORD *)(a1 + 8);
  v88 = v4;
  if (v4 <= 0x40)
  {
    v5 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4);
    if (!v4)
      v5 = 0;
    __src = v5;
    v90 = v4;
    goto LABEL_5;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v90 = v88;
  if (v88 <= 0x40)
  {
LABEL_5:
    v6 = __src;
    goto LABEL_6;
  }
  v71 = a2;
  v72 = (((unint64_t)v88 + 63) >> 3) & 0x3FFFFFF8;
  v6 = (void *)operator new[]();
  v73 = v72;
  a2 = v71;
  memcpy(v6, __src, v73);
LABEL_6:
  v89 = v6;
  v8 = (_QWORD *)(a1 + 64);
  v7 = *(_QWORD **)(a1 + 64);
  v9 = *(_QWORD ***)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v86;
  *(_QWORD *)(a1 + 64) = 0;
  v85 = v9;
  v86[0] = v7;
  v10 = *(_QWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v86[1] = v10;
  if (!v10)
  {
    v85 = v86;
    *(_QWORD *)(a1 + 56) = v8;
    goto LABEL_133;
  }
  v7[2] = v86;
  *(_QWORD *)(a1 + 56) = v8;
  if (v9 != v86)
  {
    v11 = (_QWORD *)(a2 + 8);
LABEL_9:
    v12 = (unint64_t)v9[4];
    while (1)
    {
      if (!v12)
        goto LABEL_52;
      if (*(_BYTE *)(v12 + 16))
      {
        if (*(_BYTE *)(v12 + 16) == 3)
        {
          if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 0)
            goto LABEL_52;
          Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v12);
          if (v14 == 12)
          {
            v15 = *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
               && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth";
            if (v15)
              goto LABEL_52;
          }
        }
      }
      else if (*(_QWORD *)(v12 + 72) == v12 + 72 && (*(_BYTE *)(v12 + 34) & 0x80) == 0)
      {
        goto LABEL_52;
      }
      v16 = *(_DWORD *)(v12 + 32);
      if ((v16 & 0xFu) - 5 >= 4 && ((1 << (v16 & 0xF)) & 0x614) != 0)
        goto LABEL_52;
      v17 = *(llvm::Module **)(v12 + 40);
      if (v17)
      {
        SemanticInterposition = llvm::Module::getSemanticInterposition(v17);
        v16 = *(_DWORD *)(v12 + 32);
        if (SemanticInterposition && (v16 & 0x4000) == 0)
          goto LABEL_52;
      }
      if ((v16 & 0x4000) == 0)
        goto LABEL_52;
      if (*(_BYTE *)(v12 + 16) != 1)
        break;
      AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v12);
      v15 = AliaseeObject == v12;
      v12 = AliaseeObject;
      if (v15)
        goto LABEL_52;
    }
    if (!*(_BYTE *)(v12 + 16))
    {
      v20 = v9[5];
      v21 = (_QWORD *)*v8;
      v22 = (_QWORD *)(a1 + 64);
      v23 = (_QWORD *)(a1 + 64);
      if (!*v8)
        goto LABEL_45;
      while (1)
      {
        while (1)
        {
          v23 = v21;
          v24 = v21[5];
          if ((unint64_t)v20 >= v24)
            break;
LABEL_38:
          v21 = (_QWORD *)*v23;
          v22 = v23;
          if (!*v23)
            goto LABEL_45;
        }
        if (v24 >= (unint64_t)v20)
        {
          v25 = v23[4];
          if (v12 < v25)
            goto LABEL_38;
          if (v25 >= v12)
            goto LABEL_92;
        }
        v21 = (_QWORD *)v23[1];
        if (!v21)
        {
          v22 = v23 + 1;
LABEL_45:
          v76 = v11;
          v26 = a2;
          v27 = operator new(0x50uLL);
          v28 = v27;
          v27[4] = v12;
          v27[5] = v20;
          v29 = *((_DWORD *)v9 + 14);
          *((_DWORD *)v27 + 14) = v29;
          if (v29 > 0x40)
          {
            v67 = (void *)operator new[]();
            v28[6] = v67;
            memcpy(v67, v9[6], (((unint64_t)*((unsigned int *)v28 + 14) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v27[6] = v9[6];
          }
          v30 = *((_DWORD *)v9 + 18);
          *((_DWORD *)v28 + 18) = v30;
          if (v30 > 0x40)
          {
            v68 = (void *)operator new[]();
            v28[8] = v68;
            memcpy(v68, v9[8], (((unint64_t)*((unsigned int *)v28 + 18) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v28[8] = v9[8];
          }
          *v28 = 0;
          v28[1] = 0;
          v28[2] = v23;
          *v22 = v28;
          v31 = **(_QWORD **)(a1 + 56);
          if (v31)
          {
            *(_QWORD *)(a1 + 56) = v31;
            v28 = (_QWORD *)*v22;
          }
          sub_1C4768E74(*(uint64_t **)(a1 + 64), v28);
          ++*(_QWORD *)(a1 + 72);
          a2 = v26;
          v11 = v76;
LABEL_92:
          v59 = v9[1];
          if (v59)
          {
            do
            {
              v60 = (_QWORD **)v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (_QWORD **)v9[2];
              v15 = *v60 == v9;
              v9 = v60;
            }
            while (!v15);
          }
          v9 = v60;
          if (v60 == v86)
            goto LABEL_133;
          goto LABEL_9;
        }
      }
    }
LABEL_52:
    if (!a2)
      goto LABEL_130;
    v32 = sub_1C4EE9DE0((llvm::GlobalValue *)v9[4]);
    v33 = (_QWORD *)*v11;
    if (!*v11)
      goto LABEL_64;
    v34 = v11;
    do
    {
      v35 = v33[4];
      v36 = v35 >= v32;
      if (v35 >= v32)
        v37 = v33;
      else
        v37 = v33 + 1;
      if (v36)
        v34 = v33;
      v33 = (_QWORD *)*v37;
    }
    while (*v37);
    if (v34 == v11 || v34[4] > v32)
LABEL_64:
      v34 = v11;
    v38 = v34 == v11 ? 0 : (uint64_t)(v34 + 4);
    v39 = v38 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a2 + 133);
    v40 = v9[4][5];
    v43 = *(_QWORD *)(v40 + 168);
    v41 = v40 + 168;
    v42 = v43;
    v44 = *(_BYTE *)(v41 + 23);
    v45 = (void *)(v44 >= 0 ? v41 : v42);
    v46 = *(_QWORD *)(v41 + 8);
    v47 = v44 >= 0 ? v44 & 0x7F : v46;
    v48 = sub_1C4F6A710(v39, v45, v47);
    if (!v48 || (v49 = *(uint64_t **)(v48 + 112)) == 0 || (v50 = *v49, v51 = v49[1], v52 = v51 - v50, v51 == v50))
    {
LABEL_130:
      sub_1C4F6C800((unsigned int *)&v91, a1, (unsigned int *)&__src);
      if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
      *(_QWORD *)a1 = v91;
      *(_DWORD *)(a1 + 8) = v92;
      v92 = 0;
      if (*(_DWORD *)(a1 + 24) >= 0x41u && (v74 = *(_QWORD *)(a1 + 16)) != 0)
      {
        MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
        v75 = v92;
        *(_QWORD *)(a1 + 16) = v93;
        *(_DWORD *)(a1 + 24) = v94;
        v94 = 0;
        if (v75 >= 0x41 && v91)
          MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v93;
        *(_DWORD *)(a1 + 24) = v94;
      }
      goto LABEL_133;
    }
    v53 = (const void **)(v50 + 24);
    v54 = v52 >> 6 << 6;
    while (*(v53 - 3) != (const void *)*((unsigned int *)v9 + 10))
    {
      v53 += 8;
      v54 -= 64;
      if (!v54)
        goto LABEL_130;
    }
    v55 = (llvm::APInt *)(v53 - 2);
    v56 = *((unsigned int *)v53 - 2);
    if (v56 > 0x40)
    {
      if (!memcmp(*(v53 - 2), *v53, ((unint64_t)(v56 + 63) >> 3) & 0x3FFFFFF8)
        && llvm::APInt::countTrailingOnesSlowCase(v55) == (_DWORD)v56)
      {
        goto LABEL_130;
      }
    }
    else
    {
      v57 = *(v53 - 2);
      if (v57 == *v53 && (!(_DWORD)v56 || v57 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v56)))
        goto LABEL_130;
    }
    llvm::ConstantRange::sextOrTrunc(v55, *(_DWORD *)(a1 + 8), (uint64_t)&__s1);
    v58 = v82;
    if (v82 >= 0x41)
    {
      v61 = __s1;
      if (!memcmp(__s1, __s2, (((unint64_t)v82 + 63) >> 3) & 0x3FFFFFF8))
      {
        v62 = 0;
        v63 = (unint64_t)(v58 + 63) >> 6;
        do
        {
          if (v63-- < 1)
            break;
          v65 = v61[v63];
          v62 += __clz(v65);
        }
        while (!v65);
        v66 = v58 | 0xFFFFFFC0;
        if ((v58 & 0x3F) == 0)
          v66 = 0;
        if (v62 + v66 == (_DWORD)v58)
          goto LABEL_90;
      }
    }
    else if (!((unint64_t)__s2 | (unint64_t)__s1))
    {
LABEL_90:
      if (v84 >= 0x41 && __s2)
        MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      if (v82 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
      goto LABEL_92;
    }
    sub_1C4F6CD40((uint64_t)&v77, (llvm::ConstantRange *)&__s1, (llvm::ConstantRange *)(v9 + 6));
    sub_1C4F6C800((unsigned int *)&v91, a1, (unsigned int *)&v77);
    if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
      MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
    *(_QWORD *)a1 = v91;
    *(_DWORD *)(a1 + 8) = v92;
    v92 = 0;
    if (*(_DWORD *)(a1 + 24) >= 0x41u && (v69 = *(_QWORD *)(a1 + 16)) != 0)
    {
      MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
      v70 = v92;
      *(_QWORD *)(a1 + 16) = v93;
      *(_DWORD *)(a1 + 24) = v94;
      v94 = 0;
      if (v70 >= 0x41 && v91)
        MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v93;
      *(_DWORD *)(a1 + 24) = v94;
    }
    if (v80 >= 0x41 && v79)
      MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
    if (v78 >= 0x41 && v77)
      MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
    goto LABEL_90;
  }
LABEL_133:
  sub_1C4F6BCD0(v86[0]);
  if (v90 >= 0x41 && v89)
    MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
  if (v88 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

uint64_t **sub_1C4F6DEEC(uint64_t **a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD v13[2];
  char v14;

  v5 = a1 + 1;
  v4 = a1[1];
  v6 = a1 + 1;
  v7 = a1 + 1;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = v4[4];
        if (v8 <= a2)
          break;
        v4 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= a2)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v9 = operator new(0x60uLL);
    v13[0] = v9;
    v13[1] = v5;
    v9[4] = 0u;
    v9[5] = 0u;
    v9[3] = 0u;
    *((_QWORD *)v9 + 4) = a2;
    *((_QWORD *)v9 + 5) = v9 + 3;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 8) = (char *)v9 + 72;
    v14 = 1;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v7 = (uint64_t **)v13[0];
    v13[0] = 0;
    sub_1C4F6E700((uint64_t)v13);
  }
  return v7 + 5;
}

void sub_1C4F6DFF0(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, llvm::ConstantRange *a5)
{
  _QWORD *v7;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v29;
  void *v30;
  unint64_t v31;
  void *v32;
  const void *v33;
  size_t v34;
  void *v35;
  unint64_t v36;

  v7 = *(_QWORD **)(a2 + 8);
  if (!v7)
    goto LABEL_23;
  v9 = (_QWORD *)(a2 + 8);
  do
  {
    v10 = v7[4];
    v11 = v10 >= a3;
    if (v10 >= a3)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (v11)
      v9 = v7;
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == (_QWORD *)(a2 + 8))
    goto LABEL_23;
  if (v9[4] > a3)
    goto LABEL_23;
  v15 = v9[9];
  v13 = v9 + 9;
  v14 = v15;
  if (!v15)
    goto LABEL_23;
  v16 = v13;
  do
  {
    v17 = *(_DWORD *)(v14 + 32);
    v18 = v17 >= a4;
    if (v17 >= a4)
      v19 = (uint64_t *)v14;
    else
      v19 = (uint64_t *)(v14 + 8);
    if (v18)
      v16 = (_QWORD *)v14;
    v14 = *v19;
  }
  while (*v19);
  if (v16 == v13 || *((_DWORD *)v16 + 8) > a4)
    goto LABEL_23;
  v23 = (const void **)(v16 + 5);
  v24 = *((unsigned int *)v16 + 12);
  if (v24 >= 0x41)
  {
    if (!memcmp((const void *)v16[5], (const void *)v16[7], ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8))
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v23) == (_DWORD)v24)
      {
        *(_DWORD *)(a1 + 8) = v24;
        v35 = (void *)operator new[]();
        *(_QWORD *)a1 = v35;
        memcpy(v35, *v23, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
        goto LABEL_33;
      }
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v23) == (_DWORD)v24)
        goto LABEL_23;
    }
LABEL_31:
    sub_1C4F6CD40(a1, (llvm::ConstantRange *)(v16 + 5), a5);
    return;
  }
  v25 = v16[5];
  v26 = v16[7];
  if (!(v26 | v25))
  {
    *(_DWORD *)(a1 + 8) = v24;
    *(_QWORD *)a1 = *v23;
LABEL_33:
    v27 = *((unsigned int *)v16 + 16);
    *(_DWORD *)(a1 + 24) = v27;
    if (v27 <= 0x40)
    {
      v22 = v16[7];
      goto LABEL_27;
    }
    v36 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
    v32 = (void *)operator new[]();
    *(_QWORD *)(a1 + 16) = v32;
    v33 = (const void *)v16[7];
    v34 = v36;
    goto LABEL_42;
  }
  if (v25 != v26)
    goto LABEL_31;
  if ((_DWORD)v24 && v25 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v24)
    goto LABEL_31;
LABEL_23:
  v20 = *(unsigned int *)(a2 + 32);
  *(_DWORD *)(a1 + 8) = v20;
  if (v20 > 0x40)
  {
    v29 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
    v30 = (void *)operator new[]();
    *(_QWORD *)a1 = v30;
    memcpy(v30, *(const void **)(a2 + 24), v29);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 24);
  }
  v21 = *(unsigned int *)(a2 + 48);
  *(_DWORD *)(a1 + 24) = v21;
  if (v21 <= 0x40)
  {
    v22 = *(_QWORD *)(a2 + 40);
LABEL_27:
    *(_QWORD *)(a1 + 16) = v22;
    return;
  }
  v31 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
  v32 = (void *)operator new[]();
  *(_QWORD *)(a1 + 16) = v32;
  v33 = *(const void **)(a2 + 40);
  v34 = v31;
LABEL_42:
  memcpy(v32, v33, v34);
}

uint64_t **sub_1C4F6E294(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  void **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  _OWORD *v31;
  _OWORD *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  void *v41;
  void *v42;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;

  if (a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 1);
    v4 = *a2;
    if (a1[2])
    {
      v5 = *a1;
      v7 = a1 + 1;
      v6 = a1[1];
      *a1 = (uint64_t *)(a1 + 1);
      v6[2] = 0;
      a1[1] = 0;
      a1[2] = 0;
      if (v5[1])
        v5 = (uint64_t *)v5[1];
      v44 = a1;
      v45 = v5;
      sub_1C4F6ED50((uint64_t)&v44);
      v8 = v46;
      if (v46 && v4 != v3)
      {
        do
        {
          *(_OWORD *)(v8 + 32) = *((_OWORD *)v4 + 2);
          if (*(_DWORD *)(v8 + 56) > 0x40u || *((_DWORD *)v4 + 14) > 0x40u)
          {
            if ((uint64_t *)v8 != v4)
            {
              v10 = v4;
              v11 = (void **)(v8 + 48);
              v12 = v10;
              v13 = v8;
              llvm::APInt::reallocate(v8 + 48, *((_DWORD *)v10 + 14));
              v14 = *(unsigned int *)(v13 + 56);
              if (v14 <= 0x40)
              {
                *v11 = (void *)v12[6];
                v4 = v12;
              }
              else
              {
                v15 = *v11;
                v4 = v12;
                memcpy(v15, (const void *)v12[6], ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
              }
              v8 = v13;
            }
          }
          else
          {
            *(_QWORD *)(v8 + 48) = v4[6];
            *(_DWORD *)(v8 + 56) = *((_DWORD *)v4 + 14);
          }
          if (*(_DWORD *)(v8 + 72) > 0x40u || *((_DWORD *)v4 + 18) > 0x40u)
          {
            if ((uint64_t *)v8 != v4)
            {
              v16 = v4;
              v17 = (void **)(v8 + 64);
              v18 = v16;
              v19 = v8;
              llvm::APInt::reallocate(v8 + 64, *((_DWORD *)v16 + 18));
              v20 = *(unsigned int *)(v19 + 72);
              if (v20 <= 0x40)
              {
                *v17 = (void *)v18[8];
                v4 = v18;
              }
              else
              {
                v21 = *v17;
                v4 = v18;
                memcpy(v21, (const void *)v18[8], ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
              }
              v8 = v19;
            }
          }
          else
          {
            *(_QWORD *)(v8 + 64) = v4[8];
            *(_DWORD *)(v8 + 72) = *((_DWORD *)v4 + 18);
          }
          v22 = *v7;
          v23 = (uint64_t *)(a1 + 1);
          v24 = (uint64_t *)(a1 + 1);
          if (*v7)
          {
            do
            {
              while (1)
              {
                v23 = v22;
                if (*(_OWORD *)(v8 + 32) >= *((_OWORD *)v22 + 2))
                  break;
                v22 = (uint64_t *)*v22;
                v24 = v23;
                if (!*v23)
                  goto LABEL_31;
              }
              v22 = (uint64_t *)v22[1];
            }
            while (v22);
            v24 = v23 + 1;
          }
LABEL_31:
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = v23;
          *v24 = v8;
          v25 = (uint64_t *)**a1;
          if (v25)
          {
            *a1 = v25;
            v8 = *v24;
          }
          sub_1C4768E74(a1[1], (uint64_t *)v8);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          sub_1C4F6ED50((uint64_t)&v44);
          v26 = (uint64_t *)v4[1];
          if (v26)
          {
            do
            {
              v9 = v26;
              v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v9 = (uint64_t *)v4[2];
              v27 = *v9 == (_QWORD)v4;
              v4 = v9;
            }
            while (!v27);
          }
          v8 = v46;
          if (v46)
            v27 = v9 == v3;
          else
            v27 = 1;
          v4 = v9;
        }
        while (!v27);
      }
      else
      {
        v9 = v4;
      }
      sub_1C4F6BCD0((_QWORD *)v8);
      v28 = v45;
      if (v45)
      {
        do
        {
          v29 = v28;
          v28 = (uint64_t *)v28[2];
        }
        while (v28);
        sub_1C4F6BCD0(v29);
      }
    }
    else
    {
      v9 = *a2;
    }
    if (v9 != v3)
    {
      v30 = a1 + 1;
      do
      {
        v31 = operator new(0x50uLL);
        v32 = v31;
        v31[2] = *((_OWORD *)v9 + 2);
        v33 = *((_DWORD *)v9 + 14);
        *((_DWORD *)v31 + 14) = v33;
        if (v33 > 0x40)
        {
          v41 = (void *)operator new[]();
          *((_QWORD *)v32 + 6) = v41;
          memcpy(v41, (const void *)v9[6], (((unint64_t)*((unsigned int *)v32 + 14) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *((_QWORD *)v31 + 6) = v9[6];
        }
        v34 = *((_DWORD *)v9 + 18);
        *((_DWORD *)v32 + 18) = v34;
        if (v34 > 0x40)
        {
          v42 = (void *)operator new[]();
          *((_QWORD *)v32 + 8) = v42;
          memcpy(v42, (const void *)v9[8], (((unint64_t)*((unsigned int *)v32 + 18) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *((_QWORD *)v32 + 8) = v9[8];
        }
        v35 = *v30;
        v36 = a1 + 1;
        v37 = a1 + 1;
        if (*v30)
        {
          do
          {
            while (1)
            {
              v36 = v35;
              if (v32[2] >= *((_OWORD *)v35 + 2))
                break;
              v35 = (uint64_t *)*v35;
              v37 = v36;
              if (!*v36)
                goto LABEL_59;
            }
            v35 = (uint64_t *)v35[1];
          }
          while (v35);
          v37 = v36 + 1;
        }
LABEL_59:
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = v36;
        *v37 = v32;
        v38 = (uint64_t *)**a1;
        if (v38)
        {
          *a1 = v38;
          v32 = (_OWORD *)*v37;
        }
        sub_1C4768E74(a1[1], (uint64_t *)v32);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        v39 = (uint64_t *)v9[1];
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (uint64_t *)v9[2];
            v27 = *v40 == (_QWORD)v9;
            v9 = v40;
          }
          while (!v27);
        }
        v9 = v40;
      }
      while (v40 != v3);
    }
  }
  return a1;
}

uint64_t sub_1C4F6E700(uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      sub_1C4F6D620(v2[9]);
      sub_1C4F6D620(v2[6]);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_1C4F6E74C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B7470(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1C4F6E810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v6;
  int v7;
  int v8;
  _QWORD *v9;
  char v10;
  void **v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  const void **v37;
  const void **v38;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;

  v41 = a2;
  v3 = *(_QWORD **)(a3 + 24);
  v4 = (_QWORD *)(a3 + 32);
  if (v3 == (_QWORD *)(a3 + 32))
    return;
  v6 = 0;
  v7 = *(_DWORD *)(a3 + 48);
  v8 = dword_1ED7F42F8;
  v38 = (const void **)(a1 + 24);
  v37 = (const void **)(a1 + 40);
  do
  {
    v9 = (_QWORD *)v3[12];
    if (v9 != v3 + 13)
    {
      v10 = 0;
      v11 = (void **)(v3 + 5);
      v40 = (void **)(v3 + 7);
      while (1)
      {
        sub_1C4F6DFF0((uint64_t)&v42, a1, v9[4], *((_DWORD *)v9 + 10), (llvm::ConstantRange *)(v9 + 6));
        if (llvm::ConstantRange::contains((llvm::ConstantRange *)(v3 + 5), (const llvm::ConstantRange *)&v42))
          goto LABEL_18;
        if (v7 <= v8)
        {
          sub_1C4F6C800((unsigned int *)&v46, (uint64_t)(v3 + 5), (unsigned int *)&v42);
          if (*((_DWORD *)v3 + 12) >= 0x41u && *v11)
            MEMORY[0x1CAA32F9C](*v11, 0x1000C8000313F17);
          v3[5] = v46;
          *((_DWORD *)v3 + 12) = v47;
          v47 = 0;
          if (*((_DWORD *)v3 + 16) >= 0x41u && *v40)
          {
            MEMORY[0x1CAA32F9C](*v40, 0x1000C8000313F17);
            v18 = v47;
            v3[7] = v48;
            *((_DWORD *)v3 + 16) = v49;
            v49 = 0;
            if (v18 >= 0x41 && v46)
              MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
            goto LABEL_17;
          }
          v3[7] = v48;
          v12 = v49;
        }
        else
        {
          if (*((_DWORD *)v3 + 12) > 0x40u || *(_DWORD *)(a1 + 32) > 0x40u)
          {
            if (v11 != (void **)v38)
            {
              llvm::APInt::reallocate((uint64_t)(v3 + 5), *(_DWORD *)(a1 + 32));
              v16 = *((unsigned int *)v3 + 12);
              if (v16 <= 0x40)
                *v11 = (void *)*v38;
              else
                memcpy(*v11, *v38, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            v3[5] = *(_QWORD *)(a1 + 24);
            *((_DWORD *)v3 + 12) = *(_DWORD *)(a1 + 32);
          }
          if (*((_DWORD *)v3 + 16) > 0x40u || *(_DWORD *)(a1 + 48) > 0x40u)
          {
            if (v40 != (void **)v37)
            {
              llvm::APInt::reallocate((uint64_t)v40, *(_DWORD *)(a1 + 48));
              v17 = *((unsigned int *)v3 + 16);
              if (v17 <= 0x40)
                *v40 = (void *)*v37;
              else
                memcpy(*v40, *v37, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
            }
            goto LABEL_17;
          }
          v3[7] = *(_QWORD *)(a1 + 40);
          v12 = *(_DWORD *)(a1 + 48);
        }
        *((_DWORD *)v3 + 16) = v12;
LABEL_17:
        v10 = 1;
LABEL_18:
        if (v45 >= 0x41 && v44)
          MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
        if (v43 >= 0x41 && v42)
          MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
        v13 = (_QWORD *)v9[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v9[2];
            v15 = *v14 == (_QWORD)v9;
            v9 = v14;
          }
          while (!v15);
        }
        v9 = v14;
        if (v14 == v3 + 13)
          goto LABEL_46;
      }
    }
    v10 = 0;
LABEL_46:
    v19 = (_QWORD *)v3[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v3[2];
        v15 = *v20 == (_QWORD)v3;
        v3 = v20;
      }
      while (!v15);
    }
    v6 |= v10;
    v3 = v20;
  }
  while (v20 != v4);
  v21 = a3;
  if ((v6 & 1) != 0)
  {
    v22 = sub_1C61B7348(a1 + 56, &v41);
    v23 = *((unsigned int *)v22 + 4);
    if ((_DWORD)v23)
    {
      v24 = (uint64_t *)v22[1];
      v25 = &v24[v23];
      do
      {
        sub_1C61B7564((uint64_t)&v46, a1 + 80, v24);
        if ((_BYTE)v48)
        {
          v27 = *(uint64_t **)(a1 + 112);
          v26 = *(_QWORD *)(a1 + 120);
          if ((unint64_t)v27 >= v26)
          {
            v29 = *(_QWORD **)(a1 + 104);
            v30 = v27 - v29;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              abort();
            v32 = v26 - (_QWORD)v29;
            if (v32 >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              if (v33 >> 61)
                sub_1C4764EE4();
              v34 = (char *)operator new(8 * v33);
            }
            else
            {
              v34 = 0;
            }
            v35 = (uint64_t *)&v34[8 * v30];
            *v35 = *v24;
            v28 = v35 + 1;
            if (v27 != v29)
            {
              do
              {
                v36 = *--v27;
                *--v35 = v36;
              }
              while (v27 != v29);
              v27 = *(uint64_t **)(a1 + 104);
            }
            *(_QWORD *)(a1 + 104) = v35;
            *(_QWORD *)(a1 + 112) = v28;
            *(_QWORD *)(a1 + 120) = &v34[8 * v33];
            v21 = a3;
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v27 = *v24;
            v28 = v27 + 1;
          }
          *(_QWORD *)(a1 + 112) = v28;
        }
        ++v24;
      }
      while (v24 != v25);
    }
    ++*(_DWORD *)(v21 + 48);
  }
}

_QWORD *sub_1C4F6EC98(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61B7734(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F6ED50(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 16) = v1;
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 16);
    if (v2)
    {
      v3 = (_QWORD *)*v2;
      if (*v2 == v1)
      {
        *v2 = 0;
        while (1)
        {
          v4 = (_QWORD *)v2[1];
          if (!v4)
            break;
          do
          {
            v2 = v4;
            v4 = (_QWORD *)*v4;
          }
          while (v4);
        }
      }
      else
      {
        for (v2[1] = 0; v3; v3 = (_QWORD *)v2[1])
        {
          do
          {
            v2 = v3;
            v3 = (_QWORD *)*v3;
          }
          while (v3);
        }
      }
    }
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

void sub_1C4F6EDB0(_QWORD *a1)
{
  if (a1)
  {
    sub_1C4F6EDB0(*a1);
    sub_1C4F6EDB0(a1[1]);
    sub_1C4F6D620((_QWORD *)a1[9]);
    sub_1C4F6D620((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

llvm::raw_ostream *sub_1C4F6EDF8(llvm::raw_ostream *a1, llvm::ConstantRange *a2)
{
  _QWORD *v4;
  _WORD *v5;
  _BYTE *v6;
  uint64_t ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  size_t *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  _DWORD *v20;
  _WORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;

  llvm::ConstantRange::print(a2, a1);
  v4 = (_QWORD *)*((_QWORD *)a2 + 7);
  if (v4 != (_QWORD *)((char *)a2 + 64))
  {
    while (1)
    {
      v5 = (_WORD *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v5 > 1uLL)
      {
        *v5 = 8236;
        v6 = (_BYTE *)(*((_QWORD *)a1 + 4) + 2);
        *((_QWORD *)a1 + 4) = v6;
      }
      else
      {
        llvm::raw_ostream::write(a1, ", ", 2uLL);
        v6 = (_BYTE *)*((_QWORD *)a1 + 4);
      }
      if (*((_BYTE **)a1 + 3) == v6)
      {
        llvm::raw_ostream::write(a1, "@", 1uLL);
      }
      else
      {
        *v6 = 64;
        ++*((_QWORD *)a1 + 4);
      }
      v7 = (uint64_t ***)v4[4];
      if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
        goto LABEL_16;
      v8 = ***v7;
      v9 = *(_QWORD *)(v8 + 152);
      v10 = *(unsigned int *)(v8 + 168);
      if (!(_DWORD)v10)
        goto LABEL_13;
      LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t ****)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 != v7)
        break;
LABEL_14:
      v16 = (size_t *)v12[1];
      v19 = *v16;
      v17 = v16 + 2;
      v18 = v19;
      v20 = (_DWORD *)*((_QWORD *)a1 + 4);
      if (v19 <= *((_QWORD *)a1 + 3) - (_QWORD)v20)
      {
        if (v18)
        {
          memcpy(v20, v17, v18);
          v20 = (_DWORD *)(*((_QWORD *)a1 + 4) + v18);
          *((_QWORD *)a1 + 4) = v20;
        }
        goto LABEL_19;
      }
      llvm::raw_ostream::write(a1, (const char *)v17, v18);
LABEL_16:
      v20 = (_DWORD *)*((_QWORD *)a1 + 4);
LABEL_19:
      if (*((_QWORD *)a1 + 3) - (_QWORD)v20 > 3uLL)
      {
        *v20 = 1735549224;
        *((_QWORD *)a1 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a1, "(arg", 4uLL);
      }
      sub_1C5E21910(a1, v4[5], 0, 0, 0);
      v21 = (_WORD *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v21 > 1uLL)
      {
        *v21 = 8236;
        *((_QWORD *)a1 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a1, ", ", 2uLL);
      }
      llvm::ConstantRange::print((llvm::ConstantRange *)(v4 + 6), a1);
      v22 = (_BYTE *)*((_QWORD *)a1 + 4);
      if (*((_BYTE **)a1 + 3) == v22)
      {
        llvm::raw_ostream::write(a1, ")", 1uLL);
      }
      else
      {
        *v22 = 41;
        ++*((_QWORD *)a1 + 4);
      }
      v23 = (_QWORD *)v4[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v4[2];
          v25 = *v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v25);
      }
      v4 = v24;
      if (v24 == (_QWORD *)((char *)a2 + 64))
        return a1;
    }
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == v7)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_14;
      }
    }
LABEL_13:
    v12 = (uint64_t ****)(v9 + 16 * v10);
    goto LABEL_14;
  }
  return a1;
}

_QWORD *sub_1C4F6F0A8(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = a2[4], v6 > a5))
  {
    v7 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (_QWORD *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    if (v9[4] < a5)
      goto LABEL_17;
    v14 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = v14;
          v15 = v14[4];
          if (v15 <= a5)
            break;
          v14 = (_QWORD *)*a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v15 >= a5)
          break;
        v5 = a4 + 1;
        v14 = (_QWORD *)a4[1];
      }
      while (v14);
LABEL_25:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (_QWORD *)a2[1];
    do
    {
      a4 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  else
  {
    v16 = a2;
    do
    {
      a4 = (_QWORD *)v16[2];
      v13 = *a4 == (_QWORD)v16;
      v16 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && a4[4] <= a5)
  {
    v17 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = v17;
          v18 = v17[4];
          if (v18 <= a5)
            break;
          v17 = (_QWORD *)*a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v18 >= a5)
          break;
        v5 = a4 + 1;
        v17 = (_QWORD *)a4[1];
      }
      while (v17);
      goto LABEL_25;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v10)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

char *sub_1C4F6F230(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    abort();
  v8 = 0;
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - *a1;
  if (v10 >> 5 > v4)
    v4 = v10 >> 5;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
    v11 = 0x3FFFFFFFFFFFFFFLL;
  else
    v11 = v4;
  v28 = 0;
  v29 = a1 + 2;
  if (v11)
  {
    if (v11 >> 58)
      sub_1C4764EE4();
    v8 = (char *)operator new(v11 << 6);
  }
  v12 = &v8[64 * v3];
  *(_QWORD *)v12 = a2;
  v13 = v12 + 8;
  v14 = *(_DWORD *)(a3 + 8);
  *((_DWORD *)v12 + 4) = v14;
  if (v14 > 0x40)
  {
    v24 = (void *)operator new[]();
    *v13 = v24;
    memcpy(v24, *(const void **)a3, (((unint64_t)*((unsigned int *)v12 + 4) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *v13 = *(_QWORD *)a3;
  }
  v15 = &v8[64 * v3];
  v16 = *(_DWORD *)(a3 + 24);
  *((_DWORD *)v15 + 8) = v16;
  v17 = (unsigned int *)(v15 + 32);
  v18 = v17 - 2;
  if (v16 > 0x40)
  {
    v25 = (void *)operator new[]();
    *(_QWORD *)v18 = v25;
    memcpy(v25, *(const void **)(a3 + 16), (((unint64_t)*v17 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v18 = *(_QWORD *)(a3 + 16);
  }
  v19 = &v8[64 * v3];
  *((_QWORD *)v19 + 5) = 0;
  *((_QWORD *)v19 + 6) = 0;
  *((_QWORD *)v19 + 7) = 0;
  sub_1C4F6F404(v9, a1[1], a1[1], *a1, *a1, (uint64_t)v19, (uint64_t)v19);
  v20 = *(_OWORD *)a1;
  *a1 = v21;
  a1[1] = (uint64_t)(v12 + 64);
  v27 = v20;
  v22 = a1[2];
  a1[2] = (uint64_t)&v8[64 * v11];
  v28 = v22;
  v26 = v20;
  sub_1C61B7D3C((uint64_t)&v26);
  return v12 + 64;
}

__n128 sub_1C4F6F404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 64) = *(_QWORD *)(a3 + v7 - 64);
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 56) = *(_QWORD *)(a3 + v7 - 56);
      *(_DWORD *)(v9 - 48) = 0;
      *(_DWORD *)(v8 - 32) = *(_DWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_DWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

char *sub_1C4F6F488(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  void *v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v10 = 0x555555555555555;
  else
    v10 = v5;
  if (v10)
  {
    if (v10 > 0x555555555555555)
      sub_1C4764EE4();
    v11 = (char *)operator new(48 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[48 * v4];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  v13 = v12 + 16;
  v14 = *(_DWORD *)(a4 + 8);
  *((_DWORD *)v12 + 6) = v14;
  if (v14 > 0x40)
  {
    v30 = (void *)operator new[]();
    *v13 = v30;
    memcpy(v30, *(const void **)a4, (((unint64_t)*((unsigned int *)v12 + 6) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *v13 = *(_QWORD *)a4;
  }
  v15 = &v11[48 * v4];
  v16 = *(_DWORD *)(a4 + 24);
  *((_DWORD *)v15 + 10) = v16;
  v17 = (unsigned int *)(v15 + 40);
  v18 = v17 - 2;
  if (v16 > 0x40)
  {
    v31 = (void *)operator new[]();
    *(_QWORD *)v18 = v31;
    memcpy(v31, *(const void **)(a4 + 16), (((unint64_t)*v17 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v18 = *(_QWORD *)(a4 + 16);
  }
  v19 = &v11[48 * v10];
  v20 = v12 + 48;
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  if (v22 == *a1)
  {
    *a1 = v12;
    a1[1] = v20;
    a1[2] = v19;
  }
  else
  {
    v23 = 0;
    do
    {
      v24 = &v12[v23];
      v25 = &v22[v23];
      *((_OWORD *)v24 - 3) = *(_OWORD *)&v22[v23 - 48];
      *((_DWORD *)v24 - 6) = *(_DWORD *)&v22[v23 - 24];
      *((_QWORD *)v24 - 4) = *(_QWORD *)&v22[v23 - 32];
      *((_DWORD *)v25 - 6) = 0;
      *((_DWORD *)v24 - 2) = *(_DWORD *)&v22[v23 - 8];
      *((_QWORD *)v24 - 2) = *(_QWORD *)&v22[v23 - 16];
      *((_DWORD *)v25 - 2) = 0;
      v23 -= 48;
    }
    while (&v22[v23] != v21);
    v22 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = &v12[v23];
    a1[1] = v20;
    a1[2] = v19;
    while (v26 != v22)
    {
      if (*((_DWORD *)v26 - 2) >= 0x41u)
      {
        v27 = *((_QWORD *)v26 - 2);
        if (v27)
          MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
      }
      if (*((_DWORD *)v26 - 6) >= 0x41u)
      {
        v28 = *((_QWORD *)v26 - 4);
        if (v28)
          MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      }
      v26 -= 48;
    }
  }
  if (v22)
    operator delete(v22);
  return v12 + 48;
}

uint64_t sub_1C4F6F710(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t j;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t m;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t k;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  int64_t v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  unsigned int v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _OWORD *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t *v184;
  _QWORD *v185;
  unint64_t v186;
  unint64_t v187;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  uint64_t i;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unint64_t v241;
  unint64_t v242;
  int v243;
  int v244;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t *v261;
  int v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  int v271;
  int v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;

  v5 = result;
LABEL_2:
  v6 = a2;
  v261 = (unint64_t *)(a2 - 48);
  j = v5;
  while (2)
  {
    v5 = j;
    v8 = v6 - j;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - j) >> 4);
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v105 = (_OWORD *)(a2 - 48);
        v104 = *(_QWORD *)(a2 - 48);
        if (v104 >= *(_QWORD *)v5
          && (*(_QWORD *)v5 < v104
           || *(_QWORD *)(*(_QWORD *)(a2 - 40) & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8)))
        {
          return result;
        }
        v276 = *(_OWORD *)v5;
        v106 = *(_DWORD *)(v5 + 24);
        v107 = *(_QWORD *)(v5 + 16);
        *(_DWORD *)(v5 + 24) = 0;
        v108 = *(_DWORD *)(v5 + 40);
        v109 = *(_QWORD *)(v5 + 32);
        *(_DWORD *)(v5 + 40) = 0;
        *(_OWORD *)v5 = *v105;
        v110 = a2;
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 - 32);
        *(_DWORD *)(v5 + 24) = *(_DWORD *)(a2 - 24);
        *(_DWORD *)(a2 - 24) = 0;
        if (*(_DWORD *)(v5 + 40) >= 0x41u)
        {
          result = *(_QWORD *)(v5 + 32);
          if (result)
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        }
        *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = 0;
        *v105 = v276;
        if (*(_DWORD *)(a2 - 24) <= 0x40u)
          goto LABEL_134;
        result = *(_QWORD *)(a2 - 32);
        if (result)
        {
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
          v110 = a2;
          v215 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 32) = v107;
          *(_DWORD *)(a2 - 24) = v106;
          if (v215 >= 0x41)
          {
            result = *(_QWORD *)(a2 - 16);
            if (result)
              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
          }
        }
        else
        {
          v110 = a2;
LABEL_134:
          *(_QWORD *)(v110 - 32) = v107;
          *(_DWORD *)(v110 - 24) = v106;
        }
        *(_QWORD *)(v110 - 16) = v109;
        *(_DWORD *)(v110 - 8) = v108;
        return result;
      case 3:
        return sub_1C4F716C8(v5, (unint64_t *)(v5 + 48), (uint64_t)v261);
      case 4:
        return sub_1C4F72420(v5, (__int128 *)(v5 + 48), v5 + 96, (uint64_t)v261);
      case 5:
        return sub_1C4F710E0(v5, v5 + 48, v5 + 96, v5 + 144, (uint64_t)v261);
      default:
        if (v8 <= 1151)
        {
          v111 = v5 + 48;
          v113 = v5 == v6 || v111 == v6;
          if ((a4 & 1) != 0)
          {
            if (v113)
              return result;
            v114 = 0;
            v115 = v5;
            while (1)
            {
              v116 = v115;
              v115 = v111;
              v117 = *(_QWORD *)(v116 + 48);
              if (v117 < *(_QWORD *)v116)
                break;
              if (*(_QWORD *)v116 >= v117)
              {
                v118 = *(_QWORD *)(v116 + 56);
                v119 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8);
                if (*(_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(v116 + 8) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_150;
              }
LABEL_170:
              v111 = v115 + 48;
              v114 += 48;
              if (v115 + 48 == a2)
                return result;
            }
            v118 = *(_QWORD *)(v116 + 56);
            v119 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8);
LABEL_150:
            v120 = *(_DWORD *)(v116 + 72);
            v121 = *(_QWORD *)(v116 + 64);
            *(_DWORD *)(v116 + 72) = 0;
            v122 = *(_DWORD *)(v116 + 88);
            v123 = *(_QWORD *)(v116 + 80);
            v124 = v114;
            *(_DWORD *)(v116 + 88) = 0;
            while (1)
            {
              v125 = v5 + v124;
              *(_OWORD *)(v5 + v124 + 48) = *(_OWORD *)(v5 + v124);
              if (*(_DWORD *)(v5 + v124 + 72) >= 0x41u)
              {
                result = *(_QWORD *)(v125 + 64);
                if (result)
                {
                  v262 = v122;
                  v128 = v123;
                  v255 = v120;
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                  v120 = v255;
                  v123 = v128;
                  v122 = v262;
                }
              }
              *(_QWORD *)(v125 + 64) = *(_QWORD *)(v125 + 16);
              *(_DWORD *)(v125 + 72) = *(_DWORD *)(v125 + 24);
              *(_DWORD *)(v125 + 24) = 0;
              if (*(_DWORD *)(v125 + 88) >= 0x41u)
              {
                result = *(_QWORD *)(v125 + 80);
                if (result)
                {
                  v263 = v122;
                  v129 = v123;
                  v256 = v120;
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                  v120 = v256;
                  v123 = v129;
                  v122 = v263;
                }
              }
              v126 = v5 + v124;
              *(_QWORD *)(v125 + 80) = *(_QWORD *)(v5 + v124 + 32);
              *(_DWORD *)(v125 + 88) = *(_DWORD *)(v5 + v124 + 40);
              *(_DWORD *)(v5 + v124 + 40) = 0;
              if (!v124)
              {
                v130 = v5;
                goto LABEL_167;
              }
              v127 = *(_QWORD *)(v126 - 48);
              if (v117 >= v127 && (v127 < v117 || *v119 >= *(_QWORD *)(*(_QWORD *)(v126 - 40) & 0xFFFFFFFFFFFFFFF8)))
                break;
              v124 -= 48;
            }
            v130 = v5 + v124;
LABEL_167:
            *(_QWORD *)v130 = v117;
            *(_QWORD *)(v130 + 8) = v118;
            if (*(_DWORD *)(v130 + 24) >= 0x41u)
            {
              result = *(_QWORD *)(v126 + 16);
              if (result)
              {
                v131 = v122;
                v132 = v123;
                v133 = v120;
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                v120 = v133;
                v123 = v132;
                v122 = v131;
              }
            }
            *(_QWORD *)(v126 + 16) = v121;
            *(_DWORD *)(v130 + 24) = v120;
            if (*(_DWORD *)(v130 + 40) >= 0x41u)
            {
              result = *(_QWORD *)(v130 + 32);
              if (result)
              {
                v134 = v122;
                v135 = v123;
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                v123 = v135;
                v122 = v134;
              }
            }
            *(_QWORD *)(v130 + 32) = v123;
            *(_DWORD *)(v130 + 40) = v122;
            goto LABEL_170;
          }
          if (v113)
            return result;
          for (i = v5 + 24; ; i += 48)
          {
            v204 = v5;
            v5 = v111;
            v205 = *(_QWORD *)(v204 + 48);
            if (v205 < *(_QWORD *)v204)
              break;
            if (*(_QWORD *)v204 >= v205)
            {
              v206 = *(_QWORD *)(v204 + 56);
              v207 = (_QWORD *)(v206 & 0xFFFFFFFFFFFFFFF8);
              if (*(_QWORD *)(v206 & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(v204 + 8) & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_284;
            }
LABEL_300:
            v111 = v5 + 48;
            if (v5 + 48 == a2)
              return result;
          }
          v206 = *(_QWORD *)(v204 + 56);
          v207 = (_QWORD *)(v206 & 0xFFFFFFFFFFFFFFF8);
LABEL_284:
          v208 = *(_DWORD *)(v204 + 72);
          v209 = *(_QWORD *)(v204 + 64);
          *(_DWORD *)(v204 + 72) = 0;
          v210 = *(_DWORD *)(v204 + 88);
          v211 = *(_QWORD *)(v204 + 80);
          v212 = i;
          *(_DWORD *)(v204 + 88) = 0;
          while (1)
          {
            *(_OWORD *)(v212 + 24) = *(_OWORD *)(v212 - 24);
            if (*(_DWORD *)(v212 + 48) >= 0x41u)
            {
              result = *(_QWORD *)(v212 + 40);
              if (result)
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            }
            *(_QWORD *)(v212 + 40) = *(_QWORD *)(v212 - 8);
            *(_DWORD *)(v212 + 48) = *(_DWORD *)v212;
            *(_DWORD *)v212 = 0;
            if (*(_DWORD *)(v212 + 64) >= 0x41u)
            {
              result = *(_QWORD *)(v212 + 56);
              if (result)
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            }
            *(_QWORD *)(v212 + 56) = *(_QWORD *)(v212 + 8);
            *(_DWORD *)(v212 + 64) = *(_DWORD *)(v212 + 16);
            *(_DWORD *)(v212 + 16) = 0;
            v213 = *(_QWORD *)(v212 - 72);
            if (v205 >= v213 && (v213 < v205 || *v207 >= *(_QWORD *)(*(_QWORD *)(v212 - 64) & 0xFFFFFFFFFFFFFFF8)))
              break;
            v212 -= 48;
          }
          *(_QWORD *)(v212 - 24) = v205;
          *(_QWORD *)(v212 - 16) = v206;
          if (*(_DWORD *)v212 >= 0x41u && (result = *(_QWORD *)(v212 - 8)) != 0)
          {
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            v214 = *(_DWORD *)(v212 + 16);
            *(_QWORD *)(v212 - 8) = v209;
            *(_DWORD *)v212 = v208;
            if (v214 >= 0x41)
            {
              result = *(_QWORD *)(v212 + 8);
              if (result)
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            }
          }
          else
          {
            *(_QWORD *)(v212 - 8) = v209;
            *(_DWORD *)v212 = v208;
          }
          *(_QWORD *)(v212 + 8) = v211;
          *(_DWORD *)(v212 + 16) = v210;
          goto LABEL_300;
        }
        if (!a3)
        {
          if (v5 == v6)
            return result;
          v136 = (unint64_t)(v9 - 2) >> 1;
          v137 = v136;
          while (1)
          {
            v138 = v137;
            if (v136 < v137)
              goto LABEL_208;
            v139 = (2 * v137) | 1;
            v140 = (unint64_t *)(v5 + 48 * v139);
            if (2 * v137 + 2 < v9)
            {
              v141 = v140[6];
              if (*v140 < v141
                || v141 >= *v140
                && *(_QWORD *)(*(_QWORD *)(v5 + 48 * v139 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(v140[7] & 0xFFFFFFFFFFFFFFF8))
              {
                v140 += 6;
                v139 = 2 * v137 + 2;
              }
            }
            v142 = v5 + 48 * v137;
            v143 = *(_QWORD *)v142;
            if (*v140 < *(_QWORD *)v142)
              goto LABEL_208;
            v144 = *(_QWORD *)(v5 + 48 * v137 + 8);
            if (v143 < *v140)
              break;
            v145 = (_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF8);
            if (*(_QWORD *)(v140[1] & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_188;
LABEL_208:
            v137 = v138 - 1;
            if (!v138)
            {
              while (1)
              {
                v160 = 0;
                v161 = a2;
                v277 = *(_OWORD *)v5;
                v162 = *(_DWORD *)(v5 + 24);
                v163 = *(_QWORD *)(v5 + 16);
                *(_DWORD *)(v5 + 24) = 0;
                v164 = *(_DWORD *)(v5 + 40);
                v165 = *(_QWORD *)(v5 + 32);
                *(_DWORD *)(v5 + 40) = 0;
                v166 = v5;
                do
                {
                  v167 = v166;
                  v168 = v160 + 1;
                  v166 += 48 * (v160 + 1);
                  v169 = 2 * v160;
                  v160 = (2 * v160) | 1;
                  v170 = v169 + 2;
                  if (v170 < v9)
                  {
                    v171 = *(_QWORD *)(v166 + 48);
                    if (*(_QWORD *)v166 < v171
                      || v171 >= *(_QWORD *)v166
                      && *(_QWORD *)(*(_QWORD *)(v167 + 48 * v168 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(v166 + 56) & 0xFFFFFFFFFFFFFFF8))
                    {
                      v166 += 48;
                      v160 = v170;
                    }
                  }
                  *(_OWORD *)v167 = *(_OWORD *)v166;
                  if (*(_DWORD *)(v167 + 24) >= 0x41u)
                  {
                    result = *(_QWORD *)(v167 + 16);
                    if (result)
                    {
                      v271 = v164;
                      v266 = v165;
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                      v165 = v266;
                      v164 = v271;
                    }
                  }
                  *(_QWORD *)(v167 + 16) = *(_QWORD *)(v166 + 16);
                  *(_DWORD *)(v167 + 24) = *(_DWORD *)(v166 + 24);
                  *(_DWORD *)(v166 + 24) = 0;
                  if (*(_DWORD *)(v167 + 40) >= 0x41u)
                  {
                    result = *(_QWORD *)(v167 + 32);
                    if (result)
                    {
                      v272 = v164;
                      v267 = v165;
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                      v165 = v267;
                      v164 = v272;
                    }
                  }
                  *(_QWORD *)(v167 + 32) = *(_QWORD *)(v166 + 32);
                  *(_DWORD *)(v167 + 40) = *(_DWORD *)(v166 + 40);
                  *(_DWORD *)(v166 + 40) = 0;
                }
                while (v160 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v172 = (_OWORD *)(v161 - 48);
                a2 = v161 - 48;
                if (v166 == v161 - 48)
                {
                  *(_OWORD *)v166 = v277;
                  if (*(_DWORD *)(v166 + 24) >= 0x41u && (result = *(_QWORD *)(v166 + 16)) != 0)
                  {
                    v196 = v164;
                    v197 = v165;
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    v165 = v197;
                    v164 = v196;
                    v198 = *(_DWORD *)(v166 + 40);
                    *(_QWORD *)(v166 + 16) = v163;
                    *(_DWORD *)(v166 + 24) = v162;
                    if (v198 >= 0x41)
                    {
                      result = *(_QWORD *)(v166 + 32);
                      if (result)
                      {
                        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                        v165 = v197;
                        v164 = v196;
                      }
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v166 + 16) = v163;
                    *(_DWORD *)(v166 + 24) = v162;
                  }
                  *(_QWORD *)(v166 + 32) = v165;
                  *(_DWORD *)(v166 + 40) = v164;
                  goto LABEL_256;
                }
                *(_OWORD *)v166 = *v172;
                if (*(_DWORD *)(v166 + 24) >= 0x41u)
                {
                  result = *(_QWORD *)(v166 + 16);
                  if (result)
                  {
                    v189 = v164;
                    v190 = v165;
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    v165 = v190;
                    v164 = v189;
                  }
                }
                *(_QWORD *)(v166 + 16) = *(_QWORD *)(v161 - 32);
                *(_DWORD *)(v166 + 24) = *(_DWORD *)(v161 - 24);
                *(_DWORD *)(v161 - 24) = 0;
                if (*(_DWORD *)(v166 + 40) >= 0x41u)
                {
                  result = *(_QWORD *)(v166 + 32);
                  if (result)
                  {
                    v191 = v164;
                    v192 = v165;
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    v165 = v192;
                    v164 = v191;
                  }
                }
                *(_QWORD *)(v166 + 32) = *(_QWORD *)(v161 - 16);
                *(_DWORD *)(v166 + 40) = *(_DWORD *)(v161 - 8);
                *(_DWORD *)(v161 - 8) = 0;
                *v172 = v277;
                if (*(_DWORD *)(v161 - 24) > 0x40u)
                {
                  v193 = v165;
                  v194 = v164;
                  result = *(_QWORD *)(v161 - 32);
                  if (result)
                  {
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    v195 = *(_DWORD *)(v161 - 8);
                    *(_QWORD *)(v161 - 32) = v163;
                    *(_DWORD *)(v161 - 24) = v162;
                    v164 = v194;
                    v165 = v193;
                    if (v195 >= 0x41)
                    {
                      result = *(_QWORD *)(v161 - 16);
                      if (result)
                      {
                        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                        v165 = v193;
                        v164 = v194;
                      }
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v161 - 32) = v163;
                    *(_DWORD *)(v161 - 24) = v162;
                  }
                }
                else
                {
                  *(_QWORD *)(v161 - 32) = v163;
                  *(_DWORD *)(v161 - 24) = v162;
                }
                *(_QWORD *)(v161 - 16) = v165;
                *(_DWORD *)(v161 - 8) = v164;
                v173 = v166 + 48 - v5;
                if (v173 >= 49)
                {
                  v174 = (v173 / 0x30uLL - 2) >> 1;
                  v175 = v5 + 48 * v174;
                  v176 = *(_QWORD *)v166;
                  if (*(_QWORD *)v175 < *(_QWORD *)v166)
                  {
                    v177 = *(_QWORD *)(v166 + 8);
                    v178 = (_QWORD *)(v177 & 0xFFFFFFFFFFFFFFF8);
LABEL_236:
                    v179 = 0;
                    v180 = *(_DWORD *)(v166 + 24);
                    v181 = *(_QWORD *)(v166 + 16);
                    *(_DWORD *)(v166 + 24) = 0;
                    v182 = *(_DWORD *)(v166 + 40);
                    v183 = *(_QWORD *)(v166 + 32);
                    *(_DWORD *)(v166 + 40) = 0;
                    while (1)
                    {
                      *(_OWORD *)v166 = *(_OWORD *)v175;
                      if (v179 >= 0x41)
                      {
                        result = *(_QWORD *)(v166 + 16);
                        if (result)
                        {
                          v268 = v182;
                          v259 = v183;
                          v250 = v180;
                          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                          v180 = v250;
                          v183 = v259;
                          v182 = v268;
                        }
                      }
                      *(_QWORD *)(v166 + 16) = *(_QWORD *)(v175 + 16);
                      *(_DWORD *)(v166 + 24) = *(_DWORD *)(v175 + 24);
                      *(_DWORD *)(v175 + 24) = 0;
                      if (*(_DWORD *)(v166 + 40) >= 0x41u)
                      {
                        result = *(_QWORD *)(v166 + 32);
                        if (result)
                        {
                          v269 = v182;
                          v260 = v183;
                          v251 = v180;
                          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                          v180 = v251;
                          v183 = v260;
                          v182 = v269;
                        }
                      }
                      *(_QWORD *)(v166 + 32) = *(_QWORD *)(v175 + 32);
                      *(_DWORD *)(v166 + 40) = *(_DWORD *)(v175 + 40);
                      *(_DWORD *)(v175 + 40) = 0;
                      if (!v174)
                        break;
                      v174 = (v174 - 1) >> 1;
                      v184 = (unint64_t *)(v5 + 48 * v174);
                      v187 = *v184;
                      v185 = v184 + 1;
                      v186 = v187;
                      if (v187 >= v176 && (v176 < v186 || *(_QWORD *)(*v185 & 0xFFFFFFFFFFFFFFF8) >= *v178))
                        break;
                      v179 = *(_DWORD *)(v175 + 24);
                      v166 = v175;
                      v175 = v5 + 48 * v174;
                    }
                    *(_QWORD *)v175 = v176;
                    *(_QWORD *)(v175 + 8) = v177;
                    if (*(_DWORD *)(v175 + 24) >= 0x41u && (result = *(_QWORD *)(v175 + 16)) != 0)
                    {
                      v199 = v182;
                      v200 = v183;
                      v201 = v180;
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                      v183 = v200;
                      v182 = v199;
                      v202 = *(_DWORD *)(v175 + 40);
                      *(_QWORD *)(v175 + 16) = v181;
                      *(_DWORD *)(v175 + 24) = v201;
                      if (v202 >= 0x41)
                      {
                        result = *(_QWORD *)(v175 + 32);
                        if (result)
                        {
                          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                          v183 = v200;
                          v182 = v199;
                        }
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v175 + 16) = v181;
                      *(_DWORD *)(v175 + 24) = v180;
                    }
                    *(_QWORD *)(v175 + 32) = v183;
                    *(_DWORD *)(v175 + 40) = v182;
                    goto LABEL_256;
                  }
                  if (v176 >= *(_QWORD *)v175)
                  {
                    v177 = *(_QWORD *)(v166 + 8);
                    v178 = (_QWORD *)(v177 & 0xFFFFFFFFFFFFFFF8);
                    if (*(_QWORD *)(*(_QWORD *)(v175 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(v177 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_236;
                  }
                }
LABEL_256:
                if (v9-- <= 2)
                  return result;
              }
            }
          }
          v145 = (_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF8);
LABEL_188:
          v146 = 0;
          v147 = v5 + 48 * v137;
          v148 = *(_DWORD *)(v147 + 24);
          v149 = *(_QWORD *)(v147 + 16);
          *(_DWORD *)(v147 + 24) = 0;
          v150 = *(_DWORD *)(v147 + 40);
          v151 = *(_QWORD *)(v147 + 32);
          *(_DWORD *)(v147 + 40) = 0;
          while (1)
          {
            *(_OWORD *)v142 = *(_OWORD *)v140;
            if (v146 >= 0x41)
            {
              result = *(_QWORD *)(v142 + 16);
              if (result)
              {
                v241 = v149;
                v264 = v150;
                v248 = v144;
                v257 = v151;
                v243 = v148;
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                v149 = v241;
                v148 = v243;
                v144 = v248;
                v151 = v257;
                v150 = v264;
              }
            }
            *(_QWORD *)(v142 + 16) = v140[2];
            *(_DWORD *)(v142 + 24) = *((_DWORD *)v140 + 6);
            *((_DWORD *)v140 + 6) = 0;
            if (*(_DWORD *)(v142 + 40) >= 0x41u)
            {
              result = *(_QWORD *)(v142 + 32);
              if (result)
              {
                v242 = v149;
                v265 = v150;
                v249 = v144;
                v258 = v151;
                v244 = v148;
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                v149 = v242;
                v148 = v244;
                v144 = v249;
                v151 = v258;
                v150 = v265;
              }
            }
            *(_QWORD *)(v142 + 32) = v140[4];
            *(_DWORD *)(v142 + 40) = *((_DWORD *)v140 + 10);
            *((_DWORD *)v140 + 10) = 0;
            if (v136 < v139)
              break;
            v152 = (2 * v139) | 1;
            v153 = (unint64_t *)(v5 + 48 * v152);
            if (2 * v139 + 2 < v9)
            {
              v154 = v153[6];
              if (*v153 < v154
                || v154 >= *v153
                && *(_QWORD *)(*(_QWORD *)(v5 + 48 * v152 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(v153[7] & 0xFFFFFFFFFFFFFFF8))
              {
                v153 += 6;
                v152 = 2 * v139 + 2;
              }
            }
            if (*v153 < v143 || v143 >= *v153 && *(_QWORD *)(v153[1] & 0xFFFFFFFFFFFFFFF8) < *v145)
              break;
            v146 = *((_DWORD *)v140 + 6);
            v142 = (uint64_t)v140;
            v140 = v153;
            v139 = v152;
          }
          *v140 = v143;
          v140[1] = v144;
          if (*((_DWORD *)v140 + 6) >= 0x41u && (result = v140[2]) != 0)
          {
            v155 = v149;
            v156 = v150;
            v157 = v151;
            v158 = v148;
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            v151 = v157;
            v150 = v156;
            v159 = *((_DWORD *)v140 + 10);
            v140[2] = v155;
            *((_DWORD *)v140 + 6) = v158;
            if (v159 >= 0x41)
            {
              result = v140[4];
              if (result)
              {
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                v151 = v157;
                v150 = v156;
              }
            }
          }
          else
          {
            v140[2] = v149;
            *((_DWORD *)v140 + 6) = v148;
          }
          v140[4] = v151;
          *((_DWORD *)v140 + 10) = v150;
          goto LABEL_208;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (unint64_t *)(v5 + 48 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x1801)
        {
          result = sub_1C4F716C8((uint64_t)v11, (unint64_t *)v5, (uint64_t)v261);
        }
        else
        {
          sub_1C4F716C8(v5, v11, (uint64_t)v261);
          v12 = 3 * v10;
          v13 = v5 + 16 * v12;
          sub_1C4F716C8(v5 + 48, (unint64_t *)(v13 - 48), a2 - 96);
          sub_1C4F716C8(v5 + 96, (unint64_t *)(v5 + 48 + 16 * v12), a2 - 144);
          result = sub_1C4F716C8(v13 - 48, v11, v5 + 48 + 16 * v12);
          v273 = *(_OWORD *)v5;
          v14 = *(_DWORD *)(v5 + 24);
          v15 = *(_QWORD *)(v5 + 16);
          *(_DWORD *)(v5 + 24) = 0;
          v16 = *(_DWORD *)(v5 + 40);
          v17 = *(_QWORD *)(v5 + 32);
          *(_DWORD *)(v5 + 40) = 0;
          *(_OWORD *)v5 = *(_OWORD *)v11;
          *(_QWORD *)(v5 + 16) = *(_QWORD *)(v13 + 16);
          *(_DWORD *)(v5 + 24) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v5 + 32) = *(_QWORD *)(v13 + 32);
          *(_DWORD *)(v5 + 40) = *(_DWORD *)(v13 + 40);
          *(_DWORD *)(v13 + 40) = 0;
          *(_OWORD *)v11 = v273;
          *(_QWORD *)(v13 + 16) = v15;
          *(_DWORD *)(v13 + 24) = v14;
          *(_QWORD *)(v13 + 32) = v17;
          *(_DWORD *)(v13 + 40) = v16;
        }
        --a3;
        v18 = *(_QWORD *)v5;
        if ((a4 & 1) == 0)
        {
          v19 = *(_QWORD *)(v5 - 48);
          if (v19 >= v18)
          {
            v20 = *(_QWORD *)(v5 + 8);
            if (v18 < v19
              || *(_QWORD *)(*(_QWORD *)(v5 - 40) & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8))
            {
              v49 = *(_DWORD *)(v5 + 24);
              v50 = *(_QWORD *)(v5 + 16);
              *(_DWORD *)(v5 + 24) = 0;
              v51 = *(_DWORD *)(v5 + 40);
              v52 = *(_QWORD *)(v5 + 32);
              *(_DWORD *)(v5 + 40) = 0;
              v53 = *v261;
              v54 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
              if (v18 < *v261 || v53 >= v18 && *v54 < *(_QWORD *)(*(_QWORD *)(v6 - 40) & 0xFFFFFFFFFFFFFFF8))
              {
                j = v5;
                do
                {
                  v56 = *(_QWORD *)(j + 48);
                  j += 48;
                  v55 = v56;
                }
                while (v18 >= v56 && (v55 < v18 || *v54 >= *(_QWORD *)(*(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)));
              }
              else
              {
                for (j = v5 + 48;
                      j < v6
                   && v18 >= *(_QWORD *)j
                   && (*(_QWORD *)j < v18 || *v54 >= *(_QWORD *)(*(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8));
              }
              k = v6;
              if (j < v6)
              {
                for (k = a2 - 48;
                      v18 < v53
                   || v53 >= v18
                   && *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(k + 8) & 0xFFFFFFFFFFFFFFF8);
                      k -= 48)
                {
                  v58 = *(_QWORD *)(k - 48);
                  v53 = v58;
                }
              }
              if (j < k)
              {
                v59 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v60 = a3;
                  v275 = *(_OWORD *)j;
                  v61 = *(_DWORD *)(j + 24);
                  v62 = *(_QWORD *)(j + 16);
                  *(_DWORD *)(j + 24) = 0;
                  v63 = *(_DWORD *)(j + 40);
                  v64 = *(_QWORD *)(j + 32);
                  *(_DWORD *)(j + 40) = 0;
                  *(_OWORD *)j = *(_OWORD *)k;
                  *(_QWORD *)(j + 16) = *(_QWORD *)(k + 16);
                  *(_DWORD *)(j + 24) = *(_DWORD *)(k + 24);
                  *(_DWORD *)(k + 24) = 0;
                  if (*(_DWORD *)(j + 40) >= 0x41u)
                  {
                    result = *(_QWORD *)(j + 32);
                    if (result)
                    {
                      v253 = v51;
                      v246 = v52;
                      v237 = v49;
                      v225 = v20;
                      v231 = v50;
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                      v20 = v225;
                      v50 = v231;
                      v49 = v237;
                      v52 = v246;
                      v51 = v253;
                    }
                  }
                  *(_QWORD *)(j + 32) = *(_QWORD *)(k + 32);
                  *(_DWORD *)(j + 40) = *(_DWORD *)(k + 40);
                  *(_DWORD *)(k + 40) = 0;
                  *(_OWORD *)k = v275;
                  if (*(_DWORD *)(k + 24) > 0x40u)
                  {
                    v226 = v20;
                    v232 = v50;
                    v238 = v49;
                    v247 = v52;
                    v254 = v51;
                    result = *(_QWORD *)(k + 16);
                    if (result)
                    {
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                      v70 = *(_DWORD *)(k + 40);
                      *(_QWORD *)(k + 16) = v62;
                      *(_DWORD *)(k + 24) = v61;
                      v51 = v254;
                      v52 = v247;
                      v49 = v238;
                      v20 = v226;
                      v50 = v232;
                      if (v70 >= 0x41)
                      {
                        result = *(_QWORD *)(k + 32);
                        if (result)
                        {
                          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                          v20 = v226;
                          v50 = v232;
                          v49 = v238;
                          v52 = v247;
                          v51 = v254;
                        }
                      }
                    }
                    else
                    {
                      *(_QWORD *)(k + 16) = v62;
                      *(_DWORD *)(k + 24) = v61;
                    }
                  }
                  else
                  {
                    *(_QWORD *)(k + 16) = v62;
                    *(_DWORD *)(k + 24) = v61;
                  }
                  *(_QWORD *)(k + 32) = v64;
                  *(_DWORD *)(k + 40) = v63;
                  v66 = *(_QWORD *)(j + 48);
                  j += 48;
                  v65 = v66;
                  a3 = v60;
                  while (v18 >= v65 && (v65 < v18 || *v59 >= *(_QWORD *)(*(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)))
                  {
                    v67 = *(_QWORD *)(j + 48);
                    j += 48;
                    v65 = v67;
                  }
                  do
                  {
                    do
                    {
                      v69 = *(_QWORD *)(k - 48);
                      k -= 48;
                      v68 = v69;
                    }
                    while (v18 < v69);
                  }
                  while (v68 >= v18 && *v59 < *(_QWORD *)(*(_QWORD *)(k + 8) & 0xFFFFFFFFFFFFFFF8));
                }
                while (j < k);
              }
              if (j - 48 != v5)
              {
                *(_OWORD *)v5 = *(_OWORD *)(j - 48);
                if (*(_DWORD *)(v5 + 24) >= 0x41u)
                {
                  result = *(_QWORD *)(v5 + 16);
                  if (result)
                  {
                    v94 = v51;
                    v95 = v52;
                    v96 = v49;
                    v97 = v50;
                    v98 = v20;
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    v20 = v98;
                    v50 = v97;
                    v49 = v96;
                    v52 = v95;
                    v51 = v94;
                  }
                }
                *(_QWORD *)(v5 + 16) = *(_QWORD *)(j - 32);
                *(_DWORD *)(v5 + 24) = *(_DWORD *)(j - 24);
                *(_DWORD *)(j - 24) = 0;
                if (*(_DWORD *)(v5 + 40) >= 0x41u)
                {
                  result = *(_QWORD *)(v5 + 32);
                  if (result)
                  {
                    v99 = v51;
                    v100 = v52;
                    v101 = v49;
                    v102 = v50;
                    v103 = v20;
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    v20 = v103;
                    v50 = v102;
                    v49 = v101;
                    v52 = v100;
                    v51 = v99;
                  }
                }
                *(_QWORD *)(v5 + 32) = *(_QWORD *)(j - 16);
                *(_DWORD *)(v5 + 40) = *(_DWORD *)(j - 8);
                *(_DWORD *)(j - 8) = 0;
              }
              *(_QWORD *)(j - 48) = v18;
              *(_QWORD *)(j - 40) = v20;
              v6 = a2;
              if (*(_DWORD *)(j - 24) >= 0x41u)
              {
                result = *(_QWORD *)(j - 32);
                if (result)
                {
                  v88 = v51;
                  v89 = v52;
                  v90 = v49;
                  v91 = v50;
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                  v50 = v91;
                  v49 = v90;
                  v52 = v89;
                  v51 = v88;
                }
              }
              *(_QWORD *)(j - 32) = v50;
              *(_DWORD *)(j - 24) = v49;
              if (*(_DWORD *)(j - 8) >= 0x41u)
              {
                result = *(_QWORD *)(j - 16);
                if (result)
                {
                  v92 = v51;
                  v93 = v52;
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                  v52 = v93;
                  v51 = v92;
                }
              }
              a4 = 0;
              *(_QWORD *)(j - 16) = v52;
              *(_DWORD *)(j - 8) = v51;
              continue;
            }
          }
        }
        v21 = 0;
        v22 = *(_DWORD *)(v5 + 24);
        v24 = *(_QWORD *)(v5 + 8);
        v23 = *(_QWORD *)(v5 + 16);
        *(_DWORD *)(v5 + 24) = 0;
        v25 = *(_DWORD *)(v5 + 40);
        v26 = *(_QWORD *)(v5 + 32);
        *(_DWORD *)(v5 + 40) = 0;
        v27 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
        while (1)
        {
          v28 = *(_QWORD *)(v5 + v21 + 48);
          if (v28 >= v18 && (v18 < v28 || *(_QWORD *)(*(_QWORD *)(v5 + v21 + 56) & 0xFFFFFFFFFFFFFFF8) >= *v27))
            break;
          v21 += 48;
        }
        v29 = v5 + v21 + 48;
        if (v21)
        {
          v30 = a2 - 48;
          for (m = *v261;
                m >= v18 && (v18 < m || *(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8) >= *v27);
                m = v32)
          {
            v32 = *(_QWORD *)(v30 - 48);
            v30 -= 48;
          }
        }
        else
        {
          v30 = v6;
          if (v29 < v6)
          {
            v30 = a2 - 48;
            v33 = *v261;
            if (*v261 >= v18)
            {
              v30 = a2 - 48;
              do
              {
                if (v18 >= v33)
                {
                  if (v29 >= v30 || *(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8) < *v27)
                    break;
                }
                else if (v29 >= v30)
                {
                  break;
                }
                v34 = *(_QWORD *)(v30 - 48);
                v30 -= 48;
                v33 = v34;
              }
              while (v34 >= v18);
            }
          }
        }
        v252 = a3;
        j = v29;
        if (v29 < v30)
        {
          v35 = v30;
          do
          {
            v274 = *(_OWORD *)j;
            v36 = *(_DWORD *)(j + 24);
            v37 = *(_QWORD *)(j + 16);
            *(_DWORD *)(j + 24) = 0;
            v38 = *(_DWORD *)(j + 40);
            v39 = *(_QWORD *)(j + 32);
            *(_DWORD *)(j + 40) = 0;
            *(_OWORD *)j = *(_OWORD *)v35;
            *(_QWORD *)(j + 16) = *(_QWORD *)(v35 + 16);
            *(_DWORD *)(j + 24) = *(_DWORD *)(v35 + 24);
            *(_DWORD *)(v35 + 24) = 0;
            if (*(_DWORD *)(j + 40) >= 0x41u)
            {
              v44 = *(_QWORD *)(j + 32);
              if (v44)
              {
                v235 = v25;
                v216 = v23;
                v218 = v26;
                v229 = v22;
                v220 = v29;
                v223 = v24;
                MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
                v29 = v220;
                v24 = v223;
                v23 = v216;
                v26 = v218;
                v22 = v229;
                v25 = v235;
              }
            }
            *(_QWORD *)(j + 32) = *(_QWORD *)(v35 + 32);
            *(_DWORD *)(j + 40) = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = 0;
            *(_OWORD *)v35 = v274;
            if (*(_DWORD *)(v35 + 24) > 0x40u)
            {
              v221 = v29;
              v224 = v24;
              v217 = v23;
              v219 = v26;
              v230 = v22;
              v236 = v25;
              v45 = *(_QWORD *)(v35 + 16);
              if (v45)
              {
                MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
                v46 = *(_DWORD *)(v35 + 40);
                *(_QWORD *)(v35 + 16) = v37;
                *(_DWORD *)(v35 + 24) = v36;
                v25 = v236;
                v23 = v217;
                v26 = v219;
                v22 = v230;
                v29 = v221;
                v24 = v224;
                if (v46 >= 0x41)
                {
                  v47 = *(_QWORD *)(v35 + 32);
                  if (v47)
                  {
                    MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
                    v29 = v221;
                    v24 = v224;
                    v23 = v217;
                    v26 = v219;
                    v22 = v230;
                    v25 = v236;
                  }
                }
              }
              else
              {
                *(_QWORD *)(v35 + 16) = v37;
                *(_DWORD *)(v35 + 24) = v36;
              }
            }
            else
            {
              *(_QWORD *)(v35 + 16) = v37;
              *(_DWORD *)(v35 + 24) = v36;
            }
            *(_QWORD *)(v35 + 32) = v39;
            *(_DWORD *)(v35 + 40) = v38;
            do
            {
              do
              {
                v41 = *(_QWORD *)(j + 48);
                j += 48;
                v40 = v41;
              }
              while (v41 < v18);
            }
            while (v18 >= v40 && *(_QWORD *)(*(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8) < *v27);
            do
            {
              v43 = *(_QWORD *)(v35 - 48);
              v35 -= 48;
              v42 = v43;
            }
            while (v43 >= v18 && (v18 < v42 || *(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF8) >= *v27));
          }
          while (j < v35);
        }
        v6 = a2;
        a3 = v252;
        if (j - 48 != v5)
        {
          *(_OWORD *)v5 = *(_OWORD *)(j - 48);
          if (*(_DWORD *)(v5 + 24) >= 0x41u)
          {
            v80 = *(_QWORD *)(v5 + 16);
            if (v80)
            {
              v239 = v25;
              v81 = v26;
              v233 = v22;
              v82 = v23;
              v227 = v24;
              v83 = v29;
              MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
              v29 = v83;
              v24 = v227;
              v23 = v82;
              v22 = v233;
              v26 = v81;
              v25 = v239;
            }
          }
          *(_QWORD *)(v5 + 16) = *(_QWORD *)(j - 32);
          *(_DWORD *)(v5 + 24) = *(_DWORD *)(j - 24);
          *(_DWORD *)(j - 24) = 0;
          if (*(_DWORD *)(v5 + 40) >= 0x41u)
          {
            v84 = *(_QWORD *)(v5 + 32);
            if (v84)
            {
              v240 = v25;
              v85 = v26;
              v234 = v22;
              v86 = v23;
              v228 = v24;
              v87 = v29;
              MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
              v29 = v87;
              v24 = v228;
              v23 = v86;
              v22 = v234;
              v26 = v85;
              v25 = v240;
            }
          }
          *(_QWORD *)(v5 + 32) = *(_QWORD *)(j - 16);
          *(_DWORD *)(v5 + 40) = *(_DWORD *)(j - 8);
          *(_DWORD *)(j - 8) = 0;
        }
        *(_QWORD *)(j - 48) = v18;
        *(_QWORD *)(j - 40) = v24;
        if (*(_DWORD *)(j - 24) >= 0x41u)
        {
          v71 = *(_QWORD *)(j - 32);
          if (v71)
          {
            v72 = v25;
            v73 = v26;
            v74 = v22;
            v75 = v23;
            v222 = v29;
            MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
            v29 = v222;
            v23 = v75;
            v22 = v74;
            v26 = v73;
            v25 = v72;
          }
        }
        *(_QWORD *)(j - 32) = v23;
        *(_DWORD *)(j - 24) = v22;
        if (*(_DWORD *)(j - 8) >= 0x41u)
        {
          v76 = *(_QWORD *)(j - 16);
          if (v76)
          {
            v77 = v25;
            v78 = v26;
            v79 = v29;
            MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
            v29 = v79;
            v26 = v78;
            v25 = v77;
          }
        }
        *(_QWORD *)(j - 16) = v26;
        *(_DWORD *)(j - 8) = v25;
        if (v29 < v30)
        {
LABEL_63:
          result = sub_1C4F6F710(v5, j - 48, v252, a4 & 1);
          a4 = 0;
          continue;
        }
        v48 = sub_1C4F71F08(v5, j - 48);
        result = sub_1C4F71F08(j, a2);
        if (!(_DWORD)result)
        {
          if (v48)
            continue;
          goto LABEL_63;
        }
        a2 = j - 48;
        if (!v48)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C4F710E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  result = sub_1C4F72420(a1, (__int128 *)a2, a3, a4);
  if (*(_QWORD *)a5 < *(_QWORD *)a4
    || *(_QWORD *)a4 >= *(_QWORD *)a5
    && *(_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v52 = *(_OWORD *)a4;
    v11 = *(_DWORD *)(a4 + 24);
    v12 = *(_QWORD *)(a4 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    v13 = *(_DWORD *)(a4 + 40);
    v14 = *(_QWORD *)(a4 + 32);
    *(_DWORD *)(a4 + 40) = 0;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = 0;
    if (*(_DWORD *)(a4 + 40) >= 0x41u)
    {
      result = *(_QWORD *)(a4 + 32);
      if (result)
      {
        v39 = v13;
        v45 = v14;
        v35 = v11;
        v33 = v12;
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        v12 = v33;
        v11 = v35;
        v14 = v45;
        v13 = v39;
      }
    }
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(a5 + 32);
    *(_DWORD *)(a4 + 40) = *(_DWORD *)(a5 + 40);
    *(_DWORD *)(a5 + 40) = 0;
    *(_OWORD *)a5 = v52;
    if (*(_DWORD *)(a5 + 24) > 0x40u)
    {
      v34 = v12;
      v36 = v11;
      v46 = v14;
      v40 = v13;
      result = *(_QWORD *)(a5 + 16);
      if (result)
      {
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        v27 = *(_DWORD *)(a5 + 40);
        *(_QWORD *)(a5 + 16) = v34;
        *(_DWORD *)(a5 + 24) = v36;
        v28 = v27 >= 0x41;
        v13 = v40;
        v14 = v46;
        if (v28)
        {
          result = *(_QWORD *)(a5 + 32);
          if (result)
          {
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            v14 = v46;
            v13 = v40;
          }
        }
      }
      else
      {
        *(_QWORD *)(a5 + 16) = v12;
        *(_DWORD *)(a5 + 24) = v11;
      }
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v12;
      *(_DWORD *)(a5 + 24) = v11;
    }
    *(_QWORD *)(a5 + 32) = v14;
    *(_DWORD *)(a5 + 40) = v13;
    if (*(_QWORD *)a4 < *(_QWORD *)a3
      || *(_QWORD *)a3 >= *(_QWORD *)a4
      && *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v53 = *(_OWORD *)a3;
      v15 = *(_DWORD *)(a3 + 24);
      v16 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(a3 + 24) = 0;
      v17 = *(_DWORD *)(a3 + 40);
      v18 = *(_QWORD *)(a3 + 32);
      *(_DWORD *)(a3 + 40) = 0;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = 0;
      if (*(_DWORD *)(a3 + 40) >= 0x41u)
      {
        result = *(_QWORD *)(a3 + 32);
        if (result)
        {
          v47 = v18;
          v41 = v15;
          v37 = v16;
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
          v16 = v37;
          v15 = v41;
          v18 = v47;
        }
      }
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
      *(_DWORD *)(a4 + 40) = 0;
      *(_OWORD *)a4 = v53;
      if (*(_DWORD *)(a4 + 24) <= 0x40u)
      {
        *(_QWORD *)(a4 + 16) = v16;
        *(_DWORD *)(a4 + 24) = v15;
        goto LABEL_9;
      }
      v38 = v16;
      v42 = v15;
      v48 = v18;
      result = *(_QWORD *)(a4 + 16);
      if (result)
      {
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        v29 = *(_DWORD *)(a4 + 40);
        *(_QWORD *)(a4 + 16) = v38;
        *(_DWORD *)(a4 + 24) = v42;
        v18 = v48;
        if (v29 < 0x41 || (result = *(_QWORD *)(a4 + 32)) == 0)
        {
LABEL_9:
          *(_QWORD *)(a4 + 32) = v18;
          *(_DWORD *)(a4 + 40) = v17;
          if (*(_QWORD *)a3 >= *(_QWORD *)a2
            && (*(_QWORD *)a2 < *(_QWORD *)a3
             || *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8)))
          {
            return result;
          }
          v54 = *(_OWORD *)a2;
          v19 = *(_DWORD *)(a2 + 24);
          v20 = *(_QWORD *)(a2 + 16);
          *(_DWORD *)(a2 + 24) = 0;
          v21 = *(_DWORD *)(a2 + 40);
          v22 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)(a2 + 40) = 0;
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_DWORD *)(a3 + 24) = 0;
          if (*(_DWORD *)(a2 + 40) >= 0x41u)
          {
            result = *(_QWORD *)(a2 + 32);
            if (result)
            {
              v49 = v19;
              v43 = v20;
              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
              v20 = v43;
              v19 = v49;
            }
          }
          *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
          *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
          *(_DWORD *)(a3 + 40) = 0;
          *(_OWORD *)a3 = v54;
          if (*(_DWORD *)(a3 + 24) > 0x40u)
          {
            v44 = v20;
            v50 = v19;
            result = *(_QWORD *)(a3 + 16);
            if (result)
            {
              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
              v30 = *(_DWORD *)(a3 + 40);
              *(_QWORD *)(a3 + 16) = v44;
              *(_DWORD *)(a3 + 24) = v50;
              if (v30 >= 0x41)
              {
                result = *(_QWORD *)(a3 + 32);
                if (result)
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
              }
LABEL_14:
              *(_QWORD *)(a3 + 32) = v22;
              *(_DWORD *)(a3 + 40) = v21;
              if (*(_QWORD *)a2 >= *(_QWORD *)a1
                && (*(_QWORD *)a1 < *(_QWORD *)a2
                 || *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)))
              {
                return result;
              }
              v55 = *(_OWORD *)a1;
              v23 = *(_DWORD *)(a1 + 24);
              v24 = *(_QWORD *)(a1 + 16);
              *(_DWORD *)(a1 + 24) = 0;
              v25 = *(_DWORD *)(a1 + 40);
              v26 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)(a1 + 40) = 0;
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
              *(_DWORD *)(a2 + 24) = 0;
              if (*(_DWORD *)(a1 + 40) >= 0x41u)
              {
                result = *(_QWORD *)(a1 + 32);
                if (result)
                {
                  v51 = v24;
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                  v24 = v51;
                }
              }
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
              *(_DWORD *)(a2 + 40) = 0;
              *(_OWORD *)a2 = v55;
              if (*(_DWORD *)(a2 + 24) > 0x40u)
              {
                v31 = v24;
                result = *(_QWORD *)(a2 + 16);
                if (result)
                {
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                  v32 = *(_DWORD *)(a2 + 40);
                  *(_QWORD *)(a2 + 16) = v31;
                  *(_DWORD *)(a2 + 24) = v23;
                  if (v32 >= 0x41)
                  {
                    result = *(_QWORD *)(a2 + 32);
                    if (result)
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                  }
                  goto LABEL_19;
                }
                *(_QWORD *)(a2 + 16) = v24;
              }
              else
              {
                *(_QWORD *)(a2 + 16) = v24;
              }
              *(_DWORD *)(a2 + 24) = v23;
LABEL_19:
              *(_QWORD *)(a2 + 32) = v26;
              *(_DWORD *)(a2 + 40) = v25;
              return result;
            }
            *(_QWORD *)(a3 + 16) = v20;
          }
          else
          {
            *(_QWORD *)(a3 + 16) = v20;
          }
          *(_DWORD *)(a3 + 24) = v19;
          goto LABEL_14;
        }
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
      else
      {
        *(_QWORD *)(a4 + 16) = v16;
        *(_DWORD *)(a4 + 24) = v15;
      }
      v18 = v48;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1C4F716C8(uint64_t result, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  v3 = *a2;
  if (*a2 >= *(_QWORD *)result
    && (*(_QWORD *)result < v3
     || *(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    if (*(_QWORD *)a3 < v3
      || v3 >= *(_QWORD *)a3
      && *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF8))
    {
      v91 = *(_OWORD *)a2;
      v8 = *((_DWORD *)a2 + 6);
      v9 = a2[2];
      *((_DWORD *)a2 + 6) = 0;
      v10 = *((_DWORD *)a2 + 10);
      v11 = a2[4];
      *((_DWORD *)a2 + 10) = 0;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = *(_QWORD *)(a3 + 16);
      *((_DWORD *)a2 + 6) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = 0;
      if (*((_DWORD *)a2 + 10) >= 0x41u)
      {
        v23 = a2[4];
        if (v23)
        {
          v66 = result;
          v74 = a2;
          v83 = a3;
          v47 = v10;
          v57 = v11;
          v37 = v8;
          v31 = v9;
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
          v9 = v31;
          v8 = v37;
          v11 = v57;
          result = v66;
          v10 = v47;
          a2 = v74;
          a3 = v83;
        }
      }
      a2[4] = *(_QWORD *)(a3 + 32);
      *((_DWORD *)a2 + 10) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = 0;
      *(_OWORD *)a3 = v91;
      if (*(_DWORD *)(a3 + 24) > 0x40u)
      {
        v32 = v9;
        v38 = v8;
        v58 = v11;
        v67 = result;
        v48 = v10;
        v75 = a2;
        v84 = a3;
        v24 = *(_QWORD *)(a3 + 16);
        if (v24)
        {
          MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
          a2 = v75;
          a3 = v84;
          v25 = *(_DWORD *)(v84 + 40);
          *(_QWORD *)(v84 + 16) = v32;
          *(_DWORD *)(v84 + 24) = v38;
          v22 = v25 >= 0x41;
          v11 = v58;
          result = v67;
          v10 = v48;
          if (v22 && *(_QWORD *)(v84 + 32))
          {
            MEMORY[0x1CAA32F9C](*(_QWORD *)(v84 + 32), 0x1000C8000313F17);
            v11 = v58;
            result = v67;
            v10 = v48;
            a2 = v75;
            a3 = v84;
          }
        }
        else
        {
          *(_QWORD *)(a3 + 16) = v9;
          *(_DWORD *)(a3 + 24) = v8;
          result = v67;
        }
      }
      else
      {
        *(_QWORD *)(a3 + 16) = v9;
        *(_DWORD *)(a3 + 24) = v8;
      }
      *(_QWORD *)(a3 + 32) = v11;
      *(_DWORD *)(a3 + 40) = v10;
      if (*a2 < *(_QWORD *)result
        || *(_QWORD *)result >= *a2
        && *(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v92 = *(_OWORD *)result;
        v12 = *(_DWORD *)(result + 24);
        v13 = *(_QWORD *)(result + 16);
        *(_DWORD *)(result + 24) = 0;
        v14 = *(_DWORD *)(result + 40);
        v15 = *(_QWORD *)(result + 32);
        *(_DWORD *)(result + 40) = 0;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_QWORD *)(result + 16) = a2[2];
        *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = 0;
        if (*(_DWORD *)(result + 40) >= 0x41u)
        {
          v28 = *(_QWORD *)(result + 32);
          if (v28)
          {
            v69 = result;
            v78 = a2;
            v61 = v14;
            v87 = v15;
            v51 = v12;
            v41 = v13;
            MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
            v13 = v41;
            v12 = v51;
            v14 = v61;
            a2 = v78;
            v15 = v87;
            result = v69;
          }
        }
        *(_QWORD *)(result + 32) = a2[4];
        *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 10);
        *((_DWORD *)a2 + 10) = 0;
        *(_OWORD *)a2 = v92;
        if (*((_DWORD *)a2 + 6) > 0x40u)
        {
          v42 = v13;
          v52 = v12;
          v88 = v15;
          v62 = v14;
          v79 = a2;
          result = a2[2];
          if (result)
          {
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            a2 = v79;
            v15 = v88;
            v29 = *((_DWORD *)v79 + 10);
            v79[2] = v42;
            *((_DWORD *)v79 + 6) = v52;
            v22 = v29 >= 0x41;
            v14 = v62;
            if (v22)
            {
              result = v79[4];
              if (result)
              {
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                a2 = v79;
                v15 = v88;
                v14 = v62;
              }
            }
          }
          else
          {
            a2[2] = v13;
            *((_DWORD *)a2 + 6) = v12;
          }
        }
        else
        {
          a2[2] = v13;
          *((_DWORD *)a2 + 6) = v12;
        }
        a2[4] = v15;
        *((_DWORD *)a2 + 10) = v14;
      }
    }
    return result;
  }
  if (*(_QWORD *)a3 < v3
    || v3 >= *(_QWORD *)a3
    && *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF8))
  {
    v90 = *(_OWORD *)result;
    v4 = *(_DWORD *)(result + 24);
    v5 = *(_QWORD *)(result + 16);
    *(_DWORD *)(result + 24) = 0;
    v6 = *(_DWORD *)(result + 40);
    v7 = *(_QWORD *)(result + 32);
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = 0;
    if (*(_DWORD *)(result + 40) >= 0x41u)
    {
      v20 = *(_QWORD *)(result + 32);
      if (v20)
      {
        v65 = result;
        v81 = a3;
        v55 = v6;
        v72 = v7;
        v45 = v4;
        v35 = v5;
        MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
        v5 = v35;
        v4 = v45;
        v6 = v55;
        v7 = v72;
        a3 = v81;
        result = v65;
      }
    }
    *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 32);
    *(_DWORD *)(result + 40) = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = 0;
    *(_OWORD *)a3 = v90;
    if (*(_DWORD *)(a3 + 24) <= 0x40u)
    {
      *(_QWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 24) = v4;
LABEL_27:
      *(_QWORD *)(a3 + 32) = v7;
      *(_DWORD *)(a3 + 40) = v6;
      return result;
    }
    v36 = v5;
    v46 = v4;
    v73 = v7;
    v56 = v6;
    v82 = a3;
    result = *(_QWORD *)(a3 + 16);
    if (!result)
    {
      *(_QWORD *)(a3 + 16) = v5;
      v18 = v4;
      goto LABEL_26;
    }
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v7 = v73;
    a3 = v82;
    v21 = *(_DWORD *)(v82 + 40);
    *(_QWORD *)(v82 + 16) = v36;
    *(_DWORD *)(v82 + 24) = v46;
    v22 = v21 >= 0x41;
    v6 = v56;
    if (!v22)
      goto LABEL_27;
    result = *(_QWORD *)(v82 + 32);
    if (!result)
      goto LABEL_27;
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v7 = v73;
    v6 = v56;
LABEL_73:
    a3 = v82;
    goto LABEL_27;
  }
  v93 = *(_OWORD *)result;
  v16 = *(_DWORD *)(result + 24);
  v17 = *(_QWORD *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  v6 = *(_DWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = a2[2];
  *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  if (*(_DWORD *)(result + 40) >= 0x41u)
  {
    v26 = *(_QWORD *)(result + 32);
    if (v26)
    {
      v68 = result;
      v76 = a2;
      v85 = a3;
      v49 = v6;
      v59 = v7;
      v39 = v16;
      v33 = v17;
      MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
      v17 = v33;
      v16 = v39;
      v7 = v59;
      result = v68;
      v6 = v49;
      a2 = v76;
      a3 = v85;
    }
  }
  *(_QWORD *)(result + 32) = a2[4];
  *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = 0;
  *(_OWORD *)a2 = v93;
  if (*((_DWORD *)a2 + 6) > 0x40u)
  {
    v34 = v17;
    v40 = v16;
    v60 = v7;
    v50 = v6;
    v77 = a2;
    v86 = a3;
    result = a2[2];
    if (result)
    {
      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      a2 = v77;
      a3 = v86;
      v27 = *((_DWORD *)v77 + 10);
      v77[2] = v34;
      *((_DWORD *)v77 + 6) = v40;
      v22 = v27 >= 0x41;
      v6 = v50;
      v7 = v60;
      if (v22)
      {
        result = v77[4];
        if (result)
        {
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17, v86);
          v7 = v60;
          v6 = v50;
          a2 = v77;
          a3 = v86;
        }
      }
    }
    else
    {
      a2[2] = v17;
      *((_DWORD *)a2 + 6) = v16;
    }
  }
  else
  {
    a2[2] = v17;
    *((_DWORD *)a2 + 6) = v16;
  }
  a2[4] = v7;
  *((_DWORD *)a2 + 10) = v6;
  if (*(_QWORD *)a3 < *a2
    || *a2 >= *(_QWORD *)a3
    && *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF8))
  {
    v94 = *(_OWORD *)a2;
    v18 = *((_DWORD *)a2 + 6);
    v19 = a2[2];
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 10) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = *(_QWORD *)(a3 + 16);
    *((_DWORD *)a2 + 6) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = 0;
    if (*((_DWORD *)a2 + 10) >= 0x41u)
    {
      result = a2[4];
      if (result)
      {
        v80 = a2;
        v89 = a3;
        v53 = v6;
        v63 = v7;
        v70 = v18;
        v43 = v19;
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        v19 = v43;
        v18 = v70;
        v7 = v63;
        v6 = v53;
        a2 = v80;
        a3 = v89;
      }
    }
    a2[4] = *(_QWORD *)(a3 + 32);
    *((_DWORD *)a2 + 10) = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = 0;
    *(_OWORD *)a3 = v94;
    if (*(_DWORD *)(a3 + 24) <= 0x40u)
    {
      *(_QWORD *)(a3 + 16) = v19;
LABEL_26:
      *(_DWORD *)(a3 + 24) = v18;
      goto LABEL_27;
    }
    v44 = v19;
    v71 = v18;
    v64 = v7;
    v54 = v6;
    v82 = a3;
    result = *(_QWORD *)(a3 + 16);
    if (!result)
    {
      *(_QWORD *)(a3 + 16) = v19;
      *(_DWORD *)(a3 + 24) = v18;
      goto LABEL_27;
    }
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    a3 = v82;
    v30 = *(_DWORD *)(v82 + 40);
    *(_QWORD *)(v82 + 16) = v44;
    *(_DWORD *)(v82 + 24) = v71;
    v22 = v30 >= 0x41;
    v6 = v54;
    v7 = v64;
    if (!v22)
      goto LABEL_27;
    result = *(_QWORD *)(v82 + 32);
    if (!result)
      goto LABEL_27;
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v7 = v64;
    v6 = v54;
    goto LABEL_73;
  }
  return result;
}

BOOL sub_1C4F71F08(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 48);
      v7 = *(_QWORD *)(a2 - 48);
      if (v7 >= *(_QWORD *)a1
        && (*(_QWORD *)a1 < v7
         || *(_QWORD *)(*(_QWORD *)(a2 - 40) & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)))
      {
        return result;
      }
      v79 = *(_OWORD *)a1;
      v8 = *(_DWORD *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = 0;
      v10 = *(_DWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = 0;
      *(_OWORD *)a1 = *v6;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 32);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 24);
      *(_DWORD *)(a2 - 24) = 0;
      if (*(_DWORD *)(a1 + 40) >= 0x41u)
      {
        v33 = *(_QWORD *)(a1 + 32);
        if (v33)
        {
          v77 = v11;
          v71 = v8;
          v62 = v9;
          MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
          v9 = v62;
          v6 = (_OWORD *)(a2 - 48);
          v8 = v71;
          v11 = v77;
        }
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 16);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = 0;
      *v6 = v79;
      if (*(_DWORD *)(a2 - 24) > 0x40u)
      {
        v34 = v9;
        v72 = v8;
        v78 = v11;
        v35 = *(_QWORD *)(a2 - 32);
        if (v35)
        {
          MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
          v36 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 32) = v34;
          *(_DWORD *)(a2 - 24) = v72;
          v37 = v36 >= 0x41;
          v11 = v78;
          if (!v37)
            goto LABEL_6;
          v38 = *(_QWORD *)(a2 - 16);
          if (!v38)
            goto LABEL_6;
          MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
        }
        else
        {
          *(_QWORD *)(a2 - 32) = v9;
          *(_DWORD *)(a2 - 24) = v8;
        }
        v11 = v78;
      }
      else
      {
        *(_QWORD *)(a2 - 32) = v9;
        *(_DWORD *)(a2 - 24) = v8;
      }
LABEL_6:
      *(_QWORD *)(a2 - 16) = v11;
      *(_DWORD *)(a2 - 8) = v10;
      return 1;
    case 3uLL:
      sub_1C4F716C8(a1, (unint64_t *)(a1 + 48), a2 - 48);
      return 1;
    case 4uLL:
      sub_1C4F72420(a1, (__int128 *)(a1 + 48), a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      sub_1C4F710E0(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v12 = (unint64_t *)(a1 + 96);
      sub_1C4F716C8(a1, (unint64_t *)(a1 + 48), a1 + 96);
      v13 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      while (2)
      {
        v16 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 >= *v12)
        {
          if (*v12 < v16)
            goto LABEL_33;
          v17 = *(_QWORD *)(v13 + 8);
          v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
          if (*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(v12[1] & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_33;
        }
        else
        {
          v17 = *(_QWORD *)(v13 + 8);
          v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
        }
        v19 = 0;
        v20 = *(_DWORD *)(v13 + 24);
        v21 = *(_QWORD *)(v13 + 16);
        *(_DWORD *)(v13 + 24) = 0;
        v22 = *(_DWORD *)(v13 + 40);
        v23 = *(_QWORD *)(v13 + 32);
        v24 = v14;
        *(_DWORD *)(v13 + 40) = 0;
        while (1)
        {
          v25 = a1 + v24;
          *(_OWORD *)(a1 + v24 + 144) = *(_OWORD *)(a1 + v24 + 96);
          if (v19 >= 0x41)
          {
            v28 = *(_QWORD *)(v25 + 160);
            if (v28)
            {
              v48 = a1 + v24;
              v73 = v13;
              v58 = v14;
              v67 = v15;
              v41 = v17;
              v43 = v16;
              v63 = v23;
              v55 = v20;
              v52 = v21;
              v45 = v18;
              v39 = v24;
              MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
              v18 = v45;
              v25 = v48;
              v24 = v39;
              v17 = v41;
              v21 = v52;
              v20 = v55;
              v14 = v58;
              v23 = v63;
              v16 = v43;
              v15 = v67;
              v13 = v73;
            }
          }
          *(_QWORD *)(v25 + 160) = *(_QWORD *)(v25 + 112);
          *(_DWORD *)(v25 + 168) = *(_DWORD *)(v25 + 120);
          *(_DWORD *)(v25 + 120) = 0;
          if (*(_DWORD *)(v25 + 184) >= 0x41u)
          {
            v29 = *(_QWORD *)(v25 + 176);
            if (v29)
            {
              v49 = v25;
              v74 = v13;
              v59 = v14;
              v68 = v15;
              v42 = v17;
              v44 = v16;
              v64 = v23;
              v56 = v20;
              v53 = v21;
              v46 = v18;
              v40 = v24;
              MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
              v18 = v46;
              v25 = v49;
              v24 = v40;
              v17 = v42;
              v21 = v53;
              v20 = v56;
              v14 = v59;
              v23 = v64;
              v16 = v44;
              v15 = v68;
              v13 = v74;
            }
          }
          v26 = (_QWORD *)(a1 + v24);
          *(_QWORD *)(v25 + 176) = *(_QWORD *)(a1 + v24 + 128);
          *(_DWORD *)(v25 + 184) = *(_DWORD *)(a1 + v24 + 136);
          *(_DWORD *)(a1 + v24 + 136) = 0;
          if (v24 == -96)
          {
            v30 = a1;
            goto LABEL_30;
          }
          v27 = v26[6];
          if (v16 >= v27 && (v27 < v16 || *v18 >= *(_QWORD *)(v26[7] & 0xFFFFFFFFFFFFFFF8)))
            break;
          v19 = *(_DWORD *)(v25 + 120);
          v24 -= 48;
        }
        v30 = a1 + v24 + 96;
LABEL_30:
        *(_QWORD *)v30 = v16;
        *(_QWORD *)(v30 + 8) = v17;
        if (*(_DWORD *)(v30 + 24) >= 0x41u)
        {
          v31 = v26[14];
          if (v31)
          {
            v75 = v13;
            v60 = v14;
            v69 = v15;
            v65 = v23;
            v57 = v20;
            v50 = v30;
            v54 = v21;
            v47 = (_QWORD *)(a1 + v24);
            MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
            v26 = v47;
            v30 = v50;
            v21 = v54;
            v20 = v57;
            v14 = v60;
            v23 = v65;
            v15 = v69;
            v13 = v75;
          }
        }
        v26[14] = v21;
        *(_DWORD *)(v30 + 24) = v20;
        if (*(_DWORD *)(v30 + 40) >= 0x41u)
        {
          v32 = *(_QWORD *)(v30 + 32);
          if (v32)
          {
            v76 = v13;
            v61 = v14;
            v70 = v15;
            v66 = v23;
            v51 = v30;
            MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
            v30 = v51;
            v14 = v61;
            v23 = v66;
            v15 = v70;
            v13 = v76;
          }
        }
        *(_QWORD *)(v30 + 32) = v23;
        *(_DWORD *)(v30 + 40) = v22;
        if (++v15 != 8)
        {
LABEL_33:
          v12 = (unint64_t *)v13;
          v14 += 48;
          v13 += 48;
          if (v13 == a2)
            return 1;
          continue;
        }
        return v13 + 48 == a2;
      }
  }
}

uint64_t sub_1C4F72420(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  result = sub_1C4F716C8(a1, (unint64_t *)a2, a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3
    || *(_QWORD *)a3 >= *(_QWORD *)a4
    && *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v43 = *(_OWORD *)a3;
    v9 = *(_DWORD *)(a3 + 24);
    v10 = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(a3 + 24) = 0;
    v11 = *(_DWORD *)(a3 + 40);
    v12 = *(_QWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 40) = 0;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = 0;
    if (*(_DWORD *)(a3 + 40) >= 0x41u)
    {
      result = *(_QWORD *)(a3 + 32);
      if (result)
      {
        v32 = v11;
        v37 = v12;
        v28 = v9;
        v26 = v10;
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        v10 = v26;
        v9 = v28;
        v12 = v37;
        v11 = v32;
      }
    }
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 40) = 0;
    *(_OWORD *)a4 = v43;
    if (*(_DWORD *)(a4 + 24) > 0x40u)
    {
      v27 = v10;
      v29 = v9;
      v38 = v12;
      v33 = v11;
      result = *(_QWORD *)(a4 + 16);
      if (result)
      {
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        v21 = *(_DWORD *)(a4 + 40);
        *(_QWORD *)(a4 + 16) = v27;
        *(_DWORD *)(a4 + 24) = v29;
        v22 = v21 >= 0x41;
        v11 = v33;
        v12 = v38;
        if (v22)
        {
          result = *(_QWORD *)(a4 + 32);
          if (result)
          {
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            v12 = v38;
            v11 = v33;
          }
        }
      }
      else
      {
        *(_QWORD *)(a4 + 16) = v10;
        *(_DWORD *)(a4 + 24) = v9;
      }
    }
    else
    {
      *(_QWORD *)(a4 + 16) = v10;
      *(_DWORD *)(a4 + 24) = v9;
    }
    *(_QWORD *)(a4 + 32) = v12;
    *(_DWORD *)(a4 + 40) = v11;
    if (*(_QWORD *)a3 < *(_QWORD *)a2
      || *(_QWORD *)a2 >= *(_QWORD *)a3
      && *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF8))
    {
      v44 = *a2;
      v13 = *((_DWORD *)a2 + 6);
      v14 = *((_QWORD *)a2 + 2);
      *((_DWORD *)a2 + 6) = 0;
      v15 = *((_DWORD *)a2 + 10);
      v16 = *((_QWORD *)a2 + 4);
      *((_DWORD *)a2 + 10) = 0;
      *a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = *(_QWORD *)(a3 + 16);
      *((_DWORD *)a2 + 6) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = 0;
      if (*((_DWORD *)a2 + 10) >= 0x41u)
      {
        result = *((_QWORD *)a2 + 4);
        if (result)
        {
          v39 = v16;
          v34 = v13;
          v30 = v14;
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
          v14 = v30;
          v13 = v34;
          v16 = v39;
        }
      }
      *((_QWORD *)a2 + 4) = *(_QWORD *)(a3 + 32);
      *((_DWORD *)a2 + 10) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = 0;
      *(_OWORD *)a3 = v44;
      if (*(_DWORD *)(a3 + 24) <= 0x40u)
      {
        *(_QWORD *)(a3 + 16) = v14;
        *(_DWORD *)(a3 + 24) = v13;
        goto LABEL_9;
      }
      v31 = v14;
      v35 = v13;
      v40 = v16;
      result = *(_QWORD *)(a3 + 16);
      if (result)
      {
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        v23 = *(_DWORD *)(a3 + 40);
        *(_QWORD *)(a3 + 16) = v31;
        *(_DWORD *)(a3 + 24) = v35;
        v16 = v40;
        if (v23 < 0x41 || (result = *(_QWORD *)(a3 + 32)) == 0)
        {
LABEL_9:
          *(_QWORD *)(a3 + 32) = v16;
          *(_DWORD *)(a3 + 40) = v15;
          if (*(_QWORD *)a2 >= *(_QWORD *)a1
            && (*(_QWORD *)a1 < *(_QWORD *)a2
             || *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF8) >= *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)))
          {
            return result;
          }
          v45 = *(_OWORD *)a1;
          v17 = *(_DWORD *)(a1 + 24);
          v18 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = 0;
          v19 = *(_DWORD *)(a1 + 40);
          v20 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          *(_OWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
          *((_DWORD *)a2 + 6) = 0;
          if (*(_DWORD *)(a1 + 40) >= 0x41u)
          {
            result = *(_QWORD *)(a1 + 32);
            if (result)
            {
              v41 = v17;
              v36 = v18;
              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
              v18 = v36;
              v17 = v41;
            }
          }
          *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
          *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
          *((_DWORD *)a2 + 10) = 0;
          *a2 = v45;
          if (*((_DWORD *)a2 + 6) > 0x40u)
          {
            v24 = v18;
            v42 = v17;
            result = *((_QWORD *)a2 + 2);
            if (result)
            {
              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
              v25 = *((_DWORD *)a2 + 10);
              *((_QWORD *)a2 + 2) = v24;
              *((_DWORD *)a2 + 6) = v42;
              if (v25 >= 0x41)
              {
                result = *((_QWORD *)a2 + 4);
                if (result)
                  result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
              }
              goto LABEL_14;
            }
            *((_QWORD *)a2 + 2) = v18;
          }
          else
          {
            *((_QWORD *)a2 + 2) = v18;
          }
          *((_DWORD *)a2 + 6) = v17;
LABEL_14:
          *((_QWORD *)a2 + 4) = v20;
          *((_DWORD *)a2 + 10) = v19;
          return result;
        }
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
      else
      {
        *(_QWORD *)(a3 + 16) = v14;
        *(_DWORD *)(a3 + 24) = v13;
      }
      v16 = v40;
      goto LABEL_9;
    }
  }
  return result;
}

void sub_1C4F728B8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4F728CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E813B620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4F72904(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E813B620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4F72924(uint64_t a1)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::ScalarEvolutionAnalysis::Key, *(_QWORD *)(a1 + 16))+ 8;
}

void sub_1C4F72950()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4F72964(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813B668;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4F72998(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813B668;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4F729B4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1C4F729C0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4F729D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813B6B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4F72A08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813B6B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4F72A24(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::StackSafetyAnalysis::Key, a2)
       + 8;
}

void sub_1C4F72A50()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4F72A64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813B6F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4F72A98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813B6F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4F72AB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::StackSafetyInfoWrapperPass::ID)
       + 32;
}

uint64_t sub_1C4F72B08(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

double sub_1C4F72B24(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;

  v9 = 0;
  v4 = sub_1C4F72C0C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C4F72CA4(a1, v8);
    v9 = 0;
    sub_1C4F72C0C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(_QWORD *)&result = 0x400000000;
  v6[2] = 0x400000000;
  return result;
}

uint64_t sub_1C4F72C0C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C4F72CA4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if (!(_DWORD)v3)
LABEL_30:
      JUMPOUT(0x1CAA32FB4);
    v12 = 56 * v3;
    v13 = v4;
    while (1)
    {
      v14 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_24:
      v13 += 56;
      v12 -= 56;
      if (!v12)
        goto LABEL_30;
    }
    v23 = 0;
    sub_1C4F72C0C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v23);
    v15 = v23;
    *v23 = *(_QWORD *)v13;
    v16 = v15 + 3;
    v15[1] = v15 + 3;
    v15[2] = 0x400000000;
    v17 = *(void **)(v13 + 8);
    if ((_QWORD *)v13 == v15 || (v18 = *(_DWORD *)(v13 + 16)) == 0)
    {
LABEL_22:
      ++*(_DWORD *)(a1 + 8);
      if ((void *)(v13 + 24) != v17)
        free(v17);
      goto LABEL_24;
    }
    if ((void *)(v13 + 24) != v17)
    {
      v15[1] = v17;
      v19 = *(_DWORD *)(v13 + 20);
      *((_DWORD *)v15 + 4) = v18;
      *((_DWORD *)v15 + 5) = v19;
      *(_QWORD *)(v13 + 8) = v13 + 24;
      *(_DWORD *)(v13 + 20) = 0;
      v17 = (void *)(v13 + 24);
LABEL_21:
      *(_DWORD *)(v13 + 16) = 0;
      goto LABEL_22;
    }
    if (v18 < 5)
    {
      v20 = *(unsigned int *)(v13 + 16);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v15 + 1), (uint64_t)(v15 + 3), *(unsigned int *)(v13 + 16), 8);
      v20 = *(unsigned int *)(v13 + 16);
      if (!(_DWORD)v20)
      {
LABEL_20:
        *((_DWORD *)v15 + 4) = v18;
        v17 = *(void **)(v13 + 8);
        goto LABEL_21;
      }
      v17 = *(void **)(v13 + 8);
      v16 = (void *)v15[1];
    }
    memcpy(v16, v17, 8 * v20);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = 56 * v21;
    do
    {
      *result = -4096;
      result += 7;
      v22 -= 56;
    }
    while (v22);
  }
  return result;
}

void sub_1C4F72EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  const void **v9;
  _QWORD *v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  llvm::ConstantRange *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unsigned int v46;
  int v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int v60;
  const void **v61;
  void **v63;
  _QWORD *v64;
  int v65;
  int v66;
  int v67;
  const void **v68;
  uint64_t v69;
  void *v70;
  unsigned int v71;
  void *v72;
  unsigned int v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  int v77;

  v69 = a2;
  v3 = *(_QWORD **)(a3 + 24);
  v64 = (_QWORD *)(a3 + 32);
  if (v3 != (_QWORD *)(a3 + 32))
  {
    v5 = 0;
    v6 = *(unsigned int *)(a3 + 48);
    v7 = dword_1ED7F42F8;
    v8 = (_QWORD *)(a1 + 8);
    v9 = (const void **)(a1 + 24);
    v68 = (const void **)(a1 + 40);
    v66 = dword_1ED7F42F8;
    do
    {
      v65 = v5;
      v10 = (_QWORD *)v3[12];
      if (v10 != v3 + 13)
      {
        v67 = 0;
        v11 = (void **)(v3 + 5);
        v63 = (void **)(v3 + 7);
        while (1)
        {
          v12 = (_QWORD *)*v8;
          if (!*v8)
            goto LABEL_16;
          v13 = v10[4];
          v14 = *((_DWORD *)v10 + 10);
          v15 = v8;
          do
          {
            v16 = v12[4];
            v17 = v16 >= v13;
            if (v16 >= v13)
              v18 = v12;
            else
              v18 = v12 + 1;
            if (v17)
              v15 = v12;
            v12 = (_QWORD *)*v18;
          }
          while (*v18);
          if (v15 == v8 || v15[4] > v13)
          {
LABEL_16:
            v71 = *(_DWORD *)(a1 + 32);
            if (v71 > 0x40)
            {
              v70 = (void *)operator new[]();
              memcpy(v70, *v9, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v70 = (void *)*v9;
            }
            v73 = *(_DWORD *)(a1 + 48);
            if (v73 <= 0x40)
              goto LABEL_19;
LABEL_56:
            v72 = (void *)operator new[]();
            memcpy(v72, *v68, (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
            goto LABEL_20;
          }
          v22 = v6;
          v25 = v15[9];
          v23 = v15 + 9;
          v24 = v25;
          if (!v25)
            goto LABEL_53;
          v26 = v23;
          do
          {
            v27 = *(_DWORD *)(v24 + 32);
            v28 = v27 >= v14;
            if (v27 >= v14)
              v29 = (uint64_t *)v24;
            else
              v29 = (uint64_t *)(v24 + 8);
            if (v28)
              v26 = (_QWORD *)v24;
            v24 = *v29;
          }
          while (*v29);
          if (v26 == v23 || *((_DWORD *)v26 + 8) > v14)
          {
LABEL_53:
            v71 = *(_DWORD *)(a1 + 32);
            if (v71 > 0x40)
            {
              v70 = (void *)operator new[]();
              memcpy(v70, *v9, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v70 = (void *)*v9;
            }
            v6 = v22;
            v73 = *(_DWORD *)(a1 + 48);
            v7 = v66;
            if (v73 <= 0x40)
            {
LABEL_19:
              v72 = (void *)*v68;
              goto LABEL_20;
            }
            goto LABEL_56;
          }
          v30 = (llvm::ConstantRange *)(v26 + 5);
          v31 = *((unsigned int *)v26 + 12);
          if (v31 >= 0x41)
          {
            v60 = *((_DWORD *)v26 + 12);
            v61 = (const void **)(v26 + 5);
            v35 = memcmp((const void *)v26[5], (const void *)v26[7], ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8);
            v30 = (llvm::ConstantRange *)(v26 + 5);
            if (!v35)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v61) == v60)
              {
                v71 = v60;
                v70 = (void *)operator new[]();
                memcpy(v70, *v61, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
LABEL_62:
                v73 = *((_DWORD *)v26 + 16);
                if (v73 > 0x40)
                {
                  v72 = (void *)operator new[]();
                  memcpy(v72, (const void *)v26[7], (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v72 = (void *)v26[7];
                }
                goto LABEL_64;
              }
              v38 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v61);
              v30 = (llvm::ConstantRange *)(v26 + 5);
              if (v38 == v60)
                goto LABEL_71;
            }
          }
          else
          {
            v32 = v26[5];
            v33 = v26[7];
            if (!(v33 | v32))
            {
              v71 = *((_DWORD *)v26 + 12);
              v70 = (void *)v32;
              goto LABEL_62;
            }
            if (v32 == v33)
            {
              v34 = !(_DWORD)v31 || v32 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
              if (v34)
              {
LABEL_71:
                v71 = *(_DWORD *)(a1 + 32);
                if (v71 > 0x40)
                {
                  v70 = (void *)operator new[]();
                  memcpy(v70, *v9, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v70 = (void *)*v9;
                }
                v73 = *(_DWORD *)(a1 + 48);
                v6 = v22;
                if (v73 > 0x40)
                {
                  v72 = (void *)operator new[]();
                  memcpy(v72, *v68, (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v72 = (void *)*v68;
                }
                goto LABEL_65;
              }
            }
          }
          sub_1C4F6CD40((uint64_t)&v70, v30, (llvm::ConstantRange *)(v10 + 6));
LABEL_64:
          v6 = v22;
LABEL_65:
          v7 = v66;
LABEL_20:
          if (llvm::ConstantRange::contains((llvm::ConstantRange *)(v3 + 5), (const llvm::ConstantRange *)&v70))
            goto LABEL_33;
          if ((int)v6 <= v7)
          {
            sub_1C4F6C800((unsigned int *)&v74, (uint64_t)(v3 + 5), (unsigned int *)&v70);
            if (*((_DWORD *)v3 + 12) >= 0x41u && *v11)
              MEMORY[0x1CAA32F9C](*v11, 0x1000C8000313F17);
            v3[5] = v74;
            *((_DWORD *)v3 + 12) = v75;
            v75 = 0;
            if (*((_DWORD *)v3 + 16) >= 0x41u && *v63)
            {
              MEMORY[0x1CAA32F9C](*v63, 0x1000C8000313F17);
              v39 = v75;
              v3[7] = v76;
              *((_DWORD *)v3 + 16) = v77;
              v77 = 0;
              if (v39 >= 0x41 && v74)
                MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
              goto LABEL_32;
            }
            v3[7] = v76;
            v19 = v77;
          }
          else
          {
            if (*((_DWORD *)v3 + 12) > 0x40u || *(_DWORD *)(a1 + 32) > 0x40u)
            {
              if (v11 != (void **)v9)
              {
                llvm::APInt::reallocate((uint64_t)(v3 + 5), *(_DWORD *)(a1 + 32));
                v36 = *((unsigned int *)v3 + 12);
                if (v36 <= 0x40)
                  *v11 = (void *)*v9;
                else
                  memcpy(*v11, *v9, ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              v3[5] = *(_QWORD *)(a1 + 24);
              *((_DWORD *)v3 + 12) = *(_DWORD *)(a1 + 32);
            }
            if (*((_DWORD *)v3 + 16) > 0x40u || *(_DWORD *)(a1 + 48) > 0x40u)
            {
              if (v63 != (void **)v68)
              {
                llvm::APInt::reallocate((uint64_t)v63, *(_DWORD *)(a1 + 48));
                v37 = *((unsigned int *)v3 + 16);
                if (v37 <= 0x40)
                  *v63 = (void *)*v68;
                else
                  memcpy(*v63, *v68, ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8);
              }
              goto LABEL_32;
            }
            v3[7] = *(_QWORD *)(a1 + 40);
            v19 = *(_DWORD *)(a1 + 48);
          }
          *((_DWORD *)v3 + 16) = v19;
LABEL_32:
          v67 = 1;
LABEL_33:
          if (v73 >= 0x41 && v72)
            MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
          if (v71 >= 0x41 && v70)
            MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
          v20 = (_QWORD *)v10[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v10[2];
              v34 = *v21 == (_QWORD)v10;
              v10 = v21;
            }
            while (!v34);
          }
          v10 = v21;
          if (v21 == v3 + 13)
            goto LABEL_104;
        }
      }
      v67 = 0;
LABEL_104:
      v40 = (_QWORD *)v3[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v3[2];
          v34 = *v41 == (_QWORD)v3;
          v3 = v41;
        }
        while (!v34);
      }
      v5 = v65 | v67;
      v3 = v41;
    }
    while (v41 != v64);
    if ((v5 & 1) != 0)
    {
      sub_1C4F72B24(a1 + 56, &v69);
      v43 = *(unsigned int *)(v42 + 16);
      if ((_DWORD)v43)
      {
        v44 = *(uint64_t **)(v42 + 8);
        v45 = &v44[v43];
        while (1)
        {
          v74 = 0;
          if ((sub_1C4EBC5C8(*(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 96), *v44, &v74) & 1) == 0)
            break;
LABEL_136:
          if (++v44 == v45)
            goto LABEL_140;
        }
        v46 = *(_DWORD *)(a1 + 96);
        v47 = *(_DWORD *)(a1 + 88);
        if (4 * v47 + 4 >= 3 * v46)
        {
          v46 *= 2;
        }
        else if (v46 + ~v47 - *(_DWORD *)(a1 + 92) > v46 >> 3)
        {
LABEL_116:
          v48 = v74;
          ++*(_DWORD *)(a1 + 88);
          if (*v48 != -4096)
            --*(_DWORD *)(a1 + 92);
          *v48 = *v44;
          v50 = *(uint64_t **)(a1 + 112);
          v49 = *(_QWORD *)(a1 + 120);
          if ((unint64_t)v50 >= v49)
          {
            v52 = *(_QWORD **)(a1 + 104);
            v53 = v50 - v52;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 61)
              abort();
            v55 = v49 - (_QWORD)v52;
            if (v55 >> 2 > v54)
              v54 = v55 >> 2;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
              v56 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              if (v56 >> 61)
                sub_1C4764EE4();
              v57 = (char *)operator new(8 * v56);
            }
            else
            {
              v57 = 0;
            }
            v58 = (uint64_t *)&v57[8 * v53];
            *v58 = *v44;
            v51 = v58 + 1;
            if (v50 != v52)
            {
              do
              {
                v59 = *--v50;
                *--v58 = v59;
              }
              while (v50 != v52);
              v50 = *(uint64_t **)(a1 + 104);
            }
            *(_QWORD *)(a1 + 104) = v58;
            *(_QWORD *)(a1 + 112) = v51;
            *(_QWORD *)(a1 + 120) = &v57[8 * v56];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *v50 = *v44;
            v51 = v50 + 1;
          }
          *(_QWORD *)(a1 + 112) = v51;
          goto LABEL_136;
        }
        sub_1C4EBC65C(a1 + 80, v46);
        v74 = 0;
        sub_1C4EBC5C8(*(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 96), *v44, &v74);
        goto LABEL_116;
      }
LABEL_140:
      ++*(_DWORD *)(a3 + 48);
    }
  }
}

uint64_t sub_1C4F7378C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;

  v1 = *a1;
  v2 = a1[1];
  v3 = (v2 - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    abort();
  v6 = (uint64_t)(a1 + 2);
  v7 = a1[2] - v1;
  if (v7 >> 5 > v4)
    v4 = v7 >> 5;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
    v8 = 0x3FFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  v20 = a1 + 2;
  if (v8 >> 58)
    sub_1C4764EE4();
  v9 = (char *)operator new(v8 << 6);
  v10 = (uint64_t)&v9[64 * v3];
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  v11 = &v9[64 * v8];
  *(_DWORD *)(v10 + 16) = 64;
  *(_QWORD *)(v10 + 8) = -1;
  *(_DWORD *)(v10 + 32) = 64;
  *(_QWORD *)(v10 + 24) = -1;
  v12 = v10 + 64;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  sub_1C4F6F404(v6, v2, v2, v1, v1, v10, v10);
  v13 = *(_OWORD *)a1;
  *a1 = v14;
  a1[1] = v12;
  v18 = v13;
  v15 = a1[2];
  a1[2] = (uint64_t)v11;
  v19 = v15;
  v17 = v13;
  sub_1C61B7D3C((uint64_t)&v17);
  return v12;
}

uint64_t sub_1C4F73898()
{
  int v1;
  int v2;
  int *v3;

  v3 = &v2;
  v1 = 1;
  v2 = 20;
  sub_1C61B7894(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED7F4278, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61B7960((char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F4338, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61B7A34((char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F43F8, &dword_1C475E000);
}

void llvm::SyncDependenceAnalysis::~SyncDependenceAnalysis(llvm::SyncDependenceAnalysis *this)
{
  sub_1C61B82EC((uint64_t)this + 88, *((_QWORD **)this + 12));
  sub_1C61B8128((uint64_t)this);
}

{
  sub_1C61B82EC((uint64_t)this + 88, *((_QWORD **)this + 12));
  sub_1C61B8128((uint64_t)this);
}

