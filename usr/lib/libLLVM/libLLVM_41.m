size_t **sub_1C5896F24(size_t **a1, size_t **a2, size_t **a3, size_t **a4, size_t **a5)
{
  size_t **result;
  size_t *v11;
  size_t *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  BOOL v16;
  size_t *v18;
  size_t *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  BOOL v23;
  size_t *v25;
  size_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  BOOL v30;
  size_t *v32;
  size_t *v33;
  size_t v34;
  size_t v35;
  size_t v36;

  result = sub_1C58974C4(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = **a5;
  v14 = **a4;
  if (v14 >= v13)
    v15 = **a5;
  else
    v15 = **a4;
  if (v15)
  {
    result = (size_t **)memcmp(v11 + 23, v12 + 23, v15);
    if ((result & 0x80000000) == 0)
    {
      v16 = (_DWORD)result || v13 == v14;
      if (v16 || v13 >= v14)
        return result;
    }
  }
  else if (v13 >= v14)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v12;
  v18 = *a4;
  v19 = *a3;
  v20 = **a4;
  v21 = **a3;
  if (v21 >= v20)
    v22 = **a4;
  else
    v22 = **a3;
  if (v22)
  {
    result = (size_t **)memcmp(v18 + 23, v19 + 23, v22);
    if ((result & 0x80000000) == 0)
    {
      v23 = (_DWORD)result || v20 == v21;
      if (v23 || v20 >= v21)
        return result;
    }
  }
  else if (v20 >= v21)
  {
    return result;
  }
  *a3 = v18;
  *a4 = v19;
  v25 = *a3;
  v26 = *a2;
  v27 = **a3;
  v28 = **a2;
  if (v28 >= v27)
    v29 = **a3;
  else
    v29 = **a2;
  if (v29)
  {
    result = (size_t **)memcmp(v25 + 23, v26 + 23, v29);
    if ((result & 0x80000000) == 0)
    {
      v30 = (_DWORD)result || v27 == v28;
      if (v30 || v27 >= v28)
        return result;
    }
  }
  else if (v27 >= v28)
  {
    return result;
  }
  *a2 = v25;
  *a3 = v26;
  v32 = *a2;
  v33 = *a1;
  v34 = **a2;
  v35 = **a1;
  if (v35 >= v34)
    v36 = **a2;
  else
    v36 = **a1;
  if (!v36)
  {
    if (v34 >= v35)
      return result;
    goto LABEL_54;
  }
  result = (size_t **)memcmp(v32 + 23, v33 + 23, v36);
  if ((result & 0x80000000) != 0 || !(_DWORD)result && v34 != v35 && v34 < v35)
  {
LABEL_54:
    *a1 = v32;
    *a2 = v33;
  }
  return result;
}

size_t **sub_1C58970B4(size_t **result, size_t **a2, size_t **a3)
{
  size_t **v5;
  size_t *v6;
  size_t *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  BOOL v11;
  size_t *v13;
  size_t v14;
  size_t v15;
  BOOL v16;
  size_t *v18;
  size_t v19;
  size_t v20;
  BOOL v21;
  size_t *v23;
  size_t v24;
  size_t v25;
  BOOL v26;
  BOOL v27;
  size_t *v28;
  size_t *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  BOOL v33;

  v5 = result;
  v6 = *a2;
  v7 = *result;
  v8 = **a2;
  v9 = **result;
  if (v9 >= v8)
    v10 = **a2;
  else
    v10 = **result;
  if (v10)
  {
    result = (size_t **)memcmp(v6 + 23, v7 + 23, v10);
    if ((result & 0x80000000) != 0)
      goto LABEL_29;
    v11 = (_DWORD)result || v8 == v9;
    if (!v11 && v8 < v9)
      goto LABEL_29;
LABEL_14:
    v13 = *a3;
    v14 = **a3;
    if (v8 >= v14)
      v15 = **a3;
    else
      v15 = v8;
    if (v15)
    {
      result = (size_t **)memcmp(v13 + 23, v6 + 23, v15);
      if ((result & 0x80000000) == 0)
      {
        v16 = (_DWORD)result || v14 == v8;
        if (v16 || v14 >= v8)
          return result;
      }
    }
    else if (v14 >= v8)
    {
      return result;
    }
    *a2 = v13;
    *a3 = v6;
    v28 = *a2;
    v29 = *v5;
    v30 = **a2;
    v31 = **v5;
    if (v31 >= v30)
      v32 = **a2;
    else
      v32 = **v5;
    if (v32)
    {
      result = (size_t **)memcmp(v28 + 23, v29 + 23, v32);
      if ((result & 0x80000000) == 0)
      {
        v33 = (_DWORD)result || v30 == v31;
        if (v33 || v30 >= v31)
          return result;
      }
    }
    else if (v30 >= v31)
    {
      return result;
    }
    *v5 = v28;
    *a2 = v29;
    return result;
  }
  if (v8 >= v9)
    goto LABEL_14;
LABEL_29:
  v18 = *a3;
  v19 = **a3;
  if (v8 >= v19)
    v20 = **a3;
  else
    v20 = v8;
  if (v20)
  {
    result = (size_t **)memcmp(v18 + 23, v6 + 23, v20);
    if ((result & 0x80000000) != 0)
      goto LABEL_57;
    v21 = (_DWORD)result || v19 == v8;
    if (!v21 && v19 < v8)
      goto LABEL_57;
  }
  else if (v19 < v8)
  {
LABEL_57:
    *v5 = v18;
LABEL_75:
    *a3 = v7;
    return result;
  }
  *v5 = v6;
  *a2 = v7;
  v23 = *a3;
  v24 = **a3;
  if (v9 >= v24)
    v25 = **a3;
  else
    v25 = v9;
  if (!v25)
  {
    if (v24 >= v9)
      return result;
    goto LABEL_74;
  }
  result = (size_t **)memcmp(v23 + 23, v7 + 23, v25);
  if ((result & 0x80000000) != 0
    || (!(_DWORD)result ? (v26 = v24 == v9) : (v26 = 1), !v26 ? (v27 = v24 >= v9) : (v27 = 1), !v27))
  {
LABEL_74:
    *a2 = v23;
    goto LABEL_75;
  }
  return result;
}

BOOL sub_1C589726C(size_t **a1, size_t **a2)
{
  size_t **v2;
  uint64_t v4;
  _BOOL8 result;
  size_t *v6;
  size_t *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  int v11;
  BOOL v12;
  size_t **v14;
  size_t **v15;
  uint64_t v16;
  int v17;
  size_t *v18;
  size_t *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  int v23;
  BOOL v24;
  size_t **v26;
  const void *v27;
  uint64_t v28;
  size_t *v29;
  size_t v30;
  size_t v31;
  int v32;
  BOOL v33;
  size_t **v35;
  size_t *v36;
  int v37;

  v2 = a2;
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *v6;
      v9 = **a1;
      if (v9 >= *v6)
        v10 = *v6;
      else
        v10 = **a1;
      if (v10)
      {
        v11 = memcmp(v6 + 23, v7 + 23, v10);
        if (v11 < 0)
          goto LABEL_61;
        v12 = v11 || v8 == v9;
        if (!v12 && v8 < v9)
          goto LABEL_61;
        return 1;
      }
      else if (v8 < v9)
      {
LABEL_61:
        *a1 = v6;
        *(v2 - 1) = v7;
        return 1;
      }
      return result;
    case 3:
      sub_1C58970B4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C58974C4(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C5896F24(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v14 = a1 + 2;
      sub_1C58970B4(a1, a1 + 1, a1 + 2);
      v15 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v16 = 0;
      v17 = 0;
      v35 = v2;
      while (2)
      {
        v18 = *v15;
        v19 = *v14;
        v20 = **v15;
        v21 = **v14;
        if (v21 >= v20)
          v22 = **v15;
        else
          v22 = **v14;
        if (v22)
        {
          v23 = memcmp(v18 + 23, v19 + 23, v22);
          if ((v23 & 0x80000000) == 0)
          {
            v24 = v23 || v20 == v21;
            if (v24 || v20 >= v21)
              goto LABEL_55;
          }
        }
        else if (v20 >= v21)
        {
          goto LABEL_55;
        }
        *v15 = v19;
        v26 = a1;
        if (v14 == a1)
          goto LABEL_54;
        v37 = v17;
        v36 = v18;
        v27 = v18 + 23;
        v28 = v16;
        while (2)
        {
          v29 = *(size_t **)((char *)a1 + v28 + 8);
          v30 = *v29;
          if (*v29 >= v20)
            v31 = v20;
          else
            v31 = *v29;
          if (v31)
          {
            v32 = memcmp(v27, v29 + 23, v31);
            if ((v32 & 0x80000000) == 0)
            {
              v33 = v32 || v20 == v30;
              if (v33 || v20 >= v30)
              {
                v26 = (size_t **)((char *)a1 + v28 + 16);
                goto LABEL_53;
              }
            }
LABEL_50:
            --v14;
            *(size_t **)((char *)a1 + v28 + 16) = v29;
            v28 -= 8;
            if (v28 == -16)
            {
              v26 = a1;
              goto LABEL_53;
            }
            continue;
          }
          break;
        }
        if (v20 < v30)
          goto LABEL_50;
        v26 = v14;
LABEL_53:
        v2 = v35;
        v18 = v36;
        v17 = v37;
LABEL_54:
        *v26 = v18;
        if (++v17 != 8)
        {
LABEL_55:
          v14 = v15;
          v16 += 8;
          if (++v15 == v2)
            return 1;
          continue;
        }
        return v15 + 1 == v2;
      }
  }
}

size_t **sub_1C58974C4(size_t **a1, size_t **a2, size_t **a3, size_t **a4)
{
  size_t **result;
  size_t *v9;
  size_t *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  BOOL v14;
  size_t *v16;
  size_t *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  BOOL v21;
  size_t *v23;
  size_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  BOOL v28;
  BOOL v29;

  result = sub_1C58970B4(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = **a4;
  v12 = **a3;
  if (v12 >= v11)
    v13 = **a4;
  else
    v13 = **a3;
  if (v13)
  {
    result = (size_t **)memcmp(v9 + 23, v10 + 23, v13);
    if ((result & 0x80000000) == 0)
    {
      v14 = (_DWORD)result || v11 == v12;
      if (v14 || v11 >= v12)
        return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  v16 = *a3;
  v17 = *a2;
  v18 = **a3;
  v19 = **a2;
  if (v19 >= v18)
    v20 = **a3;
  else
    v20 = **a2;
  if (v20)
  {
    result = (size_t **)memcmp(v16 + 23, v17 + 23, v20);
    if ((result & 0x80000000) == 0)
    {
      v21 = (_DWORD)result || v18 == v19;
      if (v21 || v18 >= v19)
        return result;
    }
  }
  else if (v18 >= v19)
  {
    return result;
  }
  *a2 = v16;
  *a3 = v17;
  v23 = *a2;
  v24 = *a1;
  v25 = **a2;
  v26 = **a1;
  if (v26 >= v25)
    v27 = **a2;
  else
    v27 = **a1;
  if (!v27)
  {
    if (v25 >= v26)
      return result;
    goto LABEL_46;
  }
  result = (size_t **)memcmp(v23 + 23, v24 + 23, v27);
  if ((result & 0x80000000) != 0
    || (!(_DWORD)result ? (v28 = v25 == v26) : (v28 = 1), !v28 ? (v29 = v25 >= v26) : (v29 = 1), !v29))
  {
LABEL_46:
    *a1 = v23;
    *a2 = v24;
  }
  return result;
}

char *sub_1C58975F8(uint64_t a1, llvm::PointerType *a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  _QWORD v7[4];
  __int16 v8;

  v8 = 261;
  v7[0] = a3;
  v7[1] = a4;
  v5 = llvm::Function::createWithDefaultAttr(a2, 7, 0, (uint64_t)v7, *(llvm::Module **)(a1 + 104));
  *((_DWORD *)v5 + 8) = *((_DWORD *)v5 + 8) & 0xFFFFFF3F | 0x80;
  *((_QWORD *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 37);
  if (*(_BYTE *)(a1 + 6))
    *((_QWORD *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 31);
  return v5;
}

uint64_t sub_1C58976A4(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C58976CC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BranchProbabilityAnalysis::Key, a2) + 8;
}

void sub_1C58976F8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C589770C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817DC60;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5897740(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817DC60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C589775C(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::TargetLibraryAnalysis::Key, a2)+ 8;
}

uint64_t sub_1C5897784()
{
  int v1;
  __int128 v2;
  int v3;

  *(_QWORD *)&v2 = "408*";
  v3 = 1;
  v1 = 2;
  sub_1C47AD050((uint64_t)&qword_1ED833820, 0, 0);
  qword_1ED8338A0 = 0;
  qword_1ED8338A8 = 0;
  qword_1ED8338C8 = 0;
  unk_1ED8338D0 = 0;
  qword_1ED8338C0 = 0;
  byte_1ED8338D8 = 0;
  unk_1ED8338B0 = 0;
  unk_1ED8338B8 = &unk_1E819E950;
  qword_1ED833820 = (uint64_t)&unk_1E819E480;
  qword_1ED8338E0 = (uint64_t)&unk_1E819E970;
  qword_1ED8338E8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED833900 = (uint64_t)&qword_1ED8338E8;
  sub_1C62AC9AC((const char **)&v2, &v3, &v1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED833820);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED833820, &dword_1C475E000);
  v3 = 1;
  *(_QWORD *)&v2 = "Make counter updates atomic";
  *((_QWORD *)&v2 + 1) = 27;
  sub_1C61B2D38((uint64_t)&unk_1ED833908, "gcov-atomic-counter", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED833908, &dword_1C475E000);
}

uint64_t sub_1C58978B4(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  _DWORD *v8;
  int v9;
  int v10;

  v3 = dword_1ED813558;
  *(_DWORD *)(a1 + 24) = dword_1ED813498;
  *(_DWORD *)(a1 + 28) = v3;
  *(_QWORD *)(a1 + 32) = -v3;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = *(_QWORD **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a2 + 504) + 4);
  *(_DWORD *)(a1 + 8) = v5;
  v10 = v5;
  if (v5 <= 63)
  {
    if (v5 <= 31)
    {
      switch(v5)
      {
        case 16:
          v6 = (_QWORD *)(*v4 + 1936);
          goto LABEL_9;
        case 8:
          v6 = (_QWORD *)(*v4 + 1912);
          goto LABEL_9;
        case 1:
          v6 = (_QWORD *)(*v4 + 1888);
          goto LABEL_9;
      }
    }
    else if (v5 == 32)
    {
      v6 = (_QWORD *)(*v4 + 1960);
      goto LABEL_9;
    }
  }
  else
  {
    if (v5 == 64)
    {
      v6 = (_QWORD *)(*v4 + 1984);
      goto LABEL_9;
    }
    if (v5 == 128)
    {
      v6 = (_QWORD *)(*v4 + 2008);
      goto LABEL_9;
    }
  }
  v8 = sub_1C5270984(*v4 + 2168, &v10);
  v6 = (_QWORD *)*((_QWORD *)v8 + 1);
  if (!v6)
  {
    v6 = (_QWORD *)sub_1C484358C(*v4 + 2040, 24, 3);
    v9 = v10;
    *v6 = v4;
    v6[2] = 0;
    v6[1] = (v9 << 8) | 0xDu;
    *((_QWORD *)v8 + 1) = v6;
  }
LABEL_9:
  *(_QWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t sub_1C5897A18(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v4;
  size_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  uint64_t ***v16;
  char *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ****v25;
  uint64_t ***v26;
  int v27;
  int v28;
  uint64_t ***v29;
  uint64_t **v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t ***v40;
  uint64_t v41;
  uint64_t **inited;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  char v51;
  const char *v52;
  size_t v53;
  uint64_t v54;
  std::string *v55;
  std::string::size_type v56;
  unsigned __int8 *v57;
  unint64_t v58;
  llvm::PointerType *v59;
  llvm::PointerType *inserted;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  llvm::PointerType *v65;
  llvm::PointerType *v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  void **v70;
  uint64_t *v71;
  unsigned __int8 *v72;
  unint64_t v73;
  uint64_t **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  size_t v78;
  void **v79;
  uint64_t *v80;
  unsigned __int8 *v81;
  unint64_t v82;
  uint64_t **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  void **v88;
  uint64_t *v89;
  unsigned __int8 *v90;
  unint64_t v91;
  uint64_t **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ***v95;
  uint64_t **v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t v99;
  llvm::UndefValue *v100;
  uint64_t v101;
  char v102;
  char v103;
  char *v104;
  char *v105;
  llvm::Value *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t *i;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  uint64_t v119;
  uint64_t **v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  llvm::Value **v127;
  llvm::Value **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  char *v133;
  llvm::APInt *v134;
  unsigned int v135;
  const llvm::APInt *v136;
  llvm::ConstantInt *v137;
  unsigned int v138;
  unint64_t v139;
  llvm::ValueHandleBase *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  int v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t **v147;
  uint64_t v148;
  unsigned __int8 *v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char *v162;
  unsigned __int8 **v163;
  int v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  uint64_t ***v168;
  uint64_t *v169;
  int v170;
  uint64_t *v171;
  int v172;
  uint64_t *v173;
  char v174[32];
  __int16 v175;
  std::string v176;
  __int16 v177;
  const void *__dst[2];
  char v179;
  __int16 v180;
  void *v181;
  uint64_t v182;
  _QWORD v183[2];
  uint64_t v184;
  char v185;
  void *v186;
  uint64_t v187;
  _BYTE v188[32];
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  void **v192;
  void **v193;
  uint64_t v194;
  int v195;
  __int16 v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  void *v201;
  void *__p[2];
  uint64_t v203;
  __int16 v204;
  uint64_t v205[3];
  uint64_t *v206;
  uint64_t v207;
  _QWORD v208[2];
  __int16 v209;
  char v210;
  uint64_t v211;
  uint64_t v212;

  v212 = *MEMORY[0x1E0C80C00];
  if (((_DWORD)a2[4] & 0xF) == 1)
    return 0;
  if (byte_1ED813A17 >= 0)
    v4 = &qword_1ED813A00;
  else
    v4 = (uint64_t *)qword_1ED813A00;
  if (byte_1ED813A17 >= 0)
    v5 = byte_1ED813A17 & 0x7F;
  else
    v5 = unk_1ED813A08;
  v6 = *((_DWORD *)a2 + 5);
  v7 = a2 >> 4;
  if ((v6 & 0x10000000) == 0)
  {
    v18 = 0;
    v17 = &byte_1C871356D;
    goto LABEL_17;
  }
  v8 = ***a2;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if (!(_DWORD)v10)
    goto LABEL_15;
  LODWORD(v11) = (v10 - 1) & (v7 ^ (a2 >> 9));
  v12 = (uint64_t ****)(v9 + 16 * v11);
  v13 = *v12;
  if (*v12 != a2)
  {
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == a2)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_16;
      }
    }
LABEL_15:
    v12 = (uint64_t ****)(v9 + 16 * v10);
  }
LABEL_16:
  v16 = v12[1];
  v19 = *v16;
  v17 = (char *)(v16 + 2);
  v18 = v19;
LABEL_17:
  if ((uint64_t **)v5 != v18)
    goto LABEL_20;
  if (v5)
  {
    result = memcmp(v4, v17, v5);
    if (!(_DWORD)result)
      return result;
LABEL_20:
    if ((v6 & 0x10000000) == 0)
    {
      v38 = 0;
      v39 = &byte_1C871356D;
      goto LABEL_46;
    }
    v21 = ***a2;
    v22 = *(_QWORD *)(v21 + 152);
    v23 = *(unsigned int *)(v21 + 168);
    if ((_DWORD)v23)
    {
      LODWORD(v24) = (v23 - 1) & (v7 ^ (a2 >> 9));
      v25 = (uint64_t ****)(v22 + 16 * v24);
      v26 = *v25;
      if (*v25 == a2)
      {
LABEL_28:
        v29 = v25[1];
        if ((unint64_t)*v29 < 0xA
          || ((v30 = v29[2], v31 = *((unsigned __int16 *)v29 + 12), v30 == (uint64_t **)0x6F72706D656D5F5FLL)
            ? (v32 = v31 == 24422)
            : (v32 = 0),
              !v32))
        {
          if ((_DWORD)v23)
          {
            LODWORD(v33) = (v23 - 1) & (v7 ^ (a2 >> 9));
            v34 = (uint64_t ****)(v22 + 16 * v33);
            v35 = *v34;
            if (*v34 == a2)
            {
LABEL_45:
              v40 = v34[1];
              v41 = (uint64_t)*v40;
              v39 = (char *)(v40 + 2);
              v38 = v41;
LABEL_46:
              v186 = v39;
              v187 = v38;
              if (llvm::StringRef::find((uint64_t *)&v186, " load]", 6uLL, 0) != -1)
              {
                inited = (uint64_t **)llvm::declareSanitizerInitFunction((uint64_t)a2[5], "__memprof_init", 0xEuLL, 0, 0);
                v44 = v43;
                v45 = a2[10];
                v46 = v45 ? (uint64_t)(v45 - 3) : 0;
                sub_1C4D8ADA0((uint64_t)&v186, (uint64_t **)v46, *(_QWORD *)(v46 + 48), 0, 0, 0);
                v209 = 257;
                sub_1C4774778((uint64_t *)&v186, inited, v44, 0, 0, (uint64_t)&v206, 0);
                if (v186 != v188)
                  free(v186);
              }
              v47 = 0;
              v168 = a2;
              v48 = (uint64_t)a2[5];
              v49 = *(uint64_t **)a1;
              v186 = v188;
              v187 = 0x200000000;
              v191 = v49;
              v192 = &v200;
              v193 = &v201;
              v194 = 0;
              v195 = 0;
              v196 = 512;
              v197 = 7;
              v50 = 1;
              v189 = 0;
              v190 = 0;
              v200 = &unk_1E8167888;
              v201 = &unk_1E8167A08;
              v198 = 0;
              v199 = 0;
              do
              {
                v51 = v50;
                if ((v50 & 1) != 0)
                  v52 = "load";
                else
                  v52 = "store";
                if ((v50 & 1) != 0)
                  v53 = 4;
                else
                  v53 = 5;
                v179 = v53;
                memcpy(__dst, v52, v53);
                *(_BYTE *)((unint64_t)__dst | v53) = 0;
                v54 = *(_QWORD *)(a1 + 16);
                v206 = v208;
                v208[0] = v54;
                v208[1] = v54;
                v207 = 0x300000002;
                v181 = v183;
                v182 = 0x200000000;
                sub_1C4848C0C((unsigned int *)&v181, 1uLL, v54);
                sub_1C4842EB8((const void **)&qword_1ED813918, __dst, (uint64_t)&v176);
                v55 = std::string::append(&v176, "N");
                v56 = v55->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                v203 = v56;
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                if (v203 >= 0)
                  v57 = (unsigned __int8 *)__p;
                else
                  v57 = (unsigned __int8 *)__p[0];
                if (v203 >= 0)
                  v58 = HIBYTE(v203) & 0x7F;
                else
                  v58 = (unint64_t)__p[1];
                v59 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v191 + 1576), v206, v207, 0);
                inserted = llvm::Module::getOrInsertFunction(v48, v57, v58, v59, 0);
                v61 = a1 + 16 * v47;
                *(_QWORD *)(v61 + 72) = inserted;
                *(_QWORD *)(v61 + 80) = v62;
                if (SHIBYTE(v203) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v176.__r_.__value_.__l.__data_);
                sub_1C4842EB8((const void **)&qword_1ED813918, __dst, (uint64_t)__p);
                if (v203 >= 0)
                  v63 = (unsigned __int8 *)__p;
                else
                  v63 = (unsigned __int8 *)__p[0];
                if (v203 >= 0)
                  v64 = HIBYTE(v203) & 0x7F;
                else
                  v64 = (unint64_t)__p[1];
                v65 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v191 + 1576), (uint64_t *)v181, v182, 0);
                v66 = llvm::Module::getOrInsertFunction(v48, v63, v64, v65, 0);
                v67 = a1 + 16 * v47;
                *(_QWORD *)(v67 + 40) = v66;
                *(_QWORD *)(v67 + 48) = v68;
                if (SHIBYTE(v203) < 0)
                  operator delete(__p[0]);
                if (v181 != v183)
                  free(v181);
                if (v206 != v208)
                  free(v206);
                if (v179 < 0)
                  operator delete((void *)__dst[0]);
                v50 = 0;
                v47 = 1;
              }
              while ((v51 & 1) != 0);
              if (byte_1ED81392F >= 0)
                v69 = byte_1ED81392F & 0x7F;
              else
                v69 = qword_1ED813920;
              sub_1C484371C((uint64_t)&v206, v69 + 7);
              if (v208[0] >= 0)
                v70 = (void **)&v206;
              else
                v70 = (void **)v206;
              if (v69)
              {
                if (byte_1ED81392F >= 0)
                  v71 = &qword_1ED813918;
                else
                  v71 = (uint64_t *)qword_1ED813918;
                memmove(v70, v71, v69);
              }
              strcpy((char *)v70 + v69, "memmove");
              if (v208[0] >= 0)
                v72 = (unsigned __int8 *)&v206;
              else
                v72 = (unsigned __int8 *)v206;
              if (v208[0] >= 0)
                v73 = HIBYTE(v208[0]) & 0x7F;
              else
                v73 = v207;
              v74 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              v75 = llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              v76 = llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              *(_QWORD *)(a1 + 104) = sub_1C62A98B0(v48, v72, v73, 0, v74, v75, v76, *(_QWORD *)(a1 + 16));
              *(_QWORD *)(a1 + 112) = v77;
              if (SHIBYTE(v208[0]) < 0)
                operator delete(v206);
              if (byte_1ED81392F >= 0)
                v78 = byte_1ED81392F & 0x7F;
              else
                v78 = qword_1ED813920;
              sub_1C484371C((uint64_t)&v206, v78 + 6);
              if (v208[0] >= 0)
                v79 = (void **)&v206;
              else
                v79 = (void **)v206;
              if (v78)
              {
                if (byte_1ED81392F >= 0)
                  v80 = &qword_1ED813918;
                else
                  v80 = (uint64_t *)qword_1ED813918;
                memmove(v79, v80, v78);
              }
              strcpy((char *)v79 + v78, "memcpy");
              if (v208[0] >= 0)
                v81 = (unsigned __int8 *)&v206;
              else
                v81 = (unsigned __int8 *)v206;
              if (v208[0] >= 0)
                v82 = HIBYTE(v208[0]) & 0x7F;
              else
                v82 = v207;
              v83 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              v84 = llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              v85 = llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              *(_QWORD *)(a1 + 120) = sub_1C62A98B0(v48, v81, v82, 0, v83, v84, v85, *(_QWORD *)(a1 + 16));
              *(_QWORD *)(a1 + 128) = v86;
              if (SHIBYTE(v208[0]) < 0)
                operator delete(v206);
              if (byte_1ED81392F >= 0)
                v87 = byte_1ED81392F & 0x7F;
              else
                v87 = qword_1ED813920;
              sub_1C484371C((uint64_t)&v206, v87 + 6);
              if (v208[0] >= 0)
                v88 = (void **)&v206;
              else
                v88 = (void **)v206;
              if (v87)
              {
                if (byte_1ED81392F >= 0)
                  v89 = &qword_1ED813918;
                else
                  v89 = (uint64_t *)qword_1ED813918;
                memmove(v88, v89, v87);
              }
              strcpy((char *)v88 + v87, "memset");
              if (v208[0] >= 0)
                v90 = (unsigned __int8 *)&v206;
              else
                v90 = (unsigned __int8 *)v206;
              if (v208[0] >= 0)
                v91 = HIBYTE(v208[0]) & 0x7F;
              else
                v91 = v207;
              v92 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              v93 = llvm::PointerType::get((llvm::PointerType *)(*v191 + 1912), 0);
              *(_QWORD *)(a1 + 136) = sub_1C62A98B0(v48, v90, v91, 0, v92, v93, *v191 + 1960, *(_QWORD *)(a1 + 16));
              *(_QWORD *)(a1 + 144) = v94;
              v95 = v168;
              if (SHIBYTE(v208[0]) < 0)
                operator delete(v206);
              if (v186 != v188)
                free(v186);
              v96 = v168[10];
              if (v96)
                v97 = v96 - 3;
              else
                v97 = 0;
              v98 = v97[6];
              if (v98)
                v99 = (uint64_t)(v98 - 3);
              else
                v99 = 0;
              sub_1C4773D54((uint64_t)&v186, v99, 0, 0, 0);
              v100 = llvm::Module::getOrInsertGlobal((uint64_t)v168[5], "__memprof_shadow_memory_dynamic_address", 0x27uLL, *(llvm::PointerType **)(a1 + 16));
              if (!llvm::Module::getPICLevel((llvm::Module *)v168[5]))
                *((_DWORD *)v100 + 8) |= 0x4000u;
              v101 = *(_QWORD *)(a1 + 16);
              LOWORD(v184) = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v189 + 56) + 40) + 272, v101);
              v103 = v102;
              v104 = (char *)operator new(0x60uLL);
              v105 = v104;
              v106 = (llvm::Value *)(v104 + 32);
              *((_QWORD *)v104 + 2) = 0;
              *((_QWORD *)v104 + 3) = v104 + 32;
              v209 = 257;
              *((_QWORD *)v104 + 4) = v101;
              *((_QWORD *)v104 + 5) = 0;
              *((_WORD *)v104 + 24) = 60;
              *((_DWORD *)v104 + 13) = 1;
              *(_OWORD *)(v104 + 56) = 0u;
              *(_OWORD *)(v104 + 72) = 0u;
              *((_DWORD *)v104 + 22) = 0;
              *(_QWORD *)v104 = v100;
              *((_QWORD *)v104 + 1) = 0;
              if (v100)
              {
                v109 = *((_QWORD *)v100 + 1);
                v108 = (_QWORD *)((char *)v100 + 8);
                v107 = v109;
                *((_QWORD *)v104 + 1) = v109;
                if (v109)
                  *(_QWORD *)(v107 + 16) = v104 + 8;
                *((_QWORD *)v104 + 2) = v108;
                *v108 = v104;
              }
              *((_WORD *)v104 + 25) = 2 * (v103 & 0x3F);
              v104[92] = 1;
              llvm::Value::setName((uint64_t ***)v104 + 4, (uint64_t)&v206);
              (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v193 + 2))(v193, v106, &v181, v189, v190);
              v110 = (char *)v186;
              if (!(_DWORD)v187)
              {
LABEL_156:
                *(_QWORD *)(a1 + 152) = v106;
                if (v110 != v188)
                  free(v110);
                v186 = v188;
                v187 = 0x1000000000;
                v111 = v168[10];
                if (v111 == (uint64_t **)(v168 + 9))
                  return 1;
                do
                {
                  v112 = v111 - 3;
                  if (!v111)
                    v112 = 0;
                  v113 = v112 + 5;
                  for (i = v112[6]; i != (uint64_t *)v113; i = (uint64_t *)i[1])
                  {
                    if (i)
                      v115 = (uint64_t)(i - 3);
                    else
                      v115 = 0;
                    sub_1C589937C((uint64_t)&v206, *(_QWORD *)(a1 + 152), v115);
                    if (v210 || (sub_1C4DE85D0(v115) & 1) != 0)
                    {
                      v116 = v187;
                      if (v187 >= (unint64_t)HIDWORD(v187))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v186, (uint64_t)v188, v187 + 1, 8);
                        v116 = v187;
                      }
                      *((_QWORD *)v186 + v116) = v115;
                      LODWORD(v187) = v187 + 1;
                    }
                  }
                  v111 = (uint64_t **)v111[1];
                }
                while (v111 != (uint64_t **)(v168 + 9));
                v117 = (uint64_t *)v186;
                if (!(_DWORD)v187)
                {
LABEL_234:
                  if (v117 != (uint64_t *)v188)
                    free(v117);
                  return 1;
                }
                v118 = 0;
                v169 = (uint64_t *)((char *)v186 + 8 * v187);
                while (1)
                {
                  v119 = *v117;
                  if ((dword_1ED813798 & 0x80000000) == 0
                    && (dword_1ED813858 & 0x80000000) == 0
                    && (v118 < dword_1ED813798 || v118 > dword_1ED813858))
                  {
                    goto LABEL_232;
                  }
                  v171 = v117;
                  sub_1C589937C((uint64_t)&v181, *(_QWORD *)(a1 + 152), v119);
                  v170 = v118;
                  if (!v185)
                    break;
                  v121 = v95[5];
                  v173 = (uint64_t *)v181;
                  if (byte_1ED813618
                    || *((_BYTE *)llvm::getUnderlyingObject((llvm *)v181, (const llvm::Value *)6) + 16) != 59)
                  {
                    v122 = v184;
                    if (v184)
                    {
                      v123 = (unsigned int *)v183[0];
                      v124 = v183[0];
                      if ((*(_DWORD *)(v183[0] + 8) & 0xFE) == 0x12)
                        v124 = **(_QWORD **)(v183[0] + 16);
                      v172 = v182;
                      sub_1C4768AD0((uint64_t)(v121 + 34), v124);
                      if ((_DWORD)v125 == 1)
                      v126 = v123[8];
                      v127 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 16), 0, 0);
                      if ((_DWORD)v126)
                      {
                        v128 = v127;
                        v129 = 0;
                        v130 = v122;
                        while (*(_BYTE *)(v122 + 16) == 10)
                        {
                          v131 = *(_QWORD *)(v130 - 32 * (*(_DWORD *)(v122 + 20) & 0x7FFFFFF));
                          if (v131)
                            v132 = *(_BYTE *)(v131 + 16) == 16;
                          else
                            v132 = 0;
                          v133 = (char *)v119;
                          if (!v132)
                            goto LABEL_209;
                          v134 = (llvm::APInt *)(v131 + 24);
                          v135 = *(_DWORD *)(v131 + 32);
                          if (v135 > 0x40)
                          {
                            v133 = (char *)v119;
                            if (llvm::APInt::countLeadingZerosSlowCase(v134) != v135)
                              goto LABEL_209;
                          }
                          else
                          {
                            v133 = (char *)v119;
                            if (*(_QWORD *)v134)
                              goto LABEL_209;
                          }
LABEL_211:
                          ++v129;
                          v130 += 32;
                          if (v126 == v129)
                            goto LABEL_231;
                        }
                        sub_1C4773D54((uint64_t)&v206, v119, 0, 0, 0);
                        v180 = 257;
                        v137 = *(llvm::ConstantInt **)(*(_QWORD *)v211 + 1984);
                        v138 = *(_DWORD *)(*(_QWORD *)v211 + 1992);
                        LODWORD(__p[1]) = v138 >> 8;
                        if (v138 >> 8 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)__p, v129, 0);
                        }
                        else
                        {
                          if (v138 <= 0xFF)
                            v139 = 0;
                          else
                            v139 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v138);
                          __p[0] = (void *)(v139 & v129);
                        }
                        v140 = llvm::ConstantInt::get(v137, (llvm::LLVMContext *)__p, v136);
                        if (LODWORD(__p[1]) >= 0x41 && __p[0])
                          MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
                        v141 = sub_1C4772EE0((uint64_t *)&v206, v122, (uint64_t)v140, (uint64_t)__dst);
                        v133 = sub_1C5EBFBC0((llvm::Value *)v141, (uint64_t *)v119, 0, 0, 0, 0, 0, 0);
                        if (v206 != v208)
                          free(v206);
LABEL_209:
                        sub_1C4773D54((uint64_t)&v206, (uint64_t)v133, 0, 0, 0);
                        __p[0] = v128;
                        __p[1] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 16), v129, 0);
                        v180 = 257;
                        v142 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v206, (llvm::GetElementPtrInst *)v123, v173, (llvm::Value *)__p, 2, (uint64_t)__dst);
                        sub_1C5899634((uint64_t **)a1, (uint64_t)v133, v142, v172 != 0);
                        if (v206 != v208)
                          free(v206);
                        goto LABEL_211;
                      }
                    }
                    else
                    {
                      sub_1C5899634((uint64_t **)a1, v119, (unsigned __int8 *)v173, v182);
                    }
                  }
LABEL_231:
                  v95 = v168;
                  v117 = v171;
                  v118 = v170;
LABEL_232:
                  ++v118;
                  if (++v117 == v169)
                  {
                    v117 = (uint64_t *)v186;
                    goto LABEL_234;
                  }
                }
                sub_1C4773D54((uint64_t)&v206, v119, 0, 0, 0);
                v143 = *(_DWORD *)(*(_QWORD *)(v119 - 32) + 36);
                if ((v143 - 196) >= 2)
                {
                  if (v143 == 199)
                  {
                    v147 = *(uint64_t ***)(a1 + 136);
                    v148 = *(_QWORD *)(a1 + 144);
                    v154 = *(unsigned __int8 **)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF));
                    v155 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v211 + 1912), 0);
                    v180 = 257;
                    v205[0] = (uint64_t)sub_1C5098D9C((uint64_t *)&v206, v154, v155, (uint64_t)__dst);
                    v156 = *(unsigned __int8 **)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF) + 32);
                    v157 = *(_QWORD *)v211 + 1960;
                    v204 = 257;
                    v153 = sub_1C4D8D514((uint64_t *)&v206, v156, v157, 0, (uint64_t)__p);
LABEL_228:
                    v205[1] = (uint64_t)v153;
                    v158 = *(unsigned __int8 **)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF) + 64);
                    v159 = *(_QWORD *)(a1 + 16);
                    v177 = 257;
                    v205[2] = (uint64_t)sub_1C4D8D514((uint64_t *)&v206, v158, v159, 0, (uint64_t)&v176);
                    v175 = 257;
                    sub_1C4774778((uint64_t *)&v206, v147, v148, v205, 3, (uint64_t)v174, 0);
LABEL_229:
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v119 + 40) + 40, (uint64_t ***)v119);
                    v160 = *(_QWORD *)(v119 + 24);
                    v161 = *(_QWORD **)(v119 + 32);
                    *v161 = v160;
                    *(_QWORD *)(v160 + 8) = v161;
                    *(_QWORD *)(v119 + 24) = 0;
                    *(_QWORD *)(v119 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v119);
                    if (v206 != v208)
                      free(v206);
                    goto LABEL_231;
                  }
                  if (v143 != 194)
                    goto LABEL_229;
                }
                v144 = v143 == 197;
                v145 = 120;
                if (v144)
                  v145 = 104;
                v146 = a1 + 104;
                if (!v144)
                  v146 = a1 + 120;
                v147 = *(uint64_t ***)(a1 + v145);
                v148 = *(_QWORD *)(v146 + 8);
                v149 = *(unsigned __int8 **)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF));
                v150 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v211 + 1912), 0);
                v180 = 257;
                v205[0] = (uint64_t)sub_1C5098D9C((uint64_t *)&v206, v149, v150, (uint64_t)__dst);
                v151 = *(unsigned __int8 **)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF) + 32);
                v152 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v211 + 1912), 0);
                v204 = 257;
                v153 = sub_1C5098D9C((uint64_t *)&v206, v151, v152, (uint64_t)__p);
                goto LABEL_228;
              }
              v162 = (char *)v186 + 16 * v187;
              v163 = (unsigned __int8 **)(v105 + 80);
              while (1)
              {
                v164 = *(_DWORD *)v110;
                v165 = (unsigned __int8 *)*((_QWORD *)v110 + 1);
                if (v165)
                {
                  if (!v164)
                  {
                    __dst[0] = *((const void **)v110 + 1);
                    llvm::MetadataTracking::track((uint64_t)__dst, v165, 2);
                    v166 = *v163;
                    goto LABEL_248;
                  }
                }
                else
                {
                  v166 = *v163;
                  if (!*v163 && (v105[55] & 0x20) == 0)
                    goto LABEL_245;
                  if (!v164)
                  {
                    __dst[0] = 0;
LABEL_248:
                    if (v166)
                      llvm::MetadataTracking::untrack((uint64_t)(v105 + 80), v166);
                    v167 = (unsigned __int8 *)__dst[0];
                    *v163 = (unsigned __int8 *)__dst[0];
                    if (v167)
                      llvm::MetadataTracking::retrack((uint64_t)__dst, v167, (uint64_t)(v105 + 80));
                    goto LABEL_245;
                  }
                }
                llvm::Value::setMetadata(v106, *(_DWORD *)v110, (llvm::MDNode *)v165);
LABEL_245:
                v110 += 16;
                if (v110 == v162)
                {
                  v110 = (char *)v186;
                  goto LABEL_156;
                }
              }
            }
            v36 = 1;
            while (v35 != (uint64_t ***)-4096)
            {
              v37 = v33 + v36++;
              v33 = v37 & (v23 - 1);
              v35 = *(uint64_t ****)(v22 + 16 * v33);
              if (v35 == a2)
              {
                v34 = (uint64_t ****)(v22 + 16 * v33);
                goto LABEL_45;
              }
            }
          }
          v34 = (uint64_t ****)(v22 + 16 * v23);
          goto LABEL_45;
        }
        return 0;
      }
      v27 = 1;
      while (v26 != (uint64_t ***)-4096)
      {
        v28 = v24 + v27++;
        v24 = v28 & (v23 - 1);
        v26 = *(uint64_t ****)(v22 + 16 * v24);
        if (v26 == a2)
        {
          v25 = (uint64_t ****)(v22 + 16 * v24);
          goto LABEL_28;
        }
      }
    }
    v25 = (uint64_t ****)(v22 + 16 * v23);
    goto LABEL_28;
  }
  return 0;
}

void llvm::ModuleMemProfilerPass::run(llvm::Module *a1@<X1>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;

  sub_1C5898B9C((uint64_t)__p, (uint64_t)a1);
  sub_1C5898C40((uint64_t)__p, a1);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  if (v5 < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C5898B9C(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD v5[4];
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 48) = dword_1ED813498;
  v3 = dword_1ED813558;
  *(_DWORD *)(a1 + 52) = dword_1ED813558;
  *(_QWORD *)(a1 + 56) = -v3;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = 260;
  v5[0] = a2 + 216;
  llvm::Triple::Triple((uint64_t)&v7, (llvm::Twine *)v5);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  return a1;
}

void sub_1C5898C40(uint64_t a1, llvm::Module *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  char *v11;
  void *__p[2];
  char v13;
  std::string v14;

  std::to_string(&v14, 1);
  v5 = byte_1ED8130D8;
  if (byte_1ED8130D8)
  {
    std::operator+<char>();
    v5 = v13;
    v4 = __p[1];
  }
  else
  {
    v13 = 0;
    LOBYTE(__p[0]) = 0;
  }
  v6 = v5 < 0;
  v7 = (unsigned __int8 *)__p;
  if (v5 < 0)
    v7 = (unsigned __int8 *)__p[0];
  v8 = v5 & 0x7F;
  if (v6)
    v8 = (unint64_t)v4;
  llvm::createSanitizerCtorAndInitFunctions(a2, (llvm::UndefValue *)"memprof.module_ctor", (llvm::UndefValue *)0x13, "__memprof_init", 0xEuLL, 0, 0, &v11, 0, 0, v7, v8);
  v9 = v11;
  *(_QWORD *)(a1 + 64) = v11;
  if (*(_DWORD *)(a1 + 36) == 40)
    v10 = 50;
  else
    v10 = 1;
  sub_1C5F50894("llvm.global_ctors", (uint64_t)a2, (uint64_t)v9, v10, 0);
  createProfileFileNameVar(a2);
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void llvm::initializeMemProfilerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71A8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5898DAC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71A8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5898DAC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "MemProfiler: profile memory allocations and accesses.";
  *(_QWORD *)(v2 + 8) = 53;
  *(_QWORD *)(v2 + 16) = "memprof";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5218;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5899230;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5898E3C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5218;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E817DCA8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F71A8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5898DAC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F71A8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeModuleMemProfilerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71B0);
  if (v2 != -1)
  {
    v5[0] = sub_1C5898F64;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71B0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5898F64(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "MemProfiler: profile memory allocations and accesses.ModulePass";
  *(_QWORD *)(v2 + 8) = 63;
  *(_QWORD *)(v2 + 16) = "memprof-module";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5219;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58992CC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5898FF4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5219;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817DD48;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F71B0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5898F64;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F71B0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void createProfileFileNameVar(llvm::Module *a1)
{
  uint64_t ModuleFlag;
  llvm::Value **String;
  _DWORD *v4;
  llvm::GlobalValue *v5;
  llvm::PointerType *v6;
  int v7;
  size_t *inserted;
  char *v9;
  __int16 v10;
  void *__p[2];
  char v12;
  __int16 v13;
  unsigned int v14;

  ModuleFlag = llvm::Module::getModuleFlag((uint64_t)a1, "MemProfProfileFilename", 0x16uLL);
  if (ModuleFlag && !*(_BYTE *)ModuleFlag)
  {
    String = llvm::ConstantDataArray::getString(*(_QWORD *)a1, (char *)(*(_QWORD *)(ModuleFlag + 8) + 24), **(llvm::Type ***)(ModuleFlag + 8), 1);
    v4 = operator new(0x78uLL);
    v5 = (llvm::GlobalValue *)(v4 + 8);
    v4[13] = v4[13] & 0x38000000 | 1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = v4 + 8;
    v6 = *String;
    __p[0] = "__memprof_profile_filename";
    v13 = 259;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v4 + 8), (uint64_t)a1, v6, 1, 4, (uint64_t)String, (uint64_t)__p, 0, 0, 0, 0);
    v10 = 260;
    v9 = (char *)a1 + 216;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v9);
    if (v14 > 9 || ((1 << v14) & 0x320) == 0)
    {
      v7 = v4[16];
      v4[16] = v7 & 0xFFFFFFF0;
      if ((v7 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v5) & 1) == 0)
        v4[16] |= 0x4000u;
      inserted = llvm::Module::getOrInsertComdat((uint64_t)a1, "__memprof_profile_filename", 0x1AuLL);
      llvm::GlobalObject::setComdat(v5, (llvm::Comdat *)inserted);
    }
    if (v12 < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_1C5899230()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5898E3C(v0);
}

void sub_1C589925C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5899280()
{
  return "MemProfilerFunctionPass";
}

uint64_t sub_1C5899290(uint64_t a1, uint64_t a2)
{
  _BYTE v4[160];

  sub_1C58978B4((uint64_t)v4, *(_QWORD *)(a2 + 40));
  return sub_1C5897A18((uint64_t)v4, (uint64_t ***)a2);
}

uint64_t sub_1C58992CC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5898FF4(v0);
}

void sub_1C58992F8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C589931C()
{
  return "ModuleMemProfiler";
}

uint64_t sub_1C5899330(uint64_t a1, llvm::Module *a2)
{
  void *__p[2];
  char v5;

  sub_1C5898B9C((uint64_t)__p, (uint64_t)a2);
  sub_1C5898C40((uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1C589937C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  if (a2 == a3)
    goto LABEL_27;
  v5 = *(unsigned __int8 *)(a3 + 16);
  if (!a3 || v5 != 60)
  {
    if (a3 && v5 == 61)
    {
      v6 = byte_1ED813258;
      if (byte_1ED813258)
      {
        v7 = 0;
        v9 = **(_QWORD **)(a3 - 64);
        LOBYTE(v8) = 1;
        v10 = 1 << ((unint64_t)*(unsigned __int16 *)(a3 + 18) >> 1);
        v11 = *(llvm::Value **)(a3 - 32);
        if (!v11)
          goto LABEL_27;
        goto LABEL_21;
      }
LABEL_28:
      *(_BYTE *)a1 = 0;
      goto LABEL_29;
    }
    if (a3 && v5 == 65)
    {
      v6 = byte_1ED813318;
      if (!byte_1ED813318)
        goto LABEL_28;
      v7 = 0;
      LODWORD(v10) = 0;
      v9 = **(_QWORD **)(a3 - 32);
      v11 = *(llvm::Value **)(a3 - 64);
    }
    else
    {
      if (!a3 || v5 != 64)
      {
        if (!a3)
          goto LABEL_27;
        if (v5 != 84)
          goto LABEL_27;
        v17 = *(_QWORD *)(a3 - 32);
        if (!v17 || *(_BYTE *)(v17 + 16) || *(_QWORD *)(v17 + 24) != *(_QWORD *)(a3 + 72))
          goto LABEL_27;
        v18 = *(_DWORD *)(v17 + 36);
        if (v18 == 185)
        {
          v6 = byte_1ED813198;
          if (!byte_1ED813198)
            goto LABEL_28;
          v8 = 0;
          v20 = -(uint64_t)(*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
          v21 = (uint64_t *)a3;
        }
        else
        {
          if (v18 != 187)
            goto LABEL_27;
          v6 = byte_1ED813258;
          if (!byte_1ED813258)
            goto LABEL_28;
          v19 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
          v20 = -v19;
          v21 = *(uint64_t **)(a3 - 32 * v19);
          v8 = 1;
        }
        v22 = a3 + 32 * v20;
        v11 = *(llvm::Value **)(v22 + 32 * v8);
        v9 = *v21;
        v23 = *(_QWORD *)(v22 + 32 * (v8 + 1));
        LODWORD(v10) = 1;
        if (v23 && *(_BYTE *)(v23 + 16) == 16)
        {
          v24 = (_QWORD *)(v23 + 24);
          if (*(_DWORD *)(v23 + 32) >= 0x41u)
            v24 = (_QWORD *)*v24;
          LODWORD(v10) = *(_DWORD *)v24;
        }
        v7 = *(_QWORD *)(v22 + 32 * (v8 | 2));
        if (!v11)
          goto LABEL_27;
        goto LABEL_21;
      }
      v6 = byte_1ED813318;
      if (!byte_1ED813318)
        goto LABEL_28;
      v7 = 0;
      LODWORD(v10) = 0;
      v9 = **(_QWORD **)(a3 - 64);
      v11 = *(llvm::Value **)(a3 - 96);
    }
    LOBYTE(v8) = 1;
    if (v11)
      goto LABEL_21;
LABEL_27:
    v6 = 0;
    goto LABEL_28;
  }
  v6 = byte_1ED813198;
  if (!byte_1ED813198)
    goto LABEL_28;
  v7 = 0;
  LOBYTE(v8) = 0;
  v9 = *(_QWORD *)a3;
  v10 = 1 << ((unint64_t)*(unsigned __int16 *)(a3 + 18) >> 1);
  v11 = *(llvm::Value **)(a3 - 32);
  if (!v11)
    goto LABEL_27;
LABEL_21:
  v12 = *(_QWORD *)v11;
  v13 = *(_DWORD *)(*(_QWORD *)v11 + 8);
  if ((v13 & 0xFE) == 0x12)
  {
    v12 = **(_QWORD **)(v12 + 16);
    v13 = *(_DWORD *)(v12 + 8);
  }
  if ((v13 & 0xFE) == 0x12)
    v13 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
  if (v13 >= 0x100 || llvm::Value::isSwiftError(v11))
    goto LABEL_27;
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 56) + 40) + 272, v9);
  v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v14 == 1)
  *(_QWORD *)a1 = v11;
  *(_BYTE *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v10;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v16;
  v6 = 1;
  *(_QWORD *)(a1 + 32) = v7;
LABEL_29:
  *(_BYTE *)(a1 + 40) = v6;
}

void sub_1C5899634(uint64_t **a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  llvm::ConstantInt **v12;
  llvm::PointerType *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value **v16;
  llvm::ConstantInt **v17;
  uint64_t v18;
  llvm::Value **v19;
  _QWORD *v20;
  uint64_t *v21;
  llvm::Value *v22;
  unsigned __int8 *v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  llvm::Value *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  llvm::ConstantInt *v34;
  unint64_t v35;
  char v36;
  llvm::ValueHandleBase *v37;
  _QWORD *v38;
  char v39;
  char v40;
  char *v41;
  char *v42;
  unsigned __int8 **v43;
  llvm::Value *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 ***v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t **v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ***v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unsigned __int8 **v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  unsigned __int8 **v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  char *v81;
  char *v82;
  unsigned __int8 **v83;
  int v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  char *v87;
  char *v88;
  unsigned __int8 **v89;
  int v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  _QWORD v97[4];
  __int16 v98;
  uint64_t v99;
  unsigned int v100;
  __int16 v101;
  unsigned __int8 *v102;
  void *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v103, a2, 0, 0, 0);
  v7 = (uint64_t)a1[2];
  v101 = 257;
  v8 = sub_1C5098D9C((uint64_t *)&v103, a3, v7, (uint64_t)&v99);
  v96 = v8;
  if (byte_1ED8133D8)
  {
    v9 = &a1[2 * a4];
    v10 = (uint64_t **)v9[5];
    v11 = (uint64_t)v9[6];
    v101 = 257;
    sub_1C4774778((uint64_t *)&v103, v10, v11, (uint64_t *)&v96, 1, (uint64_t)&v99, 0);
    goto LABEL_24;
  }
  v12 = (llvm::ConstantInt **)v8;
  v13 = (llvm::PointerType *)(**a1 + 1984);
  v14 = llvm::PointerType::get(v13, 0);
  v15 = (uint64_t)a1[4];
  v101 = 257;
  v16 = llvm::ConstantInt::get(*v12, v15, 0);
  v17 = (llvm::ConstantInt **)sub_1C4D89BCC((uint64_t)&v103, v12, (uint64_t)v16, (uint64_t)&v99);
  v18 = *((int *)a1 + 6);
  v101 = 257;
  v19 = llvm::ConstantInt::get(*v17, v18, 0);
  v20 = (_QWORD *)sub_1C506ED1C((uint64_t)&v103, (uint64_t)v17, (uint64_t)v19, (uint64_t)&v99, 0);
  v21 = a1[19];
  v98 = 257;
  v22 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v108 + 16))(v108, v20, v21, 0, 0);
  if (!v22)
  {
    v101 = 257;
    v51 = (char *)operator new(0x80uLL);
    v52 = v51;
    *(_QWORD *)v51 = 0;
    *((_QWORD *)v51 + 2) = 0;
    *((_QWORD *)v51 + 1) = 0;
    *((_QWORD *)v51 + 5) = 0;
    *((_QWORD *)v51 + 6) = 0;
    *((_QWORD *)v51 + 4) = 0;
    v53 = (uint64_t **)(v51 + 32);
    *((_QWORD *)v51 + 8) = *v20;
    v22 = (llvm::Value *)(v51 + 64);
    *((_QWORD *)v51 + 3) = v51 + 64;
    *((_QWORD *)v51 + 7) = v51 + 64;
    *((_QWORD *)v51 + 9) = 0;
    v51[80] = 41;
    v51[81] = 0;
    *((_WORD *)v51 + 41) = 0;
    *((_DWORD *)v51 + 21) = 2;
    *((_DWORD *)v51 + 30) = 0;
    *(_OWORD *)(v51 + 104) = 0u;
    *(_OWORD *)(v51 + 88) = 0u;
    *(_QWORD *)v51 = v20;
    v56 = v20[1];
    v55 = v20 + 1;
    v54 = v56;
    *((_QWORD *)v51 + 1) = v56;
    if (v56)
      *(_QWORD *)(v54 + 16) = v51 + 8;
    *((_QWORD *)v51 + 2) = v55;
    *v55 = v51;
    if (*((_QWORD *)v51 + 4))
    {
      **((_QWORD **)v51 + 6) = *((_QWORD *)v51 + 5);
      v95 = *((_QWORD *)v51 + 5);
      if (v95)
        *(_QWORD *)(v95 + 16) = *((_QWORD *)v51 + 6);
    }
    *v53 = v21;
    if (v21)
    {
      v59 = v21[1];
      v58 = (uint64_t ***)(v21 + 1);
      v57 = v59;
      *((_QWORD *)v51 + 5) = v59;
      if (v59)
        *(_QWORD *)(v57 + 16) = v51 + 40;
      *((_QWORD *)v51 + 6) = v58;
      *v58 = v53;
    }
    llvm::Value::setName((uint64_t ***)v51 + 8, (uint64_t)&v99);
    (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v22, v97, v106, v107);
    if (v104)
    {
      v60 = (char *)v103;
      v61 = (char *)v103 + 16 * v104;
      v62 = (unsigned __int8 **)(v52 + 112);
      do
      {
        v63 = *(_DWORD *)v60;
        v64 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
        if (v64)
        {
          if (!v63)
          {
            v102 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
            llvm::MetadataTracking::track((uint64_t)&v102, v64, 2);
            v65 = *v62;
            goto LABEL_46;
          }
        }
        else
        {
          v65 = *v62;
          if (!*v62 && (v52[87] & 0x20) == 0)
            goto LABEL_43;
          if (!v63)
          {
            v102 = 0;
LABEL_46:
            if (v65)
              llvm::MetadataTracking::untrack((uint64_t)(v52 + 112), v65);
            v66 = v102;
            *v62 = v102;
            if (v66)
              llvm::MetadataTracking::retrack((uint64_t)&v102, v66, (uint64_t)(v52 + 112));
            goto LABEL_43;
          }
        }
        llvm::Value::setMetadata(v22, *(_DWORD *)v60, (llvm::MDNode *)v64);
LABEL_43:
        v60 += 16;
      }
      while (v60 != v61);
    }
  }
  v101 = 257;
  v23 = sub_1C4773E38((uint64_t *)&v103, 48, (unsigned __int8 *)v22, v14, (uint64_t)&v99);
  v98 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v106 + 56) + 40) + 272, (uint64_t)v13);
  v25 = v24;
  v26 = (char *)operator new(0x60uLL);
  v27 = v26;
  v28 = (llvm::Value *)(v26 + 32);
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 3) = v26 + 32;
  v101 = 257;
  *((_QWORD *)v26 + 4) = v13;
  *((_QWORD *)v26 + 5) = 0;
  v29 = (uint64_t *)(v26 + 40);
  *((_WORD *)v26 + 24) = 60;
  *((_DWORD *)v26 + 13) = 1;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((_DWORD *)v26 + 22) = 0;
  *(_QWORD *)v26 = v23;
  *((_QWORD *)v26 + 1) = 0;
  if (v23)
  {
    v30 = v23 + 8;
    v31 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v26 + 1) = v31;
    if (v31)
      *(_QWORD *)(v31 + 16) = v26 + 8;
    *((_QWORD *)v26 + 2) = v30;
    *v30 = v26;
  }
  *((_WORD *)v26 + 25) = 2 * (v25 & 0x3F);
  v26[92] = 1;
  llvm::Value::setName((uint64_t ***)v26 + 4, (uint64_t)&v99);
  (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v28, v97, v106, v107);
  if (v104)
  {
    v81 = (char *)v103;
    v82 = (char *)v103 + 16 * v104;
    v83 = (unsigned __int8 **)(v27 + 80);
    do
    {
      v84 = *(_DWORD *)v81;
      v32 = (unsigned __int8 *)*((_QWORD *)v81 + 1);
      if (v32)
      {
        if (!v84)
        {
          v102 = (unsigned __int8 *)*((_QWORD *)v81 + 1);
          llvm::MetadataTracking::track((uint64_t)&v102, v32, 2);
          v85 = *v83;
          goto LABEL_83;
        }
      }
      else
      {
        v85 = *v83;
        if (!*v83 && (v27[55] & 0x20) == 0)
          goto LABEL_80;
        if (!v84)
        {
          v102 = 0;
LABEL_83:
          if (v85)
            llvm::MetadataTracking::untrack((uint64_t)(v27 + 80), v85);
          v86 = v102;
          *v83 = v102;
          if (v86)
            llvm::MetadataTracking::retrack((uint64_t)&v102, v86, (uint64_t)(v27 + 80));
          goto LABEL_80;
        }
      }
      llvm::Value::setMetadata(v28, *(_DWORD *)v81, (llvm::MDNode *)v32);
LABEL_80:
      v81 += 16;
    }
    while (v81 != v82);
  }
  v33 = **a1;
  v34 = *(llvm::ConstantInt **)(v33 + 1984);
  v35 = *(unsigned int *)(v33 + 1992);
  v100 = v35 >> 8;
  if (v35 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v99, 1, 0);
  }
  else
  {
    if (v35 <= 0xFF)
      v36 = 0;
    else
      v36 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v35);
    v99 = v36 & 1;
  }
  v37 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v99, (const llvm::APInt *)v32);
  if (v100 >= 0x41 && v99)
    MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
  v98 = 257;
  v38 = (_QWORD *)(*(uint64_t (**)(uint64_t, llvm::Value *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v108 + 16))(v108, v28, v37, 0, 0);
  if (!v38)
  {
    v101 = 257;
    v67 = (char *)operator new(0x80uLL);
    v68 = v67;
    *((_QWORD *)v67 + 8) = *(_QWORD *)v28;
    v38 = v67 + 64;
    *((_QWORD *)v67 + 3) = v67 + 64;
    *((_QWORD *)v67 + 5) = 0;
    v69 = v67 + 40;
    *((_QWORD *)v67 + 6) = 0;
    *((_QWORD *)v67 + 7) = v67 + 64;
    *((_QWORD *)v67 + 9) = 0;
    *((_QWORD *)v67 + 10) = 0x200000029;
    *(_OWORD *)(v67 + 88) = 0u;
    *(_OWORD *)(v67 + 104) = 0u;
    *((_DWORD *)v67 + 30) = 0;
    *(_QWORD *)v67 = v28;
    v70 = *v29;
    *((_QWORD *)v67 + 1) = *v29;
    if (v70)
      *(_QWORD *)(v70 + 16) = v67 + 8;
    *((_QWORD *)v67 + 2) = v29;
    *v29 = (uint64_t)v67;
    *((_QWORD *)v67 + 4) = v37;
    if (v37)
    {
      v73 = *((_QWORD *)v37 + 1);
      v72 = (_QWORD *)((char *)v37 + 8);
      v71 = v73;
      *v69 = v73;
      if (v73)
        *(_QWORD *)(v71 + 16) = v69;
      *((_QWORD *)v67 + 6) = v72;
      *v72 = v67 + 32;
    }
    llvm::Value::setName((uint64_t ***)v67 + 8, (uint64_t)&v99);
    (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v38, v97, v106, v107);
    if (v104)
    {
      v74 = (char *)v103;
      v75 = (char *)v103 + 16 * v104;
      v76 = (unsigned __int8 **)(v68 + 112);
      do
      {
        v77 = *(_DWORD *)v74;
        v78 = (unsigned __int8 *)*((_QWORD *)v74 + 1);
        if (v78)
        {
          if (!v77)
          {
            v102 = (unsigned __int8 *)*((_QWORD *)v74 + 1);
            llvm::MetadataTracking::track((uint64_t)&v102, v78, 2);
            v79 = *v76;
            goto LABEL_68;
          }
        }
        else
        {
          v79 = *v76;
          if (!*v76 && (v68[87] & 0x20) == 0)
            goto LABEL_65;
          if (!v77)
          {
            v102 = 0;
LABEL_68:
            if (v79)
              llvm::MetadataTracking::untrack((uint64_t)(v68 + 112), v79);
            v80 = v102;
            *v76 = v102;
            if (v80)
              llvm::MetadataTracking::retrack((uint64_t)&v102, v80, (uint64_t)(v68 + 112));
            goto LABEL_65;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v38, *(_DWORD *)v74, (llvm::MDNode *)v78);
LABEL_65:
        v74 += 16;
      }
      while (v74 != v75);
    }
  }
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v106 + 56) + 40) + 272, *v38);
  v40 = v39;
  v41 = (char *)operator new(0x80uLL);
  v42 = v41;
  *((_DWORD *)v41 + 21) = *((_DWORD *)v41 + 21) & 0x38000000 | 2;
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 2) = 0;
  *((_QWORD *)v41 + 1) = 0;
  *((_QWORD *)v41 + 5) = 0;
  *((_QWORD *)v41 + 6) = 0;
  *((_QWORD *)v41 + 4) = 0;
  v43 = (unsigned __int8 **)(v41 + 32);
  *((_QWORD *)v41 + 8) = **(_QWORD **)*v38 + 1576;
  v44 = (llvm::Value *)(v41 + 64);
  *((_QWORD *)v41 + 3) = v41 + 64;
  *((_QWORD *)v41 + 7) = v41 + 64;
  *((_QWORD *)v41 + 9) = 0;
  v41[80] = 61;
  v41[81] = 0;
  *((_WORD *)v41 + 41) = 0;
  *((_DWORD *)v41 + 21) = 2;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *((_DWORD *)v41 + 30) = 0;
  *(_QWORD *)v41 = v38;
  v47 = v38[1];
  v46 = v38 + 1;
  v45 = v47;
  *((_QWORD *)v41 + 1) = v47;
  if (v47)
    *(_QWORD *)(v45 + 16) = v41 + 8;
  *((_QWORD *)v41 + 2) = v46;
  *v46 = v41;
  if (*((_QWORD *)v41 + 4))
  {
    **((_QWORD **)v41 + 6) = *((_QWORD *)v41 + 5);
    v94 = *((_QWORD *)v41 + 5);
    if (v94)
      *(_QWORD *)(v94 + 16) = *((_QWORD *)v41 + 6);
  }
  *v43 = v23;
  if (v23)
  {
    v50 = *((_QWORD *)v23 + 1);
    v49 = (unsigned __int8 ***)(v23 + 8);
    v48 = v50;
    *((_QWORD *)v41 + 5) = v50;
    if (v50)
      *(_QWORD *)(v48 + 16) = v41 + 40;
    *((_QWORD *)v41 + 6) = v49;
    *v49 = v43;
  }
  *((_WORD *)v41 + 41) = 2 * (v40 & 0x3F);
  v41[124] = 1;
  v101 = 257;
  (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v44, &v99, v106, v107);
  if (v104)
  {
    v87 = (char *)v103;
    v88 = (char *)v103 + 16 * v104;
    v89 = (unsigned __int8 **)(v42 + 112);
    do
    {
      v90 = *(_DWORD *)v87;
      v91 = (unsigned __int8 *)*((_QWORD *)v87 + 1);
      if (v91)
      {
        if (!v90)
        {
          v97[0] = *((_QWORD *)v87 + 1);
          llvm::MetadataTracking::track((uint64_t)v97, v91, 2);
          v92 = *v89;
          goto LABEL_98;
        }
      }
      else
      {
        v92 = *v89;
        if (!*v89 && (v42[87] & 0x20) == 0)
          goto LABEL_95;
        if (!v90)
        {
          v97[0] = 0;
LABEL_98:
          if (v92)
            llvm::MetadataTracking::untrack((uint64_t)(v42 + 112), v92);
          v93 = (unsigned __int8 *)v97[0];
          *v89 = (unsigned __int8 *)v97[0];
          if (v93)
            llvm::MetadataTracking::retrack((uint64_t)v97, v93, (uint64_t)(v42 + 112));
          goto LABEL_95;
        }
      }
      llvm::Value::setMetadata(v44, *(_DWORD *)v87, (llvm::MDNode *)v91);
LABEL_95:
      v87 += 16;
    }
    while (v87 != v88);
  }
LABEL_24:
  if (v103 != &v105)
    free(v103);
}

__n128 sub_1C5899EF0(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED813058, "memprof-guard-against-version-mismatch", 0x26uLL);
  result = *a1;
  xmmword_1ED813078 = (__int128)*a1;
  word_1ED813062 = (32 * (*a2 & 3)) | word_1ED813062 & 0xFF9F;
  v7 = *a3;
  byte_1ED8130D8 = **a3;
  byte_1ED8130E9 = 1;
  byte_1ED8130E8 = *v7;
  return result;
}

void sub_1C5899F74(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string __dst;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_8:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::operator=((std::string *)&qword_1ED813918, &__dst);
  byte_1ED813950 = 1;
  std::string::operator=((std::string *)&qword_1ED813938, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

__n128 sub_1C589A04C(__n128 *a1, _WORD *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED813658, "memprof-debug", 0xDuLL);
  result = *a1;
  xmmword_1ED813678 = (__int128)*a1;
  word_1ED813662 = (32 * (*a2 & 3)) | word_1ED813662 & 0xFF9F;
  v7 = *a3;
  dword_1ED8136D8 = **a3;
  byte_1ED8136EC = 1;
  dword_1ED8136E8 = *v7;
  return result;
}

uint64_t sub_1C589A0D0()
{
  int v1;
  const char *v2;
  int v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Guard against compiler/runtime version mismatch.";
  v4.n128_u64[1] = 48;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = (const char *)&v1;
  sub_1C62ACB08(&v4, &v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED813058, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"instrument read instructions";
  v4.n128_u64[1] = 28;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = (const char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813118, "memprof-instrument-reads", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813118, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"instrument write instructions";
  v4.n128_u64[1] = 29;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = (const char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8131D8, "memprof-instrument-writes", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8131D8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"instrument atomic instructions (rmw, cmpxchg)";
  v4.n128_u64[1] = 45;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = (const char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813298, "memprof-instrument-atomics", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813298, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Use callbacks instead of inline instrumentation sequences.";
  v4.n128_u64[1] = 58;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = (const char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813358, "memprof-use-callbacks", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813358, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Prefix for memory access callbacks";
  v4.n128_u64[1] = 34;
  v3 = 1;
  v2 = "__memprof_";
  sub_1C47AD050((uint64_t)&qword_1ED813898, 0, 0);
  qword_1ED813920 = 0;
  qword_1ED813918 = 0;
  unk_1ED813928 = 0;
  qword_1ED813938 = 0;
  qword_1ED813948 = 0;
  qword_1ED813940 = 0;
  qword_1ED813930 = (uint64_t)&unk_1E819E950;
  byte_1ED813950 = 0;
  qword_1ED813898 = (uint64_t)&unk_1E819E480;
  qword_1ED813958 = (uint64_t)&unk_1E819E970;
  qword_1ED813960 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED813978 = (uint64_t)&qword_1ED813960;
  sub_1C62ACBAC((__int128 *)&v4, &v3, &v2);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED813898);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED813898, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"scale of memprof shadow mapping";
  v4.n128_u64[1] = 31;
  v3 = 1;
  v2 = (const char *)&unk_1C86621D0;
  sub_1C62ACC18((__int128 *)&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED813418, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"granularity of memprof shadow mapping";
  v4.n128_u64[1] = 37;
  v3 = 1;
  v2 = (const char *)&unk_1C86621D8;
  sub_1C62ACCEC((__int128 *)&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED8134D8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Instrument scalar stack variables";
  v4.n128_u64[1] = 33;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = (const char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813598, "memprof-instrument-stack", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813598, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"debug";
  v4.n128_u64[1] = 5;
  v3 = 1;
  v1 = 0;
  v2 = (const char *)&v1;
  sub_1C62ACDC0(&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED813658, &dword_1C475E000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Debug func";
  v4.n128_u64[1] = 10;
  sub_1C4DB1854((uint64_t)algn_1ED813980, "memprof-debug-func", &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, algn_1ED813980, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Debug min inst";
  v4.n128_u64[1] = 14;
  v3 = 1;
  v1 = -1;
  v2 = (const char *)&v1;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED813718, "memprof-debug-min", &v4, &v3, (_DWORD **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED813718, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Debug max inst";
  v4.n128_u64[1] = 14;
  v3 = 1;
  v1 = -1;
  v2 = (const char *)&v1;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED8137D8, "memprof-debug-max", &v4, &v3, (_DWORD **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED8137D8, &dword_1C475E000);
}

uint64_t llvm::MemorySanitizerOptions::MemorySanitizerOptions(uint64_t this, int a2, char a3, _BOOL4 a4, BOOL a5)
{
  _BOOL4 v5;
  int v6;
  char v7;
  BOOL v8;
  BOOL v9;

  v5 = byte_1ED833C88 != 0;
  if (!word_1ED833C10)
    v5 = a4;
  *(_BYTE *)this = v5;
  if (v5)
    v6 = 2;
  else
    v6 = a2;
  if (word_1ED8339D0)
    v6 = dword_1ED833A48;
  *(_DWORD *)(this + 4) = v6;
  v7 = v5 | a3;
  v8 = byte_1ED833B08 != 0;
  if (!word_1ED833A90)
    v8 = v7;
  *(_BYTE *)(this + 8) = v8;
  v9 = byte_1ED833BC8 != 0;
  if (!word_1ED833B50)
    v9 = a5;
  *(_BYTE *)(this + 9) = v9;
  return this;
}

{
  _BOOL4 v5;
  int v6;
  char v7;
  BOOL v8;
  BOOL v9;

  v5 = byte_1ED833C88 != 0;
  if (!word_1ED833C10)
    v5 = a4;
  *(_BYTE *)this = v5;
  if (v5)
    v6 = 2;
  else
    v6 = a2;
  if (word_1ED8339D0)
    v6 = dword_1ED833A48;
  *(_DWORD *)(this + 4) = v6;
  v7 = v5 | a3;
  v8 = byte_1ED833B08 != 0;
  if (!word_1ED833A90)
    v8 = v7;
  *(_BYTE *)(this + 8) = v8;
  v9 = byte_1ED833BC8 != 0;
  if (!word_1ED833B50)
    v9 = a5;
  *(_BYTE *)(this + 9) = v9;
  return this;
}

uint64_t sub_1C589A678(uint64_t a1, llvm::LLVMContext **a2, uint64_t a3, __int16 a4)
{
  void *v6;
  llvm::LLVMContext *v7;
  llvm::PointerType *v8;
  llvm::PointerType *v9;
  char *v11;
  uint64_t *v12;
  void *__p[2];
  _BYTE v14[8];
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::LLVMContext *v19;
  void **v20;
  void **v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = a3 & 1;
  *(_DWORD *)(a1 + 4) = HIDWORD(a3);
  *(_BYTE *)(a1 + 8) = a4 & 1;
  *(_BYTE *)(a1 + 9) = HIBYTE(a4) & 1;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  if ((unsigned __int16)word_1ED814688 | (unsigned __int16)word_1ED814750)
  {
    *(_QWORD *)(a1 + 600) = qword_1ED814570;
    *(_QWORD *)(a1 + 608) = qword_1ED814638;
    *(_QWORD *)(a1 + 616) = qword_1ED814700;
    *(_QWORD *)(a1 + 624) = qword_1ED8147C8;
    *(_QWORD *)(a1 + 592) = a1 + 600;
    goto LABEL_28;
  }
  v33 = 260;
  v30 = (uint64_t)(a2 + 27);
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v30);
  if (v16 == 12)
  {
    if (v15 == 42)
    {
      v6 = &unk_1C8662610;
      goto LABEL_26;
    }
    goto LABEL_36;
  }
  if (v16 == 9)
  {
    if (v15 <= 22)
    {
      if ((v15 - 3) < 2)
      {
        v6 = &unk_1C86626D0;
        goto LABEL_26;
      }
      if ((v15 - 18) < 2)
      {
        v6 = &unk_1C8662670;
        goto LABEL_26;
      }
    }
    else if (v15 > 40)
    {
      if (v15 == 42)
      {
        v6 = &unk_1C8662650;
        goto LABEL_26;
      }
      if (v15 == 41)
      {
        v6 = &unk_1C8662630;
        goto LABEL_26;
      }
    }
    else
    {
      if ((v15 - 23) < 2)
      {
        v6 = &unk_1C8662690;
        goto LABEL_26;
      }
      if (v15 == 36)
      {
        v6 = &unk_1C86626B0;
        goto LABEL_26;
      }
    }
LABEL_36:
    v11 = "unsupported architecture";
    goto LABEL_38;
  }
  if (v16 != 5)
  {
    v11 = "unsupported operating system";
LABEL_38:
    llvm::report_fatal_error((llvm *)v11, (const char *)1);
  }
  if (v15 != 42)
  {
    if (v15 == 41)
    {
      v6 = &unk_1C86625D0;
      goto LABEL_26;
    }
    goto LABEL_36;
  }
  v6 = &unk_1C86625F0;
LABEL_26:
  *(_QWORD *)(a1 + 592) = v6;
  if ((v14[7] & 0x80000000) != 0)
    operator delete(__p[0]);
LABEL_28:
  v7 = *a2;
  *(_QWORD *)(a1 + 16) = *a2;
  __p[0] = v14;
  __p[1] = (void *)0x200000000;
  v19 = v7;
  v20 = &v28;
  v21 = &v29;
  v22 = 0;
  v23 = 0;
  v24 = 512;
  v25 = 7;
  v17 = 0;
  v18 = 0;
  v26 = 0;
  v27 = 0;
  v28 = &unk_1E8167888;
  v29 = &unk_1E8167A08;
  *(_QWORD *)(a1 + 24) = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(a2 + 34), v7, 0);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v19 + 1960;
  v12 = *(uint64_t **)(a1 + 16);
  v30 = 0x3E800000001;
  *(_QWORD *)(a1 + 632) = llvm::MDBuilder::createBranchWeights(&v12, (uint64_t)&v30, 2);
  v12 = *(uint64_t **)(a1 + 16);
  v30 = 0x3E800000001;
  *(_QWORD *)(a1 + 640) = llvm::MDBuilder::createBranchWeights(&v12, (uint64_t)&v30, 2);
  if (!*(_BYTE *)a1)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      v8 = (llvm::PointerType *)(*(_QWORD *)v19 + 1960);
      v30 = (uint64_t)a2;
      v31 = __p;
      v32 = a1;
      llvm::Module::getOrInsertGlobal((uint64_t)a2, "__msan_track_origins", 0x14uLL, v8, (uint64_t (*)(uint64_t))sub_1C589DACC, (uint64_t)&v30);
    }
    if (*(_BYTE *)(a1 + 8))
    {
      v9 = (llvm::PointerType *)(*(_QWORD *)v19 + 1960);
      v30 = (uint64_t)a2;
      v31 = __p;
      v32 = a1;
      llvm::Module::getOrInsertGlobal((uint64_t)a2, "__msan_keep_going", 0x11uLL, v9, (uint64_t (*)(uint64_t))sub_1C589DC04, (uint64_t)&v30);
    }
  }
  if (__p[0] != v14)
    free(__p[0]);
  return a1;
}

uint64_t sub_1C589AA54(_BYTE *a1, uint64_t ***a2, uint64_t a3)
{
  uint64_t ***v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v18;
  std::string::size_type v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  llvm::MemorySSAUpdater *v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t (**v38)();
  uint64_t **v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  llvm::PointerType *v65;
  llvm::PointerType *v66;
  llvm::PointerType *v67;
  llvm::PointerType *v68;
  llvm::PointerType *v69;
  llvm::PointerType *v70;
  llvm::PointerType *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  std::string *v76;
  std::string::size_type v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::string *v85;
  std::string::size_type size;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  llvm::PointerType *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  std::string *v96;
  std::string::size_type v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  std::string *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  llvm::PointerType *v113;
  _BYTE *v114;
  uint64_t v115;
  _DWORD *v116;
  int data;
  _DWORD *v118;
  _DWORD *v119;
  int v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t **v124;
  std::string::size_type v125;
  std::string::size_type v126;
  std::string::size_type v127;
  std::string::size_type v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  llvm::PointerType *v135;
  uint64_t **v136;
  uint64_t v137;
  uint64_t **v138;
  std::string::size_type v139;
  uint64_t *v140;
  uint64_t **v141;
  uint64_t v142;
  int v143;
  std::string *v144;
  std::string::size_type v145;
  std::string *v146;
  std::string::size_type v147;
  std::string *v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  std::string *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t **v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  uint64_t **v178;
  uint64_t **v179;
  uint64_t **v180;
  uint64_t *i;
  uint64_t v182;
  uint64_t *v183;
  void *v184;
  uint64_t **v185;
  uint64_t v186;
  const llvm::APInt *v187;
  uint64_t *v188;
  llvm::ConstantInt *v189;
  const llvm::APInt *v190;
  llvm::ValueHandleBase *v191;
  llvm::GetElementPtrInst *v192;
  llvm::ConstantInt *v193;
  llvm::ValueHandleBase *v194;
  uint64_t v195;
  const llvm::APInt *v196;
  uint64_t v197;
  llvm::GetElementPtrInst *v198;
  llvm::ConstantInt *v199;
  unsigned int v200;
  char v201;
  llvm::ValueHandleBase *v202;
  uint64_t v203;
  const llvm::APInt *v204;
  uint64_t v205;
  llvm::GetElementPtrInst *v206;
  llvm::ConstantInt *v207;
  unsigned int v208;
  unint64_t v209;
  llvm::ValueHandleBase *v210;
  uint64_t v211;
  const llvm::APInt *v212;
  uint64_t v213;
  llvm::GetElementPtrInst *v214;
  llvm::ConstantInt *v215;
  unsigned int v216;
  unint64_t v217;
  llvm::ValueHandleBase *v218;
  uint64_t v219;
  const llvm::APInt *v220;
  uint64_t v221;
  llvm::GetElementPtrInst *v222;
  llvm::ConstantInt *v223;
  unsigned int v224;
  unint64_t v225;
  llvm::ValueHandleBase *v226;
  uint64_t v227;
  const llvm::APInt *v228;
  uint64_t v229;
  llvm::GetElementPtrInst *v230;
  llvm::ConstantInt *v231;
  unsigned int v232;
  unint64_t v233;
  llvm::ValueHandleBase *v234;
  uint64_t v235;
  const llvm::APInt *v236;
  uint64_t v237;
  llvm::GetElementPtrInst *v238;
  llvm::ConstantInt *v239;
  unsigned int v240;
  unint64_t v241;
  llvm::ValueHandleBase *v242;
  uint64_t v243;
  _WORD *v244;
  void *v245;
  void *v246;
  unsigned int v247;
  unsigned int v248;
  _QWORD *v249;
  void *v250;
  void *v251;
  unsigned int v252;
  unsigned int v253;
  char *v254;
  char *v255;
  char *v256;
  int v257;
  BOOL v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t *v265;
  uint64_t v266;
  llvm::Value **v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  llvm::Value **v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  llvm::Value **v279;
  int v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t *v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  unint64_t *v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  BOOL v296;
  int v297;
  uint64_t v298;
  std::string::size_type *v299;
  uint64_t *v300;
  uint64_t *v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  BOOL v304;
  const char *v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  llvm::Value *v310;
  char *v311;
  void *v312;
  void *v313;
  _BYTE *v314;
  uint64_t **v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  const llvm::APInt *v319;
  llvm::ConstantInt *v320;
  uint64_t v321;
  _DWORD *v322;
  int v323;
  _QWORD *v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t *v327;
  unsigned __int8 *v328;
  int v329;
  llvm::Constant *v330;
  llvm::Type *v331;
  llvm::Value **NullValue;
  llvm::Value **v333;
  uint64_t v334;
  unsigned int v335;
  unint64_t v336;
  unsigned __int8 *v337;
  unsigned __int8 *v338;
  char *v339;
  char *v340;
  llvm::Value **v341;
  unsigned __int8 **v342;
  llvm::Value *v343;
  _QWORD *v344;
  llvm::Value *v345;
  uint64_t v346;
  unsigned __int8 ***v347;
  uint64_t v348;
  int v349;
  llvm::Value **v350;
  uint64_t **v351;
  unsigned __int8 v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unsigned __int8 *v357;
  unsigned __int8 *v358;
  unsigned __int8 *v359;
  const char *v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  int v364;
  llvm::Value *v365;
  uint64_t *v366;
  char *v367;
  unsigned __int8 *v368;
  _BYTE *v369;
  uint64_t **v370;
  uint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  char *v374;
  char *v375;
  unsigned __int8 **v376;
  int v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  unsigned __int8 **v380;
  unsigned __int8 *v381;
  uint64_t v382;
  uint64_t v383;
  _DWORD *v384;
  _DWORD *v385;
  int v386;
  uint64_t v387;
  unsigned int v388;
  unsigned int v389;
  _DWORD *v390;
  uint64_t ***v391;
  char *v392;
  unsigned __int8 **v393;
  unsigned __int8 **v394;
  unsigned __int8 **v395;
  unint64_t v396;
  unsigned __int8 *v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  uint64_t *v401;
  _BYTE *v402;
  unsigned __int8 *v403;
  uint64_t v404;
  _DWORD *v405;
  unsigned __int8 *v406;
  uint64_t ***v407;
  _BYTE *v408;
  void *v409;
  uint64_t v410;
  _BYTE v411[128];
  void *v412;
  uint64_t v413;
  _BYTE v414[128];
  _QWORD *v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418[3];
  char v419;
  _QWORD *v420;
  uint64_t v421;
  unsigned int v422;
  uint64_t v423[3];
  char v424;
  _QWORD *v425;
  uint64_t v426;
  uint64_t Intrinsic;
  __int16 v428;
  char v429;
  BOOL v430;
  void *v431;
  uint64_t v432;
  _BYTE v433[384];
  char v434;
  _BYTE *v435;
  void *v436;
  uint64_t v437;
  int v438;
  _BYTE v439[128];
  void *v440;
  uint64_t v441;
  _BYTE v442[256];
  void *v443;
  uint64_t v444;
  _BYTE v445[128];
  std::string v446;
  _QWORD *v447[3];
  std::string v448;
  uint64_t v449;
  _QWORD v450[8];
  void *v451;
  _BYTE *v452;
  uint64_t v453;
  void *__p;
  void *__src;
  unsigned int v456;
  unsigned int v457;
  int v458;
  __int16 v459;
  uint64_t v460;
  char *v461;
  _QWORD *v462;
  void **v463;
  void **v464;
  uint64_t v465;
  void *v466;
  _BYTE *v467;
  uint64_t v468;
  void *v469;
  void *v470;
  unsigned int v471;
  unsigned int v472;
  int v473;
  void *v474;
  _BYTE *v475;
  void *v476;
  void *v477;
  _DWORD v478[4];
  _WORD v479[8];
  uint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  void **v483;
  void **v484;
  uint64_t v485;
  void *v486;
  char *v487;
  uint64_t v488;
  void *v489;
  void *v490;
  std::string v491;
  _BYTE v492[15];
  char v493[3];
  uint64_t v494;

  v4 = a2;
  v5 = a1;
  v494 = *MEMORY[0x1E0C80C00];
  if (*a1 || (*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_15;
  v6 = ***a2;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_9;
  LODWORD(v9) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (uint64_t ****)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(uint64_t ****)(v7 + 16 * v9);
      if (v11 == a2)
      {
        v10 = (uint64_t ****)(v7 + 16 * v9);
        goto LABEL_10;
      }
    }
LABEL_9:
    v10 = (uint64_t ****)(v7 + 16 * v8);
  }
LABEL_10:
  v14 = v10[1];
  if (*v14 == (uint64_t **)16)
  {
    v16 = v14[2];
    v15 = v14[3];
    if (v16 == (uint64_t **)0x646F6D2E6E61736DLL && v15 == (uint64_t **)0x726F74635F656C75)
      return 0;
  }
LABEL_15:
  v18 = a2[14];
  if (v18 && *((char *)v18 + 12) < 0)
    return 0;
  v407 = a2;
  v408 = a1;
  v20 = (std::string::size_type)&v407;
  v409 = v411;
  v410 = 0x1000000000;
  v412 = v414;
  v413 = 0x1000000000;
  v417 = 128;
  v21 = operator new(0x1800uLL, (std::align_val_t)8uLL);
  v415 = v21;
  v416 = 0;
  if (v417)
  {
    v22 = 48 * v417;
    v23 = v21 + 2;
    do
    {
      *v23 = 0;
      v23[1] = -4096;
      *(v23 - 2) = &off_1E817DE88;
      *(v23 - 1) = 2;
      v23[2] = 0;
      v23 += 6;
      v22 -= 48;
    }
    while (v22);
  }
  LOBYTE(v418[0]) = 0;
  v419 = 0;
  v422 = 128;
  v24 = operator new(0x1800uLL, (std::align_val_t)8uLL);
  v420 = v24;
  v421 = 0;
  if (v422)
  {
    v25 = 48 * v422;
    v26 = v24 + 2;
    do
    {
      *v26 = 0;
      v26[1] = -4096;
      *(v26 - 2) = &off_1E817DE88;
      *(v26 - 1) = 2;
      v26[2] = 0;
      v26 += 6;
      v25 -= 48;
    }
    while (v25);
  }
  LOBYTE(v423[0]) = 0;
  v424 = 0;
  v27 = v4[5] + 27;
  v479[0] = 260;
  v476 = v27;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v476);
  if (v458 != 42)
  {
    if ((v458 & 0xFFFFFFFE) == 0x12)
    {
      v37 = (_QWORD *)operator new();
      v29 = v37;
      v38 = &off_1E817DEF0;
    }
    else if ((v458 - 23) < 2)
    {
      v37 = (_QWORD *)operator new();
      v29 = v37;
      v38 = &off_1E817DF70;
    }
    else
    {
      if (v458 == 36)
      {
        v29 = (_QWORD *)operator new();
        *v29 = &off_1E817DFB0;
        v29[1] = v4;
        v29[2] = v5;
        v29[3] = &v407;
        v29[4] = 0;
        v29[5] = 0;
        v29[6] = 0;
        v29[7] = v29 + 9;
        v29[8] = 0x1000000000;
        goto LABEL_47;
      }
      if (v458 != 3)
      {
        v29 = (_QWORD *)operator new();
        *v29 = &off_1E817DFF0;
        goto LABEL_47;
      }
      v37 = (_QWORD *)operator new();
      v29 = v37;
      v38 = &off_1E817DF30;
    }
    *v37 = v38;
    v37[1] = v4;
    v37[2] = v5;
    v37[3] = &v407;
    v37[4] = 0;
    v37[5] = 0;
    v37[6] = v37 + 8;
    v37[7] = 0x1000000000;
    goto LABEL_47;
  }
  v29 = (_QWORD *)operator new();
  *v29 = &off_1E817DEB0;
  v29[2] = v4;
  v29[3] = v5;
  v29[4] = &v407;
  v29[5] = 0;
  v29[6] = 0;
  v29[7] = 0;
  v29[8] = v29 + 10;
  v29[9] = 0x1000000000;
  *((_DWORD *)v29 + 2) = 176;
  v30 = v4[14];
  if (v30)
  {
    if (*((_DWORD *)v30 + 2))
    {
      v31 = v30[5];
      if (v31)
      {
        v32 = *((unsigned int *)v31 + 2);
        if ((_DWORD)v32)
        {
          v33 = v31 + 6;
          v34 = 8 * v32;
          while (1)
          {
            v35 = *v33;
            if (*v33
              && *(_BYTE *)(v35 + 8) == 2
              && *(_DWORD *)(v35 + 12) == 15
              && *(_QWORD *)(v35 + 24) == 0x662D746567726174
              && *(_QWORD *)(v35 + 31) == 0x7365727574616566)
            {
              break;
            }
            ++v33;
            v34 -= 8;
            if (!v34)
              goto LABEL_47;
          }
          v184 = (void *)*(unsigned int *)(v35 + 16);
          v476 = (void *)(v35 + 40);
          v477 = v184;
          if (llvm::StringRef::find((uint64_t *)&v476, "-sse", 4uLL, 0) != -1)
            *((_DWORD *)v29 + 2) = 48;
        }
      }
    }
  }
LABEL_47:
  if (SHIBYTE(v457) < 0)
    operator delete(__p);
  v425 = v29;
  v426 = a3;
  v431 = v433;
  v432 = 0x1000000000;
  v434 = byte_1ED813F70;
  v435 = v439;
  v436 = v439;
  v437 = 16;
  v438 = 0;
  v440 = v442;
  v441 = 0x1000000000;
  v443 = v445;
  v444 = 0x1000000000;
  v39 = v4[14];
  if (!v39 || (*((_BYTE *)v39 + 18) & 0x20) == 0)
  {
    v428 = 0;
LABEL_52:
    v40 = 0;
    v429 = 0;
    goto LABEL_53;
  }
  LOBYTE(v428) = byte_1ED814330 ^ 1;
  HIBYTE(v428) = byte_1ED814330 ^ 1;
  if (byte_1ED814330)
    goto LABEL_52;
  v429 = byte_1ED813AF0;
  v40 = byte_1ED813D30 != 0;
LABEL_53:
  v430 = v40;
  llvm::removeUnreachableBlocks((llvm *)v4, 0, 0, v28);
  if (!v5[96])
  {
    v41 = (uint64_t)v4[5];
    v42 = (_QWORD *)*((_QWORD *)v5 + 2);
    v391 = v4;
    v476 = v478;
    v477 = (void *)0x200000000;
    v482 = v42;
    v483 = &v489;
    v484 = &v490;
    v485 = 0;
    LODWORD(v486) = 0;
    WORD2(v486) = 512;
    BYTE6(v486) = 7;
    v481 = 0;
    v480 = 0;
    v488 = 0;
    v487 = 0;
    v489 = &unk_1E8167888;
    v490 = &unk_1E8167A08;
    *((_QWORD *)v5 + 35) = sub_1C6212CB8(v41, "__msan_chain_origin", 0x13uLL, 0, (uint64_t **)(*v42 + 1960), *v42 + 1960);
    *((_QWORD *)v5 + 36) = v43;
    v44 = (uint64_t **)(*v482 + 1576);
    v45 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    *((_QWORD *)v5 + 37) = sub_1C62AD8E8(v41, v44, v45, *((_QWORD *)v5 + 3), *v482 + 1960);
    *((_QWORD *)v5 + 38) = v46;
    v47 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    v48 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    v49 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    *((_QWORD *)v5 + 39) = sub_1C62A98B0(v41, "__msan_memmove", 0xEuLL, 0, v47, v48, v49, *((_QWORD *)v5 + 3));
    *((_QWORD *)v5 + 40) = v50;
    v51 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    v52 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    v53 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    *((_QWORD *)v5 + 41) = sub_1C62A98B0(v41, "__msan_memcpy", 0xDuLL, 0, v51, v52, v53, *((_QWORD *)v5 + 3));
    *((_QWORD *)v5 + 42) = v54;
    v55 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    v56 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    *((_QWORD *)v5 + 43) = sub_1C62A98B0(v41, "__msan_memset", 0xDuLL, 0, v55, v56, *v482 + 1960, *((_QWORD *)v5 + 3));
    *((_QWORD *)v5 + 44) = v57;
    v58 = (uint64_t **)(*v482 + 1576);
    v59 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
    *((_QWORD *)v5 + 72) = sub_1C6291FE0(v41, "__msan_instrument_asm_store", 0x1BuLL, 0, v58, v59, *((_QWORD *)v5 + 3));
    *((_QWORD *)v5 + 73) = v60;
    v402 = v5;
    v404 = v41;
    if (!*v5)
    {
      v61 = (_QWORD *)*((_QWORD *)v5 + 2);
      __p = &v456;
      __src = (void *)0x200000000;
      v462 = v61;
      v463 = &v469;
      v464 = &v470;
      v465 = 0;
      LODWORD(v466) = 0;
      WORD2(v466) = 512;
      BYTE6(v466) = 7;
      v461 = 0;
      v460 = 0;
      v468 = 0;
      v467 = 0;
      v469 = &unk_1E8167888;
      v470 = &unk_1E8167A08;
      if (v5[8])
        v62 = 26;
      else
        v62 = 35;
      if (v5[8])
        v63 = "__msan_warning_with_origin";
      else
        v63 = "__msan_warning_with_origin_noreturn";
      *((_QWORD *)v5 + 13) = sub_1C6212CB8(v41, (unsigned __int8 *)v63, v62, 0, (uint64_t **)(*v61 + 1576), *v61 + 1960);
      *((_QWORD *)v5 + 14) = v64;
      llvm::ArrayType::get((llvm::ArrayType *)(*v462 + 1984), (llvm::Type *)0x64);
      v446.__r_.__value_.__r.__words[0] = (std::string::size_type)"__msan_retval_tls";
      v446.__r_.__value_.__l.__size_ = 17;
      v491.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
      v448.__r_.__value_.__r.__words[0] = v41;
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)&v491;
      v448.__r_.__value_.__r.__words[2] = (std::string::size_type)&v446;
      *((_QWORD *)v5 + 7) = llvm::Module::getOrInsertGlobal(v41, "__msan_retval_tls", 0x11uLL, v65, sub_1C58A8B48, (uint64_t)&v448);
      v66 = (llvm::PointerType *)*((_QWORD *)v5 + 4);
      v446.__r_.__value_.__r.__words[0] = (std::string::size_type)"__msan_retval_origin_tls";
      v446.__r_.__value_.__l.__size_ = 24;
      v491.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
      v448.__r_.__value_.__r.__words[0] = v41;
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)&v491;
      v448.__r_.__value_.__r.__words[2] = (std::string::size_type)&v446;
      *((_QWORD *)v5 + 8) = llvm::Module::getOrInsertGlobal(v41, "__msan_retval_origin_tls", 0x18uLL, v66, sub_1C58A8B48, (uint64_t)&v448);
      llvm::ArrayType::get((llvm::ArrayType *)(*v462 + 1984), (llvm::Type *)0x64);
      v446.__r_.__value_.__r.__words[0] = (std::string::size_type)"__msan_param_tls";
      v446.__r_.__value_.__l.__size_ = 16;
      v491.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
      v448.__r_.__value_.__r.__words[0] = v41;
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)&v491;
      v448.__r_.__value_.__r.__words[2] = (std::string::size_type)&v446;
      *((_QWORD *)v5 + 5) = llvm::Module::getOrInsertGlobal(v41, "__msan_param_tls", 0x10uLL, v67, sub_1C58A8B48, (uint64_t)&v448);
      llvm::ArrayType::get(*((llvm::ArrayType **)v5 + 4), (llvm::Type *)0xC8);
      v446.__r_.__value_.__r.__words[0] = (std::string::size_type)"__msan_param_origin_tls";
      v446.__r_.__value_.__l.__size_ = 23;
      v491.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      v448.__r_.__value_.__r.__words[0] = v41;
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)&v491;
      v448.__r_.__value_.__r.__words[2] = (std::string::size_type)&v446;
      *((_QWORD *)v5 + 6) = llvm::Module::getOrInsertGlobal(v41, "__msan_param_origin_tls", 0x17uLL, v68, sub_1C58A8B48, (uint64_t)&v448);
      llvm::ArrayType::get((llvm::ArrayType *)(*v462 + 1984), (llvm::Type *)0x64);
      v446.__r_.__value_.__r.__words[0] = (std::string::size_type)"__msan_va_arg_tls";
      v446.__r_.__value_.__l.__size_ = 17;
      v491.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      v448.__r_.__value_.__r.__words[0] = v41;
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)&v491;
      v448.__r_.__value_.__r.__words[2] = (std::string::size_type)&v446;
      *((_QWORD *)v5 + 9) = llvm::Module::getOrInsertGlobal(v41, "__msan_va_arg_tls", 0x11uLL, v69, sub_1C58A8B48, (uint64_t)&v448);
      llvm::ArrayType::get(*((llvm::ArrayType **)v5 + 4), (llvm::Type *)0xC8);
      v446.__r_.__value_.__r.__words[0] = (std::string::size_type)"__msan_va_arg_origin_tls";
      v446.__r_.__value_.__l.__size_ = 24;
      v491.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      v448.__r_.__value_.__r.__words[0] = v41;
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)&v491;
      v448.__r_.__value_.__r.__words[2] = (std::string::size_type)&v446;
      *((_QWORD *)v5 + 10) = llvm::Module::getOrInsertGlobal(v41, "__msan_va_arg_origin_tls", 0x18uLL, v70, sub_1C58A8B48, (uint64_t)&v448);
      v71 = (llvm::PointerType *)(*v462 + 1984);
      v446.__r_.__value_.__r.__words[0] = (std::string::size_type)"__msan_va_arg_overflow_size_tls";
      v446.__r_.__value_.__l.__size_ = 31;
      v491.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      v448.__r_.__value_.__r.__words[0] = v41;
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)&v491;
      v448.__r_.__value_.__r.__words[2] = (std::string::size_type)&v446;
      v72 = 0;
      *((_QWORD *)v5 + 11) = llvm::Module::getOrInsertGlobal(v41, "__msan_va_arg_overflow_size_tls", 0x1FuLL, v71, sub_1C58A8B48, (uint64_t)&v448);
      while (1)
      {
        v73 = 0;
        v74 = (1 << v72);
        v75 = v74;
        do
        {
          v446.__r_.__value_.__s.__data_[v73-- + 20] = (v75 % 0xA) | 0x30;
          v296 = v75 > 9;
          v75 /= 0xAuLL;
        }
        while (v296);
        sub_1C4E61270(&v448, &v446.__r_.__value_.__s.__data_[v73 + 21], &v446.__r_.__value_.__s.__data_[21], -v73);
        v76 = std::string::insert(&v448, 0, "__msan_maybe_warning_");
        v77 = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v491.__r_.__value_.__l.__data_ = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v491.__r_.__value_.__r.__words[2] = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v448.__r_.__value_.__l.__data_);
        v448.__r_.__value_.__r.__words[0] = (std::string::size_type)&v448.__r_.__value_.__r.__words[2];
        v448.__r_.__value_.__l.__size_ = 0x200000000;
        v78 = llvm::Attribute::get(*((uint64_t **)v5 + 2), 67, 0);
        v79 = LODWORD(v448.__r_.__value_.__r.__words[1]);
        if (LODWORD(v448.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v448.__r_.__value_.__r.__words[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448, (uint64_t)&v448.__r_.__value_.__r.__words[2], LODWORD(v448.__r_.__value_.__r.__words[1]) + 1, 16);
          v79 = LODWORD(v448.__r_.__value_.__r.__words[1]);
        }
        v80 = (_QWORD *)(v448.__r_.__value_.__r.__words[0] + 16 * v79);
        *v80 = 1;
        v80[1] = v78;
        ++LODWORD(v448.__r_.__value_.__r.__words[1]);
        v81 = llvm::Attribute::get(*((uint64_t **)v5 + 2), 67, 0);
        v82 = LODWORD(v448.__r_.__value_.__r.__words[1]);
        if (LODWORD(v448.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v448.__r_.__value_.__r.__words[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448, (uint64_t)&v448.__r_.__value_.__r.__words[2], LODWORD(v448.__r_.__value_.__r.__words[1]) + 1, 16);
          v82 = LODWORD(v448.__r_.__value_.__r.__words[1]);
        }
        v83 = (_QWORD *)(v448.__r_.__value_.__r.__words[0] + 16 * v82);
        *v83 = 2;
        v83[1] = v81;
        v84 = ++LODWORD(v448.__r_.__value_.__r.__words[1]);
        v85 = (std::string *)v491.__r_.__value_.__r.__words[0];
        if ((v491.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &v491;
        size = *((_BYTE *)&v491.__r_.__value_.__s + 23) & 0x7F;
        if ((v491.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v491.__r_.__value_.__l.__size_;
        v396 = size;
        v397 = (unsigned __int8 *)v85;
        v87 = llvm::AttributeList::get(*((uint64_t **)v5 + 2), (uint64_t)v448.__r_.__value_.__l.__data_, v84);
        v88 = v462;
        v89 = *v462;
        v90 = 8 << v72;
        LODWORD(v446.__r_.__value_.__l.__data_) = 8 << v72;
        if (8 << v72 <= 63)
        {
          switch(v90)
          {
            case 32:
              v91 = v89 + 1960;
              goto LABEL_81;
            case 16:
              v91 = v89 + 1936;
              goto LABEL_81;
            case 8:
              v91 = v89 + 1912;
              goto LABEL_81;
          }
        }
        else
        {
          if (v90 == 64)
          {
            v91 = v89 + 1984;
            goto LABEL_81;
          }
          if (v90 == 128)
          {
            v91 = v89 + 2008;
            goto LABEL_81;
          }
        }
        v116 = sub_1C5270984(v89 + 2168, &v446);
        v91 = *((_QWORD *)v116 + 1);
        if (!v91)
        {
          v390 = v116;
          v91 = sub_1C484358C(*v88 + 2040, 24, 3);
          data = (int)v446.__r_.__value_.__l.__data_;
          *(_QWORD *)v91 = v88;
          *(_QWORD *)(v91 + 16) = 0;
          *(_DWORD *)(v91 + 8) = (data << 8) | 0xD;
          *(_DWORD *)(v91 + 12) = 0;
          *((_QWORD *)v390 + 1) = v91;
        }
LABEL_81:
        v92 = sub_1C6291FE0(v41, v397, v396, v87, (uint64_t **)(v89 + 1576), v91, *v462 + 1960);
        v93 = 0;
        v94 = &v402[16 * v72];
        *((_QWORD *)v94 + 15) = v92;
        *((_QWORD *)v94 + 16) = v95;
        do
        {
          v492[v93-- + 20] = (v74 % 0xA) | 0x30;
          v296 = v74 > 9;
          v74 /= 0xAuLL;
        }
        while (v296);
        sub_1C4E61270(&v446, &v493[v93], v493, -v93);
        v96 = std::string::insert(&v446, 0, "__msan_maybe_store_origin_");
        v97 = v96->__r_.__value_.__r.__words[0];
        *(_QWORD *)v492 = v96->__r_.__value_.__l.__size_;
        *(_QWORD *)&v492[7] = *(std::string::size_type *)((char *)&v96->__r_.__value_.__r.__words[1] + 7);
        v98 = HIBYTE(v96->__r_.__value_.__r.__words[2]);
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v491.__r_.__value_.__l.__data_);
        v491.__r_.__value_.__r.__words[0] = v97;
        v491.__r_.__value_.__l.__size_ = *(_QWORD *)v492;
        *(std::string::size_type *)((char *)&v491.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v492[7];
        *((_BYTE *)&v491.__r_.__value_.__s + 23) = v98;
        if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v446.__r_.__value_.__l.__data_);
        v446.__r_.__value_.__r.__words[0] = (std::string::size_type)&v446.__r_.__value_.__r.__words[2];
        v446.__r_.__value_.__l.__size_ = 0x200000000;
        v99 = llvm::Attribute::get(*((uint64_t **)v402 + 2), 67, 0);
        v100 = LODWORD(v446.__r_.__value_.__r.__words[1]);
        if (LODWORD(v446.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v446.__r_.__value_.__r.__words[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v446, (uint64_t)&v446.__r_.__value_.__r.__words[2], LODWORD(v446.__r_.__value_.__r.__words[1]) + 1, 16);
          v100 = LODWORD(v446.__r_.__value_.__r.__words[1]);
        }
        v101 = (_QWORD *)(v446.__r_.__value_.__r.__words[0] + 16 * v100);
        *v101 = 1;
        v101[1] = v99;
        ++LODWORD(v446.__r_.__value_.__r.__words[1]);
        v102 = llvm::Attribute::get(*((uint64_t **)v402 + 2), 67, 0);
        v103 = LODWORD(v446.__r_.__value_.__r.__words[1]);
        v400 = v72;
        if (LODWORD(v446.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v446.__r_.__value_.__r.__words[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v446, (uint64_t)&v446.__r_.__value_.__r.__words[2], LODWORD(v446.__r_.__value_.__r.__words[1]) + 1, 16);
          v103 = LODWORD(v446.__r_.__value_.__r.__words[1]);
        }
        v104 = (_QWORD *)(v446.__r_.__value_.__r.__words[0] + 16 * v103);
        *v104 = 3;
        v104[1] = v102;
        v105 = ++LODWORD(v446.__r_.__value_.__r.__words[1]);
        if ((v491.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = &v491;
        else
          v106 = (std::string *)v491.__r_.__value_.__r.__words[0];
        if ((v491.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = *((_BYTE *)&v491.__r_.__value_.__s + 23) & 0x7F;
        else
          v107 = v491.__r_.__value_.__l.__size_;
        v108 = llvm::AttributeList::get(*((uint64_t **)v402 + 2), (uint64_t)v446.__r_.__value_.__l.__data_, v105);
        v109 = v462;
        v110 = *v462;
        *(_DWORD *)v492 = v90;
        v398 = v108;
        if (v90 <= 63)
        {
          switch(v90)
          {
            case 32:
              v111 = (_QWORD *)(v110 + 1960);
              break;
            case 16:
              v111 = (_QWORD *)(v110 + 1936);
              break;
            case 8:
              v111 = (_QWORD *)(v110 + 1912);
              break;
            default:
LABEL_122:
              v118 = sub_1C5270984(v110 + 2168, v492);
              v111 = (_QWORD *)*((_QWORD *)v118 + 1);
              if (!v111)
              {
                v119 = v118;
                v111 = (_QWORD *)sub_1C484358C(*v109 + 2040, 24, 3);
                v120 = *(_DWORD *)v492;
                *v111 = v109;
                v111[2] = 0;
                v111[1] = (v120 << 8) | 0xDu;
                *((_QWORD *)v119 + 1) = v111;
              }
              break;
          }
        }
        else if (v90 == 64)
        {
          v111 = (_QWORD *)(v110 + 1984);
        }
        else
        {
          if (v90 != 128)
            goto LABEL_122;
          v111 = (_QWORD *)(v110 + 2008);
        }
        v112 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
        v113 = sub_1C62A98B0(v41, (unsigned __int8 *)v106, v107, v398, (uint64_t **)(v110 + 1576), (uint64_t)v111, v112, *v462 + 1960);
        v5 = v402;
        v114 = &v402[16 * v400];
        *((_QWORD *)v114 + 23) = v113;
        *((_QWORD *)v114 + 24) = v115;
        if ((std::string::size_type *)v446.__r_.__value_.__l.__data_ != &v446.__r_.__value_.__r.__words[2])
          free(v446.__r_.__value_.__l.__data_);
        if ((std::string::size_type *)v448.__r_.__value_.__l.__data_ != &v448.__r_.__value_.__r.__words[2])
          free(v448.__r_.__value_.__l.__data_);
        if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v491.__r_.__value_.__l.__data_);
        v72 = v400 + 1;
        if (v400 == 3)
        {
          v169 = (uint64_t **)(*v462 + 1576);
          v170 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
          v171 = *((_QWORD *)v402 + 3);
          v172 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
          *((_QWORD *)v402 + 31) = sub_1C62ADB34(v41, v169, v170, v171, v172, *((_QWORD *)v402 + 3));
          *((_QWORD *)v402 + 32) = v173;
          v174 = (uint64_t **)(*v462 + 1576);
          v175 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
          *((_QWORD *)v402 + 33) = sub_1C6291FE0(v41, "__msan_poison_stack", 0x13uLL, 0, v174, v175, *((_QWORD *)v402 + 3));
          *((_QWORD *)v402 + 34) = v176;
          v177 = (unsigned int *)__p;
          goto LABEL_149;
        }
      }
    }
    v121 = (_QWORD *)*((_QWORD *)v5 + 2);
    __p = &v456;
    __src = (void *)0x200000000;
    v462 = v121;
    v463 = &v469;
    v464 = &v470;
    v465 = 0;
    LODWORD(v466) = 0;
    WORD2(v466) = 512;
    BYTE6(v466) = 7;
    v461 = 0;
    v460 = 0;
    v468 = 0;
    v467 = 0;
    v469 = &unk_1E8167888;
    v470 = &unk_1E8167A08;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *((_QWORD *)v5 + 11) = 0;
    *((_QWORD *)v5 + 13) = sub_1C6212CB8(v41, "__msan_warning", 0xEuLL, 0, (uint64_t **)(*v121 + 1576), *v121 + 1960);
    *((_QWORD *)v5 + 14) = v122;
    llvm::ArrayType::get((llvm::ArrayType *)(*v462 + 1984), (llvm::Type *)0x64);
    v124 = v123;
    llvm::ArrayType::get((llvm::ArrayType *)(*v462 + 1984), (llvm::Type *)0x64);
    v126 = v125;
    llvm::ArrayType::get((llvm::ArrayType *)(*v462 + 1984), (llvm::Type *)0x64);
    v128 = v127;
    llvm::ArrayType::get((llvm::ArrayType *)(*v462 + 1984), (llvm::Type *)0x64);
    v130 = v129;
    v131 = *v462 + 1984;
    llvm::ArrayType::get(*((llvm::ArrayType **)v5 + 4), (llvm::Type *)0xC8);
    v132 = *((_QWORD *)v5 + 4);
    v133 = *v124;
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    v448.__r_.__value_.__l.__size_ = v126;
    v448.__r_.__value_.__r.__words[2] = v128;
    v449 = v130;
    v450[0] = v131;
    v450[1] = v134;
    v450[2] = v132;
    v450[3] = v132;
    v135 = (llvm::PointerType *)llvm::StructType::get(v133, (uint64_t)&v448, 8, 0);
    *((_QWORD *)v5 + 45) = v135;
    v136 = (uint64_t **)llvm::PointerType::get(v135, 0);
    *((_QWORD *)v5 + 46) = sub_1C6210688(v41, "__msan_get_context_state", 0x18uLL, 0, v136);
    *((_QWORD *)v5 + 47) = v137;
    v138 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
    v139 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1960), 0);
    v140 = *v138;
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
    v448.__r_.__value_.__l.__size_ = v139;
    v141 = (uint64_t **)llvm::StructType::get(v140, (uint64_t)&v448, 2, 0);
    v142 = 0;
    v143 = 1;
    do
    {
      std::to_string(&v446, v143);
      v144 = std::string::insert(&v446, 0, "__msan_metadata_ptr_for_load_");
      v145 = v144->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v448.__r_.__value_.__l.__data_ = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
      v448.__r_.__value_.__r.__words[2] = v145;
      v144->__r_.__value_.__l.__size_ = 0;
      v144->__r_.__value_.__r.__words[2] = 0;
      v144->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      std::to_string(&v491, v143);
      v146 = std::string::insert(&v491, 0, "__msan_metadata_ptr_for_store_");
      v147 = v146->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v446.__r_.__value_.__l.__data_ = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
      v446.__r_.__value_.__r.__words[2] = v147;
      v146->__r_.__value_.__l.__size_ = 0;
      v146->__r_.__value_.__r.__words[2] = 0;
      v146->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v491.__r_.__value_.__l.__data_);
      if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v148 = &v448;
      else
        v148 = (std::string *)v448.__r_.__value_.__r.__words[0];
      if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v149 = *((_BYTE *)&v448.__r_.__value_.__s + 23) & 0x7F;
      else
        v149 = v448.__r_.__value_.__l.__size_;
      v150 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
      v151 = &v5[v142];
      v151[56] = sub_1C6212CB8(v404, (unsigned __int8 *)v148, v149, 0, v141, v150);
      v151[57] = v152;
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v153 = &v446;
      else
        v153 = (std::string *)v446.__r_.__value_.__r.__words[0];
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v154 = *((_BYTE *)&v446.__r_.__value_.__s + 23) & 0x7F;
      else
        v154 = v446.__r_.__value_.__l.__size_;
      v155 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
      v151[64] = sub_1C6212CB8(v404, (unsigned __int8 *)v153, v154, 0, v141, v155);
      v151[65] = v156;
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v448.__r_.__value_.__l.__data_);
      v143 *= 2;
      v142 += 16;
    }
    while (v142 != 64);
    v157 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
    *((_QWORD *)v5 + 52) = sub_1C62AD9AC(v404, "__msan_metadata_ptr_for_load_n", 0x1EuLL, v141, v157, *v462 + 1984);
    *((_QWORD *)v5 + 53) = v158;
    v159 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
    *((_QWORD *)v5 + 54) = sub_1C62AD9AC(v404, "__msan_metadata_ptr_for_store_n", 0x1FuLL, v141, v159, *v462 + 1984);
    *((_QWORD *)v5 + 55) = v160;
    v161 = (uint64_t **)(*v462 + 1576);
    v162 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
    v163 = *((_QWORD *)v5 + 3);
    v164 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
    *((_QWORD *)v5 + 48) = sub_1C62ADA70(v404, v161, v162, v163, v164);
    *((_QWORD *)v5 + 49) = v165;
    v166 = (uint64_t **)(*v462 + 1576);
    v167 = llvm::PointerType::get((llvm::PointerType *)(*v462 + 1912), 0);
    *((_QWORD *)v5 + 50) = sub_1C6291FE0(v404, "__msan_unpoison_alloca", 0x16uLL, 0, v166, v167, *((_QWORD *)v5 + 3));
    *((_QWORD *)v5 + 51) = v168;
    v177 = (unsigned int *)__p;
LABEL_149:
    if (v177 != &v456)
      free(v177);
    v20 = (std::string::size_type)&v407;
    v5[96] = 1;
    v4 = v391;
    if (v476 != v478)
      free(v476);
  }
  v178 = v4[10];
  v179 = v178 - 3;
  if (!v178)
    v179 = 0;
  v180 = v179 + 5;
  for (i = v179[6]; i != (uint64_t *)v180; i = (uint64_t *)i[1])
  {
    v182 = (uint64_t)(i - 3);
    if (i)
      v183 = i - 3;
    else
      v183 = 0;
    if (*((_BYTE *)v183 + 16) != 83)
      goto LABEL_167;
  }
  v182 = 0;
LABEL_167:
  sub_1C4773D54((uint64_t)&__p, v182, 0, 0, 0);
  v479[0] = 257;
  Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&__p, 60, 0, 0, 0, 0, 0, (uint64_t)&v476);
  if (__p != &v456)
    free(__p);
  if (*v5)
  {
    sub_1C4773D54((uint64_t)&__p, Intrinsic, 0, 0, 0);
    v185 = (uint64_t **)*((_QWORD *)v408 + 46);
    v186 = *((_QWORD *)v408 + 47);
    v479[0] = 257;
    v188 = (uint64_t *)sub_1C4774778((uint64_t *)&__p, v185, v186, 0, 0, (uint64_t)&v476, 0);
    v189 = *(llvm::ConstantInt **)(*v462 + 1960);
    LODWORD(v477) = *(_DWORD *)(*v462 + 1968) >> 8;
    if (v477 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 0, 0);
    else
      v476 = 0;
    v191 = llvm::ConstantInt::get(v189, (llvm::LLVMContext *)&v476, v187);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v192 = (llvm::GetElementPtrInst *)*((_QWORD *)v408 + 45);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
    v193 = *(llvm::ConstantInt **)(*v462 + 1960);
    LODWORD(v477) = *(_DWORD *)(*v462 + 1968) >> 8;
    if (v477 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 0, 0);
    else
      v476 = 0;
    v194 = llvm::ConstantInt::get(v193, (llvm::LLVMContext *)&v476, v190);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v448.__r_.__value_.__l.__size_ = (std::string::size_type)v194;
    v476 = "param_shadow";
    v479[0] = 259;
    v195 = sub_1C509D7B0((uint64_t *)&__p, v192, v188, (llvm::Value *)&v448, 2, (uint64_t)&v476);
    v197 = (uint64_t)v408;
    *((_QWORD *)v408 + 5) = v195;
    v198 = *(llvm::GetElementPtrInst **)(v197 + 360);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
    v199 = *(llvm::ConstantInt **)(*v462 + 1960);
    v200 = *(_DWORD *)(*v462 + 1968);
    LODWORD(v477) = v200 >> 8;
    if (v200 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 1, 0);
    }
    else
    {
      if (v200 <= 0xFF)
        v201 = 0;
      else
        v201 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v200);
      v476 = (void *)(v201 & 1);
    }
    v202 = llvm::ConstantInt::get(v199, (llvm::LLVMContext *)&v476, v196);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v448.__r_.__value_.__l.__size_ = (std::string::size_type)v202;
    v476 = "retval_shadow";
    v479[0] = 259;
    v203 = sub_1C509D7B0((uint64_t *)&__p, v198, v188, (llvm::Value *)&v448, 2, (uint64_t)&v476);
    v205 = (uint64_t)v408;
    *((_QWORD *)v408 + 7) = v203;
    v206 = *(llvm::GetElementPtrInst **)(v205 + 360);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
    v207 = *(llvm::ConstantInt **)(*v462 + 1960);
    v208 = *(_DWORD *)(*v462 + 1968);
    LODWORD(v477) = v208 >> 8;
    if (v208 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 2, 0);
    }
    else
    {
      if (v208 <= 0xFF)
        LOBYTE(v209) = 0;
      else
        v209 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v208);
      v476 = (void *)(v209 & 2);
    }
    v210 = llvm::ConstantInt::get(v207, (llvm::LLVMContext *)&v476, v204);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v448.__r_.__value_.__l.__size_ = (std::string::size_type)v210;
    v476 = "va_arg_shadow";
    v479[0] = 259;
    v211 = sub_1C509D7B0((uint64_t *)&__p, v206, v188, (llvm::Value *)&v448, 2, (uint64_t)&v476);
    v213 = (uint64_t)v408;
    *((_QWORD *)v408 + 9) = v211;
    v214 = *(llvm::GetElementPtrInst **)(v213 + 360);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
    v215 = *(llvm::ConstantInt **)(*v462 + 1960);
    v216 = *(_DWORD *)(*v462 + 1968);
    LODWORD(v477) = v216 >> 8;
    if (v216 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 3, 0);
    }
    else
    {
      if (v216 <= 0xFF)
        LOBYTE(v217) = 0;
      else
        v217 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v216);
      v476 = (void *)(v217 & 3);
    }
    v218 = llvm::ConstantInt::get(v215, (llvm::LLVMContext *)&v476, v212);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v448.__r_.__value_.__l.__size_ = (std::string::size_type)v218;
    v476 = "va_arg_origin";
    v479[0] = 259;
    v219 = sub_1C509D7B0((uint64_t *)&__p, v214, v188, (llvm::Value *)&v448, 2, (uint64_t)&v476);
    v221 = (uint64_t)v408;
    *((_QWORD *)v408 + 10) = v219;
    v222 = *(llvm::GetElementPtrInst **)(v221 + 360);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
    v223 = *(llvm::ConstantInt **)(*v462 + 1960);
    v224 = *(_DWORD *)(*v462 + 1968);
    LODWORD(v477) = v224 >> 8;
    if (v224 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 4, 0);
    }
    else
    {
      if (v224 <= 0xFF)
        LOBYTE(v225) = 0;
      else
        v225 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v224);
      v476 = (void *)(v225 & 4);
    }
    v226 = llvm::ConstantInt::get(v223, (llvm::LLVMContext *)&v476, v220);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v448.__r_.__value_.__l.__size_ = (std::string::size_type)v226;
    v476 = "va_arg_overflow_size";
    v479[0] = 259;
    v227 = sub_1C509D7B0((uint64_t *)&__p, v222, v188, (llvm::Value *)&v448, 2, (uint64_t)&v476);
    v229 = (uint64_t)v408;
    *((_QWORD *)v408 + 11) = v227;
    v230 = *(llvm::GetElementPtrInst **)(v229 + 360);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
    v231 = *(llvm::ConstantInt **)(*v462 + 1960);
    v232 = *(_DWORD *)(*v462 + 1968);
    LODWORD(v477) = v232 >> 8;
    if (v232 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 5, 0);
    }
    else
    {
      if (v232 <= 0xFF)
        LOBYTE(v233) = 0;
      else
        v233 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v232);
      v476 = (void *)(v233 & 5);
    }
    v234 = llvm::ConstantInt::get(v231, (llvm::LLVMContext *)&v476, v228);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v448.__r_.__value_.__l.__size_ = (std::string::size_type)v234;
    v476 = "param_origin";
    v479[0] = 259;
    v235 = sub_1C509D7B0((uint64_t *)&__p, v230, v188, (llvm::Value *)&v448, 2, (uint64_t)&v476);
    v237 = (uint64_t)v408;
    *((_QWORD *)v408 + 6) = v235;
    v238 = *(llvm::GetElementPtrInst **)(v237 + 360);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
    v239 = *(llvm::ConstantInt **)(*v462 + 1960);
    v240 = *(_DWORD *)(*v462 + 1968);
    LODWORD(v477) = v240 >> 8;
    if (v240 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v476, 6, 0);
    }
    else
    {
      if (v240 <= 0xFF)
        LOBYTE(v241) = 0;
      else
        v241 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v240);
      v476 = (void *)(v241 & 6);
    }
    v242 = llvm::ConstantInt::get(v239, (llvm::LLVMContext *)&v476, v236);
    if (v477 >= 0x41 && v476)
      MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
    v448.__r_.__value_.__l.__size_ = (std::string::size_type)v242;
    v476 = "retval_origin";
    v479[0] = 259;
    v243 = sub_1C509D7B0((uint64_t *)&__p, v238, v188, (llvm::Value *)&v448, 2, (uint64_t)&v476);
    *((_QWORD *)v408 + 8) = v243;
    if (__p != &v456)
      free(__p);
  }
  v447[1] = 0;
  v447[0] = 0;
  v446.__r_.__value_.__r.__words[2] = (std::string::size_type)v447;
  *(_OWORD *)&v446.__r_.__value_.__l.__data_ = xmmword_1C8662270;
  llvm::Function::removeFnAttrs((uint64_t)v4, (uint64_t)&v446);
  v476 = *(void **)(Intrinsic + 40);
  sub_1C586DB8C((uint64_t *)&v476, (uint64_t)&__p);
  v244 = v479;
  v476 = v479;
  v245 = __src;
  if (__src == __p)
  {
    v477 = v479;
    v246 = __src;
  }
  else
  {
    v388 = v456;
    v244 = malloc_type_malloc(8 * v456, 0x4065EBACuLL);
    if (!v244)
    {
      if (v388)
        goto LABEL_499;
      v244 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      v20 = (std::string::size_type)&v407;
      if (!v244)
        goto LABEL_499;
    }
    v477 = v244;
    v246 = __p;
    v245 = __src;
  }
  v247 = v457;
  v478[0] = v456;
  if (v245 == v246)
    v248 = v457;
  else
    v248 = v456;
  if (v248)
  {
    memmove(v244, v245, 8 * v248);
    v247 = v457;
  }
  v478[1] = v247;
  v478[2] = v458;
  v488 = 0;
  v486 = 0;
  v487 = 0;
  sub_1C4E19D7C(&v486, v466, v467, (v467 - (_BYTE *)v466) >> 5);
  v249 = v450;
  v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v450;
  v250 = v470;
  if (v470 != v469)
  {
    v389 = v471;
    v249 = malloc_type_malloc(8 * v471, 0x4065EBACuLL);
    if (v249 || !v389 && (v249 = malloc_type_malloc(1uLL, 0x4065EBACuLL), v20 = (std::string::size_type)&v407, v249))
    {
      v448.__r_.__value_.__l.__size_ = (std::string::size_type)v249;
      v251 = v469;
      v250 = v470;
      goto LABEL_218;
    }
LABEL_499:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v448.__r_.__value_.__l.__size_ = (std::string::size_type)v450;
  v251 = v470;
LABEL_218:
  v252 = v472;
  LODWORD(v448.__r_.__value_.__r.__words[2]) = v471;
  if (v250 == v251)
    v253 = v472;
  else
    v253 = v471;
  if (v253)
  {
    memmove(v249, v250, 8 * v253);
    v252 = v472;
  }
  HIDWORD(v448.__r_.__value_.__r.__words[2]) = v252;
  LODWORD(v449) = v473;
  v453 = 0;
  v451 = 0;
  v452 = 0;
  sub_1C4E19D7C(&v451, v474, v475, (v475 - (_BYTE *)v474) >> 5);
  while (1)
  {
    if (v487 - (_BYTE *)v486 != v452 - (_BYTE *)v451)
      goto LABEL_238;
    if (v486 == v487)
      break;
    v254 = (char *)v451 + 16;
    v255 = (char *)v486 + 16;
    while (1)
    {
      v256 = v255 - 16;
      if (*((_QWORD *)v255 - 2) != *((_QWORD *)v254 - 2))
        break;
      v257 = v254[8];
      if (v255[8])
        v258 = v257 == 0;
      else
        v258 = 1;
      if (v258)
      {
        if ((v255[8] == 0) == (v257 != 0))
          break;
      }
      else if (*(_DWORD *)v255 != *(_DWORD *)v254)
      {
        break;
      }
      v254 += 32;
      v255 += 32;
      if (v256 + 32 == v487)
        goto LABEL_244;
    }
LABEL_238:
    v259 = *((_QWORD *)v487 - 4);
    v260 = v259 + 40;
    v261 = *(_QWORD *)(v259 + 48);
    if (v261 != v260)
    {
      do
      {
        v262 = *(_QWORD *)(v261 + 8);
        if (v261)
          v263 = v261 - 24;
        else
          v263 = 0;
        sub_1C58A908C((uint64_t)&v407, v263);
        v261 = v262;
      }
      while (v262 != v260);
    }
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v476);
  }
LABEL_244:
  if (v451)
  {
    v452 = v451;
    operator delete(v451);
  }
  if (v448.__r_.__value_.__l.__size_ != v448.__r_.__value_.__r.__words[0])
    free((void *)v448.__r_.__value_.__l.__size_);
  if (v486)
  {
    v487 = (char *)v486;
    operator delete(v486);
  }
  if (v477 != v476)
    free(v477);
  if (v474)
  {
    v475 = v474;
    operator delete(v474);
  }
  if (v470 != v469)
    free(v470);
  if (v466)
  {
    v467 = v466;
    operator delete(v466);
  }
  if (__src != __p)
    free(__src);
  if ((_DWORD)v410)
  {
    v264 = (uint64_t *)v409;
    v265 = (uint64_t *)((char *)v409 + 8 * v410);
    do
    {
      v266 = *v264;
      v20 = (std::string::size_type)sub_1C58A06BC((uint64_t)&v407, *v264);
      if (*((_DWORD *)v408 + 1))
        v267 = sub_1C58A11D4((uint64_t)&v407, v266);
      else
        v267 = 0;
      v268 = *(_DWORD *)(v266 + 20) & 0x7FFFFFF;
      if ((_DWORD)v268)
      {
        v269 = 0;
        v270 = 0;
        v271 = 32 * v268;
        do
        {
          v272 = *(_DWORD *)(v266 + 20);
          if ((v272 & 0x40000000) != 0)
            v273 = *(_QWORD *)(v266 - 8);
          else
            v273 = v266 - 32 * (v272 & 0x7FFFFFF);
          v274 = sub_1C58A06BC((uint64_t)&v407, *(_QWORD *)(v273 + v270));
          v275 = *(_DWORD *)(v266 + 20);
          if ((v275 & 0x40000000) != 0)
            v276 = *(_QWORD *)(v266 - 8);
          else
            v276 = v266 - 32 * (v275 & 0x7FFFFFF);
          sub_1C477667C((llvm::PHINode *)v20, (uint64_t)v274, *(_QWORD *)(v276 + 32 * *(unsigned int *)(v266 + 60) + v269));
          if (v267)
          {
            v277 = *(_DWORD *)(v266 + 20);
            if ((v277 & 0x40000000) != 0)
              v278 = *(_QWORD *)(v266 - 8);
            else
              v278 = v266 - 32 * (v277 & 0x7FFFFFF);
            v279 = sub_1C58A11D4((uint64_t)&v407, *(_QWORD *)(v278 + v270));
            v280 = *(_DWORD *)(v266 + 20);
            if ((v280 & 0x40000000) != 0)
              v281 = *(_QWORD *)(v266 - 8);
            else
              v281 = v266 - 32 * (v280 & 0x7FFFFFF);
            sub_1C477667C((llvm::PHINode *)v267, (uint64_t)v279, *(_QWORD *)(v281 + 32 * *(unsigned int *)(v266 + 60) + v269));
          }
          v270 += 32;
          v269 += 8;
        }
        while (v271 != v270);
      }
      ++v264;
    }
    while (v264 != v265);
  }
  (*(void (**)(_QWORD *))(*v425 + 40))(v425);
  if (v434 && (_DWORD)v441)
  {
    v282 = (uint64_t *)v440;
    v283 = (uint64_t *)((char *)v440 + 16 * v441);
    v20 = (std::string::size_type)&v407;
    do
    {
      v284 = v282[1];
      sub_1C58A8BD8(&v407, v284, *v282);
      v285 = sub_1C477672C((uint64_t)&v435, v284);
      if (v436 == v435)
        v286 = (uint64_t *)((char *)&v437 + 4);
      else
        v286 = &v437;
      if (v285 != (_QWORD *)((char *)v436 + 8 * *(unsigned int *)v286))
      {
        *v285 = -2;
        ++v438;
      }
      v282 += 2;
    }
    while (v282 != v283);
  }
  if (v436 == v435)
    v287 = (uint64_t *)((char *)&v437 + 4);
  else
    v287 = &v437;
  v288 = *(unsigned int *)v287;
  if ((_DWORD)v288)
  {
    v289 = 8 * v288;
    v290 = (uint64_t *)v436;
    while ((unint64_t)*v290 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v290;
      v289 -= 8;
      if (!v289)
        goto LABEL_307;
    }
  }
  else
  {
    v290 = (uint64_t *)v436;
  }
  v291 = (unint64_t *)((char *)v436 + 8 * v288);
  if (v290 != (uint64_t *)v291)
  {
    v292 = *v290;
LABEL_303:
    sub_1C58A8BD8(&v407, v292, 0);
    v293 = (unint64_t *)(v290 + 1);
    while (v293 != v291)
    {
      v294 = *v293++;
      v292 = v294;
      if (v294 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v290 = (uint64_t *)(v293 - 1);
        goto LABEL_303;
      }
    }
  }
LABEL_307:
  v295 = v444;
  v296 = dword_1ED814270 >= 0
      && v444 + (unint64_t)v432 > dword_1ED814270;
  v297 = v296;
  v399 = v297;
  if ((_DWORD)v432)
  {
    v298 = 24 * v432;
    v299 = (std::string::size_type *)((char *)v431 + 8);
    while (1)
    {
      v300 = (uint64_t *)*(v299 - 1);
      v20 = *v299;
      v301 = (uint64_t *)v299[1];
      sub_1C4773D54((uint64_t)&__p, (uint64_t)v301, 0, 0, 0);
      v302 = sub_1C58AD9E8((uint64_t)&v407, v300, (const llvm::APInt *)&__p);
      v303 = v302;
      if (v302)
        v304 = v302[16] > 0x14u;
      else
        v304 = 1;
      if (v304)
      {
        sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v301[5] + 56) + 40) + 272, *(_QWORD *)v302);
        v307 = v306;
        if ((_DWORD)v305 == 1)
        if (v307 >= 9)
          v308 = 32 - __clz(((v307 + 7) >> 3) - 1);
        else
          v308 = 0;
        v309 = v399;
        if (v308 >= 4)
          v309 = 0;
        if (v309 == 1 && !*v408)
        {
          v314 = &v408[16 * v308];
          v315 = (uint64_t **)*((_QWORD *)v314 + 15);
          v316 = *((_QWORD *)v314 + 16);
          v317 = v462;
          LODWORD(v476) = 8 << v308;
          switch(((8 << v308) - 8) >> 3)
          {
            case 0u:
              v318 = *v462 + 1912;
              break;
            case 1u:
              v318 = *v462 + 1936;
              break;
            case 3u:
              v318 = *v462 + 1960;
              break;
            case 7u:
              v318 = *v462 + 1984;
              break;
            default:
              v322 = sub_1C5270984(*v462 + 2168, &v476);
              v318 = *((_QWORD *)v322 + 1);
              if (!v318)
              {
                v405 = v322;
                v318 = sub_1C484358C(*v317 + 2040, 24, 3);
                v323 = (int)v476;
                *(_QWORD *)v318 = v317;
                *(_QWORD *)(v318 + 16) = 0;
                *(_DWORD *)(v318 + 8) = (v323 << 8) | 0xD;
                *(_DWORD *)(v318 + 12) = 0;
                *((_QWORD *)v405 + 1) = v318;
              }
              break;
          }
          v479[0] = 257;
          v448.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C4773E38((uint64_t *)&__p, 39, v303, v318, (uint64_t)&v476);
          if (!v20 || !*((_DWORD *)v408 + 1))
          {
            v320 = *(llvm::ConstantInt **)(*v462 + 1960);
            LODWORD(v477) = *(_DWORD *)(*v462 + 1968) >> 8;
            if (v477 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v476, 0, 0);
            else
              v476 = 0;
            v20 = (std::string::size_type)llvm::ConstantInt::get(v320, (llvm::LLVMContext *)&v476, v319);
            if (v477 >= 0x41)
            {
              if (v476)
                MEMORY[0x1CAA32F9C](v476, 0x1000C8000313F17);
            }
          }
          v448.__r_.__value_.__l.__size_ = v20;
          v479[0] = 257;
          v321 = sub_1C4774778((uint64_t *)&__p, v315, v316, (uint64_t *)&v448, 2, (uint64_t)&v476, 0);
          *(_QWORD *)(v321 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v321 + 64), **(uint64_t ***)v321, 1, 67);
          *(_QWORD *)(v321 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v321 + 64), **(uint64_t ***)v321, 2, 67);
          goto LABEL_337;
        }
        v476 = "_mscmp";
        v479[0] = 259;
        v310 = (llvm::Value *)sub_1C58ADDEC((llvm::ConstantInt **)v303, (uint64_t)&__p, (uint64_t)&v476);
        v311 = sub_1C5EBFBC0(v310, v301, v408[8] == 0, *((llvm::MDNode **)v408 + 79), 0, 0, 0, 0);
        v312 = 0;
        v460 = *((_QWORD *)v311 + 5);
        v461 = v311 + 24;
        v313 = (void *)*((_QWORD *)v311 + 6);
        v476 = v313;
        if (v313)
        {
          llvm::MetadataTracking::track((uint64_t)&v476, (unsigned __int8 *)v313, 2);
          v312 = v476;
        }
        sub_1C4774EF4((uint64_t)&__p, 0, (uint64_t)v312);
        if (v476)
          llvm::MetadataTracking::untrack((uint64_t)&v476, (unsigned __int8 *)v476);
      }
      else if (!byte_1ED8143F0 || (llvm::Constant::isZeroValue((llvm::Constant *)v302) & 1) != 0)
      {
        goto LABEL_337;
      }
      sub_1C58B2EF4((uint64_t)&v407, (uint64_t)&__p, (const llvm::APInt *)v20);
LABEL_337:
      if (__p != &v456)
        free(__p);
      v299 += 3;
      v298 -= 24;
      if (!v298)
      {
        v295 = v444;
        break;
      }
    }
  }
  if ((_DWORD)v295)
  {
    v325 = (uint64_t *)v443;
    v401 = (uint64_t *)((char *)v443 + 8 * v295);
    do
    {
      v326 = *v325;
      sub_1C4773D54((uint64_t)&v476, *v325, 0, 0, 0);
      v327 = *(uint64_t **)(v326 - 64);
      v328 = *(unsigned __int8 **)(v326 - 32);
      v329 = *(unsigned __int8 *)(v326 + 16);
      if (v329 == 60 || v329 == 61)
      {
        if ((*(_WORD *)(v326 + 18) & 0x380) == 0)
          goto LABEL_385;
      }
      else if ((v329 - 63) >= 3)
      {
LABEL_385:
        NullValue = sub_1C58A06BC((uint64_t)&v407, *(_QWORD *)(v326 - 64));
        goto LABEL_386;
      }
      sub_1C58A1544(&v407, *v327);
      if (!v330)
      {
        v333 = 0;
        goto LABEL_387;
      }
      NullValue = llvm::Constant::getNullValue(v330, v331);
LABEL_386:
      v333 = NullValue;
LABEL_387:
      v334 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v326 + 18) >> 1)) ^ 0x3F;
      v335 = word_1ED813A68;
      v336 = v20 & 0xFFFFFFFFFFFF0000 | v334;
      v20 = v336 | 0x100;
      v403 = v328;
      v337 = sub_1C58A0068(&v407, v328, (uint64_t)&v476, *v333, (unsigned __int16)v336 | 0x100u, 1);
      v406 = v338;
      v339 = (char *)operator new(0x80uLL);
      v340 = v339;
      *((_DWORD *)v339 + 21) = *((_DWORD *)v339 + 21) & 0x38000000 | 2;
      *(_QWORD *)v339 = 0;
      *((_QWORD *)v339 + 2) = 0;
      *((_QWORD *)v339 + 1) = 0;
      v341 = (llvm::Value **)(v339 + 8);
      *((_QWORD *)v339 + 5) = 0;
      *((_QWORD *)v339 + 6) = 0;
      *((_QWORD *)v339 + 4) = 0;
      v342 = (unsigned __int8 **)(v339 + 32);
      *((_QWORD *)v339 + 8) = **(_QWORD **)*v333 + 1576;
      v343 = (llvm::Value *)(v339 + 64);
      *((_QWORD *)v339 + 3) = v339 + 64;
      *((_QWORD *)v339 + 7) = v339 + 64;
      if (v335 <= v334)
        v335 = v334;
      *((_QWORD *)v339 + 9) = 0;
      v339[80] = 61;
      v339[81] = 0;
      *((_WORD *)v339 + 41) = 0;
      *((_DWORD *)v339 + 21) = 2;
      *(_OWORD *)(v339 + 88) = 0u;
      *(_OWORD *)(v339 + 104) = 0u;
      *((_DWORD *)v339 + 30) = 0;
      *(_QWORD *)v339 = v333;
      v344 = v333 + 1;
      v345 = v333[1];
      *v341 = v345;
      if (v345)
        *((_QWORD *)v345 + 2) = v341;
      *((_QWORD *)v339 + 2) = v344;
      *v344 = v339;
      if (*((_QWORD *)v339 + 4))
      {
        **((_QWORD **)v339 + 6) = *((_QWORD *)v339 + 5);
        v387 = *((_QWORD *)v339 + 5);
        if (v387)
          *(_QWORD *)(v387 + 16) = *((_QWORD *)v339 + 6);
      }
      *v342 = v337;
      if (v337)
      {
        v348 = *((_QWORD *)v337 + 1);
        v347 = (unsigned __int8 ***)(v337 + 8);
        v346 = v348;
        *((_QWORD *)v339 + 5) = v348;
        if (v348)
          *(_QWORD *)(v346 + 16) = v339 + 40;
        *((_QWORD *)v339 + 6) = v347;
        *v347 = v342;
      }
      *((_WORD *)v339 + 41) = 2 * v334;
      v339[124] = 1;
      v459 = 257;
      (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v484 + 2))(v484, v343, &__p, v480, v481);
      if ((_DWORD)v477)
      {
        v374 = (char *)v476;
        v375 = (char *)v476 + 16 * v477;
        v376 = (unsigned __int8 **)(v340 + 112);
        do
        {
          v377 = *(_DWORD *)v374;
          v378 = (unsigned __int8 *)*((_QWORD *)v374 + 1);
          if (v378)
          {
            if (!v377)
            {
              v448.__r_.__value_.__r.__words[0] = *((_QWORD *)v374 + 1);
              v393 = v376;
              llvm::MetadataTracking::track((uint64_t)&v448, v378, 2);
              v376 = v393;
              v379 = *v393;
              goto LABEL_449;
            }
          }
          else
          {
            v379 = *v376;
            if (!*v376 && (v340[87] & 0x20) == 0)
              goto LABEL_446;
            if (!v377)
            {
              v448.__r_.__value_.__r.__words[0] = 0;
LABEL_449:
              if (v379)
              {
                v395 = v376;
                llvm::MetadataTracking::untrack((uint64_t)v376, v379);
                v376 = v395;
              }
              v381 = (unsigned __int8 *)v448.__r_.__value_.__r.__words[0];
              *v376 = (unsigned __int8 *)v448.__r_.__value_.__r.__words[0];
              if (v381)
              {
                v394 = v376;
                llvm::MetadataTracking::retrack((uint64_t)&v448, v381, (uint64_t)v376);
                v376 = v394;
              }
              goto LABEL_446;
            }
          }
          v392 = v375;
          v380 = v376;
          llvm::Value::setMetadata(v343, *(_DWORD *)v374, (llvm::MDNode *)v378);
          v376 = v380;
          v375 = v392;
LABEL_446:
          v374 += 16;
        }
        while (v374 != v375);
      }
      v349 = *(unsigned __int8 *)(v326 + 16);
      if (v349 == 60 || v349 == 61)
      {
        if ((*(_WORD *)(v326 + 18) & 0x380) == 0)
          goto LABEL_400;
LABEL_399:
        *(_WORD *)(v326 + 18) = word_1C8662110[((unint64_t)*(unsigned __int16 *)(v326 + 18) >> 7) & 7] | *(_WORD *)(v326 + 18) & 0xFC7F;
        goto LABEL_400;
      }
      if ((v349 - 63) < 3)
        goto LABEL_399;
LABEL_400:
      if (*((_DWORD *)v408 + 1))
      {
        if (v349 == 60 || v349 == 61)
        {
          if ((*(_WORD *)(v326 + 18) & 0x380) == 0)
            goto LABEL_412;
        }
        else if ((v349 - 63) >= 3)
        {
LABEL_412:
          v350 = sub_1C58A11D4((uint64_t)&v407, (uint64_t)v327);
          v351 = v407[5] + 34;
          if (word_1ED813A68 <= v335)
            v352 = v335;
          else
            v352 = word_1ED813A68;
          sub_1C4768AD0((uint64_t)(v407[5] + 34), (uint64_t)*v333);
          v355 = v354;
          if ((_DWORD)v353 == 1)
          v356 = (unint64_t)(v355 + 7) >> 3;
          v357 = sub_1C58AD9E8((uint64_t)&v407, (uint64_t *)v333, (const llvm::APInt *)&v476);
          v358 = v357;
          if (v357 && v357[16] <= 0x14u)
          {
            if (byte_1ED8143F0 && (llvm::Constant::isZeroValue((llvm::Constant *)v357) & 1) == 0)
            {
              v359 = (unsigned __int8 *)sub_1C58AD678((uint64_t)v408, (uint64_t)v350, (uint64_t *)&v476);
              sub_1C58A1270(&v407, (uint64_t *)&v476, v359, v406, v356, v352);
            }
          }
          else
          {
            sub_1C4768AD0((uint64_t)v351, *(_QWORD *)v357);
            v362 = v361;
            if ((_DWORD)v360 == 1)
            LODWORD(v363) = 32 - __clz(((v362 + 7) >> 3) - 1);
            if (v362 >= 9)
              v363 = v363;
            else
              v363 = 0;
            v364 = v399;
            if (v363 >= 4)
              v364 = 0;
            if (v364 == 1 && !*v408)
            {
              v369 = &v408[16 * v363];
              v370 = (uint64_t **)*((_QWORD *)v369 + 23);
              v371 = *((_QWORD *)v369 + 24);
              v372 = v482;
              LODWORD(__p) = 8 << v363;
              switch(((8 << v363) - 8) >> 3)
              {
                case 0u:
                  v373 = (_QWORD *)(*v482 + 1912);
                  break;
                case 1u:
                  v373 = (_QWORD *)(*v482 + 1936);
                  break;
                case 3u:
                  v373 = (_QWORD *)(*v482 + 1960);
                  break;
                case 7u:
                  v373 = (_QWORD *)(*v482 + 1984);
                  break;
                default:
                  v384 = sub_1C5270984(*v482 + 2168, &__p);
                  v373 = (_QWORD *)*((_QWORD *)v384 + 1);
                  if (!v373)
                  {
                    v385 = v384;
                    v373 = (_QWORD *)sub_1C484358C(*v372 + 2040, 24, 3);
                    v386 = (int)__p;
                    *v373 = v372;
                    v373[2] = 0;
                    v373[1] = (v386 << 8) | 0xDu;
                    *((_QWORD *)v385 + 1) = v373;
                  }
                  break;
              }
              v459 = 257;
              v491.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C4773E38((uint64_t *)&v476, 39, v358, (uint64_t)v373, (uint64_t)&__p);
              v382 = llvm::PointerType::get((llvm::PointerType *)(*v482 + 1912), 0);
              v459 = 257;
              v491.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1C5098D9C((uint64_t *)&v476, v403, v382, (uint64_t)&__p);
              v491.__r_.__value_.__r.__words[2] = (std::string::size_type)v350;
              LOWORD(v450[0]) = 257;
              v383 = sub_1C4774778((uint64_t *)&v476, v370, v371, (uint64_t *)&v491, 3, (uint64_t)&v448, 0);
              *(_QWORD *)(v383 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v383 + 64), **(uint64_t ***)v383, 1, 67);
              *(_QWORD *)(v383 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v383 + 64), **(uint64_t ***)v383, 3, 67);
            }
            else
            {
              __p = "_mscmp";
              v459 = 259;
              v365 = (llvm::Value *)sub_1C58ADDEC((llvm::ConstantInt **)v358, (uint64_t)&v476, (uint64_t)&__p);
              if (v481)
                v366 = (uint64_t *)(v481 - 24);
              else
                v366 = 0;
              v367 = sub_1C5EBFBC0(v365, v366, 0, *((llvm::MDNode **)v408 + 80), 0, 0, 0, 0);
              sub_1C4773D54((uint64_t)&__p, (uint64_t)v367, 0, 0, 0);
              v368 = (unsigned __int8 *)sub_1C58AD678((uint64_t)v408, (uint64_t)v350, (uint64_t *)&__p);
              sub_1C58A1270(&v407, (uint64_t *)&__p, v368, v406, v356, v352);
              if (__p != &v456)
                free(__p);
            }
          }
        }
      }
      if (v476 != v478)
        free(v476);
      ++v325;
    }
    while (v325 != v401);
  }
  sub_1C5010E9C((uint64_t)&v446.__r_.__value_.__r.__words[2], v447[0]);
  if (v443 != v445)
    free(v443);
  if (v440 != v442)
    free(v440);
  if (v436 != v435)
    free(v436);
  if (v431 != v433)
    free(v431);
  v324 = v425;
  v425 = 0;
  if (v324)
    (*(void (**)(_QWORD *))(*v324 + 8))(v324);
  if (v424)
  {
    sub_1C4E43068((uint64_t)v423);
    MEMORY[0x1CAA32FB4](v423[0], 8);
    v424 = 0;
  }
  sub_1C62ADBF8(v420, v422);
  MEMORY[0x1CAA32FB4](v420, 8);
  if (v419)
  {
    sub_1C4E43068((uint64_t)v418);
    MEMORY[0x1CAA32FB4](v418[0], 8);
    v419 = 0;
  }
  sub_1C62ADBF8(v415, v417);
  MEMORY[0x1CAA32FB4](v415, 8);
  if (v412 != v414)
    free(v412);
  if (v409 != v411)
    free(v409);
  return 1;
}

void llvm::initializeMemorySanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71B8);
  if (v2 != -1)
  {
    v5[0] = sub_1C589D960;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71B8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C589D960(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "MemorySanitizer: detects uninitialized reads.";
  *(_QWORD *)(v2 + 8) = 45;
  *(_QWORD *)(v2 + 16) = "msan";
  *(_QWORD *)(v2 + 24) = 4;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5220;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C589DDC0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C589D9F4(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5220;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E817DDE8;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 688) = a2;
  *(_DWORD *)(a1 + 696) = a3;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1EF8F71B8);
  if (v5 != -1)
  {
    v9[0] = sub_1C589D960;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1EF8F71B8, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C589DACC(uint64_t *a1)
{
  uint64_t v2;
  _DWORD *v3;
  const llvm::APInt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::PointerType *v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  llvm::ConstantInt *v15;
  llvm::ValueHandleBase *v16;
  const char *v17;
  unsigned int v18;
  __int16 v19;

  v2 = a1[2];
  v3 = operator new(0x78uLL);
  v5 = (uint64_t)(v3 + 8);
  v3[13] = v3[13] & 0x38000000 | 1;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 8;
  v6 = *a1;
  v7 = **(_QWORD **)(a1[1] + 64);
  v8 = (llvm::PointerType *)(v7 + 1960);
  v9 = *(unsigned int *)(v2 + 4);
  v10 = *(llvm::ConstantInt **)(v7 + 1960);
  v11 = *(unsigned int *)(v7 + 1968);
  v18 = v11 >> 8;
  if (v11 >> 8 > 0x40)
  {
    v15 = v10;
    llvm::APInt::initSlowCase((llvm::APInt *)&v17, v9, 0);
    v10 = v15;
  }
  else
  {
    if (v11 <= 0xFF)
      v12 = 0;
    else
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
    v17 = (const char *)(v12 & v9);
  }
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v17, v4);
  if (v18 >= 0x41 && v17)
  {
    v16 = v13;
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    v13 = v16;
  }
  v17 = "__msan_track_origins";
  v19 = 259;
  return llvm::GlobalVariable::GlobalVariable(v5, v6, v8, 1, 5, (uint64_t)v13, (uint64_t)&v17, 0, 0, 0, 0);
}

uint64_t sub_1C589DC04(uint64_t *a1)
{
  uint64_t v2;
  _DWORD *v3;
  const llvm::APInt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::PointerType *v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  llvm::ConstantInt *v15;
  llvm::ValueHandleBase *v16;
  const char *v17;
  unsigned int v18;
  __int16 v19;

  v2 = a1[2];
  v3 = operator new(0x78uLL);
  v5 = (uint64_t)(v3 + 8);
  v3[13] = v3[13] & 0x38000000 | 1;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 8;
  v6 = *a1;
  v7 = **(_QWORD **)(a1[1] + 64);
  v8 = (llvm::PointerType *)(v7 + 1960);
  v9 = *(unsigned __int8 *)(v2 + 8);
  v10 = *(llvm::ConstantInt **)(v7 + 1960);
  v11 = *(unsigned int *)(v7 + 1968);
  v18 = v11 >> 8;
  if (v11 >> 8 > 0x40)
  {
    v15 = v10;
    llvm::APInt::initSlowCase((llvm::APInt *)&v17, v9, 0);
    v10 = v15;
  }
  else
  {
    if (v11 <= 0xFF)
      v12 = 0;
    else
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
    v17 = (const char *)(v12 & v9);
  }
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v17, v4);
  if (v18 >= 0x41 && v17)
  {
    v16 = v13;
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    v13 = v16;
  }
  v17 = "__msan_keep_going";
  v19 = 259;
  return llvm::GlobalVariable::GlobalVariable(v5, v6, v8, 1, 5, (uint64_t)v13, (uint64_t)&v17, 0, 0, 0, 0);
}

void sub_1C589DD3C(uint64_t *a1, llvm::GlobalObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::ConstantExpr *v5;
  size_t *inserted;

  v3 = *a1;
  if (byte_1ED8144B0)
  {
    inserted = llvm::Module::getOrInsertComdat(*a1, "msan.module_ctor", 0x10uLL);
    llvm::GlobalObject::setComdat(a2, (llvm::Comdat *)inserted);
    v3 = *a1;
    v4 = (uint64_t)a2;
    v5 = a2;
  }
  else
  {
    v4 = (uint64_t)a2;
    v5 = 0;
  }
  sub_1C5F50894("llvm.global_ctors", v3, v4, 0, v5);
}

uint64_t sub_1C589DDC0()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  BOOL v3;
  int v4;

  v0 = operator new();
  if (word_1ED833C10 != 0 && byte_1ED833C88 != 0)
    LODWORD(v1) = 2;
  else
    LODWORD(v1) = 0;
  if (word_1ED8339D0)
    v1 = dword_1ED833A48;
  else
    v1 = v1;
  v2 = byte_1ED833B08;
  if (!word_1ED833A90)
    v2 = word_1ED833C10 != 0 && byte_1ED833C88 != 0;
  if (byte_1ED833BC8)
    v3 = word_1ED833B50 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = 256;
  return sub_1C589D9F4(v0, (word_1ED833C10 != 0) & (byte_1ED833C88 != 0) | (unint64_t)(v1 << 32), v4 & 0xFFFFFF00 | v2);
}

void sub_1C589DE6C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817DDE8;
  if (*((_BYTE *)a1 + 680))
    *((_BYTE *)a1 + 680) = 0;
  llvm::Pass::~Pass(a1);
}

void sub_1C589DE88(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817DDE8;
  if (*((_BYTE *)a1 + 680))
    *((_BYTE *)a1 + 680) = 0;
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C589DEC4()
{
  return "MemorySanitizerLegacyPass";
}

uint64_t sub_1C589DED4(uint64_t a1, uint64_t **a2)
{
  char *v5;
  uint64_t **v6;

  if (!*(_BYTE *)(a1 + 688))
  {
    v6 = a2;
    llvm::getOrCreateSanitizerCtorAndInitFunctions(a2, "msan.module_ctor", (llvm::UndefValue *)0x10, "__msan_init", 0xBuLL, 0, 0, &v5, 0, 0, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1C589DD3C, (uint64_t)&v6, 0, 0);
  }
  if (*(_BYTE *)(a1 + 680))
    *(_BYTE *)(a1 + 680) = 0;
  sub_1C589A678(a1 + 32, (llvm::LLVMContext **)a2, *(_QWORD *)(a1 + 688), *(_DWORD *)(a1 + 696));
  *(_BYTE *)(a1 + 680) = 1;
  return 1;
}

void *sub_1C589DF7C(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C589DF8C(uint64_t a1, uint64_t ***a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  void *v11;
  void **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15[2];
  int v16;
  uint64_t v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *__src;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetLibraryInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  llvm::TargetLibraryAnalysis::run(v6 + 32, (uint64_t)a2, (uint64_t)&v22);
  *(_QWORD *)(v6 + 240) = v22;
  if (*(_BYTE *)(v6 + 320))
  {
    if ((uint64_t *)(v6 + 240) == &v22)
    {
LABEL_16:
      *(_DWORD *)(v6 + 312) = v26;
      goto LABEL_17;
    }
    v7 = (void **)(v6 + 248);
    v8 = v24;
    v9 = *(unsigned int *)(v6 + 256);
    if (v9 >= v24)
    {
      if (v24)
        memmove(*v7, __src, 8 * v24);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v6 + 260) < v24)
    {
      *(_DWORD *)(v6 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v8, 8);
    }
    else if ((_DWORD)v9)
    {
      memmove(*v7, __src, 8 * v9);
      goto LABEL_13;
    }
    v9 = 0;
LABEL_13:
    if (v9 != v24)
      memcpy((char *)*v7 + 8 * v9, (char *)__src + 8 * v9, 8 * v24 - 8 * v9);
LABEL_15:
    *(_DWORD *)(v6 + 256) = v8;
    goto LABEL_16;
  }
  v11 = (void *)(v6 + 264);
  *(_QWORD *)(v6 + 248) = v6 + 264;
  v12 = (void **)(v6 + 248);
  *(_QWORD *)(v6 + 256) = 0x600000000;
  v13 = v24;
  if (v24 && v12 != &__src)
  {
    if (v24 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v24, 8);
      v14 = v24;
      if (!v24)
      {
LABEL_27:
        *(_DWORD *)(v6 + 256) = v13;
        goto LABEL_28;
      }
      v11 = *v12;
    }
    else
    {
      v14 = v24;
    }
    memcpy(v11, __src, 8 * v14);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v6 + 312) = v26;
  *(_BYTE *)(v6 + 320) = 1;
LABEL_17:
  if (__src != &v25)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v17);
  sub_1C4D8B52C(v15);
  return sub_1C589AA54((_BYTE *)(a1 + 32), a2, v6 + 240);
}

char *sub_1C589E1F4(unint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62AD6D0(a1, v4, &v4[6 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &off_1E817DE88;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C589E2D4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DEB0;
  v2 = (_QWORD *)a1[8];
  if (v2 != a1 + 10)
    free(v2);
  return a1;
}

void sub_1C589E314(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DEB0;
  v2 = (_QWORD *)a1[8];
  if (v2 != a1 + 10)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C589E364(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  const char *v24;
  char v25;
  char v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  const char *v33;
  unint64_t PrimitiveSizeInBits;
  int v35;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  llvm::Value *v40;
  int v41;
  BOOL v42;
  const char *v43;
  char v44;
  char v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  unsigned __int8 *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  const llvm::APInt *v57;
  unsigned __int8 *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  __int16 v61;
  uint64_t v62;
  llvm::ConstantInt *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  __int16 v67;
  uint64_t v68;
  llvm::ConstantInt *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  llvm::ConstantInt *v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char v81;
  char v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  llvm::Value *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 **v95;
  int v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  llvm::Value *v103;
  llvm::Value *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int v114;
  __int16 v115;
  _QWORD v116[2];

  v4 = *(_DWORD *)(a2 + 20);
  v5 = v4 & 0x7FFFFFF;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    v7 = (uint64_t)a3;
    v8 = a1;
    v9 = 0;
  }
  else
  {
    if (v6 == 39)
      v9 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v9 = 2;
    v7 = (uint64_t)a3;
    v8 = a1;
  }
  v10 = *(_DWORD *)(v8 + 8);
  v11 = a2 - 32 * v5;
  if (v4 < 0)
  {
    v100 = *(_QWORD *)(v11 - 8);
    if ((v100 & 0xFFFFFFFF0) != 0)
      v12 = (*(_DWORD *)(v11 - 12) - *(_DWORD *)(v11 - v100));
    else
      v12 = 0;
    v7 = (uint64_t)a3;
    v8 = a1;
  }
  else
  {
    v12 = 0;
  }
  if (v11 != a2 - 32 * v9 - 32 * v12 - 32)
  {
    v107 = v10;
    v13 = 0;
    v105 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 40) + 272;
    v14 = -32 * v5;
    v15 = (32 * v9 + 32 * v12) ^ 0xFFFFFFFFFFFFFFE0;
    v112 = 48;
    v110 = v15;
    while (1)
    {
      v16 = *(unsigned __int8 **)(a2 + v14);
      v17 = (v14 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5;
      v18 = *(_DWORD *)(*(_QWORD *)(a2 + 72) + 12) - 1;
      if (llvm::CallBase::paramHasAttr(a2, v17, 69))
      {
        if (v18 <= v17)
        {
          v111 = v13;
          v19 = sub_1C6199478(a2, v17);
          sub_1C4768AD0(v105, v19);
          v21 = v20;
          v23 = v22 == 1;
          llvm::DataLayout::getAlignment(v105, v19);
          v26 = v25;
          if (v23)
          v27 = ((1 << v26) + ((unint64_t)(v21 + 7) >> 3) - 1) & -(1 << v26);
          v28 = sub_1C589FD0C(a1, v19, v7, v107, (v27 + 7) & 0xFFFFFFF8);
          if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4))
            v29 = sub_1C589FECC(a1, v7, v107);
          else
            v29 = 0;
          v107 += (v27 + 7) & 0xFFFFFFF8;
          if (!v28)
          {
            v8 = a1;
            goto LABEL_62;
          }
          v104 = (llvm::Value *)v29;
          v102 = v102 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1ED813A68) | 0x100;
          v58 = sub_1C58A0068(*(_QWORD **)(a1 + 32), v16, v7, (llvm::PointerType *)(**(_QWORD **)(v7 + 64) + 1912), HIBYTE(word_1ED813A68) | 0x100u, 0);
          v60 = v59;
          v61 = HIBYTE(word_1ED813A68);
          v62 = **(_QWORD **)(v7 + 64);
          v63 = *(llvm::ConstantInt **)(v62 + 1984);
          v64 = *(unsigned int *)(v62 + 1992);
          v114 = v64 >> 8;
          if (v64 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v113, v27, 0);
          }
          else
          {
            if (v64 <= 0xFF)
              v65 = 0;
            else
              v65 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v64);
            v113 = v65 & v27;
          }
          v66 = (uint64_t *)llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v113, v57);
          if (v114 >= 0x41 && v113)
            MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
          llvm::IRBuilderBase::CreateMemTransferInst(v7, 194, (llvm::Value *)v28, v61 | 0x100, (llvm::Value *)v58, v61 | 0x100, v66, 0, 0, 0, 0, 0);
          v8 = a1;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4))
          {
            v67 = HIBYTE(word_1ED813A68);
            v68 = **(_QWORD **)(v7 + 64);
            v69 = *(llvm::ConstantInt **)(v68 + 1984);
            v70 = *(unsigned int *)(v68 + 1992);
            v114 = v70 >> 8;
            v13 = v111;
            if (v70 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v113, v27, 0);
            }
            else
            {
              if (v70 <= 0xFF)
                v71 = 0;
              else
                v71 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v70);
              v113 = v71 & v27;
            }
            v72 = (uint64_t *)llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v113, a3);
            if (v114 >= 0x41 && v113)
              MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
            llvm::IRBuilderBase::CreateMemTransferInst(v7, 194, v104, v67 | 0x100, v60, v67 | 0x100, v72, 0, 0, 0, 0, 0);
            v8 = a1;
          }
          else
          {
LABEL_62:
            v13 = v111;
          }
          v15 = v110;
          goto LABEL_64;
        }
        goto LABEL_64;
      }
      v30 = *(_QWORD *)v16;
      v31 = *(_DWORD *)(*(_QWORD *)v16 + 8);
      v32 = v31;
      if ((*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) == 0x12)
        v32 = *(unsigned __int8 *)(**(_QWORD **)(v30 + 16) + 8);
      if (v32 < 7 || v31 == 10)
      {
        v35 = 1;
      }
      else
      {
        if (v31 != 13)
          goto LABEL_24;
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v16);
        if ((_DWORD)v33 == 1)
        if (PrimitiveSizeInBits >= 0x41)
        {
          v31 = *(unsigned __int8 *)(v30 + 8);
          v8 = a1;
          v15 = v110;
LABEL_24:
          v35 = 2 * (v31 != 15);
          goto LABEL_25;
        }
        v35 = 0;
        v8 = a1;
        v15 = v110;
      }
LABEL_25:
      if (v13 > 0x2F && v35 == 0)
        v35 = 2;
      if (!v35)
      {
        v37 = sub_1C589FD0C(v8, *(_QWORD *)v16, v7, v13, 8);
        if (*(_DWORD *)(*(_QWORD *)(v8 + 24) + 4))
          v38 = sub_1C589FECC(v8, v7, v13);
        else
          v38 = 0;
        v111 = v13 + 8;
        goto LABEL_47;
      }
      if (v35 != 2)
      {
        if (v35 != 1)
          goto LABEL_64;
        if (v112 < *(_DWORD *)(v8 + 8))
        {
          v111 = v13;
          v37 = sub_1C589FD0C(v8, *(_QWORD *)v16, v7, v112, 16);
          if (*(_DWORD *)(*(_QWORD *)(v8 + 24) + 4))
            v38 = sub_1C589FECC(v8, v7, v112);
          else
            v38 = 0;
          v46 = v112 + 16;
          goto LABEL_50;
        }
      }
      if (v18 <= v17)
      {
        v111 = v13;
        v39 = *(_QWORD *)v16;
        sub_1C4768AD0(v105, *(_QWORD *)v16);
        v103 = v40;
        v42 = v41 == 1;
        llvm::DataLayout::getAlignment(v105, v39);
        v45 = v44;
        if (v42)
        v37 = sub_1C589FD0C(a1, *(_QWORD *)v16, (uint64_t)a3, v107, 8);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4))
          v38 = sub_1C589FECC(a1, (uint64_t)a3, v107);
        else
          v38 = 0;
        v107 += ((((1 << v45) - 1 + (((unint64_t)v103 + 7) >> 3)) & -(1 << v45)) + 7) & 0xFFFFFFF8;
        v7 = (uint64_t)a3;
        v8 = a1;
LABEL_47:
        v46 = v112;
LABEL_50:
        v47 = v18 > v17 || v37 == 0;
        v112 = v46;
        if (!v47)
        {
          v48 = (uint64_t *)sub_1C58A06BC(*(_QWORD *)(v8 + 32), (uint64_t)v16);
          v49 = (uint64_t *)v7;
          v50 = v48;
          v51 = v106 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1ED813A68) | 0x100;
          sub_1C509CCE8(v49, v48, (uint64_t)v37, HIBYTE(word_1ED813A68) | 0x100, 0);
          v106 = v51;
          if (*(_DWORD *)(*(_QWORD *)(v8 + 24) + 4))
          {
            v52 = (unsigned __int8 *)sub_1C58A11D4(*(_QWORD *)(v8 + 32), (uint64_t)v16);
            sub_1C4768AD0(v105, *v50);
            v55 = v54;
            if ((_DWORD)v53 == 1)
            if (HIBYTE(word_1ED813A68) <= word_1ED813A68)
              v56 = word_1ED813A68;
            else
              v56 = HIBYTE(word_1ED813A68);
            v7 = (uint64_t)a3;
            sub_1C58A1270(*(_QWORD **)(v8 + 32), (uint64_t *)a3, v52, v38, (unint64_t)(v55 + 7) >> 3, v56);
          }
          else
          {
            v7 = (uint64_t)a3;
          }
        }
        goto LABEL_62;
      }
LABEL_64:
      v14 += 32;
      if (v15 == v14)
      {
        v73 = *(_DWORD *)(v8 + 8);
        v10 = v107;
        goto LABEL_90;
      }
    }
  }
  v73 = v10;
LABEL_90:
  v74 = **(_QWORD **)(v7 + 64);
  v75 = v10 - v73;
  v76 = *(llvm::ConstantInt **)(v74 + 1984);
  v77 = *(_DWORD *)(v74 + 1992);
  v114 = v77 >> 8;
  if (v77 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v113, v75, 0);
  }
  else
  {
    if (v77 <= 0xFF)
      v78 = 0;
    else
      v78 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v77);
    v113 = v78 & v75;
  }
  v79 = (uint64_t *)llvm::ConstantInt::get(v76, (llvm::LLVMContext *)&v113, a3);
  if (v114 >= 0x41 && v113)
    MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
  v80 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 88);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 56) + 40) + 272, *v79);
  v82 = v81;
  v83 = (char *)operator new(0x80uLL);
  v84 = v83;
  *((_DWORD *)v83 + 21) = *((_DWORD *)v83 + 21) & 0x38000000 | 2;
  *(_QWORD *)v83 = 0;
  *((_QWORD *)v83 + 2) = 0;
  *((_QWORD *)v83 + 1) = 0;
  *((_QWORD *)v83 + 5) = 0;
  *((_QWORD *)v83 + 6) = 0;
  *((_QWORD *)v83 + 4) = 0;
  v85 = v83 + 32;
  *((_QWORD *)v83 + 8) = **(_QWORD **)*v79 + 1576;
  v86 = (llvm::Value *)(v83 + 64);
  *((_QWORD *)v83 + 3) = v83 + 64;
  *((_QWORD *)v83 + 7) = v83 + 64;
  *((_QWORD *)v83 + 9) = 0;
  v83[80] = 61;
  v83[81] = 0;
  *((_WORD *)v83 + 41) = 0;
  *((_DWORD *)v83 + 21) = 2;
  *(_OWORD *)(v83 + 88) = 0u;
  *(_OWORD *)(v83 + 104) = 0u;
  *((_DWORD *)v83 + 30) = 0;
  v87 = v79 + 1;
  v88 = v79[1];
  *(_QWORD *)v83 = v79;
  *((_QWORD *)v83 + 1) = v88;
  if (v88)
    *(_QWORD *)(v88 + 16) = v83 + 8;
  *((_QWORD *)v83 + 2) = v87;
  *v87 = v83;
  if (*((_QWORD *)v83 + 4))
  {
    **((_QWORD **)v83 + 6) = *((_QWORD *)v83 + 5);
    v101 = *((_QWORD *)v83 + 5);
    if (v101)
      *(_QWORD *)(v101 + 16) = *((_QWORD *)v83 + 6);
  }
  *v85 = v80;
  if (v80)
  {
    v91 = *(_QWORD *)(v80 + 8);
    v90 = (_QWORD *)(v80 + 8);
    v89 = v91;
    *((_QWORD *)v83 + 5) = v91;
    if (v91)
      *(_QWORD *)(v89 + 16) = v83 + 40;
    *((_QWORD *)v83 + 6) = v90;
    *v90 = v85;
  }
  *((_WORD *)v83 + 41) = 2 * (v82 & 0x3F);
  v83[124] = 1;
  v115 = 257;
  (*(void (**)(_QWORD, llvm::Value *, unint64_t *, _QWORD, _QWORD))(**(_QWORD **)(v7 + 80) + 16))(*(_QWORD *)(v7 + 80), v86, &v113, *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
  v92 = *(unsigned int *)(v7 + 8);
  if ((_DWORD)v92)
  {
    v93 = *(_QWORD *)v7;
    v94 = *(_QWORD *)v7 + 16 * v92;
    v95 = (unsigned __int8 **)(v84 + 112);
    do
    {
      v96 = *(_DWORD *)v93;
      v97 = *(unsigned __int8 **)(v93 + 8);
      if (v97)
      {
        if (!v96)
        {
          v116[0] = *(_QWORD *)(v93 + 8);
          llvm::MetadataTracking::track((uint64_t)v116, v97, 2);
          v98 = *v95;
          goto LABEL_116;
        }
      }
      else
      {
        v98 = *v95;
        if (!*v95 && (v84[87] & 0x20) == 0)
          goto LABEL_113;
        if (!v96)
        {
          v116[0] = 0;
LABEL_116:
          if (v98)
            llvm::MetadataTracking::untrack((uint64_t)(v84 + 112), v98);
          v99 = (unsigned __int8 *)v116[0];
          *v95 = (unsigned __int8 *)v116[0];
          if (v99)
            llvm::MetadataTracking::retrack((uint64_t)v116, v99, (uint64_t)(v84 + 112));
          goto LABEL_113;
        }
      }
      llvm::Value::setMetadata(v86, *(_DWORD *)v93, (llvm::MDNode *)v97);
LABEL_113:
      v93 += 16;
    }
    while (v93 != v94);
  }
}

void sub_1C589ED44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 18) & 0x3FF0) != 0x4F0)
  {
    v4 = *(unsigned int *)(a1 + 72);
    if (v4 >= *(_DWORD *)(a1 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(a1 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v4) = a2;
    ++*(_DWORD *)(a1 + 72);
    sub_1C58A1E88(a1, a2);
  }
}

void sub_1C589EDC8(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 18) & 0x3FF0) != 0x4F0)
    sub_1C58A1E88(a1, a2);
}

void sub_1C589EDE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char *v6;
  char *v7;
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Value **v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::PointerType *v15;
  unsigned __int8 **v16;
  uint64_t v17;
  llvm::PointerType *v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 *v26;
  llvm::PointerType *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  char *v32;
  char *v33;
  llvm::Value ***v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Value *v39;
  llvm::Value ****v40;
  llvm::Value *v41;
  char *v42;
  char *v43;
  unsigned __int8 **v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  char v51;
  char v52;
  char *v53;
  char *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  const llvm::APInt *v59;
  unsigned __int8 *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *v63;
  uint64_t v64;
  llvm::ConstantInt *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t *v68;
  const llvm::APInt *v69;
  uint64_t v70;
  llvm::Value *v71;
  uint64_t v72;
  llvm::ConstantInt *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t *v76;
  llvm::PointerType *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  llvm::Value **v80;
  llvm::Value *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  char v84;
  char v85;
  char *v86;
  char *v87;
  llvm::Value *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  llvm::Value *v93;
  llvm::Value *v94;
  llvm::GetElementPtrInst *v95;
  _QWORD *v96;
  unsigned int v97;
  uint64_t ***v98;
  llvm::GetElementPtrInst *v99;
  _QWORD *v100;
  unsigned int v101;
  uint64_t ***v102;
  char *v103;
  char *v104;
  llvm::Value ***v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  llvm::Value *v109;
  llvm::Value ****v110;
  llvm::Value *v111;
  char *v112;
  char *v113;
  unsigned __int8 **v114;
  int v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  char *v119;
  char *v120;
  unsigned __int8 **v121;
  int v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  char *v126;
  char *v127;
  unsigned __int8 **v128;
  int v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  _QWORD *v137;
  llvm::Value *v138;
  _QWORD *v139;
  llvm::Value *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  unsigned __int8 **v146;
  int v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  char *v151;
  char *v152;
  unsigned __int8 **v153;
  int v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  uint64_t v158;
  unsigned __int8 *v159;
  _QWORD v160[4];
  __int16 v161;
  _BYTE v162[32];
  __int16 v163;
  unint64_t v164;
  unsigned int v165;
  __int16 v166;
  unsigned __int8 *v167;
  void *v168;
  unsigned int v169;
  _BYTE v170[32];
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 72))
    return;
  sub_1C4773D54((uint64_t)&v168, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 448), 0, 0, 0);
  v2 = *(_QWORD *)v173 + 1984;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 88);
  v163 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v171 + 56) + 40) + 272, v2);
  v5 = v4;
  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  v8 = (llvm::Value *)(v6 + 32);
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 32;
  v166 = 257;
  *((_QWORD *)v6 + 4) = v2;
  *((_QWORD *)v6 + 5) = 0;
  *((_WORD *)v6 + 24) = 60;
  *((_DWORD *)v6 + 13) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 22) = 0;
  *(_QWORD *)v6 = v3;
  *((_QWORD *)v6 + 1) = 0;
  if (v3)
  {
    v11 = *(_QWORD *)(v3 + 8);
    v10 = (_QWORD *)(v3 + 8);
    v9 = v11;
    *((_QWORD *)v6 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v6 + 8;
    *((_QWORD *)v6 + 2) = v10;
    *v10 = v6;
  }
  *((_WORD *)v6 + 25) = 2 * (v5 & 0x3F);
  v6[92] = 1;
  llvm::Value::setName((uint64_t ***)v6 + 4, (uint64_t)&v164);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v8, v162, v171, v172);
  if (v169)
  {
    v151 = (char *)v168;
    v152 = (char *)v168 + 16 * v169;
    v153 = (unsigned __int8 **)(v7 + 80);
    do
    {
      v154 = *(_DWORD *)v151;
      v155 = (unsigned __int8 *)*((_QWORD *)v151 + 1);
      if (v155)
      {
        if (!v154)
        {
          v160[0] = *((_QWORD *)v151 + 1);
          llvm::MetadataTracking::track((uint64_t)v160, v155, 2);
          v156 = *v153;
          goto LABEL_171;
        }
      }
      else
      {
        v156 = *v153;
        if (!*v153 && (v7[55] & 0x20) == 0)
          goto LABEL_168;
        if (!v154)
        {
          v160[0] = 0;
LABEL_171:
          if (v156)
            llvm::MetadataTracking::untrack((uint64_t)(v7 + 80), v156);
          v157 = (unsigned __int8 *)v160[0];
          *v153 = (unsigned __int8 *)v160[0];
          if (v157)
            llvm::MetadataTracking::retrack((uint64_t)v160, v157, (uint64_t)(v7 + 80));
          goto LABEL_168;
        }
      }
      llvm::Value::setMetadata(v8, *(_DWORD *)v151, (llvm::MDNode *)v155);
LABEL_168:
      v151 += 16;
    }
    while (v151 != v152);
  }
  *(_QWORD *)(a1 + 56) = v8;
  v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 24), *(unsigned int *)(a1 + 8), 0);
  v13 = *(_QWORD *)(a1 + 56);
  v163 = 257;
  v14 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v174 + 16))(v174, v12, v13, 0, 0);
  if (!v14)
  {
    v166 = 257;
    v135 = (char *)operator new(0x80uLL);
    v136 = v135;
    *((_QWORD *)v135 + 4) = 0;
    v137 = v135 + 32;
    *((_QWORD *)v135 + 5) = 0;
    *((_QWORD *)v135 + 6) = 0;
    *((_QWORD *)v135 + 8) = *v12;
    v14 = (llvm::Value *)(v135 + 64);
    *((_QWORD *)v135 + 3) = v135 + 64;
    *((_QWORD *)v135 + 7) = v135 + 64;
    *((_QWORD *)v135 + 9) = 0;
    v135[80] = 41;
    v135[81] = 0;
    *((_WORD *)v135 + 41) = 0;
    *((_DWORD *)v135 + 21) = 2;
    *(_OWORD *)(v135 + 88) = 0u;
    *(_OWORD *)(v135 + 104) = 0u;
    *((_DWORD *)v135 + 30) = 0;
    *(_QWORD *)v135 = v12;
    v140 = v12[1];
    v139 = v12 + 1;
    v138 = v140;
    *((_QWORD *)v135 + 1) = v140;
    if (v140)
      *((_QWORD *)v138 + 2) = v135 + 8;
    *((_QWORD *)v135 + 2) = v139;
    *v139 = v135;
    if (*((_QWORD *)v135 + 4))
    {
      **((_QWORD **)v135 + 6) = *((_QWORD *)v135 + 5);
      v158 = *((_QWORD *)v135 + 5);
      if (v158)
        *(_QWORD *)(v158 + 16) = *((_QWORD *)v135 + 6);
    }
    *v137 = v13;
    if (v13)
    {
      v143 = *(_QWORD *)(v13 + 8);
      v142 = (_QWORD *)(v13 + 8);
      v141 = v143;
      *((_QWORD *)v135 + 5) = v143;
      if (v143)
        *(_QWORD *)(v141 + 16) = v135 + 40;
      *((_QWORD *)v135 + 6) = v142;
      *v142 = v137;
    }
    llvm::Value::setName((uint64_t ***)v135 + 8, (uint64_t)&v164);
    (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v14, v162, v171, v172);
    if (v169)
    {
      v144 = (char *)v168;
      v145 = (char *)v168 + 16 * v169;
      v146 = (unsigned __int8 **)(v136 + 112);
      do
      {
        v147 = *(_DWORD *)v144;
        v148 = (unsigned __int8 *)*((_QWORD *)v144 + 1);
        if (v148)
        {
          if (!v147)
          {
            v160[0] = *((_QWORD *)v144 + 1);
            llvm::MetadataTracking::track((uint64_t)v160, v148, 2);
            v149 = *v146;
            if (!*v146)
            {
LABEL_158:
              v150 = (unsigned __int8 *)v160[0];
              *v146 = (unsigned __int8 *)v160[0];
              if (v150)
                llvm::MetadataTracking::retrack((uint64_t)v160, v150, (uint64_t)(v136 + 112));
              goto LABEL_155;
            }
LABEL_152:
            llvm::MetadataTracking::untrack((uint64_t)(v136 + 112), v149);
            goto LABEL_158;
          }
        }
        else
        {
          v149 = *v146;
          if (!*v146 && (v136[87] & 0x20) == 0)
            goto LABEL_155;
          if (!v147)
          {
            v160[0] = 0;
            if (!v149)
              goto LABEL_158;
            goto LABEL_152;
          }
        }
        llvm::Value::setMetadata(v14, *(_DWORD *)v144, (llvm::MDNode *)v148);
LABEL_155:
        v144 += 16;
      }
      while (v144 != v145);
    }
  }
  v15 = (llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 1912);
  v166 = 257;
  v16 = sub_1C486A5CC((uint64_t *)&v168, v15, v14, (uint64_t)&v164);
  *(_QWORD *)(a1 + 40) = v16;
  llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v168, 194, (llvm::Value *)v16, 259, *(llvm::Value **)(*(_QWORD *)(a1 + 24) + 72), 259, (uint64_t *)v14, 0, 0, 0, 0, 0);
  v17 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v17 + 4))
  {
    v18 = (llvm::PointerType *)(**(_QWORD **)(v17 + 16) + 1912);
    v166 = 257;
    v19 = sub_1C486A5CC((uint64_t *)&v168, v18, v14, (uint64_t)&v164);
    *(_QWORD *)(a1 + 48) = v19;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v168, 194, (llvm::Value *)v19, 259, *(llvm::Value **)(*(_QWORD *)(a1 + 24) + 80), 259, (uint64_t *)v14, 0, 0, 0, 0, 0);
  }
  if (v168 != v170)
    free(v168);
  v20 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v20)
  {
    v21 = 0;
    while (1)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v21);
      v23 = *(_QWORD *)(v22 + 32);
      if (v23)
        v24 = v23 == *(_QWORD *)(v22 + 40) + 40;
      else
        v24 = 1;
      if (v24)
        v25 = 0;
      else
        v25 = v23 - 24;
      sub_1C4773D54((uint64_t)&v168, v25, 0, 0, 0);
      v26 = *(unsigned __int8 **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      v27 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 1984), 0);
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v163 = 257;
      v29 = sub_1C4773E38((uint64_t *)&v168, 47, v26, v28, (uint64_t)v162);
      v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 24), 16, 0);
      v161 = 257;
      v31 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v174 + 16))(v174, v29, v30, 0, 0);
      if (!v31)
      {
        v166 = 257;
        v32 = (char *)operator new(0x80uLL);
        v33 = v32;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 5) = 0;
        *((_QWORD *)v32 + 6) = 0;
        *((_QWORD *)v32 + 4) = 0;
        v34 = (llvm::Value ***)(v32 + 32);
        *((_QWORD *)v32 + 8) = *(_QWORD *)v29;
        v31 = (llvm::Value *)(v32 + 64);
        *((_QWORD *)v32 + 3) = v32 + 64;
        *((_QWORD *)v32 + 7) = v32 + 64;
        *((_QWORD *)v32 + 9) = 0;
        v32[80] = 41;
        v32[81] = 0;
        *((_WORD *)v32 + 41) = 0;
        *((_DWORD *)v32 + 21) = 2;
        *((_DWORD *)v32 + 30) = 0;
        *(_OWORD *)(v32 + 104) = 0u;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_QWORD *)v32 = v29;
        v37 = *((_QWORD *)v29 + 1);
        v36 = v29 + 8;
        v35 = v37;
        *((_QWORD *)v32 + 1) = v37;
        if (v37)
          *(_QWORD *)(v35 + 16) = v32 + 8;
        v159 = v26;
        *((_QWORD *)v32 + 2) = v36;
        *v36 = v32;
        if (*((_QWORD *)v32 + 4))
        {
          **((_QWORD **)v32 + 6) = *((_QWORD *)v32 + 5);
          v133 = *((_QWORD *)v32 + 5);
          if (v133)
            *(_QWORD *)(v133 + 16) = *((_QWORD *)v32 + 6);
        }
        v38 = v20;
        *v34 = v30;
        if (v30)
        {
          v41 = v30[1];
          v40 = (llvm::Value ****)(v30 + 1);
          v39 = v41;
          *((_QWORD *)v32 + 5) = v41;
          if (v41)
            *((_QWORD *)v39 + 2) = v32 + 40;
          *((_QWORD *)v32 + 6) = v40;
          *v40 = v34;
        }
        llvm::Value::setName((uint64_t ***)v32 + 8, (uint64_t)&v164);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v31, v160, v171, v172);
        if (v169)
        {
          v42 = (char *)v168;
          v43 = (char *)v168 + 16 * v169;
          v44 = (unsigned __int8 **)(v33 + 112);
          do
          {
            v45 = *(_DWORD *)v42;
            v46 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
            if (v46)
            {
              if (!v45)
              {
                v167 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
                llvm::MetadataTracking::track((uint64_t)&v167, v46, 2);
                v47 = *v44;
                if (!*v44)
                {
LABEL_41:
                  v48 = v167;
                  *v44 = v167;
                  if (v48)
                    llvm::MetadataTracking::retrack((uint64_t)&v167, v48, (uint64_t)(v33 + 112));
                  goto LABEL_38;
                }
LABEL_35:
                llvm::MetadataTracking::untrack((uint64_t)(v33 + 112), v47);
                goto LABEL_41;
              }
            }
            else
            {
              v47 = *v44;
              if (!*v44 && (v33[87] & 0x20) == 0)
                goto LABEL_38;
              if (!v45)
              {
                v167 = 0;
                if (!v47)
                  goto LABEL_41;
                goto LABEL_35;
              }
            }
            llvm::Value::setMetadata(v31, *(_DWORD *)v42, (llvm::MDNode *)v46);
LABEL_38:
            v42 += 16;
          }
          while (v42 != v43);
        }
        v20 = v38;
        v26 = v159;
      }
      v49 = llvm::PointerType::get(v27, 0);
      v166 = 257;
      v50 = sub_1C4773E38((uint64_t *)&v168, 48, (unsigned __int8 *)v31, v49, (uint64_t)&v164);
      v163 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v171 + 56) + 40) + 272, (uint64_t)v27);
      v52 = v51;
      v53 = (char *)operator new(0x60uLL);
      v54 = v53;
      v55 = (unsigned __int8 *)(v53 + 32);
      *((_QWORD *)v53 + 2) = 0;
      *((_QWORD *)v53 + 3) = v53 + 32;
      v166 = 257;
      *((_QWORD *)v53 + 4) = v27;
      *((_QWORD *)v53 + 5) = 0;
      *((_WORD *)v53 + 24) = 60;
      *((_DWORD *)v53 + 13) = 1;
      *(_OWORD *)(v53 + 56) = 0u;
      *(_OWORD *)(v53 + 72) = 0u;
      *((_DWORD *)v53 + 22) = 0;
      *(_QWORD *)v53 = v50;
      *((_QWORD *)v53 + 1) = 0;
      if (v50)
      {
        v58 = *((_QWORD *)v50 + 1);
        v57 = v50 + 8;
        v56 = v58;
        *((_QWORD *)v53 + 1) = v58;
        if (v58)
          *(_QWORD *)(v56 + 16) = v53 + 8;
        *((_QWORD *)v53 + 2) = v57;
        *v57 = v53;
      }
      *((_WORD *)v53 + 25) = 2 * (v52 & 0x3F);
      v53[92] = 1;
      llvm::Value::setName((uint64_t ***)v53 + 4, (uint64_t)&v164);
      (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v55, v162, v171, v172);
      if (v169)
        break;
LABEL_49:
      v60 = sub_1C58A0068(*(_QWORD **)(a1 + 32), v55, (uint64_t)&v168, (llvm::PointerType *)(*(_QWORD *)v173 + 1912), 260, 1);
      v62 = v61;
      v63 = *(llvm::Value **)(a1 + 40);
      v64 = *(unsigned int *)(a1 + 8);
      v65 = *(llvm::ConstantInt **)(*(_QWORD *)v173 + 1984);
      v66 = *(_DWORD *)(*(_QWORD *)v173 + 1992);
      v165 = v66 >> 8;
      if (v66 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v164, v64, 0);
      }
      else
      {
        if (v66 <= 0xFF)
          v67 = 0;
        else
          v67 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v66);
        v164 = v67 & v64;
      }
      v68 = (uint64_t *)llvm::ConstantInt::get(v65, (llvm::LLVMContext *)&v164, v59);
      if (v165 >= 0x41 && v164)
        MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v168, 194, (llvm::Value *)v60, 260, v63, 260, v68, 0, 0, 0, 0, 0);
      v70 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v70 + 4))
      {
        v71 = *(llvm::Value **)(a1 + 48);
        v72 = *(unsigned int *)(a1 + 8);
        v73 = *(llvm::ConstantInt **)(*(_QWORD *)v173 + 1984);
        v74 = *(_DWORD *)(*(_QWORD *)v173 + 1992);
        v165 = v74 >> 8;
        if (v74 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v164, v72, 0);
        }
        else
        {
          if (v74 <= 0xFF)
            v75 = 0;
          else
            v75 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v74);
          v164 = v75 & v72;
        }
        v76 = (uint64_t *)llvm::ConstantInt::get(v73, (llvm::LLVMContext *)&v164, v69);
        if (v165 >= 0x41 && v164)
          MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v168, 194, v62, 260, v71, 260, v76, 0, 0, 0, 0, 0);
        v70 = *(_QWORD *)(a1 + 24);
      }
      v77 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(v70 + 16) + 1984), 0);
      v78 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v163 = 257;
      v79 = sub_1C4773E38((uint64_t *)&v168, 47, v26, v78, (uint64_t)v162);
      v80 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 24), 8, 0);
      v161 = 257;
      v81 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v174 + 16))(v174, v79, v80, 0, 0);
      if (!v81)
      {
        v166 = 257;
        v103 = (char *)operator new(0x80uLL);
        v104 = v103;
        *(_QWORD *)v103 = 0;
        *((_QWORD *)v103 + 1) = 0;
        *((_QWORD *)v103 + 2) = 0;
        *((_QWORD *)v103 + 5) = 0;
        *((_QWORD *)v103 + 6) = 0;
        *((_QWORD *)v103 + 4) = 0;
        v105 = (llvm::Value ***)(v103 + 32);
        *((_QWORD *)v103 + 8) = *(_QWORD *)v79;
        v81 = (llvm::Value *)(v103 + 64);
        *((_QWORD *)v103 + 3) = v103 + 64;
        *((_QWORD *)v103 + 7) = v103 + 64;
        *((_QWORD *)v103 + 9) = 0;
        v103[80] = 41;
        v103[81] = 0;
        *((_WORD *)v103 + 41) = 0;
        *((_DWORD *)v103 + 21) = 2;
        *((_DWORD *)v103 + 30) = 0;
        *(_OWORD *)(v103 + 104) = 0u;
        *(_OWORD *)(v103 + 88) = 0u;
        *(_QWORD *)v103 = v79;
        v108 = *((_QWORD *)v79 + 1);
        v107 = v79 + 8;
        v106 = v108;
        *((_QWORD *)v103 + 1) = v108;
        if (v108)
          *(_QWORD *)(v106 + 16) = v103 + 8;
        *((_QWORD *)v103 + 2) = v107;
        *v107 = v103;
        if (*((_QWORD *)v103 + 4))
        {
          **((_QWORD **)v103 + 6) = *((_QWORD *)v103 + 5);
          v134 = *((_QWORD *)v103 + 5);
          if (v134)
            *(_QWORD *)(v134 + 16) = *((_QWORD *)v103 + 6);
        }
        *v105 = v80;
        if (v80)
        {
          v111 = v80[1];
          v110 = (llvm::Value ****)(v80 + 1);
          v109 = v111;
          *((_QWORD *)v103 + 5) = v111;
          if (v111)
            *((_QWORD *)v109 + 2) = v103 + 40;
          *((_QWORD *)v103 + 6) = v110;
          *v110 = v105;
        }
        llvm::Value::setName((uint64_t ***)v103 + 8, (uint64_t)&v164);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v81, v160, v171, v172);
        if (v169)
        {
          v112 = (char *)v168;
          v113 = (char *)v168 + 16 * v169;
          v114 = (unsigned __int8 **)(v104 + 112);
          do
          {
            v115 = *(_DWORD *)v112;
            v116 = (unsigned __int8 *)*((_QWORD *)v112 + 1);
            if (v116)
            {
              if (!v115)
              {
                v167 = (unsigned __int8 *)*((_QWORD *)v112 + 1);
                llvm::MetadataTracking::track((uint64_t)&v167, v116, 2);
                v117 = *v114;
                if (!*v114)
                {
LABEL_95:
                  v118 = v167;
                  *v114 = v167;
                  if (v118)
                    llvm::MetadataTracking::retrack((uint64_t)&v167, v118, (uint64_t)(v104 + 112));
                  goto LABEL_92;
                }
LABEL_89:
                llvm::MetadataTracking::untrack((uint64_t)(v104 + 112), v117);
                goto LABEL_95;
              }
            }
            else
            {
              v117 = *v114;
              if (!*v114 && (v104[87] & 0x20) == 0)
                goto LABEL_92;
              if (!v115)
              {
                v167 = 0;
                if (!v117)
                  goto LABEL_95;
                goto LABEL_89;
              }
            }
            llvm::Value::setMetadata(v81, *(_DWORD *)v112, (llvm::MDNode *)v116);
LABEL_92:
            v112 += 16;
          }
          while (v112 != v113);
        }
      }
      v82 = llvm::PointerType::get(v77, 0);
      v166 = 257;
      v83 = sub_1C4773E38((uint64_t *)&v168, 48, (unsigned __int8 *)v81, v82, (uint64_t)&v164);
      v163 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v171 + 56) + 40) + 272, (uint64_t)v77);
      v85 = v84;
      v86 = (char *)operator new(0x60uLL);
      v87 = v86;
      v88 = (llvm::Value *)(v86 + 32);
      *((_QWORD *)v86 + 2) = 0;
      *((_QWORD *)v86 + 3) = v86 + 32;
      v166 = 257;
      *((_QWORD *)v86 + 4) = v77;
      *((_QWORD *)v86 + 5) = 0;
      *((_WORD *)v86 + 24) = 60;
      *((_DWORD *)v86 + 13) = 1;
      *(_OWORD *)(v86 + 56) = 0u;
      *(_OWORD *)(v86 + 72) = 0u;
      *((_DWORD *)v86 + 22) = 0;
      *(_QWORD *)v86 = v83;
      *((_QWORD *)v86 + 1) = 0;
      if (v83)
      {
        v91 = *((_QWORD *)v83 + 1);
        v90 = v83 + 8;
        v89 = v91;
        *((_QWORD *)v86 + 1) = v91;
        if (v91)
          *(_QWORD *)(v89 + 16) = v86 + 8;
        *((_QWORD *)v86 + 2) = v90;
        *v90 = v86;
      }
      *((_WORD *)v86 + 25) = 2 * (v85 & 0x3F);
      v86[92] = 1;
      llvm::Value::setName((uint64_t ***)v86 + 4, (uint64_t)&v164);
      (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v88, v162, v171, v172);
      if (v169)
      {
        v126 = (char *)v168;
        v127 = (char *)v168 + 16 * v169;
        v128 = (unsigned __int8 **)(v87 + 80);
        do
        {
          v129 = *(_DWORD *)v126;
          v130 = (unsigned __int8 *)*((_QWORD *)v126 + 1);
          if (v130)
          {
            if (!v129)
            {
              v160[0] = *((_QWORD *)v126 + 1);
              llvm::MetadataTracking::track((uint64_t)v160, v130, 2);
              v131 = *v128;
              goto LABEL_123;
            }
          }
          else
          {
            v131 = *v128;
            if (!*v128 && (v87[55] & 0x20) == 0)
              goto LABEL_120;
            if (!v129)
            {
              v160[0] = 0;
LABEL_123:
              if (v131)
                llvm::MetadataTracking::untrack((uint64_t)(v87 + 80), v131);
              v132 = (unsigned __int8 *)v160[0];
              *v128 = (unsigned __int8 *)v160[0];
              if (v132)
                llvm::MetadataTracking::retrack((uint64_t)v160, v132, (uint64_t)(v87 + 80));
              goto LABEL_120;
            }
          }
          llvm::Value::setMetadata(v88, *(_DWORD *)v126, (llvm::MDNode *)v130);
LABEL_120:
          v126 += 16;
        }
        while (v126 != v127);
      }
      v92 = sub_1C58A0068(*(_QWORD **)(a1 + 32), (unsigned __int8 *)v88, (uint64_t)&v168, (llvm::PointerType *)(*(_QWORD *)v173 + 1912), 260, 1);
      v94 = v93;
      v95 = (llvm::GetElementPtrInst *)(*(_QWORD *)v173 + 1912);
      v96 = *(_QWORD **)(a1 + 40);
      v97 = *(_DWORD *)(a1 + 8);
      v166 = 257;
      v98 = sub_1C48678B0((uint64_t *)&v168, v95, v96, v97, (uint64_t)&v164);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v168, 194, (llvm::Value *)v92, 260, (llvm::Value *)v98, 260, *(uint64_t **)(a1 + 56), 0, 0, 0, 0, 0);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4))
      {
        v99 = (llvm::GetElementPtrInst *)(*(_QWORD *)v173 + 1912);
        v100 = *(_QWORD **)(a1 + 48);
        v101 = *(_DWORD *)(a1 + 8);
        v166 = 257;
        v102 = sub_1C48678B0((uint64_t *)&v168, v99, v100, v101, (uint64_t)&v164);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v168, 194, v94, 260, (llvm::Value *)v102, 260, *(uint64_t **)(a1 + 56), 0, 0, 0, 0, 0);
      }
      if (v168 != v170)
        free(v168);
      if (++v21 == v20)
        return;
    }
    v119 = (char *)v168;
    v120 = (char *)v168 + 16 * v169;
    v121 = (unsigned __int8 **)(v54 + 80);
    while (1)
    {
      v122 = *(_DWORD *)v119;
      v123 = (unsigned __int8 *)*((_QWORD *)v119 + 1);
      if (v123)
      {
        if (!v122)
        {
          v160[0] = *((_QWORD *)v119 + 1);
          llvm::MetadataTracking::track((uint64_t)v160, v123, 2);
          v124 = *v121;
          goto LABEL_108;
        }
      }
      else
      {
        v124 = *v121;
        if (!*v121 && (v54[55] & 0x20) == 0)
          goto LABEL_105;
        if (!v122)
        {
          v160[0] = 0;
LABEL_108:
          if (v124)
            llvm::MetadataTracking::untrack((uint64_t)(v54 + 80), v124);
          v125 = (unsigned __int8 *)v160[0];
          *v121 = (unsigned __int8 *)v160[0];
          if (v125)
            llvm::MetadataTracking::retrack((uint64_t)v160, v125, (uint64_t)(v54 + 80));
          goto LABEL_105;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v55, *(_DWORD *)v119, (llvm::MDNode *)v123);
LABEL_105:
      v119 += 16;
      if (v119 == v120)
        goto LABEL_49;
    }
  }
}

unsigned __int8 *sub_1C589FD0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  llvm::Value **v16;
  unsigned __int8 *v17;
  char *v18;
  llvm::Value **v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::Value *v24;
  _QWORD *v25;
  llvm::Value *v26;
  llvm::PointerType *v27;
  uint64_t v28;
  _WORD v29[20];
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  if (a5 + a4 > 0x320)
    return 0;
  v32 = v5;
  v33 = v6;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(unsigned __int8 **)(v12 + 72);
  v14 = *(_QWORD *)(v12 + 24);
  v31 = 257;
  v15 = sub_1C5098D9C((uint64_t *)a3, v13, v14, (uint64_t)v30);
  v16 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 24), a4, 0);
  v29[16] = 257;
  v17 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a3 + 72) + 16))(*(_QWORD *)(a3 + 72), v15, v16, 0, 0);
  if (!v17)
  {
    v31 = 257;
    v18 = (char *)operator new(0x80uLL);
    *((_QWORD *)v18 + 5) = 0;
    v19 = (llvm::Value **)(v18 + 40);
    *((_QWORD *)v18 + 6) = 0;
    *((_QWORD *)v18 + 8) = *(_QWORD *)v15;
    v20 = (uint64_t)(v18 + 64);
    *((_QWORD *)v18 + 3) = v18 + 64;
    *((_QWORD *)v18 + 7) = v18 + 64;
    *((_QWORD *)v18 + 9) = 0;
    v18[80] = 41;
    v18[81] = 0;
    *((_WORD *)v18 + 41) = 0;
    *((_DWORD *)v18 + 21) = 2;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *((_DWORD *)v18 + 30) = 0;
    *(_QWORD *)v18 = v15;
    v23 = *((_QWORD *)v15 + 1);
    v22 = v15 + 8;
    v21 = v23;
    *((_QWORD *)v18 + 1) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = v18 + 8;
    *((_QWORD *)v18 + 2) = v22;
    *v22 = v18;
    *((_QWORD *)v18 + 4) = v16;
    if (v16)
    {
      v26 = v16[1];
      v25 = v16 + 1;
      v24 = v26;
      *v19 = v26;
      if (v26)
        *((_QWORD *)v24 + 2) = v19;
      *((_QWORD *)v18 + 6) = v25;
      *v25 = v18 + 32;
    }
    llvm::Value::setName((uint64_t ***)v18 + 8, (uint64_t)v30);
    v17 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a3, v20, (uint64_t)v29);
  }
  sub_1C58A1544(*(_QWORD **)(a1 + 32), a2);
  v28 = llvm::PointerType::get(v27, 0);
  v30[0] = "_msarg_va_s";
  v31 = 259;
  return sub_1C4773E38((uint64_t *)a3, 48, v17, v28, (uint64_t)v30);
}

unsigned __int8 *sub_1C589FECC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Value **v10;
  unsigned __int8 *v11;
  char *v12;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Value *v18;
  _QWORD *v19;
  llvm::Value *v20;
  uint64_t v21;
  _WORD v23[20];
  _QWORD v24[4];
  __int16 v25;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 **)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 24);
  v25 = 257;
  v9 = sub_1C5098D9C((uint64_t *)a2, v7, v8, (uint64_t)v24);
  v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 24), a3, 0);
  v23[16] = 257;
  v11 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 72) + 16))(*(_QWORD *)(a2 + 72), v9, v10, 0, 0);
  if (!v11)
  {
    v25 = 257;
    v12 = (char *)operator new(0x80uLL);
    *((_QWORD *)v12 + 5) = 0;
    v13 = (llvm::Value **)(v12 + 40);
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 8) = *(_QWORD *)v9;
    v14 = (uint64_t)(v12 + 64);
    *((_QWORD *)v12 + 3) = v12 + 64;
    *((_QWORD *)v12 + 7) = v12 + 64;
    *((_QWORD *)v12 + 9) = 0;
    v12[80] = 41;
    v12[81] = 0;
    *((_WORD *)v12 + 41) = 0;
    *((_DWORD *)v12 + 21) = 2;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *((_DWORD *)v12 + 30) = 0;
    *(_QWORD *)v12 = v9;
    v17 = *((_QWORD *)v9 + 1);
    v16 = v9 + 8;
    v15 = v17;
    *((_QWORD *)v12 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v16;
    *v16 = v12;
    *((_QWORD *)v12 + 4) = v10;
    if (v10)
    {
      v20 = v10[1];
      v19 = v10 + 1;
      v18 = v20;
      *v13 = v20;
      if (v20)
        *((_QWORD *)v18 + 2) = v13;
      *((_QWORD *)v12 + 6) = v19;
      *v19 = v12 + 32;
    }
    llvm::Value::setName((uint64_t ***)v12 + 8, (uint64_t)v24);
    v11 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a2, v14, (uint64_t)v23);
  }
  v21 = llvm::PointerType::get(*(llvm::PointerType **)(*(_QWORD *)(a1 + 24) + 32), 0);
  v24[0] = "_msarg_va_o";
  v25 = 259;
  return sub_1C4773E38((uint64_t *)a2, 48, v11, v21, (uint64_t)v24);
}

unsigned __int8 *sub_1C58A0068(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, llvm::PointerType *a4, __int16 a5, int a6)
{
  uint64_t v10;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  llvm::Value **v25;
  uint64_t v26;
  llvm::Value **v27;
  uint64_t v28;
  unsigned __int8 *v29;
  llvm::Value **v30;
  char *v31;
  llvm::Value ***v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value ****v37;
  llvm::Value *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Value **v43;
  uint64_t v44;
  char *v45;
  llvm::Value ***v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  llvm::Value *v51;
  llvm::Value ****v52;
  llvm::Value *v53;
  llvm::Value **v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  llvm::Value **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  _BYTE v75[32];
  __int16 v76;
  _QWORD v77[4];
  __int16 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v10 = a1[1];
  if (*(_BYTE *)v10)
  {
    sub_1C4768AD0(*(_QWORD *)(*a1 + 40) + 272, (uint64_t)a4);
    v14 = (unint64_t)(v13 + 7) >> 3;
    if ((_DWORD)v12 == 1)
    v15 = 0;
    v16 = 448;
    if (a6)
      v16 = 512;
    v17 = (_QWORD *)(a1[1] + v16);
    v18 = 0;
    switch((int)v14)
    {
      case 1:
        v19 = v17 + 1;
        goto LABEL_42;
      case 2:
        v19 = v17 + 3;
        v17 += 2;
        goto LABEL_42;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        v19 = v17 + 5;
        v17 += 4;
        goto LABEL_42;
      case 8:
        v19 = v17 + 7;
        v17 += 6;
LABEL_42:
        v18 = (uint64_t **)*v17;
        v15 = *v19;
        break;
      default:
        v18 = 0;
        break;
    }
    v56 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a3 + 64) + 1912), 0);
    v76 = 257;
    v57 = sub_1C5098D9C((uint64_t *)a3, a2, v56, (uint64_t)v75);
    v74 = v57;
    if (v15)
    {
      v76 = 257;
      v58 = (uint64_t *)&v74;
      v59 = (uint64_t *)a3;
      v60 = v18;
      v61 = v15;
      v62 = 1;
    }
    else
    {
      v63 = v57;
      v64 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1[1] + 24), (int)v14, 0);
      v65 = a1[1];
      v66 = v65 + 432;
      v67 = 416;
      if (a6)
        v67 = 432;
      else
        v66 = v65 + 416;
      v60 = *(uint64_t ***)(v65 + v67);
      v61 = *(_QWORD *)(v66 + 8);
      v77[0] = v63;
      v77[1] = v64;
      v76 = 257;
      v58 = v77;
      v59 = (uint64_t *)a3;
      v62 = 2;
    }
    v68 = (uint64_t *)sub_1C4774778(v59, v60, v61, v58, v62, (uint64_t)v75, 0);
    LODWORD(v77[0]) = 0;
    v76 = 257;
    v69 = (unsigned __int8 *)sub_1C506DBC4(a3, v68, (unsigned int *)v77, 1, (uint64_t)v75);
    v70 = llvm::PointerType::get(a4, 0);
    v76 = 257;
    v40 = sub_1C5098D9C((uint64_t *)a3, v69, v70, (uint64_t)v75);
    LODWORD(v77[0]) = 1;
    v76 = 257;
    sub_1C506DBC4(a3, v68, (unsigned int *)v77, 1, (uint64_t)v75);
  }
  else
  {
    v21 = *(_QWORD *)(v10 + 24);
    v76 = 257;
    v22 = sub_1C5098D9C((uint64_t *)a3, a2, v21, (uint64_t)v75);
    v23 = a1[1];
    v24 = *(_QWORD **)(v23 + 592);
    if (*v24)
    {
      v25 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v23 + 24), ~*v24, 0);
      v76 = 257;
      v22 = (_QWORD *)sub_1C4D89BCC(a3, v22, (uint64_t)v25, (uint64_t)v75);
      v23 = a1[1];
      v24 = *(_QWORD **)(v23 + 592);
    }
    v26 = v24[1];
    if (v26)
    {
      v27 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v23 + 24), v26, 0);
      v76 = 257;
      v22 = sub_1C506EC1C((uint64_t *)a3, v22, (uint64_t)v27, (uint64_t)v75);
      v23 = a1[1];
      v24 = *(_QWORD **)(v23 + 592);
    }
    v28 = v24[2];
    v29 = (unsigned __int8 *)v22;
    if (v28)
    {
      v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v23 + 24), v28, 0);
      v78 = 257;
      v29 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a3 + 72) + 16))(*(_QWORD *)(a3 + 72), v22, v30, 0, 0);
      if (!v29)
      {
        v76 = 257;
        v31 = (char *)operator new(0x80uLL);
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 1) = 0;
        *((_QWORD *)v31 + 5) = 0;
        *((_QWORD *)v31 + 6) = 0;
        *((_QWORD *)v31 + 4) = 0;
        v32 = (llvm::Value ***)(v31 + 32);
        *((_QWORD *)v31 + 8) = *v22;
        v33 = (uint64_t)(v31 + 64);
        *((_QWORD *)v31 + 3) = v31 + 64;
        *((_QWORD *)v31 + 7) = v31 + 64;
        *((_QWORD *)v31 + 9) = 0;
        v31[80] = 41;
        v31[81] = 0;
        *((_WORD *)v31 + 41) = 0;
        *((_DWORD *)v31 + 21) = 2;
        *((_DWORD *)v31 + 30) = 0;
        *(_OWORD *)(v31 + 104) = 0u;
        *(_OWORD *)(v31 + 88) = 0u;
        *(_QWORD *)v31 = v22;
        v34 = v22 + 1;
        v35 = v22[1];
        *((_QWORD *)v31 + 1) = v35;
        if (v35)
          *(_QWORD *)(v35 + 16) = v31 + 8;
        *((_QWORD *)v31 + 2) = v34;
        *v34 = v31;
        if (*((_QWORD *)v31 + 4))
        {
          **((_QWORD **)v31 + 6) = *((_QWORD *)v31 + 5);
          v72 = *((_QWORD *)v31 + 5);
          if (v72)
            *(_QWORD *)(v72 + 16) = *((_QWORD *)v31 + 6);
        }
        *v32 = v30;
        if (v30)
        {
          v38 = v30[1];
          v37 = (llvm::Value ****)(v30 + 1);
          v36 = v38;
          *((_QWORD *)v31 + 5) = v38;
          if (v38)
            *((_QWORD *)v36 + 2) = v31 + 40;
          *((_QWORD *)v31 + 6) = v37;
          *v37 = v32;
        }
        llvm::Value::setName((uint64_t ***)v31 + 8, (uint64_t)v75);
        v29 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a3, v33, (uint64_t)v77);
      }
    }
    v39 = llvm::PointerType::get(a4, 0);
    v76 = 257;
    v40 = sub_1C4773E38((uint64_t *)a3, 48, v29, v39, (uint64_t)v75);
    v41 = a1[1];
    if (*(_DWORD *)(v41 + 4))
    {
      v42 = *(_QWORD *)(*(_QWORD *)(v41 + 592) + 24);
      if (v42)
      {
        v43 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v41 + 24), v42, 0);
        v78 = 257;
        v44 = (*(uint64_t (**)(_QWORD, _QWORD *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a3 + 72) + 16))(*(_QWORD *)(a3 + 72), v22, v43, 0, 0);
        if (!v44)
        {
          v76 = 257;
          v45 = (char *)operator new(0x80uLL);
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v45 + 2) = 0;
          *((_QWORD *)v45 + 1) = 0;
          *((_QWORD *)v45 + 5) = 0;
          *((_QWORD *)v45 + 6) = 0;
          *((_QWORD *)v45 + 4) = 0;
          v46 = (llvm::Value ***)(v45 + 32);
          *((_QWORD *)v45 + 8) = *v22;
          v47 = (uint64_t)(v45 + 64);
          *((_QWORD *)v45 + 3) = v45 + 64;
          *((_QWORD *)v45 + 7) = v45 + 64;
          *((_QWORD *)v45 + 9) = 0;
          v45[80] = 41;
          v45[81] = 0;
          *((_WORD *)v45 + 41) = 0;
          *((_DWORD *)v45 + 21) = 2;
          *((_DWORD *)v45 + 30) = 0;
          *(_OWORD *)(v45 + 104) = 0u;
          *(_OWORD *)(v45 + 88) = 0u;
          *(_QWORD *)v45 = v22;
          v50 = v22[1];
          v49 = v22 + 1;
          v48 = v50;
          *((_QWORD *)v45 + 1) = v50;
          if (v50)
            *(_QWORD *)(v48 + 16) = v45 + 8;
          *((_QWORD *)v45 + 2) = v49;
          *v49 = v45;
          if (*((_QWORD *)v45 + 4))
          {
            **((_QWORD **)v45 + 6) = *((_QWORD *)v45 + 5);
            v73 = *((_QWORD *)v45 + 5);
            if (v73)
              *(_QWORD *)(v73 + 16) = *((_QWORD *)v45 + 6);
          }
          *v46 = v43;
          if (v43)
          {
            v53 = v43[1];
            v52 = (llvm::Value ****)(v43 + 1);
            v51 = v53;
            *((_QWORD *)v45 + 5) = v53;
            if (v53)
              *((_QWORD *)v51 + 2) = v45 + 40;
            *((_QWORD *)v45 + 6) = v52;
            *v52 = v46;
          }
          llvm::Value::setName((uint64_t ***)v45 + 8, (uint64_t)v75);
          v44 = sub_1C4773754((uint64_t *)a3, v47, (uint64_t)v77);
        }
        v41 = a1[1];
        v22 = (_QWORD *)v44;
      }
      if ((a5 & 0xFF00) == 0 || a5 < word_1ED813A68)
      {
        v54 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v41 + 24), -1 << word_1ED813A68, 0);
        v76 = 257;
        v22 = (_QWORD *)sub_1C4D89BCC(a3, v22, (uint64_t)v54, (uint64_t)v75);
        v41 = a1[1];
      }
      v55 = llvm::PointerType::get(*(llvm::PointerType **)(v41 + 32), 0);
      v76 = 257;
      sub_1C4773E38((uint64_t *)a3, 48, (unsigned __int8 *)v22, v55, (uint64_t)v75);
    }
  }
  return v40;
}

llvm::Value **sub_1C58A06BC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  llvm::Type *v7;
  llvm::Constant *v9;
  llvm::Type *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t ParamByValType;
  unsigned int v21;
  uint64_t v22;
  llvm::AttributeList *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  const char *v31;
  char v32;
  char v33;
  unint64_t v34;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  llvm::AttributeList *v40;
  uint64_t v41;
  int v42;
  uint64_t **v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  char *v54;
  llvm::Value *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  char v61;
  char v62;
  char *v63;
  char *v64;
  llvm::Value *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unsigned __int8 **v71;
  int v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  __int16 ParamAlignment;
  uint64_t v78;
  unint64_t v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  __int16 v82;
  llvm::Type *v83;
  unsigned __int8 *v84;
  llvm::Value *v85;
  const llvm::APInt *v86;
  unsigned __int8 *v87;
  __int16 v88;
  __int16 v89;
  llvm::ConstantInt *v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t *v93;
  const llvm::APInt *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  __int16 v97;
  llvm::ConstantInt *v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t *v101;
  char *v102;
  char *v103;
  unsigned __int8 **v104;
  int v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  llvm::Value **v111;
  llvm::Type *v112;
  llvm::Value **v113;
  const llvm::APInt *v114;
  llvm::Value **NullValue;
  llvm::ConstantInt *v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t *v120;
  int v121;
  _BYTE v122[32];
  __int16 v123;
  unint64_t v124;
  unsigned int v125;
  __int16 v126;
  unsigned __int8 *v127;
  void *v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 >= 0x1C)
  {
    if (*(_BYTE *)(a1 + 457)
      && (!*(_QWORD *)(a2 + 48) && (*(_BYTE *)(a2 + 23) & 0x20) == 0
       || !llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "nosanitize", 0xAuLL)))
    {
      return (llvm::Value **)*sub_1C62AD7D0(a1 + 304, a2);
    }
    goto LABEL_16;
  }
  if (a2 && v4 - 13 >= 0xFFFFFFFE)
  {
    if (*(_BYTE *)(a1 + 457) && *(_BYTE *)(a1 + 459))
    {
      sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
      if (v6)
        return (llvm::Value **)sub_1C58A1CC4(v6, v7);
      return 0;
    }
LABEL_16:
    sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
    if (v9)
      return llvm::Constant::getNullValue(v9, v10);
    return 0;
  }
  if (!a2 || v4 != 21)
    goto LABEL_16;
  v11 = sub_1C62AD7D0(a1 + 304, a2);
  v5 = *v11;
  if (*v11)
    return (llvm::Value **)v5;
  v12 = v11;
  v13 = *(_QWORD *)(a2 + 24);
  sub_1C4773D54((uint64_t)&v128, *(_QWORD *)(a1 + 448), 0, 0, 0);
  v14 = *(_QWORD *)(v13 + 40);
  v120 = v12;
  if ((*(_WORD *)(v13 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v13);
    v15 = *(_QWORD *)(v13 + 88);
    if ((*(_WORD *)(v13 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v13);
      v16 = *(_QWORD *)(v13 + 88);
      goto LABEL_24;
    }
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 88);
  }
  v16 = v15;
LABEL_24:
  v17 = v16 + 40 * *(_QWORD *)(v13 + 96);
  if (v15 == v17)
    goto LABEL_137;
  v18 = 0;
  v19 = v14 + 272;
  while (1)
  {
    ParamByValType = *(_QWORD *)v15;
    v21 = *(unsigned __int8 *)(*(_QWORD *)v15 + 8);
    if (v21 > 0x11)
      goto LABEL_40;
    if (((1 << v21) & 0xAC7F) != 0)
      goto LABEL_28;
    if (((1 << v21) & 0x30000) == 0)
    {
LABEL_40:
      if ((v21 & 0xFE) != 0x12 && v21 != 21)
        goto LABEL_35;
    }
    if (!llvm::Type::isSizedDerivedType(*(_QWORD *)v15, 0))
      goto LABEL_35;
    ParamByValType = *(_QWORD *)v15;
    v21 = *(unsigned __int8 *)(*(_QWORD *)v15 + 8);
LABEL_28:
    v121 = v18;
    if (v21 == 15)
    {
      v22 = *(_QWORD *)(v15 + 24);
      v25 = *(_QWORD *)(v22 + 112);
      v23 = (llvm::AttributeList *)(v22 + 112);
      v24 = v25;
      if (v25)
      {
        v26 = *(_DWORD *)(v15 + 32);
        if ((v26 + 2) < *(_DWORD *)(v24 + 8))
        {
          v36 = *(_QWORD *)(v24 + 8 * (v26 + 2) + 40);
          if (v36)
          {
            if ((*(_BYTE *)(v36 + 20) & 0x20) != 0)
              ParamByValType = llvm::AttributeList::getParamByValType(v23, v26);
          }
        }
      }
    }
    sub_1C4768AD0(v19, ParamByValType);
    v28 = v27;
    v30 = v29;
    llvm::DataLayout::getAlignment(v19, ParamByValType);
    v33 = v32;
    if (v30 == 1)
    v34 = ((1 << v33) + ((unint64_t)(v28 + 7) >> 3) - 1) & -(1 << v33);
    if (v15 == a2)
      break;
    v18 = v121 + ((v34 + (1 << SHIBYTE(word_1ED813A68)) - 1) & -(int)(1 << SHIBYTE(word_1ED813A68)));
LABEL_35:
    v15 += 40;
    if (v15 == v17)
      goto LABEL_137;
  }
  v37 = v121 + v34;
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
  {
    v38 = *(_QWORD *)(a2 + 24);
    v41 = *(_QWORD *)(v38 + 112);
    v40 = (llvm::AttributeList *)(v38 + 112);
    v39 = v41;
    if (v41)
    {
      v42 = *(_DWORD *)(a2 + 32);
      if ((v42 + 2) < *(_DWORD *)(v39 + 8))
      {
        v76 = *(_QWORD *)(v39 + 8 * (v42 + 2) + 40);
        if (v76)
        {
          if ((*(_BYTE *)(v76 + 20) & 0x20) != 0)
          {
            ParamAlignment = llvm::AttributeList::getParamAlignment(v40, *(_DWORD *)(a2 + 32));
            v78 = llvm::AttributeList::getParamByValType(v40, v42);
            v79 = __clz(1 << ParamAlignment) ^ 0x13F;
            if ((ParamAlignment & 0xFF00) == 0)
              v79 = 0;
            v80 = v79;
            if (v79 <= 0xFF)
            {
              llvm::DataLayout::getAlignment(v19, v78);
              v80 = v81;
            }
            v82 = v80 | 0x100;
            v84 = sub_1C58A0068((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t)&v128, (llvm::PointerType *)(*(_QWORD *)v133 + 1912), v82, 1);
            if (*(_BYTE *)(a1 + 457) && v37 < 0x321)
            {
              v85 = v83;
              v87 = sub_1C58A196C((_QWORD *)a1, (uint64_t *)a2, (uint64_t)&v128, v121);
              if (HIBYTE(word_1ED813A68) >= v80)
                v88 = v80;
              else
                v88 = HIBYTE(word_1ED813A68);
              v89 = v88 | 0x100;
              v90 = *(llvm::ConstantInt **)(*(_QWORD *)v133 + 1984);
              v91 = *(_DWORD *)(*(_QWORD *)v133 + 1992);
              v125 = v91 >> 8;
              if (v91 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v124, v34, 0);
              }
              else
              {
                if (v91 <= 0xFF)
                  LODWORD(v92) = 0;
                else
                  v92 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v91);
                v124 = v92 & v34;
              }
              v93 = (uint64_t *)llvm::ConstantInt::get(v90, (llvm::LLVMContext *)&v124, v86);
              if (v125 >= 0x41 && v124)
                MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
              llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v128, 194, (llvm::Value *)v84, v89, (llvm::Value *)v87, v89, v93, 0, 0, 0, 0, 0);
              if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
              {
                v95 = sub_1C58A1B14(a1, (uint64_t)&v128, v121);
                v96 = -(int)(1 << word_1ED813A68) & (v34 + (1 << word_1ED813A68) - 1);
                v97 = word_1ED813A68 | 0x100;
                v98 = *(llvm::ConstantInt **)(*(_QWORD *)v133 + 1984);
                v99 = *(_DWORD *)(*(_QWORD *)v133 + 1992);
                v125 = v99 >> 8;
                if (v99 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v124, v96, 0);
                }
                else
                {
                  if (v99 <= 0xFF)
                    v100 = 0;
                  else
                    v100 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v99);
                  v124 = v100 & v96;
                }
                v101 = (uint64_t *)llvm::ConstantInt::get(v98, (llvm::LLVMContext *)&v124, v94);
                if (v125 >= 0x41 && v124)
                  MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
                llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v128, 194, v85, v97, (llvm::Value *)v95, v97, v101, 0, 0, 0, 0, 0);
              }
            }
            else
            {
              NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v133 + 1912), v83);
              v116 = *(llvm::ConstantInt **)(*(_QWORD *)v133 + 1984);
              v117 = *(_DWORD *)(*(_QWORD *)v133 + 1992);
              v125 = v117 >> 8;
              if (v117 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v124, v34, 0);
              }
              else
              {
                if (v117 <= 0xFF)
                  LODWORD(v118) = 0;
                else
                  v118 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v117);
                v124 = v118 & v34;
              }
              v119 = (uint64_t *)llvm::ConstantInt::get(v116, (llvm::LLVMContext *)&v124, v114);
              if (v125 >= 0x41 && v124)
                MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
              llvm::IRBuilderBase::CreateMemSet((uint64_t)&v128, (llvm::Value *)v84, (uint64_t)NullValue, v119, v82, 0, 0, 0, 0);
            }
          }
        }
      }
    }
  }
  v43 = *(uint64_t ***)a2;
  if (*(_BYTE *)(a1 + 457))
  {
    if (v37 <= 0x320)
    {
      if (*((_BYTE *)v43 + 8) != 15
        || (v44 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112)) == 0
        || (v45 = *(_DWORD *)(a2 + 32) + 2, v45 >= *(_DWORD *)(v44 + 8))
        || (v109 = *(_QWORD *)(v44 + 8 * v45 + 40)) == 0
        || (*(_BYTE *)(v109 + 20) & 0x20) == 0)
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 9)
          || (v46 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112)) == 0
          || (v47 = *(_DWORD *)(a2 + 32) + 2, v47 >= *(_DWORD *)(v46 + 8))
          || (v110 = *(_QWORD *)(v46 + 8 * v47 + 40)) == 0
          || (*(_BYTE *)(v110 + 16) & 0x10) == 0)
        {
          v48 = v121;
          v49 = sub_1C58A196C((_QWORD *)a1, (uint64_t *)a2, (uint64_t)&v128, v121);
          sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
          v51 = v50;
          v52 = HIBYTE(word_1ED813A68);
          v123 = 257;
          v53 = (char *)operator new(0x60uLL);
          v54 = v53;
          v55 = (llvm::Value *)(v53 + 32);
          *((_QWORD *)v53 + 2) = 0;
          *((_QWORD *)v53 + 3) = v53 + 32;
          v126 = 257;
          *((_QWORD *)v53 + 4) = v51;
          *((_QWORD *)v53 + 5) = 0;
          *((_WORD *)v53 + 24) = 60;
          *((_DWORD *)v53 + 13) = 1;
          *(_OWORD *)(v53 + 56) = 0u;
          *(_OWORD *)(v53 + 72) = 0u;
          *((_DWORD *)v53 + 22) = 0;
          *(_QWORD *)v53 = v49;
          *((_QWORD *)v53 + 1) = 0;
          if (v49)
          {
            v58 = *((_QWORD *)v49 + 1);
            v57 = v49 + 8;
            v56 = v58;
            *((_QWORD *)v53 + 1) = v58;
            if (v58)
              *(_QWORD *)(v56 + 16) = v53 + 8;
            *((_QWORD *)v53 + 2) = v57;
            *v57 = v53;
          }
          *((_WORD *)v53 + 25) = 2 * (v52 & 0x3F);
          v53[92] = 1;
          llvm::Value::setName((uint64_t ***)v53 + 4, (uint64_t)&v124);
          (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v55, v122, v131, v132);
          if (!v129)
          {
LABEL_65:
            *v120 = (unint64_t)v55;
            if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
              goto LABEL_137;
            v59 = sub_1C58A1B14(a1, (uint64_t)&v128, v48);
            v60 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
            v123 = 257;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v131 + 56) + 40) + 272, v60);
            v62 = v61;
            v63 = (char *)operator new(0x60uLL);
            v64 = v63;
            v65 = (llvm::Value *)(v63 + 32);
            *((_QWORD *)v63 + 2) = 0;
            *((_QWORD *)v63 + 3) = v63 + 32;
            v126 = 257;
            *((_QWORD *)v63 + 4) = v60;
            *((_QWORD *)v63 + 5) = 0;
            *((_WORD *)v63 + 24) = 60;
            *((_DWORD *)v63 + 13) = 1;
            *(_OWORD *)(v63 + 56) = 0u;
            *(_OWORD *)(v63 + 72) = 0u;
            *((_DWORD *)v63 + 22) = 0;
            *(_QWORD *)v63 = v59;
            *((_QWORD *)v63 + 1) = 0;
            if (v59)
            {
              v68 = *((_QWORD *)v59 + 1);
              v67 = v59 + 8;
              v66 = v68;
              *((_QWORD *)v63 + 1) = v68;
              if (v68)
                *(_QWORD *)(v66 + 16) = v63 + 8;
              *((_QWORD *)v63 + 2) = v67;
              *v67 = v63;
            }
            *((_WORD *)v63 + 25) = 2 * (v62 & 0x3F);
            v63[92] = 1;
            llvm::Value::setName((uint64_t ***)v63 + 4, (uint64_t)&v124);
            (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v65, v122, v131, v132);
            if (!v129)
            {
LABEL_71:
              if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
                goto LABEL_137;
LABEL_140:
              *sub_1C62AD7D0(a1 + 368, a2) = (unint64_t)v65;
              goto LABEL_137;
            }
            v102 = (char *)v128;
            v103 = (char *)v128 + 16 * v129;
            v104 = (unsigned __int8 **)(v64 + 80);
            while (1)
            {
              v105 = *(_DWORD *)v102;
              v106 = (unsigned __int8 *)*((_QWORD *)v102 + 1);
              if (v106)
              {
                if (!v105)
                {
                  v127 = (unsigned __int8 *)*((_QWORD *)v102 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v127, v106, 2);
                  v107 = *v104;
                  goto LABEL_125;
                }
              }
              else
              {
                v107 = *v104;
                if (!*v104 && (v64[55] & 0x20) == 0)
                  goto LABEL_122;
                if (!v105)
                {
                  v127 = 0;
LABEL_125:
                  if (v107)
                    llvm::MetadataTracking::untrack((uint64_t)(v64 + 80), v107);
                  v108 = v127;
                  *v104 = v127;
                  if (v108)
                    llvm::MetadataTracking::retrack((uint64_t)&v127, v108, (uint64_t)(v64 + 80));
                  goto LABEL_122;
                }
              }
              llvm::Value::setMetadata(v65, *(_DWORD *)v102, (llvm::MDNode *)v106);
LABEL_122:
              v102 += 16;
              if (v102 == v103)
                goto LABEL_71;
            }
          }
          v69 = (char *)v128;
          v70 = (char *)v128 + 16 * v129;
          v71 = (unsigned __int8 **)(v54 + 80);
          v48 = v121;
          while (1)
          {
            v72 = *(_DWORD *)v69;
            v73 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
            if (v73)
            {
              if (!v72)
              {
                v127 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
                llvm::MetadataTracking::track((uint64_t)&v127, v73, 2);
                v74 = *v71;
                goto LABEL_86;
              }
            }
            else
            {
              v74 = *v71;
              if (!*v71 && (v54[55] & 0x20) == 0)
                goto LABEL_83;
              if (!v72)
              {
                v127 = 0;
LABEL_86:
                if (v74)
                  llvm::MetadataTracking::untrack((uint64_t)(v54 + 80), v74);
                v75 = v127;
                *v71 = v127;
                if (v75)
                  llvm::MetadataTracking::retrack((uint64_t)&v127, v75, (uint64_t)(v54 + 80));
                goto LABEL_83;
              }
            }
            llvm::Value::setMetadata(v55, *(_DWORD *)v69, (llvm::MDNode *)v73);
LABEL_83:
            v69 += 16;
            if (v69 == v70)
              goto LABEL_65;
          }
        }
      }
    }
  }
  sub_1C58A1544((_QWORD *)a1, (uint64_t)v43);
  if (v111)
    v111 = llvm::Constant::getNullValue((llvm::Constant *)v111, v112);
  *v120 = (unint64_t)v111;
  v113 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 32), v112);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
  {
    v65 = (llvm::Value *)v113;
    goto LABEL_140;
  }
LABEL_137:
  v5 = *v120;
  if (v128 != &v130)
    free(v128);
  return (llvm::Value **)v5;
}

llvm::Value **sub_1C58A11D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v2 + 4))
    return 0;
  if (!*(_BYTE *)(a1 + 457))
    return llvm::Constant::getNullValue(*(llvm::Constant **)(v2 + 32), (llvm::Type *)a2);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 <= 0x14)
    return llvm::Constant::getNullValue(*(llvm::Constant **)(v2 + 32), (llvm::Type *)a2);
  if (v5 >= 0x1C
    && (*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0)
    && llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "nosanitize", 0xAuLL))
  {
    v2 = *(_QWORD *)(a1 + 8);
    return llvm::Constant::getNullValue(*(llvm::Constant **)(v2 + 32), (llvm::Type *)a2);
  }
  return (llvm::Value **)*sub_1C62AD7D0(a1 + 368, a2);
}

void sub_1C58A1270(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned int a5, unsigned __int8 a6)
{
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  llvm::Value **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned __int8 v34;
  uint64_t ***v35;
  llvm::GetElementPtrInst *v36;
  unint64_t v37;
  uint64_t ***v38;
  llvm::GetElementPtrInst *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 v43;
  _QWORD *v44;
  unsigned __int8 v45;
  _BYTE v46[32];
  __int16 v47;
  _BYTE v48[32];
  __int16 v49;

  v11 = a1;
  v12 = *(_QWORD *)(*a1 + 40) + 272;
  llvm::DataLayout::getAlignment(v12, *(_QWORD *)(a1[1] + 24));
  v14 = v13;
  sub_1C4768AD0(v12, *(_QWORD *)(v11[1] + 24));
  v17 = v16 + 7;
  if ((_DWORD)v15 == 1)
  v18 = v17 >> 3;
  if (a6 >= v14 && v18 >= 5)
  {
    v43 = a6;
    sub_1C4768AD0(*(_QWORD *)(*v11 + 40) + 272, *(_QWORD *)(v11[1] + 24));
    v23 = v22 + 7;
    if ((_DWORD)v21 == 1)
    v45 = v14;
    v24 = (uint64_t *)a3;
    if ((v23 & 0x7FFFFFFF8) != 0x20)
    {
      v25 = *(_QWORD *)(v11[1] + 24);
      v49 = 257;
      v12 = (uint64_t)sub_1C4D8D514(a2, a3, v25, 0, (uint64_t)v48);
      v49 = 257;
      v26 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v12, 32, 0);
      v27 = sub_1C506E874((uint64_t)a2, v12, (uint64_t)v26, (uint64_t)v48, 0, 0);
      v47 = 257;
      v24 = (uint64_t *)sub_1C4773594((uint64_t)a2, (_QWORD *)v12, v27, (uint64_t)v46);
    }
    v44 = v11;
    v28 = llvm::PointerType::get(*(llvm::PointerType **)(v11[1] + 24), 0);
    v49 = 257;
    v29 = sub_1C5098D9C(a2, a4, v28, (uint64_t)v48);
    if (v18 <= a5)
    {
      v30 = v29;
      v42 = a3;
      LODWORD(v12) = 0;
      v20 = 0;
      v41 = a5;
      v31 = a5 / v18;
      v32 = v18 >> 2;
      if (v31 <= 1)
        v33 = 1;
      else
        v33 = v31;
      v34 = v43;
      do
      {
        v35 = (uint64_t ***)v30;
        if ((_DWORD)v12)
        {
          v36 = *(llvm::GetElementPtrInst **)(v44[1] + 24);
          v49 = 257;
          v35 = sub_1C48678B0(a2, v36, v30, v12, (uint64_t)v48);
        }
        v37 = v18 & 0xFFFFFFFFFFFF0000 | v34;
        v18 = v37 | 0x100;
        sub_1C509CCE8(a2, v24, (uint64_t)v35, v37 | 0x100, 0);
        v20 += v32;
        v12 = (v12 + 1);
        v34 = v45;
      }
      while (v33 != (_DWORD)v12);
      a6 = v45;
      a3 = v42;
      v11 = v44;
      a5 = v41;
    }
    else
    {
      v20 = 0;
      a6 = v43;
    }
  }
  else
  {
    v20 = 0;
  }
  if (v20 < (a5 + 3) >> 2)
  {
    do
    {
      v38 = (uint64_t ***)a4;
      if (v20)
      {
        v39 = *(llvm::GetElementPtrInst **)(v11[1] + 32);
        v49 = 257;
        v38 = sub_1C48678B0(a2, v39, a4, v20, (uint64_t)v48);
      }
      v40 = v12 & 0xFFFFFFFFFFFF0000 | a6;
      v12 = v40 | 0x100;
      sub_1C509CCE8(a2, (uint64_t *)a3, (uint64_t)v38, v40 | 0x100, 0);
      a6 = word_1ED813A68;
      ++v20;
    }
    while ((a5 + 3) >> 2 != v20);
  }
}

void sub_1C58A1544(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  int v7;
  int v8;
  _QWORD *v9;
  llvm::FixedVectorType *v10;
  llvm::ArrayType *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v23;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  _QWORD *v28;
  int v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 > 0x11u)
    goto LABEL_30;
  if (((1 << v4) & 0xAC7F) != 0)
    goto LABEL_3;
  if (((1 << v4) & 0x30000) == 0)
  {
LABEL_30:
    if ((v4 & 0xFE) != 0x12 && v4 != 21)
      return;
  }
  if (!llvm::Type::isSizedDerivedType(a2, 0))
    return;
  v4 = *(_DWORD *)(a2 + 8);
LABEL_3:
  if (v4 == 13)
    return;
  v5 = *(_QWORD *)(*a1 + 40) + 272;
  if ((v4 & 0xFE) == 0x12)
  {
    sub_1C4768AD0(v5, *(_QWORD *)(a2 + 24));
    v8 = v7;
    if ((_DWORD)v6 == 1)
    v9 = *(_QWORD **)(a1[1] + 16);
    LODWORD(v30) = v8;
    if (v8 <= 63)
    {
      if (v8 <= 31)
      {
        switch(v8)
        {
          case 16:
            v10 = (llvm::FixedVectorType *)(*v9 + 1936);
            goto LABEL_43;
          case 8:
            v10 = (llvm::FixedVectorType *)(*v9 + 1912);
            goto LABEL_43;
          case 1:
            v10 = (llvm::FixedVectorType *)(*v9 + 1888);
            goto LABEL_43;
        }
      }
      else if (v8 == 32)
      {
        v10 = (llvm::FixedVectorType *)(*v9 + 1960);
        goto LABEL_43;
      }
    }
    else
    {
      if (v8 == 64)
      {
        v10 = (llvm::FixedVectorType *)(*v9 + 1984);
LABEL_43:
        llvm::FixedVectorType::get(v10, (llvm::Type *)*(unsigned int *)(a2 + 32));
        return;
      }
      if (v8 == 128)
      {
        v10 = (llvm::FixedVectorType *)(*v9 + 2008);
        goto LABEL_43;
      }
    }
    v24 = sub_1C5270984(*v9 + 2168, &v30);
    v10 = (llvm::FixedVectorType *)*((_QWORD *)v24 + 1);
    if (!v10)
    {
      v10 = (llvm::FixedVectorType *)sub_1C484358C(*v9 + 2040, 24, 3);
      v25 = (int)v30;
      *(_QWORD *)v10 = v9;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 1) = (v25 << 8) | 0xDu;
      *((_QWORD *)v24 + 1) = v10;
    }
    goto LABEL_43;
  }
  if (v4 == 16)
  {
    v30 = v32;
    v31 = 0x400000000;
    v12 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 8 * v12;
      do
      {
        v15 = sub_1C58A1544(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v13));
        v16 = v31;
        if (v31 >= (unint64_t)HIDWORD(v31))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v31 + 1, 8);
          v16 = v31;
        }
        *((_QWORD *)v30 + v16) = v15;
        v17 = (v31 + 1);
        LODWORD(v31) = v31 + 1;
        v13 += 8;
      }
      while (v14 != v13);
      v23 = v30;
      v4 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      v17 = 0;
      v23 = v32;
    }
    llvm::StructType::get(*(uint64_t **)(a1[1] + 16), (uint64_t)v23, v17, (v4 >> 9) & 1);
    if (v30 != v32)
      free(v30);
  }
  else
  {
    if (v4 == 17)
    {
      v11 = (llvm::ArrayType *)sub_1C58A1544(a1, *(_QWORD *)(a2 + 24));
      llvm::ArrayType::get(v11, *(llvm::Type **)(a2 + 32));
      return;
    }
    sub_1C4768AD0(v5, a2);
    v20 = v19;
    if ((_DWORD)v18 == 1)
    v21 = *(_QWORD **)(a1[1] + 16);
    LODWORD(v30) = v20;
    if (v20 <= 63)
    {
      if (v20 <= 31)
      {
        if (v20 == 16 || v20 == 8 || v20 == 1)
          return;
      }
      else if (v20 == 32)
      {
        return;
      }
    }
    else if (v20 == 64 || v20 == 128)
    {
      return;
    }
    v26 = sub_1C5270984(*v21 + 2168, &v30);
    if (!*((_QWORD *)v26 + 1))
    {
      v27 = v26;
      v28 = (_QWORD *)sub_1C484358C(*v21 + 2040, 24, 3);
      v29 = (int)v30;
      *v28 = v21;
      v28[2] = 0;
      v28[1] = (v29 << 8) | 0xDu;
      *((_QWORD *)v27 + 1) = v28;
    }
  }
}

unsigned __int8 *sub_1C58A196C(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  llvm::Value **v12;
  uint64_t v13;
  char *v14;
  llvm::Value **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  llvm::Value *v20;
  _QWORD *v21;
  llvm::Value *v22;
  llvm::PointerType *v23;
  uint64_t v24;
  _WORD v26[20];
  _QWORD v27[4];
  __int16 v28;

  v8 = a1[1];
  v9 = *(unsigned __int8 **)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 24);
  v28 = 257;
  v11 = sub_1C5098D9C((uint64_t *)a3, v9, v10, (uint64_t)v27);
  if (a4)
  {
    v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1[1] + 24), a4, 0);
    v26[16] = 257;
    v13 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a3 + 72)
                                                                                               + 16))(*(_QWORD *)(a3 + 72), v11, v12, 0, 0);
    if (!v13)
    {
      v28 = 257;
      v14 = (char *)operator new(0x80uLL);
      *((_QWORD *)v14 + 5) = 0;
      v15 = (llvm::Value **)(v14 + 40);
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 8) = *(_QWORD *)v11;
      v16 = (uint64_t)(v14 + 64);
      *((_QWORD *)v14 + 3) = v14 + 64;
      *((_QWORD *)v14 + 7) = v14 + 64;
      *((_QWORD *)v14 + 9) = 0;
      v14[80] = 41;
      v14[81] = 0;
      *((_WORD *)v14 + 41) = 0;
      *((_DWORD *)v14 + 21) = 2;
      *(_OWORD *)(v14 + 88) = 0u;
      *(_OWORD *)(v14 + 104) = 0u;
      *((_DWORD *)v14 + 30) = 0;
      *(_QWORD *)v14 = v11;
      v19 = *((_QWORD *)v11 + 1);
      v18 = v11 + 8;
      v17 = v19;
      *((_QWORD *)v14 + 1) = v19;
      if (v19)
        *(_QWORD *)(v17 + 16) = v14 + 8;
      *((_QWORD *)v14 + 2) = v18;
      *v18 = v14;
      *((_QWORD *)v14 + 4) = v12;
      if (v12)
      {
        v22 = v12[1];
        v21 = v12 + 1;
        v20 = v22;
        *v15 = v22;
        if (v22)
          *((_QWORD *)v20 + 2) = v15;
        *((_QWORD *)v14 + 6) = v21;
        *v21 = v14 + 32;
      }
      llvm::Value::setName((uint64_t ***)v14 + 8, (uint64_t)v27);
      v13 = sub_1C4773754((uint64_t *)a3, v16, (uint64_t)v26);
    }
    v11 = (unsigned __int8 *)v13;
  }
  sub_1C58A1544(a1, *a2);
  v24 = llvm::PointerType::get(v23, 0);
  v27[0] = "_msarg";
  v28 = 259;
  return sub_1C4773E38((uint64_t *)a3, 48, v11, v24, (uint64_t)v27);
}

unsigned __int8 *sub_1C58A1B14(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Value **v10;
  uint64_t v11;
  char *v12;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Value *v18;
  _QWORD *v19;
  llvm::Value *v20;
  uint64_t v21;
  _WORD v23[20];
  _QWORD v24[4];
  __int16 v25;

  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v3 + 4))
    return 0;
  v7 = *(unsigned __int8 **)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 24);
  v25 = 257;
  v9 = sub_1C5098D9C((uint64_t *)a2, v7, v8, (uint64_t)v24);
  if (a3)
  {
    v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 8) + 24), a3, 0);
    v23[16] = 257;
    v11 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 72)
                                                                                               + 16))(*(_QWORD *)(a2 + 72), v9, v10, 0, 0);
    if (!v11)
    {
      v25 = 257;
      v12 = (char *)operator new(0x80uLL);
      *((_QWORD *)v12 + 5) = 0;
      v13 = (llvm::Value **)(v12 + 40);
      *((_QWORD *)v12 + 6) = 0;
      *((_QWORD *)v12 + 8) = *(_QWORD *)v9;
      v14 = (uint64_t)(v12 + 64);
      *((_QWORD *)v12 + 3) = v12 + 64;
      *((_QWORD *)v12 + 7) = v12 + 64;
      *((_QWORD *)v12 + 9) = 0;
      v12[80] = 41;
      v12[81] = 0;
      *((_WORD *)v12 + 41) = 0;
      *((_DWORD *)v12 + 21) = 2;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      *((_DWORD *)v12 + 30) = 0;
      *(_QWORD *)v12 = v9;
      v17 = *((_QWORD *)v9 + 1);
      v16 = v9 + 8;
      v15 = v17;
      *((_QWORD *)v12 + 1) = v17;
      if (v17)
        *(_QWORD *)(v15 + 16) = v12 + 8;
      *((_QWORD *)v12 + 2) = v16;
      *v16 = v12;
      *((_QWORD *)v12 + 4) = v10;
      if (v10)
      {
        v20 = v10[1];
        v19 = v10 + 1;
        v18 = v20;
        *v13 = v20;
        if (v20)
          *((_QWORD *)v18 + 2) = v13;
        *((_QWORD *)v12 + 6) = v19;
        *v19 = v12 + 32;
      }
      llvm::Value::setName((uint64_t ***)v12 + 8, (uint64_t)v24);
      v11 = sub_1C4773754((uint64_t *)a2, v14, (uint64_t)v23);
    }
    v9 = (unsigned __int8 *)v11;
  }
  v21 = llvm::PointerType::get(*(llvm::PointerType **)(*(_QWORD *)(a1 + 8) + 32), 0);
  v24[0] = "_msarg_o";
  v25 = 259;
  return sub_1C4773E38((uint64_t *)a2, 48, v9, v21, (uint64_t)v24);
}

llvm::ValueHandleBase *sub_1C58A1CC4(uint64_t a1, llvm::Type *a2)
{
  void *v2;
  int v4;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Type *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 13 || (*(_DWORD *)(a1 + 8) & 0xFE) == 18)
    return llvm::Constant::getAllOnesValue((llvm::Constant *)a1, a2);
  if (v4 == 16)
  {
    v17 = v19;
    v18 = 0x400000000;
    v10 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      do
      {
        v13 = sub_1C58A1CC4(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v11));
        v14 = v18;
        if (v18 >= (unint64_t)HIDWORD(v18))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v18 + 1, 8);
          v14 = v18;
        }
        *((_QWORD *)v17 + v14) = v13;
        v15 = (v18 + 1);
        LODWORD(v18) = v18 + 1;
        v11 += 8;
      }
      while (v12 != v11);
      v16 = (llvm::Type *)v17;
    }
    else
    {
      v15 = 0;
      v16 = (llvm::Type *)v19;
    }
    v2 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)a1, v16, v15);
    v9 = v17;
    if (v17 == v19)
      return (llvm::ValueHandleBase *)v2;
  }
  else
  {
    if (v4 != 17)
      return (llvm::ValueHandleBase *)v2;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = sub_1C58A1CC4(*(_QWORD *)(a1 + 24));
    v17 = v19;
    v18 = 0x400000000;
    sub_1C4848C0C((unsigned int *)&v17, v7, v8);
    v2 = llvm::ConstantArray::get((llvm::PoisonValue *)a1, (llvm::Type *)v17, v18);
    v9 = v17;
    if (v17 == v19)
      return (llvm::ValueHandleBase *)v2;
  }
  free(v9);
  return (llvm::ValueHandleBase *)v2;
}

void sub_1C58A1E88(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  llvm::Type *v5;
  const llvm::APInt *v6;
  llvm::Value **NullValue;
  llvm::ConstantInt *v8;
  unsigned int v9;
  char v10;
  uint64_t *v11;
  llvm::ConstantInt *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v16, a2, 0, 0, 0);
  v4 = sub_1C58A0068(*(_QWORD **)(a1 + 32), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v16, (llvm::PointerType *)(*(_QWORD *)v18 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v18 + 1912), v5);
  v8 = *(llvm::ConstantInt **)(*(_QWORD *)v18 + 1984);
  v9 = *(_DWORD *)(*(_QWORD *)v18 + 1992);
  v15 = v9 >> 8;
  if (v9 >> 8 > 0x40)
  {
    v12 = v8;
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, 24, 0);
    v8 = v12;
  }
  else
  {
    if (v9 <= 0xFF)
      v10 = 0;
    else
      v10 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v9);
    v14 = v10 & 0x18;
  }
  v11 = (uint64_t *)llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v14, v6);
  if (v15 >= 0x41 && v14)
  {
    v13 = v11;
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
    v11 = v13;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v16, (llvm::Value *)v4, (uint64_t)NullValue, v11, 259, 0, 0, 0, 0);
  if (v16[0] != &v17)
    free(v16[0]);
}

_QWORD *sub_1C58A201C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DEF0;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

void sub_1C58A205C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DEF0;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58A20AC(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  const char *v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  llvm::Value **v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  char *v38;
  llvm::Value ***v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  llvm::Value *v44;
  llvm::Value ****v45;
  llvm::Value *v46;
  llvm::PointerType *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::ConstantInt *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  char v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  llvm::Value *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 **v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v82;
  unint64_t v83;
  void *__p;
  unsigned int v85;
  char v86;
  int v87;
  __int16 v88;
  char v89[32];
  __int16 v90;
  _QWORD v91[4];
  __int16 v92;

  v3 = *(_DWORD *)(a2 + 20);
  v4 = v3 & 0x7FFFFFF;
  v5 = a2 - 32 * v4;
  v6 = (*(_DWORD *)(*(_QWORD *)(a2 + 72) + 12) - 1);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 84)
  {
    v8 = a3;
    v9 = a1;
    v10 = 0;
  }
  else
  {
    if (v7 == 39)
      v10 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v10 = 2;
    v9 = a1;
    v8 = a3;
  }
  v11 = (uint64_t **)(v5 + 32 * v6);
  if (v3 < 0)
  {
    v78 = *(_QWORD *)(v5 - 8);
    if ((v78 & 0xFFFFFFFF0) != 0)
      v12 = (*(_DWORD *)(v5 - 12) - *(_DWORD *)(v5 - v78));
    else
      v12 = 0;
    v9 = a1;
    v8 = a3;
  }
  else
  {
    v12 = 0;
  }
  if (v11 == (uint64_t **)(a2 - 32 * v10 - 32 * v12 - 32))
  {
    v13 = 0;
  }
  else
  {
    LODWORD(v13) = 0;
    v14 = *(_QWORD *)(v9[1] + 40) + 272;
    v15 = 32 * v4 - 32 * v10 - 32 * v12 - 32 * v6 - 32;
    v82 = v14;
    do
    {
      v16 = *(_QWORD *)(v9[1] + 40) + 216;
      v92 = 260;
      v91[0] = v16;
      llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v91);
      v17 = *v11;
      v18 = **v11;
      sub_1C4768AD0(v14, v18);
      v20 = v19;
      v22 = v21 == 1;
      llvm::DataLayout::getAlignment(v14, v18);
      v25 = v24;
      if (v22)
      v26 = ((1 << v25) + ((unint64_t)(v20 + 7) >> 3) - 1) & -(1 << v25);
      if (v87 != 18 || v26 >= 8)
        v28 = v13;
      else
        v28 = (v13 - v26 + 8);
      v29 = v28 + v26;
      if ((v28 + v26) <= 0x320)
      {
        v30 = *v17;
        v31 = v9[2];
        v32 = *(unsigned __int8 **)(v31 + 72);
        v33 = *(_QWORD *)(v31 + 24);
        v92 = 257;
        v34 = sub_1C5098D9C(v8, v32, v33, (uint64_t)v91);
        v35 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v9[2] + 24), v28, 0);
        v90 = 257;
        v36 = v8;
        v37 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v8[9] + 16))(v8[9], v34, v35, 0, 0);
        if (!v37)
        {
          v92 = 257;
          v38 = (char *)operator new(0x80uLL);
          *(_QWORD *)v38 = 0;
          *((_QWORD *)v38 + 1) = 0;
          *((_QWORD *)v38 + 2) = 0;
          *((_QWORD *)v38 + 5) = 0;
          *((_QWORD *)v38 + 6) = 0;
          *((_QWORD *)v38 + 4) = 0;
          v39 = (llvm::Value ***)(v38 + 32);
          *((_QWORD *)v38 + 8) = *(_QWORD *)v34;
          v40 = (uint64_t)(v38 + 64);
          *((_QWORD *)v38 + 3) = v38 + 64;
          *((_QWORD *)v38 + 7) = v38 + 64;
          *((_QWORD *)v38 + 9) = 0;
          v38[80] = 41;
          v38[81] = 0;
          *((_WORD *)v38 + 41) = 0;
          *((_DWORD *)v38 + 21) = 2;
          *((_DWORD *)v38 + 30) = 0;
          *(_OWORD *)(v38 + 104) = 0u;
          *(_OWORD *)(v38 + 88) = 0u;
          *(_QWORD *)v38 = v34;
          v43 = *((_QWORD *)v34 + 1);
          v42 = v34 + 8;
          v41 = v43;
          *((_QWORD *)v38 + 1) = v43;
          if (v43)
            *(_QWORD *)(v41 + 16) = v38 + 8;
          *((_QWORD *)v38 + 2) = v42;
          *v42 = v38;
          if (*((_QWORD *)v38 + 4))
          {
            **((_QWORD **)v38 + 6) = *((_QWORD *)v38 + 5);
            v52 = *((_QWORD *)v38 + 5);
            if (v52)
              *(_QWORD *)(v52 + 16) = *((_QWORD *)v38 + 6);
          }
          *v39 = v35;
          if (v35)
          {
            v46 = v35[1];
            v45 = (llvm::Value ****)(v35 + 1);
            v44 = v46;
            *((_QWORD *)v38 + 5) = v46;
            if (v46)
              *((_QWORD *)v44 + 2) = v38 + 40;
            *((_QWORD *)v38 + 6) = v45;
            *v45 = v39;
          }
          llvm::Value::setName((uint64_t ***)v38 + 8, (uint64_t)v91);
          v36 = a3;
          v37 = (unsigned __int8 *)sub_1C4773754(a3, v40, (uint64_t)v89);
          v9 = a1;
        }
        sub_1C58A1544((_QWORD *)v9[3], v30);
        v48 = llvm::PointerType::get(v47, 0);
        v91[0] = "_msarg";
        v92 = 259;
        v49 = sub_1C4773E38(v36, 48, v37, v48, (uint64_t)v91);
        if (v49)
        {
          v50 = (uint64_t)v49;
          v51 = (uint64_t *)sub_1C58A06BC(v9[3], (uint64_t)v17);
          v83 = v83 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1ED813A68) | 0x100;
          sub_1C509CCE8(v36, v51, v50, HIBYTE(word_1ED813A68) | 0x100, 0);
        }
        v8 = v36;
        v14 = v82;
      }
      if (v86 < 0)
        operator delete(__p);
      v13 = (v29 + 7) & 0xFFFFFFF8;
      v11 += 4;
      v15 -= 32;
    }
    while (v15);
  }
  v53 = *(_QWORD *)v8[8];
  v54 = *(llvm::ConstantInt **)(v53 + 1984);
  v55 = *(unsigned int *)(v53 + 1992);
  v85 = v55 >> 8;
  if (v55 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v13, 0);
  }
  else
  {
    if (v55 <= 0xFF)
      v56 = 0;
    else
      v56 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v55);
    __p = (void *)(v56 & v13);
  }
  v57 = (uint64_t *)llvm::ConstantInt::get(v54, (llvm::LLVMContext *)&__p, (const llvm::APInt *)a3);
  if (v85 >= 0x41 && __p)
    MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
  v58 = *(_QWORD *)(v9[2] + 88);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v8[6] + 56) + 40) + 272, *v57);
  v60 = v59;
  v61 = (char *)operator new(0x80uLL);
  v62 = v61;
  *((_DWORD *)v61 + 21) = *((_DWORD *)v61 + 21) & 0x38000000 | 2;
  *(_QWORD *)v61 = 0;
  *((_QWORD *)v61 + 2) = 0;
  *((_QWORD *)v61 + 1) = 0;
  *((_QWORD *)v61 + 5) = 0;
  *((_QWORD *)v61 + 6) = 0;
  *((_QWORD *)v61 + 4) = 0;
  v63 = v61 + 32;
  *((_QWORD *)v61 + 8) = **(_QWORD **)*v57 + 1576;
  v64 = (llvm::Value *)(v61 + 64);
  *((_QWORD *)v61 + 3) = v61 + 64;
  *((_QWORD *)v61 + 7) = v61 + 64;
  *((_QWORD *)v61 + 9) = 0;
  v61[80] = 61;
  v61[81] = 0;
  *((_WORD *)v61 + 41) = 0;
  *((_DWORD *)v61 + 21) = 2;
  *(_OWORD *)(v61 + 88) = 0u;
  *(_OWORD *)(v61 + 104) = 0u;
  *((_DWORD *)v61 + 30) = 0;
  v65 = v57 + 1;
  v66 = v57[1];
  *(_QWORD *)v61 = v57;
  *((_QWORD *)v61 + 1) = v66;
  if (v66)
    *(_QWORD *)(v66 + 16) = v61 + 8;
  *((_QWORD *)v61 + 2) = v65;
  *v65 = v61;
  if (*((_QWORD *)v61 + 4))
  {
    **((_QWORD **)v61 + 6) = *((_QWORD *)v61 + 5);
    v79 = *((_QWORD *)v61 + 5);
    if (v79)
      *(_QWORD *)(v79 + 16) = *((_QWORD *)v61 + 6);
  }
  *v63 = v58;
  if (v58)
  {
    v69 = *(_QWORD *)(v58 + 8);
    v68 = (_QWORD *)(v58 + 8);
    v67 = v69;
    *((_QWORD *)v61 + 5) = v69;
    if (v69)
      *(_QWORD *)(v67 + 16) = v61 + 40;
    *((_QWORD *)v61 + 6) = v68;
    *v68 = v63;
  }
  *((_WORD *)v61 + 41) = 2 * (v60 & 0x3F);
  v61[124] = 1;
  v88 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v8[10] + 16))(v8[10], v64, &__p, v8[6], v8[7]);
  v70 = *((unsigned int *)v8 + 2);
  if ((_DWORD)v70)
  {
    v71 = *v8;
    v72 = *v8 + 16 * v70;
    v73 = (unsigned __int8 **)(v62 + 112);
    do
    {
      v74 = *(_DWORD *)v71;
      v75 = *(unsigned __int8 **)(v71 + 8);
      if (v75)
      {
        if (!v74)
        {
          v91[0] = *(_QWORD *)(v71 + 8);
          llvm::MetadataTracking::track((uint64_t)v91, v75, 2);
          v76 = *v73;
          goto LABEL_61;
        }
      }
      else
      {
        v76 = *v73;
        if (!*v73 && (v62[87] & 0x20) == 0)
          goto LABEL_58;
        if (!v74)
        {
          v91[0] = 0;
LABEL_61:
          if (v76)
            llvm::MetadataTracking::untrack((uint64_t)(v62 + 112), v76);
          v77 = (unsigned __int8 *)v91[0];
          *v73 = (unsigned __int8 *)v91[0];
          if (v77)
            llvm::MetadataTracking::retrack((uint64_t)v91, v77, (uint64_t)(v62 + 112));
          goto LABEL_58;
        }
      }
      llvm::Value::setMetadata(v64, *(_DWORD *)v71, (llvm::MDNode *)v75);
LABEL_58:
      v71 += 16;
    }
    while (v71 != v72);
  }
}

void sub_1C58A26FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  llvm::Type *v6;
  const llvm::APInt *v7;
  llvm::Value **NullValue;
  llvm::ConstantInt *v9;
  unsigned int v10;
  char v11;
  uint64_t *v12;
  llvm::ConstantInt *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, a2, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 56);
  v5 = sub_1C58A0068(*(_QWORD **)(a1 + 24), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v17, (llvm::PointerType *)(*(_QWORD *)v19 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v19 + 1912), v6);
  v9 = *(llvm::ConstantInt **)(*(_QWORD *)v19 + 1984);
  v10 = *(_DWORD *)(*(_QWORD *)v19 + 1992);
  v16 = v10 >> 8;
  if (v10 >> 8 > 0x40)
  {
    v13 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, 8, 0);
    v9 = v13;
  }
  else
  {
    if (v10 <= 0xFF)
      v11 = 0;
    else
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
    v15 = v11 & 8;
  }
  v12 = (uint64_t *)llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v15, v7);
  if (v16 >= 0x41 && v15)
  {
    v14 = v12;
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    v12 = v14;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v17, (llvm::Value *)v5, (uint64_t)NullValue, v12, 259, 0, 0, 0, 0);
  if (v17[0] != &v18)
    free(v17[0]);
}

void sub_1C58A28CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  llvm::Type *v6;
  const llvm::APInt *v7;
  llvm::Value **NullValue;
  llvm::ConstantInt *v9;
  unsigned int v10;
  char v11;
  uint64_t *v12;
  llvm::ConstantInt *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, a2, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 56);
  v5 = sub_1C58A0068(*(_QWORD **)(a1 + 24), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v17, (llvm::PointerType *)(*(_QWORD *)v19 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v19 + 1912), v6);
  v9 = *(llvm::ConstantInt **)(*(_QWORD *)v19 + 1984);
  v10 = *(_DWORD *)(*(_QWORD *)v19 + 1992);
  v16 = v10 >> 8;
  if (v10 >> 8 > 0x40)
  {
    v13 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, 8, 0);
    v9 = v13;
  }
  else
  {
    if (v10 <= 0xFF)
      v11 = 0;
    else
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
    v15 = v11 & 8;
  }
  v12 = (uint64_t *)llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v15, v7);
  if (v16 >= 0x41 && v15)
  {
    v14 = v12;
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    v12 = v14;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v17, (llvm::Value *)v5, (uint64_t)NullValue, v12, 259, 0, 0, 0, 0);
  if (v17[0] != &v18)
    free(v17[0]);
}

void sub_1C58A2A9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char *v6;
  char *v7;
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Value **v12;
  uint64_t v13;
  llvm::PointerType *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 *v22;
  llvm::PointerType *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  char v28;
  char v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  llvm::Value *v47;
  _QWORD *v48;
  llvm::Value *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unsigned __int8 **v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  char *v60;
  char *v61;
  unsigned __int8 **v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t ***v68;
  _QWORD v69[4];
  __int16 v70;
  _BYTE v71[32];
  __int16 v72;
  unsigned __int8 *v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v82, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 448), 0, 0, 0);
  v2 = *v87 + 1984;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v72 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v85 + 56) + 40) + 272, v2);
  v5 = v4;
  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  v8 = (llvm::Value *)(v6 + 32);
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 32;
  v77 = 257;
  *((_QWORD *)v6 + 4) = v2;
  *((_QWORD *)v6 + 5) = 0;
  *((_WORD *)v6 + 24) = 60;
  *((_DWORD *)v6 + 13) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 22) = 0;
  *(_QWORD *)v6 = v3;
  *((_QWORD *)v6 + 1) = 0;
  if (v3)
  {
    v11 = *(_QWORD *)(v3 + 8);
    v10 = (_QWORD *)(v3 + 8);
    v9 = v11;
    *((_QWORD *)v6 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v6 + 8;
    *((_QWORD *)v6 + 2) = v10;
    *v10 = v6;
  }
  *((_WORD *)v6 + 25) = 2 * (v5 & 0x3F);
  v6[92] = 1;
  llvm::Value::setName((uint64_t ***)v6 + 4, (uint64_t)&v74);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v8, v71, v85, v86);
  if (v83)
  {
    v60 = v82;
    v61 = &v82[16 * v83];
    v62 = (unsigned __int8 **)(v7 + 80);
    do
    {
      v63 = *(_DWORD *)v60;
      v64 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
      if (v64)
      {
        if (!v63)
        {
          v69[0] = *((_QWORD *)v60 + 1);
          llvm::MetadataTracking::track((uint64_t)v69, v64, 2);
          v65 = *v62;
          goto LABEL_76;
        }
      }
      else
      {
        v65 = *v62;
        if (!*v62 && (v7[55] & 0x20) == 0)
          goto LABEL_73;
        if (!v63)
        {
          v69[0] = 0;
LABEL_76:
          if (v65)
            llvm::MetadataTracking::untrack((uint64_t)(v7 + 80), v65);
          v66 = (unsigned __int8 *)v69[0];
          *v62 = (unsigned __int8 *)v69[0];
          if (v66)
            llvm::MetadataTracking::retrack((uint64_t)v69, v66, (uint64_t)(v7 + 80));
          goto LABEL_73;
        }
      }
      llvm::Value::setMetadata(v8, *(_DWORD *)v60, (llvm::MDNode *)v64);
LABEL_73:
      v60 += 16;
    }
    while (v60 != v61);
  }
  *(_QWORD *)(a1 + 40) = v8;
  v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 0, 0);
  v13 = *(_QWORD *)(a1 + 40);
  v72 = 257;
  v68 = (uint64_t ***)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v88 + 16))(v88, v12, v13, 0, 0);
  if (!v68)
  {
    v77 = 257;
    v44 = (char *)operator new(0x80uLL);
    v45 = v44;
    *((_QWORD *)v44 + 4) = 0;
    v46 = v44 + 32;
    *((_QWORD *)v44 + 5) = 0;
    *((_QWORD *)v44 + 6) = 0;
    *((_QWORD *)v44 + 8) = *v12;
    *((_QWORD *)v44 + 3) = v44 + 64;
    v68 = (uint64_t ***)(v44 + 64);
    *((_QWORD *)v44 + 7) = v44 + 64;
    *((_QWORD *)v44 + 9) = 0;
    v44[80] = 41;
    v44[81] = 0;
    *((_WORD *)v44 + 41) = 0;
    *((_DWORD *)v44 + 21) = 2;
    *(_OWORD *)(v44 + 88) = 0u;
    *(_OWORD *)(v44 + 104) = 0u;
    *((_DWORD *)v44 + 30) = 0;
    *(_QWORD *)v44 = v12;
    v49 = v12[1];
    v48 = v12 + 1;
    v47 = v49;
    *((_QWORD *)v44 + 1) = v49;
    if (v49)
      *((_QWORD *)v47 + 2) = v44 + 8;
    *((_QWORD *)v44 + 2) = v48;
    *v48 = v44;
    if (*((_QWORD *)v44 + 4))
    {
      **((_QWORD **)v44 + 6) = *((_QWORD *)v44 + 5);
      v67 = *((_QWORD *)v44 + 5);
      if (v67)
        *(_QWORD *)(v67 + 16) = *((_QWORD *)v44 + 6);
    }
    *v46 = v13;
    if (v13)
    {
      v52 = *(_QWORD *)(v13 + 8);
      v51 = (_QWORD *)(v13 + 8);
      v50 = v52;
      *((_QWORD *)v44 + 5) = v52;
      if (v52)
        *(_QWORD *)(v50 + 16) = v44 + 40;
      *((_QWORD *)v44 + 6) = v51;
      *v51 = v46;
    }
    llvm::Value::setName(v68, (uint64_t)&v74);
    (*(void (**)(uint64_t, uint64_t ***, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v68, v71, v85, v86);
    if (v83)
    {
      v53 = v82;
      v54 = &v82[16 * v83];
      v55 = (unsigned __int8 **)(v45 + 112);
      do
      {
        v56 = *(_DWORD *)v53;
        v57 = (unsigned __int8 *)*((_QWORD *)v53 + 1);
        if (v57)
        {
          if (!v56)
          {
            v69[0] = *((_QWORD *)v53 + 1);
            llvm::MetadataTracking::track((uint64_t)v69, v57, 2);
            v58 = *v55;
            if (!*v55)
            {
LABEL_63:
              v59 = (unsigned __int8 *)v69[0];
              *v55 = (unsigned __int8 *)v69[0];
              if (v59)
                llvm::MetadataTracking::retrack((uint64_t)v69, v59, (uint64_t)(v45 + 112));
              goto LABEL_60;
            }
LABEL_57:
            llvm::MetadataTracking::untrack((uint64_t)(v45 + 112), v58);
            goto LABEL_63;
          }
        }
        else
        {
          v58 = *v55;
          if (!*v55 && (v45[87] & 0x20) == 0)
            goto LABEL_60;
          if (!v56)
          {
            v69[0] = 0;
            if (!v58)
              goto LABEL_63;
            goto LABEL_57;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v68, *(_DWORD *)v53, (llvm::MDNode *)v57);
LABEL_60:
        v53 += 16;
      }
      while (v53 != v54);
    }
  }
  if (*(_DWORD *)(a1 + 56))
  {
    v14 = (llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1912);
    v77 = 257;
    v15 = sub_1C486A5CC((uint64_t *)&v82, v14, (llvm::ValueHandleBase *)v68, (uint64_t)&v74);
    *(_QWORD *)(a1 + 32) = v15;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v82, 194, (llvm::Value *)v15, 259, *(llvm::Value **)(*(_QWORD *)(a1 + 16) + 72), 259, (uint64_t *)v68, 0, 0, 0, 0, 0);
    v16 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v16)
    {
      v17 = 0;
      while (1)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v17);
        v19 = *(_QWORD *)(v18 + 32);
        if (v19)
          v20 = v19 == *(_QWORD *)(v18 + 40) + 40;
        else
          v20 = 1;
        if (v20)
          v21 = 0;
        else
          v21 = v19 - 24;
        sub_1C4773D54((uint64_t)&v74, v21, 0, 0, 0);
        v22 = *(unsigned __int8 **)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
        v23 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1984), 0);
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        v72 = 257;
        v25 = sub_1C4773E38((uint64_t *)&v74, 47, v22, v24, (uint64_t)v71);
        v26 = llvm::PointerType::get(v23, 0);
        v70 = 257;
        v27 = sub_1C4773E38((uint64_t *)&v74, 48, v25, v26, (uint64_t)v69);
        v70 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v78 + 56) + 40) + 272, (uint64_t)v23);
        v29 = v28;
        v30 = (char *)operator new(0x60uLL);
        v31 = v30;
        v32 = (unsigned __int8 *)(v30 + 32);
        *((_QWORD *)v30 + 2) = 0;
        *((_QWORD *)v30 + 3) = v30 + 32;
        v72 = 257;
        *((_QWORD *)v30 + 4) = v23;
        *((_QWORD *)v30 + 5) = 0;
        *((_WORD *)v30 + 24) = 60;
        *((_DWORD *)v30 + 13) = 1;
        *(_OWORD *)(v30 + 56) = 0u;
        *(_OWORD *)(v30 + 72) = 0u;
        *((_DWORD *)v30 + 22) = 0;
        *(_QWORD *)v30 = v27;
        *((_QWORD *)v30 + 1) = 0;
        if (v27)
        {
          v35 = *((_QWORD *)v27 + 1);
          v34 = v27 + 8;
          v33 = v35;
          *((_QWORD *)v30 + 1) = v35;
          if (v35)
            *(_QWORD *)(v33 + 16) = v30 + 8;
          *((_QWORD *)v30 + 2) = v34;
          *v34 = v30;
        }
        *((_WORD *)v30 + 25) = 2 * (v29 & 0x3F);
        v30[92] = 1;
        llvm::Value::setName((uint64_t ***)v30 + 4, (uint64_t)v71);
        (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v32, v69, v78, v79);
        if (v75)
          break;
LABEL_21:
        v36 = sub_1C58A0068(*(_QWORD **)(a1 + 24), v32, (uint64_t)&v74, (llvm::PointerType *)(*(_QWORD *)v80 + 1912), 259, 1);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v74, 194, (llvm::Value *)v36, 259, *(llvm::Value **)(a1 + 32), 259, (uint64_t *)v68, 0, 0, 0, 0, 0);
        if (v74 != &v76)
          free(v74);
        if (++v17 == v16)
          goto LABEL_40;
      }
      v37 = (char *)v74;
      v38 = (char *)v74 + 16 * v75;
      v39 = (unsigned __int8 **)(v31 + 80);
      while (1)
      {
        v40 = *(_DWORD *)v37;
        v41 = (unsigned __int8 *)*((_QWORD *)v37 + 1);
        if (v41)
        {
          if (!v40)
          {
            v73 = (unsigned __int8 *)*((_QWORD *)v37 + 1);
            llvm::MetadataTracking::track((uint64_t)&v73, v41, 2);
            v42 = *v39;
            goto LABEL_36;
          }
        }
        else
        {
          v42 = *v39;
          if (!*v39 && (v31[55] & 0x20) == 0)
            goto LABEL_33;
          if (!v40)
          {
            v73 = 0;
LABEL_36:
            if (v42)
              llvm::MetadataTracking::untrack((uint64_t)(v31 + 80), v42);
            v43 = v73;
            *v39 = v73;
            if (v43)
              llvm::MetadataTracking::retrack((uint64_t)&v73, v43, (uint64_t)(v31 + 80));
            goto LABEL_33;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v32, *(_DWORD *)v37, (llvm::MDNode *)v41);
LABEL_33:
        v37 += 16;
        if (v37 == v38)
          goto LABEL_21;
      }
    }
  }
LABEL_40:
  if (v82 != (char *)&v84)
    free(v82);
}

_QWORD *sub_1C58A3198(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DF30;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

void sub_1C58A31D8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DF30;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58A3228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Type *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  unint64_t PrimitiveSizeInBits;
  unint64_t v23;
  unsigned int v24;
  unsigned __int8 *v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  const char *v33;
  char v34;
  char v35;
  int v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::ConstantInt *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  char v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  llvm::Value *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 **v60;
  int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v69;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  __int16 v76;
  unsigned __int8 *v77;

  v4 = *(_DWORD *)(a2 + 20);
  v5 = v4 & 0x7FFFFFF;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    v7 = a3;
    v8 = (_QWORD *)a1;
    v9 = 0;
  }
  else
  {
    if (v6 == 39)
      v9 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v9 = 2;
    v7 = a3;
    v8 = (_QWORD *)a1;
  }
  v10 = a2 - 32 * v5;
  if (v4 < 0)
  {
    v65 = *(_QWORD *)(v10 - 8);
    if ((v65 & 0xFFFFFFFF0) != 0)
      v11 = (*(_DWORD *)(v10 - 12) - *(_DWORD *)(v10 - v65));
    else
      v11 = 0;
    v7 = a3;
    v8 = (_QWORD *)a1;
  }
  else
  {
    v11 = 0;
  }
  if (v10 != a2 - 32 * v9 - 32 * v11 - 32)
  {
    v12 = 0;
    v13 = -32 * v5;
    v67 = *(_QWORD *)(v8[1] + 40) + 272;
    v72 = (32 * v9 + 32 * v11) ^ 0xFFFFFFFFFFFFFFE0;
    v69 = 192;
    v73 = 64;
    while (1)
    {
      v14 = *(llvm::Type ***)(a2 + v13);
      v15 = *v14;
      v16 = *((_DWORD *)*v14 + 2);
      v17 = v16;
      if ((*((_DWORD *)*v14 + 2) & 0xFE) == 0x12)
        v17 = *(unsigned __int8 *)(**((_QWORD **)v15 + 2) + 8);
      v18 = *(_DWORD *)(a2 + 20);
      v19 = *(_DWORD *)(*(_QWORD *)(a2 + 72) + 12);
      if (v17 < 7)
      {
        v20 = 1;
        goto LABEL_18;
      }
      if (v16 == 13)
      {
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v14);
        if ((_DWORD)v21 == 1)
        if (PrimitiveSizeInBits < 0x41)
        {
          v20 = 0;
          v8 = (_QWORD *)a1;
          goto LABEL_18;
        }
        v16 = *((unsigned __int8 *)v15 + 8);
        v8 = (_QWORD *)a1;
      }
      v20 = 2 * (v16 != 15);
LABEL_18:
      v23 = (v13 + 32 * (unint64_t)(v18 & 0x7FFFFFF)) >> 5;
      v24 = v19 - 1;
      if (v12 > 0x3F && v20 == 0)
        v20 = 2;
      if (v73 > 0xBF && v20 == 1)
        v20 = 2;
      switch(v20)
      {
        case 2:
          if (v24 <= v23)
          {
            v28 = *v14;
            sub_1C4768AD0(v67, (uint64_t)*v14);
            v30 = v29;
            v32 = v31 == 1;
            llvm::DataLayout::getAlignment(v67, (uint64_t)v28);
            v35 = v34;
            if (v32)
            v36 = ((((1 << v35) - 1 + ((unint64_t)(v30 + 7) >> 3)) & -(1 << v35)) + 7) & 0xFFFFFFF8;
            v27 = sub_1C58A4B70(a1, (uint64_t)*v14, a3, v69, v36);
            v69 += v36;
            v8 = (_QWORD *)a1;
            v7 = a3;
            goto LABEL_37;
          }
          break;
        case 1:
          v27 = sub_1C58A4B70((uint64_t)v8, (uint64_t)*v14, v7, v73, 8);
          v73 += 16;
LABEL_37:
          if (v24 <= v23 && v27 != 0)
          {
            v38 = (uint64_t *)sub_1C58A06BC(v8[3], (uint64_t)v14);
            v71 = v71 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1ED813A68) | 0x100;
            sub_1C509CCE8((uint64_t *)v7, v38, (uint64_t)v27, HIBYTE(word_1ED813A68) | 0x100, 0);
          }
          break;
        case 0:
          v27 = sub_1C58A4B70((uint64_t)v8, (uint64_t)*v14, v7, v12, 8);
          v12 += 8;
          goto LABEL_37;
      }
      v13 += 32;
      if (v72 == v13)
        goto LABEL_45;
    }
  }
  v69 = 192;
LABEL_45:
  v39 = **(_QWORD **)(v7 + 64);
  v40 = v69 - 192;
  v41 = *(llvm::ConstantInt **)(v39 + 1984);
  v42 = *(unsigned int *)(v39 + 1992);
  v75 = v42 >> 8;
  if (v42 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, v40, 0);
  }
  else
  {
    if (v42 <= 0xFF)
      v43 = 0;
    else
      v43 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v42);
    v74 = v43 & v40;
  }
  v44 = (uint64_t *)llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v74, (const llvm::APInt *)a3);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  v45 = *(_QWORD *)(v8[2] + 88);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 56) + 40) + 272, *v44);
  v47 = v46;
  v48 = (char *)operator new(0x80uLL);
  v49 = v48;
  *((_DWORD *)v48 + 21) = *((_DWORD *)v48 + 21) & 0x38000000 | 2;
  *(_QWORD *)v48 = 0;
  *((_QWORD *)v48 + 2) = 0;
  *((_QWORD *)v48 + 1) = 0;
  *((_QWORD *)v48 + 5) = 0;
  *((_QWORD *)v48 + 6) = 0;
  *((_QWORD *)v48 + 4) = 0;
  v50 = v48 + 32;
  *((_QWORD *)v48 + 8) = **(_QWORD **)*v44 + 1576;
  v51 = (llvm::Value *)(v48 + 64);
  *((_QWORD *)v48 + 3) = v48 + 64;
  *((_QWORD *)v48 + 7) = v48 + 64;
  *((_QWORD *)v48 + 9) = 0;
  v48[80] = 61;
  v48[81] = 0;
  *((_WORD *)v48 + 41) = 0;
  *((_DWORD *)v48 + 21) = 2;
  *(_OWORD *)(v48 + 88) = 0u;
  *(_OWORD *)(v48 + 104) = 0u;
  *((_DWORD *)v48 + 30) = 0;
  v52 = v44 + 1;
  v53 = v44[1];
  *(_QWORD *)v48 = v44;
  *((_QWORD *)v48 + 1) = v53;
  if (v53)
    *(_QWORD *)(v53 + 16) = v48 + 8;
  *((_QWORD *)v48 + 2) = v52;
  *v52 = v48;
  if (*((_QWORD *)v48 + 4))
  {
    **((_QWORD **)v48 + 6) = *((_QWORD *)v48 + 5);
    v66 = *((_QWORD *)v48 + 5);
    if (v66)
      *(_QWORD *)(v66 + 16) = *((_QWORD *)v48 + 6);
  }
  *v50 = v45;
  if (v45)
  {
    v56 = *(_QWORD *)(v45 + 8);
    v55 = (_QWORD *)(v45 + 8);
    v54 = v56;
    *((_QWORD *)v48 + 5) = v56;
    if (v56)
      *(_QWORD *)(v54 + 16) = v48 + 40;
    *((_QWORD *)v48 + 6) = v55;
    *v55 = v50;
  }
  *((_WORD *)v48 + 41) = 2 * (v47 & 0x3F);
  v48[124] = 1;
  v76 = 257;
  (*(void (**)(_QWORD, llvm::Value *, unint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a3 + 80) + 16))(*(_QWORD *)(a3 + 80), v51, &v74, *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56));
  v57 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v57)
  {
    v58 = *(_QWORD *)a3;
    v59 = *(_QWORD *)a3 + 16 * v57;
    v60 = (unsigned __int8 **)(v49 + 112);
    do
    {
      v61 = *(_DWORD *)v58;
      v62 = *(unsigned __int8 **)(v58 + 8);
      if (v62)
      {
        if (!v61)
        {
          v77 = *(unsigned __int8 **)(v58 + 8);
          llvm::MetadataTracking::track((uint64_t)&v77, v62, 2);
          v63 = *v60;
          goto LABEL_71;
        }
      }
      else
      {
        v63 = *v60;
        if (!*v60 && (v49[87] & 0x20) == 0)
          goto LABEL_68;
        if (!v61)
        {
          v77 = 0;
LABEL_71:
          if (v63)
            llvm::MetadataTracking::untrack((uint64_t)(v49 + 112), v63);
          v64 = v77;
          *v60 = v77;
          if (v64)
            llvm::MetadataTracking::retrack((uint64_t)&v77, v64, (uint64_t)(v49 + 112));
          goto LABEL_68;
        }
      }
      llvm::Value::setMetadata(v51, *(_DWORD *)v58, (llvm::MDNode *)v62);
LABEL_68:
      v58 += 16;
    }
    while (v58 != v59);
  }
}

void sub_1C58A3810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  llvm::Type *v6;
  const llvm::APInt *v7;
  llvm::Value **NullValue;
  llvm::ConstantInt *v9;
  unsigned int v10;
  char v11;
  uint64_t *v12;
  llvm::ConstantInt *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, a2, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 56);
  v5 = sub_1C58A0068(*(_QWORD **)(a1 + 24), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v17, (llvm::PointerType *)(*(_QWORD *)v19 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v19 + 1912), v6);
  v9 = *(llvm::ConstantInt **)(*(_QWORD *)v19 + 1984);
  v10 = *(_DWORD *)(*(_QWORD *)v19 + 1992);
  v16 = v10 >> 8;
  if (v10 >> 8 > 0x40)
  {
    v13 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, 32, 0);
    v9 = v13;
  }
  else
  {
    if (v10 <= 0xFF)
      v11 = 0;
    else
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
    v15 = v11 & 0x20;
  }
  v12 = (uint64_t *)llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v15, v7);
  if (v16 >= 0x41 && v15)
  {
    v14 = v12;
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    v12 = v14;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v17, (llvm::Value *)v5, (uint64_t)NullValue, v12, 259, 0, 0, 0, 0);
  if (v17[0] != &v18)
    free(v17[0]);
}

void sub_1C58A39E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  llvm::Type *v6;
  const llvm::APInt *v7;
  llvm::Value **NullValue;
  llvm::ConstantInt *v9;
  unsigned int v10;
  char v11;
  uint64_t *v12;
  llvm::ConstantInt *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, a2, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 56);
  v5 = sub_1C58A0068(*(_QWORD **)(a1 + 24), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v17, (llvm::PointerType *)(*(_QWORD *)v19 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v19 + 1912), v6);
  v9 = *(llvm::ConstantInt **)(*(_QWORD *)v19 + 1984);
  v10 = *(_DWORD *)(*(_QWORD *)v19 + 1992);
  v16 = v10 >> 8;
  if (v10 >> 8 > 0x40)
  {
    v13 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, 32, 0);
    v9 = v13;
  }
  else
  {
    if (v10 <= 0xFF)
      v11 = 0;
    else
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
    v15 = v11 & 0x20;
  }
  v12 = (uint64_t *)llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v15, v7);
  if (v16 >= 0x41 && v15)
  {
    v14 = v12;
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    v12 = v14;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v17, (llvm::Value *)v5, (uint64_t)NullValue, v12, 259, 0, 0, 0, 0);
  if (v17[0] != &v18)
    free(v17[0]);
}

void sub_1C58A3BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char *v6;
  char *v7;
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Value **v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::PointerType *v15;
  unsigned __int8 **v16;
  llvm::Value **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 *v23;
  llvm::Value *v24;
  unsigned __int8 *v25;
  llvm::Value *v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned __int8 ***v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned __int8 **v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  llvm::Value *v42;
  unsigned __int8 *v43;
  llvm::Value *v44;
  char *v45;
  char *v46;
  unsigned __int8 **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned __int8 ***v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unsigned __int8 **v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  llvm::Value *v61;
  char *v62;
  char *v63;
  unsigned __int8 **v64;
  llvm::Value *v65;
  uint64_t v66;
  unsigned __int8 ***v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unsigned __int8 **v71;
  int v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  llvm::GetElementPtrInst *v77;
  uint64_t *v78;
  uint64_t ***v79;
  uint64_t *v80;
  llvm::Value *v81;
  char *v82;
  char *v83;
  unsigned __int8 **v84;
  llvm::Value *v85;
  uint64_t v86;
  unsigned __int8 ***v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unsigned __int8 **v91;
  int v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  const llvm::APInt *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t *v99;
  llvm::ConstantInt *v100;
  unsigned int v101;
  char v102;
  llvm::ValueHandleBase *v103;
  uint64_t *v104;
  uint64_t ***v105;
  uint64_t *v106;
  const llvm::APInt *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t *v110;
  llvm::ConstantInt *v111;
  unsigned int v112;
  unint64_t v113;
  llvm::ValueHandleBase *v114;
  uint64_t ***v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  _QWORD *v122;
  llvm::Value *v123;
  _QWORD *v124;
  llvm::Value *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  unsigned __int8 **v131;
  int v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  char *v136;
  char *v137;
  unsigned __int8 **v138;
  int v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  llvm::Value **v147;
  unsigned __int8 *v148;
  llvm::Value **v149;
  _BYTE v150[32];
  __int16 v151;
  uint64_t v152;
  unsigned int v153;
  __int16 v154;
  unsigned __int8 *v155;
  void *v156;
  unsigned int v157;
  _BYTE v158[32];
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 56))
    goto LABEL_10;
  sub_1C4773D54((uint64_t)&v156, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 448), 0, 0, 0);
  v2 = *v161 + 1984;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v151 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v159 + 56) + 40) + 272, v2);
  v5 = v4;
  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  v8 = (llvm::Value *)(v6 + 32);
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 32;
  v154 = 257;
  *((_QWORD *)v6 + 4) = v2;
  *((_QWORD *)v6 + 5) = 0;
  *((_WORD *)v6 + 24) = 60;
  *((_DWORD *)v6 + 13) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 22) = 0;
  *(_QWORD *)v6 = v3;
  *((_QWORD *)v6 + 1) = 0;
  if (v3)
  {
    v11 = *(_QWORD *)(v3 + 8);
    v10 = (_QWORD *)(v3 + 8);
    v9 = v11;
    *((_QWORD *)v6 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v6 + 8;
    *((_QWORD *)v6 + 2) = v10;
    *v10 = v6;
  }
  *((_WORD *)v6 + 25) = 2 * (v5 & 0x3F);
  v6[92] = 1;
  llvm::Value::setName((uint64_t ***)v6 + 4, (uint64_t)&v152);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v8, v150, v159, v160);
  if (v157)
  {
    v136 = (char *)v156;
    v137 = (char *)v156 + 16 * v157;
    v138 = (unsigned __int8 **)(v7 + 80);
    do
    {
      v139 = *(_DWORD *)v136;
      v140 = (unsigned __int8 *)*((_QWORD *)v136 + 1);
      if (v140)
      {
        if (!v139)
        {
          v155 = (unsigned __int8 *)*((_QWORD *)v136 + 1);
          llvm::MetadataTracking::track((uint64_t)&v155, v140, 2);
          v141 = *v138;
          goto LABEL_175;
        }
      }
      else
      {
        v141 = *v138;
        if (!*v138 && (v7[55] & 0x20) == 0)
          goto LABEL_172;
        if (!v139)
        {
          v155 = 0;
LABEL_175:
          if (v141)
            llvm::MetadataTracking::untrack((uint64_t)(v7 + 80), v141);
          v142 = v155;
          *v138 = v155;
          if (v142)
            llvm::MetadataTracking::retrack((uint64_t)&v155, v142, (uint64_t)(v7 + 80));
          goto LABEL_172;
        }
      }
      llvm::Value::setMetadata(v8, *(_DWORD *)v136, (llvm::MDNode *)v140);
LABEL_172:
      v136 += 16;
    }
    while (v136 != v137);
  }
  *(_QWORD *)(a1 + 40) = v8;
  v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 192, 0);
  v13 = *(_QWORD *)(a1 + 40);
  v151 = 257;
  v14 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v162 + 16))(v162, v12, v13, 0, 0);
  if (!v14)
  {
    v154 = 257;
    v120 = (char *)operator new(0x80uLL);
    v121 = v120;
    *((_QWORD *)v120 + 4) = 0;
    v122 = v120 + 32;
    *((_QWORD *)v120 + 5) = 0;
    *((_QWORD *)v120 + 6) = 0;
    *((_QWORD *)v120 + 8) = *v12;
    v14 = (llvm::Value *)(v120 + 64);
    *((_QWORD *)v120 + 3) = v120 + 64;
    *((_QWORD *)v120 + 7) = v120 + 64;
    *((_QWORD *)v120 + 9) = 0;
    v120[80] = 41;
    v120[81] = 0;
    *((_WORD *)v120 + 41) = 0;
    *((_DWORD *)v120 + 21) = 2;
    *(_OWORD *)(v120 + 88) = 0u;
    *(_OWORD *)(v120 + 104) = 0u;
    *((_DWORD *)v120 + 30) = 0;
    *(_QWORD *)v120 = v12;
    v125 = v12[1];
    v124 = v12 + 1;
    v123 = v125;
    *((_QWORD *)v120 + 1) = v125;
    if (v125)
      *((_QWORD *)v123 + 2) = v120 + 8;
    *((_QWORD *)v120 + 2) = v124;
    *v124 = v120;
    if (*((_QWORD *)v120 + 4))
    {
      **((_QWORD **)v120 + 6) = *((_QWORD *)v120 + 5);
      v143 = *((_QWORD *)v120 + 5);
      if (v143)
        *(_QWORD *)(v143 + 16) = *((_QWORD *)v120 + 6);
    }
    *v122 = v13;
    if (v13)
    {
      v128 = *(_QWORD *)(v13 + 8);
      v127 = (_QWORD *)(v13 + 8);
      v126 = v128;
      *((_QWORD *)v120 + 5) = v128;
      if (v128)
        *(_QWORD *)(v126 + 16) = v120 + 40;
      *((_QWORD *)v120 + 6) = v127;
      *v127 = v122;
    }
    llvm::Value::setName((uint64_t ***)v120 + 8, (uint64_t)&v152);
    (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v14, v150, v159, v160);
    if (v157)
    {
      v129 = (char *)v156;
      v130 = (char *)v156 + 16 * v157;
      v131 = (unsigned __int8 **)(v121 + 112);
      do
      {
        v132 = *(_DWORD *)v129;
        v133 = (unsigned __int8 *)*((_QWORD *)v129 + 1);
        if (v133)
        {
          if (!v132)
          {
            v155 = (unsigned __int8 *)*((_QWORD *)v129 + 1);
            llvm::MetadataTracking::track((uint64_t)&v155, v133, 2);
            v134 = *v131;
            if (!*v131)
            {
LABEL_162:
              v135 = v155;
              *v131 = v155;
              if (v135)
                llvm::MetadataTracking::retrack((uint64_t)&v155, v135, (uint64_t)(v121 + 112));
              goto LABEL_159;
            }
LABEL_156:
            llvm::MetadataTracking::untrack((uint64_t)(v121 + 112), v134);
            goto LABEL_162;
          }
        }
        else
        {
          v134 = *v131;
          if (!*v131 && (v121[87] & 0x20) == 0)
            goto LABEL_159;
          if (!v132)
          {
            v155 = 0;
            if (!v134)
              goto LABEL_162;
            goto LABEL_156;
          }
        }
        llvm::Value::setMetadata(v14, *(_DWORD *)v129, (llvm::MDNode *)v133);
LABEL_159:
        v129 += 16;
      }
      while (v129 != v130);
    }
  }
  v15 = (llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1912);
  v154 = 257;
  v16 = sub_1C486A5CC((uint64_t *)&v156, v15, v14, (uint64_t)&v152);
  *(_QWORD *)(a1 + 32) = v16;
  llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v156, 194, (llvm::Value *)v16, 259, *(llvm::Value **)(*(_QWORD *)(a1 + 16) + 72), 259, (uint64_t *)v14, 0, 0, 0, 0, 0);
  if (v156 != v158)
    free(v156);
LABEL_10:
  v17 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 64, 0);
  v149 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 128, 0);
  v146 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v146)
  {
    v18 = 0;
    v145 = v17 + 1;
    v144 = v149 + 1;
    v147 = v17;
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v18);
      v20 = *(_QWORD *)(v19 + 32);
      if (v20)
        v21 = v20 == *(_QWORD *)(v19 + 40) + 40;
      else
        v21 = 1;
      if (v21)
        v22 = 0;
      else
        v22 = v20 - 24;
      sub_1C4773D54((uint64_t)&v156, v22, 0, 0, 0);
      v23 = *(unsigned __int8 **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
      v148 = (unsigned __int8 *)sub_1C58A4D30(a1, (uint64_t)&v156, v23, 0);
      v24 = sub_1C58A4D30(a1, (uint64_t)&v156, v23, 8u);
      v25 = sub_1C58A503C(a1, (uint64_t)&v156, v23, 0x18u);
      v151 = 257;
      v26 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value *, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v162 + 16))(v162, v24, v25, 0, 0);
      if (!v26)
      {
        v154 = 257;
        v27 = (char *)operator new(0x80uLL);
        v28 = v27;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *((_QWORD *)v27 + 5) = 0;
        *((_QWORD *)v27 + 6) = 0;
        *((_QWORD *)v27 + 4) = 0;
        v29 = (unsigned __int8 **)(v27 + 32);
        *((_QWORD *)v27 + 8) = *(_QWORD *)v24;
        v26 = (llvm::Value *)(v27 + 64);
        *((_QWORD *)v27 + 3) = v27 + 64;
        *((_QWORD *)v27 + 7) = v27 + 64;
        *((_QWORD *)v27 + 9) = 0;
        v27[80] = 41;
        v27[81] = 0;
        *((_WORD *)v27 + 41) = 0;
        *((_DWORD *)v27 + 21) = 2;
        *((_DWORD *)v27 + 30) = 0;
        *(_OWORD *)(v27 + 104) = 0u;
        *(_OWORD *)(v27 + 88) = 0u;
        *(_QWORD *)v27 = v24;
        v32 = *((_QWORD *)v24 + 1);
        v31 = (_QWORD *)((char *)v24 + 8);
        v30 = v32;
        *((_QWORD *)v27 + 1) = v32;
        if (v32)
          *(_QWORD *)(v30 + 16) = v27 + 8;
        *((_QWORD *)v27 + 2) = v31;
        *v31 = v27;
        if (*((_QWORD *)v27 + 4))
        {
          **((_QWORD **)v27 + 6) = *((_QWORD *)v27 + 5);
          v116 = *((_QWORD *)v27 + 5);
          if (v116)
            *(_QWORD *)(v116 + 16) = *((_QWORD *)v27 + 6);
        }
        *v29 = v25;
        if (v25)
        {
          v33 = (unsigned __int8 ***)(v25 + 8);
          v34 = *((_QWORD *)v25 + 1);
          *((_QWORD *)v27 + 5) = v34;
          if (v34)
            *(_QWORD *)(v34 + 16) = v27 + 40;
          *((_QWORD *)v27 + 6) = v33;
          *v33 = v29;
        }
        llvm::Value::setName((uint64_t ***)v27 + 8, (uint64_t)&v152);
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v26, v150, v159, v160);
        if (v157)
        {
          v35 = (char *)v156;
          v36 = (char *)v156 + 16 * v157;
          v37 = (unsigned __int8 **)(v28 + 112);
          do
          {
            v38 = *(_DWORD *)v35;
            v39 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
            if (v39)
            {
              if (!v38)
              {
                v155 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
                llvm::MetadataTracking::track((uint64_t)&v155, v39, 2);
                v40 = *v37;
                if (!*v37)
                {
LABEL_39:
                  v41 = v155;
                  *v37 = v155;
                  if (v41)
                    llvm::MetadataTracking::retrack((uint64_t)&v155, v41, (uint64_t)(v28 + 112));
                  goto LABEL_36;
                }
LABEL_33:
                llvm::MetadataTracking::untrack((uint64_t)(v28 + 112), v40);
                goto LABEL_39;
              }
            }
            else
            {
              v40 = *v37;
              if (!*v37 && (v28[87] & 0x20) == 0)
                goto LABEL_36;
              if (!v38)
              {
                v155 = 0;
                if (!v40)
                  goto LABEL_39;
                goto LABEL_33;
              }
            }
            llvm::Value::setMetadata(v26, *(_DWORD *)v35, (llvm::MDNode *)v39);
LABEL_36:
            v35 += 16;
          }
          while (v35 != v36);
        }
      }
      v42 = sub_1C58A4D30(a1, (uint64_t)&v156, v23, 0x10u);
      v43 = sub_1C58A503C(a1, (uint64_t)&v156, v23, 0x1Cu);
      v151 = 257;
      v44 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value *, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v162 + 16))(v162, v42, v43, 0, 0);
      if (!v44)
      {
        v154 = 257;
        v45 = (char *)operator new(0x80uLL);
        v46 = v45;
        *(_QWORD *)v45 = 0;
        *((_QWORD *)v45 + 1) = 0;
        *((_QWORD *)v45 + 2) = 0;
        *((_QWORD *)v45 + 5) = 0;
        *((_QWORD *)v45 + 6) = 0;
        *((_QWORD *)v45 + 4) = 0;
        v47 = (unsigned __int8 **)(v45 + 32);
        *((_QWORD *)v45 + 8) = *(_QWORD *)v42;
        v44 = (llvm::Value *)(v45 + 64);
        *((_QWORD *)v45 + 3) = v45 + 64;
        *((_QWORD *)v45 + 7) = v45 + 64;
        *((_QWORD *)v45 + 9) = 0;
        v45[80] = 41;
        v45[81] = 0;
        *((_WORD *)v45 + 41) = 0;
        *((_DWORD *)v45 + 21) = 2;
        *((_DWORD *)v45 + 30) = 0;
        *(_OWORD *)(v45 + 104) = 0u;
        *(_OWORD *)(v45 + 88) = 0u;
        *(_QWORD *)v45 = v42;
        v50 = *((_QWORD *)v42 + 1);
        v49 = (_QWORD *)((char *)v42 + 8);
        v48 = v50;
        *((_QWORD *)v45 + 1) = v50;
        if (v50)
          *(_QWORD *)(v48 + 16) = v45 + 8;
        *((_QWORD *)v45 + 2) = v49;
        *v49 = v45;
        if (*((_QWORD *)v45 + 4))
        {
          **((_QWORD **)v45 + 6) = *((_QWORD *)v45 + 5);
          v117 = *((_QWORD *)v45 + 5);
          if (v117)
            *(_QWORD *)(v117 + 16) = *((_QWORD *)v45 + 6);
        }
        *v47 = v43;
        if (v43)
        {
          v51 = (unsigned __int8 ***)(v43 + 8);
          v52 = *((_QWORD *)v43 + 1);
          *((_QWORD *)v45 + 5) = v52;
          if (v52)
            *(_QWORD *)(v52 + 16) = v45 + 40;
          *((_QWORD *)v45 + 6) = v51;
          *v51 = v47;
        }
        llvm::Value::setName((uint64_t ***)v45 + 8, (uint64_t)&v152);
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v44, v150, v159, v160);
        if (v157)
        {
          v53 = (char *)v156;
          v54 = (char *)v156 + 16 * v157;
          v55 = (unsigned __int8 **)(v46 + 112);
          do
          {
            v56 = *(_DWORD *)v53;
            v57 = (unsigned __int8 *)*((_QWORD *)v53 + 1);
            if (v57)
            {
              if (!v56)
              {
                v155 = (unsigned __int8 *)*((_QWORD *)v53 + 1);
                llvm::MetadataTracking::track((uint64_t)&v155, v57, 2);
                v58 = *v55;
                if (!*v55)
                {
LABEL_62:
                  v59 = v155;
                  *v55 = v155;
                  if (v59)
                    llvm::MetadataTracking::retrack((uint64_t)&v155, v59, (uint64_t)(v46 + 112));
                  goto LABEL_59;
                }
LABEL_56:
                llvm::MetadataTracking::untrack((uint64_t)(v46 + 112), v58);
                goto LABEL_62;
              }
            }
            else
            {
              v58 = *v55;
              if (!*v55 && (v46[87] & 0x20) == 0)
                goto LABEL_59;
              if (!v56)
              {
                v155 = 0;
                if (!v58)
                  goto LABEL_62;
                goto LABEL_56;
              }
            }
            llvm::Value::setMetadata(v44, *(_DWORD *)v53, (llvm::MDNode *)v57);
LABEL_59:
            v53 += 16;
          }
          while (v53 != v54);
        }
      }
      v151 = 257;
      v60 = (uint64_t)v147;
      v61 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v162 + 16))(v162, v147, v25, 0, 0);
      if (!v61)
      {
        v154 = 257;
        v62 = (char *)operator new(0x80uLL);
        v63 = v62;
        *((_QWORD *)v62 + 5) = 0;
        *((_QWORD *)v62 + 6) = 0;
        *((_QWORD *)v62 + 4) = 0;
        v64 = (unsigned __int8 **)(v62 + 32);
        *((_QWORD *)v62 + 8) = *v147;
        v61 = (llvm::Value *)(v62 + 64);
        *((_QWORD *)v62 + 3) = v62 + 64;
        *((_QWORD *)v62 + 7) = v62 + 64;
        *((_QWORD *)v62 + 9) = 0;
        v62[80] = 41;
        v62[81] = 0;
        *((_WORD *)v62 + 41) = 0;
        *((_DWORD *)v62 + 21) = 2;
        *(_OWORD *)(v62 + 88) = 0u;
        *(_OWORD *)(v62 + 104) = 0u;
        *((_DWORD *)v62 + 30) = 0;
        *(_QWORD *)v62 = v147;
        v65 = v147[1];
        *((_QWORD *)v62 + 1) = v65;
        if (v65)
          *((_QWORD *)v65 + 2) = v62 + 8;
        *((_QWORD *)v62 + 2) = v145;
        *v145 = v62;
        if (*((_QWORD *)v62 + 4))
        {
          **((_QWORD **)v62 + 6) = *((_QWORD *)v62 + 5);
          v118 = *((_QWORD *)v62 + 5);
          if (v118)
            *(_QWORD *)(v118 + 16) = *((_QWORD *)v62 + 6);
        }
        *v64 = v25;
        if (v25)
        {
          v68 = *((_QWORD *)v25 + 1);
          v67 = (unsigned __int8 ***)(v25 + 8);
          v66 = v68;
          *((_QWORD *)v62 + 5) = v68;
          if (v68)
            *(_QWORD *)(v66 + 16) = v62 + 40;
          *((_QWORD *)v62 + 6) = v67;
          *v67 = v64;
        }
        llvm::Value::setName((uint64_t ***)v62 + 8, (uint64_t)&v152);
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v61, v150, v159, v160);
        if (v157)
        {
          v69 = (char *)v156;
          v70 = (char *)v156 + 16 * v157;
          v71 = (unsigned __int8 **)(v63 + 112);
          do
          {
            v72 = *(_DWORD *)v69;
            v73 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
            if (v73)
            {
              if (!v72)
              {
                v155 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
                llvm::MetadataTracking::track((uint64_t)&v155, v73, 2);
                v74 = *v71;
                if (!*v71)
                {
LABEL_85:
                  v75 = v155;
                  *v71 = v155;
                  if (v75)
                    llvm::MetadataTracking::retrack((uint64_t)&v155, v75, (uint64_t)(v63 + 112));
                  goto LABEL_82;
                }
LABEL_79:
                llvm::MetadataTracking::untrack((uint64_t)(v63 + 112), v74);
                goto LABEL_85;
              }
            }
            else
            {
              v74 = *v71;
              if (!*v71 && (v63[87] & 0x20) == 0)
                goto LABEL_82;
              if (!v72)
              {
                v155 = 0;
                if (!v74)
                  goto LABEL_85;
                goto LABEL_79;
              }
            }
            llvm::Value::setMetadata(v61, *(_DWORD *)v69, (llvm::MDNode *)v73);
LABEL_82:
            v69 += 16;
          }
          while (v69 != v70);
        }
        v60 = (uint64_t)v147;
      }
      v76 = sub_1C58A0068(*(_QWORD **)(a1 + 24), (unsigned __int8 *)v26, (uint64_t)&v156, (llvm::PointerType *)(*v161 + 1912), 259, 1);
      v77 = (llvm::GetElementPtrInst *)(*v161 + 1912);
      v78 = *(uint64_t **)(a1 + 32);
      v154 = 257;
      v79 = sub_1C5098FF4((uint64_t *)&v156, v77, v78, (uint64_t)v61, (uint64_t)&v152);
      v154 = 257;
      v80 = (uint64_t *)sub_1C47733F8((uint64_t)&v156, v60, (uint64_t)v61, (uint64_t)&v152, 0, 0);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v156, 194, (llvm::Value *)v76, 259, (llvm::Value *)v79, 259, v80, 0, 0, 0, 0, 0);
      v151 = 257;
      v81 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v162 + 16))(v162, v149, v43, 0, 0);
      if (!v81)
      {
        v154 = 257;
        v82 = (char *)operator new(0x80uLL);
        v83 = v82;
        *((_QWORD *)v82 + 5) = 0;
        *((_QWORD *)v82 + 6) = 0;
        *((_QWORD *)v82 + 4) = 0;
        v84 = (unsigned __int8 **)(v82 + 32);
        *((_QWORD *)v82 + 8) = *v149;
        v81 = (llvm::Value *)(v82 + 64);
        *((_QWORD *)v82 + 3) = v82 + 64;
        *((_QWORD *)v82 + 7) = v82 + 64;
        *((_QWORD *)v82 + 9) = 0;
        v82[80] = 41;
        v82[81] = 0;
        *((_WORD *)v82 + 41) = 0;
        *((_DWORD *)v82 + 21) = 2;
        *(_OWORD *)(v82 + 88) = 0u;
        *(_OWORD *)(v82 + 104) = 0u;
        *((_DWORD *)v82 + 30) = 0;
        *(_QWORD *)v82 = v149;
        v85 = v149[1];
        *((_QWORD *)v82 + 1) = v85;
        if (v85)
          *((_QWORD *)v85 + 2) = v82 + 8;
        *((_QWORD *)v82 + 2) = v144;
        *v144 = v82;
        if (*((_QWORD *)v82 + 4))
        {
          **((_QWORD **)v82 + 6) = *((_QWORD *)v82 + 5);
          v119 = *((_QWORD *)v82 + 5);
          if (v119)
            *(_QWORD *)(v119 + 16) = *((_QWORD *)v82 + 6);
        }
        *v84 = v43;
        if (v43)
        {
          v88 = *((_QWORD *)v43 + 1);
          v87 = (unsigned __int8 ***)(v43 + 8);
          v86 = v88;
          *((_QWORD *)v82 + 5) = v88;
          if (v88)
            *(_QWORD *)(v86 + 16) = v82 + 40;
          *((_QWORD *)v82 + 6) = v87;
          *v87 = v84;
        }
        llvm::Value::setName((uint64_t ***)v82 + 8, (uint64_t)&v152);
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v81, v150, v159, v160);
        if (v157)
          break;
      }
LABEL_111:
      v97 = sub_1C58A0068(*(_QWORD **)(a1 + 24), (unsigned __int8 *)v44, (uint64_t)&v156, (llvm::PointerType *)(*v161 + 1912), 259, 1);
      v98 = *v161;
      v99 = *(uint64_t **)(a1 + 32);
      v100 = *(llvm::ConstantInt **)(*v161 + 1960);
      v101 = *(_DWORD *)(*v161 + 1968);
      v153 = v101 >> 8;
      if (v101 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v152, 64, 0);
      }
      else
      {
        if (v101 <= 0xFF)
          v102 = 0;
        else
          v102 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v101);
        v152 = v102 & 0x40;
      }
      v103 = llvm::ConstantInt::get(v100, (llvm::LLVMContext *)&v152, v96);
      if (v153 >= 0x41 && v152)
        MEMORY[0x1CAA32F9C](v152, 0x1000C8000313F17);
      v154 = 257;
      v104 = (uint64_t *)sub_1C5098FF4((uint64_t *)&v156, (llvm::GetElementPtrInst *)(v98 + 1912), v99, (uint64_t)v103, (uint64_t)&v152);
      v151 = 257;
      v105 = sub_1C5098FF4((uint64_t *)&v156, (llvm::GetElementPtrInst *)(v98 + 1912), v104, (uint64_t)v81, (uint64_t)v150);
      v154 = 257;
      v106 = (uint64_t *)sub_1C47733F8((uint64_t)&v156, (uint64_t)v149, (uint64_t)v81, (uint64_t)&v152, 0, 0);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v156, 194, (llvm::Value *)v97, 259, (llvm::Value *)v105, 259, v106, 0, 0, 0, 0, 0);
      v108 = sub_1C58A0068(*(_QWORD **)(a1 + 24), v148, (uint64_t)&v156, (llvm::PointerType *)(*v161 + 1912), 260, 1);
      v109 = *v161;
      v110 = *(uint64_t **)(a1 + 32);
      v111 = *(llvm::ConstantInt **)(*v161 + 1960);
      v112 = *(_DWORD *)(*v161 + 1968);
      v153 = v112 >> 8;
      if (v112 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v152, 192, 0);
      }
      else
      {
        if (v112 <= 0xFF)
          LOBYTE(v113) = 0;
        else
          v113 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v112);
        v152 = v113 & 0xC0;
      }
      v114 = llvm::ConstantInt::get(v111, (llvm::LLVMContext *)&v152, v107);
      if (v153 >= 0x41 && v152)
        MEMORY[0x1CAA32F9C](v152, 0x1000C8000313F17);
      v154 = 257;
      v115 = sub_1C5098FF4((uint64_t *)&v156, (llvm::GetElementPtrInst *)(v109 + 1912), v110, (uint64_t)v114, (uint64_t)&v152);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v156, 194, (llvm::Value *)v108, 260, (llvm::Value *)v115, 260, *(uint64_t **)(a1 + 40), 0, 0, 0, 0, 0);
      if (v156 != v158)
        free(v156);
      if (++v18 == v146)
        return;
    }
    v89 = (char *)v156;
    v90 = (char *)v156 + 16 * v157;
    v91 = (unsigned __int8 **)(v83 + 112);
    while (1)
    {
      v92 = *(_DWORD *)v89;
      v93 = (unsigned __int8 *)*((_QWORD *)v89 + 1);
      if (v93)
      {
        if (!v92)
        {
          v155 = (unsigned __int8 *)*((_QWORD *)v89 + 1);
          llvm::MetadataTracking::track((uint64_t)&v155, v93, 2);
          v94 = *v91;
          if (!*v91)
          {
LABEL_109:
            v95 = v155;
            *v91 = v155;
            if (v95)
              llvm::MetadataTracking::retrack((uint64_t)&v155, v95, (uint64_t)(v83 + 112));
            goto LABEL_106;
          }
LABEL_103:
          llvm::MetadataTracking::untrack((uint64_t)(v83 + 112), v94);
          goto LABEL_109;
        }
      }
      else
      {
        v94 = *v91;
        if (!*v91 && (v83[87] & 0x20) == 0)
          goto LABEL_106;
        if (!v92)
        {
          v155 = 0;
          if (!v94)
            goto LABEL_109;
          goto LABEL_103;
        }
      }
      llvm::Value::setMetadata(v81, *(_DWORD *)v89, (llvm::MDNode *)v93);
LABEL_106:
      v89 += 16;
      if (v89 == v90)
        goto LABEL_111;
    }
  }
}

unsigned __int8 *sub_1C58A4B70(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  llvm::Value **v16;
  unsigned __int8 *v17;
  char *v18;
  llvm::Value **v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::Value *v24;
  _QWORD *v25;
  llvm::Value *v26;
  llvm::PointerType *v27;
  uint64_t v28;
  _WORD v29[20];
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  if (a5 + a4 > 0x320)
    return 0;
  v32 = v5;
  v33 = v6;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned __int8 **)(v12 + 72);
  v14 = *(_QWORD *)(v12 + 24);
  v31 = 257;
  v15 = sub_1C5098D9C((uint64_t *)a3, v13, v14, (uint64_t)v30);
  v16 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), a4, 0);
  v29[16] = 257;
  v17 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a3 + 72) + 16))(*(_QWORD *)(a3 + 72), v15, v16, 0, 0);
  if (!v17)
  {
    v31 = 257;
    v18 = (char *)operator new(0x80uLL);
    *((_QWORD *)v18 + 5) = 0;
    v19 = (llvm::Value **)(v18 + 40);
    *((_QWORD *)v18 + 6) = 0;
    *((_QWORD *)v18 + 8) = *(_QWORD *)v15;
    v20 = (uint64_t)(v18 + 64);
    *((_QWORD *)v18 + 3) = v18 + 64;
    *((_QWORD *)v18 + 7) = v18 + 64;
    *((_QWORD *)v18 + 9) = 0;
    v18[80] = 41;
    v18[81] = 0;
    *((_WORD *)v18 + 41) = 0;
    *((_DWORD *)v18 + 21) = 2;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *((_DWORD *)v18 + 30) = 0;
    *(_QWORD *)v18 = v15;
    v23 = *((_QWORD *)v15 + 1);
    v22 = v15 + 8;
    v21 = v23;
    *((_QWORD *)v18 + 1) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = v18 + 8;
    *((_QWORD *)v18 + 2) = v22;
    *v22 = v18;
    *((_QWORD *)v18 + 4) = v16;
    if (v16)
    {
      v26 = v16[1];
      v25 = v16 + 1;
      v24 = v26;
      *v19 = v26;
      if (v26)
        *((_QWORD *)v24 + 2) = v19;
      *((_QWORD *)v18 + 6) = v25;
      *v25 = v18 + 32;
    }
    llvm::Value::setName((uint64_t ***)v18 + 8, (uint64_t)v30);
    v17 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a3, v20, (uint64_t)v29);
  }
  sub_1C58A1544(*(_QWORD **)(a1 + 24), a2);
  v28 = llvm::PointerType::get(v27, 0);
  v30[0] = "_msarg";
  v31 = 259;
  return sub_1C4773E38((uint64_t *)a3, 48, v17, v28, (uint64_t)v30);
}

llvm::Value *sub_1C58A4D30(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  llvm::Value **v9;
  unsigned __int8 *v10;
  char *v11;
  llvm::Value **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  llvm::Value *v17;
  _QWORD *v18;
  llvm::Value *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  char v23;
  char v24;
  char *v25;
  char *v26;
  llvm::Value *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 **v35;
  int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  _QWORD v40[4];
  __int16 v41;
  _BYTE v42[32];
  __int16 v43;
  _BYTE v44[32];
  __int16 v45;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v43 = 257;
  v8 = sub_1C4773E38((uint64_t *)a2, 47, a3, v7, (uint64_t)v42);
  v9 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), a4, 0);
  v41 = 257;
  v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 72) + 16))(*(_QWORD *)(a2 + 72), v8, v9, 0, 0);
  if (!v10)
  {
    v45 = 257;
    v11 = (char *)operator new(0x80uLL);
    *((_QWORD *)v11 + 5) = 0;
    v12 = (llvm::Value **)(v11 + 40);
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 8) = *(_QWORD *)v8;
    v13 = (uint64_t)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    v11[80] = 41;
    v11[81] = 0;
    *((_WORD *)v11 + 41) = 0;
    *((_DWORD *)v11 + 21) = 2;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = v8;
    v16 = *((_QWORD *)v8 + 1);
    v15 = v8 + 8;
    v14 = v16;
    *((_QWORD *)v11 + 1) = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v15;
    *v15 = v11;
    *((_QWORD *)v11 + 4) = v9;
    if (v9)
    {
      v19 = v9[1];
      v18 = v9 + 1;
      v17 = v19;
      *v12 = v19;
      if (v19)
        *((_QWORD *)v17 + 2) = v12;
      *((_QWORD *)v11 + 6) = v18;
      *v18 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v44);
    v10 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a2, v13, (uint64_t)v40);
  }
  v20 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1984), 0);
  v45 = 257;
  v21 = sub_1C4773E38((uint64_t *)a2, 48, v10, v20, (uint64_t)v44);
  v22 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1984;
  v43 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40) + 272, v22);
  v24 = v23;
  v25 = (char *)operator new(0x60uLL);
  v26 = v25;
  v27 = (llvm::Value *)(v25 + 32);
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = v25 + 32;
  v45 = 257;
  *((_QWORD *)v25 + 4) = v22;
  *((_QWORD *)v25 + 5) = 0;
  *((_WORD *)v25 + 24) = 60;
  *((_DWORD *)v25 + 13) = 1;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *((_DWORD *)v25 + 22) = 0;
  *(_QWORD *)v25 = v21;
  *((_QWORD *)v25 + 1) = 0;
  if (v21)
  {
    v30 = *((_QWORD *)v21 + 1);
    v29 = v21 + 8;
    v28 = v30;
    *((_QWORD *)v25 + 1) = v30;
    if (v30)
      *(_QWORD *)(v28 + 16) = v25 + 8;
    *((_QWORD *)v25 + 2) = v29;
    *v29 = v25;
  }
  *((_WORD *)v25 + 25) = 2 * (v24 & 0x3F);
  v25[92] = 1;
  llvm::Value::setName((uint64_t ***)v25 + 4, (uint64_t)v44);
  (*(void (**)(_QWORD, llvm::Value *, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 80) + 16))(*(_QWORD *)(a2 + 80), v27, v42, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));
  v31 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v31)
  {
    v33 = *(_QWORD *)a2;
    v34 = *(_QWORD *)a2 + 16 * v31;
    v35 = (unsigned __int8 **)(v26 + 80);
    do
    {
      v36 = *(_DWORD *)v33;
      v37 = *(unsigned __int8 **)(v33 + 8);
      if (v37)
      {
        if (!v36)
        {
          v40[0] = *(_QWORD *)(v33 + 8);
          llvm::MetadataTracking::track((uint64_t)v40, v37, 2);
          v38 = *v35;
          goto LABEL_26;
        }
      }
      else
      {
        v38 = *v35;
        if (!*v35 && (v26[55] & 0x20) == 0)
          goto LABEL_23;
        if (!v36)
        {
          v40[0] = 0;
LABEL_26:
          if (v38)
            llvm::MetadataTracking::untrack((uint64_t)(v26 + 80), v38);
          v39 = (unsigned __int8 *)v40[0];
          *v35 = (unsigned __int8 *)v40[0];
          if (v39)
            llvm::MetadataTracking::retrack((uint64_t)v40, v39, (uint64_t)(v26 + 80));
          goto LABEL_23;
        }
      }
      llvm::Value::setMetadata(v27, *(_DWORD *)v33, (llvm::MDNode *)v37);
LABEL_23:
      v33 += 16;
    }
    while (v33 != v34);
  }
  return v27;
}

unsigned __int8 *sub_1C58A503C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  llvm::Value **v9;
  unsigned __int8 *v10;
  char *v11;
  llvm::Value **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  llvm::Value *v17;
  _QWORD *v18;
  llvm::Value *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  char v23;
  char v24;
  char *v25;
  char *v26;
  llvm::Value *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 **v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  _QWORD v41[4];
  __int16 v42;
  _BYTE v43[32];
  __int16 v44;
  _BYTE v45[32];
  __int16 v46;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v44 = 257;
  v8 = sub_1C4773E38((uint64_t *)a2, 47, a3, v7, (uint64_t)v43);
  v9 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), a4, 0);
  v42 = 257;
  v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 72) + 16))(*(_QWORD *)(a2 + 72), v8, v9, 0, 0);
  if (!v10)
  {
    v46 = 257;
    v11 = (char *)operator new(0x80uLL);
    *((_QWORD *)v11 + 5) = 0;
    v12 = (llvm::Value **)(v11 + 40);
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 8) = *(_QWORD *)v8;
    v13 = (uint64_t)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    v11[80] = 41;
    v11[81] = 0;
    *((_WORD *)v11 + 41) = 0;
    *((_DWORD *)v11 + 21) = 2;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = v8;
    v16 = *((_QWORD *)v8 + 1);
    v15 = v8 + 8;
    v14 = v16;
    *((_QWORD *)v11 + 1) = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v15;
    *v15 = v11;
    *((_QWORD *)v11 + 4) = v9;
    if (v9)
    {
      v19 = v9[1];
      v18 = v9 + 1;
      v17 = v19;
      *v12 = v19;
      if (v19)
        *((_QWORD *)v17 + 2) = v12;
      *((_QWORD *)v11 + 6) = v18;
      *v18 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v45);
    v10 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a2, v13, (uint64_t)v41);
  }
  v20 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1960), 0);
  v46 = 257;
  v21 = sub_1C4773E38((uint64_t *)a2, 48, v10, v20, (uint64_t)v45);
  v22 = **(_QWORD **)(a2 + 64) + 1960;
  v44 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40) + 272, v22);
  v24 = v23;
  v25 = (char *)operator new(0x60uLL);
  v26 = v25;
  v27 = (llvm::Value *)(v25 + 32);
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = v25 + 32;
  v46 = 257;
  *((_QWORD *)v25 + 4) = v22;
  *((_QWORD *)v25 + 5) = 0;
  *((_WORD *)v25 + 24) = 60;
  *((_DWORD *)v25 + 13) = 1;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *((_DWORD *)v25 + 22) = 0;
  *(_QWORD *)v25 = v21;
  *((_QWORD *)v25 + 1) = 0;
  if (v21)
  {
    v30 = *((_QWORD *)v21 + 1);
    v29 = v21 + 8;
    v28 = v30;
    *((_QWORD *)v25 + 1) = v30;
    if (v30)
      *(_QWORD *)(v28 + 16) = v25 + 8;
    *((_QWORD *)v25 + 2) = v29;
    *v29 = v25;
  }
  *((_WORD *)v25 + 25) = 2 * (v24 & 0x3F);
  v25[92] = 1;
  llvm::Value::setName((uint64_t ***)v25 + 4, (uint64_t)v45);
  (*(void (**)(_QWORD, llvm::Value *, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 80) + 16))(*(_QWORD *)(a2 + 80), v27, v43, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));
  v31 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v31)
  {
    v34 = *(_QWORD *)a2;
    v35 = *(_QWORD *)a2 + 16 * v31;
    v36 = (unsigned __int8 **)(v26 + 80);
    do
    {
      v37 = *(_DWORD *)v34;
      v38 = *(unsigned __int8 **)(v34 + 8);
      if (v38)
      {
        if (!v37)
        {
          v41[0] = *(_QWORD *)(v34 + 8);
          llvm::MetadataTracking::track((uint64_t)v41, v38, 2);
          v39 = *v36;
          goto LABEL_26;
        }
      }
      else
      {
        v39 = *v36;
        if (!*v36 && (v26[55] & 0x20) == 0)
          goto LABEL_23;
        if (!v37)
        {
          v41[0] = 0;
LABEL_26:
          if (v39)
            llvm::MetadataTracking::untrack((uint64_t)(v26 + 80), v39);
          v40 = (unsigned __int8 *)v41[0];
          *v36 = (unsigned __int8 *)v41[0];
          if (v40)
            llvm::MetadataTracking::retrack((uint64_t)v41, v40, (uint64_t)(v26 + 80));
          goto LABEL_23;
        }
      }
      llvm::Value::setMetadata(v27, *(_DWORD *)v34, (llvm::MDNode *)v38);
LABEL_23:
      v34 += 16;
    }
    while (v34 != v35);
  }
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v46 = 257;
  return sub_1C4773E38((uint64_t *)a2, 40, (unsigned __int8 *)v27, v32, (uint64_t)v45);
}

_QWORD *sub_1C58A536C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DF70;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

void sub_1C58A53AC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DF70;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58A53FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const llvm::APInt *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  const char *v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  const char *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  const char *v49;
  char v50;
  char v51;
  unsigned __int16 ParamAlignment;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  llvm::Value *v57;
  unsigned __int8 *v58;
  const llvm::APInt *v59;
  __int16 v60;
  uint64_t v61;
  llvm::ConstantInt *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  llvm::ConstantInt *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  char v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  llvm::Value *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 **v88;
  int v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  llvm::AttributeList *v96;
  BOOL v97;
  int v98[2];
  llvm::Value *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  void *__p;
  char v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  __int16 v113;
  _QWORD v114[2];

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 216;
  v113 = 260;
  v111 = v5;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v111);
  if (v110 == 23)
    v7 = 48;
  else
    v7 = 32;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = v8 & 0x7FFFFFF;
  v10 = *(unsigned __int8 *)(a2 + 16);
  v101 = a1;
  v103 = a2;
  if (v10 == 84)
  {
    v11 = 0;
  }
  else if (v10 == 39)
  {
    v11 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v11 = 2;
  }
  v12 = a2 - 32 * v9;
  if (v8 < 0)
  {
    v93 = *(_QWORD *)(v12 - 8);
    if ((v93 & 0xFFFFFFFF0) != 0)
      v13 = (*(_DWORD *)(v12 - 12) - *(_DWORD *)(v12 - v93));
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  if (v12 != a2 - 32 * v11 - 32 * v13 - 32)
  {
    v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 272);
    v15 = -32 * v9;
    v96 = (llvm::AttributeList *)(a2 + 64);
    v104 = (32 * v11 + 32 * v13) ^ 0xFFFFFFFFFFFFFFE0;
    v105 = (uint64_t)v14;
    LODWORD(v16) = v7;
    while (1)
    {
      v17 = *(unsigned __int8 **)(a2 + v15);
      v18 = (v15 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5;
      v107 = *(_DWORD *)(*(_QWORD *)(a2 + 72) + 12) - 1;
      v106 = v18;
      if (llvm::CallBase::paramHasAttr(a2, v18, 69))
      {
        v44 = (uint64_t)v14;
        v45 = sub_1C6199478(a2, v18);
        sub_1C4768AD0(v44, v45);
        *(_QWORD *)v98 = v46;
        v48 = v47 == 1;
        llvm::DataLayout::getAlignment(v44, v45);
        v51 = v50;
        if (v48)
        ParamAlignment = llvm::AttributeList::getParamAlignment(v96, v18);
        v53 = ParamAlignment >= 3u && ParamAlignment >= 0x100u;
        v54 = ParamAlignment;
        if (!v53)
          v54 = 259;
        if (v54 >= 0x100)
          v16 = (v16 + (1 << v54) - 1) & -(1 << v54);
        v55 = ((1 << v51) + ((unint64_t)(*(_QWORD *)v98 + 7) >> 3) - 1) & -(1 << v51);
        v40 = v107;
        if (v107 <= v18)
        {
          v56 = sub_1C58A4B70(v101, v45, a3, (int)v16 - v7, v55);
          if (v56)
          {
            v57 = (llvm::Value *)v56;
            v95 = v95 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1ED813A68) | 0x100;
            v58 = sub_1C58A0068(*(_QWORD **)(v101 + 24), v17, a3, (llvm::PointerType *)(**(_QWORD **)(a3 + 64) + 1912), HIBYTE(word_1ED813A68) | 0x100u, 0);
            v60 = HIBYTE(word_1ED813A68);
            v61 = **(_QWORD **)(a3 + 64);
            v62 = *(llvm::ConstantInt **)(v61 + 1984);
            v63 = *(unsigned int *)(v61 + 1992);
            v112 = v63 >> 8;
            v99 = (llvm::Value *)v58;
            if (v63 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v111, v55, 0);
            }
            else
            {
              if (v63 <= 0xFF)
                v64 = 0;
              else
                v64 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v63);
              v111 = v64 & v55;
            }
            v65 = (uint64_t *)llvm::ConstantInt::get(v62, (llvm::LLVMContext *)&v111, v59);
            a2 = v103;
            if (v112 >= 0x41 && v111)
              MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
            llvm::IRBuilderBase::CreateMemTransferInst(a3, 194, v57, v60 | 0x100, v99, v60 | 0x100, v65, 0, 0, 0, 0, 0);
          }
          else
          {
            a2 = v103;
          }
          v40 = v107;
        }
        LODWORD(v16) = ((v55 + 7) & 0xFFFFFFF8) + v16;
        v14 = (_BYTE *)v105;
        goto LABEL_33;
      }
      v19 = *(_QWORD *)v17;
      sub_1C4768AD0((uint64_t)v14, *(_QWORD *)v17);
      v21 = v20;
      v23 = v22 == 1;
      llvm::DataLayout::getAlignment((uint64_t)v14, v19);
      v26 = v25;
      if (v23)
      v27 = *(_QWORD *)v17;
      v28 = *(unsigned __int8 *)(*(_QWORD *)v17 + 8);
      if (v28 == 17)
      {
        v27 = **(_QWORD **)(v27 + 16);
        if (*(_BYTE *)(v27 + 8) != 6)
          goto LABEL_17;
      }
      else if ((v28 & 0xFE) == 0x12)
      {
LABEL_17:
        v14 = (_BYTE *)v105;
        sub_1C4768AD0(v105, v27);
        v31 = (unint64_t)(v30 + 7) >> 3;
        v97 = v32 == 1;
        llvm::DataLayout::getAlignment(v105, v27);
        v29 = ((1 << v34) + v31 - 1) & -(1 << v34);
        if (v97)
        goto LABEL_19;
      }
      v29 = 8;
      v14 = (_BYTE *)v105;
LABEL_19:
      v35 = ((1 << v26) + ((unint64_t)(v21 + 7) >> 3) - 1) & -(1 << v26);
      v36 = 8;
      if (v29 > 8)
        v36 = v29;
      v37 = (v36 + v16 - 1) / v36 * v36;
      if (v35 >= 8 || *v14 == 0)
        v39 = v37;
      else
        v39 = v37 - v35 + 8;
      LODWORD(v18) = v106;
      v40 = v107;
      if (v107 <= v106)
      {
        v41 = sub_1C58A4B70(v101, *(_QWORD *)v17, a3, v39 - v7, v35);
        if (v41)
        {
          v42 = (uint64_t)v41;
          v43 = (uint64_t *)sub_1C58A06BC(*(_QWORD *)(v101 + 24), (uint64_t)v17);
          v100 = v100 & 0xFFFFFFFFFFFF0000 | HIBYTE(word_1ED813A68) | 0x100;
          sub_1C509CCE8((uint64_t *)a3, v43, v42, HIBYTE(word_1ED813A68) | 0x100, 0);
        }
        a2 = v103;
        LODWORD(v18) = v106;
        v40 = v107;
      }
      else
      {
        a2 = v103;
      }
      LODWORD(v16) = (v39 + v35 + 7) & 0xFFFFFFF8;
LABEL_33:
      if (v40 > v18)
        v7 = v16;
      v15 += 32;
      if (v104 == v15)
        goto LABEL_62;
    }
  }
  LODWORD(v16) = v7;
LABEL_62:
  v66 = **(_QWORD **)(a3 + 64);
  v67 = (v16 - v7);
  v68 = *(llvm::ConstantInt **)(v66 + 1984);
  v69 = *(unsigned int *)(v66 + 1992);
  v112 = v69 >> 8;
  if (v69 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v111, v67, 0);
  }
  else
  {
    if (v69 <= 0xFF)
      v70 = 0;
    else
      v70 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v69);
    v111 = v70 & v67;
  }
  v71 = (uint64_t *)llvm::ConstantInt::get(v68, (llvm::LLVMContext *)&v111, v6);
  if (v112 >= 0x41 && v111)
    MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
  v72 = *(_QWORD *)(*(_QWORD *)(v101 + 16) + 88);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 56) + 40) + 272, *v71);
  v74 = v73;
  v75 = (char *)operator new(0x80uLL);
  v76 = v75;
  *((_DWORD *)v75 + 21) = *((_DWORD *)v75 + 21) & 0x38000000 | 2;
  *(_QWORD *)v75 = 0;
  *((_QWORD *)v75 + 2) = 0;
  *((_QWORD *)v75 + 1) = 0;
  *((_QWORD *)v75 + 5) = 0;
  *((_QWORD *)v75 + 6) = 0;
  *((_QWORD *)v75 + 4) = 0;
  v77 = v75 + 32;
  *((_QWORD *)v75 + 8) = **(_QWORD **)*v71 + 1576;
  v78 = (llvm::Value *)(v75 + 64);
  *((_QWORD *)v75 + 3) = v75 + 64;
  *((_QWORD *)v75 + 7) = v75 + 64;
  *((_QWORD *)v75 + 9) = 0;
  v75[80] = 61;
  v75[81] = 0;
  *((_WORD *)v75 + 41) = 0;
  *((_DWORD *)v75 + 21) = 2;
  *(_OWORD *)(v75 + 88) = 0u;
  *(_OWORD *)(v75 + 104) = 0u;
  *((_DWORD *)v75 + 30) = 0;
  *(_QWORD *)v75 = v71;
  v81 = v71[1];
  v80 = v71 + 1;
  v79 = v81;
  *((_QWORD *)v75 + 1) = v81;
  if (v81)
    *(_QWORD *)(v79 + 16) = v75 + 8;
  *((_QWORD *)v75 + 2) = v80;
  *v80 = v75;
  if (*((_QWORD *)v75 + 4))
  {
    **((_QWORD **)v75 + 6) = *((_QWORD *)v75 + 5);
    v94 = *((_QWORD *)v75 + 5);
    if (v94)
      *(_QWORD *)(v94 + 16) = *((_QWORD *)v75 + 6);
  }
  *v77 = v72;
  if (v72)
  {
    v84 = *(_QWORD *)(v72 + 8);
    v83 = (_QWORD *)(v72 + 8);
    v82 = v84;
    *((_QWORD *)v75 + 5) = v84;
    if (v84)
      *(_QWORD *)(v82 + 16) = v75 + 40;
    *((_QWORD *)v75 + 6) = v83;
    *v83 = v77;
  }
  *((_WORD *)v75 + 41) = 2 * (v74 & 0x3F);
  v75[124] = 1;
  v113 = 257;
  (*(void (**)(_QWORD, llvm::Value *, unint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a3 + 80) + 16))(*(_QWORD *)(a3 + 80), v78, &v111, *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56));
  v85 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v85)
  {
    v86 = *(_QWORD *)a3;
    v87 = *(_QWORD *)a3 + 16 * v85;
    v88 = (unsigned __int8 **)(v76 + 112);
    do
    {
      v89 = *(_DWORD *)v86;
      v90 = *(unsigned __int8 **)(v86 + 8);
      if (v90)
      {
        if (!v89)
        {
          v114[0] = *(_QWORD *)(v86 + 8);
          llvm::MetadataTracking::track((uint64_t)v114, v90, 2);
          v91 = *v88;
          goto LABEL_90;
        }
      }
      else
      {
        v91 = *v88;
        if (!*v88 && (v76[87] & 0x20) == 0)
          goto LABEL_87;
        if (!v89)
        {
          v114[0] = 0;
LABEL_90:
          if (v91)
            llvm::MetadataTracking::untrack((uint64_t)(v76 + 112), v91);
          v92 = (unsigned __int8 *)v114[0];
          *v88 = (unsigned __int8 *)v114[0];
          if (v92)
            llvm::MetadataTracking::retrack((uint64_t)v114, v92, (uint64_t)(v76 + 112));
          goto LABEL_87;
        }
      }
      llvm::Value::setMetadata(v78, *(_DWORD *)v86, (llvm::MDNode *)v90);
LABEL_87:
      v86 += 16;
    }
    while (v86 != v87);
  }
  if (v109 < 0)
    operator delete(__p);
}

void sub_1C58A5C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  llvm::Type *v6;
  const llvm::APInt *v7;
  llvm::Value **NullValue;
  llvm::ConstantInt *v9;
  unsigned int v10;
  char v11;
  uint64_t *v12;
  llvm::ConstantInt *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, a2, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 56);
  v5 = sub_1C58A0068(*(_QWORD **)(a1 + 24), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v17, (llvm::PointerType *)(*(_QWORD *)v19 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v19 + 1912), v6);
  v9 = *(llvm::ConstantInt **)(*(_QWORD *)v19 + 1984);
  v10 = *(_DWORD *)(*(_QWORD *)v19 + 1992);
  v16 = v10 >> 8;
  if (v10 >> 8 > 0x40)
  {
    v13 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, 8, 0);
    v9 = v13;
  }
  else
  {
    if (v10 <= 0xFF)
      v11 = 0;
    else
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
    v15 = v11 & 8;
  }
  v12 = (uint64_t *)llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v15, v7);
  if (v16 >= 0x41 && v15)
  {
    v14 = v12;
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    v12 = v14;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v17, (llvm::Value *)v5, (uint64_t)NullValue, v12, 259, 0, 0, 0, 0);
  if (v17[0] != &v18)
    free(v17[0]);
}

void sub_1C58A5DF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  llvm::Type *v5;
  const llvm::APInt *v6;
  llvm::Value **NullValue;
  llvm::ConstantInt *v8;
  unsigned int v9;
  char v10;
  uint64_t *v11;
  llvm::ConstantInt *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v16, a2, 0, 0, 0);
  v4 = sub_1C58A0068(*(_QWORD **)(a1 + 24), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v16, (llvm::PointerType *)(*(_QWORD *)v18 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v18 + 1912), v5);
  v8 = *(llvm::ConstantInt **)(*(_QWORD *)v18 + 1984);
  v9 = *(_DWORD *)(*(_QWORD *)v18 + 1992);
  v15 = v9 >> 8;
  if (v9 >> 8 > 0x40)
  {
    v12 = v8;
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, 8, 0);
    v8 = v12;
  }
  else
  {
    if (v9 <= 0xFF)
      v10 = 0;
    else
      v10 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v9);
    v14 = v10 & 8;
  }
  v11 = (uint64_t *)llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v14, v6);
  if (v15 >= 0x41 && v14)
  {
    v13 = v11;
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
    v11 = v13;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v16, (llvm::Value *)v4, (uint64_t)NullValue, v11, 259, 0, 0, 0, 0);
  if (v16[0] != &v17)
    free(v16[0]);
}

void sub_1C58A5F84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char *v6;
  char *v7;
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Value **v12;
  uint64_t v13;
  llvm::PointerType *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 *v22;
  llvm::PointerType *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  char v28;
  char v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  llvm::Value *v47;
  _QWORD *v48;
  llvm::Value *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unsigned __int8 **v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  char *v60;
  char *v61;
  unsigned __int8 **v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t ***v68;
  _QWORD v69[4];
  __int16 v70;
  _BYTE v71[32];
  __int16 v72;
  unsigned __int8 *v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v82, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 448), 0, 0, 0);
  v2 = *v87 + 1984;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v72 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v85 + 56) + 40) + 272, v2);
  v5 = v4;
  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  v8 = (llvm::Value *)(v6 + 32);
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 32;
  v77 = 257;
  *((_QWORD *)v6 + 4) = v2;
  *((_QWORD *)v6 + 5) = 0;
  *((_WORD *)v6 + 24) = 60;
  *((_DWORD *)v6 + 13) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 22) = 0;
  *(_QWORD *)v6 = v3;
  *((_QWORD *)v6 + 1) = 0;
  if (v3)
  {
    v11 = *(_QWORD *)(v3 + 8);
    v10 = (_QWORD *)(v3 + 8);
    v9 = v11;
    *((_QWORD *)v6 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v6 + 8;
    *((_QWORD *)v6 + 2) = v10;
    *v10 = v6;
  }
  *((_WORD *)v6 + 25) = 2 * (v5 & 0x3F);
  v6[92] = 1;
  llvm::Value::setName((uint64_t ***)v6 + 4, (uint64_t)&v74);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v8, v71, v85, v86);
  if (v83)
  {
    v60 = v82;
    v61 = &v82[16 * v83];
    v62 = (unsigned __int8 **)(v7 + 80);
    do
    {
      v63 = *(_DWORD *)v60;
      v64 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
      if (v64)
      {
        if (!v63)
        {
          v69[0] = *((_QWORD *)v60 + 1);
          llvm::MetadataTracking::track((uint64_t)v69, v64, 2);
          v65 = *v62;
          goto LABEL_76;
        }
      }
      else
      {
        v65 = *v62;
        if (!*v62 && (v7[55] & 0x20) == 0)
          goto LABEL_73;
        if (!v63)
        {
          v69[0] = 0;
LABEL_76:
          if (v65)
            llvm::MetadataTracking::untrack((uint64_t)(v7 + 80), v65);
          v66 = (unsigned __int8 *)v69[0];
          *v62 = (unsigned __int8 *)v69[0];
          if (v66)
            llvm::MetadataTracking::retrack((uint64_t)v69, v66, (uint64_t)(v7 + 80));
          goto LABEL_73;
        }
      }
      llvm::Value::setMetadata(v8, *(_DWORD *)v60, (llvm::MDNode *)v64);
LABEL_73:
      v60 += 16;
    }
    while (v60 != v61);
  }
  *(_QWORD *)(a1 + 40) = v8;
  v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 0, 0);
  v13 = *(_QWORD *)(a1 + 40);
  v72 = 257;
  v68 = (uint64_t ***)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v88 + 16))(v88, v12, v13, 0, 0);
  if (!v68)
  {
    v77 = 257;
    v44 = (char *)operator new(0x80uLL);
    v45 = v44;
    *((_QWORD *)v44 + 4) = 0;
    v46 = v44 + 32;
    *((_QWORD *)v44 + 5) = 0;
    *((_QWORD *)v44 + 6) = 0;
    *((_QWORD *)v44 + 8) = *v12;
    *((_QWORD *)v44 + 3) = v44 + 64;
    v68 = (uint64_t ***)(v44 + 64);
    *((_QWORD *)v44 + 7) = v44 + 64;
    *((_QWORD *)v44 + 9) = 0;
    v44[80] = 41;
    v44[81] = 0;
    *((_WORD *)v44 + 41) = 0;
    *((_DWORD *)v44 + 21) = 2;
    *(_OWORD *)(v44 + 88) = 0u;
    *(_OWORD *)(v44 + 104) = 0u;
    *((_DWORD *)v44 + 30) = 0;
    *(_QWORD *)v44 = v12;
    v49 = v12[1];
    v48 = v12 + 1;
    v47 = v49;
    *((_QWORD *)v44 + 1) = v49;
    if (v49)
      *((_QWORD *)v47 + 2) = v44 + 8;
    *((_QWORD *)v44 + 2) = v48;
    *v48 = v44;
    if (*((_QWORD *)v44 + 4))
    {
      **((_QWORD **)v44 + 6) = *((_QWORD *)v44 + 5);
      v67 = *((_QWORD *)v44 + 5);
      if (v67)
        *(_QWORD *)(v67 + 16) = *((_QWORD *)v44 + 6);
    }
    *v46 = v13;
    if (v13)
    {
      v52 = *(_QWORD *)(v13 + 8);
      v51 = (_QWORD *)(v13 + 8);
      v50 = v52;
      *((_QWORD *)v44 + 5) = v52;
      if (v52)
        *(_QWORD *)(v50 + 16) = v44 + 40;
      *((_QWORD *)v44 + 6) = v51;
      *v51 = v46;
    }
    llvm::Value::setName(v68, (uint64_t)&v74);
    (*(void (**)(uint64_t, uint64_t ***, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v68, v71, v85, v86);
    if (v83)
    {
      v53 = v82;
      v54 = &v82[16 * v83];
      v55 = (unsigned __int8 **)(v45 + 112);
      do
      {
        v56 = *(_DWORD *)v53;
        v57 = (unsigned __int8 *)*((_QWORD *)v53 + 1);
        if (v57)
        {
          if (!v56)
          {
            v69[0] = *((_QWORD *)v53 + 1);
            llvm::MetadataTracking::track((uint64_t)v69, v57, 2);
            v58 = *v55;
            if (!*v55)
            {
LABEL_63:
              v59 = (unsigned __int8 *)v69[0];
              *v55 = (unsigned __int8 *)v69[0];
              if (v59)
                llvm::MetadataTracking::retrack((uint64_t)v69, v59, (uint64_t)(v45 + 112));
              goto LABEL_60;
            }
LABEL_57:
            llvm::MetadataTracking::untrack((uint64_t)(v45 + 112), v58);
            goto LABEL_63;
          }
        }
        else
        {
          v58 = *v55;
          if (!*v55 && (v45[87] & 0x20) == 0)
            goto LABEL_60;
          if (!v56)
          {
            v69[0] = 0;
            if (!v58)
              goto LABEL_63;
            goto LABEL_57;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v68, *(_DWORD *)v53, (llvm::MDNode *)v57);
LABEL_60:
        v53 += 16;
      }
      while (v53 != v54);
    }
  }
  if (*(_DWORD *)(a1 + 56))
  {
    v14 = (llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1912);
    v77 = 257;
    v15 = sub_1C486A5CC((uint64_t *)&v82, v14, (llvm::ValueHandleBase *)v68, (uint64_t)&v74);
    *(_QWORD *)(a1 + 32) = v15;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v82, 194, (llvm::Value *)v15, 259, *(llvm::Value **)(*(_QWORD *)(a1 + 16) + 72), 259, (uint64_t *)v68, 0, 0, 0, 0, 0);
    v16 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v16)
    {
      v17 = 0;
      while (1)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v17);
        v19 = *(_QWORD *)(v18 + 32);
        if (v19)
          v20 = v19 == *(_QWORD *)(v18 + 40) + 40;
        else
          v20 = 1;
        if (v20)
          v21 = 0;
        else
          v21 = v19 - 24;
        sub_1C4773D54((uint64_t)&v74, v21, 0, 0, 0);
        v22 = *(unsigned __int8 **)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
        v23 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1984), 0);
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        v72 = 257;
        v25 = sub_1C4773E38((uint64_t *)&v74, 47, v22, v24, (uint64_t)v71);
        v26 = llvm::PointerType::get(v23, 0);
        v70 = 257;
        v27 = sub_1C4773E38((uint64_t *)&v74, 48, v25, v26, (uint64_t)v69);
        v70 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v78 + 56) + 40) + 272, (uint64_t)v23);
        v29 = v28;
        v30 = (char *)operator new(0x60uLL);
        v31 = v30;
        v32 = (unsigned __int8 *)(v30 + 32);
        *((_QWORD *)v30 + 2) = 0;
        *((_QWORD *)v30 + 3) = v30 + 32;
        v72 = 257;
        *((_QWORD *)v30 + 4) = v23;
        *((_QWORD *)v30 + 5) = 0;
        *((_WORD *)v30 + 24) = 60;
        *((_DWORD *)v30 + 13) = 1;
        *(_OWORD *)(v30 + 56) = 0u;
        *(_OWORD *)(v30 + 72) = 0u;
        *((_DWORD *)v30 + 22) = 0;
        *(_QWORD *)v30 = v27;
        *((_QWORD *)v30 + 1) = 0;
        if (v27)
        {
          v35 = *((_QWORD *)v27 + 1);
          v34 = v27 + 8;
          v33 = v35;
          *((_QWORD *)v30 + 1) = v35;
          if (v35)
            *(_QWORD *)(v33 + 16) = v30 + 8;
          *((_QWORD *)v30 + 2) = v34;
          *v34 = v30;
        }
        *((_WORD *)v30 + 25) = 2 * (v29 & 0x3F);
        v30[92] = 1;
        llvm::Value::setName((uint64_t ***)v30 + 4, (uint64_t)v71);
        (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v32, v69, v78, v79);
        if (v75)
          break;
LABEL_21:
        v36 = sub_1C58A0068(*(_QWORD **)(a1 + 24), v32, (uint64_t)&v74, (llvm::PointerType *)(*(_QWORD *)v80 + 1912), 259, 1);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v74, 194, (llvm::Value *)v36, 259, *(llvm::Value **)(a1 + 32), 259, (uint64_t *)v68, 0, 0, 0, 0, 0);
        if (v74 != &v76)
          free(v74);
        if (++v17 == v16)
          goto LABEL_40;
      }
      v37 = (char *)v74;
      v38 = (char *)v74 + 16 * v75;
      v39 = (unsigned __int8 **)(v31 + 80);
      while (1)
      {
        v40 = *(_DWORD *)v37;
        v41 = (unsigned __int8 *)*((_QWORD *)v37 + 1);
        if (v41)
        {
          if (!v40)
          {
            v73 = (unsigned __int8 *)*((_QWORD *)v37 + 1);
            llvm::MetadataTracking::track((uint64_t)&v73, v41, 2);
            v42 = *v39;
            goto LABEL_36;
          }
        }
        else
        {
          v42 = *v39;
          if (!*v39 && (v31[55] & 0x20) == 0)
            goto LABEL_33;
          if (!v40)
          {
            v73 = 0;
LABEL_36:
            if (v42)
              llvm::MetadataTracking::untrack((uint64_t)(v31 + 80), v42);
            v43 = v73;
            *v39 = v73;
            if (v43)
              llvm::MetadataTracking::retrack((uint64_t)&v73, v43, (uint64_t)(v31 + 80));
            goto LABEL_33;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v32, *(_DWORD *)v37, (llvm::MDNode *)v41);
LABEL_33:
        v37 += 16;
        if (v37 == v38)
          goto LABEL_21;
      }
    }
  }
LABEL_40:
  if (v82 != (char *)&v84)
    free(v82);
}

_QWORD *sub_1C58A6680(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DFB0;
  v2 = (_QWORD *)a1[7];
  if (v2 != a1 + 9)
    free(v2);
  return a1;
}

void sub_1C58A66C0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817DFB0;
  v2 = (_QWORD *)a1[7];
  if (v2 != a1 + 9)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58A6710(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  llvm::PointerType ***v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  llvm::ConstantInt *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  char v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  llvm::Value *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 **v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v58;
  unsigned int v59;
  __int16 v60;
  unsigned __int8 *v61;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 112);
  if (!v5)
    goto LABEL_23;
  if (!*(_DWORD *)(v5 + 8))
    goto LABEL_22;
  v5 = *(_QWORD *)(v5 + 40);
  if (!v5)
    goto LABEL_23;
  v6 = *(_DWORD *)(v5 + 40);
  if (!v6)
    goto LABEL_22;
  v7 = *(_QWORD *)(v5 + 24);
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v53 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v53 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v53;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xA5B7BEF690D4EBC0)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1ED7EAC80 ^ 0xA5B7BEF690D4EBC0)) >> 47) ^ 0xD1D1D185BDB198B5);
  v10 = (-348639895 * ((v9 >> 47) ^ v9)) ^ 0x662D7466;
  for (i = 1; ; ++i)
  {
    v12 = v10 & (v6 - 1);
    v13 = v7 + 24 * v12;
    v14 = *(_QWORD **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      if ("use-soft-float" == (char *)-1)
        goto LABEL_20;
      goto LABEL_9;
    }
    if (v14 != (_QWORD *)-2)
      break;
    if ("use-soft-float" == (char *)-2)
      goto LABEL_20;
LABEL_9:
    if (v14 == (_QWORD *)-1)
      goto LABEL_22;
    v10 = i + v12;
  }
  if (*(_QWORD *)(v13 + 8) != 14)
    goto LABEL_9;
  if (*v14 != 0x74666F732D657375 || *(_QWORD *)((char *)v14 + 6) != 0x74616F6C662D7466)
    goto LABEL_9;
LABEL_20:
  v5 = *(_QWORD *)(v13 + 16);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 16) == 4)
      LODWORD(v5) = *(_DWORD *)(v5 + *(unsigned int *)(v5 + 12) + 25) == *(_DWORD *)"true";
    else
LABEL_22:
      LODWORD(v5) = 0;
  }
LABEL_23:
  v16 = *(_DWORD *)(a2 + 20);
  v17 = (llvm::PointerType ***)(a2 - 32 * (v16 & 0x7FFFFFF));
  v18 = *(unsigned __int8 *)(a2 + 16);
  if (v18 == 84)
  {
    v19 = 0;
    if ((v16 & 0x80000000) == 0)
      goto LABEL_25;
LABEL_89:
    v55 = (uint64_t)*(v17 - 1);
    if ((v55 & 0xFFFFFFFF0) != 0)
      v20 = (*((_DWORD *)v17 - 3) - *(_DWORD *)((char *)v17 - v55));
    else
      v20 = 0;
  }
  else
  {
    if (v18 == 39)
      v19 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v19 = 2;
    if (v16 < 0)
      goto LABEL_89;
LABEL_25:
    v20 = 0;
  }
  if (v17 != (llvm::PointerType ***)(a2 - 32 * v19 - 32 * v20 - 32))
  {
    v56 = v5 ^ 1;
    v21 = *(_DWORD *)(a2 + 20);
    v22 = *(_DWORD *)(*(_QWORD *)(a2 + 72) + 12);
    v23 = *((_DWORD *)**v17 + 2);
    if (v23 == 32781 || v23 == 5)
    {
      llvm::PointerType::get(**v17, 0);
      LODWORD(v25) = 0;
    }
    else if (v23 >= 7u)
    {
      v26 = v23 | 2;
      if ((*((_DWORD *)**v17 + 2) & 0xFE) == 0x12)
        v27 = 2;
      else
        v27 = 3;
      if (v26 == 15)
        LODWORD(v25) = 0;
      else
        LODWORD(v25) = v27;
    }
    else
    {
      LODWORD(v25) = v56;
    }
    if (v22 - 1 > (((unint64_t)&v17[4 * (v21 & 0x7FFFFFF)] - a2) >> 5))
      v28 = 2;
    else
      v28 = 3;
    if ((_DWORD)v25 == 2)
      v25 = v28;
    else
      v25 = v25;
    __asm { BR              X10 }
  }
  v29 = **((_QWORD **)a3 + 8);
  v30 = *(llvm::ConstantInt **)(v29 + 1984);
  v31 = *(unsigned int *)(v29 + 1992);
  v59 = v31 >> 8;
  if (v31 >> 8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v58, 0, 0);
  else
    v58 = 0;
  v32 = (uint64_t *)llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v58, a3);
  if (v59 >= 0x41 && v58)
    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, *v32);
  v35 = v34;
  v36 = (char *)operator new(0x80uLL);
  v37 = v36;
  *((_DWORD *)v36 + 21) = *((_DWORD *)v36 + 21) & 0x38000000 | 2;
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 2) = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 5) = 0;
  *((_QWORD *)v36 + 6) = 0;
  *((_QWORD *)v36 + 4) = 0;
  v38 = v36 + 32;
  *((_QWORD *)v36 + 8) = **(_QWORD **)*v32 + 1576;
  v39 = (llvm::Value *)(v36 + 64);
  *((_QWORD *)v36 + 3) = v36 + 64;
  *((_QWORD *)v36 + 7) = v36 + 64;
  *((_QWORD *)v36 + 9) = 0;
  v36[80] = 61;
  v36[81] = 0;
  *((_WORD *)v36 + 41) = 0;
  *((_DWORD *)v36 + 21) = 2;
  *(_OWORD *)(v36 + 88) = 0u;
  *(_OWORD *)(v36 + 104) = 0u;
  *((_DWORD *)v36 + 30) = 0;
  v40 = v32 + 1;
  v41 = v32[1];
  *(_QWORD *)v36 = v32;
  *((_QWORD *)v36 + 1) = v41;
  if (v41)
    *(_QWORD *)(v41 + 16) = v36 + 8;
  *((_QWORD *)v36 + 2) = v40;
  *v40 = v36;
  if (*((_QWORD *)v36 + 4))
  {
    **((_QWORD **)v36 + 6) = *((_QWORD *)v36 + 5);
    v54 = *((_QWORD *)v36 + 5);
    if (v54)
      *(_QWORD *)(v54 + 16) = *((_QWORD *)v36 + 6);
  }
  *v38 = v33;
  if (v33)
  {
    v44 = *(_QWORD *)(v33 + 8);
    v43 = (_QWORD *)(v33 + 8);
    v42 = v44;
    *((_QWORD *)v36 + 5) = v44;
    if (v44)
      *(_QWORD *)(v42 + 16) = v36 + 40;
    *((_QWORD *)v36 + 6) = v43;
    *v43 = v38;
  }
  *((_WORD *)v36 + 41) = 2 * (v35 & 0x3F);
  v36[124] = 1;
  v60 = 257;
  (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v39, &v58, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
  v45 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v45)
  {
    v46 = *(_QWORD *)a3;
    v47 = *(_QWORD *)a3 + 16 * v45;
    v48 = (unsigned __int8 **)(v37 + 112);
    do
    {
      v49 = *(_DWORD *)v46;
      v50 = *(unsigned __int8 **)(v46 + 8);
      if (v50)
      {
        if (!v49)
        {
          v61 = *(unsigned __int8 **)(v46 + 8);
          llvm::MetadataTracking::track((uint64_t)&v61, v50, 2);
          v51 = *v48;
          goto LABEL_71;
        }
      }
      else
      {
        v51 = *v48;
        if (!*v48 && (v37[87] & 0x20) == 0)
          goto LABEL_68;
        if (!v49)
        {
          v61 = 0;
LABEL_71:
          if (v51)
            llvm::MetadataTracking::untrack((uint64_t)(v37 + 112), v51);
          v52 = v61;
          *v48 = v61;
          if (v52)
            llvm::MetadataTracking::retrack((uint64_t)&v61, v52, (uint64_t)(v37 + 112));
          goto LABEL_68;
        }
      }
      llvm::Value::setMetadata(v39, *(_DWORD *)v46, (llvm::MDNode *)v50);
LABEL_68:
      v46 += 16;
    }
    while (v46 != v47);
  }
}

void sub_1C58A7350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 64);
  if (v4 >= *(_DWORD *)(a1 + 68))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 56, a1 + 72, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 64);
  sub_1C58A898C(a1, a2);
}

void sub_1C58A73B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char *v6;
  char *v7;
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Value **v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::PointerType *v15;
  unsigned __int8 **v16;
  uint64_t v17;
  llvm::PointerType *v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 *v26;
  llvm::PointerType *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  char *v32;
  char *v33;
  llvm::Value ***v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Value *v39;
  llvm::Value ****v40;
  llvm::Value *v41;
  char *v42;
  char *v43;
  unsigned __int8 **v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  char v51;
  char v52;
  char *v53;
  char *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  const llvm::APInt *v59;
  unsigned __int8 *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *v63;
  llvm::ConstantInt *v64;
  unsigned int v65;
  unsigned __int8 v66;
  uint64_t *v67;
  const llvm::APInt *v68;
  uint64_t v69;
  llvm::Value *v70;
  llvm::ConstantInt *v71;
  unsigned int v72;
  unsigned __int8 v73;
  uint64_t *v74;
  llvm::PointerType *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  llvm::Value **v78;
  llvm::Value *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  char v82;
  char v83;
  char *v84;
  char *v85;
  llvm::Value *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  llvm::Value *v91;
  llvm::Value *v92;
  llvm::GetElementPtrInst *v93;
  _QWORD *v94;
  uint64_t ***v95;
  llvm::GetElementPtrInst *v96;
  _QWORD *v97;
  uint64_t ***v98;
  char *v99;
  char *v100;
  llvm::Value ***v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  llvm::Value *v105;
  llvm::Value ****v106;
  llvm::Value *v107;
  char *v108;
  char *v109;
  unsigned __int8 **v110;
  int v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  char *v115;
  char *v116;
  unsigned __int8 **v117;
  int v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  char *v122;
  char *v123;
  unsigned __int8 **v124;
  int v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  _QWORD *v133;
  llvm::Value *v134;
  _QWORD *v135;
  llvm::Value *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  unsigned __int8 **v142;
  int v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  char *v147;
  char *v148;
  unsigned __int8 **v149;
  int v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  uint64_t v154;
  unsigned __int8 *v155;
  _QWORD v156[4];
  __int16 v157;
  _BYTE v158[32];
  __int16 v159;
  uint64_t v160;
  unsigned int v161;
  __int16 v162;
  unsigned __int8 *v163;
  void *v164;
  unsigned int v165;
  _BYTE v166[32];
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 64))
    return;
  sub_1C4773D54((uint64_t)&v164, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 448), 0, 0, 0);
  v2 = *(_QWORD *)v169 + 1984;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v159 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v167 + 56) + 40) + 272, v2);
  v5 = v4;
  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  v8 = (llvm::Value *)(v6 + 32);
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 32;
  v162 = 257;
  *((_QWORD *)v6 + 4) = v2;
  *((_QWORD *)v6 + 5) = 0;
  *((_WORD *)v6 + 24) = 60;
  *((_DWORD *)v6 + 13) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 22) = 0;
  *(_QWORD *)v6 = v3;
  *((_QWORD *)v6 + 1) = 0;
  if (v3)
  {
    v11 = *(_QWORD *)(v3 + 8);
    v10 = (_QWORD *)(v3 + 8);
    v9 = v11;
    *((_QWORD *)v6 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v6 + 8;
    *((_QWORD *)v6 + 2) = v10;
    *v10 = v6;
  }
  *((_WORD *)v6 + 25) = 2 * (v5 & 0x3F);
  v6[92] = 1;
  llvm::Value::setName((uint64_t ***)v6 + 4, (uint64_t)&v160);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v8, v158, v167, v168);
  if (v165)
  {
    v147 = (char *)v164;
    v148 = (char *)v164 + 16 * v165;
    v149 = (unsigned __int8 **)(v7 + 80);
    do
    {
      v150 = *(_DWORD *)v147;
      v151 = (unsigned __int8 *)*((_QWORD *)v147 + 1);
      if (v151)
      {
        if (!v150)
        {
          v156[0] = *((_QWORD *)v147 + 1);
          llvm::MetadataTracking::track((uint64_t)v156, v151, 2);
          v152 = *v149;
          goto LABEL_171;
        }
      }
      else
      {
        v152 = *v149;
        if (!*v149 && (v7[55] & 0x20) == 0)
          goto LABEL_168;
        if (!v150)
        {
          v156[0] = 0;
LABEL_171:
          if (v152)
            llvm::MetadataTracking::untrack((uint64_t)(v7 + 80), v152);
          v153 = (unsigned __int8 *)v156[0];
          *v149 = (unsigned __int8 *)v156[0];
          if (v153)
            llvm::MetadataTracking::retrack((uint64_t)v156, v153, (uint64_t)(v7 + 80));
          goto LABEL_168;
        }
      }
      llvm::Value::setMetadata(v8, *(_DWORD *)v147, (llvm::MDNode *)v151);
LABEL_168:
      v147 += 16;
    }
    while (v147 != v148);
  }
  *(_QWORD *)(a1 + 48) = v8;
  v12 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 160, 0);
  v13 = *(_QWORD *)(a1 + 48);
  v159 = 257;
  v14 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v170 + 16))(v170, v12, v13, 0, 0);
  if (!v14)
  {
    v162 = 257;
    v131 = (char *)operator new(0x80uLL);
    v132 = v131;
    *((_QWORD *)v131 + 4) = 0;
    v133 = v131 + 32;
    *((_QWORD *)v131 + 5) = 0;
    *((_QWORD *)v131 + 6) = 0;
    *((_QWORD *)v131 + 8) = *v12;
    v14 = (llvm::Value *)(v131 + 64);
    *((_QWORD *)v131 + 3) = v131 + 64;
    *((_QWORD *)v131 + 7) = v131 + 64;
    *((_QWORD *)v131 + 9) = 0;
    v131[80] = 41;
    v131[81] = 0;
    *((_WORD *)v131 + 41) = 0;
    *((_DWORD *)v131 + 21) = 2;
    *(_OWORD *)(v131 + 88) = 0u;
    *(_OWORD *)(v131 + 104) = 0u;
    *((_DWORD *)v131 + 30) = 0;
    *(_QWORD *)v131 = v12;
    v136 = v12[1];
    v135 = v12 + 1;
    v134 = v136;
    *((_QWORD *)v131 + 1) = v136;
    if (v136)
      *((_QWORD *)v134 + 2) = v131 + 8;
    *((_QWORD *)v131 + 2) = v135;
    *v135 = v131;
    if (*((_QWORD *)v131 + 4))
    {
      **((_QWORD **)v131 + 6) = *((_QWORD *)v131 + 5);
      v154 = *((_QWORD *)v131 + 5);
      if (v154)
        *(_QWORD *)(v154 + 16) = *((_QWORD *)v131 + 6);
    }
    *v133 = v13;
    if (v13)
    {
      v139 = *(_QWORD *)(v13 + 8);
      v138 = (_QWORD *)(v13 + 8);
      v137 = v139;
      *((_QWORD *)v131 + 5) = v139;
      if (v139)
        *(_QWORD *)(v137 + 16) = v131 + 40;
      *((_QWORD *)v131 + 6) = v138;
      *v138 = v133;
    }
    llvm::Value::setName((uint64_t ***)v131 + 8, (uint64_t)&v160);
    (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v14, v158, v167, v168);
    if (v165)
    {
      v140 = (char *)v164;
      v141 = (char *)v164 + 16 * v165;
      v142 = (unsigned __int8 **)(v132 + 112);
      do
      {
        v143 = *(_DWORD *)v140;
        v144 = (unsigned __int8 *)*((_QWORD *)v140 + 1);
        if (v144)
        {
          if (!v143)
          {
            v156[0] = *((_QWORD *)v140 + 1);
            llvm::MetadataTracking::track((uint64_t)v156, v144, 2);
            v145 = *v142;
            if (!*v142)
            {
LABEL_158:
              v146 = (unsigned __int8 *)v156[0];
              *v142 = (unsigned __int8 *)v156[0];
              if (v146)
                llvm::MetadataTracking::retrack((uint64_t)v156, v146, (uint64_t)(v132 + 112));
              goto LABEL_155;
            }
LABEL_152:
            llvm::MetadataTracking::untrack((uint64_t)(v132 + 112), v145);
            goto LABEL_158;
          }
        }
        else
        {
          v145 = *v142;
          if (!*v142 && (v132[87] & 0x20) == 0)
            goto LABEL_155;
          if (!v143)
          {
            v156[0] = 0;
            if (!v145)
              goto LABEL_158;
            goto LABEL_152;
          }
        }
        llvm::Value::setMetadata(v14, *(_DWORD *)v140, (llvm::MDNode *)v144);
LABEL_155:
        v140 += 16;
      }
      while (v140 != v141);
    }
  }
  v15 = (llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1912);
  v162 = 257;
  v16 = sub_1C486A5CC((uint64_t *)&v164, v15, v14, (uint64_t)&v160);
  *(_QWORD *)(a1 + 32) = v16;
  llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v164, 194, (llvm::Value *)v16, 259, *(llvm::Value **)(*(_QWORD *)(a1 + 16) + 72), 259, (uint64_t *)v14, 0, 0, 0, 0, 0);
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 4))
  {
    v18 = (llvm::PointerType *)(**(_QWORD **)(v17 + 16) + 1912);
    v162 = 257;
    v19 = sub_1C486A5CC((uint64_t *)&v164, v18, v14, (uint64_t)&v160);
    *(_QWORD *)(a1 + 40) = v19;
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v164, 194, (llvm::Value *)v19, 259, *(llvm::Value **)(*(_QWORD *)(a1 + 16) + 80), 259, (uint64_t *)v14, 0, 0, 0, 0, 0);
  }
  if (v164 != v166)
    free(v164);
  v20 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v20)
  {
    v21 = 0;
    while (1)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v21);
      v23 = *(_QWORD *)(v22 + 32);
      if (v23)
        v24 = v23 == *(_QWORD *)(v22 + 40) + 40;
      else
        v24 = 1;
      if (v24)
        v25 = 0;
      else
        v25 = v23 - 24;
      sub_1C4773D54((uint64_t)&v164, v25, 0, 0, 0);
      v26 = *(unsigned __int8 **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      v27 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 1984), 0);
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      v159 = 257;
      v29 = sub_1C4773E38((uint64_t *)&v164, 47, v26, v28, (uint64_t)v158);
      v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 24, 0);
      v157 = 257;
      v31 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v170 + 16))(v170, v29, v30, 0, 0);
      if (!v31)
      {
        v162 = 257;
        v32 = (char *)operator new(0x80uLL);
        v33 = v32;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 5) = 0;
        *((_QWORD *)v32 + 6) = 0;
        *((_QWORD *)v32 + 4) = 0;
        v34 = (llvm::Value ***)(v32 + 32);
        *((_QWORD *)v32 + 8) = *(_QWORD *)v29;
        v31 = (llvm::Value *)(v32 + 64);
        *((_QWORD *)v32 + 3) = v32 + 64;
        *((_QWORD *)v32 + 7) = v32 + 64;
        *((_QWORD *)v32 + 9) = 0;
        v32[80] = 41;
        v32[81] = 0;
        *((_WORD *)v32 + 41) = 0;
        *((_DWORD *)v32 + 21) = 2;
        *((_DWORD *)v32 + 30) = 0;
        *(_OWORD *)(v32 + 104) = 0u;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_QWORD *)v32 = v29;
        v37 = *((_QWORD *)v29 + 1);
        v36 = v29 + 8;
        v35 = v37;
        *((_QWORD *)v32 + 1) = v37;
        if (v37)
          *(_QWORD *)(v35 + 16) = v32 + 8;
        v155 = v26;
        *((_QWORD *)v32 + 2) = v36;
        *v36 = v32;
        if (*((_QWORD *)v32 + 4))
        {
          **((_QWORD **)v32 + 6) = *((_QWORD *)v32 + 5);
          v129 = *((_QWORD *)v32 + 5);
          if (v129)
            *(_QWORD *)(v129 + 16) = *((_QWORD *)v32 + 6);
        }
        v38 = v20;
        *v34 = v30;
        if (v30)
        {
          v41 = v30[1];
          v40 = (llvm::Value ****)(v30 + 1);
          v39 = v41;
          *((_QWORD *)v32 + 5) = v41;
          if (v41)
            *((_QWORD *)v39 + 2) = v32 + 40;
          *((_QWORD *)v32 + 6) = v40;
          *v40 = v34;
        }
        llvm::Value::setName((uint64_t ***)v32 + 8, (uint64_t)&v160);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v31, v156, v167, v168);
        if (v165)
        {
          v42 = (char *)v164;
          v43 = (char *)v164 + 16 * v165;
          v44 = (unsigned __int8 **)(v33 + 112);
          do
          {
            v45 = *(_DWORD *)v42;
            v46 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
            if (v46)
            {
              if (!v45)
              {
                v163 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
                llvm::MetadataTracking::track((uint64_t)&v163, v46, 2);
                v47 = *v44;
                if (!*v44)
                {
LABEL_41:
                  v48 = v163;
                  *v44 = v163;
                  if (v48)
                    llvm::MetadataTracking::retrack((uint64_t)&v163, v48, (uint64_t)(v33 + 112));
                  goto LABEL_38;
                }
LABEL_35:
                llvm::MetadataTracking::untrack((uint64_t)(v33 + 112), v47);
                goto LABEL_41;
              }
            }
            else
            {
              v47 = *v44;
              if (!*v44 && (v33[87] & 0x20) == 0)
                goto LABEL_38;
              if (!v45)
              {
                v163 = 0;
                if (!v47)
                  goto LABEL_41;
                goto LABEL_35;
              }
            }
            llvm::Value::setMetadata(v31, *(_DWORD *)v42, (llvm::MDNode *)v46);
LABEL_38:
            v42 += 16;
          }
          while (v42 != v43);
        }
        v20 = v38;
        v26 = v155;
      }
      v49 = llvm::PointerType::get(v27, 0);
      v162 = 257;
      v50 = sub_1C4773E38((uint64_t *)&v164, 48, (unsigned __int8 *)v31, v49, (uint64_t)&v160);
      v159 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v167 + 56) + 40) + 272, (uint64_t)v27);
      v52 = v51;
      v53 = (char *)operator new(0x60uLL);
      v54 = v53;
      v55 = (unsigned __int8 *)(v53 + 32);
      *((_QWORD *)v53 + 2) = 0;
      *((_QWORD *)v53 + 3) = v53 + 32;
      v162 = 257;
      *((_QWORD *)v53 + 4) = v27;
      *((_QWORD *)v53 + 5) = 0;
      *((_WORD *)v53 + 24) = 60;
      *((_DWORD *)v53 + 13) = 1;
      *(_OWORD *)(v53 + 56) = 0u;
      *(_OWORD *)(v53 + 72) = 0u;
      *((_DWORD *)v53 + 22) = 0;
      *(_QWORD *)v53 = v50;
      *((_QWORD *)v53 + 1) = 0;
      if (v50)
      {
        v58 = *((_QWORD *)v50 + 1);
        v57 = v50 + 8;
        v56 = v58;
        *((_QWORD *)v53 + 1) = v58;
        if (v58)
          *(_QWORD *)(v56 + 16) = v53 + 8;
        *((_QWORD *)v53 + 2) = v57;
        *v57 = v53;
      }
      *((_WORD *)v53 + 25) = 2 * (v52 & 0x3F);
      v53[92] = 1;
      llvm::Value::setName((uint64_t ***)v53 + 4, (uint64_t)&v160);
      (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v55, v158, v167, v168);
      if (v165)
        break;
LABEL_49:
      v60 = sub_1C58A0068(*(_QWORD **)(a1 + 24), v55, (uint64_t)&v164, (llvm::PointerType *)(*(_QWORD *)v169 + 1912), 259, 1);
      v62 = v61;
      v63 = *(llvm::Value **)(a1 + 32);
      v64 = *(llvm::ConstantInt **)(*(_QWORD *)v169 + 1984);
      v65 = *(_DWORD *)(*(_QWORD *)v169 + 1992);
      v161 = v65 >> 8;
      if (v65 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v160, 160, 0);
      }
      else
      {
        if (v65 <= 0xFF)
          v66 = 0;
        else
          v66 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v65);
        v160 = v66 & 0xA0;
      }
      v67 = (uint64_t *)llvm::ConstantInt::get(v64, (llvm::LLVMContext *)&v160, v59);
      if (v161 >= 0x41 && v160)
        MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v164, 194, (llvm::Value *)v60, 259, v63, 259, v67, 0, 0, 0, 0, 0);
      v69 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(v69 + 4))
      {
        v70 = *(llvm::Value **)(a1 + 40);
        v71 = *(llvm::ConstantInt **)(*(_QWORD *)v169 + 1984);
        v72 = *(_DWORD *)(*(_QWORD *)v169 + 1992);
        v161 = v72 >> 8;
        if (v72 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v160, 160, 0);
        }
        else
        {
          if (v72 <= 0xFF)
            v73 = 0;
          else
            v73 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v72);
          v160 = v73 & 0xA0;
        }
        v74 = (uint64_t *)llvm::ConstantInt::get(v71, (llvm::LLVMContext *)&v160, v68);
        if (v161 >= 0x41 && v160)
          MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v164, 194, v62, 259, v70, 259, v74, 0, 0, 0, 0, 0);
        v69 = *(_QWORD *)(a1 + 16);
      }
      v75 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(v69 + 16) + 1984), 0);
      v76 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      v159 = 257;
      v77 = sub_1C4773E38((uint64_t *)&v164, 47, v26, v76, (uint64_t)v158);
      v78 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), 16, 0);
      v157 = 257;
      v79 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v170 + 16))(v170, v77, v78, 0, 0);
      if (!v79)
      {
        v162 = 257;
        v99 = (char *)operator new(0x80uLL);
        v100 = v99;
        *(_QWORD *)v99 = 0;
        *((_QWORD *)v99 + 1) = 0;
        *((_QWORD *)v99 + 2) = 0;
        *((_QWORD *)v99 + 5) = 0;
        *((_QWORD *)v99 + 6) = 0;
        *((_QWORD *)v99 + 4) = 0;
        v101 = (llvm::Value ***)(v99 + 32);
        *((_QWORD *)v99 + 8) = *(_QWORD *)v77;
        v79 = (llvm::Value *)(v99 + 64);
        *((_QWORD *)v99 + 3) = v99 + 64;
        *((_QWORD *)v99 + 7) = v99 + 64;
        *((_QWORD *)v99 + 9) = 0;
        v99[80] = 41;
        v99[81] = 0;
        *((_WORD *)v99 + 41) = 0;
        *((_DWORD *)v99 + 21) = 2;
        *((_DWORD *)v99 + 30) = 0;
        *(_OWORD *)(v99 + 104) = 0u;
        *(_OWORD *)(v99 + 88) = 0u;
        *(_QWORD *)v99 = v77;
        v104 = *((_QWORD *)v77 + 1);
        v103 = v77 + 8;
        v102 = v104;
        *((_QWORD *)v99 + 1) = v104;
        if (v104)
          *(_QWORD *)(v102 + 16) = v99 + 8;
        *((_QWORD *)v99 + 2) = v103;
        *v103 = v99;
        if (*((_QWORD *)v99 + 4))
        {
          **((_QWORD **)v99 + 6) = *((_QWORD *)v99 + 5);
          v130 = *((_QWORD *)v99 + 5);
          if (v130)
            *(_QWORD *)(v130 + 16) = *((_QWORD *)v99 + 6);
        }
        *v101 = v78;
        if (v78)
        {
          v107 = v78[1];
          v106 = (llvm::Value ****)(v78 + 1);
          v105 = v107;
          *((_QWORD *)v99 + 5) = v107;
          if (v107)
            *((_QWORD *)v105 + 2) = v99 + 40;
          *((_QWORD *)v99 + 6) = v106;
          *v106 = v101;
        }
        llvm::Value::setName((uint64_t ***)v99 + 8, (uint64_t)&v160);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v79, v156, v167, v168);
        if (v165)
        {
          v108 = (char *)v164;
          v109 = (char *)v164 + 16 * v165;
          v110 = (unsigned __int8 **)(v100 + 112);
          do
          {
            v111 = *(_DWORD *)v108;
            v112 = (unsigned __int8 *)*((_QWORD *)v108 + 1);
            if (v112)
            {
              if (!v111)
              {
                v163 = (unsigned __int8 *)*((_QWORD *)v108 + 1);
                llvm::MetadataTracking::track((uint64_t)&v163, v112, 2);
                v113 = *v110;
                if (!*v110)
                {
LABEL_95:
                  v114 = v163;
                  *v110 = v163;
                  if (v114)
                    llvm::MetadataTracking::retrack((uint64_t)&v163, v114, (uint64_t)(v100 + 112));
                  goto LABEL_92;
                }
LABEL_89:
                llvm::MetadataTracking::untrack((uint64_t)(v100 + 112), v113);
                goto LABEL_95;
              }
            }
            else
            {
              v113 = *v110;
              if (!*v110 && (v100[87] & 0x20) == 0)
                goto LABEL_92;
              if (!v111)
              {
                v163 = 0;
                if (!v113)
                  goto LABEL_95;
                goto LABEL_89;
              }
            }
            llvm::Value::setMetadata(v79, *(_DWORD *)v108, (llvm::MDNode *)v112);
LABEL_92:
            v108 += 16;
          }
          while (v108 != v109);
        }
      }
      v80 = llvm::PointerType::get(v75, 0);
      v162 = 257;
      v81 = sub_1C4773E38((uint64_t *)&v164, 48, (unsigned __int8 *)v79, v80, (uint64_t)&v160);
      v159 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v167 + 56) + 40) + 272, (uint64_t)v75);
      v83 = v82;
      v84 = (char *)operator new(0x60uLL);
      v85 = v84;
      v86 = (llvm::Value *)(v84 + 32);
      *((_QWORD *)v84 + 2) = 0;
      *((_QWORD *)v84 + 3) = v84 + 32;
      v162 = 257;
      *((_QWORD *)v84 + 4) = v75;
      *((_QWORD *)v84 + 5) = 0;
      *((_WORD *)v84 + 24) = 60;
      *((_DWORD *)v84 + 13) = 1;
      *(_OWORD *)(v84 + 56) = 0u;
      *(_OWORD *)(v84 + 72) = 0u;
      *((_DWORD *)v84 + 22) = 0;
      *(_QWORD *)v84 = v81;
      *((_QWORD *)v84 + 1) = 0;
      if (v81)
      {
        v89 = *((_QWORD *)v81 + 1);
        v88 = v81 + 8;
        v87 = v89;
        *((_QWORD *)v84 + 1) = v89;
        if (v89)
          *(_QWORD *)(v87 + 16) = v84 + 8;
        *((_QWORD *)v84 + 2) = v88;
        *v88 = v84;
      }
      *((_WORD *)v84 + 25) = 2 * (v83 & 0x3F);
      v84[92] = 1;
      llvm::Value::setName((uint64_t ***)v84 + 4, (uint64_t)&v160);
      (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v86, v158, v167, v168);
      if (v165)
      {
        v122 = (char *)v164;
        v123 = (char *)v164 + 16 * v165;
        v124 = (unsigned __int8 **)(v85 + 80);
        do
        {
          v125 = *(_DWORD *)v122;
          v126 = (unsigned __int8 *)*((_QWORD *)v122 + 1);
          if (v126)
          {
            if (!v125)
            {
              v156[0] = *((_QWORD *)v122 + 1);
              llvm::MetadataTracking::track((uint64_t)v156, v126, 2);
              v127 = *v124;
              goto LABEL_123;
            }
          }
          else
          {
            v127 = *v124;
            if (!*v124 && (v85[55] & 0x20) == 0)
              goto LABEL_120;
            if (!v125)
            {
              v156[0] = 0;
LABEL_123:
              if (v127)
                llvm::MetadataTracking::untrack((uint64_t)(v85 + 80), v127);
              v128 = (unsigned __int8 *)v156[0];
              *v124 = (unsigned __int8 *)v156[0];
              if (v128)
                llvm::MetadataTracking::retrack((uint64_t)v156, v128, (uint64_t)(v85 + 80));
              goto LABEL_120;
            }
          }
          llvm::Value::setMetadata(v86, *(_DWORD *)v122, (llvm::MDNode *)v126);
LABEL_120:
          v122 += 16;
        }
        while (v122 != v123);
      }
      v90 = sub_1C58A0068(*(_QWORD **)(a1 + 24), (unsigned __int8 *)v86, (uint64_t)&v164, (llvm::PointerType *)(*(_QWORD *)v169 + 1912), 259, 1);
      v92 = v91;
      v93 = (llvm::GetElementPtrInst *)(*(_QWORD *)v169 + 1912);
      v94 = *(_QWORD **)(a1 + 32);
      v162 = 257;
      v95 = sub_1C48678B0((uint64_t *)&v164, v93, v94, 0xA0u, (uint64_t)&v160);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v164, 194, (llvm::Value *)v90, 259, (llvm::Value *)v95, 259, *(uint64_t **)(a1 + 48), 0, 0, 0, 0, 0);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4))
      {
        v96 = (llvm::GetElementPtrInst *)(*(_QWORD *)v169 + 1912);
        v97 = *(_QWORD **)(a1 + 40);
        v162 = 257;
        v98 = sub_1C48678B0((uint64_t *)&v164, v96, v97, 0xA0u, (uint64_t)&v160);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v164, 194, v92, 259, (llvm::Value *)v98, 259, *(uint64_t **)(a1 + 48), 0, 0, 0, 0, 0);
      }
      if (v164 != v166)
        free(v164);
      if (++v21 == v20)
        return;
    }
    v115 = (char *)v164;
    v116 = (char *)v164 + 16 * v165;
    v117 = (unsigned __int8 **)(v54 + 80);
    while (1)
    {
      v118 = *(_DWORD *)v115;
      v119 = (unsigned __int8 *)*((_QWORD *)v115 + 1);
      if (v119)
      {
        if (!v118)
        {
          v156[0] = *((_QWORD *)v115 + 1);
          llvm::MetadataTracking::track((uint64_t)v156, v119, 2);
          v120 = *v117;
          goto LABEL_108;
        }
      }
      else
      {
        v120 = *v117;
        if (!*v117 && (v54[55] & 0x20) == 0)
          goto LABEL_105;
        if (!v118)
        {
          v156[0] = 0;
LABEL_108:
          if (v120)
            llvm::MetadataTracking::untrack((uint64_t)(v54 + 80), v120);
          v121 = (unsigned __int8 *)v156[0];
          *v117 = (unsigned __int8 *)v156[0];
          if (v121)
            llvm::MetadataTracking::retrack((uint64_t)v156, v121, (uint64_t)(v54 + 80));
          goto LABEL_105;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v55, *(_DWORD *)v115, (llvm::MDNode *)v119);
LABEL_105:
      v115 += 16;
      if (v115 == v116)
        goto LABEL_49;
    }
  }
}

uint64_t sub_1C58A82E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Value **v10;
  uint64_t result;
  char *v12;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Value *v18;
  _QWORD *v19;
  llvm::Value *v20;
  _WORD v21[20];
  _BYTE v22[32];
  __int16 v23;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 **)(v6 + 72);
  v8 = *(_QWORD *)(v6 + 24);
  v23 = 257;
  v9 = sub_1C5098D9C((uint64_t *)a2, v7, v8, (uint64_t)v22);
  v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), a3, 0);
  v21[16] = 257;
  result = (*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 72)
                                                                                                + 16))(*(_QWORD *)(a2 + 72), v9, v10, 0, 0);
  if (!result)
  {
    v23 = 257;
    v12 = (char *)operator new(0x80uLL);
    *((_QWORD *)v12 + 5) = 0;
    v13 = (llvm::Value **)(v12 + 40);
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 8) = *(_QWORD *)v9;
    v14 = (uint64_t)(v12 + 64);
    *((_QWORD *)v12 + 3) = v12 + 64;
    *((_QWORD *)v12 + 7) = v12 + 64;
    *((_QWORD *)v12 + 9) = 0;
    v12[80] = 41;
    v12[81] = 0;
    *((_WORD *)v12 + 41) = 0;
    *((_DWORD *)v12 + 21) = 2;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *((_DWORD *)v12 + 30) = 0;
    *(_QWORD *)v12 = v9;
    v17 = *((_QWORD *)v9 + 1);
    v16 = v9 + 8;
    v15 = v17;
    *((_QWORD *)v12 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v16;
    *v16 = v12;
    *((_QWORD *)v12 + 4) = v10;
    if (v10)
    {
      v20 = v10[1];
      v19 = v10 + 1;
      v18 = v20;
      *v13 = v20;
      if (v20)
        *((_QWORD *)v18 + 2) = v13;
      *((_QWORD *)v12 + 6) = v19;
      *v19 = v12 + 32;
    }
    llvm::Value::setName((uint64_t ***)v12 + 8, (uint64_t)v22);
    return sub_1C4773754((uint64_t *)a2, v14, (uint64_t)v21);
  }
  return result;
}

unsigned __int8 *sub_1C58A8440(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Value **v10;
  unsigned __int8 *v11;
  char *v12;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Value *v18;
  _QWORD *v19;
  llvm::Value *v20;
  uint64_t v21;
  _WORD v23[20];
  _QWORD v24[4];
  __int16 v25;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 **)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 24);
  v25 = 257;
  v9 = sub_1C5098D9C((uint64_t *)a2, v7, v8, (uint64_t)v24);
  v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 16) + 24), a3, 0);
  v23[16] = 257;
  v11 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 72) + 16))(*(_QWORD *)(a2 + 72), v9, v10, 0, 0);
  if (!v11)
  {
    v25 = 257;
    v12 = (char *)operator new(0x80uLL);
    *((_QWORD *)v12 + 5) = 0;
    v13 = (llvm::Value **)(v12 + 40);
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 8) = *(_QWORD *)v9;
    v14 = (uint64_t)(v12 + 64);
    *((_QWORD *)v12 + 3) = v12 + 64;
    *((_QWORD *)v12 + 7) = v12 + 64;
    *((_QWORD *)v12 + 9) = 0;
    v12[80] = 41;
    v12[81] = 0;
    *((_WORD *)v12 + 41) = 0;
    *((_DWORD *)v12 + 21) = 2;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *((_DWORD *)v12 + 30) = 0;
    *(_QWORD *)v12 = v9;
    v17 = *((_QWORD *)v9 + 1);
    v16 = v9 + 8;
    v15 = v17;
    *((_QWORD *)v12 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v16;
    *v16 = v12;
    *((_QWORD *)v12 + 4) = v10;
    if (v10)
    {
      v20 = v10[1];
      v19 = v10 + 1;
      v18 = v20;
      *v13 = v20;
      if (v20)
        *((_QWORD *)v18 + 2) = v13;
      *((_QWORD *)v12 + 6) = v19;
      *v19 = v12 + 32;
    }
    llvm::Value::setName((uint64_t ***)v12 + 8, (uint64_t)v24);
    v11 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a2, v14, (uint64_t)v23);
  }
  v21 = llvm::PointerType::get(*(llvm::PointerType **)(*(_QWORD *)(a1 + 16) + 32), 0);
  v24[0] = "_msarg_va_o";
  v25 = 259;
  return sub_1C4773E38((uint64_t *)a2, 48, v11, v21, (uint64_t)v24);
}

unsigned __int8 *sub_1C58A85DC(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  llvm::Constant *v17;
  llvm::Type *v18;
  llvm::Value **NullValue;
  _QWORD *v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  _DWORD v32[8];
  __int16 v33;

  v10 = *a3;
  v11 = sub_1C58A8918(*a3);
  v12 = sub_1C58A8918(a4);
  if (v11 < 2 || v12 != 1)
  {
    v14 = v12;
    v15 = *(unsigned __int8 *)(a4 + 8);
    if (v15 == 13 && *(_BYTE *)(v10 + 8) == 13
      || (v15 & 0xFE) == 0x12 && (*(_DWORD *)(v10 + 8) & 0xFE) == 0x12 && *(_DWORD *)(a4 + 32) == *(_DWORD *)(v10 + 32))
    {
      v33 = 257;
      return sub_1C4D8D514(a2, (unsigned __int8 *)a3, a4, a5, (uint64_t)v32);
    }
    v20 = *(_QWORD **)(a1[1] + 16);
    v32[0] = v11;
    if ((int)v11 <= 63)
    {
      if ((int)v11 <= 31)
      {
        switch((_DWORD)v11)
        {
          case 0x10:
            v21 = (_QWORD *)(*v20 + 1936);
            goto LABEL_23;
          case 8:
            v21 = (_QWORD *)(*v20 + 1912);
            goto LABEL_23;
          case 1:
            v21 = (_QWORD *)(*v20 + 1888);
            goto LABEL_23;
        }
      }
      else if ((_DWORD)v11 == 32)
      {
        v21 = (_QWORD *)(*v20 + 1960);
        goto LABEL_23;
      }
    }
    else
    {
      if ((_DWORD)v11 == 64)
      {
        v21 = (_QWORD *)(*v20 + 1984);
        goto LABEL_23;
      }
      if ((_DWORD)v11 == 128)
      {
        v21 = (_QWORD *)(*v20 + 2008);
        goto LABEL_23;
      }
    }
    v26 = sub_1C5270984(*v20 + 2168, v32);
    v21 = (_QWORD *)*((_QWORD *)v26 + 1);
    if (!v21)
    {
      v27 = v26;
      v21 = (_QWORD *)sub_1C484358C(*v20 + 2040, 24, 3);
      v28 = v32[0];
      *v21 = v20;
      v21[2] = 0;
      v21[1] = (v28 << 8) | 0xDu;
      *((_QWORD *)v27 + 1) = v21;
    }
LABEL_23:
    v33 = 257;
    v22 = sub_1C4773E38(a2, 49, (unsigned __int8 *)a3, (uint64_t)v21, (uint64_t)v32);
    v23 = *(_QWORD **)(a1[1] + 16);
    v32[0] = v14;
    if (v14 <= 63)
    {
      if (v14 <= 31)
      {
        switch(v14)
        {
          case 16:
            v24 = (_QWORD *)(*v23 + 1936);
            goto LABEL_31;
          case 8:
            v24 = (_QWORD *)(*v23 + 1912);
            goto LABEL_31;
          case 1:
            v24 = (_QWORD *)(*v23 + 1888);
            goto LABEL_31;
        }
      }
      else if (v14 == 32)
      {
        v24 = (_QWORD *)(*v23 + 1960);
        goto LABEL_31;
      }
    }
    else
    {
      if (v14 == 64)
      {
        v24 = (_QWORD *)(*v23 + 1984);
LABEL_31:
        v33 = 257;
        v25 = sub_1C4D8D514(a2, v22, (uint64_t)v24, a5, (uint64_t)v32);
        v33 = 257;
        return sub_1C4773E38(a2, 49, v25, a4, (uint64_t)v32);
      }
      if (v14 == 128)
      {
        v24 = (_QWORD *)(*v23 + 2008);
        goto LABEL_31;
      }
    }
    v29 = sub_1C5270984(*v23 + 2168, v32);
    v24 = (_QWORD *)*((_QWORD *)v29 + 1);
    if (!v24)
    {
      v30 = v29;
      v24 = (_QWORD *)sub_1C484358C(*v23 + 2040, 24, 3);
      v31 = v32[0];
      *v24 = v23;
      v24[2] = 0;
      v24[1] = (v31 << 8) | 0xDu;
      *((_QWORD *)v30 + 1) = v24;
    }
    goto LABEL_31;
  }
  sub_1C58A1544(a1, *a3);
  if (v17)
    NullValue = llvm::Constant::getNullValue(v17, v18);
  else
    NullValue = 0;
  v33 = 257;
  return (unsigned __int8 *)sub_1C4774B48((uint64_t)a2, 33, (uint64_t)a3, (uint64_t)NullValue, (uint64_t)v32);
}

uint64_t sub_1C58A8918(uint64_t a1)
{
  int v1;
  uint64_t result;
  const char *v3;
  int v4;

  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
  {
    v1 = *(_DWORD *)(a1 + 32);
    LODWORD(result) = v1 * llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(a1 + 16));
  }
  else
  {
    LODWORD(result) = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a1);
    if ((_DWORD)v3 == 1)
    {
      v4 = result;
      LODWORD(result) = v4;
    }
  }
  return result;
}

void sub_1C58A898C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  llvm::Type *v5;
  const llvm::APInt *v6;
  llvm::Value **NullValue;
  llvm::ConstantInt *v8;
  unsigned int v9;
  char v10;
  uint64_t *v11;
  llvm::ConstantInt *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v16, a2, 0, 0, 0);
  v4 = sub_1C58A0068(*(_QWORD **)(a1 + 24), *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)v16, (llvm::PointerType *)(*(_QWORD *)v18 + 1912), 259, 1);
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v18 + 1912), v5);
  v8 = *(llvm::ConstantInt **)(*(_QWORD *)v18 + 1984);
  v9 = *(_DWORD *)(*(_QWORD *)v18 + 1992);
  v15 = v9 >> 8;
  if (v9 >> 8 > 0x40)
  {
    v12 = v8;
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, 32, 0);
    v8 = v12;
  }
  else
  {
    if (v9 <= 0xFF)
      v10 = 0;
    else
      v10 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v9);
    v14 = v10 & 0x20;
  }
  v11 = (uint64_t *)llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v14, v6);
  if (v15 >= 0x41 && v14)
  {
    v13 = v11;
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
    v11 = v13;
  }
  llvm::IRBuilderBase::CreateMemSet((uint64_t)v16, (llvm::Value *)v4, (uint64_t)NullValue, v11, 259, 0, 0, 0, 0);
  if (v16[0] != &v17)
    free(v16[0]);
}

void sub_1C58A8B24()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C58A8B48(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  llvm::PointerType *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  __int16 v10;

  v2 = operator new(0x78uLL);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  v3 = *(_QWORD *)a1;
  v4 = **(llvm::PointerType ***)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 16);
  v10 = 261;
  v7 = *v5;
  v6 = v5[1];
  v9[0] = v7;
  v9[1] = v6;
  return llvm::GlobalVariable::GlobalVariable((uint64_t)(v2 + 8), v3, v4, 0, 0, 0, (uint64_t)v9, 0, 3, 0, 0);
}

void sub_1C58A8BD8(uint64_t ****a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  const char *v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t ***v22;
  char *v23;
  uint64_t ***v24;
  unsigned __int8 *v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::APInt *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::ConstantInt *v45;
  unsigned int v46;
  unint64_t v47;
  llvm::ValueHandleBase *v48;
  unsigned __int8 *v49;
  uint64_t ***v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ***v55;
  uint64_t v56;
  _BYTE v57[32];
  __int16 v58;
  unint64_t v59;
  unsigned int v60;
  __int16 v61;
  void *v62[2];
  uint64_t v63;
  uint64_t *v64;
  _QWORD v65[4];
  __int16 v66;
  unsigned __int8 *v67;
  uint64_t *v68;
  __int16 v69;
  _QWORD v70[5];

  v70[4] = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = a3;
  else
    v5 = a2;
  v7 = v5 + 32;
  v6 = *(_QWORD *)(v5 + 32);
  v8 = *(_QWORD *)(v7 + 8) + 40;
  if (v6)
    v9 = v6 == v8;
  else
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = v6 - 24;
  sub_1C4773D54((uint64_t)v62, v10, 0, 0, 0);
  v11 = (uint64_t)((*a1)[5] + 34);
  v12 = *(_QWORD *)(a2 + 64);
  sub_1C4768AD0(v11, v12);
  v14 = (unint64_t)(v13 + 7) >> 3;
  v16 = v15 == 1;
  llvm::DataLayout::getAlignment(v11, v12);
  v19 = ((1 << v18) + v14 - 1) & -(1 << v18);
  if (v16)
  v20 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt *)a1[1][3], v19, 0);
  if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)a2))
  {
    v21 = *(_QWORD *)(a2 - 32);
    v61 = 257;
    v20 = (uint64_t *)sub_1C4EC4040((uint64_t)v62, (uint64_t)v20, v21, (uint64_t)&v59, 0, 0);
  }
  v22 = a1[1];
  if (*(_BYTE *)v22)
  {
    v23 = sub_1C58B2BBC(a1, (uint64_t ***)a2);
    v24 = a1[1];
    if (*((_BYTE *)a1 + 458))
    {
      v25 = (unsigned __int8 *)v23;
      v26 = v24[48];
      v27 = (uint64_t)v24[49];
      v28 = llvm::PointerType::get((llvm::PointerType *)(*v64 + 1912), 0);
      v61 = 257;
      v65[0] = sub_1C5098D9C((uint64_t *)v62, (unsigned __int8 *)a2, v28, (uint64_t)&v59);
      v65[1] = v20;
      v29 = llvm::PointerType::get((llvm::PointerType *)(*v64 + 1912), 0);
      v58 = 257;
      v65[2] = sub_1C5098D9C((uint64_t *)v62, v25, v29, (uint64_t)v57);
      v69 = 257;
      v30 = v65;
      v31 = &v67;
      v32 = v26;
      v33 = v27;
      v34 = 3;
    }
    else
    {
      v38 = v24[50];
      v39 = (uint64_t)v24[51];
      v40 = llvm::PointerType::get((llvm::PointerType *)(*v64 + 1912), 0);
      v61 = 257;
      v67 = sub_1C5098D9C((uint64_t *)v62, (unsigned __int8 *)a2, v40, (uint64_t)&v59);
      v68 = v20;
      v58 = 257;
      v30 = (uint64_t *)&v67;
      v31 = (unsigned __int8 **)v57;
      v32 = v38;
      v33 = v39;
      v34 = 2;
    }
    goto LABEL_34;
  }
  if (*((_BYTE *)a1 + 458) && byte_1ED813BB0)
  {
    v35 = v22[33];
    v36 = (uint64_t)v22[34];
    v37 = llvm::PointerType::get((llvm::PointerType *)(*v64 + 1912), 0);
    v61 = 257;
    v67 = sub_1C5098D9C((uint64_t *)v62, (unsigned __int8 *)a2, v37, (uint64_t)&v59);
    v68 = v20;
    v58 = 257;
    sub_1C4774778((uint64_t *)v62, v35, v36, (uint64_t *)&v67, 2, (uint64_t)v57, 0);
  }
  else
  {
    v42 = sub_1C58A0068(a1, (unsigned __int8 *)a2, (uint64_t)v62, (llvm::PointerType *)(*v64 + 1912), 256, 1);
    v43 = *v64;
    if (*((_BYTE *)a1 + 458))
      v44 = dword_1ED813C70;
    else
      v44 = 0;
    v45 = *(llvm::ConstantInt **)(v43 + 1912);
    v46 = *(_DWORD *)(v43 + 1920);
    v60 = v46 >> 8;
    if (v46 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v59, v44, 0);
    }
    else
    {
      if (v46 <= 0xFF)
        v47 = 0;
      else
        v47 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
      v59 = v47 & v44;
    }
    v48 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v59, v41);
    if (v60 >= 0x41 && v59)
      MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    llvm::IRBuilderBase::CreateMemSet((uint64_t)v62, (llvm::Value *)v42, (uint64_t)v48, v20, *(_WORD *)(a2 + 18) & 0x3F | 0x100, 0, 0, 0, 0);
  }
  if (*((_BYTE *)a1 + 458) && *((_DWORD *)a1[1] + 1))
  {
    v49 = (unsigned __int8 *)sub_1C58B2BBC(a1, (uint64_t ***)a2);
    v50 = a1[1];
    v51 = v50[31];
    v52 = (uint64_t)v50[32];
    v53 = llvm::PointerType::get((llvm::PointerType *)(*v64 + 1912), 0);
    v61 = 257;
    v70[0] = sub_1C5098D9C((uint64_t *)v62, (unsigned __int8 *)a2, v53, (uint64_t)&v59);
    v70[1] = v20;
    v54 = llvm::PointerType::get((llvm::PointerType *)(*v64 + 1912), 0);
    v58 = 257;
    v70[2] = sub_1C5098D9C((uint64_t *)v62, v49, v54, (uint64_t)v57);
    v55 = *a1;
    v56 = (uint64_t)a1[1][3];
    v69 = 257;
    v70[3] = sub_1C5098D9C((uint64_t *)v62, (unsigned __int8 *)v55, v56, (uint64_t)&v67);
    v66 = 257;
    v30 = v70;
    v31 = (unsigned __int8 **)v65;
    v32 = v51;
    v33 = v52;
    v34 = 4;
LABEL_34:
    sub_1C4774778((uint64_t *)v62, v32, v33, v30, v34, (uint64_t)v31, 0);
  }
  if (v62[0] != &v63)
    free(v62[0]);
}

uint64_t sub_1C58A908C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = result;
  if (!*(_QWORD *)(a2 + 48) && (*(_BYTE *)(a2 + 23) & 0x20) == 0
    || (result = llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "nosanitize", 0xAuLL)) == 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v5 = *(_QWORD *)(v3 + 448);
    if (v4 != *(_QWORD *)(v5 + 40))
      goto LABEL_6;
    if (v5 != a2)
    {
      v6 = *(__int16 *)(v4 + 18);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 48);
        if (v7 != v4 + 40)
        {
          v8 = 0;
          do
          {
            v9 = v7 - 24;
            if (!v7)
              v9 = 0;
            *(_DWORD *)(v9 + 56) = v8++;
            v7 = *(_QWORD *)(v7 + 8);
          }
          while (v7 != v4 + 40);
        }
        *(_WORD *)(v4 + 18) = v6 | 0x8000;
      }
      if (*(_DWORD *)(a2 + 56) >= *(_DWORD *)(v5 + 56))
LABEL_6:
        __asm { BR              X11 }
    }
  }
  return result;
}

unsigned __int8 *sub_1C58AB2A0(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v4;
  llvm::PointerType *v5;
  uint64_t v6;
  const char *v8;
  __int16 v9;

  v4 = *(unsigned __int8 **)(a1[1] + 56);
  sub_1C58A1544(a1, a2);
  v6 = llvm::PointerType::get(v5, 0);
  v8 = "_msret";
  v9 = 259;
  return sub_1C5098D9C(a3, v4, v6, (uint64_t)&v8);
}

double sub_1C58AB300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  llvm::Value **v7;
  double result;
  uint64_t v9;
  llvm::Value **v10;
  llvm::Value **v11;

  v6 = byte_1ED8143F0;
  v7 = sub_1C58A06BC(a1, a2);
  v9 = (uint64_t)v7;
  if (v6)
  {
    if (v7)
    {
      v10 = sub_1C58A11D4(a1, a2);
LABEL_4:
      *(_QWORD *)&result = sub_1C58AB3B4(a1, v9, (uint64_t)v10, a3).n128_u64[0];
    }
  }
  else if (v7 && *((unsigned __int8 *)v7 + 16) >= 0x1Cu)
  {
    v11 = sub_1C58A11D4(a1, a2);
    if (v11)
    {
      if (*((unsigned __int8 *)v11 + 16) <= 0x1Bu)
        v10 = 0;
      else
        v10 = v11;
    }
    else
    {
      v10 = 0;
    }
    goto LABEL_4;
  }
  return result;
}

__n128 sub_1C58AB3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  __n128 *v8;
  __n128 result;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  _QWORD v14[3];

  if (*(_BYTE *)(a1 + 456))
  {
    v14[0] = a2;
    v14[1] = a3;
    v14[2] = a4;
    v5 = *(unsigned int *)(a1 + 472);
    v6 = *(_QWORD *)(a1 + 464);
    v7 = (__n128 *)v14;
    if (v5 >= *(_DWORD *)(a1 + 476))
    {
      v10 = a1 + 464;
      v11 = v5 + 1;
      v12 = v6 + 24 * v5 > (unint64_t)v14;
      if (v6 <= (unint64_t)v14 && v12)
      {
        v13 = (char *)v14 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, a1 + 480, v11, 24);
        v6 = *(_QWORD *)(a1 + 464);
        v7 = (__n128 *)&v13[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, a1 + 480, v11, 24);
        v6 = *(_QWORD *)(a1 + 464);
        v7 = (__n128 *)v14;
      }
    }
    v8 = (__n128 *)(v6 + 24 * *(unsigned int *)(a1 + 472));
    result = *v7;
    v8[1].n128_u64[0] = v7[1].n128_u64[0];
    *v8 = result;
    ++*(_DWORD *)(a1 + 472);
  }
  return result;
}

_QWORD *sub_1C58AB484(llvm *a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  _BYTE *v18;
  const char *OpcodeName;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t ***v22;
  const char *v23;
  size_t v24;
  size_t v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  llvm::Constant *v38;
  llvm::Type *v39;
  llvm::Value **NullValue;
  llvm::Type *v41;
  _QWORD *result;
  _QWORD *v43;

  if (!byte_1ED8141B0)
    goto LABEL_34;
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = (llvm::raw_ostream *)llvm::errs(a1);
  v6 = v5;
  v7 = *((_QWORD *)v5 + 4);
  v8 = *((_QWORD *)v5 + 3) - v7;
  if (v4 != 84)
  {
    if (v8 > 3)
    {
      *(_DWORD *)v7 = 542792282;
      v18 = (_BYTE *)(*((_QWORD *)v5 + 4) + 4);
      *((_QWORD *)v5 + 4) = v18;
    }
    else
    {
      llvm::raw_ostream::write(v5, "ZZZ ", 4uLL);
      v18 = (_BYTE *)*((_QWORD *)v6 + 4);
    }
    OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
    v20 = (_BYTE *)strlen(OpcodeName);
    v21 = v20;
    if ((unint64_t)v20 <= *((_QWORD *)v6 + 3) - (_QWORD)v18)
    {
      if (v20)
      {
        v20 = memcpy(v18, OpcodeName, (size_t)v20);
        v18 = &v21[*((_QWORD *)v6 + 4)];
        *((_QWORD *)v6 + 4) = v18;
      }
    }
    else
    {
      v20 = llvm::raw_ostream::write(v6, OpcodeName, (size_t)v20);
      v18 = (_BYTE *)*((_QWORD *)v6 + 4);
    }
    if (*((_BYTE **)v6 + 3) == v18)
      goto LABEL_29;
    *v18 = 10;
LABEL_65:
    ++*((_QWORD *)v6 + 4);
    goto LABEL_30;
  }
  if (v8 > 8)
  {
    *(_BYTE *)(v7 + 8) = 32;
    *(_QWORD *)v7 = *(_QWORD *)"ZZZ call ";
    *((_QWORD *)v5 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v5, "ZZZ call ", 9uLL);
  }
  v9 = *(uint64_t ****)(a2 - 32);
  if (!v9 || *((_BYTE *)v9 + 16) || v9[3] != *(uint64_t ***)(a2 + 72))
    v9 = 0;
  if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
    goto LABEL_25;
  v10 = ***v9;
  v11 = *(_QWORD *)(v10 + 152);
  v12 = *(unsigned int *)(v10 + 168);
  if ((_DWORD)v12)
  {
    LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    v14 = (uint64_t ****)(v11 + 16 * v13);
    v15 = *v14;
    if (*v14 == v9)
      goto LABEL_23;
    v16 = 1;
    while (v15 != (uint64_t ***)-4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(uint64_t ****)(v11 + 16 * v13);
      if (v15 == v9)
      {
        v14 = (uint64_t ****)(v11 + 16 * v13);
        goto LABEL_23;
      }
    }
  }
  v14 = (uint64_t ****)(v11 + 16 * v12);
LABEL_23:
  v22 = v14[1];
  v25 = (size_t)*v22;
  v23 = (const char *)(v22 + 2);
  v24 = v25;
  v20 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (v25 > *((_QWORD *)v6 + 3) - (_QWORD)v20)
  {
    llvm::raw_ostream::write(v6, v23, v24);
LABEL_25:
    v20 = (_BYTE *)*((_QWORD *)v6 + 4);
    goto LABEL_28;
  }
  if (v24)
  {
    memcpy(v20, v23, v24);
    v20 = (_BYTE *)(*((_QWORD *)v6 + 4) + v24);
    *((_QWORD *)v6 + 4) = v20;
  }
LABEL_28:
  if (*((_BYTE **)v6 + 3) != v20)
  {
    *v20 = 10;
    goto LABEL_65;
  }
LABEL_29:
  v20 = llvm::raw_ostream::write(v6, "\n", 1uLL);
LABEL_30:
  v26 = (llvm::raw_ostream *)llvm::errs((llvm *)v20);
  v27 = v26;
  v28 = (_DWORD *)*((_QWORD *)v26 + 4);
  if (*((_QWORD *)v26 + 3) - (_QWORD)v28 > 3uLL)
  {
    *v28 = 542200145;
    *((_QWORD *)v26 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v26, "QQQ ", 4uLL);
  }
  llvm::Value::print((llvm::Value *)a2, v27, 0);
  v29 = (_BYTE *)*((_QWORD *)v27 + 4);
  if (*((_BYTE **)v27 + 3) == v29)
  {
    llvm::raw_ostream::write(v27, "\n", 1uLL);
  }
  else
  {
    *v29 = 10;
    ++*((_QWORD *)v27 + 4);
  }
LABEL_34:
  v30 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = 32 * v30;
    while (1)
    {
      v33 = *(_DWORD *)(a2 + 20);
      if ((v33 & 0x40000000) != 0)
        v34 = *(_QWORD *)(a2 - 8);
      else
        v34 = a2 - 32 * (v33 & 0x7FFFFFF);
      v35 = *(uint64_t **)(v34 + v31);
      v36 = *(unsigned __int8 *)(*v35 + 8);
      if (v36 > 0x11)
        goto LABEL_45;
      if (((1 << v36) & 0xAC7F) == 0)
        break;
LABEL_41:
      sub_1C58AB300((uint64_t)a1, (uint64_t)v35, a2);
LABEL_42:
      v31 += 32;
      if (v32 == v31)
        goto LABEL_52;
    }
    if (((1 << v36) & 0x30000) == 0)
    {
LABEL_45:
      if ((v36 & 0xFE) != 0x12 && v36 != 21)
        goto LABEL_42;
    }
    if (!llvm::Type::isSizedDerivedType(*v35, 0))
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_52:
  sub_1C58A1544(a1, *(_QWORD *)a2);
  if (v38)
    NullValue = llvm::Constant::getNullValue(v38, v39);
  else
    NullValue = 0;
  sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, NullValue);
  result = llvm::Constant::getNullValue(*(llvm::Constant **)(*((_QWORD *)a1 + 1) + 32), v41);
  if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 4))
  {
    v43 = result;
    result = sub_1C62AD7D0((unint64_t)a1 + 368, a2);
    *result = v43;
  }
  return result;
}

unint64_t *sub_1C58AB878(uint64_t a1, uint64_t *a2, llvm::Value **NullValue)
{
  llvm::Constant *v6;
  llvm::Type *v7;
  unint64_t *result;

  if (!*(_BYTE *)(a1 + 457))
  {
    sub_1C58A1544((_QWORD *)a1, *a2);
    if (v6)
      NullValue = llvm::Constant::getNullValue(v6, v7);
    else
      NullValue = 0;
  }
  result = sub_1C62AD7D0(a1 + 304, (uint64_t)a2);
  *result = (unint64_t)NullValue;
  return result;
}

void sub_1C58AB8DC(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  llvm *v8;
  _DWORD *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::ConstantAggregateZero *v14;
  llvm::Value **v15;
  unsigned __int8 *v16;
  _DWORD *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 ***v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  _DWORD *v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  llvm::ConstantAggregateZero *v32;
  llvm::Value **Impl;
  unsigned __int8 *v34;
  _DWORD *v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 ***v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  llvm::Value *v43;
  llvm::Constant *v44;
  llvm::Type *v45;
  llvm::Value **v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int *v57;
  int v58;
  void *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned __int8 *v67;
  uint64_t ParamElementType;
  uint64_t v69;
  unsigned int v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  llvm::Value **v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t v79;
  llvm::Constant *v81;
  llvm::Type *v82;
  llvm::Value **NullValue;
  llvm::Type *v84;
  llvm::Value **v85;
  _QWORD ***v86;
  llvm::raw_ostream *v87;
  void *v88;
  int v89;
  uint64_t ***v90;
  int v91;
  int v92;
  uint64_t **v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  int HasAttr;
  int v105;
  llvm::Value **v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  const char *v114;
  char v115;
  char v116;
  unint64_t v117;
  char v118;
  char *v119;
  char *v120;
  unsigned __int8 **v121;
  llvm::Value *v122;
  _QWORD *v123;
  llvm::Value *v124;
  uint64_t v125;
  unsigned __int8 ***v126;
  uint64_t v127;
  llvm::Constant *v128;
  uint64_t *v129;
  unsigned __int8 *v130;
  char v131;
  char v132;
  char *v133;
  char *v134;
  unsigned __int8 **v135;
  llvm::Value *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 ***v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 **v145;
  int v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  BOOL v154;
  char v155;
  const char *v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  BOOL v162;
  const char *v163;
  char v164;
  char v165;
  __int16 ParamAlignment;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 *v170;
  llvm::Type *v171;
  const llvm::APInt *v172;
  llvm::Value *v173;
  llvm::Value *v174;
  llvm::ConstantInt *v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t *v178;
  const llvm::APInt *v179;
  unsigned __int8 *v180;
  __int16 v181;
  uint64_t v182;
  llvm::ConstantInt *v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t *v186;
  const llvm::APInt *v187;
  llvm::Value **v188;
  llvm::ConstantInt *v189;
  unsigned int v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 **v195;
  int v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  unsigned __int8 **v199;
  unsigned __int8 *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  llvm::Constant *v204;
  llvm::Type *v205;
  llvm::Value **v206;
  unsigned __int8 *v207;
  llvm::Constant *v208;
  llvm::Type *v209;
  llvm::Value **v210;
  char v211;
  char *v212;
  char *v213;
  unsigned __int8 **v214;
  llvm::Value *v215;
  llvm::Value *v216;
  _QWORD *v217;
  llvm::Value *v218;
  uint64_t v219;
  unsigned __int8 ***v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int8 *v227;
  char v228;
  char *v229;
  char *v230;
  llvm::Value **v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  char v239;
  char *v240;
  char *v241;
  llvm::Value *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  llvm::BasicBlock *v246;
  _QWORD *i;
  _QWORD *v248;
  llvm::Constant *v249;
  llvm::Type *v250;
  llvm::Value **v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t ****v256;
  uint64_t ***v257;
  int v258;
  int v259;
  llvm::Type *v261;
  llvm::Value **v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  BOOL v270;
  uint64_t v271;
  unsigned __int8 *v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 *v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  char *v280;
  char *v281;
  llvm::Value *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t **v288;
  uint64_t v289;
  llvm::Type *v290;
  llvm::Value **v291;
  char *v292;
  char *v293;
  unsigned __int8 **v294;
  int v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  char *v299;
  char *v300;
  unsigned __int8 **v301;
  int v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  unsigned __int8 *v305;
  uint64_t ***v306;
  _BOOL4 v307;
  uint64_t **v308;
  uint64_t **v309;
  uint64_t v310;
  uint64_t v313;
  uint64_t v314;
  unsigned __int8 **v315;
  int v316;
  unsigned __int8 *v317;
  unsigned __int8 *v318;
  unsigned __int8 *v319;
  uint64_t v320;
  uint64_t v321;
  unsigned __int8 **v322;
  int v323;
  unsigned __int8 *v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned __int8 **v330;
  unsigned __int8 **v331;
  unsigned __int8 **v332;
  unint64_t v333;
  int v334;
  uint64_t v335;
  int v337;
  _QWORD v338[4];
  __int16 v339;
  unsigned __int8 *v340;
  void *v341;
  llvm::Value **v342;
  uint64_t v343;
  __int16 v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  __int128 v348;
  _QWORD v349[2];
  __int16 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  _QWORD **v356;
  _QWORD *v357[3];
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362[4];
  __int16 v363;
  uint64_t v364;

  v3 = (_QWORD *)a1;
  v364 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*((_QWORD *)a2 - 4) + 16) == 24)
  {
    if (!byte_1ED814030 || !**(_BYTE **)(a1 + 8))
    {
      sub_1C58AB484((llvm *)a1, (uint64_t)a2);
      return;
    }
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    sub_1C4773D54((uint64_t)&v355, (uint64_t)a2, 0, 0, 0);
    v5 = *((_QWORD *)a2 - 4);
    v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
    if (v6 == 7)
    {
      v7 = 0;
    }
    else if (v6 == 16)
    {
      v7 = *(_DWORD *)(*(_QWORD *)a2 + 12);
    }
    else
    {
      v7 = 1;
    }
    v49 = *(char **)(v5 + 48);
    v47 = v5 + 48;
    v48 = v49;
    v50 = *(_BYTE *)(v47 + 23);
    if (v50 >= 0)
      v51 = (char *)v47;
    else
      v51 = v48;
    v52 = *(_QWORD *)(v47 + 8);
    if (v50 >= 0)
      v53 = v50 & 0x7F;
    else
      v53 = v52;
    llvm::InlineAsm::ParseConstraints(v51, v53, (uint64_t *)&v348);
    v55 = *((_QWORD *)&v348 + 1);
    v54 = v348;
    if ((_QWORD)v348 == *((_QWORD *)&v348 + 1))
    {
      v56 = 0;
      v59 = (void *)v348;
      if (!(_QWORD)v348)
      {
LABEL_54:
        v60 = (v56 - v7);
        v61 = (a2[5] & 0x7FFFFFF) - 1;
        if ((int)v60 < v61)
        {
          v62 = v60;
          do
          {
            v63 = *(_QWORD *)&a2[8 * v62 + -8 * (a2[5] & 0x7FFFFFF)];
            llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a2 + 16), v62);
            sub_1C58AB300(a1, v63, (uint64_t)a2);
            ++v62;
          }
          while (v61 != v62);
        }
        if ((int)v60 >= 1)
        {
          v64 = 0;
          v65 = v4 + 272;
          v66 = a2;
          do
          {
            v67 = *(unsigned __int8 **)&v66[-8 * (a2[5] & 0x7FFFFFF)];
            ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a2 + 16), v64);
            v69 = *(_QWORD *)v67;
            sub_1C58AB300(a1, (uint64_t)v67, (uint64_t)a2);
            if (*(_BYTE *)(v69 + 8) == 15)
            {
              v70 = *(unsigned __int8 *)(ParamElementType + 8);
              if (v70 <= 0x11)
              {
                if (((1 << v70) & 0xAC7F) != 0)
                  goto LABEL_62;
                if (((1 << v70) & 0x30000) != 0)
                  goto LABEL_411;
              }
              if ((v70 & 0xFE) == 0x12 || v70 == 21)
              {
LABEL_411:
                if (llvm::Type::isSizedDerivedType(ParamElementType, 0))
                {
LABEL_62:
                  sub_1C4768AD0(v65, ParamElementType);
                  v73 = v72;
                  if ((_DWORD)v71 == 1)
                  v74 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v360 + 1912), 0);
                  v350 = 257;
                  v75 = sub_1C5098D9C((uint64_t *)&v355, v67, v74, (uint64_t)&v348);
                  v76 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 8) + 24), ((v73 << 29) + 3758096384) >> 32, 0);
                  v77 = *(_QWORD *)(a1 + 8);
                  v78 = *(uint64_t ***)(v77 + 576);
                  v79 = *(_QWORD *)(v77 + 584);
                  v341 = v75;
                  v342 = v76;
                  v350 = 257;
                  sub_1C4774778((uint64_t *)&v355, v78, v79, (uint64_t *)&v341, 2, (uint64_t)&v348, 0);
                }
              }
            }
            ++v64;
            v66 += 8;
          }
          while (v60 != v64);
        }
        sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
        if (v81)
          NullValue = llvm::Constant::getNullValue(v81, v82);
        else
          NullValue = 0;
        sub_1C58AB878(a1, (uint64_t *)a2, NullValue);
        v85 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 32), v84);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
          *sub_1C62AD7D0(a1 + 368, (uint64_t)a2) = (unint64_t)v85;
        v86 = (_QWORD ***)v355;
        goto LABEL_289;
      }
    }
    else
    {
      v56 = 0;
      v57 = (int *)v348;
      do
      {
        v58 = *v57;
        v57 += 20;
        if (v58 == 1)
          ++v56;
      }
      while (v57 != *((int **)&v348 + 1));
      if (!(_QWORD)v348)
        goto LABEL_54;
      do
      {
        v341 = (void *)(v55 - 32);
        sub_1C50107D8((void ***)&v341);
        v341 = (void *)(v55 - 64);
        sub_1C4765410((void ***)&v341);
        v55 -= 80;
      }
      while (v55 != v54);
      v59 = (void *)v348;
    }
    *((_QWORD *)&v348 + 1) = v54;
    operator delete(v59);
    goto LABEL_54;
  }
  v337 = 0;
  v8 = (llvm *)sub_1C4ECD910(*(uint64_t **)(a1 + 440), (uint64_t)a2, &v337);
  if ((_DWORD)v8)
  {
    if (v337 == 70)
    {
      sub_1C4773D54((uint64_t)&v355, (uint64_t)a2, 0, 0, 0);
      v28 = &a2[-8 * (a2[5] & 0x7FFFFFF)];
      v29 = *(uint64_t **)v28;
      v30 = (unsigned __int8 *)*((_QWORD *)v28 + 8);
      v31 = *((_QWORD *)v28 + 12);
      v348 = xmmword_1C8662280;
      v349[0] = 0x500000004;
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v360 + 1960), (llvm::Type *)6);
      Impl = llvm::ConstantDataSequential::getImpl(&v348, (llvm::Type *)0x18, v32);
      v350 = 257;
      v34 = sub_1C4772EE0((uint64_t *)&v355, (uint64_t)Impl, v31, (uint64_t)&v348);
      v35 = &a2[-8 * (a2[5] & 0x7FFFFFF)];
      v36 = (unsigned __int8 **)(v35 + 24);
      if (*((_QWORD *)v35 + 12))
      {
        **((_QWORD **)v35 + 14) = *((_QWORD *)v35 + 13);
        v37 = *((_QWORD *)v35 + 13);
        if (v37)
          *(_QWORD *)(v37 + 16) = *((_QWORD *)v35 + 14);
      }
      *v36 = v34;
      if (v34)
      {
        v40 = *((_QWORD *)v34 + 1);
        v38 = (unsigned __int8 ***)(v34 + 8);
        v39 = v40;
        *((_QWORD *)v35 + 13) = v40;
        if (v40)
          *(_QWORD *)(v39 + 16) = v35 + 26;
        *((_QWORD *)v35 + 14) = v38;
        *v38 = v36;
      }
      v41 = sub_1C58A0068(v3, v30, (uint64_t)&v355, (llvm::PointerType *)(*(_QWORD *)v360 + 1912), 256, 1);
      v42 = v3;
      v43 = (llvm::Value *)v41;
      sub_1C58A1544(v42, *(_QWORD *)v360 + 1912);
      if (v44)
        v46 = llvm::Constant::getNullValue(v44, v45);
      else
        v46 = 0;
      llvm::IRBuilderBase::CreateMemSet((uint64_t)&v355, v43, (uint64_t)v46, v29, 256, 0, 0, 0, 0);
      v86 = (_QWORD ***)v355;
      goto LABEL_289;
    }
    if (v337 == 69)
    {
      if (*((_BYTE *)a2 + 16) == 84)
      {
        sub_1C4773D54((uint64_t)&v355, (uint64_t)a2, 0, 0, 0);
        v9 = &a2[-8 * (a2[5] & 0x7FFFFFF)];
        v10 = *(uint64_t **)v9;
        v11 = (unsigned __int8 *)*((_QWORD *)v9 + 4);
        v12 = (unsigned __int8 *)*((_QWORD *)v9 + 8);
        v13 = *((_QWORD *)v9 + 12);
        v348 = xmmword_1C8662290;
        v349[0] = 0x500000004;
        llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v360 + 1960), (llvm::Type *)6);
        v15 = llvm::ConstantDataSequential::getImpl(&v348, (llvm::Type *)0x18, v14);
        v350 = 257;
        v16 = sub_1C4772EE0((uint64_t *)&v355, (uint64_t)v15, v13, (uint64_t)&v348);
        v17 = &a2[-8 * (a2[5] & 0x7FFFFFF)];
        v18 = (unsigned __int8 **)(v17 + 24);
        if (*((_QWORD *)v17 + 12))
        {
          **((_QWORD **)v17 + 14) = *((_QWORD *)v17 + 13);
          v19 = *((_QWORD *)v17 + 13);
          if (v19)
            *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 14);
        }
        *v18 = v16;
        if (v16)
        {
          v22 = *((_QWORD *)v16 + 1);
          v20 = (unsigned __int8 ***)(v16 + 8);
          v21 = v22;
          *((_QWORD *)v17 + 13) = v22;
          if (v22)
            *(_QWORD *)(v21 + 16) = v17 + 26;
          *((_QWORD *)v17 + 14) = v20;
          *v20 = v18;
        }
        v23 = *((_QWORD *)a2 + 4);
        if (v23)
          v24 = v23 == *((_QWORD *)a2 + 5) + 40;
        else
          v24 = 1;
        if (v24)
          v25 = 0;
        else
          v25 = v23 - 24;
        sub_1C4773D54((uint64_t)&v348, v25, 0, 0, 0);
        v26 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
        v340 = v26;
        if (v26)
        {
          llvm::MetadataTracking::track((uint64_t)&v340, v26, 2);
          v27 = v340;
        }
        else
        {
          v27 = 0;
        }
        sub_1C4774EF4((uint64_t)&v348, 0, (uint64_t)v27);
        if (v340)
          llvm::MetadataTracking::untrack((uint64_t)&v340, v340);
        v273 = sub_1C58A0068(v3, v11, (uint64_t)&v348, (llvm::PointerType *)(*(_QWORD *)v353 + 1912), 256, 0);
        v275 = v274;
        v276 = sub_1C58A0068((_QWORD *)a1, v12, (uint64_t)&v348, (llvm::PointerType *)(*(_QWORD *)v353 + 1912), 256, 1);
        llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v348, 194, (llvm::Value *)v276, 256, (llvm::Value *)v273, 256, v10, 0, 0, 0, 0, 0);
        v277 = *(_QWORD *)(a1 + 8);
        if (!*(_DWORD *)(v277 + 4))
          goto LABEL_317;
        v278 = *(_QWORD *)(v277 + 32);
        v279 = word_1ED813A68;
        v363 = 257;
        v280 = (char *)operator new(0x60uLL);
        v281 = v280;
        v282 = (llvm::Value *)(v280 + 32);
        *((_QWORD *)v280 + 2) = 0;
        *((_QWORD *)v280 + 3) = v280 + 32;
        v344 = 257;
        *((_QWORD *)v280 + 4) = v278;
        *((_QWORD *)v280 + 5) = 0;
        *((_WORD *)v280 + 24) = 60;
        *((_DWORD *)v280 + 13) = 1;
        *(_OWORD *)(v280 + 56) = 0u;
        *(_OWORD *)(v280 + 72) = 0u;
        *((_DWORD *)v280 + 22) = 0;
        *(_QWORD *)v280 = v275;
        *((_QWORD *)v280 + 1) = 0;
        if (v275)
        {
          v285 = *(_QWORD *)(v275 + 8);
          v284 = (_QWORD *)(v275 + 8);
          v283 = v285;
          *((_QWORD *)v280 + 1) = v285;
          if (v285)
            *(_QWORD *)(v283 + 16) = v280 + 8;
          *((_QWORD *)v280 + 2) = v284;
          *v284 = v280;
        }
        *((_WORD *)v280 + 25) = 2 * (v279 & 0x3F);
        v280[92] = 1;
        llvm::Value::setName((uint64_t ***)v280 + 4, (uint64_t)&v341);
        (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v354 + 16))(v354, v282, v362, v351, v352);
        if (!DWORD2(v348))
        {
LABEL_316:
          v286 = sub_1C58AD678(*(_QWORD *)(a1 + 8), (uint64_t)v282, (uint64_t *)&v348);
          v287 = *(_QWORD *)(a1 + 8);
          v288 = *(uint64_t ***)(v287 + 296);
          v289 = *(_QWORD *)(v287 + 304);
          v362[0] = (uint64_t)v12;
          v362[1] = (uint64_t)v10;
          v362[2] = v286;
          v344 = 257;
          sub_1C4774778((uint64_t *)&v348, v288, v289, v362, 3, (uint64_t)&v341, 0);
LABEL_317:
          if ((_QWORD *)v348 != v349)
            free((void *)v348);
          v86 = (_QWORD ***)v355;
          goto LABEL_289;
        }
        v320 = v348;
        v321 = v348 + 16 * DWORD2(v348);
        v322 = (unsigned __int8 **)(v281 + 80);
        while (1)
        {
          v323 = *(_DWORD *)v320;
          v324 = *(unsigned __int8 **)(v320 + 8);
          if (v324)
          {
            if (!v323)
            {
              v338[0] = *(_QWORD *)(v320 + 8);
              llvm::MetadataTracking::track((uint64_t)v338, v324, 2);
              v325 = *v322;
              goto LABEL_395;
            }
          }
          else
          {
            v325 = *v322;
            if (!*v322 && (v281[55] & 0x20) == 0)
              goto LABEL_392;
            if (!v323)
            {
              v338[0] = 0;
LABEL_395:
              if (v325)
                llvm::MetadataTracking::untrack((uint64_t)(v281 + 80), v325);
              v326 = (unsigned __int8 *)v338[0];
              *v322 = (unsigned __int8 *)v338[0];
              if (v326)
                llvm::MetadataTracking::retrack((uint64_t)v338, v326, (uint64_t)(v281 + 80));
              goto LABEL_392;
            }
          }
          llvm::Value::setMetadata(v282, *(_DWORD *)v320, (llvm::MDNode *)v324);
LABEL_392:
          v320 += 16;
          if (v320 == v321)
            goto LABEL_316;
        }
      }
      v87 = (llvm::raw_ostream *)llvm::errs(v8);
      v88 = (void *)*((_QWORD *)v87 + 4);
      if (*((_QWORD *)v87 + 3) - (_QWORD)v88 > 0x3CuLL)
      {
        qmemcpy(v88, "MSAN -- cannot instrument invoke of libatomic load.Ignoring!\n", 61);
        *((_QWORD *)v87 + 4) += 61;
      }
      else
      {
        llvm::raw_ostream::write(v87, "MSAN -- cannot instrument invoke of libatomic load.Ignoring!\n", 0x3DuLL);
      }
    }
  }
  if (*((_BYTE *)a2 + 16) == 84)
  {
    v263 = 0;
    v357[0] = 0;
    v357[1] = 0;
    v356 = v357;
    v355 = xmmword_1C8662270;
    v264 = **(uint64_t ***)a2;
    v265 = *((_QWORD *)a2 + 8);
    if (v265)
    {
      if (*(_DWORD *)(v265 + 8))
        v263 = *(_QWORD *)(v265 + 40);
      else
        v263 = 0;
    }
    *(_QWORD *)&v348 = v263;
    v266 = llvm::AttributeSet::removeAttributes((uint64_t *)&v348, v264, (uint64_t)&v355);
    if (v263 == v266)
      v267 = *((_QWORD *)a2 + 8);
    else
      v267 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)a2 + 8, v264, -1, v266);
    v3 = (_QWORD *)a1;
    *((_QWORD *)a2 + 8) = v267;
    v268 = *((_QWORD *)a2 - 4);
    if (v268 && !*(_BYTE *)(v268 + 16) && *(_QWORD *)(v268 + 24) == *((_QWORD *)a2 + 9))
      llvm::Function::removeFnAttrs(v268, (uint64_t)&v355);
    llvm::maybeMarkSanitizerLibraryCallNoBuiltin((uint64_t)a2, *(_QWORD **)(a1 + 440));
    sub_1C5010E9C((uint64_t)&v356, v357[0]);
  }
  sub_1C4773D54((uint64_t)&v355, (uint64_t)a2, 0, 0, 0);
  v89 = *(unsigned __int8 *)(v3[1] + 9);
  v90 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v90 || *((_BYTE *)v90 + 16) || v90[3] != *((uint64_t ***)a2 + 9))
  {
    v91 = v89 != 0;
    goto LABEL_89;
  }
  if ((*((_BYTE *)v90 + 23) & 0x10) == 0)
    goto LABEL_355;
  v252 = ***v90;
  v253 = *(_QWORD *)(v252 + 152);
  v254 = *(unsigned int *)(v252 + 168);
  if ((_DWORD)v254)
  {
    LODWORD(v255) = (v254 - 1) & ((v90 >> 4) ^ (v90 >> 9));
    v256 = (uint64_t ****)(v253 + 16 * v255);
    v257 = *v256;
    if (*v256 == v90)
      goto LABEL_354;
    v258 = 1;
    while (v257 != (uint64_t ***)-4096)
    {
      v259 = v255 + v258++;
      v255 = v259 & (v254 - 1);
      v257 = *(uint64_t ****)(v253 + 16 * v255);
      if (v257 == v90)
      {
        v256 = (uint64_t ****)(v253 + 16 * v255);
        goto LABEL_354;
      }
    }
  }
  v256 = (uint64_t ****)(v253 + 16 * v254);
LABEL_354:
  v306 = v256[1];
  if ((unint64_t)*v306 < 0x16)
  {
LABEL_355:
    v307 = 0;
    goto LABEL_365;
  }
  v308 = v306[2];
  v309 = v306[3];
  v310 = *(uint64_t *)((char *)v306 + 30);
  v307 = v308 == (uint64_t **)0x6974696E61735F5FLL
      && v309 == (uint64_t **)0x6C616E755F72657ALL
      && v310 == 0x5F64656E67696C61;
LABEL_365:
  v24 = v89 == 0;
  v91 = !v307;
  if (v24)
    v91 = 0;
LABEL_89:
  v334 = v91;
  v92 = a2[5];
  v93 = (uint64_t **)&a2[-8 * (v92 & 0x7FFFFFF)];
  v94 = *((unsigned __int8 *)a2 + 16);
  if (v94 == 84)
  {
    v95 = 0;
  }
  else if (v94 == 39)
  {
    v95 = (a2[20] + 1);
  }
  else
  {
    v95 = 2;
  }
  if (v92 < 0 && (v327 = (uint64_t)*(v93 - 1), (v327 & 0xFFFFFFFF0) != 0))
    v96 = (*((_DWORD *)v93 - 3) - *(_DWORD *)((char *)v93 - v327));
  else
    v96 = 0;
  v335 = (uint64_t)&a2[-8 * v95 - 8 + -8 * v96];
  if (v93 != (uint64_t **)v335)
  {
    v97 = 0;
    do
    {
      v98 = *v93;
      v99 = a2[5];
      v100 = **v93;
      v101 = *(unsigned __int8 *)(v100 + 8);
      if (v101 > 0x11)
        goto LABEL_151;
      if (((1 << v101) & 0xAC7F) != 0)
        goto LABEL_97;
      if (((1 << v101) & 0x30000) == 0)
      {
LABEL_151:
        if ((v101 & 0xFE) != 0x12 && v101 != 21)
          goto LABEL_146;
      }
      if (!llvm::Type::isSizedDerivedType(v100, 0))
        goto LABEL_146;
LABEL_97:
      v102 = (unint64_t)((char *)v93 - (char *)&a2[-8 * (v99 & 0x7FFFFFF)]) >> 5;
      v103 = *(_QWORD *)(*(_QWORD *)a1 + 40) + 272;
      HasAttr = llvm::CallBase::paramHasAttr((uint64_t)a2, v102, 69);
      v105 = llvm::CallBase::paramHasAttr((uint64_t)a2, v102, 36);
      if ((v334 & (HasAttr ^ 1)) != 1 || v105 == 0)
      {
        v107 = sub_1C58A06BC(a1, (uint64_t)v98);
        v108 = sub_1C58A196C((_QWORD *)a1, v98, (uint64_t)&v355, v97);
        if (HasAttr)
        {
          v158 = sub_1C6199478((uint64_t)a2, v102);
          sub_1C4768AD0(v103, v158);
          v160 = v159;
          v162 = v161 == 1;
          llvm::DataLayout::getAlignment(v103, v158);
          v165 = v164;
          if (v162)
          v117 = ((1 << v165) + ((unint64_t)(v160 + 7) >> 3) - 1) & -(1 << v165);
          if ((v97 + v117) > 0x320)
            break;
          ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 16), v102);
          if (HIBYTE(word_1ED813A68) >= ParamAlignment)
            v167 = ParamAlignment;
          else
            v167 = HIBYTE(word_1ED813A68);
          v168 = v167 | 0x100;
          if ((ParamAlignment & 0xFF00) != 0)
            v169 = v168;
          else
            v169 = 0;
          v333 = v169 | v333 & 0xFFFFFFFFFFFF0000;
          v170 = sub_1C58A0068((_QWORD *)a1, (unsigned __int8 *)v98, (uint64_t)&v355, (llvm::PointerType *)(*(_QWORD *)v360 + 1912), v169, 0);
          if (*(_BYTE *)(a1 + 457))
          {
            v173 = (llvm::Value *)v170;
            v174 = v171;
            v175 = *(llvm::ConstantInt **)(*(_QWORD *)v360 + 1984);
            v176 = *(_DWORD *)(*(_QWORD *)v360 + 1992);
            DWORD2(v348) = v176 >> 8;
            if (v176 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v348, v117, 0);
            }
            else
            {
              if (v176 <= 0xFF)
                LODWORD(v177) = 0;
              else
                v177 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v176);
              *(_QWORD *)&v348 = v177 & v117;
            }
            v178 = (uint64_t *)llvm::ConstantInt::get(v175, (llvm::LLVMContext *)&v348, v172);
            if (DWORD2(v348) >= 0x41 && (_QWORD)v348)
              MEMORY[0x1CAA32F9C](v348, 0x1000C8000313F17);
            llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v355, 194, (llvm::Value *)v108, v169, v173, v169, v178, 0, 0, 0, 0, 0);
            if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
            {
              v180 = sub_1C58A1B14(a1, (uint64_t)&v355, v97);
              v181 = word_1ED813A68;
              v182 = -(int)(1 << word_1ED813A68) & (v117 + (1 << word_1ED813A68) - 1);
              v183 = *(llvm::ConstantInt **)(*(_QWORD *)v360 + 1984);
              v184 = *(_DWORD *)(*(_QWORD *)v360 + 1992);
              DWORD2(v348) = v184 >> 8;
              if (v184 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v348, v182, 0);
              }
              else
              {
                if (v184 <= 0xFF)
                  v185 = 0;
                else
                  v185 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v184);
                *(_QWORD *)&v348 = v185 & v182;
              }
              v186 = (uint64_t *)llvm::ConstantInt::get(v183, (llvm::LLVMContext *)&v348, v179);
              if (DWORD2(v348) >= 0x41 && (_QWORD)v348)
                MEMORY[0x1CAA32F9C](v348, 0x1000C8000313F17);
              llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v355, 194, (llvm::Value *)v180, v181 | 0x100, v174, v181 | 0x100, v186, 0, 0, 0, 0, 0);
            }
          }
          else
          {
            v188 = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v360 + 1912), v171);
            v189 = *(llvm::ConstantInt **)(*(_QWORD *)v360 + 1984);
            v190 = *(_DWORD *)(*(_QWORD *)v360 + 1992);
            DWORD2(v348) = v190 >> 8;
            if (v190 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v348, v117, 0);
            }
            else
            {
              if (v190 <= 0xFF)
                LODWORD(v191) = 0;
              else
                v191 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v190);
              *(_QWORD *)&v348 = v191 & v117;
            }
            v192 = (uint64_t *)llvm::ConstantInt::get(v189, (llvm::LLVMContext *)&v348, v187);
            if (DWORD2(v348) >= 0x41 && (_QWORD)v348)
              MEMORY[0x1CAA32F9C](v348, 0x1000C8000313F17);
            llvm::IRBuilderBase::CreateMemSet((uint64_t)&v355, (llvm::Value *)v108, (uint64_t)v188, v192, v169, 0, 0, 0, 0);
          }
          goto LABEL_145;
        }
        v109 = *v98;
        sub_1C4768AD0(v103, *v98);
        v111 = v110;
        v113 = v112 == 1;
        llvm::DataLayout::getAlignment(v103, v109);
        v116 = v115;
        if (v113)
        v117 = ((1 << v116) + ((unint64_t)(v111 + 7) >> 3) - 1) & -(1 << v116);
        if ((v97 + v117) > 0x320)
          break;
        v118 = HIBYTE(word_1ED813A68);
        v119 = (char *)operator new(0x80uLL);
        v120 = v119;
        *((_DWORD *)v119 + 21) = *((_DWORD *)v119 + 21) & 0x38000000 | 2;
        *(_QWORD *)v119 = 0;
        *((_QWORD *)v119 + 2) = 0;
        *((_QWORD *)v119 + 1) = 0;
        *((_QWORD *)v119 + 5) = 0;
        *((_QWORD *)v119 + 6) = 0;
        *((_QWORD *)v119 + 4) = 0;
        v121 = (unsigned __int8 **)(v119 + 32);
        *((_QWORD *)v119 + 8) = **(_QWORD **)*v107 + 1576;
        v122 = (llvm::Value *)(v119 + 64);
        *((_QWORD *)v119 + 3) = v119 + 64;
        *((_QWORD *)v119 + 7) = v119 + 64;
        *((_QWORD *)v119 + 9) = 0;
        v119[80] = 61;
        v119[81] = 0;
        *((_WORD *)v119 + 41) = 0;
        *((_DWORD *)v119 + 21) = 2;
        *(_OWORD *)(v119 + 88) = 0u;
        *(_OWORD *)(v119 + 104) = 0u;
        *((_DWORD *)v119 + 30) = 0;
        *(_QWORD *)v119 = v107;
        v123 = v107 + 1;
        v124 = v107[1];
        *((_QWORD *)v119 + 1) = v124;
        if (v124)
          *((_QWORD *)v124 + 2) = v119 + 8;
        *((_QWORD *)v119 + 2) = v123;
        *v123 = v119;
        if (*((_QWORD *)v119 + 4))
        {
          **((_QWORD **)v119 + 6) = *((_QWORD *)v119 + 5);
          v201 = *((_QWORD *)v119 + 5);
          if (v201)
            *(_QWORD *)(v201 + 16) = *((_QWORD *)v119 + 6);
        }
        *v121 = v108;
        if (v108)
        {
          v127 = *((_QWORD *)v108 + 1);
          v126 = (unsigned __int8 ***)(v108 + 8);
          v125 = v127;
          *((_QWORD *)v119 + 5) = v127;
          if (v127)
            *(_QWORD *)(v125 + 16) = v119 + 40;
          *((_QWORD *)v119 + 6) = v126;
          *v126 = v121;
        }
        *((_WORD *)v119 + 41) = 2 * (v118 & 0x3F);
        v119[124] = 1;
        v350 = 257;
        (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v361 + 16))(v361, v122, &v348, v358, v359);
        if (!DWORD2(v355))
        {
LABEL_114:
          if (*((unsigned __int8 *)v107 + 16) >= 0x15u)
            v128 = 0;
          else
            v128 = (llvm::Constant *)v107;
          if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4) || v128 && (llvm::Constant::isNullValue(v128) & 1) != 0)
            goto LABEL_145;
          v129 = (uint64_t *)sub_1C58A11D4(a1, (uint64_t)v98);
          v130 = sub_1C58A1B14(a1, (uint64_t)&v355, v97);
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v358 + 56) + 40) + 272, *v129);
          v132 = v131;
          v133 = (char *)operator new(0x80uLL);
          v134 = v133;
          *((_DWORD *)v133 + 21) = *((_DWORD *)v133 + 21) & 0x38000000 | 2;
          *(_QWORD *)v133 = 0;
          *((_QWORD *)v133 + 2) = 0;
          *((_QWORD *)v133 + 1) = 0;
          *((_QWORD *)v133 + 5) = 0;
          *((_QWORD *)v133 + 6) = 0;
          *((_QWORD *)v133 + 4) = 0;
          v135 = (unsigned __int8 **)(v133 + 32);
          *((_QWORD *)v133 + 8) = **(_QWORD **)*v129 + 1576;
          v136 = (llvm::Value *)(v133 + 64);
          *((_QWORD *)v133 + 3) = v133 + 64;
          *((_QWORD *)v133 + 7) = v133 + 64;
          *((_QWORD *)v133 + 9) = 0;
          v133[80] = 61;
          v133[81] = 0;
          *((_WORD *)v133 + 41) = 0;
          *((_DWORD *)v133 + 21) = 2;
          *(_OWORD *)(v133 + 88) = 0u;
          *(_OWORD *)(v133 + 104) = 0u;
          *((_DWORD *)v133 + 30) = 0;
          *(_QWORD *)v133 = v129;
          v139 = v129[1];
          v138 = v129 + 1;
          v137 = v139;
          *((_QWORD *)v133 + 1) = v139;
          if (v139)
            *(_QWORD *)(v137 + 16) = v133 + 8;
          *((_QWORD *)v133 + 2) = v138;
          *v138 = v133;
          if (*((_QWORD *)v133 + 4))
          {
            **((_QWORD **)v133 + 6) = *((_QWORD *)v133 + 5);
            v202 = *((_QWORD *)v133 + 5);
            if (v202)
              *(_QWORD *)(v202 + 16) = *((_QWORD *)v133 + 6);
          }
          *v135 = v130;
          if (v130)
          {
            v142 = *((_QWORD *)v130 + 1);
            v141 = (unsigned __int8 ***)(v130 + 8);
            v140 = v142;
            *((_QWORD *)v133 + 5) = v142;
            if (v142)
              *(_QWORD *)(v140 + 16) = v133 + 40;
            *((_QWORD *)v133 + 6) = v141;
            *v141 = v135;
          }
          *((_WORD *)v133 + 41) = 2 * (v132 & 0x3F);
          v133[124] = 1;
          v350 = 257;
          (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v361 + 16))(v361, v136, &v348, v358, v359);
          if (!DWORD2(v355))
            goto LABEL_145;
          v143 = v355;
          v144 = v355 + 16 * DWORD2(v355);
          v145 = (unsigned __int8 **)(v134 + 112);
          while (2)
          {
            v146 = *(_DWORD *)v143;
            v147 = *(unsigned __int8 **)(v143 + 8);
            if (v147)
            {
              if (v146)
                goto LABEL_135;
              v341 = *(void **)(v143 + 8);
              llvm::MetadataTracking::track((uint64_t)&v341, v147, 2);
              v148 = *v145;
LABEL_139:
              if (v148)
                llvm::MetadataTracking::untrack((uint64_t)(v134 + 112), v148);
              v149 = (unsigned __int8 *)v341;
              *v145 = (unsigned __int8 *)v341;
              if (v149)
                llvm::MetadataTracking::retrack((uint64_t)&v341, v149, (uint64_t)(v134 + 112));
            }
            else
            {
              v148 = *v145;
              if (*v145 || (v134[87] & 0x20) != 0)
              {
                if (!v146)
                {
                  v341 = 0;
                  goto LABEL_139;
                }
LABEL_135:
                llvm::Value::setMetadata(v136, *(_DWORD *)v143, (llvm::MDNode *)v147);
              }
            }
            v143 += 16;
            if (v143 == v144)
              goto LABEL_145;
            continue;
          }
        }
        v193 = v355;
        v194 = v355 + 16 * DWORD2(v355);
        v195 = (unsigned __int8 **)(v120 + 112);
        while (2)
        {
          v196 = *(_DWORD *)v193;
          v197 = *(unsigned __int8 **)(v193 + 8);
          if (v197)
          {
            if (v196)
              goto LABEL_194;
            v341 = *(void **)(v193 + 8);
            v330 = v195;
            llvm::MetadataTracking::track((uint64_t)&v341, v197, 2);
            v195 = v330;
            v198 = *v330;
LABEL_198:
            if (v198)
            {
              v332 = v195;
              llvm::MetadataTracking::untrack((uint64_t)v195, v198);
              v195 = v332;
            }
            v200 = (unsigned __int8 *)v341;
            *v195 = (unsigned __int8 *)v341;
            if (v200)
            {
              v331 = v195;
              llvm::MetadataTracking::retrack((uint64_t)&v341, v200, (uint64_t)v195);
              v195 = v331;
            }
          }
          else
          {
            v198 = *v195;
            if (*v195 || (v120[87] & 0x20) != 0)
            {
              if (!v196)
              {
                v341 = 0;
                goto LABEL_198;
              }
LABEL_194:
              v329 = v194;
              v199 = v195;
              llvm::Value::setMetadata(v122, *(_DWORD *)v193, (llvm::MDNode *)v197);
              v195 = v199;
              v194 = v329;
            }
          }
          v193 += 16;
          if (v193 == v194)
            goto LABEL_114;
          continue;
        }
      }
      sub_1C58AB300(a1, (uint64_t)v98, (uint64_t)a2);
      v150 = *v98;
      sub_1C4768AD0(v103, *v98);
      v152 = (unint64_t)(v151 + 7) >> 3;
      v154 = v153 == 1;
      llvm::DataLayout::getAlignment(v103, v150);
      v117 = ((1 << v155) + v152 - 1) & -(1 << v155);
      if (v154)
LABEL_145:
      v97 += (v117 + (1 << SHIBYTE(word_1ED813A68)) - 1) & -(int)(1 << SHIBYTE(word_1ED813A68));
LABEL_146:
      v93 += 4;
    }
    while (v93 != (uint64_t **)v335);
  }
  if (*(_DWORD *)(*((_QWORD *)a2 + 9) + 8) >= 0x100u)
    (*(void (**)(_QWORD, _DWORD *, __int128 *))(**(_QWORD **)(a1 + 432) + 16))(*(_QWORD *)(a1 + 432), a2, &v355);
  v203 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if (v203 > 0x11)
  {
LABEL_280:
    if ((v203 & 0xFE) != 0x12 && v203 != 21)
      goto LABEL_288;
LABEL_267:
    if (!llvm::Type::isSizedDerivedType(*(_QWORD *)a2, 0))
      goto LABEL_288;
    goto LABEL_220;
  }
  if (((1 << v203) & 0xAC7F) == 0)
  {
    if (((1 << v203) & 0x30000) != 0)
      goto LABEL_267;
    goto LABEL_280;
  }
LABEL_220:
  if (*((_BYTE *)a2 + 16) != 84 || (*((_WORD *)a2 + 9) & 3) != 2)
  {
    if (v334 && sub_1C4D91DD8((uint64_t)a2, 36))
    {
      sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
      if (v204)
        v206 = llvm::Constant::getNullValue(v204, v205);
      else
        v206 = 0;
      sub_1C58AB878(a1, (uint64_t *)a2, v206);
      v262 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 32), v261);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
        *sub_1C62AD7D0(a1 + 368, (uint64_t)a2) = (unint64_t)v262;
      goto LABEL_288;
    }
    sub_1C4773D54((uint64_t)&v348, (uint64_t)a2, 0, 0, 0);
    v207 = sub_1C58AB2A0((_QWORD *)a1, *(_QWORD *)a2, (uint64_t *)&v348);
    sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
    if (v208)
      v210 = llvm::Constant::getNullValue(v208, v209);
    else
      v210 = 0;
    v211 = HIBYTE(word_1ED813A68);
    v212 = (char *)operator new(0x80uLL);
    v213 = v212;
    *((_DWORD *)v212 + 21) = *((_DWORD *)v212 + 21) & 0x38000000 | 2;
    *(_QWORD *)v212 = 0;
    *((_QWORD *)v212 + 2) = 0;
    *((_QWORD *)v212 + 1) = 0;
    *((_QWORD *)v212 + 5) = 0;
    *((_QWORD *)v212 + 6) = 0;
    *((_QWORD *)v212 + 4) = 0;
    v214 = (unsigned __int8 **)(v212 + 32);
    *((_QWORD *)v212 + 8) = **(_QWORD **)*v210 + 1576;
    v215 = (llvm::Value *)(v212 + 64);
    *((_QWORD *)v212 + 3) = v212 + 64;
    *((_QWORD *)v212 + 7) = v212 + 64;
    *((_QWORD *)v212 + 9) = 0;
    v212[80] = 61;
    v212[81] = 0;
    *((_WORD *)v212 + 41) = 0;
    *((_DWORD *)v212 + 21) = 2;
    *(_OWORD *)(v212 + 88) = 0u;
    *(_OWORD *)(v212 + 104) = 0u;
    *((_DWORD *)v212 + 30) = 0;
    *(_QWORD *)v212 = v210;
    v218 = v210[1];
    v217 = v210 + 1;
    v216 = v218;
    *((_QWORD *)v212 + 1) = v218;
    if (v218)
      *((_QWORD *)v216 + 2) = v212 + 8;
    *((_QWORD *)v212 + 2) = v217;
    *v217 = v212;
    if (*((_QWORD *)v212 + 4))
    {
      **((_QWORD **)v212 + 6) = *((_QWORD *)v212 + 5);
      v328 = *((_QWORD *)v212 + 5);
      if (v328)
        *(_QWORD *)(v328 + 16) = *((_QWORD *)v212 + 6);
    }
    *v214 = v207;
    if (v207)
    {
      v221 = *((_QWORD *)v207 + 1);
      v220 = (unsigned __int8 ***)(v207 + 8);
      v219 = v221;
      *((_QWORD *)v212 + 5) = v221;
      if (v221)
        *(_QWORD *)(v219 + 16) = v212 + 40;
      *((_QWORD *)v212 + 6) = v220;
      *v220 = v214;
    }
    *((_WORD *)v212 + 41) = 2 * (v211 & 0x3F);
    v212[124] = 1;
    v344 = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v354 + 16))(v354, v215, &v341, v351, v352);
    if (!DWORD2(v348))
    {
LABEL_237:
      if (*((_BYTE *)a2 + 16) == 84)
      {
        v222 = (_QWORD *)*((_QWORD *)a2 + 4);
        v223 = (_QWORD *)a1;
      }
      else
      {
        v246 = (llvm::BasicBlock *)*((_QWORD *)a2 - 12);
        v223 = (_QWORD *)a1;
        if (!llvm::BasicBlock::getSinglePredecessor(v246))
        {
          sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
          if (v249)
            v251 = llvm::Constant::getNullValue(v249, v250);
          else
            v251 = 0;
          sub_1C58AB878(a1, (uint64_t *)a2, v251);
          v291 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 32), v290);
          if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
            *sub_1C62AD7D0(a1 + 368, (uint64_t)a2) = (unint64_t)v291;
          goto LABEL_257;
        }
        v222 = (_QWORD *)((char *)v246 + 40);
        for (i = (_QWORD *)*((_QWORD *)v246 + 6); i != v222; i = (_QWORD *)i[1])
        {
          v248 = i - 3;
          if (!i)
            v248 = 0;
          if (*((_BYTE *)v248 + 16) != 83)
          {
            v269 = *((unsigned __int8 *)i - 8) - 38;
            v270 = v269 > 0x38;
            v271 = (1 << v269) & 0x100060000000001;
            if (v270 || v271 == 0)
              v222 = i;
            else
              v222 = (_QWORD *)i[1];
            break;
          }
        }
      }
      if (v222)
        v224 = (uint64_t)(v222 - 3);
      else
        v224 = 0;
      sub_1C4773D54((uint64_t)&v341, v224, 0, 0, 0);
      sub_1C58A1544(v223, *(_QWORD *)a2);
      v226 = v225;
      v227 = sub_1C58AB2A0(v223, *(_QWORD *)a2, (uint64_t *)&v341);
      v228 = HIBYTE(word_1ED813A68);
      v338[0] = "_msret";
      v339 = 259;
      v229 = (char *)operator new(0x60uLL);
      v230 = v229;
      v231 = (llvm::Value **)(v229 + 32);
      *((_QWORD *)v229 + 2) = 0;
      *((_QWORD *)v229 + 3) = v229 + 32;
      v363 = 257;
      *((_QWORD *)v229 + 4) = v226;
      *((_QWORD *)v229 + 5) = 0;
      *((_WORD *)v229 + 24) = 60;
      *((_DWORD *)v229 + 13) = 1;
      *(_OWORD *)(v229 + 56) = 0u;
      *(_OWORD *)(v229 + 72) = 0u;
      *((_DWORD *)v229 + 22) = 0;
      *(_QWORD *)v229 = v227;
      *((_QWORD *)v229 + 1) = 0;
      if (v227)
      {
        v234 = *((_QWORD *)v227 + 1);
        v233 = v227 + 8;
        v232 = v234;
        *((_QWORD *)v229 + 1) = v234;
        if (v234)
          *(_QWORD *)(v232 + 16) = v229 + 8;
        *((_QWORD *)v229 + 2) = v233;
        *v233 = v229;
      }
      *((_WORD *)v229 + 25) = 2 * (v228 & 0x3F);
      v229[92] = 1;
      llvm::Value::setName((uint64_t ***)v229 + 4, (uint64_t)v362);
      (*(void (**)(uint64_t, llvm::Value **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v347 + 16))(v347, v231, v338, v345, v346);
      if (!(_DWORD)v342)
      {
LABEL_247:
        sub_1C58AB878(a1, (uint64_t *)a2, v231);
        v235 = *(_QWORD *)(a1 + 8);
        if (!*(_DWORD *)(v235 + 4))
        {
LABEL_255:
          if (v341 != &v343)
            free(v341);
LABEL_257:
          if ((_QWORD *)v348 != v349)
            free((void *)v348);
          goto LABEL_288;
        }
        v236 = *(_QWORD *)(v235 + 32);
        v237 = *(_QWORD *)(v235 + 64);
        v339 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v345 + 56) + 40) + 272, v236);
        v239 = v238;
        v240 = (char *)operator new(0x60uLL);
        v241 = v240;
        v242 = (llvm::Value *)(v240 + 32);
        *((_QWORD *)v240 + 2) = 0;
        *((_QWORD *)v240 + 3) = v240 + 32;
        v363 = 257;
        *((_QWORD *)v240 + 4) = v236;
        *((_QWORD *)v240 + 5) = 0;
        *((_WORD *)v240 + 24) = 60;
        *((_DWORD *)v240 + 13) = 1;
        *(_OWORD *)(v240 + 56) = 0u;
        *(_OWORD *)(v240 + 72) = 0u;
        *((_DWORD *)v240 + 22) = 0;
        *(_QWORD *)v240 = v237;
        *((_QWORD *)v240 + 1) = 0;
        if (v237)
        {
          v245 = *(_QWORD *)(v237 + 8);
          v244 = (_QWORD *)(v237 + 8);
          v243 = v245;
          *((_QWORD *)v240 + 1) = v245;
          if (v245)
            *(_QWORD *)(v243 + 16) = v240 + 8;
          *((_QWORD *)v240 + 2) = v244;
          *v244 = v240;
        }
        *((_WORD *)v240 + 25) = 2 * (v239 & 0x3F);
        v240[92] = 1;
        llvm::Value::setName((uint64_t ***)v240 + 4, (uint64_t)v362);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v347 + 16))(v347, v242, v338, v345, v346);
        if (!(_DWORD)v342)
        {
LABEL_253:
          if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
            *sub_1C62AD7D0(a1 + 368, (uint64_t)a2) = (unint64_t)v242;
          goto LABEL_255;
        }
        v299 = (char *)v341;
        v300 = (char *)v341 + 16 * v342;
        v301 = (unsigned __int8 **)(v241 + 80);
        while (1)
        {
          v302 = *(_DWORD *)v299;
          v303 = (unsigned __int8 *)*((_QWORD *)v299 + 1);
          if (v303)
          {
            if (!v302)
            {
              v340 = (unsigned __int8 *)*((_QWORD *)v299 + 1);
              llvm::MetadataTracking::track((uint64_t)&v340, v303, 2);
              v304 = *v301;
              goto LABEL_349;
            }
          }
          else
          {
            v304 = *v301;
            if (!*v301 && (v241[55] & 0x20) == 0)
              goto LABEL_346;
            if (!v302)
            {
              v340 = 0;
LABEL_349:
              if (v304)
                llvm::MetadataTracking::untrack((uint64_t)(v241 + 80), v304);
              v305 = v340;
              *v301 = v340;
              if (v305)
                llvm::MetadataTracking::retrack((uint64_t)&v340, v305, (uint64_t)(v241 + 80));
              goto LABEL_346;
            }
          }
          llvm::Value::setMetadata(v242, *(_DWORD *)v299, (llvm::MDNode *)v303);
LABEL_346:
          v299 += 16;
          if (v299 == v300)
            goto LABEL_253;
        }
      }
      v292 = (char *)v341;
      v293 = (char *)v341 + 16 * v342;
      v294 = (unsigned __int8 **)(v230 + 80);
      while (1)
      {
        v295 = *(_DWORD *)v292;
        v296 = (unsigned __int8 *)*((_QWORD *)v292 + 1);
        if (v296)
        {
          if (!v295)
          {
            v340 = (unsigned __int8 *)*((_QWORD *)v292 + 1);
            llvm::MetadataTracking::track((uint64_t)&v340, v296, 2);
            v297 = *v294;
            goto LABEL_334;
          }
        }
        else
        {
          v297 = *v294;
          if (!*v294 && (v230[55] & 0x20) == 0)
            goto LABEL_331;
          if (!v295)
          {
            v340 = 0;
LABEL_334:
            if (v297)
              llvm::MetadataTracking::untrack((uint64_t)(v230 + 80), v297);
            v298 = v340;
            *v294 = v340;
            if (v298)
              llvm::MetadataTracking::retrack((uint64_t)&v340, v298, (uint64_t)(v230 + 80));
            goto LABEL_331;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v231, *(_DWORD *)v292, (llvm::MDNode *)v296);
LABEL_331:
        v292 += 16;
        if (v292 == v293)
          goto LABEL_247;
      }
    }
    v313 = v348;
    v314 = v348 + 16 * DWORD2(v348);
    v315 = (unsigned __int8 **)(v213 + 112);
    while (1)
    {
      v316 = *(_DWORD *)v313;
      v317 = *(unsigned __int8 **)(v313 + 8);
      if (v317)
      {
        if (!v316)
        {
          v362[0] = *(_QWORD *)(v313 + 8);
          llvm::MetadataTracking::track((uint64_t)v362, v317, 2);
          v318 = *v315;
          goto LABEL_380;
        }
      }
      else
      {
        v318 = *v315;
        if (!*v315 && (v213[87] & 0x20) == 0)
          goto LABEL_377;
        if (!v316)
        {
          v362[0] = 0;
LABEL_380:
          if (v318)
            llvm::MetadataTracking::untrack((uint64_t)(v213 + 112), v318);
          v319 = (unsigned __int8 *)v362[0];
          *v315 = (unsigned __int8 *)v362[0];
          if (v319)
            llvm::MetadataTracking::retrack((uint64_t)v362, v319, (uint64_t)(v213 + 112));
          goto LABEL_377;
        }
      }
      llvm::Value::setMetadata(v215, *(_DWORD *)v313, (llvm::MDNode *)v317);
LABEL_377:
      v313 += 16;
      if (v313 == v314)
        goto LABEL_237;
    }
  }
LABEL_288:
  v86 = (_QWORD ***)v355;
LABEL_289:
  if (v86 != &v356)
    free(v86);
}

uint64_t sub_1C58AD678(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t v4;
  _WORD v6[20];
  uint64_t v7;

  v7 = a2;
  if (*(int *)(a1 + 4) >= 2)
  {
    v3 = *(uint64_t ***)(a1 + 280);
    v4 = *(_QWORD *)(a1 + 288);
    v6[16] = 257;
    return sub_1C4774778(a3, v3, v4, &v7, 1, (uint64_t)v6, 0);
  }
  return a2;
}

void sub_1C58AD6D0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  void *v10[2];
  _QWORD v11[16];

  v11[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v10, a2, 0, 0, 0);
  v9[0] = 0;
  v9[1] = 0;
  v9[2] = v10;
  v9[3] = a1;
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      goto LABEL_7;
LABEL_5:
    v7 = 32 * v5;
    do
    {
      v8 = *v6;
      v6 += 4;
      sub_1C58AD7B0((uint64_t)v9, v8);
      v7 -= 32;
    }
    while (v7);
    goto LABEL_7;
  }
  v5 = v4 & 0x7FFFFFF;
  v6 = (uint64_t *)(a2 - 32 * v5);
  if (v5)
    goto LABEL_5;
LABEL_7:
  sub_1C58AD810((uint64_t)v9, (uint64_t *)a2);
  if (v10[0] != v11)
    free(v10[0]);
}

uint64_t sub_1C58AD7B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v4 = (uint64_t *)sub_1C58A06BC(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 4))
    v6 = (unsigned __int8 *)sub_1C58A11D4(v5, a2);
  else
    v6 = 0;
  return sub_1C58AD8A8(a1, v4, v6);
}

unint64_t *sub_1C58AD810(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t *result;
  uint64_t v10;
  unint64_t v11;

  v5 = *(uint64_t **)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 24);
  v6 = *(uint64_t **)a1;
  sub_1C58A1544(v4, *a2);
  v8 = sub_1C58A85DC(v4, v5, v6, v7, 0);
  *(_QWORD *)a1 = v8;
  result = sub_1C58AB878(*(_QWORD *)(a1 + 24), a2, (llvm::Value **)v8);
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(*(_QWORD *)(v10 + 8) + 4))
  {
    v11 = *(_QWORD *)(a1 + 8);
    result = sub_1C62AD7D0(v10 + 368, (uint64_t)a2);
    *result = v11;
  }
  return result;
}

uint64_t sub_1C58AD8A8(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Constant *v12;
  llvm::Type *v13;
  llvm::Value **NullValue;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;

  v4 = (uint64_t)a2;
  if (*(_QWORD *)a1)
  {
    v6 = (uint64_t *)sub_1C58A85DC(*(_QWORD **)(a1 + 24), *(uint64_t **)(a1 + 16), a2, **(_QWORD **)a1, 0);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(uint64_t **)a1;
    v19[0] = "_msprop";
    v20 = 259;
    v4 = sub_1C4773594(v7, v8, (uint64_t)v6, (uint64_t)v19);
  }
  else
  {
    v6 = a2;
  }
  *(_QWORD *)a1 = v4;
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(*(_QWORD *)(v9 + 8) + 4))
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      *(_QWORD *)(a1 + 8) = a3;
      return a1;
    }
    if (a3 && a3[16] <= 0x14u)
    {
      if ((llvm::Constant::isNullValue((llvm::Constant *)a3) & 1) != 0)
        return a1;
      v9 = *(_QWORD *)(a1 + 24);
    }
    v10 = (uint64_t *)sub_1C58AD9E8(v9, v6, *(const llvm::APInt **)(a1 + 16));
    v11 = *(_QWORD *)(a1 + 16);
    sub_1C58A1544(*(_QWORD **)(a1 + 24), *v10);
    if (v12)
      NullValue = llvm::Constant::getNullValue(v12, v13);
    else
      NullValue = 0;
    v20 = 257;
    v15 = sub_1C4774B48(v11, 33, (uint64_t)v10, (uint64_t)NullValue, (uint64_t)v19);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(uint64_t **)(a1 + 16);
    v20 = 257;
    *(_QWORD *)(a1 + 8) = llvm::IRBuilderBase::CreateSelect(v16, v15, (uint64_t *)a3, v17, (uint64_t)v19, 0);
  }
  return a1;
}

unsigned __int8 *sub_1C58AD9E8(uint64_t a1, uint64_t *a2, const llvm::APInt *a3)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::ConstantInt *v14;
  llvm::ValueHandleBase *v15;
  llvm::ValueHandleBase *v16;
  uint64_t v17;
  llvm::ConstantInt **v18;
  uint64_t v19;
  llvm::Type *v20;
  uint64_t v22;
  llvm::ConstantInt *v23;
  uint64_t v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;

  v4 = a2;
  v6 = *a2;
  v7 = *(unsigned __int8 *)(*a2 + 8);
  if (*a2)
    v8 = v7 == 16;
  else
    v8 = 0;
  if (v8)
  {
    v13 = **((_QWORD **)a3 + 8);
    v14 = *(llvm::ConstantInt **)(v13 + 1888);
    v25 = *(_DWORD *)(v13 + 1896) >> 8;
    if (v25 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v24, 0, 0);
    else
      v24 = 0;
    v15 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v24, a3);
    if (v25 >= 0x41 && v24)
      MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    v27 = 0;
    if (!*(_DWORD *)(v6 + 12))
      return (unsigned __int8 *)v15;
    v16 = v15;
    do
    {
      v26 = 257;
      v17 = sub_1C506DBC4((uint64_t)a3, v4, &v27, 1, (uint64_t)&v24);
      v18 = (llvm::ConstantInt **)sub_1C58AD9E8(a1, v17, a3);
      v26 = 257;
      v19 = sub_1C58ADDEC(v18, (uint64_t)a3, (uint64_t)&v24);
      if (v16 != v15)
      {
        v26 = 257;
        v19 = sub_1C4773594((uint64_t)a3, v16, v19, (uint64_t)&v24);
      }
      ++v27;
      v16 = (llvm::ValueHandleBase *)v19;
    }
    while (v27 < *(_DWORD *)(v6 + 12));
    return (unsigned __int8 *)v19;
  }
  else if (v7 == 17)
  {
    if (*(_QWORD *)(v6 + 32))
    {
      v27 = 0;
      v26 = 257;
      v9 = sub_1C506DBC4((uint64_t)a3, a2, &v27, 1, (uint64_t)&v24);
      v10 = (_QWORD *)sub_1C58AD9E8(a1, v9, a3);
      v27 = 1;
      if (*(_QWORD *)(v6 + 32) >= 2uLL)
      {
        do
        {
          v26 = 257;
          v11 = sub_1C506DBC4((uint64_t)a3, v4, &v27, 1, (uint64_t)&v24);
          v12 = sub_1C58AD9E8(a1, v11, a3);
          v26 = 257;
          v10 = (_QWORD *)sub_1C4773594((uint64_t)a3, v10, v12, (uint64_t)&v24);
          ++v27;
        }
        while (*(_QWORD *)(v6 + 32) > (unint64_t)v27);
      }
      return (unsigned __int8 *)v10;
    }
    else
    {
      v22 = **((_QWORD **)a3 + 8);
      v23 = *(llvm::ConstantInt **)(v22 + 1888);
      v25 = *(_DWORD *)(v22 + 1896) >> 8;
      if (v25 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v24, 0, 0);
      else
        v24 = 0;
      v4 = (uint64_t *)llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v24, a3);
      if (v25 >= 0x41 && v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    }
  }
  else
  {
    v20 = sub_1C58ADCC8(a1, (llvm::Type *)*a2);
    if ((llvm::Type *)v6 != v20)
    {
      v26 = 257;
      return sub_1C4773E38((uint64_t *)a3, 49, (unsigned __int8 *)v4, (uint64_t)v20, (uint64_t)&v24);
    }
  }
  return (unsigned __int8 *)v4;
}

llvm::Type *sub_1C58ADCC8(uint64_t a1, llvm::Type *this)
{
  _QWORD *v2;
  int PrimitiveSizeInBits;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;

  if (this && (*((_DWORD *)this + 2) & 0xFE) == 0x12)
  {
    v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
    v8 = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits <= 63)
    {
      if (PrimitiveSizeInBits <= 31)
      {
        switch(PrimitiveSizeInBits)
        {
          case 16:
            return (llvm::Type *)(*v2 + 1936);
          case 8:
            return (llvm::Type *)(*v2 + 1912);
          case 1:
            return (llvm::Type *)(*v2 + 1888);
        }
      }
      else if (PrimitiveSizeInBits == 32)
      {
        return (llvm::Type *)(*v2 + 1960);
      }
    }
    else
    {
      if (PrimitiveSizeInBits == 64)
        return (llvm::Type *)(*v2 + 1984);
      if (PrimitiveSizeInBits == 128)
        return (llvm::Type *)(*v2 + 2008);
    }
    v5 = sub_1C5270984(*v2 + 2168, &v8);
    this = (llvm::Type *)*((_QWORD *)v5 + 1);
    if (!this)
    {
      v6 = v5;
      this = (llvm::Type *)sub_1C484358C(*v2 + 2040, 24, 3);
      v7 = v8;
      *(_QWORD *)this = v2;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 1) = (v7 << 8) | 0xDu;
      *((_QWORD *)v6 + 1) = this;
    }
  }
  return this;
}

uint64_t sub_1C58ADDEC(llvm::ConstantInt **a1, uint64_t a2, uint64_t a3)
{
  llvm::ConstantInt *v4;
  llvm::Value **v8;

  v4 = *a1;
  if ((*((_DWORD *)v4 + 2) & 0xFFFFFF00) == 0x100)
    return (uint64_t)a1;
  v8 = llvm::ConstantInt::get(v4, 0, 0);
  return sub_1C4774B48(a2, 33, (uint64_t)a1, (uint64_t)v8, a3);
}

void sub_1C58ADE60(uint64_t a1, uint64_t *a2, llvm::Constant *this, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  const llvm::APInt *v15;
  int v16;
  llvm::ConstantInt *v17;
  llvm::Type *v18;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v20;
  unint64_t *v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const llvm::APInt *v26;
  llvm::Value **v27;
  uint64_t v28;
  void *v29;
  llvm::Value **v30;
  uint64_t v31;
  llvm::FixedVectorType ***v32;
  uint64_t v33;
  uint64_t Impl;
  _QWORD **v35;
  size_t v36;
  void *v37;
  llvm::Value **v38;
  llvm::Value **v39;
  llvm::Value **v40;
  void *v41;
  unsigned int v42;
  __int16 v43;
  void *__src;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[18];

  v48[16] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v9 = (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18;
  else
    v9 = 0;
  if (!v9)
  {
    if (*((_BYTE *)this + 16) != 16)
    {
      Impl = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)this, 1, 0);
      goto LABEL_53;
    }
    v10 = (unint64_t *)((char *)this + 24);
    v11 = *((_DWORD *)this + 8);
    v42 = v11;
    if (v11 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v41, 1, 0);
      v11 = *((_DWORD *)this + 8);
      if (v11 > 0x40)
      {
        v14 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 3);
LABEL_13:
        LODWORD(v47) = v42;
        if (v42 > 0x40)
        {
          v36 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
          v46 = (void *)operator new[]();
          v37 = v41;
          memcpy(v46, v41, v36);
          sub_1C4888094((uint64_t)&v46, v14);
          if (v37)
            MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
        }
        else
        {
          v46 = v41;
          sub_1C4888094((uint64_t)&v46, v14);
        }
        Impl = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt **)v8, (llvm::Type *)&v46, v15);
        if (v47 >= 0x41 && v46)
          MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
        goto LABEL_53;
      }
    }
    else
    {
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (!v11)
        LOBYTE(v12) = 0;
      v41 = (void *)(v12 & 1);
    }
    v13 = __clz(__rbit64(*v10));
    if (v11 >= v13)
      v14 = v13;
    else
      v14 = v11;
    goto LABEL_13;
  }
  v16 = *(_DWORD *)(v8 + 32);
  v17 = *(llvm::ConstantInt **)(v8 + 24);
  v46 = v48;
  v47 = 0x1000000000;
  if (v16)
  {
    v18 = 0;
    while (1)
    {
      AggregateElement = llvm::Constant::getAggregateElement(this, v18);
      if (!AggregateElement || (v20 = AggregateElement, *((_BYTE *)AggregateElement + 16) != 16))
      {
        v27 = llvm::ConstantInt::get(v17, 1, 0);
        v28 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 8);
          v28 = v47;
        }
        *((_QWORD *)v46 + v28) = v27;
        LODWORD(v47) = v47 + 1;
        goto LABEL_38;
      }
      v21 = (unint64_t *)((char *)AggregateElement + 24);
      v22 = *((_DWORD *)AggregateElement + 8);
      v45 = v22;
      if (v22 <= 0x40)
        break;
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
      v22 = *((_DWORD *)v20 + 8);
      if (v22 <= 0x40)
        goto LABEL_23;
      v25 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v20 + 3);
LABEL_26:
      v42 = v45;
      if (v45 > 0x40)
      {
        v41 = (void *)operator new[]();
        v29 = __src;
        memcpy(v41, __src, (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8);
        sub_1C4888094((uint64_t)&v41, v25);
        if (v29)
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
      }
      else
      {
        v41 = __src;
        sub_1C4888094((uint64_t)&v41, v25);
      }
      v30 = llvm::ConstantInt::get((llvm::ConstantInt **)v17, (llvm::Type *)&v41, v26);
      v31 = v47;
      if (v47 >= (unint64_t)HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 8);
        v31 = v47;
      }
      *((_QWORD *)v46 + v31) = v30;
      LODWORD(v47) = v47 + 1;
      if (v42 >= 0x41 && v41)
        MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
LABEL_38:
      v18 = (llvm::Type *)((_DWORD)v18 + 1);
      if (v16 == (_DWORD)v18)
      {
        v32 = (llvm::FixedVectorType ***)v46;
        v33 = v47;
        goto LABEL_44;
      }
    }
    v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
    if (!v22)
      LOBYTE(v23) = 0;
    __src = (void *)(v23 & 1);
LABEL_23:
    v24 = __clz(__rbit64(*v21));
    if (v22 >= v24)
      v25 = v24;
    else
      v25 = v22;
    goto LABEL_26;
  }
  v33 = 0;
  v32 = (llvm::FixedVectorType ***)v48;
LABEL_44:
  Impl = (uint64_t)llvm::ConstantVector::getImpl(v32, (llvm::Type *)v33);
  if (!Impl)
  {
    llvm::FixedVectorType::get(**v32, (llvm::Type *)v33);
    Impl = sub_1C537B3A4(**v35 + 1288, (uint64_t)v35, v32, v33);
  }
  if (v46 != v48)
    free(v46);
LABEL_53:
  sub_1C4773D54((uint64_t)&v46, (uint64_t)a2, 0, 0, 0);
  v38 = sub_1C58A06BC(a1, a4);
  v41 = "msprop_mul_cst";
  v43 = 259;
  v39 = (llvm::Value **)sub_1C4EC4040((uint64_t)&v46, (uint64_t)v38, Impl, (uint64_t)&v41, 0, 0);
  sub_1C58AB878(a1, a2, v39);
  v40 = sub_1C58A11D4(a1, a4);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
    *sub_1C62AD7D0(a1 + 368, (uint64_t)a2) = (unint64_t)v40;
  if (v46 != v48)
    free(v46);
}

void sub_1C58AE38C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  llvm::Value **v8;
  int v9;
  uint64_t *v10;
  llvm::Value **v11;
  void *v12;
  _QWORD v13[16];

  v13[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v12, a2, 0, 0, 0);
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(a2 - 8);
  else
    v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  sub_1C58AB300(a1, *(_QWORD *)(v5 + 32), a2);
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(uint64_t **)(a2 - 8);
  else
    v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
  v8 = sub_1C58A06BC(a1, *v7);
  sub_1C58AB878(a1, (uint64_t *)a2, v8);
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(uint64_t **)(a2 - 8);
  else
    v10 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
  v11 = sub_1C58A11D4(a1, *v10);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
    *sub_1C62AD7D0(a1 + 368, a2) = (unint64_t)v11;
  if (v12 != v13)
    free(v12);
}

void sub_1C58AE4BC(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  llvm::Value **v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::Constant *v10;
  llvm::Type *v11;
  llvm::Value **NullValue;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  llvm::Value **v19;
  _WORD v20[20];
  _BYTE v21[32];
  __int16 v22;
  void *v23[2];
  _QWORD v24[16];

  v24[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v23, a2, 0, 0, 0);
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(uint64_t **)(a2 - 8);
  else
    v5 = (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = sub_1C58A06BC((uint64_t)a1, *v5);
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(_QWORD *)(a2 - 8);
  else
    v8 = a2 - 32 * (v7 & 0x7FFFFFF);
  v9 = (uint64_t *)sub_1C58A06BC((uint64_t)a1, *(_QWORD *)(v8 + 32));
  sub_1C58A1544(a1, *v9);
  if (v10)
    NullValue = llvm::Constant::getNullValue(v10, v11);
  else
    NullValue = 0;
  v22 = 257;
  v13 = (unsigned __int8 *)sub_1C4774B48((uint64_t)v23, 33, (uint64_t)v9, (uint64_t)NullValue, (uint64_t)v21);
  v14 = *v9;
  v20[16] = 257;
  v15 = sub_1C4773E38((uint64_t *)v23, 40, v13, v14, (uint64_t)v20);
  v16 = *(_QWORD *)(a2 - 32);
  v17 = *(unsigned __int8 *)(a2 + 16) - 28;
  v22 = 257;
  v18 = sub_1C4773860((uint64_t)v23, v17, v6, v16, (uint64_t)v21, 0);
  v22 = 257;
  v19 = (llvm::Value **)sub_1C4773594((uint64_t)v23, v18, (uint64_t)v15, (uint64_t)v21);
  sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, v19);
  sub_1C58AE65C(a1, a2);
  if (v23[0] != v24)
    free(v23[0]);
}

void sub_1C58AE65C(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::Value *Select;
  uint64_t v8;
  uint64_t v9;
  llvm::Value **v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t *v14;
  llvm::Constant *v15;
  llvm::Type *v16;
  llvm::Value **NullValue;
  uint64_t v18;
  _BYTE v19[32];
  __int16 v20;
  void *v21[2];
  _QWORD v22[16];

  v22[15] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1[1] + 4))
  {
    sub_1C4773D54((uint64_t)v21, a2, 0, 0, 0);
    v4 = *(_DWORD *)(a2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v6 = *(uint64_t **)(a2 - 8);
      v5 = v4 & 0x7FFFFFF;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = (uint64_t *)(a2 - 32 * v5);
    }
    Select = 0;
    if (v5)
    {
      v8 = 32 * v5;
      do
      {
        v9 = *v6;
        v10 = sub_1C58A06BC((uint64_t)a1, *v6);
        if (*(_DWORD *)(a1[1] + 4))
        {
          v11 = (uint64_t *)v10;
          v12 = (unsigned __int8 *)sub_1C58A11D4((uint64_t)a1, v9);
          if (*(_DWORD *)(a1[1] + 4))
          {
            v13 = (uint64_t *)v12;
            if (Select)
            {
              if (!v12 || v12[16] > 0x14u || (llvm::Constant::isNullValue((llvm::Constant *)v12) & 1) == 0)
              {
                v14 = (uint64_t *)sub_1C58AD9E8((uint64_t)a1, v11, (const llvm::APInt *)v21);
                sub_1C58A1544(a1, *v14);
                if (v15)
                  NullValue = llvm::Constant::getNullValue(v15, v16);
                else
                  NullValue = 0;
                v20 = 257;
                v18 = sub_1C4774B48((uint64_t)v21, 33, (uint64_t)v14, (uint64_t)NullValue, (uint64_t)v19);
                v20 = 257;
                Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v21, v18, v13, (uint64_t)Select, (uint64_t)v19, 0);
              }
            }
            else
            {
              Select = (llvm::Value *)v12;
            }
          }
        }
        v6 += 4;
        v8 -= 32;
      }
      while (v8);
    }
    if (*(_DWORD *)(a1[1] + 4))
      *sub_1C62AD7D0((unint64_t)(a1 + 46), a2) = (unint64_t)Select;
    if (v21[0] != v22)
      free(v21[0]);
  }
}

void sub_1C58AE838(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  llvm::PointerType **v7;
  unsigned __int8 *v8;
  llvm::Constant *v9;
  llvm::Type *v10;
  uint64_t *NullValue;
  char v12;
  char v13;
  char *v14;
  char *v15;
  unsigned __int8 **v16;
  llvm::Value *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 ***v22;
  uint64_t v23;
  llvm::Constant *v24;
  llvm::Type *v25;
  llvm::Value **v26;
  llvm::Type *v27;
  llvm::Value **v28;
  char *v29;
  char *v30;
  unsigned __int8 **v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  _WORD v37[20];
  unsigned __int8 *v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v39, a2, 0, 0, 0);
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(a2 - 8);
  else
    v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  v6 = *(unsigned __int8 **)v5;
  v7 = *(llvm::PointerType ***)(v5 + 32);
  v8 = sub_1C58A0068(a1, *(unsigned __int8 **)v5, (uint64_t)&v39, *v7, 256, 1);
  if (byte_1ED8140F0)
    sub_1C58AB300((uint64_t)a1, (uint64_t)v6, a2);
  if (*(_BYTE *)(a2 + 16) == 64)
    sub_1C58AB300((uint64_t)a1, (uint64_t)v7, a2);
  sub_1C58A1544(a1, (uint64_t)*v7);
  if (v9)
    NullValue = (uint64_t *)llvm::Constant::getNullValue(v9, v10);
  else
    NullValue = 0;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v42 + 56) + 40) + 272, *NullValue);
  v13 = v12;
  v14 = (char *)operator new(0x80uLL);
  v15 = v14;
  *((_DWORD *)v14 + 21) = *((_DWORD *)v14 + 21) & 0x38000000 | 2;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 4) = 0;
  v16 = (unsigned __int8 **)(v14 + 32);
  *((_QWORD *)v14 + 8) = **(_QWORD **)*NullValue + 1576;
  v17 = (llvm::Value *)(v14 + 64);
  *((_QWORD *)v14 + 3) = v14 + 64;
  *((_QWORD *)v14 + 7) = v14 + 64;
  *((_QWORD *)v14 + 9) = 0;
  v14[80] = 61;
  v14[81] = 0;
  *((_WORD *)v14 + 41) = 0;
  *((_DWORD *)v14 + 21) = 2;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *((_DWORD *)v14 + 30) = 0;
  *(_QWORD *)v14 = NullValue;
  v20 = NullValue[1];
  v19 = NullValue + 1;
  v18 = v20;
  *((_QWORD *)v14 + 1) = v20;
  if (v20)
    *(_QWORD *)(v18 + 16) = v14 + 8;
  *((_QWORD *)v14 + 2) = v19;
  *v19 = v14;
  if (*((_QWORD *)v14 + 4))
  {
    **((_QWORD **)v14 + 6) = *((_QWORD *)v14 + 5);
    v36 = *((_QWORD *)v14 + 5);
    if (v36)
      *(_QWORD *)(v36 + 16) = *((_QWORD *)v14 + 6);
  }
  *v16 = v8;
  if (v8)
  {
    v23 = *((_QWORD *)v8 + 1);
    v22 = (unsigned __int8 ***)(v8 + 8);
    v21 = v23;
    *((_QWORD *)v14 + 5) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = v14 + 40;
    *((_QWORD *)v14 + 6) = v22;
    *v22 = v16;
  }
  *((_WORD *)v14 + 41) = 2 * (v13 & 0x3F);
  v14[124] = 1;
  v37[16] = 257;
  (*(void (**)(uint64_t, llvm::Value *, _WORD *, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v17, v37, v42, v43);
  if (v40)
  {
    v29 = (char *)v39;
    v30 = (char *)v39 + 16 * v40;
    v31 = (unsigned __int8 **)(v15 + 112);
    do
    {
      v32 = *(_DWORD *)v29;
      v33 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
      if (v33)
      {
        if (!v32)
        {
          v38 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
          llvm::MetadataTracking::track((uint64_t)&v38, v33, 2);
          v34 = *v31;
          goto LABEL_38;
        }
      }
      else
      {
        v34 = *v31;
        if (!*v31 && (v15[87] & 0x20) == 0)
          goto LABEL_35;
        if (!v32)
        {
          v38 = 0;
LABEL_38:
          if (v34)
            llvm::MetadataTracking::untrack((uint64_t)(v15 + 112), v34);
          v35 = v38;
          *v31 = v38;
          if (v35)
            llvm::MetadataTracking::retrack((uint64_t)&v38, v35, (uint64_t)(v15 + 112));
          goto LABEL_35;
        }
      }
      llvm::Value::setMetadata(v17, *(_DWORD *)v29, (llvm::MDNode *)v33);
LABEL_35:
      v29 += 16;
    }
    while (v29 != v30);
  }
  sub_1C58A1544(a1, *(_QWORD *)a2);
  if (v24)
    v26 = llvm::Constant::getNullValue(v24, v25);
  else
    v26 = 0;
  sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, v26);
  v28 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1[1] + 32), v27);
  if (*(_DWORD *)(a1[1] + 4))
    *sub_1C62AD7D0((unint64_t)(a1 + 46), a2) = (unint64_t)v28;
  if (v39 != &v41)
    free(v39);
}

_QWORD *sub_1C58AEBA4(_QWORD *a1, uint64_t *a2)
{
  llvm::Constant *v4;
  llvm::Type *v5;
  llvm::Value **NullValue;
  llvm::Type *v7;
  _QWORD *result;
  _QWORD *v9;

  sub_1C58A1544(a1, *a2);
  if (v4)
    NullValue = llvm::Constant::getNullValue(v4, v5);
  else
    NullValue = 0;
  sub_1C58AB878((uint64_t)a1, a2, NullValue);
  result = llvm::Constant::getNullValue(*(llvm::Constant **)(a1[1] + 32), v7);
  if (*(_DWORD *)(a1[1] + 4))
  {
    v9 = result;
    result = sub_1C62AD7D0((unint64_t)(a1 + 46), (uint64_t)a2);
    *result = v9;
  }
  return result;
}

void sub_1C58AEC24(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  llvm::Value **v6;
  llvm::Value **v7;
  llvm::ConstantInt *v8;
  unsigned __int8 *v9;
  llvm::ConstantInt *v10;
  unsigned __int8 *v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BYTE v21[32];
  __int16 v22;
  void *v23[2];
  _QWORD v24[17];

  v24[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v23, a2, 0, 0, 0);
  v4 = *(unsigned __int8 **)(a2 - 64);
  v5 = *(unsigned __int8 **)(a2 - 32);
  v6 = sub_1C58A06BC((uint64_t)a1, (uint64_t)v4);
  v7 = sub_1C58A06BC((uint64_t)a1, (uint64_t)v5);
  v8 = *v6;
  v22 = 257;
  v9 = sub_1C5098D9C((uint64_t *)v23, v4, (uint64_t)v8, (uint64_t)v21);
  v10 = *v7;
  v22 = 257;
  v11 = sub_1C5098D9C((uint64_t *)v23, v5, (uint64_t)v10, (uint64_t)v21);
  v12 = *(_WORD *)(a2 + 18) & 0x3F;
  v13 = (v12 - 38) < 4;
  v14 = sub_1C58AEE10((uint64_t *)v23, v9, v6, v13);
  v15 = sub_1C58AEF4C((uint64_t)v23, v11, v7, v13);
  v22 = 257;
  v16 = (_QWORD *)sub_1C4774B48((uint64_t)v23, v12, v14, v15, (uint64_t)v21);
  LOWORD(v14) = *(_WORD *)(a2 + 18) & 0x3F;
  v17 = sub_1C58AEF4C((uint64_t)v23, v9, v6, v13);
  v18 = sub_1C58AEE10((uint64_t *)v23, v11, v7, v13);
  v22 = 257;
  v19 = sub_1C4774B48((uint64_t)v23, v14, v17, v18, (uint64_t)v21);
  v22 = 257;
  v20 = sub_1C506EC1C((uint64_t *)v23, v16, v19, (uint64_t)v21);
  sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, (llvm::Value **)v20);
  sub_1C58AE65C(a1, a2);
  if (v23[0] != v24)
    free(v23[0]);
}

uint64_t sub_1C58AEE10(uint64_t *a1, _QWORD *a2, llvm::ConstantInt **a3, int a4)
{
  llvm::Value **v7;
  llvm::ConstantInt **v8;
  llvm::Value **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;
  _BYTE v18[32];
  __int16 v19;
  _BYTE v20[32];
  __int16 v21;

  v21 = 257;
  if (a4)
  {
    v7 = llvm::ConstantInt::get(*a3, 1, 0);
    v8 = (llvm::ConstantInt **)sub_1C506E874((uint64_t)a1, (uint64_t)a3, (uint64_t)v7, (uint64_t)v20, 0, 0);
    v19 = 257;
    v9 = llvm::ConstantInt::get(*v8, 1, 0);
    v10 = sub_1C506ED1C((uint64_t)a1, (uint64_t)v8, (uint64_t)v9, (uint64_t)v18, 0);
    v21 = 257;
    v11 = sub_1C506EC1C(a1, a3, v10, (uint64_t)v20);
    v21 = 257;
    v12 = sub_1C506EAA0((uint64_t)a1, v10, (uint64_t)v20);
    v19 = 257;
    v13 = (_QWORD *)sub_1C4D89BCC((uint64_t)a1, a2, v12, (uint64_t)v18);
    v17 = 257;
    return sub_1C4773594((uint64_t)a1, v13, (uint64_t)v11, (uint64_t)v16);
  }
  else
  {
    v15 = sub_1C506EAA0((uint64_t)a1, (uint64_t)a3, (uint64_t)v20);
    v19 = 257;
    return sub_1C4D89BCC((uint64_t)a1, a2, v15, (uint64_t)v18);
  }
}

uint64_t sub_1C58AEF4C(uint64_t a1, _QWORD *a2, llvm::ConstantInt **a3, int a4)
{
  llvm::ConstantInt **v4;
  _QWORD *v5;
  uint64_t *v6;
  llvm::Value **v7;
  llvm::ConstantInt **v8;
  llvm::Value **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char *v13;
  char v15;
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;

  v4 = a3;
  v5 = a2;
  v6 = (uint64_t *)a1;
  v20 = 257;
  if (a4)
  {
    v7 = llvm::ConstantInt::get(*a3, 1, 0);
    v8 = (llvm::ConstantInt **)sub_1C506E874((uint64_t)v6, (uint64_t)v4, (uint64_t)v7, (uint64_t)v19, 0, 0);
    v18 = 257;
    v9 = llvm::ConstantInt::get(*v8, 1, 0);
    v10 = sub_1C506ED1C((uint64_t)v6, (uint64_t)v8, (uint64_t)v9, (uint64_t)v17, 0);
    v20 = 257;
    v11 = sub_1C506EC1C(v6, v4, v10, (uint64_t)v19);
    v20 = 257;
    v12 = sub_1C506EAA0((uint64_t)v6, (uint64_t)v11, (uint64_t)v19);
    v18 = 257;
    a2 = (_QWORD *)sub_1C4D89BCC((uint64_t)v6, v5, v12, (uint64_t)v17);
    v16 = 257;
    v13 = &v15;
    a1 = (uint64_t)v6;
    a3 = (llvm::ConstantInt **)v10;
  }
  else
  {
    v13 = v19;
  }
  return sub_1C4773594(a1, a2, (uint64_t)a3, (uint64_t)v13);
}

void sub_1C58AF06C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t *v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  llvm::Value **v13;
  int v14;
  uint64_t v15;
  llvm::Value **v16;
  uint64_t v17;
  const llvm::APInt *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ConstantInt *v21;
  llvm::ValueHandleBase *v22;
  uint64_t *v23;
  llvm::Constant *v24;
  llvm::Type *v25;
  llvm::Value **v26;
  uint64_t *v27;
  llvm::Value **v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  unsigned int v39;
  int v40;
  llvm::Value **v42;
  llvm::Constant *v43;
  llvm::Type *v44;
  llvm::Value **v45;
  uint64_t AllocaForValue;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int v56;
  unsigned int v57;
  llvm::Type *v58;
  llvm::Value **v59;
  unsigned int v60;
  uint64_t v61;
  void ***v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  int v74;
  uint64_t *v75;
  int v76;
  uint64_t *v77;
  llvm::Constant *v78;
  llvm::Constant *v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  llvm::Value **v86;
  llvm::Value **v87;
  uint64_t v88;
  llvm::Value **v89;
  _QWORD *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  llvm::Type *v94;
  llvm::Value **v95;
  unsigned int v96;
  uint64_t v97;
  void ***v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  _QWORD *v102;
  uint64_t *v103;
  int v104;
  uint64_t *v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  llvm::Type *v110;
  int PrimitiveSizeInBits;
  int v112;
  uint64_t *v113;
  llvm::Value **v114;
  int v115;
  uint64_t v116;
  llvm::Value **v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  llvm::Type *v120;
  llvm::Value **NullValue;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  llvm::Value **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void **v128;
  uint64_t v129;
  unsigned __int8 *v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  llvm::PointerType *v140;
  llvm::UndefValue *v141;
  llvm::Constant *v142;
  llvm::Type *v143;
  llvm::Value **v144;
  llvm::Value **v145;
  int v146;
  uint64_t *v147;
  llvm::Value **v148;
  llvm::Constant *v149;
  llvm::Type *v150;
  llvm::Value **v151;
  llvm::Value **v152;
  int v153;
  uint64_t v154;
  llvm::Value **v155;
  int v156;
  uint64_t v157;
  uint64_t *v158;
  llvm::Constant *v159;
  llvm::Type *v160;
  llvm::Value **v161;
  int v162;
  uint64_t *v163;
  int v164;
  uint64_t *v165;
  uint64_t *v166;
  llvm::Value **v167;
  llvm::Value **v168;
  int v169;
  uint64_t v170;
  llvm::Value **v171;
  uint64_t v172;
  llvm::Value **v173;
  llvm::Value **v174;
  int v175;
  uint64_t v176;
  llvm::Value **v177;
  uint64_t v178;
  llvm::Type *v179;
  llvm::Value **v180;
  unsigned __int8 *v181;
  llvm::PointerType *v182;
  unsigned __int8 *v183;
  llvm::Constant *v184;
  llvm::Type *v185;
  uint64_t *v186;
  unsigned __int8 *v187;
  llvm::PointerType *v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  llvm::Value *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  unsigned __int8 *v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  char v202;
  char *v203;
  char *v204;
  llvm::Value **v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  unsigned __int8 **v211;
  int v212;
  unsigned __int8 *v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  int v216;
  uint64_t *v217;
  unsigned __int8 *v218;
  uint64_t v219;
  unsigned __int8 *v220;
  uint64_t v221;
  uint64_t *v222;
  int v223;
  uint64_t Declaration;
  uint64_t **v225;
  _QWORD *v226;
  uint64_t *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t *v230;
  _QWORD *v231;
  uint64_t v232;
  int v233;
  uint64_t *v234;
  void *Select;
  llvm::Value **v236;
  int v237;
  uint64_t v238;
  llvm::Value **v239;
  llvm::Value **v240;
  llvm::Type *v241;
  llvm::Value **v242;
  llvm::Value **v243;
  llvm::Type *v244;
  uint64_t v245;
  uint64_t v246;
  llvm::Value **v247;
  unsigned __int8 *v248;
  unsigned __int8 *v249;
  const llvm::APInt *v250;
  uint64_t v251;
  llvm::ConstantInt *v252;
  llvm::ValueHandleBase *v253;
  llvm::Type *v254;
  const llvm::APInt *v255;
  llvm::Constant **v256;
  uint64_t v257;
  uint64_t i;
  llvm::ConstantInt *v259;
  unsigned int v260;
  unint64_t v261;
  llvm::ValueHandleBase *v262;
  unsigned __int8 *v263;
  llvm::Value **v264;
  uint64_t *v265;
  uint64_t v266;
  char v267;
  char v268;
  char *v269;
  char *v270;
  llvm::Value *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 *v276;
  char v277;
  char v278;
  char *v279;
  char *v280;
  unsigned __int8 **v281;
  llvm::Value *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unsigned __int8 ***v287;
  uint64_t v288;
  llvm::Constant *v289;
  uint64_t *v290;
  uint64_t v291;
  unsigned __int8 *v292;
  uint64_t v293;
  unint64_t *v294;
  unsigned __int8 v295;
  uint64_t v296;
  llvm::PointerType **v297;
  unsigned int v298;
  uint64_t *v299;
  unsigned __int8 *v300;
  unsigned __int8 *v301;
  uint64_t v302;
  unsigned __int8 *v303;
  const char *v304;
  uint64_t v305;
  unint64_t v306;
  unsigned __int8 v307;
  int v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD **v314;
  unint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  unsigned __int8 *v319;
  llvm::Value **v320;
  unsigned __int8 *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  unsigned __int8 **v325;
  llvm::Value *v326;
  llvm::Value *v327;
  _QWORD *v328;
  llvm::Value *v329;
  uint64_t v330;
  unsigned __int8 ***v331;
  uint64_t v332;
  char *v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned __int8 *v337;
  llvm::PointerType *v338;
  llvm::PointerType *v339;
  unsigned __int8 *v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  char *v344;
  llvm::Value *v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  char *v349;
  char *v350;
  unsigned __int8 **v351;
  int v352;
  unsigned __int8 *v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  unsigned __int8 v356;
  uint64_t v357;
  char v358;
  uint64_t *v359;
  uint64_t v360;
  llvm::Value **v361;
  char v362;
  llvm::Value **MaskedLoad;
  char *v364;
  char *v365;
  unsigned __int8 **v366;
  int v367;
  unsigned __int8 *v368;
  char *v369;
  char *v370;
  unsigned __int8 **v371;
  int v372;
  unsigned __int8 *v373;
  unsigned __int8 *v374;
  unsigned __int8 *v375;
  char *v376;
  char *v377;
  unsigned __int8 **v378;
  int v379;
  unsigned __int8 *v380;
  unsigned __int8 *v381;
  unsigned __int8 *v382;
  llvm::Constant *v383;
  llvm::Type *v384;
  llvm::Value **v385;
  uint64_t v386;
  uint64_t v387;
  char v388;
  char v389;
  char *v390;
  char *v391;
  llvm::Value *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t *v396;
  char v397;
  char v398;
  char *v399;
  char *v400;
  _QWORD *v401;
  llvm::Value *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  char *v409;
  char *v410;
  unsigned __int8 **v411;
  int v412;
  unsigned __int8 *v413;
  unsigned __int8 *v414;
  unsigned __int8 *v415;
  char *v416;
  char *v417;
  unsigned __int8 **v418;
  int v419;
  unsigned __int8 *v420;
  unsigned __int8 *v421;
  unsigned __int8 *v422;
  char *v423;
  char *v424;
  unsigned __int8 **v425;
  int v426;
  unsigned __int8 *v427;
  unsigned __int8 *v428;
  unsigned __int8 *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD **v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int v437;
  int v438;
  uint64_t v440;
  uint64_t v441;
  int v442;
  unsigned int v443;
  BOOL v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  BOOL v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD **v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unsigned int v465;
  int v466;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472[4];
  __int16 v473;
  unsigned __int8 *v474;
  void *v475;
  uint64_t v476;
  void **v477;
  uint64_t v478;
  __int16 v479;
  uint64_t v480;
  llvm::Value **v481;
  uint64_t v482;
  __int16 v483;
  void *v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;

  v491 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
  if (v4 > 12075)
  {
    if (v4 > 12303)
    {
      switch(v4)
      {
        case 12304:
          sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
          v216 = *(_DWORD *)(a2 + 20);
          if ((v216 & 0x40000000) != 0)
            v217 = *(uint64_t **)(a2 - 8);
          else
            v217 = (uint64_t *)(a2 - 32 * (v216 & 0x7FFFFFF));
          v236 = sub_1C58A06BC(a1, *v217);
          v237 = *(_DWORD *)(a2 + 20);
          if ((v237 & 0x40000000) != 0)
            v238 = *(_QWORD *)(a2 - 8);
          else
            v238 = a2 - 32 * (v237 & 0x7FFFFFF);
          v239 = sub_1C58A06BC(a1, *(_QWORD *)(v238 + 32));
          v480 = 0x100000002;
          v479 = 257;
          v240 = (llvm::Value **)sub_1C486AD20((uint64_t)&v484, (uint64_t)v236, (uint64_t)v239, &v480, 2, (uint64_t)&v475);
          sub_1C58AB878(a1, (uint64_t *)a2, v240);
          sub_1C58AE65C((_QWORD *)a1, a2);
          v29 = (uint64_t *)v484;
          goto LABEL_236;
        case 12343:
          v49 = 8;
          break;
        case 12344:
LABEL_66:
          v49 = 0;
          break;
        default:
          goto LABEL_307;
      }
LABEL_216:
      sub_1C58B2864((_QWORD *)a1, a2, v49);
      return;
    }
    switch(v4)
    {
      case 12076:
        v36 = 32;
        goto LABEL_182;
      case 12077:
      case 12078:
        v36 = 16;
        goto LABEL_182;
      case 12100:
        v49 = 16;
        goto LABEL_216;
      case 12111:
      case 12258:
LABEL_81:
        if (*(_BYTE *)(**(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 8) == 10)
          v71 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 1984;
        else
          v71 = *(_QWORD *)a2;
        v110 = (llvm::Type *)v71;
        if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12)
          v110 = **(llvm::Type ***)(v71 + 16);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v110);
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v112 = *(_DWORD *)(a2 + 20);
        if ((v112 & 0x40000000) != 0)
          v113 = *(uint64_t **)(a2 - 8);
        else
          v113 = (uint64_t *)(a2 - 32 * (v112 & 0x7FFFFFF));
        v114 = sub_1C58A06BC(a1, *v113);
        v115 = *(_DWORD *)(a2 + 20);
        if ((v115 & 0x40000000) != 0)
          v116 = *(_QWORD *)(a2 - 8);
        else
          v116 = a2 - 32 * (v115 & 0x7FFFFFF);
        v117 = sub_1C58A06BC(a1, *(_QWORD *)(v116 + 32));
        v479 = 257;
        v118 = (unsigned __int8 *)sub_1C4773594((uint64_t)&v484, v114, (uint64_t)v117, (uint64_t)&v475);
        v479 = 257;
        v119 = sub_1C4773E38((uint64_t *)&v484, 49, v118, v71, (uint64_t)&v475);
        NullValue = llvm::Constant::getNullValue((llvm::Constant *)v71, v120);
        v479 = 257;
        v122 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v484, 33, (uint64_t)v119, (uint64_t)NullValue, (uint64_t)&v475);
        v483 = 257;
        v123 = sub_1C4773E38((uint64_t *)&v484, 40, v122, v71, (uint64_t)&v480);
        v479 = 257;
        v124 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v123, (PrimitiveSizeInBits - 16), 0);
        v125 = sub_1C506ED1C((uint64_t)&v484, (uint64_t)v123, (uint64_t)v124, (uint64_t)&v475, 0);
        sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
        v127 = v126;
        v479 = 257;
        v128 = &v475;
        v129 = 49;
        v130 = (unsigned __int8 *)v125;
        goto LABEL_178;
      case 12112:
      case 12113:
      case 12114:
      case 12115:
      case 12116:
      case 12117:
      case 12118:
      case 12119:
      case 12120:
      case 12121:
      case 12122:
      case 12123:
      case 12124:
      case 12125:
      case 12126:
      case 12127:
      case 12259:
      case 12260:
      case 12261:
      case 12262:
      case 12263:
      case 12264:
      case 12265:
      case 12266:
      case 12267:
      case 12268:
      case 12269:
      case 12270:
      case 12271:
      case 12272:
      case 12273:
      case 12274:
        goto LABEL_11;
      case 12146:
      case 12147:
      case 12148:
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v50 = *(_DWORD *)(a2 + 20);
        v51 = a2 - 32 * (v50 & 0x7FFFFFF);
        v52 = *(uint64_t **)v51;
        v53 = **(_QWORD **)v51;
        v54 = *(_QWORD *)(v51 + 64);
        v55 = (_QWORD *)(v54 + 24);
        if (*(_DWORD *)(v54 + 32) >= 0x41u)
          v55 = (_QWORD *)*v55;
        v56 = *(_DWORD *)(v53 + 32);
        v57 = *(_DWORD *)v55;
        if ((v50 & 0x40000000) != 0)
          v52 = **(uint64_t ***)(a2 - 8);
        v59 = sub_1C58A06BC(a1, (uint64_t)v52);
        v60 = v57 & 1;
        v475 = &v477;
        v476 = 0x800000000;
        if (v60 >= v56)
        {
          v61 = 0;
          v62 = &v477;
        }
        else
        {
          LODWORD(v61) = 0;
          v62 = &v477;
          do
          {
            v63 = v61;
            v64 = v61 + 2;
            if (v64 > HIDWORD(v476))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v475, (uint64_t)&v477, v64, 4);
              v63 = v476;
              v62 = (void ***)v475;
            }
            v65 = (unsigned int *)v62 + v63;
            *v65 = v60;
            v65[1] = v60;
            v61 = (v476 + 2);
            LODWORD(v476) = v476 + 2;
            v60 += 2;
          }
          while (v60 < v56);
        }
        v483 = 257;
        v90 = llvm::PoisonValue::get(*v59, v58);
        v91 = (uint64_t *)sub_1C486AD20((uint64_t)&v484, (uint64_t)v59, (uint64_t)v90, v62, v61, (uint64_t)&v480);
        if (v475 != &v477)
          free(v475);
        v92 = *(_DWORD *)(a2 + 20);
        if ((v92 & 0x40000000) != 0)
          v93 = *(_QWORD *)(a2 - 8);
        else
          v93 = a2 - 32 * (v92 & 0x7FFFFFF);
        v95 = sub_1C58A06BC(a1, *(_QWORD *)(v93 + 32));
        v475 = &v477;
        v476 = 0x800000000;
        v96 = (v57 >> 4) & 1;
        if (v96 >= v56)
        {
          v97 = 0;
          v98 = &v477;
        }
        else
        {
          LODWORD(v97) = 0;
          v98 = &v477;
          do
          {
            v99 = v97;
            v100 = v97 + 2;
            if (v100 > HIDWORD(v476))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v475, (uint64_t)&v477, v100, 4);
              v99 = v476;
              v98 = (void ***)v475;
            }
            v101 = (unsigned int *)v98 + v99;
            *v101 = v96;
            v101[1] = v96;
            v97 = (v476 + 2);
            LODWORD(v476) = v476 + 2;
            v96 += 2;
          }
          while (v96 < v56);
        }
        v483 = 257;
        v102 = llvm::PoisonValue::get(*v95, v94);
        v103 = (uint64_t *)sub_1C486AD20((uint64_t)&v484, (uint64_t)v95, (uint64_t)v102, v98, v97, (uint64_t)&v480);
        if (v475 != &v477)
          free(v475);
        v475 = 0;
        v476 = 0;
        v477 = &v484;
        v478 = a1;
        v104 = *(_DWORD *)(a2 + 20);
        if ((v104 & 0x40000000) != 0)
          v105 = *(uint64_t **)(a2 - 8);
        else
          v105 = (uint64_t *)(a2 - 32 * (v104 & 0x7FFFFFF));
        v106 = (unsigned __int8 *)sub_1C58A11D4(a1, *v105);
        sub_1C58AD8A8((uint64_t)&v475, v91, v106);
        v107 = *(_DWORD *)(a2 + 20);
        if ((v107 & 0x40000000) != 0)
          v108 = *(_QWORD *)(a2 - 8);
        else
          v108 = a2 - 32 * (v107 & 0x7FFFFFF);
        v109 = (unsigned __int8 *)sub_1C58A11D4(a1, *(_QWORD *)(v108 + 32));
        sub_1C58AD8A8((uint64_t)&v475, v103, v109);
        goto LABEL_127;
      case 12184:
      case 12222:
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
        v79 = v78;
        v80 = *(_DWORD *)(a2 + 20);
        if ((v80 & 0x40000000) != 0)
          v81 = *(uint64_t **)(a2 - 8);
        else
          v81 = (uint64_t *)(a2 - 32 * (v80 & 0x7FFFFFF));
        v174 = sub_1C58A06BC(a1, *v81);
        v175 = *(_DWORD *)(a2 + 20);
        if ((v175 & 0x40000000) != 0)
          v176 = *(_QWORD *)(a2 - 8);
        else
          v176 = a2 - 32 * (v175 & 0x7FFFFFF);
        v177 = sub_1C58A06BC(a1, *(_QWORD *)(v176 + 32));
        v479 = 257;
        v178 = sub_1C4773594((uint64_t)&v484, v174, (uint64_t)v177, (uint64_t)&v475);
        v180 = llvm::Constant::getNullValue(v79, v179);
        v479 = 257;
        v130 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v484, 33, v178, (uint64_t)v180, (uint64_t)&v475);
        v483 = 257;
        v128 = (void **)&v480;
        v129 = 40;
        v127 = (uint64_t)v79;
LABEL_178:
        v28 = (llvm::Value **)sub_1C4773E38((uint64_t *)&v484, v129, v130, v127, (uint64_t)v128);
        goto LABEL_30;
      case 12185:
      case 12186:
      case 12187:
      case 12188:
      case 12189:
      case 12190:
      case 12191:
      case 12215:
      case 12216:
      case 12217:
      case 12218:
      case 12219:
      case 12220:
      case 12223:
      case 12224:
      case 12225:
      case 12226:
      case 12227:
      case 12228:
      case 12229:
      case 12275:
      case 12276:
      case 12277:
      case 12278:
      case 12279:
      case 12280:
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v5 = *(_DWORD *)(a2 + 20);
        if ((v5 & 0x40000000) != 0)
          v6 = *(uint64_t **)(a2 - 8);
        else
          v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
        v13 = sub_1C58A06BC(a1, *v6);
        v14 = *(_DWORD *)(a2 + 20);
        if ((v14 & 0x40000000) != 0)
          v15 = *(_QWORD *)(a2 - 8);
        else
          v15 = a2 - 32 * (v14 & 0x7FFFFFF);
        v16 = sub_1C58A06BC(a1, *(_QWORD *)(v15 + 32));
        v479 = 257;
        v17 = sub_1C4773594((uint64_t)&v484, v13, (uint64_t)v16, (uint64_t)&v475);
        sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
        v20 = v19;
        v479 = 257;
        v21 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1984);
        LODWORD(v481) = *(_DWORD *)(*(_QWORD *)v489 + 1992) >> 8;
        if (v481 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v480, 0, 0);
        else
          v480 = 0;
        v22 = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v480, v18);
        if (v481 >= 0x41 && v480)
          MEMORY[0x1CAA32F9C](v480, 0x1000C8000313F17);
        v23 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v484, v17, (uint64_t)v22, (uint64_t)&v475);
        sub_1C58A1544((_QWORD *)a1, *v23);
        if (v24)
          v26 = llvm::Constant::getNullValue(v24, v25);
        else
          v26 = 0;
        v479 = 257;
        v27 = (uint64_t *)sub_1C4774B48((uint64_t)&v484, 33, (uint64_t)v23, (uint64_t)v26, (uint64_t)&v475);
        v28 = (llvm::Value **)sub_1C58A85DC((_QWORD *)a1, (uint64_t *)&v484, v27, v20, 1);
        goto LABEL_30;
      case 12195:
      case 12199:
        v30 = 2;
        goto LABEL_33;
      case 12196:
      case 12197:
      case 12200:
      case 12201:
      case 12233:
      case 12234:
      case 12235:
      case 12238:
      case 12239:
        v30 = 1;
LABEL_33:
        v31 = 0;
        goto LABEL_50;
      case 12202:
        if (!*(_BYTE *)(a1 + 456))
          return;
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v187 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v188 = (llvm::PointerType *)(*(_QWORD *)v489 + 1960);
        v189 = sub_1C58A0068((_QWORD *)a1, v187, (uint64_t)&v484, v188, 256, 0);
        v191 = v190;
        if (byte_1ED8140F0)
          sub_1C58AB300(a1, (uint64_t)v187, a2);
        v480 = (uint64_t)"_ldmxcsr";
        v483 = 259;
        v192 = (char *)operator new(0x60uLL);
        v193 = v192;
        v194 = (llvm::Value *)(v192 + 32);
        *((_QWORD *)v192 + 2) = 0;
        *((_QWORD *)v192 + 3) = v192 + 32;
        v479 = 257;
        *((_QWORD *)v192 + 4) = v188;
        *((_QWORD *)v192 + 5) = 0;
        *((_WORD *)v192 + 24) = 60;
        *((_DWORD *)v192 + 13) = 1;
        *(_OWORD *)(v192 + 56) = 0u;
        *(_OWORD *)(v192 + 72) = 0u;
        *((_DWORD *)v192 + 22) = 0;
        *(_QWORD *)v192 = v189;
        *((_QWORD *)v192 + 1) = 0;
        if (v189)
        {
          v197 = *((_QWORD *)v189 + 1);
          v196 = v189 + 8;
          v195 = v197;
          *((_QWORD *)v192 + 1) = v197;
          if (v197)
            *(_QWORD *)(v195 + 16) = v192 + 8;
          *((_QWORD *)v192 + 2) = v196;
          *v196 = v192;
        }
        *((_WORD *)v192 + 25) = 0;
        v192[92] = 1;
        llvm::Value::setName((uint64_t ***)v192 + 4, (uint64_t)&v475);
        (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v194, &v480, v487, v488);
        if (!v485)
          goto LABEL_192;
        v364 = (char *)v484;
        v365 = (char *)v484 + 16 * v485;
        v366 = (unsigned __int8 **)(v193 + 80);
        while (1)
        {
          v367 = *(_DWORD *)v364;
          v368 = (unsigned __int8 *)*((_QWORD *)v364 + 1);
          if (v368)
          {
            if (!v367)
            {
              v472[0] = *((_QWORD *)v364 + 1);
              llvm::MetadataTracking::track((uint64_t)v472, v368, 2);
              v198 = *v366;
              goto LABEL_377;
            }
          }
          else
          {
            v198 = *v366;
            if (!*v366 && (v193[55] & 0x20) == 0)
              goto LABEL_374;
            if (!v367)
            {
              v472[0] = 0;
LABEL_377:
              if (v198)
                llvm::MetadataTracking::untrack((uint64_t)(v193 + 80), v198);
              v198 = (unsigned __int8 *)v472[0];
              *v366 = (unsigned __int8 *)v472[0];
              if (v198)
                llvm::MetadataTracking::retrack((uint64_t)v472, v198, (uint64_t)(v193 + 80));
              goto LABEL_374;
            }
          }
          llvm::Value::setMetadata(v194, *(_DWORD *)v364, (llvm::MDNode *)v368);
LABEL_374:
          v364 += 16;
          if (v364 == v365)
          {
LABEL_192:
            v199 = *(_QWORD *)(a1 + 8);
            v200 = *(_QWORD *)(v199 + 32);
            if (*(_DWORD *)(v199 + 4))
            {
              v483 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v487 + 56) + 40) + 272, v200);
              v202 = v201;
              v203 = (char *)operator new(0x60uLL);
              v204 = v203;
              v205 = (llvm::Value **)(v203 + 32);
              *((_QWORD *)v203 + 2) = 0;
              *((_QWORD *)v203 + 3) = v203 + 32;
              v479 = 257;
              *((_QWORD *)v203 + 4) = v200;
              *((_QWORD *)v203 + 5) = 0;
              *((_WORD *)v203 + 24) = 60;
              *((_DWORD *)v203 + 13) = 1;
              *(_OWORD *)(v203 + 56) = 0u;
              *(_OWORD *)(v203 + 72) = 0u;
              *((_DWORD *)v203 + 22) = 0;
              *(_QWORD *)v203 = v191;
              *((_QWORD *)v203 + 1) = 0;
              if (v191)
              {
                v208 = *(_QWORD *)(v191 + 8);
                v207 = (_QWORD *)(v191 + 8);
                v206 = v208;
                *((_QWORD *)v203 + 1) = v208;
                if (v208)
                  *(_QWORD *)(v206 + 16) = v203 + 8;
                *((_QWORD *)v203 + 2) = v207;
                *v207 = v203;
              }
              *((_WORD *)v203 + 25) = 2 * (v202 & 0x3F);
              v203[92] = 1;
              llvm::Value::setName((uint64_t ***)v203 + 4, (uint64_t)&v475);
              (*(void (**)(uint64_t, llvm::Value **, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v205, &v480, v487, v488);
              if (v485)
              {
                v209 = (char *)v484;
                v210 = (char *)v484 + 16 * v485;
                v211 = (unsigned __int8 **)(v204 + 80);
                do
                {
                  v212 = *(_DWORD *)v209;
                  v213 = (unsigned __int8 *)*((_QWORD *)v209 + 1);
                  if (v213)
                  {
                    if (!v212)
                    {
                      v472[0] = *((_QWORD *)v209 + 1);
                      llvm::MetadataTracking::track((uint64_t)v472, v213, 2);
                      v214 = *v211;
                      goto LABEL_209;
                    }
                  }
                  else
                  {
                    v214 = *v211;
                    if (!*v211 && (v204[55] & 0x20) == 0)
                      goto LABEL_206;
                    if (!v212)
                    {
                      v472[0] = 0;
LABEL_209:
                      if (v214)
                        llvm::MetadataTracking::untrack((uint64_t)(v204 + 80), v214);
                      v215 = (unsigned __int8 *)v472[0];
                      *v211 = (unsigned __int8 *)v472[0];
                      if (v215)
                        llvm::MetadataTracking::retrack((uint64_t)v472, v215, (uint64_t)(v204 + 80));
                      goto LABEL_206;
                    }
                  }
                  llvm::Value::setMetadata((llvm::Value *)v205, *(_DWORD *)v209, (llvm::MDNode *)v213);
LABEL_206:
                  v209 += 16;
                }
                while (v209 != v210);
              }
            }
            else
            {
              v205 = llvm::Constant::getNullValue(*(llvm::Constant **)(v199 + 32), (llvm::Type *)v198);
            }
            sub_1C58AB3B4(a1, (uint64_t)v194, (uint64_t)v205, a2);
            goto LABEL_235;
          }
        }
      case 12214:
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v181 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v182 = (llvm::PointerType *)(*(_QWORD *)v489 + 1960);
        v183 = sub_1C58A0068((_QWORD *)a1, v181, (uint64_t)&v484, v182, 256, 1);
        sub_1C58A1544((_QWORD *)a1, (uint64_t)v182);
        if (v184)
          v186 = (uint64_t *)llvm::Constant::getNullValue(v184, v185);
        else
          v186 = 0;
        v275 = llvm::PointerType::get(v182, 0);
        v483 = 257;
        v276 = sub_1C5098D9C((uint64_t *)&v484, v183, v275, (uint64_t)&v480);
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v487 + 56) + 40) + 272, *v186);
        v278 = v277;
        v279 = (char *)operator new(0x80uLL);
        v280 = v279;
        *((_DWORD *)v279 + 21) = *((_DWORD *)v279 + 21) & 0x38000000 | 2;
        *(_QWORD *)v279 = 0;
        *((_QWORD *)v279 + 2) = 0;
        *((_QWORD *)v279 + 1) = 0;
        *((_QWORD *)v279 + 5) = 0;
        *((_QWORD *)v279 + 6) = 0;
        *((_QWORD *)v279 + 4) = 0;
        v281 = (unsigned __int8 **)(v279 + 32);
        *((_QWORD *)v279 + 8) = **(_QWORD **)*v186 + 1576;
        v282 = (llvm::Value *)(v279 + 64);
        *((_QWORD *)v279 + 3) = v279 + 64;
        *((_QWORD *)v279 + 7) = v279 + 64;
        *((_QWORD *)v279 + 9) = 0;
        v279[80] = 61;
        v279[81] = 0;
        *((_WORD *)v279 + 41) = 0;
        *((_DWORD *)v279 + 21) = 2;
        *(_OWORD *)(v279 + 88) = 0u;
        *(_OWORD *)(v279 + 104) = 0u;
        *((_DWORD *)v279 + 30) = 0;
        *(_QWORD *)v279 = v186;
        v285 = v186[1];
        v284 = v186 + 1;
        v283 = v285;
        *((_QWORD *)v279 + 1) = v285;
        if (v285)
          *(_QWORD *)(v283 + 16) = v279 + 8;
        *((_QWORD *)v279 + 2) = v284;
        *v284 = v279;
        if (*((_QWORD *)v279 + 4))
        {
          **((_QWORD **)v279 + 6) = *((_QWORD *)v279 + 5);
          v430 = *((_QWORD *)v279 + 5);
          if (v430)
            *(_QWORD *)(v430 + 16) = *((_QWORD *)v279 + 6);
        }
        *v281 = v276;
        if (v276)
        {
          v288 = *((_QWORD *)v276 + 1);
          v287 = (unsigned __int8 ***)(v276 + 8);
          v286 = v288;
          *((_QWORD *)v279 + 5) = v288;
          if (v288)
            *(_QWORD *)(v286 + 16) = v279 + 40;
          *((_QWORD *)v279 + 6) = v287;
          *v287 = v281;
        }
        *((_WORD *)v279 + 41) = 2 * (v278 & 0x3F);
        v279[124] = 1;
        v479 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v282, &v475, v487, v488);
        if (!v485)
          goto LABEL_288;
        v376 = (char *)v484;
        v377 = (char *)v484 + 16 * v485;
        v378 = (unsigned __int8 **)(v280 + 112);
        break;
      case 12243:
      case 12246:
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v76 = *(_DWORD *)(a2 + 20);
        if ((v76 & 0x40000000) != 0)
          v77 = *(uint64_t **)(a2 - 8);
        else
          v77 = (uint64_t *)(a2 - 32 * (v76 & 0x7FFFFFF));
        v168 = sub_1C58A06BC(a1, *v77);
        v169 = *(_DWORD *)(a2 + 20);
        if ((v169 & 0x40000000) != 0)
          v170 = *(_QWORD *)(a2 - 8);
        else
          v170 = a2 - 32 * (v169 & 0x7FFFFFF);
        v171 = sub_1C58A06BC(a1, *(_QWORD *)(v170 + 32));
        v479 = 257;
        v172 = sub_1C4773594((uint64_t)&v484, v168, (uint64_t)v171, (uint64_t)&v475);
        v480 = 0x100000002;
        v479 = 257;
        v173 = (llvm::Value **)sub_1C486AD20((uint64_t)&v484, (uint64_t)v168, v172, &v480, 2, (uint64_t)&v475);
        sub_1C58AB878(a1, (uint64_t *)a2, v173);
        sub_1C58AE65C((_QWORD *)a1, a2);
        v29 = (uint64_t *)v484;
        goto LABEL_236;
      case 12248:
      case 12249:
      case 12250:
      case 12296:
LABEL_40:
        v36 = 0;
LABEL_182:
        sub_1C58B23E8((_QWORD *)a1, a2, v36);
        return;
      case 12254:
        goto LABEL_66;
      default:
        goto LABEL_307;
    }
    while (1)
    {
      v379 = *(_DWORD *)v376;
      v380 = (unsigned __int8 *)*((_QWORD *)v376 + 1);
      if (v380)
      {
        if (!v379)
        {
          v472[0] = *((_QWORD *)v376 + 1);
          llvm::MetadataTracking::track((uint64_t)v472, v380, 2);
          v381 = *v378;
          goto LABEL_408;
        }
      }
      else
      {
        v381 = *v378;
        if (!*v378 && (v280[87] & 0x20) == 0)
          goto LABEL_405;
        if (!v379)
        {
          v472[0] = 0;
LABEL_408:
          if (v381)
            llvm::MetadataTracking::untrack((uint64_t)(v280 + 112), v381);
          v382 = (unsigned __int8 *)v472[0];
          *v378 = (unsigned __int8 *)v472[0];
          if (v382)
            llvm::MetadataTracking::retrack((uint64_t)v472, v382, (uint64_t)(v280 + 112));
          goto LABEL_405;
        }
      }
      llvm::Value::setMetadata(v282, *(_DWORD *)v376, (llvm::MDNode *)v380);
LABEL_405:
      v376 += 16;
      if (v376 == v377)
      {
LABEL_288:
        if (byte_1ED8140F0)
          sub_1C58AB300(a1, (uint64_t)v181, a2);
        goto LABEL_235;
      }
    }
  }
  if (v4 <= 11696)
  {
    if (v4 > 328)
    {
      switch(v4)
      {
        case 11233:
        case 11234:
        case 11235:
        case 11236:
          goto LABEL_40;
        case 11237:
        case 11238:
        case 11239:
        case 11240:
        case 11241:
        case 11242:
        case 11243:
        case 11244:
        case 11245:
        case 11246:
        case 11247:
        case 11250:
        case 11251:
        case 11252:
        case 11253:
        case 11255:
        case 11256:
        case 11257:
        case 11258:
        case 11285:
        case 11286:
        case 11287:
        case 11288:
        case 11289:
        case 11290:
        case 11291:
        case 11292:
        case 11293:
        case 11294:
        case 11295:
        case 11296:
        case 11297:
        case 11298:
        case 11299:
        case 11300:
        case 11301:
        case 11302:
        case 11303:
        case 11306:
        case 11307:
          goto LABEL_307;
        case 11248:
        case 11249:
          goto LABEL_66;
        case 11254:
          goto LABEL_81;
        case 11259:
        case 11260:
        case 11261:
        case 11262:
        case 11263:
        case 11264:
        case 11269:
        case 11270:
        case 11271:
        case 11272:
        case 11275:
        case 11276:
        case 11277:
        case 11278:
        case 11279:
        case 11280:
          goto LABEL_11;
        case 11265:
        case 11266:
        case 11267:
        case 11268:
        case 11273:
        case 11274:
        case 11281:
        case 11282:
        case 11283:
        case 11284:
          goto LABEL_35;
        case 11304:
        case 11305:
        case 11308:
        case 11309:
        case 11310:
        case 11311:
        case 11312:
          goto LABEL_49;
        default:
          if (v4 == 329)
            goto LABEL_164;
          goto LABEL_307;
      }
    }
    if (v4 <= 184)
    {
      if (v4 <= 164)
      {
        if ((v4 - 148) < 2)
        {
          sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
          v74 = *(_DWORD *)(a2 + 20);
          if ((v74 & 0x40000000) != 0)
            v75 = *(uint64_t **)(a2 - 8);
          else
            v75 = (uint64_t *)(a2 - 32 * (v74 & 0x7FFFFFF));
          v152 = sub_1C58A06BC(a1, *v75);
          v153 = *(_DWORD *)(a2 + 20);
          if ((v153 & 0x40000000) != 0)
            v154 = *(_QWORD *)(a2 - 8);
          else
            v154 = a2 - 32 * (v153 & 0x7FFFFFF);
          v155 = sub_1C58A06BC(a1, *(_QWORD *)(v154 + 32));
          v156 = *(_DWORD *)(a2 + 20);
          if ((v156 & 0x40000000) != 0)
            v157 = *(_QWORD *)(a2 - 8);
          else
            v157 = a2 - 32 * (v156 & 0x7FFFFFF);
          v158 = (uint64_t *)sub_1C58A06BC(a1, *(_QWORD *)(v157 + 64));
          sub_1C58A1544((_QWORD *)a1, *v158);
          if (v159)
            v161 = llvm::Constant::getNullValue(v159, v160);
          else
            v161 = 0;
          v479 = 257;
          v218 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v484, 33, (uint64_t)v158, (uint64_t)v161, (uint64_t)&v475);
          v219 = *v158;
          v483 = 257;
          v220 = sub_1C4773E38((uint64_t *)&v484, 40, v218, v219, (uint64_t)&v480);
          v221 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
          v222 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40);
          v223 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
          v475 = *(void **)v220;
          Declaration = llvm::Intrinsic::getDeclaration(v222, v223, (uint64_t *)&v475, 1);
          if (Declaration)
            v225 = *(uint64_t ***)(Declaration + 24);
          else
            v225 = 0;
          v480 = (uint64_t)v152;
          v481 = v155;
          v482 = v221;
          v479 = 257;
          v226 = (_QWORD *)sub_1C4774778((uint64_t *)&v484, v225, Declaration, &v480, 3, (uint64_t)&v475, 0);
          v479 = 257;
          v28 = (llvm::Value **)sub_1C4773594((uint64_t)&v484, v226, (uint64_t)v220, (uint64_t)&v475);
LABEL_30:
          sub_1C58AB878(a1, (uint64_t *)a2, v28);
          sub_1C58AE65C((_QWORD *)a1, a2);
          goto LABEL_31;
        }
        if (v4 != 1)
        {
          if (v4 == 9)
          {
            sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
            v9 = *(uint64_t **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
            v480 = *v9;
            v10 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)a1 + 40), 9, &v480, 1);
            v11 = v10;
            if (v10)
              v12 = *(uint64_t ***)(v10 + 24);
            else
              v12 = 0;
            v472[0] = (uint64_t)sub_1C58A06BC(a1, (uint64_t)v9);
            v479 = 257;
            v242 = (llvm::Value **)sub_1C4774778((uint64_t *)&v484, v12, v11, v472, 1, (uint64_t)&v475, 0);
            sub_1C58AB878(a1, (uint64_t *)a2, v242);
            v243 = sub_1C58A11D4(a1, (uint64_t)v9);
            if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
              *sub_1C62AD7D0(a1 + 368, a2) = (unint64_t)v243;
LABEL_31:
            v29 = (uint64_t *)v484;
LABEL_236:
            if (v29 != &v486)
              free(v29);
            return;
          }
          goto LABEL_307;
        }
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v162 = *(_DWORD *)(a2 + 20);
        if ((v162 & 0x40000000) != 0)
          v163 = *(uint64_t **)(a2 - 8);
        else
          v163 = (uint64_t *)(a2 - 32 * (v162 & 0x7FFFFFF));
        v167 = sub_1C58A06BC(a1, *v163);
LABEL_229:
        sub_1C58AB878(a1, (uint64_t *)a2, v167);
        v233 = *(_DWORD *)(a2 + 20);
        if ((v233 & 0x40000000) != 0)
          v234 = *(uint64_t **)(a2 - 8);
        else
          v234 = (uint64_t *)(a2 - 32 * (v233 & 0x7FFFFFF));
        Select = sub_1C58A11D4(a1, *v234);
LABEL_233:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
          *sub_1C62AD7D0(a1 + 368, a2) = (unint64_t)Select;
        goto LABEL_235;
      }
      if (v4 == 165)
      {
        sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
        if (v149)
          v151 = llvm::Constant::getNullValue(v149, v150);
        else
          v151 = 0;
        sub_1C58AB878(a1, (uint64_t *)a2, v151);
        v148 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 32), v241);
LABEL_246:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
          *sub_1C62AD7D0(a1 + 368, a2) = (unint64_t)v148;
        return;
      }
      if (v4 != 166)
      {
        if (v4 == 168)
        {
          if (*(_BYTE *)(a1 + 458))
          {
            AllocaForValue = llvm::findAllocaForValue(*(llvm **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), 0);
            if (!AllocaForValue)
              *(_BYTE *)(a1 + 864) = 0;
            v47 = *(unsigned int *)(a1 + 1040);
            if (v47 >= *(_DWORD *)(a1 + 1044))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1032, a1 + 1048, v47 + 1, 16);
              LODWORD(v47) = *(_DWORD *)(a1 + 1040);
            }
            v48 = (uint64_t *)(*(_QWORD *)(a1 + 1032) + 16 * v47);
            *v48 = a2;
            v48[1] = AllocaForValue;
            ++*(_DWORD *)(a1 + 1040);
          }
          return;
        }
LABEL_307:
        v308 = *(unsigned __int8 *)(a2 + 16);
        if (v308 == 84)
        {
          v309 = 0;
        }
        else if (v308 == 39)
        {
          v309 = (*(_DWORD *)(a2 + 80) + 1);
        }
        else
        {
          v309 = 2;
        }
        v310 = *(_DWORD *)(a2 + 20);
        if (v310 < 0
          && (v431 = a2 - 32 * (v310 & 0x7FFFFFF), v432 = *(_QWORD *)(v431 - 8), (v432 & 0xFFFFFFFF0) != 0))
        {
          v312 = -(uint64_t)(v310 & 0x7FFFFFF);
          v311 = *(_DWORD *)(v431 - 12) - *(_DWORD *)(v431 - v432);
        }
        else
        {
          v311 = 0;
          v312 = -(uint64_t)(v310 & 0x7FFFFFF);
        }
        v313 = a2 - 32 * v309 + 32 * -v311;
        v314 = (_QWORD **)(a2 + 32 * v312);
        v315 = (unint64_t)(v313 - (_QWORD)v314 - 32) >> 5;
        if (!(_DWORD)v315)
          goto LABEL_532;
        if ((_DWORD)v315 != 1)
        {
          if ((_DWORD)v315 == 2
            && *(_BYTE *)(**v314 + 8) == 15
            && (*(_DWORD *)(*v314[4] + 8) & 0xFE) == 0x12
            && *(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
          {
            v316 = *(_QWORD *)(a2 + 64);
            if (!v316 || (*(_BYTE *)(v316 + 17) & 0x30) == 0)
            {
              if (v310 < 0)
              {
                v463 = (uint64_t)*(v314 - 1);
                v461 = v314 - 1;
                v462 = v463;
                if (v463)
                {
                  v464 = -v462;
                  do
                  {
                    v465 = (*(_DWORD **)((char *)v461 + v464))[2];
                    v444 = v465 > 7;
                    v466 = (1 << v465) & 0x83;
                    if (v444 || v466 == 0)
                      goto LABEL_322;
                    v464 += 16;
                  }
                  while (v464);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) == 0)
              {
LABEL_322:
                sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
                v317 = *(_DWORD *)(a2 + 20);
                v318 = a2 - 32 * (v317 & 0x7FFFFFF);
                v319 = *(unsigned __int8 **)v318;
                if ((v317 & 0x40000000) != 0)
                  v318 = *(_QWORD *)(a2 - 8);
                v320 = sub_1C58A06BC(a1, *(_QWORD *)(v318 + 32));
                v321 = sub_1C58A0068((_QWORD *)a1, v319, (uint64_t)&v484, *v320, 256, 1);
                v323 = v322;
                v324 = (char *)operator new(0x80uLL);
                *((_DWORD *)v324 + 21) = *((_DWORD *)v324 + 21) & 0x38000000 | 2;
                *(_QWORD *)v324 = 0;
                *((_QWORD *)v324 + 2) = 0;
                *((_QWORD *)v324 + 1) = 0;
                *((_QWORD *)v324 + 5) = 0;
                *((_QWORD *)v324 + 6) = 0;
                *((_QWORD *)v324 + 4) = 0;
                v325 = (unsigned __int8 **)(v324 + 32);
                *((_QWORD *)v324 + 8) = **(_QWORD **)*v320 + 1576;
                v326 = (llvm::Value *)(v324 + 64);
                *((_QWORD *)v324 + 3) = v324 + 64;
                *((_QWORD *)v324 + 7) = v324 + 64;
                *((_QWORD *)v324 + 9) = 0;
                v324[80] = 61;
                v324[81] = 0;
                *((_WORD *)v324 + 41) = 0;
                *((_DWORD *)v324 + 21) = 2;
                *(_OWORD *)(v324 + 88) = 0u;
                *(_OWORD *)(v324 + 104) = 0u;
                *((_DWORD *)v324 + 30) = 0;
                *(_QWORD *)v324 = v320;
                v329 = v320[1];
                v328 = v320 + 1;
                v327 = v329;
                *((_QWORD *)v324 + 1) = v329;
                if (v329)
                  *((_QWORD *)v327 + 2) = v324 + 8;
                *((_QWORD *)v324 + 2) = v328;
                *v328 = v324;
                if (*((_QWORD *)v324 + 4))
                {
                  **((_QWORD **)v324 + 6) = *((_QWORD *)v324 + 5);
                  v468 = *((_QWORD *)v324 + 5);
                  if (v468)
                    *(_QWORD *)(v468 + 16) = *((_QWORD *)v324 + 6);
                }
                *v325 = v321;
                if (v321)
                {
                  v332 = *((_QWORD *)v321 + 1);
                  v331 = (unsigned __int8 ***)(v321 + 8);
                  v330 = v332;
                  *((_QWORD *)v324 + 5) = v332;
                  if (v332)
                    *(_QWORD *)(v330 + 16) = v324 + 40;
                  *((_QWORD *)v324 + 6) = v331;
                  *v331 = v325;
                }
                *((_WORD *)v324 + 41) = 0;
                v333 = v324;
                v324[124] = 1;
                v479 = 257;
                (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v326, &v475, v487, v488);
                if (!v485)
                {
LABEL_332:
                  if (byte_1ED8140F0)
                    sub_1C58AB300(a1, (uint64_t)v319, a2);
                  if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
                    goto LABEL_235;
                  v334 = *(_DWORD *)(a2 + 20);
                  if ((v334 & 0x40000000) != 0)
                    v335 = *(_QWORD *)(a2 - 8);
                  else
                    v335 = a2 - 32 * (v334 & 0x7FFFFFF);
                  v396 = (uint64_t *)sub_1C58A11D4(a1, *(_QWORD *)(v335 + 32));
                  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v487 + 56) + 40) + 272, *v396);
                  v398 = v397;
                  v399 = (char *)operator new(0x80uLL);
                  v400 = v399;
                  *((_DWORD *)v399 + 21) = *((_DWORD *)v399 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v399 = 0;
                  *((_QWORD *)v399 + 2) = 0;
                  *((_QWORD *)v399 + 1) = 0;
                  *((_QWORD *)v399 + 5) = 0;
                  *((_QWORD *)v399 + 6) = 0;
                  *((_QWORD *)v399 + 4) = 0;
                  v401 = v399 + 32;
                  *((_QWORD *)v399 + 8) = **(_QWORD **)*v396 + 1576;
                  v402 = (llvm::Value *)(v399 + 64);
                  *((_QWORD *)v399 + 3) = v399 + 64;
                  *((_QWORD *)v399 + 7) = v399 + 64;
                  *((_QWORD *)v399 + 9) = 0;
                  v399[80] = 61;
                  v399[81] = 0;
                  *((_WORD *)v399 + 41) = 0;
                  *((_DWORD *)v399 + 21) = 2;
                  *(_OWORD *)(v399 + 88) = 0u;
                  *(_OWORD *)(v399 + 104) = 0u;
                  *((_DWORD *)v399 + 30) = 0;
                  *(_QWORD *)v399 = v396;
                  v405 = v396[1];
                  v404 = v396 + 1;
                  v403 = v405;
                  *((_QWORD *)v399 + 1) = v405;
                  if (v405)
                    *(_QWORD *)(v403 + 16) = v399 + 8;
                  *((_QWORD *)v399 + 2) = v404;
                  *v404 = v399;
                  if (*((_QWORD *)v399 + 4))
                  {
                    **((_QWORD **)v399 + 6) = *((_QWORD *)v399 + 5);
                    v469 = *((_QWORD *)v399 + 5);
                    if (v469)
                      *(_QWORD *)(v469 + 16) = *((_QWORD *)v399 + 6);
                  }
                  *v401 = v323;
                  if (v323)
                  {
                    v408 = *(_QWORD *)(v323 + 8);
                    v407 = (_QWORD *)(v323 + 8);
                    v406 = v408;
                    *((_QWORD *)v399 + 5) = v408;
                    if (v408)
                      *(_QWORD *)(v406 + 16) = v399 + 40;
                    *((_QWORD *)v399 + 6) = v407;
                    *v407 = v401;
                  }
                  *((_WORD *)v399 + 41) = 2 * (v398 & 0x3F);
                  v399[124] = 1;
                  v479 = 257;
                  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v402, &v475, v487, v488);
                  if (!v485)
                    goto LABEL_235;
                  v409 = (char *)v484;
                  v410 = (char *)v484 + 16 * v485;
                  v411 = (unsigned __int8 **)(v400 + 112);
                  while (1)
                  {
                    v412 = *(_DWORD *)v409;
                    v413 = (unsigned __int8 *)*((_QWORD *)v409 + 1);
                    if (v413)
                    {
                      if (!v412)
                      {
                        v480 = *((_QWORD *)v409 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v480, v413, 2);
                        v414 = *v411;
                        goto LABEL_448;
                      }
                    }
                    else
                    {
                      v414 = *v411;
                      if (!*v411 && (v400[87] & 0x20) == 0)
                        goto LABEL_445;
                      if (!v412)
                      {
                        v480 = 0;
LABEL_448:
                        if (v414)
                          llvm::MetadataTracking::untrack((uint64_t)(v400 + 112), v414);
                        v415 = (unsigned __int8 *)v480;
                        *v411 = (unsigned __int8 *)v480;
                        if (v415)
                          llvm::MetadataTracking::retrack((uint64_t)&v480, v415, (uint64_t)(v400 + 112));
                        goto LABEL_445;
                      }
                    }
                    llvm::Value::setMetadata(v402, *(_DWORD *)v409, (llvm::MDNode *)v413);
LABEL_445:
                    v409 += 16;
                    if (v409 == v410)
                      goto LABEL_235;
                  }
                }
                v423 = (char *)v484;
                v424 = (char *)v484 + 16 * v485;
                v425 = (unsigned __int8 **)(v333 + 112);
                while (1)
                {
                  v426 = *(_DWORD *)v423;
                  v427 = (unsigned __int8 *)*((_QWORD *)v423 + 1);
                  if (v427)
                  {
                    if (!v426)
                    {
                      v480 = *((_QWORD *)v423 + 1);
                      llvm::MetadataTracking::track((uint64_t)&v480, v427, 2);
                      v428 = *v425;
                      goto LABEL_481;
                    }
                  }
                  else
                  {
                    v428 = *v425;
                    if (!*v425 && (v333[87] & 0x20) == 0)
                      goto LABEL_478;
                    if (!v426)
                    {
                      v480 = 0;
LABEL_481:
                      if (v428)
                        llvm::MetadataTracking::untrack((uint64_t)(v333 + 112), v428);
                      v429 = (unsigned __int8 *)v480;
                      *v425 = (unsigned __int8 *)v480;
                      if (v429)
                        llvm::MetadataTracking::retrack((uint64_t)&v480, v429, (uint64_t)(v333 + 112));
                      goto LABEL_478;
                    }
                  }
                  llvm::Value::setMetadata(v326, *(_DWORD *)v423, (llvm::MDNode *)v427);
LABEL_478:
                  v423 += 16;
                  if (v423 == v424)
                    goto LABEL_332;
                }
              }
            }
          }
LABEL_503:
          v440 = *(_QWORD *)(a2 + 64);
          if (!v440 || (*(_BYTE *)(v440 + 17) & 0x10) == 0)
          {
            LODWORD(v484) = 7;
            if (sub_1C53E4BBC(a2, (__int32 *)&v484, 1uLL))
            {
              v458 = *(_QWORD *)(a2 - 32);
              if (!v458
                || *(_BYTE *)(v458 + 16)
                || *(_QWORD *)(v458 + 24) != *(_QWORD *)(a2 + 72)
                || *(_DWORD *)(v458 + 36) != 7)
              {
                goto LABEL_532;
              }
            }
            if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44))
              goto LABEL_532;
          }
          v441 = *(_QWORD *)a2;
          v442 = *(_DWORD *)(*(_QWORD *)a2 + 8);
          if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
          {
            v443 = *(unsigned __int8 *)(**(_QWORD **)(v441 + 16) + 8);
            if (v443 == 13)
              goto LABEL_515;
          }
          else
          {
            v443 = *(_DWORD *)(*(_QWORD *)a2 + 8);
            if (v442 == 13)
            {
LABEL_515:
              v445 = *(unsigned __int8 *)(a2 + 16);
              if (v445 == 84)
              {
                v446 = 0;
              }
              else if (v445 == 39)
              {
                v446 = (*(_DWORD *)(a2 + 80) + 1);
              }
              else
              {
                v446 = 2;
              }
              v447 = 0;
              v448 = *(_DWORD *)(a2 + 20);
              v449 = v448 & 0x7FFFFFF;
              if (v448 < 0)
              {
                v459 = a2 - 32 * (v448 & 0x7FFFFFF);
                v460 = *(_QWORD *)(v459 - 8);
                if ((v460 & 0xFFFFFFFF0) != 0)
                  v447 = (*(_DWORD *)(v459 - 12) - *(_DWORD *)(v459 - v460));
                else
                  v447 = 0;
              }
              v450 = -32 * v446 - 32 * v447 - -32 * v449 - 32;
              if ((v450 & 0x1FFFFFFFE0) == 0)
              {
                sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
                v475 = 0;
                v476 = 0;
                v477 = &v484;
                v478 = a1;
LABEL_127:
                sub_1C58AD810((uint64_t)&v475, (uint64_t *)a2);
LABEL_235:
                v29 = (uint64_t *)v484;
                goto LABEL_236;
              }
              v451 = v450 >> 5;
              v452 = (v450 >> 5);
              v453 = -32 * v449;
              v454 = -(uint64_t)v451;
              while (**(_QWORD **)(a2 + v453) == v441)
              {
                v453 += 32;
                v455 = __CFADD__(v454++, 1);
                if (v455)
                {
                  sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
                  v475 = 0;
                  v476 = 0;
                  v456 = -v452;
                  v457 = a2;
                  v477 = &v484;
                  v478 = a1;
                  do
                  {
                    sub_1C58AD7B0((uint64_t)&v475, *(_QWORD *)(v457 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
                    v457 += 32;
                    v455 = __CFADD__(v456++, 1);
                  }
                  while (!v455);
                  goto LABEL_127;
                }
              }
LABEL_532:
              sub_1C58AB484((llvm *)a1, a2);
              return;
            }
          }
          v444 = v442 != 10 && v443 > 6;
          if (v444)
            goto LABEL_532;
          goto LABEL_515;
        }
        if (*(_BYTE *)(**v314 + 8) != 15 || (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
          goto LABEL_503;
        v336 = *(_QWORD *)(a2 + 64);
        if (!v336 || (*(_BYTE *)(v336 + 17) & 0x30) == 0)
        {
          if (v310 < 0)
          {
            v435 = (uint64_t)*(v314 - 1);
            v433 = v314 - 1;
            v434 = v435;
            if (v435)
            {
              v436 = -v434;
              do
              {
                v437 = (*(_DWORD **)((char *)v433 + v436))[2];
                v444 = v437 > 7;
                v438 = (1 << v437) & 0x83;
                if (v444 || v438 == 0)
                  goto LABEL_503;
                v436 += 16;
              }
              while (v436);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44))
          {
            goto LABEL_503;
          }
        }
        sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
        v337 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
        if (*(_BYTE *)(a1 + 457))
        {
          v339 = v338;
          v340 = sub_1C58A0068((_QWORD *)a1, v337, (uint64_t)&v484, v338, 256, 0);
          v342 = v341;
          v480 = (uint64_t)"_msld";
          v483 = 259;
          v343 = (char *)operator new(0x60uLL);
          v344 = v343;
          v345 = (llvm::Value *)(v343 + 32);
          *((_QWORD *)v343 + 2) = 0;
          *((_QWORD *)v343 + 3) = v343 + 32;
          v479 = 257;
          *((_QWORD *)v343 + 4) = v339;
          *((_QWORD *)v343 + 5) = 0;
          *((_WORD *)v343 + 24) = 60;
          *((_DWORD *)v343 + 13) = 1;
          *(_OWORD *)(v343 + 56) = 0u;
          *(_OWORD *)(v343 + 72) = 0u;
          *((_DWORD *)v343 + 22) = 0;
          *(_QWORD *)v343 = v340;
          *((_QWORD *)v343 + 1) = 0;
          if (v340)
          {
            v348 = *((_QWORD *)v340 + 1);
            v347 = v340 + 8;
            v346 = v348;
            *((_QWORD *)v343 + 1) = v348;
            if (v348)
              *(_QWORD *)(v346 + 16) = v343 + 8;
            *((_QWORD *)v343 + 2) = v347;
            *v347 = v343;
          }
          *((_WORD *)v343 + 25) = 0;
          v343[92] = 1;
          llvm::Value::setName((uint64_t ***)v343 + 4, (uint64_t)&v475);
          (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v345, &v480, v487, v488);
          if (v485)
          {
            v349 = (char *)v484;
            v350 = (char *)v484 + 16 * v485;
            v351 = (unsigned __int8 **)(v344 + 80);
            do
            {
              v352 = *(_DWORD *)v349;
              v353 = (unsigned __int8 *)*((_QWORD *)v349 + 1);
              if (v353)
              {
                if (!v352)
                {
                  v472[0] = *((_QWORD *)v349 + 1);
                  llvm::MetadataTracking::track((uint64_t)v472, v353, 2);
                  v354 = *v351;
                  goto LABEL_361;
                }
              }
              else
              {
                v354 = *v351;
                if (!*v351 && (v344[55] & 0x20) == 0)
                  goto LABEL_358;
                if (!v352)
                {
                  v472[0] = 0;
LABEL_361:
                  if (v354)
                    llvm::MetadataTracking::untrack((uint64_t)(v344 + 80), v354);
                  v355 = (unsigned __int8 *)v472[0];
                  *v351 = (unsigned __int8 *)v472[0];
                  if (v355)
                    llvm::MetadataTracking::retrack((uint64_t)v472, v355, (uint64_t)(v344 + 80));
                  goto LABEL_358;
                }
              }
              llvm::Value::setMetadata(v345, *(_DWORD *)v349, (llvm::MDNode *)v353);
LABEL_358:
              v349 += 16;
            }
            while (v349 != v350);
          }
          sub_1C58AB878(a1, (uint64_t *)a2, (llvm::Value **)v345);
        }
        else
        {
          sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
          if (v383)
            v385 = llvm::Constant::getNullValue(v383, v384);
          else
            v385 = 0;
          sub_1C58AB878(a1, (uint64_t *)a2, v385);
          v342 = 0;
        }
        if (byte_1ED8140F0)
          sub_1C58AB300(a1, (uint64_t)v337, a2);
        v386 = *(_QWORD *)(a1 + 8);
        if (!*(_DWORD *)(v386 + 4))
          goto LABEL_235;
        v387 = *(_QWORD *)(v386 + 32);
        if (*(_BYTE *)(a1 + 457))
        {
          v483 = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v487 + 56) + 40) + 272, v387);
          v389 = v388;
          v390 = (char *)operator new(0x60uLL);
          v391 = v390;
          v392 = (llvm::Value *)(v390 + 32);
          *((_QWORD *)v390 + 2) = 0;
          *((_QWORD *)v390 + 3) = v390 + 32;
          v479 = 257;
          *((_QWORD *)v390 + 4) = v387;
          *((_QWORD *)v390 + 5) = 0;
          *((_WORD *)v390 + 24) = 60;
          *((_DWORD *)v390 + 13) = 1;
          *(_OWORD *)(v390 + 56) = 0u;
          *(_OWORD *)(v390 + 72) = 0u;
          *((_DWORD *)v390 + 22) = 0;
          *(_QWORD *)v390 = v342;
          *((_QWORD *)v390 + 1) = 0;
          if (v342)
          {
            v395 = *(_QWORD *)(v342 + 8);
            v394 = (_QWORD *)(v342 + 8);
            v393 = v395;
            *((_QWORD *)v390 + 1) = v395;
            if (v395)
              *(_QWORD *)(v393 + 16) = v390 + 8;
            *((_QWORD *)v390 + 2) = v394;
            *v394 = v390;
          }
          *((_WORD *)v390 + 25) = 2 * (v389 & 0x3F);
          v390[92] = 1;
          llvm::Value::setName((uint64_t ***)v390 + 4, (uint64_t)&v475);
          (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v392, &v480, v487, v488);
          if (!v485)
          {
LABEL_425:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
              *sub_1C62AD7D0(a1 + 368, a2) = (unint64_t)v392;
            goto LABEL_235;
          }
          v416 = (char *)v484;
          v417 = (char *)v484 + 16 * v485;
          v418 = (unsigned __int8 **)(v391 + 80);
          while (1)
          {
            v419 = *(_DWORD *)v416;
            v420 = (unsigned __int8 *)*((_QWORD *)v416 + 1);
            if (v420)
            {
              if (!v419)
              {
                v472[0] = *((_QWORD *)v416 + 1);
                llvm::MetadataTracking::track((uint64_t)v472, v420, 2);
                v421 = *v418;
                goto LABEL_466;
              }
            }
            else
            {
              v421 = *v418;
              if (!*v418 && (v391[55] & 0x20) == 0)
                goto LABEL_463;
              if (!v419)
              {
                v472[0] = 0;
LABEL_466:
                if (v421)
                  llvm::MetadataTracking::untrack((uint64_t)(v391 + 80), v421);
                v422 = (unsigned __int8 *)v472[0];
                *v418 = (unsigned __int8 *)v472[0];
                if (v422)
                  llvm::MetadataTracking::retrack((uint64_t)v472, v422, (uint64_t)(v391 + 80));
                goto LABEL_463;
              }
            }
            llvm::Value::setMetadata(v392, *(_DWORD *)v416, (llvm::MDNode *)v420);
LABEL_463:
            v416 += 16;
            if (v416 == v417)
              goto LABEL_425;
          }
        }
        v289 = *(llvm::Constant **)(v386 + 32);
        goto LABEL_291;
      }
LABEL_85:
      v72 = *(_DWORD *)(a2 + 20);
      if ((v72 & 0x40000000) != 0)
        v73 = *(uint64_t **)(a2 - 8);
      else
        v73 = (uint64_t *)(a2 - 32 * (v72 & 0x7FFFFFF));
      v145 = sub_1C58A06BC(a1, *v73);
      sub_1C58AB878(a1, (uint64_t *)a2, v145);
      v146 = *(_DWORD *)(a2 + 20);
      if ((v146 & 0x40000000) != 0)
        v147 = *(uint64_t **)(a2 - 8);
      else
        v147 = (uint64_t *)(a2 - 32 * (v146 & 0x7FFFFFF));
      v148 = sub_1C58A11D4(a1, *v147);
      goto LABEL_246;
    }
    if (v4 > 316)
    {
      switch(v4)
      {
        case 317:
        case 323:
LABEL_164:
          sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
          v164 = *(_DWORD *)(a2 + 20);
          if ((v164 & 0x40000000) != 0)
            v165 = *(uint64_t **)(a2 - 8);
          else
            v165 = (uint64_t *)(a2 - 32 * (v164 & 0x7FFFFFF));
          v166 = (uint64_t *)sub_1C58A06BC(a1, *v165);
          v167 = (llvm::Value **)sub_1C53D7700((uint64_t *)&v484, 324, v166);
          goto LABEL_229;
        case 318:
          sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
          v37 = *(_DWORD *)(a2 + 20);
          if ((v37 & 0x40000000) != 0)
            v38 = *(uint64_t **)(a2 - 8);
          else
            v38 = (uint64_t *)(a2 - 32 * (v37 & 0x7FFFFFF));
          v227 = (uint64_t *)sub_1C58A06BC(a1, *v38);
          v228 = *(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          break;
        case 324:
          sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
          v131 = *(_DWORD *)(a2 + 20);
          if ((v131 & 0x40000000) != 0)
            v132 = *(uint64_t **)(a2 - 8);
          else
            v132 = (uint64_t *)(a2 - 32 * (v131 & 0x7FFFFFF));
          v227 = (uint64_t *)sub_1C58A06BC(a1, *v132);
          v229 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v479 = 257;
          v228 = (_QWORD *)sub_1C506EAA0((uint64_t)&v484, v229, (uint64_t)&v475);
          break;
        default:
          goto LABEL_307;
      }
      v479 = 257;
      v230 = (uint64_t *)sub_1C4773594((uint64_t)&v484, v228, (uint64_t)v227, (uint64_t)&v475);
      v231 = (_QWORD *)sub_1C53D7700((uint64_t *)&v484, 318, v230);
      v232 = sub_1C53D7700((uint64_t *)&v484, 324, v227);
      v479 = 257;
      v167 = (llvm::Value **)sub_1C4D89BCC((uint64_t)&v484, v231, v232, (uint64_t)&v475);
      goto LABEL_229;
    }
    if (v4 != 185)
    {
      if (v4 != 290)
      {
        if (v4 == 187)
        {
          sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
          v290 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v291 = *v290;
          v292 = (unsigned __int8 *)v290[4];
          v293 = v290[8];
          v294 = (unint64_t *)(v293 + 24);
          if (*(_DWORD *)(v293 + 32) >= 0x41u)
            v294 = (unint64_t *)*v294;
          v295 = 63 - __clz(*v294);
          v296 = v290[12];
          v297 = sub_1C58A06BC(a1, *v290);
          v298 = v295;
          v299 = (uint64_t *)sub_1C58A0068((_QWORD *)a1, v292, (uint64_t)&v484, *v297, v295 | 0x100u, 1);
          v301 = v300;
          if (byte_1ED8140F0)
          {
            sub_1C58AB300(a1, (uint64_t)v292, a2);
            sub_1C58AB300(a1, v296, a2);
          }
          llvm::IRBuilderBase::CreateMaskedStore((uint64_t)&v484, (uint64_t *)v297, v299, v298, v296);
          if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))
          {
            v302 = *(_QWORD *)(*(_QWORD *)a1 + 40) + 272;
            v303 = (unsigned __int8 *)sub_1C58A11D4(a1, v291);
            sub_1C4768AD0(v302, (uint64_t)*v297);
            v306 = v305 + 7;
            if ((_DWORD)v304 == 1)
            if (v298 <= word_1ED813A68)
              v307 = word_1ED813A68;
            else
              v307 = v298;
            sub_1C58A1270((_QWORD *)a1, (uint64_t *)&v484, v303, v301, v306 >> 3, v307);
          }
          v29 = (uint64_t *)v484;
          goto LABEL_236;
        }
        goto LABEL_307;
      }
      goto LABEL_85;
    }
    sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
    v133 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    v134 = *(unsigned __int8 **)v133;
    v135 = *(_QWORD *)(v133 + 32);
    v136 = (unint64_t *)(v135 + 24);
    if (*(_DWORD *)(v135 + 32) >= 0x41u)
      v136 = (unint64_t *)*v136;
    v137 = *v136;
    v138 = *(_QWORD *)(v133 + 64);
    v139 = *(_QWORD *)(v133 + 96);
    sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
    v141 = v140;
    if (*(_BYTE *)(a1 + 457))
    {
      v356 = 63 - __clz(v137);
      v357 = v139;
      v358 = v356;
      v359 = (uint64_t *)sub_1C58A0068((_QWORD *)a1, v134, (uint64_t)&v484, v140, v356 | 0x100u, 0);
      v245 = v360;
      v361 = sub_1C58A06BC(a1, v357);
      v475 = "_msmaskedld";
      v479 = 259;
      v362 = v358;
      v139 = v357;
      MaskedLoad = (llvm::Value **)llvm::IRBuilderBase::CreateMaskedLoad((uint64_t)&v484, v141, v359, v362, v138, (llvm::UndefValue *)v361, (uint64_t)&v475);
      sub_1C58AB878(a1, (uint64_t *)a2, MaskedLoad);
    }
    else
    {
      sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
      if (v142)
        v144 = llvm::Constant::getNullValue(v142, v143);
      else
        v144 = 0;
      sub_1C58AB878(a1, (uint64_t *)a2, v144);
      v245 = 0;
    }
    if (byte_1ED8140F0)
    {
      sub_1C58AB300(a1, (uint64_t)v134, a2);
      sub_1C58AB300(a1, v138, a2);
    }
    v246 = *(_QWORD *)(a1 + 8);
    if (!*(_DWORD *)(v246 + 4))
      goto LABEL_235;
    if (!*(_BYTE *)(a1 + 457))
    {
      v289 = *(llvm::Constant **)(v246 + 32);
LABEL_291:
      Select = llvm::Constant::getNullValue(v289, v244);
      goto LABEL_233;
    }
    v247 = sub_1C58A06BC(a1, v139);
    v479 = 257;
    v248 = sub_1C5346748((uint64_t)&v484, v138, (uint64_t)&v475, 0, 0);
    v483 = 257;
    v249 = sub_1C4773E38((uint64_t *)&v484, 40, v248, (uint64_t)v141, (uint64_t)&v480);
    v473 = 257;
    v251 = sub_1C4D89BCC((uint64_t)&v484, v247, (uint64_t)v249, (uint64_t)v472);
    v252 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1960);
    LODWORD(v476) = *(_DWORD *)(*(_QWORD *)v489 + 1968) >> 8;
    if (v476 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v475, 0, 0);
    else
      v475 = 0;
    v253 = llvm::ConstantInt::get(v252, (llvm::LLVMContext *)&v475, v250);
    if (v476 >= 0x41 && v475)
      MEMORY[0x1CAA32F9C](v475, 0x1000C8000313F17);
    v479 = 257;
    v256 = (llvm::Constant **)sub_1C4772EE0((uint64_t *)&v484, v251, (uint64_t)v253, (uint64_t)&v475);
    v471 = v139;
    v257 = *(unsigned int *)(*(_QWORD *)v139 + 32);
    if ((int)v257 >= 2)
    {
      for (i = 1; i != v257; ++i)
      {
        v259 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1960);
        v260 = *(_DWORD *)(*(_QWORD *)v489 + 1968);
        LODWORD(v476) = v260 >> 8;
        if (v260 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v475, i, 0);
        }
        else
        {
          if (v260 <= 0xFF)
            v261 = 0;
          else
            v261 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v260);
          v475 = (void *)(v261 & i);
        }
        v262 = llvm::ConstantInt::get(v259, (llvm::LLVMContext *)&v475, v255);
        if (v476 >= 0x41 && v475)
          MEMORY[0x1CAA32F9C](v475, 0x1000C8000313F17);
        v479 = 257;
        v263 = sub_1C4772EE0((uint64_t *)&v484, v251, (uint64_t)v262, (uint64_t)&v475);
        v479 = 257;
        v256 = (llvm::Constant **)sub_1C4773594((uint64_t)&v484, v256, (uint64_t)v263, (uint64_t)&v475);
      }
    }
    v264 = llvm::Constant::getNullValue(*v256, v254);
    v483 = 257;
    v470 = sub_1C4774B48((uint64_t)&v484, 33, (uint64_t)v256, (uint64_t)v264, (uint64_t)&v480);
    v265 = (uint64_t *)sub_1C58A11D4(a1, v471);
    v266 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    v473 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v487 + 56) + 40) + 272, v266);
    v268 = v267;
    v269 = (char *)operator new(0x60uLL);
    v270 = v269;
    v271 = (llvm::Value *)(v269 + 32);
    *((_QWORD *)v269 + 2) = 0;
    *((_QWORD *)v269 + 3) = v269 + 32;
    v479 = 257;
    *((_QWORD *)v269 + 4) = v266;
    *((_QWORD *)v269 + 5) = 0;
    *((_WORD *)v269 + 24) = 60;
    *((_DWORD *)v269 + 13) = 1;
    *(_OWORD *)(v269 + 56) = 0u;
    *(_OWORD *)(v269 + 72) = 0u;
    *((_DWORD *)v269 + 22) = 0;
    *(_QWORD *)v269 = v245;
    *((_QWORD *)v269 + 1) = 0;
    if (v245)
    {
      v274 = *(_QWORD *)(v245 + 8);
      v273 = (_QWORD *)(v245 + 8);
      v272 = v274;
      *((_QWORD *)v269 + 1) = v274;
      if (v274)
        *(_QWORD *)(v272 + 16) = v269 + 8;
      *((_QWORD *)v269 + 2) = v273;
      *v273 = v269;
    }
    *((_WORD *)v269 + 25) = 2 * (v268 & 0x3F);
    v269[92] = 1;
    llvm::Value::setName((uint64_t ***)v269 + 4, (uint64_t)&v475);
    (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v271, v472, v487, v488);
    if (!v485)
    {
LABEL_278:
      v479 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v484, v470, v265, (uint64_t)v271, (uint64_t)&v475, 0);
      goto LABEL_233;
    }
    v369 = (char *)v484;
    v370 = (char *)v484 + 16 * v485;
    v371 = (unsigned __int8 **)(v270 + 80);
    while (1)
    {
      v372 = *(_DWORD *)v369;
      v373 = (unsigned __int8 *)*((_QWORD *)v369 + 1);
      if (v373)
      {
        if (!v372)
        {
          v474 = (unsigned __int8 *)*((_QWORD *)v369 + 1);
          llvm::MetadataTracking::track((uint64_t)&v474, v373, 2);
          v374 = *v371;
          goto LABEL_392;
        }
      }
      else
      {
        v374 = *v371;
        if (!*v371 && (v270[55] & 0x20) == 0)
          goto LABEL_389;
        if (!v372)
        {
          v474 = 0;
LABEL_392:
          if (v374)
            llvm::MetadataTracking::untrack((uint64_t)(v270 + 80), v374);
          v375 = v474;
          *v371 = v474;
          if (v375)
            llvm::MetadataTracking::retrack((uint64_t)&v474, v375, (uint64_t)(v270 + 80));
          goto LABEL_389;
        }
      }
      llvm::Value::setMetadata(v271, *(_DWORD *)v369, (llvm::MDNode *)v373);
LABEL_389:
      v369 += 16;
      if (v369 == v370)
        goto LABEL_278;
    }
  }
  v7 = v4 + 79;
  if ((v4 - 11697) <= 0x23)
  {
    if (((1 << v7) & 0x3F01FF83FLL) != 0)
    {
LABEL_11:
      v8 = 0;
LABEL_36:
      sub_1C58B2128((_QWORD *)a1, a2, v8);
      return;
    }
    if (((1 << v7) & 0xC01E000C0) != 0)
    {
LABEL_35:
      v8 = 1;
      goto LABEL_36;
    }
  }
  if ((v4 - 12026) < 8)
  {
    sub_1C4773D54((uint64_t)&v484, a2, 0, 0, 0);
    sub_1C58A1544((_QWORD *)a1, *(_QWORD *)a2);
    v33 = v32;
    v34 = *(_DWORD *)(a2 + 20);
    if ((v34 & 0x40000000) != 0)
      v35 = *(_QWORD *)(a2 - 8);
    else
      v35 = a2 - 32 * (v34 & 0x7FFFFFF);
    v42 = sub_1C58A06BC(a1, *(_QWORD *)(v35 + 32));
    sub_1C58A1544((_QWORD *)a1, v33);
    if (v43)
      v45 = llvm::Constant::getNullValue(v43, v44);
    else
      v45 = 0;
    v479 = 257;
    v66 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v484, 33, (uint64_t)v42, (uint64_t)v45, (uint64_t)&v475);
    v483 = 257;
    v67 = sub_1C4773E38((uint64_t *)&v484, 40, v66, v33, (uint64_t)&v480);
    v68 = *(_QWORD *)(a2 - 32);
    if (v68 && !*(_BYTE *)(v68 + 16))
    {
      v82 = *(_QWORD *)(v68 + 24);
      v83 = *(_QWORD *)(a2 + 72);
      if (v82 == v83)
        v69 = *(_QWORD *)(a2 - 32);
      else
        v69 = 0;
      if (v82 == v83)
        v70 = *(uint64_t ***)(v68 + 24);
      else
        v70 = 0;
    }
    else
    {
      v69 = 0;
      v70 = 0;
    }
    v84 = *(_DWORD *)(a2 + 20);
    if ((v84 & 0x40000000) != 0)
      v85 = *(uint64_t **)(a2 - 8);
    else
      v85 = (uint64_t *)(a2 - 32 * (v84 & 0x7FFFFFF));
    v86 = sub_1C58A06BC(a1, *v85);
    v87 = *(llvm::Value ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v480 = (uint64_t)v86;
    v481 = v87;
    v479 = 257;
    v88 = sub_1C4774778((uint64_t *)&v484, v70, v69, &v480, 2, (uint64_t)&v475, 0);
    v479 = 257;
    v89 = (llvm::Value **)sub_1C4773594((uint64_t)&v484, v67, v88, (uint64_t)&v475);
    sub_1C58AB878(a1, (uint64_t *)a2, v89);
    sub_1C58AE65C((_QWORD *)a1, a2);
    v29 = (uint64_t *)v484;
    goto LABEL_236;
  }
  v39 = v4 - 11804;
  v444 = v39 > 5;
  v40 = (1 << v39) & 0x33;
  if (v444 || v40 == 0)
    goto LABEL_307;
LABEL_49:
  v30 = 1;
  v31 = 1;
LABEL_50:
  sub_1C58B1CB0((_QWORD *)a1, a2, v30, v31);
}

void sub_1C58B1CB0(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const llvm::APInt *v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  llvm::ValueHandleBase *v21;
  unsigned __int8 *v22;
  const llvm::APInt *v23;
  unsigned __int8 *v24;
  llvm::ConstantInt *v25;
  unsigned int v26;
  char v27;
  llvm::ValueHandleBase *v28;
  unsigned __int8 *v29;
  llvm::Value **v30;
  llvm::Type *v31;
  llvm::Value **v32;
  uint64_t v33;
  llvm::Constant *v34;
  uint64_t v35;
  const llvm::APInt *v36;
  llvm::Value **NullValue;
  llvm::ConstantInt *v38;
  unsigned int v39;
  unint64_t v40;
  llvm::ValueHandleBase *v41;
  llvm::Value **v42;
  llvm::Constant *v43;
  llvm::Type *v44;
  llvm::Value **v45;
  llvm::Type *v46;
  llvm::ConstantInt *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  __int16 v53;
  void *v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v54, a2, 0, 0, 0);
  v8 = 0;
  v9 = *(unsigned __int8 *)(a2 + 16);
  if (v9 != 84)
  {
    if (v9 == 39)
      v8 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v8 = 2;
  }
  v10 = *(_DWORD *)(a2 + 20);
  if (v10 < 0 && (v48 = a2 - 32 * (v10 & 0x7FFFFFF), v49 = *(_QWORD *)(v48 - 8), (v49 & 0xFFFFFFFF0) != 0))
  {
    v12 = -(uint64_t)(v10 & 0x7FFFFFF);
    v11 = *(_DWORD *)(v48 - 12) - *(_DWORD *)(v48 - v49);
  }
  else
  {
    v11 = 0;
    v12 = -(uint64_t)(v10 & 0x7FFFFFF);
  }
  v13 = a2 - 32 * v8 + 32 * -v11;
  v14 = (uint64_t *)(a2 + 32 * v12);
  if (((unint64_t)(v13 - (_QWORD)v14 - 32) >> 5) - a4 == 2)
  {
    v16 = *v14;
    v14 += 4;
    v15 = v16;
  }
  else
  {
    v15 = 0;
  }
  v17 = *v14;
  v19 = (uint64_t)sub_1C58A06BC((uint64_t)a1, *v14);
  if ((*(_DWORD *)(*(_QWORD *)v17 + 8) & 0xFE) == 0x12)
  {
    v20 = *(llvm::ConstantInt **)(*(_QWORD *)v56 + 1960);
    v52 = *(_DWORD *)(*(_QWORD *)v56 + 1968) >> 8;
    if (v52 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v51, 0, 0);
    else
      v51 = 0;
    v21 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v51, v18);
    if (v52 >= 0x41 && v51)
      MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    v53 = 257;
    v22 = sub_1C4772EE0((uint64_t *)v54, v19, (uint64_t)v21, (uint64_t)&v51);
    v24 = v22;
    if (a3 < 2)
    {
      v19 = (uint64_t)v22;
    }
    else
    {
      v25 = *(llvm::ConstantInt **)(*(_QWORD *)v56 + 1960);
      v26 = *(_DWORD *)(*(_QWORD *)v56 + 1968);
      v52 = v26 >> 8;
      if (v26 >> 8 > 0x40)
      {
        v47 = v25;
        llvm::APInt::initSlowCase((llvm::APInt *)&v51, 1, 0);
        v25 = v47;
      }
      else
      {
        if (v26 <= 0xFF)
          v27 = 0;
        else
          v27 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v26);
        v51 = v27 & 1;
      }
      v28 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v51, v23);
      if (v52 >= 0x41 && v51)
        MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
      v53 = 257;
      v29 = sub_1C4772EE0((uint64_t *)v54, v19, (uint64_t)v28, (uint64_t)&v51);
      v53 = 257;
      v19 = sub_1C4773594((uint64_t)v54, v24, (uint64_t)v29, (uint64_t)&v51);
    }
  }
  v30 = sub_1C58A11D4((uint64_t)a1, v17);
  sub_1C58AB3B4((uint64_t)a1, v19, (uint64_t)v30, a2);
  if (v15)
  {
    v50 = v15;
    v32 = sub_1C58A06BC((uint64_t)a1, v15);
    v33 = 0;
    v34 = (llvm::Constant *)*((_QWORD *)*v32 + 3);
    v35 = a3;
    do
    {
      NullValue = llvm::Constant::getNullValue(v34, v31);
      v38 = *(llvm::ConstantInt **)(*(_QWORD *)v56 + 1960);
      v39 = *(_DWORD *)(*(_QWORD *)v56 + 1968);
      v52 = v39 >> 8;
      if (v39 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v51, v33, 0);
      }
      else
      {
        if (v39 <= 0xFF)
          v40 = 0;
        else
          v40 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v39);
        v51 = v40 & v33;
      }
      v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v51, v36);
      if (v52 >= 0x41 && v51)
        MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
      v53 = 257;
      v32 = (llvm::Value **)sub_1C4773154((uint64_t *)v54, (uint64_t)v32, (uint64_t)NullValue, (uint64_t)v41, (uint64_t)&v51);
      ++v33;
    }
    while (v35 != v33);
    sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, v32);
    v42 = sub_1C58A11D4((uint64_t)a1, v50);
  }
  else
  {
    sub_1C58A1544(a1, *(_QWORD *)a2);
    if (v43)
      v45 = llvm::Constant::getNullValue(v43, v44);
    else
      v45 = 0;
    sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, v45);
    v42 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1[1] + 32), v46);
  }
  if (*(_DWORD *)(a1[1] + 4))
    *sub_1C62AD7D0((unint64_t)(a1 + 46), a2) = (unint64_t)v42;
  if (v54[0] != &v55)
    free(v54[0]);
}

void sub_1C58B2128(_QWORD *a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::Constant *v14;
  llvm::Type *v15;
  llvm::Value **NullValue;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Constant *v20;
  llvm::Type *v21;
  llvm::Value **v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  llvm::Value **v35;
  _WORD v36[20];
  _BYTE v37[32];
  __int16 v38;
  uint64_t v39[2];
  void *v40[2];
  _QWORD v41[16];

  v41[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v40, a2, 0, 0, 0);
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(uint64_t **)(a2 - 8);
  else
    v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
  v8 = (unsigned __int8 *)sub_1C58A06BC((uint64_t)a1, *v7);
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a2 - 8);
  else
    v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  v11 = (uint64_t *)sub_1C58A06BC((uint64_t)a1, *(_QWORD *)(v10 + 32));
  v12 = v11;
  if (a3)
  {
    v13 = *v11;
    sub_1C58A1544(a1, *v11);
    if (v14)
      NullValue = llvm::Constant::getNullValue(v14, v15);
    else
      NullValue = 0;
    v38 = 257;
    v23 = (unsigned __int8 *)sub_1C4774B48((uint64_t)v40, 33, (uint64_t)v12, (uint64_t)NullValue, (uint64_t)v37);
    v38 = 257;
    v24 = sub_1C4773E38((uint64_t *)v40, 40, v23, v13, (uint64_t)v37);
  }
  else
  {
    sub_1C58A1544(a1, *(_QWORD *)a2);
    v18 = v17;
    v19 = *v12;
    if ((*(_DWORD *)(*v12 + 8) & 0xFE) == 0x12)
    {
      v12 = (uint64_t *)sub_1C58A85DC(a1, (uint64_t *)v40, v12, *(_QWORD *)v41[6] + 1984, 1);
      v19 = *v12;
    }
    sub_1C58A1544(a1, v19);
    if (v20)
      v22 = llvm::Constant::getNullValue(v20, v21);
    else
      v22 = 0;
    v38 = 257;
    v25 = (uint64_t *)sub_1C4774B48((uint64_t)v40, 33, (uint64_t)v12, (uint64_t)v22, (uint64_t)v37);
    v24 = sub_1C58A85DC(a1, (uint64_t *)v40, v25, v18, 1);
  }
  v26 = (uint64_t)v24;
  v27 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(uint64_t ***)(a2 + 72);
  v30 = *(_QWORD *)(a2 - 32);
  v31 = **(_QWORD **)v27;
  v38 = 257;
  v39[0] = (uint64_t)sub_1C4773E38((uint64_t *)v40, 49, v8, v31, (uint64_t)v37);
  v39[1] = v28;
  v36[16] = 257;
  v32 = (unsigned __int8 *)sub_1C4774778((uint64_t *)v40, v29, v30, v39, 2, (uint64_t)v36, 0);
  sub_1C58A1544(a1, *(_QWORD *)a2);
  v38 = 257;
  v34 = sub_1C4773E38((uint64_t *)v40, 49, v32, v33, (uint64_t)v37);
  v38 = 257;
  v35 = (llvm::Value **)sub_1C4773594((uint64_t)v40, v34, v26, (uint64_t)v37);
  sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, v35);
  sub_1C58AE65C(a1, a2);
  if (v40[0] != v41)
    free(v40[0]);
}

void sub_1C58B23E8(_QWORD *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  llvm::Type *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  llvm::FixedVectorType *v15;
  llvm::Constant *v16;
  uint64_t v17;
  llvm::Value **NullValue;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  llvm::Type *v21;
  llvm::Value **v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t Declaration;
  uint64_t **v29;
  unsigned __int8 *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  _QWORD v34[4];
  __int16 v35;
  uint64_t v36[4];
  __int16 v37;
  void *v38[2];
  _QWORD v39[16];

  v39[15] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(**(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 8);
  sub_1C4773D54((uint64_t)v38, a2, 0, 0, 0);
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(uint64_t **)(a2 - 8);
  else
    v8 = (uint64_t *)(a2 - 32 * (v7 & 0x7FFFFFF));
  v9 = (unsigned __int8 *)sub_1C58A06BC((uint64_t)a1, *v8);
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a2 - 8);
  else
    v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  v13 = (unsigned __int8 *)sub_1C58A06BC((uint64_t)a1, *(_QWORD *)(v11 + 32));
  if (v6 != 10)
  {
    v16 = *(llvm::Constant **)v9;
    goto LABEL_18;
  }
  v14 = *(_QWORD **)(a1[1] + 16);
  LODWORD(v34[0]) = a3;
  if (a3 <= 63)
  {
    if (a3 <= 31)
    {
      switch(a3)
      {
        case 16:
          v15 = (llvm::FixedVectorType *)(*v14 + 1936);
          goto LABEL_17;
        case 8:
          v15 = (llvm::FixedVectorType *)(*v14 + 1912);
          goto LABEL_17;
        case 1:
          v15 = (llvm::FixedVectorType *)(*v14 + 1888);
          goto LABEL_17;
      }
    }
    else if (a3 == 32)
    {
      v15 = (llvm::FixedVectorType *)(*v14 + 1960);
      goto LABEL_17;
    }
LABEL_45:
    v32 = sub_1C5270984(*v14 + 2168, v34);
    v15 = (llvm::FixedVectorType *)*((_QWORD *)v32 + 1);
    if (!v15)
    {
      v15 = (llvm::FixedVectorType *)sub_1C484358C(*v14 + 2040, 24, 3);
      v33 = v34[0];
      *(_QWORD *)v15 = v14;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 1) = (v33 << 8) | 0xDu;
      *((_QWORD *)v32 + 1) = v15;
    }
    goto LABEL_17;
  }
  if (a3 != 64)
  {
    if (a3 == 128)
    {
      v15 = (llvm::FixedVectorType *)(*v14 + 2008);
      goto LABEL_17;
    }
    goto LABEL_45;
  }
  v15 = (llvm::FixedVectorType *)(*v14 + 1984);
LABEL_17:
  llvm::FixedVectorType::get(v15, (llvm::Type *)(0x40u / a3));
  v16 = (llvm::Constant *)v17;
  v35 = 257;
  v9 = sub_1C4773E38((uint64_t *)v38, 49, v9, v17, (uint64_t)v34);
  v35 = 257;
  v13 = sub_1C4773E38((uint64_t *)v38, 49, v13, (uint64_t)v16, (uint64_t)v34);
LABEL_18:
  NullValue = llvm::Constant::getNullValue(v16, v12);
  v35 = 257;
  v19 = (unsigned __int8 *)sub_1C4774B48((uint64_t)v38, 33, (uint64_t)v9, (uint64_t)NullValue, (uint64_t)v34);
  v37 = 257;
  v20 = sub_1C4773E38((uint64_t *)v38, 40, v19, (uint64_t)v16, (uint64_t)v36);
  v22 = llvm::Constant::getNullValue(v16, v21);
  v35 = 257;
  v23 = (unsigned __int8 *)sub_1C4774B48((uint64_t)v38, 33, (uint64_t)v13, (uint64_t)v22, (uint64_t)v34);
  v37 = 257;
  v24 = sub_1C4773E38((uint64_t *)v38, 40, v23, (uint64_t)v16, (uint64_t)v36);
  if (v6 == 10)
  {
    v25 = **(_QWORD **)(a1[1] + 16) + 1840;
    v35 = 257;
    v20 = sub_1C4773E38((uint64_t *)v38, 49, v20, v25, (uint64_t)v34);
    v35 = 257;
    v24 = sub_1C4773E38((uint64_t *)v38, 49, v24, v25, (uint64_t)v34);
  }
  v26 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
  if (v26 <= 12076)
  {
    switch(v26)
    {
      case 11233:
      case 11235:
        v27 = 11233;
        break;
      case 11234:
      case 11236:
        v27 = 11234;
        break;
      default:
        v27 = 12076;
        break;
    }
  }
  else
  {
    if (v26 > 12248)
    {
      if ((v26 - 12249) < 2)
      {
        v27 = 12249;
        goto LABEL_31;
      }
    }
    else if ((v26 - 12077) < 2)
    {
      v27 = 12077;
      goto LABEL_31;
    }
    v27 = 12248;
  }
LABEL_31:
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*a1 + 40), v27, 0, 0);
  if (Declaration)
    v29 = *(uint64_t ***)(Declaration + 24);
  else
    v29 = 0;
  v36[0] = (uint64_t)v20;
  v36[1] = (uint64_t)v24;
  v34[0] = "_msprop_vector_pack";
  v35 = 259;
  v30 = (unsigned __int8 *)sub_1C4774778((uint64_t *)v38, v29, Declaration, v36, 2, (uint64_t)v34, 0);
  if (v6 == 10)
  {
    sub_1C58A1544(a1, *(_QWORD *)a2);
    v35 = 257;
    v30 = sub_1C4773E38((uint64_t *)v38, 49, v30, v31, (uint64_t)v34);
  }
  sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, (llvm::Value **)v30);
  sub_1C58AE65C(a1, a2);
  if (v38[0] != v39)
    free(v38[0]);
}

void sub_1C58B2864(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _QWORD *v6;
  llvm::FixedVectorType *v7;
  llvm::Constant *v8;
  llvm::Constant *v9;
  int v10;
  uint64_t *v11;
  llvm::Value **v12;
  int v13;
  uint64_t v14;
  llvm::Value **v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  llvm::Type *v18;
  llvm::Value **NullValue;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _DWORD *v24;
  int v25;
  _WORD v26[20];
  _BYTE v27[32];
  __int16 v28;
  void *v29[2];
  _QWORD v30[16];

  v30[15] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(**(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 8) != 10)
  {
    v8 = *(llvm::Constant **)a2;
    goto LABEL_11;
  }
  v5 = 2 * a3;
  v6 = *(_QWORD **)(a1[1] + 16);
  LODWORD(v29[0]) = 2 * a3;
  if (2 * a3 <= 63)
  {
    switch(v5)
    {
      case 0x20u:
        v7 = (llvm::FixedVectorType *)(*v6 + 1960);
        goto LABEL_10;
      case 0x10u:
        v7 = (llvm::FixedVectorType *)(*v6 + 1936);
        goto LABEL_10;
      case 8u:
        v7 = (llvm::FixedVectorType *)(*v6 + 1912);
        goto LABEL_10;
    }
LABEL_24:
    v24 = sub_1C5270984(*v6 + 2168, v29);
    v7 = (llvm::FixedVectorType *)*((_QWORD *)v24 + 1);
    if (!v7)
    {
      v7 = (llvm::FixedVectorType *)sub_1C484358C(*v6 + 2040, 24, 3);
      v25 = (int)v29[0];
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 2) = 0;
      *((_QWORD *)v7 + 1) = (v25 << 8) | 0xDu;
      *((_QWORD *)v24 + 1) = v7;
    }
    goto LABEL_10;
  }
  if (v5 != 64)
  {
    if (v5 == 128)
    {
      v7 = (llvm::FixedVectorType *)(*v6 + 2008);
      goto LABEL_10;
    }
    goto LABEL_24;
  }
  v7 = (llvm::FixedVectorType *)(*v6 + 1984);
LABEL_10:
  llvm::FixedVectorType::get(v7, (llvm::Type *)(0x40 / v5));
  v8 = v9;
LABEL_11:
  sub_1C4773D54((uint64_t)v29, a2, 0, 0, 0);
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(uint64_t **)(a2 - 8);
  else
    v11 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
  v12 = sub_1C58A06BC((uint64_t)a1, *v11);
  v13 = *(_DWORD *)(a2 + 20);
  if ((v13 & 0x40000000) != 0)
    v14 = *(_QWORD *)(a2 - 8);
  else
    v14 = a2 - 32 * (v13 & 0x7FFFFFF);
  v15 = sub_1C58A06BC((uint64_t)a1, *(_QWORD *)(v14 + 32));
  v28 = 257;
  v16 = (unsigned __int8 *)sub_1C4773594((uint64_t)v29, v12, (uint64_t)v15, (uint64_t)v27);
  v28 = 257;
  v17 = sub_1C4773E38((uint64_t *)v29, 49, v16, (uint64_t)v8, (uint64_t)v27);
  NullValue = llvm::Constant::getNullValue(v8, v18);
  v28 = 257;
  v20 = (unsigned __int8 *)sub_1C4774B48((uint64_t)v29, 33, (uint64_t)v17, (uint64_t)NullValue, (uint64_t)v27);
  v26[16] = 257;
  v21 = sub_1C4773E38((uint64_t *)v29, 40, v20, (uint64_t)v8, (uint64_t)v26);
  sub_1C58A1544(a1, *(_QWORD *)a2);
  v28 = 257;
  v23 = sub_1C4773E38((uint64_t *)v29, 49, v21, v22, (uint64_t)v27);
  sub_1C58AB878((uint64_t)a1, (uint64_t *)a2, (llvm::Value **)v23);
  sub_1C58AE65C(a1, a2);
  if (v29[0] != v30)
    free(v29[0]);
}

unsigned __int8 *sub_1C58B2B14(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v3 = (unsigned __int8 *)a3;
  sub_1C58A1544(a1, *a3);
  v6 = *(_QWORD *)v3;
  if (*(_QWORD *)v3 != v5)
  {
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    else
      v7 = *(_DWORD *)(v6 + 8);
    v11 = 257;
    if (v7 == 15)
      v8 = 47;
    else
      v8 = 49;
    return sub_1C4773E38(a2, v8, v3, v5, (uint64_t)v10);
  }
  return v3;
}

char *sub_1C58B2BBC(uint64_t ****a1, uint64_t ***a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  size_t *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ****v21;
  uint64_t ***v22;
  int v23;
  int v24;
  size_t *v25;
  const void *v26;
  size_t v27;
  size_t v28;
  uint64_t *v29;
  llvm::Value **String;
  _DWORD *v31;
  char *v32;
  llvm::PointerType *v33;
  _QWORD v35[2];
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  int v39;
  uint64_t v40;
  char v41[32];
  __int16 v42;
  void *v43;
  __int128 v44;
  _QWORD v45[257];

  v45[256] = *MEMORY[0x1E0C80C00];
  v43 = v45;
  v44 = xmmword_1C86622A0;
  sub_1C613932C((uint64_t)v35, (uint64_t)&v43);
  if ((unint64_t)(v37 - v38) > 3)
  {
    *(_DWORD *)v38 = 757935405;
    v38 += 4;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v35, "----", 4uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_15;
  v4 = ***a2;
  v5 = *(_QWORD *)(v4 + 152);
  v6 = *(unsigned int *)(v4 + 168);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t ****)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_11;
    v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_11;
      }
    }
  }
  v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_11:
  v12 = (size_t *)v8[1];
  v15 = *v12;
  v13 = v12 + 2;
  v14 = v15;
  if (v15 <= v37 - v38)
  {
    if (v14)
    {
      memcpy(v38, v13, v14);
      v38 += v14;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v35, (const char *)v13, v14);
  }
LABEL_15:
  if (v37 == v38)
    llvm::raw_ostream::write((llvm::raw_ostream *)v35, "@", 1uLL);
  else
    *v38++ = 64;
  v16 = *a1;
  if ((*((_BYTE *)*a1 + 23) & 0x10) == 0)
    goto LABEL_29;
  v17 = ***v16;
  v18 = *(_QWORD *)(v17 + 152);
  v19 = *(unsigned int *)(v17 + 168);
  if ((_DWORD)v19)
  {
    LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    v21 = (uint64_t ****)(v18 + 16 * v20);
    v22 = *v21;
    if (*v21 == v16)
      goto LABEL_25;
    v23 = 1;
    while (v22 != (uint64_t ***)-4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v19 - 1);
      v22 = *(uint64_t ****)(v18 + 16 * v20);
      if (v22 == v16)
      {
        v21 = (uint64_t ****)(v18 + 16 * v20);
        goto LABEL_25;
      }
    }
  }
  v21 = (uint64_t ****)(v18 + 16 * v19);
LABEL_25:
  v25 = (size_t *)v21[1];
  v28 = *v25;
  v26 = v25 + 2;
  v27 = v28;
  if (v28 <= v37 - v38)
  {
    if (v27)
    {
      memcpy(v38, v26, v27);
      v38 += v27;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v35, (const char *)v26, v27);
  }
LABEL_29:
  v29 = (uint64_t *)(*a1)[5];
  String = llvm::ConstantDataArray::getString(*v29, *(char **)v40, *(llvm::Type **)(v40 + 8), 1);
  v31 = operator new(0x78uLL);
  v32 = (char *)(v31 + 8);
  v31[13] = v31[13] & 0x38000000 | 1;
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = v31 + 8;
  v33 = *String;
  v42 = 257;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v31 + 8), (uint64_t)v29, v33, 0, 8, (uint64_t)String, (uint64_t)v41, 0, 0, 0, 0);
  v35[0] = off_1E81A6E70;
  if (v39 == 1 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8077774924);
  if (v43 != v45)
    free(v43);
  return v32;
}

uint64_t sub_1C58B2EF4(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v5;
  llvm::ConstantInt *v6;
  llvm::ValueHandleBase *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  llvm::ConstantInt *v13;
  llvm::ValueHandleBase *v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  const llvm::APInt *v18;

  v18 = a3;
  if (!a3)
  {
    v5 = **(_QWORD **)(a2 + 64);
    v6 = *(llvm::ConstantInt **)(v5 + 1960);
    v16 = *(_DWORD *)(v5 + 1968) >> 8;
    if (v16 > 0x40)
    {
      v13 = v6;
      llvm::APInt::initSlowCase((llvm::APInt *)&v15, 0, 0);
      v6 = v13;
    }
    else
    {
      v15 = 0;
    }
    v7 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v15, a3);
    if (v16 >= 0x41 && v15)
    {
      v14 = v7;
      MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
      v7 = v14;
    }
    v18 = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(uint64_t ***)(v8 + 104);
  v10 = *(_QWORD *)(v8 + 112);
  v17 = 257;
  v11 = sub_1C4774778((uint64_t *)a2, v9, v10, (uint64_t *)&v18, 1, (uint64_t)&v15, 0);
  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v11 + 64), **(uint64_t ***)v11, -1, 28);
  *(_QWORD *)(v11 + 64) = result;
  return result;
}

__n128 sub_1C58B2FF0(__n128 *a1, _WORD *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED813BF0, "msan-poison-stack-pattern", 0x19uLL);
  result = *a1;
  xmmword_1ED813C10 = (__int128)*a1;
  word_1ED813BFA = (32 * (*a2 & 3)) | word_1ED813BFA & 0xFF9F;
  v7 = *a3;
  dword_1ED813C70 = **a3;
  byte_1ED813C84 = 1;
  dword_1ED813C80 = *v7;
  return result;
}

char *sub_1C58B3074()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySanitizerPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_15[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C58B312C()
{
  int v1;
  int *v2;
  int v3;
  __n128 v4;

  word_1ED813A68 = 770;
  v4.n128_u64[0] = (unint64_t)"Track origins (allocation sites) of poisoned memory";
  v4.n128_u64[1] = 51;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED8339C8, "msan-track-origins", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED8339C8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"keep going after reporting a UMR";
  v4.n128_u64[1] = 32;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED833A88, "msan-keep-going", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED833A88, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"poison uninitialized stack variables";
  v4.n128_u64[1] = 36;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813A70, "msan-poison-stack", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813A70, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"poison uninitialized stack variables with a call";
  v4.n128_u64[1] = 48;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813B30, "msan-poison-stack-with-call", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813B30, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"poison uninitialized stack variables with the given pattern";
  v4.n128_u64[1] = 59;
  v3 = 1;
  v1 = 255;
  v2 = &v1;
  sub_1C62ADC4C(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED813BF0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"poison undef temps";
  v4.n128_u64[1] = 18;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813CB0, "msan-poison-undef", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813CB0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"propagate shadow through ICmpEQ and ICmpNE";
  v4.n128_u64[1] = 42;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813D70, "msan-handle-icmp", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813D70, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"exact handling of relational integer ICmp";
  v4.n128_u64[1] = 41;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813E30, "msan-handle-icmp-exact", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813E30, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"when possible, poison scoped variables at the beginning of the scope (slower, but more precise)";
  v4.n128_u64[1] = 95;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813EF0, "msan-handle-lifetime-intrinsics", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813EF0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"conservative handling of inline assembly";
  v4.n128_u64[1] = 40;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED813FB0, "msan-handle-asm-conservative", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED813FB0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"report accesses through a pointer which has poisoned shadow";
  v4.n128_u64[1] = 59;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED814070, "msan-check-access-address", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814070, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"check arguments and return values at function call boundaries";
  v4.n128_u64[1] = 61;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED833B48, "msan-eager-checks", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED833B48, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"print out instructions with default strict semantics";
  v4.n128_u64[1] = 52;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED814130, "msan-dump-strict-instructions", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814130, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"If the function being instrumented requires more than this number of checks and ori"
                                     "gin stores, use callbacks instead of inline checks (-1 means never use callbacks).";
  v4.n128_u64[1] = 165;
  v3 = 1;
  v1 = 3500;
  v2 = &v1;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED8141F0, "msan-instrumentation-with-call-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED8141F0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable KernelMemorySanitizer instrumentation";
  v4.n128_u64[1] = 44;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED833C08, "msan-kernel", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED833C08, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Apply no_sanitize to the whole file";
  v4.n128_u64[1] = 35;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8142B0, "msan-disable-checks", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8142B0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Insert checks for constant shadow values";
  v4.n128_u64[1] = 40;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED814370, "msan-check-constant-shadow", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814370, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Place MSan constructors in comdat sections";
  v4.n128_u64[1] = 42;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED814430, "msan-with-comdat", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814430, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan AndMask";
  v4.n128_u64[1] = 26;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C62ADCE8((uint64_t)&unk_1ED8144F0, "msan-and-mask", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &unk_1ED8144F0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan XorMask";
  v4.n128_u64[1] = 26;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C62ADCE8((uint64_t)&unk_1ED8145B8, "msan-xor-mask", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &unk_1ED8145B8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan ShadowBase";
  v4.n128_u64[1] = 29;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C62ADCE8((uint64_t)&unk_1ED814680, "msan-shadow-base", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &unk_1ED814680, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Define custom MSan OriginBase";
  v4.n128_u64[1] = 29;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C62ADCE8((uint64_t)&unk_1ED814748, "msan-origin-base", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C56031FC, &unk_1ED814748, &dword_1C475E000);
}

uint64_t (****llvm::pgo::promoteIndirectCall(uint64_t ***this, llvm::CallBase *a2, unint64_t a3, unint64_t a4, int a5, llvm::OptimizationRemarkEmitter *a6, llvm::OptimizationRemarkEmitter *a7))(llvm::DiagnosticInfoWithLocationBase *__hidden this)
{
  unint64_t v13;
  unint64_t v14;
  llvm::Value *v15;
  llvm::MDNode *v16;
  uint64_t (****v17)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  llvm::CastInst **v18;
  llvm::Instruction *v19;
  uint64_t v20;
  uint64_t BranchWeights;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  void **v30;
  char *v31;
  unint64_t v32;
  void **v33;
  uint64_t *v34;
  std::string v35;
  void *__p;
  char v37;
  std::string v38;
  void *v39;
  char v40;
  void *v41[2];
  char v42;
  void *v43;
  char v44;
  _OWORD v45[5];
  void *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t (**v49)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v50;
  char v51;
  uint64_t *v52;
  __int128 v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  char v57;
  char v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[260];
  int v62;
  uint64_t **v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (a4 - a3 <= a3)
    v13 = a3;
  else
    v13 = a4 - a3;
  if (v13 >= 0xFFFFFFFF)
    v14 = v13 / 0xFFFFFFFF + 1;
  else
    v14 = 1;
  v34 = **this;
  LODWORD(v49) = a3 / v14;
  HIDWORD(v49) = (a4 - a3) / v14;
  v15 = (llvm::Value *)llvm::MDBuilder::createBranchWeights(&v34, (uint64_t)&v49, 2);
  v17 = (uint64_t (****)(llvm::DiagnosticInfoWithLocationBase *__hidden))llvm::versionCallSite((llvm *)this, a2, v15, v16);
  llvm::promoteCall((llvm *)v17, (void ***)a2, 0, v18, v19);
  if (a5)
  {
    v49 = **v17;
    LODWORD(v45[0]) = a3;
    BranchWeights = llvm::MDBuilder::createBranchWeights((uint64_t **)&v49, (uint64_t)v45, 1);
    if (BranchWeights | (unint64_t)v17[6] || (*((_BYTE *)v17 + 23) & 0x20) != 0)
      llvm::Value::setMetadata((llvm::Value *)v17, 2, (llvm::MDNode *)BranchWeights);
  }
  if (a6)
  {
    v20 = ****(_QWORD ****)a6;
    if (*(_QWORD *)(v20 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 72) + 48))(*(_QWORD *)(v20 + 72)))
    {
      v23 = this[5][7];
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v45, (const llvm::DebugLoc *)(this + 6));
      v24 = this[5];
      v50 = 9;
      v51 = 2;
      v52 = v23;
      v53 = v45[0];
      v54 = "pgo-icall-prom";
      v55 = "Promoted";
      v56 = 8;
      v57 = 0;
      v58 = 0;
      v59 = v61;
      v60 = 0x400000000;
      v61[256] = 0;
      v62 = -1;
      v63 = v24;
      v49 = &off_1E814E500;
      *(_QWORD *)&v45[0] = "Promote indirect call to ";
      *((_QWORD *)&v45[0] + 1) = 25;
      sub_1C53B17B4((uint64_t)&v59, (const void **)v45);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v41, "DirectCallee", 0xCuLL, a2);
      v25 = sub_1C47E3888((uint64_t)&v49, (uint64_t)v41);
      *(_QWORD *)&v45[0] = " with count ";
      *((_QWORD *)&v45[0] + 1) = 12;
      sub_1C53B17B4(v25 + 80, (const void **)v45);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v38, "Count", 5uLL, a3);
      v26 = sub_1C47E3888(v25, (uint64_t)&v38);
      *(_QWORD *)&v45[0] = " out of ";
      *((_QWORD *)&v45[0] + 1) = 8;
      sub_1C53B17B4(v26 + 80, (const void **)v45);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v35, "TotalCount", 0xAuLL, a4);
      v27 = sub_1C47E3888(v26, (uint64_t)&v35);
      sub_1C61998EC((uint64_t)v45, v27);
      *(_QWORD *)&v45[0] = &off_1E814E500;
      if (v37 < 0)
        operator delete(__p);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (v40 < 0)
        operator delete(v39);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (v44 < 0)
        operator delete(v43);
      if (v42 < 0)
        operator delete(v41[0]);
      v49 = &off_1E814E790;
      v28 = (char *)v59;
      if ((_DWORD)v60)
      {
        v29 = (unint64_t)v60 << 6;
        do
        {
          v30 = (void **)&v28[v29];
          if (v28[v29 - 17] < 0)
            operator delete(*(v30 - 5));
          if (*((char *)v30 - 41) < 0)
            operator delete(*(v30 - 8));
          v29 -= 64;
        }
        while (v29);
        v28 = (char *)v59;
      }
      if (v28 != v61)
        free(v28);
      llvm::OptimizationRemarkEmitter::emit(a6, (llvm::DiagnosticInfoOptimizationBase *)v45);
      *(_QWORD *)&v45[0] = &off_1E814E790;
      v31 = (char *)v46;
      if (v47)
      {
        v32 = (unint64_t)v47 << 6;
        do
        {
          v33 = (void **)&v31[v32];
          if (v31[v32 - 17] < 0)
            operator delete(*(v33 - 5));
          if (*((char *)v33 - 41) < 0)
            operator delete(*(v33 - 8));
          v32 -= 64;
        }
        while (v32);
        v31 = (char *)v46;
      }
      if (v31 != (char *)&v48)
        free(v31);
    }
  }
  return v17;
}

_QWORD *llvm::PGOIndirectCallPromotion::run@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  llvm::Module *v5;
  uint64_t ResultImpl;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t PromotionCandidatesForInstruction;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  const char **v38;
  _BYTE *v39;
  llvm::OptimizationRemarkEmitter *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *i;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  char *v57;
  llvm::CallBase *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  void **v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  void **v78;
  unint64_t v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  void **v86;
  unint64_t v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  char *v95;
  unint64_t v96;
  void **v97;
  unint64_t v98;
  void **v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v105;
  uint64_t v106;
  uint64_t **v107;
  _QWORD *v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  llvm::OptimizationRemarkEmitter *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  _BYTE v120[44];
  int v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[25];
  unint64_t v126;
  unsigned int v127[2];
  void *v128;
  _QWORD *v129;
  uint64_t v130;
  char *__s;
  std::string __p;
  void *v133;
  char v134;
  std::string v135;
  void *v136;
  char v137;
  char *v138;
  uint64_t v139;
  _QWORD v140[4];
  __int16 v141;
  void *v142;
  unsigned int v143;
  _BYTE v144[272];
  uint64_t (**v145)(llvm::DiagnosticInfo *__hidden);
  int v146;
  char v147;
  uint64_t v148;
  __int128 v149;
  const char *v150;
  const char *v151;
  uint64_t v152;
  char v153;
  char v154;
  void *v155;
  uint64_t v156;
  _BYTE v157[256];
  char v158;
  int v159;
  uint64_t v160;
  uint64_t v161;

  v4 = a3;
  v5 = (llvm::Module *)a2;
  v161 = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::ProfileSummaryAnalysis::Key, a2);
  if (byte_1ED814890)
    goto LABEL_2;
  v10 = ResultImpl;
  v11 = *a1;
  v12 = a1[1];
  v13 = byte_1ED814B90;
  memset(v120, 0, sizeof(v120));
  v121 = 8;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  memset(v125, 0, sizeof(v125));
  llvm::InstrProfSymtab::create((llvm::InstrProfSymtab *)v120, v5, (llvm::Function *)((byte_1ED814AD0 | v11) != 0), (uint64_t *)&v128);
  if (v128)
  {
    v119 = (char *)v128;
    v128 = 0;
    sub_1C61D2548(&v119, &v135);
    if (v119)
      (*(void (**)(char *))(*(_QWORD *)v119 + 8))(v119);
    v16 = *(_QWORD *)v5;
    std::operator+<char>();
    v141 = 260;
    v140[0] = &__p;
    v146 = 0;
    v147 = 0;
    v145 = &off_1E814E960;
    v148 = 0;
    *(_QWORD *)&v149 = v140;
    *((_QWORD *)&v149 + 1) = 0;
    llvm::LLVMContext::diagnose(v16, (const llvm::DiagnosticInfo *)&v145);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = a4;
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    if (v128)
      (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
    sub_1C624BA64(v120);
    goto LABEL_3;
  }
  v14 = (_QWORD *)((char *)v5 + 24);
  v15 = (_QWORD *)*((_QWORD *)v5 + 4);
  if (v15 == (_QWORD *)((char *)v5 + 24))
  {
    sub_1C624BA64(v120);
LABEL_2:
    v8 = a4;
LABEL_3:
    *(_QWORD *)v8 = v8 + 32;
    *(_QWORD *)(v8 + 8) = v8 + 32;
    *(_QWORD *)(v8 + 16) = 2;
    *(_DWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 48) = v8 + 80;
    *(_QWORD *)(v8 + 56) = v8 + 80;
    *(_QWORD *)(v8 + 64) = 2;
    *(_DWORD *)(v8 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)v8, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  v17 = 0;
  v106 = v4;
  v107 = (uint64_t **)v5;
  v112 = v10;
  v105 = (_QWORD *)((char *)v5 + 24);
  v110 = v13 | v12;
  do
  {
    if (v15)
      v18 = (uint64_t)(v15 - 7);
    else
      v18 = 0;
    if (v15 && *(_BYTE *)(v18 + 16) == 3)
    {
      if ((*(_DWORD *)(v18 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_191;
    }
    else if (!*(_BYTE *)(v18 + 16) && *(_QWORD *)(v18 + 72) == v18 + 72 && (*(_BYTE *)(v18 + 34) & 0x80) == 0)
    {
      goto LABEL_191;
    }
    v19 = *(_QWORD *)(v18 + 112);
    if (v19 && (*(_BYTE *)(v19 + 17) & 8) != 0)
      goto LABEL_191;
    v108 = v15;
    v109 = v17;
    v118 = 0;
    v20 = llvm::AnalysisManager<llvm::Module>::getResultImpl(v4, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)v5);
    v21 = llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(v20 + 8), &llvm::OptimizationRemarkEmitterAnalysis::Key, v18);
    llvm::ICallPromotionAnalysis::ICallPromotionAnalysis((llvm::ICallPromotionAnalysis *)&v130);
    sub_1C62ADDDC(v18, &v128);
    v23 = v128;
    v22 = v129;
    if (v128 == v129)
    {
      v100 = 0;
      if (!v128)
        goto LABEL_186;
    }
    else
    {
      v111 = 0;
      v113 = v129;
      v115 = (llvm::OptimizationRemarkEmitter *)(v21 + 8);
      do
      {
        v24 = *v23;
        v126 = 0;
        *(_QWORD *)v127 = 0;
        PromotionCandidatesForInstruction = llvm::ICallPromotionAnalysis::getPromotionCandidatesForInstruction((llvm::ICallPromotionAnalysis *)&v130, (const llvm::Instruction *)v24, &v127[1], &v126, v127);
        v27 = v127[0];
        if (v127[0])
        {
          v28 = PromotionCandidatesForInstruction;
          if ((!*(_QWORD *)(v10 + 16) || *(_BYTE *)(v10 + 32) && *(_QWORD *)(v10 + 24) <= v126) && !dword_1ED814A10)
          {
            v114 = v26;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            while (1)
            {
              v116 = v30;
              v33 = (unint64_t *)(v28 + 16 * v29);
              v34 = *v33;
              v35 = v33[1];
              v36 = *(unsigned __int8 *)(v24 + 16);
              if (byte_1ED814D10)
              {
                if (v36 == 84)
                  break;
              }
              if (byte_1ED814C50 && v36 == 33)
              {
                v53 = ****(_QWORD ****)v115;
                if (!*(_QWORD *)(v53 + 128)
                  && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v53 + 72) + 48))(*(_QWORD *)(v53 + 72)))
                {
                  goto LABEL_70;
                }
                v81 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v135, (const llvm::DebugLoc *)(v24 + 48));
                v82 = *(_QWORD *)(v24 + 40);
                v146 = 10;
                v147 = 2;
                v149 = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
                v148 = v81;
                v150 = "pgo-icall-prom";
                v151 = "UserOptions";
                v152 = 11;
                v153 = 0;
                v154 = 0;
                v155 = v157;
                v156 = 0x400000000;
                v158 = 0;
                v159 = -1;
                v160 = v82;
                v145 = &off_1E814E538;
                v135.__r_.__value_.__r.__words[0] = (std::string::size_type)" Not promote: User options";
                v135.__r_.__value_.__l.__size_ = 26;
                sub_1C53B17B4((uint64_t)&v155, (const void **)&v135.__r_.__value_.__l.__data_);
                sub_1C61998EC((uint64_t)v140, (uint64_t)&v145);
                v140[0] = &off_1E814E538;
                v145 = &off_1E814E790;
                v83 = (char *)v155;
                if ((_DWORD)v156)
                {
                  v84 = v28;
                  v85 = (unint64_t)v156 << 6;
                  do
                  {
                    v86 = (void **)&v83[v85];
                    if (v83[v85 - 17] < 0)
                      operator delete(*(v86 - 5));
                    if (*((char *)v86 - 41) < 0)
                      operator delete(*(v86 - 8));
                    v85 -= 64;
                  }
                  while (v85);
                  v83 = (char *)v155;
                  v28 = v84;
                }
                if (v83 != v157)
                  free(v83);
                llvm::OptimizationRemarkEmitter::emit(v115, (llvm::DiagnosticInfoOptimizationBase *)v140);
                v140[0] = &off_1E814E790;
                v67 = v142;
                if (v143)
                {
                  v68 = v28;
                  v87 = (unint64_t)v143 << 6;
                  v30 = v116;
                  do
                  {
                    v88 = (void **)&v67[v87];
                    if ((char)v67[v87 - 17] < 0)
                    {
                      operator delete(*(v88 - 5));
                      v30 = v116;
                    }
                    if (*((char *)v88 - 41) < 0)
                    {
                      operator delete(*(v88 - 8));
                      v30 = v116;
                    }
                    v87 -= 64;
                  }
                  while (v87);
                  goto LABEL_147;
                }
LABEL_152:
                v30 = v116;
                goto LABEL_153;
              }
              v37 = sub_1C62AB070((uint64_t *)v120, v34);
              if (!v37)
                goto LABEL_106;
              v39 = (_BYTE *)v37;
              if (*(_BYTE *)(v37 + 16))
              {
                if (*(_BYTE *)(v37 + 16) == 3 && (*(_DWORD *)(v37 + 20) & 0x7FFFFFF) == 0)
                  goto LABEL_106;
              }
              else if (*(_QWORD *)(v37 + 72) == v37 + 72 && (*(_BYTE *)(v37 + 34) & 0x80) == 0)
              {
LABEL_106:
                v71 = ****(_QWORD ****)v115;
                if (*(_QWORD *)(v71 + 128)
                  || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v71 + 72) + 48))(*(_QWORD *)(v71 + 72)))
                {
                  v72 = v28;
                  v73 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 56);
                  llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v135, (const llvm::DebugLoc *)(v24 + 48));
                  v74 = *(_QWORD *)(v24 + 40);
                  v146 = 10;
                  v147 = 2;
                  v149 = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
                  v148 = v73;
                  v150 = "pgo-icall-prom";
                  v151 = "UnableToFindTarget";
                  v152 = 18;
                  v153 = 0;
                  v154 = 0;
                  v155 = v157;
                  v156 = 0x400000000;
                  v158 = 0;
                  v159 = -1;
                  v160 = v74;
                  v145 = &off_1E814E538;
                  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)"Cannot promote indirect call: target with md5sum ";
                  v135.__r_.__value_.__l.__size_ = 49;
                  sub_1C53B17B4((uint64_t)&v155, (const void **)&v135.__r_.__value_.__l.__data_);
                  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v135, "target md5sum", 0xDuLL, v34);
                  v75 = sub_1C47E3888((uint64_t)&v145, (uint64_t)&v135);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)" not found";
                  __p.__r_.__value_.__l.__size_ = 10;
                  sub_1C53B17B4(v75 + 80, (const void **)&__p.__r_.__value_.__l.__data_);
                  sub_1C61998EC((uint64_t)v140, v75);
                  v140[0] = &off_1E814E538;
                  if (v137 < 0)
                    operator delete(v136);
                  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v135.__r_.__value_.__l.__data_);
                  v145 = &off_1E814E790;
                  v76 = (char *)v155;
                  if ((_DWORD)v156)
                  {
                    v77 = (unint64_t)v156 << 6;
                    do
                    {
                      v78 = (void **)&v76[v77];
                      if (v76[v77 - 17] < 0)
                        operator delete(*(v78 - 5));
                      if (*((char *)v78 - 41) < 0)
                        operator delete(*(v78 - 8));
                      v77 -= 64;
                    }
                    while (v77);
                    v76 = (char *)v155;
                  }
                  v28 = v72;
                  if (v76 != v157)
                    free(v76);
                  llvm::OptimizationRemarkEmitter::emit(v115, (llvm::DiagnosticInfoOptimizationBase *)v140);
                  v140[0] = &off_1E814E790;
                  v67 = v142;
                  if (v143)
                  {
                    v79 = (unint64_t)v143 << 6;
                    do
                    {
                      v80 = (void **)&v67[v79];
                      if ((char)v67[v79 - 17] < 0)
                        operator delete(*(v80 - 5));
                      if (*((char *)v80 - 41) < 0)
                        operator delete(*(v80 - 8));
                      v79 -= 64;
                    }
                    while (v79);
                    v67 = v142;
                    v28 = v72;
                  }
                  goto LABEL_182;
                }
LABEL_70:
                v30 = v116;
                goto LABEL_71;
              }
              __s = 0;
              if ((llvm::isLegalToPromote((llvm::Type **)v24, (const llvm::CallBase *)v37, (llvm::Function *)&__s, v38) & 1) == 0)
              {
                v89 = ****(_QWORD ****)v115;
                if (!*(_QWORD *)(v89 + 128)
                  && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v89 + 72) + 48))(*(_QWORD *)(v89 + 72)))
                {
                  goto LABEL_70;
                }
                v103 = v28;
                v90 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v135, (const llvm::DebugLoc *)(v24 + 48));
                v91 = *(_QWORD *)(v24 + 40);
                v146 = 10;
                v147 = 2;
                v149 = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
                v148 = v90;
                v150 = "pgo-icall-prom";
                v151 = "UnableToPromote";
                v152 = 15;
                v153 = 0;
                v154 = 0;
                v155 = v157;
                v156 = 0x400000000;
                v158 = 0;
                v159 = -1;
                v160 = v91;
                v145 = &off_1E814E538;
                v135.__r_.__value_.__r.__words[0] = (std::string::size_type)"Cannot promote indirect call to ";
                v135.__r_.__value_.__l.__size_ = 32;
                sub_1C53B17B4((uint64_t)&v155, (const void **)&v135.__r_.__value_.__l.__data_);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v135, "TargetFunction", 0xEuLL, v39);
                v92 = sub_1C47E3888((uint64_t)&v145, (uint64_t)&v135);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)" with count of ";
                __p.__r_.__value_.__l.__size_ = 15;
                sub_1C53B17B4(v92 + 80, (const void **)&__p.__r_.__value_.__l.__data_);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&__p, "Count", 5uLL, v35);
                v93 = sub_1C47E3888(v92, (uint64_t)&__p);
                v138 = ": ";
                v139 = 2;
                sub_1C53B17B4(v93 + 80, (const void **)&v138);
                if (__s)
                  v94 = strlen(__s);
                else
                  v94 = 0;
                v138 = __s;
                v139 = v94;
                sub_1C53B17B4(v93 + 80, (const void **)&v138);
                sub_1C61998EC((uint64_t)v140, v93);
                v140[0] = &off_1E814E538;
                if (v134 < 0)
                  operator delete(v133);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (v137 < 0)
                  operator delete(v136);
                if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v135.__r_.__value_.__l.__data_);
                v145 = &off_1E814E790;
                v95 = (char *)v155;
                if ((_DWORD)v156)
                {
                  v96 = (unint64_t)v156 << 6;
                  do
                  {
                    v97 = (void **)&v95[v96];
                    if (v95[v96 - 17] < 0)
                      operator delete(*(v97 - 5));
                    if (*((char *)v97 - 41) < 0)
                      operator delete(*(v97 - 8));
                    v96 -= 64;
                  }
                  while (v96);
                  v95 = (char *)v155;
                  v28 = v103;
                }
                if (v95 != v157)
                  free(v95);
                llvm::OptimizationRemarkEmitter::emit(v115, (llvm::DiagnosticInfoOptimizationBase *)v140);
                v140[0] = &off_1E814E790;
                v67 = v142;
                if (v143)
                {
                  v98 = (unint64_t)v143 << 6;
                  do
                  {
                    v99 = (void **)&v67[v98];
                    if ((char)v67[v98 - 17] < 0)
                      operator delete(*(v99 - 5));
                    if (*((char *)v99 - 41) < 0)
                      operator delete(*(v99 - 8));
                    v98 -= 64;
                  }
                  while (v98);
                  v67 = v142;
                  v28 = v103;
                }
LABEL_182:
                if (v67 == v144)
                  goto LABEL_70;
LABEL_154:
                free(v67);
                goto LABEL_70;
              }
              if ((unint64_t)v31 >= v32)
              {
                v41 = v32;
                v42 = v28;
                v43 = v116;
                v44 = (v31 - v116) >> 4;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 60)
                  abort();
                v46 = v41 - (_QWORD)v116;
                v47 = (uint64_t)(v41 - (_QWORD)v116) >> 3;
                if (v47 > v45)
                  v45 = v47;
                if (v46 >= 0x7FFFFFFFFFFFFFF0)
                  v48 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v48 = v45;
                if (v48)
                {
                  if (v48 >> 60)
                    sub_1C4764EE4();
                  v49 = (char *)operator new(16 * v48);
                  v43 = v116;
                }
                else
                {
                  v49 = 0;
                }
                v50 = &v49[16 * v44];
                *(_QWORD *)v50 = v39;
                *((_QWORD *)v50 + 1) = v35;
                for (i = v50; v31 != v43; v31 -= 16)
                {
                  *((_OWORD *)i - 1) = *((_OWORD *)v31 - 1);
                  i -= 16;
                }
                v52 = &v49[16 * v48];
                v31 = v50 + 16;
                v28 = v42;
                if (v43)
                  operator delete(v43);
                v30 = i;
                v32 = (unint64_t)v52;
              }
              else
              {
                *(_QWORD *)v31 = v39;
                *((_QWORD *)v31 + 1) = v35;
                v31 += 16;
                v30 = v116;
              }
              if (++v29 == v27)
                goto LABEL_71;
            }
            v60 = ****(_QWORD ****)v115;
            if (!*(_QWORD *)(v60 + 128)
              && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v60 + 72) + 48))(*(_QWORD *)(v60 + 72)))
            {
              goto LABEL_70;
            }
            v61 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 56);
            llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v135, (const llvm::DebugLoc *)(v24 + 48));
            v62 = *(_QWORD *)(v24 + 40);
            v146 = 10;
            v147 = 2;
            v149 = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
            v148 = v61;
            v150 = "pgo-icall-prom";
            v151 = "UserOptions";
            v152 = 11;
            v153 = 0;
            v154 = 0;
            v155 = v157;
            v156 = 0x400000000;
            v158 = 0;
            v159 = -1;
            v160 = v62;
            v145 = &off_1E814E538;
            v135.__r_.__value_.__r.__words[0] = (std::string::size_type)" Not promote: User options";
            v135.__r_.__value_.__l.__size_ = 26;
            sub_1C53B17B4((uint64_t)&v155, (const void **)&v135.__r_.__value_.__l.__data_);
            sub_1C61998EC((uint64_t)v140, (uint64_t)&v145);
            v140[0] = &off_1E814E538;
            v145 = &off_1E814E790;
            v63 = (char *)v155;
            if ((_DWORD)v156)
            {
              v64 = v28;
              v65 = (unint64_t)v156 << 6;
              do
              {
                v66 = (void **)&v63[v65];
                if (v63[v65 - 17] < 0)
                  operator delete(*(v66 - 5));
                if (*((char *)v66 - 41) < 0)
                  operator delete(*(v66 - 8));
                v65 -= 64;
              }
              while (v65);
              v63 = (char *)v155;
              v28 = v64;
            }
            if (v63 != v157)
              free(v63);
            llvm::OptimizationRemarkEmitter::emit(v115, (llvm::DiagnosticInfoOptimizationBase *)v140);
            v140[0] = &off_1E814E790;
            v67 = v142;
            if (!v143)
              goto LABEL_152;
            v68 = v28;
            v69 = (unint64_t)v143 << 6;
            v30 = v116;
            do
            {
              v70 = (void **)&v67[v69];
              if ((char)v67[v69 - 17] < 0)
              {
                operator delete(*(v70 - 5));
                v30 = v116;
              }
              if (*((char *)v70 - 41) < 0)
              {
                operator delete(*(v70 - 8));
                v30 = v116;
              }
              v69 -= 64;
            }
            while (v69);
LABEL_147:
            v67 = v142;
            v28 = v68;
LABEL_153:
            if (v67 != v144)
              goto LABEL_154;
LABEL_71:
            if (v30 == v31)
            {
              v10 = v112;
              v22 = v113;
            }
            else
            {
              v54 = v28;
              v55 = 0;
              v56 = v126;
              v117 = v30;
              v57 = v30;
              v10 = v112;
              do
              {
                v58 = *(llvm::CallBase **)v57;
                v59 = *((_QWORD *)v57 + 1);
                v57 += 16;
                llvm::pgo::promoteIndirectCall((uint64_t ***)v24, v58, v59, v56, v110 != 0, v115, v40);
                v56 = v126 - v59;
                v126 -= v59;
                ++v55;
              }
              while (v57 != v31);
              v22 = v113;
              v30 = v117;
              if (v55)
              {
                if (*(_QWORD *)(v24 + 48) || (*(_BYTE *)(v24 + 23) & 0x20) != 0)
                {
                  llvm::Value::setMetadata((llvm::Value *)v24, 2, 0);
                  v30 = v117;
                  v56 = v126;
                }
                v111 = 1;
                if (v56 && v127[1] != v55)
                {
                  llvm::annotateValueSite(v107, (unsigned __int8 **)v24, (uint64_t *)(v54 + 16 * v55), v114 - v55, v56, 0, v127[0]);
                  v30 = v117;
                  v111 = 1;
                }
              }
            }
            if (v30)
              operator delete(v30);
          }
        }
        ++v23;
      }
      while (v23 != v22);
      v23 = v128;
      v100 = v111;
      if (!v128)
        goto LABEL_186;
    }
    v129 = v23;
    operator delete(v23);
LABEL_186:
    v101 = v130;
    v130 = 0;
    if (v101)
      MEMORY[0x1CAA32F9C](v101, 0x1000C80451B5BE8);
    v102 = v118;
    v118 = 0;
    v4 = v106;
    v5 = (llvm::Module *)v107;
    if (v102)
      sub_1C4EF268C((uint64_t)&v118, v102);
    v17 = v109 | v100;
    v14 = v105;
    v15 = v108;
LABEL_191:
    v15 = (_QWORD *)v15[1];
  }
  while (v15 != v14);
  result = sub_1C624BA64(v120);
  v8 = a4;
  if ((v17 & 1) == 0)
    goto LABEL_3;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_DWORD *)(a4 + 64) = 2;
  return result;
}

__n128 sub_1C58B4B98(char **a1, _WORD *a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED814A50, "icp-lto", 7uLL);
  v6 = *a1;
  byte_1ED814AD0 = **a1;
  byte_1ED814AE1 = 1;
  byte_1ED814AE0 = *v6;
  word_1ED814A5A = (32 * (*a2 & 3)) | word_1ED814A5A & 0xFF9F;
  result = *a3;
  xmmword_1ED814A70 = (__int128)*a3;
  return result;
}

uint64_t sub_1C58B4C1C()
{
  int v1;
  int v2;
  __n128 v3;
  int v4;
  int *v5;

  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Disable indirect call promotion";
  v3.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED814810, "disable-icp", (_BYTE **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814810, &dword_1C475E000);
  v4 = 0;
  v5 = &v4;
  v1 = 1;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of promotions for this compilation";
  v3.n128_u64[1] = 45;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED8148D0, "icp-cutoff", &v5, &v2, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8148D0, &dword_1C475E000);
  v4 = 0;
  v5 = &v4;
  v1 = 1;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Skip Callsite up to this number for this compilation";
  v3.n128_u64[1] = 52;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED814990, "icp-csskip", &v5, &v2, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED814990, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion in LTO mode";
  v3.n128_u64[1] = 39;
  sub_1C62ADF58((char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED814A50, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion in SamplePGO mode";
  v3.n128_u64[1] = 45;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED814B10, "icp-samplepgo", (_BYTE **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814B10, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion for call instructions only";
  v3.n128_u64[1] = 54;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED814BD0, "icp-call-only", (_BYTE **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814BD0, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run indirect-call promotion for invoke instruction only";
  v3.n128_u64[1] = 55;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED814C90, "icp-invoke-only", (_BYTE **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814C90, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Dump IR after transformation happens";
  v3.n128_u64[1] = 36;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED814D50, "icp-dumpafter", (_BYTE **)&v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814D50, &dword_1C475E000);
}

uint64_t llvm::PrepareToSplitEntryBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  llvm::Instruction *v9;
  uint64_t v11;

  v2 = a2;
  v11 = a2;
  v3 = a1 + 40;
  if (a1 + 40 != a2)
  {
    v4 = a2;
    while (!v4 || *(_BYTE *)(v4 - 8) != 59)
    {
      v8 = sub_1C56168B0(&v11);
      v4 = v11;
      if (v8 && v11 && *(_DWORD *)(*(_QWORD *)(v11 - 56) + 36) == 173)
        goto LABEL_15;
LABEL_21:
      v4 = *(_QWORD *)(v4 + 8);
      v11 = v4;
      if (v4 == v3)
        return v2;
    }
    if (*(_BYTE *)(*(_QWORD *)(v4 - 56) + 16) != 16)
      goto LABEL_21;
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
    v7 = v6 ? v6 - 24 : 0;
    if (v5 != v7 || (*(_WORD *)(v4 - 6) & 0x40) != 0)
      goto LABEL_21;
LABEL_15:
    if (v4 == v2)
    {
      v4 = v2;
      v2 = *(_QWORD *)(v2 + 8);
    }
    else
    {
      if (v2)
        v9 = (llvm::Instruction *)(v2 - 24);
      else
        v9 = 0;
      llvm::Instruction::moveBefore((llvm::Instruction *)(v4 - 24), v9);
      v4 = v11;
    }
    goto LABEL_21;
  }
  return v2;
}

void llvm::initializeInstrumentation(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v9;
  llvm::PassRegistry *v10;
  llvm::PassRegistry *v11;
  llvm::PassRegistry *v12;
  llvm::PassRegistry *v13;
  llvm::PassRegistry *v14;
  llvm::PassRegistry *v15;
  llvm::PassRegistry *v16;
  llvm::PassRegistry *v17;

  llvm::initializeAddressSanitizerLegacyPassPass(this, a2);
  llvm::initializeModuleAddressSanitizerLegacyPassPass(this, v3);
  llvm::initializeMemProfilerLegacyPassPass(this, v4);
  llvm::initializeModuleMemProfilerLegacyPassPass(this, v5);
  llvm::initializeBoundsCheckingLegacyPassPass(this, v6);
  llvm::initializeControlHeightReductionLegacyPassPass(this, v7);
  llvm::initializeGCOVProfilerLegacyPassPass(this, v8);
  llvm::initializeCGProfileLegacyPassPass(this, v9);
  llvm::initializeInstrOrderFileLegacyPassPass(this, v10);
  llvm::initializeInstrProfilingLegacyPassPass(this, v11);
  llvm::initializeMemorySanitizerLegacyPassPass(this, v12);
  llvm::initializeHWAddressSanitizerLegacyPassPass(this, v13);
  llvm::initializeThreadSanitizerLegacyPassPass(this, v14);
  llvm::initializeModuleSanitizerCoverageLegacyPassPass(this, v15);
  llvm::initializeDataFlowSanitizerLegacyPassPass(this, v16);
  llvm::initializeSoftPointerAuthLegacyPassPass(this, v17);
}

void sub_1C58B5060(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  llvm::Type *v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  llvm::Constant *v16;
  llvm::Constant *v17;
  llvm::Type *v18;
  llvm::Value **NullValue;
  std::string::size_type v20;
  char v21;
  std::string *p_p;
  size_t size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  llvm::Type *v35;
  llvm::Value **v36;
  _DWORD *v37;
  uint64_t v38;
  llvm::Constant *v39;
  llvm::Type *v40;
  llvm::Value **v41;
  _QWORD *v42;
  int v43;
  uint64_t ***v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  uint64_t ***v56;
  int *v57;
  size_t v58;
  size_t v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ****v68;
  uint64_t ***v69;
  int v70;
  int v71;
  unint64_t *v72;
  size_t v73;
  const void *v74;
  unint64_t v75;
  void **p_dst;
  uint64_t v77;
  uint64_t v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  size_t v84;
  uint64_t **v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t **v89;
  unsigned int v90;
  _QWORD **v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t **v97;
  unsigned int v98;
  _QWORD **v99;
  uint64_t *v100;
  uint64_t *v101;
  const llvm::APInt *v102;
  uint64_t v103;
  llvm::ConstantInt *v104;
  const llvm::APInt *v105;
  llvm::ValueHandleBase *v106;
  llvm::ConstantInt *v107;
  unsigned int v108;
  unint64_t v109;
  llvm::ValueHandleBase *v110;
  llvm::GetElementPtrInst *v111;
  uint64_t *v112;
  uint64_t v113;
  char v114;
  char v115;
  char *v116;
  char *v117;
  llvm::Value *v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned __int8 *v121;
  llvm::ConstantInt *v122;
  unsigned int v123;
  char v124;
  uint64_t *v125;
  char v126;
  char v127;
  char *v128;
  char *v129;
  uint64_t *v130;
  llvm::Value *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t v137;
  unsigned __int8 *v138;
  llvm::ConstantInt *v139;
  llvm::ValueHandleBase *v140;
  llvm::Value *v141;
  _DWORD *v142;
  _DWORD *v143;
  uint64_t v144;
  llvm::Value *v145;
  _QWORD *v146;
  unsigned __int8 *v147;
  uint64_t v148;
  llvm::ConstantInt *v149;
  unsigned int v150;
  char v151;
  uint64_t *v152;
  const llvm::APInt *v153;
  unsigned __int8 **v154;
  llvm::ConstantInt *v155;
  unsigned int v156;
  unint64_t v157;
  llvm::ValueHandleBase *v158;
  const llvm::APInt *v159;
  std::string::size_type v160;
  llvm::ConstantInt *v161;
  llvm::ValueHandleBase *v162;
  llvm::GetElementPtrInst *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t ****v171;
  uint64_t ***v172;
  int v173;
  int v174;
  std::string::size_type v175;
  std::string::size_type v176;
  unsigned __int8 **v177;
  int v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  uint64_t ***v181;
  int *v182;
  size_t v183;
  size_t v184;
  const llvm::APInt *v185;
  llvm::ConstantInt *v186;
  unsigned int v187;
  unint64_t v188;
  uint64_t *v189;
  char v190;
  char v191;
  char *v192;
  char *v193;
  uint64_t *v194;
  llvm::Value *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t v201;
  char *v202;
  char *v203;
  llvm::Value *v204;
  uint64_t *v205;
  _QWORD *v206;
  char *v207;
  char *v208;
  unsigned __int8 **v209;
  int v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  unsigned __int8 *v213;
  std::string::size_type v214;
  std::string::size_type v215;
  unsigned __int8 **v216;
  int v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  std::string::size_type v220;
  std::string::size_type v221;
  unsigned __int8 **v222;
  int v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  char *v226;
  char *v227;
  unsigned __int8 **v228;
  int v229;
  unsigned __int8 *v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  int v236;
  BOOL v237;
  unsigned int v238;
  _QWORD *v239;
  std::string::size_type v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  void *v244;
  _QWORD *v245;
  uint64_t *v246;
  int v247;
  uint64_t *v248;
  uint64_t **v249;
  unsigned int v250;
  uint64_t **v251;
  void **__dst;
  std::string::size_type v253;
  int64_t v254;
  std::string v255;
  int v256;
  const std::error_category *v257;
  void *v258;
  _OWORD v259[2];
  uint64_t **v260;
  _QWORD **v261;
  uint64_t v262;
  void **v263;
  void **v264;
  uint64_t v265;
  int v266;
  __int16 v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  void *v272;
  void *v273[2];
  uint64_t v274;
  uint64_t v275;
  __int16 v276;
  int v277;
  void *v278;
  char v279;
  uint64_t v280;
  std::string v281;
  __int16 v282;
  std::string v283;
  __int16 v284;
  std::string __p;
  __int16 v286;
  uint64_t **v287;
  _QWORD **v288;
  uint64_t v289;
  void **v290;
  void **v291;
  uint64_t v292;
  int v293;
  __int16 v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  void *v299;
  std::string v300;
  __int16 v301;
  uint64_t v302;

  v302 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*a2;
  v5 = a2 + 3;
  v6 = (_QWORD *)a2[4];
  if (v6 != a2 + 3)
  {
    LODWORD(v7) = 0;
    while (1)
    {
      v8 = v6 - 7;
      if (v6)
      {
        if (*((_BYTE *)v6 - 40) == 3)
        {
          v9 = (*((_DWORD *)v6 - 9) & 0x7FFFFFF) == 0;
          goto LABEL_7;
        }
      }
      else
      {
        v8 = 0;
      }
      if (!*((_BYTE *)v8 + 16) && (_QWORD *)v8[9] == v8 + 9)
      {
        v9 = (*((_BYTE *)v8 + 34) & 0x80) == 0;
LABEL_7:
        v10 = v9;
        goto LABEL_13;
      }
      v10 = 0;
LABEL_13:
      v7 = (llvm::Type *)(v7 + (v10 ^ 1));
      v6 = (_QWORD *)v6[1];
      if (v6 == v5)
        goto LABEL_17;
    }
  }
  v7 = 0;
LABEL_17:
  llvm::ArrayType::get((llvm::ArrayType *)(*v4 + 1984), (llvm::Type *)0x20000);
  a1[3] = v11;
  v12 = *v4;
  llvm::ArrayType::get((llvm::ArrayType *)(v12 + 1912), v7);
  a1[4] = v13;
  v258 = operator new(0x19uLL);
  v259[0] = xmmword_1C640C6A0;
  strcpy((char *)v258, "_llvm_order_file_buffer");
  v14 = operator new(0x78uLL);
  v15 = (uint64_t)(v14 + 8);
  v14[13] = v14[13] & 0x38000000 | 1;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = v14 + 8;
  v16 = (llvm::Constant *)(v12 + 1960);
  v17 = (llvm::Constant *)a1[3];
  NullValue = llvm::Constant::getNullValue(v17, v18);
  v276 = 260;
  v273[0] = &v258;
  llvm::GlobalVariable::GlobalVariable(v15, (uint64_t)a2, v17, 0, 3, (uint64_t)NullValue, (uint64_t)v273, 0, 0, 0, 0);
  *a1 = v15;
  v286 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 27);
  llvm::Triple::Triple((uint64_t)v273, (llvm::Twine *)&__p);
  v20 = *a1;
  llvm::getInstrProfSectionName(7u, v277, 1, &__p);
  v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  if ((*(_BYTE *)(v20 + 34) & 0x40) != 0 || size)
  {
    if (size)
    {
      p_p = (std::string *)llvm::UniqueStringSaver::save(***(_QWORD ***)v20 + 2136, p_p, size);
      v25 = v24;
    }
    else
    {
      v25 = 0;
    }
    v26 = ***(_QWORD ***)v20;
    v300.__r_.__value_.__r.__words[0] = v20;
    v27 = *(_DWORD *)(v26 + 2520);
    if (v27)
    {
      v28 = *(_QWORD *)(v26 + 2504);
      v29 = v27 - 1;
      v30 = v29 & ((v20 >> 4) ^ (v20 >> 9));
      v31 = (_QWORD *)(v28 + 24 * v30);
      v32 = *v31;
      if (*v31 == v20)
      {
LABEL_29:
        v31[1] = p_p;
        v31[2] = v25;
        *(_DWORD *)(v20 + 32) = *(_DWORD *)(v20 + 32) & 0xFFBFFFFF | ((v25 != 0) << 22);
        v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        goto LABEL_30;
      }
      v235 = 0;
      v236 = 1;
      while (v32 != -4096)
      {
        if (v235)
          v237 = 0;
        else
          v237 = v32 == -8192;
        if (v237)
          v235 = v31;
        v238 = v30 + v236++;
        v30 = v238 & v29;
        v31 = (_QWORD *)(v28 + 24 * v30);
        v32 = *v31;
        if (*v31 == v20)
          goto LABEL_29;
      }
      if (v235)
        v239 = v235;
      else
        v239 = v31;
    }
    else
    {
      v239 = 0;
    }
    v31 = sub_1C53D65B8(v26 + 2504, (uint64_t)&v300, (uint64_t *)&v300, v239);
    v240 = v300.__r_.__value_.__r.__words[0];
    v31[1] = 0;
    v31[2] = 0;
    *v31 = v240;
    goto LABEL_29;
  }
LABEL_30:
  if (v21 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v300.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v300.__r_.__value_.__r.__words[1] = xmmword_1C85F4390;
  strcpy(v300.__r_.__value_.__l.__data_, "_llvm_order_file_buffer_idx");
  v33 = operator new(0x78uLL);
  v33[13] = v33[13] & 0x38000000 | 1;
  v34 = (uint64_t)(v33 + 8);
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = 0;
  *((_QWORD *)v33 + 3) = v33 + 8;
  v36 = llvm::Constant::getNullValue(v16, v35);
  v286 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
  llvm::GlobalVariable::GlobalVariable(v34, (uint64_t)a2, v16, 0, 3, (uint64_t)v36, (uint64_t)&__p, 0, 0, 0, 0);
  a1[1] = v34;
  *((_BYTE *)&v283.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v283, "bitmap_0");
  v37 = operator new(0x78uLL);
  v38 = (uint64_t)(v37 + 8);
  v37[13] = v37[13] & 0x38000000 | 1;
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = 0;
  *((_QWORD *)v37 + 3) = v37 + 8;
  v39 = (llvm::Constant *)a1[4];
  v41 = llvm::Constant::getNullValue(v39, v40);
  v286 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v283;
  llvm::GlobalVariable::GlobalVariable(v38, (uint64_t)a2, v39, 0, 8, (uint64_t)v41, (uint64_t)&__p, 0, 0, 0, 0);
  a1[2] = v38;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v283.__r_.__value_.__l.__data_);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v274) < 0)
    operator delete(v273[0]);
  if (SHIBYTE(v259[0]) < 0)
    operator delete(v258);
  v42 = (_QWORD *)a2[4];
  if (v42 != v5)
  {
    v43 = 0;
    v244 = (void *)*MEMORY[0x1E0DE4F50];
    v242 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v243 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v241 = MEMORY[0x1E0DE4FB8] + 16;
    v248 = a1;
    v249 = (uint64_t **)a2;
    v245 = v5;
    while (1)
    {
      v44 = v42 ? (uint64_t ***)(v42 - 7) : 0;
      if (v42 && *((_BYTE *)v44 + 16) == 3)
      {
        if ((*((_DWORD *)v44 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_231;
      }
      else if (!*((_BYTE *)v44 + 16) && v44[9] == (uint64_t **)(v44 + 9) && (*((_BYTE *)v44 + 34) & 0x80) == 0)
      {
        goto LABEL_231;
      }
      v45 = byte_1ED814EA7 & 0x7F;
      if (byte_1ED814EA7 < 0)
        v45 = qword_1ED814E98;
      v250 = v44 >> 4;
      if (v45)
        break;
LABEL_112:
      v85 = v44[10];
      if (v85)
        v86 = v85 - 3;
      else
        v86 = 0;
      v87 = *v249;
      v88 = **v249;
      v273[0] = "order_file_entry";
      v276 = 259;
      v89 = (uint64_t **)operator new();
      v246 = v87;
      *v89 = (uint64_t *)(*v87 + 1600);
      v89[1] = 0;
      v90 = *((_DWORD *)v89 + 5) & 0xC0000000;
      v89[3] = 0;
      v91 = v89 + 3;
      *((_DWORD *)v89 + 4) = 22;
      *((_DWORD *)v89 + 5) = v90;
      v89[4] = 0;
      v89[5] = (uint64_t *)(v89 + 5);
      v89[6] = (uint64_t *)(v89 + 5);
      v89[7] = 0;
      if (v42)
      {
        v92 = v43;
        if (v85)
          v93 = (uint64_t *)(v86 + 3);
        else
          v93 = v42 + 2;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v42 + 2), v89);
        v94 = (uint64_t *)*v93;
        v89[3] = (uint64_t *)*v93;
        v89[4] = v93;
        v94[1] = (uint64_t)v91;
        *v93 = (uint64_t)v91;
        v43 = v92;
      }
      v251 = v86;
      llvm::Value::setName((uint64_t ***)v89, (uint64_t)v273);
      v95 = **v89;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
      __p.__r_.__value_.__l.__size_ = 0x200000000;
      v289 = v95;
      v290 = &v298;
      v291 = &v299;
      v292 = 0;
      v293 = 0;
      v294 = 512;
      v295 = 7;
      v296 = 0;
      v297 = 0;
      v298 = &unk_1E8167888;
      v299 = &unk_1E8167A08;
      v287 = v89;
      v288 = v89 + 5;
      v96 = *v249;
      v273[0] = "order_file_set";
      v276 = 259;
      v97 = (uint64_t **)operator new();
      *v97 = (uint64_t *)(*v96 + 1600);
      v97[1] = 0;
      v98 = *((_DWORD *)v97 + 5) & 0xC0000000;
      v97[3] = 0;
      v99 = v97 + 3;
      *((_DWORD *)v97 + 4) = 22;
      *((_DWORD *)v97 + 5) = v98;
      v97[4] = 0;
      v97[5] = (uint64_t *)(v97 + 5);
      v97[6] = (uint64_t *)(v97 + 5);
      v97[7] = 0;
      if (v42)
      {
        if (v85)
          v100 = (uint64_t *)(v86 + 3);
        else
          v100 = v42 + 2;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v42 + 2), v97);
        v101 = (uint64_t *)*v100;
        v97[3] = (uint64_t *)*v100;
        v97[4] = v100;
        v101[1] = (uint64_t)v99;
        *v100 = (uint64_t)v99;
      }
      llvm::Value::setName((uint64_t ***)v97, (uint64_t)v273);
      v103 = **v97;
      v258 = (char *)v259 + 8;
      *(_QWORD *)&v259[0] = 0x200000000;
      v262 = v103;
      v263 = &v271;
      v264 = &v272;
      v265 = 0;
      v266 = 0;
      v267 = 512;
      v268 = 7;
      v269 = 0;
      v270 = 0;
      v271 = &unk_1E8167888;
      v272 = &unk_1E8167A08;
      v260 = v97;
      v261 = v97 + 5;
      *(_OWORD *)&v283.__r_.__value_.__l.__data_ = 0uLL;
      v104 = *(llvm::ConstantInt **)(v88 + 1960);
      LODWORD(v273[1]) = *(_DWORD *)(v88 + 1968) >> 8;
      if (LODWORD(v273[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)v273, 0, 0);
      else
        v273[0] = 0;
      v106 = llvm::ConstantInt::get(v104, (llvm::LLVMContext *)v273, v102);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
      v107 = *(llvm::ConstantInt **)(v88 + 1960);
      v108 = *(_DWORD *)(v88 + 1968);
      LODWORD(v273[1]) = v108 >> 8;
      if (v108 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v273, v43, 0);
      }
      else
      {
        if (v108 <= 0xFF)
          v109 = 0;
        else
          v109 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v108);
        v273[0] = (void *)(v109 & v43);
      }
      v247 = v43;
      v110 = llvm::ConstantInt::get(v107, (llvm::LLVMContext *)v273, v105);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      v283.__r_.__value_.__l.__size_ = (std::string::size_type)v110;
      v111 = (llvm::GetElementPtrInst *)v248[4];
      v112 = (uint64_t *)v248[2];
      v276 = 257;
      v113 = sub_1C509D7B0((uint64_t *)&__p, v111, v112, (llvm::Value *)&v283, 2, (uint64_t)v273);
      v301 = 257;
      llvm::DataLayout::getAlignment(v287[7][5] + 272, v88 + 1912);
      v115 = v114;
      v116 = (char *)operator new(0x60uLL);
      v117 = v116;
      v118 = (llvm::Value *)(v116 + 32);
      *((_QWORD *)v116 + 2) = 0;
      *((_QWORD *)v116 + 3) = v116 + 32;
      v276 = 257;
      *((_QWORD *)v116 + 4) = v88 + 1912;
      *((_QWORD *)v116 + 5) = 0;
      *((_WORD *)v116 + 24) = 60;
      *((_DWORD *)v116 + 13) = 1;
      *(_OWORD *)(v116 + 56) = 0u;
      *(_OWORD *)(v116 + 72) = 0u;
      *((_DWORD *)v116 + 22) = 0;
      *(_QWORD *)v116 = v113;
      *((_QWORD *)v116 + 1) = 0;
      if (v113)
      {
        v119 = (_QWORD *)(v113 + 8);
        v120 = *(_QWORD *)(v113 + 8);
        *((_QWORD *)v116 + 1) = v120;
        if (v120)
          *(_QWORD *)(v120 + 16) = v116 + 8;
        *((_QWORD *)v116 + 2) = v119;
        *v119 = v116;
      }
      *((_WORD *)v116 + 25) = 2 * (v115 & 0x3F);
      v116[92] = 1;
      llvm::Value::setName((uint64_t ***)v116 + 4, (uint64_t)v273);
      (*((void (**)(void **, llvm::Value *, std::string *, uint64_t **, _QWORD **))*v291 + 2))(v291, v118, &v300, v287, v288);
      if (LODWORD(__p.__r_.__value_.__r.__words[1]))
      {
        v214 = __p.__r_.__value_.__r.__words[0];
        v215 = __p.__r_.__value_.__r.__words[0] + 16 * LODWORD(__p.__r_.__value_.__r.__words[1]);
        v216 = (unsigned __int8 **)(v117 + 80);
        do
        {
          v217 = *(_DWORD *)v214;
          v121 = *(unsigned __int8 **)(v214 + 8);
          if (v121)
          {
            if (!v217)
            {
              v281.__r_.__value_.__r.__words[0] = *(_QWORD *)(v214 + 8);
              llvm::MetadataTracking::track((uint64_t)&v281, v121, 2);
              v218 = *v216;
              goto LABEL_244;
            }
          }
          else
          {
            v218 = *v216;
            if (!*v216 && (v117[55] & 0x20) == 0)
              goto LABEL_241;
            if (!v217)
            {
              v281.__r_.__value_.__r.__words[0] = 0;
LABEL_244:
              if (v218)
                llvm::MetadataTracking::untrack((uint64_t)(v117 + 80), v218);
              v219 = (unsigned __int8 *)v281.__r_.__value_.__r.__words[0];
              *v216 = (unsigned __int8 *)v281.__r_.__value_.__r.__words[0];
              if (v219)
                llvm::MetadataTracking::retrack((uint64_t)&v281, v219, (uint64_t)(v117 + 80));
              goto LABEL_241;
            }
          }
          llvm::Value::setMetadata(v118, *(_DWORD *)v214, (llvm::MDNode *)v121);
LABEL_241:
          v214 += 16;
        }
        while (v214 != v215);
      }
      v122 = *(llvm::ConstantInt **)(v88 + 1912);
      v123 = *(_DWORD *)(v88 + 1920);
      LODWORD(v273[1]) = v123 >> 8;
      if (v123 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v273, 1, 0);
      }
      else
      {
        if (v123 <= 0xFF)
          v124 = 0;
        else
          v124 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v123);
        v273[0] = (void *)(v124 & 1);
      }
      v125 = (uint64_t *)llvm::ConstantInt::get(v122, (llvm::LLVMContext *)v273, (const llvm::APInt *)v121);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      llvm::DataLayout::getAlignment(v287[7][5] + 272, *v125);
      v127 = v126;
      v128 = (char *)operator new(0x80uLL);
      v129 = v128;
      *((_DWORD *)v128 + 21) = *((_DWORD *)v128 + 21) & 0x38000000 | 2;
      *(_QWORD *)v128 = 0;
      *((_QWORD *)v128 + 2) = 0;
      *((_QWORD *)v128 + 1) = 0;
      *((_QWORD *)v128 + 5) = 0;
      *((_QWORD *)v128 + 6) = 0;
      *((_QWORD *)v128 + 4) = 0;
      v130 = (uint64_t *)(v128 + 32);
      *((_QWORD *)v128 + 8) = **(_QWORD **)*v125 + 1576;
      v131 = (llvm::Value *)(v128 + 64);
      *((_QWORD *)v128 + 3) = v128 + 64;
      *((_QWORD *)v128 + 7) = v128 + 64;
      *((_QWORD *)v128 + 9) = 0;
      v128[80] = 61;
      v128[81] = 0;
      *((_WORD *)v128 + 41) = 0;
      *((_DWORD *)v128 + 21) = 2;
      *(_OWORD *)(v128 + 88) = 0u;
      *(_OWORD *)(v128 + 104) = 0u;
      *((_DWORD *)v128 + 30) = 0;
      *(_QWORD *)v128 = v125;
      v134 = v125[1];
      v133 = v125 + 1;
      v132 = v134;
      *((_QWORD *)v128 + 1) = v134;
      if (v134)
        *(_QWORD *)(v132 + 16) = v128 + 8;
      *((_QWORD *)v128 + 2) = v133;
      *v133 = v128;
      if (*((_QWORD *)v128 + 4))
      {
        **((_QWORD **)v128 + 6) = *((_QWORD *)v128 + 5);
        v233 = *((_QWORD *)v128 + 5);
        if (v233)
          *(_QWORD *)(v233 + 16) = *((_QWORD *)v128 + 6);
      }
      *v130 = v113;
      if (v113)
      {
        v137 = *(_QWORD *)(v113 + 8);
        v136 = (uint64_t **)(v113 + 8);
        v135 = v137;
        *((_QWORD *)v128 + 5) = v137;
        if (v137)
          *(_QWORD *)(v135 + 16) = v128 + 40;
        *((_QWORD *)v128 + 6) = v136;
        *v136 = v130;
      }
      *((_WORD *)v128 + 41) = 2 * (v127 & 0x3F);
      v128[124] = 1;
      v276 = 257;
      (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v291 + 2))(v291, v131, v273, v287, v288);
      if (LODWORD(__p.__r_.__value_.__r.__words[1]))
      {
        v220 = __p.__r_.__value_.__r.__words[0];
        v221 = __p.__r_.__value_.__r.__words[0] + 16 * LODWORD(__p.__r_.__value_.__r.__words[1]);
        v222 = (unsigned __int8 **)(v129 + 112);
        do
        {
          v223 = *(_DWORD *)v220;
          v138 = *(unsigned __int8 **)(v220 + 8);
          if (v138)
          {
            if (!v223)
            {
              v300.__r_.__value_.__r.__words[0] = *(_QWORD *)(v220 + 8);
              llvm::MetadataTracking::track((uint64_t)&v300, v138, 2);
              v224 = *v222;
              goto LABEL_260;
            }
          }
          else
          {
            v224 = *v222;
            if (!*v222 && (v129[87] & 0x20) == 0)
              goto LABEL_257;
            if (!v223)
            {
              v300.__r_.__value_.__r.__words[0] = 0;
LABEL_260:
              if (v224)
                llvm::MetadataTracking::untrack((uint64_t)(v129 + 112), v224);
              v225 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
              *v222 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
              if (v225)
                llvm::MetadataTracking::retrack((uint64_t)&v300, v225, (uint64_t)(v129 + 112));
              goto LABEL_257;
            }
          }
          llvm::Value::setMetadata(v131, *(_DWORD *)v220, (llvm::MDNode *)v138);
LABEL_257:
          v220 += 16;
        }
        while (v220 != v221);
      }
      v139 = *(llvm::ConstantInt **)(v88 + 1912);
      LODWORD(v273[1]) = *(_DWORD *)(v88 + 1920) >> 8;
      if (LODWORD(v273[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)v273, 0, 0);
      else
        v273[0] = 0;
      v140 = llvm::ConstantInt::get(v139, (llvm::LLVMContext *)v273, (const llvm::APInt *)v138);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      v276 = 257;
      v141 = (llvm::Value *)sub_1C4774B48((uint64_t)&__p, 32, (uint64_t)v118, (uint64_t)v140, (uint64_t)v273);
      v142 = operator new(0xA0uLL);
      v143 = v142;
      v144 = 0;
      v145 = (llvm::Value *)(v142 + 24);
      v142[29] = v142[29] & 0x38000000 | 3;
      do
      {
        v146 = &v142[v144];
        *v146 = 0;
        v146[1] = 0;
        v146[2] = 0;
        v146[3] = v145;
        v144 += 8;
      }
      while (v144 != 24);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v142 + 24), (llvm::BasicBlock *)v97, (llvm::BasicBlock *)v251, v141, 0);
      v276 = 257;
      (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v291 + 2))(v291, v145, v273, v287, v288);
      if (LODWORD(__p.__r_.__value_.__r.__words[1]))
      {
        v175 = __p.__r_.__value_.__r.__words[0];
        v176 = __p.__r_.__value_.__r.__words[0] + 16 * LODWORD(__p.__r_.__value_.__r.__words[1]);
        v177 = (unsigned __int8 **)(v143 + 36);
        do
        {
          v178 = *(_DWORD *)v175;
          v147 = *(unsigned __int8 **)(v175 + 8);
          if (v147)
          {
            if (!v178)
            {
              v300.__r_.__value_.__r.__words[0] = *(_QWORD *)(v175 + 8);
              llvm::MetadataTracking::track((uint64_t)&v300, v147, 2);
              v179 = *v177;
              if (!*v177)
              {
LABEL_191:
                v180 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
                *v177 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
                if (v180)
                  llvm::MetadataTracking::retrack((uint64_t)&v300, v180, (uint64_t)(v143 + 36));
                goto LABEL_188;
              }
LABEL_185:
              llvm::MetadataTracking::untrack((uint64_t)(v143 + 36), v179);
              goto LABEL_191;
            }
          }
          else
          {
            v179 = *v177;
            if (!*v177 && (*((_BYTE *)v143 + 119) & 0x20) == 0)
              goto LABEL_188;
            if (!v178)
            {
              v300.__r_.__value_.__r.__words[0] = 0;
              if (!v179)
                goto LABEL_191;
              goto LABEL_185;
            }
          }
          llvm::Value::setMetadata(v145, *(_DWORD *)v175, (llvm::MDNode *)v147);
LABEL_188:
          v175 += 16;
        }
        while (v175 != v176);
      }
      v148 = v248[1];
      v149 = *(llvm::ConstantInt **)(v88 + 1960);
      v150 = *(_DWORD *)(v88 + 1968);
      LODWORD(v273[1]) = v150 >> 8;
      if (v150 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v273, 1, 0);
      }
      else
      {
        if (v150 <= 0xFF)
          v151 = 0;
        else
          v151 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v150);
        v273[0] = (void *)(v151 & 1);
      }
      v152 = (uint64_t *)llvm::ConstantInt::get(v149, (llvm::LLVMContext *)v273, (const llvm::APInt *)v147);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      v154 = sub_1C61D775C((uint64_t *)&v258, 1, v148, v152, 0, 7, 1);
      v155 = *(llvm::ConstantInt **)(v88 + 1960);
      v156 = *(_DWORD *)(v88 + 1968);
      LODWORD(v273[1]) = v156 >> 8;
      if (v156 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v273, 0x1FFFFLL, 0);
      }
      else
      {
        if (v156 <= 0xFF)
          LODWORD(v157) = 0;
        else
          v157 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v156);
        v273[0] = (void *)(v157 & 0x1FFFF);
      }
      v158 = llvm::ConstantInt::get(v155, (llvm::LLVMContext *)v273, v153);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      v276 = 257;
      v160 = sub_1C4D89BCC((uint64_t)&v258, v154, (uint64_t)v158, (uint64_t)v273);
      *(_OWORD *)&v281.__r_.__value_.__l.__data_ = 0uLL;
      v161 = *(llvm::ConstantInt **)(v88 + 1960);
      LODWORD(v273[1]) = *(_DWORD *)(v88 + 1968) >> 8;
      if (LODWORD(v273[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)v273, 0, 0);
      else
        v273[0] = 0;
      v162 = llvm::ConstantInt::get(v161, (llvm::LLVMContext *)v273, v159);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v162;
      v281.__r_.__value_.__l.__size_ = v160;
      v163 = (llvm::GetElementPtrInst *)v248[3];
      v164 = (uint64_t *)*v248;
      v276 = 257;
      v165 = sub_1C509D7B0((uint64_t *)&v258, v163, v164, (llvm::Value *)&v281, 2, (uint64_t)v273);
      v166 = *v246;
      if ((*((_BYTE *)v44 + 23) & 0x10) != 0)
      {
        v167 = ***v44;
        v168 = *(_QWORD *)(v167 + 152);
        v169 = *(unsigned int *)(v167 + 168);
        if ((_DWORD)v169)
        {
          LODWORD(v170) = (v169 - 1) & (v250 ^ (v44 >> 9));
          v171 = (uint64_t ****)(v168 + 16 * v170);
          v172 = *v171;
          if (*v171 == v44)
          {
LABEL_194:
            v181 = v171[1];
            v184 = (size_t)*v181;
            v182 = (int *)(v181 + 2);
            v183 = v184;
            goto LABEL_195;
          }
          v173 = 1;
          while (v172 != (uint64_t ***)-4096)
          {
            v174 = v170 + v173++;
            v170 = v174 & (v169 - 1);
            v172 = *(uint64_t ****)(v168 + 16 * v170);
            if (v172 == v44)
            {
              v171 = (uint64_t ****)(v168 + 16 * v170);
              goto LABEL_194;
            }
          }
        }
        v171 = (uint64_t ****)(v168 + 16 * v169);
        goto LABEL_194;
      }
      v183 = 0;
      v182 = (int *)&byte_1C871356D;
LABEL_195:
      *(_OWORD *)v273 = xmmword_1C85F4BB0;
      v274 = 0;
      llvm::MD5::update((int *)v273, v182, v183);
      llvm::MD5::final((int *)v273, (int *)&v300);
      v186 = *(llvm::ConstantInt **)(v166 + 1984);
      v187 = *(_DWORD *)(v166 + 1992);
      LODWORD(v273[1]) = v187 >> 8;
      if (v187 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v273, (uint64_t)v300.__r_.__value_.__l.__data_, 0);
      }
      else
      {
        if (v187 <= 0xFF)
          v188 = 0;
        else
          v188 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v187);
        v273[0] = (void *)(v188 & v300.__r_.__value_.__r.__words[0]);
      }
      v189 = (uint64_t *)llvm::ConstantInt::get(v186, (llvm::LLVMContext *)v273, v185);
      if (LODWORD(v273[1]) >= 0x41 && v273[0])
        MEMORY[0x1CAA32F9C](v273[0], 0x1000C8000313F17);
      llvm::DataLayout::getAlignment(v260[7][5] + 272, *v189);
      v191 = v190;
      v192 = (char *)operator new(0x80uLL);
      v193 = v192;
      *((_DWORD *)v192 + 21) = *((_DWORD *)v192 + 21) & 0x38000000 | 2;
      *(_QWORD *)v192 = 0;
      *((_QWORD *)v192 + 2) = 0;
      *((_QWORD *)v192 + 1) = 0;
      *((_QWORD *)v192 + 5) = 0;
      *((_QWORD *)v192 + 6) = 0;
      *((_QWORD *)v192 + 4) = 0;
      v194 = (uint64_t *)(v192 + 32);
      *((_QWORD *)v192 + 8) = **(_QWORD **)*v189 + 1576;
      v195 = (llvm::Value *)(v192 + 64);
      *((_QWORD *)v192 + 3) = v192 + 64;
      *((_QWORD *)v192 + 7) = v192 + 64;
      *((_QWORD *)v192 + 9) = 0;
      v192[80] = 61;
      v192[81] = 0;
      *((_WORD *)v192 + 41) = 0;
      *((_DWORD *)v192 + 21) = 2;
      *(_OWORD *)(v192 + 88) = 0u;
      *(_OWORD *)(v192 + 104) = 0u;
      *((_DWORD *)v192 + 30) = 0;
      *(_QWORD *)v192 = v189;
      v198 = v189[1];
      v197 = v189 + 1;
      v196 = v198;
      *((_QWORD *)v192 + 1) = v198;
      if (v198)
        *(_QWORD *)(v196 + 16) = v192 + 8;
      *((_QWORD *)v192 + 2) = v197;
      *v197 = v192;
      if (*((_QWORD *)v192 + 4))
      {
        **((_QWORD **)v192 + 6) = *((_QWORD *)v192 + 5);
        v234 = *((_QWORD *)v192 + 5);
        if (v234)
          *(_QWORD *)(v234 + 16) = *((_QWORD *)v192 + 6);
      }
      *v194 = v165;
      if (v165)
      {
        v201 = *(_QWORD *)(v165 + 8);
        v200 = (uint64_t **)(v165 + 8);
        v199 = v201;
        *((_QWORD *)v192 + 5) = v201;
        if (v201)
          *(_QWORD *)(v199 + 16) = v192 + 40;
        *((_QWORD *)v192 + 6) = v200;
        *v200 = v194;
      }
      *((_WORD *)v192 + 41) = 2 * (v191 & 0x3F);
      v192[124] = 1;
      v276 = 257;
      (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v264 + 2))(v264, v195, v273, v260, v261);
      if (LODWORD(v259[0]))
      {
        v226 = (char *)v258;
        v227 = (char *)v258 + 16 * LODWORD(v259[0]);
        v228 = (unsigned __int8 **)(v193 + 112);
        do
        {
          v229 = *(_DWORD *)v226;
          v230 = (unsigned __int8 *)*((_QWORD *)v226 + 1);
          if (v230)
          {
            if (!v229)
            {
              v300.__r_.__value_.__r.__words[0] = *((_QWORD *)v226 + 1);
              llvm::MetadataTracking::track((uint64_t)&v300, v230, 2);
              v231 = *v228;
              goto LABEL_275;
            }
          }
          else
          {
            v231 = *v228;
            if (!*v228 && (v193[87] & 0x20) == 0)
              goto LABEL_272;
            if (!v229)
            {
              v300.__r_.__value_.__r.__words[0] = 0;
LABEL_275:
              if (v231)
                llvm::MetadataTracking::untrack((uint64_t)(v193 + 112), v231);
              v232 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
              *v228 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
              if (v232)
                llvm::MetadataTracking::retrack((uint64_t)&v300, v232, (uint64_t)(v193 + 112));
              goto LABEL_272;
            }
          }
          llvm::Value::setMetadata(v195, *(_DWORD *)v226, (llvm::MDNode *)v230);
LABEL_272:
          v226 += 16;
        }
        while (v226 != v227);
      }
      v202 = (char *)operator new(0x60uLL);
      v203 = v202;
      *((_DWORD *)v202 + 13) = *((_DWORD *)v202 + 13) & 0x38000000 | 1;
      *(_QWORD *)v202 = 0;
      *((_QWORD *)v202 + 2) = 0;
      *((_QWORD *)v202 + 1) = 0;
      *((_QWORD *)v202 + 4) = *(_QWORD *)**v251 + 1576;
      v204 = (llvm::Value *)(v202 + 32);
      *((_QWORD *)v202 + 3) = v202 + 32;
      *((_QWORD *)v202 + 5) = 0;
      v202[48] = 30;
      v202[49] = 0;
      *((_WORD *)v202 + 25) = 0;
      *((_DWORD *)v202 + 13) = 1;
      *(_OWORD *)(v202 + 56) = 0u;
      *(_OWORD *)(v202 + 72) = 0u;
      *((_DWORD *)v202 + 22) = 0;
      *(_QWORD *)v202 = v251;
      v206 = v251 + 1;
      v205 = v251[1];
      *((_QWORD *)v202 + 1) = v205;
      if (v205)
        v205[2] = (uint64_t)(v202 + 8);
      *((_QWORD *)v202 + 2) = v206;
      *v206 = v202;
      v276 = 257;
      (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v264 + 2))(v264, v204, v273, v260, v261);
      v207 = (char *)v258;
      if (LODWORD(v259[0]))
      {
        v208 = (char *)v258 + 16 * LODWORD(v259[0]);
        v209 = (unsigned __int8 **)(v203 + 80);
        while (1)
        {
          v210 = *(_DWORD *)v207;
          v211 = (unsigned __int8 *)*((_QWORD *)v207 + 1);
          if (v211)
          {
            if (!v210)
            {
              v300.__r_.__value_.__r.__words[0] = *((_QWORD *)v207 + 1);
              llvm::MetadataTracking::track((uint64_t)&v300, v211, 2);
              v212 = *v209;
              if (!*v209)
              {
LABEL_224:
                v213 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
                *v209 = (unsigned __int8 *)v300.__r_.__value_.__r.__words[0];
                if (v213)
                  llvm::MetadataTracking::retrack((uint64_t)&v300, v213, (uint64_t)(v203 + 80));
                goto LABEL_221;
              }
LABEL_218:
              llvm::MetadataTracking::untrack((uint64_t)(v203 + 80), v212);
              goto LABEL_224;
            }
          }
          else
          {
            v212 = *v209;
            if (!*v209 && (v203[55] & 0x20) == 0)
              goto LABEL_221;
            if (!v210)
            {
              v300.__r_.__value_.__r.__words[0] = 0;
              if (!v212)
                goto LABEL_224;
              goto LABEL_218;
            }
          }
          llvm::Value::setMetadata(v204, *(_DWORD *)v207, (llvm::MDNode *)v211);
LABEL_221:
          v207 += 16;
          if (v207 == v208)
          {
            v207 = (char *)v258;
            break;
          }
        }
      }
      v5 = v245;
      if (v207 != (char *)v259 + 8)
        free(v207);
      if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
        free(__p.__r_.__value_.__l.__data_);
      v43 = v247 + 1;
LABEL_231:
      v42 = (_QWORD *)v42[1];
      if (v42 == v5)
        return;
    }
    std::mutex::lock(&stru_1EF8EB310);
    v256 = 0;
    v257 = std::system_category();
    if (byte_1ED814EA7 >= 0)
      v46 = byte_1ED814EA7 & 0x7F;
    else
      v46 = qword_1ED814E98;
    if (byte_1ED814EA7 >= 0)
      v47 = &qword_1ED814E90;
    else
      v47 = (uint64_t *)qword_1ED814E90;
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v258, v47, v46, (uint64_t)&v256, 4);
    if (v256)
    {
      v300.__r_.__value_.__r.__words[0] = (std::string::size_type)"Failed to open ";
      v301 = 259;
      v284 = 260;
      v283.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_1ED814E90;
      sub_1C6131AAC((uint64_t *)&v300, (uint64_t *)&v283, (uint64_t)&__p);
      v281.__r_.__value_.__r.__words[0] = (std::string::size_type)" to save mapping file for order file instrumentation\n";
      v282 = 259;
      sub_1C6131AAC((uint64_t *)&__p, (uint64_t *)&v281, (uint64_t)v273);
      llvm::report_fatal_error((uint64_t)v273, 1);
    }
    sub_1C4D7C8B4((uint64_t)v273);
    *(_DWORD *)((char *)&v275 + *(_QWORD *)(v274 - 24)) = *(_DWORD *)((_BYTE *)&v275 + *(_QWORD *)(v274 - 24)) & 0xFFFFFFB5 | 8;
    if ((*((_BYTE *)v44 + 23) & 0x10) == 0)
    {
      v58 = 0;
      v57 = (int *)&byte_1C871356D;
LABEL_71:
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_1C85F4BB0;
      __p.__r_.__value_.__r.__words[2] = 0;
      llvm::MD5::update((int *)&__p, v57, v58);
      llvm::MD5::final((int *)&__p, (int *)&v300);
      std::ostream::operator<<();
      std::stringbuf::str();
      v60 = std::string::insert(&v255, 0, "MD5 ");
      v61 = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v281.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v281.__r_.__value_.__r.__words[2] = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v281, " ");
      v63 = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v283.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v283.__r_.__value_.__r.__words[2] = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if ((*((_BYTE *)v44 + 23) & 0x10) == 0)
      {
        v73 = 0;
        HIBYTE(v254) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_87;
      }
      v64 = ***v44;
      v65 = *(_QWORD *)(v64 + 152);
      v66 = *(unsigned int *)(v64 + 168);
      if ((_DWORD)v66)
      {
        LODWORD(v67) = (v66 - 1) & (v250 ^ (v44 >> 9));
        v68 = (uint64_t ****)(v65 + 16 * v67);
        v69 = *v68;
        if (*v68 == v44)
        {
LABEL_79:
          v72 = (unint64_t *)v68[1];
          v75 = *v72;
          v74 = v72 + 2;
          v73 = v75;
          if (v75 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v73 >= 0x17)
          {
            v77 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v73 | 7) != 0x17)
              v77 = v73 | 7;
            v78 = v77 + 1;
            p_dst = (void **)operator new(v77 + 1);
            v253 = v73;
            v254 = v78 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v254) = v73;
            p_dst = (void **)&__dst;
            if (!v73)
              goto LABEL_87;
          }
          memmove(p_dst, v74, v73);
LABEL_87:
          *((_BYTE *)p_dst + v73) = 0;
          if (v254 >= 0)
            v79 = (const std::string::value_type *)&__dst;
          else
            v79 = (const std::string::value_type *)__dst;
          if (v254 >= 0)
            v80 = HIBYTE(v254) & 0x7F;
          else
            v80 = v253;
          v81 = std::string::append(&v283, v79, v80);
          v82 = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v300.__r_.__value_.__r.__words[2] = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v300, 10);
          __p = v300;
          memset(&v300, 0, sizeof(v300));
          if (SHIBYTE(v254) < 0)
            operator delete(__dst);
          if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v283.__r_.__value_.__l.__data_);
          if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v281.__r_.__value_.__l.__data_);
          if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v255.__r_.__value_.__l.__data_);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v83 = &__p;
          else
            v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v84 = __p.__r_.__value_.__l.__size_;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v258, (const char *)v83, v84);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v273[0] = v244;
          *(void **)((char *)v273 + *((_QWORD *)v244 - 3)) = v243;
          v274 = v242;
          v275 = v241;
          if (v279 < 0)
            operator delete(v278);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1CAA32F18](&v280);
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v258);
          std::mutex::unlock(&stru_1EF8EB310);
          goto LABEL_112;
        }
        v70 = 1;
        while (v69 != (uint64_t ***)-4096)
        {
          v71 = v67 + v70++;
          v67 = v71 & (v66 - 1);
          v69 = *(uint64_t ****)(v65 + 16 * v67);
          if (v69 == v44)
          {
            v68 = (uint64_t ****)(v65 + 16 * v67);
            goto LABEL_79;
          }
        }
      }
      v68 = (uint64_t ****)(v65 + 16 * v66);
      goto LABEL_79;
    }
    v48 = ***v44;
    v49 = *(_QWORD *)(v48 + 152);
    v50 = *(unsigned int *)(v48 + 168);
    if ((_DWORD)v50)
    {
      LODWORD(v51) = (v50 - 1) & (v250 ^ (v44 >> 9));
      v52 = (uint64_t ****)(v49 + 16 * v51);
      v53 = *v52;
      if (*v52 == v44)
      {
LABEL_70:
        v56 = v52[1];
        v59 = (size_t)*v56;
        v57 = (int *)(v56 + 2);
        v58 = v59;
        goto LABEL_71;
      }
      v54 = 1;
      while (v53 != (uint64_t ***)-4096)
      {
        v55 = v51 + v54++;
        v51 = v55 & (v50 - 1);
        v53 = *(uint64_t ****)(v49 + 16 * v51);
        if (v53 == v44)
        {
          v52 = (uint64_t ****)(v49 + 16 * v51);
          goto LABEL_70;
        }
      }
    }
    v52 = (uint64_t ****)(v49 + 16 * v50);
    goto LABEL_70;
  }
}

void llvm::initializeInstrOrderFileLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71C0);
  if (v2 != -1)
  {
    v5[0] = sub_1C58B6AA4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71C0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C58B6AA4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Instrumentation for Order File";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "instrorderfile";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5228;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58B6BFC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C58B6B34(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5228;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817E030;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F71C0);
  if (v3 != -1)
  {
    v7[0] = sub_1C58B6AA4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F71C0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C58B6BFC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C58B6B34(v0);
}

void sub_1C58B6C28(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C58B6C4C(llvm::ModulePass *a1, uint64_t **a2)
{
  int v3;
  _OWORD v5[2];
  uint64_t v6;

  v3 = llvm::ModulePass::skipModule(a1, a2);
  if ((v3 & 1) == 0)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    sub_1C58B5060((uint64_t *)v5, a2);
  }
  return v3 ^ 1u;
}

uint64_t sub_1C58B6C98()
{
  int v1;
  __n128 v2;
  const char *v3;

  v2.n128_u64[0] = (unint64_t)"Dump functions and their MD5 hash to deobfuscate profile data";
  v2.n128_u64[1] = 61;
  v3 = "";
  v1 = 1;
  sub_1C47AD050((uint64_t)&qword_1ED814E10, 0, 0);
  qword_1ED814E90 = 0;
  qword_1ED814E98 = 0;
  qword_1ED814EB8 = 0;
  unk_1ED814EC0 = 0;
  qword_1ED814EB0 = 0;
  byte_1ED814EC8 = 0;
  unk_1ED814EA0 = 0;
  unk_1ED814EA8 = &unk_1E819E950;
  qword_1ED814E10 = (uint64_t)&unk_1E819E480;
  qword_1ED814ED0 = (uint64_t)&unk_1E819E970;
  qword_1ED814ED8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED814EF0 = (uint64_t)&qword_1ED814ED8;
  sub_1C62AE20C(&v3, &v2, &v1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED814E10);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED814E10, &dword_1C475E000);
  return __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &stru_1EF8EB310, &dword_1C475E000);
}

uint64_t llvm::InstrProfiling::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::GlobalVariable *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  llvm::Function *v27;
  const llvm::Module *v29;
  llvm::GlobalVariable *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)(a1 + 32) = a2;
  sub_1C48AAFD8((_QWORD *)(a1 + 88), a3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  sub_1C62AE7C0((unsigned int *)(a1 + 120));
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  v34 = 260;
  v33[0] = a2 + 216;
  llvm::Triple::Triple((uint64_t)&v35, (llvm::Twine *)v33);
  v5 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v35;
  *(_QWORD *)(a1 + 56) = v36;
  *(_OWORD *)(a1 + 64) = v37;
  *(_QWORD *)(a1 + 80) = v38;
  if (*(_DWORD *)(a1 + 76) == 6)
    v6 = 0;
  else
    v6 = llvm::InstrProfiling::emitRuntimeHook((llvm::InstrProfiling *)a1);
  v7 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "__llvm_coverage_names", 0x15uLL);
  if (!v7 || (v8 = (llvm::GlobalVariable *)v7, *(_BYTE *)(v7 + 16) != 3))
    v8 = 0;
  v9 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "llvm.instrprof.cover", 0x14uLL);
  if (v9 && !*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 8)
    || (v10 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "llvm.instrprof.increment", 0x18uLL)) != 0
    && !*(_BYTE *)(v10 + 16)
    && *(_QWORD *)(v10 + 8)
    || (v11 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "llvm.instrprof.increment.step", 0x1DuLL)) != 0
    && !*(_BYTE *)(v11 + 16)
    && *(_QWORD *)(v11 + 8))
  {
    v14 = v8 != 0;
    goto LABEL_24;
  }
  v12 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "llvm.instrprof.value.profile", 0x1CuLL);
  v13 = v12 && !*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 8) != 0;
  v14 = v8 != 0;
  if (v8 || v13)
  {
LABEL_24:
    v30 = v8;
    v15 = a2 + 24;
    v16 = *(_QWORD *)(a2 + 32);
    if (v16 != a2 + 24)
    {
      v31 = v14;
      v32 = a2;
      do
      {
        v17 = v16 - 56;
        if (!v16)
          v17 = 0;
        v18 = v17 + 72;
        v19 = *(_QWORD *)(v17 + 80);
        if (v19 != v17 + 72)
        {
          v20 = 0;
          do
          {
            v21 = v19 - 24;
            if (!v19)
              v21 = 0;
            v22 = v21 + 40;
            for (i = *(_QWORD *)(v21 + 48); i != v22; i = *(_QWORD *)(i + 8))
            {
              if (i)
                v24 = i - 24;
              else
                v24 = 0;
              v25 = sub_1C58BC9C8(v24);
              if (i && v25)
              {
                llvm::InstrProfiling::computeNumValueSiteCounts(a1, v24);
              }
              else if (!v20)
              {
                if (sub_1C58BC97C(v24))
                  v20 = (llvm::Value **)v24;
                else
                  v20 = 0;
              }
            }
            v19 = *(_QWORD *)(v19 + 8);
          }
          while (v19 != v18);
          if (v20)
            llvm::InstrProfiling::getOrCreateRegionCounters((llvm::InstrProfiling *)a1, v20);
        }
        v16 = *(_QWORD *)(v16 + 8);
      }
      while (v16 != v15);
      v26 = *(_QWORD *)(v32 + 32);
      if (v26 == v15)
      {
        if (!v31)
        {
LABEL_56:
          if ((v6 & 1) == 0)
            return 0;
LABEL_61:
          llvm::InstrProfiling::emitVNodes((llvm::InstrProfiling *)a1);
          llvm::InstrProfiling::emitNameData((llvm::InstrProfiling *)a1);
          llvm::InstrProfiling::emitRuntimeHook((llvm::InstrProfiling *)a1);
          llvm::InstrProfiling::emitRegistration((llvm::InstrProfiling *)a1);
          llvm::InstrProfiling::emitUses((llvm::InstrProfiling *)a1, v29);
          llvm::InstrProfiling::emitInitialization((llvm::InstrProfiling *)a1);
          return 1;
        }
LABEL_60:
        llvm::InstrProfiling::lowerCoverageData((llvm::InstrProfiling *)a1, v30);
        goto LABEL_61;
      }
      v14 = v31;
      do
      {
        if (v26)
          v27 = (llvm::Function *)(v26 - 56);
        else
          v27 = 0;
        LODWORD(v6) = v6 | llvm::InstrProfiling::lowerIntrinsics((llvm::InstrProfiling *)a1, v27);
        v26 = *(_QWORD *)(v26 + 8);
      }
      while (v26 != v15);
    }
    if (!v14)
      goto LABEL_56;
    goto LABEL_60;
  }
  return v6;
}

void llvm::initializeInstrProfilingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71C8);
  if (v2 != -1)
  {
    v5[0] = sub_1C58B7134;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71C8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C58B7134(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Frontend instrumentation-based coverage lowering.";
  *(_QWORD *)(v2 + 8) = 49;
  *(_QWORD *)(v2 + 16) = "instrprof";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5230;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58BB83C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::InstrProfiling::lowerIntrinsics(llvm::InstrProfiling *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  _BOOL4 v15;
  _BOOL4 v16;

  *((_QWORD *)this + 31) = *((_QWORD *)this + 30);
  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 == (char *)a2 + 72)
    return 0;
  v6 = 0;
  do
  {
    v7 = v3 - 24;
    if (!v3)
      v7 = 0;
    v8 = v7 + 40;
    v9 = (char *)*((_QWORD *)v7 + 6);
    if (v9 != v7 + 40)
    {
      do
      {
        v10 = (char *)*((_QWORD *)v9 + 1);
        if (v9)
          v11 = (uint64_t)(v9 - 24);
        else
          v11 = 0;
        if (*(_BYTE *)(v11 + 16) == 84 && (v12 = *(_QWORD *)(v11 - 32)) != 0)
        {
          if (!*(_BYTE *)(v12 + 16)
            && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 72)
            && (*(_BYTE *)(v12 + 33) & 0x20) != 0)
          {
            if (v9 && *(_DWORD *)(v12 + 36) == 161 || (v16 = sub_1C58BC97C(v11), v9) && v16)
            {
LABEL_34:
              llvm::InstrProfiling::lowerIncrement((char **)this, (llvm::Value **)v11);
              goto LABEL_27;
            }
          }
          else
          {
            v13 = sub_1C58BC97C(v11);
            if (v9 && v13)
              goto LABEL_34;
          }
          if (!*(_BYTE *)(v12 + 16)
            && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 72)
            && (*(_BYTE *)(v12 + 33) & 0x20) != 0
            && v9
            && *(_DWORD *)(v12 + 36) == 159)
          {
            llvm::InstrProfiling::lowerCover(this, (llvm::Value **)v11);
            goto LABEL_27;
          }
        }
        else
        {
          v14 = sub_1C58BC97C(v11);
          if (v9 && v14)
            goto LABEL_34;
        }
        v15 = sub_1C58BC9C8(v11);
        if (!v9 || !v15)
          goto LABEL_28;
        llvm::InstrProfiling::lowerValueProfileInst((uint64_t)this, v11);
LABEL_27:
        v6 = 1;
LABEL_28:
        v9 = v10;
      }
      while (v10 != v8);
    }
    v3 = (char *)*((_QWORD *)v3 + 1);
  }
  while (v3 != v2);
  if ((v6 & 1) == 0)
    return 0;
  llvm::InstrProfiling::promoteCounterLoadStores(this, a2);
  return 1;
}

void llvm::InstrProfiling::lowerValueProfileInst(uint64_t a1, uint64_t a2)
{
  llvm::Value *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  const llvm::APInt *v25;
  llvm::ConstantInt *v26;
  unsigned int v27;
  unint64_t v28;
  llvm::ValueHandleBase *v29;
  uint64_t **v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  const llvm::APInt *v34;
  llvm::ConstantInt *v35;
  unsigned int v36;
  unint64_t v37;
  llvm::ValueHandleBase *v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Value *v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *Descriptor;
  _QWORD v60[4];
  __int16 v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  llvm::ValueHandleBase *v66;
  void *v67;
  uint64_t v68;
  _BYTE v69[48];
  void *v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  v70[0] = 0;
  if ((sub_1C614ECAC(*(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 136), (uint64_t)v4, v70) & 1) != 0)
    v5 = v70[0];
  else
    v5 = (void *)(*(_QWORD *)(a1 + 120) + 32 * *(unsigned int *)(a1 + 136));
  v6 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 96);
  v8 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = (_QWORD *)*v8;
  v9 = (_QWORD *)*v8;
  v10 = *(_QWORD *)(v6 + 128);
  v11 = (_QWORD *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = (_QWORD *)*v11;
  v12 = (_QWORD *)*v11;
  if (v9)
  {
    v13 = 2;
    do
    {
      LODWORD(v12) = (_DWORD)v12 + *((_DWORD *)v5 + v13);
      v14 = (v13++ - 1);
    }
    while ((unint64_t)v9 > v14);
  }
  v15 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
  sub_1C4773D54((uint64_t)v70, a2, 0, 0, 0);
  v16 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  v18 = *(_QWORD *)(a1 + 112);
  if (!v18)
    sub_1C485C2F0();
  v19 = (_QWORD *)*v17;
  v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 48))(v18, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56));
  v67 = v69;
  v68 = 0x100000000;
  if ((*(_DWORD *)(a2 + 20) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor((llvm::User *)a2);
    if ((*(_DWORD *)(a2 + 20) & 0x80000000) != 0)
    {
      v50 = llvm::User::getDescriptor((llvm::User *)a2);
      v22 = &v50[v51];
    }
    else
    {
      v22 = 0;
    }
    v21 = Descriptor;
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v23 = v22 - v21;
  if ((v23 & 0xFFFFFFFF0) != 0)
  {
    v52 = 0;
    v53 = (v23 >> 4);
    do
    {
      v54 = llvm::User::getDescriptor((llvm::User *)a2);
      v55 = *(unsigned int *)&v54[v52 + 8];
      v56 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v55;
      v57 = *(_QWORD *)&v54[v52];
      v58 = *(unsigned int *)&v54[v52 + 12] - v55;
      v60[0] = v56;
      v60[1] = v58;
      v60[2] = v57;
      sub_1C623D924((uint64_t)&v67, (uint64_t)v60);
      v52 += 16;
      --v53;
    }
    while (v53);
  }
  if (v19 == (_QWORD *)1)
  {
    v64 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
    v24 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v72 + 1912), 0);
    v61 = 257;
    v65 = sub_1C4773E38((uint64_t *)v70, 49, v15, v24, (uint64_t)v60);
    v26 = *(llvm::ConstantInt **)(*(_QWORD *)v72 + 1960);
    v27 = *(_DWORD *)(*(_QWORD *)v72 + 1968);
    v63 = v27 >> 8;
    if (v27 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v62, v12, 0);
    }
    else
    {
      if (v27 <= 0xFF)
        LODWORD(v28) = 0;
      else
        v28 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v27);
      v62 = v28 & v12;
    }
    v29 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v62, v25);
    if (v63 >= 0x41 && v62)
      MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
    v66 = v29;
    v30 = *(uint64_t ***)(a1 + 32);
    v31 = *(_QWORD *)v20;
    v32 = 1;
  }
  else
  {
    v64 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
    v33 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v72 + 1912), 0);
    v61 = 257;
    v65 = sub_1C4773E38((uint64_t *)v70, 49, v15, v33, (uint64_t)v60);
    v35 = *(llvm::ConstantInt **)(*(_QWORD *)v72 + 1960);
    v36 = *(_DWORD *)(*(_QWORD *)v72 + 1968);
    v63 = v36 >> 8;
    if (v36 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v62, v12, 0);
    }
    else
    {
      if (v36 <= 0xFF)
        LODWORD(v37) = 0;
      else
        v37 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v36);
      v62 = v37 & v12;
    }
    v38 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v62, v34);
    if (v63 >= 0x41 && v62)
      MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
    v66 = v38;
    v30 = *(uint64_t ***)(a1 + 32);
    v31 = *(_QWORD *)v20;
    v32 = 0;
  }
  v39 = (uint64_t **)sub_1C58BAB64(v30, v31, v32);
  v61 = 257;
  v41 = sub_1C5062DD8((uint64_t *)v70, v39, v40, &v64, 3, (uint64_t)v67, v68, (uint64_t)v60, 0);
  v42 = (llvm::Value *)v41;
  if (*(_BYTE *)(*(_QWORD *)v20 + 144))
  {
    v43 = 67;
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)v20 + 146))
      goto LABEL_37;
    v43 = 48;
  }
  *(_QWORD *)(v41 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v41 + 64), **(uint64_t ***)v41, 3, v43);
LABEL_37:
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v42, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v44 = *(_QWORD *)(a2 + 24);
  v45 = *(_QWORD **)(a2 + 32);
  *v45 = v44;
  *(_QWORD *)(v44 + 8) = v45;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  v46 = (char *)v67;
  if ((_DWORD)v68)
  {
    v47 = 48 * v68;
    do
    {
      v48 = &v46[v47];
      v49 = *(void **)&v46[v47 - 24];
      if (v49)
      {
        *((_QWORD *)v48 - 2) = v49;
        operator delete(v49);
      }
      if (*(v48 - 25) < 0)
        operator delete(*((void **)v48 - 6));
      v47 -= 48;
    }
    while (v47);
    v46 = (char *)v67;
  }
  if (v46 != v69)
    free(v46);
  if (v70[0] != &v71)
    free(v70[0]);
}

void llvm::InstrProfiling::promoteCounterLoadStores(llvm::InstrProfiling *this, llvm::Function *a2)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  llvm::UndefValue **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t *BlockProfileCount;
  char v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const llvm::BasicBlock *v53;
  int v54;
  uint64_t *v55;
  char v56;
  uint64_t v57;
  llvm::ConstantInt **v58;
  uint64_t LoopPredecessor;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t **v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t **v84;
  uint64_t v85;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t **v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  __int128 *v97;
  uint64_t *v98;
  int v99;
  llvm::Value **v100;
  _QWORD v101[2];
  unsigned int v102;
  llvm::UndefValue **v103;
  llvm::UndefValue **v104;
  uint64_t v105;
  void *v106;
  _QWORD v107[8];
  _OWORD v108[2];
  uint64_t v109;
  void **v110;
  _QWORD *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  llvm::UndefValue **v118;
  _QWORD *v119;
  llvm::BlockFrequencyInfo *v120;
  void *v121;
  unsigned int v122;
  uint64_t v123;
  _QWORD v124[2];
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD v131[6];
  _QWORD v132[2];
  void *v133[2];
  uint64_t v134;
  uint64_t v135[2];
  int v136;
  uint64_t v137;
  llvm::Function *v138;
  char v139;
  int v140;
  uint64_t *v141;
  uint64_t v142;
  _BYTE v143[64];
  uint64_t *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  if (word_1ED815380)
    v2 = &unk_1ED8153F8;
  else
    v2 = (char *)this + 1;
  if (!*v2)
    return;
  v133[0] = &v134;
  v133[1] = (void *)0x100000000;
  v140 = 0;
  v135[1] = 0;
  v135[0] = 0;
  v136 = 0;
  v139 = 0;
  v137 = 0;
  v138 = a2;
  sub_1C53BA620((uint64_t)v133, 0);
  v124[1] = 0;
  v124[0] = 0;
  v125 = 0;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  v129 = v131;
  v130 = 0x400000000;
  v131[4] = v132;
  v131[5] = 0;
  v132[0] = 0;
  v132[1] = 1;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)v124, (uint64_t)v133);
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  if (*((_BYTE *)this + 3))
  {
    v4 = operator new();
    v5 = *((_QWORD *)this + 14);
    if (!v5)
    {
      sub_1C485C2F0();
LABEL_154:
      __break(1u);
      return;
    }
    v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, llvm::Function *))(*(_QWORD *)v5 + 48))(v5, a2);
    sub_1C4EEA178(v4, a2, (uint64_t)v124, v6, 0, 0);
    v7 = (uint64_t **)operator new();
    *v7 = 0;
    llvm::BlockFrequencyInfo::calculate(v7, a2);
    v8 = sub_1C4DC0BBC(v4);
    MEMORY[0x1CAA32FC0](v8, 0x1060C40D526B124);
  }
  else
  {
    v7 = 0;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 30);
  v10 = (uint64_t *)*((_QWORD *)this + 31);
  while (v9 != v10)
  {
    v11 = *v9;
    v111 = (_QWORD *)v9[1];
    if (v125)
    {
      v12 = *(_QWORD *)(v11 + 40);
      v13 = (v125 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v14 = *(_QWORD *)(v124[0] + 16 * v13);
      if (v12 == v14)
      {
LABEL_13:
        v103 = *(llvm::UndefValue ***)(v124[0] + 16 * v13 + 8);
        if (v103)
        {
          v15 = sub_1C62AEFA8((uint64_t)v101, (uint64_t *)&v103);
          sub_1C61B1608((uint64_t)(v15 + 1), v11, (uint64_t *)&v111);
        }
      }
      else
      {
        v16 = 1;
        while (v14 != -4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & (v125 - 1);
          v14 = *(_QWORD *)(v124[0] + 16 * v13);
          if (v12 == v14)
            goto LABEL_13;
        }
      }
    }
    v9 += 2;
  }
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder((uint64_t)v124, (uint64_t)&v121);
  v18 = (char *)v121;
  if (v122)
  {
    v19 = (char *)v121 + 8 * v122;
    v20 = &v114;
    v21 = &v117;
    while (1)
    {
      v22 = (llvm::UndefValue **)*((_QWORD *)v19 - 1);
      v19 -= 8;
      v111 = v101;
      v112 = v20;
      v113 = 0x800000000;
      v115 = v21;
      v116 = 0x800000000;
      v118 = v22;
      v119 = v124;
      v120 = (llvm::BlockFrequencyInfo *)v7;
      v141 = (uint64_t *)v143;
      v142 = 0x800000000;
      v103 = (llvm::UndefValue **)v107;
      v104 = (llvm::UndefValue **)v107;
      v105 = 8;
      LODWORD(v106) = 0;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v22, (uint64_t)&v141);
      if (sub_1C58BBE1C(v118, (uint64_t)v141, v142) && (_DWORD)v142)
      {
        v23 = v141;
        v24 = &v141[v142];
        do
        {
          v25 = *v23;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v103, *v23);
          if (v26)
          {
            v27 = v113;
            if (v113 >= (unint64_t)HIDWORD(v113))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v20, v113 + 1, 8);
              v27 = v113;
            }
            *((_QWORD *)v112 + v27) = v25;
            LODWORD(v113) = v113 + 1;
            v28 = v25 + 40;
            for (i = *(_QWORD *)(v25 + 48); i != v28; i = *(_QWORD *)(i + 8))
            {
              v30 = i - 24;
              if (!i)
                v30 = 0;
              if (*(_BYTE *)(v30 + 16) != 83)
              {
                v31 = *(unsigned __int8 *)(i - 8) - 38;
                v32 = v31 > 0x38;
                v33 = (1 << v31) & 0x100060000000001;
                if (v32 || v33 == 0)
                  v28 = i;
                else
                  v28 = *(_QWORD *)(i + 8);
                break;
              }
            }
            v35 = v116;
            if (v116 >= (unint64_t)HIDWORD(v116))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v21, v116 + 1, 8);
              v35 = v116;
            }
            v36 = v28 - 24;
            if (!v28)
              v36 = 0;
            *((_QWORD *)v115 + v35) = v36;
            LODWORD(v116) = v116 + 1;
          }
          ++v23;
        }
        while (v23 != v24);
      }
      if (v104 != v103)
        free(v104);
      if (v141 != (uint64_t *)v143)
        free(v141);
      if (!(_DWORD)v113)
        goto LABEL_62;
      if (byte_1ED815878)
      {
        v37 = (char *)v112;
        v38 = 8 * v113;
        do
        {
          v39 = *(_QWORD *)(*(_QWORD *)v37 + 40);
          if (v39)
            v40 = v39 - 24;
          else
            v40 = 0;
          if (*(unsigned __int8 *)(v40 + 16) - 29 >= 0xB)
            v40 = 0;
          if (*(_BYTE *)(v40 + 16) == 29)
            goto LABEL_62;
          v37 += 8;
          v38 -= 8;
        }
        while (v38);
      }
      v41 = sub_1C58BBF30((uint64_t *)&v111, v118);
      if ((_DWORD)v41)
      {
        v42 = v41;
        v103 = v118;
        v43 = sub_1C62AEFA8((uint64_t)v111, (uint64_t *)&v103);
        v44 = *((unsigned int *)v43 + 4);
        if ((_DWORD)v44)
          break;
      }
LABEL_62:
      if (v115 != v21)
        free(v115);
      if (v112 != v20)
        free(v112);
      if (v19 == v18)
      {
        v18 = (char *)v121;
        goto LABEL_137;
      }
    }
    v99 = 0;
    v45 = (__int128 *)v43[1];
    v97 = &v45[v44];
    v98 = v21;
    v95 = v20;
    v96 = v19;
    v93 = v7;
    v94 = v18;
    while (1)
    {
      v141 = (uint64_t *)v143;
      v142 = 0x400000000;
      memset(v108, 0, sizeof(v108));
      v109 = 0;
      v110 = (void **)&v141;
      v100 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v45, 0, 0);
      if (!v120)
      {
LABEL_86:
        v58 = *(llvm::ConstantInt ***)v45;
        v57 = *((_QWORD *)v45 + 1);
        LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v118);
        if (!LoopPredecessor || (v60 = *(_QWORD *)(LoopPredecessor + 40), v60 == LoopPredecessor + 40))
        {
LABEL_132:
          v62 = (uint64_t *)v58;
          v63 = v57;
        }
        else
        {
          if (v60)
            v61 = v60 - 24;
          else
            v61 = 0;
          v62 = (uint64_t *)v58;
          v63 = v57;
          if (*(_BYTE *)(v61 + 16) == 30)
          {
            if ((*(_DWORD *)(v61 + 20) & 0x7FFFFFF) == 3)
              goto LABEL_93;
LABEL_98:
            v64 = (uint64_t *)LoopPredecessor;
LABEL_99:
            v67 = v42;
            v68 = v113;
            v69 = v115;
            v70 = v116;
            v71 = (uint64_t)v111;
            v72 = v112;
            v73 = v119;
            v144 = v62;
            v145 = v63;
            v74 = v63;
            llvm::LoadAndStorePromoter::LoadAndStorePromoter(&v103, &v144, 2, (uint64_t)v108, 0, 0);
            v103 = (llvm::UndefValue **)&off_1E817E1B8;
            v105 = v74;
            v106 = v72;
            v107[0] = v68;
            v107[1] = v69;
            v107[2] = v70;
            v107[3] = v71;
            v107[4] = v73;
            v144 = v64;
            v75 = *(_DWORD *)(*(_QWORD *)&v108[0] + 16);
            if (v75)
            {
              v76 = v75 - 1;
              v77 = (v75 - 1) & ((v64 >> 4) ^ (v64 >> 9));
              v78 = (uint64_t **)(**(_QWORD **)&v108[0] + 16 * v77);
              v79 = *v78;
              v42 = v67;
              if (*v78 == v64)
              {
                v7 = v93;
                v18 = v94;
                v20 = v95;
                v19 = v96;
              }
              else
              {
                v80 = 0;
                v81 = 1;
                v7 = v93;
                v18 = v94;
                v20 = v95;
                v19 = v96;
                while (v79 != (uint64_t *)-4096)
                {
                  if (v80)
                    v82 = 0;
                  else
                    v82 = v79 == (uint64_t *)-8192;
                  if (v82)
                    v80 = v78;
                  v83 = v77 + v81++;
                  v77 = v83 & v76;
                  v78 = (uint64_t **)(**(_QWORD **)&v108[0] + 16 * (v83 & v76));
                  v79 = *v78;
                  if (*v78 == v64)
                    goto LABEL_114;
                }
                if (v80)
                  v84 = v80;
                else
                  v84 = v78;
LABEL_113:
                v78 = (uint64_t **)sub_1C4ECCA58(*(uint64_t *)&v108[0], (uint64_t)&v144, (uint64_t *)&v144, v84);
                *v78 = v144;
                v78[1] = 0;
              }
LABEL_114:
              v78[1] = (uint64_t *)v100;
              v144 = (uint64_t *)&v146;
              v146 = *v45;
              v145 = 0x200000002;
              llvm::LoadAndStorePromoter::run(&v103, (uint64_t)&v144);
              if (v144 != (uint64_t *)&v146)
                free(v144);
              v21 = v98;
              if (++v99 >= v42)
              {
                v65 = 4;
              }
              else
              {
                v85 = *((_QWORD *)this + 33) + 1;
                *((_QWORD *)this + 33) = v85;
                if (v85 < dword_1ED815578 || dword_1ED815578 == -1)
                  v65 = 0;
                else
                  v65 = 4;
              }
              goto LABEL_124;
            }
            v84 = 0;
            v7 = v93;
            v18 = v94;
            v20 = v95;
            v19 = v96;
            v42 = v67;
            goto LABEL_113;
          }
          v64 = 0;
          switch(*(_BYTE *)(v61 + 16))
          {
            case 0x1D:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
              goto LABEL_99;
            case 0x1E:
              goto LABEL_154;
            case 0x1F:
              v66 = (*(_DWORD *)(v61 + 20) >> 1) & 0x3FFFFFF;
              break;
            case 0x20:
              v66 = (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) - 1;
              break;
            case 0x27:
              v66 = *(_DWORD *)(v61 + 80) + 1;
              break;
            default:
              goto LABEL_132;
          }
          if (v66 == 1)
            goto LABEL_98;
        }
LABEL_93:
        v64 = 0;
        goto LABEL_99;
      }
      BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount((uint64_t **)v120, *(const llvm::BasicBlock **)(*(_QWORD *)v45 + 40), 0);
      if (v47)
        break;
LABEL_94:
      v65 = 5;
      v21 = v98;
LABEL_124:
      llvm::SSAUpdater::~SSAUpdater((void **)v108);
      if (v141 != (uint64_t *)v143)
        free(v141);
      if ((v65 == 5 || !v65) && ++v45 != v97)
        continue;
      goto LABEL_62;
    }
    v48 = BlockProfileCount;
    v49 = (uint64_t **)v120;
    v50 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v118);
    if (!v50)
      goto LABEL_79;
    v51 = *(_QWORD *)(v50 + 40);
    if (v51 == v50 + 40)
      goto LABEL_79;
    if (v51)
      v52 = v51 - 24;
    else
      v52 = 0;
    if (*(_BYTE *)(v52 + 16) == 30)
    {
      if ((*(_DWORD *)(v52 + 20) & 0x7FFFFFF) == 3)
      {
LABEL_79:
        v53 = 0;
LABEL_84:
        v55 = llvm::BlockFrequencyInfo::getBlockProfileCount(v49, v53, 0);
        if (!v56 || 3 * (uint64_t)v55 < (unint64_t)(2 * (_QWORD)v48))
          goto LABEL_86;
        goto LABEL_94;
      }
    }
    else
    {
      v53 = 0;
      switch(*(_BYTE *)(v52 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_84;
        case 0x1E:
          goto LABEL_154;
        case 0x1F:
          v54 = (*(_DWORD *)(v52 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
          v54 = (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x27:
          v54 = *(_DWORD *)(v52 + 80) + 1;
          break;
        default:
          goto LABEL_79;
      }
      if (v54 != 1)
        goto LABEL_79;
    }
    v53 = (const llvm::BasicBlock *)v50;
    goto LABEL_84;
  }
LABEL_137:
  if (v18 != (char *)&v123)
    free(v18);
  if (v7)
  {
    v87 = *v7;
    *v7 = 0;
    if (v87)
      (*(void (**)(uint64_t *))(*v87 + 8))(v87);
    MEMORY[0x1CAA32FC0](v7, 0x20C4093837F09);
  }
  v88 = v101[0];
  if (v102)
  {
    v89 = 152 * v102;
    v90 = v101[0] + 24;
    do
    {
      if ((*(_QWORD *)(v90 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v91 = *(void **)(v90 - 16);
        if ((void *)v90 != v91)
          free(v91);
      }
      v90 += 152;
      v89 -= 152;
    }
    while (v89);
    v88 = v101[0];
  }
  MEMORY[0x1CAA32FB4](v88, 8);
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v124);
  sub_1C4DC4E38(v135);
  if (v133[0] != &v134)
    free(v133[0]);
}

BOOL llvm::InstrProfiling::isRuntimeCounterRelocationEnabled(llvm::InstrProfiling *this)
{
  if (*((_DWORD *)this + 21) == 5)
    return 0;
  if (word_1ED814FC0)
    return byte_1ED815038 != 0;
  return *((_DWORD *)this + 19) == 6;
}

uint64_t llvm::InstrProfiling::isCounterPromotionEnabled(llvm::InstrProfiling *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&unk_1ED8153F8;
  if (!word_1ED815380)
    v1 = (unsigned __int8 *)this + 1;
  return *v1;
}

_QWORD *llvm::InstrProfiling::computeNumValueSiteCounts(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *result;
  char *v12;
  int v13;
  llvm::Value *v14;

  v14 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  v4 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v5 = *(_QWORD *)(v4 + 96);
  v6 = (_QWORD *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = (_QWORD *)*v6;
  v7 = (_QWORD *)*v6;
  v8 = *(_QWORD *)(v4 + 128);
  v9 = (_QWORD *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = (_QWORD *)*v9;
  v10 = *(_DWORD *)v9;
  result = sub_1C62AFA34(a1 + 120, (uint64_t *)&v14);
  v12 = (char *)result + 4 * (_QWORD)v7;
  if (*((_DWORD *)v12 + 2) <= (v10 + 1))
    v13 = v10 + 1;
  else
    v13 = *((_DWORD *)v12 + 2);
  *((_DWORD *)v12 + 2) = v13;
  return result;
}

uint64_t llvm::InstrProfiling::getOrCreateRegionCounters(llvm::InstrProfiling *this, llvm::Value **a2)
{
  llvm::Value *v4;
  _QWORD *v5;
  const llvm::Module *v6;
  uint64_t v7;
  _QWORD *v8;
  llvm *v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  const llvm::Module *v16;
  _BOOL4 v17;
  llvm::Value *v18;
  unint64_t *v19;
  void *v20;
  uint64_t v21;
  char *RegionCounters;
  char *v23;
  int v24;
  unsigned int v25;
  char v26;
  std::string *p_p;
  size_t size;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  char **v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  llvm::ConstantAggregateZero **v49;
  llvm::ConstantAggregateZero *v50;
  llvm::ConstantAggregateZero **v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char **v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::ConstantAggregateZero **v67;
  llvm::ConstantAggregateZero *v68;
  int v69;
  int v70;
  llvm::ConstantAggregateZero *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::PointerType *v79;
  void *v80;
  llvm::Type *v81;
  unsigned int v82;
  llvm::Constant *v83;
  llvm::Constant *v84;
  _DWORD *v85;
  llvm::GlobalValue *v86;
  uint64_t v87;
  llvm::Type *v88;
  llvm::Value **NullValue;
  int v90;
  unsigned int v91;
  char v92;
  std::string *v93;
  size_t v94;
  unsigned int v95;
  llvm::GlobalValue *v96;
  llvm::GlobalValue *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  llvm::GlobalValue **v103;
  llvm::GlobalValue *v104;
  int v105;
  llvm::Constant *v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  llvm::Constant *IntPtrType;
  uint64_t v112;
  llvm::PoisonValue *v113;
  llvm::PoisonValue *v114;
  const llvm::Module *v115;
  llvm::PointerType *v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  llvm::GlobalValue **v126;
  int v127;
  BOOL v128;
  unsigned int v129;
  char **v130;
  char *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char **v137;
  char *v138;
  int v139;
  int v140;
  unsigned __int8 *v141;
  size_t v142;
  uint64_t v143;
  const llvm::APInt *v144;
  void *v145;
  uint64_t v146;
  llvm::ConstantInt *v147;
  unsigned int v148;
  unint64_t v149;
  const llvm::APInt *v150;
  llvm::ValueHandleBase *v151;
  uint64_t v152;
  llvm::ConstantInt *v153;
  unsigned int v154;
  llvm::Type *v155;
  unint64_t v156;
  llvm::ValueHandleBase *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  BOOL v162;
  int v163;
  _DWORD *v164;
  llvm::GlobalValue *v165;
  llvm::InstrProfiling *v166;
  uint64_t v167;
  int v168;
  llvm::UndefValue *v169;
  llvm::UndefValue *v170;
  llvm::ValueHandleBase *Sub;
  uint64_t v172;
  llvm::ConstantDataSequential *v173;
  _BOOL4 v174;
  unint64_t v175;
  int *v176;
  size_t v177;
  size_t v178;
  const llvm::APInt *v179;
  llvm::ConstantInt *v180;
  unsigned int v181;
  unint64_t v182;
  int v183;
  const llvm::APInt *v184;
  llvm::ValueHandleBase *v185;
  uint64_t v186;
  llvm::Value *v187;
  uint64_t *v188;
  uint64_t v189;
  llvm::ConstantInt *v190;
  unsigned int v191;
  unint64_t v192;
  const llvm::APInt *v193;
  llvm::ValueHandleBase *v194;
  llvm::ConstantInt *v195;
  unsigned int v196;
  unint64_t v197;
  llvm::ValueHandleBase *v198;
  llvm::UndefValue *v199;
  int v200;
  unsigned int v201;
  char v202;
  std::string *v203;
  size_t v204;
  unsigned int v205;
  llvm::GlobalValue *v206;
  llvm::GlobalValue *v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  unsigned int v212;
  llvm::GlobalValue **v213;
  llvm::GlobalValue *v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unint64_t v219;
  llvm::GlobalValue **v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  llvm::GlobalValue **v228;
  int v229;
  BOOL v230;
  unsigned int v231;
  llvm::GlobalValue **v232;
  llvm::GlobalValue *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t *v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t *v244;
  uint64_t v245;
  BOOL v247;
  BOOL v248;
  _BOOL4 v249;
  llvm::GlobalValue **v250;
  llvm::GlobalValue *v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  llvm::GlobalValue **v257;
  llvm::GlobalValue *v258;
  int v259;
  int v260;
  unsigned __int8 *v261;
  size_t v262;
  llvm::GlobalValue **v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  llvm::GlobalValue **v270;
  llvm::GlobalValue *v271;
  int v272;
  int v273;
  unsigned __int8 *v274;
  size_t v275;
  llvm::ConstantAggregateZero **v276;
  std::string::size_type v277;
  unsigned __int8 *v278;
  size_t v279;
  llvm::ConstantDataSequential *v280;
  _BOOL4 isCString;
  unint64_t v282;
  unsigned __int8 *RawDataValues;
  size_t v284;
  size_t v285;
  _QWORD *v286;
  unsigned __int8 *v287;
  size_t v288;
  llvm::Value *v289;
  _QWORD *v290;
  unsigned __int8 *v291;
  size_t v292;
  llvm::Value *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char **v298;
  char *v299;
  int v300;
  int v301;
  char *v302;
  size_t v303;
  size_t *inserted;
  llvm::GlobalValue *v305;
  size_t v306;
  size_t *v307;
  llvm::GlobalValue *v308;
  size_t v309;
  size_t *v310;
  _BOOL4 v311;
  _QWORD *v312;
  char *v313;
  unsigned __int8 *v314;
  size_t v315;
  size_t v316;
  uint64_t v317;
  llvm::MDNode *v318;
  llvm::MDNode *GlobalVariableExpression;
  int v320;
  llvm::PoisonValue *v321;
  void *v322;
  int v323;
  llvm::ConstantPointerNull *v324;
  unint64_t v325;
  unint64_t v326;
  llvm::Type *v327;
  _QWORD *v328;
  _QWORD *v329;
  _BOOL4 v330;
  _BOOL4 v331;
  uint64_t Impl;
  int v333;
  llvm::ConstantAggregateZero *v334;
  llvm::ConstantAggregateZero *v335;
  uint64_t *v336;
  void *v337[2];
  char v338;
  void *v339;
  size_t v340;
  char v341;
  char v342;
  llvm::Value *v343;
  void *v344[2];
  __int128 v345;
  __int128 v346;
  llvm::Value **v347;
  void *v348[2];
  __int128 v349;
  __int128 v350;
  llvm::PoisonValue *v351;
  _QWORD *v352;
  _QWORD *v353;
  std::string __p;
  __int16 v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;

  v358 = *MEMORY[0x1E0C80C00];
  v4 = llvm::Value::stripPointerCasts(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
  v343 = v4;
  v5 = sub_1C62AFA34((uint64_t)this + 120, (uint64_t *)&v343);
  v7 = v5[2];
  if (v7)
    return v7;
  v8 = v5;
  v9 = (llvm *)*((_QWORD *)a2[5] + 7);
  v10 = *((_DWORD *)v4 + 8) & 0xF;
  v11 = *((_DWORD *)this + 21);
  v12 = v10 == 8 && v11 == 5;
  if (v12)
    v13 = 7;
  else
    v13 = *((_DWORD *)v4 + 8) & 0xF;
  if (byte_1ED833D48)
    v10 = v13;
  if (v11 == 9)
    v14 = 0;
  else
    v14 = (*((_DWORD *)v4 + 8) >> 4) & 3;
  if (v11 == 9)
    v15 = 8;
  else
    v15 = v10;
  v323 = sub_1C58BB53C(*((uint64_t ***)this + 4), v6);
  v17 = llvm::needsComdatForCounter(v9, *((const llvm::Function **)this + 4), v16);
  v342 = 0;
  sub_1C58BB5B8(&v339, (uint64_t)a2, "__profc_", 8uLL, &v342);
  sub_1C58BB5B8(v337, (uint64_t)a2, "__profd_", 8uLL, &v342);
  v18 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
  v19 = (unint64_t *)((char *)v18 + 24);
  if (*((_DWORD *)v18 + 8) >= 0x41u)
    v19 = (unint64_t *)*v19;
  v325 = *v19;
  v336 = (uint64_t *)**((_QWORD **)this + 4);
  if (v341 >= 0)
    v20 = &v339;
  else
    v20 = v339;
  if (v341 >= 0)
    v21 = v341 & 0x7F;
  else
    v21 = v340;
  RegionCounters = llvm::InstrProfiling::createRegionCounters((uint64_t)this, (uint64_t)a2, (uint64_t)v20, v21, v15);
  v23 = RegionCounters;
  v24 = *((_DWORD *)RegionCounters + 8) & 0xF;
  v25 = *((_DWORD *)RegionCounters + 8) & 0xFFFFFFCF | (16 * (v14 & 3));
  *((_DWORD *)RegionCounters + 8) = v25;
  if ((v24 - 7) >= 2)
  {
    if (!v14 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)RegionCounters) & 1) != 0)
      goto LABEL_26;
    v25 = *((_DWORD *)v23 + 8);
  }
  *((_DWORD *)v23 + 8) = v25 | 0x4000;
LABEL_26:
  v334 = v9;
  llvm::getInstrProfSectionName(1u, *((_DWORD *)this + 21), 1, &__p);
  v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v333 = v14;
  if ((v23[34] & 0x40) != 0 || size)
  {
    if (size)
    {
      p_p = (std::string *)llvm::UniqueStringSaver::save(***(_QWORD ***)v23 + 2136, p_p, size);
      v30 = v29;
    }
    else
    {
      v30 = 0;
    }
    v31 = ***(_QWORD ***)v23;
    v348[0] = v23;
    v32 = *(_DWORD *)(v31 + 2520);
    if (v32)
    {
      v33 = *(_QWORD *)(v31 + 2504);
      v34 = v32 - 1;
      v35 = v34 & ((v23 >> 4) ^ (v23 >> 9));
      v36 = (char **)(v33 + 24 * v35);
      v37 = *v36;
      if (*v36 == v23)
      {
LABEL_38:
        v36[1] = (char *)p_p;
        v36[2] = v30;
        *((_DWORD *)v23 + 8) = *((_DWORD *)v23 + 8) & 0xFFBFFFFF | ((v30 != 0) << 22);
        v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v14 = v333;
        goto LABEL_39;
      }
      v58 = 0;
      v59 = 1;
      while (v37 != (char *)-4096)
      {
        if (v58)
          v60 = 0;
        else
          v60 = v37 == (char *)-8192;
        if (v60)
          v58 = v36;
        v61 = v35 + v59++;
        v35 = v61 & v34;
        v36 = (char **)(v33 + 24 * v35);
        v37 = *v36;
        if (*v36 == v23)
          goto LABEL_38;
      }
      if (v58)
        v130 = v58;
      else
        v130 = v36;
    }
    else
    {
      v130 = 0;
    }
    v36 = (char **)sub_1C53D65B8(v31 + 2504, (uint64_t)v348, (uint64_t *)v348, v130);
    v131 = (char *)v348[0];
    v36[1] = 0;
    v36[2] = 0;
    *v36 = v131;
    goto LABEL_38;
  }
LABEL_39:
  v38 = (uint64_t)v334;
  if (v26 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v39 = *((_DWORD *)this + 21);
  if (!v17)
  {
    if (v39 != 3)
      goto LABEL_43;
    goto LABEL_167;
  }
  v12 = v39 == 1;
  v132 = v323;
  if (!v12)
    v132 = 0;
  if (v132 != 1)
  {
LABEL_167:
    if (v341 >= 0)
      v141 = (unsigned __int8 *)&v339;
    else
      v141 = (unsigned __int8 *)v339;
    if (v341 >= 0)
      v142 = v341 & 0x7F;
    else
      v142 = v340;
    goto LABEL_389;
  }
  if ((v23[23] & 0x10) == 0)
  {
    v142 = 0;
    v141 = (unsigned __int8 *)&byte_1C871356D;
    goto LABEL_389;
  }
  v133 = ***(_QWORD ***)v23;
  v134 = *(_QWORD *)(v133 + 152);
  v135 = *(unsigned int *)(v133 + 168);
  if (!(_DWORD)v135)
    goto LABEL_387;
  LODWORD(v136) = (v135 - 1) & ((v23 >> 4) ^ (v23 >> 9));
  v137 = (char **)(v134 + 16 * v136);
  v138 = *v137;
  if (*v137 != v23)
  {
    v139 = 1;
    while (v138 != (char *)-4096)
    {
      v140 = v136 + v139++;
      v136 = v140 & (v135 - 1);
      v138 = *(char **)(v134 + 16 * v136);
      if (v138 == v23)
      {
        v137 = (char **)(v134 + 16 * v136);
        goto LABEL_388;
      }
    }
LABEL_387:
    v137 = (char **)(v134 + 16 * v135);
  }
LABEL_388:
  v302 = v137[1];
  v303 = *(_QWORD *)v302;
  v141 = (unsigned __int8 *)(v302 + 16);
  v142 = v303;
LABEL_389:
  inserted = llvm::Module::getOrInsertComdat(*((_QWORD *)this + 4), v141, v142);
  if (!v17)
    *((_DWORD *)inserted + 2) = 3;
  llvm::GlobalObject::setComdat((llvm::GlobalObject *)v23, (llvm::Comdat *)inserted);
LABEL_43:
  v40 = *((_DWORD *)v23 + 8);
  if ((v15 - 7) >= 2)
    v41 = *((_DWORD *)v23 + 8);
  else
    v41 = v40 & 0xFFFFFFC0;
  v42 = v41 & 0xFFFFFFF0 | v15;
  *((_DWORD *)v23 + 8) = v42;
  if ((v15 - 7) < 2)
    goto LABEL_432;
  if ((v40 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v23) & 1) == 0)
  {
    v42 = *((_DWORD *)v23 + 8);
LABEL_432:
    *((_DWORD *)v23 + 8) = v42 | 0x4000;
  }
  v8[2] = v23;
  if (!byte_1ED833D48)
    goto LABEL_89;
  v43 = v334 >> 4;
  if ((*((_BYTE *)v334 + 23) & 0x20) != 0)
  {
    v44 = ***(_QWORD ***)v334;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v334;
    v45 = *(_DWORD *)(v44 + 2496);
    if (v45)
    {
      v46 = *(_QWORD *)(v44 + 2480);
      v47 = v45 - 1;
      v48 = v47 & (v43 ^ (v334 >> 9));
      v49 = (llvm::ConstantAggregateZero **)(v46 + 40 * v48);
      v50 = *v49;
      if (*v49 == v334)
      {
LABEL_60:
        v55 = *((unsigned int *)v49 + 4);
        if (!(_DWORD)v55)
          goto LABEL_75;
        v56 = (uint64_t *)((char *)v49[1] + 8);
        v57 = 16 * v55;
        while (*((_DWORD *)v56 - 2))
        {
          v56 += 2;
          v57 -= 16;
          if (!v57)
            goto LABEL_75;
        }
        v62 = *v56;
        if (!*v56)
          goto LABEL_75;
        llvm::DIBuilder::DIBuilder((uint64_t)&__p, *((_QWORD **)this + 4), 1, *(_QWORD *)(v62 - 8 * *(unsigned int *)(v62 + 8) + 40));
        v278 = 0;
        v279 = 0;
        v344[0] = 0;
        v344[1] = 0;
        if (llvm::InstrProfCorrelator::FunctionNameAttributeName[0])
        {
          v279 = strlen(llvm::InstrProfCorrelator::FunctionNameAttributeName[0]);
          v278 = (unsigned __int8 *)llvm::InstrProfCorrelator::FunctionNameAttributeName[0];
        }
        v344[0] = llvm::MDString::get(v336, v278, v279);
        v280 = (llvm::ConstantDataSequential *)*((_QWORD *)v4 - 4);
        isCString = llvm::ConstantDataSequential::isCString(v280);
        RawDataValues = (unsigned __int8 *)llvm::ConstantDataSequential::getRawDataValues(v280);
        v284 = v282 - 1;
        if (v282 < v282 - 1)
          v284 = v282;
        if (isCString)
          v285 = v284;
        else
          v285 = v282;
        v286 = llvm::MDString::get(v336, RawDataValues, v285);
        v287 = 0;
        v288 = 0;
        v344[1] = v286;
        v356 = 0;
        v357 = 0;
        if (llvm::InstrProfCorrelator::CFGHashAttributeName[0])
        {
          v288 = strlen(llvm::InstrProfCorrelator::CFGHashAttributeName[0]);
          v287 = (unsigned __int8 *)llvm::InstrProfCorrelator::CFGHashAttributeName[0];
        }
        v356 = (uint64_t)llvm::MDString::get(v336, v287, v288);
        v290 = llvm::ValueAsMetadata::get(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4], v289);
        v291 = 0;
        v292 = 0;
        v357 = v290;
        v352 = 0;
        v353 = 0;
        if (llvm::InstrProfCorrelator::NumCountersAttributeName)
        {
          v292 = strlen(llvm::InstrProfCorrelator::NumCountersAttributeName);
          v291 = (unsigned __int8 *)llvm::InstrProfCorrelator::NumCountersAttributeName;
        }
        v352 = llvm::MDString::get(v336, v291, v292);
        v353 = llvm::ValueAsMetadata::get(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8], v293);
        v348[0] = (void *)llvm::MDTuple::getImpl(v336, v344, 2, 0, 1);
        v348[1] = (void *)llvm::MDTuple::getImpl(v336, &v356, 2, 0, 1);
        *(_QWORD *)&v349 = llvm::MDTuple::getImpl(v336, &v352, 2, 0, 1);
        Impl = llvm::MDTuple::getImpl((uint64_t *)__p.__r_.__value_.__l.__size_, v348, 3, 0, 1);
        if ((v23[23] & 0x10) == 0)
        {
          v311 = v17;
          v312 = v8;
          v315 = 0;
          v314 = (unsigned __int8 *)&byte_1C871356D;
          goto LABEL_407;
        }
        v294 = ***(_QWORD ***)v23;
        v295 = *(_QWORD *)(v294 + 152);
        v296 = *(unsigned int *)(v294 + 168);
        if ((_DWORD)v296)
        {
          LODWORD(v297) = (v296 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          v298 = (char **)(v295 + 16 * v297);
          v299 = *v298;
          if (*v298 == v23)
          {
LABEL_406:
            v311 = v17;
            v312 = v8;
            v313 = v298[1];
            v316 = *(_QWORD *)v313;
            v314 = (unsigned __int8 *)(v313 + 16);
            v315 = v316;
LABEL_407:
            v317 = v62;
            if (*(_BYTE *)v62 != 15)
              v317 = *(_QWORD *)(v62 - 8 * *(unsigned int *)(v62 + 8));
            v318 = sub_1C622B7A4((uint64_t *)__p.__r_.__value_.__l.__size_, 59, "Profile Data Type", 0x11uLL);
            GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression((uint64_t)&__p, v62, v314, v315, 0, 0, v317, 0, (uint64_t)v318, (*((_DWORD *)v23 + 8) & 0xFu) - 7 < 2, 1, 0, 0, 0, 0, Impl);
            llvm::Value::addMetadata((llvm::Value *)v23, 0, GlobalVariableExpression);
            llvm::DIBuilder::finalize((llvm::DIBuilder *)&__p);
            sub_1C50F023C((uint64_t)&__p);
            v8 = v312;
            v17 = v311;
            v14 = v333;
            goto LABEL_88;
          }
          v300 = 1;
          while (v299 != (char *)-4096)
          {
            v301 = v297 + v300++;
            v297 = v301 & (v296 - 1);
            v299 = *(char **)(v295 + 16 * v297);
            if (v299 == v23)
            {
              v298 = (char **)(v295 + 16 * v297);
              goto LABEL_406;
            }
          }
        }
        v298 = (char **)(v295 + 16 * v296);
        goto LABEL_406;
      }
      v51 = 0;
      v52 = 1;
      while (v50 != (llvm::ConstantAggregateZero *)-4096)
      {
        if (v51)
          v53 = 0;
        else
          v53 = v50 == (llvm::ConstantAggregateZero *)-8192;
        if (v53)
          v51 = v49;
        v54 = v48 + v52++;
        v48 = v54 & v47;
        v49 = (llvm::ConstantAggregateZero **)(v46 + 40 * v48);
        v50 = *v49;
        if (*v49 == v334)
          goto LABEL_60;
      }
      if (v51)
        v276 = v51;
      else
        v276 = v49;
    }
    else
    {
      v276 = 0;
    }
    v49 = (llvm::ConstantAggregateZero **)sub_1C541AB24(v44 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v276);
    v277 = __p.__r_.__value_.__r.__words[0];
    v49[3] = 0;
    v49[4] = 0;
    *v49 = (llvm::ConstantAggregateZero *)v277;
    v49[1] = (llvm::ConstantAggregateZero *)(v49 + 3);
    v49[2] = (llvm::ConstantAggregateZero *)0x100000000;
    goto LABEL_60;
  }
LABEL_75:
  if ((*((_BYTE *)v334 + 23) & 0x10) == 0)
  {
    v73 = 0;
    v72 = &byte_1C871356D;
    goto LABEL_84;
  }
  v63 = ***(_QWORD ***)v334;
  v64 = *(_QWORD *)(v63 + 152);
  v65 = *(unsigned int *)(v63 + 168);
  if (!(_DWORD)v65)
    goto LABEL_82;
  LODWORD(v66) = (v65 - 1) & (v43 ^ (v334 >> 9));
  v67 = (llvm::ConstantAggregateZero **)(v64 + 16 * v66);
  v68 = *v67;
  if (*v67 != v334)
  {
    v69 = 1;
    while (v68 != (llvm::ConstantAggregateZero *)-4096)
    {
      v70 = v66 + v69++;
      v66 = v70 & (v65 - 1);
      v68 = *(llvm::ConstantAggregateZero **)(v64 + 16 * v66);
      if (v68 == v334)
      {
        v67 = (llvm::ConstantAggregateZero **)(v64 + 16 * v66);
        goto LABEL_83;
      }
    }
LABEL_82:
    v67 = (llvm::ConstantAggregateZero **)(v64 + 16 * v65);
  }
LABEL_83:
  v71 = v67[1];
  v74 = *(_QWORD *)v71;
  v72 = (char *)v71 + 16;
  v73 = v74;
LABEL_84:
  LOWORD(v350) = 1283;
  v348[0] = "Missing debug info for function ";
  *(_QWORD *)&v349 = v72;
  *((_QWORD *)&v349 + 1) = v73;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v348;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"; required for profile correlation.";
  v355 = 770;
  llvm::Twine::str((llvm::Twine *)&__p, v344);
  v75 = *((_QWORD *)this + 4);
  v78 = *(_QWORD *)(v75 + 168);
  v76 = v75 + 168;
  v77 = v78;
  if (*(char *)(v76 + 23) < 0)
    v76 = v77;
  v355 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v344;
  LODWORD(v348[1]) = 19;
  BYTE4(v348[1]) = 1;
  v348[0] = &unk_1E814E730;
  *(_QWORD *)&v349 = v76;
  *((_QWORD *)&v349 + 1) = &__p;
  llvm::LLVMContext::diagnose((uint64_t)v336, (const llvm::DiagnosticInfo *)v348);
  if (SBYTE7(v345) < 0)
    operator delete(v344[0]);
LABEL_88:
  v38 = (uint64_t)v334;
LABEL_89:
  v324 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(*v336 + 1912), 0);
  v80 = llvm::ConstantPointerNull::get(v324, v79);
  v81 = (llvm::Type *)(*((unsigned int *)v8 + 3) + (unint64_t)*((unsigned int *)v8 + 2));
  if (!v81 || !byte_1ED8150F8)
    goto LABEL_117;
  v82 = *((_DWORD *)this + 19);
  if (v82 > 0x21 || ((1 << v82) & 0x3F0005AE8) == 0)
  {
    v247 = *((_DWORD *)this + 16) == 42 && *((_DWORD *)this + 18) == 3;
    v248 = v247 && v82 == 25;
    v249 = v248;
    if ((((v82 != 15) ^ v249) & 1) != 0)
      goto LABEL_117;
  }
  v330 = v17;
  v326 = *((unsigned int *)v8 + 3) + (unint64_t)*((unsigned int *)v8 + 2);
  v328 = v8;
  v320 = 16 * v14;
  llvm::ArrayType::get((llvm::ArrayType *)(*v336 + 1984), v81);
  v84 = v83;
  v85 = operator new(0x78uLL);
  v86 = (llvm::GlobalValue *)(v85 + 8);
  v85[13] = v85[13] & 0x38000000 | 1;
  *(_QWORD *)v85 = 0;
  *((_QWORD *)v85 + 1) = 0;
  *((_QWORD *)v85 + 2) = 0;
  *((_QWORD *)v85 + 3) = v85 + 8;
  v87 = *((_QWORD *)this + 4);
  NullValue = llvm::Constant::getNullValue(v84, v88);
  sub_1C58BB5B8(v348, (uint64_t)a2, "__profvp_", 9uLL, &v342);
  v355 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v348;
  v80 = v85 + 8;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v85 + 8), v87, v84, 0, v15, (uint64_t)NullValue, (uint64_t)&__p, 0, 0, 0, 0);
  if (SBYTE7(v349) < 0)
    operator delete(v348[0]);
  v90 = v85[16];
  v91 = v90 & 0xFFFFFFCF | v320;
  v85[16] = v91;
  v17 = v330;
  if ((v90 & 0xFu) - 7 >= 2)
  {
    if (!v333 || (llvm::GlobalValue::hasExternalWeakLinkage(v86) & 1) != 0)
      goto LABEL_97;
    v91 = v85[16];
  }
  v85[16] = v91 | 0x4000;
LABEL_97:
  llvm::getInstrProfSectionName(3u, *((_DWORD *)this + 21), 1, &__p);
  v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v93 = &__p;
  else
    v93 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v94 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v94 = __p.__r_.__value_.__l.__size_;
  v95 = v85[16];
  if ((v95 & 0x400000) != 0 || v94)
  {
    v81 = (llvm::Type *)v326;
    if (v94)
    {
      v93 = (std::string *)llvm::UniqueStringSaver::save(***(_QWORD ***)v86 + 2136, v93, v94);
      v97 = v96;
    }
    else
    {
      v97 = 0;
    }
    v98 = ***(_QWORD ***)v86;
    v348[0] = v85 + 8;
    v99 = *(_DWORD *)(v98 + 2520);
    if (v99)
    {
      v100 = *(_QWORD *)(v98 + 2504);
      v101 = v99 - 1;
      v102 = v101 & ((v86 >> 4) ^ (v86 >> 9));
      v103 = (llvm::GlobalValue **)(v100 + 24 * v102);
      v104 = *v103;
      if (*v103 == v86)
      {
LABEL_109:
        v103[1] = (llvm::GlobalValue *)v93;
        v103[2] = v97;
        v95 = v85[16] & 0xFFBFFFFF | ((v97 != 0) << 22);
        v85[16] = v95;
        v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v17 = v330;
        goto LABEL_110;
      }
      v126 = 0;
      v127 = 1;
      while (v104 != (llvm::GlobalValue *)-4096)
      {
        if (v126)
          v128 = 0;
        else
          v128 = v104 == (llvm::GlobalValue *)-8192;
        if (v128)
          v126 = v103;
        v129 = v102 + v127++;
        v102 = v129 & v101;
        v103 = (llvm::GlobalValue **)(v100 + 24 * v102);
        v104 = *v103;
        if (*v103 == v86)
          goto LABEL_109;
      }
      if (v126)
        v250 = v126;
      else
        v250 = v103;
    }
    else
    {
      v250 = 0;
    }
    v103 = (llvm::GlobalValue **)sub_1C53D65B8(v98 + 2504, (uint64_t)v348, (uint64_t *)v348, v250);
    v251 = (llvm::GlobalValue *)v348[0];
    v103[1] = 0;
    v103[2] = 0;
    *v103 = v251;
    goto LABEL_109;
  }
  v81 = (llvm::Type *)v326;
LABEL_110:
  v8 = v328;
  if (v92 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v95 = v85[16];
  }
  v85[16] = v95 & 0xFFC0FFFF | 0x40000;
  v105 = *((_DWORD *)this + 21);
  if (v17)
  {
    v12 = v105 == 1;
    v252 = v323;
    if (!v12)
      v252 = 0;
    if (v252 != 1)
      goto LABEL_332;
    if ((*((_BYTE *)v85 + 55) & 0x10) == 0)
    {
      v262 = 0;
      v261 = (unsigned __int8 *)&byte_1C871356D;
      goto LABEL_395;
    }
    v253 = ***(_QWORD ***)v86;
    v254 = *(_QWORD *)(v253 + 152);
    v255 = *(unsigned int *)(v253 + 168);
    if ((_DWORD)v255)
    {
      LODWORD(v256) = (v255 - 1) & ((v86 >> 4) ^ (v86 >> 9));
      v257 = (llvm::GlobalValue **)(v254 + 16 * v256);
      v258 = *v257;
      if (*v257 == v86)
      {
LABEL_394:
        v305 = v257[1];
        v306 = *(_QWORD *)v305;
        v261 = (unsigned __int8 *)v305 + 16;
        v262 = v306;
LABEL_395:
        v307 = llvm::Module::getOrInsertComdat(*((_QWORD *)this + 4), v261, v262);
        if (!v17)
          *((_DWORD *)v307 + 2) = 3;
        llvm::GlobalObject::setComdat(v86, (llvm::Comdat *)v307);
        goto LABEL_114;
      }
      v259 = 1;
      while (v258 != (llvm::GlobalValue *)-4096)
      {
        v260 = v256 + v259++;
        v256 = v260 & (v255 - 1);
        v258 = *(llvm::GlobalValue **)(v254 + 16 * v256);
        if (v258 == v86)
        {
          v257 = (llvm::GlobalValue **)(v254 + 16 * v256);
          goto LABEL_394;
        }
      }
    }
    v257 = (llvm::GlobalValue **)(v254 + 16 * v255);
    goto LABEL_394;
  }
  if (v105 == 3)
  {
LABEL_332:
    if (v341 >= 0)
      v261 = (unsigned __int8 *)&v339;
    else
      v261 = (unsigned __int8 *)v339;
    if (v341 >= 0)
      v262 = v341 & 0x7F;
    else
      v262 = v340;
    goto LABEL_395;
  }
LABEL_114:
  v106 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v336 + 1912), 0);
  if (*(llvm::Constant **)v86 != v106)
    v80 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v86, v106, 0);
  v38 = (uint64_t)v334;
LABEL_117:
  if (!byte_1ED833D48)
  {
    v327 = v81;
    v322 = v80;
    v331 = v17;
    IntPtrType = (llvm::Constant *)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*((_QWORD *)this + 4) + 272), **((llvm::LLVMContext ***)this + 4), 0);
    v112 = *v336;
    llvm::ArrayType::get((llvm::ArrayType *)(*v336 + 1936), (llvm::Type *)2);
    v114 = v113;
    v351 = 0;
    v349 = 0u;
    v350 = 0u;
    *(_OWORD *)v348 = 0u;
    v348[0] = (void *)(*v336 + 1984);
    v348[1] = (void *)(*v336 + 1984);
    *(_QWORD *)&v349 = IntPtrType;
    *((_QWORD *)&v349 + 1) = llvm::PointerType::get((llvm::PointerType *)(*v336 + 1912), 0);
    *(_QWORD *)&v350 = llvm::PointerType::get((llvm::PointerType *)(*v336 + 1912), 0);
    *((_QWORD *)&v350 + 1) = *v336 + 1960;
    v351 = v114;
    v321 = v114;
    v335 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v336, (uint64_t)v348, 7, 0);
    if (!sub_1C58BB53C(*(uint64_t ***)(v38 + 40), v115))
      goto LABEL_184;
    v117 = *(_DWORD *)(v38 + 32) & 0xF;
    if ((*(_DWORD *)(v38 + 32) & 0xE) == 2)
    {
      if (v117 != 1)
      {
        if ((v117 - 7) > 1)
        {
LABEL_180:
          if ((llvm::Function::hasAddressTaken((llvm::Function *)v38, 0, 0, 1, 0, 0) & 1) != 0
            || (*(_DWORD *)(v38 + 32) & 0xE) == 2)
          {
            goto LABEL_182;
          }
LABEL_184:
          v145 = llvm::ConstantPointerNull::get(v324, v116);
          goto LABEL_185;
        }
LABEL_151:
        if (*(_QWORD *)(v38 + 48))
          goto LABEL_184;
        goto LABEL_180;
      }
    }
    else
    {
      if ((v117 - 7) < 2)
        goto LABEL_151;
      if (v117 != 1)
      {
LABEL_182:
        v144 = v324;
        if (*(llvm::ConstantPointerNull **)v38 == v324)
          goto LABEL_186;
        v145 = sub_1C537D3B8((llvm *)0x31, v38, v324, 0);
LABEL_185:
        v38 = (uint64_t)v145;
LABEL_186:
        v352 = 0;
        v353 = 0;
        v146 = *((unsigned int *)v8 + 2);
        v147 = *(llvm::ConstantInt **)(v112 + 1936);
        v148 = *(_DWORD *)(v112 + 1944);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v148 >> 8;
        if (v148 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v146, 0);
        }
        else
        {
          if (v148 <= 0xFF)
            v149 = 0;
          else
            v149 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v148);
          __p.__r_.__value_.__r.__words[0] = v149 & v146;
        }
        v151 = llvm::ConstantInt::get(v147, (llvm::LLVMContext *)&__p, v144);
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
          MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        v352 = v151;
        v152 = *((unsigned int *)v8 + 3);
        v153 = *(llvm::ConstantInt **)(v112 + 1936);
        v154 = *(_DWORD *)(v112 + 1944);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v154 >> 8;
        if (v154 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v152, 0);
          v155 = v327;
        }
        else
        {
          v155 = v327;
          if (v154 <= 0xFF)
            v156 = 0;
          else
            v156 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v154);
          __p.__r_.__value_.__r.__words[0] = v156 & v152;
        }
        v157 = llvm::ConstantInt::get(v153, (llvm::LLVMContext *)&__p, v150);
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
          MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        v353 = v157;
        v329 = v8;
        v158 = (uint64_t)v23;
        if (v155)
        {
          v159 = v38;
        }
        else
        {
          v159 = v38;
          if ((v323 & v331) != 1 || v342)
          {
            v160 = v323 ^ 1;
            v161 = *((_DWORD *)this + 21);
            if (v161 != 1)
              v160 = 0;
            if (v161 == 3)
              v160 = 1;
            v162 = v160 == 0;
            v163 = v333;
            if (!v162)
              v163 = 0;
            v333 = v163;
            if (!v162)
              v15 = 8;
          }
        }
        v164 = operator new(0x78uLL);
        v165 = (llvm::GlobalValue *)(v164 + 8);
        v164[13] = v164[13] & 0x38000000 | 1;
        *(_QWORD *)v164 = 0;
        *((_QWORD *)v164 + 1) = 0;
        *((_QWORD *)v164 + 2) = 0;
        *((_QWORD *)v164 + 3) = v164 + 8;
        v166 = this;
        v167 = *((_QWORD *)this + 4);
        v355 = 260;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
        v168 = v15;
        llvm::GlobalVariable::GlobalVariable((uint64_t)(v164 + 8), v167, v335, 0, v15, 0, (uint64_t)&__p, 0, 0, 0, 0);
        v169 = sub_1C537D3B8((llvm *)0x2F, v158, IntPtrType, 0);
        v170 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)(v164 + 8), IntPtrType, 0);
        Sub = llvm::ConstantExpr::getSub(v169, v170, 0, 0);
        v347 = 0;
        v345 = 0u;
        v346 = 0u;
        *(_OWORD *)v344 = 0u;
        v172 = *v336;
        v173 = (llvm::ConstantDataSequential *)*((_QWORD *)llvm::Value::stripPointerCasts(a2[-4
                                                                                           * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)])
                                               - 4);
        v174 = llvm::ConstantDataSequential::isCString(v173);
        v176 = (int *)llvm::ConstantDataSequential::getRawDataValues(v173);
        v177 = v175 - 1;
        if (v175 < v175 - 1)
          v177 = v175;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_1C85F4BB0;
        if (v174)
          v178 = v177;
        else
          v178 = v175;
        __p.__r_.__value_.__r.__words[2] = 0;
        llvm::MD5::update((int *)&__p, v176, v178);
        llvm::MD5::final((int *)&__p, (int *)&v356);
        v180 = *(llvm::ConstantInt **)(v172 + 1984);
        v181 = *(_DWORD *)(v172 + 1992);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v181 >> 8;
        if (v181 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v356, 0);
          v183 = v168;
        }
        else
        {
          if (v181 <= 0xFF)
            v182 = 0;
          else
            v182 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v181);
          v183 = v168;
          __p.__r_.__value_.__r.__words[0] = v182 & v356;
        }
        v185 = llvm::ConstantInt::get(v180, (llvm::LLVMContext *)&__p, v179);
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
          MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        v344[0] = v185;
        v186 = *v336;
        v187 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
        v188 = (uint64_t *)((char *)v187 + 24);
        if (*((_DWORD *)v187 + 8) >= 0x41u)
          v188 = (uint64_t *)*v188;
        v189 = *v188;
        v190 = *(llvm::ConstantInt **)(v186 + 1984);
        v191 = *(_DWORD *)(v186 + 1992);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v191 >> 8;
        if (v191 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v189, 0);
        }
        else
        {
          if (v191 <= 0xFF)
            v192 = 0;
          else
            v192 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v191);
          __p.__r_.__value_.__r.__words[0] = v192 & v189;
        }
        v194 = llvm::ConstantInt::get(v190, (llvm::LLVMContext *)&__p, v184);
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
          MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        v344[1] = v194;
        *(_QWORD *)&v345 = Sub;
        *((_QWORD *)&v345 + 1) = v159;
        *(_QWORD *)&v346 = v322;
        v195 = *(llvm::ConstantInt **)(*v336 + 1960);
        v196 = *(_DWORD *)(*v336 + 1968);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v196 >> 8;
        if (v196 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v325, 0);
        }
        else
        {
          if (v196 <= 0xFF)
            v197 = 0;
          else
            v197 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v196);
          __p.__r_.__value_.__r.__words[0] = v197 & v325;
        }
        v198 = llvm::ConstantInt::get(v195, (llvm::LLVMContext *)&__p, v193);
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
          MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        *((_QWORD *)&v346 + 1) = v198;
        v347 = llvm::ConstantArray::get(v321, (llvm::Type *)&v352, 2);
        v199 = llvm::ConstantStruct::get(v335, (llvm::Type *)v344, 7);
        llvm::GlobalVariable::setInitializer((uint64_t)v165, v199);
        v200 = v164[16] & 0xF;
        v201 = v164[16] & 0xFFFFFFCF | (16 * (v333 & 3));
        v164[16] = v201;
        if ((v200 - 7) >= 2)
        {
          if (!(16 * v333) || (llvm::GlobalValue::hasExternalWeakLinkage(v165) & 1) != 0)
            goto LABEL_233;
          v201 = v164[16];
        }
        v164[16] = v201 | 0x4000;
LABEL_233:
        llvm::getInstrProfSectionName(0, *((_DWORD *)v166 + 21), 1, &__p);
        v202 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v203 = &__p;
        else
          v203 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v204 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v204 = __p.__r_.__value_.__l.__size_;
        v205 = v164[16];
        if ((v205 & 0x400000) == 0 && !v204)
        {
LABEL_246:
          if (v202 < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            v205 = v164[16];
          }
          v215 = v205 & 0xFFC0FFFF | 0x40000;
          v164[16] = v215;
          v216 = *((_DWORD *)v166 + 21);
          if (!v331)
          {
            if (v216 != 3)
              goto LABEL_250;
            goto LABEL_355;
          }
          v265 = v323;
          if (v216 != 1)
            v265 = 0;
          if (v265 != 1)
          {
LABEL_355:
            if (v341 >= 0)
              v274 = (unsigned __int8 *)&v339;
            else
              v274 = (unsigned __int8 *)v339;
            if (v341 >= 0)
              v275 = v341 & 0x7F;
            else
              v275 = v340;
            goto LABEL_401;
          }
          if ((*((_BYTE *)v164 + 55) & 0x10) == 0)
          {
            v275 = 0;
            v274 = (unsigned __int8 *)&byte_1C871356D;
            goto LABEL_401;
          }
          v266 = ***(_QWORD ***)v165;
          v267 = *(_QWORD *)(v266 + 152);
          v268 = *(unsigned int *)(v266 + 168);
          if ((_DWORD)v268)
          {
            LODWORD(v269) = (v268 - 1) & ((v165 >> 4) ^ (v165 >> 9));
            v270 = (llvm::GlobalValue **)(v267 + 16 * v269);
            v271 = *v270;
            if (*v270 == v165)
            {
LABEL_400:
              v308 = v270[1];
              v309 = *(_QWORD *)v308;
              v274 = (unsigned __int8 *)v308 + 16;
              v275 = v309;
LABEL_401:
              v310 = llvm::Module::getOrInsertComdat(*((_QWORD *)v166 + 4), v274, v275);
              if (!v331)
                *((_DWORD *)v310 + 2) = 3;
              llvm::GlobalObject::setComdat(v165, (llvm::Comdat *)v310);
              v215 = v164[16];
LABEL_250:
              if ((v183 - 7) >= 2)
                v217 = v215;
              else
                v217 = v215 & 0xFFFFFFCF;
              v218 = v217 & 0xFFFFFFF0 | v183;
              v164[16] = v218;
              if ((v183 - 7) >= 2)
              {
                if ((v217 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v165) & 1) != 0)
                {
LABEL_255:
                  v329[3] = v165;
                  v220 = (llvm::GlobalValue **)*((_QWORD *)v166 + 19);
                  v219 = *((_QWORD *)v166 + 20);
                  if ((unint64_t)v220 >= v219)
                  {
                    v222 = (_QWORD *)*((_QWORD *)v166 + 18);
                    v223 = v220 - (llvm::GlobalValue **)v222;
                    v224 = v223 + 1;
                    if ((unint64_t)(v223 + 1) >> 61)
                      goto LABEL_436;
                    v225 = v219 - (_QWORD)v222;
                    if (v225 >> 2 > v224)
                      v224 = v225 >> 2;
                    if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8)
                      v226 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v226 = v224;
                    if (v226)
                    {
                      if (v226 >> 61)
                        goto LABEL_437;
                      v227 = (char *)operator new(8 * v226);
                    }
                    else
                    {
                      v227 = 0;
                    }
                    v232 = (llvm::GlobalValue **)&v227[8 * v223];
                    *v232 = v165;
                    v221 = v232 + 1;
                    if (v220 == v222)
                    {
                      v8 = v329;
                    }
                    else
                    {
                      v8 = v329;
                      do
                      {
                        v233 = *--v220;
                        *--v232 = v233;
                      }
                      while (v220 != v222);
                      v220 = (llvm::GlobalValue **)*((_QWORD *)v166 + 18);
                    }
                    *((_QWORD *)v166 + 18) = v232;
                    *((_QWORD *)v166 + 19) = v221;
                    *((_QWORD *)v166 + 20) = &v227[8 * v226];
                    if (v220)
                      operator delete(v220);
                  }
                  else
                  {
                    *v220 = v165;
                    v221 = v220 + 1;
                    v8 = v329;
                  }
                  *((_QWORD *)v166 + 19) = v221;
                  v234 = (uint64_t)v343;
                  *((_DWORD *)v343 + 8) = *((_DWORD *)v343 + 8) & 0xFFFFBFC0 | 0x4008;
                  v236 = (uint64_t *)*((_QWORD *)v166 + 25);
                  v235 = *((_QWORD *)v166 + 26);
                  if ((unint64_t)v236 >= v235)
                  {
                    v238 = (_QWORD *)*((_QWORD *)v166 + 24);
                    v239 = v236 - v238;
                    v240 = v239 + 1;
                    if ((unint64_t)(v239 + 1) >> 61)
                      goto LABEL_436;
                    v241 = v235 - (_QWORD)v238;
                    if (v241 >> 2 > v240)
                      v240 = v241 >> 2;
                    if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF8)
                      v242 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v242 = v240;
                    if (v242)
                    {
                      if (v242 >> 61)
                        goto LABEL_437;
                      v243 = (char *)operator new(8 * v242);
                    }
                    else
                    {
                      v243 = 0;
                    }
                    v244 = (uint64_t *)&v243[8 * v239];
                    *v244 = v234;
                    v237 = v244 + 1;
                    if (v236 != v238)
                    {
                      do
                      {
                        v245 = *--v236;
                        *--v244 = v245;
                      }
                      while (v236 != v238);
                      v236 = (uint64_t *)*((_QWORD *)v166 + 24);
                    }
                    *((_QWORD *)v166 + 24) = v244;
                    *((_QWORD *)v166 + 25) = v237;
                    *((_QWORD *)v166 + 26) = &v243[8 * v242];
                    if (v236)
                      operator delete(v236);
                  }
                  else
                  {
                    *v236 = v234;
                    v237 = v236 + 1;
                  }
                  *((_QWORD *)v166 + 25) = v237;
                  goto LABEL_301;
                }
                v218 = v164[16];
              }
              v164[16] = v218 | 0x4000;
              goto LABEL_255;
            }
            v272 = 1;
            while (v271 != (llvm::GlobalValue *)-4096)
            {
              v273 = v269 + v272++;
              v269 = v273 & (v268 - 1);
              v271 = *(llvm::GlobalValue **)(v267 + 16 * v269);
              if (v271 == v165)
              {
                v270 = (llvm::GlobalValue **)(v267 + 16 * v269);
                goto LABEL_400;
              }
            }
          }
          v270 = (llvm::GlobalValue **)(v267 + 16 * v268);
          goto LABEL_400;
        }
        if (v204)
        {
          v203 = (std::string *)llvm::UniqueStringSaver::save(***(_QWORD ***)v165 + 2136, v203, v204);
          v207 = v206;
        }
        else
        {
          v207 = 0;
        }
        v208 = ***(_QWORD ***)v165;
        v356 = (uint64_t)(v164 + 8);
        v209 = *(_DWORD *)(v208 + 2520);
        if (v209)
        {
          v210 = *(_QWORD *)(v208 + 2504);
          v211 = v209 - 1;
          v212 = v211 & ((v165 >> 4) ^ (v165 >> 9));
          v213 = (llvm::GlobalValue **)(v210 + 24 * v212);
          v214 = *v213;
          if (*v213 == v165)
          {
LABEL_245:
            v213[1] = (llvm::GlobalValue *)v203;
            v213[2] = v207;
            v205 = v164[16] & 0xFFBFFFFF | ((v207 != 0) << 22);
            v164[16] = v205;
            v202 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            goto LABEL_246;
          }
          v228 = 0;
          v229 = 1;
          while (v214 != (llvm::GlobalValue *)-4096)
          {
            if (v228)
              v230 = 0;
            else
              v230 = v214 == (llvm::GlobalValue *)-8192;
            if (v230)
              v228 = v213;
            v231 = v212 + v229++;
            v212 = v231 & v211;
            v213 = (llvm::GlobalValue **)(v210 + 24 * v212);
            v214 = *v213;
            if (*v213 == v165)
              goto LABEL_245;
          }
          if (v228)
            v263 = v228;
          else
            v263 = v213;
        }
        else
        {
          v263 = 0;
        }
        v213 = (llvm::GlobalValue **)sub_1C53D65B8(v208 + 2504, (uint64_t)&v356, &v356, v263);
        v264 = v356;
        v213[1] = 0;
        v213[2] = 0;
        *v213 = (llvm::GlobalValue *)v264;
        goto LABEL_245;
      }
    }
    v143 = *(_QWORD *)(v38 + 112);
    if (v143 && (*(_BYTE *)(v143 + 12) & 4) != 0)
      goto LABEL_184;
    goto LABEL_180;
  }
  v107 = v8[2];
  v109 = (_QWORD *)*((_QWORD *)this + 19);
  v108 = *((_QWORD *)this + 20);
  if ((unint64_t)v109 >= v108)
  {
    v118 = (_QWORD *)*((_QWORD *)this + 18);
    v119 = v109 - v118;
    v120 = v119 + 1;
    if (!((unint64_t)(v119 + 1) >> 61))
    {
      v121 = v108 - (_QWORD)v118;
      if (v121 >> 2 > v120)
        v120 = v121 >> 2;
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
        v122 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v122 = v120;
      if (!v122)
      {
        v123 = 0;
        goto LABEL_135;
      }
      if (!(v122 >> 61))
      {
        v123 = (char *)operator new(8 * v122);
LABEL_135:
        v124 = &v123[8 * v119];
        *(_QWORD *)v124 = v107;
        v110 = v124 + 8;
        if (v109 != v118)
        {
          do
          {
            v125 = *--v109;
            *((_QWORD *)v124 - 1) = v125;
            v124 -= 8;
          }
          while (v109 != v118);
          v109 = (_QWORD *)*((_QWORD *)this + 18);
        }
        *((_QWORD *)this + 18) = v124;
        *((_QWORD *)this + 19) = v110;
        *((_QWORD *)this + 20) = &v123[8 * v122];
        if (v109)
          operator delete(v109);
        goto LABEL_140;
      }
LABEL_437:
      sub_1C4764EE4();
    }
LABEL_436:
    abort();
  }
  *v109 = v107;
  v110 = v109 + 1;
LABEL_140:
  *((_QWORD *)this + 19) = v110;
LABEL_301:
  v7 = v8[2];
  if (v338 < 0)
    operator delete(v337[0]);
  if (v341 < 0)
    operator delete(v339);
  return v7;
}

void llvm::InstrProfiling::emitVNodes(llvm::InstrProfiling *this)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  llvm::Type *v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::ArrayType *v18;
  llvm::Constant *v19;
  llvm::Constant *v20;
  char *v21;
  uint64_t ***v22;
  uint64_t v23;
  llvm::Type *v24;
  llvm::Value **NullValue;
  char v26;
  std::string *p_p;
  size_t size;
  uint64_t ***v29;
  uint64_t ***v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t ****v36;
  uint64_t ***v37;
  unint64_t v38;
  uint64_t ****v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t ****v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  int v55;
  uint64_t ****v56;
  uint64_t v57;
  std::string __p;
  __int16 v59;
  char *v60;
  _QWORD v61[4];

  v61[3] = *MEMORY[0x1E0C80C00];
  if (byte_1ED8150F8)
  {
    v2 = *((_DWORD *)this + 19);
    v3 = v2 > 0x21 || ((1 << v2) & 0x3F0005AE8) == 0;
    if (!v3
      || (*((_DWORD *)this + 16) == 42 ? (v53 = *((_DWORD *)this + 18) == 3) : (v53 = 0),
          v53 ? (v54 = v2 == 25) : (v54 = 0),
          !v54 ? (v55 = 0) : (v55 = 1),
          (((v2 != 15) ^ v55) & 1) == 0))
    {
      v4 = *((_QWORD *)this + 15);
      v5 = *((unsigned int *)this + 34);
      v6 = (_QWORD *)(v4 + 32 * v5);
      if (*((_DWORD *)this + 32))
      {
        if ((_DWORD)v5)
        {
          v7 = 32 * v5;
          v8 = (_QWORD *)*((_QWORD *)this + 15);
          while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v8 += 4;
            v7 -= 32;
            if (!v7)
              goto LABEL_11;
          }
        }
        else
        {
          v8 = (_QWORD *)*((_QWORD *)this + 15);
        }
      }
      else
      {
LABEL_11:
        v8 = (_QWORD *)(v4 + 32 * v5);
      }
      v9 = (_QWORD *)(v4 + 32 * v5);
      if (v8 != v9)
      {
        v10 = 0;
        do
        {
          v11 = v8 + 4;
          v12 = v6;
          if (v8 + 4 != v6)
          {
            while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v11 += 4;
              if (v11 == v6)
              {
                v12 = v6;
                goto LABEL_20;
              }
            }
            v12 = v11;
          }
LABEL_20:
          v10 += *((unsigned int *)v8 + 2) + (unint64_t)*((unsigned int *)v8 + 3);
          v8 = v12;
        }
        while (v12 != v9);
        if (v10)
        {
          v13 = *(double *)&xmmword_1ED815938 * (double)v10;
          LODWORD(v14) = 2 * (unint64_t)v13;
          if (v14 <= 0xA)
            v14 = 10;
          else
            v14 = v14;
          if ((unint64_t)v13 >= 0xA)
            v15 = (llvm::Type *)v13;
          else
            v15 = (llvm::Type *)v14;
          v16 = (uint64_t *)**((_QWORD **)this + 4);
          v17 = *v16;
          v61[0] = *v16 + 1984;
          v61[1] = v61[0];
          v61[2] = llvm::PointerType::get((llvm::PointerType *)(v17 + 1912), 0);
          v18 = (llvm::ArrayType *)llvm::StructType::get(v16, (uint64_t)v61, 3, 0);
          llvm::ArrayType::get(v18, v15);
          v20 = v19;
          v21 = (char *)operator new(0x78uLL);
          v22 = (uint64_t ***)(v21 + 32);
          *((_DWORD *)v21 + 13) = *((_DWORD *)v21 + 13) & 0x38000000 | 1;
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = 0;
          *((_QWORD *)v21 + 3) = v21 + 32;
          v23 = *((_QWORD *)this + 4);
          NullValue = llvm::Constant::getNullValue(v20, v24);
          v59 = 261;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"__llvm_prf_vnodes";
          __p.__r_.__value_.__l.__size_ = 17;
          llvm::GlobalVariable::GlobalVariable((uint64_t)(v21 + 32), v23, v20, 0, 8, (uint64_t)NullValue, (uint64_t)&__p, 0, 0, 0, 0);
          llvm::getInstrProfSectionName(4u, *((_DWORD *)this + 21), 1, &__p);
          v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          if ((v21[66] & 0x40) == 0 && !size)
            goto LABEL_41;
          if (size)
          {
            p_p = (std::string *)llvm::UniqueStringSaver::save(***v22 + 2136, p_p, size);
            v30 = v29;
          }
          else
          {
            v30 = 0;
          }
          v31 = ***v22;
          v60 = v21 + 32;
          v32 = *(_DWORD *)(v31 + 2520);
          if (v32)
          {
            v33 = *(_QWORD *)(v31 + 2504);
            v34 = v32 - 1;
            v35 = v34 & ((v22 >> 4) ^ (v22 >> 9));
            v36 = (uint64_t ****)(v33 + 24 * v35);
            v37 = *v36;
            if (*v36 == v22)
            {
LABEL_40:
              v36[1] = (uint64_t ***)p_p;
              v36[2] = v30;
              *((_DWORD *)v21 + 16) = *((_DWORD *)v21 + 16) & 0xFFBFFFFF | ((v30 != 0) << 22);
              v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_41:
              if (v26 < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v39 = (uint64_t ****)*((_QWORD *)this + 22);
              v38 = *((_QWORD *)this + 23);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (_QWORD *)*((_QWORD *)this + 21);
                v42 = v39 - (uint64_t ****)v41;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 61)
                  abort();
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 2 > v43)
                  v43 = v44 >> 2;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                  v45 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  if (v45 >> 61)
                    sub_1C4764EE4();
                  v46 = (char *)operator new(8 * v45);
                }
                else
                {
                  v46 = 0;
                }
                v51 = &v46[8 * v42];
                *(_QWORD *)v51 = v22;
                v40 = v51 + 8;
                if (v39 != v41)
                {
                  do
                  {
                    v52 = (uint64_t)*--v39;
                    *((_QWORD *)v51 - 1) = v52;
                    v51 -= 8;
                  }
                  while (v39 != v41);
                  v39 = (uint64_t ****)*((_QWORD *)this + 21);
                }
                *((_QWORD *)this + 21) = v51;
                *((_QWORD *)this + 22) = v40;
                *((_QWORD *)this + 23) = &v46[8 * v45];
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *v39 = v22;
                v40 = v39 + 1;
              }
              *((_QWORD *)this + 22) = v40;
              return;
            }
            v47 = 0;
            v48 = 1;
            while (v37 != (uint64_t ***)-4096)
            {
              if (v47)
                v49 = 0;
              else
                v49 = v37 == (uint64_t ***)-8192;
              if (v49)
                v47 = v36;
              v50 = v35 + v48++;
              v35 = v50 & v34;
              v36 = (uint64_t ****)(v33 + 24 * v35);
              v37 = *v36;
              if (*v36 == v22)
                goto LABEL_40;
            }
            if (v47)
              v56 = v47;
            else
              v56 = v36;
          }
          else
          {
            v56 = 0;
          }
          v36 = (uint64_t ****)sub_1C53D65B8(v31 + 2504, (uint64_t)&v60, (uint64_t *)&v60, v56);
          v57 = (uint64_t)v60;
          v36[1] = 0;
          v36[2] = 0;
          *v36 = (uint64_t ***)v57;
          goto LABEL_40;
        }
      }
    }
  }
}

void llvm::InstrProfiling::emitNameData(llvm::InstrProfiling *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v4;
  std::string::size_type size;
  llvm::ConstantAggregateZero *v6;
  llvm::Value **Impl;
  char *v8;
  uint64_t ***v9;
  uint64_t v10;
  llvm::PointerType *v11;
  std::string::size_type v12;
  char v13;
  std::string *p_p;
  size_t v15;
  uint64_t ***v16;
  uint64_t ***v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t ****v23;
  uint64_t ***v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t ****v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  llvm::GlobalVariable **v41;
  llvm::GlobalVariable **v42;
  llvm::GlobalVariable *v43;
  uint64_t ****v44;
  std::string::size_type v45;
  char *v46;
  std::string v47;
  std::string __p;
  __int16 v49;
  char *v50;
  std::string v51;

  v2 = (_QWORD *)*((_QWORD *)this + 24);
  v3 = (_QWORD *)*((_QWORD *)this + 25);
  if (v2 == v3)
    return;
  memset(&v51, 0, sizeof(v51));
  v4 = &v51;
  llvm::collectPGOFuncNameStrings(&v51, v2, v3 - v2, &v50);
  if (v50)
  {
    v46 = v50;
    v50 = 0;
    sub_1C61D2548(&v46, &v47);
    v49 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
    llvm::report_fatal_error((uint64_t)&__p, 0);
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = *((_BYTE *)&v51.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    size = v51.__r_.__value_.__l.__size_;
    v4 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  llvm::ArrayType::get((llvm::ArrayType *)(***((_QWORD ***)this + 4) + 1912), (llvm::Type *)size);
  Impl = llvm::ConstantDataSequential::getImpl(v4, (llvm::Type *)size, v6);
  v8 = (char *)operator new(0x78uLL);
  v9 = (uint64_t ***)(v8 + 32);
  *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 32;
  v10 = *((_QWORD *)this + 4);
  v11 = *Impl;
  v49 = 261;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"__llvm_prf_nm";
  __p.__r_.__value_.__l.__size_ = 13;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v8 + 32), v10, v11, 1, 8, (uint64_t)Impl, (uint64_t)&__p, 0, 0, 0, 0);
  v12 = *((_BYTE *)&v51.__r_.__value_.__s + 23) & 0x7F;
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = v51.__r_.__value_.__l.__size_;
  *((_QWORD *)this + 27) = v9;
  *((_QWORD *)this + 28) = v12;
  llvm::getInstrProfSectionName(2u, *((_DWORD *)this + 21), 1, &__p);
  v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v15 = __p.__r_.__value_.__l.__size_;
  if ((v8[66] & 0x40) != 0 || v15)
  {
    if (v15)
    {
      p_p = (std::string *)llvm::UniqueStringSaver::save(***v9 + 2136, p_p, v15);
      v17 = v16;
    }
    else
    {
      v17 = 0;
    }
    v18 = ***v9;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v8 + 32);
    v19 = *(_DWORD *)(v18 + 2520);
    if (v19)
    {
      v20 = *(_QWORD *)(v18 + 2504);
      v21 = v19 - 1;
      v22 = v21 & ((v9 >> 4) ^ (v9 >> 9));
      v23 = (uint64_t ****)(v20 + 24 * v22);
      v24 = *v23;
      if (*v23 == v9)
      {
LABEL_20:
        v23[1] = (uint64_t ***)p_p;
        v23[2] = v17;
        *((_DWORD *)v8 + 16) = *((_DWORD *)v8 + 16) & 0xFFBFFFFF | ((v17 != 0) << 22);
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        goto LABEL_21;
      }
      v35 = 0;
      v36 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v24 == (uint64_t ***)-8192;
        if (v37)
          v35 = v23;
        v38 = v22 + v36++;
        v22 = v38 & v21;
        v23 = (uint64_t ****)(v20 + 24 * v22);
        v24 = *v23;
        if (*v23 == v9)
          goto LABEL_20;
      }
      if (v35)
        v44 = v35;
      else
        v44 = v23;
    }
    else
    {
      v44 = 0;
    }
    v23 = (uint64_t ****)sub_1C53D65B8(v18 + 2504, (uint64_t)&v47, (uint64_t *)&v47, v44);
    v45 = v47.__r_.__value_.__r.__words[0];
    v23[1] = 0;
    v23[2] = 0;
    *v23 = (uint64_t ***)v45;
    goto LABEL_20;
  }
LABEL_21:
  if (v13 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)(*((_QWORD *)this + 27) + 32) = *(_DWORD *)(*((_QWORD *)this + 27) + 32) & 0xFFC0FFFF | 0x10000;
  v25 = *((_QWORD *)this + 27);
  v27 = (_QWORD *)*((_QWORD *)this + 22);
  v26 = *((_QWORD *)this + 23);
  if ((unint64_t)v27 >= v26)
  {
    v29 = (_QWORD *)*((_QWORD *)this + 21);
    v30 = v27 - v29;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      abort();
    v32 = v26 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        sub_1C4764EE4();
      v34 = (char *)operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v39 = &v34[8 * v30];
    *(_QWORD *)v39 = v25;
    v28 = v39 + 8;
    if (v27 != v29)
    {
      do
      {
        v40 = *--v27;
        *((_QWORD *)v39 - 1) = v40;
        v39 -= 8;
      }
      while (v27 != v29);
      v27 = (_QWORD *)*((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 21) = v39;
    *((_QWORD *)this + 22) = v28;
    *((_QWORD *)this + 23) = &v34[8 * v33];
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v27 = v25;
    v28 = v27 + 1;
  }
  *((_QWORD *)this + 22) = v28;
  v42 = (llvm::GlobalVariable **)*((_QWORD *)this + 24);
  v41 = (llvm::GlobalVariable **)*((_QWORD *)this + 25);
  while (v42 != v41)
  {
    v43 = *v42++;
    llvm::GlobalVariable::eraseFromParent(v43);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
}

void llvm::InstrProfiling::emitRegistration(llvm::InstrProfiling *this)
{
  unsigned int v1;
  BOOL v4;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t **v8;
  void *v9;
  llvm::PointerType *v10;
  uint64_t v11;
  char *v12;
  llvm::PointerType *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  uint64_t **v25;
  unsigned __int8 **v26;
  unsigned __int8 **i;
  unsigned __int8 *v28;
  uint64_t **v29;
  llvm::PointerType *v30;
  uint64_t v31;
  void *v32;
  uint64_t **v33;
  unsigned __int8 *v34;
  const llvm::APInt *v35;
  uint64_t v36;
  llvm::ConstantInt *v37;
  unsigned int v38;
  unint64_t v39;
  llvm::ValueHandleBase *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;
  uint64_t v47[2];
  uint64_t v48[2];
  void *v49;
  uint64_t v50;
  _BYTE v51[16];
  __int16 v52;
  uint64_t **v53;
  _QWORD **v54;
  uint64_t v55;
  void **v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD v65[3];

  v65[1] = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 19);
  if (v1 > 0x21 || ((1 << v1) & 0x3F0005AE8) == 0)
  {
    v4 = *((_DWORD *)this + 16) == 42 && *((_DWORD *)this + 18) == 3;
    v5 = v4 && v1 == 25;
    v6 = v5;
    if ((v1 != 15) != v6)
    {
      v7 = ***((_QWORD ***)this + 4);
      v8 = (uint64_t **)(v7 + 1576);
      v9 = (void *)llvm::PointerType::get((llvm::PointerType *)(v7 + 1912), 0);
      v41 = ***((_QWORD ***)this + 4);
      v10 = (llvm::PointerType *)llvm::FunctionType::get(v8, 0, 0, 0);
      v52 = 261;
      v49 = "__llvm_profile_register_functions";
      v50 = 33;
      v11 = *((_QWORD *)this + 4);
      v12 = (char *)operator new(0x80uLL);
      *((_DWORD *)v12 + 7) = *((_DWORD *)v12 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v12 = 0;
      llvm::Function::Function((uint64_t *)v12 + 1, v10, 7, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v49, v11);
      *((_DWORD *)v12 + 10) = *((_DWORD *)v12 + 10) & 0xFFFFFF3F | 0x80;
      if (*(_BYTE *)this)
        *((_QWORD *)v12 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v12 + 15, **((uint64_t ***)v12 + 1), -1, 31);
      v49 = v9;
      v13 = (llvm::PointerType *)llvm::FunctionType::get(v8, (uint64_t *)&v49, 1, 0);
      v52 = 261;
      v49 = "__llvm_profile_register_function";
      v50 = 32;
      v14 = *((_QWORD *)this + 4);
      v15 = operator new(0x80uLL);
      v16 = (uint64_t)v15 + 8;
      *((_DWORD *)v15 + 7) = *((_DWORD *)v15 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v15 = 0;
      llvm::Function::Function((uint64_t *)v15 + 1, v13, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v49, v14);
      v17 = (_QWORD *)**((_QWORD **)this + 4);
      v46 = 257;
      v18 = (uint64_t **)operator new();
      *v18 = (uint64_t *)(*v17 + 1600);
      v18[1] = 0;
      v19 = *((_DWORD *)v18 + 5) & 0xC0000000;
      *((_DWORD *)v18 + 4) = 22;
      *((_DWORD *)v18 + 5) = v19;
      v18[3] = 0;
      v18[4] = 0;
      v18[5] = (uint64_t *)(v18 + 5);
      v18[6] = (uint64_t *)(v18 + 5);
      v18[7] = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v12 + 80), v18);
      v20 = (uint64_t *)*((_QWORD *)v12 + 10);
      v18[4] = (uint64_t *)(v12 + 80);
      v18[3] = v20;
      v20[1] = (uint64_t)(v18 + 3);
      *((_QWORD *)v12 + 10) = v18 + 3;
      llvm::Value::setName((uint64_t ***)v18, (uint64_t)v45);
      v21 = **v18;
      v49 = v51;
      v50 = 0x200000000;
      v55 = v21;
      v56 = &v64;
      v57 = v65;
      v58 = 0;
      v59 = 0;
      v60 = 512;
      v61 = 7;
      v62 = 0;
      v63 = 0;
      v64 = &unk_1E8167888;
      v65[0] = &unk_1E8167A08;
      v53 = v18;
      v54 = v18 + 5;
      v22 = (unsigned __int8 **)*((_QWORD *)this + 18);
      v23 = (unsigned __int8 **)*((_QWORD *)this + 19);
      while (v22 != v23)
      {
        v24 = *v22;
        if ((*v22)[16])
        {
          v25 = (uint64_t **)*((_QWORD *)v15 + 4);
          v46 = 257;
          v48[0] = (uint64_t)sub_1C4773E38((uint64_t *)&v49, 49, v24, (uint64_t)v9, (uint64_t)v45);
          v44 = 257;
          sub_1C4774778((uint64_t *)&v49, v25, v16, v48, 1, (uint64_t)&v42, 0);
        }
        ++v22;
      }
      v26 = (unsigned __int8 **)*((_QWORD *)this + 21);
      for (i = (unsigned __int8 **)*((_QWORD *)this + 22); v26 != i; ++v26)
      {
        v28 = *v26;
        if (*v26 != *((unsigned __int8 **)this + 27) && v28[16])
        {
          v29 = (uint64_t **)*((_QWORD *)v15 + 4);
          v46 = 257;
          v48[0] = (uint64_t)sub_1C4773E38((uint64_t *)&v49, 49, v28, (uint64_t)v9, (uint64_t)v45);
          v44 = 257;
          sub_1C4774778((uint64_t *)&v49, v29, v16, v48, 1, (uint64_t)&v42, 0);
        }
      }
      if (*((_QWORD *)this + 27))
      {
        v48[0] = (uint64_t)v9;
        v48[1] = v41 + 1984;
        v30 = (llvm::PointerType *)llvm::FunctionType::get(v8, v48, 2, 0);
        v46 = 261;
        v45[0] = "__llvm_profile_register_names_function";
        v45[1] = 38;
        v31 = *((_QWORD *)this + 4);
        v32 = operator new(0x80uLL);
        *((_DWORD *)v32 + 7) = *((_DWORD *)v32 + 7) & 0x38000000 | 0x40000000;
        *(_QWORD *)v32 = 0;
        llvm::Function::Function((uint64_t *)v32 + 1, v30, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)v45, v31);
        v33 = (uint64_t **)*((_QWORD *)v32 + 4);
        v34 = (unsigned __int8 *)*((_QWORD *)this + 27);
        v46 = 257;
        v47[0] = (uint64_t)sub_1C4773E38((uint64_t *)&v49, 49, v34, (uint64_t)v9, (uint64_t)v45);
        v36 = *((_QWORD *)this + 28);
        v37 = *(llvm::ConstantInt **)(*(_QWORD *)v55 + 1984);
        v38 = *(_DWORD *)(*(_QWORD *)v55 + 1992);
        v43 = v38 >> 8;
        if (v38 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v42, v36, 0);
        }
        else
        {
          if (v38 <= 0xFF)
            v39 = 0;
          else
            v39 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v38);
          v42 = v39 & v36;
        }
        v40 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v42, v35);
        if (v43 >= 0x41 && v42)
          MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
        v47[1] = (uint64_t)v40;
        v44 = 257;
        sub_1C4774778((uint64_t *)&v49, v33, (uint64_t)v32 + 8, v47, 2, (uint64_t)&v42, 0);
      }
      LLVMBuildRetVoid_0((uint64_t *)&v49);
      if (v49 != v51)
        free(v49);
    }
  }
}

llvm::PointerType *sub_1C58BAB64(uint64_t **a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  llvm::PointerType *v9;
  char *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = **a1;
  v13 = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    v7 = 67;
LABEL_5:
    v13 = llvm::AttributeList::addAttributeAtIndex(&v13, v5, 3, v7);
    v8 = *v5;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + 146))
  {
    v7 = 48;
    goto LABEL_5;
  }
  v8 = v6;
LABEL_6:
  v14[0] = v8 + 1984;
  v14[1] = llvm::PointerType::get((llvm::PointerType *)(v8 + 1912), 0);
  v14[2] = *v5 + 1960;
  v9 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(v6 + 1576), v14, 3, 0);
  if (a3)
    v10 = "__llvm_profile_instrument_memop";
  else
    v10 = "__llvm_profile_instrument_target";
  if (a3)
    v11 = 31;
  else
    v11 = 32;
  return llvm::Module::getOrInsertFunction((uint64_t)a1, (unsigned __int8 *)v10, v11, v9, v13);
}

unsigned __int8 *llvm::InstrProfiling::getCounterAddress(llvm::InstrProfiling *this, llvm::Value **a2)
{
  uint64_t RegionCounters;
  uint64_t *v5;
  llvm::GetElementPtrInst *v6;
  llvm::Value *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  llvm::Constant *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  llvm::GlobalObject *v20;
  uint64_t v21;
  llvm::Type *v22;
  llvm::Value **NullValue;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unsigned __int8 **v50;
  int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  char *v55;
  unsigned __int8 **v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::GlobalObject **v65;
  llvm::GlobalObject *v66;
  int v67;
  int v68;
  llvm::GlobalObject *v69;
  unsigned __int8 *v70;
  size_t v71;
  size_t v72;
  size_t *inserted;
  _BYTE v74[32];
  __int16 v75;
  _QWORD v76[4];
  __int16 v77;
  unsigned __int8 *v78;
  void *v79;
  unsigned int v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  _QWORD v88[7];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  RegionCounters = llvm::InstrProfiling::getOrCreateRegionCounters(this, a2);
  v5 = (uint64_t *)sub_1C4773D54((uint64_t)&v86, (uint64_t)a2, 0, 0, 0);
  v6 = *(llvm::GetElementPtrInst **)(RegionCounters + 24);
  v7 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 12];
  v8 = (_QWORD *)((char *)v7 + 24);
  if (*((_DWORD *)v7 + 8) >= 0x41u)
    v8 = (_QWORD *)*v8;
  v9 = *(_DWORD *)v8;
  v82 = 257;
  v10 = (unsigned __int8 *)sub_1C5391F90(v5, v6, (uint64_t **)RegionCounters, 0, v9, (uint64_t)&v79);
  if (*((_DWORD *)this + 21) != 5)
  {
    if (word_1ED814FC0)
    {
      if (!byte_1ED815038)
        goto LABEL_33;
    }
    else if (*((_DWORD *)this + 19) != 6)
    {
      goto LABEL_33;
    }
    v11 = (llvm::Constant *)(***((_QWORD ***)this + 4) + 1984);
    v12 = *(_QWORD *)(*((_QWORD *)a2[5] + 7) + 80);
    if (v12)
      v13 = v12 - 24;
    else
      v13 = 0;
    v14 = *(_QWORD *)(v13 + 48);
    if (v14)
      v15 = v14 - 24;
    else
      v15 = 0;
    v16 = *(unsigned __int8 *)(v15 + 16);
    if (v16 == 60)
      v17 = (_QWORD *)v15;
    else
      v17 = 0;
    if (v14 && v16 == 60)
      goto LABEL_31;
    sub_1C4773D54((uint64_t)&v79, v15, 0, 0, 0);
    v18 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 4) + 112), "__llvm_profile_counter_bias", 0x1BuLL);
    if (v18)
    {
      v20 = (llvm::GlobalObject *)v18;
      if (*(_BYTE *)(v18 + 16) == 3 && (*(_DWORD *)(v18 + 32) & 0xFu) - 7 > 1)
      {
LABEL_26:
        v75 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v83 + 56) + 40) + 272, (uint64_t)v11);
        v28 = v27;
        v29 = (char *)operator new(0x60uLL);
        v30 = v29;
        v17 = v29 + 32;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
        *((_QWORD *)v29 + 3) = v29 + 32;
        v77 = 257;
        *((_QWORD *)v29 + 4) = v11;
        *((_QWORD *)v29 + 5) = 0;
        *((_WORD *)v29 + 24) = 60;
        *((_DWORD *)v29 + 13) = 1;
        *(_OWORD *)(v29 + 56) = 0u;
        *(_OWORD *)(v29 + 72) = 0u;
        *((_DWORD *)v29 + 22) = 0;
        *(_QWORD *)v29 = v20;
        v33 = *((_QWORD *)v20 + 1);
        v32 = (_QWORD *)((char *)v20 + 8);
        v31 = v33;
        *((_QWORD *)v29 + 1) = v33;
        if (v33)
          *(_QWORD *)(v31 + 16) = v29 + 8;
        *((_QWORD *)v29 + 2) = v32;
        *v32 = v29;
        *((_WORD *)v29 + 25) = 2 * (v28 & 0x3F);
        v29[92] = 1;
        llvm::Value::setName((uint64_t ***)v29 + 4, (uint64_t)v76);
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v17, v74, v83, v84);
        v34 = (char *)v79;
        if (!v80)
        {
LABEL_29:
          if (v34 != (char *)&v81)
            free(v34);
LABEL_31:
          v77 = 257;
          v35 = sub_1C4773E38((uint64_t *)&v86, 47, v10, (uint64_t)v11, (uint64_t)v76);
          v75 = 257;
          v36 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v89 + 16))(v89, v35, v17, 0, 0);
          if (v36)
            goto LABEL_32;
          v82 = 257;
          v39 = (char *)operator new(0x80uLL);
          v40 = v39;
          *((_QWORD *)v39 + 5) = 0;
          v41 = v39 + 40;
          *((_QWORD *)v39 + 6) = 0;
          *((_QWORD *)v39 + 8) = *(_QWORD *)v35;
          v36 = (unsigned __int8 *)(v39 + 64);
          *((_QWORD *)v39 + 3) = v39 + 64;
          *((_QWORD *)v39 + 7) = v39 + 64;
          *((_QWORD *)v39 + 9) = 0;
          v39[80] = 41;
          v39[81] = 0;
          *((_WORD *)v39 + 41) = 0;
          *((_DWORD *)v39 + 21) = 2;
          *(_OWORD *)(v39 + 88) = 0u;
          *(_OWORD *)(v39 + 104) = 0u;
          *((_DWORD *)v39 + 30) = 0;
          *(_QWORD *)v39 = v35;
          v44 = *((_QWORD *)v35 + 1);
          v43 = v35 + 8;
          v42 = v44;
          *((_QWORD *)v39 + 1) = v44;
          if (v44)
            *(_QWORD *)(v42 + 16) = v39 + 8;
          *((_QWORD *)v39 + 2) = v43;
          *v43 = v39;
          *((_QWORD *)v39 + 4) = v17;
          if (v17)
          {
            v47 = v17[1];
            v46 = v17 + 1;
            v45 = v47;
            *v41 = v47;
            if (v47)
              *(_QWORD *)(v45 + 16) = v41;
            *((_QWORD *)v39 + 6) = v46;
            *v46 = v39 + 32;
          }
          llvm::Value::setName((uint64_t ***)v39 + 8, (uint64_t)&v79);
          (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v90 + 16))(v90, v36, v74, v88[4], v88[5]);
          if (!v87)
          {
LABEL_32:
            v37 = *(_QWORD *)v10;
            v82 = 257;
            v10 = sub_1C4773E38((uint64_t *)&v86, 48, v36, v37, (uint64_t)&v79);
            goto LABEL_33;
          }
          v48 = v86;
          v49 = &v86[16 * v87];
          v50 = (unsigned __int8 **)(v40 + 112);
          while (1)
          {
            v51 = *(_DWORD *)v48;
            v52 = (unsigned __int8 *)*((_QWORD *)v48 + 1);
            if (v52)
            {
              if (!v51)
              {
                v78 = (unsigned __int8 *)*((_QWORD *)v48 + 1);
                llvm::MetadataTracking::track((uint64_t)&v78, v52, 2);
                v53 = *v50;
                goto LABEL_54;
              }
            }
            else
            {
              v53 = *v50;
              if (!*v50 && (v40[87] & 0x20) == 0)
                goto LABEL_51;
              if (!v51)
              {
                v78 = 0;
LABEL_54:
                if (v53)
                  llvm::MetadataTracking::untrack((uint64_t)(v40 + 112), v53);
                v54 = v78;
                *v50 = v78;
                if (v54)
                  llvm::MetadataTracking::retrack((uint64_t)&v78, v54, (uint64_t)(v40 + 112));
                goto LABEL_51;
              }
            }
            llvm::Value::setMetadata((llvm::Value *)v36, *(_DWORD *)v48, (llvm::MDNode *)v52);
LABEL_51:
            v48 += 16;
            if (v48 == v49)
              goto LABEL_32;
          }
        }
        v55 = (char *)v79 + 16 * v80;
        v56 = (unsigned __int8 **)(v30 + 80);
        while (1)
        {
          v57 = *(_DWORD *)v34;
          v58 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
          if (v58)
          {
            if (!v57)
            {
              v78 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
              llvm::MetadataTracking::track((uint64_t)&v78, v58, 2);
              v59 = *v56;
              goto LABEL_69;
            }
          }
          else
          {
            v59 = *v56;
            if (!*v56 && (v30[55] & 0x20) == 0)
              goto LABEL_66;
            if (!v57)
            {
              v78 = 0;
LABEL_69:
              if (v59)
                llvm::MetadataTracking::untrack((uint64_t)(v30 + 80), v59);
              v60 = v78;
              *v56 = v78;
              if (v60)
                llvm::MetadataTracking::retrack((uint64_t)&v78, v60, (uint64_t)(v30 + 80));
              goto LABEL_66;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v17, *(_DWORD *)v34, (llvm::MDNode *)v58);
LABEL_66:
          v34 += 16;
          if (v34 == v55)
          {
            v34 = (char *)v79;
            goto LABEL_29;
          }
        }
      }
    }
    v19 = operator new(0x78uLL);
    v20 = (llvm::GlobalObject *)(v19 + 8);
    v19[13] = v19[13] & 0x38000000 | 1;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = 0;
    *((_QWORD *)v19 + 3) = v19 + 8;
    v21 = *((_QWORD *)this + 4);
    NullValue = llvm::Constant::getNullValue(v11, v22);
    v77 = 261;
    v76[0] = "__llvm_profile_counter_bias";
    v76[1] = 27;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v19 + 8), v21, v11, 0, 3, (uint64_t)NullValue, (uint64_t)v76, 0, 0, 0, 0);
    v24 = v19[16];
    v25 = v24 & 0xFFFFFFCF | 0x10;
    v19[16] = v25;
    if ((v24 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v20) & 1) != 0)
      {
LABEL_24:
        v26 = *((_DWORD *)this + 21);
        if (v26 <= 9 && ((1 << v26) & 0x320) != 0)
          goto LABEL_26;
        if ((*((_BYTE *)v19 + 55) & 0x10) == 0)
        {
          v71 = 0;
          v70 = (unsigned __int8 *)&byte_1C871356D;
          goto LABEL_86;
        }
        v61 = ***(_QWORD ***)v20;
        v62 = *(_QWORD *)(v61 + 152);
        v63 = *(unsigned int *)(v61 + 168);
        if ((_DWORD)v63)
        {
          LODWORD(v64) = (v63 - 1) & ((v20 >> 4) ^ (v20 >> 9));
          v65 = (llvm::GlobalObject **)(v62 + 16 * v64);
          v66 = *v65;
          if (*v65 == v20)
          {
LABEL_85:
            v69 = v65[1];
            v72 = *(_QWORD *)v69;
            v70 = (unsigned __int8 *)v69 + 16;
            v71 = v72;
LABEL_86:
            inserted = llvm::Module::getOrInsertComdat(*((_QWORD *)this + 4), v70, v71);
            llvm::GlobalObject::setComdat(v20, (llvm::Comdat *)inserted);
            goto LABEL_26;
          }
          v67 = 1;
          while (v66 != (llvm::GlobalObject *)-4096)
          {
            v68 = v64 + v67++;
            v64 = v68 & (v63 - 1);
            v66 = *(llvm::GlobalObject **)(v62 + 16 * v64);
            if (v66 == v20)
            {
              v65 = (llvm::GlobalObject **)(v62 + 16 * v64);
              goto LABEL_85;
            }
          }
        }
        v65 = (llvm::GlobalObject **)(v62 + 16 * v63);
        goto LABEL_85;
      }
      v25 = v19[16];
    }
    v19[16] = v25 | 0x4000;
    goto LABEL_24;
  }
LABEL_33:
  if (v86 != (char *)v88)
    free(v86);
  return v10;
}

char *llvm::InstrProfiling::createRegionCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  llvm::Type *v10;
  llvm::Type *v11;
  uint64_t v12;
  llvm::Constant *v13;
  llvm::PoisonValue *v14;
  llvm::PoisonValue *v15;
  llvm::Type *v16;
  llvm::ValueHandleBase *AllOnesValue;
  llvm::ValueHandleBase *v18;
  llvm::Type *v19;
  llvm::Type *v20;
  uint64_t v21;
  char *v22;
  llvm::Constant *v23;
  llvm::Constant *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  llvm::Type *v28;
  llvm::Value **NullValue;
  _DWORD *v30;
  uint64_t v31;
  llvm::Value **v32;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;

  v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
  v10 = (llvm::Type *)(v9 + 24);
  if (*(_DWORD *)(v9 + 32) >= 0x41u)
    v10 = *(llvm::Type **)v10;
  v11 = *(llvm::Type **)v10;
  v12 = ***(_QWORD ***)(a1 + 32);
  if (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) == 159)
  {
    v13 = (llvm::Constant *)(v12 + 1912);
    llvm::ArrayType::get((llvm::ArrayType *)(v12 + 1912), v11);
    v15 = v14;
    AllOnesValue = llvm::Constant::getAllOnesValue(v13, v16);
    if (v11)
    {
      if ((unint64_t)v11 >> 61)
        abort();
      v18 = AllOnesValue;
      v19 = (llvm::Type *)operator new(8 * (_QWORD)v11);
      v20 = v19;
      v21 = 0;
      v22 = (char *)v19 + 8 * (_QWORD)v11;
      do
      {
        *(_QWORD *)((char *)v19 + v21) = v18;
        v21 += 8;
      }
      while (8 * (_QWORD)v11 != v21);
    }
    else
    {
      v20 = 0;
      v22 = 0;
    }
    v30 = operator new(0x78uLL);
    v26 = (char *)(v30 + 8);
    v30[13] = v30[13] & 0x38000000 | 1;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = 0;
    *((_QWORD *)v30 + 3) = v30 + 8;
    v31 = *(_QWORD *)(a1 + 32);
    v32 = llvm::ConstantArray::get(v15, v20, (v22 - (char *)v20) >> 3);
    v36 = 261;
    v34 = a3;
    v35 = a4;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v30 + 8), v31, v15, 0, a5, (uint64_t)v32, (uint64_t)&v34, 0, 0, 0, 0);
    v30[16] = v30[16] & 0xFFC0FFFF | 0x10000;
    if (v20)
      operator delete(v20);
  }
  else
  {
    llvm::ArrayType::get((llvm::ArrayType *)(v12 + 1984), v11);
    v24 = v23;
    v25 = operator new(0x78uLL);
    v26 = (char *)(v25 + 8);
    v25[13] = v25[13] & 0x38000000 | 1;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *((_QWORD *)v25 + 3) = v25 + 8;
    v27 = *(_QWORD *)(a1 + 32);
    NullValue = llvm::Constant::getNullValue(v24, v28);
    v36 = 261;
    v34 = a3;
    v35 = a4;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v25 + 8), v27, v24, 0, a5, (uint64_t)NullValue, (uint64_t)&v34, 0, 0, 0, 0);
    v25[16] = v25[16] & 0xFFC0FFFF | 0x40000;
  }
  return v26;
}

uint64_t sub_1C58BB53C(uint64_t **a1, const llvm::Module *a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  if ((llvm::isIRPGOFlagSet(a1, a2) & 1) != 0)
    return 1;
  result = llvm::Module::getModuleFlag((uint64_t)a1, "EnableValueProfiling", 0x14uLL);
  if (result)
  {
    if (*(_BYTE *)result == 1)
    {
      v4 = *(_QWORD *)(result + 128);
      v5 = (_QWORD *)(v4 + 24);
      if (*(_DWORD *)(v4 + 32) >= 0x41u)
        v5 = (_QWORD *)*v5;
      return *v5 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1C58BB5B8(_QWORD *a1, uint64_t a2, void *a3, size_t a4, _BYTE *a5)
{
  llvm::Value *v10;
  const llvm::Module *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value **v16;
  llvm::Value *v17;
  int v18;
  int v19;
  llvm::Value *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  uint64_t ***v27;
  const llvm::Module *v28;
  uint64_t v29;
  _QWORD *v30;
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[2];
  _QWORD *v37;
  size_t v38;
  __int16 v39;
  _QWORD *v40;
  void *__s2;
  size_t __n[2];
  size_t v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
  {
    v12 = ***(_QWORD ***)v10;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v16 = (llvm::Value **)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v10)
      {
LABEL_9:
        v20 = v16[1];
        v23 = *(_QWORD *)v20;
        v21 = (char *)v20 + 16;
        v22 = v23;
        goto LABEL_10;
      }
      v18 = 1;
      while (v17 != (llvm::Value *)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(llvm::Value **)(v13 + 16 * v15);
        if (v17 == v10)
        {
          v16 = (llvm::Value **)(v13 + 16 * v15);
          goto LABEL_9;
        }
      }
    }
    v16 = (llvm::Value **)(v13 + 16 * v14);
    goto LABEL_9;
  }
  v22 = 0;
  v21 = &byte_1C871356D;
LABEL_10:
  v24 = 8;
  if (v22 < 8)
    v24 = v22;
  v25 = (size_t)&v21[v24];
  v26 = v22 - v24;
  if (byte_1ED814F78
    && (v27 = *(uint64_t ****)(*(_QWORD *)(a2 + 40) + 56), llvm::isIRPGOFlagSet(v27[5], v11))
    && (llvm::canRenameComdatFunc((llvm *)v27, 0, v28) & 1) != 0)
  {
    *a5 = 1;
    v29 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v30 = (_QWORD *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u)
      v30 = (_QWORD *)*v30;
    v40 = (_QWORD *)*v30;
    __s2 = &v43;
    *(_OWORD *)__n = xmmword_1C85FBF50;
    v36[0] = ".";
    v37 = &v40;
    v39 = 3075;
    llvm::Twine::toVector((uint64_t)v36, (uint64_t)&__s2);
    if (v26 >= __n[0] && (!__n[0] || !memcmp(&v21[v22 - __n[0]], __s2, __n[0])))
    {
      v36[0] = a3;
      v36[1] = a4;
      v37 = (_QWORD *)v25;
      v38 = v26;
      v31 = 1285;
    }
    else
    {
      v32[0] = a3;
      v32[1] = a4;
      v32[2] = v25;
      v32[3] = v26;
      v33 = 1285;
      v34[0] = v32;
      v34[2] = ".";
      v35 = 770;
      v36[0] = v34;
      v37 = &v40;
      v31 = 3074;
    }
    v39 = v31;
    llvm::Twine::str((llvm::Twine *)v36, a1);
    if (__s2 != &v43)
      free(__s2);
  }
  else
  {
    *a5 = 0;
    __s2 = a3;
    __n[0] = a4;
    __n[1] = v25;
    v43 = v26;
    v44 = 1285;
    llvm::Twine::str((llvm::Twine *)&__s2, a1);
  }
}

double sub_1C58BB83C()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F5230;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = &off_1E817E0D0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 264) = 0;
  *(_DWORD *)(v0 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_DWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 240) = 0;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  return result;
}

void sub_1C58BB8C0(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817E0D0;
  sub_1C58BBA20((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C58BB8F0(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817E0D0;
  sub_1C58BBA20((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C58BB934()
{
  return "Frontend instrumentation-based coverage lowering";
}

void *sub_1C58BB944(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C58BB978(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (**v3)(void);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E817E170;
  v5[1] = a1;
  v6 = v5;
  v2 = llvm::InstrProfiling::run(a1 + 32, a2, (uint64_t)v5);
  if (v6 == v5)
  {
    v3 = (void (**)(void))(v5[0] + 32);
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = (void (**)(void))(*v6 + 40);
LABEL_5:
    (*v3)();
  }
  return v2;
}

uint64_t sub_1C58BBA20(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(_QWORD *)(a1 + 248) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = v5;
    operator delete(v5);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 120), 8);
  v6 = *(_QWORD **)(a1 + 112);
  if (v6 == (_QWORD *)(a1 + 88))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 88);
  }
  else
  {
    if (!v6)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C58BBAE0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58BBAF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817E170;
  result[1] = v3;
  return result;
}

uint64_t sub_1C58BBB28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817E170;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C58BBB44(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(*(_QWORD *)(a1 + 8) + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

uint64_t sub_1C58BBD94(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1C47EBC30((_BYTE *)v5, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v5 = v6;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 232) = a3;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

uint64_t sub_1C58BBE1C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a3)
  {
    v4 = 8 * a3;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)a2 + 40);
      if (v5)
        v6 = v5 - 24;
      else
        v6 = 0;
      if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
        v6 = 0;
      if (*(_BYTE *)(v6 + 16) == 38)
        return 0;
      a2 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(a1);
  if ((_DWORD)result)
  {
    result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a1);
    if (result)
    {
      v8 = *(_QWORD *)(result + 40);
      if (v8 == result + 40)
        return 0;
      if (v8)
        v9 = v8 - 24;
      else
        v9 = 0;
      if (*(_BYTE *)(v9 + 16) == 30)
      {
        if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 3)
          return 0;
      }
      else
      {
        result = 0;
        switch(*(_BYTE *)(v9 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            return result;
          case 0x1E:
            __break(1u);
            goto LABEL_25;
          case 0x1F:
            v10 = (*(_DWORD *)(v9 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
LABEL_25:
            v10 = (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) - 1;
            break;
          case 0x27:
            v10 = *(_DWORD *)(v9 + 80) + 1;
            break;
          default:
            return 0;
        }
        if (v10 != 1)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C58BBF30(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[64];
  void *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(a2, (uint64_t)&v24);
  if (sub_1C58BBE1C(a2, (uint64_t)v24, v25))
  {
    v21 = v23;
    v22 = 0x800000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a2, (uint64_t)&v21);
    if (a1[23])
    {
      v4 = 0xFFFFFFFFLL;
    }
    else if ((_DWORD)v22 == 1)
    {
      v4 = dword_1ED8154B8;
    }
    else if (v22 <= dword_1ED815638)
    {
      v4 = dword_1ED8154B8;
      if (!byte_1ED8156F8 && (_DWORD)v25)
      {
        v6 = (char *)v24;
        v7 = (char *)v24 + 8 * v25;
        do
        {
          v8 = a1[22];
          v9 = *(_DWORD *)(v8 + 16);
          if (v9)
          {
            v10 = *(_QWORD *)v8;
            v11 = v9 - 1;
            v12 = (v9 - 1) & ((*(_QWORD *)v6 >> 4) ^ (*(_QWORD *)v6 >> 9));
            v13 = *(_QWORD *)(v10
                            + 16 * (v11 & ((*(_QWORD *)v6 >> 4) ^ (*(_QWORD *)v6 >> 9))));
            if (*(_QWORD *)v6 == v13)
            {
LABEL_22:
              v20 = *(_QWORD *)(v10 + 16 * v12 + 8);
              if (v20)
              {
                v16 = sub_1C58BBF30(a1);
                v17 = *((_DWORD *)sub_1C62AEFA8(*a1, &v20) + 4);
                v18 = v16 >= v17;
                v19 = v16 - v17;
                if (!v18)
                  v19 = 0;
                if (v19 >= v4)
                  v4 = v4;
                else
                  v4 = v19;
              }
            }
            else
            {
              v14 = 1;
              while (v13 != -4096)
              {
                v15 = v12 + v14++;
                v12 = v15 & v11;
                v13 = *(_QWORD *)(v10 + 16 * v12);
                if (*(_QWORD *)v6 == v13)
                  goto LABEL_22;
              }
            }
          }
          v6 += 8;
        }
        while (v6 != v7);
      }
    }
    else
    {
      v4 = 0;
    }
    if (v21 != v23)
      free(v21);
  }
  else
  {
    v4 = 0;
  }
  if (v24 != v26)
    free(v24);
  return v4;
}

_QWORD *sub_1C58BC138(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(152 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62AF0D0(a1, v4, v4 + 152 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 152 * v10;
    do
    {
      *result = -4096;
      result += 19;
      v11 -= 152;
    }
    while (v11);
  }
  return result;
}

void sub_1C58BC1FC()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58BC210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *ValueInMiddleOfBlock;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unsigned __int8 **v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  char v31;
  char v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  llvm::Value *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t **v48;
  int v49;
  int v50;
  char *v51;
  char *v52;
  unsigned __int8 **v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 **v57;
  unsigned __int8 *v58;
  char *v59;
  char *v60;
  unsigned __int8 **v61;
  int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned __int8 **v68;
  unsigned __int8 **v69;
  unsigned __int8 **v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[4];
  __int16 v78;
  uint64_t v79[4];
  __int16 v80;
  unsigned __int8 *v81;
  void *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32))
  {
    v3 = 0;
    v76 = *(unsigned int *)(a1 + 32);
    while (1)
    {
      v4 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v3);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v3);
      ValueInMiddleOfBlock = (uint64_t *)llvm::SSAUpdater::GetValueInMiddleOfBlock(*(llvm::UndefValue ***)(a1 + 8), v4);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 32);
      v8 = *ValueInMiddleOfBlock;
      sub_1C4773D54((uint64_t)&v82, v5, 0, 0, 0);
      if (!byte_1ED815278)
        break;
      v75 &= 0xFFFFFFFFFFFF0000;
      sub_1C61D775C((uint64_t *)&v82, 1, v7, ValueInMiddleOfBlock, 0, 7, 1);
LABEL_46:
      if (v82 != &v84)
        free(v82);
      if (++v3 == v1)
        return;
    }
    v77[0] = "pgocount.promoted";
    v78 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v85 + 56) + 40) + 272, v8);
    v10 = v9;
    v11 = (char *)operator new(0x60uLL);
    v12 = v11;
    v13 = (llvm::Value *)(v11 + 32);
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = v11 + 32;
    v80 = 257;
    *((_QWORD *)v11 + 4) = v8;
    *((_QWORD *)v11 + 5) = 0;
    v14 = (uint64_t *)(v11 + 40);
    *((_WORD *)v11 + 24) = 60;
    *((_DWORD *)v11 + 13) = 1;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *((_DWORD *)v11 + 22) = 0;
    *(_QWORD *)v11 = v7;
    *((_QWORD *)v11 + 1) = 0;
    if (v7)
    {
      v15 = (_QWORD *)(v7 + 8);
      v16 = *(_QWORD *)(v7 + 8);
      *((_QWORD *)v11 + 1) = v16;
      if (v16)
        *(_QWORD *)(v16 + 16) = v11 + 8;
      *((_QWORD *)v11 + 2) = v15;
      *v15 = v11;
    }
    *((_WORD *)v11 + 25) = 2 * (v10 & 0x3F);
    v11[92] = 1;
    llvm::Value::setName((uint64_t ***)v11 + 4, (uint64_t)v79);
    (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v13, v77, v85, v86);
    if (!v83)
    {
LABEL_9:
      v78 = 257;
      v17 = (_QWORD *)(*(uint64_t (**)(uint64_t, llvm::Value *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v87 + 16))(v87, v13, ValueInMiddleOfBlock, 0, 0);
      if (!v17)
      {
        v80 = 257;
        v18 = (char *)operator new(0x80uLL);
        v19 = v18;
        *((_QWORD *)v18 + 8) = *(_QWORD *)v13;
        v17 = v18 + 64;
        *((_QWORD *)v18 + 3) = v18 + 64;
        *((_QWORD *)v18 + 5) = 0;
        *((_QWORD *)v18 + 6) = 0;
        *((_QWORD *)v18 + 7) = v18 + 64;
        *((_QWORD *)v18 + 9) = 0;
        *((_QWORD *)v18 + 10) = 0x200000029;
        *(_OWORD *)(v18 + 88) = 0u;
        *(_OWORD *)(v18 + 104) = 0u;
        *((_DWORD *)v18 + 30) = 0;
        *(_QWORD *)v18 = v13;
        v20 = *v14;
        *((_QWORD *)v18 + 1) = *v14;
        if (v20)
          *(_QWORD *)(v20 + 16) = v18 + 8;
        *((_QWORD *)v18 + 2) = v14;
        *v14 = (uint64_t)v18;
        *((_QWORD *)v18 + 4) = ValueInMiddleOfBlock;
        v23 = ValueInMiddleOfBlock[1];
        v22 = ValueInMiddleOfBlock + 1;
        v21 = v23;
        *((_QWORD *)v18 + 5) = v23;
        if (v23)
          *(_QWORD *)(v21 + 16) = v18 + 40;
        *((_QWORD *)v18 + 6) = v22;
        *v22 = v18 + 32;
        llvm::Value::setName((uint64_t ***)v18 + 8, (uint64_t)v79);
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v17, v77, v85, v86);
        if (v83)
        {
          v24 = (char *)v82;
          v25 = (char *)v82 + 16 * v83;
          v26 = (unsigned __int8 **)(v19 + 112);
          do
          {
            v27 = *(_DWORD *)v24;
            v28 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
            if (v28)
            {
              if (!v27)
              {
                v81 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
                llvm::MetadataTracking::track((uint64_t)&v81, v28, 2);
                v29 = *v26;
                if (!*v26)
                {
LABEL_27:
                  v30 = v81;
                  *v26 = v81;
                  if (v30)
                    llvm::MetadataTracking::retrack((uint64_t)&v81, v30, (uint64_t)(v19 + 112));
                  goto LABEL_24;
                }
LABEL_21:
                llvm::MetadataTracking::untrack((uint64_t)(v19 + 112), v29);
                goto LABEL_27;
              }
            }
            else
            {
              v29 = *v26;
              if (!*v26 && (v19[87] & 0x20) == 0)
                goto LABEL_24;
              if (!v27)
              {
                v81 = 0;
                if (!v29)
                  goto LABEL_27;
                goto LABEL_21;
              }
            }
            llvm::Value::setMetadata((llvm::Value *)v17, *(_DWORD *)v24, (llvm::MDNode *)v28);
LABEL_24:
            v24 += 16;
          }
          while (v24 != v25);
        }
        v1 = v76;
      }
      v81 = 0;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v85 + 56) + 40) + 272, *v17);
      v32 = v31;
      v33 = (char *)operator new(0x80uLL);
      v34 = v33;
      *((_DWORD *)v33 + 21) = *((_DWORD *)v33 + 21) & 0x38000000 | 2;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 2) = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 5) = 0;
      *((_QWORD *)v33 + 6) = 0;
      *((_QWORD *)v33 + 4) = 0;
      v35 = (uint64_t *)(v33 + 32);
      *((_QWORD *)v33 + 8) = **(_QWORD **)*v17 + 1576;
      v36 = (llvm::Value *)(v33 + 64);
      *((_QWORD *)v33 + 3) = v33 + 64;
      *((_QWORD *)v33 + 7) = v33 + 64;
      *((_QWORD *)v33 + 9) = 0;
      v33[80] = 61;
      v33[81] = 0;
      *((_WORD *)v33 + 41) = 0;
      *((_DWORD *)v33 + 21) = 2;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *((_DWORD *)v33 + 30) = 0;
      *(_QWORD *)v33 = v17;
      v39 = v17[1];
      v38 = v17 + 1;
      v37 = v39;
      *((_QWORD *)v33 + 1) = v39;
      if (v39)
        *(_QWORD *)(v37 + 16) = v33 + 8;
      *((_QWORD *)v33 + 2) = v38;
      *v38 = v33;
      if (*((_QWORD *)v33 + 4))
      {
        **((_QWORD **)v33 + 6) = *((_QWORD *)v33 + 5);
        v67 = *((_QWORD *)v33 + 5);
        if (v67)
          *(_QWORD *)(v67 + 16) = *((_QWORD *)v33 + 6);
      }
      *v35 = v7;
      if (v7)
      {
        v42 = *(_QWORD *)(v7 + 8);
        v41 = (uint64_t **)(v7 + 8);
        v40 = v42;
        *((_QWORD *)v33 + 5) = v42;
        if (v42)
          *(_QWORD *)(v40 + 16) = v33 + 40;
        *((_QWORD *)v33 + 6) = v41;
        *v41 = v35;
      }
      *((_WORD *)v33 + 41) = 2 * (v32 & 0x3F);
      v33[124] = 1;
      v80 = 257;
      (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v36, v79, v85, v86);
      if (!v83)
      {
LABEL_38:
        v81 = (unsigned __int8 *)v36;
        if (byte_1ED8157B8)
        {
          v43 = *(uint64_t **)(a1 + 64);
          v44 = *((_DWORD *)v43 + 4);
          if (v44)
          {
            v45 = *v43;
            v46 = v44 - 1;
            v47 = (v44 - 1) & ((v4 >> 4) ^ (v4 >> 9));
            v48 = *(uint64_t ***)(v45 + 16 * v47);
            if (v4 == v48)
            {
LABEL_44:
              v79[0] = *(_QWORD *)(v45 + 16 * v47 + 8);
              if (v79[0])
              {
                v66 = sub_1C62AEFA8(*(_QWORD *)(a1 + 56), v79);
                sub_1C61B1608((uint64_t)(v66 + 1), (uint64_t)v13, (uint64_t *)&v81);
              }
            }
            else
            {
              v49 = 1;
              while (v48 != (uint64_t **)-4096)
              {
                v50 = v47 + v49++;
                v47 = v50 & v46;
                v48 = *(uint64_t ***)(v45 + 16 * v47);
                if (v4 == v48)
                  goto LABEL_44;
              }
            }
          }
        }
        goto LABEL_46;
      }
      v59 = (char *)v82;
      v60 = (char *)v82 + 16 * v83;
      v61 = (unsigned __int8 **)(v34 + 112);
      while (1)
      {
        v62 = *(_DWORD *)v59;
        v63 = (unsigned __int8 *)*((_QWORD *)v59 + 1);
        if (v63)
        {
          if (!v62)
          {
            v77[0] = *((_QWORD *)v59 + 1);
            llvm::MetadataTracking::track((uint64_t)v77, v63, 2);
            v64 = *v61;
            goto LABEL_77;
          }
        }
        else
        {
          v64 = *v61;
          if (!*v61 && (v34[87] & 0x20) == 0)
            goto LABEL_74;
          if (!v62)
          {
            v77[0] = 0;
LABEL_77:
            if (v64)
              llvm::MetadataTracking::untrack((uint64_t)(v34 + 112), v64);
            v65 = (unsigned __int8 *)v77[0];
            *v61 = (unsigned __int8 *)v77[0];
            if (v65)
              llvm::MetadataTracking::retrack((uint64_t)v77, v65, (uint64_t)(v34 + 112));
            goto LABEL_74;
          }
        }
        llvm::Value::setMetadata(v36, *(_DWORD *)v59, (llvm::MDNode *)v63);
LABEL_74:
        v59 += 16;
        if (v59 == v60)
          goto LABEL_38;
      }
    }
    v51 = (char *)v82;
    v52 = (char *)v82 + 16 * v83;
    v53 = (unsigned __int8 **)(v12 + 80);
    while (1)
    {
      v54 = *(_DWORD *)v51;
      v55 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
      if (v55)
      {
        if (!v54)
        {
          v81 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
          v68 = v53;
          v72 = v52;
          llvm::MetadataTracking::track((uint64_t)&v81, v55, 2);
          v53 = v68;
          v52 = v72;
          v56 = *v68;
          goto LABEL_61;
        }
      }
      else
      {
        v56 = *v53;
        if (!*v53 && (v12[55] & 0x20) == 0)
          goto LABEL_58;
        if (!v54)
        {
          v81 = 0;
LABEL_61:
          if (v56)
          {
            v70 = v53;
            v74 = v52;
            llvm::MetadataTracking::untrack((uint64_t)v53, v56);
            v53 = v70;
            v52 = v74;
          }
          v58 = v81;
          *v53 = v81;
          if (v58)
          {
            v69 = v53;
            v73 = v52;
            llvm::MetadataTracking::retrack((uint64_t)&v81, v58, (uint64_t)v53);
            v53 = v69;
            v52 = v73;
          }
          goto LABEL_58;
        }
      }
      v71 = v52;
      v57 = v53;
      llvm::Value::setMetadata(v13, *(_DWORD *)v51, (llvm::MDNode *)v55);
      v53 = v57;
      v52 = v71;
      v1 = v76;
LABEL_58:
      v51 += 16;
      if (v51 == v52)
        goto LABEL_9;
    }
  }
}

void sub_1C58BC8F0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58BC904(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817E208;
  result[1] = v3;
  return result;
}

uint64_t sub_1C58BC938(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817E208;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C58BC954(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::TargetLibraryAnalysis::Key, a2)+ 8;
}

BOOL sub_1C58BC97C(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 160;
}

BOOL sub_1C58BC9C8(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 162;
}

unsigned int *sub_1C58BCA14(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 32 * v2;
      do
      {
        *v6 = -4096;
        v6 += 4;
        v7 -= 32;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(32 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        do
        {
          *(_QWORD *)result = -4096;
          result += 8;
          v11 -= 32;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

_QWORD *sub_1C58BCB10(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62AFB50(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

char *sub_1C58BCBC8(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 60)
    sub_1C4764EE4();
  v12 = (char *)operator new(16 * v9);
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v14 = v13 + 16;
  if (v4 == v3)
  {
    v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t sub_1C58BCCB0()
{
  uint64_t v1;
  int v2;
  __int128 v3;
  uint64_t *v4;

  LODWORD(v1) = 1;
  *(_QWORD *)&v3 = "Use debug info to correlate profiles.";
  *((_QWORD *)&v3 + 1) = 37;
  LOBYTE(v2) = 0;
  v4 = (uint64_t *)&v2;
  sub_1C62AF1D0((uint64_t)&llvm::DebugInfoCorrelate, "debug-info-correlate", &v1, &v3, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DebugInfoCorrelate, &dword_1C475E000);
  *(_QWORD *)&v3 = "Rename counter variable of a comdat function based on cfg hash";
  *((_QWORD *)&v3 + 1) = 62;
  LOBYTE(v1) = 1;
  v4 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED814EF8, "hash-based-counter-split", &v3, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814EF8, &dword_1C475E000);
  *(_QWORD *)&v3 = "Enable relocating counters at runtime.";
  *((_QWORD *)&v3 + 1) = 38;
  LOBYTE(v1) = 0;
  v4 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED814FB8, "runtime-counter-relocation", &v3, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED814FB8, &dword_1C475E000);
  *(_QWORD *)&v3 = "Do static counter allocation for value profiler";
  *((_QWORD *)&v3 + 1) = 47;
  LOBYTE(v1) = 1;
  v4 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED815078, "vp-static-alloc", &v3, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED815078, &dword_1C475E000);
  *(_QWORD *)&v3 = "The average number of profile counters allocated per value profiling site.";
  *((_QWORD *)&v3 + 1) = 74;
  v1 = 0x3FF0000000000000;
  v4 = &v1;
  sub_1C62AF2BC(&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, qword_1ED8158B8, &dword_1C475E000);
  LODWORD(v1) = 1;
  *(_QWORD *)&v3 = "Make all profile counter updates atomic (for testing only)";
  *((_QWORD *)&v3 + 1) = 58;
  LOBYTE(v2) = 0;
  v4 = (uint64_t *)&v2;
  sub_1C62AF384(&v1, &v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED815138, &dword_1C475E000);
  LODWORD(v1) = 1;
  *(_QWORD *)&v3 = "Do counter update using atomic fetch add  for promoted counters only";
  *((_QWORD *)&v3 + 1) = 68;
  LOBYTE(v2) = 0;
  v4 = (uint64_t *)&v2;
  sub_1C62AF45C(&v1, &v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8151F8, &dword_1C475E000);
  LODWORD(v1) = 1;
  *(_QWORD *)&v3 = "Use atomic fetch add for first counter in a function (usually the entry counter)";
  *((_QWORD *)&v3 + 1) = 80;
  LOBYTE(v2) = 0;
  v4 = (uint64_t *)&v2;
  sub_1C62AF1D0((uint64_t)&unk_1ED8152B8, "atomic-first-counter", &v1, &v3, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8152B8, &dword_1C475E000);
  LODWORD(v1) = 1;
  *(_QWORD *)&v3 = "Do counter register promotion";
  *((_QWORD *)&v3 + 1) = 29;
  LOBYTE(v2) = 0;
  v4 = (uint64_t *)&v2;
  sub_1C62AF1D0((uint64_t)&algn_1ED815339[63], "do-counter-promotion", &v1, &v3, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED815339[63], &dword_1C475E000);
  LODWORD(v1) = 1;
  v2 = 20;
  *(_QWORD *)&v3 = "Max number counter promotions per loop to avoid increasing register pressure too much";
  *((_QWORD *)&v3 + 1) = 85;
  v4 = (uint64_t *)&v2;
  sub_1C62AF534(&v1, (int **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED815438, &dword_1C475E000);
  LODWORD(v1) = 1;
  v2 = -1;
  *(_QWORD *)&v3 = "Max number of allowed counter promotions";
  *((_QWORD *)&v3 + 1) = 40;
  v4 = (uint64_t *)&v2;
  sub_1C62AF608(&v1, (int **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED8154F8, &dword_1C475E000);
  LODWORD(v1) = 1;
  v2 = 3;
  *(_QWORD *)&v3 = "The max number of exiting blocks of a loop to allow  speculative counter promotion";
  *((_QWORD *)&v3 + 1) = 82;
  v4 = (uint64_t *)&v2;
  sub_1C62AF6D8(&v1, (int **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED8155B8, &dword_1C475E000);
  LODWORD(v1) = 1;
  LOBYTE(v2) = 0;
  *(_QWORD *)&v3 = "When the option is false, if the target block is in a loop, the promotion will be disallowed unless t"
                   "he promoted counter  update can be further/iteratively promoted into an acyclic  region.";
  *((_QWORD *)&v3 + 1) = 189;
  v4 = (uint64_t *)&v2;
  sub_1C62AF7AC(&v1, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED815678, &dword_1C475E000);
  LODWORD(v1) = 1;
  LOBYTE(v2) = 1;
  *(_QWORD *)&v3 = "Allow counter promotion across the whole loop nest.";
  *((_QWORD *)&v3 + 1) = 51;
  v4 = (uint64_t *)&v2;
  sub_1C62AF884(&v1, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED815738, &dword_1C475E000);
  LODWORD(v1) = 1;
  LOBYTE(v2) = 1;
  *(_QWORD *)&v3 = "Suppress counter promotion if exit blocks contain ret.";
  *((_QWORD *)&v3 + 1) = 54;
  v4 = (uint64_t *)&v2;
  sub_1C62AF95C(&v1, (char **)&v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8157F8, &dword_1C475E000);
}

char *sub_1C58BD0F0(uint64_t **a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const llvm::APInt *v7;
  _DWORD *v8;
  llvm::GlobalValue *v9;
  llvm::Constant ***v10;
  uint64_t v11;
  llvm::Value **IntegerValue;
  int v13;
  unsigned int v14;
  int v16;
  size_t *inserted;
  _QWORD **v18;
  unsigned int v19;
  __int16 v20;
  void *__p[2];
  char v22;
  __int16 v23;
  unsigned int v24;

  v3 = **a1;
  v4 = 0x100000000000008;
  if (a2)
    v4 = 0x300000000000008;
  if (byte_1ED816318)
    v4 |= 0x400000000000000uLL;
  if (byte_1ED833D48)
    v5 = v4 | 0x800000000000000;
  else
    v5 = v4;
  v6 = byte_1ED8163D8;
  v8 = operator new(0x78uLL);
  v8[13] = v8[13] & 0x38000000 | 1;
  v9 = (llvm::GlobalValue *)(v8 + 8);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 8;
  v10 = (llvm::Constant ***)(v3 + 1984);
  if (v6)
    v11 = v5 | 0x3000000000000000;
  else
    v11 = v5;
  v19 = 64;
  v18 = (_QWORD **)v11;
  IntegerValue = llvm::Constant::getIntegerValue(v10, (llvm::Type *)&v18, v7);
  v23 = 261;
  __p[0] = "__llvm_profile_raw_version";
  __p[1] = (void *)26;
  llvm::GlobalVariable::GlobalVariable((uint64_t)v9, (uint64_t)a1, (llvm::PointerType *)v10, 1, 4, (uint64_t)IntegerValue, (uint64_t)__p, 0, 0, 0, 0);
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  v13 = v8[16];
  if ((v13 & 0xFu) - 7 >= 2)
    v14 = v13 & 0xFFFFFFCF;
  else
    v14 = v13 & 0xFFFFBFCF | 0x4000;
  v8[16] = v14;
  v20 = 260;
  v18 = a1 + 27;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v18);
  if (v24 > 9 || ((1 << v24) & 0x320) == 0)
  {
    v16 = v8[16];
    v8[16] = v16 & 0xFFFFFFF0;
    if ((v16 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v9) & 1) == 0)
      v8[16] |= 0x4000u;
    inserted = llvm::Module::getOrInsertComdat((uint64_t)a1, "__llvm_profile_raw_version", 0x1AuLL);
    llvm::GlobalObject::setComdat(v9, (llvm::Comdat *)inserted);
  }
  if (v22 < 0)
    operator delete(__p[0]);
  return (char *)(v8 + 8);
}

void llvm::PGOInstrumentationGen::run(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::BranchProbabilityInfo *v12;
  llvm::BlockFrequencyInfo *v13;
  int v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t Successor;
  uint64_t v40;
  int isCriticalEdge;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  BOOL v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  void *v77;
  const llvm::Module *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  char *v98;
  uint64_t v99;
  size_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char v105;
  int v106;
  int v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  int v126;
  std::string::value_type *v127;
  llvm::Type *v128;
  const llvm::APInt *v129;
  llvm::Constant *v130;
  llvm::UndefValue *v131;
  uint64_t v132;
  llvm::ConstantInt *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t i;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  int64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  llvm::Instruction *v168;
  unsigned int SuccessorNumber;
  uint64_t j;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int v179;
  uint64_t v180;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  llvm::UndefValue *v185;
  uint64_t *v186;
  char *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t Declaration;
  const llvm::APInt *v195;
  uint64_t v196;
  uint64_t **v197;
  llvm::ConstantInt *v198;
  unsigned int v199;
  char v200;
  const llvm::APInt *v201;
  llvm::ValueHandleBase *v202;
  llvm::ConstantInt *v203;
  llvm::ValueHandleBase *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t ***v208;
  uint64_t v209;
  uint64_t *k;
  uint64_t *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v215;
  const llvm::APInt *v216;
  uint64_t v217;
  uint64_t **v218;
  llvm::ConstantInt *v219;
  unsigned int v220;
  unint64_t v221;
  const llvm::APInt *v222;
  llvm::ValueHandleBase *v223;
  uint64_t v224;
  llvm::ConstantInt *v225;
  unsigned int v226;
  unint64_t v227;
  llvm::ValueHandleBase *v228;
  const llvm::Value *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  int v240;
  llvm::Value **v241;
  int v242;
  _QWORD *v243;
  void *v244;
  llvm::Function *v245;
  uint64_t v246;
  char v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  unsigned __int8 *v252;
  uint64_t v253;
  int v254;
  unsigned __int8 *v255;
  uint64_t v256;
  unsigned __int8 *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  char *v261;
  __int128 v262;
  uint64_t v263;
  const llvm::APInt *v264;
  uint64_t v265;
  uint64_t **v266;
  llvm::UndefValue *v267;
  llvm::ConstantInt *v268;
  unsigned int v269;
  unint64_t v270;
  const llvm::APInt *v271;
  llvm::ValueHandleBase *v272;
  llvm::ConstantInt *v273;
  unsigned int v274;
  unint64_t v275;
  const llvm::APInt *v276;
  llvm::ValueHandleBase *v277;
  llvm::ConstantInt *v278;
  unsigned int v279;
  unint64_t v280;
  llvm::ValueHandleBase *v281;
  char *v282;
  uint64_t v283;
  char *v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t m;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  unint64_t v300;
  int v301;
  unsigned int v302;
  uint64_t v303;
  unint64_t *v305;
  size_t v306;
  const void *v307;
  unint64_t v308;
  __int128 *p_dst;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  int v318;
  int v319;
  _QWORD *v320;
  void *v321;
  char *v322;
  void *v323;
  size_t v324;
  char *v325;
  _QWORD *v326;
  void ***v327;
  uint64_t v328;
  unsigned __int8 *v329;
  size_t v330;
  size_t *v331;
  llvm::GlobalValue *v332;
  int v333;
  void **v334;
  void *v335;
  unsigned __int8 *v336;
  size_t v337;
  size_t *inserted;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  void *v344;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  llvm *v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  unint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t *v361;
  unint64_t BlockFreq;
  uint64_t v363;
  llvm::Constant *v364;
  uint64_t v365;
  uint64_t v366;
  llvm::ValueHandleBase *v367;
  char v368;
  void *v369[2];
  void *v370[2];
  int v371;
  void *v372;
  size_t v373;
  char v374;
  char v375;
  __int16 v376;
  _DWORD v377[3];
  char v378;
  void **v379;
  uint64_t *v380;
  _QWORD v381[3];
  uint64_t v382;
  uint64_t v383;
  _DWORD *v384;
  int v385;
  __int128 v386;
  _QWORD v387[4];
  __int128 v388;
  uint64_t v389;
  __int128 v390;
  _QWORD v391[4];
  char v392;
  uint64_t v393;
  uint64_t *v394;
  char v395;
  void *v396;
  size_t v397;
  unsigned int v398;
  char v399;
  unint64_t v400;
  void *v401[2];
  _QWORD v402[2];
  __int16 v403;
  void *v404[2];
  __int128 v405;
  int v406;
  char v407;
  uint64_t v408;
  __int128 __dst;
  unint64_t v410;
  __int128 v411;
  uint64_t v412;
  uint64_t v413;

  v413 = *MEMORY[0x1E0C80C00];
  v347 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v349 = *a1;
  if (!*a1)
    sub_1C58BD0F0((uint64_t **)a2, 0);
  *(_OWORD *)v369 = 0u;
  *(_OWORD *)v370 = 0u;
  v371 = 1065353216;
  sub_1C58C5C84(a2, v369);
  v6 = a2 + 24;
  v7 = *(_QWORD *)(a2 + 32);
  if (v7 != a2 + 24)
  {
    v351 = (uint64_t *)a2;
    v346 = a2 + 24;
    while (1)
    {
      v8 = v7 ? v7 - 56 : 0;
      if (!v7 || *(_BYTE *)(v8 + 16) != 3)
        break;
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0)
        goto LABEL_15;
LABEL_414:
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v6)
        goto LABEL_606;
    }
    if (!*(_BYTE *)(v8 + 16) && *(_QWORD *)(v8 + 72) == v8 + 72 && (*(_BYTE *)(v8 + 34) & 0x80) == 0)
      goto LABEL_414;
LABEL_15:
    v9 = *(_QWORD *)(v8 + 112);
    if (v9 && (*(_BYTE *)(v9 + 15) & 0x20) != 0)
      goto LABEL_414;
    v348 = v7;
    v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v347, &llvm::TargetLibraryAnalysis::Key, v8) + 8;
    v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v347, &llvm::BranchProbabilityAnalysis::Key, v8) + 8;
    v12 = (llvm::BranchProbabilityInfo *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v347, &llvm::BlockFrequencyAnalysis::Key, v8)+ 8);
    llvm::SplitIndirectBrCriticalEdges((llvm *)v8, 0, v11, v12, v13);
    v14 = byte_1ED816318;
    *(_QWORD *)&v377[1] = v8;
    v378 = v349;
    v379 = v369;
    v15 = (uint64_t *)operator new();
    *v15 = v8;
    v15[1] = v8;
    v15[2] = v10;
    v15[3] = 0;
    v380 = v15;
    v16 = (char *)operator new(0x30uLL);
    v17 = 0;
    v381[0] = v16;
    v381[2] = v16 + 48;
    do
    {
      v18 = &v16[v17];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      v17 += 24;
    }
    while (v17 != 48);
    v19 = 0;
    v381[1] = v16 + 48;
    v382 = v8;
    v383 = 0;
    v384 = 0;
    v385 = 0;
    v386 = 0u;
    memset(v387, 0, sizeof(v387));
    *((_QWORD *)&v388 + 1) = 0;
    v389 = *(_QWORD *)&v377[1];
    v392 = 0;
    v390 = 0u;
    memset(v391, 0, 28);
    v393 = v11;
    v394 = (uint64_t *)v12;
    v395 = v14;
    v20 = *(_QWORD *)(*(_QWORD *)&v377[1] + 80);
    if (v20)
      v21 = v20 - 24;
    else
      v21 = 0;
    v365 = v21;
    if (*(_QWORD *)v12)
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) + 16);
    if (v14)
      v22 = 0;
    else
      v22 = v19;
    sub_1C58C5D84((uint64_t)&v389, 0, v21, v22);
    v23 = *(_QWORD *)(v365 + 40);
    v350 = (llvm *)v8;
    if (v23 == v365 + 40)
    {
LABEL_422:
      sub_1C58C5D84((uint64_t)&v389, v365, 0, v22);
    }
    else
    {
      if (v23)
        v24 = v23 - 24;
      else
        v24 = 0;
      if (*(_BYTE *)(v24 + 16) != 30)
      {
        switch(*(_BYTE *)(v24 + 16))
        {
          case 0x1E:
LABEL_613:
            __break(1u);
            return;
          case 0x1F:
            v242 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_421;
          case 0x20:
          case 0x26:
            v242 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_421;
          case 0x21:
          case 0x25:
            break;
          case 0x24:
            v242 = *(_WORD *)(v24 + 18) & 1;
            goto LABEL_421;
          case 0x27:
            v242 = *(_DWORD *)(v24 + 80) + 1;
LABEL_421:
            if (!v242)
              goto LABEL_422;
            break;
          default:
            goto LABEL_422;
        }
      }
      v25 = *(_QWORD *)(v389 + 80);
      v352 = v389 + 72;
      if (v25 == v389 + 72)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
      }
      else
      {
        v354 = 0;
        v356 = 0;
        v27 = 0;
        v29 = 0;
        do
        {
          if (v25)
            v30 = v25 - 24;
          else
            v30 = 0;
          v31 = *(_QWORD *)(v30 + 40);
          if (v31 == v30 + 40)
          {
            v33 = 0;
          }
          else
          {
            if (v31)
              v32 = v31 - 24;
            else
              v32 = 0;
            if (*(unsigned __int8 *)(v32 + 16) - 29 >= 0xB)
              v33 = 0;
            else
              v33 = v32;
          }
          if (v394)
            BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v394, v30);
          else
            BlockFreq = 2;
          v34 = *(unsigned __int8 *)(v33 + 16);
          if (v34 != 30)
            __asm { BR              X9 }
          if ((*(_DWORD *)(v33 + 20) & 0x7FFFFFF) == 3)
            v35 = 2;
          else
            v35 = 1;
          v353 = v25;
          v36 = 0;
          v37 = 1000 * BlockFreq;
          if (BlockFreq >= 0x4189374BC6A7EFLL)
            v37 = -1;
          v358 = v37;
          v38 = 2;
          do
          {
            Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v33, v36);
            v40 = llvm::Instruction::getSuccessor((llvm::Instruction *)v33, v36);
            isCriticalEdge = llvm::isCriticalEdge(v33, v40, 0);
            if (v393)
            {
              if (isCriticalEdge)
                v42 = v358;
              else
                v42 = BlockFreq;
              LODWORD(v404[0]) = llvm::BranchProbabilityInfo::getEdgeProbability(v393, v30, Successor);
              v38 = llvm::BranchProbability::scale((llvm::BranchProbability *)v404, v42);
            }
            if (v38 <= 1)
              v38 = 1;
            v43 = sub_1C58C5D84((uint64_t)&v389, v30, Successor, v38);
            *(_BYTE *)(v43 + 26) = isCriticalEdge;
            if (v30 == v365 && v38 > v27)
            {
              v29 = v43;
              v27 = v38;
            }
            v44 = *(_QWORD *)(Successor + 40);
            if (v44 != Successor + 40)
            {
              v45 = v44 - 24;
              if (!v44)
                v45 = 0;
              v46 = *(unsigned __int8 *)(v45 + 16);
              v47 = v46 - 29;
              if (v46 != 30)
              {
                v48 = 0;
                switch(v47)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_70;
                  case 1:
                    goto LABEL_613;
                  case 2:
                    v48 = (*(_DWORD *)(v45 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_70;
                  case 3:
                  case 9:
                    v48 = (*(_DWORD *)(v45 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_70;
                  case 4:
                  case 8:
                    break;
                  case 7:
                    v48 = *(_WORD *)(v45 + 18) & 1;
                    goto LABEL_70;
                  case 10:
                    v48 = *(_DWORD *)(v45 + 80) + 1;
                    goto LABEL_70;
                  default:
                    goto LABEL_73;
                }
              }
              v48 = 1;
LABEL_70:
              v49 = v356;
              v69 = v48 != 0 || v38 <= v356;
              v50 = v354;
              if (!v69)
              {
                v50 = v43;
                v49 = v38;
              }
              v354 = v50;
              v356 = v49;
            }
LABEL_73:
            ++v36;
          }
          while (v35 != v36);
          v25 = *(_QWORD *)(v353 + 8);
        }
        while (v25 != v352);
        v28 = v354;
        v26 = v356;
      }
      if (v27 >= v26 && 3 * v26 > 2 * v27)
      {
        *(_QWORD *)(v29 + 16) = v26;
        *(_QWORD *)(v28 + 16) = v27 + 1;
      }
    }
    v51 = v390;
    v52 = (uint64_t)(*((_QWORD *)&v390 + 1) - v390) >> 3;
    if ((uint64_t)(*((_QWORD *)&v390 + 1) - v390) < 1)
    {
LABEL_90:
      sub_1C58C5FF0(v51, *((uint64_t **)&v51 + 1), v52, 0, 0);
    }
    else
    {
      v53 = (uint64_t)(*((_QWORD *)&v390 + 1) - v390) >> 3;
      while (1)
      {
        v54 = (uint64_t *)operator new(8 * v53, MEMORY[0x1E0DE4E10]);
        if (v54)
          break;
        v55 = v53 > 1;
        v53 >>= 1;
        if (!v55)
          goto LABEL_90;
      }
      v56 = v54;
      sub_1C58C5FF0(v51, *((uint64_t **)&v51 + 1), v52, v54, v53);
      operator delete(v56);
    }
    v58 = (uint64_t **)*((_QWORD *)&v390 + 1);
    v57 = (uint64_t **)v390;
    v59 = v390;
    if ((_QWORD)v390 != *((_QWORD *)&v390 + 1))
    {
      do
      {
        v60 = *v57;
        if (!*((_BYTE *)*v57 + 25))
        {
          if (*((_BYTE *)v60 + 26))
          {
            v61 = v60[1];
            if (v61)
            {
              v62 = (uint64_t *)(v61 + 48);
              do
              {
                v63 = *v62;
                v64 = v63 - 24;
                if (!v63)
                  v64 = 0;
                v65 = *(unsigned __int8 *)(v64 + 16);
                v62 = (uint64_t *)(v63 + 8);
              }
              while (v65 == 83);
              if (v65 == 94 && sub_1C58953C0((uint64_t)&v389, *v60, v61))
                *((_BYTE *)*v57 + 24) = 1;
            }
          }
        }
        ++v57;
      }
      while (v57 != v58);
      v66 = (uint64_t **)*((_QWORD *)&v390 + 1);
      v57 = (uint64_t **)v390;
      v59 = v390;
      if ((_QWORD)v390 != *((_QWORD *)&v390 + 1))
      {
        do
        {
          v67 = *v57;
          if (!*((_BYTE *)*v57 + 25))
          {
            v68 = *v67;
            v69 = !v392 && v68 == 0;
            if (!v69 && sub_1C58953C0((uint64_t)&v389, v68, v67[1]))
              *((_BYTE *)*v57 + 24) = 1;
          }
          ++v57;
        }
        while (v57 != v66);
        v59 = *((_QWORD *)&v390 + 1);
        v57 = (uint64_t **)v390;
      }
    }
    v70 = v59 - (_QWORD)v57;
    if (v70 >= 9 && v395 != 0)
    {
      v72 = (char *)v57 + v70;
      v73 = *v57;
      *v57 = (uint64_t *)*((_QWORD *)v72 - 1);
      *((_QWORD *)v72 - 1) = v73;
    }
    v383 = 0;
    sub_1C58C6A78((uint64_t)&v382, (uint64_t)v350);
    *(_QWORD *)&v405 = 0;
    v404[1] = 0;
    v404[0] = 0;
    v75 = v380 + 1;
    v74 = v380[1];
    v380[3] = (uint64_t)v404;
    sub_1C62B0A14((char *)v75, v74);
    v75[2] = 0;
    v76 = v381[0];
    v77 = *(void **)(v381[0] + 24);
    if (v77)
    {
      *(_QWORD *)(v381[0] + 32) = v77;
      operator delete(v77);
    }
    *(_OWORD *)(v76 + 24) = *(_OWORD *)v404;
    *(_QWORD *)(v76 + 40) = v405;
    if (!v349)
    {
      v404[1] = 0;
      v404[0] = 0;
      *(_QWORD *)&v405 = 0;
      sub_1C62B0C08(v380, (uint64_t)v404);
      v243 = (_QWORD *)v381[0];
      v244 = *(void **)v381[0];
      if (*(_QWORD *)v381[0])
      {
        *(_QWORD *)(v381[0] + 8) = v244;
        operator delete(v244);
        *v243 = 0;
        v243[1] = 0;
        v243[2] = 0;
      }
      *(_OWORD *)v243 = *(_OWORD *)v404;
      v243[2] = v405;
    }
    llvm::getPGOFuncName(*(llvm **)&v377[1], 0, (std::string *)v404);
    if (SHIBYTE(v387[3]) < 0)
      operator delete((void *)v387[1]);
    *(_OWORD *)&v387[1] = *(_OWORD *)v404;
    v387[3] = v405;
    v79 = *(_QWORD *)(*(_QWORD *)&v377[1] + 80);
    v359 = *(_QWORD *)&v377[1] + 72;
    if (v79 != *(_QWORD *)&v377[1] + 72)
    {
      v80 = 0;
      v81 = 0;
      v82 = 0;
      while (1)
      {
        if (v79)
          v83 = v79 - 24;
        else
          v83 = 0;
        v84 = *(_QWORD *)(v83 + 40);
        if (v84 == v83 + 40)
        {
          v86 = 0;
        }
        else
        {
          if (v84)
            v85 = v84 - 24;
          else
            v85 = 0;
          if (*(unsigned __int8 *)(v85 + 16) - 29 >= 0xB)
            v86 = 0;
          else
            v86 = v85;
        }
        v363 = v79;
        v87 = *(unsigned __int8 *)(v86 + 16);
        if (v87 != 30)
          __asm { BR              X9 }
        if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
          v88 = 2;
        else
          v88 = 1;
        v89 = 0;
        v90 = v81;
        v366 = v86;
        do
        {
          v91 = llvm::Instruction::getSuccessor((llvm::Instruction *)v86, v89);
          if (!LODWORD(v391[3]))
            goto LABEL_172;
          v92 = ((v91 >> 4) ^ (v91 >> 9)) & (LODWORD(v391[3]) - 1);
          v93 = *(_QWORD *)(v391[1] + 16 * v92);
          if (v91 != v93)
          {
            v106 = 1;
            while (v93 != -4096)
            {
              v107 = v92 + v106++;
              v92 = v107 & (LODWORD(v391[3]) - 1);
              v93 = *(_QWORD *)(v391[1] + 16 * v92);
              if (v91 == v93)
                goto LABEL_145;
            }
LABEL_172:
            v81 = v90;
            goto LABEL_173;
          }
LABEL_145:
          if ((_DWORD)v92 == LODWORD(v391[3]))
            goto LABEL_172;
          v94 = *(_QWORD *)(v391[1] + 16 * v92 + 8);
          if (!v94)
            goto LABEL_172;
          v95 = 0;
          v96 = *(_DWORD *)(v94 + 8);
          do
          {
            v97 = v96 >> (8 * v95);
            if (v90 >= v82)
            {
              v98 = &v90[-v80];
              v99 = (uint64_t)&v90[-v80 + 1];
              if (v99 < 0)
                goto LABEL_611;
              if (2 * (uint64_t)&v82[-v80] > (unint64_t)v99)
                v99 = 2 * (_QWORD)&v82[-v80];
              if ((unint64_t)&v82[-v80] >= 0x3FFFFFFFFFFFFFFFLL)
                v100 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
                v101 = (char *)operator new(v100);
              else
                v101 = 0;
              v102 = &v98[(_QWORD)v101];
              v103 = &v98[(_QWORD)v101];
              *v103 = v97;
              v81 = v103 + 1;
              if (v90 != (char *)v80)
              {
                v104 = &v90[~v80];
                do
                {
                  v105 = *--v90;
                  (v104--)[(_QWORD)v101] = v105;
                }
                while (v90 != (char *)v80);
                v102 = v101;
              }
              v82 = &v101[v100];
              if (v80)
                operator delete((void *)v80);
              v80 = (unint64_t)v102;
            }
            else
            {
              *v90 = v97;
              v81 = v90 + 1;
            }
            ++v95;
            v90 = v81;
          }
          while (v95 != 4);
LABEL_173:
          ++v89;
          v90 = v81;
          v86 = v366;
        }
        while (v89 != v88);
        v79 = *(_QWORD *)(v363 + 8);
        if (v79 == v359)
        {
          if (v81 == (char *)v80)
          {
            v109 = 0xFFFFFFFFLL;
          }
          else
          {
            v108 = 0;
            v109 = 0xFFFFFFFFLL;
            do
              v109 = dword_1C866F364[(v108++)[v80] ^ (unint64_t)v109] ^ (v109 >> 8);
            while (&v81[-v80] != v108);
          }
          goto LABEL_183;
        }
      }
    }
    v80 = 0;
    v109 = 0xFFFFFFFFLL;
LABEL_183:
    if (byte_1ED816858)
    {
      v110 = v109 | ((unint64_t)v383 << 56) | ((unint64_t)(-1431655765
                                                                                     * ((*(_DWORD *)(v381[0] + 8) - *(_DWORD *)v381[0]) >> 3)) << 48) | ((*((_QWORD *)&v390 + 1) - (_QWORD)v390) << 29);
    }
    else
    {
      v111 = 0;
      v404[0] = (void *)v383;
      LODWORD(v112) = -1;
      do
        LODWORD(v112) = dword_1C866F364[(*((_BYTE *)v404 + v111++) ^ v112)] ^ (v112 >> 8);
      while (v111 != 8);
      v113 = 0;
      v404[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v381[0] + 8) - *(_QWORD *)v381[0]) >> 3));
      do
        LODWORD(v112) = dword_1C866F364[(*((_BYTE *)v404 + v113++) ^ v112)] ^ (v112 >> 8);
      while (v113 != 8);
      v114 = 0;
      v404[0] = (void *)(0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(*(_QWORD *)(v381[0] + 32) - *(_QWORD *)(v381[0] + 24)) >> 3));
      do
        LODWORD(v112) = dword_1C866F364[(*((_BYTE *)v404 + v114++) ^ v112)] ^ (v112 >> 8);
      while (v114 != 8);
      v115 = 0;
      v404[0] = (void *)((uint64_t)(*((_QWORD *)&v390 + 1) - v390) >> 3);
      do
        v112 = dword_1C866F364[(*((_BYTE *)v404 + v115++) ^ v112)] ^ (v112 >> 8);
      while (v115 != 8);
      v110 = v109 + (v112 << 28);
    }
    v116 = v110 & 0xFFFFFFFFFFFFFFFLL;
    *((_QWORD *)&v388 + 1) = v116;
    if (v378)
      *((_QWORD *)&v388 + 1) = v116 | 0x1000000000000000;
    if (v80)
      operator delete((void *)v80);
    v117 = *(_QWORD *)&v377[1];
    if (!v370[1])
      goto LABEL_207;
    v118 = sub_1C58C6F24(*(llvm **)&v377[1], v379, v78);
    v117 = *(_QWORD *)&v377[1];
    if (!v118)
      goto LABEL_207;
    if ((*(_BYTE *)(*(_QWORD *)&v377[1] + 23) & 0x10) == 0)
    {
      v306 = 0;
      HIBYTE(v410) = 0;
      p_dst = &__dst;
      goto LABEL_538;
    }
    v119 = ****(_QWORD ****)&v377[1];
    v120 = *(_QWORD *)(v119 + 152);
    v121 = *(unsigned int *)(v119 + 168);
    if ((_DWORD)v121)
    {
      LODWORD(v122) = (v121 - 1) & ((v377[1] >> 4) ^ (v377[1] >> 9));
      v123 = (uint64_t *)(v120 + 16 * v122);
      v124 = *v123;
      if (*v123 == *(_QWORD *)&v377[1])
        goto LABEL_530;
      v125 = 1;
      while (v124 != -4096)
      {
        v126 = v122 + v125++;
        v122 = v126 & (v121 - 1);
        v124 = *(_QWORD *)(v120 + 16 * v122);
        if (v124 == *(_QWORD *)&v377[1])
        {
          v123 = (uint64_t *)(v120 + 16 * v122);
          goto LABEL_530;
        }
      }
    }
    v123 = (uint64_t *)(v120 + 16 * v121);
LABEL_530:
    v305 = (unint64_t *)v123[1];
    v308 = *v305;
    v307 = v305 + 2;
    v306 = v308;
    if (v308 >= 0x7FFFFFFFFFFFFFF8)
LABEL_611:
      abort();
    if (v306 >= 0x17)
    {
      v310 = (v306 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v306 | 7) != 0x17)
        v310 = v306 | 7;
      v311 = v310 + 1;
      p_dst = (__int128 *)operator new(v310 + 1);
      *((_QWORD *)&__dst + 1) = v306;
      v410 = v311 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v410) = v306;
      p_dst = &__dst;
      if (!v306)
      {
LABEL_538:
        *((_BYTE *)p_dst + v306) = 0;
        if ((*(_BYTE *)(*(_QWORD *)&v377[1] + 23) & 0x10) == 0)
        {
          v321 = 0;
          v322 = &byte_1C871356D;
          goto LABEL_547;
        }
        v312 = ****(_QWORD ****)&v377[1];
        v313 = *(_QWORD *)(v312 + 152);
        v314 = *(unsigned int *)(v312 + 168);
        if ((_DWORD)v314)
        {
          LODWORD(v315) = (v314 - 1) & ((v377[1] >> 4) ^ (v377[1] >> 9));
          v316 = (uint64_t *)(v313 + 16 * v315);
          v317 = *v316;
          if (*v316 == *(_QWORD *)&v377[1])
          {
LABEL_546:
            v320 = (_QWORD *)v316[1];
            v323 = (void *)*v320;
            v322 = (char *)(v320 + 2);
            v321 = v323;
LABEL_547:
            v403 = 773;
            v401[0] = v322;
            v401[1] = v321;
            v402[0] = ".";
            v404[0] = v401;
            *(_QWORD *)&v405 = (char *)&v388 + 8;
            LOWORD(v406) = 3074;
            llvm::Twine::str((llvm::Twine *)v404, &v372);
            LOWORD(v406) = 260;
            v404[0] = &v372;
            llvm::Value::setName(*(uint64_t ****)&v377[1], (uint64_t)v404);
            LOWORD(v406) = 260;
            v404[0] = &__dst;
            llvm::GlobalAlias::create(4, (uint64_t)v404, *(_QWORD **)&v377[1]);
            if (v387[3] >= 0)
              v324 = HIBYTE(v387[3]) & 0x7F;
            else
              v324 = v387[2];
            sub_1C484371C((uint64_t)&v396, v324 + 1);
            if (v399 >= 0)
              v325 = (char *)&v396;
            else
              v325 = (char *)v396;
            if (v324)
            {
              if (v387[3] >= 0)
                v326 = &v387[1];
              else
                v326 = (_QWORD *)v387[1];
              memmove(v325, v326, v324);
            }
            *(_WORD *)&v325[v324] = 46;
            v404[0] = &v396;
            *(_QWORD *)&v405 = (char *)&v388 + 8;
            LOWORD(v406) = 3076;
            llvm::Twine::str((llvm::Twine *)v404, v401);
            if (SHIBYTE(v387[3]) < 0)
              operator delete((void *)v387[1]);
            *(_OWORD *)&v387[1] = *(_OWORD *)v401;
            v387[3] = v402[0];
            HIBYTE(v402[0]) = 0;
            LOBYTE(v401[0]) = 0;
            if (v399 < 0)
              operator delete(v396);
            v328 = *(_QWORD *)(*(_QWORD *)&v377[1] + 40);
            v327 = *(void ****)(*(_QWORD *)&v377[1] + 48);
            if (v327)
            {
              v400 = *(_QWORD *)(*(_QWORD *)&v377[1] + 48);
              v334 = *v327;
              v335 = *v334;
              v403 = 773;
              v401[0] = v334 + 9;
              v401[1] = v335;
              v402[0] = ".";
              v404[0] = v401;
              *(_QWORD *)&v405 = (char *)&v388 + 8;
              LOWORD(v406) = 3074;
              llvm::Twine::str((llvm::Twine *)v404, &v396);
              if (v399 >= 0)
                v336 = (unsigned __int8 *)&v396;
              else
                v336 = (unsigned __int8 *)v396;
              if (v399 >= 0)
                v337 = v399 & 0x7F;
              else
                v337 = v397;
              inserted = llvm::Module::getOrInsertComdat(v328, v336, v337);
              *((_DWORD *)inserted + 2) = *(_DWORD *)(v400 + 8);
              v339 = sub_1C629475C(v379, &v400);
              if (v339)
              {
                v340 = v339;
                v341 = v339;
                do
                  v341 = (_QWORD *)*v341;
                while (v341 && v341[2] == v400);
                if (v341 != v339)
                {
                  do
                  {
                    llvm::GlobalObject::setComdat((llvm::GlobalObject *)v340[3], (llvm::Comdat *)inserted);
                    v340 = (_QWORD *)*v340;
                  }
                  while (v340 != v341);
                }
              }
              if (v399 < 0)
                operator delete(v396);
            }
            else
            {
              if (v374 >= 0)
                v329 = (unsigned __int8 *)&v372;
              else
                v329 = (unsigned __int8 *)v372;
              if (v374 >= 0)
                v330 = v374 & 0x7F;
              else
                v330 = v373;
              v331 = llvm::Module::getOrInsertComdat(*(_QWORD *)(*(_QWORD *)&v377[1] + 40), v329, v330);
              v332 = *(llvm::GlobalValue **)&v377[1];
              v333 = *(_DWORD *)(*(_QWORD *)&v377[1] + 32);
              *(_DWORD *)(*(_QWORD *)&v377[1] + 32) = v333 & 0xFFFFFFF0 | 3;
              if ((v333 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v332) & 1) == 0)
                *((_DWORD *)v332 + 8) |= 0x4000u;
              llvm::GlobalObject::setComdat(*(llvm::GlobalObject **)&v377[1], (llvm::Comdat *)v331);
            }
            if (v374 < 0)
              operator delete(v372);
            if (SHIBYTE(v410) < 0)
              operator delete((void *)__dst);
            v117 = *(_QWORD *)&v377[1];
LABEL_207:
            if (v387[3] >= 0)
              v127 = (std::string::value_type *)&v387[1];
            else
              v127 = (std::string::value_type *)v387[1];
            if (v387[3] >= 0)
              v128 = (llvm::Type *)(HIBYTE(v387[3]) & 0x7F);
            else
              v128 = (llvm::Type *)v387[2];
            *(_QWORD *)&v388 = llvm::createPGOFuncNameVar(*(_QWORD *)(v117 + 40), *(_DWORD *)(v117 + 32) & 0xF, v127, v128);
            v130 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)*v351 + 1912), 0);
            v131 = (llvm::UndefValue *)v388;
            if (*(llvm::Constant **)v388 != v130)
              v131 = sub_1C537D3B8((llvm *)0x31, v388, v130, 0);
            v132 = *(_QWORD *)*v351;
            v133 = *(llvm::ConstantInt **)(v132 + 1984);
            v134 = *(unsigned int *)(v132 + 1992);
            LODWORD(v404[1]) = v134 >> 8;
            if (v134 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v404, *((uint64_t *)&v388 + 1), 0);
            }
            else
            {
              if (v134 <= 0xFF)
                v135 = 0;
              else
                v135 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v134);
              v404[0] = (void *)(v135 & *((_QWORD *)&v388 + 1));
            }
            v367 = llvm::ConstantInt::get(v133, (llvm::LLVMContext *)v404, v129);
            if (LODWORD(v404[1]) >= 0x41 && v404[0])
              MEMORY[0x1CAA32F9C](v404[0], 0x1000C8000313F17);
            if (byte_1ED8163D8)
            {
              v136 = *((_QWORD *)v350 + 10);
              if (v136)
                v137 = v136 - 24;
              else
                v137 = 0;
              v138 = v137 + 40;
              for (i = *(_QWORD *)(v137 + 48); i != v138; i = *(_QWORD *)(i + 8))
              {
                v140 = i - 24;
                if (!i)
                  v140 = 0;
                if (*(_BYTE *)(v140 + 16) != 83)
                {
                  v191 = *(unsigned __int8 *)(i - 8) - 38;
                  v55 = v191 > 0x38;
                  v192 = (1 << v191) & 0x100060000000001;
                  if (v55 || v192 == 0)
                    v138 = i;
                  else
                    v138 = *(_QWORD *)(i + 8);
                  break;
                }
              }
              sub_1C4D8ADA0((uint64_t)v404, (uint64_t **)v137, v138, 0, 0, 0);
              Declaration = llvm::Intrinsic::getDeclaration(v351, 159, 0, 0);
              v196 = Declaration;
              if (Declaration)
                v197 = *(uint64_t ***)(Declaration + 24);
              else
                v197 = 0;
              *(_QWORD *)&__dst = v131;
              *((_QWORD *)&__dst + 1) = v367;
              v198 = *(llvm::ConstantInt **)(*(_QWORD *)v408 + 1960);
              v199 = *(_DWORD *)(*(_QWORD *)v408 + 1968);
              LODWORD(v401[1]) = v199 >> 8;
              if (v199 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)v401, 1, 0);
              }
              else
              {
                if (v199 <= 0xFF)
                  v200 = 0;
                else
                  v200 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v199);
                v401[0] = (void *)(v200 & 1);
              }
              v202 = llvm::ConstantInt::get(v198, (llvm::LLVMContext *)v401, v195);
              if (LODWORD(v401[1]) >= 0x41 && v401[0])
                MEMORY[0x1CAA32F9C](v401[0], 0x1000C8000313F17);
              v410 = (unint64_t)v202;
              v203 = *(llvm::ConstantInt **)(*(_QWORD *)v408 + 1960);
              LODWORD(v401[1]) = *(_DWORD *)(*(_QWORD *)v408 + 1968) >> 8;
              if (LODWORD(v401[1]) > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)v401, 0, 0);
              else
                v401[0] = 0;
              v204 = llvm::ConstantInt::get(v203, (llvm::LLVMContext *)v401, v201);
              if (LODWORD(v401[1]) >= 0x41 && v401[0])
                MEMORY[0x1CAA32F9C](v401[0], 0x1000C8000313F17);
              *(_QWORD *)&v411 = v204;
              v403 = 257;
              sub_1C4774778((uint64_t *)v404, v197, v196, (uint64_t *)&__dst, 4, (uint64_t)v401, 0);
              if (v404[0] != &v405)
                free(v404[0]);
              goto LABEL_395;
            }
            v141 = (uint64_t *)*((_QWORD *)&v390 + 1);
            v142 = (uint64_t *)v390;
            v143 = *((_QWORD *)&v390 + 1) - v390;
            if (*((_QWORD *)&v390 + 1) == (_QWORD)v390)
            {
              v157 = 0;
              LODWORD(v205) = v383;
              v377[0] = 0;
            }
            else
            {
              if (v143 < 0)
                goto LABEL_611;
              v144 = v143 >> 3;
              v145 = (char *)operator new(v143);
              v146 = &v145[8 * v144];
              v147 = v145;
              v364 = v130;
              do
              {
                v148 = *v142;
                if (v145 >= v146)
                {
                  v149 = (v145 - v147) >> 3;
                  v150 = v149 + 1;
                  if ((unint64_t)(v149 + 1) >> 61)
                    goto LABEL_611;
                  if ((v146 - v147) >> 2 > v150)
                    v150 = (v146 - v147) >> 2;
                  if ((unint64_t)(v146 - v147) >= 0x7FFFFFFFFFFFFFF8)
                    v151 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v151 = v150;
                  if (v151)
                  {
                    if (v151 >> 61)
LABEL_612:
                      sub_1C4764EE4();
                    v152 = (char *)operator new(8 * v151);
                  }
                  else
                  {
                    v152 = 0;
                  }
                  v153 = &v152[8 * v149];
                  *(_QWORD *)v153 = v148;
                  v154 = v153 + 8;
                  while (v145 != v147)
                  {
                    v155 = *((_QWORD *)v145 - 1);
                    v145 -= 8;
                    *((_QWORD *)v153 - 1) = v155;
                    v153 -= 8;
                  }
                  v146 = &v152[8 * v151];
                  if (v147)
                    operator delete(v147);
                  v147 = v153;
                  v145 = v154;
                  v130 = v364;
                }
                else
                {
                  *(_QWORD *)v145 = v148;
                  v145 += 8;
                }
                ++v142;
              }
              while (v142 != v141);
              if (v147 != v145)
              {
                v156 = 0;
                v157 = 0;
                v158 = 0;
                v159 = v147;
                while (1)
                {
                  v160 = *(_QWORD *)v159;
                  if (*(_BYTE *)(*(_QWORD *)v159 + 24) || *(_BYTE *)(v160 + 25))
                    goto LABEL_257;
                  v162 = *(_QWORD *)v160;
                  v161 = *(_QWORD *)(v160 + 8);
                  if (*(_QWORD *)v160)
                  {
                    if (v161)
                    {
                      v163 = v162 + 40;
                      v164 = *(_QWORD *)(v162 + 40);
                      if (v164 == v162 + 40)
                      {
                        v166 = 0;
                      }
                      else
                      {
                        if (v164)
                          v165 = v164 - 24;
                        else
                          v165 = 0;
                        if (*(unsigned __int8 *)(v165 + 16) - 29 >= 0xB)
                          v166 = 0;
                        else
                          v166 = v165;
                      }
                      v167 = *(unsigned __int8 *)(v166 + 16);
                      if (v167 != 30)
                        __asm { BR              X10 }
                      if ((*(_DWORD *)(v166 + 20) & 0x7FFFFFF) != 3)
                      {
                        for (j = *(_QWORD *)(v162 + 48); j != v163; j = *(_QWORD *)(j + 8))
                        {
                          v175 = j - 24;
                          if (!j)
                            v175 = 0;
                          if (*(_BYTE *)(v175 + 16) != 83)
                            goto LABEL_297;
                        }
                        goto LABEL_257;
                      }
                      if (*(_BYTE *)(v160 + 26))
                      {
                        v355 = v158;
                        v357 = v156;
                        v168 = (llvm::Instruction *)v166;
                        SuccessorNumber = llvm::GetSuccessorNumber(v162, v161);
                        if (*((_BYTE *)v168 + 16) == 32)
                        {
                          v158 = v355;
                          v156 = v357;
                          goto LABEL_257;
                        }
                        v406 = 0;
                        *(_OWORD *)v404 = 0u;
                        v405 = 0u;
                        v407 = 1;
                        v403 = 257;
                        v172 = llvm::SplitCriticalEdge(v168, SuccessorNumber, (uint64_t)v404, (llvm::Twine *)v401);
                        v158 = v355;
                        if (!v172)
                        {
                          v130 = v364;
LABEL_329:
                          v156 = v357;
                          goto LABEL_257;
                        }
                        v173 = v162;
                        v162 = v172;
                        sub_1C58C5D84((uint64_t)&v389, v173, v172, 0);
                        *(_BYTE *)(sub_1C58C5D84((uint64_t)&v389, v162, v161, 0) + 24) = 1;
                        *(_BYTE *)(v160 + 25) = 1;
                        v163 = v162 + 40;
                        j = *(_QWORD *)(v162 + 48);
                        if (j == v162 + 40)
                        {
                          v130 = v364;
                          goto LABEL_329;
                        }
                        v130 = v364;
                        v156 = v357;
                        while (1)
                        {
                          v174 = j - 24;
                          if (!j)
                            v174 = 0;
                          if (*(_BYTE *)(v174 + 16) != 83)
                            break;
                          j = *(_QWORD *)(j + 8);
                          if (j == v163)
                            goto LABEL_257;
                        }
LABEL_297:
                        v176 = *(unsigned __int8 *)(j - 8) - 38;
                        v55 = v176 > 0x38;
                        v177 = (1 << v176) & 0x100060000000001;
                        if (!v55 && v177 != 0)
                          j = *(_QWORD *)(j + 8);
                      }
                      else
                      {
                        v163 = v161 + 40;
                        for (j = *(_QWORD *)(v161 + 48); ; j = *(_QWORD *)(j + 8))
                        {
                          if (j == v163)
                            goto LABEL_257;
                          v171 = j - 24;
                          if (!j)
                            v171 = 0;
                          if (*(_BYTE *)(v171 + 16) != 83)
                            break;
                        }
                        v179 = *(unsigned __int8 *)(j - 8) - 38;
                        v55 = v179 > 0x38;
                        v180 = (1 << v179) & 0x100060000000001;
                        if (!v55 && v180 != 0)
                          j = *(_QWORD *)(j + 8);
                        v162 = *(_QWORD *)(v160 + 8);
                      }
                      if (v163 == j)
                        goto LABEL_257;
                    }
                  }
                  else
                  {
                    v162 = *(_QWORD *)(v160 + 8);
                    if (!v161)
                      goto LABEL_257;
                  }
                  if (v157 >= v158)
                  {
                    v182 = v157 - v156;
                    v183 = v182 + 1;
                    if ((unint64_t)(v182 + 1) >> 61)
                      goto LABEL_611;
                    if (((char *)v158 - (char *)v156) >> 2 > v183)
                      v183 = ((char *)v158 - (char *)v156) >> 2;
                    if ((unint64_t)((char *)v158 - (char *)v156) >= 0x7FFFFFFFFFFFFFF8)
                      v184 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v184 = v183;
                    v360 = v157;
                    if (v184)
                    {
                      if (v184 >> 61)
                        goto LABEL_612;
                      v185 = v131;
                      v186 = v156;
                      v187 = (char *)operator new(8 * v184);
                      v156 = v186;
                      v131 = v185;
                    }
                    else
                    {
                      v187 = 0;
                    }
                    v188 = (uint64_t *)&v187[8 * v182];
                    *v188 = v162;
                    v157 = v188 + 1;
                    if (v360 != v156)
                    {
                      v189 = v360;
                      do
                      {
                        v190 = *--v189;
                        *--v188 = v190;
                      }
                      while (v189 != v156);
                    }
                    v158 = (uint64_t *)&v187[8 * v184];
                    if (v156)
                      operator delete(v156);
                    v156 = v188;
                  }
                  else
                  {
                    *v157++ = v162;
                  }
LABEL_257:
                  v159 += 8;
                  if (v159 == v145)
                    goto LABEL_351;
                }
              }
              v157 = 0;
              v156 = 0;
LABEL_351:
              if (v147)
              {
                v206 = v156;
                operator delete(v147);
                v156 = v206;
              }
              v377[0] = 0;
              v205 = v383 + ((unint64_t)((char *)v157 - (char *)v156) >> 3);
              if (v157 != v156)
              {
                v207 = v156;
                v208 = (uint64_t ***)v156;
                do
                {
                  v209 = (uint64_t)(*v208 + 5);
                  for (k = (*v208)[6]; k != (uint64_t *)v209; k = (uint64_t *)k[1])
                  {
                    v211 = k - 3;
                    if (!k)
                      v211 = 0;
                    if (*((_BYTE *)v211 + 16) != 83)
                    {
                      v212 = *((unsigned __int8 *)k - 8) - 38;
                      v55 = v212 > 0x38;
                      v213 = (1 << v212) & 0x100060000000001;
                      if (v55 || v213 == 0)
                        v209 = (uint64_t)k;
                      else
                        v209 = k[1];
                      break;
                    }
                  }
                  sub_1C4D8ADA0((uint64_t)v404, *v208, v209, 0, 0, 0);
                  v215 = llvm::Intrinsic::getDeclaration(v351, 160, 0, 0);
                  v217 = v215;
                  if (v215)
                    v218 = *(uint64_t ***)(v215 + 24);
                  else
                    v218 = 0;
                  *(_QWORD *)&__dst = v131;
                  *((_QWORD *)&__dst + 1) = v367;
                  v219 = *(llvm::ConstantInt **)(*(_QWORD *)v408 + 1960);
                  v220 = *(_DWORD *)(*(_QWORD *)v408 + 1968);
                  LODWORD(v401[1]) = v220 >> 8;
                  if (v220 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)v401, v205, 0);
                  }
                  else
                  {
                    if (v220 <= 0xFF)
                      v221 = 0;
                    else
                      v221 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v220);
                    v401[0] = (void *)(v221 & v205);
                  }
                  v223 = llvm::ConstantInt::get(v219, (llvm::LLVMContext *)v401, v216);
                  if (LODWORD(v401[1]) >= 0x41 && v401[0])
                    MEMORY[0x1CAA32F9C](v401[0], 0x1000C8000313F17);
                  v410 = (unint64_t)v223;
                  v224 = v377[0]++;
                  v225 = *(llvm::ConstantInt **)(*(_QWORD *)v408 + 1960);
                  v226 = *(_DWORD *)(*(_QWORD *)v408 + 1968);
                  LODWORD(v401[1]) = v226 >> 8;
                  if (v226 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)v401, v224, 0);
                  }
                  else
                  {
                    if (v226 <= 0xFF)
                      v227 = 0;
                    else
                      v227 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v226);
                    v401[0] = (void *)(v227 & v224);
                  }
                  v228 = llvm::ConstantInt::get(v225, (llvm::LLVMContext *)v401, v222);
                  if (LODWORD(v401[1]) >= 0x41 && v401[0])
                    MEMORY[0x1CAA32F9C](v401[0], 0x1000C8000313F17);
                  *(_QWORD *)&v411 = v228;
                  v403 = 257;
                  sub_1C4774778((uint64_t *)v404, v218, v217, (uint64_t *)&__dst, 4, (uint64_t)v401, 0);
                  if (v404[0] != &v405)
                    free(v404[0]);
                  ++v208;
                }
                while (v208 != (uint64_t ***)v157);
                v157 = v207;
              }
            }
            HIDWORD(v383) = 1;
            v384 = v377;
            v385 = v205;
            v386 = v388;
            sub_1C58C6A78((uint64_t)&v382, (uint64_t)v350);
            if (byte_1ED815C58)
            {
              if (!v157)
              {
LABEL_395:
                v230 = v391[1];
                if (LODWORD(v391[3]))
                {
                  v231 = 16 * LODWORD(v391[3]);
                  v232 = (uint64_t *)(v391[1] + 8);
                  do
                  {
                    if ((*(v232 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
                    {
                      v233 = *v232;
                      *v232 = 0;
                      if (v233)
                        MEMORY[0x1CAA32FC0](v233, 0x1020C40EDED9539);
                    }
                    v232 += 2;
                    v231 -= 16;
                  }
                  while (v231);
                  v230 = v391[1];
                }
                MEMORY[0x1CAA32FB4](v230, 8);
                v234 = (_QWORD *)v390;
                if ((_QWORD)v390)
                {
                  v235 = (_QWORD *)*((_QWORD *)&v390 + 1);
                  v236 = (void *)v390;
                  if (*((_QWORD *)&v390 + 1) != (_QWORD)v390)
                  {
                    do
                    {
                      v238 = *--v235;
                      v237 = v238;
                      *v235 = 0;
                      if (v238)
                        MEMORY[0x1CAA32FC0](v237, 0x1060C40ACBCC463);
                    }
                    while (v235 != v234);
                    v236 = (void *)v390;
                  }
                  *((_QWORD *)&v390 + 1) = v234;
                  operator delete(v236);
                }
                if (SHIBYTE(v387[3]) < 0)
                  operator delete((void *)v387[1]);
                v404[0] = v381;
                sub_1C4DB60AC((void ***)v404);
                v239 = v380;
                v380 = 0;
                if (v239)
                  MEMORY[0x1CAA32FC0](v239, 0x20C40DC1BFBCFLL);
                v6 = v346;
                v7 = v348;
                goto LABEL_414;
              }
LABEL_394:
              operator delete(v157);
              goto LABEL_395;
            }
            v398 = 0;
            v397 = 0;
            v396 = 0;
            if ((*((_BYTE *)v350 + 18) & 8) != 0)
            {
              v240 = *((_DWORD *)v350 + 5);
              v241 = (v240 & 0x40000000) != 0
                   ? (llvm::Value **)*((_QWORD *)v350 - 1)
                   : (llvm::Value **)((char *)v350 - 32 * (v240 & 0x7FFFFFF));
              if (llvm::classifyEHPersonality(*v241, v229) - 7 <= 3)
              {
                llvm::colorEHFunclets(v350, v245, (uint64_t)v404);
                sub_1C61A9204((uint64_t *)&v396, (uint64_t *)v404);
                sub_1C4EF1108((uint64_t *)v404);
              }
            }
            v361 = v157;
            v246 = 0;
            v247 = 1;
            while (1)
            {
              if ((v247 & 1) == 0 && !byte_1ED816198)
              {
LABEL_527:
                sub_1C4EF1108((uint64_t *)&v396);
                v157 = v361;
                if (!v361)
                  goto LABEL_395;
                goto LABEL_394;
              }
              v368 = v247;
              v248 = (uint64_t *)(v381[0] + 24 * v246);
              v250 = *v248;
              v249 = v248[1];
              if (*v248 != v249)
                break;
LABEL_526:
              v247 = 0;
              v246 = 1;
              if ((v368 & 1) == 0)
                goto LABEL_527;
            }
            v251 = 0;
            while (1)
            {
              v252 = *(unsigned __int8 **)v250;
              v253 = *(_QWORD *)(v250 + 16);
              sub_1C4773D54((uint64_t)v404, *(_QWORD *)(v250 + 8), 0, 0, 0);
              v254 = *(unsigned __int8 *)(*(_QWORD *)v252 + 8);
              if (v254 == 15)
                break;
              v255 = 0;
              if (v254 == 13)
              {
                v256 = *(_QWORD *)v408 + 1984;
                v403 = 257;
                v257 = sub_1C4773690((uint64_t *)v404, v252, v256, (uint64_t)v401);
LABEL_439:
                v255 = v257;
              }
              v401[0] = v402;
              v401[1] = (void *)0x100000000;
              v259 = *(unsigned __int8 *)(v253 + 16);
              if (v259 == 33 || v259 == 39)
                goto LABEL_447;
              if (v259 == 84)
              {
                v260 = *(_QWORD *)(v253 - 32);
                if (v260
                  && !*(_BYTE *)(v260 + 16)
                  && *(_QWORD *)(v260 + 24) == *(_QWORD *)(v253 + 72)
                  && (*(_BYTE *)(v260 + 33) & 0x20) != 0)
                {
                  if ((_DWORD)v397)
                  {
                    if (v398)
                    {
                      v286 = *(_QWORD *)(v253 + 40);
                      LODWORD(v287) = ((v286 >> 4) ^ (v286 >> 9)) & (v398 - 1);
                      v288 = (char *)v396 + 16 * v287;
                      v289 = *(_QWORD *)v288;
                      if (v286 != *(_QWORD *)v288)
                      {
                        v290 = 1;
                        while (v289 != -4096)
                        {
                          v291 = v287 + v290++;
                          v287 = v291 & (v398 - 1);
                          v289 = *((_QWORD *)v396 + 2 * v287);
                          if (v286 == v289)
                          {
                            v288 = (char *)v396 + 16 * v287;
                            goto LABEL_495;
                          }
                        }
                        v288 = (char *)v396 + 16 * v398;
                      }
                    }
                    else
                    {
                      v288 = (char *)v396;
                    }
LABEL_495:
                    *(_QWORD *)&__dst = 0;
                    v292 = *((_QWORD *)v288 + 1);
                    v293 = v292 & 0xFFFFFFFFFFFFFFF8;
                    if ((v292 & 4) != 0)
                      v293 = **(_QWORD **)v293;
                    v294 = v293 + 40;
                    for (m = *(_QWORD *)(v293 + 48); m != v294; m = *(_QWORD *)(m + 8))
                    {
                      v296 = m - 24;
                      if (m)
                        v297 = m - 24;
                      else
                        v297 = 0;
                      if (*(_BYTE *)(v297 + 16) != 83)
                        goto LABEL_518;
                    }
                    v296 = 0;
LABEL_518:
                    *(_QWORD *)&__dst = v296;
                    v302 = *(unsigned __int8 *)(v296 + 16) - 38;
                    v55 = v302 > 0x38;
                    v303 = (1 << v302) & 0x100060000000001;
                    if (!v55 && v303 != 0)
                      sub_1C58C6FD8((uint64_t)v401, "funclet", (uint64_t *)&__dst);
                  }
                  goto LABEL_452;
                }
LABEL_447:
                sub_1C5062CEC(v253, 1, (uint64_t)&v372);
                if (v375)
                {
                  sub_1C5063174((uint64_t)&__dst, (uint64_t)&v372);
                  if (LODWORD(v401[1]) >= HIDWORD(v401[1]))
                  {
                    v400 = 0;
                    v298 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v401, 0, 48, &v400);
                    v299 = &v298[48 * LODWORD(v401[1])];
                    v300 = v410;
                    *(_OWORD *)v299 = __dst;
                    *((_QWORD *)v299 + 2) = v300;
                    v410 = 0;
                    __dst = 0uLL;
                    *((_QWORD *)v299 + 4) = 0;
                    *((_QWORD *)v299 + 5) = 0;
                    *((_QWORD *)v299 + 3) = 0;
                    *(_OWORD *)(v299 + 24) = v411;
                    *((_QWORD *)v299 + 5) = v412;
                    v411 = 0uLL;
                    v412 = 0;
                    sub_1C4FCE92C((uint64_t *)v401, (uint64_t)v298);
                    v301 = v400;
                    if (v401[0] != v402)
                      free(v401[0]);
                    v401[0] = v298;
                    HIDWORD(v401[1]) = v301;
                    ++LODWORD(v401[1]);
                    if ((_QWORD)v411)
                    {
                      *((_QWORD *)&v411 + 1) = v411;
                      operator delete((void *)v411);
                    }
                  }
                  else
                  {
                    v261 = (char *)v401[0] + 48 * LODWORD(v401[1]);
                    v262 = __dst;
                    *((_QWORD *)v261 + 2) = v410;
                    *(_OWORD *)v261 = v262;
                    v410 = 0;
                    __dst = 0uLL;
                    *((_QWORD *)v261 + 3) = 0;
                    *((_QWORD *)v261 + 4) = 0;
                    *((_QWORD *)v261 + 5) = 0;
                    *(_OWORD *)(v261 + 24) = v411;
                    *((_QWORD *)v261 + 5) = v412;
                    v411 = 0uLL;
                    v412 = 0;
                    ++LODWORD(v401[1]);
                  }
                  if (SHIBYTE(v410) < 0)
                    operator delete((void *)__dst);
                }
              }
LABEL_452:
              v263 = llvm::Intrinsic::getDeclaration(v351, 162, 0, 0);
              v265 = v263;
              if (v263)
                v266 = *(uint64_t ***)(v263 + 24);
              else
                v266 = 0;
              v267 = (llvm::UndefValue *)v388;
              if (*(llvm::Constant **)v388 != v130)
                v267 = sub_1C537D3B8((llvm *)0x31, v388, v130, 0);
              *(_QWORD *)&__dst = v267;
              v268 = *(llvm::ConstantInt **)(*(_QWORD *)v408 + 1984);
              v269 = *(_DWORD *)(*(_QWORD *)v408 + 1992);
              LODWORD(v373) = v269 >> 8;
              if (v269 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v372, *((uint64_t *)&v388 + 1), 0);
              }
              else
              {
                if (v269 <= 0xFF)
                  v270 = 0;
                else
                  v270 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v269);
                v372 = (void *)(v270 & *((_QWORD *)&v388 + 1));
              }
              v272 = llvm::ConstantInt::get(v268, (llvm::LLVMContext *)&v372, v264);
              if (v373 >= 0x41 && v372)
                MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
              *((_QWORD *)&__dst + 1) = v272;
              v410 = (unint64_t)v255;
              v273 = *(llvm::ConstantInt **)(*(_QWORD *)v408 + 1960);
              v274 = *(_DWORD *)(*(_QWORD *)v408 + 1968);
              LODWORD(v373) = v274 >> 8;
              if (v274 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v372, v246, 0);
              }
              else
              {
                if (v274 <= 0xFF)
                  v275 = 0;
                else
                  v275 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v274);
                v372 = (void *)(v275 & v246);
              }
              v277 = llvm::ConstantInt::get(v273, (llvm::LLVMContext *)&v372, v271);
              if (v373 >= 0x41 && v372)
                MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
              *(_QWORD *)&v411 = v277;
              v278 = *(llvm::ConstantInt **)(*(_QWORD *)v408 + 1960);
              v279 = *(_DWORD *)(*(_QWORD *)v408 + 1968);
              LODWORD(v373) = v279 >> 8;
              if (v279 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v372, v251, 0);
              }
              else
              {
                if (v279 <= 0xFF)
                  LODWORD(v280) = 0;
                else
                  v280 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v279);
                v372 = (void *)(v280 & v251);
              }
              v281 = llvm::ConstantInt::get(v278, (llvm::LLVMContext *)&v372, v276);
              if (v373 >= 0x41 && v372)
                MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
              *((_QWORD *)&v411 + 1) = v281;
              v376 = 257;
              sub_1C5062DD8((uint64_t *)v404, v266, v265, (uint64_t *)&__dst, 5, (uint64_t)v401[0], LODWORD(v401[1]), (uint64_t)&v372, 0);
              v282 = (char *)v401[0];
              if (LODWORD(v401[1]))
              {
                v283 = 48 * LODWORD(v401[1]);
                do
                {
                  v284 = &v282[v283];
                  v285 = *(void **)&v282[v283 - 24];
                  if (v285)
                  {
                    *((_QWORD *)v284 - 2) = v285;
                    operator delete(v285);
                  }
                  if (*(v284 - 25) < 0)
                    operator delete(*((void **)v284 - 6));
                  v283 -= 48;
                }
                while (v283);
                v282 = (char *)v401[0];
              }
              if (v282 != (char *)v402)
                free(v282);
              if (v404[0] != &v405)
                free(v404[0]);
              ++v251;
              v250 += 24;
              if (v250 == v249)
                goto LABEL_526;
            }
            v258 = *(_QWORD *)v408 + 1984;
            v403 = 257;
            v257 = sub_1C4773E38((uint64_t *)v404, 47, v252, v258, (uint64_t)v401);
            goto LABEL_439;
          }
          v318 = 1;
          while (v317 != -4096)
          {
            v319 = v315 + v318++;
            v315 = v319 & (v314 - 1);
            v317 = *(_QWORD *)(v313 + 16 * v315);
            if (v317 == *(_QWORD *)&v377[1])
            {
              v316 = (uint64_t *)(v313 + 16 * v315);
              goto LABEL_546;
            }
          }
        }
        v316 = (uint64_t *)(v313 + 16 * v314);
        goto LABEL_546;
      }
    }
    memmove(p_dst, v307, v306);
    goto LABEL_538;
  }
LABEL_606:
  v342 = v370[0];
  if (v370[0])
  {
    do
    {
      v343 = (_QWORD *)*v342;
      operator delete(v342);
      v342 = v343;
    }
    while (v343);
  }
  v344 = v369[0];
  v369[0] = 0;
  if (v344)
    operator delete(v344);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_DWORD *)(a4 + 64) = 2;
}

uint64_t llvm::PGOInstrumentationUse::PGOInstrumentationUse(uint64_t a1, __int128 *a2, __int128 *a3, char a4, _QWORD *a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;

  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = *a5;
  *a5 = 0;
  if (byte_1ED81692F >= 0)
    v8 = byte_1ED81692F & 0x7F;
  else
    v8 = qword_1ED816920;
  if (v8)
  {
    if (byte_1ED81692F >= 0)
      v9 = &qword_1ED816918;
    else
      v9 = (uint64_t *)qword_1ED816918;
    MEMORY[0x1CAA32AC8](a1, v9);
  }
  if (byte_1ED816A17 >= 0)
    v10 = byte_1ED816A17 & 0x7F;
  else
    v10 = qword_1ED816A08;
  if (v10)
  {
    if (byte_1ED816A17 >= 0)
      v11 = &qword_1ED816A00;
    else
      v11 = (uint64_t *)qword_1ED816A00;
    MEMORY[0x1CAA32AC8](a1 + 24, v11);
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    llvm::vfs::getRealFileSystem(&v18);
    v13 = v18;
    v18 = *(unsigned int **)(a1 + 56);
    v14 = v18;
    *(_QWORD *)(a1 + 56) = v13;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  return a1;
}

uint64_t sub_1C58BF888(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t), uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t), uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  llvm::LLVMContext *v33;
  uint64_t v34;
  char *v35;
  llvm::Metadata *MD;
  size_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type v42;
  char *v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::BranchProbabilityInfo *v50;
  llvm::BlockFrequencyInfo *v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::GlobalObject *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t Successor;
  uint64_t v78;
  int isCriticalEdge;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t **v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  void *v115;
  const llvm::Module *v116;
  llvm::GlobalObject *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  int v126;
  int v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  char *v136;
  uint64_t v137;
  size_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char v143;
  int v144;
  int v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  llvm::GlobalObject *v160;
  int v161;
  int v162;
  int v163;
  unint64_t *v164;
  size_t v165;
  const void *v166;
  unint64_t v167;
  __n128 *p_dst;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  llvm::GlobalObject *v176;
  int v177;
  int v178;
  _QWORD *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  size_t v183;
  std::string *v184;
  _QWORD *v185;
  uint64_t **v186;
  uint64_t v187;
  unsigned __int8 *v188;
  size_t v189;
  size_t *v190;
  llvm::GlobalObject *v191;
  int v192;
  uint64_t *v193;
  uint64_t v194;
  std::string *v195;
  size_t size;
  size_t *inserted;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  llvm::LLVMContext *v201;
  _QWORD *v202;
  uint64_t *v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  int v212;
  int i;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  int j;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t *v222;
  uint64_t *v223;
  int64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t *m;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  int v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  int v301;
  int v302;
  std::string::size_type *v303;
  std::string::size_type *v304;
  void *v305;
  unsigned int v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  BOOL v316;
  uint64_t *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  unsigned int SuccessorNumber;
  uint64_t v328;
  uint64_t v329;
  uint64_t n;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int v337;
  uint64_t v338;
  unsigned int v340;
  uint64_t v341;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t *v346;
  char *v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t *v352;
  uint64_t *v353;
  unint64_t *v354;
  std::string::size_type v355;
  const void *v356;
  unint64_t v357;
  std::string *v358;
  uint64_t v359;
  uint64_t v360;
  char v361;
  char v362;
  char v363;
  std::string *v364;
  uint64_t v365;
  void *v366;
  std::string::size_type v367;
  std::string::size_type v368;
  unint64_t v369;
  uint64_t ***v370;
  char *v371;
  char *v372;
  char v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  std::string::size_type v407;
  unint64_t v408;
  uint64_t v409;
  BOOL v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  char *v414;
  BOOL v415;
  unint64_t v416;
  int v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  char *v425;
  uint64_t isIrrLoopHeader;
  char *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  unsigned int v444;
  unint64_t v445;
  unsigned __int8 *v446;
  size_t v447;
  char v448;
  uint64_t v449;
  char v450;
  char v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  void **v460;
  char v461;
  char v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  void *v468;
  int v469;
  int v470;
  unint64_t *v471;
  std::string::size_type v472;
  const void *v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  char v477;
  char v478;
  char v479;
  std::string *v480;
  uint64_t v481;
  __n128 *v482;
  uint64_t v483;
  uint64_t v484;
  const llvm::BasicBlock *v485;
  _QWORD *v486;
  llvm::Value *v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  BOOL v491;
  BOOL v492;
  unsigned int v493;
  BOOL v494;
  uint64_t v496;
  uint64_t v497;
  llvm::Value *v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t ****v502;
  char *v503;
  char *ii;
  uint64_t ***v505;
  uint64_t ****v506;
  char *v507;
  uint64_t ***v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  _QWORD *v512;
  _QWORD *v513;
  void *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t ****v524;
  char *v525;
  char *jj;
  uint64_t ***v527;
  uint64_t ****v528;
  char *v529;
  char *v530;
  uint64_t ***v531;
  size_t v532;
  uint64_t v533;
  uint64_t **v534;
  llvm *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t ****v540;
  uint64_t ***v541;
  int v542;
  int v543;
  llvm *v544;
  llvm *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  void *v552;
  int v553;
  int v554;
  uint64_t ***v555;
  uint64_t *v556;
  _QWORD *v557;
  const char *v558;
  size_t v559;
  size_t v560;
  llvm::raw_ostream *v561;
  llvm *v562;
  uint64_t *v563;
  uint64_t v564;
  int v565;
  size_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  void *v572;
  int v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t ****v579;
  uint64_t ***v580;
  int v581;
  int v582;
  llvm *v583;
  llvm *v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  void *v591;
  int v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  void *v599;
  int v600;
  int v601;
  uint64_t ***v602;
  uint64_t *v603;
  _QWORD *v604;
  const char *v605;
  size_t v606;
  size_t v607;
  llvm::raw_ostream *v608;
  llvm *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  _BYTE *v613;
  void *v614;
  _BYTE *v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  void *v621;
  uint64_t **v622;
  uint64_t **v623;
  void *v624;
  uint64_t ***v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t ****v631;
  uint64_t ***v632;
  int v633;
  int v634;
  uint64_t ***v635;
  const char *v636;
  size_t v637;
  size_t v638;
  void *v639;
  _WORD *v640;
  uint64_t v641;
  const char *v642;
  size_t v643;
  _BYTE *v644;
  _QWORD *v645;
  unsigned int v646;
  _DWORD *v647;
  _WORD *v648;
  uint64_t v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t *v656;
  const char *v657;
  size_t v658;
  _BYTE *v659;
  _QWORD *v660;
  uint64_t v661;
  char *v662;
  uint64_t v663;
  _QWORD *v664;
  uint64_t v665;
  char *v666;
  uint64_t v667;
  char v668;
  size_t v669;
  __n128 *v670;
  BOOL v671;
  uint64_t ***v673;
  void *v674;
  uint64_t ***v675;
  _BYTE *v676;
  const llvm::BasicBlock *v677;
  BOOL v678;
  uint64_t *BlockProfileCount;
  int v680;
  uint64_t v681;
  double v682;
  int v683;
  int v684;
  _BOOL4 v686;
  uint64_t v687;
  std::string::size_type *v688;
  std::string::size_type *v689;
  unint64_t v690;
  std::string::size_type v691;
  double v692;
  uint64_t **v693;
  uint64_t v694;
  int v695;
  uint64_t v696;
  unint64_t v697;
  double v698;
  uint64_t v699;
  std::string::size_type v700;
  unint64_t v701;
  const llvm::Function *v702;
  const char *v703;
  _QWORD *v704;
  _QWORD *v705;
  unsigned int v706;
  unsigned int v707;
  unsigned int *v708;
  const llvm::BasicBlock *v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  int v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t *v716;
  unint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  uint64_t v721;
  int v722;
  unsigned int v723;
  _QWORD *v724;
  uint64_t v725;
  _QWORD *v726;
  int v727;
  BOOL v728;
  unsigned int v729;
  uint64_t v730;
  _QWORD *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unint64_t v735;
  unint64_t v736;
  _QWORD **v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  const llvm::BasicBlock **v742;
  const llvm::BasicBlock *v743;
  int v744;
  int v745;
  const llvm::BasicBlock *v746;
  char *v747;
  size_t v748;
  size_t v749;
  uint64_t v750;
  uint64_t v751;
  size_t v752;
  void *v753;
  std::string::size_type v754;
  char *v755;
  unint64_t v756;
  void **v757;
  _QWORD *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  int v762;
  uint64_t v763;
  int v764;
  unsigned int v765;
  _QWORD *v766;
  uint64_t v767;
  _QWORD *v768;
  int v769;
  BOOL v770;
  unsigned int v771;
  uint64_t v772;
  _QWORD *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  const llvm::BasicBlock *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t *v784;
  uint64_t v785;
  int v786;
  int v787;
  _QWORD *v788;
  char *v789;
  size_t v790;
  size_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  char *v796;
  unint64_t v797;
  void **v798;
  char *v799;
  unint64_t v800;
  void **v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t *v804;
  _QWORD *v805;
  std::string::size_type v806;
  char *v807;
  uint64_t v808;
  uint64_t ****v809;
  uint64_t ****v810;
  uint64_t ***v811;
  uint64_t **v812;
  uint64_t *v813;
  uint64_t ***v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t ****v819;
  uint64_t ***v820;
  int v821;
  int v822;
  unint64_t *v823;
  size_t v824;
  const void *v825;
  unint64_t v826;
  __n128 *v827;
  uint64_t v828;
  uint64_t v829;
  __n128 *v830;
  std::string::size_type v831;
  std::string *v832;
  std::string::size_type v833;
  char *v834;
  std::string *v835;
  llvm::BlockFrequencyInfo *v836;
  uint64_t v837;
  _QWORD *v838;
  _QWORD *v839;
  void *v840;
  uint64_t v841;
  char *v842;
  char *v843;
  uint64_t v844;
  unint64_t v845;
  char *v846;
  _BOOL4 v847;
  uint64_t v848;
  char *v849;
  uint64_t ***v850;
  char *v851;
  uint64_t ****v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  llvm::GlobalObject *v857;
  llvm::GlobalObject *v858;
  unint64_t v859;
  uint64_t v860;
  unsigned int v861;
  unint64_t v862;
  std::string::size_type v863;
  llvm::LLVMContext *v864;
  llvm::LLVMContext *v865;
  llvm::LLVMContext *v866;
  unint64_t BlockFreq;
  llvm::GlobalObject *v868;
  _BOOL4 v869;
  int v870;
  uint64_t v871;
  llvm::GlobalObject *v872;
  uint64_t *k;
  uint64_t *v874;
  unsigned int v875;
  void *v876;
  char v877;
  void *v878;
  char v879;
  void *v880[2];
  llvm::BlockFrequencyInfo *v881;
  uint64_t v882;
  llvm::GlobalObject *v883;
  char v884;
  void **v885;
  uint64_t *v886;
  _QWORD v887[3];
  uint64_t v888;
  uint64_t v889;
  _BYTE *v890;
  int v891;
  __int128 v892;
  _QWORD v893[5];
  uint64_t v894;
  llvm::GlobalObject *v895;
  __int128 v896;
  uint64_t v897[4];
  char v898;
  uint64_t v899;
  uint64_t *v900;
  BOOL v901;
  uint64_t v902;
  _BYTE v903[44];
  char v904;
  void *v905[2];
  void *v906[2];
  int v907;
  _QWORD v908[2];
  _QWORD v909[2];
  uint64_t *v910;
  void *v911;
  size_t v912;
  uint64_t v913;
  uint64_t *v914;
  std::string v915;
  void *v916;
  char v917;
  std::string v918;
  void *v919;
  __int16 v920;
  char v921;
  std::string v922;
  void *v923;
  __int16 v924;
  char v925;
  __n128 __dst;
  const char *v927;
  size_t v928;
  __int16 v929;
  void *v930;
  size_t v931;
  const char *v932;
  __int128 v933;
  __int128 v934;
  uint64_t v935;
  _QWORD *v936;
  uint64_t v937;
  _QWORD v938[6];
  _QWORD v939[2];
  uint64_t v940;
  char v941;
  __int128 v942;
  __int128 v943;
  uint64_t v944;
  int v945;
  char v946;
  uint64_t v947;
  uint64_t ***v948;
  char v949;
  int v950;
  void *v951;
  unsigned int v952;
  uint64_t v953;
  std::string v954;
  void *v955;
  __int16 v956;
  char v957;
  _BYTE v958[40];
  __int128 v959;
  uint64_t v960;
  void **v961;
  uint64_t v962;
  void *v963;
  uint64_t v964;
  _QWORD v965[4];
  _QWORD v966[28];
  char v967;
  int v968;
  const llvm::BasicBlock *v969;
  uint64_t v970;

  v970 = *MEMORY[0x1E0C80C00];
  v908[0] = a2;
  v908[1] = a3;
  v17 = *a1;
  *(_WORD *)&v958[32] = 261;
  *(_QWORD *)v958 = a2;
  *(_QWORD *)&v958[8] = a3;
  LOWORD(v944) = 261;
  *(_QWORD *)&v942 = a4;
  *((_QWORD *)&v942 + 1) = a5;
  llvm::IndexedInstrProfReader::create((llvm::Twine *)v958, a6, (llvm::Twine *)&v942, (uint64_t)&v940);
  v18 = v940;
  v940 = 0;
  if ((v941 & 1) != 0)
  {
    if (v18)
    {
      *(_QWORD *)v958 = v17;
      *(_QWORD *)&v958[8] = v908;
      v21 = v18;
      if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v18 + 48))(v18, &llvm::ErrorList::ID))
      {
        v22 = v21;
        v23 = *(void ***)(v21 + 8);
        v24 = *(void ***)(v21 + 16);
        if (v23 == v24)
        {
          v25 = 0;
        }
        else
        {
          v25 = 0;
          do
          {
            v880[0] = v25;
            v26 = *v23;
            *v23 = 0;
            v930 = v26;
            sub_1C58C83B4(&__dst, &v930, (uint64_t)v958);
            sub_1C6174794((char **)v880, (char **)&__dst, &v942);
            v25 = (void *)v942;
            *(_QWORD *)&v942 = 0;
            if (__dst.n128_u64[0])
              (*(void (**)(unint64_t))(*(_QWORD *)__dst.n128_u64[0] + 8))(__dst.n128_u64[0]);
            v27 = v930;
            v930 = 0;
            if (v27)
              (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
            if (v880[0])
              (*(void (**)(void *))(*(_QWORD *)v880[0] + 8))(v880[0]);
            ++v23;
          }
          while (v23 != v24);
        }
        v954.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
        v29 = v22;
      }
      else
      {
        *(_QWORD *)&v942 = v21;
        sub_1C58C83B4(&v954, &v942, (uint64_t)v958);
        v29 = v942;
        if (!(_QWORD)v942)
          goto LABEL_31;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
LABEL_31:
      v19 = 0;
      goto LABEL_32;
    }
LABEL_19:
    *(_WORD *)&v958[32] = 261;
    *(_QWORD *)v958 = "Cannot get PGOReader";
    *(_QWORD *)&v958[8] = 20;
    DWORD2(v942) = 19;
    BYTE12(v942) = 0;
    *(_QWORD *)&v942 = &unk_1E814E730;
    *(_QWORD *)&v943 = a2;
    *((_QWORD *)&v943 + 1) = v958;
    llvm::LLVMContext::diagnose(v17, (const llvm::DiagnosticInfo *)&v942);
    goto LABEL_31;
  }
  if (!v18)
    goto LABEL_19;
  v855 = v18;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v18 + 48))() & 1) == 0 && a14)
    goto LABEL_5;
  v854 = a8;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v855 + 40))(v855) & 1) == 0)
  {
    v28 = "Not an IR level instrumentation profile";
    goto LABEL_26;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v855 + 72))(v855))
  {
    v28 = "Cannot use coverage profiles for optimization";
LABEL_26:
    *(_QWORD *)v958 = v28;
    *(_WORD *)&v958[32] = 259;
    DWORD2(v942) = 19;
    BYTE12(v942) = 0;
    *(_QWORD *)&v942 = &unk_1E814E730;
    *(_QWORD *)&v943 = a2;
    *((_QWORD *)&v943 + 1) = v958;
    llvm::LLVMContext::diagnose(v17, (const llvm::DiagnosticInfo *)&v942);
    v19 = 0;
    v20 = v855;
    goto LABEL_27;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v855 + 80))(v855))
  {
    v32 = 80;
    if (a14)
      v32 = 88;
    v33 = (llvm::LLVMContext *)*a1;
    v853 = (uint64_t)a1;
    if (a14)
      v34 = 16;
    else
      v34 = 14;
    if (a14)
      v35 = "CSProfileSummary";
    else
      v35 = "ProfileSummary";
    MD = (llvm::Metadata *)llvm::ProfileSummary::getMD(*(llvm::ProfileSummary **)(v855 + v32), v33, 1, 1);
    v37 = v34;
    v38 = (void *)v853;
    llvm::Module::setModuleFlag((uint64_t **)v853, (llvm::Type *)1, v35, v37, MD);
    llvm::ProfileSummaryInfo::refresh((unsigned __int8 *)a13);
    *(_OWORD *)v905 = 0u;
    *(_OWORD *)v906 = 0u;
    v907 = 1065353216;
    sub_1C58C5C84(v853, v905);
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v855 + 56))(v855);
    v40 = v853 + 24;
    v41 = *(_QWORD *)(v853 + 32);
    if (v41 == v853 + 24)
      goto LABEL_1500;
    v852 = 0;
    v42 = 0;
    v842 = 0;
    v843 = 0;
    v846 = 0;
    v43 = 0;
    if (word_1ED8162A0)
      v44 = byte_1ED816318 != 0;
    else
      v44 = v39;
    v847 = v44;
    while (1)
    {
      if (v41)
        v45 = v41 - 56;
      else
        v45 = 0;
      if (v41 && *(_BYTE *)(v45 + 16) == 3)
      {
        if ((*(_DWORD *)(v45 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_890;
      }
      else if (!*(_BYTE *)(v45 + 16) && *(_QWORD *)(v45 + 72) == v45 + 72 && (*(_BYTE *)(v45 + 34) & 0x80) == 0)
      {
        goto LABEL_890;
      }
      v851 = v43;
      v848 = v41;
      v849 = (char *)v42;
      v46 = a7(a8, v45);
      v47 = v38;
      v48 = v46;
      v49 = a9(a10, v45);
      v50 = (llvm::BranchProbabilityInfo *)a11(a12, v45);
      llvm::SplitIndirectBrCriticalEdges((llvm *)v45, 0, v49, v50, v51);
      v880[0] = (void *)v45;
      v880[1] = v47;
      v881 = v50;
      v882 = a13;
      v883 = (llvm::GlobalObject *)v45;
      v884 = a14;
      v885 = v905;
      v52 = (uint64_t *)operator new();
      *v52 = v45;
      v52[1] = v45;
      v52[2] = v48;
      v52[3] = 0;
      v886 = v52;
      v53 = (char *)operator new(0x30uLL);
      v54 = 0;
      v887[0] = v53;
      v887[2] = v53 + 48;
      do
      {
        v55 = &v53[v54];
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
        *((_QWORD *)v55 + 2) = 0;
        v54 += 24;
      }
      while (v54 != 48);
      v887[1] = v53 + 48;
      v888 = v45;
      v889 = 0;
      v890 = 0;
      v891 = 0;
      v892 = 0u;
      memset(v893, 0, 32);
      v894 = 0;
      v895 = v883;
      v898 = 0;
      v896 = 0u;
      memset(v897, 0, 28);
      v899 = v49;
      v900 = (uint64_t *)v50;
      v901 = v847;
      v56 = *((_QWORD *)v883 + 10);
      if (v56)
        v57 = v56 - 24;
      else
        v57 = 0;
      v871 = v57;
      if (v50)
      {
        v58 = *(_QWORD *)v50;
        if (*(_QWORD *)v50)
          v58 = *(_QWORD *)(*(_QWORD *)(v58 + 8) + 16);
      }
      else
      {
        v58 = 2;
      }
      if (v847)
        v59 = 0;
      else
        v59 = v58;
      result = sub_1C58C849C((uint64_t)&v895, 0, v871, v59);
      v60 = *(_QWORD *)(v871 + 40);
      v850 = (uint64_t ***)v45;
      if (v60 == v871 + 40)
      {
LABEL_260:
        sub_1C58C849C((uint64_t)&v895, v871, 0, v59);
        goto LABEL_134;
      }
      if (v60)
        v61 = v60 - 24;
      else
        v61 = 0;
      if (*(_BYTE *)(v61 + 16) != 30)
      {
        switch(*(_BYTE *)(v61 + 16))
        {
          case 0x1E:
LABEL_1507:
            __break(1u);
            return result;
          case 0x1F:
            v163 = (*(_DWORD *)(v61 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_259;
          case 0x20:
          case 0x26:
            v163 = (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_259;
          case 0x21:
          case 0x25:
            break;
          case 0x24:
            v163 = *(_WORD *)(v61 + 18) & 1;
            goto LABEL_259;
          case 0x27:
            v163 = *(_DWORD *)(v61 + 80) + 1;
LABEL_259:
            if (!v163)
              goto LABEL_260;
            break;
          default:
            goto LABEL_260;
        }
      }
      v62 = (llvm::GlobalObject *)*((_QWORD *)v895 + 10);
      v857 = (llvm::GlobalObject *)((char *)v895 + 72);
      if (v62 == (llvm::GlobalObject *)((char *)v895 + 72))
      {
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
      }
      else
      {
        v844 = result;
        v845 = v59;
        v860 = 0;
        v862 = 0;
        v64 = 0;
        v65 = 0;
        v67 = 0;
        do
        {
          if (v62)
            v68 = (uint64_t)v62 - 24;
          else
            v68 = 0;
          v69 = *(_QWORD *)(v68 + 40);
          if (v69 == v68 + 40)
          {
            v71 = 0;
          }
          else
          {
            if (v69)
              v70 = v69 - 24;
            else
              v70 = 0;
            if (*(unsigned __int8 *)(v70 + 16) - 29 >= 0xB)
              v71 = 0;
            else
              v71 = v70;
          }
          if (v900)
            BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v900, v68);
          else
            BlockFreq = 2;
          v72 = *(unsigned __int8 *)(v71 + 16);
          if (v72 != 30)
            __asm { BR              X9 }
          if ((*(_DWORD *)(v71 + 20) & 0x7FFFFFF) == 3)
            v73 = 2;
          else
            v73 = 1;
          v858 = v62;
          v859 = v64;
          v74 = 0;
          v75 = 1000 * BlockFreq;
          if (BlockFreq >= 0x4189374BC6A7EFLL)
            v75 = -1;
          v864 = (llvm::LLVMContext *)v75;
          v76 = 2;
          do
          {
            Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v71, v74);
            v78 = llvm::Instruction::getSuccessor((llvm::Instruction *)v71, v74);
            isCriticalEdge = llvm::isCriticalEdge(v71, v78, 0);
            if (v899)
            {
              if (isCriticalEdge)
                v80 = (uint64_t)v864;
              else
                v80 = BlockFreq;
              *(_DWORD *)v958 = llvm::BranchProbabilityInfo::getEdgeProbability(v899, v68, Successor);
              v76 = llvm::BranchProbability::scale((llvm::BranchProbability *)v958, v80);
            }
            v42 = v68 == v871;
            if (v76 <= 1)
              v76 = 1;
            result = sub_1C58C849C((uint64_t)&v895, v68, Successor, v76);
            *(_BYTE *)(result + 26) = isCriticalEdge;
            if ((v42 & (v76 > v65)) != 0)
            {
              v67 = result;
              v65 = v76;
            }
            v81 = *(_QWORD *)(Successor + 40);
            if (v81 != Successor + 40)
            {
              v82 = v81 - 24;
              if (!v81)
                v82 = 0;
              v83 = *(unsigned __int8 *)(v82 + 16);
              v84 = v83 - 29;
              if (v83 != 30)
              {
                v85 = 0;
                switch(v84)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_115;
                  case 1:
                    goto LABEL_1507;
                  case 2:
                    v85 = (*(_DWORD *)(v82 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_115;
                  case 3:
                  case 9:
                    v85 = (*(_DWORD *)(v82 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_115;
                  case 4:
                  case 8:
                    break;
                  case 7:
                    v85 = *(_WORD *)(v82 + 18) & 1;
                    goto LABEL_115;
                  case 10:
                    v85 = *(_DWORD *)(v82 + 80) + 1;
                    goto LABEL_115;
                  default:
                    goto LABEL_118;
                }
              }
              v85 = 1;
LABEL_115:
              v86 = v862;
              v105 = v85 != 0 || v76 <= v862;
              v87 = v860;
              if (!v105)
              {
                v87 = result;
                v86 = v76;
              }
              v860 = v87;
              v862 = v86;
            }
LABEL_118:
            ++v74;
          }
          while (v73 != v74);
          v64 = v859;
          v62 = (llvm::GlobalObject *)*((_QWORD *)v858 + 1);
        }
        while (v62 != v857);
        result = v844;
        v59 = v845;
        v66 = v860;
        v63 = v862;
        if (v845 < v859)
          goto LABEL_131;
      }
      if (3 * v64 > 2 * v59)
      {
        *(_QWORD *)(result + 16) = v64;
        MEMORY[0x10] = v59 + 1;
      }
LABEL_131:
      if (v65 >= v63 && 3 * v63 > 2 * v65)
      {
        *(_QWORD *)(v67 + 16) = v63;
        *(_QWORD *)(v66 + 16) = v65 + 1;
      }
LABEL_134:
      v88 = v896;
      v89 = (uint64_t)(*((_QWORD *)&v896 + 1) - v896) >> 3;
      if ((uint64_t)(*((_QWORD *)&v896 + 1) - v896) < 1)
      {
LABEL_138:
        sub_1C58C8A08(v88, *((uint64_t **)&v88 + 1), v89, 0, 0);
      }
      else
      {
        v90 = (uint64_t)(*((_QWORD *)&v896 + 1) - v896) >> 3;
        while (1)
        {
          v91 = (uint64_t *)operator new(8 * v90, MEMORY[0x1E0DE4E10]);
          if (v91)
            break;
          v492 = v90 > 1;
          v90 >>= 1;
          if (!v492)
            goto LABEL_138;
        }
        v92 = v91;
        sub_1C58C8A08(v88, *((uint64_t **)&v88 + 1), v89, v91, v90);
        operator delete(v92);
      }
      v94 = (uint64_t **)*((_QWORD *)&v896 + 1);
      v93 = (uint64_t **)v896;
      v95 = v896;
      if ((_QWORD)v896 != *((_QWORD *)&v896 + 1))
      {
        do
        {
          v96 = *v93;
          if (!*((_BYTE *)*v93 + 25))
          {
            if (*((_BYTE *)v96 + 26))
            {
              v97 = v96[1];
              if (v97)
              {
                v98 = (uint64_t *)(v97 + 48);
                do
                {
                  v99 = *v98;
                  v100 = v99 - 24;
                  if (!v99)
                    v100 = 0;
                  v101 = *(unsigned __int8 *)(v100 + 16);
                  v98 = (uint64_t *)(v99 + 8);
                }
                while (v101 == 83);
                if (v101 == 94 && sub_1C58953C0((uint64_t)&v895, *v96, v97))
                  *((_BYTE *)*v93 + 24) = 1;
              }
            }
          }
          ++v93;
        }
        while (v93 != v94);
        v102 = (uint64_t **)*((_QWORD *)&v896 + 1);
        v93 = (uint64_t **)v896;
        v95 = v896;
        if ((_QWORD)v896 != *((_QWORD *)&v896 + 1))
        {
          do
          {
            v103 = *v93;
            if (!*((_BYTE *)*v93 + 25))
            {
              v104 = *v103;
              v105 = !v898 && v104 == 0;
              if (!v105 && sub_1C58953C0((uint64_t)&v895, v104, v103[1]))
                *((_BYTE *)*v93 + 24) = 1;
            }
            ++v93;
          }
          while (v93 != v102);
          v95 = *((_QWORD *)&v896 + 1);
          v93 = (uint64_t **)v896;
        }
      }
      v106 = v95 - (_QWORD)v93;
      if (v106 >= 9 && v901)
      {
        v108 = (char *)v93 + v106;
        v109 = *v93;
        *v93 = (uint64_t *)*((_QWORD *)v108 - 1);
        *((_QWORD *)v108 - 1) = v109;
      }
      v889 = 0;
      sub_1C58C6A78((uint64_t)&v888, (uint64_t)v850);
      memset(v958, 0, 24);
      v111 = v886 + 1;
      v110 = v886[1];
      v886[3] = (uint64_t)v958;
      sub_1C62B0A14((char *)v111, v110);
      v111[2] = 0;
      v112 = v887[0];
      v113 = *(void **)(v887[0] + 24);
      v43 = v851;
      if (v113)
      {
        *(_QWORD *)(v887[0] + 32) = v113;
        operator delete(v113);
      }
      *(_OWORD *)(v112 + 24) = *(_OWORD *)v958;
      *(_QWORD *)(v112 + 40) = *(_QWORD *)&v958[16];
      if ((a14 & 1) == 0)
      {
        memset(v958, 0, 24);
        sub_1C62B0C08(v886, (uint64_t)v958);
        v114 = (_QWORD *)v887[0];
        v115 = *(void **)v887[0];
        if (*(_QWORD *)v887[0])
        {
          *(_QWORD *)(v887[0] + 8) = v115;
          operator delete(v115);
          *v114 = 0;
          v114[1] = 0;
          v114[2] = 0;
        }
        *(_OWORD *)v114 = *(_OWORD *)v958;
        v114[2] = *(_QWORD *)&v958[16];
      }
      llvm::getPGOFuncName(v883, 0, (std::string *)v958);
      if (SHIBYTE(v893[3]) < 0)
        operator delete((void *)v893[1]);
      *(_OWORD *)&v893[1] = *(_OWORD *)v958;
      v893[3] = *(_QWORD *)&v958[16];
      v117 = (llvm::GlobalObject *)*((_QWORD *)v883 + 10);
      v868 = (llvm::GlobalObject *)((char *)v883 + 72);
      if (v117 != (llvm::GlobalObject *)((char *)v883 + 72))
      {
        v120 = 0;
        v121 = 0;
        v118 = 0;
        while (1)
        {
          if (v117)
            v122 = (char *)v117 - 24;
          else
            v122 = 0;
          v123 = (char *)*((_QWORD *)v122 + 5);
          if (v123 == v122 + 40)
          {
            v125 = 0;
          }
          else
          {
            if (v123)
              v124 = v123 - 24;
            else
              v124 = 0;
            if (v124[16] - 29 >= 0xB)
              v125 = 0;
            else
              v125 = v124;
          }
          v872 = v117;
          v126 = v125[16];
          if (v126 != 30)
            __asm { BR              X9 }
          if ((*((_DWORD *)v125 + 5) & 0x7FFFFFF) == 3)
            v127 = 2;
          else
            v127 = 1;
          LODWORD(v42) = 0;
          v128 = v121;
          do
          {
            v129 = llvm::Instruction::getSuccessor((llvm::Instruction *)v125, v42);
            if (!LODWORD(v897[3]))
              goto LABEL_224;
            v130 = ((v129 >> 4) ^ (v129 >> 9)) & (LODWORD(v897[3]) - 1);
            v131 = *(_QWORD *)(v897[1] + 16 * v130);
            if (v129 != v131)
            {
              v144 = 1;
              while (v131 != -4096)
              {
                v145 = v130 + v144++;
                v130 = v145 & (LODWORD(v897[3]) - 1);
                v131 = *(_QWORD *)(v897[1] + 16 * v130);
                if (v129 == v131)
                  goto LABEL_197;
              }
LABEL_224:
              v121 = v128;
              goto LABEL_225;
            }
LABEL_197:
            if ((_DWORD)v130 == LODWORD(v897[3]))
              goto LABEL_224;
            v132 = *(_QWORD *)(v897[1] + 16 * v130 + 8);
            if (!v132)
              goto LABEL_224;
            v133 = 0;
            v134 = *(_DWORD *)(v132 + 8);
            do
            {
              v135 = v134 >> (8 * v133);
              if (v128 >= v120)
              {
                v136 = &v128[-v118];
                v137 = (uint64_t)&v128[-v118 + 1];
                if (v137 < 0)
                  goto LABEL_1505;
                if (2 * (uint64_t)&v120[-v118] > (unint64_t)v137)
                  v137 = 2 * (_QWORD)&v120[-v118];
                if ((unint64_t)&v120[-v118] >= 0x3FFFFFFFFFFFFFFFLL)
                  v138 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v138 = v137;
                if (v138)
                  v139 = (unint64_t)operator new(v138);
                else
                  v139 = 0;
                v140 = &v136[v139];
                v141 = &v136[v139];
                *v141 = v135;
                v121 = v141 + 1;
                if (v128 == (char *)v118)
                {
                  v118 = (unint64_t)v140;
                }
                else
                {
                  v142 = &v128[~v118];
                  do
                  {
                    v143 = *--v128;
                    (v142--)[v139] = v143;
                  }
                  while (v128 != (char *)v118);
                  v128 = (char *)v118;
                  v118 = v139;
                }
                v120 = (char *)(v139 + v138);
                if (v128)
                  operator delete(v128);
              }
              else
              {
                *v128 = v135;
                v121 = v128 + 1;
              }
              ++v133;
              v128 = v121;
            }
            while (v133 != 4);
LABEL_225:
            v42 = (v42 + 1);
            v128 = v121;
          }
          while ((_DWORD)v42 != v127);
          v117 = (llvm::GlobalObject *)*((_QWORD *)v872 + 1);
          if (v117 == v868)
          {
            if (v121 == (char *)v118)
            {
              v119 = 0xFFFFFFFFLL;
              v43 = v851;
            }
            else
            {
              v146 = 0;
              v119 = 0xFFFFFFFFLL;
              v43 = v851;
              do
                v119 = dword_1C866F364[(v146++)[v118] ^ (unint64_t)v119] ^ (v119 >> 8);
              while (&v121[-v118] != v146);
            }
            goto LABEL_233;
          }
        }
      }
      v118 = 0;
      v119 = 0xFFFFFFFFLL;
LABEL_233:
      if (byte_1ED816858)
      {
        v152 = v119 | ((unint64_t)v889 << 56) | ((unint64_t)(-1431655765
                                                                                       * ((*(_DWORD *)(v887[0] + 8) - *(_DWORD *)v887[0]) >> 3)) << 48) | ((*((_QWORD *)&v896 + 1) - (_QWORD)v896) << 29);
      }
      else
      {
        v147 = 0;
        *(_QWORD *)v958 = v889;
        LODWORD(v148) = -1;
        do
          LODWORD(v148) = dword_1C866F364[(v958[v147++] ^ v148)] ^ (v148 >> 8);
        while (v147 != 8);
        v149 = 0;
        *(_QWORD *)v958 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v887[0] + 8) - *(_QWORD *)v887[0]) >> 3);
        do
          LODWORD(v148) = dword_1C866F364[(v958[v149++] ^ v148)] ^ (v148 >> 8);
        while (v149 != 8);
        v150 = 0;
        *(_QWORD *)v958 = 0xAAAAAAAAAAAAAAABLL
                        * ((uint64_t)(*(_QWORD *)(v887[0] + 32) - *(_QWORD *)(v887[0] + 24)) >> 3);
        do
          LODWORD(v148) = dword_1C866F364[(v958[v150++] ^ v148)] ^ (v148 >> 8);
        while (v150 != 8);
        v151 = 0;
        *(_QWORD *)v958 = (uint64_t)(*((_QWORD *)&v896 + 1) - v896) >> 3;
        do
          v148 = dword_1C866F364[(v958[v151++] ^ v148)] ^ (v148 >> 8);
        while (v151 != 8);
        v152 = v119 + (v148 << 28);
      }
      v153 = v152 & 0xFFFFFFFFFFFFFFFLL;
      v894 = v153;
      if (v884)
        v894 = v153 | 0x1000000000000000;
      if (v118)
        operator delete((void *)v118);
      v154 = a14;
      if (v906[1] && sub_1C58C6F24(v883, v885, v116))
      {
        if ((*((_BYTE *)v883 + 23) & 0x10) == 0)
        {
          v165 = 0;
          HIBYTE(v927) = 0;
          p_dst = &__dst;
          goto LABEL_270;
        }
        v155 = ***(_QWORD ***)v883;
        v156 = *(_QWORD *)(v155 + 152);
        v157 = *(unsigned int *)(v155 + 168);
        if ((_DWORD)v157)
        {
          LODWORD(v158) = (v157 - 1) & ((v883 >> 4) ^ (v883 >> 9));
          v159 = v156 + 16 * v158;
          v160 = *(llvm::GlobalObject **)v159;
          if (*(llvm::GlobalObject **)v159 == v883)
            goto LABEL_262;
          v161 = 1;
          while (v160 != (llvm::GlobalObject *)-4096)
          {
            v162 = v158 + v161++;
            v158 = v162 & (v157 - 1);
            v160 = *(llvm::GlobalObject **)(v156 + 16 * v158);
            if (v160 == v883)
            {
              v159 = v156 + 16 * v158;
              goto LABEL_262;
            }
          }
        }
        v159 = v156 + 16 * v157;
LABEL_262:
        v164 = *(unint64_t **)(v159 + 8);
        v167 = *v164;
        v166 = v164 + 2;
        v165 = v167;
        if (v167 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1505;
        if (v165 >= 0x17)
        {
          v169 = (v165 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v165 | 7) != 0x17)
            v169 = v165 | 7;
          v170 = v169 + 1;
          p_dst = (__n128 *)operator new(v169 + 1);
          v927 = (const char *)(v170 | 0x8000000000000000);
          __dst.n128_u64[0] = (unint64_t)p_dst;
          __dst.n128_u64[1] = v165;
        }
        else
        {
          HIBYTE(v927) = v165;
          p_dst = &__dst;
          if (!v165)
          {
LABEL_270:
            p_dst->n128_u8[v165] = 0;
            if ((*((_BYTE *)v883 + 23) & 0x10) == 0)
            {
              v180 = 0;
              v181 = &byte_1C871356D;
              goto LABEL_279;
            }
            v171 = ***(_QWORD ***)v883;
            v172 = *(_QWORD *)(v171 + 152);
            v173 = *(unsigned int *)(v171 + 168);
            if ((_DWORD)v173)
            {
              LODWORD(v174) = (v173 - 1) & ((v883 >> 4) ^ (v883 >> 9));
              v175 = v172 + 16 * v174;
              v176 = *(llvm::GlobalObject **)v175;
              if (*(llvm::GlobalObject **)v175 == v883)
              {
LABEL_278:
                v179 = *(_QWORD **)(v175 + 8);
                v182 = *v179;
                v181 = (char *)(v179 + 2);
                v180 = v182;
LABEL_279:
                LOWORD(v944) = 773;
                *(_QWORD *)&v942 = v181;
                *((_QWORD *)&v942 + 1) = v180;
                *(_QWORD *)&v943 = ".";
                *(_QWORD *)v958 = &v942;
                *(_QWORD *)&v958[16] = &v894;
                *(_WORD *)&v958[32] = 3074;
                llvm::Twine::str((llvm::Twine *)v958, &v930);
                *(_WORD *)&v958[32] = 260;
                *(_QWORD *)v958 = &v930;
                llvm::Value::setName((uint64_t ***)v883, (uint64_t)v958);
                *(_WORD *)&v958[32] = 260;
                *(_QWORD *)v958 = &__dst;
                llvm::GlobalAlias::create(4, (uint64_t)v958, v883);
                if (v893[3] >= 0)
                  v183 = HIBYTE(v893[3]) & 0x7F;
                else
                  v183 = v893[2];
                sub_1C484371C((uint64_t)&v954, v183 + 1);
                if ((v954.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v184 = &v954;
                else
                  v184 = (std::string *)v954.__r_.__value_.__r.__words[0];
                if (v183)
                {
                  if (v893[3] >= 0)
                    v185 = &v893[1];
                  else
                    v185 = (_QWORD *)v893[1];
                  memmove(v184, v185, v183);
                }
                *(_WORD *)((char *)&v184->__r_.__value_.__l.__data_ + v183) = 46;
                *(_QWORD *)v958 = &v954;
                *(_QWORD *)&v958[16] = &v894;
                *(_WORD *)&v958[32] = 3076;
                llvm::Twine::str((llvm::Twine *)v958, &v942);
                if (SHIBYTE(v893[3]) < 0)
                  operator delete((void *)v893[1]);
                *(_OWORD *)&v893[1] = v942;
                v893[3] = v943;
                BYTE7(v943) = 0;
                LOBYTE(v942) = 0;
                if (SHIBYTE(v954.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v954.__r_.__value_.__l.__data_);
                v187 = *((_QWORD *)v883 + 5);
                v186 = (uint64_t **)*((_QWORD *)v883 + 6);
                if (v186)
                {
                  v922.__r_.__value_.__r.__words[0] = *((_QWORD *)v883 + 6);
                  v193 = *v186;
                  v194 = *v193;
                  LOWORD(v944) = 773;
                  *(_QWORD *)&v942 = v193 + 9;
                  *((_QWORD *)&v942 + 1) = v194;
                  *(_QWORD *)&v943 = ".";
                  *(_QWORD *)v958 = &v942;
                  *(_QWORD *)&v958[16] = &v894;
                  *(_WORD *)&v958[32] = 3074;
                  llvm::Twine::str((llvm::Twine *)v958, &v954);
                  if ((v954.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v195 = &v954;
                  else
                    v195 = (std::string *)v954.__r_.__value_.__r.__words[0];
                  if ((v954.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = *((_BYTE *)&v954.__r_.__value_.__s + 23) & 0x7F;
                  else
                    size = v954.__r_.__value_.__l.__size_;
                  inserted = llvm::Module::getOrInsertComdat(v187, (unsigned __int8 *)v195, size);
                  *((_DWORD *)inserted + 2) = *(_DWORD *)(v922.__r_.__value_.__r.__words[0] + 8);
                  v198 = sub_1C629475C(v885, &v922);
                  if (v198)
                  {
                    v199 = v198;
                    v200 = v198;
                    do
                      v200 = (_QWORD *)*v200;
                    while (v200 && v200[2] == v922.__r_.__value_.__r.__words[0]);
                    if (v200 != v198)
                    {
                      do
                      {
                        llvm::GlobalObject::setComdat((llvm::GlobalObject *)v199[3], (llvm::Comdat *)inserted);
                        v199 = (_QWORD *)*v199;
                      }
                      while (v199 != v200);
                    }
                  }
                  if (SHIBYTE(v954.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v954.__r_.__value_.__l.__data_);
                  v154 = a14;
                  v43 = v851;
                }
                else
                {
                  if (SHIBYTE(v932) >= 0)
                    v188 = (unsigned __int8 *)&v930;
                  else
                    v188 = (unsigned __int8 *)v930;
                  if (SHIBYTE(v932) >= 0)
                    v189 = HIBYTE(v932) & 0x7F;
                  else
                    v189 = v931;
                  v190 = llvm::Module::getOrInsertComdat(*((_QWORD *)v883 + 5), v188, v189);
                  v191 = v883;
                  v192 = *((_DWORD *)v883 + 8);
                  *((_DWORD *)v883 + 8) = v192 & 0xFFFFFFF0 | 3;
                  v43 = v851;
                  if ((v192 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v191) & 1) == 0)
                    *((_DWORD *)v191 + 8) |= 0x4000u;
                  llvm::GlobalObject::setComdat(v883, (llvm::Comdat *)v190);
                  v154 = a14;
                }
                if (SHIBYTE(v932) < 0)
                  operator delete(v930);
                if (SHIBYTE(v927) < 0)
                  operator delete((void *)__dst.n128_u64[0]);
                goto LABEL_324;
              }
              v177 = 1;
              while (v176 != (llvm::GlobalObject *)-4096)
              {
                v178 = v174 + v177++;
                v174 = v178 & (v173 - 1);
                v176 = *(llvm::GlobalObject **)(v172 + 16 * v174);
                if (v176 == v883)
                {
                  v175 = v172 + 16 * v174;
                  goto LABEL_278;
                }
              }
            }
            v175 = v172 + 16 * v173;
            goto LABEL_278;
          }
        }
        memmove(p_dst, v166, v165);
        goto LABEL_270;
      }
LABEL_324:
      memset(v903, 0, sizeof(v903));
      v904 = v154;
      v201 = *(llvm::LLVMContext **)v880[1];
      llvm::IndexedInstrProfReader::getInstrProfRecord(v855, v894, (uint64_t)&__dst);
      if ((v929 & 1) == 0 || (v202 = (_QWORD *)__dst.n128_u64[0], __dst.n128_u64[0] = 0, !v202))
      {
        v865 = v201;
        sub_1C58C9490((uint64_t)&v903[8], &__dst);
        v203 = *(uint64_t **)&v903[8];
        v204 = *(_QWORD *)&v903[16] != *(_QWORD *)&v903[8];
        if (((*(_QWORD *)&v903[16] - *(_QWORD *)&v903[8]) & 0x7FFFFFFF8) != 0)
        {
          v205 = 0;
          v206 = ((*(_QWORD *)&v903[16] - *(_QWORD *)&v903[8]) >> 3);
          do
          {
            v207 = *v203++;
            v205 += v207;
            if (v207 != -1)
              v204 = 0;
            --v206;
          }
          while (v206);
        }
        else
        {
          v205 = 0;
        }
        v869 = v205 == 0;
        v208 = v897[1];
        v209 = LODWORD(v897[3]);
        if (LODWORD(v897[3]))
        {
          v211 = 0;
          v212 = LODWORD(v897[3]) - 1;
          for (i = 1; ; ++i)
          {
            v214 = v211;
            v215 = *(_QWORD *)(v897[1] + 16 * v211);
            if (!v215)
              break;
            if (v215 == -4096)
              goto LABEL_339;
            v216 = v214 + i;
            v211 = v216 & v212;
          }
          v209 = v214;
LABEL_339:
          v217 = 0;
          *(_DWORD *)(*(_QWORD *)(v897[1] + 16 * v209 + 8) + 32) = 2;
          for (j = 1; ; ++j)
          {
            v219 = v217;
            v220 = *(_QWORD *)(v208 + 16 * v217);
            if (!v220)
            {
              v210 = v208 + 16 * v219;
              goto LABEL_344;
            }
            if (v220 == -4096)
              break;
            v221 = v219 + j;
            v217 = v221 & v212;
          }
          v210 = v897[1] + 16 * LODWORD(v897[3]);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v897[1] + 8) + 32) = 2;
          v210 = v897[1] + 16 * LODWORD(v897[3]);
        }
LABEL_344:
        *(_DWORD *)(*(_QWORD *)(v210 + 8) + 28) = 2;
        v222 = (uint64_t *)*((_QWORD *)&v896 + 1);
        v223 = (uint64_t *)v896;
        v224 = *((_QWORD *)&v896 + 1) - v896;
        if (*((_QWORD *)&v896 + 1) == (_QWORD)v896)
        {
          v42 = 0;
          goto LABEL_368;
        }
        if (v224 < 0)
          goto LABEL_1505;
        v225 = v224 >> 3;
        v226 = (char *)operator new(v224);
        v227 = &v226[8 * v225];
        v42 = (std::string::size_type)v226;
        do
        {
          v228 = *v223;
          if (v226 >= v227)
          {
            v229 = (uint64_t)&v226[-v42] >> 3;
            v230 = v229 + 1;
            if ((unint64_t)(v229 + 1) >> 61)
              goto LABEL_1505;
            if ((uint64_t)&v227[-v42] >> 2 > v230)
              v230 = (uint64_t)&v227[-v42] >> 2;
            if ((unint64_t)&v227[-v42] >= 0x7FFFFFFFFFFFFFF8)
              v231 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v231 = v230;
            if (v231)
            {
              if (v231 >> 61)
                goto LABEL_1506;
              v232 = (char *)operator new(8 * v231);
            }
            else
            {
              v232 = 0;
            }
            v233 = &v232[8 * v229];
            *(_QWORD *)v233 = v228;
            v234 = v233 + 8;
            while (v226 != (char *)v42)
            {
              v235 = *((_QWORD *)v226 - 1);
              v226 -= 8;
              *((_QWORD *)v233 - 1) = v235;
              v233 -= 8;
            }
            v227 = &v232[8 * v231];
            if (v42)
              operator delete((void *)v42);
            v42 = (std::string::size_type)v233;
            v226 = v234;
          }
          else
          {
            *(_QWORD *)v226 = v228;
            v226 += 8;
          }
          ++v223;
        }
        while (v223 != v222);
        if ((char *)v42 == v226)
        {
LABEL_368:
          v236 = 0;
          v237 = 0;
LABEL_369:
          v239 = *((_QWORD *)&v896 + 1);
          v238 = v896;
          for (k = v236; v238 != v239; v238 += 8)
          {
            v276 = *(_QWORD **)v238;
            if (!*(_BYTE *)(*(_QWORD *)v238 + 25))
            {
              v277 = v897[1];
              if (LODWORD(v897[3]))
              {
                v278 = LODWORD(v897[3]) - 1;
                v279 = ((*v276 >> 4) ^ (*v276 >> 9)) & (LODWORD(v897[3]) - 1);
                v280 = *(_QWORD *)(v897[1] + 16 * v279);
                if (*v276 != v280)
                {
                  v288 = 1;
                  while (v280 != -4096)
                  {
                    v289 = v279 + v288++;
                    v279 = v289 & v278;
                    v280 = *(_QWORD *)(v897[1] + 16 * v279);
                    if (*v276 == v280)
                      goto LABEL_421;
                  }
                  v279 = LODWORD(v897[3]);
                }
LABEL_421:
                v281 = v276[1];
                v282 = *(_QWORD *)(v897[1] + 16 * v279 + 8);
                LODWORD(v279) = ((v281 >> 4) ^ (v281 >> 9)) & v278;
                v283 = *(_QWORD *)(v897[1] + 16 * v279);
                if (v281 == v283)
                {
                  v277 = v897[1] + 16 * v279;
                }
                else
                {
                  v290 = 1;
                  while (v283 != -4096)
                  {
                    v291 = v279 + v290++;
                    v279 = v291 & v278;
                    v283 = *(_QWORD *)(v897[1] + 16 * v279);
                    if (v281 == v283)
                    {
                      v277 = v897[1] + 16 * v279;
                      goto LABEL_441;
                    }
                  }
                  v277 = v897[1] + 16 * LODWORD(v897[3]);
LABEL_441:
                  v236 = k;
                }
              }
              else
              {
                v282 = *(_QWORD *)(v897[1] + 8);
              }
              v284 = *(_QWORD *)(v277 + 8);
              v285 = *(unsigned int *)(v282 + 80);
              if (v285 >= *(unsigned int *)(v282 + 84))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v282 + 72, v282 + 88, v285 + 1, 8);
                v236 = k;
                v285 = *(unsigned int *)(v282 + 80);
              }
              *(_QWORD *)(*(_QWORD *)(v282 + 72) + 8 * v285) = v276;
              ++*(_DWORD *)(v282 + 80);
              ++*(_DWORD *)(v282 + 32);
              v286 = *(_QWORD **)v238;
              v287 = *(unsigned int *)(v284 + 48);
              if (v287 >= *(unsigned int *)(v284 + 52))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v284 + 40, v284 + 56, v287 + 1, 8);
                v236 = k;
                v287 = *(unsigned int *)(v284 + 48);
              }
              *(_QWORD *)(*(_QWORD *)(v284 + 40) + 8 * v287) = v286;
              ++*(_DWORD *)(v284 + 48);
              ++*(_DWORD *)(v284 + 28);
            }
          }
          if (v42)
          {
            operator delete((void *)v42);
            v236 = k;
          }
          v240 = v889 + ((unint64_t)((char *)v237 - (char *)v236) >> 3);
          v241 = *(_QWORD *)&v903[8];
          v242 = *(_QWORD *)&v903[16] - *(_QWORD *)&v903[8];
          v243 = (uint64_t)(*(_QWORD *)&v903[16] - *(_QWORD *)&v903[8]) >> 3;
          if (v243 == v240)
          {
            v244 = *((_QWORD *)v880[0] + 10);
            if (v244)
              v245 = v244 - 24;
            else
              v245 = 0;
            if (v236 == v237)
            {
              v246 = 0;
            }
            else
            {
              v306 = 0;
              v307 = v236;
              do
              {
                v308 = *v307;
                if (LODWORD(v897[3]))
                {
                  LODWORD(v309) = ((v308 >> 4) ^ (v308 >> 9)) & (LODWORD(v897[3]) - 1);
                  v310 = (uint64_t *)(v897[1] + 16 * v309);
                  v311 = *v310;
                  if (v308 == *v310)
                    goto LABEL_469;
                  v312 = 1;
                  while (v311 != -4096)
                  {
                    v313 = v309 + v312++;
                    v309 = v313 & (LODWORD(v897[3]) - 1);
                    v311 = *(_QWORD *)(v897[1] + 16 * v309);
                    if (v308 == v311)
                    {
                      v310 = (uint64_t *)(v897[1] + 16 * v309);
                      goto LABEL_469;
                    }
                  }
                  v310 = (uint64_t *)(v897[1] + 16 * LODWORD(v897[3]));
                }
                else
                {
                  v310 = (uint64_t *)v897[1];
                }
LABEL_469:
                v246 = v306 + 1;
                v314 = *(_QWORD *)(v241 + 8 * v306);
                v315 = v310[1];
                if (v314)
                  v316 = 0;
                else
                  v316 = v308 == v245;
                if (v316)
                  v314 = 1;
                *(_QWORD *)(v315 + 16) = v314;
                *(_BYTE *)(v315 + 24) = 1;
                ++v307;
                v306 = v246;
              }
              while (v307 != v237);
            }
            *(_DWORD *)&v903[4] = v242 >> 3;
            *(_DWORD *)v903 = v246;
            v42 = *((_QWORD *)&v896 + 1);
            for (m = (uint64_t *)v896; ; ++m)
            {
              if (m == (uint64_t *)v42)
                goto LABEL_442;
              v248 = *m;
              if (!*(_BYTE *)(*m + 25) && !*(_BYTE *)(v248 + 24))
                break;
LABEL_406:
              ;
            }
            v249 = *(_QWORD *)v248;
            v250 = v897[1];
            v251 = v897[3];
            v252 = v897[1];
            v253 = (uint64_t *)v897[1];
            if (LODWORD(v897[3]))
            {
              LODWORD(v254) = ((v249 >> 4) ^ (v249 >> 9)) & (LODWORD(v897[3]) - 1);
              v253 = (uint64_t *)(v897[1] + 16 * v254);
              v255 = *v253;
              if (v249 == *v253)
              {
LABEL_384:
                v252 = v897[1] + 16 * LODWORD(v897[3]);
              }
              else
              {
                v272 = 1;
                while (v255 != -4096)
                {
                  v273 = v254 + v272++;
                  v254 = v273 & (LODWORD(v897[3]) - 1);
                  v255 = *(_QWORD *)(v897[1] + 16 * v254);
                  if (v249 == v255)
                  {
                    v253 = (uint64_t *)(v897[1] + 16 * v254);
                    v236 = k;
                    goto LABEL_384;
                  }
                }
                v252 = v897[1] + 16 * LODWORD(v897[3]);
                v253 = (uint64_t *)v252;
                v236 = k;
              }
            }
            v256 = v253[1];
            if (*(_BYTE *)(v256 + 24) && *(_DWORD *)(v256 + 80) == 1)
            {
              *(_QWORD *)(v248 + 32) = *(_QWORD *)(v256 + 16);
              *(_BYTE *)(v248 + 27) = 1;
              *(_QWORD *)v958 = 0;
              v257 = sub_1C49F21C0(v250, v251, v249, v958);
              v258 = *(_QWORD *)v958;
              if (!v257)
                v258 = v252;
              --*(_DWORD *)(*(_QWORD *)(v258 + 8) + 32);
              v259 = *(_QWORD *)(v248 + 8);
            }
            else
            {
              v259 = *(_QWORD *)(v248 + 8);
              v260 = (uint64_t *)v252;
              if (LODWORD(v897[3]))
              {
                LODWORD(v261) = ((v259 >> 4) ^ (v259 >> 9)) & (LODWORD(v897[3]) - 1);
                v260 = (uint64_t *)(v897[1] + 16 * v261);
                v262 = *v260;
                if (v259 != *v260)
                {
                  v274 = 1;
                  while (v262 != -4096)
                  {
                    v275 = v261 + v274++;
                    v261 = v275 & (LODWORD(v897[3]) - 1);
                    v262 = *(_QWORD *)(v897[1] + 16 * v261);
                    if (v259 == v262)
                    {
                      v260 = (uint64_t *)(v897[1] + 16 * v261);
                      goto LABEL_417;
                    }
                  }
                  v260 = (uint64_t *)v252;
LABEL_417:
                  v236 = k;
                }
              }
              v263 = v260[1];
              if (!*(_BYTE *)(v263 + 24) || *(_DWORD *)(v263 + 48) != 1)
                goto LABEL_400;
              *(_QWORD *)(v248 + 32) = *(_QWORD *)(v263 + 16);
              *(_BYTE *)(v248 + 27) = 1;
              *(_QWORD *)v958 = 0;
              v264 = sub_1C49F21C0(v250, v251, v249, v958);
              v265 = *(_QWORD *)v958;
              if (!v264)
                v265 = v252;
              --*(_DWORD *)(*(_QWORD *)(v265 + 8) + 32);
            }
            *(_QWORD *)v958 = 0;
            v266 = sub_1C49F21C0(v897[1], v897[3], v259, v958);
            v267 = *(_QWORD *)v958;
            if (!v266)
              v267 = v252;
            --*(_DWORD *)(*(_QWORD *)(v267 + 8) + 28);
            v236 = k;
LABEL_400:
            if (!*(_BYTE *)(v248 + 27))
            {
              *(_QWORD *)(v248 + 32) = 0;
              *(_BYTE *)(v248 + 27) = 1;
              *(_QWORD *)v958 = 0;
              v268 = sub_1C49F21C0(v897[1], v897[3], v249, v958);
              v269 = *(_QWORD *)v958;
              if (!v268)
                v269 = v252;
              --*(_DWORD *)(*(_QWORD *)(v269 + 8) + 32);
              *(_QWORD *)v958 = 0;
              v270 = sub_1C49F21C0(v897[1], v897[3], v259, v958);
              v236 = k;
              v271 = *(_QWORD *)v958;
              if (!v270)
                v271 = v252;
              --*(_DWORD *)(*(_QWORD *)(v271 + 8) + 28);
            }
            goto LABEL_406;
          }
LABEL_442:
          if (v236)
            operator delete(v236);
          v43 = v851;
          if (v243 == v240)
          {
            v292 = 88;
            if (!v904)
              v292 = 80;
            v902 = *(_QWORD *)(*(_QWORD *)(v855 + v292) + 56);
            v293 = 1;
            goto LABEL_592;
          }
          if (*((char *)v880[1] + 191) >= 0)
            v294 = (char *)v880[1] + 168;
          else
            v294 = (char *)*((_QWORD *)v880[1] + 21);
          v930 = "Inconsistent number of counts in ";
          WORD4(v933) = 259;
          if ((*((_BYTE *)v880[0] + 23) & 0x10) == 0)
          {
            v355 = 0;
            *((_BYTE *)&v922.__r_.__value_.__s + 23) = 0;
            v358 = &v922;
LABEL_570:
            v358->__r_.__value_.__s.__data_[v355] = 0;
            v361 = BYTE8(v933);
            if (BYTE8(v933) == 1)
            {
              v364 = &v922;
              *(_QWORD *)&v942 = &v922;
              v943 = *(_OWORD *)&v918.__r_.__value_.__l.__data_;
              LOWORD(v944) = 260;
              *(_DWORD *)((char *)&v944 + 2) = v915.__r_.__value_.__l.__data_;
              HIWORD(v944) = WORD2(v915.__r_.__value_.__r.__words[0]);
              v362 = 4;
              v365 = *((_QWORD *)&v942 + 1);
            }
            else
            {
              if (!BYTE8(v933))
              {
                v362 = 0;
                LOWORD(v944) = 256;
                v363 = 1;
                goto LABEL_578;
              }
              v364 = (std::string *)&v942;
              v366 = v930;
              v362 = 2;
              if (BYTE9(v933) != 1)
              {
                v361 = 2;
                v366 = &v930;
              }
              *(_QWORD *)&v942 = v366;
              *((_QWORD *)&v942 + 1) = v931;
              *(_QWORD *)&v943 = &v922;
              LOBYTE(v944) = v361;
              v365 = 4;
              BYTE1(v944) = 4;
            }
            *(_QWORD *)v958 = v364;
            *(_QWORD *)&v958[8] = v365;
            v363 = 3;
            *(_QWORD *)&v958[16] = ": the profile may be stale or there is a function name collision.";
LABEL_578:
            v958[32] = v362;
            v958[33] = v363;
            LODWORD(v954.__r_.__value_.__r.__words[1]) = 19;
            v954.__r_.__value_.__s.__data_[12] = 1;
            v954.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E814E730;
            v954.__r_.__value_.__r.__words[2] = (std::string::size_type)v294;
            v955 = v958;
            llvm::LLVMContext::diagnose((uint64_t)v865, (const llvm::DiagnosticInfo *)&v954);
            if (SHIBYTE(v922.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v922.__r_.__value_.__l.__data_);
            goto LABEL_591;
          }
          v295 = ***(_QWORD ***)v880[0];
          v296 = *(_QWORD *)(v295 + 152);
          v297 = *(unsigned int *)(v295 + 168);
          if ((_DWORD)v297)
          {
            LODWORD(v298) = (v297 - 1) & ((LODWORD(v880[0]) >> 4) ^ (LODWORD(v880[0]) >> 9));
            v299 = v296 + 16 * v298;
            v300 = *(void **)v299;
            if (*(void **)v299 == v880[0])
              goto LABEL_561;
            v301 = 1;
            while (v300 != (void *)-4096)
            {
              v302 = v298 + v301++;
              v298 = v302 & (v297 - 1);
              v300 = *(void **)(v296 + 16 * v298);
              if (v300 == v880[0])
              {
                v299 = v296 + 16 * v298;
                goto LABEL_561;
              }
            }
          }
          v299 = v296 + 16 * v297;
LABEL_561:
          v354 = *(unint64_t **)(v299 + 8);
          v357 = *v354;
          v356 = v354 + 2;
          v355 = v357;
          if (v357 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1505;
          if (v355 >= 0x17)
          {
            v359 = (v355 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v355 | 7) != 0x17)
              v359 = v355 | 7;
            v360 = v359 + 1;
            v358 = (std::string *)operator new(v359 + 1);
            v922.__r_.__value_.__r.__words[2] = v360 | 0x8000000000000000;
            v922.__r_.__value_.__r.__words[0] = (std::string::size_type)v358;
            v922.__r_.__value_.__l.__size_ = v355;
          }
          else
          {
            *((_BYTE *)&v922.__r_.__value_.__s + 23) = v355;
            v358 = &v922;
            if (!v355)
              goto LABEL_569;
          }
          memmove(v358, v356, v355);
LABEL_569:
          v43 = v851;
          goto LABEL_570;
        }
        v317 = 0;
        v237 = 0;
        v236 = 0;
        v318 = (_QWORD *)v42;
        while (1)
        {
          v319 = *v318;
          if (*(_BYTE *)(*v318 + 24) || *(_BYTE *)(v319 + 25))
            goto LABEL_481;
          v321 = *(_QWORD *)v319;
          v320 = *(_QWORD *)(v319 + 8);
          if (*(_QWORD *)v319)
          {
            if (v320)
            {
              v322 = v321 + 40;
              v323 = *(_QWORD *)(v321 + 40);
              if (v323 == v321 + 40)
              {
                v325 = 0;
              }
              else
              {
                if (v323)
                  v324 = v323 - 24;
                else
                  v324 = 0;
                if (*(unsigned __int8 *)(v324 + 16) - 29 >= 0xB)
                  v325 = 0;
                else
                  v325 = v324;
              }
              v326 = *(unsigned __int8 *)(v325 + 16);
              if (v326 != 30)
                __asm { BR              X10 }
              if ((*(_DWORD *)(v325 + 20) & 0x7FFFFFF) == 3)
              {
                if (*(_BYTE *)(v319 + 26))
                {
                  v874 = v236;
                  SuccessorNumber = llvm::GetSuccessorNumber(v321, v320);
                  if (*(_BYTE *)(v325 + 16) == 32
                    || (memset(v958, 0, 36),
                        v958[36] = 1,
                        LOWORD(v944) = 257,
                        (v328 = llvm::SplitCriticalEdge((llvm::Instruction *)v325, SuccessorNumber, (uint64_t)v958, (llvm::Twine *)&v942)) == 0))
                  {
                    v236 = v874;
                    goto LABEL_481;
                  }
                  v329 = v328;
                  sub_1C58C849C((uint64_t)&v895, v321, v328, 0);
                  *(_BYTE *)(sub_1C58C849C((uint64_t)&v895, v329, v320, 0) + 24) = 1;
                  *(_BYTE *)(v319 + 25) = 1;
                  v322 = v329 + 40;
                  n = *(_QWORD *)(v329 + 48);
                  if (n == v329 + 40)
                  {
                    v236 = v874;
                    goto LABEL_481;
                  }
                  v236 = v874;
                  while (1)
                  {
                    v331 = n - 24;
                    if (!n)
                      v331 = 0;
                    if (*(_BYTE *)(v331 + 16) != 83)
                      break;
                    n = *(_QWORD *)(n + 8);
                    if (n == v322)
                      goto LABEL_481;
                  }
                  v340 = *(unsigned __int8 *)(n - 8) - 38;
                  v492 = v340 > 0x38;
                  v341 = (1 << v340) & 0x100060000000001;
                  if (!v492 && v341 != 0)
                    n = *(_QWORD *)(n + 8);
                  v321 = v329;
                }
                else
                {
                  v322 = v320 + 40;
                  for (n = *(_QWORD *)(v320 + 48); ; n = *(_QWORD *)(n + 8))
                  {
                    if (n == v322)
                      goto LABEL_481;
                    v332 = n - 24;
                    if (!n)
                      v332 = 0;
                    if (*(_BYTE *)(v332 + 16) != 83)
                      break;
                  }
                  v337 = *(unsigned __int8 *)(n - 8) - 38;
                  v492 = v337 > 0x38;
                  v338 = (1 << v337) & 0x100060000000001;
                  if (!v492 && v338 != 0)
                    n = *(_QWORD *)(n + 8);
                  v321 = *(_QWORD *)(v319 + 8);
                }
              }
              else
              {
                for (n = *(_QWORD *)(v321 + 48); ; n = *(_QWORD *)(n + 8))
                {
                  if (n == v322)
                    goto LABEL_481;
                  v333 = n - 24;
                  if (!n)
                    v333 = 0;
                  if (*(_BYTE *)(v333 + 16) != 83)
                    break;
                }
                v334 = *(unsigned __int8 *)(n - 8) - 38;
                v492 = v334 > 0x38;
                v335 = (1 << v334) & 0x100060000000001;
                if (!v492 && v335 != 0)
                  n = *(_QWORD *)(n + 8);
              }
              if (v322 == n)
                goto LABEL_481;
            }
          }
          else
          {
            v321 = *(_QWORD *)(v319 + 8);
            if (!v320)
              goto LABEL_481;
          }
          if (v237 >= v317)
          {
            v343 = v237 - v236;
            v344 = v343 + 1;
            if ((unint64_t)(v343 + 1) >> 61)
              goto LABEL_1505;
            if (((char *)v317 - (char *)v236) >> 2 > v344)
              v344 = ((char *)v317 - (char *)v236) >> 2;
            if ((unint64_t)((char *)v317 - (char *)v236) >= 0x7FFFFFFFFFFFFFF8)
              v345 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v345 = v344;
            if (v345)
            {
              if (v345 >> 61)
                goto LABEL_1506;
              v346 = v236;
              v347 = (char *)operator new(8 * v345);
              v236 = v346;
            }
            else
            {
              v347 = 0;
            }
            v348 = (uint64_t *)&v347[8 * v343];
            *v348 = v321;
            v349 = v348 + 1;
            if (v237 != v236)
            {
              do
              {
                v350 = *--v237;
                *--v348 = v350;
              }
              while (v237 != v236);
              v237 = v236;
            }
            v236 = v348;
            v317 = (uint64_t *)&v347[8 * v345];
            if (v237)
            {
              v351 = v237;
              v352 = v317;
              v353 = v348;
              operator delete(v351);
              v236 = v353;
              v317 = v352;
            }
            v237 = v349;
          }
          else
          {
            *v237++ = v321;
          }
LABEL_481:
          if (++v318 == (_QWORD *)v226)
            goto LABEL_369;
        }
      }
      *(_QWORD *)v958 = v880;
      *(_QWORD *)&v958[8] = v201;
      if ((*(unsigned int (**)(_QWORD *, void *))(*v202 + 48))(v202, &llvm::ErrorList::ID))
      {
        v303 = (std::string::size_type *)v202[1];
        v304 = (std::string::size_type *)v202[2];
        if (v303 == v304)
        {
          v305 = 0;
        }
        else
        {
          v305 = 0;
          do
          {
            v930 = v305;
            v367 = *v303;
            *v303 = 0;
            v922.__r_.__value_.__r.__words[0] = v367;
            sub_1C58C94E8(&v954, &v922, (uint64_t)v958);
            sub_1C6174794((char **)&v930, &v954.__r_.__value_.__l.__data_, &v942);
            v305 = (void *)v942;
            *(_QWORD *)&v942 = 0;
            if (v954.__r_.__value_.__r.__words[0])
              (*(void (**)(std::string::size_type))(*(_QWORD *)v954.__r_.__value_.__l.__data_ + 8))(v954.__r_.__value_.__r.__words[0]);
            v368 = v922.__r_.__value_.__r.__words[0];
            v922.__r_.__value_.__r.__words[0] = 0;
            if (v368)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v368 + 8))(v368);
            if (v930)
              (*(void (**)(void *))(*(_QWORD *)v930 + 8))(v930);
            ++v303;
          }
          while (v303 != v304);
        }
        v918.__r_.__value_.__r.__words[0] = (std::string::size_type)v305;
        v43 = v851;
      }
      else
      {
        *(_QWORD *)&v942 = v202;
        sub_1C58C94E8(&v918, &v942, (uint64_t)v958);
        v202 = (_QWORD *)v942;
        if (!(_QWORD)v942)
          goto LABEL_590;
      }
      (*(void (**)(_QWORD *))(*v202 + 8))(v202);
LABEL_590:
      v869 = 0;
      v204 = 0;
LABEL_591:
      v293 = 0;
LABEL_592:
      if ((v929 & 1) != 0)
      {
        v369 = __dst.n128_u64[0];
        __dst.n128_u64[0] = 0;
        if (v369)
          (*(void (**)(unint64_t))(*(_QWORD *)v369 + 8))(v369);
      }
      else
      {
        sub_1C62AFE18((uint64_t)&__dst);
      }
      if (!v293)
        goto LABEL_871;
      if (v869)
      {
        llvm::Function::setEntryCount(v850, 0, 0, 0);
        v38 = (void *)v853;
        if (!v902)
          goto LABEL_872;
        if (v849 < v843)
        {
          *(_QWORD *)v849 = v850;
          v849 += 8;
          goto LABEL_872;
        }
        v418 = (v849 - (char *)v852) >> 3;
        v419 = v418 + 1;
        if (!((unint64_t)(v418 + 1) >> 61))
        {
          if ((v843 - (char *)v852) >> 2 > v419)
            v419 = (v843 - (char *)v852) >> 2;
          if ((unint64_t)(v843 - (char *)v852) >= 0x7FFFFFFFFFFFFFF8)
            v420 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v420 = v419;
          if (v420)
          {
            if (v420 >> 61)
              goto LABEL_1506;
            v421 = (char *)operator new(8 * v420);
          }
          else
          {
            v421 = 0;
          }
          v502 = (uint64_t ****)&v421[8 * v418];
          *v502 = v850;
          v503 = (char *)(v502 + 1);
          for (ii = v849; ii != (char *)v852; ii -= 8)
          {
            v505 = (uint64_t ***)*((_QWORD *)ii - 1);
            *--v502 = v505;
          }
          v843 = &v421[8 * v420];
          if (v852)
            operator delete(v852);
          v849 = v503;
          v852 = v502;
          goto LABEL_871;
        }
        goto LABEL_1505;
      }
      if (v204)
      {
        if (*(_BYTE *)(a13 + 24))
        {
          v413 = *(_QWORD *)(a13 + 16);
          if (v413)
            llvm::Function::setEntryCount(v850, 3 * v413, 0, 0);
        }
        v414 = v851;
        if (v851 < v842)
        {
          *(_QWORD *)v851 = v850;
          v43 = v851 + 8;
          goto LABEL_871;
        }
        v422 = (v851 - v846) >> 3;
        v423 = v422 + 1;
        if (!((unint64_t)(v422 + 1) >> 61))
        {
          if ((v842 - v846) >> 2 > v423)
            v423 = (v842 - v846) >> 2;
          if ((unint64_t)(v842 - v846) >= 0x7FFFFFFFFFFFFFF8)
            v424 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v424 = v423;
          if (v424)
          {
            if (v424 >> 61)
              goto LABEL_1506;
            v425 = (char *)operator new(8 * v424);
          }
          else
          {
            v425 = 0;
          }
          v506 = (uint64_t ****)&v425[8 * v422];
          *v506 = v850;
          v507 = (char *)(v506 + 1);
          while (v414 != v846)
          {
            v508 = (uint64_t ***)*((_QWORD *)v414 - 1);
            v414 -= 8;
            *--v506 = v508;
          }
          v842 = &v425[8 * v424];
          if (v846)
            operator delete(v846);
          v43 = v507;
          v846 = (char *)v506;
LABEL_871:
          v38 = (void *)v853;
          goto LABEL_872;
        }
LABEL_1505:
        abort();
      }
      do
      {
        v370 = (uint64_t ***)v880[0];
        v371 = (char *)v880[0] + 72;
        v372 = (char *)*((_QWORD *)v880[0] + 10);
        if ((char *)v880[0] + 72 == v372)
          goto LABEL_659;
        v373 = 0;
        do
        {
          if (*(_QWORD *)v371)
            v374 = *(_QWORD *)v371 - 24;
          else
            v374 = 0;
          *(_QWORD *)v958 = 0;
          if (sub_1C49F21C0(v897[1], v897[3], v374, v958))
          {
            v375 = *(_QWORD *)v958;
            v376 = v897[1];
            v377 = LODWORD(v897[3]);
          }
          else
          {
            v376 = v897[1];
            v377 = LODWORD(v897[3]);
            v375 = v897[1] + 16 * LODWORD(v897[3]);
          }
          if (v375 == v376 + 16 * v377)
            goto LABEL_653;
          v378 = *(_QWORD *)(v375 + 8);
          if (!v378)
            goto LABEL_653;
          v379 = *(_DWORD *)(v378 + 32);
          if (!*(_BYTE *)(v378 + 24))
          {
            if (!v379)
            {
              v388 = *(unsigned int *)(v378 + 80);
              if ((_DWORD)v388)
              {
                v389 = 0;
                v390 = *(_QWORD *)(v378 + 72);
                v391 = 8 * v388;
                do
                {
                  if (!*(_BYTE *)(*(_QWORD *)v390 + 25))
                    v389 += *(_QWORD *)(*(_QWORD *)v390 + 32);
                  v390 += 8;
                  v391 -= 8;
                }
                while (v391);
              }
              else
              {
                v389 = 0;
              }
              *(_QWORD *)(v378 + 16) = v389;
              v373 = 1;
              *(_BYTE *)(v378 + 24) = 1;
              goto LABEL_641;
            }
            if (*(_DWORD *)(v378 + 28))
              goto LABEL_653;
            v384 = *(unsigned int *)(v378 + 48);
            if ((_DWORD)v384)
            {
              v385 = 0;
              v386 = *(_QWORD *)(v378 + 40);
              v387 = 8 * v384;
              do
              {
                if (!*(_BYTE *)(*(_QWORD *)v386 + 25))
                  v385 += *(_QWORD *)(*(_QWORD *)v386 + 32);
                v386 += 8;
                v387 -= 8;
              }
              while (v387);
            }
            else
            {
              v385 = 0;
            }
            *(_QWORD *)(v378 + 16) = v385;
            v373 = 1;
            *(_BYTE *)(v378 + 24) = 1;
          }
          if (v379 == 1)
          {
            v380 = *(unsigned int *)(v378 + 80);
            if ((_DWORD)v380)
            {
              v381 = 0;
              v382 = 8 * v380;
              v383 = *(_QWORD *)(v378 + 72);
              do
              {
                if (!*(_BYTE *)(*(_QWORD *)v383 + 25))
                  v381 += *(_QWORD *)(*(_QWORD *)v383 + 32);
                v383 += 8;
                v382 -= 8;
              }
              while (v382);
            }
            else
            {
              v381 = 0;
            }
            v392 = *(_QWORD *)(v378 + 16);
            v491 = v392 >= v381;
            v393 = v392 - v381;
            if (v491)
              v394 = v393;
            else
              v394 = 0;
            sub_1C58C9C18((uint64_t)v880, *(uint64_t **)(v378 + 72), v380, v394);
            v373 = 1;
          }
LABEL_641:
          if (*(_DWORD *)(v378 + 28) == 1)
          {
            v395 = *(unsigned int *)(v378 + 48);
            if ((_DWORD)v395)
            {
              v396 = 0;
              v397 = 8 * v395;
              v398 = *(_QWORD *)(v378 + 40);
              do
              {
                if (!*(_BYTE *)(*(_QWORD *)v398 + 25))
                  v396 += *(_QWORD *)(*(_QWORD *)v398 + 32);
                v398 += 8;
                v397 -= 8;
              }
              while (v397);
            }
            else
            {
              v396 = 0;
            }
            v399 = *(_QWORD *)(v378 + 16);
            v491 = v399 >= v396;
            v400 = v399 - v396;
            if (v491)
              v401 = v400;
            else
              v401 = 0;
            sub_1C58C9C18((uint64_t)v880, *(uint64_t **)(v378 + 40), v395, v401);
            v373 = 1;
          }
LABEL_653:
          v371 = *(char **)v371;
        }
        while (v371 != v372);
      }
      while ((v373 & 1) != 0);
      v370 = (uint64_t ***)v880[0];
      v371 = (char *)*((_QWORD *)v880[0] + 10);
LABEL_659:
      if (v371)
        v402 = (uint64_t)(v371 - 24);
      else
        v402 = 0;
      *(_QWORD *)v958 = 0;
      v403 = sub_1C49F21C0(v897[1], v897[3], v402, v958);
      v404 = *(_QWORD *)v958;
      v405 = v897[1] + 16 * LODWORD(v897[3]);
      if (!v403)
        v404 = v897[1] + 16 * LODWORD(v897[3]);
      v406 = *(_QWORD *)(*(_QWORD *)(v404 + 8) + 16);
      v407 = (std::string::size_type)(v370 + 9);
      v408 = v406;
      while (v371 != (char *)v407)
      {
        if (v371)
          v409 = (uint64_t)(v371 - 24);
        else
          v409 = 0;
        *(_QWORD *)v958 = 0;
        if (sub_1C49F21C0(v897[1], v897[3], v409, v958))
          v410 = *(_QWORD *)v958 == v405;
        else
          v410 = 1;
        if (!v410)
        {
          v411 = *(_QWORD *)(*(_QWORD *)v958 + 8);
          if (v411)
          {
            v412 = *(_QWORD *)(v411 + 16);
            if (v408 <= v412)
              v408 = v412;
          }
        }
        v371 = (char *)*((_QWORD *)v371 + 1);
      }
      if (v406)
        v415 = 1;
      else
        v415 = v408 == 0;
      if (v415)
        v416 = v406;
      else
        v416 = 1;
      llvm::Function::setEntryCount(v370, v416, 0, 0);
      if (*(_BYTE *)(v882 + 24) && *(_QWORD *)(v882 + 16) <= v416)
      {
        v417 = 2;
LABEL_710:
        *(_DWORD *)&v903[40] = v417;
      }
      else if (*(_BYTE *)(v882 + 40) && *(_QWORD *)(v882 + 32) >= v408)
      {
        v417 = 1;
        goto LABEL_710;
      }
      HIDWORD(v889) = 2;
      v893[0] = v880;
      v890 = v903;
      sub_1C58C6A78((uint64_t)&v888, (uint64_t)v880[0]);
      isIrrLoopHeader = (uint64_t)v880[0];
      v427 = (char *)v880[0] + 72;
      v428 = (char *)*((_QWORD *)v880[0] + 10);
      if (v428 != (char *)v880[0] + 72)
      {
        do
        {
          if (v428)
            v429 = (uint64_t)(v428 - 24);
          else
            v429 = 0;
          v430 = *(_QWORD *)(v429 + 40);
          if (v430 == v429 + 40)
          {
            v432 = 0;
          }
          else
          {
            if (v430)
              v431 = v430 - 24;
            else
              v431 = 0;
            if (*(unsigned __int8 *)(v431 + 16) - 29 >= 0xB)
              v432 = 0;
            else
              v432 = v431;
          }
          v433 = *(unsigned __int8 *)(v432 + 16);
          if (v433 != 30)
            __asm { BR              X9 }
          if ((*(_DWORD *)(v432 + 20) & 0x7FFFFFF) == 3)
          {
            *(_QWORD *)v958 = 0;
            v434 = sub_1C49F21C0(v897[1], v897[3], v429, v958);
            v435 = v897[1] + 16 * LODWORD(v897[3]);
            v436 = v434 ? *(_QWORD *)v958 : v897[1] + 16 * LODWORD(v897[3]);
            if (*(_QWORD *)(*(_QWORD *)(v436 + 8) + 16))
            {
              *(_QWORD *)v958 = 0;
              v437 = sub_1C49F21C0(v897[1], v897[3], v429, v958);
              v438 = *(_QWORD *)v958;
              if (!v437)
                v438 = v435;
              v407 = *(_QWORD *)(v438 + 8);
              v439 = *(unsigned int *)(v407 + 80);
              *(_QWORD *)v958 = &v958[16];
              *(_QWORD *)&v958[8] = 0x200000000;
              sub_1C4765AA4(v958, v439, 0);
              if ((_DWORD)v439)
              {
                v42 = 0;
                v440 = 0;
                v441 = 8 * v439;
                do
                {
                  v442 = *(uint64_t **)(*(_QWORD *)(v407 + 72) + v42);
                  v443 = v442[1];
                  if (v443)
                  {
                    v444 = llvm::GetSuccessorNumber(*v442, v443);
                    v445 = v442[4];
                    if (v445 > v440)
                      v440 = v442[4];
                    *(_QWORD *)(*(_QWORD *)v958 + 8 * v444) = v445;
                  }
                  v42 += 8;
                }
                while (v441 != v42);
              }
              else
              {
                v440 = 0;
              }
              llvm::setProfMetadata((uint64_t **)v880[1], v432, *(uint64_t **)v958, *(unsigned int *)&v958[8], v440);
              if (*(_BYTE **)v958 != &v958[16])
                free(*(void **)v958);
            }
          }
          v428 = (char *)*((_QWORD *)v428 + 1);
        }
        while (v428 != v427);
        isIrrLoopHeader = (uint64_t)v880[0];
      }
      if (!byte_1ED815C58)
      {
        if (v893[3] >= 0)
          v446 = (unsigned __int8 *)&v893[1];
        else
          v446 = (unsigned __int8 *)v893[1];
        if (v893[3] >= 0)
          v447 = HIBYTE(v893[3]) & 0x7F;
        else
          v447 = v893[2];
        llvm::createPGOFuncNameMetadata((llvm::Value *)isIrrLoopHeader, v446, v447);
        v448 = 0;
        v449 = 0;
        v450 = 1;
        while (1)
        {
          v451 = v450;
          v452 = *(_DWORD *)&v903[32];
          if (*(_QWORD *)&v903[32])
          {
            if ((v450 & 1) != 0)
              v453 = 0;
            else
              v453 = 24;
            v454 = *(_QWORD *)(*(_QWORD *)&v903[32] + v453);
            v455 = 32;
            if ((v450 & 1) != 0)
              v455 = 8;
            v452 = -1431655765 * ((*(_QWORD *)(*(_QWORD *)&v903[32] + v455) - v454) >> 3);
          }
          v456 = *(_QWORD *)(v887[0] + 24 * v449 + 8);
          v407 = *(_QWORD *)(v887[0] + 24 * v449);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v456 - v407) >> 3) != v452)
            break;
          if (v407 != v456)
          {
            v457 = 0;
            do
            {
              v458 = 192;
              if ((v448 & 1) != 0)
                v458 = 384;
              llvm::annotateValueSite((uint64_t *)v880[1], *(unsigned __int8 ***)(v407 + 16), (uint64_t)&v903[8], v449, v457++, *(_DWORD *)((char *)&unk_1ED815BD8 + v458 + 128));
              v407 += 24;
            }
            while (v407 != v456);
          }
LABEL_799:
          v450 = 0;
          v448 = 1;
          v449 = 1;
          if ((v451 & 1) == 0)
          {
            isIrrLoopHeader = (uint64_t)v880[0];
            goto LABEL_802;
          }
        }
        v459 = *(_QWORD *)v880[1];
        if (*((char *)v880[1] + 191) >= 0)
          v42 = (std::string::size_type)v880[1] + 168;
        else
          v42 = *((_QWORD *)v880[1] + 21);
        if (*off_1E817E240[v449])
        {
          v460 = &v930;
          v932 = off_1E817E240[v449];
          v461 = 3;
          v462 = 2;
        }
        else
        {
          v461 = 1;
          v462 = 3;
          v460 = (void **)"Inconsistent number of value sites for ";
        }
        v930 = "Inconsistent number of value sites for ";
        BYTE8(v933) = 3;
        BYTE9(v933) = v461;
        __dst.n128_u64[0] = (unint64_t)v460;
        v927 = " profiling in \"";
        LOBYTE(v929) = v462;
        HIBYTE(v929) = 3;
        if ((*((_BYTE *)v880[0] + 23) & 0x10) == 0)
        {
          v472 = 0;
          *((_BYTE *)&v922.__r_.__value_.__s + 23) = 0;
          v407 = (std::string::size_type)&v922;
          goto LABEL_789;
        }
        v463 = ***(_QWORD ***)v880[0];
        v464 = *(_QWORD *)(v463 + 152);
        v465 = *(unsigned int *)(v463 + 168);
        if (!(_DWORD)v465)
          goto LABEL_780;
        LODWORD(v466) = (v465 - 1) & ((LODWORD(v880[0]) >> 4) ^ (LODWORD(v880[0]) >> 9));
        v467 = v464 + 16 * v466;
        v468 = *(void **)v467;
        if (*(void **)v467 != v880[0])
        {
          v469 = 1;
          while (v468 != (void *)-4096)
          {
            v470 = v466 + v469++;
            v466 = v470 & (v465 - 1);
            v468 = *(void **)(v464 + 16 * v466);
            if (v468 == v880[0])
            {
              v467 = v464 + 16 * v466;
              goto LABEL_781;
            }
          }
LABEL_780:
          v467 = v464 + 16 * v465;
        }
LABEL_781:
        v471 = *(unint64_t **)(v467 + 8);
        v474 = *v471;
        v473 = v471 + 2;
        v472 = v474;
        if (v474 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1505;
        if (v472 >= 0x17)
        {
          v475 = (v472 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v472 | 7) != 0x17)
            v475 = v472 | 7;
          v476 = v475 + 1;
          v407 = (std::string::size_type)operator new(v475 + 1);
          v922.__r_.__value_.__r.__words[2] = v476 | 0x8000000000000000;
          v922.__r_.__value_.__r.__words[0] = v407;
          v922.__r_.__value_.__l.__size_ = v472;
        }
        else
        {
          *((_BYTE *)&v922.__r_.__value_.__s + 23) = v472;
          v407 = (std::string::size_type)&v922;
          if (!v472)
          {
LABEL_789:
            *(_BYTE *)(v407 + v472) = 0;
            v477 = v929;
            if (v929 == 1)
            {
              v480 = &v922;
              *(_QWORD *)&v942 = &v922;
              v943 = *(_OWORD *)&v918.__r_.__value_.__l.__data_;
              LOWORD(v944) = 260;
              *(_DWORD *)((char *)&v944 + 2) = v915.__r_.__value_.__l.__data_;
              HIWORD(v944) = WORD2(v915.__r_.__value_.__r.__words[0]);
              v478 = 4;
              v481 = *((_QWORD *)&v942 + 1);
            }
            else
            {
              if (!(_BYTE)v929)
              {
                v478 = 0;
                LOWORD(v944) = 256;
                v479 = 1;
                goto LABEL_797;
              }
              v480 = (std::string *)&v942;
              v482 = (__n128 *)__dst.n128_u64[0];
              v478 = 2;
              if (HIBYTE(v929) != 1)
              {
                v477 = 2;
                v482 = &__dst;
              }
              *(_QWORD *)&v942 = v482;
              *((_QWORD *)&v942 + 1) = __dst.n128_u64[1];
              *(_QWORD *)&v943 = &v922;
              LOBYTE(v944) = v477;
              v481 = 4;
              BYTE1(v944) = 4;
            }
            *(_QWORD *)v958 = v480;
            *(_QWORD *)&v958[8] = v481;
            v479 = 3;
            *(_QWORD *)&v958[16] = "\", possibly due to the use of a stale profile.";
LABEL_797:
            v958[32] = v478;
            v958[33] = v479;
            LODWORD(v954.__r_.__value_.__r.__words[1]) = 19;
            v954.__r_.__value_.__s.__data_[12] = 1;
            v954.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E814E730;
            v954.__r_.__value_.__r.__words[2] = v42;
            v955 = v958;
            llvm::LLVMContext::diagnose(v459, (const llvm::DiagnosticInfo *)&v954);
            if (SHIBYTE(v922.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v922.__r_.__value_.__l.__data_);
            goto LABEL_799;
          }
        }
        memmove((void *)v407, v473, v472);
        goto LABEL_789;
      }
LABEL_802:
      v483 = isIrrLoopHeader + 72;
      v484 = *(_QWORD *)(isIrrLoopHeader + 80);
      while (2)
      {
        if (v484 != v483)
        {
          if (v484)
            v485 = (const llvm::BasicBlock *)(v484 - 24);
          else
            v485 = 0;
          isIrrLoopHeader = llvm::BlockFrequencyInfo::isIrrLoopHeader(v881, v485);
          if ((isIrrLoopHeader & 1) != 0)
            goto LABEL_808;
          v488 = *((_QWORD *)v485 + 1);
          if (v488)
          {
            while (1)
            {
              v489 = *(_QWORD *)(v488 + 24);
              v490 = *(unsigned __int8 *)(v489 + 16);
              v491 = v489 && v490 >= 0x1C;
              v492 = !v491 || v490 - 29 > 0xA;
              if (!v492)
                break;
              v488 = *(_QWORD *)(v488 + 8);
              if (!v488)
                goto LABEL_848;
            }
LABEL_829:
            v496 = *(_QWORD *)(*(_QWORD *)(v489 + 40) + 40);
            if (v496)
              v497 = v496 - 24;
            else
              v497 = 0;
            if (*(unsigned __int8 *)(v497 + 16) - 29 >= 0xB)
              v497 = 0;
            if (*(_BYTE *)(v497 + 16) == 32)
            {
LABEL_808:
              v486 = (_QWORD *)*((_QWORD *)v485 + 5);
              if (v486 == (_QWORD *)((char *)v485 + 40))
              {
                v487 = 0;
              }
              else
              {
                if (v486)
                  v498 = (llvm::Value *)(v486 - 3);
                else
                  v498 = 0;
                if (*((unsigned __int8 *)v498 + 16) - 29 >= 0xB)
                  v487 = 0;
                else
                  v487 = v498;
              }
              *(_QWORD *)v958 = 0;
              v499 = sub_1C49F21C0(v897[1], v897[3], (uint64_t)v485, v958);
              v500 = *(_QWORD *)v958;
              if (!v499)
                v500 = v897[1] + 16 * LODWORD(v897[3]);
              v501 = *(_QWORD *)(*(_QWORD *)(v500 + 8) + 16);
              *(_QWORD *)v958 = *(_QWORD *)v880[1];
              isIrrLoopHeader = llvm::MDBuilder::createIrrLoopHeaderWeight((uint64_t **)v958, v501);
              if (isIrrLoopHeader || *((_QWORD *)v487 + 6) || (*((_BYTE *)v487 + 23) & 0x20) != 0)
                llvm::Value::setMetadata(v487, 24, (llvm::MDNode *)isIrrLoopHeader);
            }
            else
            {
              while (1)
              {
                v488 = *(_QWORD *)(v488 + 8);
                if (!v488)
                  break;
                v489 = *(_QWORD *)(v488 + 24);
                v493 = *(unsigned __int8 *)(v489 + 16);
                if (v489)
                  v494 = v493 >= 0x1C;
                else
                  v494 = 0;
                if (v494 && v493 - 29 <= 0xA)
                  goto LABEL_829;
              }
            }
          }
LABEL_848:
          v484 = *(_QWORD *)(v484 + 8);
          continue;
        }
        break;
      }
      if (*(_DWORD *)&v903[40] == 2)
      {
        if (v851 < v842)
        {
          *(_QWORD *)v851 = v850;
          v851 += 8;
          v38 = (void *)v853;
          goto LABEL_926;
        }
        v521 = (v851 - v846) >> 3;
        v522 = v521 + 1;
        if (!((unint64_t)(v521 + 1) >> 61))
        {
          if ((v842 - v846) >> 2 > v522)
            v522 = (v842 - v846) >> 2;
          if ((unint64_t)(v842 - v846) >= 0x7FFFFFFFFFFFFFF8)
            v523 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v523 = v522;
          if (v523)
          {
            if (v523 >> 61)
              goto LABEL_1506;
            isIrrLoopHeader = (uint64_t)operator new(8 * v523);
          }
          else
          {
            isIrrLoopHeader = 0;
          }
          v528 = (uint64_t ****)(isIrrLoopHeader + 8 * v521);
          v529 = v851;
          *v528 = v850;
          v530 = (char *)(v528 + 1);
          while (v529 != v846)
          {
            v531 = (uint64_t ***)*((_QWORD *)v529 - 1);
            v529 -= 8;
            *--v528 = v531;
          }
          v842 = (char *)(isIrrLoopHeader + 8 * v523);
          if (v846)
            operator delete(v846);
          v851 = v530;
          v846 = (char *)v528;
          goto LABEL_925;
        }
        goto LABEL_1505;
      }
      v38 = (void *)v853;
      if (*(_DWORD *)&v903[40] != 1)
        goto LABEL_926;
      if (v849 < v843)
      {
        *(_QWORD *)v849 = v850;
        v849 += 8;
        goto LABEL_926;
      }
      v518 = (v849 - (char *)v852) >> 3;
      v519 = v518 + 1;
      if ((unint64_t)(v518 + 1) >> 61)
        goto LABEL_1505;
      if ((v843 - (char *)v852) >> 2 > v519)
        v519 = (v843 - (char *)v852) >> 2;
      if ((unint64_t)(v843 - (char *)v852) >= 0x7FFFFFFFFFFFFFF8)
        v520 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v520 = v519;
      if (v520)
      {
        if (!(v520 >> 61))
        {
          isIrrLoopHeader = (uint64_t)operator new(8 * v520);
          goto LABEL_911;
        }
LABEL_1506:
        sub_1C4764EE4();
      }
      isIrrLoopHeader = 0;
LABEL_911:
      v524 = (uint64_t ****)(isIrrLoopHeader + 8 * v518);
      *v524 = v850;
      v525 = (char *)(v524 + 1);
      for (jj = v849; jj != (char *)v852; jj -= 8)
      {
        v527 = (uint64_t ***)*((_QWORD *)jj - 1);
        *--v524 = v527;
      }
      v843 = (char *)(isIrrLoopHeader + 8 * v520);
      if (v852)
        operator delete(v852);
      v849 = v525;
      v852 = v524;
LABEL_925:
      v38 = (void *)v853;
LABEL_926:
      if (!dword_1ED82C930)
        goto LABEL_975;
      if (byte_1ED82C79F >= 0)
        v532 = byte_1ED82C79F & 0x7F;
      else
        v532 = qword_1ED82C790;
      if (v532)
      {
        if ((*((_BYTE *)v850 + 23) & 0x10) == 0)
          goto LABEL_975;
        v536 = ***v850;
        v537 = *(_QWORD *)(v536 + 152);
        v538 = *(unsigned int *)(v536 + 168);
        if ((_DWORD)v538)
        {
          LODWORD(v539) = (v538 - 1) & ((v850 >> 4) ^ (v850 >> 9));
          v540 = (uint64_t ****)(v537 + 16 * v539);
          v541 = *v540;
          if (*v540 != v850)
          {
            v542 = 1;
            while (v541 != (uint64_t ***)-4096)
            {
              v543 = v539 + v542++;
              v539 = v543 & (v538 - 1);
              v541 = *(uint64_t ****)(v537 + 16 * v539);
              if (v541 == v850)
              {
                v540 = (uint64_t ****)(v537 + 16 * v539);
                goto LABEL_955;
              }
            }
            goto LABEL_954;
          }
        }
        else
        {
LABEL_954:
          v540 = (uint64_t ****)(v537 + 16 * v538);
        }
LABEL_955:
        v555 = v540[1];
        if (*v555 == (uint64_t **)v532)
        {
          v556 = byte_1ED82C79F >= 0 ? &qword_1ED82C788 : (uint64_t *)qword_1ED82C788;
          isIrrLoopHeader = memcmp(v555 + 2, v556, v532);
          if (!(_DWORD)isIrrLoopHeader)
            goto LABEL_931;
        }
        goto LABEL_975;
      }
LABEL_931:
      *(_QWORD *)&v942 = &v943;
      *((_QWORD *)&v942 + 1) = 0x100000000;
      v950 = 0;
      *((_QWORD *)&v943 + 1) = 0;
      v944 = 0;
      v945 = 0;
      v949 = 0;
      v947 = 0;
      v948 = v850;
      sub_1C53BA620((uint64_t)&v942, 0);
      memset(v958, 0, 20);
      *(_OWORD *)&v958[24] = 0u;
      v959 = 0u;
      v960 = 0;
      v961 = &v963;
      v962 = 0x400000000;
      v965[3] = 0;
      v966[0] = 0;
      v965[2] = v966;
      v966[1] = 1;
      llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)v958, (uint64_t)&v942);
      sub_1C4DC4E38((uint64_t *)&v943 + 1);
      if ((__int128 *)v942 != &v943)
        free((void *)v942);
      v533 = operator new();
      sub_1C4EEA178(v533, (const llvm::Function *)v850, (uint64_t)v958, 0, 0, 0);
      v534 = (uint64_t **)operator new();
      *v534 = 0;
      llvm::BlockFrequencyInfo::calculate(v534, (llvm::Value *)v850);
      if (dword_1ED82C930 != 2)
      {
        if (dword_1ED82C930 == 1)
          llvm::BlockFrequencyInfo::view(v534, (uint64_t)"BlockFrequencyDAGs", 18);
LABEL_972:
        v563 = *v534;
        *v534 = 0;
        if (v563)
          (*(void (**)(uint64_t *))(*v563 + 8))(v563);
        goto LABEL_974;
      }
      v544 = llvm::dbgs(v535);
      v545 = v544;
      v546 = *((_QWORD *)v544 + 4);
      if ((unint64_t)(*((_QWORD *)v544 + 3) - v546) > 0x10)
      {
        *(_BYTE *)(v546 + 16) = 32;
        *(_OWORD *)v546 = *(_OWORD *)"pgo-view-counts: ";
        *((_QWORD *)v544 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v544, "pgo-view-counts: ", 0x11uLL);
      }
      if ((*((_BYTE *)v880[0] + 23) & 0x10) != 0)
      {
        v547 = ***(_QWORD ***)v880[0];
        v548 = *(_QWORD *)(v547 + 152);
        v549 = *(unsigned int *)(v547 + 168);
        if (!(_DWORD)v549)
          goto LABEL_961;
        LODWORD(v550) = (v549 - 1) & ((LODWORD(v880[0]) >> 4) ^ (LODWORD(v880[0]) >> 9));
        v551 = v548 + 16 * v550;
        v552 = *(void **)v551;
        if (*(void **)v551 != v880[0])
        {
          v553 = 1;
          while (v552 != (void *)-4096)
          {
            v554 = v550 + v553++;
            v550 = v554 & (v549 - 1);
            v552 = *(void **)(v548 + 16 * v550);
            if (v552 == v880[0])
            {
              v551 = v548 + 16 * v550;
              goto LABEL_962;
            }
          }
LABEL_961:
          v551 = v548 + 16 * v549;
        }
LABEL_962:
        v557 = *(_QWORD **)(v551 + 8);
        v560 = *v557;
        v558 = (const char *)(v557 + 2);
        v559 = v560;
        v561 = (llvm::raw_ostream *)*((_QWORD *)v545 + 4);
        if (v560 > *((_QWORD *)v545 + 3) - (_QWORD)v561)
        {
          llvm::raw_ostream::write(v545, v558, v559);
          goto LABEL_964;
        }
        if (v559)
        {
          memcpy(v561, v558, v559);
          v561 = (llvm::raw_ostream *)(*((_QWORD *)v545 + 4) + v559);
          *((_QWORD *)v545 + 4) = v561;
        }
      }
      else
      {
LABEL_964:
        v561 = (llvm::raw_ostream *)*((_QWORD *)v545 + 4);
      }
      if (*((llvm::raw_ostream **)v545 + 3) == v561)
      {
        v561 = llvm::raw_ostream::write(v545, "\n", 1uLL);
      }
      else
      {
        *(_BYTE *)v561 = 10;
        ++*((_QWORD *)v545 + 4);
      }
      v562 = llvm::dbgs(v561);
      if (*v534)
      {
        (*(void (**)(uint64_t *, llvm *))(**v534 + 24))(*v534, v562);
        v38 = (void *)v853;
        goto LABEL_972;
      }
      *v534 = 0;
      v38 = (void *)v853;
LABEL_974:
      MEMORY[0x1CAA32FC0](v534, 0x20C4093837F09);
      v564 = sub_1C4DC0BBC(v533);
      MEMORY[0x1CAA32FC0](v564, 0x1060C40D526B124);
      isIrrLoopHeader = (uint64_t)llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v958);
LABEL_975:
      v565 = dword_1ED815A00;
      if (!dword_1ED815A00)
        goto LABEL_1150;
      if (byte_1ED82C79F >= 0)
        v566 = byte_1ED82C79F & 0x7F;
      else
        v566 = qword_1ED82C790;
      if (v566)
      {
        if ((*((_BYTE *)v850 + 23) & 0x10) == 0)
          goto LABEL_1150;
        v575 = ***v850;
        v576 = *(_QWORD *)(v575 + 152);
        v577 = *(unsigned int *)(v575 + 168);
        if ((_DWORD)v577)
        {
          LODWORD(v578) = (v577 - 1) & ((v850 >> 4) ^ (v850 >> 9));
          v579 = (uint64_t ****)(v576 + 16 * v578);
          v580 = *v579;
          if (*v579 != v850)
          {
            v581 = 1;
            while (v580 != (uint64_t ***)-4096)
            {
              v582 = v578 + v581++;
              v578 = v582 & (v577 - 1);
              v580 = *(uint64_t ****)(v576 + 16 * v578);
              if (v580 == v850)
              {
                v579 = (uint64_t ****)(v576 + 16 * v578);
                goto LABEL_1014;
              }
            }
            goto LABEL_1013;
          }
        }
        else
        {
LABEL_1013:
          v579 = (uint64_t ****)(v576 + 16 * v577);
        }
LABEL_1014:
        v602 = v579[1];
        if (*v602 == (uint64_t **)v566)
        {
          v603 = byte_1ED82C79F >= 0 ? &qword_1ED82C788 : (uint64_t *)qword_1ED82C788;
          isIrrLoopHeader = memcmp(v602 + 2, v603, v566);
          if (!(_DWORD)isIrrLoopHeader)
            goto LABEL_980;
        }
        goto LABEL_1150;
      }
LABEL_980:
      if (v565 == 2)
      {
        v583 = llvm::dbgs((llvm *)isIrrLoopHeader);
        v584 = v583;
        v585 = (void *)*((_QWORD *)v583 + 4);
        if (*((_QWORD *)v583 + 3) - (_QWORD)v585 > 0x14uLL)
        {
          qmemcpy(v585, "pgo-view-raw-counts: ", 21);
          *((_QWORD *)v583 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v583, "pgo-view-raw-counts: ", 0x15uLL);
        }
        if ((*((_BYTE *)v880[0] + 23) & 0x10) != 0)
        {
          v586 = ***(_QWORD ***)v880[0];
          v587 = *(_QWORD *)(v586 + 152);
          v588 = *(unsigned int *)(v586 + 168);
          if (!(_DWORD)v588)
            goto LABEL_1020;
          LODWORD(v589) = (v588 - 1) & ((LODWORD(v880[0]) >> 4) ^ (LODWORD(v880[0]) >> 9));
          v590 = v587 + 16 * v589;
          v591 = *(void **)v590;
          if (*(void **)v590 != v880[0])
          {
            v592 = 1;
            while (v591 != (void *)-4096)
            {
              v593 = v589 + v592++;
              v589 = v593 & (v588 - 1);
              v591 = *(void **)(v587 + 16 * v589);
              if (v591 == v880[0])
              {
                v590 = v587 + 16 * v589;
                goto LABEL_1021;
              }
            }
LABEL_1020:
            v590 = v587 + 16 * v588;
          }
LABEL_1021:
          v604 = *(_QWORD **)(v590 + 8);
          v607 = *v604;
          v605 = (const char *)(v604 + 2);
          v606 = v607;
          v608 = (llvm::raw_ostream *)*((_QWORD *)v584 + 4);
          if (v607 > *((_QWORD *)v584 + 3) - (_QWORD)v608)
          {
            llvm::raw_ostream::write(v584, v605, v606);
            goto LABEL_1023;
          }
          if (v606)
          {
            memcpy(v608, v605, v606);
            v608 = (llvm::raw_ostream *)(*((_QWORD *)v584 + 4) + v606);
            *((_QWORD *)v584 + 4) = v608;
          }
        }
        else
        {
LABEL_1023:
          v608 = (llvm::raw_ostream *)*((_QWORD *)v584 + 4);
        }
        if (*((llvm::raw_ostream **)v584 + 3) == v608)
        {
          v608 = llvm::raw_ostream::write(v584, "\n", 1uLL);
        }
        else
        {
          *(_BYTE *)v608 = 10;
          ++*((_QWORD *)v584 + 4);
        }
        v841 &= 0xFFFFFFFFFFFFFF00;
        v909[0] = v841;
        HIBYTE(v910) = 0;
        v609 = llvm::dbgs(v608);
        v918.__r_.__value_.__r.__words[0] = (std::string::size_type)"Dump Function ";
        v918.__r_.__value_.__r.__words[2] = (std::string::size_type)&v893[1];
        v920 = 1027;
        v922.__r_.__value_.__r.__words[0] = (std::string::size_type)&v918;
        v922.__r_.__value_.__r.__words[2] = (std::string::size_type)" Hash: ";
        v924 = 770;
        v954.__r_.__value_.__r.__words[0] = (std::string::size_type)&v922;
        v954.__r_.__value_.__r.__words[2] = (std::string::size_type)&v894;
        v956 = 3074;
        v930 = &v954;
        v932 = "\t";
        WORD4(v933) = 770;
        __dst.n128_u64[0] = (unint64_t)&v930;
        v927 = (const char *)v909;
        v929 = 1026;
        llvm::Twine::str((llvm::Twine *)&__dst, v958);
        if (v958[23] >= 0)
          v611 = v958[23];
        else
          v611 = *(_QWORD *)&v958[8];
        if ((v958[23] & 0x80000000) != 0)
          operator delete(*(void **)v958);
        if (v611)
        {
          llvm::Twine::printOneChild(v610, v609, __dst.n128_i64[0], __dst.n128_u64[1], v929);
          llvm::Twine::printOneChild(v612, v609, (uint64_t)v927, v928, SHIBYTE(v929));
          v613 = (_BYTE *)*((_QWORD *)v609 + 4);
          if (*((_BYTE **)v609 + 3) == v613)
          {
            llvm::raw_ostream::write(v609, "\n", 1uLL);
          }
          else
          {
            *v613 = 10;
            ++*((_QWORD *)v609 + 4);
          }
        }
        v614 = (void *)*((_QWORD *)v609 + 4);
        if (*((_QWORD *)v609 + 3) - (_QWORD)v614 > 0x19uLL)
        {
          qmemcpy(v614, "  Number of Basic Blocks: ", 26);
          *((_QWORD *)v609 + 4) += 26;
        }
        else
        {
          llvm::raw_ostream::write(v609, "  Number of Basic Blocks: ", 0x1AuLL);
        }
        sub_1C5E21910(v609, LODWORD(v897[2]), 0, 0, 0);
        v615 = (_BYTE *)*((_QWORD *)v609 + 4);
        if (*((_BYTE **)v609 + 3) == v615)
        {
          llvm::raw_ostream::write(v609, "\n", 1uLL);
        }
        else
        {
          *v615 = 10;
          ++*((_QWORD *)v609 + 4);
        }
        v616 = v897[1] + 16 * LODWORD(v897[3]);
        if (LODWORD(v897[2]))
        {
          if (LODWORD(v897[3]))
          {
            v618 = 16 * LODWORD(v897[3]);
            v617 = (_QWORD *)v897[1];
            while ((*v617 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v617 += 2;
              v618 -= 16;
              if (!v618)
                goto LABEL_1046;
            }
          }
          else
          {
            v617 = (_QWORD *)v897[1];
          }
        }
        else
        {
LABEL_1046:
          v617 = (_QWORD *)(v897[1] + 16 * LODWORD(v897[3]));
        }
        v619 = v897[1] + 16 * LODWORD(v897[3]);
        if (v617 == (_QWORD *)v619)
        {
LABEL_1048:
          v620 = *((_QWORD *)v609 + 4);
          if ((unint64_t)(*((_QWORD *)v609 + 3) - v620) > 0x12)
          {
            *(_DWORD *)(v620 + 15) = 540701541;
            *(_OWORD *)v620 = *(_OWORD *)"  Number of Edges: ";
            *((_QWORD *)v609 + 4) += 19;
          }
          else
          {
            llvm::raw_ostream::write(v609, "  Number of Edges: ", 0x13uLL);
          }
          sub_1C5E21910(v609, (uint64_t)(*((_QWORD *)&v896 + 1) - v896) >> 3, 0, 0, 0);
          v621 = (void *)*((_QWORD *)v609 + 4);
          if (*((_QWORD *)v609 + 3) - (_QWORD)v621 > 0x2DuLL)
          {
            qmemcpy(v621, " (*: Instrument, C: CriticalEdge, -: Removed)\n", 46);
            *((_QWORD *)v609 + 4) += 46;
          }
          else
          {
            llvm::raw_ostream::write(v609, " (*: Instrument, C: CriticalEdge, -: Removed)\n", 0x2EuLL);
          }
          v623 = (uint64_t **)*((_QWORD *)&v896 + 1);
          v622 = (uint64_t **)v896;
          if ((_QWORD)v896 != *((_QWORD *)&v896 + 1))
          {
            v646 = 0;
            do
            {
              v647 = (_DWORD *)*((_QWORD *)v609 + 4);
              if (*((_QWORD *)v609 + 3) - (_QWORD)v647 > 6uLL)
              {
                *(_DWORD *)((char *)v647 + 3) = 543516516;
                *v647 = 1682251808;
                *((_QWORD *)v609 + 4) += 7;
              }
              else
              {
                llvm::raw_ostream::write(v609, "  Edge ", 7uLL);
              }
              sub_1C5E21910(v609, v646, 0, 0, 0);
              v648 = (_WORD *)*((_QWORD *)v609 + 4);
              if (*((_QWORD *)v609 + 3) - (_QWORD)v648 > 1uLL)
              {
                *v648 = 8250;
                *((_QWORD *)v609 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v609, ": ", 2uLL);
              }
              v649 = **v622;
              *(_QWORD *)v958 = 0;
              v650 = sub_1C49F21C0(v897[1], v897[3], v649, v958);
              v651 = *(_QWORD *)v958;
              if (!v650)
                v651 = v897[1] + 16 * LODWORD(v897[3]);
              sub_1C5E21910(v609, *(unsigned int *)(*(_QWORD *)(v651 + 8) + 8), 0, 0, 0);
              v652 = *((_QWORD *)v609 + 4);
              if ((unint64_t)(*((_QWORD *)v609 + 3) - v652) > 2)
              {
                *(_BYTE *)(v652 + 2) = 62;
                *(_WORD *)v652 = 11565;
                *((_QWORD *)v609 + 4) += 3;
              }
              else
              {
                llvm::raw_ostream::write(v609, "-->", 3uLL);
              }
              v653 = (*v622)[1];
              *(_QWORD *)v958 = 0;
              v654 = sub_1C49F21C0(v897[1], v897[3], v653, v958);
              v655 = *(_QWORD *)v958;
              if (!v654)
                v655 = v897[1] + 16 * LODWORD(v897[3]);
              sub_1C5E21910(v609, *(unsigned int *)(*(_QWORD *)(v655 + 8) + 8), 0, 0, 0);
              v656 = *v622;
              if (*((_BYTE *)*v622 + 27))
              {
                sub_1C58CA454(&v915, *v622);
                *(_QWORD *)&v942 = &v915;
                *(_QWORD *)&v943 = "  Count=";
                LOWORD(v944) = 772;
                *(_QWORD *)v958 = &v942;
                *(_QWORD *)&v958[16] = v656 + 4;
                *(_WORD *)&v958[32] = 3074;
                llvm::Twine::str((llvm::Twine *)v958, &v911);
                if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v915.__r_.__value_.__l.__data_);
              }
              else
              {
                sub_1C58CA454(&v911, *v622);
              }
              if (v913 >= 0)
                v657 = (const char *)&v911;
              else
                v657 = (const char *)v911;
              if (v913 >= 0)
                v658 = HIBYTE(v913) & 0x7F;
              else
                v658 = v912;
              llvm::raw_ostream::write(v609, v657, v658);
              v659 = (_BYTE *)*((_QWORD *)v609 + 4);
              if (*((_BYTE **)v609 + 3) == v659)
              {
                llvm::raw_ostream::write(v609, "\n", 1uLL);
              }
              else
              {
                *v659 = 10;
                ++*((_QWORD *)v609 + 4);
              }
              if (SHIBYTE(v913) < 0)
                operator delete(v911);
              ++v622;
              ++v646;
            }
            while (v622 != v623);
          }
          if (SHIBYTE(v910) < 0)
          {
            v624 = (void *)v909[0];
            goto LABEL_1148;
          }
          goto LABEL_1149;
        }
        while (2)
        {
          v625 = (uint64_t ***)*v617;
          v626 = *((_QWORD *)v609 + 4);
          if ((unint64_t)(*((_QWORD *)v609 + 3) - v626) <= 5)
          {
            llvm::raw_ostream::write(v609, "  BB: ", 6uLL);
            if (v625)
              goto LABEL_1057;
LABEL_1069:
            v639 = (void *)*((_QWORD *)v609 + 4);
            v636 = "FakeNode";
            v637 = 8;
            if (*((_QWORD *)v609 + 3) - (_QWORD)v639 <= 7uLL)
            {
LABEL_1070:
              llvm::raw_ostream::write(v609, v636, v637);
              goto LABEL_1072;
            }
LABEL_1071:
            memcpy(v639, v636, v637);
            *((_QWORD *)v609 + 4) += v637;
LABEL_1072:
            v640 = (_WORD *)*((_QWORD *)v609 + 4);
            if (*((_QWORD *)v609 + 3) - (_QWORD)v640 > 1uLL)
            {
              *v640 = 8224;
              *((_QWORD *)v609 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v609, "  ", 2uLL);
            }
            v641 = v617[1];
            if (*(_BYTE *)(v641 + 24))
            {
              v42 = v42 & 0xFFFFFFFF00000000 | *(unsigned int *)(v641 + 8);
              *(_QWORD *)v958 = "Index=";
              *(_QWORD *)&v958[16] = v42;
              *(_WORD *)&v958[32] = 2051;
              llvm::Twine::str((llvm::Twine *)v958, &v915);
              *(_QWORD *)&v942 = &v915;
              *(_QWORD *)&v943 = "  Count=";
              LOWORD(v944) = 772;
              *(_QWORD *)v958 = &v942;
              *(_QWORD *)&v958[16] = v641 + 16;
              *(_WORD *)&v958[32] = 3074;
              llvm::Twine::str((llvm::Twine *)v958, &v911);
              if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v915.__r_.__value_.__l.__data_);
            }
            else
            {
              v407 = v407 & 0xFFFFFFFF00000000 | *(unsigned int *)(v641 + 8);
              *(_QWORD *)v958 = "Index=";
              *(_QWORD *)&v958[16] = v407;
              *(_WORD *)&v958[32] = 2051;
              llvm::Twine::str((llvm::Twine *)v958, &v911);
            }
            if (v913 >= 0)
              v642 = (const char *)&v911;
            else
              v642 = (const char *)v911;
            if (v913 >= 0)
              v643 = HIBYTE(v913) & 0x7F;
            else
              v643 = v912;
            llvm::raw_ostream::write(v609, v642, v643);
            v644 = (_BYTE *)*((_QWORD *)v609 + 4);
            if (*((_BYTE **)v609 + 3) == v644)
            {
              llvm::raw_ostream::write(v609, "\n", 1uLL);
            }
            else
            {
              *v644 = 10;
              ++*((_QWORD *)v609 + 4);
            }
            if (SHIBYTE(v913) < 0)
              operator delete(v911);
            v645 = v617 + 2;
            v617 = (_QWORD *)v616;
            if (v645 != (_QWORD *)v616)
            {
              v617 = v645;
              while ((*v617 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v617 += 2;
                if (v617 == (_QWORD *)v616)
                {
                  v617 = (_QWORD *)v616;
                  break;
                }
              }
            }
            if (v617 == (_QWORD *)v619)
              goto LABEL_1048;
            continue;
          }
          break;
        }
        *(_WORD *)(v626 + 4) = 8250;
        *(_DWORD *)v626 = 1111629856;
        *((_QWORD *)v609 + 4) += 6;
        if (!v625)
          goto LABEL_1069;
LABEL_1057:
        if ((*((_BYTE *)v625 + 23) & 0x10) == 0)
          goto LABEL_1072;
        v627 = ***v625;
        v628 = *(_QWORD *)(v627 + 152);
        v629 = *(unsigned int *)(v627 + 168);
        if ((_DWORD)v629)
        {
          LODWORD(v630) = (v629 - 1) & ((v625 >> 4) ^ (v625 >> 9));
          v631 = (uint64_t ****)(v628 + 16 * v630);
          v632 = *v631;
          if (*v631 != v625)
          {
            v633 = 1;
            while (v632 != (uint64_t ***)-4096)
            {
              v634 = v630 + v633++;
              v630 = v634 & (v629 - 1);
              v632 = *(uint64_t ****)(v628 + 16 * v630);
              if (v632 == v625)
              {
                v631 = (uint64_t ****)(v628 + 16 * v630);
                goto LABEL_1065;
              }
            }
            goto LABEL_1064;
          }
        }
        else
        {
LABEL_1064:
          v631 = (uint64_t ****)(v628 + 16 * v629);
        }
LABEL_1065:
        v635 = v631[1];
        v638 = (size_t)*v635;
        v636 = (const char *)(v635 + 2);
        v637 = v638;
        v639 = (void *)*((_QWORD *)v609 + 4);
        if (v638 > *((_QWORD *)v609 + 3) - (_QWORD)v639)
          goto LABEL_1070;
        if (v637)
          goto LABEL_1071;
        goto LABEL_1072;
      }
      if (v565 == 1)
      {
        if (!v566)
        {
          __dst.n128_u64[0] = (unint64_t)v880;
          if ((*((_BYTE *)v880[0] + 23) & 0x10) != 0)
          {
            v567 = ***(_QWORD ***)v880[0];
            v568 = *(_QWORD *)(v567 + 152);
            v569 = *(unsigned int *)(v567 + 168);
            if (!(_DWORD)v569)
              goto LABEL_1128;
            LODWORD(v570) = (v569 - 1) & ((LODWORD(v880[0]) >> 4) ^ (LODWORD(v880[0]) >> 9));
            v571 = v568 + 16 * v570;
            v572 = *(void **)v571;
            if (*(void **)v571 != v880[0])
            {
              v573 = 1;
              while (v572 != (void *)-4096)
              {
                v574 = v570 + v573++;
                v570 = v574 & (v569 - 1);
                v572 = *(void **)(v568 + 16 * v570);
                if (v572 == v880[0])
                {
                  v571 = v568 + 16 * v570;
                  goto LABEL_1129;
                }
              }
LABEL_1128:
              v571 = v568 + 16 * v569;
            }
LABEL_1129:
            v660 = *(_QWORD **)(v571 + 8);
            v663 = *v660;
            v662 = (char *)(v660 + 2);
            v661 = v663;
          }
          else
          {
            v661 = 0;
            v662 = &byte_1C871356D;
          }
          *(_QWORD *)v958 = "PGORawCounts_";
          *(_QWORD *)&v958[16] = v662;
          *(_QWORD *)&v958[24] = v661;
          *(_WORD *)&v958[32] = 1283;
          LOWORD(v944) = 257;
          v877 = 0;
          LOBYTE(v876) = 0;
          sub_1C58C7294((uint64_t)&v878, (uint64_t *)&__dst, (llvm::Twine *)v958, (llvm::Twine *)&v942, (uint64_t)&v876);
          if (v879 < 0)
            operator delete(v878);
          if (v877 < 0)
          {
            v624 = v876;
            goto LABEL_1148;
          }
          goto LABEL_1149;
        }
        v954.__r_.__value_.__r.__words[0] = (std::string::size_type)v880;
        if ((*((_BYTE *)v880[0] + 23) & 0x10) != 0)
        {
          v594 = ***(_QWORD ***)v880[0];
          v595 = *(_QWORD *)(v594 + 152);
          v596 = *(unsigned int *)(v594 + 168);
          if (!(_DWORD)v596)
            goto LABEL_1134;
          LODWORD(v597) = (v596 - 1) & ((LODWORD(v880[0]) >> 4) ^ (LODWORD(v880[0]) >> 9));
          v598 = v595 + 16 * v597;
          v599 = *(void **)v598;
          if (*(void **)v598 != v880[0])
          {
            v600 = 1;
            while (v599 != (void *)-4096)
            {
              v601 = v597 + v600++;
              v597 = v601 & (v596 - 1);
              v599 = *(void **)(v595 + 16 * v597);
              if (v599 == v880[0])
              {
                v598 = v595 + 16 * v597;
                goto LABEL_1135;
              }
            }
LABEL_1134:
            v598 = v595 + 16 * v596;
          }
LABEL_1135:
          v664 = *(_QWORD **)(v598 + 8);
          v667 = *v664;
          v666 = (char *)(v664 + 2);
          v665 = v667;
        }
        else
        {
          v665 = 0;
          v666 = &byte_1C871356D;
        }
        *(_QWORD *)v958 = "PGORawCounts_";
        *(_QWORD *)&v958[16] = v666;
        *(_QWORD *)&v958[24] = v665;
        *(_WORD *)&v958[32] = 1283;
        LOWORD(v944) = 257;
        HIBYTE(v932) = 0;
        LOBYTE(v930) = 0;
        sub_1C58C7294((uint64_t)&__dst, (uint64_t *)&v954, (llvm::Twine *)v958, (llvm::Twine *)&v942, (uint64_t)&v930);
        if (SHIBYTE(v932) < 0)
          operator delete(v930);
        v668 = HIBYTE(v927);
        if (SHIBYTE(v927) >= 0)
          v669 = HIBYTE(v927) & 0x7F;
        else
          v669 = __dst.n128_u64[1];
        if (v669)
        {
          if (SHIBYTE(v927) >= 0)
            v670 = &__dst;
          else
            v670 = (__n128 *)__dst.n128_u64[0];
          llvm::DisplayGraph(v670, v669, 0, 0);
          v668 = HIBYTE(v927);
        }
        if (v668 < 0)
        {
          v624 = (void *)__dst.n128_u64[0];
LABEL_1148:
          operator delete(v624);
        }
LABEL_1149:
        v38 = (void *)v853;
      }
LABEL_1150:
      if (byte_1ED816618)
        v671 = 0;
      else
        v671 = byte_1ED816558 == 0;
      if (v671 && byte_1ED816498 == 0)
      {
        v43 = v851;
        goto LABEL_872;
      }
      *(_QWORD *)v958 = &v958[16];
      *(_QWORD *)&v958[8] = 0x100000000;
      HIDWORD(v961) = 0;
      *(_QWORD *)&v958[24] = 0;
      *(_QWORD *)&v958[32] = 0;
      LODWORD(v959) = 0;
      LOBYTE(v961) = 0;
      *((_QWORD *)&v959 + 1) = 0;
      v960 = (uint64_t)v850;
      sub_1C53BA620((uint64_t)v958, 0);
      v931 = 0;
      v930 = 0;
      LODWORD(v932) = 0;
      v933 = 0u;
      v934 = 0u;
      v935 = 0;
      v936 = v938;
      v937 = 0x400000000;
      v938[5] = 0;
      v939[0] = 0;
      v938[4] = v939;
      v939[1] = 1;
      llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v930, (uint64_t)v958);
      sub_1C4DC4E38((uint64_t *)&v958[24]);
      if (*(_BYTE **)v958 != &v958[16])
        free(*(void **)v958);
      sub_1C4EEA178((uint64_t)&__dst, (const llvm::Function *)v850, (uint64_t)&v930, 0, 0, 0);
      if (byte_1ED816498)
      {
        v673 = (uint64_t ***)v880[0];
        v915.__r_.__value_.__r.__words[0] = 0;
        llvm::BlockFrequencyInfo::calculate((uint64_t **)&v915, (llvm::Value *)v880[0]);
        v958[28] = v958[28] & 0xF0 | 3;
        *(_DWORD *)&v958[24] = -1023;
        v674 = &unk_1C866F198;
        *(_QWORD *)&v958[8] = &unk_1C866F198;
        *(_QWORD *)&v958[16] = 0;
        BYTE12(v943) = BYTE12(v943) & 0xF0 | 3;
        DWORD2(v943) = -1023;
        *((_QWORD *)&v942 + 1) = &unk_1C866F198;
        *(_QWORD *)&v943 = 0;
        v675 = (uint64_t ***)v673[10];
        if (v675 == v673 + 9)
        {
          v676 = 0;
        }
        else
        {
          do
          {
            if (v675)
              v677 = (const llvm::BasicBlock *)(v675 - 3);
            else
              v677 = 0;
            v954.__r_.__value_.__r.__words[0] = 0;
            if (sub_1C49F21C0(v897[1], v897[3], (uint64_t)v677, &v954))
              v678 = v954.__r_.__value_.__r.__words[0] == v897[1] + 16 * LODWORD(v897[3]);
            else
              v678 = 1;
            if (!v678 && *(_QWORD *)(v954.__r_.__value_.__r.__words[0] + 8))
            {
              BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount((uint64_t **)&v915, v677, 0);
              v954.__r_.__value_.__r.__words[0] = 0;
              v680 = sub_1C49F21C0(v897[1], v897[3], (uint64_t)v677, &v954);
              v681 = v954.__r_.__value_.__r.__words[0];
              if (!v680)
                v681 = v897[1] + 16 * LODWORD(v897[3]);
              v682 = (double)*(unint64_t *)(*(_QWORD *)(v681 + 8) + 16);
              LODWORD(v918.__r_.__value_.__r.__words[1]) = 64;
              *(double *)&v918.__r_.__value_.__l.__data_ = v682;
              llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v922, (const llvm::APInt **)&v918);
              *(_OWORD *)&v954.__r_.__value_.__r.__words[1] = *(_OWORD *)&v922.__r_.__value_.__l.__data_;
              LODWORD(v955) = v922.__r_.__value_.__r.__words[2];
              BYTE4(v955) = BYTE4(v955) & 0xF0 | v922.__r_.__value_.__s.__data_[20] & 0xF;
              sub_1C47B4138((uint64_t)v958, (uint64_t)&v954, 1);
              if ((_UNKNOWN *)v954.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v954.__r_.__value_.__r.__words[2]);
              }
              else if ((*(_DWORD *)(v954.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
                     && v954.__r_.__value_.__r.__words[2])
              {
                MEMORY[0x1CAA32F9C](v954.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
              }
              LODWORD(v918.__r_.__value_.__r.__words[1]) = 64;
              *(double *)&v918.__r_.__value_.__l.__data_ = (double)(unint64_t)BlockProfileCount;
              llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v922, (const llvm::APInt **)&v918);
              *(_OWORD *)&v954.__r_.__value_.__r.__words[1] = *(_OWORD *)&v922.__r_.__value_.__l.__data_;
              LODWORD(v955) = v922.__r_.__value_.__r.__words[2];
              BYTE4(v955) = BYTE4(v955) & 0xF0 | v922.__r_.__value_.__s.__data_[20] & 0xF;
              sub_1C47B4138((uint64_t)&v942, (uint64_t)&v954, 1);
              if ((_UNKNOWN *)v954.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v954.__r_.__value_.__r.__words[2]);
              }
              else if ((*(_DWORD *)(v954.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
                     && v954.__r_.__value_.__r.__words[2])
              {
                MEMORY[0x1CAA32F9C](v954.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
              }
            }
            v675 = (uint64_t ***)v675[1];
          }
          while (v675 != v673 + 9);
          v676 = *(_BYTE **)&v958[16];
          v674 = *(void **)&v958[8];
        }
        if (v674 != &unk_1C866F1C0)
          v676 = v958;
        if ((v676[28] & 7) != 3)
        {
          if (*((_UNKNOWN **)&v942 + 1) == &unk_1C866F1C0)
            v683 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v942 + 8), (const llvm::detail::DoubleAPFloat *)&v958[8]);
          else
            llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)((char *)&v942 + 8), (const llvm::detail::IEEEFloat *)&v958[8]);
          if (v683 != 1)
          {
            if (*(_UNKNOWN **)&v958[8] == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v954.__r_.__value_.__r.__words[1], (const llvm::detail::DoubleAPFloat *)&v958[8]);
            }
            else
            {
              v954.__r_.__value_.__l.__size_ = *(_QWORD *)&v958[8];
              if ((*(_DWORD *)(*(_QWORD *)&v958[8] + 8) + 64) >= 0x80)
                v954.__r_.__value_.__r.__words[2] = operator new[]();
              v684 = v958[28] & 7;
              BYTE4(v955) = BYTE4(v955) & 0xF0 | v958[28] & 0xF;
              LODWORD(v955) = *(_DWORD *)&v958[24];
              v686 = (v958[28] & 6) != 0 && v684 != 3;
              if (v684 == 1 || v686)
              {
                v687 = *(unsigned int *)(v954.__r_.__value_.__l.__size_ + 8);
                v688 = &v954.__r_.__value_.__r.__words[2];
                if ((v687 - 64) <= 0xFFFFFF7F)
                  v688 = (std::string::size_type *)v954.__r_.__value_.__r.__words[2];
                v689 = (std::string::size_type *)&v958[16];
                if ((*(_DWORD *)(*(_QWORD *)&v958[8] + 8) - 64) < 0xFFFFFF80)
                  v689 = *(std::string::size_type **)&v958[16];
                if (v687 <= 0xFFFFFFBF)
                {
                  v690 = (unint64_t)(v687 + 64) >> 6;
                  do
                  {
                    v691 = *v689++;
                    *v688++ = v691;
                    --v690;
                  }
                  while (v690);
                }
              }
            }
            sub_1C47B1140((uint64_t)&v954, (uint64_t)&v942, 1);
            v692 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v954);
            if ((_UNKNOWN *)v954.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v954.__r_.__value_.__r.__words[2]);
            }
            else if ((*(_DWORD *)(v954.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
                   && v954.__r_.__value_.__r.__words[2])
            {
              MEMORY[0x1CAA32F9C](v954.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
            }
            if (v692 >= 1.001 || v692 <= 0.999)
            {
              v693 = v673[10];
              if (v693)
                v694 = (uint64_t)(v693 - 3);
              else
                v694 = 0;
              v954.__r_.__value_.__r.__words[0] = 0;
              v695 = sub_1C49F21C0(v897[1], v897[3], v694, &v954);
              v696 = v954.__r_.__value_.__r.__words[0];
              if (!v695)
                v696 = v897[1] + 16 * LODWORD(v897[3]);
              v697 = *(_QWORD *)(*(_QWORD *)(v696 + 8) + 16);
              v698 = (double)v697 * v692 + 0.5;
              if ((unint64_t)v698 <= 1)
                v699 = 1;
              else
                v699 = (unint64_t)v698;
              if (v699 != v697)
                llvm::Function::setEntryCount(v673, v699, 0, 0);
            }
          }
        }
        if (*((_UNKNOWN **)&v942 + 1) == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v943);
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v942 + 1) + 8) - 64) <= 0xFFFFFF7F && (_QWORD)v943)
        {
          MEMORY[0x1CAA32F9C](v943, 0x1000C8000313F17);
        }
        if (*(_UNKNOWN **)&v958[8] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v958[16]);
        }
        else if ((*(_DWORD *)(*(_QWORD *)&v958[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v958[16])
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)&v958[16], 0x1000C8000313F17);
        }
        v700 = v915.__r_.__value_.__r.__words[0];
        v915.__r_.__value_.__r.__words[0] = 0;
        if (v700)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v700 + 8))(v700);
      }
      if (!byte_1ED816558)
      {
        v701 = 0;
        goto LABEL_1235;
      }
      if (*(_BYTE *)(a13 + 24))
        v701 = *(_QWORD *)(a13 + 16);
      else
        v701 = -1;
      if (*(_BYTE *)(a13 + 40))
        v866 = *(llvm::LLVMContext **)(a13 + 32);
      else
LABEL_1235:
        v866 = 0;
      v702 = (const llvm::Function *)v880[0];
      v914 = 0;
      llvm::BlockFrequencyInfo::calculate(&v914, (llvm::Value *)v880[0]);
      v870 = byte_1ED816558;
      v912 = 0;
      v911 = 0;
      v913 = 0;
      llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v909, v702);
      v704 = (_QWORD *)*((_QWORD *)v702 + 10);
      if (v704 == (_QWORD *)((char *)v702 + 72))
        goto LABEL_1406;
      v705 = (_QWORD *)((char *)v702 + 72);
      v875 = 0;
      v706 = 0;
      v707 = 0;
      v863 = (std::string::size_type)v702;
      v861 = (v702 >> 4) ^ (v702 >> 9);
      v708 = (unsigned int *)&unk_1ED816000;
      while (2)
      {
        if (v704)
          v709 = (const llvm::BasicBlock *)(v704 - 3);
        else
          v709 = 0;
        *(_QWORD *)v958 = 0;
        v710 = sub_1C49F21C0(v897[1], v897[3], (uint64_t)v709, v958);
        v711 = v897[1] + 16 * LODWORD(v897[3]);
        if (v710)
          v712 = *(_QWORD *)v958;
        else
          v712 = v897[1] + 16 * LODWORD(v897[3]);
        if (*(_BYTE *)(*(_QWORD *)(v712 + 8) + 24))
        {
          *(_QWORD *)v958 = 0;
          v713 = sub_1C49F21C0(v897[1], v897[3], (uint64_t)v709, v958);
          v714 = *(_QWORD *)v958;
          if (!v713)
            v714 = v711;
          v715 = *(_QWORD *)(*(_QWORD *)(v714 + 8) + 16);
        }
        else
        {
          v715 = 0;
        }
        if (v715)
          ++v706;
        v716 = llvm::BlockFrequencyInfo::getBlockProfileCount(&v914, v709, 0);
        if ((_BYTE)v703)
          v717 = (unint64_t)v716;
        else
          v717 = 0;
        if (!v870)
        {
          v735 = v708[486];
          if (v715 < v735 && v717 < v735)
            goto LABEL_1284;
          v736 = v715 - v717;
          if (v717 >= v715)
            v736 = v717 - v715;
          if (v736 <= v715 / 0x64 * dword_1ED8166D8)
            goto LABEL_1284;
LABEL_1261:
          ++v875;
          v718 = ***(_QWORD ***)v909[0];
          if (!*(_QWORD *)(v718 + 128)
            && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v718 + 72) + 48))(*(_QWORD *)(v718 + 72)))
          {
            goto LABEL_1284;
          }
          if ((*(_BYTE *)(v863 + 23) & 0x20) == 0)
            goto LABEL_1286;
          v719 = ***(_QWORD ***)v863;
          *(_QWORD *)&v942 = v863;
          v720 = *(_DWORD *)(v719 + 2496);
          if (!v720)
          {
            v758 = 0;
            goto LABEL_1334;
          }
          v721 = *(_QWORD *)(v719 + 2480);
          v722 = v720 - 1;
          v723 = v722 & v861;
          v724 = (_QWORD *)(v721 + 40 * (v722 & v861));
          v725 = *v724;
          if (*v724 != v863)
          {
            v726 = 0;
            v727 = 1;
            while (v725 != -4096)
            {
              if (v726)
                v728 = 0;
              else
                v728 = v725 == -8192;
              if (v728)
                v726 = v724;
              v729 = v723 + v727++;
              v723 = v729 & v722;
              v724 = (_QWORD *)(v721 + 40 * v723);
              v725 = *v724;
              if (*v724 == v863)
                goto LABEL_1274;
            }
            if (v726)
              v758 = v726;
            else
              v758 = v724;
LABEL_1334:
            v724 = sub_1C541AB24(v719 + 2480, (uint64_t)&v942, (uint64_t *)&v942, v758);
            v759 = v942;
            v724[4] = 0;
            v724[3] = 0;
            *v724 = v759;
            v724[1] = v724 + 3;
            v724[2] = 0x100000000;
          }
LABEL_1274:
          v730 = *((unsigned int *)v724 + 4);
          if ((_DWORD)v730)
          {
            v731 = (_QWORD *)(v724[1] + 8);
            v732 = 16 * v730;
            while (*((_DWORD *)v731 - 2))
            {
              LODWORD(v733) = 0;
              v734 = 0;
              v731 += 2;
              v732 -= 16;
              if (!v732)
                goto LABEL_1288;
            }
            v733 = *v731;
            if (*v731)
            {
              v734 = *v731;
              if (*(_BYTE *)v733 != 15)
                v734 = *(_QWORD *)(v733 - 8 * *(unsigned int *)(v733 + 8));
              LODWORD(v733) = *(_DWORD *)(v733 + 28);
LABEL_1288:
              v737 = (_QWORD **)*((_QWORD *)v709 + 7);
              *(_DWORD *)&v958[8] = 11;
              v958[12] = 2;
              *(_QWORD *)&v958[16] = v737;
              *(_QWORD *)&v958[24] = v734;
              *(_DWORD *)&v958[32] = v733;
              *(_DWORD *)&v958[36] = 0;
              *(_QWORD *)&v959 = "pgo-instrumentation";
              *((_QWORD *)&v959 + 1) = "bfi-verify";
              v960 = 10;
              LOBYTE(v961) = 0;
              LOBYTE(v962) = 0;
              v963 = v965;
              v964 = 0x400000000;
              v967 = 0;
              v968 = -1;
              v969 = v709;
              *(_QWORD *)v958 = &off_1E814E570;
              *(_QWORD *)&v942 = "BB ";
              *((_QWORD *)&v942 + 1) = 3;
              sub_1C53B17B4((uint64_t)&v963, (const void **)&v942);
              if ((*((_BYTE *)v709 + 23) & 0x10) != 0)
              {
                v738 = ***(_QWORD ***)v709;
                v739 = *(_QWORD *)(v738 + 152);
                v740 = *(unsigned int *)(v738 + 168);
                if (!(_DWORD)v740)
                  goto LABEL_1295;
                LODWORD(v741) = (v740 - 1) & ((v709 >> 4) ^ (v709 >> 9));
                v742 = (const llvm::BasicBlock **)(v739 + 16 * v741);
                v743 = *v742;
                if (*v742 != v709)
                {
                  v744 = 1;
                  while (v743 != (const llvm::BasicBlock *)-4096)
                  {
                    v745 = v741 + v744++;
                    v741 = v745 & (v740 - 1);
                    v743 = *(const llvm::BasicBlock **)(v739 + 16 * v741);
                    if (v743 == v709)
                    {
                      v742 = (const llvm::BasicBlock **)(v739 + 16 * v741);
                      goto LABEL_1296;
                    }
                  }
LABEL_1295:
                  v742 = (const llvm::BasicBlock **)(v739 + 16 * v740);
                }
LABEL_1296:
                v746 = v742[1];
                v749 = *(_QWORD *)v746;
                v747 = (char *)v746 + 16;
                v748 = v749;
              }
              else
              {
                v748 = 0;
                v747 = &byte_1C871356D;
              }
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v942, "Block", 5uLL, v747, v748);
              v750 = sub_1C47E3888((uint64_t)v958, (uint64_t)&v942);
              v954.__r_.__value_.__r.__words[0] = (std::string::size_type)" Count=";
              v954.__r_.__value_.__l.__size_ = 7;
              sub_1C53B17B4(v750 + 80, (const void **)&v954.__r_.__value_.__l.__data_);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v954, "Count", 5uLL, v715);
              v751 = sub_1C47E3888(v750, (uint64_t)&v954);
              v922.__r_.__value_.__r.__words[0] = (std::string::size_type)" BFI_Count=";
              v922.__r_.__value_.__l.__size_ = 11;
              sub_1C53B17B4(v751 + 80, (const void **)&v922.__r_.__value_.__l.__data_);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v922, "Count", 5uLL, v717);
              sub_1C47E3888(v751, (uint64_t)&v922);
              if (v925 < 0)
                operator delete(v923);
              if (SHIBYTE(v922.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v922.__r_.__value_.__l.__data_);
              v708 = (_DWORD *)&unk_1ED816000;
              if (v957 < 0)
                operator delete(v955);
              if (SHIBYTE(v954.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v954.__r_.__value_.__l.__data_);
              if (v946 < 0)
                operator delete(*((void **)&v943 + 1));
              if (SBYTE7(v943) < 0)
                operator delete((void *)v942);
              v752 = HIBYTE(v913) & 0x7F;
              if (v913 < 0)
                v752 = v912;
              if (v752)
              {
                v918.__r_.__value_.__r.__words[0] = (std::string::size_type)" (";
                v918.__r_.__value_.__l.__size_ = 2;
                sub_1C53B17B4((uint64_t)&v963, (const void **)&v918.__r_.__value_.__l.__data_);
                v753 = v911;
                if (v913 >= 0)
                  v753 = &v911;
                v754 = HIBYTE(v913) & 0x7F;
                if (v913 < 0)
                  v754 = v912;
                v918.__r_.__value_.__r.__words[0] = (std::string::size_type)v753;
                v918.__r_.__value_.__l.__size_ = v754;
                sub_1C53B17B4((uint64_t)&v963, (const void **)&v918.__r_.__value_.__l.__data_);
                v918.__r_.__value_.__r.__words[0] = (std::string::size_type)")";
                v918.__r_.__value_.__l.__size_ = 1;
                sub_1C53B17B4((uint64_t)&v963, (const void **)&v918.__r_.__value_.__l.__data_);
              }
              llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v909, (llvm::DiagnosticInfoOptimizationBase *)v958);
              *(_QWORD *)v958 = &off_1E814E790;
              v755 = (char *)v963;
              if ((_DWORD)v964)
              {
                v756 = (unint64_t)v964 << 6;
                do
                {
                  v757 = (void **)&v755[v756];
                  if (v755[v756 - 17] < 0)
                    operator delete(*(v757 - 5));
                  if (*((char *)v757 - 41) < 0)
                    operator delete(*(v757 - 8));
                  v756 -= 64;
                }
                while (v756);
                v755 = (char *)v963;
                v708 = (_DWORD *)&unk_1ED816000;
              }
              if (v755 != (char *)v965)
                free(v755);
              goto LABEL_1284;
            }
          }
          else
          {
LABEL_1286:
            LODWORD(v733) = 0;
          }
          v734 = 0;
          goto LABEL_1288;
        }
        if (v715 >= v701 && (v703 = "raw-Hot to BFI-nonHot", v717 < v701)
          || v715 <= (unint64_t)v866 && (v703 = "raw-Cold to BFI-Hot", v717 >= v701))
        {
          MEMORY[0x1CAA32ABC](&v911, v703);
          goto LABEL_1261;
        }
LABEL_1284:
        ++v707;
        v704 = (_QWORD *)v704[1];
        if (v704 != v705)
          continue;
        break;
      }
      if (!v875)
        goto LABEL_1406;
      v760 = ***(_QWORD ***)v909[0];
      if (!*(_QWORD *)(v760 + 128)
        && !(*(unsigned int (**)(_QWORD, const char *))(**(_QWORD **)(v760 + 72) + 48))(*(_QWORD *)(v760 + 72), v703))
      {
        goto LABEL_1406;
      }
      if ((*(_BYTE *)(v863 + 23) & 0x20) == 0)
        goto LABEL_1356;
      v761 = ***(_QWORD ***)v863;
      v954.__r_.__value_.__r.__words[0] = v863;
      v762 = *(_DWORD *)(v761 + 2496);
      if (!v762)
      {
        v805 = 0;
        goto LABEL_1422;
      }
      v763 = *(_QWORD *)(v761 + 2480);
      v764 = v762 - 1;
      v765 = v764 & v861;
      v766 = (_QWORD *)(v763 + 40 * (v764 & v861));
      v767 = *v766;
      if (*v766 != v863)
      {
        v768 = 0;
        v769 = 1;
        while (v767 != -4096)
        {
          if (v768)
            v770 = 0;
          else
            v770 = v767 == -8192;
          if (v770)
            v768 = v766;
          v771 = v765 + v769++;
          v765 = v771 & v764;
          v766 = (_QWORD *)(v763 + 40 * v765);
          v767 = *v766;
          if (*v766 == v863)
            goto LABEL_1351;
        }
        if (v768)
          v805 = v768;
        else
          v805 = v766;
LABEL_1422:
        v766 = sub_1C541AB24(v761 + 2480, (uint64_t)&v954, (uint64_t *)&v954, v805);
        v806 = v954.__r_.__value_.__r.__words[0];
        v766[4] = 0;
        v766[3] = 0;
        *v766 = v806;
        v766[1] = v766 + 3;
        v766[2] = 0x100000000;
      }
LABEL_1351:
      v772 = *((unsigned int *)v766 + 4);
      if (!(_DWORD)v772)
      {
LABEL_1356:
        LODWORD(v775) = 0;
LABEL_1357:
        v776 = 0;
        goto LABEL_1358;
      }
      v773 = (_QWORD *)(v766[1] + 8);
      v774 = 16 * v772;
      while (*((_DWORD *)v773 - 2))
      {
        LODWORD(v775) = 0;
        v776 = 0;
        v773 += 2;
        v774 -= 16;
        if (!v774)
          goto LABEL_1358;
      }
      v775 = *v773;
      if (!*v773)
        goto LABEL_1357;
      v776 = *v773;
      if (*(_BYTE *)v775 != 15)
        v776 = *(_QWORD *)(v775 - 8 * *(unsigned int *)(v775 + 8));
      LODWORD(v775) = *(_DWORD *)(v775 + 28);
LABEL_1358:
      v777 = *(_QWORD *)(v863 + 80);
      if (v777)
        v778 = (const llvm::BasicBlock *)(v777 - 24);
      else
        v778 = 0;
      v779 = *((_QWORD *)v778 + 7);
      *(_DWORD *)&v958[8] = 11;
      v958[12] = 2;
      *(_QWORD *)&v958[16] = v779;
      *(_QWORD *)&v958[24] = v776;
      *(_DWORD *)&v958[32] = v775;
      *(_DWORD *)&v958[36] = 0;
      *(_QWORD *)&v959 = "pgo-instrumentation";
      *((_QWORD *)&v959 + 1) = "bfi-verify";
      v960 = 10;
      LOBYTE(v961) = 0;
      LOBYTE(v962) = 0;
      v963 = v965;
      v964 = 0x400000000;
      v967 = 0;
      v968 = -1;
      v969 = v778;
      *(_QWORD *)v958 = &off_1E814E570;
      v954.__r_.__value_.__r.__words[0] = (std::string::size_type)"In Func ";
      v954.__r_.__value_.__l.__size_ = 8;
      sub_1C53B17B4((uint64_t)&v963, (const void **)&v954.__r_.__value_.__l.__data_);
      if ((*(_BYTE *)(v863 + 23) & 0x10) != 0)
      {
        v780 = ***(_QWORD ***)v863;
        v781 = *(_QWORD *)(v780 + 152);
        v782 = *(unsigned int *)(v780 + 168);
        if (!(_DWORD)v782)
          goto LABEL_1368;
        LODWORD(v783) = (v782 - 1) & v861;
        v784 = (uint64_t *)(v781 + 16 * v783);
        v785 = *v784;
        if (*v784 != v863)
        {
          v786 = 1;
          while (v785 != -4096)
          {
            v787 = v783 + v786++;
            v783 = v787 & (v782 - 1);
            v785 = *(_QWORD *)(v781 + 16 * v783);
            if (v785 == v863)
            {
              v784 = (uint64_t *)(v781 + 16 * v783);
              goto LABEL_1369;
            }
          }
LABEL_1368:
          v784 = (uint64_t *)(v781 + 16 * v782);
        }
LABEL_1369:
        v788 = (_QWORD *)v784[1];
        v791 = *v788;
        v789 = (char *)(v788 + 2);
        v790 = v791;
      }
      else
      {
        v790 = 0;
        v789 = &byte_1C871356D;
      }
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v954, "Function", 8uLL, v789, v790);
      v792 = sub_1C47E3888((uint64_t)v958, (uint64_t)&v954);
      v922.__r_.__value_.__r.__words[0] = (std::string::size_type)": Num_of_BB=";
      v922.__r_.__value_.__l.__size_ = 12;
      sub_1C53B17B4(v792 + 80, (const void **)&v922.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v922, "Count", 5uLL, v707);
      v793 = sub_1C47E3888(v792, (uint64_t)&v922);
      v918.__r_.__value_.__r.__words[0] = (std::string::size_type)", Num_of_non_zerovalue_BB=";
      v918.__r_.__value_.__l.__size_ = 26;
      sub_1C53B17B4(v793 + 80, (const void **)&v918.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v918, "Count", 5uLL, v706);
      v794 = sub_1C47E3888(v793, (uint64_t)&v918);
      v915.__r_.__value_.__r.__words[0] = (std::string::size_type)", Num_of_mis_matching_BB=";
      v915.__r_.__value_.__l.__size_ = 25;
      sub_1C53B17B4(v794 + 80, (const void **)&v915.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v915, "Count", 5uLL, v875);
      v795 = sub_1C47E3888(v794, (uint64_t)&v915);
      sub_1C61998EC((uint64_t)&v942, v795);
      *(_QWORD *)&v942 = &off_1E814E570;
      if (v917 < 0)
        operator delete(v916);
      if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v915.__r_.__value_.__l.__data_);
      if (v921 < 0)
        operator delete(v919);
      if (SHIBYTE(v918.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v918.__r_.__value_.__l.__data_);
      if (v925 < 0)
        operator delete(v923);
      if (SHIBYTE(v922.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v922.__r_.__value_.__l.__data_);
      if (v957 < 0)
        operator delete(v955);
      if (SHIBYTE(v954.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v954.__r_.__value_.__l.__data_);
      *(_QWORD *)v958 = &off_1E814E790;
      v796 = (char *)v963;
      if ((_DWORD)v964)
      {
        v797 = (unint64_t)v964 << 6;
        do
        {
          v798 = (void **)&v796[v797];
          if (v796[v797 - 17] < 0)
            operator delete(*(v798 - 5));
          if (*((char *)v798 - 41) < 0)
            operator delete(*(v798 - 8));
          v797 -= 64;
        }
        while (v797);
        v796 = (char *)v963;
      }
      if (v796 != (char *)v965)
        free(v796);
      llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v909, (llvm::DiagnosticInfoOptimizationBase *)&v942);
      *(_QWORD *)&v942 = &off_1E814E790;
      v799 = (char *)v951;
      if (v952)
      {
        v800 = (unint64_t)v952 << 6;
        do
        {
          v801 = (void **)&v799[v800];
          if (v799[v800 - 17] < 0)
            operator delete(*(v801 - 5));
          if (*((char *)v801 - 41) < 0)
            operator delete(*(v801 - 8));
          v800 -= 64;
        }
        while (v800);
        v799 = (char *)v951;
      }
      if (v799 != (char *)&v953)
        free(v799);
LABEL_1406:
      v802 = v910;
      v910 = 0;
      v43 = v851;
      if (v802)
      {
        v803 = *v802;
        *v802 = 0;
        if (v803)
          (*(void (**)(uint64_t, const char *))(*(_QWORD *)v803 + 8))(v803, v703);
        MEMORY[0x1CAA32FC0](v802, 0x20C4093837F09);
      }
      if (SHIBYTE(v913) < 0)
        operator delete(v911);
      v804 = v914;
      v914 = 0;
      v38 = (void *)v853;
      if (v804)
        (*(void (**)(uint64_t *, const char *))(*v804 + 8))(v804, v703);
      sub_1C4DC0BBC((uint64_t)&__dst);
      llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v930);
LABEL_872:
      sub_1C62AFE18((uint64_t)&v903[8]);
      v509 = v897[1];
      if (LODWORD(v897[3]))
      {
        v510 = 16 * LODWORD(v897[3]);
        v511 = (_QWORD *)(v897[1] + 8);
        do
        {
          if ((*(v511 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
            sub_1C58C899C(v511, 0);
          v511 += 2;
          v510 -= 16;
        }
        while (v510);
        v509 = v897[1];
        v38 = (void *)v853;
      }
      MEMORY[0x1CAA32FB4](v509, 8);
      v512 = (_QWORD *)v896;
      if ((_QWORD)v896)
      {
        v513 = (_QWORD *)*((_QWORD *)&v896 + 1);
        v514 = (void *)v896;
        if (*((_QWORD *)&v896 + 1) != (_QWORD)v896)
        {
          do
          {
            v516 = *--v513;
            v515 = v516;
            *v513 = 0;
            if (v516)
              MEMORY[0x1CAA32FC0](v515, 0x1060C40F4AFCA5ALL);
          }
          while (v513 != v512);
          v514 = (void *)v896;
        }
        *((_QWORD *)&v896 + 1) = v512;
        operator delete(v514);
        v38 = (void *)v853;
      }
      if (SHIBYTE(v893[3]) < 0)
        operator delete((void *)v893[1]);
      *(_QWORD *)v958 = v887;
      sub_1C4DB60AC((void ***)v958);
      v517 = v886;
      v886 = 0;
      a8 = v854;
      if (v517)
        MEMORY[0x1CAA32FC0](v517, 0x20C40DC1BFBCFLL);
      v41 = v848;
      v42 = (std::string::size_type)v849;
      v40 = v853 + 24;
LABEL_890:
      v41 = *(_QWORD *)(v41 + 8);
      if (v41 == v40)
      {
        if (v846 != v43)
        {
          v807 = v846;
          do
          {
            v808 = *(_QWORD *)v807;
            v807 += 8;
            *(_QWORD *)(v808 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v808 + 112), **(uint64_t ***)v808, -1, 13);
          }
          while (v807 != v43);
        }
        v809 = v852;
        if (v852 != (uint64_t ****)v42)
        {
          v810 = v852;
          while (1)
          {
            v812 = (*v810)[14];
            if (v812)
            {
              if ((*((_BYTE *)v812 + 13) & 1) != 0)
                break;
            }
            v811 = *v810;
            v811[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)*v810 + 14, **v811, -1, 5);
LABEL_1493:
            ++v810;
            v809 = v852;
            if (v810 == (uint64_t ****)v42)
              goto LABEL_1496;
          }
          v813 = *(uint64_t **)v853;
          BYTE7(v943) = 9;
          strcpy((char *)&v942, "Function ");
          v814 = *v810;
          if ((*((_BYTE *)*v810 + 23) & 0x10) != 0)
          {
            v815 = ***v814;
            v816 = *(_QWORD *)(v815 + 152);
            v817 = *(unsigned int *)(v815 + 168);
            if (!(_DWORD)v817)
              goto LABEL_1467;
            LODWORD(v818) = (v817 - 1) & ((v814 >> 4) ^ (v814 >> 9));
            v819 = (uint64_t ****)(v816 + 16 * v818);
            v820 = *v819;
            if (*v819 != v814)
            {
              v821 = 1;
              while (v820 != (uint64_t ***)-4096)
              {
                v822 = v818 + v821++;
                v818 = v822 & (v817 - 1);
                v820 = *(uint64_t ****)(v816 + 16 * v818);
                if (v820 == v814)
                {
                  v819 = (uint64_t ****)(v816 + 16 * v818);
                  goto LABEL_1468;
                }
              }
LABEL_1467:
              v819 = (uint64_t ****)(v816 + 16 * v817);
            }
LABEL_1468:
            v823 = (unint64_t *)v819[1];
            v826 = *v823;
            v825 = v823 + 2;
            v824 = v826;
            if (v826 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_1505;
            if (v824 >= 0x17)
            {
              v828 = (v824 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v824 | 7) != 0x17)
                v828 = v824 | 7;
              v829 = v828 + 1;
              v827 = (__n128 *)operator new(v828 + 1);
              v927 = (const char *)(v829 | 0x8000000000000000);
              __dst.n128_u64[0] = (unint64_t)v827;
              __dst.n128_u64[1] = v824;
            }
            else
            {
              HIBYTE(v927) = v824;
              v827 = &__dst;
              if (!v824)
                goto LABEL_1476;
            }
            memmove(v827, v825, v824);
          }
          else
          {
            v824 = 0;
            HIBYTE(v927) = 0;
            v827 = &__dst;
          }
LABEL_1476:
          v827->n128_u8[v824] = 0;
          if (SHIBYTE(v927) >= 0)
            v830 = &__dst;
          else
            v830 = (__n128 *)__dst.n128_u64[0];
          if (SHIBYTE(v927) >= 0)
            v831 = HIBYTE(v927) & 0x7F;
          else
            v831 = __dst.n128_u64[1];
          v832 = std::string::append((std::string *)&v942, (const std::string::value_type *)v830, v831);
          v833 = v832->__r_.__value_.__r.__words[2];
          *(_OWORD *)v958 = *(_OWORD *)&v832->__r_.__value_.__l.__data_;
          *(_QWORD *)&v958[16] = v833;
          v832->__r_.__value_.__l.__size_ = 0;
          v832->__r_.__value_.__r.__words[2] = 0;
          v832->__r_.__value_.__r.__words[0] = 0;
          v834 = (char *)operator new(0x38uLL);
          strcpy(v834, " is annotated as a hot function but the profile is cold");
          v835 = std::string::append((std::string *)v958, v834, 0x37uLL);
          v836 = (llvm::BlockFrequencyInfo *)v835->__r_.__value_.__r.__words[2];
          *(_OWORD *)v880 = *(_OWORD *)&v835->__r_.__value_.__l.__data_;
          v881 = v836;
          v835->__r_.__value_.__l.__size_ = 0;
          v835->__r_.__value_.__r.__words[2] = 0;
          v835->__r_.__value_.__r.__words[0] = 0;
          operator delete(v834);
          if ((v958[23] & 0x80000000) != 0)
            operator delete(*(void **)v958);
          if (SHIBYTE(v927) < 0)
            operator delete((void *)__dst.n128_u64[0]);
          if (SBYTE7(v943) < 0)
            operator delete((void *)v942);
          if (*(char *)(v853 + 191) >= 0)
            v837 = v853 + 168;
          else
            v837 = *(_QWORD *)(v853 + 168);
          *(_WORD *)&v958[32] = 260;
          *(_QWORD *)v958 = v880;
          DWORD2(v942) = 19;
          BYTE12(v942) = 1;
          *(_QWORD *)&v942 = &unk_1E814E730;
          *(_QWORD *)&v943 = v837;
          *((_QWORD *)&v943 + 1) = v958;
          llvm::LLVMContext::diagnose((uint64_t)v813, (const llvm::DiagnosticInfo *)&v942);
          if (SHIBYTE(v881) < 0)
            operator delete(v880[0]);
          goto LABEL_1493;
        }
LABEL_1496:
        if (v809)
          operator delete(v809);
        if (v846)
          operator delete(v846);
LABEL_1500:
        v838 = v906[0];
        if (v906[0])
        {
          do
          {
            v839 = (_QWORD *)*v838;
            operator delete(v838);
            v838 = v839;
          }
          while (v839);
        }
        v840 = v905[0];
        v905[0] = 0;
        if (v840)
          operator delete(v840);
        v19 = 1;
        goto LABEL_6;
      }
    }
  }
  *(_QWORD *)v958 = "Function entry profiles are not yet supported for optimization";
  *(_WORD *)&v958[32] = 259;
  DWORD2(v942) = 19;
  BYTE12(v942) = 0;
  *(_QWORD *)&v942 = &unk_1E814E730;
  *(_QWORD *)&v943 = a2;
  *((_QWORD *)&v943 + 1) = v958;
  llvm::LLVMContext::diagnose(v17, (const llvm::DiagnosticInfo *)&v942);
LABEL_5:
  v19 = 0;
LABEL_6:
  v20 = v855;
LABEL_27:
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_32:
  v30 = v940;
  v940 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  return v19;
}

void llvm::setProfMetadata(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  uint64_t *v6;
  unint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  llvm::MDNode *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *PredicateName;
  size_t v20;
  uint64_t v21;
  llvm::APInt *v22;
  unsigned int v23;
  uint64_t v24;
  _DWORD *v25;
  const char *v26;
  size_t v27;
  unint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  void **v54;
  char *v55;
  unint64_t v56;
  void **v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t *v60;
  void (**v61)(llvm::raw_ostream *__hidden);
  int v62;
  char *v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  int v68;
  void **v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *__p;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[16];
  _OWORD v80[5];
  void *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t (**v84)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v85;
  char v86;
  char *v87;
  __int128 v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  void **p_p;
  char v93;
  void *v94;
  uint64_t v95;
  _BYTE v96[260];
  int v97;
  uint64_t v98;
  uint64_t v99;

  v6 = a3;
  v99 = *MEMORY[0x1E0C80C00];
  if (a5 >= 0xFFFFFFFF)
    v8 = a5 / 0xFFFFFFFF + 1;
  else
    v8 = 1;
  v76 = *a1;
  v77 = v79;
  v78 = 0x400000000;
  v9 = 0;
  if (a4)
  {
    v11 = 8 * a4;
    v12 = (unint64_t *)a3;
    do
    {
      v13 = *v12;
      if (v9 >= HIDWORD(v78))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v9 + 1, 4);
        v9 = v78;
      }
      *((_DWORD *)v77 + v9) = v13 / v8;
      v9 = v78 + 1;
      LODWORD(v78) = v78 + 1;
      ++v12;
      v11 -= 8;
    }
    while (v11);
    v10 = (unsigned int *)v77;
  }
  else
  {
    v10 = (unsigned int *)v79;
  }
  llvm::misexpect::checkBackendInstrumentation((llvm::misexpect *)a2, v10, v9);
  v14 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v76, (uint64_t)v77, v78);
  if (v14 || *(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0)
    llvm::Value::setMetadata((llvm::Value *)a2, 2, v14);
  if (!byte_1ED816258)
    goto LABEL_38;
  if (*(_BYTE *)(a2 + 16) == 30 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
  {
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)(a2 - 96);
    v18 = *(unsigned __int8 *)(v17 + 16);
    v74 = 0;
    v75 = 0;
    __p = 0;
    if (v17 && v18 == 81)
    {
      v85 = 0;
      LOBYTE(v89) = 0;
      v90 = 0;
      v84 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E81A7208;
      p_p = &__p;
      LODWORD(v91) = 0;
      v87 = 0;
      v88 = 0uLL;
      PredicateName = llvm::CmpInst::getPredicateName(*(_WORD *)(v17 + 18) & 0x3F);
      if (v20
        && (llvm::raw_ostream::write((llvm::raw_ostream *)&v84, PredicateName, v20), (_QWORD)v88 != *((_QWORD *)&v88 + 1)))
      {
        **((_BYTE **)&v88 + 1) = 95;
        ++*((_QWORD *)&v88 + 1);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v84, "_", 1uLL);
      }
      llvm::Type::print(**(llvm::Type ***)(v17 - 64), (llvm::raw_ostream *)&v84, 1, 0);
      v21 = *(_QWORD *)(v17 - 32);
      if (!v21 || *(_BYTE *)(v21 + 16) != 16)
        goto LABEL_80;
      v22 = (llvm::APInt *)(v21 + 24);
      v23 = *(_DWORD *)(v21 + 32);
      if (v23 > 0x40)
      {
        v29 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v21 + 24));
        if (v29 != v23)
        {
          if (v29 != v23 - 1)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(v22) != v23)
            {
LABEL_30:
              v25 = (_DWORD *)*((_QWORD *)&v88 + 1);
              if ((_QWORD)v88 - *((_QWORD *)&v88 + 1) <= 5uLL)
              {
                v26 = "_Const";
                v27 = 6;
LABEL_79:
                llvm::raw_ostream::write((llvm::raw_ostream *)&v84, v26, v27);
LABEL_80:
                v45 = *((_QWORD *)&v88 + 1) - (_QWORD)v87;
                if (*((char **)&v88 + 1) != v87)
                {
                  *((_QWORD *)&v88 + 1) = v87;
                  llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v84, v87, v45);
                }
                v84 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))off_1E81A6E70;
                if ((_DWORD)v91 == 1 && v87)
                  MEMORY[0x1CAA32F9C](v87, 0x1000C8077774924, v45);
                v15 = HIBYTE(v75);
                v16 = v74;
                goto LABEL_33;
              }
              *(_WORD *)(*((_QWORD *)&v88 + 1) + 4) = 29811;
              *v25 = 1852785503;
              v58 = *((_QWORD *)&v88 + 1) + 6;
              goto LABEL_119;
            }
LABEL_77:
            v44 = (_QWORD *)*((_QWORD *)&v88 + 1);
            if ((_QWORD)v88 - *((_QWORD *)&v88 + 1) <= 8uLL)
            {
              v26 = "_MinusOne";
              v27 = 9;
              goto LABEL_79;
            }
            *(_BYTE *)(*((_QWORD *)&v88 + 1) + 8) = 101;
            *v44 = *(_QWORD *)"_MinusOne";
            v58 = *((_QWORD *)&v88 + 1) + 9;
            goto LABEL_119;
          }
LABEL_74:
          if ((_QWORD)v88 - *((_QWORD *)&v88 + 1) <= 3uLL)
          {
            v26 = "_One";
            v27 = 4;
            goto LABEL_79;
          }
          **((_DWORD **)&v88 + 1) = 1701728095;
          v58 = *((_QWORD *)&v88 + 1) + 4;
          goto LABEL_119;
        }
      }
      else
      {
        v24 = *(_QWORD *)v22;
        if (*(_QWORD *)v22)
        {
          if (v24 != 1)
          {
            if (v23 && v24 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v23)
              goto LABEL_30;
            goto LABEL_77;
          }
          goto LABEL_74;
        }
      }
      v30 = (_DWORD *)*((_QWORD *)&v88 + 1);
      if ((_QWORD)v88 - *((_QWORD *)&v88 + 1) <= 4uLL)
      {
        v26 = "_Zero";
        v27 = 5;
        goto LABEL_79;
      }
      *(_BYTE *)(*((_QWORD *)&v88 + 1) + 4) = 111;
      *v30 = 1919244895;
      v58 = *((_QWORD *)&v88 + 1) + 5;
LABEL_119:
      *((_QWORD *)&v88 + 1) = v58;
      goto LABEL_80;
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
    __p = 0;
    v74 = 0;
    v75 = 0;
  }
LABEL_33:
  if (v15 >= 0)
    v16 = v15 & 0x7F;
  if (!v16)
  {
    if ((v15 & 0x80) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
  if ((_DWORD)v78)
  {
    v28 = 0;
    v31 = 4 * v78;
    v32 = (unsigned int *)v77;
    do
    {
      v33 = *v32++;
      v28 += v33;
      v31 -= 4;
    }
    while (v31);
  }
  else
  {
    v28 = 0;
  }
  v34 = 0;
  if (a4)
  {
    v35 = 8 * a4;
    do
    {
      v36 = *v6++;
      v34 += v36;
      v35 -= 8;
    }
    while (v35);
  }
  if (v28 >= 0xFFFFFFFF)
    v37 = v28 / 0xFFFFFFFF + 1;
  else
    v37 = 1;
  v38 = v28 / v37;
  v39 = *(unsigned int *)v77 / v37;
  if (v38 != 0x80000000)
    v39 = ((v39 << 31) | (v38 >> 1)) / v38;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v62 = 0;
  v66 = 0;
  v67 = 0;
  v61 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v69 = &v70;
  v68 = 0;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  LODWORD(v84) = v39;
  llvm::BranchProbability::print((llvm::BranchProbability *)&v84, (llvm::raw_ostream *)&v61);
  if ((unint64_t)(v64 - v65) > 0xF)
  {
    *(_OWORD *)v65 = *(_OWORD *)" (total count : ";
    v65 += 16;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, " (total count : ", 0x10uLL);
  }
  sub_1C5E21910((llvm::raw_ostream *)&v61, v34, 0, 0, 0);
  if (v64 == v65)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, ")", 1uLL);
    v40 = v65;
  }
  else
  {
    *v65 = 41;
    v40 = ++v65;
  }
  if (v40 != v63)
  {
    v65 = v63;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v61, v63, v40 - v63);
  }
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v59, *(const llvm::Function **)(*(_QWORD *)(a2 + 40) + 56));
  v41 = ***(_QWORD ***)v59[0];
  if (*(_QWORD *)(v41 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v41 + 72) + 48))(*(_QWORD *)(v41 + 72)))
  {
    v46 = *(char **)(*(_QWORD *)(a2 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v80, (const llvm::DebugLoc *)(a2 + 48));
    v47 = *(_QWORD *)(a2 + 40);
    v85 = 9;
    v86 = 2;
    v87 = v46;
    v88 = v80[0];
    v89 = "pgo-instrumentation";
    v90 = "pgo-instrumentation";
    v91 = 19;
    LOBYTE(p_p) = 0;
    v93 = 0;
    v94 = v96;
    v95 = 0x400000000;
    v96[256] = 0;
    v97 = -1;
    v98 = v47;
    v48 = &__p;
    if (v75 < 0)
      v48 = __p;
    v84 = &off_1E814E500;
    v49 = HIBYTE(v75) & 0x7F;
    if (v75 < 0)
      v49 = v74;
    *(_QWORD *)&v80[0] = v48;
    *((_QWORD *)&v80[0] + 1) = v49;
    sub_1C53B17B4((uint64_t)&v94, (const void **)v80);
    *(_QWORD *)&v80[0] = " is true with probability : ";
    *((_QWORD *)&v80[0] + 1) = 28;
    sub_1C53B17B4((uint64_t)&v94, (const void **)v80);
    v50 = &v70;
    if (v72 < 0)
      v50 = v70;
    v51 = HIBYTE(v72) & 0x7F;
    if (v72 < 0)
      v51 = v71;
    *(_QWORD *)&v80[0] = v50;
    *((_QWORD *)&v80[0] + 1) = v51;
    sub_1C53B17B4((uint64_t)&v94, (const void **)v80);
    sub_1C61998EC((uint64_t)v80, (uint64_t)&v84);
    *(_QWORD *)&v80[0] = &off_1E814E500;
    v84 = &off_1E814E790;
    v52 = (char *)v94;
    if ((_DWORD)v95)
    {
      v53 = (unint64_t)v95 << 6;
      do
      {
        v54 = (void **)&v52[v53];
        if (v52[v53 - 17] < 0)
          operator delete(*(v54 - 5));
        if (*((char *)v54 - 41) < 0)
          operator delete(*(v54 - 8));
        v53 -= 64;
      }
      while (v53);
      v52 = (char *)v94;
    }
    if (v52 != v96)
      free(v52);
    llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v59, (llvm::DiagnosticInfoOptimizationBase *)v80);
    *(_QWORD *)&v80[0] = &off_1E814E790;
    v55 = (char *)v81;
    if (v82)
    {
      v56 = (unint64_t)v82 << 6;
      do
      {
        v57 = (void **)&v55[v56];
        if (v55[v56 - 17] < 0)
          operator delete(*(v57 - 5));
        if (*((char *)v57 - 41) < 0)
          operator delete(*(v57 - 8));
        v56 -= 64;
      }
      while (v56);
      v55 = (char *)v81;
    }
    if (v55 != (char *)&v83)
      free(v55);
  }
  v42 = v60;
  v60 = 0;
  if (v42)
  {
    v43 = *v42;
    *v42 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    MEMORY[0x1CAA32FC0](v42, 0x20C4093837F09);
  }
  v61 = off_1E81A6E70;
  if (v68 == 1 && v63)
    MEMORY[0x1CAA32F9C](v63, 0x1000C8077774924);
  if (SHIBYTE(v72) < 0)
    operator delete(v70);
  if (SHIBYTE(v75) < 0)
LABEL_37:
    operator delete(__p);
LABEL_38:
  if (v77 != v79)
    free(v77);
}

void llvm::setIrrLoopHeaderMetadata(uint64_t **this, llvm::Module *a2, llvm::Instruction *a3)
{
  llvm::MDNode *v4;
  uint64_t *v5;

  v5 = *this;
  v4 = (llvm::MDNode *)llvm::MDBuilder::createIrrLoopHeaderWeight(&v5, (uint64_t)a3);
  if (v4 || *((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
    llvm::Value::setMetadata(a2, 24, v4);
}

uint64_t sub_1C58C5C84(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t k;
  uint64_t v11;
  __int128 v12;

  if (byte_1ED815E98)
  {
    v3 = result;
    v4 = result + 24;
    for (i = *(_QWORD *)(result + 32); i != v4; i = *(_QWORD *)(i + 8))
    {
      v6 = i - 56;
      if (!i)
        v6 = 0;
      if (*(_QWORD *)(v6 + 48))
      {
        *(_QWORD *)&v12 = *(_QWORD *)(v6 + 48);
        *((_QWORD *)&v12 + 1) = v6;
        result = (uint64_t)sub_1C6294B94(a2, &v12);
      }
    }
    for (j = *(_QWORD *)(v3 + 16); j != v3 + 8; j = *(_QWORD *)(j + 8))
    {
      v8 = j - 56;
      if (!j)
        v8 = 0;
      if (*(_QWORD *)(v8 + 48))
      {
        *(_QWORD *)&v12 = *(_QWORD *)(v8 + 48);
        *((_QWORD *)&v12 + 1) = v8;
        result = (uint64_t)sub_1C6294B94(a2, &v12);
      }
    }
    v9 = v3 + 40;
    for (k = *(_QWORD *)(v3 + 48); k != v9; k = *(_QWORD *)(k + 8))
    {
      if (k)
        v11 = k - 48;
      else
        v11 = 0;
      result = llvm::GlobalValue::getComdat(v11);
      if (result)
      {
        *(_QWORD *)&v12 = result;
        *((_QWORD *)&v12 + 1) = v11;
        result = (uint64_t)sub_1C6294B94(a2, &v12);
      }
    }
  }
  return result;
}

uint64_t sub_1C58C5D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  unsigned __int8 v39;

  v8 = *(_DWORD *)(a1 + 40);
  v9 = a1 + 32;
  v36 = a2;
  v37 = 0;
  sub_1C58946A4((uint64_t)v38, a1 + 32, &v36);
  v10 = v38[0];
  v11 = v39;
  if (v37)
    MEMORY[0x1CAA32FC0](v37, 0x1020C40EDED9539);
  if (v11)
  {
    v12 = operator new();
    *(_QWORD *)v12 = v12;
    *(_DWORD *)(v12 + 8) = v8;
    *(_DWORD *)(v12 + 12) = 0;
    v13 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v12;
    if (v13)
      MEMORY[0x1CAA32FC0](v13, 0x1020C40EDED9539);
    ++v8;
  }
  v36 = a3;
  v37 = 0;
  sub_1C58946A4((uint64_t)v38, v9, &v36);
  v14 = v38[0];
  v15 = v39;
  if (v37)
    MEMORY[0x1CAA32FC0](v37, 0x1020C40EDED9539);
  if (v15)
  {
    v16 = operator new();
    *(_QWORD *)v16 = v16;
    *(_DWORD *)(v16 + 8) = v8;
    *(_DWORD *)(v16 + 12) = 0;
    v17 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v16;
    if (v17)
      MEMORY[0x1CAA32FC0](v17, 0x1020C40EDED9539);
  }
  v18 = operator new();
  v19 = v18;
  *(_QWORD *)v18 = a2;
  *(_QWORD *)(v18 + 8) = a3;
  *(_QWORD *)(v18 + 16) = a4;
  *(_WORD *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 26) = 0;
  v21 = *(uint64_t **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v21 >= v20)
  {
    v23 = *(_QWORD **)(a1 + 8);
    v24 = v21 - v23;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      abort();
    v26 = v20 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        sub_1C4764EE4();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = (uint64_t *)&v28[8 * v24];
    v30 = &v28[8 * v27];
    *v29 = v19;
    v22 = v29 + 1;
    if (v21 == v23)
    {
      *(_QWORD *)(a1 + 8) = v29;
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = v30;
    }
    else
    {
      do
      {
        v31 = *--v21;
        *v21 = 0;
        *--v29 = v31;
      }
      while (v21 != v23);
      v21 = *(uint64_t **)(a1 + 8);
      v32 = *(uint64_t **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v29;
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = v30;
      while (v32 != v21)
      {
        v34 = *--v32;
        v33 = v34;
        *v32 = 0;
        if (v34)
          MEMORY[0x1CAA32FC0](v33, 0x1060C40ACBCC463);
      }
    }
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v21 = v18;
    v22 = v21 + 1;
  }
  *(_QWORD *)(a1 + 16) = v22;
  return *(v22 - 1);
}

uint64_t sub_1C58C5FF0(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  if (a3 >= 2)
  {
    v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_QWORD *)(v7 + 16) > *(_QWORD *)(*(_QWORD *)result + 16))
      {
        *(_QWORD *)result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((uint64_t *)result != a2)
      {
        v15 = (uint64_t *)(result + 8);
        if ((uint64_t *)(result + 8) != a2)
        {
          v16 = 0;
          v17 = (uint64_t *)result;
          do
          {
            v18 = *v17;
            v17 = v15;
            v19 = *v15;
            if (*(_QWORD *)(*v15 + 16) > *(_QWORD *)(v18 + 16))
            {
              v20 = 0;
              *v15 = 0;
              for (i = v16; ; i -= 8)
              {
                v22 = (uint64_t *)((char *)v6 + i);
                *v22 = 0;
                v22[1] = v18;
                if (v20)
                  MEMORY[0x1CAA32FC0](v20, 0x1060C40ACBCC463);
                if (!i)
                  break;
                v23 = (uint64_t *)((char *)v6 + i);
                v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(_QWORD *)(v19 + 16) <= *(_QWORD *)(v18 + 16))
                  goto LABEL_20;
                v20 = *v22;
              }
              v23 = v6;
LABEL_20:
              result = *v23;
              *v23 = v19;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
            }
            v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != a2);
        }
      }
    }
    else
    {
      v11 = a4;
      v12 = a3 >> 1;
      v13 = result + 8 * (a3 >> 1);
      v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C58C6314(result, v13, v14, a4);
        v24 = &v11[v12];
        result = sub_1C58C6314((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v24);
        v25 = &v11[a3];
        v26 = v24;
        v27 = v11;
        while (v26 != v25)
        {
          v28 = *v26;
          v29 = *v27;
          if (*(_QWORD *)(*v26 + 16) <= *(_QWORD *)(*v27 + 16))
          {
            *v27 = 0;
            result = *v6;
            *v6 = v29;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
            ++v27;
          }
          else
          {
            *v26 = 0;
            result = *v6;
            *v6 = v28;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
            ++v26;
          }
          ++v6;
          if (v27 == v24)
          {
            if (v26 != v25)
            {
              v30 = 0;
              do
              {
                v31 = v26[v30];
                v26[v30] = 0;
                result = v6[v30];
                v6[v30] = v31;
                if (result)
                  result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
                ++v30;
              }
              while (&v26[v30] != v25);
            }
            goto LABEL_45;
          }
        }
        if (v27 != v24)
        {
          v32 = 0;
          do
          {
            v33 = v27[v32];
            v27[v32] = 0;
            result = v6[v32];
            v6[v32] = v33;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
            ++v32;
          }
          while (&v27[v32] != v24);
        }
LABEL_45:
        if (v11)
        {
          v34 = a3;
          do
          {
            result = *v11;
            *v11 = 0;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
            ++v11;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1C58C5FF0(result, v13, v14, a4, a5);
        sub_1C58C5FF0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v11, a5);
        return sub_1C58C6550((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1C58C6314(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      v13 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(_QWORD *)(a2 - 8);
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)result + 16);
      v11 = v9 > v10;
      if (v9 <= v10)
        v12 = (_QWORD *)result;
      else
        v12 = (_QWORD *)(a2 - 8);
      if (!v11)
        v8 = *(_QWORD *)result;
      *v12 = 0;
      *a4 = v8;
      v4 = a4 + 1;
      if (!v11)
        v6 = a2 - 8;
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      v27 = result + 8 * (a3 >> 1);
      sub_1C58C5FF0(result, v27, a3 >> 1, a4, a3 >> 1);
      result = sub_1C58C5FF0(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        v29 = *(_QWORD *)v28;
        v30 = *(_QWORD *)v6;
        if (*(_QWORD *)(*(_QWORD *)v28 + 16) <= *(_QWORD *)(*(_QWORD *)v6 + 16))
        {
          *(_QWORD *)v6 = 0;
          v6 += 8;
          v29 = v30;
        }
        else
        {
          *(_QWORD *)v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            v31 = 0;
            do
            {
              v32 = *(_QWORD *)(v28 + v31);
              *(_QWORD *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        v33 = 0;
        do
        {
          v34 = *(_QWORD *)(v6 + v33);
          *(_QWORD *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      v14 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        v16 = 0;
        v17 = a4;
        do
        {
          v18 = v17;
          v20 = *v17++;
          v19 = v20;
          v21 = *(_QWORD *)v15;
          if (*(_QWORD *)(*(_QWORD *)v15 + 16) <= *(_QWORD *)(v20 + 16))
          {
            *(_QWORD *)v15 = 0;
            *v17 = v21;
          }
          else
          {
            *v18 = 0;
            v18[1] = v19;
            v22 = v4;
            if (v18 != v4)
            {
              v23 = v16;
              while (1)
              {
                v22 = (uint64_t *)((char *)v4 + v23);
                v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(_QWORD *)(*(_QWORD *)v15 + 16) <= *(_QWORD *)(v24 + 16))
                  break;
                v25 = *v22;
                *(v22 - 1) = 0;
                *v22 = v24;
                if (v25)
                  MEMORY[0x1CAA32FC0](v25, 0x1060C40ACBCC463);
                v23 -= 8;
                if (!v23)
                {
                  v22 = v4;
                  break;
                }
              }
            }
            v26 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            result = *v22;
            *v22 = v26;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C58C6550(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *i;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  if (a5)
  {
    v10 = (uint64_t *)result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = *a2;
      v13 = -a4;
      while (1)
      {
        v14 = v10[v11];
        if (*(_QWORD *)(*a2 + 16) > *(_QWORD *)(v14 + 16))
          break;
        ++v11;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v16 = -v13;
      result = (uint64_t)&v10[v11];
      if (-v13 >= a5)
      {
        if (v13 == -1)
        {
          v10[v11] = v12;
          *a2 = v14;
          return result;
        }
        v17 = a6;
        if (v13 > 0)
          v16 = 1 - v13;
        v27 = v16 >> 1;
        v21 = &v10[(v16 >> 1) + v11];
        v20 = a3;
        if (a3 != a2)
        {
          v28 = a3 - a2;
          v20 = a2;
          do
          {
            v29 = v28 >> 1;
            v30 = &v20[v28 >> 1];
            v32 = *v30;
            v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (*(_QWORD *)(v32 + 16) > *(_QWORD *)(*v21 + 16))
              v20 = v31;
            else
              v28 = v29;
          }
          while (v28);
        }
        v19 = v20 - a2;
      }
      else
      {
        v17 = a6;
        if (a5 >= 0)
          v18 = a5;
        else
          v18 = a5 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = a2;
        if ((uint64_t *)result != a2)
        {
          v22 = ((char *)a2 - (char *)v10 - v11 * 8) >> 3;
          v21 = &v10[v11];
          do
          {
            v23 = v22 >> 1;
            v24 = &v21[v22 >> 1];
            v26 = *v24;
            v25 = v24 + 1;
            v22 += ~(v22 >> 1);
            if (*(_QWORD *)(*v20 + 16) > *(_QWORD *)(v26 + 16))
              v22 = v23;
            else
              v21 = v25;
          }
          while (v22);
        }
        v27 = ((char *)v21 - (char *)v10 - v11 * 8) >> 3;
      }
      v33 = v20;
      if (v21 != a2)
      {
        v33 = v21;
        if (a2 != v20)
        {
          v34 = *v21;
          *v21 = v12;
          v33 = v21 + 1;
          for (i = a2; ; *v33++ = *i)
          {
            *i++ = v34;
            if (i == v20)
              break;
            if (v33 == a2)
              a2 = i;
            v34 = *v33;
          }
          if (v33 != a2)
          {
            v36 = v33;
            v37 = a2;
            while (1)
            {
              v38 = v36;
              while (1)
              {
                v39 = *v36;
                *v38++ = *v37;
                *v37++ = v39;
                if (v37 != v20)
                  break;
                v36 = v38;
                v37 = a2;
                if (v38 == a2)
                  goto LABEL_48;
              }
              if (v38 == a2)
                a2 = v37;
              ++v36;
            }
          }
        }
      }
LABEL_48:
      a4 = -(v27 + v13);
      v40 = a5 - v19;
      if (v27 + v19 >= a5 - (v27 + v19) - v13)
      {
        v46 = &v10[v11];
        v47 = v17;
        v40 = v19;
        v44 = a7;
        result = sub_1C58C6550(v33, v20, a3, a4, a5 - v19, v17);
        v45 = v46;
        v20 = v21;
        a6 = v47;
        a4 = v27;
        a3 = v33;
      }
      else
      {
        v41 = &v10[v11];
        v42 = v21;
        v43 = a3;
        a6 = v17;
        v44 = a7;
        result = sub_1C58C6550(v41, v42, v33, v27, v19, v17);
        a3 = v43;
        v45 = v33;
      }
      a5 = v40;
      v10 = v45;
      a2 = v20;
      a7 = v44;
      if (!v40)
        return result;
    }
    if (a4 > a5)
    {
      if (a2 == a3)
        return result;
      v48 = 0;
      v49 = 0;
      do
      {
        v50 = a2[v48];
        a2[v48] = 0;
        a6[v48] = v50;
        ++v49;
        ++v48;
      }
      while (&a2[v48] != a3);
      if (!(v48 * 8))
        goto LABEL_94;
      v51 = &a6[v48];
      v52 = a3 - 1;
      while (1)
      {
        if (a2 == v10)
        {
          if (v51 != a6)
          {
            v65 = 0;
            do
            {
              v66 = v51[v65 - 1];
              v51[v65 - 1] = 0;
              result = v52[v65];
              v52[v65] = v66;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
              --v65;
            }
            while (&v51[v65] != a6);
          }
          goto LABEL_94;
        }
        v54 = a2 - 1;
        v53 = *(a2 - 1);
        v55 = *(v51 - 1);
        if (*(_QWORD *)(v55 + 16) > *(_QWORD *)(v53 + 16))
          break;
        *(v51 - 1) = 0;
        result = *v52;
        *v52 = v55;
        v54 = a2;
        --v51;
        if (result)
          goto LABEL_64;
LABEL_65:
        --v52;
        a2 = v54;
        if (v51 == a6)
          goto LABEL_94;
      }
      *v54 = 0;
      result = *v52;
      *v52 = v53;
      if (!result)
        goto LABEL_65;
LABEL_64:
      result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
      goto LABEL_65;
    }
    if (v10 != a2)
    {
      v56 = 0;
      v49 = 0;
      do
      {
        v57 = v10[v56];
        v10[v56] = 0;
        a6[v56] = v57;
        ++v49;
        ++v56;
      }
      while (&v10[v56] != a2);
      if (!(v56 * 8))
        goto LABEL_94;
      v58 = &a6[v56];
      v59 = (uint64_t)&a6[v56 - 1];
      v60 = a6;
      while (a2 != a3)
      {
        v61 = *a2;
        v62 = *v60;
        if (*(_QWORD *)(*a2 + 16) <= *(_QWORD *)(*v60 + 16))
        {
          *v60 = 0;
          result = *v10;
          *v10 = v62;
          if (result)
          {
            v64 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
            a3 = v64;
          }
          ++v60;
        }
        else
        {
          *a2 = 0;
          result = *v10;
          *v10 = v61;
          if (result)
          {
            v63 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
            a3 = v63;
          }
          ++a2;
        }
        ++v10;
        if (v58 == v60)
          goto LABEL_94;
      }
      if (v58 != v60)
      {
        v67 = 0;
        do
        {
          v68 = v60[v67];
          v60[v67] = 0;
          result = v10[v67];
          v10[v67] = v68;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
          ++v67;
        }
        while ((uint64_t *)v59 != &v60[v67 - 1]);
      }
LABEL_94:
      if (a6)
      {
        do
        {
          result = *a6;
          *a6 = 0;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40ACBCC463);
          ++a6;
          --v49;
        }
        while (v49);
      }
    }
  }
  return result;
}

void sub_1C58C6A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::Constant *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t Declaration;
  const llvm::APInt *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  BOOL v28;
  void *v29;
  void *v30;
  llvm::UndefValue *v31;
  uint64_t v32;
  llvm::ConstantInt *v33;
  unsigned int v34;
  unint64_t v35;
  const llvm::APInt *v36;
  llvm::ValueHandleBase *v37;
  uint64_t v38;
  llvm::ConstantInt *v39;
  unsigned int v40;
  unint64_t v41;
  const llvm::APInt *v42;
  llvm::ValueHandleBase *v43;
  uint64_t v44;
  llvm::ConstantInt *v45;
  unsigned int v46;
  unint64_t v47;
  llvm::ValueHandleBase *v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  __int16 v52;
  uint64_t v53[4];
  unsigned __int8 *v54;
  void *v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 80);
  v49 = a2 + 72;
  while (v2 != v49)
  {
    v4 = v2 - 24;
    v9 = v2 == 0;
    v2 = *(_QWORD *)(v2 + 8);
    if (v9)
      v4 = 0;
    v5 = v4 + 40;
    v6 = *(_QWORD *)(v4 + 48);
    while (v6 != v5)
    {
      v7 = v6 - 24;
      v9 = v6 == 0;
      v6 = *(_QWORD *)(v6 + 8);
      if (v9)
        v8 = 0;
      else
        v8 = v7;
      v9 = *(_BYTE *)(v8 + 16) != 85 || byte_1ED8160D8 == 0;
      if (!v9 && (*(_DWORD *)(**(_QWORD **)(v8 - 96) + 8) & 0xFE) != 0x12)
      {
        v10 = *(_DWORD *)(a1 + 12);
        if (v10 == 2)
        {
          v20 = *(_QWORD *)(a1 + 48);
          v21 = *(_DWORD **)(a1 + 16);
          v22 = *v21;
          v55[0] = *(void **)(*(_QWORD *)(v20 + 288) + 8 * v22);
          *v21 = v22 + 1;
          v23 = *(_QWORD *)(v8 + 40);
          v53[0] = 0;
          if (sub_1C49F21C0(*(_QWORD *)(v20 + 216), *(_DWORD *)(v20 + 232), v23, v53))
          {
            v24 = v53[0];
            v25 = *(_QWORD *)(v20 + 216);
            v26 = *(unsigned int *)(v20 + 232);
          }
          else
          {
            v25 = *(_QWORD *)(v20 + 216);
            v26 = *(unsigned int *)(v20 + 232);
            v24 = v25 + 16 * v26;
          }
          if (v24 == v25 + 16 * v26)
          {
            v27 = 0;
          }
          else
          {
            v27 = *(char **)(v24 + 8);
            if (v27)
              v27 = (char *)*((_QWORD *)v27 + 2);
          }
          v28 = v27 >= v55[0];
          v29 = (void *)(v27 - (char *)v55[0]);
          if (!v28)
            v29 = 0;
          v55[1] = v29;
          if (v55[0] <= v29)
            v30 = v29;
          else
            v30 = v55[0];
          if (v30)
            llvm::setProfMetadata(*(uint64_t ***)(*(_QWORD *)a1 + 40), v8, (uint64_t *)v55, 2, (unint64_t)v30);
        }
        else if (v10 == 1)
        {
          if (!byte_1ED8163D8)
          {
            v11 = *(uint64_t **)(*(_QWORD *)a1 + 40);
            sub_1C4773D54((uint64_t)v55, v8, 0, 0, 0);
            v12 = *(_QWORD *)v57 + 1984;
            v13 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v57 + 1912), 0);
            v14 = *(unsigned __int8 **)(v8 - 96);
            LOWORD(v54) = 257;
            v15 = sub_1C4773E38((uint64_t *)v55, 39, v14, v12, (uint64_t)v53);
            Declaration = llvm::Intrinsic::getDeclaration(v11, 161, 0, 0);
            v18 = Declaration;
            if (Declaration)
              v19 = *(uint64_t ***)(Declaration + 24);
            else
              v19 = 0;
            v31 = *(llvm::UndefValue **)(a1 + 32);
            if (*(llvm::Constant **)v31 != v13)
              v31 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v31, v13, 0);
            v53[0] = (uint64_t)v31;
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *(llvm::ConstantInt **)(*(_QWORD *)v57 + 1984);
            v34 = *(_DWORD *)(*(_QWORD *)v57 + 1992);
            v51 = v34 >> 8;
            if (v34 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v50, v32, 0);
            }
            else
            {
              if (v34 <= 0xFF)
                v35 = 0;
              else
                v35 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v34);
              v50 = v35 & v32;
            }
            v37 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v50, v17);
            if (v51 >= 0x41 && v50)
              MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
            v53[1] = (uint64_t)v37;
            v38 = *(unsigned int *)(a1 + 24);
            v39 = *(llvm::ConstantInt **)(*(_QWORD *)v57 + 1960);
            v40 = *(_DWORD *)(*(_QWORD *)v57 + 1968);
            v51 = v40 >> 8;
            if (v40 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v50, v38, 0);
            }
            else
            {
              if (v40 <= 0xFF)
                v41 = 0;
              else
                v41 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v40);
              v50 = v41 & v38;
            }
            v43 = llvm::ConstantInt::get(v39, (llvm::LLVMContext *)&v50, v36);
            if (v51 >= 0x41 && v50)
              MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
            v53[2] = (uint64_t)v43;
            v44 = **(unsigned int **)(a1 + 16);
            v45 = *(llvm::ConstantInt **)(*(_QWORD *)v57 + 1960);
            v46 = *(_DWORD *)(*(_QWORD *)v57 + 1968);
            v51 = v46 >> 8;
            if (v46 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v50, v44, 0);
            }
            else
            {
              if (v46 <= 0xFF)
                v47 = 0;
              else
                v47 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
              v50 = v47 & v44;
            }
            v48 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v50, v42);
            if (v51 >= 0x41 && v50)
              MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
            v53[3] = (uint64_t)v48;
            v54 = v15;
            v52 = 257;
            sub_1C4774778((uint64_t *)v55, v19, v18, v53, 5, (uint64_t)&v50, 0);
            ++**(_DWORD **)(a1 + 16);
            if (v55[0] != &v56)
              free(v55[0]);
          }
        }
        else
        {
          ++*(_DWORD *)(a1 + 8);
        }
      }
    }
  }
}

uint64_t sub_1C58C6F24(llvm *a1, _QWORD *a2, const llvm::Module *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  llvm *v9;
  BOOL v10;
  uint64_t v11;

  v3 = byte_1ED815E98;
  if (byte_1ED815E98)
  {
    if (llvm::canRenameComdatFunc(a1, (const llvm::Function *)1, a3))
    {
      v11 = *((_QWORD *)a1 + 6);
      v7 = sub_1C629475C(a2, &v11);
      if (!v7)
        return 1;
      v8 = v7;
      do
        v8 = (_QWORD *)*v8;
      while (v8 && v8[2] == v11);
      if (v8 == v7)
      {
        return 1;
      }
      else
      {
        do
        {
          v9 = (llvm *)v7[3];
          v10 = v9 == a1 && *((_BYTE *)v9 + 16) == 0;
          v3 = v10;
          if (!v10)
            break;
          v7 = (_QWORD *)*v7;
        }
        while (v7 != v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1C58C6FD8(uint64_t a1, char *__s, uint64_t *a3)
{
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  __int128 __dst;
  unint64_t v21;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 < *(_DWORD *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1;
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = v8;
    v10 = v7 + 48 * v6;
    if (v8 >= 0x17)
    {
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      p_dst = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&__dst + 1) = v9;
      v21 = v13 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v21) = v8;
      p_dst = &__dst;
      if (!v8)
        goto LABEL_10;
    }
    memcpy(p_dst, __s, v9);
LABEL_10:
    *((_BYTE *)p_dst + v9) = 0;
    v14 = *a3;
    *(_OWORD *)v10 = __dst;
    *(_QWORD *)(v10 + 16) = v21;
    v15 = (_QWORD *)(v7 + 48 * v6);
    v15[4] = 0;
    v15[5] = 0;
    v16 = operator new(8uLL);
    v15[3] = v16;
    v15[5] = v16 + 1;
    *v16 = v14;
    v15[4] = v16 + 1;
    v17 = *(_QWORD *)a1;
    v18 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v18;
    return v17 + 48 * v18 - 48;
  }
  return sub_1C58C7134(a1, __s, a3);
}

uint64_t sub_1C58C7134(uint64_t a1, const char *a2, uint64_t *a3)
{
  char *v6;
  int v7;
  size_t v8;
  size_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;

  v22 = 0;
  v6 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v22);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = strlen(a2);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = v8;
  v10 = &v6[48 * v7];
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&v20 + 1) = v9;
    v21 = v13 | 0x8000000000000000;
    *(_QWORD *)&v20 = v11;
    goto LABEL_8;
  }
  HIBYTE(v21) = v8;
  v11 = &v20;
  if (v8)
LABEL_8:
    memcpy(v11, a2, v9);
  *((_BYTE *)v11 + v9) = 0;
  v14 = *a3;
  *(_OWORD *)v10 = v20;
  *((_QWORD *)v10 + 2) = v21;
  v15 = &v6[48 * v7];
  *((_QWORD *)v15 + 4) = 0;
  *((_QWORD *)v15 + 5) = 0;
  v16 = operator new(8uLL);
  *((_QWORD *)v15 + 3) = v16;
  *((_QWORD *)v15 + 5) = v16 + 1;
  *v16 = v14;
  *((_QWORD *)v15 + 4) = v16 + 1;
  sub_1C4FCE92C((uint64_t *)a1, (uint64_t)v6);
  v17 = v22;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v18 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 12) = v17;
  return (uint64_t)&v6[48 * v18 - 48];
}

void sub_1C58C7294(uint64_t a1, uint64_t *a2, llvm::Twine *a3, llvm::Twine *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  std::string::size_type v10;
  const std::error_category *v11;
  uint64_t v12;
  int data;
  llvm::raw_ostream *v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  void *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  BOOL v23;
  const char *v24;
  size_t v25;
  size_t v26;
  llvm *v27;
  uint64_t ***v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ****v33;
  uint64_t ***v34;
  int v35;
  int v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  const char *v41;
  size_t v42;
  size_t v43;
  llvm::raw_ostream *v44;
  void *v45;
  unint64_t *v46;
  std::string::size_type v47;
  const void *v48;
  unint64_t v49;
  std::string *p_dst;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  uint64_t v55;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v58;
  unint64_t v59;
  std::string *v60;
  size_t v61;
  _DWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  std::string *v65;
  std::string::size_type v66;
  _QWORD *v67;
  std::string *v68;
  size_t v69;
  uint64_t v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  llvm::raw_ostream *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  llvm::raw_ostream *v83;
  const char *v84;
  size_t v85;
  size_t v86;
  std::string *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  _BOOL4 v97;
  _WORD *v98;
  std::string *v99;
  size_t v100;
  void *v101;
  int v102;
  void *v103;
  _WORD *v104;
  std::string *v105;
  size_t v106;
  uint64_t v107;
  void *v108;
  uint64_t *v109;
  const char *v110;
  size_t v111;
  _WORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  llvm::Instruction *v117;
  int v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  BOOL v123;
  int v124;
  unsigned int i;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  _WORD *v129;
  llvm::raw_ostream *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const std::error_category *v135;
  __int16 v136;
  int v137;
  void *__p;
  uint64_t v139;
  char v140;
  llvm::raw_ostream *v141;
  uint64_t *v142;
  __int16 v143;
  std::string __dst;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  int v149;
  void **v150;
  void *v151[2];
  uint64_t v152;
  std::string v153;

  v5 = a5;
  if (*(char *)(a5 + 23) < 0)
    v9 = *(_QWORD *)(a5 + 8);
  else
    v9 = *(unsigned __int8 *)(a5 + 23);
  v137 = 0;
  if (!v9)
  {
    llvm::Twine::str(a3, &v153);
    v136 = 260;
    v134 = (uint64_t)&v153;
    llvm::createGraphFilename((llvm::Twine *)&v134, &v137, &__dst);
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    *(std::string *)v5 = __dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
LABEL_31:
    v27 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v134, v137, 1, 0, 0);
    if (v137 == -1)
    {
      v37 = (llvm::raw_ostream *)llvm::errs(v27);
      v38 = *((_QWORD *)v37 + 4);
      if ((unint64_t)(*((_QWORD *)v37 + 3) - v38) > 0x13)
      {
        *(_DWORD *)(v38 + 16) = 656434540;
        *(_OWORD *)v38 = *(_OWORD *)"error opening file '";
        *((_QWORD *)v37 + 4) += 20;
      }
      else
      {
        v37 = llvm::raw_ostream::write(v37, "error opening file '", 0x14uLL);
      }
      v39 = *(_BYTE *)(v5 + 23);
      v40 = v39 < 0;
      if (v39 >= 0)
        v41 = (const char *)v5;
      else
        v41 = *(const char **)v5;
      v42 = v39 & 0x7F;
      if (v40)
        v43 = *(_QWORD *)(v5 + 8);
      else
        v43 = v42;
      v44 = llvm::raw_ostream::write(v37, v41, v43);
      v45 = (void *)*((_QWORD *)v44 + 4);
      if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 0xEuLL)
      {
        qmemcpy(v45, "' for writing!\n", 15);
        *((_QWORD *)v44 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v44, "' for writing!\n", 0xFuLL);
      }
      *(_BYTE *)(a1 + 23) = 0;
      *(_BYTE *)a1 = 0;
      goto LABEL_258;
    }
    v141 = (llvm::raw_ostream *)&v134;
    v142 = a2;
    v143 = 0;
    llvm::Twine::str(a4, &__p);
    v28 = *(uint64_t ****)*a2;
    if ((*((_BYTE *)v28 + 23) & 0x10) == 0)
    {
      v47 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_59;
    }
    v29 = ***v28;
    v30 = *(_QWORD *)(v29 + 152);
    v31 = *(unsigned int *)(v29 + 168);
    if ((_DWORD)v31)
    {
      LODWORD(v32) = (v31 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      v33 = (uint64_t ****)(v30 + 16 * v32);
      v34 = *v33;
      if (*v33 == v28)
        goto LABEL_51;
      v35 = 1;
      while (v34 != (uint64_t ***)-4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v31 - 1);
        v34 = *(uint64_t ****)(v30 + 16 * v32);
        if (v34 == v28)
        {
          v33 = (uint64_t ****)(v30 + 16 * v32);
          goto LABEL_51;
        }
      }
    }
    v33 = (uint64_t ****)(v30 + 16 * v31);
LABEL_51:
    v46 = (unint64_t *)v33[1];
    v49 = *v46;
    v48 = v46 + 2;
    v47 = v49;
    if (v49 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v47 >= 0x17)
    {
      v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17)
        v51 = v47 | 7;
      v52 = v51 + 1;
      p_dst = (std::string *)operator new(v51 + 1);
      __dst.__r_.__value_.__l.__size_ = v47;
      __dst.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v47;
      p_dst = &__dst;
      if (!v47)
      {
LABEL_59:
        p_dst->__r_.__value_.__s.__data_[v47] = 0;
        v53 = v140 & 0x7F;
        if (v140 < 0)
          v53 = v139;
        if (v53)
        {
          v54 = v141;
          v55 = *((_QWORD *)v141 + 4);
          if ((unint64_t)(*((_QWORD *)v141 + 3) - v55) > 8)
          {
            *(_BYTE *)(v55 + 8) = 34;
            *(_QWORD *)v55 = *(_QWORD *)"digraph \"";
            *((_QWORD *)v54 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v141, "digraph \"", 9uLL);
          }
          p_p = (std::string *)&__p;
        }
        else
        {
          size = __dst.__r_.__value_.__l.__size_;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          v54 = v141;
          v58 = *((_QWORD *)v141 + 4);
          v59 = *((_QWORD *)v141 + 3) - v58;
          if (!size)
          {
            if (v59 > 0x11)
            {
              *(_WORD *)(v58 + 16) = 2683;
              *(_OWORD *)v58 = *(_OWORD *)"digraph unnamed {\n";
              *((_QWORD *)v54 + 4) += 18;
            }
            else
            {
              llvm::raw_ostream::write(v141, "digraph unnamed {\n", 0x12uLL);
            }
            goto LABEL_83;
          }
          if (v59 > 8)
          {
            *(_BYTE *)(v58 + 8) = 34;
            *(_QWORD *)v58 = *(_QWORD *)"digraph \"";
            *((_QWORD *)v54 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v141, "digraph \"", 9uLL);
          }
          p_p = &__dst;
        }
        llvm::DOT::EscapeString((char *)p_p, &v153);
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = &v153;
        else
          v60 = (std::string *)v153.__r_.__value_.__r.__words[0];
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = *((_BYTE *)&v153.__r_.__value_.__s + 23) & 0x7F;
        else
          v61 = v153.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v54, (const char *)v60, v61);
        v62 = (_DWORD *)*((_QWORD *)v54 + 4);
        if (*((_QWORD *)v54 + 3) - (_QWORD)v62 > 3uLL)
        {
          *v62 = 175841314;
          *((_QWORD *)v54 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v54, "\" {\n", 4uLL);
        }
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
LABEL_83:
        v63 = v140 & 0x7F;
        if (v140 < 0)
          v63 = v139;
        if (v63)
        {
          v64 = (_QWORD *)*((_QWORD *)v54 + 4);
          if (*((_QWORD *)v54 + 3) - (_QWORD)v64 > 7uLL)
          {
            *v64 = 0x223D6C6562616C09;
            *((_QWORD *)v54 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v54, "\tlabel=\"", 8uLL);
          }
          v65 = (std::string *)&__p;
        }
        else
        {
          v66 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v66 = __dst.__r_.__value_.__l.__size_;
          if (!v66)
            goto LABEL_105;
          v67 = (_QWORD *)*((_QWORD *)v54 + 4);
          if (*((_QWORD *)v54 + 3) - (_QWORD)v67 > 7uLL)
          {
            *v67 = 0x223D6C6562616C09;
            *((_QWORD *)v54 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v54, "\tlabel=\"", 8uLL);
          }
          v65 = &__dst;
        }
        llvm::DOT::EscapeString((char *)v65, &v153);
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = &v153;
        else
          v68 = (std::string *)v153.__r_.__value_.__r.__words[0];
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = *((_BYTE *)&v153.__r_.__value_.__s + 23) & 0x7F;
        else
          v69 = v153.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v54, (const char *)v68, v69);
        v70 = *((_QWORD *)v54 + 4);
        if ((unint64_t)(*((_QWORD *)v54 + 3) - v70) > 2)
        {
          *(_BYTE *)(v70 + 2) = 10;
          *(_WORD *)v70 = 15138;
          *((_QWORD *)v54 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v54, "\";\n", 3uLL);
        }
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
LABEL_105:
        *((_BYTE *)&v153.__r_.__value_.__s + 23) = 0;
        v153.__r_.__value_.__s.__data_[0] = 0;
        v71 = llvm::raw_ostream::write(v54, (const char *)&v153, 0);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        v72 = (_BYTE *)*((_QWORD *)v54 + 4);
        if (*((_BYTE **)v54 + 3) == v72)
        {
          v71 = llvm::raw_ostream::write(v54, "\n", 1uLL);
        }
        else
        {
          *v72 = 10;
          ++*((_QWORD *)v54 + 4);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v73 = *(_QWORD *)*v142;
        v74 = v73 + 72;
        v75 = *(_QWORD *)(v73 + 80);
        if (v75 != v73 + 72)
        {
          v132 = v5;
          v133 = a1;
          while (1)
          {
            if (v75)
              v76 = v75 - 24;
            else
              v76 = 0;
            *((_BYTE *)&v153.__r_.__value_.__s + 23) = 0;
            v153.__r_.__value_.__s.__data_[0] = 0;
            v77 = v141;
            v78 = *((_QWORD *)v141 + 4);
            if ((unint64_t)(*((_QWORD *)v141 + 3) - v78) > 4)
            {
              *(_BYTE *)(v78 + 4) = 101;
              *(_DWORD *)v78 = 1685016073;
              *((_QWORD *)v77 + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(v141, "\tNode", 5uLL);
            }
            llvm::write_hex(v77, v76, 3, 0, 0);
            v79 = (_QWORD *)*((_QWORD *)v77 + 4);
            if (*((_QWORD *)v77 + 3) - (_QWORD)v79 > 7uLL)
            {
              *v79 = 0x3D65706168735B20;
              v80 = *((_QWORD *)v77 + 4) + 8;
              *((_QWORD *)v77 + 4) = v80;
            }
            else
            {
              llvm::raw_ostream::write(v77, " [shape=", 8uLL);
              v80 = *((_QWORD *)v77 + 4);
            }
            v81 = v143;
            v82 = *((_QWORD *)v77 + 3) - v80;
            if ((_BYTE)v143)
            {
              if (v82 <= 4)
              {
                v83 = v77;
                v84 = "none,";
                v85 = 5;
LABEL_125:
                llvm::raw_ostream::write(v83, v84, v85);
                goto LABEL_126;
              }
              *(_BYTE *)(v80 + 4) = 44;
              *(_DWORD *)v80 = 1701736302;
              v126 = *((_QWORD *)v77 + 4) + 5;
            }
            else
            {
              if (v82 <= 6)
              {
                v83 = v77;
                v84 = "record,";
                v85 = 7;
                goto LABEL_125;
              }
              *(_DWORD *)(v80 + 3) = 744780399;
              *(_DWORD *)v80 = 1868785010;
              v126 = *((_QWORD *)v77 + 4) + 7;
            }
            *((_QWORD *)v77 + 4) = v126;
LABEL_126:
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = *((_BYTE *)&v153.__r_.__value_.__s + 23) & 0x7F;
            else
              v86 = v153.__r_.__value_.__l.__size_;
            if (v86)
            {
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v87 = &v153;
              else
                v87 = (std::string *)v153.__r_.__value_.__r.__words[0];
              llvm::raw_ostream::write(v77, (const char *)v87, v86);
              v88 = (_BYTE *)*((_QWORD *)v77 + 4);
              if (*((_BYTE **)v77 + 3) == v88)
              {
                llvm::raw_ostream::write(v77, ",", 1uLL);
              }
              else
              {
                *v88 = 44;
                ++*((_QWORD *)v77 + 4);
              }
            }
            v89 = *((_QWORD *)v77 + 4);
            if ((unint64_t)(*((_QWORD *)v77 + 3) - v89) > 5)
            {
              *(_WORD *)(v89 + 4) = 15724;
              *(_DWORD *)v89 = 1700946284;
              *((_QWORD *)v77 + 4) += 6;
              if (v81)
              {
LABEL_137:
                v90 = *(_QWORD *)(v76 + 40);
                if (v90 == v76 + 40)
                {
LABEL_166:
                  v96 = 0;
                  v97 = 0;
                }
                else
                {
                  if (v90)
                    v91 = v90 - 24;
                  else
                    v91 = 0;
                  v92 = *(unsigned __int8 *)(v91 + 16);
                  v93 = v92 - 29;
                  if (v92 != 30)
                  {
                    v94 = 2;
                    v96 = 0;
                    v97 = 0;
                    switch(v93)
                    {
                      case 0:
                      case 5:
                      case 6:
                        goto LABEL_167;
                      case 1:
LABEL_278:
                        __break(1u);
                        return;
                      case 2:
                        v94 = (*(_DWORD *)(v91 + 20) >> 1) & 0x3FFFFFF;
                        goto LABEL_165;
                      case 3:
                      case 9:
                        v94 = (*(_DWORD *)(v91 + 20) & 0x7FFFFFF) - 1;
                        goto LABEL_165;
                      case 4:
                        goto LABEL_145;
                      case 7:
                        v94 = *(_WORD *)(v91 + 18) & 1;
                        goto LABEL_165;
                      case 8:
                        v94 = 1;
                        goto LABEL_145;
                      case 10:
                        v94 = *(_DWORD *)(v91 + 80) + 1;
LABEL_165:
                        if (!v94)
                          goto LABEL_166;
                        goto LABEL_145;
                      default:
                        goto LABEL_166;
                    }
                  }
                  if ((*(_DWORD *)(v91 + 20) & 0x7FFFFFF) == 3)
                    v94 = 2;
                  else
                    v94 = 1;
LABEL_145:
                  v95 = v94 - 1;
                  if ((v94 - 1) >= 0x3F)
                    v95 = 63;
                  v96 = v95 + 1;
                  v97 = v94 != v96;
                }
LABEL_167:
                if (v96 <= 1)
                  v102 = 1;
                else
                  v102 = v96;
                v103 = (void *)*((_QWORD *)v77 + 4);
                if (*((_QWORD *)v77 + 3) - (_QWORD)v103 <= 0x30uLL)
                {
                  llvm::raw_ostream::write(v77, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
                  v127 = (void *)*((_QWORD *)v77 + 4);
                }
                else
                {
                  qmemcpy(v103, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
                  v127 = (void *)(*((_QWORD *)v77 + 4) + 49);
                  *((_QWORD *)v77 + 4) = v127;
                }
                if (*((_QWORD *)v77 + 3) - (_QWORD)v127 <= 0x2EuLL)
                {
                  llvm::raw_ostream::write(v77, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
                }
                else
                {
                  qmemcpy(v127, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
                  *((_QWORD *)v77 + 4) += 47;
                }
                sub_1C5E21910(v77, (v102 + v97), 0, 0, 0);
                v104 = (_WORD *)*((_QWORD *)v77 + 4);
                if (*((_QWORD *)v77 + 3) - (_QWORD)v104 > 1uLL)
                {
                  *v104 = 15906;
                  *((_QWORD *)v77 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v77, "\">", 2uLL);
                }
                sub_1C58C9CF0(&__dst, (uint64_t ***)v76, *v142);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v105 = &__dst;
                else
                  v105 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v106 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
                else
                  v106 = __dst.__r_.__value_.__l.__size_;
                llvm::raw_ostream::write(v77, (const char *)v105, v106);
                v107 = *((_QWORD *)v77 + 4);
                if ((unint64_t)(*((_QWORD *)v77 + 3) - v107) > 4)
                {
                  *(_BYTE *)(v107 + 4) = 62;
                  *(_DWORD *)v107 = 1685335868;
                  *((_QWORD *)v77 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v77, "</td>", 5uLL);
                }
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  v101 = (void *)__dst.__r_.__value_.__r.__words[0];
                  goto LABEL_188;
                }
                goto LABEL_189;
              }
            }
            else
            {
              llvm::raw_ostream::write(v77, "label=", 6uLL);
              if (v81)
                goto LABEL_137;
            }
            v98 = (_WORD *)*((_QWORD *)v77 + 4);
            if (*((_QWORD *)v77 + 3) - (_QWORD)v98 > 1uLL)
            {
              *v98 = 31522;
              *((_QWORD *)v77 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v77, "\"{", 2uLL);
            }
            sub_1C58C9CF0(v151, (uint64_t ***)v76, *v142);
            llvm::DOT::EscapeString((char *)v151, &__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = &__dst;
            else
              v99 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
            else
              v100 = __dst.__r_.__value_.__l.__size_;
            llvm::raw_ostream::write(v77, (const char *)v99, v100);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v152) < 0)
            {
              v101 = v151[0];
LABEL_188:
              operator delete(v101);
            }
LABEL_189:
            v151[0] = 0;
            v151[1] = 0;
            v152 = 0;
            LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
            v147 = 0;
            v148 = 0;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
            v150 = v151;
            v149 = 0;
            v145 = 0;
            v146 = 0;
            __dst.__r_.__value_.__r.__words[2] = 0;
            if (v81)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "</tr><tr>", 9uLL);
              v71 = v141;
              v109 = (uint64_t *)((char *)v141 + 32);
              v108 = (void *)*((_QWORD *)v141 + 4);
              if (*((_QWORD *)v141 + 3) - (_QWORD)v108 <= 0xDuLL)
              {
                v110 = "</tr></table>>";
                v111 = 14;
LABEL_194:
                v71 = llvm::raw_ostream::write(v71, v110, v111);
                goto LABEL_195;
              }
              qmemcpy(v108, "</tr></table>>", 14);
              v128 = *v109 + 14;
            }
            else
            {
              v71 = v141;
              v109 = (uint64_t *)((char *)v141 + 32);
              v112 = (_WORD *)*((_QWORD *)v141 + 4);
              if (*((_QWORD *)v141 + 3) - (_QWORD)v112 <= 1uLL)
              {
                v110 = "}\"";
                v111 = 2;
                goto LABEL_194;
              }
              *v112 = 8829;
              v128 = *v109 + 2;
            }
            *v109 = v128;
LABEL_195:
            v113 = *((_QWORD *)v71 + 4);
            if ((unint64_t)(*((_QWORD *)v71 + 3) - v113) > 2)
            {
              *(_BYTE *)(v113 + 2) = 10;
              *(_WORD *)v113 = 15197;
              *v109 += 3;
            }
            else
            {
              v71 = llvm::raw_ostream::write(v71, "];\n", 3uLL);
            }
            v114 = *(_QWORD *)(v76 + 40);
            if (v114 == v76 + 40)
            {
              v124 = 0;
              v117 = 0;
            }
            else
            {
              if (v114)
                v115 = v114 - 24;
              else
                v115 = 0;
              v116 = *(unsigned __int8 *)(v115 + 16);
              if ((v116 - 29) >= 0xB)
                v117 = 0;
              else
                v117 = (llvm::Instruction *)v115;
              if (v116 == 30)
              {
                if ((*(_DWORD *)(v115 + 20) & 0x7FFFFFF) == 3)
                  v118 = 2;
                else
                  v118 = 1;
LABEL_208:
                v119 = 0;
                v120 = 0;
                v121 = 63;
                do
                {
                  llvm::Instruction::getSuccessor(v117, v119);
                  v71 = sub_1C58CA31C(&v141, v76, v117, v120);
                  v119 = v120 + 1;
                  v120 = v120 & 0xFFFFFFFF00000000 | (v120 + 1);
                  v123 = v121-- != 0;
                }
                while (v118 != v119 && v123);
                v124 = v118;
                goto LABEL_221;
              }
              v118 = 2;
              v120 = 0;
              v124 = 0;
              switch(*(_BYTE *)(v115 + 16))
              {
                case 0x1D:
                case 0x22:
                case 0x23:
                  goto LABEL_221;
                case 0x1E:
                  goto LABEL_278;
                case 0x1F:
                  v118 = (*(_DWORD *)(v115 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_218;
                case 0x20:
                case 0x26:
                  v118 = (*(_DWORD *)(v115 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_218;
                case 0x21:
                  goto LABEL_208;
                case 0x24:
                  v118 = *(_WORD *)(v115 + 18) & 1;
                  goto LABEL_218;
                case 0x25:
                  v118 = 1;
                  goto LABEL_208;
                case 0x27:
                  v118 = *(_DWORD *)(v115 + 80) + 1;
LABEL_218:
                  if (!v118)
                    goto LABEL_219;
                  goto LABEL_208;
                default:
LABEL_219:
                  v124 = 0;
                  break;
              }
            }
            v120 = 0;
LABEL_221:
            for (i = v120; v124 != i; v120 = v120 & 0xFFFFFFFF00000000 | (v120 + 1))
            {
              llvm::Instruction::getSuccessor(v117, i);
              v71 = sub_1C58CA31C(&v141, v76, v117, v120);
              i = v120 + 1;
            }
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
            if (v149 == 1)
            {
              v71 = (llvm::raw_ostream *)__dst.__r_.__value_.__r.__words[2];
              if (__dst.__r_.__value_.__r.__words[2])
                v71 = (llvm::raw_ostream *)MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
            }
            if (SHIBYTE(v152) < 0)
              operator delete(v151[0]);
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            v75 = *(_QWORD *)(v75 + 8);
            if (v75 == v74)
            {
              v54 = v141;
              v5 = v132;
              a1 = v133;
              break;
            }
          }
        }
        v129 = (_WORD *)*((_QWORD *)v54 + 4);
        if (*((_QWORD *)v54 + 3) - (_QWORD)v129 > 1uLL)
        {
          *v129 = 2685;
          *((_QWORD *)v54 + 4) += 2;
        }
        else
        {
          v71 = llvm::raw_ostream::write(v54, "}\n", 2uLL);
        }
        if (v140 < 0)
          operator delete(__p);
        v130 = (llvm::raw_ostream *)llvm::errs(v71);
        v131 = (_QWORD *)*((_QWORD *)v130 + 4);
        if (*((_QWORD *)v130 + 3) - (_QWORD)v131 > 7uLL)
        {
          *v131 = 0xA202E656E6F6420;
          *((_QWORD *)v130 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v130, " done. \n", 8uLL);
        }
        *(_OWORD *)a1 = *(_OWORD *)v5;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)v5 = 0;
LABEL_258:
        llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v134);
        return;
      }
    }
    memmove(p_dst, v48, v47);
    goto LABEL_59;
  }
  v136 = 260;
  v134 = a5;
  __dst.__r_.__value_.__r.__words[0] = llvm::sys::fs::openFile((unsigned __int8 *)&v134, &v137, 0, 2, 1, 438);
  __dst.__r_.__value_.__l.__size_ = v10;
  v11 = std::generic_category();
  v134 = 17;
  v135 = v11;
  v12 = (*(uint64_t (**)(std::string::size_type, _QWORD, uint64_t *))(*(_QWORD *)__dst.__r_.__value_.__l.__size_
                                                                             + 32))(__dst.__r_.__value_.__l.__size_, LODWORD(__dst.__r_.__value_.__l.__data_), &v134);
  if ((v12 & 1) != 0
    || (v12 = ((uint64_t (*)(const std::error_category *, std::string *, _QWORD))v135->equivalent_0)(v135, &__dst, v134), (v12 & 1) != 0))
  {
    v18 = (llvm::raw_ostream *)llvm::errs((llvm *)v12);
    v19 = (void *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0x17uLL)
    {
      qmemcpy(v19, "file exists, overwriting", 24);
      v20 = (_BYTE *)(*((_QWORD *)v18 + 4) + 24);
      *((_QWORD *)v18 + 4) = v20;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, "file exists, overwriting", 0x18uLL);
      v20 = (_BYTE *)*((_QWORD *)v18 + 4);
    }
    v21 = (_BYTE *)*((_QWORD *)v18 + 3);
    goto LABEL_29;
  }
  data = (int)__dst.__r_.__value_.__l.__data_;
  v14 = (llvm::raw_ostream *)llvm::errs((llvm *)v12);
  v15 = (char *)*((_QWORD *)v14 + 4);
  v16 = *((_QWORD *)v14 + 3) - (_QWORD)v15;
  if (!data)
  {
    if (v16 > 0x21)
    {
      qmemcpy(v15, "writing to the newly created file ", 34);
      *((_QWORD *)v14 + 4) += 34;
    }
    else
    {
      v14 = llvm::raw_ostream::write(v14, "writing to the newly created file ", 0x22uLL);
    }
    v22 = *(_BYTE *)(v5 + 23);
    v23 = v22 < 0;
    if (v22 >= 0)
      v24 = (const char *)v5;
    else
      v24 = *(const char **)v5;
    v25 = v22 & 0x7F;
    if (v23)
      v26 = *(_QWORD *)(v5 + 8);
    else
      v26 = v25;
    v18 = llvm::raw_ostream::write(v14, v24, v26);
    v21 = (_BYTE *)*((_QWORD *)v18 + 3);
    v20 = (_BYTE *)*((_QWORD *)v18 + 4);
LABEL_29:
    if (v21 == v20)
    {
      llvm::raw_ostream::write(v18, "\n", 1uLL);
    }
    else
    {
      *v20 = 10;
      ++*((_QWORD *)v18 + 4);
    }
    goto LABEL_31;
  }
  if (v16 > 0x16)
  {
    qmemcpy(v15, "error writing into file", 23);
    v17 = (_BYTE *)(*((_QWORD *)v14 + 4) + 23);
    *((_QWORD *)v14 + 4) = v17;
  }
  else
  {
    v14 = llvm::raw_ostream::write(v14, "error writing into file", 0x17uLL);
    v17 = (_BYTE *)*((_QWORD *)v14 + 4);
  }
  if (*((_BYTE **)v14 + 3) == v17)
  {
    llvm::raw_ostream::write(v14, "\n", 1uLL);
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)v14 + 4);
  }
  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
}

uint64_t sub_1C58C83B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  void **v12;
  __int16 v13;
  void *v14;
  int v15;
  char v16;
  uint64_t v17;
  void ***v18;

  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)a3;
    v9 = **(_QWORD **)(a3 + 8);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(__p, v7);
    v13 = 260;
    v12 = __p;
    v15 = 19;
    v16 = 0;
    v14 = &unk_1E814E730;
    v17 = v9;
    v18 = &v12;
    llvm::LLVMContext::diagnose(v8, (const llvm::DiagnosticInfo *)&v14);
    if (v11 < 0)
      operator delete(__p[0]);
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t sub_1C58C849C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  unsigned __int8 v37;

  v8 = a1 + 32;
  v9 = *(_DWORD *)(a1 + 40);
  v34 = a2;
  v35 = 0;
  sub_1C58C8744((uint64_t)v36, a1 + 32, &v34);
  v10 = v36[0];
  v11 = v37;
  sub_1C58C899C(&v35, 0);
  if (v11)
  {
    v12 = operator new();
    *(_QWORD *)v12 = v12;
    *(_DWORD *)(v12 + 8) = v9;
    *(_DWORD *)(v12 + 12) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_BYTE *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 28) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = v12 + 56;
    *(_QWORD *)(v12 + 48) = 0x200000000;
    *(_QWORD *)(v12 + 72) = v12 + 88;
    *(_QWORD *)(v12 + 80) = 0x200000000;
    v36[0] = 0;
    sub_1C58C899C((_QWORD *)(v10 + 8), v12);
    sub_1C58C899C(v36, 0);
    ++v9;
  }
  v34 = a3;
  v35 = 0;
  sub_1C58C8744((uint64_t)v36, v8, &v34);
  v13 = v36[0];
  v14 = v37;
  sub_1C58C899C(&v35, 0);
  if (v14)
  {
    v15 = operator new();
    *(_QWORD *)v15 = v15;
    *(_DWORD *)(v15 + 8) = v9;
    *(_DWORD *)(v15 + 12) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_BYTE *)(v15 + 24) = 0;
    *(_DWORD *)(v15 + 28) = 0;
    *(_DWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = v15 + 56;
    *(_QWORD *)(v15 + 48) = 0x200000000;
    *(_QWORD *)(v15 + 72) = v15 + 88;
    *(_QWORD *)(v15 + 80) = 0x200000000;
    v36[0] = 0;
    sub_1C58C899C((_QWORD *)(v13 + 8), v15);
    sub_1C58C899C(v36, 0);
  }
  v16 = operator new();
  v17 = v16;
  *(_QWORD *)v16 = a2;
  *(_QWORD *)(v16 + 8) = a3;
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 32) = 0;
  *(_DWORD *)(v16 + 24) = 0;
  v19 = *(uint64_t **)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    v21 = *(_QWORD **)(a1 + 8);
    v22 = v19 - v21;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      abort();
    v24 = v18 - (_QWORD)v21;
    if (v24 >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        sub_1C4764EE4();
      v26 = (char *)operator new(8 * v25);
    }
    else
    {
      v26 = 0;
    }
    v27 = (uint64_t *)&v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v17;
    v20 = v27 + 1;
    if (v19 == v21)
    {
      *(_QWORD *)(a1 + 8) = v27;
      *(_QWORD *)(a1 + 16) = v20;
      *(_QWORD *)(a1 + 24) = v28;
    }
    else
    {
      do
      {
        v29 = *--v19;
        *v19 = 0;
        *--v27 = v29;
      }
      while (v19 != v21);
      v19 = *(uint64_t **)(a1 + 8);
      v30 = *(uint64_t **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v27;
      *(_QWORD *)(a1 + 16) = v20;
      *(_QWORD *)(a1 + 24) = v28;
      while (v30 != v19)
      {
        v32 = *--v30;
        v31 = v32;
        *v30 = 0;
        if (v32)
          MEMORY[0x1CAA32FC0](v31, 0x1060C40F4AFCA5ALL);
      }
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v19 = v16;
    v20 = v19 + 1;
  }
  *(_QWORD *)(a1 + 16) = v20;
  return *(v20 - 1);
}

uint64_t sub_1C58C8744(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v13 = 0;
  result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
  v7 = v13;
  if ((result & 1) != 0)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_10;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    sub_1C58C8850(a2, v10);
    v13 = 0;
    result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
    v7 = v13;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v11 = a3[1];
  a3[1] = 0;
  v7[1] = v11;
  v8 = 1;
LABEL_8:
  v12 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_1C58C8850(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)(v4 + 8);
      do
      {
        v14 = *(v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          *v19 = v14;
          v16 = *v13;
          *v13 = 0;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
          sub_1C58C899C(v13, 0);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

_QWORD *sub_1C58C899C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (_QWORD *)v2[9];
    if (v3 != v2 + 11)
      free(v3);
    v4 = (_QWORD *)v2[5];
    if (v4 != v2 + 7)
      free(v4);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t sub_1C58C8A08(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  if (a3 >= 2)
  {
    v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_QWORD *)(v7 + 16) > *(_QWORD *)(*(_QWORD *)result + 16))
      {
        *(_QWORD *)result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((uint64_t *)result != a2)
      {
        v15 = (uint64_t *)(result + 8);
        if ((uint64_t *)(result + 8) != a2)
        {
          v16 = 0;
          v17 = (uint64_t *)result;
          do
          {
            v18 = *v17;
            v17 = v15;
            v19 = *v15;
            if (*(_QWORD *)(*v15 + 16) > *(_QWORD *)(v18 + 16))
            {
              v20 = 0;
              *v15 = 0;
              for (i = v16; ; i -= 8)
              {
                v22 = (uint64_t *)((char *)v6 + i);
                *v22 = 0;
                v22[1] = v18;
                if (v20)
                  MEMORY[0x1CAA32FC0](v20, 0x1060C40F4AFCA5ALL);
                if (!i)
                  break;
                v23 = (uint64_t *)((char *)v6 + i);
                v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(_QWORD *)(v19 + 16) <= *(_QWORD *)(v18 + 16))
                  goto LABEL_20;
                v20 = *v22;
              }
              v23 = v6;
LABEL_20:
              result = *v23;
              *v23 = v19;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
            }
            v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != a2);
        }
      }
    }
    else
    {
      v11 = a4;
      v12 = a3 >> 1;
      v13 = result + 8 * (a3 >> 1);
      v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C58C8D2C(result, v13, v14, a4);
        v24 = &v11[v12];
        result = sub_1C58C8D2C((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v24);
        v25 = &v11[a3];
        v26 = v24;
        v27 = v11;
        while (v26 != v25)
        {
          v28 = *v26;
          v29 = *v27;
          if (*(_QWORD *)(*v26 + 16) <= *(_QWORD *)(*v27 + 16))
          {
            *v27 = 0;
            result = *v6;
            *v6 = v29;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
            ++v27;
          }
          else
          {
            *v26 = 0;
            result = *v6;
            *v6 = v28;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
            ++v26;
          }
          ++v6;
          if (v27 == v24)
          {
            if (v26 != v25)
            {
              v30 = 0;
              do
              {
                v31 = v26[v30];
                v26[v30] = 0;
                result = v6[v30];
                v6[v30] = v31;
                if (result)
                  result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
                ++v30;
              }
              while (&v26[v30] != v25);
            }
            goto LABEL_45;
          }
        }
        if (v27 != v24)
        {
          v32 = 0;
          do
          {
            v33 = v27[v32];
            v27[v32] = 0;
            result = v6[v32];
            v6[v32] = v33;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
            ++v32;
          }
          while (&v27[v32] != v24);
        }
LABEL_45:
        if (v11)
        {
          v34 = a3;
          do
          {
            result = *v11;
            *v11 = 0;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
            ++v11;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1C58C8A08(result, v13, v14, a4, a5);
        sub_1C58C8A08(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v11, a5);
        return sub_1C58C8F68((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1C58C8D2C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      v13 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(_QWORD *)(a2 - 8);
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)result + 16);
      v11 = v9 > v10;
      if (v9 <= v10)
        v12 = (_QWORD *)result;
      else
        v12 = (_QWORD *)(a2 - 8);
      if (!v11)
        v8 = *(_QWORD *)result;
      *v12 = 0;
      *a4 = v8;
      v4 = a4 + 1;
      if (!v11)
        v6 = a2 - 8;
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      v27 = result + 8 * (a3 >> 1);
      sub_1C58C8A08(result, v27, a3 >> 1, a4, a3 >> 1);
      result = sub_1C58C8A08(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        v29 = *(_QWORD *)v28;
        v30 = *(_QWORD *)v6;
        if (*(_QWORD *)(*(_QWORD *)v28 + 16) <= *(_QWORD *)(*(_QWORD *)v6 + 16))
        {
          *(_QWORD *)v6 = 0;
          v6 += 8;
          v29 = v30;
        }
        else
        {
          *(_QWORD *)v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            v31 = 0;
            do
            {
              v32 = *(_QWORD *)(v28 + v31);
              *(_QWORD *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        v33 = 0;
        do
        {
          v34 = *(_QWORD *)(v6 + v33);
          *(_QWORD *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      v14 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        v16 = 0;
        v17 = a4;
        do
        {
          v18 = v17;
          v20 = *v17++;
          v19 = v20;
          v21 = *(_QWORD *)v15;
          if (*(_QWORD *)(*(_QWORD *)v15 + 16) <= *(_QWORD *)(v20 + 16))
          {
            *(_QWORD *)v15 = 0;
            *v17 = v21;
          }
          else
          {
            *v18 = 0;
            v18[1] = v19;
            v22 = v4;
            if (v18 != v4)
            {
              v23 = v16;
              while (1)
              {
                v22 = (uint64_t *)((char *)v4 + v23);
                v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(_QWORD *)(*(_QWORD *)v15 + 16) <= *(_QWORD *)(v24 + 16))
                  break;
                v25 = *v22;
                *(v22 - 1) = 0;
                *v22 = v24;
                if (v25)
                  MEMORY[0x1CAA32FC0](v25, 0x1060C40F4AFCA5ALL);
                v23 -= 8;
                if (!v23)
                {
                  v22 = v4;
                  break;
                }
              }
            }
            v26 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            result = *v22;
            *v22 = v26;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C58C8F68(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *i;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  if (a5)
  {
    v10 = (uint64_t *)result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = *a2;
      v13 = -a4;
      while (1)
      {
        v14 = v10[v11];
        if (*(_QWORD *)(*a2 + 16) > *(_QWORD *)(v14 + 16))
          break;
        ++v11;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v16 = -v13;
      result = (uint64_t)&v10[v11];
      if (-v13 >= a5)
      {
        if (v13 == -1)
        {
          v10[v11] = v12;
          *a2 = v14;
          return result;
        }
        v17 = a6;
        if (v13 > 0)
          v16 = 1 - v13;
        v27 = v16 >> 1;
        v21 = &v10[(v16 >> 1) + v11];
        v20 = a3;
        if (a3 != a2)
        {
          v28 = a3 - a2;
          v20 = a2;
          do
          {
            v29 = v28 >> 1;
            v30 = &v20[v28 >> 1];
            v32 = *v30;
            v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (*(_QWORD *)(v32 + 16) > *(_QWORD *)(*v21 + 16))
              v20 = v31;
            else
              v28 = v29;
          }
          while (v28);
        }
        v19 = v20 - a2;
      }
      else
      {
        v17 = a6;
        if (a5 >= 0)
          v18 = a5;
        else
          v18 = a5 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = a2;
        if ((uint64_t *)result != a2)
        {
          v22 = ((char *)a2 - (char *)v10 - v11 * 8) >> 3;
          v21 = &v10[v11];
          do
          {
            v23 = v22 >> 1;
            v24 = &v21[v22 >> 1];
            v26 = *v24;
            v25 = v24 + 1;
            v22 += ~(v22 >> 1);
            if (*(_QWORD *)(*v20 + 16) > *(_QWORD *)(v26 + 16))
              v22 = v23;
            else
              v21 = v25;
          }
          while (v22);
        }
        v27 = ((char *)v21 - (char *)v10 - v11 * 8) >> 3;
      }
      v33 = v20;
      if (v21 != a2)
      {
        v33 = v21;
        if (a2 != v20)
        {
          v34 = *v21;
          *v21 = v12;
          v33 = v21 + 1;
          for (i = a2; ; *v33++ = *i)
          {
            *i++ = v34;
            if (i == v20)
              break;
            if (v33 == a2)
              a2 = i;
            v34 = *v33;
          }
          if (v33 != a2)
          {
            v36 = v33;
            v37 = a2;
            while (1)
            {
              v38 = v36;
              while (1)
              {
                v39 = *v36;
                *v38++ = *v37;
                *v37++ = v39;
                if (v37 != v20)
                  break;
                v36 = v38;
                v37 = a2;
                if (v38 == a2)
                  goto LABEL_48;
              }
              if (v38 == a2)
                a2 = v37;
              ++v36;
            }
          }
        }
      }
LABEL_48:
      a4 = -(v27 + v13);
      v40 = a5 - v19;
      if (v27 + v19 >= a5 - (v27 + v19) - v13)
      {
        v46 = &v10[v11];
        v47 = v17;
        v40 = v19;
        v44 = a7;
        result = sub_1C58C8F68(v33, v20, a3, a4, a5 - v19, v17);
        v45 = v46;
        v20 = v21;
        a6 = v47;
        a4 = v27;
        a3 = v33;
      }
      else
      {
        v41 = &v10[v11];
        v42 = v21;
        v43 = a3;
        a6 = v17;
        v44 = a7;
        result = sub_1C58C8F68(v41, v42, v33, v27, v19, v17);
        a3 = v43;
        v45 = v33;
      }
      a5 = v40;
      v10 = v45;
      a2 = v20;
      a7 = v44;
      if (!v40)
        return result;
    }
    if (a4 > a5)
    {
      if (a2 == a3)
        return result;
      v48 = 0;
      v49 = 0;
      do
      {
        v50 = a2[v48];
        a2[v48] = 0;
        a6[v48] = v50;
        ++v49;
        ++v48;
      }
      while (&a2[v48] != a3);
      if (!(v48 * 8))
        goto LABEL_94;
      v51 = &a6[v48];
      v52 = a3 - 1;
      while (1)
      {
        if (a2 == v10)
        {
          if (v51 != a6)
          {
            v65 = 0;
            do
            {
              v66 = v51[v65 - 1];
              v51[v65 - 1] = 0;
              result = v52[v65];
              v52[v65] = v66;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
              --v65;
            }
            while (&v51[v65] != a6);
          }
          goto LABEL_94;
        }
        v54 = a2 - 1;
        v53 = *(a2 - 1);
        v55 = *(v51 - 1);
        if (*(_QWORD *)(v55 + 16) > *(_QWORD *)(v53 + 16))
          break;
        *(v51 - 1) = 0;
        result = *v52;
        *v52 = v55;
        v54 = a2;
        --v51;
        if (result)
          goto LABEL_64;
LABEL_65:
        --v52;
        a2 = v54;
        if (v51 == a6)
          goto LABEL_94;
      }
      *v54 = 0;
      result = *v52;
      *v52 = v53;
      if (!result)
        goto LABEL_65;
LABEL_64:
      result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
      goto LABEL_65;
    }
    if (v10 != a2)
    {
      v56 = 0;
      v49 = 0;
      do
      {
        v57 = v10[v56];
        v10[v56] = 0;
        a6[v56] = v57;
        ++v49;
        ++v56;
      }
      while (&v10[v56] != a2);
      if (!(v56 * 8))
        goto LABEL_94;
      v58 = &a6[v56];
      v59 = (uint64_t)&a6[v56 - 1];
      v60 = a6;
      while (a2 != a3)
      {
        v61 = *a2;
        v62 = *v60;
        if (*(_QWORD *)(*a2 + 16) <= *(_QWORD *)(*v60 + 16))
        {
          *v60 = 0;
          result = *v10;
          *v10 = v62;
          if (result)
          {
            v64 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
            a3 = v64;
          }
          ++v60;
        }
        else
        {
          *a2 = 0;
          result = *v10;
          *v10 = v61;
          if (result)
          {
            v63 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
            a3 = v63;
          }
          ++a2;
        }
        ++v10;
        if (v58 == v60)
          goto LABEL_94;
      }
      if (v58 != v60)
      {
        v67 = 0;
        do
        {
          v68 = v60[v67];
          v60[v67] = 0;
          result = v10[v67];
          v10[v67] = v68;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
          ++v67;
        }
        while ((uint64_t *)v59 != &v60[v67 - 1]);
      }
LABEL_94:
      if (a6)
      {
        do
        {
          result = *a6;
          *a6 = 0;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40F4AFCA5ALL);
          ++a6;
          --v49;
        }
        while (v49);
      }
    }
  }
  return result;
}

uint64_t sub_1C58C9490(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  void **v5;
  void **v7;

  sub_1C6184574(a1, a2);
  v4 = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  v5 = *(void ***)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  if (v5)
  {
    v7 = sub_1C62AFDC4(v5);
    MEMORY[0x1CAA32FC0](v7, 0x20C40A759441BLL);
  }
  return a1;
}

void sub_1C58C94E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  _DWORD *v7;
  llvm::Value **v8;
  int v9;
  llvm::Value *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD ***v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  size_t v28;
  _QWORD *v29;
  unsigned int v30;
  llvm::MDNode *Impl;
  std::string *v32;
  std::string::size_type v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Value **v39;
  llvm::Value *v40;
  int v41;
  int v42;
  unint64_t *v43;
  size_t v44;
  const void *v45;
  unint64_t v46;
  void **p_dst;
  uint64_t v48;
  uint64_t v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type size;
  std::string *v58;
  std::string::size_type v59;
  uint64_t v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  BOOL v77;
  uint64_t v78;
  std::string v79;
  void *v80[2];
  char v81;
  void **__dst;
  std::string::size_type v83;
  int64_t v84;
  std::string::value_type v85[8];
  char v86;
  std::string v87;
  std::string v88;
  __int128 __p;
  std::string::size_type v90;
  std::string v91;
  __int16 v92;
  _BYTE __s[32];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::InstrProfError::ID);
  v7 = (_DWORD *)*a2;
  *a2 = 0;
  if (!v6)
  {
    *a1 = v7;
    return;
  }
  v8 = *(llvm::Value ***)a3;
  v9 = v7[2];
  if (v9 != 9 && v9 != 15)
  {
    if (v9 == 13 && !byte_1ED815F58)
    {
LABEL_88:
      *a1 = 0;
      goto LABEL_89;
    }
LABEL_37:
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(_QWORD *)v7 + 24))(&v87, v7);
    v86 = 1;
    strcpy(v85, " ");
    v32 = std::string::append(&v87, v85, 1uLL);
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = *v8;
    if ((*((_BYTE *)*v8 + 23) & 0x10) == 0)
    {
      v44 = 0;
      HIBYTE(v84) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_56;
    }
    v35 = ***(_QWORD ***)v34;
    v36 = *(_QWORD *)(v35 + 152);
    v37 = *(unsigned int *)(v35 + 168);
    if ((_DWORD)v37)
    {
      LODWORD(v38) = (v37 - 1) & ((v34 >> 4) ^ (v34 >> 9));
      v39 = (llvm::Value **)(v36 + 16 * v38);
      v40 = *v39;
      if (*v39 == v34)
      {
LABEL_48:
        v43 = (unint64_t *)v39[1];
        v46 = *v43;
        v45 = v43 + 2;
        v44 = v46;
        if (v46 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v44 >= 0x17)
        {
          v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v48 = v44 | 7;
          v49 = v48 + 1;
          p_dst = (void **)operator new(v48 + 1);
          v83 = v44;
          v84 = v49 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v84) = v44;
          p_dst = (void **)&__dst;
          if (!v44)
            goto LABEL_56;
        }
        memmove(p_dst, v45, v44);
LABEL_56:
        *((_BYTE *)p_dst + v44) = 0;
        if (v84 >= 0)
          v50 = (const std::string::value_type *)&__dst;
        else
          v50 = (const std::string::value_type *)__dst;
        if (v84 >= 0)
          v51 = HIBYTE(v84) & 0x7F;
        else
          v51 = v83;
        v52 = std::string::append(&v88, v50, v51);
        v53 = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)__s = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        *(_QWORD *)&__s[16] = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v81 = 8;
        strcpy((char *)v80, " Hash = ");
        v54 = std::string::append((std::string *)__s, (const std::string::value_type *)v80, 8uLL);
        v55 = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v79, (unint64_t)v8[22]);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v79;
        else
          v56 = (std::string *)v79.__r_.__value_.__r.__words[0];
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v79.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v79.__r_.__value_.__l.__size_;
        v58 = std::string::append(&v91, (const std::string::value_type *)v56, size);
        v59 = v58->__r_.__value_.__r.__words[2];
        __p = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v90 = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (v81 < 0)
          operator delete(v80[0]);
        if ((__s[23] & 0x80000000) != 0)
          operator delete(*(void **)__s);
        if (SHIBYTE(v84) < 0)
          operator delete(__dst);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (v86 < 0)
          operator delete(*(void **)v85);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        v60 = *(_QWORD *)(a3 + 8);
        v61 = v8[1];
        v64 = *((_QWORD *)v61 + 21);
        v62 = (uint64_t)v61 + 168;
        v63 = v64;
        if (*(char *)(v62 + 23) < 0)
          v62 = v63;
        v92 = 260;
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        *(_DWORD *)&__s[8] = 19;
        __s[12] = 1;
        *(_QWORD *)__s = &unk_1E814E730;
        *(_QWORD *)&__s[16] = v62;
        *(_QWORD *)&__s[24] = &v91;
        llvm::LLVMContext::diagnose(v60, (const llvm::DiagnosticInfo *)__s);
        if (SHIBYTE(v90) < 0)
          operator delete((void *)__p);
        goto LABEL_88;
      }
      v41 = 1;
      while (v40 != (llvm::Value *)-4096)
      {
        v42 = v38 + v41++;
        v38 = v42 & (v37 - 1);
        v40 = *(llvm::Value **)(v36 + 16 * v38);
        if (v40 == v34)
        {
          v39 = (llvm::Value **)(v36 + 16 * v38);
          goto LABEL_48;
        }
      }
    }
    v39 = (llvm::Value **)(v36 + 16 * v37);
    goto LABEL_48;
  }
  v78 = a3;
  if (byte_1ED833E08)
  {
    v11 = *v8;
    goto LABEL_9;
  }
  v11 = *v8;
  if (byte_1ED816018)
  {
    if (!*((_QWORD *)v11 + 6))
    {
      v12 = (*((_DWORD *)v11 + 8) & 0xF) == 1;
      goto LABEL_10;
    }
LABEL_9:
    v12 = 1;
LABEL_10:
    v77 = v12;
    goto LABEL_11;
  }
  v77 = 0;
LABEL_11:
  v13 = *(uint64_t **)v8[1];
  strcpy(__s, "instr_prof_hash_mismatch");
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91.__r_.__value_.__r.__words[2];
  v91.__r_.__value_.__l.__size_ = 0x200000000;
  if ((*((_BYTE *)v11 + 23) & 0x20) == 0)
  {
LABEL_26:
    v28 = strlen(__s);
    v29 = llvm::MDString::get(v13, __s, v28);
    v30 = v91.__r_.__value_.__r.__words[1];
    if (LODWORD(v91.__r_.__value_.__r.__words[1]) >= HIDWORD(v91.__r_.__value_.__r.__words[1]))
    {
      v76 = v29;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)&v91.__r_.__value_.__r.__words[2], LODWORD(v91.__r_.__value_.__r.__words[1]) + 1, 8);
      v29 = v76;
      v30 = v91.__r_.__value_.__r.__words[1];
    }
    *(_QWORD *)(v91.__r_.__value_.__r.__words[0] + 8 * v30) = v29;
    ++LODWORD(v91.__r_.__value_.__r.__words[1]);
    Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v13, v91.__r_.__value_.__l.__data_, LODWORD(v91.__r_.__value_.__r.__words[1]), 0, 1);
    llvm::Value::setMetadata(v11, 30, Impl);
    goto LABEL_29;
  }
  v14 = ***(_QWORD ***)v11;
  *(_QWORD *)&__p = v11;
  v15 = *(_DWORD *)(v14 + 2496);
  if (!v15)
  {
    v74 = 0;
LABEL_105:
    v19 = sub_1C541AB24(v14 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v74);
    v75 = __p;
    v19[3] = 0;
    v19[4] = 0;
    *v19 = v75;
    v19[1] = v19 + 3;
    v19[2] = 0x100000000;
    goto LABEL_22;
  }
  v16 = *(_QWORD *)(v14 + 2480);
  v17 = v15 - 1;
  v18 = v17 & ((v11 >> 4) ^ (v11 >> 9));
  v19 = (_QWORD *)(v16 + 40 * v18);
  v20 = (_QWORD ***)*v19;
  if ((llvm::Value *)*v19 != v11)
  {
    v21 = 0;
    v22 = 1;
    while (v20 != (_QWORD ***)-4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == (_QWORD ***)-8192;
      if (v23)
        v21 = v19;
      v24 = v18 + v22++;
      v18 = v24 & v17;
      v19 = (_QWORD *)(v16 + 40 * v18);
      v20 = (_QWORD ***)*v19;
      if ((llvm::Value *)*v19 == v11)
        goto LABEL_22;
    }
    if (v21)
      v74 = v21;
    else
      v74 = v19;
    goto LABEL_105;
  }
LABEL_22:
  v25 = *((unsigned int *)v19 + 4);
  if (!(_DWORD)v25)
    goto LABEL_26;
  v26 = (_QWORD *)(v19[1] + 8);
  v27 = 16 * v25;
  while (*((_DWORD *)v26 - 2) != 30)
  {
    v26 += 2;
    v27 -= 16;
    if (!v27)
      goto LABEL_26;
  }
  v65 = *v26;
  if (!*v26)
    goto LABEL_26;
  v66 = *(unsigned int *)(v65 + 8);
  if (!(_DWORD)v66)
    goto LABEL_26;
  v67 = -8 * v66;
  while (1)
  {
    v68 = *(_QWORD *)(v65 + v67);
    v69 = *(size_t **)(v68 + 8);
    v72 = *v69;
    v70 = v69 + 3;
    v71 = v72;
    if (v72 == strlen(__s) && (!v71 || !memcmp(v70, __s, v71)))
      break;
    v73 = LODWORD(v91.__r_.__value_.__r.__words[1]);
    if (LODWORD(v91.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v91.__r_.__value_.__r.__words[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)&v91.__r_.__value_.__r.__words[2], LODWORD(v91.__r_.__value_.__r.__words[1]) + 1, 8);
      v73 = LODWORD(v91.__r_.__value_.__r.__words[1]);
    }
    *(_QWORD *)(v91.__r_.__value_.__r.__words[0] + 8 * v73) = v68;
    ++LODWORD(v91.__r_.__value_.__r.__words[1]);
    v67 += 8;
    if (!v67)
      goto LABEL_26;
  }
LABEL_29:
  if ((std::string::size_type *)v91.__r_.__value_.__l.__data_ != &v91.__r_.__value_.__r.__words[2])
    free(v91.__r_.__value_.__l.__data_);
  a3 = v78;
  if (!v77)
    goto LABEL_37;
  *a1 = 0;
  if (v7)
LABEL_89:
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
}

_QWORD *sub_1C58C9B90(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = (_QWORD *)result[1];
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 3;
      if (*(v4 - 1))
      {
        v6 = *(v4 - 3);
        result = (_QWORD *)*(v4 - 2);
        v7 = *result;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
        **(_QWORD **)(v6 + 8) = v7;
        *(v4 - 1) = 0;
        if (result != v5)
        {
          do
          {
            v8 = (_QWORD *)result[1];
            operator delete(result);
            result = v8;
          }
          while (v8 != v5);
        }
      }
      v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

uint64_t sub_1C58C9C18(uint64_t result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3)
  {
    v4 = result;
    v5 = 8 * a3;
    while (1)
    {
      v6 = *a2;
      if (!*(_BYTE *)(*a2 + 27))
        break;
      ++a2;
      v5 -= 8;
      if (!v5)
        return result;
    }
    *(_QWORD *)(v6 + 32) = a4;
    *(_BYTE *)(v6 + 27) = 1;
    v7 = *(_QWORD *)v6;
    v13 = 0;
    if (sub_1C49F21C0(*(_QWORD *)(result + 216), *(_DWORD *)(result + 232), v7, &v13))
    {
      v8 = v13;
      v9 = *(_QWORD *)(v4 + 216);
      LODWORD(v10) = *(_DWORD *)(v4 + 232);
    }
    else
    {
      v9 = *(_QWORD *)(v4 + 216);
      v10 = *(unsigned int *)(v4 + 232);
      v8 = v9 + 16 * v10;
    }
    --*(_DWORD *)(*(_QWORD *)(v8 + 8) + 32);
    v11 = *(_QWORD *)(v6 + 8);
    v13 = 0;
    result = sub_1C49F21C0(v9, v10, v11, &v13);
    if ((_DWORD)result)
      v12 = v13;
    else
      v12 = *(_QWORD *)(v4 + 216) + 16 * *(unsigned int *)(v4 + 232);
    --*(_DWORD *)(*(_QWORD *)(v12 + 8) + 28);
  }
  return result;
}

uint64_t sub_1C58C9CF0(_QWORD *a1, uint64_t ***a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  unint64_t *v19;
  size_t v20;
  const void *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  size_t v27;
  _WORD *v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  size_t v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t ***i;
  llvm::Instruction *v39;
  uint64_t v40;
  _DWORD *v41;
  const char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *__p[2];
  int64_t v48;
  void (**v49)(llvm::raw_ostream *__hidden);
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  unint64_t *v66;
  unint64_t v67[2];
  uint64_t v68;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v50 = 0;
  v54 = 0;
  v55 = 0;
  v49 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v57 = a1;
  v56 = 0;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_49;
  v5 = ***a2;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  v8 = a2 >> 4;
  if (!(_DWORD)v7)
    goto LABEL_10;
  LODWORD(v9) = (v7 - 1) & (v8 ^ (a2 >> 9));
  v10 = (uint64_t ****)(v6 + 16 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v7 - 1);
      v11 = *(uint64_t ****)(v6 + 16 * v9);
      if (v11 == a2)
        goto LABEL_11;
    }
LABEL_10:
    v9 = v7;
LABEL_11:
    if (**(_QWORD **)(v6 + 16 * v9 + 8))
    {
      if (!(_DWORD)v7)
        goto LABEL_18;
      goto LABEL_13;
    }
    goto LABEL_49;
  }
  if (*v10[1])
  {
LABEL_13:
    LODWORD(v14) = (v7 - 1) & (v8 ^ (a2 >> 9));
    v15 = (uint64_t ****)(v6 + 16 * v14);
    v16 = *v15;
    if (*v15 == a2)
      goto LABEL_19;
    v17 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v7 - 1);
      v16 = *(uint64_t ****)(v6 + 16 * v14);
      if (v16 == a2)
      {
        v15 = (uint64_t ****)(v6 + 16 * v14);
        goto LABEL_19;
      }
    }
LABEL_18:
    v15 = (uint64_t ****)(v6 + 16 * v7);
LABEL_19:
    v19 = (unint64_t *)v15[1];
    v22 = *v19;
    v21 = v19 + 2;
    v20 = v22;
    if (v22 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      __p[1] = (void *)v20;
      v48 = v25 | 0x8000000000000000;
      __p[0] = v23;
    }
    else
    {
      HIBYTE(v48) = v20;
      v23 = __p;
      if (!v20)
        goto LABEL_27;
    }
    memmove(v23, v21, v20);
LABEL_27:
    *((_BYTE *)v23 + v20) = 0;
    goto LABEL_28;
  }
LABEL_49:
  v67[0] = 0;
  v67[1] = 0;
  v68 = 0;
  v59 = 0;
  v63 = 0;
  v64 = 0;
  v58 = (unint64_t)&unk_1E81A7208;
  v66 = v67;
  v65 = 0;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  llvm::Value::printAsOperand((llvm::Value *)a2, (llvm::raw_ostream *)&v58, 0, 0);
  if (*((char *)v66 + 23) < 0)
  {
    sub_1C47EBC30(__p, (void *)*v66, v66[1]);
  }
  else
  {
    v36 = *(_OWORD *)v66;
    v48 = v66[2];
    *(_OWORD *)__p = v36;
  }
  v58 = (unint64_t)off_1E81A6E70;
  if (v65 == 1 && v60)
    MEMORY[0x1CAA32F9C](v60, 0x1000C8077774924);
  if (SHIBYTE(v68) < 0)
    operator delete((void *)v67[0]);
LABEL_28:
  if (v48 >= 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  if (v48 >= 0)
    v27 = HIBYTE(v48) & 0x7F;
  else
    v27 = (size_t)__p[1];
  llvm::raw_ostream::write((llvm::raw_ostream *)&v49, (const char *)v26, v27);
  v28 = (_WORD *)v53;
  if ((unint64_t)(v52 - v53) > 2)
  {
    *(_BYTE *)(v53 + 2) = 108;
    *v28 = 23610;
    v53 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v49, ":\\l", 3uLL);
  }
  if (SHIBYTE(v48) < 0)
    operator delete(__p[0]);
  v58 = 0;
  result = sub_1C49F21C0(*(_QWORD *)(a3 + 216), *(_DWORD *)(a3 + 232), (uint64_t)a2, &v58);
  if ((_DWORD)result)
  {
    v30 = v58;
    v31 = *(_QWORD *)(a3 + 216);
    v32 = *(unsigned int *)(a3 + 232);
  }
  else
  {
    v31 = *(_QWORD *)(a3 + 216);
    v32 = *(unsigned int *)(a3 + 232);
    v30 = v31 + 16 * v32;
  }
  if (v30 == v31 + 16 * v32)
    v33 = 0;
  else
    v33 = *(_QWORD *)(v30 + 8);
  if ((unint64_t)(v52 - v53) > 7)
  {
    *(_QWORD *)v53 = 0x203A20746E756F43;
    v53 += 8;
    if (!v33)
      goto LABEL_57;
  }
  else
  {
    result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)&v49, "Count : ", 8uLL);
    if (!v33)
    {
LABEL_57:
      v37 = (_QWORD *)v53;
      if ((unint64_t)(v52 - v53) <= 8)
      {
        v34 = "Unknown\\l";
        v35 = 9;
        goto LABEL_59;
      }
      *(_BYTE *)(v53 + 8) = 108;
      *v37 = *(_QWORD *)"Unknown\\l";
      v46 = v53 + 9;
LABEL_87:
      v53 = v46;
      goto LABEL_60;
    }
  }
  if (!*(_BYTE *)(v33 + 24))
    goto LABEL_57;
  result = (uint64_t)sub_1C5E21910((llvm::raw_ostream *)&v49, *(_QWORD *)(v33 + 16), 0, 0, 0);
  if ((unint64_t)(v52 - v53) > 1)
  {
    *(_WORD *)v53 = 27740;
    v46 = v53 + 2;
    goto LABEL_87;
  }
  v34 = "\\l";
  v35 = 2;
LABEL_59:
  result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)&v49, v34, v35);
LABEL_60:
  if (byte_1ED8160D8)
  {
    for (i = (uint64_t ***)a2[6]; i != a2 + 5; i = (uint64_t ***)i[1])
    {
      if (i)
        v39 = (llvm::Instruction *)(i - 3);
      else
        v39 = 0;
      if (*((_BYTE *)v39 + 16) != 85)
        continue;
      v40 = v53;
      if ((unint64_t)(v52 - v53) > 0xE)
      {
        *(_QWORD *)v53 = *(_QWORD *)"SELECT : { T = ";
        *(_QWORD *)(v40 + 7) = *(_QWORD *)": { T = ";
        v53 += 15;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v49, "SELECT : { T = ", 0xFuLL);
      }
      v58 = 0;
      v67[0] = 0;
      result = llvm::Instruction::extractProfMetadata(v39, &v58, v67);
      if ((result & 1) != 0)
      {
        sub_1C5E21910((llvm::raw_ostream *)&v49, v58, 0, 0, 0);
        v41 = (_DWORD *)v53;
        if ((unint64_t)(v52 - v53) > 5)
        {
          *(_WORD *)(v53 + 4) = 8253;
          *v41 = 541466668;
          v53 += 6;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v49, ", F = ", 6uLL);
        }
        result = (uint64_t)sub_1C5E21910((llvm::raw_ostream *)&v49, v67[0], 0, 0, 0);
        if ((unint64_t)(v52 - v53) > 3)
        {
          *(_DWORD *)v53 = 1818000672;
          v45 = v53 + 4;
LABEL_82:
          v53 = v45;
          continue;
        }
        v42 = " }\\l";
        v43 = 4;
      }
      else
      {
        v44 = v53;
        if ((unint64_t)(v52 - v53) > 0x17)
        {
          *(_OWORD *)v53 = *(_OWORD *)"Unknown, F = Unknown }\\l";
          *(_QWORD *)(v44 + 16) = *(_QWORD *)"nown }\\l";
          v45 = v53 + 24;
          goto LABEL_82;
        }
        v42 = "Unknown, F = Unknown }\\l";
        v43 = 24;
      }
      result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)&v49, v42, v43);
    }
  }
  v49 = off_1E81A6E70;
  if (v56 == 1)
  {
    result = v51;
    if (v51)
      return MEMORY[0x1CAA32F9C](v51, 0x1000C8077774924);
  }
  return result;
}

llvm::raw_ostream *sub_1C58CA31C(llvm::raw_ostream **a1, unint64_t a2, llvm::Instruction *this, unsigned int a4)
{
  llvm::raw_ostream *result;
  unint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  _WORD *v12;

  result = (llvm::raw_ostream *)llvm::Instruction::getSuccessor(this, a4);
  if (result)
  {
    v7 = (unint64_t)result;
    v8 = *a1;
    v9 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v9) > 4)
    {
      *(_BYTE *)(v9 + 4) = 101;
      *(_DWORD *)v9 = 1685016073;
      *((_QWORD *)v8 + 4) += 5;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, "\tNode", 5uLL);
    }
    llvm::write_hex(v8, a2, 3, 0, 0);
    v10 = *a1;
    v11 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x65646F4E203E2D20;
      *((_QWORD *)v10 + 4) += 8;
    }
    else
    {
      v10 = llvm::raw_ostream::write(v10, " -> Node", 8uLL);
    }
    llvm::write_hex(v10, v7, 3, 0, 0);
    result = *a1;
    v12 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v12 >= 2uLL)
    {
      *v12 = 2619;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, ";\n", 2uLL);
    }
  }
  return result;
}

void sub_1C58CA454(_QWORD *a1, _BYTE *a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  int v5;
  _BOOL4 v6;
  __int16 v7;
  char v8;
  int v9;
  BOOL v10;
  char v11;
  const char *v12;
  char v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  char v24;
  char v25;

  v2 = "-";
  v3 = " ";
  if (!a2[25])
    v2 = " ";
  if (a2[24])
    v4 = " ";
  else
    v4 = "*";
  v5 = *(unsigned __int8 *)v4;
  v6 = *v4 == 0;
  if (*v2)
  {
    if (*v4)
    {
      *(_QWORD *)&v15 = v2;
      *(_QWORD *)&v16 = v4;
      v7 = 771;
    }
    else
    {
      *(_QWORD *)&v15 = v2;
      v7 = 259;
    }
    LOWORD(v17) = v7;
    if (a2[26])
      v3 = "c";
    if (*v3)
      goto LABEL_21;
LABEL_28:
    v18 = v15;
    v19 = v16;
    v20 = v17;
    v11 = v17;
    goto LABEL_33;
  }
  if (*v4)
    v8 = 3;
  else
    v8 = 1;
  *(_QWORD *)&v15 = v4;
  LOBYTE(v17) = v8;
  BYTE1(v17) = 1;
  if (a2[26])
    v3 = "c";
  v9 = *(unsigned __int8 *)v3;
  if (!v5)
  {
    *(_QWORD *)&v18 = v3;
    if (v9)
      v11 = 3;
    else
      v11 = 1;
    LOBYTE(v20) = v11;
    BYTE1(v20) = 1;
    goto LABEL_33;
  }
  if (!*v3)
    goto LABEL_28;
  v6 = 1;
  v2 = v4;
LABEL_21:
  v10 = !v6;
  if (v6)
    v11 = 3;
  else
    v11 = 2;
  if (v10)
    v2 = (const char *)&v15;
  *(_QWORD *)&v18 = v2;
  *(_QWORD *)&v19 = v3;
  LOBYTE(v20) = v11;
  BYTE1(v20) = 3;
LABEL_33:
  if (v11 == 1)
  {
    v12 = "  W=";
    v21[0] = "  W=";
    v22 = 259;
    v13 = 3;
  }
  else
  {
    v14 = (__int128 *)v18;
    v13 = 2;
    if (BYTE1(v20) != 1)
    {
      v11 = 2;
      v14 = &v18;
    }
    v21[0] = v14;
    v21[1] = *((_QWORD *)&v18 + 1);
    v21[2] = "  W=";
    LOBYTE(v22) = v11;
    HIBYTE(v22) = 3;
    v12 = (const char *)v21;
  }
  v23[0] = v12;
  v23[2] = a2 + 16;
  v24 = v13;
  v25 = 12;
  llvm::Twine::str((llvm::Twine *)v23, a1);
}

void sub_1C58CA62C(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED815980, "pgo-view-raw-counts", 0x13uLL);
  word_1ED81598A = (32 * (*a1 & 3)) | word_1ED81598A & 0xFF9F;
  xmmword_1ED8159A0 = *a2;
  sub_1C4DB1A88(a3, (uint64_t)&qword_1ED815980);
}

uint64_t sub_1C58CA69C(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

uint64_t sub_1C58CA6C4(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BranchProbabilityAnalysis::Key, a2) + 8;
}

uint64_t sub_1C58CA6EC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C58CA714()
{
  const char *v1;
  int v2;
  __n128 v3;
  int v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = "";
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"filename";
  v5.n128_u64[1] = 8;
  v3.n128_u64[0] = (unint64_t)"Specify the path of profile data file. This ismainly for test purpose.";
  v3.n128_u64[1] = 70;
  sub_1C47AD050((uint64_t)&qword_1ED816898, 0, 0);
  qword_1ED816920 = 0;
  qword_1ED816918 = 0;
  unk_1ED816928 = 0;
  qword_1ED816938 = 0;
  qword_1ED816948 = 0;
  qword_1ED816940 = 0;
  byte_1ED816950 = 0;
  qword_1ED816930 = (uint64_t)&unk_1E819E950;
  qword_1ED816898 = (uint64_t)&unk_1E819E480;
  qword_1ED816958 = (uint64_t)&unk_1E819E970;
  qword_1ED816960 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED816978 = (uint64_t)&qword_1ED816960;
  sub_1C62AFE70(&v1, &v4, (__int128 *)&v5, &v3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED816898);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED816898, &dword_1C475E000);
  v1 = "";
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"filename";
  v5.n128_u64[1] = 8;
  v3.n128_u64[0] = (unint64_t)"Specify the path of profile remapping file. This is mainly for test purpose.";
  v3.n128_u64[1] = 76;
  sub_1C47AD050((uint64_t)&qword_1ED816980, 0, 0);
  qword_1ED816A08 = 0;
  qword_1ED816A00 = 0;
  unk_1ED816A10 = 0;
  qword_1ED816A20 = 0;
  qword_1ED816A30 = 0;
  qword_1ED816A28 = 0;
  byte_1ED816A38 = 0;
  qword_1ED816A18 = (uint64_t)&unk_1E819E950;
  qword_1ED816980 = (uint64_t)&unk_1E819E480;
  qword_1ED816A40 = (uint64_t)&unk_1E819E970;
  qword_1ED816A48 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED816A60 = (uint64_t)&qword_1ED816A48;
  sub_1C62AFEF8(&v1, &v4, (__int128 *)&v5, &v3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED816980);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED816980, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Disable Value Profiling";
  v5.n128_u64[1] = 23;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED815BD8, "disable-vp", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED815BD8, &dword_1C475E000);
  LODWORD(v1) = 3;
  v3.n128_u64[0] = (unint64_t)&v1;
  v4 = 1;
  v2 = 1;
  v5.n128_u64[0] = (unint64_t)"Max number of annotations for a single indirect call callsite";
  v5.n128_u64[1] = 61;
  sub_1C62AFF80((int **)&v3, &v4, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED815C98, &dword_1C475E000);
  LODWORD(v1) = 4;
  v3.n128_u64[0] = (unint64_t)&v1;
  v4 = 1;
  v2 = 1;
  v5.n128_u64[0] = (unint64_t)"Max number of preicise value annotations for a single memopintrinsic";
  v5.n128_u64[1] = 68;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED815D58, "memop-max-annotations", (int **)&v3, &v4, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED815D58, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Append function hash to the name of COMDAT function to avoid function hash mismatch"
                                     " due to the preinliner";
  v5.n128_u64[1] = 105;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED815E18, "do-comdat-renaming", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED815E18, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn on/off warnings about missing profile data for functions.";
  v5.n128_u64[1] = 81;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED815ED8, "pgo-warn-missing-function", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED815ED8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn off/on warnings about profile cfg mismatch.";
  v5.n128_u64[1] = 67;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::NoPGOWarnMismatch, "no-pgo-warn-mismatch", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::NoPGOWarnMismatch, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"The option is used to turn on/off warnings about hash mismatch for comdat functions.";
  v5.n128_u64[1] = 84;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED815F98, "no-pgo-warn-mismatch-comdat", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED815F98, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn on/off SELECT instruction instrumentation. ";
  v5.n128_u64[1] = 67;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED816058, "pgo-instr-select", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816058, &dword_1C475E000);
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"A BOOLean option to show CFG dag or text with raw profile counts from profile data."
                                     " See also option -pgo-view-counts. To limit graph display to only one function, use"
                                     " filtering option -view-bfi-func-name.";
  v3.n128_u64[1] = 204;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "none";
  v6[1] = 4;
  v7 = 0;
  v8 = "do not show.";
  v9 = 12;
  v10 = "graph";
  v11 = 5;
  v12 = 1;
  v13 = "show a graph.";
  v14 = 13;
  v15 = "text";
  v16 = 4;
  v17 = 2;
  v18 = "show in text.";
  v19 = 13;
  v5.n128_u64[1] = 0x400000003;
  sub_1C62B00C4(&v1, (__int128 *)&v3, (uint64_t *)&v5);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C617AF3C, &qword_1ED815980, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to turn on/off memory intrinsic size profiling.";
  v5.n128_u64[1] = 63;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED816118, "pgo-instr-memop", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816118, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"When this option is on, the annotated branch probability will be emitted as optimiz"
                                     "ation remarks: -{Rpass|pass-remarks}=pgo-instrumentation";
  v5.n128_u64[1] = 139;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8161D8, "pgo-emit-branch-prob", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8161D8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Force to instrument function entry basicblock.";
  v5.n128_u64[1] = 46;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED816298, "pgo-instrument-entry", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816298, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)&v2;
  LODWORD(v1) = 1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Use this option to enable function entry coverage instrumentation.";
  v5.n128_u64[1] = 66;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED816358, "pgo-function-entry-coverage", &v3, &v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816358, &dword_1C475E000);
  LOBYTE(v4) = 1;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Fix function entry count in profile use.";
  v5.n128_u64[1] = 40;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED816418, "pgo-fix-entry-count", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816418, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Print out the non-match BFI count if a hot raw profile count becomes non-hot, or a "
                                     "cold raw profile count becomes hot. The print is enabled under -Rpass-analysis=pgo,"
                                     " or internal option -pass-remakrs-analysis=pgo.";
  v5.n128_u64[1] = 213;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8164D8, "pgo-verify-hot-bfi", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8164D8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Print out mismatched BFI counts after setting profile metadata The print is enabled"
                                     " under -Rpass-analysis=pgo, or internal option -pass-remakrs-analysis=pgo.";
  v5.n128_u64[1] = 157;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED816598, "pgo-verify-bfi", &v3, &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816598, &dword_1C475E000);
  LODWORD(v1) = 2;
  v3.n128_u64[0] = (unint64_t)&v1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Set the threshold for pgo-verify-bfi:  only print out mismatched BFI if the differe"
                                     "nce percentage is greater than this value (in percentage).";
  v5.n128_u64[1] = 141;
  sub_1C4DB1928((uint64_t)&unk_1ED816658, "pgo-verify-bfi-ratio", (int **)&v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED816658, &dword_1C475E000);
  LODWORD(v1) = 5;
  v3.n128_u64[0] = (unint64_t)&v1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Set the threshold for pgo-verify-bfi: skip the counts whose profile count value is below.";
  v5.n128_u64[1] = 89;
  sub_1C4DB1928((uint64_t)&unk_1ED816718, "pgo-verify-bfi-cutoff", (int **)&v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED816718, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v3.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Use the old CFG function hashing";
  v5.n128_u64[1] = 32;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8167D8, "pgo-instr-old-cfg-hashing", &v3, &v1, &v5);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8167D8, &dword_1C475E000);
}

_QWORD *llvm::PGOMemOPSizeOpt::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v7;
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *BlockProfileCount;
  char v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __int128 *v60;
  _BYTE *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  _DWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 *v81;
  int v82;
  __int128 *v83;
  int v84;
  uint64_t *v85;
  char v86;
  char v87;
  int v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  llvm *v92;
  uint64_t *v93;
  uint64_t BlockFreq;
  uint64_t v95;
  llvm *v96;
  uint64_t ***v97;
  uint64_t v98;
  llvm::BasicBlock *v99;
  uint64_t ***v100;
  _QWORD **v101;
  uint64_t v102;
  _QWORD **v103;
  uint64_t ***v104;
  uint64_t ***v105;
  uint64_t **v106;
  uint64_t **v107;
  _QWORD ***v108;
  int v109;
  char *v110;
  llvm::Value *v111;
  char *v112;
  char *v113;
  unsigned __int8 **v114;
  int v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t **i;
  uint64_t v121;
  uint64_t **v122;
  __int128 *v123;
  unint64_t v124;
  int v125;
  llvm::Value *v126;
  std::string::size_type *v127;
  _QWORD **v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const llvm::APInt *v137;
  uint64_t v138;
  llvm::ConstantInt *v139;
  unint64_t v140;
  unint64_t v141;
  llvm::ValueHandleBase *v142;
  uint64_t v143;
  llvm::ValueHandleBase **v144;
  uint64_t v145;
  llvm::ValueHandleBase ***v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  llvm::Value *v152;
  uint64_t **v153;
  char *v154;
  char *v155;
  unsigned __int8 **v156;
  int v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  _QWORD *v161;
  char *v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t *v169;
  uint64_t *v170;
  char *v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  llvm **v180;
  uint64_t v181;
  llvm::ValueSymbolTable *v182;
  llvm::OptimizationRemarkEmitter *v183;
  uint64_t v184;
  std::string *v185;
  uint64_t v186;
  uint64_t *v187;
  unsigned int v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  size_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  void **v200;
  char *v201;
  unint64_t v202;
  void **v203;
  int v204;
  unint64_t v205;
  llvm::DebugLoc *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  llvm::PHINode *v215;
  unint64_t v216;
  llvm *v217;
  uint64_t v218;
  std::string::size_type *v219;
  _QWORD *v220;
  _QWORD *v221;
  __int128 *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t ***v227;
  llvm::Value *v228;
  uint64_t *v229;
  _QWORD **v230;
  llvm::BlockFrequencyInfo *v231;
  llvm::OptimizationRemarkEmitter *v232;
  int v233[2];
  uint64_t *v234;
  unsigned __int8 v235;
  void *v236;
  char *v237;
  char *v238;
  _OWORD *v239;
  void *__p;
  char *v241;
  char *v242;
  unint64_t v243;
  unsigned int v244;
  std::string v245;
  void *v246;
  char v247;
  std::string v248;
  void *v249;
  char v250;
  std::string v251;
  void *v252;
  char v253;
  void *__dst[2];
  char v255;
  void *v256;
  char v257;
  const void *v258[2];
  void *v259;
  uint64_t v260;
  _BYTE v261[32];
  llvm *v262;
  _QWORD **v263;
  uint64_t v264;
  void **v265;
  void **v266;
  uint64_t v267;
  int v268;
  __int16 v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275[2];
  _BYTE v276[16];
  __int16 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  _BYTE *v283;
  void *v284;
  uint64_t v285;
  int v286;
  _BYTE v287[64];
  _BYTE v288[24];
  __int16 v289;
  void *v290;
  uint64_t v291;
  _BYTE v292[384];
  void *v293;
  uint64_t v294;
  _QWORD v295[16];
  void *v296;
  uint64_t v297;
  _BYTE v298[128];
  _QWORD v299[4];
  __int16 v300;
  void *v301;
  unsigned int v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  std::string *v306;
  __int128 v307;
  const char *v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  void **v312;
  void *v313;
  uint64_t v314;
  int v315;
  __int16 v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  void *v321;
  char v322;
  int v323;
  uint64_t v324;
  uint64_t v325;

  v325 = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, a1);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OptimizationRemarkEmitterAnalysis::Key, a1);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a1);
  if (CachedResultImpl)
    v9 = CachedResultImpl + 8;
  else
    v9 = 0;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1);
  if (byte_1ED816BA8)
    goto LABEL_5;
  v12 = *(_QWORD *)(a1 + 112);
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 17) & 4) != 0)
      goto LABEL_5;
  }
  v230 = (_QWORD **)a1;
  v231 = (llvm::BlockFrequencyInfo *)(ResultImpl + 8);
  v232 = (llvm::OptimizationRemarkEmitter *)(v7 + 8);
  *(_QWORD *)v233 = v9;
  v234 = (uint64_t *)(v10 + 8);
  v235 = 0;
  v238 = 0;
  v236 = 0;
  v13 = (_OWORD *)operator new[]();
  *v13 = 0u;
  v13[1] = 0u;
  v13[2] = 0u;
  v13[3] = 0u;
  v13[4] = 0u;
  v13[5] = 0u;
  v13[6] = 0u;
  v13[7] = 0u;
  v13[8] = 0u;
  v13[9] = 0u;
  v13[10] = 0u;
  v13[11] = 0u;
  v13[12] = 0u;
  v13[13] = 0u;
  v13[14] = 0u;
  v13[15] = 0u;
  v13[16] = 0u;
  v13[17] = 0u;
  v13[18] = 0u;
  v13[19] = 0u;
  v13[20] = 0u;
  v13[21] = 0u;
  v239 = v13;
  v237 = 0;
  v14 = a1 + 72;
  v15 = *(_QWORD *)(a1 + 80);
  if (v15 != a1 + 72)
  {
    v214 = a3;
    do
    {
      v16 = v15 - 24;
      v46 = v15 == 0;
      v15 = *(_QWORD *)(v15 + 8);
      if (v46)
        v16 = 0;
      v17 = v16 + 40;
      v18 = *(_QWORD *)(v16 + 48);
      while (v18 != v17)
      {
        v19 = v18 - 24;
        v46 = v18 == 0;
        v18 = *(_QWORD *)(v18 + 8);
        if (v46)
          v20 = 0;
        else
          v20 = v19;
        if (*(_BYTE *)(v20 + 16) == 84)
        {
          v21 = *(_QWORD *)(v20 - 32);
          if (v21 && !*(_BYTE *)(v21 + 16) && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v20 + 72))
          {
            v22 = *(_DWORD *)(v21 + 36);
            if (v22 > 196)
            {
              if (v22 > 312)
                goto LABEL_21;
              if (v22 == 197)
              {
                if (*(_BYTE *)(*(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 64) + 16) != 16)
                {
                  v23 = v237;
                  if (v237 < v238)
                  {
LABEL_53:
                    *(_QWORD *)v23 = v20;
                    v34 = v23 + 8;
                    goto LABEL_77;
                  }
                  v35 = (char *)v236;
                  v36 = (v237 - (_BYTE *)v236) >> 3;
                  v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 61)
LABEL_360:
                    abort();
                  v38 = v238 - (_BYTE *)v236;
                  if ((v238 - (_BYTE *)v236) >> 2 > v37)
                    v37 = v38 >> 2;
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                    v28 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v28 = v37;
                  if (v28)
                  {
                    if (v28 >> 61)
LABEL_361:
                      sub_1C4764EE4();
                    v29 = (char *)operator new(8 * v28);
                  }
                  else
                  {
                    v29 = 0;
                  }
                  v39 = (uint64_t *)&v29[8 * v36];
                  *v39 = v20;
                  v34 = (char *)(v39 + 1);
                  if (v23 != v35)
                  {
                    do
                    {
                      v41 = *((_QWORD *)v23 - 1);
                      v23 -= 8;
                      *--v39 = v41;
                    }
                    while (v23 != v35);
                    goto LABEL_74;
                  }
                  goto LABEL_75;
                }
              }
              else
              {
                if (v22 != 199)
                  goto LABEL_21;
                if (*(_BYTE *)(*(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 64) + 16) != 16)
                {
                  v23 = v237;
                  if (v237 < v238)
                    goto LABEL_53;
                  v30 = (char *)v236;
                  v31 = (v237 - (_BYTE *)v236) >> 3;
                  v32 = v31 + 1;
                  if ((unint64_t)(v31 + 1) >> 61)
                    goto LABEL_360;
                  v33 = v238 - (_BYTE *)v236;
                  if ((v238 - (_BYTE *)v236) >> 2 > v32)
                    v32 = v33 >> 2;
                  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                    v28 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v28 = v32;
                  if (v28)
                  {
                    if (v28 >> 61)
                      goto LABEL_361;
                    v29 = (char *)operator new(8 * v28);
                  }
                  else
                  {
                    v29 = 0;
                  }
                  v39 = (uint64_t *)&v29[8 * v31];
                  *v39 = v20;
                  v34 = (char *)(v39 + 1);
                  if (v23 != v30)
                  {
                    do
                    {
                      v40 = *((_QWORD *)v23 - 1);
                      v23 -= 8;
                      *--v39 = v40;
                    }
                    while (v23 != v30);
                    goto LABEL_74;
                  }
LABEL_75:
                  v236 = v39;
                  v238 = &v29[8 * v28];
                  if (v23)
                    operator delete(v23);
LABEL_77:
                  v237 = v34;
                }
              }
            }
            else
            {
              if (v22 != 194)
                goto LABEL_21;
              if (*(_BYTE *)(*(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 64) + 16) != 16)
              {
                v23 = v237;
                if (v237 < v238)
                  goto LABEL_53;
                v24 = (char *)v236;
                v25 = (v237 - (_BYTE *)v236) >> 3;
                v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 61)
                  goto LABEL_360;
                v27 = v238 - (_BYTE *)v236;
                if ((v238 - (_BYTE *)v236) >> 2 > v26)
                  v26 = v27 >> 2;
                if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
                  v28 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v28 = v26;
                if (v28)
                {
                  if (v28 >> 61)
                    goto LABEL_361;
                  v29 = (char *)operator new(8 * v28);
                }
                else
                {
                  v29 = 0;
                }
                v39 = (uint64_t *)&v29[8 * v25];
                *v39 = v20;
                v34 = (char *)(v39 + 1);
                if (v23 != v24)
                {
                  do
                  {
                    v42 = *((_QWORD *)v23 - 1);
                    v23 -= 8;
                    *--v39 = v42;
                  }
                  while (v23 != v24);
LABEL_74:
                  v23 = (char *)v236;
                  goto LABEL_75;
                }
                goto LABEL_75;
              }
            }
          }
          else
          {
LABEL_21:
            sub_1C58CCA58((uint64_t)&v230, v20);
          }
        }
      }
    }
    while (v15 != v14);
    v43 = (uint64_t *)v236;
    v229 = (uint64_t *)v237;
    a3 = v214;
    if (v236 != v237)
    {
      do
      {
        v44 = *v43;
        v45 = sub_1C4DE85D0(*v43);
        if (v44)
          v46 = v45 == 0;
        else
          v46 = 1;
        if (!v46 && *(_DWORD *)(*(_QWORD *)(v44 - 32) + 36) == 197)
          goto LABEL_309;
        if (!byte_1ED833EC8)
        {
          v85 = v234;
          LODWORD(v275[0]) = 0;
          v86 = sub_1C4DE85D0(v44);
          if ((!v44 || (v86 & 1) == 0) && sub_1C4ECD910(v85, v44, (int *)v275) && LODWORD(v275[0]) == 321)
            goto LABEL_309;
          LODWORD(v275[0]) = 0;
          v87 = sub_1C4DE85D0(v44);
          if ((!v44 || (v87 & 1) == 0) && sub_1C4ECD910(v85, v44, (int *)v275) && LODWORD(v275[0]) == 168)
            goto LABEL_309;
        }
        v244 = 0;
        v243 = 0;
        v47 = (uint64_t)v239;
        if (!llvm::getValueProfDataFromInst(v44, 1, 0x16u, (uint64_t)v239, &v244, &v243, 0))
          goto LABEL_309;
        v48 = v243;
        v49 = v243;
        v50 = v243;
        if (byte_1ED816DE8)
        {
          BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount((uint64_t **)v231, *(const llvm::BasicBlock **)(v44 + 40), 0);
          if (!v52)
            goto LABEL_309;
          v50 = (unint64_t)BlockProfileCount;
          v49 = v243;
        }
        if (v50 >= dword_1ED816AE8 && v49)
        {
          v243 = v50;
          v296 = v298;
          v297 = 0x1000000000;
          v293 = v295;
          v295[0] = 0;
          v294 = 0x1000000001;
          v290 = v292;
          v291 = 0x1800000000;
          if (v244)
          {
            v228 = (llvm::Value *)v44;
            v213 = v43;
            v53 = 0;
            v54 = 0;
            v55 = __clz(v50);
            v56 = 16 * v244;
            v57 = -1;
            v58 = v50;
            v59 = v48;
            v60 = (__int128 *)(v47 + v56);
            v61 = &unk_1ED816000;
            v62 = (unsigned int *)&unk_1ED816000;
            v63 = (unsigned int *)&unk_1ED816000;
            v64 = (unsigned int *)&unk_1ED816000;
            v65 = &unk_1ED816000;
            while (1)
            {
              v66 = *(_QWORD *)(v47 + 8);
              v67 = v66;
              if (v61[3560])
              {
                v68 = __clz(v66) + v55;
                if (v68 < 0x40)
                {
                  if (v68 != 63 || (v70 = (v66 >> 1) * v50, (v70 & 0x8000000000000000) != 0))
                  {
                    v69 = -1;
                  }
                  else
                  {
                    v69 = 2 * v70;
                    if ((v66 & 1) != 0)
                    {
                      v71 = __CFADD__(v69, v50);
                      v69 += v50;
                      v72 = v71;
                      if (v69 < v50)
                        v72 = 1;
                      if (v72)
                        v69 = -1;
                    }
                  }
                }
                else
                {
                  v69 = v66 * v50;
                }
                v67 = v69 / v48;
              }
              v73 = *(_QWORD *)v47;
              v75 = (*(_QWORD *)v47 & (*(_QWORD *)v47 - 1)) == 0 && v73 != 0;
              if ((unint64_t)v73 < 9)
                v75 = 1;
              if (!v75 || v73 > v63[938])
              {
                v78 = v291;
                if (v291 >= (unint64_t)HIDWORD(v291))
                {
                  v207 = v58;
                  v222 = v60;
                  v224 = v55;
                  v80 = v54;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v290, (uint64_t)v292, v291 + 1, 16);
                  v60 = v222;
                  v55 = v224;
                  v58 = v207;
                  v54 = v80;
                  v65 = (_DWORD *)&unk_1ED816000;
                  v64 = (_DWORD *)&unk_1ED816000;
                  v63 = (_DWORD *)&unk_1ED816000;
                  v62 = (_DWORD *)&unk_1ED816000;
                  v61 = (_BYTE *)&unk_1ED816000;
                  v78 = v291;
                }
                v79 = (uint64_t *)((char *)v290 + 16 * v78);
                *v79 = v73;
                v79[1] = v66;
                LODWORD(v291) = v291 + 1;
                goto LABEL_134;
              }
              if (v67 < v62[698] || v67 < v58 * v64[794] / 0x64)
                break;
              if (v73 == v57)
                goto LABEL_162;
              v76 = v297;
              if (v297 >= (unint64_t)HIDWORD(v297))
              {
                v208 = v58;
                v225 = v55;
                v81 = v60;
                v82 = v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v296, (uint64_t)v298, v297 + 1, 8);
                v55 = v225;
                v60 = v81;
                v58 = v208;
                LODWORD(v54) = v82;
                v65 = (_DWORD *)&unk_1ED816000;
                v64 = (_DWORD *)&unk_1ED816000;
                v63 = (_DWORD *)&unk_1ED816000;
                v62 = (_DWORD *)&unk_1ED816000;
                v61 = (_BYTE *)&unk_1ED816000;
                v76 = v297;
              }
              *((_QWORD *)v296 + v76) = v73;
              LODWORD(v297) = v297 + 1;
              v77 = v294;
              if (v294 >= (unint64_t)HIDWORD(v294))
              {
                v209 = v58;
                v226 = v55;
                v83 = v60;
                v84 = v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v293, (uint64_t)v295, v294 + 1, 8);
                v55 = v226;
                v60 = v83;
                v58 = v209;
                LODWORD(v54) = v84;
                v65 = (_DWORD *)&unk_1ED816000;
                v64 = (_DWORD *)&unk_1ED816000;
                v63 = (_DWORD *)&unk_1ED816000;
                v62 = (_DWORD *)&unk_1ED816000;
                v61 = (_BYTE *)&unk_1ED816000;
                v77 = v294;
              }
              *((_QWORD *)v293 + v77) = v67;
              LODWORD(v294) = v294 + 1;
              if (v67 > v53)
                v53 = v67;
              v58 -= v67;
              v59 -= *(_QWORD *)(v47 + 8);
              v54 = (v54 + 1);
              if (v65[842] - 1 < v54)
              {
                v123 = (__int128 *)(v47 + 16);
                v124 = v58;
                v125 = v54;
                sub_1C61966D8((unsigned int *)&v290, (uint64_t)v290 + 16 * v291, v123, v60);
                v58 = v124;
                LODWORD(v54) = v125;
                goto LABEL_149;
              }
              v57 = v73;
LABEL_134:
              v47 += 16;
              v56 -= 16;
              if (!v56)
                goto LABEL_148;
            }
            v89 = v58;
            v90 = v54;
            sub_1C61966D8((unsigned int *)&v290, (uint64_t)v290 + 16 * v291, (__int128 *)v47, v60);
            v58 = v89;
            LODWORD(v54) = v90;
LABEL_148:
            if ((_DWORD)v54)
            {
LABEL_149:
              v211 = v54;
              *(_QWORD *)v293 = v58;
              v210 = v58;
              if (v58 <= v53)
                v91 = v53;
              else
                v91 = v58;
              v212 = v91;
              v205 = v243;
              v92 = (llvm *)*((_QWORD *)v228 + 5);
              v93 = (uint64_t *)v231;
              BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)v231, (uint64_t)v92);
              v95 = *(_QWORD *)v233;
              v277 = 257;
              v96 = (llvm *)sub_1C5EBD70C(v92, v228, 0, *(uint64_t *)v233, 0, 0, (llvm::Twine *)v275, 0);
              v97 = (uint64_t ***)v96;
              v98 = *((_QWORD *)v228 + 4);
              if (v98)
                v99 = (llvm::BasicBlock *)(v98 - 24);
              else
                v99 = 0;
              v277 = 257;
              v100 = (uint64_t ***)sub_1C5EBD70C(v96, v99, 0, v95, 0, 0, (llvm::Twine *)v275, 0);
              v275[0] = "MemOP.Merge";
              v277 = 259;
              llvm::Value::setName(v100, (uint64_t)v275);
              v227 = v100;
              sub_1C4DAD074(*v93, (uint64_t)v100, BlockFreq);
              v275[0] = "MemOP.Default";
              v277 = 259;
              v218 = (uint64_t)v97;
              llvm::Value::setName(v97, (uint64_t)v275);
              v275[0] = v276;
              v275[1] = (void *)0x1000000000;
              v278 = 0;
              v279 = 0;
              v280 = v95;
              v281 = 0;
              v282 = 0;
              v283 = v287;
              v284 = v287;
              v285 = 8;
              v286 = 0;
              memset(v288, 0, sizeof(v288));
              v289 = 0;
              v101 = v230;
              v221 = (_QWORD *)**v230;
              v102 = **(_QWORD **)v92;
              v259 = v261;
              v260 = 0x200000000;
              v264 = v102;
              v265 = &v273;
              v266 = &v274;
              v267 = 0;
              v268 = 0;
              v269 = 512;
              v270 = 7;
              v271 = 0;
              v272 = 0;
              v273 = &unk_1E8167888;
              v274 = &unk_1E8167A08;
              v262 = v92;
              v263 = (_QWORD **)((char *)v92 + 40);
              v217 = v92;
              v103 = (_QWORD **)*((_QWORD *)v92 + 5);
              v46 = v103 == (_QWORD **)((char *)v92 + 40);
              a3 = v214;
              if (v46)
              {
                v105 = 0;
              }
              else
              {
                if (v103)
                  v104 = (uint64_t ***)(v103 - 3);
                else
                  v104 = 0;
                if (*((unsigned __int8 *)v104 + 16) - 29 >= 0xB)
                  v105 = 0;
                else
                  v105 = v104;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v105[5] + 5), v105);
              v106 = v105[3];
              v107 = v105[4];
              *v107 = (uint64_t *)v106;
              v106[1] = (uint64_t *)v107;
              v105[3] = 0;
              v105[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v105);
              sub_1C4DE85D0((uint64_t)v228);
              v108 = (_QWORD ***)((_QWORD *)v228 - 4 * (*((_DWORD *)v228 + 5) & 0x7FFFFFF))[8];
              v109 = v297;
              v110 = (char *)operator new(0x48uLL);
              *((_DWORD *)v110 + 7) = *((_DWORD *)v110 + 7) & 0x38000000 | 0x40000000;
              *(_QWORD *)v110 = 0;
              *((_QWORD *)v110 + 1) = ***v108 + 1576;
              *((_QWORD *)v110 + 2) = 0;
              v110[24] = 31;
              v110[25] = 0;
              *((_WORD *)v110 + 13) = 0;
              *((_DWORD *)v110 + 7) = 0x40000000;
              *((_DWORD *)v110 + 16) = 0;
              *((_OWORD *)v110 + 2) = 0u;
              *((_OWORD *)v110 + 3) = 0u;
              llvm::SwitchInst::init((uint64_t)(v110 + 8), (uint64_t)v108, v218, 2 * v109 + 2);
              WORD4(v307) = 257;
              v111 = (llvm::Value *)(v110 + 8);
              (*((void (**)(void **, char *, void **, llvm *, _QWORD **))*v266 + 2))(v266, v110 + 8, &v304, v262, v263);
              if ((_DWORD)v260)
              {
                v112 = (char *)v259;
                v113 = (char *)v259 + 16 * v260;
                v114 = (unsigned __int8 **)(v110 + 56);
                do
                {
                  v115 = *(_DWORD *)v112;
                  v116 = (unsigned __int8 *)*((_QWORD *)v112 + 1);
                  if (v116)
                  {
                    if (!v115)
                    {
                      v299[0] = *((_QWORD *)v112 + 1);
                      llvm::MetadataTracking::track((uint64_t)v299, v116, 2);
                      v117 = *v114;
                      goto LABEL_176;
                    }
                  }
                  else
                  {
                    v117 = *v114;
                    if (!*v114 && (v110[31] & 0x20) == 0)
                      goto LABEL_173;
                    if (!v115)
                    {
                      v299[0] = 0;
LABEL_176:
                      if (v117)
                        llvm::MetadataTracking::untrack((uint64_t)(v110 + 56), v117);
                      v118 = (unsigned __int8 *)v299[0];
                      *v114 = (unsigned __int8 *)v299[0];
                      if (v118)
                        llvm::MetadataTracking::retrack((uint64_t)v299, v118, (uint64_t)(v110 + 56));
                      goto LABEL_173;
                    }
                  }
                  llvm::Value::setMetadata(v111, *(_DWORD *)v112, (llvm::MDNode *)v116);
LABEL_173:
                  v112 += 16;
                }
                while (v112 != v113);
              }
              v223 = *(_QWORD *)v228;
              if (*(_BYTE *)(*(_QWORD *)v228 + 8) == 7)
              {
                v215 = 0;
                v119 = (uint64_t)v228;
              }
              else
              {
                for (i = v227[6]; i != (uint64_t **)(v227 + 5); i = (uint64_t **)i[1])
                {
                  v121 = (uint64_t)(i - 3);
                  if (i)
                    v122 = i - 3;
                  else
                    v122 = 0;
                  if (*((_BYTE *)v122 + 16) != 83)
                    goto LABEL_191;
                }
                v121 = 0;
LABEL_191:
                sub_1C4773D54((uint64_t)&v304, v121, 0, 0, 0);
                v299[0] = "MemOP.RVMerge";
                v300 = 259;
                v126 = (llvm::Value *)sub_1C4867E94((uint64_t)&v304, v223, (int)v297 + 1, (uint64_t)v299);
                v119 = (uint64_t)v228;
                llvm::Value::doRAUW(v228, v126, (llvm::Value *)1);
                v215 = v126;
                sub_1C477667C(v126, (uint64_t)v228, v218);
                if (v304 != &v306)
                  free(v304);
              }
              v206 = (llvm::DebugLoc *)(v119 + 48);
              if (*(_QWORD *)(v119 + 48) || (*(_BYTE *)(v119 + 23) & 0x20) != 0)
                llvm::Value::setMetadata((llvm::Value *)v119, 2, 0);
              if (v59 || v211 != v244)
                llvm::annotateValueSite((uint64_t **)v101[5], (unsigned __int8 **)v119, (uint64_t *)v290, v291, v59, 1u, v244);
              __p = 0;
              v241 = 0;
              v242 = 0;
              if (v95)
                sub_1C501881C((uint64_t)&__p, 2 * v297);
              if ((_DWORD)v297)
              {
                v127 = (std::string::size_type *)v296;
                v216 = (unint64_t)v227 & 0xFFFFFFFFFFFFFFFBLL;
                v219 = (std::string::size_type *)((char *)v296 + 8 * v297);
                v220 = v227 + 1;
                while (1)
                {
                  v251.__r_.__value_.__r.__words[0] = 0;
                  v251.__r_.__value_.__r.__words[0] = *v127;
                  v304 = "MemOP.Case.";
                  v306 = &v251;
                  WORD4(v307) = 3075;
                  v128 = v230;
                  v129 = operator new();
                  *(_QWORD *)v129 = *v221 + 1600;
                  *(_QWORD *)(v129 + 8) = 0;
                  v130 = *(_DWORD *)(v129 + 20) & 0xC0000000;
                  *(_QWORD *)(v129 + 24) = 0;
                  v131 = v129 + 24;
                  *(_DWORD *)(v129 + 16) = 22;
                  *(_DWORD *)(v129 + 20) = v130;
                  *(_QWORD *)(v129 + 32) = 0;
                  *(_QWORD *)(v129 + 40) = v129 + 40;
                  *(_QWORD *)(v129 + 48) = v129 + 40;
                  *(_QWORD *)(v129 + 56) = 0;
                  if (v128)
                  {
                    v132 = (uint64_t)(v128 + 9);
                    if (v218)
                      v133 = (uint64_t *)(v218 + 24);
                    else
                      v133 = (uint64_t *)(v128 + 9);
                    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v132, (_QWORD *)v129);
                    v134 = *v133;
                    *(_QWORD *)(v129 + 24) = *v133;
                    *(_QWORD *)(v129 + 32) = v133;
                    *(_QWORD *)(v134 + 8) = v131;
                    *v133 = v131;
                  }
                  llvm::Value::setName((uint64_t ***)v129, (uint64_t)&v304);
                  sub_1C4DE85D0(v119);
                  llvm::Instruction::clone((llvm::Instruction *)v119);
                  v136 = v135;
                  sub_1C4DE85D0(v135);
                  v138 = **(_QWORD **)(v136 - 32 * (*(_DWORD *)(v136 + 20) & 0x7FFFFFF) + 64);
                  if (*(_BYTE *)(v138 + 8) != 13)
                    v138 = 0;
                  v139 = *(llvm::ConstantInt **)v138;
                  v140 = *(unsigned int *)(v138 + 8);
                  LODWORD(v305) = v140 >> 8;
                  if (v140 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v304, (uint64_t)v251.__r_.__value_.__l.__data_, 0);
                  }
                  else
                  {
                    if (v140 <= 0xFF)
                      v141 = 0;
                    else
                      v141 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v140);
                    v304 = (void *)(v141 & v251.__r_.__value_.__r.__words[0]);
                  }
                  v142 = llvm::ConstantInt::get(v139, (llvm::LLVMContext *)&v304, v137);
                  if (v305 >= 0x41 && v304)
                    MEMORY[0x1CAA32F9C](v304, 0x1000C8000313F17);
                  sub_1C4DE85D0(v136);
                  v143 = v136 - 32 * (*(_DWORD *)(v136 + 20) & 0x7FFFFFF);
                  v144 = (llvm::ValueHandleBase **)(v143 + 64);
                  if (*(_QWORD *)(v143 + 64))
                  {
                    **(_QWORD **)(v143 + 80) = *(_QWORD *)(v143 + 72);
                    v145 = *(_QWORD *)(v143 + 72);
                    if (v145)
                      *(_QWORD *)(v145 + 16) = *(_QWORD *)(v143 + 80);
                  }
                  *v144 = v142;
                  if (v142)
                  {
                    v146 = (llvm::ValueHandleBase ***)((char *)v142 + 8);
                    v147 = *((_QWORD *)v142 + 1);
                    *(_QWORD *)(v143 + 72) = v147;
                    if (v147)
                      *(_QWORD *)(v147 + 16) = v143 + 72;
                    *(_QWORD *)(v143 + 80) = v146;
                    *v146 = v144;
                  }
                  *(_QWORD *)(v136 + 40) = v129;
                  *(_WORD *)(v129 + 18) &= ~0x8000u;
                  if ((*(_BYTE *)(v136 + 23) & 0x10) != 0)
                  {
                    v181 = *(_QWORD *)(v129 + 56);
                    if (v181)
                    {
                      v182 = *(llvm::ValueSymbolTable **)(v181 + 104);
                      if (v182)
                        llvm::ValueSymbolTable::reinsertValue(v182, (llvm::Value *)v136);
                    }
                  }
                  v148 = *(_QWORD *)(v129 + 40);
                  *(_QWORD *)(v136 + 24) = v148;
                  *(_QWORD *)(v136 + 32) = v129 + 40;
                  *(_QWORD *)(v148 + 8) = v136 + 24;
                  *(_QWORD *)(v129 + 40) = v136 + 24;
                  v149 = **(_QWORD **)v129;
                  v304 = &v306;
                  v305 = 0x200000000;
                  v311 = v149;
                  v312 = &v320;
                  v313 = &v321;
                  v314 = 0;
                  v315 = 0;
                  v316 = 512;
                  v317 = 7;
                  v318 = 0;
                  v319 = 0;
                  v320 = &unk_1E8167888;
                  v321 = &unk_1E8167A08;
                  v309 = (const char *)v129;
                  v310 = v129 + 40;
                  v150 = (char *)operator new(0x60uLL);
                  v151 = v150;
                  *((_DWORD *)v150 + 13) = *((_DWORD *)v150 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v150 = 0;
                  *((_QWORD *)v150 + 2) = 0;
                  *((_QWORD *)v150 + 1) = 0;
                  *((_QWORD *)v150 + 4) = ***v227 + 1576;
                  v152 = (llvm::Value *)(v150 + 32);
                  *((_QWORD *)v150 + 3) = v150 + 32;
                  *((_QWORD *)v150 + 5) = 0;
                  v150[48] = 30;
                  v150[49] = 0;
                  *((_WORD *)v150 + 25) = 0;
                  *((_DWORD *)v150 + 13) = 1;
                  *(_OWORD *)(v150 + 56) = 0u;
                  *(_OWORD *)(v150 + 72) = 0u;
                  *((_DWORD *)v150 + 22) = 0;
                  *(_QWORD *)v150 = v227;
                  v153 = v227[1];
                  *((_QWORD *)v150 + 1) = v153;
                  if (v153)
                    v153[2] = (uint64_t *)(v150 + 8);
                  *((_QWORD *)v150 + 2) = v220;
                  *v220 = v150;
                  v300 = 257;
                  (*(void (**)(void *, llvm::Value *, _QWORD *, const char *, uint64_t))(*(_QWORD *)v313 + 16))(v313, v152, v299, v309, v310);
                  if ((_DWORD)v305)
                  {
                    v154 = (char *)v304;
                    v155 = (char *)v304 + 16 * v305;
                    v156 = (unsigned __int8 **)(v151 + 80);
                    do
                    {
                      v157 = *(_DWORD *)v154;
                      v158 = (unsigned __int8 *)*((_QWORD *)v154 + 1);
                      if (v158)
                      {
                        if (!v157)
                        {
                          __dst[0] = *((void **)v154 + 1);
                          llvm::MetadataTracking::track((uint64_t)__dst, v158, 2);
                          v159 = *v156;
                          if (!*v156)
                          {
LABEL_239:
                            v160 = (unsigned __int8 *)__dst[0];
                            *v156 = (unsigned __int8 *)__dst[0];
                            if (v160)
                              llvm::MetadataTracking::retrack((uint64_t)__dst, v160, (uint64_t)(v151 + 80));
                            goto LABEL_236;
                          }
LABEL_233:
                          llvm::MetadataTracking::untrack((uint64_t)(v151 + 80), v159);
                          goto LABEL_239;
                        }
                      }
                      else
                      {
                        v159 = *v156;
                        if (!*v156 && (v151[55] & 0x20) == 0)
                          goto LABEL_236;
                        if (!v157)
                        {
                          __dst[0] = 0;
                          if (!v159)
                            goto LABEL_239;
                          goto LABEL_233;
                        }
                      }
                      llvm::Value::setMetadata(v152, *(_DWORD *)v154, (llvm::MDNode *)v158);
LABEL_236:
                      v154 += 16;
                    }
                    while (v154 != v155);
                  }
                  llvm::SwitchInst::addCase(v111, v142, (llvm::BasicBlock *)v129);
                  if (*(_BYTE *)(v223 + 8) != 7)
                    sub_1C477667C(v215, v136, v129);
                  v119 = (uint64_t)v228;
                  if (*(_QWORD *)v233)
                    break;
LABEL_280:
                  if (v304 != &v306)
                    free(v304);
                  if (++v127 == v219)
                  {
                    v101 = v230;
                    a3 = v214;
                    goto LABEL_290;
                  }
                }
                v161 = v241;
                if (v241 >= v242)
                {
                  v163 = __p;
                  v164 = (v241 - (_BYTE *)__p) >> 4;
                  v165 = v164 + 1;
                  if ((unint64_t)(v164 + 1) >> 60)
                    goto LABEL_360;
                  v166 = v242 - (_BYTE *)__p;
                  if ((v242 - (_BYTE *)__p) >> 3 > v165)
                    v165 = v166 >> 3;
                  if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0)
                    v167 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v167 = v165;
                  if (v167)
                  {
                    if (v167 >> 60)
                      goto LABEL_361;
                    v168 = (char *)operator new(16 * v167);
                  }
                  else
                  {
                    v168 = 0;
                  }
                  v169 = (uint64_t *)&v168[16 * v164];
                  *v169 = v129;
                  v169[1] = v216;
                  v170 = v169;
                  if (v161 != v163)
                  {
                    do
                    {
                      *((_OWORD *)v170 - 1) = *((_OWORD *)v161 - 1);
                      v170 -= 2;
                      v161 -= 2;
                    }
                    while (v161 != v163);
                    v161 = __p;
                  }
                  v171 = &v168[16 * v167];
                  v162 = (char *)(v169 + 2);
                  __p = v170;
                  v241 = (char *)(v169 + 2);
                  v242 = v171;
                  if (v161)
                    operator delete(v161);
                }
                else
                {
                  *(_QWORD *)v241 = v129;
                  v161[1] = v216;
                  v162 = (char *)(v161 + 2);
                }
                v241 = v162;
                v172 = v129 & 0xFFFFFFFFFFFFFFFBLL;
                if (v162 >= v242)
                {
                  v174 = (char *)__p;
                  v175 = (v162 - (_BYTE *)__p) >> 4;
                  v176 = v175 + 1;
                  if ((unint64_t)(v175 + 1) >> 60)
                    goto LABEL_360;
                  v177 = v242 - (_BYTE *)__p;
                  if ((v242 - (_BYTE *)__p) >> 3 > v176)
                    v176 = v177 >> 3;
                  if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF0)
                    v178 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v178 = v176;
                  if (v178)
                  {
                    if (v178 >> 60)
                      goto LABEL_361;
                    v179 = (char *)operator new(16 * v178);
                  }
                  else
                  {
                    v179 = 0;
                  }
                  v180 = (llvm **)&v179[16 * v175];
                  *v180 = v217;
                  v180[1] = (llvm *)v172;
                  v173 = (char *)(v180 + 2);
                  if (v162 == v174)
                  {
                    __p = &v179[16 * v175];
                    v241 = (char *)(v180 + 2);
                    v242 = &v179[16 * v178];
                  }
                  else
                  {
                    do
                    {
                      *((_OWORD *)v180 - 1) = *((_OWORD *)v162 - 1);
                      v180 -= 2;
                      v162 -= 16;
                    }
                    while (v162 != v174);
                    v162 = (char *)__p;
                    __p = v180;
                    v241 = v173;
                    v242 = &v179[16 * v178];
                    if (!v162)
                      goto LABEL_279;
                  }
                  operator delete(v162);
                }
                else
                {
                  *(_QWORD *)v162 = v217;
                  *((_QWORD *)v162 + 1) = v172;
                  v173 = v162 + 16;
                }
LABEL_279:
                v241 = v173;
                goto LABEL_280;
              }
LABEL_290:
              llvm::DomTreeUpdater::applyUpdates((uint64_t)v275, (unint64_t *)__p, (v241 - (_BYTE *)__p) >> 4);
              v241 = (char *)__p;
              llvm::setProfMetadata((uint64_t **)v101[5], (uint64_t)v111, (uint64_t *)v293, v294, v212);
              v183 = v232;
              v184 = ****(_QWORD ****)v232;
              if (*(_QWORD *)(v184 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v184 + 72) + 48))(*(_QWORD *)(v184 + 72)))
              {
                v185 = *(std::string **)(*(_QWORD *)(v119 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)__dst, v206);
                v186 = *(_QWORD *)(v119 + 40);
                LODWORD(v305) = 9;
                BYTE4(v305) = 2;
                v307 = *(_OWORD *)__dst;
                v306 = v185;
                v308 = "pgo-memop-opt";
                v309 = "memopt-opt";
                v310 = 10;
                LOBYTE(v311) = 0;
                LOBYTE(v312) = 0;
                v313 = &v315;
                v314 = 0x400000000;
                v322 = 0;
                v323 = -1;
                v324 = v186;
                v304 = &off_1E814E500;
                __dst[0] = "optimized ";
                __dst[1] = (void *)10;
                sub_1C53B17B4((uint64_t)&v313, (const void **)__dst);
                v187 = v234;
                if (sub_1C4DE85D0(v119))
                {
                  v188 = *(_DWORD *)(*(_QWORD *)(v119 - 32) + 36) - 194;
                  v189 = "unknown";
                  v190 = v210;
                  v191 = v205;
                  if (v188 < 6)
                    v189 = off_1E817E260[v188];
                }
                else
                {
                  LODWORD(__dst[0]) = 0;
                  sub_1C4ECD910(v187, v119, (int *)__dst);
                  if (LODWORD(__dst[0]) == 321)
                    v189 = "memcmp";
                  else
                    v189 = "bcmp";
                  v190 = v210;
                  v191 = v205;
                }
                v192 = v191 - v190;
                v193 = strlen(v189);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Memop", 5uLL, v189, v193);
                v194 = sub_1C47E3888((uint64_t)&v304, (uint64_t)__dst);
                v251.__r_.__value_.__r.__words[0] = (std::string::size_type)" with count ";
                v251.__r_.__value_.__l.__size_ = 12;
                sub_1C53B17B4(v194 + 80, (const void **)&v251.__r_.__value_.__l.__data_);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v251, "Count", 5uLL, v192);
                v195 = sub_1C47E3888(v194, (uint64_t)&v251);
                v248.__r_.__value_.__r.__words[0] = (std::string::size_type)" out of ";
                v248.__r_.__value_.__l.__size_ = 8;
                sub_1C53B17B4(v195 + 80, (const void **)&v248.__r_.__value_.__l.__data_);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v248, "Total", 5uLL, v243);
                v196 = sub_1C47E3888(v195, (uint64_t)&v248);
                v245.__r_.__value_.__r.__words[0] = (std::string::size_type)" for ";
                v245.__r_.__value_.__l.__size_ = 5;
                sub_1C53B17B4(v196 + 80, (const void **)&v245.__r_.__value_.__l.__data_);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v245, "Versions", 8uLL, v211);
                v197 = sub_1C47E3888(v196, (uint64_t)&v245);
                v258[0] = " versions";
                v258[1] = (const void *)9;
                sub_1C53B17B4(v197 + 80, v258);
                sub_1C61998EC((uint64_t)v299, v197);
                v299[0] = &off_1E814E500;
                if (v247 < 0)
                  operator delete(v246);
                if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v245.__r_.__value_.__l.__data_);
                if (v250 < 0)
                  operator delete(v249);
                if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v248.__r_.__value_.__l.__data_);
                if (v253 < 0)
                  operator delete(v252);
                if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v251.__r_.__value_.__l.__data_);
                if (v257 < 0)
                  operator delete(v256);
                if (v255 < 0)
                  operator delete(__dst[0]);
                v304 = &off_1E814E790;
                v198 = (char *)v313;
                if ((_DWORD)v314)
                {
                  v199 = (unint64_t)v314 << 6;
                  do
                  {
                    v200 = (void **)&v198[v199];
                    if (v198[v199 - 17] < 0)
                      operator delete(*(v200 - 5));
                    if (*((char *)v200 - 41) < 0)
                      operator delete(*(v200 - 8));
                    v199 -= 64;
                  }
                  while (v199);
                  v198 = (char *)v313;
                }
                if (v198 != (char *)&v315)
                  free(v198);
                llvm::OptimizationRemarkEmitter::emit(v183, (llvm::DiagnosticInfoOptimizationBase *)v299);
                v299[0] = &off_1E814E790;
                v201 = (char *)v301;
                if (v302)
                {
                  v202 = (unint64_t)v302 << 6;
                  do
                  {
                    v203 = (void **)&v201[v202];
                    if (v201[v202 - 17] < 0)
                      operator delete(*(v203 - 5));
                    if (*((char *)v203 - 41) < 0)
                      operator delete(*(v203 - 8));
                    v202 -= 64;
                  }
                  while (v202);
                  v201 = (char *)v301;
                }
                if (v201 != (char *)&v303)
                  free(v201);
              }
              v43 = v213;
              if (__p)
              {
                v241 = (char *)__p;
                operator delete(__p);
              }
              if (v259 != v261)
                free(v259);
              llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v275);
              v304 = v288;
              sub_1C50B10F0((void ***)&v304);
              if (v284 != v283)
                free(v284);
              if (v275[0] != v276)
                free(v275[0]);
              v88 = 1;
            }
            else
            {
LABEL_162:
              v88 = 0;
              v43 = v213;
              a3 = v214;
            }
          }
          else
          {
            v88 = 0;
          }
          if (v290 != v292)
            free(v290);
          if (v293 != v295)
            free(v293);
          if (v296 != v298)
            free(v296);
          if (v88)
            v235 = 1;
        }
LABEL_309:
        ++v43;
      }
      while (v43 != v229);
    }
  }
  v204 = v235;
  if (v239)
    MEMORY[0x1CAA32F9C](v239, 0x1000C80451B5BE8);
  if (v236)
    operator delete(v236);
  if (!v204)
  {
LABEL_5:
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
    return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  }
}

void sub_1C58CCA58(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v15 = 0;
  if (sub_1C4ECD910(*(uint64_t **)(a1 + 32), a2, &v15)
    && (v15 == 321 || v15 == 168)
    && *(_BYTE *)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 16) != 16)
  {
    v5 = *(uint64_t **)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v5 >= v4)
    {
      v7 = *(_QWORD **)(a1 + 48);
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_1C4764EE4();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = (uint64_t *)&v12[8 * v8];
      *v13 = a2;
      v6 = v13 + 1;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *--v13 = v14;
        }
        while (v5 != v7);
        v5 = *(uint64_t **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 64) = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = a2;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 56) = v6;
  }
}

uint64_t sub_1C58CCB8C()
{
  int v1;
  __n128 v2;
  int v3;
  int *v4;
  int v5;

  v5 = 1;
  v3 = 1;
  v1 = 1000;
  v4 = &v1;
  v2.n128_u64[0] = (unint64_t)"The minimum count to optimize memory intrinsic calls";
  v2.n128_u64[1] = 52;
  sub_1C62B017C(&v5, &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED816A68, &dword_1C475E000);
  LOBYTE(v3) = 0;
  v4 = &v3;
  v5 = 1;
  v2.n128_u64[0] = (unint64_t)"Disable optimize";
  v2.n128_u64[1] = 16;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED816B28, "disable-memop-opt", (_BYTE **)&v4, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816B28, &dword_1C475E000);
  v5 = 40;
  v4 = &v5;
  v3 = 1;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The percentage threshold for the memory intrinsic calls optimization";
  v2.n128_u64[1] = 68;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED816BE8, "pgo-memop-percent-threshold", &v4, &v3, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED816BE8, &dword_1C475E000);
  v5 = 3;
  v4 = &v5;
  v3 = 1;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The max version for the optimized memory  intrinsic calls";
  v2.n128_u64[1] = 57;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED816CA8, "pgo-memop-max-version", &v4, &v3, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED816CA8, &dword_1C475E000);
  LOBYTE(v3) = 1;
  v4 = &v3;
  v5 = 1;
  v2.n128_u64[0] = (unint64_t)"Scale the memop size counts using the basic  block count value";
  v2.n128_u64[1] = 62;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED816D68, "pgo-memop-scale-count", (_BYTE **)&v4, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED816D68, &dword_1C475E000);
  LOBYTE(v3) = 1;
  v4 = &v3;
  v5 = 1;
  v2.n128_u64[0] = (unint64_t)"Size-specialize memcmp and bcmp calls";
  v2.n128_u64[1] = 37;
  sub_1C498EDF8((llvm::cl::Option *)&MemOPOptMemcmpBcmp, "pgo-memop-optimize-memcmp-bcmp", (_BYTE **)&v4, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &MemOPOptMemcmpBcmp, &dword_1C475E000);
  v5 = 1;
  v3 = 128;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Optimize the memop size <= this value";
  v2.n128_u64[1] = 37;
  sub_1C61798D0((uint64_t)&unk_1ED816E28, "memop-value-prof-max-opt-size", &v5, &v4, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED816E28, &dword_1C475E000);
}

uint64_t sub_1C58CCE24(uint64_t ***a1)
{
  uint64_t v1;
  uint64_t **v2;
  llvm::UndefValue *v3;
  uint64_t **v4;
  uint64_t *i;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  llvm::PHINode *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  llvm::Type *v13;
  _QWORD *v14;
  unint64_t v15;
  llvm::UndefValue *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  llvm::APInt *v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  int v34;
  llvm::ConstantInt *v35;
  const llvm::APInt *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t ***v43;
  llvm::ValueHandleBase *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  llvm::ValueHandleBase *v50;
  int v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ****v54;
  unsigned int v55;
  uint64_t ***v56;
  llvm::ValueHandleBase *v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned __int8 *v66;
  llvm::Type *v67;
  llvm::ConstantInt *v68;
  unsigned int PrimitiveSizeInBits;
  llvm::Value **v70;
  unsigned int *v71;
  __int16 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t *BinaryIntrinsic;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t **v92;
  int v93;
  uint64_t **v94;
  uint64_t v95;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  llvm::ConstantInt **v100;
  llvm::Value **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  llvm::APInt *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t **j;
  uint64_t **v113;
  uint64_t *k;
  uint64_t *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t *v118;
  _QWORD *v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  llvm::ValueHandleBase *v126;
  int v127;
  unsigned int v128;
  uint64_t **v131;
  uint64_t ***v132;
  uint64_t **v133;
  char *v134;
  char *v135;
  uint64_t v136;
  int v137;
  _BYTE v138[32];
  uint64_t v139[2];
  int v140;
  unsigned int v141[8];
  __int16 v142;
  _BYTE v143[32];
  __int16 v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148[2];
  uint64_t v149;
  uint64_t *v150;
  void *v151[2];
  uint64_t v152;
  uint64_t *v153;
  unsigned int v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v1 = ***a1;
  v139[0] = 0;
  v139[1] = 0;
  v140 = 0;
  v2 = a1[10];
  v132 = a1 + 9;
  if (v2 == (uint64_t **)(a1 + 9))
    return MEMORY[0x1CAA32FB4](v139[0], 8);
  v3 = (llvm::UndefValue *)(v1 + 1888);
  do
  {
    v4 = v2 - 3;
    if (!v2)
      v4 = 0;
    for (i = v4[6]; ; i = (uint64_t *)i[1])
    {
      v6 = i ? (uint64_t)(i - 3) : 0;
      if (*(_BYTE *)(v6 + 16) != 83)
        break;
      v7 = *((_DWORD *)i - 1) & 0x7FFFFFF;
      v156 = 257;
      v8 = operator new(0x48uLL);
      v8[1] = v3;
      v9 = (llvm::PHINode *)(v8 + 1);
      *v8 = 0;
      v8[2] = 0;
      v8[3] = 0x4000000000000053;
      *((_OWORD *)v8 + 2) = 0u;
      v10 = (char *)(v8 + 4);
      *((_OWORD *)v8 + 3) = 0u;
      *((_DWORD *)v8 + 16) = 0;
      *((_DWORD *)v8 + 17) = v7;
      llvm::Value::setName((uint64_t ***)v8 + 1, (uint64_t)&v153);
      v11 = *((unsigned int *)v8 + 17);
      v12 = operator new(40 * v11);
      *v8 = v12;
      if ((_DWORD)v11)
      {
        v14 = &v12[4 * v11];
        do
        {
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = v9;
          v12 += 4;
        }
        while (v12 != v14);
      }
      if ((*((_DWORD *)i - 1) & 0x7FFFFFF) != 0)
      {
        v15 = 0;
        do
        {
          v16 = llvm::UndefValue::get(v3, v13);
          v17 = *((_DWORD *)i - 1);
          if ((v17 & 0x40000000) != 0)
            v18 = *(i - 4);
          else
            v18 = (uint64_t)&i[-4 * (v17 & 0x7FFFFFF) - 3];
          sub_1C477667C(v9, (uint64_t)v16, *(_QWORD *)(v18 + 32 * *((unsigned int *)i + 9) + 8 * v15++));
        }
        while (v15 < (*((_DWORD *)i - 1) & 0x7FFFFFFu));
      }
      v19 = i[2];
      v8[6] = v19;
      *(_WORD *)(v19 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v8 + 31) & 0x10) != 0)
      {
        v21 = *(_QWORD *)(v19 + 56);
        if (v21)
        {
          v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
          if (v22)
            llvm::ValueSymbolTable::reinsertValue(v22, v9);
        }
      }
      v20 = *i;
      v8[4] = *i;
      v8[5] = i;
      *(_QWORD *)(v20 + 8) = v10;
      *i = (uint64_t)v10;
      v153 = i - 3;
      sub_1C4EAD954(v139, &v153)[1] = v9;
    }
    v2 = (uint64_t **)v2[1];
  }
  while (v2 != (uint64_t **)v132);
  v23 = a1[10];
  if (v23 == (uint64_t **)v132)
    return MEMORY[0x1CAA32FB4](v139[0], 8);
  v24 = &v147;
  do
  {
    v25 = v23 - 3;
    v131 = v23;
    if (!v23)
      v25 = 0;
    v26 = v25 + 5;
    v27 = v25[6];
    v133 = v25 + 5;
    if (v27 != (uint64_t *)(v25 + 5))
    {
      while (1)
      {
        v37 = v27 ? (uint64_t)(v27 - 3) : 0;
        if (*(_BYTE *)(v37 + 16) != 83)
          break;
LABEL_188:
        v27 = (uint64_t *)v27[1];
        if (v27 == (uint64_t *)v26)
          goto LABEL_189;
      }
      sub_1C4773D54((uint64_t)v148, v37, 0, 0, 0);
      v134 = v138;
      v135 = v138;
      v136 = 4;
      v137 = 0;
      llvm::getGuaranteedNonPoisonOps(v37, (llvm::SmallPtrSetImplBase *)&v134, 0);
      if (v135 == v134)
        v38 = (uint64_t *)((char *)&v136 + 4);
      else
        v38 = &v136;
      v39 = *(unsigned int *)v38;
      if ((_DWORD)v39)
      {
        v40 = 8 * v39;
        v41 = v135;
        while (*(_QWORD *)v41 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v41 += 8;
          v40 -= 8;
          if (!v40)
            goto LABEL_70;
        }
      }
      else
      {
        v41 = v135;
      }
      v42 = &v135[8 * v39];
      if (v41 != v42)
      {
        v43 = *(uint64_t ****)v41;
LABEL_66:
        v44 = sub_1C58CDC4C((uint64_t)v139, v43);
        sub_1C58CDB5C((uint64_t *)v148, (uint64_t)v44);
        v45 = (unint64_t *)(v41 + 8);
        while (v45 != (unint64_t *)v42)
        {
          v46 = *v45++;
          v43 = (uint64_t ***)v46;
          if (v46 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v41 = (char *)(v45 - 1);
            goto LABEL_66;
          }
        }
      }
LABEL_70:
      if (byte_1ED816F68)
      {
        v47 = *(unsigned __int8 *)(v37 + 16);
        v48 = v47 == 29 ? v37 : 0;
        if (v27)
        {
          if (v47 == 29)
          {
            v49 = *(_DWORD *)(v48 + 20) & 0x7FFFFFF;
            if ((_DWORD)v49)
            {
              v50 = sub_1C58CDC4C((uint64_t)v139, *(uint64_t ****)(v48 - 32 * v49));
              sub_1C58CDB5C((uint64_t *)v148, (uint64_t)v50);
            }
          }
        }
      }
      v145 = v24;
      v146 = 0x400000000;
      v51 = *(_DWORD *)(v37 + 20);
      if ((v51 & 0x40000000) != 0)
      {
        v53 = *(uint64_t *****)(v37 - 8);
        v52 = v51 & 0x7FFFFFF;
      }
      else
      {
        v52 = v51 & 0x7FFFFFF;
        v53 = (uint64_t ****)(v37 - 32 * v52);
      }
      v54 = &v53[4 * v52];
      if (v52)
      {
        do
        {
          if (v140)
          {
            v55 = ((*v53 >> 4) ^ (*v53 >> 9)) & (v140 - 1);
            v56 = *(uint64_t ****)(v139[0] + 16 * v55);
            if (*v53 == v56)
            {
LABEL_84:
              if (llvm::propagatesPoison((uint64_t)v53))
              {
                v57 = sub_1C58CDC4C((uint64_t)v139, *v53);
                v58 = v146;
                if (v146 >= (unint64_t)HIDWORD(v146))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v24, v146 + 1, 8);
                  v58 = v146;
                }
                *((_QWORD *)v145 + v58) = v57;
                LODWORD(v146) = v146 + 1;
              }
            }
            else
            {
              v59 = 1;
              while (v56 != (uint64_t ***)-4096)
              {
                v60 = v55 + v59++;
                v55 = v60 & (v140 - 1);
                v56 = *(uint64_t ****)(v139[0] + 16 * v55);
                if (*v53 == v56)
                  goto LABEL_84;
              }
            }
          }
          v53 += 4;
        }
        while (v53 != v54);
      }
      if ((sub_1C4F8B92C((llvm::Operator *)v37, 1, 1) & 1) == 0)
        goto LABEL_166;
      sub_1C4773D54((uint64_t)v151, v37, 0, 0, 0);
      v61 = *(unsigned __int8 *)(v37 + 16);
      if ((v61 - 41) <= 0x11 && (*(_DWORD *)(*(_QWORD *)v37 + 8) & 0xFE) != 0x12)
      {
        v62 = (uint64_t *)sub_1C4773D54((uint64_t)&v153, v37, 0, 0, 0);
        v63 = *(_DWORD *)(v37 + 20);
        if ((v63 & 0x40000000) != 0)
          v64 = *(_QWORD *)(v37 - 8);
        else
          v64 = v37 - 32 * (v63 & 0x7FFFFFF);
        v65 = *(uint64_t **)v64;
        v66 = *(unsigned __int8 **)(v64 + 32);
        switch(*(_BYTE *)(v37 + 16))
        {
          case ')':
            v84 = *(_BYTE *)(v37 + 17);
            if ((v84 & 4) != 0)
            {
              v144 = 257;
              BinaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v62, 263, v65, (uint64_t)v66, 0, (uint64_t)v143);
              v141[0] = 1;
              v144 = 257;
              v86 = sub_1C506DBC4((uint64_t)&v153, BinaryIntrinsic, v141, 1, (uint64_t)v143);
              v87 = v146;
              if (v146 >= (unint64_t)HIDWORD(v146))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v24, v146 + 1, 8);
                v87 = v146;
              }
              *((_QWORD *)v145 + v87) = v86;
              LODWORD(v146) = v146 + 1;
              v84 = *(_BYTE *)(v37 + 17);
            }
            if ((v84 & 2) != 0)
            {
              v144 = 257;
              v79 = 301;
              goto LABEL_128;
            }
            break;
          case '+':
            v75 = *(_BYTE *)(v37 + 17);
            if ((v75 & 4) != 0)
            {
              v144 = 257;
              v76 = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v62, 284, v65, (uint64_t)v66, 0, (uint64_t)v143);
              v141[0] = 1;
              v144 = 257;
              v77 = sub_1C506DBC4((uint64_t)&v153, v76, v141, 1, (uint64_t)v143);
              v78 = v146;
              if (v146 >= (unint64_t)HIDWORD(v146))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v24, v146 + 1, 8);
                v78 = v146;
              }
              *((_QWORD *)v145 + v78) = v77;
              LODWORD(v146) = v146 + 1;
              v75 = *(_BYTE *)(v37 + 17);
            }
            if ((v75 & 2) != 0)
            {
              v144 = 257;
              v79 = 312;
              goto LABEL_128;
            }
            break;
          case '-':
            v80 = *(_BYTE *)(v37 + 17);
            if ((v80 & 4) != 0)
            {
              v144 = 257;
              v81 = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v62, 278, v65, (uint64_t)v66, 0, (uint64_t)v143);
              v141[0] = 1;
              v144 = 257;
              v82 = sub_1C506DBC4((uint64_t)&v153, v81, v141, 1, (uint64_t)v143);
              v83 = v146;
              if (v146 >= (unint64_t)HIDWORD(v146))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v24, v146 + 1, 8);
                v83 = v146;
              }
              *((_QWORD *)v145 + v83) = v82;
              LODWORD(v146) = v146 + 1;
              v80 = *(_BYTE *)(v37 + 17);
            }
            if ((v80 & 2) != 0)
            {
              v144 = 257;
              v79 = 309;
LABEL_128:
              v88 = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic((uint64_t *)&v153, v79, v65, (uint64_t)v66, 0, (uint64_t)v143);
              v141[0] = 1;
              v144 = 257;
              v73 = sub_1C506DBC4((uint64_t)&v153, v88, v141, 1, (uint64_t)v143);
              goto LABEL_129;
            }
            break;
          case '/':
            if ((*(_BYTE *)(v37 + 17) & 2) != 0)
            {
              v144 = 257;
              v74 = sub_1C538EDCC(v62, v65, (uint64_t)v66, (uint64_t)v143);
              goto LABEL_109;
            }
            break;
          case '0':
            if ((*(_BYTE *)(v37 + 17) & 2) != 0)
            {
              v144 = 257;
              v74 = sub_1C622AECC(v62, v65, (uint64_t)v66, (uint64_t)v143);
LABEL_109:
              v66 = v74;
              v70 = llvm::ConstantInt::get((llvm::ConstantInt *)*v65, 0, 0);
              v142 = 257;
              v71 = v141;
              v72 = 33;
              goto LABEL_104;
            }
            break;
          case '5':
          case '6':
          case '7':
            v67 = (llvm::Type *)*v65;
            if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12)
              v67 = (llvm::Type *)**((_QWORD **)v67 + 2);
            v68 = *(llvm::ConstantInt **)v66;
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v67);
            v70 = llvm::ConstantInt::get(v68, PrimitiveSizeInBits, 0);
            v144 = 257;
            v71 = (unsigned int *)v143;
            v72 = 35;
LABEL_104:
            v73 = sub_1C4774B48((uint64_t)&v153, v72, (uint64_t)v66, (uint64_t)v70, (uint64_t)v71);
LABEL_129:
            v89 = v73;
            v90 = v146;
            if (v146 >= (unint64_t)HIDWORD(v146))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v24, v146 + 1, 8);
              v90 = v146;
            }
            *((_QWORD *)v145 + v90) = v89;
            LODWORD(v146) = v146 + 1;
            break;
          default:
            break;
        }
        if (v153 != &v155)
          free(v153);
        v61 = *(unsigned __int8 *)(v37 + 16);
      }
      if (v61 == 90)
      {
        v93 = *(_DWORD *)(v37 + 20);
        if ((v93 & 0x40000000) != 0)
          v94 = *(uint64_t ***)(v37 - 8);
        else
          v94 = (uint64_t **)(v37 - 32 * (v93 & 0x7FFFFFF));
        v95 = **v94;
        if (v95)
          v98 = *(_BYTE *)(v95 + 8) == 18;
        else
          v98 = 0;
        if (!v98)
        {
LABEL_164:
          if (v151[0] != &v152)
            free(v151[0]);
LABEL_166:
          v104 = v24;
          v105 = v146;
          if (!(_DWORD)v146)
            goto LABEL_180;
          v106 = 0;
          v107 = v145;
          v34 = v146 - 1;
          v33 = (char *)v145 + 8;
          while (1)
          {
            v32 = v107[v106];
            if (!v32 || *(_BYTE *)(v32 + 16) != 16)
              break;
            v109 = (llvm::APInt *)(v32 + 24);
            v110 = *(_DWORD *)(v32 + 32);
            if (v110 >= 0x41)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v109) != v110)
                break;
            }
            else if (*(_QWORD *)v109)
            {
              break;
            }
            ++v106;
            --v34;
            v33 += 8;
            if (v105 == v106)
              goto LABEL_180;
          }
          if ((_DWORD)v105 == (_DWORD)v106)
          {
LABEL_180:
            v111 = *v150;
            v32 = *(_QWORD *)(*v150 + 1568);
            v24 = v104;
            if (!v32)
            {
              v35 = *(llvm::ConstantInt **)(v111 + 1888);
              v154 = *(_DWORD *)(v111 + 1896) >> 8;
              if (v154 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v153, 0, 0);
              else
                v153 = 0;
              v32 = (uint64_t)llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v153, v36);
              if (v154 >= 0x41 && v153)
                MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
              *(_QWORD *)(v111 + 1568) = v32;
            }
            goto LABEL_181;
          }
          v24 = v104;
          if (v105 <= (int)v106 + 1)
          {
LABEL_181:
            v153 = (uint64_t *)v37;
            sub_1C4EAD954(v139, &v153)[1] = v32;
            if (v145 != v24)
              free(v145);
            if (v135 != v134)
              free(v135);
            if (v148[0] != &v149)
              free(v148[0]);
            v26 = v133;
            goto LABEL_188;
          }
          while (1)
          {
            v28 = *(_QWORD *)v33;
            if (*(_QWORD *)v33)
              v29 = *(_BYTE *)(*(_QWORD *)v33 + 16) == 16;
            else
              v29 = 0;
            if (!v29)
              goto LABEL_39;
            v30 = (llvm::APInt *)(v28 + 24);
            v31 = *(_DWORD *)(v28 + 32);
            if (v31 >= 0x41)
              break;
            if (*(_QWORD *)v30)
              goto LABEL_39;
LABEL_40:
            v33 += 8;
            if (!--v34)
              goto LABEL_181;
          }
          if (llvm::APInt::countLeadingZerosSlowCase(v30) == v31)
            goto LABEL_40;
LABEL_39:
          v156 = 257;
          v32 = sub_1C4773594((uint64_t)v148, (_QWORD *)v32, v28, (uint64_t)&v153);
          goto LABEL_40;
        }
        if ((v93 & 0x40000000) != 0)
          v99 = *(_QWORD *)(v37 - 8);
        else
          v99 = v37 - 32 * (v93 & 0x7FFFFFF);
        v100 = *(llvm::ConstantInt ***)(v99 + 64);
      }
      else
      {
        if (v61 != 89)
          goto LABEL_164;
        v91 = *(_DWORD *)(v37 + 20);
        v92 = (v91 & 0x40000000) != 0 ? *(uint64_t ***)(v37 - 8) : (uint64_t **)(v37 - 32 * (v91 & 0x7FFFFFF));
        v95 = **v92;
        if (!v95 || *(_BYTE *)(v95 + 8) != 18)
          goto LABEL_164;
        if ((v91 & 0x40000000) != 0)
          v97 = *(_QWORD *)(v37 - 8);
        else
          v97 = v37 - 32 * (v91 & 0x7FFFFFF);
        v100 = *(llvm::ConstantInt ***)(v97 + 32);
      }
      v101 = llvm::ConstantInt::get(*v100, *(unsigned int *)(v95 + 32), 0);
      v156 = 257;
      v102 = sub_1C4774B48((uint64_t)v151, 35, (uint64_t)v100, (uint64_t)v101, (uint64_t)&v153);
      v103 = v146;
      if (v146 >= (unint64_t)HIDWORD(v146))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v24, v146 + 1, 8);
        v103 = v146;
      }
      *((_QWORD *)v145 + v103) = v102;
      LODWORD(v146) = v146 + 1;
      goto LABEL_164;
    }
LABEL_189:
    v23 = (uint64_t **)v131[1];
  }
  while (v23 != (uint64_t **)v132);
  for (j = a1[10]; j != (uint64_t **)v132; j = (uint64_t **)j[1])
  {
    v113 = j - 3;
    if (!j)
      v113 = 0;
    for (k = v113[6]; ; k = (uint64_t *)k[1])
    {
      v115 = k - 3;
      v116 = k ? (uint64_t)(k - 3) : 0;
      if (*(_BYTE *)(v116 + 16) != 83)
        break;
      if (v140)
      {
        v117 = ((v115 >> 4) ^ (v115 >> 9)) & (v140 - 1);
        v118 = *(uint64_t **)(v139[0] + 16 * v117);
        if (v115 == v118)
        {
LABEL_201:
          v153 = k - 3;
          v119 = sub_1C4EAD954(v139, &v153);
          v120 = *((_DWORD *)k - 1);
          v121 = v120 & 0x7FFFFFF;
          if ((v120 & 0x7FFFFFF) != 0)
          {
            v122 = 0;
            v123 = 0;
            v124 = v119[1];
            do
            {
              if ((v120 & 0x40000000) != 0)
                v125 = (uint64_t *)*(k - 4);
              else
                v125 = &v115[-4 * v121];
              v126 = sub_1C58CDC4C((uint64_t)v139, (uint64_t ***)v125[v122]);
              sub_1C6125834(v124, v123++, (uint64_t)v126);
              v120 = *((_DWORD *)k - 1);
              v121 = v120 & 0x7FFFFFF;
              v122 += 4;
            }
            while (v123 < v121);
          }
        }
        else
        {
          v127 = 1;
          while (v118 != (uint64_t *)-4096)
          {
            v128 = v117 + v127++;
            v117 = v128 & (v140 - 1);
            v118 = *(uint64_t **)(v139[0] + 16 * v117);
            if (v115 == v118)
              goto LABEL_201;
          }
        }
      }
    }
  }
  return MEMORY[0x1CAA32FB4](v139[0], 8);
}

double llvm::PoisonCheckingPass::run@<D0>(uint64_t ***a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  sub_1C58CCE24(a1);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t sub_1C58CDB5C(uint64_t *a1, uint64_t a2)
{
  llvm::Constant *v3;
  uint64_t result;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _BYTE v9[32];
  __int16 v10;
  _BYTE v11[32];
  __int16 v12;
  llvm::Constant *v13;

  v10 = 257;
  v3 = (llvm::Constant *)sub_1C506EAA0((uint64_t)a1, a2, (uint64_t)v9);
  v13 = v3;
  if (!v3 || *((_BYTE *)v3 + 16) != 16 || (result = llvm::Constant::isAllOnesValue(v3), (result & 1) == 0))
  {
    v5 = *(uint64_t ***)(*(_QWORD *)(a1[6] + 56) + 40);
    sub_1C6212CB8((uint64_t)v5, "__poison_checker_assert", 0x17uLL, 0, (uint64_t **)(**v5 + 1576), **v5 + 1888);
    v6 = sub_1C4FB7E80(v5[14], "__poison_checker_assert", 0x17uLL);
    v7 = 0;
    v8 = 0;
    if (v6)
    {
      if (*(_BYTE *)(v6 + 16))
      {
        v7 = 0;
        v8 = 0;
      }
      else
      {
        v8 = *(uint64_t ***)(v6 + 24);
        v7 = v6;
      }
    }
    v12 = 257;
    return sub_1C4774778(a1, v8, v7, (uint64_t *)&v13, 1, (uint64_t)v11, 0);
  }
  return result;
}

llvm::ValueHandleBase *sub_1C58CDC4C(uint64_t a1, uint64_t ***a2)
{
  const llvm::APInt *v4;
  llvm::ValueHandleBase *result;
  uint64_t *v6;
  uint64_t v7;
  llvm::ConstantInt *v8;
  llvm::ConstantInt *v9;
  llvm::ValueHandleBase *v10;
  uint64_t ***v11;
  uint64_t v12;
  unsigned int v13;

  v11 = a2;
  v12 = 0;
  if (sub_1C4926528(a1, &v11, &v12) && v12 != *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(llvm::ValueHandleBase **)(v12 + 8);
  v6 = **a2;
  v7 = *v6;
  result = *(llvm::ValueHandleBase **)(*v6 + 1568);
  if (!result)
  {
    v8 = *(llvm::ConstantInt **)(v7 + 1888);
    v13 = *(_DWORD *)(v7 + 1896) >> 8;
    if (v13 > 0x40)
    {
      v9 = v8;
      llvm::APInt::initSlowCase((llvm::APInt *)&v12, 0, 0);
      v8 = v9;
    }
    else
    {
      v12 = 0;
    }
    result = llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v12, v4);
    if (v13 >= 0x41)
    {
      if (v12)
      {
        v10 = result;
        MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
        result = v10;
      }
    }
    *(_QWORD *)(v7 + 1568) = result;
  }
  return result;
}

uint64_t sub_1C58CDD3C()
{
  __int128 v1;
  char v2;
  char *v3;

  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Check that returns are non-poison (for testing)";
  *((_QWORD *)&v1 + 1) = 47;
  sub_1C62B0360(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED816EE8, &dword_1C475E000);
}

uint64_t sub_1C58CDD98(uint64_t result, int *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  char v12;
  int v13;
  int v14;
  char v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  int v22;
  unsigned int v23;
  char v24;
  char v25;
  char v26;
  char v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  char v32;
  char v33;
  int v34;
  int v35;
  int v36;
  char v37;
  char v38;

  *(_OWORD *)(result + 368) = 0u;
  *(_OWORD *)(result + 384) = 0u;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  *(_QWORD *)(result + 592) = 0;
  *(_OWORD *)(result + 560) = 0u;
  *(_OWORD *)(result + 576) = 0u;
  *(_OWORD *)(result + 528) = 0u;
  *(_OWORD *)(result + 544) = 0u;
  *(_QWORD *)(result + 648) = result + 664;
  *(_QWORD *)(result + 656) = 0x1400000000;
  *(_QWORD *)(result + 824) = result + 840;
  *(_QWORD *)(result + 832) = 0x1400000000;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 4);
  v6 = *((_BYTE *)a2 + 5);
  v7 = *((_BYTE *)a2 + 6);
  v8 = *((_BYTE *)a2 + 7);
  v9 = *((_BYTE *)a2 + 8);
  v10 = *((_BYTE *)a2 + 9);
  v11 = *((unsigned __int8 *)a2 + 10);
  v12 = *((_BYTE *)a2 + 11);
  v13 = *((unsigned __int8 *)a2 + 12);
  v14 = *((unsigned __int8 *)a2 + 13);
  v15 = *((_BYTE *)a2 + 14);
  v16 = *((_BYTE *)a2 + 15);
  v17 = *((unsigned __int8 *)a2 + 16);
  v18 = *((unsigned __int8 *)a2 + 17);
  v19 = *((unsigned __int8 *)a2 + 18);
  v20 = dword_1ED817028 - 1;
  v21 = *((_BYTE *)a2 + 19);
  if ((dword_1ED817028 - 1) > 3)
  {
    v22 = 0;
    LOBYTE(v23) = 0;
  }
  else
  {
    v22 = dword_1C8662CF0[v20];
    v23 = 0x1000000u >> (8 * v20);
  }
  if (v4 > v22)
    v22 = v4;
  v24 = v23 | v5;
  v25 = byte_1ED8174A8 | v7;
  v26 = byte_1ED817568 | v8;
  v27 = byte_1ED8177A8 | v9;
  v28 = byte_1ED8170E8 | v11;
  v29 = byte_1ED8171A8 | v12;
  v30 = byte_1ED817328 | v13;
  v31 = byte_1ED8173E8 | v14;
  v32 = byte_1ED817268 | v15;
  v33 = byte_1ED817868 ^ 1 | v16;
  v34 = byte_1ED817928 | v17;
  v35 = byte_1ED817628 | v18;
  v36 = byte_1ED8176E8 | v19;
  v37 = byte_1ED8179E8 | v21;
  *(_DWORD *)(result + 1000) = v22;
  if (v29 | v28 | v30 | v34 | v31 | v35 | v36)
    v38 = v29;
  else
    v38 = 1;
  *(_BYTE *)(result + 1004) = v24;
  *(_BYTE *)(result + 1005) = v6;
  *(_BYTE *)(result + 1006) = v25;
  *(_BYTE *)(result + 1007) = v26;
  *(_BYTE *)(result + 1008) = v27;
  *(_BYTE *)(result + 1009) = v10;
  *(_BYTE *)(result + 1010) = v28;
  *(_BYTE *)(result + 1011) = v38;
  *(_BYTE *)(result + 1012) = v30;
  *(_BYTE *)(result + 1013) = v31;
  *(_BYTE *)(result + 1014) = v32;
  *(_BYTE *)(result + 1015) = v33;
  *(_BYTE *)(result + 1016) = v34;
  *(_BYTE *)(result + 1017) = v35;
  *(_BYTE *)(result + 1018) = v36;
  *(_BYTE *)(result + 1019) = v37;
  *(_QWORD *)(result + 1024) = a3;
  *(_QWORD *)(result + 1032) = a4;
  return result;
}

uint64_t sub_1C58CDF84(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4, unsigned __int8 *p_p, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t **v15;
  uint64_t **v16;
  void **v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  llvm::PointerType *v22;
  char v23;
  unsigned __int8 *v24;
  size_t v25;
  char v26;
  unsigned __int8 *v27;
  size_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::UndefValue *inserted;
  llvm::Type *v56;
  llvm::UndefValue *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  llvm::Constant *AllOnesValue;
  llvm::UndefValue *v62;
  llvm::Type *v63;
  char v64;
  size_t v65;
  llvm::Type *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  llvm::UndefValue **v72;
  llvm::UndefValue *v73;
  uint64_t v74;
  llvm::Value **NullValue;
  llvm::GlobalValue *v76;
  int v77;
  llvm::GlobalValue *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ***v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t ****v89;
  uint64_t ***v90;
  int v91;
  int v92;
  uint64_t ***v93;
  uint64_t **v94;
  char *v95;
  uint64_t **v96;
  uint64_t v97;
  const llvm::Value *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t ****v104;
  uint64_t ***v105;
  int v106;
  int v107;
  uint64_t ***v108;
  uint64_t **v109;
  int v110;
  uint64_t v112;
  uint64_t ****v113;
  uint64_t ***v114;
  int v115;
  int v116;
  uint64_t ***v117;
  uint64_t **v118;
  uint64_t **v119;
  uint64_t **v120;
  int v121;
  BOOL v122;
  BOOL v123;
  uint64_t v125;
  uint64_t ****v126;
  uint64_t ***v127;
  int v128;
  int v129;
  uint64_t ***v130;
  uint64_t **v131;
  uint64_t **v132;
  uint64_t **v133;
  uint64_t v134;
  BOOL v135;
  BOOL v136;
  uint64_t **v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t *v141;
  llvm::Value **v142;
  unsigned int v143;
  uint64_t **v144;
  uint64_t **v145;
  uint64_t **v146;
  uint64_t v147;
  uint64_t **v148;
  uint64_t **v149;
  llvm::UndefValue *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v154;
  uint64_t v156;
  int v157;
  unsigned __int8 *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  llvm::BasicBlock *v178;
  uint64_t v179;
  BOOL v180;
  uint64_t UniqueSuccessor;
  BOOL v182;
  uint64_t *v183;
  uint64_t *i;
  uint64_t *v185;
  unsigned int v186;
  uint64_t v187;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  int v194;
  unsigned int v195;
  unsigned __int8 *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  BOOL v201;
  BOOL v202;
  uint64_t v203;
  unsigned int v204;
  BOOL v205;
  uint64_t v208;
  unsigned int v209;
  BOOL v210;
  BOOL v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t j;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v222;
  llvm::BasicBlock *v223;
  llvm::Function **v224;
  llvm::Type *v225;
  uint64_t v226;
  llvm::Function *v227;
  uint64_t v228;
  unsigned __int8 *v229;
  uint64_t v230;
  llvm::ConstantInt *v231;
  uint64_t v232;
  unsigned __int8 *v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  uint64_t v238;
  unsigned __int8 *v239;
  uint64_t v240;
  llvm::GlobalObject *v241;
  llvm::PoisonValue *v242;
  llvm::Value **v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t k;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v252;
  BOOL v253;
  int v254;
  uint64_t v255;
  unsigned __int8 **v256;
  unsigned __int8 *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  int v266;
  BOOL v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  unsigned int v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  int v280;
  BOOL v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  unsigned __int8 *v289;
  uint64_t v290;
  unsigned __int8 *v291;
  uint64_t **v292;
  uint64_t v293;
  uint64_t v294;
  unsigned __int8 *v295;
  uint64_t v296;
  unsigned __int8 *v297;
  llvm::Value **v298;
  llvm::Value *v299;
  char *v300;
  char *v301;
  llvm::Value ***v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  llvm::Value *v306;
  llvm::Value ****v307;
  llvm::Value *v308;
  uint64_t v309;
  uint64_t v310;
  unsigned __int8 **v311;
  int v312;
  unsigned __int8 *v313;
  unsigned __int8 *v314;
  unsigned __int8 *v315;
  uint64_t v316;
  uint64_t **v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  llvm::GetElementPtrInst *v321;
  uint64_t v322;
  uint64_t v323;
  char v324;
  char v325;
  char *v326;
  char *v327;
  uint64_t *v328;
  _QWORD *v329;
  uint64_t v330;
  llvm::Value *v331;
  llvm::Value **v332;
  uint64_t *v333;
  char *v334;
  char *v335;
  llvm::Value *v336;
  llvm::Value **v337;
  uint64_t v338;
  llvm::Value *v339;
  _QWORD *v340;
  llvm::Value *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned __int8 **v344;
  int v345;
  unsigned __int8 *v346;
  unsigned __int8 *v347;
  unsigned __int8 *v348;
  char v349;
  char v350;
  char *v351;
  char *v352;
  uint64_t *v353;
  llvm::Value *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t **v359;
  uint64_t *v360;
  llvm::GetElementPtrInst *v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  char v365;
  char *v366;
  char *v367;
  _QWORD *v368;
  uint64_t v369;
  llvm::Constant **v370;
  llvm::Type *v371;
  llvm::Value **v372;
  llvm::Value *v373;
  char *v374;
  llvm::Type *v375;
  const llvm::APInt *v376;
  uint64_t *True;
  char v378;
  char v379;
  char *v380;
  char *v381;
  uint64_t *v382;
  llvm::Value *v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t **v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t Declaration;
  llvm::Type *v392;
  uint64_t v393;
  uint64_t **v394;
  unsigned __int8 *v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  char v401;
  char *v402;
  char *v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  llvm::Value *v407;
  llvm::Value *v408;
  char *v409;
  uint64_t v410;
  char v411;
  char v412;
  char *v413;
  char *v414;
  _QWORD *v415;
  llvm::Value *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  unsigned __int8 *Impl;
  uint64_t v427;
  uint64_t v428;
  unsigned __int8 **v429;
  int v430;
  unsigned __int8 *v431;
  unsigned __int8 *v432;
  unsigned __int8 *v433;
  uint64_t v434;
  uint64_t v435;
  llvm::Type **v436;
  int v437;
  unsigned __int8 *v438;
  uint64_t v439;
  uint64_t v440;
  unsigned __int8 **v441;
  int v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  uint64_t ***v446;
  uint64_t v447;
  uint64_t v448;
  char v449;
  char v450;
  char *v451;
  char *v452;
  llvm::Constant **v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  llvm::Type *v457;
  llvm::Value **v458;
  llvm::MDNode *BranchWeights;
  char *v460;
  uint64_t **v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unsigned __int8 **v470;
  int v471;
  unsigned __int8 *v472;
  unsigned __int8 *v473;
  unsigned __int8 *v474;
  char *v475;
  char *v476;
  unsigned __int8 **v477;
  int v478;
  unsigned __int8 *v479;
  unsigned __int8 *v480;
  unsigned __int8 *v481;
  char *v482;
  char *v483;
  unsigned __int8 **v484;
  int v485;
  unsigned __int8 *v486;
  unsigned __int8 *v487;
  unsigned __int8 *v488;
  uint64_t v489;
  uint64_t v490;
  unsigned __int8 **v491;
  int v492;
  unsigned __int8 *v493;
  unsigned __int8 *v494;
  unsigned __int8 *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  unsigned __int8 *v503;
  uint64_t **v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unsigned __int8 *v511;
  const char *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  int v516;
  int v517;
  BOOL v519;
  unsigned __int8 *v520;
  unsigned __int8 *v521;
  BOOL v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t **v526;
  _QWORD *v527;
  int v528;
  _QWORD *v529;
  _DWORD *v530;
  _DWORD *v531;
  int v532;
  uint64_t *v533;
  uint64_t *v534;
  uint64_t v535;
  BOOL v536;
  unsigned int v537;
  unsigned __int8 **v538;
  uint64_t v539;
  unsigned int PrimitiveSizeInBits;
  uint64_t v541;
  llvm::Type *v542;
  void *v543;
  llvm::Value **v544;
  uint64_t v545;
  llvm::ConstantInt *v546;
  llvm::Type *v547;
  unsigned int v548;
  llvm::Value **v549;
  uint64_t v550;
  llvm::Type *v551;
  unsigned int v552;
  uint64_t v553;
  llvm::Type *v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  llvm::UndefValue *v559;
  llvm::Type *v560;
  unsigned int v561;
  uint64_t v562;
  llvm::Type *v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  unint64_t v567;
  uint64_t v568;
  llvm::PoisonValue *v569;
  llvm::PoisonValue *v570;
  char *v571;
  unsigned __int8 *v572;
  uint64_t v573;
  llvm::Value **v574;
  uint64_t **v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t *v581;
  const char *v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  int v586;
  unsigned int v587;
  _QWORD *v588;
  _QWORD *v589;
  uint64_t v590;
  uint64_t **v591;
  uint64_t v592;
  _DWORD *v593;
  _DWORD *v594;
  int v595;
  uint64_t *v596;
  uint64_t *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unsigned __int8 *v601;
  uint64_t **v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t *v609;
  unsigned __int8 *v610;
  const char *v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t **v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  unsigned __int8 *v623;
  const char *v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t **v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t ****v637;
  uint64_t ***v638;
  int v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t ****v645;
  uint64_t ***v646;
  int v647;
  int v648;
  uint64_t ***v649;
  unsigned __int8 *v650;
  size_t v651;
  size_t v652;
  int v653;
  uint64_t ***v654;
  unsigned __int8 *v655;
  size_t v656;
  size_t v657;
  int v658;
  char *v659;
  _DWORD *v660;
  int v661;
  llvm::UndefValue **v662;
  int v663;
  BOOL v664;
  unsigned int v665;
  unsigned __int8 *v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t **inited;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  llvm::UndefValue **v677;
  llvm::UndefValue *v678;
  uint64_t ***v679;
  unsigned int v680;
  llvm::Function **v681;
  uint64_t v682;
  llvm::Type *v683;
  unsigned int v684;
  uint64_t v685;
  uint64_t **v686;
  uint64_t ***v687;
  uint64_t ***v688;
  uint64_t v689;
  int v690[2];
  uint64_t v691;
  int v692;
  uint64_t ***v693;
  uint64_t v694;
  uint64_t **v695;
  uint64_t *v696;
  unsigned __int8 *v697;
  llvm::UndefValue *v698;
  uint64_t v699;
  unsigned __int8 *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unsigned __int8 *v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t *v709;
  uint64_t v710;
  unsigned __int8 *v711;
  unsigned __int8 *v712;
  unsigned __int8 *v713;
  void *v714;
  uint64_t v715;
  _QWORD v716[6];
  uint64_t *v717;
  void **v718;
  void **v719;
  uint64_t v720;
  int v721;
  __int16 v722;
  char v723;
  uint64_t v724;
  uint64_t v725;
  void *v726;
  void *v727;
  void *v728;
  uint64_t v729;
  _BYTE v730[64];
  void *v731;
  uint64_t v732;
  _BYTE v733[64];
  void *v734;
  uint64_t v735;
  _BYTE v736[64];
  void *v737;
  uint64_t v738;
  _BYTE v739[64];
  void *v740;
  uint64_t v741;
  _BYTE v742[64];
  void *v743;
  uint64_t v744;
  _BYTE v745[64];
  const void *v746[2];
  _QWORD v747[2];
  __int16 v748;
  void *v749;
  uint64_t v750;
  _BYTE v751[64];
  __int128 __p;
  _BYTE v753[24];
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unsigned __int8 *v760;
  unsigned __int8 *v761;
  void *v762;
  int8x16_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769[4];
  __int16 v770;
  llvm::Value **v771;
  llvm::Value **v772;
  __int16 v773;
  uint64_t v774;

  v774 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 1000))
    return 0;
  v15 = *(uint64_t ***)(a1 + 1024);
  if (!v15
    || ((v23 = *(_BYTE *)(a2 + 215), v23 >= 0)
      ? (v24 = (unsigned __int8 *)(a2 + 192))
      : (v24 = *(unsigned __int8 **)(a2 + 192)),
        v23 >= 0 ? (v25 = v23 & 0x7F) : (v25 = *(_QWORD *)(a2 + 200)),
        result = llvm::SpecialCaseList::inSectionBlame(v15, "coverage", 8uLL, "src", 3uLL, v24, v25, a8, 0, 0),
        (_DWORD)result))
  {
    v16 = *(uint64_t ***)(a1 + 1032);
    if (v16)
    {
      v26 = *(_BYTE *)(a2 + 215);
      v27 = v26 >= 0 ? (unsigned __int8 *)(a2 + 192) : *(unsigned __int8 **)(a2 + 192);
      v28 = v26 >= 0 ? v26 & 0x7F : *(_QWORD *)(a2 + 200);
      if (llvm::SpecialCaseList::inSectionBlame(v16, "coverage", 8uLL, "src", 3uLL, v27, v28, a8, 0, 0))return 0;
    }
    *(_QWORD *)(a1 + 600) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 608) = a2 + 272;
    *(_QWORD *)(a1 + 520) = a2;
    llvm::getUniqueModuleId((llvm *)a2, (uint64_t)&__p);
    v17 = (void **)(a1 + 528);
    if (*(char *)(a1 + 551) < 0)
      operator delete(*v17);
    *(_OWORD *)v17 = __p;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)v753;
    v748 = 260;
    v746[0] = (const void *)(a2 + 216);
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v746);
    v18 = (void **)(a1 + 552);
    if (*(char *)(a1 + 575) < 0)
      operator delete(*v18);
    *(_OWORD *)v18 = __p;
    v19 = v754;
    *(_QWORD *)(a1 + 568) = *(_QWORD *)v753;
    *(_OWORD *)(a1 + 576) = *(_OWORD *)&v753[8];
    *(_QWORD *)(a1 + 592) = v19;
    *(_OWORD *)(a1 + 616) = 0u;
    *(_OWORD *)(a1 + 632) = 0u;
    v20 = *(_QWORD **)(a1 + 600);
    v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 232) + 4);
    LODWORD(__p) = v21;
    v703 = a4;
    if (v21 <= 63)
    {
      if (v21 <= 31)
      {
        switch(v21)
        {
          case 16:
            v22 = (llvm::PointerType *)(*v20 + 1936);
            goto LABEL_34;
          case 8:
            v22 = (llvm::PointerType *)(*v20 + 1912);
            goto LABEL_34;
          case 1:
            v22 = (llvm::PointerType *)(*v20 + 1888);
            goto LABEL_34;
        }
      }
      else if (v21 == 32)
      {
        v22 = (llvm::PointerType *)(*v20 + 1960);
        goto LABEL_34;
      }
    }
    else
    {
      if (v21 == 64)
      {
        v22 = (llvm::PointerType *)(*v20 + 1984);
        goto LABEL_34;
      }
      if (v21 == 128)
      {
        v22 = (llvm::PointerType *)(*v20 + 2008);
        goto LABEL_34;
      }
    }
    v660 = sub_1C5270984(*v20 + 2168, &__p);
    v22 = (llvm::PointerType *)*((_QWORD *)v660 + 1);
    if (!v22)
    {
      v22 = (llvm::PointerType *)sub_1C484358C(*v20 + 2040, 24, 3);
      v661 = __p;
      *(_QWORD *)v22 = v20;
      *((_QWORD *)v22 + 2) = 0;
      *((_QWORD *)v22 + 1) = (v661 << 8) | 0xDu;
      *((_QWORD *)v660 + 1) = v22;
    }
LABEL_34:
    *(_QWORD *)(a1 + 424) = v22;
    *(_QWORD *)(a1 + 432) = llvm::PointerType::get(v22, 0);
    v29 = *(uint64_t **)(a1 + 600);
    v30 = *v29 + 1576;
    v714 = v716;
    v715 = 0x200000000;
    v717 = v29;
    v718 = &v726;
    v719 = &v727;
    v720 = 0;
    v721 = 0;
    v722 = 512;
    v723 = 7;
    v716[4] = 0;
    v716[5] = 0;
    v724 = 0;
    v725 = 0;
    v726 = &unk_1E8167888;
    v727 = &unk_1E8167A08;
    *(_QWORD *)(a1 + 416) = llvm::PointerType::get((llvm::PointerType *)(*v29 + 2008), 0);
    *(_QWORD *)(a1 + 448) = llvm::PointerType::get((llvm::PointerType *)(*v717 + 1984), 0);
    *(_QWORD *)(a1 + 472) = llvm::PointerType::get((llvm::PointerType *)(*v717 + 1936), 0);
    *(_QWORD *)(a1 + 464) = llvm::PointerType::get((llvm::PointerType *)(*v717 + 1960), 0);
    *(_QWORD *)(a1 + 496) = llvm::PointerType::get((llvm::PointerType *)(*v717 + 1912), 0);
    *(_QWORD *)(a1 + 512) = llvm::PointerType::get((llvm::PointerType *)(*v717 + 1888), 0);
    v31 = *v717;
    *(_QWORD *)(a1 + 440) = *v717 + 1984;
    *(_QWORD *)(a1 + 456) = v31 + 1960;
    *(_QWORD *)(a1 + 480) = v31 + 1936;
    *(_QWORD *)(a1 + 488) = v31 + 1912;
    *(_QWORD *)(a1 + 504) = v31 + 1888;
    *(_QWORD *)a1 = sub_1C6212CB8(a2, "__sanitizer_cov_trace_pc_indir", 0x1EuLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 424));
    *(_QWORD *)(a1 + 8) = v32;
    v710 = 0;
    v710 = llvm::AttributeList::addAttributeAtIndex(&v710, *(uint64_t **)(a1 + 600), 1, 67);
    v710 = llvm::AttributeList::addAttributeAtIndex(&v710, *(uint64_t **)(a1 + 600), 2, 67);
    *(_QWORD *)(a1 + 48) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_cmp1", 0x1AuLL, v710, (uint64_t **)v30, *v717 + 1912, *v717 + 1912);
    *(_QWORD *)(a1 + 56) = v33;
    *(_QWORD *)(a1 + 64) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_cmp2", 0x1AuLL, v710, (uint64_t **)v30, *v717 + 1936, *v717 + 1936);
    *(_QWORD *)(a1 + 72) = v34;
    *(_QWORD *)(a1 + 80) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_cmp4", 0x1AuLL, v710, (uint64_t **)v30, *v717 + 1960, *v717 + 1960);
    *(_QWORD *)(a1 + 88) = v35;
    *(_QWORD *)(a1 + 96) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_cmp8", 0x1AuLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 440));
    *(_QWORD *)(a1 + 104) = v36;
    *(_QWORD *)(a1 + 112) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_const_cmp1", 0x20uLL, v710, (uint64_t **)v30, *(_QWORD *)(a1 + 488), *(_QWORD *)(a1 + 488));
    *(_QWORD *)(a1 + 120) = v37;
    *(_QWORD *)(a1 + 128) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_const_cmp2", 0x20uLL, v710, (uint64_t **)v30, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 480));
    *(_QWORD *)(a1 + 136) = v38;
    *(_QWORD *)(a1 + 144) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_const_cmp4", 0x20uLL, v710, (uint64_t **)v30, *(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 456));
    *(_QWORD *)(a1 + 152) = v39;
    *(_QWORD *)(a1 + 160) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_const_cmp8", 0x20uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 440));
    *(_QWORD *)(a1 + 168) = v40;
    *(_QWORD *)(a1 + 176) = sub_1C6212CB8(a2, "__sanitizer_cov_load1", 0x15uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 496));
    *(_QWORD *)(a1 + 184) = v41;
    *(_QWORD *)(a1 + 192) = sub_1C6212CB8(a2, "__sanitizer_cov_load2", 0x15uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 472));
    *(_QWORD *)(a1 + 200) = v42;
    *(_QWORD *)(a1 + 208) = sub_1C6212CB8(a2, "__sanitizer_cov_load4", 0x15uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 464));
    *(_QWORD *)(a1 + 216) = v43;
    *(_QWORD *)(a1 + 224) = sub_1C6212CB8(a2, "__sanitizer_cov_load8", 0x15uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 448));
    *(_QWORD *)(a1 + 232) = v44;
    *(_QWORD *)(a1 + 240) = sub_1C6212CB8(a2, "__sanitizer_cov_load16", 0x16uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 416));
    *(_QWORD *)(a1 + 248) = v45;
    *(_QWORD *)(a1 + 256) = sub_1C6212CB8(a2, "__sanitizer_cov_store1", 0x16uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 496));
    *(_QWORD *)(a1 + 264) = v46;
    *(_QWORD *)(a1 + 272) = sub_1C6212CB8(a2, "__sanitizer_cov_store2", 0x16uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 472));
    *(_QWORD *)(a1 + 280) = v47;
    *(_QWORD *)(a1 + 288) = sub_1C6212CB8(a2, "__sanitizer_cov_store4", 0x16uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 464));
    *(_QWORD *)(a1 + 296) = v48;
    *(_QWORD *)(a1 + 304) = sub_1C6212CB8(a2, "__sanitizer_cov_store8", 0x16uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 448));
    *(_QWORD *)(a1 + 312) = v49;
    *(_QWORD *)(a1 + 320) = sub_1C6212CB8(a2, "__sanitizer_cov_store16", 0x17uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 416));
    *(_QWORD *)(a1 + 328) = v50;
    *(_QWORD *)&__p = 0;
    *(_QWORD *)&__p = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&__p, *(uint64_t **)(a1 + 600), 1, 67);
    *(_QWORD *)(a1 + 336) = sub_1C6212CB8(a2, "__sanitizer_cov_trace_div4", 0x1AuLL, __p, (uint64_t **)v30, *v717 + 1960);
    *(_QWORD *)(a1 + 344) = v51;
    *(_QWORD *)(a1 + 352) = sub_1C6212CB8(a2, "__sanitizer_cov_trace_div8", 0x1AuLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 440));
    *(_QWORD *)(a1 + 360) = v52;
    *(_QWORD *)(a1 + 368) = sub_1C6212CB8(a2, "__sanitizer_cov_trace_gep", 0x19uLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 424));
    *(_QWORD *)(a1 + 376) = v53;
    *(_QWORD *)(a1 + 384) = sub_1C6291FE0(a2, "__sanitizer_cov_trace_switch", 0x1CuLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 448));
    *(_QWORD *)(a1 + 392) = v54;
    inserted = llvm::Module::getOrInsertGlobal(a2, "__sancov_lowest_stack", 0x15uLL, *(llvm::PointerType **)(a1 + 424));
    if (*((_BYTE *)inserted + 16) == 3)
      v57 = inserted;
    else
      v57 = 0;
    *(_QWORD *)(a1 + 400) = v57;
    if (!v57 || *((_QWORD *)v57 + 3) != *(_QWORD *)(a1 + 424))
    {
      v58 = *(_QWORD *)(a1 + 600);
      LOWORD(v765) = 773;
      v762 = "'";
      v763.i64[0] = 1;
      v763.i64[1] = (uint64_t)"__sancov_lowest_stack";
      v59 = "' should not be declared by the user";
LABEL_52:
      v746[0] = &v762;
      v747[0] = v59;
      v748 = 770;
      DWORD2(__p) = 0;
      BYTE12(__p) = 0;
      *(_QWORD *)&__p = &off_1E814E960;
      *(_QWORD *)v753 = 0;
      *(_QWORD *)&v753[8] = v746;
      *(_QWORD *)&v753[16] = 0;
      llvm::LLVMContext::diagnose(v58, (const llvm::DiagnosticInfo *)&__p);
LABEL_53:
      if (v714 != v716)
        free(v714);
      return 1;
    }
    *((_DWORD *)v57 + 8) = *((_DWORD *)v57 + 8) & 0xFFFFE3FF | 0xC00;
    if (*(_BYTE *)(a1 + 1016))
    {
      v60 = *(_QWORD *)(a1 + 400);
      if (v60 && *(_BYTE *)(v60 + 16) == 3)
      {
        if ((*(_DWORD *)(v60 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_49;
LABEL_48:
        AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + 424), v56);
        llvm::GlobalVariable::setInitializer(v60, AllOnesValue);
        goto LABEL_49;
      }
      if (*(_BYTE *)(v60 + 16) || *(_QWORD *)(v60 + 72) != v60 + 72 || (*(_BYTE *)(v60 + 34) & 0x80) != 0)
        goto LABEL_48;
    }
LABEL_49:
    v704 = p_p;
    v705 = a6;
    if (!*(_BYTE *)(a1 + 1019))
      goto LABEL_85;
    if (!*(_BYTE *)(a1 + 1011))
    {
      v58 = *(_QWORD *)(a1 + 600);
      v762 = "'";
      v763.i64[0] = 1;
      v763.i64[1] = qword_1ED817978;
      v764 = unk_1ED817980;
      LOWORD(v765) = 1285;
      v59 = "' is only supported with trace-pc-guard";
      goto LABEL_52;
    }
    v62 = llvm::Module::getOrInsertGlobal(a2, "__sancov_should_track", 0x15uLL, *(llvm::PointerType **)(a1 + 440));
    *(_QWORD *)(a1 + 408) = v62;
    HIBYTE(v747[0]) = 11;
    strcpy((char *)v746, "sancov_gate");
    sub_1C58D2958((uint64_t)&__p, *(_DWORD *)(a1 + 596), v746);
    v64 = v753[7];
    if (v753[7] >= 0)
      p_p = (unsigned __int8 *)&__p;
    else
      p_p = (unsigned __int8 *)__p;
    if (v753[7] >= 0)
      v65 = v753[7] & 0x7F;
    else
      v65 = *((_QWORD *)&__p + 1);
    if ((*((_BYTE *)v62 + 34) & 0x40) == 0 && !v65)
    {
LABEL_73:
      p_p = v704;
      a6 = v705;
      if (v64 < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v747[0]) < 0)
        operator delete((void *)v746[0]);
      v74 = *(_QWORD *)(a1 + 408);
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 440), v63);
      llvm::GlobalVariable::setInitializer(v74, (llvm::Constant *)NullValue);
      v76 = *(llvm::GlobalValue **)(a1 + 408);
      v77 = *((_DWORD *)v76 + 8);
      *((_DWORD *)v76 + 8) = v77 & 0xFFFFFFF0 | 2;
      if ((v77 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v76) & 1) == 0)
        *((_DWORD *)v76 + 8) |= 0x4000u;
      v78 = *(llvm::GlobalValue **)(a1 + 408);
      v79 = *((_DWORD *)v78 + 8);
      v80 = v79 & 0xFFFFFFCF | 0x10;
      *((_DWORD *)v78 + 8) = v80;
      if ((v79 & 0xFu) - 7 >= 2)
      {
        if ((llvm::GlobalValue::hasExternalWeakLinkage(v78) & 1) != 0)
        {
LABEL_84:
          *(_QWORD *)&__p = *(_QWORD *)(a1 + 408);
          sub_1C5F50CB4((uint64_t **)a2, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)&__p, 1);
LABEL_85:
          *(_QWORD *)(a1 + 16) = sub_1C6210688(a2, "__sanitizer_cov_trace_pc", 0x18uLL, 0, (uint64_t **)v30);
          *(_QWORD *)(a1 + 24) = v81;
          *(_QWORD *)(a1 + 32) = sub_1C6212CB8(a2, "__sanitizer_cov_trace_pc_guard", 0x1EuLL, 0, (uint64_t **)v30, *(_QWORD *)(a1 + 464));
          *(_QWORD *)(a1 + 40) = v82;
          v83 = *(_QWORD *)(a2 + 32);
          if (v83 == a2 + 24)
          {
LABEL_940:
            if (*(_QWORD *)(a1 + 616))
              v659 = sub_1C58D2AEC(a1, (uint64_t *)a2, "sancov.module_ctor_trace_pc_guard", "__sanitizer_cov_trace_pc_guard_init", *(llvm::PointerType **)(a1 + 456), "sancov_guards");
            else
              v659 = 0;
            if (*(_QWORD *)(a1 + 624))
              v659 = sub_1C58D2AEC(a1, (uint64_t *)a2, "sancov.module_ctor_8bit_counters", "__sanitizer_cov_8bit_counters_init", *(llvm::PointerType **)(a1 + 488), "sancov_cntrs");
            if (*(_QWORD *)(a1 + 632))
              v659 = sub_1C58D2AEC(a1, (uint64_t *)a2, "sancov.module_ctor_BOOL_flag", "__sanitizer_cov_BOOL_flag_init", *(llvm::PointerType **)(a1 + 504), "sancov_BOOLs");
            if (v659 && *(_BYTE *)(a1 + 1014))
            {
              v666 = sub_1C58D2CA8(a1, (uint64_t *)a2, "sancov_pcs", *(llvm::PointerType **)(a1 + 424));
              v668 = v667;
              *(_QWORD *)&__p = *(_QWORD *)(a1 + 432);
              *((_QWORD *)&__p + 1) = __p;
              inited = (uint64_t **)llvm::declareSanitizerInitFunction(a2, "__sanitizer_cov_pcs_init", 0x18uLL, (uint64_t *)&__p, 2);
              v671 = v670;
              v672 = *((_QWORD *)v659 + 10);
              v673 = v672 - 24;
              if (!v672)
                v673 = 0;
              v674 = *(_QWORD *)(v673 + 40);
              if (v674 == v673 + 40)
              {
                v676 = 0;
              }
              else
              {
                if (v674)
                  v675 = v674 - 24;
                else
                  v675 = 0;
                if (*(unsigned __int8 *)(v675 + 16) - 29 >= 0xB)
                  v676 = 0;
                else
                  v676 = v675;
              }
              sub_1C4773D54((uint64_t)&__p, v676, 0, 0, 0);
              v762 = v666;
              v763.i64[0] = v668;
              v748 = 257;
              sub_1C4774778((uint64_t *)&__p, inited, v671, (uint64_t *)&v762, 2, (uint64_t)v746, 0);
              if ((_BYTE *)__p != v753)
                free((void *)__p);
            }
            sub_1C5F50CB4((uint64_t **)a2, "llvm.used", 9uLL, *(llvm::UndefValue ***)(a1 + 648), *(unsigned int *)(a1 + 656));
            sub_1C5F50CB4((uint64_t **)a2, "llvm.compiler.used", 0x12uLL, *(llvm::UndefValue ***)(a1 + 824), *(unsigned int *)(a1 + 832));
            goto LABEL_53;
          }
          while (1)
          {
            if (v83)
              v84 = (uint64_t ***)(v83 - 56);
            else
              v84 = 0;
            v695 = (uint64_t **)(v84 + 9);
            if (v84[9] == (uint64_t **)(v84 + 9))
              goto LABEL_100;
            v30 = *((unsigned int *)v84 + 5);
            v62 = (llvm::UndefValue *)(v84 >> 4);
            v694 = v83;
            if ((v30 & 0x10000000) != 0)
              break;
            v94 = 0;
            v95 = &byte_1C871356D;
LABEL_99:
            *(_QWORD *)&__p = v95;
            *((_QWORD *)&__p + 1) = v94;
            v97 = llvm::StringRef::find((uint64_t *)&__p, ".module_ctor", 0xCuLL, 0);
            v83 = v694;
            if (v97 != -1)
              goto LABEL_100;
            if ((v30 & 0x10000000) != 0)
            {
              v100 = ***v84;
              v101 = *(_QWORD *)(v100 + 152);
              v102 = *(unsigned int *)(v100 + 168);
              if (!(_DWORD)v102)
                goto LABEL_109;
              LODWORD(v103) = (v102 - 1) & (v62 ^ (v84 >> 9));
              v104 = (uint64_t ****)(v101 + 16 * v103);
              v105 = *v104;
              if (*v104 != v84)
              {
                v106 = 1;
                while (v105 != (uint64_t ***)-4096)
                {
                  v107 = v103 + v106++;
                  v103 = v107 & (v102 - 1);
                  v105 = *(uint64_t ****)(v101 + 16 * v103);
                  if (v105 == v84)
                  {
                    v104 = (uint64_t ****)(v101 + 16 * v103);
                    goto LABEL_110;
                  }
                }
LABEL_109:
                v104 = (uint64_t ****)(v101 + 16 * v102);
              }
LABEL_110:
              v108 = v104[1];
              if ((unint64_t)*v108 >= 0xC)
              {
                v109 = v108[2];
                v110 = *((_DWORD *)v108 + 6);
                if (v109 == (uint64_t **)0x6974696E61735F5FLL && v110 == 1601332602)
                  goto LABEL_100;
              }
              if (((_DWORD)v84[4] & 0xF) == 1)
                goto LABEL_100;
              if ((_DWORD)v102)
              {
                LODWORD(v112) = (v102 - 1) & (v62 ^ (v84 >> 9));
                v113 = (uint64_t ****)(v101 + 16 * v112);
                v114 = *v113;
                if (*v113 != v84)
                {
                  v115 = 1;
                  while (v114 != (uint64_t ***)-4096)
                  {
                    v116 = v112 + v115++;
                    v112 = v116 & (v102 - 1);
                    v114 = *(uint64_t ****)(v101 + 16 * v112);
                    if (v114 == v84)
                    {
                      v113 = (uint64_t ****)(v101 + 16 * v112);
                      goto LABEL_124;
                    }
                  }
                  goto LABEL_123;
                }
              }
              else
              {
LABEL_123:
                v113 = (uint64_t ****)(v101 + 16 * v102);
              }
LABEL_124:
              v117 = v113[1];
              if (*v117 == (uint64_t **)28)
              {
                v118 = v117[2];
                v119 = v117[3];
                v120 = v117[4];
                v121 = *((_DWORD *)v117 + 10);
                v122 = v118 == (uint64_t **)0x5F6C61636F6C5F5FLL && v119 == (uint64_t **)0x72705F6F69647473;
                v123 = v122 && v120 == (uint64_t **)0x74706F5F66746E69;
                if (v123 && v121 == 1936617321)
                  goto LABEL_100;
              }
              if ((_DWORD)v102)
              {
                LODWORD(v125) = (v102 - 1) & (v62 ^ (v84 >> 9));
                v126 = (uint64_t ****)(v101 + 16 * v125);
                v127 = *v126;
                if (*v126 != v84)
                {
                  v128 = 1;
                  while (v127 != (uint64_t ***)-4096)
                  {
                    v129 = v125 + v128++;
                    v125 = v129 & (v102 - 1);
                    v127 = *(uint64_t ****)(v101 + 16 * v125);
                    if (v127 == v84)
                    {
                      v126 = (uint64_t ****)(v101 + 16 * v125);
                      goto LABEL_142;
                    }
                  }
                  goto LABEL_141;
                }
              }
              else
              {
LABEL_141:
                v126 = (uint64_t ****)(v101 + 16 * v102);
              }
LABEL_142:
              v130 = v126[1];
              if (*v130 == (uint64_t **)27)
              {
                v131 = v130[2];
                v132 = v130[3];
                v133 = v130[4];
                v134 = *(uint64_t *)((char *)v130 + 35);
                v135 = v131 == (uint64_t **)0x5F6C61636F6C5F5FLL && v132 == (uint64_t **)0x63735F6F69647473;
                v136 = v135 && v133 == (uint64_t **)0x6974706F5F666E61;
                if (v136 && v134 == 0x736E6F6974706F5FLL)
                  goto LABEL_100;
              }
LABEL_153:
              v138 = v84[10];
              if (v138)
                v139 = v138 - 3;
              else
                v139 = 0;
              v140 = v139[5];
              if (v140)
                v141 = v140 - 3;
              else
                v141 = 0;
              if (*((unsigned __int8 *)v141 + 16) - 29 >= 0xB)
                v141 = 0;
              if (*((_BYTE *)v141 + 16) == 35)
                goto LABEL_100;
              if ((*((_WORD *)v84 + 9) & 8) != 0)
              {
                v142 = (v30 & 0x40000000) != 0
                     ? (llvm::Value **)*(v84 - 1)
                     : (llvm::Value **)&v84[-4 * (v30 & 0x7FFFFFF)];
                v143 = llvm::classifyEHPersonality(*v142, v98);
                v83 = v694;
                if (v143 - 7 < 2)
                  goto LABEL_100;
              }
              v144 = *(uint64_t ***)(a1 + 1024);
              v689 = (uint64_t)v84;
              if (!v144)
              {
LABEL_168:
                v145 = *(uint64_t ***)(a1 + 1032);
                if (!v145)
                  goto LABEL_169;
                if ((*((_BYTE *)v84 + 23) & 0x10) != 0)
                {
                  v641 = ***v84;
                  v642 = *(_QWORD *)(v641 + 152);
                  v643 = *(unsigned int *)(v641 + 168);
                  if (!(_DWORD)v643)
                    goto LABEL_934;
                  LODWORD(v644) = (v643 - 1) & (v62 ^ (v84 >> 9));
                  v645 = (uint64_t ****)(v642 + 16 * v644);
                  v646 = *v645;
                  if (*v645 != v84)
                  {
                    v647 = 1;
                    while (v646 != (uint64_t ***)-4096)
                    {
                      v648 = v644 + v647++;
                      v644 = v648 & (v643 - 1);
                      v646 = *(uint64_t ****)(v642 + 16 * v644);
                      if (v646 == v84)
                      {
                        v645 = (uint64_t ****)(v642 + 16 * v644);
                        goto LABEL_935;
                      }
                    }
LABEL_934:
                    v645 = (uint64_t ****)(v642 + 16 * v643);
                  }
LABEL_935:
                  v654 = v645[1];
                  v657 = (size_t)*v654;
                  v655 = (unsigned __int8 *)(v654 + 2);
                  v656 = v657;
                }
                else
                {
                  v656 = 0;
                  v655 = (unsigned __int8 *)&byte_1C871356D;
                }
                v658 = llvm::SpecialCaseList::inSectionBlame(v145, "coverage", 8uLL, "fun", 3uLL, v655, v656, v99, 0, 0);
                p_p = v704;
                a6 = v705;
                v83 = v694;
                if (v658)
                  goto LABEL_100;
LABEL_169:
                v146 = v84[14];
                if (v146 && ((_BYTE)v146[2] & 4) != 0)
                  goto LABEL_100;
                if (*(int *)(a1 + 1000) >= 3)
                {
                  __p = 0u;
                  memset(v753, 0, 19);
                  *(_WORD *)&v753[19] = 257;
                  llvm::SplitAllCriticalEdges((uint64_t)v84, (uint64_t)&__p);
                }
                v749 = v751;
                v750 = 0x800000000;
                v746[0] = v747;
                v746[1] = (const void *)0x1000000000;
                v743 = v745;
                v744 = 0x800000000;
                v740 = v742;
                v741 = 0x800000000;
                v737 = v739;
                v738 = 0x800000000;
                v734 = v736;
                v735 = 0x800000000;
                v731 = v733;
                v732 = 0x800000000;
                v728 = v730;
                v729 = 0x800000000;
                v691 = a3(v703, v84);
                v147 = ((uint64_t (*)(uint64_t, uint64_t ***))p_p)(a6, v84);
                v148 = v84[10];
                v684 = v84 >> 4;
                if (v148 != v695)
                {
                  v682 = v147;
                  v706 = 1;
                  while (1)
                  {
                    v686 = v148;
                    if (v148)
                      v149 = v148 - 3;
                    else
                      v149 = 0;
                    if (llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime((llvm::BasicBlock *)v149, 1)[16] != 35)
                    {
                      v183 = (uint64_t *)(v149 + 5);
                      for (i = v149[6]; ; i = (uint64_t *)i[1])
                      {
                        if (i == v183)
                          goto LABEL_179;
                        v185 = i - 3;
                        if (!i)
                          v185 = 0;
                        if (*((_BYTE *)v185 + 16) != 83)
                          break;
                      }
                      v186 = *((unsigned __int8 *)i - 8) - 38;
                      v202 = v186 > 0x38;
                      v187 = (1 << v186) & 0x100060000000001;
                      if (!v202 && v187 != 0)
                        i = (uint64_t *)i[1];
                      if (v183 != i)
                      {
                        if (*(_BYTE *)(a1 + 1015))
                          goto LABEL_283;
                        v189 = v686 == 0;
                        v190 = *(_QWORD *)(v689 + 80);
                        if (v190)
                          v189 = v190 - 24 == (_QWORD)v149;
                        if (v189)
                        {
LABEL_283:
                          v191 = LODWORD(v746[1]);
                          if (LODWORD(v746[1]) >= (unint64_t)HIDWORD(v746[1]))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v746, (uint64_t)v747, LODWORD(v746[1]) + 1, 8);
                            v191 = LODWORD(v746[1]);
                          }
                          *((_QWORD *)v746[0] + v191) = v149;
                          ++LODWORD(v746[1]);
                          goto LABEL_179;
                        }
                        if (*(_DWORD *)(a1 + 1000) == 1)
                          goto LABEL_179;
                        v192 = (_QWORD *)*v183;
                        if ((uint64_t *)*v183 == v183)
                          goto LABEL_302;
                        if (v192)
                          v193 = v192 - 3;
                        else
                          v193 = 0;
                        v194 = *((unsigned __int8 *)v193 + 16);
                        if (v194 == 30)
                        {
                          if ((*((_DWORD *)v193 + 5) & 0x7FFFFFF) == 3)
                            v195 = 2;
                          else
                            v195 = 1;
LABEL_295:
                          v196 = 0;
                          v30 = (uint64_t)(v193 - 4);
                          p_p = (unsigned __int8 *)v195;
                          while (1)
                          {
                            v197 = *((unsigned __int8 *)v193 + 16);
                            if (v197 != 30)
                              __asm { BR              X9 }
                            if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v691, (uint64_t)v149, *(_QWORD *)v30))break;
                            ++v196;
                            v30 -= 32;
                            if (p_p == v196)
                              goto LABEL_179;
                          }
LABEL_302:
                          v30 = (uint64_t)v149[1];
                          v198 = v30;
                          if (!v30)
                            goto LABEL_283;
                          while (1)
                          {
                            v199 = *(_QWORD *)(v198 + 24);
                            v200 = *(unsigned __int8 *)(v199 + 16);
                            v201 = v199 && v200 >= 0x1C;
                            v202 = !v201 || v200 - 29 > 0xA;
                            if (!v202)
                              break;
                            v198 = *(_QWORD *)(v198 + 8);
                            if (!v198)
                              goto LABEL_283;
                          }
                          while (1)
                          {
                            v203 = *(_QWORD *)(v30 + 24);
                            v204 = *(unsigned __int8 *)(v203 + 16);
                            v205 = v203 && v204 >= 0x1C;
                            if (v205 && v204 - 29 <= 0xA)
                              break;
                            v30 = *(_QWORD *)(v30 + 8);
                            if (!v30)
                              goto LABEL_322;
                          }
                          if (!llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(v682, (uint64_t)v149, *(_QWORD *)(v203 + 40)))goto LABEL_283;
                          while (1)
                          {
                            v30 = *(_QWORD *)(v30 + 8);
                            if (!v30)
                              break;
                            v208 = *(_QWORD *)(v30 + 24);
                            v209 = *(unsigned __int8 *)(v208 + 16);
                            if (v208)
                              v210 = v209 >= 0x1C;
                            else
                              v210 = 0;
                            v211 = !v210 || v209 - 29 > 0xA;
                            if (!v211
                              && !llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(v682, (uint64_t)v149, *(_QWORD *)(v208 + 40)))
                            {
                              goto LABEL_283;
                            }
                          }
LABEL_322:
                          if (llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v149))
                            goto LABEL_283;
                          goto LABEL_179;
                        }
                        v195 = 2;
                        switch(*((_BYTE *)v193 + 16))
                        {
                          case 0x1E:
                            __break(1u);
                            goto LABEL_981;
                          case 0x1F:
                            v212 = (*((_DWORD *)v193 + 5) >> 1) & 0x3FFFFFF;
                            break;
                          case 0x20:
                          case 0x26:
                            v212 = (*((_DWORD *)v193 + 5) & 0x7FFFFFF) - 1;
                            break;
                          case 0x21:
                            goto LABEL_295;
                          case 0x24:
                            v212 = *((_WORD *)v193 + 9) & 1;
                            break;
                          case 0x25:
                            v195 = 1;
                            goto LABEL_295;
                          case 0x27:
                            v212 = *((_DWORD *)v193 + 20) + 1;
                            break;
                          default:
                            goto LABEL_302;
                        }
                        if (!v212)
                          goto LABEL_302;
                        if (v194 != 31)
                          __asm { BR              X10 }
                        v195 = (*((_DWORD *)v193 + 5) >> 1) & 0x3FFFFFF;
                        if (v195)
                          goto LABEL_295;
                      }
                    }
LABEL_179:
                    v150 = (llvm::UndefValue *)(v149 + 5);
                    v62 = (llvm::UndefValue *)v149[6];
                    v698 = (llvm::UndefValue *)(v149 + 5);
                    if (v62 != (llvm::UndefValue *)(v149 + 5))
                    {
                      do
                      {
                        if (v62)
                          p_p = (unsigned __int8 *)v62 - 24;
                        else
                          p_p = 0;
                        if (*(_BYTE *)(a1 + 1004))
                        {
                          v151 = p_p[16] - 33;
                          v202 = v151 > 0x33;
                          v152 = (1 << v151) & 0x8000000000041;
                          if (!v202 && v152 != 0)
                          {
                            v154 = *(unsigned __int8 *)(*((_QWORD *)v62 - 7) + 16);
                            if (v154 >= 0x15 && v154 != 24)
                            {
                              v156 = v750;
                              if (v750 >= (unint64_t)HIDWORD(v750))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v749, (uint64_t)v751, v750 + 1, 8);
                                v150 = v698;
                                v156 = v750;
                              }
                              *((_QWORD *)v749 + v156) = p_p;
                              LODWORD(v750) = v750 + 1;
                            }
                          }
                        }
                        if (*(_BYTE *)(a1 + 1006))
                        {
                          v157 = p_p[16];
                          if (v157 == 81)
                            v158 = p_p;
                          else
                            v158 = 0;
                          if (v62 && v157 == 81)
                          {
                            if (*(_BYTE *)(a1 + 1015))
                              goto LABEL_202;
                            v169 = *((_QWORD *)v158 + 1);
                            if (!v169 || *(_QWORD *)(v169 + 8))
                              goto LABEL_202;
                            v170 = *(_QWORD *)(v169 + 24);
                            v171 = v170 && *(_BYTE *)(v170 + 16) == 30;
                            if (!v171
                              || ((v172 = *(_DWORD *)(v170 + 20), (v172 & 0x40000000) != 0)
                                ? (v174 = *(_QWORD *)(v170 - 8), v173 = v172 & 0x7FFFFFF)
                                : (v173 = v172 & 0x7FFFFFF, v174 = v170 - 32 * v173),
                                  v175 = (_DWORD)v173 == 3,
                                  v173 == v175))
                            {
LABEL_202:
                              v159 = v744;
                              if (v744 >= (unint64_t)HIDWORD(v744))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v743, (uint64_t)v745, v744 + 1, 8);
                                v150 = v698;
                                v159 = v744;
                              }
                              *((_QWORD *)v743 + v159) = p_p;
                              LODWORD(v744) = v744 + 1;
                            }
                            else
                            {
                              v176 = (uint64_t *)(v174 + 32 * v175);
                              v177 = 32 * v173 - 32 * v175;
                              while (1)
                              {
                                v178 = (llvm::BasicBlock *)*v176;
                                v179 = v170;
                                v30 = *(_QWORD *)(v170 + 40);
                                v180 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v691, *v176, v30);
                                v150 = v698;
                                if (v180)
                                  break;
                                UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v178);
                                v150 = v698;
                                if (UniqueSuccessor)
                                {
                                  v182 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v691, UniqueSuccessor, v30);
                                  v150 = v698;
                                  if (v182)
                                    break;
                                }
                                v176 += 4;
                                v177 -= 32;
                                v170 = v179;
                                if (!v177)
                                  goto LABEL_202;
                              }
                            }
                            v157 = p_p[16];
                          }
                          if (v157 == 31)
                          {
                            v160 = v741;
                            if (v741 >= (unint64_t)HIDWORD(v741))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)v742, v741 + 1, 8);
                              v150 = v698;
                              v160 = v741;
                            }
                            *((_QWORD *)v740 + v160) = p_p;
                            LODWORD(v741) = v741 + 1;
                          }
                        }
                        if (*(_BYTE *)(a1 + 1007))
                        {
                          v161 = p_p[16] - 59;
                          v162 = v161 >= 0xFFFFFFEE ? p_p : 0;
                          if (v62 && v161 >= 0xFFFFFFEE && v162[16] - 47 <= 1)
                          {
                            v163 = v738;
                            if (v738 >= (unint64_t)HIDWORD(v738))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v737, (uint64_t)v739, v738 + 1, 8);
                              v150 = v698;
                              v163 = v738;
                            }
                            *((_QWORD *)v737 + v163) = v162;
                            LODWORD(v738) = v738 + 1;
                          }
                        }
                        if (*(_BYTE *)(a1 + 1008) && v62 && p_p[16] == 62)
                        {
                          v164 = v735;
                          if (v735 >= (unint64_t)HIDWORD(v735))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v734, (uint64_t)v736, v735 + 1, 8);
                            v150 = v698;
                            v164 = v735;
                          }
                          *((_QWORD *)v734 + v164) = p_p;
                          LODWORD(v735) = v735 + 1;
                        }
                        if (*(_BYTE *)(a1 + 1017) && v62 && p_p[16] == 60)
                        {
                          v165 = v732;
                          if (v732 >= (unint64_t)HIDWORD(v732))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v731, (uint64_t)v733, v732 + 1, 8);
                            v150 = v698;
                            v165 = v732;
                          }
                          *((_QWORD *)v731 + v165) = p_p;
                          LODWORD(v732) = v732 + 1;
                        }
                        if (*(_BYTE *)(a1 + 1018) && v62 && p_p[16] == 61)
                        {
                          v166 = v729;
                          if (v729 >= (unint64_t)HIDWORD(v729))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v728, (uint64_t)v730, v729 + 1, 8);
                            v150 = v698;
                            v166 = v729;
                          }
                          *((_QWORD *)v728 + v166) = p_p;
                          LODWORD(v729) = v729 + 1;
                        }
                        if (*(_BYTE *)(a1 + 1016))
                        {
                          v167 = p_p[16];
                          if (v167 == 33
                            || v167 == 84
                            && ((v168 = *((_QWORD *)p_p - 4)) == 0
                             || *(_BYTE *)(v168 + 16)
                             || *(_QWORD *)(v168 + 24) != *((_QWORD *)p_p + 9)
                             || (*(_BYTE *)(v168 + 33) & 0x20) == 0))
                          {
                            v706 = 0;
                          }
                        }
                        v62 = (llvm::UndefValue *)*((_QWORD *)v62 + 1);
                      }
                      while (v62 != v150);
                    }
                    v148 = (uint64_t **)v686[1];
                    if (v148 == v695)
                      goto LABEL_348;
                  }
                }
                v706 = 1;
LABEL_348:
                v213 = v689;
                v683 = (llvm::Type *)LODWORD(v746[1]);
                if (LODWORD(v746[1]))
                {
                  v681 = (llvm::Function **)v746[0];
                  if (*(_BYTE *)(a1 + 1011))
                    *(_QWORD *)(a1 + 616) = sub_1C58D30FC(a1, (llvm::Type *)LODWORD(v746[1]), v689, *(llvm::ArrayType **)(a1 + 456), "sancov_guards");
                  if (*(_BYTE *)(a1 + 1012))
                    *(_QWORD *)(a1 + 624) = sub_1C58D30FC(a1, v683, v689, *(llvm::ArrayType **)(a1 + 488), "sancov_cntrs");
                  if (*(_BYTE *)(a1 + 1013))
                    *(_QWORD *)(a1 + 632) = sub_1C58D30FC(a1, v683, v689, *(llvm::ArrayType **)(a1 + 504), "sancov_BOOLs");
                  if (*(_BYTE *)(a1 + 1014))
                  {
                    *(_QWORD *)&__p = v753;
                    *((_QWORD *)&__p + 1) = 0x2000000000;
                    v214 = *(_QWORD *)(v689 + 80);
                    v215 = v214 - 24;
                    if (!v214)
                      v215 = 0;
                    v216 = v215 + 40;
                    for (j = *(_QWORD *)(v215 + 48); ; j = *(_QWORD *)(j + 8))
                    {
                      if (j == v216)
                        goto LABEL_369;
                      v218 = j - 24;
                      if (!j)
                        v218 = 0;
                      if (*(_BYTE *)(v218 + 16) != 83)
                        break;
                    }
                    v219 = *(unsigned __int8 *)(j - 8) - 38;
                    v202 = v219 > 0x38;
                    v220 = (1 << v219) & 0x100060000000001;
                    if (v202 || v220 == 0)
                      v216 = j;
                    else
                      v216 = *(_QWORD *)(j + 8);
LABEL_369:
                    if (v216)
                      v222 = v216 - 24;
                    else
                      v222 = 0;
                    sub_1C4773D54((uint64_t)&v762, v222, 0, 0, 0);
                    v224 = v681;
                    v225 = v683;
                    do
                    {
                      v226 = *(_QWORD *)(v689 + 80);
                      if (v226)
                        v227 = (llvm::Function *)(v226 - 24);
                      else
                        v227 = 0;
                      if (v227 == *v224)
                      {
                        v228 = *(_QWORD *)(a1 + 432);
                        v773 = 257;
                        v229 = sub_1C5098D9C((uint64_t *)&v762, (unsigned __int8 *)v689, v228, (uint64_t)&v771);
                        v230 = DWORD2(__p);
                        if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v753, DWORD2(__p) + 1, 8);
                          v230 = DWORD2(__p);
                        }
                        *(_QWORD *)(__p + 8 * v230) = v229;
                        ++DWORD2(__p);
                        v231 = *(llvm::ConstantInt **)(a1 + 424);
                        v232 = 1;
                      }
                      else
                      {
                        v237 = (unsigned __int8 *)llvm::BlockAddress::get(*((llvm::BlockAddress **)*v224 + 7), *v224, v223);
                        v238 = *(_QWORD *)(a1 + 432);
                        v773 = 257;
                        v239 = sub_1C5098D9C((uint64_t *)&v762, v237, v238, (uint64_t)&v771);
                        v240 = DWORD2(__p);
                        if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v753, DWORD2(__p) + 1, 8);
                          v240 = DWORD2(__p);
                        }
                        *(_QWORD *)(__p + 8 * v240) = v239;
                        ++DWORD2(__p);
                        v231 = *(llvm::ConstantInt **)(a1 + 424);
                        v232 = 0;
                      }
                      v233 = (unsigned __int8 *)llvm::ConstantInt::get(v231, v232, 0);
                      v234 = *(_QWORD *)(a1 + 432);
                      v773 = 257;
                      v235 = sub_1C4773E38((uint64_t *)&v762, 48, v233, v234, (uint64_t)&v771);
                      v236 = DWORD2(__p);
                      if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v753, DWORD2(__p) + 1, 8);
                        v236 = DWORD2(__p);
                      }
                      *(_QWORD *)(__p + 8 * v236) = v235;
                      ++DWORD2(__p);
                      ++v224;
                      v225 = (llvm::Type *)((char *)v225 - 1);
                    }
                    while (v225);
                    v241 = sub_1C58D30FC(a1, (llvm::Type *)(2 * (_QWORD)v683), v689, *(llvm::ArrayType **)(a1 + 432), "sancov_pcs");
                    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 432), (llvm::Type *)(2 * (_QWORD)v683));
                    v243 = llvm::ConstantArray::get(v242, (llvm::Type *)__p, DWORD2(__p));
                    llvm::GlobalVariable::setInitializer((uint64_t)v241, (llvm::Constant *)v243);
                    *((_BYTE *)v241 + 80) |= 1u;
                    if (v762 != &v763.u64[1])
                      free(v762);
                    if ((_BYTE *)__p != v753)
                      free((void *)__p);
                    *(_QWORD *)(a1 + 640) = v241;
                    v213 = v689;
                  }
                  v244 = 0;
                  v679 = 0;
                  v680 = v684 ^ (v213 >> 9);
                  while (2)
                  {
                    v245 = (uint64_t)v681[v244];
                    v246 = v245 + 40;
                    for (k = *(_QWORD *)(v245 + 48); k != v246; k = *(_QWORD *)(k + 8))
                    {
                      v248 = k - 24;
                      if (!k)
                        v248 = 0;
                      if (*(_BYTE *)(v248 + 16) != 83)
                      {
                        v249 = *(unsigned __int8 *)(k - 8) - 38;
                        v202 = v249 > 0x38;
                        v250 = (1 << v249) & 0x100060000000001;
                        if (v202 || v250 == 0)
                          v246 = k;
                        else
                          v246 = *(_QWORD *)(k + 8);
                        break;
                      }
                    }
                    v252 = *(_QWORD *)(v213 + 80);
                    if (v252)
                      v253 = v252 - 24 == v245;
                    else
                      v253 = 0;
                    v254 = !v253;
                    v692 = v254;
                    v713 = 0;
                    v699 = v244;
                    if (!v253)
                    {
                      v255 = v246 - 24;
                      if (!v246)
                        v255 = 0;
                      v256 = (unsigned __int8 **)(v255 + 48);
                      if (v256 == &v713
                        || (v257 = *v256, (v713 = v257) == 0)
                        || (llvm::MetadataTracking::track((uint64_t)&v713, v257, 2), !v713))
                      {
                        if ((*(_BYTE *)(v213 + 23) & 0x20) != 0)
                        {
                          v258 = ***(_QWORD ***)v213;
                          *(_QWORD *)&__p = v213;
                          v259 = *(_DWORD *)(v258 + 2496);
                          if (!v259)
                          {
                            v466 = 0;
                            goto LABEL_655;
                          }
                          v260 = *(_QWORD *)(v258 + 2480);
                          v261 = v259 - 1;
                          v262 = v261 & v680;
                          v263 = (_QWORD *)(v260 + 40 * (v261 & v680));
                          v264 = *v263;
                          if (*v263 != v213)
                          {
                            v265 = 0;
                            v266 = 1;
                            while (v264 != -4096)
                            {
                              if (v265)
                                v267 = 0;
                              else
                                v267 = v264 == -8192;
                              if (v267)
                                v265 = v263;
                              v268 = v262 + v266++;
                              v262 = v268 & v261;
                              v263 = (_QWORD *)(v260 + 40 * v262);
                              v264 = *v263;
                              if (*v263 == v213)
                                goto LABEL_426;
                            }
                            if (v265)
                              v466 = v265;
                            else
                              v466 = v263;
LABEL_655:
                            v263 = sub_1C541AB24(v258 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v466);
                            v467 = __p;
                            v263[4] = 0;
                            v263[3] = 0;
                            *v263 = v467;
                            v263[1] = v263 + 3;
                            v263[2] = 0x100000000;
                            v213 = v689;
                          }
LABEL_426:
                          v269 = *((unsigned int *)v263 + 4);
                          if ((_DWORD)v269)
                          {
                            v270 = (uint64_t *)(v263[1] + 8);
                            v271 = 16 * v269;
                            while (*((_DWORD *)v270 - 2))
                            {
                              v270 += 2;
                              v271 -= 16;
                              if (!v271)
                                goto LABEL_457;
                            }
                            v423 = *v270;
                            if (*v270)
                            {
                              v424 = *(_QWORD *)(v423 + 16);
                              v425 = (uint64_t *)(v424 & 0xFFFFFFFFFFFFFFF8);
                              if ((v424 & 4) != 0)
                                v425 = (uint64_t *)*v425;
                              Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v425, 0, 0, v423, 0, 0, 0, 1);
                              *(_QWORD *)&__p = Impl;
                              if (Impl)
                                llvm::MetadataTracking::track((uint64_t)&__p, Impl, 2);
                              if (v713)
                                llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
                              v713 = (unsigned __int8 *)__p;
                              if ((_QWORD)__p)
                                llvm::MetadataTracking::retrack((uint64_t)&__p, (unsigned __int8 *)__p, (uint64_t)&v713);
                            }
                          }
                        }
                      }
LABEL_457:
                      if (v246)
                        v290 = v246 - 24;
                      else
                        v290 = 0;
                      v696 = (uint64_t *)v290;
                      sub_1C4773D54((uint64_t)&__p, v290, 0, 0, 0);
                      v712 = v713;
                      if (v713)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v712, v713, 2);
                        v291 = v712;
                      }
                      else
                      {
                        v291 = 0;
                      }
                      sub_1C4774EF4((uint64_t)&__p, 0, (uint64_t)v291);
                      if (v712)
                        llvm::MetadataTracking::untrack((uint64_t)&v712, v712);
                      if (*(_BYTE *)(a1 + 1010))
                      {
                        v292 = *(uint64_t ***)(a1 + 16);
                        v293 = *(_QWORD *)(a1 + 24);
                        LOWORD(v765) = 257;
                        v294 = sub_1C4774778((uint64_t *)&__p, v292, v293, 0, 0, (uint64_t)&v762, 0);
                        *(_QWORD *)(v294 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v294 + 64), **(uint64_t ***)v294, -1, 28);
                      }
                      if (*(_BYTE *)(a1 + 1011))
                      {
                        v711 = 0;
                        v295 = *(unsigned __int8 **)(a1 + 616);
                        v296 = *(_QWORD *)(a1 + 424);
                        v773 = 257;
                        v297 = sub_1C5098D9C((uint64_t *)&__p, v295, v296, (uint64_t)&v771);
                        v298 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 4 * v244, 0);
                        v770 = 257;
                        v299 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v758 + 16))(v758, v297, v298, 0, 0);
                        if (!v299)
                        {
                          LOWORD(v765) = 257;
                          v300 = (char *)operator new(0x80uLL);
                          v301 = v300;
                          *(_QWORD *)v300 = 0;
                          *((_QWORD *)v300 + 1) = 0;
                          *((_QWORD *)v300 + 2) = 0;
                          *((_QWORD *)v300 + 5) = 0;
                          *((_QWORD *)v300 + 6) = 0;
                          *((_QWORD *)v300 + 4) = 0;
                          v302 = (llvm::Value ***)(v300 + 32);
                          *((_QWORD *)v300 + 8) = *(_QWORD *)v297;
                          v299 = (llvm::Value *)(v300 + 64);
                          *((_QWORD *)v300 + 3) = v300 + 64;
                          *((_QWORD *)v300 + 7) = v300 + 64;
                          *((_QWORD *)v300 + 9) = 0;
                          v300[80] = 41;
                          v300[81] = 0;
                          *((_WORD *)v300 + 41) = 0;
                          *((_DWORD *)v300 + 21) = 2;
                          *((_DWORD *)v300 + 30) = 0;
                          *(_OWORD *)(v300 + 104) = 0u;
                          *(_OWORD *)(v300 + 88) = 0u;
                          *(_QWORD *)v300 = v297;
                          v305 = *((_QWORD *)v297 + 1);
                          v304 = v297 + 8;
                          v303 = v305;
                          *((_QWORD *)v300 + 1) = v305;
                          if (v305)
                            *(_QWORD *)(v303 + 16) = v300 + 8;
                          *((_QWORD *)v300 + 2) = v304;
                          *v304 = v300;
                          if (*((_QWORD *)v300 + 4))
                          {
                            **((_QWORD **)v300 + 6) = *((_QWORD *)v300 + 5);
                            v499 = *((_QWORD *)v300 + 5);
                            if (v499)
                              *(_QWORD *)(v499 + 16) = *((_QWORD *)v300 + 6);
                          }
                          *v302 = v298;
                          if (v298)
                          {
                            v308 = v298[1];
                            v307 = (llvm::Value ****)(v298 + 1);
                            v306 = v308;
                            *((_QWORD *)v300 + 5) = v308;
                            if (v308)
                              *((_QWORD *)v306 + 2) = v300 + 40;
                            *((_QWORD *)v300 + 6) = v307;
                            *v307 = v302;
                          }
                          llvm::Value::setName((uint64_t ***)v300 + 8, (uint64_t)&v762);
                          (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, v299, v769, v755, v756);
                          if (DWORD2(__p))
                          {
                            v309 = __p;
                            v310 = __p + 16 * DWORD2(__p);
                            v311 = (unsigned __int8 **)(v301 + 112);
                            do
                            {
                              v312 = *(_DWORD *)v309;
                              v313 = *(unsigned __int8 **)(v309 + 8);
                              if (v313)
                              {
                                if (!v312)
                                {
                                  v760 = *(unsigned __int8 **)(v309 + 8);
                                  llvm::MetadataTracking::track((uint64_t)&v760, v313, 2);
                                  v314 = *v311;
                                  goto LABEL_488;
                                }
                              }
                              else
                              {
                                v314 = *v311;
                                if (!*v311 && (v301[87] & 0x20) == 0)
                                  goto LABEL_485;
                                if (!v312)
                                {
                                  v760 = 0;
LABEL_488:
                                  if (v314)
                                    llvm::MetadataTracking::untrack((uint64_t)(v301 + 112), v314);
                                  v315 = v760;
                                  *v311 = v760;
                                  if (v315)
                                    llvm::MetadataTracking::retrack((uint64_t)&v760, v315, (uint64_t)(v301 + 112));
                                  goto LABEL_485;
                                }
                              }
                              llvm::Value::setMetadata(v299, *(_DWORD *)v309, (llvm::MDNode *)v313);
LABEL_485:
                              v309 += 16;
                            }
                            while (v309 != v310);
                          }
                          v213 = v689;
                        }
                        v316 = *(_QWORD *)(a1 + 464);
                        LOWORD(v765) = 257;
                        v711 = sub_1C4773E38((uint64_t *)&__p, 48, (unsigned __int8 *)v299, v316, (uint64_t)&v762);
                        if (!*(_BYTE *)(a1 + 1019))
                        {
                          v317 = *(uint64_t ***)(a1 + 32);
                          v318 = *(_QWORD *)(a1 + 40);
                          LOWORD(v765) = 257;
                          v319 = sub_1C4774778((uint64_t *)&__p, v317, v318, (uint64_t *)&v711, 1, (uint64_t)&v762, 0);
                          *(_QWORD *)(v319 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v319 + 64), **(uint64_t ***)v319, -1, 28);
                          goto LABEL_495;
                        }
                        v446 = v679;
                        if (!v679)
                        {
                          v447 = *(_QWORD *)(a1 + 440);
                          v448 = *(_QWORD *)(a1 + 408);
                          v773 = 257;
                          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v755 + 56) + 40) + 272, v447);
                          v450 = v449;
                          v451 = (char *)operator new(0x60uLL);
                          v452 = v451;
                          v453 = (llvm::Constant **)(v451 + 32);
                          *((_QWORD *)v451 + 2) = 0;
                          *((_QWORD *)v451 + 3) = v451 + 32;
                          LOWORD(v765) = 257;
                          *((_QWORD *)v451 + 4) = v447;
                          *((_QWORD *)v451 + 5) = 0;
                          *((_WORD *)v451 + 24) = 60;
                          *((_DWORD *)v451 + 13) = 1;
                          *(_OWORD *)(v451 + 56) = 0u;
                          *(_OWORD *)(v451 + 72) = 0u;
                          *((_DWORD *)v451 + 22) = 0;
                          *(_QWORD *)v451 = v448;
                          *((_QWORD *)v451 + 1) = 0;
                          if (v448)
                          {
                            v456 = *(_QWORD *)(v448 + 8);
                            v455 = (_QWORD *)(v448 + 8);
                            v454 = v456;
                            *((_QWORD *)v451 + 1) = v456;
                            if (v456)
                              *(_QWORD *)(v454 + 16) = v451 + 8;
                            *((_QWORD *)v451 + 2) = v455;
                            *v455 = v451;
                          }
                          *((_WORD *)v451 + 25) = 2 * (v450 & 0x3F);
                          v451[92] = 1;
                          llvm::Value::setName((uint64_t ***)v451 + 4, (uint64_t)&v762);
                          (*(void (**)(uint64_t, llvm::Constant **, llvm::Value ***, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, v453, &v771, v755, v756);
                          if (!DWORD2(__p))
                          {
LABEL_642:
                            sub_1C58D3508(a1, (uint64_t)v453);
                            LOWORD(v765) = 257;
                            v458 = llvm::Constant::getNullValue(*v453, v457);
                            v446 = (uint64_t ***)sub_1C4774B48((uint64_t)&__p, 33, (uint64_t)v453, (uint64_t)v458, (uint64_t)&v762);
                            v762 = "sancov gate cmp";
                            LOWORD(v765) = 259;
                            llvm::Value::setName(v446, (uint64_t)&v762);
                            goto LABEL_643;
                          }
                          v489 = __p;
                          v490 = __p + 16 * DWORD2(__p);
                          v491 = (unsigned __int8 **)(v452 + 80);
                          while (2)
                          {
                            v492 = *(_DWORD *)v489;
                            v493 = *(unsigned __int8 **)(v489 + 8);
                            if (v493)
                            {
                              if (v492)
                                goto LABEL_708;
                              v769[0] = *(_QWORD *)(v489 + 8);
                              llvm::MetadataTracking::track((uint64_t)v769, v493, 2);
                              v494 = *v491;
LABEL_712:
                              if (v494)
                                llvm::MetadataTracking::untrack((uint64_t)(v452 + 80), v494);
                              v495 = (unsigned __int8 *)v769[0];
                              *v491 = (unsigned __int8 *)v769[0];
                              if (v495)
                                llvm::MetadataTracking::retrack((uint64_t)v769, v495, (uint64_t)(v452 + 80));
                            }
                            else
                            {
                              v494 = *v491;
                              if (*v491 || (v452[55] & 0x20) != 0)
                              {
                                if (!v492)
                                {
                                  v769[0] = 0;
                                  goto LABEL_712;
                                }
LABEL_708:
                                llvm::Value::setMetadata((llvm::Value *)v453, *(_DWORD *)v489, (llvm::MDNode *)v493);
                              }
                            }
                            v489 += 16;
                            if (v489 == v490)
                              goto LABEL_642;
                            continue;
                          }
                        }
LABEL_643:
                        v771 = *(llvm::Value ***)(a1 + 600);
                        v762 = (void *)0x186A000000001;
                        BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v771, (uint64_t)&v762, 2);
                        v679 = v446;
                        v460 = sub_1C5EBFBC0((llvm::Value *)v446, v696, 0, BranchWeights, 0, 0, 0, 0);
                        sub_1C4773D54((uint64_t)&v762, (uint64_t)v460, 0, 0, 0);
                        v461 = *(uint64_t ***)(a1 + 32);
                        v462 = *(_QWORD *)(a1 + 40);
                        v773 = 257;
                        v463 = sub_1C4774778((uint64_t *)&v762, v461, v462, (uint64_t *)&v711, 1, (uint64_t)&v771, 0);
                        *(_QWORD *)(v463 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v463 + 64), **(uint64_t ***)v463, -1, 28);
                        if (v762 != &v763.u64[1])
                          free(v762);
                        v213 = v689;
LABEL_495:
                        v244 = v699;
                      }
                      if (*(_BYTE *)(a1 + 1012))
                      {
                        v320 = *(uint64_t **)(a1 + 624);
                        v321 = (llvm::GetElementPtrInst *)v320[3];
                        v771 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 0, 0);
                        v772 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), v244, 0);
                        LOWORD(v765) = 257;
                        v322 = sub_1C509D7B0((uint64_t *)&__p, v321, v320, (llvm::Value *)&v771, 2, (uint64_t)&v762);
                        v323 = *(_QWORD *)(a1 + 488);
                        v773 = 257;
                        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v755 + 56) + 40) + 272, v323);
                        v325 = v324;
                        v326 = (char *)operator new(0x60uLL);
                        v327 = v326;
                        *((_QWORD *)v326 + 2) = 0;
                        *((_QWORD *)v326 + 3) = v326 + 32;
                        v687 = (uint64_t ***)(v326 + 32);
                        LOWORD(v765) = 257;
                        *((_QWORD *)v326 + 4) = v323;
                        *((_QWORD *)v326 + 5) = 0;
                        v328 = (uint64_t *)(v326 + 40);
                        *((_WORD *)v326 + 24) = 60;
                        *((_DWORD *)v326 + 13) = 1;
                        *(_OWORD *)(v326 + 56) = 0u;
                        *(_OWORD *)(v326 + 72) = 0u;
                        *((_DWORD *)v326 + 22) = 0;
                        *(_QWORD *)v326 = v322;
                        *((_QWORD *)v326 + 1) = 0;
                        if (v322)
                        {
                          v329 = (_QWORD *)(v322 + 8);
                          v330 = *(_QWORD *)(v322 + 8);
                          *((_QWORD *)v326 + 1) = v330;
                          if (v330)
                            *(_QWORD *)(v330 + 16) = v326 + 8;
                          *((_QWORD *)v326 + 2) = v329;
                          *v329 = v326;
                        }
                        v685 = v322;
                        *((_WORD *)v326 + 25) = 2 * (v325 & 0x3F);
                        v326[92] = 1;
                        v331 = (llvm::Value *)(v326 + 32);
                        llvm::Value::setName(v687, (uint64_t)&v762);
                        (*(void (**)(uint64_t, uint64_t ***, llvm::Value ***, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, v687, &v771, v755, v756);
                        if (!DWORD2(__p))
                        {
LABEL_502:
                          v332 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 488), 1, 0);
                          v773 = 257;
                          v333 = (uint64_t *)(*(uint64_t (**)(uint64_t, llvm::Value *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v758 + 16))(v758, v331, v332, 0, 0);
                          if (!v333)
                          {
                            LOWORD(v765) = 257;
                            v334 = (char *)operator new(0x80uLL);
                            v335 = v334;
                            *((_QWORD *)v334 + 8) = *(_QWORD *)v331;
                            v336 = (llvm::Value *)(v334 + 64);
                            *((_QWORD *)v334 + 3) = v334 + 64;
                            *((_QWORD *)v334 + 5) = 0;
                            v337 = (llvm::Value **)(v334 + 40);
                            *((_QWORD *)v334 + 6) = 0;
                            *((_QWORD *)v334 + 7) = v334 + 64;
                            *((_QWORD *)v334 + 9) = 0;
                            *((_QWORD *)v334 + 10) = 0x200000029;
                            *(_OWORD *)(v334 + 88) = 0u;
                            *(_OWORD *)(v334 + 104) = 0u;
                            *((_DWORD *)v334 + 30) = 0;
                            *(_QWORD *)v334 = v331;
                            v338 = *v328;
                            *((_QWORD *)v334 + 1) = *v328;
                            if (v338)
                              *(_QWORD *)(v338 + 16) = v334 + 8;
                            *((_QWORD *)v334 + 2) = v328;
                            *v328 = (uint64_t)v334;
                            *((_QWORD *)v334 + 4) = v332;
                            if (v332)
                            {
                              v341 = v332[1];
                              v340 = v332 + 1;
                              v339 = v341;
                              *v337 = v341;
                              if (v341)
                                *((_QWORD *)v339 + 2) = v337;
                              *((_QWORD *)v334 + 6) = v340;
                              *v340 = v334 + 32;
                            }
                            llvm::Value::setName((uint64_t ***)v334 + 8, (uint64_t)&v762);
                            (*(void (**)(uint64_t, llvm::Value *, llvm::Value ***, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, v336, &v771, v755, v756);
                            if (DWORD2(__p))
                            {
                              v342 = __p;
                              v343 = __p + 16 * DWORD2(__p);
                              v344 = (unsigned __int8 **)(v335 + 112);
                              do
                              {
                                v345 = *(_DWORD *)v342;
                                v346 = *(unsigned __int8 **)(v342 + 8);
                                if (v346)
                                {
                                  if (!v345)
                                  {
                                    v769[0] = *(_QWORD *)(v342 + 8);
                                    llvm::MetadataTracking::track((uint64_t)v769, v346, 2);
                                    v347 = *v344;
                                    goto LABEL_521;
                                  }
                                }
                                else
                                {
                                  v347 = *v344;
                                  if (!*v344 && (v335[87] & 0x20) == 0)
                                    goto LABEL_518;
                                  if (!v345)
                                  {
                                    v769[0] = 0;
LABEL_521:
                                    if (v347)
                                      llvm::MetadataTracking::untrack((uint64_t)(v335 + 112), v347);
                                    v348 = (unsigned __int8 *)v769[0];
                                    *v344 = (unsigned __int8 *)v769[0];
                                    if (v348)
                                      llvm::MetadataTracking::retrack((uint64_t)v769, v348, (uint64_t)(v335 + 112));
                                    goto LABEL_518;
                                  }
                                }
                                llvm::Value::setMetadata(v336, *(_DWORD *)v342, (llvm::MDNode *)v346);
LABEL_518:
                                v342 += 16;
                              }
                              while (v342 != v343);
                            }
                            v333 = (uint64_t *)v336;
                          }
                          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v755 + 56) + 40) + 272, *v333);
                          v350 = v349;
                          v351 = (char *)operator new(0x80uLL);
                          v352 = v351;
                          *((_DWORD *)v351 + 21) = *((_DWORD *)v351 + 21) & 0x38000000 | 2;
                          *(_QWORD *)v351 = 0;
                          *((_QWORD *)v351 + 2) = 0;
                          *((_QWORD *)v351 + 1) = 0;
                          *((_QWORD *)v351 + 5) = 0;
                          *((_QWORD *)v351 + 6) = 0;
                          *((_QWORD *)v351 + 4) = 0;
                          v353 = (uint64_t *)(v351 + 32);
                          *((_QWORD *)v351 + 8) = **(_QWORD **)*v333 + 1576;
                          v354 = (llvm::Value *)(v351 + 64);
                          *((_QWORD *)v351 + 3) = v351 + 64;
                          *((_QWORD *)v351 + 7) = v351 + 64;
                          *((_QWORD *)v351 + 9) = 0;
                          v351[80] = 61;
                          v351[81] = 0;
                          *((_WORD *)v351 + 41) = 0;
                          *((_DWORD *)v351 + 21) = 2;
                          *(_OWORD *)(v351 + 88) = 0u;
                          *(_OWORD *)(v351 + 104) = 0u;
                          *((_DWORD *)v351 + 30) = 0;
                          *(_QWORD *)v351 = v333;
                          v357 = v333[1];
                          v356 = v333 + 1;
                          v355 = v357;
                          *((_QWORD *)v351 + 1) = v357;
                          if (v357)
                            *(_QWORD *)(v355 + 16) = v351 + 8;
                          *((_QWORD *)v351 + 2) = v356;
                          *v356 = v351;
                          if (*((_QWORD *)v351 + 4))
                          {
                            **((_QWORD **)v351 + 6) = *((_QWORD *)v351 + 5);
                            v496 = *((_QWORD *)v351 + 5);
                            if (v496)
                              *(_QWORD *)(v496 + 16) = *((_QWORD *)v351 + 6);
                          }
                          *v353 = v685;
                          if (v685)
                          {
                            v359 = (uint64_t **)(v685 + 8);
                            v358 = *(_QWORD *)(v685 + 8);
                            *((_QWORD *)v351 + 5) = v358;
                            if (v358)
                              *(_QWORD *)(v358 + 16) = v351 + 40;
                            *((_QWORD *)v351 + 6) = v359;
                            *v359 = v353;
                          }
                          *((_WORD *)v351 + 41) = 2 * (v350 & 0x3F);
                          v351[124] = 1;
                          LOWORD(v765) = 257;
                          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, v354, &v762, v755, v756);
                          if (!DWORD2(__p))
                          {
LABEL_534:
                            sub_1C58D3508(a1, (uint64_t)v331);
                            sub_1C58D3508(a1, (uint64_t)v354);
                            v213 = v689;
                            v244 = v699;
                            goto LABEL_535;
                          }
                          v468 = __p;
                          v469 = __p + 16 * DWORD2(__p);
                          v470 = (unsigned __int8 **)(v352 + 112);
                          while (2)
                          {
                            v471 = *(_DWORD *)v468;
                            v472 = *(unsigned __int8 **)(v468 + 8);
                            if (v472)
                            {
                              if (v471)
                                goto LABEL_663;
                              v771 = *(llvm::Value ***)(v468 + 8);
                              llvm::MetadataTracking::track((uint64_t)&v771, v472, 2);
                              v473 = *v470;
LABEL_667:
                              if (v473)
                                llvm::MetadataTracking::untrack((uint64_t)(v352 + 112), v473);
                              v474 = (unsigned __int8 *)v771;
                              *v470 = (unsigned __int8 *)v771;
                              if (v474)
                                llvm::MetadataTracking::retrack((uint64_t)&v771, v474, (uint64_t)(v352 + 112));
                            }
                            else
                            {
                              v473 = *v470;
                              if (*v470 || (v352[87] & 0x20) != 0)
                              {
                                if (!v471)
                                {
                                  v771 = 0;
                                  goto LABEL_667;
                                }
LABEL_663:
                                llvm::Value::setMetadata(v354, *(_DWORD *)v468, (llvm::MDNode *)v472);
                              }
                            }
                            v468 += 16;
                            v331 = (llvm::Value *)v687;
                            if (v468 == v469)
                              goto LABEL_534;
                            continue;
                          }
                        }
                        v427 = __p;
                        v428 = __p + 16 * DWORD2(__p);
                        v429 = (unsigned __int8 **)(v327 + 80);
                        while (2)
                        {
                          v430 = *(_DWORD *)v427;
                          v431 = *(unsigned __int8 **)(v427 + 8);
                          if (v431)
                          {
                            if (v430)
                              goto LABEL_595;
                            v769[0] = *(_QWORD *)(v427 + 8);
                            llvm::MetadataTracking::track((uint64_t)v769, v431, 2);
                            v432 = *v429;
LABEL_599:
                            if (v432)
                              llvm::MetadataTracking::untrack((uint64_t)(v327 + 80), v432);
                            v433 = (unsigned __int8 *)v769[0];
                            *v429 = (unsigned __int8 *)v769[0];
                            if (v433)
                              llvm::MetadataTracking::retrack((uint64_t)v769, v433, (uint64_t)(v327 + 80));
                            v331 = (llvm::Value *)v687;
                          }
                          else
                          {
                            v432 = *v429;
                            if (*v429 || (v327[55] & 0x20) != 0)
                            {
                              if (!v430)
                              {
                                v769[0] = 0;
                                goto LABEL_599;
                              }
LABEL_595:
                              llvm::Value::setMetadata(v331, *(_DWORD *)v427, (llvm::MDNode *)v431);
                            }
                          }
                          v427 += 16;
                          if (v427 == v428)
                            goto LABEL_502;
                          continue;
                        }
                      }
LABEL_535:
                      if (*(_BYTE *)(a1 + 1013))
                      {
                        v360 = *(uint64_t **)(a1 + 632);
                        v361 = (llvm::GetElementPtrInst *)v360[3];
                        v771 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 0, 0);
                        v772 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), v244, 0);
                        LOWORD(v765) = 257;
                        v362 = sub_1C509D7B0((uint64_t *)&__p, v361, v360, (llvm::Value *)&v771, 2, (uint64_t)&v762);
                        v363 = *(_QWORD *)(a1 + 504);
                        v773 = 257;
                        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v755 + 56) + 40) + 272, v363);
                        v365 = v364;
                        v366 = (char *)operator new(0x60uLL);
                        v367 = v366;
                        *((_QWORD *)v366 + 2) = 0;
                        *((_QWORD *)v366 + 3) = v366 + 32;
                        v688 = (uint64_t ***)(v366 + 32);
                        LOWORD(v765) = 257;
                        *((_QWORD *)v366 + 4) = v363;
                        *((_QWORD *)v366 + 5) = 0;
                        *((_WORD *)v366 + 24) = 60;
                        *((_DWORD *)v366 + 13) = 1;
                        *(_OWORD *)(v366 + 56) = 0u;
                        *(_OWORD *)(v366 + 72) = 0u;
                        *((_DWORD *)v366 + 22) = 0;
                        *(_QWORD *)v366 = v362;
                        *((_QWORD *)v366 + 1) = 0;
                        if (v362)
                        {
                          v368 = (_QWORD *)(v362 + 8);
                          v369 = *(_QWORD *)(v362 + 8);
                          *((_QWORD *)v366 + 1) = v369;
                          if (v369)
                            *(_QWORD *)(v369 + 16) = v366 + 8;
                          *((_QWORD *)v366 + 2) = v368;
                          *v368 = v366;
                        }
                        *((_WORD *)v366 + 25) = 2 * (v365 & 0x3F);
                        v366[92] = 1;
                        v370 = (llvm::Constant **)(v366 + 32);
                        llvm::Value::setName(v688, (uint64_t)&v762);
                        (*(void (**)(uint64_t, uint64_t ***, llvm::Value ***, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, v688, &v771, v755, v756);
                        if (!DWORD2(__p))
                        {
LABEL_541:
                          LOWORD(v765) = 257;
                          v372 = llvm::Constant::getNullValue(*v370, v371);
                          v373 = (llvm::Value *)sub_1C4774B48((uint64_t)&__p, 32, (uint64_t)v370, (uint64_t)v372, (uint64_t)&v762);
                          v374 = sub_1C5EBFBC0(v373, v696, 0, 0, 0, 0, 0, 0);
                          sub_1C4773D54((uint64_t)&v762, (uint64_t)v374, 0, 0, 0);
                          True = (uint64_t *)llvm::ConstantInt::getTrue(*(uint64_t ***)(a1 + 504), v375, v376);
                          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v766 + 56) + 40) + 272, *True);
                          v379 = v378;
                          v380 = (char *)operator new(0x80uLL);
                          v381 = v380;
                          *((_DWORD *)v380 + 21) = *((_DWORD *)v380 + 21) & 0x38000000 | 2;
                          *(_QWORD *)v380 = 0;
                          *((_QWORD *)v380 + 2) = 0;
                          *((_QWORD *)v380 + 1) = 0;
                          *((_QWORD *)v380 + 5) = 0;
                          *((_QWORD *)v380 + 6) = 0;
                          *((_QWORD *)v380 + 4) = 0;
                          v382 = (uint64_t *)(v380 + 32);
                          *((_QWORD *)v380 + 8) = **(_QWORD **)*True + 1576;
                          v383 = (llvm::Value *)(v380 + 64);
                          *((_QWORD *)v380 + 3) = v380 + 64;
                          *((_QWORD *)v380 + 7) = v380 + 64;
                          *((_QWORD *)v380 + 9) = 0;
                          v380[80] = 61;
                          v380[81] = 0;
                          *((_WORD *)v380 + 41) = 0;
                          *((_DWORD *)v380 + 21) = 2;
                          *(_OWORD *)(v380 + 88) = 0u;
                          *(_OWORD *)(v380 + 104) = 0u;
                          *((_DWORD *)v380 + 30) = 0;
                          *(_QWORD *)v380 = True;
                          v386 = True[1];
                          v385 = True + 1;
                          v384 = v386;
                          *((_QWORD *)v380 + 1) = v386;
                          if (v386)
                            *(_QWORD *)(v384 + 16) = v380 + 8;
                          *((_QWORD *)v380 + 2) = v385;
                          *v385 = v380;
                          v244 = v699;
                          if (*((_QWORD *)v380 + 4))
                          {
                            **((_QWORD **)v380 + 6) = *((_QWORD *)v380 + 5);
                            v497 = *((_QWORD *)v380 + 5);
                            if (v497)
                              *(_QWORD *)(v497 + 16) = *((_QWORD *)v380 + 6);
                          }
                          *v382 = v362;
                          if (v362)
                          {
                            v389 = *(_QWORD *)(v362 + 8);
                            v388 = (uint64_t **)(v362 + 8);
                            v387 = v389;
                            *((_QWORD *)v380 + 5) = v389;
                            if (v389)
                              *(_QWORD *)(v387 + 16) = v380 + 40;
                            *((_QWORD *)v380 + 6) = v388;
                            *v388 = v382;
                          }
                          *((_WORD *)v380 + 41) = 2 * (v379 & 0x3F);
                          v380[124] = 1;
                          v773 = 257;
                          (*(void (**)(uint64_t, llvm::Value *, llvm::Value ***, uint64_t, uint64_t))(*(_QWORD *)v768 + 16))(v768, v383, &v771, v766, v767);
                          if (!v763.i32[0])
                          {
LABEL_549:
                            sub_1C58D3508(a1, (uint64_t)v370);
                            sub_1C58D3508(a1, (uint64_t)v383);
                            if (v762 != &v763.u64[1])
                              free(v762);
                            v213 = v689;
                            goto LABEL_552;
                          }
                          v475 = (char *)v762;
                          v476 = (char *)v762 + 16 * v763.u32[0];
                          v477 = (unsigned __int8 **)(v381 + 112);
                          while (2)
                          {
                            v478 = *(_DWORD *)v475;
                            v479 = (unsigned __int8 *)*((_QWORD *)v475 + 1);
                            if (v479)
                            {
                              if (v478)
                                goto LABEL_678;
                              v769[0] = *((_QWORD *)v475 + 1);
                              llvm::MetadataTracking::track((uint64_t)v769, v479, 2);
                              v480 = *v477;
LABEL_682:
                              if (v480)
                                llvm::MetadataTracking::untrack((uint64_t)(v381 + 112), v480);
                              v481 = (unsigned __int8 *)v769[0];
                              *v477 = (unsigned __int8 *)v769[0];
                              if (v481)
                                llvm::MetadataTracking::retrack((uint64_t)v769, v481, (uint64_t)(v381 + 112));
                            }
                            else
                            {
                              v480 = *v477;
                              if (*v477 || (v381[87] & 0x20) != 0)
                              {
                                if (!v478)
                                {
                                  v769[0] = 0;
                                  goto LABEL_682;
                                }
LABEL_678:
                                llvm::Value::setMetadata(v383, *(_DWORD *)v475, (llvm::MDNode *)v479);
                              }
                            }
                            v475 += 16;
                            v244 = v699;
                            v370 = (llvm::Constant **)v688;
                            if (v475 == v476)
                              goto LABEL_549;
                            continue;
                          }
                        }
                        v434 = __p;
                        v435 = __p + 16 * DWORD2(__p);
                        v436 = (llvm::Type **)(v367 + 80);
                        while (2)
                        {
                          v437 = *(_DWORD *)v434;
                          v438 = *(unsigned __int8 **)(v434 + 8);
                          if (v438)
                          {
                            if (v437)
                              goto LABEL_611;
                            v769[0] = *(_QWORD *)(v434 + 8);
                            llvm::MetadataTracking::track((uint64_t)v769, v438, 2);
                            v371 = *v436;
LABEL_615:
                            if (v371)
                              llvm::MetadataTracking::untrack((uint64_t)(v367 + 80), (unsigned __int8 *)v371);
                            v371 = (llvm::Type *)v769[0];
                            *v436 = (llvm::Type *)v769[0];
                            if (v371)
                              llvm::MetadataTracking::retrack((uint64_t)v769, (unsigned __int8 *)v371, (uint64_t)(v367 + 80));
                            v370 = (llvm::Constant **)v688;
                          }
                          else
                          {
                            v371 = *v436;
                            if (*v436 || (v367[55] & 0x20) != 0)
                            {
                              if (!v437)
                              {
                                v769[0] = 0;
                                goto LABEL_615;
                              }
LABEL_611:
                              llvm::Value::setMetadata((llvm::Value *)v370, *(_DWORD *)v434, (llvm::MDNode *)v438);
                            }
                          }
                          v434 += 16;
                          if (v434 == v435)
                            goto LABEL_541;
                          continue;
                        }
                      }
LABEL_552:
                      if ((v692 | v706) & 1 | (*(_BYTE *)(a1 + 1016) == 0))
                      {
LABEL_572:
                        if ((_BYTE *)__p != v753)
                          free((void *)__p);
                        if (v713)
                          llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
                        if ((llvm::Type *)++v244 == v683)
                          goto LABEL_726;
                        continue;
                      }
                      v390 = *(_QWORD *)(v213 + 40);
                      v762 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v757 + 1912), (llvm::Type *)*(unsigned int *)(v390 + 276));
                      Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)v390, 147, (uint64_t *)&v762, 1);
                      v393 = Declaration;
                      if (Declaration)
                        v394 = *(uint64_t ***)(Declaration + 24);
                      else
                        v394 = 0;
                      v771 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 456), v392);
                      LOWORD(v765) = 257;
                      v395 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&__p, v394, v393, (uint64_t *)&v771, 1, (uint64_t)&v762, 0);
                      v396 = *(_QWORD *)(a1 + 424);
                      LOWORD(v765) = 257;
                      v397 = (uint64_t *)sub_1C4773E38((uint64_t *)&__p, 47, v395, v396, (uint64_t)&v762);
                      v398 = *(_QWORD *)(a1 + 424);
                      v399 = *(_QWORD *)(a1 + 400);
                      v773 = 257;
                      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v755 + 56) + 40) + 272, v398);
                      v401 = v400;
                      v402 = (char *)operator new(0x60uLL);
                      v403 = v402;
                      *((_QWORD *)v402 + 2) = 0;
                      *((_QWORD *)v402 + 3) = v402 + 32;
                      v693 = (uint64_t ***)(v402 + 32);
                      LOWORD(v765) = 257;
                      *((_QWORD *)v402 + 4) = v398;
                      *((_QWORD *)v402 + 5) = 0;
                      *((_WORD *)v402 + 24) = 60;
                      *((_DWORD *)v402 + 13) = 1;
                      *(_OWORD *)(v402 + 56) = 0u;
                      *(_OWORD *)(v402 + 72) = 0u;
                      *((_DWORD *)v402 + 22) = 0;
                      *(_QWORD *)v402 = v399;
                      *((_QWORD *)v402 + 1) = 0;
                      if (v399)
                      {
                        v406 = *(_QWORD *)(v399 + 8);
                        v405 = (_QWORD *)(v399 + 8);
                        v404 = v406;
                        *((_QWORD *)v402 + 1) = v406;
                        if (v406)
                          *(_QWORD *)(v404 + 16) = v402 + 8;
                        *((_QWORD *)v402 + 2) = v405;
                        *v405 = v402;
                      }
                      *((_WORD *)v402 + 25) = 2 * (v401 & 0x3F);
                      v402[92] = 1;
                      v407 = (llvm::Value *)(v402 + 32);
                      llvm::Value::setName(v693, (uint64_t)&v762);
                      (*(void (**)(uint64_t, uint64_t ***, llvm::Value ***, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, v693, &v771, v755, v756);
                      if (!DWORD2(__p))
                      {
LABEL_561:
                        LOWORD(v765) = 257;
                        v408 = (llvm::Value *)sub_1C4774B48((uint64_t)&__p, 36, (uint64_t)v397, (uint64_t)v407, (uint64_t)&v762);
                        v409 = sub_1C5EBFBC0(v408, v696, 0, 0, 0, 0, 0, 0);
                        sub_1C4773D54((uint64_t)&v762, (uint64_t)v409, 0, 0, 0);
                        v410 = *(_QWORD *)(a1 + 400);
                        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v766 + 56) + 40) + 272, *v397);
                        v412 = v411;
                        v413 = (char *)operator new(0x80uLL);
                        v414 = v413;
                        *((_DWORD *)v413 + 21) = *((_DWORD *)v413 + 21) & 0x38000000 | 2;
                        *(_QWORD *)v413 = 0;
                        *((_QWORD *)v413 + 2) = 0;
                        *((_QWORD *)v413 + 1) = 0;
                        *((_QWORD *)v413 + 5) = 0;
                        *((_QWORD *)v413 + 6) = 0;
                        *((_QWORD *)v413 + 4) = 0;
                        v415 = v413 + 32;
                        *((_QWORD *)v413 + 8) = **(_QWORD **)*v397 + 1576;
                        v416 = (llvm::Value *)(v413 + 64);
                        *((_QWORD *)v413 + 3) = v413 + 64;
                        *((_QWORD *)v413 + 7) = v413 + 64;
                        *((_QWORD *)v413 + 9) = 0;
                        v413[80] = 61;
                        v413[81] = 0;
                        *((_WORD *)v413 + 41) = 0;
                        *((_DWORD *)v413 + 21) = 2;
                        *(_OWORD *)(v413 + 88) = 0u;
                        *(_OWORD *)(v413 + 104) = 0u;
                        *((_DWORD *)v413 + 30) = 0;
                        *(_QWORD *)v413 = v397;
                        v419 = v397[1];
                        v418 = v397 + 1;
                        v417 = v419;
                        *((_QWORD *)v413 + 1) = v419;
                        v244 = v699;
                        if (v419)
                          *(_QWORD *)(v417 + 16) = v413 + 8;
                        *((_QWORD *)v413 + 2) = v418;
                        *v418 = v413;
                        if (*((_QWORD *)v413 + 4))
                        {
                          **((_QWORD **)v413 + 6) = *((_QWORD *)v413 + 5);
                          v498 = *((_QWORD *)v413 + 5);
                          if (v498)
                            *(_QWORD *)(v498 + 16) = *((_QWORD *)v413 + 6);
                        }
                        *v415 = v410;
                        if (v410)
                        {
                          v422 = *(_QWORD *)(v410 + 8);
                          v421 = (_QWORD *)(v410 + 8);
                          v420 = v422;
                          *((_QWORD *)v413 + 5) = v422;
                          if (v422)
                            *(_QWORD *)(v420 + 16) = v413 + 40;
                          *((_QWORD *)v413 + 6) = v421;
                          *v421 = v415;
                        }
                        *((_WORD *)v413 + 41) = 2 * (v412 & 0x3F);
                        v413[124] = 1;
                        v773 = 257;
                        (*(void (**)(uint64_t, llvm::Value *, llvm::Value ***, uint64_t, uint64_t))(*(_QWORD *)v768 + 16))(v768, v416, &v771, v766, v767);
                        if (!v763.i32[0])
                        {
LABEL_569:
                          sub_1C58D3508(a1, (uint64_t)v407);
                          sub_1C58D3508(a1, (uint64_t)v416);
                          if (v762 != &v763.u64[1])
                            free(v762);
                          v213 = v689;
                          goto LABEL_572;
                        }
                        v482 = (char *)v762;
                        v483 = (char *)v762 + 16 * v763.u32[0];
                        v484 = (unsigned __int8 **)(v414 + 112);
                        while (2)
                        {
                          v485 = *(_DWORD *)v482;
                          v486 = (unsigned __int8 *)*((_QWORD *)v482 + 1);
                          if (v486)
                          {
                            if (v485)
                              goto LABEL_693;
                            v769[0] = *((_QWORD *)v482 + 1);
                            llvm::MetadataTracking::track((uint64_t)v769, v486, 2);
                            v487 = *v484;
LABEL_697:
                            if (v487)
                              llvm::MetadataTracking::untrack((uint64_t)(v414 + 112), v487);
                            v488 = (unsigned __int8 *)v769[0];
                            *v484 = (unsigned __int8 *)v769[0];
                            if (v488)
                              llvm::MetadataTracking::retrack((uint64_t)v769, v488, (uint64_t)(v414 + 112));
                          }
                          else
                          {
                            v487 = *v484;
                            if (*v484 || (v414[87] & 0x20) != 0)
                            {
                              if (!v485)
                              {
                                v769[0] = 0;
                                goto LABEL_697;
                              }
LABEL_693:
                              llvm::Value::setMetadata(v416, *(_DWORD *)v482, (llvm::MDNode *)v486);
                            }
                          }
                          v482 += 16;
                          v244 = v699;
                          v407 = (llvm::Value *)v693;
                          if (v482 == v483)
                            goto LABEL_569;
                          continue;
                        }
                      }
                      v439 = __p;
                      v440 = __p + 16 * DWORD2(__p);
                      v441 = (unsigned __int8 **)(v403 + 80);
                      while (2)
                      {
                        v442 = *(_DWORD *)v439;
                        v443 = *(unsigned __int8 **)(v439 + 8);
                        if (v443)
                        {
                          if (v442)
                            goto LABEL_627;
                          v769[0] = *(_QWORD *)(v439 + 8);
                          llvm::MetadataTracking::track((uint64_t)v769, v443, 2);
                          v444 = *v441;
LABEL_631:
                          if (v444)
                            llvm::MetadataTracking::untrack((uint64_t)(v403 + 80), v444);
                          v445 = (unsigned __int8 *)v769[0];
                          *v441 = (unsigned __int8 *)v769[0];
                          if (v445)
                            llvm::MetadataTracking::retrack((uint64_t)v769, v445, (uint64_t)(v403 + 80));
                          v407 = (llvm::Value *)v693;
                        }
                        else
                        {
                          v444 = *v441;
                          if (*v441 || (v403[55] & 0x20) != 0)
                          {
                            if (!v442)
                            {
                              v769[0] = 0;
                              goto LABEL_631;
                            }
LABEL_627:
                            llvm::Value::setMetadata(v407, *(_DWORD *)v439, (llvm::MDNode *)v443);
                          }
                        }
                        v439 += 16;
                        if (v439 == v440)
                          goto LABEL_561;
                        continue;
                      }
                    }
                    break;
                  }
                  if ((*(_BYTE *)(v213 + 23) & 0x20) != 0)
                  {
                    v272 = ***(_QWORD ***)v213;
                    *(_QWORD *)&__p = v213;
                    v273 = *(_DWORD *)(v272 + 2496);
                    if (!v273)
                    {
                      v464 = 0;
                      goto LABEL_651;
                    }
                    v274 = *(_QWORD *)(v272 + 2480);
                    v275 = v273 - 1;
                    v276 = v275 & v680;
                    v277 = (_QWORD *)(v274 + 40 * (v275 & v680));
                    v278 = *v277;
                    if (*v277 != v213)
                    {
                      v279 = 0;
                      v280 = 1;
                      while (v278 != -4096)
                      {
                        if (v279)
                          v281 = 0;
                        else
                          v281 = v278 == -8192;
                        if (v281)
                          v279 = v277;
                        v282 = v276 + v280++;
                        v276 = v282 & v275;
                        v277 = (_QWORD *)(v274 + 40 * v276);
                        v278 = *v277;
                        if (*v277 == v213)
                          goto LABEL_442;
                      }
                      if (v279)
                        v464 = v279;
                      else
                        v464 = v277;
LABEL_651:
                      v277 = sub_1C541AB24(v272 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v464);
                      v465 = __p;
                      v277[4] = 0;
                      v277[3] = 0;
                      *v277 = v465;
                      v277[1] = v277 + 3;
                      v277[2] = 0x100000000;
                      v213 = v689;
                    }
LABEL_442:
                    v283 = *((unsigned int *)v277 + 4);
                    if ((_DWORD)v283)
                    {
                      v284 = (uint64_t *)(v277[1] + 8);
                      v285 = 16 * v283;
                      while (*((_DWORD *)v284 - 2))
                      {
                        v284 += 2;
                        v285 -= 16;
                        if (!v285)
                          goto LABEL_456;
                      }
                      v286 = *v284;
                      if (*v284)
                      {
                        v287 = *(_QWORD *)(v286 + 16);
                        v288 = (uint64_t *)(v287 & 0xFFFFFFFFFFFFFFF8);
                        if ((v287 & 4) != 0)
                          v288 = (uint64_t *)*v288;
                        v289 = (unsigned __int8 *)llvm::DILocation::getImpl(v288, *(_DWORD *)(v286 + 28), 0, v286, 0, 0, 0, 1);
                        *(_QWORD *)&__p = v289;
                        if (v289)
                          llvm::MetadataTracking::track((uint64_t)&__p, v289, 2);
                        if (v713)
                          llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
                        v713 = (unsigned __int8 *)__p;
                        if ((_QWORD)__p)
                          llvm::MetadataTracking::retrack((uint64_t)&__p, (unsigned __int8 *)__p, (uint64_t)&v713);
                      }
                    }
                  }
LABEL_456:
                  v246 = llvm::PrepareToSplitEntryBlock(v245, v246);
                  goto LABEL_457;
                }
LABEL_726:
                if ((_DWORD)v750)
                {
                  v500 = (uint64_t *)v749;
                  v501 = 8 * v750;
                  do
                  {
                    v502 = *v500;
                    sub_1C4773D54((uint64_t)&__p, *v500, 0, 0, 0);
                    v503 = *(unsigned __int8 **)(v502 - 32);
                    if (v503[16] != 24)
                    {
                      v504 = *(uint64_t ***)a1;
                      v505 = *(_QWORD *)(a1 + 8);
                      v506 = *(_QWORD *)(a1 + 424);
                      LOWORD(v765) = 257;
                      v769[0] = (uint64_t)sub_1C5098D9C((uint64_t *)&__p, v503, v506, (uint64_t)&v762);
                      v773 = 257;
                      sub_1C4774778((uint64_t *)&__p, v504, v505, v769, 1, (uint64_t)&v771, 0);
                    }
                    if ((_BYTE *)__p != v753)
                      free((void *)__p);
                    ++v500;
                    v501 -= 8;
                  }
                  while (v501);
                }
                if ((_DWORD)v744)
                {
                  v507 = (uint64_t *)v743;
                  v508 = 8 * v744;
                  while (1)
                  {
                    v509 = *v507;
                    if (*v507)
                    {
                      if (*(_BYTE *)(v509 + 16) == 81)
                        break;
                    }
LABEL_767:
                    ++v507;
                    v508 -= 8;
                    if (!v508)
                      goto LABEL_775;
                  }
                  sub_1C4773D54((uint64_t)&__p, *v507, 0, 0, 0);
                  v510 = *(_QWORD *)(v509 - 64);
                  if (*(_BYTE *)(*(_QWORD *)v510 + 8) == 13)
                  {
                    v511 = *(unsigned __int8 **)(v509 - 32);
                    sub_1C4768AD0(*(_QWORD *)(a1 + 608), *(_QWORD *)v510);
                    v514 = v513;
                    if ((_DWORD)v512 == 1)
                    if ((unint64_t)(v514 - 1) <= 0x3F)
                    {
                      v515 = (unint64_t)(v514 - 1) >> 3;
                      if (((0x8Bu >> v515) & 1) != 0)
                      {
                        v516 = *(unsigned __int8 *)(v510 + 16);
                        v517 = v511[16];
                        if (v516 != 16 || v517 != 16)
                        {
                          v519 = v517 == 16;
                          if (v517 == 16)
                            v520 = (unsigned __int8 *)v510;
                          else
                            v520 = v511;
                          v700 = v520;
                          if (v519)
                            v521 = v511;
                          else
                            v521 = (unsigned __int8 *)v510;
                          v522 = v519 || v516 == 16;
                          v523 = *((_QWORD *)&qword_1C8662CB0 + v515);
                          v524 = a1 + 48;
                          if (v522)
                            v524 = a1 + 112;
                          v525 = v524 + 16 * v523;
                          v526 = *(uint64_t ***)v525;
                          v707 = *(_QWORD *)(v525 + 8);
                          v527 = *(_QWORD **)(a1 + 600);
                          v528 = (v514 + 7) & 0xFFFFFFF8;
                          LODWORD(v762) = v528;
                          if (v528 <= 63)
                          {
                            if (v528 == 32)
                            {
                              v529 = (_QWORD *)(*v527 + 1960);
                              goto LABEL_764;
                            }
                            if (v528 == 16)
                            {
                              v529 = (_QWORD *)(*v527 + 1936);
                              goto LABEL_764;
                            }
                            if (v528 != 8)
                              goto LABEL_773;
                            v529 = (_QWORD *)(*v527 + 1912);
                          }
                          else
                          {
                            if (v528 == 64)
                            {
                              v529 = (_QWORD *)(*v527 + 1984);
                              goto LABEL_764;
                            }
                            if (v528 == 128)
                            {
                              v529 = (_QWORD *)(*v527 + 2008);
                              goto LABEL_764;
                            }
LABEL_773:
                            v530 = sub_1C5270984(*v527 + 2168, &v762);
                            v529 = (_QWORD *)*((_QWORD *)v530 + 1);
                            if (!v529)
                            {
                              v531 = v530;
                              v529 = (_QWORD *)sub_1C484358C(*v527 + 2040, 24, 3);
                              v532 = (int)v762;
                              *v529 = v527;
                              v529[2] = 0;
                              v529[1] = (v532 << 8) | 0xDu;
                              *((_QWORD *)v531 + 1) = v529;
                            }
                          }
LABEL_764:
                          LOWORD(v765) = 257;
                          v760 = sub_1C4D8D514((uint64_t *)&__p, v521, (uint64_t)v529, 1, (uint64_t)&v762);
                          v773 = 257;
                          v761 = sub_1C4D8D514((uint64_t *)&__p, v700, (uint64_t)v529, 1, (uint64_t)&v771);
                          v770 = 257;
                          sub_1C4774778((uint64_t *)&__p, v526, v707, (uint64_t *)&v760, 2, (uint64_t)v769, 0);
                        }
                      }
                    }
                  }
                  if ((_BYTE *)__p != v753)
                    free((void *)__p);
                  goto LABEL_767;
                }
LABEL_775:
                if ((_DWORD)v741)
                {
                  v533 = (uint64_t *)v740;
                  v534 = (uint64_t *)((char *)v740 + 8 * v741);
                  *(_QWORD *)v690 = v534;
                  while (1)
                  {
                    v535 = *v533;
                    if (*v533)
                      v536 = *(_BYTE *)(*v533 + 16) == 31;
                    else
                      v536 = 0;
                    if (!v536)
                      goto LABEL_829;
                    sub_1C4773D54((uint64_t)&v762, *v533, 0, 0, 0);
                    *(_QWORD *)&__p = v753;
                    *((_QWORD *)&__p + 1) = 0x1000000000;
                    v537 = *(_DWORD *)(v535 + 20);
                    if ((v537 & 0x40000000) != 0)
                      v538 = *(unsigned __int8 ***)(v535 - 8);
                    else
                      v538 = (unsigned __int8 **)(v535 - 32 * (v537 & 0x7FFFFFF));
                    v697 = *v538;
                    v539 = *(_QWORD *)*v538;
                    v708 = v535;
                    if ((*(_DWORD *)(v539 + 8) & 0xFE) == 0x12)
                      v539 = **(_QWORD **)(v539 + 16);
                    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v539);
                    v541 = *(_QWORD *)(a1 + 440);
                    v542 = (llvm::Type *)v541;
                    if ((*(_DWORD *)(v541 + 8) & 0xFE) == 0x12)
                      v542 = **(llvm::Type ***)(v541 + 16);
                    if (PrimitiveSizeInBits <= llvm::Type::getPrimitiveSizeInBits(v542))
                      break;
                    v543 = v762;
                    if (v762 != &v763.u64[1])
                      goto LABEL_791;
LABEL_829:
                    if (++v533 == v534)
                      goto LABEL_830;
                  }
                  v544 = llvm::ConstantInt::get((llvm::ConstantInt *)v541, ((v537 >> 1) & 0x3FFFFFF) - 1, 0);
                  v545 = DWORD2(__p);
                  if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v753, DWORD2(__p) + 1, 8);
                    v545 = DWORD2(__p);
                  }
                  *(_QWORD *)(__p + 8 * v545) = v544;
                  ++DWORD2(__p);
                  v546 = *(llvm::ConstantInt **)(a1 + 440);
                  v547 = *(llvm::Type **)v697;
                  if ((*(_DWORD *)(*(_QWORD *)v697 + 8) & 0xFE) == 0x12)
                    v547 = (llvm::Type *)**((_QWORD **)v547 + 2);
                  v548 = llvm::Type::getPrimitiveSizeInBits(v547);
                  v549 = llvm::ConstantInt::get(v546, v548, 0);
                  v550 = DWORD2(__p);
                  if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v753, DWORD2(__p) + 1, 8);
                    v550 = DWORD2(__p);
                  }
                  *(_QWORD *)(__p + 8 * v550) = v549;
                  ++DWORD2(__p);
                  v551 = *(llvm::Type **)v697;
                  if ((*(_DWORD *)(*(_QWORD *)v697 + 8) & 0xFE) == 0x12)
                    v551 = (llvm::Type *)**((_QWORD **)v551 + 2);
                  v552 = llvm::Type::getPrimitiveSizeInBits(v551);
                  v553 = *(_QWORD *)(a1 + 440);
                  v554 = (llvm::Type *)v553;
                  if ((*(_DWORD *)(v553 + 8) & 0xFE) == 0x12)
                    v554 = **(llvm::Type ***)(v553 + 16);
                  if (v552 < llvm::Type::getPrimitiveSizeInBits(v554))
                  {
                    v773 = 257;
                    v697 = sub_1C4D8D514((uint64_t *)&v762, v697, v553, 0, (uint64_t)&v771);
                  }
                  v555 = v708;
                  if (((*(_DWORD *)(v708 + 20) >> 1) & 0x3FFFFFF) == 1)
                  {
                    v566 = DWORD2(__p);
                  }
                  else
                  {
                    v556 = 0;
                    v701 = 2 * (((*(_DWORD *)(v708 + 20) >> 1) & 0x3FFFFFFu) - 1);
                    do
                    {
                      v557 = *(_DWORD *)(v555 + 20);
                      if ((v557 & 0x40000000) != 0)
                        v558 = *(_QWORD *)(v555 - 8);
                      else
                        v558 = v555 - 32 * (v557 & 0x7FFFFFF);
                      v559 = *(llvm::UndefValue **)(v558 + 32 * (((_DWORD)v556 + 2) & 0xFFFFFFFE));
                      v560 = *(llvm::Type **)v559;
                      if ((*(_DWORD *)(*(_QWORD *)v559 + 8) & 0xFE) == 0x12)
                        v560 = (llvm::Type *)**((_QWORD **)v560 + 2);
                      v561 = llvm::Type::getPrimitiveSizeInBits(v560);
                      v562 = *(_QWORD *)(a1 + 440);
                      v563 = (llvm::Type *)v562;
                      if ((*(_DWORD *)(v562 + 8) & 0xFE) == 0x12)
                        v563 = **(llvm::Type ***)(v562 + 16);
                      v201 = v561 >= llvm::Type::getPrimitiveSizeInBits(v563);
                      v555 = v708;
                      if (!v201)
                      {
                        if ((v557 & 0x40000000) != 0)
                          v564 = *(_QWORD *)(v708 - 8);
                        else
                          v564 = v708 - 32 * (v557 & 0x7FFFFFF);
                        v559 = sub_1C537D3B8((llvm *)0x27, *(_QWORD *)(v564 + 32 * (((_DWORD)v556 + 2) & 0xFFFFFFFE)), (llvm::Constant *)v562, 0);
                      }
                      v565 = DWORD2(__p);
                      if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v753, DWORD2(__p) + 1, 8);
                        v565 = DWORD2(__p);
                      }
                      *(_QWORD *)(__p + 8 * v565) = v559;
                      v566 = ++DWORD2(__p);
                      v556 += 2;
                    }
                    while (v701 != v556);
                  }
                  v567 = 126 - 2 * __clz((8 * v566 - 16) >> 3);
                  if (v566 == 2)
                    v568 = 0;
                  else
                    v568 = v567;
                  sub_1C58D3620(__p + 16, (uint64_t *)(__p + 8 * v566), v568, 1);
                  llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 440), (llvm::Type *)DWORD2(__p));
                  v570 = v569;
                  v571 = (char *)operator new(0x78uLL);
                  v572 = (unsigned __int8 *)(v571 + 32);
                  *((_DWORD *)v571 + 13) = *((_DWORD *)v571 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v571 = 0;
                  *((_QWORD *)v571 + 1) = 0;
                  *((_QWORD *)v571 + 2) = 0;
                  *((_QWORD *)v571 + 3) = v571 + 32;
                  v573 = *(_QWORD *)(a1 + 520);
                  v574 = llvm::ConstantArray::get(v570, (llvm::Type *)__p, DWORD2(__p));
                  v771 = (llvm::Value **)"__sancov_gen_cov_switch_values";
                  v773 = 259;
                  llvm::GlobalVariable::GlobalVariable((uint64_t)v572, v573, v570, 0, 7, (uint64_t)v574, (uint64_t)&v771, 0, 0, 0, 0);
                  v575 = *(uint64_t ***)(a1 + 384);
                  v576 = *(_QWORD *)(a1 + 392);
                  v760 = v697;
                  v577 = *(_QWORD *)(a1 + 448);
                  v773 = 257;
                  v761 = sub_1C5098D9C((uint64_t *)&v762, v572, v577, (uint64_t)&v771);
                  v770 = 257;
                  sub_1C4774778((uint64_t *)&v762, v575, v576, (uint64_t *)&v760, 2, (uint64_t)v769, 0);
                  if ((_BYTE *)__p != v753)
                    free((void *)__p);
                  v543 = v762;
                  v534 = *(uint64_t **)v690;
                  if (v762 == &v763.u64[1])
                    goto LABEL_829;
LABEL_791:
                  free(v543);
                  goto LABEL_829;
                }
LABEL_830:
                if ((_DWORD)v738)
                {
                  v578 = (uint64_t *)v737;
                  v579 = 8 * v738;
                  while (2)
                  {
                    v580 = *v578;
                    sub_1C4773D54((uint64_t)&__p, *v578, 0, 0, 0);
                    v581 = *(uint64_t **)(v580 - 32);
                    if (*((_BYTE *)v581 + 16) == 16 || *(_BYTE *)(*v581 + 8) != 13)
                      goto LABEL_851;
                    sub_1C4768AD0(*(_QWORD *)(a1 + 608), *v581);
                    v584 = v583;
                    if ((_DWORD)v582 == 1)
                    v585 = (v584 + 7) & 0xFFFFFFFFFFFFFFF8;
                    v586 = v585 == 64 ? 1 : -1;
                    v587 = v585 == 32 ? 0 : v586;
                    if ((v587 & 0x80000000) != 0)
                      goto LABEL_851;
                    v588 = *(_QWORD **)(a1 + 600);
                    LODWORD(v762) = v585;
                    if ((int)v585 <= 63)
                    {
                      if ((_DWORD)v585 == 32)
                      {
                        v589 = (_QWORD *)(*v588 + 1960);
                        goto LABEL_850;
                      }
                      if ((_DWORD)v585 == 16)
                      {
                        v589 = (_QWORD *)(*v588 + 1936);
                        goto LABEL_850;
                      }
                      if ((_DWORD)v585 != 8)
                        goto LABEL_859;
                      v589 = (_QWORD *)(*v588 + 1912);
                    }
                    else
                    {
                      if ((_DWORD)v585 == 64)
                      {
                        v589 = (_QWORD *)(*v588 + 1984);
                        goto LABEL_850;
                      }
                      if ((_DWORD)v585 == 128)
                      {
                        v589 = (_QWORD *)(*v588 + 2008);
                        goto LABEL_850;
                      }
LABEL_859:
                      v593 = sub_1C5270984(*v588 + 2168, &v762);
                      v589 = (_QWORD *)*((_QWORD *)v593 + 1);
                      if (!v589)
                      {
                        v594 = v593;
                        v589 = (_QWORD *)sub_1C484358C(*v588 + 2040, 24, 3);
                        v595 = (int)v762;
                        *v589 = v588;
                        v589[2] = 0;
                        v589[1] = (v595 << 8) | 0xDu;
                        *((_QWORD *)v594 + 1) = v589;
                      }
                    }
LABEL_850:
                    v590 = a1 + 336 + 16 * v587;
                    v591 = *(uint64_t ***)v590;
                    v592 = *(_QWORD *)(v590 + 8);
                    LOWORD(v765) = 257;
                    v769[0] = (uint64_t)sub_1C4D8D514((uint64_t *)&__p, (unsigned __int8 *)v581, (uint64_t)v589, 1, (uint64_t)&v762);
                    v773 = 257;
                    sub_1C4774778((uint64_t *)&__p, v591, v592, v769, 1, (uint64_t)&v771, 0);
LABEL_851:
                    if ((_BYTE *)__p != v753)
                      free((void *)__p);
                    ++v578;
                    v579 -= 8;
                    if (!v579)
                      break;
                    continue;
                  }
                }
                p_p = v704;
                a6 = v705;
                if ((_DWORD)v735)
                {
                  v596 = (uint64_t *)v734;
                  v597 = (uint64_t *)((char *)v734 + 8 * v735);
                  do
                  {
                    v598 = *v596;
                    sub_1C4773D54((uint64_t)&__p, *v596, 0, 0, 0);
                    v599 = *(_DWORD *)(v598 + 20) & 0x7FFFFFF;
                    if (v598 - 32 * v599 + 32 != v598)
                    {
                      v600 = 32 - 32 * v599;
                      do
                      {
                        v601 = *(unsigned __int8 **)(v598 + v600);
                        if (v601[16] != 16 && *(_BYTE *)(*(_QWORD *)v601 + 8) == 13)
                        {
                          v602 = *(uint64_t ***)(a1 + 368);
                          v603 = *(_QWORD *)(a1 + 376);
                          v604 = *(_QWORD *)(a1 + 424);
                          LOWORD(v765) = 257;
                          v769[0] = (uint64_t)sub_1C4D8D514((uint64_t *)&__p, v601, v604, 1, (uint64_t)&v762);
                          v773 = 257;
                          v605 = v603;
                          p_p = v704;
                          a6 = v705;
                          sub_1C4774778((uint64_t *)&__p, v602, v605, v769, 1, (uint64_t)&v771, 0);
                        }
                        v600 += 32;
                      }
                      while (v600);
                    }
                    if ((_BYTE *)__p != v753)
                      free((void *)__p);
                    ++v596;
                  }
                  while (v596 != v597);
                }
                v606 = (uint64_t *)v731;
                v709 = (uint64_t *)v728;
                v702 = v729;
                v762 = *(void **)(a1 + 496);
                v763 = vextq_s8(*(int8x16_t *)(a1 + 464), *(int8x16_t *)(a1 + 464), 8uLL);
                v607 = *(_QWORD *)(a1 + 416);
                v764 = *(_QWORD *)(a1 + 448);
                v765 = v607;
                if ((_DWORD)v732)
                {
                  v608 = 8 * v732;
                  while (1)
                  {
                    v609 = (uint64_t *)*v606;
                    sub_1C4773D54((uint64_t)&__p, *v606, 0, 0, 0);
                    v610 = (unsigned __int8 *)*(v609 - 4);
                    sub_1C4768AD0(*(_QWORD *)(a1 + 608), *v609);
                    v613 = v612;
                    if ((_DWORD)v611 == 1)
                    if ((unint64_t)(v613 - 1) < 0x40)
                    {
                      v614 = (unint64_t)(v613 - 1) >> 3;
                      if (((0x8Bu >> v614) & 1) != 0)
                        break;
                    }
                    if (((v613 + 7) & 0xFFFFFFFFFFFFFFF8) == 0x80)
                    {
                      v615 = 4;
LABEL_881:
                      v616 = a1 + 176 + 16 * v615;
                      v617 = *(uint64_t ***)v616;
                      v618 = *(_QWORD *)(v616 + 8);
                      v619 = (uint64_t)*(&v762 + v615);
                      v773 = 257;
                      v760 = sub_1C5098D9C((uint64_t *)&__p, v610, v619, (uint64_t)&v771);
                      v770 = 257;
                      sub_1C4774778((uint64_t *)&__p, v617, v618, (uint64_t *)&v760, 1, (uint64_t)v769, 0);
                      p_p = v704;
                      a6 = v705;
                    }
                    if ((_BYTE *)__p != v753)
                      free((void *)__p);
                    ++v606;
                    v608 -= 8;
                    if (!v608)
                      goto LABEL_885;
                  }
                  v615 = *((_QWORD *)&qword_1C8662CB0 + v614);
                  goto LABEL_881;
                }
LABEL_885:
                v620 = v709;
                if (!(_DWORD)v702)
                {
LABEL_898:
                  if (v728 != v730)
                    free(v728);
                  if (v731 != v733)
                    free(v731);
                  if (v734 != v736)
                    free(v734);
                  if (v737 != v739)
                    free(v737);
                  if (v740 != v742)
                    free(v740);
                  if (v743 != v745)
                    free(v743);
                  if (v746[0] != v747)
                    free((void *)v746[0]);
                  if (v749 != v751)
                    free(v749);
                  v83 = v694;
                  goto LABEL_100;
                }
                v621 = 8 * v702;
                while (2)
                {
                  v622 = *v620;
                  sub_1C4773D54((uint64_t)&__p, *v620, 0, 0, 0);
                  v623 = *(unsigned __int8 **)(v622 - 32);
                  sub_1C4768AD0(*(_QWORD *)(a1 + 608), **(_QWORD **)(v622 - 64));
                  v626 = v625;
                  if ((_DWORD)v624 == 1)
                  if ((unint64_t)(v626 - 1) < 0x40
                    && (v627 = (unint64_t)(v626 - 1) >> 3, ((0x8Bu >> v627) & 1) != 0))
                  {
                    v628 = *((_QWORD *)&qword_1C8662CB0 + v627);
LABEL_894:
                    v629 = a1 + 256 + 16 * v628;
                    v630 = *(uint64_t ***)v629;
                    v631 = *(_QWORD *)(v629 + 8);
                    v632 = (uint64_t)*(&v762 + v628);
                    v773 = 257;
                    v760 = sub_1C5098D9C((uint64_t *)&__p, v623, v632, (uint64_t)&v771);
                    v770 = 257;
                    sub_1C4774778((uint64_t *)&__p, v630, v631, (uint64_t *)&v760, 1, (uint64_t)v769, 0);
                    p_p = v704;
                    a6 = v705;
                  }
                  else if (((v626 + 7) & 0xFFFFFFFFFFFFFFF8) == 0x80)
                  {
                    v628 = 4;
                    goto LABEL_894;
                  }
                  if ((_BYTE *)__p != v753)
                    free((void *)__p);
                  ++v620;
                  v621 -= 8;
                  if (!v621)
                    goto LABEL_898;
                  continue;
                }
              }
              if ((*((_BYTE *)v84 + 23) & 0x10) != 0)
              {
                v633 = ***v84;
                v634 = *(_QWORD *)(v633 + 152);
                v635 = *(unsigned int *)(v633 + 168);
                if (!(_DWORD)v635)
                  goto LABEL_930;
                LODWORD(v636) = (v635 - 1) & (v62 ^ (v84 >> 9));
                v637 = (uint64_t ****)(v634 + 16 * v636);
                v638 = *v637;
                if (*v637 != v84)
                {
                  v639 = 1;
                  while (v638 != (uint64_t ***)-4096)
                  {
                    v640 = v636 + v639++;
                    v636 = v640 & (v635 - 1);
                    v638 = *(uint64_t ****)(v634 + 16 * v636);
                    if (v638 == v84)
                    {
                      v637 = (uint64_t ****)(v634 + 16 * v636);
                      goto LABEL_931;
                    }
                  }
LABEL_930:
                  v637 = (uint64_t ****)(v634 + 16 * v635);
                }
LABEL_931:
                v649 = v637[1];
                v652 = (size_t)*v649;
                v650 = (unsigned __int8 *)(v649 + 2);
                v651 = v652;
              }
              else
              {
                v651 = 0;
                v650 = (unsigned __int8 *)&byte_1C871356D;
              }
              v653 = llvm::SpecialCaseList::inSectionBlame(v144, "coverage", 8uLL, "fun", 3uLL, v650, v651, v99, 0, 0);
              p_p = v704;
              a6 = v705;
              v83 = v694;
              if (!v653)
                goto LABEL_100;
              goto LABEL_168;
            }
            if (((_DWORD)v84[4] & 0xF) != 1)
              goto LABEL_153;
LABEL_100:
            v83 = *(_QWORD *)(v83 + 8);
            if (v83 == a2 + 24)
              goto LABEL_940;
          }
          v85 = ***v84;
          v86 = *(_QWORD *)(v85 + 152);
          v87 = *(unsigned int *)(v85 + 168);
          if ((_DWORD)v87)
          {
            LODWORD(v88) = (v87 - 1) & (v62 ^ (v84 >> 9));
            v89 = (uint64_t ****)(v86 + 16 * v88);
            v90 = *v89;
            if (*v89 == v84)
            {
LABEL_98:
              v93 = v89[1];
              v96 = *v93;
              v95 = (char *)(v93 + 2);
              v94 = v96;
              goto LABEL_99;
            }
            v91 = 1;
            while (v90 != (uint64_t ***)-4096)
            {
              v92 = v88 + v91++;
              v88 = v92 & (v87 - 1);
              v90 = *(uint64_t ****)(v86 + 16 * v88);
              if (v90 == v84)
              {
                v89 = (uint64_t ****)(v86 + 16 * v88);
                goto LABEL_98;
              }
            }
          }
          v89 = (uint64_t ****)(v86 + 16 * v87);
          goto LABEL_98;
        }
        v80 = *((_DWORD *)v78 + 8);
      }
      *((_DWORD *)v78 + 8) = v80 | 0x4000;
      goto LABEL_84;
    }
    if (v65)
    {
      p_p = llvm::UniqueStringSaver::save(***(_QWORD ***)v62 + 2136, p_p, v65);
      v66 = v63;
    }
    else
    {
LABEL_981:
      v66 = 0;
    }
    v67 = ***(_QWORD ***)v62;
    v762 = v62;
    v68 = *(_DWORD *)(v67 + 2520);
    if (v68)
    {
      v69 = *(_QWORD *)(v67 + 2504);
      v70 = v68 - 1;
      v71 = v70 & ((v62 >> 4) ^ (v62 >> 9));
      v72 = (llvm::UndefValue **)(v69 + 24 * v71);
      v73 = *v72;
      if (*v72 == v62)
      {
LABEL_72:
        v72[1] = (llvm::UndefValue *)p_p;
        v72[2] = v66;
        *((_DWORD *)v62 + 8) = *((_DWORD *)v62 + 8) & 0xFFBFFFFF | ((v66 != 0) << 22);
        v64 = v753[7];
        goto LABEL_73;
      }
      v662 = 0;
      v663 = 1;
      while (v73 != (llvm::UndefValue *)-4096)
      {
        if (v662)
          v664 = 0;
        else
          v664 = v73 == (llvm::UndefValue *)-8192;
        if (v664)
          v662 = v72;
        v665 = v71 + v663++;
        v71 = v665 & v70;
        v72 = (llvm::UndefValue **)(v69 + 24 * v71);
        v73 = *v72;
        if (*v72 == v62)
          goto LABEL_72;
      }
      if (v662)
        v677 = v662;
      else
        v677 = v72;
    }
    else
    {
      v677 = 0;
    }
    v72 = (llvm::UndefValue **)sub_1C53D65B8(v67 + 2504, (uint64_t)&v762, (uint64_t *)&v762, v677);
    v678 = (llvm::UndefValue *)v762;
    v72[1] = 0;
    v72[2] = 0;
    *v72 = v678;
    goto LABEL_72;
  }
  return result;
}

uint64_t sub_1C58D2580(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 824);
  if (v2 != (void *)(a1 + 840))
    free(v2);
  v3 = *(void **)(a1 + 648);
  if (v3 != (void *)(a1 + 664))
    free(v3);
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  if (*(char *)(a1 + 551) < 0)
    operator delete(*(void **)(a1 + 528));
  return a1;
}

void llvm::initializeModuleSanitizerCoverageLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71D0);
  if (v2 != -1)
  {
    v5[0] = sub_1C58D2648;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71D0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C58D2648(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Pass for instrumenting coverage on functions";
  *(_QWORD *)(v2 + 8) = 44;
  *(_QWORD *)(v2 + 16) = "sancov";
  *(_QWORD *)(v2 + 24) = 6;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5238;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58D51F8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm::vfs *sub_1C58D26E4(llvm::vfs *this, __int128 *a2, uint64_t *a3, uint64_t *a4)
{
  __int128 v6;
  int v7;
  void ***v8;
  unint64_t v10;
  uint64_t v13;
  uint64_t *v14;
  void **v15;
  void **v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  void **v22;
  void **v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  void ***v28;
  void **v29[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1EF8F5238;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E817E2A0;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 6) = 0;
  v8 = (void ***)((char *)this + 48);
  *((_DWORD *)this + 11) = v7;
  *(_OWORD *)((char *)this + 28) = v6;
  *((_QWORD *)this + 7) = 0;
  if (a3[1] != *a3)
  {
    llvm::vfs::getRealFileSystem(&v27);
    v13 = v27;
    llvm::SpecialCaseList::createOrDie(a3, v27, (uint64_t **)&v28);
    v14 = (uint64_t *)v28;
    v28 = 0;
    v15 = *v8;
    *v8 = (void **)v14;
    if (v15)
    {
      v29[0] = v15;
      sub_1C5E39EAC(v29);
      MEMORY[0x1CAA32FC0](v15, 0x20C40960023A9);
      v16 = (void **)v28;
      v28 = 0;
      if (v16)
      {
        v29[0] = v16;
        sub_1C5E39EAC(v29);
        MEMORY[0x1CAA32FC0](v16, 0x20C40960023A9);
      }
    }
    v17 = (unsigned int *)(v13 + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (a4[1] != *a4)
  {
    llvm::vfs::getRealFileSystem(&v27);
    v20 = v27;
    llvm::SpecialCaseList::createOrDie(a4, v27, (uint64_t **)&v28);
    v21 = (uint64_t *)v28;
    v28 = 0;
    v22 = (void **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v21;
    if (v22)
    {
      v29[0] = v22;
      sub_1C5E39EAC(v29);
      MEMORY[0x1CAA32FC0](v22, 0x20C40960023A9);
      v23 = (void **)v28;
      v28 = 0;
      if (v23)
      {
        v29[0] = v23;
        sub_1C5E39EAC(v29);
        MEMORY[0x1CAA32FC0](v23, 0x20C40960023A9);
      }
    }
    v24 = (unsigned int *)(v20 + 8);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v27 = qword_1ED830BC0[0];
  v10 = atomic_load(&qword_1EF8F71D0);
  if (v10 != -1)
  {
    v29[0] = (void **)sub_1C58D2648;
    v29[1] = (void **)&v27;
    v28 = v29;
    std::__call_once(&qword_1EF8F71D0, &v28, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t sub_1C58D2958(uint64_t result, int a2, const void **a3)
{
  uint64_t v3;
  char v4;
  const void *v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  BOOL v9;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  size_t v14;
  BOOL v15;

  v3 = result;
  if (a2 != 1)
    return std::operator+<char>();
  v4 = *((_BYTE *)a3 + 23);
  if (v4 >= 0)
    v5 = (const void *)(v4 & 0x7F);
  else
    v5 = a3[1];
  if (v5 == (const void *)10)
  {
    if (v4 >= 0)
      v12 = a3;
    else
      v12 = *a3;
    if (v4 >= 0)
      v13 = *((unsigned __int8 *)a3 + 23);
    else
      v13 = (unint64_t)a3[1];
    if (v13 >= 0xA)
      v14 = 10;
    else
      v14 = v13;
    result = memcmp(v12, "sancov_pcs", v14);
    if ((_DWORD)result)
      v15 = 0;
    else
      v15 = v13 == 10;
    if (v15)
    {
      *(_BYTE *)(v3 + 23) = 8;
      v11 = 0x4D2450564F43532ELL;
      goto LABEL_43;
    }
LABEL_40:
    *(_BYTE *)(v3 + 23) = 8;
    v11 = 0x4D4724564F43532ELL;
    goto LABEL_43;
  }
  if (v5 != (const void *)12)
    goto LABEL_40;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (unint64_t)a3[1];
  if (v4 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0xC)
    v8 = 12;
  else
    v8 = v6;
  result = memcmp(v7, "sancov_cntrs", v8);
  if ((_DWORD)result)
    v9 = 0;
  else
    v9 = v6 == 12;
  if (v9)
  {
    *(_BYTE *)(v3 + 23) = 8;
    v11 = 0x4D4324564F43532ELL;
    goto LABEL_43;
  }
  result = memcmp(v7, "sancov_BOOLs", v8);
  if ((_DWORD)result || v6 != 12)
    goto LABEL_40;
  *(_BYTE *)(v3 + 23) = 8;
  v11 = 0x4D4224564F43532ELL;
LABEL_43:
  *(_QWORD *)v3 = v11;
  *(_BYTE *)(v3 + 8) = 0;
  return result;
}

char *sub_1C58D2AEC(uint64_t a1, uint64_t *a2, char *a3, char *a4, llvm::PointerType *a5, const char *a6)
{
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::UndefValue *v15;
  size_t v16;
  char *v17;
  unsigned int v18;
  llvm::ConstantExpr *v19;
  int v20;
  size_t v22;
  size_t *inserted;
  char *v24;
  uint64_t v25[2];
  uint64_t v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v11 = sub_1C58D2CA8(a1, a2, a6, a5);
  v13 = v12;
  v14 = llvm::PointerType::get(a5, 0);
  if (a3)
  {
    v15 = (llvm::UndefValue *)strlen(a3);
    if (a4)
      goto LABEL_3;
LABEL_5:
    v16 = 0;
    goto LABEL_6;
  }
  v15 = 0;
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v16 = strlen(a4);
LABEL_6:
  v26[0] = v14;
  v26[1] = v14;
  v25[0] = (uint64_t)v11;
  v25[1] = v13;
  llvm::createSanitizerCtorAndInitFunctions((llvm::Module *)a2, (llvm::UndefValue *)a3, v15, (unsigned __int8 *)a4, v16, v26, 2, &v24, v25, 2, 0, 0);
  v17 = v24;
  v18 = *(_DWORD *)(a1 + 596);
  if (v18 > 9 || (v19 = 0, ((1 << v18) & 0x320) == 0))
  {
    if (a3)
      v22 = strlen(a3);
    else
      v22 = 0;
    inserted = llvm::Module::getOrInsertComdat((uint64_t)a2, (unsigned __int8 *)a3, v22);
    llvm::GlobalObject::setComdat((llvm::GlobalObject *)v17, (llvm::Comdat *)inserted);
    v19 = (llvm::ConstantExpr *)v17;
  }
  sub_1C5F50894("llvm.global_ctors", (uint64_t)a2, (uint64_t)v17, 2u, v19);
  if (*(_DWORD *)(a1 + 596) == 1)
  {
    v20 = *((_DWORD *)v17 + 8);
    *((_DWORD *)v17 + 8) = v20 & 0xFFFFFFF0 | 5;
    if ((v20 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v17) & 1) == 0)
      *((_DWORD *)v17 + 8) |= 0x4000u;
  }
  return v17;
}

unsigned __int8 *sub_1C58D2CA8(uint64_t a1, uint64_t *a2, const char *a3, llvm::PointerType *a4)
{
  int v7;
  char *v8;
  unsigned __int8 *v9;
  char v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  llvm::GlobalValue *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  llvm::GetElementPtrInst *v30;
  llvm::Value **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  void *__p[2];
  char v37;
  __int16 v38;
  void **__dst;
  size_t v40;
  unint64_t v41;
  void *v42[2];
  _BYTE v43[16];
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _QWORD v57[3];

  v57[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a1 + 596);
  v8 = (char *)operator new(0x78uLL);
  *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
  v9 = (unsigned __int8 *)(v8 + 32);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 32;
  if (v7 == 1)
    v10 = 0;
  else
    v10 = 9;
  v11 = strlen(a3);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_40:
    abort();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v40 = v12;
    v41 = v15 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v41) = v11;
  p_dst = (void **)&__dst;
  if (v11)
LABEL_11:
    memcpy(p_dst, a3, v12);
  *((_BYTE *)p_dst + v12) = 0;
  std::operator+<char>();
  v44 = 260;
  v42[0] = __p;
  llvm::GlobalVariable::GlobalVariable((uint64_t)v9, (uint64_t)a2, a4, 0, v10, 0, (uint64_t)v42, 0, 0, 0, 0);
  if (v37 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41) < 0)
    operator delete(__dst);
  v16 = *((_DWORD *)v8 + 16);
  v17 = v16 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v8 + 16) = v17;
  if ((v16 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v9) & 1) != 0)
      goto LABEL_20;
    v17 = *((_DWORD *)v8 + 16);
  }
  *((_DWORD *)v8 + 16) = v17 | 0x4000;
LABEL_20:
  v18 = operator new(0x78uLL);
  v18[13] = v18[13] & 0x38000000 | 1;
  v19 = (llvm::GlobalValue *)(v18 + 8);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = v18 + 8;
  v20 = strlen(a3);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v40 = v21;
    v41 = v24 | 0x8000000000000000;
    __dst = v22;
    goto LABEL_27;
  }
  HIBYTE(v41) = v20;
  v22 = (void **)&__dst;
  if (v20)
LABEL_27:
    memcpy(v22, a3, v21);
  *((_BYTE *)v22 + v21) = 0;
  std::operator+<char>();
  v44 = 260;
  v42[0] = __p;
  llvm::GlobalVariable::GlobalVariable((uint64_t)v19, (uint64_t)a2, a4, 0, v10, 0, (uint64_t)v42, 0, 0, 0, 0);
  if (v37 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41) < 0)
    operator delete(__dst);
  v25 = v18[16];
  v26 = v25 & 0xFFFFFFCF | 0x10;
  v18[16] = v26;
  if ((v25 & 0xFu) - 7 < 2)
    goto LABEL_35;
  if ((llvm::GlobalValue::hasExternalWeakLinkage(v19) & 1) == 0)
  {
    v26 = v18[16];
LABEL_35:
    v18[16] = v26 | 0x4000;
  }
  v27 = *a2;
  v42[0] = v43;
  v42[1] = (void *)0x200000000;
  v47 = v27;
  v48 = &v56;
  v49 = v57;
  v50 = 0;
  v51 = 0;
  v52 = 512;
  v53 = 7;
  v45 = 0;
  v46 = 0;
  v54 = 0;
  v55 = 0;
  v56 = &unk_1E8167888;
  v57[0] = &unk_1E8167A08;
  if (*(_DWORD *)(a1 + 596) == 1)
  {
    v28 = *(_QWORD *)(a1 + 496);
    v38 = 257;
    v29 = (uint64_t *)sub_1C5098D9C((uint64_t *)v42, v9, v28, (uint64_t)__p);
    v30 = *(llvm::GetElementPtrInst **)(a1 + 488);
    v31 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 424), 8, 0);
    v38 = 257;
    v32 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)v42, v30, v29, (uint64_t)v31, (uint64_t)__p);
    v33 = llvm::PointerType::get(a4, 0);
    v38 = 257;
    v9 = sub_1C5098D9C((uint64_t *)v42, v32, v33, (uint64_t)__p);
    if (v42[0] != v43)
      free(v42[0]);
  }
  return v9;
}

llvm::GlobalObject *sub_1C58D30FC(uint64_t a1, llvm::Type *a2, uint64_t a3, llvm::ArrayType *this, const char *a5)
{
  llvm::Constant *v9;
  llvm::Constant *v10;
  _DWORD *v11;
  llvm::GlobalObject *v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::Value **NullValue;
  llvm::Triple *v16;
  int v17;
  llvm::GlobalValue *Section;
  uint64_t v19;
  llvm::Module *v20;
  size_t *FunctionComdat;
  size_t v22;
  const void *v23;
  const void **v24;
  uint64_t v25;
  uint64_t v26;
  llvm::GlobalObject *v27;
  char v28;
  size_t v29;
  llvm::GlobalObject *v30;
  llvm::GlobalObject *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  llvm::GlobalObject **v37;
  llvm::GlobalObject *v38;
  uint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  llvm::GlobalObject **v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  llvm::GlobalObject **v50;
  uint64_t v51;
  BOOL v52;
  const void *__dst[2];
  unint64_t v54;
  void *__p[2];
  char v56;
  __int16 v57;
  _DWORD *v58;

  llvm::ArrayType::get(this, a2);
  v10 = v9;
  v11 = operator new(0x78uLL);
  v12 = (llvm::GlobalObject *)(v11 + 8);
  v11[13] = v11[13] & 0x38000000 | 1;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 8;
  v13 = *(_QWORD *)(a1 + 520);
  NullValue = llvm::Constant::getNullValue(v10, v14);
  __p[0] = "__sancov_gen_";
  v57 = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v11 + 8), v13, v10, 0, 8, (uint64_t)NullValue, (uint64_t)__p, 0, 0, 0, 0);
  v17 = *(_DWORD *)(a1 + 596);
  if ((v17 - 8) >= 2 && v17 != 5)
  {
    if (v17 == 3
      || (*(_BYTE *)(a3 + 16) != 3
       || (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)a3), v19 != 12)
       || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
         ? (v52 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
         : (v52 = 0),
           !v52))
      && ((*(_DWORD *)(a3 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(a3 + 32) & 0xF)) & 0x614) == 0)
      && ((v20 = *(llvm::Module **)(a3 + 40)) == 0
       || !llvm::Module::getSemanticInterposition(v20)
       || (*(_BYTE *)(a3 + 33) & 0x40) != 0))
    {
      FunctionComdat = llvm::getOrCreateFunctionComdat((llvm *)a3, (llvm::Function *)(a1 + 552), v16);
      if (FunctionComdat)
        llvm::GlobalObject::setComdat(v12, (llvm::Comdat *)FunctionComdat);
    }
  }
  v22 = strlen(a5);
  if (v22 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v23 = (const void *)v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = (const void **)operator new(v25 + 1);
    __dst[1] = v23;
    v54 = v26 | 0x8000000000000000;
    __dst[0] = v24;
    goto LABEL_18;
  }
  HIBYTE(v54) = v22;
  v24 = __dst;
  if (v22)
LABEL_18:
    memcpy(v24, a5, (size_t)v23);
  *((_BYTE *)v23 + (_QWORD)v24) = 0;
  v27 = (llvm::GlobalObject *)__p;
  sub_1C58D2958((uint64_t)__p, *(_DWORD *)(a1 + 596), __dst);
  v28 = v56;
  if (v56 >= 0)
  {
    v29 = v56 & 0x7F;
  }
  else
  {
    v27 = (llvm::GlobalObject *)__p[0];
    v29 = (size_t)__p[1];
  }
  if ((*((_BYTE *)v11 + 66) & 0x40) != 0 || v29)
  {
    if (v29)
    {
      v27 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***(_QWORD ***)v12 + 2136, v27, v29);
      v31 = v30;
    }
    else
    {
      v31 = 0;
    }
    v32 = ***(_QWORD ***)v12;
    v58 = v11 + 8;
    v33 = *(_DWORD *)(v32 + 2520);
    if (v33)
    {
      v34 = *(_QWORD *)(v32 + 2504);
      v35 = v33 - 1;
      v36 = v35 & ((v12 >> 4) ^ (v12 >> 9));
      v37 = (llvm::GlobalObject **)(v34 + 24 * v36);
      v38 = *v37;
      if (*v37 == v12)
      {
LABEL_28:
        v37[1] = v27;
        v37[2] = v31;
        v11[16] = v11[16] & 0xFFBFFFFF | ((v31 != 0) << 22);
        v28 = v56;
        goto LABEL_29;
      }
      v46 = 0;
      v47 = 1;
      while (v38 != (llvm::GlobalObject *)-4096)
      {
        if (v46)
          v48 = 0;
        else
          v48 = v38 == (llvm::GlobalObject *)-8192;
        if (v48)
          v46 = v37;
        v49 = v36 + v47++;
        v36 = v49 & v35;
        v37 = (llvm::GlobalObject **)(v34 + 24 * v36);
        v38 = *v37;
        if (*v37 == v12)
          goto LABEL_28;
      }
      if (v46)
        v50 = v46;
      else
        v50 = v37;
    }
    else
    {
      v50 = 0;
    }
    v37 = (llvm::GlobalObject **)sub_1C53D65B8(v32 + 2504, (uint64_t)&v58, (uint64_t *)&v58, v50);
    v51 = (uint64_t)v58;
    v37[1] = 0;
    v37[2] = 0;
    *v37 = (llvm::GlobalObject *)v51;
    goto LABEL_28;
  }
LABEL_29:
  if (v28 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)__dst[0]);
  sub_1C4768AD0(*(_QWORD *)(a1 + 608), (uint64_t)this);
  v11[16] = (((4128768 - (__clz((unint64_t)(v39 + 7) >> 3) << 16)) & 0xFF0000) + 0x10000) | v11[16] & 0xFFC0FFFF;
  if (*((_QWORD *)v11 + 10))
  {
    v40 = (_QWORD *)(a1 + 824);
    v41 = (_DWORD *)(a1 + 832);
    v42 = *(unsigned int *)(a1 + 832);
    if (v42 >= *(_DWORD *)(a1 + 836))
    {
      v43 = v42 + 1;
      v44 = a1 + 840;
LABEL_55:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v40, v44, v43, 8);
      LODWORD(v42) = *v41;
    }
  }
  else
  {
    v40 = (_QWORD *)(a1 + 648);
    v41 = (_DWORD *)(a1 + 656);
    v42 = *(unsigned int *)(a1 + 656);
    if (v42 >= *(_DWORD *)(a1 + 660))
    {
      v43 = v42 + 1;
      v44 = a1 + 664;
      goto LABEL_55;
    }
  }
  *(_QWORD *)(*v40 + 8 * v42) = v12;
  ++*v41;
  return v12;
}

void sub_1C58D3508(uint64_t a1, uint64_t a2)
{
  int MDKindID;
  unsigned __int8 *Impl;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), "nosanitize", 0xAuLL);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 600), 0, 0, 0, 1);
  if (Impl)
  {
    if (MDKindID)
      goto LABEL_8;
    v8 = Impl;
    llvm::MetadataTracking::track((uint64_t)&v8, Impl, 2);
  }
  else
  {
    if (!*(_QWORD *)(a2 + 48) && (*(_BYTE *)(a2 + 23) & 0x20) == 0)
      return;
    if (MDKindID)
    {
LABEL_8:
      llvm::Value::setMetadata((llvm::Value *)a2, MDKindID, (llvm::MDNode *)Impl);
      return;
    }
    v8 = 0;
  }
  v6 = (unsigned __int8 **)(a2 + 48);
  if (&v8 == v6)
  {
    if (v8)
      llvm::MetadataTracking::untrack((uint64_t)&v8, v8);
  }
  else
  {
    if (*v6)
      llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
    v7 = v8;
    *v6 = v8;
    if (v7)
      llvm::MetadataTracking::retrack((uint64_t)&v8, v7, (uint64_t)v6);
  }
}

uint64_t sub_1C58D3620(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::APInt *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  llvm::APInt *v19;
  unint64_t v20;
  uint64_t v21;
  llvm::APInt *v22;
  uint64_t v23;
  unint64_t *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::APInt *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  llvm::APInt *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::APInt *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  llvm::APInt *v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  BOOL v58;
  unint64_t *v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  llvm::APInt *v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  llvm::APInt *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  llvm::APInt *v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unsigned int v96;
  unint64_t v97;
  llvm::APInt **v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unsigned int v110;
  unint64_t v111;
  uint64_t *v112;
  BOOL v113;
  char v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t **v119;
  unsigned int v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t *v133;
  int64_t v134;
  int64_t v135;
  uint64_t *v136;
  int64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unsigned int v143;
  unint64_t v144;
  unint64_t *v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  llvm::APInt *v155;
  unsigned int v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unsigned int v163;
  unint64_t v164;
  unint64_t *v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t *v168;
  unsigned int v169;
  unint64_t v170;
  llvm::APInt *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unsigned int v182;
  unint64_t v183;
  llvm::APInt *v184;
  unsigned int v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unsigned int v194;
  unint64_t v195;
  llvm::APInt *v196;
  unsigned int v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t *v200;
  unint64_t *v201;
  unsigned int v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  unint64_t **v210;
  unsigned int v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unsigned int v215;
  unint64_t v216;
  uint64_t *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unsigned int v221;
  unint64_t v222;
  unint64_t *v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t *v226;
  unsigned int v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  llvm::APInt *v231;
  unsigned int v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t *v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  int64_t v251;
  llvm::APInt *v253;
  llvm::APInt *v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v260;

  v260 = (uint64_t *)result;
LABEL_2:
  v5 = a2;
  v6 = v260;
  v250 = a2 - 1;
  while (2)
  {
    v7 = (char *)v5 - (char *)v6;
    v8 = v5 - v6;
    v260 = v6;
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v99 = *(a2 - 1);
        v100 = *v6;
        v101 = (unint64_t *)(v99 + 24);
        v102 = *(_DWORD *)(v99 + 32);
        if (v102 < 0x41)
          goto LABEL_351;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v99 + 24));
        if (v102 - result <= 0x40)
        {
          v101 = (unint64_t *)*v101;
LABEL_351:
          v103 = *v101;
        }
        else
        {
          v103 = -1;
        }
        v223 = (unint64_t *)(v100 + 24);
        v224 = *(_DWORD *)(v100 + 32);
        if (v224 < 0x41)
          goto LABEL_361;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v100 + 24));
        if (v224 - result <= 0x40)
        {
          v223 = (unint64_t *)*v223;
LABEL_361:
          v225 = *v223;
        }
        else
        {
          v225 = -1;
        }
        if (v103 < v225)
        {
          *v6 = v99;
          *(a2 - 1) = v100;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C58D4880(v6, v6 + 1, v250);
      case 4:
        return (uint64_t)sub_1C58D502C(v6, v6 + 1, v6 + 2, v250);
      case 5:
        v104 = v6 + 1;
        v105 = v6 + 2;
        v106 = v6 + 3;
        result = (uint64_t)sub_1C58D502C(v6, v6 + 1, v6 + 2, v6 + 3);
        v107 = *(a2 - 1);
        v108 = v6[3];
        v109 = (unint64_t *)(v107 + 24);
        v110 = *(_DWORD *)(v107 + 32);
        if (v110 < 0x41)
          goto LABEL_356;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v107 + 24));
        if (v110 - result <= 0x40)
        {
          v109 = (unint64_t *)*v109;
LABEL_356:
          v111 = *v109;
        }
        else
        {
          v111 = -1;
        }
        v226 = (unint64_t *)(v108 + 24);
        v227 = *(_DWORD *)(v108 + 32);
        if (v227 < 0x41)
          goto LABEL_365;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v108 + 24));
        if (v227 - result <= 0x40)
        {
          v226 = (unint64_t *)*v226;
LABEL_365:
          v228 = *v226;
        }
        else
        {
          v228 = -1;
        }
        if (v111 >= v228)
          return result;
        *v106 = v107;
        *(a2 - 1) = v108;
        v229 = *v106;
        v230 = *v105;
        v231 = (llvm::APInt *)(*v106 + 24);
        v232 = *(_DWORD *)(*v106 + 32);
        v233 = (unint64_t *)v231;
        if (v232 < 0x41)
          goto LABEL_371;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v106 + 24));
        if (v232 - result <= 0x40)
        {
          v233 = *(unint64_t **)v231;
LABEL_371:
          v234 = *v233;
        }
        else
        {
          v234 = -1;
        }
        v235 = (unint64_t *)(v230 + 24);
        v236 = *(_DWORD *)(v230 + 32);
        if (v236 < 0x41)
          goto LABEL_376;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v230 + 24));
        if (v236 - result <= 0x40)
        {
          v235 = (unint64_t *)*v235;
LABEL_376:
          v237 = *v235;
        }
        else
        {
          v237 = -1;
        }
        if (v234 >= v237)
          return result;
        *v105 = v229;
        *v106 = v230;
        v238 = (unint64_t *)v231;
        v239 = *v104;
        if (v232 < 0x41)
          goto LABEL_382;
        result = llvm::APInt::countLeadingZerosSlowCase(v231);
        if (v232 - result <= 0x40)
        {
          v238 = *(unint64_t **)v231;
LABEL_382:
          v240 = *v238;
        }
        else
        {
          v240 = -1;
        }
        v241 = (unint64_t *)(v239 + 24);
        v242 = *(_DWORD *)(v239 + 32);
        if (v242 < 0x41)
          goto LABEL_387;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v239 + 24));
        if (v242 - result <= 0x40)
        {
          v241 = (unint64_t *)*v241;
LABEL_387:
          v243 = *v241;
        }
        else
        {
          v243 = -1;
        }
        if (v240 >= v243)
          return result;
        v260[1] = v229;
        v260[2] = v239;
        v244 = *v260;
        if (v232 < 0x41)
          goto LABEL_393;
        result = llvm::APInt::countLeadingZerosSlowCase(v231);
        if (v232 - result <= 0x40)
        {
          v231 = *(llvm::APInt **)v231;
LABEL_393:
          v245 = *(_QWORD *)v231;
        }
        else
        {
          v245 = -1;
        }
        v246 = (unint64_t *)(v244 + 24);
        v247 = *(_DWORD *)(v244 + 32);
        if (v247 < 0x41)
          goto LABEL_398;
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v244 + 24));
        if (v247 - result <= 0x40)
        {
          v246 = (unint64_t *)*v246;
LABEL_398:
          v248 = *v246;
        }
        else
        {
          v248 = -1;
        }
        if (v245 < v248)
        {
          *v260 = v229;
          v260[1] = v244;
        }
        return result;
      default:
        v9 = v6;
        if (v7 <= 191)
        {
          v112 = v6 + 1;
          v113 = v6 == v5 || v112 == v5;
          v114 = v113;
          if ((a4 & 1) != 0)
          {
            if ((v114 & 1) != 0)
              return result;
            v115 = 8;
            v116 = v6;
            while (1)
            {
              v118 = *v116;
              v117 = v116[1];
              v116 = v112;
              v119 = (unint64_t **)(v117 + 24);
              v120 = *(_DWORD *)(v117 + 32);
              v121 = (unint64_t *)(v117 + 24);
              if (v120 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v117 + 24));
                if (v120 - result > 0x40)
                {
                  v122 = -1;
                  goto LABEL_194;
                }
                v121 = *v119;
              }
              v122 = *v121;
LABEL_194:
              v123 = (unint64_t *)(v118 + 24);
              v124 = *(_DWORD *)(v118 + 32);
              if (v124 < 0x41)
                goto LABEL_198;
              result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v118 + 24));
              if (v124 - result <= 0x40)
              {
                v123 = (unint64_t *)*v123;
LABEL_198:
                v125 = *v123;
                goto LABEL_199;
              }
              v125 = -1;
LABEL_199:
              if (v122 >= v125)
                goto LABEL_216;
              v126 = v115;
              while (1)
              {
                *(uint64_t *)((char *)v260 + v126) = v118;
                v127 = v126 - 8;
                if (v126 == 8)
                  break;
                v118 = *(uint64_t *)((char *)v260 + v126 - 16);
                v128 = (unint64_t *)(v117 + 24);
                if (v120 >= 0x41)
                {
                  result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v117 + 24));
                  if (v120 - result > 0x40)
                  {
                    v129 = -1;
                    goto LABEL_207;
                  }
                  v128 = *v119;
                }
                v129 = *v128;
LABEL_207:
                v130 = (unint64_t *)(v118 + 24);
                v131 = *(_DWORD *)(v118 + 32);
                if (v131 < 0x41)
                  goto LABEL_211;
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v118 + 24));
                if (v131 - result <= 0x40)
                {
                  v130 = (unint64_t *)*v130;
LABEL_211:
                  v132 = *v130;
                  goto LABEL_212;
                }
                v132 = -1;
LABEL_212:
                v126 = v127;
                if (v129 >= v132)
                {
                  v133 = (uint64_t *)((char *)v260 + v127);
                  goto LABEL_215;
                }
              }
              v133 = v260;
LABEL_215:
              *v133 = v117;
LABEL_216:
              v112 = v116 + 1;
              v115 += 8;
              if (v116 + 1 == a2)
                return result;
            }
          }
          if ((v114 & 1) != 0)
            return result;
          while (1)
          {
            v208 = *v260;
            v207 = v260[1];
            v209 = v112;
            v210 = (unint64_t **)(v207 + 24);
            v211 = *(_DWORD *)(v207 + 32);
            v212 = (unint64_t *)(v207 + 24);
            if (v211 >= 0x41)
            {
              result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v207 + 24));
              if (v211 - result > 0x40)
              {
                v213 = -1;
                goto LABEL_329;
              }
              v212 = *v210;
            }
            v213 = *v212;
LABEL_329:
            v214 = (unint64_t *)(v208 + 24);
            v215 = *(_DWORD *)(v208 + 32);
            if (v215 >= 0x41)
            {
              result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v208 + 24));
              if (v215 - result > 0x40)
              {
                v216 = -1;
                goto LABEL_334;
              }
              v214 = (unint64_t *)*v214;
            }
            v216 = *v214;
LABEL_334:
            if (v213 < v216)
            {
              v217 = v209;
              while (1)
              {
                *v217 = v208;
                v208 = *(v217 - 2);
                v218 = (unint64_t *)(v207 + 24);
                if (v211 >= 0x41)
                {
                  result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v207 + 24));
                  if (v211 - result > 0x40)
                  {
                    v219 = -1;
                    goto LABEL_341;
                  }
                  v218 = *v210;
                }
                v219 = *v218;
LABEL_341:
                v220 = (unint64_t *)(v208 + 24);
                v221 = *(_DWORD *)(v208 + 32);
                if (v221 < 0x41)
                  goto LABEL_345;
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v208 + 24));
                if (v221 - result <= 0x40)
                {
                  v220 = (unint64_t *)*v220;
LABEL_345:
                  v222 = *v220;
                  goto LABEL_346;
                }
                v222 = -1;
LABEL_346:
                --v217;
                if (v219 >= v222)
                {
                  *v217 = v207;
                  break;
                }
              }
            }
            v260 = v209;
            v112 = v209 + 1;
            if (v209 + 1 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v6 == v5)
            return result;
          v134 = (unint64_t)(v8 - 2) >> 1;
          v135 = v134;
          v136 = v6;
          while (1)
          {
            v137 = v135;
            if (v134 < v135)
              goto LABEL_275;
            v251 = v135;
            v138 = (2 * v135) | 1;
            v139 = &v136[v138];
            v140 = 2 * v135 + 2;
            if (v140 < v8)
              break;
LABEL_234:
            v148 = &v136[v251];
            v149 = *v139;
            v150 = *v148;
            v151 = (unint64_t *)(*v139 + 24);
            v152 = *(_DWORD *)(*v139 + 32);
            if (v152 >= 0x41)
            {
              v153 = *v148;
              result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v139 + 24));
              if (v152 - result > 0x40)
              {
                v154 = -1;
                v134 = (unint64_t)(v8 - 2) >> 1;
                v150 = v153;
                goto LABEL_239;
              }
              v151 = (unint64_t *)*v151;
              v150 = v153;
            }
            v154 = *v151;
            v134 = (unint64_t)(v8 - 2) >> 1;
LABEL_239:
            v155 = (llvm::APInt *)(v150 + 24);
            v249 = v150;
            v156 = *(_DWORD *)(v150 + 32);
            v157 = (unint64_t *)(v150 + 24);
            v256 = v156;
            if (v156 >= 0x41)
            {
              result = llvm::APInt::countLeadingZerosSlowCase(v155);
              if (v256 - result > 0x40)
              {
                v158 = -1;
                goto LABEL_244;
              }
              v157 = *(unint64_t **)v155;
            }
            v158 = *v157;
LABEL_244:
            v137 = v251;
            if (v154 < v158)
              goto LABEL_275;
            v254 = v155;
            do
            {
              v159 = v139;
              *v148 = v149;
              if (v134 < v138)
                break;
              v160 = (2 * v138) | 1;
              v139 = &v136[v160];
              v138 = 2 * v138 + 2;
              if (v138 >= v8)
              {
                v138 = v160;
                goto LABEL_263;
              }
              v161 = v139[1];
              v162 = (unint64_t *)(*v139 + 24);
              v163 = *(_DWORD *)(*v139 + 32);
              if (v163 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v139 + 24));
                if (v163 - result > 0x40)
                {
                  v164 = -1;
                  goto LABEL_254;
                }
                v162 = (unint64_t *)*v162;
              }
              v164 = *v162;
LABEL_254:
              v165 = (unint64_t *)(v161 + 24);
              v166 = *(_DWORD *)(v161 + 32);
              if (v166 < 0x41)
                goto LABEL_258;
              result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v161 + 24));
              if (v166 - result <= 0x40)
              {
                v165 = (unint64_t *)*v165;
LABEL_258:
                v134 = (unint64_t)(v8 - 2) >> 1;
                v167 = *v165;
                goto LABEL_259;
              }
              v167 = -1;
              v134 = (unint64_t)(v8 - 2) >> 1;
LABEL_259:
              if (v164 >= v167)
                v138 = v160;
              else
                ++v139;
              v136 = v260;
LABEL_263:
              v149 = *v139;
              v168 = (unint64_t *)(*v139 + 24);
              v169 = *(_DWORD *)(*v139 + 32);
              if (v169 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v139 + 24));
                if (v169 - result > 0x40)
                {
                  v170 = -1;
                  v171 = v254;
                  goto LABEL_268;
                }
                v168 = (unint64_t *)*v168;
              }
              v171 = v254;
              v170 = *v168;
LABEL_268:
              v172 = (unint64_t *)v171;
              if (v256 < 0x41)
                goto LABEL_272;
              result = llvm::APInt::countLeadingZerosSlowCase(v171);
              if (v256 - result <= 0x40)
              {
                v172 = *(unint64_t **)v171;
LABEL_272:
                v173 = *v172;
                goto LABEL_273;
              }
              v173 = -1;
LABEL_273:
              v148 = v159;
            }
            while (v170 >= v173);
            v137 = v251;
            *v159 = v249;
LABEL_275:
            v135 = v137 - 1;
            if (!v137)
            {
LABEL_276:
              v174 = 0;
              v175 = v260;
              v257 = *v260;
              v176 = v260;
              while (1)
              {
                v177 = (uint64_t)&v176[v174 + 1];
                v178 = (2 * v174) | 1;
                v179 = 2 * v174 + 2;
                if (v179 < v8)
                  break;
LABEL_291:
                *v176 = *(_QWORD *)v177;
                v176 = (_QWORD *)v177;
                v174 = v178;
                if (v178 > (uint64_t)((unint64_t)(v8 - 2) >> 1))
                {
                  v187 = a2 - 1;
                  v113 = v177 == (_QWORD)--a2;
                  if (v113)
                  {
                    *(_QWORD *)v177 = v257;
                  }
                  else
                  {
                    *(_QWORD *)v177 = *v187;
                    *v187 = v257;
                    v188 = v177 - (_QWORD)v175 + 8;
                    if (v188 >= 9)
                    {
                      v189 = (((unint64_t)v188 >> 3) - 2) >> 1;
                      v190 = &v260[v189];
                      v191 = *v190;
                      v192 = *(_QWORD *)v177;
                      v193 = (unint64_t *)(*v190 + 24);
                      v194 = *(_DWORD *)(*v190 + 32);
                      if (v194 >= 0x41)
                      {
                        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v190 + 24));
                        if (v194 - result > 0x40)
                        {
                          v195 = -1;
                          goto LABEL_300;
                        }
                        v193 = (unint64_t *)*v193;
                      }
                      v195 = *v193;
LABEL_300:
                      v196 = (llvm::APInt *)(v192 + 24);
                      v197 = *(_DWORD *)(v192 + 32);
                      v198 = (unint64_t *)(v192 + 24);
                      if (v197 >= 0x41)
                      {
                        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v192 + 24));
                        if (v197 - result > 0x40)
                        {
                          v199 = -1;
                          goto LABEL_305;
                        }
                        v198 = *(unint64_t **)v196;
                      }
                      v199 = *v198;
LABEL_305:
                      if (v195 < v199)
                      {
                        v258 = v192;
                        while (1)
                        {
                          v200 = v190;
                          *(_QWORD *)v177 = v191;
                          if (!v189)
                          {
LABEL_319:
                            *v200 = v258;
                            break;
                          }
                          v189 = (v189 - 1) >> 1;
                          v190 = &v260[v189];
                          v191 = *v190;
                          v201 = (unint64_t *)(*v190 + 24);
                          v202 = *(_DWORD *)(*v190 + 32);
                          if (v202 >= 0x41)
                          {
                            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v190 + 24));
                            if (v202 - result > 0x40)
                            {
                              v203 = -1;
                              goto LABEL_313;
                            }
                            v201 = (unint64_t *)*v201;
                          }
                          v203 = *v201;
LABEL_313:
                          v204 = (unint64_t *)v196;
                          if (v197 < 0x41)
                            goto LABEL_317;
                          result = llvm::APInt::countLeadingZerosSlowCase(v196);
                          if (v197 - result <= 0x40)
                          {
                            v204 = *(unint64_t **)v196;
LABEL_317:
                            v205 = *v204;
                            goto LABEL_318;
                          }
                          v205 = -1;
LABEL_318:
                          v177 = (uint64_t)v200;
                          if (v203 >= v205)
                            goto LABEL_319;
                        }
                      }
                    }
                  }
                  if (v8-- <= 2)
                    return result;
                  goto LABEL_276;
                }
              }
              v180 = v176[v174 + 2];
              v181 = (unint64_t *)(*(_QWORD *)v177 + 24);
              v182 = *(_DWORD *)(*(_QWORD *)v177 + 32);
              if (v182 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*(_QWORD *)v177 + 24));
                if (v182 - result > 0x40)
                {
                  v183 = -1;
                  goto LABEL_283;
                }
                v181 = (unint64_t *)*v181;
              }
              v183 = *v181;
LABEL_283:
              v184 = (llvm::APInt *)(v180 + 24);
              v185 = *(_DWORD *)(v180 + 32);
              if (v185 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase(v184);
                if (v185 - result > 0x40)
                {
                  v186 = -1;
LABEL_288:
                  if (v183 < v186)
                  {
                    v177 += 8;
                    v178 = v179;
                  }
                  v175 = v260;
                  goto LABEL_291;
                }
                v184 = *(llvm::APInt **)v184;
              }
              v186 = *(_QWORD *)v184;
              goto LABEL_288;
            }
          }
          v141 = v139[1];
          v142 = (unint64_t *)(*v139 + 24);
          v143 = *(_DWORD *)(*v139 + 32);
          if (v143 >= 0x41)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v139 + 24));
            if (v143 - result > 0x40)
            {
              v144 = -1;
              goto LABEL_227;
            }
            v142 = (unint64_t *)*v142;
          }
          v144 = *v142;
LABEL_227:
          v145 = (unint64_t *)(v141 + 24);
          v146 = *(_DWORD *)(v141 + 32);
          if (v146 >= 0x41)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v141 + 24));
            if (v146 - result > 0x40)
            {
              v147 = -1;
              goto LABEL_232;
            }
            v145 = (unint64_t *)*v145;
          }
          v147 = *v145;
LABEL_232:
          if (v144 < v147)
          {
            ++v139;
            v138 = v140;
          }
          goto LABEL_234;
        }
        v10 = &v6[(unint64_t)v8 >> 1];
        if ((unint64_t)v7 < 0x401)
        {
          result = (uint64_t)sub_1C58D4880(&v9[(unint64_t)v8 >> 1], v9, v250);
        }
        else
        {
          sub_1C58D4880(v9, &v9[(unint64_t)v8 >> 1], v250);
          sub_1C58D4880(v9 + 1, v10 - 1, a2 - 2);
          v11 = &v9[((unint64_t)v8 >> 1) + 1];
          sub_1C58D4880(v260 + 2, v11, a2 - 3);
          v9 = v260;
          result = (uint64_t)sub_1C58D4880(v10 - 1, v10, v11);
          v12 = *v260;
          *v260 = *v10;
          *v10 = v12;
        }
        v13 = (llvm::APInt *)*v9;
        v253 = (llvm::APInt *)*v9;
        v255 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v15 = *(v9 - 1);
          v16 = (unint64_t *)(v15 + 24);
          v17 = *(_DWORD *)(v15 + 32);
          if (v17 >= 0x41)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v15 + 24));
            if (v17 - result > 0x40)
            {
              v18 = -1;
              goto LABEL_16;
            }
            v16 = (unint64_t *)*v16;
          }
          v18 = *v16;
LABEL_16:
          v19 = (llvm::APInt *)((char *)v13 + 24);
          v14 = *((_DWORD *)v13 + 8);
          if (v14 >= 0x41)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)((char *)v13 + 24));
            if (v14 - result > 0x40)
            {
              if (v18 != -1)
                goto LABEL_23;
              v20 = -1;
              goto LABEL_95;
            }
            v20 = **(_QWORD **)v19;
          }
          else
          {
            v20 = *(_QWORD *)v19;
          }
          if (v18 < v20)
            goto LABEL_23;
LABEL_95:
          v59 = (unint64_t *)(*v250 + 24);
          v60 = *(_DWORD *)(*v250 + 32);
          if (v60 >= 0x41)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v250 + 24));
            if (v60 - result > 0x40)
            {
              v61 = -1;
              goto LABEL_100;
            }
            v59 = (unint64_t *)*v59;
          }
          v61 = *v59;
LABEL_100:
          if (v20 < v61)
          {
            v6 = v9;
            while (1)
            {
              v63 = v6[1];
              ++v6;
              v62 = v63;
              v64 = (unint64_t *)((char *)v13 + 24);
              if (v14 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)((char *)v13 + 24));
                if (v14 - result > 0x40)
                {
                  v65 = -1;
                  goto LABEL_107;
                }
                v64 = *(unint64_t **)v19;
              }
              v65 = *v64;
LABEL_107:
              v66 = (llvm::APInt *)(v62 + 24);
              v67 = *(_DWORD *)(v62 + 32);
              if (v67 < 0x41)
                goto LABEL_111;
              result = llvm::APInt::countLeadingZerosSlowCase(v66);
              if (v67 - result <= 0x40)
              {
                v66 = *(llvm::APInt **)v66;
LABEL_111:
                v68 = *(_QWORD *)v66;
                goto LABEL_112;
              }
              v68 = -1;
LABEL_112:
              if (v65 < v68)
                goto LABEL_127;
            }
          }
          v69 = v9 + 1;
          do
          {
            v6 = v69;
            if (v69 >= a2)
              break;
            v70 = *v69;
            v71 = (unint64_t *)((char *)v13 + 24);
            if (v14 >= 0x41)
            {
              result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)((char *)v13 + 24));
              if (v14 - result > 0x40)
              {
                v72 = -1;
                goto LABEL_121;
              }
              v71 = *(unint64_t **)v19;
            }
            v72 = *v71;
LABEL_121:
            v73 = (llvm::APInt *)(v70 + 24);
            v74 = *(_DWORD *)(v70 + 32);
            if (v74 < 0x41)
              goto LABEL_125;
            result = llvm::APInt::countLeadingZerosSlowCase(v73);
            if (v74 - result <= 0x40)
            {
              v73 = *(llvm::APInt **)v73;
LABEL_125:
              v75 = *(_QWORD *)v73;
              goto LABEL_126;
            }
            v75 = -1;
LABEL_126:
            v69 = v6 + 1;
          }
          while (v72 >= v75);
LABEL_127:
          v76 = a2;
          if (v6 < a2)
          {
            v76 = a2;
            do
            {
              v78 = *--v76;
              v77 = v78;
              v79 = (unint64_t *)((char *)v13 + 24);
              if (v14 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)((char *)v13 + 24));
                if (v14 - result > 0x40)
                {
                  v80 = -1;
                  goto LABEL_134;
                }
                v79 = *(unint64_t **)v19;
              }
              v80 = *v79;
LABEL_134:
              v81 = (llvm::APInt *)(v77 + 24);
              v82 = *(_DWORD *)(v77 + 32);
              if (v82 < 0x41)
                goto LABEL_138;
              result = llvm::APInt::countLeadingZerosSlowCase(v81);
              if (v82 - result <= 0x40)
              {
                v81 = *(llvm::APInt **)v81;
LABEL_138:
                v83 = *(_QWORD *)v81;
                continue;
              }
              v83 = -1;
            }
            while (v80 < v83);
          }
          if (v6 >= v76)
            goto LABEL_166;
          v84 = *v6;
          v85 = *v76;
          do
          {
            *v6 = v85;
            *v76 = v84;
            do
            {
              v86 = v6[1];
              ++v6;
              v84 = v86;
              v87 = (unint64_t *)v19;
              if (v14 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase(v19);
                if (v14 - result > 0x40)
                {
                  v88 = -1;
                  goto LABEL_148;
                }
                v87 = *(unint64_t **)v19;
              }
              v88 = *v87;
LABEL_148:
              v89 = (unint64_t *)(v84 + 24);
              v90 = *(_DWORD *)(v84 + 32);
              if (v90 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v84 + 24));
                if (v90 - result > 0x40)
                {
                  v91 = -1;
                  continue;
                }
                v89 = (unint64_t *)*v89;
              }
              v91 = *v89;
            }
            while (v88 >= v91);
            do
            {
              v92 = *--v76;
              v85 = v92;
              v93 = (unint64_t *)v19;
              if (v14 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase(v19);
                if (v14 - result > 0x40)
                {
                  v94 = -1;
                  goto LABEL_159;
                }
                v93 = *(unint64_t **)v19;
              }
              v94 = *v93;
LABEL_159:
              v95 = (unint64_t *)(v85 + 24);
              v96 = *(_DWORD *)(v85 + 32);
              if (v96 >= 0x41)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v85 + 24));
                if (v96 - result > 0x40)
                {
                  v97 = -1;
                  continue;
                }
                v95 = (unint64_t *)*v95;
              }
              v97 = *v95;
            }
            while (v94 < v97);
          }
          while (v6 < v76);
LABEL_166:
          v98 = (llvm::APInt **)(v6 - 1);
          if (v6 - 1 != v9)
            *v9 = (uint64_t)*v98;
          a4 = 0;
          a3 = v255;
          *v98 = v253;
          v5 = a2;
          continue;
        }
        v14 = *((_DWORD *)v13 + 8);
LABEL_23:
        v21 = 0;
        v22 = (llvm::APInt *)((char *)v13 + 24);
        while (2)
        {
          v23 = v9[v21 + 1];
          v24 = (unint64_t *)(v23 + 24);
          v25 = *(_DWORD *)(v23 + 32);
          if (v25 >= 0x41)
          {
            if (v25 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v23 + 24)) > 0x40)
            {
              v26 = -1;
              goto LABEL_29;
            }
            v24 = (unint64_t *)*v24;
          }
          v26 = *v24;
LABEL_29:
          v27 = (unint64_t *)v22;
          if (v14 >= 0x41)
          {
            if (v14 - llvm::APInt::countLeadingZerosSlowCase(v22) > 0x40)
            {
              v28 = -1;
              goto LABEL_34;
            }
            v27 = *(unint64_t **)v22;
          }
          v28 = *v27;
LABEL_34:
          ++v21;
          if (v26 < v28)
            continue;
          break;
        }
        v29 = &v9[v21];
        v30 = a2;
        if (v21 != 1)
        {
          while (2)
          {
            v31 = *--v30;
            v32 = (llvm::APInt *)(v31 + 24);
            v33 = *(_DWORD *)(v31 + 32);
            if (v33 >= 0x41)
            {
              if (v33 - llvm::APInt::countLeadingZerosSlowCase(v32) > 0x40)
              {
                v34 = -1;
                goto LABEL_41;
              }
              v32 = *(llvm::APInt **)v32;
            }
            v34 = *(_QWORD *)v32;
LABEL_41:
            v35 = (unint64_t *)v22;
            if (v14 >= 0x41)
            {
              if (v14 - llvm::APInt::countLeadingZerosSlowCase(v22) > 0x40)
              {
                v36 = -1;
                goto LABEL_46;
              }
              v35 = *(unint64_t **)v22;
            }
            v36 = *v35;
LABEL_46:
            if (v34 < v36)
              goto LABEL_61;
            continue;
          }
        }
        v30 = a2;
        while (2)
        {
          if (v29 < v30)
          {
            v37 = *--v30;
            v38 = (llvm::APInt *)(v37 + 24);
            v39 = *(_DWORD *)(v37 + 32);
            if (v39 >= 0x41)
            {
              if (v39 - llvm::APInt::countLeadingZerosSlowCase(v38) > 0x40)
              {
                v40 = -1;
                goto LABEL_55;
              }
              v38 = *(llvm::APInt **)v38;
            }
            v40 = *(_QWORD *)v38;
LABEL_55:
            v41 = (unint64_t *)v22;
            if (v14 >= 0x41)
            {
              if (v14 - llvm::APInt::countLeadingZerosSlowCase(v22) > 0x40)
              {
                v42 = -1;
                goto LABEL_60;
              }
              v41 = *(unint64_t **)v22;
            }
            v42 = *v41;
LABEL_60:
            if (v40 < v42)
              break;
            continue;
          }
          break;
        }
LABEL_61:
        if (v29 >= v30)
        {
          v6 = v29;
          goto LABEL_89;
        }
        v43 = *v30;
        v6 = v29;
        v44 = v30;
        while (2)
        {
          *v6 = v43;
          *v44 = v23;
          while (2)
          {
            v45 = v6[1];
            ++v6;
            v23 = v45;
            v46 = (llvm::APInt *)(v45 + 24);
            v47 = *(_DWORD *)(v45 + 32);
            if (v47 >= 0x41)
            {
              if (v47 - llvm::APInt::countLeadingZerosSlowCase(v46) > 0x40)
              {
                v48 = -1;
                goto LABEL_69;
              }
              v46 = *(llvm::APInt **)v46;
            }
            v48 = *(_QWORD *)v46;
LABEL_69:
            v49 = (unint64_t *)v22;
            if (v14 < 0x41)
              goto LABEL_73;
            if (v14 - llvm::APInt::countLeadingZerosSlowCase(v22) <= 0x40)
            {
              v49 = *(unint64_t **)v22;
LABEL_73:
              v50 = *v49;
              goto LABEL_74;
            }
            v50 = -1;
LABEL_74:
            if (v48 < v50)
              continue;
            break;
          }
          while (2)
          {
            v51 = *--v44;
            v43 = v51;
            v52 = (llvm::APInt *)(v51 + 24);
            v53 = *(_DWORD *)(v51 + 32);
            if (v53 >= 0x41)
            {
              if (v53 - llvm::APInt::countLeadingZerosSlowCase(v52) > 0x40)
              {
                v54 = -1;
                goto LABEL_80;
              }
              v52 = *(llvm::APInt **)v52;
            }
            v54 = *(_QWORD *)v52;
LABEL_80:
            v55 = (unint64_t *)v22;
            if (v14 >= 0x41)
            {
              if (v14 - llvm::APInt::countLeadingZerosSlowCase(v22) > 0x40)
              {
                v56 = -1;
                goto LABEL_85;
              }
              v55 = *(unint64_t **)v22;
            }
            v56 = *v55;
LABEL_85:
            if (v54 >= v56)
              continue;
            break;
          }
          if (v6 < v44)
            continue;
          break;
        }
LABEL_89:
        v57 = v6 - 1;
        if (v6 - 1 != v260)
          *v260 = *v57;
        a3 = v255;
        *v57 = (uint64_t)v253;
        v5 = a2;
        if (v29 < v30)
        {
LABEL_94:
          result = sub_1C58D3620(v260, v6 - 1, v255, a4 & 1);
          a4 = 0;
          continue;
        }
        v58 = sub_1C58D4B4C(v260, v6 - 1);
        result = sub_1C58D4B4C(v6, a2);
        if (!(_DWORD)result)
        {
          if (v58)
            continue;
          goto LABEL_94;
        }
        a2 = v6 - 1;
        if (!v58)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C58D4880(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  llvm::APInt *v5;
  unsigned int v6;
  llvm::APInt *v7;
  unint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v36;

  v36 = result;
  v4 = *result;
  v5 = (llvm::APInt *)(*a2 + 24);
  v34 = *a2;
  v6 = *(_DWORD *)(*a2 + 32);
  v7 = v5;
  if (v6 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase(v5);
    if (v6 - result > 0x40)
    {
      v8 = -1;
      goto LABEL_6;
    }
    v7 = *(llvm::APInt **)v5;
  }
  v8 = *(_QWORD *)v7;
LABEL_6:
  v9 = (unint64_t *)(v4 + 24);
  v10 = *(_DWORD *)(v4 + 32);
  v11 = (unint64_t *)(v4 + 24);
  if (v10 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v4 + 24));
    if (v10 - result > 0x40)
    {
      v12 = -1;
      goto LABEL_11;
    }
    v11 = (unint64_t *)*v9;
  }
  v12 = *v11;
LABEL_11:
  v13 = a3;
  v14 = *a3;
  v15 = (unint64_t *)(v14 + 24);
  v16 = *(_DWORD *)(v14 + 32);
  if (v8 < v12)
  {
    if (v16 >= 0x41)
    {
      result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v14 + 24));
      if (v16 - result > 0x40)
      {
        v17 = -1;
        goto LABEL_20;
      }
      v15 = (unint64_t *)*v15;
    }
    v17 = *v15;
LABEL_20:
    if (v6 >= 0x41)
    {
      result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase(v5);
      if (v6 - result > 0x40)
      {
        v19 = -1;
        goto LABEL_30;
      }
      v5 = *(llvm::APInt **)v5;
    }
    v19 = *(_QWORD *)v5;
LABEL_30:
    if (v17 < v19)
    {
      v21 = v36;
LABEL_55:
      *v21 = v14;
      *v13 = v4;
      return result;
    }
    *v36 = v34;
    *a2 = v4;
    v14 = *v13;
    v22 = (unint64_t *)(*v13 + 24);
    v23 = *(_DWORD *)(*v13 + 32);
    if (v23 >= 0x41)
    {
      result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*v13 + 24));
      if (v23 - result > 0x40)
      {
        v24 = -1;
        goto LABEL_43;
      }
      v22 = (unint64_t *)*v22;
    }
    v24 = *v22;
LABEL_43:
    if (v10 >= 0x41)
    {
      result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v4 + 24));
      if (v10 - result > 0x40)
      {
        v30 = -1;
LABEL_53:
        if (v24 >= v30)
          return result;
        v21 = a2;
        goto LABEL_55;
      }
      v9 = (unint64_t *)*v9;
    }
    v30 = *v9;
    goto LABEL_53;
  }
  if (v16 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v14 + 24));
    if (v16 - result > 0x40)
    {
      v18 = -1;
      goto LABEL_25;
    }
    v15 = (unint64_t *)*v15;
  }
  v18 = *v15;
LABEL_25:
  if (v6 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase(v5);
    if (v6 - result > 0x40)
    {
      v20 = -1;
      goto LABEL_37;
    }
    v5 = *(llvm::APInt **)v5;
  }
  v20 = *(_QWORD *)v5;
LABEL_37:
  if (v18 >= v20)
    return result;
  *a2 = v14;
  *v13 = v34;
  v25 = *a2;
  v26 = *v36;
  v27 = (unint64_t *)(*a2 + 24);
  v28 = *(_DWORD *)(*a2 + 32);
  if (v28 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v25 + 24));
    if (v28 - result > 0x40)
    {
      v29 = -1;
      goto LABEL_48;
    }
    v27 = (unint64_t *)*v27;
  }
  v29 = *v27;
LABEL_48:
  v31 = (unint64_t *)(v26 + 24);
  v32 = *(_DWORD *)(v26 + 32);
  if (v32 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v26 + 24));
    if (v32 - result > 0x40)
    {
      v33 = -1;
      goto LABEL_58;
    }
    v31 = (unint64_t *)*v31;
  }
  v33 = *v31;
LABEL_58:
  if (v29 < v33)
  {
    *v36 = v25;
    *a2 = v26;
  }
  return result;
}

BOOL sub_1C58D4B4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::APInt *v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  llvm::APInt *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v64;

  v3 = a2 - a1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v5 = *(a2 - 1);
      v6 = *a1;
      v7 = (unint64_t *)(v5 + 24);
      v8 = *(_DWORD *)(v5 + 32);
      if (v8 < 0x41)
        goto LABEL_42;
      if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v5 + 24)) <= 0x40)
      {
        v7 = (unint64_t *)*v7;
LABEL_42:
        v9 = *v7;
      }
      else
      {
        v9 = -1;
      }
      v36 = (unint64_t *)(v6 + 24);
      v37 = *(_DWORD *)(v6 + 32);
      if (v37 < 0x41)
        goto LABEL_47;
      if (v37 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 24)) <= 0x40)
      {
        v36 = (unint64_t *)*v36;
LABEL_47:
        v38 = *v36;
      }
      else
      {
        v38 = -1;
      }
      if (v9 < v38)
      {
        *a1 = v5;
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      sub_1C58D4880(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C58D502C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v29 = a1 + 2;
      v30 = a1 + 3;
      sub_1C58D502C(a1, a1 + 1, a1 + 2, a1 + 3);
      v31 = *(a2 - 1);
      v32 = a1[3];
      v33 = (unint64_t *)(v31 + 24);
      v34 = *(_DWORD *)(v31 + 32);
      if (v34 < 0x41)
        goto LABEL_51;
      if (v34 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v31 + 24)) <= 0x40)
      {
        v33 = (unint64_t *)*v33;
LABEL_51:
        v35 = *v33;
      }
      else
      {
        v35 = -1;
      }
      v39 = (unint64_t *)(v32 + 24);
      v40 = *(_DWORD *)(v32 + 32);
      if (v40 < 0x41)
        goto LABEL_56;
      if (v40 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v32 + 24)) <= 0x40)
      {
        v39 = (unint64_t *)*v39;
LABEL_56:
        v41 = *v39;
      }
      else
      {
        v41 = -1;
      }
      if (v35 >= v41)
        return 1;
      *v30 = v31;
      *(a2 - 1) = v32;
      v42 = *v29;
      v43 = (llvm::APInt *)(*v30 + 24);
      v44 = *(_DWORD *)(*v30 + 32);
      v45 = (unint64_t *)v43;
      v64 = *v30;
      if (v44 < 0x41)
        goto LABEL_63;
      if (v44 - llvm::APInt::countLeadingZerosSlowCase(v43) <= 0x40)
      {
        v45 = *(unint64_t **)v43;
LABEL_63:
        v46 = *v45;
      }
      else
      {
        v46 = -1;
      }
      v47 = (unint64_t *)(v42 + 24);
      v48 = *(_DWORD *)(v42 + 32);
      if (v48 < 0x41)
        goto LABEL_68;
      if (v48 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v42 + 24)) <= 0x40)
      {
        v47 = (unint64_t *)*v47;
LABEL_68:
        v49 = *v47;
      }
      else
      {
        v49 = -1;
      }
      if (v46 >= v49)
        return 1;
      *v29 = v64;
      *v30 = v42;
      v50 = (unint64_t *)v43;
      v51 = a1[1];
      if (v44 < 0x41)
        goto LABEL_74;
      if (v44 - llvm::APInt::countLeadingZerosSlowCase(v43) <= 0x40)
      {
        v50 = *(unint64_t **)v43;
LABEL_74:
        v52 = *v50;
      }
      else
      {
        v52 = -1;
      }
      v53 = (unint64_t *)(v51 + 24);
      v54 = *(_DWORD *)(v51 + 32);
      if (v54 < 0x41)
        goto LABEL_79;
      if (v54 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v51 + 24)) <= 0x40)
      {
        v53 = (unint64_t *)*v53;
LABEL_79:
        v55 = *v53;
      }
      else
      {
        v55 = -1;
      }
      if (v52 >= v55)
        return 1;
      a1[1] = v64;
      a1[2] = v51;
      v56 = *a1;
      if (v44 < 0x41)
        goto LABEL_85;
      if (v44 - llvm::APInt::countLeadingZerosSlowCase(v43) <= 0x40)
      {
        v43 = *(llvm::APInt **)v43;
LABEL_85:
        v57 = *(_QWORD *)v43;
      }
      else
      {
        v57 = -1;
      }
      v58 = (unint64_t *)(v56 + 24);
      v59 = *(_DWORD *)(v56 + 32);
      if (v59 < 0x41)
        goto LABEL_90;
      if (v59 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v56 + 24)) <= 0x40)
      {
        v58 = (unint64_t *)*v58;
LABEL_90:
        v60 = *v58;
      }
      else
      {
        v60 = -1;
      }
      if (v57 < v60)
      {
        *a1 = v64;
        a1[1] = v56;
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C58D4880(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v61 = 0;
      v12 = 24;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = (llvm::APInt *)(*v11 + 24);
    v15 = *(_DWORD *)(*v11 + 32);
    v16 = (unint64_t *)v14;
    v62 = *v11;
    if (v15 >= 0x41)
    {
      if (v15 - llvm::APInt::countLeadingZerosSlowCase(v14) > 0x40)
      {
        v17 = -1;
        goto LABEL_13;
      }
      v16 = *(unint64_t **)v14;
    }
    v17 = *v16;
LABEL_13:
    v18 = (unint64_t *)(v13 + 24);
    v19 = *(_DWORD *)(v13 + 32);
    if (v19 < 0x41)
      goto LABEL_17;
    if (v19 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v13 + 24)) <= 0x40)
    {
      v18 = (unint64_t *)*v18;
LABEL_17:
      v20 = *v18;
      goto LABEL_18;
    }
    v20 = -1;
LABEL_18:
    if (v17 >= v20)
      goto LABEL_35;
    v21 = v12;
    while (1)
    {
      *(uint64_t *)((char *)a1 + v21) = v13;
      v22 = v21 - 8;
      if (v21 == 8)
        break;
      v13 = *(uint64_t *)((char *)a1 + v21 - 16);
      v23 = (unint64_t *)v14;
      if (v15 >= 0x41)
      {
        if (v15 - llvm::APInt::countLeadingZerosSlowCase(v14) > 0x40)
        {
          v24 = -1;
          goto LABEL_26;
        }
        v23 = *(unint64_t **)v14;
      }
      v24 = *v23;
LABEL_26:
      v25 = (unint64_t *)(v13 + 24);
      v26 = *(_DWORD *)(v13 + 32);
      if (v26 < 0x41)
        goto LABEL_30;
      if (v26 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v13 + 24)) <= 0x40)
      {
        v25 = (unint64_t *)*v25;
LABEL_30:
        v27 = *v25;
        goto LABEL_31;
      }
      v27 = -1;
LABEL_31:
      v21 = v22;
      if (v24 >= v27)
      {
        v28 = (uint64_t *)((char *)a1 + v22);
        goto LABEL_34;
      }
    }
    v28 = a1;
LABEL_34:
    *v28 = v62;
    if (++v61 == 8)
      return v11 + 1 == a2;
LABEL_35:
    v10 = v11;
    v12 += 8;
    ++v11;
  }
  while (v11 != a2);
  return 1;
}

_QWORD *sub_1C58D502C(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t *v30;
  unsigned int v31;
  unint64_t v32;

  result = sub_1C58D4880(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = (unint64_t *)(*a4 + 24);
  v12 = *(_DWORD *)(*a4 + 32);
  if (v12 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*a4 + 24));
    if (v12 - result > 0x40)
    {
      v13 = -1;
      goto LABEL_6;
    }
    v11 = (unint64_t *)*v11;
  }
  v13 = *v11;
LABEL_6:
  v14 = (unint64_t *)(v10 + 24);
  v15 = *(_DWORD *)(v10 + 32);
  if (v15 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v10 + 24));
    if (v15 - result > 0x40)
    {
      v16 = -1;
      goto LABEL_11;
    }
    v14 = (unint64_t *)*v14;
  }
  v16 = *v14;
LABEL_11:
  if (v13 >= v16)
    return result;
  *a3 = v9;
  *a4 = v10;
  v17 = *a3;
  v18 = *a2;
  v19 = (unint64_t *)(*a3 + 24);
  v20 = *(_DWORD *)(*a3 + 32);
  if (v20 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*a3 + 24));
    if (v20 - result > 0x40)
    {
      v21 = -1;
      goto LABEL_17;
    }
    v19 = (unint64_t *)*v19;
  }
  v21 = *v19;
LABEL_17:
  v22 = (unint64_t *)(v18 + 24);
  v23 = *(_DWORD *)(v18 + 32);
  if (v23 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v18 + 24));
    if (v23 - result > 0x40)
    {
      v24 = -1;
      goto LABEL_22;
    }
    v22 = (unint64_t *)*v22;
  }
  v24 = *v22;
LABEL_22:
  if (v21 >= v24)
    return result;
  *a2 = v17;
  *a3 = v18;
  v25 = *a2;
  v26 = *a1;
  v27 = (unint64_t *)(*a2 + 24);
  v28 = *(_DWORD *)(*a2 + 32);
  if (v28 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(*a2 + 24));
    if (v28 - result > 0x40)
    {
      v29 = -1;
      goto LABEL_28;
    }
    v27 = (unint64_t *)*v27;
  }
  v29 = *v27;
LABEL_28:
  v30 = (unint64_t *)(v26 + 24);
  v31 = *(_DWORD *)(v26 + 32);
  if (v31 >= 0x41)
  {
    result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v26 + 24));
    if (v31 - result > 0x40)
    {
      v32 = -1;
      goto LABEL_33;
    }
    v30 = (unint64_t *)*v30;
  }
  v32 = *v30;
LABEL_33:
  if (v29 < v32)
  {
    *a1 = v25;
    *a2 = v26;
  }
  return result;
}

llvm::vfs *sub_1C58D51F8()
{
  llvm::vfs *v0;
  void **v2[3];
  uint64_t v3[3];
  __int128 v4;
  int v5;
  void ***v6;

  v0 = (llvm::vfs *)operator new();
  v4 = 0uLL;
  v5 = 0;
  memset(v3, 0, sizeof(v3));
  memset(v2, 0, sizeof(v2));
  sub_1C58D26E4(v0, &v4, v3, (uint64_t *)v2);
  v6 = v2;
  sub_1C4765410((void ***)&v6);
  v2[0] = (void **)v3;
  sub_1C4765410(v2);
  return v0;
}

void sub_1C58D5288(llvm::Pass *this)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)this = &off_1E817E2A0;
  v2 = (void **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    v4 = v2;
    sub_1C5E39EAC(&v4);
    MEMORY[0x1CAA32FC0](v2, 0x20C40960023A9);
  }
  v3 = (void **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3;
    sub_1C5E39EAC(&v4);
    MEMORY[0x1CAA32FC0](v3, 0x20C40960023A9);
  }
  llvm::Pass::~Pass(this);
}

void sub_1C58D531C(llvm::Pass *this)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)this = &off_1E817E2A0;
  v2 = (void **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    v4 = v2;
    sub_1C5E39EAC(&v4);
    MEMORY[0x1CAA32FC0](v2, 0x20C40960023A9);
  }
  v3 = (void **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3;
    sub_1C5E39EAC(&v4);
    MEMORY[0x1CAA32FC0](v3, 0x20C40960023A9);
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C58D53C4()
{
  return "ModuleSanitizerCoverage";
}

void *sub_1C58D53D4(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C58D5410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[528];
  void *v11;
  char v12;
  void *__p;
  char v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[26];

  v18[25] = *MEMORY[0x1E0C80C00];
  sub_1C58CDD98((uint64_t)v10, (int *)(a1 + 28), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v8 = a1;
  v9 = a1;
  v6 = sub_1C58CDF84((uint64_t)v10, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1C58D54F8, (uint64_t)&v9, (unsigned __int8 *)sub_1C58D554C, (uint64_t)&v8, v4, v5);
  if (v17 != v18)
    free(v17);
  if (v15 != &v16)
    free(v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  return v6;
}

uint64_t sub_1C58D54F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::DominatorTreeWrapperPass::ID)
       + 32;
}

uint64_t sub_1C58D554C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::PostDominatorTreeWrapperPass::ID)+ 32;
}

__n128 sub_1C58D55A0(__n128 *a1, _WORD *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED816FA8, "sanitizer-coverage-level", 0x18uLL);
  result = *a1;
  xmmword_1ED816FC8 = (__int128)*a1;
  word_1ED816FB2 = (32 * (*a2 & 3)) | word_1ED816FB2 & 0xFF9F;
  v7 = *a3;
  dword_1ED817028 = **a3;
  byte_1ED81703C = 1;
  dword_1ED817038 = *v7;
  return result;
}

__n128 sub_1C58D5624(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8172A8, "sanitizer-coverage-inline-8bit-counters", 0x27uLL);
  result = *a1;
  xmmword_1ED8172C8 = (__int128)*a1;
  word_1ED8172B2 = (32 * (*a2 & 3)) | word_1ED8172B2 & 0xFF9F;
  v7 = *a3;
  byte_1ED817328 = **a3;
  byte_1ED817339 = 1;
  byte_1ED817338 = *v7;
  return result;
}

__n128 sub_1C58D56A8(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED817968, "sanitizer-coverage-gated-trace-callbacks", 0x28uLL);
  result = *a1;
  xmmword_1ED817988 = (__int128)*a1;
  word_1ED817972 = (32 * (*a2 & 3)) | word_1ED817972 & 0xFF9F;
  v7 = *a3;
  byte_1ED8179E8 = **a3;
  byte_1ED8179F9 = 1;
  byte_1ED8179F8 = *v7;
  return result;
}

uint64_t sub_1C58D572C(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
}

uint64_t sub_1C58D5754(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::PostDominatorTreeAnalysis::Key, a2) + 8;
}

uint64_t sub_1C58D577C()
{
  int v1;
  int *v2;
  int v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Sanitizer Coverage. 0: none, 1: entry block, 2: all blocks, 3: all blocks and critical edges";
  v4.n128_u64[1] = 92;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C62B0578(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED816FA8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Experimental pc tracing";
  v4.n128_u64[1] = 23;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED817068, "sanitizer-coverage-trace-pc", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817068, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"pc tracing with a guard";
  v4.n128_u64[1] = 23;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED817128, "sanitizer-coverage-trace-pc-guard", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817128, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"create a static PC table";
  v4.n128_u64[1] = 24;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8171E8, "sanitizer-coverage-pc-table", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8171E8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"increments 8-bit counter for every edge";
  v4.n128_u64[1] = 39;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C62B0614(&v4, &v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8172A8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"sets a BOOLean flag for every edge";
  v4.n128_u64[1] = 34;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED817368, "sanitizer-coverage-inline-BOOL-flag", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817368, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Tracing of CMP and similar instructions";
  v4.n128_u64[1] = 39;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED817428, "sanitizer-coverage-trace-compares", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817428, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Tracing of DIV instructions";
  v4.n128_u64[1] = 27;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8174E8, "sanitizer-coverage-trace-divs", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8174E8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Tracing of load instructions";
  v4.n128_u64[1] = 28;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8175A8, "sanitizer-coverage-trace-loads", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8175A8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Tracing of store instructions";
  v4.n128_u64[1] = 29;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED817668, "sanitizer-coverage-trace-stores", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817668, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Tracing of GEP instructions";
  v4.n128_u64[1] = 27;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED817728, "sanitizer-coverage-trace-geps", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817728, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Reduce the number of instrumented blocks";
  v4.n128_u64[1] = 40;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8177E8, "sanitizer-coverage-prune-blocks", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8177E8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"max stack depth tracing";
  v4.n128_u64[1] = 23;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8178A8, "sanitizer-coverage-stack-depth", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8178A8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Gate the invocation of the tracing callbacks on a global variable. Currently only s"
                                     "upported for trace-pc-guard.";
  v4.n128_u64[1] = 111;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C62B06B8(&v4, &v3, (char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED817968, &dword_1C475E000);
}

void llvm::initializeSoftPointerAuthLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71D8);
  if (v2 != -1)
  {
    v5[0] = sub_1C58D5C20;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71D8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C58D5C20(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower pointer authentication intrinsics for soft targets";
  *(_QWORD *)(v2 + 8) = 56;
  *(_QWORD *)(v2 + 16) = "soft-ptrauth";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5240;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58D6E84;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C58D5CB0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5240;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817E340;
  *(_BYTE *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F71D8);
  if (v3 != -1)
  {
    v7[0] = sub_1C58D5C20;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F71D8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C58D5D90(uint64_t ***a1, uint64_t **a2, const llvm::APInt *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BOOL4 v28;
  int v29;
  uint64_t *v30;
  llvm::Value *v31;
  uint64_t v32;
  _QWORD *v33;
  int *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  _BOOL4 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Value *v46;
  uint64_t v47;
  _QWORD *v48;
  int *v49;
  _BOOL4 v50;
  uint64_t *v51;
  llvm::Value *v52;
  uint64_t v53;
  _QWORD *v54;
  _BOOL4 v55;
  uint64_t *v56;
  llvm::Value *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  _QWORD *v75;
  void *v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  _QWORD *v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD **v87;
  int v88;
  unsigned int v90;
  int v91;
  unsigned int v92;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  llvm::ConstantInt *v111;
  llvm::ValueHandleBase *v112;
  uint64_t v113;
  llvm::Value **v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  llvm::Instruction *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  uint64_t *v146;
  uint64_t *v147;
  llvm::ConstantPointerNull ***v148;
  llvm::ConstantPointerNull ***v149;
  llvm::ConstantPointerNull **v150;
  llvm::Value *v151;
  uint64_t ***v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD **v156;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t **v160;
  uint64_t v161;
  _QWORD v162[2];
  unsigned int v163;
  _OWORD v164[2];
  int v165;
  char v166;
  void *v167;
  uint64_t v168;
  _WORD v169[64];
  void *v170[2];
  int v171;
  char v172;
  uint64_t *v173;
  uint64_t v174;
  _WORD v175[60];
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 1) = 0u;
  *a1 = a2;
  v4 = a2[4];
  v160 = a2 + 3;
  if (v4 == (uint64_t *)(a2 + 3))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v4)
        v6 = v4 - 7;
      else
        v6 = 0;
      v4 = (uint64_t *)v4[1];
      v7 = v6[14];
      if (v7)
      {
        if (*(_DWORD *)(v7 + 8))
        {
          v8 = *(_QWORD *)(v7 + 40);
          if (v8)
          {
            v9 = *(_DWORD *)(v8 + 40);
            if (v9)
            {
              v10 = *(_QWORD *)(v8 + 24);
              v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v66 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v66 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v66;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v12 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xC91092A985989CBALL)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (qword_1ED7EAC80 ^ 0xC91092A985989CBALL)) >> 47) ^ 0xE478E6DCE4EAE8CALL);
              v13 = (-348639895 * ((v12 >> 47) ^ v12)) ^ 0x7465722D;
              for (i = 1; ; ++i)
              {
                v15 = v13 & (v9 - 1);
                v16 = v10 + 24 * v15;
                v17 = *(_QWORD **)v16;
                if (*(_QWORD *)v16 == -1)
                {
                  if ("ptrauth-returns" == (char *)-1)
                    goto LABEL_234;
                }
                else if (v17 == (_QWORD *)-2)
                {
                  if ("ptrauth-returns" == (char *)-2)
                    goto LABEL_234;
                }
                else if (*(_QWORD *)(v16 + 8) == 15)
                {
                  v18 = *v17 == 0x2D68747561727470 && *(_QWORD *)((char *)v17 + 7) == 0x736E72757465722DLL;
                  if (v18)
LABEL_234:
                    llvm::report_fatal_error((llvm *)"Soft. lowering of return address auth unsupported", (const char *)1);
                }
                if (v17 == (_QWORD *)-1)
                  break;
                v13 = i + v15;
              }
            }
          }
        }
      }
      v19 = v6 + 9;
      v20 = v6[10];
LABEL_27:
      while ((uint64_t *)v20 != v19)
      {
        v21 = v20 - 24;
        if (!v20)
          v21 = 0;
        v20 = *(_QWORD *)(v20 + 8);
        v22 = v21 + 40;
        v23 = *(_QWORD *)(v21 + 48);
        if (v23 != v22)
        {
          while (1)
          {
            if (v23)
              v24 = v23 - 24;
            else
              v24 = 0;
            v25 = *(_QWORD *)(v23 + 8);
            v26 = *(unsigned __int8 *)(v24 + 16);
            if (v23 && v26 == 84)
            {
              sub_1C5062CEC(v24, 7, (uint64_t)v170);
              if (!v172)
              {
                v27 = *(_QWORD *)(v24 - 32);
                if (v27
                  && !*(_BYTE *)(v27 + 16)
                  && *(_QWORD *)(v27 + 24) == *(_QWORD *)(v24 + 72)
                  && (*(_BYTE *)(v27 + 33) & 0x20) != 0)
                {
                  switch(*(_DWORD *)(v27 + 36))
                  {
                    case 0xF6:
                      v170[0] = (void *)0x100000002;
                      LODWORD(v170[1]) = 0;
                      v28 = sub_1C58D73C8((uint64_t)a1, v24, 2, (int *)v170, 3);
                      v29 = 0;
                      if (!v28)
                        goto LABEL_51;
                      sub_1C4773D54((uint64_t)v170, v24, 0, 0, 0);
                      v30 = (uint64_t *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
                      v31 = (llvm::Value *)sub_1C58D76B0((uint64_t)a1, (uint64_t *)v170, *v30, v30[4], v30[8]);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, v31, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v24 + 40) + 40, (uint64_t ***)v24);
                      v32 = *(_QWORD *)(v24 + 24);
                      v33 = *(_QWORD **)(v24 + 32);
                      *v33 = v32;
                      *(_QWORD *)(v32 + 8) = v33;
                      *(_QWORD *)(v24 + 24) = 0;
                      *(_QWORD *)(v24 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v24);
                      v34 = (int *)v170[0];
                      goto LABEL_63;
                    case 0xF7:
                      v170[0] = 0;
                      v55 = sub_1C58D73C8((uint64_t)a1, v24, 0, (int *)v170, 2);
                      v29 = 0;
                      if (!v55)
                        goto LABEL_51;
                      sub_1C4773D54((uint64_t)v170, v24, 0, 0, 0);
                      v56 = (uint64_t *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
                      v57 = (llvm::Value *)sub_1C58D7A1C((uint64_t)a1, (uint64_t *)v170, *v56, v56[4]);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, v57, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v24 + 40) + 40, (uint64_t ***)v24);
                      v58 = *(_QWORD *)(v24 + 24);
                      v59 = *(_QWORD **)(v24 + 32);
                      *v59 = v58;
                      *(_QWORD *)(v58 + 8) = v59;
                      *(_QWORD *)(v24 + 24) = 0;
                      *(_QWORD *)(v24 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v24);
                      v34 = (int *)v170[0];
                      goto LABEL_63;
                    case 0xF8:
                      v171 = 0;
                      *(_OWORD *)v170 = xmmword_1C8662D08;
                      v41 = sub_1C58D73C8((uint64_t)a1, v24, 2, (int *)v170, 5);
                      v29 = 0;
                      if (!v41)
                        goto LABEL_51;
                      sub_1C4773D54((uint64_t)v170, v24, 0, 0, 0);
                      v42 = (uint64_t *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
                      v43 = v42[12];
                      v44 = v42[16];
                      v45 = sub_1C58D76B0((uint64_t)a1, (uint64_t *)v170, *v42, v42[4], v42[8]);
                      v46 = (llvm::Value *)sub_1C58D7910((uint64_t)a1, (uint64_t *)v170, v45, v43, v44);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, v46, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v24 + 40) + 40, (uint64_t ***)v24);
                      v47 = *(_QWORD *)(v24 + 24);
                      v48 = *(_QWORD **)(v24 + 32);
                      *v48 = v47;
                      *(_QWORD *)(v47 + 8) = v48;
                      *(_QWORD *)(v24 + 24) = 0;
                      *(_QWORD *)(v24 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v24);
                      v49 = (int *)v170[0];
                      goto LABEL_72;
                    case 0xF9:
                      v170[0] = (void *)0x100000002;
                      LODWORD(v170[1]) = 0;
                      v50 = sub_1C58D73C8((uint64_t)a1, v24, 2, (int *)v170, 3);
                      v29 = 0;
                      if (!v50)
                        goto LABEL_51;
                      sub_1C4773D54((uint64_t)v170, v24, 0, 0, 0);
                      v51 = (uint64_t *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
                      v52 = (llvm::Value *)sub_1C58D7910((uint64_t)a1, (uint64_t *)v170, *v51, v51[4], v51[8]);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, v52, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v24 + 40) + 40, (uint64_t ***)v24);
                      v53 = *(_QWORD *)(v24 + 24);
                      v54 = *(_QWORD **)(v24 + 32);
                      *v54 = v53;
                      *(_QWORD *)(v53 + 8) = v54;
                      *(_QWORD *)(v24 + 24) = 0;
                      *(_QWORD *)(v24 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v24);
                      v34 = (int *)v170[0];
LABEL_63:
                      if (v34 != &v171)
                        free(v34);
                      v29 = 1;
                      goto LABEL_51;
                    case 0xFA:
                      v170[0] = 0;
                      v35 = sub_1C58D73C8((uint64_t)a1, v24, 0, (int *)v170, 2);
                      v29 = 0;
                      if (!v35)
                        goto LABEL_51;
                      sub_1C4773D54((uint64_t)v170, v24, 0, 0, 0);
                      v36 = v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF);
                      v37 = *(uint64_t **)v36;
                      v38 = *(_QWORD *)(v36 + 32);
                      v39 = (uint64_t)a1[10];
                      if (v39)
                      {
                        v40 = a1[9];
                      }
                      else
                      {
                        v167 = (void *)0x100000000;
                        LODWORD(v168) = 0;
                        v40 = (uint64_t **)sub_1C58D77BC(a1, "__ptrauth_sign_generic", 0x16uLL, 0, (int *)&v167, 3);
                        v39 = (uint64_t)v61;
                        a1[9] = v40;
                        a1[10] = v61;
                      }
                      goto LABEL_71;
                    case 0xFB:
                      v170[0] = (void *)0x100000002;
                      v29 = sub_1C58D73C8((uint64_t)a1, v24, 2, (int *)v170, 2);
                      if (!v29)
                        goto LABEL_51;
                      sub_1C4773D54((uint64_t)v170, v24, 0, 0, 0);
                      v60 = v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF);
                      v37 = *(uint64_t **)v60;
                      v38 = *(_QWORD *)(v60 + 32);
                      v39 = (uint64_t)a1[6];
                      if (v39)
                      {
                        v40 = a1[5];
                      }
                      else
                      {
                        v167 = (void *)0x100000002;
                        v40 = (uint64_t **)sub_1C58D77BC(a1, "__ptrauth_strip", 0xFuLL, 2, (int *)&v167, 2);
                        v39 = (uint64_t)v62;
                        a1[5] = v40;
                        a1[6] = v62;
                      }
LABEL_71:
                      v173 = v37;
                      v174 = v38;
                      v169[8] = 257;
                      v63 = sub_1C4774778((uint64_t *)v170, v40, v39, (uint64_t *)&v173, 2, (uint64_t)&v167, 0);
                      *(_QWORD *)(v63 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v63 + 64), **(uint64_t ***)v63, -1, 37);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, (llvm::Value *)v63, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v24 + 40) + 40, (uint64_t ***)v24);
                      v64 = *(_QWORD *)(v24 + 24);
                      v65 = *(_QWORD **)(v24 + 32);
                      *v65 = v64;
                      *(_QWORD *)(v64 + 8) = v65;
                      *(_QWORD *)(v24 + 24) = 0;
                      *(_QWORD *)(v24 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v24);
                      v49 = (int *)v170[0];
LABEL_72:
                      if (v49 != &v171)
                        free(v49);
                      v29 = 1;
                      break;
                    default:
                      goto LABEL_50;
                  }
                  goto LABEL_51;
                }
LABEL_50:
                v29 = 0;
                goto LABEL_51;
              }
            }
            else
            {
              if (v26 != 33)
                v24 = 0;
              if (!v23 || v26 != 33)
                goto LABEL_52;
              sub_1C5062CEC(v24, 7, (uint64_t)v170);
              if (!v172)
                goto LABEL_50;
            }
            v29 = sub_1C58D6F7C((uint64_t)a1, v24, (uint64_t **)v170);
LABEL_51:
            v5 |= v29;
LABEL_52:
            v23 = v25;
            if (v25 == v22)
              goto LABEL_27;
          }
        }
      }
    }
    while (v4 != (uint64_t *)v160);
    a2 = *a1;
  }
  v170[0] = &v171;
  v170[1] = (void *)0x1000000000;
  v167 = v169;
  v168 = 0x1000000000;
  v67 = a2 + 1;
  v163 = 0;
  v162[0] = 0;
  v162[1] = 0;
  v68 = a2[2];
  if (v68 == (uint64_t *)(a2 + 1))
  {
LABEL_222:
    v153 = 0;
    goto LABEL_223;
  }
  do
  {
    if (v68)
      v69 = v68 - 7;
    else
      v69 = 0;
    if ((*((_BYTE *)v69 + 34) & 0x40) == 0)
      goto LABEL_94;
    v70 = **(_QWORD **)*v69;
    v173 = v69;
    v71 = *(_DWORD *)(v70 + 2520);
    if (!v71)
    {
      v95 = 0;
LABEL_126:
      v75 = sub_1C53D65B8(v70 + 2504, (uint64_t)&v173, (uint64_t *)&v173, v95);
      v96 = v173;
      v75[1] = 0;
      v75[2] = 0;
      *v75 = v96;
      goto LABEL_89;
    }
    v72 = *(_QWORD *)(v70 + 2504);
    v73 = v71 - 1;
    v74 = v73 & ((v69 >> 4) ^ (v69 >> 9));
    v75 = (_QWORD *)(v72 + 24 * v74);
    v76 = (void *)*v75;
    if ((uint64_t *)*v75 != v69)
    {
      v81 = 0;
      v82 = 1;
      while (v76 != (void *)-4096)
      {
        if (v81)
          v83 = 0;
        else
          v83 = v76 == (void *)-8192;
        if (v83)
          v81 = v75;
        v84 = v74 + v82++;
        v74 = v84 & v73;
        v75 = (_QWORD *)(v72 + 24 * v74);
        v76 = (void *)*v75;
        if ((uint64_t *)*v75 == v69)
          goto LABEL_89;
      }
      if (v81)
        v95 = v81;
      else
        v95 = v75;
      goto LABEL_126;
    }
LABEL_89:
    if (v75[2] == 12)
    {
      v77 = (uint64_t *)v75[1];
      v78 = *v77;
      v79 = *((_DWORD *)v77 + 2);
      if (v78 == 0x7274702E6D766C6CLL && v79 == 1752462689)
      {
        v85 = *(v69 - 4);
        if (v85)
        {
          if (*(_BYTE *)(v85 + 16) == 9 && (*(_DWORD *)(v85 + 20) & 0x7FFFFFF) == 4)
          {
            v86 = **(_QWORD **)(v85 - 128);
            if (v86 == llvm::PointerType::get((llvm::PointerType *)(***a1 + 1912), 0))
            {
              v87 = (_QWORD **)(v85 - 32 * (*(_DWORD *)(v85 + 20) & 0x7FFFFFF));
              if (*(_DWORD *)(*v87[4] + 8) == 8205)
              {
                v88 = *((_DWORD *)(*a1)[63] + 1);
                if (*(_DWORD *)(*v87[8] + 8) == 13 && *(_DWORD *)(*v87[8] + 8) >> 8 == v88)
                {
                  v90 = *(_DWORD *)(*v87[12] + 8);
                  v91 = v90;
                  v92 = v90 >> 8;
                  if (v91 == 13 && v92 == v88)
                  {
                    v94 = LODWORD(v170[1]);
                    if (LODWORD(v170[1]) >= (unint64_t)HIDWORD(v170[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v170, (uint64_t)&v171, LODWORD(v170[1]) + 1, 8);
                      v94 = LODWORD(v170[1]);
                    }
                    *((_QWORD *)v170[0] + v94) = v69;
                    ++LODWORD(v170[1]);
                    v173 = v162;
                    v174 = (uint64_t)&v167;
                    sub_1C58D7B0C((uint64_t)v69, 0, (uint64_t *)&v173);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_94:
    v68 = (uint64_t *)v68[1];
  }
  while (v68 != (uint64_t *)v67);
  v97 = LODWORD(v170[1]);
  if (!LODWORD(v170[1]))
    goto LABEL_222;
  if (!(_DWORD)v168)
  {
LABEL_214:
    v148 = (llvm::ConstantPointerNull ***)v170[0];
    v149 = (llvm::ConstantPointerNull ***)((char *)v170[0] + 8 * v97);
    do
    {
      v150 = *v148++;
      v151 = (llvm::Value *)llvm::ConstantPointerNull::get(*v150, (llvm::PointerType *)a2);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v150, v151, (llvm::Value *)1);
      llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v150);
    }
    while (v148 != v149);
    goto LABEL_216;
  }
  v98 = (uint64_t *)v167;
  v99 = (uint64_t *)((char *)v167 + 8 * v168);
  v158 = v99;
  while (2)
  {
    v100 = *v98;
    if (v163)
    {
      v101 = ((v100 >> 4) ^ (v100 >> 9)) & (v163 - 1);
      v102 = (uint64_t *)(v162[0] + 32 * v101);
      v103 = *v102;
      if (*v102 != v100)
      {
        v104 = 1;
        while (v103 != -4096)
        {
          v105 = v101 + v104++;
          v101 = v105 & (v163 - 1);
          v103 = *(_QWORD *)(v162[0] + 32 * v101);
          if (v103 == v100)
          {
            v102 = (uint64_t *)(v162[0] + 32 * v101);
            goto LABEL_138;
          }
        }
        v102 = (uint64_t *)(v162[0] + 32 * v163);
      }
    }
    else
    {
      v102 = (uint64_t *)v162[0];
    }
LABEL_138:
    v106 = *(unsigned __int8 *)(v100 + 16);
    if (v106 == 3 && v100 != 0)
    {
      v109 = *(_QWORD *)(v100 - 32);
      v173 = (uint64_t *)v175;
      v174 = 0x400000000;
      v110 = ***a1;
      v111 = *(llvm::ConstantInt **)(v110 + 1960);
      DWORD2(v164[0]) = *(_DWORD *)(v110 + 1968) >> 8;
      if (DWORD2(v164[0]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)v164, 0, 0);
      else
        *(_QWORD *)&v164[0] = 0;
      v112 = llvm::ConstantInt::get(v111, (llvm::LLVMContext *)v164, a3);
      if (DWORD2(v164[0]) >= 0x41 && *(_QWORD *)&v164[0])
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v164[0], 0x1000C8000313F17);
      v113 = v174;
      if (v174 >= (unint64_t)HIDWORD(v174))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 8);
        v113 = v174;
      }
      v173[v113] = (uint64_t)v112;
      LODWORD(v174) = v174 + 1;
      v114 = sub_1C58D7F38(a1, v100, (uint64_t)&v173, v109, v102 + 1);
      llvm::GlobalVariable::setInitializer(v100, (llvm::Constant *)v114);
      *(_BYTE *)(v100 + 80) &= ~1u;
      goto LABEL_174;
    }
    if (v100 && v106 == 83)
    {
      v108 = (uint64_t *)v102[1];
      v159 = v102 + 2;
      if (v108 != v102 + 2)
      {
        do
        {
          v131 = *((unsigned int *)v108 + 8);
          v132 = *(_DWORD *)(v100 + 20);
          if ((v132 & 0x40000000) != 0)
            v133 = *(_QWORD *)(v100 - 8);
          else
            v133 = v100 - 32 * (v132 & 0x7FFFFFF);
          v134 = *(_QWORD *)(v133 + 32 * v131);
          v135 = *(_QWORD *)(v133 + 32 * *(unsigned int *)(v100 + 60) + 8 * v131);
          v136 = *(_QWORD *)(v100 + 40);
          v165 = 256;
          memset(v164, 0, sizeof(v164));
          v166 = 1;
          v137 = *(_QWORD *)(v135 + 40);
          v161 = v134;
          if (v137 == v135 + 40)
          {
            v130 = 0;
          }
          else
          {
            if (v137)
              v138 = (unsigned __int8 *)(v137 - 24);
            else
              v138 = 0;
            if (v138[16] - 29 >= 0xB)
              v130 = 0;
            else
              v130 = (llvm::Instruction *)v138;
          }
          v139 = -1;
          do
            ++v139;
          while (llvm::Instruction::getSuccessor(v130, v139) != v136);
          v175[8] = 257;
          v140 = llvm::SplitCriticalEdge(v130, v139, (uint64_t)v164, (llvm::Twine *)&v173);
          if (v140)
            v141 = v140;
          else
            v141 = v135;
          v142 = *(_QWORD *)(v141 + 40);
          if (v142 == v141 + 40)
          {
            v143 = 0;
          }
          else
          {
            if (v142)
              v144 = v142 - 24;
            else
              v144 = 0;
            if (*(unsigned __int8 *)(v144 + 16) - 29 >= 0xB)
              v143 = 0;
            else
              v143 = v144;
          }
          v99 = v158;
          sub_1C4773D54((uint64_t)&v173, v143, 0, 0, 0);
          v145 = sub_1C58D85EC((uint64_t)a1, (uint64_t)&v173, v161, v108 + 5);
          sub_1C6125834(v100, v131, (uint64_t)v145);
          if (v173 != (uint64_t *)v175)
            free(v173);
          v146 = (uint64_t *)v108[1];
          if (v146)
          {
            do
            {
              v147 = v146;
              v146 = (uint64_t *)*v146;
            }
            while (v146);
          }
          else
          {
            do
            {
              v147 = (uint64_t *)v108[2];
              v18 = *v147 == (_QWORD)v108;
              v108 = v147;
            }
            while (!v18);
          }
          v108 = v147;
        }
        while (v147 != v159);
      }
    }
    else
    {
      sub_1C4773D54((uint64_t)&v173, *v98, 0, 0, 0);
      v115 = (uint64_t *)v102[1];
      if (v115 != v102 + 2)
      {
        do
        {
          v117 = *(_DWORD *)(v100 + 20);
          if ((v117 & 0x40000000) != 0)
            v118 = *(_QWORD *)(v100 - 8);
          else
            v118 = v100 - 32 * (v117 & 0x7FFFFFF);
          v119 = *((unsigned int *)v115 + 8);
          v120 = sub_1C58D85EC((uint64_t)a1, (uint64_t)&v173, *(_QWORD *)(v118 + 32 * v119), v115 + 5);
          v121 = *(_DWORD *)(v100 + 20);
          if ((v121 & 0x40000000) != 0)
            v116 = *(_QWORD *)(v100 - 8);
          else
            v116 = v100 - 32 * (v121 & 0x7FFFFFF);
          v122 = v116 + 32 * v119;
          if (*(_QWORD *)v122)
          {
            **(_QWORD **)(v122 + 16) = *(_QWORD *)(v122 + 8);
            v123 = *(_QWORD *)(v122 + 8);
            if (v123)
              *(_QWORD *)(v123 + 16) = *(_QWORD *)(v122 + 16);
          }
          *(_QWORD *)v122 = v120;
          if (v120)
          {
            v126 = *((_QWORD *)v120 + 1);
            v124 = (uint64_t *)(v120 + 8);
            v125 = v126;
            v127 = v116 + 32 * v119;
            *(_QWORD *)(v127 + 8) = v126;
            if (v126)
              *(_QWORD *)(v125 + 16) = v127 + 8;
            *(_QWORD *)(v127 + 16) = v124;
            *v124 = v122;
          }
          v128 = (uint64_t *)v115[1];
          if (v128)
          {
            do
            {
              v129 = v128;
              v128 = (uint64_t *)*v128;
            }
            while (v128);
          }
          else
          {
            do
            {
              v129 = (uint64_t *)v115[2];
              v18 = *v129 == (_QWORD)v115;
              v115 = v129;
            }
            while (!v18);
          }
          v115 = v129;
        }
        while (v129 != v102 + 2);
      }
LABEL_174:
      if (v173 != (uint64_t *)v175)
        free(v173);
    }
    if (++v98 != v99)
      continue;
    break;
  }
  v97 = LODWORD(v170[1]);
  if (LODWORD(v170[1]))
    goto LABEL_214;
LABEL_216:
  if (*((_BYTE *)a1 + 224))
  {
    LLVMBuildRetVoid_0((uint64_t *)a1 + 11);
    if (*((_BYTE *)a1 + 224))
    {
      v152 = (uint64_t ***)a1[11];
      if (v152 != a1 + 13)
        free(v152);
      *((_BYTE *)a1 + 224) = 0;
    }
    v153 = 1;
  }
  else
  {
    v153 = 1;
  }
LABEL_223:
  v154 = v162[0];
  if (v163)
  {
    v155 = 32 * v163;
    v156 = (_QWORD **)(v162[0] + 16);
    do
    {
      if (((unint64_t)*(v156 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C58D7EF8(*v156);
      v156 += 4;
      v155 -= 32;
    }
    while (v155);
    v154 = v162[0];
  }
  MEMORY[0x1CAA32FB4](v154, 8);
  if (v167 != v169)
    free(v167);
  if (v170[0] != &v171)
    free(v170[0]);
  return (v5 | v153) & 1;
}

uint64_t sub_1C58D6E84()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C58D5CB0(v0);
}

void sub_1C58D6EAC(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E817E340;
  if (*(_BYTE *)(a1 + 256))
  {
    v1 = *(void **)(a1 + 120);
    if (v1 != (void *)(a1 + 136))
    {
      v2 = a1;
      free(v1);
      a1 = v2;
    }
    *(_BYTE *)(a1 + 256) = 0;
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C58D6F00(llvm::Pass *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E817E340;
  if (*((_BYTE *)this + 256))
  {
    v2 = (char *)*((_QWORD *)this + 15);
    if (v2 != (char *)this + 136)
      free(v2);
    *((_BYTE *)this + 256) = 0;
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C58D6F64()
{
  return "Soft Pointer Auth Lowering";
}

uint64_t sub_1C58D6F74(uint64_t a1, uint64_t **a2, const llvm::APInt *a3)
{
  return sub_1C58D5D90((uint64_t ***)(a1 + 32), a2, a3);
}

uint64_t sub_1C58D6F7C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t **v29;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  __int16 v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[48];
  void *v56;
  uint64_t v57;
  _BYTE v58[16];
  __int16 v59;
  void *v60[2];
  _QWORD v61[16];

  v61[15] = *MEMORY[0x1E0C80C00];
  if (a3[1] != (uint64_t *)2 || *(_DWORD *)(*(_QWORD *)**a3 + 8) != 8205)
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(*a3)[4] + 8) != 13
    || *(_DWORD *)(*(_QWORD *)(*a3)[4] + 8) >> 8 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 504) + 4))
  {
    return 0;
  }
  sub_1C4773D54((uint64_t)v60, a2, 0, 0, 0);
  v8 = *(unsigned __int8 **)(a2 - 32);
  v9 = llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)a1 + 1912), 0);
  v59 = 257;
  v10 = sub_1C4773E38((uint64_t *)v60, 49, v8, v9, (uint64_t)&v56);
  v11 = (unsigned __int8 *)sub_1C58D76B0(a1, (uint64_t *)v60, (uint64_t)v10, **a3, (*a3)[4]);
  v12 = *(_QWORD *)v8;
  v59 = 257;
  v14 = sub_1C4773E38((uint64_t *)v60, 49, v11, v12, (uint64_t)&v56);
  v15 = 0;
  v16 = *(_DWORD *)(a2 + 20);
  v17 = v16 & 0x7FFFFFF;
  v18 = (_QWORD *)(a2 - 32 * v17);
  v19 = *(unsigned __int8 *)(a2 + 16);
  if (v19 != 84)
  {
    if (v19 == 39)
      v15 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v15 = 2;
  }
  if (v16 < 0 && (v40 = *(v18 - 1), (v40 & 0xFFFFFFFF0) != 0))
    v20 = (*((_DWORD *)v18 - 3) - *(_DWORD *)((char *)v18 - v40));
  else
    v20 = 0;
  v21 = a2 - 32 * v15 - 32 * v20 - 32;
  v56 = v58;
  v57 = 0x800000000;
  v22 = v21 - (_QWORD)v18;
  if ((unint64_t)(v21 - (_QWORD)v18) >= 0x101)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v22 >> 5, 8);
    v23 = v57;
    v24 = v57;
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  if (v18 != (_QWORD *)v21)
  {
    v25 = (char *)v56 + 8 * v23;
    v26 = 32 * v17 - 32 * v15 - 32 * v20 - 32;
    do
    {
      v27 = *v18;
      v18 += 4;
      *v25++ = v27;
      v26 -= 32;
    }
    while (v26);
  }
  LODWORD(v57) = v24 + ((unint64_t)v22 >> 5);
  v53 = v55;
  v54 = 0x100000000;
  v28 = *(_DWORD *)(a2 + 20);
  if (v28 < 0)
  {
    v41 = *(_QWORD *)(a2 - 32 * (v28 & 0x7FFFFFF) - 8);
    if ((v41 & 0xFFFFFFFF0) != 0)
    {
      v42 = (v41 >> 4);
      v43 = a2;
      do
      {
        v44 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
        v45 = a2 - 32 * v44;
        v46 = (unsigned int *)(v43 - (*(_QWORD *)(v45 - 8) + 32 * v44));
        v47 = *v46;
        v48 = v45 + 32 * v47;
        v49 = v46[1] - v47;
        v50 = *((_QWORD *)v46 - 1);
        v51[0] = v48;
        v51[1] = v49;
        v51[2] = v50;
        if (*(_DWORD *)(v50 + 8) != 7)
          sub_1C623D924((uint64_t)&v53, (uint64_t)v51);
        v43 += 16;
        --v42;
      }
      while (v42);
    }
  }
  v29 = *(uint64_t ***)(a2 + 72);
  if (*(_BYTE *)(a2 + 16) == 33)
  {
    v38 = *(_QWORD *)(a2 - 96);
    v39 = *(_QWORD *)(a2 - 64);
    v52 = 257;
    v30 = (uint64_t)sub_1C623C480((uint64_t)v60, (uint64_t)v29, (uint64_t)v14, v38, v39, (uint64_t *)v56, v57, v13, (uint64_t)v53, v54, (uint64_t)v51);
  }
  else
  {
    v52 = 257;
    v30 = sub_1C5062DD8((uint64_t *)v60, v29, (uint64_t)v14, (uint64_t *)v56, v57, (uint64_t)v53, v54, (uint64_t)v51, 0);
  }
  v31 = (llvm::Value *)v30;
  *(_WORD *)(v30 + 18) = *(_WORD *)(v30 + 18) & 0xF003 | *(_WORD *)(a2 + 18) & 0xFFC;
  *(_QWORD *)(v30 + 64) = *(_QWORD *)(a2 + 64);
  llvm::Value::takeName((llvm::Value *)v30, (llvm::Value *)a2);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v31, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v32 = *(_QWORD *)(a2 + 24);
  v33 = *(_QWORD **)(a2 + 32);
  *v33 = v32;
  *(_QWORD *)(v32 + 8) = v33;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  v34 = (char *)v53;
  if ((_DWORD)v54)
  {
    v35 = 48 * v54;
    do
    {
      v36 = &v34[v35];
      v37 = *(void **)&v34[v35 - 24];
      if (v37)
      {
        *((_QWORD *)v36 - 2) = v37;
        operator delete(v37);
      }
      if (*(v36 - 25) < 0)
        operator delete(*((void **)v36 - 6));
      v35 -= 48;
    }
    while (v35);
    v34 = (char *)v53;
  }
  if (v34 != v55)
    free(v34);
  if (v56 != v58)
    free(v56);
  if (v60[0] != v61)
    free(v60[0]);
  return 1;
}

BOOL sub_1C58D73C8(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5)
{
  _BOOL8 result;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_1C58D74EC(a1, *(_QWORD *)a2, a3);
  if (result)
  {
    v10 = *(unsigned __int8 *)(a2 + 16);
    if (v10 == 84)
    {
      v11 = 0;
    }
    else if (v10 == 39)
    {
      v11 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v11 = 2;
    }
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = -(uint64_t)(v13 & 0x7FFFFFF);
    if (v13 < 0)
    {
      v20 = a2 - 32 * (v13 & 0x7FFFFFF);
      v21 = *(_QWORD *)(v20 - 8);
      if ((v21 & 0xFFFFFFFF0) != 0)
        v12 = *(_DWORD *)(v20 - 12) - *(_DWORD *)(v20 - v21);
      else
        v12 = 0;
    }
    result = 0;
    if (a5 == ((-32 * v11 + 32 * (unint64_t)-v12 - 32 * v14 - 32) >> 5))
    {
      if ((_DWORD)a5)
      {
        v15 = a5 - 1;
        v16 = a2;
        do
        {
          v17 = *a4++;
          result = sub_1C58D74EC(a1, **(_QWORD **)(v16 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v17);
          v19 = v15-- != 0;
          if (!result)
            break;
          v16 += 32;
        }
        while (v19);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL sub_1C58D74EC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 == 1)
      return *(_DWORD *)(a2 + 8) == 8205;
    else
      return llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)a1 + 1912), 0) == a2;
  }
  else
  {
    return *(_DWORD *)(a2 + 8) == 13
        && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 504) + 4) == *(_DWORD *)(a2 + 8) >> 8;
  }
}

_QWORD *sub_1C58D7568(uint64_t ***a1, int a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t *v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;

  if (a2)
  {
    if (a2 == 1)
    {
      v2 = ***a1;
      return (_QWORD *)(v2 + 1960);
    }
    return (_QWORD *)llvm::PointerType::get((llvm::PointerType *)(***a1 + 1912), 0);
  }
  else
  {
    v4 = **a1;
    v5 = *((_DWORD *)(*a1)[63] + 1);
    v8 = v5;
    if (v5 <= 63)
    {
      if (v5 <= 31)
      {
        switch(v5)
        {
          case 16:
            return (_QWORD *)(*v4 + 1936);
          case 8:
            return (_QWORD *)(*v4 + 1912);
          case 1:
            return (_QWORD *)(*v4 + 1888);
        }
      }
      else if (v5 == 32)
      {
        v2 = *v4;
        return (_QWORD *)(v2 + 1960);
      }
    }
    else
    {
      if (v5 == 64)
        return (_QWORD *)(*v4 + 1984);
      if (v5 == 128)
        return (_QWORD *)(*v4 + 2008);
    }
    v6 = sub_1C5270984(*v4 + 2168, &v8);
    result = (_QWORD *)*((_QWORD *)v6 + 1);
    if (!result)
    {
      result = (_QWORD *)sub_1C484358C(*v4 + 2040, 24, 3);
      v7 = v8;
      *result = v4;
      result[2] = 0;
      result[1] = (v7 << 8) | 0xDu;
      *((_QWORD *)v6 + 1) = result;
    }
  }
  return result;
}

uint64_t sub_1C58D76B0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v11 = *(uint64_t ***)(a1 + 24);
  }
  else
  {
    v15 = 0x100000002;
    v16 = 0;
    v11 = (uint64_t **)sub_1C58D77BC((uint64_t ***)a1, "__ptrauth_auth", 0xEuLL, 2, (int *)&v15, 3);
    v10 = v12;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v12;
  }
  v18[0] = a3;
  v18[1] = a4;
  v18[2] = a5;
  v17 = 257;
  v13 = sub_1C4774778(a2, v11, v10, v18, 3, (uint64_t)&v15, 0);
  *(_QWORD *)(v13 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v13 + 64), **(uint64_t ***)v13, -1, 37);
  return v13;
}

llvm::PointerType *sub_1C58D77BC(uint64_t ***a1, unsigned __int8 *a2, unint64_t a3, int a4, int *a5, uint64_t a6)
{
  uint64_t **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  llvm::PointerType *v17;
  llvm::PointerType *inserted;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t **)sub_1C58D7568(a1, a4);
  v20 = v22;
  v21 = 0x400000000;
  if (a6)
  {
    v12 = 4 * a6;
    do
    {
      v13 = sub_1C58D7568(a1, *a5);
      v14 = v21;
      if (v21 >= (unint64_t)HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v21 + 1, 8);
        v14 = v21;
      }
      *((_QWORD *)v20 + v14) = v13;
      v15 = (v21 + 1);
      LODWORD(v21) = v21 + 1;
      ++a5;
      v12 -= 4;
    }
    while (v12);
    v16 = (uint64_t *)v20;
  }
  else
  {
    v15 = 0;
    v16 = v22;
  }
  v17 = (llvm::PointerType *)llvm::FunctionType::get(v11, v16, v15, 0);
  inserted = llvm::Module::getOrInsertFunction((uint64_t)*a1, a2, a3, v17, 0);
  if (v20 != v22)
    free(v20);
  return inserted;
}

uint64_t sub_1C58D7910(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    v15 = 0x100000002;
    v16 = 0;
    v11 = (uint64_t **)sub_1C58D77BC((uint64_t ***)a1, "__ptrauth_sign", 0xEuLL, 2, (int *)&v15, 3);
    v10 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
  }
  v18[0] = a3;
  v18[1] = a4;
  v18[2] = a5;
  v17 = 257;
  v13 = sub_1C4774778(a2, v11, v10, v18, 3, (uint64_t)&v15, 0);
  *(_QWORD *)(v13 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v13 + 64), **(uint64_t ***)v13, -1, 37);
  return v13;
}

uint64_t sub_1C58D7A1C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  int v13[8];
  __int16 v14;
  uint64_t v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = *(uint64_t ***)(a1 + 56);
  }
  else
  {
    *(_QWORD *)v13 = 0;
    v9 = (uint64_t **)sub_1C58D77BC((uint64_t ***)a1, "__ptrauth_blend", 0xFuLL, 0, v13, 2);
    v8 = v10;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
  }
  v15[0] = a3;
  v15[1] = a4;
  v14 = 257;
  v11 = sub_1C4774778(a2, v9, v8, v15, 2, (uint64_t)v13, 0);
  *(_QWORD *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v11 + 64), **(uint64_t ***)v11, -1, 37);
  return v11;
}

uint64_t sub_1C58D7B0C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  for (i = *(_QWORD *)(result + 8); i; i = *(_QWORD *)(i + 8))
  {
    v13 = a2;
    v14 = 0;
    v6 = *(_QWORD *)(i + 24);
    v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(v6 - 8);
    else
      v8 = v6 - 32 * (v7 & 0x7FFFFFF);
    LODWORD(v14) = (unint64_t)(i - v8) >> 5;
    v9 = *(unsigned __int8 *)(v6 + 16);
    if (v9 == 3)
    {
      v10 = a3;
      v11 = v6;
      v12 = a2;
    }
    else
    {
      if (v9 < 0x1C)
      {
        if (v9 <= 0x14)
          result = sub_1C58D7B0C(v6, &v13, a3);
        continue;
      }
      v12 = (uint64_t *)&v13;
      v10 = a3;
      v11 = v6;
    }
    result = sub_1C58D7BCC(v10, v11, v12);
  }
  return result;
}

uint64_t sub_1C58D7BCC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  unsigned int v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;

  v6 = *a1;
  v41 = 0;
  result = sub_1C4DCDF60(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), a2, &v41);
  v8 = v41;
  if ((_DWORD)result)
    goto LABEL_9;
  v42 = v41;
  v9 = *(_DWORD *)(v6 + 8);
  v10 = *(unsigned int *)(v6 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    v11 = 2 * v10;
    goto LABEL_26;
  }
  v11 = *(_DWORD *)(v6 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(v6 + 12) <= v10 >> 3)
  {
LABEL_26:
    v23 = *(_QWORD *)v6;
    v24 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    v26 = ((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8);
    if ((v26 + 1) > 0x40)
      v27 = v26 + 1;
    else
      v27 = 64;
    *(_DWORD *)(v6 + 16) = v27;
    v28 = operator new(32 * v27, (std::align_val_t)8uLL);
    *(_QWORD *)v6 = v28;
    if (v23)
    {
      *(_QWORD *)(v6 + 8) = 0;
      v29 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v29)
      {
        v30 = 32 * v29;
        do
        {
          *v28 = -4096;
          v28 += 4;
          v30 -= 32;
        }
        while (v30);
      }
      if ((_DWORD)v10)
      {
        v31 = (_QWORD *)(v23 + 16);
        v32 = 32 * v10;
        do
        {
          v33 = *(v31 - 2);
          if ((v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v43 = 0;
            sub_1C4DCDF60(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), v33, &v43);
            v34 = v43;
            *v43 = v33;
            v34[1] = *(v31 - 1);
            v35 = (_QWORD *)*v31;
            v34[2] = *v31;
            v36 = v34 + 2;
            v37 = v31[1];
            v34[3] = v37;
            if (v37)
            {
              v38 = 0;
              v35[2] = v36;
              *(v31 - 1) = v31;
              *v31 = 0;
              v31[1] = 0;
            }
            else
            {
              v34[1] = (uint64_t)v36;
              v38 = (_QWORD *)*v31;
            }
            ++*(_DWORD *)(v6 + 8);
            sub_1C58D7EF8(v38);
          }
          v31 += 4;
          v32 -= 32;
        }
        while (v32);
      }
      MEMORY[0x1CAA32FB4](v23, 8);
      v28 = *(_QWORD **)v6;
      LODWORD(v39) = *(_DWORD *)(v6 + 16);
    }
    else
    {
      *(_QWORD *)(v6 + 8) = 0;
      v39 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v39)
      {
        v40 = 0;
        do
        {
          v28[v40] = -4096;
          v40 += 4;
        }
        while (4 * v39 != v40);
      }
    }
    result = sub_1C4DCDF60((uint64_t)v28, v39, a2, &v42);
    v9 = *(_DWORD *)(v6 + 8);
    v8 = v42;
  }
  *(_DWORD *)(v6 + 8) = v9 + 1;
  if (*v8 != -4096)
    --*(_DWORD *)(v6 + 12);
  v8[3] = 0;
  v8[2] = 0;
  *v8 = a2;
  v8[1] = (uint64_t)(v8 + 2);
  v12 = a1[1];
  v13 = *(unsigned int *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v12, v12 + 16, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = a2;
  ++*(_DWORD *)(v12 + 8);
LABEL_9:
  if (a3)
  {
    v14 = (uint64_t **)(v8 + 1);
    do
    {
      v16 = v14 + 1;
      v15 = v14[1];
      if (v15)
      {
        v17 = *((_DWORD *)a3 + 2);
        while (1)
        {
          while (1)
          {
            v18 = (uint64_t **)v15;
            v19 = *((_DWORD *)v15 + 8);
            if (v17 >= v19)
              break;
            v15 = *v18;
            v16 = v18;
            if (!*v18)
              goto LABEL_20;
          }
          if (v19 >= v17)
            break;
          v15 = v18[1];
          if (!v15)
          {
            v16 = v18 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
        v18 = v14 + 1;
LABEL_20:
        v20 = (uint64_t *)v18;
        v18 = (uint64_t **)operator new(0x40uLL);
        *((_DWORD *)v18 + 8) = *((_DWORD *)a3 + 2);
        v18[7] = 0;
        v18[6] = 0;
        v18[5] = (uint64_t *)(v18 + 6);
        *v18 = 0;
        v18[1] = 0;
        v18[2] = v20;
        *v16 = (uint64_t *)v18;
        v21 = (uint64_t *)**v14;
        v22 = (uint64_t *)v18;
        if (v21)
        {
          *v14 = v21;
          v22 = *v16;
        }
        result = (uint64_t)sub_1C4768E74(v14[1], v22);
        v14[2] = (uint64_t *)((char *)v14[2] + 1);
      }
      v14 = v18 + 5;
      a3 = (uint64_t *)*a3;
    }
    while (a3);
  }
  return result;
}

void sub_1C58D7EF8(_QWORD *a1)
{
  if (a1)
  {
    sub_1C58D7EF8(*a1);
    sub_1C58D7EF8(a1[1]);
    sub_1C58D7EF8(a1[6]);
    operator delete(a1);
  }
}

llvm::Value **sub_1C58D7F38(uint64_t ***a1, uint64_t ElementPtr, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  char v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  llvm::Value *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  llvm::Type *v28;
  uint64_t v29;
  llvm::UndefValue *Impl;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::ConstantInt *v39;
  unint64_t v40;
  unint64_t v41;
  llvm::ValueHandleBase *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  llvm::ConstantAggregateZero *v47;
  int v48;
  BOOL v49;
  llvm::FixedVectorType ***v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v54;
  llvm::PointerType *v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t **v62;
  llvm::Type **v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t *v67;
  llvm::Type *v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[16];
  __int16 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!a4 || *(unsigned __int8 *)(a4 + 16) - 11 <= 0xFFFFFFFC)
  {
    if (!*((_BYTE *)a1 + 224))
    {
      v67 = **a1;
      v55 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v67 + 1576), 0, 0, 0);
      v70 = "ptrauth_soft_init";
      v73 = 259;
      v56 = (uint64_t *)*a1;
      v57 = (char *)operator new(0x80uLL);
      *((_DWORD *)v57 + 7) = *((_DWORD *)v57 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v57 = 0;
      llvm::Function::Function((uint64_t *)v57 + 1, v55, 8, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v70, (uint64_t)v56);
      sub_1C5F50894("llvm.global_ctors", (uint64_t)*a1, (uint64_t)(v57 + 8), 0, 0);
      v73 = 257;
      v58 = operator new();
      *(_QWORD *)v58 = *v67 + 1600;
      *(_QWORD *)(v58 + 8) = 0;
      v59 = *(_DWORD *)(v58 + 20) & 0xC0000000;
      *(_DWORD *)(v58 + 16) = 22;
      *(_DWORD *)(v58 + 20) = v59;
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v58 + 32) = 0;
      *(_QWORD *)(v58 + 40) = v58 + 40;
      *(_QWORD *)(v58 + 48) = v58 + 40;
      *(_QWORD *)(v58 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v57 + 80), (_QWORD *)v58);
      v60 = *((_QWORD *)v57 + 10);
      *(_QWORD *)(v58 + 32) = v57 + 80;
      *(_QWORD *)(v58 + 24) = v60;
      *(_QWORD *)(v60 + 8) = v58 + 24;
      *((_QWORD *)v57 + 10) = v58 + 24;
      llvm::Value::setName((uint64_t ***)v58, (uint64_t)&v70);
      v70 = (void *)v58;
      sub_1C62B0864((uint64_t)(a1 + 11), (llvm::BasicBlock **)&v70);
    }
    v14 = (uint64_t *)sub_1C58D85EC((uint64_t)a1, (uint64_t)(a1 + 11), a4, a5);
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15 != 1)
      ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(llvm::GetElementPtrInst **)(ElementPtr + 24), (uint64_t *)ElementPtr, *(llvm::Value **)a3, v15, 1, 0, 0);
    llvm::DataLayout::getAlignment(a1[17][7][5] + 272, *v14);
    v17 = v16;
    v18 = (char *)operator new(0x80uLL);
    v19 = v18;
    *((_DWORD *)v18 + 21) = *((_DWORD *)v18 + 21) & 0x38000000 | 2;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 2) = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 5) = 0;
    *((_QWORD *)v18 + 6) = 0;
    *((_QWORD *)v18 + 4) = 0;
    v20 = (uint64_t *)(v18 + 32);
    *((_QWORD *)v18 + 8) = **(_QWORD **)*v14 + 1576;
    v21 = (llvm::Value *)(v18 + 64);
    *((_QWORD *)v18 + 3) = v18 + 64;
    *((_QWORD *)v18 + 7) = v18 + 64;
    *((_QWORD *)v18 + 9) = 0;
    v18[80] = 61;
    v18[81] = 0;
    *((_WORD *)v18 + 41) = 0;
    *((_DWORD *)v18 + 21) = 2;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *((_DWORD *)v18 + 30) = 0;
    *(_QWORD *)v18 = v14;
    v24 = v14[1];
    v23 = v14 + 1;
    v22 = v24;
    *((_QWORD *)v18 + 1) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = v18 + 8;
    *((_QWORD *)v18 + 2) = v23;
    *v23 = v18;
    if (*((_QWORD *)v18 + 4))
    {
      **((_QWORD **)v18 + 6) = *((_QWORD *)v18 + 5);
      v66 = *((_QWORD *)v18 + 5);
      if (v66)
        *(_QWORD *)(v66 + 16) = *((_QWORD *)v18 + 6);
    }
    *v20 = ElementPtr;
    if (ElementPtr)
    {
      v27 = *(_QWORD *)(ElementPtr + 8);
      v26 = (uint64_t **)(ElementPtr + 8);
      v25 = v27;
      *((_QWORD *)v18 + 5) = v27;
      if (v27)
        *(_QWORD *)(v25 + 16) = v18 + 40;
      *((_QWORD *)v18 + 6) = v26;
      *v26 = v20;
    }
    *((_WORD *)v18 + 41) = 2 * (v17 & 0x3F);
    v18[124] = 1;
    v73 = 257;
    ((void (*)(uint64_t **, llvm::Value *, void **, uint64_t **, uint64_t **))(*a1[21])[2])(a1[21], v21, &v70, a1[17], a1[18]);
    v29 = *((unsigned int *)a1 + 24);
    if (!(_DWORD)v29)
      return llvm::Constant::getNullValue(*(llvm::Constant **)a4, v28);
    v61 = a1[11];
    v62 = &v61[2 * v29];
    v63 = (llvm::Type **)(v19 + 112);
    while (1)
    {
      v64 = *(_DWORD *)v61;
      v65 = (unsigned __int8 *)v61[1];
      if (v65)
      {
        if (!v64)
        {
          v68 = (llvm::Type *)v61[1];
          llvm::MetadataTracking::track((uint64_t)&v68, v65, 2);
          v28 = *v63;
          goto LABEL_70;
        }
      }
      else
      {
        v28 = *v63;
        if (!*v63 && (v19[87] & 0x20) == 0)
          goto LABEL_67;
        if (!v64)
        {
          v68 = 0;
LABEL_70:
          if (v28)
            llvm::MetadataTracking::untrack((uint64_t)(v19 + 112), (unsigned __int8 *)v28);
          v28 = v68;
          *v63 = v68;
          if (v28)
            llvm::MetadataTracking::retrack((uint64_t)&v68, (unsigned __int8 *)v28, (uint64_t)(v19 + 112));
          goto LABEL_67;
        }
      }
      llvm::Value::setMetadata(v21, *(_DWORD *)v61, (llvm::MDNode *)v65);
LABEL_67:
      v61 += 2;
      if (v61 == v62)
        return llvm::Constant::getNullValue(*(llvm::Constant **)a4, v28);
    }
  }
  v70 = v72;
  v71 = 0x1000000000;
  v10 = *(_DWORD *)(a4 + 20);
  v11 = v10 & 0x7FFFFFF;
  if ((v10 & 0x7FFFFFFu) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v11, 8);
    v10 = *(_DWORD *)(a4 + 20);
  }
  if ((v10 & 0x40000000) != 0)
  {
    v13 = *(uint64_t **)(a4 - 8);
    v12 = v10 & 0x7FFFFFF;
    if ((v10 & 0x7FFFFFF) == 0)
      goto LABEL_26;
  }
  else
  {
    v12 = v10 & 0x7FFFFFF;
    v13 = (uint64_t *)(a4 - 32 * v12);
    if ((v10 & 0x7FFFFFF) == 0)
      goto LABEL_26;
  }
  v31 = v71;
  v32 = 32 * v12;
  do
  {
    v33 = *v13;
    if (v31 >= HIDWORD(v71))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v31 + 1, 8);
      v31 = v71;
    }
    *((_QWORD *)v70 + v31) = v33;
    v31 = v71 + 1;
    LODWORD(v71) = v71 + 1;
    v13 += 4;
    v32 -= 32;
  }
  while (v32);
LABEL_26:
  v36 = (_QWORD *)*a5;
  v34 = a5 + 1;
  v35 = v36;
  if (v36 != v34)
  {
    do
    {
      v37 = *((unsigned int *)v35 + 8);
      v38 = ***a1;
      v39 = *(llvm::ConstantInt **)(v38 + 1960);
      v40 = *(unsigned int *)(v38 + 1968);
      v69 = v40 >> 8;
      if (v40 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v68, v37, 0);
      }
      else
      {
        if (v40 <= 0xFF)
          v41 = 0;
        else
          v41 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v40);
        v68 = (llvm::Type *)(v41 & v37);
      }
      v42 = llvm::ConstantInt::get(v39, (llvm::LLVMContext *)&v68, (const llvm::APInt *)v11);
      if (v69 >= 0x41 && v68)
        MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
      v43 = *(unsigned int *)(a3 + 8);
      if (v43 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v43 + 1, 8);
        v43 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v43) = v42;
      ++*(_DWORD *)(a3 + 8);
      v44 = sub_1C58D7F38(a1, ElementPtr, a3, *((_QWORD *)v70 + v37), v35 + 5);
      *((_QWORD *)v70 + v37) = v44;
      --*(_DWORD *)(a3 + 8);
      v45 = (_QWORD *)v35[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v35[2];
          v49 = *v46 == (_QWORD)v35;
          v35 = v46;
        }
        while (!v49);
      }
      v35 = v46;
    }
    while (v46 != v34);
  }
  v47 = *(llvm::ConstantAggregateZero **)a4;
  v48 = *(unsigned __int8 *)(*(_QWORD *)a4 + 8);
  if (*(_QWORD *)a4)
    v49 = v48 == 16;
  else
    v49 = 0;
  if (v49)
  {
    v52 = (uint64_t)llvm::ConstantStruct::get(v47, (llvm::Type *)v70, v71);
    goto LABEL_53;
  }
  v50 = (llvm::FixedVectorType ***)v70;
  v51 = v71;
  if (v47 && v48 == 17)
  {
    v52 = (uint64_t)llvm::ConstantArray::get(v47, (llvm::Type *)v70, v71);
LABEL_53:
    Impl = (llvm::UndefValue *)v52;
    goto LABEL_54;
  }
  Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v70, (llvm::Type *)v71);
  if (!Impl)
  {
    llvm::FixedVectorType::get(**v50, (llvm::Type *)v51);
    v52 = sub_1C537B3A4(**v54 + 1288, (uint64_t)v54, v50, v51);
    goto LABEL_53;
  }
LABEL_54:
  if (v70 != v72)
    free(v70);
  return (llvm::Value **)Impl;
}

unsigned __int8 *sub_1C58D85EC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Constant *v12;
  llvm::Constant *v13;
  char *AsInstruction;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  const llvm::APInt *v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::ConstantInt *v52;
  unint64_t v53;
  unint64_t v54;
  llvm::ValueHandleBase *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 **v60;
  int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned __int8 *v67[4];
  __int16 v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[16];
  __int16 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(a3 + 16);
  if (a3 && v8 == 3)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a3 - 32) - 32 * (*(_DWORD *)(*(_QWORD *)(a3 - 32) + 20) & 0x7FFFFFF));
    v10 = *v9;
    v11 = v9[4];
    v12 = (llvm::Constant *)v9[8];
    v13 = (llvm::Constant *)v9[12];
    if ((llvm::Constant::isNullValue(v12) & 1) == 0)
    {
      if ((llvm::Constant::isNullValue(v13) & 1) != 0)
        v13 = v12;
      else
        v13 = (llvm::Constant *)sub_1C58D7A1C(a1, (uint64_t *)a2, (uint64_t)v12, (uint64_t)v13);
    }
    v64 = (unsigned __int8 *)sub_1C58D7910(a1, (uint64_t *)a2, v10, v11, (uint64_t)v13);
    v65 = *(_QWORD *)a3;
    v75 = 257;
    return sub_1C4773E38((uint64_t *)a2, 49, v64, v65, (uint64_t)&v72);
  }
  if (!a3 || v8 != 5)
  {
    v31 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    v72 = v74;
    v73 = 0x1000000000;
    if (v31 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v31, 8);
      v32 = v73;
      v34 = v72;
      v33 = v73;
    }
    else
    {
      v32 = 0;
      if (!(_DWORD)v31)
      {
LABEL_31:
        LODWORD(v73) = v32 + v31;
        v39 = (_QWORD *)*a4;
        v38 = a4 + 1;
        v37 = v39;
        if (v39 != v38)
        {
          do
          {
            v40 = *((unsigned int *)v37 + 8);
            v41 = v72;
            v41[v40] = sub_1C58D85EC(a1, a2, *((_QWORD *)v72 + v40), v37 + 5);
            v42 = (_QWORD *)v37[1];
            if (v42)
            {
              do
              {
                v43 = v42;
                v42 = (_QWORD *)*v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                v43 = (_QWORD *)v37[2];
                v30 = *v43 == (_QWORD)v37;
                v37 = v43;
              }
              while (!v30);
            }
            v37 = v43;
          }
          while (v43 != v38);
        }
        v44 = *(_DWORD *)(*(_QWORD *)a3 + 8);
        AsInstruction = (char *)llvm::UndefValue::get(*(llvm::UndefValue **)a3, (llvm::Type *)a2);
        v69 = 0;
        v46 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
        if (v46)
        {
          v47 = 0;
          v48 = v44 & 0xFE;
          do
          {
            v49 = *((_QWORD *)v72 + v47);
            if (v48 == 18)
            {
              v50 = v47;
              v68 = 257;
              v51 = **(_QWORD **)(a2 + 64);
              v52 = *(llvm::ConstantInt **)(v51 + 1984);
              v53 = *(unsigned int *)(v51 + 1992);
              v71 = v53 >> 8;
              if (v53 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v70, v50, 0);
              }
              else
              {
                if (v53 <= 0xFF)
                  v54 = 0;
                else
                  v54 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v53);
                v70 = v54 & v50;
              }
              v55 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v70, v45);
              if (v71 >= 0x41 && v70)
                MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
              v56 = (uint64_t)sub_1C4773154((uint64_t *)a2, (uint64_t)AsInstruction, v49, (uint64_t)v55, (uint64_t)v67);
            }
            else
            {
              v68 = 257;
              v56 = sub_1C506D788(a2, (uint64_t)AsInstruction, v49, &v69, 1, (uint64_t)v67);
            }
            AsInstruction = (char *)v56;
            v47 = v69 + 1;
            v69 = v47;
          }
          while (v47 != v46);
        }
        if (v72 != v74)
          free(v72);
        return (unsigned __int8 *)AsInstruction;
      }
      v33 = 0;
      v34 = v74;
    }
    v35 = &v34[8 * v33];
    v36 = -32 * v31;
    do
    {
      *v35++ = *(_QWORD *)(a3 + v36);
      v36 += 32;
    }
    while (v36);
    goto LABEL_31;
  }
  AsInstruction = llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)a3, 0);
  v17 = (_QWORD *)*a4;
  v15 = a4 + 1;
  v16 = v17;
  if (v17 != v15)
  {
    do
    {
      v18 = *((unsigned int *)v16 + 8);
      v19 = sub_1C58D85EC(a1, a2, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v18), v16 + 5);
      v20 = *((_DWORD *)AsInstruction + 5);
      if ((v20 & 0x40000000) != 0)
        v21 = (char *)*((_QWORD *)AsInstruction - 1);
      else
        v21 = &AsInstruction[-32 * (v20 & 0x7FFFFFF)];
      v22 = &v21[32 * v18];
      if (*(_QWORD *)v22)
      {
        **((_QWORD **)v22 + 2) = *((_QWORD *)v22 + 1);
        v23 = *((_QWORD *)v22 + 1);
        if (v23)
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v22 + 2);
      }
      *(_QWORD *)v22 = v19;
      if (v19)
      {
        v26 = *(_QWORD *)(v19 + 8);
        v24 = (char **)(v19 + 8);
        v25 = v26;
        v27 = &v21[32 * v18];
        *((_QWORD *)v27 + 1) = v26;
        if (v26)
          *(_QWORD *)(v25 + 16) = v27 + 8;
        *((_QWORD *)v27 + 2) = v24;
        *v24 = v22;
      }
      v28 = (_QWORD *)v16[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v16[2];
          v30 = *v29 == (_QWORD)v16;
          v16 = v29;
        }
        while (!v30);
      }
      v16 = v29;
    }
    while (v29 != v15);
  }
  v75 = 257;
  (*(void (**)(_QWORD, char *, void **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 80) + 16))(*(_QWORD *)(a2 + 80), AsInstruction, &v72, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));
  v57 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v57)
  {
    v58 = *(_QWORD *)a2;
    v59 = *(_QWORD *)a2 + 16 * v57;
    v60 = (unsigned __int8 **)(AsInstruction + 48);
    do
    {
      v61 = *(_DWORD *)v58;
      v62 = *(unsigned __int8 **)(v58 + 8);
      if (v62)
      {
        if (!v61)
        {
          v67[0] = *(unsigned __int8 **)(v58 + 8);
          llvm::MetadataTracking::track((uint64_t)v67, v62, 2);
LABEL_68:
          if (v67 == v60)
          {
            if (v67[0])
              llvm::MetadataTracking::untrack((uint64_t)v67, v67[0]);
          }
          else
          {
            if (*v60)
              llvm::MetadataTracking::untrack((uint64_t)(AsInstruction + 48), *v60);
            v63 = v67[0];
            *v60 = v67[0];
            if (v63)
              llvm::MetadataTracking::retrack((uint64_t)v67, v63, (uint64_t)(AsInstruction + 48));
          }
          goto LABEL_65;
        }
      }
      else
      {
        if (!*v60 && (AsInstruction[23] & 0x20) == 0)
          goto LABEL_65;
        if (!v61)
        {
          v67[0] = 0;
          goto LABEL_68;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)AsInstruction, v61, (llvm::MDNode *)v62);
LABEL_65:
      v58 += 16;
    }
    while (v58 != v59);
  }
  return (unsigned __int8 *)AsInstruction;
}

_QWORD *llvm::ValueProfileCollector::ValueProfileCollector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)operator new();
  *v6 = a2;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = 0;
  *a1 = v6;
  return a1;
}

{
  _QWORD *v6;

  v6 = (_QWORD *)operator new();
  *v6 = a2;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = 0;
  *a1 = v6;
  return a1;
}

void llvm::ValueProfileCollector::~ValueProfileCollector(llvm::ValueProfileCollector *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x20C40DC1BFBCFLL);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x20C40DC1BFBCFLL);
}

char *sub_1C58D8B98(char *result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 - 32);
  if (v2 && !*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72))
  {
    v3 = *(_DWORD *)(v2 + 36);
    if (v3 > 196)
    {
      if (v3 <= 312 && (v3 == 197 || v3 == 199))
        return sub_1C62B0B8C(result, a2);
    }
    else if (v3 == 194)
    {
      return sub_1C62B0B8C(result, a2);
    }
  }
  return (char *)sub_1C62B0AA8((uint64_t)result, a2);
}

uint64_t sub_1C58D8C2C(uint64_t a1)
{
  llvm *v2;
  BOOL v3;
  llvm::raw_ostream *v4;
  void *v5;

  bzero((void *)(a1 + 8), 0x8D0uLL);
  if (byte_1ED817F28)
    v3 = byte_1ED817FE8 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = (llvm::raw_ostream *)llvm::errs(v2);
    v5 = (void *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0x6EuLL)
    {
      qmemcpy(v5, "warning: Option -tsan-compound-read-before-write has no effect when -tsan-instrument-read-before-write is set.\n", 111);
      *((_QWORD *)v4 + 4) += 111;
    }
    else
    {
      llvm::raw_ostream::write(v4, "warning: Option -tsan-compound-read-before-write has no effect when -tsan-instrument-read-before-write is set.\n", 0x6FuLL);
    }
  }
  return a1;
}

uint64_t sub_1C58D8CD0(uint64_t *a1, uint64_t **a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t **v9;
  int v10;
  int v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v16;
  int v17;
  llvm::LLVMContext **v18;
  llvm::LLVMContext *v19;
  void *v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  char *v31;
  unint64_t v32;
  _BYTE *v33;
  char v34;
  const void *p_p;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  llvm::PointerType *v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  const void *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  llvm::PointerType *v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  uint64_t **v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t v69;
  llvm::PointerType *v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  const void *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t **v77;
  uint64_t *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t v82;
  llvm::PointerType *v83;
  uint64_t *v84;
  uint64_t v85;
  char v86;
  const void *v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t **v94;
  uint64_t v95;
  llvm::PointerType *v96;
  uint64_t *v97;
  uint64_t v98;
  char v99;
  const void *v100;
  unint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  unint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t **v107;
  uint64_t v108;
  llvm::PointerType *v109;
  uint64_t *v110;
  uint64_t v111;
  char v112;
  const void *v113;
  unint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  unint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t **v120;
  uint64_t v121;
  llvm::PointerType *v122;
  uint64_t *v123;
  uint64_t v124;
  char v125;
  const void *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t **v133;
  uint64_t v134;
  llvm::PointerType *v135;
  uint64_t *v136;
  uint64_t v137;
  char v138;
  const void *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t **v146;
  uint64_t v147;
  llvm::PointerType *v148;
  uint64_t *v149;
  uint64_t v150;
  char v151;
  const void *v152;
  unint64_t v153;
  uint64_t v154;
  _WORD *v155;
  unint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t **v159;
  uint64_t v160;
  llvm::PointerType *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  _BYTE *v165;
  uint64_t **v166;
  std::string *v167;
  int v168;
  void *v169;
  std::string *v170;
  unint64_t size;
  uint64_t v172;
  uint64_t v173;
  llvm::PointerType *v174;
  uint64_t *v175;
  uint64_t v176;
  std::string *v177;
  int v178;
  void *v179;
  std::string *v180;
  unint64_t v181;
  std::string::size_type v182;
  std::string::size_type v183;
  _BYTE *v184;
  llvm::PointerType *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  llvm::PointerType **v191;
  const std::string::value_type *v192;
  unint64_t v193;
  std::string *v194;
  std::string::size_type v195;
  std::string *v196;
  int v197;
  void *v198;
  std::string *v199;
  unint64_t v200;
  _BYTE *v201;
  std::string::size_type v202;
  std::string::size_type v203;
  llvm::PointerType *v204;
  std::string *v205;
  int v206;
  void *v207;
  std::string *v208;
  unint64_t v209;
  _BYTE *v210;
  std::string::size_type v211;
  std::string::size_type v212;
  llvm::PointerType *v213;
  uint64_t *v214;
  uint64_t v215;
  _DWORD *v216;
  int v217;
  uint64_t v218;
  uint64_t **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t **v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t **v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t **v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t **v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t **v244;
  int v245;
  uint64_t **v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  _BOOL4 v253;
  uint64_t v254;
  char v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t *v260;
  llvm::Value *v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  _BOOL4 v265;
  const llvm::APInt *v266;
  unsigned __int8 *v267;
  llvm::ConstantInt *v268;
  llvm::ValueHandleBase *v269;
  int v270;
  int v271;
  uint64_t **v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  void **v276;
  uint64_t **v277;
  uint64_t v278;
  unint64_t v279;
  int v280;
  _BOOL4 v281;
  const char *v282;
  int v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t ***v290;
  uint64_t ***v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t ***v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t v307;
  const llvm::APInt *v308;
  int v309;
  unsigned __int8 *v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  uint64_t *v315;
  llvm::PointerType *v316;
  unsigned __int8 *v317;
  unsigned int v318;
  unsigned int v319;
  int v320;
  uint64_t *v321;
  llvm::PointerType *v322;
  unsigned __int8 *v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t **v327;
  int v328;
  uint64_t *v329;
  llvm::PointerType *v330;
  unsigned __int8 *v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  int v335;
  uint64_t *v336;
  llvm::PointerType *v337;
  int v338;
  uint64_t *v339;
  uint64_t **v340;
  uint64_t v341;
  char *v342;
  llvm::Value *v343;
  uint64_t v344;
  uint64_t v345;
  llvm::Value *v346;
  uint64_t v347;
  const llvm::APInt *v348;
  uint64_t *v349;
  uint64_t **v350;
  uint64_t v351;
  unsigned __int8 *v352;
  unsigned __int8 *v353;
  uint64_t v354;
  unsigned __int8 *v355;
  const llvm::APInt *v356;
  uint64_t *v357;
  uint64_t **v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  llvm::Value *v362;
  char *v363;
  uint64_t v364;
  unsigned __int8 *v365;
  const llvm::APInt *v366;
  char *v367;
  uint64_t v368;
  llvm::Value *v369;
  char *v370;
  uint64_t v371;
  unsigned __int8 *v372;
  uint64_t *v373;
  unsigned __int8 *v374;
  uint64_t *v375;
  const llvm::APInt *v376;
  const llvm::APInt *v377;
  uint64_t *v378;
  uint64_t **v379;
  uint64_t v380;
  unsigned __int8 *v381;
  llvm::Type *v382;
  uint64_t v383;
  llvm::UndefValue *v384;
  uint64_t v385;
  llvm::Value *v386;
  uint64_t v387;
  _QWORD *v388;
  _DWORD *v389;
  int v390;
  _DWORD *v391;
  _DWORD *v392;
  int v393;
  _DWORD *v394;
  _DWORD *v395;
  int v396;
  _DWORD *v397;
  _DWORD *v398;
  int v399;
  int v400;
  uint64_t *v401;
  uint64_t i;
  uint64_t v403;
  _BOOL4 v404;
  BOOL v405;
  int v406;
  int v407;
  BOOL v408;
  uint64_t v409;
  uint64_t *v410;
  unsigned __int8 *v411;
  uint64_t v412;
  unsigned __int8 *v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t **v416;
  uint64_t v417;
  unsigned __int8 *v418;
  uint64_t v419;
  unsigned __int8 *v420;
  uint64_t v421;
  unsigned __int8 *v422;
  unsigned __int8 *v423;
  uint64_t v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t *v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  unsigned __int8 v431;
  int v432;
  unsigned int v433;
  int v434;
  int v435;
  uint64_t v436;
  const void *v437;
  uint64_t *v438;
  uint64_t *v439;
  _QWORD *v440;
  _QWORD *v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t **v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t **v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t *v453;
  _QWORD *v454;
  _QWORD *v455;
  uint64_t *v456;
  _QWORD **v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t Declaration;
  const llvm::APInt *v461;
  uint64_t v462;
  uint64_t **v463;
  llvm::ConstantInt *v464;
  llvm::ValueHandleBase *v465;
  uint64_t **v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t **v470;
  uint64_t v471;
  unint64_t v473;
  uint64_t v476;
  uint64_t *v477;
  int v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  uint64_t **v482;
  int v483;
  uint64_t **v484;
  _BOOL4 v485;
  uint64_t *v486;
  uint64_t v487;
  std::string v488;
  std::string v489;
  void *v490;
  char v491;
  void *v492;
  char v493;
  void *v494;
  void *__p;
  __int128 v496;
  _BYTE v497[120];
  std::string v498;
  _BYTE v499[40];
  std::string v500;
  std::string v501;
  _BYTE v502[40];
  void *v503;
  __int128 v504;
  _BYTE v505[32];
  void *v506;
  __int128 v507;
  _WORD v508[32];
  void *v509;
  __int128 v510;
  uint64_t v511;
  __int16 v512;
  void *v513;
  __int128 v514;
  uint64_t v515;
  __int16 v516;
  void *v517;
  __int128 v518;
  _BYTE v519[64];
  void *v520;
  __int128 v521;
  _BYTE v522[64];
  void *v523;
  __int128 v524;
  _BYTE v525[64];
  void *v526;
  __int128 v527;
  _BYTE v528[32];
  void *v529;
  __int128 v530;
  _BYTE v531[32];
  void *v532;
  const char *v533;
  uint64_t *v534;
  _QWORD **v535;
  void *v536;
  uint64_t v537;
  _QWORD v538[2];
  uint64_t *v539;
  void **v540;
  void **v541;
  uint64_t v542;
  uint64_t v543;
  void **v544;
  void **v545;
  void *v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  void *v550;
  void *v551;
  char v552;
  char v553;
  uint64_t v554;
  uint64_t *v555[4];
  llvm::ValueHandleBase *v556;
  uint64_t v557;
  uint64_t v558;

  v3 = a1;
  v558 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v4 = *(_QWORD *)**a2;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v8 = (uint64_t ***)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
      {
LABEL_9:
        v12 = v8[1];
        if (*v12 == (uint64_t *)16)
        {
          v14 = v12[2];
          v13 = v12[3];
          if (v14 == (uint64_t *)0x646F6D2E6E617374 && v13 == (uint64_t *)0x726F74635F656C75)
            goto LABEL_17;
        }
        goto LABEL_14;
      }
      v10 = 1;
      while (v9 != (uint64_t **)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(uint64_t ***)(v5 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (uint64_t ***)(v5 + 16 * v7);
          goto LABEL_9;
        }
      }
    }
    v8 = (uint64_t ***)(v5 + 16 * v6);
    goto LABEL_9;
  }
LABEL_14:
  v16 = a2[14];
  if (v16 && ((*((_BYTE *)v16 + 14) & 2) != 0 || *((char *)v16 + 12) < 0))
  {
LABEL_17:
    LOBYTE(v17) = 0;
    return v17 & 1;
  }
  v18 = (llvm::LLVMContext **)a2[5];
  *a1 = (uint64_t)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(v18 + 34), *v18, 0);
  v19 = *v18;
  v532 = &v534;
  v533 = (const char *)0x200000000;
  v539 = (uint64_t *)v19;
  v540 = &v546;
  v541 = &v547;
  v542 = 0;
  LODWORD(v543) = 0;
  WORD2(v543) = 512;
  BYTE6(v543) = 7;
  v538[1] = 0;
  v538[0] = 0;
  v545 = 0;
  v544 = 0;
  v546 = &unk_1E8167888;
  v547 = &unk_1E8167A08;
  v494 = 0;
  v20 = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v494, (uint64_t *)*v18, -1, 37);
  v494 = v20;
  v21 = (uint64_t **)(*v539 + 1576);
  v22 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v3[1] = (uint64_t)sub_1C6212CB8((uint64_t)v18, "__tsan_func_entry", 0x11uLL, (uint64_t)v20, v21, v22);
  v3[2] = v23;
  v3[3] = (uint64_t)sub_1C6210688((uint64_t)v18, "__tsan_func_exit", 0x10uLL, (uint64_t)v494, (uint64_t **)(*v539 + 1576));
  v3[4] = v24;
  v3[5] = (uint64_t)sub_1C6210688((uint64_t)v18, "__tsan_ignore_thread_begin", 0x1AuLL, (uint64_t)v494, (uint64_t **)(*v539 + 1576));
  v3[6] = v25;
  v484 = (uint64_t **)v18;
  v26 = 0;
  v3[7] = (uint64_t)sub_1C6210688((uint64_t)v18, "__tsan_ignore_thread_end", 0x18uLL, (uint64_t)v494, (uint64_t **)(*v539 + 1576));
  v3[8] = v27;
  v479 = *v539 + 1960;
  v477 = v3;
  do
  {
    v28 = 0;
    v29 = (1 << v26);
    do
    {
      v497[v28-- - 4] = (v29 % 0xA) | 0x30;
      v30 = v29 > 9;
      v29 /= 0xAuLL;
    }
    while (v30);
    sub_1C4E61270(&v492, &v497[v28 - 3], (char *)&v496 + 13, -v28);
    v31 = (char *)&v496 + 13;
    if (v26 >= 0x1D)
    {
      BYTE12(v496) = 48;
      v31 = (char *)&v496 + 12;
    }
    v32 = (8 << v26);
    v33 = (_BYTE *)((char *)&v496 + 13 - v31);
    v478 = 8 << v26;
    do
    {
      *--v31 = (v32 % 0xA) | 0x30;
      ++v33;
      v30 = v32 > 9;
      v32 /= 0xAuLL;
    }
    while (v30);
    sub_1C4E61270(&v490, v31, (char *)&v496 + 13, (unint64_t)v33);
    std::operator+<char>();
    v34 = HIBYTE(v496);
    if (v496 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v496 >= 0)
      v36 = HIBYTE(v496) & 0x7F;
    else
      v36 = v496;
    v529 = v531;
    v530 = xmmword_1C677F680;
    if (v36 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v529, v531, v36, 1);
      v37 = v530;
      v38 = v529;
    }
    else
    {
      v37 = 0;
      if (!v36)
        goto LABEL_35;
      v38 = v531;
    }
    memcpy(&v38[v37], p_p, v36);
    v37 = v530;
    v34 = HIBYTE(v496);
LABEL_35:
    v39 = v37 + v36;
    *(_QWORD *)&v530 = v39;
    if (v34 < 0)
    {
      operator delete(__p);
      v39 = v530;
    }
    v40 = (unsigned __int8 *)v529;
    v41 = (uint64_t)v494;
    v42 = (uint64_t **)(*v539 + 1576);
    v43 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v44 = sub_1C6212CB8((uint64_t)v484, v40, v39, v41, v42, v43);
    v45 = &v3[2 * v26];
    v45[9] = (uint64_t)v44;
    v45[10] = v46;
    std::operator+<char>();
    v47 = HIBYTE(v496);
    if (v496 >= 0)
      v48 = &__p;
    else
      v48 = __p;
    if (v496 >= 0)
      v49 = HIBYTE(v496) & 0x7F;
    else
      v49 = v496;
    v526 = v528;
    v527 = xmmword_1C677F680;
    if (v49 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v526, v528, v49, 1);
      v50 = v527;
      v51 = v526;
    }
    else
    {
      v50 = 0;
      if (!v49)
        goto LABEL_47;
      v51 = v528;
    }
    memcpy(&v51[v50], v48, v49);
    v50 = v527;
    v47 = HIBYTE(v496);
LABEL_47:
    v52 = v50 + v49;
    *(_QWORD *)&v527 = v52;
    if (v47 < 0)
    {
      operator delete(__p);
      v52 = v527;
    }
    v53 = (unsigned __int8 *)v526;
    v54 = (uint64_t)v494;
    v55 = (uint64_t **)(*v539 + 1576);
    v56 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v57 = sub_1C6212CB8((uint64_t)v484, v53, v52, v54, v55, v56);
    v58 = &v3[2 * v26];
    v58[19] = (uint64_t)v57;
    v58[20] = v59;
    std::operator+<char>();
    v60 = HIBYTE(v555[2]);
    if (SHIBYTE(v555[2]) >= 0)
      v61 = v555;
    else
      v61 = (uint64_t **)v555[0];
    if (SHIBYTE(v555[2]) >= 0)
      v62 = HIBYTE(v555[2]) & 0x7F;
    else
      v62 = (unint64_t)v555[1];
    __p = v497;
    v496 = xmmword_1C64638C0;
    if (v62 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v497, v62, 1);
      v64 = __p;
      v63 = v496;
    }
    else
    {
      v63 = 0;
      if (!v62)
        goto LABEL_59;
      v64 = v497;
    }
    memcpy(&v64[v63], v61, v62);
    v63 = v496;
    v60 = HIBYTE(v555[2]);
LABEL_59:
    v65 = v63 + v62;
    *(_QWORD *)&v496 = v65;
    if (v60 < 0)
    {
      operator delete(v555[0]);
      v65 = v496;
    }
    v67 = (uint64_t)v494;
    v66 = (unsigned __int8 *)__p;
    v68 = (uint64_t **)(*v539 + 1576);
    v69 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v70 = sub_1C6212CB8((uint64_t)v484, v66, v65, v67, v68, v69);
    v71 = &v3[2 * v26];
    v71[29] = (uint64_t)v70;
    v71[30] = v72;
    std::operator+<char>();
    v73 = HIBYTE(v524);
    if (v524 >= 0)
      v74 = &v523;
    else
      v74 = v523;
    if (v524 >= 0)
      v75 = HIBYTE(v524) & 0x7F;
    else
      v75 = v524;
    v555[0] = (uint64_t *)&v555[3];
    *(_OWORD *)&v555[1] = xmmword_1C64638C0;
    if (v75 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v555, &v555[3], v75, 1);
      v77 = (uint64_t **)v555[0];
      v76 = v555[1];
    }
    else
    {
      v76 = 0;
      if (!v75)
        goto LABEL_71;
      v77 = &v555[3];
    }
    memcpy((char *)v76 + (_QWORD)v77, v74, v75);
    v76 = v555[1];
    v73 = HIBYTE(v524);
LABEL_71:
    v78 = (uint64_t *)((char *)v76 + v75);
    v555[1] = v78;
    if (v73 < 0)
    {
      operator delete(v523);
      v78 = v555[1];
    }
    v79 = (unsigned __int8 *)v555[0];
    v80 = (uint64_t)v494;
    v81 = (uint64_t **)(*v539 + 1576);
    v82 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v83 = sub_1C6212CB8((uint64_t)v484, v79, (unint64_t)v78, v80, v81, v82);
    v84 = &v3[2 * v26];
    v84[39] = (uint64_t)v83;
    v84[40] = v85;
    std::operator+<char>();
    v86 = HIBYTE(v521);
    if (v521 >= 0)
      v87 = &v520;
    else
      v87 = v520;
    if (v521 >= 0)
      v88 = HIBYTE(v521) & 0x7F;
    else
      v88 = v521;
    v523 = v525;
    v524 = xmmword_1C64638C0;
    if (v88 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v523, v525, v88, 1);
      v89 = v524;
      v90 = v523;
    }
    else
    {
      v89 = 0;
      if (!v88)
        goto LABEL_83;
      v90 = v525;
    }
    memcpy(&v90[v89], v87, v88);
    v89 = v524;
    v86 = HIBYTE(v521);
LABEL_83:
    v91 = v89 + v88;
    *(_QWORD *)&v524 = v91;
    if (v86 < 0)
    {
      operator delete(v520);
      v91 = v524;
    }
    v92 = (unsigned __int8 *)v523;
    v93 = (uint64_t)v494;
    v94 = (uint64_t **)(*v539 + 1576);
    v95 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v96 = sub_1C6212CB8((uint64_t)v484, v92, v91, v93, v94, v95);
    v97 = &v3[2 * v26];
    v97[49] = (uint64_t)v96;
    v97[50] = v98;
    std::operator+<char>();
    v99 = HIBYTE(v518);
    if (v518 >= 0)
      v100 = &v517;
    else
      v100 = v517;
    if (v518 >= 0)
      v101 = HIBYTE(v518) & 0x7F;
    else
      v101 = v518;
    v520 = v522;
    v521 = xmmword_1C64638C0;
    if (v101 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v520, v522, v101, 1);
      v102 = v521;
      v103 = v520;
    }
    else
    {
      v102 = 0;
      if (!v101)
        goto LABEL_95;
      v103 = v522;
    }
    memcpy(&v103[v102], v100, v101);
    v102 = v521;
    v99 = HIBYTE(v518);
LABEL_95:
    v104 = v102 + v101;
    *(_QWORD *)&v521 = v104;
    if (v99 < 0)
    {
      operator delete(v517);
      v104 = v521;
    }
    v105 = (unsigned __int8 *)v520;
    v106 = (uint64_t)v494;
    v107 = (uint64_t **)(*v539 + 1576);
    v108 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v109 = sub_1C6212CB8((uint64_t)v484, v105, v104, v106, v107, v108);
    v110 = &v3[2 * v26];
    v110[59] = (uint64_t)v109;
    v110[60] = v111;
    std::operator+<char>();
    v112 = HIBYTE(v514);
    if (v514 >= 0)
      v113 = &v513;
    else
      v113 = v513;
    if (v514 >= 0)
      v114 = HIBYTE(v514) & 0x7F;
    else
      v114 = v514;
    v517 = v519;
    v518 = xmmword_1C64638C0;
    if (v114 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v517, v519, v114, 1);
      v115 = v518;
      v116 = v517;
    }
    else
    {
      v115 = 0;
      if (!v114)
        goto LABEL_107;
      v116 = v519;
    }
    memcpy(&v116[v115], v113, v114);
    v115 = v518;
    v112 = HIBYTE(v514);
LABEL_107:
    v117 = v115 + v114;
    *(_QWORD *)&v518 = v117;
    if (v112 < 0)
    {
      operator delete(v513);
      v117 = v518;
    }
    v118 = (unsigned __int8 *)v517;
    v119 = (uint64_t)v494;
    v120 = (uint64_t **)(*v539 + 1576);
    v121 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v122 = sub_1C6212CB8((uint64_t)v484, v118, v117, v119, v120, v121);
    v123 = &v3[2 * v26];
    v123[69] = (uint64_t)v122;
    v123[70] = v124;
    std::operator+<char>();
    v125 = HIBYTE(v510);
    if (v510 >= 0)
      v126 = &v509;
    else
      v126 = v509;
    if (v510 >= 0)
      v127 = HIBYTE(v510) & 0x7F;
    else
      v127 = v510;
    v513 = &v515;
    v514 = xmmword_1C64638C0;
    if (v127 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v513, &v515, v127, 1);
      v128 = v514;
      v129 = (uint64_t *)v513;
    }
    else
    {
      v128 = 0;
      if (!v127)
        goto LABEL_119;
      v129 = &v515;
    }
    memcpy((char *)v129 + v128, v126, v127);
    v128 = v514;
    v125 = HIBYTE(v510);
LABEL_119:
    v130 = v128 + v127;
    *(_QWORD *)&v514 = v130;
    if (v125 < 0)
    {
      operator delete(v509);
      v130 = v514;
    }
    v131 = (unsigned __int8 *)v513;
    v132 = (uint64_t)v494;
    v133 = (uint64_t **)(*v539 + 1576);
    v134 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v135 = sub_1C6212CB8((uint64_t)v484, v131, v130, v132, v133, v134);
    v136 = &v3[2 * v26];
    v136[79] = (uint64_t)v135;
    v136[80] = v137;
    std::operator+<char>();
    v138 = HIBYTE(v507);
    if (v507 >= 0)
      v139 = &v506;
    else
      v139 = v506;
    if (v507 >= 0)
      v140 = HIBYTE(v507) & 0x7F;
    else
      v140 = v507;
    v509 = &v511;
    v510 = xmmword_1C64638C0;
    if (v140 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v509, &v511, v140, 1);
      v141 = v510;
      v142 = (uint64_t *)v509;
    }
    else
    {
      v141 = 0;
      if (!v140)
        goto LABEL_131;
      v142 = &v511;
    }
    memcpy((char *)v142 + v141, v139, v140);
    v141 = v510;
    v138 = HIBYTE(v507);
LABEL_131:
    v143 = v141 + v140;
    *(_QWORD *)&v510 = v143;
    if (v138 < 0)
    {
      operator delete(v506);
      v143 = v510;
    }
    v144 = (unsigned __int8 *)v509;
    v145 = (uint64_t)v494;
    v146 = (uint64_t **)(*v539 + 1576);
    v147 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v148 = sub_1C6212CB8((uint64_t)v484, v144, v143, v145, v146, v147);
    v149 = &v3[2 * v26];
    v149[89] = (uint64_t)v148;
    v149[90] = v150;
    std::operator+<char>();
    v151 = HIBYTE(v504);
    if (v504 >= 0)
      v152 = &v503;
    else
      v152 = v503;
    if (v504 >= 0)
      v153 = HIBYTE(v504) & 0x7F;
    else
      v153 = v504;
    v506 = v508;
    v507 = xmmword_1C64638C0;
    if (v153 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v506, v508, v153, 1);
      v154 = v507;
      v155 = v506;
    }
    else
    {
      v154 = 0;
      if (!v153)
        goto LABEL_143;
      v155 = v508;
    }
    memcpy((char *)v155 + v154, v152, v153);
    v154 = v507;
    v151 = HIBYTE(v504);
LABEL_143:
    v156 = v154 + v153;
    *(_QWORD *)&v507 = v156;
    if (v151 < 0)
    {
      operator delete(v503);
      v156 = v507;
    }
    v157 = (unsigned __int8 *)v506;
    v158 = (uint64_t)v494;
    v159 = (uint64_t **)(*v539 + 1576);
    v160 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
    v161 = sub_1C6212CB8((uint64_t)v484, v157, v156, v158, v159, v160);
    v162 = &v3[2 * v26];
    v162[99] = (uint64_t)v161;
    v162[100] = v163;
    v164 = *v484;
    LODWORD(v503) = 8 << v26;
    if (v478 <= 63)
    {
      v165 = v505;
      switch(v478)
      {
        case 32:
          v166 = (uint64_t **)(*v164 + 1960);
          goto LABEL_152;
        case 16:
          v166 = (uint64_t **)(*v164 + 1936);
          goto LABEL_152;
        case 8:
          v166 = (uint64_t **)(*v164 + 1912);
          goto LABEL_152;
      }
    }
    else
    {
      v165 = v505;
      if (v478 == 64)
      {
        v166 = (uint64_t **)(*v164 + 1984);
        goto LABEL_152;
      }
      if (v478 == 128)
      {
        v166 = (uint64_t **)(*v164 + 2008);
        goto LABEL_152;
      }
    }
    v216 = sub_1C5270984(*v164 + 2168, &v503);
    v166 = (uint64_t **)*((_QWORD *)v216 + 1);
    if (!v166)
    {
      v166 = (uint64_t **)sub_1C484358C(*v164 + 2040, 24, 3);
      v217 = (int)v503;
      *v166 = v164;
      v166[2] = 0;
      v166[1] = (uint64_t *)((v217 << 8) | 0xDu);
      *((_QWORD *)v216 + 1) = v166;
    }
LABEL_152:
    v482 = v166;
    v480 = llvm::PointerType::get((llvm::PointerType *)v166, 0);
    std::operator+<char>();
    v167 = std::string::append(&v498, "_load");
    v501 = *v167;
    v167->__r_.__value_.__r.__words[0] = 0;
    v167->__r_.__value_.__l.__size_ = 0;
    v167->__r_.__value_.__r.__words[2] = 0;
    v168 = SHIBYTE(v501.__r_.__value_.__r.__words[2]);
    v169 = (void *)v501.__r_.__value_.__r.__words[0];
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v170 = &v501;
    else
      v170 = (std::string *)v501.__r_.__value_.__r.__words[0];
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v501.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v501.__r_.__value_.__l.__size_;
    v503 = v505;
    v504 = xmmword_1C677F680;
    if (size >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v503, v505, size, 1);
      v172 = v504;
      v165 = v503;
    }
    else
    {
      v172 = 0;
      v173 = 0;
      if (!size)
        goto LABEL_161;
    }
    memcpy(&v165[v172], v170, size);
    v173 = v504;
LABEL_161:
    *(_QWORD *)&v504 = v173 + size;
    if (v168 < 0)
      operator delete(v169);
    if (SHIBYTE(v498.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v498.__r_.__value_.__l.__data_);
    v501.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
    v501.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v501, *v484, 2, 67);
    v174 = sub_1C6291FE0((uint64_t)v484, (unsigned __int8 *)v503, v504, (uint64_t)v501.__r_.__value_.__l.__data_, v482, v480, v479);
    v175 = &v3[2 * v26];
    v175[109] = (uint64_t)v174;
    v175[110] = v176;
    std::operator+<char>();
    v177 = std::string::append(&v500, "_store");
    v498 = *v177;
    v177->__r_.__value_.__r.__words[0] = 0;
    v177->__r_.__value_.__l.__size_ = 0;
    v177->__r_.__value_.__r.__words[2] = 0;
    v178 = SHIBYTE(v498.__r_.__value_.__r.__words[2]);
    v179 = (void *)v498.__r_.__value_.__r.__words[0];
    if ((v498.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v180 = &v498;
    else
      v180 = (std::string *)v498.__r_.__value_.__r.__words[0];
    if ((v498.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v181 = *((_BYTE *)&v498.__r_.__value_.__s + 23) & 0x7F;
    else
      v181 = v498.__r_.__value_.__l.__size_;
    v501.__r_.__value_.__r.__words[0] = (std::string::size_type)v502;
    *(_OWORD *)&v501.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
    if (v181 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v501, v502, v181, 1);
      v182 = v501.__r_.__value_.__l.__size_;
      v184 = (_BYTE *)v501.__r_.__value_.__r.__words[0];
LABEL_173:
      memcpy(&v184[v182], v180, v181);
      v183 = v501.__r_.__value_.__l.__size_;
      goto LABEL_174;
    }
    v182 = 0;
    v183 = 0;
    v184 = v502;
    if (v181)
      goto LABEL_173;
LABEL_174:
    v501.__r_.__value_.__l.__size_ = v183 + v181;
    if (v178 < 0)
      operator delete(v179);
    if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v500.__r_.__value_.__l.__data_);
    v498.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
    v498.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v498, *v484, 2, 67);
    v498.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v498, *v484, 3, 67);
    v185 = sub_1C62A98B0((uint64_t)v484, (unsigned __int8 *)v501.__r_.__value_.__l.__data_, v501.__r_.__value_.__l.__size_, (uint64_t)v498.__r_.__value_.__l.__data_, (uint64_t **)(*v539 + 1576), v480, (uint64_t)v482, v479);
    v186 = 0;
    v187 = &v3[2 * v26];
    v187[119] = (uint64_t)v185;
    v187[120] = v188;
    do
    {
      v189 = (uint64_t)&v3[10 * v186 + 2 * v26];
      *(_QWORD *)(v189 + 1040) = 0;
      *(_QWORD *)(v189 + 1032) = 0;
      if (v186 > 6)
        goto LABEL_180;
      v190 = 0;
      v191 = (llvm::PointerType **)(v189 + 1032);
      v192 = off_1E817E470[(int)v186];
      v193 = (8 << v26);
      do
      {
        v500.__r_.__value_.__s.__data_[v190-- + 20] = (v193 % 0xA) | 0x30;
        v30 = v193 > 9;
        v193 /= 0xAuLL;
      }
      while (v30);
      sub_1C4E61270(&v488, &v500.__r_.__value_.__s.__data_[v190 + 21], &v500.__r_.__value_.__s.__data_[21], -v190);
      v194 = std::string::insert(&v488, 0, "__tsan_atomic");
      v195 = v194->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v489.__r_.__value_.__l.__data_ = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
      v489.__r_.__value_.__r.__words[2] = v195;
      v194->__r_.__value_.__l.__size_ = 0;
      v194->__r_.__value_.__r.__words[2] = 0;
      v194->__r_.__value_.__r.__words[0] = 0;
      v196 = std::string::append(&v489, v192);
      v500 = *v196;
      v196->__r_.__value_.__r.__words[0] = 0;
      v196->__r_.__value_.__l.__size_ = 0;
      v196->__r_.__value_.__r.__words[2] = 0;
      v197 = SHIBYTE(v500.__r_.__value_.__r.__words[2]);
      v198 = (void *)v500.__r_.__value_.__r.__words[0];
      if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v199 = &v500;
      else
        v199 = (std::string *)v500.__r_.__value_.__r.__words[0];
      if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v200 = *((_BYTE *)&v500.__r_.__value_.__s + 23) & 0x7F;
      else
        v200 = v500.__r_.__value_.__l.__size_;
      v201 = v499;
      v498.__r_.__value_.__r.__words[0] = (std::string::size_type)v499;
      *(_OWORD *)&v498.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
      if (v200 >= 0x21)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v498, v499, v200, 1);
        v202 = v498.__r_.__value_.__l.__size_;
        v201 = (_BYTE *)v498.__r_.__value_.__r.__words[0];
LABEL_192:
        memcpy(&v201[v202], v199, v200);
        v203 = v498.__r_.__value_.__l.__size_;
        goto LABEL_193;
      }
      v202 = 0;
      v203 = 0;
      if (v200)
        goto LABEL_192;
LABEL_193:
      v498.__r_.__value_.__l.__size_ = v203 + v200;
      if (v197 < 0)
        operator delete(v198);
      if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v489.__r_.__value_.__l.__data_);
      if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v488.__r_.__value_.__l.__data_);
      v500.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
      v500.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v500, *v484, 2, 67);
      v500.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v500, *v484, 3, 67);
      *v191 = sub_1C62A98B0((uint64_t)v484, (unsigned __int8 *)v498.__r_.__value_.__l.__data_, v498.__r_.__value_.__l.__size_, (uint64_t)v500.__r_.__value_.__l.__data_, v482, v480, (uint64_t)v482, v479);
      v191[1] = v204;
      if (v498.__r_.__value_.__l.__data_ != v499)
        free(v498.__r_.__value_.__l.__data_);
      v3 = v477;
LABEL_180:
      ++v186;
    }
    while (v186 != 13);
    std::operator+<char>();
    v205 = std::string::append(&v489, "_compare_exchange_val");
    v500 = *v205;
    v205->__r_.__value_.__r.__words[0] = 0;
    v205->__r_.__value_.__l.__size_ = 0;
    v205->__r_.__value_.__r.__words[2] = 0;
    v206 = SHIBYTE(v500.__r_.__value_.__r.__words[2]);
    v207 = (void *)v500.__r_.__value_.__r.__words[0];
    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v208 = &v500;
    else
      v208 = (std::string *)v500.__r_.__value_.__r.__words[0];
    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v209 = *((_BYTE *)&v500.__r_.__value_.__s + 23) & 0x7F;
    else
      v209 = v500.__r_.__value_.__l.__size_;
    v210 = v499;
    v498.__r_.__value_.__r.__words[0] = (std::string::size_type)v499;
    *(_OWORD *)&v498.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
    if (v209 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v498, v499, v209, 1);
      v211 = v498.__r_.__value_.__l.__size_;
      v210 = (_BYTE *)v498.__r_.__value_.__r.__words[0];
LABEL_211:
      memcpy(&v210[v211], v208, v209);
      v212 = v498.__r_.__value_.__l.__size_;
    }
    else
    {
      v211 = 0;
      v212 = 0;
      if (v209)
        goto LABEL_211;
    }
    v498.__r_.__value_.__l.__size_ = v212 + v209;
    if (v206 < 0)
      operator delete(v207);
    if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v489.__r_.__value_.__l.__data_);
    v500.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
    v500.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v500, *v484, 2, 67);
    v500.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v500, *v484, 3, 67);
    v500.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v500, *v484, 4, 67);
    v500.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v500, *v484, 5, 67);
    v213 = sub_1C62B0E30((uint64_t)v484, (unsigned __int8 *)v498.__r_.__value_.__l.__data_, v498.__r_.__value_.__l.__size_, (uint64_t)v500.__r_.__value_.__l.__data_, v482, v480, (uint64_t)v482, (uint64_t)v482, v479, v479);
    v214 = &v3[2 * v26];
    v214[259] = (uint64_t)v213;
    v214[260] = v215;
    if (v498.__r_.__value_.__l.__data_ != v499)
      free(v498.__r_.__value_.__l.__data_);
    if (v501.__r_.__value_.__l.__data_ != v502)
      free(v501.__r_.__value_.__l.__data_);
    if (v503 != v505)
      free(v503);
    if (v506 != v508)
      free(v506);
    if (v509 != &v511)
      free(v509);
    if (v513 != &v515)
      free(v513);
    if (v517 != v519)
      free(v517);
    if (v520 != v522)
      free(v520);
    if (v523 != v525)
      free(v523);
    if ((uint64_t **)v555[0] != &v555[3])
      free(v555[0]);
    if (__p != v497)
      free(__p);
    if (v526 != v528)
      free(v526);
    if (v529 != v531)
      free(v529);
    if (v491 < 0)
      operator delete(v490);
    if (v493 < 0)
      operator delete(v492);
    ++v26;
  }
  while (v26 != 5);
  v218 = (uint64_t)v494;
  v219 = (uint64_t **)(*v539 + 1576);
  v220 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v221 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v3[273] = (uint64_t)sub_1C6291FE0((uint64_t)v484, "__tsan_vptr_update", 0x12uLL, v218, v219, v220, v221);
  v3[274] = v222;
  v223 = (uint64_t)v494;
  v224 = (uint64_t **)(*v539 + 1576);
  v225 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v3[275] = (uint64_t)sub_1C6212CB8((uint64_t)v484, "__tsan_vptr_read", 0x10uLL, v223, v224, v225);
  v3[276] = v226;
  __p = v494;
  __p = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&__p, *v484, 1, 67);
  v3[269] = (uint64_t)sub_1C6212CB8((uint64_t)v484, "__tsan_atomic_thread_fence", 0x1AuLL, (uint64_t)__p, (uint64_t **)(*v539 + 1576), v479);
  v3[270] = v227;
  __p = v494;
  __p = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&__p, *v484, 1, 67);
  v3[271] = (uint64_t)sub_1C6212CB8((uint64_t)v484, "__tsan_atomic_signal_fence", 0x1AuLL, (uint64_t)__p, (uint64_t **)(*v539 + 1576), v479);
  v3[272] = v228;
  v229 = (uint64_t)v494;
  v230 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v231 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v232 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v477[277] = (uint64_t)sub_1C62A98B0((uint64_t)v484, "memmove", 7uLL, v229, v230, v231, v232, *v477);
  v477[278] = v233;
  v234 = (uint64_t)v494;
  v235 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v236 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v237 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v477[279] = (uint64_t)sub_1C62A98B0((uint64_t)v484, "memcpy", 6uLL, v234, v235, v236, v237, *v477);
  v477[280] = v238;
  v239 = (uint64_t)v494;
  v240 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v241 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
  v477[281] = (uint64_t)sub_1C62A98B0((uint64_t)v484, "memset", 6uLL, v239, v240, v241, *v539 + 1960, *v477);
  v477[282] = v242;
  if (v532 != &v534)
    free(v532);
  __p = (char *)&v496 + 8;
  *(_QWORD *)&v496 = 0x800000000;
  v523 = (char *)&v524 + 8;
  *(_QWORD *)&v524 = 0x800000000;
  v520 = (char *)&v521 + 8;
  *(_QWORD *)&v521 = 0x800000000;
  v517 = (char *)&v518 + 8;
  *(_QWORD *)&v518 = 0x800000000;
  v243 = a2[14];
  if (v243)
    v483 = (*((unsigned __int8 *)v243 + 18) >> 6) & 1;
  else
    v483 = 0;
  v487 = (uint64_t)(a2[5] + 34);
  v244 = (uint64_t **)a2[10];
  if (v244 == a2 + 9)
  {
    v245 = 0;
    goto LABEL_308;
  }
  v245 = 0;
  while (2)
  {
    v246 = v244 - 3;
    if (!v244)
      v246 = 0;
    v247 = (uint64_t *)(v246 + 5);
    v248 = v246[6];
    while (2)
    {
      if (v248 != v247)
      {
        if (v248)
          v249 = (uint64_t)(v248 - 3);
        else
          v249 = 0;
        v250 = *(unsigned __int8 *)(v249 + 16);
        if (v250 == 60 || v250 == 61)
        {
          if ((*(_WORD *)(v249 + 18) & 0x380) == 0 || v248 && !*((_BYTE *)v248 + 36))
          {
            v252 = v524;
            if (v524 >= (unint64_t)DWORD1(v524))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v523, (uint64_t)&v524 + 8, v524 + 1, 8);
              v252 = v524;
            }
            *((_QWORD *)v523 + v252) = v249;
            LODWORD(v524) = v524 + 1;
            goto LABEL_291;
          }
        }
        else
        {
          if (v250 == 84)
          {
            v253 = sub_1C4D99D08(v249);
            v250 = *(unsigned __int8 *)(v249 + 16);
            if (!v253)
            {
              if (v248 && v250 == 84)
                llvm::maybeMarkSanitizerLibraryCallNoBuiltin(v249, a3);
LABEL_300:
              if (sub_1C4DE85D0(v249))
              {
                v254 = v518;
                if (v518 >= (unint64_t)DWORD1(v518))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517, (uint64_t)&v518 + 8, v518 + 1, 8);
                  v254 = v518;
                }
                *((_QWORD *)v517 + v254) = v249;
                LODWORD(v518) = v518 + 1;
              }
              sub_1C58DC36C((uint64_t *)&v523, (uint64_t)&__p);
              v245 = 1;
LABEL_291:
              v248 = (uint64_t *)v248[1];
              continue;
            }
LABEL_299:
            if (v250 == 33)
              goto LABEL_300;
            goto LABEL_291;
          }
          if ((v250 - 63) >= 3)
            goto LABEL_299;
        }
        v251 = v521;
        if (v521 >= (unint64_t)DWORD1(v521))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v520, (uint64_t)&v521 + 8, v521 + 1, 8);
          v251 = v521;
        }
        *((_QWORD *)v520 + v251) = v249;
        LODWORD(v521) = v521 + 1;
        goto LABEL_291;
      }
      break;
    }
    sub_1C58DC36C((uint64_t *)&v523, (uint64_t)&__p);
    v244 = (uint64_t **)v244[1];
    if (v244 != a2 + 9)
      continue;
    break;
  }
LABEL_308:
  v255 = v483;
  if (!byte_1ED817AA8)
    v255 = 0;
  v481 = v245;
  if ((v255 & 1) != 0 && (_DWORD)v496)
  {
    v17 = 0;
    v256 = (uint64_t *)__p;
    v257 = 16 * v496;
    while (1)
    {
      sub_1C4773D54((uint64_t)&v532, *v256, 0, 0, 0);
      v258 = *v256;
      v259 = *(unsigned __int8 *)(*v256 + 16);
      if (*v256 && v259 == 60)
        v260 = (uint64_t *)*v256;
      else
        v260 = *(uint64_t **)(v258 - 64);
      v261 = *(llvm::Value **)(v258 - 32);
      v262 = *v260;
      if (!llvm::Value::isSwiftError(v261))
      {
        v263 = sub_1C58DCA44(v262, v487);
        if ((v263 & 0x80000000) == 0)
          break;
      }
      v271 = 0;
LABEL_359:
      if (v532 != &v534)
        free(v532);
      v17 |= v271;
      v256 += 2;
      v257 -= 16;
      if (!v257)
        goto LABEL_367;
    }
    v264 = v263;
    v265 = sub_1C58DC91C(*v256);
    if (v259 == 61)
    {
      if (v265)
      {
        v267 = *(unsigned __int8 **)(*v256 - 64);
        if ((*(_DWORD *)(*(_QWORD *)v267 + 8) & 0xFE) == 0x12)
        {
          v268 = *(llvm::ConstantInt **)(*v539 + 1960);
          LODWORD(v555[1]) = *(_DWORD *)(*v539 + 1968) >> 8;
          if (LODWORD(v555[1]) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)v555, 0, 0);
          else
            v555[0] = 0;
          v269 = llvm::ConstantInt::get(v268, (llvm::LLVMContext *)v555, v266);
          if (LODWORD(v555[1]) >= 0x41 && v555[0])
            MEMORY[0x1CAA32F9C](v555[0], 0x1000C8000313F17);
          LOWORD(v556) = 257;
          v267 = sub_1C4772EE0((uint64_t *)&v532, (uint64_t)v267, (uint64_t)v269, (uint64_t)v555);
          v270 = *(unsigned __int8 *)(*(_QWORD *)v267 + 8);
        }
        else
        {
          v270 = *(_DWORD *)(*(_QWORD *)v267 + 8);
        }
        if (v270 == 13)
        {
          v300 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
          LOWORD(v556) = 257;
          v267 = sub_1C4773E38((uint64_t *)&v532, 48, v267, v300, (uint64_t)v555);
        }
        v301 = (uint64_t **)v477[273];
        v302 = v477[274];
        v303 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
        LOWORD(v556) = 257;
        v506 = sub_1C5098D9C((uint64_t *)&v532, (unsigned __int8 *)v261, v303, (uint64_t)v555);
        v304 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
        v516 = 257;
        *(_QWORD *)&v507 = sub_1C5098D9C((uint64_t *)&v532, v267, v304, (uint64_t)&v513);
        v512 = 257;
        v275 = (uint64_t *)&v506;
        v276 = &v509;
        v277 = v301;
        v278 = v302;
        v299 = 2;
        goto LABEL_358;
      }
LABEL_329:
      v279 = *(unsigned __int16 *)(*v256 + 18);
      v485 = byte_1ED817FE8 != 0;
      v280 = *((_DWORD *)v256 + 2);
      v281 = byte_1ED817E68 != 0;
      sub_1C4768AD0(v487, v262);
      v284 = v283;
      if ((_DWORD)v282 == 1)
      v285 = 1 << (v279 >> 1);
      v286 = v281 & v279;
      if ((v285 - 8) >= 0xFFFFFFF9 && v285 % ((v284 + 7) >> 3))
      {
        v287 = &v477[2 * v264];
        v288 = v287 + 39;
        if (v259 != 61)
          v288 = v287 + 29;
        v289 = v287 + 79;
        if (v259 != 61)
          v289 = v287 + 69;
        if (v286)
          v290 = (uint64_t ***)v289;
        else
          v290 = (uint64_t ***)v288;
        v291 = (uint64_t ***)(v287 + 99);
      }
      else
      {
        v292 = &v477[2 * v264];
        v293 = v292 + 19;
        if (v259 != 61)
          v293 = v292 + 9;
        v294 = v292 + 59;
        if (v259 != 61)
          v294 = v292 + 49;
        if (v286)
          v290 = (uint64_t ***)v294;
        else
          v290 = (uint64_t ***)v293;
        v291 = (uint64_t ***)(v292 + 89);
      }
      if ((v485 & v280) != 0)
        v295 = v291;
      else
        v295 = v290;
      v297 = *v295;
      v296 = (uint64_t)v295[1];
      v298 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
      LOWORD(v556) = 257;
      v509 = sub_1C5098D9C((uint64_t *)&v532, (unsigned __int8 *)v261, v298, (uint64_t)v555);
      v516 = 257;
      v275 = (uint64_t *)&v509;
      v276 = &v513;
      v277 = v297;
      v278 = v296;
    }
    else
    {
      if (!v265)
        goto LABEL_329;
      v272 = (uint64_t **)v477[275];
      v273 = v477[276];
      v274 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
      LOWORD(v556) = 257;
      v509 = sub_1C5098D9C((uint64_t *)&v532, (unsigned __int8 *)v261, v274, (uint64_t)v555);
      v516 = 257;
      v275 = (uint64_t *)&v509;
      v276 = &v513;
      v277 = v272;
      v278 = v273;
    }
    v299 = 1;
LABEL_358:
    sub_1C4774778((uint64_t *)&v532, v277, v278, v275, v299, (uint64_t)v276, 0);
    v271 = 1;
    goto LABEL_359;
  }
  v17 = 0;
LABEL_367:
  if (byte_1ED817CE8)
  {
    v305 = v477;
    if ((_DWORD)v521)
    {
      v306 = (uint64_t *)v520;
      v486 = (uint64_t *)((char *)v520 + 8 * v521);
      do
      {
        v307 = *v306;
        sub_1C4773D54((uint64_t)&v532, *v306, 0, 0, 0);
        v309 = *(unsigned __int8 *)(v307 + 16);
        if (v307 && v309 == 60)
        {
          v310 = *(unsigned __int8 **)(v307 - 32);
          v311 = *(_QWORD *)v307;
          v312 = sub_1C58DCA44(*(_QWORD *)v307, v487);
          if ((v312 & 0x80000000) == 0)
          {
            v313 = v312;
            v314 = 8 << v312;
            v315 = v539;
            LODWORD(v555[0]) = 8 << v312;
            if (8 << v312 <= 63)
            {
              switch(v314)
              {
                case 32:
                  v316 = (llvm::PointerType *)(*v539 + 1960);
                  goto LABEL_407;
                case 16:
                  v316 = (llvm::PointerType *)(*v539 + 1936);
                  goto LABEL_407;
                case 8:
                  v316 = (llvm::PointerType *)(*v539 + 1912);
                  goto LABEL_407;
              }
            }
            else
            {
              if (v314 == 64)
              {
                v316 = (llvm::PointerType *)(*v539 + 1984);
LABEL_407:
                v347 = llvm::PointerType::get(v316, 0);
                *(_QWORD *)&v514 = 0;
                v513 = 0;
                LOWORD(v556) = 257;
                v513 = sub_1C5098D9C((uint64_t *)&v532, v310, v347, (uint64_t)v555);
                *(_QWORD *)&v514 = sub_1C58DCAD8(v539, (*(unsigned __int16 *)(v307 + 18) >> 7) & 7, v348);
                v349 = &v305[2 * v313];
                v350 = (uint64_t **)v349[109];
                v351 = v349[110];
                LOWORD(v556) = 257;
                v352 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v532, v350, v351, (uint64_t *)&v513, 2, (uint64_t)v555, 0);
                LOWORD(v556) = 257;
                v353 = sub_1C506D6A8((uint64_t *)&v532, v352, v311, (uint64_t)v555);
                v338 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v307, (llvm::Value *)v353, (llvm::Value *)1);
                goto LABEL_432;
              }
              if (v314 == 128)
              {
                v316 = (llvm::PointerType *)(*v539 + 2008);
                goto LABEL_407;
              }
            }
            v389 = sub_1C5270984(*v539 + 2168, v555);
            v316 = (llvm::PointerType *)*((_QWORD *)v389 + 1);
            if (!v316)
            {
              v316 = (llvm::PointerType *)sub_1C484358C(*v315 + 2040, 24, 3);
              v390 = (int)v555[0];
              *(_QWORD *)v316 = v315;
              *((_QWORD *)v316 + 2) = 0;
              *((_QWORD *)v316 + 1) = (v390 << 8) | 0xDu;
              *((_QWORD *)v389 + 1) = v316;
            }
            goto LABEL_407;
          }
        }
        else if (v307 && v309 == 61)
        {
          v317 = *(unsigned __int8 **)(v307 - 32);
          v318 = sub_1C58DCA44(**(_QWORD **)(v307 - 64), v487);
          if ((v318 & 0x80000000) == 0)
          {
            v319 = v318;
            v320 = 8 << v318;
            v321 = v539;
            LODWORD(v555[0]) = 8 << v318;
            if (8 << v318 <= 63)
            {
              switch(v320)
              {
                case 32:
                  v322 = (llvm::PointerType *)(*v539 + 1960);
                  goto LABEL_412;
                case 16:
                  v322 = (llvm::PointerType *)(*v539 + 1936);
                  goto LABEL_412;
                case 8:
                  v322 = (llvm::PointerType *)(*v539 + 1912);
LABEL_412:
                  v354 = llvm::PointerType::get(v322, 0);
                  v510 = 0uLL;
                  v509 = 0;
                  LOWORD(v556) = 257;
                  v509 = sub_1C5098D9C((uint64_t *)&v532, v317, v354, (uint64_t)v555);
                  v355 = *(unsigned __int8 **)(v307 - 64);
                  v516 = 257;
                  *(_QWORD *)&v510 = sub_1C506D6A8((uint64_t *)&v532, v355, (uint64_t)v322, (uint64_t)&v513);
                  *((_QWORD *)&v510 + 1) = sub_1C58DCAD8(v539, (*(unsigned __int16 *)(v307 + 18) >> 7) & 7, v356);
                  v357 = &v305[2 * v319];
                  v358 = (uint64_t **)v357[119];
                  v359 = v357[120];
                  LOWORD(v556) = 257;
                  v360 = (char *)operator new(0xD0uLL);
                  v361 = 0;
                  v362 = (llvm::Value *)(v360 + 128);
                  *((_DWORD *)v360 + 37) = *((_DWORD *)v360 + 37) & 0x38000000 | 4;
                  do
                  {
                    v363 = &v360[v361];
                    *(_QWORD *)v363 = 0;
                    *((_QWORD *)v363 + 1) = 0;
                    *((_QWORD *)v363 + 2) = 0;
                    *((_QWORD *)v363 + 3) = v362;
                    v361 += 32;
                  }
                  while (v361 != 128);
                  *((_QWORD *)v360 + 16) = *v358[2];
                  *((_QWORD *)v360 + 17) = 0;
                  v360[144] = 84;
                  v360[145] = 0;
                  *((_WORD *)v360 + 73) = 0;
                  *((_DWORD *)v360 + 37) = *((_DWORD *)v360 + 37) & 0xC0000000 | 4;
                  *(_OWORD *)(v360 + 152) = 0u;
                  *(_OWORD *)(v360 + 168) = 0u;
                  *((_DWORD *)v360 + 46) = 0;
                  *((_QWORD *)v360 + 24) = 0;
                  llvm::CallInst::init((uint64_t ***)v360 + 16, v358, v359, (uint64_t *)&v509, 3, 0, 0, (uint64_t)v555);
                  v555[0] = (uint64_t *)(v307 + 24);
                  v345 = *(_QWORD *)(v307 + 40) + 40;
                  v346 = v362;
LABEL_415:
                  llvm::ReplaceInstWithInst(v345, v555, v346);
                  v338 = 1;
                  goto LABEL_432;
              }
            }
            else
            {
              if (v320 == 64)
              {
                v322 = (llvm::PointerType *)(*v539 + 1984);
                goto LABEL_412;
              }
              if (v320 == 128)
              {
                v322 = (llvm::PointerType *)(*v539 + 2008);
                goto LABEL_412;
              }
            }
            v391 = sub_1C5270984(*v539 + 2168, v555);
            v322 = (llvm::PointerType *)*((_QWORD *)v391 + 1);
            if (!v322)
            {
              v392 = v391;
              v322 = (llvm::PointerType *)sub_1C484358C(*v321 + 2040, 24, 3);
              v393 = (int)v555[0];
              *(_QWORD *)v322 = v321;
              *((_QWORD *)v322 + 2) = 0;
              *((_QWORD *)v322 + 1) = (v393 << 8) | 0xDu;
              *((_QWORD *)v392 + 1) = v322;
            }
            goto LABEL_412;
          }
        }
        else if (v307 && v309 == 65)
        {
          v323 = *(unsigned __int8 **)(v307 - 64);
          v324 = sub_1C58DCA44(**(_QWORD **)(v307 - 32), v487);
          if ((v324 & 0x80000000) == 0)
          {
            v325 = (uint64_t)&v305[10 * (*(_WORD *)(v307 + 18) >> 4) + 2 * v324];
            v326 = *(_QWORD *)(v325 + 1040);
            if (v326)
            {
              v327 = *(uint64_t ***)(v325 + 1032);
              v328 = 8 << v324;
              v329 = v539;
              LODWORD(v555[0]) = 8 << v324;
              if (8 << v324 <= 63)
              {
                switch(v328)
                {
                  case 32:
                    v330 = (llvm::PointerType *)(*v539 + 1960);
                    goto LABEL_422;
                  case 16:
                    v330 = (llvm::PointerType *)(*v539 + 1936);
                    goto LABEL_422;
                  case 8:
                    v330 = (llvm::PointerType *)(*v539 + 1912);
LABEL_422:
                    v364 = llvm::PointerType::get(v330, 0);
                    v510 = 0uLL;
                    v509 = 0;
                    LOWORD(v556) = 257;
                    v509 = sub_1C5098D9C((uint64_t *)&v532, v323, v364, (uint64_t)v555);
                    v365 = *(unsigned __int8 **)(v307 - 32);
                    v516 = 257;
                    *(_QWORD *)&v510 = sub_1C4D8D514((uint64_t *)&v532, v365, (uint64_t)v330, 0, (uint64_t)&v513);
                    *((_QWORD *)&v510 + 1) = sub_1C58DCAD8(v539, (*(unsigned __int16 *)(v307 + 18) >> 1) & 7, v366);
                    LOWORD(v556) = 257;
                    v367 = (char *)operator new(0xD0uLL);
                    v368 = 0;
                    v369 = (llvm::Value *)(v367 + 128);
                    *((_DWORD *)v367 + 37) = *((_DWORD *)v367 + 37) & 0x38000000 | 4;
                    do
                    {
                      v370 = &v367[v368];
                      *(_QWORD *)v370 = 0;
                      *((_QWORD *)v370 + 1) = 0;
                      *((_QWORD *)v370 + 2) = 0;
                      *((_QWORD *)v370 + 3) = v369;
                      v368 += 32;
                    }
                    while (v368 != 128);
                    *((_QWORD *)v367 + 16) = *v327[2];
                    *((_QWORD *)v367 + 17) = 0;
                    v367[144] = 84;
                    v367[145] = 0;
                    *((_WORD *)v367 + 73) = 0;
                    *((_DWORD *)v367 + 37) = *((_DWORD *)v367 + 37) & 0xC0000000 | 4;
                    *(_OWORD *)(v367 + 152) = 0u;
                    *(_OWORD *)(v367 + 168) = 0u;
                    *((_DWORD *)v367 + 46) = 0;
                    *((_QWORD *)v367 + 24) = 0;
                    llvm::CallInst::init((uint64_t ***)v367 + 16, v327, v326, (uint64_t *)&v509, 3, 0, 0, (uint64_t)v555);
                    v555[0] = (uint64_t *)(v307 + 24);
                    llvm::ReplaceInstWithInst(*(_QWORD *)(v307 + 40) + 40, v555, v369);
                    v338 = 1;
                    v305 = v477;
                    goto LABEL_432;
                }
              }
              else
              {
                if (v328 == 64)
                {
                  v330 = (llvm::PointerType *)(*v539 + 1984);
                  goto LABEL_422;
                }
                if (v328 == 128)
                {
                  v330 = (llvm::PointerType *)(*v539 + 2008);
                  goto LABEL_422;
                }
              }
              v394 = sub_1C5270984(*v539 + 2168, v555);
              v330 = (llvm::PointerType *)*((_QWORD *)v394 + 1);
              if (!v330)
              {
                v395 = v394;
                v330 = (llvm::PointerType *)sub_1C484358C(*v329 + 2040, 24, 3);
                v396 = (int)v555[0];
                *(_QWORD *)v330 = v329;
                *((_QWORD *)v330 + 2) = 0;
                *((_QWORD *)v330 + 1) = (v396 << 8) | 0xDu;
                *((_QWORD *)v395 + 1) = v330;
              }
              goto LABEL_422;
            }
          }
        }
        else
        {
          if (!v307 || v309 != 64)
          {
            v338 = 1;
            if (!v307 || v309 != 63)
              goto LABEL_432;
            v513 = 0;
            v513 = sub_1C58DCAD8(v539, *(_WORD *)(v307 + 18) & 7, v308);
            v339 = v477 + 269;
            if (!*(_BYTE *)(v307 + 60))
              v339 = v477 + 271;
            v340 = (uint64_t **)*v339;
            v341 = v339[1];
            LOWORD(v556) = 257;
            v342 = (char *)operator new(0x90uLL);
            *((_DWORD *)v342 + 21) = *((_DWORD *)v342 + 21) & 0x38000000 | 2;
            v343 = (llvm::Value *)(v342 + 64);
            *(_QWORD *)v342 = 0;
            *((_QWORD *)v342 + 1) = 0;
            *((_QWORD *)v342 + 2) = 0;
            *((_QWORD *)v342 + 3) = v342 + 64;
            *((_QWORD *)v342 + 4) = 0;
            *((_QWORD *)v342 + 5) = 0;
            *((_QWORD *)v342 + 6) = 0;
            *((_QWORD *)v342 + 7) = v342 + 64;
            *((_QWORD *)v342 + 8) = *v340[2];
            *((_QWORD *)v342 + 9) = 0;
            v342[80] = 84;
            v342[81] = 0;
            *((_WORD *)v342 + 41) = 0;
            *((_DWORD *)v342 + 21) = 2;
            *((_DWORD *)v342 + 30) = 0;
            *(_OWORD *)(v342 + 104) = 0u;
            *(_OWORD *)(v342 + 88) = 0u;
            *((_QWORD *)v342 + 16) = 0;
            v344 = v341;
            v305 = v477;
            llvm::CallInst::init((uint64_t ***)v342 + 8, v340, v344, (uint64_t *)&v513, 1, 0, 0, (uint64_t)v555);
            v555[0] = (uint64_t *)(v307 + 24);
            v345 = *(_QWORD *)(v307 + 40) + 40;
            v346 = v343;
            goto LABEL_415;
          }
          v331 = *(unsigned __int8 **)(v307 - 96);
          v332 = **(_QWORD **)(v307 - 32);
          v333 = sub_1C58DCA44(v332, v487);
          if ((v333 & 0x80000000) == 0)
          {
            v334 = v333;
            v335 = 8 << v333;
            v336 = v539;
            LODWORD(v555[0]) = 8 << v333;
            v476 = v332;
            if (8 << v333 <= 63)
            {
              switch(v335)
              {
                case 32:
                  v337 = (llvm::PointerType *)(*v539 + 1960);
                  goto LABEL_429;
                case 16:
                  v337 = (llvm::PointerType *)(*v539 + 1936);
                  goto LABEL_429;
                case 8:
                  v337 = (llvm::PointerType *)(*v539 + 1912);
                  goto LABEL_429;
              }
            }
            else
            {
              if (v335 == 64)
              {
                v337 = (llvm::PointerType *)(*v539 + 1984);
LABEL_429:
                v371 = llvm::PointerType::get(v337, 0);
                v372 = *(unsigned __int8 **)(v307 - 64);
                LOWORD(v556) = 257;
                v373 = (uint64_t *)sub_1C506D6A8((uint64_t *)&v532, v372, (uint64_t)v337, (uint64_t)v555);
                v374 = *(unsigned __int8 **)(v307 - 32);
                LOWORD(v556) = 257;
                v375 = (uint64_t *)sub_1C506D6A8((uint64_t *)&v532, v374, (uint64_t)v337, (uint64_t)v555);
                v556 = 0;
                memset(v555, 0, sizeof(v555));
                v516 = 257;
                v555[0] = (uint64_t *)sub_1C5098D9C((uint64_t *)&v532, v331, v371, (uint64_t)&v513);
                v555[1] = v373;
                v555[2] = v375;
                v555[3] = (uint64_t *)sub_1C58DCAD8(v539, (*(unsigned __int16 *)(v307 + 18) >> 2) & 7, v376);
                v556 = sub_1C58DCAD8(v539, *(_WORD *)(v307 + 18) >> 5, v377);
                v305 = v477;
                v378 = &v477[2 * v334];
                v379 = (uint64_t **)v378[259];
                v380 = v378[260];
                v516 = 257;
                v381 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v532, v379, v380, (uint64_t *)v555, 5, (uint64_t)&v513, 0);
                v516 = 257;
                v383 = sub_1C4774B48((uint64_t)&v532, 32, (uint64_t)v381, (uint64_t)v373, (uint64_t)&v513);
                if (v337 != (llvm::PointerType *)v476)
                {
                  v516 = 257;
                  v381 = sub_1C4773E38((uint64_t *)&v532, 48, v381, v476, (uint64_t)&v513);
                }
                v384 = llvm::UndefValue::get(*(llvm::UndefValue **)v307, v382);
                LODWORD(v509) = 0;
                v516 = 257;
                v385 = sub_1C506D788((uint64_t)&v532, (uint64_t)v384, (uint64_t)v381, &v509, 1, (uint64_t)&v513);
                v338 = 1;
                LODWORD(v509) = 1;
                v516 = 257;
                v386 = (llvm::Value *)sub_1C506D788((uint64_t)&v532, v385, v383, &v509, 1, (uint64_t)&v513);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v307, v386, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v307 + 40) + 40, (uint64_t ***)v307);
                v387 = *(_QWORD *)(v307 + 24);
                v388 = *(_QWORD **)(v307 + 32);
                *v388 = v387;
                *(_QWORD *)(v387 + 8) = v388;
                *(_QWORD *)(v307 + 24) = 0;
                *(_QWORD *)(v307 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v307);
                goto LABEL_432;
              }
              if (v335 == 128)
              {
                v337 = (llvm::PointerType *)(*v539 + 2008);
                goto LABEL_429;
              }
            }
            v397 = sub_1C5270984(*v539 + 2168, v555);
            v337 = (llvm::PointerType *)*((_QWORD *)v397 + 1);
            if (!v337)
            {
              v398 = v397;
              v337 = (llvm::PointerType *)sub_1C484358C(*v336 + 2040, 24, 3);
              v399 = (int)v555[0];
              *(_QWORD *)v337 = v336;
              *((_QWORD *)v337 + 2) = 0;
              *((_QWORD *)v337 + 1) = (v399 << 8) | 0xDu;
              *((_QWORD *)v398 + 1) = v337;
            }
            goto LABEL_429;
          }
        }
        v338 = 0;
LABEL_432:
        if (v532 != &v534)
          free(v532);
        v17 |= v338;
        ++v306;
      }
      while (v306 != v486);
    }
  }
  v400 = v483;
  if (!byte_1ED817DA8)
    v400 = 0;
  if (v400 == 1 && (_DWORD)v518)
  {
    v401 = (uint64_t *)v517;
    for (i = 8 * v518; i; i -= 8)
    {
      v403 = *v401;
      sub_1C4773D54((uint64_t)&v532, *v401, 0, 0, 0);
      v404 = sub_1C5392540(v403);
      if (v403)
        v405 = !v404;
      else
        v405 = 1;
      if (v405)
      {
        v406 = sub_1C56E895C(v403);
        if (!v403 || !v406)
          goto LABEL_477;
        v407 = *(_DWORD *)(*(_QWORD *)(v403 - 32) + 36);
        v408 = v407 == 194 || v407 == 196;
        v409 = 277;
        if (v408)
          v409 = 279;
        v410 = v477 + 277;
        if (v408)
          v410 = v477 + 279;
        v415 = v477;
        v416 = (uint64_t **)v477[v409];
        v417 = v410[1];
        v411 = *(unsigned __int8 **)(v403 - 32 * (*(_DWORD *)(v403 + 20) & 0x7FFFFFF));
        v412 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
        LOWORD(v556) = 257;
        v529 = sub_1C5098D9C((uint64_t *)&v532, v411, v412, (uint64_t)v555);
        v413 = *(unsigned __int8 **)(v403 - 32 * (*(_DWORD *)(v403 + 20) & 0x7FFFFFF) + 32);
        v414 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
        v516 = 257;
        v422 = sub_1C5098D9C((uint64_t *)&v532, v413, v414, (uint64_t)&v513);
      }
      else
      {
        v415 = v477;
        v416 = (uint64_t **)v477[281];
        v417 = v477[282];
        v418 = *(unsigned __int8 **)(v403 - 32 * (*(_DWORD *)(v403 + 20) & 0x7FFFFFF));
        v419 = llvm::PointerType::get((llvm::PointerType *)(*v539 + 1912), 0);
        LOWORD(v556) = 257;
        v529 = sub_1C5098D9C((uint64_t *)&v532, v418, v419, (uint64_t)v555);
        v420 = *(unsigned __int8 **)(v403 - 32 * (*(_DWORD *)(v403 + 20) & 0x7FFFFFF) + 32);
        v421 = *v539 + 1960;
        v516 = 257;
        v422 = sub_1C4D8D514((uint64_t *)&v532, v420, v421, 0, (uint64_t)&v513);
      }
      *(_QWORD *)&v530 = v422;
      v423 = *(unsigned __int8 **)(v403 - 32 * (*(_DWORD *)(v403 + 20) & 0x7FFFFFF) + 64);
      v424 = *v415;
      v512 = 257;
      *((_QWORD *)&v530 + 1) = sub_1C4D8D514((uint64_t *)&v532, v423, v424, 0, (uint64_t)&v509);
      v508[4] = 257;
      sub_1C4774778((uint64_t *)&v532, v416, v417, (uint64_t *)&v529, 3, (uint64_t)&v506, 0);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v403 + 40) + 40, (uint64_t ***)v403);
      v425 = *(_QWORD *)(v403 + 24);
      v426 = *(_QWORD **)(v403 + 32);
      *v426 = v425;
      *(_QWORD *)(v425 + 8) = v426;
      *(_QWORD *)(v403 + 24) = 0;
      *(_QWORD *)(v403 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v403);
LABEL_477:
      if (v532 != &v534)
        free(v532);
      ++v401;
    }
  }
  v427 = a2[14];
  if (!v427)
    goto LABEL_514;
  if (!*((_DWORD *)v427 + 2))
    goto LABEL_514;
  v428 = v427[5];
  if (!v428)
    goto LABEL_514;
  v429 = *(_DWORD *)(v428 + 40);
  if (!v429)
    goto LABEL_514;
  v430 = *(_QWORD *)(v428 + 24);
  v431 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v431 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v473 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v473 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v473;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v432 = 797982799
       * ((((qword_1ED7EAC80 ^ 0x853098DEF6D0EFCBLL) - 0x1BABE392F93811F9) >> 47) ^ ((qword_1ED7EAC80 ^ 0xF6D0EFCB)
                                                                                     + 113765895));
  v433 = v429 - 1;
  v434 = 1;
  while (2)
  {
    v435 = v432 & v433;
    v436 = v430 + 24 * (v432 & v433);
    v437 = *(const void **)v436;
    if (*(_QWORD *)v436 == -1)
    {
      if ("sanitize_thread_no_checking_at_run_time" == (char *)-1)
        break;
      goto LABEL_488;
    }
    if (v437 == (const void *)-2)
    {
      if ("sanitize_thread_no_checking_at_run_time" == (char *)-2)
        break;
      goto LABEL_488;
    }
    if (*(_QWORD *)(v436 + 8) != 39 || memcmp("sanitize_thread_no_checking_at_run_time", v437, 0x27uLL))
    {
LABEL_488:
      if (v437 == (const void *)-1)
        goto LABEL_514;
      v432 = v434 + v435;
      ++v434;
      continue;
    }
    break;
  }
  if ((v481 & 1) != 0)
  {
    v438 = a2[10];
    v439 = v438 - 3;
    if (!v438)
      v439 = 0;
    v440 = v439 + 5;
    v441 = (_QWORD *)v439[6];
    if (v441 == v440)
    {
      v443 = 0;
      v442 = v477;
    }
    else
    {
      v442 = v477;
      while (1)
      {
        v443 = (uint64_t)(v441 - 3);
        v444 = v441 ? (uint64_t)(v441 - 3) : 0;
        if (*(_BYTE *)(v444 + 16) != 83)
          break;
        v441 = (_QWORD *)v441[1];
        if (v441 == v440)
        {
          v443 = 0;
          break;
        }
      }
    }
    v445 = (uint64_t *)sub_1C4773D54((uint64_t)v555, v443, 0, 0, 0);
    v446 = (uint64_t **)v442[5];
    v447 = v442[6];
    LOWORD(v536) = 257;
    sub_1C4774778(v445, v446, v447, 0, 0, (uint64_t)&v532, 0);
    v532 = a2;
    v533 = "tsan_ignore_cleanup";
    v534 = a2[10];
    v535 = a2 + 9;
    v448 = **a2;
    v536 = v538;
    v537 = 0x200000000;
    v543 = v448;
    v544 = &v550;
    v545 = &v551;
    v546 = 0;
    LODWORD(v547) = 0;
    WORD2(v547) = 512;
    BYTE6(v547) = 7;
    v542 = 0;
    v541 = 0;
    v549 = 0;
    v548 = 0;
    v550 = &unk_1E8167888;
    v551 = &unk_1E8167A08;
    v552 = 0;
    v553 = byte_1ED817C28;
    v554 = 0;
    while (1)
    {
      v449 = (uint64_t *)llvm::EscapeEnumerator::Next((uint64_t ***)&v532);
      if (!v449)
        break;
      v450 = (uint64_t **)v442[7];
      v451 = v442[8];
      v516 = 257;
      sub_1C4774778(v449, v450, v451, 0, 0, (uint64_t)&v513, 0);
    }
    if (v536 != v538)
      free(v536);
    if ((uint64_t **)v555[0] != &v555[2])
      free(v555[0]);
  }
LABEL_514:
  if (((v17 | v481) & 1) != 0 && byte_1ED817B68)
  {
    v452 = a2[10];
    v453 = v452 - 3;
    if (!v452)
      v453 = 0;
    v454 = v453 + 5;
    v455 = (_QWORD *)v453[6];
    if (v455 == v454)
    {
      v458 = 0;
      v456 = v477;
      v457 = a2 + 9;
    }
    else
    {
      v456 = v477;
      v457 = a2 + 9;
      while (1)
      {
        v458 = (uint64_t)(v455 - 3);
        v459 = v455 ? (uint64_t)(v455 - 3) : 0;
        if (*(_BYTE *)(v459 + 16) != 83)
          break;
        v455 = (_QWORD *)v455[1];
        if (v455 == v454)
        {
          v458 = 0;
          break;
        }
      }
    }
    sub_1C4773D54((uint64_t)v555, v458, 0, 0, 0);
    Declaration = llvm::Intrinsic::getDeclaration(a2[5], 257, 0, 0);
    v462 = Declaration;
    if (Declaration)
      v463 = *(uint64_t ***)(Declaration + 24);
    else
      v463 = 0;
    v464 = *(llvm::ConstantInt **)(*(_QWORD *)v557 + 1960);
    LODWORD(v533) = *(_DWORD *)(*(_QWORD *)v557 + 1968) >> 8;
    if (v533 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v532, 0, 0);
    else
      v532 = 0;
    v465 = llvm::ConstantInt::get(v464, (llvm::LLVMContext *)&v532, v461);
    if (v533 >= 0x41 && v532)
      MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
    v513 = v465;
    LOWORD(v536) = 257;
    v509 = (void *)sub_1C4774778((uint64_t *)v555, v463, v462, (uint64_t *)&v513, 1, (uint64_t)&v532, 0);
    v466 = (uint64_t **)v456[1];
    v467 = v456[2];
    LOWORD(v536) = 257;
    sub_1C4774778((uint64_t *)v555, v466, v467, (uint64_t *)&v509, 1, (uint64_t)&v532, 0);
    v532 = a2;
    v533 = "tsan_cleanup";
    v534 = a2[10];
    v535 = v457;
    v468 = **a2;
    v536 = v538;
    v537 = 0x200000000;
    v543 = v468;
    v544 = &v550;
    v545 = &v551;
    v546 = 0;
    LODWORD(v547) = 0;
    WORD2(v547) = 512;
    BYTE6(v547) = 7;
    v542 = 0;
    v541 = 0;
    v549 = 0;
    v548 = 0;
    v550 = &unk_1E8167888;
    v551 = &unk_1E8167A08;
    v552 = 0;
    v553 = byte_1ED817C28;
    v554 = 0;
    while (1)
    {
      v469 = (uint64_t *)llvm::EscapeEnumerator::Next((uint64_t ***)&v532);
      if (!v469)
        break;
      v470 = (uint64_t **)v456[3];
      v471 = v456[4];
      v516 = 257;
      sub_1C4774778(v469, v470, v471, 0, 0, (uint64_t)&v513, 0);
    }
    if (v536 != v538)
      free(v536);
    if ((uint64_t **)v555[0] != &v555[2])
      free(v555[0]);
    LOBYTE(v17) = 1;
  }
  if (v517 != (char *)&v518 + 8)
    free(v517);
  if (v520 != (char *)&v521 + 8)
    free(v520);
  if (v523 != (char *)&v524 + 8)
    free(v523);
  if (__p != (char *)&v496 + 8)
    free(__p);
  return v17 & 1;
}

void llvm::initializeThreadSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71E0);
  if (v2 != -1)
  {
    v5[0] = sub_1C58DBE7C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71E0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C58DBE7C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "ThreadSanitizer: detects data races.";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "tsan";
  *(_QWORD *)(v2 + 24) = 4;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5248;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58DC000;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C58DBF10(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5248;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E817E3E0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 2296) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F71E0);
  if (v3 != -1)
  {
    v7[0] = sub_1C58DBE7C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F71E0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C58DBFE0(uint64_t *a1, uint64_t a2)
{
  sub_1C5F50894("llvm.global_ctors", *a1, a2, 0, 0);
}

uint64_t sub_1C58DC000()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C58DBF10(v0);
}

void sub_1C58DC02C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C58DC050()
{
  return "ThreadSanitizerLegacyPass";
}

uint64_t sub_1C58DC060(uint64_t a1, uint64_t **a2)
{
  char *v4;
  uint64_t **v5;

  v5 = a2;
  llvm::getOrCreateSanitizerCtorAndInitFunctions(a2, "tsan.module_ctor", (llvm::UndefValue *)0x10, "__tsan_init", 0xBuLL, 0, 0, &v4, 0, 0, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1C58DBFE0, (uint64_t)&v5, 0, 0);
  if (*(_BYTE *)(a1 + 2296))
    *(_BYTE *)(a1 + 2296) = 0;
  sub_1C58D8C2C(a1 + 32);
  *(_BYTE *)(a1 + 2296) = 1;
  return 1;
}

void *sub_1C58DC0F4(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C58DC104(uint64_t a1, uint64_t **a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  void *v11;
  void **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15[2];
  int v16;
  uint64_t v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *__src;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetLibraryInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  llvm::TargetLibraryAnalysis::run(v6 + 32, (uint64_t)a2, (uint64_t)&v22);
  *(_QWORD *)(v6 + 240) = v22;
  if (*(_BYTE *)(v6 + 320))
  {
    if ((uint64_t *)(v6 + 240) == &v22)
    {
LABEL_16:
      *(_DWORD *)(v6 + 312) = v26;
      goto LABEL_17;
    }
    v7 = (void **)(v6 + 248);
    v8 = v24;
    v9 = *(unsigned int *)(v6 + 256);
    if (v9 >= v24)
    {
      if (v24)
        memmove(*v7, __src, 8 * v24);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v6 + 260) < v24)
    {
      *(_DWORD *)(v6 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v8, 8);
    }
    else if ((_DWORD)v9)
    {
      memmove(*v7, __src, 8 * v9);
      goto LABEL_13;
    }
    v9 = 0;
LABEL_13:
    if (v9 != v24)
      memcpy((char *)*v7 + 8 * v9, (char *)__src + 8 * v9, 8 * v24 - 8 * v9);
LABEL_15:
    *(_DWORD *)(v6 + 256) = v8;
    goto LABEL_16;
  }
  v11 = (void *)(v6 + 264);
  *(_QWORD *)(v6 + 248) = v6 + 264;
  v12 = (void **)(v6 + 248);
  *(_QWORD *)(v6 + 256) = 0x600000000;
  v13 = v24;
  if (v24 && v12 != &__src)
  {
    if (v24 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v24, 8);
      v14 = v24;
      if (!v24)
      {
LABEL_27:
        *(_DWORD *)(v6 + 256) = v13;
        goto LABEL_28;
      }
      v11 = *v12;
    }
    else
    {
      v14 = v24;
    }
    memcpy(v11, __src, 8 * v14);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v6 + 312) = v26;
  *(_BYTE *)(v6 + 320) = 1;
LABEL_17:
  if (__src != &v25)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v17);
  sub_1C4D8B52C(v15);
  sub_1C58D8CD0((uint64_t *)(a1 + 32), a2, (_QWORD *)(v6 + 240));
  return 1;
}

uint64_t sub_1C58DC36C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  void *v32;
  std::string *p_p;
  size_t size;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  _QWORD *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v60;
  llvm *v61;
  uint64_t v62;
  uint64_t v63;
  llvm *v64;
  _DWORD *v65;
  _QWORD *v66;
  std::string::size_type v67;
  int v68;
  int v69;
  int v70;
  llvm *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v79;
  int v80;
  llvm *v81;
  uint64_t v82[2];
  unsigned int v83;
  _QWORD v84[4];
  __int16 v85;
  std::string __p;
  int v87;

  v2 = a1;
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  v3 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v3)
  {
    v75 = 0;
    goto LABEL_103;
  }
  v4 = a2;
  v5 = *a1;
  v6 = *a1 + 8 * v3;
  v7 = (void (*)(uint64_t, uint64_t))nullsub_615;
  v77 = a2 + 16;
  do
  {
    v9 = *(_QWORD *)(v6 - 8);
    v6 -= 8;
    v8 = v9;
    v10 = *(unsigned __int8 *)(v9 + 16);
    v81 = 0;
    v81 = *(llvm **)(v9 - 32);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 56) + 40);
    v12 = llvm::Value::stripInBoundsOffsets((uint64_t)v81, v7, (uint64_t)&__p);
    v13 = v12;
    if (v12)
      v14 = *(_BYTE *)(v12 + 16) == 3;
    else
      v14 = 0;
    if (!v14)
    {
      v15 = *(uint64_t ***)v12;
      goto LABEL_59;
    }
    v16 = v12 >> 4;
    if ((*(_BYTE *)(v12 + 34) & 0x40) != 0)
    {
      v17 = ***(_QWORD ***)v12;
      __p.__r_.__value_.__r.__words[0] = v12;
      v18 = *(_DWORD *)(v17 + 2520);
      if (v18)
      {
        v19 = *(_QWORD *)(v17 + 2504);
        v20 = v18 - 1;
        v21 = v20 & (v16 ^ (v12 >> 9));
        v22 = (_QWORD *)(v19 + 24 * v21);
        v23 = *v22;
        if (*v22 == v13)
          goto LABEL_11;
        v52 = 0;
        v53 = 1;
        while (v23 != -4096)
        {
          if (v52)
            v54 = 0;
          else
            v54 = v23 == -8192;
          if (v54)
            v52 = v22;
          v55 = v21 + v53++;
          v21 = v55 & v20;
          v22 = (_QWORD *)(v19 + 24 * v21);
          v23 = *v22;
          if (*v22 == v13)
            goto LABEL_11;
        }
        if (v52)
          v66 = v52;
        else
          v66 = v22;
      }
      else
      {
        v66 = 0;
      }
      v22 = sub_1C53D65B8(v17 + 2504, (uint64_t)&__p, (uint64_t *)&__p, v66);
      v67 = __p.__r_.__value_.__r.__words[0];
      v22[1] = 0;
      v22[2] = 0;
      *v22 = v67;
LABEL_11:
      v80 = v10;
      v24 = v7;
      v25 = v6;
      v26 = v5;
      v27 = v4;
      v28 = v22[2];
      v79 = v22[1];
      v85 = 260;
      v84[0] = v11 + 216;
      llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v84);
      v29 = v87;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      llvm::getInstrProfSectionName(1u, v29, 0, &__p);
      v30 = 0;
      v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v32 = (void *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      if (v28 >= size)
      {
        if (!size)
        {
          v30 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_24:
            v4 = v27;
            v5 = v26;
            v6 = v25;
            v7 = v24;
            v10 = v80;
            v16 = v13 >> 4;
            if (v30)
              continue;
            goto LABEL_25;
          }
LABEL_23:
          operator delete(v32);
          goto LABEL_24;
        }
        v30 = memcmp((const void *)(v79 + v28 - size), p_p, size) == 0;
      }
      if ((v31 & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_23;
    }
LABEL_25:
    v15 = *(uint64_t ***)v13;
    if ((*(_BYTE *)(v13 + 23) & 0x10) != 0)
    {
      v35 = **v15;
      v36 = *(_QWORD *)(v35 + 152);
      v37 = *(unsigned int *)(v35 + 168);
      if ((_DWORD)v37)
      {
        LODWORD(v38) = (v37 - 1) & (v16 ^ (v13 >> 9));
        v39 = (uint64_t *)(v36 + 16 * v38);
        v40 = *v39;
        if (*v39 == v13)
        {
LABEL_33:
          v43 = (_QWORD *)v39[1];
          if (*v43 >= 0xBuLL)
          {
            v44 = v43[2];
            v45 = *(_QWORD *)((char *)v43 + 19);
            if (v44 == 0x675F6D766C6C5F5FLL && v45 == 0x766F63675F6D766CLL)
              continue;
          }
          if ((_DWORD)v37)
          {
            LODWORD(v47) = (v37 - 1) & (v16 ^ (v13 >> 9));
            v48 = (uint64_t *)(v36 + 16 * v47);
            v49 = *v48;
            if (*v48 == v13)
            {
LABEL_54:
              v56 = (_QWORD *)v48[1];
              if (*v56 >= 0xBuLL)
              {
                v57 = v56[2];
                v58 = *(_QWORD *)((char *)v56 + 19);
                if (v57 == 0x675F6D766C6C5F5FLL && v58 == 0x616463675F6D766CLL)
                  continue;
              }
              goto LABEL_59;
            }
            v50 = 1;
            while (v49 != -4096)
            {
              v51 = v47 + v50++;
              v47 = v51 & (v37 - 1);
              v49 = *(_QWORD *)(v36 + 16 * v47);
              if (v49 == v13)
              {
                v48 = (uint64_t *)(v36 + 16 * v47);
                goto LABEL_54;
              }
            }
          }
          v48 = (uint64_t *)(v36 + 16 * v37);
          goto LABEL_54;
        }
        v41 = 1;
        while (v40 != -4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v37 - 1);
          v40 = *(_QWORD *)(v36 + 16 * v38);
          if (v40 == v13)
          {
            v39 = (uint64_t *)(v36 + 16 * v38);
            goto LABEL_33;
          }
        }
      }
      v39 = (uint64_t *)(v36 + 16 * v37);
      goto LABEL_33;
    }
LABEL_59:
    v60 = *((_DWORD *)v15 + 2);
    if ((v60 & 0xFE) == 0x12)
    {
      v15 = (uint64_t **)*v15[2];
      v60 = *((_DWORD *)v15 + 2);
    }
    if ((v60 & 0xFE) == 0x12)
      v60 = *(_DWORD *)(*v15[2] + 8);
    if (v60 <= 0xFF)
    {
      v61 = v81;
      if (v10 != 61)
      {
        if (v83)
        {
          LODWORD(v62) = (v83 - 1) & ((v81 >> 4) ^ (v81 >> 9));
          v63 = v82[0] + 16 * v62;
          v64 = *(llvm **)v63;
          if (v81 == *(llvm **)v63)
          {
LABEL_67:
            if (!byte_1ED817F28 && v63 != v82[0] + 16 * v83)
            {
              v65 = (_DWORD *)(*(_QWORD *)v4 + 16 * *(_QWORD *)(v63 + 8));
              if (!byte_1ED817E68 || (*(_WORD *)(v8 + 18) & 1) == 0 && (*(_WORD *)(*(_QWORD *)v65 + 18) & 1) == 0)
              {
                v65[2] |= 1u;
                continue;
              }
            }
          }
          else
          {
            v68 = 1;
            while (v64 != (llvm *)-4096)
            {
              v69 = v62 + v68++;
              v62 = v69 & (v83 - 1);
              v64 = *(llvm **)(v82[0] + 16 * v62);
              if (v81 == v64)
              {
                v63 = v82[0] + 16 * v62;
                goto LABEL_67;
              }
            }
          }
        }
        v70 = *((unsigned __int8 *)v81 + 16);
        v71 = v81;
        if (v81 && v70 == 62)
        {
          v71 = (llvm *)*((_QWORD *)v81 - 4 * (*((_DWORD *)v81 + 5) & 0x7FFFFFF));
          v70 = *((unsigned __int8 *)v71 + 16);
        }
        if (v70 == 60)
        {
          if (sub_1C58DC91C((uint64_t)v71))
            continue;
          v61 = v81;
        }
        else if (v70 == 3 && (*((_BYTE *)v71 + 80) & 1) != 0)
        {
          continue;
        }
      }
      if (*((_BYTE *)llvm::getUnderlyingObject(v61, (const llvm::Value *)6) + 16) != 59
        || llvm::PointerMayBeCaptured(v81, (const llvm::Value *)1, 1, 0))
      {
        v72 = *(unsigned int *)(v4 + 8);
        if (v72 >= *(_DWORD *)(v4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v77, v72 + 1, 16);
          v72 = *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 8);
          *(_QWORD *)v72 = v8;
          *(_QWORD *)(v72 + 8) = 0;
          LODWORD(v72) = *(_DWORD *)(v4 + 8);
        }
        else
        {
          v73 = *(_QWORD *)v4 + 16 * v72;
          *(_QWORD *)v73 = v8;
          *(_DWORD *)(v73 + 8) = 0;
        }
        v74 = (v72 + 1);
        *(_DWORD *)(v4 + 8) = v74;
        if (v10 == 61)
          sub_1C61BEB98(v82, &v81)[1] = v74 - 1;
      }
    }
  }
  while (v6 != v5);
  v75 = v82[0];
  v2 = a1;
LABEL_103:
  *((_DWORD *)v2 + 2) = 0;
  return MEMORY[0x1CAA32FB4](v75, 8);
}

BOOL sub_1C58DC91C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  llvm::MDNode **v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(_BYTE *)(a1 + 23) & 0x20) == 0)
    return 0;
  v1 = ***(_QWORD ***)a1;
  v18 = a1;
  v2 = *(_DWORD *)(v1 + 2496);
  if (!v2)
  {
    v16 = 0;
LABEL_22:
    v6 = sub_1C541AB24(v1 + 2480, (uint64_t)&v18, &v18, v16);
    v17 = v18;
    v6[3] = 0;
    v6[4] = 0;
    *v6 = v17;
    v6[1] = v6 + 3;
    v6[2] = 0x100000000;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v1 + 2480);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v6 = (_QWORD *)(v3 + 40 * v5);
  v7 = *v6;
  if (*v6 != a1)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(v3 + 40 * (v11 & v4));
      v7 = *v6;
      if (*v6 == a1)
        goto LABEL_12;
    }
    if (v8)
      v16 = v8;
    else
      v16 = v6;
    goto LABEL_22;
  }
LABEL_12:
  v12 = *((unsigned int *)v6 + 4);
  if (!(_DWORD)v12)
    return 0;
  v13 = (llvm::MDNode **)(v6[1] + 8);
  v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 1)
  {
    v13 += 2;
    v14 -= 16;
    if (!v14)
      return 0;
  }
  if (!*v13)
    return 0;
  return llvm::MDNode::isTBAAVtableAccess(*v13);
}

uint64_t sub_1C58DCA44(uint64_t a1, uint64_t a2)
{
  int v2;
  const char *v3;
  unsigned int v4;
  BOOL v5;
  int v7;

  sub_1C4768AD0(a2, a1);
  if ((_DWORD)v3 == 1)
  {
    v7 = v2;
    v2 = v7;
  }
  v4 = (v2 + 7) & 0xFFFFFFF8;
  v5 = v4 - 8 > 0x38 || ((1 << (((v2 + 7) & 0xF8u) - 8)) & 0x100000001000101) == 0;
  if (!v5 || v4 == 128)
    return __clz(__rbit32((v2 + 7) >> 3));
  else
    return 0xFFFFFFFFLL;
}

llvm::ValueHandleBase *sub_1C58DCAD8(uint64_t *a1, int a2, const llvm::APInt *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::ConstantInt *v6;
  unint64_t v7;
  unint64_t v8;
  llvm::ValueHandleBase *result;
  llvm::ConstantInt *v10;
  llvm::ValueHandleBase *v11;
  unint64_t v12;
  unsigned int v13;

  v3 = (a2 - 4);
  if (v3 >= 4)
    v4 = 0;
  else
    v4 = v3 + 2;
  v5 = *a1;
  v6 = *(llvm::ConstantInt **)(*a1 + 1960);
  v7 = *(unsigned int *)(v5 + 1968);
  v13 = v7 >> 8;
  if (v7 >> 8 > 0x40)
  {
    v10 = v6;
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, v4, 0);
    v6 = v10;
  }
  else
  {
    if (v7 <= 0xFF)
      v8 = 0;
    else
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v7);
    v12 = v8 & v4;
  }
  result = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v12, a3);
  if (v13 >= 0x41)
  {
    if (v12)
    {
      v11 = result;
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
      return v11;
    }
  }
  return result;
}

__n128 sub_1C58DCB94(uint64_t a1, char *__s, _BYTE **a3, __n128 *a4, _WORD *a5)
{
  size_t v10;
  _BYTE *v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  v11 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v11;
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

__n128 sub_1C58DCC24(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED817BA8, "tsan-handle-cxx-exceptions", 0x1AuLL);
  v6 = *a1;
  byte_1ED817C28 = **a1;
  byte_1ED817C39 = 1;
  byte_1ED817C38 = *v6;
  result = *a2;
  xmmword_1ED817BC8 = (__int128)*a2;
  word_1ED817BB2 = (32 * (*a3 & 3)) | word_1ED817BB2 & 0xFF9F;
  return result;
}

__n128 sub_1C58DCCA8(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED817C68, "tsan-instrument-atomics", 0x17uLL);
  v6 = *a1;
  byte_1ED817CE8 = **a1;
  byte_1ED817CF9 = 1;
  byte_1ED817CF8 = *v6;
  result = *a2;
  xmmword_1ED817C88 = (__int128)*a2;
  word_1ED817C72 = (32 * (*a3 & 3)) | word_1ED817C72 & 0xFF9F;
  return result;
}

__n128 sub_1C58DCD2C(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED817D28, "tsan-instrument-memintrinsics", 0x1DuLL);
  v6 = *a1;
  byte_1ED817DA8 = **a1;
  byte_1ED817DB9 = 1;
  byte_1ED817DB8 = *v6;
  result = *a2;
  xmmword_1ED817D48 = (__int128)*a2;
  word_1ED817D32 = (32 * (*a3 & 3)) | word_1ED817D32 & 0xFF9F;
  return result;
}

__n128 sub_1C58DCDB0(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED817DE8, "tsan-distinguish-volatile", 0x19uLL);
  v6 = *a1;
  byte_1ED817E68 = **a1;
  byte_1ED817E79 = 1;
  byte_1ED817E78 = *v6;
  result = *a2;
  xmmword_1ED817E08 = (__int128)*a2;
  word_1ED817DF2 = (32 * (*a3 & 3)) | word_1ED817DF2 & 0xFF9F;
  return result;
}

__n128 sub_1C58DCE34(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED817EA8, "tsan-instrument-read-before-write", 0x21uLL);
  v6 = *a1;
  byte_1ED817F28 = **a1;
  byte_1ED817F39 = 1;
  byte_1ED817F38 = *v6;
  result = *a2;
  xmmword_1ED817EC8 = (__int128)*a2;
  word_1ED817EB2 = (32 * (*a3 & 3)) | word_1ED817EB2 & 0xFF9F;
  return result;
}

uint64_t sub_1C58DCEB8()
{
  int v1;
  __n128 v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument memory accesses";
  v2.n128_u64[1] = 26;
  v1 = 1;
  sub_1C62B0F0C((llvm::cl::Option *)&unk_1ED817A28, "tsan-instrument-memory-accesses", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817A28, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument function entry and exit";
  v2.n128_u64[1] = 34;
  v1 = 1;
  sub_1C62B0F0C((llvm::cl::Option *)&unk_1ED817AE8, "tsan-instrument-func-entry-exit", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817AE8, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Handle C++ exceptions (insert cleanup blocks for unwinding)";
  v2.n128_u64[1] = 59;
  v1 = 1;
  sub_1C62B0FC0(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED817BA8, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument atomics";
  v2.n128_u64[1] = 18;
  v1 = 1;
  sub_1C62B1064(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED817C68, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Instrument memintrinsics (memset/memcpy/memmove)";
  v2.n128_u64[1] = 48;
  v1 = 1;
  sub_1C62B1108(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED817D28, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Emit special instrumentation for accesses to volatiles";
  v2.n128_u64[1] = 54;
  v1 = 1;
  sub_1C62B11AC(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED817DE8, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Do not eliminate read instrumentation for read-before-writes";
  v2.n128_u64[1] = 60;
  v1 = 1;
  sub_1C62B1250(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED817EA8, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Emit special compound instrumentation for reads-before-writes";
  v2.n128_u64[1] = 61;
  v1 = 1;
  sub_1C62B0F0C((llvm::cl::Option *)&unk_1ED817F68, "tsan-compound-read-before-write", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED817F68, &dword_1C475E000);
}

void llvm::initializeHWAddressSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71E8);
  if (v2 != -1)
  {
    v5[0] = sub_1C58DD174;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71E8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C58DD174(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeStackSafetyGlobalInfoWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "HWAddressSanitizer: detect memory bugs using tagged addressing.";
  *(_QWORD *)(v3 + 8) = 63;
  *(_QWORD *)(v3 + 16) = "hwasan";
  *(_QWORD *)(v3 + 24) = 6;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F5250;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C58E341C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C58DD218(uint64_t a1, char a2, char a3, char a4)
{
  unint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  _QWORD v10[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5250;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E817E4B8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 41) = a3;
  *(_BYTE *)(a1 + 42) = a4;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v8 = qword_1ED830BC0[0];
  v6 = atomic_load(&qword_1EF8F71E8);
  if (v6 != -1)
  {
    v10[0] = sub_1C58DD174;
    v10[1] = &v8;
    v9 = v10;
    std::__call_once(&qword_1EF8F71E8, &v9, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::HWAddressSanitizerPass::run(BOOL *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10;
  uint64_t ResultImpl;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[4];
  __int16 v19;
  char v20;
  void *v21;
  char v22;
  int v23;

  v19 = 260;
  v18[0] = a2 + 216;
  llvm::Triple::Triple((uint64_t)&v21, (llvm::Twine *)v18);
  if (v23 == 42 && byte_1EF8F5458 != 0 || byte_1ED8185E8 == 0)
    goto LABEL_9;
  if (word_1ED818630)
  {
    if (!byte_1ED8186A8)
      goto LABEL_9;
LABEL_14:
    v10 = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::StackSafetyGlobalAnalysis::Key, a2) + 8;
    goto LABEL_15;
  }
  if (!a1[2])
    goto LABEL_14;
LABEL_9:
  v10 = 0;
LABEL_15:
  sub_1C58DD4E4((uint64_t)v18, (uint64_t **)a2, *a1, a1[1], v10);
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2);
  v12 = *(_QWORD *)(a2 + 32);
  if (v12 == a2 + 24)
    goto LABEL_23;
  v13 = 0;
  v14 = *(_QWORD *)(ResultImpl + 8);
  do
  {
    if (v12)
      v15 = v12 - 56;
    else
      v15 = 0;
    v17[0] = v14;
    v17[1] = v15;
    v16[0] = v14;
    v16[1] = v15;
    v13 |= sub_1C58DF4B8((uint64_t)v18, v15, (uint64_t (*)(uint64_t))sub_1C58E4974, (uint64_t)v17, (uint64_t (*)(uint64_t))sub_1C58E499C, (uint64_t)v16);
    v12 = *(_QWORD *)(v12 + 8);
  }
  while (v12 != a2 + 24);
  if ((v13 & 1) == 0)
  {
LABEL_23:
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)(a4 + 88) = 0;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_DWORD *)(a4 + 64) = 2;
  }
  if (v20 < 0)
    operator delete((void *)v18[3]);
  if (v22 < 0)
    operator delete(v21);
}

uint64_t sub_1C58DD4E4(uint64_t a1, uint64_t **a2, BOOL a3, BOOL a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  llvm::UndefValue *v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  int v16;
  char v17;
  char v18;
  BOOL v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  llvm::LLVMContext *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  char v30;
  char v31;
  uint64_t v32;
  llvm::PointerType *v33;
  uint64_t **v35;
  size_t *inserted;
  llvm::PointerType *v37;
  llvm::PointerType *v38;
  _DWORD *v39;
  llvm::GlobalValue *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  char hasExternalWeakLinkage;
  _DWORD *v45;
  llvm::GlobalValue *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  char v50;
  llvm::ConstantAggregateZero *v51;
  llvm::Value **Impl;
  uint64_t **v53;
  llvm::Value *v54;
  uint64_t *v55;
  llvm::PointerType *v56;
  _DWORD *v57;
  llvm::GlobalObject *v58;
  uint64_t v59;
  llvm::GlobalObject *v60;
  llvm::GlobalObject *v61;
  llvm::GlobalObject *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  llvm::GlobalObject **v68;
  llvm::GlobalObject *v69;
  llvm::UndefValue *v70;
  llvm::UndefValue *v71;
  llvm::ValueHandleBase *Sub;
  llvm::UndefValue *v73;
  llvm::UndefValue *v74;
  llvm::ValueHandleBase *v75;
  llvm::ConstantAggregateZero *TypeForElements;
  llvm::UndefValue *v77;
  uint64_t **v78;
  _DWORD *v79;
  llvm::GlobalObject *v80;
  uint64_t v81;
  llvm::Type *v82;
  llvm::Value **NullValue;
  llvm::GlobalObject *v84;
  llvm::GlobalObject *v85;
  llvm::GlobalObject *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  llvm::GlobalObject **v92;
  llvm::GlobalObject *v93;
  uint64_t *v94;
  llvm::Value *v95;
  llvm::MDNode *v96;
  uint64_t **v97;
  _BOOL4 v98;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t NamedMetadata;
  uint64_t v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  llvm::Value *v114;
  llvm::Value *v115;
  llvm::UndefValue *v116;
  uint64_t v117;
  llvm::APInt *v118;
  unsigned int v119;
  int v120;
  llvm::GlobalObject **v121;
  int v122;
  BOOL v123;
  unsigned int v124;
  llvm::GlobalObject **v125;
  int v126;
  BOOL v127;
  unsigned int v128;
  llvm::GlobalObject **v129;
  llvm::GlobalObject *v130;
  llvm::GlobalObject **v131;
  llvm::GlobalObject *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t ***v139;
  int v140;
  uint64_t ***v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t ****v149;
  uint64_t ***v150;
  int v151;
  int v152;
  uint64_t ***v153;
  int v154;
  int v155;
  BOOL v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  int *v167;
  int *v168;
  char v169;
  int *v170;
  size_t v171;
  size_t v172;
  char *v173;
  char v174;
  void **v175;
  uint64_t ***v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  BOOL v184;
  const char *v185;
  char v186;
  char v187;
  unint64_t v188;
  uint64_t v189;
  llvm::Type *v190;
  _BYTE *v191;
  llvm::ConstantAggregateZero *v192;
  llvm::Value **v193;
  llvm::ConstantAggregateZero *v194;
  _DWORD *v195;
  llvm::GlobalObject *v196;
  uint64_t v197;
  llvm::PointerType *v198;
  char v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t ****v205;
  uint64_t ***v206;
  int v207;
  int v208;
  char **v209;
  char *v210;
  llvm::UndefValue *v211;
  char *v212;
  llvm::GlobalObject *v213;
  uint64_t **v214;
  char v215;
  BOOL v216;
  char v217;
  unint64_t v218;
  llvm::UndefValue *v219;
  uint64_t *v220;
  llvm::UndefValue *v221;
  char v222;
  llvm::Value **v223;
  llvm::ValueHandleBase *v224;
  llvm::UndefValue *v225;
  llvm::PointerType *v226;
  llvm::Type *v227;
  char v228;
  llvm::Value *v229;
  llvm::Value *v230;
  int v231;
  int v232;
  unsigned int v233;
  void **v234;
  unint64_t v235;
  _DWORD *v236;
  _DWORD *v237;
  llvm::GlobalObject *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t ****v243;
  uint64_t ***v244;
  int v245;
  int v246;
  char **v247;
  char *v248;
  llvm::UndefValue *v249;
  char *v250;
  uint64_t v251;
  llvm::UndefValue *v252;
  llvm::UndefValue *v253;
  llvm::ConstantExpr *v254;
  llvm::Value **v255;
  llvm::ValueHandleBase *Add;
  llvm::UndefValue *v257;
  uint64_t v258;
  llvm::Value **v259;
  llvm::ConstantAggregateZero *v260;
  llvm::UndefValue *v261;
  llvm::Value *v262;
  llvm::GlobalObject *v263;
  llvm::Value *v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  unsigned int v269;
  llvm::GlobalObject **v270;
  llvm::GlobalObject *v271;
  uint64_t *v272;
  llvm::MDNode *v273;
  uint64_t **v274;
  llvm::GlobalObject **v275;
  int v276;
  BOOL v277;
  unsigned int v278;
  llvm::GlobalObject **v279;
  llvm::UndefValue *v280;
  _BOOL4 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  llvm::Value **v288;
  uint64_t **v289;
  uint64_t **v290;
  unint64_t v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  uint64_t **v299;
  unint64_t v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t **v309;
  llvm::PointerType *v310;
  unsigned __int8 *v311;
  unsigned __int8 **v312;
  unsigned __int8 *v313;
  char *v314;
  unsigned __int8 *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned __int8 **v320;
  unsigned __int8 *v321;
  int v322;
  int v323;
  unsigned __int8 *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  const std::string::value_type *v328;
  std::string::size_type v329;
  __int128 v330;
  llvm::PointerType *v331;
  unsigned __int8 *v332;
  char v333;
  char v334;
  uint64_t v335;
  char *v336;
  llvm::Function *v337;
  _QWORD *v338;
  uint64_t **v339;
  unsigned int v340;
  uint64_t *v341;
  llvm::Type *v342;
  uint64_t v343;
  llvm::UndefValue *v344;
  __int16 v345;
  unsigned __int8 *v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  llvm::Value *v351;
  unsigned __int8 *v352;
  unsigned __int8 *v353;
  uint64_t v354;
  __int16 v355;
  __int16 v356;
  __int16 v357;
  int v358;
  unsigned int v359;
  std::string *v360;
  size_t size;
  size_t *v362;
  _OWORD v363[2];
  void *__p[2];
  void **v365;
  uint64_t v366;
  unsigned __int8 **v367;
  unsigned __int8 *v368;
  uint64_t v369;
  llvm::PointerType *v370;
  uint64_t **v371;
  char v372[32];
  __int16 v373;
  char v374[32];
  __int16 v375;
  char v376[32];
  __int16 v377;
  std::string v378;
  _QWORD *v379;
  uint64_t v380;
  uint64_t v381;
  unsigned __int8 **v382;
  unsigned __int8 **v383;
  uint64_t v384;
  void *v385[2];
  _WORD v386[16];
  uint64_t v387;
  uint64_t v388;
  llvm::LLVMContext *v389;
  void **v390;
  void **v391;
  uint64_t v392;
  int v393;
  __int16 v394;
  char v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  void *v399;
  _BYTE v400[24];
  __int128 v401;
  llvm::UndefValue *v402;
  uint64_t **v403;
  _QWORD **v404;
  uint64_t v405;
  uint64_t v406;
  void **v407;
  uint64_t v408;
  int v409;
  __int16 v410;
  char v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  void *v415;
  int v416[8];
  __int16 v417;
  llvm::UndefValue *v418;
  char *v419;
  const char *v420;
  char *v421;
  char *v422;
  void *v423;
  unsigned __int8 *v424;
  unsigned __int8 *v425;
  uint64_t v426;

  v426 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 24) = 0u;
  v7 = a1 + 24;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v8 = a1 + 48;
  v9 = **a2;
  *(_QWORD *)(a1 + 160) = v9 + 1576;
  *(_QWORD *)(a1 + 200) = v9 + 1984;
  *(_WORD *)(a1 + 217) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  if (word_1ED8184B0)
    a4 = byte_1ED818528 != 0;
  *(_BYTE *)(a1 + 209) = a4;
  v11 = byte_1ED818B28 != 0;
  if (!word_1ED818AB0)
    v11 = a3;
  *(_BYTE *)(a1 + 208) = v11;
  v386[8] = 260;
  v385[0] = a2 + 27;
  llvm::Triple::Triple((uint64_t)v400, (llvm::Twine *)v385);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v12 = v402;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)&v400[16];
  *(_OWORD *)v7 = *(_OWORD *)v400;
  *(_OWORD *)v8 = v401;
  *(_QWORD *)(v8 + 16) = v12;
  v13 = *(_DWORD *)(a1 + 48);
  v14 = byte_1ED818168 != 0;
  v15 = v13 == 42 && byte_1EF8F5458 != 0;
  *(_BYTE *)(a1 + 216) = v15;
  v16 = v13 == 42 || v14;
  *(_BYTE *)(a1 + 213) = v16;
  if (v15)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v17 = byte_1ED8185E8;
    if (byte_1ED8185E8)
      v19 = byte_1ED818768 == 0;
    else
      v19 = 1;
    v18 = !v19;
  }
  *(_BYTE *)(a1 + 214) = v17;
  *(_BYTE *)(a1 + 215) = v18;
  v20 = v13 == 42;
  if (v13 == 42)
    v21 = 57;
  else
    v21 = 56;
  *(_DWORD *)(a1 + 220) = v21;
  v22 = 255;
  if (v20)
    v22 = 63;
  *(_QWORD *)(a1 + 224) = v22;
  *(_DWORD *)(a1 + 136) = 4;
  if (*(_DWORD *)(a1 + 60) == 6)
  {
    *(_WORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_BYTE *)(a1 + 154) = 1;
    goto LABEL_34;
  }
  if (word_1EF8F5568)
  {
    *(_WORD *)(a1 + 152) = 0;
    v23 = xmmword_1EF8F55E0;
LABEL_31:
    *(_QWORD *)(a1 + 144) = v23;
    *(_BYTE *)(a1 + 154) = 0;
    goto LABEL_34;
  }
  if (byte_1ED818B28 | v16)
  {
    *(_DWORD *)(a1 + 151) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    if (byte_1ED818BE8)
    {
      *(_WORD *)(a1 + 152) = 1;
      v23 = -1;
      goto LABEL_31;
    }
    v120 = byte_1ED818CA8;
    *(_BYTE *)(a1 + 152) = 0;
    if (v120)
      *(_WORD *)(a1 + 153) = 257;
    else
      *(_WORD *)(a1 + 153) = 0;
    *(_QWORD *)(a1 + 144) = -1;
  }
LABEL_34:
  v24 = **(llvm::LLVMContext ***)(a1 + 8);
  *(_QWORD *)a1 = v24;
  v385[0] = v386;
  v385[1] = (void *)0x200000000;
  v389 = v24;
  v390 = &v398;
  v391 = &v399;
  v392 = 0;
  v393 = 0;
  v394 = 512;
  v395 = 7;
  v387 = 0;
  v388 = 0;
  v396 = 0;
  v397 = 0;
  v398 = &unk_1E8167888;
  v399 = &unk_1E8167A08;
  *(_QWORD *)(a1 + 168) = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(a2 + 34), v24, 0);
  *(_QWORD *)(a1 + 176) = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v389 + 1912), 0);
  v25 = *(_QWORD *)v389 + 1960;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)v389 + 1912;
  *(_QWORD *)(a1 + 192) = v25;
  *(_QWORD *)(a1 + 232) = 0;
  if (*(_DWORD *)(a1 + 64) == 11)
    v26 = sub_1C4F7A460((int *)v7, 0x1Eu) ^ 1;
  else
    v26 = 1;
  v27 = byte_1ED818FA8 != 0;
  if (!word_1ED818F30)
    v27 = v26;
  *(_BYTE *)(a1 + 211) = v27;
  if ((*(_DWORD *)(a1 + 48) - 3) <= 2 && *(_DWORD *)(a1 + 68) == 3)
  {
    if (word_1EF8F5320)
      v28 = byte_1EF8F5398;
    else
      v28 = *(unsigned __int8 *)(a1 + 209);
    v29 = v28 == 0;
  }
  else
  {
    v29 = 0;
  }
  *(_BYTE *)(a1 + 210) = v29;
  if (word_1ED8189F0)
  {
    v30 = dword_1ED818A68;
    if (dword_1ED818A68 == -1)
      goto LABEL_52;
    *(_BYTE *)(a1 + 217) = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 208))
      goto LABEL_52;
    *(_BYTE *)(a1 + 217) = 1;
    v30 = -1;
  }
  *(_BYTE *)(a1 + 218) = v30;
LABEL_52:
  if (word_1ED818E70)
    v31 = byte_1ED818EE8 != 0;
  else
    v31 = v26 ^ 1;
  *(_BYTE *)(a1 + 212) = v31;
  if (*(_BYTE *)(a1 + 208))
    goto LABEL_56;
  LODWORD(v367) = v26;
  v35 = *(uint64_t ***)(a1 + 8);
  v418 = (llvm::UndefValue *)a1;
  llvm::getOrCreateSanitizerCtorAndInitFunctions(v35, "hwasan.module_ctor", (llvm::UndefValue *)0x12, "__hwasan_init", 0xDuLL, 0, 0, (char **)v400, 0, 0, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1C58E37E0, (uint64_t)&v418, 0, 0);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)v400;
  inserted = llvm::Module::getOrInsertComdat(*(_QWORD *)(a1 + 8), "hwasan.module_ctor", 0x12uLL);
  llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 184), 0);
  v38 = v37;
  v39 = operator new(0x78uLL);
  v40 = (llvm::GlobalValue *)(v39 + 8);
  v39[13] = v39[13] & 0x38000000 | 1;
  *(_QWORD *)v39 = 0;
  *((_QWORD *)v39 + 1) = 0;
  *((_QWORD *)v39 + 2) = 0;
  *((_QWORD *)v39 + 3) = v39 + 8;
  v41 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v400 = "__start_hwasan_globals";
  WORD4(v401) = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v39 + 8), v41, v38, 1, 0, 0, (uint64_t)v400, 0, 0, 0, 0);
  v42 = v39[16];
  v43 = v42 & 0xFFFFFFCF | 0x10;
  v39[16] = v43;
  if ((v42 & 0xFu) - 7 < 2
    || (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v40),
        v43 = v39[16],
        (hasExternalWeakLinkage & 1) == 0))
  {
    v43 |= 0x4000u;
  }
  v39[16] = v43 | 0x4000;
  v45 = operator new(0x78uLL);
  v46 = (llvm::GlobalValue *)(v45 + 8);
  v45[13] = v45[13] & 0x38000000 | 1;
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = 0;
  *((_QWORD *)v45 + 2) = 0;
  *((_QWORD *)v45 + 3) = v45 + 8;
  v47 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v400 = "__stop_hwasan_globals";
  WORD4(v401) = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v45 + 8), v47, v38, 1, 0, 0, (uint64_t)v400, 0, 0, 0, 0);
  v48 = v45[16];
  v49 = v48 & 0xFFFFFFCF | 0x10;
  v45[16] = v49;
  if ((v48 & 0xFu) - 7 < 2 || (v50 = llvm::GlobalValue::hasExternalWeakLinkage(v46), v49 = v45[16], (v50 & 1) == 0))
    v49 |= 0x4000u;
  v45[16] = v49 | 0x4000;
  llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)a1 + 1912), (llvm::Type *)8);
  Impl = llvm::ConstantDataSequential::getImpl("LLVM", (llvm::Type *)8, v51);
  v53 = *(uint64_t ***)(a1 + 192);
  v54 = *Impl;
  v55 = *v53;
  *(_QWORD *)v400 = v53;
  *(_QWORD *)&v400[8] = v53;
  *(_QWORD *)&v400[16] = v53;
  *(_QWORD *)&v401 = v54;
  *((_QWORD *)&v401 + 1) = v53;
  v402 = (llvm::UndefValue *)v53;
  v56 = (llvm::PointerType *)llvm::StructType::get(v55, (uint64_t)v400, 6, 0);
  v57 = operator new(0x78uLL);
  v58 = (llvm::GlobalObject *)(v57 + 8);
  v57[13] = v57[13] & 0x38000000 | 1;
  *(_QWORD *)v57 = 0;
  *((_QWORD *)v57 + 1) = 0;
  *((_QWORD *)v57 + 2) = 0;
  *((_QWORD *)v57 + 3) = v57 + 8;
  v59 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v400 = "hwasan.note";
  WORD4(v401) = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v57 + 8), v59, v56, 1, 8, 0, (uint64_t)v400, 0, 0, 0, 0);
  v60 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***((_QWORD ***)v57 + 4) + 2136, ".note.hwasan.globals", 0x14uLL);
  v62 = v61;
  v63 = ***((_QWORD ***)v57 + 4);
  *(_QWORD *)v400 = v57 + 8;
  v64 = *(_DWORD *)(v63 + 2520);
  if (v64)
  {
    v65 = *(_QWORD *)(v63 + 2504);
    v66 = v64 - 1;
    v67 = v66 & ((v58 >> 4) ^ (v58 >> 9));
    v68 = (llvm::GlobalObject **)(v65 + 24 * v67);
    v69 = *v68;
    if (*v68 == v58)
      goto LABEL_71;
    v121 = 0;
    v122 = 1;
    while (v69 != (llvm::GlobalObject *)-4096)
    {
      if (v121)
        v123 = 0;
      else
        v123 = v69 == (llvm::GlobalObject *)-8192;
      if (v123)
        v121 = v68;
      v124 = v67 + v122++;
      v67 = v124 & v66;
      v68 = (llvm::GlobalObject **)(v65 + 24 * v67);
      v69 = *v68;
      if (*v68 == v58)
        goto LABEL_71;
    }
    if (v121)
      v129 = v121;
    else
      v129 = v68;
  }
  else
  {
    v129 = 0;
  }
  v68 = (llvm::GlobalObject **)sub_1C53D65B8(v63 + 2504, (uint64_t)v400, (uint64_t *)v400, v129);
  v130 = *(llvm::GlobalObject **)v400;
  v68[1] = 0;
  v68[2] = 0;
  *v68 = v130;
LABEL_71:
  v68[1] = v60;
  v68[2] = v62;
  v57[16] = v57[16] & 0xFFBFFFFF | ((v62 != 0) << 22);
  llvm::GlobalObject::setComdat(v58, (llvm::Comdat *)inserted);
  v57[16] = v57[16] & 0xFFC0BFFF | 0x34000;
  *(_QWORD *)v400 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), 8, 0);
  *(_QWORD *)&v400[8] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), 8, 0);
  *(_QWORD *)&v400[16] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), 3, 0);
  *(_QWORD *)&v401 = Impl;
  v70 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v40, *(llvm::Constant **)(a1 + 200), 0);
  v71 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v58, *(llvm::Constant **)(a1 + 200), 0);
  Sub = llvm::ConstantExpr::getSub(v70, v71, 0, 0);
  *((_QWORD *)&v401 + 1) = sub_1C537D3B8((llvm *)0x26, (uint64_t)Sub, *(llvm::Constant **)(a1 + 192), 0);
  v73 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v46, *(llvm::Constant **)(a1 + 200), 0);
  v74 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v58, *(llvm::Constant **)(a1 + 200), 0);
  v75 = llvm::ConstantExpr::getSub(v73, v74, 0, 0);
  v402 = sub_1C537D3B8((llvm *)0x26, (uint64_t)v75, *(llvm::Constant **)(a1 + 192), 0);
  TypeForElements = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements(***(uint64_t ****)v400, (uint64_t)v400, 6u, 0);
  v77 = llvm::ConstantStruct::get(TypeForElements, (llvm::Type *)v400, 6);
  llvm::GlobalVariable::setInitializer((uint64_t)v58, v77);
  v78 = *(uint64_t ***)(a1 + 8);
  *(_QWORD *)v400 = v57 + 8;
  sub_1C5F50CB4(v78, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)v400, 1);
  v79 = operator new(0x78uLL);
  v80 = (llvm::GlobalObject *)(v79 + 8);
  v79[13] = v79[13] & 0x38000000 | 1;
  *(_QWORD *)v79 = 0;
  *((_QWORD *)v79 + 1) = 0;
  *((_QWORD *)v79 + 2) = 0;
  *((_QWORD *)v79 + 3) = v79 + 8;
  v81 = *(_QWORD *)(a1 + 8);
  NullValue = llvm::Constant::getNullValue(v38, v82);
  *(_QWORD *)v400 = "hwasan.dummy.global";
  WORD4(v401) = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v79 + 8), v81, v38, 1, 8, (uint64_t)NullValue, (uint64_t)v400, 0, 0, 0, 0);
  v84 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***((_QWORD ***)v79 + 4) + 2136, "hwasan_globals", 0xEuLL);
  v86 = v85;
  v87 = ***((_QWORD ***)v79 + 4);
  *(_QWORD *)v400 = v79 + 8;
  v88 = *(_DWORD *)(v87 + 2520);
  if (v88)
  {
    v89 = *(_QWORD *)(v87 + 2504);
    v90 = v88 - 1;
    v91 = v90 & ((v80 >> 4) ^ (v80 >> 9));
    v92 = (llvm::GlobalObject **)(v89 + 24 * v91);
    v93 = *v92;
    if (*v92 == v80)
      goto LABEL_73;
    v125 = 0;
    v126 = 1;
    while (v93 != (llvm::GlobalObject *)-4096)
    {
      if (v125)
        v127 = 0;
      else
        v127 = v93 == (llvm::GlobalObject *)-8192;
      if (v127)
        v125 = v92;
      v128 = v91 + v126++;
      v91 = v128 & v90;
      v92 = (llvm::GlobalObject **)(v89 + 24 * v91);
      v93 = *v92;
      if (*v92 == v80)
        goto LABEL_73;
    }
    if (v125)
      v131 = v125;
    else
      v131 = v92;
  }
  else
  {
    v131 = 0;
  }
  v92 = (llvm::GlobalObject **)sub_1C53D65B8(v87 + 2504, (uint64_t)v400, (uint64_t *)v400, v131);
  v132 = *(llvm::GlobalObject **)v400;
  v92[1] = 0;
  v92[2] = 0;
  *v92 = v132;
LABEL_73:
  v92[1] = v84;
  v92[2] = v86;
  v79[16] = v79[16] & 0xFFBFFFFF | ((v86 != 0) << 22);
  llvm::GlobalObject::setComdat(v80, (llvm::Comdat *)inserted);
  v94 = *(uint64_t **)a1;
  *(_QWORD *)v400 = llvm::ValueAsMetadata::get(v58, v95);
  v96 = (llvm::MDNode *)llvm::MDTuple::getImpl(v94, v400, 1, 0, 1);
  llvm::Value::setMetadata(v80, 22, v96);
  v97 = *(uint64_t ***)(a1 + 8);
  *(_QWORD *)v400 = v79 + 8;
  sub_1C5F50CB4(v97, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)v400, 1);
  v98 = byte_1ED8189A8 != 0;
  v99 = (int)v367;
  if (!word_1ED818930)
    v98 = (int)v367;
  if (v98 && !*(_BYTE *)(a1 + 216))
  {
    v100 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v400 = "llvm.asan.globals";
    WORD4(v401) = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v100, (uint64_t)v400);
    if (NamedMetadata)
    {
      v102 = NamedMetadata;
      v103 = *(_DWORD *)(*(_QWORD *)(NamedMetadata + 48) + 8);
      if (v103)
      {
        v104 = (4 * v103 / 3u + 1) | ((unint64_t)(4 * v103 / 3u + 1) >> 1);
        v105 = v104 | (v104 >> 2) | ((v104 | (v104 >> 2)) >> 4);
        v106 = ((v105 | (v105 >> 8)) >> 16) | v105 | (v105 >> 8);
        LODWORD(v381) = v106 + 1;
        v107 = operator new(8 * (v106 + 1), (std::align_val_t)8uLL);
        v379 = v107;
        v380 = 0;
        v108 = 8 * v106 + 8;
        do
        {
          *v107++ = -4096;
          v108 -= 8;
        }
        while (v108);
        v109 = *(unsigned int *)(*(_QWORD *)(v102 + 48) + 8);
        if ((_DWORD)v109)
        {
          v110 = 0;
          v111 = 8 * v109;
          do
          {
            v112 = *(_QWORD *)(**(_QWORD **)(v102 + 48) + v110);
            v113 = *(_QWORD *)(v112 - 8 * *(unsigned int *)(v112 + 8));
            if (!v113)
              goto LABEL_91;
            v114 = *(llvm::Value **)(v113 + 128);
            if (!v114)
              goto LABEL_91;
            v115 = llvm::Value::stripPointerCasts(v114);
            v116 = *((_BYTE *)v115 + 16) == 3 ? v115 : 0;
            v418 = v116;
            if (!v116)
              goto LABEL_91;
            v117 = *(_QWORD *)(*(_QWORD *)(v112 - 8 * *(unsigned int *)(v112 + 8) + 32) + 128);
            v118 = (llvm::APInt *)(v117 + 24);
            v119 = *(_DWORD *)(v117 + 32);
            if (v119 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v118) == v119 - 1)
LABEL_94:
                sub_1C61B7564((uint64_t)v400, (uint64_t)&v379, (uint64_t *)&v418);
            }
            else if (*(_QWORD *)v118 == 1)
            {
              goto LABEL_94;
            }
LABEL_91:
            v110 += 8;
          }
          while (v111 != v110);
        }
      }
      else
      {
        v379 = 0;
        v380 = 0;
        LODWORD(v381) = 0;
      }
    }
    else
    {
      v379 = 0;
      v380 = 0;
      v381 = 0;
    }
    v133 = *(_QWORD *)(a1 + 8);
    v134 = v133 + 8;
    v135 = *(_QWORD *)(v133 + 16);
    if (v135 != v133 + 8)
    {
      v136 = 0;
      v137 = 0;
      v138 = 0;
      while (1)
      {
        if (v135)
          v139 = (uint64_t ***)(v135 - 56);
        else
          v139 = 0;
        if ((_DWORD)v381)
        {
          v140 = ((v139 >> 4) ^ (v139 >> 9)) & (v381 - 1);
          v141 = (uint64_t ***)v379[v140];
          if (v139 == v141)
            goto LABEL_139;
          v142 = 1;
          while (v141 != (uint64_t ***)-4096)
          {
            v143 = v140 + v142++;
            v140 = v143 & (v381 - 1);
            v141 = (uint64_t ***)v379[v140];
            if (v139 == v141)
              goto LABEL_139;
          }
        }
        v144 = *((_DWORD *)v139 + 8);
        if ((v144 & 0xF) == 1)
          goto LABEL_139;
        if (v135 && *((_BYTE *)v139 + 16) == 3)
        {
          if ((*((_DWORD *)v139 + 5) & 0x7FFFFFF) == 0)
            goto LABEL_139;
        }
        else if (!*((_BYTE *)v139 + 16) && (v144 & 0x800000) == 0 && v139[9] == (uint64_t **)(v139 + 9))
        {
          goto LABEL_139;
        }
        if ((*((_BYTE *)v139 + 23) & 0x10) == 0)
          goto LABEL_162;
        v145 = ***v139;
        v146 = *(_QWORD *)(v145 + 152);
        v147 = *(unsigned int *)(v145 + 168);
        if (!(_DWORD)v147)
          goto LABEL_156;
        LODWORD(v148) = (v147 - 1) & ((v139 >> 4) ^ (v139 >> 9));
        v149 = (uint64_t ****)(v146 + 16 * v148);
        v150 = *v149;
        if (*v149 != v139)
          break;
LABEL_157:
        v153 = v149[1];
        if ((unint64_t)*v153 < 5
          || ((v154 = *((_DWORD *)v153 + 4), v155 = *((unsigned __int8 *)v153 + 20), v154 == 1836477548)
            ? (v156 = v155 == 46)
            : (v156 = 0),
              !v156))
        {
LABEL_162:
          if ((v144 & 0x401C00) == 0 && (v144 & 0xF) != 0xA)
          {
            if (v137 >= v136)
            {
              v157 = (v137 - v138) >> 3;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 61)
LABEL_376:
                abort();
              if ((v136 - v138) >> 2 > v158)
                v158 = (v136 - v138) >> 2;
              if ((unint64_t)(v136 - v138) >= 0x7FFFFFFFFFFFFFF8)
                v159 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v159 = v158;
              if (v159)
              {
                if (v159 >> 61)
LABEL_377:
                  sub_1C4764EE4();
                v160 = v137;
                v161 = (char *)operator new(8 * v159);
                v137 = v160;
              }
              else
              {
                v161 = 0;
              }
              v162 = &v161[8 * v157];
              *(_QWORD *)v162 = v139;
              v163 = v162 + 8;
              if (v137 != v138)
              {
                do
                {
                  v164 = *((_QWORD *)v137 - 1);
                  v137 -= 8;
                  *((_QWORD *)v162 - 1) = v164;
                  v162 -= 8;
                }
                while (v137 != v138);
                v137 = v138;
              }
              v138 = v162;
              v136 = &v161[8 * v159];
              if (v137)
                operator delete(v137);
              v137 = v163;
            }
            else
            {
              *(_QWORD *)v137 = v139;
              v137 += 8;
            }
          }
        }
LABEL_139:
        v135 = *(_QWORD *)(v135 + 8);
        if (v135 == v134)
        {
          v133 = *(_QWORD *)(a1 + 8);
          v165 = v137;
          goto LABEL_183;
        }
      }
      v151 = 1;
      while (v150 != (uint64_t ***)-4096)
      {
        v152 = v148 + v151++;
        v148 = v152 & (v147 - 1);
        v150 = *(uint64_t ****)(v146 + 16 * v148);
        if (v150 == v139)
        {
          v149 = (uint64_t ****)(v146 + 16 * v148);
          goto LABEL_157;
        }
      }
LABEL_156:
      v149 = (uint64_t ****)(v146 + 16 * v147);
      goto LABEL_157;
    }
    v138 = 0;
    v165 = 0;
LABEL_183:
    *(_OWORD *)v400 = xmmword_1C85F4BB0;
    *(_QWORD *)&v400[16] = 0;
    v168 = *(int **)(v133 + 192);
    v166 = v133 + 192;
    v167 = v168;
    v169 = *(_BYTE *)(v166 + 23);
    if (v169 >= 0)
      v170 = (int *)v166;
    else
      v170 = v167;
    v171 = *(_QWORD *)(v166 + 8);
    if (v169 >= 0)
      v172 = v169 & 0x7F;
    else
      v172 = v171;
    llvm::MD5::update((int *)v400, v170, v172);
    llvm::MD5::final((int *)v400, v416);
    __p[0] = v138;
    if (v138 != v165)
    {
      v173 = v165;
      v174 = v416[0];
      v175 = (void **)__p[0];
      *(_QWORD *)&v363[1] = v173;
      while (1)
      {
        v176 = (uint64_t ***)*v175;
        if ((v174 & *(_BYTE *)(a1 + 224)) <= 1u)
          v177 = 1;
        else
          v177 = (v174 & *(_BYTE *)(a1 + 224));
        v366 = v177;
        v178 = (uint64_t *)*(v176 - 4);
        v179 = *(_QWORD *)(a1 + 8) + 272;
        v180 = *v178;
        sub_1C4768AD0(v179, *v178);
        v182 = v181;
        v184 = v183 == 1;
        llvm::DataLayout::getAlignment(v179, v180);
        v187 = v186;
        if (v184)
        v188 = ((1 << v187) + ((unint64_t)(v182 + 7) >> 3) - 1) & -(1 << v187);
        v189 = (v188 + (1 << *(_DWORD *)(a1 + 136)) - 1) & -(1 << *(_DWORD *)(a1 + 136));
        v190 = (llvm::Type *)(v189 - v188);
        v365 = v175;
        if (v189 != v188)
        {
          if ((uint64_t)(v189 - v188) < 0)
            goto LABEL_376;
          v191 = operator new(v189 - v188);
          bzero(v191, (size_t)v190);
          *((_BYTE *)v190 + (_QWORD)v191 - 1) = v366;
          llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)a1 + 1912), v190);
          v193 = llvm::ConstantDataSequential::getImpl(v191, v190, v192);
          v418 = (llvm::UndefValue *)v178;
          v419 = (char *)v193;
          v194 = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements(*(uint64_t **)*v178, (uint64_t)&v418, 2u, 0);
          v178 = (uint64_t *)llvm::ConstantStruct::get(v194, (llvm::Type *)&v418, 2);
          operator delete(v191);
        }
        v195 = operator new(0x78uLL);
        v196 = (llvm::GlobalObject *)(v195 + 8);
        v195[13] = v195[13] & 0x38000000 | 1;
        *(_QWORD *)v195 = 0;
        *((_QWORD *)v195 + 1) = 0;
        *((_QWORD *)v195 + 2) = 0;
        *((_QWORD *)v195 + 3) = v195 + 8;
        v371 = (uint64_t **)v195;
        v197 = *(_QWORD *)(a1 + 8);
        v198 = (llvm::PointerType *)*v178;
        v199 = *((_BYTE *)v176 + 80);
        v200 = v176 >> 4;
        if ((*((_BYTE *)v176 + 23) & 0x10) != 0)
          break;
        v210 = 0;
        v211 = (llvm::UndefValue *)&byte_1C871356D;
LABEL_208:
        LOWORD(v422) = 773;
        v418 = v211;
        v419 = v210;
        v420 = ".hwasan";
        v213 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v195 + 8), v197, v198, v199 & 1, 0, (uint64_t)v178, (uint64_t)&v418, 0, 0, 0, 0);
        llvm::GlobalObject::copyAttributesFrom(v213, (const llvm::GlobalObject *)v176);
        v214 = v371;
        *((_BYTE *)v371 + 112) = (_BYTE)v371[14] & 0xFD | (_BYTE)v176[10] & 2;
        v371[13] = (uint64_t *)v176[9];
        *((_DWORD *)v371 + 16) = (_DWORD)v371[8] & 0xFFFFBFC0 | 0x4008;
        llvm::GlobalObject::copyMetadata(v196, (const llvm::GlobalObject *)v176, 0);
        v215 = *((_WORD *)v176 + 17);
        v216 = (v215 & 0x3F) == 0;
        v217 = (v215 & 0x3F) - 1;
        if (v216)
          v217 = 0;
        v218 = 1 << v217;
        if (v216)
          v218 = 0;
        if (v218 <= 1 << *(_DWORD *)(a1 + 136))
          v218 = 1 << *(_DWORD *)(a1 + 136);
        *((_DWORD *)v214 + 16) = ((__clz(__rbit64(v218)) << 16) + 0x10000) | (_DWORD)v214[8] & 0xFFC0FF3F;
        v219 = *(llvm::UndefValue **)(a1 + 192);
        v220 = *(uint64_t **)v219;
        v418 = v219;
        v419 = (char *)v219;
        v370 = (llvm::PointerType *)llvm::StructType::get(v220, (uint64_t)&v418, 2, 0);
        if (v188)
        {
          v235 = 0;
          v369 = v366 << 24;
          LODWORD(v368) = v200 ^ (v176 >> 9);
          while (1)
          {
            v236 = operator new(0x78uLL);
            v237 = v236;
            v238 = (llvm::GlobalObject *)(v236 + 8);
            v236[13] = v236[13] & 0x38000000 | 1;
            *(_QWORD *)v236 = 0;
            *((_QWORD *)v236 + 1) = 0;
            *((_QWORD *)v236 + 2) = 0;
            *((_QWORD *)v236 + 3) = v236 + 8;
            if ((*((_BYTE *)v176 + 23) & 0x10) != 0)
              break;
            v248 = 0;
            v249 = (llvm::UndefValue *)&byte_1C871356D;
LABEL_229:
            v251 = *(_QWORD *)(a1 + 8);
            LOWORD(v422) = 773;
            v418 = v249;
            v419 = v248;
            v420 = ".hwasan.descriptor";
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v236 + 8), v251, v370, 1, 8, 0, (uint64_t)&v418, 0, 0, 0, 0);
            v252 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v196, *(llvm::Constant **)(a1 + 200), 0);
            v253 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v238, *(llvm::Constant **)(a1 + 200), 0);
            v254 = llvm::ConstantExpr::getSub(v252, v253, 0, 0);
            v255 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 200), v235, 0);
            Add = llvm::ConstantExpr::getAdd(v254, (llvm::Constant *)v255, 0, 0);
            v257 = sub_1C537D3B8((llvm *)0x26, (uint64_t)Add, *(llvm::Constant **)(a1 + 192), 0);
            v258 = v188 - v235;
            if (v188 - v235 >= 0xFFFFF0)
              v258 = 16777200;
            v259 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 192), v258 | v369, 0);
            llvm::GlobalObject::setComdat(v238, (llvm::Comdat *)v371[10]);
            v418 = v257;
            v419 = (char *)v259;
            v260 = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements(**(uint64_t ***)v257, (uint64_t)&v418, 2u, 0);
            v261 = llvm::ConstantStruct::get(v260, (llvm::Type *)&v418, 2);
            llvm::GlobalVariable::setInitializer((uint64_t)v238, v261);
            v263 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***((_QWORD ***)v237 + 4) + 2136, "hwasan_globals", 0xEuLL);
            v264 = v262;
            v265 = ***((_QWORD ***)v237 + 4);
            v418 = v238;
            v266 = *(_DWORD *)(v265 + 2520);
            if (!v266)
            {
              v279 = 0;
LABEL_247:
              v270 = (llvm::GlobalObject **)sub_1C53D65B8(v265 + 2504, (uint64_t)&v418, (uint64_t *)&v418, v279);
              v280 = v418;
              v270[1] = 0;
              v270[2] = 0;
              *v270 = v280;
              goto LABEL_233;
            }
            v267 = *(_QWORD *)(v265 + 2504);
            v268 = v266 - 1;
            v269 = v268 & ((v238 >> 4) ^ (v238 >> 9));
            v270 = (llvm::GlobalObject **)(v267 + 24 * v269);
            v271 = *v270;
            if (*v270 != v238)
            {
              v275 = 0;
              v276 = 1;
              while (v271 != (llvm::GlobalObject *)-4096)
              {
                if (v275)
                  v277 = 0;
                else
                  v277 = v271 == (llvm::GlobalObject *)-8192;
                if (v277)
                  v275 = v270;
                v278 = v269 + v276++;
                v269 = v278 & v268;
                v270 = (llvm::GlobalObject **)(v267 + 24 * v269);
                v271 = *v270;
                if (*v270 == v238)
                  goto LABEL_233;
              }
              if (v275)
                v279 = v275;
              else
                v279 = v270;
              goto LABEL_247;
            }
LABEL_233:
            v270[1] = v263;
            v270[2] = v264;
            v237[16] = v237[16] & 0xFFBFFFFF | ((v264 != 0) << 22);
            v272 = *(uint64_t **)a1;
            v418 = (llvm::UndefValue *)llvm::ValueAsMetadata::get(v196, v262);
            v273 = (llvm::MDNode *)llvm::MDTuple::getImpl(v272, &v418, 1, 0, 1);
            llvm::Value::setMetadata(v238, 22, v273);
            v274 = *(uint64_t ***)(a1 + 8);
            v418 = v238;
            sub_1C5F50CB4(v274, "llvm.compiler.used", 0x12uLL, &v418, 1);
            v235 += 16777200;
            if (v235 >= v188)
              goto LABEL_215;
          }
          v239 = ***v176;
          v240 = *(_QWORD *)(v239 + 152);
          v241 = *(unsigned int *)(v239 + 168);
          if ((_DWORD)v241)
          {
            LODWORD(v242) = (v241 - 1) & v368;
            v243 = (uint64_t ****)(v240 + 16 * v242);
            v244 = *v243;
            if (*v243 != v176)
            {
              v245 = 1;
              while (v244 != (uint64_t ***)-4096)
              {
                v246 = v242 + v245++;
                v242 = v246 & (v241 - 1);
                v244 = *(uint64_t ****)(v240 + 16 * v242);
                if (v244 == v176)
                {
                  v243 = (uint64_t ****)(v240 + 16 * v242);
                  goto LABEL_228;
                }
              }
              goto LABEL_227;
            }
          }
          else
          {
LABEL_227:
            v243 = (uint64_t ****)(v240 + 16 * v241);
          }
LABEL_228:
          v247 = (char **)v243[1];
          v250 = *v247;
          v249 = (llvm::UndefValue *)(v247 + 2);
          v248 = v250;
          goto LABEL_229;
        }
LABEL_215:
        v221 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v196, *(llvm::Constant **)(a1 + 200), 0);
        v222 = v366;
        v223 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 200), v366 << *(_DWORD *)(a1 + 220), 0);
        v224 = llvm::ConstantExpr::getAdd(v221, (llvm::Constant *)v223, 0, 0);
        v225 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v224, (llvm::Constant *)*v176, 0);
        v226 = (llvm::PointerType *)v176[3];
        v227 = (llvm::Type *)(*((_DWORD *)*v176 + 2) >> 8);
        v228 = (_DWORD)v176[4] & 0xF;
        LOWORD(v422) = 257;
        v229 = (llvm::Value *)llvm::GlobalAlias::create(v226, v227, v228, (uint64_t)&v418, (uint64_t)v225, *(_QWORD *)(a1 + 8));
        v230 = v229;
        v231 = (_DWORD)v176[4] & 0x30;
        v232 = *((_DWORD *)v229 + 8);
        v233 = v232 & 0xFFFFFFCF | v231;
        *((_DWORD *)v229 + 8) = v233;
        if ((v232 & 0xFu) - 7 < 2)
        {
          v234 = v365;
        }
        else
        {
          v234 = v365;
          if (!v231 || (llvm::GlobalValue::hasExternalWeakLinkage(v229) & 1) != 0)
            goto LABEL_217;
          v233 = *((_DWORD *)v230 + 8);
        }
        *((_DWORD *)v230 + 8) = v233 | 0x4000;
LABEL_217:
        v174 = v222 + 1;
        llvm::Value::takeName(v230, (llvm::Value *)v176);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v176, v230, (llvm::Value *)1);
        llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v176);
        v175 = v234 + 1;
        if (v175 == *(void ***)&v363[1])
          goto LABEL_255;
      }
      v201 = ***v176;
      v202 = *(_QWORD *)(v201 + 152);
      v203 = *(unsigned int *)(v201 + 168);
      if ((_DWORD)v203)
      {
        LODWORD(v204) = (v203 - 1) & (v200 ^ (v176 >> 9));
        v205 = (uint64_t ****)(v202 + 16 * v204);
        v206 = *v205;
        if (*v205 == v176)
        {
LABEL_207:
          v209 = (char **)v205[1];
          v212 = *v209;
          v211 = (llvm::UndefValue *)(v209 + 2);
          v210 = v212;
          goto LABEL_208;
        }
        v207 = 1;
        while (v206 != (uint64_t ***)-4096)
        {
          v208 = v204 + v207++;
          v204 = v208 & (v203 - 1);
          v206 = *(uint64_t ****)(v202 + 16 * v204);
          if (v206 == v176)
          {
            v205 = (uint64_t ****)(v202 + 16 * v204);
            goto LABEL_207;
          }
        }
      }
      v205 = (uint64_t ****)(v202 + 16 * v203);
      goto LABEL_207;
    }
LABEL_255:
    MEMORY[0x1CAA32FB4](v379, 8);
    v99 = (int)v367;
    if (__p[0])
      operator delete(__p[0]);
  }
  v281 = byte_1EF8F52D8 != 0;
  if (!word_1EF8F5260)
    v281 = v99;
  if (v281)
  {
    v379 = 0;
    v380 = 0;
    LODWORD(v381) = 0;
    v383 = 0;
    v384 = 0;
    v382 = 0;
    v282 = *(_QWORD *)(a1 + 8);
    v283 = v282 + 24;
    v284 = *(_QWORD *)(v282 + 32);
    if (v284 == v282 + 24)
      goto LABEL_314;
    while (1)
    {
      v285 = v284 ? v284 - 56 : 0;
      if (v284 && *(_BYTE *)(v285 + 16) == 3)
      {
        if ((*(_DWORD *)(v285 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_275;
      }
      else if (!*(_BYTE *)(v285 + 16) && *(_QWORD *)(v285 + 72) == v285 + 72 && (*(_BYTE *)(v285 + 34) & 0x80) == 0)
      {
        goto LABEL_275;
      }
      v286 = *(_QWORD *)(v285 + 112);
      if (!v286 || (*(_BYTE *)(v286 + 18) & 8) == 0)
        goto LABEL_275;
      if ((*(_WORD *)(v285 + 18) & 8) != 0)
        break;
      if ((*(_BYTE *)(v286 + 16) & 0x20) == 0)
      {
        *(_QWORD *)v400 = 0;
        v289 = (uint64_t **)sub_1C62B1458((uint64_t)&v379, (unint64_t *)v400);
        v290 = v289;
        v292 = v289[1];
        v291 = (unint64_t)v289[2];
        if ((unint64_t)v292 >= v291)
        {
          v293 = *v289;
          v294 = v292 - *v289;
          v295 = v294 + 1;
          if ((unint64_t)(v294 + 1) >> 61)
            goto LABEL_376;
          v296 = v291 - (_QWORD)v293;
          if (v296 >> 2 > v295)
            v295 = v296 >> 2;
          if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8)
            v297 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v297 = v295;
          if (v297)
          {
            if (v297 >> 61)
              goto LABEL_377;
            v298 = (char *)operator new(8 * v297);
          }
          else
          {
            v298 = 0;
          }
          v306 = (uint64_t *)&v298[8 * v294];
          *v306 = v285;
          v301 = v306 + 1;
          if (v292 != v293)
          {
            do
            {
              v308 = *--v292;
              *--v306 = v308;
            }
            while (v292 != v293);
            goto LABEL_308;
          }
          goto LABEL_309;
        }
LABEL_291:
        *v292 = v285;
        v301 = v292 + 1;
        goto LABEL_311;
      }
LABEL_275:
      v284 = *(_QWORD *)(v284 + 8);
      if (v284 == v283)
      {
        if (v382 == v383)
          goto LABEL_314;
        v309 = (uint64_t **)sub_1C62B1508(*(_QWORD *)(a1 + 8), *(uint64_t ***)(a1 + 192), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 176));
        v370 = v310;
        v371 = v309;
        sub_1C6210688(*(_QWORD *)(a1 + 8), "_Unwind_GetGR", 0xDuLL, 0, *(uint64_t ***)(a1 + 160));
        v369 = (uint64_t)v311;
        sub_1C6210688(*(_QWORD *)(a1 + 8), "_Unwind_GetCFA", 0xEuLL, 0, *(uint64_t ***)(a1 + 160));
        v312 = v382;
        v367 = v383;
        v368 = v313;
        if (v382 == v383)
        {
LABEL_314:
          sub_1C621E630((uint64_t)&v379);
          goto LABEL_56;
        }
        v365 = &v415;
        v366 = (uint64_t)&v414;
        *(_OWORD *)__p = xmmword_1C64638E0;
        qmemcpy(v363, "ersonality_thunk__hwasan_persona", sizeof(v363));
        while (2)
        {
          v314 = (char *)operator new(0x20uLL);
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v314;
          *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
          *(_OWORD *)v314 = v363[1];
          *(_OWORD *)(v314 + 10) = v363[0];
          v314[26] = 0;
          v315 = *v312;
          if (*v312)
          {
            if ((v315[23] & 0x10) != 0)
            {
              v316 = ***(_QWORD ***)v315;
              v317 = *(_QWORD *)(v316 + 152);
              v318 = *(unsigned int *)(v316 + 168);
              if (!(_DWORD)v318)
                goto LABEL_324;
              LODWORD(v319) = (v318 - 1) & ((v315 >> 4) ^ (v315 >> 9));
              v320 = (unsigned __int8 **)(v317 + 16 * v319);
              v321 = *v320;
              if (*v320 != v315)
              {
                v322 = 1;
                while (v321 != (unsigned __int8 *)-4096)
                {
                  v323 = v319 + v322++;
                  v319 = v323 & (v318 - 1);
                  v321 = *(unsigned __int8 **)(v317 + 16 * v319);
                  if (v321 == v315)
                  {
                    v320 = (unsigned __int8 **)(v317 + 16 * v319);
                    goto LABEL_325;
                  }
                }
LABEL_324:
                v320 = (unsigned __int8 **)(v317 + 16 * v318);
              }
LABEL_325:
              v324 = v320[1];
              v327 = *(_QWORD *)v324;
              v326 = (char *)(v324 + 16);
              v325 = v327;
            }
            else
            {
              v325 = 0;
              v326 = &byte_1C871356D;
            }
            WORD4(v401) = 1283;
            *(_QWORD *)v400 = ".";
            *(_QWORD *)&v400[16] = v326;
            *(_QWORD *)&v401 = v325;
            llvm::Twine::str((llvm::Twine *)v400, &v418);
            if (SHIBYTE(v420) >= 0)
              v328 = (const std::string::value_type *)&v418;
            else
              v328 = (const std::string::value_type *)v418;
            if (SHIBYTE(v420) >= 0)
              v329 = HIBYTE(v420) & 0x7F;
            else
              v329 = (std::string::size_type)v419;
            std::string::append(&v378, v328, v329);
            if (SHIBYTE(v420) < 0)
              operator delete(v418);
          }
          v330 = *(_OWORD *)(a1 + 192);
          *(_QWORD *)v400 = *(_QWORD *)(a1 + 192);
          *(_OWORD *)&v400[8] = v330;
          *(_QWORD *)&v401 = *(_QWORD *)(a1 + 176);
          *((_QWORD *)&v401 + 1) = v401;
          v331 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v330, (uint64_t *)v400, 5, 0);
          v332 = *v312;
          if (*v312 && (v332[16] > 3u || (*((_DWORD *)v332 + 8) & 0xFu) - 7 <= 1))
          {
            v333 = 7;
            v334 = 1;
          }
          else
          {
            v334 = 0;
            v333 = 3;
          }
          WORD4(v401) = 260;
          *(_QWORD *)v400 = &v378;
          v335 = *(_QWORD *)(a1 + 8);
          v336 = (char *)operator new(0x80uLL);
          v337 = (llvm::Function *)(v336 + 8);
          *((_DWORD *)v336 + 7) = *((_DWORD *)v336 + 7) & 0x38000000 | 0x40000000;
          *(_QWORD *)v336 = 0;
          llvm::Function::Function((uint64_t *)v336 + 1, v331, v333, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)v400, v335);
          if ((v334 & 1) != 0)
          {
LABEL_340:
            v338 = *(_QWORD **)a1;
            *(_QWORD *)v400 = "entry";
            WORD4(v401) = 259;
            v339 = (uint64_t **)operator new();
            *v339 = (uint64_t *)(*v338 + 1600);
            v339[1] = 0;
            v340 = *((_DWORD *)v339 + 5) & 0xC0000000;
            *((_DWORD *)v339 + 4) = 22;
            *((_DWORD *)v339 + 5) = v340;
            v339[3] = 0;
            v339[4] = 0;
            v339[5] = (uint64_t *)(v339 + 5);
            v339[6] = (uint64_t *)(v339 + 5);
            v339[7] = 0;
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v336 + 80), v339);
            v341 = (uint64_t *)*((_QWORD *)v336 + 10);
            v339[4] = (uint64_t *)(v336 + 80);
            v339[3] = v341;
            v341[1] = (uint64_t)(v339 + 3);
            *((_QWORD *)v336 + 10) = v339 + 3;
            llvm::Value::setName((uint64_t ***)v339, (uint64_t)v400);
            v343 = **v339;
            *(_QWORD *)v400 = &v400[16];
            *(_QWORD *)&v400[8] = 0x200000000;
            v405 = v343;
            v406 = v366;
            v407 = v365;
            v408 = 0;
            v409 = 0;
            v410 = 512;
            v411 = 7;
            v412 = 0;
            v413 = 0;
            v414 = &unk_1E8167888;
            v415 = &unk_1E8167A08;
            v403 = v339;
            v404 = v339 + 5;
            if ((*((_WORD *)v336 + 13) & 1) == 0)
            {
              v344 = (llvm::UndefValue *)*((_QWORD *)v336 + 12);
              v418 = v344;
              goto LABEL_343;
            }
            llvm::Function::BuildLazyArguments(v337);
            v345 = *((_WORD *)v336 + 13);
            v344 = (llvm::UndefValue *)*((_QWORD *)v336 + 12);
            v418 = v344;
            if ((v345 & 1) == 0)
            {
LABEL_343:
              v419 = (char *)v344 + 40;
              goto LABEL_344;
            }
            llvm::Function::BuildLazyArguments(v337);
            v344 = (llvm::UndefValue *)*((_QWORD *)v336 + 12);
            v355 = *((_WORD *)v336 + 13);
            v419 = (char *)v344 + 40;
            if ((v355 & 1) != 0)
            {
              llvm::Function::BuildLazyArguments(v337);
              v344 = (llvm::UndefValue *)*((_QWORD *)v336 + 12);
              v356 = *((_WORD *)v336 + 13);
              v420 = (char *)v344 + 80;
              if ((v356 & 1) != 0)
              {
                llvm::Function::BuildLazyArguments(v337);
                v344 = (llvm::UndefValue *)*((_QWORD *)v336 + 12);
                v357 = *((_WORD *)v336 + 13);
                v421 = (char *)v344 + 120;
                if ((v357 & 1) != 0)
                {
                  llvm::Function::BuildLazyArguments(v337);
                  v344 = (llvm::UndefValue *)*((_QWORD *)v336 + 12);
                }
LABEL_346:
                v422 = (char *)v344 + 160;
                v346 = *v312;
                v347 = *(_QWORD *)(a1 + 176);
                if (*v312)
                {
                  v417 = 257;
                  v348 = sub_1C4773E38((uint64_t *)v400, 49, v346, v347, (uint64_t)v416);
                }
                else
                {
                  v348 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 176), v342);
                }
                v423 = v348;
                v349 = *(_QWORD *)(a1 + 176);
                v377 = 257;
                v424 = sub_1C4773E38((uint64_t *)v400, 49, (unsigned __int8 *)v369, v349, (uint64_t)v376);
                v350 = *(_QWORD *)(a1 + 176);
                v375 = 257;
                v425 = sub_1C4773E38((uint64_t *)v400, 49, v368, v350, (uint64_t)v374);
                v373 = 257;
                v351 = (llvm::Value *)sub_1C4774778((uint64_t *)v400, v371, (uint64_t)v370, (uint64_t *)&v418, 8, (uint64_t)v372, 0);
                *((_WORD *)v351 + 9) = *((_WORD *)v351 + 9) & 0xFFFC | 1;
                sub_1C538D7E4((uint64_t *)v400, v351);
                v352 = v312[1];
                v353 = v312[2];
                while (v352 != v353)
                {
                  v354 = *(_QWORD *)v352;
                  v352 += 8;
                  sub_1C53D1F60((_QWORD *)v354, (uint64_t)v337);
                  *(_WORD *)(v354 + 18) |= 8u;
                }
                if (*(_BYTE **)v400 != &v400[16])
                  free(*(void **)v400);
                if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v378.__r_.__value_.__l.__data_);
                v312 += 4;
                if (v312 == v367)
                  goto LABEL_314;
                continue;
              }
            }
            else
            {
LABEL_344:
              v420 = (char *)v344 + 80;
            }
            v421 = (char *)v344 + 120;
            goto LABEL_346;
          }
          break;
        }
        v358 = *((_DWORD *)v336 + 10);
        v359 = v358 & 0xFFFFFFCF | 0x10;
        *((_DWORD *)v336 + 10) = v359;
        if ((v358 & 0xFu) - 7 < 2)
        {
LABEL_365:
          *((_DWORD *)v336 + 10) = v359 | 0x4000;
        }
        else if ((llvm::GlobalValue::hasExternalWeakLinkage(v337) & 1) == 0)
        {
          v359 = *((_DWORD *)v336 + 10);
          goto LABEL_365;
        }
        if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v360 = &v378;
        else
          v360 = (std::string *)v378.__r_.__value_.__r.__words[0];
        if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v378.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v378.__r_.__value_.__l.__size_;
        v362 = llvm::Module::getOrInsertComdat(*(_QWORD *)(a1 + 8), (unsigned __int8 *)v360, size);
        llvm::GlobalObject::setComdat(v337, (llvm::Comdat *)v362);
        goto LABEL_340;
      }
    }
    v287 = *(_DWORD *)(v285 + 20);
    if ((v287 & 0x40000000) != 0)
      v288 = *(llvm::Value ***)(v285 - 8);
    else
      v288 = (llvm::Value **)(v285 - 32 * (v287 & 0x7FFFFFF));
    *(_QWORD *)v400 = llvm::Value::stripPointerCasts(*v288);
    v299 = (uint64_t **)sub_1C62B1458((uint64_t)&v379, (unint64_t *)v400);
    v290 = v299;
    v292 = v299[1];
    v300 = (unint64_t)v299[2];
    if ((unint64_t)v292 < v300)
      goto LABEL_291;
    v302 = *v299;
    v303 = v292 - *v299;
    v304 = v303 + 1;
    if ((unint64_t)(v303 + 1) >> 61)
      goto LABEL_376;
    v305 = v300 - (_QWORD)v302;
    if (v305 >> 2 > v304)
      v304 = v305 >> 2;
    if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFF8)
      v297 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v297 = v304;
    if (v297)
    {
      if (v297 >> 61)
        goto LABEL_377;
      v298 = (char *)operator new(8 * v297);
    }
    else
    {
      v298 = 0;
    }
    v306 = (uint64_t *)&v298[8 * v303];
    *v306 = v285;
    v301 = v306 + 1;
    if (v292 != v302)
    {
      do
      {
        v307 = *--v292;
        *--v306 = v307;
      }
      while (v292 != v302);
LABEL_308:
      v292 = *v290;
    }
LABEL_309:
    *v290 = v306;
    v290[1] = v301;
    v290[2] = (uint64_t *)&v298[8 * v297];
    if (v292)
      operator delete(v292);
LABEL_311:
    v290[1] = v301;
    goto LABEL_275;
  }
LABEL_56:
  if (*(_DWORD *)(a1 + 64) != 11)
  {
    v32 = *(_QWORD *)(a1 + 8);
    v33 = *(llvm::PointerType **)(a1 + 168);
    *(_QWORD *)v400 = a1;
    *(_QWORD *)(a1 + 488) = llvm::Module::getOrInsertGlobal(v32, "__hwasan_tls", 0xCuLL, v33, (uint64_t (*)(uint64_t))sub_1C58E3838, (uint64_t)v400);
  }
  if (v385[0] != v386)
    free(v385[0]);
  return a1;
}

BOOL sub_1C58DF4B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD *v11;
  void (**v12)(_QWORD *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t **v32;
  llvm::PointerType *v33;
  llvm::PointerType *inserted;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  unint64_t v39;
  const std::string::value_type *p_p;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  unsigned __int8 *v48;
  unint64_t v49;
  uint64_t **v50;
  llvm::PointerType *v51;
  llvm::PointerType *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::PointerType *v57;
  const llvm::Instruction *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  std::string::size_type *v63;
  unsigned int i;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int HasAttr;
  BOOL v70;
  uint64_t v71;
  int v72;
  _DWORD *v73;
  int v74;
  llvm::Value *v75;
  llvm::Value *v76;
  uint64_t v77;
  const llvm::Instruction *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t size;
  void *v83;
  std::string *p_dst;
  unsigned __int8 *v85;
  unint64_t v86;
  uint64_t **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  void *v92;
  std::string *v93;
  unsigned __int8 *v94;
  unint64_t v95;
  uint64_t **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  void *v101;
  std::string *v102;
  unsigned __int8 *v103;
  unint64_t v104;
  uint64_t **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t v115;
  int v116;
  size_t v117;
  char *v118;
  llvm::memtag **v119;
  llvm::memtag **v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t ****v124;
  uint64_t ***v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t ****v130;
  uint64_t ***v131;
  int v132;
  int v133;
  uint64_t ***v134;
  uint64_t **v135;
  uint64_t **v136;
  uint64_t **v137;
  int v138;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BOOL4 v146;
  uint64_t v147;
  llvm::UndefValue *v148;
  uint64_t v149;
  char v150;
  char v151;
  char *v152;
  char *v153;
  llvm::Value *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  llvm::Value **v158;
  uint64_t *v159;
  llvm::PointerType *v160;
  uint64_t v161;
  uint64_t Declaration;
  uint64_t **v163;
  llvm::GetElementPtrInst *v164;
  _QWORD *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  unsigned __int8 *v168;
  char v169;
  char v170;
  char *v171;
  char *v172;
  llvm::ConstantInt **v173;
  uint64_t *v174;
  _QWORD *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  llvm::Value **v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  llvm::Type *v185;
  uint64_t v186;
  uint64_t **v187;
  unsigned __int8 *v188;
  uint64_t v189;
  unsigned __int8 *v190;
  llvm::Value **v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 *v194;
  uint64_t *v195;
  char v196;
  char v197;
  char *v198;
  char *v199;
  unsigned __int8 **v200;
  llvm::Value *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int8 ***v206;
  uint64_t v207;
  llvm::Value **v208;
  llvm::ConstantInt **v209;
  llvm::Value **v210;
  _QWORD *v211;
  llvm::Value **v212;
  unsigned __int8 *v213;
  llvm::Value **v214;
  llvm::Value *v215;
  char *v216;
  char *v217;
  llvm::Value **v218;
  uint64_t v219;
  llvm::Value *v220;
  _QWORD *v221;
  llvm::Value *v222;
  uint64_t *v223;
  char v224;
  char v225;
  char *v226;
  char *v227;
  unsigned __int8 **v228;
  llvm::Value *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned __int8 ***v234;
  uint64_t v235;
  llvm::Value **v236;
  _QWORD *v237;
  llvm::Value **v238;
  unsigned __int8 *v239;
  char *v240;
  char *v241;
  llvm::Value ***v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  llvm::Value *v246;
  llvm::Value ****v247;
  llvm::Value *v248;
  uint64_t v249;
  llvm::memtag **v250;
  uint64_t ***v251;
  uint64_t v252;
  uint64_t v253;
  llvm::Type *v254;
  uint64_t v255;
  uint64_t **v256;
  char *v257;
  char *v258;
  unsigned __int8 **v259;
  int v260;
  unsigned __int8 *v261;
  unsigned __int8 *v262;
  unsigned __int8 *v263;
  char *v264;
  char *v265;
  unsigned __int8 **v266;
  int v267;
  unsigned __int8 *v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  uint64_t v272;
  unsigned __int8 *v273;
  llvm::Value **v274;
  uint64_t v275;
  llvm::Value **v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  llvm::Instruction *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  llvm::Instruction *v291;
  int8x8_t *v292;
  int8x8_t *v293;
  unsigned __int8 *v294;
  int8x8_t v295;
  uint8x8_t v296;
  BOOL v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t **v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t **v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t **v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  uint64_t v317;
  unsigned __int8 *v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t *v322;
  uint64_t v323;
  int v324;
  int v325;
  int v326;
  uint64_t *v327;
  uint64_t v328;
  unsigned __int8 *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t **v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned __int8 *v344;
  uint64_t v345;
  llvm::Value **v346;
  unsigned __int8 *v347;
  uint64_t v348;
  unsigned __int8 *v349;
  uint64_t v350;
  char v351;
  char v352;
  char *v353;
  char *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  llvm::Value *v359;
  llvm::Value **v360;
  uint64_t v361;
  llvm::MDNode *BranchWeights;
  char *v363;
  uint64_t v364;
  char *v365;
  unsigned __int8 *v366;
  llvm::Value **v367;
  llvm::Value *v368;
  _BOOL4 v369;
  llvm::MDNode *v370;
  uint64_t v371;
  unsigned __int8 *v372;
  _QWORD *v373;
  llvm::Value **v374;
  unsigned __int8 *v375;
  uint64_t v376;
  unsigned __int8 *v377;
  llvm::Value **v378;
  llvm::Value *v379;
  char *v380;
  char *v381;
  llvm::Value ***v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  llvm::Value *v386;
  llvm::Value ****v387;
  llvm::Value *v388;
  llvm::Value *v389;
  llvm::MDNode *v390;
  uint64_t v391;
  unsigned __int8 *v392;
  llvm::Value **v393;
  unsigned __int8 *v394;
  uint64_t v395;
  unsigned __int8 *v396;
  uint64_t v397;
  char v398;
  char v399;
  char *v400;
  char *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  llvm::Value *v405;
  llvm::Value *v406;
  llvm::MDNode *v407;
  uint64_t v408;
  unsigned __int8 *v409;
  int v410;
  uint64_t **v411;
  llvm::PointerType *v412;
  uint64_t v413;
  unint64_t v414;
  std::string *v415;
  std::string::size_type v416;
  __int128 *v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  void *v421;
  uint64_t **v422;
  llvm::PointerType *v423;
  uint64_t v424;
  unint64_t v425;
  std::string *v426;
  std::string::size_type v427;
  std::string *v428;
  std::string::size_type v429;
  __int128 *v430;
  uint64_t v431;
  uint64_t **v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t **v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  char *v440;
  unsigned __int8 **v441;
  int v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  char *v446;
  char *v447;
  unsigned __int8 **v448;
  int v449;
  unsigned __int8 *v450;
  unsigned __int8 *v451;
  unsigned __int8 **v452;
  unsigned __int8 *v453;
  char *v454;
  char *v455;
  unsigned __int8 **v456;
  int v457;
  unsigned __int8 *v458;
  unsigned __int8 *v459;
  unsigned __int8 *v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  BOOL v464;
  uint64_t v465;
  unsigned int v466;
  unsigned __int8 *v467;
  llvm::ConstantInt *v468;
  llvm::Value **v469;
  llvm::ConstantInt **v470;
  uint64_t v471;
  unsigned __int8 *v472;
  uint64_t **v473;
  uint64_t v474;
  llvm::Value **v475;
  uint64_t v476;
  unsigned __int8 *v477;
  llvm::Value **v478;
  _QWORD *v479;
  llvm::Value **v480;
  uint64_t v481;
  unsigned __int8 *v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  llvm::memtag *v489;
  int v490;
  int v491;
  unint64_t v492;
  std::string *v493;
  unint64_t *v494;
  size_t v495;
  const void *v496;
  unint64_t v497;
  __int128 *v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  size_t v502;
  std::string *v503;
  __int128 *v504;
  const llvm::AllocaInst *v505;
  unint64_t AllocaSizeInBytes;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t *v511;
  unsigned int v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned __int8 *v516;
  uint64_t v517;
  unint64_t v518;
  llvm::memtag *v519;
  llvm::MDNode *appended;
  uint64_t v521;
  uint64_t v522;
  llvm::Instruction *v523;
  uint64_t v524;
  BOOL v525;
  uint64_t v526;
  unsigned __int8 *v527;
  llvm::DominatorTree *v528;
  llvm::PostDominatorTree *v529;
  uint64_t v530;
  llvm::memtag *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  _QWORD *v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  llvm::memtag *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  llvm::memtag *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t *v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  BOOL v555;
  uint64_t v556;
  std::string::size_type v557;
  std::string::size_type v558;
  uint64_t **v559;
  uint64_t v560;
  unsigned __int8 *v561;
  uint64_t v562;
  unsigned __int8 *v563;
  uint64_t v564;
  unsigned __int8 *v565;
  unsigned __int8 *v566;
  uint64_t v567;
  unsigned __int8 *v568;
  uint64_t v569;
  unsigned __int8 *v570;
  uint64_t v571;
  uint64_t v572;
  _QWORD *v573;
  char *v574;
  char *v575;
  unsigned __int8 **v576;
  int v577;
  unsigned __int8 *v578;
  unsigned __int8 *v579;
  unsigned __int8 *v580;
  char *v581;
  char *v582;
  unsigned __int8 **v583;
  int v584;
  unsigned __int8 *v585;
  unsigned __int8 *v586;
  unsigned __int8 *v587;
  char *v588;
  char *v589;
  unsigned __int8 **v590;
  int v591;
  unsigned __int8 *v592;
  unsigned __int8 *v593;
  unsigned __int8 *v594;
  char *v595;
  char *v596;
  unsigned __int8 **v597;
  int v598;
  unsigned __int8 *v599;
  unsigned __int8 *v600;
  unsigned __int8 *v601;
  char *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  llvm::ConstantInt **v608;
  uint64_t v609;
  char v610;
  BOOL v612;
  uint64_t ***v614;
  uint64_t ***v615;
  llvm::memtag **v616;
  unsigned __int8 *v617;
  char *v618;
  llvm::Instruction ***v619;
  uint64_t *v620;
  unint64_t v621;
  unsigned __int8 *v622;
  llvm::AllocaInst **v623;
  int v624;
  unsigned __int8 *v625;
  const llvm::Instruction ***v626;
  char v627;
  uint64_t v628;
  unsigned __int8 *v629;
  unsigned int v630;
  llvm::memtag **v631;
  std::string::size_type v632;
  unsigned __int8 *v633;
  uint64_t v634;
  llvm::memtag *v635;
  void *v636;
  std::string::size_type v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD v644[3];
  _QWORD *v645;
  _BYTE v646[24];
  llvm::memtag **v647;
  llvm::memtag **v648;
  uint64_t *v649;
  unsigned int v650;
  uint64_t *v651;
  unsigned int v652;
  char v653;
  _BYTE v654[24];
  _BYTE *v655;
  void *v656;
  uint64_t v657;
  _BYTE v658[64];
  void *v659;
  uint64_t v660;
  _BYTE v661[128];
  void *v662;
  uint64_t v663;
  _BYTE v664[768];
  std::string __dst;
  llvm::memtag **v666;
  uint64_t *v667;
  llvm::ConstantInt *v668;
  std::string v669;
  __int16 v670;
  std::string v671;
  __int16 v672;
  void *__p;
  uint64_t *v674;
  unsigned __int8 *v675;
  void *v676;
  uint64_t v677;
  _BYTE v678[16];
  __int16 v679;
  uint64_t v680;
  char *v681;
  uint64_t v682;
  void **v683;
  void **v684;
  uint64_t v685;
  int v686;
  __int16 v687;
  char v688;
  uint64_t v689;
  uint64_t v690;
  void *v691;
  void *v692;
  __int128 v693;
  _QWORD v694[2];
  __int16 v695;
  uint64_t v696;

  v696 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 232) == a2)
    return 0;
  v6 = a2;
  v7 = *(_QWORD *)(a2 + 112);
  if (!v7 || (*(_BYTE *)(v7 + 18) & 8) == 0)
    return 0;
  v662 = v664;
  v663 = 0x1000000000;
  v659 = v661;
  v660 = 0x1000000000;
  v656 = v658;
  v657 = 0x800000000;
  v644[0] = &off_1E817E558;
  v644[1] = a1;
  v645 = v644;
  sub_1C62B15D8((uint64_t)v646, (uint64_t)v644);
  v11 = v645;
  if (v645 == v644)
  {
    v12 = (void (**)(_QWORD *))(v644[0] + 32);
    v11 = v644;
LABEL_10:
    (*v12)(v11);
    goto LABEL_11;
  }
  if (v645)
  {
    v12 = (void (**)(_QWORD *))(*v645 + 40);
    goto LABEL_10;
  }
LABEL_11:
  v632 = a1;
  v13 = v6 + 72;
  v14 = *(_QWORD *)(v6 + 80);
  v609 = v6;
  if (v14 == v6 + 72)
    goto LABEL_16;
  while (1)
  {
    v15 = v14 - 24;
    if (!v14)
      v15 = 0;
    v16 = *(_QWORD *)(v15 + 48);
    if (v16 != v15 + 40)
      break;
    v14 = *(_QWORD *)(v14 + 8);
    if (v14 == v13)
      goto LABEL_16;
  }
  while (1)
  {
    v58 = (const llvm::Instruction *)(v16 - 24);
    if (v16)
      v59 = v16 - 24;
    else
      v59 = 0;
    if (*(_BYTE *)(a1 + 214))
      llvm::memtag::StackInfoBuilder::visit((llvm::memtag::StackInfoBuilder *)v646, (llvm::Instruction *)v59);
    if (*(_BYTE *)(a1 + 212) && *(_BYTE *)(v59 + 16) == 94)
    {
      v60 = v657;
      if (v657 >= (unint64_t)HIDWORD(v657))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v656, (uint64_t)v658, v657 + 1, 8);
        v60 = v657;
      }
      *((_QWORD *)v656 + v60) = v59;
      LODWORD(v657) = v657 + 1;
    }
    v676 = (void *)v59;
    if (*(_QWORD *)(v59 + 48) || (*(_BYTE *)(v59 + 23) & 0x20) != 0)
    {
      if (llvm::Instruction::getMetadataImpl((uint64_t ***)v59, "nosanitize", 0xAuLL))
        goto LABEL_139;
      v58 = (const llvm::Instruction *)v676;
    }
    if (*(const llvm::Instruction **)(a1 + 472) != v58)
    {
      v61 = *((unsigned __int8 *)v58 + 16);
      if (v58 && v61 == 60)
      {
        if (byte_1ED818228 && !sub_1C58E3A44(a1, v58, *((llvm::Value **)v58 - 4)))
        {
          LODWORD(v636) = 0;
          LOBYTE(v693) = 0;
          __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)v58;
          v62 = (unint64_t)*((unsigned __int16 *)v58 + 9) >> 1;
LABEL_108:
          v671.__r_.__value_.__s.__data_[0] = __clz(1 << v62) ^ 0x3F;
          sub_1C62A9B54((uint64_t)&v662, (uint64_t *)&v676, (unsigned int *)&v636, (char *)&v693, (uint64_t *)&__dst, (unsigned __int8 *)&v671);
        }
      }
      else if (v58 && v61 == 61)
      {
        if (byte_1ED8182E8 && !sub_1C58E3A44(a1, v58, *((llvm::Value **)v58 - 4)))
        {
          LODWORD(v636) = 1;
          LOBYTE(v693) = 1;
          __dst.__r_.__value_.__r.__words[0] = **((_QWORD **)v58 - 8);
          v62 = (unint64_t)*((unsigned __int16 *)v58 + 9) >> 1;
          goto LABEL_108;
        }
      }
      else if (v58 && v61 == 65)
      {
        if (byte_1ED8183A8 && !sub_1C58E3A44(a1, v58, *((llvm::Value **)v58 - 8)))
        {
          LODWORD(v636) = 0;
          LOBYTE(v693) = 1;
          v63 = (std::string::size_type *)*((_QWORD *)v58 - 4);
LABEL_119:
          __dst.__r_.__value_.__r.__words[0] = *v63;
          sub_1C62A9BD0((uint64_t)&v662, (uint64_t *)&v676, (unsigned int *)&v636, (char *)&v693, (uint64_t *)&__dst);
        }
      }
      else
      {
        if (!v58 || v61 != 64)
        {
          if (v58 && v61 == 84)
          {
            for (i = 0; ; ++i)
            {
              LODWORD(v636) = i;
              if (v61 == 84)
                v65 = 0;
              else
                v65 = v61 == 39 ? (*((_DWORD *)v58 + 20) + 1) : 2;
              v66 = *((_DWORD *)v58 + 5);
              if (v66 < 0 && (v71 = v66 & 0x7FFFFFF, (*((_QWORD *)v58 - 4 * v71 - 1) & 0xFFFFFFFF0) != 0))
              {
                v68 = -v71;
                v67 = *((_DWORD *)v58 - 8 * v71 - 3)
                    - *(_DWORD *)((char *)v58 - *((_QWORD *)v58 - 4 * v71 - 1) + -32 * v71);
              }
              else
              {
                v67 = 0;
                v68 = -(uint64_t)(v66 & 0x7FFFFFF);
              }
              if (i >= ((-32 - 32 * v65 + 32 * (unint64_t)-v67 - 32 * v68) >> 5))
                break;
              if (byte_1ED818468)
              {
                HasAttr = llvm::CallBase::paramHasAttr((uint64_t)v58, i, 69);
                i = v636;
                if (HasAttr)
                {
                  v70 = sub_1C58E3A44(a1, (const llvm::Instruction *)v676, *((llvm::Value **)v58 + 4 * v636 + -4 * (*((_DWORD *)v58 + 5) & 0x7FFFFFF)));
                  i = v636;
                  if (!v70)
                  {
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    __dst.__r_.__value_.__r.__words[0] = sub_1C6199478((uint64_t)v58, (int)v636);
                    LOBYTE(v693) = 0;
                    v671.__r_.__value_.__s.__data_[0] = 0;
                    sub_1C62A9B54((uint64_t)&v662, (uint64_t *)&v676, (unsigned int *)&v636, (char *)&v693, (uint64_t *)&__dst, (unsigned __int8 *)&v671);
                    i = v636;
                  }
                }
              }
              LOBYTE(v61) = *((_BYTE *)v58 + 16);
            }
            v6 = v609;
          }
          goto LABEL_139;
        }
        if (byte_1ED8183A8 && !sub_1C58E3A44(a1, v58, *((llvm::Value **)v58 - 12)))
        {
          LODWORD(v636) = 0;
          LOBYTE(v693) = 1;
          v63 = (std::string::size_type *)*((_QWORD *)v58 - 8);
          goto LABEL_119;
        }
      }
    }
LABEL_139:
    v72 = sub_1C4DE85D0(v59);
    if (v72)
      v73 = (_DWORD *)v59;
    else
      v73 = 0;
    if (!v16 || !v72)
      goto LABEL_157;
    v74 = *(_DWORD *)(*((_QWORD *)v73 - 4) + 36);
    if ((v74 - 196) < 2)
      goto LABEL_817;
    if (v74 == 199)
    {
      if (!byte_1ED8182E8)
        goto LABEL_157;
      v76 = llvm::Value::stripPointerCasts(*(llvm::Value **)&v73[-8 * (v73[5] & 0x7FFFFFF)]);
      v77 = a1;
      v78 = (const llvm::Instruction *)v73;
LABEL_153:
      if (sub_1C58E3A44(v77, v78, v76))
        goto LABEL_157;
      goto LABEL_154;
    }
    if (v74 == 194)
    {
LABEL_817:
      if (!byte_1ED8182E8
        || (v75 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF))),
            sub_1C58E3A44(a1, (const llvm::Instruction *)v59, v75)))
      {
        if (!byte_1ED818228)
          goto LABEL_157;
        v76 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 32));
        v77 = a1;
        v78 = (const llvm::Instruction *)v59;
        goto LABEL_153;
      }
    }
LABEL_154:
    v79 = v660;
    if (v660 >= (unint64_t)HIDWORD(v660))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v659, (uint64_t)v661, v660 + 1, 8);
      v79 = v660;
    }
    *((_QWORD *)v659 + v79) = v73;
    LODWORD(v660) = v660 + 1;
LABEL_157:
    v16 = *(_QWORD *)(v16 + 8);
    v80 = v14 - 24;
    if (!v14)
      v80 = 0;
    if (v16 == v80 + 40)
      break;
LABEL_164:
    if (v14 == v13)
      goto LABEL_16;
  }
  while (1)
  {
    v14 = *(_QWORD *)(v14 + 8);
    if (v14 == v13)
      break;
    v81 = v14 - 24;
    if (!v14)
      v81 = 0;
    v16 = *(_QWORD *)(v81 + 48);
    if (v16 != v81 + 40)
      goto LABEL_164;
  }
LABEL_16:
  v17 = 0;
  v628 = *(_QWORD *)(v6 + 40);
  v18 = a1;
  v19 = *(_QWORD *)a1;
  v676 = v678;
  v677 = 0x200000000;
  v682 = v19;
  v683 = &v691;
  v684 = &v692;
  v685 = 0;
  v686 = 0;
  v687 = 512;
  v688 = 7;
  v681 = 0;
  v680 = 0;
  v691 = &unk_1E8167888;
  v692 = &unk_1E8167A08;
  v20 = 1;
  v690 = 0;
  v689 = 0;
  do
  {
    v627 = v20;
    if ((v20 & 1) != 0)
      v21 = "load";
    else
      v21 = "store";
    if ((v20 & 1) != 0)
      v22 = 4;
    else
      v22 = 5;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
    memcpy(&__dst, v21, v22);
    *(_BYTE *)((unint64_t)&__dst | v22) = 0;
    v23 = *(unsigned __int8 *)(v18 + 209);
    HIBYTE(v638) = 8 * v23;
    if (v23)
      v636 = (void *)0x74726F62616F6E5FLL;
    *((_BYTE *)&v636 + 8 * v23) = 0;
    sub_1C4842EB8((const void **)byte_1EF8F56A8, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&v669);
    v24 = std::string::append(&v669, "N");
    v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v671.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v671.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v638 >= 0)
      v26 = (const std::string::value_type *)&v636;
    else
      v26 = (const std::string::value_type *)v636;
    if (v638 >= 0)
      v27 = HIBYTE(v638) & 0x7F;
    else
      v27 = v637;
    v28 = std::string::append(&v671, v26, v27);
    v29 = v28->__r_.__value_.__r.__words[2];
    v693 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v694[0] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (v694[0] >= 0)
      v30 = (unsigned __int8 *)&v693;
    else
      v30 = (unsigned __int8 *)v693;
    if (v694[0] >= 0)
      v31 = HIBYTE(v694[0]) & 0x7F;
    else
      v31 = *((_QWORD *)&v693 + 1);
    v32 = (uint64_t **)(*(_QWORD *)v682 + 1576);
    __p = *(void **)(v18 + 168);
    v674 = (uint64_t *)__p;
    v33 = (llvm::PointerType *)llvm::FunctionType::get(v32, (uint64_t *)&__p, 2, 0);
    inserted = llvm::Module::getOrInsertFunction(v628, v30, v31, v33, 0);
    v35 = v18 + 16 * v17;
    *(_QWORD *)(v35 + 400) = inserted;
    *(_QWORD *)(v35 + 408) = v36;
    if (SHIBYTE(v694[0]) < 0)
      operator delete((void *)v693);
    if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v671.__r_.__value_.__l.__data_);
    if (SHIBYTE(v669.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v669.__r_.__value_.__l.__data_);
    for (j = 0; j != 5; ++j)
    {
      sub_1C4842EB8((const void **)byte_1EF8F56A8, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&v669);
      v38 = 0;
      v39 = 1 << j;
      do
      {
        *((_BYTE *)v694 + v38-- + 4) = (v39 % 0xA) | 0x30;
        v297 = v39 > 9;
        v39 /= 0xAuLL;
      }
      while (v297);
      sub_1C4E61270(&__p, (char *)v694 + v38 + 5, (char *)v694 + 5, -v38);
      if (SHIBYTE(v675) >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (SHIBYTE(v675) >= 0)
        v41 = HIBYTE(v675) & 0x7F;
      else
        v41 = (std::string::size_type)v674;
      v42 = std::string::append(&v669, p_p, v41);
      v43 = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v671.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v671.__r_.__value_.__r.__words[2] = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if (v638 >= 0)
        v44 = (const std::string::value_type *)&v636;
      else
        v44 = (const std::string::value_type *)v636;
      if (v638 >= 0)
        v45 = HIBYTE(v638) & 0x7F;
      else
        v45 = v637;
      v46 = std::string::append(&v671, v44, v45);
      v47 = v46->__r_.__value_.__r.__words[2];
      v693 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v694[0] = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      if (v694[0] >= 0)
        v48 = (unsigned __int8 *)&v693;
      else
        v48 = (unsigned __int8 *)v693;
      if (v694[0] >= 0)
        v49 = HIBYTE(v694[0]) & 0x7F;
      else
        v49 = *((_QWORD *)&v693 + 1);
      v50 = (uint64_t **)(*(_QWORD *)v682 + 1576);
      v668 = *(llvm::ConstantInt **)(a1 + 168);
      v51 = (llvm::PointerType *)llvm::FunctionType::get(v50, (uint64_t *)&v668, 1, 0);
      v52 = llvm::Module::getOrInsertFunction(v628, v48, v49, v51, 0);
      v53 = a1 + 80 * v17 + 16 * j;
      *(_QWORD *)(v53 + 240) = v52;
      *(_QWORD *)(v53 + 248) = v54;
      if (SHIBYTE(v694[0]) < 0)
        operator delete((void *)v693);
      if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v671.__r_.__value_.__l.__data_);
      if (SHIBYTE(v675) < 0)
        operator delete(__p);
      if (SHIBYTE(v669.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v669.__r_.__value_.__l.__data_);
    }
    v18 = a1;
    if (SHIBYTE(v638) < 0)
      operator delete(v636);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v20 = 0;
    v17 = 1;
  }
  while ((v627 & 1) != 0);
  *(_QWORD *)(a1 + 432) = sub_1C5867298(v628, "__hwasan_tag_memory", 0x13uLL, 0, (uint64_t **)(*(_QWORD *)v682 + 1576), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 168));
  *(_QWORD *)(a1 + 440) = v55;
  *(_QWORD *)(a1 + 448) = sub_1C6210688(v628, "__hwasan_generate_tag", 0x15uLL, 0, *(uint64_t ***)(a1 + 184));
  *(_QWORD *)(a1 + 456) = v56;
  llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v682 + 1912), 0);
  *(_QWORD *)(a1 + 464) = llvm::Module::getOrInsertGlobal(v628, "__hwasan_shadow", 0xFuLL, v57);
  if (!*(_BYTE *)(a1 + 208) || byte_1ED8180A8)
  {
    if (byte_1EF8F56A8[23] < 0)
      sub_1C47EBC30(&__dst, *(void **)byte_1EF8F56A8, *(unint64_t *)&byte_1EF8F56A8[8]);
    else
      __dst = *(std::string *)byte_1EF8F56A8;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __dst.__r_.__value_.__l.__size_;
  sub_1C484371C((uint64_t)&v636, size + 7);
  if (v638 >= 0)
    v83 = &v636;
  else
    v83 = v636;
  if (size)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v83, p_dst, size);
  }
  strcpy((char *)v83 + size, "memmove");
  if (v638 >= 0)
    v85 = (unsigned __int8 *)&v636;
  else
    v85 = (unsigned __int8 *)v636;
  if (v638 >= 0)
    v86 = HIBYTE(v638) & 0x7F;
  else
    v86 = v637;
  v87 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  v88 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  v89 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  *(_QWORD *)(v632 + 72) = sub_1C62A98B0(v628, v85, v86, 0, v87, v88, v89, *(_QWORD *)(v632 + 168));
  *(_QWORD *)(v632 + 80) = v90;
  if (SHIBYTE(v638) < 0)
    operator delete(v636);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v91 = __dst.__r_.__value_.__l.__size_;
  sub_1C484371C((uint64_t)&v636, v91 + 6);
  if (v638 >= 0)
    v92 = &v636;
  else
    v92 = v636;
  if (v91)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = &__dst;
    else
      v93 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v92, v93, v91);
  }
  strcpy((char *)v92 + v91, "memcpy");
  if (v638 >= 0)
    v94 = (unsigned __int8 *)&v636;
  else
    v94 = (unsigned __int8 *)v636;
  if (v638 >= 0)
    v95 = HIBYTE(v638) & 0x7F;
  else
    v95 = v637;
  v96 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  v97 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  v98 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  *(_QWORD *)(v632 + 88) = sub_1C62A98B0(v628, v94, v95, 0, v96, v97, v98, *(_QWORD *)(v632 + 168));
  *(_QWORD *)(v632 + 96) = v99;
  if (SHIBYTE(v638) < 0)
    operator delete(v636);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v100 = __dst.__r_.__value_.__l.__size_;
  sub_1C484371C((uint64_t)&v636, v100 + 6);
  if (v638 >= 0)
    v101 = &v636;
  else
    v101 = v636;
  if (v100)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v102 = &__dst;
    else
      v102 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v101, v102, v100);
  }
  strcpy((char *)v101 + v100, "memset");
  if (v638 >= 0)
    v103 = (unsigned __int8 *)&v636;
  else
    v103 = (unsigned __int8 *)v636;
  if (v638 >= 0)
    v104 = HIBYTE(v638) & 0x7F;
  else
    v104 = v637;
  v105 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  v106 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
  *(_QWORD *)(v632 + 104) = sub_1C62A98B0(v628, v103, v104, 0, v105, v106, *(_QWORD *)v682 + 1960, *(_QWORD *)(v632 + 168));
  *(_QWORD *)(v632 + 112) = v107;
  if (SHIBYTE(v638) < 0)
    operator delete(v636);
  *(_QWORD *)(v632 + 120) = sub_1C6212CB8(v628, "__hwasan_handle_vfork", 0x15uLL, 0, (uint64_t **)(*(_QWORD *)v682 + 1576), *(_QWORD *)(v632 + 168));
  *(_QWORD *)(v632 + 128) = v108;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v676 != v678)
    free(v676);
  v8 = (_DWORD)v657 != 0;
  if ((_DWORD)v657)
  {
    v109 = (char *)v656;
    v110 = 8 * v657;
    do
    {
      v111 = *(_QWORD *)(*(_QWORD *)v109 + 32);
      if (v111)
        v112 = v111 == *(_QWORD *)(*(_QWORD *)v109 + 40) + 40;
      else
        v112 = 1;
      if (v112)
        v113 = 0;
      else
        v113 = v111 - 24;
      sub_1C4773D54((uint64_t)&v676, v113, 0, 0, 0);
      v114 = *(uint64_t ***)(v632 + 120);
      v115 = *(_QWORD *)(v632 + 128);
      v116 = *(_DWORD *)(v632 + 48);
      if (v116 == 42)
        v117 = 3;
      else
        v117 = 2;
      if (v116 == 42)
        v118 = "rsp";
      else
        v118 = "sp";
      v636 = (void *)sub_1C58E3AF8(v632, (uint64_t *)&v676, (unsigned __int8 *)v118, v117);
      LOWORD(v667) = 257;
      sub_1C4774778((uint64_t *)&v676, v114, v115, (uint64_t *)&v636, 1, (uint64_t)&__dst, 0);
      if (v676 != v678)
        free(v676);
      v109 += 8;
      v110 -= 8;
    }
    while (v110);
  }
  v119 = v647;
  v120 = v648;
  if (v647 == v648)
  {
    v121 = v609;
    v122 = v632;
    if ((*(_WORD *)(v609 + 18) & 8) == 0)
      goto LABEL_272;
    v123 = *(_DWORD *)(v609 + 20);
    v124 = (v123 & 0x40000000) != 0 ? *(uint64_t *****)(v609 - 8) : (uint64_t ****)(v609 - 32 * (v123 & 0x7FFFFFF));
    v125 = *v124;
    if ((*((_BYTE *)v125 + 23) & 0x10) == 0)
      goto LABEL_272;
    v126 = ***v125;
    v127 = *(_QWORD *)(v126 + 152);
    v128 = *(unsigned int *)(v126 + 168);
    if (!(_DWORD)v128)
      goto LABEL_258;
    LODWORD(v129) = (v128 - 1) & ((v125 >> 4) ^ (v125 >> 9));
    v130 = (uint64_t ****)(v127 + 16 * v129);
    v131 = *v130;
    if (*v130 != v125)
    {
      v132 = 1;
      while (v131 != (uint64_t ***)-4096)
      {
        v133 = v129 + v132++;
        v129 = v133 & (v128 - 1);
        v131 = *(uint64_t ****)(v127 + 16 * v129);
        if (v131 == v125)
        {
          v130 = (uint64_t ****)(v127 + 16 * v129);
          goto LABEL_259;
        }
      }
LABEL_258:
      v130 = (uint64_t ****)(v127 + 16 * v128);
    }
LABEL_259:
    v134 = v130[1];
    if (*v134 == (uint64_t **)26)
    {
      v135 = v134[2];
      v136 = v134[3];
      v137 = v134[4];
      v138 = *((unsigned __int16 *)v134 + 20);
      v141 = v135 == (uint64_t **)0x6E61736177685F5FLL
          && v136 == (uint64_t **)0x616E6F737265705FLL
          && v137 == (uint64_t **)0x7568745F7974696CLL
          && v138 == 27502;
      v120 = v647;
      if (v141)
      {
        sub_1C53D1F60((_QWORD *)v609, 0);
        *(_WORD *)(v609 + 18) &= ~8u;
        v8 = 1;
        v119 = v647;
        v120 = v648;
      }
    }
    else
    {
LABEL_272:
      v120 = v647;
    }
  }
  else
  {
    v122 = v632;
    v121 = v609;
  }
  if (v119 != v120 || (_DWORD)v663 || (_DWORD)v660)
  {
    v142 = *(_QWORD *)(v121 + 80);
    if (v142)
      v143 = v142 - 24;
    else
      v143 = 0;
    v144 = *(_QWORD *)(v143 + 48);
    if (v144)
      v145 = v144 - 24;
    else
      v145 = 0;
    sub_1C4773D54((uint64_t)&v636, v145, 0, 0, 0);
    v146 = byte_1ED818D68 && *(_BYTE *)(v122 + 154) && v647 != v648;
    if (*(_BYTE *)(v122 + 153))
    {
      if (v146)
        goto LABEL_305;
      if (*(_DWORD *)(v122 + 64) == 11)
      {
        v154 = (llvm::Value *)sub_1C58E3C88(*(uint64_t ***)(v122 + 176), (uint64_t *)&v636, *(uint64_t **)(v122 + 464));
        *(_QWORD *)(v122 + 472) = v154;
      }
      else
      {
        v154 = *(llvm::Value **)(v122 + 472);
      }
    }
    else
    {
      v147 = *(_QWORD *)(v122 + 144);
      if (v147 == -1)
      {
        if (!*(_BYTE *)(v122 + 152))
        {
          v148 = llvm::Module::getOrInsertGlobal(*(_QWORD *)(*(_QWORD *)(v639 + 56) + 40), "__hwasan_shadow_memory_dynamic_address", 0x26uLL, *(llvm::PointerType **)(v122 + 176));
          v149 = *(_QWORD *)(v122 + 176);
          LOWORD(v667) = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v639 + 56) + 40) + 272, v149);
          v151 = v150;
          v152 = (char *)operator new(0x60uLL);
          v153 = v152;
          v154 = (llvm::Value *)(v152 + 32);
          *((_QWORD *)v152 + 2) = 0;
          *((_QWORD *)v152 + 3) = v152 + 32;
          v679 = 257;
          *((_QWORD *)v152 + 4) = v149;
          *((_QWORD *)v152 + 5) = 0;
          *((_WORD *)v152 + 24) = 60;
          *((_DWORD *)v152 + 13) = 1;
          *(_OWORD *)(v152 + 56) = 0u;
          *(_OWORD *)(v152 + 72) = 0u;
          *((_DWORD *)v152 + 22) = 0;
          *(_QWORD *)v152 = v148;
          *((_QWORD *)v152 + 1) = 0;
          if (v148)
          {
            v157 = *((_QWORD *)v148 + 1);
            v156 = (_QWORD *)((char *)v148 + 8);
            v155 = v157;
            *((_QWORD *)v152 + 1) = v157;
            if (v157)
              *(_QWORD *)(v155 + 16) = v152 + 8;
            *((_QWORD *)v152 + 2) = v156;
            *v156 = v152;
          }
          *((_WORD *)v152 + 25) = 2 * (v151 & 0x3F);
          v152[92] = 1;
          llvm::Value::setName((uint64_t ***)v152 + 4, (uint64_t)&v676);
          (*(void (**)(uint64_t, llvm::Value *, std::string *, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v154, &__dst, v639, v640);
          if (!(_DWORD)v637)
          {
LABEL_294:
            v121 = v609;
            goto LABEL_301;
          }
          v581 = (char *)v636;
          v582 = (char *)v636 + 16 * v637;
          v583 = (unsigned __int8 **)(v153 + 80);
          v122 = v632;
          while (2)
          {
            v584 = *(_DWORD *)v581;
            v585 = (unsigned __int8 *)*((_QWORD *)v581 + 1);
            if (v585)
            {
              if (v584)
                goto LABEL_767;
              *(_QWORD *)&v693 = *((_QWORD *)v581 + 1);
              llvm::MetadataTracking::track((uint64_t)&v693, v585, 2);
              v586 = *v583;
LABEL_771:
              if (v586)
                llvm::MetadataTracking::untrack((uint64_t)(v153 + 80), v586);
              v587 = (unsigned __int8 *)v693;
              *v583 = (unsigned __int8 *)v693;
              if (v587)
                llvm::MetadataTracking::retrack((uint64_t)&v693, v587, (uint64_t)(v153 + 80));
            }
            else
            {
              v586 = *v583;
              if (*v583 || (v153[55] & 0x20) != 0)
              {
                if (!v584)
                {
                  *(_QWORD *)&v693 = 0;
                  goto LABEL_771;
                }
LABEL_767:
                llvm::Value::setMetadata(v154, *(_DWORD *)v581, (llvm::MDNode *)v585);
              }
            }
            v581 += 16;
            if (v581 == v582)
              goto LABEL_294;
            continue;
          }
        }
        v159 = *(uint64_t **)(v122 + 464);
      }
      else
      {
        v158 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 168), v147, 0);
        v159 = (uint64_t *)sub_1C537D3B8((llvm *)0x30, (uint64_t)v158, *(llvm::Constant **)(v122 + 176), 0);
      }
      v154 = (llvm::Value *)sub_1C58E3C88(*(uint64_t ***)(v122 + 176), (uint64_t *)&v636, v159);
LABEL_301:
      *(_QWORD *)(v122 + 472) = v154;
      if (v146)
      {
LABEL_305:
        v160 = *(llvm::PointerType **)(v122 + 168);
        v161 = v639;
        if ((*(_DWORD *)(v122 + 48) - 3) <= 2 && *(_DWORD *)(v122 + 64) == 11)
        {
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(v639 + 56) + 40), 294, 0, 0);
          v163 = 0;
          v164 = (llvm::GetElementPtrInst *)(*(_QWORD *)v641 + 1912);
          if (Declaration)
            v163 = *(uint64_t ***)(Declaration + 24);
          v679 = 257;
          v165 = (_QWORD *)sub_1C4774778((uint64_t *)&v636, v163, Declaration, 0, 0, (uint64_t)&v676, 0);
          LOWORD(v667) = 257;
          v166 = (unsigned __int8 *)sub_1C48678B0((uint64_t *)&v636, v164, v165, 0x30u, (uint64_t)&__dst);
          v167 = llvm::PointerType::get(v160, 0);
          v695 = 257;
          v168 = sub_1C5098D9C((uint64_t *)&v636, v166, v167, (uint64_t)&v693);
          v160 = *(llvm::PointerType **)(v122 + 168);
          v161 = v639;
        }
        else
        {
          v168 = *(unsigned __int8 **)(v122 + 488);
        }
        LOWORD(v667) = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v161 + 56) + 40) + 272, (uint64_t)v160);
        v170 = v169;
        v171 = (char *)operator new(0x60uLL);
        v172 = v171;
        v173 = (llvm::ConstantInt **)(v171 + 32);
        *((_QWORD *)v171 + 2) = 0;
        *((_QWORD *)v171 + 3) = v171 + 32;
        v679 = 257;
        *((_QWORD *)v171 + 4) = v160;
        *((_QWORD *)v171 + 5) = 0;
        v174 = (uint64_t *)(v171 + 40);
        *((_WORD *)v171 + 24) = 60;
        *((_DWORD *)v171 + 13) = 1;
        *(_OWORD *)(v171 + 56) = 0u;
        *(_OWORD *)(v171 + 72) = 0u;
        *((_DWORD *)v171 + 22) = 0;
        *(_QWORD *)v171 = v168;
        *((_QWORD *)v171 + 1) = 0;
        if (v168)
        {
          v175 = v168 + 8;
          v176 = *((_QWORD *)v168 + 1);
          *((_QWORD *)v171 + 1) = v176;
          if (v176)
            *(_QWORD *)(v176 + 16) = v171 + 8;
          *((_QWORD *)v171 + 2) = v175;
          *v175 = v171;
        }
        *((_WORD *)v171 + 25) = 2 * (v170 & 0x3F);
        v171[92] = 1;
        llvm::Value::setName((uint64_t ***)v171 + 4, (uint64_t)&v676);
        (*(void (**)(uint64_t, llvm::ConstantInt **, std::string *, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v173, &__dst, v639, v640);
        if (!(_DWORD)v637)
        {
LABEL_316:
          v177 = (unsigned __int8 *)v173;
          if ((*(_DWORD *)(v122 + 48) - 3) >= 3)
            v177 = (unsigned __int8 *)sub_1C58E3BF8(*(_BYTE *)(v122 + 208), (llvm::Type *)*(unsigned int *)(v122 + 220), (uint64_t)&v636, v173);
          if (v146)
          {
            v178 = *(_QWORD *)(v639 + 56);
            v679 = 257;
            v179 = llvm::ConstantInt::get(*v173, 3, 0);
            *(_QWORD *)(v122 + 480) = sub_1C534E5D8((uint64_t)&v636, (uint64_t)v173, (uint64_t)v179, (uint64_t)&v676, 0);
            if (*(_DWORD *)(v122 + 48) == 3)
            {
              v180 = sub_1C58E3AF8(v122, (uint64_t *)&v636, "pc", 2uLL);
            }
            else
            {
              v181 = *(_QWORD *)(v122 + 168);
              v679 = 257;
              v180 = (uint64_t)sub_1C4773E38((uint64_t *)&v636, 47, (unsigned __int8 *)v178, v181, (uint64_t)&v676);
            }
            v182 = (_QWORD *)v180;
            v183 = *(_QWORD *)(v178 + 40);
            v676 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v641 + 1912), (llvm::Type *)*(unsigned int *)(v183 + 276));
            v184 = llvm::Intrinsic::getDeclaration((uint64_t *)v183, 147, (uint64_t *)&v676, 1);
            v186 = v184;
            if (v184)
              v187 = *(uint64_t ***)(v184 + 24);
            else
              v187 = 0;
            *(_QWORD *)&v693 = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v641 + 1960), v185);
            v679 = 257;
            v188 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v636, v187, v186, (uint64_t *)&v693, 1, (uint64_t)&v676, 0);
            v189 = *(_QWORD *)(v122 + 168);
            LOWORD(v667) = 257;
            v190 = sub_1C4773E38((uint64_t *)&v636, 47, v188, v189, (uint64_t)&__dst);
            v679 = 257;
            v191 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v190, 44, 0);
            v192 = sub_1C506E874((uint64_t)&v636, (uint64_t)v190, (uint64_t)v191, (uint64_t)&v676, 0, 0);
            v193 = llvm::PointerType::get(*(llvm::PointerType **)(v122 + 168), 0);
            v679 = 257;
            v629 = v177;
            v194 = sub_1C4773E38((uint64_t *)&v636, 48, v177, v193, (uint64_t)&v676);
            LOWORD(v667) = 257;
            v195 = (uint64_t *)sub_1C4773594((uint64_t)&v636, v182, v192, (uint64_t)&__dst);
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v639 + 56) + 40) + 272, *v195);
            v197 = v196;
            v198 = (char *)operator new(0x80uLL);
            v199 = v198;
            *((_DWORD *)v198 + 21) = *((_DWORD *)v198 + 21) & 0x38000000 | 2;
            *(_QWORD *)v198 = 0;
            *((_QWORD *)v198 + 2) = 0;
            *((_QWORD *)v198 + 1) = 0;
            *((_QWORD *)v198 + 5) = 0;
            *((_QWORD *)v198 + 6) = 0;
            *((_QWORD *)v198 + 4) = 0;
            v200 = (unsigned __int8 **)(v198 + 32);
            *((_QWORD *)v198 + 8) = **(_QWORD **)*v195 + 1576;
            v201 = (llvm::Value *)(v198 + 64);
            *((_QWORD *)v198 + 3) = v198 + 64;
            *((_QWORD *)v198 + 7) = v198 + 64;
            *((_QWORD *)v198 + 9) = 0;
            v198[80] = 61;
            v198[81] = 0;
            *((_WORD *)v198 + 41) = 0;
            *((_DWORD *)v198 + 21) = 2;
            *(_OWORD *)(v198 + 88) = 0u;
            *(_OWORD *)(v198 + 104) = 0u;
            *((_DWORD *)v198 + 30) = 0;
            *(_QWORD *)v198 = v195;
            v204 = v195[1];
            v203 = v195 + 1;
            v202 = v204;
            *((_QWORD *)v198 + 1) = v204;
            if (v204)
              *(_QWORD *)(v202 + 16) = v198 + 8;
            *((_QWORD *)v198 + 2) = v203;
            *v203 = v198;
            if (*((_QWORD *)v198 + 4))
            {
              **((_QWORD **)v198 + 6) = *((_QWORD *)v198 + 5);
              v603 = *((_QWORD *)v198 + 5);
              if (v603)
                *(_QWORD *)(v603 + 16) = *((_QWORD *)v198 + 6);
            }
            *v200 = v194;
            if (v194)
            {
              v207 = *((_QWORD *)v194 + 1);
              v206 = (unsigned __int8 ***)(v194 + 8);
              v205 = v207;
              *((_QWORD *)v198 + 5) = v207;
              if (v207)
                *(_QWORD *)(v205 + 16) = v198 + 40;
              *((_QWORD *)v198 + 6) = v206;
              *v206 = v200;
            }
            *((_WORD *)v198 + 41) = 2 * (v197 & 0x3F);
            v198[124] = 1;
            v679 = 257;
            (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v201, &v676, v639, v640);
            if (!(_DWORD)v637)
            {
LABEL_333:
              v679 = 257;
              v208 = llvm::ConstantInt::get(*v173, 56, 0);
              v209 = (llvm::ConstantInt **)sub_1C534E5D8((uint64_t)&v636, (uint64_t)v173, (uint64_t)v208, (uint64_t)&v676, 0);
              LOWORD(v667) = 257;
              v210 = llvm::ConstantInt::get(*v209, 12, 0);
              v211 = (_QWORD *)sub_1C506E874((uint64_t)&v636, (uint64_t)v209, (uint64_t)v210, (uint64_t)&__dst, 1, 1);
              v122 = v632;
              v212 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v632 + 168), -1, 0);
              v695 = 257;
              v213 = sub_1C506EC1C((uint64_t *)&v636, v211, (uint64_t)v212, (uint64_t)&v693);
              v214 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v632 + 168), 8, 0);
              LOWORD(v667) = 257;
              v215 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::ConstantInt **, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v642 + 16))(v642, v173, v214, 0, 0);
              if (v215)
                goto LABEL_341;
              v679 = 257;
              v216 = (char *)operator new(0x80uLL);
              v217 = v216;
              *((_QWORD *)v216 + 8) = *v173;
              v215 = (llvm::Value *)(v216 + 64);
              *((_QWORD *)v216 + 3) = v216 + 64;
              *((_QWORD *)v216 + 5) = 0;
              v218 = (llvm::Value **)(v216 + 40);
              *((_QWORD *)v216 + 6) = 0;
              *((_QWORD *)v216 + 7) = v216 + 64;
              *((_QWORD *)v216 + 9) = 0;
              *((_QWORD *)v216 + 10) = 0x200000029;
              *(_OWORD *)(v216 + 88) = 0u;
              *(_OWORD *)(v216 + 104) = 0u;
              *((_DWORD *)v216 + 30) = 0;
              *(_QWORD *)v216 = v173;
              v219 = *v174;
              *((_QWORD *)v216 + 1) = *v174;
              if (v219)
                *(_QWORD *)(v219 + 16) = v216 + 8;
              *((_QWORD *)v216 + 2) = v174;
              *v174 = (uint64_t)v216;
              *((_QWORD *)v216 + 4) = v214;
              if (v214)
              {
                v222 = v214[1];
                v221 = v214 + 1;
                v220 = v222;
                *v218 = v222;
                if (v222)
                  *((_QWORD *)v220 + 2) = v218;
                *((_QWORD *)v216 + 6) = v221;
                *v221 = v216 + 32;
              }
              llvm::Value::setName((uint64_t ***)v216 + 8, (uint64_t)&v676);
              (*(void (**)(uint64_t, llvm::Value *, std::string *, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v215, &__dst, v639, v640);
              if (!(_DWORD)v637)
              {
LABEL_341:
                v679 = 257;
                v223 = (uint64_t *)sub_1C4D89BCC((uint64_t)&v636, v215, (uint64_t)v213, (uint64_t)&v676);
                llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v639 + 56) + 40) + 272, *v223);
                v225 = v224;
                v226 = (char *)operator new(0x80uLL);
                v227 = v226;
                *((_DWORD *)v226 + 21) = *((_DWORD *)v226 + 21) & 0x38000000 | 2;
                *(_QWORD *)v226 = 0;
                *((_QWORD *)v226 + 2) = 0;
                *((_QWORD *)v226 + 1) = 0;
                *((_QWORD *)v226 + 5) = 0;
                *((_QWORD *)v226 + 6) = 0;
                *((_QWORD *)v226 + 4) = 0;
                v228 = (unsigned __int8 **)(v226 + 32);
                *((_QWORD *)v226 + 8) = **(_QWORD **)*v223 + 1576;
                v229 = (llvm::Value *)(v226 + 64);
                *((_QWORD *)v226 + 3) = v226 + 64;
                *((_QWORD *)v226 + 7) = v226 + 64;
                *((_QWORD *)v226 + 9) = 0;
                v226[80] = 61;
                v226[81] = 0;
                *((_WORD *)v226 + 41) = 0;
                *((_DWORD *)v226 + 21) = 2;
                *(_OWORD *)(v226 + 88) = 0u;
                *(_OWORD *)(v226 + 104) = 0u;
                *((_DWORD *)v226 + 30) = 0;
                *(_QWORD *)v226 = v223;
                v232 = v223[1];
                v231 = v223 + 1;
                v230 = v232;
                *((_QWORD *)v226 + 1) = v232;
                if (v232)
                  *(_QWORD *)(v230 + 16) = v226 + 8;
                *((_QWORD *)v226 + 2) = v231;
                *v231 = v226;
                if (*((_QWORD *)v226 + 4))
                {
                  **((_QWORD **)v226 + 6) = *((_QWORD *)v226 + 5);
                  v604 = *((_QWORD *)v226 + 5);
                  if (v604)
                    *(_QWORD *)(v604 + 16) = *((_QWORD *)v226 + 6);
                }
                *v228 = v168;
                if (v168)
                {
                  v235 = *((_QWORD *)v168 + 1);
                  v234 = (unsigned __int8 ***)(v168 + 8);
                  v233 = v235;
                  *((_QWORD *)v226 + 5) = v235;
                  if (v235)
                    *(_QWORD *)(v233 + 16) = v226 + 40;
                  *((_QWORD *)v226 + 6) = v234;
                  *v234 = v228;
                }
                *((_WORD *)v226 + 41) = 2 * (v225 & 0x3F);
                v226[124] = 1;
                v679 = 257;
                (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v229, &v676, v639, v640);
                if (!(_DWORD)v637)
                {
LABEL_349:
                  v177 = v629;
                  goto LABEL_350;
                }
                v595 = (char *)v636;
                v596 = (char *)v636 + 16 * v637;
                v597 = (unsigned __int8 **)(v227 + 112);
                v122 = v632;
                while (2)
                {
                  v598 = *(_DWORD *)v595;
                  v599 = (unsigned __int8 *)*((_QWORD *)v595 + 1);
                  if (v599)
                  {
                    if (v598)
                      goto LABEL_797;
                    __dst.__r_.__value_.__r.__words[0] = *((_QWORD *)v595 + 1);
                    llvm::MetadataTracking::track((uint64_t)&__dst, v599, 2);
                    v600 = *v597;
LABEL_801:
                    if (v600)
                      llvm::MetadataTracking::untrack((uint64_t)(v227 + 112), v600);
                    v601 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                    *v597 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                    if (v601)
                      llvm::MetadataTracking::retrack((uint64_t)&__dst, v601, (uint64_t)(v227 + 112));
                  }
                  else
                  {
                    v600 = *v597;
                    if (*v597 || (v227[87] & 0x20) != 0)
                    {
                      if (!v598)
                      {
                        __dst.__r_.__value_.__r.__words[0] = 0;
                        goto LABEL_801;
                      }
LABEL_797:
                      llvm::Value::setMetadata(v229, *(_DWORD *)v595, (llvm::MDNode *)v599);
                    }
                  }
                  v595 += 16;
                  if (v595 == v596)
                    goto LABEL_349;
                  continue;
                }
              }
              v257 = (char *)v636;
              v258 = (char *)v636 + 16 * v637;
              v259 = (unsigned __int8 **)(v217 + 112);
              while (2)
              {
                v260 = *(_DWORD *)v257;
                v261 = (unsigned __int8 *)*((_QWORD *)v257 + 1);
                if (v261)
                {
                  if (v260)
                    goto LABEL_374;
                  *(_QWORD *)&v693 = *((_QWORD *)v257 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v693, v261, 2);
                  v262 = *v259;
LABEL_378:
                  if (v262)
                    llvm::MetadataTracking::untrack((uint64_t)(v217 + 112), v262);
                  v263 = (unsigned __int8 *)v693;
                  *v259 = (unsigned __int8 *)v693;
                  if (v263)
                    llvm::MetadataTracking::retrack((uint64_t)&v693, v263, (uint64_t)(v217 + 112));
                }
                else
                {
                  v262 = *v259;
                  if (*v259 || (v217[87] & 0x20) != 0)
                  {
                    if (!v260)
                    {
                      *(_QWORD *)&v693 = 0;
                      goto LABEL_378;
                    }
LABEL_374:
                    llvm::Value::setMetadata(v215, *(_DWORD *)v257, (llvm::MDNode *)v261);
                  }
                }
                v257 += 16;
                if (v257 == v258)
                  goto LABEL_341;
                continue;
              }
            }
            v588 = (char *)v636;
            v589 = (char *)v636 + 16 * v637;
            v590 = (unsigned __int8 **)(v199 + 112);
            while (2)
            {
              v591 = *(_DWORD *)v588;
              v592 = (unsigned __int8 *)*((_QWORD *)v588 + 1);
              if (v592)
              {
                if (v591)
                  goto LABEL_782;
                *(_QWORD *)&v693 = *((_QWORD *)v588 + 1);
                llvm::MetadataTracking::track((uint64_t)&v693, v592, 2);
                v593 = *v590;
LABEL_786:
                if (v593)
                  llvm::MetadataTracking::untrack((uint64_t)(v199 + 112), v593);
                v594 = (unsigned __int8 *)v693;
                *v590 = (unsigned __int8 *)v693;
                if (v594)
                  llvm::MetadataTracking::retrack((uint64_t)&v693, v594, (uint64_t)(v199 + 112));
              }
              else
              {
                v593 = *v590;
                if (*v590 || (v199[87] & 0x20) != 0)
                {
                  if (!v591)
                  {
                    *(_QWORD *)&v693 = 0;
                    goto LABEL_786;
                  }
LABEL_782:
                  llvm::Value::setMetadata(v201, *(_DWORD *)v588, (llvm::MDNode *)v592);
                }
              }
              v588 += 16;
              if (v588 == v589)
                goto LABEL_333;
              continue;
            }
          }
LABEL_350:
          v121 = v609;
          if (!*(_QWORD *)(v122 + 472))
          {
            v236 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 168), 0xFFFFFFFFLL, 0);
            LOWORD(v667) = 257;
            v237 = (_QWORD *)sub_1C4773594((uint64_t)&v636, v177, (uint64_t)v236, (uint64_t)&__dst);
            v238 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 168), 1, 0);
            *(_QWORD *)&v693 = "hwasan.shadow";
            v695 = 259;
            v239 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v642 + 16))(v642, v237, v238, 0, 0);
            if (v239)
              goto LABEL_360;
            v679 = 257;
            v240 = (char *)operator new(0x80uLL);
            v241 = v240;
            *(_QWORD *)v240 = 0;
            *((_QWORD *)v240 + 2) = 0;
            *((_QWORD *)v240 + 1) = 0;
            *((_QWORD *)v240 + 5) = 0;
            *((_QWORD *)v240 + 6) = 0;
            *((_QWORD *)v240 + 4) = 0;
            v242 = (llvm::Value ***)(v240 + 32);
            *((_QWORD *)v240 + 8) = *v237;
            v239 = (unsigned __int8 *)(v240 + 64);
            *((_QWORD *)v240 + 3) = v240 + 64;
            *((_QWORD *)v240 + 7) = v240 + 64;
            *((_QWORD *)v240 + 9) = 0;
            v240[80] = 41;
            v240[81] = 0;
            *((_WORD *)v240 + 41) = 0;
            *((_DWORD *)v240 + 21) = 2;
            *((_DWORD *)v240 + 30) = 0;
            *(_OWORD *)(v240 + 104) = 0u;
            *(_OWORD *)(v240 + 88) = 0u;
            *(_QWORD *)v240 = v237;
            v245 = v237[1];
            v244 = v237 + 1;
            v243 = v245;
            *((_QWORD *)v240 + 1) = v245;
            if (v245)
              *(_QWORD *)(v243 + 16) = v240 + 8;
            *((_QWORD *)v240 + 2) = v244;
            *v244 = v240;
            if (*((_QWORD *)v240 + 4))
            {
              **((_QWORD **)v240 + 6) = *((_QWORD *)v240 + 5);
              v605 = *((_QWORD *)v240 + 5);
              if (v605)
                *(_QWORD *)(v605 + 16) = *((_QWORD *)v240 + 6);
            }
            *v242 = v238;
            if (v238)
            {
              v248 = v238[1];
              v247 = (llvm::Value ****)(v238 + 1);
              v246 = v248;
              *((_QWORD *)v240 + 5) = v248;
              if (v248)
                *((_QWORD *)v246 + 2) = v240 + 40;
              *((_QWORD *)v240 + 6) = v247;
              *v247 = v242;
            }
            llvm::Value::setName((uint64_t ***)v240 + 8, (uint64_t)&v676);
            (*(void (**)(uint64_t, unsigned __int8 *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v239, &v693, v639, v640);
            if (!(_DWORD)v637)
            {
LABEL_360:
              *(_QWORD *)(v122 + 472) = v239;
              v249 = *(_QWORD *)(v122 + 176);
              v679 = 257;
              *(_QWORD *)(v122 + 472) = sub_1C4773E38((uint64_t *)&v636, 48, v239, v249, (uint64_t)&v676);
              v121 = v609;
              goto LABEL_361;
            }
            v264 = (char *)v636;
            v265 = (char *)v636 + 16 * v637;
            v266 = (unsigned __int8 **)(v241 + 112);
            while (2)
            {
              v267 = *(_DWORD *)v264;
              v268 = (unsigned __int8 *)*((_QWORD *)v264 + 1);
              if (v268)
              {
                if (v267)
                  goto LABEL_389;
                v671.__r_.__value_.__r.__words[0] = *((_QWORD *)v264 + 1);
                llvm::MetadataTracking::track((uint64_t)&v671, v268, 2);
                v269 = *v266;
LABEL_393:
                if (v269)
                  llvm::MetadataTracking::untrack((uint64_t)(v241 + 112), v269);
                v270 = (unsigned __int8 *)v671.__r_.__value_.__r.__words[0];
                *v266 = (unsigned __int8 *)v671.__r_.__value_.__r.__words[0];
                if (v270)
                  llvm::MetadataTracking::retrack((uint64_t)&v671, v270, (uint64_t)(v241 + 112));
              }
              else
              {
                v269 = *v266;
                if (*v266 || (v241[87] & 0x20) != 0)
                {
                  if (!v267)
                  {
                    v671.__r_.__value_.__r.__words[0] = 0;
                    goto LABEL_393;
                  }
LABEL_389:
                  llvm::Value::setMetadata((llvm::Value *)v239, *(_DWORD *)v264, (llvm::MDNode *)v268);
                }
              }
              v264 += 16;
              if (v264 == v265)
                goto LABEL_360;
              continue;
            }
          }
LABEL_361:
          v250 = v647;
          v616 = v648;
          if (v647 != v648)
          {
            if (byte_1ED8188E8)
            {
              v251 = 0;
            }
            else
            {
              v251 = *(uint64_t ****)(v122 + 480);
              if (!v251)
              {
                v252 = *(_QWORD *)(*(_QWORD *)(v639 + 56) + 40);
                v676 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v641 + 1912), (llvm::Type *)*(unsigned int *)(v252 + 276));
                v253 = llvm::Intrinsic::getDeclaration((uint64_t *)v252, 147, (uint64_t *)&v676, 1);
                v255 = v253;
                if (v253)
                  v256 = *(uint64_t ***)(v253 + 24);
                else
                  v256 = 0;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v641+ 1960), v254);
                v679 = 257;
                v271 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v636, v256, v255, (uint64_t *)&__dst, 1, (uint64_t)&v676, 0);
                v272 = *(_QWORD *)(v122 + 168);
                v679 = 257;
                v273 = sub_1C5098D9C((uint64_t *)&v636, v271, v272, (uint64_t)&v676);
                LOWORD(v667) = 257;
                v274 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v273, 20, 0);
                v275 = sub_1C506ED1C((uint64_t)&v636, (uint64_t)v273, (uint64_t)v274, (uint64_t)&__dst, 0);
                v695 = 257;
                v251 = (uint64_t ***)sub_1C506EC1C((uint64_t *)&v636, v273, v275, (uint64_t)&v693);
                if (*(_DWORD *)(v122 + 48) == 42)
                {
                  v276 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 168), *(_QWORD *)(v122 + 224), 0);
                  v679 = 257;
                  v251 = (uint64_t ***)sub_1C4D89BCC((uint64_t)&v636, v251, (uint64_t)v276, (uint64_t)&v676);
                }
                v676 = "hwasan.stack.base.tag";
                v679 = 259;
                llvm::Value::setName(v251, (uint64_t)&v676);
                v250 = v647;
                v616 = v648;
              }
            }
            v668 = (llvm::ConstantInt *)v251;
            if (v250 == v616)
            {
LABEL_402:
              if (v650)
              {
                v277 = v649;
                v278 = 8 * v650;
                do
                {
                  v279 = *v277++;
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v279 + 40) + 40, (uint64_t ***)v279);
                  v280 = *(_QWORD *)(v279 + 24);
                  v281 = *(_QWORD **)(v279 + 32);
                  *v281 = v280;
                  *(_QWORD *)(v280 + 8) = v281;
                  *(_QWORD *)(v279 + 24) = 0;
                  *(_QWORD *)(v279 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v279);
                  v278 -= 8;
                }
                while (v278);
              }
              v121 = v609;
              goto LABEL_406;
            }
            v462 = 0;
            while (2)
            {
              v635 = 0;
              v635 = *v250;
              v463 = *((_QWORD *)v635 + 4);
              if (v463)
                v464 = v463 == *((_QWORD *)v635 + 5) + 40;
              else
                v464 = 1;
              if (v464)
                v465 = 0;
              else
                v465 = v463 - 24;
              sub_1C4773D54((uint64_t)&v676, v465, 0, 0, 0);
              v623 = v250 + 1;
              if (byte_1ED8188E8)
              {
                v467 = sub_1C58E3D64((_QWORD *)v122, (uint64_t *)&v676);
              }
              else
              {
                if (*(_DWORD *)(v122 + 48) == 42)
                  v466 = v462 & *(_DWORD *)(v122 + 224);
                else
                  v466 = dword_1C8662DBC[v462 % 0x24];
                v468 = v668;
                v469 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 168), v466, 0);
                LOWORD(v667) = 257;
                v467 = sub_1C506EC1C((uint64_t *)&v676, v468, (uint64_t)v469, (uint64_t)&__dst);
              }
              v470 = (llvm::ConstantInt **)v467;
              v471 = *(_QWORD *)(v122 + 168);
              LOWORD(v667) = 257;
              v472 = sub_1C5098D9C((uint64_t *)&v676, (unsigned __int8 *)v635, v471, (uint64_t)&__dst);
              v473 = *(uint64_t ***)v635;
              v474 = *(unsigned int *)(v122 + 220);
              v622 = (unsigned __int8 *)v470;
              if (*(_BYTE *)(v122 + 208))
              {
                LOWORD(v667) = 257;
                v478 = llvm::ConstantInt::get(*v470, v474, 0);
                v479 = (_QWORD *)sub_1C506E874((uint64_t)&v676, (uint64_t)v470, (uint64_t)v478, (uint64_t)&__dst, 0, 0);
                v480 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 168), ~(-1 << *(_DWORD *)(v122 + 220)), 0);
                v695 = 257;
                v481 = sub_1C4773594((uint64_t)&v676, v479, (uint64_t)v480, (uint64_t)&v693);
                LOWORD(v667) = 257;
                v477 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)&v676, v472, v481, (uint64_t)&__dst);
              }
              else
              {
                LOWORD(v667) = 257;
                v475 = llvm::ConstantInt::get(*v470, v474, 0);
                v476 = sub_1C506E874((uint64_t)&v676, (uint64_t)v470, (uint64_t)v475, (uint64_t)&__dst, 0, 0);
                LOWORD(v667) = 257;
                v477 = (unsigned __int8 *)sub_1C4773594((uint64_t)&v676, v472, v476, (uint64_t)&__dst);
              }
              LOWORD(v667) = 257;
              v482 = sub_1C4773E38((uint64_t *)&v676, 48, v477, (uint64_t)v473, (uint64_t)&__dst);
              v631 = v250;
              if ((*((_BYTE *)v635 + 23) & 0x10) == 0)
              {
                if (v462)
                {
                  v492 = v462;
                  v483 = (char *)v694 + 5;
                  do
                  {
                    *--v483 = (v492 % 0xA) | 0x30;
                    v297 = v492 > 9;
                    v492 /= 0xAuLL;
                  }
                  while (v297);
                }
                else
                {
                  BYTE4(v694[0]) = 48;
                  v483 = (char *)v694 + 4;
                }
                sub_1C4E61270(&__dst, v483, (char *)v694 + 5, (char *)v694 + 5 - v483);
                v493 = std::string::insert(&__dst, 0, "alloca.");
                v693 = *(_OWORD *)&v493->__r_.__value_.__l.__data_;
                v694[0] = *((_QWORD *)&v493->__r_.__value_.__l + 2);
                v493->__r_.__value_.__r.__words[0] = 0;
                v493->__r_.__value_.__l.__size_ = 0;
                v493->__r_.__value_.__r.__words[2] = 0;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                goto LABEL_660;
              }
              v484 = ***(_QWORD ***)v635;
              v485 = *(_QWORD *)(v484 + 152);
              v486 = *(unsigned int *)(v484 + 168);
              if ((_DWORD)v486)
              {
                LODWORD(v487) = (v486 - 1) & ((v635 >> 4) ^ (v635 >> 9));
                v488 = v485 + 16 * v487;
                v489 = *(llvm::memtag **)v488;
                if (*(llvm::memtag **)v488 != v635)
                {
                  v490 = 1;
                  while (v489 != (llvm::memtag *)-4096)
                  {
                    v491 = v487 + v490++;
                    v487 = v491 & (v486 - 1);
                    v489 = *(llvm::memtag **)(v485 + 16 * v487);
                    if (v489 == v635)
                    {
                      v488 = v485 + 16 * v487;
                      goto LABEL_651;
                    }
                  }
                  goto LABEL_650;
                }
              }
              else
              {
LABEL_650:
                v488 = v485 + 16 * v486;
              }
LABEL_651:
              v494 = *(unint64_t **)(v488 + 8);
              v497 = *v494;
              v496 = v494 + 2;
              v495 = v497;
              if (v497 >= 0x7FFFFFFFFFFFFFF8)
                abort();
              v625 = v472;
              if (v495 >= 0x17)
              {
                v499 = (v495 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v495 | 7) != 0x17)
                  v499 = v495 | 7;
                v500 = v499 + 1;
                v498 = (__int128 *)operator new(v499 + 1);
                *((_QWORD *)&v693 + 1) = v495;
                v694[0] = v500 | 0x8000000000000000;
                *(_QWORD *)&v693 = v498;
              }
              else
              {
                HIBYTE(v694[0]) = v495;
                v498 = &v693;
                if (!v495)
                  goto LABEL_659;
              }
              memmove(v498, v496, v495);
LABEL_659:
              *((_BYTE *)v498 + v495) = 0;
              v472 = v625;
LABEL_660:
              v501 = SHIBYTE(v694[0]);
              if (v694[0] >= 0)
                v502 = HIBYTE(v694[0]) & 0x7F;
              else
                v502 = *((_QWORD *)&v693 + 1);
              sub_1C484371C((uint64_t)&v671, v502 + 7);
              if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v503 = &v671;
              else
                v503 = (std::string *)v671.__r_.__value_.__r.__words[0];
              if (v502)
              {
                if (v501 >= 0)
                  v504 = &v693;
                else
                  v504 = (__int128 *)v693;
                memmove(v503, v504, v502);
              }
              strcpy((char *)v503 + v502, ".hwasan");
              LOWORD(v667) = 260;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v671;
              llvm::Value::setName((uint64_t ***)v482, (uint64_t)&__dst);
              if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v671.__r_.__value_.__l.__data_);
              AllocaSizeInBytes = llvm::memtag::getAllocaSizeInBytes(v635, v505);
              v507 = 1 << *(_DWORD *)(v122 + 136);
              v621 = AllocaSizeInBytes;
              v633 = 0;
              v634 = (AllocaSizeInBytes + v507 - 1) & -v507;
              v508 = *(_QWORD *)(v122 + 176);
              LOWORD(v667) = 257;
              v633 = sub_1C5098D9C((uint64_t *)&v676, (unsigned __int8 *)v635, v508, (uint64_t)&__dst);
              v669.__r_.__value_.__r.__words[0] = v122;
              v669.__r_.__value_.__l.__size_ = (std::string::size_type)&v634;
              v669.__r_.__value_.__r.__words[2] = (std::string::size_type)&v633;
              v619 = (llvm::Instruction ***)(v631 + 2);
              sub_1C58E3DD4((llvm::Value **)&__dst, (uint64_t *)v631[2], *((_DWORD *)v631 + 6), (llvm::ConstantInt ***)&v669);
              __p = (void *)v122;
              v674 = &v634;
              v675 = (unsigned __int8 *)&v633;
              sub_1C58E3DD4((llvm::Value **)&__dst, (uint64_t *)v631[6], *((_DWORD *)v631 + 14), (llvm::ConstantInt ***)&__p);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v633;
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v472;
              llvm::Value::replaceUsesWithIf(v635, (llvm::Value *)v482, (unsigned int (*)(uint64_t, uint64_t))sub_1C58E4678, (uint64_t)&__dst);
              v626 = (const llvm::Instruction ***)(v631 + 6);
              v509 = *((unsigned int *)v631 + 22);
              if (!(_DWORD)v509)
              {
LABEL_695:
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v676;
                v122 = v632;
                __dst.__r_.__value_.__l.__size_ = v632;
                __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v668;
                v666 = &v635;
                v667 = &v634;
                if (v650
                  || (v521 = a3(a4),
                      !llvm::memtag::isStandardLifetime((uint64_t)v619, (uint64_t)v626, v521, xmmword_1EF8F5518))|| v653|| !*(_BYTE *)(v632 + 215))
                {
                  sub_1C58E3F00(v632, (uint64_t)&v676, (unsigned __int8 *)v635, v622, v621);
                  if (v652)
                  {
                    v536 = v651;
                    v537 = 8 * v652;
                    do
                    {
                      v538 = *v536++;
                      sub_1C58E4568((uint64_t)&__dst, v538);
                      v537 -= 8;
                    }
                    while (v537);
                  }
                  v539 = *((unsigned int *)v631 + 6);
                  if ((_DWORD)v539)
                  {
                    v540 = v631[2];
                    v541 = 8 * v539;
                    do
                    {
                      v542 = *(_QWORD *)v540;
                      v540 = (llvm::memtag *)((char *)v540 + 8);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v542 + 40) + 40, (uint64_t ***)v542);
                      v543 = *(_QWORD *)(v542 + 24);
                      v544 = *(_QWORD **)(v542 + 32);
                      *v544 = v543;
                      *(_QWORD *)(v543 + 8) = v544;
                      *(_QWORD *)(v542 + 24) = 0;
                      *(_QWORD *)(v542 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v542);
                      v541 -= 8;
                    }
                    while (v541);
                  }
                  v545 = *((unsigned int *)v631 + 14);
                  if ((_DWORD)v545)
                  {
                    v546 = v631[6];
                    v547 = 8 * v545;
                    do
                    {
                      v548 = *(_QWORD *)v546;
                      v546 = (llvm::memtag *)((char *)v546 + 8);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v548 + 40) + 40, (uint64_t ***)v548);
                      v549 = *(_QWORD *)(v548 + 24);
                      v550 = *(_QWORD **)(v548 + 32);
                      *v550 = v549;
                      *(_QWORD *)(v549 + 8) = v550;
                      *(_QWORD *)(v548 + 24) = 0;
                      *(_QWORD *)(v548 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v548);
                      v547 -= 8;
                    }
                    while (v547);
                  }
                }
                else
                {
                  v522 = 0;
                  v523 = **v619;
                  v524 = *((_QWORD *)v523 + 4);
                  if (v524)
                    v525 = v524 == *((_QWORD *)v523 + 5) + 40;
                  else
                    v525 = 1;
                  if (v525)
                    v526 = 0;
                  else
                    v526 = v524 - 24;
                  v680 = *(_QWORD *)(v526 + 40);
                  v681 = (char *)(v526 + 24);
                  v527 = *(unsigned __int8 **)(v526 + 48);
                  v671.__r_.__value_.__r.__words[0] = (std::string::size_type)v527;
                  if (v527)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v671, v527, 2);
                    v522 = v671.__r_.__value_.__r.__words[0];
                  }
                  sub_1C4774EF4((uint64_t)&v676, 0, v522);
                  if (v671.__r_.__value_.__r.__words[0])
                    llvm::MetadataTracking::untrack((uint64_t)&v671, (unsigned __int8 *)v671.__r_.__value_.__l.__data_);
                  sub_1C58E3F00(v632, (uint64_t)&v676, (unsigned __int8 *)v635, v622, v621);
                  v528 = (llvm::DominatorTree *)a3(a4);
                  v529 = (llvm::PostDominatorTree *)a5(a6);
                  if ((llvm::memtag::forAllReachableExits(v528, v529, v523, v626, (uint64_t)&v651, (void (*)(uint64_t, const llvm::Instruction *))sub_1C58E47A0, (uint64_t)&__dst) & 1) == 0)
                  {
                    v530 = *((unsigned int *)v631 + 14);
                    if ((_DWORD)v530)
                    {
                      v531 = v631[6];
                      v532 = 8 * v530;
                      do
                      {
                        v533 = *(_QWORD *)v531;
                        v531 = (llvm::memtag *)((char *)v531 + 8);
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v533 + 40) + 40, (uint64_t ***)v533);
                        v534 = *(_QWORD *)(v533 + 24);
                        v535 = *(_QWORD **)(v533 + 32);
                        *v535 = v534;
                        *(_QWORD *)(v534 + 8) = v535;
                        *(_QWORD *)(v533 + 24) = 0;
                        *(_QWORD *)(v533 + 32) = 0;
                        llvm::Value::deleteValue((llvm::Value *)v533);
                        v532 -= 8;
                      }
                      while (v532);
                    }
                  }
                }
                llvm::memtag::alignAndPadAlloca(v623, (const llvm::AllocaInst *)*(unsigned int *)(v632 + 136));
                if (SHIBYTE(v694[0]) < 0)
                  operator delete((void *)v693);
                if (v676 != v678)
                  free(v676);
                ++v462;
                v250 = v631 + 14;
                if (v631 + 14 == v616)
                  goto LABEL_402;
                continue;
              }
              break;
            }
            v510 = (uint64_t *)v631[10];
            v511 = &v510[v509];
            while (2)
            {
              if (*(_DWORD *)(v632 + 48) == 42)
                v512 = v462 & *(_DWORD *)(v632 + 224);
              else
                v512 = dword_1C8662DBC[v462 % 0x24];
              v513 = 0;
              v514 = *v510;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
              __dst.__r_.__value_.__r.__words[2] = 4098;
              v666 = (llvm::memtag **)v512;
              __dst.__r_.__value_.__l.__size_ = 0x800000002;
LABEL_679:
              v515 = *(_DWORD *)(v514 + 20) & 0x7FFFFFF;
              v516 = *(unsigned __int8 **)(*(_QWORD *)(v514 - 32 * v515) + 24);
              v517 = *v516;
              if ((_DWORD)v517 == 32)
                v518 = *((unsigned int *)v516 + 8);
              else
                v518 = 1;
              if (v513 >= v518)
              {
                if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
                  free(__dst.__r_.__value_.__l.__data_);
                if (++v510 == v511)
                  goto LABEL_695;
                continue;
              }
              break;
            }
            if (v517 > 0x22)
              goto LABEL_686;
            if (v517 == 32)
            {
              v516 = *(unsigned __int8 **)(*((_QWORD *)v516 + 3) + 8 * v513);
              goto LABEL_686;
            }
            if (((1 << v517) & 0x6FFFFFFF0) != 0)
              v519 = 0;
            else
LABEL_686:
              v519 = (llvm::memtag *)*((_QWORD *)v516 + 16);
            if (v519 == v635)
            {
              appended = llvm::DIExpression::appendOpsToArg(*(_QWORD **)(*(_QWORD *)(v514 + 64 - 32 * v515) + 24), (uint64_t *)__dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]), v513, 0);
              sub_1C61D279C(v514, (uint64_t)appended);
            }
            ++v513;
            goto LABEL_679;
          }
LABEL_406:
          v282 = *(_QWORD *)(v121 + 80);
          if (v282)
            v283 = v282 - 24;
          else
            v283 = 0;
          if (v639 != v283)
          {
            v286 = *(_QWORD *)(v283 + 48);
            if (v286)
              v287 = (llvm::Instruction *)(v286 - 24);
            else
              v287 = 0;
            v288 = v639 + 40;
            v289 = *(_QWORD *)(v639 + 48);
            while (v289 != v288)
            {
              v290 = v289;
              v289 = *(_QWORD *)(v289 + 8);
              if (v290)
                v291 = (llvm::Instruction *)(v290 - 24);
              else
                v291 = 0;
              if (v290 && *((_BYTE *)v291 + 16) == 59 && *(_BYTE *)(*((_QWORD *)v291 - 4) + 16) == 16)
                llvm::Instruction::moveBefore(v291, v287);
            }
          }
          if (!(_DWORD)v663)
          {
LABEL_411:
            if (!byte_1ED818E28 || !(_DWORD)v660)
            {
LABEL_413:
              *(_QWORD *)(v632 + 472) = 0;
              *(_QWORD *)(v632 + 480) = 0;
              if (v636 != &v638)
                free(v636);
              v8 = 1;
              goto LABEL_416;
            }
            v551 = (uint64_t *)v659;
            v552 = 8 * v660;
            while (2)
            {
              v553 = *v551;
              sub_1C4773D54((uint64_t)&v676, *v551, 0, 0, 0);
              v554 = *(_DWORD *)(*(_QWORD *)(v553 - 32) + 36);
              if ((v554 - 196) < 2)
              {
LABEL_733:
                v555 = v554 == 197;
                v556 = 88;
                if (v555)
                  v556 = 72;
                v557 = v632 + 72;
                if (!v555)
                  v557 = v632 + 88;
                v558 = v632;
                v559 = *(uint64_t ***)(v632 + v556);
                v560 = *(_QWORD *)(v557 + 8);
                v561 = *(unsigned __int8 **)(v553 - 32 * (*(_DWORD *)(v553 + 20) & 0x7FFFFFF));
                v562 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
                LOWORD(v667) = 257;
                __p = sub_1C5098D9C((uint64_t *)&v676, v561, v562, (uint64_t)&__dst);
                v563 = *(unsigned __int8 **)(v553 - 32 * (*(_DWORD *)(v553 + 20) & 0x7FFFFFF) + 32);
                v564 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
                v695 = 257;
                v565 = sub_1C5098D9C((uint64_t *)&v676, v563, v564, (uint64_t)&v693);
              }
              else
              {
                if (v554 != 199)
                {
                  if (v554 == 194)
                    goto LABEL_733;
LABEL_740:
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v553 + 40) + 40, (uint64_t ***)v553);
                  v572 = *(_QWORD *)(v553 + 24);
                  v573 = *(_QWORD **)(v553 + 32);
                  *v573 = v572;
                  *(_QWORD *)(v572 + 8) = v573;
                  *(_QWORD *)(v553 + 24) = 0;
                  *(_QWORD *)(v553 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v553);
                  if (v676 != v678)
                    free(v676);
                  ++v551;
                  v552 -= 8;
                  if (!v552)
                    goto LABEL_413;
                  continue;
                }
                v558 = v632;
                v559 = *(uint64_t ***)(v632 + 104);
                v560 = *(_QWORD *)(v632 + 112);
                v566 = *(unsigned __int8 **)(v553 - 32 * (*(_DWORD *)(v553 + 20) & 0x7FFFFFF));
                v567 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v682 + 1912), 0);
                LOWORD(v667) = 257;
                __p = sub_1C5098D9C((uint64_t *)&v676, v566, v567, (uint64_t)&__dst);
                v568 = *(unsigned __int8 **)(v553 - 32 * (*(_DWORD *)(v553 + 20) & 0x7FFFFFF) + 32);
                v569 = *(_QWORD *)v682 + 1960;
                v695 = 257;
                v565 = sub_1C4D8D514((uint64_t *)&v676, v568, v569, 0, (uint64_t)&v693);
              }
              break;
            }
            v674 = (uint64_t *)v565;
            v570 = *(unsigned __int8 **)(v553 - 32 * (*(_DWORD *)(v553 + 20) & 0x7FFFFFF) + 64);
            v571 = *(_QWORD *)(v558 + 168);
            v672 = 257;
            v675 = sub_1C4D8D514((uint64_t *)&v676, v570, v571, 0, (uint64_t)&v671);
            v670 = 257;
            sub_1C4774778((uint64_t *)&v676, v559, v560, (uint64_t *)&__p, 3, (uint64_t)&v669, 0);
            goto LABEL_740;
          }
          v292 = (int8x8_t *)v662;
          v293 = (int8x8_t *)((char *)v662 + 48 * v663);
          while (2)
          {
            if (v292[5])
            {
LABEL_455:
              v292 += 6;
              if (v292 == v293)
                goto LABEL_411;
              continue;
            }
            break;
          }
          v294 = **(unsigned __int8 ***)v292;
          sub_1C4773D54((uint64_t)&__dst, *(_QWORD *)(*(_QWORD *)v292 + 24), 0, 0, 0);
          v295 = v292[3];
          if (!*(_QWORD *)&v295
            || ((v296 = (uint8x8_t)vcnt_s8(v295), v296.i16[0] = vaddlv_u8(v296), *(_QWORD *)&v295 <= 0x87uLL)
              ? (v297 = v296.u32[0] > 1uLL)
              : (v297 = 1),
                v297
             || v292[4].i8[1]
             && (v298 = 1 << v292[4].i8[0], v298 < *(_QWORD *)&v295 >> 3)
             && !(v298 >> *(_DWORD *)(v122 + 136))))
          {
            v299 = v122 + 16 * v292[1].u8[0];
            v300 = *(uint64_t ***)(v299 + 400);
            v301 = *(_QWORD *)(v299 + 408);
            v302 = *(_QWORD *)(v122 + 168);
            v679 = 257;
            v671.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C5098D9C((uint64_t *)&__dst, v294, v302, (uint64_t)&v676);
            v671.__r_.__value_.__l.__size_ = (std::string::size_type)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 168), *(_QWORD *)&v292[3] >> 3, 0);
            v695 = 257;
            v303 = v300;
            v304 = v301;
            v305 = 2;
            goto LABEL_450;
          }
          v308 = __clz(__rbit32((unsigned __int32)v295.i32[0] >> 3));
          if (v295.i32[0] >= 8u)
            v309 = v308;
          else
            v309 = 32;
          if (*(_BYTE *)(v122 + 213))
          {
            v310 = v122 + 80 * v292[1].u8[0] + 16 * v309;
            v311 = *(uint64_t ***)(v310 + 240);
            v312 = *(_QWORD *)(v310 + 248);
            v313 = *(_QWORD *)(v122 + 168);
            v679 = 257;
            v671.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C5098D9C((uint64_t *)&__dst, v294, v313, (uint64_t)&v676);
            v695 = 257;
            v303 = v311;
            v304 = v312;
            v305 = 1;
LABEL_450:
            sub_1C4774778((uint64_t *)&__dst, v303, v304, (uint64_t *)&v671, v305, (uint64_t)&v693, 0);
LABEL_451:
            v306 = *(_QWORD *)(*(_QWORD *)v292 + 24);
            v307 = *(_DWORD *)(v122 + 48);
            if (v307 <= 0x2A && ((1 << v307) & 0x40000000038) != 0)
            {
LABEL_453:
              if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
                free(__dst.__r_.__value_.__l.__data_);
              goto LABEL_455;
            }
            sub_1C4773D54((uint64_t)&v676, *(_QWORD *)(*(_QWORD *)v292 + 24), 0, 0, 0);
            v314 = *(_QWORD *)(v122 + 168);
            v695 = 257;
            v315 = sub_1C5098D9C((uint64_t *)&v676, v294, v314, (uint64_t)&v693);
            v316 = (unsigned __int8 *)sub_1C58E3BF8(*(_BYTE *)(v122 + 208), (llvm::Type *)*(unsigned int *)(v122 + 220), (uint64_t)&v676, (llvm::ConstantInt **)v315);
            v317 = *(_QWORD *)v294;
            v695 = 257;
            v318 = sub_1C4773E38((uint64_t *)&v676, 48, v316, v317, (uint64_t)&v693);
            v319 = *(unsigned __int8 *)(v306 + 16);
            if (v306)
            {
              v320 = 0;
              if (v319 == 60)
              {
LABEL_475:
                v334 = *(_DWORD *)(v306 + 20);
                if ((v334 & 0x40000000) != 0)
                  v335 = *(_QWORD *)(v306 - 8);
                else
                  v335 = v306 - 32 * (v334 & 0x7FFFFFF);
                v336 = v335 + 32 * v320;
                if (*(_QWORD *)v336)
                {
                  **(_QWORD **)(v336 + 16) = *(_QWORD *)(v336 + 8);
                  v337 = *(_QWORD *)(v336 + 8);
                  if (v337)
                    *(_QWORD *)(v337 + 16) = *(_QWORD *)(v336 + 16);
                }
                *(_QWORD *)v336 = v318;
                if (v318)
                {
                  v340 = *((_QWORD *)v318 + 1);
                  v338 = v318 + 8;
                  v339 = v340;
                  v341 = v335 + 32 * v320;
                  *(_QWORD *)(v341 + 8) = v340;
                  if (v340)
                    *(_QWORD *)(v339 + 16) = v341 + 8;
                  *(_QWORD *)(v341 + 16) = v338;
                  *v338 = v336;
                }
                if (v676 != v678)
                  free(v676);
                goto LABEL_453;
              }
            }
            if (v319 == 61)
            {
              v320 = 1;
              goto LABEL_475;
            }
            if (v306 && (v319 - 66) > 0xFFFFFFFD)
            {
              v320 = 0;
              goto LABEL_475;
            }
            v602 = "Unexpected instruction";
LABEL_808:
            llvm::report_fatal_error((llvm *)v602, (const char *)1);
          }
          v630 = v309;
          v321 = v292[1].u8[0];
          v322 = *(uint64_t **)(*(_QWORD *)v292 + 24);
          v624 = *(unsigned __int8 *)(v122 + 208);
          if (*(_BYTE *)(v122 + 210))
          {
            v323 = v122;
            v324 = *(unsigned __int8 *)(v122 + 217);
            v325 = *(unsigned __int8 *)(v323 + 218);
            v326 = *(unsigned __int8 *)(v323 + 209);
            sub_1C4773D54((uint64_t)&v676, (uint64_t)v322, 0, 0, 0);
            v327 = *(uint64_t **)(*(_QWORD *)(v680 + 56) + 40);
            v328 = *(_QWORD *)(v323 + 176);
            v695 = 257;
            v329 = sub_1C4773E38((uint64_t *)&v676, 49, v294, v328, (uint64_t)&v693);
            if (*(_BYTE *)(v323 + 211))
              v330 = 156;
            else
              v330 = 155;
            v331 = llvm::Intrinsic::getDeclaration(v327, v330, 0, 0);
            v332 = v331;
            if (v331)
              v333 = *(uint64_t ***)(v331 + 24);
            else
              v333 = 0;
            v342 = v630 + 16 * (v321 != 0) + ((v324 << 24) | (v624 << 25) | (v325 << 16) | (32 * v326));
            v122 = v632;
            v671.__r_.__value_.__r.__words[0] = *(_QWORD *)(v632 + 472);
            v671.__r_.__value_.__l.__size_ = (std::string::size_type)v329;
            v671.__r_.__value_.__r.__words[2] = (std::string::size_type)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v632 + 192), v342, 0);
            v695 = 257;
            sub_1C4774778((uint64_t *)&v676, v333, v332, (uint64_t *)&v671, 3, (uint64_t)&v693, 0);
            if (v676 != v678)
              free(v676);
            goto LABEL_451;
          }
          v612 = v321 != 0;
          v610 = *(_BYTE *)(v122 + 209);
          sub_1C4773D54((uint64_t)&v676, (uint64_t)v322, 0, 0, 0);
          __p = 0;
          v343 = *(_QWORD *)(v122 + 168);
          v695 = 257;
          v344 = sub_1C5098D9C((uint64_t *)&v676, v294, v343, (uint64_t)&v693);
          __p = v344;
          v345 = *(unsigned int *)(v122 + 220);
          v695 = 257;
          v346 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v344, v345, 0);
          v347 = (unsigned __int8 *)sub_1C506ED1C((uint64_t)&v676, (uint64_t)v344, (uint64_t)v346, (uint64_t)&v693, 0);
          v348 = *(_QWORD *)v682 + 1912;
          v672 = 257;
          v617 = sub_1C4773E38((uint64_t *)&v676, 38, v347, v348, (uint64_t)&v671);
          v608 = (llvm::ConstantInt **)sub_1C58E3BF8(*(_BYTE *)(v122 + 208), (llvm::Type *)*(unsigned int *)(v122 + 220), (uint64_t)&v676, (llvm::ConstantInt **)__p);
          v349 = sub_1C58E46F4(v122, v608, (uint64_t *)&v676);
          v350 = *(_QWORD *)(v122 + 184);
          v672 = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v680 + 56) + 40) + 272, v350);
          v352 = v351;
          v353 = (char *)operator new(0x60uLL);
          v354 = v353;
          *((_QWORD *)v353 + 2) = 0;
          *((_QWORD *)v353 + 3) = v353 + 32;
          v614 = (uint64_t ***)(v353 + 32);
          v695 = 257;
          *((_QWORD *)v353 + 4) = v350;
          *((_QWORD *)v353 + 5) = 0;
          *((_WORD *)v353 + 24) = 60;
          *((_DWORD *)v353 + 13) = 1;
          *(_OWORD *)(v353 + 56) = 0u;
          *(_OWORD *)(v353 + 72) = 0u;
          *((_DWORD *)v353 + 22) = 0;
          *(_QWORD *)v353 = v349;
          *((_QWORD *)v353 + 1) = 0;
          if (v349)
          {
            v357 = *((_QWORD *)v349 + 1);
            v356 = v349 + 8;
            v355 = v357;
            *((_QWORD *)v353 + 1) = v357;
            if (v357)
              *(_QWORD *)(v355 + 16) = v353 + 8;
            *((_QWORD *)v353 + 2) = v356;
            *v356 = v353;
          }
          *((_WORD *)v353 + 25) = 2 * (v352 & 0x3F);
          v353[92] = 1;
          v358 = (uint64_t)(v353 + 32);
          llvm::Value::setName(v614, (uint64_t)&v693);
          (*((void (**)(void **, uint64_t ***, std::string *, uint64_t, char *))*v684 + 2))(v684, v614, &v671, v680, v681);
          if (!(_DWORD)v677)
          {
LABEL_495:
            v695 = 257;
            v359 = (llvm::Value *)sub_1C4774B48((uint64_t)&v676, 33, (uint64_t)v617, v358, (uint64_t)&v693);
            if (*(_BYTE *)(v122 + 217))
            {
              v360 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v617, *(unsigned __int8 *)(v122 + 218), 0);
              v695 = 257;
              v361 = sub_1C4774B48((uint64_t)&v676, 33, (uint64_t)v617, (uint64_t)v360, (uint64_t)&v693);
              v695 = 257;
              v359 = (llvm::Value *)sub_1C4D89BCC((uint64_t)&v676, v359, v361, (uint64_t)&v693);
            }
            v671.__r_.__value_.__r.__words[0] = *(_QWORD *)v122;
            *(_QWORD *)&v693 = 0x186A000000001;
            BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v671, (uint64_t)&v693, 2);
            v363 = sub_1C5EBFBC0(v359, v322, 0, BranchWeights, 0, 0, 0, 0);
            v364 = 0;
            v365 = v363 + 24;
            v680 = *((_QWORD *)v363 + 5);
            v681 = v363 + 24;
            v620 = (uint64_t *)v363;
            v366 = (unsigned __int8 *)*((_QWORD *)v363 + 6);
            *(_QWORD *)&v693 = v366;
            if (v366)
            {
              llvm::MetadataTracking::track((uint64_t)&v693, v366, 2);
              v364 = v693;
            }
            sub_1C4774EF4((uint64_t)&v676, 0, v364);
            if ((_QWORD)v693)
              llvm::MetadataTracking::untrack((uint64_t)&v693, (unsigned __int8 *)v693);
            v367 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 184), 15, 0);
            v695 = 257;
            v368 = (llvm::Value *)sub_1C4774B48((uint64_t)&v676, 34, v358, (uint64_t)v367, (uint64_t)&v693);
            v369 = *(_BYTE *)(v122 + 209) == 0;
            v671.__r_.__value_.__r.__words[0] = *(_QWORD *)v122;
            *(_QWORD *)&v693 = 0x186A000000001;
            v370 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v671, (uint64_t)&v693, 2);
            v618 = sub_1C5EBFBC0(v368, v620, v369, v370, 0, 0, 0, 0);
            v371 = 0;
            v680 = v620[5];
            v681 = v365;
            v372 = (unsigned __int8 *)v620[6];
            *(_QWORD *)&v693 = v372;
            if (v372)
            {
              llvm::MetadataTracking::track((uint64_t)&v693, v372, 2);
              v371 = v693;
            }
            sub_1C4774EF4((uint64_t)&v676, 0, v371);
            if ((_QWORD)v693)
              llvm::MetadataTracking::untrack((uint64_t)&v693, (unsigned __int8 *)v693);
            v373 = __p;
            v695 = 257;
            v374 = llvm::ConstantInt::get(*(llvm::ConstantInt **)__p, 15, 0);
            v375 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)&v676, v373, (uint64_t)v374, (uint64_t)&v693);
            v376 = *(_QWORD *)(v122 + 184);
            v672 = 257;
            v377 = sub_1C4773E38((uint64_t *)&v676, 38, v375, v376, (uint64_t)&v671);
            v378 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v122 + 184), ~(-1 << v630), 0);
            v672 = 257;
            v379 = (llvm::Value *)(*((uint64_t (**)(void **, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))*v683
                                   + 2))(v683, v377, v378, 0, 0);
            if (!v379)
            {
              v695 = 257;
              v380 = (char *)operator new(0x80uLL);
              v381 = v380;
              *(_QWORD *)v380 = 0;
              *((_QWORD *)v380 + 1) = 0;
              *((_QWORD *)v380 + 2) = 0;
              *((_QWORD *)v380 + 5) = 0;
              *((_QWORD *)v380 + 6) = 0;
              *((_QWORD *)v380 + 4) = 0;
              v382 = (llvm::Value ***)(v380 + 32);
              *((_QWORD *)v380 + 8) = *(_QWORD *)v377;
              v379 = (llvm::Value *)(v380 + 64);
              *((_QWORD *)v380 + 3) = v380 + 64;
              *((_QWORD *)v380 + 7) = v380 + 64;
              *((_QWORD *)v380 + 9) = 0;
              v380[80] = 41;
              v380[81] = 0;
              *((_WORD *)v380 + 41) = 0;
              *((_DWORD *)v380 + 21) = 2;
              *((_DWORD *)v380 + 30) = 0;
              *(_OWORD *)(v380 + 104) = 0u;
              *(_OWORD *)(v380 + 88) = 0u;
              *(_QWORD *)v380 = v377;
              v385 = *((_QWORD *)v377 + 1);
              v384 = v377 + 8;
              v383 = v385;
              *((_QWORD *)v380 + 1) = v385;
              if (v385)
                *(_QWORD *)(v383 + 16) = v380 + 8;
              *((_QWORD *)v380 + 2) = v384;
              *v384 = v380;
              if (*((_QWORD *)v380 + 4))
              {
                **((_QWORD **)v380 + 6) = *((_QWORD *)v380 + 5);
                v461 = *((_QWORD *)v380 + 5);
                if (v461)
                  *(_QWORD *)(v461 + 16) = *((_QWORD *)v380 + 6);
              }
              *v382 = v378;
              if (v378)
              {
                v388 = v378[1];
                v387 = (llvm::Value ****)(v378 + 1);
                v386 = v388;
                *((_QWORD *)v380 + 5) = v388;
                if (v388)
                  *((_QWORD *)v386 + 2) = v380 + 40;
                *((_QWORD *)v380 + 6) = v387;
                *v387 = v382;
              }
              llvm::Value::setName((uint64_t ***)v380 + 8, (uint64_t)&v693);
              (*((void (**)(void **, llvm::Value *, std::string *, uint64_t, char *))*v684 + 2))(v684, v379, &v671, v680, v681);
              if (!(_DWORD)v677)
              {
LABEL_514:
                v358 = (uint64_t)v614;
                goto LABEL_515;
              }
              v439 = (char *)v676;
              v440 = (char *)v676 + 16 * v677;
              v441 = (unsigned __int8 **)(v381 + 112);
              while (2)
              {
                v442 = *(_DWORD *)v439;
                v443 = (unsigned __int8 *)*((_QWORD *)v439 + 1);
                if (v443)
                {
                  if (v442)
                    goto LABEL_577;
                  v669.__r_.__value_.__r.__words[0] = *((_QWORD *)v439 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v669, v443, 2);
                  v444 = *v441;
LABEL_581:
                  if (v444)
                    llvm::MetadataTracking::untrack((uint64_t)(v381 + 112), v444);
                  v445 = (unsigned __int8 *)v669.__r_.__value_.__r.__words[0];
                  *v441 = (unsigned __int8 *)v669.__r_.__value_.__r.__words[0];
                  if (v445)
                    llvm::MetadataTracking::retrack((uint64_t)&v669, v445, (uint64_t)(v381 + 112));
                }
                else
                {
                  v444 = *v441;
                  if (*v441 || (v381[87] & 0x20) != 0)
                  {
                    if (!v442)
                    {
                      v669.__r_.__value_.__r.__words[0] = 0;
                      goto LABEL_581;
                    }
LABEL_577:
                    llvm::Value::setMetadata(v379, *(_DWORD *)v439, (llvm::MDNode *)v443);
                  }
                }
                v439 += 16;
                if (v439 == v440)
                  goto LABEL_514;
                continue;
              }
            }
LABEL_515:
            v695 = 257;
            v389 = (llvm::Value *)sub_1C4774B48((uint64_t)&v676, 35, (uint64_t)v379, v358, (uint64_t)&v693);
            v671.__r_.__value_.__r.__words[0] = *(_QWORD *)v122;
            *(_QWORD *)&v693 = 0x186A000000001;
            v390 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v671, (uint64_t)&v693, 2);
            sub_1C5EBFBC0(v389, v620, 0, v390, 0, 0, 0, *((_QWORD *)v618 + 5));
            v391 = 0;
            v680 = v620[5];
            v681 = v365;
            v392 = (unsigned __int8 *)v620[6];
            *(_QWORD *)&v693 = v392;
            if (v392)
            {
              llvm::MetadataTracking::track((uint64_t)&v693, v392, 2);
              v391 = v693;
            }
            sub_1C4774EF4((uint64_t)&v676, 0, v391);
            if ((_QWORD)v693)
              llvm::MetadataTracking::untrack((uint64_t)&v693, (unsigned __int8 *)v693);
            v695 = 257;
            v393 = llvm::ConstantInt::get(*v608, 15, 0);
            v394 = (unsigned __int8 *)sub_1C4773594((uint64_t)&v676, v608, (uint64_t)v393, (uint64_t)&v693);
            v395 = *(_QWORD *)(v122 + 176);
            v695 = 257;
            v396 = sub_1C4773E38((uint64_t *)&v676, 48, v394, v395, (uint64_t)&v693);
            v397 = *(_QWORD *)(v122 + 184);
            v672 = 257;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v680 + 56) + 40) + 272, v397);
            v399 = v398;
            v400 = (char *)operator new(0x60uLL);
            v401 = v400;
            *((_QWORD *)v400 + 2) = 0;
            *((_QWORD *)v400 + 3) = v400 + 32;
            v615 = (uint64_t ***)(v400 + 32);
            v695 = 257;
            *((_QWORD *)v400 + 4) = v397;
            *((_QWORD *)v400 + 5) = 0;
            *((_WORD *)v400 + 24) = 60;
            *((_DWORD *)v400 + 13) = 1;
            *(_OWORD *)(v400 + 56) = 0u;
            *(_OWORD *)(v400 + 72) = 0u;
            *((_DWORD *)v400 + 22) = 0;
            *(_QWORD *)v400 = v396;
            *((_QWORD *)v400 + 1) = 0;
            if (v396)
            {
              v404 = *((_QWORD *)v396 + 1);
              v403 = v396 + 8;
              v402 = v404;
              *((_QWORD *)v400 + 1) = v404;
              if (v404)
                *(_QWORD *)(v402 + 16) = v400 + 8;
              *((_QWORD *)v400 + 2) = v403;
              *v403 = v400;
            }
            *((_WORD *)v400 + 25) = 2 * (v399 & 0x3F);
            v400[92] = 1;
            v405 = (llvm::Value *)(v400 + 32);
            llvm::Value::setName(v615, (uint64_t)&v693);
            (*((void (**)(void **, uint64_t ***, std::string *, uint64_t, char *))*v684 + 2))(v684, v615, &v671, v680, v681);
            if (!(_DWORD)v677)
            {
LABEL_524:
              v695 = 257;
              v406 = (llvm::Value *)sub_1C4774B48((uint64_t)&v676, 33, (uint64_t)v617, (uint64_t)v405, (uint64_t)&v693);
              v671.__r_.__value_.__r.__words[0] = *(_QWORD *)v122;
              *(_QWORD *)&v693 = 0x186A000000001;
              v407 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v671, (uint64_t)&v693, 2);
              sub_1C5EBFBC0(v406, v620, 0, v407, 0, 0, 0, *((_QWORD *)v618 + 5));
              v408 = 0;
              v680 = *((_QWORD *)v618 + 5);
              v681 = v618 + 24;
              v409 = (unsigned __int8 *)*((_QWORD *)v618 + 6);
              *(_QWORD *)&v693 = v409;
              if (v409)
              {
                llvm::MetadataTracking::track((uint64_t)&v693, v409, 2);
                v408 = v693;
              }
              sub_1C4774EF4((uint64_t)&v676, 0, v408);
              if ((_QWORD)v693)
                llvm::MetadataTracking::untrack((uint64_t)&v693, (unsigned __int8 *)v693);
              v410 = *(_DWORD *)(v122 + 48);
              if ((v410 - 3) >= 2)
              {
                if (v410 != 42)
                {
                  v602 = "unsupported architecture";
                  goto LABEL_808;
                }
                v422 = (uint64_t **)(*(_QWORD *)v682 + 1576);
                v668 = *(llvm::ConstantInt **)__p;
                v423 = (llvm::PointerType *)llvm::FunctionType::get(v422, (uint64_t *)&v668, 1, 0);
                v424 = 0;
                v425 = (v630 + 16 * v612 + 32 * v610) + 64;
                do
                {
                  *((_BYTE *)v694 + v424-- + 4) = (v425 % 0xA) | 0x30;
                  v297 = v425 > 9;
                  v425 /= 0xAuLL;
                }
                while (v297);
                sub_1C4E61270(&v669, (char *)v694 + v424 + 5, (char *)v694 + 5, -v424);
                v426 = std::string::insert(&v669, 0, "int3\nnopl ");
                v427 = v426->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v671.__r_.__value_.__l.__data_ = *(_OWORD *)&v426->__r_.__value_.__l.__data_;
                v671.__r_.__value_.__r.__words[2] = v427;
                v426->__r_.__value_.__l.__size_ = 0;
                v426->__r_.__value_.__r.__words[2] = 0;
                v426->__r_.__value_.__r.__words[0] = 0;
                v428 = std::string::append(&v671, "(%rax)");
                v429 = v428->__r_.__value_.__r.__words[2];
                v693 = *(_OWORD *)&v428->__r_.__value_.__l.__data_;
                v694[0] = v429;
                v428->__r_.__value_.__l.__size_ = 0;
                v428->__r_.__value_.__r.__words[2] = 0;
                v428->__r_.__value_.__r.__words[0] = 0;
                if (v694[0] >= 0)
                  v430 = &v693;
                else
                  v430 = (__int128 *)v693;
                if (v694[0] >= 0)
                  v431 = HIBYTE(v694[0]) & 0x7F;
                else
                  v431 = *((_QWORD *)&v693 + 1);
                v419 = llvm::InlineAsm::get(v423, (uint64_t)v430, v431, (uint64_t)"{rdi}", 5, 1, 0, 0, 0);
                if (SHIBYTE(v694[0]) < 0)
                  operator delete((void *)v693);
                v420 = v618;
                if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v671.__r_.__value_.__l.__data_);
                if (SHIBYTE(v669.__r_.__value_.__r.__words[2]) < 0)
                {
                  v421 = (void *)v669.__r_.__value_.__r.__words[0];
LABEL_556:
                  operator delete(v421);
                }
              }
              else
              {
                v411 = (uint64_t **)(*(_QWORD *)v682 + 1576);
                v669.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
                v412 = (llvm::PointerType *)llvm::FunctionType::get(v411, (uint64_t *)&v669, 1, 0);
                v413 = 0;
                v414 = (v630 + 16 * v612 + 32 * v610) | 0x900;
                do
                {
                  *((_BYTE *)v694 + v413-- + 4) = (v414 % 0xA) | 0x30;
                  v297 = v414 > 9;
                  v414 /= 0xAuLL;
                }
                while (v297);
                sub_1C4E61270(&v671, (char *)v694 + v413 + 5, (char *)v694 + 5, -v413);
                v415 = std::string::insert(&v671, 0, "brk #");
                v416 = v415->__r_.__value_.__r.__words[2];
                v693 = *(_OWORD *)&v415->__r_.__value_.__l.__data_;
                v694[0] = v416;
                v415->__r_.__value_.__l.__size_ = 0;
                v415->__r_.__value_.__r.__words[2] = 0;
                v415->__r_.__value_.__r.__words[0] = 0;
                if (v694[0] >= 0)
                  v417 = &v693;
                else
                  v417 = (__int128 *)v693;
                if (v694[0] >= 0)
                  v418 = HIBYTE(v694[0]) & 0x7F;
                else
                  v418 = *((_QWORD *)&v693 + 1);
                v419 = llvm::InlineAsm::get(v412, (uint64_t)v417, v418, (uint64_t)"{x0}", 4, 1, 0, 0, 0);
                v420 = v618;
                if (SHIBYTE(v694[0]) < 0)
                  operator delete((void *)v693);
                if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
                {
                  v421 = (void *)v671.__r_.__value_.__r.__words[0];
                  goto LABEL_556;
                }
              }
              if (v419)
                v432 = *(uint64_t ***)(v419 + 72);
              else
                v432 = 0;
              v695 = 257;
              sub_1C4774778((uint64_t *)&v676, v432, v419, (uint64_t *)&__p, 1, (uint64_t)&v693, 0);
              if (*(_BYTE *)(v122 + 209))
              {
                v433 = v620[5];
                v434 = (uint64_t *)(v420 - 32);
                if (*((_QWORD *)v420 - 4))
                {
                  **((_QWORD **)v420 - 2) = *((_QWORD *)v420 - 3);
                  v435 = *((_QWORD *)v420 - 3);
                  if (v435)
                    *(_QWORD *)(v435 + 16) = *((_QWORD *)v420 - 2);
                }
                *v434 = v433;
                if (v433)
                {
                  v438 = *(_QWORD *)(v433 + 8);
                  v436 = (uint64_t **)(v433 + 8);
                  v437 = v438;
                  *((_QWORD *)v420 - 3) = v438;
                  if (v438)
                    *(_QWORD *)(v437 + 16) = v420 - 24;
                  *((_QWORD *)v420 - 2) = v436;
                  *v436 = v434;
                }
              }
              if (v676 != v678)
                free(v676);
              goto LABEL_451;
            }
            v454 = (char *)v676;
            v455 = (char *)v676 + 16 * v677;
            v456 = (unsigned __int8 **)(v401 + 80);
            while (2)
            {
              v457 = *(_DWORD *)v454;
              v458 = (unsigned __int8 *)*((_QWORD *)v454 + 1);
              if (v458)
              {
                if (v457)
                  goto LABEL_609;
                v669.__r_.__value_.__r.__words[0] = *((_QWORD *)v454 + 1);
                llvm::MetadataTracking::track((uint64_t)&v669, v458, 2);
                v459 = *v456;
LABEL_613:
                if (v459)
                  llvm::MetadataTracking::untrack((uint64_t)(v401 + 80), v459);
                v460 = (unsigned __int8 *)v669.__r_.__value_.__r.__words[0];
                *v456 = (unsigned __int8 *)v669.__r_.__value_.__r.__words[0];
                if (v460)
                  llvm::MetadataTracking::retrack((uint64_t)&v669, v460, (uint64_t)(v401 + 80));
                v122 = v632;
                v405 = (llvm::Value *)v615;
              }
              else
              {
                v459 = *v456;
                if (*v456 || (v401[55] & 0x20) != 0)
                {
                  if (!v457)
                  {
                    v669.__r_.__value_.__r.__words[0] = 0;
                    goto LABEL_613;
                  }
LABEL_609:
                  llvm::Value::setMetadata(v405, *(_DWORD *)v454, (llvm::MDNode *)v458);
                }
              }
              v454 += 16;
              if (v454 == v455)
                goto LABEL_524;
              continue;
            }
          }
          v446 = (char *)v676;
          v447 = (char *)v676 + 16 * v677;
          v448 = (unsigned __int8 **)(v354 + 80);
          while (2)
          {
            v449 = *(_DWORD *)v446;
            v450 = (unsigned __int8 *)*((_QWORD *)v446 + 1);
            if (v450)
            {
              v452 = v448;
              if (v449)
                goto LABEL_592;
              v669.__r_.__value_.__r.__words[0] = *((_QWORD *)v446 + 1);
              llvm::MetadataTracking::track((uint64_t)&v669, v450, 2);
              v451 = *v452;
LABEL_597:
              if (v451)
                llvm::MetadataTracking::untrack((uint64_t)v452, v451);
              v453 = (unsigned __int8 *)v669.__r_.__value_.__r.__words[0];
              *v452 = (unsigned __int8 *)v669.__r_.__value_.__r.__words[0];
              if (v453)
                llvm::MetadataTracking::retrack((uint64_t)&v669, v453, (uint64_t)v452);
              v122 = v632;
LABEL_593:
              v448 = v452;
            }
            else
            {
              v451 = *v448;
              if (*v448 || (v354[55] & 0x20) != 0)
              {
                v452 = v448;
                if (!v449)
                {
                  v669.__r_.__value_.__r.__words[0] = 0;
                  goto LABEL_597;
                }
LABEL_592:
                llvm::Value::setMetadata((llvm::Value *)v614, *(_DWORD *)v446, (llvm::MDNode *)v450);
                goto LABEL_593;
              }
            }
            v446 += 16;
            v358 = (uint64_t)v614;
            if (v446 == v447)
              goto LABEL_495;
            continue;
          }
        }
        v574 = (char *)v636;
        v575 = (char *)v636 + 16 * v637;
        v576 = (unsigned __int8 **)(v172 + 80);
        while (2)
        {
          v577 = *(_DWORD *)v574;
          v578 = (unsigned __int8 *)*((_QWORD *)v574 + 1);
          if (v578)
          {
            if (v577)
              goto LABEL_751;
            *(_QWORD *)&v693 = *((_QWORD *)v574 + 1);
            llvm::MetadataTracking::track((uint64_t)&v693, v578, 2);
            v579 = *v576;
LABEL_755:
            if (v579)
              llvm::MetadataTracking::untrack((uint64_t)(v172 + 80), v579);
            v580 = (unsigned __int8 *)v693;
            *v576 = (unsigned __int8 *)v693;
            if (v580)
              llvm::MetadataTracking::retrack((uint64_t)&v693, v580, (uint64_t)(v172 + 80));
            v122 = v632;
          }
          else
          {
            v579 = *v576;
            if (*v576 || (v172[55] & 0x20) != 0)
            {
              if (!v577)
              {
                *(_QWORD *)&v693 = 0;
                goto LABEL_755;
              }
LABEL_751:
              llvm::Value::setMetadata((llvm::Value *)v173, *(_DWORD *)v574, (llvm::MDNode *)v578);
            }
          }
          v574 += 16;
          if (v574 == v575)
            goto LABEL_316;
          continue;
        }
      }
    }
    if (!v154)
      goto LABEL_305;
    goto LABEL_361;
  }
LABEL_416:
  v284 = v655;
  if (v655 == v654)
  {
    v285 = 4;
    v284 = v654;
    goto LABEL_420;
  }
  if (v655)
  {
    v285 = 5;
LABEL_420:
    (*(void (**)(void))(*v284 + 8 * v285))();
  }
  sub_1C62B1678((uint64_t)v646);
  if (v656 != v658)
    free(v656);
  if (v659 != v661)
    free(v659);
  if (v662 != v664)
    free(v662);
  return v8;
}

uint64_t sub_1C58E341C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C58DD218(v0, 0, 0, 0);
}

void sub_1C58E3450(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E817E4B8;
  sub_1C58E36F4(a1 + 4, 0);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C58E3484(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E817E4B8;
  sub_1C58E36F4(a1 + 4, 0);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C58E34CC()
{
  return "HWAddressSanitizer";
}

uint64_t sub_1C58E34DC(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_1C58DD4E4(v4, a2, *(_BYTE *)(a1 + 40), *(_BYTE *)(a1 + 41), 0);
  sub_1C58E36F4((uint64_t *)(a1 + 32), v4);
  return 1;
}

uint64_t sub_1C58E3544(uint64_t a1)
{
  sub_1C58E36F4((uint64_t *)(a1 + 32), 0);
  return 0;
}

void *sub_1C58E3564(uint64_t a1, uint64_t a2)
{
  if (!word_1ED818630)
  {
    if (*(_BYTE *)(a1 + 42))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (byte_1ED8186A8)
LABEL_3:
    sub_1C4771E64(a2, a2, (uint64_t)&llvm::StackSafetyGlobalInfoWrapperPass::ID);
LABEL_4:
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

BOOL sub_1C58E35DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  void *__p;
  char v17;
  int v18;

  v4 = *(_QWORD *)(a2 + 40) + 216;
  v15 = 260;
  v14[0] = v4;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v14);
  if ((v18 != 42 || byte_1EF8F5458 == 0) && byte_1ED8185E8 != 0)
  {
    if (word_1ED818630)
    {
      if (!byte_1ED8186A8)
        goto LABEL_15;
    }
    else if (*(_BYTE *)(a1 + 42))
    {
      goto LABEL_15;
    }
    v8 = **(void ****)(a1 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
    }
    while (v9 != &llvm::StackSafetyGlobalInfoWrapperPass::ID);
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v7 + 16) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::StackSafetyGlobalInfoWrapperPass::ID)+ 32;
  }
LABEL_15:
  v10 = *(_QWORD *)(a1 + 32);
  v13 = a1;
  v14[0] = a1;
  v11 = sub_1C58DF4B8(v10, a2, sub_1C58E3748, (uint64_t)v14, sub_1C58E3794, (uint64_t)&v13);
  if (v17 < 0)
    operator delete(__p);
  return v11;
}

uint64_t *sub_1C58E36F4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t sub_1C58E3748(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = **(void ****)(*(_QWORD *)a1 + 8);
  do
  {
    v2 = *v1;
    v1 += 2;
  }
  while (v2 != &llvm::DominatorTreeWrapperPass::ID);
  return (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v1 - 1) + 96))(*(v1 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32;
}

uint64_t sub_1C58E3794(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = **(void ****)(*(_QWORD *)a1 + 8);
  do
  {
    v2 = *v1;
    v1 += 2;
  }
  while (v2 != &llvm::PostDominatorTreeWrapperPass::ID);
  return (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v1 - 1) + 96))(*(v1 - 1), &llvm::PostDominatorTreeWrapperPass::ID)+ 32;
}

void sub_1C58E37E0(uint64_t *a1, llvm::GlobalObject *a2)
{
  uint64_t v3;
  size_t *inserted;

  v3 = *a1;
  inserted = llvm::Module::getOrInsertComdat(*(_QWORD *)(*a1 + 8), "hwasan.module_ctor", 0x12uLL);
  llvm::GlobalObject::setComdat(a2, (llvm::Comdat *)inserted);
  sub_1C5F50894("llvm.global_ctors", *(_QWORD *)(v3 + 8), (uint64_t)a2, 0, a2);
}

llvm::UndefValue *sub_1C58E3838(uint64_t *a1)
{
  uint64_t v1;
  _DWORD *v2;
  llvm::UndefValue *v3;
  uint64_t v4;
  llvm::PointerType *v5;
  uint64_t **v6;
  llvm::UndefValue *v8[4];
  __int16 v9;

  v1 = *a1;
  v2 = operator new(0x78uLL);
  v3 = (llvm::UndefValue *)(v2 + 8);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(llvm::PointerType **)(v1 + 168);
  v8[0] = (llvm::UndefValue *)"__hwasan_tls";
  v9 = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v2 + 8), v4, v5, 0, 0, 0, (uint64_t)v8, 0, 3, 0, 0);
  v6 = *(uint64_t ***)(v1 + 8);
  v8[0] = v3;
  sub_1C5F50CB4(v6, "llvm.compiler.used", 0x12uLL, v8, 1);
  return v3;
}

void sub_1C58E38F0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58E3904(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817E558;
  result[1] = v3;
  return result;
}

uint64_t sub_1C58E3938(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817E558;
  a2[1] = v2;
  return result;
}

unint64_t sub_1C58E3954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  const llvm::AllocaInst *v11;
  llvm::StackSafetyGlobalInfo *v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(unsigned __int8 *)(v4 + 8);
  if (v5 > 0x11)
  {
LABEL_14:
    if ((v5 & 0xFE) != 0x12 && v5 != 21)
      return 0;
LABEL_12:
    result = llvm::Type::isSizedDerivedType(v4, 0);
    if (!(_DWORD)result)
      return result;
    goto LABEL_3;
  }
  if (((1 << v5) & 0xAC7F) == 0)
  {
    if (((1 << v5) & 0x30000) != 0)
      goto LABEL_12;
    goto LABEL_14;
  }
LABEL_3:
  if (*(_BYTE *)(*(_QWORD *)(a2 - 32) + 16) != 16)
    return 0;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v8 = v7 ? v7 - 24 : 0;
  if (v6 != v8 || (*(_WORD *)(a2 + 18) & 0x40) != 0)
    return 0;
  result = llvm::memtag::getAllocaSizeInBytes((llvm::memtag *)a2, (const llvm::AllocaInst *)a2);
  if (result)
  {
    if ((llvm::isAllocaPromotable((llvm *)a2, v11) & 1) != 0 || (*(_WORD *)(a2 + 18) & 0xC0) != 0)
      return 0;
    v12 = *(llvm::StackSafetyGlobalInfo **)(v3 + 16);
    return !v12 || !llvm::StackSafetyGlobalInfo::isSafe(v12, (const llvm::AllocaInst *)a2);
  }
  return result;
}

BOOL sub_1C58E3A44(uint64_t a1, const llvm::Instruction *a2, llvm::Value *this)
{
  uint64_t v6;
  unsigned int v7;
  _BOOL8 result;
  llvm::StackSafetyGlobalInfo *v9;

  v6 = *(_QWORD *)this;
  v7 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v7 & 0xFE) == 0x12)
  {
    v6 = **(_QWORD **)(v6 + 16);
    v7 = *(_DWORD *)(v6 + 8);
  }
  if ((v7 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
  result = 1;
  if (v7 <= 0xFF && !llvm::Value::isSwiftError(this))
  {
    if (!llvm::findAllocaForValue(this, 0))
      return 0;
    if (*(_BYTE *)(a1 + 214))
    {
      v9 = *(llvm::StackSafetyGlobalInfo **)(a1 + 16);
      if (!v9 || !llvm::StackSafetyGlobalInfo::stackAccessIsSafe(v9, a2))
        return 0;
    }
  }
  return result;
}

uint64_t sub_1C58E3AF8(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t Declaration;
  uint64_t *v9;
  unsigned __int8 *Impl;
  uint64_t **v11;
  _QWORD v13[4];
  __int16 v14;
  uint64_t v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(a2[6] + 56) + 40), 254, (uint64_t *)(a1 + 168), 1);
  v9 = *(uint64_t **)a1;
  v13[0] = llvm::MDString::get(*(uint64_t **)a1, a3, a4);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v9, v13, 1, 0, 1);
  v15[0] = llvm::MetadataAsValue::get(*(uint64_t **)a1, Impl);
  if (Declaration)
    v11 = *(uint64_t ***)(Declaration + 24);
  else
    v11 = 0;
  v14 = 257;
  return sub_1C4774778(a2, v11, Declaration, v15, 1, (uint64_t)v13, 0);
}

uint64_t sub_1C58E3BF8(char a1, llvm::Type *a2, uint64_t a3, llvm::ConstantInt **a4)
{
  llvm::ConstantInt *v7;
  uint64_t v8;
  llvm::Value **v9;
  llvm::Value **v11;
  _BYTE v12[32];
  __int16 v13;

  v7 = *a4;
  v8 = 255 << (char)a2;
  if (a1)
  {
    v9 = llvm::ConstantInt::get(v7, v8, 0);
    v13 = 257;
    return sub_1C4773594(a3, a4, (uint64_t)v9, (uint64_t)v12);
  }
  else
  {
    v11 = llvm::ConstantInt::get(v7, ~v8, 0);
    v13 = 257;
    return sub_1C4D89BCC(a3, a4, (uint64_t)v11, (uint64_t)v12);
  }
}

uint64_t sub_1C58E3C88(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  llvm::PointerType *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v9[4];
  __int16 v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v9[0] = *a3;
  v5 = (llvm::PointerType *)llvm::FunctionType::get(a1, v9, 1, 0);
  v6 = llvm::InlineAsm::get(v5, (uint64_t)"", 0, (uint64_t)"=r,0", 4, 0, 0, 0, 0);
  if (v6)
    v7 = *(uint64_t ***)(v6 + 72);
  else
    v7 = 0;
  v11[0] = (uint64_t)a3;
  v9[0] = (uint64_t)".hwasan.shadow";
  v10 = 259;
  return sub_1C4774778(a2, v7, v6, v11, 1, (uint64_t)v9, 0);
}

unsigned __int8 *sub_1C58E3D64(_QWORD *a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;

  v4 = (uint64_t **)a1[56];
  v5 = a1[57];
  v11 = 257;
  v6 = (unsigned __int8 *)sub_1C4774778(a2, v4, v5, 0, 0, (uint64_t)v10, 0);
  v7 = a1[21];
  v9[16] = 257;
  return sub_1C4773E38(a2, 39, v6, v7, (uint64_t)v9);
}

llvm::Value **sub_1C58E3DD4(llvm::Value **result, uint64_t *a2, unsigned int a3, llvm::ConstantInt ***a4)
{
  llvm::Value **v4;
  llvm::ConstantInt **v5;
  uint64_t *v6;
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value ***v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = result;
  v5 = *a4;
  v6 = (uint64_t *)a4[1];
  v7 = (llvm::Value *)a4[2];
  if (a3)
  {
    v9 = 8 * a3;
    do
    {
      v10 = *a2;
      result = llvm::ConstantInt::get(v5[25], *v6, 0);
      v11 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
      v12 = -v11;
      v13 = (llvm::Value ***)(v10 - 32 * v11);
      if (*v13)
      {
        v14 = v10 + 32 * v12;
        v16 = *(_QWORD **)(v14 + 16);
        v15 = (_QWORD *)(v14 + 16);
        *v16 = *(v15 - 1);
        v17 = *(v15 - 1);
        if (v17)
          *(_QWORD *)(v17 + 16) = *v15;
      }
      *v13 = result;
      if (result)
      {
        v19 = result[1];
        ++result;
        v18 = v19;
        v20 = v10 + 32 * v12;
        *(_QWORD *)(v20 + 8) = v19;
        if (v19)
          *((_QWORD *)v18 + 2) = v20 + 8;
        *(_QWORD *)(v20 + 16) = result;
        *result = (llvm::Value *)v13;
      }
      v21 = *(_QWORD *)v7;
      v22 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
      v23 = (_QWORD *)(v22 + 32);
      if (*(_QWORD *)(v22 + 32))
      {
        **(_QWORD **)(v22 + 48) = *(_QWORD *)(v22 + 40);
        v24 = *(_QWORD *)(v22 + 40);
        if (v24)
          *(_QWORD *)(v24 + 16) = *(_QWORD *)(v22 + 48);
      }
      *v23 = v21;
      if (v21)
      {
        v27 = *(_QWORD *)(v21 + 8);
        v25 = (_QWORD *)(v21 + 8);
        v26 = v27;
        *(_QWORD *)(v22 + 40) = v27;
        if (v27)
          *(_QWORD *)(v26 + 16) = v22 + 40;
        *(_QWORD *)(v22 + 48) = v25;
        *v25 = v23;
      }
      ++a2;
      v9 -= 8;
    }
    while (v9);
  }
  *v4 = (llvm::Value *)v5;
  v4[1] = (llvm::Value *)v6;
  v4[2] = v7;
  return result;
}

void sub_1C58E3F00(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const llvm::APInt *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  llvm::ConstantInt *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  llvm::GetElementPtrInst *v27;
  uint64_t ***v28;
  char v29;
  char v30;
  char *v31;
  char *v32;
  uint64_t ****v33;
  llvm::Value *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t *****v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  llvm::GetElementPtrInst *v43;
  unsigned __int8 *v44;
  uint64_t ***v45;
  char v46;
  char v47;
  char *v48;
  char *v49;
  llvm::Value *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t **v53;
  _QWORD *v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 **v59;
  int v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 **v67;
  int v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 **v74;
  unsigned __int8 **v75;
  unsigned __int8 **v76;
  _BYTE v77[32];
  __int16 v78;
  unint64_t v79;
  unsigned int v80;
  __int16 v81;
  unsigned __int8 *v82;
  uint64_t v83[4];
  __int16 v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v9 = (a5 + (1 << *(_DWORD *)(a1 + 136)) - 1) & -(1 << *(_DWORD *)(a1 + 136));
  if (*(_BYTE *)(a1 + 211))
    v10 = a5;
  else
    v10 = (a5 + (1 << *(_DWORD *)(a1 + 136)) - 1) & -(1 << *(_DWORD *)(a1 + 136));
  v11 = **(_QWORD **)(a2 + 64) + 1912;
  v81 = 257;
  v12 = (uint64_t *)sub_1C4773E38((uint64_t *)a2, 38, a4, v11, (uint64_t)&v79);
  if (*(_BYTE *)(a1 + 213))
  {
    v13 = *(uint64_t ***)(a1 + 432);
    v14 = *(_QWORD *)(a1 + 440);
    v15 = *(_QWORD *)(a1 + 176);
    v81 = 257;
    v83[0] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, a3, v15, (uint64_t)&v79);
    v83[1] = (uint64_t)v12;
    v83[2] = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 168), v9, 0);
    v78 = 257;
    sub_1C4774778((uint64_t *)a2, v13, v14, v83, 3, (uint64_t)v77, 0);
    return;
  }
  v16 = v10 >> *(_DWORD *)(a1 + 136);
  v17 = *(_QWORD *)(a1 + 168);
  v81 = 257;
  v18 = sub_1C5098D9C((uint64_t *)a2, a3, v17, (uint64_t)&v79);
  v20 = sub_1C58E46F4(a1, (llvm::ConstantInt **)v18, (uint64_t *)a2);
  if (v16)
  {
    v21 = **(_QWORD **)(a2 + 64);
    v22 = *(llvm::ConstantInt **)(v21 + 1984);
    v23 = *(unsigned int *)(v21 + 1992);
    v80 = v23 >> 8;
    if (v23 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v79, v16, 0);
    }
    else
    {
      if (v23 <= 0xFF)
        v24 = 0;
      else
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
      v79 = v24 & v16;
    }
    v25 = (uint64_t *)llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v79, v19);
    if (v80 >= 0x41 && v79)
      MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
    llvm::IRBuilderBase::CreateMemSet(a2, (llvm::Value *)v20, (uint64_t)v12, v25, 256, 0, 0, 0, 0);
  }
  if (v10 != v9)
  {
    v26 = (uint64_t *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 184), v10 & ~(-1 << *(_DWORD *)(a1 + 136)), 0);
    v27 = *(llvm::GetElementPtrInst **)(a1 + 184);
    v78 = 257;
    v28 = sub_1C48678B0((uint64_t *)a2, v27, v20, v16, (uint64_t)v77);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40) + 272, *v26);
    v30 = v29;
    v31 = (char *)operator new(0x80uLL);
    v32 = v31;
    *((_DWORD *)v31 + 21) = *((_DWORD *)v31 + 21) & 0x38000000 | 2;
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 2) = 0;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 5) = 0;
    *((_QWORD *)v31 + 6) = 0;
    *((_QWORD *)v31 + 4) = 0;
    v33 = (uint64_t ****)(v31 + 32);
    *((_QWORD *)v31 + 8) = **(_QWORD **)*v26 + 1576;
    v34 = (llvm::Value *)(v31 + 64);
    *((_QWORD *)v31 + 3) = v31 + 64;
    *((_QWORD *)v31 + 7) = v31 + 64;
    *((_QWORD *)v31 + 9) = 0;
    v31[80] = 61;
    v31[81] = 0;
    *((_WORD *)v31 + 41) = 0;
    *((_DWORD *)v31 + 21) = 2;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *((_DWORD *)v31 + 30) = 0;
    *(_QWORD *)v31 = v26;
    v37 = v26[1];
    v36 = v26 + 1;
    v35 = v37;
    *((_QWORD *)v31 + 1) = v37;
    if (v37)
      *(_QWORD *)(v35 + 16) = v31 + 8;
    *((_QWORD *)v31 + 2) = v36;
    *v36 = v31;
    if (*((_QWORD *)v31 + 4))
    {
      **((_QWORD **)v31 + 6) = *((_QWORD *)v31 + 5);
      v72 = *((_QWORD *)v31 + 5);
      if (v72)
        *(_QWORD *)(v72 + 16) = *((_QWORD *)v31 + 6);
    }
    *v33 = v28;
    if (v28)
    {
      v40 = v28[1];
      v39 = (uint64_t *****)(v28 + 1);
      v38 = v40;
      *((_QWORD *)v31 + 5) = v40;
      if (v40)
        v38[2] = (uint64_t *)(v31 + 40);
      *((_QWORD *)v31 + 6) = v39;
      *v39 = v33;
    }
    *((_WORD *)v31 + 41) = 2 * (v30 & 0x3F);
    v31[124] = 1;
    v81 = 257;
    (*(void (**)(_QWORD, llvm::Value *, unint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 80) + 16))(*(_QWORD *)(a2 + 80), v34, &v79, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));
    v41 = *(unsigned int *)(a2 + 8);
    if (!(_DWORD)v41)
    {
LABEL_23:
      v42 = *(_QWORD *)(a1 + 176);
      v43 = *(llvm::GetElementPtrInst **)(a1 + 184);
      v78 = 257;
      v44 = sub_1C4773E38((uint64_t *)a2, 49, a3, v42, (uint64_t)v77);
      v84 = 257;
      v45 = sub_1C48678B0((uint64_t *)a2, v43, v44, (int)v9 - 1, (uint64_t)v83);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40) + 272, *v12);
      v47 = v46;
      v48 = (char *)operator new(0x80uLL);
      v49 = v48;
      *((_DWORD *)v48 + 21) = *((_DWORD *)v48 + 21) & 0x38000000 | 2;
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 2) = 0;
      *((_QWORD *)v48 + 1) = 0;
      *((_QWORD *)v48 + 5) = 0;
      *((_QWORD *)v48 + 6) = 0;
      *((_QWORD *)v48 + 4) = 0;
      *((_QWORD *)v48 + 8) = **(_QWORD **)*v12 + 1576;
      v50 = (llvm::Value *)(v48 + 64);
      *((_QWORD *)v48 + 3) = v48 + 64;
      *((_QWORD *)v48 + 7) = v48 + 64;
      *((_QWORD *)v48 + 9) = 0;
      v48[80] = 61;
      v48[81] = 0;
      *((_DWORD *)v48 + 21) = 2;
      *(_OWORD *)(v48 + 88) = 0u;
      *(_OWORD *)(v48 + 104) = 0u;
      *((_DWORD *)v48 + 30) = 0;
      v51 = v12 + 1;
      v52 = v12[1];
      *(_QWORD *)v48 = v12;
      *((_QWORD *)v48 + 1) = v52;
      if (v52)
        *(_QWORD *)(v52 + 16) = v48 + 8;
      *((_QWORD *)v48 + 2) = v51;
      *v51 = v48;
      *((_QWORD *)v48 + 4) = v45;
      if (v45)
      {
        v55 = v45[1];
        v54 = v45 + 1;
        v53 = v55;
        *((_QWORD *)v48 + 5) = v55;
        if (v55)
          v53[2] = (uint64_t *)(v48 + 40);
        *((_QWORD *)v48 + 6) = v54;
        *v54 = v48 + 32;
      }
      *((_WORD *)v48 + 41) = 2 * (v47 & 0x3F);
      v48[124] = 1;
      v81 = 257;
      (*(void (**)(_QWORD, llvm::Value *, unint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 80) + 16))(*(_QWORD *)(a2 + 80), v50, &v79, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));
      v56 = *(unsigned int *)(a2 + 8);
      if (!(_DWORD)v56)
        return;
      v65 = *(_QWORD *)a2;
      v66 = *(_QWORD *)a2 + 16 * v56;
      v67 = (unsigned __int8 **)(v49 + 112);
      while (1)
      {
        v68 = *(_DWORD *)v65;
        v69 = *(unsigned __int8 **)(v65 + 8);
        if (v69)
        {
          if (!v68)
          {
            v82 = *(unsigned __int8 **)(v65 + 8);
            llvm::MetadataTracking::track((uint64_t)&v82, v69, 2);
            v70 = *v67;
            goto LABEL_57;
          }
        }
        else
        {
          v70 = *v67;
          if (!*v67 && (v49[87] & 0x20) == 0)
            goto LABEL_54;
          if (!v68)
          {
            v82 = 0;
LABEL_57:
            if (v70)
              llvm::MetadataTracking::untrack((uint64_t)(v49 + 112), v70);
            v71 = v82;
            *v67 = v82;
            if (v71)
              llvm::MetadataTracking::retrack((uint64_t)&v82, v71, (uint64_t)(v49 + 112));
            goto LABEL_54;
          }
        }
        llvm::Value::setMetadata(v50, *(_DWORD *)v65, (llvm::MDNode *)v69);
LABEL_54:
        v65 += 16;
        if (v65 == v66)
          return;
      }
    }
    v57 = *(_QWORD *)a2;
    v58 = *(_QWORD *)a2 + 16 * v41;
    v59 = (unsigned __int8 **)(v32 + 112);
    while (1)
    {
      v60 = *(_DWORD *)v57;
      v61 = *(unsigned __int8 **)(v57 + 8);
      if (v61)
      {
        if (!v60)
        {
          v83[0] = *(_QWORD *)(v57 + 8);
          v74 = v59;
          llvm::MetadataTracking::track((uint64_t)v83, v61, 2);
          v59 = v74;
          v62 = *v74;
          goto LABEL_42;
        }
      }
      else
      {
        v62 = *v59;
        if (!*v59 && (v32[87] & 0x20) == 0)
          goto LABEL_39;
        if (!v60)
        {
          v83[0] = 0;
LABEL_42:
          if (v62)
          {
            v76 = v59;
            llvm::MetadataTracking::untrack((uint64_t)v59, v62);
            v59 = v76;
          }
          v64 = (unsigned __int8 *)v83[0];
          *v59 = (unsigned __int8 *)v83[0];
          if (v64)
          {
            v75 = v59;
            llvm::MetadataTracking::retrack((uint64_t)v83, v64, (uint64_t)v59);
            v59 = v75;
          }
          goto LABEL_39;
        }
      }
      v73 = v58;
      v63 = v59;
      llvm::Value::setMetadata(v34, *(_DWORD *)v57, (llvm::MDNode *)v61);
      v59 = v63;
      v58 = v73;
LABEL_39:
      v57 += 16;
      if (v57 == v58)
        goto LABEL_23;
    }
  }
}

void sub_1C58E4568(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  _QWORD *v9;
  llvm::Value **v10;
  unsigned __int8 *v11[4];
  __int16 v12;

  v4 = *(uint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4[6] = *(_QWORD *)(a2 + 40);
  v4[7] = a2 + 24;
  v5 = *(unsigned __int8 **)(a2 + 48);
  v11[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v11, v5, 2);
    v6 = v11[0];
  }
  else
  {
    v6 = 0;
  }
  sub_1C4774EF4((uint64_t)v4, 0, (uint64_t)v6);
  if (v11[0])
    llvm::MetadataTracking::untrack((uint64_t)v11, v11[0]);
  if (byte_1ED818828)
  {
    v7 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v3 + 168), 0, 0);
  }
  else
  {
    v8 = *(uint64_t **)a1;
    if (byte_1ED8188E8)
    {
      v7 = sub_1C58E3D64((_QWORD *)v3, *(uint64_t **)a1);
    }
    else
    {
      v9 = **(_QWORD ***)(a1 + 16);
      v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v3 + 168), *(_QWORD *)(v3 + 224), 0);
      v12 = 257;
      v7 = sub_1C506EC1C(v8, v9, (uint64_t)v10, (uint64_t)v11);
    }
  }
  sub_1C58E3F00(v3, *(_QWORD *)a1, **(unsigned __int8 ***)(a1 + 24), v7, **(_QWORD **)(a1 + 32));
}

BOOL sub_1C58E4678(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 == a1[1] || v3 == *a1)
    return 0;
  if (*(_BYTE *)(v3 + 16) == 84)
  {
    v4 = *(_QWORD *)(v3 - 32);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 16) && *(_QWORD *)(v4 + 24) == *(_QWORD *)(v3 + 72) && (*(_BYTE *)(v4 + 33) & 0x20) != 0)
        return !llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v3);
    }
  }
  return 1;
}

unsigned __int8 *sub_1C58E46F4(uint64_t a1, llvm::ConstantInt **a2, uint64_t *a3)
{
  uint64_t v6;
  llvm::Value **v7;
  unsigned __int8 *v8;
  llvm::GetElementPtrInst *v9;
  uint64_t *v10;
  uint64_t v12;
  _BYTE v13[32];
  __int16 v14;

  v6 = *(int *)(a1 + 136);
  v14 = 257;
  v7 = llvm::ConstantInt::get(*a2, v6, 0);
  v8 = (unsigned __int8 *)sub_1C506ED1C((uint64_t)a3, (uint64_t)a2, (uint64_t)v7, (uint64_t)v13, 0);
  if (*(_QWORD *)(a1 + 144))
  {
    v9 = *(llvm::GetElementPtrInst **)(a1 + 184);
    v10 = *(uint64_t **)(a1 + 472);
    v14 = 257;
    return (unsigned __int8 *)sub_1C4867B70(a3, v9, v10, (uint64_t)v8, (uint64_t)v13);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 176);
    v14 = 257;
    return sub_1C4773E38(a3, 48, v8, v12, (uint64_t)v13);
  }
}

void sub_1C58E47A4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 112;
        sub_1C62B1704((_QWORD *)v4 - 13);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C58E4818(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string __dst;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_8:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::operator=((std::string *)byte_1EF8F56A8, &__dst);
  byte_1EF8F56E0 = 1;
  std::string::operator=((std::string *)&qword_1EF8F56C8, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

__n128 sub_1C58E48F0(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED818AA8, "hwasan-kernel", 0xDuLL);
  result = *a1;
  xmmword_1ED818AC8 = (__int128)*a1;
  word_1ED818AB2 = (32 * (*a2 & 3)) | word_1ED818AB2 & 0xFF9F;
  v7 = *a3;
  byte_1ED818B28 = **a3;
  byte_1ED818B39 = 1;
  byte_1ED818B38 = *v7;
  return result;
}

uint64_t sub_1C58E4974(uint64_t *a1)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::DominatorTreeAnalysis::Key, a1[1]) + 8;
}

uint64_t sub_1C58E499C(uint64_t *a1)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::PostDominatorTreeAnalysis::Key, a1[1]) + 8;
}

char *sub_1C58E49C4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::HWAddressSanitizerPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_16[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C58E4A7C()
{
  int v1;
  int v2;
  int v3;
  int *v4;
  int v5;
  __n128 v6;

  v6.n128_u64[0] = (unint64_t)"Prefix for memory access callbacks";
  v6.n128_u64[1] = 34;
  v5 = 1;
  v4 = (int *)"__hwasan_";
  sub_1C47AD050((uint64_t)&qword_1EF8F5628, 0, 0);
  *(_QWORD *)&byte_1EF8F56A8[8] = 0;
  *(_QWORD *)byte_1EF8F56A8 = 0;
  *(_QWORD *)&byte_1EF8F56A8[16] = 0;
  qword_1EF8F56C8 = 0;
  qword_1EF8F56D8 = 0;
  qword_1EF8F56D0 = 0;
  qword_1EF8F56C0 = (uint64_t)&unk_1E819E950;
  byte_1EF8F56E0 = 0;
  qword_1EF8F5628 = (uint64_t)&unk_1E819E480;
  qword_1EF8F56E8 = (uint64_t)&unk_1E819E970;
  qword_1EF8F56F0 = (uint64_t)&off_1E7FA8CB8;
  qword_1EF8F5708 = (uint64_t)&qword_1EF8F56F0;
  sub_1C62B1760((__int128 *)&v6, &v5, (const char **)&v4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F5628);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1EF8F5628, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Use prefix for memory intrinsics in KASAN mode";
  v6.n128_u64[1] = 46;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818028, "hwasan-kernel-mem-intrinsic-prefix", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818028, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument reads and writes with callbacks";
  v6.n128_u64[1] = 42;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8180E8, "hwasan-instrument-with-calls", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8180E8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument read instructions";
  v6.n128_u64[1] = 28;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8181A8, "hwasan-instrument-reads", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8181A8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument write instructions";
  v6.n128_u64[1] = 29;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818268, "hwasan-instrument-writes", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818268, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument atomic instructions (rmw, cmpxchg)";
  v6.n128_u64[1] = 45;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818328, "hwasan-instrument-atomics", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818328, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument byval arguments";
  v6.n128_u64[1] = 26;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8183E8, "hwasan-instrument-byval", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8183E8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Enable recovery mode (continue-after-error).";
  v6.n128_u64[1] = 44;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8184A8, "hwasan-recover", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8184A8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument stack (allocas)";
  v6.n128_u64[1] = 26;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818568, "hwasan-instrument-stack", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818568, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v1) = 1;
  v4 = &v1;
  v2 = 0;
  v3 = 1;
  v6.n128_u64[0] = (unint64_t)"Use Stack Safety analysis results";
  v6.n128_u64[1] = 33;
  sub_1C62B17CC(&v5, (char **)&v4, &v3, &v6, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED818628, &dword_1C475E000);
  v5 = 1;
  v4 = &v3;
  v2 = 2;
  v3 = 3;
  v6.n128_u64[0] = (unint64_t)"How many lifetime ends to handle for a single alloca.";
  v6.n128_u64[1] = 53;
  v1 = 0;
  sub_1C62B1930(&v5, &v4, &v2, &v6, &v1);
  __cxa_atexit((void (*)(void *))sub_1C620BA6C, &qword_1EF8F5498, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"detect use after scope within function";
  v6.n128_u64[1] = 38;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8186E8, "hwasan-use-after-scope", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8186E8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Clear alloca tags before returning from the function to allow non-instrumented and "
                                     "instrumented function calls mix. When set to false, allocas are retagged before ret"
                                     "urning from the function to detect use after return.";
  v6.n128_u64[1] = 218;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8187A8, "hwasan-uar-retag-to-zero", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8187A8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"generate new tags with runtime library calls";
  v6.n128_u64[1] = 44;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818868, "hwasan-generate-tags-with-calls", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818868, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Instrument globals";
  v6.n128_u64[1] = 18;
  v5 = 1;
  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  sub_1C62B1A94(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED818928, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"don't report bad accesses via pointers with this tag";
  v6.n128_u64[1] = 52;
  v5 = 1;
  v3 = -1;
  v4 = &v3;
  sub_1C61F8494((llvm::cl::Option *)algn_1ED8189E8, "hwasan-match-all-tag", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, algn_1ED8189E8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Enable KernelHWAddressSanitizer instrumentation";
  v6.n128_u64[1] = 47;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C62B1BDC(&v6, &v5, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED818AA8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"HWASan shadow mapping offset [EXPERIMENTAL]";
  v6.n128_u64[1] = 43;
  v5 = 1;
  v3 = 0;
  v4 = &v3;
  sub_1C62B1C80((__int128 *)&v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &qword_1EF8F5560, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Access dynamic shadow through an ifunc global on platforms that support this";
  v6.n128_u64[1] = 76;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818B68, "hwasan-with-ifunc", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818B68, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Access dynamic shadow through an thread-local pointer on platforms that support this";
  v6.n128_u64[1] = 84;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818C28, "hwasan-with-tls", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818C28, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Record stack frames with tagged allocations in a thread-local ring buffer";
  v6.n128_u64[1] = 73;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818CE8, "hwasan-record-stack-history", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818CE8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument memory intrinsics";
  v6.n128_u64[1] = 28;
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED818DA8, "hwasan-instrument-mem-intrinsics", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818DA8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument landing pads";
  v6.n128_u64[1] = 23;
  v5 = 1;
  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  sub_1C62B1D60(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED818E68, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"use short granules in allocas and outlined checks";
  v6.n128_u64[1] = 49;
  v5 = 1;
  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  sub_1C62B1EA8(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED818F28, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"instrument personality functions";
  v6.n128_u64[1] = 32;
  v5 = 1;
  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  sub_1C62B1FF0(&v6, &v5, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1EF8F5258, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"inline all checks";
  v6.n128_u64[1] = 17;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)algn_1EF8F5318, "hwasan-inline-all-checks", &v6, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, algn_1EF8F5318, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Use page aliasing in HWASan";
  v6.n128_u64[1] = 27;
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F53D8, "hwasan-experimental-use-page-aliases", &v6, &v5, (_BYTE **)&v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F53D8, &dword_1C475E000);
}

void llvm::computeLTOCacheKey(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, size_t a10, uint64_t a11)
{
  char v18;
  BOOL v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  char v33;
  _BYTE *v34;
  unint64_t v35;
  char v36;
  _BYTE *v37;
  unint64_t v38;
  char v39;
  _BYTE *v40;
  unint64_t v41;
  char v42;
  int v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  int v48;
  _BYTE *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  size_t v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int i;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  std::string::size_type *v81;
  std::string::size_type *v82;
  std::string::size_type v83;
  uint64_t v84;
  uint64_t v85;
  size_t ***v86;
  size_t ***v87;
  uint64_t v88;
  size_t **j;
  size_t ***v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  size_t ***v96;
  size_t ***v97;
  size_t **v98;
  size_t *v99;
  size_t *v100;
  BOOL v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  size_t ***v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  size_t *v116;
  unsigned __int8 *v117;
  size_t v118;
  size_t v119;
  int v120;
  size_t v121;
  unsigned __int8 *v122;
  int v123;
  int v124;
  int k;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *m;
  uint64_t v131;
  uint64_t v132;
  std::string::size_type v133;
  _QWORD *v134;
  std::string::size_type v135;
  _QWORD *n;
  std::string::size_type v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  size_t **ii;
  uint64_t v142;
  size_t *v143;
  _QWORD *jj;
  uint64_t v145;
  size_t *v146;
  BOOL v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  char v153;
  int v154;
  _BYTE *v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  char v159;
  int v160;
  _BYTE *v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  std::string::size_type *v165;
  std::string::size_type *v166;
  std::string::size_type v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD **v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD **v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD **v181;
  char v182;
  int v183;
  uint64_t v184;
  char v185;
  unint64_t v186;
  char v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  char v192;
  std::string *v193;
  unint64_t size;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  size_t ***v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *__s1a;
  _QWORD v205[4];
  _QWORD **v206;
  _QWORD *v207[2];
  _QWORD **v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD **v211;
  _QWORD *v212;
  uint64_t v213;
  void *__p;
  char *v215;
  char *v216;
  __int128 v217;
  int v218;
  llvm::SHA1 *v219;
  _DWORD v220[16];
  __int128 v221;
  uint64_t v222;
  char v223;
  _QWORD v224[2];
  char v225;
  std::string v226;
  __int16 v227;
  unint64_t v228[2];
  char v229;
  size_t v230;
  uint64_t **v231;
  uint64_t v232;
  uint64_t **v233;
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v221 = xmmword_1C85F4BB0;
  v222 = 3285377520;
  v223 = 0;
  llvm::SHA1::update(v220, "32023.334", 9uLL);
  v219 = (llvm::SHA1 *)v220;
  v18 = *(_BYTE *)(a2 + 23);
  v19 = v18 < 0;
  if (v18 >= 0)
    v20 = (_BYTE *)a2;
  else
    v20 = *(_BYTE **)a2;
  v21 = v18 & 0x7F;
  if (v19)
    v22 = *(_QWORD *)(a2 + 8);
  else
    v22 = v21;
  llvm::SHA1::update(v220, v20, v22);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  v23 = *(_DWORD *)(a2 + 56);
  LODWORD(v226.__r_.__value_.__l.__data_) = v23 & 1;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = (v23 >> 1) & 1;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = (v23 >> 2) & 1;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 132);
  llvm::SHA1::update(v220, &v226, 4uLL);
  v24 = *(_QWORD *)(a2 + 328);
  v25 = *(_QWORD *)(a2 + 336);
  while (v24 != v25)
  {
    v26 = *(_BYTE *)(v24 + 23);
    v27 = v26 < 0;
    if (v26 >= 0)
      v28 = (_BYTE *)v24;
    else
      v28 = *(_BYTE **)v24;
    v29 = v26 & 0x7F;
    if (v27)
      v30 = *(_QWORD *)(v24 + 8);
    else
      v30 = v29;
    llvm::SHA1::update(v220, v28, v30);
    v226.__r_.__value_.__s.__data_[0] = 0;
    llvm::SHA1::update(v220, &v226, 1uLL);
    v24 += 24;
  }
  if (*(_BYTE *)(a2 + 412))
    v31 = *(_DWORD *)(a2 + 408);
  else
    v31 = -1;
  LODWORD(v226.__r_.__value_.__l.__data_) = v31;
  llvm::SHA1::update(v220, &v226, 4uLL);
  if (*(_BYTE *)(a2 + 420))
    v32 = *(_DWORD *)(a2 + 416);
  else
    v32 = -1;
  LODWORD(v226.__r_.__value_.__l.__data_) = v32;
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 424);
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 428);
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 432);
  llvm::SHA1::update(v220, &v226, 4uLL);
  LODWORD(v226.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(a2 + 438);
  llvm::SHA1::update(v220, &v226, 4uLL);
  v33 = *(_BYTE *)(a2 + 471);
  if (v33 >= 0)
    v34 = (_BYTE *)(a2 + 448);
  else
    v34 = *(_BYTE **)(a2 + 448);
  if (v33 >= 0)
    v35 = v33 & 0x7F;
  else
    v35 = *(_QWORD *)(a2 + 456);
  llvm::SHA1::update(v220, v34, v35);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  v36 = *(_BYTE *)(a2 + 495);
  if (v36 >= 0)
    v37 = (_BYTE *)(a2 + 472);
  else
    v37 = *(_BYTE **)(a2 + 472);
  if (v36 >= 0)
    v38 = v36 & 0x7F;
  else
    v38 = *(_QWORD *)(a2 + 480);
  llvm::SHA1::update(v220, v37, v38);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  v39 = *(_BYTE *)(a2 + 519);
  if (v39 >= 0)
    v40 = (_BYTE *)(a2 + 496);
  else
    v40 = *(_BYTE **)(a2 + 496);
  if (v39 >= 0)
    v41 = v39 & 0x7F;
  else
    v41 = *(_QWORD *)(a2 + 504);
  llvm::SHA1::update(v220, v40, v41);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  v42 = *(_BYTE *)(a2 + 543);
  v43 = v42;
  if (v42 >= 0)
    v44 = (_BYTE *)(a2 + 520);
  else
    v44 = *(_BYTE **)(a2 + 520);
  v45 = v42 & 0x7F;
  if (v43 >= 0)
    v46 = v45;
  else
    v46 = *(_QWORD *)(a2 + 528);
  llvm::SHA1::update(v220, v44, v46);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  v47 = *(_BYTE *)(a2 + 639);
  v48 = v47;
  if (v47 >= 0)
    v49 = (_BYTE *)(a2 + 616);
  else
    v49 = *(_BYTE **)(a2 + 616);
  v50 = v47 & 0x7F;
  if (v48 >= 0)
    v51 = v50;
  else
    v51 = *(_QWORD *)(a2 + 624);
  llvm::SHA1::update(v220, v49, v51);
  v226.__r_.__value_.__s.__data_[0] = 0;
  llvm::SHA1::update(v220, &v226, 1uLL);
  v52 = *(unsigned int *)(a3 + 32);
  v200 = a3;
  v201 = a6;
  v197 = a2;
  v198 = a1;
  v196 = a8;
  if ((_DWORD)v52)
  {
    v53 = 0;
    if (a5)
    {
      v54 = a5;
      v55 = a4;
      do
      {
        v56 = *v55++;
        v53 = 33 * v53 + v56;
        --v54;
      }
      while (v54);
    }
    v57 = *(_QWORD *)(a3 + 24);
    v58 = *(unsigned int *)(a3 + 44);
    v59 = 1;
    for (i = v53; ; i = v61 + v59++)
    {
      v61 = i & (v52 - 1);
      v62 = *(_QWORD **)(v57 + 8 * v61);
      if (v62 != (_QWORD *)-8)
      {
        if (!v62)
          goto LABEL_66;
        if (*(_DWORD *)(v57 + 8 * v52 + 8 + 4 * v61) == v53
          && a5 == *v62
          && (!a5 || !memcmp(a4, (char *)v62 + v58, a5)))
        {
          break;
        }
      }
    }
    if ((_DWORD)v61 != -1)
      v52 = (int)v61;
  }
  else
  {
    v52 = 0;
    v57 = *(_QWORD *)(a3 + 24);
  }
LABEL_66:
  v63 = *(_QWORD *)(v57 + 8 * v52);
  v217 = *(_OWORD *)(v63 + 16);
  v218 = *(_DWORD *)(v63 + 32);
  llvm::SHA1::update(v220, &v217, 0x14uLL);
  __p = 0;
  v215 = 0;
  v216 = 0;
  sub_1C4DB1D18((uint64_t)&__p, *(unsigned int *)(a7 + 8));
  v64 = *(unsigned int *)(a7 + 16);
  v65 = *(_QWORD *)a7 + 8 * v64;
  if (*(_DWORD *)(a7 + 8))
  {
    if ((_DWORD)v64)
    {
      v67 = 8 * v64;
      v66 = *(_QWORD **)a7;
      while ((~*v66 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        ++v66;
        v67 -= 8;
        if (!v67)
          goto LABEL_72;
      }
    }
    else
    {
      v66 = *(_QWORD **)a7;
    }
  }
  else
  {
LABEL_72:
    v66 = (_QWORD *)(*(_QWORD *)a7 + 8 * v64);
  }
  v68 = *(_QWORD *)a7 + 8 * v64;
  v69 = v215;
  while (v66 != (_QWORD *)v68)
  {
    v70 = *(_QWORD *)(*v66 & 0xFFFFFFFFFFFFFFF8);
    if (v69 >= v216)
    {
      v71 = (char *)__p;
      v72 = (v69 - (_BYTE *)__p) >> 3;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61)
LABEL_311:
        abort();
      v74 = v216 - (_BYTE *)__p;
      if ((v216 - (_BYTE *)__p) >> 2 > v73)
        v73 = v74 >> 2;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
        v75 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (v75)
      {
        if (v75 >> 61)
LABEL_312:
          sub_1C4764EE4();
        v76 = (char *)operator new(8 * v75);
      }
      else
      {
        v76 = 0;
      }
      v77 = &v76[8 * v72];
      *(_QWORD *)v77 = v70;
      v78 = v77 + 8;
      while (v69 != v71)
      {
        v79 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        *((_QWORD *)v77 - 1) = v79;
        v77 -= 8;
      }
      __p = v77;
      v215 = v78;
      v216 = &v76[8 * v75];
      if (v71)
        operator delete(v71);
      v69 = v78;
    }
    else
    {
      *(_QWORD *)v69 = v70;
      v69 += 8;
    }
    v215 = v69;
    v80 = v66 + 1;
    v66 = (_QWORD *)v65;
    if (v80 != (_QWORD *)v65)
    {
      v66 = v80;
      while ((~*v66 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        if (++v66 == (_QWORD *)v65)
        {
          v66 = (_QWORD *)v65;
          break;
        }
      }
    }
  }
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v81 = (std::string::size_type *)__p;
  v82 = (std::string::size_type *)v215;
  while (v81 != v82)
  {
    v226.__r_.__value_.__r.__words[0] = 0;
    v83 = *v81++;
    v226.__r_.__value_.__r.__words[0] = v83;
    llvm::SHA1::update(v220, &v226, 8uLL);
  }
  v84 = v201;
  v85 = *(unsigned int *)(v201 + 12);
  if ((_DWORD)v85)
  {
    v86 = (size_t ***)operator new(8 * v85);
    v87 = &v86[v85];
  }
  else
  {
    v86 = 0;
    v87 = 0;
  }
  v88 = *(unsigned int *)(v201 + 8);
  if ((_DWORD)v88)
  {
    for (j = *(size_t ***)v201; ; ++j)
    {
      v91 = !*j || *j + 1 == 0;
      if (!v91)
        break;
    }
  }
  else
  {
    j = *(size_t ***)v201;
  }
  if (j == (size_t **)(*(_QWORD *)v201 + 8 * v88))
  {
    v90 = v86;
  }
  else
  {
    v90 = v86;
    do
    {
      if (v90 >= v87)
      {
        v92 = v90 - v86;
        v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 61)
          goto LABEL_311;
        if (((char *)v87 - (char *)v86) >> 2 > v93)
          v93 = ((char *)v87 - (char *)v86) >> 2;
        if ((unint64_t)((char *)v87 - (char *)v86) >= 0x7FFFFFFFFFFFFFF8)
          v94 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v94 = v93;
        if (v94)
        {
          if (v94 >> 61)
            goto LABEL_312;
          v95 = (char *)operator new(8 * v94);
        }
        else
        {
          v95 = 0;
        }
        v96 = (size_t ***)&v95[8 * v92];
        *v96 = j;
        v97 = v96 + 1;
        while (v90 != v86)
        {
          v98 = *--v90;
          *--v96 = v98;
        }
        v87 = (size_t ***)&v95[8 * v94];
        if (v86)
          operator delete(v86);
        v86 = v96;
        v90 = v97;
        v84 = v201;
      }
      else
      {
        *v90++ = j;
      }
      do
      {
        v100 = j[1];
        ++j;
        v99 = v100;
        if (v100)
          v101 = v99 + 1 == 0;
        else
          v101 = 1;
      }
      while (v101);
    }
    while (j != (size_t **)(*(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8)));
  }
  v102 = 126 - 2 * __clz(v90 - v86);
  if (v90 == v86)
    v103 = 0;
  else
    v103 = v102;
  sub_1C58EDF28(v86, v90, v103, 1);
  v199 = v86;
  if (v90 != v86)
  {
    v111 = v86;
    v112 = *(unsigned int *)(v200 + 32);
    v113 = v112 - 1;
    v114 = *(_QWORD *)(v200 + 24);
    v202 = v112;
    v115 = v114 + 8 * v112 + 8;
    __s1a = (char *)*(unsigned int *)(v200 + 44);
    do
    {
      memset(&v226, 0, 20);
      if (!(_DWORD)v202)
        goto LABEL_167;
      v116 = **v111;
      v119 = *v116;
      v117 = (unsigned __int8 *)(v116 + 6);
      v118 = v119;
      if (v119)
      {
        v120 = 0;
        v121 = v118;
        v122 = v117;
        do
        {
          v123 = *v122++;
          v120 = 33 * v120 + v123;
          --v121;
        }
        while (v121);
      }
      else
      {
        v120 = 0;
      }
      v124 = 1;
      for (k = v120; ; k = v126 + v124++)
      {
        v126 = k & v113;
        v127 = *(_QWORD **)(v114 + 8 * v126);
        if (v127 != (_QWORD *)-8)
        {
          if (!v127)
            goto LABEL_167;
          if (*(_DWORD *)(v115 + 4 * v126) == v120
            && v118 == *v127
            && (!v118 || !memcmp(v117, &__s1a[(_QWORD)v127], v118)))
          {
            break;
          }
        }
      }
      if ((_DWORD)v126 == -1)
LABEL_167:
        v128 = v202;
      else
        v128 = (int)v126;
      v129 = *(_QWORD *)(v114 + 8 * v128);
      *(_OWORD *)&v226.__r_.__value_.__l.__data_ = *(_OWORD *)(v129 + 16);
      LODWORD(v226.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v129 + 32);
      llvm::SHA1::update(v220, &v226, 0x14uLL);
      v230 = (**v111)[4];
      llvm::SHA1::update(v220, &v230, 8uLL);
      for (m = (_QWORD *)(**v111)[3]; m; m = (_QWORD *)*m)
      {
        v230 = m[2];
        llvm::SHA1::update(v220, &v230, 8uLL);
      }
      ++v111;
    }
    while (v111 != v90);
  }
  v104 = (_QWORD *)*v196;
  if ((_QWORD *)*v196 != v196 + 1)
  {
    do
    {
      llvm::SHA1::update(v220, (_BYTE *)v104 + 32, 8uLL);
      llvm::SHA1::update(v220, (_BYTE *)v104 + 40, 4uLL);
      v105 = (_QWORD *)v104[1];
      if (v105)
      {
        do
        {
          v106 = v105;
          v105 = (_QWORD *)*v105;
        }
        while (v105);
      }
      else
      {
        do
        {
          v106 = (_QWORD *)v104[2];
          v91 = *v106 == (_QWORD)v104;
          v104 = v106;
        }
        while (!v91);
      }
      v104 = v106;
    }
    while (v106 != v196 + 1);
  }
  v212 = 0;
  v213 = 0;
  v210 = 0;
  v211 = &v212;
  v208 = &v209;
  v209 = 0;
  v207[0] = 0;
  v207[1] = 0;
  v205[3] = &v206;
  v206 = v207;
  v230 = a10;
  v231 = (uint64_t **)&v211;
  v232 = a11;
  v233 = (uint64_t **)&v208;
  v205[0] = &v219;
  v205[1] = v200;
  v205[2] = &v230;
  v107 = *(unsigned int *)(a9 + 16);
  v108 = *(_QWORD *)a9 + 16 * v107;
  if (*(_DWORD *)(a9 + 8))
  {
    v110 = v201;
    if ((_DWORD)v107)
    {
      v131 = 16 * v107;
      v109 = *(unint64_t **)a9;
      while (*v109 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v109 += 2;
        v131 -= 16;
        if (!v131)
        {
          v109 = (unint64_t *)(*(_QWORD *)a9 + 16 * v107);
          break;
        }
      }
    }
    else
    {
      v109 = *(unint64_t **)a9;
    }
  }
  else
  {
    v109 = (unint64_t *)(*(_QWORD *)a9 + 16 * v107);
    v110 = v201;
  }
  v132 = *(_QWORD *)a9 + 16 * v107;
LABEL_180:
  if (v109 != (unint64_t *)v132)
  {
    LODWORD(v228[0]) = *(_WORD *)(v109[1] + 12) & 0xF;
    llvm::SHA1::update(v220, v228, 4uLL);
    v133 = *v109;
    v226.__r_.__value_.__r.__words[0] = *v109;
    v134 = *(_QWORD **)(v230 + 8);
    if (!v134)
      goto LABEL_188;
    while (1)
    {
      v135 = v134[4];
      if (v135 <= v133)
      {
        if (v135 >= v133)
        {
          sub_1C47BC21C(v231, (unint64_t *)&v226, (uint64_t **)&v226);
LABEL_188:
          for (n = *(_QWORD **)(v232 + 8); n; n = (_QWORD *)*n)
          {
            v137 = n[4];
            if (v226.__r_.__value_.__r.__words[0] >= v137)
            {
              if (v137 >= v226.__r_.__value_.__r.__words[0])
              {
                sub_1C47BC21C(v233, (unint64_t *)&v226, (uint64_t **)&v226);
                break;
              }
              ++n;
            }
          }
          sub_1C58E64F4(v205, v109[1]);
          v138 = v109 + 2;
          while (v138 != (unint64_t *)v108)
          {
            v139 = *v138;
            v138 += 2;
            if (v139 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v109 = v138 - 2;
              goto LABEL_180;
            }
          }
          v109 = (unint64_t *)v108;
          goto LABEL_180;
        }
        ++v134;
      }
      v134 = (_QWORD *)*v134;
      if (!v134)
        goto LABEL_188;
    }
  }
  v140 = *(unsigned int *)(v110 + 8);
  if ((_DWORD)v140)
  {
    for (ii = *(size_t ***)v110; !*ii || *ii + 1 == 0; ++ii)
      ;
  }
  else
  {
    ii = *(size_t ***)v110;
  }
  v142 = *(_QWORD *)v110 + 8 * v140;
  if (ii != (size_t **)v142)
  {
    v143 = *ii;
    do
    {
      for (jj = (_QWORD *)v143[3]; jj; jj = (_QWORD *)*jj)
      {
        v145 = sub_1C58E68C0(v200, jj[2], v143 + 6, *v143);
        sub_1C58E64F4(v205, v145);
        if (v145 && !*(_DWORD *)(v145 + 8))
          sub_1C58E64F4(v205, *(_QWORD *)(v145 + 72));
      }
      do
      {
        v146 = ii[1];
        ++ii;
        v143 = v146;
        if (v146)
          v147 = v143 + 1 == 0;
        else
          v147 = 1;
      }
      while (v147);
    }
    while (ii != (size_t **)v142);
  }
  v148 = v206;
  if (v206 != v207)
  {
    do
    {
      v228[0] = v148[4];
      v149 = sub_1C4FCD918(v200 + 56, v228);
      if (v149 != v150)
      {
        v151 = v149;
        v152 = v150;
        do
        {
          v153 = *((_BYTE *)v151 + 63);
          v154 = v153;
          if (v153 >= 0)
            v155 = v151 + 5;
          else
            v155 = (_BYTE *)v151[5];
          v156 = v153 & 0x7F;
          if (v154 >= 0)
            v157 = v156;
          else
            v157 = v151[6];
          llvm::SHA1::update(v220, v155, v157);
          v226.__r_.__value_.__s.__data_[0] = 0;
          llvm::SHA1::update(v220, &v226, 1uLL);
          LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v151 + 16);
          llvm::SHA1::update(v219, &v226, 4uLL);
          LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v151 + 17);
          llvm::SHA1::update(v219, &v226, 4uLL);
          v226.__r_.__value_.__r.__words[0] = v151[9];
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = v151[10];
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = *((unsigned __int8 *)v151 + 88);
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = v151[12];
          llvm::SHA1::update(v220, &v226, 8uLL);
          v226.__r_.__value_.__r.__words[0] = v151[15];
          llvm::SHA1::update(v220, &v226, 8uLL);
          v158 = (_QWORD *)v151[13];
          if (v158 != v151 + 14)
          {
            do
            {
              LODWORD(v226.__r_.__value_.__l.__data_) = v158[4];
              llvm::SHA1::update(v219, &v226, 4uLL);
              LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v158 + 10);
              llvm::SHA1::update(v219, &v226, 4uLL);
              v159 = *((_BYTE *)v158 + 71);
              v160 = v159;
              if (v159 >= 0)
                v161 = v158 + 6;
              else
                v161 = (_BYTE *)v158[6];
              v162 = v159 & 0x7F;
              if (v160 >= 0)
                v163 = v162;
              else
                v163 = v158[7];
              llvm::SHA1::update(v220, v161, v163);
              v226.__r_.__value_.__s.__data_[0] = 0;
              llvm::SHA1::update(v220, &v226, 1uLL);
              v226.__r_.__value_.__r.__words[0] = v158[11];
              llvm::SHA1::update(v220, &v226, 8uLL);
              v164 = (_QWORD *)v158[9];
              if (v164 != v158 + 10)
              {
                do
                {
                  v226.__r_.__value_.__r.__words[0] = (uint64_t)(v164[5] - v164[4]) >> 3;
                  llvm::SHA1::update(v220, &v226, 8uLL);
                  v165 = (std::string::size_type *)v164[4];
                  v166 = (std::string::size_type *)v164[5];
                  while (v165 != v166)
                  {
                    v167 = *v165++;
                    v226.__r_.__value_.__r.__words[0] = v167;
                    llvm::SHA1::update(v220, &v226, 8uLL);
                  }
                  LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v164 + 14);
                  llvm::SHA1::update(v219, &v226, 4uLL);
                  v226.__r_.__value_.__r.__words[0] = v164[8];
                  llvm::SHA1::update(v220, &v226, 8uLL);
                  LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v164 + 18);
                  llvm::SHA1::update(v219, &v226, 4uLL);
                  LODWORD(v226.__r_.__value_.__l.__data_) = *((_DWORD *)v164 + 19);
                  llvm::SHA1::update(v219, &v226, 4uLL);
                  v168 = (_QWORD *)v164[1];
                  if (v168)
                  {
                    do
                    {
                      v169 = v168;
                      v168 = (_QWORD *)*v168;
                    }
                    while (v168);
                  }
                  else
                  {
                    do
                    {
                      v169 = (_QWORD *)v164[2];
                      v91 = *v169 == (_QWORD)v164;
                      v164 = v169;
                    }
                    while (!v91);
                  }
                  v164 = v169;
                }
                while (v169 != v158 + 10);
              }
              v170 = (_QWORD *)v158[1];
              if (v170)
              {
                do
                {
                  v171 = v170;
                  v170 = (_QWORD *)*v170;
                }
                while (v170);
              }
              else
              {
                do
                {
                  v171 = (_QWORD *)v158[2];
                  v91 = *v171 == (_QWORD)v158;
                  v158 = v171;
                }
                while (!v91);
              }
              v158 = v171;
            }
            while (v171 != v151 + 14);
          }
          v172 = (_QWORD *)v151[1];
          if (v172)
          {
            do
            {
              v173 = v172;
              v172 = (_QWORD *)*v172;
            }
            while (v172);
          }
          else
          {
            do
            {
              v173 = (_QWORD *)v151[2];
              v91 = *v173 == (_QWORD)v151;
              v151 = v173;
            }
            while (!v91);
          }
          v151 = v173;
        }
        while (v173 != v152);
      }
      v174 = (_QWORD *)v148[1];
      if (v174)
      {
        do
        {
          v175 = (_QWORD **)v174;
          v174 = (_QWORD *)*v174;
        }
        while (v174);
      }
      else
      {
        do
        {
          v175 = (_QWORD **)v148[2];
          v91 = *v175 == v148;
          v148 = v175;
        }
        while (!v91);
      }
      v148 = v175;
    }
    while (v175 != v207);
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = v213;
  llvm::SHA1::update(v219, &v226, 4uLL);
  v176 = v211;
  if (v211 != &v212)
  {
    do
    {
      v226.__r_.__value_.__r.__words[0] = v176[4];
      llvm::SHA1::update(v220, &v226, 8uLL);
      v177 = (_QWORD *)v176[1];
      if (v177)
      {
        do
        {
          v178 = (_QWORD **)v177;
          v177 = (_QWORD *)*v177;
        }
        while (v177);
      }
      else
      {
        do
        {
          v178 = (_QWORD **)v176[2];
          v91 = *v178 == v176;
          v176 = v178;
        }
        while (!v91);
      }
      v176 = v178;
    }
    while (v178 != &v212);
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = v210;
  llvm::SHA1::update(v219, &v226, 4uLL);
  v179 = v208;
  if (v208 != &v209)
  {
    do
    {
      v226.__r_.__value_.__r.__words[0] = v179[4];
      llvm::SHA1::update(v220, &v226, 8uLL);
      v180 = (_QWORD *)v179[1];
      if (v180)
      {
        do
        {
          v181 = (_QWORD **)v180;
          v180 = (_QWORD *)*v180;
        }
        while (v180);
      }
      else
      {
        do
        {
          v181 = (_QWORD **)v179[2];
          v91 = *v181 == v179;
          v179 = v181;
        }
        while (!v91);
      }
      v179 = v181;
    }
    while (v181 != &v209);
  }
  v182 = *(_BYTE *)(v197 + 591);
  v183 = v182;
  v184 = v182 & 0x7F;
  if (v183 < 0)
    v184 = *(_QWORD *)(v197 + 576);
  if (v184)
  {
    v227 = 260;
    v226.__r_.__value_.__r.__words[0] = v197 + 568;
    sub_1C5E1F6CC((unsigned __int8 *)&v226, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v228);
    v185 = v229;
    if ((v229 & 1) == 0)
    {
      v186 = v228[0];
      llvm::SHA1::update(v220, *(_BYTE **)(v228[0] + 8), *(_QWORD *)(v228[0] + 16) - *(_QWORD *)(v228[0] + 8));
      v187 = *(_BYTE *)(v197 + 615);
      v188 = v187;
      v189 = v187 & 0x7F;
      if (v188 < 0)
        v189 = *(_QWORD *)(v197 + 600);
      if (v189)
      {
        v227 = 260;
        v226.__r_.__value_.__r.__words[0] = v197 + 592;
        sub_1C5E1F6CC((unsigned __int8 *)&v226, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v224);
        (*(void (**)(unint64_t))(*(_QWORD *)v186 + 8))(v186);
        if ((v225 & 1) != 0)
        {
          v185 |= 1u;
          v190 = v224[0];
          v228[1] = v224[1];
        }
        else
        {
          v185 &= ~1u;
          v190 = v224[0];
        }
        v229 = v185;
        v228[0] = v190;
        if ((v185 & 1) == 0)
          llvm::SHA1::update(v220, *(_BYTE **)(v190 + 8), *(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8));
      }
    }
    if ((v185 & 1) == 0 && v228[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v228[0] + 8))(v228[0]);
  }
  llvm::SHA1::result((llvm::SHA1 *)v220, (uint64_t)v228);
  sub_1C62B2138((unsigned __int8 *)v228, 20, 0, &v226);
  v192 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
  if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v193 = &v226;
  else
    v193 = (std::string *)v226.__r_.__value_.__r.__words[0];
  if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v226.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v226.__r_.__value_.__l.__size_;
  v198[1] = 0;
  if (v198[2] < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v198, v198 + 3, size, 1);
    v195 = v198[1];
LABEL_302:
    memcpy((void *)(*v198 + v195), v193, size);
    v195 = v198[1];
    v192 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v195 = 0;
    if (size)
      goto LABEL_302;
  }
  v198[1] = v195 + size;
  if (v192 < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  sub_1C47655E8((uint64_t)&v206, v207[0]);
  sub_1C47655E8((uint64_t)&v208, v209);
  sub_1C47655E8((uint64_t)&v211, v212);
  if (v199)
    operator delete(v199);
  if (__p)
  {
    v215 = (char *)__p;
    operator delete(__p);
  }
}

_QWORD *sub_1C58E64F4(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _DWORD **v4;
  _DWORD **v5;
  _DWORD **v6;
  llvm::ValueInfo *v7;
  llvm::ValueInfo *v8;
  _DWORD **v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  _DWORD **v17;
  _DWORD **v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::ValueInfo *v35;
  llvm::ValueInfo *v36;
  _DWORD **v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *j;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t *v44;

  if (!a2)
    return result;
  v3 = result;
  v4 = (_DWORD **)*result;
  LODWORD(v44) = (*(unsigned __int16 *)(a2 + 12) >> 4) & 3;
  llvm::SHA1::update(*v4, &v44, 4uLL);
  v5 = (_DWORD **)*v3;
  LODWORD(v44) = (*(unsigned __int16 *)(a2 + 12) >> 7) & 1;
  llvm::SHA1::update(*v5, &v44, 4uLL);
  v6 = (_DWORD **)*v3;
  LODWORD(v44) = (*(unsigned __int16 *)(a2 + 12) >> 9) & 1;
  result = llvm::SHA1::update(*v6, &v44, 4uLL);
  v7 = *(llvm::ValueInfo **)(a2 + 40);
  v8 = *(llvm::ValueInfo **)(a2 + 48);
  if (v8 == v7)
    goto LABEL_18;
  do
  {
    v9 = (_DWORD **)*v3;
    LODWORD(v44) = llvm::ValueInfo::isDSOLocal(v7, *(unsigned __int8 *)(v3[1] + 130));
    result = llvm::SHA1::update(*v9, &v44, 4uLL);
    v10 = v3[2];
    v11 = *(uint64_t **)(*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8);
    v44 = v11;
    for (i = *(_QWORD **)(*(_QWORD *)v10 + 8); i; i = (_QWORD *)*i)
    {
      v13 = i[4];
      if (v13 <= (unint64_t)v11)
      {
        if (v13 >= (unint64_t)v11)
        {
          result = sub_1C47BC21C(*(uint64_t ***)(v10 + 8), (unint64_t *)&v44, &v44);
          break;
        }
        ++i;
      }
    }
    v14 = *(_QWORD **)(*(_QWORD *)(v10 + 16) + 8);
    if (!v14)
      goto LABEL_17;
    while (1)
    {
      v15 = v14[4];
      if ((unint64_t)v44 >= v15)
        break;
LABEL_14:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_17;
    }
    if (v15 < (unint64_t)v44)
    {
      ++v14;
      goto LABEL_14;
    }
    result = sub_1C47BC21C(*(uint64_t ***)(v10 + 24), (unint64_t *)&v44, &v44);
LABEL_17:
    v7 = (llvm::ValueInfo *)((char *)v7 + 8);
  }
  while (v7 != v8);
LABEL_18:
  v16 = *(_DWORD *)(a2 + 8);
  if (v16 == 2)
  {
    v17 = (_DWORD **)*v3;
    LODWORD(v44) = *(_BYTE *)(a2 + 72) & 1;
    llvm::SHA1::update(*v17, &v44, 4uLL);
    v18 = (_DWORD **)*v3;
    LODWORD(v44) = (*(unsigned __int8 *)(a2 + 72) >> 1) & 1;
    result = llvm::SHA1::update(*v18, &v44, 4uLL);
    v16 = *(_DWORD *)(a2 + 8);
  }
  if (v16 != 1)
    return result;
  v19 = *(_QWORD *)(a2 + 104);
  if (v19)
  {
    v20 = *(unint64_t **)v19;
    v21 = *(_QWORD *)(v19 + 8) - *(_QWORD *)v19;
    if (!v21)
      goto LABEL_26;
    v22 = 8 * (v21 >> 3);
    do
    {
      result = sub_1C47BC21C((uint64_t **)v3[3], v20, (uint64_t **)v20);
      ++v20;
      v22 -= 8;
    }
    while (v22);
    v19 = *(_QWORD *)(a2 + 104);
    if (v19)
    {
LABEL_26:
      v23 = *(unint64_t **)(v19 + 24);
      v24 = *(_QWORD *)(v19 + 32) - (_QWORD)v23;
      if (!v24)
        goto LABEL_59;
      v25 = 16 * (v24 >> 4);
      do
      {
        result = sub_1C47BC21C((uint64_t **)v3[3], v23, (uint64_t **)v23);
        v23 += 2;
        v25 -= 16;
      }
      while (v25);
      v19 = *(_QWORD *)(a2 + 104);
      if (v19)
      {
LABEL_59:
        v26 = *(unint64_t **)(v19 + 48);
        v27 = *(_QWORD *)(v19 + 56) - (_QWORD)v26;
        if (!v27)
          goto LABEL_60;
        v28 = 16 * (v27 >> 4);
        do
        {
          result = sub_1C47BC21C((uint64_t **)v3[3], v26, (uint64_t **)v26);
          v26 += 2;
          v28 -= 16;
        }
        while (v28);
        v19 = *(_QWORD *)(a2 + 104);
        if (v19)
        {
LABEL_60:
          v29 = *(unint64_t **)(v19 + 72);
          v30 = *(_QWORD *)(v19 + 80) - (_QWORD)v29;
          if (!v30)
            goto LABEL_38;
          v31 = 40 * (v30 / 40);
          do
          {
            result = sub_1C47BC21C((uint64_t **)v3[3], v29, (uint64_t **)v29);
            v29 += 5;
            v31 -= 40;
          }
          while (v31);
          v19 = *(_QWORD *)(a2 + 104);
          if (v19)
          {
LABEL_38:
            v32 = *(unint64_t **)(v19 + 96);
            v33 = *(_QWORD *)(v19 + 104) - (_QWORD)v32;
            if (v33)
            {
              v34 = 40 * (v33 / 40);
              do
              {
                result = sub_1C47BC21C((uint64_t **)v3[3], v32, (uint64_t **)v32);
                v32 += 5;
                v34 -= 40;
              }
              while (v34);
            }
          }
        }
      }
    }
  }
  v36 = *(llvm::ValueInfo **)(a2 + 80);
  v35 = *(llvm::ValueInfo **)(a2 + 88);
  if (v35 == v36)
    return result;
  while (2)
  {
    v37 = (_DWORD **)*v3;
    LODWORD(v44) = llvm::ValueInfo::isDSOLocal(v36, *(unsigned __int8 *)(v3[1] + 130));
    result = llvm::SHA1::update(*v37, &v44, 4uLL);
    v38 = v3[2];
    v39 = *(uint64_t **)(*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8);
    v44 = v39;
    for (j = *(_QWORD **)(*(_QWORD *)v38 + 8); j; j = (_QWORD *)*j)
    {
      v41 = j[4];
      if (v41 <= (unint64_t)v39)
      {
        if (v41 >= (unint64_t)v39)
        {
          result = sub_1C47BC21C(*(uint64_t ***)(v38 + 8), (unint64_t *)&v44, &v44);
          break;
        }
        ++j;
      }
    }
    v42 = *(_QWORD **)(*(_QWORD *)(v38 + 16) + 8);
    if (!v42)
      goto LABEL_56;
    while (2)
    {
      v43 = v42[4];
      if ((unint64_t)v44 < v43)
      {
LABEL_53:
        v42 = (_QWORD *)*v42;
        if (!v42)
          goto LABEL_56;
        continue;
      }
      break;
    }
    if (v43 < (unint64_t)v44)
    {
      ++v42;
      goto LABEL_53;
    }
    result = sub_1C47BC21C(*(uint64_t ***)(v38 + 24), (unint64_t *)&v44, &v44);
LABEL_56:
    v36 = (llvm::ValueInfo *)((char *)v36 + 16);
    if (v36 != v35)
      continue;
    return result;
  }
}

uint64_t sub_1C58E68C0(uint64_t a1, unint64_t a2, void *a3, size_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v4 || v6[4] > a2)
LABEL_12:
    v6 = (_QWORD *)(a1 + 8);
  if (v6 == v4)
    v10 = 0;
  else
    v10 = (uint64_t)(v6 + 4);
  v11 = v10 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a1 + 133);
  if (v11 >= 8)
    return sub_1C61CD658(a1, v11, a3, a4);
  else
    return 0;
}

void llvm::thinLTOResolvePrevailingInIndex(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, _QWORD), uint64_t a4, void (*a5)(uint64_t, _QWORD, _QWORD, _QWORD), uint64_t a6, uint64_t a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  v11 = *(_QWORD **)a2;
  v54 = (_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != a2 + 8)
  {
    v12 = 0;
    while (1)
    {
      v13 = v11[7];
      v14 = v11[8];
      while (v13 != v14)
      {
        if (*(_QWORD *)v13)
          v15 = *(_DWORD *)(*(_QWORD *)v13 + 8) == 0;
        else
          v15 = 0;
        if (v15)
        {
          v16 = *(_QWORD *)(*(_QWORD *)v13 + 72);
          v59 = 0;
          v17 = v58;
          if ((sub_1C4EBC5C8(v12, v58, v16, &v59) & 1) == 0)
          {
            if (4 * (int)v57 + 4 >= 3 * v17)
            {
              v18 = 2 * v17;
            }
            else
            {
              if (v17 + ~(_DWORD)v57 - HIDWORD(v57) > v17 >> 3)
              {
LABEL_13:
                LODWORD(v57) = v57 + 1;
                if (*v59 != -4096)
                  --HIDWORD(v57);
                *v59 = v16;
                goto LABEL_16;
              }
              v18 = v17;
            }
            sub_1C4EBC65C((uint64_t)&v56, v18);
            v59 = 0;
            v12 = v56;
            sub_1C4EBC5C8(v56, v58, v16, &v59);
            goto LABEL_13;
          }
        }
LABEL_16:
        v13 += 8;
      }
      v19 = (_QWORD *)v11[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v11[2];
          v15 = *v20 == (_QWORD)v11;
          v11 = v20;
        }
        while (!v15);
      }
      v11 = v20;
      if (v20 == v54)
      {
        v11 = *(_QWORD **)a2;
        v53 = v56;
        goto LABEL_28;
      }
    }
  }
  v53 = 0;
LABEL_28:
  if (v11 == v54)
LABEL_81:
    JUMPOUT(0x1CAA32FB4);
  while (1)
  {
    v21 = (unint64_t)(v11 + 4);
    v59 = (_QWORD *)(*(unsigned __int8 *)(a2 + 133) | (unint64_t)(v11 + 4));
    v22 = *(_DWORD *)(a1 + 444);
    LOBYTE(v23) = v22 == 1 ? llvm::ValueInfo::getELFVisibility((llvm::ValueInfo *)&v59) : 0;
    v24 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
    v25 = *(uint64_t **)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
    v26 = (uint64_t *)v24[4];
    if (v26 != v25)
      break;
LABEL_69:
    if (!v22)
    {
      v45 = v24[3];
      v46 = v24[4] - v45;
      if (v46)
      {
        v47 = 8 * (v46 >> 3);
        do
        {
          v48 = *(_WORD *)(*(_QWORD *)v45 + 12);
          if ((v48 & 0xFu) - 6 >= 3)
            *(_WORD *)(*(_QWORD *)v45 + 12) = v48 & 0xFFCF | (16 * (v23 & 3));
          v45 += 8;
          v47 -= 8;
        }
        while (v47);
      }
    }
    v49 = (_QWORD *)v11[1];
    if (v49)
    {
      do
      {
        v50 = v49;
        v49 = (_QWORD *)*v49;
      }
      while (v49);
    }
    else
    {
      do
      {
        v50 = (_QWORD *)v11[2];
        v15 = *v50 == (_QWORD)v11;
        v11 = v50;
      }
      while (!v15);
    }
    v11 = v50;
    if (v50 == v54)
      goto LABEL_81;
  }
  while (1)
  {
    v27 = *(_WORD *)(*v25 + 12) & 0xF;
    if ((v27 - 6) >= 3)
      break;
LABEL_62:
    if (++v25 == v26)
    {
      v22 = *(_DWORD *)(a1 + 444);
      goto LABEL_69;
    }
  }
  if (!a3(a4, *v24))
  {
    v38 = *v25;
    if (*(_DWORD *)(*v25 + 8))
    {
      if (v58)
      {
        v39 = (v58 - 1) & ((v38 >> 4) ^ (v38 >> 9));
        v40 = *(_QWORD *)(v53 + 8 * v39);
        if (v38 == v40)
          goto LABEL_57;
        v41 = 1;
        while (v40 != -4096)
        {
          v42 = v39 + v41++;
          v39 = v42 & (v58 - 1);
          v40 = *(_QWORD *)(v53 + 8 * v39);
          if (v38 == v40)
            goto LABEL_57;
        }
      }
      *(_WORD *)(v38 + 12) = *(_WORD *)(v38 + 12) & 0xFFF0 | 1;
      v38 = *v25;
    }
LABEL_57:
    v37 = *(_DWORD *)(a1 + 444);
    goto LABEL_58;
  }
  if ((v27 & 0xE) != 2)
  {
LABEL_47:
    v37 = *(_DWORD *)(a1 + 444);
    v38 = *v25;
    if (v37)
    {
LABEL_58:
      if (v37 == 1)
      {
        *(_WORD *)(v38 + 12) = *(_WORD *)(v38 + 12) & 0xFFCF | (16 * (v23 & 3));
        v38 = *v25;
      }
      if ((*(_WORD *)(v38 + 12) & 0xF) != v27)
        a5(a6, *(_QWORD *)(v38 + 24), *(_QWORD *)(v38 + 32), *v24);
      goto LABEL_62;
    }
    v23 = (*(unsigned __int16 *)(v38 + 12) >> 4) & 3;
    goto LABEL_57;
  }
  if (v27 == 3)
    v28 = 5;
  else
    v28 = 4;
  *(_WORD *)(*v25 + 12) = *(_WORD *)(*v25 + 12) & 0xFFF0 | v28;
  v29 = v24[3];
  v30 = v24[4] - v29;
  if (!v30)
    goto LABEL_45;
  v31 = v30 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    if ((*(_WORD *)(*(_QWORD *)v29 + 12) & 0x200) == 0)
      goto LABEL_45;
    v29 += 8;
    v31 -= 8;
  }
  while (v31);
  v32 = *(_DWORD *)(a7 + 16);
  if (v32)
  {
    v33 = v32 - 1;
    v34 = v33 & (37 * *v24);
    v35 = *(_QWORD *)(*(_QWORD *)a7 + 8 * v34);
    if (*v24 == v35)
    {
LABEL_45:
      v36 = 0;
LABEL_46:
      *(_WORD *)(*v25 + 12) = *(_WORD *)(*v25 + 12) & 0xFDFF | v36;
      goto LABEL_47;
    }
    v43 = 1;
    while (v35 != -1)
    {
      v36 = 0;
      v44 = v34 + v43++;
      v34 = v44 & v33;
      v35 = *(_QWORD *)(*(_QWORD *)a7 + 8 * v34);
      if (*v24 == v35)
        goto LABEL_46;
    }
  }
  v36 = 512;
  goto LABEL_46;
}

uint64_t llvm::thinLTOInternalizeAndPromoteInIndex(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, unint64_t), uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD), uint64_t a5)
{
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v26;

  v7 = *(_QWORD **)a1;
  result = a1 + 8;
  v6 = v7;
  v26 = (_QWORD *)result;
  if (v7 != (_QWORD *)result)
  {
    while (1)
    {
      v10 = (_QWORD *)((unint64_t)(v6 + 4) & 0xFFFFFFFFFFFFFFF8);
      v11 = (uint64_t *)v10[3];
      v12 = v10[4] - (_QWORD)v11;
      if (v12)
        break;
LABEL_26:
      v23 = (_QWORD *)v6[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v6[2];
          v19 = *v24 == (_QWORD)v6;
          v6 = v24;
        }
        while (!v19);
      }
      v6 = v24;
      if (v24 == v26)
        return result;
    }
    v13 = *(unsigned __int8 *)(a1 + 133) | (unint64_t)(v6 + 4);
    v14 = 8 * (v12 >> 3);
    while (1)
    {
      result = a2(a3, *(_QWORD *)(*v11 + 24), *(_QWORD *)(*v11 + 32), v13);
      if ((_DWORD)result)
      {
        v15 = *(_WORD *)(*v11 + 12);
        if ((v15 & 0xFu) - 7 <= 1)
          *(_WORD *)(*v11 + 12) = v15 & 0xFFF0;
      }
      else if (byte_1ED833F88)
      {
        v16 = *v11;
        v17 = *(_WORD *)(*v11 + 12);
        v18 = v17 & 0xF;
        if ((v18 - 7) >= 2)
        {
          if (((1 << v18) & 0x1EB) != 0)
            goto LABEL_12;
          result = a4(a5, *v10);
          if ((_DWORD)result)
          {
            v16 = *v11;
            v17 = *(_WORD *)(*v11 + 12);
            v18 = v17 & 0xF;
LABEL_12:
            v19 = v18 == 1 || v18 == 6;
            if (!v19)
            {
              v20 = *(_DWORD *)(v16 + 8);
              v21 = v16;
              if (!v20)
              {
                v21 = *(_QWORD *)(v16 + 72);
                v20 = *(_DWORD *)(v21 + 8);
              }
              if (v20 != 2
                || (*(_BYTE *)(v21 + 72) & 3) != 0
                || (v22 = *(_WORD *)(v21 + 12) & 0xF, v22 != 3) && v22 != 5)
              {
                *(_WORD *)(v16 + 12) = v17 & 0xFFF0 | 7;
              }
            }
          }
        }
      }
      ++v11;
      v14 -= 8;
      if (!v14)
        goto LABEL_26;
    }
  }
  return result;
}

void llvm::lto::InputFile::~InputFile(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;
  void *v7;

  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }
  v3 = this[18];
  if (v3)
  {
    this[19] = v3;
    operator delete(v3);
  }
  v4 = this[9];
  if (v4)
  {
    this[10] = v4;
    operator delete(v4);
  }
  v5 = this[6];
  if (v5)
  {
    this[7] = v5;
    operator delete(v5);
  }
  v6 = (void **)this[3];
  if (v6 != this + 6)
    free(v6);
  v7 = *this;
  if (*this)
  {
    this[1] = v7;
    operator delete(v7);
  }
}

void llvm::lto::InputFile::create(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  unint64_t v45;
  int v46;
  char *v47;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t *v79;
  unint64_t *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  void **v87;
  size_t v88;
  _BYTE *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void **v95;
  _OWORD *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  const void *v100;
  size_t v101;
  __int128 *p_dst;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _OWORD *v108;
  unint64_t v109;
  void **v110;
  _OWORD v111[2];
  _OWORD v112[5];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  __int128 __src;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 __dst;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  void *__p;
  _BYTE *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD v137[2];
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  char v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 48) = 0u;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 48;
  v110 = (void **)(v4 + 48);
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_QWORD *)(v4 + 240) = 0;
  v5 = a1[1];
  v111[0] = *a1;
  v111[1] = v5;
  llvm::object::readIRSymtab(v111, (uint64_t)&__p);
  v6 = v146;
  if ((v146 & 1) != 0)
  {
    v42 = (uint64_t)__p;
    __p = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    goto LABEL_135;
  }
  v108 = a1;
  v107 = a2;
  v7 = v137[0];
  v8 = v138;
  v9 = *(_QWORD *)(v137[0] + 44);
  *(_QWORD *)(v4 + 96) = v138 + v9;
  *(_QWORD *)(v4 + 104) = HIDWORD(v9);
  v10 = *(_QWORD *)(v7 + 52);
  *(_QWORD *)(v4 + 112) = v8 + v10;
  *(_QWORD *)(v4 + 120) = HIDWORD(v10);
  v11 = *(_QWORD *)(v7 + 60);
  *(_QWORD *)(v4 + 128) = v8 + v11;
  *(_QWORD *)(v4 + 136) = HIDWORD(v11);
  __dst = 0uLL;
  *(_QWORD *)&v125 = 0;
  sub_1C501881C((uint64_t)&__dst, v145);
  if (v145)
  {
    v12 = v144;
    v13 = &v144[v145];
    v14 = (_QWORD *)*((_QWORD *)&__dst + 1);
    do
    {
      v15 = HIDWORD(*v12);
      v16 = v138 + *v12;
      if ((unint64_t)v14 >= (unint64_t)v125)
      {
        v18 = (_QWORD *)__dst;
        v19 = (uint64_t)((uint64_t)v14 - __dst) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          goto LABEL_147;
        v21 = v125 - __dst;
        if ((uint64_t)(v125 - __dst) >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 60)
LABEL_148:
            sub_1C4764EE4();
          v23 = (char *)operator new(16 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[16 * v19];
        *(_QWORD *)v24 = v16;
        *((_QWORD *)v24 + 1) = v15;
        v25 = v24;
        if (v14 != v18)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
            v25 -= 16;
            v14 -= 2;
          }
          while (v14 != v18);
          v14 = (_QWORD *)__dst;
        }
        v17 = v24 + 16;
        *(_QWORD *)&__dst = v25;
        *((_QWORD *)&__dst + 1) = v24 + 16;
        *(_QWORD *)&v125 = &v23[16 * v22];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v14 = v16;
        v14[1] = v15;
        v17 = v14 + 2;
      }
      *((_QWORD *)&__dst + 1) = v17;
      ++v12;
      v14 = v17;
    }
    while (v12 != v13);
  }
  v26 = *(void **)(v4 + 144);
  if (v26)
  {
    *(_QWORD *)(v4 + 152) = v26;
    operator delete(v26);
  }
  *(_OWORD *)(v4 + 144) = __dst;
  *(_QWORD *)(v4 + 160) = v125;
  v27 = v141;
  if (v141)
  {
    if (v141 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_147;
    v28 = (char *)operator new(24 * v141);
    v29 = &v28[24 * v27];
    v30 = v140;
    v31 = v140 + 12 * v27;
    v32 = v28;
    do
    {
      v33 = *(_DWORD *)(v30 + 8);
      v34 = HIDWORD(*(_QWORD *)v30);
      v35 = v138 + *(_QWORD *)v30;
      if (v32 >= v29)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v28) >> 3) + 1;
        if (v37 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_147;
        if (0x5555555555555556 * ((v29 - v28) >> 3) > v37)
          v37 = 0x5555555555555556 * ((v29 - v28) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3) >= 0x555555555555555)
          v38 = 0xAAAAAAAAAAAAAAALL;
        else
          v38 = v37;
        if (v38)
        {
          if (v38 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_148;
          v39 = (char *)operator new(24 * v38);
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[8 * ((v32 - v28) >> 3)];
        v29 = &v39[24 * v38];
        *(_QWORD *)v40 = v35;
        *((_QWORD *)v40 + 1) = v34;
        *((_DWORD *)v40 + 4) = v33;
        v36 = v40 + 24;
        if (v32 == v28)
          goto LABEL_42;
        do
        {
          v41 = *(_OWORD *)(v32 - 24);
          *((_QWORD *)v40 - 1) = *((_QWORD *)v32 - 1);
          *(_OWORD *)(v40 - 24) = v41;
          v40 -= 24;
          v32 -= 24;
        }
        while (v32 != v28);
        if (v28)
LABEL_42:
          operator delete(v28);
        v28 = v40;
      }
      else
      {
        *(_QWORD *)v32 = v35;
        *((_QWORD *)v32 + 1) = v34;
        v36 = v32 + 24;
        *((_DWORD *)v32 + 4) = v33;
      }
      v30 += 12;
      v32 = v36;
    }
    while (v30 != v31);
  }
  else
  {
    v28 = 0;
    v36 = 0;
    v29 = 0;
  }
  v43 = *(void **)(v4 + 168);
  if (v43)
  {
    *(_QWORD *)(v4 + 176) = v43;
    operator delete(v43);
  }
  *(_QWORD *)(v4 + 168) = v28;
  *(_QWORD *)(v4 + 176) = v36;
  *(_QWORD *)(v4 + 184) = v29;
  v44 = v132;
  if (v132 == __p)
  {
    v45 = (v132 - (_BYTE *)__p) >> 6;
    v81 = v132;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = *(char **)(v4 + 56);
      v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v47[-*(_QWORD *)(v4 + 48)] >> 4);
      v49 = (unsigned int *)(v139 + 12 * v45);
      v50 = v142 + 24 * *v49;
      v51 = v142 + 24 * v49[1];
      LODWORD(v49) = v49[2];
      __src = 0u;
      v118 = 0u;
      v120 = 0u;
      v121 = 0u;
      *(_QWORD *)&v122 = v50;
      *((_QWORD *)&v122 + 1) = v51;
      *(_QWORD *)&v123 = v143 + 24 * v49;
      *((_QWORD *)&v123 + 1) = v137;
      sub_1C58ED664((uint64_t)&__src);
      v128 = v121;
      v129 = v122;
      v130 = v123;
      __dst = __src;
      v125 = v118;
      v126 = v119;
      v127 = v120;
      memset(v112, 0, 32);
      memset(&v112[3], 0, 32);
      v113 = v51;
      v114 = v51;
      v115 = 0;
      v116 = v137;
      sub_1C58ED664((uint64_t)v112);
      v52 = v113;
      v121 = v128;
      v122 = v129;
      v123 = v130;
      __src = __dst;
      v118 = v125;
      v119 = v126;
      v120 = v127;
      v53 = v129;
      v109 = v48;
      if ((_QWORD)v129 != v113)
      {
        do
        {
          v54 = BYTE4(v119);
          if ((WORD2(v119) & 0xC00) == 0x400)
          {
            v55 = *(_QWORD *)(v4 + 64);
            if ((unint64_t)v47 >= v55)
            {
              v57 = (char *)*v110;
              v58 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (_BYTE *)*v110) >> 4);
              v59 = v58 + 1;
              if (v58 + 1 > 0x333333333333333)
                goto LABEL_147;
              v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - (_QWORD)v57) >> 4);
              if (2 * v60 > v59)
                v59 = 2 * v60;
              if (v60 >= 0x199999999999999)
                v61 = 0x333333333333333;
              else
                v61 = v59;
              if (v61)
              {
                if (v61 > 0x333333333333333)
                  goto LABEL_148;
                v62 = (char *)operator new(80 * v61);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[80 * v58];
              v64 = v120;
              *((_OWORD *)v63 + 2) = v119;
              *((_OWORD *)v63 + 3) = v64;
              *((_OWORD *)v63 + 4) = v121;
              v65 = v118;
              *(_OWORD *)v63 = __src;
              *((_OWORD *)v63 + 1) = v65;
              v66 = v63;
              if (v47 != v57)
              {
                do
                {
                  *((_OWORD *)v66 - 5) = *((_OWORD *)v47 - 5);
                  v67 = *((_OWORD *)v47 - 4);
                  v68 = *((_OWORD *)v47 - 3);
                  v69 = *((_OWORD *)v47 - 1);
                  *((_OWORD *)v66 - 2) = *((_OWORD *)v47 - 2);
                  *((_OWORD *)v66 - 1) = v69;
                  *((_OWORD *)v66 - 4) = v67;
                  *((_OWORD *)v66 - 3) = v68;
                  v66 -= 80;
                  v47 -= 80;
                }
                while (v47 != v57);
                v47 = (char *)*v110;
              }
              v56 = v63 + 80;
              *(_QWORD *)(v4 + 48) = v66;
              *(_QWORD *)(v4 + 56) = v63 + 80;
              *(_QWORD *)(v4 + 64) = &v62[80 * v61];
              if (v47)
                operator delete(v47);
            }
            else
            {
              memmove(v47, &__src, 0x50uLL);
              v56 = v47 + 80;
            }
            *(_QWORD *)(v4 + 56) = v56;
            v53 = v122;
            v47 = v56;
            v54 = BYTE4(v119);
          }
          *(_QWORD *)&v122 = v53 + 24;
          if ((v54 & 4) != 0)
            *(_QWORD *)&v123 = v123 + 24;
          sub_1C58ED664((uint64_t)&__src);
          v53 = v122;
        }
        while ((_QWORD)v122 != v52);
        v48 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (_BYTE *)*v110) >> 4);
      }
      v71 = *(unint64_t **)(v4 + 80);
      v70 = *(_QWORD *)(v4 + 88);
      if ((unint64_t)v71 >= v70)
      {
        v73 = *(char **)(v4 + 72);
        v74 = ((char *)v71 - v73) >> 4;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 60)
          goto LABEL_147;
        v76 = v70 - (_QWORD)v73;
        if (v76 >> 3 > v75)
          v75 = v76 >> 3;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
          v77 = 0xFFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          if (v77 >> 60)
            goto LABEL_148;
          v78 = (char *)operator new(16 * v77);
        }
        else
        {
          v78 = 0;
        }
        v79 = (unint64_t *)&v78[16 * v74];
        *v79 = v109;
        v79[1] = v48;
        v80 = v79;
        if (v71 != (unint64_t *)v73)
        {
          do
          {
            *((_OWORD *)v80 - 1) = *((_OWORD *)v71 - 1);
            v80 -= 2;
            v71 -= 2;
          }
          while (v71 != (unint64_t *)v73);
          v71 = *(unint64_t **)(v4 + 72);
        }
        v72 = v79 + 2;
        *(_QWORD *)(v4 + 72) = v80;
        *(_QWORD *)(v4 + 80) = v79 + 2;
        *(_QWORD *)(v4 + 88) = &v78[16 * v77];
        if (v71)
          operator delete(v71);
      }
      else
      {
        *v71 = v109;
        v71[1] = v48;
        v72 = v71 + 2;
      }
      *(_QWORD *)(v4 + 80) = v72;
      v44 = v132;
      v81 = (char *)__p;
      v45 = ++v46;
    }
    while (v46 != (v132 - (_BYTE *)__p) >> 6);
  }
  v82 = *(_QWORD *)(v4 + 16);
  v83 = *(char **)v4;
  if (v45 <= (v82 - *(_QWORD *)v4) >> 6)
  {
    v87 = (void **)(v4 + 8);
    v89 = *(_BYTE **)(v4 + 8);
    v90 = (v89 - v83) >> 6;
    if (v90 >= v45)
    {
      v88 = v44 - v81;
      if (!v88)
        goto LABEL_116;
      v92 = *(char **)v4;
      v93 = v81;
    }
    else
    {
      v91 = &v81[64 * v90];
      if (v89 != v83)
      {
        memmove(*(void **)v4, v81, v89 - v83);
        v83 = (char *)*v87;
      }
      v88 = v44 - v91;
      if (!v88)
        goto LABEL_116;
      v92 = v83;
      v93 = v91;
    }
    memmove(v92, v93, v88);
    goto LABEL_116;
  }
  if (v83)
  {
    *(_QWORD *)(v4 + 8) = v83;
    operator delete(v83);
    v82 = 0;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  if (v45 >> 58)
    goto LABEL_147;
  v84 = v82 >> 5;
  if (v82 >> 5 <= v45)
    v84 = v45;
  v85 = (unint64_t)v82 >= 0x7FFFFFFFFFFFFFC0 ? 0x3FFFFFFFFFFFFFFLL : v84;
  if (v85 >> 58)
    goto LABEL_147;
  v86 = (char *)operator new(v85 << 6);
  v83 = v86;
  *(_QWORD *)v4 = v86;
  *(_QWORD *)(v4 + 8) = v86;
  v87 = (void **)(v4 + 8);
  *(_QWORD *)(v4 + 16) = &v86[64 * v85];
  v88 = v44 - v81;
  if (v88)
    memcpy(v86, v81, v88);
LABEL_116:
  *v87 = &v83[v88];
  v94 = v135;
  if (v135)
  {
    v95 = *(void ***)(v4 + 24);
    v97 = (_OWORD *)(v4 + 192);
    v96 = v108;
    if (v95 != v110)
    {
      free(v95);
      v94 = v135;
    }
    v98 = v136;
    *(_QWORD *)(v4 + 24) = v134;
    *(_QWORD *)(v4 + 32) = v94;
    *(_QWORD *)(v4 + 40) = v98;
    v134 = v137;
    v135 = 0;
    v136 = 0;
  }
  else
  {
    *(_QWORD *)(v4 + 32) = 0;
    v97 = (_OWORD *)(v4 + 192);
    v96 = v108;
  }
  v99 = v96[1];
  *v97 = *v96;
  v97[1] = v99;
  v100 = (const void *)*((_QWORD *)v96 + 2);
  if (v100)
  {
    v101 = *((_QWORD *)v96 + 3);
    if (v101 < 0x7FFFFFFFFFFFFFF8)
    {
      if (v101 >= 0x17)
      {
        v104 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v101 | 7) != 0x17)
          v104 = v101 | 7;
        v105 = v104 + 1;
        p_dst = (__int128 *)operator new(v104 + 1);
        *((_QWORD *)&__dst + 1) = v101;
        *(_QWORD *)&v125 = v105 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        BYTE7(v125) = v101;
        p_dst = &__dst;
        if (!v101)
          goto LABEL_131;
      }
      memmove(p_dst, v100, v101);
LABEL_131:
      v103 = v4 + 224;
      a2 = v107;
      *((_BYTE *)p_dst + v101) = 0;
      goto LABEL_132;
    }
LABEL_147:
    abort();
  }
  __dst = 0uLL;
  *(_QWORD *)&v125 = 0;
  v103 = v4 + 224;
  a2 = v107;
LABEL_132:
  if (*(char *)(v4 + 247) < 0)
    operator delete(*(void **)v103);
  *(_OWORD *)v103 = __dst;
  *(_QWORD *)(v103 + 16) = v125;
  *(_BYTE *)(a2 + 8) &= ~1u;
  v6 = v146;
  v42 = v4;
  v4 = 0;
LABEL_135:
  *(_QWORD *)a2 = v42;
  if ((v6 & 1) != 0)
  {
    v106 = __p;
    __p = 0;
    if (v106)
      (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  }
  else
  {
    if (v134 != v137)
      free(v134);
    if (v133 != &v134)
      free(v133);
    if (__p)
    {
      v132 = __p;
      operator delete(__p);
    }
  }
  if (v4)
  {
    llvm::lto::InputFile::~InputFile((void **)v4);
    MEMORY[0x1CAA32FC0]();
  }
}

char *llvm::lto::InputFile::getName(llvm::lto::InputFile *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 28);
  v1 = (char *)this + 224;
  v2 = v3;
  if (v1[23] >= 0)
    return v1;
  return (char *)v2;
}

uint64_t llvm::lto::InputFile::getSingleBitcodeModule(llvm::lto::InputFile *this)
{
  return *(_QWORD *)this;
}

uint64_t llvm::lto::LTO::RegularLTOState::RegularLTOState(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  llvm::Module *v5;
  llvm::IRMover *v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_DWORD *)(a1 + 24) = a2;
  v4 = a1 + 32;
  sub_1C58ED700((llvm::LLVMContext *)(a1 + 32), a3);
  v5 = (llvm::Module *)operator new();
  *(_QWORD *)(a1 + 72) = llvm::Module::Module((uint64_t)v5, "ld-temp.o", 9uLL, v4);
  v6 = (llvm::IRMover *)operator new();
  *(_QWORD *)(a1 + 80) = llvm::IRMover::IRMover(v6, v5);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  return a1;
}

uint64_t llvm::lto::LTO::ThinLTOState::ThinLTOState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  _QWORD *v7;
  uint64_t v8;
  void (**v9)(void);
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5.n128_f64[0] = sub_1C61A7328(a1 + 32, 0, 0);
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  if (!*(_QWORD *)(a2 + 24))
  {
    v10[0] = &off_1E817E5A0;
    v10[1] = 0;
    v11 = v10;
    v7 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v7 == (_QWORD *)a1)
    {
      v8 = 4;
      v7 = (_QWORD *)a1;
    }
    else
    {
      if (!v7)
        goto LABEL_15;
      v8 = 5;
    }
    (*(void (**)(__n128))(*v7 + 8 * v8))(v5);
    if (!v11)
    {
      *(_QWORD *)(a1 + 24) = 0;
      return a1;
    }
    if (v11 != v10)
    {
      *(_QWORD *)(a1 + 24) = v11;
      return a1;
    }
LABEL_15:
    *(_QWORD *)(a1 + 24) = a1;
    (*(void (**)(_QWORD *, uint64_t, __n128))(v10[0] + 24))(v10, a1, v5);
    if (v11 == v10)
    {
      v9 = (void (**)(void))(v10[0] + 32);
    }
    else
    {
      if (!v11)
        return a1;
      v9 = (void (**)(void))(*v11 + 40);
    }
    (*v9)();
  }
  return a1;
}

uint64_t llvm::lto::createInProcessThinBackend@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_1E817E5A0;
  a2[1] = result & 0xFFFFFFFFFFFFLL;
  a2[3] = a2;
  return result;
}

uint64_t llvm::lto::LTO::LTO(uint64_t a1, __int128 *a2, _QWORD *a3, int a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  _QWORD *v51;
  void (**v52)(void);
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(__int128 *)((char *)a2 + 24);
  v10 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 64) = a2[4];
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  v11 = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_OWORD *)(a1 + 88) = v11;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v12 = a2[8];
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_OWORD *)(a1 + 128) = v12;
  v13 = *((_QWORD *)a2 + 18);
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 160) = v14;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 20) = 0;
  v15 = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *(_OWORD *)(a1 + 184) = v15;
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  v16 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 208) = v16;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  v17 = *(__int128 *)((char *)a2 + 232);
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  *(_OWORD *)(a1 + 232) = v17;
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  *((_QWORD *)a2 + 31) = 0;
  v18 = *((_QWORD *)a2 + 34);
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_QWORD *)(a1 + 272) = v18;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v19 = *((_QWORD *)a2 + 36);
  *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
  *(_QWORD *)(a1 + 288) = v19;
  *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 35) = 0;
  *((_QWORD *)a2 + 36) = 0;
  *((_QWORD *)a2 + 37) = 0;
  v20 = a2[19];
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
  *(_OWORD *)(a1 + 304) = v20;
  *((_QWORD *)a2 + 39) = 0;
  *((_QWORD *)a2 + 40) = 0;
  *((_QWORD *)a2 + 38) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v21 = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = v21;
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  *((_QWORD *)a2 + 43) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 46);
  *((_QWORD *)a2 + 44) = 0;
  *((_QWORD *)a2 + 45) = 0;
  *((_QWORD *)a2 + 46) = 0;
  v22 = (__int128 *)*((_QWORD *)a2 + 50);
  if (v22)
  {
    if (v22 == (__int128 *)((char *)a2 + 376))
    {
      *(_QWORD *)(a1 + 400) = a1 + 376;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 50) + 24))(*((_QWORD *)a2 + 50));
    }
    else
    {
      *(_QWORD *)(a1 + 400) = v22;
      *((_QWORD *)a2 + 50) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 400) = 0;
  }
  v23 = *(__int128 *)((char *)a2 + 408);
  v24 = *(__int128 *)((char *)a2 + 424);
  *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
  *(_OWORD *)(a1 + 408) = v23;
  *(_OWORD *)(a1 + 424) = v24;
  v25 = a2[28];
  *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
  *(_OWORD *)(a1 + 448) = v25;
  *(__int128 *)((char *)a2 + 456) = 0u;
  *((_QWORD *)a2 + 56) = 0;
  v26 = *(__int128 *)((char *)a2 + 472);
  *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
  *(_OWORD *)(a1 + 472) = v26;
  a2[30] = 0u;
  *((_QWORD *)a2 + 59) = 0;
  v27 = a2[31];
  *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
  *(_OWORD *)(a1 + 496) = v27;
  *((_QWORD *)a2 + 64) = 0;
  a2[31] = 0u;
  v28 = *(__int128 *)((char *)a2 + 520);
  *(_QWORD *)(a1 + 536) = *((_QWORD *)a2 + 67);
  *(_OWORD *)(a1 + 520) = v28;
  *((_QWORD *)a2 + 67) = 0;
  *(__int128 *)((char *)a2 + 520) = 0u;
  v29 = a2[34];
  *(_QWORD *)(a1 + 560) = *((_QWORD *)a2 + 70);
  *(_OWORD *)(a1 + 544) = v29;
  *((_QWORD *)a2 + 70) = 0;
  a2[34] = 0u;
  v30 = *(__int128 *)((char *)a2 + 568);
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 73);
  *(_OWORD *)(a1 + 568) = v30;
  *((_QWORD *)a2 + 73) = 0;
  *(__int128 *)((char *)a2 + 568) = 0u;
  v31 = a2[37];
  *(_QWORD *)(a1 + 608) = *((_QWORD *)a2 + 76);
  *(_OWORD *)(a1 + 592) = v31;
  *((_QWORD *)a2 + 76) = 0;
  a2[37] = 0u;
  v32 = *(__int128 *)((char *)a2 + 616);
  *(_QWORD *)(a1 + 632) = *((_QWORD *)a2 + 79);
  *(_OWORD *)(a1 + 616) = v32;
  *((_QWORD *)a2 + 79) = 0;
  *(__int128 *)((char *)a2 + 616) = 0u;
  v33 = a2[40];
  *(_QWORD *)(a1 + 656) = *((_QWORD *)a2 + 82);
  *(_OWORD *)(a1 + 640) = v33;
  *((_QWORD *)a2 + 82) = 0;
  a2[40] = 0u;
  v34 = *(__int128 *)((char *)a2 + 664);
  *(_QWORD *)(a1 + 680) = *((_QWORD *)a2 + 85);
  *(_OWORD *)(a1 + 664) = v34;
  *((_QWORD *)a2 + 85) = 0;
  *(__int128 *)((char *)a2 + 664) = 0u;
  v35 = a2[43];
  *(_QWORD *)(a1 + 704) = *((_QWORD *)a2 + 88);
  *(_OWORD *)(a1 + 688) = v35;
  *((_QWORD *)a2 + 88) = 0;
  a2[43] = 0u;
  v36 = *(__int128 *)((char *)a2 + 712);
  *(_QWORD *)(a1 + 728) = *((_QWORD *)a2 + 91);
  *(_OWORD *)(a1 + 712) = v36;
  *((_QWORD *)a2 + 91) = 0;
  *(__int128 *)((char *)a2 + 712) = 0u;
  v37 = a2[46];
  *(_QWORD *)(a1 + 752) = *((_QWORD *)a2 + 94);
  *(_OWORD *)(a1 + 736) = v37;
  v38 = *(__int128 *)((char *)a2 + 760);
  *(_QWORD *)(a1 + 776) = *((_QWORD *)a2 + 97);
  *(_OWORD *)(a1 + 760) = v38;
  *((_QWORD *)a2 + 97) = 0;
  *(__int128 *)((char *)a2 + 760) = 0u;
  *(_BYTE *)(a1 + 784) = *((_BYTE *)a2 + 784);
  v39 = *(__int128 *)((char *)a2 + 792);
  *(_QWORD *)(a1 + 808) = *((_QWORD *)a2 + 101);
  *(_OWORD *)(a1 + 792) = v39;
  a2[50] = 0u;
  *((_QWORD *)a2 + 99) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 816) = a2[51];
  *(_QWORD *)(a1 + 832) = *((_QWORD *)a2 + 104);
  *((_QWORD *)a2 + 104) = 0;
  a2[51] = 0u;
  v40 = *((_QWORD *)a2 + 105);
  *(_BYTE *)(a1 + 848) = *((_BYTE *)a2 + 848);
  *(_QWORD *)(a1 + 840) = v40;
  v41 = (__int128 *)*((_QWORD *)a2 + 110);
  if (v41)
  {
    if (v41 == (__int128 *)((char *)a2 + 856))
    {
      *(_QWORD *)(a1 + 880) = a1 + 856;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 110) + 24))(*((_QWORD *)a2 + 110));
    }
    else
    {
      *(_QWORD *)(a1 + 880) = v41;
      *((_QWORD *)a2 + 110) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 880) = 0;
  }
  *(_BYTE *)(a1 + 888) = *((_BYTE *)a2 + 888);
  v42 = *((_QWORD *)a2 + 112);
  *((_QWORD *)a2 + 112) = 0;
  *(_QWORD *)(a1 + 896) = v42;
  v43 = *(__int128 *)((char *)a2 + 904);
  *(_DWORD *)(a1 + 920) = *((_DWORD *)a2 + 230);
  *(_OWORD *)(a1 + 904) = v43;
  v44 = (__int128 *)*((_QWORD *)a2 + 119);
  if (v44)
  {
    if (v44 == a2 + 58)
    {
      *(_QWORD *)(a1 + 952) = a1 + 928;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 119) + 24))(*((_QWORD *)a2 + 119));
    }
    else
    {
      *(_QWORD *)(a1 + 952) = v44;
      *((_QWORD *)a2 + 119) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 952) = 0;
  }
  v45 = (__int128 *)*((_QWORD *)a2 + 123);
  if (v45)
  {
    if (v45 == a2 + 60)
    {
      *(_QWORD *)(a1 + 984) = a1 + 960;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 123) + 24))(*((_QWORD *)a2 + 123));
    }
    else
    {
      *(_QWORD *)(a1 + 984) = v45;
      *((_QWORD *)a2 + 123) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 984) = 0;
  }
  v46 = (__int128 *)*((_QWORD *)a2 + 127);
  if (v46)
  {
    if (v46 == a2 + 62)
    {
      *(_QWORD *)(a1 + 1016) = a1 + 992;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 127) + 24))(*((_QWORD *)a2 + 127));
    }
    else
    {
      *(_QWORD *)(a1 + 1016) = v46;
      *((_QWORD *)a2 + 127) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1016) = 0;
  }
  v47 = (__int128 *)*((_QWORD *)a2 + 131);
  if (v47)
  {
    if (v47 == a2 + 64)
    {
      *(_QWORD *)(a1 + 1048) = a1 + 1024;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 131) + 24))(*((_QWORD *)a2 + 131));
    }
    else
    {
      *(_QWORD *)(a1 + 1048) = v47;
      *((_QWORD *)a2 + 131) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1048) = 0;
  }
  v48 = (__int128 *)*((_QWORD *)a2 + 135);
  if (v48)
  {
    if (v48 == a2 + 66)
    {
      *(_QWORD *)(a1 + 1080) = a1 + 1056;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 135) + 24))(*((_QWORD *)a2 + 135));
    }
    else
    {
      *(_QWORD *)(a1 + 1080) = v48;
      *((_QWORD *)a2 + 135) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1080) = 0;
  }
  v49 = (__int128 *)*((_QWORD *)a2 + 139);
  if (v49)
  {
    if (v49 == a2 + 68)
    {
      *(_QWORD *)(a1 + 1112) = a1 + 1088;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 139) + 24))(*((_QWORD *)a2 + 139));
    }
    else
    {
      *(_QWORD *)(a1 + 1112) = v49;
      *((_QWORD *)a2 + 139) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1112) = 0;
  }
  v50 = (__int128 *)*((_QWORD *)a2 + 143);
  if (v50)
  {
    if (v50 == a2 + 70)
    {
      *(_QWORD *)(a1 + 1144) = a1 + 1120;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 143) + 24))(*((_QWORD *)a2 + 143));
    }
    else
    {
      *(_QWORD *)(a1 + 1144) = v50;
      *((_QWORD *)a2 + 143) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1144) = 0;
  }
  llvm::lto::LTO::RegularLTOState::RegularLTOState(a1 + 1152, a4, a1);
  v51 = (_QWORD *)a3[3];
  if (v51)
  {
    if (v51 == a3)
    {
      v55 = v54;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v54);
    }
    else
    {
      v55 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v55 = 0;
  }
  llvm::lto::LTO::ThinLTOState::ThinLTOState(a1 + 1272, (uint64_t)v54);
  if (v55 == v54)
  {
    v52 = (void (**)(void))(v54[0] + 32);
    goto LABEL_55;
  }
  if (v55)
  {
    v52 = (void (**)(void))(*v55 + 40);
LABEL_55:
    (*v52)();
  }
  *(_QWORD *)(a1 + 1752) = 0x2800000000;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_WORD *)(a1 + 1768) = 0;
  *(_BYTE *)(a1 + 1770) = 0;
  *(_QWORD *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_DWORD *)(a1 + 1792) = 0;
  return a1;
}

void llvm::lto::LTO::~LTO(llvm::lto::LTO *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  llvm::Value *v10;
  llvm::lto::LTO *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  llvm::Module *v17;
  uint64_t v18;
  llvm::Module *v19;
  llvm::lto::LTO *v20;
  uint64_t v21;

  v2 = (_BYTE *)*((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v2)
    sub_1C49C7E54((uint64_t)this + 1800, v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 222), 8);
  if (*((_DWORD *)this + 437))
  {
    v3 = *((unsigned int *)this + 436);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*((_QWORD *)this + 217) + v4);
        if (v6 != -8 && v6 != 0)
        {
          if (*(char *)(v6 + 31) < 0)
            operator delete(*(void **)(v6 + 8));
          MEMORY[0x1CAA32FB4](v6, 8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*((void **)this + 217));
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 214), 8);
  if (*((_BYTE *)this + 1704))
  {
    v8 = (void *)*((_QWORD *)this + 210);
    if (v8)
    {
      *((_QWORD *)this + 211) = v8;
      operator delete(v8);
    }
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 207), 8);
    *((_BYTE *)this + 1704) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 204);
  if (v9)
  {
    *((_QWORD *)this + 205) = v9;
    operator delete(v9);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 201), 8);
  sub_1C61A8910((uint64_t)this + 1304);
  v11 = (llvm::lto::LTO *)*((_QWORD *)this + 162);
  if (v11 == (llvm::lto::LTO *)((char *)this + 1272))
  {
    v12 = 4;
    v11 = (llvm::lto::LTO *)((char *)this + 1272);
  }
  else
  {
    if (!v11)
      goto LABEL_25;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_25:
  v13 = *((_QWORD *)this + 155);
  if (v13)
  {
    v14 = *((_QWORD *)this + 156);
    v15 = (void *)*((_QWORD *)this + 155);
    if (v14 != v13)
    {
      do
      {
        v16 = *(void **)(v14 - 24);
        if (v16)
        {
          *(_QWORD *)(v14 - 16) = v16;
          operator delete(v16);
        }
        v17 = *(llvm::Module **)(v14 - 32);
        *(_QWORD *)(v14 - 32) = 0;
        if (v17)
        {
          llvm::Module::~Module(v17);
          MEMORY[0x1CAA32FC0]();
        }
        v14 -= 32;
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 155);
    }
    *((_QWORD *)this + 156) = v13;
    operator delete(v15);
  }
  v18 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v18)
  {
    sub_1C4E43068(v18 + 56);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v18 + 56), 8);
    sub_1C56D815C((_QWORD *)(v18 + 8));
    MEMORY[0x1CAA32FC0](v18, 0x1020C4072D9ABE8);
  }
  v19 = (llvm::Module *)*((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v19)
  {
    llvm::Module::~Module(v19);
    MEMORY[0x1CAA32FC0]();
  }
  v20 = (llvm::lto::LTO *)*((_QWORD *)this + 152);
  if (v20 == (llvm::lto::LTO *)((char *)this + 1192))
  {
    v21 = 4;
    v20 = (llvm::lto::LTO *)((char *)this + 1192);
    goto LABEL_42;
  }
  if (v20)
  {
    v21 = 5;
LABEL_42:
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  }
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)this + 148, v10);
  sub_1C4FCEA58(*((char **)this + 145));
  sub_1C58ED854((uint64_t)this);
}

void llvm::lto::LTO::addModuleToGlobalRes(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11;
  size_t v12;
  unsigned __int8 *v13;
  char *v16;
  char v17;
  char v18;
  unsigned int v19;
  int v20;
  size_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t *i;
  void **v40;
  int v41;
  size_t v43;
  const void *v44;
  __int128 *p_dst;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  int v50;
  int v51;
  _QWORD *v52;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  llvm::StringMapImpl *v57;
  char *v58;
  char v59;
  uint64_t v60;
  __int128 __dst;
  unint64_t v63;
  __int16 v64;
  void *__p;
  char v66;
  int v67;

  v11 = *(_QWORD *)(a1 + 1224) + 216;
  v64 = 260;
  *(_QWORD *)&__dst = v11;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&__dst);
  if (a3)
  {
    v56 = a2 + 80 * a3;
    v57 = (llvm::StringMapImpl *)(a1 + 1736);
    v54 = a7 ^ 1;
    v55 = (_QWORD *)(a1 + 1748);
    do
    {
      v13 = *(unsigned __int8 **)a2;
      v12 = *(_QWORD *)(a2 + 8);
      if (v67 == 1 && v12 >= 6 && *(_DWORD *)v13 == 1835622239 && *((_WORD *)v13 + 2) == 24432)
      {
        v13 += 6;
        v12 -= 6;
      }
      v18 = *a4;
      v16 = a4 + 4;
      v17 = v18;
      v19 = *(_DWORD *)(a1 + 1744);
      if (!v19)
      {
        *v55 = 0;
        v52 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v52)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v52[16] = 2;
        *(_QWORD *)(a1 + 1736) = v52;
        v19 = 16;
        *(_DWORD *)(a1 + 1744) = 16;
      }
      v58 = v16;
      v60 = a2;
      v59 = v17;
      v20 = 0;
      if (v12)
      {
        v21 = v12;
        v22 = v13;
        do
        {
          v23 = *v22++;
          v20 = 33 * v20 + v23;
          --v21;
        }
        while (v21);
      }
      v24 = *(_QWORD *)v57;
      v25 = v19 - 1;
      v26 = *(_QWORD *)v57 + 8 * v19 + 8;
      v27 = -1;
      v28 = 1;
      v29 = v20;
      while (1)
      {
        v30 = v29 & v25;
        v31 = *(_QWORD *)(v24 + 8 * v30);
        if (!v31)
          break;
        if (v31 == -8)
        {
          if (v27 == -1)
            v27 = v29 & v25;
        }
        else if (*(_DWORD *)(v26 + 4 * v30) == v20
               && v12 == *(_QWORD *)v31
               && (!v12 || !memcmp(v13, (const void *)(v31 + *(unsigned int *)(a1 + 1756)), v12)))
        {
          goto LABEL_33;
        }
        v29 = v28 + v30;
        ++v28;
      }
      v32 = v27;
      if (v27 == -1)
      {
        v32 = v30;
        v30 = v30;
      }
      else
      {
        v30 = v27;
      }
      *(_DWORD *)(v26 + 4 * v32) = v20;
      v31 = *(_QWORD *)(v24 + 8 * v30);
LABEL_33:
      if (v31 == -8)
      {
        v33 = v60;
        --*(_DWORD *)(a1 + 1752);
        v34 = v59;
      }
      else
      {
        v33 = v60;
        v34 = v59;
        if (v31)
          goto LABEL_46;
      }
      v35 = (char *)operator new(v12 + 41, (std::align_val_t)8uLL);
      v36 = v35;
      v37 = v35 + 40;
      if (v12)
        memcpy(v35 + 40, v13, v12);
      v37[v12] = 0;
      *(_QWORD *)v36 = v12;
      *(_OWORD *)(v36 + 24) = 0u;
      *(_OWORD *)(v36 + 8) = 0u;
      v36[34] = 1;
      *((_DWORD *)v36 + 9) = -1;
      *(_QWORD *)(v24 + 8 * v30) = v36;
      ++*(_DWORD *)v55;
      for (i = (uint64_t *)(*(_QWORD *)v57 + 8 * llvm::StringMapImpl::RehashTable(v57, v30)); ; ++i)
      {
        v31 = *i;
        if (*i && v31 != -8)
          break;
      }
LABEL_46:
      v40 = (void **)(v31 + 8);
      v41 = (*(_DWORD *)(v33 + 36) >> 12) & 1;
      if (!*(_BYTE *)(v31 + 34))
        LOBYTE(v41) = 0;
      *(_BYTE *)(v31 + 34) = v41;
      if ((v34 & 1) != 0)
      {
        *(_BYTE *)(v31 + 35) = 1;
LABEL_53:
        v43 = *(_QWORD *)(v33 + 24);
        if (v43 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v44 = *(const void **)(v33 + 16);
        if (v43 >= 0x17)
        {
          v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43 | 7) != 0x17)
            v46 = v43 | 7;
          v47 = v46 + 1;
          p_dst = (__int128 *)operator new(v46 + 1);
          *((_QWORD *)&__dst + 1) = v43;
          v63 = v47 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v63) = *(_QWORD *)(v33 + 24);
          p_dst = &__dst;
          if (!v43)
            goto LABEL_61;
        }
        memmove(p_dst, v44, v43);
LABEL_61:
        *((_BYTE *)p_dst + v43) = 0;
        if (*(char *)(v31 + 31) < 0)
          operator delete(*v40);
        v48 = __dst;
        *(_QWORD *)(v31 + 24) = v63;
        *(_OWORD *)v40 = v48;
        goto LABEL_64;
      }
      if (!*(_BYTE *)(v31 + 35) && !(*(char *)(v31 + 31) < 0 ? *(_QWORD *)(v31 + 16) : *(unsigned __int8 *)(v31 + 31)))
        goto LABEL_53;
LABEL_64:
      if ((v34 & 0x14) == 0
        && (*(_BYTE *)(v33 + 36) & 0x80) == 0
        && ((v49 = *(_DWORD *)(v31 + 36), v49 == -1) || v49 == a6))
      {
        v50 = a6;
      }
      else
      {
        v50 = -2;
      }
      *(_DWORD *)(v31 + 36) = v50;
      a4 = v58;
      if ((v34 & 4) != 0)
        LOBYTE(v51) = 1;
      else
        v51 = v54 | (*(unsigned __int8 *)(v33 + 36) >> 7);
      *(_BYTE *)(v31 + 32) |= v51;
      *(_BYTE *)(v31 + 33) |= (v34 & 8) != 0;
      a2 = v33 + 80;
    }
    while (a2 != v56);
  }
  if (v66 < 0)
    operator delete(__p);
}

void llvm::lto::LTO::add(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  char v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  const void *v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[4];
  __int16 v49;
  void *__p[2];
  char v51;
  int v52;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  v10 = *(llvm::raw_ostream **)(a1 + 896);
  if (v10)
  {
    v11 = *(_QWORD **)a2;
    v12 = *(_BYTE *)(*(_QWORD *)a2 + 247);
    v13 = v12;
    if (v12 >= 0)
      v14 = (const void *)(*(_QWORD *)a2 + 224);
    else
      v14 = *(const void **)(*(_QWORD *)a2 + 224);
    v15 = v12 & 0x7F;
    if (v13 >= 0)
      v16 = v15;
    else
      v16 = v11[29];
    v17 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (v16 <= *((_QWORD *)v10 + 3) - (_QWORD)v17)
    {
      if (v16)
      {
        memcpy(v17, v14, v16);
        v17 = (_BYTE *)(*((_QWORD *)v10 + 4) + v16);
        *((_QWORD *)v10 + 4) = v17;
      }
      v18 = v10;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v10, (const char *)v14, v16);
      v17 = (_BYTE *)*((_QWORD *)v18 + 4);
    }
    v45 = v8;
    v46 = v7;
    if ((unint64_t)v17 >= *((_QWORD *)v18 + 3))
    {
      llvm::raw_ostream::write(v18, 10);
    }
    else
    {
      *((_QWORD *)v18 + 4) = v17 + 1;
      *v17 = 10;
    }
    v19 = v11[6];
    v20 = v11[7];
    if (v20 != v19)
    {
      v21 = (char *)a3;
      do
      {
        v23 = *v21;
        v21 += 4;
        v22 = v23;
        v24 = *((_QWORD *)v10 + 4);
        if ((unint64_t)(*((_QWORD *)v10 + 3) - v24) > 2)
        {
          *(_BYTE *)(v24 + 2) = 61;
          *(_WORD *)v24 = 29229;
          v26 = (_BYTE *)(*((_QWORD *)v10 + 4) + 3);
          *((_QWORD *)v10 + 4) = v26;
          v25 = v10;
        }
        else
        {
          v25 = llvm::raw_ostream::write(v10, "-r=", 3uLL);
          v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        }
        if (v16 <= *((_QWORD *)v25 + 3) - (_QWORD)v26)
        {
          if (v16)
          {
            memcpy(v26, v14, v16);
            v26 = (_BYTE *)(*((_QWORD *)v25 + 4) + v16);
            *((_QWORD *)v25 + 4) = v26;
          }
        }
        else
        {
          v25 = llvm::raw_ostream::write(v25, (const char *)v14, v16);
          v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        }
        if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
        {
          llvm::raw_ostream::write(v25, 44);
        }
        else
        {
          *((_QWORD *)v25 + 4) = v26 + 1;
          *v26 = 44;
        }
        v27 = *(const void **)v19;
        v28 = *(_QWORD *)(v19 + 8);
        v29 = (_BYTE *)*((_QWORD *)v25 + 4);
        if (v28 <= *((_QWORD *)v25 + 3) - (_QWORD)v29)
        {
          if (v28)
          {
            memcpy(v29, v27, *(_QWORD *)(v19 + 8));
            v29 = (_BYTE *)(*((_QWORD *)v25 + 4) + v28);
            *((_QWORD *)v25 + 4) = v29;
          }
        }
        else
        {
          v25 = llvm::raw_ostream::write(v25, (const char *)v27, *(_QWORD *)(v19 + 8));
          v29 = (_BYTE *)*((_QWORD *)v25 + 4);
        }
        if ((unint64_t)v29 >= *((_QWORD *)v25 + 3))
        {
          llvm::raw_ostream::write(v25, 44);
          if ((v22 & 1) == 0)
            goto LABEL_37;
        }
        else
        {
          *((_QWORD *)v25 + 4) = v29 + 1;
          *v29 = 44;
          if ((v22 & 1) == 0)
            goto LABEL_37;
        }
        v30 = (_BYTE *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v30 < *((_QWORD *)v10 + 3))
        {
          *((_QWORD *)v10 + 4) = v30 + 1;
          *v30 = 112;
LABEL_37:
          if ((v22 & 2) == 0)
            goto LABEL_38;
          goto LABEL_43;
        }
        llvm::raw_ostream::write(v10, 112);
        if ((v22 & 2) == 0)
        {
LABEL_38:
          if ((v22 & 4) == 0)
            goto LABEL_39;
          goto LABEL_48;
        }
LABEL_43:
        v32 = (_BYTE *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v32 >= *((_QWORD *)v10 + 3))
        {
          llvm::raw_ostream::write(v10, 108);
          if ((v22 & 4) == 0)
          {
LABEL_39:
            if ((v22 & 0x10) == 0)
              goto LABEL_52;
            goto LABEL_40;
          }
        }
        else
        {
          *((_QWORD *)v10 + 4) = v32 + 1;
          *v32 = 108;
          if ((v22 & 4) == 0)
            goto LABEL_39;
        }
LABEL_48:
        v33 = (_BYTE *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v33 >= *((_QWORD *)v10 + 3))
        {
          llvm::raw_ostream::write(v10, 120);
          if ((v22 & 0x10) == 0)
            goto LABEL_52;
        }
        else
        {
          *((_QWORD *)v10 + 4) = v33 + 1;
          *v33 = 120;
          if ((v22 & 0x10) == 0)
            goto LABEL_52;
        }
LABEL_40:
        v31 = (_BYTE *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v31 >= *((_QWORD *)v10 + 3))
        {
          llvm::raw_ostream::write(v10, 114);
        }
        else
        {
          *((_QWORD *)v10 + 4) = v31 + 1;
          *v31 = 114;
        }
LABEL_52:
        v34 = (_BYTE *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v34 >= *((_QWORD *)v10 + 3))
        {
          llvm::raw_ostream::write(v10, 10);
        }
        else
        {
          *((_QWORD *)v10 + 4) = v34 + 1;
          *v34 = 10;
        }
        v19 += 80;
      }
      while (v19 != v20);
    }
    v35 = (const char *)*((_QWORD *)v10 + 4);
    v36 = (const char *)*((_QWORD *)v10 + 2);
    v8 = v45;
    v7 = v46;
    v5 = a4;
    v6 = a3;
    if (v35 != v36)
    {
      *((_QWORD *)v10 + 4) = v36;
      llvm::raw_ostream::flush_tied_then_write(v10, v36, v35 - v36);
    }
  }
  v37 = *(_QWORD *)(v8 + 1224);
  if (*(char *)(v37 + 239) < 0)
  {
    if (*(_QWORD *)(v37 + 224))
      goto LABEL_68;
  }
  else if (*(_BYTE *)(v37 + 239))
  {
    goto LABEL_68;
  }
  sub_1C4D828E4(v37, *(void **)(*(_QWORD *)v7 + 96), *(_QWORD *)(*(_QWORD *)v7 + 104));
  v39 = *(_QWORD *)(*(_QWORD *)v7 + 96);
  v38 = *(_QWORD *)(*(_QWORD *)v7 + 104);
  v49 = 261;
  v48[0] = v39;
  v48[1] = v38;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v48);
  v40 = v52;
  if (v51 < 0)
    operator delete(__p[0]);
  if (v40 == 3)
    *(_DWORD *)(v8 + 444) = 1;
LABEL_68:
  __p[0] = v6;
  v41 = *(_QWORD **)v7;
  if (*(_QWORD *)(*(_QWORD *)v7 + 8) == **(_QWORD **)v7)
  {
LABEL_72:
    *a5 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    v43 = (uint64_t)v6 + 4 * v5;
    while (1)
    {
      llvm::lto::LTO::addModule(v8, v41, v42, (char **)__p, v43, a5);
      if (*a5)
        break;
      v42 = (v42 + 1);
      v41 = *(_QWORD **)v7;
      if (v42 == (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 8) - **(_QWORD **)v7) >> 6)
        goto LABEL_72;
    }
  }
}

void llvm::lto::LTO::addModule(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, char **a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  _BYTE *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  void *v39;
  llvm::Module *v40;
  uint64_t v41;
  void *__p[2];
  __int128 v43;
  __int128 v44[4];
  _OWORD v45[4];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  llvm::BitcodeModule::getLTOInfo((llvm::BitcodeModule *)(*a2 + ((unint64_t)a3 << 6)), (uint64_t)&v53);
  if ((v54 & 1) != 0)
  {
    *a6 = v53;
    return;
  }
  if (!*(_BYTE *)(a1 + 1770))
  {
    v12 = (_BYTE *)(a1 + 1770);
    *(_BYTE *)(a1 + 1769) = BYTE2(v53);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a1 + 1769) != BYTE2(v53))
  {
    v12 = (_BYTE *)(a1 + 1439);
LABEL_7:
    *v12 = 1;
  }
  v13 = (__int128 *)(*a2 + (v11 << 6));
  v14 = v13[3];
  v16 = *v13;
  v15 = v13[1];
  v48 = v13[2];
  v49 = v14;
  v46 = v16;
  v47 = v15;
  v17 = (_QWORD *)(a2[9] + 16 * v11);
  v18 = a2[6] + 80 * *v17;
  v19 = 0xCCCCCCCCCCCCCCCDLL * ((80 * (v17[1] - *v17)) >> 4);
  if ((_BYTE)v53)
    v20 = -858993459 * ((*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 4) + 1;
  else
    v20 = 0;
  llvm::lto::LTO::addModuleToGlobalRes(a1, v18, v19, *a4, (a5 - (uint64_t)*a4) >> 2, v20, BYTE1(v53));
  if ((_BYTE)v53)
  {
    v45[0] = v46;
    v45[1] = v47;
    v45[2] = v48;
    v45[3] = v49;
    llvm::lto::LTO::addThinLTO(a1, (uint64_t)v45, v18, v19, a4, a6);
  }
  else
  {
    *(_BYTE *)(a1 + 1264) = 0;
    v44[0] = v46;
    v44[1] = v47;
    v44[2] = v48;
    v44[3] = v49;
    llvm::lto::LTO::addRegularLTO(a1, v44, v18, v19, a4, (uint64_t)&v50);
    if ((v52 & 1) != 0)
    {
      *a6 = v50;
    }
    else
    {
      if (BYTE1(v53))
      {
        llvm::BitcodeModule::readSummary((uint64_t)&v46, a1 + 1304, (uint64_t)"", 0, -1, a6);
        if (!*a6)
        {
          v21 = *(char **)(a1 + 1248);
          v22 = *(_QWORD *)(a1 + 1256);
          if ((unint64_t)v21 >= v22)
          {
            v26 = *(char **)(a1 + 1240);
            v27 = (v21 - v26) >> 5;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 59)
              abort();
            v29 = v22 - (_QWORD)v26;
            if (v29 >> 4 > v28)
              v28 = v29 >> 4;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
              v30 = 0x7FFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30 >> 59)
              sub_1C4764EE4();
            v31 = (char *)operator new(32 * v30);
            v32 = v50;
            v33 = v51;
            v34 = &v31[32 * v27];
            v35 = &v31[32 * v30];
            *((_QWORD *)v34 + 2) = 0;
            *((_QWORD *)v34 + 3) = 0;
            v50 = 0uLL;
            *(_OWORD *)v34 = v32;
            *((_OWORD *)v34 + 1) = v33;
            v36 = v34 + 32;
            v51 = 0uLL;
            if (v21 == v26)
            {
              *(_QWORD *)(a1 + 1240) = v34;
              *(_QWORD *)(a1 + 1248) = v36;
              *(_QWORD *)(a1 + 1256) = v35;
            }
            else
            {
              do
              {
                v37 = *((_OWORD *)v21 - 2);
                v21 -= 32;
                *(_QWORD *)v21 = 0;
                *((_OWORD *)v34 - 2) = v37;
                v34 -= 32;
                *((_QWORD *)v34 + 2) = *((_QWORD *)v21 + 2);
                *((_QWORD *)v34 + 3) = *((_QWORD *)v21 + 3);
                *((_QWORD *)v21 + 1) = 0;
                *((_QWORD *)v21 + 2) = 0;
                *((_QWORD *)v21 + 3) = 0;
              }
              while (v21 != v26);
              v21 = *(char **)(a1 + 1240);
              v38 = *(char **)(a1 + 1248);
              *(_QWORD *)(a1 + 1240) = v34;
              *(_QWORD *)(a1 + 1248) = v36;
              *(_QWORD *)(a1 + 1256) = v35;
              while (v38 != v21)
              {
                v39 = (void *)*((_QWORD *)v38 - 3);
                if (v39)
                {
                  *((_QWORD *)v38 - 2) = v39;
                  operator delete(v39);
                }
                v40 = (llvm::Module *)*((_QWORD *)v38 - 4);
                *((_QWORD *)v38 - 4) = 0;
                if (v40)
                {
                  llvm::Module::~Module(v40);
                  MEMORY[0x1CAA32FC0]();
                }
                v38 -= 32;
              }
            }
            if (v21)
              operator delete(v21);
            *(_QWORD *)(a1 + 1248) = v36;
          }
          else
          {
            v23 = v50;
            v24 = v51;
            v50 = 0uLL;
            *(_OWORD *)v21 = v23;
            *((_OWORD *)v21 + 1) = v24;
            v51 = 0uLL;
            *(_QWORD *)(a1 + 1248) = v21 + 32;
          }
          *a6 = 0;
        }
      }
      else
      {
        v25 = v50;
        v50 = 0uLL;
        *(_OWORD *)__p = v25;
        v43 = v51;
        v51 = 0uLL;
        llvm::lto::LTO::linkRegularLTO((_QWORD *)a1, (uint64_t)__p, 0, a6);
        if (__p[1])
          operator delete(__p[1]);
        if (__p[0])
        {
          llvm::Module::~Module((llvm::Module *)__p[0]);
          MEMORY[0x1CAA32FC0]();
        }
      }
      if (*((_QWORD *)&v50 + 1))
        operator delete(*((void **)&v50 + 1));
      if ((_QWORD)v50)
      {
        llvm::Module::~Module((llvm::Module *)v50);
        MEMORY[0x1CAA32FC0]();
      }
    }
  }
  if ((v54 & 1) != 0)
  {
    v41 = v53;
    v53 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
}

void llvm::lto::LTO::addThinLTO(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  char v17;
  int *p_p;
  size_t size;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  BOOL v39;
  char *v40;
  size_t v41;
  size_t v42;
  __int128 v43;
  __int128 v44;
  llvm *v45;
  llvm::raw_ostream *v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  _DWORD *v49;
  const void *v50;
  unint64_t v51;
  std::string __p;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v11 = a6;
  v60 = *MEMORY[0x1E0C80C00];
  v12 = a1 + 1304;
  llvm::BitcodeModule::readSummary(a2, a1 + 1304, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 4), a6);
  if (!*v11)
  {
    if (a4)
    {
      v13 = 80 * a4;
      v14 = (uint64_t *)(a3 + 24);
      do
      {
        v15 = *a5;
        *a5 += 4;
        v16 = *v14;
        if (*v14)
        {
          v17 = *v15;
          v53 = 0;
          llvm::GlobalValue::getGlobalIdentifier("", 0, (_BYTE *)*(v14 - 1), v16, 0, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = (int *)&__p;
          else
            p_p = (int *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v55 = xmmword_1C85F4BB0;
          *(_QWORD *)&v56 = 0;
          llvm::MD5::update((int *)&v55, p_p, size);
          llvm::MD5::final((int *)&v55, (int *)&v54);
          v20 = v54;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v53 = v20;
          if ((v17 & 1) != 0)
          {
            v22 = v11;
            v23 = *(_QWORD *)(a2 + 16);
            v24 = *(_QWORD *)(a2 + 24);
            v25 = sub_1C61D0EF8((uint64_t *)(a1 + 1712), &v53);
            v25[1] = v23;
            v25[2] = v24;
            v11 = v22;
            if ((v17 & 0x10) != 0)
            {
              v26 = sub_1C58E68C0(v12, v53, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
              if (v26)
                *(_WORD *)(v26 + 12) = *(_WORD *)(v26 + 12) & 0xFFF0 | 4;
            }
          }
          if ((v17 & 2) != 0)
          {
            v21 = sub_1C58E68C0(v12, v53, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
            if (v21)
              *(_WORD *)(v21 + 12) |= 0x100u;
          }
        }
        v14 += 10;
        v13 -= 80;
      }
      while (v13);
    }
    v27 = *(_OWORD *)a2;
    v55 = *(_OWORD *)(a2 + 16);
    v56 = v27;
    v28 = *(_OWORD *)(a2 + 32);
    v57 = *(_OWORD *)(a2 + 16);
    v58 = v28;
    v59 = *(_OWORD *)(a2 + 48);
    if ((sub_1C58EAC3C((_QWORD *)(a1 + 1608), &v55) & 1) != 0)
    {
      v32 = *(_QWORD *)(a1 + 816);
      v33 = *(_QWORD *)(a1 + 824);
      if (v32 == v33)
        goto LABEL_50;
      v34 = (_QWORD *)(a1 + 1656);
      if (!*(_BYTE *)(a1 + 1704))
      {
        *v34 = 0;
        *(_QWORD *)(a1 + 1664) = 0;
        *(_DWORD *)(a1 + 1672) = 0;
        *(_QWORD *)(a1 + 1680) = 0;
        *(_QWORD *)(a1 + 1696) = 0;
        *(_QWORD *)(a1 + 1688) = 0;
        *(_BYTE *)(a1 + 1704) = 1;
        MEMORY[0x1CAA32FB4](0, 8);
        v32 = *(_QWORD *)(a1 + 816);
        v33 = *(_QWORD *)(a1 + 824);
      }
      if (v32 == v33)
      {
LABEL_50:
        v31 = 0;
      }
      else
      {
        v35 = v11;
        do
        {
          v36 = *(_QWORD *)(a2 + 16);
          v37 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)&v55 = v36;
          *((_QWORD *)&v55 + 1) = v37;
          v38 = *(_BYTE *)(v32 + 23);
          v39 = v38 < 0;
          if (v38 >= 0)
            v40 = (char *)v32;
          else
            v40 = *(char **)v32;
          v41 = v38 & 0x7F;
          if (v39)
            v42 = *(_QWORD *)(v32 + 8);
          else
            v42 = v41;
          if (llvm::StringRef::find((uint64_t *)&v55, v40, v42, 0) != -1)
          {
            *(_QWORD *)&v55 = v36;
            *((_QWORD *)&v55 + 1) = v37;
            v43 = *(_OWORD *)(a2 + 16);
            v56 = *(_OWORD *)a2;
            v57 = v43;
            v44 = *(_OWORD *)(a2 + 48);
            v58 = *(_OWORD *)(a2 + 32);
            v59 = v44;
            v45 = (llvm *)sub_1C58EAC3C(v34, &v55);
            v46 = (llvm::raw_ostream *)llvm::errs(v45);
            v47 = v46;
            v48 = *((_QWORD *)v46 + 4);
            if ((unint64_t)(*((_QWORD *)v46 + 3) - v48) > 0x13)
            {
              *(_DWORD *)(v48 + 16) = 543649385;
              *(_OWORD *)v48 = *(_OWORD *)"[ThinLTO] Selecting ";
              v49 = (_DWORD *)(*((_QWORD *)v46 + 4) + 20);
              *((_QWORD *)v47 + 4) = v49;
            }
            else
            {
              v47 = llvm::raw_ostream::write(v46, "[ThinLTO] Selecting ", 0x14uLL);
              v49 = (_DWORD *)*((_QWORD *)v47 + 4);
            }
            v50 = *(const void **)(a2 + 16);
            v51 = *(_QWORD *)(a2 + 24);
            if (v51 <= *((_QWORD *)v47 + 3) - (_QWORD)v49)
            {
              if (v51)
              {
                memcpy(v49, v50, *(_QWORD *)(a2 + 24));
                v49 = (_DWORD *)(*((_QWORD *)v47 + 4) + v51);
                *((_QWORD *)v47 + 4) = v49;
              }
            }
            else
            {
              v47 = llvm::raw_ostream::write(v47, (const char *)v50, *(_QWORD *)(a2 + 24));
              v49 = (_DWORD *)*((_QWORD *)v47 + 4);
            }
            if (*((_QWORD *)v47 + 3) - (_QWORD)v49 > 0xBuLL)
            {
              v49[2] = 174419049;
              *(_QWORD *)v49 = *(_QWORD *)" to compile\n";
              *((_QWORD *)v47 + 4) += 12;
            }
            else
            {
              llvm::raw_ostream::write(v47, " to compile\n", 0xCuLL);
            }
          }
          v32 += 24;
        }
        while (v32 != v33);
        v31 = 0;
        v11 = v35;
      }
    }
    else
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v30 = qword_1ED836B58[0];
      v31 = operator new();
      *(_QWORD *)&v55 = "Expected at most one ThinLTO module per bitcode file";
      LOWORD(v57) = 259;
      *(_QWORD *)v31 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v55, (_QWORD *)(v31 + 8));
      *(_QWORD *)(v31 + 32) = 3;
      *(_QWORD *)(v31 + 40) = v30;
      *(_BYTE *)(v31 + 48) = 1;
    }
    *v11 = v31;
  }
}

uint64_t llvm::lto::LTO::addRegularLTO@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t a6@<X8>)
{
  llvm::Module *v9;
  llvm *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t i;
  llvm::GlobalAlias *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  char **v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  unsigned int v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char v51;
  BOOL v52;
  std::string::size_type v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t AliaseeObject;
  unint64_t v81;
  uint64_t *v82;
  uint64_t **j;
  uint64_t **v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  std::string::size_type v90;
  const void *v91;
  std::string *p_dst;
  uint64_t v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t **v97;
  char v98;
  std::string::size_type size;
  std::string *v100;
  _QWORD *v101;
  const void *v102;
  const void *v103;
  size_t v104;
  const void *v105;
  size_t v106;
  size_t v107;
  size_t v108;
  int v109;
  _BOOL4 v110;
  size_t v111;
  int v112;
  _BOOL4 v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  unint64_t v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  std::string::size_type v125;
  std::string::size_type v126;
  std::string::size_type v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  unint64_t v136;
  int v137;
  unsigned int v138;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  std::string::size_type v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  std::string *v158;
  std::string::size_type v159;
  void **v160;
  std::string::size_type v161;
  void **v162;
  size_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t **v170;
  _QWORD *v171;
  unint64_t *v173;
  unint64_t *v174;
  unint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char v182;
  std::string v183;
  void *__p[2];
  uint64_t v185;
  void **v186;
  std::string __dst;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t **v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196[2];
  int v197;
  void *v198;
  uint64_t v199;
  _BYTE v200[32];
  char *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD v205[4];
  _QWORD v206[5];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  int v211;
  llvm *v212;
  char v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  llvm::BitcodeModule::getModuleImpl(a2, a1 + 1184, 0, 1, 0, (uint64_t)sub_1C5017E80, (uint64_t)&v204, (uint64_t)&v212);
  v10 = v212;
  v212 = 0;
  if ((v213 & 1) != 0)
  {
    *(_BYTE *)(a6 + 32) |= 1u;
    *(_QWORD *)a6 = v10;
    return sub_1C4FF9CA4((uint64_t)&v212);
  }
  v11 = *((_QWORD *)v10 + 20);
  if (!v11 || ((*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 32))(&v204), (v165 = v204) == 0))
  {
    v169 = a1;
    v177 = a3;
    v166 = a6;
    llvm::UpgradeDebugInfo(v10, v9);
    v204 = 0;
    v205[0] = 0;
    v205[1] = 0;
    v205[2] = v206;
    v205[3] = 0x400000000;
    v206[4] = (char *)&v207 + 8;
    v207 = 0u;
    v208 = 0u;
    v209 = 0u;
    v210 = 0u;
    v211 = 0;
    llvm::ModuleSymbolTable::addModule((llvm::ModuleSymbolTable *)&v204, v10);
    v12 = (_QWORD *)((char *)v10 + 8);
    v167 = (uint64_t)v10;
    v13 = (_QWORD *)*((_QWORD *)v10 + 2);
    if (v13 != (_QWORD *)((char *)v10 + 8))
    {
      v180 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        if (v13)
          v16 = v13 - 7;
        else
          v16 = 0;
        if ((v16[4] & 0xF) == 6)
        {
          if (v14 >= v180)
          {
            v18 = (v14 - (char *)v15) >> 3;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61)
LABEL_330:
              abort();
            if ((v180 - (char *)v15) >> 2 > v19)
              v19 = (v180 - (char *)v15) >> 2;
            if ((unint64_t)(v180 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
            {
              if (v20 >> 61)
LABEL_331:
                sub_1C4764EE4();
              v21 = (char *)operator new(8 * v20);
            }
            else
            {
              v21 = 0;
            }
            v22 = (unint64_t *)&v21[8 * v18];
            *v22 = (unint64_t)v16;
            v17 = v22 + 1;
            if (v14 != (char *)v15)
            {
              do
              {
                v23 = *((_QWORD *)v14 - 1);
                v14 -= 8;
                *--v22 = v23;
              }
              while (v14 != (char *)v15);
              v14 = (char *)v15;
            }
            v15 = v22;
            v180 = &v21[8 * v20];
            if (v14)
              operator delete(v14);
            goto LABEL_12;
          }
          *(_QWORD *)v14 = v16;
          v14 += 8;
        }
        v17 = (unint64_t *)v14;
LABEL_12:
        v13 = (_QWORD *)v13[1];
        v14 = (char *)v17;
        if (v13 == v12)
          goto LABEL_31;
      }
    }
    v15 = 0;
    v17 = 0;
    v180 = 0;
LABEL_31:
    v196[0] = 0;
    v196[1] = 0;
    v197 = 0;
    v24 = *(_QWORD *)(v167 + 48);
    v168 = v167 + 40;
    for (i = v177; v24 != v168; v24 = *(_QWORD *)(v24 + 8))
    {
      if (v24)
        v26 = (llvm::GlobalAlias *)(v24 - 48);
      else
        v26 = 0;
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__r.__words[0] = llvm::GlobalAlias::getAliaseeObject(v26);
      if (__dst.__r_.__value_.__r.__words[0])
      {
        v198 = 0;
        if ((sub_1C614F7B0(v196, &__dst, &v198) & 1) == 0)
        {
          v27 = sub_1C614F84C((uint64_t)v196, (uint64_t)&__dst, &__dst, v198);
          *v27 = __dst.__r_.__value_.__r.__words[0];
        }
      }
    }
    v171 = v12;
    v28 = (uint64_t *)v209;
    v29 = v209 - *((_QWORD *)&v208 + 1);
    v30 = *((_QWORD *)&v208 + 1) - 8;
    while (v29)
    {
      v31 = *(_QWORD *)(v30 + 8);
      v30 += 8;
      v29 -= 8;
      if ((llvm::ModuleSymbolTable::getSymbolFlags((uint64_t)&v204, v31) & 0x82) == 2)
      {
        v32 = (uint64_t *)v30;
        goto LABEL_45;
      }
    }
    v32 = v28;
LABEL_45:
    v194 = 0;
    v195 = 0;
    v193 = &v194;
    v198 = v200;
    v199 = 0x200000000;
    v202 = 0;
    v203 = 0;
    v201 = (char *)&v202;
    v33 = v171;
    v34 = a5;
    if (a4)
    {
      v176 = v177 + 80 * a4;
      v170 = (uint64_t **)(v169 + 1160);
      while (1)
      {
        v35 = *v34;
        *v34 += 4;
        v36 = *v35;
        v39 = *v32;
        v38 = v32 + 1;
        v37 = v39;
        while (v38 != v28)
        {
          v40 = *v38++;
          if ((llvm::ModuleSymbolTable::getSymbolFlags((uint64_t)&v204, v40) & 0x82) == 2)
          {
            v32 = v38 - 1;
            goto LABEL_52;
          }
        }
        v32 = v28;
LABEL_52:
        v41 = v37 & 0xFFFFFFFFFFFFFFF8;
        if ((v37 & 4) == 0)
        {
          if (v41)
            break;
        }
        if ((v37 & 4) != 0)
          v50 = v37 & 0xFFFFFFFFFFFFFFF8;
        else
          v50 = 0;
        v182 = v36;
        if ((v36 & 1) == 0)
        {
          v51 = *(_BYTE *)(v50 + 23);
          v52 = v51 < 0;
          v53 = *(_QWORD *)(v50 + 8);
          if (v51 < 0)
            v50 = *(_QWORD *)v50;
          v54 = v51 & 0x7F;
          if (v52)
            v54 = v53;
          __dst.__r_.__value_.__r.__words[0] = v50;
          __dst.__r_.__value_.__l.__size_ = v54;
          sub_1C58EAB2C((uint64_t)&v198, (__int128 *)&__dst);
        }
        v49 = v17;
LABEL_162:
        if ((*(_BYTE *)(i + 36) & 0x20) != 0)
        {
          v90 = *(_QWORD *)(i + 24);
          if (v90 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_330;
          v179 = i;
          v91 = *(const void **)(i + 16);
          v173 = v15;
          v174 = v49;
          if (v90 >= 0x17)
          {
            v93 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v90 | 7) != 0x17)
              v93 = v90 | 7;
            v94 = v93 + 1;
            p_dst = (std::string *)operator new(v93 + 1);
            __dst.__r_.__value_.__l.__size_ = v90;
            __dst.__r_.__value_.__r.__words[2] = v94 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(i + 24);
            p_dst = &__dst;
            if (!v90)
              goto LABEL_171;
          }
          memmove(p_dst, v91, v90);
LABEL_171:
          p_dst->__r_.__value_.__s.__data_[v90] = 0;
          v95 = (uint64_t **)(v169 + 1160);
          v96 = *v170;
          v97 = (uint64_t **)(v169 + 1160);
          if (*v170)
          {
            v98 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = &__dst;
            else
              v100 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            while (1)
            {
              while (1)
              {
                v95 = (uint64_t **)v96;
                v103 = (const void *)v96[4];
                v101 = v96 + 4;
                v102 = v103;
                v104 = *((unsigned __int8 *)v101 + 23);
                if ((v104 & 0x80u) == 0)
                  v105 = v101;
                else
                  v105 = v102;
                v106 = v101[1];
                if ((v104 & 0x80u) == 0)
                  v107 = v104 & 0x7F;
                else
                  v107 = v101[1];
                if (v107 >= size)
                  v108 = size;
                else
                  v108 = v107;
                v109 = memcmp(v100, v105, v108);
                v110 = size < v107;
                if (v109)
                  v110 = v109 < 0;
                if (!v110)
                  break;
                v96 = *v95;
                v97 = v95;
                if (!*v95)
                  goto LABEL_202;
              }
              if ((v104 & 0x80u) != 0)
                v104 = v106;
              if (size >= v104)
                v111 = v104;
              else
                v111 = size;
              v112 = memcmp(v105, v100, v111);
              v113 = v104 < size;
              if (v112)
                v113 = v112 < 0;
              if (!v113)
                break;
              v96 = v95[1];
              if (!v96)
              {
                v97 = v95 + 1;
                goto LABEL_202;
              }
            }
          }
          else
          {
LABEL_202:
            v114 = (uint64_t *)v95;
            v95 = (uint64_t **)operator new(0x48uLL);
            *((_OWORD *)v95 + 2) = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            v115 = (uint64_t *)__dst.__r_.__value_.__r.__words[2];
            memset(&__dst, 0, sizeof(__dst));
            v95[7] = 0;
            v95[8] = 0;
            v95[6] = v115;
            *v95 = 0;
            v95[1] = 0;
            v95[2] = v114;
            *v97 = (uint64_t *)v95;
            v116 = **(_QWORD **)(v169 + 1152);
            v117 = (uint64_t *)v95;
            if (v116)
            {
              *(_QWORD *)(v169 + 1152) = v116;
              v117 = *v97;
            }
            sub_1C4768E74(*(uint64_t **)(v169 + 1160), v117);
            ++*(_QWORD *)(v169 + 1168);
            v98 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          v34 = a5;
          v15 = v173;
          v33 = v171;
          i = v179;
          if (v98 < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v118 = (uint64_t *)*(unsigned int *)(v179 + 40);
          if (v95[7] > v118)
            v118 = v95[7];
          v95[7] = v118;
          v119 = *(unsigned int *)(v179 + 44);
          if ((_DWORD)v119)
          {
            v120 = __clz(v119) ^ 0x3F;
            v121 = *((unsigned __int16 *)v95 + 32);
            if (v120 >= v121)
              v122 = v120;
            else
              v122 = *((_WORD *)v95 + 32);
            if (v121 >= 0x100)
              LOBYTE(v120) = v122;
            *((_WORD *)v95 + 32) = v120 | 0x100;
          }
          *((_BYTE *)v95 + 66) |= v182 & 1;
          v49 = v174;
        }
LABEL_217:
        i += 80;
        v17 = v49;
        if (i == v176)
          goto LABEL_220;
      }
      if ((v36 & 1) != 0)
      {
        if ((*(_BYTE *)(i + 36) & 8) != 0)
        {
          v49 = v17;
          goto LABEL_217;
        }
        v182 = v36;
        if (v17 >= (unint64_t *)v180)
        {
          v55 = i;
          v56 = v17 - v15;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 61)
            goto LABEL_330;
          if ((v180 - (char *)v15) >> 2 > v57)
            v57 = (v180 - (char *)v15) >> 2;
          if ((unint64_t)(v180 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v57;
          if (v58)
          {
            if (v58 >> 61)
              goto LABEL_331;
            v59 = (char *)operator new(8 * v58);
          }
          else
          {
            v59 = 0;
          }
          v60 = (unint64_t *)&v59[8 * v56];
          v61 = v60;
          *v60 = v41;
          if (v17 == v15)
          {
            v15 = (unint64_t *)&v59[8 * v56];
            i = v55;
          }
          else
          {
            i = v55;
            do
            {
              v62 = *--v17;
              *--v60 = v62;
            }
            while (v17 != v15);
            v17 = v15;
            v15 = v60;
          }
          v49 = v61 + 1;
          v180 = &v59[8 * v58];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v17 = v41;
          v49 = v17 + 1;
        }
        if ((v182 & 0x10) != 0)
        {
          v63 = *(_DWORD *)(v41 + 32);
          *(_DWORD *)(v41 + 32) = v63 & 0xFFFFFFF0 | 4;
          if ((v63 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v41) & 1) == 0)
            *(_DWORD *)(v41 + 32) |= 0x4000u;
        }
        v64 = *(_DWORD *)(v41 + 32);
        if ((v64 & 0xE) == 2)
        {
          v65 = (v64 & 0xF) == 3 ? 5 : 4;
          *(_DWORD *)(v41 + 32) = v65 | v64 & 0xFFFFFFF0;
          if ((v64 & 0x30) != 0)
          {
            if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v41) & 1) == 0)
              *(_DWORD *)(v41 + 32) |= 0x4000u;
            v33 = v171;
            v34 = a5;
          }
        }
        goto LABEL_159;
      }
      v42 = *(unsigned __int8 *)(v41 + 16);
      v43 = v42 > 3 || v42 == 1;
      v182 = v36;
      if (v43)
        goto LABEL_65;
      v44 = *(_DWORD *)(v41 + 32) & 0xF;
      v52 = v44 > 5;
      v45 = (1 << v44) & 0x2A;
      if (v52 || v45 == 0)
        goto LABEL_65;
      if (v197)
      {
        v47 = (v197 - 1) & ((v41 >> 4) ^ (v41 >> 9));
        v48 = *(_QWORD *)(v196[0] + 8 * v47);
        if (v48 == v41)
        {
LABEL_65:
          v49 = v17;
LABEL_159:
          if ((v182 & 2) != 0)
          {
            v89 = *(_DWORD *)(v41 + 32);
            *(_DWORD *)(v41 + 32) = v89 | 0x4000;
            if ((v89 & 0x300) == 0x100)
              *(_DWORD *)(v41 + 32) = v89 & 0xFFFFBCFF | 0x4000;
          }
          goto LABEL_162;
        }
        v66 = 1;
        while (v48 != -4096)
        {
          v67 = v47 + v66++;
          v47 = v67 & (v197 - 1);
          v48 = *(_QWORD *)(v196[0] + 8 * v47);
          if (v48 == v41)
            goto LABEL_65;
        }
      }
      if (v17 >= (unint64_t *)v180)
      {
        v68 = i;
        v69 = v17 - v15;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 61)
          goto LABEL_330;
        if ((v180 - (char *)v15) >> 2 > v70)
          v70 = (v180 - (char *)v15) >> 2;
        if ((unint64_t)(v180 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          if (v71 >> 61)
            goto LABEL_331;
          v72 = (char *)operator new(8 * v71);
        }
        else
        {
          v72 = 0;
        }
        v73 = (unint64_t *)&v72[8 * v69];
        v74 = v73;
        *v73 = v41;
        if (v17 == v15)
        {
          v15 = (unint64_t *)&v72[8 * v69];
          i = v68;
        }
        else
        {
          i = v68;
          do
          {
            v75 = *--v17;
            *--v73 = v75;
          }
          while (v17 != v15);
          v17 = v15;
          v15 = v73;
        }
        v49 = v74 + 1;
        v180 = &v72[8 * v71];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v17 = v41;
        v49 = v17 + 1;
      }
      v178 = i;
      v76 = *(_DWORD *)(v41 + 32);
      *(_DWORD *)(v41 + 32) = v76 & 0xFFFFFFF0 | 1;
      if ((v76 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v41) & 1) == 0)
        *(_DWORD *)(v41 + 32) |= 0x4000u;
      v77 = *(unsigned __int8 *)(v41 + 16);
      if (v77 != 2)
      {
        v78 = v41;
        if (v77 != 1 || (v78 = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v41)) != 0)
        {
          if (*(_QWORD *)(v78 + 48))
          {
            v79 = *(unsigned __int8 *)(v41 + 16);
            if (v79 == 2
              || (AliaseeObject = v41, v79 == 1)
              && (AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v41)) == 0)
            {
              v81 = 0;
            }
            else
            {
              v81 = *(_QWORD *)(AliaseeObject + 48);
            }
            v82 = v194;
            for (j = &v194; ; v82 = *j)
            {
              v84 = j;
              if (!v82)
                break;
              while (1)
              {
                j = (uint64_t **)v82;
                v85 = v82[4];
                if (v85 > v81)
                  break;
                if (v85 >= v81)
                  goto LABEL_156;
                v82 = j[1];
                if (!v82)
                {
                  v84 = j + 1;
                  goto LABEL_152;
                }
              }
            }
LABEL_152:
            v86 = (uint64_t *)operator new(0x28uLL);
            v86[4] = v81;
            *v86 = 0;
            v86[1] = 0;
            v86[2] = (uint64_t)j;
            *v84 = v86;
            if (*v193)
            {
              v193 = (uint64_t **)*v193;
              v87 = *v84;
            }
            else
            {
              v87 = v86;
            }
            sub_1C4768E74(v194, v87);
            ++v195;
          }
        }
      }
LABEL_156:
      v88 = *(_QWORD *)(v41 + 48);
      if (v88)
        llvm::Comdat::removeUser(v88, v41);
      *(_QWORD *)(v41 + 48) = 0;
      i = v178;
      goto LABEL_159;
    }
    v49 = v17;
LABEL_220:
    v123 = v167;
    if (*(_DWORD *)(v167 + 132))
    {
      v124 = v167 + 24;
      v125 = *(_QWORD *)(v167 + 32);
      v126 = *(_QWORD *)(v167 + 16);
      v127 = *(_QWORD *)(v167 + 48);
      v128 = v167 + 56;
      v129 = *(_QWORD *)(v167 + 64);
      __dst.__r_.__value_.__r.__words[0] = v125;
      __dst.__r_.__value_.__l.__size_ = v126;
      __dst.__r_.__value_.__r.__words[2] = v127;
      v188 = v129;
      v189 = v167 + 24;
      v190 = v33;
      v191 = v167 + 40;
      v192 = v167 + 56;
      while (1)
      {
        if (v125 == v124
          && (_QWORD *)v126 == v33
          && v127 == v168
          && v129 == v128
          && v189 == v124
          && v190 == v33
          && v191 == v168
          && v192 == v128)
        {
          goto LABEL_255;
        }
        v130 = sub_1C52C3168((uint64_t)&__dst);
        v131 = *(unsigned __int8 *)(v130 + 16);
        if (v131 == 2)
          goto LABEL_252;
        v132 = v130;
        if (v131 == 1)
        {
          v130 = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v130);
          if (!v130)
            goto LABEL_252;
        }
        v133 = *(_QWORD *)(v130 + 48);
        v134 = v194;
        if (!v133 || v194 == 0)
          goto LABEL_252;
        while (1)
        {
          v136 = v134[4];
          if (v133 >= v136)
            break;
LABEL_239:
          v134 = (uint64_t *)*v134;
          if (!v134)
            goto LABEL_252;
        }
        if (v136 < v133)
          break;
        v137 = *(_DWORD *)(v132 + 32);
        if ((v137 & 0xFu) - 7 >= 2)
        {
          *(_DWORD *)(v132 + 32) = v137 & 0xFFFFFFF0 | 1;
          if ((v137 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v132) & 1) == 0)
            *(_DWORD *)(v132 + 32) |= 0x4000u;
        }
        v138 = *(unsigned __int8 *)(v132 + 16);
        if (v138 <= 3 && v138 != 1)
        {
          v140 = *(_QWORD *)(v132 + 48);
          if (v140)
            llvm::Comdat::removeUser(v140, v132);
          *(_QWORD *)(v132 + 48) = 0;
        }
LABEL_252:
        sub_1C52C300C((uint64_t)&__dst);
        v126 = __dst.__r_.__value_.__l.__size_;
        v125 = __dst.__r_.__value_.__r.__words[0];
        v127 = __dst.__r_.__value_.__r.__words[2];
        v129 = v188;
      }
      ++v134;
      goto LABEL_239;
    }
LABEL_255:
    if (*(char *)(v167 + 111) < 0)
    {
      if (!*(_QWORD *)(v167 + 96))
      {
LABEL_322:
        *(_BYTE *)(v166 + 32) &= ~1u;
        *(_QWORD *)v166 = v123;
        *(_QWORD *)(v166 + 8) = v15;
        *(_QWORD *)(v166 + 16) = v49;
        *(_QWORD *)(v166 + 24) = v180;
        sub_1C47655E8((uint64_t)&v201, v202);
        if (v198 != v200)
          free(v198);
        sub_1C49F3440(v194);
        MEMORY[0x1CAA32FB4](v196[0], 8);
        MEMORY[0x1CAA32FB4](v210, 8);
        if (*((_QWORD *)&v208 + 1))
        {
          *(_QWORD *)&v209 = *((_QWORD *)&v208 + 1);
          operator delete(*((void **)&v208 + 1));
        }
        sub_1C58EDC0C((uint64_t)v205);
        sub_1C4926AE8((uint64_t)v205);
        return sub_1C4FF9CA4((uint64_t)&v212);
      }
    }
    else if (!*(_BYTE *)(v167 + 111))
    {
      goto LABEL_322;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__dst, ".lto_discard");
    if ((_DWORD)v199 || v203)
    {
      v175 = v49;
      v186 = &v198;
      __p[0] = sub_1C58EF450;
      __p[1] = &v186;
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_1C5A04E30(v167, (void (*)(uint64_t, std::string *))sub_1C5A059DC, (uint64_t)&v183);
      v141 = (char *)v198;
      v142 = v203;
      if (v203)
        v143 = v201;
      else
        v143 = (char *)v198;
      v144 = (char *)v198 + 16 * v199;
      if (v203)
        v145 = (char *)&v202;
      else
        v145 = (char *)v198 + 16 * v199;
      memset(&v183, 0, sizeof(v183));
      if (v143 != v145)
      {
        v146 = 0;
        v147 = v143;
        do
        {
          v148 = v146;
          if (v203)
          {
            v149 = (char *)*((_QWORD *)v147 + 1);
            if (v149)
            {
              do
              {
                v150 = v149;
                v149 = *(char **)v149;
              }
              while (v149);
            }
            else
            {
              do
              {
                v150 = (char *)*((_QWORD *)v147 + 2);
                v43 = *(_QWORD *)v150 == (_QWORD)v147;
                v147 = v150;
              }
              while (!v43);
            }
          }
          else
          {
            v150 = v147 + 16;
          }
          v146 = v148 + 1;
          v147 = v150;
        }
        while (v150 != v145);
        v151 = 2 * v148;
        v152 = v143;
        if (!v203)
          goto LABEL_285;
        while (v152 != (char *)&v202)
        {
          v153 = *((_QWORD *)v152 + 5);
          v154 = (char *)*((_QWORD *)v152 + 1);
          if (v154)
          {
            do
            {
              v152 = v154;
              v154 = *(char **)v154;
            }
            while (v154);
          }
          else
          {
            do
            {
              v155 = v152;
              v152 = (char *)*((_QWORD *)v152 + 2);
            }
            while (*(char **)v152 != v155);
          }
          while (1)
          {
            v151 += v153;
            if (v203)
              break;
LABEL_285:
            if (v152 == v144)
              goto LABEL_289;
            v153 = *((_QWORD *)v152 + 1);
            v152 += 16;
          }
        }
LABEL_289:
        std::string::reserve(&v183, v151);
        while (1)
        {
          v156 = v143 + 32;
          if (!v142)
            v156 = v141;
          std::string::append(&v183, *(const std::string::value_type **)v156, *((_QWORD *)v156 + 1));
          if (v142)
          {
            v157 = (char *)*((_QWORD *)v143 + 1);
            if (v157)
            {
              do
              {
                v141 = v157;
                v157 = *(char **)v157;
              }
              while (v157);
            }
            else
            {
              do
              {
                v141 = (char *)*((_QWORD *)v143 + 2);
                v43 = *(_QWORD *)v141 == (_QWORD)v143;
                v143 = v141;
              }
              while (!v43);
            }
            if (v141 == v145)
              break;
          }
          else
          {
            v141 = v143 + 16;
            if (v143 + 16 == v144)
              break;
          }
          std::string::append(&v183, ", ", 2uLL);
          v143 = v141;
        }
      }
      v158 = std::string::insert(&v183, 0, " ");
      v159 = v158->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
      v185 = v159;
      v158->__r_.__value_.__l.__size_ = 0;
      v158->__r_.__value_.__r.__words[2] = 0;
      v158->__r_.__value_.__r.__words[0] = 0;
      if (v185 >= 0)
        v160 = __p;
      else
        v160 = (void **)__p[0];
      if (v185 >= 0)
        v161 = HIBYTE(v185) & 0x7F;
      else
        v161 = (std::string::size_type)__p[1];
      std::string::append(&__dst, (const std::string::value_type *)v160, v161);
      if (SHIBYTE(v185) < 0)
        operator delete(__p[0]);
      v123 = v167;
      v49 = v175;
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v183.__r_.__value_.__l.__data_);
    }
    std::string::append(&__dst, "\n");
    sub_1C4842EB8((const void **)&__dst.__r_.__value_.__l.__data_, (const void **)(v167 + 88), (uint64_t)__p);
    if (v185 >= 0)
      v162 = __p;
    else
      v162 = (void **)__p[0];
    if (v185 >= 0)
      v163 = HIBYTE(v185) & 0x7F;
    else
      v163 = (size_t)__p[1];
    LLVMSetModuleInlineAsm2_0(v123, v162, v163);
    if (SHIBYTE(v185) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_322;
  }
  *(_BYTE *)(a6 + 32) |= 1u;
  *(_QWORD *)a6 = v165;
  sub_1C4FF9CA4((uint64_t)&v212);
  llvm::Module::~Module(v10);
  return MEMORY[0x1CAA32FC0]();
}

void llvm::lto::LTO::linkRegularLTO(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  llvm::GlobalValue **v5;
  llvm::GlobalValue **v6;
  llvm::GlobalValue **v8;
  llvm::GlobalValue **v9;
  llvm::GlobalValue **v10;
  llvm::GlobalValue *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::GlobalValue **v17;
  llvm::GlobalValue *v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  llvm::DiagnosticInfoOptimizationBase *v25;
  char *v26;
  unint64_t v27;
  void **v28;
  llvm::GlobalValue **v29;
  llvm::GlobalValue **v30;
  llvm::GlobalValue *v31;
  llvm::GlobalValue *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  llvm::GlobalValue *v39;
  llvm::LLVMContextImpl ****v40;
  llvm::Module *v41;
  llvm::Module *v42;
  llvm::ModuleSummaryIndex *v45;
  __int128 v46;
  uint64_t v47;
  llvm::Module *v48;
  void *v49[2];
  char v50;
  void *__p;
  char v52;
  _QWORD v53[3];
  const void *v54[2];
  _QWORD v55[10];
  void *v56;
  unsigned int v57;
  _QWORD v58[36];

  v58[34] = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::GlobalValue ***)(a2 + 8);
  v6 = *(llvm::GlobalValue ***)(a2 + 16);
  if (v5 != v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v45 = (llvm::ModuleSummaryIndex *)(a1 + 163);
    while (1)
    {
      v11 = *v5;
      if (a3)
      {
        v12 = sub_1C4EE9DE0(*v5);
        if ((llvm::ModuleSummaryIndex::isGUIDLive(v45, v12) & 1) == 0)
        {
          if (v11 && !*((_BYTE *)v11 + 16) && a1[225])
          {
            llvm::Module::materialize(*((llvm::Module **)v11 + 5), v11, a4);
            if (*a4)
              goto LABEL_78;
            v53[0] = v11;
            v53[1] = 0;
            v53[2] = 0;
            llvm::OptimizationRemark::OptimizationRemark((uint64_t)v55, (uint64_t)"lto", (uint64_t)"deadfunction", 12, (uint64_t)v11);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v49, "Function", 8uLL, v11);
            v25 = (llvm::DiagnosticInfoOptimizationBase *)sub_1C47E3888((uint64_t)v55, (uint64_t)v49);
            v54[0] = " not added to the combined module ";
            v54[1] = (const void *)34;
            sub_1C53B17B4((uint64_t)v25 + 80, v54);
            llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v53, v25);
            if (v52 < 0)
              operator delete(__p);
            if (v50 < 0)
              operator delete(v49[0]);
            v55[0] = &off_1E814E790;
            v26 = (char *)v56;
            if (v57)
            {
              v27 = (unint64_t)v57 << 6;
              do
              {
                v28 = (void **)&v26[v27];
                if (v26[v27 - 17] < 0)
                  operator delete(*(v28 - 5));
                if (*((char *)v28 - 41) < 0)
                  operator delete(*(v28 - 8));
                v27 -= 64;
              }
              while (v27);
              v26 = (char *)v56;
            }
            if (v26 != (char *)v58)
              free(v26);
          }
          goto LABEL_72;
        }
      }
      if ((*((_DWORD *)v11 + 8) & 0xF) != 1)
      {
        if (v9 >= v10)
        {
          v21 = v9 - v8;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            goto LABEL_81;
          if (((char *)v10 - (char *)v8) >> 2 > v22)
            v22 = ((char *)v10 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
          {
            if (v23 >> 61)
              goto LABEL_82;
            v24 = (char *)operator new(8 * v23);
          }
          else
          {
            v24 = 0;
          }
          v29 = (llvm::GlobalValue **)&v24[8 * v21];
          *v29 = v11;
          v30 = v29 + 1;
          while (v9 != v8)
          {
            v31 = *--v9;
            *--v29 = v31;
          }
LABEL_69:
          v10 = (llvm::GlobalValue **)&v24[8 * v23];
          if (v8)
            operator delete(v8);
          v9 = v30;
          v8 = v29;
          goto LABEL_72;
        }
        goto LABEL_55;
      }
      if ((*((_BYTE *)v11 + 23) & 0x10) == 0)
      {
        v34 = 0;
        v33 = (unsigned __int8 *)&byte_1C871356D;
        goto LABEL_47;
      }
      v13 = ***(_QWORD ***)v11;
      v14 = *(_QWORD *)(v13 + 152);
      v15 = *(unsigned int *)(v13 + 168);
      if (!(_DWORD)v15)
        goto LABEL_45;
      LODWORD(v16) = (v15 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v17 = (llvm::GlobalValue **)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 != v11)
        break;
LABEL_46:
      v32 = v17[1];
      v35 = *(_QWORD *)v32;
      v33 = (unsigned __int8 *)v32 + 16;
      v34 = v35;
LABEL_47:
      v36 = sub_1C4FB7E80(*(uint64_t **)(a1[153] + 112), v33, v34);
      if (v36)
      {
        if (*(_BYTE *)(v36 + 16))
        {
          if (*(_BYTE *)(v36 + 16) != 3 || (*(_DWORD *)(v36 + 20) & 0x7FFFFFF) != 0)
            goto LABEL_72;
        }
        else if (*(_QWORD *)(v36 + 72) != v36 + 72 || (*(_BYTE *)(v36 + 34) & 0x80) != 0)
        {
          goto LABEL_72;
        }
      }
      if (v9 >= v10)
      {
        v37 = v9 - v8;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
LABEL_81:
          abort();
        if (((char *)v10 - (char *)v8) >> 2 > v38)
          v38 = ((char *)v10 - (char *)v8) >> 2;
        if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v38;
        if (v23)
        {
          if (v23 >> 61)
LABEL_82:
            sub_1C4764EE4();
          v24 = (char *)operator new(8 * v23);
        }
        else
        {
          v24 = 0;
        }
        v29 = (llvm::GlobalValue **)&v24[8 * v37];
        *v29 = v11;
        v30 = v29 + 1;
        while (v9 != v8)
        {
          v39 = *--v9;
          *--v29 = v39;
        }
        goto LABEL_69;
      }
LABEL_55:
      *v9++ = v11;
LABEL_72:
      if (++v5 == v6)
        goto LABEL_76;
    }
    v19 = 1;
    while (v18 != (llvm::GlobalValue *)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(llvm::GlobalValue **)(v14 + 16 * v16);
      if (v18 == v11)
      {
        v17 = (llvm::GlobalValue **)(v14 + 16 * v16);
        goto LABEL_46;
      }
    }
LABEL_45:
    v17 = (llvm::GlobalValue **)(v14 + 16 * v15);
    goto LABEL_46;
  }
  v9 = 0;
  v8 = 0;
LABEL_76:
  v40 = (llvm::LLVMContextImpl ****)a1[154];
  v41 = *(llvm::Module **)a2;
  *(_QWORD *)a2 = 0;
  v47 = 0;
  v48 = v41;
  llvm::IRMover::move(v40, &v48, (uint64_t *)v8, v9 - v8, &v46, 0, a4);
  sub_1C5052E10(&v46);
  v42 = v48;
  v48 = 0;
  if (v42)
  {
    llvm::Module::~Module(v42);
    MEMORY[0x1CAA32FC0]();
  }
LABEL_78:
  if (v8)
    operator delete(v8);
}

unint64_t sub_1C58EAB2C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  unsigned __int8 v9;
  _OWORD *v10;
  __int128 v11;

  if (*(_QWORD *)(a1 + 64))
  {
    sub_1C62B22C4(a1 + 48, (uint64_t)a2, a2);
    return ((unint64_t)v9 << 32) | 1;
  }
  else
  {
    v4 = sub_1C58EF3D4((uint64_t *)a1, (uint64_t)a2);
    v5 = *(_QWORD *)a1;
    v6 = *(unsigned int *)(a1 + 8);
    if (v4 == *(_QWORD *)a1 + 16 * v6)
    {
      if (v6 > 1)
      {
        do
        {
          v10 = (_OWORD *)(*(_QWORD *)a1 + 16 * v6 - 16);
          sub_1C62B22C4(a1 + 48, (uint64_t)v10, v10);
          LODWORD(v6) = *(_DWORD *)(a1 + 8) - 1;
          *(_DWORD *)(a1 + 8) = v6;
        }
        while ((_DWORD)v6);
        sub_1C62B22C4(a1 + 48, (uint64_t)a2, a2);
      }
      else
      {
        v8 = *a2;
        if (v6 >= *(_DWORD *)(a1 + 12))
        {
          v11 = *a2;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
          v8 = v11;
          v5 = *(_QWORD *)a1;
          v6 = *(unsigned int *)(a1 + 8);
        }
        *(_OWORD *)(v5 + 16 * v6) = v8;
        ++*(_DWORD *)(a1 + 8);
      }
      return 0x100000001;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_1C58EAC3C(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  int v26[4];

  v25 = *a2;
  v26[0] = 0;
  sub_1C62B2444((uint64_t)a1, (const void **)&v25, v26, (uint64_t)&v23);
  if (!v24)
    return 0;
  v4 = v23;
  v6 = (__int128 *)a1[4];
  v5 = a1[5];
  if ((unint64_t)v6 >= v5)
  {
    v12 = (_OWORD *)a1[3];
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v6 - v12) + 1;
    if (v13 > 0x333333333333333)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v12) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x199999999999999)
      v15 = 0x333333333333333;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0x333333333333333)
        sub_1C4764EE4();
      v16 = (char *)operator new(80 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * (v6 - v12)];
    v18 = a2[3];
    *((_OWORD *)v17 + 2) = a2[2];
    *((_OWORD *)v17 + 3) = v18;
    *((_OWORD *)v17 + 4) = a2[4];
    v19 = a2[1];
    *(_OWORD *)v17 = *a2;
    *((_OWORD *)v17 + 1) = v19;
    v10 = v17 + 80;
    if (v6 != v12)
    {
      do
      {
        *((_OWORD *)v17 - 5) = *(v6 - 5);
        v20 = *(v6 - 4);
        v21 = *(v6 - 3);
        v22 = *(v6 - 1);
        *((_OWORD *)v17 - 2) = *(v6 - 2);
        *((_OWORD *)v17 - 1) = v22;
        *((_OWORD *)v17 - 4) = v20;
        *((_OWORD *)v17 - 3) = v21;
        v17 -= 80;
        v6 -= 5;
      }
      while (v6 != v12);
      v6 = (__int128 *)a1[3];
    }
    a1[3] = v17;
    a1[4] = v10;
    a1[5] = &v16[80 * v15];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[4];
    v6[3] = a2[3];
    v6[4] = v9;
    v6[1] = v7;
    v6[2] = v8;
    v10 = v6 + 5;
  }
  a1[4] = v10;
  *(_DWORD *)(v4 + 16) = -858993459 * (((unint64_t)v10 - a1[3]) >> 4) - 1;
  return 1;
}

uint64_t llvm::lto::LTO::getMaxTasks(llvm::lto::LTO *this)
{
  uint64_t v1;
  uint64_t v2;

  *((_BYTE *)this + 1768) = 1;
  v1 = 1688;
  if (!*((_BYTE *)this + 1704))
    v1 = 1640;
  v2 = 1680;
  if (!*((_BYTE *)this + 1704))
    v2 = 1632;
  return *((_DWORD *)this + 294)
       - 858993459 * ((*(_QWORD *)((char *)this + v1) - *(_QWORD *)((char *)this + v2)) >> 4);
}

void llvm::lto::LTO::checkPartiallySplit(llvm::lto::LTO *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t i;
  BOOL v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  const char *v20;
  __int16 v21;

  if (!*((_BYTE *)this + 1439))
    goto LABEL_38;
  v4 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 153) + 112), "llvm.type.test", 0xEuLL);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 16))
      v5 = 0;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 153) + 112), "llvm.type.checked.load", 0x16uLL);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 16))
      v7 = 0;
    else
      v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v8 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 153) + 112), "llvm.type.checked.load.relative", 0x1FuLL);
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16))
      v9 = 0;
    else
      v9 = v8;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
    v9 = 0;
    if (!v5)
      goto LABEL_9;
  }
  if (*(_QWORD *)(v5 + 8))
    goto LABEL_13;
LABEL_9:
  if (v7 && *(_QWORD *)(v7 + 8) || v9 && *(_QWORD *)(v9 + 8))
  {
LABEL_13:
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v11 = qword_1ED836B58[0];
    v12 = operator new();
    v20 = "inconsistent LTO Unit splitting (recompile with -fsplit-lto-unit)";
    v21 = 259;
    *(_QWORD *)v12 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v20, (_QWORD *)(v12 + 8));
    *(_QWORD *)(v12 + 32) = 3;
    *(_QWORD *)(v12 + 40) = v11;
    *(_BYTE *)(v12 + 48) = 1;
    goto LABEL_39;
  }
  v13 = (char *)*((_QWORD *)this + 163);
  v14 = (char *)this + 1312;
  if (v13 == (char *)this + 1312)
  {
LABEL_38:
    v12 = 0;
    goto LABEL_39;
  }
  do
  {
    for (i = *((_QWORD *)v13 + 7); i != *((_QWORD *)v13 + 8); i += 8)
    {
      if (*(_QWORD *)i)
        v16 = *(_DWORD *)(*(_QWORD *)i + 8) == 1;
      else
        v16 = 0;
      if (v16)
      {
        v17 = *(_QWORD **)(*(_QWORD *)i + 104);
        if (v17)
        {
          if (v17[4] != v17[3] || v17[7] != v17[6] || v17[10] != v17[9] || v17[13] != v17[12] || v17[1] != *v17)
            goto LABEL_13;
        }
      }
    }
    v18 = (char *)*((_QWORD *)v13 + 1);
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = *(char **)v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (char *)*((_QWORD *)v13 + 2);
        v16 = *(_QWORD *)v19 == (_QWORD)v13;
        v13 = v19;
      }
      while (!v16);
    }
    v12 = 0;
    v13 = v19;
  }
  while (v19 != v14);
LABEL_39:
  *a2 = v12;
}

uint64_t llvm::lto::LTO::run@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  std::string::value_type *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  size_t v21;
  int *v22;
  int v23;
  size_t v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  llvm::raw_ostream *v51;
  _QWORD *v52;
  void (**v53)(_QWORD *);
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void (**v57)(_QWORD *);
  _QWORD *v58;
  void (**v59)(_QWORD *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD v65[2];
  int v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  int v73[4];
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v8 = *(unsigned int *)(a1 + 1744);
  if ((_DWORD)v8)
  {
    for (i = *(uint64_t **)(a1 + 1736); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a1 + 1736);
  }
  v10 = *(_QWORD *)(a1 + 1736) + 8 * v8;
  if (i != (uint64_t *)v10)
  {
    v20 = *i;
    while (1)
    {
      v21 = *(unsigned __int8 *)(v20 + 31);
      if ((*(char *)(v20 + 31) & 0x80000000) == 0)
        break;
      if (*(_QWORD *)(v20 + 16))
        goto LABEL_27;
      do
      {
LABEL_64:
        v35 = i[1];
        ++i;
        v20 = v35;
        if (v35)
          v36 = v20 == -8;
        else
          v36 = 1;
      }
      while (v36);
      if (i == (uint64_t *)v10)
        goto LABEL_4;
    }
    if (!*(_BYTE *)(v20 + 31))
      goto LABEL_64;
LABEL_27:
    v61 = 0;
    if ((v21 & 0x80u) == 0)
      v22 = (int *)(v20 + 8);
    else
      v22 = *(int **)(v20 + 8);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v23 = *(unsigned __int8 *)v22;
      if (v23 == 1)
        v24 = v21 - 1;
      else
        v24 = v21;
      if (v23 == 1)
        v22 = (int *)((char *)v22 + 1);
    }
    else
    {
      v24 = 0;
    }
    v74 = xmmword_1C85F4BB0;
    v75 = 0;
    llvm::MD5::update((int *)&v74, v22, v24);
    llvm::MD5::final((int *)&v74, v73);
    v61 = *(_QWORD *)v73;
    if (*(_BYTE *)(v20 + 32) && *(_BYTE *)(v20 + 35))
      sub_1C61A7854((uint64_t)v65, &v61, (uint64_t)&v74);
    if (*(_BYTE *)(v20 + 33))
      sub_1C61A7854(a1 + 1776, &v61, (uint64_t)&v74);
    v25 = *(_BYTE *)(v20 + 35) == 0;
    if (v64)
    {
      v26 = v64 - 1;
      v27 = (37 * v61) & (v64 - 1);
      v28 = v62 + 16 * v27;
      v29 = *(_QWORD *)v28;
      if (v61 == *(_QWORD *)v28)
      {
LABEL_63:
        *(_DWORD *)(v28 + 8) = v25;
        goto LABEL_64;
      }
      v30 = 0;
      v31 = 1;
      while (v29 != -1)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == -2;
        if (v32)
          v30 = v28;
        v33 = v27 + v31++;
        v27 = v33 & v26;
        v28 = v62 + 16 * (v33 & v26);
        v29 = *(_QWORD *)v28;
        if (v61 == *(_QWORD *)v28)
          goto LABEL_63;
      }
      if (v30)
        v28 = v30;
    }
    else
    {
      v28 = 0;
    }
    if (4 * (int)v63 + 4 >= 3 * v64)
    {
      sub_1C58EF750(&v62, 2 * v64);
      v34 = v61;
      v37 = v64 - 1;
      v38 = (37 * v61) & (v64 - 1);
      v28 = v62 + 16 * v38;
      v39 = *(_QWORD *)v28;
      if (v61 == *(_QWORD *)v28)
        goto LABEL_60;
      v40 = 0;
      v41 = 1;
      while (v39 != -1)
      {
        if (v40)
          v42 = 0;
        else
          v42 = v39 == -2;
        if (v42)
          v40 = v28;
        v43 = v38 + v41++;
        v38 = v43 & v37;
        v28 = v62 + 16 * (v43 & v37);
        v39 = *(_QWORD *)v28;
        if (v61 == *(_QWORD *)v28)
          goto LABEL_60;
      }
    }
    else
    {
      if (v64 + ~(_DWORD)v63 - HIDWORD(v63) > v64 >> 3)
      {
LABEL_59:
        v34 = *(_QWORD *)v28;
LABEL_60:
        LODWORD(v63) = v63 + 1;
        if (v34 != -1)
          --HIDWORD(v63);
        *(_QWORD *)v28 = v61;
        *(_DWORD *)(v28 + 8) = 0;
        goto LABEL_63;
      }
      sub_1C58EF750(&v62, v64);
      v34 = v61;
      v44 = v64 - 1;
      v45 = (37 * v61) & (v64 - 1);
      v28 = v62 + 16 * v45;
      v46 = *(_QWORD *)v28;
      if (v61 == *(_QWORD *)v28)
        goto LABEL_60;
      v40 = 0;
      v47 = 1;
      while (v46 != -1)
      {
        if (v40)
          v48 = 0;
        else
          v48 = v46 == -2;
        if (v48)
          v40 = v28;
        v49 = v45 + v47++;
        v45 = v49 & v44;
        v28 = v62 + 16 * (v49 & v44);
        v46 = *(_QWORD *)v28;
        if (v61 == *(_QWORD *)v28)
          goto LABEL_60;
      }
    }
    if (v40)
      v28 = v40;
    goto LABEL_59;
  }
LABEL_4:
  *(_QWORD *)v73 = &v62;
  v11 = *(_DWORD *)(a1 + 432);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)(a1 + 1304), (llvm::ModuleSummaryIndex *)v65, (void (*)(uint64_t, _QWORD))sub_1C58EF8C8, (uint64_t)v73);
  if (v11)
    llvm::ModuleSummaryIndex::propagateAttributes((_QWORD *)(a1 + 1304), (uint64_t)v65);
  v12 = *(_BYTE *)(a1 + 815);
  v13 = v12;
  if (v12 >= 0)
    v14 = (std::string::value_type *)(a1 + 792);
  else
    v14 = *(std::string::value_type **)(a1 + 792);
  v15 = v12 & 0x7F;
  if (v13 >= 0)
    v16 = v15;
  else
    v16 = *(_QWORD *)(a1 + 800);
  llvm::lto::setupStatsFile(v14, v16, (uint64_t)&v74);
  if ((BYTE8(v74) & 1) != 0)
  {
    v50 = v74;
    *(_QWORD *)&v74 = 0;
    *a4 = v50;
    goto LABEL_128;
  }
  v17 = v74;
  *(_QWORD *)&v74 = 0;
  v18 = (_QWORD *)a2[3];
  if (v18)
  {
    if (v18 == a2)
    {
      v72 = v71;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v71);
    }
    else
    {
      v72 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
    }
  }
  else
  {
    v72 = 0;
  }
  llvm::lto::LTO::runRegularLTO(a1, v71, a4);
  v52 = v72;
  if (v72 == v71)
  {
    v53 = (void (**)(_QWORD *))(v71[0] + 32);
    v52 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_105;
    v53 = (void (**)(_QWORD *))(*v72 + 40);
  }
  (*v53)(v52);
LABEL_105:
  if (*a4)
    goto LABEL_126;
  v54 = (_QWORD *)a2[3];
  if (v54)
  {
    if (v54 == a2)
    {
      v70 = v69;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v69);
    }
    else
    {
      v70 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v54 + 16))(v54);
    }
  }
  else
  {
    v70 = 0;
  }
  v55 = (_QWORD *)a3[3];
  if (v55)
  {
    if (v55 == a3)
    {
      v68 = v67;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v67);
    }
    else
    {
      v68 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v55 + 16))(v55);
    }
  }
  else
  {
    v68 = 0;
  }
  llvm::lto::LTO::runThinLTO(a1, v69, v67, (uint64_t)v65, &v61);
  *a4 = v61;
  v61 = 0;
  v56 = v68;
  if (v68 == v67)
  {
    v57 = (void (**)(_QWORD *))(v67[0] + 32);
    v56 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_121;
    v57 = (void (**)(_QWORD *))(*v68 + 40);
  }
  (*v57)(v56);
LABEL_121:
  v58 = v70;
  if (v70 == v69)
  {
    v59 = (void (**)(_QWORD *))(v69[0] + 32);
    v58 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_126;
    v59 = (void (**)(_QWORD *))(*v70 + 40);
  }
  (*v59)(v58);
LABEL_126:
  if (v17)
  {
    llvm::PrintStatisticsJSON(*(const char ***)(v17 + 136), v51);
    v61 = 0;
    sub_1C49C7E54((uint64_t)&v61, (_BYTE *)v17);
  }
LABEL_128:
  sub_1C62B2694((uint64_t)&v74);
  MEMORY[0x1CAA32FB4](v62, 8);
  return MEMORY[0x1CAA32FB4](v65[0], 8);
}

void llvm::lto::setupStatsFile(std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  uint64_t v7;
  const std::error_category *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const std::error_category *v12;

  if (a2)
  {
    byte_1ED836D79 = 1;
    byte_1ED836D7A = 0;
    LODWORD(v11) = 0;
    v12 = std::system_category();
    v6 = (std::string *)operator new();
    llvm::ToolOutputFile::ToolOutputFile(v6, a1, a2, (uint64_t)&v11, 0);
    if ((_DWORD)v11)
    {
      v7 = v11;
      v8 = v12;
      v9 = (_QWORD *)operator new();
      *v9 = &off_1E81A0D28;
      v9[1] = v7;
      v9[2] = v8;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v9;
      v10 = 0;
      sub_1C49C7E54((uint64_t)&v10, v6);
    }
    else
    {
      v6[1].__r_.__value_.__s.__data_[0] = 1;
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = v6;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = 0;
  }
}

uint64_t llvm::lto::LTO::runRegularLTO@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  char v7;
  int v8;
  void *v9;
  size_t v10;
  size_t v11;
  char v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  llvm::Module *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  BOOL v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  llvm::ConstantAggregateZero *v40;
  llvm::ConstantAggregateZero *v41;
  char *v42;
  uint64_t ***v43;
  uint64_t v44;
  llvm::Type *v45;
  _QWORD *v46;
  int v47;
  llvm::UndefValue *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  char v56;
  const char *v57;
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _BYTE **v63;
  uint64_t v64;
  uint64_t *i;
  uint64_t v66;
  uint64_t v67;
  char v68;
  int v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _BYTE *v80;
  _QWORD *v81;
  _QWORD *v83;
  void (**v84)(_QWORD *);
  _BYTE **v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _QWORD v93[4];
  __int16 v94;
  void *__p[2];
  __int128 v96;
  _QWORD v97[3];
  _QWORD *v98;
  uint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v6 = **(uint64_t ***)(a1 + 1224);
  v7 = *(_BYTE *)(a1 + 711);
  v8 = v7;
  if (v7 >= 0)
    v9 = (void *)(a1 + 688);
  else
    v9 = *(void **)(a1 + 688);
  v10 = v7 & 0x7F;
  if (v8 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 696);
  v12 = *(_BYTE *)(a1 + 735);
  v13 = v12;
  if (v12 >= 0)
    v14 = (char *)(a1 + 712);
  else
    v14 = *(char **)(a1 + 712);
  v15 = v12 & 0x7F;
  if (v13 >= 0)
    v16 = v15;
  else
    v16 = *(_QWORD *)(a1 + 720);
  v17 = *(_BYTE *)(a1 + 783);
  v18 = v17;
  if (v17 >= 0)
    v19 = a1 + 760;
  else
    v19 = *(_QWORD *)(a1 + 760);
  v20 = v17 & 0x7F;
  if (v18 >= 0)
    v21 = v20;
  else
    v21 = *(_QWORD *)(a1 + 768);
  llvm::lto::setupLLVMOptimizationRemarks(v9, v11, v6, v14, v16, v19, v21, *(unsigned __int8 *)(a1 + 736), (uint64_t)&v99, *(_QWORD *)(a1 + 744), *(_QWORD *)(a1 + 752), -1);
  if ((v100 & 1) != 0)
  {
    v29 = v99;
    v99 = 0;
    *a3 = v29;
    return sub_1C62B2694((uint64_t)&v99);
  }
  v88 = a2;
  v22 = v99;
  v99 = 0;
  v23 = *(_BYTE **)(a1 + 1800);
  *(_QWORD *)(a1 + 1800) = v22;
  if (v23)
    sub_1C49C7E54(a1 + 1800, v23);
  v24 = *(__int128 **)(a1 + 1240);
  v25 = *(__int128 **)(a1 + 1248);
  while (v24 != v25)
  {
    v26 = *v24;
    v27 = v24[1];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *(_OWORD *)__p = v26;
    v96 = v27;
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 3) = 0;
    llvm::lto::LTO::linkRegularLTO((_QWORD *)a1, (uint64_t)__p, 1, a3);
    if (__p[1])
    {
      *(void **)&v96 = __p[1];
      operator delete(__p[1]);
    }
    v28 = (llvm::Module *)__p[0];
    __p[0] = 0;
    if (v28)
    {
      llvm::Module::~Module(v28);
      MEMORY[0x1CAA32FC0]();
    }
    if (*a3)
      return sub_1C62B2694((uint64_t)&v99);
    v24 += 2;
  }
  llvm::lto::LTO::checkPartiallySplit((llvm::lto::LTO *)a1, a3);
  if (!*a3)
  {
    v86 = (_BYTE **)(a1 + 1800);
    v87 = a3;
    v30 = *(_QWORD *)(a1 + 1224);
    v31 = *(_QWORD **)(a1 + 1152);
    if (v31 != (_QWORD *)(a1 + 1160))
    {
      v89 = v30 + 272;
      while (1)
      {
        if (*((_BYTE *)v31 + 66))
        {
          v32 = *((_BYTE *)v31 + 55);
          v33 = v32 < 0;
          if (v32 >= 0)
            v34 = (unsigned __int8 *)(v31 + 4);
          else
            v34 = (unsigned __int8 *)v31[4];
          v35 = v32 & 0x7F;
          if (v33)
            v36 = v31[5];
          else
            v36 = v35;
          v37 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a1 + 1224) + 112), v34, v36);
          v38 = v37;
          if (!v37)
            goto LABEL_42;
          if (*(_BYTE *)(v37 + 16) != 3)
          {
            v38 = 0;
LABEL_42:
            v39 = 1;
LABEL_43:
            llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)(a1 + 1184) + 1912), (llvm::Type *)v31[7]);
            v41 = v40;
            v42 = (char *)operator new(0x78uLL);
            v43 = (uint64_t ***)(v42 + 32);
            *((_DWORD *)v42 + 13) = *((_DWORD *)v42 + 13) & 0x38000000 | 1;
            *(_QWORD *)v42 = 0;
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = 0;
            *((_QWORD *)v42 + 3) = v42 + 32;
            v44 = *(_QWORD *)(a1 + 1224);
            v46 = llvm::ConstantAggregateZero::get(v41, v45);
            v94 = 257;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v42 + 32), v44, v41, 0, 10, (uint64_t)v46, (uint64_t)v93, 0, 0, 0, 0);
            if (*((unsigned __int16 *)v31 + 32) >= 0x100u)
              v47 = (*((_WORD *)v31 + 32) << 16) + 0x10000;
            else
              v47 = 0;
            *((_DWORD *)v42 + 16) = v47 | *((_DWORD *)v42 + 16) & 0xFFC0FFFF;
            if ((v39 & 1) != 0)
            {
              v94 = 260;
              v93[0] = v31 + 4;
              llvm::Value::setName(v43, (uint64_t)v93);
            }
            else
            {
              v48 = (llvm::UndefValue *)(v42 + 32);
              if (*v43 != *(uint64_t ***)v38)
                v48 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v43, *(llvm::Constant **)v38, 0);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v38, v48, (llvm::Value *)1);
              llvm::Value::takeName((llvm::Value *)v43, (llvm::Value *)v38);
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v38);
            }
            goto LABEL_51;
          }
          v51 = *(_QWORD *)(v37 + 24);
          sub_1C4768AD0(v89, v51);
          v53 = v52;
          v55 = v54 == 1;
          llvm::DataLayout::getAlignment(v89, v51);
          if (v55)
          {
            v59 = v56;
            v56 = v59;
          }
          if ((((1 << v56) + ((unint64_t)(v53 + 7) >> 3) - 1) & -(1 << v56)) != v31[7])
          {
            v39 = 0;
            goto LABEL_43;
          }
          if (*((unsigned __int16 *)v31 + 32) >= 0x100u)
            v58 = (*((_WORD *)v31 + 32) << 16) + 0x10000;
          else
            v58 = 0;
          *(_DWORD *)(v38 + 32) = v58 | *(_DWORD *)(v38 + 32) & 0xFFC0FFFF;
        }
LABEL_51:
        v49 = (_QWORD *)v31[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v31[2];
            v76 = *v50 == (_QWORD)v31;
            v31 = v50;
          }
          while (!v76);
        }
        v31 = v50;
        if (v50 == (_QWORD *)(a1 + 1160))
        {
          v30 = *(_QWORD *)(a1 + 1224);
          break;
        }
      }
    }
    llvm::updateVCallVisibilityInModule(v30, *(unsigned __int8 *)(a1 + 442), a1 + 1776);
    v60 = *(_QWORD *)(a1 + 952);
    if (!v60
      || (v61 = *(_QWORD *)(a1 + 1224),
          LODWORD(v93[0]) = 0,
          ((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v60 + 48))(v60, v93, v61) & 1) != 0))
    {
      v63 = (_BYTE **)(a1 + 1800);
      v62 = v87;
      if (!*(_BYTE *)(a1 + 439))
      {
        v64 = *(unsigned int *)(a1 + 1744);
        if ((_DWORD)v64)
        {
          for (i = *(uint64_t **)(a1 + 1736); !*i || *i == -8; ++i)
            ;
        }
        else
        {
          i = *(uint64_t **)(a1 + 1736);
        }
        v66 = *(_QWORD *)(a1 + 1736) + 8 * v64;
        if (i != (uint64_t *)v66)
        {
          v67 = *i;
          do
          {
            if (*(_BYTE *)(v67 + 35))
            {
              v68 = *(_BYTE *)(v67 + 31);
              if (v68 < 0)
              {
                if (!*(_QWORD *)(v67 + 16))
                  goto LABEL_99;
              }
              else if (!*(_BYTE *)(v67 + 31))
              {
                goto LABEL_99;
              }
              v69 = *(_DWORD *)(v67 + 36);
              if (!v69 || v69 == -2)
              {
                v70 = v68 >= 0 ? (unsigned __int8 *)(v67 + 8) : *(unsigned __int8 **)(v67 + 8);
                v71 = v68 >= 0 ? *(unsigned __int8 *)(v67 + 31) : *(_QWORD *)(v67 + 16);
                v72 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a1 + 1224) + 112), v70, v71);
                if (v72)
                {
                  v73 = *(_DWORD *)(v72 + 32);
                  if ((v73 & 0xFu) - 7 >= 2)
                  {
                    if (*(_BYTE *)(v72 + 16))
                    {
                      if (*(_BYTE *)(v72 + 16) != 3 || (*(_DWORD *)(v72 + 20) & 0x7FFFFFF) != 0)
                        goto LABEL_96;
                    }
                    else if ((v73 & 0x800000) != 0 || *(_QWORD *)(v72 + 72) != v72 + 72)
                    {
LABEL_96:
                      v74 = v73 & 0xFFFFFF3F | (*(unsigned __int8 *)(v67 + 34) << 7);
                      *(_DWORD *)(v72 + 32) = v74;
                      if (byte_1ED833F88 && !*(_DWORD *)(v67 + 36))
                        *(_DWORD *)(v72 + 32) = v74 & 0xFFFFBF80 | 0x4007;
                      goto LABEL_99;
                    }
                  }
                }
              }
            }
            do
            {
LABEL_99:
              v75 = i[1];
              ++i;
              v67 = v75;
              if (v75)
                v76 = v67 == -8;
              else
                v76 = 1;
            }
            while (v76);
          }
          while (i != (uint64_t *)v66);
        }
        llvm::Module::addModuleFlag(*(uint64_t ***)(a1 + 1224), (llvm::Type *)1, "LTOPostLink", 0xBuLL, (llvm::Type *)1);
        v77 = *(_QWORD *)(a1 + 1016);
        v63 = (_BYTE **)(a1 + 1800);
        v62 = v87;
        if (v77)
        {
          v78 = *(_QWORD *)(a1 + 1224);
          LODWORD(v93[0]) = 0;
          if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v77 + 48))(v77, v93, v78) & 1) == 0)
          {
            v80 = *v86;
            *v86 = 0;
            v91 = v80;
            llvm::lto::finalizeOptimizationRemarks((llvm::raw_ostream *)&v91, v87);
            v91 = 0;
            if (!v80)
              return sub_1C62B2694((uint64_t)&v99);
            v81 = &v91;
            goto LABEL_130;
          }
        }
      }
      if (*(_BYTE *)(a1 + 1264) && !*(_BYTE *)(a1 + 443))
      {
LABEL_128:
        v80 = *v63;
        *v63 = 0;
        v90 = v80;
        llvm::lto::finalizeOptimizationRemarks((llvm::raw_ostream *)&v90, v62);
        v90 = 0;
        if (v80)
        {
          v81 = &v90;
          goto LABEL_130;
        }
        return sub_1C62B2694((uint64_t)&v99);
      }
      v79 = (_QWORD *)v88[3];
      if (v79)
      {
        if (v79 == v88)
        {
          v98 = v97;
          (*(void (**)(_QWORD *, _QWORD *))(*v88 + 24))(v88, v97);
        }
        else
        {
          v98 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v79 + 16))(v79);
        }
      }
      else
      {
        v98 = 0;
      }
      llvm::lto::backend(a1, v97, *(_DWORD *)(a1 + 1176), *(uint64_t **)(a1 + 1224), (llvm *)(a1 + 1304), v62);
      v83 = v98;
      if (v98 == v97)
      {
        v84 = (void (**)(_QWORD *))(v97[0] + 32);
        v83 = v97;
      }
      else
      {
        if (!v98)
          goto LABEL_127;
        v84 = (void (**)(_QWORD *))(*v98 + 40);
      }
      (*v84)(v83);
LABEL_127:
      if (*v62)
        return sub_1C62B2694((uint64_t)&v99);
      goto LABEL_128;
    }
    v80 = *v86;
    *v86 = 0;
    v92 = v80;
    llvm::lto::finalizeOptimizationRemarks((llvm::raw_ostream *)&v92, a3);
    v92 = 0;
    if (v80)
    {
      v81 = &v92;
LABEL_130:
      sub_1C49C7E54((uint64_t)v81, v80);
    }
  }
  return sub_1C62B2694((uint64_t)&v99);
}

uint64_t llvm::lto::LTO::runThinLTO@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  llvm *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  int v16;
  llvm::ModuleSummaryIndex *v17;
  void **v18;
  unsigned __int8 **v19;
  size_t v20;
  void *v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  llvm::raw_ostream *v34;
  void *v35;
  uint64_t result;
  llvm::ModuleSummaryIndex *v37;
  uint64_t v38;
  int v39;
  llvm *v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  uint64_t v46;
  uint64_t *i;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  int *v51;
  size_t v52;
  int *v53;
  int *v54;
  int v55;
  size_t v56;
  uint64_t v57;
  BOOL v58;
  _QWORD *v59;
  char v60;
  int *v61;
  size_t v62;
  int v63;
  size_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68;
  int *v69;
  size_t v70;
  int v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  llvm::ModuleSummaryIndex *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  void (**v82)(_QWORD *);
  uint64_t v83;
  _QWORD *v84;
  void (**v85)(_QWORD *);
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  size_t *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  int *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  size_t *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  _QWORD *v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  llvm *v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned __int8 **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  int *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD v152[2];
  uint64_t *v153;
  _QWORD *v154[2];
  uint64_t *v155;
  _QWORD *v156[2];
  _QWORD v157[4];
  llvm *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  void *__p;
  char *v168;
  char *v169;
  _QWORD v170[3];
  _QWORD *v171;
  _QWORD v172[3];
  _QWORD *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  llvm::timeTraceProfilerBegin("ThinLink", 8uLL, (uint64_t)"", 0);
  v11 = *(_QWORD *)(a1 + 1632);
  v12 = *(_QWORD *)(a1 + 1640);
  if (v11 == v12)
    goto LABEL_29;
  if (*(_BYTE *)(a1 + 1704) && *(_QWORD *)(a1 + 1680) == *(_QWORD *)(a1 + 1688))
  {
    v34 = (llvm::raw_ostream *)llvm::errs(v10);
    v35 = (void *)*((_QWORD *)v34 + 4);
    if (*((_QWORD *)v34 + 3) - (_QWORD)v35 > 0x25uLL)
    {
      qmemcpy(v35, "warning: [ThinLTO] No module compiled\n", 38);
      *((_QWORD *)v34 + 4) += 38;
    }
    else
    {
      llvm::raw_ostream::write(v34, "warning: [ThinLTO] No module compiled\n", 0x26uLL);
    }
    goto LABEL_29;
  }
  v13 = *(_QWORD *)(a1 + 1144);
  if (!v13)
    goto LABEL_7;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, a1 + 1304, a4))
  {
LABEL_29:
    *a5 = 0;
    result = *(_QWORD *)off_1EF8EEB50();
    if (result)
      return sub_1C6392DC0(result);
    return result;
  }
  v12 = *(_QWORD *)(a1 + 1640);
  v11 = *(_QWORD *)(a1 + 1632);
LABEL_7:
  v14 = -858993459 * ((unint64_t)(v12 - v11) >> 4);
  v165 = 0;
  v166 = 0x2000000000;
  v141 = a5;
  v138 = a2;
  v139 = a3;
  v137 = a4;
  if (v14)
  {
    v125 = (4 * v14 / 3u + 1) | ((unint64_t)(4 * v14 / 3u + 1) >> 1);
    v126 = v125 | (v125 >> 2) | ((v125 | (v125 >> 2)) >> 4);
    v127 = v126 | (v126 >> 8) | ((v126 | (v126 >> 8)) >> 16);
    v16 = v127 + 1;
    v15 = sub_1C5074000(v127 + 2, 0xCuLL);
    v15[v16] = 2;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v164 = v15;
  LODWORD(v165) = v16;
  v140 = (llvm *)(a1 + 1304);
  sub_1C58ED534((_QWORD *)(a1 + 1304), (uint64_t)&v164);
  v18 = *(void ***)(a1 + 1632);
  v19 = *(unsigned __int8 ***)(a1 + 1640);
  v142 = a1;
  v143 = v19;
  while (v18 != (void **)v19)
  {
    v21 = *v18;
    v20 = (size_t)v18[1];
    v145 = v165;
    if (!(_DWORD)v165)
      goto LABEL_25;
    v22 = 0;
    if (v20)
    {
      v23 = (unsigned __int8 *)v18[1];
      v24 = (unsigned __int8 *)*v18;
      do
      {
        v25 = *v24++;
        v22 = 33 * v22 + v25;
        --v23;
      }
      while (v23);
    }
    v26 = v165 - 1;
    v27 = v164;
    v28 = (uint64_t)&v164[v165 + 1];
    v29 = HIDWORD(v166);
    v30 = 1;
    v31 = v22;
    while (1)
    {
      v32 = v31 & v26;
      v33 = (_QWORD *)v27[v32];
      if (v33 != (_QWORD *)-8)
      {
        if (!v33)
          goto LABEL_25;
        if (*(_DWORD *)(v28 + 4 * v32) == v22 && v20 == *v33 && (!v20 || !memcmp(v21, (char *)v33 + v29, v20)))
          break;
      }
      v31 = v30 + v32;
      ++v30;
    }
    if ((_DWORD)v32 == -1 || (int)v32 == v145)
LABEL_25:
      sub_1C62B21C4((uint64_t)&v164, (unsigned __int8 *)v21, v20);
    v18 += 10;
    v19 = v143;
  }
  v37 = v140;
  llvm::computeSyntheticCounts(v140, v17);
  v38 = v142;
  v39 = -858993459 * ((*(_QWORD *)(v142 + 1640) - *(_QWORD *)(v142 + 1632)) >> 4);
  v161 = 0;
  v162 = 0;
  v163 = 0x2800000000;
  if (v39)
  {
    v128 = (4 * v39 / 3u + 1) | ((unint64_t)(4 * v39 / 3u + 1) >> 1);
    v129 = v128 | (v128 >> 2) | ((v128 | (v128 >> 2)) >> 4);
    v130 = v129 | (v129 >> 8) | ((v129 | (v129 >> 8)) >> 16);
    v131 = v130 + 1;
    v132 = sub_1C5074000(v130 + 2, 0xCuLL);
    v132[v131] = 2;
    v133 = -858993459 * ((*(_QWORD *)(v142 + 1640) - *(_QWORD *)(v142 + 1632)) >> 4);
    v161 = v132;
    LODWORD(v162) = v131;
    v158 = 0;
    v159 = 0;
    v160 = 0x2000000000;
    if (!v133)
      goto LABEL_189;
    v134 = (4 * v133 / 3u + 1) | ((unint64_t)(4 * v133 / 3u + 1) >> 1) | (((4 * v133 / 3u + 1) | ((unint64_t)(4 * v133 / 3u + 1) >> 1)) >> 2);
    v135 = v134 | (v134 >> 4) | ((v134 | (v134 >> 4)) >> 8);
    v136 = v135 | (v135 >> 16);
    v41 = v136 + 1;
    v40 = (llvm *)sub_1C5074000(v136 + 2, 0xCuLL);
    *((_QWORD *)v40 + v41) = 2;
    goto LABEL_187;
  }
  v40 = 0;
  v41 = 0;
  LODWORD(v162) = 0;
  v159 = 0;
  v160 = 0x2000000000;
  v43 = v138;
  v42 = v139;
  v44 = v137;
  while (1)
  {
    v158 = v40;
    LODWORD(v159) = v41;
    v157[0] = 0;
    v157[1] = 0;
    v157[2] = 0x2000000000;
    if (byte_1ED819068)
    {
      v45 = (llvm::raw_ostream *)llvm::outs(v40);
      llvm::ModuleSummaryIndex::dumpSCCs(v37, v45);
    }
    v156[0] = 0;
    v156[1] = 0;
    v155 = (uint64_t *)v156;
    llvm::updateVCallVisibilityInIndex(v37, *(unsigned __int8 *)(v38 + 442), v38 + 1776);
    v154[0] = 0;
    v154[1] = 0;
    v153 = (uint64_t *)v154;
    llvm::runWholeProgramDevirtOnIndex((uint64_t)v37, &v155, &v153);
    if (*(_DWORD *)(v38 + 432))
      llvm::ComputeCrossModuleImport((uint64_t)v37, (uint64_t)&v164, (llvm::StringMapImpl *)&v161, (uint64_t)&v158);
    v46 = *(unsigned int *)(v38 + 1744);
    if ((_DWORD)v46)
    {
      for (i = *(uint64_t **)(v38 + 1736); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(uint64_t **)(v38 + 1736);
    }
    v48 = *(_QWORD *)(v38 + 1736) + 8 * v46;
    if (i != (uint64_t *)v48)
    {
      v49 = *i;
      do
      {
        if (*(_DWORD *)(v49 + 36) == -2 && *(_BYTE *)(v49 + 35))
        {
          v50 = *(unsigned __int8 *)(v49 + 31);
          if (*(char *)(v49 + 31) < 0)
          {
            if (*(_QWORD *)(v49 + 16))
            {
LABEL_47:
              v51 = (int *)(v49 + 8);
              v147 = 0;
              v53 = *(int **)(v49 + 8);
              v52 = *(_QWORD *)(v49 + 16);
              if ((v50 & 0x80u) == 0)
                v54 = v51;
              else
                v54 = v53;
              if ((v50 & 0x80u) == 0)
                v52 = v50;
              if (v52)
              {
                v55 = *(unsigned __int8 *)v54;
                if (v55 == 1)
                  v56 = v52 - 1;
                else
                  v56 = v52;
                if (v55 == 1)
                  v54 = (int *)((char *)v54 + 1);
              }
              else
              {
                v56 = 0;
              }
              v174 = xmmword_1C85F4BB0;
              *(_QWORD *)&v175 = 0;
              llvm::MD5::update((int *)&v174, v54, v56);
              llvm::MD5::final((int *)&v174, (int *)&__p);
              v147 = __p;
              if (llvm::ModuleSummaryIndex::isGUIDLive(v37, (unint64_t)__p))
                sub_1C47BC21C(&v155, (unint64_t *)&v147, (uint64_t **)&v147);
              goto LABEL_62;
            }
          }
          else if (*(_BYTE *)(v49 + 31))
          {
            goto LABEL_47;
          }
        }
        do
        {
LABEL_62:
          v57 = i[1];
          ++i;
          v49 = v57;
          if (v57)
            v58 = v49 == -8;
          else
            v58 = 1;
        }
        while (v58);
      }
      while (i != (uint64_t *)v48);
    }
    v59 = *(_QWORD **)(v38 + 1448);
    if (v59 != (_QWORD *)(v38 + 1456))
    {
      do
      {
        v60 = *((_BYTE *)v59 + 55);
        if (v60 >= 0)
          v61 = (int *)(v59 + 4);
        else
          v61 = (int *)v59[4];
        v62 = v59[5];
        if (v60 >= 0)
          v62 = v60 & 0x7F;
        if (v62)
        {
          v63 = *(unsigned __int8 *)v61;
          if (v63 == 1)
            v64 = v62 - 1;
          else
            v64 = v62;
          if (v63 == 1)
            v61 = (int *)((char *)v61 + 1);
        }
        else
        {
          v64 = 0;
        }
        v174 = xmmword_1C85F4BB0;
        *(_QWORD *)&v175 = 0;
        llvm::MD5::update((int *)&v174, v61, v64);
        llvm::MD5::final((int *)&v174, (int *)&__p);
        *(_QWORD *)&v174 = __p;
        sub_1C47BC21C(&v155, (unint64_t *)&v174, (uint64_t **)&v174);
        v65 = (_QWORD *)v59[1];
        if (v65)
        {
          do
          {
            v66 = v65;
            v65 = (_QWORD *)*v65;
          }
          while (v65);
        }
        else
        {
          do
          {
            v66 = (_QWORD *)v59[2];
            v58 = *v66 == (_QWORD)v59;
            v59 = v66;
          }
          while (!v58);
        }
        v59 = v66;
      }
      while (v66 != (_QWORD *)(v38 + 1456));
    }
    v67 = *(_QWORD **)(v38 + 1472);
    if (v67 != (_QWORD *)(v38 + 1480))
    {
      do
      {
        v68 = *((_BYTE *)v67 + 55);
        if (v68 >= 0)
          v69 = (int *)(v67 + 4);
        else
          v69 = (int *)v67[4];
        v70 = v67[5];
        if (v68 >= 0)
          v70 = v68 & 0x7F;
        if (v70)
        {
          v71 = *(unsigned __int8 *)v69;
          if (v71 == 1)
            v72 = v70 - 1;
          else
            v72 = v70;
          if (v71 == 1)
            v69 = (int *)((char *)v69 + 1);
        }
        else
        {
          v72 = 0;
        }
        v174 = xmmword_1C85F4BB0;
        *(_QWORD *)&v175 = 0;
        llvm::MD5::update((int *)&v174, v69, v72);
        llvm::MD5::final((int *)&v174, (int *)&__p);
        *(_QWORD *)&v174 = __p;
        sub_1C47BC21C(&v155, (unint64_t *)&v174, (uint64_t **)&v174);
        v73 = (_QWORD *)v67[1];
        if (v73)
        {
          do
          {
            v74 = v73;
            v73 = (_QWORD *)*v73;
          }
          while (v73);
        }
        else
        {
          do
          {
            v74 = (_QWORD *)v67[2];
            v58 = *v74 == (_QWORD)v67;
            v67 = v74;
          }
          while (!v58);
        }
        v67 = v74;
      }
      while (v74 != (_QWORD *)(v38 + 1480));
    }
    v152[0] = &v158;
    v152[1] = &v155;
    llvm::updateIndexWPDForExports((uint64_t)v140, (unsigned int (*)(uint64_t, _QWORD, _QWORD))sub_1C58F19BC, (uint64_t)v152, &v153);
    v151 = v38;
    llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)v140, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))sub_1C58F19BC, (uint64_t)v152, (uint64_t (*)(uint64_t, _QWORD))sub_1C58F1B2C, (uint64_t)&v151);
    v150 = v157;
    llvm::thinLTOResolvePrevailingInIndex(v38, (uint64_t)v140, (unsigned int (*)(uint64_t, _QWORD))sub_1C58F1B2C, (uint64_t)&v151, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_1C58F1B9C, (uint64_t)&v150, v44);
    llvm::thinLTOPropagateFunctionAttrs((uint64_t)v140, (uint64_t (*)(uint64_t, _QWORD))sub_1C58F1B2C, (uint64_t)&v151);
    llvm::generateParamAccessSummary(v140, v75);
    v76 = *(_QWORD *)off_1EF8EEB50();
    if (v76)
      sub_1C6392DC0(v76);
    v77 = (_QWORD *)v43[3];
    if (v77)
    {
      if (v77 == v43)
      {
        v173 = v172;
        (*(void (**)(_QWORD *, _QWORD *))(*v43 + 24))(v43, v172);
      }
      else
      {
        v173 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v77 + 16))(v77);
      }
    }
    else
    {
      v173 = 0;
    }
    v79 = (_QWORD *)v42[3];
    if (v79)
    {
      if (v79 == v42)
      {
        v171 = v170;
        (*(void (**)(_QWORD *, _QWORD *))(*v42 + 24))(v42, v170);
      }
      else
      {
        v171 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v79 + 16))(v79);
      }
    }
    else
    {
      v171 = 0;
    }
    v80 = *(_QWORD *)(v38 + 1296);
    if (v80)
      break;
    sub_1C485C2F0();
LABEL_189:
    v40 = 0;
    v41 = 0;
LABEL_187:
    v38 = v142;
    v43 = v138;
    v42 = v139;
    v44 = v137;
    v37 = v140;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, llvm *, _QWORD **, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(&v149, v80, v38, v140, &v164, v172, v170);
  v81 = v171;
  if (v171 == v170)
  {
    v82 = (void (**)(_QWORD *))(v170[0] + 32);
    v81 = v170;
    goto LABEL_131;
  }
  if (v171)
  {
    v82 = (void (**)(_QWORD *))(*v171 + 40);
LABEL_131:
    (*v82)(v81);
  }
  v146 = v38 + 1608;
  v83 = v38 + 1656;
  v84 = v173;
  if (v173 == v172)
  {
    v85 = (void (**)(_QWORD *))(v172[0] + 32);
    v84 = v172;
    goto LABEL_136;
  }
  if (v173)
  {
    v85 = (void (**)(_QWORD *))(*v173 + 40);
LABEL_136:
    (*v85)(v84);
  }
  if (!*(_BYTE *)(v38 + 1704))
    v83 = v38 + 1608;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 32))(v149) == 1)
  {
    v86 = -858993459 * ((*(_QWORD *)(v83 + 32) - *(_QWORD *)(v83 + 24)) >> 4);
    if ((_DWORD)v86)
    {
      v87 = 0;
      v88 = 0;
      v89 = 80 * v86;
      do
      {
        v90 = v83;
        v91 = *(_QWORD *)(v83 + 24) + v88;
        v92 = v149;
        v93 = (v87 + *(_DWORD *)(v38 + 1176));
        v94 = *(_OWORD *)(v91 + 64);
        v96 = *(_OWORD *)(v91 + 16);
        v95 = *(_OWORD *)(v91 + 32);
        v176 = *(_OWORD *)(v91 + 48);
        v177 = v94;
        v174 = v96;
        v175 = v95;
        v97 = *sub_1C56D84B0((llvm::StringMapImpl *)&v161, *(unsigned __int8 **)v91, *(_QWORD *)(v91 + 8)) + 8;
        v98 = *sub_1C6292894((uint64_t)&v158, *(unsigned __int8 **)v91, *(_QWORD *)(v91 + 8)) + 1;
        v99 = sub_1C58EDD20((llvm::StringMapImpl *)v157, *(unsigned __int8 **)v91, *(_QWORD *)(v91 + 8));
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, size_t *, uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v93, &v174, v97, v98, *v99 + 8, v146);
        if (*v141)
          goto LABEL_174;
        v88 += 80;
        ++v87;
        v38 = v142;
        v83 = v90;
      }
      while (v89 != v88);
    }
LABEL_173:
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149);
    goto LABEL_174;
  }
  __p = 0;
  v168 = 0;
  v169 = 0;
  sub_1C4DB1D18((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v83 + 32) - *(_QWORD *)(v83 + 24)) >> 4));
  v100 = *(_QWORD *)(v83 + 24);
  v101 = *(_QWORD *)(v83 + 32);
  v144 = v83;
  v102 = v168;
  if (v100 == v101)
  {
    v103 = v168;
  }
  else
  {
    do
    {
      v104 = v100 + 16;
      if (v102 >= v169)
      {
        v105 = (char *)__p;
        v106 = (v102 - (_BYTE *)__p) >> 3;
        v107 = v106 + 1;
        if ((unint64_t)(v106 + 1) >> 61)
          abort();
        v108 = v169 - (_BYTE *)__p;
        if ((v169 - (_BYTE *)__p) >> 2 > v107)
          v107 = v108 >> 2;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v109 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v109 = v107;
        if (v109)
        {
          if (v109 >> 61)
            sub_1C4764EE4();
          v110 = (char *)operator new(8 * v109);
        }
        else
        {
          v110 = 0;
        }
        v111 = &v110[8 * v106];
        *(_QWORD *)v111 = v104;
        v103 = v111 + 8;
        if (v102 != v105)
        {
          do
          {
            v112 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v111 - 1) = v112;
            v111 -= 8;
          }
          while (v102 != v105);
          v102 = (char *)__p;
        }
        __p = v111;
        v168 = v103;
        v169 = &v110[8 * v109];
        if (v102)
          operator delete(v102);
      }
      else
      {
        *(_QWORD *)v102 = v104;
        v103 = v102 + 8;
      }
      v168 = v103;
      v100 += 80;
      v102 = v103;
    }
    while (v100 != v101);
  }
  llvm::lto::generateModulesOrdering((uint64_t)__p, (v103 - (_BYTE *)__p) >> 3, (uint64_t)&v147);
  v114 = (int *)v147;
  v113 = v148;
  if (v147 == v148)
  {
LABEL_169:
    if (v114)
    {
      v148 = v114;
      operator delete(v114);
    }
    if (__p)
    {
      v168 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_173;
  }
  while (1)
  {
    v115 = *(_QWORD *)(v144 + 24) + 80 * *v114;
    v116 = v149;
    v117 = (*(_DWORD *)(v142 + 1176) + *v114);
    v118 = *(_OWORD *)(v115 + 64);
    v120 = *(_OWORD *)(v115 + 16);
    v119 = *(_OWORD *)(v115 + 32);
    v176 = *(_OWORD *)(v115 + 48);
    v177 = v118;
    v174 = v120;
    v175 = v119;
    v121 = *sub_1C56D84B0((llvm::StringMapImpl *)&v161, *(unsigned __int8 **)v115, *(_QWORD *)(v115 + 8)) + 8;
    v122 = *sub_1C6292894((uint64_t)&v158, *(unsigned __int8 **)v115, *(_QWORD *)(v115 + 8)) + 1;
    v123 = sub_1C58EDD20((llvm::StringMapImpl *)v157, *(unsigned __int8 **)v115, *(_QWORD *)(v115 + 8));
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, size_t *, uint64_t, uint64_t))(*(_QWORD *)v116 + 16))(v116, v117, &v174, v121, v122, *v123 + 8, v146);
    if (*v141)
      break;
    if (++v114 == v113)
    {
      v114 = (int *)v147;
      goto LABEL_169;
    }
  }
  if (v147)
  {
    v148 = (int *)v147;
    operator delete(v147);
  }
  if (__p)
  {
    v168 = (char *)__p;
    operator delete(__p);
  }
LABEL_174:
  v124 = v149;
  v149 = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  sub_1C58F196C((uint64_t)&v153, v154[0]);
  sub_1C47655E8((uint64_t)&v155, v156[0]);
  sub_1C58F18EC((uint64_t)v157);
  sub_1C58F186C((uint64_t)&v158);
  sub_1C58F17E8((uint64_t)&v161);
  return sub_1C62B26F8((uint64_t)&v164);
}

void llvm::lto::setupLLVMOptimizationRemarks(void *__src@<X1>, size_t __len@<X2>, uint64_t *a3@<X0>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, int a12)
{
  __int128 *p_dst;
  size_t v20;
  size_t v21;
  char v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v27;
  unint64_t v28;
  BOOL v29;
  void **v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  void **v36;
  std::string::value_type *v37;
  char *v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  void *__p[2];
  char v45;
  int v46;
  __int16 v47;
  __int128 v48;
  _QWORD v49[4];
  __int16 v50;
  void **v51;
  uint64_t v52;
  __int128 v53;
  __int16 v54;
  int v55;
  __int16 v56;
  _QWORD v57[4];
  __int16 v58;
  __int128 v59;
  int64_t v60;
  __int128 __dst;
  int64_t v62;
  _QWORD *v63;
  char v64;
  _QWORD v65[2];
  char v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v20 = __len | 7;
    v21 = v20 + 1;
    p_dst = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v62 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v62) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v22 = HIBYTE(v62);
  v23 = (char *)*((_QWORD *)&__dst + 1);
  v24 = (char *)(HIBYTE(v62) & 0x7F);
  if (v62 >= 0)
    v25 = HIBYTE(v62) & 0x7F;
  else
    v25 = *((_QWORD *)&__dst + 1);
  if (a12 == -1 || v25 == 0)
    goto LABEL_33;
  v49[0] = &__dst;
  v49[2] = ".thin.";
  v50 = 772;
  if (a12)
  {
    v28 = a12;
    v27 = (char *)v65 + 5;
    do
    {
      *--v27 = (v28 % 0xA) | 0x30;
      v29 = v28 > 9;
      v28 /= 0xAuLL;
    }
    while (v29);
  }
  else
  {
    v27 = (char *)v65 + 4;
    BYTE4(v65[0]) = 48;
  }
  v30 = __p;
  sub_1C4E61270(__p, v27, (char *)v65 + 5, (char *)v65 + 5 - v27);
  v31 = v50;
  if (v50 == 1)
  {
    v51 = __p;
    v53 = v48;
    v54 = 260;
    v55 = v46;
    v56 = v47;
    v34 = 4;
    v35 = v52;
LABEL_27:
    v57[0] = v30;
    v57[1] = v35;
    v57[2] = ".";
    LOBYTE(v58) = v34;
    HIBYTE(v58) = 3;
    v63 = v57;
    v65[0] = a6;
    v65[1] = a7;
    v33 = 5;
    v32 = 2;
    goto LABEL_28;
  }
  if ((_BYTE)v50)
  {
    v36 = (void **)v49[0];
    v34 = 2;
    if (HIBYTE(v50) != 1)
    {
      v31 = 2;
      v36 = (void **)v49;
    }
    v51 = v36;
    v52 = v49[1];
    *(_QWORD *)&v53 = __p;
    LOBYTE(v54) = v31;
    v35 = 4;
    HIBYTE(v54) = 4;
    v30 = (void **)&v51;
    goto LABEL_27;
  }
  v32 = 0;
  v54 = 256;
  v58 = 256;
  v33 = 1;
LABEL_28:
  v66 = v32;
  v67 = v33;
  llvm::Twine::str((llvm::Twine *)&v63, &v59);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__dst);
  __dst = v59;
  v62 = v60;
  HIBYTE(v60) = 0;
  LOBYTE(v59) = 0;
  if (v45 < 0)
    operator delete(__p[0]);
  v22 = HIBYTE(v62);
  v23 = (char *)*((_QWORD *)&__dst + 1);
  v24 = (char *)(HIBYTE(v62) & 0x7F);
LABEL_33:
  if (v22 >= 0)
    v37 = (std::string::value_type *)&__dst;
  else
    v37 = (std::string::value_type *)__dst;
  if (v22 >= 0)
    v38 = v24;
  else
    v38 = v23;
  llvm::setupLLVMOptimizationRemarks(a3, v37, v38, a4, a5, a6, a7, a8, (uint64_t)&v63, a10, a11);
  v39 = v64;
  v40 = v63;
  if ((v64 & 1) != 0)
  {
    v41 = 0;
    v63 = 0;
    if (v40)
    {
      *(_BYTE *)(a9 + 8) |= 1u;
      goto LABEL_46;
    }
  }
  else if (v63)
  {
    *((_BYTE *)v63 + 24) = 1;
    v41 = v40;
  }
  else
  {
    v41 = 0;
  }
  *(_BYTE *)(a9 + 8) = *(_BYTE *)(a9 + 8) & 0xFE | v39 & 1;
  v63 = 0;
  v40 = v41;
LABEL_46:
  *(_QWORD *)a9 = v40;
  sub_1C62B2694((uint64_t)&v63);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__dst);
}

char **llvm::lto::LTO::getRuntimeLibcallSymbols(llvm::lto::LTO *this)
{
  return off_1EF8EB350;
}

void llvm::lto::getThinLTOOutputFile(const void **a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, _QWORD *a4@<X8>)
{
  char v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  char v12;
  int v13;
  void *v14;
  char v15;
  BOOL v16;
  const void *v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  size_t v23;
  char v24;
  BOOL v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::string::size_type v30;
  unint64_t v31;
  const void *v32;
  llvm *directories;
  const std::error_category *v34;
  llvm::raw_ostream *v35;
  llvm::raw_ostream *v36;
  void *v37;
  void *v38;
  std::string::size_type v39;
  std::string *v40;
  size_t v41;
  llvm::raw_ostream *v42;
  _BYTE *v43;
  size_t v44;
  void *v45;
  size_t v46;
  size_t v47;
  _QWORD *v48;
  std::string v49;
  __int16 v50;
  std::error_code v51;
  void *__src;
  size_t __len[2];
  _QWORD v54[17];

  v54[16] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a2 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = v7 & 0x7F;
  if (v8 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a2 + 8);
  if (v11)
    goto LABEL_8;
  v12 = *((_BYTE *)a3 + 23);
  v13 = v12;
  v14 = (void *)(v12 & 0x7F);
  if (v13 < 0)
    v14 = a3[1];
  if (v14)
  {
LABEL_8:
    v15 = *((_BYTE *)a1 + 23);
    v16 = v15 < 0;
    if (v15 >= 0)
      v17 = a1;
    else
      v17 = *a1;
    v18 = v15 & 0x7F;
    if (v16)
      v19 = (unint64_t)a1[1];
    else
      v19 = v18;
    __src = v54;
    *(_OWORD *)__len = xmmword_1C85F20B0;
    if (v19 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v54, v19, 1);
      v21 = __src;
      v20 = __len[0];
    }
    else
    {
      v20 = 0;
      if (!v19)
        goto LABEL_18;
      v21 = v54;
    }
    memcpy((char *)v21 + v20, v17, v19);
    v20 = __len[0];
    LOBYTE(v8) = *(_BYTE *)(a2 + 23);
    v9 = *(_QWORD *)(a2 + 8);
    v10 = v8 & 0x7F;
LABEL_18:
    __len[0] = v20 + v19;
    if ((v8 & 0x80u) == 0)
      v22 = (unsigned __int8 *)a2;
    else
      v22 = *(unsigned __int8 **)a2;
    if ((v8 & 0x80u) == 0)
      v23 = v10;
    else
      v23 = v9;
    v24 = *((_BYTE *)a3 + 23);
    v25 = v24 < 0;
    if (v24 >= 0)
      v26 = a3;
    else
      v26 = *a3;
    v27 = v24 & 0x7F;
    if (v25)
      v28 = (uint64_t)a3[1];
    else
      v28 = v27;
    llvm::sys::path::replace_path_prefix((const void **)&__src, v22, v23, v26, v28, 0);
    v29 = __src;
    v30 = __len[0];
    v31 = sub_1C5E7BE8C((unsigned __int8 *)__src, __len[0], 0);
    if (v30 >= v31)
      v30 = v31;
    if (v31 == -1)
      v32 = 0;
    else
      v32 = v29;
    if (v31 != -1)
    {
      if (v30)
      {
        v50 = 261;
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        v49.__r_.__value_.__l.__size_ = v30;
        directories = (llvm *)llvm::sys::fs::create_directories((unsigned __int8 **)&v49, 1, 504);
        *(_QWORD *)&v51.__val_ = directories;
        v51.__cat_ = v34;
        if ((_DWORD)directories)
        {
          v35 = (llvm::raw_ostream *)llvm::errs(directories);
          v36 = v35;
          v37 = (void *)*((_QWORD *)v35 + 4);
          if (*((_QWORD *)v35 + 3) - (_QWORD)v37 > 0x24uLL)
          {
            qmemcpy(v37, "warning: could not create directory '", 37);
            v38 = (void *)(*((_QWORD *)v35 + 4) + 37);
            *((_QWORD *)v36 + 4) = v38;
          }
          else
          {
            v36 = llvm::raw_ostream::write(v35, "warning: could not create directory '", 0x25uLL);
            v38 = (void *)*((_QWORD *)v36 + 4);
          }
          if (v30 <= *((_QWORD *)v36 + 3) - (_QWORD)v38)
          {
            memcpy(v38, v32, v30);
            v39 = *((_QWORD *)v36 + 4) + v30;
            *((_QWORD *)v36 + 4) = v39;
          }
          else
          {
            v36 = llvm::raw_ostream::write(v36, (const char *)v32, v30);
            v39 = *((_QWORD *)v36 + 4);
          }
          if (*((_QWORD *)v36 + 3) - v39 > 2)
          {
            *(_BYTE *)(v39 + 2) = 32;
            *(_WORD *)v39 = 14887;
            *((_QWORD *)v36 + 4) += 3;
          }
          else
          {
            v36 = llvm::raw_ostream::write(v36, "': ", 3uLL);
          }
          std::error_code::message(&v49, &v51);
          v40 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v49
              : (std::string *)v49.__r_.__value_.__r.__words[0];
          v41 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? *((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x7F
              : v49.__r_.__value_.__l.__size_;
          v42 = llvm::raw_ostream::write(v36, (const char *)v40, v41);
          v43 = (_BYTE *)*((_QWORD *)v42 + 4);
          if ((unint64_t)v43 >= *((_QWORD *)v42 + 3))
          {
            llvm::raw_ostream::write(v42, 10);
          }
          else
          {
            *((_QWORD *)v42 + 4) = v43 + 1;
            *v43 = 10;
          }
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
        }
      }
    }
    v44 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v45 = __src;
    if (__len[0] >= 0x17)
    {
      v46 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v46 = __len[0] | 7;
      v47 = v46 + 1;
      v48 = operator new(v46 + 1);
      a4[1] = v44;
      a4[2] = v47 | 0x8000000000000000;
      *a4 = v48;
      a4 = v48;
    }
    else
    {
      *((_BYTE *)a4 + 23) = __len[0];
      if (!v44)
      {
LABEL_66:
        *((_BYTE *)a4 + v44) = 0;
        if (__src != v54)
          free(__src);
        return;
      }
    }
    memmove(a4, v45, v44);
    goto LABEL_66;
  }
  if (*((char *)a1 + 23) < 0)
  {
    sub_1C47EBC30(a4, (void *)*a1, (unint64_t)a1[1]);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    a4[2] = a1[2];
  }
}

void llvm::lto::createWriteIndexesThinBackend(uint64_t a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  __int128 __p;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1C47EBC30(v18, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)a1;
    v19 = *(_QWORD *)(a1 + 16);
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v21 = *((_QWORD *)a2 + 2);
  }
  LOBYTE(v22) = a3;
  *((_QWORD *)&v22 + 1) = a4;
  v11 = v23;
  v12 = (_QWORD *)a5[3];
  if (v12)
  {
    if (v12 == a5)
    {
      v24 = v23;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v23);
      v13 = v24;
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
      v24 = v13;
    }
  }
  else
  {
    v13 = 0;
    v24 = 0;
  }
  v14 = (char *)operator new(0x68uLL);
  v15 = v14;
  *(_QWORD *)v14 = off_1E817E668;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)v18;
  *((_QWORD *)v14 + 3) = v19;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  *((_OWORD *)v14 + 2) = __p;
  *((_QWORD *)v14 + 6) = v21;
  __p = 0uLL;
  v21 = 0;
  *(_OWORD *)(v14 + 56) = v22;
  if (!v13)
  {
    *((_QWORD *)v14 + 12) = 0;
    goto LABEL_16;
  }
  if (v13 != v23)
  {
    *((_QWORD *)v14 + 12) = v13;
    v24 = 0;
LABEL_16:
    *(_QWORD *)(a6 + 24) = v14;
    goto LABEL_17;
  }
  *((_QWORD *)v14 + 12) = v14 + 72;
  (*(void (**)(_QWORD *))(v23[0] + 24))(v23);
  v16 = v24;
  *(_QWORD *)(a6 + 24) = v15;
  if (v16 == v23)
  {
    v17 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_17;
    v17 = 5;
    v11 = v16;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v17))(v11);
LABEL_17:
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

_QWORD *sub_1C58ED534(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;

  v2 = result + 1;
  v3 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    do
    {
      v12 = v3[4];
      v5 = (uint64_t *)v3[7];
      v6 = (uint64_t *)v3[8];
      while (v5 != v6)
      {
        v7 = *v5++;
        v8 = sub_1C62B21C4(a2, *(unsigned __int8 **)(v7 + 24), *(_QWORD *)(v7 + 32));
        result = sub_1C5422F44(*v8 + 8, &v12);
        result[1] = v7;
      }
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v2);
  }
  return result;
}

int *llvm::lto::generateModulesOrdering@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t *v11;

  v10[0] = a1;
  v10[1] = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_1C58F1CDC((_DWORD *)a3, 0, (int)a2, (int)a2);
  v4 = *(int **)a3;
  v5 = *(int **)(a3 + 8);
  v6 = 126 - 2 * __clz(((uint64_t)v5 - *(_QWORD *)a3) >> 2);
  v7 = v5 == *(int **)a3;
  v11 = v10;
  if (v7)
    v8 = 0;
  else
    v8 = v6;
  return sub_1C58F1D4C(v4, v5, &v11, v8, 1);
}

uint64_t sub_1C58ED664(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(result + 80);
  if (v1 != *(_QWORD *)(result + 88))
  {
    v2 = *(_QWORD *)(result + 104);
    v3 = HIDWORD(*(_QWORD *)v1);
    *(_QWORD *)result = *(_QWORD *)(v2 + 16) + *(_QWORD *)v1;
    *(_QWORD *)(result + 8) = v3;
    v4 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(result + 16) = *(_QWORD *)(v2 + 16) + v4;
    *(_QWORD *)(result + 24) = HIDWORD(v4);
    *(_DWORD *)(result + 32) = *(_DWORD *)(v1 + 16);
    v5 = *(_DWORD *)(v1 + 20);
    *(_DWORD *)(result + 36) = v5;
    if ((v5 & 4) != 0)
    {
      v8 = *(_QWORD *)(result + 96);
      *(_DWORD *)(result + 40) = *(_DWORD *)v8;
      *(_DWORD *)(result + 44) = *(_DWORD *)(v8 + 4);
      v9 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(result + 48) = *(_QWORD *)(v2 + 16) + v9;
      *(_QWORD *)(result + 56) = HIDWORD(v9);
      v10 = *(_QWORD *)(v8 + 16);
      v6 = HIDWORD(v10);
      v7 = (const char *)(*(_QWORD *)(v2 + 16) + v10);
    }
    else
    {
      v6 = 0;
      v7 = "";
    }
    *(_QWORD *)(result + 64) = v7;
    *(_QWORD *)(result + 72) = v6;
  }
  return result;
}

llvm::LLVMContext *sub_1C58ED700(llvm::LLVMContext *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = (char *)llvm::LLVMContext::LLVMContext(a1) + 8;
  v5 = *(_QWORD *)(a2 + 880);
  if (v5)
  {
    if (v5 == a2 + 856)
    {
      *((_QWORD *)a1 + 4) = v4;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a2 + 880) + 24))(*(_QWORD *)(a2 + 880), v4);
    }
    else
    {
      *((_QWORD *)a1 + 4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *((_QWORD *)a1 + 4) = 0;
  }
  v6 = *(_QWORD *)a1;
  *(_BYTE *)(v6 + 2664) = *(_BYTE *)(a2 + 848);
  if (!*(_BYTE *)(v6 + 1184))
  {
    sub_1C6240860(v6 + 1160);
    *(_DWORD *)(v6 + 1176) = 0;
    *(_OWORD *)(v6 + 1160) = 0u;
    *(_BYTE *)(v6 + 1184) = 1;
  }
  v7 = (_QWORD *)operator new();
  *v7 = &unk_1E817E6E8;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v4;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  *(_QWORD *)(*(_QWORD *)a1 + 72) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_BYTE *)(*(_QWORD *)a1 + 80) = 1;
  return a1;
}

void sub_1C58ED810()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C58ED824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
    return 1;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C58ED854(v3);
  }
}

uint64_t sub_1C58ED854(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void **v26;

  v2 = (_QWORD *)(a1 + 1120);
  v3 = *(_QWORD **)(a1 + 1144);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 1112);
  if (v5 == (_QWORD *)(a1 + 1088))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 1088);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 1080);
  if (v7 == (_QWORD *)(a1 + 1056))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 1056);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD **)(a1 + 1048);
  if (v9 == (_QWORD *)(a1 + 1024))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 1024);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = *(_QWORD **)(a1 + 1016);
  if (v11 == (_QWORD *)(a1 + 992))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 992);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = *(_QWORD **)(a1 + 984);
  if (v13 == (_QWORD *)(a1 + 960))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 960);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = *(_QWORD **)(a1 + 952);
  if (v15 == (_QWORD *)(a1 + 928))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 928);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD **)(a1 + 880);
  if (v18 == (_QWORD *)(a1 + 856))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 856);
  }
  else
  {
    if (!v18)
      goto LABEL_43;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_43:
  v26 = (void **)(a1 + 816);
  sub_1C4765410(&v26);
  if (*(char *)(a1 + 815) < 0)
    operator delete(*(void **)(a1 + 792));
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  if (*(char *)(a1 + 735) < 0)
    operator delete(*(void **)(a1 + 712));
  if (*(char *)(a1 + 711) < 0)
    operator delete(*(void **)(a1 + 688));
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  if (*(char *)(a1 + 663) < 0)
    operator delete(*(void **)(a1 + 640));
  if (*(char *)(a1 + 639) < 0)
    operator delete(*(void **)(a1 + 616));
  if (*(char *)(a1 + 615) < 0)
    operator delete(*(void **)(a1 + 592));
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  if (*(char *)(a1 + 543) < 0)
    operator delete(*(void **)(a1 + 520));
  if (*(char *)(a1 + 519) < 0)
    operator delete(*(void **)(a1 + 496));
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  v20 = *(_QWORD **)(a1 + 400);
  if (v20 == (_QWORD *)(a1 + 376))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 376);
  }
  else
  {
    if (!v20)
      goto LABEL_76;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_76:
  v26 = (void **)(a1 + 352);
  sub_1C4765410(&v26);
  v26 = (void **)(a1 + 328);
  sub_1C4765410(&v26);
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  v26 = (void **)(a1 + 280);
  sub_1C4765410(&v26);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v22 = *(std::__shared_weak_count **)(a1 + 72);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C58EDC0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t j;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; i <= v8; i += 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD **)(a1 + 64);
    v12 = &v11[2 * v10];
    do
    {
      v13 = *v11 + v11[1];
      for (j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; j <= v13; j += 32)
      {
        if (*(char *)(j - 9) < 0)
          operator delete(*(void **)(j - 32));
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  return sub_1C4926A50(a1);
}

_QWORD *sub_1C58EDD20(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  v20 = operator new(__n + 33, (std::align_val_t)8uLL);
  v21 = v20;
  v22 = (char *)(v20 + 4);
  if (__n)
    memcpy(v20 + 4, a2, __n);
  v22[__n] = 0;
  v21[3] = 0;
  v21[2] = 0;
  *v21 = __n;
  v21[1] = v21 + 2;
  *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

size_t ***sub_1C58EDF28(size_t ***result, size_t ***a2, uint64_t a3, char a4)
{
  size_t ***v5;
  size_t ***v6;
  size_t ***v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t ***v11;
  size_t **v12;
  uint64_t v13;
  size_t **v14;
  size_t *v15;
  size_t v16;
  size_t *v17;
  size_t v18;
  size_t v19;
  size_t *v20;
  size_t v21;
  size_t v22;
  size_t ***v23;
  size_t ***v24;
  size_t *v25;
  size_t v26;
  size_t v27;
  int v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  size_t **v32;
  size_t v33;
  size_t v34;
  int v35;
  int v36;
  unint64_t v37;
  size_t ***v38;
  size_t ***v39;
  size_t *v40;
  size_t v41;
  size_t v42;
  int v43;
  int v44;
  size_t *v45;
  size_t v46;
  size_t v47;
  int v48;
  int v49;
  size_t **v50;
  size_t ***v51;
  size_t v52;
  const void *v53;
  size_t ***v54;
  size_t *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  size_t ***v60;
  size_t *v61;
  size_t v62;
  size_t v63;
  int v64;
  int v65;
  size_t ***v66;
  BOOL v67;
  BOOL v68;
  size_t ***v69;
  size_t *v70;
  size_t v71;
  size_t v72;
  int v73;
  size_t ***v74;
  size_t ***v75;
  size_t *v76;
  size_t v77;
  size_t v78;
  int v79;
  uint64_t v80;
  size_t **v81;
  size_t **v82;
  size_t v83;
  const void *v84;
  size_t ***v85;
  size_t *v86;
  size_t v87;
  size_t v88;
  int v89;
  size_t ***v90;
  size_t *v91;
  size_t v92;
  size_t v93;
  int v94;
  size_t ***v95;
  size_t **v96;
  size_t v97;
  size_t **v98;
  size_t *v99;
  size_t v100;
  size_t v101;
  size_t ***v102;
  size_t ***v103;
  size_t **v104;
  size_t v105;
  size_t **v106;
  size_t v107;
  size_t v108;
  size_t ***v109;
  size_t **v110;
  size_t *v111;
  size_t v112;
  size_t **v113;
  size_t *v114;
  size_t v115;
  size_t v116;
  size_t v117;
  size_t **v118;
  size_t v119;
  size_t v120;
  size_t v121;
  size_t **v122;
  size_t *v123;
  size_t v124;
  size_t v125;
  size_t ***v126;
  size_t ***v127;
  size_t ***v128;
  uint64_t v130;
  size_t ***v131;
  size_t ***v132;

  v132 = result;
LABEL_2:
  v5 = a2 - 1;
  v131 = a2;
  v126 = a2 - 3;
  v127 = a2 - 2;
  v6 = v132;
  v128 = a2 - 1;
  while (2)
  {
    v7 = v6;
    v8 = (char *)v131 - (char *)v6;
    v9 = v131 - v6;
    v132 = v7;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v96 = *(v131 - 1);
        v97 = **v96;
        v98 = *v7;
        v99 = **v7;
        v100 = *v99;
        if (*v99 >= v97)
          v101 = **v96;
        else
          v101 = *v99;
        if (v101 && (result = (size_t ***)memcmp(*v96 + 6, v99 + 6, v101), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v97 >= v100)
        {
          return result;
        }
        *v7 = v96;
        *(v131 - 1) = v98;
        return result;
      case 3uLL:
        return sub_1C58EED88(v7, v7 + 1, v5);
      case 4uLL:
        return sub_1C58EF2AC(v7, v7 + 1, v7 + 2, v5);
      case 5uLL:
        v102 = v7 + 2;
        v103 = v7 + 3;
        result = sub_1C58EF2AC(v7, v7 + 1, v7 + 2, v7 + 3);
        v104 = *(v131 - 1);
        v105 = **v104;
        v106 = v7[3];
        v107 = **v106;
        if (v107 >= v105)
          v108 = **v104;
        else
          v108 = **v106;
        if (v108 && (result = (size_t ***)memcmp(*v104 + 6, *v106 + 6, v108), (_DWORD)result))
        {
          v109 = v131;
          if ((result & 0x80000000) == 0)
            return result;
        }
        else
        {
          v109 = v131;
          if (v105 >= v107)
            return result;
        }
        *v103 = v104;
        *(v109 - 1) = v106;
        v110 = *v103;
        v111 = **v103;
        v112 = *v111;
        v113 = *v102;
        v114 = **v102;
        v115 = *v114;
        if (*v114 >= *v111)
          v116 = *v111;
        else
          v116 = *v114;
        if (v116 && (result = (size_t ***)memcmp(v111 + 6, v114 + 6, v116), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v112 >= v115)
        {
          return result;
        }
        *v102 = v110;
        *v103 = v113;
        v117 = **v110;
        v118 = v7[1];
        v119 = **v118;
        if (v119 >= v117)
          v120 = **v110;
        else
          v120 = **v118;
        if (v120 && (result = (size_t ***)memcmp(*v110 + 6, *v118 + 6, v120), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v117 >= v119)
        {
          return result;
        }
        v7[1] = v110;
        v7[2] = v118;
        v121 = **v110;
        v122 = *v7;
        v123 = **v7;
        v124 = *v123;
        if (*v123 >= v121)
          v125 = **v110;
        else
          v125 = *v123;
        if (v125 && (result = (size_t ***)memcmp(*v110 + 6, v123 + 6, v125), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v121 >= v124)
        {
          return result;
        }
        *v7 = v110;
        v7[1] = v122;
        return result;
      default:
        if (v8 <= 191 || !a3)
          return result;
        v10 = v9 >> 1;
        v11 = &v131[v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          result = sub_1C58EED88(v11, v131, v5);
        }
        else
        {
          sub_1C58EED88(v131, v11, v5);
          sub_1C58EED88(v131 + 1, v11 - 1, v127);
          sub_1C58EED88(v131 + 2, &v131[v10 + 1], v126);
          result = sub_1C58EED88(v11 - 1, v11, &v131[v10 + 1]);
          v12 = *v131;
          *v131 = *v11;
          *v11 = v12;
        }
        v13 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v14 = *v131;
          v17 = **(v131 - 1);
          v18 = *v17;
          v15 = **v131;
          v16 = *v15;
          if (*v15 >= *v17)
            v19 = *v17;
          else
            v19 = *v15;
          if (v19 && (result = (size_t ***)memcmp(v17 + 6, v15 + 6, v19), (_DWORD)result))
          {
            if ((result & 0x80000000) != 0)
              goto LABEL_38;
          }
          else if (v18 < v16)
          {
            goto LABEL_38;
          }
          v20 = **v5;
          v21 = *v20;
          if (*v20 >= v16)
            v22 = v16;
          else
            v22 = *v20;
          if (v22 && (result = (size_t ***)memcmp(v15 + 6, v20 + 6, v22), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_23;
          }
          else if (v16 >= v21)
          {
LABEL_23:
            v23 = v131 + 1;
            v24 = v131;
            do
            {
              v6 = v23;
              if (v23 >= v131)
                break;
              v25 = **v23;
              v26 = *v25;
              v27 = *v25 >= v16 ? v16 : *v25;
              if (v27 && (result = (size_t ***)memcmp(v15 + 6, v25 + 6, v27), (_DWORD)result))
              {
                v28 = ((int)result >> 31) | 1;
              }
              else if (v16 == v26)
              {
                v28 = 0;
              }
              else
              {
                if (v16 < v26)
                  goto LABEL_122;
                v28 = 1;
              }
              v23 = v6 + 1;
            }
            while (v28 != -1);
            goto LABEL_122;
          }
          v69 = v131 + 1;
          v24 = v131;
          do
          {
            v6 = v69;
            v70 = **v69;
            v71 = *v70;
            if (*v70 >= v16)
              v72 = v16;
            else
              v72 = *v70;
            if (v72 && (result = (size_t ***)memcmp(v15 + 6, v70 + 6, v72), (_DWORD)result))
            {
              v73 = ((int)result >> 31) | 1;
            }
            else if (v16 == v71)
            {
              v73 = 0;
            }
            else
            {
              if (v16 < v71)
                break;
              v73 = 1;
            }
            v69 = v6 + 1;
          }
          while (v73 != -1);
LABEL_122:
          v74 = v24;
          if (v6 < v24)
          {
            v75 = v128;
            do
            {
              v74 = v75;
              v76 = **v75;
              v77 = *v76;
              if (*v76 >= v16)
                v78 = v16;
              else
                v78 = *v76;
              if (v78 && (result = (size_t ***)memcmp(v15 + 6, v76 + 6, v78), (_DWORD)result))
              {
                v79 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v16 >= v77)
                  break;
                v79 = -1;
              }
              v75 = v74 - 1;
            }
            while (v79 == -1);
          }
          v80 = v13;
          if (v6 < v74)
          {
            v81 = *v6;
            v82 = *v74;
            do
            {
              *v6 = v82;
              *v74 = v81;
              v84 = *v14 + 6;
              v83 = **v14;
              v85 = v6 + 1;
              do
              {
                v6 = v85;
                v81 = *v85;
                v86 = **v85;
                v87 = *v86;
                if (*v86 >= v83)
                  v88 = v83;
                else
                  v88 = *v86;
                if (v88 && (result = (size_t ***)memcmp(v84, v86 + 6, v88), (_DWORD)result))
                {
                  v89 = ((int)result >> 31) | 1;
                }
                else if (v83 == v87)
                {
                  v89 = 0;
                }
                else
                {
                  if (v83 < v87)
                    break;
                  v89 = 1;
                }
                v85 = v6 + 1;
              }
              while (v89 != -1);
              v90 = v74 - 1;
              do
              {
                v74 = v90;
                v82 = *v90;
                v91 = **v90;
                v92 = *v91;
                if (*v91 >= v83)
                  v93 = v83;
                else
                  v93 = *v91;
                if (v93 && (result = (size_t ***)memcmp(v84, v91 + 6, v93), (_DWORD)result))
                {
                  v94 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v83 >= v92)
                    break;
                  v94 = -1;
                }
                v90 = v74 - 1;
              }
              while (v94 == -1);
            }
            while (v6 < v74);
          }
          v95 = v6 - 1;
          if (v6 - 1 != v132)
            *v132 = *v95;
          a4 = 0;
          *v95 = v14;
          a3 = v80;
          v5 = v128;
          continue;
        }
        v14 = *v131;
        v15 = **v131;
        v16 = *v15;
LABEL_38:
        v29 = v15 + 6;
        v30 = 8;
        do
        {
          v31 = v30;
          v32 = *(size_t ***)((char *)v131 + v30);
          v33 = **v32;
          if (v16 >= v33)
            v34 = **v32;
          else
            v34 = v16;
          if (v34 && (v35 = memcmp(*v32 + 6, v29, v34)) != 0)
          {
            v36 = (v35 >> 31) | 1;
          }
          else
          {
            if (v33 >= v16)
              break;
            v36 = -1;
          }
          v30 = v31 + 8;
        }
        while (v36 == -1);
        v130 = v13;
        v37 = (unint64_t)v131 + v31;
        v38 = v5;
        if (v31 == 8)
        {
          while (v37 < (unint64_t)(v5 + 1))
          {
            v39 = v5;
            v45 = **v5;
            v46 = *v45;
            if (v16 >= *v45)
              v47 = *v45;
            else
              v47 = v16;
            if (v47 && (v48 = memcmp(v45 + 6, v29, v47)) != 0)
            {
              v49 = (v48 >> 31) | 1;
            }
            else if (v46 == v16)
            {
              v49 = 0;
            }
            else
            {
              if (v46 < v16)
                goto LABEL_75;
              v49 = 1;
            }
            --v5;
            if (v49 == -1)
              goto LABEL_75;
          }
          v39 = v5 + 1;
        }
        else
        {
          do
          {
            v39 = v38;
            v40 = **v38;
            v41 = *v40;
            if (v16 >= *v40)
              v42 = *v40;
            else
              v42 = v16;
            if (v42 && (v43 = memcmp(v40 + 6, v29, v42)) != 0)
            {
              v44 = (v43 >> 31) | 1;
            }
            else if (v41 == v16)
            {
              v44 = 0;
            }
            else
            {
              if (v41 < v16)
                break;
              v44 = 1;
            }
            v38 = v39 - 1;
          }
          while (v44 != -1);
        }
LABEL_75:
        if (v37 >= (unint64_t)v39)
        {
          v6 = (size_t ***)v37;
        }
        else
        {
          v50 = *v39;
          v6 = (size_t ***)v37;
          v51 = v39;
          do
          {
            *v6 = v50;
            *v51 = v32;
            v53 = *v14 + 6;
            v52 = **v14;
            v54 = v6 + 1;
            do
            {
              v6 = v54;
              v32 = *v54;
              v55 = **v54;
              v56 = *v55;
              if (v52 >= *v55)
                v57 = *v55;
              else
                v57 = v52;
              if (v57 && (v58 = memcmp(v55 + 6, v53, v57)) != 0)
              {
                v59 = (v58 >> 31) | 1;
              }
              else
              {
                if (v56 >= v52)
                  break;
                v59 = -1;
              }
              v54 = v6 + 1;
            }
            while (v59 == -1);
            v60 = v51 - 1;
            do
            {
              v51 = v60;
              v50 = *v60;
              v61 = **v60;
              v62 = *v61;
              if (v52 >= *v61)
                v63 = *v61;
              else
                v63 = v52;
              if (v63 && (v64 = memcmp(v61 + 6, v53, v63)) != 0)
              {
                v65 = (v64 >> 31) | 1;
              }
              else if (v62 == v52)
              {
                v65 = 0;
              }
              else
              {
                if (v62 < v52)
                  break;
                v65 = 1;
              }
              v60 = v51 - 1;
            }
            while (v65 != -1);
          }
          while (v6 < v51);
        }
        v66 = v6 - 1;
        if (v6 - 1 != v132)
          *v132 = *v66;
        *v66 = v14;
        v67 = v37 >= (unint64_t)v39;
        a3 = v130;
        v5 = v128;
        if (!v67)
        {
LABEL_108:
          result = (size_t ***)sub_1C58EDF28(v132, v6 - 1, v130, a4 & 1);
          a4 = 0;
          continue;
        }
        v68 = sub_1C58EEF28(v132, v6 - 1);
        result = (size_t ***)sub_1C58EEF28(v6, v131);
        if (!(_DWORD)result)
        {
          if (v68)
            continue;
          goto LABEL_108;
        }
        a2 = v6 - 1;
        if (!v68)
          goto LABEL_2;
        return result;
    }
  }
}

size_t ***sub_1C58EED88(size_t ***result, size_t ***a2, size_t ***a3)
{
  size_t ***v5;
  size_t **v6;
  size_t *v7;
  size_t v8;
  size_t **v9;
  size_t *v10;
  size_t v11;
  size_t v12;
  size_t **v13;
  size_t *v14;
  size_t v15;
  size_t v16;
  size_t **v17;
  size_t *v18;
  size_t v19;
  size_t v20;
  size_t **v21;
  size_t *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t **v26;
  size_t *v27;
  size_t v28;
  size_t **v29;
  size_t *v30;
  size_t v31;
  size_t v32;

  v5 = result;
  v6 = *a2;
  v7 = **a2;
  v8 = *v7;
  v9 = *result;
  v10 = **result;
  v11 = *v10;
  if (*v10 >= *v7)
    v12 = *v7;
  else
    v12 = *v10;
  if (v12)
  {
    result = (size_t ***)memcmp(v7 + 6, v10 + 6, v12);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_7;
LABEL_15:
      v17 = *a3;
      v18 = **a3;
      v19 = *v18;
      if (v8 >= *v18)
        v20 = *v18;
      else
        v20 = v8;
      if (v20 && (result = (size_t ***)memcmp(v18 + 6, v7 + 6, v20), (_DWORD)result))
      {
        if ((result & 0x80000000) == 0)
        {
LABEL_21:
          *v5 = v6;
          *a2 = v9;
          v21 = *a3;
          v22 = **a3;
          v23 = *v22;
          v24 = **v9;
          if (v24 >= *v22)
            v25 = *v22;
          else
            v25 = **v9;
          if (v25 && (result = (size_t ***)memcmp(v22 + 6, *v9 + 6, v25), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v23 >= v24)
          {
            return result;
          }
          *a2 = v21;
          goto LABEL_40;
        }
      }
      else if (v19 >= v8)
      {
        goto LABEL_21;
      }
      *v5 = v17;
LABEL_40:
      *a3 = v9;
      return result;
    }
  }
  if (v8 < v11)
    goto LABEL_15;
LABEL_7:
  v13 = *a3;
  v14 = **a3;
  v15 = *v14;
  if (v8 >= *v14)
    v16 = *v14;
  else
    v16 = v8;
  if (v16 && (result = (size_t ***)memcmp(v14 + 6, v7 + 6, v16), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v15 >= v8)
  {
    return result;
  }
  *a2 = v13;
  *a3 = v6;
  v26 = *a2;
  v27 = **a2;
  v28 = *v27;
  v29 = *v5;
  v30 = **v5;
  v31 = *v30;
  if (*v30 >= *v27)
    v32 = *v27;
  else
    v32 = *v30;
  if (v32 && (result = (size_t ***)memcmp(v27 + 6, v30 + 6, v32), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v28 >= v31)
  {
    return result;
  }
  *v5 = v26;
  *a2 = v29;
  return result;
}

BOOL sub_1C58EEF28(size_t ***a1, size_t ***a2)
{
  uint64_t v3;
  _BOOL8 result;
  size_t **v5;
  size_t v6;
  size_t **v7;
  size_t *v8;
  size_t v9;
  size_t v10;
  int v11;
  size_t ***v12;
  size_t ***v13;
  uint64_t v14;
  int v15;
  size_t **v16;
  size_t *v17;
  size_t v18;
  size_t **v19;
  size_t *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t v24;
  size_t ***v25;
  size_t v26;
  size_t v27;
  size_t v28;
  int v29;
  int v30;
  size_t ***v31;
  size_t ***v32;
  size_t **v33;
  size_t v34;
  size_t **v35;
  size_t v36;
  size_t v37;
  int v38;
  size_t **v39;
  size_t *v40;
  size_t v41;
  size_t **v42;
  size_t *v43;
  size_t v44;
  size_t v45;
  int v46;
  size_t v47;
  size_t **v48;
  size_t v49;
  size_t v50;
  int v51;
  size_t v52;
  size_t **v53;
  size_t *v54;
  size_t v55;
  size_t v56;
  int v57;

  v3 = a2 - a1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v5 = *(a2 - 1);
      v6 = **v5;
      v7 = *a1;
      v8 = **a1;
      v9 = *v8;
      if (*v8 >= v6)
        v10 = **v5;
      else
        v10 = *v8;
      if (v10 && (v11 = memcmp(*v5 + 6, v8 + 6, v10)) != 0)
      {
        if ((v11 & 0x80000000) == 0)
          return 1;
      }
      else if (v6 >= v9)
      {
        return 1;
      }
      *a1 = v5;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      sub_1C58EED88(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C58EF2AC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v31 = a1 + 2;
      v32 = a1 + 3;
      sub_1C58EF2AC(a1, a1 + 1, a1 + 2, a1 + 3);
      v33 = *(a2 - 1);
      v34 = **v33;
      v35 = a1[3];
      v36 = **v35;
      if (v36 >= v34)
        v37 = **v33;
      else
        v37 = **v35;
      if (v37 && (v38 = memcmp(*v33 + 6, *v35 + 6, v37)) != 0)
      {
        if ((v38 & 0x80000000) == 0)
          return 1;
      }
      else if (v34 >= v36)
      {
        return 1;
      }
      *v32 = v33;
      *(a2 - 1) = v35;
      v39 = *v32;
      v40 = **v32;
      v41 = *v40;
      v42 = *v31;
      v43 = **v31;
      v44 = *v43;
      if (*v43 >= *v40)
        v45 = *v40;
      else
        v45 = *v43;
      if (v45 && (v46 = memcmp(v40 + 6, v43 + 6, v45)) != 0)
      {
        if ((v46 & 0x80000000) == 0)
          return 1;
      }
      else if (v41 >= v44)
      {
        return 1;
      }
      *v31 = v39;
      *v32 = v42;
      v47 = **v39;
      v48 = a1[1];
      v49 = **v48;
      if (v49 >= v47)
        v50 = **v39;
      else
        v50 = **v48;
      if (v50 && (v51 = memcmp(*v39 + 6, *v48 + 6, v50)) != 0)
      {
        if ((v51 & 0x80000000) == 0)
          return 1;
      }
      else if (v47 >= v49)
      {
        return 1;
      }
      a1[1] = v39;
      a1[2] = v48;
      v52 = **v39;
      v53 = *a1;
      v54 = **a1;
      v55 = *v54;
      if (*v54 >= v52)
        v56 = **v39;
      else
        v56 = *v54;
      if (v56 && (v57 = memcmp(*v39 + 6, v54 + 6, v56)) != 0)
      {
        if ((v57 & 0x80000000) == 0)
          return 1;
      }
      else if (v52 >= v55)
      {
        return 1;
      }
      *a1 = v39;
      a1[1] = v53;
      return 1;
    default:
      v12 = a1 + 2;
      sub_1C58EED88(a1, a1 + 1, a1 + 2);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  do
  {
    v16 = *v13;
    v17 = **v13;
    v18 = *v17;
    v19 = *v12;
    v20 = **v12;
    v21 = *v20;
    if (*v20 >= *v17)
      v22 = *v17;
    else
      v22 = *v20;
    if (v22 && (v23 = memcmp(v17 + 6, v20 + 6, v22)) != 0)
    {
      if ((v23 & 0x80000000) == 0)
        goto LABEL_34;
    }
    else if (v18 >= v21)
    {
      goto LABEL_34;
    }
    v24 = v14;
    while (1)
    {
      *(size_t ***)((char *)a1 + v24 + 24) = v19;
      if (v24 == -16)
      {
        v25 = a1;
        goto LABEL_33;
      }
      v25 = v12;
      v26 = **v16;
      v19 = *(size_t ***)((char *)a1 + v24 + 8);
      v27 = **v19;
      v28 = v27 >= v26 ? **v16 : **v19;
      if (!v28)
        break;
      v29 = memcmp(*v16 + 6, *v19 + 6, v28);
      if (!v29)
        break;
      v30 = (v29 >> 31) | 1;
LABEL_29:
      v12 = v25 - 1;
      v24 -= 8;
      if (v30 != -1)
        goto LABEL_33;
    }
    if (v26 < v27)
    {
      v30 = -1;
      goto LABEL_29;
    }
    v25 = (size_t ***)((char *)a1 + v24 + 16);
LABEL_33:
    *v25 = v16;
    if (++v15 == 8)
      return v13 + 1 == a2;
LABEL_34:
    v12 = v13;
    v14 += 8;
    ++v13;
  }
  while (v13 != a2);
  return 1;
}

size_t ***sub_1C58EF2AC(size_t ***a1, size_t ***a2, size_t ***a3, size_t ***a4)
{
  size_t ***result;
  size_t **v9;
  size_t *v10;
  size_t v11;
  size_t **v12;
  size_t *v13;
  size_t v14;
  size_t v15;
  size_t **v16;
  size_t *v17;
  size_t v18;
  size_t **v19;
  size_t *v20;
  size_t v21;
  size_t v22;
  size_t **v23;
  size_t *v24;
  size_t v25;
  size_t **v26;
  size_t *v27;
  size_t v28;
  size_t v29;

  result = sub_1C58EED88(a1, a2, a3);
  v9 = *a4;
  v10 = **a4;
  v11 = *v10;
  v12 = *a3;
  v13 = **a3;
  v14 = *v13;
  if (*v13 >= *v10)
    v15 = *v10;
  else
    v15 = *v13;
  if (v15 && (result = (size_t ***)memcmp(v10 + 6, v13 + 6, v15), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v11 >= v14)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v12;
  v16 = *a3;
  v17 = **a3;
  v18 = *v17;
  v19 = *a2;
  v20 = **a2;
  v21 = *v20;
  if (*v20 >= *v17)
    v22 = *v17;
  else
    v22 = *v20;
  if (v22 && (result = (size_t ***)memcmp(v17 + 6, v20 + 6, v22), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v18 >= v21)
  {
    return result;
  }
  *a2 = v16;
  *a3 = v19;
  v23 = *a2;
  v24 = **a2;
  v25 = *v24;
  v26 = *a1;
  v27 = **a1;
  v28 = *v27;
  if (*v27 >= *v24)
    v29 = *v24;
  else
    v29 = *v27;
  if (v29 && (result = (size_t ***)memcmp(v24 + 6, v27 + 6, v29), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v25 >= v28)
  {
    return result;
  }
  *a1 = v23;
  *a2 = v26;
  return result;
}

uint64_t sub_1C58EF3D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  v4 = *a1 + 16 * v3;
  if ((_DWORD)v3)
  {
    v5 = *(const void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = 16 * v3;
    while (*(_QWORD *)(v2 + 8) != v6 || v6 && memcmp(*(const void **)v2, v5, v6))
    {
      v2 += 16;
      v7 -= 16;
      if (!v7)
        return v4;
    }
    return v2;
  }
  return v4;
}

void sub_1C58EF450(uint64_t ***a1, const void *a2, size_t a3, void *__s2, size_t __n)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  _QWORD v20[2];
  const void *v21;
  size_t v22;

  v21 = a2;
  v22 = a3;
  v20[0] = __s2;
  v20[1] = __n;
  v5 = *a1;
  v6 = *a1 + 8;
  if (*v6)
  {
    v7 = v5[7];
    if (!v7)
      goto LABEL_8;
    do
    {
      if (!sub_1C4E4FA7C((uint64_t)v6, (uint64_t)v20, (uint64_t)(v7 + 4)))
      {
        if (!sub_1C4E4FA7C((uint64_t)v6, (uint64_t)(v7 + 4), (uint64_t)v20))
          return;
        ++v7;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    v5 = *a1;
    if ((*a1)[8])
    {
LABEL_8:
      sub_1C62B236C(v5 + 6, (uint64_t)&v21);
      return;
    }
    goto LABEL_17;
  }
  v9 = *((unsigned int *)v5 + 2);
  if (!(_DWORD)v9)
    goto LABEL_17;
  v12 = 16 * v9;
  v13 = *v5 + 1;
  while (*v13 != __n || __n && memcmp((const void *)*(v13 - 1), __s2, __n))
  {
    v13 += 2;
    v12 -= 16;
    if (!v12)
      goto LABEL_17;
  }
  if (!v12)
  {
LABEL_17:
    v14 = *((unsigned int *)v5 + 2);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = *v5;
      v17 = 16 * v14;
      v18 = v21;
      v19 = v22;
      while (v16[v15 / 8 + 1] != v19 || v19 && memcmp((const void *)v16[v15 / 8], v18, v19))
      {
        v15 += 16;
        if (v17 == v15)
          return;
      }
      if (v17 - 16 != v15)
      {
        memmove(&v16[v15 / 8], &v16[v15 / 8 + 2], v17 - v15 - 16);
        LODWORD(v14) = *((_DWORD *)v5 + 2);
      }
      *((_DWORD *)v5 + 2) = v14 - 1;
    }
  }
}

_OWORD *sub_1C58EF5D0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C58EF698(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F6FF0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C58EF698(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C85F6FF0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_1C62B24D8((uint64_t *)v5, (const void **)a2, &v10);
      v9 = v10;
      *v10 = *(_OWORD *)a2;
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_QWORD *sub_1C58EF750(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = (37 * v16) & v14;
          v18 = &result[2 * v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[2 * (v23 & v14)];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_12;
            }
            if (v20)
              v18 = v20;
          }
LABEL_12:
          *v18 = v16;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v15 + 2);
          *((_DWORD *)a1 + 2) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = -1;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1C58EF8C8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = **a1;
  v3 = *((unsigned int *)*a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & (37 * a2);
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if ((uint64_t *)(v2 + 16 * v3) == v5)
    return 2;
  else
    return *((unsigned int *)v5 + 2);
}

void sub_1C58EF94C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58EF960(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817E5A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C58EF994(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E817E5A0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C58EF9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  int *v19;
  size_t v20;
  int v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  char v27;
  int *v28;
  size_t v29;
  int v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void (**v34)(void);
  void (**v35)(void);
  void (**v36)(void);
  uint64_t result;
  uint64_t (**v38)(void);
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  int v47[4];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v13 = (_QWORD *)a5[3];
  if (v13)
  {
    if (v13 == a5)
    {
      v42 = v41;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v41);
    }
    else
    {
      v42 = (_QWORD *)a5[3];
      a5[3] = 0;
    }
  }
  else
  {
    v42 = 0;
  }
  v14 = (_QWORD *)a6[3];
  if (v14)
  {
    if (v14 == a6)
    {
      v40 = v39;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v39);
    }
    else
    {
      v40 = (_QWORD *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    v40 = 0;
  }
  v15 = operator new();
  v16 = *(_QWORD *)(a1 + 8);
  if (v42)
  {
    if (v42 == v41)
    {
      v46 = v45;
      (*(void (**)(_QWORD *, _QWORD *))(v41[0] + 24))(v41, v45);
    }
    else
    {
      v46 = (_QWORD *)(*(uint64_t (**)(void))(*v42 + 16))();
    }
  }
  else
  {
    v46 = 0;
  }
  if (v40)
  {
    if (v40 == v39)
    {
      v44 = v43;
      (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v43);
    }
    else
    {
      v44 = (_QWORD *)(*(uint64_t (**)(void))(*v40 + 16))();
    }
  }
  else
  {
    v44 = 0;
  }
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  *(_QWORD *)v15 = &off_1E817E5E8;
  *(_QWORD *)(v15 + 8) = a2;
  llvm::ThreadPool::ThreadPool(v15 + 32, v16);
  if (v46)
  {
    if (v46 == v45)
    {
      *(_QWORD *)(v15 + 512) = v15 + 488;
      (*(void (**)(_QWORD *))(v45[0] + 24))(v45);
    }
    else
    {
      *(_QWORD *)(v15 + 512) = v46;
      v46 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v15 + 512) = 0;
  }
  if (v44)
  {
    if (v44 == v43)
    {
      *(_QWORD *)(v15 + 544) = v15 + 520;
      (*(void (**)(_QWORD *))(v43[0] + 24))(v43);
    }
    else
    {
      *(_QWORD *)(v15 + 544) = v44;
      v44 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v15 + 544) = 0;
  }
  *(_QWORD *)(v15 + 568) = 0;
  *(_QWORD *)(v15 + 560) = 0;
  *(_QWORD *)(v15 + 552) = v15 + 560;
  *(_QWORD *)(v15 + 592) = 0;
  *(_QWORD *)(v15 + 584) = 0;
  *(_QWORD *)(v15 + 576) = v15 + 584;
  *(_BYTE *)(v15 + 600) = 0;
  *(_BYTE *)(v15 + 608) = 0;
  *(_QWORD *)(v15 + 616) = 850045863;
  *(_OWORD *)(v15 + 624) = 0u;
  *(_OWORD *)(v15 + 640) = 0u;
  *(_OWORD *)(v15 + 656) = 0u;
  *(_QWORD *)(v15 + 672) = 0;
  v17 = (_QWORD *)a3[18];
  if (v17 != a3 + 19)
  {
    do
    {
      v18 = *((_BYTE *)v17 + 55);
      if (v18 >= 0)
        v19 = (int *)(v17 + 4);
      else
        v19 = (int *)v17[4];
      v20 = v17[5];
      if (v18 >= 0)
        v20 = v18 & 0x7F;
      if (v20)
      {
        v21 = *(unsigned __int8 *)v19;
        if (v21 == 1)
          v22 = v20 - 1;
        else
          v22 = v20;
        if (v21 == 1)
          v19 = (int *)((char *)v19 + 1);
      }
      else
      {
        v22 = 0;
      }
      v48 = xmmword_1C85F4BB0;
      v49 = 0;
      llvm::MD5::update((int *)&v48, v19, v22);
      llvm::MD5::final((int *)&v48, v47);
      *(_QWORD *)&v48 = *(_QWORD *)v47;
      sub_1C47BC21C((uint64_t **)(v15 + 552), (unint64_t *)&v48, (uint64_t **)&v48);
      v23 = (_QWORD *)v17[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v17[2];
          v25 = *v24 == (_QWORD)v17;
          v17 = v24;
        }
        while (!v25);
      }
      v17 = v24;
    }
    while (v24 != a3 + 19);
  }
  v26 = (_QWORD *)a3[21];
  if (v26 != a3 + 22)
  {
    do
    {
      v27 = *((_BYTE *)v26 + 55);
      if (v27 >= 0)
        v28 = (int *)(v26 + 4);
      else
        v28 = (int *)v26[4];
      v29 = v26[5];
      if (v27 >= 0)
        v29 = v27 & 0x7F;
      if (v29)
      {
        v30 = *(unsigned __int8 *)v28;
        if (v30 == 1)
          v31 = v29 - 1;
        else
          v31 = v29;
        if (v30 == 1)
          v28 = (int *)((char *)v28 + 1);
      }
      else
      {
        v31 = 0;
      }
      v48 = xmmword_1C85F4BB0;
      v49 = 0;
      llvm::MD5::update((int *)&v48, v28, v31);
      llvm::MD5::final((int *)&v48, v47);
      *(_QWORD *)&v48 = *(_QWORD *)v47;
      sub_1C47BC21C((uint64_t **)(v15 + 576), (unint64_t *)&v48, (uint64_t **)&v48);
      v32 = (_QWORD *)v26[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v26[2];
          v25 = *v33 == (_QWORD)v26;
          v26 = v33;
        }
        while (!v25);
      }
      v26 = v33;
    }
    while (v33 != a3 + 22);
  }
  if (v44 == v43)
  {
    v34 = (void (**)(void))(v43[0] + 32);
  }
  else
  {
    if (!v44)
      goto LABEL_76;
    v34 = (void (**)(void))(*v44 + 40);
  }
  (*v34)();
LABEL_76:
  if (v46 == v45)
  {
    v35 = (void (**)(void))(v45[0] + 32);
  }
  else
  {
    if (!v46)
      goto LABEL_81;
    v35 = (void (**)(void))(*v46 + 40);
  }
  (*v35)();
LABEL_81:
  if (v40 == v39)
  {
    v36 = (void (**)(void))(v39[0] + 32);
  }
  else
  {
    if (!v40)
      goto LABEL_86;
    v36 = (void (**)(void))(*v40 + 40);
  }
  (*v36)();
LABEL_86:
  result = (uint64_t)v42;
  if (v42 == v41)
  {
    v38 = (uint64_t (**)(void))(v41[0] + 32);
    goto LABEL_90;
  }
  if (v42)
  {
    v38 = (uint64_t (**)(void))(*v42 + 40);
LABEL_90:
    result = (*v38)();
  }
  *a7 = v15;
  return result;
}

uint64_t sub_1C58EFEC4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E817E5E8;
  std::mutex::~mutex((std::mutex *)(a1 + 616));
  if (*(_BYTE *)(a1 + 608))
  {
    v2 = *(_QWORD *)(a1 + 600);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_BYTE *)(a1 + 608) = 0;
  }
  sub_1C47655E8(a1 + 576, *(_QWORD **)(a1 + 584));
  sub_1C47655E8(a1 + 552, *(_QWORD **)(a1 + 560));
  v3 = *(_QWORD **)(a1 + 544);
  if (v3 == (_QWORD *)(a1 + 520))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 520);
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v5 = *(_QWORD **)(a1 + 512);
  if (v5 == (_QWORD *)(a1 + 488))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 488);
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_15;
  }
  if (v5)
  {
    v6 = 5;
    goto LABEL_14;
  }
LABEL_15:
  llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)(a1 + 32));
  return a1;
}

void sub_1C58EFF98(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E817E5E8;
  std::mutex::~mutex((std::mutex *)(a1 + 616));
  if (*(_BYTE *)(a1 + 608))
  {
    v2 = *(_QWORD *)(a1 + 600);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_BYTE *)(a1 + 608) = 0;
  }
  sub_1C47655E8(a1 + 576, *(_QWORD **)(a1 + 584));
  sub_1C47655E8(a1 + 552, *(_QWORD **)(a1 + 560));
  v3 = *(_QWORD **)(a1 + 544);
  if (v3 == (_QWORD *)(a1 + 520))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 520);
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v5 = *(_QWORD **)(a1 + 512);
  if (v5 == (_QWORD *)(a1 + 488))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 488);
  }
  else
  {
    if (!v5)
    {
LABEL_15:
      llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)(a1 + 32));
      JUMPOUT(0x1CAA32FC0);
    }
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
  goto LABEL_15;
}

void sub_1C58F007C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  void (**v30)(void);
  uint64_t v31;
  std::shared_future<void> v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *((unsigned int *)v9 + 2);
  if ((_DWORD)v10)
  {
    v12 = *(const void **)(a3 + 16);
    v11 = *(_QWORD *)(a3 + 24);
    v13 = 0;
    if (v11)
    {
      v14 = *(_QWORD *)(a3 + 24);
      v15 = *(unsigned __int8 **)(a3 + 16);
      do
      {
        v16 = *v15++;
        v13 = 33 * v13 + v16;
        --v14;
      }
      while (v14);
    }
    v17 = v10 - 1;
    v18 = *v9;
    v31 = *((unsigned int *)v9 + 2);
    v19 = *v9 + 8 * v10 + 8;
    v20 = 1;
    v21 = v13;
    while (1)
    {
      v22 = v21 & v17;
      v23 = *(_QWORD **)(v18 + 8 * v22);
      if (v23 != (_QWORD *)-8)
      {
        if (!v23)
        {
          v24 = v31;
          goto LABEL_14;
        }
        if (*(_DWORD *)(v19 + 4 * v22) == v13
          && v11 == *v23
          && (!v11 || !memcmp(v12, (char *)v23 + *((unsigned int *)v9 + 5), v11)))
        {
          break;
        }
      }
      v21 = v20 + v22;
      ++v20;
    }
    v24 = v31;
    if ((_DWORD)v22 != -1)
      v24 = (int)v22;
  }
  else
  {
    v24 = 0;
    v18 = *v9;
  }
LABEL_14:
  v25 = *(_QWORD *)(v18 + 8 * v24) + 8;
  v26 = *(_QWORD *)(a1 + 16);
  v27 = (char *)operator new(0x88uLL);
  v28 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v27 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v27 + 40) = v28;
  v29 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)v27 = &off_1E817E620;
  *((_QWORD *)v27 + 1) = a1;
  *((_DWORD *)v27 + 4) = a2;
  *(_OWORD *)(v27 + 72) = v29;
  *((_QWORD *)v27 + 11) = v26;
  *((_QWORD *)v27 + 12) = a4;
  *((_QWORD *)v27 + 13) = a5;
  *((_QWORD *)v27 + 14) = a6;
  *((_QWORD *)v27 + 15) = v25;
  *((_QWORD *)v27 + 16) = a7;
  v41 = v27;
  sub_1C6208584(a1 + 32, v40, 0, (std::future<void> *)&v39);
  if (v41 == v40)
  {
    v30 = (void (**)(void))(v40[0] + 32);
    goto LABEL_18;
  }
  if (v41)
  {
    v30 = (void (**)(void))(*v41 + 40);
LABEL_18:
    (*v30)();
  }
  std::shared_future<void>::~shared_future(&v39);
  *a8 = 0;
}

void sub_1C58F0284(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  llvm::ThreadPool::wait((llvm::ThreadPool *)(a1 + 32));
  if (*(_BYTE *)(a1 + 608))
  {
    v4 = *(_QWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
}

uint64_t sub_1C58F02C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 484);
}

void sub_1C58F02D4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C58F02E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x88uLL);
  *(_QWORD *)v2 = &off_1E817E620;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C58F0358(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_1E817E620;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void sub_1C58F03B0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int i;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(void);
  llvm *v33;
  uint64_t (**v34)(void);
  char *v35;
  void *v36;
  char *v37;
  void (*v38)(void);
  void (**v39)(void);
  char *v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  char *v59[5];
  __int128 v60;
  int v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  llvm *v65;
  _QWORD v66[3];
  _QWORD *v67;
  char *v68[3];
  char **v69;
  char v70;
  void (**v71)(_QWORD);
  __int128 v72;
  _QWORD v73[8];

  v73[5] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 88);
  v2 = *(char **)(a1 + 96);
  v45 = *(_QWORD **)(a1 + 112);
  v46 = *(_QWORD *)(a1 + 104);
  v49 = *(_OWORD *)(a1 + 120);
  v50 = *(_OWORD *)(a1 + 24);
  v51 = *(_OWORD *)(a1 + 40);
  v52 = *(_OWORD *)(a1 + 56);
  v53 = *(_OWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  if (*(_BYTE *)(v5 + 840))
    llvm::timeTraceProfilerInitialize(*(_DWORD *)(v5 + 844), (uint64_t)"thin backend", 12);
  v6 = *(_QWORD *)(v4 + 512);
  if (v6)
  {
    if (v6 == v4 + 488)
    {
      v65 = (llvm *)v64;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v64);
    }
    else
    {
      v65 = (llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    v65 = 0;
  }
  v7 = *(_QWORD *)(v4 + 544);
  if (v7)
  {
    if (v7 == v4 + 520)
    {
      v63 = v62;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 24))(v7, v62);
      v7 = (uint64_t)v63;
    }
    else
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      v63 = (_QWORD *)v7;
    }
  }
  else
  {
    v63 = 0;
  }
  v8 = *(_DWORD *)(a1 + 16);
  v54 = v50;
  v55 = v51;
  v56 = v52;
  v57 = v53;
  v61 = v8;
  v48 = v4;
  v59[0] = (char *)v4;
  v59[1] = (char *)&v54;
  v59[2] = (char *)&v61;
  v59[3] = (char *)v3;
  v44 = (uint64_t)v2;
  v59[4] = v2;
  v60 = v49;
  if (!v7 || (v47 = *(unsigned int *)(v3 + 32), !(_DWORD)v47))
  {
LABEL_44:
    if (v65)
    {
      if (v65 == (llvm *)v64)
      {
        v73[0] = &v71;
        (*(void (**)(_QWORD *, void (***)(_QWORD)))(v64[0] + 24))(v64, &v71);
      }
      else
      {
        v73[0] = (*(uint64_t (**)(void))(*(_QWORD *)v65 + 16))();
      }
    }
    else
    {
      v73[0] = 0;
    }
    sub_1C58F0A40((uint64_t *)&v58, (uint64_t *)v59, &v71);
    if ((void (***)(_QWORD))v73[0] == &v71)
    {
      v71[4](&v71);
      v31 = v48;
    }
    else
    {
      v31 = v48;
      if (v73[0])
        (*(void (**)(void))(*(_QWORD *)v73[0] + 40))();
    }
    goto LABEL_53;
  }
  v9 = v55;
  if (*((_QWORD *)&v55 + 1))
  {
    v10 = 0;
    v11 = *((_QWORD *)&v55 + 1);
    v12 = (unsigned __int8 *)v55;
    do
    {
      v13 = *v12++;
      v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  else
  {
    v10 = 0;
  }
  v14 = v47 - 1;
  v15 = *(_QWORD *)(v3 + 24);
  v16 = v15 + 8 * v47 + 8;
  v17 = 1;
  v18 = v10;
  while (1)
  {
    v19 = v18 & v14;
    v20 = *(_QWORD **)(v15 + 8 * v19);
    if (v20 == (_QWORD *)-8)
      goto LABEL_25;
    if (!v20)
      goto LABEL_44;
    if (*(_DWORD *)(v16 + 4 * v19) != v10 || *((_QWORD *)&v9 + 1) != *v20)
      goto LABEL_25;
    v21 = *(unsigned int *)(v3 + 44);
    if (!*((_QWORD *)&v9 + 1))
      break;
    if (!memcmp((const void *)v9, (char *)v20 + v21, *((size_t *)&v9 + 1)))
    {
      if ((_DWORD)v19 == -1 || (int)v19 == v47)
        goto LABEL_44;
      v22 = 0;
      v23 = *((_QWORD *)&v9 + 1);
      v24 = (unsigned __int8 *)v9;
      do
      {
        v25 = *v24++;
        v22 = 33 * v22 + v25;
        --v23;
      }
      while (v23);
      goto LABEL_30;
    }
LABEL_25:
    v18 = v17 + v19;
    ++v17;
  }
  if ((_DWORD)v19 == -1 || (int)v19 == v47)
    goto LABEL_44;
  v22 = 0;
LABEL_30:
  v26 = 1;
  for (i = v22; ; i = v28 + v26++)
  {
    v28 = i & v14;
    v29 = *(_QWORD **)(v15 + 8 * v28);
    if (v29 != (_QWORD *)-8)
    {
      if (!v29)
        goto LABEL_41;
      if (*(_DWORD *)(v16 + 4 * v28) == v22
        && *((_QWORD *)&v9 + 1) == *v29
        && (!*((_QWORD *)&v9 + 1) || !memcmp((const void *)v9, (char *)v29 + v21, *((size_t *)&v9 + 1))))
      {
        break;
      }
    }
  }
  if ((_DWORD)v28 != -1)
    v47 = (int)v28;
LABEL_41:
  v30 = 0;
  while (!*(_DWORD *)(*(_QWORD *)(v15 + 8 * v47) + 16 + v30))
  {
    v30 += 4;
    if (v30 == 20)
      goto LABEL_44;
  }
  v71 = (void (**)(_QWORD))v73;
  v72 = xmmword_1C64638D0;
  v31 = v48;
  llvm::computeLTOCacheKey(&v71, *(_QWORD *)(v48 + 8), v3, (unsigned __int8 *)v9, *((size_t *)&v9 + 1), v44, v46, v45, v49, v48 + 552, v48 + 576);
  v66[0] = v71;
  v66[1] = v72;
  LODWORD(v58) = v61;
  if (!v63)
  {
    sub_1C485C2F0();
    sub_1C58F0A40(v41, v42, v43);
    return;
  }
  (*(void (**)(char **__return_ptr, _QWORD *, char **, _QWORD *))(*v63 + 48))(v68, v63, &v58, v66);
  if ((v70 & 1) == 0)
  {
    v58 = 0;
    goto LABEL_82;
  }
  v37 = v68[0];
  v68[0] = 0;
  v58 = v37;
  if (!v37)
  {
LABEL_82:
    if (v69)
    {
      if (v69 == v68)
      {
        v67 = v66;
        (*((void (**)(char **, _QWORD *))v68[0] + 3))(v68, v66);
      }
      else
      {
        v67 = (_QWORD *)(*((uint64_t (**)(void))*v69 + 2))();
      }
      sub_1C58F0A40((uint64_t *)&v58, (uint64_t *)v59, v66);
      if (v67 == v66)
      {
        v38 = *(void (**)(void))(v66[0] + 32);
LABEL_91:
        v38();
      }
      else if (v67)
      {
        v38 = *(void (**)(void))(*v67 + 40);
        goto LABEL_91;
      }
    }
    else
    {
      v58 = 0;
    }
  }
  if ((v70 & 1) != 0)
  {
    v40 = v68[0];
    v68[0] = 0;
    if (!v40)
      goto LABEL_100;
    v39 = (void (**)(void))(*(_QWORD *)v40 + 8);
LABEL_99:
    (*v39)();
    goto LABEL_100;
  }
  if (v69 == v68)
  {
    v39 = (void (**)(void))(v68[0] + 32);
    goto LABEL_99;
  }
  if (v69)
  {
    v39 = (void (**)(void))(*v69 + 40);
    goto LABEL_99;
  }
LABEL_100:
  if (v71 != v73)
    free(v71);
LABEL_53:
  if (v63 == v62)
  {
    v32 = (void (**)(void))(v62[0] + 32);
LABEL_57:
    (*v32)();
  }
  else if (v63)
  {
    v32 = (void (**)(void))(*v63 + 40);
    goto LABEL_57;
  }
  v33 = v65;
  if (v65 == (llvm *)v64)
  {
    v34 = (uint64_t (**)(void))(v64[0] + 32);
LABEL_62:
    v33 = (llvm *)(*v34)();
  }
  else if (v65)
  {
    v34 = (uint64_t (**)(void))(*(_QWORD *)v65 + 40);
    goto LABEL_62;
  }
  if (v58)
  {
    std::mutex::lock((std::mutex *)(v31 + 616));
    if (*(_BYTE *)(v31 + 608))
    {
      v35 = *(char **)(v31 + 600);
      *(_QWORD *)(v31 + 600) = 0;
      v68[0] = v58;
      v58 = 0;
      v59[0] = v35;
      sub_1C624E8DC(v59, v68, &v71);
      v36 = v71;
      if (!*(_BYTE *)(v31 + 608))
        *(_BYTE *)(v31 + 608) = 1;
      *(_QWORD *)(v31 + 600) = v36;
      v71 = 0;
      if (v68[0])
        (*(void (**)(char *))(*(_QWORD *)v68[0] + 8))(v68[0]);
      if (v59[0])
        (*(void (**)(char *))(*(_QWORD *)v59[0] + 8))(v59[0]);
    }
    else
    {
      *(_QWORD *)(v31 + 600) = v58;
      v58 = 0;
      *(_BYTE *)(v31 + 608) = 1;
    }
    std::mutex::unlock((std::mutex *)(v31 + 616));
  }
  if (*(_BYTE *)(*(_QWORD *)(v31 + 8) + 840))
    llvm::timeTraceProfilerFinishThread(v33);
  if (v58)
    (*(void (**)(char *))(*(_QWORD *)v58 + 8))(v58);
}

void sub_1C58F0A40(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  const llvm::ModuleSummaryIndex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  llvm::Value *v16;
  _QWORD *v17;
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  int v24[2];
  char v25;
  llvm::LLVMContextImpl *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  sub_1C58ED700((llvm::LLVMContext *)&v26, *(_QWORD *)(*a2 + 8));
  llvm::BitcodeModule::getModuleImpl((__int128 *)a2[1], (uint64_t)&v26, 1, 0, 0, (uint64_t)sub_1C62B26EC, (uint64_t)&__p, (uint64_t)v24);
  if ((v25 & 1) != 0)
  {
    v10 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *a1 = v10;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_DWORD *)a2[2];
  v9 = (_QWORD *)a3[3];
  if (v9)
  {
    if (v9 == a3)
    {
      v23 = v22;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v22);
    }
    else
    {
      v23 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    v23 = 0;
  }
  v11 = (const llvm::ModuleSummaryIndex *)a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  __p = 0;
  v20 = 0;
  v21 = 0;
  llvm::lto::thinBackend(v7, v8, v22, *(uint64_t *)v24, v11, v12, v13, v14, a1, (uint64_t)&__p);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v23 == v22)
  {
    v15 = *(void (**)(void))(v22[0] + 32);
  }
  else
  {
    if (!v23)
      goto LABEL_15;
    v15 = *(void (**)(void))(*v23 + 40);
  }
  v15();
LABEL_15:
  sub_1C4FF9CA4((uint64_t)v24);
  v17 = v28;
  if (v28 == v27)
  {
    v18 = 4;
    v17 = v27;
    goto LABEL_19;
  }
  if (v28)
  {
    v18 = 5;
LABEL_19:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  llvm::LLVMContext::~LLVMContext(&v26, v16);
}

uint64_t sub_1C58F0C00(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E817E668;
  v2 = (_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C58F0C7C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E817E668;
  v2 = (_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C58F0D08(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = off_1E817E668;
  sub_1C58F1178(v2 + 8, v1);
  return v2;
}

char *sub_1C58F0D48(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E817E668;
  return sub_1C58F1178((char *)(a2 + 8), (__int128 *)(a1 + 8));
}

void sub_1C58F0D64(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_1C58F0DD8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 72;
  v3 = (char *)*((_QWORD *)__p + 12);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[55] < 0)
    operator delete(*((void **)__p + 4));
  if (__p[31] < 0)
    operator delete(*((void **)__p + 1));
  operator delete(__p);
}

uint64_t sub_1C58F0E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  void (**v21)(void);
  uint64_t result;
  uint64_t (**v23)(void);
  void *__p[2];
  uint64_t v25;
  void *__dst[2];
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v13 = (_QWORD *)a5[3];
  if (v13)
  {
    if (v13 == a5)
    {
      v31 = v30;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v30);
    }
    else
    {
      v31 = (_QWORD *)a5[3];
      a5[3] = 0;
    }
  }
  else
  {
    v31 = 0;
  }
  v14 = (_QWORD *)a6[3];
  if (v14)
  {
    if (v14 == a6)
    {
      v29 = v28;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v28);
    }
    else
    {
      v29 = (_QWORD *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    v29 = 0;
  }
  v15 = operator new();
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 8);
    v27 = *(_QWORD *)(a1 + 24);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 48);
  }
  v16 = *(_BYTE *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 96);
  if (v18)
  {
    if (v18 == a1 + 72)
    {
      v33 = v32;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 72) + 24))(a1 + 72, v32);
    }
    else
    {
      v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
  }
  else
  {
    v33 = 0;
  }
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  *(_QWORD *)v15 = off_1E817E6B0;
  *(_QWORD *)(v15 + 8) = a2;
  v19 = (_BYTE *)(v15 + 32);
  if (SHIBYTE(v27) < 0)
  {
    sub_1C47EBC30(v19, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)__dst;
    *(_QWORD *)(v15 + 48) = v27;
  }
  v20 = (_BYTE *)(v15 + 56);
  if (SHIBYTE(v25) < 0)
  {
    sub_1C47EBC30(v20, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)__p;
    *(_QWORD *)(v15 + 72) = v25;
  }
  *(_BYTE *)(v15 + 80) = v16;
  *(_QWORD *)(v15 + 88) = v17;
  if (v33)
  {
    if (v33 == v32)
    {
      *(_QWORD *)(v15 + 120) = v15 + 96;
      (*(void (**)(_QWORD *))(v32[0] + 24))(v32);
    }
    else
    {
      *(_QWORD *)(v15 + 120) = (*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
    }
    if (v33 == v32)
    {
      (*(void (**)(_QWORD *))(v32[0] + 32))(v32);
    }
    else if (v33)
    {
      (*(void (**)(_QWORD *))(*v33 + 40))(v33);
    }
  }
  else
  {
    *(_QWORD *)(v15 + 120) = 0;
  }
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(__dst[0]);
  if (v29 == v28)
  {
    v21 = (void (**)(void))(v28[0] + 32);
  }
  else
  {
    if (!v29)
      goto LABEL_46;
    v21 = (void (**)(void))(*v29 + 40);
  }
  (*v21)();
LABEL_46:
  result = (uint64_t)v31;
  if (v31 == v30)
  {
    v23 = (uint64_t (**)(void))(v30[0] + 32);
    goto LABEL_50;
  }
  if (v31)
  {
    v23 = (uint64_t (**)(void))(*v31 + 40);
LABEL_50:
    result = (*v23)();
  }
  *a7 = v15;
  return result;
}

char *sub_1C58F1178(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  __int128 *v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1C47EBC30(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  *((_OWORD *)__dst + 3) = a2[3];
  v7 = (__int128 *)*((_QWORD *)a2 + 11);
  if (v7)
  {
    if (v7 == a2 + 4)
    {
      *((_QWORD *)__dst + 11) = __dst + 64;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 11) + 24))(*((_QWORD *)a2 + 11));
    }
    else
    {
      *((_QWORD *)__dst + 11) = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    *((_QWORD *)__dst + 11) = 0;
  }
  return __dst;
}

uint64_t sub_1C58F1240(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E817E6B0;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_1C58F12BC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E817E6B0;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58F1348(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  size_t v5;
  void *v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  const char *v13;
  size_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  size_t v17;
  void *p_p;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  const std::error_category *v23;
  _QWORD *v24;
  size_t v25;
  void *v26;
  void **v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *__p;
  size_t v40;
  int64_t v41;
  const void *__dst[2];
  unint64_t v43;
  uint64_t v44;
  const std::error_category *v45;
  char **v46;
  char *v47[2];
  char *v48;
  size_t v49;
  char v50;

  v5 = *(_QWORD *)(a2 + 24);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = *(void **)(a2 + 16);
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v9 = (const void **)operator new(v10 + 1);
    __dst[1] = (const void *)v5;
    v43 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v43) = *(_QWORD *)(a2 + 24);
  v9 = __dst;
  if (v5)
LABEL_8:
    memmove(v9, v8, v5);
  *((_BYTE *)v9 + v5) = 0;
  llvm::lto::getThinLTOOutputFile(__dst, a1 + 32, (void **)(a1 + 56), &v48);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)__dst[0]);
  v12 = *(llvm::raw_ostream **)(a1 + 88);
  if (v12)
  {
    if (v50 >= 0)
      v13 = (const char *)&v48;
    else
      v13 = v48;
    if (v50 >= 0)
      v14 = v50 & 0x7F;
    else
      v14 = v49;
    v15 = llvm::raw_ostream::write(v12, v13, v14);
    v16 = (_BYTE *)*((_QWORD *)v15 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
    {
      llvm::raw_ostream::write(v15, 10);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 10;
    }
  }
  v47[0] = 0;
  v47[1] = 0;
  v46 = v47;
  llvm::gatherImportedSummariesForModule((unsigned __int8 *)v8, v5, *(uint64_t **)(a1 + 24), a3, (uint64_t **)&v46);
  LODWORD(v44) = 0;
  v45 = std::system_category();
  if (v50 >= 0)
    v17 = v50 & 0x7F;
  else
    v17 = v49;
  sub_1C484371C((uint64_t)&__p, v17 + 11);
  if (v41 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v17)
  {
    if (v50 >= 0)
      v19 = (void **)&v48;
    else
      v19 = (void **)v48;
    memmove(p_p, v19, v17);
  }
  strcpy((char *)p_p + v17, ".thinlto.bc");
  if (v41 >= 0)
    v20 = &__p;
  else
    v20 = __p;
  if (v41 >= 0)
    v21 = HIBYTE(v41) & 0x7F;
  else
    v21 = v40;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)__dst, v20, v21, (uint64_t)&v44, 0);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  if ((_DWORD)v44)
  {
    v22 = v44;
    v23 = v45;
    v24 = (_QWORD *)operator new();
    *v24 = &off_1E81A0D28;
    v24[1] = v22;
    v24[2] = v23;
    goto LABEL_76;
  }
  llvm::writeIndexToFile(*(llvm::ModuleSummaryIndex **)(a1 + 16), (llvm::raw_ostream *)__dst, &v46);
  if (*(_BYTE *)(a1 + 80))
  {
    if (v50 >= 0)
      v25 = v50 & 0x7F;
    else
      v25 = v49;
    sub_1C484371C((uint64_t)&__p, v25 + 8);
    if (v41 >= 0)
      v26 = &__p;
    else
      v26 = __p;
    if (v25)
    {
      if (v50 >= 0)
        v27 = (void **)&v48;
      else
        v27 = (void **)v48;
      memmove(v26, v27, v25);
    }
    strcpy((char *)v26 + v25, ".imports");
    if (v41 >= 0)
      v28 = &__p;
    else
      v28 = __p;
    if (v41 >= 0)
      v29 = HIBYTE(v41) & 0x7F;
    else
      v29 = v40;
    v30 = llvm::EmitImportsFiles(v8, v5, v28, v29, &v46);
    v31 = v30;
    v33 = v32;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p);
      if ((_DWORD)v31)
        goto LABEL_62;
    }
    else if ((_DWORD)v30)
    {
LABEL_62:
      v24 = (_QWORD *)operator new();
      *v24 = &off_1E81A0D28;
      v24[1] = v31;
      v24[2] = v33;
      goto LABEL_76;
    }
  }
  if (*(_QWORD *)(a1 + 120))
  {
    if (v5 >= 0x17)
    {
      v35 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v35 = v5 | 7;
      v36 = v35 + 1;
      v34 = operator new(v35 + 1);
      v40 = v5;
      v41 = v36 | 0x8000000000000000;
      __p = v34;
    }
    else
    {
      HIBYTE(v41) = v5;
      v34 = &__p;
      if (!v5)
        goto LABEL_72;
    }
    memmove(v34, v8, v5);
LABEL_72:
    *((_BYTE *)v34 + v5) = 0;
    v37 = *(_QWORD *)(a1 + 120);
    if (!v37)
    {
      sub_1C485C2F0();
      sub_1C58F177C(v38);
      return;
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v37 + 48))(v37, &__p);
    if (SHIBYTE(v41) < 0)
      operator delete(__p);
  }
  v24 = 0;
LABEL_76:
  *a4 = v24;
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)__dst);
  sub_1C58F178C((uint64_t)&v46, v47[0]);
  if (v50 < 0)
    operator delete(v48);
}

void sub_1C58F177C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C58F1784()
{
  return 1;
}

void sub_1C58F178C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C58F178C(a1, *(_QWORD *)a2);
    sub_1C58F178C(a1, *((_QWORD *)a2 + 1));
    MEMORY[0x1CAA32FB4](*((_QWORD *)a2 + 7), 8);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1C58F17E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1C6292A0C(v5 + 8);
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C58F186C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 8), 8);
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C58F18EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1C4FE319C(v5 + 8, *(_QWORD **)(v5 + 16));
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1C58F196C(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1C58F196C(a1, *a2);
    sub_1C58F196C(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_1C58F19BC(uint64_t **a1, unsigned __int8 *__s1, size_t __n, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = a4;
  v4 = *a1;
  v5 = *((unsigned int *)*a1 + 2);
  v23 = a4;
  if ((_DWORD)v5)
  {
    v8 = 0;
    if (__n)
    {
      v9 = __n;
      v10 = __s1;
      do
      {
        v11 = *v10++;
        v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
    v12 = *v4;
    v13 = *v4 + 8 * v5 + 8;
    v14 = 1;
    v15 = v8;
    while (1)
    {
      v16 = v15 & (v5 - 1);
      v17 = *(_QWORD **)(v12 + 8 * v16);
      if (v17 != (_QWORD *)-8)
      {
        if (!v17)
          goto LABEL_15;
        if (*(_DWORD *)(v13 + 4 * v16) == v8
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)v4 + 5), __n)))
        {
          break;
        }
      }
      v15 = v14 + v16;
      ++v14;
    }
    if ((_DWORD)v16 != -1 && (int)v16 != v5)
    {
      v22 = (uint64_t *)(*(_QWORD *)(v12 + 8 * (int)v16) + 8);
      v26 = 0;
      if ((sub_1C61A7654(v22, &v25, &v26) & 1) != 0)
        return 1;
      v23 = v25;
    }
  }
LABEL_15:
  v18 = (_QWORD *)a1[1][1];
  if (v18)
  {
    v19 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = v18[4];
      if (v19 >= v20)
      {
        if (v20 >= v19)
          return 1;
        ++v18;
      }
      v18 = (_QWORD *)*v18;
    }
    while (v18);
  }
  return 0;
}

BOOL sub_1C58F1B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v7;

  v7 = a2;
  v4 = sub_1C61D0EF8((uint64_t *)(*(_QWORD *)a1 + 1712), &v7);
  v5 = v4[2];
  if (v5 != *(_QWORD *)(a3 + 32))
    return 0;
  if (v5)
    return memcmp((const void *)v4[1], *(const void **)(a3 + 24), v5) == 0;
  return 1;
}

uint64_t **sub_1C58F1B9C(llvm::StringMapImpl **a1, unsigned __int8 *a2, size_t a3, unint64_t a4, int a5)
{
  uint64_t **v6;
  uint64_t **result;
  unint64_t v8;
  uint64_t **v9;

  v8 = a4;
  v6 = (uint64_t **)(*sub_1C58EDD20(*a1, a2, a3) + 8);
  v9 = (uint64_t **)&v8;
  result = sub_1C58F1BF8(v6, &v8, (uint64_t)&std::piecewise_construct, &v9);
  *((_DWORD *)result + 10) = a5;
  return result;
}

uint64_t **sub_1C58F1BF8(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    v9[4] = **a4;
    *((_DWORD *)v9 + 10) = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

_DWORD *sub_1C58F1CDC(_DWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;

  if (a4)
  {
    if (a4 >> 62)
      abort();
    v7 = result;
    result = operator new(4 * a4);
    *v7 = result;
    for (v7[2] = &result[a4]; a3 != a2; ++a2)
      *result++ = a2;
    v7[1] = result;
  }
  return result;
}

int *sub_1C58F1D4C(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  BOOL v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int64_t v64;
  uint64_t *v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  unint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  int *v80;
  int *v81;
  int *v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int *v93;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int *v100;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v42 = *(a2 - 1);
        v43 = *v10;
        if (*(_QWORD *)(*(_QWORD *)(**a3 + 8 * v42) + 8) > *(_QWORD *)(*(_QWORD *)(**a3 + 8 * v43) + 8))
        {
          *v10 = v42;
          *(a2 - 1) = v43;
        }
        return result;
      case 3:
        return sub_1C58F2584(v10, v10 + 1, a2 - 1, **a3);
      case 4:
        return sub_1C58F286C(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5:
        v44 = v10 + 2;
        v45 = v10 + 3;
        result = sub_1C58F286C(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v46 = *(a2 - 1);
        v47 = **a3;
        v48 = v10[3];
        if (*(_QWORD *)(*(_QWORD *)(v47 + 8 * v46) + 8) > *(_QWORD *)(*(_QWORD *)(v47 + 8 * v48) + 8))
        {
          *v45 = v46;
          *(a2 - 1) = v48;
          v49 = *v45;
          v50 = *v44;
          v51 = *(_QWORD *)(*(_QWORD *)(v47 + 8 * v49) + 8);
          if (v51 > *(_QWORD *)(*(_QWORD *)(v47 + 8 * v50) + 8))
          {
            *v44 = v49;
            *v45 = v50;
            v52 = v10[1];
            if (v51 > *(_QWORD *)(*(_QWORD *)(v47 + 8 * v52) + 8))
            {
              v10[1] = v49;
              v10[2] = v52;
              v53 = *v10;
              if (v51 > *(_QWORD *)(*(_QWORD *)(v47 + 8 * v53) + 8))
              {
                *v10 = v49;
                v10[1] = v53;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v54 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v55 = **a3;
                v56 = 4;
                v57 = v10;
                do
                {
                  v59 = *v57;
                  v58 = v57[1];
                  v57 = v54;
                  v60 = *(_QWORD *)(*(_QWORD *)(v55 + 8 * v58) + 8);
                  if (v60 > *(_QWORD *)(*(_QWORD *)(v55 + 8 * v59) + 8))
                  {
                    v61 = v56;
                    while (1)
                    {
                      *(int *)((char *)v10 + v61) = v59;
                      v62 = v61 - 4;
                      if (v61 == 4)
                        break;
                      v59 = *(int *)((char *)v10 + v61 - 8);
                      v61 -= 4;
                      if (v60 <= *(_QWORD *)(*(_QWORD *)(v55 + 8 * v59) + 8))
                      {
                        v63 = (int *)((char *)v10 + v62);
                        goto LABEL_75;
                      }
                    }
                    v63 = v10;
LABEL_75:
                    *v63 = v58;
                  }
                  v54 = v57 + 1;
                  v56 += 4;
                }
                while (v57 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v95 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v96 = **a3;
              do
              {
                v98 = *v9;
                v97 = v9[1];
                v9 = v95;
                v99 = *(_QWORD *)(*(_QWORD *)(v96 + 8 * v97) + 8);
                if (v99 > *(_QWORD *)(*(_QWORD *)(v96 + 8 * v98) + 8))
                {
                  v100 = v9;
                  do
                  {
                    *v100 = v98;
                    v98 = *(v100 - 2);
                    --v100;
                  }
                  while (v99 > *(_QWORD *)(*(_QWORD *)(v96 + 8 * v98) + 8));
                  *v100 = v97;
                }
                v95 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v64 = (unint64_t)(v12 - 2) >> 1;
            v65 = *a3;
            v66 = v64;
            do
            {
              v67 = v66;
              if (v64 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v10[v68];
                v70 = *v69;
                if (2 * v67 + 2 >= v12)
                {
                  v71 = *v65;
                }
                else
                {
                  v71 = *v65;
                  if (*(_QWORD *)(*(_QWORD *)(*v65 + 8 * v70) + 8) > *(_QWORD *)(*(_QWORD *)(*v65 + 8 * v69[1])
                                                                                    + 8))
                  {
                    v70 = v69[1];
                    ++v69;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = &v10[v67];
                v73 = *v72;
                v74 = *(_QWORD *)(*(_QWORD *)(v71 + 8 * v73) + 8);
                if (*(_QWORD *)(*(_QWORD *)(v71 + 8 * v70) + 8) <= v74)
                {
                  do
                  {
                    v75 = v69;
                    *v72 = v70;
                    if (v64 < v68)
                      break;
                    v76 = (2 * v68) | 1;
                    v69 = &v10[v76];
                    v68 = 2 * v68 + 2;
                    v70 = *v69;
                    if (v68 >= v12)
                    {
                      v68 = v76;
                    }
                    else if (*(_QWORD *)(*(_QWORD *)(v71 + 8 * v70) + 8) <= *(_QWORD *)(*(_QWORD *)(v71 + 8 * v69[1])
                                                                                           + 8))
                    {
                      v68 = v76;
                    }
                    else
                    {
                      v70 = v69[1];
                      ++v69;
                    }
                    v72 = v75;
                  }
                  while (*(_QWORD *)(*(_QWORD *)(v71 + 8 * v70) + 8) <= v74);
                  *v75 = v73;
                  v65 = *a3;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            do
            {
              v77 = 0;
              v78 = *v10;
              v79 = *a3;
              v80 = v10;
              do
              {
                v81 = &v80[v77];
                v84 = v81[1];
                v82 = v81 + 1;
                v83 = v84;
                result = (int *)(2 * v77);
                v85 = (2 * v77) | 1;
                v77 = 2 * v77 + 2;
                if (v77 >= v12)
                {
                  v77 = v85;
                }
                else
                {
                  result = v82 + 1;
                  if (*(_QWORD *)(*(_QWORD *)(*v79 + 8 * v83) + 8) <= *(_QWORD *)(*(_QWORD *)(*v79 + 8 * v82[1])
                                                                                     + 8))
                  {
                    v77 = v85;
                  }
                  else
                  {
                    v83 = v82[1];
                    ++v82;
                  }
                }
                *v80 = v83;
                v80 = v82;
              }
              while (v77 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v78;
              }
              else
              {
                *v82 = *a2;
                *a2 = v78;
                v86 = (char *)v82 - (char *)v10 + 4;
                if (v86 >= 5)
                {
                  v87 = (((unint64_t)v86 >> 2) - 2) >> 1;
                  v88 = &v10[v87];
                  v89 = *v88;
                  v90 = *v65;
                  v91 = *v82;
                  v92 = *(_QWORD *)(*(_QWORD *)(*v65 + 8 * v91) + 8);
                  if (*(_QWORD *)(*(_QWORD *)(*v65 + 8 * v89) + 8) > v92)
                  {
                    do
                    {
                      v93 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v10[v87];
                      v89 = *v88;
                      result = *(int **)(*(_QWORD *)(v90 + 8 * v89) + 8);
                      v82 = v93;
                    }
                    while ((unint64_t)result > v92);
                    *v93 = v91;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        v15 = **a3;
        if ((unint64_t)v11 < 0x201)
        {
          result = sub_1C58F2584(v14, v9, a2 - 1, v15);
        }
        else
        {
          sub_1C58F2584(v9, v14, a2 - 1, v15);
          sub_1C58F2584(v9 + 1, v14 - 1, a2 - 2, **a3);
          sub_1C58F2584(v9 + 2, &v9[v13 + 1], a2 - 3, **a3);
          result = sub_1C58F2584(v14 - 1, v14, &v9[v13 + 1], **a3);
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = **a3;
        if ((a5 & 1) == 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8 * v17) + 8);
          if (*(_QWORD *)(*(_QWORD *)(v18 + 8 * *(v9 - 1)) + 8) > v19)
            goto LABEL_12;
          if (v19 <= *(_QWORD *)(*(_QWORD *)(v18 + 8 * *(a2 - 1)) + 8))
          {
            v34 = v9 + 1;
            do
            {
              v10 = v34;
              if (v34 >= a2)
                break;
              ++v34;
            }
            while (v19 <= *(_QWORD *)(*(_QWORD *)(v18 + 8 * *v10) + 8));
          }
          else
          {
            v10 = v9;
            do
            {
              v33 = v10[1];
              ++v10;
            }
            while (v19 <= *(_QWORD *)(*(_QWORD *)(v18 + 8 * v33) + 8));
          }
          v35 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
              v36 = *--v35;
            while (v19 > *(_QWORD *)(*(_QWORD *)(v18 + 8 * v36) + 8));
          }
          if (v10 < v35)
          {
            v37 = *v10;
            v38 = *v35;
            do
            {
              *v10 = v38;
              *v35 = v37;
              do
              {
                v39 = v10[1];
                ++v10;
                v37 = v39;
              }
              while (v19 <= *(_QWORD *)(*(_QWORD *)(v18 + 8 * v39) + 8));
              do
              {
                v40 = *--v35;
                v38 = v40;
              }
              while (v19 > *(_QWORD *)(*(_QWORD *)(v18 + 8 * v40) + 8));
            }
            while (v10 < v35);
          }
          v41 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v41;
          a5 = 0;
          *v41 = v17;
          continue;
        }
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8 * v17) + 8);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while (*(_QWORD *)(*(_QWORD *)(v18 + 8 * v21) + 8) > v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(_QWORD *)(*(_QWORD *)(v18 + 8 * v25) + 8) <= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(_QWORD *)(*(_QWORD *)(v18 + 8 * v24) + 8) <= v19);
        }
        if (v22 >= v23)
        {
          v10 = &v9[v20];
        }
        else
        {
          v26 = *v23;
          v27 = v21;
          v10 = v22;
          v28 = v23;
          do
          {
            *v10 = v26;
            *v28 = v27;
            do
            {
              v29 = v10[1];
              ++v10;
              v27 = v29;
            }
            while (*(_QWORD *)(*(_QWORD *)(v18 + 8 * v29) + 8) > v19);
            do
            {
              v30 = *--v28;
              v26 = v30;
            }
            while (*(_QWORD *)(*(_QWORD *)(v18 + 8 * v30) + 8) <= v19);
          }
          while (v10 < v28);
        }
        v31 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v31;
        *v31 = v17;
        if (v22 < v23)
        {
LABEL_33:
          result = (int *)sub_1C58F1D4C(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v32 = sub_1C58F2624(v9, v10 - 1, a3);
        result = (int *)sub_1C58F2624(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v10 - 1;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

int *sub_1C58F2584(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8 * v4) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8 * v5) + 8);
  v8 = *a3;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 8 * v8) + 8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(_QWORD *)(*(_QWORD *)(a4 + 8 * v10) + 8) > *(_QWORD *)(*(_QWORD *)(a4 + 8 * v11) + 8))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(_QWORD *)(*(_QWORD *)(a4 + 8 * v12) + 8) <= v7)
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1C58F2624(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(*(_QWORD *)(**a3 + 8 * v8) + 8) > *(_QWORD *)(*(_QWORD *)(**a3 + 8 * v9) + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1C58F2584(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_1C58F286C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      sub_1C58F286C(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = **a3;
      v25 = a1[3];
      if (*(_QWORD *)(*(_QWORD *)(v24 + 8 * v23) + 8) > *(_QWORD *)(*(_QWORD *)(v24 + 8 * v25) + 8))
      {
        *v22 = v23;
        *(a2 - 1) = v25;
        v26 = *v22;
        v27 = *v21;
        v28 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * v26) + 8);
        if (v28 > *(_QWORD *)(*(_QWORD *)(v24 + 8 * v27) + 8))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 > *(_QWORD *)(*(_QWORD *)(v24 + 8 * v29) + 8))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 > *(_QWORD *)(*(_QWORD *)(v24 + 8 * v30) + 8))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C58F2584(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v15) + 8);
    if (v17 > *(_QWORD *)(*(_QWORD *)(v13 + 8 * v16) + 8))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(_QWORD *)(*(_QWORD *)(v13 + 8 * v16) + 8))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

int *sub_1C58F286C(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1C58F2584(a1, a2, a3, **a5);
  v11 = *a4;
  v12 = **a5;
  v13 = *a3;
  if (*(_QWORD *)(*(_QWORD *)(v12 + 8 * v11) + 8) > *(_QWORD *)(*(_QWORD *)(v12 + 8 * v13) + 8))
  {
    *a3 = v11;
    *a4 = v13;
    v14 = *a3;
    v15 = *a2;
    if (*(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 8) > *(_QWORD *)(*(_QWORD *)(v12 + 8 * v15) + 8))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(_QWORD *)(*(_QWORD *)(v12 + 8 * v16) + 8) > *(_QWORD *)(*(_QWORD *)(v12 + 8 * v17) + 8))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1C58F2934()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Dump the SCCs in the ThinLTO index's callgraph";
  v1.n128_u64[1] = 46;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED818FE8, "dump-thin-cg-sccs", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED818FE8, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable global value internalization in LTO";
  v1.n128_u64[1] = 42;
  sub_1C498EDF8((llvm::cl::Option *)&EnableLTOInternalization, "enable-lto-internalization", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &EnableLTOInternalization, &dword_1C475E000);
}

void llvm::lto::Config::addSaveTemps(uint64_t a1@<X0>, const void **a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  char v7;
  int v8;
  size_t v9;
  size_t v10;
  void **v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const std::error_category *v20;
  _QWORD *v21;
  void *v22;
  char v23;
  void **v24;
  uint64_t (**v25)();
  void **v26;
  void **v27;
  void (**v28)(void **);
  void *__p[4];
  __int128 v30;
  char v31;
  __int128 v32;
  char v33;
  __int128 v34;
  char v35;
  __int128 v36;
  char v37;
  __int128 v38;
  char v39;
  __int128 v40;
  char v41;
  char *v42[2];
  uint64_t v43;
  const std::error_category *v44;
  char v45;
  _QWORD v46[2];
  void *v47[2];
  char v48;
  void **v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v45 = a3;
  *(_BYTE *)(a1 + 848) = 0;
  LODWORD(v43) = 0;
  v44 = std::system_category();
  v7 = *((_BYTE *)a2 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = (size_t)a2[1];
  sub_1C484371C((uint64_t)v47, v10 + 14);
  if (v48 >= 0)
    v11 = v47;
  else
    v11 = (void **)v47[0];
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "resolution.txt");
  v13 = operator new();
  v14 = v13;
  if (v48 >= 0)
    v15 = v47;
  else
    v15 = (void **)v47[0];
  if (v48 >= 0)
    v16 = v48 & 0x7F;
  else
    v16 = (uint64_t)v47[1];
  llvm::raw_fd_ostream::raw_fd_ostream(v13, v15, v16, (uint64_t)&v43, 3);
  v17 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = v14;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v48 < 0)
    operator delete(v47[0]);
  if (!(_DWORD)v43)
  {
    v42[0] = &v45;
    v42[1] = (char *)a2;
    v41 = 8;
    strcpy((char *)&v40, "0.preopt");
    sub_1C58F2E34(v42, &v40, (_QWORD *)(a1 + 928));
    v39 = 9;
    strcpy((char *)&v38, "1.promote");
    sub_1C58F2E34(v42, &v38, (_QWORD *)(a1 + 960));
    v37 = 13;
    strcpy((char *)&v36, "2.internalize");
    sub_1C58F2E34(v42, &v36, (_QWORD *)(a1 + 992));
    v35 = 8;
    strcpy((char *)&v34, "3.import");
    sub_1C58F2E34(v42, &v34, (_QWORD *)(a1 + 1024));
    v33 = 5;
    strcpy((char *)&v32, "4.opt");
    sub_1C58F2E34(v42, &v32, (_QWORD *)(a1 + 1056));
    v31 = 12;
    strcpy((char *)&v30, "5.precodegen");
    sub_1C58F2E34(v42, &v30, (_QWORD *)(a1 + 1088));
    if (*((char *)a2 + 23) < 0)
    {
      sub_1C47EBC30(__p, (void *)*a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      __p[2] = (void *)a2[2];
    }
    v22 = __p[0];
    v46[0] = __p[1];
    *(void **)((char *)v46 + 7) = *(void **)((char *)&__p[1] + 7);
    v23 = HIBYTE(__p[2]);
    memset(__p, 0, 24);
    v24 = (void **)operator new(0x20uLL);
    v25 = off_1E817E900;
    *v24 = off_1E817E900;
    v24[1] = v22;
    v24[2] = (void *)v46[0];
    *(void **)((char *)v24 + 23) = *(void **)((char *)v46 + 7);
    *((_BYTE *)v24 + 31) = v23;
    v49 = v24;
    if ((void **)(a1 + 1120) != v47)
    {
      v26 = *(void ***)(a1 + 1144);
      if (v26 == (void **)(a1 + 1120))
      {
        (*(void (**)(uint64_t, void **))(*(_QWORD *)(a1 + 1120) + 24))(a1 + 1120, v47);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1144) + 32))(*(_QWORD *)(a1 + 1144));
        v27 = (void **)v47[0];
        *(_QWORD *)(a1 + 1144) = v49;
        v49 = v47;
      }
      else
      {
        v49 = *(void ***)(a1 + 1144);
        *(_QWORD *)(a1 + 1144) = v24;
        v27 = v47;
        if (v26 != v47)
        {
          if (!v26)
          {
LABEL_41:
            *a4 = 0;
            return;
          }
          v25 = (uint64_t (**)())*v26;
          v24 = v26;
          goto LABEL_36;
        }
      }
      v28 = (void (**)(void **))(v27 + 4);
      v24 = v47;
LABEL_39:
      (*v28)(v24);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      goto LABEL_41;
    }
LABEL_36:
    v28 = (void (**)(void **))(v25 + 5);
    goto LABEL_39;
  }
  v18 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v43;
  if ((_DWORD)v43)
  {
    v20 = v44;
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = v19;
    v21[2] = v20;
  }
  else
  {
    v21 = 0;
  }
  *a4 = v21;
}

uint64_t sub_1C58F2E34(char **a1, __int128 *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void (**v18)(_QWORD *, _QWORD *);
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t (**v24)(void);
  _QWORD v25[3];
  _QWORD *v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 __p;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)a3[3];
  if (v6)
  {
    if (v6 != a3)
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
      v33 = v7;
      if (!v7)
        goto LABEL_6;
LABEL_8:
      if (v7 == v32)
      {
        v26 = v25;
        (*(void (**)(_QWORD *, _QWORD *))(v32[0] + 24))(v32, v25);
      }
      else
      {
        v26 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      }
      goto LABEL_11;
    }
    v33 = v32;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v32);
    v7 = v33;
    if (v33)
      goto LABEL_8;
  }
  else
  {
    v33 = 0;
  }
LABEL_6:
  v26 = 0;
LABEL_11:
  v8 = a1[1];
  v27 = **a1;
  if (v8[23] < 0)
  {
    sub_1C47EBC30(&v28, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v29 = *((_QWORD *)v8 + 2);
    v28 = v9;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(&v30, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v30 = *a2;
    v31 = *((_QWORD *)a2 + 2);
  }
  v10 = v26;
  if (v26)
  {
    if (v26 == v25)
    {
      v35 = v34;
      (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v34);
      v10 = v35;
    }
    else
    {
      v35 = v26;
      v26 = 0;
    }
  }
  else
  {
    v35 = 0;
  }
  v11 = v27;
  v36 = v27;
  v37 = v28;
  v12 = v29;
  v28 = 0uLL;
  v29 = 0;
  __p = v30;
  v38 = v12;
  v40 = v31;
  v30 = 0uLL;
  v31 = 0;
  v13 = operator new(0x60uLL);
  v14 = v13;
  *v13 = off_1E817E828;
  v15 = v13 + 1;
  if (v10)
  {
    if (v10 == v34)
    {
      v13[4] = v15;
      (*(void (**)(_QWORD *))(v34[0] + 24))(v34);
      v11 = v36;
    }
    else
    {
      v13[4] = v10;
      v35 = 0;
    }
  }
  else
  {
    v13[4] = 0;
  }
  *((_BYTE *)v14 + 40) = v11;
  *((_OWORD *)v14 + 3) = v37;
  v14[8] = v38;
  v37 = 0uLL;
  v38 = 0;
  *(_OWORD *)(v14 + 9) = __p;
  v14[11] = v40;
  __p = 0uLL;
  v40 = 0;
  v16 = v41;
  v42 = v14;
  if (v41 == a3)
  {
    v17 = v14;
LABEL_33:
    v18 = (void (**)(_QWORD *, _QWORD *))(*v17 + 40);
    goto LABEL_36;
  }
  v17 = (_QWORD *)a3[3];
  if (v17 == a3)
  {
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v41);
    (*(void (**)(_QWORD))(*(_QWORD *)a3[3] + 32))(a3[3]);
    v16 = (_QWORD *)v41[0];
    a3[3] = v42;
    v42 = v41;
  }
  else
  {
    v42 = (_QWORD *)a3[3];
    a3[3] = v14;
    if (v17 != v41)
    {
      if (!v17)
        goto LABEL_38;
      goto LABEL_33;
    }
  }
  v18 = (void (**)(_QWORD *, _QWORD *))(v16 + 4);
  v17 = v41;
LABEL_36:
  (*v18)(v17, v15);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__p);
LABEL_38:
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  v19 = v35;
  if (v35 == v34)
  {
    v20 = 4;
    v19 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_45;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_45:
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  v21 = v26;
  if (v26 == v25)
  {
    v22 = 4;
    v21 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_54;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_54:
  result = (uint64_t)v33;
  if (v33 == v32)
  {
    v24 = (uint64_t (**)(void))(v32[0] + 32);
  }
  else
  {
    if (!v33)
      return result;
    v24 = (uint64_t (**)(void))(*v33 + 40);
  }
  return (*v24)();
}

uint64_t llvm::lto::opt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  void **v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  void **v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm *v77;
  llvm::raw_ostream *v78;
  void *v79;
  char v80;
  BOOL v81;
  const char *v82;
  size_t v83;
  size_t v84;
  llvm::raw_ostream *v85;
  uint64_t v86;
  void *v87;
  __int128 v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  _DWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  char v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  llvm *v108;
  std::string::size_type *v109;
  std::string::size_type *v110;
  char *v111;
  std::string::size_type v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  std::string *v117;
  char *v118;
  std::string::size_type v119;
  std::string *v120;
  std::string::__raw *v121;
  std::string::size_type v122;
  std::string::__raw *v123;
  std::string::size_type v124;
  std::string::size_type v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  std::string::size_type *v129;
  std::string::size_type *v130;
  char *v131;
  std::string::size_type v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  std::string *v137;
  char *v138;
  std::string::size_type v139;
  std::string *v140;
  std::string::__raw *v141;
  std::string::size_type v142;
  std::string::__raw *v143;
  std::string::size_type v144;
  std::string::size_type v145;
  std::string::size_type *v146;
  std::string::size_type *v147;
  char *v148;
  std::string::size_type v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  std::string *v154;
  char *v155;
  std::string::size_type v156;
  std::string *v157;
  std::string::__raw *v158;
  std::string::size_type v159;
  std::string::__raw *v160;
  std::string::size_type v161;
  std::string::size_type v162;
  uint64_t *v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v174;
  int v175;
  uint64_t v176;
  _OWORD v177[2];
  char *v178;
  std::string v179;
  std::string *v180;
  std::string *v181;
  unint64_t v182;
  __int16 v183;
  uint64_t v184[4];
  __int16 v185;
  uint64_t v186[4];
  __int16 v187;
  uint64_t v188[4];
  __int16 v189;
  uint64_t v190[4];
  __int16 v191;
  uint64_t v192[5];
  char *v193;
  void *v194[2];
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  __int16 v201;
  uint64_t v202;
  char v203;
  __int128 v204;
  int v205;
  __int128 v206;
  int v207;
  __int128 v208;
  int v209;
  __int128 v210;
  int v211;
  __int128 v212;
  int v213;
  __int128 v214;
  int v215;
  __int128 v216;
  int v217;
  __int128 v218;
  int v219;
  __int128 v220;
  int v221;
  __int128 v222;
  int v223;
  __int128 v224;
  int v225;
  __int128 v226;
  int v227;
  __int128 v228;
  int v229;
  void *v230[2];
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  void *v241[2];
  uint64_t v242;
  void *v243[2];
  uint64_t v244;
  void *__dst[2];
  uint64_t v246;
  void *__src[2];
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  __int16 v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  void *v258[2];
  char v259;
  void *v260;
  char v261;
  void *__p;
  char v263;
  uint64_t v264;
  _BYTE v265[696];
  char *v266[2];
  _QWORD v267[18];
  _QWORD v268[18];
  _QWORD v269[18];
  _QWORD v270[18];
  _QWORD v271[18];
  _QWORD v272[18];
  _QWORD v273[18];
  _QWORD v274[18];
  _OWORD v275[9];
  int v276;
  int v277;
  void *v278[2];
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  void *v282;
  void *v283;
  char v284;
  char v285;
  void *v286;
  uint64_t v287;
  _QWORD v288[26];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v5;
  v175 = v14;
  v16 = v15;
  v17 = v4;
  v288[23] = *MEMORY[0x1E0C80C00];
  if (dword_1ED8191E8 == 2)
  {
    memset(v177, 0, sizeof(v177));
    llvm::embedBitcodeInModule(v5, (unsigned __int8 **)v177, 1, 1, v6);
  }
  v18 = *(_DWORD *)(v17 + 432);
  if (v18 >= 2)
  {
    LOBYTE(v258[0]) = 1;
    byte_1ED832038 = 1;
    if (!qword_1ED832070)
      goto LABEL_344;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)qword_1ED832070 + 48))(qword_1ED832070, v258);
    v18 = *(_DWORD *)(v17 + 432);
  }
  llvm::vfs::getRealFileSystem(&v257);
  LOBYTE(__src[0]) = 0;
  v256 = 0;
  v19 = *(_BYTE *)(v17 + 591);
  v20 = v19;
  v21 = v19 & 0x7F;
  if (v20 < 0)
    v21 = *(_QWORD *)(v17 + 576);
  if (v21)
  {
    v33 = (void **)(v17 + 568);
    if (v20 < 0)
    {
      sub_1C47EBC30(__dst, *v33, *(_QWORD *)(v17 + 576));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v33;
      v246 = *(_QWORD *)(v17 + 584);
    }
    HIBYTE(v244) = 0;
    LOBYTE(v243[0]) = 0;
    if (*(char *)(v17 + 615) < 0)
    {
      sub_1C47EBC30(v241, *(void **)(v17 + 592), *(_QWORD *)(v17 + 600));
    }
    else
    {
      *(_OWORD *)v241 = *(_OWORD *)(v17 + 592);
      v242 = *(_QWORD *)(v17 + 608);
    }
    v240 = v257;
    if (v257)
    {
      v34 = (unsigned int *)(v257 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    sub_1C58F6934((char *)v258, (__int128 *)__dst, (__int128 *)v243, (__int128 *)v241, &v240, 3, 0, 1);
    sub_1C58F6A34((uint64_t)__src, (__int128 *)v258);
    v36 = v264;
    if (v264)
    {
      v37 = (unsigned int *)(v264 + 8);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    }
    if (v263 < 0)
      operator delete(__p);
    if (v261 < 0)
      operator delete(v260);
    if (v259 < 0)
      operator delete(v258[0]);
    v29 = v240;
    if (!v240)
      goto LABEL_81;
    v40 = (unsigned int *)(v240 + 8);
    do
    {
      v41 = __ldaxr(v40);
      v32 = --v41 == 0;
    }
    while (__stlxr(v41, v40));
    goto LABEL_78;
  }
  if (!*(_BYTE *)(v17 + 440))
  {
    v22 = *(_BYTE *)(v17 + 567);
    v23 = v22;
    v24 = v22 & 0x7F;
    if (v23 < 0)
      v24 = *(_QWORD *)(v17 + 552);
    if (!v24)
    {
      if (!*(_BYTE *)(v17 + 888))
        goto LABEL_118;
      HIBYTE(v246) = 0;
      LOBYTE(__dst[0]) = 0;
      HIBYTE(v244) = 0;
      LOBYTE(v243[0]) = 0;
      HIBYTE(v242) = 0;
      LOBYTE(v241[0]) = 0;
      v240 = 0;
      sub_1C58F6934((char *)v258, (__int128 *)__dst, (__int128 *)v243, (__int128 *)v241, &v240, 0, 0, 1);
      sub_1C58F6A34((uint64_t)__src, (__int128 *)v258);
      v25 = v264;
      if (v264)
      {
        v26 = (unsigned int *)(v264 + 8);
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      if (v263 < 0)
        operator delete(__p);
      if (v261 < 0)
        operator delete(v260);
      if (v259 < 0)
        operator delete(v258[0]);
      v29 = v240;
      if (!v240)
        goto LABEL_81;
      v30 = (unsigned int *)(v240 + 8);
      do
      {
        v31 = __ldaxr(v30);
        v32 = --v31 == 0;
      }
      while (__stlxr(v31, v30));
      goto LABEL_78;
    }
    v42 = (void **)(v17 + 544);
    if (v23 < 0)
    {
      sub_1C47EBC30(__dst, *v42, *(_QWORD *)(v17 + 552));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v42;
      v246 = *(_QWORD *)(v17 + 560);
    }
    HIBYTE(v244) = 0;
    LOBYTE(v243[0]) = 0;
    if (*(char *)(v17 + 615) < 0)
    {
      sub_1C47EBC30(v241, *(void **)(v17 + 592), *(_QWORD *)(v17 + 600));
    }
    else
    {
      *(_OWORD *)v241 = *(_OWORD *)(v17 + 592);
      v242 = *(_QWORD *)(v17 + 608);
    }
    v240 = v257;
    if (v257)
    {
      v51 = (unsigned int *)(v257 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    sub_1C58F6934((char *)v258, (__int128 *)__dst, (__int128 *)v243, (__int128 *)v241, &v240, 2, 2, *(_BYTE *)(v17 + 888));
    sub_1C58F6A34((uint64_t)__src, (__int128 *)v258);
    v53 = v264;
    if (v264)
    {
      v54 = (unsigned int *)(v264 + 8);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    }
    if (v263 < 0)
      operator delete(__p);
    if (v261 < 0)
      operator delete(v260);
    if (v259 < 0)
      operator delete(v258[0]);
    v57 = v240;
    if (v240)
    {
      v58 = (unsigned int *)(v240 + 8);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
    if (SHIBYTE(v242) < 0)
      operator delete(v241[0]);
    if (SHIBYTE(v244) < 0)
      operator delete(v243[0]);
    if (SHIBYTE(v246) < 0)
      operator delete(__dst[0]);
    LOBYTE(v258[0]) = *(_BYTE *)(v17 + 441) ^ 1;
    byte_1ED833E08 = (char)v258[0];
    if (qword_1ED833E40)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)qword_1ED833E40 + 48))(qword_1ED833E40, v258);
      goto LABEL_118;
    }
LABEL_344:
    sub_1C485C2F0();
    goto LABEL_345;
  }
  HIBYTE(v246) = 0;
  LOBYTE(__dst[0]) = 0;
  if (*(char *)(v17 + 567) < 0)
  {
    sub_1C47EBC30(v243, *(void **)(v17 + 544), *(_QWORD *)(v17 + 552));
  }
  else
  {
    *(_OWORD *)v243 = *(_OWORD *)(v17 + 544);
    v244 = *(_QWORD *)(v17 + 560);
  }
  if (*(char *)(v17 + 615) < 0)
  {
    sub_1C47EBC30(v241, *(void **)(v17 + 592), *(_QWORD *)(v17 + 600));
  }
  else
  {
    *(_OWORD *)v241 = *(_OWORD *)(v17 + 592);
    v242 = *(_QWORD *)(v17 + 608);
  }
  v240 = v257;
  if (v257)
  {
    v43 = (unsigned int *)(v257 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  sub_1C58F6934((char *)v258, (__int128 *)__dst, (__int128 *)v243, (__int128 *)v241, &v240, 2, 1, *(_BYTE *)(v17 + 888));
  sub_1C58F6A34((uint64_t)__src, (__int128 *)v258);
  v45 = v264;
  if (v264)
  {
    v46 = (unsigned int *)(v264 + 8);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  if (v263 < 0)
    operator delete(__p);
  if (v261 < 0)
    operator delete(v260);
  if (v259 < 0)
    operator delete(v258[0]);
  v29 = v240;
  if (!v240)
    goto LABEL_81;
  v49 = (unsigned int *)(v240 + 8);
  do
  {
    v50 = __ldaxr(v49);
    v32 = --v50 == 0;
  }
  while (__stlxr(v50, v49));
LABEL_78:
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
LABEL_81:
  if (SHIBYTE(v242) < 0)
    operator delete(v241[0]);
  if (SHIBYTE(v244) < 0)
    operator delete(v243[0]);
  if (SHIBYTE(v246) < 0)
    operator delete(__dst[0]);
LABEL_118:
  LOBYTE(v230[0]) = 0;
  v239 = 0;
  if (v256)
  {
    if (SHIBYTE(v248) < 0)
    {
      sub_1C47EBC30(v230, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)v230 = *(_OWORD *)__src;
      v231 = v248;
    }
    if (SHIBYTE(v250) < 0)
    {
      sub_1C47EBC30(&v232, (void *)v249, *((unint64_t *)&v249 + 1));
    }
    else
    {
      v232 = v249;
      v233 = v250;
    }
    if (SHIBYTE(v252) < 0)
    {
      sub_1C47EBC30(&v234, (void *)v251, *((unint64_t *)&v251 + 1));
    }
    else
    {
      v234 = v251;
      v235 = v252;
    }
    v236 = v253;
    v237 = v254;
    v238 = v255;
    if (v255)
    {
      v61 = (unsigned int *)(v255 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v239 = 1;
  }
  v176 = v13;
  sub_1C62B2CC8((char *)(v16 + 600), (uint64_t)v230);
  if (v239)
  {
    v63 = v238;
    if (v238)
    {
      v64 = (unsigned int *)(v238 + 8);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    }
    if (SHIBYTE(v235) < 0)
      operator delete((void *)v234);
    if (SHIBYTE(v233) < 0)
      operator delete((void *)v232);
    if (SHIBYTE(v231) < 0)
      operator delete(v230[0]);
    v239 = 0;
  }
  v224 = 0u;
  v226 = 0u;
  v225 = 0;
  v227 = 0;
  v228 = 0u;
  v229 = 0;
  v218 = 0u;
  v220 = 0u;
  v219 = 0;
  v221 = 0;
  v222 = 0u;
  v223 = 0;
  v212 = 0u;
  v214 = 0u;
  v213 = 0;
  v215 = 0;
  v216 = 0u;
  v217 = 0;
  v206 = 0u;
  v208 = 0u;
  v207 = 0;
  v209 = 0;
  v210 = 0u;
  v211 = 0;
  v266[0] = (char *)v267;
  v266[1] = (char *)0x400000000;
  v267[16] = v268;
  v267[17] = 0x400000000;
  v268[16] = v269;
  v268[17] = 0x400000000;
  v269[16] = v270;
  v269[17] = 0x400000000;
  v270[16] = v271;
  v270[17] = 0x400000000;
  v271[16] = v272;
  v271[17] = 0x400000000;
  v272[16] = v273;
  v272[17] = 0x400000000;
  v273[16] = v274;
  v273[17] = 0x400000000;
  v274[16] = v275;
  v274[17] = 0x400000000;
  v275[8] = 0u;
  v276 = 0;
  v277 = 32;
  llvm::StandardInstrumentations::StandardInstrumentations((uint64_t)v265, *(_BYTE *)(v17 + 784), 0, 0);
  llvm::StandardInstrumentations::registerCallbacks((uint64_t)v265, (uint64_t)v266, &v218);
  v204 = *(_OWORD *)(v17 + 904);
  v205 = *(_DWORD *)(v17 + 920);
  LOBYTE(v194[0]) = 0;
  v203 = 0;
  if (v256)
  {
    if (SHIBYTE(v248) < 0)
    {
      sub_1C47EBC30(v194, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)v194 = *(_OWORD *)__src;
      v195 = v248;
    }
    if (SHIBYTE(v250) < 0)
    {
      sub_1C47EBC30(&v196, (void *)v249, *((unint64_t *)&v249 + 1));
    }
    else
    {
      v196 = v249;
      v197 = v250;
    }
    if (SHIBYTE(v252) < 0)
    {
      sub_1C47EBC30(&v198, (void *)v251, *((unint64_t *)&v251 + 1));
    }
    else
    {
      v198 = v251;
      v199 = v252;
    }
    v200 = v253;
    v201 = v254;
    v202 = v255;
    if (v255)
    {
      v67 = (unsigned int *)(v255 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v203 = 1;
  }
  llvm::PassBuilder::PassBuilder((uint64_t)v258, v16, &v204, (__int128 *)v194, (uint64_t)v266);
  if (v203)
  {
    v69 = v202;
    if (v202)
    {
      v70 = (unsigned int *)(v202 + 8);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
    }
    if (SHIBYTE(v199) < 0)
      operator delete((void *)v198);
    if (SHIBYTE(v197) < 0)
      operator delete((void *)v196);
    if (SHIBYTE(v195) < 0)
      operator delete(v194[0]);
    v203 = 0;
  }
  v174 = v12;
  v73 = *(_QWORD *)(v17 + 352);
  v74 = *(_QWORD *)(v17 + 360) - v73;
  if (v74)
  {
    v76 = 24 * (v74 / 24);
    do
    {
      llvm::PassPlugin::Load(v73, (uint64_t)v278);
      if ((v284 & 1) != 0)
      {
        v78 = (llvm::raw_ostream *)llvm::errs(v77);
        v79 = (void *)*((_QWORD *)v78 + 4);
        if (*((_QWORD *)v78 + 3) - (_QWORD)v79 > 0x1BuLL)
        {
          qmemcpy(v79, "Failed to load passes from '", 28);
          *((_QWORD *)v78 + 4) += 28;
        }
        else
        {
          v78 = llvm::raw_ostream::write(v78, "Failed to load passes from '", 0x1CuLL);
        }
        v80 = *(_BYTE *)(v73 + 23);
        v81 = v80 < 0;
        if (v80 >= 0)
          v82 = (const char *)v73;
        else
          v82 = *(const char **)v73;
        v83 = v80 & 0x7F;
        if (v81)
          v84 = *(_QWORD *)(v73 + 8);
        else
          v84 = v83;
        v85 = llvm::raw_ostream::write(v78, v82, v84);
        v86 = *((_QWORD *)v85 + 4);
        if ((unint64_t)(*((_QWORD *)v85 + 3) - v86) > 0x13)
        {
          *(_DWORD *)(v86 + 16) = 170812517;
          *(_OWORD *)v86 = *(_OWORD *)"'. Request ignored.\n";
          *((_QWORD *)v85 + 4) += 20;
        }
        else
        {
          llvm::raw_ostream::write(v85, "'. Request ignored.\n", 0x14uLL);
        }
      }
      else
      {
        ((void (*)(void **))v283)(v258);
      }
      if ((v284 & 1) != 0)
      {
        v87 = v278[0];
        v278[0] = 0;
        if (v87)
          (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
      }
      else if (SHIBYTE(v279) < 0)
      {
        operator delete(v278[0]);
      }
      v73 += 24;
      v76 -= 24;
    }
    while (v76);
  }
  v75 = operator new();
  if (*(char *)(v16 + 471) < 0)
  {
    sub_1C47EBC30(v278, *(void **)(v16 + 448), *(_QWORD *)(v16 + 456));
  }
  else
  {
    *(_OWORD *)v278 = *(_OWORD *)(v16 + 448);
    v279 = *(_QWORD *)(v16 + 464);
  }
  v281 = *(_QWORD *)(v16 + 488);
  v280 = *(_OWORD *)(v16 + 472);
  *(_QWORD *)(v75 + 120) = 0;
  *(_QWORD *)(v75 + 128) = 0;
  *(_DWORD *)(v75 + 136) = 0;
  *(_OWORD *)(v75 + 152) = 0u;
  *(_OWORD *)(v75 + 168) = 0u;
  *(_OWORD *)(v75 + 184) = 0u;
  *(_QWORD *)&v88 = -1;
  *((_QWORD *)&v88 + 1) = -1;
  *(_OWORD *)v75 = v88;
  *(_OWORD *)(v75 + 16) = v88;
  *(_OWORD *)(v75 + 32) = v88;
  *(_OWORD *)(v75 + 48) = v88;
  *(_OWORD *)(v75 + 64) = v88;
  *(_OWORD *)(v75 + 80) = v88;
  *(_OWORD *)(v75 + 96) = v88;
  *(_QWORD *)(v75 + 109) = -1;
  sub_1C4F777B0(v75, (int *)v278);
  if (SHIBYTE(v279) < 0)
    operator delete(v278[0]);
  if (*(_BYTE *)(v17 + 438))
  {
    *(_QWORD *)(v75 + 109) = 0;
    *(_OWORD *)(v75 + 80) = 0u;
    *(_OWORD *)(v75 + 96) = 0u;
    *(_OWORD *)(v75 + 48) = 0u;
    *(_OWORD *)(v75 + 64) = 0u;
    *(_OWORD *)(v75 + 16) = 0u;
    *(_OWORD *)(v75 + 32) = 0u;
    *(_OWORD *)v75 = 0u;
  }
  v278[0] = &llvm::TargetLibraryAnalysis::Key;
  v89 = sub_1C54E652C(&v218, v278);
  if (!v89[1])
  {
    v90 = v89;
    v91 = operator new();
    llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl((uint64_t)&v286, (__int128 *)v75);
    llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl((uint64_t)v278, (uint64_t)&v286);
    v285 = 1;
    sub_1C61BB478((uint64_t *)&v286);
    *(_QWORD *)v91 = &unk_1E816D5D0;
    *(_BYTE *)(v91 + 8) = 0;
    *(_BYTE *)(v91 + 208) = 0;
    if (v285)
    {
      llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl(v91 + 8, (uint64_t)v278);
      *(_BYTE *)(v91 + 208) = 1;
    }
    v92 = v90[1];
    v90[1] = v91;
    if (v92)
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
    if (v285)
      sub_1C61BB478((uint64_t *)v278);
  }
  v93 = *(_BYTE *)(v17 + 495);
  v94 = v93;
  v95 = v93 & 0x7F;
  if (v94 >= 0)
    v96 = v95;
  else
    v96 = *(_QWORD *)(v17 + 480);
  if (v96)
  {
    v12 = v17 + 472;
    v286 = v288;
    v287 = 0x400000000;
    if (v94 >= 0)
      v97 = (_DWORD *)(v17 + 472);
    else
      v97 = *(_DWORD **)(v17 + 472);
    llvm::PassBuilder::parseAAPipeline((uint64_t *)v258, (uint64_t)&v286, v97, v96, (uint64_t *)&v193);
    if (!v193)
    {
      v278[0] = &llvm::AAManager::Key;
      v98 = sub_1C54E652C(&v218, v278);
      if (!v98[1])
      {
        v99 = v98;
        v100 = (_QWORD *)operator new();
        v101 = v100;
        v278[0] = &v279;
        v278[1] = (void *)0x400000000;
        if ((_DWORD)v287)
        {
          sub_1C4FCE718((uint64_t)v278, (uint64_t)&v286);
          v102 = (int)v278[1];
          *v101 = &unk_1E817E990;
          v101[1] = v101 + 3;
          v101[2] = 0x400000000;
          if (v102)
            sub_1C4FCE718((uint64_t)(v101 + 1), (uint64_t)v278);
        }
        else
        {
          *v100 = &unk_1E817E990;
          v100[1] = v100 + 3;
          v100[2] = 0x400000000;
        }
        v103 = v99[1];
        v99[1] = v101;
        if (v103)
          (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
        if (v278[0] != &v279)
          free(v278[0]);
      }
      if (v286 != v288)
        free(v286);
      goto LABEL_228;
    }
LABEL_345:
    v188[0] = (uint64_t)"unable to parse AA pipeline description '";
    v189 = 259;
    v187 = 260;
    v186[0] = v12;
    sub_1C6131AAC(v188, v186, (uint64_t)v190);
    v184[0] = (uint64_t)"': ";
    v185 = 259;
    sub_1C6131AAC(v190, v184, (uint64_t)v192);
    v178 = v193;
    v193 = 0;
    sub_1C61D2548(&v178, &v179);
    v183 = 260;
    v180 = &v179;
    v127 = v192;
    v128 = (uint64_t *)&v180;
    goto LABEL_346;
  }
LABEL_228:
  llvm::PassBuilder::registerModuleAnalyses((uint64_t)v258, &v206);
  llvm::PassBuilder::registerCGSCCAnalyses((uint64_t)v258, (uint64_t)&v212);
  llvm::PassBuilder::registerFunctionAnalyses((uint64_t)v258, &v218);
  llvm::PassBuilder::registerLoopAnalyses((uint64_t)v258, (uint64_t)&v224);
  llvm::PassBuilder::crossRegisterProxies((uint64_t)v258, (uint64_t)&v224, &v218, (uint64_t)&v212, &v206);
  v180 = 0;
  v181 = 0;
  v182 = 0;
  if (!*(_BYTE *)(v17 + 436))
  {
    LOBYTE(v278[0]) = 1;
    sub_1C62B2C28((uint64_t)&v180, (char *)v278);
  }
  v104 = *(_BYTE *)(v17 + 471);
  v105 = v104;
  v106 = v104 & 0x7F;
  if (v105 >= 0)
    v107 = v106;
  else
    v107 = *(_QWORD *)(v17 + 456);
  if (v107)
  {
    if (v105 >= 0)
      v126 = v17 + 448;
    else
      v126 = *(_QWORD *)(v17 + 448);
    llvm::PassBuilder::parsePassPipeline(v258, (uint64_t)&v180, v126, v107, (uint64_t *)&v193);
    if (!v193)
      goto LABEL_316;
    v190[0] = (uint64_t)"unable to parse pass pipeline description '";
    v191 = 259;
    v189 = 260;
    v188[0] = v17 + 448;
    sub_1C6131AAC(v190, v188, (uint64_t)v192);
    v186[0] = (uint64_t)"': ";
    v187 = 259;
    sub_1C6131AAC(v192, v186, (uint64_t)&v286);
    v178 = v193;
    v193 = 0;
    sub_1C61D2548(&v178, &v179);
    v185 = 260;
    v184[0] = (uint64_t)&v179;
    v127 = (uint64_t *)&v286;
    v128 = v184;
LABEL_346:
    sub_1C6131AAC(v127, v128, (uint64_t)v278);
    llvm::report_fatal_error((uint64_t)v278, 1);
  }
  v108 = (llvm *)*off_1E817EA18[v18];
  if (*(_BYTE *)(v17 + 437))
  {
    llvm::PassBuilder::buildPerModuleDefaultPipeline((uint64_t)v258, (unint64_t)v108, 0, (uint64_t)v278);
    v129 = (std::string::size_type *)v278[0];
    v130 = (std::string::size_type *)v278[1];
    if (v278[0] != v278[1])
    {
      v131 = (char *)v181;
      do
      {
        if ((unint64_t)v131 >= v182)
        {
          v133 = (v131 - (char *)v180) >> 3;
          if ((unint64_t)(v133 + 1) >> 61)
LABEL_342:
            abort();
          v134 = (uint64_t)(v182 - (_QWORD)v180) >> 2;
          if (v134 <= v133 + 1)
            v134 = v133 + 1;
          if (v182 - (unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
            v135 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          if (v135)
          {
            if (v135 >> 61)
LABEL_343:
              sub_1C4764EE4();
            v136 = (char *)operator new(8 * v135);
          }
          else
          {
            v136 = 0;
          }
          v137 = (std::string *)&v136[8 * v133];
          v138 = &v136[8 * v135];
          v139 = *v129;
          *v129 = 0;
          v137->__r_.__value_.__r.__words[0] = v139;
          v131 = &v137->__r_.__value_.__s.__data_[8];
          v140 = v180;
          v141 = (std::string::__raw *)v181;
          if (v181 == v180)
          {
            v180 = v137;
            v181 = (std::string *)&v137->__r_.__value_.__r.__words[1];
            v182 = (unint64_t)v138;
          }
          else
          {
            do
            {
              v142 = v141[-1].__words[2];
              v141 = (std::string::__raw *)((char *)v141 - 8);
              v141->__words[0] = 0;
              v137[-1].__r_.__value_.__r.__words[2] = v142;
              v137 = (std::string *)((char *)v137 - 8);
            }
            while (v141 != (std::string::__raw *)v140);
            v141 = (std::string::__raw *)v180;
            v143 = (std::string::__raw *)v181;
            v180 = v137;
            v181 = (std::string *)v131;
            v182 = (unint64_t)v138;
            while (v143 != v141)
            {
              v145 = v143[-1].__words[2];
              v143 = (std::string::__raw *)((char *)v143 - 8);
              v144 = v145;
              v143->__words[0] = 0;
              if (v145)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v144 + 8))(v144);
            }
          }
          if (v141)
            operator delete(v141);
        }
        else
        {
          v132 = *v129;
          *v129 = 0;
          *(_QWORD *)v131 = v132;
          v131 += 8;
        }
        v181 = (std::string *)v131;
        ++v129;
      }
      while (v129 != v130);
    }
  }
  else if (v174)
  {
    llvm::PassBuilder::buildThinLTODefaultPipeline((uint64_t)v258, (unint64_t)v108, v8, (uint64_t)v278);
    v109 = (std::string::size_type *)v278[0];
    v110 = (std::string::size_type *)v278[1];
    if (v278[0] != v278[1])
    {
      v111 = (char *)v181;
      do
      {
        if ((unint64_t)v111 >= v182)
        {
          v113 = (v111 - (char *)v180) >> 3;
          if ((unint64_t)(v113 + 1) >> 61)
            goto LABEL_342;
          v114 = (uint64_t)(v182 - (_QWORD)v180) >> 2;
          if (v114 <= v113 + 1)
            v114 = v113 + 1;
          if (v182 - (unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
            v115 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v115 = v114;
          if (v115)
          {
            if (v115 >> 61)
              goto LABEL_343;
            v116 = (char *)operator new(8 * v115);
          }
          else
          {
            v116 = 0;
          }
          v117 = (std::string *)&v116[8 * v113];
          v118 = &v116[8 * v115];
          v119 = *v109;
          *v109 = 0;
          v117->__r_.__value_.__r.__words[0] = v119;
          v111 = &v117->__r_.__value_.__s.__data_[8];
          v120 = v180;
          v121 = (std::string::__raw *)v181;
          if (v181 == v180)
          {
            v180 = v117;
            v181 = (std::string *)&v117->__r_.__value_.__r.__words[1];
            v182 = (unint64_t)v118;
          }
          else
          {
            do
            {
              v122 = v121[-1].__words[2];
              v121 = (std::string::__raw *)((char *)v121 - 8);
              v121->__words[0] = 0;
              v117[-1].__r_.__value_.__r.__words[2] = v122;
              v117 = (std::string *)((char *)v117 - 8);
            }
            while (v121 != (std::string::__raw *)v120);
            v121 = (std::string::__raw *)v180;
            v123 = (std::string::__raw *)v181;
            v180 = v117;
            v181 = (std::string *)v111;
            v182 = (unint64_t)v118;
            while (v123 != v121)
            {
              v125 = v123[-1].__words[2];
              v123 = (std::string::__raw *)((char *)v123 - 8);
              v124 = v125;
              v123->__words[0] = 0;
              if (v125)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v124 + 8))(v124);
            }
          }
          if (v121)
            operator delete(v121);
        }
        else
        {
          v112 = *v109;
          *v109 = 0;
          *(_QWORD *)v111 = v112;
          v111 += 8;
        }
        v181 = (std::string *)v111;
        ++v109;
      }
      while (v109 != v110);
    }
  }
  else
  {
    llvm::PassBuilder::buildLTODefaultPipeline((uint64_t)v258, v108, v10, v278);
    v146 = (std::string::size_type *)v278[0];
    v147 = (std::string::size_type *)v278[1];
    if (v278[0] != v278[1])
    {
      v148 = (char *)v181;
      do
      {
        if ((unint64_t)v148 >= v182)
        {
          v150 = (v148 - (char *)v180) >> 3;
          if ((unint64_t)(v150 + 1) >> 61)
            goto LABEL_342;
          v151 = (uint64_t)(v182 - (_QWORD)v180) >> 2;
          if (v151 <= v150 + 1)
            v151 = v150 + 1;
          if (v182 - (unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
            v152 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v152 = v151;
          if (v152)
          {
            if (v152 >> 61)
              goto LABEL_343;
            v153 = (char *)operator new(8 * v152);
          }
          else
          {
            v153 = 0;
          }
          v154 = (std::string *)&v153[8 * v150];
          v155 = &v153[8 * v152];
          v156 = *v146;
          *v146 = 0;
          v154->__r_.__value_.__r.__words[0] = v156;
          v148 = &v154->__r_.__value_.__s.__data_[8];
          v157 = v180;
          v158 = (std::string::__raw *)v181;
          if (v181 == v180)
          {
            v180 = v154;
            v181 = (std::string *)&v154->__r_.__value_.__r.__words[1];
            v182 = (unint64_t)v155;
          }
          else
          {
            do
            {
              v159 = v158[-1].__words[2];
              v158 = (std::string::__raw *)((char *)v158 - 8);
              v158->__words[0] = 0;
              v154[-1].__r_.__value_.__r.__words[2] = v159;
              v154 = (std::string *)((char *)v154 - 8);
            }
            while (v158 != (std::string::__raw *)v157);
            v158 = (std::string::__raw *)v180;
            v160 = (std::string::__raw *)v181;
            v180 = v154;
            v181 = (std::string *)v148;
            v182 = (unint64_t)v155;
            while (v160 != v158)
            {
              v162 = v160[-1].__words[2];
              v160 = (std::string::__raw *)((char *)v160 - 8);
              v161 = v162;
              v160->__words[0] = 0;
              if (v162)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v161 + 8))(v161);
            }
          }
          if (v158)
            operator delete(v158);
        }
        else
        {
          v149 = *v146;
          *v146 = 0;
          *(_QWORD *)v148 = v149;
          v148 += 8;
        }
        v181 = (std::string *)v148;
        ++v146;
      }
      while (v146 != v147);
    }
  }
  v286 = v278;
  sub_1C4764BBC((void ***)&v286);
LABEL_316:
  if (!*(_BYTE *)(v17 + 436))
  {
    LOBYTE(v278[0]) = 1;
    sub_1C62B2C28((uint64_t)&v180, (char *)v278);
  }
  llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run(&v180, v176, (uint64_t)&v206, (uint64_t)v278);
  if (v283 != v282)
    free(v283);
  if (v278[1] != v278[0])
    free(v278[1]);
  v286 = &v180;
  sub_1C4764BBC((void ***)&v286);
  v163 = sub_1C61BB478((uint64_t *)v75);
  MEMORY[0x1CAA32FC0](v163, 0x1020C4008A01BC9);
  sub_1C62B2F4C((uint64_t)v258);
  sub_1C62B316C((uint64_t)v265);
  sub_1C58F6F3C(v266);
  MEMORY[0x1CAA32FB4](v210, 8);
  sub_1C4D8B440((uint64_t *)&v208);
  sub_1C4D8B52C((uint64_t *)&v206);
  MEMORY[0x1CAA32FB4](v216, 8);
  sub_1C4D8B440((uint64_t *)&v214);
  sub_1C4D8B52C((uint64_t *)&v212);
  MEMORY[0x1CAA32FB4](v222, 8);
  sub_1C4D8B440((uint64_t *)&v220);
  sub_1C4D8B52C((uint64_t *)&v218);
  MEMORY[0x1CAA32FB4](v228, 8);
  sub_1C4D8B440((uint64_t *)&v226);
  sub_1C4D8B52C((uint64_t *)&v224);
  if (v256)
  {
    v164 = v255;
    if (v255)
    {
      v165 = (unsigned int *)(v255 + 8);
      do
      {
        v166 = __ldaxr(v165);
        v167 = v166 - 1;
      }
      while (__stlxr(v167, v165));
      if (!v167)
        (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
    }
    if (SHIBYTE(v252) < 0)
      operator delete((void *)v251);
    if (SHIBYTE(v250) < 0)
      operator delete((void *)v249);
    if (SHIBYTE(v248) < 0)
      operator delete(__src[0]);
  }
  v168 = v257;
  if (v257)
  {
    v169 = (unsigned int *)(v257 + 8);
    do
    {
      v170 = __ldaxr(v169);
      v171 = v170 - 1;
    }
    while (__stlxr(v171, v169));
    if (!v171)
      (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
  }
  v172 = *(_QWORD *)(v17 + 1080);
  if (!v172)
    return 1;
  LODWORD(v258[0]) = v175;
  return (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v172 + 48))(v172, v258, v176);
}

llvm::raw_ostream *llvm::lto::finalizeOptimizationRemarks@<X0>(llvm::raw_ostream *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  const char *v5;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    *(_BYTE *)(v3 + 24) = 1;
    result = *(llvm::raw_ostream **)(v3 + 136);
    v4 = (const char *)*((_QWORD *)result + 4);
    v5 = (const char *)*((_QWORD *)result + 2);
    if (v4 != v5)
    {
      *((_QWORD *)result + 4) = v5;
      result = (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(result, v5, v4 - v5);
    }
  }
  *a2 = 0;
  return result;
}

llvm::raw_ostream *sub_1C58F48A8(llvm::raw_ostream *result)
{
  const char *v1;
  const char *v2;

  v1 = (const char *)*((_QWORD *)result + 4);
  v2 = (const char *)*((_QWORD *)result + 2);
  if (v1 != v2)
  {
    *((_QWORD *)result + 4) = v2;
    return (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(result, v2, v1 - v2);
  }
  return result;
}

void llvm::lto::backend(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X3>, llvm *a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  void (**v15)(void);
  uint64_t v16;
  void (**v17)(void);
  _QWORD *v18;
  _QWORD v19[6];
  uint64_t v20;
  int v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;
  char v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C58F4B64((uint64_t)&v26, a1, (uint64_t)a4);
  if ((v27 & 1) != 0)
  {
    *a6 = v26;
    return;
  }
  sub_1C58F4CEC((uint64_t *)&v18, a1, v26, (uint64_t)a4);
  v12 = v18;
  if (!*(_BYTE *)(a1 + 439))
  {
    __p = 0;
    v29 = 0;
    v30 = 0;
    v13 = llvm::lto::opt(a1, (uint64_t)v18, 0, (uint64_t)a4);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
    if (!v13)
      goto LABEL_18;
  }
  v14 = (_QWORD *)a2[3];
  if (a3 == 1)
  {
    if (v14)
    {
      if (v14 == a2)
      {
        v25 = v24;
        (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v24);
      }
      else
      {
        v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
      }
    }
    else
    {
      v25 = 0;
    }
    sub_1C58F4F28(a1, (uint64_t)v12, (uint64_t)v24, 0, a4, a5);
    if (v25 == v24)
    {
      v15 = (void (**)(void))(v24[0] + 32);
    }
    else
    {
      if (!v25)
        goto LABEL_18;
      v15 = (void (**)(void))(*v25 + 40);
    }
    (*v15)();
LABEL_18:
    *a6 = 0;
    if (!v12)
      return;
    goto LABEL_19;
  }
  if (v14)
  {
    if (v14 == a2)
    {
      v23 = v22;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v22);
    }
    else
    {
      v23 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    }
  }
  else
  {
    v23 = 0;
  }
  llvm::ThreadPool::ThreadPool((uint64_t)&__p, a3);
  v21 = 0;
  v16 = v12[1];
  v19[0] = &__p;
  v19[1] = a1;
  v19[2] = &v20;
  v19[3] = v22;
  v19[4] = a5;
  v19[5] = &v21;
  v20 = v16;
  llvm::SplitModule(a4, a3, (void (*)(uint64_t, llvm::Module **))sub_1C58F71E8, (uint64_t)v19, 0);
  llvm::ThreadPool::wait((llvm::ThreadPool *)&__p);
  llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)&__p);
  if (v23 == v22)
  {
    v17 = (void (**)(void))(v22[0] + 32);
    goto LABEL_30;
  }
  if (v23)
  {
    v17 = (void (**)(void))(*v23 + 40);
LABEL_30:
    (*v17)();
  }
  *a6 = 0;
LABEL_19:
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
}

void sub_1C58F4B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  int v6;
  size_t v7;
  size_t v8;
  void *v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  unint64_t v17;
  char v18;
  int v19;
  size_t v20;
  void *__p[2];
  uint64_t v22;
  void **v23;
  __int16 v24;

  v5 = *(_BYTE *)(a2 + 519);
  v6 = v5;
  v7 = v5 & 0x7F;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)(a2 + 504);
  if (v8)
  {
    if (v6 >= 0)
      v9 = (void *)(a2 + 496);
    else
      v9 = *(void **)(a2 + 496);
LABEL_8:
    sub_1C4D828E4(a3, v9, v8);
    goto LABEL_12;
  }
  v10 = *(_BYTE *)(a3 + 239);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 < 0)
    v12 = *(_QWORD *)(a3 + 224);
  if (!v12)
  {
    v9 = (void *)(a2 + 520);
    v18 = *(_BYTE *)(a2 + 543);
    v19 = v18;
    if (v18 < 0)
      v9 = *(void **)(a2 + 520);
    v20 = v18 & 0x7F;
    if (v19 >= 0)
      v8 = v20;
    else
      v8 = *(_QWORD *)(a2 + 528);
    goto LABEL_8;
  }
LABEL_12:
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v13 = llvm::TargetRegistry::lookupTarget(a3 + 216, (uint64_t)__p);
  if (v13)
  {
    v14 = (uint64_t)v13;
    v15 = *(_BYTE *)(a1 + 8) & 0xFE;
  }
  else
  {
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v17 = qword_1ED836B58[0];
    v14 = operator new();
    v24 = 260;
    v23 = __p;
    *(_QWORD *)v14 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v23, (_QWORD *)(v14 + 8));
    *(_QWORD *)(v14 + 32) = 3;
    *(_QWORD *)(v14 + 40) = v17;
    *(_BYTE *)(v14 + 48) = 1;
    v15 = *(_BYTE *)(a1 + 8) | 1;
  }
  *(_BYTE *)(a1 + 8) = v15;
  *(_QWORD *)a1 = v14;
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void sub_1C58F4CEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t CodeModel;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  uint64_t size;
  uint64_t v30;
  uint64_t v31;
  _QWORD v34[4];
  __int16 v35;
  std::string __p[2];
  int64x2_t v37;
  uint64_t v38;

  v6 = *(_BYTE *)(a4 + 239);
  if (v6 >= 0)
    v7 = a4 + 216;
  else
    v7 = *(_QWORD *)(a4 + 216);
  if (v6 >= 0)
    v8 = v6 & 0x7F;
  else
    v8 = *(_QWORD *)(a4 + 224);
  v37 = 0uLL;
  v38 = 0;
  llvm::SubtargetFeatures::Split((unint64_t *)&v37, (uint64_t)"", 0);
  v35 = 261;
  v30 = v8;
  v31 = v7;
  v34[0] = v7;
  v34[1] = v8;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v34);
  llvm::SubtargetFeatures::getDefaultSubtargetFeatures(&v37, (const llvm::Triple *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v9 = *(_QWORD *)(a2 + 328);
  v10 = *(_QWORD *)(a2 + 336);
  while (v9 != v10)
  {
    v11 = *(_BYTE *)(v9 + 23);
    v12 = v11 < 0;
    if (v11 >= 0)
      v13 = (char *)v9;
    else
      v13 = *(char **)v9;
    v14 = v11 & 0x7F;
    if (v12)
      v15 = *(_QWORD *)(v9 + 8);
    else
      v15 = v14;
    llvm::SubtargetFeatures::AddFeature(&v37, v13, v15, 1);
    v9 += 24;
  }
  if (*(_BYTE *)(a2 + 412))
  {
    v16 = *(_DWORD *)(a2 + 408);
    v17 = v16 & 0xFFFFFF00;
LABEL_22:
    v18 = 0x100000000;
    goto LABEL_23;
  }
  if (llvm::Module::getModuleFlag(a4, "PIC Level", 9uLL))
  {
    v17 = 0;
    LOBYTE(v16) = llvm::Module::getPICLevel((llvm::Module *)a4) != 0;
    goto LABEL_22;
  }
  v18 = 0;
  LOBYTE(v16) = 0;
  v17 = 0;
LABEL_23:
  if (*(_BYTE *)(a2 + 420))
  {
    v19 = 0;
    v20 = *(_DWORD *)(a2 + 416);
    v21 = 0x100000000;
  }
  else
  {
    CodeModel = llvm::Module::getCodeModel((llvm::Module *)a4);
    v20 = CodeModel;
    v19 = CodeModel & 0xFFFFFF0000000000;
    v21 = CodeModel & 0xFF00000000;
  }
  v23 = *(_BYTE *)(a2 + 23);
  v24 = v23 < 0;
  if (v23 >= 0)
    v25 = a2;
  else
    v25 = *(_QWORD *)a2;
  v26 = v23 & 0x7F;
  if (v24)
    v27 = *(_QWORD *)(a2 + 8);
  else
    v27 = v26;
  sub_1C5021A04((std::string *)v37.i64[0], (std::string *)v37.i64[1], ",", 1uLL, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = __p;
  else
    v28 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p[0].__r_.__value_.__l.__size_;
  *a1 = sub_1C4D7B2D4(a3, v31, v30, v25, v27, (uint64_t)v28, size, a2 + 24, v18 | v17 | v16, v19 | v21 | v20, *(_DWORD *)(a2 + 424), 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  sub_1C4765410((void ***)__p);
}

void sub_1C58F4F28(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5, llvm *a6)
{
  uint64_t v12;
  char v13;
  int v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  int v22;
  uint64_t v23;
  const std::error_category *v24;
  char v25;
  int v26;
  const void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  size_t v34;
  void *v35;
  __int128 *p_dst;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  uint64_t v43;
  void **v44;
  void **v45;
  __int128 v46;
  llvm::TargetLibraryInfoWrapperPass *v47;
  const llvm::ModuleSummaryIndex *v48;
  const void **ImmutableModuleSummaryIndexWrapperPass;
  uint64_t v50;
  std::string::size_type v51;
  void **v52;
  std::string *v53;
  void *v54[2];
  char v55;
  __int16 v56;
  void **v57;
  std::string v58;
  std::string *v59;
  __int16 v60;
  std::string v61;
  __int16 v62;
  llvm::legacy::PassManagerImpl *v63[2];
  std::string::size_type v64;
  __int16 v65;
  _QWORD *v66[4];
  __int16 v67;
  std::error_code v68;
  std::string *v69;
  _OWORD v70[2];
  __int128 __dst;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[21];
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void **v84;
  char v85;
  __int16 v86;
  void *__p;
  __int128 __len;
  _QWORD v89[131];

  v89[128] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 1112);
  if (v12)
  {
    LODWORD(__p) = a4;
    if (!(*(unsigned int (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v12 + 48))(v12, &__p, a5))
      return;
  }
  if (dword_1ED8191E8 == 1)
  {
    memset(v70, 0, sizeof(v70));
    __len = 0uLL;
    __p = 0;
    llvm::embedBitcodeInModule((uint64_t)a5, (unsigned __int8 **)v70, 1, 0, (uint64_t)&__p);
    if (__p)
    {
      *(_QWORD *)&__len = __p;
      operator delete(__p);
    }
  }
  v69 = 0;
  v13 = *(_BYTE *)(a1 + 687);
  v14 = v13;
  if (v13 >= 0)
    v15 = (const void *)(a1 + 664);
  else
    v15 = *(const void **)(a1 + 664);
  v16 = v13 & 0x7F;
  if (v14 >= 0)
    v17 = v16;
  else
    v17 = *(_QWORD *)(a1 + 672);
  __p = v89;
  __len = xmmword_1C86520E0;
  if (v17 >= 0x401)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v89, v17, 1);
    v18 = __len;
    v20 = __p;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = v89;
    if (!v17)
      goto LABEL_16;
  }
  memcpy((char *)v20 + v18, v15, v17);
  v19 = __len;
LABEL_16:
  *(_QWORD *)&__len = v19 + v17;
  v21 = *(_BYTE *)(a1 + 639);
  v22 = v21;
  v23 = v21 & 0x7F;
  if (v22 < 0)
    v23 = *(_QWORD *)(a1 + 624);
  if (!v23)
  {
    std::string::operator=((std::string *)(a2 + 1192), (const std::string *)(a1 + 640));
    goto LABEL_45;
  }
  std::system_category();
  LOWORD(v73) = 260;
  *(_QWORD *)&__dst = a1 + 616;
  *(_QWORD *)&v68.__val_ = llvm::sys::fs::create_directories((unsigned __int8 **)&__dst, 1, 504);
  v68.__cat_ = v24;
  if (v68.__val_)
  {
    v84 = (void **)"Failed to create directory ";
    v86 = 259;
    v65 = 260;
    v63[0] = (llvm::legacy::PassManagerImpl *)(a1 + 616);
    sub_1C6131AAC((uint64_t *)&v84, (uint64_t *)v63, (uint64_t)v66);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
    v62 = 259;
    sub_1C6131AAC((uint64_t *)v66, (uint64_t *)&v61, (uint64_t)v54);
    std::error_code::message(&v58, &v68);
    v60 = 260;
    goto LABEL_78;
  }
  v25 = *(_BYTE *)(a1 + 639);
  v26 = v25;
  if (v25 >= 0)
    v27 = (const void *)(a1 + 616);
  else
    v27 = *(const void **)(a1 + 616);
  v28 = v25 & 0x7F;
  if (v26 >= 0)
    v29 = v28;
  else
    v29 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)&__len = 0;
  if (*((_QWORD *)&__len + 1) < v29)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v89, v29, 1);
    v30 = __len;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    if (!v29)
      goto LABEL_30;
  }
  memcpy((char *)__p + v30, v27, v29);
  v31 = __len;
LABEL_30:
  *(_QWORD *)&__len = v31 + v29;
  std::to_string(&v61, a4);
  v32 = std::string::append(&v61, ".dwo");
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)v63 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v64 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  LOWORD(v73) = 260;
  *(_QWORD *)&__dst = v63;
  v56 = 257;
  v67 = 257;
  v86 = 257;
  llvm::sys::path::append(&__p, 0, (_QWORD **)&__dst, (_QWORD **)v54, v66, &v84);
  if (SHIBYTE(v64) < 0)
    operator delete(v63[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  v34 = __len;
  if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v35 = __p;
  if ((unint64_t)__len >= 0x17)
  {
    v37 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__len | 7) != 0x17)
      v37 = __len | 7;
    v38 = v37 + 1;
    p_dst = (__int128 *)operator new(v37 + 1);
    *((_QWORD *)&__dst + 1) = v34;
    *(_QWORD *)&v72 = v38 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    BYTE7(v72) = __len;
    p_dst = &__dst;
    if (!(_QWORD)__len)
      goto LABEL_42;
  }
  memmove(p_dst, v35, v34);
LABEL_42:
  *((_BYTE *)p_dst + v34) = 0;
  v39 = (void **)(a2 + 1192);
  if (*(char *)(a2 + 1215) < 0)
    operator delete(*v39);
  *(_OWORD *)v39 = __dst;
  *(_QWORD *)(a2 + 1208) = v72;
LABEL_45:
  if ((_QWORD)__len)
  {
    v68.__val_ = 0;
    v68.__cat_ = std::system_category();
    v40 = (std::string *)operator new();
    v41 = llvm::ToolOutputFile::ToolOutputFile(v40, (std::string::value_type *)__p, __len, (uint64_t)&v68, 0);
    v42 = v69;
    v69 = v41;
    if (v42)
      sub_1C49C7E54((uint64_t)&v69, v42);
    if (v68.__val_)
    {
      v84 = (void **)"Failed to open ";
      v86 = 259;
      v65 = 261;
      v63[0] = (llvm::legacy::PassManagerImpl *)__p;
      v63[1] = (llvm::legacy::PassManagerImpl *)__len;
      sub_1C6131AAC((uint64_t *)&v84, (uint64_t *)v63, (uint64_t)v66);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
      v62 = 259;
      sub_1C6131AAC((uint64_t *)v66, (uint64_t *)&v61, (uint64_t)v54);
      std::error_code::message(&v58, &v68);
      v60 = 260;
LABEL_78:
      v59 = &v58;
      sub_1C6131AAC((uint64_t *)v54, (uint64_t *)&v59, (uint64_t)&__dst);
      llvm::report_fatal_error((uint64_t)&__dst, 1);
    }
  }
  LODWORD(__dst) = a4;
  v43 = *(_QWORD *)(a3 + 24);
  if (!v43)
  {
    sub_1C485C2F0();
    goto LABEL_74;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v43 + 48))(&v84, v43, &__dst);
  v44 = v84;
  if ((v85 & 1) != 0)
  {
    v45 = 0;
    v84 = 0;
    if (v44)
    {
      v57 = v44;
      llvm::report_fatal_error((uint64_t *)&v57);
    }
  }
  else
  {
    v45 = v84;
  }
  std::string::operator=((std::string *)(a2 + 1288), (const std::string *)(v45 + 2));
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)v63);
  v67 = 260;
  v66[0] = a5 + 27;
  llvm::Triple::Triple((uint64_t)v54, (llvm::Twine *)v66);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  *(_QWORD *)&v46 = -1;
  *((_QWORD *)&v46 + 1) = -1;
  __dst = v46;
  v72 = v46;
  v73 = v46;
  v74 = v46;
  v75 = v46;
  v76 = v46;
  *(_OWORD *)v77 = v46;
  *(_QWORD *)&v77[13] = -1;
  sub_1C4F777B0((uint64_t)&__dst, (int *)v54);
  if (v55 < 0)
    operator delete(v54[0]);
  v47 = (llvm::TargetLibraryInfoWrapperPass *)operator new();
  llvm::TargetLibraryInfoWrapperPass::TargetLibraryInfoWrapperPass(v47, (const llvm::TargetLibraryInfoImpl *)&__dst);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)v63[1] + 52, (const void **)v47);
  ImmutableModuleSummaryIndexWrapperPass = (const void **)llvm::createImmutableModuleSummaryIndexWrapperPass(a6, v48);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)v63[1] + 52, ImmutableModuleSummaryIndexWrapperPass);
  v50 = *(_QWORD *)(a1 + 400);
  if (v50)
    (*(void (**)(uint64_t, llvm::legacy::PassManagerImpl **))(*(_QWORD *)v50 + 48))(v50, v63);
  if (v69)
    v51 = v69[5].__r_.__value_.__r.__words[2];
  else
    v51 = 0;
  if ((*(unsigned int (**)(uint64_t, llvm::legacy::PassManagerImpl **, void *, std::string::size_type, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, v63, v84[1], v51, *(unsigned int *)(a1 + 428), 1, 0))
  {
LABEL_74:
    llvm::report_fatal_error((llvm *)"Failed to setup codegen", (const char *)1);
  }
  llvm::legacy::PassManagerImpl::run(v63[1], (llvm::Module *)a5);
  if (v69)
    v69[1].__r_.__value_.__s.__data_[0] = 1;
  sub_1C61BB478((uint64_t *)&__dst);
  v63[0] = (llvm::legacy::PassManagerImpl *)&off_1E81682B8;
  if (v63[1])
    (*(void (**)(llvm::legacy::PassManagerImpl *))(*(_QWORD *)v63[1] + 8))(v63[1]);
  v52 = v84;
  v84 = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  if (__p != v89)
    free(__p);
  v53 = v69;
  v69 = 0;
  if (v53)
    sub_1C49C7E54((uint64_t)&v69, v53);
}

void llvm::lto::thinBackend(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, const llvm::ModuleSummaryIndex *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  char v17;
  int v18;
  void *v19;
  size_t v20;
  size_t v21;
  char v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t *v39;
  _QWORD *v40;
  void (**v41)(_QWORD *);
  llvm::raw_ostream *v42;
  const char *v43;
  const char *v44;
  llvm::raw_ostream *v45;
  const char *v46;
  const char *v47;
  const llvm::ModuleSummaryIndex *v48;
  uint64_t *v49;
  uint64_t *v50;
  llvm::ModuleSummaryIndex *v51;
  uint64_t (**v52)();
  uint64_t (***v53)();
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::GlobalValue *v59;
  uint64_t v60;
  llvm::GlobalValue *v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  llvm::GlobalValue **v74;
  llvm::GlobalValue *v75;
  int v76;
  int v77;
  uint64_t *v78;
  llvm::GlobalValue *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t *v87;
  llvm::raw_ostream *v88;
  const char *v89;
  const char *v90;
  llvm::raw_ostream *v91;
  const char *v92;
  const char *v93;
  llvm::raw_ostream *v94;
  const char *v95;
  const char *v96;
  uint64_t (***v97)();
  uint64_t v98;
  char v99;
  uint64_t v100;
  _QWORD *v101;
  llvm::Module *v102;
  uint64_t *v103;
  llvm::ModuleSummaryIndex *v104;
  uint64_t *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _QWORD v111[5];
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _DWORD *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  char v119;
  uint64_t (**v120)();
  __int128 v121;
  uint64_t (***v122)();
  _QWORD v123[3];
  _QWORD *v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  llvm::ModuleSummaryIndex *v129;
  uint64_t (**v130)();
  __int128 v131;
  uint64_t (***v132)();
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v117 = a2;
  v116 = a8;
  sub_1C58F4B64((uint64_t)&v127, a1, a4);
  if ((v128 & 1) != 0)
  {
    *a9 = v127;
    return;
  }
  v104 = a5;
  sub_1C58F4CEC((uint64_t *)&v115, a1, v127, a4);
  v17 = *(_BYTE *)(a1 + 711);
  v18 = v17;
  if (v17 >= 0)
    v19 = (void *)(a1 + 688);
  else
    v19 = *(void **)(a1 + 688);
  v20 = v17 & 0x7F;
  if (v18 >= 0)
    v21 = v20;
  else
    v21 = *(_QWORD *)(a1 + 696);
  v22 = *(_BYTE *)(a1 + 735);
  v23 = v22;
  if (v22 >= 0)
    v24 = (char *)(a1 + 712);
  else
    v24 = *(char **)(a1 + 712);
  v25 = v22 & 0x7F;
  if (v23 >= 0)
    v26 = v25;
  else
    v26 = *(_QWORD *)(a1 + 720);
  v27 = *(_BYTE *)(a1 + 783);
  v28 = v27;
  if (v27 >= 0)
    v29 = a1 + 760;
  else
    v29 = *(_QWORD *)(a1 + 760);
  v30 = v27 & 0x7F;
  if (v28 >= 0)
    v31 = v30;
  else
    v31 = *(_QWORD *)(a1 + 768);
  llvm::lto::setupLLVMOptimizationRemarks(v19, v21, *(uint64_t **)a4, v24, v26, v29, v31, *(unsigned __int8 *)(a1 + 736), (uint64_t)&v125, *(_QWORD *)(a1 + 744), *(_QWORD *)(a1 + 752), v117);
  if ((v126 & 1) != 0)
  {
    v35 = v125;
    v125 = 0;
    *a9 = v35;
    goto LABEL_55;
  }
  v32 = v125;
  v125 = 0;
  v114 = (_BYTE *)v32;
  llvm::Module::setPartialSampleProfileRatio((llvm::LLVMContext **)a4, a5);
  if (*(_BYTE *)(a1 + 439))
  {
    v36 = v115;
    v37 = (_QWORD *)a3[3];
    if (v37)
    {
      if (v37 == a3)
      {
        v124 = v123;
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v123);
      }
      else
      {
        v124 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v37 + 16))(v37);
      }
    }
    else
    {
      v124 = 0;
    }
    sub_1C58F4F28(a1, (uint64_t)v36, (uint64_t)v123, v117, (_QWORD *)a4, a5);
    v40 = v124;
    if (v124 == v123)
    {
      v41 = (void (**)(_QWORD *))(v123[0] + 32);
      v40 = v123;
    }
    else
    {
      if (!v124)
      {
LABEL_45:
        if (!v32)
        {
          *a9 = 0;
          v113 = 0;
          goto LABEL_55;
        }
        *(_BYTE *)(v32 + 24) = 1;
        v42 = *(llvm::raw_ostream **)(v32 + 136);
        v43 = (const char *)*((_QWORD *)v42 + 4);
        v44 = (const char *)*((_QWORD *)v42 + 2);
        if (v43 != v44)
        {
          *((_QWORD *)v42 + 4) = v44;
          llvm::raw_ostream::flush_tied_then_write(v42, v44, v43 - v44);
        }
        *a9 = 0;
        v113 = 0;
        v39 = &v113;
        goto LABEL_53;
      }
      v41 = (void (**)(_QWORD *))(*v124 + 40);
    }
    (*v41)(v40);
    goto LABEL_45;
  }
  v33 = *(_QWORD *)(a1 + 952);
  if (v33)
  {
    LODWORD(v129) = v117;
    if (((*(uint64_t (**)(uint64_t, llvm::ModuleSummaryIndex **, uint64_t))(*(_QWORD *)v33 + 48))(v33, &v129, a4) & 1) == 0)
    {
      if (!v32)
      {
        *a9 = 0;
        v112 = 0;
        goto LABEL_55;
      }
      *(_BYTE *)(v32 + 24) = 1;
      v45 = *(llvm::raw_ostream **)(v32 + 136);
      v46 = (const char *)*((_QWORD *)v45 + 4);
      v47 = (const char *)*((_QWORD *)v45 + 2);
      if (v46 != v47)
      {
        *((_QWORD *)v45 + 4) = v47;
        llvm::raw_ostream::flush_tied_then_write(v45, v47, v46 - v47);
      }
      *a9 = 0;
      v112 = 0;
      v39 = &v112;
LABEL_53:
      v38 = (_BYTE *)v32;
      goto LABEL_54;
    }
  }
  v111[0] = a1;
  v111[1] = &v117;
  v111[2] = a5;
  v111[3] = a10;
  v111[4] = a3;
  if (!byte_1ED819128)
  {
    v103 = a9;
    v100 = a6;
    v101 = (_QWORD *)a1;
    v34 = v115[123] == 3 && v115[136] && llvm::Module::getPIELevel((llvm::Module *)a4) == 0;
    v48 = a5;
    v99 = v34;
    llvm::renameModuleForThinLTO(a4, (uint64_t)a5, v34, 0);
    v49 = 0;
    v50 = 0;
    v105 = 0;
    v51 = *(llvm::ModuleSummaryIndex **)(a4 + 32);
    v52 = *(uint64_t (***)())(a4 + 16);
    v53 = (uint64_t (***)())(a4 + 24);
    v54 = a4 + 8;
    v55 = a4 + 40;
    v56 = *(_QWORD *)(a4 + 48);
    v57 = a4 + 56;
    v102 = (llvm::Module *)a4;
    v58 = *(_QWORD *)(a4 + 64);
    v129 = v51;
    v130 = v52;
    *(_QWORD *)&v131 = v56;
    *((_QWORD *)&v131 + 1) = v58;
    v132 = (uint64_t (***)())(a4 + 24);
    v133 = a4 + 8;
    v134 = a4 + 40;
    v135 = a4 + 56;
    while (v51 != (llvm::ModuleSummaryIndex *)v53
         || v52 != (uint64_t (**)())v54
         || v56 != v55
         || v58 != v57
         || v132 != v53
         || v133 != v54
         || v134 != v55
         || v135 != v57)
    {
      v59 = (llvm::GlobalValue *)sub_1C52C3168((uint64_t)&v129);
      v60 = sub_1C4EE9DE0(v59);
      v62 = *(_DWORD *)(a7 + 16);
      if (v62)
      {
        v63 = *(_QWORD *)a7;
        v64 = v62 - 1;
        v65 = (v62 - 1) & (37 * v60);
        v66 = *(_QWORD *)(*(_QWORD *)a7 + 16 * v65);
        if (v66 == v60)
        {
LABEL_72:
          v67 = *(_QWORD *)(v63 + 16 * v65 + 8);
          if (v67)
            v68 = *((_BYTE *)v48 + 128) == 0;
          else
            v68 = 1;
          if (!v68 && (*(_WORD *)(v67 + 12) & 0x80) == 0)
          {
            if (v49 >= v105)
            {
              v70 = v49 - v50;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61)
                abort();
              if (((char *)v105 - (char *)v50) >> 2 > v71)
                v71 = ((char *)v105 - (char *)v50) >> 2;
              if ((unint64_t)((char *)v105 - (char *)v50) >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              if (v72)
              {
                if (v72 >> 61)
                  sub_1C4764EE4();
                v73 = (char *)operator new(8 * v72);
              }
              else
              {
                v73 = 0;
              }
              v74 = (llvm::GlobalValue **)&v73[8 * v70];
              *v74 = v59;
              v69 = (uint64_t *)(v74 + 1);
              if (v49 != v50)
              {
                do
                {
                  v75 = (llvm::GlobalValue *)*--v49;
                  *--v74 = v75;
                }
                while (v49 != v50);
                v49 = v50;
              }
              v50 = (uint64_t *)v74;
              v105 = (uint64_t *)&v73[8 * v72];
              if (v49)
                operator delete(v49);
              v48 = v104;
            }
            else
            {
              *v49 = (uint64_t)v59;
              v69 = v49 + 1;
            }
            llvm::convertToDeclaration(v59, v61);
            v49 = v69;
          }
        }
        else
        {
          v76 = 1;
          while (v66 != -1)
          {
            v77 = v65 + v76++;
            v65 = v77 & v64;
            v66 = *(_QWORD *)(v63 + 16 * v65);
            if (v66 == v60)
              goto LABEL_72;
          }
        }
      }
      sub_1C52C300C((uint64_t)&v129);
      v51 = v129;
      v52 = v130;
      v58 = *((_QWORD *)&v131 + 1);
      v56 = v131;
    }
    if (v50 != v49)
    {
      v78 = v50;
      do
      {
        v79 = (llvm::GlobalValue *)*v78;
        llvm::Constant::removeDeadConstantUsers(*v78);
        if (!*((_QWORD *)v79 + 1))
          llvm::GlobalValue::eraseFromParent(v79);
        ++v78;
      }
      while (v78 != v49);
    }
    if (v50)
      operator delete(v50);
    llvm::thinLTOFinalizeInModule((uint64_t)v102, a7, 1);
    v80 = v101[123];
    if (v80
      && (LODWORD(v129) = v117,
          ((*(uint64_t (**)(uint64_t, llvm::ModuleSummaryIndex **, llvm::Module *))(*(_QWORD *)v80 + 48))(v80, &v129, v102) & 1) == 0))
    {
      v85 = v114;
      v114 = 0;
      if (!v85)
      {
        *v103 = 0;
        v109 = 0;
        goto LABEL_55;
      }
      v85[24] = 1;
      v88 = (llvm::raw_ostream *)*((_QWORD *)v85 + 17);
      v89 = (const char *)*((_QWORD *)v88 + 4);
      v90 = (const char *)*((_QWORD *)v88 + 2);
      if (v89 != v90)
      {
        *((_QWORD *)v88 + 4) = v90;
        llvm::raw_ostream::flush_tied_then_write(v88, v90, v89 - v90);
      }
      *v103 = 0;
      v109 = 0;
      v39 = &v109;
    }
    else
    {
      if (*(_DWORD *)(a7 + 8))
        llvm::thinLTOInternalizeModule(v102, a7);
      v81 = v101[127];
      if (!v81
        || (LODWORD(v129) = v117,
            ((*(uint64_t (**)(uint64_t, llvm::ModuleSummaryIndex **, llvm::Module *))(*(_QWORD *)v81 + 48))(v81, &v129, v102) & 1) != 0))
      {
        v120 = &off_1E817E948;
        *(_QWORD *)&v121 = &v116;
        *((_QWORD *)&v121 + 1) = v102;
        v122 = &v120;
        v132 = &v130;
        v129 = v104;
        v130 = &off_1E817E948;
        v131 = v121;
        LOBYTE(v133) = v99;
        llvm::FunctionImporter::importFunctions((uint64_t)&v129, (uint64_t)v102, v100, (uint64_t)&v118);
        if ((v119 & 1) != 0)
        {
          v82 = v118;
          *v103 = v118;
          if (v82)
            goto LABEL_139;
        }
        else
        {
          *v103 = 0;
        }
        v83 = v101[131];
        if (v83)
        {
          LODWORD(v118) = v117;
          v84 = (uint64_t)v114;
          if (((*(uint64_t (**)(uint64_t, uint64_t *, llvm::Module *))(*(_QWORD *)v83 + 48))(v83, &v118, v102) & 1) == 0)
          {
            v114 = 0;
            if (!v84)
            {
              *v103 = 0;
              v107 = 0;
              goto LABEL_139;
            }
            *(_BYTE *)(v84 + 24) = 1;
            v94 = *(llvm::raw_ostream **)(v84 + 136);
            v95 = (const char *)*((_QWORD *)v94 + 4);
            v96 = (const char *)*((_QWORD *)v94 + 2);
            if (v95 != v96)
            {
              *((_QWORD *)v94 + 4) = v96;
              llvm::raw_ostream::flush_tied_then_write(v94, v96, v95 - v96);
            }
            *v103 = 0;
            v107 = 0;
            v87 = &v107;
            v86 = (_BYTE *)v84;
LABEL_138:
            sub_1C49C7E54((uint64_t)v87, v86);
LABEL_139:
            v97 = v132;
            if (v132 == &v130)
            {
              v98 = 4;
              v97 = &v130;
            }
            else
            {
              if (!v132)
              {
LABEL_144:
                v38 = v114;
                v114 = 0;
                if (!v38)
                  goto LABEL_55;
                v39 = (uint64_t *)&v114;
                goto LABEL_54;
              }
              v98 = 5;
            }
            (*v97)[v98]();
            goto LABEL_144;
          }
        }
        else
        {
          v84 = (uint64_t)v114;
        }
        v114 = 0;
        v106 = (_BYTE *)v84;
        sub_1C58F5E88(v103, (uint64_t)v111, v102, (uint64_t)v115, (uint64_t *)&v106);
        v86 = v106;
        v106 = 0;
        if (!v86)
          goto LABEL_139;
        v87 = (uint64_t *)&v106;
        goto LABEL_138;
      }
      v85 = v114;
      if (!v114)
      {
        *v103 = 0;
        v108 = 0;
        goto LABEL_55;
      }
      v114[24] = 1;
      v91 = (llvm::raw_ostream *)*((_QWORD *)v85 + 17);
      v92 = (const char *)*((_QWORD *)v91 + 4);
      v93 = (const char *)*((_QWORD *)v91 + 2);
      if (v92 != v93)
      {
        *((_QWORD *)v91 + 4) = v93;
        llvm::raw_ostream::flush_tied_then_write(v91, v93, v92 - v93);
      }
      *v103 = 0;
      v108 = 0;
      v39 = &v108;
    }
    v38 = v85;
LABEL_54:
    sub_1C49C7E54((uint64_t)v39, v38);
    goto LABEL_55;
  }
  v114 = 0;
  v110 = (_BYTE *)v32;
  sub_1C58F5E88(a9, (uint64_t)v111, (_QWORD *)a4, (uint64_t)v115, (uint64_t *)&v110);
  v38 = v110;
  v110 = 0;
  if (v38)
  {
    v39 = (uint64_t *)&v110;
    goto LABEL_54;
  }
LABEL_55:
  sub_1C62B2694((uint64_t)&v125);
  if (v115)
    (*(void (**)(_DWORD *))(*(_QWORD *)v115 + 8))(v115);
  if ((v128 & 1) != 0 && v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
}

void sub_1C58F5E88(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;
  void (**v18)(void);
  llvm::raw_ostream *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((llvm::lto::opt(*(_QWORD *)a2, a4, **(unsigned int **)(a2 + 8), (uint64_t)a3) & 1) != 0)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD **)(a2 + 32);
    v12 = (_QWORD *)v11[3];
    if (v12)
    {
      if (v12 == v11)
      {
        v25 = v24;
        (*(void (**)(_QWORD *, _QWORD *))(*v11 + 24))(v11, v24);
      }
      else
      {
        v25 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v12 + 16))(v11[3]);
      }
    }
    else
    {
      v25 = 0;
    }
    sub_1C58F4F28(v10, a4, (uint64_t)v24, **(_DWORD **)(a2 + 8), a3, *(llvm **)(a2 + 16));
    if (v25 == v24)
    {
      v18 = (void (**)(void))(v24[0] + 32);
    }
    else
    {
      if (!v25)
        goto LABEL_16;
      v18 = (void (**)(void))(*v25 + 40);
    }
    (*v18)();
LABEL_16:
    v13 = *a5;
    *a5 = 0;
    if (v13)
    {
      *(_BYTE *)(v13 + 24) = 1;
      v19 = *(llvm::raw_ostream **)(v13 + 136);
      v20 = (const char *)*((_QWORD *)v19 + 4);
      v21 = (const char *)*((_QWORD *)v19 + 2);
      if (v20 != v21)
      {
        *((_QWORD *)v19 + 4) = v21;
        llvm::raw_ostream::flush_tied_then_write(v19, v21, v20 - v21);
      }
      *a1 = 0;
      v22 = 0;
      v17 = &v22;
LABEL_20:
      sub_1C49C7E54((uint64_t)v17, (_BYTE *)v13);
      return;
    }
    goto LABEL_21;
  }
  v13 = *a5;
  *a5 = 0;
  if (v13)
  {
    *(_BYTE *)(v13 + 24) = 1;
    v14 = *(llvm::raw_ostream **)(v13 + 136);
    v15 = (const char *)*((_QWORD *)v14 + 4);
    v16 = (const char *)*((_QWORD *)v14 + 2);
    if (v15 != v16)
    {
      *((_QWORD *)v14 + 4) = v16;
      llvm::raw_ostream::flush_tied_then_write(v14, v16, v15 - v16);
    }
    *a1 = 0;
    v23 = 0;
    v17 = &v23;
    goto LABEL_20;
  }
LABEL_21:
  *a1 = 0;
}

llvm::BitcodeModule *llvm::lto::findThinLTOModule(llvm::BitcodeModule *this, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (byte_1ED819128)
    v3 = a2 == 1;
  else
    v3 = 0;
  if (!v3)
  {
    if (a2)
    {
      v4 = a2 << 6;
      while (1)
      {
        llvm::BitcodeModule::getLTOInfo(this, (uint64_t)&v9);
        v5 = v10;
        v6 = (_BYTE)v9 == 0;
        if ((v10 & 1) != 0)
        {
          v7 = v9;
          v9 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        if (((v5 | v6) & 1) == 0)
          break;
        this = (llvm::BitcodeModule *)((char *)this + 64);
        v4 -= 64;
        if (!v4)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t llvm::lto::initImportList(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  size_t v11;
  char v12;
  BOOL v13;
  const void *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v21;

  if (!byte_1ED819128)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      v7 = (const void *)(a1 + 168);
      do
      {
        v8 = v4[7];
        v9 = v4[8];
        if (v8 != v9)
        {
          v21 = v4[4];
          do
          {
            v10 = *(unsigned __int8 **)(*(_QWORD *)v8 + 24);
            v11 = *(_QWORD *)(*(_QWORD *)v8 + 32);
            v12 = *(_BYTE *)(a1 + 191);
            v13 = v12 < 0;
            if (v12 >= 0)
              v14 = v7;
            else
              v14 = *(const void **)(a1 + 168);
            v15 = v12 & 0x7F;
            if (v13)
              v15 = *(_QWORD *)(a1 + 176);
            if (v11 != v15
              || v11 && memcmp(*(const void **)(*(_QWORD *)v8 + 24), v14, *(_QWORD *)(*(_QWORD *)v8 + 32)))
            {
              v16 = sub_1C6293494(a3, v10, v11);
              sub_1C55BE078(*v16 + 8, &v21, &v21);
            }
            v8 += 8;
          }
          while (v8 != v9);
        }
        v17 = (_QWORD *)v4[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v4[2];
            v19 = *v18 == (_QWORD)v4;
            v4 = v18;
          }
          while (!v19);
        }
        v4 = v18;
      }
      while (v18 != v3);
    }
  }
  return 1;
}

uint64_t sub_1C58F6240(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C58F6254(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E817E828;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_9;
  }
  if (v2)
  {
    v3 = 5;
LABEL_9:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_1C58F62D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E817E828;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_10:
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58F635C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = off_1E817E828;
  sub_1C58F6808((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1C58F639C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E817E828;
  return sub_1C58F6808((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_1C58F63B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  result = *(_QWORD **)(a1 + 32);
  if (result == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    result = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1C58F642C(void **__p)
{
  void **v2;
  uint64_t v3;

  if (*((char *)__p + 95) < 0)
    operator delete(__p[9]);
  if (*((char *)__p + 71) < 0)
    operator delete(__p[6]);
  v2 = (void **)__p[4];
  if (v2 == __p + 1)
  {
    v3 = 4;
    v2 = __p + 1;
    goto LABEL_9;
  }
  if (v2)
  {
    v3 = 5;
LABEL_9:
    (*((void (**)(void))*v2 + v3))();
  }
  operator delete(__p);
}

uint64_t sub_1C58F649C(const std::string *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  std::string::size_type size;
  uint64_t result;
  char v8;
  size_t v9;
  unint64_t v10;
  const void *v11;
  size_t v12;
  BOOL v13;
  std::string *v14;
  const void *v15;
  char *v16;
  BOOL v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  void **v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  __int16 v28;
  llvm *v29[2];
  std::error_code v30;
  void *v31[2];
  uint64_t v32;
  std::string __p;
  std::string v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  size = a1[1].__r_.__value_.__l.__size_;
  if (!size
    || (LODWORD(v34.__r_.__value_.__l.__data_) = *a2,
        result = (*(uint64_t (**)(std::string::size_type, std::string *, uint64_t))(*(_QWORD *)size + 48))(size, &v34, a3), (_DWORD)result))
  {
    memset(&__p, 0, sizeof(__p));
    v8 = *(_BYTE *)(a3 + 191);
    if (v8 >= 0)
      v9 = v8 & 0x7F;
    else
      v9 = *(_QWORD *)(a3 + 176);
    if (v9 == 9)
    {
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a3 + 191);
      else
        v10 = *(_QWORD *)(a3 + 176);
      if (v8 >= 0)
        v11 = (const void *)(a3 + 168);
      else
        v11 = *(const void **)(a3 + 168);
      if (v10 >= 9)
        v12 = 9;
      else
        v12 = v10;
      v13 = memcmp(v11, "ld-temp.o", v12) == 0;
      if (v10 != 9)
        v13 = 0;
      if (v13)
        goto LABEL_30;
    }
    if (!a1[1].__r_.__value_.__s.__data_[16])
    {
LABEL_30:
      std::string::operator=(&__p, a1 + 2);
      if ((_DWORD)v5 != -1)
      {
        if ((_DWORD)v5)
        {
          v16 = &v34.__r_.__value_.__s.__data_[21];
          do
          {
            *--v16 = (v5 % 0xA) | 0x30;
            v17 = v5 > 9;
            v5 /= 0xAuLL;
          }
          while (v17);
        }
        else
        {
          v16 = &v34.__r_.__value_.__s.__data_[20];
          v34.__r_.__value_.__s.__data_[20] = 48;
        }
        sub_1C4E61270(&v27, v16, &v34.__r_.__value_.__s.__data_[21], (char *)&v34.__r_.__value_.__r.__words[2] + 5 - v16);
        v18 = std::string::append(&v27, ".");
        v19 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v34;
        else
          v20 = (std::string *)v34.__r_.__value_.__r.__words[0];
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = *((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x7F;
        else
          v21 = v34.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v20, v21);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v14 = &v34;
      sub_1C484371C((uint64_t)&v34, v9 + 1);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if (v9)
      {
        if (*(char *)(a3 + 191) >= 0)
          v15 = (const void *)(a3 + 168);
        else
          v15 = *(const void **)(a3 + 168);
        memmove(v14, v15, v9);
      }
      *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v9) = 46;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v34;
    }
    sub_1C4842EB8((const void **)&__p.__r_.__value_.__l.__data_, (const void **)&a1[3].__r_.__value_.__l.__data_, (uint64_t)&v34);
    v22 = std::string::append(&v34, ".bc");
    v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)v31 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    v30.__val_ = 0;
    v30.__cat_ = std::system_category();
    if (v32 >= 0)
      v24 = v31;
    else
      v24 = (void **)v31[0];
    if (v32 >= 0)
      v25 = HIBYTE(v32) & 0x7F;
    else
      v25 = (uint64_t)v31[1];
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v34, v24, v25, (uint64_t)&v30, 0);
    if (v30.__val_)
    {
      sub_1C6239630(v29, (uint64_t *)v31);
      std::error_code::message(&v26, &v30);
      v28 = 260;
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
      sub_1C58F68D0(v29[0], (size_t)v29[1], (llvm::Twine *)&v27);
    }
    llvm::WriteBitcodeToFile((const llvm::Module *)a3, (llvm::raw_ostream *)&v34, 0, 0, 0, 0);
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v34);
    if (SHIBYTE(v32) < 0)
      operator delete(v31[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 1;
  }
  return result;
}

uint64_t sub_1C58F6808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = (_BYTE *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1C47EBC30(v5, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)v5 = v6;
  }
  v7 = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_1C47EBC30(v7, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

void sub_1C58F68D0(llvm *a1, size_t a2, llvm::Twine *a3)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm *v11;
  llvm::raw_ostream *v12;

  v6 = (llvm::raw_ostream *)llvm::errs(a1);
  v7 = sub_1C4816AD8(v6, "failed to open ");
  v8 = sub_1C6245B98(v7, a1, a2);
  v9 = sub_1C4816AD8(v8, ": ");
  v10 = sub_1C62B2BFC(v9, a3);
  v11 = sub_1C61ABDB8(v10, 10);
  v12 = (llvm::raw_ostream *)llvm::errs(v11);
  sub_1C58F48A8(v12);
  exit(1);
}

char *sub_1C58F6934(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t *a5, int a6, int a7, char a8)
{
  __int128 v15;
  _BYTE *v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }
  v16 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v16, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v16 = v17;
  }
  v18 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1C47EBC30(v18, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v19 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v18 = v19;
  }
  *((_DWORD *)__dst + 18) = a6;
  *((_DWORD *)__dst + 19) = a7;
  if (a6 == 3)
    v20 = 1;
  else
    v20 = a8;
  __dst[80] = v20;
  __dst[81] = 0;
  v21 = *a5;
  *((_QWORD *)__dst + 11) = *a5;
  if (v21)
  {
    v22 = (unsigned int *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  return __dst;
}

uint64_t sub_1C58F6A34(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 96))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    v5 = (void **)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      operator delete(*v5);
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
    *((_BYTE *)a2 + 47) = 0;
    *((_BYTE *)a2 + 24) = 0;
    v7 = (void **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*v7);
    v8 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a2 + 71) = 0;
    *((_BYTE *)a2 + 48) = 0;
    v9 = *((_QWORD *)a2 + 9);
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(_QWORD *)(a1 + 72) = v9;
    v10 = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 11) = 0;
    v11 = *(unsigned int **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v10;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v15 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v15;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v16 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v16;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v17 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v17;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v18 = *((_QWORD *)a2 + 9);
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(_QWORD *)(a1 + 72) = v18;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 11) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return a1;
}

uint64_t sub_1C58F6BA8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 88);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_1C58F6C24(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1C47EBC30(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  v7 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_1C47EBC30(v7, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v8 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v7 = v8;
  }
  v9 = *((_QWORD *)a2 + 9);
  *((_WORD *)__dst + 40) = *((_WORD *)a2 + 40);
  *((_QWORD *)__dst + 9) = v9;
  v10 = *((_QWORD *)a2 + 11);
  *((_QWORD *)__dst + 11) = v10;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return __dst;
}

void sub_1C58F6CF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _BYTE v6[56];
  _QWORD v7[7];

  llvm::AAManager::run(a1 + 8, a2, a3, (uint64_t)v6);
  v5 = (_QWORD *)operator new();
  llvm::AAResults::AAResults(v7, (uint64_t)v6);
  *v5 = &unk_1E817E9C0;
  llvm::AAResults::AAResults(v5 + 1, (uint64_t)v7);
  llvm::AAResults::~AAResults((llvm::AAResults *)v7);
  *a4 = v5;
  llvm::AAResults::~AAResults((llvm::AAResults *)v6);
}

void sub_1C58F6D80(_QWORD *a1)
{
  *a1 = &unk_1E817E9C0;
  llvm::AAResults::~AAResults((llvm::AAResults *)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C58F6DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::AAResults::invalidate(a1 + 8, a2, a3, a4);
}

char *sub_1C58F6DCC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AAManager]";
  v10[1] = 65;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x41)
    v1 = 65;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_17[v1];
  v3 = 65 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C58F6E84()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::VerifierPass]";
  v10[1] = 68;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44)
    v1 = 68;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_18[v1];
  v3 = 68 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char **sub_1C58F6F3C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  sub_1C58F7164((uint64_t)(a1 + 162));
  v2 = a1[144];
  v3 = *((unsigned int *)a1 + 290);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = v2 - 32;
    do
    {
      sub_1C5052E10(&v5[v4]);
      v4 -= 32;
    }
    while (v4);
    v2 = a1[144];
  }
  if (v2 != (char *)(a1 + 146))
    free(v2);
  v6 = a1[126];
  v7 = *((unsigned int *)a1 + 254);
  if ((_DWORD)v7)
  {
    v8 = 32 * v7;
    v9 = v6 - 32;
    do
    {
      sub_1C5052E10(&v9[v8]);
      v8 -= 32;
    }
    while (v8);
    v6 = a1[126];
  }
  if (v6 != (char *)(a1 + 128))
    free(v6);
  v10 = a1[108];
  v11 = *((unsigned int *)a1 + 218);
  if ((_DWORD)v11)
  {
    v12 = 32 * v11;
    v13 = v10 - 32;
    do
    {
      sub_1C5052E10(&v13[v12]);
      v12 -= 32;
    }
    while (v12);
    v10 = a1[108];
  }
  if (v10 != (char *)(a1 + 110))
    free(v10);
  v14 = a1[90];
  v15 = *((unsigned int *)a1 + 182);
  if ((_DWORD)v15)
  {
    v16 = 32 * v15;
    v17 = v14 - 32;
    do
    {
      sub_1C5052E10(&v17[v16]);
      v16 -= 32;
    }
    while (v16);
    v14 = a1[90];
  }
  if (v14 != (char *)(a1 + 92))
    free(v14);
  v18 = a1[72];
  v19 = *((unsigned int *)a1 + 146);
  if ((_DWORD)v19)
  {
    v20 = 32 * v19;
    v21 = v18 - 32;
    do
    {
      sub_1C5052E10(&v21[v20]);
      v20 -= 32;
    }
    while (v20);
    v18 = a1[72];
  }
  if (v18 != (char *)(a1 + 74))
    free(v18);
  v22 = a1[54];
  v23 = *((unsigned int *)a1 + 110);
  if ((_DWORD)v23)
  {
    v24 = 32 * v23;
    v25 = v22 - 32;
    do
    {
      sub_1C5052E10(&v25[v24]);
      v24 -= 32;
    }
    while (v24);
    v22 = a1[54];
  }
  if (v22 != (char *)(a1 + 56))
    free(v22);
  v26 = a1[36];
  v27 = *((unsigned int *)a1 + 74);
  if ((_DWORD)v27)
  {
    v28 = 32 * v27;
    v29 = v26 - 32;
    do
    {
      sub_1C5052E10(&v29[v28]);
      v28 -= 32;
    }
    while (v28);
    v26 = a1[36];
  }
  if (v26 != (char *)(a1 + 38))
    free(v26);
  v30 = a1[18];
  v31 = *((unsigned int *)a1 + 38);
  if ((_DWORD)v31)
  {
    v32 = 32 * v31;
    v33 = v30 - 32;
    do
    {
      sub_1C5052E10(&v33[v32]);
      v32 -= 32;
    }
    while (v32);
    v30 = a1[18];
  }
  if (v30 != (char *)(a1 + 20))
    free(v30);
  v34 = *a1;
  v35 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v35)
  {
    v36 = 32 * v35;
    v37 = v34 - 32;
    do
    {
      sub_1C5052E10(&v37[v36]);
      v36 -= 32;
    }
    while (v36);
    v34 = *a1;
  }
  if (v34 != (char *)(a1 + 2))
    free(v34);
  return a1;
}

uint64_t sub_1C58F7164(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C58F71E8(uint64_t a1, const llvm::Module **a2)
{
  const llvm::Module *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  __int128 v7;
  BOOL v8;
  char *v9;
  __int128 v10;
  _QWORD *v11;
  void (**v12)(_QWORD *);
  std::shared_future<void> v14;
  uint64_t (**v15)();
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD v38[4];
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v25 = 0;
  v26 = 0;
  v24 = &v27;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v15 = &off_1E81A7280;
  v23 = &v24;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  llvm::WriteBitcodeToFile(v3, (llvm::raw_ostream *)&v15, 0, 0, 0, 0);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD **)(a1 + 40);
  v6 = (*v5)++;
  v7 = *(_OWORD *)(a1 + 24);
  v27 = *(_OWORD *)(a1 + 8);
  v28 = v7;
  v30 = 0;
  v31 = 0;
  v29 = &v32;
  if (!v25)
  {
    v32 = v6;
    v33 = v27;
    v34 = v28;
    v36 = 0;
    v37 = 0;
    v35 = v38;
LABEL_4:
    v8 = 1;
    goto LABEL_6;
  }
  sub_1C4FE6ED8((uint64_t)&v29, (uint64_t)&v24);
  v32 = v6;
  v33 = v27;
  v34 = v28;
  v36 = 0;
  v37 = 0;
  v35 = v38;
  if (!v30)
    goto LABEL_4;
  sub_1C4FE6ED8((uint64_t)&v35, (uint64_t)&v29);
  v6 = v32;
  v8 = v36 == 0;
LABEL_6:
  v38[0] = v6;
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &off_1E817E870;
  v10 = v34;
  *(_OWORD *)(v9 + 8) = v33;
  *(_OWORD *)(v9 + 24) = v10;
  *((_QWORD *)v9 + 5) = v9 + 64;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = 0;
  if (!v8)
  {
    sub_1C4FE6ED8((uint64_t)(v9 + 40), (uint64_t)&v35);
    v6 = v38[0];
  }
  *((_DWORD *)v9 + 16) = v6;
  v40 = v9;
  sub_1C6208584(v4, v39, 0, (std::future<void> *)&v14);
  v11 = v40;
  if (v40 == v39)
  {
    v12 = (void (**)(_QWORD *))(v39[0] + 32);
    v11 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_13;
    v12 = (void (**)(_QWORD *))(*v40 + 40);
  }
  (*v12)(v11);
LABEL_13:
  if (v35 != v38)
    free(v35);
  if (v29 != &v32)
    free(v29);
  std::shared_future<void>::~shared_future(&v14);
  v15 = (uint64_t (**)())off_1E81A6E70;
  if (v22 == 1 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
  if (v24 != &v27)
    free(v24);
  llvm::Module::~Module(v3);
  return MEMORY[0x1CAA32FC0]();
}

_QWORD *sub_1C58F7490(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817E870;
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

void sub_1C58F74D0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817E870;
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C58F7520(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E817E870;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 5) = v2 + 64;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = 0;
  if (*(_QWORD *)(a1 + 48))
    sub_1C50502AC((uint64_t)(v2 + 40), a1 + 40);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  return v2;
}

uint64_t sub_1C58F758C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v2 = result;
  *a2 = &off_1E817E870;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(result + 8);
  v5 = *(_OWORD *)(result + 24);
  a2[5] = a2 + 8;
  v6 = (uint64_t)(a2 + 5);
  *(_OWORD *)(v6 - 32) = v4;
  *(_OWORD *)(v6 - 16) = v5;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(_QWORD *)(result + 48))
    result = sub_1C50502AC(v6, result + 40);
  *v3 = *(_DWORD *)(v2 + 64);
  return result;
}

void sub_1C58F75EC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2 != (void *)(a1 + 64))
    free(v2);
}

void sub_1C58F7608(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[5];
  if (v2 != __p + 8)
    free(v2);
  operator delete(__p);
}

void sub_1C58F763C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  llvm::Module *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void (**v9)(void);
  llvm::Value *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  const char *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  llvm::Module *v19;
  char v20;
  llvm::LLVMContextImpl *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 64);
  sub_1C58ED700((llvm::LLVMContext *)&v21, *(_QWORD *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v14 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)&v14 + 1) = v3;
  v15 = "ld-temp.o";
  v16 = 9;
  llvm::parseBitcodeFile(&v14, (uint64_t)&v21, (uint64_t)sub_1C58F782C, (uint64_t)v17, (uint64_t)&v19);
  if ((v20 & 1) != 0)
    llvm::report_fatal_error((llvm *)"Failed to read bitcode", (const char *)1);
  v4 = v19;
  v19 = 0;
  sub_1C58F4CEC(&v13, *(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), (uint64_t)v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v13;
  v7 = *(_QWORD **)(a1 + 24);
  v8 = (_QWORD *)v7[3];
  if (v8)
  {
    if (v8 == v7)
    {
      v18 = v17;
      (*(void (**)(_QWORD *, _QWORD *))(*v7 + 24))(v7, v17);
    }
    else
    {
      v18 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v8 + 16))(v7[3]);
    }
  }
  else
  {
    v18 = 0;
  }
  sub_1C58F4F28(v5, v6, (uint64_t)v17, v2, v4, *(llvm **)(a1 + 32));
  if (v18 == v17)
  {
    v9 = (void (**)(void))(v17[0] + 32);
  }
  else
  {
    if (!v18)
      goto LABEL_12;
    v9 = (void (**)(void))(*v18 + 40);
  }
  (*v9)();
LABEL_12:
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  llvm::Module::~Module(v4);
  MEMORY[0x1CAA32FC0]();
  sub_1C4FF9CA4((uint64_t)&v19);
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
    goto LABEL_18;
  }
  if (v23)
  {
    v12 = 5;
LABEL_18:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  llvm::LLVMContext::~LLVMContext(&v21, v10);
}

void sub_1C58F782C(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

__n128 sub_1C58F7838(int **a1, uint64_t *a2, __n128 *a3)
{
  int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED819168, "lto-embed-bitcode", 0x11uLL);
  v6 = *a1;
  dword_1ED8191E8 = **a1;
  byte_1ED8191FC = 1;
  dword_1ED8191F8 = *v6;
  v7 = *((_DWORD *)a2 + 2);
  if (v7)
  {
    v8 = *a2;
    v9 = v8 + 40 * v7;
    do
    {
      sub_1C62B3494(*(unsigned __int8 **)v8, *(_QWORD *)(v8 + 8), *(_DWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32));
      v8 += 40;
    }
    while (v8 != v9);
  }
  result = *a3;
  xmmword_1ED819188 = (__int128)*a3;
  return result;
}

unint64_t sub_1C58F78DC(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED819218 >= HIDWORD(qword_1ED819218))
  {
    v3 = qword_1ED819218 + 1;
    if (qword_1ED819210 <= a1 && qword_1ED819210 + 48 * (unint64_t)qword_1ED819218 > a1)
    {
      v5 = a1 - qword_1ED819210;
      sub_1C62B3548(v3);
      return qword_1ED819210 + v5;
    }
    else
    {
      sub_1C62B3548(v3);
    }
  }
  return a1;
}

uint64_t sub_1C58F7950(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E817E900;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C58F798C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E817E900;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58F79D8(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1E817E900;
  v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1C47EBC30(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

char *sub_1C58F7A38(char *result, _QWORD *a2)
{
  _QWORD *v2;
  __int128 v3;

  *a2 = off_1E817E900;
  v2 = a2 + 1;
  if (result[31] < 0)
    return (char *)sub_1C47EBC30(v2, *((void **)result + 1), *((_QWORD *)result + 2));
  v3 = *(_OWORD *)(result + 8);
  v2[2] = *((_QWORD *)result + 3);
  *(_OWORD *)v2 = v3;
  return result;
}

void sub_1C58F7A74(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_1C58F7A88(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

uint64_t sub_1C58F7AB8(uint64_t a1, llvm::ModuleSummaryIndex *a2, uint64_t a3)
{
  const void *v6;
  char v7;
  int v8;
  size_t v9;
  size_t v10;
  __int128 *v11;
  const void *v12;
  __int128 *v13;
  uint64_t v14;
  char v15;
  int v16;
  size_t v17;
  size_t v18;
  __int128 *v19;
  const void *v20;
  __int128 *v21;
  uint64_t v22;
  std::string v24;
  std::string v25;
  __int16 v26;
  llvm *v27[2];
  __int128 v28;
  int64_t v29;
  __int16 v30;
  _BYTE v31[96];
  std::error_code v32;
  __int128 v33;
  uint64_t v34;

  v6 = (const void *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 31);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(a1 + 16);
  sub_1C484371C((uint64_t)&v33, v10 + 8);
  if (v34 >= 0)
    v11 = &v33;
  else
    v11 = (__int128 *)v33;
  if (v10)
  {
    if (*(char *)(a1 + 31) >= 0)
      v12 = v6;
    else
      v12 = *(const void **)(a1 + 8);
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "index.bc");
  v32.__val_ = 0;
  v32.__cat_ = std::system_category();
  if (v34 >= 0)
    v13 = &v33;
  else
    v13 = (__int128 *)v33;
  if (v34 >= 0)
    v14 = HIBYTE(v34) & 0x7F;
  else
    v14 = *((_QWORD *)&v33 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v31, v13, v14, (uint64_t)&v32, 0);
  if (v32.__val_)
  {
    sub_1C6239630(&v24, (uint64_t *)&v33);
    std::error_code::message(&v25, &v32);
    v30 = 260;
    *(_QWORD *)&v28 = &v25;
    sub_1C58F68D0((llvm *)v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_, (llvm::Twine *)&v28);
  }
  llvm::writeIndexToFile(a2, (llvm::raw_ostream *)v31, 0);
  v15 = *(_BYTE *)(a1 + 31);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 16);
  v19 = &v28;
  sub_1C484371C((uint64_t)&v28, v18 + 9);
  if (v29 < 0)
    v19 = (__int128 *)v28;
  if (v18)
  {
    if (*(char *)(a1 + 31) >= 0)
      v20 = v6;
    else
      v20 = *(const void **)(a1 + 8);
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "index.dot");
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  v34 = v29;
  v33 = v28;
  if (v29 >= 0)
    v21 = &v33;
  else
    v21 = (__int128 *)v33;
  if (v29 >= 0)
    v22 = HIBYTE(v29) & 0x7F;
  else
    v22 = *((_QWORD *)&v33 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v28, v21, v22, (uint64_t)&v32, 0);
  if (v32.__val_)
  {
    sub_1C6239630(v27, (uint64_t *)&v33);
    std::error_code::message(&v24, &v32);
    v26 = 260;
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    sub_1C58F68D0(v27[0], (size_t)v27[1], (llvm::Twine *)&v25);
  }
  llvm::ModuleSummaryIndex::exportToDot((uint64_t)a2, (llvm::raw_ostream *)&v28, a3);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v28);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v31);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  return 1;
}

void sub_1C58F7D38()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C58F7D4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817E948;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C58F7D84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817E948;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C58F7DA4(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  std::string __p;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  std::string *p_p;
  std::string *v33;
  __int16 v34;
  const void *v35[2];
  __int128 v36;
  const char *v37;
  __int16 v38;
  char v39;
  _QWORD v40[2];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v5 = a2[1];
  v35[0] = *a2;
  v35[1] = v5;
  v7 = **(_QWORD **)(a1 + 8);
  if (v7)
  {
    v11 = sub_1C62B3614(v7, v35);
    llvm::BitcodeModule::getModuleImpl((__int128 *)(v11 + 16), **(_QWORD **)(a1 + 16), 0, 1, 1, (uint64_t)sub_1C5017E80, (uint64_t)&v36, a3);
    return;
  }
  v38 = 261;
  *(_QWORD *)&v36 = v6;
  *((_QWORD *)&v36 + 1) = v5;
  sub_1C5E1F6CC((unsigned __int8 *)&v36, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v40);
  if ((v41 & 1) != 0)
  {
    v31[0] = "Error loading imported file ";
    p_p = v6;
    v33 = v5;
    v34 = 1283;
    *(_QWORD *)&v36 = v31;
    v37 = " : ";
    v38 = 770;
    v8 = v40[0];
    v9 = v40[1];
    v10 = operator new();
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v36, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = v8;
    *(_QWORD *)(v10 + 40) = v9;
    *(_BYTE *)(v10 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  v12 = v40[0];
  v13 = *(_QWORD *)v40[0];
  v14 = *(_QWORD *)(v40[0] + 16) - *(_QWORD *)(v40[0] + 8);
  *(_QWORD *)&v28 = *(_QWORD *)(v40[0] + 8);
  *((_QWORD *)&v28 + 1) = v14;
  v29 = (*(uint64_t (**)(_QWORD))(v13 + 16))(v40[0]);
  v30 = v15;
  llvm::lto::findThinLTOModule(&v28, (uint64_t)&v36);
  if ((v39 & 1) != 0)
  {
    v24[0] = "Error loading imported file ";
    v24[2] = v6;
    v24[3] = v5;
    v25 = 1283;
    v26[0] = v24;
    v26[2] = " : ";
    v27 = 770;
    v18 = (char *)v36;
    *(_QWORD *)&v36 = 0;
    v22 = v18;
    sub_1C61D2548(&v22, &__p);
    v31[0] = v26;
    p_p = &__p;
    v34 = 1026;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v20 = qword_1ED836B58[0];
    v21 = operator new();
    *(_QWORD *)v21 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v31, (_QWORD *)(v21 + 8));
    *(_QWORD *)(v21 + 32) = 3;
    *(_QWORD *)(v21 + 40) = v20;
    *(_BYTE *)(v21 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v21;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v22)
      (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
    if ((v39 & 1) == 0)
      goto LABEL_12;
    v17 = v36;
    if (!(_QWORD)v36)
      goto LABEL_12;
    goto LABEL_11;
  }
  llvm::BitcodeModule::getModuleImpl(&v36, **(_QWORD **)(a1 + 16), 0, 1, 1, (uint64_t)sub_1C5017E80, (uint64_t)v31, a3);
  if ((*(_BYTE *)(a3 + 8) & 1) == 0)
  {
    v16 = *(_QWORD *)a3;
    v40[0] = 0;
    v17 = *(_QWORD *)(v16 + 152);
    *(_QWORD *)(v16 + 152) = v12;
    if (v17)
LABEL_11:
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
LABEL_12:
  if ((v41 & 1) == 0)
  {
    if (v40[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v40[0] + 8))(v40[0]);
  }
}

void sub_1C58F80F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v4 = operator new();
  v7 = "Could not find module summary";
  v8 = 259;
  v6 = *a2;
  v5 = a2[1];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v7, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

uint64_t sub_1C58F8188()
{
  __n128 v1;
  int v2;
  int *v3;
  __int128 v4;
  _QWORD v5[2];
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v4 = v5;
  v5[0] = "none";
  v5[1] = 4;
  v6 = 0;
  v7 = "Do not embed";
  v8 = 12;
  v9 = "optimized";
  v10 = 9;
  v11 = 1;
  v12 = "Embed after all optimization passes";
  v13 = 35;
  v14 = "post-merge-pre-opt";
  v15 = 18;
  v16 = 2;
  v17 = "Embed post merge, but before optimizations";
  v18 = 42;
  *((_QWORD *)&v4 + 1) = 0x400000003;
  v1.n128_u64[0] = (unint64_t)"Embed LLVM bitcode in object files produced by LTO";
  v1.n128_u64[1] = 50;
  sub_1C62B3394(&v3, (uint64_t *)&v4, &v1);
  if ((_QWORD *)v4 != v5)
    free((void *)v4);
  __cxa_atexit((void (*)(void *))sub_1C62B27A0, qword_1ED819168, &dword_1C475E000);
  LOBYTE(v3) = 0;
  v1.n128_u64[0] = (unint64_t)&v3;
  *(_QWORD *)&v4 = "Assume the input has already undergone ThinLTO function importing and the other pre-optimization pipeline changes.";
  *((_QWORD *)&v4 + 1) = 114;
  sub_1C617586C((uint64_t)&unk_1ED8190A8, "thinlto-assume-merged", &v1, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8190A8, &dword_1C475E000);
}

uint64_t llvm::LTOModule::LTOModule(uint64_t a1, llvm::Module **a2, __int128 *a3, uint64_t a4)
{
  llvm::Module *v5;
  __int128 v6;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *a3;
  *(_OWORD *)(a1 + 56) = a3[1];
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a4;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_DWORD *)(a1 + 276) = 8;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0x2800000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  llvm::ModuleSymbolTable::addModule((llvm::ModuleSymbolTable *)(a1 + 72), v5);
  return a1;
}

void llvm::LTOModule::~LTOModule(llvm::LTOModule *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  void *v11;
  llvm::Value *v12;
  llvm::Module *v13;
  llvm::LLVMContextImpl **v14;

  v2 = (void *)*((_QWORD *)this + 43);
  if (v2)
  {
    *((_QWORD *)this + 44) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 40);
  if (v3)
  {
    *((_QWORD *)this + 41) = v3;
    operator delete(v3);
  }
  if (*((_DWORD *)this + 75))
  {
    v4 = *((unsigned int *)this + 74);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD *)(*((_QWORD *)this + 36) + v5);
        if (v7 != -8 && v7 != 0)
          MEMORY[0x1CAA32FB4]();
        v5 += 8;
      }
      while (v6 != v5);
    }
  }
  free(*((void **)this + 36));
  sub_1C4F02264((uint64_t)this + 256);
  v9 = (void *)*((_QWORD *)this + 29);
  if (v9)
  {
    *((_QWORD *)this + 30) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 25), 8);
  v11 = (void *)*((_QWORD *)this + 22);
  if (v11)
  {
    *((_QWORD *)this + 23) = v11;
    operator delete(v11);
  }
  sub_1C58EDC0C((uint64_t)this + 80);
  sub_1C4926AE8((uint64_t)this + 80);
  v13 = (llvm::Module *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    llvm::Module::~Module(v13);
    MEMORY[0x1CAA32FC0]();
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  v14 = *(llvm::LLVMContextImpl ***)this;
  *(_QWORD *)this = 0;
  if (v14)
  {
    llvm::LLVMContext::~LLVMContext(v14, v12);
    MEMORY[0x1CAA32FC0]();
  }
}

uint64_t llvm::LTOModule::isBitcodeFile(llvm::LTOModule *this, const void *a2)
{
  _QWORD v3[4];
  char *v4;
  char *v5;
  char *v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3[0] = this;
  v3[1] = a2;
  v3[2] = "<mem>";
  v3[3] = 5;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v3, (uint64_t)&v6);
  if ((v7 & 1) == 0 || !v6)
    return 1;
  v4 = v6;
  sub_1C4D62BD4(&v4, &v5);
  if (v4)
    (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  return 0;
}

uint64_t llvm::LTOModule::isBitcodeFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  char *v10;
  char *v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = 261;
  v12[0] = a1;
  v12[1] = a2;
  sub_1C5E1F6CC((unsigned __int8 *)v12, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v14);
  v2 = 0;
  if ((v15 & 1) == 0)
  {
    v4 = v14;
    v5 = v14[1];
    v6 = v14[2] - v5;
    v7 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    v9[0] = v5;
    v9[1] = v6;
    v9[2] = v7;
    v9[3] = v8;
    llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v9, (uint64_t)v12);
    if ((v13 & 1) != 0 && v12[0])
    {
      v10 = (char *)v12[0];
      sub_1C4D62BD4(&v10, &v11);
      if (v10)
        (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
      v2 = 0;
    }
    else
    {
      v2 = 1;
    }
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return v2;
}

BOOL llvm::LTOModule::isThinLTO(llvm::LTOModule *this)
{
  __int128 v1;
  llvm *v2;
  _BOOL8 result;
  llvm::raw_ostream *v4;
  _WORD v5[20];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_OWORD *)((char *)this + 56);
  v7[0] = *(_OWORD *)((char *)this + 40);
  v7[1] = v1;
  llvm::getBitcodeLTOInfo(v7, (uint64_t)&v8);
  if ((v9 & 1) == 0)
    return (_BYTE)v8 != 0;
  v6 = v8;
  v4 = (llvm::raw_ostream *)llvm::errs(v2);
  v5[16] = 257;
  llvm::logAllUnhandledErrors(&v6, v4, (uint64_t)v5);
  result = v6;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  return result;
}

BOOL llvm::LTOModule::isBitcodeForTarget(_QWORD *a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char *v10;
  llvm::Value *v11;
  void *v12;
  int v13;
  char *v14;
  char **v15;
  char *v16;
  _BOOL8 v17;
  _OWORD v19[2];
  _QWORD v20[4];
  char *v21;
  void *__p[2];
  char v23;
  char v24;
  char *v25[2];
  char v26;
  char v27;
  _OWORD v28[2];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = a1[2] - v5;
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v20[0] = v5;
  v20[1] = v6;
  v20[2] = v7;
  v20[3] = v8;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v20, (uint64_t)v28);
  v9 = v29;
  if ((v29 & 1) == 0 || (v10 = *(char **)&v28[0], *(_QWORD *)&v28[0] = 0, !v10))
  {
    llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v21);
    v19[0] = v28[0];
    v19[1] = v28[1];
    llvm::getBitcodeTargetTriple((uint64_t)v19, (uint64_t)__p);
    sub_1C58F8948((char *)v25, (uint64_t)&v21, (uint64_t)__p);
    if ((v24 & 1) != 0)
    {
      v12 = __p[0];
      __p[0] = 0;
      if (v12)
        (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
    }
    else if (v23 < 0)
    {
      operator delete(__p[0]);
    }
    if ((v27 & 1) != 0)
    {
      v17 = 0;
    }
    else
    {
      v13 = v26;
      v14 = v25[0];
      if (v26 >= 0)
        v15 = v25;
      else
        v15 = (char **)v25[0];
      v16 = (char *)(v26 & 0x7F);
      if (v26 < 0)
        v16 = v25[1];
      if ((unint64_t)v16 >= a3)
      {
        if (!a3)
        {
          v17 = 1;
          if ((v26 & 0x80000000) == 0)
            goto LABEL_21;
          goto LABEL_20;
        }
        v17 = memcmp(v15, a2, a3) == 0;
        if (v13 < 0)
LABEL_20:
          operator delete(v14);
      }
      else
      {
        v17 = 0;
        if (v26 < 0)
          goto LABEL_20;
      }
    }
LABEL_21:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)&v21, v11);
    if ((v9 & 1) != 0 && *(_QWORD *)&v28[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v28[0] + 8))(*(_QWORD *)&v28[0]);
    return v17;
  }
  v21 = v10;
  sub_1C4D62BD4(&v21, v25);
  if (v21)
    (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
  return 0;
}

char *sub_1C58F8948(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v3 = result;
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
  {
    v4 = *(char **)a3;
    *(_QWORD *)a3 = 0;
    v7 = v4;
    v5 = llvm::errorToErrorCodeAndEmitErrors(a2, &v7);
    v3[24] |= 1u;
    *(_QWORD *)v3 = v5;
    *((_QWORD *)v3 + 1) = v6;
    result = v7;
    if (v7)
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    result[24] &= ~1u;
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)result + 2) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

void llvm::LTOModule::getProducerString(llvm::LTOModule *this@<X0>, llvm::MemoryBuffer *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  llvm::Value *v10;
  void *v11;
  void *v12;
  _OWORD v13[2];
  _QWORD v14[4];
  char *v15;
  void *__p[2];
  char v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  _OWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2) - v4;
  v6 = (*(uint64_t (**)(llvm::LTOModule *, llvm::MemoryBuffer *))(*(_QWORD *)this + 16))(this, a2);
  v14[0] = v4;
  v14[1] = v5;
  v14[2] = v6;
  v14[3] = v7;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v14, (uint64_t)v22);
  v8 = v23;
  if ((v23 & 1) != 0 && (v9 = *(char **)&v22[0], *(_QWORD *)&v22[0] = 0, v9))
  {
    v15 = v9;
    sub_1C4D62BD4(&v15, (char **)&v19);
    if (v15)
      (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v15);
    v13[0] = v22[0];
    v13[1] = v22[1];
    llvm::getBitcodeProducerString((uint64_t)v13, (uint64_t)__p);
    sub_1C58F8948((char *)&v19, (uint64_t)&v15, (uint64_t)__p);
    if ((v18 & 1) != 0)
    {
      v11 = __p[0];
      __p[0] = 0;
      if (v11)
        (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
    }
    else if (v17 < 0)
    {
      operator delete(__p[0]);
    }
    if ((v21 & 1) != 0)
    {
      *(_BYTE *)(a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
    }
    else if (SHIBYTE(v20) < 0)
    {
      v12 = (void *)v19;
      sub_1C47EBC30((_BYTE *)a3, (void *)v19, *((unint64_t *)&v19 + 1));
      operator delete(v12);
    }
    else
    {
      *(_OWORD *)a3 = v19;
      *(_QWORD *)(a3 + 16) = v20;
    }
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)&v15, v10);
    if ((v8 & 1) != 0)
    {
      if (*(_QWORD *)&v22[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&v22[0] + 8))(*(_QWORD *)&v22[0]);
    }
  }
}

void llvm::LTOModule::createFromFile(const std::error_category *a1@<X0>, uint64_t (**a2)(llvm::DiagnosticInfo *__hidden this)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  std::string v14;
  std::string *v15;
  __int16 v16;
  std::error_code v17;
  uint64_t (**v18)(llvm::DiagnosticInfo *__hidden);
  uint64_t v19;
  uint64_t v20;
  std::string **v21;
  uint64_t v22;
  std::error_code v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  LOWORD(v22) = 261;
  v18 = a2;
  v19 = a3;
  sub_1C5E1F6CC((unsigned __int8 *)&v18, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v23);
  if ((v24 & 1) == 0)
  {
    std::system_category();
    v8 = *(_QWORD **)&v23.__val_;
LABEL_7:
    v9 = v8[1];
    v10 = v8[2] - v9;
    v11 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    v13[0] = v9;
    v13[1] = v10;
    v13[2] = v11;
    v13[3] = v12;
    llvm::LTOModule::makeLTOModule((uint64_t)v13, a4, a1, 0, a5);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    return;
  }
  v8 = *(_QWORD **)&v23.__val_;
  v17 = v23;
  if (!v23.__val_)
    goto LABEL_7;
  std::error_code::message(&v14, &v17);
  v16 = 260;
  v15 = &v14;
  LODWORD(v19) = 0;
  BYTE4(v19) = 0;
  v18 = &off_1E814E960;
  v20 = 0;
  v21 = &v15;
  v22 = 0;
  llvm::LLVMContext::diagnose((uint64_t)a1, (const llvm::DiagnosticInfo *)&v18);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(std::error_code *)a5 = v17;
}

void llvm::LTOModule::makeLTOModule(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::error_category *a3@<X2>, const std::error_category *cat@<X3>, uint64_t a5@<X8>)
{
  __int128 v10;
  char v11;
  void *v12;
  const std::error_category *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  const std::error_category *v17;
  std::error_code *v18;
  void (**v19)(std::error_code *);
  std::error_code *v20;
  void (**v21)(std::error_code *);
  char *v22;
  const std::error_category *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v27;
  uint64_t v28;
  char v29;
  const std::error_category *v30;
  std::error_code *v31;
  const char *v32;
  __int128 *v33;
  uint64_t v34;
  BOOL v35;
  std::error_code *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  _BYTE v45[32];
  int64x2_t v46;
  __int128 v47;
  char *v48;
  void *v49[2];
  uint64_t v50;
  __int128 *p_dst;
  uint64_t v52;
  void *__p;
  char v54;
  char v55;
  std::error_code v56;
  __int128 v57;
  __int128 __dst;
  uint64_t v59;
  char v60;
  __int16 v61;
  std::error_code v62;
  __int128 v63;
  __int16 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)(a1 + 16);
  v46 = *(int64x2_t *)a1;
  v47 = v10;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)&v46, (uint64_t)&v62);
  v11 = v64;
  if ((v64 & 1) != 0)
  {
    v12 = *(void **)&v62.__val_;
    *(_QWORD *)&v62.__val_ = 0;
    if (v12)
    {
      __p = v12;
      *(_QWORD *)&v56.__val_ = llvm::errorToErrorCode((_QWORD **)&__p);
      v56.__cat_ = v13;
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
      std::error_code::message((std::string *)v45, &v56);
      v61 = 260;
      *(_QWORD *)&__dst = v45;
      LODWORD(v49[1]) = 0;
      BYTE4(v49[1]) = 0;
      v49[0] = &off_1E814E960;
      v50 = 0;
      p_dst = &__dst;
      v52 = 0;
      llvm::LLVMContext::diagnose((uint64_t)a3, (const llvm::DiagnosticInfo *)v49);
      if ((v45[23] & 0x80000000) != 0)
        operator delete(*(void **)v45);
      v14 = *(_QWORD *)&v56.__val_;
      cat = v56.__cat_;
      v15 = -1;
LABEL_42:
      if (*(_QWORD *)&v62.__val_)
        (*(void (**)(_QWORD))(**(_QWORD **)&v62.__val_ + 8))(*(_QWORD *)&v62.__val_);
      goto LABEL_44;
    }
  }
  *(std::error_code *)v45 = v62;
  *(_OWORD *)&v45[16] = v63;
  llvm::getBitcodeProducerString((uint64_t)v45, (uint64_t)&__dst);
  sub_1C58F8948((char *)v49, (uint64_t)a3, (uint64_t)&__dst);
  if ((v60 & 1) != 0)
  {
    v16 = __dst;
    *(_QWORD *)&__dst = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else if (SHIBYTE(v59) < 0)
  {
    operator delete((void *)__dst);
  }
  if ((p_dst & 1) != 0)
    goto LABEL_30;
  *(_QWORD *)&v56.__val_ = &off_1E817EA48;
  v56.__cat_ = a3;
  *((_QWORD *)&v57 + 1) = &v56;
  v55 = 0;
  LOBYTE(__p) = 0;
  llvm::checkBitcodeCompatibility((uint64_t)v49, (uint64_t)&__p, 0, (uint64_t *)&v48);
  if (v55 < 0)
    operator delete(__p);
  if (v48)
  {
    __p = v48;
    v14 = llvm::errorToErrorCodeAndEmitErrors((uint64_t)a3, (char **)&__p);
    cat = v17;
    if (__p)
      (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    v18 = (std::error_code *)*((_QWORD *)&v57 + 1);
    if (*((std::error_code **)&v57 + 1) == &v56)
    {
      v19 = (void (**)(std::error_code *))(*(_QWORD *)&v56.__val_ + 32);
      v18 = &v56;
    }
    else
    {
      if (!*((_QWORD *)&v57 + 1))
      {
LABEL_27:
        v15 = -1;
        goto LABEL_38;
      }
      v19 = (void (**)(std::error_code *))(**((_QWORD **)&v57 + 1) + 40);
    }
    (*v19)(v18);
    goto LABEL_27;
  }
  v20 = (std::error_code *)*((_QWORD *)&v57 + 1);
  if (*((std::error_code **)&v57 + 1) == &v56)
  {
    v21 = (void (**)(std::error_code *))(*(_QWORD *)&v56.__val_ + 32);
    v20 = &v56;
    goto LABEL_29;
  }
  if (*((_QWORD *)&v57 + 1))
  {
    v21 = (void (**)(std::error_code *))(**((_QWORD **)&v57 + 1) + 40);
LABEL_29:
    (*v21)(v20);
  }
LABEL_30:
  v56 = v62;
  v57 = v63;
  if ((cat & 1) != 0)
    llvm::getLazyBitcodeModule(&v56, (uint64_t)a3, 1, 0, (uint64_t)&__p);
  else
    llvm::parseBitcodeFile(&v56, (uint64_t)a3, (uint64_t)sub_1C58FB738, (uint64_t)&v44, (uint64_t)&__p);
  if ((v54 & 1) != 0)
  {
    v22 = (char *)__p;
    __p = 0;
    v48 = v22;
    v14 = llvm::errorToErrorCodeAndEmitErrors((uint64_t)a3, &v48);
    cat = v23;
    if (v48)
      (*(void (**)(char *))(*(_QWORD *)v48 + 8))(v48);
    v15 = -1;
  }
  else
  {
    v15 = 0;
    v14 = (uint64_t)__p;
    __p = 0;
  }
  sub_1C4FF9CA4((uint64_t)&__p);
LABEL_38:
  if ((p_dst & 1) == 0 && SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if ((v11 & 1) != 0)
    goto LABEL_42;
LABEL_44:
  if ((v15 & 1) != 0)
  {
    if ((_DWORD)v14)
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v14;
      *(_QWORD *)(a5 + 8) = cat;
      return;
    }
  }
  else
  {
    std::system_category();
  }
  if (*(char *)(v14 + 239) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(v14 + 216), *(_QWORD *)(v14 + 224));
  }
  else
  {
    __dst = *(_OWORD *)(v14 + 216);
    v59 = *(_QWORD *)(v14 + 232);
  }
  v24 = HIBYTE(v59) & 0x7F;
  if (v59 < 0)
    v24 = *((_QWORD *)&__dst + 1);
  if (!v24)
  {
    llvm::sys::getDefaultTargetTriple((uint64_t)v49);
    if (SHIBYTE(v59) < 0)
      operator delete((void *)__dst);
    __dst = *(_OWORD *)v49;
    v59 = v50;
  }
  v64 = 260;
  *(_QWORD *)&v62.__val_ = &__dst;
  llvm::Triple::Triple((uint64_t)v49, (llvm::Twine *)&v62);
  v62 = (std::error_code)0;
  *(_QWORD *)&v63 = 0;
  v25 = llvm::TargetRegistry::lookupTarget((std::string::size_type)&__dst, (uint64_t)&v62);
  if (v25)
  {
    v28 = (uint64_t)v25;
    v46 = 0uLL;
    *(_QWORD *)&v47 = 0;
    llvm::SubtargetFeatures::Split((unint64_t *)&v46, (uint64_t)"", 0);
    llvm::SubtargetFeatures::getDefaultSubtargetFeatures(&v46, (const llvm::Triple *)v49);
    sub_1C5021A04((std::string *)v46.i64[0], (std::string *)v46.i64[1], ",", 1uLL, (std::string *)v45);
    v29 = 0;
    v30 = 0;
    *(_QWORD *)&v56.__val_ = 0;
    v56.__cat_ = 0;
    *(_QWORD *)&v57 = 0;
    if (HIDWORD(v52) > 0x21)
    {
      v31 = 0;
      goto LABEL_86;
    }
    v31 = 0;
    if (((1 << SBYTE4(v52)) & 0x3F0000888) != 0)
    {
      v29 = 0;
      v30 = 0;
      if ((int)p_dst <= 40)
      {
        if ((_DWORD)p_dst == 3)
        {
          if (HIDWORD(p_dst) != 31)
          {
            v32 = "cyclone";
            goto LABEL_85;
          }
        }
        else
        {
          v31 = 0;
          if ((_DWORD)p_dst != 5)
            goto LABEL_86;
        }
        v32 = "apple-a12";
LABEL_85:
        MEMORY[0x1CAA32ABC](&v56, v32);
        v29 = BYTE7(v57);
        v31 = *(std::error_code **)&v56.__val_;
        v30 = v56.__cat_;
        goto LABEL_86;
      }
      if ((_DWORD)p_dst == 42)
      {
        v32 = "core2";
        goto LABEL_85;
      }
      v31 = 0;
      if ((_DWORD)p_dst == 41)
      {
        v32 = "yonah";
        goto LABEL_85;
      }
    }
LABEL_86:
    if (v59 >= 0)
      v33 = &__dst;
    else
      v33 = (__int128 *)__dst;
    if (v59 >= 0)
      v34 = HIBYTE(v59) & 0x7F;
    else
      v34 = *((_QWORD *)&__dst + 1);
    v35 = v29 < 0;
    if (v29 >= 0)
      v36 = &v56;
    else
      v36 = v31;
    v37 = v29 & 0x7F;
    if (v35)
      v38 = (uint64_t)v30;
    else
      v38 = v37;
    if (v45[23] >= 0)
      v39 = v45;
    else
      v39 = *(_BYTE **)v45;
    if (v45[23] >= 0)
      v40 = v45[23] & 0x7F;
    else
      v40 = *(_QWORD *)&v45[8];
    v41 = sub_1C4D7B2D4(v28, (uint64_t)v33, v34, (uint64_t)v36, v38, (uint64_t)v39, v40, a2, 0, 0, 2, 0);
    v42 = operator new();
    v43 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)a1;
    *(_OWORD *)(v42 + 56) = v43;
    *(_OWORD *)v42 = 0u;
    *(_OWORD *)(v42 + 16) = 0u;
    *(_QWORD *)(v42 + 32) = v14;
    *(_QWORD *)(v42 + 80) = 0;
    *(_QWORD *)(v42 + 88) = 0;
    *(_QWORD *)(v42 + 72) = 0;
    *(_QWORD *)(v42 + 96) = v42 + 112;
    *(_QWORD *)(v42 + 104) = 0x400000000;
    *(_QWORD *)(v42 + 144) = v42 + 160;
    *(_OWORD *)(v42 + 152) = 0u;
    *(_OWORD *)(v42 + 168) = 0u;
    *(_OWORD *)(v42 + 184) = 0u;
    *(_OWORD *)(v42 + 200) = 0u;
    *(_DWORD *)(v42 + 216) = 0;
    *(_QWORD *)(v42 + 224) = v41;
    *(_OWORD *)(v42 + 248) = 0u;
    *(_OWORD *)(v42 + 232) = 0u;
    *(_OWORD *)(v42 + 260) = 0u;
    *(_DWORD *)(v42 + 276) = 8;
    *(_QWORD *)(v42 + 288) = 0;
    *(_QWORD *)(v42 + 296) = 0;
    *(_QWORD *)(v42 + 304) = 0x2800000000;
    *(_OWORD *)(v42 + 320) = 0u;
    *(_OWORD *)(v42 + 336) = 0u;
    *(_OWORD *)(v42 + 352) = 0u;
    llvm::ModuleSymbolTable::addModule((llvm::ModuleSymbolTable *)(v42 + 72), (llvm::Module *)v14);
    llvm::LTOModule::parseSymbols((llvm::LTOModule *)v42);
    llvm::LTOModule::parseMetadata((llvm::LTOModule *)v42);
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v42;
    if (SBYTE7(v57) < 0)
      operator delete(*(void **)&v56.__val_);
    if ((v45[23] & 0x80000000) != 0)
      operator delete(*(void **)v45);
    *(_QWORD *)v45 = &v46;
    sub_1C4765410((void ***)v45);
    v14 = 0;
    goto LABEL_61;
  }
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v27 = qword_1EF8F7238[0];
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = 1;
  *(_QWORD *)(a5 + 8) = v27;
LABEL_61:
  if (SBYTE7(v63) < 0)
    operator delete(*(void **)&v62.__val_);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)__dst);
  if ((v15 & 1) == 0)
  {
    if (v14)
    {
      llvm::Module::~Module((llvm::Module *)v14);
      MEMORY[0x1CAA32FC0]();
    }
  }
}

void llvm::LTOModule::createFromOpenFile(const std::error_category *a1@<X0>, int a2@<W1>, uint64_t (**a3)(llvm::DiagnosticInfo *__hidden this)@<X2>, uint64_t a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  llvm::LTOModule::createFromOpenFileSlice(a1, a2, a3, a4, a5, 0, a6, a7);
}

void llvm::LTOModule::createFromOpenFileSlice(const std::error_category *a1@<X0>, int a2@<W1>, uint64_t (**a3)(llvm::DiagnosticInfo *__hidden this)@<X2>, uint64_t a4@<X3>, size_t a5@<X4>, off_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  std::string v17;
  std::string *v18;
  __int16 v19;
  std::error_code v20;
  uint64_t (**v21)(llvm::DiagnosticInfo *__hidden);
  uint64_t v22;
  uint64_t v23;
  std::string **v24;
  uint64_t v25;
  std::error_code v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  LOWORD(v25) = 261;
  v21 = a3;
  v22 = a4;
  sub_1C5E1FFD0(a2, (uint64_t)&v21, 0xFFFFFFFFFFFFFFFFLL, a5, a6, 0, 0, (uint64_t)&v26);
  if ((v27 & 1) == 0)
  {
    std::system_category();
    v11 = *(_QWORD **)&v26.__val_;
LABEL_7:
    v12 = v11[1];
    v13 = v11[2] - v12;
    v14 = (*(uint64_t (**)(_QWORD *))(*v11 + 16))(v11);
    v16[0] = v12;
    v16[1] = v13;
    v16[2] = v14;
    v16[3] = v15;
    llvm::LTOModule::makeLTOModule((uint64_t)v16, a7, a1, 0, a8);
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    return;
  }
  v11 = *(_QWORD **)&v26.__val_;
  v20 = v26;
  if (!v26.__val_)
    goto LABEL_7;
  std::error_code::message(&v17, &v20);
  v19 = 260;
  v18 = &v17;
  LODWORD(v22) = 0;
  BYTE4(v22) = 0;
  v21 = &off_1E814E960;
  v23 = 0;
  v24 = &v18;
  v25 = 0;
  llvm::LLVMContext::diagnose((uint64_t)a1, (const llvm::DiagnosticInfo *)&v21);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  *(_BYTE *)(a8 + 16) |= 1u;
  *(std::error_code *)a8 = v20;
}

void llvm::LTOModule::createFromBuffer(const std::error_category *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD v7[4];

  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a5;
  v7[3] = a6;
  llvm::LTOModule::makeLTOModule((uint64_t)v7, a4, a1, 0, a7);
}

void llvm::LTOModule::createInLocalContext(const std::error_category **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  llvm::Value *v9;
  llvm::LLVMContextImpl ***v10;
  const std::error_category *v11;
  llvm::LLVMContextImpl **v12;
  _QWORD v13[4];

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a5;
  v13[3] = a6;
  llvm::LTOModule::makeLTOModule((uint64_t)v13, a4, *a1, (const std::error_category *)1, a7);
  if ((*(_BYTE *)(a7 + 16) & 1) == 0)
  {
    v10 = *(llvm::LLVMContextImpl ****)a7;
    v11 = *a1;
    *a1 = 0;
    v12 = *v10;
    *v10 = (llvm::LLVMContextImpl **)v11;
    if (v12)
    {
      llvm::LLVMContext::~LLVMContext(v12, v9);
      JUMPOUT(0x1CAA32FC0);
    }
  }
}

void llvm::LTOModule::parseSymbols(llvm::LTOModule *this)
{
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char SymbolFlags;
  char v8;
  uint64_t v9;
  int v10;
  llvm::LTOModule *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v15;
  size_t v16;
  int v17;
  size_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v46)();
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  _BYTE v55[96];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)*((_QWORD *)this + 22);
  v2 = *((_QWORD *)this + 23) - (_QWORD)v1;
  if (v2)
  {
    v3 = (char *)this + 72;
    v4 = 8 * (v2 >> 3);
    do
    {
      v5 = *v1;
      if ((*v1 & 4) != 0)
        v6 = 0;
      else
        v6 = *v1 & 0xFFFFFFFFFFFFFFF8;
      SymbolFlags = llvm::ModuleSymbolTable::getSymbolFlags((uint64_t)v3, *v1);
      if ((SymbolFlags & 0x80) == 0)
      {
        v8 = SymbolFlags;
        if (v6)
        {
          if ((SymbolFlags & 1) != 0)
          {
            llvm::LTOModule::addPotentialUndefinedSymbol((uint64_t)this, v5, *(_BYTE *)(v6 + 16) == 0);
          }
          else if (*(_BYTE *)(v6 + 16))
          {
            llvm::LTOModule::addDefinedDataSymbol(this, v5);
          }
          else
          {
            llvm::LTOModule::addDefinedFunctionSymbol(this, v5);
          }
        }
        else
        {
          *(_OWORD *)&v55[8] = xmmword_1C64638C0;
          v47 = 0;
          v51 = 0;
          v52 = 0;
          v46 = &off_1E81A7280;
          v54 = v55;
          *(_QWORD *)v55 = &v55[24];
          v53 = 0;
          v49 = 0;
          v50 = 0;
          v48 = 0;
          llvm::ModuleSymbolTable::printSymbolName((uint64_t)v3, (llvm::raw_ostream *)&v46, v5);
          v9 = *(_QWORD *)&v55[8];
          if ((unint64_t)(*(_QWORD *)&v55[8] + 1) > *(_QWORD *)&v55[16])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v55, &v55[24], *(_QWORD *)&v55[8] + 1, 1);
            v9 = *(_QWORD *)&v55[8];
          }
          *(_BYTE *)(*(_QWORD *)v55 + v9) = 0;
          v46 = (uint64_t (**)())off_1E81A6E70;
          if (v53 == 1 && v48)
            MEMORY[0x1CAA32F9C](v48, 0x1000C8077774924);
          if ((v8 & 1) != 0)
          {
            llvm::LTOModule::addAsmGlobalSymbolUndef(this, *(unsigned __int8 **)v55, *(size_t *)&v55[8]);
          }
          else
          {
            if ((v8 & 2) != 0)
              v10 = 6144;
            else
              v10 = 2048;
            llvm::LTOModule::addAsmGlobalSymbol((uint64_t)this, *(unsigned __int8 **)v55, *(size_t *)&v55[8], v10);
          }
          if (*(_BYTE **)v55 != &v55[24])
            free(*(void **)v55);
        }
      }
      ++v1;
      v4 -= 8;
    }
    while (v4);
  }
  v11 = this;
  v12 = *((unsigned int *)this + 74);
  if ((_DWORD)v12)
  {
    for (i = (uint64_t *)*((_QWORD *)this + 36); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (uint64_t *)*((_QWORD *)this + 36);
  }
  v43 = *((_QWORD *)this + 36) + 8 * v12;
  if (i != (uint64_t *)v43)
  {
    v15 = *i;
    do
    {
      v44 = *((unsigned int *)v11 + 66);
      if (!(_DWORD)v44)
        goto LABEL_53;
      v16 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        v17 = 0;
        v18 = *(_QWORD *)v15;
        v19 = (unsigned __int8 *)(v15 + 40);
        do
        {
          v20 = *v19++;
          v17 = 33 * v17 + v20;
          --v18;
        }
        while (v18);
      }
      else
      {
        v17 = 0;
      }
      v21 = *((_QWORD *)v11 + 32);
      v22 = 1;
      v23 = v17;
      while (1)
      {
        v24 = v23 & (v44 - 1);
        v25 = *(_QWORD **)(v21 + 8 * v24);
        if (v25 != (_QWORD *)-8)
        {
          if (!v25)
            goto LABEL_53;
          if (*(_DWORD *)(v21 + 8 * v44 + 8 + 4 * v24) == v17 && v16 == *v25)
          {
            if (!v16)
              break;
            v26 = memcmp((const void *)(v15 + 40), (char *)v25 + *((unsigned int *)v11 + 69), v16);
            v11 = this;
            if (!v26)
              break;
          }
        }
        v23 = v22 + v24;
        ++v22;
      }
      if ((_DWORD)v24 == -1 || (int)v24 == v44)
      {
LABEL_53:
        *(_OWORD *)v55 = *(_OWORD *)(v15 + 8);
        *(_OWORD *)&v55[16] = *(_OWORD *)(v15 + 24);
        v28 = (char *)*((_QWORD *)v11 + 30);
        v27 = *((_QWORD *)v11 + 31);
        if ((unint64_t)v28 >= v27)
        {
          v31 = (char *)*((_QWORD *)v11 + 29);
          v32 = (v28 - v31) >> 5;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 59)
            abort();
          v34 = v27 - (_QWORD)v31;
          if (v34 >> 4 > v33)
            v33 = v34 >> 4;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0)
            v35 = 0x7FFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 59)
              sub_1C4764EE4();
            v36 = (char *)operator new(32 * v35);
            v11 = this;
          }
          else
          {
            v36 = 0;
          }
          v37 = *(_OWORD *)&v55[16];
          v38 = &v36[32 * v32];
          *(_OWORD *)v38 = *(_OWORD *)v55;
          *((_OWORD *)v38 + 1) = v37;
          v39 = v38;
          if (v28 != v31)
          {
            do
            {
              v40 = *((_OWORD *)v28 - 1);
              *((_OWORD *)v39 - 2) = *((_OWORD *)v28 - 2);
              *((_OWORD *)v39 - 1) = v40;
              v39 -= 32;
              v28 -= 32;
            }
            while (v28 != v31);
            v28 = (char *)*((_QWORD *)v11 + 29);
          }
          v30 = v38 + 32;
          *((_QWORD *)v11 + 29) = v39;
          *((_QWORD *)v11 + 30) = v38 + 32;
          *((_QWORD *)v11 + 31) = &v36[32 * v35];
          if (v28)
          {
            operator delete(v28);
            v11 = this;
          }
        }
        else
        {
          v29 = *(_OWORD *)(v15 + 24);
          *(_OWORD *)v28 = *(_OWORD *)(v15 + 8);
          *((_OWORD *)v28 + 1) = v29;
          v30 = v28 + 32;
        }
        *((_QWORD *)v11 + 30) = v30;
      }
      do
      {
        v41 = i[1];
        ++i;
        v15 = v41;
        if (v41)
          v42 = v15 == -8;
        else
          v42 = 1;
      }
      while (v42);
    }
    while (i != (uint64_t *)v43);
  }
}

void llvm::LTOModule::parseMetadata(llvm::LTOModule *this)
{
  uint64_t v1;
  uint64_t NamedMetadata;
  llvm::Mangler *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _QWORD *v13;
  size_t *v14;
  const void *v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  _QWORD v24[2];
  int v25;
  void *__p[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void (**v30)(llvm::raw_ostream *__hidden);
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  int v37;
  char *v38;

  v31 = 0;
  v35 = 0;
  v36 = 0;
  v30 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v38 = (char *)this + 8;
  v37 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v1 = *((_QWORD *)this + 4);
  __p[0] = "llvm.linker.options";
  WORD4(v28) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v1, (uint64_t)__p);
  if (NamedMetadata)
  {
    v4 = NamedMetadata;
    v5 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + 8 * i);
        v8 = *(unsigned int *)(v7 + 8);
        v9 = v7;
        if ((_DWORD)v8)
        {
          do
          {
            v10 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v7 + 8));
            if (v33 == v34)
            {
              v11 = llvm::raw_ostream::write((llvm::raw_ostream *)&v30, " ", 1uLL);
              v13 = (_QWORD *)((char *)v11 + 32);
              v12 = (_BYTE *)*((_QWORD *)v11 + 4);
            }
            else
            {
              *v34 = 32;
              v12 = ++v34;
              v11 = (llvm::raw_ostream *)&v30;
              v13 = &v34;
            }
            v14 = *(size_t **)(v10 + 8);
            v17 = *v14;
            v15 = v14 + 3;
            v16 = v17;
            if (v17 <= *((_QWORD *)v11 + 3) - (_QWORD)v12)
            {
              if (v16)
              {
                memcpy(v12, v15, v16);
                *v13 += v16;
              }
            }
            else
            {
              llvm::raw_ostream::write(v11, (const char *)v15, v16);
            }
            v9 += 8;
            --v8;
          }
          while (v8);
        }
      }
    }
  }
  v18 = *((_QWORD *)this + 28);
  if (*(char *)(v18 + 471) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(v18 + 448), *(_QWORD *)(v18 + 456));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v18 + 448);
    v27 = *(_QWORD *)(v18 + 464);
  }
  v29 = *(_QWORD *)(v18 + 488);
  v28 = *(_OWORD *)(v18 + 472);
  if (HIDWORD(v29) == 1)
  {
    v24[0] = 0;
    v24[1] = 0;
    v25 = 0;
    v19 = *((_QWORD *)this + 29);
    v20 = *((_QWORD *)this + 30);
    if (v19 == v20)
    {
      v22 = 0;
    }
    else
    {
      do
      {
        v21 = *(llvm::raw_ostream **)(v19 + 24);
        if (v21)
          llvm::emitLinkerFlagsForGlobalCOFF((llvm *)&v30, v21, (const llvm::GlobalValue *)__p, (const llvm::Triple *)v24, v3);
        v19 += 32;
      }
      while (v19 != v20);
      v22 = v24[0];
    }
    MEMORY[0x1CAA32FB4](v22, 8);
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v30 = off_1E81A6E70;
  if (v37 == 1)
  {
    if (v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8077774924);
  }
}

char *llvm::LTOModule::makeBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  char *result;
  _QWORD v9[4];
  __int16 v10;
  const void ***v11;

  v10 = 261;
  v9[0] = a3;
  v9[1] = a4;
  v11 = (const void ***)v9;
  result = sub_1C5E1F380(24, &v11);
  *(_QWORD *)result = &off_1E81A17B0;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = a1 + a2;
  *a5 = result;
  return result;
}

BOOL llvm::LTOModule::objcClassNameFromExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;
  BOOL v5;
  llvm::ConstantDataSequential *v6;
  BOOL v7;
  uint64_t RawDataValues;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  __int128 v14;
  uint64_t v15;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 5)
  {
    v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (v4)
      v5 = *(_BYTE *)(v4 + 16) == 3;
    else
      v5 = 0;
    if (v5
      && ((v6 = *(llvm::ConstantDataSequential **)(v4 - 32)) != 0 ? (v7 = *((_BYTE *)v6 + 16) == 14) : (v7 = 0), v7))
    {
      result = llvm::ConstantDataSequential::isCString(v6);
      if (result)
      {
        RawDataValues = llvm::ConstantDataSequential::getRawDataValues(v6);
        v11 = v10 - 1;
        if (v10 < v10 - 1)
          v11 = v10;
        v13 = 1283;
        v12[0] = ".objc_class_name_";
        v12[2] = RawDataValues;
        v12[3] = v11;
        llvm::Twine::str((llvm::Twine *)v12, &v14);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(_OWORD *)a3 = v14;
        *(_QWORD *)(a3 + 16) = v15;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::LTOModule::addObjCClass(llvm::LTOModule *this, const llvm::GlobalVariable *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v6;
  unsigned __int8 *v7;
  size_t v8;
  uint64_t **v9;
  char v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 *v34;
  size_t v35;
  _OWORD v36[2];
  __int128 v37;
  uint64_t v38;

  v2 = *((_QWORD *)a2 - 4);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 9;
  else
    v3 = 0;
  if (v3)
  {
    v37 = 0uLL;
    v38 = 0;
    v6 = llvm::LTOModule::objcClassNameFromExpression((uint64_t)this, *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), (uint64_t)&v37);
    if ((_DWORD)v6)
    {
      if (SHIBYTE(v38) < 0)
      {
        sub_1C47EBC30(__p, (void *)v37, *((unint64_t *)&v37 + 1));
      }
      else
      {
        *(_OWORD *)__p = v37;
        v31 = v38;
      }
      if (v31 >= 0)
        v7 = (unsigned __int8 *)__p;
      else
        v7 = (unsigned __int8 *)__p[0];
      v33 = 0u;
      v32 = 0u;
      if (v31 >= 0)
        v8 = HIBYTE(v31) & 0x7F;
      else
        v8 = (size_t)__p[1];
      v34 = v7;
      v35 = v8;
      memset(v36, 0, sizeof(v36));
      v6 = (uint64_t)sub_1C58FB744((llvm::LTOModule *)((char *)this + 288), v7, v8, v36);
      v9 = (uint64_t **)v6;
      v11 = v10;
      if (SHIBYTE(v31) < 0)
        operator delete(__p[0]);
      if (v11)
      {
        v12 = *v9;
        v13 = **v9;
        v12[1] = (uint64_t)(*v9 + 5);
        v12[2] = v13;
        *((_DWORD *)v12 + 6) = 1024;
        *((_BYTE *)v12 + 28) = 0;
        v12[4] = (uint64_t)a2;
      }
    }
    __p[1] = 0;
    v31 = 0;
    __p[0] = 0;
    if (llvm::LTOModule::objcClassNameFromExpression(v6, *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64), (uint64_t)__p))
    {
      if (v31 >= 0)
        v14 = (unsigned __int8 *)__p;
      else
        v14 = (unsigned __int8 *)__p[0];
      if (v31 >= 0)
        v15 = HIBYTE(v31) & 0x7F;
      else
        v15 = (size_t)__p[1];
      v16 = (uint64_t **)sub_1C4F024D8((llvm::LTOModule *)((char *)this + 256), v14, v15);
      v17 = (uint64_t)(*v16 + 1);
      v18 = **v16;
      v20 = (uint64_t *)*((_QWORD *)this + 30);
      v19 = *((_QWORD *)this + 31);
      if ((unint64_t)v20 >= v19)
      {
        v22 = (uint64_t *)*((_QWORD *)this + 29);
        v23 = ((char *)v20 - (char *)v22) >> 5;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59)
          abort();
        v25 = v19 - (_QWORD)v22;
        if (v25 >> 4 > v24)
          v24 = v25 >> 4;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
          v26 = 0x7FFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 >> 59)
            sub_1C4764EE4();
          v27 = (char *)operator new(32 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[32 * v23];
        *(_QWORD *)v28 = v17;
        *((_QWORD *)v28 + 1) = v18;
        *((_DWORD *)v28 + 4) = 6592;
        v28[20] = 0;
        *((_QWORD *)v28 + 3) = a2;
        v21 = v28 + 32;
        if (v20 != v22)
        {
          do
          {
            v29 = *((_OWORD *)v20 - 1);
            *((_OWORD *)v28 - 2) = *((_OWORD *)v20 - 2);
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 32;
            v20 -= 4;
          }
          while (v20 != v22);
          v20 = (uint64_t *)*((_QWORD *)this + 29);
        }
        *((_QWORD *)this + 29) = v28;
        *((_QWORD *)this + 30) = v21;
        *((_QWORD *)this + 31) = &v27[32 * v26];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v20 = v17;
        v20[1] = v18;
        *((_DWORD *)v20 + 4) = 6592;
        *((_BYTE *)v20 + 20) = 0;
        v21 = v20 + 4;
        v20[3] = (uint64_t)a2;
      }
      *((_QWORD *)this + 30) = v21;
    }
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v38) < 0)
      operator delete((void *)v37);
  }
}

void llvm::LTOModule::addObjCCategory(llvm::LTOModule *this, const llvm::GlobalVariable *a2)
{
  uint64_t v2;
  BOOL v3;
  llvm::StringMapImpl *v6;
  char v7;
  unsigned __int8 *v8;
  size_t v9;
  uint64_t **v10;
  char v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unsigned __int8 *v19;
  size_t v20;
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 - 4);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 9;
  else
    v3 = 0;
  if (v3)
  {
    v22 = 0uLL;
    v23 = 0;
    if (llvm::LTOModule::objcClassNameFromExpression((uint64_t)this, *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), (uint64_t)&v22))
    {
      v6 = (llvm::LTOModule *)((char *)this + 288);
      v7 = HIBYTE(v23);
      if (SHIBYTE(v23) < 0)
      {
        sub_1C47EBC30(__p, (void *)v22, *((unint64_t *)&v22 + 1));
      }
      else
      {
        *(_OWORD *)__p = v22;
        v16 = v23;
      }
      if (v16 >= 0)
        v8 = (unsigned __int8 *)__p;
      else
        v8 = (unsigned __int8 *)__p[0];
      v18 = 0u;
      v17 = 0u;
      if (v16 >= 0)
        v9 = HIBYTE(v16) & 0x7F;
      else
        v9 = (size_t)__p[1];
      v19 = v8;
      v20 = v9;
      memset(v21, 0, sizeof(v21));
      v10 = (uint64_t **)sub_1C58FB744(v6, v8, v9, v21);
      v12 = v11;
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      if (v12)
      {
        v13 = *v10;
        v14 = **v10;
        v13[1] = (uint64_t)(*v10 + 5);
        v13[2] = v14;
        *((_DWORD *)v13 + 6) = 1024;
        *((_BYTE *)v13 + 28) = 0;
        v13[4] = (uint64_t)a2;
      }
    }
    else
    {
      v7 = HIBYTE(v23);
    }
    if (v7 < 0)
      operator delete((void *)v22);
  }
}

void llvm::LTOModule::addObjCClassRef(llvm::LTOModule *this, const llvm::GlobalVariable *a2)
{
  llvm::StringMapImpl *v4;
  char v5;
  unsigned __int8 *v6;
  size_t v7;
  uint64_t **v8;
  char v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unsigned __int8 *v17;
  size_t v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;

  v20 = 0uLL;
  v21 = 0;
  if (llvm::LTOModule::objcClassNameFromExpression((uint64_t)this, *((_QWORD *)a2 - 4), (uint64_t)&v20))
  {
    v4 = (llvm::LTOModule *)((char *)this + 288);
    v5 = HIBYTE(v21);
    if (SHIBYTE(v21) < 0)
    {
      sub_1C47EBC30(__p, (void *)v20, *((unint64_t *)&v20 + 1));
    }
    else
    {
      *(_OWORD *)__p = v20;
      v14 = v21;
    }
    if (v14 >= 0)
      v6 = (unsigned __int8 *)__p;
    else
      v6 = (unsigned __int8 *)__p[0];
    v16 = 0u;
    v15 = 0u;
    if (v14 >= 0)
      v7 = HIBYTE(v14) & 0x7F;
    else
      v7 = (size_t)__p[1];
    v17 = v6;
    v18 = v7;
    memset(v19, 0, sizeof(v19));
    v8 = (uint64_t **)sub_1C58FB744(v4, v6, v7, v19);
    v10 = v9;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (v10)
    {
      v11 = *v8;
      v12 = **v8;
      v11[1] = (uint64_t)(*v8 + 5);
      v11[2] = v12;
      *((_DWORD *)v11 + 6) = 1024;
      *((_BYTE *)v11 + 28) = 0;
      v11[4] = (uint64_t)a2;
    }
  }
  else
  {
    v5 = HIBYTE(v21);
  }
  if (v5 < 0)
    operator delete((void *)v20);
}

void llvm::LTOModule::addDefinedDataSymbol(llvm::LTOModule *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (**v5)();
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14;
  __int128 v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C64638C0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v5 = &off_1E81A7280;
  v13 = &v14;
  v12 = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  llvm::ModuleSymbolTable::printSymbolName((uint64_t)a1 + 72, (llvm::raw_ostream *)&v5, a2);
  v4 = v15;
  if ((unint64_t)(v15 + 1) > *((_QWORD *)&v15 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v14, v16, v15 + 1, 1);
    v4 = v15;
  }
  *((_BYTE *)v14 + v4) = 0;
  v5 = (uint64_t (**)())off_1E81A6E70;
  if (v12 == 1 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
  llvm::LTOModule::addDefinedDataSymbol(a1, (unsigned __int8 *)v14, v15, (llvm::GlobalValue *)(a2 & 0xFFFFFFFFFFFFFFF8));
  if (v14 != v16)
    free(v14);
}

void llvm::LTOModule::addDefinedDataSymbol(llvm::LTOModule *a1, unsigned __int8 *a2, size_t a3, llvm::GlobalValue *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  llvm::GlobalValue **v12;
  llvm::GlobalValue *v13;
  unint64_t v14;
  llvm::GlobalValue *v15;
  uint64_t v19;
  uint64_t v20;
  int v21;
  llvm::GlobalValue **v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  llvm::GlobalValue **v28;
  uint64_t v29;
  llvm::GlobalValue *v30;

  llvm::LTOModule::addDefinedSymbol(a1, a2, a3, (uint64_t)a4, 0);
  llvm::GlobalValue::getSection(a4);
  if (!v6 || !a4 || *((_BYTE *)a4 + 16) != 3 || (*((_BYTE *)a4 + 34) & 0x40) == 0)
    return;
  v7 = ***(_QWORD ***)a4;
  v30 = a4;
  v8 = *(_DWORD *)(v7 + 2520);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 2504);
    v10 = v8 - 1;
    v11 = v10 & ((a4 >> 4) ^ (a4 >> 9));
    v12 = (llvm::GlobalValue **)(v9 + 24 * v11);
    v13 = *v12;
    if (*v12 == a4)
      goto LABEL_7;
    v24 = 0;
    v25 = 1;
    while (v13 != (llvm::GlobalValue *)-4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v13 == (llvm::GlobalValue *)-8192;
      if (v26)
        v24 = v12;
      v27 = v11 + v25++;
      v11 = v27 & v10;
      v12 = (llvm::GlobalValue **)(v9 + 24 * v11);
      v13 = *v12;
      if (*v12 == a4)
        goto LABEL_7;
    }
    if (v24)
      v28 = v24;
    else
      v28 = v12;
  }
  else
  {
    v28 = 0;
  }
  v12 = (llvm::GlobalValue **)sub_1C53D65B8(v7 + 2504, (uint64_t)&v30, (uint64_t *)&v30, v28);
  v29 = (uint64_t)v30;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = (llvm::GlobalValue *)v29;
LABEL_7:
  v14 = (unint64_t)v12[2];
  if (v14 >= 0xF)
  {
    v15 = v12[1];
    if (*(_QWORD *)v15 == 0x5F2C434A424F5F5FLL && *(_QWORD *)((char *)v15 + 7) == 0x2C7373616C635F5FLL)
    {
      llvm::LTOModule::addObjCClass(a1, a4);
    }
    else if (v14 >= 0x12)
    {
      if (*(_QWORD *)v15 == 0x5F2C434A424F5F5FLL
        && *((_QWORD *)v15 + 1) == 0x726F67657461635FLL
        && *((_WORD *)v15 + 8) == 11385)
      {
        llvm::LTOModule::addObjCCategory(a1, a4);
      }
      else
      {
        v19 = *(_QWORD *)v15;
        v20 = *((_QWORD *)v15 + 1);
        v21 = *((unsigned __int16 *)v15 + 8);
        if (v19 == 0x5F2C434A424F5F5FLL && v20 == 0x6665725F736C635FLL && v21 == 11379)
          llvm::LTOModule::addObjCClassRef(a1, a4);
      }
    }
  }
}

void llvm::LTOModule::addDefinedSymbol(_QWORD *a1, unsigned __int8 *a2, size_t a3, uint64_t a4, char a5)
{
  unsigned int v10;
  BOOL v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t AliaseeObject;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;

  v10 = *(unsigned __int8 *)(a4 + 16);
  v11 = v10 > 3 || v10 == 1;
  if (v11)
  {
    v13 = 0;
    if ((a5 & 1) != 0)
    {
LABEL_8:
      v14 = 160;
      goto LABEL_14;
    }
  }
  else
  {
    v12 = *(_WORD *)(a4 + 34);
    v11 = (v12 & 0x3F) == 0;
    v13 = ((v12 & 0x3F) - 1);
    if (v11)
      v13 = 0;
    if ((a5 & 1) != 0)
      goto LABEL_8;
  }
  if (v10 == 3 && (*(_BYTE *)(a4 + 80) & 1) != 0)
    v14 = 128;
  else
    v14 = 192;
LABEL_14:
  v15 = v14 | v13;
  v16 = *(_DWORD *)(a4 + 32);
  if ((v16 & 0xE) == 4 || (v16 & 0xE) == 2)
  {
    v18 = v15 | 0x300;
    v19 = v16 & 0xF;
  }
  else
  {
    v19 = v16 & 0xF;
    if (v19 == 10)
    {
      v18 = v15 | 0x200;
      goto LABEL_25;
    }
    v18 = v15 | 0x100;
  }
  if ((v19 - 7) <= 1)
  {
    v20 = v18 | 0x800;
    goto LABEL_37;
  }
LABEL_25:
  if ((v16 & 0x30) == 0x20)
  {
    v20 = v18 | 0x2000;
    goto LABEL_37;
  }
  if ((v16 & 0x30) == 0x10)
  {
    v20 = v18 | 0x1000;
    goto LABEL_37;
  }
  if ((v16 & 0xF) != 3)
    goto LABEL_34;
  v21 = v16 & 0xC0;
  if (v21 != 128)
  {
    if (v10 == 3)
    {
      if (!v21 || (*(_BYTE *)(a4 + 80) & 1) == 0)
        goto LABEL_34;
    }
    else if (!v21)
    {
LABEL_34:
      v20 = v18 | 0x1800;
      goto LABEL_37;
    }
  }
  v20 = v18 | 0x2800;
LABEL_37:
  if (v10 != 2)
  {
    AliaseeObject = a4;
    if (v10 != 1 || (AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a4)) != 0)
    {
      if (*(_QWORD *)(AliaseeObject + 48))
        v20 |= 0x4000u;
    }
  }
  if (*(_BYTE *)(a4 + 16) == 1)
    v20 |= 0x8000u;
  v23 = (uint64_t **)sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 32), a2, a3);
  v24 = (uint64_t)(*v23 + 1);
  v25 = **v23;
  v27 = (uint64_t *)a1[30];
  v26 = a1[31];
  if ((unint64_t)v27 >= v26)
  {
    v29 = (uint64_t *)a1[29];
    v30 = ((char *)v27 - (char *)v29) >> 5;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 59)
      abort();
    v32 = v26 - (_QWORD)v29;
    if (v32 >> 4 > v31)
      v31 = v32 >> 4;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0)
      v33 = 0x7FFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 59)
        sub_1C4764EE4();
      v34 = (char *)operator new(32 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[32 * v30];
    *(_QWORD *)v35 = v24;
    *((_QWORD *)v35 + 1) = v25;
    *((_DWORD *)v35 + 4) = v20;
    v35[20] = a5;
    *((_QWORD *)v35 + 3) = a4;
    v28 = v35 + 32;
    if (v27 != v29)
    {
      do
      {
        v36 = *((_OWORD *)v27 - 1);
        *((_OWORD *)v35 - 2) = *((_OWORD *)v27 - 2);
        *((_OWORD *)v35 - 1) = v36;
        v35 -= 32;
        v27 -= 4;
      }
      while (v27 != v29);
      v27 = (uint64_t *)a1[29];
    }
    a1[29] = v35;
    a1[30] = v28;
    a1[31] = &v34[32 * v33];
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v27 = v24;
    v27[1] = v25;
    *((_DWORD *)v27 + 4) = v20;
    *((_BYTE *)v27 + 20) = a5;
    v28 = v27 + 4;
    v27[3] = a4;
  }
  a1[30] = v28;
}

void llvm::LTOModule::addDefinedFunctionSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (**v5)();
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14;
  __int128 v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C64638C0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v5 = &off_1E81A7280;
  v13 = &v14;
  v12 = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  llvm::ModuleSymbolTable::printSymbolName((uint64_t)(a1 + 9), (llvm::raw_ostream *)&v5, a2);
  v4 = v15;
  if ((unint64_t)(v15 + 1) > *((_QWORD *)&v15 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v14, v16, v15 + 1, 1);
    v4 = v15;
  }
  *((_BYTE *)v14 + v4) = 0;
  v5 = (uint64_t (**)())off_1E81A6E70;
  if (v12 == 1 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
  llvm::LTOModule::addDefinedSymbol(a1, (unsigned __int8 *)v14, v15, a2 & 0xFFFFFFFFFFFFFFF8, 1);
  if (v14 != v16)
    free(v14);
}

void llvm::LTOModule::addDefinedFunctionSymbol(_QWORD *a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  llvm::LTOModule::addDefinedSymbol(a1, a2, a3, a4, 1);
}

void llvm::LTOModule::addAsmGlobalSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3, int a4)
{
  size_t **v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  int v23;
  size_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t *v40;
  llvm::GlobalValue *v42;
  unsigned __int8 *v43;
  size_t v44;
  _OWORD *v45;
  size_t v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  size_t **v61;
  int v62;
  unsigned __int8 *__s1;

  v6 = (size_t **)sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 256), a2, a3);
  v8 = v7;
  v9 = (uint64_t)(*v6 + 1);
  v11 = *(uint64_t **)(a1 + 328);
  v10 = *(_QWORD *)(a1 + 336);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *(_QWORD **)(a1 + 320);
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      goto LABEL_77;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        goto LABEL_78;
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (uint64_t *)&v18[8 * v14];
    *v19 = v9;
    v12 = v19 + 1;
    if (v11 != v13)
    {
      do
      {
        v20 = *--v11;
        *--v19 = v20;
      }
      while (v11 != v13);
      v11 = *(uint64_t **)(a1 + 320);
    }
    *(_QWORD *)(a1 + 320) = v19;
    *(_QWORD *)(a1 + 328) = v12;
    *(_QWORD *)(a1 + 336) = &v18[8 * v17];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  *(_QWORD *)(a1 + 328) = v12;
  if (!v8)
    return;
  v21 = **v6;
  __s1 = (unsigned __int8 *)(*v6 + 1);
  v22 = *(_DWORD *)(a1 + 296);
  if (!v22)
  {
    *(_QWORD *)(a1 + 300) = 0;
    v60 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v60)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v60[16] = 2;
    *(_QWORD *)(a1 + 288) = v60;
    v22 = 16;
    *(_DWORD *)(a1 + 296) = 16;
  }
  v62 = a4;
  v23 = 0;
  if (v21)
  {
    v24 = v21;
    v25 = __s1;
    do
    {
      v26 = *v25++;
      v23 = 33 * v23 + v26;
      --v24;
    }
    while (v24);
  }
  v61 = v6;
  v27 = *(_QWORD *)(a1 + 288);
  v28 = v22 - 1;
  v29 = v27 + 8 * v22 + 8;
  v30 = -1;
  v31 = 1;
  v32 = v23;
  while (1)
  {
    v33 = v32 & v28;
    v34 = *(_QWORD *)(v27 + 8 * v33);
    if (!v34)
      break;
    if (v34 == -8)
    {
      if (v30 == -1)
        v30 = v32 & v28;
    }
    else if (*(_DWORD *)(v29 + 4 * v33) == v23
           && v21 == *(_QWORD *)v34
           && (!v21 || !memcmp(__s1, (const void *)(v34 + *(unsigned int *)(a1 + 308)), v21)))
    {
      goto LABEL_38;
    }
    v32 = v31 + v33;
    ++v31;
  }
  v35 = v30;
  if (v30 == -1)
  {
    v35 = v33;
    v33 = v33;
  }
  else
  {
    v33 = v30;
  }
  *(_DWORD *)(v29 + 4 * v35) = v23;
  v34 = *(_QWORD *)(v27 + 8 * v33);
LABEL_38:
  if (v34 == -8)
  {
    --*(_DWORD *)(a1 + 304);
  }
  else if (v34)
  {
    v36 = v62;
    goto LABEL_51;
  }
  v37 = (char *)operator new(v21 + 41, (std::align_val_t)8uLL);
  v38 = v37;
  v39 = v37 + 40;
  if (v21)
    memcpy(v37 + 40, __s1, v21);
  v39[v21] = 0;
  *(_QWORD *)v38 = v21;
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *(_QWORD *)(v27 + 8 * v33) = v38;
  ++*(_DWORD *)(a1 + 300);
  v40 = (uint64_t *)(*(_QWORD *)(a1 + 288)
                  + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 288), v33));
  v36 = v62;
  while (1)
  {
    v34 = *v40;
    if (*v40 && v34 != -8)
      break;
    ++v40;
  }
LABEL_51:
  v42 = *(llvm::GlobalValue **)(v34 + 32);
  if (!v42)
  {
    v45 = (_OWORD *)(v34 + 8);
    v46 = **v61;
    *(_QWORD *)(v34 + 8) = *v61 + 1;
    *(_QWORD *)(v34 + 16) = v46;
    *(_DWORD *)(v34 + 24) = v36 | 0x1C0;
    *(_BYTE *)(v34 + 28) = 0;
    *(_QWORD *)(v34 + 32) = 0;
    v48 = *(char **)(a1 + 240);
    v47 = *(_QWORD *)(a1 + 248);
    if ((unint64_t)v48 < v47)
    {
      v49 = *(_OWORD *)(v34 + 24);
      *(_OWORD *)v48 = *v45;
      *((_OWORD *)v48 + 1) = v49;
      v50 = v48 + 32;
LABEL_73:
      *(_QWORD *)(a1 + 240) = v50;
      return;
    }
    v51 = *(char **)(a1 + 232);
    v52 = (v48 - v51) >> 5;
    v53 = v52 + 1;
    if (!((unint64_t)(v52 + 1) >> 59))
    {
      v54 = v47 - (_QWORD)v51;
      if (v54 >> 4 > v53)
        v53 = v54 >> 4;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0)
        v55 = 0x7FFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (!v55)
      {
        v56 = 0;
        goto LABEL_68;
      }
      if (!(v55 >> 59))
      {
        v56 = (char *)operator new(32 * v55);
LABEL_68:
        v57 = &v56[32 * v52];
        v58 = *(_OWORD *)(v34 + 24);
        *(_OWORD *)v57 = *v45;
        *((_OWORD *)v57 + 1) = v58;
        v50 = v57 + 32;
        if (v48 != v51)
        {
          do
          {
            v59 = *((_OWORD *)v48 - 1);
            *((_OWORD *)v57 - 2) = *((_OWORD *)v48 - 2);
            *((_OWORD *)v57 - 1) = v59;
            v57 -= 32;
            v48 -= 32;
          }
          while (v48 != v51);
          v48 = *(char **)(a1 + 232);
        }
        *(_QWORD *)(a1 + 232) = v57;
        *(_QWORD *)(a1 + 240) = v50;
        *(_QWORD *)(a1 + 248) = &v56[32 * v55];
        if (v48)
          operator delete(v48);
        goto LABEL_73;
      }
LABEL_78:
      sub_1C4764EE4();
    }
LABEL_77:
    abort();
  }
  v43 = *(unsigned __int8 **)(v34 + 8);
  v44 = *(_QWORD *)(v34 + 16);
  if (*(_BYTE *)(v34 + 28))
    llvm::LTOModule::addDefinedSymbol((_QWORD *)a1, v43, v44, (uint64_t)v42, 1);
  else
    llvm::LTOModule::addDefinedDataSymbol((llvm::LTOModule *)a1, v43, v44, v42);
  *(_DWORD *)(*(_QWORD *)(a1 + 240) - 16) = *(_DWORD *)(*(_QWORD *)(a1 + 240) - 16) & 0xFFFFC7FF | v36;
}

